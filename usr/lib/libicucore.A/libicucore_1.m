double icu::RuleBasedBreakIterator57::init(icu::RuleBasedBreakIterator57 *this)
{
  double result;
  UErrorCode status;
  status = U_ZERO_ERROR;
  *((void *)this + 61) = utext_openUChars(0LL, 0LL, 0LL, &status);
  result = 0.0;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_DWORD *)this + 132) = 0;
  *((_BYTE *)this + 532) = 1;
  *((_DWORD *)this + 134) = 0;
  *((_DWORD *)this + 144) = 1;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  return result;
}

uint64_t icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  *(void *)icu::BreakIterator::BreakIterator(a1) = off_18970FCD0;
  UErrorCode status = U_ZERO_ERROR;
  *(void *)(a1 + 488) = utext_openUChars(0LL, 0LL, 0LL, &status);
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 532) = 1;
  *(_DWORD *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 576) = 1;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  v8 = icu::UMemory::operator new((uint64_t *)1, (icu::UMemory *)0xC0, v7);
  if (!v8)
  {
    *(void *)(a1 + 520) = 0LL;
    if (*a4 < 1)
    {
      *a4 = 7;
      return a1;
    }

    v10 = (void *)(a1 + 520);
    goto LABEL_6;
  }

  uint64_t v9 = sub_1807FD198((uint64_t)v8, a2, 0LL, a4);
  *(void *)(a1 + 520) = v9;
  if (*a4 >= 1)
  {
    v10 = (void *)(a1 + 520);
    v11 = (void *)sub_1807FD254(v9);
    icu::UMemory::operator delete(v11);
LABEL_6:
    void *v10 = 0LL;
  }

  return a1;
}

icu::RuleBasedBreakIterator57 *icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57( icu::RuleBasedBreakIterator57 *this, const icu::UnicodeString *a2, UParseError *a3, UErrorCode *a4)
{
  *(void *)icu::BreakIterator::BreakIterator((uint64_t)this) = off_18970FCD0;
  UErrorCode status = U_ZERO_ERROR;
  *((void *)this + 61) = utext_openUChars(0LL, 0LL, 0LL, &status);
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_DWORD *)this + 132) = 0;
  *((_BYTE *)this + 532) = 1;
  *((_DWORD *)this + 134) = 0;
  *((_DWORD *)this + 144) = 1;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  if (*(int *)a4 <= 0)
  {
    v8 = sub_1807FE3DC((unint64_t)a2, (uint64_t)a3, a4);
    if (*(int *)a4 <= 0)
    {
      uint64_t v9 = v8;
      icu::RuleBasedBreakIterator57::operator=((uint64_t)this, (uint64_t)v8);
      (*(void (**)(uint64_t *))(*v9 + 8))(v9);
    }
  }

  return this;
}

uint64_t icu::RuleBasedBreakIterator57::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    (*(void (**)(uint64_t))(*(void *)a1 + 200LL))(a1);
    *(_DWORD *)(a1 + 576) = *(_DWORD *)(a2 + 576);
    uint64_t v4 = *(void *)(a1 + 560);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
      *(void *)(a1 + 560) = 0LL;
    }

    UErrorCode status = U_ZERO_ERROR;
    *(void *)(a1 + 488) = utext_clone(*(UText **)(a1 + 488), *(const UText **)(a2 + 488), 0, 1, &status);
    uint64_t v5 = *(void *)(a1 + 496);
    if (v5 != *(void *)(a1 + 504) && v5 && v5 != *(void *)(a1 + 512)) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
    *(void *)(a1 + 496) = 0LL;
    uint64_t v6 = *(void *)(a2 + 496);
    if (v6) {
      *(void *)(a1 + 496) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 64LL))(v6);
    }
    uint64_t v7 = *(void *)(a1 + 520);
    if (v7)
    {
      sub_1807FD258(v7);
      *(void *)(a1 + 520) = 0LL;
    }

    uint64_t v8 = *(void *)(a2 + 520);
    if (v8) {
      *(void *)(a1 + 520) = sub_1807FD294(v8);
    }
  }

  return a1;
}

icu::RuleBasedBreakIterator57 *icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57( icu::RuleBasedBreakIterator57 *this)
{
  *(void *)icu::BreakIterator::BreakIterator((uint64_t)this) = off_18970FCD0;
  UErrorCode status = U_ZERO_ERROR;
  *((void *)this + 61) = utext_openUChars(0LL, 0LL, 0LL, &status);
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_DWORD *)this + 132) = 0;
  *((_BYTE *)this + 532) = 1;
  *((_DWORD *)this + 134) = 0;
  *((_DWORD *)this + 144) = 1;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  return this;
}

uint64_t icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57( icu::RuleBasedBreakIterator57 *this, const icu::RuleBasedBreakIterator57 *a2)
{
  *(void *)icu::BreakIterator::BreakIterator(this, a2) = off_18970FCD0;
  UErrorCode status = U_ZERO_ERROR;
  *((void *)this + 61) = utext_openUChars(0LL, 0LL, 0LL, &status);
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_DWORD *)this + 132) = 0;
  *((_BYTE *)this + 532) = 1;
  *((_DWORD *)this + 134) = 0;
  *((_DWORD *)this + 144) = 1;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  return icu::RuleBasedBreakIterator57::operator=((uint64_t)this, (uint64_t)a2);
}

void icu::RuleBasedBreakIterator57::~RuleBasedBreakIterator57(icu::RuleBasedBreakIterator57 *this)
{
  *(void *)this = off_18970FCD0;
  uint64_t v3 = *((void *)this + 62);
  uint64_t v2 = *((void *)this + 63);
  if (v3 == v2)
  {
    uint64_t v2 = v3;
  }

  else
  {
    if (v3) {
      BOOL v4 = v3 == *((void *)this + 64);
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
      uint64_t v2 = *((void *)this + 63);
    }
  }

  *((void *)this + 62) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *((void *)this + 62) = 0LL;
  uint64_t v5 = *((void *)this + 64);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *((void *)this + 64) = 0LL;
  utext_close(*((UText **)this + 61));
  uint64_t v6 = *((void *)this + 65);
  if (v6)
  {
    sub_1807FD258(v6);
    *((void *)this + 65) = 0LL;
  }

  uint64_t v7 = (void *)*((void *)this + 68);
  if (v7)
  {
    uprv_free(v7);
    *((void *)this + 68) = 0LL;
  }

  uint64_t v8 = *((void *)this + 70);
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    *((void *)this + 70) = 0LL;
  }

  uint64_t v9 = *((void *)this + 71);
  if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    *((void *)this + 71) = 0LL;
  }

  icu::BreakIterator::~BreakIterator(this);
}

{
  void *v1;
  icu::RuleBasedBreakIterator57::~RuleBasedBreakIterator57(this);
  icu::UMemory::operator delete(v1);
}

icu::RuleBasedBreakIterator57 *icu::RuleBasedBreakIterator57::clone@<X0>( icu::RuleBasedBreakIterator57 *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  result = (icu::RuleBasedBreakIterator57 *)icu::UMemory::operator new(a3, (icu::UMemory *)0x248, a2);
  if (result) {
    return (icu::RuleBasedBreakIterator57 *)icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57(result, this);
  }
  return result;
}

uint64_t icu::RuleBasedBreakIterator57::operator==(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_1807F874C(*(void *)(*(void *)a1 - 8LL), *(void *)(*(void *)a2 - 8LL));
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a2 + 8) == *(_DWORD *)(a1 + 8))
    {
      uint64_t result = utext_equals(*(const UText **)(a1 + 488), *(const UText **)(a2 + 488));
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v5 = *(unsigned int ***)(a2 + 520);
      uint64_t v6 = *(unsigned int ***)(a1 + 520);
      if (v5 == v6 || v5 && v6 && sub_1807FCB1C(v5, v6)) {
        return 1LL;
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t icu::RuleBasedBreakIterator57::hashCode(icu::RuleBasedBreakIterator57 *this)
{
  uint64_t result = *((void *)this + 65);
  if (result) {
    return sub_1807FCB68(result);
  }
  return result;
}

uint64_t *icu::RuleBasedBreakIterator57::setText(uint64_t *this, UText *a2, UErrorCode *a3)
{
  uint64_t v5 = (uint64_t)this;
  (*(void (**)(uint64_t *))(*this + 200))(this);
  *(void *)(v5 + 488) = utext_clone(*(UText **)(v5 + 488), a2, 0, 1, a3);
  uint64_t v7 = *(void *)(v5 + 512);
  if (!v7)
  {
    this = icu::UMemory::operator new(0LL, (icu::UMemory *)0x20, v6);
    if (this)
    {
      v11 = &unk_1809F2170;
      this = (uint64_t *)icu::UCharCharacterIterator::UCharCharacterIterator(this, &v11, 0LL);
      *(void *)(v5 + 512) = this;
      uint64_t v7 = *(void *)(v5 + 512);
      if (v7) {
        goto LABEL_3;
      }
    }

    else
    {
      *(void *)(v5 + 512) = 0LL;
    }

    *a3 = U_MEMORY_ALLOCATION_ERROR;
    return this;
  }

LABEL_3:
  uint64_t v8 = *(void *)(v5 + 496);
  if (v8 != *(void *)(v5 + 504) && v8 != 0 && v8 != v7)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    uint64_t v7 = *(void *)(v5 + 512);
  }

  *(void *)(v5 + 496) = v7;
  return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 80LL))(v5);
}

  BOOL v4 = 0LL;
  *((_DWORD *)this + 10) = -1;
  return v4;
}

    uint64_t v7 = *((_DWORD *)this + 5);
    uint64_t v8 = ((_BYTE)v7 + 1) & 0x7F;
    if (v8 == *((_DWORD *)this + 4)) {
      *((_DWORD *)this + 4) = ((_BYTE)v7 + 7) & 0x7F;
    }
    *((_DWORD *)this + ((v7 + 1) & 0x7F) + 8) = v5;
    *((_WORD *)this + ((v7 + 1) & 0x7F) + 272) = v6;
    *((_DWORD *)this + 6) = v5;
    *((_DWORD *)this + 7) = v8;
    *((_DWORD *)this + 5) = v8;
    return 1LL;
  }

  return 0LL;
}

  if (!result || !a6 && *result == 105)
  {
    *a7 = 0;
    return (_BYTE *)ucnv_cbFromUWriteSub(a2, 0, a7);
  }

  return result;
}

    if (v12) {
      goto LABEL_4;
    }
    while (1)
    {
      v24 = (int)v89;
      if ((_DWORD)v89 == v90)
      {
        v12 = 2;
        goto LABEL_4;
      }

      LODWORD(v89) = v89 + 1;
      v25 = *(unsigned __int16 *)(a6 + 2 * v24);
      if (v25 <= 0x17F)
      {
        v12 = *(unsigned __int16 *)(a2 + 2 * v25);
        if (*(_WORD *)(a2 + 2 * v25)) {
          goto LABEL_4;
        }
        if ((v9 & 2) != 0)
        {
          v26 = *(unsigned __int16 *)(a6 + 2 * v24);
        }

        else
        {
          v26 = *(unsigned __int16 *)(a6 + 2 * v24);
        }

        goto LABEL_53;
      }

      if ((v25 & 0xFFC0) == 0x2000)
      {
        v26 = (v25 - 7808);
LABEL_53:
        v23 = *(unsigned __int16 *)(v13 + 2 * v26);
        goto LABEL_54;
      }

      if ((_DWORD)v25 == 0xFFFF) {
        v23 = 64680LL;
      }
      else {
        v23 = 1LL;
      }
      if ((_DWORD)v25 == 65534)
      {
        v23 = 3LL;
        goto LABEL_55;
      }

      if (!v12)
      {
        while (1)
        {
          v23 = *(int *)v107;
          if (*(_DWORD *)v107 == v108)
          {
            v12 = 2;
            goto LABEL_4;
          }

          v24 = *(int *)v107 + 1LL;
          ++*(_DWORD *)v107;
          v25 = *(unsigned __int8 *)(a6 + v23);
          if ((v25 & 0x80) != 0)
          {
            v27 = (v25 + 58) < 0xFCu || (_DWORD)v24 == v108;
            if (v27 || (v28 = *(char *)(a6 + v24), v28 > -65))
            {
              v26 = icu::CollationFastLatin::lookupUTF8( v13,  (const unsigned __int16 *)*(unsigned __int8 *)(a6 + v23),  a6,  v107,  (int *)v108);
            }

            else
            {
              *(_DWORD *)v107 = v23 + 2;
              v25 = v28 + ((_DWORD)v25 << 6) - 12416;
              v12 = a2[v25];
              v26 = *((unsigned __int16 *)v13 + v25);
            }
          }

          else
          {
            v12 = a2[v25];
            if (a2[v25]) {
              goto LABEL_4;
            }
            v26 = *((unsigned __int16 *)v13 + v25);
          }

          if (v26 >= 0x1000)
          {
            v12 = v26 & 0xFC00;
            goto LABEL_4;
          }

          v29 = icu::CollationFastLatin::nextPair((uint64_t)v13, v25, v26, 0LL, a6, (int *)v107, (int *)&v108);
          if (v29 == 1) {
            return 4294967294LL;
          }
          else {
            v30 = 0;
          }
          else {
            v12 = v30;
          }
          if (v12) {
            goto LABEL_4;
          }
        }

        v12 = v26 & 0xFF8;
      }

  if (Instance) {
    (*(void (**)(icu::DateTimePatternGenerator *))(*(void *)Instance + 8LL))(Instance);
  }
  return v8;
}

    unint64_t v6 = 1;
LABEL_4:
    *((_DWORD *)a3 + 2) = v6;
  }

  return this;
}

    (*(void (**)(Style *))(*(void *)a2 + 8LL))(a2);
    goto LABEL_4;
  }

  uint64_t result = icu::ScientificNumberFormatter::ScientificNumberFormatter(v8, this, a2, a3);
  this = result;
LABEL_8:
  (*(void (**)(icu::ScientificNumberFormatter *))(*(void *)this + 8LL))(this);
  return 0LL;
}

UText *icu::RuleBasedBreakIterator57::getUText(const UText **this, UText *dest, UErrorCode *status)
{
  return utext_clone(dest, this[61], 0, 1, status);
}

uint64_t icu::RuleBasedBreakIterator57::getText(icu::RuleBasedBreakIterator57 *this)
{
  return *((void *)this + 62);
}

uint64_t icu::RuleBasedBreakIterator57::adoptText( icu::RuleBasedBreakIterator57 *this, icu::CharacterIterator *a2)
{
  uint64_t v4 = *((void *)this + 62);
  if (v4 != *((void *)this + 63) && v4 && v4 != *((void *)this + 64)) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  *((void *)this + 62) = a2;
  UErrorCode status = U_ZERO_ERROR;
  (*(void (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 200LL))(this);
  if (a2 && !*((_DWORD *)a2 + 4)) {
    v7.n128_f64[0] = utext_openCharacterIterator(*((UText **)this + 61), (int *)a2, &status);
  }
  else {
    unint64_t v6 = utext_openUChars(*((UText **)this + 61), 0LL, 0LL, &status);
  }
  *((void *)this + 61) = v6;
  return (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *, __n128))(*(void *)this + 80LL))(this, v7);
}

uint64_t icu::RuleBasedBreakIterator57::setText(icu::RuleBasedBreakIterator57 *this, UChar **a2)
{
  UErrorCode status = U_ZERO_ERROR;
  (*(void (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 200LL))(this);
  *((void *)this + 61) = utext_openConstUnicodeString(*((UText **)this + 61), (uint64_t)a2, &status);
  unint64_t v6 = (UChar **)*((void *)this + 63);
  if (v6)
  {
    icu::StringCharacterIterator::setText(v6, a2);
    __n128 v7 = (icu::StringCharacterIterator *)*((void *)this + 63);
  }

  else
  {
    __n128 v7 = (icu::StringCharacterIterator *)icu::UMemory::operator new(v5, (icu::UMemory *)0x60, v4);
    if (v7) {
      __n128 v7 = (icu::StringCharacterIterator *)icu::StringCharacterIterator::StringCharacterIterator( v7,  (const icu::UnicodeString *)a2);
    }
    *((void *)this + 63) = v7;
  }

  uint64_t v8 = (icu::StringCharacterIterator *)*((void *)this + 62);
  if (v8 != v7 && v8 && v8 != *((icu::StringCharacterIterator **)this + 64))
  {
    (*(void (**)(void))(*(void *)v8 + 8LL))(*((void *)this + 62));
    __n128 v7 = (icu::StringCharacterIterator *)*((void *)this + 63);
  }

  *((void *)this + 62) = v7;
  return (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 80LL))(this);
}

const UText **icu::RuleBasedBreakIterator57::refreshInputText(const UText **this, UText *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (!a2
      || (int64_t NativeIndex = utext_getNativeIndex(this[61]),
          __n128 v7 = utext_clone((UText *)this[61], a2, 0, 1, a3),
          this[61] = v7,
          *(int *)a3 <= 0)
      && (utext_setNativeIndex(v7, NativeIndex), utext_getNativeIndex(this[61]) != NativeIndex))
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

  return this;
}

uint64_t icu::RuleBasedBreakIterator57::first(icu::RuleBasedBreakIterator57 *this)
{
  *((_DWORD *)this + 132) = 0;
  *((_BYTE *)this + 532) = 1;
  utext_setNativeIndex(*((UText **)this + 61), 0LL);
  return 0LL;
}

int64_t icu::RuleBasedBreakIterator57::last(UText **this)
{
  uint64_t v2 = this[61];
  if (v2)
  {
    *((_BYTE *)this + 532) = 0;
    int64_t v3 = utext_nativeLength(v2);
    utext_setNativeIndex(this[61], (int)v3);
  }

  else
  {
    *((_DWORD *)this + 132) = 0;
    *((_BYTE *)this + 532) = 1;
    return 0xFFFFFFFFLL;
  }

  return v3;
}

uint64_t icu::RuleBasedBreakIterator57::next(icu::RuleBasedBreakIterator57 *this, int a2)
{
  uint64_t result = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 112LL))(this);
  if (a2 < 1)
  {
    if (a2 < 0)
    {
      do
        uint64_t result = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 96LL))(this);
      while (!__CFADD__(a2++, 1));
    }
  }

  else
  {
    unsigned int v5 = a2 + 1;
    do
    {
      uint64_t result = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 104LL))(this);
      --v5;
    }

    while (v5 > 1);
  }

  return result;
}

uint64_t icu::RuleBasedBreakIterator57::next(icu::RuleBasedBreakIterator57 *this)
{
  uint64_t v2 = *((void *)this + 68);
  if (v2)
  {
    int v3 = *((_DWORD *)this + 139);
    if (v3 < *((_DWORD *)this + 138) - 1)
    {
      int v4 = v3 + 1;
      *((_DWORD *)this + 139) = v4;
      uint64_t v5 = *(unsigned int *)(v2 + 4LL * v4);
      utext_setNativeIndex(*((UText **)this + 61), (int)v5);
      return v5;
    }

    (*(void (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 200LL))(this);
  }

  uint64_t v6 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 112LL))(this);
  *((_DWORD *)this + 134) = 0;
  uint64_t v7 = icu::RuleBasedBreakIterator57::handleNext((uint64_t)this, *(void *)(*((void *)this + 65) + 8LL));
  do
  {
    uint64_t v5 = v7;
    if (!*((_DWORD *)this + 2)) {
      break;
    }
    UChar32 v8 = utext_char32At(*((UText **)this + 61), (int)v7 - 1);
    UChar32 v9 = utext_char32At(*((UText **)this + 61), (int)v5);
    if (v9 == -1 || v8 == -1) {
      break;
    }
    if (!u_isalpha(v9)) {
      break;
    }
    if (!u_isalpha(v8)) {
      break;
    }
    uint64_t v7 = icu::RuleBasedBreakIterator57::handleNext((uint64_t)this, *(void *)(*((void *)this + 65) + 8LL));
  }

  while ((int)v7 > (int)v5);
  if (*((_DWORD *)this + 134)) {
    return icu::RuleBasedBreakIterator57::checkDictionary((UText **)this, v6, v5, 0);
  }
  return v5;
}

uint64_t icu::RuleBasedBreakIterator57::handleNext(uint64_t a1, uint64_t a2)
{
  int v44 = 0;
  __int128 v43 = 0u;
  memset(v42, 0, sizeof(v42));
  uint64_t v41 = *(unsigned int *)(a2 + 4);
  *(_BYTE *)(a1 + 532) = 1;
  *(_DWORD *)(a1 + 528) = 0;
  int v4 = *(UText **)(a1 + 488);
  uint64_t chunkOffset = v4->chunkOffset;
  if ((int)chunkOffset <= v4->nativeIndexingLimit)
  {
    uint64_t v6 = v4->chunkNativeStart + chunkOffset;
  }

  else
  {
    uint64_t v6 = ((uint64_t (*)(void))v4->pFuncs->mapOffsetToNative)();
    int v4 = *(UText **)(a1 + 488);
    LODWORD(chunkOffset) = v4->chunkOffset;
  }

  else {
    v4->uint64_t chunkOffset = chunkOffset + 1;
  }
  uint64_t v8 = 0xFFFFFFFFLL;
  if (!*(void *)(a1 + 520) || v7 == -1) {
    return v8;
  }
  unsigned int v9 = *(_DWORD *)(a2 + 8) & 2;
  unsigned int v10 = v9 == 0;
  uint64_t v38 = a2 + 26;
  uint64_t v11 = v41;
  int v35 = v6;
  uint64_t v39 = v6;
  uint64_t v40 = a2 + 16;
LABEL_11:
  int v37 = v7 & 0x1F;
  if (v7 >> 10 == 54) {
    int v12 = 320;
  }
  else {
    int v12 = 0;
  }
  uint64_t v36 = v12 + (v7 >> 5);
  while (1)
  {
    if (v7 != -1)
    {
      BOOL v13 = v10 == 1;
      if (v10 != 1) {
        goto LABEL_20;
      }
      uint64_t v14 = *(void *)(a1 + 520);
      if (!HIWORD(v7))
      {
        unsigned int v9 = *(unsigned __int16 *)(*(void *)(v14 + 64)
                                 + 2LL
                                 * (v37 + 4 * *(unsigned __int16 *)(*(void *)(v14 + 64) + 2 * v36)));
        if ((v9 & 0x4000) == 0) {
          goto LABEL_20;
        }
        goto LABEL_19;
      }

      if (HIWORD(v7) > 0x10u)
      {
        unsigned int v9 = *(unsigned __int16 *)(v14 + 96);
        if ((v9 & 0x4000) == 0) {
          goto LABEL_20;
        }
      }

      else
      {
        int v25 = (*(uint64_t (**)(void))(v14 + 80))(*(unsigned __int16 *)(*(void *)(v14 + 64)
                                                                                 + 2LL
                                                                                 * (((v7 >> 10) & 0x1F)
                                                                                  + 4
                                                                                  * *(unsigned __int16 *)(*(void *)(v14 + 64) + 2LL * (((v7 >> 10) + 55232) >> 5)))));
        uint64_t v26 = *(void *)(a1 + 520);
        if (v25 < 1) {
          unsigned int v9 = *(unsigned __int16 *)(v26 + 96);
        }
        else {
          unsigned int v9 = *(unsigned __int16 *)(*(void *)(v26 + 64)
        }
                                   + 2LL
                                   * (v37
                                    + 4
        if ((v9 & 0x4000) == 0)
        {
LABEL_20:
          int v15 = *(unsigned __int16 *)(v40 + v11 + 2LL * v9 + 8);
          uint64_t v11 = (v41 * v15);
          v16 = (unsigned __int16 *)(v40 + v11);
          int v17 = *(unsigned __int16 *)(v40 + v11);
          if (v17 != 0xFFFF) {
            goto LABEL_30;
          }
          if (v10)
          {
LABEL_25:
            uint64_t v18 = *(void *)(a1 + 488);
            uint64_t v19 = *(unsigned int *)(v18 + 40);
            if ((int)v19 > *(_DWORD *)(v18 + 28))
            {
              uint64_t v39 = (*(uint64_t (**)(void))(*(void *)(v18 + 56) + 64LL))();
              int v17 = *v16;
LABEL_29:
              *(_DWORD *)(a1 + 528) = (__int16)v16[2];
              goto LABEL_30;
            }

            uint64_t v39 = *(void *)(v18 + 32) + v19;
          }

          int v17 = 0xFFFF;
          goto LABEL_29;
        }
      }

LABEL_74:
        v29->uint64_t chunkOffset = v33;
        return v8;
      }
    }

          --v45;
        }

        while (v33 < v45);
      }

      if ((v33 & 1) != 0)
      {
        v65 = v44 - (*(_DWORD *)(a1 + 212) == *(_DWORD *)(a1 + 20));
        if ((int)v65 >= 1)
        {
          v66 = 0LL;
          v67 = v65 - 1;
          v68 = (uint64_t *)((char *)v32 + 12 * v65);
          v69 = v32;
          do
          {
            v70 = *v69;
            v77 = *((_DWORD *)v69 + 2);
            v71 = *((_DWORD *)v68 + 2);
            *v69 = *v68;
            *((_DWORD *)v69 + 2) = v71;
            *v68 = v70;
            *((_DWORD *)v68 + 2) = v77;
            ++v66;
            v69 = (uint64_t *)((char *)v69 + 12);
            v68 = (uint64_t *)((char *)v68 - 12);
            uint64_t v26 = v66 < v67--;
          }

          while (v26);
        }
      }
    }

    if ((_DWORD)v28)
    {
      v72 = 0;
      v73 = (_DWORD *)v32 + 1;
      v74 = v28;
      do
      {
        v72 += *v73;
        *(v73 - 1) |= v4[*(v73 - 1)] << 31;
        *v73 = v72;
        v73 += 3;
        --v74;
      }

      while (v74);
    }

    if (v28 > v29)
    {
      v75 = *(unsigned __int8 *)(a1 + 157);
      if ((v75 & 1) != 0) {
        LODWORD(v29) = 0;
      }
      *((_DWORD *)v32 + 3 * v29) |= v75 << 31;
    }

    goto LABEL_18;
  }

  return result;
}

      uint64_t v41 = sub_1808171FC(v36, v58, v34, v19, v53, a5);
      LODWORD(v58) = v41;
      if (v34) {
        v34 += v41;
      }
      else {
        v34 = 0LL;
      }
      if (*(_BYTE *)(a1 + 144) && *(_BYTE *)(v55 + v41 + HIDWORD(v58) - 1)) {
        LOBYTE(v37) = v37 | 2;
      }
LABEL_80:
      v19 -= v41;
      if ((v37 & 2) != 0)
      {
        v42 = 8206;
LABEL_84:
        uint64_t v40 = __OFSUB__(v19--, 1);
        if (v19 < 0 == v40) {
          *v34++ = v42;
        }
        goto LABEL_86;
      }

      if ((v37 & 8) != 0)
      {
        v42 = 8207;
        goto LABEL_84;
      }

      int32_t v31 = byte_180A25FE5[v26];
      goto LABEL_75;
    }
  }

  uint64_t result = sub_180834EC8(result);
  else {
    uint64_t v28 = (int)result >> 24;
  }
  v29 = v28 - v13;
  if (v28 <= (int)v13)
  {
    if (v28 == 3) {
      goto LABEL_64;
    }
    if (v28 == 4)
    {
      *v6++ = BYTE3(result);
LABEL_64:
      *uint64_t v6 = BYTE2(result);
      v6[1] = BYTE1(result);
      v6[2] = result;
      v6 += 3;
    }

    uint64_t v8 = v13 - v28;
    goto LABEL_22;
  }

  int64_t v32 = (_BYTE *)(v4 + 104);
  switch(v29)
  {
    case 1u:
      goto LABEL_82;
    case 2u:
      goto LABEL_81;
    case 3u:
      int64_t v32 = (_BYTE *)(v4 + 105);
      *(_BYTE *)(v4 + 104) = BYTE2(result);
LABEL_81:
      *v32++ = BYTE1(result);
LABEL_82:
      *int64_t v32 = result;
      break;
  }

  *(_BYTE *)(v4 + 91) = v29;
  uint64_t v33 = (int)result >> (8 * v29);
  switch(v13)
  {
    case 1u:
      goto LABEL_88;
    case 2u:
      goto LABEL_87;
    case 3u:
      *v6++ = BYTE2(v33);
LABEL_87:
      *v6++ = BYTE1(v33);
LABEL_88:
      *v6++ = v33;
      break;
  }

        uint64_t v33 = byte_180A25FE5[v26];
        goto LABEL_75;
      }

      int v37 = v2;
      uint64_t v38 = a2;
      uint64_t result = sub_180834EC8(result);
      uint64_t v28 = (int)result >> 24;
      v29 = v28 - v8;
      if (v28 <= v8)
      {
        if (v28 == 2)
        {
          uint64_t v2 = v37;
          a2 = v38;
        }

        else
        {
          uint64_t v2 = v37;
          a2 = v38;
          if (v28 != 3)
          {
            if (v28 != 4)
            {
LABEL_72:
              v8 -= v28;
LABEL_26:
              uint64_t v19 = v9;
              goto LABEL_27;
            }

            *v6++ = BYTE3(result);
            *v9++ = v12;
          }

          *v6++ = BYTE2(result);
          *v9++ = v12;
        }

        *uint64_t v6 = BYTE1(result);
        *unsigned int v9 = v12;
        v6[1] = result;
        v6 += 2;
        v9[1] = v12;
        v9 += 2;
        goto LABEL_72;
      }

      v34 = (_BYTE *)(v5 + 104);
      if (v29 == 1)
      {
        uint64_t v2 = v37;
        int v35 = v38;
      }

      else
      {
        uint64_t v2 = v37;
        int v35 = v38;
        if (v29 != 2)
        {
          if (v29 != 3) {
            goto LABEL_86;
          }
          v34 = (_BYTE *)(v5 + 105);
          *(_BYTE *)(v5 + 104) = BYTE2(result);
        }

        *v34++ = BYTE1(result);
      }

      *v34 = result;
LABEL_86:
      *(_BYTE *)(v5 + 91) = v29;
      uint64_t v36 = (int)result >> (8 * v29);
      if (v8 != 1)
      {
        if (v8 != 2)
        {
          if (v8 != 3)
          {
LABEL_92:
            *int v35 = 15;
            goto LABEL_54;
          }

          *v6++ = BYTE2(v36);
          *v9++ = v12;
        }

        *v6++ = BYTE1(v36);
        *v9++ = v12;
      }

      *v6++ = v36;
      *v9++ = v12;
      goto LABEL_92;
    }

    *v6++ = result - 112;
    *v9++ = v12;
    --v8;
    uint64_t v19 = v9;
    if ((int)v10 < 12288)
    {
LABEL_13:
      int v15 = (v7 - (unint64_t)v14) >> 1;
      if ((int)v15 >= 1)
      {
        v16 = v15 + 1;
        do
        {
          unsigned int v10 = *v14;
          if (v10 >> 12 > 2) {
            break;
          }
          if (v10 > 0x20)
          {
            uint64_t v18 = v10 - v11;
            if (v10 - v11 + 64 > 0x7F) {
              break;
            }
            uint64_t v11 = v10 & 0xFF80 | 0x40;
            LOBYTE(v17) = v18 - 112;
          }

          else
          {
            if (v10 != 32) {
              uint64_t v11 = 64;
            }
            int v17 = *v14;
          }

          *v6++ = v17;
          *v9++ = v3;
          ++v14;
          ++v3;
          --v16;
        }

        while (v16 > 1);
      }

      uint64_t v8 = *(_DWORD *)(v2 + 40) - (_DWORD)v6;
      goto LABEL_26;
    }

  *a2 = v48;
  *(_DWORD *)(*(void *)(a1 + 8) + 84LL) = v13;
LABEL_75:
  LODWORD(v15) = v46;
  LOBYTE(v12) = v18;
LABEL_76:
  *(void *)(a1 + 32) += (int)v15;
  *(void *)(a1 + 16) += 2LL * (int)v45;
  v11[18] = v12;
  return result;
}

        *(_BYTE *)(v2 + 64) = v38;
        uint64_t result = 0xFFFFLL;
        v27 = (uint64_t)v36;
        goto LABEL_75;
      }

      *(_BYTE *)(v2 + 64) = 1;
    }

    goto LABEL_66;
  }

    v27 = 0LL;
    goto LABEL_81;
  }

    uint64_t v5 = U_ILLEGAL_CHAR_FOUND;
LABEL_75:
    *pErrorCode = v5;
    return 0xFFFF;
  }

  int v17 = qword_18C535058;
  uint64_t v18 = (int *)(qword_18C535058 + *(unsigned int *)(qword_18C535058 + 12));
  uint64_t v19 = *v18;
  if (!*v18) {
    goto LABEL_73;
  }
  uint64_t v20 = v18 + 1;
  unsigned __int16 v21 = v4 & 0xFFFFFFFD;
  uint64_t v22 = 0uLL;
  do
  {
    if (v21) {
      goto LABEL_24;
    }
    if (*((_BYTE *)v20 + 8) == 1)
    {
      v71 = v22;
      v72 = v22;
      *(_OWORD *)__s2 = v22;
      v70 = v22;
      v68[0] = 0LL;
      v68[1] = 0LL;
      v67[2] = v22;
      v67[3] = v22;
      v67[0] = v22;
      v67[1] = v22;
      v66[2] = v22;
      v66[3] = v22;
      v66[0] = v22;
      v66[1] = v22;
      uint64_t v26 = v20 + 3;
      v27 = *((unsigned __int8 *)v20 + 9);
      uint64_t v28 = (unsigned __int8 *)v20 + 2 * v27 + 13;
      v29 = (const char *)v64;
      while (1)
      {
        uint64_t v30 = *(v28 - 1);
        if (!*(v28 - 1)) {
          break;
        }
        ++v28;
        int32_t v31 = *(unsigned __int8 *)v29++;
        if (v30 != v31)
        {
          int64_t v32 = 0xFFFF;
          goto LABEL_71;
        }
      }

      int64_t v32 = *v20;
      v58 = v20[1];
      v59 = v19;
      sub_18085ADDC((uint64_t)(v20 + 3), v27, v28, 0, v68, v67, v66, __s2, 64);
      if (!strcmp(v29, __s2))
      {
        uint64_t v19 = v59;
        unsigned __int16 v21 = v4 & 0xFFFFFFFD;
        uint64_t v22 = 0uLL;
      }

      else
      {
        ++v32;
        uint64_t v22 = 0uLL;
        if (v32 >= v58 + 1)
        {
LABEL_68:
          uint64_t v19 = v59;
          unsigned __int16 v21 = v4 & 0xFFFFFFFD;
          goto LABEL_24;
        }

        uint64_t v38 = (unsigned __int16)(v27 - 1);
        while (1)
        {
          uint64_t v39 = *((_WORD *)v68 + v38) + 1;
          uint64_t v40 = (unsigned __int16)(v27 - 1);
          uint64_t v41 = v27 - 1;
          if (*((unsigned __int16 *)v26 + v38) <= v39)
          {
            do
            {
              *((_WORD *)v68 + v40) = 0;
              *((void *)v66 + v40) = *((void *)v67 + v40);
              uint64_t v40 = (unsigned __int16)--v41;
              uint64_t v39 = *((_WORD *)v68 + (unsigned __int16)v41) + 1;
            }

            while (*((unsigned __int16 *)v26 + (unsigned __int16)v41) <= v39);
          }

          *((_WORD *)v68 + v40) = v39;
          v42 = (unsigned __int8 *)*((void *)v66 + v40);
          while (*v42++)
            ;
          *((void *)v66 + v40) = v42;
          int v44 = v29;
          if (!(_DWORD)v27) {
            goto LABEL_102;
          }
          v45 = 0;
          int v44 = v29;
          do
          {
            v46 = (const char *)*((void *)v66 + v45);
            while (1)
            {
              v47 = *(unsigned __int8 *)v46;
              if (!*v46) {
                break;
              }
              v48 = *(unsigned __int8 *)v44++;
              v49 = v47 == v48;
              if (v47 == v48) {
                ++v46;
              }
              else {
                v46 = "";
              }
              if (!v49) {
                v45 = 99;
              }
            }

            ++v45;
          }

          while (v27 > v45);
          if (v45 <= 0x62u)
          {
LABEL_102:
            if (!*v44) {
              break;
            }
          }

          v49 = v32++ == v58;
          if (v49) {
            goto LABEL_68;
          }
        }

        uint64_t v19 = v59;
        unsigned __int16 v21 = v4 & 0xFFFFFFFD;
      }
    }

    else
    {
      if (*((_BYTE *)v20 + 8)) {
        goto LABEL_24;
      }
      uint64_t v23 = 0LL;
      while (1)
      {
        uint64_t v24 = *((unsigned __int8 *)v20 + v23 + 12);
        if (!*((_BYTE *)v20 + v23 + 12)) {
          break;
        }
        int v25 = *((unsigned __int8 *)v64 + v23++);
        if (v24 != v25) {
          goto LABEL_24;
        }
      }

      uint64_t v33 = (char *)v64 + v23;
      int64_t v32 = 0;
      if (*((_BYTE *)v20 + 9))
      {
        v34 = (unsigned __int16)(*((unsigned __int8 *)v20 + 9) - 1) + 1LL;
        do
        {
          uint64_t v36 = (char)*v33++;
          int v35 = v36;
          if ((v36 - 48) >= 0xA)
          {
            int v37 = -55;
          }

          else
          {
            int v37 = -48;
          }

          int64_t v32 = (v37 + v35) | (16 * v32);
          --v34;
        }

        while (v34);
      }
    }

        int v35 = 1;
        goto LABEL_75;
      }

      int v25 = v41;
      if (!__dst[0]) {
        goto LABEL_74;
      }
      int v35 = 1;
      if (strstr("nb nn", __dst) && !v25) {
        goto LABEL_72;
      }
    }

    else
    {
      int v35 = 0;
      int v25 = v41;
    }

  if (v106 < 0x2000) {
    return 0LL;
  }
  uint64_t v33 = 0;
  v34 = 0;
  int v35 = (v9 & 0x600) == 512;
  *(void *)v107 = 0LL;
  while (2)
  {
    while (2)
    {
      if (v33) {
        goto LABEL_92;
      }
      while (2)
      {
        int v37 = *(int *)&v107[4];
        if (*(_DWORD *)&v107[4] == v109[0])
        {
          uint64_t v33 = 2;
          if (v34) {
            goto LABEL_111;
          }
          while (1)
          {
LABEL_99:
            int v44 = *(int *)v107;
            if (*(_DWORD *)v107 == v108)
            {
              v34 = 2;
              goto LABEL_111;
            }

            ++*(_DWORD *)v107;
            v45 = *(unsigned __int8 *)(a6 + v44);
            if ((v45 & 0x80) == 0)
            {
              v46 = *(unsigned __int8 *)(a6 + v44);
              goto LABEL_106;
            }

            v48 = *(unsigned __int8 *)(v44 + a6 + 2);
            *(_DWORD *)v107 = v44 + 3;
            if ((_DWORD)v45 == 226)
            {
              v46 = v48 | 0x100;
LABEL_106:
              __int128 v43 = *((unsigned __int16 *)v13 + v46);
              goto LABEL_108;
            }

            if ((_DWORD)v48 == 190)
            {
              __int128 v43 = 3LL;
LABEL_107:
              LODWORD(v43) = icu::CollationFastLatin::nextPair( (uint64_t)v13,  v45,  v43,  0LL,  a6,  (int *)v107,  (int *)&v108);
              goto LABEL_108;
            }

            LODWORD(v43) = 64680;
LABEL_108:
            Tertiaries = icu::CollationFastLatin::getTertiaries(v14, v35, v43);
            if (Tertiaries)
            {
              v34 = Tertiaries;
              goto LABEL_111;
            }
          }

          v47 = *(unsigned __int8 *)(a6 + v44 + 1) + (v45 << 6);
          *(_DWORD *)v107 = v44 + 2;
          v46 = v47 - 12416;
          goto LABEL_106;
        }

        ++*(_DWORD *)&v107[4];
        uint64_t v38 = *(unsigned __int8 *)(a4 + v37);
        if ((v38 & 0x80) == 0)
        {
          uint64_t v39 = *(unsigned __int8 *)(a4 + v37);
          goto LABEL_88;
        }

        if (v38 <= 0xC5)
        {
          uint64_t v40 = *(unsigned __int8 *)(a4 + v37 + 1) + (v38 << 6);
          *(_DWORD *)&v107[4] = v37 + 2;
          uint64_t v39 = v40 - 12416;
          goto LABEL_88;
        }

        uint64_t v41 = *(unsigned __int8 *)(v37 + a4 + 2);
        *(_DWORD *)&v107[4] = v37 + 3;
        if ((_DWORD)v38 == 226)
        {
          uint64_t v39 = v41 | 0x100;
LABEL_88:
          uint64_t v36 = *((unsigned __int16 *)v13 + v39);
          if (v36 <= 0xBFF) {
LABEL_89:
          }
            LODWORD(v36) = icu::CollationFastLatin::nextPair((uint64_t)v13, v38, v36, 0LL, a4, (int *)&v107[4], v109);
        }

        else
        {
          if ((_DWORD)v41 == 190)
          {
            uint64_t v36 = 3LL;
            goto LABEL_89;
          }

          LODWORD(v36) = 64680;
        }

        v42 = icu::CollationFastLatin::getTertiaries(v14, v35, v36);
        if (!v42) {
          continue;
        }
        break;
      }

      uint64_t v33 = v42;
LABEL_92:
      if (!v34) {
        goto LABEL_99;
      }
LABEL_111:
      if (v33 != v34)
      {
        int32_t v31 = (unsigned __int16)v33;
        if ((unsigned __int16)v33 == (unsigned __int16)v34)
        {
          if (v33 == 2) {
            goto LABEL_213;
          }
          v33 >>= 16;
          v34 >>= 16;
          continue;
        }

        v50 = (unsigned __int16)v34;
        v88 = (unsigned __int16)v33 ^ 0x18;
        v89 = (unsigned __int16)v34 ^ 0x18;
        if ((v9 & 0x700) == 0x300)
        {
          int32_t v31 = v88;
          v50 = v89;
        }

      ++a2;
      goto LABEL_28;
    default:
      abort();
  }

uint64_t icu::RuleBasedBreakIterator57::checkDictionary(UText **this, uint64_t a2, uint64_t a3, int a4)
{
  if ((int)a3 - (int)a2 <= 1)
  {
    if (a4) {
      return a2;
    }
    else {
      return a3;
    }
  }

  if (a4) {
    int v8 = a3;
  }
  else {
    int v8 = a2;
  }
  utext_setNativeIndex(this[61], v8);
  if (a4)
  {
    unsigned int v9 = this[61];
    int32_t chunkOffset = v9->chunkOffset;
    BOOL v11 = __OFSUB__(chunkOffset, 1);
    int v12 = chunkOffset - 1;
    if (v12 < 0 != v11 || v9->chunkContents[v12] >> 11 > 0x1Au) {
      utext_previous32(v9);
    }
    else {
      v9->int32_t chunkOffset = v12;
    }
  }

  UErrorCode v96 = U_ZERO_ERROR;
  __int128 v94 = 0u;
  __int128 v95 = 0u;
  icu::UVector32::UVector32((icu::UVector32 *)&v94, &v96);
  unint64_t v13 = utext_current32(this[61]);
  unint64_t v14 = v13;
  if (!WORD1(v13))
  {
    int v15 = this[65];
    pExtra = v15->pExtra;
    else {
      int v17 = 0;
    }
    unsigned int v18 = v17 + (v13 >> 5);
    goto LABEL_21;
  }

  if (WORD1(v13) > 0x10u)
  {
    int v15 = this[65];
  }

  else
  {
    int v19 = ((uint64_t (*)(void))this[65]->p)(*((unsigned __int16 *)this[65]->pExtra
                                                        + 4
                                                        * *((unsigned __int16 *)this[65]->pExtra
    int v15 = this[65];
    if (v19 >= 1)
    {
      pExtra = v15->pExtra;
      unsigned int v18 = v19 + ((v14 >> 5) & 0x1F);
LABEL_21:
      __int16 r = pExtra[4 * (unsigned __int16)pExtra[v18] + (v14 & 0x1F)];
      goto LABEL_24;
    }
  }

  __int16 r = (__int16)v15->r;
LABEL_24:
  uint64_t v21 = a3;
  LODWORD(v22) = a2;
  if ((r & 0x4000) == 0) {
    goto LABEL_75;
  }
  if (!a4)
  {
    while (1)
    {
      uint64_t v33 = this[61];
      int32_t v34 = v33->chunkOffset;
      BOOL v11 = __OFSUB__(v34, 1);
      int v35 = v34 - 1;
      if (v35 < 0 == v11)
      {
        unsigned int v36 = v33->chunkContents[v35];
        if (v36 >> 11 <= 0x1A) {
          break;
        }
      }

      unsigned int v37 = utext_previous32(v33);
      unsigned int v36 = v37;
      if (!HIWORD(v37))
      {
        int v15 = this[65];
        goto LABEL_46;
      }

      if (HIWORD(v37) > 0x10u)
      {
        int v15 = this[65];
      }

      else
      {
        int v42 = ((uint64_t (*)(void))this[65]->p)(*((unsigned __int16 *)this[65]->pExtra
                                                            + 4
                                                            * *((unsigned __int16 *)this[65]->pExtra
                                                              + (((v37 >> 10) + 55232) >> 5))
                                                            + ((v37 >> 10) & 0x1F)));
        int v15 = this[65];
        if (v42 >= 1)
        {
          uint64_t v38 = v15->pExtra;
          unsigned int v40 = v42 + ((v36 >> 5) & 0x1F);
LABEL_50:
          __int16 v41 = v38[4 * (unsigned __int16)v38[v40] + (v36 & 0x1F)];
          goto LABEL_56;
        }
      }

      __int16 v41 = (__int16)v15->r;
LABEL_56:
      if (v36 == -1 || (v41 & 0x4000) == 0)
      {
        __int128 v43 = this[61];
        if (v36 != -1)
        {
          utext_next32(v43);
          __int128 v43 = this[61];
        }

        unint64_t v14 = utext_current32(v43);
        int v44 = this[61];
        uint64_t v45 = v44->chunkOffset;
        else {
          LODWORD(v22) = ((uint64_t (*)(void))v44->pFuncs->mapOffsetToNative)();
        }
        uint64_t v21 = a3;
        goto LABEL_69;
      }
    }

    v33->int32_t chunkOffset = v35;
LABEL_46:
    uint64_t v38 = v15->pExtra;
    if ((v36 & 0xFC00) == 0xD800) {
      int v39 = 320;
    }
    else {
      int v39 = 0;
    }
    unsigned int v40 = v39 + (v36 >> 5);
    goto LABEL_50;
  }

  do
  {
    utext_next32(this[61]);
    unsigned int v23 = utext_current32(this[61]);
    unsigned int v24 = v23;
    if (HIWORD(v23))
    {
      if (HIWORD(v23) > 0x10u)
      {
        v29 = this[65];
LABEL_36:
        __int16 v30 = (__int16)v29->r;
        continue;
      }

      int v28 = ((uint64_t (*)(void))this[65]->p)(*((unsigned __int16 *)this[65]->pExtra
                                                          + 4
                                                          * *((unsigned __int16 *)this[65]->pExtra
                                                            + (((v23 >> 10) + 55232) >> 5))
                                                          + ((v23 >> 10) & 0x1F)));
      v29 = this[65];
      if (v28 < 1) {
        goto LABEL_36;
      }
      int v25 = v29->pExtra;
      unsigned int v27 = v28 + ((v24 >> 5) & 0x1F);
    }

    else
    {
      int v25 = this[65]->pExtra;
      if (v23 >> 10 == 54) {
        int v26 = 320;
      }
      else {
        int v26 = 0;
      }
      unsigned int v27 = v26 + (v23 >> 5);
    }

    __int16 v30 = v25[4 * (unsigned __int16)v25[v27] + (v24 & 0x1F)];
  }

  while (v24 != -1 && (v30 & 0x4000) != 0);
  int32_t v31 = this[61];
  uint64_t v32 = v31->chunkOffset;
  else {
    uint64_t v21 = ((uint64_t (*)(void))v31->pFuncs->mapOffsetToNative)();
  }
  v46 = this[61];
  int32_t v47 = v46->chunkOffset;
  BOOL v11 = __OFSUB__(v47, 1);
  int v48 = v47 - 1;
  if (v48 < 0 == v11)
  {
    unint64_t v14 = v46->chunkContents[v48];
    if (v14 >> 11 < 0x1B)
    {
      v46->int32_t chunkOffset = v48;
      LODWORD(v22) = a2;
      goto LABEL_70;
    }
  }

  unint64_t v14 = utext_previous32(v46);
  LODWORD(v22) = a2;
LABEL_69:
  if (v14 >= 0x10000)
  {
    if (WORD1(v14) > 0x10u)
    {
      v59 = this[65];
    }

    else
    {
      int v58 = ((uint64_t (*)(void))this[65]->p)(*((unsigned __int16 *)this[65]->pExtra
                                                          + 4
                                                          * *((unsigned __int16 *)this[65]->pExtra
      v59 = this[65];
      if (v58 >= 1)
      {
        v49 = v59->pExtra;
        unsigned int v51 = v58 + ((v14 >> 5) & 0x1F);
        goto LABEL_74;
      }
    }

    __int16 r = (__int16)v59->r;
    if (a4) {
      goto LABEL_76;
    }
  }

  else
  {
LABEL_70:
    v49 = this[65]->pExtra;
    if ((v14 & 0xFC00) == 0xD800) {
      int v50 = 320;
    }
    else {
      int v50 = 0;
    }
    unsigned int v51 = v50 + (v14 >> 5);
LABEL_74:
    __int16 r = v49[4 * (unsigned __int16)v49[v51] + (v14 & 0x1F)];
LABEL_75:
    if (a4)
    {
LABEL_76:
      utext_setNativeIndex(this[61], (int)v22);
      unint64_t v52 = utext_current32(this[61]);
      unint64_t v14 = v52;
      if (WORD1(v52))
      {
        if (WORD1(v52) > 0x10u)
        {
          v57 = this[65];
        }

        else
        {
          int v56 = ((uint64_t (*)(void))this[65]->p)(*((unsigned __int16 *)this[65]->pExtra
                                                              + 4
                                                              * *((unsigned __int16 *)this[65]->pExtra
          v57 = this[65];
          if (v56 >= 1)
          {
            v53 = v57->pExtra;
            unsigned int v55 = v56 + ((v14 >> 5) & 0x1F);
            goto LABEL_84;
          }
        }

        __int16 r = (__int16)v57->r;
      }

      else
      {
        v53 = this[65]->pExtra;
        else {
          int v54 = 0;
        }
        unsigned int v55 = v54 + (v52 >> 5);
LABEL_84:
        __int16 r = v53[4 * (unsigned __int16)v53[v55] + (v14 & 0x1F)];
      }
    }
  }

  if (v96 > U_ZERO_ERROR)
  {
LABEL_91:
    if (a4) {
      a3 = a2;
    }
    else {
      a3 = a3;
    }
    utext_setNativeIndex(this[61], (int)a3);
    goto LABEL_95;
  }

  int v61 = 0;
  while (2)
  {
    while (2)
    {
      v62 = this[61];
      uint64_t v63 = v62->chunkOffset;
      else {
        uint64_t v64 = ((uint64_t (*)(void))v62->pFuncs->mapOffsetToNative)();
      }
      v65 = (uint64_t *)(r & 0x4000);
      if ((int)v21 > (int)v64 && (_DWORD)v65 == 0)
      {
        utext_next32(this[61]);
        unint64_t v67 = utext_current32(this[61]);
        unint64_t v14 = v67;
        if (!WORD1(v67))
        {
          v68 = this[65]->pExtra;
          else {
            int v69 = 0;
          }
          unsigned int v70 = v69 + (v67 >> 5);
          goto LABEL_114;
        }

        if (WORD1(v67) > 0x10u)
        {
          v72 = this[65];
        }

        else
        {
          int v71 = ((uint64_t (*)(void))this[65]->p)(*((unsigned __int16 *)this[65]->pExtra
                                                              + 4
                                                              * *((unsigned __int16 *)this[65]->pExtra
          v72 = this[65];
          if (v71 >= 1)
          {
            v68 = v72->pExtra;
            unsigned int v70 = v71 + ((v14 >> 5) & 0x1F);
LABEL_114:
            __int16 r = v68[4 * (unsigned __int16)v68[v70] + (v14 & 0x1F)];
            continue;
          }
        }

        __int16 r = (__int16)v72->r;
        continue;
      }

      break;
    }

    LanguageBreakEngine = icu::RuleBasedBreakIterator57::getLanguageBreakEngine( (icu::RuleBasedBreakIterator57 *)this,  v14,  v65);
    if (LanguageBreakEngine) {
      v61 += (*(uint64_t (**)(void *, UText *, uint64_t, uint64_t, __int128 *, void, UErrorCode *))(*(void *)LanguageBreakEngine + 32LL))( LanguageBreakEngine,  this[61],  v64,  v21,  &v94,  0LL,  &v96);
    }
    unint64_t v74 = utext_current32(this[61]);
    unint64_t v14 = v74;
    if (WORD1(v74))
    {
      if (WORD1(v74) > 0x10u)
      {
        v79 = this[65];
      }

      else
      {
        int v78 = ((uint64_t (*)(void))this[65]->p)(*((unsigned __int16 *)this[65]->pExtra
                                                            + 4
                                                            * *((unsigned __int16 *)this[65]->pExtra
        v79 = this[65];
        if (v78 >= 1)
        {
          v75 = v79->pExtra;
          unsigned int v77 = v78 + ((v14 >> 5) & 0x1F);
          goto LABEL_128;
        }
      }

      __int16 r = (__int16)v79->r;
    }

    else
    {
      v75 = this[65]->pExtra;
      else {
        int v76 = 0;
      }
      unsigned int v77 = v76 + (v74 >> 5);
LABEL_128:
      __int16 r = v75[4 * (unsigned __int16)v75[v77] + (v14 & 0x1F)];
    }

    if (v96 < U_ILLEGAL_ARGUMENT_ERROR) {
      continue;
    }
    break;
  }

  if (v61 < 1) {
    goto LABEL_91;
  }
  if (SDWORD2(v94) <= 0)
  {
    int v81 = 0;
    unsigned int v80 = a2 >> 31;
  }

  else
  {
    unsigned int v80 = **((_DWORD **)&v95 + 1) > (int)a2;
    int v81 = *(_DWORD *)(*((void *)&v95 + 1) + 4LL * (DWORD2(v94) - 1));
  }

  unsigned int v82 = v80 + v61;
  unsigned int v83 = v81 >= (int)a3 ? v82 : v82 + 1;
  v84 = (UText *)uprv_malloc(4LL * v83);
  this[68] = v84;
  if (!v84) {
    goto LABEL_91;
  }
  *((_DWORD *)this + 138) = v83;
  uint64_t v85 = SDWORD2(v94);
  if (SDWORD2(v94) < 1) {
    int v86 = 0;
  }
  else {
    int v86 = **((_DWORD **)&v95 + 1);
  }
  if (v86 <= (int)a2)
  {
    uint64_t v87 = 0LL;
  }

  else
  {
    v84->magic = a2;
    uint64_t v87 = 1LL;
  }

  uint64_t v88 = 0LL;
  uint64_t v89 = *((void *)&v95 + 1);
  uint64_t v90 = (v87 << 32) - 0x100000000LL;
  do
  {
    uint32_t v91 = 0;
    *(&v84->magic + v87 + v88++) = v91;
    v90 += 0x100000000LL;
  }

  while (v61 != v88);
  v92 = *this;
  if (a4) {
    uint64_t v93 = ((uint64_t (*)(UText **, uint64_t))v92->privA)(this, a3);
  }
  else {
    uint64_t v93 = (*(uint64_t (**)(UText **, uint64_t))&v92->b)(this, a2);
  }
  a3 = v93;
LABEL_95:
  icu::UVector32::~UVector32((void **)&v94);
  return a3;
}

uint64_t icu::RuleBasedBreakIterator57::previous(icu::RuleBasedBreakIterator57 *this)
{
  uint64_t v2 = *((void *)this + 68);
  if (v2)
  {
    int v3 = *((_DWORD *)this + 139);
    BOOL v4 = __OFSUB__(v3, 1);
    int v5 = v3 - 1;
    if (v5 < 0 == v4)
    {
      *((_DWORD *)this + 139) = v5;
      if (!v5) {
        *((_BYTE *)this + 532) = 0;
      }
      uint64_t v6 = *(unsigned int *)(v2 + 4LL * v5);
      utext_setNativeIndex(*((UText **)this + 61), (int)v6);
      return v6;
    }

    (*(void (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 200LL))(this);
  }

  if (*((void *)this + 61)
    && (uint64_t v7 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 112LL))(this), (_DWORD)v7))
  {
    uint64_t v8 = v7;
    unsigned int v9 = (uint64_t *)*((void *)this + 65);
    if (v9[4] || v9[3])
    {
      uint64_t v10 = icu::RuleBasedBreakIterator57::handlePrevious((uint64_t)this, v9[2]);
      do
      {
        uint64_t v6 = v10;
        if (!*((_DWORD *)this + 2)) {
          break;
        }
        UChar32 v11 = utext_char32At(*((UText **)this + 61), (int)v10 - 1);
        UChar32 v12 = utext_char32At(*((UText **)this + 61), (int)v6);
        if (v12 == -1 || v11 == -1) {
          break;
        }
        if (!u_isalpha(v12)) {
          break;
        }
        if (!u_isalpha(v11)) {
          break;
        }
        uint64_t v10 = icu::RuleBasedBreakIterator57::handlePrevious((uint64_t)this, *(void *)(*((void *)this + 65) + 16LL));
      }

      while ((int)v10 < (int)v6);
      if (*((_DWORD *)this + 134)) {
        return icu::RuleBasedBreakIterator57::checkDictionary((UText **)this, v6, v8, 1);
      }
    }

    else
    {
      int v15 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 112LL))(this);
      v16 = (UText *)*((void *)this + 61);
      int32_t chunkOffset = v16->chunkOffset;
      BOOL v4 = __OFSUB__(chunkOffset, 1);
      int v18 = chunkOffset - 1;
      if (v18 < 0 != v4 || v16->chunkContents[v18] >> 11 > 0x1Au) {
        utext_previous32(v16);
      }
      else {
        v16->int32_t chunkOffset = v18;
      }
      uint64_t v6 = icu::RuleBasedBreakIterator57::handlePrevious((uint64_t)this, *(void *)(*((void *)this + 65) + 16LL));
      if ((_DWORD)v6 == -1)
      {
        utext_setNativeIndex(*((UText **)this + 61), 0LL);
        uint64_t v6 = 0LL;
      }

      uint64_t v19 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 104LL))(this);
      int v20 = 0;
      char v21 = 0;
      if ((_DWORD)v19 != -1 && (int)v19 < v15)
      {
        do
        {
          uint64_t v6 = v19;
          int v20 = *((_DWORD *)this + 132);
          uint64_t v19 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 104LL))(this);
        }

        while ((_DWORD)v19 != -1 && (int)v19 < v15);
        char v21 = 1;
      }

      utext_setNativeIndex(*((UText **)this + 61), (int)v6);
      *((_DWORD *)this + 132) = v20;
      *((_BYTE *)this + 532) = v21;
    }
  }

  else
  {
    *((_DWORD *)this + 132) = 0;
    *((_BYTE *)this + 532) = 1;
    return 0xFFFFFFFFLL;
  }

  return v6;
}

uint64_t icu::RuleBasedBreakIterator57::handlePrevious(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  int v54 = 0;
  __int128 v53 = 0u;
  memset(v52, 0, sizeof(v52));
  *(_BYTE *)(a1 + 532) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  uint64_t v3 = *(void *)(a1 + 488);
  if (!v3 || !*(void *)(v2 + 520)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *(int *)(v3 + 40);
  if ((int)v4 > *(_DWORD *)(v3 + 28))
  {
    return 0xFFFFFFFFLL;
  }

  if (!(*(void *)(v3 + 32) + v4)) {
    return 0xFFFFFFFFLL;
  }
LABEL_5:
  int v5 = *(UText **)(v2 + 488);
  uint64_t chunkOffset = v5->chunkOffset;
  if ((int)chunkOffset <= v5->nativeIndexingLimit)
  {
    uint64_t v7 = v5->chunkNativeStart + chunkOffset;
  }

  else
  {
    uint64_t v7 = ((uint64_t (*)(void))v5->pFuncs->mapOffsetToNative)();
    int v5 = *(UText **)(v2 + 488);
    LODWORD(chunkOffset) = v5->chunkOffset;
  }

  BOOL v9 = __OFSUB__((_DWORD)chunkOffset, 1);
  int v10 = chunkOffset - 1;
  uint64_t v46 = v7;
  if (v10 < 0 != v9 || (unsigned int v11 = v5->chunkContents[v10], v11 >> 11 > 0x1A)) {
    unsigned int v11 = utext_previous32(v5);
  }
  else {
    v5->uint64_t chunkOffset = v10;
  }
  uint64_t v12 = a2 + 16;
  uint64_t v13 = *(unsigned int *)(a2 + 4);
  if ((*(_DWORD *)(a2 + 8) & 2) != 0) {
    LOWORD(v14) = 2;
  }
  else {
    LOWORD(v14) = 3;
  }
  unsigned int v15 = ((*(_DWORD *)(a2 + 8) & 2u) >> 1) ^ 1;
  uint64_t v49 = v46;
  uint64_t v50 = v2;
LABEL_18:
  int v48 = v11 & 0x1F;
  if (v11 >> 10 == 54) {
    int v16 = 320;
  }
  else {
    int v16 = 0;
  }
  uint64_t v47 = v16 + (v11 >> 5);
  while (v11 != -1)
  {
    if (v15 != 1)
    {
      int v18 = 0;
      goto LABEL_31;
    }

    uint64_t v17 = *(void *)(v2 + 520);
    if (HIWORD(v11))
    {
      if (HIWORD(v11) > 0x10u)
      {
        int v14 = *(_DWORD *)(v17 + 96);
        if ((v14 & 0x4000) == 0) {
          goto LABEL_27;
        }
      }

      else
      {
        int v29 = (*(uint64_t (**)(void))(v17 + 80))(*(unsigned __int16 *)(*(void *)(v17 + 64)
                                                                                 + 2LL
                                                                                 * (((v11 >> 10) & 0x1F)
                                                                                  + 4
                                                                                  * *(unsigned __int16 *)(*(void *)(v17 + 64) + 2LL * (((v11 >> 10) + 55232) >> 5)))));
        uint64_t v30 = *(void *)(v2 + 520);
        if (v29 < 1) {
          int v14 = *(_DWORD *)(v30 + 96);
        }
        else {
          LOWORD(v14) = *(_WORD *)(*(void *)(v30 + 64)
        }
                                 + 2LL
                                 * (v48
                                  + 4
        if ((v14 & 0x4000) == 0) {
          goto LABEL_27;
        }
      }

LABEL_96:
        v36->uint64_t chunkOffset = v39;
        return v8;
      }
    }

  LODWORD(v21) = a5;
LABEL_97:
  uint64_t v50 = (const unsigned __int8 *)(v21 - v18);
  if (v19 <= 0 && (int)v50 >= 1) {
    return (uint64_t)icu::ByteSinkUtil::appendNonEmptyUnchanged( (_DWORD *)(a4 + v18),  v50,  a6,  (icu::ByteSink *)v54,  a7,  v17);
  }
  return result;
}

      int v29 = *v31;
      src = v31;
      if (!*v31) {
        goto LABEL_166;
      }
    }
  }

  if (src) {
    int v19 = &src[srcLength];
  }
  else {
    int v19 = 0LL;
  }
  int v20 = (unsigned __int128)((v10 - dest) * (__int128)0x5555555555555556LL) >> 64;
  int v21 = v20 + (v20 >> 63);
  else {
    uint64_t v22 = v21;
  }
  if (v22 >= 3)
  {
    uint64_t v23 = 0;
    int v34 = (subchar >> 6) & 0x3F | 0xFFFFFF80;
    uint64_t v35 = subchar & 0x3F | 0x80;
    uint64_t v24 = dest;
    while (1)
    {
      unsigned int v36 = src + 1;
      unsigned int v37 = *src;
      if (v37 > 0x7F)
      {
        if (v37 > 0x7FF)
        {
          if ((unsigned __int16)((unsigned __int16)(v37 + 0x2000) >> 11) <= 0x1Eu)
          {
            *uint64_t v24 = (v37 >> 12) | 0xE0;
            v24[1] = (v37 >> 6) & 0x3F | 0x80;
            v24[2] = v37 & 0x3F | 0x80;
LABEL_111:
            v24 += 3;
            goto LABEL_112;
          }

          if (!--v22) {
            goto LABEL_114;
          }
          if ((v37 & 0x400) == 0)
          {
            int64_t v40 = *v36;
            if ((v40 & 0xFC00) == 0xDC00)
            {
              unsigned int v36 = src + 2;
              int v41 = (v37 << 10) - 56613888 + v40;
              *uint64_t v24 = (v41 >> 18) | 0xF0;
              v24[1] = (v41 >> 12) & 0x3F | 0x80;
              v24[2] = (v41 >> 6) & 0x3F | 0x80;
              v24[3] = v40 & 0x3F | 0x80;
LABEL_130:
              v24 += 4;
              goto LABEL_112;
            }
          }

          ++v23;
          if (subchar <= 0x7F)
          {
            *v24++ = subchar;
            goto LABEL_112;
          }

          if (subchar > 0x7FF)
          {
            if (HIWORD(subchar))
            {
              *uint64_t v24 = (subchar >> 18) | 0xF0;
              v24[1] = (subchar >> 12) & 0x3F | 0x80;
              v24[2] = v34;
              v24[3] = v35;
              goto LABEL_130;
            }

            *uint64_t v24 = (subchar >> 12) | 0xE0;
            v24[1] = v34;
            v24[2] = v35;
            goto LABEL_111;
          }

          *uint64_t v24 = (subchar >> 6) | 0xC0;
          v24[1] = v35;
        }

        else
        {
          *uint64_t v24 = (v37 >> 6) | 0xC0;
          v24[1] = v37 & 0x3F | 0x80;
        }

        v24 += 2;
      }

      else
      {
        *v24++ = v37;
      }

          if (v12 != 48 && !v28 && !v25) {
            return a1[2];
          }
          if ((v27 | 0x20) != 0x65) {
            goto LABEL_169;
          }
          if (v22 && (v10 & 4) == 0) {
            return a1[2];
          }
          if ((v22 & 1) == 0)
          {
            uint64_t v39 = v26 + 1;
            if (v26 + 1 == v6) {
              goto LABEL_153;
            }
            int64_t v40 = *v39;
            if (v40 == 45 || v40 == 43)
            {
              uint64_t v39 = v26 + 2;
              if (v26 + 2 == v6) {
                goto LABEL_153;
              }
            }

            else
            {
              LOBYTE(v40) = 43;
            }

            if (v39 == v6 || (unsigned int v51 = *v39, v51 - 58 < 0xFFFFFFF6))
            {
LABEL_153:
              if ((v10 & 4) == 0) {
                return a1[2];
              }
              *(void *)v65 = v26;
LABEL_67:
              int v29 = v28 + v24;
              if ((v61 & 1) != 0)
              {
                v66[v23++] = 49;
                --v29;
              }

              v66[v23] = 0;
              uint64_t v30 = v23;
              while ((int)v30 >= 1)
              {
                int32_t v31 = v30 - 1;
                int32_t v32 = *((unsigned __int8 *)&v65[4] + v30-- + 1);
                if (v32 != 48)
                {
                  int v33 = v31 + 1;
                  goto LABEL_112;
                }
              }

              int v33 = 0;
LABEL_112:
              int v44 = v23 - v33 + v29;
              if (v58)
              {
                uint64_t v42 = sub_1808D8BD8((uint64_t)v66, v33, v44);
              }

              else
              {
                sub_1808D91DC((uint64_t)v66, v33, v44);
                uint64_t v42 = v45;
              }

              *v60 = (*(void *)v65 - (void)a2) >> 1;
              uint64_t v46 = -v42;
              int v41 = v59 == 0;
LABEL_122:
              if (v41) {
                return v42;
              }
              else {
                return v46;
              }
            }

            unint64_t v52 = 0;
            __int128 v53 = v39 + 1;
            while (1)
            {
              if (v52 <= 107374181 || (int v54 = 0x3FFFFFFF, v52 == 107374182) && v51 <= 0x33) {
                int v54 = v51 + 10 * v52 - 48;
              }
              if (v53 == v6) {
                break;
              }
              unsigned int v55 = *v53++;
              unsigned int v51 = v55;
              unint64_t v52 = v54;
              if (v55 - 48 >= 0xA)
              {
                uint64_t v26 = v53 - 1;
                goto LABEL_165;
              }
            }

            uint64_t v26 = v6;
LABEL_165:
            *(void *)v65 = v26;
            else {
              int v56 = v54;
            }
            v28 += v56;
LABEL_169:
            if ((v10 & 0x14) != 0)
            {
              if ((v10 & 4) != 0)
              {
LABEL_174:
                if ((v10 & 0x10) != 0)
                {
                  sub_1808D8338((unsigned __int16 **)v65, v6);
                  if ((v22 & 1) == 0) {
                    goto LABEL_67;
                  }
                }

                else
                {
LABEL_66:
                  if (!v22) {
                    goto LABEL_67;
                  }
                }

                goto LABEL_176;
              }
            }

            else if (v26 != v6)
            {
              return a1[2];
            }

            goto LABEL_174;
          }
        }

LABEL_42:
    int v25 = v20[1];
    uint64_t v2 = v50;
    if (v25)
    {
      uint64_t v26 = *(void *)(v50 + 488);
      uint64_t v27 = *(unsigned int *)(v26 + 40);
      else {
        LODWORD(v28) = (*(uint64_t (**)(void))(*(void *)(v26 + 56) + 64LL))();
      }
      sub_1807FAF7C(v52, v25, v28);
    }

    if (!v19)
    {
      int v34 = v46;
      uint64_t v35 = v49;
      goto LABEL_64;
    }

    if (v18)
    {
      int32_t v31 = *(UText **)(v50 + 488);
      int32_t v32 = v31->chunkOffset;
      BOOL v9 = __OFSUB__(v32, 1);
      int v33 = v32 - 1;
      if (v33 < 0 != v9 || (unsigned int v11 = v31->chunkContents[v33], v11 >> 11 > 0x1A))
      {
        unsigned int v11 = utext_previous32(v31);
        unsigned int v15 = 1;
      }

      else
      {
        v31->uint64_t chunkOffset = v33;
        unsigned int v15 = 1;
      }

      goto LABEL_18;
    }

    if (v15 <= 1) {
      unsigned int v15 = 1;
    }
  }

  if (v15 != 2)
  {
    int v18 = 0;
    LOWORD(v14) = 1;
    unsigned int v15 = 2;
    goto LABEL_31;
  }

  int v34 = v46;
  uint64_t v35 = v49;
  if ((_DWORD)v49 == (_DWORD)v46)
  {
    unsigned int v37 = *(UText **)(v2 + 488);
    uint64_t v38 = (int)v46 - v37->chunkNativeStart;
    if (v38 < 0 || v38 >= v37->nativeIndexingLimit || v37->chunkContents[v38] >> 10 > 0x36u)
    {
      utext_setNativeIndex(v37, (int)v46);
      unsigned int v37 = *(UText **)(v2 + 488);
      LODWORD(v38) = v37->chunkOffset;
    }

    else
    {
      v37->uint64_t chunkOffset = v38;
    }

    BOOL v9 = __OFSUB__((_DWORD)v38, 1);
    int v41 = v38 - 1;
    if (v41 < 0 != v9 || v37->chunkContents[v41] >> 11 > 0x1Au) {
      utext_previous32(v37);
    }
    else {
      v37->uint64_t chunkOffset = v41;
    }
    unsigned int v36 = *(UText **)(v2 + 488);
    goto LABEL_81;
  }

  if ((_DWORD)v20 == a6) {
    goto LABEL_104;
  }
  if (v22 < 0xE0)
  {
    uint64_t v35 = v22 & 0x1F;
LABEL_51:
    unsigned int v36 = *(unsigned __int8 *)(a3 + (int)v20) ^ 0x80;
    if (v36 > 0x3F) {
      goto LABEL_95;
    }
    LODWORD(v22) = v36 | (v35 << 6);
    unsigned int v37 = *(void *)v52;
    if (((v35 >> 5) & 0x1FFFFF) > 0x1A)
    {
      if (WORD1(v22))
      {
        if (v22 >= 0x110000)
        {
          int v44 = *(_DWORD *)(v52 + 24) + 128;
          goto LABEL_89;
        }

        if ((int)v22 >= *(_DWORD *)(v52 + 44))
        {
          int v44 = *(_DWORD *)(v52 + 48);
LABEL_89:
          LODWORD(v20) = v20 + 1;
          uint64_t v46 = *(unsigned __int16 *)(v37 + 2LL * v44);
          if ((v46 & 8) != 0) {
            goto LABEL_16;
          }
          if (v46 >= 0x80 && (v46 & 2) != 0)
          {
            uint64_t v49 = (const unsigned __int8 *)(a5 - v19);
            uint64_t result = icu::ByteSinkUtil::appendCodePoint( (icu::ByteSinkUtil *)(v20 - a5),  (int)v22 + ((__int16)v46 >> 7),  a7,  a8,  v15);
            goto LABEL_34;
          }

          goto LABEL_95;
        }

        uint64_t v38 = ((v22 >> 5) & 0x3F) + *(unsigned __int16 *)(v37 + 2LL * ((v35 >> 5) + 2080));
      }

      else
      {
        else {
          uint64_t v43 = 320;
        }
        uint64_t v38 = v43 + (v22 >> 5);
      }
    }

    else
    {
      uint64_t v38 = v22 >> 5;
    }

    int v44 = (v36 & 0x1F) + 4 * *(unsigned __int16 *)(v37 + 2LL * v38);
    goto LABEL_89;
  }

  if (v21 <= 0xEF)
  {
    int v33 = v21 & 0xF;
    int v34 = *(_BYTE *)(a3 + v20) & 0x3F;
    goto LABEL_47;
  }

  uint64_t v42 = *(unsigned __int8 *)(a3 + v20);
  int v20 = a5 + 2LL;
  if (a5 + 2 != a6)
  {
    int v34 = *(unsigned __int8 *)(a3 + v20) ^ 0x80;
    if (v34 > 0x3F) {
      goto LABEL_95;
    }
    int v33 = v42 & 0x3F | (((_DWORD)v22 - 240) << 6);
LABEL_47:
    LODWORD(v20) = v20 + 1;
    if ((_DWORD)v20 == a6) {
      goto LABEL_104;
    }
    uint64_t v35 = v34 | (v33 << 6);
    goto LABEL_51;
  }

        uint64_t v38 = *(_DWORD *)(v4 + 24);
        uint64_t v39 = v38 <= 1 || Script < 2;
        if (!v39 && v38 != Script) {
          break;
        }
        if (Script >= 2 && v38 <= 1)
        {
          *(_DWORD *)(v4 + 24) = Script;
          uint64_t v42 = *(_DWORD *)(v4 + 292);
          uint64_t v43 = v42 - 1;
          if (v42 >= 1)
          {
            int v44 = *(_DWORD *)(v4 + 284) - v42 + 32;
            uint64_t v45 = v44 & 0x1F;
            uint64_t v46 = -v44;
            int v25 = v46 < 0;
            uint64_t v47 = v46 & 0x1F;
            if (v25) {
              int v48 = v45;
            }
            else {
              int v48 = -v47;
            }
            do
            {
              uint64_t v49 = v48 + 1;
              int v25 = -v49 < 0;
              uint64_t v50 = -v49 & 0x1F;
              int v48 = v49 & 0x1F;
              if (!v25) {
                int v48 = -v50;
              }
              *(_DWORD *)(v4 + 8LL * v48 + 32) = Script;
              --v42;
            }

            while (v42);
            uint64_t v43 = -1;
          }

          *(_DWORD *)(v4 + 292) = v43;
          uint64_t v38 = Script;
        }

        if ((v17 & 0x80000001) == 1)
        {
          unsigned int v51 = *(_DWORD *)(v4 + 288);
          if (v51 >= 1)
          {
            unint64_t v52 = *(_DWORD *)(v4 + 292);
            int32_t v32 = __OFSUB__(v52, 1);
            __int128 v53 = v52 - 1;
            if (v53 < 0 == v32) {
              *(_DWORD *)(v4 + 292) = v53;
            }
            *(_DWORD *)(v4 + 288) = v51 - 1;
            int v54 = *(_DWORD *)(v4 + 284) + 31;
            int v25 = -v54 < 0;
            unsigned int v55 = -v54 & 0x1F;
            int v56 = v54 & 0x1F;
            if (!v25) {
              int v56 = -v55;
            }
            else {
              v57 = v56;
            }
            *(_DWORD *)(v4 + 284) = v57;
          }
        }

        int v5 = *(_DWORD *)(v4 + 20) + 1;
        *(_DWORD *)(v4 + 20) = v5;
        uint64_t v6 = *(_DWORD *)v4;
        if (v5 >= *(_DWORD *)v4) {
          goto LABEL_79;
        }
      }

      if (v11 >= 0x10000) {
        --*(_DWORD *)(v4 + 20);
      }
LABEL_79:
      if (a2) {
        *a2 = *(_DWORD *)(v4 + 16);
      }
      if (a3) {
        *a3 = *(_DWORD *)(v4 + 20);
      }
      if (a4) {
        *a4 = v38;
      }
      return 1LL;
    }
  }

  return result;
}

    result[9] = 0;
    *(_DWORD *)uint64_t result = 1;
LABEL_43:
    if (!*a5) {
      return result;
    }
    uint64_t v12 = *a6 | 0x20;
    goto LABEL_45;
  }

  BOOL v9 = result + 9;
  if (result + 9 != a3)
  {
    if (a4 >= 1)
    {
      int v10 = a4 + 1;
      do
      {
        unsigned int v11 = *a3++;
        *v9++ = v11;
        --v10;
      }

      while (v10 > 1);
    }

    *(_DWORD *)uint64_t result = a4;
  }

  if (*a5)
  {
    uint64_t v12 = *a6 | 0x820;
LABEL_45:
    *a6 = v12;
  }

  return result;
}

            icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)v42);
            v39[1] = v41;
            if (v26)
            {
              uint64_t v28 = 0LL;
              goto LABEL_61;
            }

            int64_t v40 = L"ordinal";
            icu::UnicodeString::UnicodeString(v42, 1LL, &v40);
            int v29 = v43;
            if ((v43 & 0x8000u) == 0) {
              uint64_t v30 = v43 >> 5;
            }
            else {
              uint64_t v30 = v45;
            }
            if ((v43 & 1) != 0)
            {
              int v29 = BYTE8(v47[0]);
              int v34 = BYTE8(v47[0]) & 1;
              goto LABEL_60;
            }

            int32_t v31 = v30 & (v30 >> 31);
            if (v30 < 0)
            {
              int32_t v32 = 0;
            }

            else
            {
              int32_t v32 = v30 - v31;
              int v33 = v30;
              if (v30 - v31 >= v30)
              {
LABEL_54:
                if ((BYTE8(v47[0]) & 1) != 0)
                {
                  int v34 = 0;
                }

                else
                {
                  if ((v43 & 2) != 0) {
                    uint64_t v35 = v44;
                  }
                  else {
                    uint64_t v35 = v46;
                  }
                  int v34 = icu::UnicodeString::doEqualsSubstring((uint64_t)v47, 0, v30, (uint64_t)v35, v31, v33);
                }

  icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0xFFFFFFFFLL, 1, a3, (icu::UnicodeString *)&v35, a6);
  icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v35);
  return this;
}

    uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v39, ++v8, (const char **)&__s1, a3);
    if (!(_DWORD)result) {
      return result;
    }
  }

  unsigned int v11 = 6LL;
LABEL_20:
  uint64_t v38 = 0LL;
  uint64_t v12 = 0uLL;
  uint64_t v35 = *(uint64_t **)(v7[1] + 8 * v11 + 376);
  if (!v35)
  {
    inited = icu::TimeUnitFormat::initHash(v10, a5);
    sub_1809986CC((_BYTE ***)&v38, (_BYTE **)inited, (int *)a5);
    uint64_t v35 = v38;
    uint64_t v12 = 0uLL;
  }

  unsigned int v37 = 0LL;
  v36[0] = v12;
  v36[1] = v12;
  (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88LL))(v36, a3, a5);
  if (*(int *)a5 > 0)
  {
LABEL_41:
    sub_1808C144C((_BYTE ***)&v38);
    goto LABEL_42;
  }

  int v34 = v11;
  int v14 = v35;
  if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v36, 0, (const char **)&__s1, a3))
  {
LABEL_39:
    uint64_t v30 = v7[1] + 8 * v34;
    if (!*(void *)(v30 + 376))
    {
      int32_t v31 = v38;
      uint64_t v38 = 0LL;
      *(void *)(v30 + 376) = v31;
    }

    goto LABEL_41;
  }

  unsigned int v15 = 1;
  while (1)
  {
    *a5 = U_ZERO_ERROR;
    memset(v44, 0, 64);
    LODWORD(v43[0]) = 0;
    v42[0] = (*(uint64_t (**)(icu::ResourceValue *, UChar **, UErrorCode *))(*(void *)a3 + 32LL))( a3,  v43,  a5);
    int v16 = (icu::UnicodeString *)icu::UnicodeString::UnicodeString(v44, 1LL, v42);
    uint64_t v17 = (void *)*(unsigned int *)a5;
LABEL_38:
    icu::UnicodeString::~UnicodeString(v17, v16);
  }

  memset(v43, 0, sizeof(v43));
  icu::UnicodeString::UnicodeString(v43, __s1, 0xFFFFFFFFLL, 0LL);
  if ((icu::UVector::indexOf((icu::UVector *)v7[2], (uint64_t)v43, 0LL) & 0x80000000) != 0)
  {
LABEL_37:
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v43);
    int v16 = (icu::UnicodeString *)v44;
    goto LABEL_38;
  }

  int v20 = icu::UMemory::operator new((uint64_t *)v19, (icu::UMemory *)0x330, v18);
  if (v20)
  {
    int v21 = (icu::MessageFormat *)v20;
    icu::MeasureFormat::getLocale((icu::MeasureFormat *)v7[1], a5, (icu::Locale *)v42);
    icu::MessageFormat::MessageFormat(v21, (const icu::UnicodeString *)v44, (const icu::Locale *)v42, a5);
    icu::Locale::~Locale((icu::Locale *)v42);
    uint64_t v22 = (void *)uhash_get(*v14, (uint64_t)v43);
    if (!v22)
    {
      uint64_t v23 = uprv_malloc(0x10uLL);
      uint64_t v22 = v23;
      if (!v23)
      {
        *a5 = U_MEMORY_ALLOCATION_ERROR;
LABEL_47:
        uprv_free(v22);
LABEL_48:
        (*(void (**)(icu::MessageFormat *))(*(void *)v21 + 8LL))(v21);
        goto LABEL_49;
      }

      *uint64_t v23 = 0LL;
      v23[1] = 0LL;
      uint64_t v26 = *v14;
      uint64_t v27 = (icu::UnicodeString *)icu::UMemory::operator new(v25, (icu::UMemory *)0x40, v24);
      uint64_t v28 = (uint64_t)v27;
      if (v27) {
        icu::UnicodeString::UnicodeString(v27, v43);
      }
      uhash_put(v26, v28, (uint64_t)v22, (int *)a5);
      uprv_free(0LL);
      int v14 = v35;
    }

    int v19 = (void *)*((unsigned int *)v7 + 6);
    *((void *)v22 + (void)v19) = v21;
    goto LABEL_37;
  }

  int32_t v32 = *(unsigned int *)a5;
  if ((int)v32 <= 0)
  {
    int32_t v32 = 7LL;
    *a5 = U_MEMORY_ALLOCATION_ERROR;
  }

LABEL_93:
  int64_t v40 = (int)v8;
  uint64_t v39 = (int)v8 - v36->chunkNativeStart;
  if (v39 >= 0 && v39 < v36->nativeIndexingLimit && v36->chunkContents[v39] >> 10 <= 0x36u) {
    goto LABEL_96;
  }
LABEL_97:
  utext_setNativeIndex(v36, v40);
  return v8;
}

      unsigned int v82 = *v2;
      if (*v2 <= 0 && (unint64_t)v21 < v11 && (unint64_t)v208 >= *(void *)(v3 + 40))
      {
        unsigned int v82 = 15;
        *uint64_t v2 = 15;
      }

      unsigned int v83 = v207;
      if (v207)
      {
        v84 = v21 - v9;
        if (v84)
        {
          for (i = (v84 >> 1) - (v82 == 11); i; --i)
            *v83++ = v19++;
        }
      }

      *(_DWORD *)(v10 + 84) = v18;
      *(void *)(v3 + 16) = v21;
      *(void *)(v3 + 32) = v208;
      *(void *)(v3 + 48) = v83;
      return result;
    }

    v62 = 0;
    uint64_t v64 = *(void *)(v3 + 8);
    uint64_t v63 = *(unsigned __int16 **)(v3 + 16);
    v65 = *(void *)(v3 + 24);
    v208 = *(_BYTE **)(v3 + 32);
    v209 = 0LL;
    v66 = *(_DWORD *)(v3 + 40) - (_DWORD)v208;
    v207 = *(int **)(v3 + 48);
    unint64_t v67 = *(void *)(v64 + 48);
    v68 = *(void *)(v67 + 88);
    int v69 = 240LL;
    if ((*(_BYTE *)(v64 + 56) & 0x10) == 0) {
      int v69 = 232LL;
    }
    unsigned int v70 = *(void *)(v67 + v69);
    if (*(_BYTE *)(v64 + 63)) {
      int v71 = 2048;
    }
    else {
      int v71 = 3072;
    }
    v72 = *(_BYTE *)(v67 + 253);
    LODWORD(v73) = *(_DWORD *)(v64 + 84);
    if ((_DWORD)v73) {
      unint64_t v74 = -1;
    }
    else {
      unint64_t v74 = 0;
    }
    if ((_DWORD)v73 && v66 > 0) {
      goto LABEL_368;
    }
    while (1)
    {
      if ((unint64_t)v63 >= v65)
      {
LABEL_382:
        *(_DWORD *)(v64 + 84) = v73;
        *(void *)(v3 + 16) = v63;
        goto LABEL_383;
      }

      if (v66 < 1)
      {
        v174 = 15;
        goto LABEL_381;
      }

      v169 = *v63++;
      v73 = v169;
      v209 = v63;
      ++v62;
      if ((v169 & 0xF800) != 0xD800) {
        break;
      }
      if ((v73 & 0x400) != 0) {
        goto LABEL_379;
      }
LABEL_368:
      v170 = *v63;
      if ((v170 & 0xFC00) != 0xDC00)
      {
LABEL_379:
        v174 = 12;
LABEL_381:
        *uint64_t v2 = v174;
        goto LABEL_382;
      }

      v209 = ++v63;
      ++v62;
      v73 = (((_DWORD)v73 << 10) - 56613888 + v170);
      v171 = v208;
      if ((v72 & 1) != 0)
      {
LABEL_373:
        v172 = *(unsigned __int16 *)(v70
                                   + 2
                                   * ((v73 & 0xF)
                                    + *(unsigned __int16 *)(v68
                                                          + 2LL
        if (v71 > v172) {
          goto LABEL_374;
        }
        v208 = v171 + 1;
        *v171 = v172;
        v173 = v207;
        if (v207)
        {
          *v207 = v74;
          v207 = v173 + 1;
        }

        LODWORD(v73) = 0;
        --v66;
        uint64_t v63 = v209;
        unint64_t v74 = v62;
      }

      else
      {
LABEL_374:
        *(void *)(v3 + 16) = v63;
        uint64_t result = sub_18083A99C( v64,  *(void *)(v64 + 48),  v73,  (uint64_t *)&v209,  v65,  &v208,  (unint64_t)&v171[v66],  &v207,  v74,  *(_BYTE *)(v3 + 2),  v2);
        LODWORD(v73) = result;
        uint64_t v63 = v209;
        if (*v2 > 0) {
          goto LABEL_382;
        }
        unint64_t v74 = v62 + (((unint64_t)v209 - *(void *)(v3 + 16)) >> 1);
        v66 = *(_DWORD *)(v3 + 40) - (_DWORD)v208;
        v62 = v74;
      }
    }

    v171 = v208;
    goto LABEL_373;
  }

  uint64_t v39 = *(unsigned __int16 **)(v3 + 16);
  uint64_t v38 = *(void *)(v3 + 24);
  int64_t v40 = *(_BYTE **)(v3 + 32);
  v205 = v40;
  v206 = (unint64_t)v39;
  int v41 = *(_DWORD *)(v3 + 40);
  uint64_t v42 = *(int **)(v3 + 48);
  v204 = v42;
  if (*(_BYTE *)(v5 + 254)) {
    uint64_t v43 = *(void *)(v5 + 96);
  }
  else {
    uint64_t v43 = 0LL;
  }
  int v44 = *(_DWORD *)(v4 + 56);
  uint64_t v45 = 232LL;
  if ((v44 & 0x10) != 0) {
    uint64_t v45 = 240LL;
  }
  LODWORD(v46) = *(_DWORD *)(v4 + 84);
  if ((_DWORD)v6 == 12)
  {
    uint64_t v47 = *(_DWORD *)(v4 + 80);
  }

  else
  {
    uint64_t v47 = 0;
  }

  int v48 = v41 - (_DWORD)v40;
  v195 = *(void *)(v5 + 88);
  v197 = *(void *)(v5 + v45);
  if ((_DWORD)v46) {
    uint64_t v49 = -1;
  }
  else {
    uint64_t v49 = 0;
  }
  if ((v44 & 0x1000) != 0)
  {
    v192 = 0x4100420000LL;
    v196 = 2;
    v193 = 2;
    v194 = 10;
    int v56 = 10;
    v57 = 2;
LABEL_66:
    v190 = v57;
    v191 = v56;
    goto LABEL_67;
  }

  if ((v44 & 0x2000) != 0)
  {
    v196 = 1;
    v192 = 0LL;
    int v56 = 40;
    v57 = 1;
    v193 = 1;
    v194 = 41;
    goto LABEL_66;
  }

  uint64_t v50 = v44 << 17;
  if ((v44 & 0x4000) != 0) {
    unsigned int v51 = 26;
  }
  else {
    unsigned int v51 = 15;
  }
  if ((v44 & 0x4000) != 0) {
    unint64_t v52 = 2;
  }
  else {
    unint64_t v52 = 1;
  }
  uint64_t result = 1LL;
  if ((v44 & 0x4000) != 0) {
    __int128 v53 = 26;
  }
  else {
    __int128 v53 = 14;
  }
  v191 = v53;
  v193 = v52;
  v194 = v51;
  v196 = v52;
  if ((*(_DWORD *)(v4 + 56) & 0x4000) != 0) {
    int v54 = 7340032;
  }
  else {
    int v54 = 0;
  }
  if ((*(_DWORD *)(v4 + 56) & 0x4000) != 0) {
    unsigned int v55 = 2;
  }
  else {
    unsigned int v55 = 1;
  }
  v190 = v55;
  LODWORD(v192) = v54;
  HIDWORD(v192) = (v50 >> 31) & 0x71;
LABEL_67:
  int v58 = 0;
  v59 = *(_DWORD *)(v5 + 260);
  v60 = -1;
  v203 = v2;
  v201 = v59;
  v199 = v6 - 1;
  v198 = v7;
  int v61 = 0LL;
  if ((_DWORD)v46 && v48 > 0) {
    goto LABEL_149;
  }
  while (1)
  {
    while (1)
    {
      v92 = v48 & (v48 >> 31);
      if (v48 < 1)
      {
LABEL_135:
        __int128 v94 = 15;
        goto LABEL_136;
      }

      ++v58;
      while (1)
      {
        uint64_t v46 = *v39;
        v206 = (unint64_t)(v39 + 1);
        uint64_t v93 = v205++;
        *uint64_t v93 = v46;
        uint64_t v42 = v204;
        if (v204)
        {
          *v204 = v49;
          v204 = ++v42;
          v60 = v49;
          uint64_t v49 = v58;
        }

        --v48;
        uint64_t v39 = (unsigned __int16 *)v206;
        if (v206 >= v38)
        {
          LODWORD(v46) = 0;
          goto LABEL_162;
        }

        ++v58;
        if (v48 + 1 < 2)
        {
          LODWORD(v46) = 0;
          goto LABEL_135;
        }
      }

      ++v39;
      v104 = *(unsigned __int16 *)(v43 + ((v46 >> 5) & 0x7FE));
      switch(v8)
      {
        case 0:
          v102 = *(unsigned __int16 *)(v197 + 2LL * ((v46 & 0x3F) + v104));
          if (v102 > 0xFF) {
            goto LABEL_241;
          }
          goto LABEL_289;
        case 1:
          v125 = (unsigned __int8 *)(v197 + 3LL * ((v46 & 0x3F) + v104));
          v102 = (*v125 << 16) | (v125[1] << 8) | v125[2];
          if (v102 <= 0xFF) {
            goto LABEL_289;
          }
          if (v102 < 0x10000) {
            int v61 = 2LL;
          }
          else {
            int v61 = 3LL;
          }
          break;
        case 2:
          v102 = *(_DWORD *)(v197 + 4LL * ((v46 & 0x3F) + v104));
          if (v102 <= 0xFF) {
            goto LABEL_289;
          }
          if (HIBYTE(v102)) {
            LODWORD(v61) = 4;
          }
          else {
            LODWORD(v61) = 3;
          }
          if (v102 >= 0x10000) {
            int v61 = v61;
          }
          else {
            int v61 = 2LL;
          }
          break;
        case 3:
        case 4:
        case 5:
        case 6:
        case 9:
        case 10:
          goto LABEL_265;
        case 7:
          v102 = *(unsigned __int16 *)(v197 + 2LL * ((v46 & 0x3F) + v104));
          if (v102 <= 0xFF) {
            goto LABEL_289;
          }
          v126 = v102 | 0x8F0080;
          if ((v102 & 0x80) != 0)
          {
            v126 = v102;
            LODWORD(v61) = 2;
          }

          else
          {
            LODWORD(v61) = 3;
          }

          v127 = (v102 & 0x8000) == 0;
          if ((v102 & 0x8000) != 0) {
            v102 = v126;
          }
          else {
            v102 |= 0x8E8000u;
          }
          if (v127) {
            int v61 = 3LL;
          }
          else {
            int v61 = v61;
          }
          break;
        case 8:
          v128 = (unsigned __int8 *)(v197 + 3LL * ((v46 & 0x3F) + v104));
          v129 = *v128;
          v130 = v128[1];
          v102 = v128[2] | (v129 << 16) | (v130 << 8);
          if (v102 > 0xFF)
          {
            int v61 = 2LL;
            if (v102 >= 0x10000)
            {
              if ((char)v129 < 0)
              {
                if ((v130 & 0x80u) != 0)
                {
                  int v61 = 3LL;
                }

                else
                {
                  v102 |= 0x8F008000;
                  int v61 = 4LL;
                }
              }

              else
              {
                v102 |= 0x8E800000;
                int v61 = 4LL;
              }
            }
          }

          else
          {
LABEL_289:
            v103 = v61;
            int v61 = 1LL;
            if (!v102) {
              goto LABEL_305;
            }
          }

          break;
        case 11:
          *(_DWORD *)(v4 + 80) = v47;
          v102 = *(unsigned __int16 *)(v197 + 2LL * ((v46 & 0x3F) + v104));
          if (v102 > 0xFF)
          {
            v146 = v102 | (v191 << 16);
            v147 = v192 | (v191 << 24) | v102;
            uint64_t result = 4LL;
            if (v190 == 2) {
              LODWORD(v61) = 4;
            }
            else {
              v147 = v102;
            }
            if (v190 == 1) {
              LODWORD(v61) = 3;
            }
            else {
              v146 = v147;
            }
            if (v47 == 2)
            {
              int v61 = 2LL;
            }

            else
            {
              v102 = v146;
              int v61 = v61;
            }

            uint64_t v47 = 2;
          }

          else
          {
            if (!v102) {
              goto LABEL_304;
            }
            v131 = v102 | (v194 << 8);
            v132 = (v194 << 16) | (HIDWORD(v192) << 8) | v102;
            uint64_t result = 3LL;
            if (v193 == 2) {
              LODWORD(v61) = 3;
            }
            else {
              v132 = v102;
            }
            if (v193 == 1) {
              LODWORD(v61) = 2;
            }
            else {
              v131 = v132;
            }
            if (v47 < 2)
            {
              int v61 = 1LL;
            }

            else
            {
              v102 = v131;
              int v61 = v61;
            }

            if (v47 >= 2) {
              uint64_t v47 = 1;
            }
          }

          break;
        default:
          if ((_DWORD)v6 == 219)
          {
            v102 = *(unsigned __int16 *)(v197 + 2LL * ((v46 & 0x3F) + v104));
            if (v102 < 0x100) {
              goto LABEL_304;
            }
LABEL_241:
            int v61 = 2LL;
          }

          else
          {
LABEL_265:
            v102 = 0;
            int v61 = 0LL;
          }

          break;
      }

        v33 += v34;
LABEL_94:
        v31 += v35;
        if (v31 >= v32)
        {
          if (v33 < 0)
          {
LABEL_117:
            *v281 = 7;
            goto LABEL_207;
          }

          icu::UnicodeString::operator=((UChar **)(a5 + 640), v55);
          goto LABEL_94;
        }

uint64_t icu::RuleBasedBreakIterator57::following(icu::RuleBasedBreakIterator57 *this, int a2)
{
  uint64_t v3 = (UText *)*((void *)this + 61);
  if (!v3 || utext_nativeLength(v3) <= a2)
  {
    (*(void (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 88LL))(this);
LABEL_11:
    int v10 = *(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 104LL);
    return v10(this);
  }

  if (a2 < 0)
  {
    int v10 = *(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 80LL);
    return v10(this);
  }

  utext_setNativeIndex(*((UText **)this + 61), a2);
  int NativeIndex = utext_getNativeIndex(*((const UText **)this + 61));
  int v6 = NativeIndex;
  uint64_t v7 = (int *)*((void *)this + 68);
  if (v7)
  {
    if (*v7 <= NativeIndex && v7[*((int *)this + 138) - 1] > NativeIndex)
    {
      uint64_t v8 = 0LL;
      do
      {
        *((_DWORD *)this + 139) = v8;
        uint64_t v9 = v7[v8++];
      }

      while ((int)v9 <= NativeIndex);
      utext_setNativeIndex(*((UText **)this + 61), (int)v9);
      return v9;
    }

    (*(void (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 200LL))(this);
  }

  uint64_t v12 = *((void *)this + 65);
  if (!*(void *)(v12 + 32))
  {
    uint64_t v16 = *(void *)(v12 + 24);
    utext_setNativeIndex(*((UText **)this + 61), v6);
    if (v16)
    {
      uint64_t v17 = (UText *)*((void *)this + 61);
      int32_t chunkOffset = v17->chunkOffset;
      BOOL v19 = __OFSUB__(chunkOffset, 1);
      int v20 = chunkOffset - 1;
      if (v20 < 0 != v19 || v17->chunkContents[v20] >> 11 > 0x1Au) {
        utext_previous32(v17);
      }
      else {
        v17->int32_t chunkOffset = v20;
      }
      icu::RuleBasedBreakIterator57::handleNext((uint64_t)this, *(void *)(*((void *)this + 65) + 24LL));
      uint64_t v21 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 96LL))(this);
      while (1)
      {
        uint64_t v22 = *(void *)this;
        uint64_t v9 = v21;
        uint64_t v21 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(v22 + 96))(this);
      }

      uint64_t v9 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(v22 + 104))(this);
    }

    else if (v6 && (v6 != 1 || utext_getNativeIndex(*((const UText **)this + 61))))
    {
      uint64_t v23 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 96LL))(this);
      uint64_t v9 = v23;
      do
        uint64_t v15 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 104LL))(this);
      while ((_DWORD)v15 != -1 && (int)v15 <= v6);
      return v15;
    }

    goto LABEL_11;
  }

  utext_setNativeIndex(*((UText **)this + 61), v6);
  uint64_t v13 = (UText *)*((void *)this + 61);
  uint64_t v14 = v13->chunkOffset;
  else {
    v13->int32_t chunkOffset = v14 + 1;
  }
  icu::RuleBasedBreakIterator57::handlePrevious((uint64_t)this, *(void *)(*((void *)this + 65) + 32LL));
  uint64_t v9 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 104LL))(this);
  do
    uint64_t v15 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 104LL))(this);
  while ((int)v15 <= v6);
  return v15;
}

uint64_t icu::RuleBasedBreakIterator57::preceding(icu::RuleBasedBreakIterator57 *this, int a2)
{
  uint64_t v3 = (UText *)*((void *)this + 61);
  if (!v3 || utext_nativeLength(v3) < a2)
  {
    int v5 = *(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 88LL);
    return v5(this);
  }

  if (a2 < 0)
  {
    int v5 = *(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 80LL);
    return v5(this);
  }

  utext_setNativeIndex(*((UText **)this + 61), a2);
  int NativeIndex = utext_getNativeIndex(*((const UText **)this + 61));
  LODWORD(v8) = NativeIndex;
  uint64_t v9 = (_DWORD *)*((void *)this + 68);
  if (!v9) {
    goto LABEL_10;
  }
  if (*v9 < NativeIndex)
  {
    uint64_t v10 = *((unsigned int *)this + 138);
    if (v9[(int)v10 - 1] >= NativeIndex)
    {
      *((_DWORD *)this + 139) = 0;
      if ((int)v10 <= 0)
      {
        int v21 = -1;
        *((_DWORD *)this + 139) = -1;
      }

      else
      {
        uint64_t v20 = 0LL;
        while (v9[v20] < NativeIndex)
        {
          *((_DWORD *)this + 139) = ++v20;
          if (v10 == v20)
          {
            LODWORD(v20) = v10;
            break;
          }
        }

        int v21 = v20 - 1;
        *((_DWORD *)this + 139) = v20 - 1;
      }

      *((_BYTE *)this + 532) = 0;
LABEL_53:
      utext_setNativeIndex(*((UText **)this + 61), (int)v9[v21]);
      return *(unsigned int *)(*((void *)this + 68) + 4LL * *((int *)this + 139));
    }
  }

  (*(void (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 200LL))(this);
LABEL_10:
  uint64_t v11 = *((void *)this + 65);
  if (*(void *)(v11 + 24))
  {
    utext_setNativeIndex(*((UText **)this + 61), (int)v8);
    uint64_t v12 = (UText *)*((void *)this + 61);
    uint64_t chunkOffset = v12->chunkOffset;
    if ((int)chunkOffset <= v12->nativeIndexingLimit)
    {
      int64_t v14 = v12->chunkNativeStart + chunkOffset;
    }

    else
    {
      LODWORD(v14) = ((uint64_t (*)(void))v12->pFuncs->mapOffsetToNative)();
      uint64_t v12 = (UText *)*((void *)this + 61);
    }

    if ((_DWORD)v14 != (_DWORD)v8)
    {
      uint64_t v18 = v12->chunkOffset;
      if ((int)v18 >= v12->chunkLength || v12->chunkContents[v18] >> 11 > 0x1Au)
      {
        utext_next32(v12);
        uint64_t v12 = (UText *)*((void *)this + 61);
        int32_t v19 = v12->chunkOffset;
      }

      else
      {
        int32_t v19 = v18 + 1;
        v12->uint64_t chunkOffset = v19;
      }

      if (v19 <= v12->nativeIndexingLimit)
      {
        int64_t v8 = v12->chunkNativeStart + v19;
      }

      else
      {
        LODWORD(v8) = ((uint64_t (*)(void))v12->pFuncs->mapOffsetToNative)();
        uint64_t v12 = (UText *)*((void *)this + 61);
      }
    }

    int32_t v25 = v12->chunkOffset;
    BOOL v26 = __OFSUB__(v25, 1);
    int v27 = v25 - 1;
    if (v27 < 0 != v26 || v12->chunkContents[v27] >> 11 > 0x1Au) {
      utext_previous32(v12);
    }
    else {
      v12->uint64_t chunkOffset = v27;
    }
    icu::RuleBasedBreakIterator57::handleNext((uint64_t)this, *(void *)(*((void *)this + 65) + 24LL));
    uint64_t v28 = *((void *)this + 61);
    uint64_t v29 = *(unsigned int *)(v28 + 40);
    else {
      uint64_t v24 = (*(uint64_t (**)(void))(*(void *)(v28 + 56) + 64LL))();
    }
    if ((int)v8 <= (int)v24)
    {
      do
        uint64_t v30 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 96LL))(this);
      while ((int)v30 >= (int)v8);
      return v30;
    }
  }

  else
  {
    uint64_t v15 = *(void *)(v11 + 32);
    utext_setNativeIndex(*((UText **)this + 61), (int)v8);
    if (!v15) {
      goto LABEL_50;
    }
    uint64_t v16 = (UText *)*((void *)this + 61);
    uint64_t v17 = v16->chunkOffset;
    else {
      v16->uint64_t chunkOffset = v17 + 1;
    }
    icu::RuleBasedBreakIterator57::handlePrevious((uint64_t)this, *(void *)(*((void *)this + 65) + 32LL));
    uint64_t v22 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 104LL))(this);
    do
    {
      uint64_t v23 = *(void *)this;
      uint64_t v24 = v22;
      uint64_t v22 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(v23 + 104))(this);
    }

    while ((int)v22 < (int)v8);
    uint64_t v24 = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(v23 + 96))(this);
    if ((int)v24 >= (int)v8)
    {
LABEL_50:
      int v5 = *(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 96LL);
      return v5(this);
    }
  }

  return v24;
}

BOOL icu::RuleBasedBreakIterator57::isBoundary(UText **this, unsigned int a2)
{
  if (!a2)
  {
    ((void (*)(UText **))(*this)->p)(this);
    return 1LL;
  }

  if (utext_nativeLength(this[61]) == a2)
  {
    ((void (*)(UText **))(*this)->q)(this);
    return 1LL;
  }

  if ((a2 & 0x80000000) != 0)
  {
    ((void (*)(UText **))(*this)->p)(this);
    return 0LL;
  }

  if (utext_nativeLength(this[61]) < a2)
  {
    ((void (*)(UText **))(*this)->q)(this);
    return 0LL;
  }

  utext_previous32From(this[61], a2);
  int v5 = this[61];
  uint64_t chunkOffset = v5->chunkOffset;
  else {
    uint64_t v7 = ((uint64_t (*)(void))v5->pFuncs->mapOffsetToNative)();
  }
  return (*(unsigned int (**)(UText **, uint64_t))&(*this)->b)(this, v7) == a2;
}

uint64_t icu::RuleBasedBreakIterator57::current(icu::RuleBasedBreakIterator57 *this)
{
  uint64_t v1 = *((void *)this + 61);
  uint64_t v2 = *(unsigned int *)(v1 + 40);
  else {
    return (*(uint64_t (**)(void))(*(void *)(v1 + 56) + 64LL))();
  }
}

_DWORD *sub_1807FAF7C(_DWORD *result, unsigned __int16 a2, int a3)
{
  uint64_t v3 = *result;
  if ((int)v3 < 1)
  {
    LODWORD(v3) = 0;
LABEL_7:
    *((_WORD *)result + v3 + 18) = a2;
    result[v3 + 1] = a3;
    icu::RuleBasedBreakIterator57 *result = v3 + 1;
  }

  else
  {
    uint64_t v4 = 0LL;
    while (*((unsigned __int16 *)result + v4 + 18) != a2)
    {
      if (v3 == ++v4) {
        goto LABEL_7;
      }
    }

    result[v4 + 1] = a3;
  }

  return result;
}

void icu::RuleBasedBreakIterator57::reset(icu::RuleBasedBreakIterator57 *this)
{
  uint64_t v2 = (void *)((char *)this + 544);
  uint64_t v3 = (void *)*((void *)this + 68);
  if (v3) {
    uprv_free(v3);
  }
  *((_DWORD *)this + 134) = 0;
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
}

uint64_t icu::RuleBasedBreakIterator57::makeRuleStatusValid(uint64_t this)
{
  if (!*(_BYTE *)(this + 532))
  {
    uint64_t v1 = this;
    if (*(void *)(this + 488)
      && (this = (*(uint64_t (**)(uint64_t))(*(void *)this + 112LL))(this), (_DWORD)this))
    {
      (*(void (**)(uint64_t))(*(void *)v1 + 112LL))(v1);
      (*(void (**)(uint64_t))(*(void *)v1 + 96LL))(v1);
      return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 104LL))(v1);
    }

    else
    {
      *(_DWORD *)(v1 + 528) = 0;
      *(_BYTE *)(v1 + 532) = 1;
    }
  }

  return this;
}

uint64_t icu::RuleBasedBreakIterator57::getRuleStatus(icu::RuleBasedBreakIterator57 *this)
{
  return *(unsigned int *)(*(void *)(*((void *)this + 65) + 48LL)
                         + 4LL
}

uint64_t icu::RuleBasedBreakIterator57::getRuleStatusVec( icu::RuleBasedBreakIterator57 *this, int *a2, int a3, UErrorCode *a4)
{
  uint64_t v9 = *(void *)(*((void *)this + 65) + 48LL);
  uint64_t result = *(unsigned int *)(v9 + 4LL * *((int *)this + 132));
  int v10 = result;
  if ((int)result > a3)
  {
    *a4 = U_BUFFER_OVERFLOW_ERROR;
    int v10 = a3;
  }

  if (v10 >= 1)
  {
    for (uint64_t i = 0LL; i != v10; ++i)
      a2[i] = *(_DWORD *)(v9 + 4LL * ((int)i + *((_DWORD *)this + 132) + 1));
  }

  return result;
}

uint64_t icu::RuleBasedBreakIterator57::getBinaryRules(icu::RuleBasedBreakIterator57 *this, unsigned int *a2)
{
  *a2 = 0;
  uint64_t v2 = *((void *)this + 65);
  if (!v2) {
    return 0LL;
  }
  uint64_t result = *(void *)v2;
  *a2 = *(_DWORD *)(*(void *)v2 + 8LL);
  return result;
}

uint64_t icu::RuleBasedBreakIterator57::createBufferClone( icu::RuleBasedBreakIterator57 *this, void *a2, int *a3, UErrorCode *a4)
{
  if (*a3)
  {
    uint64_t result = (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *, void *))(*(void *)this + 32LL))(this, a2);
    if (result) {
      UErrorCode v6 = U_SAFECLONE_ALLOCATED_WARNING;
    }
    else {
      UErrorCode v6 = U_MEMORY_ALLOCATION_ERROR;
    }
    *a4 = v6;
  }

  else
  {
    uint64_t result = 0LL;
    *a3 = 1;
  }

  return result;
}

void *icu::RuleBasedBreakIterator57::getLanguageBreakEngine@<X0>( icu::RuleBasedBreakIterator57 *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  UErrorCode v26 = U_ZERO_ERROR;
  int v5 = (icu::UVector *)*((void *)this + 70);
  if (!v5)
  {
    uint64_t v9 = (icu::UStack *)icu::UMemory::operator new(a3, (icu::UMemory *)0x28, a2);
    if (v9)
    {
      int v5 = icu::UStack::UStack(v9, &v26);
      *((void *)this + 70) = v5;
      if (v26 < U_ILLEGAL_ARGUMENT_ERROR) {
        goto LABEL_2;
      }
      (*(void (**)(icu::UVector *))(*(void *)v5 + 8LL))(v5);
    }

    int64_t v8 = 0LL;
    *((void *)this + 70) = 0LL;
    return v8;
  }

uint64_t icu::RuleBasedBreakIterator57::setBreakType(icu::RuleBasedBreakIterator57 *this, int a2)
{
  *((_DWORD *)this + 144) = a2;
  return (*(uint64_t (**)(icu::RuleBasedBreakIterator57 *))(*(void *)this + 200LL))(this);
}

uint64_t sub_1807FB4EC(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_1807FB500()
{
  if (qword_18C534E28)
  {
    (*(void (**)(uint64_t))(*(void *)qword_18C534E28 + 8LL))(qword_18C534E28);
    qword_18C534E28 = 0LL;
  }

  atomic_store(0, (unsigned int *)&unk_18C534E30);
  return 1LL;
}

icu::RuleBasedBreakIterator::DictionaryCache *icu::RuleBasedBreakIterator::DictionaryCache::DictionaryCache( icu::RuleBasedBreakIterator::DictionaryCache *this, icu::RuleBasedBreakIterator *a2, UErrorCode *a3)
{
  *(void *)this = a2;
  icu::UVector32::UVector32((icu::RuleBasedBreakIterator::DictionaryCache *)((char *)this + 8), a3);
  *((_DWORD *)this + 10) = -1;
  *(void *)((char *)this + 52) = 0LL;
  *(void *)((char *)this + 44) = 0LL;
  return this;
}

{
  *(void *)this = a2;
  icu::UVector32::UVector32((icu::RuleBasedBreakIterator::DictionaryCache *)((char *)this + 8), a3);
  *((_DWORD *)this + 10) = -1;
  *(void *)((char *)this + 52) = 0LL;
  *(void *)((char *)this + 44) = 0LL;
  return this;
}

void icu::RuleBasedBreakIterator::DictionaryCache::~DictionaryCache(void **this)
{
}

{
  icu::UVector32::~UVector32(this + 1);
}

uint64_t icu::RuleBasedBreakIterator::DictionaryCache::reset( icu::RuleBasedBreakIterator::DictionaryCache *this)
{
  *((_DWORD *)this + 10) = -1;
  *(void *)((char *)this + 52) = 0LL;
  *(void *)((char *)this + 44) = 0LL;
  return icu::UVector32::removeAllElements((uint64_t)this + 8);
}

uint64_t icu::RuleBasedBreakIterator::DictionaryCache::following( icu::RuleBasedBreakIterator::DictionaryCache *this, int a2, int *a3, int *a4)
{
  if (*((_DWORD *)this + 12) <= a2 || *((_DWORD *)this + 11) > a2) {
    goto LABEL_3;
  }
  uint64_t v5 = *((unsigned int *)this + 10);
  uint64_t v6 = *((unsigned int *)this + 4);
  if ((v5 & 0x80000000) != 0 || (int)v5 >= (int)v6 || (uint64_t v7 = *((void *)this + 4), *(_DWORD *)(v7 + 4 * v5) != a2))
  {
    *((_DWORD *)this + 10) = 0;
    if ((int)v6 < 1) {
LABEL_13:
    }
      abort();
    uint64_t v9 = 0LL;
    uint64_t v10 = *((void *)this + 4);
    while (1)
    {
      int v11 = *(_DWORD *)(v10 + 4 * v9);
      if (v11 > a2) {
        break;
      }
      *((_DWORD *)this + 10) = ++v9;
      if (v6 == v9) {
        goto LABEL_13;
      }
    }

    *a3 = v11;
    goto LABEL_15;
  }

  int v8 = v5 + 1;
  *((_DWORD *)this + 10) = v8;
  if (v8 < (int)v6)
  {
    *a3 = *(_DWORD *)(v7 + 4LL * v8);
LABEL_15:
    *a4 = *((_DWORD *)this + 14);
    return 1LL;
  }

uint64_t icu::RuleBasedBreakIterator::DictionaryCache::preceding( icu::RuleBasedBreakIterator::DictionaryCache *this, int a2, int *a3, int *a4)
{
  if (*((_DWORD *)this + 11) >= a2 || (int v4 = *((_DWORD *)this + 12), v4 < a2))
  {
    uint64_t v5 = 0LL;
LABEL_4:
    *((_DWORD *)this + 10) = -1;
    return v5;
  }

  if (v4 == a2)
  {
    uint64_t v5 = (*((_DWORD *)this + 4) - 1);
    *((_DWORD *)this + 10) = v5;
  }

  else
  {
    uint64_t v5 = *((unsigned int *)this + 10);
  }

  unsigned int v6 = v5 - 1;
  if ((int)v5 < 1)
  {
    if (!(_DWORD)v5) {
      goto LABEL_4;
    }
    int v7 = *((_DWORD *)this + 4);
    goto LABEL_14;
  }

  int v7 = *((_DWORD *)this + 4);
  if ((int)v5 >= v7 || (uint64_t v8 = *((void *)this + 4), *(_DWORD *)(v8 + 4LL * v5) != a2))
  {
LABEL_14:
    int v11 = v7;
    do
    {
      *((_DWORD *)this + 10) = v11 - 1;
      if (v11 < 1) {
        abort();
      }
      int v12 = 0;
      if (v7 >= 1 && v7 >= v11) {
        int v12 = *(_DWORD *)(*((void *)this + 4) + 4LL * (v11 - 1));
      }
      --v11;
    }

    while (v12 >= a2);
    *a3 = v12;
    BOOL v10 = v12 == *((_DWORD *)this + 11);
    goto LABEL_21;
  }

  *((_DWORD *)this + 10) = v6;
  int v9 = *(_DWORD *)(v8 + 4LL * v6);
  *a3 = v9;
  BOOL v10 = v9 == *((_DWORD *)this + 11);
LABEL_21:
  uint64_t v13 = 56LL;
  if (v10) {
    uint64_t v13 = 52LL;
  }
  *a4 = *(_DWORD *)((char *)this + v13);
  return 1LL;
}

uint64_t icu::RuleBasedBreakIterator::DictionaryCache::populateDictionary( uint64_t this, int a2, uint64_t a3, int a4, int a5)
{
  if ((int)a3 - a2 >= 2)
  {
    uint64_t v34 = v5;
    uint64_t v35 = v6;
    int v11 = (int **)this;
    *(_DWORD *)(this + 40) = -1;
    *(void *)(this + 44) = 0LL;
    int32_t v31 = (_DWORD *)(this + 44);
    int v12 = (icu::UVector32 *)(this + 8);
    *(void *)(this + 52) = 0LL;
    icu::UVector32::removeAllElements(this + 8);
    *((_DWORD *)v11 + 13) = a4;
    *((_DWORD *)v11 + 14) = a5;
    UErrorCode v33 = U_ZERO_ERROR;
    uint64_t v13 = *v11;
    int64_t v14 = (UText *)(*v11 + 122);
    int v32 = a2;
    utext_setNativeIndex(v14, a2);
    unint64_t v15 = utext_current32(v14);
    this = ucptrie_get(*(void *)(*((void *)*v11 + 79) + 48LL), v15);
    unsigned __int16 v16 = this;
    int v17 = 0;
    unsigned int v18 = *(_DWORD *)(*(void *)(*((void *)*v11 + 79) + 8LL) + 8LL);
    do
    {
      while (1)
      {
        uint64_t v19 = v13[132];
        if ((int)v19 <= v13[129])
        {
          uint64_t v20 = *((void *)v13 + 65) + v19;
        }

        else
        {
          this = (*(uint64_t (**)(UText *))(*((void *)v13 + 68) + 64LL))(v14);
          uint64_t v20 = this;
        }

        utext_next32(v14);
        unint64_t v15 = utext_current32(v14);
        this = ucptrie_get(*(void *)(*((void *)*v11 + 79) + 48LL), v15);
        unsigned __int16 v16 = this;
      }

      uint64_t v22 = (icu::RuleBasedBreakIterator *)*v11;
      LocaleID = (const char *)icu::BreakIterator::getLocaleID((uint64_t)*v11, 2, (int *)&v33);
      LanguageBreakEngine = icu::RuleBasedBreakIterator::getLanguageBreakEngine(v22, LocaleID, v15, v24);
      if (LanguageBreakEngine) {
        v17 += (*(uint64_t (**)(void *, UText *, uint64_t, uint64_t, icu::UVector32 *, void, UErrorCode *))(*(void *)LanguageBreakEngine + 32LL))( LanguageBreakEngine,  v14,  v20,  a3,  v12,  *((char *)*v11 + 776),  &v33);
      }
      unint64_t v15 = utext_current32(v14);
      this = ucptrie_get(*(void *)(*((void *)*v11 + 79) + 48LL), v15);
      unsigned __int16 v16 = this;
    }

    while (v33 < U_ILLEGAL_ARGUMENT_ERROR);
    if (v17 >= 1)
    {
      int v26 = *((_DWORD *)v11 + 4);
      if (v26 < 1) {
        int v27 = 0;
      }
      else {
        int v27 = *v11[4];
      }
      if (v27 > v32)
      {
        this = (uint64_t)icu::UVector32::insertElementAt(v12, v32, 0, &v33);
        int v26 = *((_DWORD *)v11 + 4);
      }

      if (v26 < 1) {
        int v28 = 0;
      }
      else {
        int v28 = v11[4][v26 - 1];
      }
      if (v28 < (int)a3)
      {
        if (v26 >= -1 && *((_DWORD *)v11 + 5) > v26
          || (this = icu::UVector32::expandCapacity(v12, v26 + 1, &v33), int v26 = *((_DWORD *)v11 + 4), (_DWORD)this))
        {
          v11[4][v26] = a3;
          int v26 = *((_DWORD *)v11 + 4) + 1;
          *((_DWORD *)v11 + 4) = v26;
        }
      }

      *((_DWORD *)v11 + 10) = 0;
      if (v26 <= 0)
      {
        int v30 = 0;
        *int32_t v31 = 0;
      }

      else
      {
        uint64_t v29 = v11[4];
        *((_DWORD *)v11 + 1icu::UVector32::~UVector32(this + 1) = *v29;
        int v30 = v29[v26 - 1];
      }

      *((_DWORD *)v11 + 12) = v30;
    }
  }

  return this;
}

icu::RuleBasedBreakIterator::BreakCache *icu::RuleBasedBreakIterator::BreakCache::BreakCache( icu::RuleBasedBreakIterator::BreakCache *this, icu::RuleBasedBreakIterator *a2, UErrorCode *a3)
{
  *(void *)this = off_18970FDD0;
  *((void *)this + icu::UVector32::~UVector32(this + 1) = a2;
  icu::UVector32::UVector32((icu::RuleBasedBreakIterator::BreakCache *)((char *)this + 800), a3);
  *((_WORD *)this + 272) = 0;
  *((void *)this + 2) = 0LL;
  *((void *)this + 3) = 0LL;
  *((_DWORD *)this + 8) = 0;
  return this;
}

{
  *(void *)this = off_18970FDD0;
  *((void *)this + icu::UVector32::~UVector32(this + 1) = a2;
  icu::UVector32::UVector32((icu::RuleBasedBreakIterator::BreakCache *)((char *)this + 800), a3);
  *((_WORD *)this + 272) = 0;
  *((void *)this + 2) = 0LL;
  *((void *)this + 3) = 0LL;
  *((_DWORD *)this + 8) = 0;
  return this;
}

uint64_t icu::RuleBasedBreakIterator::BreakCache::reset(uint64_t this, int a2, __int16 a3)
{
  *(void *)(this + 16) = 0LL;
  *(_DWORD *)(this + 24) = a2;
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = a2;
  *(_WORD *)(this + 544) = a3;
  return this;
}

void icu::RuleBasedBreakIterator::BreakCache::~BreakCache(void **this)
{
  *this = off_18970FDD0;
  icu::UVector32::~UVector32(this + 100);
}

{
  *this = off_18970FDD0;
  icu::UVector32::~UVector32(this + 100);
}

{
  *this = off_18970FDD0;
  icu::UVector32::~UVector32(this + 100);
  icu::UMemory::operator delete(this);
}

uint64_t icu::RuleBasedBreakIterator::BreakCache::current(icu::RuleBasedBreakIterator::BreakCache *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = *((unsigned int *)this + 6);
  uint64_t v3 = *((int *)this + 7);
  *(_DWORD *)(v1 + 668) = v2;
  *(_DWORD *)(v1 + 672) = *((unsigned __int16 *)this + v3 + 272);
  *(_BYTE *)(v1 + 760) = 0;
  return v2;
}

icu::RuleBasedBreakIterator::BreakCache *icu::RuleBasedBreakIterator::BreakCache::following( icu::RuleBasedBreakIterator::BreakCache *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = (uint64_t)this;
    if (*((_DWORD *)this + 6) == a2
      || icu::RuleBasedBreakIterator::BreakCache::seek(this, a2)
      || (this = (icu::RuleBasedBreakIterator::BreakCache *)icu::RuleBasedBreakIterator::BreakCache::populateNear( (icu::RuleBasedBreakIterator **)v4,  a2,  a3),  (_DWORD)this))
    {
      *(_BYTE *)(*(void *)(v4 + 8) + 760LL) = 0;
      return (icu::RuleBasedBreakIterator::BreakCache *)sub_1807F6540(v4);
    }
  }

  return this;
}

uint64_t icu::RuleBasedBreakIterator::BreakCache::seek(icu::RuleBasedBreakIterator::BreakCache *this, int a2)
{
  uint64_t v2 = *((int *)this + 4);
  uint64_t v3 = (char *)this + 4 * v2;
  int v6 = *((_DWORD *)v3 + 8);
  uint64_t v4 = v3 + 32;
  int v5 = v6;
  if (v6 > a2) {
    return 0LL;
  }
  uint64_t v7 = *((int *)this + 5);
  uint64_t v8 = (char *)this + 4 * v7;
  int v11 = *((_DWORD *)v8 + 8);
  int v9 = v8 + 32;
  int v10 = v11;
  if (v11 < a2) {
    return 0LL;
  }
  if (v5 == a2)
  {
    *((_DWORD *)this + 7) = v2;
  }

  else if (v10 == a2)
  {
    *((_DWORD *)this + 7) = v7;
    uint64_t v4 = v9;
  }

  else
  {
    while ((_DWORD)v2 != (_DWORD)v7)
    {
      int v13 = (int)(v7 + v2 + (((int)v2 > (int)v7) << 7)) / 2;
      int v14 = *((_DWORD *)this + (v13 & 0x7F) + 8);
      int v15 = ((_BYTE)v13 + 1) & 0x7F;
      if (v14 > a2) {
        LODWORD(v7) = ((int)(v7 + v2 + (((int)v2 > (int)v7) << 7)) / 2) & 0x7F;
      }
      else {
        LODWORD(v2) = v15;
      }
    }

    unsigned int v16 = ((_BYTE)v2 - 1) & 0x7F;
    *((_DWORD *)this + 7) = v16;
    uint64_t v4 = (char *)this + 4 * v16 + 32;
  }

  *((_DWORD *)this + 6) = *(_DWORD *)v4;
  return 1LL;
}

uint64_t icu::RuleBasedBreakIterator::BreakCache::populateNear( icu::RuleBasedBreakIterator **this, int a2, UErrorCode *a3)
{
  if (*((_DWORD *)this + *((int *)this + 4) + 8) - 15 >= a2
    || (int v7 = *((_DWORD *)this + *((int *)this + 5) + 8), v7 + 15 <= a2))
  {
    if (a2 >= 16)
    {
      int v9 = icu::RuleBasedBreakIterator::handleSafePrevious(this[1], a2);
      int v7 = *((_DWORD *)this + *((int *)this + 5) + 8);
      if (v7 < a2 && v7 >= v9 - 15) {
        goto LABEL_15;
      }
      int v11 = v9;
      if (v9 >= 15)
      {
        uint64_t v22 = this[1];
        *((_DWORD *)v22 + 167) = v11;
        int v23 = icu::RuleBasedBreakIterator::handleNext(v22);
        if (v23 == -1
          || (int v7 = v23, v23 <= v11 + 4)
          && (utext_setNativeIndex((UText *)((char *)this[1] + 488), v23),
              utext_getPreviousNativeIndex((UText *)((char *)this[1] + 488)) == v11)
          && (int v7 = icu::RuleBasedBreakIterator::handleNext(this[1]), v7 == -1))
        {
          int v7 = utext_nativeLength((UText *)((char *)this[1] + 488));
        }

        int v8 = *((_DWORD *)this[1] + 168);
        goto LABEL_7;
      }
    }

    LOWORD(v8) = 0;
    int v7 = 0;
LABEL_7:
    this[2] = 0LL;
    *((_DWORD *)this + 6) = v7;
    *((_DWORD *)this + 7) = 0;
    *((_DWORD *)this + 8) = v7;
    *((_WORD *)this + 272) = v8;
  }

icu::RuleBasedBreakIterator::BreakCache *icu::RuleBasedBreakIterator::BreakCache::preceding( icu::RuleBasedBreakIterator::BreakCache *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v5 = (uint64_t)this;
    if (*((_DWORD *)this + 6) == a2
      || (this = (icu::RuleBasedBreakIterator::BreakCache *)icu::RuleBasedBreakIterator::BreakCache::seek(this, a2),
          (_DWORD)this)
      || (this = (icu::RuleBasedBreakIterator::BreakCache *)icu::RuleBasedBreakIterator::BreakCache::populateNear( (icu::RuleBasedBreakIterator **)v5,  a2,  a3),  (_DWORD)this))
    {
      int v6 = *(_DWORD *)(v5 + 24);
      if (v6 == a2)
      {
        return (icu::RuleBasedBreakIterator::BreakCache *)icu::RuleBasedBreakIterator::BreakCache::previous( (_DWORD *)v5,  a3);
      }

      else
      {
        uint64_t v7 = *(void *)(v5 + 8);
        *(_DWORD *)(v7 + 668) = v6;
        *(_DWORD *)(v7 + 672) = *(unsigned __int16 *)(v5 + 2LL * *(int *)(v5 + 28) + 544);
        *(_BYTE *)(v7 + 760) = 0;
      }
    }
  }

  return this;
}

_DWORD *icu::RuleBasedBreakIterator::BreakCache::previous(_DWORD *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    uint64_t v2 = this;
    int v3 = this[7];
    if (v3 == this[4])
    {
      this = (_DWORD *)icu::RuleBasedBreakIterator::BreakCache::populatePreceding( (icu::RuleBasedBreakIterator::BreakCache *)this,  a2);
      int v5 = v2[6];
      int v4 = v2[7];
    }

    else
    {
      int v4 = ((_BYTE)v3 - 1) & 0x7F;
      int v5 = this[(((_BYTE)v3 - 1) & 0x7F) + 8];
      this[6] = v5;
      this[7] = v4;
    }

    uint64_t v6 = *((void *)v2 + 1);
    *(_BYTE *)(v6 + 760) = v4 == v3;
    *(_DWORD *)(v6 + 668) = v5;
    *(_DWORD *)(v6 + 672) = *((unsigned __int16 *)v2 + v4 + 272);
  }

  return this;
}

uint64_t icu::RuleBasedBreakIterator::BreakCache::nextOL(icu::RuleBasedBreakIterator::BreakCache *this)
{
  uint64_t result = icu::RuleBasedBreakIterator::BreakCache::populateFollowing(this);
  uint64_t v3 = *((void *)this + 1);
  *(_BYTE *)(v3 + 760) = result ^ 1;
  uint64_t v4 = *((int *)this + 7);
  *(_DWORD *)(v3 + 668) = *((_DWORD *)this + 6);
  *(_DWORD *)(v3 + 672) = *((unsigned __int16 *)this + v4 + 272);
  return result;
}

uint64_t icu::RuleBasedBreakIterator::BreakCache::populateFollowing( icu::RuleBasedBreakIterator::BreakCache *this)
{
  uint64_t v2 = *((int *)this + 5);
  int v3 = *((_DWORD *)this + v2 + 8);
  int v4 = *((unsigned __int16 *)this + v2 + 272);
  *(void *)int v23 = 0LL;
  if (icu::RuleBasedBreakIterator::DictionaryCache::following( *(icu::RuleBasedBreakIterator::DictionaryCache **)(*((void *)this + 1) + 688LL),  v3,  &v23[1],  v23))
  {
    LOWORD(v6) = v23[0];
    int v5 = v23[1];
    goto LABEL_3;
  }

  int v10 = (icu::RuleBasedBreakIterator *)*((void *)this + 1);
  *((_DWORD *)v10 + 167) = v3;
  int64_t v11 = icu::RuleBasedBreakIterator::handleNext(v10);
  v23[1] = v11;
  if ((_DWORD)v11 != -1)
  {
    int v5 = v11;
    uint64_t v12 = *((void *)this + 1);
    int v6 = *(_DWORD *)(v12 + 672);
    v23[0] = v6;
    if (!*(_DWORD *)(v12 + 712)
      || (icu::RuleBasedBreakIterator::DictionaryCache::populateDictionary(*(void *)(v12 + 688), v3, v11, v4, v6),
          v13 = icu::RuleBasedBreakIterator::DictionaryCache::following( *(icu::RuleBasedBreakIterator::DictionaryCache **)(*((void *)this + 1) + 688LL),  v3,  &v23[1],  v23),  LOWORD(v6) = v23[0],  int v5 = v23[1],  !v13))
    {
      int v14 = *((_DWORD *)this + 5);
      int v15 = ((_BYTE)v14 + 1) & 0x7F;
      if (v15 == *((_DWORD *)this + 4)) {
        *((_DWORD *)this + 4) = ((_BYTE)v14 + 7) & 0x7F;
      }
      *((_DWORD *)this + ((v14 + 1) & 0x7F) + 8) = v5;
      *((_WORD *)this + ((v14 + 1) & 0x7F) + 272) = v6;
      *((_DWORD *)this + 6) = v5;
      *((_DWORD *)this + 7) = v15;
      *((_DWORD *)this + 5) = v15;
      uint64_t v16 = (icu::RuleBasedBreakIterator *)*((void *)this + 1);
      int v17 = 6;
      do
      {
        int v18 = icu::RuleBasedBreakIterator::handleNext(v16);
        if (v18 == -1) {
          break;
        }
        int v19 = v18;
        uint64_t v16 = (icu::RuleBasedBreakIterator *)*((void *)this + 1);
        if (*((_DWORD *)v16 + 178)) {
          break;
        }
        int v20 = *((_DWORD *)v16 + 168);
        int v21 = *((_DWORD *)this + 5);
        int v22 = ((_BYTE)v21 + 1) & 0x7F;
        if (v22 == *((_DWORD *)this + 4)) {
          *((_DWORD *)this + 4) = ((_BYTE)v21 + 7) & 0x7F;
        }
        *((_DWORD *)this + ((v21 + 1) & 0x7F) + 8) = v19;
        *((_WORD *)this + ((v21 + 1) & 0x7F) + 272) = v20;
        *((_DWORD *)this + 5) = v22;
        --v17;
      }

      while (v17);
      return 1LL;
    }

uint64_t icu::RuleBasedBreakIterator::BreakCache::populatePreceding( icu::RuleBasedBreakIterator::BreakCache *this, UErrorCode *a2)
{
  int v4 = *((_DWORD *)this + *((int *)this + 4) + 8);
  if (!v4) {
    return 0LL;
  }
  *(void *)int64_t v40 = 0LL;
  if (!icu::RuleBasedBreakIterator::DictionaryCache::preceding( *(icu::RuleBasedBreakIterator::DictionaryCache **)(*((void *)this + 1) + 688LL),  v4,  &v40[1],  v40))
  {
    int v10 = v4;
    while (1)
    {
      if (v10 >= 31)
      {
        int v10 = icu::RuleBasedBreakIterator::handleSafePrevious(*((icu::RuleBasedBreakIterator **)this + 1), v10 - 30);
        if ((v10 + 1) >= 2)
        {
          int v13 = (icu::RuleBasedBreakIterator *)*((void *)this + 1);
          *((_DWORD *)v13 + 167) = v10;
          int v11 = icu::RuleBasedBreakIterator::handleNext(v13);
          if (v11 <= v10 + 4)
          {
            utext_setNativeIndex((UText *)(*((void *)this + 1) + 488LL), v11);
            if (utext_getPreviousNativeIndex((UText *)(*((void *)this + 1) + 488LL)) == v10) {
              int v11 = icu::RuleBasedBreakIterator::handleNext(*((icu::RuleBasedBreakIterator **)this + 1));
            }
          }

          int v12 = *(_DWORD *)(*((void *)this + 1) + 672LL);
          goto LABEL_19;
        }

        int v11 = 0;
      }

      else
      {
        int v11 = 0;
        int v10 = 0;
      }

      int v12 = 0;
LABEL_19:
      if (v11 < v4)
      {
        v40[0] = v12;
        icu::UVector32::removeAllElements((uint64_t)this + 800);
        int v14 = *((_DWORD *)this + 202);
        if (v14 >= -1 && *((_DWORD *)this + 203) > v14
          || (v15 = icu::UVector32::expandCapacity( (icu::RuleBasedBreakIterator::BreakCache *)((char *)this + 800),  v14 + 1,  a2),  int v14 = *((_DWORD *)this + 202),  v15))
        {
          *(_DWORD *)(*((void *)this + 103) + 4LL * v14) = v11;
          int v14 = *((_DWORD *)this + 202) + 1;
          *((_DWORD *)this + 202) = v14;
        }

        if (v14 < -1 || *((_DWORD *)this + 203) <= v14)
        {
          if (!icu::UVector32::expandCapacity( (icu::RuleBasedBreakIterator::BreakCache *)((char *)this + 800),  v14 + 1,  a2)) {
            goto LABEL_29;
          }
          int v14 = *((_DWORD *)this + 202);
        }

        *(_DWORD *)(*((void *)this + 103) + 4LL * v14) = v12;
        ++*((_DWORD *)this + 202);
LABEL_29:
        while (2)
        {
          uint64_t v16 = (icu::RuleBasedBreakIterator *)*((void *)this + 1);
          *((_DWORD *)v16 + 167) = v11;
          int v17 = v40[0];
          int64_t v18 = icu::RuleBasedBreakIterator::handleNext(v16);
          uint64_t v19 = *((void *)this + 1);
          int v20 = *(_DWORD *)(v19 + 672);
          v40[0] = v20;
          v40[1] = v18;
          if ((_DWORD)v18 != -1)
          {
            int v21 = v18;
            if (*(_DWORD *)(v19 + 712))
            {
              icu::RuleBasedBreakIterator::DictionaryCache::populateDictionary( *(void *)(v19 + 688),  v11,  v18,  v17,  v20);
              if (icu::RuleBasedBreakIterator::DictionaryCache::following( *(icu::RuleBasedBreakIterator::DictionaryCache **)(*((void *)this + 1) + 688LL),  v11,  &v40[1],  v40))
              {
                while (1)
                {
                  int v21 = v40[1];
                  if (v40[1] >= v4) {
                    goto LABEL_55;
                  }
                  int v22 = *((_DWORD *)this + 202);
                  if (v22 >= -1 && *((_DWORD *)this + 203) > v22
                    || (v23 = icu::UVector32::expandCapacity( (icu::RuleBasedBreakIterator::BreakCache *)((char *)this + 800),  v22 + 1,  a2),  int v22 = *((_DWORD *)this + 202),  v23))
                  {
                    *(_DWORD *)(*((void *)this + 103) + 4LL * v22) = v21;
                    int v22 = *((_DWORD *)this + 202) + 1;
                    *((_DWORD *)this + 202) = v22;
                  }

                  int v24 = v40[0];
                  if (v22 >= -1 && *((_DWORD *)this + 203) > v22) {
                    goto LABEL_41;
                  }
                  if (icu::UVector32::expandCapacity( (icu::RuleBasedBreakIterator::BreakCache *)((char *)this + 800),  v22 + 1,  a2)) {
                    break;
                  }
LABEL_42:
                  if (!icu::RuleBasedBreakIterator::DictionaryCache::following( *(icu::RuleBasedBreakIterator::DictionaryCache **)(*((void *)this + 1) + 688LL),  v21,  &v40[1],  v40))
                  {
                    int v21 = v40[1];
                    goto LABEL_55;
                  }
                }

                int v22 = *((_DWORD *)this + 202);
LABEL_41:
                *(_DWORD *)(*((void *)this + 103) + 4LL * v22) = v24;
                ++*((_DWORD *)this + 202);
                goto LABEL_42;
              }

              int v21 = v40[1];
            }

            if (v21 < v4)
            {
              int v25 = *((_DWORD *)this + 202);
              if (v25 >= -1 && *((_DWORD *)this + 203) > v25
                || (v26 = icu::UVector32::expandCapacity( (icu::RuleBasedBreakIterator::BreakCache *)((char *)this + 800),  v25 + 1,  a2),  int v25 = *((_DWORD *)this + 202),  v26))
              {
                *(_DWORD *)(*((void *)this + 103) + 4LL * v25) = v21;
                int v25 = *((_DWORD *)this + 202) + 1;
                *((_DWORD *)this + 202) = v25;
              }

              int v27 = v40[0];
              if (v25 >= -1 && *((_DWORD *)this + 203) > v25)
              {
LABEL_54:
                *(_DWORD *)(*((void *)this + 103) + 4LL * v25) = v27;
                ++*((_DWORD *)this + 202);
              }

              else if (icu::UVector32::expandCapacity( (icu::RuleBasedBreakIterator::BreakCache *)((char *)this + 800),  v25 + 1,  a2))
              {
                int v25 = *((_DWORD *)this + 202);
                goto LABEL_54;
              }
            }

_DWORD *icu::RuleBasedBreakIterator::BreakCache::addFollowing(_DWORD *result, int a2, __int16 a3, int a4)
{
  int v4 = result[5];
  int v5 = ((_BYTE)v4 + 1) & 0x7F;
  if (v5 == result[4]) {
    result[4] = ((_BYTE)v4 + 7) & 0x7F;
  }
  result[(((_BYTE)v4 + 1) & 0x7F) + 8] = a2;
  *((_WORD *)result + ((v4 + 1) & 0x7F) + 272) = a3;
  result[5] = v5;
  if (a4 == 1)
  {
    result[6] = a2;
    result[7] = v5;
  }

  return result;
}

uint64_t icu::RuleBasedBreakIterator::BreakCache::addPreceding(_DWORD *a1, int a2, __int16 a3, int a4)
{
  int v4 = a1[4];
  int v5 = ((_BYTE)v4 - 1) & 0x7F;
  if (v5 == a1[5])
  {
    if (!a4 && a1[7] == v5) {
      return 0LL;
    }
    a1[5] = ((_BYTE)v4 + 126) & 0x7F;
  }

  a1[(((_BYTE)v4 - 1) & 0x7F) + 8] = a2;
  *((_WORD *)a1 + ((v4 - 1) & 0x7F) + 272) = a3;
  a1[4] = v5;
  if (a4 == 1)
  {
    a1[6] = a2;
    a1[7] = v5;
  }

  return 1LL;
}

uint64_t sub_1807FC7D0(uint64_t result, uint64_t a2, int *a3)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (*a3 <= 0)
  {
    uint64_t v5 = result;
    *(void *)uint64_t result = a2;
    if (*(_DWORD *)a2 != 45472 || *(_BYTE *)(a2 + 4) != 6)
    {
LABEL_10:
      *a3 = 3;
      return result;
    }

    *(_BYTE *)(result + 136) = 0;
    if (*(_DWORD *)(a2 + 20)) {
      *(void *)(result + 8) = a2 + *(unsigned int *)(a2 + 16);
    }
    if (*(_DWORD *)(a2 + 28)) {
      *(void *)(result + 16) = a2 + *(unsigned int *)(a2 + 24);
    }
    uint64_t result = (uint64_t)ucptrie_openFromBinary(0, -1, a2 + *(unsigned int *)(a2 + 32), *(_DWORD *)(a2 + 36), 0LL, a3);
    *(void *)(v5 + 48) = result;
    if (*a3 <= 0)
    {
      uint64_t result = ucptrie_getValueWidth(result);
      if ((result & 0xFFFFFFFD) == 0)
      {
        uint64_t v6 = *(void *)v5;
        __int16 v7 = (const char *)(a2 + *(unsigned int *)(*(void *)v5 + 40LL));
        *(void *)(v5 + 24) = v7;
        icu::UnicodeString::fromUTF8(v7, *(_DWORD *)(v6 + 44), (uint64_t)v9);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v5 + 72), (icu::UnicodeString *)v9);
        uint64_t result = (uint64_t)icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v9);
        *(void *)(v5 + 32) = a2 + *(unsigned int *)(*(void *)v5 + 48LL);
        *(_DWORD *)(v5 + 40) = *(_DWORD *)(a2 + 52) >> 2;
        atomic_store(1u, (unsigned int *)(v5 + 56));
        return result;
      }

      goto LABEL_10;
    }
  }

  return result;
}

uint64_t sub_1807FC924(uint64_t a1, uint64_t a2, int *a3)
{
  *(_WORD *)(a1 + 80) = 2;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = off_18971B688;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0LL;
  atomic_store(0, (unsigned int *)(a1 + 56));
  *(_BYTE *)(a1 + 136) = 1;
  sub_1807FC7D0(a1, a2, a3);
  return a1;
}

uint64_t sub_1807FC980(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  *(_WORD *)(a1 + 80) = 2;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = off_18971B688;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0LL;
  atomic_store(0, (unsigned int *)(a1 + 56));
  *(_BYTE *)(a1 + 136) = 1;
  sub_1807FC7D0(a1, a2, a4);
  *(_BYTE *)(a1 + 136) = 1;
  return a1;
}

uint64_t sub_1807FC9E4(uint64_t a1, uint64_t a2, int *a3)
{
  *(_WORD *)(a1 + 80) = 2;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = off_18971B688;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0LL;
  atomic_store(0, (unsigned int *)(a1 + 56));
  *(_BYTE *)(a1 + 136) = 1;
  if (*a3 <= 0)
  {
    uint64_t v5 = *(_BYTE **)(a2 + 8);
    unint64_t v6 = *(unsigned __int16 *)v5;
    if (v6 >= 0x14 && !v5[8] && !v5[9] && v5[12] == 66 && v5[13] == 114 && v5[14] == 107 && v5[15] == 32 && v5[16] == 6)
    {
      sub_1807FC7D0(a1, (uint64_t)&v5[v6], a3);
      *(void *)(a1 + 64) = a2;
    }

    else
    {
      *a3 = 3;
    }
  }

  return a1;
}

uint64_t sub_1807FCAC8(uint64_t a1)
{
  *(void *)(a1 + 48) = 0LL;
  uint64_t v2 = *(_OWORD **)(a1 + 64);
  if (v2)
  {
    udata_close(v2);
  }

  else
  {
    int v3 = (void *)*(unsigned __int8 *)(a1 + 136);
    if (!*(_BYTE *)(a1 + 136)) {
      uprv_free(*(void **)a1);
    }
  }

  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 72));
  return a1;
}

BOOL sub_1807FCB1C(unsigned int **a1, unsigned int **a2)
{
  uint64_t v2 = *a1;
  int v3 = *a2;
  if (v2 == v3) {
    return 1LL;
  }
  size_t v4 = v2[2];
  return (_DWORD)v4 == v3[2] && memcmp(v2, v3, v4) == 0;
}

uint64_t sub_1807FCB68(uint64_t a1)
{
  return *(unsigned int *)(*(void *)a1 + 20LL);
}

void sub_1807FCB74(uint64_t a1)
{
  uint64_t v1 = (unsigned int *)(a1 + 56);
  do
    unsigned int v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1)
  {
    if (v2 == 1)
    {
      int v3 = (void *)sub_1807FCAC8(a1);
      icu::UMemory::operator delete(v3);
    }
  }

uint64_t sub_1807FCBB0(uint64_t result)
{
  uint64_t v1 = (unsigned int *)(result + 56);
  do
    unsigned int v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_1807FCBC8(uint64_t a1)
{
  return a1 + 72;
}

uint64_t ubrk_swap( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a5) {
    return 0LL;
  }
  if (*a5 > 0) {
    return 0LL;
  }
  if (!a1 || !a2 || (int v12 = a3, (int)a3 < -1) || (int)a3 >= 1 && !a4)
  {
    uint64_t result = 0LL;
    int v14 = 1;
LABEL_21:
    *a5 = v14;
    return result;
  }

  if (__PAIR64__(*(unsigned __int8 *)(a2 + 13), *(unsigned __int8 *)(a2 + 12)) != 0x7200000042LL
    || *(_BYTE *)(a2 + 14) != 107
    || *(_BYTE *)(a2 + 15) != 32
    || *(_BYTE *)(a2 + 16) != 6)
  {
    uint64_t v48 = *(unsigned __int8 *)(a2 + 12);
    int v17 = "ubrk_swap(): data format %02x.%02x.%02x.%02x (format version %02x) is not recognized\n";
    goto LABEL_20;
  }

  int v15 = udata_swapDataHeader(a1, (unsigned __int16 *)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v16 = (unsigned int *)(a2 + v15);
  if ((*(unsigned int (**)(void))(a1 + 16))(*v16) != 45472
    || *((_BYTE *)v16 + 4) != 6
    || (*(unsigned int (**)(void))(a1 + 16))(v16[2]) <= 0x4F)
  {
    int v17 = "ubrk_swap(): RBBI Data header is invalid.\n";
LABEL_20:
    udata_printError(a1, (uint64_t)v17, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, v48);
    uint64_t result = 0LL;
    int v14 = 16;
    goto LABEL_21;
  }

  uint64_t v24 = (*(uint64_t (**)(void))(a1 + 16))(v16[2]);
  uint64_t result = (v24 + v15);
  if ((v12 & 0x80000000) == 0)
  {
    if ((int)result > v12)
    {
      udata_printError( a1,  (uint64_t)"ubrk_swap(): too few bytes (%d after ICU Data header) for break data.\n",  v18,  v19,  v20,  v21,  v22,  v23,  v24);
      uint64_t result = 0LL;
      int v14 = 8;
      goto LABEL_21;
    }

    unsigned int v49 = v24 + v15;
    int v25 = (char *)a4 + v15;
    int v26 = (*(uint64_t (**)(void))(a1 + 16))(v16[4]);
    int v27 = (*(uint64_t (**)(void))(a1 + 16))(v16[5]);
    if (v27 >= 1)
    {
      int v28 = v27;
      unsigned int v29 = (char *)v16 + v26;
      char v30 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v29 + 4));
      int v31 = &v25[v26];
      (*(void (**)(uint64_t, char *, uint64_t, char *, int *))(a1 + 56))(a1, v29, 20LL, v31, a5);
      if ((v30 & 4) != 0)
      {
      }

      else
      {
        (*(void (**)(uint64_t, char *, void, char *, int *))(a1 + 48))( a1,  v29 + 20,  (v28 - 20),  v31 + 20,  a5);
      }
    }

    int v32 = (*(uint64_t (**)(void))(a1 + 16))(v16[6]);
    int v33 = (*(uint64_t (**)(void))(a1 + 16))(v16[7]);
    if (v33 >= 1)
    {
      int v34 = v33;
      int v35 = (char *)v16 + v32;
      char v36 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v35 + 4));
      int v37 = &v25[v32];
      (*(void (**)(uint64_t, char *, uint64_t, char *, int *))(a1 + 56))(a1, v35, 20LL, v37, a5);
      if ((v36 & 4) != 0)
      {
      }

      else
      {
        (*(void (**)(uint64_t, char *, void, char *, int *))(a1 + 48))( a1,  v35 + 20,  (v34 - 20),  v37 + 20,  a5);
      }
    }

    int v38 = (unsigned __int16 *)((char *)v16 + (*(unsigned int (**)(void))(a1 + 16))(v16[8]));
    unsigned int v39 = (*(uint64_t (**)(void))(a1 + 16))(v16[9]);
    int v40 = (*(uint64_t (**)(void))(a1 + 16))(v16[8]);
    ucptrie_swap(a1, v38, v39, (unsigned __int16 *)&v25[v40], a5);
    if ((unsigned __int16 *)a2 != a4)
    {
      int v41 = &v25[(*(unsigned int (**)(void))(a1 + 16))(v16[10])];
      uint64_t v42 = (char *)v16 + (*(unsigned int (**)(void))(a1 + 16))(v16[10]);
      unsigned int v43 = (*(uint64_t (**)(void))(a1 + 16))(v16[11]);
      memmove(v41, v42, v43);
    }

    int v44 = *(void (**)(uint64_t, char *, uint64_t, char *, int *))(a1 + 56);
    uint64_t v45 = (char *)v16 + (*(unsigned int (**)(void))(a1 + 16))(v16[12]);
    uint64_t v46 = (*(uint64_t (**)(void))(a1 + 16))(v16[13]);
    int v47 = (*(uint64_t (**)(void))(a1 + 16))(v16[12]);
    v44(a1, v45, v46, &v25[v47], a5);
    (*(void (**)(uint64_t, unsigned int *, uint64_t, char *, int *))(a1 + 56))(a1, v16, 80LL, v25, a5);
    (*(void (**)(uint64_t, char *, uint64_t, char *, int *))(a1 + 56))(a1, v25 + 4, 4LL, v25 + 4, a5);
    return v49;
  }

  return result;
}

uint64_t sub_1807FCFF4(uint64_t result, uint64_t a2, int *a3)
{
  *(_BYTE *)(result + 184) = 0;
  if (*a3 <= 0)
  {
    uint64_t v5 = result;
    *(void *)uint64_t result = a2;
    if (*(_DWORD *)a2 == 45472 && *(_BYTE *)(a2 + 4) == 3)
    {
      if (*(_DWORD *)(a2 + 20)) {
        *(void *)(result + 8) = a2 + *(unsigned int *)(a2 + 16);
      }
      if (*(_DWORD *)(a2 + 28)) {
        *(void *)(result + 16) = a2 + *(unsigned int *)(a2 + 24);
      }
      if (*(_DWORD *)(a2 + 36)) {
        *(void *)(result + 24) = a2 + *(unsigned int *)(a2 + 32);
      }
      if (*(_DWORD *)(a2 + 44)) {
        *(void *)(result + 32) = a2 + *(unsigned int *)(a2 + 40);
      }
      uint64_t result = utrie_unserialize(result + 64, (_DWORD *)(a2 + *(unsigned int *)(a2 + 48)), *(_DWORD *)(a2 + 52), a3);
      if (*a3 <= 0)
      {
        *(void *)(v5 + 80) = sub_1807FD1FC;
        unint64_t v6 = (const UChar *)(a2 + *(unsigned int *)(*(void *)v5 + 56LL));
        *(void *)(v5 + 40) = v6;
        __int16 v7 = v6;
        uint64_t result = (uint64_t)icu::UnicodeString::setTo((icu::UnicodeString *)(v5 + 120), 1, &v7, -1);
        *(void *)(v5 + 48) = a2 + *(unsigned int *)(*(void *)v5 + 64LL);
        *(_DWORD *)(v5 + 56) = *(_DWORD *)(a2 + 68) >> 2;
        atomic_store(1u, (unsigned int *)(v5 + 104));
      }
    }

    else
    {
      *a3 = 3;
    }
  }

  return result;
}

uint64_t sub_1807FD13C(uint64_t a1, uint64_t a2, int *a3)
{
  *(_WORD *)(a1 + 128) = 2;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 120) = off_18971B688;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = 0LL;
  atomic_store(0, (unsigned int *)(a1 + 104));
  *(_BYTE *)(a1 + 184) = 1;
  sub_1807FCFF4(a1, a2, a3);
  return a1;
}

uint64_t sub_1807FD198(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  *(_WORD *)(a1 + 128) = 2;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 120) = off_18971B688;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = 0LL;
  atomic_store(0, (unsigned int *)(a1 + 104));
  *(_BYTE *)(a1 + 184) = 1;
  sub_1807FCFF4(a1, a2, a4);
  *(_BYTE *)(a1 + 184) = 1;
  return a1;
}

uint64_t sub_1807FD1FC(int a1)
{
  return a1 & ((__int16)a1 >> 15) & 0x7FFF;
}

uint64_t sub_1807FD20C(uint64_t a1)
{
  unsigned int v2 = *(_OWORD **)(a1 + 112);
  if (v2)
  {
    udata_close(v2);
  }

  else
  {
    int v3 = (void *)*(unsigned __int8 *)(a1 + 184);
    if (!*(_BYTE *)(a1 + 184)) {
      uprv_free(*(void **)a1);
    }
  }

  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 120));
  return a1;
}

void sub_1807FD258(uint64_t a1)
{
  uint64_t v1 = (unsigned int *)(a1 + 104);
  do
    unsigned int v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1)
  {
    if (v2 == 1)
    {
      int v3 = (void *)sub_1807FD20C(a1);
      icu::UMemory::operator delete(v3);
    }
  }

uint64_t sub_1807FD294(uint64_t result)
{
  uint64_t v1 = (unsigned int *)(result + 104);
  do
    unsigned int v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t sub_1807FD2AC(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  *(void *)(a1 + 48) = off_18971B688;
  *(_WORD *)(a1 + 56) = 2;
  *(_DWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 112) = 0LL;
  *(_BYTE *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 127) = 0;
  UErrorCode v13 = U_ZERO_ERROR;
  size_t v4 = (icu::UVector *)icu::UMemory::operator new((uint64_t *)2, (icu::UMemory *)0x28, a2);
  if (v4) {
    size_t v4 = icu::UVector::UVector(v4, &v13);
  }
  *(void *)(a1 + 136) = v4;
  __int16 v7 = (icu::UVector *)icu::UMemory::operator new(v6, (icu::UMemory *)0x28, v5);
  if (v7) {
    __int16 v7 = icu::UVector::UVector(v7, &v13);
  }
  *(void *)(a1 + 144) = v7;
  uint64_t v10 = (icu::UVector *)icu::UMemory::operator new(v9, (icu::UMemory *)0x28, v8);
  if (v10) {
    uint64_t v10 = icu::UVector::UVector(v10, &v13);
  }
  *(void *)(a1 + 152) = v10;
  int v11 = v2 - 7;
  return a1;
}

uint64_t sub_1807FD38C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = off_18971B688;
  *(_WORD *)(a1 + 56) = 2;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  icu::UnicodeString::operator=((UChar **)(a1 + 48), (UChar **)(a2 + 48));
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_BYTE *)(a1 + 129) = 0;
  size_t v4 = (uint64_t *)*(unsigned __int8 *)(a2 + 130);
  *(_BYTE *)(a1 + 130) = (_BYTE)v4;
  UErrorCode v14 = U_ZERO_ERROR;
  unint64_t v6 = (icu::UVector *)icu::UMemory::operator new(v4, (icu::UMemory *)0x28, v5);
  if (v6) {
    unint64_t v6 = icu::UVector::UVector(v6, &v14);
  }
  *(void *)(a1 + 136) = v6;
  int v9 = (icu::UVector *)icu::UMemory::operator new(v8, (icu::UMemory *)0x28, v7);
  if (v9) {
    int v9 = icu::UVector::UVector(v9, &v14);
  }
  *(void *)(a1 + 144) = v9;
  int v12 = (icu::UVector *)icu::UMemory::operator new(v11, (icu::UMemory *)0x28, v10);
  if (v12) {
    int v12 = icu::UVector::UVector(v12, &v14);
  }
  *(void *)(a1 + 152) = v12;
  return a1;
}

uint64_t sub_1807FD468(uint64_t a1)
{
  int v2 = *(icu::UnicodeSet **)(a1 + 32);
  if (v2)
  {
    icu::UnicodeSet::~UnicodeSet(v2);
    icu::UMemory::operator delete(v3);
  }

  *(void *)(a1 + 32) = 0LL;
  size_t v4 = (void *)(*(_DWORD *)a1 | 2u);
  if ((_DWORD)v4 != 2)
  {
    if (*(void *)(a1 + 16))
    {
      unint64_t v5 = (void *)sub_1807FD468();
      icu::UMemory::operator delete(v5);
    }

    *(void *)(a1 + 16) = 0LL;
    if (*(void *)(a1 + 24))
    {
      unint64_t v6 = (void *)sub_1807FD468();
      icu::UMemory::operator delete(v6);
    }

    *(void *)(a1 + 24) = 0LL;
  }

  uint64_t v7 = *(void *)(a1 + 136);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 144);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 152);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 48));
  return a1;
}

uint64_t *sub_1807FD51C(unsigned int *a1, unint64_t a2)
{
  while (1)
  {
    int v3 = (uint64_t *)*a1;
    if ((_DWORD)v3 != 2) {
      break;
    }
    a1 = (unsigned int *)*((void *)a1 + 2);
  }

  if ((_DWORD)v3 != 1)
  {
    size_t v4 = icu::UMemory::operator new(v3, (icu::UMemory *)0xA0, a2);
    if (v4)
    {
      unint64_t v5 = v4;
      sub_1807FD38C((uint64_t)v4, (uint64_t)a1);
      if (*((void *)a1 + 2))
      {
        uint64_t v6 = sub_1807FD51C();
        v5[2] = v6;
        *(void *)(v6 + 8) = v5;
      }

      if (*((void *)a1 + 3))
      {
        uint64_t v7 = sub_1807FD51C();
        v5[3] = v7;
        *(void *)(v7 + 8) = v5;
      }

      return v5;
    }

    else
    {
      return 0LL;
    }
  }

  return (uint64_t *)a1;
}

uint64_t sub_1807FD5A4(uint64_t a1, unint64_t a2)
{
  int v3 = *(_DWORD *)a1;
  size_t v4 = *(unsigned int **)(a1 + 16);
  if (v3 == 2)
  {
    unint64_t v5 = sub_1807FD51C(v4, a2);
    uint64_t v6 = v5;
    if (v5) {
      *(_WORD *)((char *)v5 + 129) = *(_WORD *)(a1 + 129);
    }
    uint64_t v7 = (void *)sub_1807FD468(a1);
    icu::UMemory::operator delete(v7);
  }

  else
  {
    if (v4)
    {
      uint64_t v8 = sub_1807FD5A4();
      *(void *)(a1 + 16) = v8;
      *(void *)(v8 + 8) = a1;
    }

    if (*(void *)(a1 + 24))
    {
      uint64_t v9 = sub_1807FD5A4();
      *(void *)(a1 + 24) = v9;
      *(void *)(v9 + 8) = a1;
    }

    return a1;
  }

  return (uint64_t)v6;
}

void sub_1807FD620(uint64_t a1, unint64_t a2)
{
  while (1)
  {
    uint64_t v3 = a1;
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4)
    {
      if (*(_DWORD *)v4)
      {
        sub_1807FD620(v4);
      }

      else
      {
        unint64_t v5 = sub_1807FD51C(*(unsigned int **)(*(void *)(v4 + 16) + 16LL), a2);
        *(void *)(v3 + 16) = v5;
        v5[1] = v3;
        uint64_t v6 = (void *)sub_1807FD468(v4);
        icu::UMemory::operator delete(v6);
      }
    }

    a1 = *(void *)(v3 + 24);
    if (!a1) {
      break;
    }
    if (!*(_DWORD *)a1)
    {
      uint64_t v7 = sub_1807FD51C(*(unsigned int **)(*(void *)(a1 + 16) + 16LL), a2);
      *(void *)(v3 + 24) = v7;
      v7[1] = v3;
      uint64_t v8 = (void *)sub_1807FD468(a1);
      icu::UMemory::operator delete(v8);
      return;
    }
  }

uint64_t sub_1807FD6B4(uint64_t result, icu::UVector *a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t v7 = (void *)result;
  do
  {
    if (*(_DWORD *)v7 == (_DWORD)a3) {
      icu::UVector::addElement(a2, v7, a4);
    }
    uint64_t result = v7[2];
    if (result) {
      uint64_t result = sub_1807FD6B4(result, a2, a3, a4);
    }
    uint64_t v7 = (void *)v7[3];
  }

  while (v7);
  return result;
}

uint64_t sub_1807FD72C(uint64_t a1, UChar **a2, uint64_t a3, UErrorCode *a4)
{
  *(void *)a1 = off_18970FE08;
  *(void *)(a1 + 32) = a2;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 40), a2);
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 8) = 0LL;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 144) = a1 + 112;
  *(_WORD *)(a1 + 152) = 0;
  *(void *)(a1 + 104) = 0LL;
  *(_OWORD *)(a1 + 176) = 0u;
  if (a3)
  {
    *(void *)(a3 + 64) = 0LL;
    *(_OWORD *)(a3 + 32) = 0uLL;
    *(_OWORD *)(a3 + 48) = 0uLL;
    *(_OWORD *)a3 = 0uLL;
    *(_OWORD *)(a3 + 16) = 0uLL;
  }

  if (*(int *)a4 <= 0)
  {
    uint64_t v9 = (icu::UVector *)icu::UMemory::operator new((icu::UMemory *)0x28, v7);
    if (v9) {
      uint64_t v9 = icu::UVector::UVector(v9, a4);
    }
    *(void *)(a1 + 168) = v9;
    int v11 = (icu::UVector *)icu::UMemory::operator new((icu::UMemory *)0x28, v10);
    if (v11) {
      int v11 = icu::UVector::UVector(v11, a4);
    }
    *(void *)(a1 + 184) = v11;
    uint64_t v13 = icu::UMemory::operator new((icu::UMemory *)0xC78, v12);
    if (v13) {
      uint64_t v13 = sub_1807FE8EC(v13, a1);
    }
    *(void *)(a1 + 104) = v13;
    uint64_t v15 = icu::UMemory::operator new((icu::UMemory *)0x38, v14);
    if (v15)
    {
      sub_180801C60(v15, a1);
      *(void *)(a1 + 160) = v16;
    }

    else
    {
      *(void *)(a1 + 160) = 0LL;
    }

    *a4 = U_MEMORY_ALLOCATION_ERROR;
  }

  return a1;
}

uint64_t sub_1807FD864(uint64_t a1)
{
  *(void *)a1 = off_18970FE08;
  if (icu::UVector::elementAt(*(icu::UVector **)(a1 + 168), 0))
  {
    unsigned int v3 = 1;
    do
    {
      uint64_t v4 = (void *)sub_1807FD518();
      icu::UMemory::operator delete(v4);
    }

    while (icu::UVector::elementAt(*(icu::UVector **)(a1 + 168), v3++));
  }

  uint64_t v6 = *(void *)(a1 + 168);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  if (*(void *)(a1 + 160))
  {
    unint64_t v7 = (void *)sub_180801CE0();
    icu::UMemory::operator delete(v7);
  }

  if (*(void *)(a1 + 176))
  {
    uint64_t v8 = (void *)sub_18080378C();
    icu::UMemory::operator delete(v8);
  }

  if (*(void *)(a1 + 112))
  {
    uint64_t v9 = (void *)sub_1807FD518();
    icu::UMemory::operator delete(v9);
  }

  if (*(void *)(a1 + 120))
  {
    unint64_t v10 = (void *)sub_1807FD518();
    icu::UMemory::operator delete(v10);
  }

  if (*(void *)(a1 + 128))
  {
    int v11 = (void *)sub_1807FD518();
    icu::UMemory::operator delete(v11);
  }

  if (*(void *)(a1 + 136))
  {
    unint64_t v12 = (void *)sub_1807FD518();
    icu::UMemory::operator delete(v12);
  }

  uint64_t v13 = *(void *)(a1 + 104);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  uint64_t v14 = *(void *)(a1 + 184);
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
  }
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 40));
  return a1;
}

void sub_1807FD968(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1807FD864(a1);
  icu::UMemory::operator delete(v1);
}

_DWORD *sub_1807FD97C(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  unsigned int v3 = (icu::UnicodeString *)(a1 + 40);
  sub_1807FFB74(a1 + 40, (uint64_t)pDestLength);
  icu::UnicodeString::operator=(v3, (icu::UnicodeString *)pDestLength);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)pDestLength);
  int v5 = sub_1808055C0(*(void *)(a1 + 176)) + 7;
  int v6 = sub_180805C24(*(void **)(a1 + 176)) + 7;
  int v7 = sub_1808023C0(*(void *)(a1 + 160)) + 7;
  int v8 = 4 * *(_DWORD *)(*(void *)(a1 + 184) + 8LL) + 7;
  pDestLength[0] = 0;
  unsigned int v9 = *(unsigned __int16 *)(a1 + 48);
  if ((v9 & 0x11) != 0)
  {
    unint64_t v10 = 0LL;
  }

  else if ((v9 & 2) != 0)
  {
    unint64_t v10 = (const UChar *)(a1 + 50);
  }

  else
  {
    unint64_t v10 = *(const UChar **)(a1 + 64);
  }

  unsigned int v11 = v5 & 0xFFFFFFF8;
  unsigned int v12 = v6 & 0xFFFFFFF8;
  unsigned int v13 = v7 & 0xFFFFFFF8;
  unsigned int v14 = v8 & 0xFFFFFFF8;
  if ((v9 & 0x8000) != 0) {
    int32_t v15 = *(_DWORD *)(a1 + 52);
  }
  else {
    int32_t v15 = v9 >> 5;
  }
  u_strToUTF8WithSub(0LL, 0, pDestLength, v10, v15, 65533, 0LL, *(UErrorCode **)(a1 + 16));
  **(_DWORD **)(a1 + 16) = 0;
  unsigned int v16 = v12 + v11 + 80;
  signed int v17 = v13 + v16 + v14;
  *(void *)destCapacity = (pDestLength[0] & 0xFFFFFFFFFFFFFFF8LL) + 8;
  unsigned int v26 = v14;
  size_t v18 = *(void *)destCapacity + v17;
  uint64_t result = uprv_malloc(v18);
  if (!result)
  {
    **(_DWORD **)(a1 + 16) = 7;
    return result;
  }

  uint64_t v19 = result;
  bzero(result, v18);
  *uint64_t v19 = 45472;
  v19[1] = 6;
  v19[2] = v18;
  v19[3] = sub_18080244C(*(void *)(a1 + 160));
  v19[4] = 80;
  v19[5] = v11;
  v19[6] = v11 + 80;
  v19[7] = v12;
  v19[8] = v16;
  v19[12] = v13 + v16;
  v19[13] = v26;
  v19[9] = v13;
  v19[10] = v17;
  v19[11] = pDestLength[0];
  *((void *)v19 + 8) = 0LL;
  *((void *)v19 + 9) = 0LL;
  *((void *)v19 + 7) = 0LL;
  sub_180805628(*(void *)(a1 + 176), v19 + 20);
  sub_180805C84(*(void *)(a1 + 176), (_DWORD *)((char *)v19 + v19[6]));
  sub_180802458(*(void *)(a1 + 160), (uint64_t)v19 + v19[8]);
  uint64_t v20 = *(int **)(a1 + 184);
  if (v20[2] >= 1)
  {
    uint64_t v21 = 0LL;
    uint64_t v22 = (char *)v19 + v19[12];
    do
    {
      *(_DWORD *)&v22[4 * v21] = icu::UVector::elementAti((icu::UVector *)v20, v21);
      ++v21;
      uint64_t v20 = *(int **)(a1 + 184);
    }

    while (v21 < v20[2]);
  }

  unsigned int v23 = *(unsigned __int16 *)(a1 + 48);
  if ((v23 & 0x11) != 0)
  {
    uint64_t v24 = 0LL;
    if ((v23 & 0x8000) != 0) {
      goto LABEL_23;
    }
LABEL_21:
    int32_t v25 = v23 >> 5;
    goto LABEL_24;
  }

  if ((v23 & 2) != 0)
  {
    uint64_t v24 = (const UChar *)(a1 + 50);
    if ((v23 & 0x8000) == 0) {
      goto LABEL_21;
    }
  }

  else
  {
    uint64_t v24 = *(const UChar **)(a1 + 64);
    if ((v23 & 0x8000) == 0) {
      goto LABEL_21;
    }
  }

icu::RuleBasedBreakIterator *sub_1807FDC38(UChar **a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  memset(v11, 0, sizeof(v11));
  sub_1807FD72C((uint64_t)v11, a1, a2, a3);
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = sub_1807FDD50((uint64_t)v11, a3);
    int v6 = (uint64_t *)*(unsigned int *)a3;
    if ((int)v6 <= 0)
    {
      uint64_t v9 = (uint64_t)v4;
      unint64_t v10 = (icu::RuleBasedBreakIterator *)icu::UMemory::operator new(v6, (icu::UMemory *)0x310, v5);
      if (v10)
      {
        int v7 = v10;
        icu::RuleBasedBreakIterator::RuleBasedBreakIterator(v10, v9, a3);
        (*(void (**)(icu::RuleBasedBreakIterator *))(*(void *)v7 + 8LL))(v7);
      }

      else if (*(int *)a3 < 1)
      {
        int v7 = 0LL;
        *a3 = U_MEMORY_ALLOCATION_ERROR;
        goto LABEL_4;
      }
    }
  }

  int v7 = 0LL;
LABEL_4:
  sub_1807FD864((uint64_t)v11);
  return v7;
}

uint64_t *sub_1807FDD50(uint64_t a1, UErrorCode *a2)
{
  uint64_t result = icu::UMemory::operator new(v7, (icu::UMemory *)0x38, v6);
  if (result)
  {
    int v8 = (UErrorCode **)sub_1808036F4(result, a1, a1 + 112, a2);
    *(void *)(a1 + 176) = v8;
    sub_180803790(v8, v9);
    sub_1807FDE04(a1);
    sub_180805844(*(icu::UVector ***)(a1 + 176), a2);
    sub_180802310(*(void *)(a1 + 160));
    uint64_t result = (uint64_t *)sub_1807FD97C(a1);
  }

  else
  {
    *(void *)(a1 + 176) = 0LL;
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }

  return result;
}

uint64_t sub_1807FDE04(uint64_t a1)
{
  do
  {
    uint64_t v5 = 3LL;
    int v2 = sub_180804E84(*(icu::UVector ***)(a1 + 176), (int *)&v5);
    if (v2)
    {
      do
      {
        sub_180802370(*(void *)(a1 + 160), v5);
        sub_180804FE4(*(void *)(a1 + 176), SHIDWORD(v5));
      }

      while ((sub_180804E84(*(icu::UVector ***)(a1 + 176), (int *)&v5) & 1) != 0);
    }

    do
    {
      char v3 = v2;
      uint64_t result = sub_180805560(*(icu::UVector ***)(a1 + 176));
      LOBYTE(v2) = 1;
    }

    while ((int)result > 0);
  }

  while ((v3 & 1) != 0);
  return result;
}

uint64_t sub_1807FDE90(uint64_t a1, unint64_t a2, uint64_t a3, UErrorCode *a4)
{
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a3;
  *(void *)a1 = off_18970FE40;
  *(void *)(a1 + 8) = 0LL;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 80) = a1 + 48;
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = 0LL;
  *(_OWORD *)(a1 + 96) = 0u;
  unint64_t v6 = (void *)(a1 + 96);
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 144) = 0LL;
  if (a3)
  {
    *(void *)(a3 + 64) = 0LL;
    *(_OWORD *)(a3 + 32) = 0uLL;
    *(_OWORD *)(a3 + 48) = 0uLL;
    *(_OWORD *)a3 = 0uLL;
    *(_OWORD *)(a3 + 16) = 0uLL;
  }

  int v7 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v7 <= 0)
  {
    unint64_t v9 = (icu::UVector *)icu::UMemory::operator new(v7, (icu::UMemory *)0x28, a2);
    if (v9) {
      unint64_t v9 = icu::UVector::UVector(v9, a4);
    }
    *(void *)(a1 + 104) = v9;
    uint64_t v12 = (icu::UVector *)icu::UMemory::operator new(v11, (icu::UMemory *)0x28, v10);
    if (v12) {
      uint64_t v12 = icu::UVector::UVector(v12, a4);
    }
    *(void *)(a1 + 144) = v12;
    int32_t v15 = icu::UMemory::operator new(v14, (icu::UMemory *)0xC78, v13);
    if (v15) {
      int32_t v15 = (uint64_t *)sub_1808004AC((uint64_t)v15, a1);
    }
    *(void *)(a1 + 40) = v15;
    size_t v18 = icu::UMemory::operator new(v17, (icu::UMemory *)0x30, v16);
    if (v18)
    {
      *(void *)(a1 + 96) = sub_1808025CC((uint64_t)v18, a1);
    }

    else
    {
      *unint64_t v6 = 0LL;
    }

    *a4 = U_MEMORY_ALLOCATION_ERROR;
  }

  return a1;
}

uint64_t sub_1807FDFB8(uint64_t a1)
{
  *(void *)a1 = off_18970FE40;
  uint64_t v2 = icu::UVector::elementAt(*(icu::UVector **)(a1 + 104), 0);
  if (v2)
  {
    unsigned int v3 = 1;
    do
    {
      unint64_t v4 = (void *)sub_1807FD518(v2);
      icu::UMemory::operator delete(v4);
      uint64_t v2 = icu::UVector::elementAt(*(icu::UVector **)(a1 + 104), v3++);
    }

    while (v2);
  }

  uint64_t v5 = *(void *)(a1 + 104);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  if (*(void *)(a1 + 96))
  {
    unint64_t v6 = (void *)sub_180802644();
    icu::UMemory::operator delete(v6);
  }

  if (*(void *)(a1 + 112))
  {
    int v7 = (void *)sub_180806044();
    icu::UMemory::operator delete(v7);
  }

  if (*(void *)(a1 + 120))
  {
    int v8 = (void *)sub_180806044();
    icu::UMemory::operator delete(v8);
  }

  if (*(void *)(a1 + 128))
  {
    unint64_t v9 = (void *)sub_180806044();
    icu::UMemory::operator delete(v9);
  }

  if (*(void *)(a1 + 136))
  {
    unint64_t v10 = (void *)sub_180806044();
    icu::UMemory::operator delete(v10);
  }

  uint64_t v11 = *(void *)(a1 + 48);
  if (v11)
  {
    uint64_t v12 = (void *)sub_1807FD518(v11);
    icu::UMemory::operator delete(v12);
  }

  uint64_t v13 = *(void *)(a1 + 56);
  if (v13)
  {
    unsigned int v14 = (void *)sub_1807FD518(v13);
    icu::UMemory::operator delete(v14);
  }

  uint64_t v15 = *(void *)(a1 + 64);
  if (v15)
  {
    unint64_t v16 = (void *)sub_1807FD518(v15);
    icu::UMemory::operator delete(v16);
  }

  uint64_t v17 = *(void *)(a1 + 72);
  if (v17)
  {
    size_t v18 = (void *)sub_1807FD518(v17);
    icu::UMemory::operator delete(v18);
  }

  uint64_t v19 = *(void *)(a1 + 40);
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  uint64_t v20 = *(void *)(a1 + 144);
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
  }
  return a1;
}

void sub_1807FE0E4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1807FDFB8(a1);
  icu::UMemory::operator delete(v1);
}

_DWORD *sub_1807FE0F8(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  memset(v33, 0, sizeof(v33));
  sub_18080155C(*(void *)(a1 + 32), (uint64_t)v32);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v33, v32);
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)v32);
  int v4 = (sub_180807364(*(void *)(a1 + 112)) + 7) & 0xFFFFFFF8;
  int v5 = (sub_180807364(*(void *)(a1 + 120)) + 7) & 0xFFFFFFF8;
  int v6 = (sub_180807364(*(void *)(a1 + 128)) + 7) & 0xFFFFFFF8;
  int v7 = (sub_180807364(*(void *)(a1 + 136)) + 7) & 0xFFFFFFF8;
  int v8 = (sub_180802C20(*(void *)(a1 + 96)) + 7) & 0xFFFFFFF8;
  int v9 = WORD4(v33[0]) >> 5;
  if (SWORD4(v33[0]) < 0) {
    int v9 = HIDWORD(v33[0]);
  }
  int v28 = v4;
  int v10 = v4 + 96;
  int v11 = v5 + v4 + 96;
  int v26 = v7;
  int v27 = v6;
  int v12 = v6 + v11;
  int v13 = v7 + v6 + v11;
  int v14 = v8 + v13;
  unsigned int v25 = (4 * *(_DWORD *)(*(void *)(a1 + 144) + 8LL) + 7) & 0xFFFFFFF8;
  unsigned int v15 = v8 + v13 + v25;
  signed int v29 = (2 * v9 + 9) & 0xFFFFFFF8;
  signed int v16 = v15 + v29;
  uint64_t v17 = uprv_malloc((int)(v15 + v29));
  uint64_t v1 = v17;
  if (v17)
  {
    bzero(v17, v16);
    *uint64_t v1 = 45472;
    v1[1] = 259;
    v1[2] = v16;
    v1[3] = sub_180802CFC(*(void *)(a1 + 96));
    v1[4] = 96;
    v1[5] = v28;
    v1[6] = v10;
    v1[7] = v5;
    v1[8] = v11;
    v1[9] = v27;
    v1[10] = v12;
    v1[11] = v26;
    v1[12] = v13;
    int v18 = sub_180802C20(*(void *)(a1 + 96));
    v1[16] = v14;
    v1[17] = v25;
    v1[13] = v18;
    v1[14] = v15;
    int v19 = WORD4(v33[0]) >> 5;
    if (SWORD4(v33[0]) < 0) {
      int v19 = HIDWORD(v33[0]);
    }
    v1[15] = 2 * v19;
    *((void *)v1 + 10) = 0LL;
    *((void *)v1 + 1icu::UVector32::~UVector32(this + 1) = 0LL;
    *((void *)v1 + 9) = 0LL;
    sub_1808073B4(*(void *)(a1 + 112), v1 + 24);
    sub_1808073B4(*(void *)(a1 + 120), (_DWORD *)((char *)v1 + v1[6]));
    sub_1808073B4(*(void *)(a1 + 128), (_DWORD *)((char *)v1 + v1[8]));
    sub_1808073B4(*(void *)(a1 + 136), (_DWORD *)((char *)v1 + v1[10]));
    sub_180802CDC(*(void *)(a1 + 96), (_DWORD *)((char *)v1 + v1[12]));
    uint64_t v20 = *(int **)(a1 + 144);
    if (v20[2] >= 1)
    {
      uint64_t v21 = 0LL;
      uint64_t v22 = (char *)v1 + v1[16];
      do
      {
        *(_DWORD *)&v22[4 * v21] = icu::UVector::elementAti((icu::UVector *)v20, v21);
        ++v21;
        uint64_t v20 = *(int **)(a1 + 144);
      }

      while (v21 < v20[2]);
    }

    int v31 = (UChar *)((char *)v1 + v1[14]);
    icu::UnicodeString::extract((uint64_t)v33, &v31, (v29 >> 1) | 1, *(int **)(a1 + 16));
    char v30 = v31;
    unsigned int v23 = &v30;
  }

  else
  {
    unsigned int v23 = *(UChar ***)(a1 + 16);
    *(_DWORD *)unsigned int v23 = 7;
  }

  icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)v33);
  return v1;
}

uint64_t *sub_1807FE3DC(unint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v43 = 0LL;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v40 = 0u;
  __int128 v38 = 0u;
  memset(v39, 0, sizeof(v39));
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v35 = 0u;
  sub_1807FDE90((uint64_t)&v35, a1, a2, a3);
  int v4 = 0LL;
  if (*(int *)a3 <= 0)
  {
    sub_180801938(*((uint64_t *)&v37 + 1));
    sub_180802648(v40, v5);
    int v8 = (unint64_t *)icu::UMemory::operator new(v7, (icu::UMemory *)0x20, v6);
    if (v8) {
      int v8 = sub_180805FD8(v8, (unint64_t)&v35, (unint64_t)&v38);
    }
    *(void *)&__int128 v41 = v8;
    int v11 = (unint64_t *)icu::UMemory::operator new(v10, (icu::UMemory *)0x20, v9);
    if (v11) {
      int v11 = sub_180805FD8(v11, (unint64_t)&v35, (unint64_t)&v38 + 8);
    }
    *((void *)&v41 + icu::UVector32::~UVector32(this + 1) = v11;
    int v14 = (unint64_t *)icu::UMemory::operator new(v13, (icu::UMemory *)0x20, v12);
    if (v14) {
      int v14 = sub_180805FD8(v14, (unint64_t)&v35, (unint64_t)v39);
    }
    *(void *)&__int128 v42 = v14;
    uint64_t v17 = (unint64_t *)icu::UMemory::operator new(v16, (icu::UMemory *)0x20, v15);
    int v19 = v17;
    if (v17) {
      sub_180805FD8(v17, (unint64_t)&v35, (unint64_t)v39 + 8);
    }
    *((void *)&v42 + icu::UVector32::~UVector32(this + 1) = v19;
    uint64_t v20 = *((void *)&v41 + 1);
    uint64_t v21 = v41;
    if (v19 && (void)v41 && *((void *)&v41 + 1) && (void)v42)
    {
      sub_180806048(v41, v18);
      sub_180806048(*((uint64_t *)&v41 + 1), v22);
      sub_180806048(v42, v23);
      sub_180806048(*((uint64_t *)&v42 + 1), v24);
      unsigned int v25 = sub_1807FE0F8((uint64_t)&v35);
      int v27 = (uint64_t *)*(unsigned int *)v36;
      if ((int)v27 <= 0)
      {
        int v33 = v25;
        uint64_t v34 = icu::UMemory::operator new(v27, (icu::UMemory *)0x248, v26);
        if (v34)
        {
          int v4 = v34;
          icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57(v34, v33, a3);
          (*(void (**)(uint64_t *))(*v4 + 8))(v4);
        }

        else if (*(int *)a3 < 1)
        {
          int v4 = 0LL;
          *a3 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_25;
        }
      }

      int v4 = 0LL;
    }

    else
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
      if (v21)
      {
        int v28 = (void *)sub_180806044(v21);
        icu::UMemory::operator delete(v28);
        uint64_t v20 = *((void *)&v41 + 1);
      }

      *(void *)&__int128 v41 = 0LL;
      if (v20)
      {
        signed int v29 = (void *)sub_180806044(v20);
        icu::UMemory::operator delete(v29);
      }

      *((void *)&v41 + icu::UVector32::~UVector32(this + 1) = 0LL;
      if ((void)v42)
      {
        char v30 = (void *)sub_180806044(v42);
        icu::UMemory::operator delete(v30);
      }

      *(void *)&__int128 v42 = 0LL;
      if (*((void *)&v42 + 1))
      {
        int v31 = (void *)sub_180806044(*((void *)&v42 + 1));
        icu::UMemory::operator delete(v31);
      }

      int v4 = 0LL;
      *((void *)&v42 + icu::UVector32::~UVector32(this + 1) = 0LL;
    }
  }

uint64_t sub_1807FE5FC(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  *(void *)a1 = off_18970FE78;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  *(void *)(a1 + 48) = off_18971B688;
  *(_WORD *)(a1 + 56) = 2;
  int v4 = (icu::UnicodeSet *)(a1 + 1152);
  for (uint64_t i = 1152LL; i != 3152; i += 200LL)
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + i));
  *(_BYTE *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 28) = 1LL;
  *(_DWORD *)(a1 + 36) = 0;
  *(void *)(a1 + 112) = 0LL;
  *(_WORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0LL;
  *(void *)(a1 + 3152) = 0LL;
  *(_DWORD *)(a1 + 1128) = 0;
  *(_DWORD *)(a1 + 113icu::UVector32::~UVector32(this + 1) = 0;
  *(_OWORD *)(a1 + 1136) = 0u;
  if (**(int **)(a2 + 16) <= 0)
  {
    icu::UnicodeString::UnicodeString((uint64_t)v23, (uint64_t)L"[^[\\p{Z}\\u0020-\\u007f]-[\\p{L}]-[\\p{N}]]");
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v22, (const icu::UnicodeString *)v23, *(UErrorCode **)(a2 + 16));
    icu::UnicodeSet::operator=((icu::UnicodeSet *)(a1 + 1752), (const icu::UnicodeSet *)v22);
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v22);
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v23);
    int v7 = icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 1952), 9u, 0xDu);
    int v8 = icu::UnicodeSet::add(v7, 0x20u);
    unint64_t v9 = icu::UnicodeSet::add(v8, 0x85u);
    int v10 = icu::UnicodeSet::add(v9, 0x200Eu, 0x200Fu);
    icu::UnicodeSet::add(v10, 0x2028u, 0x2029u);
    icu::UnicodeString::UnicodeString((uint64_t)v23, (uint64_t)L"[_\\p{L}\\p{N}]");
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v22, (const icu::UnicodeString *)v23, *(UErrorCode **)(a2 + 16));
    icu::UnicodeSet::operator=((icu::UnicodeSet *)(a1 + 1352), (const icu::UnicodeSet *)v22);
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v22);
    unint64_t v12 = icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v23);
    icu::UnicodeString::UnicodeString((uint64_t)v12, (uint64_t)L"[_\\p{L}]");
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v22, (const icu::UnicodeString *)v23, *(UErrorCode **)(a2 + 16));
    icu::UnicodeSet::operator=((icu::UnicodeSet *)(a1 + 1552), (const icu::UnicodeSet *)v22);
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v22);
    int v14 = icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v23);
    icu::UnicodeString::UnicodeString((uint64_t)v14, (uint64_t)"[");
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v22, (const icu::UnicodeString *)v23, *(UErrorCode **)(a2 + 16));
    icu::UnicodeSet::operator=(v4, (const icu::UnicodeSet *)v22);
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v22);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v23);
    uint64_t v17 = *(uint64_t **)(a2 + 16);
    if (*(_DWORD *)v17 == 1)
    {
      int v18 = 66058;
LABEL_6:
      *(_DWORD *)uint64_t v17 = v18;
      return a1;
    }

    uint64_t v20 = icu::UMemory::operator new(v17, (icu::UMemory *)0x70, v16);
    if (!v20)
    {
      *(void *)(a1 + 1136) = 0LL;
      uint64_t v17 = *(uint64_t **)(a2 + 16);
      int v18 = 7;
      goto LABEL_6;
    }

    *(void *)(a1 + 1136) = sub_180802F24(v20, a1, *(void *)(a2 + 32), *(void *)(a2 + 16));
    uint64_t v21 = uhash_open((uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0LL, *(int **)(a2 + 16));
    *(void *)(a1 + 1144) = v21;
  }

  return a1;
}

void sub_1807FE8B8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uprv_free(a1);
}

uint64_t sub_1807FE8F0(uint64_t a1)
{
  *(void *)a1 = off_18970FE78;
  uint64_t v2 = *(void *)(a1 + 1136);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  unsigned int v3 = *(_BYTE **)(a1 + 1144);
  if (v3)
  {
    uhash_close(v3);
    *(void *)(a1 + 1144) = 0LL;
  }

  int v4 = *(_DWORD *)(a1 + 1128);
  if (v4 >= 1)
  {
    do
    {
      uint64_t v5 = *(void *)(a1 + 8LL * v4 + 328);
      if (v5)
      {
        unint64_t v6 = (void *)sub_1807FD518(v5);
        icu::UMemory::operator delete(v6);
        int v4 = *(_DWORD *)(a1 + 1128);
      }

      BOOL v7 = __OFSUB__(v4--, 1);
      *(_DWORD *)(a1 + 1128) = v4;
    }

    while (!((v4 < 0) ^ v7 | (v4 == 0)));
  }

  for (uint64_t i = 2952LL; i != 952; i -= 200LL)
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + i));
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)(a1 + 48));
  return a1;
}

void sub_1807FE994(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1807FE8F0(a1);
  icu::UMemory::operator delete(v1);
}

BOOL sub_1807FE9A8(uint64_t a1, unint64_t a2)
{
  uint64_t v89 = *MEMORY[0x1895F89C0];
  BOOL result = 0LL;
  switch((int)a2)
  {
    case 0:
      uint64_t v4 = *(void *)(a1 + 8);
      uint64_t v5 = *(int **)(v4 + 16);
      if (*v5 > 0) {
        return 0LL;
      }
      int v6 = 9;
      goto LABEL_62;
    case 1:
      uint64_t v8 = sub_1807FF53C(a1, 0LL);
      uint64_t v9 = v8;
      v84 = "a";
      icu::UnicodeString::UnicodeString(v88, 1LL, &v84);
      sub_1807FF734(a1, (uint64_t)v88, v9, 0LL);
      icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v88);
      goto LABEL_45;
    case 2:
      double v11 = sub_1807FF5F8(a1, 1);
      uint64_t v12 = *(int *)(a1 + 1128);
      uint64_t v13 = *(void *)(a1 + 328 + 8LL * ((int)v12 - 2));
      uint64_t v14 = *(void *)(a1 + 328 + 8LL * ((int)v12 - 1));
      uint64_t v15 = *(void *)(a1 + 328 + 8 * v12);
      *(_DWORD *)(v15 + 112) = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v15 + 116) = *(_DWORD *)(a1 + 16);
      (*(void (**)(void, double))(**(void **)(*(void *)(a1 + 8) + 32LL) + 24LL))( *(void *)(*(void *)(a1 + 8) + 32LL),  v11);
      *(void *)(v14 + 16) = v15;
      *(void *)(v15 + 8) = v14;
      (*(void (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 1136) + 48LL))( *(void *)(a1 + 1136),  v14 + 48,  v14,  *(void *)(*(void *)(a1 + 8) + 16LL));
      uint64_t v16 = *(void *)(a1 + 8);
      if (**(int **)(v16 + 16) >= 1)
      {
        uint64_t v17 = *(void *)(v16 + 24);
        if (v17)
        {
          *(void *)uint64_t v17 = *(void *)(a1 + 28);
          *(_WORD *)(v17 + 8) = 0;
          *(_WORD *)(v17 + 40) = 0;
        }
      }

      int v18 = (void *)sub_1807FD518(v13);
      icu::UMemory::operator delete(v18);
      *(_DWORD *)(a1 + 1128) -= 3;
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 3:
      sub_1807FF5F8(a1, 1);
      uint64_t v19 = *(void *)(a1 + 8);
      uint64_t v20 = *(void *)(a1 + 8LL * *(int *)(a1 + 1128) + 328);
      if (!*(_BYTE *)(a1 + 1133)) {
        goto LABEL_17;
      }
      uint64_t v21 = sub_1807FF53C(a1, 6uLL);
      uint64_t v22 = sub_1807FF53C(a1, 8uLL);
      uint64_t v23 = *(int *)(a1 + 1128) - 2LL;
      *(_DWORD *)(a1 + 1128) = v23;
      *(void *)(v22 + 16) = v20;
      *(void *)(v22 + 24) = v21;
      *(void *)(a1 + 8 * v23 + 328) = v22;
      *(_DWORD *)(v21 + 124) = *(_DWORD *)(a1 + 3152);
      *(_BYTE *)(v21 + 128) = 1;
      uint64_t v19 = *(void *)(a1 + 8);
      uint64_t v20 = v22;
LABEL_17:
      *(_BYTE *)(v20 + 129) = 1;
      if (*(_BYTE *)(v19 + 152) && !*(_BYTE *)(a1 + 1134)) {
        *(_BYTE *)(v20 + 130) = 1;
      }
      if (*(_BYTE *)(a1 + 1132)) {
        uint64_t v24 = (uint64_t *)(v19 + 136);
      }
      else {
        uint64_t v24 = *(uint64_t **)(v19 + 144);
      }
      uint64_t v64 = *v24;
      if (!*v24) {
        goto LABEL_93;
      }
      uint64_t v65 = sub_1807FF53C(a1, 9uLL);
      if (**(int **)(*(void *)(a1 + 8) + 16LL) <= 0)
      {
        *(void *)(v65 + 16) = v64;
        *(void *)(v64 + 8) = v65;
        *(void *)(v65 + 24) = v20;
        *(void *)(v20 + 8) = v65;
        uint64_t v20 = v65;
LABEL_93:
        *uint64_t v24 = v20;
        *(_DWORD *)(a1 + 113icu::UVector32::~UVector32(this + 1) = 0;
        *(_DWORD *)(a1 + 1128) = 0;
      }

      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 4:
      uint64_t v25 = *(void *)(a1 + 8LL * *(int *)(a1 + 1128) + 328);
      if (v25 && *(_DWORD *)v25 == 2)
      {
        *(_DWORD *)(v25 + 116) = *(_DWORD *)(a1 + 16);
        (*(void (**)(void, void))(**(void **)(*(void *)(a1 + 8) + 32LL) + 24LL))( *(void *)(*(void *)(a1 + 8) + 32LL),  (*(_DWORD *)(v25 + 112) + 1));
        *(void *)(v25 + 16) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 1136) + 40LL))( *(void *)(a1 + 1136),  v25 + 48);
      }

      else
      {
        uint64_t v52 = *(void *)(a1 + 8);
        __int128 v53 = *(int **)(v52 + 16);
        if (*v53 <= 0)
        {
          int v54 = 66048;
LABEL_77:
          int *v53 = v54;
          uint64_t v55 = *(void *)(v52 + 24);
          if (v55)
          {
            *(void *)uint64_t v55 = *(void *)(a1 + 28);
            *(_WORD *)(v55 + 8) = 0;
            *(_WORD *)(v55 + 40) = 0;
          }
        }
      }

      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 5:
      return result;
    case 6:
      sub_1807FF5F8(a1, 4);
      uint64_t v26 = *(int *)(a1 + 1128);
      *(_DWORD *)(a1 + 1128) = v26 - 1;
      uint64_t v27 = *(void *)(a1 + 8 * v26 + 328);
      uint64_t v28 = a1;
      unint64_t v29 = 8LL;
      goto LABEL_71;
    case 7:
    case 12:
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 8:
      sub_1807FF5F8(a1, 4);
      uint64_t v30 = *(int *)(a1 + 1128);
      *(_DWORD *)(a1 + 1128) = v30 - 1;
      uint64_t v27 = *(void *)(a1 + 8 * v30 + 328);
      uint64_t v28 = a1;
      unint64_t v29 = 9LL;
      goto LABEL_71;
    case 9:
      sub_1807FF5F8(a1, 2);
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 10:
      sub_1807FF53C(a1, 7uLL);
      ++*(_DWORD *)(a1 + 3152);
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 11:
      uint64_t v31 = a1;
      unint64_t v32 = 15LL;
      goto LABEL_54;
    case 13:
      *(_BYTE *)(a1 + 1134) = 1;
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 14:
      memset(v88, 0, 64);
      icu::UnicodeString::UnicodeString( (icu::UnicodeString *)v88,  *(const icu::UnicodeString **)(*(void *)(a1 + 8) + 32LL),  *(_DWORD *)(a1 + 3156),  (*(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 3156)));
      unsigned int v83 = L"chain";
      icu::UnicodeString::UnicodeString(v85, 1LL, &v83);
      if ((v88[2] & 1) != 0)
      {
        unint64_t v35 = v86;
        int v36 = v86 & 1;
      }

      else
      {
        if (SLOWORD(v88[2]) >= 0) {
          int v33 = LOWORD(v88[2]) >> 5;
        }
        else {
          int v33 = v88[3];
        }
        if ((v86 & 0x8000u) == 0) {
          unint64_t v34 = v86 >> 5;
        }
        else {
          unint64_t v34 = v87;
        }
        if ((v86 & 1) != 0 || v33 != (_DWORD)v34)
        {
          icu::UnicodeString::~UnicodeString((void *)v34, (icu::UnicodeString *)v85);
          goto LABEL_83;
        }

        int v36 = icu::UnicodeString::doEquals((icu::UnicodeString *)v88, (const icu::UnicodeString *)v85, v33);
      }

      icu::UnicodeString::~UnicodeString((void *)v35, (icu::UnicodeString *)v85);
      if (v36)
      {
        int v56 = *(_BYTE **)(a1 + 8);
        v56[152] = 1;
        goto LABEL_97;
      }

LABEL_97:
      icu::UnicodeString::~UnicodeString(v56, (icu::UnicodeString *)v88);
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 15:
      *(_DWORD *)(a1 + 3156) = *(_DWORD *)(a1 + 16);
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 16:
      *(_BYTE *)(a1 + 1132) = 1;
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 17:
      uint64_t v37 = sub_1807FF53C(a1, 0LL);
      uint64_t v9 = v37;
      icu::UnicodeString::UnicodeString((uint64_t)v88, *(_DWORD *)(a1 + 40));
      sub_1807FF734(a1, (uint64_t)v88, v9, 0LL);
      icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)v88);
LABEL_45:
      uint64_t v39 = *(unsigned int *)(a1 + 16);
      *(_DWORD *)(v9 + 112) = v39;
      *(_DWORD *)(v9 + 116) = *(_DWORD *)(a1 + 20);
      uint64_t v40 = *(void *)(*(void *)(a1 + 8) + 32LL);
      goto LABEL_67;
    case 18:
      uint64_t v4 = *(void *)(a1 + 8);
      uint64_t v5 = *(int **)(v4 + 16);
      if (*v5 > 0) {
        return 0LL;
      }
      int v7 = 66051;
      goto LABEL_63;
    case 19:
      uint64_t v4 = *(void *)(a1 + 8);
      uint64_t v5 = *(int **)(v4 + 16);
      if (*v5 > 0) {
        return 0LL;
      }
      int v6 = 5;
      goto LABEL_62;
    case 20:
      sub_1807FF9A0(a1, a2);
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 21:
      __int128 v41 = (_DWORD *)sub_1807FF53C(a1, 4uLL);
      uint64_t v42 = *(void *)(a1 + 8);
      if (**(int **)(v42 + 16) <= 0)
      {
        v41[31] = *(_DWORD *)(a1 + 3152);
        v41[28] = *(_DWORD *)(a1 + 16);
        v41[29] = *(_DWORD *)(a1 + 20);
        (*(void (**)(void))(**(void **)(v42 + 32) + 24LL))(*(void *)(v42 + 32));
        *(_BYTE *)(a1 + 1133) = 1;
      }

      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 22:
      *(_DWORD *)(*(void *)(a1 + 8LL * *(int *)(a1 + 1128) + 320) + 112LL) = *(_DWORD *)(a1 + 20);
      uint64_t v31 = a1;
      unint64_t v32 = 7LL;
LABEL_54:
      sub_1807FF53C(v31, v32);
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 23:
      uint64_t v43 = sub_1807FF53C(a1, 5uLL);
      if (**(int **)(*(void *)(a1 + 8) + 16LL) <= 0)
      {
        *(_DWORD *)(v43 + 124) = 0;
        *(void *)(v43 + 112) = *(void *)(a1 + 16);
      }

      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 24:
      uint64_t v44 = sub_1807FF53C(a1, 2uLL);
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 25:
      uint64_t v45 = *(void *)(a1 + 8LL * *(int *)(a1 + 1128) + 328);
      *(_DWORD *)(v45 + 124) = u_charDigitValue(*(_DWORD *)(a1 + 40)) + 10 * *(_DWORD *)(v45 + 124);
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 26:
      uint64_t v4 = *(void *)(a1 + 8);
      uint64_t v5 = *(int **)(v4 + 16);
      if (*v5 > 0) {
        return 0LL;
      }
      int v6 = 13;
LABEL_62:
      int v7 = v6 | 0x10200;
      goto LABEL_63;
    case 27:
      uint64_t v47 = *(void *)(a1 + 8LL * *(int *)(a1 + 1128) + 328);
      *(_DWORD *)(v47 + 116) = *(_DWORD *)(a1 + 20);
      uint64_t v40 = *(void *)(*(void *)(a1 + 8) + 32LL);
      uint64_t v39 = *(unsigned int *)(v47 + 112);
LABEL_67:
      (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 24LL))(v40, v39);
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 28:
      uint64_t v48 = *(int *)(a1 + 1128);
      *(_DWORD *)(a1 + 1128) = v48 - 1;
      uint64_t v27 = *(void *)(a1 + 8 * v48 + 328);
      uint64_t v28 = a1;
      unint64_t v29 = 11LL;
      goto LABEL_71;
    case 29:
      uint64_t v49 = *(int *)(a1 + 1128);
      *(_DWORD *)(a1 + 1128) = v49 - 1;
      uint64_t v27 = *(void *)(a1 + 8 * v49 + 328);
      uint64_t v28 = a1;
      unint64_t v29 = 12LL;
      goto LABEL_71;
    case 30:
      uint64_t v50 = *(int *)(a1 + 1128);
      *(_DWORD *)(a1 + 1128) = v50 - 1;
      uint64_t v27 = *(void *)(a1 + 8 * v50 + 328);
      uint64_t v28 = a1;
      unint64_t v29 = 10LL;
LABEL_71:
      uint64_t v51 = sub_1807FF53C(v28, v29);
      if (**(int **)(*(void *)(a1 + 8) + 16LL) <= 0)
      {
        *(void *)(v51 + 16) = v27;
        *(void *)(v27 + 8) = v51;
      }

      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 31:
      uint64_t v52 = *(void *)(a1 + 8);
      __int128 v53 = *(int **)(v52 + 16);
      if (*v53 > 0) {
        return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
      }
      int v54 = 66051;
      goto LABEL_77;
    default:
      uint64_t v4 = *(void *)(a1 + 8);
      uint64_t v5 = *(int **)(v4 + 16);
      if (*v5 > 0) {
        return 0LL;
      }
      int v7 = 66048;
LABEL_63:
      *uint64_t v5 = v7;
      uint64_t v46 = *(void *)(v4 + 24);
      if (!v46) {
        return 0LL;
      }
      BOOL result = 0LL;
      *(void *)uint64_t v46 = *(void *)(a1 + 28);
      *(_WORD *)(v46 + 8) = 0;
      *(_WORD *)(v46 + 40) = 0;
      return result;
  }

  int v36 = v12 + ((unint64_t)((char *)v15 - (char *)v6) >> 1);
  if (pDestLength) {
    *pDestLength = v36;
  }
  u_terminateUChars((uint64_t)v6, destCapacity, v36, (int *)pErrorCode);
  return v6;
}

    uint64_t v14 = v48;
    if (v48) {
LABEL_98:
    }
      sub_1808C7B8C(a1, v14, a3);
  }

  else
  {
    uint64_t v14 = 1;
    uint64_t v48 = 1;
    if (!v12 || v8) {
      goto LABEL_98;
    }
    uint64_t v26 = 0LL;
    *(_WORD *)(a1 + 8) = 0;
    *(void *)a1 = 1LL;
    while (1)
    {
      uint64_t v27 = a2[v26];
      if (!a2[v26])
      {
LABEL_82:
        *(_BYTE *)(a1 + 8) = v6 | 0x40;
        return a1;
      }

      ++v26;
    }

    for (uint64_t i = 0LL; ; ++i)
    {
      uint64_t v40 = a2[i];
      if (!a2[i]) {
        goto LABEL_82;
      }
    }

    *(_BYTE *)(a1 + 8) = v6 | 0x20;
    uint64_t v45 = *a2;
    if ((v45 | 0x20) == 0x73)
    {
      v6 |= 0x10u;
      *(_BYTE *)(a1 + 8) = v6;
      uint64_t v46 = *++a2;
      uint64_t v45 = v46;
    }

    else
    {
      v6 |= 0x20u;
    }

    if ((v45 | 0x20) != 0x6E || (a2[1] | 0x20) != 0x61 || (a2[2] | 0x20) != 0x6E) {
      goto LABEL_97;
    }
    for (j = a2 + 3; ; ++j)
    {
      uint64_t v47 = *j;
      if (v47 != 48) {
        break;
      }
    }

    if (*j)
    {
      if ((v47 - 58) >= 0xFFFFFFF6)
      {
        uint64_t v9 = j - 1;
        do
        {
          ++v7;
          uint64_t v47 = v9[2];
          ++v9;
        }

        while ((v47 - 58) > 0xFFFFFFF5);
      }

      else
      {
        uint64_t v9 = 0LL;
      }

      if (!v47 && (v7 < *(_DWORD *)a3 || !*(_BYTE *)(a3 + 24) && v7 <= *(_DWORD *)a3))
      {
        uint64_t v28 = 0;
        goto LABEL_55;
      }

      goto LABEL_97;
    }
  }

  return a1;
}

          if (v73 != 48 && !v33 && !v30) {
            return a1[2];
          }
          if ((v32 | 0x20) != 0x65) {
            goto LABEL_164;
          }
          if (v27 && (v10 & 4) == 0) {
            return a1[2];
          }
          if ((v27 & 1) == 0)
          {
            __int128 v41 = (char *)(v31 + 1);
            *(void *)int v78 = v31 + 1;
            uint64_t v42 = *v41;
            if (v42 == 45 || v42 == 43)
            {
              __int128 v41 = (char *)(v31 + 2);
              *(void *)int v78 = v31 + 2;
            }

            else
            {
              uint64_t v42 = 43;
            }

            if (v41 == v6 || (uint64_t v51 = *v41, v51 - 58 < 0xFFFFFFF6))
            {
LABEL_150:
              if ((v10 & 4) == 0) {
                return a1[2];
              }
              *(void *)int v78 = v31;
LABEL_186:
              BOOL v60 = v33 + v29;
              if ((v74 & 1) != 0)
              {
                v79[v28++] = 49;
                --v60;
              }

              v79[v28] = 0;
              int v61 = v28;
              while ((int)v61 >= 1)
              {
                BOOL v62 = v61 - 1;
                uint64_t v63 = *((unsigned __int8 *)&v78[4] + v61-- + 1);
                if (v63 != 48)
                {
                  uint64_t v64 = v62 + 1;
                  goto LABEL_193;
                }
              }

              uint64_t v64 = 0;
LABEL_193:
              uint64_t v65 = v28 - v64 + v60;
              if (v70)
              {
                BOOL result = sub_1808D8BD8((uint64_t)v79, v64, v65);
              }

              else
              {
                sub_1808D91DC((uint64_t)v79, v64, v65);
                BOOL result = v66;
              }

              UText *v72 = *(_DWORD *)v78 - (_DWORD)a2;
              uint64_t v45 = -result;
              uint64_t v43 = v71 == 0;
LABEL_197:
              if (!v43) {
                return v45;
              }
              return result;
            }

            uint64_t v52 = 0;
            uint64_t v31 = &a2[v68];
            __int128 v53 = v41 + 1;
            while (1)
            {
              if (v52 <= 107374181 || (int v54 = 0x3FFFFFFF, v52 == 107374182) && v51 <= 0x33) {
                int v54 = v51 + 10 * v52 - 48;
              }
              if (v53 == v6) {
                break;
              }
              uint64_t v55 = *v53++;
              uint64_t v51 = v55;
              uint64_t v52 = v54;
              if (v55 - 48 >= 0xA)
              {
                uint64_t v31 = (unsigned __int8 *)(v53 - 1);
                break;
              }
            }

            *(void *)int v78 = v31;
            if (v42 == 45) {
              int v56 = -v54;
            }
            else {
              int v56 = v54;
            }
            v33 += v56;
LABEL_164:
            if (((v69 | ((v10 & 4) >> 2)) & 1) == 0)
            {
              goto LABEL_185;
            }

            if ((v10 & 4) != 0 || v31 == (unsigned __int8 *)v6)
            {
              BOOL v57 = (char *)v31;
            }

            else
            {
              BOOL v57 = (char *)&a2[v68];
              do
              {
                int v58 = 0LL;
                while (byte_180A378BC[v58] != *v31)
                {
                  if (++v58 == 6) {
                    return a1[2];
                  }
                }

                ++v31;
              }

              while (v31 != (unsigned __int8 *)v6);
              *(void *)int v78 = &a2[v68];
            }

            if ((v10 & 0x10) == 0 || v57 == v6)
            {
LABEL_69:
              if (!v27) {
                goto LABEL_186;
              }
            }

            else
            {
              do
              {
                v59 = 0LL;
                while (byte_180A378BC[v59] != *v57)
                {
                  if (++v59 == 6)
                  {
                    *(void *)int v78 = v57;
                    goto LABEL_185;
                  }
                }

                ++v57;
              }

              while (v57 != v6);
              *(void *)int v78 = &a2[v68];
LABEL_185:
              if ((v27 & 1) == 0) {
                goto LABEL_186;
              }
            }

            LODWORD(v3icu::UVector32::~UVector32(this + 1) = *(_DWORD *)v78;
          }
        }

        v75 = v79;
        BOOL result = sub_1808D7F34(&v75, &v79[v28], v71, *((unsigned __int16 *)a1 + 20), (v10 & 4) != 0, v70, &v76, a1[2]);
        UText *v72 = (_DWORD)v31 - (_DWORD)a2;
        return result;
      }

      if (v30 > 771)
      {
        ++v29;
        v74 |= v32 != 48;
        if ((v27 & 1) != 0)
        {
LABEL_66:
          uint64_t v27 = (char)*v31 < 56;
          goto LABEL_67;
        }
      }

      else
      {
        v79[v28++] = v32;
        ++v30;
        if ((v27 & 1) != 0) {
          goto LABEL_66;
        }
      }

      uint64_t v27 = 0;
LABEL_67:
      if ((sub_1808D7748((char **)v78, *((unsigned __int16 *)a1 + 20), 10, &v77) & 1) != 0)
      {
        int v33 = 0;
        goto LABEL_69;
      }
    }
  }

  uint64_t v37 = (char *)++*(void *)v78;
  __int128 v38 = (v10 >> 2) & 1;
  if ((v10 & 0x80) != 0
    && (v39 = sub_1808D7818((char *)(v36 + 1), v6, v34, (v10 & 4) != 0), __int128 v38 = (v10 >> 2) & 1, (v39 & 1) != 0))
  {
    uint64_t v40 = 1;
  }

  else
  {
    uint64_t v46 = *v37;
    if ((v46 - 48) >= 0xA || v46 >= 64)
    {
      uint64_t v48 = v46 - 65;
      if (v48 >= 0x26 || ((0x3F0000003FuLL >> v48) & 1) == 0) {
        return a1[2];
      }
    }

    uint64_t v40 = 0;
  }

  v79[0] = 0;
  BOOL result = sub_1808D7AB8((char **)v78, v6, v15, v34, v40, v38, a4, v79, a1[2]);
  if (!v79[0])
  {
    uint64_t v49 = *(char **)v78;
    if ((v10 & 0x10) != 0 && *(char **)v78 != v6)
    {
      do
      {
        uint64_t v50 = 0LL;
        while (byte_180A378BC[v50] != *v49)
        {
          if (++v50 == 6) {
            goto LABEL_133;
          }
        }

        ++v49;
      }

      while (v49 != v6);
      LODWORD(v49) = (_DWORD)a2 + v14;
    }

  if (v58[9])
  {
    int v61 = L"; ";
    icu::UnicodeString::UnicodeString(&v75, 1LL, &v61);
    if ((v76 & 0x8000u) == 0) {
      int v56 = v76 >> 5;
    }
    else {
      int v56 = v77;
    }
    icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v56);
    icu::UnicodeString::~UnicodeString(v57, (icu::UnicodeString *)&v75);
    v60[0] = v61;
    return sub_180954CA8(v60, v58[9], a2);
  }

  return result;
}

uint64_t sub_1807FF53C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned int v3 = *(int **)(v2 + 16);
  if (*v3 > 0) {
    return 0LL;
  }
  int v6 = *(_DWORD *)(a1 + 1128);
  if (v6 < 99)
  {
    *(_DWORD *)(a1 + 1128) = v6 + 1;
    uint64_t result = icu::UMemory::operator new((icu::UMemory *)0xA0, a2);
    if (result)
    {
      uint64_t result = sub_1807FD388(result, a2);
      *(void *)(a1 + 8LL * *(int *)(a1 + 1128) + 328) = result;
    }

    else
    {
      *(void *)(a1 + 8LL * *(int *)(a1 + 1128) + 328) = 0LL;
      **(_DWORD **)(*(void *)(a1 + 8) + 16LL) = 7;
    }
  }

  else
  {
    *unsigned int v3 = 66051;
    uint64_t v7 = *(void *)(v2 + 24);
    if (!v7) {
      return 0LL;
    }
    uint64_t result = 0LL;
    *(void *)uint64_t v7 = *(void *)(a1 + 28);
    *(_WORD *)(v7 + 8) = 0;
    *(_WORD *)(v7 + 40) = 0;
  }

  return result;
}

double sub_1807FF5F8(uint64_t a1, int a2)
{
  if (a2 <= 3) {
    int v2 = 3;
  }
  else {
    int v2 = a2;
  }
  uint64_t v3 = *(int *)(a1 + 1128);
  uint64_t v4 = a1 + 8 * v3;
  uint64_t v5 = *(void *)(v4 + 320);
  int v6 = *(_DWORD *)(v5 + 40);
  if (!v6)
  {
LABEL_18:
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v16 = *(int **)(v15 + 16);
    if (*v16 <= 0)
    {
      int *v16 = 66048;
      uint64_t v17 = *(void *)(v15 + 24);
      if (v17)
      {
        double result = *(double *)(a1 + 28);
        *(double *)uint64_t v17 = result;
        *(_WORD *)(v17 + 8) = 0;
        *(_WORD *)(v17 + 40) = 0;
      }
    }

    return result;
  }

  int v7 = v3 - 1;
  if (v6 >= v2)
  {
    uint64_t v9 = a1 + 8 * v3 + 328;
    while (1)
    {
      *(void *)(v5 + 24) = *(void *)v9;
      *(void *)(*(void *)v9 + 8LL) = v5;
      uint64_t v5 = *(void *)(v9 - 16);
      int v6 = *(_DWORD *)(v5 + 40);
      if (!v6) {
        break;
      }
      v9 -= 8LL;
      --v7;
      if (v6 < v2)
      {
        LODWORD(v3) = v7 + 1;
        *(_DWORD *)(a1 + 1128) = v7 + 1;
        uint64_t v8 = (void *)(v9 - 8);
        goto LABEL_11;
      }
    }

    *(_DWORD *)(a1 + 1128) = v7;
    goto LABEL_18;
  }

  uint64_t v8 = (void *)(v4 + 320);
LABEL_11:
  if (a2 <= 2)
  {
    if (v6 != a2)
    {
      uint64_t v10 = *(void *)(a1 + 8);
      double v11 = *(int **)(v10 + 16);
      if (*v11 <= 0)
      {
        int *v11 = 66055;
        uint64_t v12 = *(void *)(v10 + 24);
        if (v12)
        {
          *(void *)uint64_t v12 = *(void *)(a1 + 28);
          *(_WORD *)(v12 + 8) = 0;
          *(_WORD *)(v12 + 40) = 0;
        }
      }
    }

    void *v8 = *(void *)(a1 + 8LL * (int)v3 + 328);
    *(_DWORD *)(a1 + 1128) = v7;
    uint64_t v13 = (void *)sub_1807FD518(v5);
    icu::UMemory::operator delete(v13);
  }

  return result;
}

double sub_1807FF734(uint64_t a1, uint64_t a2, uint64_t a3, icu::UnicodeSet *a4)
{
  uint64_t v8 = uhash_get(*(void *)(a1 + 1144), a2);
  if (v8)
  {
    uint64_t v12 = v8;
    if (a4)
    {
      icu::UnicodeSet::~UnicodeSet(a4);
      icu::UMemory::operator delete(v13);
    }

    *(void *)(a3 + 16) = *(void *)(v12 + 8);
    return result;
  }

  if (!a4)
  {
    unsigned int v14 = *(unsigned __int16 *)(a2 + 8);
    int v15 = (__int16)v14;
    int32_t v16 = v14 >> 5;
    if (v15 >= 0) {
      int32_t v17 = v16;
    }
    else {
      int32_t v17 = *(_DWORD *)(a2 + 12);
    }
    int v36 = "a";
    if (icu::UnicodeString::doCompare(a2, 0, v17, (uint64_t)"a", 0, -1))
    {
      unsigned int v19 = icu::UnicodeString::char32At((uint64_t *)&v36, (icu::UnicodeString *)a2, 0);
      uint64_t v21 = (icu::UnicodeSet *)((uint64_t (*)(icu::UMemory *__hidden, unint64_t))icu::UMemory::operator new)( (icu::UMemory *)0xC8,  v20);
      a4 = v21;
      if (v21)
      {
        unsigned int v22 = v19;
        unsigned int v23 = v19;
LABEL_14:
        icu::UnicodeSet::UnicodeSet(v21, v22, v23);
      }
    }

    else
    {
      uint64_t v21 = (icu::UnicodeSet *)icu::UMemory::operator new((uint64_t *)&v36, (icu::UMemory *)0xC8, v18);
      a4 = v21;
      if (v21)
      {
        unsigned int v22 = 0;
        unsigned int v23 = 1114111;
        goto LABEL_14;
      }
    }
  }

  uint64_t v24 = icu::UMemory::operator new(v10, (icu::UMemory *)0xA0, v9);
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = sub_1807FD388(v24, 1LL);
    *(void *)(v26 + 32) = a4;
    *(void *)(v26 + 8) = a3;
    *(void *)(a3 + 16) = v25;
    icu::UnicodeString::operator=((UChar **)(v26 + 48), (UChar **)a2);
    icu::UVector::addElement( *(icu::UVector **)(*(void *)(a1 + 8) + 168LL),  v25,  *(UErrorCode **)(*(void *)(a1 + 8) + 16LL));
    uint64_t v27 = uprv_malloc(0x10uLL);
    uint64_t v30 = (icu::UnicodeString *)icu::UMemory::operator new(v29, (icu::UMemory *)0x40, v28);
    if (v30)
    {
      uint64_t v31 = (uint64_t)v30;
      icu::UnicodeString::UnicodeString(v30, (UChar **)a2);
      if (a4 && v27)
      {
        void *v27 = v31;
        v27[1] = v25;
        uhash_put(*(void *)(a1 + 1144), v31, (uint64_t)v27, *(int **)(*(void *)(a1 + 8) + 16LL));
        return result;
      }

      (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
    }

    uprv_free(v27);
    if (a4)
    {
      icu::UnicodeSet::~UnicodeSet(a4);
      icu::UMemory::operator delete(v32);
    }
  }

  uint64_t v33 = *(void *)(a1 + 8);
  unint64_t v34 = *(int **)(v33 + 16);
  if (*v34 <= 0)
  {
    *unint64_t v34 = 7;
    uint64_t v35 = *(void *)(v33 + 24);
    if (v35)
    {
      double result = *(double *)(a1 + 28);
      *(double *)uint64_t v35 = result;
      *(_WORD *)(v35 + 8) = 0;
      *(_WORD *)(v35 + 40) = 0;
    }
  }

  return result;
}

BOOL sub_1807FF934(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 8);
  if ((v2 & 1) != 0) {
    return *(_WORD *)(a2 + 8) & 1;
  }
  if ((v2 & 0x8000) != 0) {
    int v3 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v3 = v2 >> 5;
  }
  uint64_t v4 = 0LL;
  unsigned int v5 = *(unsigned __int16 *)(a2 + 8);
  if ((v5 & 0x8000u) == 0) {
    unsigned int v6 = v5 >> 5;
  }
  else {
    unsigned int v6 = *(_DWORD *)(a2 + 12);
  }
  if ((v5 & 1) == 0 && v3 == v6) {
    return icu::UnicodeString::doEquals((icu::UnicodeString *)a1, (const icu::UnicodeString *)a2, v3);
  }
  return v4;
}

void sub_1807FF9A0(uint64_t a1, unint64_t a2)
{
  uint64_t v21 = off_18970F400;
  unint64_t v22 = 0xFFFFFFFF00000000LL;
  unsigned int v2 = (uint64_t *)**(unsigned int **)(*(void *)(a1 + 8) + 16LL);
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  LODWORD(v22) = *(_DWORD *)(a1 + 16);
  UErrorCode v20 = U_ZERO_ERROR;
  unsigned int v5 = (icu::UnicodeSet *)icu::UMemory::operator new(v2, (icu::UMemory *)0xC8, a2);
  unsigned int v6 = v5;
  if (!v5)
  {
    UErrorCode v8 = U_MEMORY_ALLOCATION_ERROR;
    UErrorCode v20 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_9;
  }

  icu::UnicodeSet::UnicodeSet(v5);
  icu::UnicodeSet::applyPatternIgnoreSpace( v7,  *(const icu::UnicodeString **)(*(void *)(a1 + 8) + 32LL),  (icu::ParsePosition *)&v21,  *(const icu::SymbolTable **)(a1 + 1136),  &v20);
  UErrorCode v8 = v20;
  if (v20 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_9:
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v13 = *(UErrorCode **)(v12 + 16);
    if (*(int *)v13 <= 0)
    {
      *uint64_t v13 = v8;
      uint64_t v14 = *(void *)(v12 + 24);
      if (v14)
      {
        *(void *)uint64_t v14 = *(void *)(a1 + 28);
        *(_WORD *)(v14 + 8) = 0;
        *(_WORD *)(v14 + 40) = 0;
      }
    }

    if (v6) {
      goto LABEL_13;
    }
    goto LABEL_14;
  }

  if (icu::UnicodeSet::isEmpty(v6))
  {
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = *(int **)(v9 + 16);
    if (*v10 <= 0)
    {
      int *v10 = 66059;
      uint64_t v11 = *(void *)(v9 + 24);
      if (v11)
      {
        *(void *)uint64_t v11 = *(void *)(a1 + 28);
        *(_WORD *)(v11 + 8) = 0;
        *(_WORD *)(v11 + 40) = 0;
      }
    }

uint64_t sub_1807FFB74@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)(a2 + 56) = 0LL;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)a2 = off_18971B688;
  *(_WORD *)(a2 + 8) = 2;
  unsigned int v3 = *(unsigned __int16 *)(this + 8);
  int v4 = (__int16)v3;
  int v5 = v3 >> 5;
  if (v4 >= 0) {
    int v6 = v5;
  }
  else {
    int v6 = *(_DWORD *)(this + 12);
  }
  if (v6 >= 1)
  {
    int v7 = (icu::UnicodeString *)this;
    int v8 = 0;
    do
    {
      unsigned int v9 = icu::UnicodeString::char32At(v7, v8);
      if (!u_hasBinaryProperty(v9, UCHAR_PATTERN_WHITE_SPACE)) {
        icu::UnicodeString::append(a2, v9);
      }
      this = icu::UnicodeString::moveIndex32(v7, v8, 1);
      int v8 = this;
    }

    while ((int)this < v6);
  }

  return this;
}

uint64_t sub_1807FFC38(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 20);
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 32LL);
  else {
    int v4 = (uint64_t *)(*(unsigned __int16 *)(v3 + 8) >> 5);
  }
  if (v2 < (int)v4)
  {
    int v5 = icu::UnicodeString::char32At(v4, (icu::UnicodeString *)v3, v2);
    uint64_t v6 = *(void *)(a1 + 8);
    if (v5 >> 11 == 27)
    {
      int v7 = *(int **)(v6 + 16);
      if (*v7 <= 0)
      {
        *int v7 = 12;
        uint64_t v8 = *(void *)(v6 + 24);
        if (v8)
        {
          *(void *)uint64_t v8 = *(void *)(a1 + 28);
          *(_WORD *)(v8 + 8) = 0;
          *(_WORD *)(v8 + 40) = 0;
        }
      }

      return 0xFFFFFFFFLL;
    }

    unsigned int v9 = v5;
    *(_DWORD *)(a1 + 20) = icu::UnicodeString::moveIndex32(*(icu::UnicodeString **)(v6 + 32), *(_DWORD *)(a1 + 20), 1);
    if ((int)v9 > 132)
    {
      if ((_DWORD)v9 != 133 && (_DWORD)v9 != 8232) {
        goto LABEL_26;
      }
    }

    else if ((_DWORD)v9 == 10)
    {
      if (*(_DWORD *)(a1 + 36) == 13) {
        goto LABEL_27;
      }
    }

    else if ((_DWORD)v9 != 13)
    {
LABEL_26:
      ++*(_DWORD *)(a1 + 32);
LABEL_27:
      *(_DWORD *)(a1 + 36) = (_DWORD)v9;
      return (uint64_t)v9;
    }

    unsigned int v11 = *(_DWORD *)(a1 + 28) + 1;
    *(void *)(a1 + 28) = v11;
    if (*(_BYTE *)(a1 + 24))
    {
      uint64_t v12 = *(void *)(a1 + 8);
      uint64_t v13 = *(int **)(v12 + 16);
      if (*v13 <= 0)
      {
        *uint64_t v13 = 66056;
        uint64_t v14 = *(void *)(v12 + 24);
        if (v14)
        {
          *(_DWORD *)uint64_t v14 = v11;
          *(_DWORD *)(v14 + 4) = 0;
          *(_WORD *)(v14 + 8) = 0;
          *(_WORD *)(v14 + 40) = 0;
        }
      }

      *(_BYTE *)(a1 + 24) = 0;
    }

    goto LABEL_27;
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_1807FFD84(uint64_t a1, int *a2)
{
  int v4 = (int *)(a1 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 20);
  uint64_t result = sub_1807FFC38(a1);
  *a2 = result;
  *((_BYTE *)a2 + 4) = 0;
  if ((_DWORD)result == 39)
  {
    uint64_t result = (uint64_t)icu::UnicodeString::char32At( *(uint64_t **)(a1 + 8),  *(icu::UnicodeString **)(*(void *)(a1 + 8) + 32LL),  *(_DWORD *)(a1 + 20));
    if ((_DWORD)result != 39)
    {
      BOOL v7 = *(_BYTE *)(a1 + 24) == 0;
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a1 + 24) == 0;
      if (v7) {
        int v14 = 40;
      }
      else {
        int v14 = 41;
      }
      *a2 = v14;
      *((_BYTE *)a2 + 4) = 0;
      return result;
    }

    uint64_t result = sub_1807FFC38(a1);
    *a2 = result;
    *((_BYTE *)a2 + 4) = 1;
  }

  if (*(_BYTE *)(a1 + 24))
  {
    *((_BYTE *)a2 + 4) = 1;
  }

  else
  {
    if ((_DWORD)result == 35)
    {
      int v6 = *(_DWORD *)(a1 + 16);
      do
      {
        uint64_t result = sub_1807FFC38(a1);
        *a2 = result;
        BOOL v7 = (result + 1) > 0xE || ((1 << (result + 1)) & 0x4801) == 0;
        BOOL v8 = !v7 || (_DWORD)result == 8232;
      }

      while (!v8 && (_DWORD)result != 133);
      if (v6 < *v4 - 1)
      {
        do
          icu::UnicodeString::setCharAt((icu::UnicodeString *)(*(void *)(a1 + 8) + 40LL), v6++, 32);
        while (v6 < *(_DWORD *)(a1 + 20) - 1);
        uint64_t result = *a2;
      }
    }

    if ((_DWORD)result == 92)
    {
      *((_BYTE *)a2 + 4) = 1;
      int v9 = *(_DWORD *)(a1 + 20);
      uint64_t result = icu::UnicodeString::unescapeAt(*(icu::UnicodeString **)(*(void *)(a1 + 8) + 32LL), v4);
      *a2 = result;
      int v10 = *(_DWORD *)(a1 + 20) - v9;
      if (!v10)
      {
        uint64_t v11 = *(void *)(a1 + 8);
        uint64_t v12 = *(int **)(v11 + 16);
        if (*v12 <= 0)
        {
          *uint64_t v12 = 66049;
          uint64_t v13 = *(void *)(v11 + 24);
          if (v13)
          {
            *(void *)uint64_t v13 = *(void *)(a1 + 28);
            *(_WORD *)(v13 + 8) = 0;
            *(_WORD *)(v13 + 40) = 0;
          }
        }
      }

      *(_DWORD *)(a1 + 32) += v10;
    }
  }

  return result;
}

double sub_1807FFF3C(uint64_t a1)
{
  if (**(int **)(*(void *)(a1 + 8) + 16LL) <= 0)
  {
    int v2 = (int *)(a1 + 40);
    sub_1807FFD84(a1, (int *)(a1 + 40));
    if (**(int **)(*(void *)(a1 + 8) + 16LL) <= 0)
    {
      LOWORD(v4) = 1;
      while (1)
      {
        int v5 = (char *)&unk_1809F22C8 + 8 * (unsigned __int16)v4 + 7;
        while (2)
        {
          unsigned int v6 = *(v5 - 3);
          if (v6 > 0x7E || *(_BYTE *)(a1 + 44) || *v2 != v6)
          {
            switch(*(v5 - 3))
            {
              case 0xFC:
                if (*v2 != -1) {
                  goto LABEL_20;
                }
                break;
              case 0xFD:
                if (!*(_BYTE *)(a1 + 44) || (*v2 | 0x20) != 0x70) {
                  goto LABEL_20;
                }
                break;
              case 0xFE:
                if (!*(_BYTE *)(a1 + 44)) {
                  goto LABEL_20;
                }
                break;
              case 0xFF:
                break;
              default:
                if ((char)v6 > -17
                  || *(_BYTE *)(a1 + 44)
                  || *v2 == -1
                  || !icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 200LL * (v6 - 128) + 1152), *v2))
                {
LABEL_20:
                  v5 += 8;
                  continue;
                }

                break;
            }
          }

          break;
        }

        __int16 v7 = *(v5 - 1);
        if (*(v5 - 1))
        {
          int v8 = *(_DWORD *)(a1 + 320);
          int v9 = v8 + 1;
          *(_DWORD *)(a1 + 320) = v8 + 1;
          if (v8 >= 99)
          {
            uint64_t v10 = *(void *)(a1 + 8);
            uint64_t v11 = *(int **)(v10 + 16);
            if (*v11 <= 0)
            {
              int *v11 = 66048;
              uint64_t v12 = *(void *)(v10 + 24);
              if (v12)
              {
                double result = *(double *)(a1 + 28);
                *(double *)uint64_t v12 = result;
                *(_WORD *)(v12 + 8) = 0;
                *(_WORD *)(v12 + 40) = 0;
              }
            }

            *(_DWORD *)(a1 + 320) = v8;
            int v9 = v8;
          }

          *(_WORD *)(a1 + 2LL * v9 + 120) = v7;
        }

        if (*v5) {
          sub_1807FFD84(a1, v2);
        }
        int v4 = *(v5 - 2);
        if (v4 == 255)
        {
          uint64_t v14 = *(int *)(a1 + 320);
          int v4 = *(unsigned __int16 *)(a1 + 2 * v14 + 120);
          *(_DWORD *)(a1 + 320) = v14 - 1;
          uint64_t v13 = *(void **)(a1 + 8);
          if ((int)v14 <= 0)
          {
            int v15 = (int *)v13[2];
            if (*v15 <= 0)
            {
              *int v15 = 66048;
              uint64_t v16 = v13[3];
              if (v16)
              {
                double result = *(double *)(a1 + 28);
                *(double *)uint64_t v16 = result;
                *(_WORD *)(v16 + 8) = 0;
                *(_WORD *)(v16 + 40) = 0;
              }
            }

            *(_DWORD *)(a1 + 320) = v14;
          }
        }

        else
        {
          uint64_t v13 = *(void **)(a1 + 8);
        }

        uint64_t v17 = (int *)v13[2];
        int v18 = *v17;
        if (*v17 > 0 || v4 == 0) {
          goto LABEL_45;
        }
      }

      uint64_t v13 = *(void **)(a1 + 8);
      uint64_t v17 = (int *)v13[2];
      int v18 = *v17;
LABEL_45:
      if (v18 <= 0 && !v13[14])
      {
        *uint64_t v17 = 66051;
        uint64_t v20 = v13[3];
        if (v20)
        {
          double result = *(double *)(a1 + 28);
          *(double *)uint64_t v20 = result;
          *(_WORD *)(v20 + 8) = 0;
          *(_WORD *)(v20 + 40) = 0;
        }
      }
    }
  }

  return result;
}

uint64_t sub_1808001B4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 3152);
}

uint64_t sub_1808001BC(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  *(void *)a1 = off_18970FEB0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  *(void *)(a1 + 48) = off_18971B688;
  *(_WORD *)(a1 + 56) = 2;
  int v4 = (icu::UnicodeSet *)(a1 + 1152);
  for (uint64_t i = 1152LL; i != 3152; i += 200LL)
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + i));
  *(_BYTE *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 28) = 1LL;
  *(_DWORD *)(a1 + 36) = 0;
  *(void *)(a1 + 112) = 0LL;
  *(_WORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0LL;
  *(void *)(a1 + 3152) = 0LL;
  *(_DWORD *)(a1 + 1128) = 0;
  *(_DWORD *)(a1 + 113icu::UVector32::~UVector32(this + 1) = 0;
  *(_OWORD *)(a1 + 1136) = 0u;
  if (**(int **)(a2 + 16) <= 0)
  {
    icu::UnicodeString::UnicodeString((uint64_t)v23, (uint64_t)L"[^[\\p{Z}\\u0020-\\u007f]-[\\p{L}]-[\\p{N}]]");
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v22, (const icu::UnicodeString *)v23, *(UErrorCode **)(a2 + 16));
    icu::UnicodeSet::operator=((icu::UnicodeSet *)(a1 + 1752), (const icu::UnicodeSet *)v22);
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v22);
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v23);
    __int16 v7 = icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 1952), 9u, 0xDu);
    int v8 = icu::UnicodeSet::add(v7, 0x20u);
    int v9 = icu::UnicodeSet::add(v8, 0x85u);
    uint64_t v10 = icu::UnicodeSet::add(v9, 0x200Eu, 0x200Fu);
    icu::UnicodeSet::add(v10, 0x2028u, 0x2029u);
    icu::UnicodeString::UnicodeString((uint64_t)v23, (uint64_t)L"[_\\p{L}\\p{N}]");
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v22, (const icu::UnicodeString *)v23, *(UErrorCode **)(a2 + 16));
    icu::UnicodeSet::operator=((icu::UnicodeSet *)(a1 + 1352), (const icu::UnicodeSet *)v22);
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v22);
    uint64_t v12 = icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v23);
    icu::UnicodeString::UnicodeString((uint64_t)v12, (uint64_t)L"[_\\p{L}]");
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v22, (const icu::UnicodeString *)v23, *(UErrorCode **)(a2 + 16));
    icu::UnicodeSet::operator=((icu::UnicodeSet *)(a1 + 1552), (const icu::UnicodeSet *)v22);
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v22);
    uint64_t v14 = icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v23);
    icu::UnicodeString::UnicodeString((uint64_t)v14, (uint64_t)"[");
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v22, (const icu::UnicodeString *)v23, *(UErrorCode **)(a2 + 16));
    icu::UnicodeSet::operator=(v4, (const icu::UnicodeSet *)v22);
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v22);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v23);
    uint64_t v17 = *(uint64_t **)(a2 + 16);
    if (*(_DWORD *)v17 == 1)
    {
      int v18 = 66058;
LABEL_6:
      *(_DWORD *)uint64_t v17 = v18;
      return a1;
    }

    uint64_t v20 = icu::UMemory::operator new(v17, (icu::UMemory *)0x70, v16);
    if (!v20)
    {
      *(void *)(a1 + 1136) = 0LL;
      uint64_t v17 = *(uint64_t **)(a2 + 16);
      int v18 = 7;
      goto LABEL_6;
    }

    *(void *)(a1 + 1136) = sub_18080335C(v20, a1, *(void *)(a2 + 32), *(void *)(a2 + 16));
    uint64_t v21 = uhash_open((uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0LL, *(int **)(a2 + 16));
    *(void *)(a1 + 1144) = v21;
  }

  return a1;
}

void sub_180800478(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uprv_free(a1);
}

uint64_t sub_1808004B0(uint64_t a1)
{
  *(void *)a1 = off_18970FEB0;
  uint64_t v2 = *(void *)(a1 + 1136);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(_BYTE **)(a1 + 1144);
  if (v3)
  {
    uhash_close(v3);
    *(void *)(a1 + 1144) = 0LL;
  }

  int v4 = *(_DWORD *)(a1 + 1128);
  if (v4 >= 1)
  {
    do
    {
      uint64_t v5 = *(void *)(a1 + 8LL * v4 + 328);
      if (v5)
      {
        unsigned int v6 = (void *)sub_1807FD518(v5);
        icu::UMemory::operator delete(v6);
        int v4 = *(_DWORD *)(a1 + 1128);
      }

      BOOL v7 = __OFSUB__(v4--, 1);
      *(_DWORD *)(a1 + 1128) = v4;
    }

    while (!((v4 < 0) ^ v7 | (v4 == 0)));
  }

  for (uint64_t i = 2952LL; i != 952; i -= 200LL)
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + i));
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)(a1 + 48));
  return a1;
}

void sub_180800554(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1808004B0(a1);
  icu::UMemory::operator delete(v1);
}

BOOL sub_180800568(uint64_t a1, unint64_t a2)
{
  uint64_t v88 = *MEMORY[0x1895F89C0];
  BOOL result = 0LL;
  switch((int)a2)
  {
    case 0:
      uint64_t v4 = *(void *)(a1 + 8);
      uint64_t v5 = *(int **)(v4 + 16);
      if (*v5 > 0) {
        return 0LL;
      }
      int v6 = 9;
      goto LABEL_62;
    case 1:
      uint64_t v8 = sub_1808010D0(a1, 0LL);
      uint64_t v9 = v8;
      unsigned int v83 = "a";
      icu::UnicodeString::UnicodeString(v87, 1LL, &v83);
      sub_180801188(a1, (uint64_t)v87, v9, 0LL);
      icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v87);
      goto LABEL_45;
    case 2:
      double v11 = sub_1807FF5F8(a1, 1);
      uint64_t v12 = *(int *)(a1 + 1128);
      uint64_t v13 = *(void *)(a1 + 328 + 8LL * ((int)v12 - 2));
      uint64_t v14 = *(void *)(a1 + 328 + 8LL * ((int)v12 - 1));
      uint64_t v15 = *(void *)(a1 + 328 + 8 * v12);
      *(_DWORD *)(v15 + 112) = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v15 + 116) = *(_DWORD *)(a1 + 16);
      (*(void (**)(void, double))(**(void **)(*(void *)(a1 + 8) + 32LL) + 24LL))( *(void *)(*(void *)(a1 + 8) + 32LL),  v11);
      *(void *)(v14 + 16) = v15;
      *(void *)(v15 + 8) = v14;
      (*(void (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 1136) + 48LL))( *(void *)(a1 + 1136),  v14 + 48,  v14,  *(void *)(*(void *)(a1 + 8) + 16LL));
      uint64_t v16 = *(void *)(a1 + 8);
      if (**(int **)(v16 + 16) >= 1)
      {
        uint64_t v17 = *(void *)(v16 + 24);
        if (v17)
        {
          *(void *)uint64_t v17 = *(void *)(a1 + 28);
          *(_WORD *)(v17 + 8) = 0;
          *(_WORD *)(v17 + 40) = 0;
        }
      }

      int v18 = (void *)sub_1807FD518(v13);
      icu::UMemory::operator delete(v18);
      *(_DWORD *)(a1 + 1128) -= 3;
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 3:
      sub_1807FF5F8(a1, 1);
      uint64_t v19 = *(void *)(a1 + 8);
      uint64_t v20 = *(void *)(a1 + 8LL * *(int *)(a1 + 1128) + 328);
      if (!*(_BYTE *)(a1 + 1133)) {
        goto LABEL_17;
      }
      uint64_t v21 = sub_1808010D0(a1, 6uLL);
      uint64_t v22 = sub_1808010D0(a1, 8uLL);
      uint64_t v23 = *(int *)(a1 + 1128) - 2LL;
      *(_DWORD *)(a1 + 1128) = v23;
      *(void *)(v22 + 16) = v20;
      *(void *)(v22 + 24) = v21;
      *(void *)(a1 + 8 * v23 + 328) = v22;
      *(_DWORD *)(v21 + 124) = *(_DWORD *)(a1 + 3152);
      *(_BYTE *)(v21 + 128) = 1;
      uint64_t v19 = *(void *)(a1 + 8);
      uint64_t v20 = v22;
LABEL_17:
      *(_BYTE *)(v20 + 129) = 1;
      if (*(_BYTE *)(v19 + 88) && !*(_BYTE *)(a1 + 1134)) {
        *(_BYTE *)(v20 + 130) = 1;
      }
      if (*(_BYTE *)(a1 + 1132)) {
        uint64_t v24 = (uint64_t *)(v19 + 56);
      }
      else {
        uint64_t v24 = *(uint64_t **)(v19 + 80);
      }
      uint64_t v64 = *v24;
      if (!*v24) {
        goto LABEL_93;
      }
      uint64_t v65 = sub_1808010D0(a1, 9uLL);
      if (**(int **)(*(void *)(a1 + 8) + 16LL) <= 0)
      {
        *(void *)(v65 + 16) = v64;
        *(void *)(v64 + 8) = v65;
        *(void *)(v65 + 24) = v20;
        *(void *)(v20 + 8) = v65;
        uint64_t v20 = v65;
LABEL_93:
        *uint64_t v24 = v20;
        *(_DWORD *)(a1 + 113icu::UVector32::~UVector32(this + 1) = 0;
        *(_DWORD *)(a1 + 1128) = 0;
      }

      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 4:
      uint64_t v25 = *(void *)(a1 + 8LL * *(int *)(a1 + 1128) + 328);
      if (v25 && *(_DWORD *)v25 == 2)
      {
        *(_DWORD *)(v25 + 116) = *(_DWORD *)(a1 + 16);
        (*(void (**)(void, void))(**(void **)(*(void *)(a1 + 8) + 32LL) + 24LL))( *(void *)(*(void *)(a1 + 8) + 32LL),  (*(_DWORD *)(v25 + 112) + 1));
        *(void *)(v25 + 16) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 1136) + 40LL))( *(void *)(a1 + 1136),  v25 + 48);
      }

      else
      {
        uint64_t v52 = *(void *)(a1 + 8);
        __int128 v53 = *(int **)(v52 + 16);
        if (*v53 <= 0)
        {
          int v54 = 66048;
LABEL_77:
          int *v53 = v54;
          uint64_t v55 = *(void *)(v52 + 24);
          if (v55)
          {
            *(void *)uint64_t v55 = *(void *)(a1 + 28);
            *(_WORD *)(v55 + 8) = 0;
            *(_WORD *)(v55 + 40) = 0;
          }
        }
      }

      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 5:
      return result;
    case 6:
      sub_1807FF5F8(a1, 4);
      uint64_t v26 = *(int *)(a1 + 1128);
      *(_DWORD *)(a1 + 1128) = v26 - 1;
      uint64_t v27 = *(void *)(a1 + 8 * v26 + 328);
      uint64_t v28 = a1;
      unint64_t v29 = 8LL;
      goto LABEL_71;
    case 7:
    case 12:
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 8:
      sub_1807FF5F8(a1, 4);
      uint64_t v30 = *(int *)(a1 + 1128);
      *(_DWORD *)(a1 + 1128) = v30 - 1;
      uint64_t v27 = *(void *)(a1 + 8 * v30 + 328);
      uint64_t v28 = a1;
      unint64_t v29 = 9LL;
      goto LABEL_71;
    case 9:
      sub_1807FF5F8(a1, 2);
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 10:
      sub_1808010D0(a1, 7uLL);
      ++*(_DWORD *)(a1 + 3152);
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 11:
      uint64_t v31 = a1;
      unint64_t v32 = 15LL;
      goto LABEL_54;
    case 13:
      *(_BYTE *)(a1 + 1134) = 1;
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 14:
      memset(v87, 0, 64);
      icu::UnicodeString::UnicodeString( (icu::UnicodeString *)v87,  *(const icu::UnicodeString **)(*(void *)(a1 + 8) + 32LL),  *(_DWORD *)(a1 + 3156),  (*(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 3156)));
      unsigned int v82 = L"chain";
      icu::UnicodeString::UnicodeString(v84, 1LL, &v82);
      if ((v87[2] & 1) != 0)
      {
        unint64_t v35 = v85;
        int v36 = v85 & 1;
      }

      else
      {
        if (SLOWORD(v87[2]) >= 0) {
          int v33 = LOWORD(v87[2]) >> 5;
        }
        else {
          int v33 = v87[3];
        }
        if ((v85 & 0x8000u) == 0) {
          unint64_t v34 = v85 >> 5;
        }
        else {
          unint64_t v34 = v86;
        }
        if ((v85 & 1) != 0 || v33 != (_DWORD)v34)
        {
          icu::UnicodeString::~UnicodeString((void *)v34, (icu::UnicodeString *)v84);
          goto LABEL_83;
        }

        int v36 = icu::UnicodeString::doEquals((icu::UnicodeString *)v87, (const icu::UnicodeString *)v84, v33);
      }

      icu::UnicodeString::~UnicodeString((void *)v35, (icu::UnicodeString *)v84);
      if (v36)
      {
        int v56 = *(_BYTE **)(a1 + 8);
        v56[88] = 1;
        goto LABEL_101;
      }

uint64_t sub_1808010D0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(int **)(v2 + 16);
  if (*v3 > 0) {
    return 0LL;
  }
  int v6 = *(_DWORD *)(a1 + 1128);
  *(_DWORD *)(a1 + 1128) = v6 + 1;
  if (v6 < 99)
  {
    uint64_t result = icu::UMemory::operator new((icu::UMemory *)0xA0, a2);
    if (result)
    {
      uint64_t result = sub_1807FD388(result, a2);
      *(void *)(a1 + 8LL * *(int *)(a1 + 1128) + 328) = result;
      return result;
    }

    *(void *)(a1 + 8LL * *(int *)(a1 + 1128) + 328) = 0LL;
    uint64_t v3 = *(int **)(*(void *)(a1 + 8) + 16LL);
    int v8 = 7;
  }

  else
  {
    uint64_t v7 = *(void *)(v2 + 24);
    if (v7)
    {
      *(void *)uint64_t v7 = *(void *)(a1 + 28);
      *(_WORD *)(v7 + 8) = 0;
      *(_WORD *)(v7 + 40) = 0;
    }

    uint64_t result = 0LL;
    int v8 = 66048;
  }

  *uint64_t v3 = v8;
  return result;
}

double sub_180801188(uint64_t a1, uint64_t a2, uint64_t a3, icu::UnicodeSet *a4)
{
  uint64_t v8 = uhash_get(*(void *)(a1 + 1144), a2);
  if (v8)
  {
    uint64_t v12 = v8;
    if (a4)
    {
      icu::UnicodeSet::~UnicodeSet(a4);
      icu::UMemory::operator delete(v13);
    }

    *(void *)(a3 + 16) = *(void *)(v12 + 8);
    return result;
  }

  if (!a4)
  {
    unsigned int v14 = *(unsigned __int16 *)(a2 + 8);
    int v15 = (__int16)v14;
    int32_t v16 = v14 >> 5;
    if (v15 >= 0) {
      int32_t v17 = v16;
    }
    else {
      int32_t v17 = *(_DWORD *)(a2 + 12);
    }
    uint64_t v37 = "a";
    if (icu::UnicodeString::doCompare(a2, 0, v17, (uint64_t)"a", 0, -1))
    {
      unsigned int v19 = icu::UnicodeString::char32At((uint64_t *)&v37, (icu::UnicodeString *)a2, 0);
      uint64_t v22 = icu::UMemory::operator new(v21, (icu::UMemory *)0xC8, v20);
      a4 = (icu::UnicodeSet *)v22;
      if (v22)
      {
        unsigned int v23 = v19;
        unsigned int v24 = v19;
LABEL_14:
        icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v22, v23, v24);
      }
    }

    else
    {
      uint64_t v22 = icu::UMemory::operator new((uint64_t *)&v37, (icu::UMemory *)0xC8, v18);
      a4 = (icu::UnicodeSet *)v22;
      if (v22)
      {
        unsigned int v23 = 0;
        unsigned int v24 = 1114111;
        goto LABEL_14;
      }
    }
  }

  uint64_t v25 = icu::UMemory::operator new(v10, (icu::UMemory *)0xA0, v9);
  if (v25)
  {
    uint64_t v26 = v25;
    uint64_t v27 = sub_1807FD388(v25, 1LL);
    *(void *)(v27 + 32) = a4;
    *(void *)(v27 + 8) = a3;
    *(void *)(a3 + 16) = v26;
    icu::UnicodeString::operator=((UChar **)(v27 + 48), (UChar **)a2);
    icu::UVector::addElement( *(icu::UVector **)(*(void *)(a1 + 8) + 104LL),  v26,  *(UErrorCode **)(*(void *)(a1 + 8) + 16LL));
    uint64_t v28 = uprv_malloc(0x10uLL);
    uint64_t v31 = (icu::UnicodeString *)icu::UMemory::operator new(v30, (icu::UMemory *)0x40, v29);
    if (v31)
    {
      uint64_t v32 = (uint64_t)v31;
      icu::UnicodeString::UnicodeString(v31, (UChar **)a2);
      if (a4 && v28)
      {
        *uint64_t v28 = v32;
        v28[1] = v26;
        uhash_put(*(void *)(a1 + 1144), v32, (uint64_t)v28, *(int **)(*(void *)(a1 + 8) + 16LL));
        return result;
      }

      (*(void (**)(uint64_t))(*(void *)v32 + 8LL))(v32);
    }

    uprv_free(v28);
    if (a4)
    {
      icu::UnicodeSet::~UnicodeSet(a4);
      icu::UMemory::operator delete(v33);
    }
  }

  uint64_t v34 = *(void *)(a1 + 8);
  unint64_t v35 = *(int **)(v34 + 16);
  if (*v35 <= 0)
  {
    *unint64_t v35 = 7;
    uint64_t v36 = *(void *)(v34 + 24);
    if (v36)
    {
      double result = *(double *)(a1 + 28);
      *(double *)uint64_t v36 = result;
      *(_WORD *)(v36 + 8) = 0;
      *(_WORD *)(v36 + 40) = 0;
    }
  }

  return result;
}

void sub_180801388(uint64_t a1, unint64_t a2)
{
  uint64_t v21 = off_18970F400;
  unint64_t v22 = 0xFFFFFFFF00000000LL;
  uint64_t v2 = (uint64_t *)**(unsigned int **)(*(void *)(a1 + 8) + 16LL);
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  LODWORD(v22) = *(_DWORD *)(a1 + 16);
  UErrorCode v20 = U_ZERO_ERROR;
  uint64_t v5 = (icu::UnicodeSet *)icu::UMemory::operator new(v2, (icu::UMemory *)0xC8, a2);
  int v6 = v5;
  if (!v5)
  {
    UErrorCode v8 = U_MEMORY_ALLOCATION_ERROR;
    UErrorCode v20 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_9;
  }

  icu::UnicodeSet::UnicodeSet(v5);
  icu::UnicodeSet::applyPatternIgnoreSpace( v7,  *(const icu::UnicodeString **)(*(void *)(a1 + 8) + 32LL),  (icu::ParsePosition *)&v21,  *(const icu::SymbolTable **)(a1 + 1136),  &v20);
  UErrorCode v8 = v20;
  if (v20 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_9:
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v13 = *(UErrorCode **)(v12 + 16);
    if (*(int *)v13 <= 0)
    {
      *uint64_t v13 = v8;
      uint64_t v14 = *(void *)(v12 + 24);
      if (v14)
      {
        *(void *)uint64_t v14 = *(void *)(a1 + 28);
        *(_WORD *)(v14 + 8) = 0;
        *(_WORD *)(v14 + 40) = 0;
      }
    }

    if (v6) {
      goto LABEL_13;
    }
    goto LABEL_14;
  }

  if (icu::UnicodeSet::isEmpty(v6))
  {
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = *(int **)(v9 + 16);
    if (*v10 <= 0)
    {
      int *v10 = 66059;
      uint64_t v11 = *(void *)(v9 + 24);
      if (v11)
      {
        *(void *)uint64_t v11 = *(void *)(a1 + 28);
        *(_WORD *)(v11 + 8) = 0;
        *(_WORD *)(v11 + 40) = 0;
      }
    }

uint64_t sub_18080155C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)(a2 + 56) = 0LL;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)a2 = off_18971B688;
  *(_WORD *)(a2 + 8) = 2;
  unsigned int v3 = *(unsigned __int16 *)(result + 8);
  int v4 = (__int16)v3;
  unsigned int v5 = v3 >> 5;
  if (v4 >= 0) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = *(unsigned int *)(result + 12);
  }
  if ((int)v6 >= 1)
  {
    uint64_t v7 = result;
    int v8 = 0;
    uint64_t v9 = result + 10;
    do
    {
      int v10 = v8 + 1;
      unsigned int v11 = *(unsigned __int16 *)(v7 + 8);
      if ((v11 & 0x8000u) == 0) {
        unsigned int v12 = v11 >> 5;
      }
      else {
        unsigned int v12 = *(_DWORD *)(v7 + 12);
      }
      if (v12 <= v8)
      {
        UChar32 v14 = 0xFFFF;
      }

      else
      {
        if ((v11 & 2) != 0) {
          uint64_t v13 = v9;
        }
        else {
          uint64_t v13 = *(void *)(v7 + 24);
        }
        UChar32 v14 = *(unsigned __int16 *)(v13 + 2LL * v8);
        if (v14 == 35)
        {
          if (v10 < (int)v6)
          {
            uint64_t v15 = v10;
            UChar32 v14 = 35;
            ++v8;
            do
            {
              if (v14 == 10 || v14 == 13 || v14 == 133) {
                break;
              }
              UChar32 v14 = v12 <= v8++ ? 0xFFFF : *(unsigned __int16 *)(v13 + 2 * v15++);
            }

            while (v15 < v6);
            goto LABEL_26;
          }

          UChar32 v14 = 35;
        }
      }

      ++v8;
LABEL_26:
      double result = u_isISOControl(v14);
      if (!(_DWORD)result)
      {
        __int16 v16 = v14;
        double result = icu::UnicodeString::doAppend(a2, (uint64_t)&v16, 0, 1LL);
      }
    }

    while (v8 < (int)v6);
  }

  return result;
}

uint64_t sub_1808016B8(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 20);
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 32LL);
  else {
    int v4 = (uint64_t *)(*(unsigned __int16 *)(v3 + 8) >> 5);
  }
  if (v2 < (int)v4)
  {
    unsigned int v5 = icu::UnicodeString::char32At(v4, (icu::UnicodeString *)v3, v2);
    *(_DWORD *)(a1 + 20) = icu::UnicodeString::moveIndex32( *(icu::UnicodeString **)(*(void *)(a1 + 8) + 32LL),  *(_DWORD *)(a1 + 20),  1);
    if ((int)v5 > 132)
    {
      if ((_DWORD)v5 != 133 && (_DWORD)v5 != 8232) {
        goto LABEL_22;
      }
    }

    else if ((_DWORD)v5 == 10)
    {
      if (*(_DWORD *)(a1 + 36) == 13) {
        goto LABEL_23;
      }
    }

    else if ((_DWORD)v5 != 13)
    {
LABEL_22:
      ++*(_DWORD *)(a1 + 32);
LABEL_23:
      *(_DWORD *)(a1 + 36) = (_DWORD)v5;
      return (uint64_t)v5;
    }

    unsigned int v7 = *(_DWORD *)(a1 + 28) + 1;
    *(void *)(a1 + 28) = v7;
    if (*(_BYTE *)(a1 + 24))
    {
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = *(int **)(v8 + 16);
      if (*v9 <= 0)
      {
        *uint64_t v9 = 66056;
        uint64_t v10 = *(void *)(v8 + 24);
        if (v10)
        {
          *(_DWORD *)uint64_t v10 = v7;
          *(_DWORD *)(v10 + 4) = 0;
          *(_WORD *)(v10 + 8) = 0;
          *(_WORD *)(v10 + 40) = 0;
        }
      }

      *(_BYTE *)(a1 + 24) = 0;
    }

    goto LABEL_23;
  }

  return 0xFFFFFFFFLL;
}

uint64_t *sub_1808017C8(uint64_t a1, uint64_t a2)
{
  int v4 = (int *)(a1 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 20);
  double result = (uint64_t *)sub_1808016B8(a1);
  *(_DWORD *)a2 = (_DWORD)result;
  *(_BYTE *)(a2 + 4) = 0;
  if ((_DWORD)result == 39)
  {
    double result = icu::UnicodeString::char32At( *(uint64_t **)(a1 + 8),  *(icu::UnicodeString **)(*(void *)(a1 + 8) + 32LL),  *(_DWORD *)(a1 + 20));
    if ((_DWORD)result != 39)
    {
      BOOL v6 = *(_BYTE *)(a1 + 24) == 0;
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a1 + 24) == 0;
      if (v6) {
        int v13 = 40;
      }
      else {
        int v13 = 41;
      }
      *(_DWORD *)a2 = v13;
      *(_BYTE *)(a2 + 4) = 0;
      return result;
    }

    double result = (uint64_t *)sub_1808016B8(a1);
    *(_DWORD *)a2 = (_DWORD)result;
    *(_BYTE *)(a2 + 4) = 1;
  }

  if (*(_BYTE *)(a1 + 24))
  {
    *(_BYTE *)(a2 + 4) = 1;
  }

  else
  {
    if ((_DWORD)result == 35)
    {
      do
      {
        double result = (uint64_t *)sub_1808016B8(a1);
        *(_DWORD *)a2 = (_DWORD)result;
        BOOL v6 = ((_DWORD)result + 1) > 0xE || ((1 << ((_BYTE)result + 1)) & 0x4801) == 0;
        BOOL v7 = !v6 || (_DWORD)result == 8232;
      }

      while (!v7 && (_DWORD)result != 133);
    }

    if ((_DWORD)result == 92)
    {
      *(_BYTE *)(a2 + 4) = 1;
      int v8 = *(_DWORD *)(a1 + 20);
      double result = (uint64_t *)icu::UnicodeString::unescapeAt(*(icu::UnicodeString **)(*(void *)(a1 + 8) + 32LL), v4);
      *(_DWORD *)a2 = (_DWORD)result;
      int v9 = *(_DWORD *)(a1 + 20) - v8;
      if (!v9)
      {
        uint64_t v10 = *(void *)(a1 + 8);
        unsigned int v11 = *(int **)(v10 + 16);
        if (*v11 <= 0)
        {
          int *v11 = 66049;
          uint64_t v12 = *(void *)(v10 + 24);
          if (v12)
          {
            *(void *)uint64_t v12 = *(void *)(a1 + 28);
            *(_WORD *)(v12 + 8) = 0;
            *(_WORD *)(v12 + 40) = 0;
          }
        }
      }

      *(_DWORD *)(a1 + 32) += v9;
    }
  }

  return result;
}

uint64_t sub_180801938(uint64_t result)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (**(int **)(*(void *)(result + 8) + 16LL) <= 0)
  {
    uint64_t v1 = result;
    int v2 = (int *)(result + 40);
    double result = (uint64_t)sub_1808017C8(result, result + 40);
    uint64_t v3 = *(void **)(v1 + 8);
    if (*(int *)v3[2] <= 0)
    {
      LOWORD(v4) = 1;
      while (1)
      {
        unsigned int v5 = (char *)&unk_1809F26C4 + 8 * (unsigned __int16)v4 + 7;
        while (2)
        {
          unsigned int v6 = *(v5 - 3);
          if (v6 > 0x7E || *(_BYTE *)(v1 + 44) || *v2 != v6)
          {
            switch(*(v5 - 3))
            {
              case 0xFC:
                if (*v2 != -1) {
                  goto LABEL_20;
                }
                break;
              case 0xFD:
                if (!*(_BYTE *)(v1 + 44) || (*v2 | 0x20) != 0x70) {
                  goto LABEL_20;
                }
                break;
              case 0xFE:
                if (!*(_BYTE *)(v1 + 44)) {
                  goto LABEL_20;
                }
                break;
              case 0xFF:
                break;
              default:
                if ((char)v6 > -17
                  || *(_BYTE *)(v1 + 44)
                  || *v2 == -1
                  || !icu::UnicodeSet::contains((icu::UnicodeSet *)(v1 + 200LL * (v6 - 128) + 1152), *v2))
                {
LABEL_20:
                  v5 += 8;
                  continue;
                }

                break;
            }
          }

          break;
        }

        double result = sub_180800568(v1, *(unsigned int *)(v5 - 7));
        if (!(_DWORD)result) {
          break;
        }
        __int16 v7 = *(v5 - 1);
        if (*(v5 - 1))
        {
          int v8 = *(_DWORD *)(v1 + 320);
          int v9 = v8 + 1;
          *(_DWORD *)(v1 + 320) = v8 + 1;
          if (v8 >= 99)
          {
            uint64_t v10 = *(void *)(v1 + 8);
            unsigned int v11 = *(int **)(v10 + 16);
            if (*v11 <= 0)
            {
              int *v11 = 66048;
              uint64_t v12 = *(void *)(v10 + 24);
              if (v12)
              {
                *(void *)uint64_t v12 = *(void *)(v1 + 28);
                *(_WORD *)(v12 + 8) = 0;
                *(_WORD *)(v12 + 40) = 0;
              }
            }

            *(_DWORD *)(v1 + 320) = v8;
            int v9 = v8;
          }

          *(_WORD *)(v1 + 2LL * v9 + 120) = v7;
        }

        if (*v5) {
          double result = (uint64_t)sub_1808017C8(v1, (uint64_t)v2);
        }
        int v4 = *(v5 - 2);
        if (v4 == 255)
        {
          uint64_t v13 = *(int *)(v1 + 320);
          int v4 = *(unsigned __int16 *)(v1 + 2 * v13 + 120);
          *(_DWORD *)(v1 + 320) = v13 - 1;
          uint64_t v3 = *(void **)(v1 + 8);
          if ((int)v13 <= 0)
          {
            UChar32 v14 = (int *)v3[2];
            if (*v14 <= 0)
            {
              *UChar32 v14 = 66048;
              uint64_t v15 = v3[3];
              if (v15)
              {
                *(void *)uint64_t v15 = *(void *)(v1 + 28);
                *(_WORD *)(v15 + 8) = 0;
                *(_WORD *)(v15 + 40) = 0;
              }
            }

            *(_DWORD *)(v1 + 320) = v13;
          }
        }

        else
        {
          uint64_t v3 = *(void **)(v1 + 8);
        }
      }

      uint64_t v3 = *(void **)(v1 + 8);
    }

LABEL_45:
    if (!v3[7])
    {
      *(void *)(*(void *)(v1 + 8) + 56LL) = sub_1808010D0(v1, 0xAuLL);
      double result = sub_1808010D0(v1, 0LL);
      if (**(int **)(*(void *)(v1 + 8) + 16LL) <= 0)
      {
        uint64_t v17 = result;
        UErrorCode v20 = "a";
        icu::UnicodeString::UnicodeString(v21, 1LL, &v20);
        sub_180801188(v1, (uint64_t)v21, v17, 0LL);
        double result = (uint64_t)icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v21);
        uint64_t v19 = *(void *)(*(void *)(v1 + 8) + 56LL);
        *(void *)(v19 + 16) = v17;
        *(void *)(v17 + 8) = v19;
        *(_DWORD *)(v1 + 1128) -= 2;
      }
    }
  }

  return result;
}

      if (v33 >= v28 || v33 < 0 || v27[v33] != v32) {
        goto LABEL_83;
      }
      uint64_t v10 = v20[v33];
      if (HIBYTE(v20[v33]))
      {
        __int128 v41 = (v10 & 0xC0000000) != 0 || a8 != 0 || v16 >> 8 < 0x19 || v17 < 0x20000;
        if ((v10 & 0x20000000) == 0 && v41)
        {
          double result = (v12 + v13 + 2);
          unsigned int v11 = v20[v33];
        }

        goto LABEL_83;
      }
    }
  }

  double result = 0LL;
  uint64_t v45 = (v10 & 0xC0000000) != 0
     || a8 != 0
     || (a2 - 57344) >> 8 < 0x19
     || (a2 - 983040) < 0x20000;
  if ((v10 & 0x20000000) == 0 && v45)
  {
    double result = 2LL;
    goto LABEL_84;
  }

  return result;
}

    ++v18;
    __int16 v16 = this[10];
    uint64_t v17 = v30;
    if (v18 >= v16[2]) {
      goto LABEL_46;
    }
  }

  LODWORD(v30) = v17;
  if (!(_DWORD)v17) {
    return icu::UnicodeFilter::matches((uint64_t)this, (uint64_t)a2, a3, a4, a5);
  }
LABEL_47:
  if (v7 >= a4) {
    LODWORD(v30) = -(int)v30;
  }
  *a3 += v30;
  return 2LL;
}

      if (strict == -3) {
        return 65533;
      }
      else {
        return -1;
      }
    }

    if (((a00000000000000[v13] >> (v8 >> 5)) & 1) == 0)
    {
LABEL_43:
      if ((strict & 0x80000000) == 0) {
        return 21;
      }
      goto LABEL_45;
    }

    *puint64_t i = v11;
    double result = ((v8 & 0x3F) << 6) | ((_DWORD)v13 << 12) | v10;
    if (strict >= 1
      && result >> 4 >= 0xFDD
      && ((~result & 0xFFFE) == 0 || result >> 4 < 0xFDF))
    {
      return 0xFFFF;
    }
  }

  return result;
}

  *a6 = v24;
  sub_1808D5298((__int16 *)v47, 0xAu);
  uint64_t v27 = sub_1808D5994((uint64_t)v45, v44);
  sub_1808D5298(v45, 0xAu);
  if (v27) {
    double result = (uint64_t)sub_1808D5298(v44, 0xAu);
  }
  else {
    double result = (uint64_t)sub_1808D4C68(v44, v45);
  }
LABEL_49:
  if (v12 < 2)
  {
    unint64_t v29 = v45;
    uint64_t v30 = sub_1808D5994((uint64_t)v45, v44);
    if (v30) {
      unint64_t v29 = v44;
    }
    uint64_t v31 = (v22 & 1) == 0;
    *a5 = 0;
    if ((v22 & 1) != 0) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = -1;
    }
    while (1)
    {
      int v33 = sub_1808D56D0(v47, v46);
      uint64_t v34 = *a5;
      *a5 = v34 + 1;
      a3[v34] = v33 + 48;
      unint64_t v35 = sub_1808D5994((uint64_t)v47, v45);
      double result = sub_1808D5A3C((__int16 *)v47, v29, v46);
      sub_1808D5298((__int16 *)v47, 0xAu);
      sub_1808D5298(v45, 0xAu);
      if (v30) {
        sub_1808D5298(v44, 0xAu);
      }
    }

    if (v35 >= v31 || (int)result <= v32)
    {
      if (v35 < v31) {
        goto LABEL_80;
      }
      __int128 v41 = &a3[*a5];
      uint64_t v42 = *(v41 - 1);
      uint64_t v37 = v41 - 1;
      __int128 v38 = v42;
    }

    else
    {
      double result = sub_1808D5A3C((__int16 *)v47, (__int16 *)v47, v46);
      if ((result & 0x80000000) != 0) {
        goto LABEL_80;
      }
      uint64_t v36 = &a3[*a5];
      uint64_t v39 = *(v36 - 1);
      uint64_t v37 = v36 - 1;
      __int128 v38 = v39;
      if (!(_DWORD)result && (v38 & 1) == 0) {
        goto LABEL_80;
      }
    }

    *uint64_t v37 = v38 + 1;
    goto LABEL_80;
  }

  if (v12 != 2)
  {
    if (v12 != 3) {
      abort();
    }
    uint64_t v28 = a2;
    goto LABEL_79;
  }

  uint64_t v40 = -*a6;
  if (v40 <= a2)
  {
    if (v40 != a2)
    {
      uint64_t v28 = *a6 + a2;
LABEL_79:
      double result = sub_1808D4AD0(v28, a6, v47, v46, a3, a4, a5);
      goto LABEL_80;
    }

    sub_1808D5298(v46, 0xAu);
    double result = sub_1808D5A3C((__int16 *)v47, (__int16 *)v47, v46);
    if ((result & 0x80000000) == 0)
    {
      *a3 = 49;
      *a5 = 1;
      ++*a6;
      goto LABEL_80;
    }
  }

  else
  {
    *a6 = -a2;
  }

  *a5 = 0;
LABEL_80:
  a3[*a5] = 0;
  return result;
}

          __int128 v38 = a7;
LABEL_46:
          sub_1809113F8(v38, DateTimeInstance, ArgFromListByName, a9);
          goto LABEL_55;
        }

        uint64_t v43 = (const icu::MessagePattern *)(v14 + 3);
        switch(v21)
        {
          case 2:
            Double = icu::Formattable::getDouble(ArgFromListByName, a9);
            SubMessage = icu::ChoiceFormat::findSubMessage(v58, v43, Double);
            break;
          case 5:
            goto LABEL_67;
          case 4:
            __int128 v53 = icu::Formattable::getString(ArgFromListByName, a9);
            SubMessage = icu::SelectFormat::findSubMessage(v58, v43, v53, (const icu::UnicodeString *)a9, v54);
            break;
          case 3:
LABEL_67:
            if (!icu::Formattable::isNumeric(ArgFromListByName))
            {
LABEL_78:
              uint64_t v55 = 1LL;
LABEL_79:
              *a9 = v55;
              return (char *)icu::UnicodeString::~UnicodeString((void *)v55, (icu::UnicodeString *)v75);
            }

            if (v21 == 3) {
              uint64_t v47 = (uint64_t)v57;
            }
            else {
              uint64_t v47 = (uint64_t)v56;
            }
            PluralOffset = icu::MessagePattern::getPluralOffset(v58, (int)v43);
            BOOL v68 = 0u;
            memset(v69, 0, 208);
            sub_1809118F4((uint64_t)&v68, (int)v43, (uint64_t)v75, ArgFromListByName, a9, PluralOffset);
            uint64_t v49 = icu::Formattable::getDouble(ArgFromListByName, a9);
            uint64_t v51 = icu::PluralFormat::findSubMessage( v58,  v43,  v47,  (const icu::PluralFormat::PluralSelector *)&v68,  (int *)a9,  v49,  v50);
            icu::MessageFormat::formatComplexSubMessage(v11, v51, (uint64_t)&v68, (uint64_t)a4, (uint64_t)a5, a6, a7, a9);
            icu::UnicodeString::~UnicodeString(v52, (icu::UnicodeString *)((char *)&v69[8] + 8));
            icu::Formattable::~Formattable((icu::Formattable *)v69);
            goto LABEL_55;
          default:
            uint64_t v55 = 5LL;
            goto LABEL_79;
        }

        icu::MessageFormat::formatComplexSubMessage(v11, SubMessage, 0LL, (uint64_t)a4, (uint64_t)a5, a6, a7, a9);
      }

    sub_18095C78C((uint64_t)&v28);
  }

  else
  {
LABEL_43:
    sub_180958A24(a1);
    return 0LL;
  }

  return v20;
}

    uint64_t v47 = 0LL;
    memset(v46, 0, sizeof(v46));
    icu::UVector::UVector((uint64_t)v46, (uint64_t)uprv_deleteUObject, 0LL, (int *)a3);
    uint64_t v49 = 0u;
    uint64_t v52 = 0LL;
    uint64_t v51 = 0u;
    uint64_t v50 = 0u;
    uint64_t v48 = off_18971B688;
    LOWORD(v49) = 2;
    unsigned int v23 = *(unsigned __int16 *)(a1 + 80);
    if ((v23 & 0x8000) != 0) {
      unsigned int v24 = *(_DWORD *)(a1 + 84);
    }
    else {
      unsigned int v24 = v23 >> 5;
    }
    uint64_t v25 = icu::UnicodeString::doIndexOf(a1 + 72, 0xFFFFu, 0, v24);
    if ((v25 & 0x80000000) == 0)
    {
      uint64_t v26 = v25;
      do
      {
        if ((v49 & 0x8000u) == 0LL) {
          uint64_t v27 = (unsigned __int16)v49 >> 5;
        }
        else {
          uint64_t v27 = DWORD1(v49);
        }
        icu::UnicodeString::doReplace( (icu::UnicodeString *)&v48,  0LL,  v27,  (const icu::UnicodeString *)(a1 + 72),  0,  v26);
        if ((_DWORD)v26 == 2147483646)
        {
          if ((*(_WORD *)(a1 + 80) & 1) != 0) {
            uint64_t v28 = 2;
          }
          else {
            uint64_t v28 = *(_WORD *)(a1 + 80) & 0x1F;
          }
          *(_WORD *)(a1 + 80) = v28;
        }

        else
        {
          icu::UnicodeString::doReplace(a1 + 72, 0LL, (v26 + 1), 0LL, 0, 0LL);
        }

        if ((unsigned __int16)v49 >= 0x20u)
        {
          Instance = (void *)icu::Transliterator::createInstance((int)&v48, 0, (int)a2, a3);
          icu::UVector::adoptElement((icu::UVector *)v46, Instance, a3);
        }

        uint64_t v30 = *(icu::UVector **)(a1 + 136);
        if (*((_DWORD *)v30 + 2))
        {
          uint64_t v31 = (void *)icu::UVector::orphanElementAt(v30, 0);
          icu::UVector::adoptElement((icu::UVector *)v46, v31, a3);
        }

        else {
          uint64_t v32 = *(unsigned __int16 *)(a1 + 80) >> 5;
        }
        uint64_t v26 = icu::UnicodeString::doIndexOf(a1 + 72, 0xFFFFu, 0, v32);
      }

      while ((v26 & 0x80000000) == 0);
    }

    for (uint64_t i = (void *)icu::Transliterator::createInstance((int)a1 + 72, 0, (int)a2, a3);
          ;
          uint64_t i = (void *)icu::UVector::orphanElementAt(v34, 0))
    {
      icu::UVector::adoptElement((icu::UVector *)v46, i, a3);
LABEL_71:
      uint64_t v34 = *(icu::UVector **)(a1 + 136);
      if (!*((_DWORD *)v34 + 2)) {
        break;
      }
    }

    icu::UVector::setDeleter((icu::UVector *)v46, 0LL);
    uint64_t v36 = (uint64_t *)*(unsigned int *)a3;
    if ((int)v36 < 1)
    {
      uint64_t v3 = (icu::CompoundTransliterator *)icu::UMemory::operator new(v36, (icu::UMemory *)0x68, v35);
      if (!v3)
      {
        uint64_t v44 = 0;
        uint64_t v37 = 7LL;
        *a3 = U_MEMORY_ALLOCATION_ERROR;
        goto LABEL_86;
      }

      uint64_t v42 = *(icu::UnicodeSet **)(a1 + 144);
      if (v42) {
        uint64_t v43 = icu::UnicodeSet::clone(v42, v40, v41);
      }
      else {
        uint64_t v43 = 0LL;
      }
      icu::CompoundTransliterator::CompoundTransliterator(v3, (UChar **)(a1 + 8), (icu::UVector *)v46, v43, v14, a2, a3);
    }

    else
    {
      uint64_t v37 = DWORD2(v46[0]);
      if (SDWORD2(v46[0]) >= 1)
      {
        __int128 v38 = 0;
        do
        {
          uint64_t v39 = icu::UVector::elementAt((icu::UVector *)v46, v38);
          if (v39) {
            (*(void (**)(uint64_t))(*(void *)v39 + 8LL))(v39);
          }
          ++v38;
          uint64_t v37 = DWORD2(v46[0]);
        }

        while (v38 < SDWORD2(v46[0]));
      }

      uint64_t v3 = 0LL;
    }

    uint64_t v44 = 1;
LABEL_86:
    icu::UnicodeString::~UnicodeString((void *)v37, (icu::UnicodeString *)&v48);
    icu::UVector::~UVector((icu::UVector *)v46);
    icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)&v53);
    if ((v44 & 1) != 0) {
      return v3;
    }
    return 0LL;
  }

  int v9 = icu::Transliterator::createInstance((int)a1 + 72, 0, (int)a2, a3);
  unsigned int v11 = (uint64_t *)*(unsigned int *)a3;
  uint64_t v3 = (icu::CompoundTransliterator *)v9;
  uint64_t v12 = *(icu::UnicodeSet **)(a1 + 144);
  if (v12)
  {
    uint64_t v13 = icu::UnicodeSet::clone(v12, v10, v11);
    icu::Transliterator::adoptFilter(v3, v13);
  }

  return v3;
}

      *a4 = 7;
      return v12;
    }
  }

  if (icu::ICU_Utility::parseChar(a1, a2, 41))
  {
    UChar32 v14 = 0LL;
  }

  else
  {
    uint64_t v27 = sub_18099EA40(a1, a2, 1);
    if (!v27 || (UChar32 v14 = (uint64_t)v27, !icu::ICU_Utility::parseChar(a1, a2, 41)))
    {
      if (v8)
      {
        icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)(v8 + 25));
        icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)(v8 + 17));
        icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)(v8 + 9));
        icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)(v8 + 1));
        icu::UMemory::operator delete(v8);
      }

double sub_180801C60(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 52) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

uint64_t sub_180801C78(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = v2[2];
      int v4 = (void *)v2[3];
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
      }
      v2[2] = 0LL;
      icu::UMemory::operator delete(v2);
      uint64_t v2 = v4;
    }

    while (v4);
  }

  ucptrie_close(*(void *)(a1 + 32));
  umutablecptrie_close(*(void ***)(a1 + 24));
  return a1;
}

void sub_180801CE4(uint64_t a1, unint64_t a2)
{
  uint64_t v32 = (uint64_t *)*MEMORY[0x1895F89C0];
  uint64_t v3 = icu::UMemory::operator new(v32, (icu::UMemory *)0x20, a2);
  if (v3)
  {
    int v4 = sub_180802558(v3, *(UErrorCode **)(a1 + 8));
    *(void *)(a1 + 16) = v4;
    *int v4 = 0x10FFFF00000000LL;
    if (**(int **)(a1 + 8) <= 0)
    {
      uint64_t v5 = icu::UVector::elementAt(*(icu::UVector **)(*(void *)a1 + 168LL), 0);
      if (v5)
      {
        unsigned int v6 = (void *)v5;
        int v7 = 0;
        do
        {
          int v8 = (icu::UnicodeSet *)v6[4];
          int RangeCount = icu::UnicodeSet::getRangeCount(v8);
          if (RangeCount >= 1)
          {
            int v10 = RangeCount;
            int v11 = 0;
            unint64_t v12 = *(void *)(a1 + 16);
            do
            {
              unint64_t RangeStart = icu::UnicodeSet::getRangeStart(v8, v11);
              int RangeEnd = icu::UnicodeSet::getRangeEnd(v8, v11);
              int v15 = RangeEnd;
              while (1)
              {
                __int16 v16 = (uint64_t *)*(unsigned int *)(v12 + 4);
                unint64_t v12 = *(void *)(v12 + 24);
              }

              if (*(_DWORD *)v12 >= (int)RangeStart)
              {
                if ((int)v16 > RangeEnd)
                {
                  sub_18080209C(v12, (RangeEnd + 1), *(UErrorCode **)(a1 + 8), v16);
                }

                if (icu::UVector::indexOf(*(icu::UVector **)(v12 + 16), (uint64_t)v6, 0LL) == -1)
                {
                  icu::UVector::addElement(*(icu::UVector **)(v12 + 16), v6, *(UErrorCode **)(a1 + 8));
                }

                if (v15 == *(_DWORD *)(v12 + 4)) {
                  ++v11;
                }
                unint64_t v12 = *(void *)(v12 + 24);
              }

              else
              {
                sub_18080209C(v12, RangeStart, *(UErrorCode **)(a1 + 8), v16);
              }
            }

            while (v11 < v10);
          }

          unsigned int v6 = (void *)icu::UVector::elementAt(*(icu::UVector **)(*(void *)a1 + 168LL), ++v7);
        }

        while (v6);
      }

      uint64_t v17 = *(void *)(a1 + 16);
      if (v17)
      {
        int v18 = 0;
        do
        {
          for (uint64_t i = *(void *)(a1 + 16); i != v17; uint64_t i = *(void *)(i + 24))
          {
            if (icu::UVector::equals(*(icu::UVector **)(v17 + 16), *(const icu::UVector **)(i + 16)))
            {
              *(_DWORD *)(v17 + 8) = *(_DWORD *)(i + 8);
              *(_BYTE *)(v17 + 12) = *(_BYTE *)(i + 12);
              break;
            }
          }

          if (!*(_DWORD *)(v17 + 8))
          {
            *(_BYTE *)(v17 + 13) = 1;
            if (sub_180802140(v17))
            {
              *(_DWORD *)(v17 + 8) = ++v18;
              *(_BYTE *)(v17 + 12) = 1;
            }

            else
            {
              int v20 = *(_DWORD *)(a1 + 44);
              *(_DWORD *)(a1 + 44) = v20 + 1;
              *(_DWORD *)(v17 + 8) = v20 + 3;
              sub_180802208(a1, *(icu::UVector **)(v17 + 16), v20 + 3);
            }
          }

          uint64_t v17 = *(void *)(v17 + 24);
        }

        while (v17);
        uint64_t v21 = *(void *)(a1 + 16);
        int v22 = *(_DWORD *)(a1 + 44);
        *(_DWORD *)(a1 + 48) = v22 + 3;
        if (v21)
        {
          do
          {
            if (*(_BYTE *)(v21 + 12))
            {
              int v23 = *(_DWORD *)(a1 + 48) + *(_DWORD *)(v21 + 8) - 1;
              *(_DWORD *)(v21 + 8) = v23;
              if (*(_BYTE *)(v21 + 13)) {
                sub_180802208(a1, *(icu::UVector **)(v21 + 16), v23);
              }
            }

            uint64_t v21 = *(void *)(v21 + 24);
          }

          while (v21);
          int v22 = *(_DWORD *)(a1 + 44);
        }
      }

      else
      {
        int v18 = 0;
        int v22 = *(_DWORD *)(a1 + 44);
        *(_DWORD *)(a1 + 48) = v22 + 3;
      }

      *(_DWORD *)(a1 + 44) = v22 + v18;
      memset(v31, 0, sizeof(v31));
      icu::UnicodeString::UnicodeString((uint64_t)v31, (uint64_t)L"eof");
      memset(v30, 0, sizeof(v30));
      icu::UnicodeString::UnicodeString((uint64_t)v30, (uint64_t)L"bof");
      uint64_t v24 = icu::UVector::elementAt(*(icu::UVector **)(*(void *)a1 + 168LL), 0);
      if (v24)
      {
        unint64_t v26 = v24;
        unsigned int v27 = 1;
        do
        {
          uint64_t v28 = *(icu::UVector ***)(v26 + 32);
          if (icu::UnicodeSet::contains(v28, (const icu::UnicodeString *)v30))
          {
            sub_180802270(a1, v26, 2u);
            *(_BYTE *)(a1 + 52) = 1;
          }

          unint64_t v26 = icu::UVector::elementAt(*(icu::UVector **)(*(void *)a1 + 168LL), v27++);
        }

        while (v26);
      }

      icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v30);
      icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v31);
    }
  }

  else
  {
    *(void *)(a1 + 16) = 0LL;
    **(_DWORD **)(a1 + 8) = 7;
  }

void sub_18080209C( unint64_t a1@<X0>, unint64_t a2@<X1>, UErrorCode *a3@<X2>, uint64_t *a4@<X8>)
{
  int v5 = a2;
  int v7 = icu::UMemory::operator new(a4, (icu::UMemory *)0x20, a2);
  if (v7)
  {
    int v8 = v7;
    sub_18080247C((uint64_t)v7, a1, a3);
    if (*(int *)a3 < 1)
    {
      *(_DWORD *)int v8 = v5;
      *(_DWORD *)(a1 + 4) = v5 - 1;
      v8[3] = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = v8;
    }

    else
    {
      uint64_t v9 = v8[2];
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
      }
      v8[2] = 0LL;
      icu::UMemory::operator delete(v8);
    }
  }

  else
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }

uint64_t sub_180802140(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (v2[2] < 1) {
    return 0LL;
  }
  signed int v3 = 0;
  while (1)
  {
    uint64_t v4 = *(void *)(icu::UVector::elementAt((icu::UVector *)v2, v3) + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
        {
          int32_t v6 = *(__int16 *)(v5 + 56) < 0 ? *(_DWORD *)(v5 + 60) : *(unsigned __int16 *)(v5 + 56) >> 5;
        }
      }
    }

    ++v3;
    uint64_t v2 = *(int **)(a1 + 16);
    if (v3 >= v2[2]) {
      return 0LL;
    }
  }

  return 1LL;
}

uint64_t sub_180802208(uint64_t result, icu::UVector *this, unsigned __int16 a3)
{
  if (*((int *)this + 2) >= 1)
  {
    uint64_t v5 = result;
    signed int v6 = 0;
    do
    {
      unint64_t v7 = icu::UVector::elementAt(this, v6);
      double result = sub_180802270(v5, v7, a3);
      ++v6;
    }

    while (v6 < *((_DWORD *)this + 2));
  }

  return result;
}

uint64_t sub_180802270(uint64_t a1, unint64_t a2, unsigned __int16 a3)
{
  uint64_t result = icu::UMemory::operator new((icu::UMemory *)0xA0, a2);
  if (!result)
  {
LABEL_5:
    **(_DWORD **)(a1 + 8) = 7;
    return result;
  }

  uint64_t v7 = result;
  uint64_t result = sub_1807FD388(result, 3LL);
  *(_DWORD *)(result + 124) = a3;
  if (*(void *)(a2 + 16))
  {
    uint64_t result = icu::UMemory::operator new((icu::UMemory *)0xA0, v8);
    if (result)
    {
      uint64_t result = sub_1807FD388(result, 9LL);
      uint64_t v9 = *(void *)(a2 + 16);
      *(void *)(result + 24) = v7;
      *(void *)(v9 + 8) = result;
      *(void *)(v7 + 8) = result;
      *(void *)(result + 16) = v9;
      *(void *)(a2 + 16) = result;
      *(void *)(result + 8) = a2;
      return result;
    }

    goto LABEL_5;
  }

  *(void *)(a2 + 16) = v7;
  *(void *)(v7 + 8) = a2;
  return result;
}

uint64_t sub_180802310(uint64_t a1)
{
  uint64_t result = (uint64_t)umutablecptrie_open(0, 0LL, *(int **)(a1 + 8));
  *(void *)(a1 + 24) = result;
  for (uint64_t i = *(void *)(a1 + 16); i; uint64_t i = *(void *)(i + 24))
  {
    uint64_t v4 = *(int **)(a1 + 8);
    if (*v4 >= 1) {
      break;
    }
    uint64_t result = umutablecptrie_setRange(*(void *)(a1 + 24), *(_DWORD *)i, *(_DWORD *)(i + 4), *(_DWORD *)(i + 8), v4);
  }

  return result;
}

uint64_t sub_180802370(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    while (1)
    {
      int v3 = *(_DWORD *)(v2 + 8);
      int v4 = a2;
      if (v3 == HIDWORD(a2)) {
        goto LABEL_5;
      }
      if (v3 > SHIDWORD(a2)) {
        break;
      }
LABEL_6:
      uint64_t v2 = *(void *)(v2 + 24);
      if (!v2) {
        goto LABEL_7;
      }
    }

    int v4 = v3 - 1;
LABEL_5:
    *(_DWORD *)(v2 + 8) = v4;
    goto LABEL_6;
  }

uint64_t sub_1808023C0(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    return *(unsigned int *)(a1 + 40);
  }
  int v3 = umutablecptrie_buildImmutable();
  *(void *)(a1 + 32) = v3;
  uint64_t result = ucptrie_toBinary((uint64_t)v3, 0LL, 0, *(int **)(a1 + 8));
  *(_DWORD *)(a1 + 40) = result;
  int v4 = *(_DWORD **)(a1 + 8);
  if (*v4 == 15) {
    *int v4 = 0;
  }
  return result;
}

uint64_t sub_18080244C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 44) + 3);
}

uint64_t sub_180802458(uint64_t a1, uint64_t a2)
{
  return ucptrie_toBinary(*(void *)(a1 + 32), a2, *(_DWORD *)(a1 + 40), *(int **)(a1 + 8));
}

uint64_t sub_18080246C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_180802474(uint64_t a1)
{
  return *(char *)(a1 + 52);
}

uint64_t sub_18080247C(uint64_t a1, unint64_t a2, UErrorCode *a3)
{
  *(void *)a1 = *(void *)a2;
  int v4 = *(_DWORD *)(a2 + 8);
  __int16 v5 = *(_WORD *)(a2 + 12);
  *(void *)(a1 + 16) = 0LL;
  signed int v6 = (icu::UVector **)(a1 + 16);
  *(_DWORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 12) = v5;
  *(void *)(a1 + 24) = 0LL;
  uint64_t v7 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v7 <= 0)
  {
    int v10 = (icu::UVector *)icu::UMemory::operator new(v7, (icu::UMemory *)0x28, a2);
    if (v10) {
      int v10 = icu::UVector::UVector(v10, a3);
    }
    else {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
    *signed int v6 = v10;
    if (*(int *)a3 <= 0)
    {
      int v11 = *(icu::UVector **)(a2 + 16);
      if (*((int *)v11 + 2) >= 1)
      {
        signed int v12 = 0;
        do
        {
          uint64_t v13 = *v6;
          UChar32 v14 = (void *)icu::UVector::elementAt(v11, v12);
          icu::UVector::addElement(v13, v14, a3);
          ++v12;
          int v11 = *(icu::UVector **)(a2 + 16);
        }

        while (v12 < *((_DWORD *)v11 + 2));
      }
    }
  }

  return a1;
}

void *sub_180802558(void *a1, UErrorCode *a2)
{
  a1[2] = 0LL;
  int v3 = (icu::UVector **)(a1 + 2);
  *(void *)((char *)a1 + 6) = 0LL;
  *a1 = 0LL;
  a1[3] = 0LL;
  int v4 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v4 <= 0)
  {
    signed int v6 = (icu::UVector *)icu::UMemory::operator new(v4, (icu::UMemory *)0x28, (unint64_t)a2);
    if (v6)
    {
      *int v3 = icu::UVector::UVector(v6, a2);
    }

    else
    {
      *int v3 = 0LL;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  return a1;
}

uint64_t sub_1808025CC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = v2;
  *(_BYTE *)(result + 40) = 0;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 16) = 0LL;
  return result;
}

uint64_t sub_1808025E4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = v2[2];
      int v4 = (void *)v2[3];
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
      }
      v2[2] = 0LL;
      icu::UMemory::operator delete(v2);
      uint64_t v2 = v4;
    }

    while (v4);
  }

  utrie_close(*(void ***)(a1 + 24));
  return a1;
}

void sub_180802648(uint64_t a1, unint64_t a2)
{
  uint64_t v30 = (uint64_t *)*MEMORY[0x1895F89C0];
  uint64_t v3 = icu::UMemory::operator new(v30, (icu::UMemory *)0x20, a2);
  if (v3)
  {
    __int16 v5 = (void *)sub_180802E14((uint64_t)v3, *(UErrorCode **)(a1 + 8), v4);
    *(void *)(a1 + 16) = v5;
    *__int16 v5 = 0x10FFFF00000000LL;
    if (**(int **)(a1 + 8) <= 0)
    {
      uint64_t v6 = icu::UVector::elementAt(*(icu::UVector **)(*(void *)a1 + 104LL), 0);
      if (v6)
      {
        uint64_t v7 = (void *)v6;
        int v8 = 0;
        do
        {
          uint64_t v9 = (icu::UnicodeSet *)v7[4];
          int RangeCount = icu::UnicodeSet::getRangeCount(v9);
          if (RangeCount >= 1)
          {
            int v11 = RangeCount;
            int v12 = 0;
            unint64_t v13 = *(void *)(a1 + 16);
            do
            {
              unint64_t RangeStart = icu::UnicodeSet::getRangeStart(v9, v12);
              int RangeEnd = icu::UnicodeSet::getRangeEnd(v9, v12);
              int v16 = RangeEnd;
              while (1)
              {
                uint64_t v17 = (uint64_t *)*(unsigned int *)(v13 + 4);
                unint64_t v13 = *(void *)(v13 + 24);
              }

              if (*(_DWORD *)v13 >= (int)RangeStart)
              {
                if ((int)v17 > RangeEnd)
                {
                  sub_1808029C0(v13, (RangeEnd + 1), *(UErrorCode **)(a1 + 8), v17);
                }

                if (icu::UVector::indexOf(*(icu::UVector **)(v13 + 16), (uint64_t)v7, 0LL) == -1)
                {
                  icu::UVector::addElement(*(icu::UVector **)(v13 + 16), v7, *(UErrorCode **)(a1 + 8));
                }

                if (v16 == *(_DWORD *)(v13 + 4)) {
                  ++v12;
                }
                unint64_t v13 = *(void *)(v13 + 24);
              }

              else
              {
                sub_1808029C0(v13, RangeStart, *(UErrorCode **)(a1 + 8), v17);
              }
            }

            while (v12 < v11);
          }

          uint64_t v7 = (void *)icu::UVector::elementAt(*(icu::UVector **)(*(void *)a1 + 104LL), ++v8);
        }

        while (v7);
      }

      for (uint64_t i = *(void *)(a1 + 16); i; uint64_t i = *(void *)(i + 24))
      {
        for (uint64_t j = *(void *)(a1 + 16); j != i; uint64_t j = *(void *)(j + 24))
        {
          if (icu::UVector::equals(*(icu::UVector **)(i + 16), *(const icu::UVector **)(j + 16)))
          {
            *(_DWORD *)(i + 8) = *(_DWORD *)(j + 8);
            break;
          }
        }

        if (!*(_DWORD *)(i + 8))
        {
          int v20 = *(_DWORD *)(a1 + 36);
          *(_DWORD *)(a1 + 36) = v20 + 1;
          *(_DWORD *)(i + 8) = v20 + 3;
          sub_180802A64(i);
          sub_180802208(a1, *(icu::UVector **)(i + 16), *(_DWORD *)(a1 + 36) + 2);
        }
      }

      memset(v29, 0, sizeof(v29));
      icu::UnicodeString::UnicodeString((uint64_t)v29, (uint64_t)L"eof");
      memset(v28, 0, sizeof(v28));
      icu::UnicodeString::UnicodeString((uint64_t)v28, (uint64_t)L"bof");
      uint64_t v21 = icu::UVector::elementAt(*(icu::UVector **)(*(void *)a1 + 104LL), 0);
      if (v21)
      {
        unint64_t v22 = v21;
        unsigned int v23 = 1;
        do
        {
          uint64_t v24 = *(icu::UVector ***)(v22 + 32);
          if (icu::UnicodeSet::contains(v24, (const icu::UnicodeString *)v28))
          {
            sub_180802270(a1, v22, 2u);
            *(_BYTE *)(a1 + 40) = 1;
          }

          unint64_t v22 = icu::UVector::elementAt(*(icu::UVector **)(*(void *)a1 + 104LL), v23++);
        }

        while (v22);
      }

      *(void *)(a1 + 24) = utrie_open(0LL, 0LL, 100000, 0, 0, 1);
      icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v28);
      icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v29);
    }
  }

  else
  {
    *(void *)(a1 + 16) = 0LL;
    **(_DWORD **)(a1 + 8) = 7;
  }

void sub_1808029C0( unint64_t a1@<X0>, unint64_t a2@<X1>, UErrorCode *a3@<X2>, uint64_t *a4@<X8>)
{
  int v5 = a2;
  uint64_t v7 = icu::UMemory::operator new(a4, (icu::UMemory *)0x20, a2);
  if (v7)
  {
    int v8 = v7;
    sub_180802D3C((uint64_t)v7, a1, a3);
    if (*(int *)a3 < 1)
    {
      *(_DWORD *)int v8 = v5;
      *(_DWORD *)(a1 + 4) = v5 - 1;
      v8[3] = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = v8;
    }

    else
    {
      uint64_t v9 = v8[2];
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
      }
      v8[2] = 0LL;
      icu::UMemory::operator delete(v8);
    }
  }

  else
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }

icu::UVector *sub_180802A64(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  uint64_t result = *(icu::UVector **)(a1 + 16);
  if (*((int *)result + 2) >= 1)
  {
    signed int v3 = 0;
    while (1)
    {
      uint64_t v4 = icu::UVector::elementAt(result, v3);
      uint64_t v22 = 0LL;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      __int128 v19 = 0u;
      int v18 = (UChar *)off_18971B688;
      LOWORD(v19) = 2;
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 8);
        if (v6)
        {
          if (*(_DWORD *)v6 == 2) {
            icu::UnicodeString::operator=(&v18, (UChar **)(v6 + 48));
          }
        }
      }

      unint64_t v13 = L"dictionary";
      icu::UnicodeString::UnicodeString(v14, 1LL, &v13);
      unint64_t v7 = v15;
      if ((v15 & 1) != 0)
      {
        int v11 = (v19 & 1) == 0;
      }

      else
      {
        int32_t v8 = (v19 & 0x8000u) == 0LL ? (unsigned __int16)v19 >> 5 : DWORD1(v19);
        int v9 = (v15 & 0x8000u) == 0 ? v15 >> 5 : *(_DWORD *)&v16[2];
        int v10 = (v15 & 2) != 0 ? v16 : v17;
        int v11 = icu::UnicodeString::doCompare( (uint64_t)&v18,  0,  v8,  (uint64_t)v10,  v9 & (v9 >> 31),  v9 & ~(v9 >> 31));
      }

      icu::UnicodeString::~UnicodeString((void *)v7, (icu::UnicodeString *)v14);
      if (!v11) {
        break;
      }
      icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v18);
      ++v3;
      uint64_t result = *(icu::UVector **)(a1 + 16);
      if (v3 >= *((_DWORD *)result + 2)) {
        return result;
      }
    }

    int v12 = (void *)(*(_DWORD *)(a1 + 8) | 0x4000u);
    *(_DWORD *)(a1 + 8) = (_DWORD)v12;
    return (icu::UVector *)icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v18);
  }

  return result;
}

uint64_t sub_180802C20(uint64_t a1)
{
  uint64_t result = utrie_serialize( *(void *)(a1 + 24),  0LL,  0,  (uint64_t (*)(uint64_t, unsigned int, uint64_t))sub_180802C60,  1,  *(int **)(a1 + 8));
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

uint64_t sub_180802C60(uint64_t a1, signed int a2, int a3)
{
  signed int v4 = a2;
  BOOL v10 = 0;
  signed int v6 = a2 + 1024;
  while (1)
  {
    int v7 = utrie_get32(a1, v4, &v10);
    if (!v10) {
      break;
    }
    int v8 = 32;
LABEL_6:
    v4 += v8;
    if (v4 >= v6) {
      return 0LL;
    }
  }

  if (!v7)
  {
    int v8 = 1;
    goto LABEL_6;
  }

  return a3 | 0x8000u;
}

uint64_t sub_180802CDC(uint64_t a1, _DWORD *a2)
{
  return utrie_serialize( *(void *)(a1 + 24),  a2,  *(_DWORD *)(a1 + 32),  (uint64_t (*)(uint64_t, unsigned int, uint64_t))sub_180802C60,  1,  *(int **)(a1 + 8));
}

uint64_t sub_180802CFC(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 36) + 3);
}

uint64_t sub_180802D08(uint64_t a1)
{
  return *(char *)(a1 + 40);
}

uint64_t sub_180802D10(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int **)(a1 + 16);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  while (v2[2] != a2)
  {
    uint64_t v2 = (unsigned int *)*((void *)v2 + 3);
    if (!v2) {
      return 0xFFFFFFFFLL;
    }
  }

  return *v2;
}

uint64_t sub_180802D3C(uint64_t a1, unint64_t a2, UErrorCode *a3)
{
  *(void *)a1 = *(void *)a2;
  signed int v6 = (uint64_t *)*(unsigned int *)(a2 + 8);
  *(_DWORD *)(a1 + 8) = (_DWORD)v6;
  *(void *)(a1 + 24) = 0LL;
  UErrorCode v7 = *a3;
  int v8 = (icu::UVector *)icu::UMemory::operator new(v6, (icu::UMemory *)0x28, a2);
  if (v8) {
    int v8 = icu::UVector::UVector(v8, a3);
  }
  *(void *)(a1 + 16) = v8;
  if (v7 > U_ZERO_ERROR) {
    goto LABEL_4;
  }
  if (!v8)
  {
    UErrorCode v7 = U_MEMORY_ALLOCATION_ERROR;
LABEL_4:
    *a3 = v7;
    return a1;
  }

  BOOL v10 = *(icu::UVector **)(a2 + 16);
  if (*((int *)v10 + 2) >= 1)
  {
    signed int v11 = 0;
    do
    {
      int v12 = *(icu::UVector **)(a1 + 16);
      unint64_t v13 = (void *)icu::UVector::elementAt(v10, v11);
      icu::UVector::addElement(v12, v13, a3);
      ++v11;
      BOOL v10 = *(icu::UVector **)(a2 + 16);
    }

    while (v11 < *((_DWORD *)v10 + 2));
  }

  return a1;
}

uint64_t sub_180802E14@<X0>(uint64_t a1@<X0>, UErrorCode *a2@<X1>, uint64_t *a3@<X8>)
{
  *(void *)a1 = 0LL;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = 0LL;
  UErrorCode v5 = *a2;
  signed int v6 = (icu::UVector *)icu::UMemory::operator new(a3, (icu::UMemory *)0x28, (unint64_t)a2);
  if (v6) {
    signed int v6 = icu::UVector::UVector(v6, a2);
  }
  *(void *)(a1 + 16) = v6;
  if (v5 > U_ZERO_ERROR) {
    goto LABEL_7;
  }
  if (!v6 && *(int *)a2 <= 0)
  {
    UErrorCode v5 = U_MEMORY_ALLOCATION_ERROR;
LABEL_7:
    *a2 = v5;
  }

  return a1;
}

void *sub_180802E88(void *a1, uint64_t a2, uint64_t a3, int *a4)
{
  *a1 = off_18970FEE8;
  a1[1] = a3;
  a1[3] = a2;
  icu::UnicodeString::UnicodeString((uint64_t)(a1 + 4), 0xFFFF);
  a1[2] = 0LL;
  a1[12] = 0LL;
  signed int v6 = uhash_open((uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0LL, a4);
  a1[2] = v6;
  if (*a4 <= 0) {
    uhash_setValueDeleter((uint64_t)v6, (uint64_t)sub_180802F08);
  }
  return a1;
}

void sub_180802F08(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = (void *)sub_18080326C(a1);
    icu::UMemory::operator delete(v1);
  }

void sub_180802F28(_BYTE **a1)
{
  *a1 = off_18970FEE8;
  uhash_close(a1[2]);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 4));
  icu::SymbolTable::~SymbolTable((icu::SymbolTable *)a1);
}

void sub_180802F68(_BYTE **a1)
{
}

uint64_t sub_180802F7C(uint64_t a1, uint64_t a2)
{
  uint64_t result = uhash_get(*(void *)(a1 + 16), a2);
  if (result)
  {
    uint64_t v4 = *(void *)(*(void *)(result + 72) + 16LL);
    if (*(_DWORD *)v4)
    {
      uint64_t result = v4 + 48;
      *(void *)(a1 + 96) = 0LL;
    }

    else
    {
      *(void *)(a1 + 96) = *(void *)(*(void *)(v4 + 16) + 32LL);
      return a1 + 32;
    }
  }

  return result;
}

uint64_t sub_180802FD0(uint64_t a1, int a2)
{
  if (a2 != 0xFFFF) {
    return 0LL;
  }
  uint64_t result = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0LL;
  return result;
}

void sub_180802FF4(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = *(int *)(a2 + 8);
  int v8 = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(void *)(a4 + 56) = 0LL;
  *(void *)a4 = off_18971B688;
  *(_WORD *)(a4 + 8) = 2;
  uint64_t v9 = a1 + 10;
  else {
    int v10 = v7;
  }
  int v21 = v10;
  uint64_t v11 = v10 - v7;
  int v12 = v7;
  while (1)
  {
    if (v11 == v6)
    {
      int v20 = v21;
      goto LABEL_21;
    }

    uint64_t v13 = v6;
    unsigned int v14 = v8 + v6;
    unsigned int v15 = *(unsigned __int16 *)(a1 + 8);
    unsigned int v16 = (v15 & 0x8000u) == 0 ? v15 >> 5 : *(_DWORD *)(a1 + 12);
    if (v16 > v14) {
      break;
    }
    UChar32 v18 = 0xFFFF;
    if (!v13) {
      goto LABEL_16;
    }
LABEL_17:
    int isIDPart = u_isIDPart(v18);
    ++v12;
    uint64_t v6 = v13 + 1;
    if (!isIDPart)
    {
      int v20 = v8 + v13;
      goto LABEL_21;
    }
  }

  if ((v15 & 2) != 0) {
    uint64_t v17 = v9;
  }
  else {
    uint64_t v17 = *(void *)(a1 + 24);
  }
  UChar32 v18 = *(unsigned __int16 *)(v17 + 2 * v7 + 2 * v13);
  if (v13) {
    goto LABEL_17;
  }
LABEL_16:
  if (u_isIDStart(v18)) {
    goto LABEL_17;
  }
  int v20 = v12;
LABEL_21:
  if (v20 != v8)
  {
    *(_DWORD *)(a2 + 8) = v20;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, v7);
  }

uint64_t sub_180803164(uint64_t a1, uint64_t a2)
{
  uint64_t result = uhash_get(*(void *)(a1 + 16), a2);
  if (result) {
    return *(void *)(result + 72);
  }
  return result;
}

uint64_t *sub_180803184(uint64_t *result, UChar **a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0)
  {
    uint64_t v7 = result;
    uint64_t result = (uint64_t *)uhash_get(result[2], (uint64_t)a2);
    if (result)
    {
      int v10 = 66054;
    }

    else
    {
      uint64_t result = icu::UMemory::operator new(v9, (icu::UMemory *)0x50, v8);
      if (result)
      {
        uint64_t v11 = (uint64_t)result;
        result[1] = (uint64_t)off_18971B688;
        uint64_t v12 = (uint64_t)(result + 1);
        *((_WORD *)result + 8) = 2;
        result[9] = 0LL;
        icu::UnicodeString::operator=((UChar **)result + 1, a2);
        *(void *)(v11 + 72) = a3;
        return (uint64_t *)uhash_put(v7[2], v12, v11, a4);
      }

      int v10 = 7;
    }

    *a4 = v10;
  }

  return result;
}

uint64_t sub_18080324C(uint64_t result)
{
  *(void *)(result + 8) = off_18971B688;
  *(_WORD *)(result + 16) = 2;
  *(void *)(result + 72) = 0LL;
  return result;
}

uint64_t sub_18080326C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (*(void *)(v2 + 16))
  {
    signed int v3 = (void *)sub_1807FD518(*(void *)(v2 + 16));
    icu::UMemory::operator delete(v3);
    uint64_t v2 = *(void *)(a1 + 72);
  }

  *(void *)(v2 + 16) = 0LL;
  uint64_t v4 = (void *)sub_1807FD518(v2);
  icu::UMemory::operator delete(v4);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 8));
  return a1;
}

void *sub_1808032C0(void *a1, uint64_t a2, uint64_t a3, int *a4)
{
  *a1 = off_18970FF68;
  a1[1] = a3;
  a1[3] = a2;
  icu::UnicodeString::UnicodeString((uint64_t)(a1 + 4), 0xFFFF);
  a1[2] = 0LL;
  a1[12] = 0LL;
  uint64_t v6 = uhash_open((uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0LL, a4);
  a1[2] = v6;
  if (*a4 <= 0) {
    uhash_setValueDeleter((uint64_t)v6, (uint64_t)sub_180803340);
  }
  return a1;
}

void sub_180803340(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = (void *)sub_1808032BC(a1);
    icu::UMemory::operator delete(v1);
  }

void sub_180803360(_BYTE **a1)
{
  *a1 = off_18970FF68;
  uhash_close(a1[2]);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 4));
  icu::SymbolTable::~SymbolTable((icu::SymbolTable *)a1);
}

void sub_1808033A0(_BYTE **a1)
{
}

uint64_t sub_1808033B4(uint64_t a1, uint64_t a2)
{
  uint64_t result = uhash_get(*(void *)(a1 + 16), a2);
  if (result)
  {
    uint64_t v4 = *(void *)(*(void *)(result + 72) + 16LL);
    if (*(_DWORD *)v4)
    {
      uint64_t result = v4 + 48;
      *(void *)(a1 + 96) = 0LL;
    }

    else
    {
      *(void *)(a1 + 96) = *(void *)(*(void *)(v4 + 16) + 32LL);
      return a1 + 32;
    }
  }

  return result;
}

uint64_t sub_180803408(uint64_t a1, int a2)
{
  if (a2 != 0xFFFF) {
    return 0LL;
  }
  uint64_t result = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0LL;
  return result;
}

void sub_18080342C(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = *(int *)(a2 + 8);
  int v8 = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(void *)(a4 + 56) = 0LL;
  *(void *)a4 = off_18971B688;
  *(_WORD *)(a4 + 8) = 2;
  uint64_t v9 = a1 + 10;
  else {
    int v10 = v7;
  }
  int v21 = v10;
  uint64_t v11 = v10 - v7;
  int v12 = v7;
  while (1)
  {
    if (v11 == v6)
    {
      int v20 = v21;
      goto LABEL_21;
    }

    uint64_t v13 = v6;
    unsigned int v14 = v8 + v6;
    unsigned int v15 = *(unsigned __int16 *)(a1 + 8);
    unsigned int v16 = (v15 & 0x8000u) == 0 ? v15 >> 5 : *(_DWORD *)(a1 + 12);
    if (v16 > v14) {
      break;
    }
    UChar32 v18 = 0xFFFF;
    if (!v13) {
      goto LABEL_16;
    }
LABEL_17:
    int isIDPart = u_isIDPart(v18);
    ++v12;
    uint64_t v6 = v13 + 1;
    if (!isIDPart)
    {
      int v20 = v8 + v13;
      goto LABEL_21;
    }
  }

  if ((v15 & 2) != 0) {
    uint64_t v17 = v9;
  }
  else {
    uint64_t v17 = *(void *)(a1 + 24);
  }
  UChar32 v18 = *(unsigned __int16 *)(v17 + 2 * v7 + 2 * v13);
  if (v13) {
    goto LABEL_17;
  }
LABEL_16:
  if (u_isIDStart(v18)) {
    goto LABEL_17;
  }
  int v20 = v12;
LABEL_21:
  if (v20 != v8)
  {
    *(_DWORD *)(a2 + 8) = v20;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, v7);
  }

uint64_t sub_18080359C(uint64_t a1, uint64_t a2)
{
  uint64_t result = uhash_get(*(void *)(a1 + 16), a2);
  if (result) {
    return *(void *)(result + 72);
  }
  return result;
}

uint64_t *sub_1808035BC(uint64_t *result, UChar **a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0)
  {
    uint64_t v7 = result;
    uint64_t result = (uint64_t *)uhash_get(result[2], (uint64_t)a2);
    if (result)
    {
      int v10 = 66054;
    }

    else
    {
      uint64_t result = icu::UMemory::operator new(v9, (icu::UMemory *)0x50, v8);
      if (result)
      {
        uint64_t v11 = (uint64_t)result;
        int v12 = (UChar **)(sub_18080324C((uint64_t)result) + 8);
        icu::UnicodeString::operator=(v12, a2);
        *(void *)(v11 + 72) = a3;
        return (uint64_t *)uhash_put(v7[2], (uint64_t)v12, v11, a4);
      }

      int v10 = 7;
    }

    *a4 = v10;
  }

  return result;
}

uint64_t sub_18080366C(uint64_t a1, unint64_t a2, uint64_t a3, UErrorCode *a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = 0LL;
  UErrorCode v5 = (icu::UVector **)(a1 + 24);
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(_DWORD *)(a1 + 48) = 1;
  uint64_t v6 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v6 <= 0)
  {
    unint64_t v8 = (icu::UVector *)icu::UMemory::operator new(v6, (icu::UMemory *)0x28, a2);
    if (v8)
    {
      *UErrorCode v5 = icu::UVector::UVector(v8, a4);
    }

    else
    {
      *UErrorCode v5 = 0LL;
    }
  }

  return a1;
}

void *sub_1808036F8(void *a1)
{
  uint64_t v2 = (icu::UVector *)a1[3];
  if (*((int *)v2 + 2) >= 1)
  {
    signed int v3 = 0;
    do
    {
      uint64_t v4 = (void *)icu::UVector::elementAt(v2, v3);
      if (v4)
      {
        UErrorCode v5 = sub_180805EF0(v4);
        icu::UMemory::operator delete(v5);
      }

      ++v3;
      uint64_t v2 = (icu::UVector *)a1[3];
    }

    while (v3 < *((_DWORD *)v2 + 2));
  }

  (*(void (**)(icu::UVector *))(*(void *)v2 + 8LL))(v2);
  uint64_t v6 = a1[4];
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = a1[5];
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  return a1;
}

void sub_180803790(UErrorCode **a1, unint64_t a2)
{
  uint64_t v3 = *(void *)a1[1];
  if (!v3) {
    return;
  }
  *(void *)a1[1] = sub_1807FD5A4(v3, a2);
  if (sub_180802474(*((void *)*a1 + 20)))
  {
    uint64_t v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0xA0, v4);
    uint64_t v9 = v6;
    if (v6) {
      sub_1807FD388(v6, 8LL);
    }
    int v10 = icu::UMemory::operator new(v8, (icu::UMemory *)0xA0, v7);
    if (v10)
    {
      uint64_t v11 = sub_1807FD388(v10, 3LL);
      if (v9)
      {
        v9[2] = v11;
        UErrorCode v5 = (uint64_t *)a1[1];
        v9[3] = *v5;
        *(void *)(v11 + 8) = v9;
        *(_DWORD *)(v11 + 124) = 2;
        *UErrorCode v5 = (uint64_t)v9;
        goto LABEL_10;
      }

      *a1[2] = U_MEMORY_ALLOCATION_ERROR;
    }

    else
    {
      *a1[2] = U_MEMORY_ALLOCATION_ERROR;
      if (!v9) {
        return;
      }
      uint64_t v11 = (uint64_t)v9;
    }

uint64_t sub_1808039B4(uint64_t result, int *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    int v4 = *a2;
    if (*a2 < 7 && ((0x71u >> v4) & 1) != 0)
    {
      unsigned int v5 = (0x30u >> v4) & 1;
    }

    else
    {
      sub_1808039B4(result, *((void *)a2 + 2));
      uint64_t result = sub_1808039B4(v3, *((void *)a2 + 3));
      LOBYTE(v5) = 1;
      switch(*a2)
      {
        case 8:
          LOBYTE(v5) = *(_BYTE *)(*((void *)a2 + 2) + 120LL);
          if ((_BYTE)v5) {
            goto LABEL_11;
          }
          break;
        case 9:
          if (*(_BYTE *)(*((void *)a2 + 2) + 120LL)) {
            LOBYTE(v5) = 1;
          }
          else {
LABEL_11:
          }
            LOBYTE(v5) = *(_BYTE *)(*((void *)a2 + 3) + 120LL) != 0;
          break;
        case 10:
        case 12:
          break;
        default:
          LOBYTE(v5) = 0;
          break;
      }
    }

    *((_BYTE *)a2 + 120) = v5;
  }

  return result;
}

void sub_180803A84(uint64_t a1, icu::UVector **a2)
{
  if (a2)
  {
    if ((*(_DWORD *)a2 - 3) <= 3)
    {
      icu::UVector::addElement(a2[17], a2, *(UErrorCode **)(a1 + 16));
      return;
    }

    sub_180803A84(a1, a2[2]);
    sub_180803A84(a1, a2[3]);
    int v4 = *(_DWORD *)a2;
    if ((*(_DWORD *)a2 - 10) >= 3)
    {
      if (v4 == 8)
      {
        sub_180804A6C(a1, (unsigned int *)a2[17], *((unsigned int **)a2[2] + 17));
        if (!*((_BYTE *)a2[2] + 120)) {
          return;
        }
      }

      else
      {
        if (v4 != 9) {
          return;
        }
        sub_180804A6C(a1, (unsigned int *)a2[17], *((unsigned int **)a2[2] + 17));
      }

      unsigned int v5 = (unsigned int *)a2[17];
      uint64_t v6 = a2[3];
    }

    else
    {
      unsigned int v5 = (unsigned int *)a2[17];
      uint64_t v6 = a2[2];
    }

    sub_180804A6C(a1, v5, *((unsigned int **)v6 + 17));
  }

void sub_180803B68(uint64_t a1, icu::UVector **a2)
{
  if (a2)
  {
    if ((*(_DWORD *)a2 - 3) <= 3)
    {
      icu::UVector::addElement(a2[18], a2, *(UErrorCode **)(a1 + 16));
      return;
    }

    sub_180803B68(a1, a2[2]);
    sub_180803B68(a1, a2[3]);
    int v4 = *(_DWORD *)a2;
    if (v4 != 8)
    {
      if (v4 != 9) {
        return;
      }
      sub_180804A6C(a1, (unsigned int *)a2[18], *((unsigned int **)a2[2] + 18));
      unsigned int v5 = (unsigned int *)a2[18];
      uint64_t v6 = a2[3];
      goto LABEL_9;
    }

    sub_180804A6C(a1, (unsigned int *)a2[18], *((unsigned int **)a2[3] + 18));
    if (*((_BYTE *)a2[3] + 120))
    {
LABEL_5:
      unsigned int v5 = (unsigned int *)a2[18];
      uint64_t v6 = a2[2];
LABEL_9:
      sub_180804A6C(a1, v5, *((unsigned int **)v6 + 18));
    }
  }

void sub_180803C48(uint64_t a1, int *a2)
{
  if (a2)
  {
    if (*a2 != 3 && *a2 != 6)
    {
      sub_180803C48(a1, *((void *)a2 + 2));
      sub_180803C48(a1, *((void *)a2 + 3));
      int v5 = *a2;
      if (*a2 == 8)
      {
        uint64_t v6 = *(icu::UVector **)(*((void *)a2 + 2) + 144LL);
        if (!*((_DWORD *)v6 + 2)) {
          return;
        }
        unsigned int v7 = 0;
        do
        {
          uint64_t v8 = icu::UVector::elementAt(v6, v7);
          sub_180804A6C(a1, *(unsigned int **)(v8 + 152), *(unsigned int **)(*((void *)a2 + 3) + 136LL));
          ++v7;
        }

        while (v7 < *((_DWORD *)v6 + 2));
        int v5 = *a2;
      }

      if ((v5 & 0xFFFFFFFE) == 0xA)
      {
        uint64_t v9 = (icu::UVector *)*((void *)a2 + 18);
        if (*((_DWORD *)v9 + 2))
        {
          unsigned int v10 = 0;
          do
          {
            uint64_t v11 = icu::UVector::elementAt(v9, v10);
            sub_180804A6C(a1, *(unsigned int **)(v11 + 152), *((unsigned int **)a2 + 17));
            ++v10;
            uint64_t v9 = (icu::UVector *)*((void *)a2 + 18);
          }

          while (v10 < *((_DWORD *)v9 + 2));
        }
      }
    }
  }

void sub_180803D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = 0LL;
  memset(v18, 0, sizeof(v18));
  icu::UVector::UVector((icu::UVector *)v18, *(UErrorCode **)(a1 + 16));
  uint64_t v6 = *(UErrorCode **)(a1 + 16);
  if (*(int *)v6 <= 0)
  {
    sub_1807FD6B4(a2, (icu::UVector *)v18, 3LL, v6);
    unsigned int v7 = *(UErrorCode **)(a1 + 16);
    if (*(int *)v7 <= 0)
    {
      uint64_t v17 = 0LL;
      memset(v16, 0, sizeof(v16));
      icu::UVector::UVector((icu::UVector *)v16, v7);
      sub_180804D20(a1, (icu::UVector *)v16, a2);
      uint64_t v15 = 0LL;
      memset(v14, 0, sizeof(v14));
      icu::UVector::UVector((icu::UVector *)v14, *(UErrorCode **)(a1 + 16));
      if (SDWORD2(v16[0]) >= 1)
      {
        signed int v8 = 0;
        do
        {
          uint64_t v9 = icu::UVector::elementAt((icu::UVector *)v16, v8);
          if (*(_BYTE *)(v9 + 130)) {
            sub_180804A6C(a1, (unsigned int *)v14, *(unsigned int **)(v9 + 136));
          }
          ++v8;
        }

        while (v8 < SDWORD2(v16[0]));
      }

      if (**(int **)(a1 + 16) <= 0 && SDWORD2(v18[0]) >= 1)
      {
        signed int v10 = 0;
        do
        {
          uint64_t v11 = icu::UVector::elementAt((icu::UVector *)v18, v10);
          if ((icu::UVector::indexOf(*(icu::UVector **)(v11 + 152), a3, 0LL) & 0x80000000) == 0 && SDWORD2(v14[0]) >= 1)
          {
            signed int v12 = 0;
            do
            {
              uint64_t v13 = icu::UVector::elementAt((icu::UVector *)v14, v12);
              if (*(_DWORD *)v13 == 3 && *(_DWORD *)(v11 + 124) == *(_DWORD *)(v13 + 124)) {
                sub_180804A6C(a1, *(unsigned int **)(v11 + 152), *(unsigned int **)(v13 + 152));
              }
              ++v12;
            }

            while (v12 < SDWORD2(v14[0]));
          }

          ++v10;
        }

        while (v10 < SDWORD2(v18[0]));
      }

      icu::UVector::~UVector((icu::UVector *)v14);
      icu::UVector::~UVector((icu::UVector *)v16);
    }
  }

  icu::UVector::~UVector((icu::UVector *)v18);
}

void sub_180803F00(uint64_t a1)
{
  if (**(int **)(a1 + 16) <= 0)
  {
    uint64_t v2 = *(void *)(**(void **)(a1 + 8) + 16LL);
    uint64_t v3 = *(icu::UVector **)(*(void *)(v2 + 24) + 136LL);
    if (*((int *)v3 + 2) >= 1)
    {
      signed int v4 = 0;
      uint64_t v5 = *(void *)(v2 + 16);
      do
      {
        uint64_t v6 = icu::UVector::elementAt(v3, v4);
        if (*(_DWORD *)v6 == 3 && *(_DWORD *)(v6 + 124) == *(_DWORD *)(v5 + 124)) {
          sub_180804A6C(a1, *(unsigned int **)(v5 + 152), *(unsigned int **)(v6 + 152));
        }
        ++v4;
      }

      while (v4 < *((_DWORD *)v3 + 2));
    }
  }

void sub_180803FA4(uint64_t a1)
{
  int v2 = sub_18080244C(*(void *)(*(void *)a1 + 160LL));
  uint64_t v5 = icu::UMemory::operator new(v4, (icu::UMemory *)0x30, v3);
  unsigned int v7 = *(UErrorCode **)(a1 + 16);
  if (!v5)
  {
    *unsigned int v7 = U_MEMORY_ALLOCATION_ERROR;
    return;
  }

  signed int v8 = v5;
  sub_180805E5C((uint64_t)v5, (v2 - 1), v7, v6);
  uint64_t v11 = (icu::UVector *)icu::UMemory::operator new(v10, (icu::UMemory *)0x28, v9);
  if (!v11)
  {
    v8[4] = 0LL;
    **(_DWORD **)(a1 + 16) = 7;
LABEL_13:
    uint64_t v24 = sub_180805EF0(v8);
    icu::UMemory::operator delete(v24);
    return;
  }

  v8[4] = (uint64_t)icu::UVector::UVector(v11, *(UErrorCode **)(a1 + 16));
  signed int v12 = *(UErrorCode **)(a1 + 16);
  icu::UVector::addElement(*(icu::UVector **)(a1 + 24), v8, v12);
  uint64_t v14 = (uint64_t *)**(unsigned int **)(a1 + 16);
  uint64_t v15 = icu::UMemory::operator new(v14, (icu::UMemory *)0x30, v13);
  uint64_t v17 = *(UErrorCode **)(a1 + 16);
  if (!v15)
  {
    *uint64_t v17 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_13;
  }

  UChar32 v18 = v15;
  sub_180805E5C((uint64_t)v15, (v2 - 1), v17, v16);
  uint64_t v20 = (uint64_t *)**(unsigned int **)(a1 + 16);
  unint64_t v21 = (icu::UVector *)icu::UMemory::operator new(v20, (icu::UMemory *)0x28, v19);
  uint64_t v22 = (unsigned int *)v21;
  unint64_t v23 = *(UErrorCode **)(a1 + 16);
  if (v21) {
    icu::UVector::UVector(v21, v23);
  }
  else {
    *unint64_t v23 = U_MEMORY_ALLOCATION_ERROR;
  }
  v18[4] = (uint64_t)v22;
  sub_180804A6C(a1, v22, *(unsigned int **)(**(void **)(a1 + 8) + 136LL));
  icu::UVector::addElement(*(icu::UVector **)(a1 + 24), v18, *(UErrorCode **)(a1 + 16));
  unint64_t v26 = *(int **)(a1 + 24);
  if (v26[2] < 2) {
    return;
  }
  for (signed int i = 1; ; signed int i = 1)
  {
    while (1)
    {
      uint64_t v28 = (_BYTE *)icu::UVector::elementAt((icu::UVector *)v26, i);
      if (!*v28) {
        break;
      }
      ++i;
      unint64_t v26 = *(int **)(a1 + 24);
      if (i >= v26[2]) {
        return;
      }
    }

    unint64_t v29 = v28;
    *uint64_t v28 = 1;
    if (v2 >= 2) {
      break;
    }
LABEL_47:
    unint64_t v26 = *(int **)(a1 + 24);
    if (v26[2] <= 1) {
      return;
    }
  }

  unsigned int v30 = 1;
  while (1)
  {
    uint64_t v31 = (int *)*((void *)v29 + 4);
    if (v31[2] >= 1) {
      break;
    }
LABEL_46:
    if (++v30 == v2) {
      goto LABEL_47;
    }
  }

  signed int v32 = 0;
  int v33 = 0LL;
  do
  {
    uint64_t v34 = (unsigned int **)icu::UVector::elementAt((icu::UVector *)v31, v32);
    if (*(_DWORD *)v34 == 3)
    {
      uint64_t v36 = v34;
      uint64_t v37 = (uint64_t *)*((unsigned int *)v34 + 31);
      if ((_DWORD)v37 == v30)
      {
        if (!v33)
        {
          __int128 v38 = (icu::UVector *)icu::UMemory::operator new(v37, (icu::UMemory *)0x28, v35);
          uint64_t v39 = *(UErrorCode **)(a1 + 16);
          if (!v38) {
            goto LABEL_49;
          }
          int v33 = (unsigned int *)v38;
          icu::UVector::UVector(v38, *(UErrorCode **)(a1 + 16));
        }

        sub_180804A6C(a1, v33, v36[19]);
      }
    }

    ++v32;
    uint64_t v31 = (int *)*((void *)v29 + 4);
  }

  while (v32 < v31[2]);
  if (!v33) {
    goto LABEL_46;
  }
  uint64_t v40 = *(unsigned int **)(a1 + 24);
  __int128 v41 = (uint64_t *)v40[2];
  if ((int)v41 >= 1)
  {
    int v42 = 0;
    while (1)
    {
      uint64_t v43 = icu::UVector::elementAt((icu::UVector *)v40, v42);
      ++v42;
      uint64_t v40 = *(unsigned int **)(a1 + 24);
      __int128 v41 = (uint64_t *)v40[2];
    }

    (*(void (**)(unsigned int *))(*(void *)v33 + 8LL))(v33);
    goto LABEL_45;
  }

icu::UVector32 *sub_180804320@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::UVector32 *)icu::UMemory::operator new(a3, (icu::UMemory *)0x20, a2);
  if (result)
  {
    uint64_t v5 = result;
    int v6 = sub_1808001B4(*(void *)(*(void *)a1 + 104LL));
    uint64_t result = icu::UVector32::UVector32(v5, v6 + 1, *(UErrorCode **)(a1 + 16));
    *(void *)(a1 + 40) = v5;
    if (**(int **)(a1 + 16) <= 0)
    {
      int v7 = sub_1808001B4(*(void *)(*(void *)a1 + 104LL));
      icu::UVector32::setSize(v5, v7 + 1);
      uint64_t result = *(icu::UVector32 **)(a1 + 24);
      if (*((int *)result + 2) >= 1)
      {
        signed int v8 = 0;
        do
        {
          uint64_t v9 = icu::UVector::elementAt(result, v8);
          signed int v10 = *(icu::UVector **)(v9 + 32);
          if (*((int *)v10 + 2) >= 1)
          {
            signed int v11 = 0;
            char v12 = 0;
            int v13 = 0;
            do
            {
              uint64_t v14 = (_DWORD *)icu::UVector::elementAt(v10, v11);
              if (*v14 == 4)
              {
                uint64_t v15 = v14[31];
                if ((v15 & 0x80000000) != 0
                  || ((v16 = *(void *)(a1 + 40), int v17 = *(_DWORD *)(v16 + 8), v17 >= 1)
                    ? (BOOL v18 = v17 <= (int)v15)
                    : (BOOL v18 = 1),
                      v18))
                {
                  int v19 = 0;
                }

                else
                {
                  int v19 = *(_DWORD *)(*(void *)(v16 + 24) + 4 * v15);
                }

                if (v13) {
                  BOOL v20 = 1;
                }
                else {
                  BOOL v20 = v19 == 0;
                }
                if (!v20) {
                  int v13 = v19;
                }
                char v12 = 1;
              }

              ++v11;
              signed int v10 = *(icu::UVector **)(v9 + 32);
              int v21 = *((_DWORD *)v10 + 2);
            }

            while (v11 < v21);
            if ((v12 & 1) != 0)
            {
              if (!v13)
              {
                int v13 = *(_DWORD *)(a1 + 48) + 1;
                *(_DWORD *)(a1 + 48) = v13;
              }

              if (v21 >= 1)
              {
                signed int v22 = 0;
                do
                {
                  unint64_t v23 = (_DWORD *)icu::UVector::elementAt(v10, v22);
                  if (*v23 == 4) {
                    icu::UVector32::setElementAt(*(void *)(a1 + 40), v13, v23[31]);
                  }
                  ++v22;
                  signed int v10 = *(icu::UVector **)(v9 + 32);
                }

                while (v22 < *((_DWORD *)v10 + 2));
              }
            }
          }

          ++v8;
          uint64_t result = *(icu::UVector32 **)(a1 + 24);
        }

        while (v8 < *((_DWORD *)result + 2));
      }
    }
  }

  else
  {
    *(void *)(a1 + 40) = 0LL;
    **(_DWORD **)(a1 + 16) = 7;
  }

  return result;
}

void sub_1808044C4(uint64_t a1)
{
  uint64_t v1 = *(UErrorCode **)(a1 + 16);
  if (*(int *)v1 <= 0)
  {
    uint64_t v20 = 0LL;
    memset(v19, 0, sizeof(v19));
    icu::UVector::UVector((icu::UVector *)v19, v1);
    unint64_t v3 = *(UErrorCode **)(a1 + 16);
    if (*(int *)v3 <= 0)
    {
      sub_1807FD6B4(**(void **)(a1 + 8), (icu::UVector *)v19, 6LL, v3);
      if (**(int **)(a1 + 16) <= 0 && SDWORD2(v19[0]) >= 1)
      {
        signed int v4 = 0;
        do
        {
          uint64_t v5 = icu::UVector::elementAt((icu::UVector *)v19, v4);
          int v6 = *(icu::UVector **)(a1 + 24);
          if (*((int *)v6 + 2) >= 1)
          {
            signed int v7 = 0;
            do
            {
              uint64_t v8 = icu::UVector::elementAt(v6, v7);
              if ((icu::UVector::indexOf(*(icu::UVector **)(v8 + 32), v5, 0LL) & 0x80000000) == 0)
              {
                int v9 = *(_DWORD *)(v8 + 4);
                if (!v9)
                {
                  uint64_t v10 = *(unsigned int *)(v5 + 124);
                  if ((v10 & 0x80000000) != 0
                    || ((uint64_t v11 = *(void *)(a1 + 40), v12 = *(_DWORD *)(v11 + 8), v12 >= 1)
                      ? (BOOL v13 = v12 <= (int)v10)
                      : (BOOL v13 = 1),
                        v13 || (int v9 = *(_DWORD *)(*(void *)(v11 + 24) + 4 * v10)) == 0))
                  {
                    int v9 = 1;
                  }

                  *(_DWORD *)(v8 + 4) = v9;
                }

                if (v9 == 1)
                {
                  uint64_t v14 = *(unsigned int *)(v5 + 124);
                  if ((_DWORD)v14)
                  {
                    if ((v14 & 0x80000000) != 0
                      || ((uint64_t v15 = *(void *)(a1 + 40), v16 = *(_DWORD *)(v15 + 8), v16 >= 1)
                        ? (BOOL v17 = v16 <= (int)v14)
                        : (BOOL v17 = 1),
                          v17))
                    {
                      int v18 = 0;
                    }

                    else
                    {
                      int v18 = *(_DWORD *)(*(void *)(v15 + 24) + 4 * v14);
                    }

                    *(_DWORD *)(v8 + 4) = v18;
                  }
                }
              }

              ++v7;
              int v6 = *(icu::UVector **)(a1 + 24);
            }

            while (v7 < *((_DWORD *)v6 + 2));
          }

          ++v4;
        }

        while (v4 < SDWORD2(v19[0]));
      }
    }

    icu::UVector::~UVector((icu::UVector *)v19);
  }

void sub_180804644(uint64_t a1)
{
  uint64_t v1 = *(UErrorCode **)(a1 + 16);
  if (*(int *)v1 <= 0)
  {
    uint64_t v14 = 0LL;
    memset(v13, 0, sizeof(v13));
    icu::UVector::UVector((icu::UVector *)v13, v1);
    sub_1807FD6B4(**(void **)(a1 + 8), (icu::UVector *)v13, 4LL, *(UErrorCode **)(a1 + 16));
    if (**(int **)(a1 + 16) <= 0 && SDWORD2(v13[0]) >= 1)
    {
      signed int v3 = 0;
      do
      {
        uint64_t v4 = icu::UVector::elementAt((icu::UVector *)v13, v3);
        uint64_t v5 = *(icu::UVector **)(a1 + 24);
        if (*((int *)v5 + 2) >= 1)
        {
          signed int v6 = 0;
          do
          {
            uint64_t v7 = icu::UVector::elementAt(v5, v6);
            if ((icu::UVector::indexOf(*(icu::UVector **)(v7 + 32), v4, 0LL) & 0x80000000) == 0)
            {
              uint64_t v8 = *(unsigned int *)(v4 + 124);
              if ((v8 & 0x80000000) != 0
                || ((uint64_t v9 = *(void *)(a1 + 40), v10 = *(_DWORD *)(v9 + 8), v10 >= 1)
                  ? (BOOL v11 = v10 <= (int)v8)
                  : (BOOL v11 = 1),
                    v11))
              {
                int v12 = 0;
              }

              else
              {
                int v12 = *(_DWORD *)(*(void *)(v9 + 24) + 4 * v8);
              }

              *(_DWORD *)(v7 + 8) = v12;
            }

            ++v6;
            uint64_t v5 = *(icu::UVector **)(a1 + 24);
          }

          while (v6 < *((_DWORD *)v5 + 2));
        }

        ++v3;
      }

      while (v3 < SDWORD2(v13[0]));
    }

    icu::UVector::~UVector((icu::UVector *)v13);
  }

void sub_180804770(uint64_t a1)
{
  uint64_t v1 = *(UErrorCode **)(a1 + 16);
  if (*(int *)v1 <= 0)
  {
    uint64_t v11 = 0LL;
    memset(v10, 0, sizeof(v10));
    icu::UVector::UVector((icu::UVector *)v10, v1);
    signed int v3 = *(UErrorCode **)(a1 + 16);
    if (*(int *)v3 <= 0)
    {
      sub_1807FD6B4(**(void **)(a1 + 8), (icu::UVector *)v10, 5LL, v3);
      if (**(int **)(a1 + 16) <= 0 && SDWORD2(v10[0]) >= 1)
      {
        signed int v4 = 0;
        do
        {
          uint64_t v5 = icu::UVector::elementAt((icu::UVector *)v10, v4);
          signed int v6 = *(icu::UVector **)(a1 + 24);
          if (*((int *)v6 + 2) >= 1)
          {
            signed int v7 = 0;
            do
            {
              uint64_t v8 = icu::UVector::elementAt(v6, v7);
              if ((icu::UVector::indexOf(*(icu::UVector **)(v8 + 32), v5, 0LL) & 0x80000000) == 0) {
                sub_180804D9C((icu::UVector *)a1, (icu::UVector **)(v8 + 16), *(_DWORD *)(v5 + 124), v9);
              }
              ++v7;
              signed int v6 = *(icu::UVector **)(a1 + 24);
            }

            while (v7 < *((_DWORD *)v6 + 2));
          }

          ++v4;
        }

        while (v4 < SDWORD2(v10[0]));
      }
    }

    icu::UVector::~UVector((icu::UVector *)v10);
  }

icu::UVector *sub_18080488C(UErrorCode **a1)
{
  int v2 = (icu::UVector *)*((void *)*a1 + 23);
  if (!*((_DWORD *)v2 + 2))
  {
    icu::UVector::addElement(v2, 1, a1[2]);
    icu::UVector::addElement(*((icu::UVector **)*a1 + 23), 0, a1[2]);
  }

  uint64_t result = (icu::UVector *)a1[3];
  if (*((int *)result + 2) >= 1)
  {
    signed int v4 = 0;
    do
    {
      uint64_t v5 = icu::UVector::elementAt(result, v4);
      uint64_t v6 = v5;
      signed int v7 = *(int **)(v5 + 16);
      if (v7)
      {
        *(_DWORD *)(v5 + 24) = -1;
        uint64_t v8 = (int *)*((void *)*a1 + 23);
        if (v8[2] < 1) {
          goto LABEL_21;
        }
        unsigned int v9 = 0;
        while (1)
        {
          int v10 = icu::UVector::elementAti((icu::UVector *)v8, v9);
          unsigned int v11 = v9 + 1;
          int v12 = v7[2];
          if (v12 == icu::UVector::elementAti(*((icu::UVector **)*a1 + 23), v9))
          {
            int v13 = v7[2];
            if (v13 < 1)
            {
              signed int i = 0;
            }

            else
            {
              for (signed int i = 0; i < v13; ++i)
              {
                int v15 = icu::UVector::elementAti((icu::UVector *)v7, i);
                int v16 = icu::UVector::elementAti(*((icu::UVector **)*a1 + 23), v11 + i);
                int v13 = v7[2];
                if (v15 != v16) {
                  break;
                }
              }
            }

            if (i == v13) {
              break;
            }
          }

          unsigned int v9 = v11 + v10;
          uint64_t v8 = (int *)*((void *)*a1 + 23);
          if ((int)(v11 + v10) >= v8[2])
          {
            unsigned int v9 = *(_DWORD *)(v6 + 24);
            goto LABEL_20;
          }
        }

        *(_DWORD *)(v6 + 24) = v9;
LABEL_20:
        if (v9 == -1)
        {
LABEL_21:
          BOOL v17 = (icu::UVector *)*((void *)*a1 + 23);
          *(_DWORD *)(v6 + 24) = *((_DWORD *)v17 + 2);
          icu::UVector::addElement(v17, v7[2], a1[2]);
          if (v7[2] >= 1)
          {
            signed int v18 = 0;
            do
            {
              int v19 = (icu::UVector *)*((void *)*a1 + 23);
              int v20 = icu::UVector::elementAti((icu::UVector *)v7, v18);
              icu::UVector::addElement(v19, v20, a1[2]);
              ++v18;
            }

            while (v18 < v7[2]);
          }
        }
      }

      else
      {
        *(_DWORD *)(v5 + 24) = 0;
      }

      ++v4;
      uint64_t result = (icu::UVector *)a1[3];
    }

    while (v4 < *((_DWORD *)result + 2));
  }

  return result;
}

void sub_180804A6C(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v6 = a2[2];
  uint64_t v7 = a3[2];
  memset(v31, 0, sizeof(v31));
  uint64_t v32 = 0LL;
  uint64_t v8 = (void **)&v31[2];
  uint64_t v29 = 0LL;
  unsigned int v30 = (void **)&v31[2];
  v31[0] = 16;
  memset(v28, 0, sizeof(v28));
  unsigned int v27 = (void **)v28 + 1;
  if ((int)v6 >= 17)
  {
    unsigned int v9 = (void **)uprv_malloc(8 * v6);
    if (!v9) {
      goto LABEL_36;
    }
    uint64_t v8 = v9;
    if (LOBYTE(v31[1])) {
      uprv_free(v30);
    }
    unsigned int v30 = v8;
    v31[0] = v6;
    LOBYTE(v31[1]) = 1;
  }

  if ((int)v7 <= 16)
  {
    unsigned int v11 = (void **)v28 + 1;
  }

  else
  {
    int v10 = (void **)uprv_malloc(8 * v7);
    if (!v10) {
      goto LABEL_36;
    }
    unsigned int v11 = v10;
    if (BYTE4(v28[0])) {
      uprv_free((char *)v28 + 8);
    }
    unsigned int v27 = v11;
    BYTE4(v28[0]) = 1;
  }

  icu::UVector::toArray((icu::UVector *)a2, v8);
  icu::UVector::toArray((icu::UVector *)a3, v11);
  icu::UVector::setSize((uint64_t (**)(void))a2, v7 + v6, *(UErrorCode **)(a1 + 16));
  if (**(int **)(a1 + 16) <= 0)
  {
    unsigned int v12 = 0;
    int v13 = &v8[(int)v6];
    uint64_t v14 = &v11[(int)v7];
    if ((int)v7 >= 1 && (int)v6 >= 1)
    {
      unsigned int v12 = 0;
      do
      {
        int v15 = *v8;
        int v16 = *v11;
        if (*v8 == *v11)
        {
          ++v11;
          icu::UVector::setElementAt((uint64_t)a2, v15, v12);
          ++v8;
        }

        else
        {
          unint64_t v17 = bswap64((unint64_t)*v8);
          unint64_t v18 = bswap64((unint64_t)*v11);
          BOOL v19 = v17 >= v18;
          BOOL v20 = v17 > v18;
          int v21 = !v19;
          if (v20 - v21 < 0)
          {
            ++v8;
            uint64_t v22 = (uint64_t)a2;
          }

          else
          {
            ++v11;
            uint64_t v22 = (uint64_t)a2;
            int v15 = v16;
          }

          icu::UVector::setElementAt(v22, v15, v12);
        }

        ++v12;
      }

      while (v11 < v14 && v8 < v13);
    }

    if (v8 >= v13)
    {
      unsigned int v24 = v12;
    }

    else
    {
      do
      {
        unint64_t v23 = *v8++;
        unsigned int v24 = v12 + 1;
        icu::UVector::setElementAt((uint64_t)a2, v23, v12++);
      }

      while (v8 < v13);
    }

    if (v11 >= v14)
    {
      int v26 = v24;
    }

    else
    {
      do
      {
        uint64_t v25 = *v11++;
        int v26 = v24 + 1;
        icu::UVector::setElementAt((uint64_t)a2, v25, v24++);
      }

      while (v11 < v14);
    }

    icu::UVector::setSize((uint64_t (**)(void))a2, v26, *(UErrorCode **)(a1 + 16));
  }

LABEL_36:
  if (BYTE4(v28[0])) {
    uprv_free(v27);
  }
  if (LOBYTE(v31[1])) {
    uprv_free(v30);
  }
}

  if (!a2)
  {
LABEL_57:
    unsigned int v30 = 0;
    goto LABEL_59;
  }

  unint64_t v23 = 1;
  do
  {
    unsigned int v24 = a2(a3, v23);
    if ((v24 & 0x80000000) != 0)
    {
      unsigned int v30 = (v24 & 0x80000000) == 0;
      goto LABEL_59;
    }

    if (v24 >> 11 > 0x1A)
    {
      if (HIWORD(v24))
      {
        if (v24 > 0x10FFFF)
        {
          unsigned int v27 = 3540LL;
          goto LABEL_52;
        }

        if (v24 > 0xE07FF)
        {
          unsigned int v27 = 13156LL;
          goto LABEL_52;
        }

        uint64_t v25 = ((v24 >> 5) & 0x3F) + word_1809FB5A8[(v24 >> 11) + 2080];
      }

      else
      {
        if (v24 >> 10 >= 0x37) {
          int v26 = 0;
        }
        else {
          int v26 = 320;
        }
        uint64_t v25 = v26 + (v24 >> 5);
      }
    }

    else
    {
      uint64_t v25 = v24 >> 5;
    }

    unsigned int v27 = (v24 & 0x1F) + 4 * word_1809FB5A8[v25];
LABEL_52:
    uint64_t v28 = word_1809FB5A8[v27];
    if ((v28 & 8) != 0) {
      LODWORD(v28) = *(unsigned __int16 *)((char *)&unk_1809FA5C4 + ((v28 >> 3) & 0x1FFE)) >> 7;
    }
    unint64_t v23 = 0;
    uint64_t v29 = v28 & 0x60;
  }

  while (v29 == 96);
  if (v29 != 64) {
    goto LABEL_57;
  }
  unsigned int v30 = 1;
LABEL_59:
  if (a1 != 204 && !v30)
  {
    if (a1 != 205)
    {
      if (a1 != 296) {
        goto LABEL_63;
      }
LABEL_143:
      uint64_t v43 = &unk_1809FA57C;
LABEL_144:
      *a4 = v43;
      return 3LL;
    }

  result[4] = v4;
  result[2] = v2;
  return result;
}

  result[4] = v4;
  result[2] = v2;
  result[6] = v6;
  return result;
}

    unsigned int v24 = 0;
    a1[2] = v4;
    do
    {
      uint64_t v25 = *v2++;
      *(_BYTE *)(v7 + v24++ + 65) = v25;
    }

    while (v2 < v4);
    *(_BYTE *)(v7 + 64) = v24;
    uint64_t v6 = 12;
    goto LABEL_5;
  }

  *(_BYTE *)(v7 + 65) = v5;
  *a2 = 11;
  if ((unint64_t)v4 >= a1[3])
  {
    uint64_t v14 = 1;
    goto LABEL_40;
  }

  int v10 = 1 << (v5 & 7);
  unsigned int v11 = 1;
  while (1)
  {
    unsigned int v12 = *v4;
    int v13 = *v4;
    if (v9)
    {
      if (v11 < 2) {
        break;
      }
    }

  uint64_t v31 = 0LL;
LABEL_37:
  int v26 = v31;
LABEL_38:
  if ((_DWORD)v16 && v18 >= 1 && v18 >= (int)v16)
  {
    uint64_t v43 = (char *)a4 + 10;
    while (1)
    {
      uint64_t v32 = *((unsigned __int16 *)a4 + 4);
      if ((v32 & 1) != 0) {
        return this;
      }
      if ((v32 & 0x8000u) == 0) {
        int v33 = v32 >> 5;
      }
      else {
        int v33 = *((_DWORD *)a4 + 3);
      }
      if (v17 < 0)
      {
        uint64_t v34 = 0;
      }

      else
      {
        uint64_t v34 = v33;
        unint64_t v35 = v17;
        if (v33 >= v17)
        {
          if ((v16 & 0x80000000) != 0) {
            goto LABEL_53;
          }
          goto LABEL_49;
        }
      }

      unint64_t v35 = v34;
      if ((v16 & 0x80000000) != 0)
      {
LABEL_53:
        uint64_t v36 = 0;
LABEL_54:
        uint64_t v37 = v36;
        goto LABEL_55;
      }

      uint64_t v48 = dest;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v75, 0, (const UChar **)&v48, v13);
      (*(void (**)(uint64_t, void (***)(icu::UnicodeString *__hidden)))(*(void *)a4 + 56LL))( a4,  &v75);
      goto LABEL_37;
    }

  icu::UnicodeString::~UnicodeString((void *)v27, (icu::UnicodeString *)v65);
  return (uint64_t)icu::UnicodeString::~UnicodeString((void *)v28, (icu::UnicodeString *)v66);
}

            uint64_t v8 = 7;
            goto LABEL_4;
          }

uint64_t sub_180804D20(uint64_t result, icu::UVector *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v5 = result;
    do
    {
      uint64_t v6 = *(UErrorCode **)(v5 + 16);
      if (*(_BYTE *)(v3 + 129)) {
        return icu::UVector::addElement(a2, (void *)v3, v6);
      }
      uint64_t result = sub_180804D20(v5, a2, *(void *)(v3 + 16));
      uint64_t v3 = *(void *)(v3 + 24);
    }

    while (v3);
  }

  return result;
}

icu::UVector *sub_180804D9C@<X0>( icu::UVector *result@<X0>, icu::UVector **a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  if (!*a2)
  {
    uint64_t result = (icu::UVector *)icu::UMemory::operator new(a4, (icu::UMemory *)0x28, (unint64_t)a2);
    if (!result)
    {
      *a2 = 0LL;
      return result;
    }

    uint64_t v6 = result;
    uint64_t result = icu::UVector::UVector(result, *((UErrorCode **)v5 + 2));
    *a2 = result;
  }

  uint64_t v8 = (UErrorCode *)*((void *)v5 + 2);
  if (*(int *)v8 <= 0)
  {
    int v9 = *((_DWORD *)v6 + 2);
    if (v9 < 1)
    {
      unsigned int v10 = 0;
    }

    else
    {
      unsigned int v10 = 0;
      while (1)
      {
        uint64_t result = (icu::UVector *)icu::UVector::elementAti(v6, v10);
        int v11 = 2 * ((int)result > a3);
        if ((_DWORD)result == a3) {
          int v11 = 1;
        }
        if (v11) {
          break;
        }
        if (v9 == ++v10)
        {
          unsigned int v10 = v9;
          goto LABEL_14;
        }
      }

      if (v11 != 2) {
        return result;
      }
LABEL_14:
      uint64_t v8 = (UErrorCode *)*((void *)v5 + 2);
    }

    return (icu::UVector *)icu::UVector::insertElementAt(v6, a3, v10, v8);
  }

  return result;
}

uint64_t sub_180804E84(icu::UVector **a1, int *a2)
{
  int v4 = *((_DWORD *)a1[3] + 2);
  int v5 = sub_18080244C(*((void *)*a1 + 20));
  int v6 = v5 - 1;
  int v7 = *a2;
  if (*a2 >= v5 - 1) {
    return 0LL;
  }
  int v8 = v5;
  do
  {
    int v9 = v8;
    LODWORD(v10) = *a2;
    LODWORD(v1icu::UVector32::~UVector32(this + 1) = *a2;
    while (1)
    {
      LODWORD(v1icu::UVector32::~UVector32(this + 1) = v11 + 1;
      a2[1] = v11;
      if (v4 < 1)
      {
        __int16 v20 = 1;
      }

      else
      {
        int v12 = 1;
        do
        {
          uint64_t v13 = *(void *)(icu::UVector::elementAt(a1[3], v12 - 1) + 40);
          uint64_t v10 = *a2;
          if ((v10 & 0x80000000) != 0
            || ((int v14 = *(_DWORD *)(v13 + 8), v14 >= 1) ? (v15 = v14 <= (int)v10) : (v15 = 1), v15))
          {
            LOWORD(v16) = 0;
          }

          else
          {
            int v16 = *(_DWORD *)(*(void *)(v13 + 24) + 4 * v10);
          }

          uint64_t v11 = a2[1];
          if ((v11 & 0x80000000) != 0
            || ((int v17 = *(_DWORD *)(v13 + 8), v17 >= 1) ? (v18 = v17 <= (int)v11) : (v18 = 1), v18))
          {
            LOWORD(v19) = 0;
          }

          else
          {
            int v19 = *(_DWORD *)(*(void *)(v13 + 24) + 4 * v11);
          }

          __int16 v20 = v19 ^ v16;
          if (v20) {
            break;
          }
          BOOL v15 = v12++ < v4;
        }

        while (v15);
      }

      if (!v20) {
        return 1LL;
      }
    }

    uint64_t result = 0LL;
    int v7 = v10 + 1;
    *a2 = v10 + 1;
  }

  while ((int)v10 + 1 < v6);
  return result;
}

uint64_t sub_180804FE4(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(*(void *)(result + 24) + 8LL);
  if (v2 >= 1)
  {
    uint64_t v4 = result;
    for (unsigned int i = 0; i != v2; ++i)
    {
      uint64_t v6 = icu::UVector::elementAt(*(icu::UVector **)(v4 + 24), i);
      uint64_t result = icu::UVector32::removeElementAt(*(void *)(v6 + 40), a2);
    }
  }

  return result;
}

uint64_t sub_180805044(icu::UVector **a1, signed int *a2)
{
  signed int v4 = *((_DWORD *)a1[3] + 2);
  unsigned int v5 = sub_18080244C(*((void *)*a1 + 20));
  signed int v6 = *a2;
  if (*a2 >= v4 - 1) {
    return 0LL;
  }
  int v7 = v5;
  uint64_t v8 = v5;
  while (1)
  {
    uint64_t v9 = icu::UVector::elementAt(a1[3], v6);
    signed int v6 = *a2 + 1;
    a2[1] = v6;
    if (v6 < v4) {
      break;
    }
LABEL_25:
    *a2 = v6;
    if (v6 >= v4 - 1) {
      return 0LL;
    }
  }

  uint64_t v10 = v9;
  while (1)
  {
    uint64_t v11 = icu::UVector::elementAt(a1[3], v6);
    if (*(_DWORD *)(v10 + 4) == *(_DWORD *)(v11 + 4)
      && *(_DWORD *)(v10 + 8) == *(_DWORD *)(v11 + 8)
      && *(_DWORD *)(v10 + 24) == *(_DWORD *)(v11 + 24))
    {
      break;
    }

uint64_t sub_1808051CC(uint64_t a1, signed int *a2)
{
  signed int v3 = *(_DWORD *)(*(void *)(a1 + 32) + 8LL);
  signed int v4 = *a2;
  if (v4 >= v3 - 1) {
    return 0LL;
  }
  while (1)
  {
    uint64_t v6 = icu::UVector::elementAt(*(icu::UVector **)(a1 + 32), v4);
    signed int v4 = *a2 + 1;
    a2[1] = v4;
    if (v4 < v3) {
      break;
    }
LABEL_32:
    uint64_t result = 0LL;
    *a2 = v4;
    if (v4 >= v3 - 1) {
      return result;
    }
  }

  uint64_t v7 = v6;
  uint64_t v8 = v6 + 10;
  while (1)
  {
    uint64_t v9 = icu::UVector::elementAt(*(icu::UVector **)(a1 + 32), v4);
    unsigned int v10 = *(unsigned __int16 *)(v7 + 8);
    int v11 = (v10 & 0x8000) != 0 ? *(_DWORD *)(v7 + 12) : v10 >> 5;
    if (v11 < 1) {
      return 1LL;
    }
    unint64_t v12 = 0LL;
    unsigned int v13 = *(unsigned __int16 *)(v9 + 8);
    while (1)
    {
      unsigned int v14 = v10 >> 5;
      if ((v10 & 0x8000) != 0) {
        unsigned int v14 = *(_DWORD *)(v7 + 12);
      }
      if (v12 >= v14)
      {
        int v16 = 0xFFFF;
      }

      else
      {
        uint64_t v15 = v8;
        if ((v10 & 2) == 0) {
          uint64_t v15 = *(void *)(v7 + 24);
        }
        int v16 = *(unsigned __int16 *)(v15 + 2 * v12);
      }

      unsigned int v17 = v13 >> 5;
      if ((v13 & 0x8000) != 0) {
        unsigned int v17 = *(_DWORD *)(v9 + 12);
      }
      if (v12 >= v17)
      {
        int v19 = 0xFFFF;
      }

      else
      {
        uint64_t v18 = v9 + 10;
        if ((v13 & 2) == 0) {
          uint64_t v18 = *(void *)(v9 + 24);
        }
        int v19 = *(unsigned __int16 *)(v18 + 2 * v12);
      }

      if (v16 != v19)
      {
        signed int v20 = *a2;
        if (*a2 != v16)
        {
          signed int v21 = a2[1];
          if (v21 != v16) {
            break;
          }
        }

        if (v20 != v19)
        {
          signed int v21 = a2[1];
          if (v21 != v19) {
            break;
          }
        }
      }

      if (v11 == ++v12) {
        return 1LL;
      }
    }

    signed int v4 = v21 + 1;
    a2[1] = v4;
    if (v4 >= v3)
    {
      signed int v4 = v20 + 1;
      goto LABEL_32;
    }
  }

uint64_t sub_180805344(icu::UVector **a1, unint64_t a2)
{
  int v2 = a2;
  unint64_t v4 = HIDWORD(a2);
  unsigned int v5 = (void *)icu::UVector::elementAt(a1[3], HIDWORD(a2));
  icu::UVector::removeElementAt((uint64_t (**)(void))a1[3], v4);
  if (v5)
  {
    uint64_t v6 = sub_180805EF0(v5);
    icu::UMemory::operator delete(v6);
  }

  int v7 = *((_DWORD *)a1[3] + 2);
  uint64_t result = sub_18080244C(*((void *)*a1 + 20));
  if (v7 >= 1)
  {
    int v9 = result;
    unsigned int v10 = 0;
    uint64_t v11 = result;
    do
    {
      uint64_t result = icu::UVector::elementAt(a1[3], v10);
      if (v9 >= 1)
      {
        uint64_t v12 = result;
        uint64_t v13 = 0LL;
        do
        {
          uint64_t v14 = *(void *)(v12 + 40);
          uint64_t v15 = *(int *)(v14 + 8);
          else {
            int v17 = 0;
          }
          if (v17 == (_DWORD)v4) {
            int v18 = v2;
          }
          else {
            int v18 = v17 - (v17 > (int)v4);
          }
          uint64_t result = icu::UVector32::setElementAt(v14, v18, v13++);
        }

        while (v11 != v13);
      }

      ++v10;
    }

    while (v10 != v7);
  }

  return result;
}

uint64_t sub_180805450(uint64_t a1, unint64_t a2)
{
  __int16 v2 = a2;
  unint64_t v4 = HIDWORD(a2);
  uint64_t result = icu::UVector::removeElementAt(*(uint64_t (***)(void))(a1 + 32), SHIDWORD(a2));
  int v6 = *(_DWORD *)(*(void *)(a1 + 32) + 8LL);
  if (v6 >= 1)
  {
    for (unsigned int i = 0; i != v6; ++i)
    {
      uint64_t result = icu::UVector::elementAt(*(icu::UVector **)(a1 + 32), i);
      uint64_t v8 = result;
      unsigned int v9 = *(unsigned __int16 *)(result + 8);
      if ((v9 & 0x8000) != 0) {
        int v10 = *(_DWORD *)(result + 12);
      }
      else {
        int v10 = v9 >> 5;
      }
      if (v10 >= 1)
      {
        unint64_t v11 = 0LL;
        uint64_t v12 = v10;
        do
        {
          unsigned int v13 = *(unsigned __int16 *)(v8 + 8);
          else {
            unsigned int v14 = v13 >> 5;
          }
          if (v11 >= v14)
          {
            int v16 = 0xFFFF;
          }

          else
          {
            uint64_t v15 = v8 + 10;
            if ((v13 & 2) == 0) {
              uint64_t v15 = *(void *)(v8 + 24);
            }
            int v16 = *(unsigned __int16 *)(v15 + 2 * v11);
          }

          if (v16 == (_DWORD)v4) {
            __int16 v17 = v2;
          }
          else {
            __int16 v17 = v16 - (v16 > (int)v4);
          }
          uint64_t result = (uint64_t)icu::UnicodeString::setCharAt((icu::UnicodeString *)v8, v11++, v17);
        }

        while (v12 != v11);
      }
    }
  }

  return result;
}

uint64_t sub_180805560(icu::UVector **a1)
{
  unint64_t v4 = 3LL;
  uint64_t v2 = 0LL;
  if (sub_180805044(a1, (signed int *)&v4))
  {
    do
    {
      sub_180805344(a1, v4);
      uint64_t v2 = (v2 + 1);
    }

    while ((sub_180805044(a1, (signed int *)&v4) & 1) != 0);
  }

  return v2;
}

uint64_t sub_1808055C0(uint64_t a1)
{
  if (!**(void **)(a1 + 8)) {
    return 0LL;
  }
  int v2 = *(_DWORD *)(*(void *)(a1 + 24) + 8LL);
  int v3 = sub_18080244C(*(void *)(*(void *)a1 + 160LL));
  else {
    int v4 = v3 + 3;
  }
  return (v4 * v2 + 20);
}

uint64_t sub_180805628(uint64_t result, int *a2)
{
  if (**(int **)(result + 16) <= 0)
  {
    uint64_t v2 = result;
    if (**(void **)(result + 8))
    {
      uint64_t result = sub_18080244C(*(void *)(*(void *)result + 160LL));
      if ((int)result < 0x8000 && (int v4 = *(_DWORD *)(*(void *)(v2 + 24) + 8LL), v4 < 0x8000))
      {
        int v5 = result;
        *a2 = v4;
        int v6 = sub_18080246C(*(void *)(*(void *)v2 + 160LL));
        int v7 = *(_DWORD *)(v2 + 48);
        if (v7 == 1) {
          int v8 = 0;
        }
        else {
          int v8 = v7 + 1;
        }
        a2[2] = v6;
        a2[3] = v8;
        a2[4] = 0;
        if (*(int *)(*(void *)(v2 + 24) + 8LL) > 255)
        {
          int v9 = 2 * v5 + 6;
          int v10 = 1;
        }

        else
        {
          int v9 = v5 + 3;
          a2[4] = 4;
          int v10 = 5;
        }

        a2[1] = v9;
        uint64_t v11 = *(void *)v2;
        if (*(_BYTE *)(*(void *)v2 + 153LL)) {
          a2[4] = v10;
        }
        uint64_t result = sub_180802474(*(void *)(v11 + 160));
        if ((_DWORD)result) {
          a2[4] |= 2u;
        }
        if (*a2)
        {
          unsigned int v12 = 0;
          do
          {
            uint64_t result = icu::UVector::elementAt(*(icu::UVector **)(v2 + 24), v12);
            uint64_t v13 = a2[1] * v12;
            unsigned int v14 = (char *)a2 + v13 + 20;
            int v15 = *(_DWORD *)(result + 4);
            if (*(int *)(*(void *)(v2 + 24) + 8LL) > 255)
            {
              *(_WORD *)unsigned int v14 = v15;
              *((_WORD *)v14 + icu::UVector32::~UVector32(this + 1) = *(_DWORD *)(result + 8);
              *((_WORD *)v14 + 2) = *(_DWORD *)(result + 24);
              if (v5 >= 1)
              {
                uint64_t v22 = 0LL;
                unint64_t v23 = (char *)a2 + v13 + 26;
                do
                {
                  uint64_t v24 = *(void *)(result + 40);
                  uint64_t v25 = *(int *)(v24 + 8);
                  else {
                    LOWORD(v27) = 0;
                  }
                  *(_WORD *)&v23[2 * v22++] = v27;
                }

                while (v5 != v22);
              }
            }

            else
            {
              *unsigned int v14 = v15;
              v14[1] = *(_DWORD *)(result + 8);
              _OWORD v14[2] = *(_DWORD *)(result + 24);
              if (v5 >= 1)
              {
                uint64_t v16 = 0LL;
                __int16 v17 = (char *)a2 + v13 + 23;
                do
                {
                  uint64_t v18 = *(void *)(result + 40);
                  uint64_t v19 = *(int *)(v18 + 8);
                  else {
                    LOBYTE(v2icu::UVector32::~UVector32(this + 1) = 0;
                  }
                  v17[v16++] = v21;
                }

                while (v5 != v16);
              }
            }

            ++v12;
          }

          while (v12 < *a2);
        }
      }

      else
      {
        **(_DWORD **)(v2 + 16) = 66048;
      }
    }
  }

  return result;
}

void *sub_180805844(icu::UVector **a1, UErrorCode *a2)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  uint64_t v44 = 0LL;
  __int128 v43 = 0u;
  uint64_t v40 = off_18971B688;
  LOWORD(v4icu::UVector32::~UVector32(this + 1) = 2;
  int v6 = sub_18080244C(*((void *)*a1 + 20));
  if (v6 >= 1)
  {
    uint64_t v7 = 0LL;
    int v5 = a1[3];
    int v8 = *((_DWORD *)v5 + 2);
    do
    {
      for (uint64_t i = 0LL; i != v6; ++i)
      {
        if (v8 >= 2)
        {
          unsigned int v10 = 1;
          uint64_t v11 = 0xFFFFFFFFLL;
          do
          {
            uint64_t v12 = *(void *)(icu::UVector::elementAt(a1[3], v10) + 40);
            else {
              unsigned int v13 = *(_DWORD *)(*(void *)(v12 + 24) + 4 * v7);
            }
            uint64_t v14 = *(void *)(icu::UVector::elementAt(a1[3], v13) + 40);
            else {
              int v5 = (icu::UVector *)*(unsigned int *)(*(void *)(v14 + 24) + 4 * i);
            }
            uint64_t v15 = (uint64_t)v5;
            if ((v11 & 0x80000000) == 0)
            {
              uint64_t v15 = v11;
              if ((_DWORD)v11 != (_DWORD)v5) {
                break;
              }
            }

            ++v10;
            uint64_t v11 = v15;
          }

          while (v8 != v10);
          if ((_DWORD)v11 == (_DWORD)v5)
          {
            LOWORD(v39) = v7;
            icu::UnicodeString::doAppend((uint64_t)&v40, (uint64_t)&v39, 0, 1LL);
            LOWORD(v39) = i;
            icu::UnicodeString::doAppend((uint64_t)&v40, (uint64_t)&v39, 0, 1LL);
          }
        }
      }

      ++v7;
    }

    while (v7 != v6);
  }

  uint64_t v16 = icu::UMemory::operator new((uint64_t *)v5, (icu::UMemory *)0x28, v4);
  if (v16)
  {
    int v17 = v6 + 2;
    uint64_t v18 = icu::UVector::UVector(v16, uprv_deleteUObject, uhash_compareUnicodeString, (v6 + 2), a2);
    signed int v20 = (uint64_t *)*(unsigned int *)a2;
    if ((int)v20 > 0)
    {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
      return icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v40);
    }

    a1[4] = (icu::UVector *)v18;
    if (v6 >= -1)
    {
      if (v17 <= 1) {
        int v22 = 1;
      }
      else {
        int v22 = v6 + 2;
      }
      do
      {
        unint64_t v23 = (icu::UnicodeString *)icu::UMemory::operator new(v20, (icu::UMemory *)0x40, v19);
        uint64_t v24 = v23;
        if (v23)
        {
          icu::UnicodeString::UnicodeString(v23, v6, 0, v6 + 4);
        }

        else if (*(int *)a2 <= 0)
        {
          *a2 = U_MEMORY_ALLOCATION_ERROR;
        }

        icu::UVector::adoptElement(a1[4], v24, a2);
        --v22;
      }

      while (v22);
    }

    uint64_t v21 = *(unsigned int *)a2;
    if ((int)v21 < 1)
    {
      uint64_t v25 = icu::UVector::elementAt(a1[4], 1u);
      if (v6 >= 1)
      {
        int v26 = (icu::UnicodeString *)v25;
        for (int j = 0; j != v6; ++j)
          icu::UnicodeString::setCharAt(v26, j, j + 2);
        if (v17 <= 3) {
          int v17 = 3;
        }
        for (unsigned int k = 2; k != v17; ++k)
        {
          uint64_t v29 = (UChar **)icu::UVector::elementAt(a1[4], k);
          icu::UnicodeString::operator=(v29, (UChar **)v26);
        }
      }

      for (unint64_t m = 0LL; ; m += 2LL)
      {
        if ((__int16)v41 < 0)
        {
          if ((uint64_t)m >= SDWORD1(v41))
          {
LABEL_62:
            unint64_t v39 = 1LL;
            if (sub_1808051CC((uint64_t)a1, (signed int *)&v39))
            {
              do
                sub_180805450((uint64_t)a1, v39);
              while ((sub_1808051CC((uint64_t)a1, (signed int *)&v39) & 1) != 0);
            }

            return icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v40);
          }

          unint64_t v31 = DWORD1(v41);
        }

        else
        {
          unint64_t v31 = (unint64_t)(unsigned __int16)v41 >> 5;
        }

        if (v31 <= m)
        {
          int v33 = 0xFFFF;
        }

        else
        {
          uint64_t v32 = (char *)v42;
          if ((v41 & 2) != 0) {
            uint64_t v32 = (char *)&v41 + 2;
          }
          int v33 = *(unsigned __int16 *)&v32[2 * m];
        }

        if ((v41 & 0x8000u) == 0LL) {
          unint64_t v34 = (unsigned __int16)v41 >> 5;
        }
        else {
          unint64_t v34 = DWORD1(v41);
        }
        if (m + 1 >= v34)
        {
          int v36 = 0xFFFF;
        }

        else
        {
          if ((v41 & 2) != 0) {
            unint64_t v35 = (char *)&v41 + 2;
          }
          else {
            unint64_t v35 = (char *)v42;
          }
          int v36 = *(unsigned __int16 *)&v35[2 * m + 2];
        }

        uint64_t v37 = (icu::UnicodeString *)icu::UVector::elementAt(a1[4], v36 + 2);
        icu::UnicodeString::setCharAt(v37, v33, 0);
      }
    }
  }

  else
  {
    uint64_t v21 = *(unsigned int *)a2;
    if ((int)v21 <= 0)
    {
      uint64_t v21 = 7LL;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  return icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v40);
}

uint64_t sub_180805C24(void *a1)
{
  uint64_t v1 = a1[4];
  if (!v1) {
    return 0LL;
  }
  int v3 = *(_DWORD *)(v1 + 8);
  int v4 = sub_18080244C(*(void *)(*a1 + 160LL));
  else {
    int v5 = v4 + 3;
  }
  return (v5 * v3 + 20);
}

uint64_t sub_180805C84(uint64_t result, int *a2)
{
  if (**(int **)(result + 16) <= 0)
  {
    uint64_t v2 = result;
    if (*(void *)(result + 32))
    {
      uint64_t result = sub_18080244C(*(void *)(*(void *)result + 160LL));
      if ((int)result >= 0x8000 || (int v4 = *(_DWORD *)(*(void *)(v2 + 32) + 8LL), v4 >= 0x8000))
      {
        **(_DWORD **)(v2 + 16) = 66048;
        return result;
      }

      int v5 = result;
      *a2 = v4;
      a2[4] = 0;
      if (v4 >= 256)
      {
        a2[1] = 2 * result + 6;
      }

      else
      {
        a2[4] = 4;
        a2[1] = result + 3;
        if (!v4) {
          return result;
        }
      }

      unsigned int v6 = 0;
      do
      {
        uint64_t result = icu::UVector::elementAt(*(icu::UVector **)(v2 + 32), v6);
        uint64_t v7 = a2[1] * v6;
        int v8 = (char *)a2 + v7 + 20;
        if (*(int *)(*(void *)(v2 + 32) + 8LL) > 255)
        {
          *(_DWORD *)int v8 = 0;
          *((_WORD *)v8 + 2) = 0;
          if (v5 >= 1)
          {
            unint64_t v15 = 0LL;
            uint64_t v16 = (char *)a2 + v7 + 26;
            do
            {
              unsigned int v17 = *(unsigned __int16 *)(result + 8);
              else {
                unsigned int v18 = v17 >> 5;
              }
              if (v15 >= v18)
              {
                __int16 v20 = -1;
              }

              else
              {
                uint64_t v19 = result + 10;
                if ((v17 & 2) == 0) {
                  uint64_t v19 = *(void *)(result + 24);
                }
                __int16 v20 = *(_WORD *)(v19 + 2 * v15);
              }

              *(_WORD *)&v16[2 * v15++] = v20;
            }

            while (v5 != v15);
          }
        }

        else
        {
          *(_WORD *)int v8 = 0;
          v8[2] = 0;
          if (v5 >= 1)
          {
            unint64_t v9 = 0LL;
            unsigned int v10 = (char *)a2 + v7 + 23;
            do
            {
              unsigned int v11 = *(unsigned __int16 *)(result + 8);
              else {
                unsigned int v12 = v11 >> 5;
              }
              if (v9 >= v12)
              {
                LOBYTE(v14) = -1;
              }

              else
              {
                uint64_t v13 = result + 10;
                if ((v11 & 2) == 0) {
                  uint64_t v13 = *(void *)(result + 24);
                }
                __int16 v14 = *(_WORD *)(v13 + 2 * v9);
              }

              v10[v9++] = v14;
            }

            while (v5 != v9);
          }
        }

        ++v6;
      }

      while (v6 < *a2);
    }
  }

  return result;
}

uint64_t sub_180805E5C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, UErrorCode *a3@<X2>, uint64_t *a4@<X8>)
{
  int v5 = a2;
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  uint64_t v7 = (icu::UVector32 *)icu::UMemory::operator new(a4, (icu::UMemory *)0x20, a2);
  if (v7)
  {
    int v8 = v5 + 1;
    unint64_t v9 = icu::UVector32::UVector32(v7, v8, a3);
    *(void *)(a1 + 40) = v9;
  }

  else
  {
    *(void *)(a1 + 40) = 0LL;
  }

  return a1;
}

void *sub_180805EF0(void *a1)
{
  int v3 = a1 + 4;
  uint64_t v2 = a1[4];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v4 = a1[5];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = a1[2];
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  a1[2] = 0LL;
  *int v3 = 0LL;
  v3[1] = 0LL;
  return a1;
}

unint64_t *sub_180805F58(unint64_t *a1, unint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  uint64_t v4 = *(uint64_t **)(a2 + 16);
  a1[2] = (unint64_t)v4;
  UErrorCode v10 = U_ZERO_ERROR;
  uint64_t v5 = (icu::UVector *)icu::UMemory::operator new(v4, (icu::UMemory *)0x28, a2);
  if (v5) {
    uint64_t v5 = icu::UVector::UVector(v5, &v10);
  }
  a1[3] = (unint64_t)v5;
  unsigned int v6 = (UErrorCode *)a1[2];
  if (*(int *)v6 <= 0)
  {
    UErrorCode v7 = v10;
    if (v10 > U_ZERO_ERROR || v5 == 0LL)
    {
      if (v10 <= U_ZERO_ERROR) {
        UErrorCode v7 = U_MEMORY_ALLOCATION_ERROR;
      }
      *unsigned int v6 = v7;
    }
  }

  return a1;
}

uint64_t sub_180805FDC(uint64_t a1)
{
  uint64_t v2 = *(icu::UVector **)(a1 + 24);
  if (*((int *)v2 + 2) >= 1)
  {
    signed int v3 = 0;
    do
    {
      uint64_t v4 = (void *)icu::UVector::elementAt(v2, v3);
      if (v4)
      {
        uint64_t v5 = sub_180803788(v4);
        icu::UMemory::operator delete(v5);
      }

      ++v3;
      uint64_t v2 = *(icu::UVector **)(a1 + 24);
    }

    while (v3 < *((_DWORD *)v2 + 2));
  }

  (*(void (**)(icu::UVector *))(*(void *)v2 + 8LL))(v2);
  return a1;
}

void sub_180806048(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = **(void **)(a1 + 8);
  if (!v3) {
    return;
  }
  **(void **)(a1 + 8) = sub_1807FD5A4(v3, a2);
  if (sub_180802D08(*(void *)(*(void *)a1 + 96LL)))
  {
    unsigned int v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0xA0, v4);
    unint64_t v9 = v6;
    if (v6) {
      sub_1807FD388(v6, 8LL);
    }
    UErrorCode v10 = icu::UMemory::operator new(v8, (icu::UMemory *)0xA0, v7);
    if (!v10)
    {
      **(_DWORD **)(a1 + 16) = 7;
      if (!v9) {
        return;
      }
      goto LABEL_22;
    }

    uint64_t v11 = sub_1807FD388(v10, 3LL);
    if (!v9)
    {
      **(_DWORD **)(a1 + 16) = 7;
LABEL_23:
      uint64_t v21 = (void *)sub_1807FD518(v11);
      icu::UMemory::operator delete(v21);
      return;
    }

    v9[2] = v11;
    uint64_t v5 = *(uint64_t **)(a1 + 8);
    v9[3] = *v5;
    *(void *)(v11 + 8) = v9;
    *(_DWORD *)(v11 + 124) = 2;
    *uint64_t v5 = (uint64_t)v9;
  }

  unsigned int v12 = icu::UMemory::operator new(v5, (icu::UMemory *)0xA0, v4);
  if (!v12)
  {
    **(_DWORD **)(a1 + 16) = 7;
    return;
  }

  unint64_t v9 = v12;
  uint64_t v13 = sub_1807FD388(v12, 8LL);
  __int16 v14 = *(uint64_t ***)(a1 + 8);
  *(void *)(v13 + 16) = *v14;
  unint64_t v15 = *v14;
  v15[1] = v13;
  unsigned int v17 = icu::UMemory::operator new(v15, (icu::UMemory *)0xA0, v16);
  if (!v17)
  {
    v9[3] = 0LL;
    **(_DWORD **)(a1 + 16) = 7;
LABEL_22:
    uint64_t v11 = (uint64_t)v9;
    goto LABEL_23;
  }

  uint64_t v18 = sub_1807FD388(v17, 6LL);
  v9[3] = v18;
  *(void *)(v18 + 8) = v9;
  **(void **)(a1 + 8) = v9;
  sub_1807FD620(**(void **)(a1 + 8), v19);
  sub_180806248(a1, **(int ***)(a1 + 8));
  sub_180806318(a1, **(icu::UVector ****)(a1 + 8));
  sub_1808063FC(a1, **(icu::UVector ****)(a1 + 8));
  sub_1808064DC(a1, **(int ***)(a1 + 8));
  __int16 v20 = *(UErrorCode **)a1;
  if (*(_BYTE *)(*(void *)a1 + 88LL))
  {
    sub_1808065CC((UErrorCode **)a1, **(void **)(a1 + 8));
    __int16 v20 = *(UErrorCode **)a1;
  }

  sub_180806914(a1);
  sub_180806C90(a1);
  sub_180806DDC(a1);
  sub_180804770(a1);
  sub_180806EE0((UErrorCode **)a1);
}

uint64_t sub_180806248(uint64_t result, int *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    int v4 = *a2;
    if (*a2 < 7 && ((0x71u >> v4) & 1) != 0)
    {
      unsigned int v5 = (0x30u >> v4) & 1;
    }

    else
    {
      sub_180806248(result, *((void *)a2 + 2));
      uint64_t result = sub_180806248(v3, *((void *)a2 + 3));
      LOBYTE(v5) = 1;
      switch(*a2)
      {
        case 8:
          LOBYTE(v5) = *(_BYTE *)(*((void *)a2 + 2) + 120LL);
          if ((_BYTE)v5) {
            goto LABEL_11;
          }
          break;
        case 9:
          if (*(_BYTE *)(*((void *)a2 + 2) + 120LL)) {
            LOBYTE(v5) = 1;
          }
          else {
LABEL_11:
          }
            LOBYTE(v5) = *(_BYTE *)(*((void *)a2 + 3) + 120LL) != 0;
          break;
        case 10:
        case 12:
          break;
        default:
          LOBYTE(v5) = 0;
          break;
      }
    }

    *((_BYTE *)a2 + 120) = v5;
  }

  return result;
}

void sub_180806318(uint64_t a1, icu::UVector **a2)
{
  if (a2)
  {
    if ((*(_DWORD *)a2 - 3) <= 3)
    {
      icu::UVector::addElement(a2[17], a2, *(UErrorCode **)(a1 + 16));
      return;
    }

    sub_180806318(a1, a2[2]);
    sub_180806318(a1, a2[3]);
    int v4 = *(_DWORD *)a2;
    if ((*(_DWORD *)a2 - 10) >= 3)
    {
      if (v4 == 8)
      {
        sub_1808070C0(a1, (unsigned int *)a2[17], *((unsigned int **)a2[2] + 17));
        if (!*((_BYTE *)a2[2] + 120)) {
          return;
        }
      }

      else
      {
        if (v4 != 9) {
          return;
        }
        sub_1808070C0(a1, (unsigned int *)a2[17], *((unsigned int **)a2[2] + 17));
      }

      unsigned int v5 = (unsigned int *)a2[17];
      unsigned int v6 = a2[3];
    }

    else
    {
      unsigned int v5 = (unsigned int *)a2[17];
      unsigned int v6 = a2[2];
    }

    sub_1808070C0(a1, v5, *((unsigned int **)v6 + 17));
  }

void sub_1808063FC(uint64_t a1, icu::UVector **a2)
{
  if (a2)
  {
    if ((*(_DWORD *)a2 - 3) <= 3)
    {
      icu::UVector::addElement(a2[18], a2, *(UErrorCode **)(a1 + 16));
      return;
    }

    sub_1808063FC(a1, a2[2]);
    sub_1808063FC(a1, a2[3]);
    int v4 = *(_DWORD *)a2;
    if (v4 != 8)
    {
      if (v4 != 9) {
        return;
      }
      sub_1808070C0(a1, (unsigned int *)a2[18], *((unsigned int **)a2[2] + 18));
      unsigned int v5 = (unsigned int *)a2[18];
      unsigned int v6 = a2[3];
      goto LABEL_9;
    }

    sub_1808070C0(a1, (unsigned int *)a2[18], *((unsigned int **)a2[3] + 18));
    if (*((_BYTE *)a2[3] + 120))
    {
LABEL_5:
      unsigned int v5 = (unsigned int *)a2[18];
      unsigned int v6 = a2[2];
LABEL_9:
      sub_1808070C0(a1, v5, *((unsigned int **)v6 + 18));
    }
  }

void sub_1808064DC(uint64_t a1, int *a2)
{
  if (a2)
  {
    if (*a2 != 3 && *a2 != 6)
    {
      sub_1808064DC(a1, *((void *)a2 + 2));
      sub_1808064DC(a1, *((void *)a2 + 3));
      int v5 = *a2;
      if (*a2 == 8)
      {
        unsigned int v6 = *(icu::UVector **)(*((void *)a2 + 2) + 144LL);
        if (!*((_DWORD *)v6 + 2)) {
          return;
        }
        unsigned int v7 = 0;
        do
        {
          uint64_t v8 = icu::UVector::elementAt(v6, v7);
          sub_1808070C0(a1, *(unsigned int **)(v8 + 152), *(unsigned int **)(*((void *)a2 + 3) + 136LL));
          ++v7;
        }

        while (v7 < *((_DWORD *)v6 + 2));
        int v5 = *a2;
      }

      if ((v5 & 0xFFFFFFFE) == 0xA)
      {
        unint64_t v9 = (icu::UVector *)*((void *)a2 + 18);
        if (*((_DWORD *)v9 + 2))
        {
          unsigned int v10 = 0;
          do
          {
            uint64_t v11 = icu::UVector::elementAt(v9, v10);
            sub_1808070C0(a1, *(unsigned int **)(v11 + 152), *((unsigned int **)a2 + 17));
            ++v10;
            unint64_t v9 = (icu::UVector *)*((void *)a2 + 18);
          }

          while (v10 < *((_DWORD *)v9 + 2));
        }
      }
    }
  }

void sub_1808065CC(UErrorCode **a1, uint64_t a2)
{
  uint64_t v28 = 0LL;
  memset(v27, 0, sizeof(v27));
  icu::UVector::UVector((icu::UVector *)v27, a1[2]);
  uint64_t v26 = 0LL;
  memset(v25, 0, sizeof(v25));
  icu::UVector::UVector((icu::UVector *)v25, a1[2]);
  int v4 = a1[2];
  if (*(int *)v4 <= 0)
  {
    sub_1807FD6B4(a2, (icu::UVector *)v27, 6LL, v4);
    sub_1807FD6B4(a2, (icu::UVector *)v25, 3LL, a1[2]);
    int v5 = a1[2];
    if (*(int *)v5 <= 0)
    {
      uint64_t v24 = 0LL;
      memset(v23, 0, sizeof(v23));
      icu::UVector::UVector((icu::UVector *)v23, v5);
      sub_180804D20((uint64_t)a1, (icu::UVector *)v23, a2);
      uint64_t v22 = 0LL;
      memset(v21, 0, sizeof(v21));
      icu::UVector::UVector((icu::UVector *)v21, a1[2]);
      if (SDWORD2(v23[0]) >= 1)
      {
        signed int v6 = 0;
        do
        {
          uint64_t v7 = icu::UVector::elementAt((icu::UVector *)v23, v6);
          if (*(_BYTE *)(v7 + 130)) {
            sub_1808070C0((uint64_t)a1, (unsigned int *)v21, *(unsigned int **)(v7 + 136));
          }
          ++v6;
        }

        while (v6 < SDWORD2(v23[0]));
      }

      if (*(int *)a1[2] <= 0 && SDWORD2(v25[0]) >= 1)
      {
        for (signed int i = 0; i < SDWORD2(v25[0]); ++i)
        {
          uint64_t v9 = icu::UVector::elementAt((icu::UVector *)v25, i);
          if (SDWORD2(v27[0]) >= 1)
          {
            uint64_t v10 = v9;
            unsigned int v11 = 0;
            while (1)
            {
              unsigned int v12 = *(icu::UVector **)(v10 + 152);
              uint64_t v13 = icu::UVector::elementAt((icu::UVector *)v27, v11);
              if ((icu::UVector::indexOf(v12, v13, 0LL) & 0x80000000) == 0) {
                break;
              }
            }

            __int16 v14 = *a1;
            if (!*((_BYTE *)*a1 + 89) && !*((_BYTE *)v14 + 91)) {
              goto LABEL_29;
            }
            UChar32 v15 = sub_180802D10(*((void *)v14 + 12), *(_DWORD *)(v10 + 124));
            if (v15 == -1) {
              goto LABEL_29;
            }
            UChar32 v16 = v15;
            unsigned int v17 = *a1;
            if (*((_BYTE *)*a1 + 89))
            {
              if (u_getIntPropertyValue(v15, UCHAR_LINE_BREAK) == 9) {
                continue;
              }
              unsigned int v17 = *a1;
            }

            if (*((_BYTE *)v17 + 91))
            {
              if (u_getIntPropertyValue(v16, UCHAR_GRAPHEME_CLUSTER_BREAK) != 12 && SDWORD2(v21[0]) > 0)
              {
LABEL_30:
                signed int v19 = 0;
                do
                {
                  uint64_t v20 = icu::UVector::elementAt((icu::UVector *)v21, v19);
                  if (*(_DWORD *)v20 == 3 && *(_DWORD *)(v10 + 124) == *(_DWORD *)(v20 + 124)) {
                    sub_1808070C0((uint64_t)a1, *(unsigned int **)(v10 + 152), *(unsigned int **)(v20 + 152));
                  }
                  ++v19;
                }

                while (v19 < SDWORD2(v21[0]));
              }
            }

            else
            {
LABEL_29:
              if (SDWORD2(v21[0]) >= 1) {
                goto LABEL_30;
              }
            }
          }

LABEL_35:
          ;
        }
      }

      icu::UVector::~UVector((icu::UVector *)v21);
      icu::UVector::~UVector((icu::UVector *)v23);
    }
  }

  icu::UVector::~UVector((icu::UVector *)v25);
  icu::UVector::~UVector((icu::UVector *)v27);
}

  else {
    uint64_t v28 = v7 + 1;
  }
  uint64_t result = sub_18080FDAC((void **)(a1 + 96), (_DWORD *)(a1 + 48), *(char *)(a1 + 113), 12 * (int)v28);
  if ((_DWORD)result)
  {
    uint64_t v29 = 0LL;
    unsigned int v30 = 0;
    LOBYTE(v3icu::UVector32::~UVector32(this + 1) = 0;
    uint64_t v32 = *(uint64_t **)(a1 + 96);
    LOBYTE(v33) = 126;
    do
    {
      unint64_t v34 = 0LL;
      unint64_t v35 = v30;
      int v36 = v4[v30];
      uint64_t v37 = v30;
      else {
        int v33 = v4[v30];
      }
      else {
        unint64_t v31 = v4[v30];
      }
      __int128 v38 = (uint64_t)&v4[v30 + 1];
      else {
        unsigned int v30 = v5;
      }
      unint64_t v39 = v37 + 1;
      while (1)
      {
        uint64_t v40 = v39 + v34;
        __int128 v41 = *(unsigned __int8 *)(v38 + v34++);
        if (v41 != v36)
        {
          unsigned int v30 = v35 + v34;
          break;
        }
      }

      __int128 v42 = (uint64_t)v32 + 12 * v29;
      *(_DWORD *)__int128 v42 = v35;
      *(void *)(v42 + 4) = (v30 - v35);
      ++v29;
    }

    while (v40 < (int)v5);
    if (v3 > (int)v5)
    {
      __int128 v43 = (_DWORD *)v32 + 3 * v29;
      *__int128 v43 = v5;
      v43[1] = v3 - v5;
    }

    *(void *)(a1 + 320) = v32;
    *(_DWORD *)(a1 + 312) = v28;
    if ((v33 | 1) < v31)
    {
      uint64_t v44 = v28 - (*(_DWORD *)(a1 + 212) < *(_DWORD *)(a1 + 20));
      uint64_t v45 = v31 - 1;
      if (v33 < v45)
      {
        uint64_t v46 = *(void *)(a1 + 136);
        do
        {
          if (v44 >= 1)
          {
            for (signed int i = 0; i < v44; signed int i = v57 + 1)
            {
              uint64_t v48 = i;
              uint64_t v49 = (int *)v32 + 3 * i;
              uint64_t v50 = i + 1;
              uint64_t v51 = i - 1LL;
              uint64_t v52 = v49;
              while (1)
              {
                __int128 v53 = *v52;
                v52 += 3;
                ++v48;
                ++v50;
                ++v51;
                uint64_t v49 = v52;
                if (v48 >= v44) {
                  goto LABEL_74;
                }
              }

              int v54 = v49;
              uint64_t v55 = 3LL;
              int v56 = v48;
              do
              {
                BOOL v57 = v50;
                int v58 = v51;
                BOOL v59 = v54;
                if (++v56 >= v44) {
                  break;
                }
                BOOL v60 = *(unsigned __int8 *)(v46 + v49[v55]);
                ++v50;
                v55 += 3LL;
                ++v51;
                v54 += 3;
              }

              while (v60 >= v45);
              if ((int)v48 < v57 - 1)
              {
                BOOL v61 = 0LL;
                do
                {
                  BOOL v62 = &v49[v61];
                  uint64_t v63 = *(void *)&v49[v61];
                  int v76 = v49[v61 + 2];
                  uint64_t v64 = v59[2];
                  *(void *)BOOL v62 = *(void *)v59;
                  v62[2] = v64;
                  *(void *)BOOL v59 = v63;
                  v59[2] = v76;
                  ++v48;
                  v61 += 3LL;
                  v59 -= 3;
                  uint64_t v26 = v48 < v58--;
                }

                while (v26);
              }

              if (v44 == v57) {
                break;
              }
            }
          }

            uint64_t v21 = -1;
LABEL_36:
            goto LABEL_37;
          }

          if (v21 <= 0xEF)
          {
            uint64_t v22 = v20 & 0xF;
            unint64_t v23 = *(_BYTE *)(a4 + v18) & 0x3F;
            goto LABEL_21;
          }

          if (v21 > 0xF4) {
            goto LABEL_35;
          }
          uint64_t v22 = *(unsigned __int8 *)(a4 + v18);
          uint64_t v18 = v14 + 2LL;
          if (v14 + 2 != v12)
          {
            unint64_t v23 = *(unsigned __int8 *)(a4 + v18) ^ 0x80;
            if (v23 > 0x3F)
            {
              uint64_t v21 = -1;
              goto LABEL_37;
            }

            LODWORD(v22) = v22 & 0x3F | ((v21 - 240) << 6);
LABEL_21:
            LODWORD(v18) = v18 + 1;
            if ((_DWORD)v18 != v12)
            {
              uint64_t v24 = v23 | ((_DWORD)v22 << 6);
              goto LABEL_25;
            }
          }
        }

        uint64_t v21 = -1;
        LODWORD(v18) = v12;
LABEL_37:
        int v27 = v14;
        while (1)
        {
          uint64_t v28 = v18;
          uint64_t v29 = v21;
          if (((unsigned __int16)a2 & 0x400) == 0)
          {
            uint64_t result = u_charType(v21);
            if (((1 << result) & 0xF020E2E) != 0) {
              goto LABEL_62;
            }
            if ((_DWORD)result != 4) {
              goto LABEL_43;
            }
            uint64_t v29 = v21;
          }

          uint64_t result = ucase_getType(v29);
          if ((_DWORD)result) {
            goto LABEL_62;
          }
LABEL_43:
          if (v28 == v12) {
            break;
          }
          unsigned int v30 = v28 + 1LL;
          unint64_t v31 = *(char *)(a4 + v28);
          uint64_t v32 = *(unsigned __int8 *)(a4 + v28);
          int v27 = v28;
          LODWORD(v18) = v28 + 1;
          uint64_t v21 = v32;
          if (v31 < 0)
          {
            uint64_t v21 = -1;
            int v27 = v28;
            LODWORD(v18) = v12;
            if ((_DWORD)v30 != v12)
            {
              if (v32 < 0xE0)
              {
                int v27 = v28;
                LODWORD(v18) = v28 + 1;
                if (v32 >= 0xC2)
                {
                  int v36 = v32 & 0x1F;
                  LODWORD(v18) = v28 + 1;
                  goto LABEL_54;
                }
              }

              else if (v32 > 0xEF)
              {
                int v27 = v28;
                LODWORD(v18) = v28 + 1;
                if (v32 <= 0xF4)
                {
                  __int128 v38 = v32 - 240;
                  int v33 = *(unsigned __int8 *)(a4 + v30);
                  int v27 = v28;
                  LODWORD(v18) = v28 + 1;
                  if (((byte_180A01C78[v33 >> 4] >> v38) & 1) != 0)
                  {
                    unsigned int v30 = v28 + 2LL;
                    int v27 = v28;
                    LODWORD(v18) = v12;
                    if (v28 + 2 != v12)
                    {
                      unint64_t v34 = *(unsigned __int8 *)(a4 + v30) ^ 0x80;
                      int v27 = v28;
                      LODWORD(v18) = v28 + 2;
                      if (v34 <= 0x3F)
                      {
                        LODWORD(v33) = v33 & 0x3F | (v38 << 6);
                        goto LABEL_50;
                      }
                    }
                  }
                }
              }

              else
              {
                int v33 = v31 & 0xF;
                int v27 = v28;
                LODWORD(v18) = v28 + 1;
                if (((a00000000000000[v33] >> (*(_BYTE *)(a4 + v30) >> 5)) & 1) != 0)
                {
                  unint64_t v34 = *(_BYTE *)(a4 + v30) & 0x3F;
LABEL_50:
                  unint64_t v35 = v30 + 1;
                  int v27 = v28;
                  LODWORD(v18) = v12;
                  if (v35 != v12)
                  {
                    int v36 = v34 | ((_DWORD)v33 << 6);
                    LODWORD(v18) = v35;
LABEL_54:
                    uint64_t v37 = *(unsigned __int8 *)(a4 + (int)v18) ^ 0x80;
                    int v27 = v28;
                    if (v37 <= 0x3F)
                    {
                      uint64_t v21 = v37 | (v36 << 6);
                      LODWORD(v18) = v18 + 1;
                      int v27 = v28;
                    }
                  }
                }
              }
            }
          }
        }

        uint64_t v28 = v12;
        int v27 = v12;
LABEL_62:
        unint64_t v39 = (const unsigned __int8 *)(v27 - v14);
        if (v27 > v14)
        {
          if (*a8 <= 0)
          {
            goto LABEL_68;
          }

          return result;
        }

    signed int v6 = v10 - v15;
    uint64_t v3 = v15 + v9;
    if (!(v15 + v9)) {
      return a3;
    }
  }

  if (!icu::UnicodeSet::contains(v25, v12))
  {
    UChar32 v15 = -1;
    goto LABEL_13;
  }

  return v10;
}

    ;
  }

  while (v12 + (_DWORD)v8);
  return 0LL;
}

        uint64_t v28 = v34;
      }

      if ((_DWORD)v31 != (_DWORD)v28) {
        break;
      }
      LODWORD(v3icu::UVector32::~UVector32(this + 1) = ~(_DWORD)v28;
      if (~(_DWORD)v28 < 0) {
        goto LABEL_54;
      }
LABEL_40:
      int v36 = icu::UVector::elementAt((icu::UVector *)a2, v31);
      uint64_t v63 = 0;
      v73 = 0LL;
      int v71 = 0u;
      BOOL v72 = 0u;
      BOOL v70 = 0u;
      int v69 = off_18971B688;
      LOWORD(v70) = 2;
      (*(void (**)(uint64_t, icu::UnicodeString *, void (***)(icu::UnicodeString *__hidden), int *))(*(void *)v60 + 24LL))( v60,  v12,  &v69,  &v63);
      BOOL v68 = 0LL;
      BOOL v66 = 0u;
      unint64_t v67 = 0u;
      uint64_t v65 = 0u;
      uint64_t v64 = off_18971B688;
      LOWORD(v65) = 2;
      (*(void (**)(uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden), int *))(*(void *)v60 + 24LL))( v60,  v36,  &v64,  &v63);
      uint64_t v37 = 0;
      __int128 v38 = v63;
      if (v63 <= 0)
      {
        unint64_t v39 = icu::UnicodeString::countChar32((icu::UnicodeString *)&v69, 0, 0x7FFFFFFF);
        uint64_t v40 = icu::UnicodeString::countChar32((icu::UnicodeString *)&v64, 0, 0x7FFFFFFF);
        if (v39 == v40)
        {
          __int128 v38 = (unsigned __int16)v65;
          if ((v65 & 1) != 0)
          {
            uint64_t v44 = (v70 & 1) == 0;
          }

          else
          {
            if ((v70 & 0x8000u) == 0LL) {
              __int128 v41 = (unsigned __int16)v70 >> 5;
            }
            else {
              __int128 v41 = DWORD1(v70);
            }
            if ((v65 & 0x8000u) == 0LL) {
              __int128 v42 = (unsigned __int16)v65 >> 5;
            }
            else {
              __int128 v42 = DWORD1(v65);
            }
            if ((v65 & 2) != 0) {
              __int128 v43 = (char *)&v65 + 2;
            }
            else {
              __int128 v43 = (char *)v66;
            }
            uint64_t v44 = icu::UnicodeString::doCompareCodePointOrder( (uint64_t)&v69,  0,  v41,  (uint64_t)v43,  v42 & (v42 >> 31),  v42 & ~(v42 >> 31));
          }

          if (v44)
          {
LABEL_69:
            uint64_t v37 = (v44 >> 7) & 1;
          }

          else
          {
            __int128 v38 = *(unsigned __int16 *)(v36 + 8);
            if ((v38 & 1) == 0)
            {
              uint64_t v46 = *((unsigned __int16 *)v12 + 4);
              uint64_t v47 = (__int16)v46;
              uint64_t v48 = v46 >> 5;
              if (v47 >= 0) {
                uint64_t v49 = v48;
              }
              else {
                uint64_t v49 = *((_DWORD *)v12 + 3);
              }
              if ((v38 & 0x8000u) == 0LL) {
                uint64_t v50 = v38 >> 5;
              }
              else {
                uint64_t v50 = *(_DWORD *)(v36 + 12);
              }
              if ((v38 & 2) != 0) {
                uint64_t v51 = v36 + 10;
              }
              else {
                uint64_t v51 = *(void *)(v36 + 24);
              }
              uint64_t v44 = icu::UnicodeString::doCompareCodePointOrder( (uint64_t)v12,  0,  v49,  v51,  v50 & (v50 >> 31),  v50 & ~(v50 >> 31));
              goto LABEL_69;
            }

            uint64_t v37 = 0;
          }
        }

        else
        {
          uint64_t v37 = v39 < v40;
        }
      }

      icu::UnicodeString::~UnicodeString((void *)v38, (icu::UnicodeString *)&v64);
      icu::UnicodeString::~UnicodeString(v52, (icu::UnicodeString *)&v69);
      if (v37)
      {
        __int128 v53 = sub_18089371C((UChar **)v12, &v61, a3);
        icu::UVector::setElementAt((uint64_t)a2, v53, v31);
      }

    ++v6;
  }

  while (v6 != 448);
  unint64_t v23 = *((unsigned __int16 *)this + 3656);
  else {
    uint64_t v24 = v23 >> 5;
  }
  if (v24 > v26)
  {
    int v33 = 511;
    icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)&v33, 0, 1LL);
    LOWORD(v23) = *((_WORD *)this + 3656);
  }

  if ((v23 & 1) == 0) {
    return 1LL;
  }
  uint64_t result = 0LL;
  *a2 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

  UChar32 v15 = 1;
LABEL_36:
  if ((v12 & 0x80u) == 0) {
    __int16 v14 = v15;
  }
  else {
    __int16 v14 = -v15;
  }
LABEL_39:
  switch(a5)
  {
    case 1:
    case 4:
    case 6:
      if (a5 == 4 && !v14)
      {
        uint64_t v18 = *(_DWORD *)(a2 + 4);
        signed int v19 = *(_DWORD *)(a3 + 4);
        if (v18 == v19)
        {
          *(_WORD *)(a1 + 8) = 0;
          *(void *)a1 = 1LL;
          return a1;
        }

        if (v18 < v19) {
          int v27 = -1;
        }
        else {
          int v27 = 1;
        }
        else {
          __int16 v14 = -v27;
        }
        goto LABEL_63;
      }

      *(_WORD *)(a1 + 8) = 0;
      uint64_t v20 = (_BYTE *)(a1 + 8);
      *(void *)a1 = 1LL;
      uint64_t v21 = (_BYTE *)(a1 + 9);
      if (v14) {
        goto LABEL_64;
      }
      break;
    case 5:
      return a1;
    default:
      int v36 = 0;
      if (!v14)
      {
        uint64_t v22 = *(_BYTE *)(a2 + 8);
        unint64_t v23 = *(_BYTE *)(a3 + 8);
        if ((v22 & 0x80) == (v23 & 0x80))
        {
          uint64_t v24 = v23 & v22;
          if (*(_DWORD *)(a2 + 4) > *(_DWORD *)(a3 + 4)) {
            uint64_t v25 = 1;
          }
          else {
            uint64_t v25 = -1;
          }
          if (*(_DWORD *)(a2 + 4) <= *(_DWORD *)(a3 + 4)) {
            uint64_t v26 = 1;
          }
          else {
            uint64_t v26 = -1;
          }
          if (v24 < 0) {
            __int16 v14 = v26;
          }
          else {
            __int16 v14 = v25;
          }
        }

        else if ((*(_BYTE *)(a2 + 8) & 0x80) != 0)
        {
          __int16 v14 = -1;
        }

        else
        {
          __int16 v14 = 1;
        }
      }

      if (a5 == 8 || a5 == 3) {
        __int16 v14 = -v14;
      }
      goto LABEL_72;
  }

  return a1;
}

    if ((v10 & 0x20) == 0 && v17 != 1) {
      return a1[2];
    }
    *(void *)uint64_t v65 = &v11[v17];
  }

  else
  {
    UChar32 v16 = 0;
  }

  uint64_t v20 = (unsigned __int8 *)*((void *)a1 + 3);
  if (v20)
  {
    if ((v10 & 0x40) == 0)
    {
      if (*v20 == v12)
      {
        if ((v10 & 0x14) != 0)
        {
          if ((v10 & 4) != 0)
          {
LABEL_110:
            *a5 = (*(void *)v65 - (void)a2) >> 1;
            __int128 v41 = !v16;
            __int128 v42 = INFINITY;
            __int128 v43 = 0xFFF0000000000000LL;
LABEL_121:
            uint64_t v46 = *(double *)&v43;
            goto LABEL_122;
          }
        }

        else if (*(unsigned __int16 **)v65 != v6)
        {
          return a1[2];
        }

        goto LABEL_110;
      }

      uint64_t v21 = (unsigned __int8 *)*((void *)a1 + 4);
      if (!v21) {
        goto LABEL_55;
      }
      goto LABEL_50;
    }

    unsigned int v30 = (uint64_t *)(v6 + 480);
    unint64_t v31 = v6 + 488;
    uint64_t v32 = (uint64_t *)(v6 + 496);
    int v33 = v6 + 504;
    v228 = 0u;
    v230 = 0u;
    v229 = 0u;
    v227 = (char *)&v228 + 5;
    LODWORD(v228) = 40;
    v231 = 0LL;
    v216 = *v15;
    unint64_t v34 = (_OWORD *)icu::UMemory::operator new[]((icu::UMemory *)0x1D0, v23);
    if (v34)
    {
      v166 = v33;
      v184 = (icu::UnicodeString *)v30;
      *unint64_t v34 = xmmword_180A37A10;
      unint64_t v35 = (char *)(v34 + 1);
      int v36 = v34 + 1;
      do
      {
        *(void *)int v36 = off_18971B688;
        *((_WORD *)v36 + 4) = 2;
        v36 += 4;
      }

      while (v36 != v34 + 29);
      *((void *)this + 59) = v35;
      uint64_t v37 = sub_1808DF4B0((icu::CharString *)&v227, "monthPatterns", "format", "wide", &v216);
      sub_1808DF378(v35, 0, (uint64_t)&v233, v37, (int *)&v216);
      __int128 v38 = (char *)*((void *)this + 59);
      unint64_t v39 = sub_1808DF4B0((icu::CharString *)&v227, "monthPatterns", "format", "abbreviated", &v216);
      sub_1808DF378(v38, 1u, (uint64_t)&v233, v39, (int *)&v216);
      uint64_t v40 = (char *)*((void *)this + 59);
      __int128 v41 = sub_1808DF4B0((icu::CharString *)&v227, "monthPatterns", "format", "narrow", &v216);
      sub_1808DF378(v40, 2u, (uint64_t)&v233, v41, (int *)&v216);
      __int128 v42 = (char *)*((void *)this + 59);
      __int128 v43 = sub_1808DF4B0((icu::CharString *)&v227, "monthPatterns", "stand-alone", "wide", &v216);
      sub_1808DF378(v42, 3u, (uint64_t)&v233, v43, (int *)&v216);
      uint64_t v44 = (char *)*((void *)this + 59);
      uint64_t v45 = sub_1808DF4B0((icu::CharString *)&v227, "monthPatterns", "stand-alone", "abbreviated", &v216);
      sub_1808DF378(v44, 4u, (uint64_t)&v233, v45, (int *)&v216);
      uint64_t v46 = (char *)*((void *)this + 59);
      uint64_t v47 = sub_1808DF4B0((icu::CharString *)&v227, "monthPatterns", "stand-alone", "narrow", &v216);
      sub_1808DF378(v46, 5u, (uint64_t)&v233, v47, (int *)&v216);
      uint64_t v48 = (char *)*((void *)this + 59);
      uint64_t v49 = sub_1808DF4B0((icu::CharString *)&v227, "monthPatterns", "numeric", "all", &v216);
      sub_1808DF378(v48, 6u, (uint64_t)&v233, v49, (int *)&v216);
      uint64_t v50 = *((void *)this + 59);
      if (v216 <= U_ZERO_ERROR)
      {
        uint64_t v51 = (char **)v177;
        if (*(unsigned __int16 *)(v50 + 72) <= 0x1Fu)
        {
          icu::UnicodeString::copyFrom((UChar **)(v50 + 64), (UChar **)v50, 0);
          uint64_t v50 = *((void *)this + 59);
        }

        int v56 = v181;
        unsigned int v30 = (uint64_t *)v184;
        if (*(unsigned __int16 *)(v50 + 136) <= 0x1Fu)
        {
          icu::UnicodeString::copyFrom((UChar **)(v50 + 128), (UChar **)(v50 + 320), 0);
          uint64_t v50 = *((void *)this + 59);
        }

        if (*(unsigned __int16 *)(v50 + 200) <= 0x1Fu)
        {
          icu::UnicodeString::copyFrom((UChar **)(v50 + 192), (UChar **)v50, 0);
          uint64_t v50 = *((void *)this + 59);
        }

        *((_DWORD *)this + 120) = 7;
      }

      else
      {
        uint64_t v51 = (char **)v177;
        if (v50)
        {
          uint64_t v52 = (void *)(v50 - 16);
          __int128 v53 = *(void **)(v50 - 8);
          if (v53)
          {
            int v54 = (void)v53 << 6;
            uint64_t v55 = v50 - 64;
            do
            {
              icu::UnicodeString::~UnicodeString(v53, (icu::UnicodeString *)(v55 + v54));
              v54 -= 64LL;
            }

            while (v54);
          }

          icu::UMemory::operator delete[](v52);
        }

        *((void *)this + 59) = 0LL;
        int v56 = v181;
        unsigned int v30 = (uint64_t *)v184;
        int v33 = v166;
      }
    }

    else
    {
      *((void *)this + 59) = 0LL;
      int v56 = v181;
      uint64_t v51 = (char **)v177;
    }

    v216 = *v15;
    BOOL v57 = sub_1808DF5D4((icu::CharString *)&v227, "years", &v216);
    sub_1808DF4F0(v30, v31, (uint64_t)&v233, v57, (int *)&v216);
    int v58 = sub_1808DF5D4((icu::CharString *)&v227, "zodiacs", &v216);
    sub_1808DF4F0(v32, v33, (uint64_t)&v233, v58, (int *)&v216);
    v216 = U_ZERO_ERROR;
    BOOL v59 = ures_open(0LL, v51[5], (int *)&v216);
    if (v216 <= U_ZERO_ERROR)
    {
      BOOL v60 = v59;
      BOOL v61 = ures_getByKeyWithFallback(v59, "contextTransforms", 0LL, &v216);
      if (v216 <= U_ZERO_ERROR)
      {
        uint64_t v63 = v61;
        NextResource = ures_getNextResource(v61, 0LL, (int *)&v216);
        if (NextResource)
        {
          uint64_t v65 = NextResource;
          do
          {
            IntVecto__int16 r = ures_getIntVector((uint64_t)v65, &v219, (int *)v15);
            if (v216 <= U_ZERO_ERROR && IntVector != 0LL && v219 >= 2)
            {
              int v69 = IntVector;
              Key = ures_getKey((uint64_t)v65);
              if (Key)
              {
                int v71 = (const char *)Key;
                BOOL v72 = &off_189722C48;
                v73 = "day-format-except-narrow";
                while (1)
                {
                  unint64_t v74 = strcmp(v71, v73);
                  if (v74 < 1) {
                    break;
                  }
                  v75 = *v72;
                  v72 += 2;
                  v73 = v75;
                  if (!v75) {
                    goto LABEL_73;
                  }
                }

                if (!v74)
                {
                  int v76 = (char *)this + 2 * *((unsigned int *)v72 - 2);
                  v76[832] = *v69;
                  v76[833] = v69[1];
                }
              }
            }

  icu::StringCharacterIterator::~StringCharacterIterator((icu::StringCharacterIterator *)v19);
  return v11;
}

  uint64_t v32 = 0u;
  int v33 = 0u;
  unint64_t v35 = 0LL;
  unint64_t v34 = 0u;
  unint64_t v31 = (UChar *)off_18971B688;
  LOWORD(v32) = 2;
  icu::UnicodeString::copyFrom(&v31, (UChar **)(a1 + 16), 0);
  int v27 = 0u;
  uint64_t v28 = 0u;
  unsigned int v30 = 0LL;
  uint64_t v29 = 0u;
  uint64_t v26 = off_18971B688;
  LOWORD(v27) = 2;
  unsigned int v17 = *(void *)(a1 + 88);
  if (v17)
  {
    (*(void (**)(uint64_t, void (***)(icu::UnicodeString *__hidden)))(*(void *)v17 + 40LL))( v17,  &v26);
    if ((v27 & 0x8000u) == 0LL) {
      uint64_t v18 = (unsigned __int16)v27 >> 5;
    }
    else {
      uint64_t v18 = DWORD1(v27);
    }
    icu::UnicodeString::doReplace( (icu::UnicodeString *)&v31,  *(unsigned int *)(*(void *)(a1 + 88) + 8LL),  0LL,  (const icu::UnicodeString *)&v26,  0,  v18);
  }

  signed int v19 = *(void *)(a1 + 80);
  if (v19)
  {
    (*(void (**)(uint64_t, void (***)(icu::UnicodeString *__hidden)))(*(void *)v19 + 40LL))( v19,  &v26);
    if ((v27 & 0x8000u) == 0LL) {
      uint64_t v20 = (unsigned __int16)v27 >> 5;
    }
    else {
      uint64_t v20 = DWORD1(v27);
    }
    icu::UnicodeString::doReplace( (icu::UnicodeString *)&v31,  *(unsigned int *)(*(void *)(a1 + 80) + 8LL),  0LL,  (const icu::UnicodeString *)&v26,  0,  v20);
  }

  if ((v32 & 0x8000u) == 0LL) {
    uint64_t v21 = (unsigned __int16)v32 >> 5;
  }
  else {
    uint64_t v21 = DWORD1(v32);
  }
  icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v31, 0, v21);
  uint64_t v25 = 59;
  icu::UnicodeString::doAppend(a2, (uint64_t)&v25, 0, 1LL);
  icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v26);
  return icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v31);
}

    memset(v43, 0, sizeof(v43));
    icu::UnicodeString::UnicodeString((uint64_t)v43, v23);
    int v4 = v37;
    (*(void (**)(uint64_t, void, uint64_t, _OWORD *))(*(void *)a2 + 32LL))(a2, v37, v16, v43);
    LODWORD(v32) = WORD4(v43[0]) >> 5;
    if ((SWORD4(v43[0]) & 0x8000u) == 0) {
      uint64_t v32 = v32;
    }
    else {
      uint64_t v32 = HIDWORD(v43[0]);
    }
    int v5 = v37 + v38 - v16 + v32;
    uint64_t result = (uint64_t)icu::UnicodeString::~UnicodeString((void *)v32, (icu::UnicodeString *)v43);
LABEL_39:
    if ((int)v4 < v5)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80LL))(a2, v4);
      else {
        int v33 = 2;
      }
      int v4 = (v33 + v4);
    }
  }

  while ((int)v4 < v5);
LABEL_48:
  unint64_t v34 = v5 - a3[3] + a3[1];
  a3[2] = v4;
  a3[3] = v5;
  a3[1] = v34;
  return result;
}

            uint64_t v21 = v7;
LABEL_36:
            if (v21 < 0xC0
              || !icu::CollationFCD::tcccIndex[(unint64_t)v21 >> 5]
              || ((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[(unint64_t)v21 >> 5]] >> v21) & 1) == 0)
            {
              return v7;
            }

            if ((v7 & 0x1FFF01) == 0xF01) {
              goto LABEL_40;
            }
            if (v7 >= 0x80)
            {
              if (v7 >= 0x800)
              {
LABEL_40:
                if (v7 >> 11 >= 0x1B)
                {
                  else {
                    unint64_t v23 = -3;
                  }
                  else {
                    uint64_t v22 = 0;
                  }
                }

                else
                {
                  uint64_t v22 = -3;
                }

                goto LABEL_54;
              }

              uint64_t v22 = -2;
            }

            else
            {
              uint64_t v22 = -1;
            }

void sub_180806870(uint64_t a1)
{
  if (**(int **)(a1 + 16) <= 0)
  {
    uint64_t v2 = *(void *)(**(void **)(a1 + 8) + 16LL);
    uint64_t v3 = *(icu::UVector **)(*(void *)(v2 + 24) + 136LL);
    if (*((int *)v3 + 2) >= 1)
    {
      signed int v4 = 0;
      uint64_t v5 = *(void *)(v2 + 16);
      do
      {
        uint64_t v6 = icu::UVector::elementAt(v3, v4);
        if (*(_DWORD *)v6 == 3 && *(_DWORD *)(v6 + 124) == *(_DWORD *)(v5 + 124)) {
          sub_1808070C0(a1, *(unsigned int **)(v5 + 152), *(unsigned int **)(v6 + 152));
        }
        ++v4;
      }

      while (v4 < *((_DWORD *)v3 + 2));
    }
  }

void sub_180806914(uint64_t a1)
{
  int v2 = sub_180802CFC(*(void *)(*(void *)a1 + 96LL));
  uint64_t v5 = icu::UMemory::operator new(v4, (icu::UMemory *)0x30, v3);
  uint64_t v7 = *(UErrorCode **)(a1 + 16);
  if (!v5)
  {
    *uint64_t v7 = U_MEMORY_ALLOCATION_ERROR;
    return;
  }

  uint64_t v8 = v5;
  sub_180804D98((uint64_t)v5, (v2 - 1), v7, v6);
  unsigned int v11 = (icu::UVector *)icu::UMemory::operator new(v10, (icu::UMemory *)0x28, v9);
  if (!v11)
  {
    v8[4] = 0LL;
    **(_DWORD **)(a1 + 16) = 7;
LABEL_13:
    uint64_t v24 = sub_180803788(v8);
    icu::UMemory::operator delete(v24);
    return;
  }

  v8[4] = (uint64_t)icu::UVector::UVector(v11, *(UErrorCode **)(a1 + 16));
  unsigned int v12 = *(UErrorCode **)(a1 + 16);
  icu::UVector::addElement(*(icu::UVector **)(a1 + 24), v8, v12);
  __int16 v14 = (uint64_t *)**(unsigned int **)(a1 + 16);
  UChar32 v15 = icu::UMemory::operator new(v14, (icu::UMemory *)0x30, v13);
  unsigned int v17 = *(UErrorCode **)(a1 + 16);
  if (!v15)
  {
    *unsigned int v17 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_13;
  }

  uint64_t v18 = v15;
  sub_180804D98((uint64_t)v15, (v2 - 1), v17, v16);
  uint64_t v20 = (uint64_t *)**(unsigned int **)(a1 + 16);
  uint64_t v21 = (icu::UVector *)icu::UMemory::operator new(v20, (icu::UMemory *)0x28, v19);
  uint64_t v22 = (unsigned int *)v21;
  unint64_t v23 = *(UErrorCode **)(a1 + 16);
  if (v21) {
    icu::UVector::UVector(v21, v23);
  }
  else {
    *unint64_t v23 = U_MEMORY_ALLOCATION_ERROR;
  }
  v18[4] = (uint64_t)v22;
  sub_1808070C0(a1, v22, *(unsigned int **)(**(void **)(a1 + 8) + 136LL));
  icu::UVector::addElement(*(icu::UVector **)(a1 + 24), v18, *(UErrorCode **)(a1 + 16));
  uint64_t v26 = *(int **)(a1 + 24);
  if (v26[2] < 2) {
    return;
  }
  for (signed int i = 1; ; signed int i = 1)
  {
    while (1)
    {
      uint64_t v28 = (_BYTE *)icu::UVector::elementAt((icu::UVector *)v26, i);
      if (!*v28) {
        break;
      }
      ++i;
      uint64_t v26 = *(int **)(a1 + 24);
      if (i >= v26[2]) {
        return;
      }
    }

    uint64_t v29 = v28;
    *uint64_t v28 = 1;
    if (v2 >= 2) {
      break;
    }
LABEL_47:
    uint64_t v26 = *(int **)(a1 + 24);
    if (v26[2] <= 1) {
      return;
    }
  }

  unsigned int v30 = 1;
  while (1)
  {
    unint64_t v31 = (int *)*((void *)v29 + 4);
    if (v31[2] >= 1) {
      break;
    }
LABEL_46:
    if (++v30 == v2) {
      goto LABEL_47;
    }
  }

  signed int v32 = 0;
  int v33 = 0LL;
  do
  {
    unint64_t v34 = (unsigned int **)icu::UVector::elementAt((icu::UVector *)v31, v32);
    if (*(_DWORD *)v34 == 3)
    {
      int v36 = v34;
      uint64_t v37 = (uint64_t *)*((unsigned int *)v34 + 31);
      if ((_DWORD)v37 == v30)
      {
        if (!v33)
        {
          __int128 v38 = (icu::UVector *)icu::UMemory::operator new(v37, (icu::UMemory *)0x28, v35);
          unint64_t v39 = *(UErrorCode **)(a1 + 16);
          if (!v38) {
            goto LABEL_49;
          }
          int v33 = (unsigned int *)v38;
          icu::UVector::UVector(v38, *(UErrorCode **)(a1 + 16));
        }

        sub_1808070C0(a1, v33, v36[19]);
      }
    }

    ++v32;
    unint64_t v31 = (int *)*((void *)v29 + 4);
  }

  while (v32 < v31[2]);
  if (!v33) {
    goto LABEL_46;
  }
  uint64_t v40 = *(unsigned int **)(a1 + 24);
  __int128 v41 = (uint64_t *)v40[2];
  if ((int)v41 >= 1)
  {
    int v42 = 0;
    while (1)
    {
      uint64_t v43 = icu::UVector::elementAt((icu::UVector *)v40, v42);
      ++v42;
      uint64_t v40 = *(unsigned int **)(a1 + 24);
      __int128 v41 = (uint64_t *)v40[2];
    }

    (*(void (**)(unsigned int *))(*(void *)v33 + 8LL))(v33);
    goto LABEL_45;
  }

void sub_180806C90(uint64_t a1)
{
  uint64_t v1 = *(UErrorCode **)(a1 + 16);
  if (*(int *)v1 <= 0)
  {
    uint64_t v11 = 0LL;
    memset(v10, 0, sizeof(v10));
    icu::UVector::UVector((icu::UVector *)v10, v1);
    unint64_t v3 = *(UErrorCode **)(a1 + 16);
    if (*(int *)v3 <= 0)
    {
      sub_1807FD6B4(**(void **)(a1 + 8), (icu::UVector *)v10, 6LL, v3);
      if (**(int **)(a1 + 16) <= 0 && SDWORD2(v10[0]) >= 1)
      {
        signed int v4 = 0;
        do
        {
          uint64_t v5 = icu::UVector::elementAt((icu::UVector *)v10, v4);
          uint64_t v6 = *(icu::UVector **)(a1 + 24);
          if (*((int *)v6 + 2) >= 1)
          {
            signed int v7 = 0;
            do
            {
              uint64_t v8 = icu::UVector::elementAt(v6, v7);
              if ((icu::UVector::indexOf(*(icu::UVector **)(v8 + 32), v5, 0LL) & 0x80000000) == 0)
              {
                int v9 = *(_DWORD *)(v8 + 4);
                if (!v9)
                {
                  int v9 = *(_DWORD *)(v5 + 124);
                  if (!v9) {
                    int v9 = -1;
                  }
                  *(_DWORD *)(v8 + 4) = v9;
                }

                if (v9 == -1)
                {
                  int v9 = *(_DWORD *)(v5 + 124);
                  if (v9) {
                    *(_DWORD *)(v8 + 4) = v9;
                  }
                  else {
                    int v9 = -1;
                  }
                }

                if (*(_BYTE *)(v5 + 128)) {
                  *(_DWORD *)(v8 + 8) = v9;
                }
              }

              ++v7;
              uint64_t v6 = *(icu::UVector **)(a1 + 24);
            }

            while (v7 < *((_DWORD *)v6 + 2));
          }

          ++v4;
        }

        while (v4 < SDWORD2(v10[0]));
      }
    }

    icu::UVector::~UVector((icu::UVector *)v10);
  }

void sub_180806DDC(uint64_t a1)
{
  uint64_t v1 = *(UErrorCode **)(a1 + 16);
  if (*(int *)v1 <= 0)
  {
    uint64_t v9 = 0LL;
    memset(v8, 0, sizeof(v8));
    icu::UVector::UVector((icu::UVector *)v8, v1);
    sub_1807FD6B4(**(void **)(a1 + 8), (icu::UVector *)v8, 4LL, *(UErrorCode **)(a1 + 16));
    if (**(int **)(a1 + 16) <= 0 && SDWORD2(v8[0]) >= 1)
    {
      signed int v3 = 0;
      do
      {
        uint64_t v4 = icu::UVector::elementAt((icu::UVector *)v8, v3);
        uint64_t v5 = *(icu::UVector **)(a1 + 24);
        if (*((int *)v5 + 2) >= 1)
        {
          signed int v6 = 0;
          do
          {
            uint64_t v7 = icu::UVector::elementAt(v5, v6);
            if ((icu::UVector::indexOf(*(icu::UVector **)(v7 + 32), v4, 0LL) & 0x80000000) == 0) {
              *(_DWORD *)(v7 + 8) = *(_DWORD *)(v4 + 124);
            }
            ++v6;
            uint64_t v5 = *(icu::UVector **)(a1 + 24);
          }

          while (v6 < *((_DWORD *)v5 + 2));
        }

        ++v3;
      }

      while (v3 < SDWORD2(v8[0]));
    }

    icu::UVector::~UVector((icu::UVector *)v8);
  }

icu::UVector *sub_180806EE0(UErrorCode **a1)
{
  int v2 = (icu::UVector *)*((void *)*a1 + 18);
  if (!*((_DWORD *)v2 + 2))
  {
    icu::UVector::addElement(v2, 1, a1[2]);
    icu::UVector::addElement(*((icu::UVector **)*a1 + 18), 0, a1[2]);
  }

  uint64_t result = (icu::UVector *)a1[3];
  if (*((int *)result + 2) >= 1)
  {
    signed int v4 = 0;
    do
    {
      uint64_t v5 = icu::UVector::elementAt(result, v4);
      uint64_t v6 = v5;
      uint64_t v7 = *(int **)(v5 + 16);
      if (v7)
      {
        *(_DWORD *)(v5 + 24) = -1;
        uint64_t v8 = (int *)*((void *)*a1 + 18);
        if (v8[2] < 1) {
          goto LABEL_21;
        }
        unsigned int v9 = 0;
        while (1)
        {
          int v10 = icu::UVector::elementAti((icu::UVector *)v8, v9);
          unsigned int v11 = v9 + 1;
          int v12 = v7[2];
          if (v12 == icu::UVector::elementAti(*((icu::UVector **)*a1 + 18), v9))
          {
            int v13 = v7[2];
            if (v13 < 1)
            {
              signed int i = 0;
            }

            else
            {
              for (signed int i = 0; i < v13; ++i)
              {
                int v15 = icu::UVector::elementAti((icu::UVector *)v7, i);
                int v16 = icu::UVector::elementAti(*((icu::UVector **)*a1 + 18), v11 + i);
                int v13 = v7[2];
                if (v15 != v16) {
                  break;
                }
              }
            }

            if (i == v13) {
              break;
            }
          }

          unsigned int v9 = v11 + v10;
          uint64_t v8 = (int *)*((void *)*a1 + 18);
          if ((int)(v11 + v10) >= v8[2])
          {
            unsigned int v9 = *(_DWORD *)(v6 + 24);
            goto LABEL_20;
          }
        }

        *(_DWORD *)(v6 + 24) = v9;
LABEL_20:
        if (v9 == -1)
        {
LABEL_21:
          unsigned int v17 = (icu::UVector *)*((void *)*a1 + 18);
          *(_DWORD *)(v6 + 24) = *((_DWORD *)v17 + 2);
          icu::UVector::addElement(v17, v7[2], a1[2]);
          if (v7[2] >= 1)
          {
            signed int v18 = 0;
            do
            {
              unint64_t v19 = (icu::UVector *)*((void *)*a1 + 18);
              int v20 = icu::UVector::elementAti((icu::UVector *)v7, v18);
              icu::UVector::addElement(v19, v20, a1[2]);
              ++v18;
            }

            while (v18 < v7[2]);
          }
        }
      }

      else
      {
        *(_DWORD *)(v5 + 24) = 0;
      }

      ++v4;
      uint64_t result = (icu::UVector *)a1[3];
    }

    while (v4 < *((_DWORD *)result + 2));
  }

  return result;
}

void sub_1808070C0(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v6 = a2[2];
  uint64_t v7 = a3[2];
  memset(v31, 0, sizeof(v31));
  uint64_t v32 = 0LL;
  uint64_t v8 = (void **)&v31[2];
  uint64_t v29 = 0LL;
  unsigned int v30 = (void **)&v31[2];
  v31[0] = 16;
  memset(v28, 0, sizeof(v28));
  int v27 = (void **)v28 + 1;
  if ((int)v6 >= 17)
  {
    unsigned int v9 = (void **)uprv_malloc(8 * v6);
    if (!v9) {
      goto LABEL_35;
    }
    uint64_t v8 = v9;
    if (LOBYTE(v31[1])) {
      uprv_free(v30);
    }
    unsigned int v30 = v8;
    v31[0] = v6;
    LOBYTE(v31[1]) = 1;
  }

  if ((int)v7 <= 16)
  {
    unsigned int v11 = (void **)v28 + 1;
  }

  else
  {
    int v10 = (void **)uprv_malloc(8 * v7);
    if (!v10) {
      goto LABEL_35;
    }
    unsigned int v11 = v10;
    if (BYTE4(v28[0])) {
      uprv_free((char *)v28 + 8);
    }
    int v27 = v11;
    BYTE4(v28[0]) = 1;
  }

  int v12 = &v8[(int)v6];
  int v13 = &v11[(int)v7];
  icu::UVector::toArray((icu::UVector *)a2, v8);
  icu::UVector::toArray((icu::UVector *)a3, v11);
  icu::UVector::setSize((uint64_t (**)(void))a2, v7 + v6, *(UErrorCode **)(a1 + 16));
  unsigned int v14 = 0;
  if ((int)v7 >= 1 && (int)v6 >= 1)
  {
    unsigned int v14 = 0;
    do
    {
      int v15 = *v8;
      int v16 = *v11;
      if (*v8 == *v11)
      {
        ++v11;
        icu::UVector::setElementAt((uint64_t)a2, v15, v14);
        ++v8;
      }

      else
      {
        unint64_t v17 = bswap64((unint64_t)*v8);
        unint64_t v18 = bswap64((unint64_t)*v11);
        BOOL v19 = v17 >= v18;
        BOOL v20 = v17 > v18;
        int v21 = !v19;
        if (v20 - v21 < 0)
        {
          ++v8;
          uint64_t v22 = (uint64_t)a2;
        }

        else
        {
          ++v11;
          uint64_t v22 = (uint64_t)a2;
          int v15 = v16;
        }

        icu::UVector::setElementAt(v22, v15, v14);
      }

      ++v14;
    }

    while (v11 < v13 && v8 < v12);
  }

  if (v8 >= v12)
  {
    unsigned int v24 = v14;
  }

  else
  {
    do
    {
      unint64_t v23 = *v8++;
      unsigned int v24 = v14 + 1;
      icu::UVector::setElementAt((uint64_t)a2, v23, v14++);
    }

    while (v8 < v12);
  }

  if (v11 >= v13)
  {
    int v26 = v24;
  }

  else
  {
    do
    {
      uint64_t v25 = *v11++;
      int v26 = v24 + 1;
      icu::UVector::setElementAt((uint64_t)a2, v25, v24++);
    }

    while (v11 < v13);
  }

  icu::UVector::setSize((uint64_t (**)(void))a2, v26, *(UErrorCode **)(a1 + 16));
LABEL_35:
  if (BYTE4(v28[0])) {
    uprv_free(v27);
  }
  if (LOBYTE(v31[1])) {
    uprv_free(v30);
  }
}

uint64_t sub_180807364(uint64_t a1)
{
  if (!**(void **)(a1 + 8)) {
    return 0LL;
  }
  int v1 = *(_DWORD *)(*(void *)(a1 + 24) + 8LL);
  return (2 * sub_180802CFC(*(void *)(*(void *)a1 + 96LL)) + 8) * v1 + 16;
}

uint64_t sub_1808073B4(uint64_t result, unsigned int *a2)
{
  if (**(int **)(result + 16) <= 0)
  {
    int v2 = (void *)result;
    if (**(void **)(result + 8))
    {
      uint64_t result = sub_180802CFC(*(void *)(*(void *)result + 96LL));
      if ((int)result < 0x8000 && *(int *)(v2[3] + 8LL) < 0x8000)
      {
        int v4 = sub_180802CFC(*(void *)(*v2 + 96LL));
        *a2 = *(_DWORD *)(v2[3] + 8LL);
        a2[1] = 2 * v4 + 8;
        a2[2] = *(_BYTE *)(*v2 + 90LL) != 0;
        uint64_t result = sub_180802D08(*(void *)(*v2 + 96LL));
        if ((_DWORD)result) {
          a2[2] |= 2u;
        }
        a2[3] = 0;
        if (*a2)
        {
          unsigned int v5 = 0;
          do
          {
            uint64_t v6 = icu::UVector::elementAt((icu::UVector *)v2[3], v5);
            uint64_t v7 = a2[1] * v5;
            uint64_t v8 = (_WORD *)((char *)a2 + v7 + 16);
            int v9 = *(_DWORD *)(v6 + 8);
            _WORD *v8 = *(_DWORD *)(v6 + 4);
            v8[1] = v9;
            _OWORD v8[2] = *(_DWORD *)(v6 + 24);
            uint64_t result = sub_180802CFC(*(void *)(*v2 + 96LL));
            if ((int)result >= 1)
            {
              uint64_t v10 = 0LL;
              unsigned int v11 = (char *)a2 + v7 + 24;
              do
              {
                uint64_t v12 = *(void *)(v6 + 40);
                uint64_t v13 = *(int *)(v12 + 8);
                else {
                  LOWORD(v15) = 0;
                }
                *(_WORD *)&v11[2 * v10++] = v15;
                uint64_t result = sub_180802CFC(*(void *)(*v2 + 96LL));
              }

              while (v10 < (int)result);
            }

            ++v5;
          }

          while (v5 < *a2);
        }
      }

      else
      {
        *(_DWORD *)v2[2] = 66048;
      }
    }
  }

  return result;
}

unint64_t icu::RuleBasedTokenizer::tokenize(uint64_t a1, int a2, uint64_t *a3, void *a4)
{
  __int128 v38 = *(__int16 **)(a1 + 584);
  uint64_t v7 = *(void *)(a1 + 520);
  uint64_t v8 = *(void *)(v7 + 8);
  int v9 = *(_DWORD *)(v8 + 4);
  uint64_t v10 = *(UText **)(a1 + 488);
  *(_BYTE *)(a1 + 532) = 0;
  uint64_t chunkOffset = v10->chunkOffset;
  if ((int)chunkOffset <= v10->nativeIndexingLimit)
  {
    uint64_t v12 = v10->chunkNativeStart + chunkOffset;
  }

  else
  {
    uint64_t v12 = ((uint64_t (*)(UText *))v10->pFuncs->mapOffsetToNative)(v10);
    uint64_t v7 = *(void *)(a1 + 520);
  }

  uint64_t v37 = a3;
  if (a2 < 1) {
    return (unint64_t)((char *)a3 - (char *)v37) >> 4;
  }
  unsigned int v41 = 0;
  uint64_t v13 = v8 + 16;
  unint64_t v39 = &a3[2 * a2];
  while (2)
  {
    uint64_t v14 = v10->chunkOffset;
    if ((int)v14 >= v10->chunkLength || (unsigned int v15 = v10->chunkContents[v14], v15 >> 11 > 0x1A))
    {
      unsigned int v15 = utext_next32(v10);
      if (v15 == -1) {
        return (unint64_t)((char *)a3 - (char *)v37) >> 4;
      }
    }

    else
    {
      v10->uint64_t chunkOffset = v14 + 1;
    }

    uint64_t v16 = *(void *)(a1 + 544);
    if (v16)
    {
      int v17 = *(_DWORD *)(a1 + 556);
      if (v17 < *(_DWORD *)(a1 + 552) - 1)
      {
        int v18 = v17 + 1;
        *(_DWORD *)(a1 + 556) = v18;
        uint64_t v19 = *(int *)(v16 + 4LL * v18);
        goto LABEL_44;
      }

      (*(void (**)(uint64_t))(*(void *)a1 + 200LL))(a1);
    }

    uint64_t v19 = v12;
    BOOL v20 = v38;
    do
    {
      if ((int)v15 <= 255)
      {
        int v21 = *(unsigned __int16 *)(*(void *)(a1 + 600) + 2LL * (int)v15);
        if ((v21 & 0x4000) != 0) {
          goto LABEL_27;
        }
        goto LABEL_28;
      }

      if (!HIWORD(v15))
      {
        uint64_t v22 = *(void *)(v7 + 64);
        if (v15 >> 10 == 54) {
          int v23 = 320;
        }
        else {
          int v23 = 0;
        }
        unsigned int v24 = v23 + (v15 >> 5);
LABEL_26:
        int v21 = *(unsigned __int16 *)(v22 + 2LL * ((v15 & 0x1F) + 4 * *(unsigned __int16 *)(v22 + 2LL * v24)));
        if ((v21 & 0x4000) == 0) {
          goto LABEL_28;
        }
LABEL_27:
        ++*(_DWORD *)(a1 + 536);
        v21 &= ~0x4000u;
        goto LABEL_28;
      }

      if (HIWORD(v15) <= 0x10u)
      {
        int v25 = (*(uint64_t (**)(void))(v7 + 80))(*(unsigned __int16 *)(*(void *)(v7 + 64)
                                                                                + 2LL
                                                                                * (((v15 >> 10) & 0x1F)
                                                                                 + 4
                                                                                 * *(unsigned __int16 *)(*(void *)(v7 + 64) + 2LL * (((v15 >> 10) + 55232) >> 5)))));
        if (v25 >= 1)
        {
          uint64_t v22 = *(void *)(v7 + 64);
          unsigned int v24 = v25 + ((v15 >> 5) & 0x1F);
          goto LABEL_26;
        }
      }

      int v21 = *(unsigned __int16 *)(v7 + 96);
      if ((v21 & 0x4000) != 0) {
        goto LABEL_27;
      }
LABEL_28:
      unsigned int v26 = (unsigned __int16)v20[v21 + 4];
      BOOL v20 = (__int16 *)(v13 + v9 * v26);
      if (*v20 == -1)
      {
        uint64_t v27 = v10->chunkOffset;
        else {
          uint64_t v19 = ((uint64_t (*)(UText *))v10->pFuncs->mapOffsetToNative)(v10);
        }
        unsigned int v41 = v26;
      }

      if (!v26) {
        break;
      }
      uint64_t v28 = v10->chunkOffset;
      else {
        v10->uint64_t chunkOffset = v28 + 1;
      }
    }

    while (v15 != -1);
    if (*(_DWORD *)(a1 + 536)) {
      uint64_t v19 = (int)icu::RuleBasedBreakIterator57::checkDictionary((UText **)a1, v12, v19, 0);
    }
LABEL_44:
    int64_t chunkNativeStart = v10->chunkNativeStart;
    int64_t v30 = v19;
    if (v19 == v12)
    {
      uint64_t v31 = v12 - chunkNativeStart;
      if (v31 < 0 || v31 >= v10->nativeIndexingLimit || v10->chunkContents[v31] >> 10 > 0x36u)
      {
        utext_setNativeIndex(v10, v12);
        LODWORD(v3icu::UVector32::~UVector32(this + 1) = v10->chunkOffset;
      }

      else
      {
        v10->uint64_t chunkOffset = v31;
      }

      if ((int)v31 >= v10->chunkLength || v10->chunkContents[(int)v31] >> 11 > 0x1Au)
      {
        utext_next32(v10);
        int32_t v32 = v10->chunkOffset;
      }

      else
      {
        int32_t v32 = v31 + 1;
        v10->uint64_t chunkOffset = v31 + 1;
      }

      if (v32 <= v10->nativeIndexingLimit)
      {
        int64_t chunkNativeStart = v10->chunkNativeStart;
        int v33 = chunkNativeStart + v32;
      }

      else
      {
        int v33 = ((uint64_t (*)(UText *))v10->pFuncs->mapOffsetToNative)(v10);
        int64_t chunkNativeStart = v10->chunkNativeStart;
      }

      int64_t v30 = v33;
    }

    uint64_t v34 = v30 - chunkNativeStart;
    if (v34 < 0 || v34 >= v10->nativeIndexingLimit || v10->chunkContents[v34] >> 10 > 0x36u) {
      utext_setNativeIndex(v10, v30);
    }
    else {
      v10->uint64_t chunkOffset = v34;
    }
    if (v19 == v12)
    {
      int v35 = 0;
      break;
    }

    int v35 = *(_DWORD *)(*(void *)(a1 + 592) + 4LL * v41);
    if (v35 == -1)
    {
LABEL_70:
      uint64_t v12 = v30;
      if (a3 >= v39) {
        return (unint64_t)((char *)a3 - (char *)v37) >> 4;
      }
      continue;
    }

    break;
  }

  *a3 = v12;
  a3[1] = v30 - v12;
  if (a4) {
    *a4++ = v35;
  }
  else {
    a4 = 0LL;
  }
  a3 += 2;
  if ((v35 & 0x40000000) == 0) {
    goto LABEL_70;
  }
  return (unint64_t)((char *)a3 - (char *)v37) >> 4;
}

_DWORD *icu::RuleBasedTokenizer::init(icu::RuleBasedTokenizer *this)
{
  int v2 = *(unsigned int **)(*((void *)this + 65) + 8LL);
  (*(void (**)(icu::RuleBasedTokenizer *, uint64_t))(*(void *)this + 208LL))(this, 1LL);
  signed int v3 = v2 + 4;
  uint64_t v4 = v2[1];
  *((void *)this + 73) = (char *)v2 + v4 + 16;
  uint64_t v5 = *((void *)this + 65);
  uint64_t v6 = operator new[](0x200uLL);
  uint64_t v7 = 0LL;
  *((void *)this + 75) = v6;
  uint64_t v8 = *(void *)(v5 + 64);
  do
  {
    v6[v7] = *(_WORD *)(v8 + 2 * ((v7 & 0x1F) + 4LL * *(unsigned __int16 *)(v8 + 2LL * (v7 >> 5))));
    ++v7;
  }

  while (v7 != 256);
  uint64_t v9 = *v2;
  uint64_t result = operator new[](4 * v9);
  *((void *)this + 74) = result;
  if ((_DWORD)v9)
  {
    int v11 = 0;
    do
    {
      uint64_t v12 = (__int16 *)((char *)v3 + (v4 * v11));
      if (*v12 == -1 && (uint64_t v15 = v12[2]) != 0)
      {
        int v13 = 0;
        uint64_t v16 = (int *)(*(void *)(v5 + 48) + 4 * v15);
        uint64_t v18 = *v16;
        int v17 = v16 + 1;
        uint64_t v19 = &v17[v18];
        do
        {
          if (v17 >= v19) {
            break;
          }
          int v21 = *v17++;
          int v20 = v21;
          BOOL v22 = v21 == 0;
          BOOL v23 = v21 <= 0;
          int v24 = v21 <= 0 ? 0 : v13;
          int v25 = v24 | v20;
          if (!v22) {
            int v13 = v25;
          }
        }

        while (!v23);
      }

      else
      {
        int v13 = 0;
      }

      result[(unsigned __int16)v11] = v13;
      unsigned __int16 v14 = v11 + 1;
      int v11 = (unsigned __int16)(v11 + 1);
    }

    while (v9 > v14);
  }

  return result;
}

icu::RuleBasedTokenizer *icu::RuleBasedTokenizer::RuleBasedTokenizer( icu::RuleBasedTokenizer *this, const icu::UnicodeString *a2, UParseError *a3, UErrorCode *a4)
{
  uint64_t v6 = icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57(this, a2, a3, a4);
  *(void *)uint64_t v6 = off_18970FFE8;
  *((_OWORD *)v6 + 37) = 0u;
  return this;
}

icu::RuleBasedTokenizer *icu::RuleBasedTokenizer::RuleBasedTokenizer( icu::RuleBasedTokenizer *this, unsigned __int8 *a2, UErrorCode *a3)
{
  uint64_t v5 = icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57((uint64_t)this, (uint64_t)a2, (int *)a3);
  *(void *)uint64_t v5 = off_18970FFE8;
  *(_OWORD *)(v5 + 592) = 0u;
  return this;
}

icu::RuleBasedTokenizer *icu::RuleBasedTokenizer::RuleBasedTokenizer( icu::RuleBasedTokenizer *a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v6 = icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57((uint64_t)a1, a2, 0LL, a4);
  *(void *)uint64_t v6 = off_18970FFE8;
  *(_OWORD *)(v6 + 592) = 0u;
  if (*a4 <= 0) {
    icu::RuleBasedTokenizer::init(a1);
  }
  return a1;
}

void icu::RuleBasedTokenizer::~RuleBasedTokenizer(icu::RuleBasedTokenizer *this)
{
  *(void *)this = off_18970FFE8;
  int v2 = (void *)*((void *)this + 74);
  if (v2) {
    operator delete[](v2);
  }
  signed int v3 = (void *)*((void *)this + 75);
  if (v3) {
    operator delete[](v3);
  }
  icu::RuleBasedBreakIterator57::~RuleBasedBreakIterator57(this);
}

{
  void *v1;
  icu::RuleBasedTokenizer::~RuleBasedTokenizer(this);
  icu::UMemory::operator delete(v1);
}

void *icu::ResourceBundle::getStaticClassID(icu::ResourceBundle *this)
{
  return &unk_18C534E38;
}

void *icu::ResourceBundle::getDynamicClassID(icu::ResourceBundle *this)
{
  return &unk_18C534E38;
}

icu::ResourceBundle *icu::ResourceBundle::ResourceBundle(icu::ResourceBundle *this, UErrorCode *a2)
{
  *(void *)this = off_1897100E8;
  *((void *)this + 2) = 0LL;
  Default = icu::Locale::getDefault(this);
  *((void *)this + icu::UVector32::~UVector32(this + 1) = ures_open(0LL, (char *)Default[5], (int *)a2);
  return this;
}

{
  uint64_t *Default;
  *(void *)this = off_1897100E8;
  *((void *)this + 2) = 0LL;
  Default = icu::Locale::getDefault(this);
  *((void *)this + icu::UVector32::~UVector32(this + 1) = ures_open(0LL, (char *)Default[5], (int *)a2);
  return this;
}

icu::ResourceBundle *icu::ResourceBundle::ResourceBundle( icu::ResourceBundle *this, const icu::ResourceBundle *a2)
{
  *(void *)this = off_1897100E8;
  *((void *)this + 2) = 0LL;
  int v6 = 0;
  signed int v3 = (__int128 *)*((void *)a2 + 1);
  if (v3) {
    uint64_t v4 = sub_18086E224(0LL, v3, &v6);
  }
  else {
    uint64_t v4 = 0LL;
  }
  *((void *)this + icu::UVector32::~UVector32(this + 1) = v4;
  return this;
}

{
  __int128 *v3;
  char *v4;
  int v6;
  *(void *)this = off_1897100E8;
  *((void *)this + 2) = 0LL;
  int v6 = 0;
  signed int v3 = (__int128 *)*((void *)a2 + 1);
  if (v3) {
    uint64_t v4 = sub_18086E224(0LL, v3, &v6);
  }
  else {
    uint64_t v4 = 0LL;
  }
  *((void *)this + icu::UVector32::~UVector32(this + 1) = v4;
  return this;
}

void *icu::ResourceBundle::ResourceBundle(void *a1, __int128 *a2, int *a3)
{
  *a1 = off_1897100E8;
  a1[2] = 0LL;
  uint64_t v4 = 0LL;
  if (a2) {
    uint64_t v4 = sub_18086E224(0LL, a2, a3);
  }
  a1[1] = v4;
  return a1;
}

{
  char *v4;
  *a1 = off_1897100E8;
  a1[2] = 0LL;
  uint64_t v4 = 0LL;
  if (a2) {
    uint64_t v4 = sub_18086E224(0LL, a2, a3);
  }
  a1[1] = v4;
  return a1;
}

icu::ResourceBundle *icu::ResourceBundle::ResourceBundle( icu::ResourceBundle *this, const char *a2, char **a3, UErrorCode *a4)
{
  *(void *)this = off_1897100E8;
  *((void *)this + 2) = 0LL;
  *((void *)this + icu::UVector32::~UVector32(this + 1) = ures_open(a2, a3[5], (int *)a4);
  return this;
}

{
  *(void *)this = off_1897100E8;
  *((void *)this + 2) = 0LL;
  *((void *)this + icu::UVector32::~UVector32(this + 1) = ures_open(a2, a3[5], (int *)a4);
  return this;
}

uint64_t icu::ResourceBundle::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      ures_close(v4);
      *(void *)(a1 + 8) = 0LL;
    }

    uint64_t v5 = *(void *)(a1 + 16);
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
      *(void *)(a1 + 16) = 0LL;
    }

    int v9 = 0;
    int v6 = *(__int128 **)(a2 + 8);
    if (v6) {
      uint64_t v7 = sub_18086E224(0LL, v6, &v9);
    }
    else {
      uint64_t v7 = 0LL;
    }
    *(void *)(a1 + 8) = v7;
  }

  return a1;
}

void icu::ResourceBundle::~ResourceBundle(icu::ResourceBundle *this)
{
  *(void *)this = off_1897100E8;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    ures_close(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  icu::UObject::~UObject(this);
}

{
  void *v1;
  icu::ResourceBundle::~ResourceBundle(this);
  icu::UMemory::operator delete(v1);
}

uint64_t *icu::ResourceBundle::clone@<X0>( icu::ResourceBundle *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x18, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    *uint64_t v4 = (uint64_t)off_1897100E8;
    v4[2] = 0LL;
    int v9 = 0;
    int v6 = (__int128 *)*((void *)this + 1);
    if (v6) {
      uint64_t v7 = sub_18086E224(0LL, v6, &v9);
    }
    else {
      uint64_t v7 = 0LL;
    }
    v5[1] = (uint64_t)v7;
  }

  return v5;
}

uint64_t icu::ResourceBundle::getString@<X0>( icu::ResourceBundle *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = 0;
  String = ures_getString(*((void *)this + 1), &v6, (int *)a2);
  return icu::UnicodeString::UnicodeString(a3, 1LL, &String);
}

int *icu::ResourceBundle::getBinary(icu::ResourceBundle *this, int *a2, UErrorCode *a3)
{
  return ures_getBinary(*((void *)this + 1), a2, (int *)a3);
}

int *icu::ResourceBundle::getIntVector(icu::ResourceBundle *this, int *a2, UErrorCode *a3)
{
  return ures_getIntVector(*((void *)this + 1), a2, (int *)a3);
}

uint64_t icu::ResourceBundle::getUInt(icu::ResourceBundle *this, UErrorCode *a2)
{
  return ures_getUInt(*((void *)this + 1), (int *)a2);
}

uint64_t icu::ResourceBundle::getInt(icu::ResourceBundle *this, UErrorCode *a2)
{
  return ures_getInt(*((void *)this + 1), (int *)a2);
}

uint64_t icu::ResourceBundle::getName(icu::ResourceBundle *this)
{
  return sub_18086FFFC(*((void *)this + 1));
}

uint64_t icu::ResourceBundle::getKey(icu::ResourceBundle *this)
{
  return ures_getKey(*((void *)this + 1));
}

uint64_t icu::ResourceBundle::getType(icu::ResourceBundle *this)
{
  return ures_getType(*((void *)this + 1));
}

uint64_t icu::ResourceBundle::getSize(icu::ResourceBundle *this)
{
  return ures_getSize(*((void *)this + 1));
}

BOOL icu::ResourceBundle::hasNext(icu::ResourceBundle *this)
{
  return ures_hasNext(*((void *)this + 1));
}

uint64_t icu::ResourceBundle::resetIterator(icu::ResourceBundle *this)
{
  return ures_resetIterator(*((void *)this + 1));
}

void icu::ResourceBundle::getNext(icu::ResourceBundle *this@<X0>, UErrorCode *a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  uint64_t v7 = 0LL;
  memset(v6, 0, sizeof(v6));
  ures_initStackObject((uint64_t)v6);
  ures_getNextResource(*((void *)this + 1), (uint64_t)v6, (int *)a2);
  *a3 = off_1897100E8;
  a3[2] = 0LL;
  a3[1] = sub_18086E224(0LL, v6, (int *)a2);
}

uint64_t icu::ResourceBundle::getNextString@<X0>( icu::ResourceBundle *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = 0;
  NextString = ures_getNextString(*((void *)this + 1), &v6, 0LL, (int *)a2);
  return icu::UnicodeString::UnicodeString(a3, 1LL, &NextString);
}

uint64_t icu::ResourceBundle::getNextString@<X0>( icu::ResourceBundle *this@<X0>, const char **a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  int v7 = 0;
  NextString = ures_getNextString(*((void *)this + 1), &v7, a2, (int *)a3);
  return icu::UnicodeString::UnicodeString(a4, 1LL, &NextString);
}

void icu::ResourceBundle::get( icu::ResourceBundle *this@<X0>, UErrorCode *a2@<X2>, signed int a3@<W1>, void *a4@<X8>)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  uint64_t v9 = 0LL;
  memset(v8, 0, sizeof(v8));
  ures_initStackObject((uint64_t)v8);
  ures_getByIndex(*((void *)this + 1), a3, (uint64_t)v8, (int *)a2);
  *a4 = off_1897100E8;
  a4[2] = 0LL;
  a4[1] = sub_18086E224(0LL, v8, (int *)a2);
}

uint64_t icu::ResourceBundle::getStringEx@<X0>( icu::ResourceBundle *this@<X0>, UErrorCode *a2@<X2>, signed int a3@<W1>, uint64_t a4@<X8>)
{
  int v7 = 0;
  StringByIndex = ures_getStringByIndex(*((void *)this + 1), a3, &v7, (int *)a2);
  return icu::UnicodeString::UnicodeString(a4, 1LL, &StringByIndex);
}

void icu::ResourceBundle::get( icu::ResourceBundle *this@<X0>, const char *a2@<X1>, UErrorCode *a3@<X2>, void *a4@<X8>)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  uint64_t v9 = 0LL;
  memset(v8, 0, sizeof(v8));
  ures_initStackObject((uint64_t)v8);
  ures_getByKey(*((void *)this + 1), a2, (uint64_t)v8, (int *)a3);
  *a4 = off_1897100E8;
  a4[2] = 0LL;
  a4[1] = sub_18086E224(0LL, v8, (int *)a3);
}

void icu::ResourceBundle::getWithFallback( icu::ResourceBundle *this@<X0>, char *a2@<X1>, UErrorCode *a3@<X2>, void *a4@<X8>)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  uint64_t v9 = 0LL;
  memset(v8, 0, sizeof(v8));
  ures_initStackObject((uint64_t)v8);
  ures_getByKeyWithFallback(*((void *)this + 1), a2, (uint64_t)v8, a3);
  *a4 = off_1897100E8;
  a4[2] = 0LL;
  a4[1] = sub_18086E224(0LL, v8, (int *)a3);
}

uint64_t icu::ResourceBundle::getStringEx@<X0>( icu::ResourceBundle *this@<X0>, const char *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  int v7 = 0;
  StringByKey = ures_getStringByKey(*((void *)this + 1), a2, &v7, (int *)a3);
  return icu::UnicodeString::UnicodeString(a4, 1LL, &StringByKey);
}

char *icu::ResourceBundle::getVersionNumber(icu::ResourceBundle *this)
{
  return ures_getVersionNumberInternal(*((void *)this + 1));
}

void icu::ResourceBundle::getVersion(icu::ResourceBundle *this, unsigned __int8 *a2)
{
}

uint64_t *icu::ResourceBundle::getLocale(icu::ResourceBundle *this)
{
  Default = (uint64_t *)*((void *)this + 2);
  if (!Default)
  {
    int v8 = 0;
    LocaleInternal = (const char *)ures_getLocaleInternal(*((void *)this + 1), &v8);
    int v6 = (icu::Locale *)icu::UMemory::operator new(v5, (icu::UMemory *)0xE0, v4);
    if (v6)
    {
      Default = (uint64_t *)v6;
      *((void *)this + 2) = icu::Locale::Locale(v6, LocaleInternal, 0LL, 0LL, 0LL);
    }

    else
    {
      *((void *)this + 2) = 0LL;
      Default = icu::Locale::getDefault(0LL);
    }
  }

  umtx_unlock((std::mutex **)&unk_18C534E40);
  return Default;
}

uint64_t icu::ResourceBundle::getLocale@<X0>( uint64_t a1@<X0>, int a2@<W1>, int *a3@<X2>, icu::Locale *a4@<X8>)
{
  LocaleByType = (const char *)ures_getLocaleByType(*(void *)(a1 + 8), a2, a3);
  return icu::Locale::Locale(a4, LocaleByType, 0LL, 0LL, 0LL);
}

icu::ResourceBundle *icu::ResourceBundle::ResourceBundle( icu::ResourceBundle *this, UChar **a2, char **a3, UErrorCode *a4)
{
  *(void *)this = off_1897100E8;
  *((void *)this + 2) = 0LL;
  icu::ResourceBundle::constructForLocale(this, a2, a3, a4);
  return this;
}

{
  *(void *)this = off_1897100E8;
  *((void *)this + 2) = 0LL;
  icu::ResourceBundle::constructForLocale(this, a2, a3, a4);
  return this;
}

void *icu::ResourceBundle::constructForLocale( icu::ResourceBundle *this, UChar **a2, char **a3, UErrorCode *a4)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (*((unsigned __int16 *)a2 + 4) <= 0x1Fu)
  {
    uint64_t result = (void *)ures_open(0LL, a3[5], (int *)a4);
    *((void *)this + icu::UVector32::~UVector32(this + 1) = result;
  }

  else
  {
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v11, a2);
    __int16 v10 = 0;
    icu::UnicodeString::doAppend((uint64_t)&v11, (uint64_t)&v10, 0, 1LL);
    if ((BYTE8(v11) & 0x11) != 0)
    {
      int v7 = 0LL;
    }

    else if ((BYTE8(v11) & 2) != 0)
    {
      int v7 = (UChar *)((unint64_t)&v11 | 0xA);
    }

    else
    {
      int v7 = (UChar *)*((void *)&v12 + 1);
    }

    *((void *)this + icu::UVector32::~UVector32(this + 1) = ures_openU(v7, a3[5], (int *)a4);
    return icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v11);
  }

  return result;
}

icu::ResourceBundle *icu::ResourceBundle::ResourceBundle( icu::ResourceBundle *this, UChar **a2, UErrorCode *a3)
{
  *(void *)this = off_1897100E8;
  *((void *)this + 2) = 0LL;
  Default = icu::Locale::getDefault(this);
  icu::ResourceBundle::constructForLocale(this, a2, (char **)Default, a3);
  return this;
}

{
  uint64_t *Default;
  *(void *)this = off_1897100E8;
  *((void *)this + 2) = 0LL;
  Default = icu::Locale::getDefault(this);
  icu::ResourceBundle::constructForLocale(this, a2, (char **)Default, a3);
  return this;
}

uint64_t sub_180808814(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a4;
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

BOOL sub_180808824(void *a1)
{
  if (a1[3]) {
    return 0LL;
  }
  else {
    int v2 = *(unsigned __int16 *)(*a1 + 8LL) >> 5;
  }
  return *(_DWORD *)(a1[1] + 8LL) == v2;
}

uint64_t sub_180808860(uint64_t a1, char a2, _BYTE *a3, int *a4)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (*a4 > 0) {
    return 0xFFFFFFFFLL;
  }
  *a3 = 0;
  do
  {
    while (1)
    {
      uint64_t v4 = sub_180808A9C((uint64_t *)a1);
      int v10 = v4 < 0x10000 ? 1 : 2;
      sub_180808AE4((uint64_t *)a1, v10);
      if ((_DWORD)v4 != 36) {
        break;
      }
      if ((a2 & 1) == 0) {
        break;
      }
      if (*(void *)(a1 + 24)) {
        break;
      }
      uint64_t v11 = *(void *)(a1 + 16);
      if (!v11) {
        break;
      }
      memset(v16, 0, sizeof(v16));
      (*(void (**)(_OWORD *__return_ptr))(*(void *)v11 + 32LL))(v16);
      int v12 = WORD4(v16[0]) >> 5;
      if (SWORD4(v16[0]) < 0) {
        int v12 = HIDWORD(v16[0]);
      }
      if (!v12)
      {
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v16);
        return 36LL;
      }

      *(_DWORD *)(a1 + 32) = 0;
      uint64_t v13 = (*(uint64_t (**)(void, _OWORD *))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16), v16);
      *(void *)(a1 + 24) = v13;
      if (!v13)
      {
        int v14 = 65554;
        goto LABEL_34;
      }

      if ((*(__int16 *)(v13 + 8) & 0x80000000) == 0)
      {
LABEL_22:
        *(void *)(a1 + 24) = 0LL;
        goto LABEL_23;
      }

      if (!*(_DWORD *)(v13 + 12)) {
        goto LABEL_22;
      }
LABEL_23:
      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v16);
    }
  }

  while ((a2 & 4) != 0 && icu::PatternProps::isWhiteSpace((icu::PatternProps *)v4));
  if ((_DWORD)v4 != 92) {
    return v4;
  }
  if ((a2 & 2) == 0) {
    return 92LL;
  }
  memset((char *)v16 + 8, 0, 56);
  *(void *)&v16[0] = off_18971B688;
  WORD4(v16[0]) = 2;
  int v15 = 0;
  sub_180808B5C(a1, (icu::UnicodeString *)v16, 0xCu);
  uint64_t v4 = icu::UnicodeString::unescapeAt((icu::UnicodeString *)v16, &v15);
  sub_180808AE4((uint64_t *)a1, v15);
  *a3 = 1;
  if ((v4 & 0x80000000) == 0)
  {
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v16);
    return v4;
  }

  int v14 = 65540;
LABEL_34:
  *a4 = v14;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v16);
  return 0xFFFFFFFFLL;
}

uint64_t sub_180808A9C(uint64_t *a1)
{
  if (a1[3])
  {
    int v1 = *((_DWORD *)a1 + 8);
    uint64_t v2 = a1[3];
    return icu::UnicodeString::char32At((icu::UnicodeString *)v2, v1);
  }

  uint64_t v2 = *a1;
  int v1 = *(_DWORD *)(a1[1] + 8);
  else {
    int v4 = *(unsigned __int16 *)(v2 + 8) >> 5;
  }
  if (v1 < v4) {
    return icu::UnicodeString::char32At((icu::UnicodeString *)v2, v1);
  }
  return 0xFFFFFFFFLL;
}

uint64_t *sub_180808AE4(uint64_t *result, int a2)
{
  uint64_t v2 = result[3];
  if (v2)
  {
    int v3 = *((_DWORD *)result + 8) + a2;
    *((_DWORD *)result + 8) = v3;
    else {
      int v4 = *(unsigned __int16 *)(v2 + 8) >> 5;
    }
    if (v3 == v4) {
      result[3] = 0LL;
    }
  }

  else
  {
    uint64_t v6 = *result;
    uint64_t v5 = result[1];
    int v7 = *(_DWORD *)(v5 + 8) + a2;
    *(_DWORD *)(v5 + 8) = v7;
    unsigned int v8 = *(unsigned __int16 *)(v6 + 8);
    if ((v8 & 0x8000) != 0)
    {
      signed int v9 = *(_DWORD *)(v6 + 12);
      if (v7 <= v9) {
        return result;
      }
    }

    else
    {
      signed int v9 = v8 >> 5;
    }

    *(_DWORD *)(v5 + 8) = v9;
  }

  return result;
}

icu::UnicodeString *sub_180808B5C(uint64_t a1, icu::UnicodeString *this, unsigned int a3)
{
  if (a3 >= 0x7FFFFFFF) {
    uint64_t v4 = 0x7FFFFFFFLL;
  }
  else {
    uint64_t v4 = a3;
  }
  uint64_t v5 = *(const icu::UnicodeString **)(a1 + 24);
  if (v5)
  {
    int v6 = *(_DWORD *)(a1 + 32);
  }

  else
  {
    uint64_t v5 = *(const icu::UnicodeString **)a1;
    int v6 = *(_DWORD *)(*(void *)(a1 + 8) + 8LL);
  }

  unsigned int v7 = *((unsigned __int16 *)this + 4);
  int v8 = (__int16)v7;
  unsigned int v9 = v7 >> 5;
  if (v8 >= 0) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = *((unsigned int *)this + 3);
  }
  icu::UnicodeString::doReplace(this, 0LL, v10, v5, v6, v4);
  return this;
}

uint64_t sub_180808BC8(uint64_t result, uint64_t a2)
{
  *(void *)a2 = *(void *)(result + 24);
  int v2 = *(_DWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(*(void *)(result + 8) + 8LL);
  *(_DWORD *)(a2 + 12) = v2;
  return result;
}

uint64_t sub_180808BE4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = *(void *)a2;
  int v2 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(*(void *)(result + 8) + 8LL) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + 32) = v2;
  return result;
}

BOOL sub_180808C00(BOOL result, char a2)
{
  if ((a2 & 4) != 0)
  {
    int v2 = (uint64_t *)result;
    int v3 = (icu::PatternProps *)sub_180808A9C((uint64_t *)result);
    unsigned int v4 = v3;
    for (uint64_t result = icu::PatternProps::isWhiteSpace(v3); result; uint64_t result = icu::PatternProps::isWhiteSpace(v6))
    {
      if (v4 < 0x10000) {
        int v5 = 1;
      }
      else {
        int v5 = 2;
      }
      sub_180808AE4(v2, v5);
      int v6 = (icu::PatternProps *)sub_180808A9C(v2);
      unsigned int v4 = v6;
    }
  }

  return result;
}

void *icu::StringCharacterIterator::getStaticClassID(icu::StringCharacterIterator *this)
{
  return &unk_18C534E90;
}

void *icu::StringCharacterIterator::getDynamicClassID(icu::StringCharacterIterator *this)
{
  return &unk_18C534E90;
}

void *icu::StringCharacterIterator::StringCharacterIterator(icu::StringCharacterIterator *this)
{
  uint64_t result = icu::UCharCharacterIterator::UCharCharacterIterator(this);
  void *result = off_189710218;
  result[4] = off_18971B688;
  *((_WORD *)result + 20) = 2;
  return result;
}

{
  void *result;
  uint64_t result = icu::UCharCharacterIterator::UCharCharacterIterator(this);
  void *result = off_189710218;
  result[4] = off_18971B688;
  *((_WORD *)result + 20) = 2;
  return result;
}

icu::StringCharacterIterator *icu::StringCharacterIterator::StringCharacterIterator( icu::StringCharacterIterator *this, const icu::UnicodeString *a2)
{
  unsigned int v4 = *((unsigned __int16 *)a2 + 4);
  if ((v4 & 0x11) != 0)
  {
    int v5 = 0LL;
  }

  else if ((v4 & 2) != 0)
  {
    int v5 = (const UChar *)((char *)a2 + 10);
  }

  else
  {
    int v5 = (const UChar *)*((void *)a2 + 3);
  }

  int v6 = (__int16)v4;
  int v12 = v5;
  int32_t v7 = v4 >> 5;
  if (v6 >= 0) {
    int32_t v8 = v7;
  }
  else {
    int32_t v8 = *((_DWORD *)a2 + 3);
  }
  icu::UCharCharacterIterator::UCharCharacterIterator(this, &v12, v8);
  *(void *)this = off_189710218;
  icu::UnicodeString::UnicodeString((icu::StringCharacterIterator *)((char *)this + 32), (UChar **)a2);
  __int16 v9 = *((_WORD *)this + 20);
  if ((v9 & 0x11) != 0)
  {
    uint64_t v10 = 0LL;
  }

  else if ((v9 & 2) != 0)
  {
    uint64_t v10 = (char *)this + 42;
  }

  else
  {
    uint64_t v10 = (char *)*((void *)this + 7);
  }

  *((void *)this + 3) = v10;
  return this;
}

icu::StringCharacterIterator *icu::StringCharacterIterator::StringCharacterIterator( icu::StringCharacterIterator *this, const icu::UnicodeString *a2, unsigned int a3)
{
  unsigned int v6 = *((unsigned __int16 *)a2 + 4);
  if ((v6 & 0x11) != 0)
  {
    int32_t v7 = 0LL;
  }

  else if ((v6 & 2) != 0)
  {
    int32_t v7 = (const UChar *)((char *)a2 + 10);
  }

  else
  {
    int32_t v7 = (const UChar *)*((void *)a2 + 3);
  }

  int v8 = (__int16)v6;
  int v14 = v7;
  int32_t v9 = v6 >> 5;
  if (v8 >= 0) {
    int32_t v10 = v9;
  }
  else {
    int32_t v10 = *((_DWORD *)a2 + 3);
  }
  icu::UCharCharacterIterator::UCharCharacterIterator(this, &v14, v10, a3);
  *(void *)this = off_189710218;
  icu::UnicodeString::UnicodeString((icu::StringCharacterIterator *)((char *)this + 32), (UChar **)a2);
  __int16 v11 = *((_WORD *)this + 20);
  if ((v11 & 0x11) != 0)
  {
    int v12 = 0LL;
  }

  else if ((v11 & 2) != 0)
  {
    int v12 = (char *)this + 42;
  }

  else
  {
    int v12 = (char *)*((void *)this + 7);
  }

  *((void *)this + 3) = v12;
  return this;
}

icu::StringCharacterIterator *icu::StringCharacterIterator::StringCharacterIterator( icu::StringCharacterIterator *this, const icu::UnicodeString *a2, unsigned int a3, signed int a4, int a5)
{
  unsigned int v10 = *((unsigned __int16 *)a2 + 4);
  if ((v10 & 0x11) != 0)
  {
    __int16 v11 = 0LL;
  }

  else if ((v10 & 2) != 0)
  {
    __int16 v11 = (const UChar *)((char *)a2 + 10);
  }

  else
  {
    __int16 v11 = (const UChar *)*((void *)a2 + 3);
  }

  int v12 = (__int16)v10;
  uint64_t v18 = v11;
  int32_t v13 = v10 >> 5;
  if (v12 >= 0) {
    int32_t v14 = v13;
  }
  else {
    int32_t v14 = *((_DWORD *)a2 + 3);
  }
  icu::UCharCharacterIterator::UCharCharacterIterator(this, &v18, v14, a3, a4, a5);
  *(void *)this = off_189710218;
  icu::UnicodeString::UnicodeString((icu::StringCharacterIterator *)((char *)this + 32), (UChar **)a2);
  __int16 v15 = *((_WORD *)this + 20);
  if ((v15 & 0x11) != 0)
  {
    uint64_t v16 = 0LL;
  }

  else if ((v15 & 2) != 0)
  {
    uint64_t v16 = (char *)this + 42;
  }

  else
  {
    uint64_t v16 = (char *)*((void *)this + 7);
  }

  *((void *)this + 3) = v16;
  return this;
}

icu::StringCharacterIterator *icu::StringCharacterIterator::StringCharacterIterator( icu::StringCharacterIterator *this, UChar **a2)
{
  *unsigned int v4 = off_189710218;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v4 + 4), a2 + 4);
  __int16 v5 = *((_WORD *)this + 20);
  if ((v5 & 0x11) != 0)
  {
    unsigned int v6 = 0LL;
  }

  else if ((v5 & 2) != 0)
  {
    unsigned int v6 = (char *)this + 42;
  }

  else
  {
    unsigned int v6 = (char *)*((void *)this + 7);
  }

  *((void *)this + 3) = v6;
  return this;
}

void icu::StringCharacterIterator::~StringCharacterIterator(icu::StringCharacterIterator *this)
{
  *(void *)this = off_189710218;
  icu::UnicodeString::~UnicodeString((icu::StringCharacterIterator *)((char *)this + 32));
  icu::UCharCharacterIterator::~UCharCharacterIterator(this);
}

{
  *(void *)this = off_189710218;
  icu::UnicodeString::~UnicodeString((icu::StringCharacterIterator *)((char *)this + 32));
  icu::UCharCharacterIterator::~UCharCharacterIterator(this);
}

{
  void *v2;
  *(void *)this = off_189710218;
  icu::UnicodeString::~UnicodeString(off_189710218, (icu::StringCharacterIterator *)((char *)this + 32));
  icu::UCharCharacterIterator::~UCharCharacterIterator(this);
  icu::UMemory::operator delete(v2);
}

uint64_t icu::StringCharacterIterator::operator=(uint64_t a1, uint64_t a2)
{
  icu::UCharCharacterIterator::operator=(a1, a2);
  icu::UnicodeString::operator=((UChar **)(a1 + 32), (UChar **)(a2 + 32));
  __int16 v4 = *(_WORD *)(a1 + 40);
  if ((v4 & 0x11) != 0)
  {
    uint64_t v5 = 0LL;
  }

  else if ((v4 & 2) != 0)
  {
    uint64_t v5 = a1 + 42;
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 56);
  }

  *(void *)(a1 + 24) = v5;
  return a1;
}

uint64_t icu::StringCharacterIterator::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_1807F874C(*(void *)(*(void *)a1 - 8LL), *(void *)(*(void *)a2 - 8LL));
  if ((_DWORD)result)
  {
    unsigned int v5 = *(unsigned __int16 *)(a1 + 40);
    if ((v5 & 1) != 0)
    {
      if ((*(_WORD *)(a2 + 40) & 1) == 0) {
        return 0LL;
      }
LABEL_17:
      if (*(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12) && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)) {
        return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
      }
      return 0LL;
    }

    if ((v5 & 0x8000) != 0) {
      int v6 = *(_DWORD *)(a1 + 44);
    }
    else {
      int v6 = v5 >> 5;
    }
    uint64_t result = 0LL;
    unsigned int v7 = *(unsigned __int16 *)(a2 + 40);
    if ((v7 & 0x8000u) == 0) {
      unsigned int v8 = v7 >> 5;
    }
    else {
      unsigned int v8 = *(_DWORD *)(a2 + 44);
    }
    if ((v7 & 1) == 0 && v6 == v8)
    {
      uint64_t result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 32), (const icu::UnicodeString *)(a2 + 32), v6);
      if ((_DWORD)result) {
        goto LABEL_17;
      }
    }
  }

  return result;
}

icu::StringCharacterIterator *icu::StringCharacterIterator::clone@<X0>( UChar **this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::StringCharacterIterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  if (result) {
    return icu::StringCharacterIterator::StringCharacterIterator(result, this);
  }
  return result;
}

uint64_t icu::StringCharacterIterator::setText(UChar **this, UChar **a2)
{
  icu::UnicodeString::operator=(this + 4, a2);
  unsigned int v3 = *((unsigned __int16 *)this + 20);
  if ((v3 & 0x11) != 0)
  {
    __int16 v4 = 0LL;
  }

  else if ((v3 & 2) != 0)
  {
    __int16 v4 = (UChar *)this + 21;
  }

  else
  {
    __int16 v4 = this[7];
  }

  unsigned int v7 = v4;
  if ((v3 & 0x8000) != 0) {
    int v5 = *((_DWORD *)this + 11);
  }
  else {
    int v5 = v3 >> 5;
  }
  return icu::UCharCharacterIterator::setText((uint64_t)this, (uint64_t *)&v7, v5);
}

icu::UnicodeString *icu::StringCharacterIterator::getText(UChar **this, UChar **a2)
{
  return icu::UnicodeString::operator=(a2, this + 4);
}

void icu::SharedObject::~SharedObject(icu::SharedObject *this)
{
}

uint64_t icu::SharedObject::addRef(uint64_t this)
{
  int v1 = (unsigned int *)(this + 12);
  do
    unsigned int v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

void *icu::SharedObject::removeRef(void *this)
{
  int v1 = (void *)this[2];
  unsigned int v2 = (unsigned int *)this + 3;
  do
  {
    unsigned int v3 = __ldaxr(v2);
    unsigned int v4 = v3 - 1;
  }

  while (__stlxr(v4, v2));
  if (!v4)
  {
    BOOL v5 = v1 == 0LL;
    if (v1) {
      this = v1;
    }
    uint64_t v6 = 24LL;
    if (v5) {
      uint64_t v6 = 8LL;
    }
    return (void *)(*(uint64_t (**)(void))(*this + v6))();
  }

  return this;
}

uint64_t icu::SharedObject::getRefCount(icu::SharedObject *this)
{
  return atomic_load((unsigned int *)this + 3);
}

uint64_t icu::SharedObject::deleteIfZeroRefCount(uint64_t this)
{
  return this;
}

uint64_t icu::SimpleFormatter::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    icu::UnicodeString::operator=((UChar **)(a1 + 8), (UChar **)(a2 + 8));
  }
  return a1;
}

void icu::SimpleFormatter::~SimpleFormatter(icu::SimpleFormatter *this)
{
}

{
  icu::UnicodeString::~UnicodeString((icu::SimpleFormatter *)((char *)this + 8));
}

uint64_t icu::SimpleFormatter::applyPatternMinMaxArguments( icu::SimpleFormatter *this, const icu::UnicodeString *a2, int a3, int a4, int a5, UErrorCode *a6)
{
  unsigned int v12 = *((unsigned __int16 *)a2 + 4);
  if ((v12 & 0x11) != 0)
  {
    int32_t v13 = 0LL;
  }

  else if ((v12 & 2) != 0)
  {
    int32_t v13 = (char *)a2 + 10;
  }

  else
  {
    int32_t v13 = (char *)*((void *)a2 + 3);
  }

  int v14 = (__int16)v12;
  int v15 = v12 >> 5;
  if (v14 >= 0) {
    int v16 = v15;
  }
  else {
    int v16 = *((_DWORD *)a2 + 3);
  }
  uint64_t v17 = (icu::SimpleFormatter *)((char *)this + 8);
  __int16 v38 = 0;
  icu::UnicodeString::unBogus((uint64_t)this + 8);
  else {
    uint64_t v18 = *((unsigned __int16 *)this + 8) >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 8, 0LL, v18, (uint64_t)&v38, 0, 1LL);
  if (v16 >= 1)
  {
    int v35 = a3;
    int v36 = a5;
    int v34 = a4;
    LODWORD(v19) = 0;
    int v20 = 0;
    int v21 = 0;
    int v37 = -1;
    while (1)
    {
      uint64_t v22 = (int)v19;
      int v23 = *(unsigned __int16 *)&v13[2 * (int)v19];
      uint64_t v19 = (int)v19 + 1LL;
      if (v23 == 39)
      {
        if ((int)v19 >= v16)
        {
          int v23 = 39;
        }

        else
        {
          int v23 = *(unsigned __int16 *)&v13[2 * v19];
          if (v23 == 39)
          {
            LODWORD(v19) = v22 + 2;
            if (!v21) {
              goto LABEL_31;
            }
            goto LABEL_32;
          }
        }

        if (!v20)
        {
          if (v36 || v23 == 125 || v23 == 123)
          {
            LODWORD(v19) = v22 + 2;
            int v20 = 1;
LABEL_30:
            if (!v21)
            {
LABEL_31:
              __int16 v40 = -1;
              icu::UnicodeString::doAppend((uint64_t)this + 8, (uint64_t)&v40, 0, 1LL);
            }
          }

          else
          {
            int v20 = 0;
            LOWORD(v23) = 39;
            if (!v21) {
              goto LABEL_31;
            }
          }

icu::UnicodeString *icu::SimpleFormatter::format( icu::SimpleFormatter *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  v6[1] = *(const icu::UnicodeString **)MEMORY[0x1895F89C0];
  v6[0] = a2;
  icu::SimpleFormatter::formatAndAppend(this, v6, 1u, a3, 0LL, 0, a4);
  return a3;
}

icu::UnicodeString *icu::SimpleFormatter::formatAndAppend( icu::SimpleFormatter *this, const icu::UnicodeString *const *a2, unsigned int a3, icu::UnicodeString *a4, void *__b, int a6, UErrorCode *a7)
{
  if ((a3 & 0x80000000) != 0 || (a3 ? (BOOL v9 = a2 == 0LL) : (BOOL v9 = 0), v9 || a6 < 0 || !__b && a6))
  {
LABEL_20:
    *a7 = U_ILLEGAL_ARGUMENT_ERROR;
    return a4;
  }

  unsigned int v10 = *((unsigned __int16 *)this + 8);
  if ((v10 & 0x11) != 0)
  {
    __int16 v11 = 0LL;
  }

  else if ((v10 & 2) != 0)
  {
    __int16 v11 = (unsigned __int16 *)((char *)this + 18);
  }

  else
  {
    __int16 v11 = (unsigned __int16 *)*((void *)this + 4);
  }

  if ((v10 & 0x8000) != 0)
  {
    if (!*((_DWORD *)this + 5)) {
      goto LABEL_22;
    }
  }

  else if (!(v10 >> 5))
  {
    goto LABEL_22;
  }

  if (*v11 > a3) {
    goto LABEL_20;
  }
LABEL_22:
  if ((v10 & 0x11) != 0)
  {
    int32_t v13 = 0LL;
  }

  else if ((v10 & 2) != 0)
  {
    int32_t v13 = (char *)this + 18;
  }

  else
  {
    int32_t v13 = (char *)*((void *)this + 4);
  }

  if ((v10 & 0x8000) != 0) {
    int v14 = *((_DWORD *)this + 5);
  }
  else {
    int v14 = v10 >> 5;
  }
  icu::SimpleFormatter::format((uint64_t)v13, v14, (uint64_t)a2, a4, 0LL, 1, __b, a6, (int *)a7);
  return a4;
}

icu::UnicodeString *icu::SimpleFormatter::format( icu::SimpleFormatter *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, icu::UnicodeString *a4, UErrorCode *a5)
{
  v7[2] = *(icu::UnicodeString **)MEMORY[0x1895F89C0];
  v7[0] = a2;
  v7[1] = a3;
  icu::SimpleFormatter::formatAndAppend(this, v7, 2u, a4, 0LL, 0, a5);
  return a4;
}

icu::UnicodeString *icu::SimpleFormatter::format( icu::SimpleFormatter *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, const icu::UnicodeString *a4, icu::UnicodeString *a5, UErrorCode *a6)
{
  v8[3] = *(const icu::UnicodeString **)MEMORY[0x1895F89C0];
  v8[0] = a2;
  v8[1] = a3;
  _OWORD v8[2] = a4;
  icu::SimpleFormatter::formatAndAppend(this, v8, 3u, a5, 0LL, 0, a6);
  return a5;
}

icu::UnicodeString *icu::SimpleFormatter::format( uint64_t a1, int a2, uint64_t a3, icu::UnicodeString *this, uint64_t a5, int a6, void *__b, int a8, int *a9)
{
  if (*a9 <= 0)
  {
    if (a8 >= 1) {
      memset(__b, 255, 4LL * a8);
    }
    if (a2 > 1)
    {
      LODWORD(v15) = 1;
      do
      {
        uint64_t v16 = *(unsigned __int16 *)(a1 + 2LL * (int)v15);
        uint64_t v15 = (int)v15 + 1LL;
        if (v16 > 0xFF)
        {
          int v21 = v16 - 256;
          icu::UnicodeString::doAppend((uint64_t)this, a1 + 2 * v15, 0, (v16 - 256));
          LODWORD(v15) = v21 + v15;
        }

        else
        {
          uint64_t v17 = *(void *)(a3 + 8LL * v16);
          if (!v17) {
            goto LABEL_30;
          }
          if ((icu::UnicodeString *)v17 == this)
          {
            if (a6)
            {
LABEL_30:
              *a9 = 1;
              return this;
            }

            if ((_DWORD)v15 == 2)
            {
              LODWORD(v15) = 2;
              continue;
            }

            if ((int)v16 < a8)
            {
              unsigned int v22 = *((unsigned __int16 *)this + 4);
              int v23 = (__int16)v22;
              unsigned int v24 = v22 >> 5;
              if (v23 < 0) {
                unsigned int v24 = *((_DWORD *)this + 3);
              }
              *((_DWORD *)__b + v16) = v24;
            }

            uint64_t v17 = a5;
          }

          else if ((int)v16 < a8)
          {
            unsigned int v18 = *((unsigned __int16 *)this + 4);
            int v19 = (__int16)v18;
            unsigned int v20 = v18 >> 5;
            if (v19 < 0) {
              unsigned int v20 = *((_DWORD *)this + 3);
            }
            *((_DWORD *)__b + v16) = v20;
          }

          unsigned int v25 = *(unsigned __int16 *)(v17 + 8);
          int v26 = (__int16)v25;
          unsigned int v27 = v25 >> 5;
          if (v26 >= 0) {
            uint64_t v28 = v27;
          }
          else {
            uint64_t v28 = *(unsigned int *)(v17 + 12);
          }
          icu::UnicodeString::doAppend((uint64_t)this, (const icu::UnicodeString *)v17, 0, v28);
        }
      }

      while ((int)v15 < a2);
    }
  }

  return this;
}

UChar **icu::SimpleFormatter::formatAndReplace( icu::SimpleFormatter *this, const icu::UnicodeString *const *a2, unsigned int a3, UChar **a4, void *__b, int a6, UErrorCode *a7)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (*(int *)a7 <= 0)
  {
    if ((a3 & 0x80000000) != 0) {
      goto LABEL_18;
    }
    BOOL v10 = a3 && a2 == 0LL;
    if (v10 || a6 < 0 || !__b && a6) {
      goto LABEL_18;
    }
    unsigned int v13 = *((unsigned __int16 *)this + 8);
    if ((v13 & 0x11) != 0)
    {
      int v14 = 0LL;
    }

    else if ((v13 & 2) != 0)
    {
      int v14 = (unsigned __int16 *)((char *)this + 18);
    }

    else
    {
      int v14 = (unsigned __int16 *)*((void *)this + 4);
    }

    if ((v13 & 0x8000) != 0)
    {
      int v15 = *((_DWORD *)this + 5);
      if (v15)
      {
LABEL_17:
        unsigned int v16 = *v14;
        if (v16 > a3)
        {
LABEL_18:
          *a7 = U_ILLEGAL_ARGUMENT_ERROR;
          return a4;
        }

        __int128 v24 = 0u;
        __int128 v25 = 0u;
        uint64_t v27 = 0LL;
        __int128 v26 = 0u;
        int v23 = (UChar *)off_18971B688;
        LOWORD(v24) = 2;
        if (v16 && v15 >= 2)
        {
          int v20 = -1;
          int v21 = 1;
          do
          {
            unsigned int v22 = v14[v21];
            if (v22 > 0xFF)
            {
              int v21 = v21 + v22 - 255;
            }

            else
            {
              ++v21;
              if ((UChar **)a2[v22] == a4)
              {
                if (v21 == 2)
                {
                  int v20 = v22;
                }

                else if ((unsigned __int16)v24 <= 0x1Fu && *((unsigned __int16 *)a4 + 4) >= 0x20u)
                {
                  icu::UnicodeString::operator=(&v23, a4);
                }
              }
            }
          }

          while (v21 < v15);
          if ((v20 & 0x80000000) == 0)
          {
LABEL_26:
            icu::SimpleFormatter::format( (uint64_t)v14,  v15,  (uint64_t)a2,  (icu::UnicodeString *)a4,  (uint64_t)&v23,  0,  __b,  a6,  (int *)a7);
            icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v23);
            return a4;
          }
        }

uint64_t icu::SimpleFormatter::getTextWithNoArguments@<X0>( void *__b@<X2>, unsigned __int16 *a2@<X0>, int a3@<W1>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (a4 >= 1) {
    memset(__b, 255, 4LL * a4);
  }
  if (a3) {
    int v10 = ~*a2;
  }
  else {
    int v10 = -1;
  }
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  uint64_t result = icu::UnicodeString::UnicodeString((icu::UnicodeString *)a5, v10 + a3, 0, 0);
  if (a3 >= 2)
  {
    LODWORD(v12) = 1;
    do
    {
      unsigned int v13 = a2[(int)v12];
      uint64_t v12 = (int)v12 + 1LL;
      if (v13 < 0x101)
      {
        if ((int)v13 < a4)
        {
          unsigned int v15 = *(unsigned __int16 *)(a5 + 8);
          int v16 = (__int16)v15;
          unsigned int v17 = v15 >> 5;
          if (v16 < 0) {
            unsigned int v17 = *(_DWORD *)(a5 + 12);
          }
          *((_DWORD *)__b + v13) = v17;
        }
      }

      else
      {
        unsigned int v14 = v13 - 256;
        uint64_t result = icu::UnicodeString::doAppend(a5, (uint64_t)&a2[v12], 0, v13 - 256);
        LODWORD(v12) = v14 + v12;
      }
    }

    while ((int)v12 < a3);
  }

  return result;
}

void *icu::unisets::get(int a1)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  UErrorCode v34 = U_ZERO_ERROR;
  unsigned int v2 = atomic_load(&dword_18C448F50);
  if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_18C448F50))
  {
    if (dword_18C448F54 > 0 || v34 > U_ZERO_ERROR) {
      return &unk_18C448E88;
    }
  }

  else
  {
    sub_180820C94(0, (uint64_t)sub_18080A2CC);
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&unk_18C448E88);
    icu::UnicodeSet::freeze(v3);
    byte_18C448F58 = 1;
    BOOL v5 = icu::UMemory::operator new((uint64_t *)0x18C448000LL, (icu::UMemory *)0xC8, v4);
    if (v5)
    {
      unsigned int v7 = (icu::UnicodeSet *)v5;
      icu::UnicodeString::UnicodeString((uint64_t)v36, (uint64_t)"[");
      icu::UnicodeSet::UnicodeSet(v7, (const icu::UnicodeString *)v36, &v34);
      qword_18C448F68 = (uint64_t)v7;
      icu::UnicodeString::~UnicodeString((void *)0x18C448000LL, (icu::UnicodeString *)v36);
    }

    else
    {
      unsigned int v8 = (uint64_t *)0x18C448000LL;
      qword_18C448F68 = 0LL;
    }

    __int16 v11 = icu::UMemory::operator new(v8, (icu::UMemory *)0xC8, v6);
    if (v11)
    {
      uint64_t v12 = (icu::UnicodeSet *)v11;
      icu::UnicodeString::UnicodeString((uint64_t)v36, (uint64_t)L"[[:Bidi_Control:]]");
      icu::UnicodeSet::UnicodeSet(v12, (const icu::UnicodeString *)v36, &v34);
      qword_18C448F70 = (uint64_t)v12;
      icu::UnicodeString::~UnicodeString((void *)0x18C448000LL, (icu::UnicodeString *)v36);
    }

    else
    {
      qword_18C448F70 = 0LL;
    }

    uint64_t v13 = ures_open(0LL, "root", (int *)&v34);
    uint64_t v14 = v13;
    if (v34 <= U_ZERO_ERROR)
    {
      int v35 = &off_1897103A0;
      ures_getAllItemsWithFallback(v13, "parse", (uint64_t)&v35, (int *)&v34);
      if (v34 <= U_ZERO_ERROR)
      {
        int v16 = icu::UMemory::operator new((uint64_t *)v34, (icu::UMemory *)0xC8, v15);
        if (v16)
        {
          unsigned int v17 = (icu::UnicodeSet *)v16;
          icu::UnicodeString::UnicodeString((uint64_t)v36, (uint64_t)"[");
          icu::UnicodeSet::UnicodeSet(v17, (const icu::UnicodeString *)v36, &v34);
          icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v36);
          if (v34 <= U_ZERO_ERROR)
          {
            icu::UnicodeSet::addAll((icu::UVector **)v17, (const icu::UnicodeSet *)qword_18C448F98);
            qword_18C448FA0 = (uint64_t)v17;
            qword_18C448FA8 = (uint64_t)sub_18080A33C(3, 4uLL, v20);
            qword_18C448FB0 = (uint64_t)sub_18080A33C(5, 6uLL, v21);
            __int128 v24 = icu::UMemory::operator new(v23, (icu::UMemory *)0xC8, v22);
            if (v24)
            {
              __int128 v26 = (icu::UnicodeSet *)v24;
              icu::UnicodeString::UnicodeString((uint64_t)v36, (uint64_t)&unk_180A47C0E);
              icu::UnicodeSet::UnicodeSet(v26, (const icu::UnicodeString *)v36, &v34);
              qword_18C448FD8 = (uint64_t)v26;
              icu::UnicodeString::~UnicodeString((void *)0x18C448000LL, (icu::UnicodeString *)v36);
            }

            else
            {
              qword_18C448FD8 = 0LL;
            }

            if (v34 <= U_ZERO_ERROR)
            {
              uint64_t v27 = icu::UMemory::operator new((uint64_t *)v34, (icu::UMemory *)0xC8, v25);
              if (v27)
              {
                uint64_t v29 = (icu::UnicodeSet *)v27;
                icu::UnicodeString::UnicodeString((uint64_t)v36, (uint64_t)&unk_180A47C16);
                icu::UnicodeSet::UnicodeSet(v29, (const icu::UnicodeString *)v36, &v34);
                qword_18C449008 = (uint64_t)v29;
                icu::UnicodeString::~UnicodeString(&unk_18C449000, (icu::UnicodeString *)v36);
              }

              else
              {
                qword_18C449008 = 0LL;
              }

              if (v34 <= U_ZERO_ERROR)
              {
                qword_18C449010 = (uint64_t)sub_18080A3D0(9, v28, (uint64_t *)v34);
                uint64_t v32 = 0LL;
                qword_18C449018 = (uint64_t)sub_18080A3D0(10, v30, v31);
                do
                {
                  int v33 = (icu::UnicodeSet *)qword_18C448F60[v32];
                  if (v33) {
                    icu::UnicodeSet::freeze(v33);
                  }
                  ++v32;
                }

                while (v32 != 24);
              }
            }
          }

          else
          {
            icu::UnicodeSet::~UnicodeSet(v17);
            icu::UMemory::operator delete(v19);
          }
        }

        else if (v34 <= U_ZERO_ERROR)
        {
          UErrorCode v34 = U_MEMORY_ALLOCATION_ERROR;
        }
      }

      icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v35);
    }

    if (v14) {
      ures_close(v14);
    }
    dword_18C448F54 = v34;
    icu::umtx_initImplPostInit(&dword_18C448F50);
    if (v34 >= U_ILLEGAL_ARGUMENT_ERROR) {
      return &unk_18C448E88;
    }
  }

  if (qword_18C448F60[a1]) {
    return (void *)qword_18C448F60[a1];
  }
  else {
    return &unk_18C448E88;
  }
}

uint64_t icu::unisets::chooseFrom(const icu::UnicodeString *a1, unsigned int a2)
{
  unint64_t v4 = (icu::UVector **)icu::unisets::get(a2);
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t icu::unisets::chooseFrom(UChar **a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a2;
  uint64_t v11 = *MEMORY[0x1895F89C0];
  unint64_t v6 = (icu::UVector **)icu::unisets::get(a2);
  if (!icu::UnicodeSet::contains(v6, (const icu::UnicodeString *)a1))
  {
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v10, a1);
    unsigned int v7 = (icu::UVector **)icu::unisets::get(a3);
    else {
      uint64_t v4 = 0xFFFFFFFFLL;
    }
    icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v10);
  }

  return v4;
}

uint64_t sub_18080A2CC()
{
  if ((byte_18C448F58 & 1) != 0)
  {
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)&unk_18C448E88);
    byte_18C448F58 = 0;
  }

  for (uint64_t i = 0LL; i != 24; ++i)
  {
    int v1 = (icu::UnicodeSet *)qword_18C448F60[i];
    if (v1)
    {
      icu::UnicodeSet::~UnicodeSet(v1);
      icu::UMemory::operator delete(v2);
    }

    qword_18C448F60[i] = 0LL;
  }

  atomic_store(0, &dword_18C448F50);
  return 1LL;
}

icu::UVector **sub_18080A33C@<X0>(int a1@<W0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v3 = a2;
  BOOL v5 = (icu::UnicodeSet *)icu::UMemory::operator new(a3, (icu::UMemory *)0xC8, a2);
  unint64_t v6 = (icu::UVector **)v5;
  if (v5)
  {
    icu::UnicodeSet::UnicodeSet(v5);
    if (qword_18C448F60[a1]) {
      unsigned int v8 = (const icu::UnicodeSet *)qword_18C448F60[a1];
    }
    else {
      unsigned int v8 = (const icu::UnicodeSet *)&unk_18C448E88;
    }
    icu::UnicodeSet::addAll(v7, v8);
    if (qword_18C448F60[v3]) {
      BOOL v9 = (const icu::UnicodeSet *)qword_18C448F60[v3];
    }
    else {
      BOOL v9 = (const icu::UnicodeSet *)&unk_18C448E88;
    }
    icu::UnicodeSet::addAll(v6, v9);
    if (qword_18C448FA0) {
      int v10 = (const icu::UnicodeSet *)qword_18C448FA0;
    }
    else {
      int v10 = (const icu::UnicodeSet *)&unk_18C448E88;
    }
    icu::UnicodeSet::addAll(v6, v10);
    icu::UnicodeSet::freeze((icu::UnicodeSet *)v6);
  }

  return v6;
}

icu::UVector **sub_18080A3D0@<X0>(int a1@<W0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (icu::UnicodeSet *)icu::UMemory::operator new(a3, (icu::UMemory *)0xC8, a2);
  BOOL v5 = (icu::UVector **)v4;
  if (v4)
  {
    icu::UnicodeSet::UnicodeSet(v4);
    if (qword_18C449008) {
      unsigned int v7 = (const icu::UnicodeSet *)qword_18C449008;
    }
    else {
      unsigned int v7 = (const icu::UnicodeSet *)&unk_18C448E88;
    }
    icu::UnicodeSet::addAll(v6, v7);
    if (qword_18C448F60[a1]) {
      unsigned int v8 = (const icu::UnicodeSet *)qword_18C448F60[a1];
    }
    else {
      unsigned int v8 = (const icu::UnicodeSet *)&unk_18C448E88;
    }
    icu::UnicodeSet::addAll(v5, v8);
    icu::UnicodeSet::freeze((icu::UnicodeSet *)v5);
  }

  return v5;
}

void sub_18080A450(icu::ResourceSink *a1)
{
}

void *sub_18080A464(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  uint64_t v36 = 0LL;
  __s1 = a2;
  memset(v35, 0, sizeof(v35));
  uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88LL))( v35,  a3,  a5);
  if (*(int *)a5 <= 0)
  {
    uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v35, 0, (const char **)&__s1, a3);
    if ((_DWORD)result)
    {
      int v8 = 0;
      while (1)
      {
        if (strcmp(__s1, "date"))
        {
          uint64_t v34 = 0LL;
          memset(v33, 0, sizeof(v33));
          uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88LL))( v33,  a3,  a5);
        }

LABEL_80:
        uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v35, ++v8, (const char **)&__s1, a3);
        if (!(_DWORD)result) {
          return result;
        }
      }

      int v9 = 0;
      while (1)
      {
        int v10 = strcmp(__s1, "lenient");
        v31[0] = 0LL;
        v31[1] = 0LL;
        uint64_t v32 = 0LL;
        uint64_t result = (*(void *(**)(void *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 80LL))( v31,  a3,  a5);
LABEL_79:
        if (!icu::ResourceTable::getKeyAndValue( (icu::ResourceTable *)v33,  ++v9,  (const char **)&__s1,  a3)) {
          goto LABEL_80;
        }
      }

      unsigned int v11 = 0;
      BOOL v12 = v10 == 0;
      if (v10) {
        int v13 = 6;
      }
      else {
        int v13 = 4;
      }
      if (v12) {
        int v14 = 3;
      }
      else {
        int v14 = 5;
      }
      while (1)
      {
        icu::ResourceArray::getValue((icu::ResourceArray *)v31, v11, a3);
        memset(v40, 0, sizeof(v40));
        int v39 = 0;
        uint64_t v38 = (*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(void *)a3 + 32LL))( a3,  &v39,  a5);
        icu::UnicodeString::UnicodeString(v40, 1LL, &v38);
        unint64_t v15 = (void *)*(unsigned int *)a5;
        if ((SWORD4(v40[0]) & 0x8000u) == 0) {
          int32_t v16 = WORD4(v40[0]) >> 5;
        }
        else {
          int32_t v16 = HIDWORD(v40[0]);
        }
        unsigned int v17 = (uint64_t *)icu::UnicodeString::doIndexOf((uint64_t)v40, 0x2Eu, 0, v16);
        int v18 = v13;
        if ((_DWORD)v17 == -1)
        {
          int32_t v19 = (SWORD4(v40[0]) & 0x8000u) == 0 ? WORD4(v40[0]) >> 5 : HIDWORD(v40[0]);
          unsigned int v17 = (uint64_t *)icu::UnicodeString::doIndexOf((uint64_t)v40, 0x2Cu, 0, v19);
          int v18 = v14;
          if ((_DWORD)v17 == -1)
          {
            if ((SWORD4(v40[0]) & 0x8000u) == 0) {
              int32_t v20 = WORD4(v40[0]) >> 5;
            }
            else {
              int32_t v20 = HIDWORD(v40[0]);
            }
            if (icu::UnicodeString::doIndexOf((uint64_t)v40, 0x2Bu, 0, v20) == -1)
            {
              if ((SWORD4(v40[0]) & 0x8000u) == 0) {
                int32_t v21 = WORD4(v40[0]) >> 5;
              }
              else {
                int32_t v21 = HIDWORD(v40[0]);
              }
              if (icu::UnicodeString::doIndexOf((uint64_t)v40, 0x2Du, 0, v21) == -1)
              {
                if ((SWORD4(v40[0]) & 0x8000u) == 0) {
                  int32_t v22 = WORD4(v40[0]) >> 5;
                }
                else {
                  int32_t v22 = HIDWORD(v40[0]);
                }
                if (icu::UnicodeString::doIndexOf((uint64_t)v40, 0x24u, 0, v22) == -1)
                {
                  if ((SWORD4(v40[0]) & 0x8000u) == 0) {
                    int32_t v23 = WORD4(v40[0]) >> 5;
                  }
                  else {
                    int32_t v23 = HIDWORD(v40[0]);
                  }
                  if (icu::UnicodeString::doIndexOf((uint64_t)v40, 0xA3u, 0, v23) == -1)
                  {
                    if ((SWORD4(v40[0]) & 0x8000u) == 0) {
                      int32_t v24 = WORD4(v40[0]) >> 5;
                    }
                    else {
                      int32_t v24 = HIDWORD(v40[0]);
                    }
                    if (icu::UnicodeString::doIndexOf((uint64_t)v40, 0x20B9u, 0, v24) == -1)
                    {
                      if ((SWORD4(v40[0]) & 0x8000u) == 0) {
                        int32_t v25 = WORD4(v40[0]) >> 5;
                      }
                      else {
                        int32_t v25 = HIDWORD(v40[0]);
                      }
                      if (icu::UnicodeString::doIndexOf((uint64_t)v40, 0xA5u, 0, v25) == -1)
                      {
                        if ((SWORD4(v40[0]) & 0x8000u) == 0) {
                          int32_t v26 = WORD4(v40[0]) >> 5;
                        }
                        else {
                          int32_t v26 = HIDWORD(v40[0]);
                        }
                        if (icu::UnicodeString::doIndexOf((uint64_t)v40, 0x20A9u, 0, v26) == -1)
                        {
                          if ((SWORD4(v40[0]) & 0x8000u) == 0) {
                            int32_t v27 = WORD4(v40[0]) >> 5;
                          }
                          else {
                            int32_t v27 = HIDWORD(v40[0]);
                          }
                          if (icu::UnicodeString::doIndexOf((uint64_t)v40, 0x25u, 0, v27) == -1)
                          {
                            if ((SWORD4(v40[0]) & 0x8000u) == 0) {
                              int32_t v28 = WORD4(v40[0]) >> 5;
                            }
                            else {
                              int32_t v28 = HIDWORD(v40[0]);
                            }
                            if (icu::UnicodeString::doIndexOf((uint64_t)v40, 0x2030u, 0, v28) == -1)
                            {
                              if ((SWORD4(v40[0]) & 0x8000u) == 0) {
                                int32_t v29 = WORD4(v40[0]) >> 5;
                              }
                              else {
                                int32_t v29 = HIDWORD(v40[0]);
                              }
                              int v18 = 7;
                            }

                            else
                            {
                              int v18 = 14;
                            }
                          }

                          else
                          {
                            int v18 = 13;
                          }
                        }

                        else
                        {
                          int v18 = 20;
                        }
                      }

                      else
                      {
                        int v18 = 19;
                      }
                    }

                    else
                    {
                      int v18 = 18;
                    }
                  }

                  else
                  {
                    int v18 = 17;
                  }
                }

                else
                {
                  int v18 = 16;
                }
              }

              else
              {
                int v18 = 11;
              }
            }

            else
            {
              int v18 = 12;
            }
          }
        }

        sub_18080A970(v18, (const icu::UnicodeString *)v40, a5, v17);
LABEL_77:
        UErrorCode v30 = *a5;
        uint64_t result = icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v40);
        if (v30 >= U_ILLEGAL_ARGUMENT_ERROR) {
          return result;
        }
      }
    }
  }

  return result;
}

  unsigned int v17 = 0;
  int32_t v21 = 0x1000000;
  if ((unint64_t)v4 < v5 && (unint64_t)v6 >= v8) {
LABEL_82:
  }
    *a2 = 15;
LABEL_83:
  if (*(_BYTE *)(result + 2)) {
    int32_t v22 = (unint64_t)v4 >= v5;
  }
  else {
    int32_t v22 = 0;
  }
  if (v22)
  {
    if (!v17) {
      goto LABEL_103;
    }
    if ((_BYTE)v11)
    {
      int32_t v24 = aAbcdefghijklmn[v9];
      if ((unint64_t)v6 < v8)
      {
        *unint64_t v6 = v24;
        int32_t v25 = v6 + 1;
        if (v7)
        {
          *v7++ = v2 - 1;
          goto LABEL_95;
        }

        if ((unint64_t)v25 >= v8)
        {
          unsigned int v7 = 0LL;
LABEL_102:
          int32_t v27 = *(char *)(v3 + 91);
          *(_BYTE *)(v3 + 9icu::UVector32::~UVector32(this + 1) = v27 + 1;
          *(_BYTE *)(v3 + v27 + 104) = 45;
          *a2 = 15;
          unint64_t v6 = v25;
          goto LABEL_103;
        }

        unsigned int v7 = 0LL;
        v6[1] = 45;
        v6 += 2;
LABEL_103:
        int32_t v23 = *(_DWORD *)(v3 + 80) & 0xF0000000 | 0x1000000;
        goto LABEL_104;
      }

      int32_t v26 = *(char *)(v3 + 91);
      *(_BYTE *)(v3 + 9icu::UVector32::~UVector32(this + 1) = v26 + 1;
      *(_BYTE *)(v3 + v26 + 104) = v24;
      *a2 = 15;
    }

    int32_t v25 = v6;
LABEL_95:
    if ((unint64_t)v25 < v8)
    {
      *int32_t v25 = 45;
      unint64_t v6 = v25 + 1;
      if (v7) {
        *v7++ = v2 - 1;
      }
      goto LABEL_103;
    }

    goto LABEL_102;
  }

  int32_t v23 = v21 | v9 | ((char)v11 << 16) | *(_DWORD *)(v3 + 80) & 0xF0000000;
LABEL_104:
  *(_DWORD *)(v3 + 80) = v23;
  *(void *)(result + 16) = v4;
  *(void *)(result + 32) = v6;
  *(void *)(result + 48) = v7;
  return result;
}

          icu::Calendar::setTimeInMillis((uint64_t)v13, TimeInMillis, a7);
          goto LABEL_81;
        }

        int32_t v26 = *((_DWORD *)this + 474);
      }

      if (v26 != 2
        || (*((__int16 *)this + 296) < 0
          ? (int v42 = *((_DWORD *)this + 149))
          : (int v42 = *((unsigned __int16 *)this + 296) >> 5),
            (icu::UnicodeString::doIndexOf((uint64_t)this + 584, 0x48u, 0, v42) & 0x80000000) != 0
         && (*((__int16 *)this + 296) < 0
           ? (uint64_t v43 = *((_DWORD *)this + 149))
           : (uint64_t v43 = *((unsigned __int16 *)this + 296) >> 5),
             (icu::UnicodeString::doIndexOf((uint64_t)this + 584, 0x68u, 0, v43) & 0x80000000) != 0
          && (*((__int16 *)this + 296) < 0
            ? (uint64_t v45 = *((_DWORD *)this + 149))
            : (uint64_t v45 = *((unsigned __int16 *)this + 296) >> 5),
              (icu::UnicodeString::doIndexOf((uint64_t)this + 584, 0x6Au, 0, v45) & 0x80000000) != 0))))
      {
        int32_t v16 = 2;
        goto LABEL_81;
      }

      TimeInMillis = icu::Calendar::getTimeInMillis(v13, a7);
      uint64_t v47 = icu::Calendar::getTimeInMillis(a3, a7);
      uint64_t v48 = icu::Calendar::get(v13, 0xAu, a7);
      uint64_t v49 = icu::Calendar::get(a3, 0xAu, a7);
      (*(void (**)(icu::Calendar *, uint64_t, uint64_t, UErrorCode *))(*(void *)v13 + 56LL))( v13,  11LL,  12LL,  a7);
      int32_t v16 = 2;
    }

    if (TimeInMillis < v47)
    {
      uint64_t v50 = icu::Calendar::getTimeInMillis(v13, a7);
      __int16 v40 = v48 <= v49 || v50 <= v47;
      uint64_t v41 = 9;
      goto LABEL_78;
    }

    goto LABEL_80;
  }

  return a4;
}

icu::UnicodeSet *sub_18080A970@<X0>( int a1@<W0>, const icu::UnicodeString *a2@<X1>, UErrorCode *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = (icu::UnicodeSet *)icu::UMemory::operator new(a4, (icu::UMemory *)0xC8, (unint64_t)a2);
  if (result) {
    uint64_t result = icu::UnicodeSet::UnicodeSet(result, a2, a3);
  }
  qword_18C448F60[a1] = (uint64_t)result;
  return result;
}

icu::StringPiece *icu::StringPiece::StringPiece(icu::StringPiece *this, const char *__s)
{
  *(void *)this = __s;
  if (__s) {
    int v3 = strlen(__s);
  }
  else {
    int v3 = 0;
  }
  *((_DWORD *)this + 2) = v3;
  return this;
}

{
  int v3;
  *(void *)this = __s;
  if (__s) {
    int v3 = strlen(__s);
  }
  else {
    int v3 = 0;
  }
  *((_DWORD *)this + 2) = v3;
  return this;
}

uint64_t icu::StringPiece::StringPiece(uint64_t this, const icu::StringPiece *a2, int a3)
{
  int v3 = *((_DWORD *)a2 + 2);
  if (v3 >= a3) {
    int v4 = a3;
  }
  else {
    int v4 = *((_DWORD *)a2 + 2);
  }
  if (a3 < 0) {
    int v4 = 0;
  }
  *(void *)this = *(void *)a2 + v4;
  *(_DWORD *)(this + 8) = v3 - v4;
  return this;
}

{
  int v3;
  int v4;
  int v3 = *((_DWORD *)a2 + 2);
  if (v3 >= a3) {
    int v4 = a3;
  }
  else {
    int v4 = *((_DWORD *)a2 + 2);
  }
  if (a3 < 0) {
    int v4 = 0;
  }
  *(void *)this = *(void *)a2 + v4;
  *(_DWORD *)(this + 8) = v3 - v4;
  return this;
}

uint64_t icu::StringPiece::StringPiece(uint64_t this, const icu::StringPiece *a2, int a3, int a4)
{
  int v4 = *((_DWORD *)a2 + 2);
  if (v4 >= a3) {
    int v5 = a3;
  }
  else {
    int v5 = *((_DWORD *)a2 + 2);
  }
  if (a3 < 0) {
    int v5 = 0;
  }
  int v6 = v4 - v5;
  if (v6 >= a4) {
    int v6 = a4;
  }
  if (a4 < 0) {
    int v6 = 0;
  }
  *(void *)this = *(void *)a2 + v5;
  *(_DWORD *)(this + 8) = v6;
  return this;
}

{
  int v4;
  int v5;
  int v6;
  int v4 = *((_DWORD *)a2 + 2);
  if (v4 >= a3) {
    int v5 = a3;
  }
  else {
    int v5 = *((_DWORD *)a2 + 2);
  }
  if (a3 < 0) {
    int v5 = 0;
  }
  int v6 = v4 - v5;
  if (v6 >= a4) {
    int v6 = a4;
  }
  if (a4 < 0) {
    int v6 = 0;
  }
  *(void *)this = *(void *)a2 + v5;
  *(_DWORD *)(this + 8) = v6;
  return this;
}

size_t icu::StringPiece::set(icu::StringPiece *this, const char *__s)
{
  *(void *)this = __s;
  if (__s) {
    size_t result = strlen(__s);
  }
  else {
    size_t result = 0LL;
  }
  *((_DWORD *)this + 2) = result;
  return result;
}

uint64_t icu::StringPiece::find(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = v4 | a3;
  if ((_DWORD)v5)
  {
    if (v4 <= a4)
    {
      return 0xFFFFFFFFLL;
    }

    else
    {
      uint64_t v6 = a4;
      while (a3 >= 1)
      {
        uint64_t v7 = 0LL;
        while (*(unsigned __int8 *)(*(void *)a1 + v6 + v7) == *(unsigned __int8 *)(a2 + v7))
        {
          if (a3 == ++v7)
          {
            int v8 = -a3;
            LODWORD(v6) = v6 + v7;
            return (v8 + v6);
          }
        }

        ++v6;
        uint64_t v5 = 0xFFFFFFFFLL;
      }

      int v8 = 0;
      return (v8 + v6);
    }
  }

  return v5;
}

uint64_t icu::StringPiece::compare@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if ((int)v4 < 1)
  {
    LODWORD(v4) = 0;
LABEL_13:
    else {
      return 0xFFFFFFFFLL;
    }
  }

  else
  {
    uint64_t v5 = 0LL;
    while (a3 != v5)
    {
      int v6 = *(char *)(*(void *)a1 + v5);
      int v7 = *(char *)(a2 + v5);
      if (v6 > v7) {
        LODWORD(a4) = 1;
      }
      if (v6 < v7) {
        a4 = 0xFFFFFFFFLL;
      }
      else {
        a4 = a4;
      }
      if (v4 == ++v5) {
        goto LABEL_13;
      }
    }

    return 1LL;
  }

BOOL icu::operator==(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v2 = *((int *)a1 + 2);
  if ((_DWORD)v2 != *((_DWORD *)a2 + 2)) {
    return 0LL;
  }
  if ((_DWORD)v2)
  {
    int v3 = *a1;
    uint64_t v4 = *a2;
    if (v3[v2 - 1] == v4[v2 - 1]) {
      return memcmp(v3, v4, v2 - 1) == 0;
    }
    return 0LL;
  }

  return 1LL;
}

void *icu::StringTrieBuilder::StringTrieBuilder(void *this)
{
  *this = off_1897103E8;
  this[1] = 0LL;
  return this;
}

void icu::StringTrieBuilder::~StringTrieBuilder(icu::StringTrieBuilder *this)
{
  *(void *)this = off_1897103E8;
  uhash_close(*((_BYTE **)this + 1));
  *((void *)this + icu::UVector32::~UVector32(this + 1) = 0LL;
  icu::UObject::~UObject(this);
}

void icu::StringTrieBuilder::deleteCompactBuilder(icu::StringTrieBuilder *this)
{
  *((void *)this + icu::UVector32::~UVector32(this + 1) = 0LL;
}

int32x2_t *icu::StringTrieBuilder::createCompactBuilder(int32x2_t *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = this;
    this = uhash_openSize((uint64_t)sub_18080AD88, (uint64_t)sub_18080AD90, 0LL, a2, (int *)a3);
    v4[1] = (int32x2_t)this;
    if (*(int *)a3 <= 0)
    {
      if (this) {
        return (int32x2_t *)uhash_setKeyDeleter((uint64_t)this, (uint64_t)uprv_deleteUObject);
      }
      else {
        *a3 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
  }

  return this;
}

uint64_t sub_18080AD88(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_18080AD90(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
}

void icu::StringTrieBuilder::build(int32x2_t *this, uint64_t a2, uint64_t a3, UErrorCode *a4)
{
  if ((_DWORD)a2)
  {
    icu::StringTrieBuilder::createCompactBuilder(this, 2 * a3, a4);
    Node = icu::StringTrieBuilder::makeNode((icu::StringTrieBuilder *)this, 0LL, a3, 0LL, a4);
    if (*(int *)a4 <= 0)
    {
      int v8 = Node;
      (*(void (**)(icu::StringTrieBuilder::Node *, uint64_t))(*(void *)Node + 32LL))(Node, 0xFFFFFFFFLL);
      (*(void (**)(icu::StringTrieBuilder::Node *, int32x2_t *))(*(void *)v8 + 40LL))(v8, this);
    }

    uhash_close(*(_BYTE **)&this[1]);
    this[1] = 0LL;
  }

  else
  {
    icu::StringTrieBuilder::writeNode((icu::StringTrieBuilder *)this, a2, a3, 0LL);
  }

uint64_t icu::StringTrieBuilder::writeNode(icu::StringTrieBuilder *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(unsigned int (**)(icu::StringTrieBuilder *))(*(void *)this + 24LL))(this) == (_DWORD)a4)
  {
    uint64_t v8 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t))(*(void *)this + 40LL))(this, a2);
    if ((_DWORD)a2 + 1 == (_DWORD)a3) {
      return (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t))(*(void *)this + 136LL))( this,  v8,  1LL);
    }
    uint64_t v10 = 1LL;
    a2 = (a2 + 1);
  }

  else
  {
    uint64_t v10 = 0LL;
    uint64_t v8 = 0LL;
  }

  int v11 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t))(*(void *)this + 32LL))(this, a2, a4);
  int v12 = (*(uint64_t (**)(icu::StringTrieBuilder *, void, uint64_t))(*(void *)this + 32LL))( this,  (a3 - 1),  a4);
  uint64_t v13 = *(void *)this;
  if (v11 == v12)
  {
    int v14 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, void, uint64_t))(v13 + 48))( this,  a2,  (a3 - 1),  a4);
    icu::StringTrieBuilder::writeNode(this, a2, a3, v14);
    uint64_t v15 = (v14 - a4);
    uint64_t v16 = (*(uint64_t (**)(icu::StringTrieBuilder *))(*(void *)this + 104LL))(this);
    if ((int)v15 > (int)v16)
    {
      uint64_t v17 = v16;
      int v18 = v16 - 1;
      int v19 = -(int)v16;
      do
      {
        (*(void (**)(icu::StringTrieBuilder *, uint64_t, void, uint64_t))(*(void *)this + 128LL))( this,  a2,  (v19 + v14),  v17);
        int v20 = (*(uint64_t (**)(icu::StringTrieBuilder *))(*(void *)this + 96LL))(this);
        (*(void (**)(icu::StringTrieBuilder *, void))(*(void *)this + 120LL))( this,  (v18 + v20));
        v14 -= v17;
      }

      while (v14 - (int)a4 > (int)v17);
      uint64_t v15 = (v14 - a4);
      uint64_t v10 = v10;
    }

    (*(void (**)(icu::StringTrieBuilder *, uint64_t, uint64_t, uint64_t))(*(void *)this + 128LL))( this,  a2,  a4,  v15);
    uint64_t v21 = v15
  }

  else
  {
    int v22 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t, uint64_t))(v13 + 56))(this, a2, a3, a4);
    icu::StringTrieBuilder::writeBranchSubNode(this, a2, a3, a4, v22);
    uint64_t v21 = (v22 - 1);
    if (v22 > (*(int (**)(icu::StringTrieBuilder *))(*(void *)this + 96LL))(this))
    {
      (*(void (**)(icu::StringTrieBuilder *, void))(*(void *)this + 120LL))( this,  (v22 - 1));
      uint64_t v21 = 0LL;
    }
  }

  return (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t, uint64_t))(*(void *)this + 144LL))( this,  v10,  v8,  v21);
}

icu::StringTrieBuilder::Node *icu::StringTrieBuilder::makeNode( icu::StringTrieBuilder *this, uint64_t a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  int v11 = (*(uint64_t (**)(icu::StringTrieBuilder *))(*(void *)this + 24LL))(this);
  if (v11 == (_DWORD)a4)
  {
    unsigned int v12 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t))(*(void *)this + 40LL))(this, a2);
    if ((_DWORD)a2 + 1 == (_DWORD)a3) {
      return (icu::StringTrieBuilder::Node *)icu::StringTrieBuilder::registerFinalValue(this, v12, a5);
    }
    a2 = (a2 + 1);
  }

  else
  {
    unsigned int v12 = 0;
  }

  int v13 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t))(*(void *)this + 32LL))(this, a2, a4);
  int v14 = (*(uint64_t (**)(icu::StringTrieBuilder *, void, uint64_t))(*(void *)this + 32LL))( this,  (a3 - 1),  a4);
  uint64_t v15 = *(void *)this;
  if (v13 == v14)
  {
    int v34 = v11;
    unsigned int v35 = v12;
    int v16 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, void, uint64_t))(v15 + 48))( this,  a2,  (a3 - 1),  a4);
    Node = (icu::StringTrieBuilder::Node *)icu::StringTrieBuilder::makeNode(this, a2, a3, v16, a5);
    uint64_t v18 = (v16 - a4);
    uint64_t v19 = (*(uint64_t (**)(icu::StringTrieBuilder *))(*(void *)this + 104LL))(this);
    if ((int)v18 > (int)v19)
    {
      uint64_t v20 = v19;
      int v21 = -(int)v19;
      do
      {
        int v22 = (icu::StringTrieBuilder::Node *)(*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, void, uint64_t, icu::StringTrieBuilder::Node *))(*(void *)this + 112LL))( this,  a2,  (v21 + v16),  v20,  Node);
        Node = icu::StringTrieBuilder::registerNode(this, v22, a5);
        v16 -= v20;
      }

      while (v16 - (int)a4 > (int)v20);
      uint64_t v18 = (v16 - a4);
    }

    uint64_t v23 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t, uint64_t, icu::StringTrieBuilder::Node *))(*(void *)this + 112LL))( this,  a2,  a4,  v18,  Node);
    int v11 = v34;
    unsigned int v12 = v35;
  }

  else
  {
    int v24 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t, uint64_t))(v15 + 56))(this, a2, a3, a4);
    BranchSubNode = icu::StringTrieBuilder::makeBranchSubNode(this, a2, a3, a4, v24, a5);
    uint64_t v27 = icu::UMemory::operator new((icu::UMemory *)0x28, v26);
    uint64_t v23 = v27;
    if (!v27) {
      return icu::StringTrieBuilder::registerNode(this, (icu::StringTrieBuilder::Node *)v23, a5);
    }
    if (BranchSubNode) {
      int v28 = *((_DWORD *)BranchSubNode + 2);
    }
    else {
      int v28 = 0;
    }
    *(_DWORD *)(v27 + 8) = v28 + 37 * v24 + 597268342;
    *(_DWORD *)(v27 + 12) = 0;
    *(_BYTE *)(v27 + 16) = 0;
    *(void *)uint64_t v27 = &off_189710718;
    *(_DWORD *)(v27 + 20) = 0;
    *(_DWORD *)(v27 + 24) = v24;
    *(void *)(v27 + 32) = BranchSubNode;
  }

  if (v11 != (_DWORD)a4 || !v23) {
    return icu::StringTrieBuilder::registerNode(this, (icu::StringTrieBuilder::Node *)v23, a5);
  }
  if ((*(unsigned int (**)(icu::StringTrieBuilder *))(*(void *)this + 80LL))(this))
  {
    *(_BYTE *)(v23 + 16) = 1;
    *(_DWORD *)(v23 + 20) = v12;
    int v30 = 37 * *(_DWORD *)(v23 + 8);
    uint64_t v31 = v23;
  }

  else
  {
    uint64_t v32 = icu::UMemory::operator new((icu::UMemory *)0x20, v29);
    if (!v32)
    {
      uint64_t v23 = 0LL;
      return icu::StringTrieBuilder::registerNode(this, (icu::StringTrieBuilder::Node *)v23, a5);
    }

    uint64_t v31 = v32;
    int v30 = -1232566318;
    int v33 = icu::StringTrieBuilder::registerNode(this, (icu::StringTrieBuilder::Node *)v23, a5);
    if (v33) {
      int v30 = 37 * *((_DWORD *)v33 + 2) - 1232566318;
    }
    *(_DWORD *)(v31 + 12) = 0;
    *(void *)uint64_t v31 = &off_1897105A0;
    *(void *)(v31 + 24) = v33;
    *(_BYTE *)(v31 + 16) = 1;
    *(_DWORD *)(v31 + 20) = v12;
    uint64_t v23 = v31;
  }

  *(_DWORD *)(v31 + 8) = v30 + v12;
  return icu::StringTrieBuilder::registerNode(this, (icu::StringTrieBuilder::Node *)v23, a5);
}

uint64_t icu::StringTrieBuilder::writeBranchSubNode( icu::StringTrieBuilder *this, uint64_t a2, int a3, uint64_t a4, int a5)
{
  int v5 = a5;
  int v29 = a3;
  uint64_t v38 = *MEMORY[0x1895F89C0];
  memset(v36, 0, sizeof(v36));
  int v37 = 0;
  uint64_t v35 = 0LL;
  memset(v34, 0, sizeof(v34));
  if ((*(int (**)(icu::StringTrieBuilder *))(*(void *)this + 88LL))(this) >= a5)
  {
    LODWORD(v9) = 0;
  }

  else
  {
    uint64_t v9 = 0LL;
    do
    {
      int v10 = a2;
      if (v5 >= 0) {
        int v11 = v5;
      }
      else {
        int v11 = v5 + 1;
      }
      a2 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t, void))(*(void *)this + 64LL))( this,  a2,  a4,  (v11 >> 1));
      *((_WORD *)v36 + v9) = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t))(*(void *)this + 32LL))( this,  a2,  a4);
      *((_DWORD *)v34 + v9++) = icu::StringTrieBuilder::writeBranchSubNode(this, v10, a2, a4, v11 >> 1);
      v5 -= v11 >> 1;
    }

    while (v5 > (*(int (**)(icu::StringTrieBuilder *))(*(void *)this + 88LL))(this));
  }

  uint64_t v12 = 0LL;
  v32[0] = 0LL;
  v32[1] = 0LL;
  int v33 = 0;
  int v30 = 0;
  if (v5 - 1 <= 1) {
    uint64_t v13 = 1LL;
  }
  else {
    uint64_t v13 = (v5 - 1);
  }
  int v14 = (int *)v32;
  do
  {
    *int v14 = a2;
    uint64_t v15 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t))(*(void *)this + 32LL))(this, a2, a4);
    uint64_t v16 = (*(uint64_t (**)(icu::StringTrieBuilder *, void, uint64_t, uint64_t))(*(void *)this + 72LL))( this,  (a2 + 1),  a4,  v15);
    BOOL v17 = (_DWORD)a2 == (_DWORD)v16 - 1
       && (_DWORD)a4 + 1 == (*(unsigned int (**)(icu::StringTrieBuilder *, uint64_t))(*(void *)this + 24LL))( this,  a2);
    *((_BYTE *)&v30 + v12++) = v17;
    ++v14;
    a2 = v16;
  }

  while (v13 != v12);
  *((_DWORD *)v32 + v13) = v16;
  uint64_t v18 = v12 - 1;
  v31[0] = 0LL;
  v31[1] = 0LL;
  do
  {
    if (!*((_BYTE *)&v30 + v18)) {
      *((_DWORD *)v31 + v18) = icu::StringTrieBuilder::writeNode(this, *(v14 - 1), *v14, (int)a4 + 1);
    }
    uint64_t v19 = v18-- + 1;
    --v14;
  }

  while (v19 > 1);
  icu::StringTrieBuilder::writeNode(this, v16, v29, a4 + 1);
  uint64_t v20 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t))(*(void *)this + 32LL))(this, v16, a4);
  uint64_t result = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t))(*(void *)this + 120LL))(this, v20);
  if (v5 > 1)
  {
    uint64_t v22 = (v5 - 2);
    do
    {
      uint64_t v23 = *((unsigned int *)v32 + v22);
      char v24 = *((_BYTE *)&v30 + v22);
      if (v24) {
        uint64_t v25 = (*(uint64_t (**)(icu::StringTrieBuilder *, void))(*(void *)this + 40LL))( this,  *((unsigned int *)v32 + v22));
      }
      else {
        uint64_t v25 = (result - *((_DWORD *)v31 + v22));
      }
      (*(void (**)(icu::StringTrieBuilder *, uint64_t, void))(*(void *)this + 136LL))( this,  v25,  v24);
      uint64_t v26 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t))(*(void *)this + 32LL))( this,  v23,  a4);
      uint64_t result = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t))(*(void *)this + 120LL))(this, v26);
    }

    while (v22-- > 0);
  }

  if ((int)v9 >= 1)
  {
    unint64_t v28 = v9 + 1LL;
    do
    {
      (*(void (**)(icu::StringTrieBuilder *, void))(*(void *)this + 152LL))( this,  *((unsigned int *)v34 + (v28 - 2)));
      uint64_t result = (*(uint64_t (**)(icu::StringTrieBuilder *, void))(*(void *)this + 120LL))( this,  *((unsigned __int16 *)v36 + (v28-- - 2)));
    }

    while (v28 > 1);
  }

  return result;
}

uint64_t icu::StringTrieBuilder::registerFinalValue( icu::StringTrieBuilder *this, unsigned int a2, UErrorCode *a3)
{
  unsigned int v7 = a2 + 41383797;
  unsigned int v13 = a2 + 41383797;
  int v14 = 0;
  uint64_t v12 = &off_1897104F0;
  uint64_t v15 = a2;
  uint64_t v8 = uhash_find(*((void *)this + 1), (uint64_t)&v12);
  if (v8)
  {
    uint64_t v3 = *((void *)v8 + 2);
  }

  else
  {
    uint64_t v11 = icu::UMemory::operator new((icu::UMemory *)0x18, v9);
    uint64_t v3 = v11;
    if (v11)
    {
      *(_DWORD *)(v11 + 8) = v7;
      *(_DWORD *)(v11 + 12) = 0;
      *(void *)uint64_t v11 = &off_1897104F0;
      *(_DWORD *)(v11 + 16) = a2;
      uhash_puti(*((void *)this + 1), v11, 1u, (int *)a3);
      if (*(int *)a3 >= 1)
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
        uint64_t v3 = 0LL;
      }
    }

    else
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  icu::UObject::~UObject((icu::UObject *)&v12);
  return v3;
}

icu::StringTrieBuilder::Node *icu::StringTrieBuilder::registerNode( icu::StringTrieBuilder *this, icu::StringTrieBuilder::Node *a2, UErrorCode *a3)
{
  uint64_t v3 = a2;
  if (*(int *)a3 < 1)
  {
    if (!a2)
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
      return v3;
    }

    int v6 = uhash_find(*((void *)this + 1), (uint64_t)a2);
    if (v6)
    {
      unsigned int v7 = v6;
      (*(void (**)(icu::StringTrieBuilder::Node *))(*(void *)v3 + 8LL))(v3);
      return (icu::StringTrieBuilder::Node *)*((void *)v7 + 2);
    }

    uhash_puti(*((void *)this + 1), (uint64_t)v3, 1u, (int *)a3);
    goto LABEL_3;
  }

  if (a2)
  {
LABEL_3:
    (*(void (**)(icu::StringTrieBuilder::Node *))(*(void *)v3 + 8LL))(v3);
    return 0LL;
  }

  return v3;
}

icu::StringTrieBuilder::Node *icu::StringTrieBuilder::makeBranchSubNode( icu::StringTrieBuilder *this, uint64_t a2, unsigned int a3, uint64_t a4, int a5, UErrorCode *a6)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  int v6 = a6;
  int v7 = a5;
  memset(v42, 0, sizeof(v42));
  int v43 = 0;
  memset(v41, 0, sizeof(v41));
  if ((*(int (**)(icu::StringTrieBuilder *))(*(void *)this + 88LL))(this) >= a5)
  {
    LODWORD(v12) = 0;
  }

  else
  {
    uint64_t v12 = 0LL;
    unsigned int v13 = v6;
    do
    {
      int v14 = a2;
      if (v7 >= 0) {
        int v15 = v7;
      }
      else {
        int v15 = v7 + 1;
      }
      a2 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t, void))(*(void *)this + 64LL))( this,  a2,  a4,  (v15 >> 1));
      *((_WORD *)v42 + v12) = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t))(*(void *)this + 32LL))( this,  a2,  a4);
      *((void *)v41 + v12++) = icu::StringTrieBuilder::makeBranchSubNode(this, v14, a2, a4, v15 >> 1, v13);
      v7 -= v15 >> 1;
    }

    while (v7 > (*(int (**)(icu::StringTrieBuilder *))(*(void *)this + 88LL))(this));
    int v6 = v13;
  }

  uint64_t v18 = icu::UMemory::operator new((icu::UMemory *)0x68, v11);
  if (!v18)
  {
    uint64_t v16 = 0LL;
    *int v6 = U_MEMORY_ALLOCATION_ERROR;
    return v16;
  }

  uint64_t v19 = (_DWORD *)v18;
  *(void *)(v18 + 8) = 4473924LL;
  *(void *)uint64_t v18 = &off_189710650;
  *(_DWORD *)(v18 + 64) = 0;
  int v20 = a4 + 1;
  if (v7 - 1 <= 1) {
    int v21 = 1;
  }
  else {
    int v21 = v7 - 1;
  }
  do
  {
    uint64_t v22 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t))(*(void *)this + 32LL))(this, a2, a4);
    uint64_t v23 = (*(uint64_t (**)(icu::StringTrieBuilder *, void, uint64_t, uint64_t))(*(void *)this + 72LL))( this,  (a2 + 1),  a4,  v22);
    if ((_DWORD)a2 == (_DWORD)v23 - 1
      && v20 == (*(unsigned int (**)(icu::StringTrieBuilder *, uint64_t))(*(void *)this + 24LL))(this, a2))
    {
      int v24 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t))(*(void *)this + 40LL))(this, a2);
      uint64_t v25 = (int)v19[16];
      *((_WORD *)v19 + v25 + 44) = v22;
      *(void *)&v19[2 * v25 + 6] = 0LL;
      v19[v25 + 17] = v24;
      ++v19[16];
      _OWORD v19[2] = v24 + 37 * (v22 + 37 * v19[2]);
    }

    else
    {
      uint64_t Node = icu::StringTrieBuilder::makeNode(this, a2, v23, (int)a4 + 1, v6);
      sub_18080BD90((uint64_t)v19, v22, Node);
    }

    a2 = v23;
    --v21;
  }

  while (v21);
  int v27 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t))(*(void *)this + 32LL))(this, v23, a4);
  int v28 = a3;
  if ((_DWORD)v23 == a3 - 1
    && (int v29 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t))(*(void *)this + 24LL))(this, v23),
        int v28 = a3,
        v20 == v29))
  {
    int v30 = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, void))(*(void *)this + 40LL))(this, v23, a3);
    uint64_t v31 = (int)v19[16];
    *((_WORD *)v19 + v31 + 44) = v27;
    *(void *)&v19[2 * v31 + 6] = 0LL;
    v19[v31 + 17] = v30;
    ++v19[16];
    _OWORD v19[2] = v30 + 37 * (v27 + 37 * v19[2]);
  }

  else
  {
    uint64_t v32 = icu::StringTrieBuilder::makeNode(this, v23, v28, v20, v6);
    sub_18080BD90((uint64_t)v19, v27, v32);
  }

  uint64_t v16 = icu::StringTrieBuilder::registerNode(this, (icu::StringTrieBuilder::Node *)v19, v6);
  if ((int)v12 >= 1)
  {
    uint64_t v34 = v12 + 1LL;
    while (1)
    {
      uint64_t v35 = icu::UMemory::operator new((icu::UMemory *)0x28, v33);
      if (v35) {
        break;
      }
LABEL_35:
      uint64_t v16 = icu::StringTrieBuilder::registerNode(this, (icu::StringTrieBuilder::Node *)v35, v6);
    }

    uint64_t v36 = *((void *)v41 + (v34 - 2));
    if (v36)
    {
      int v37 = *(_DWORD *)(v36 + 8);
      if (v16)
      {
LABEL_31:
        int v38 = *((_DWORD *)v16 + 2);
LABEL_34:
        int v39 = *((unsigned __int16 *)v42 + (v34 - 2));
        *(void *)(v35 + 8) = (v38 + 37 * (v37 + 37 * v39) - 195751071);
        *(void *)uint64_t v35 = &off_1897106C0;
        *(_WORD *)(v35 + 20) = v39;
        *(void *)(v35 + 24) = v36;
        *(void *)(v35 + 32) = v16;
        goto LABEL_35;
      }
    }

    else
    {
      int v37 = 0;
      if (v16) {
        goto LABEL_31;
      }
    }

    int v38 = 0;
    goto LABEL_34;
  }

  return v16;
}

uint64_t sub_18080BD90(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3 = *(int *)(result + 64);
  *(_WORD *)(result + 2 * v3 + 88) = a2;
  *(void *)(result + 8 * v3 + 24) = a3;
  *(_DWORD *)(result + 4 * v3 + 68) = 0;
  ++*(_DWORD *)(result + 64);
  if (a3) {
    int v4 = *(_DWORD *)(a3 + 8);
  }
  else {
    int v4 = 0;
  }
  *(_DWORD *)(result + 8) = v4 + 37 * (a2 + 37 * *(_DWORD *)(result + 8));
  return result;
}

uint64_t icu::StringTrieBuilder::hashNode(icu::StringTrieBuilder *this, const void *a2)
{
  return *((unsigned int *)this + 2);
}

uint64_t icu::StringTrieBuilder::equalNodes(icu::StringTrieBuilder *this, const void *a2, const void *a3)
{
  return (*(uint64_t (**)(icu::StringTrieBuilder *, const void *, const void *))(*(void *)this + 24LL))( this,  a2,  a3);
}

uint64_t icu::StringTrieBuilder::Node::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_1807F874C(*(void *)(*(void *)a1 - 8LL), *(void *)(*(void *)a2 - 8LL));
  if ((_DWORD)result) {
    return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t icu::StringTrieBuilder::Node::markRightEdgesFirst(icu::StringTrieBuilder::Node *this, uint64_t a2)
{
  if (!*((_DWORD *)this + 3)) {
    *((_DWORD *)this + 3) = a2;
  }
  return a2;
}

uint64_t icu::StringTrieBuilder::FinalValueNode::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  uint64_t result = icu::StringTrieBuilder::Node::operator==(a1, a2);
  if ((_DWORD)result) {
    return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return result;
}

uint64_t icu::StringTrieBuilder::FinalValueNode::write( icu::StringTrieBuilder::FinalValueNode *this, icu::StringTrieBuilder *a2)
{
  uint64_t result = (*(uint64_t (**)(icu::StringTrieBuilder *, void, uint64_t))(*(void *)a2 + 136LL))( a2,  *((unsigned int *)this + 4),  1LL);
  *((_DWORD *)this + 3) = result;
  return result;
}

uint64_t icu::StringTrieBuilder::ValueNode::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  uint64_t result = icu::StringTrieBuilder::Node::operator==(a1, a2);
  if ((_DWORD)result)
  {
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t icu::StringTrieBuilder::IntermediateValueNode::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  uint64_t result = icu::StringTrieBuilder::ValueNode::operator==(a1, a2);
  if ((_DWORD)result) {
    return *(void *)(a1 + 24) == *(void *)(a2 + 24);
  }
  return result;
}

uint64_t icu::StringTrieBuilder::IntermediateValueNode::markRightEdgesFirst( icu::StringTrieBuilder::IntermediateValueNode *this, uint64_t a2)
{
  if (!*((_DWORD *)this + 3))
  {
    a2 = (*(uint64_t (**)(void))(**((void **)this + 3) + 32LL))(*((void *)this + 3));
    *((_DWORD *)this + 3) = a2;
  }

  return a2;
}

uint64_t icu::StringTrieBuilder::IntermediateValueNode::write( icu::StringTrieBuilder::IntermediateValueNode *this, icu::StringTrieBuilder *a2)
{
  uint64_t result = (*(uint64_t (**)(icu::StringTrieBuilder *, void, void))(*(void *)a2 + 136LL))( a2,  *((unsigned int *)this + 5),  0LL);
  *((_DWORD *)this + 3) = result;
  return result;
}

uint64_t icu::StringTrieBuilder::LinearMatchNode::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  uint64_t result = icu::StringTrieBuilder::ValueNode::operator==(a1, a2);
  if ((_DWORD)result) {
    return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24) && *(void *)(a1 + 32) == *(void *)(a2 + 32);
  }
  return result;
}

uint64_t icu::StringTrieBuilder::LinearMatchNode::markRightEdgesFirst( icu::StringTrieBuilder::LinearMatchNode *this, uint64_t a2)
{
  if (!*((_DWORD *)this + 3))
  {
    a2 = (*(uint64_t (**)(void))(**((void **)this + 4) + 32LL))(*((void *)this + 4));
    *((_DWORD *)this + 3) = a2;
  }

  return a2;
}

uint64_t icu::StringTrieBuilder::ListBranchNode::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  uint64_t result = icu::StringTrieBuilder::Node::operator==(a1, a2);
  if ((_DWORD)result)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 64);
    if ((int)v5 < 1)
    {
      return 1LL;
    }

    else
    {
      uint64_t v6 = 0LL;
      while (*(unsigned __int16 *)(a1 + 88 + 2 * v6) == *(unsigned __int16 *)(a2 + 88 + 2 * v6)
           && *(_DWORD *)(a1 + 4 * v6 + 68) == *(_DWORD *)(a2 + 4 * v6 + 68)
           && *(void *)(a1 + 8 * v6 + 24) == *(void *)(a2 + 8 * v6 + 24))
      {
        if (v5 == ++v6) {
          return 1LL;
        }
      }

      return 0LL;
    }
  }

  return result;
}

uint64_t icu::StringTrieBuilder::ListBranchNode::markRightEdgesFirst( icu::StringTrieBuilder::ListBranchNode *this, uint64_t a2)
{
  int v2 = *((_DWORD *)this + 3);
  if (!v2)
  {
    *((_DWORD *)this + 4) = a2;
    int v4 = (char *)this + 16;
    uint64_t v5 = *((int *)this + 16);
    do
    {
      uint64_t v6 = *(void *)&v4[8 * v5];
      if (v6) {
        a2 = (*(uint64_t (**)(uint64_t, void))(*(void *)v6 + 32LL))(v6, (v2 + a2));
      }
      --v5;
      int v2 = -1;
    }

    while (v5 + 1 > 1);
    *((_DWORD *)this + 3) = a2;
  }

  return a2;
}

uint64_t icu::StringTrieBuilder::ListBranchNode::write( icu::StringTrieBuilder::ListBranchNode *this, icu::StringTrieBuilder *a2)
{
  uint64_t v4 = *((int *)this + 16);
  uint64_t v5 = (int *)*((void *)this + v4 + 2);
  uint64_t v6 = (_DWORD *)((char *)this + 16);
  int v7 = v5 + 3;
  if (!v5) {
    int v7 = (int *)((char *)this + 16);
  }
  int v8 = *v7;
  unint64_t v9 = (char *)this + 8;
  do
  {
    int v10 = *(_DWORD **)&v9[8 * v4];
    if (v10)
    {
      int v11 = v10[3];
      if (v11 < 0)
      {
        BOOL v12 = v11 >= v8 && v11 <= *v6;
        if (!v12) {
          (*(void (**)(_DWORD *, icu::StringTrieBuilder *))(*(void *)v10 + 40LL))(v10, a2);
        }
      }
    }

    --v4;
  }

  while (v4 > 1);
  uint64_t v13 = *((int *)this + 16);
  uint64_t v14 = v13 - 1;
  if (v5)
  {
    (*(void (**)(int *, icu::StringTrieBuilder *))(*(void *)v5 + 40LL))(v5, a2);
    uint64_t v14 = (int)v14;
  }

  else
  {
    (*(void (**)(icu::StringTrieBuilder *, void, uint64_t))(*(void *)a2 + 136LL))( a2,  *((unsigned int *)this + v14 + 17),  1LL);
  }

  uint64_t result = (*(uint64_t (**)(icu::StringTrieBuilder *, void))(*(void *)a2 + 120LL))( a2,  *((unsigned __int16 *)this + v14 + 44));
  *((_DWORD *)this + 3) = result;
  uint64_t v16 = (v13 - 2);
  if ((int)v13 >= 2)
  {
    BOOL v17 = (char *)this + 68;
    do
    {
      uint64_t v18 = *(void *)&v17[8 * v16 - 44];
      if (v18)
      {
        uint64_t v19 = 0LL;
        uint64_t v20 = (result - *(_DWORD *)(v18 + 12));
      }

      else
      {
        uint64_t v20 = *(unsigned int *)&v17[4 * v16];
        uint64_t v19 = 1LL;
      }

      (*(void (**)(icu::StringTrieBuilder *, uint64_t, uint64_t))(*(void *)a2 + 136LL))(a2, v20, v19);
      uint64_t result = (*(uint64_t (**)(icu::StringTrieBuilder *, void))(*(void *)a2 + 120LL))( a2,  *(unsigned __int16 *)&v17[2 * v16 + 20]);
      *((_DWORD *)this + 3) = result;
      BOOL v12 = v16-- <= 0;
    }

    while (!v12);
  }

  return result;
}

uint64_t icu::StringTrieBuilder::SplitBranchNode::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  uint64_t result = icu::StringTrieBuilder::Node::operator==(a1, a2);
  if ((_DWORD)result) {
    return *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
  }
        && *(void *)(a1 + 24) == *(void *)(a2 + 24)
        && *(void *)(a1 + 32) == *(void *)(a2 + 32);
  return result;
}

uint64_t icu::StringTrieBuilder::SplitBranchNode::markRightEdgesFirst( icu::StringTrieBuilder::SplitBranchNode *this, uint64_t a2)
{
  if (!*((_DWORD *)this + 3))
  {
    *((_DWORD *)this + 4) = a2;
    int v3 = (*(uint64_t (**)(void))(**((void **)this + 4) + 32LL))(*((void *)this + 4));
    a2 = (*(uint64_t (**)(void, void))(**((void **)this + 3) + 32LL))( *((void *)this + 3),  (v3 - 1));
    *((_DWORD *)this + 3) = a2;
  }

  return a2;
}

uint64_t icu::StringTrieBuilder::SplitBranchNode::write( icu::StringTrieBuilder::SplitBranchNode *this, icu::StringTrieBuilder *a2)
{
  uint64_t v5 = (_DWORD *)*((void *)this + 3);
  uint64_t v4 = (_DWORD *)*((void *)this + 4);
  int v6 = v5[3];
  if (v6 < 0 && (v6 < v4[3] || v6 > *((_DWORD *)this + 4)))
  {
    (*(void (**)(_DWORD *, icu::StringTrieBuilder *))(*(void *)v5 + 40LL))(v5, a2);
    uint64_t v4 = (_DWORD *)*((void *)this + 4);
  }

  (*(void (**)(_DWORD *, icu::StringTrieBuilder *))(*(void *)v4 + 40LL))(v4, a2);
  (*(void (**)(icu::StringTrieBuilder *, void))(*(void *)a2 + 152LL))( a2,  *(unsigned int *)(*((void *)this + 3) + 12LL));
  uint64_t result = (*(uint64_t (**)(icu::StringTrieBuilder *, void))(*(void *)a2 + 120LL))( a2,  *((unsigned __int16 *)this + 10));
  *((_DWORD *)this + 3) = result;
  return result;
}

uint64_t icu::StringTrieBuilder::BranchHeadNode::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  uint64_t result = icu::StringTrieBuilder::ValueNode::operator==(a1, a2);
  if ((_DWORD)result) {
    return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24) && *(void *)(a1 + 32) == *(void *)(a2 + 32);
  }
  return result;
}

uint64_t icu::StringTrieBuilder::BranchHeadNode::markRightEdgesFirst( icu::StringTrieBuilder::BranchHeadNode *this, uint64_t a2)
{
  if (!*((_DWORD *)this + 3))
  {
    a2 = (*(uint64_t (**)(void))(**((void **)this + 4) + 32LL))(*((void *)this + 4));
    *((_DWORD *)this + 3) = a2;
  }

  return a2;
}

uint64_t icu::StringTrieBuilder::BranchHeadNode::write( icu::StringTrieBuilder::BranchHeadNode *this, icu::StringTrieBuilder *a2)
{
  int v4 = *((_DWORD *)this + 6);
  if (v4 <= (*(int (**)(icu::StringTrieBuilder *))(*(void *)a2 + 96LL))(a2))
  {
    uint64_t result = (*(uint64_t (**)(icu::StringTrieBuilder *, void, void, void))(*(void *)a2 + 144LL))( a2,  *((char *)this + 16),  *((unsigned int *)this + 5),  (*((_DWORD *)this + 6) - 1));
  }

  else
  {
    (*(void (**)(icu::StringTrieBuilder *, void))(*(void *)a2 + 120LL))( a2,  (*((_DWORD *)this + 6) - 1));
    uint64_t result = (*(uint64_t (**)(icu::StringTrieBuilder *, void, void, void))(*(void *)a2 + 144LL))( a2,  *((char *)this + 16),  *((unsigned int *)this + 5),  0LL);
  }

  *((_DWORD *)this + 3) = result;
  return result;
}

void sub_18080C608(icu::UObject *a1)
{
}

void sub_18080C620(icu::UObject *a1)
{
}

void sub_18080C638(icu::UObject *a1)
{
}

void sub_18080C650(icu::UObject *a1)
{
}

void sub_18080C668(icu::UObject *a1)
{
}

uint64_t ualoc_getLanguagesForRegion(const char *a1, void *a2, int a3, int *a4, double a5)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  if (*a4 > 0) {
    return 0LL;
  }
  BOOL v9 = a5 > 1.0 || a1 == 0LL;
  if (v9 || a5 < 0.0) {
    goto LABEL_13;
  }
  LODWORD(v10) = a3;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_10;
    }
LABEL_13:
    uint64_t v5 = 0LL;
    *a4 = 1;
    return v5;
  }

  if (a3) {
    goto LABEL_13;
  }
LABEL_10:
  uint64_t v12 = ures_openDirect(0LL, (uint64_t)"supplementalData", (uint64_t)a4);
  uint64_t v13 = ures_getByKey(v12, "territoryInfo", v12, a4);
  uint64_t v14 = ures_getByKey(v13, a1, v13, a4);
  uint64_t v15 = v14;
  if (*a4 >= 1)
  {
    ures_close(v14);
    return 0LL;
  }

  int Size = ures_getSize(v14);
  bzero(__src, 0x410uLL);
  if (Size < 1)
  {
    uint64_t v5 = 0LL;
    uint64_t v19 = 0LL;
    __base = __src;
  }

  else
  {
    signed int v18 = 0;
    uint64_t v19 = 0LL;
    uint64_t v5 = 0LL;
    int v43 = 26;
    __base = __src;
    do
    {
      uint64_t v20 = ures_getByIndex(v15, v18, v19, a4);
      uint64_t v19 = (uint64_t)v20;
      if (*a4 > 0) {
        break;
      }
      Key = (const char *)ures_getKey((uint64_t)v20);
      if (strcmp(Key, "territoryF") && strnlen(Key, 0x18uLL) <= 0x17)
      {
        HIDWORD(v45) = 0;
        uint64_t v22 = ures_getByKey(v19, "populationShareF", 0LL, (int *)&v45 + 1);
        double v23 = 0.0;
        if (SHIDWORD(v45) <= 0)
        {
          uint64_t v24 = v22;
          int Int = ures_getInt(v22, (int *)&v45 + 1);
          if (SHIDWORD(v45) <= 0) {
            double v23 = uprv_pow10(Int / 1000000 - 55) * (double)(Int % 1000000);
          }
          ures_close(v24);
        }

        if (v23 >= a5)
        {
          if (a2)
          {
            uint64_t v45 = 0LL;
            StringByKey = ures_getStringByKey(v19, "officialStatus", (int *)&v45, (int *)&v45 + 1);
            int v27 = 0;
            if (SHIDWORD(v45) <= 0)
            {
              int v28 = StringByKey;
              int32_t v29 = u_strcmp(StringByKey, word_1809F2CEA);
              if (v29)
              {
                if (v29 < 0 && !u_strcmp(v28, (const UChar *)L"de_facto_official")) {
                  int v27 = 8;
                }
                else {
                  int v27 = 4 * (u_strcmp(v28, (const UChar *)L"official_regional") == 0);
                }
              }

              else
              {
                int v27 = 12;
              }
            }

            int v42 = v27;
            int v30 = v43;
            if ((int)v5 >= v43)
            {
              v43 *= 3;
              size_t v32 = 120LL * v30;
              if (__base == __src)
              {
                unint64_t v33 = uprv_malloc(v32);
                if (!v33)
                {
LABEL_60:
                  __base = 0LL;
                  *a4 = 7;
                  break;
                }

                uint64_t v34 = v33;
                memcpy(v33, __src, 40LL * (int)v5);
                uint64_t v31 = v34;
              }

              else
              {
                uint64_t v31 = uprv_realloc(__base, v32);
                if (!v31) {
                  goto LABEL_60;
                }
              }
            }

            else
            {
              uint64_t v31 = __base;
            }

            __base = v31;
            __dst = &v31[40 * (int)v5];
            uint64_t v35 = off_189710D20;
            uint64_t v36 = "az";
            while (1)
            {
              int v37 = strcmp(Key, v36);
              if (v37 <= 0) {
                break;
              }
              int v38 = *v35;
              v35 += 2;
              uint64_t v36 = v38;
              if (!v38) {
                goto LABEL_45;
              }
            }

            if (!v37) {
              Key = *(v35 - 1);
            }
LABEL_45:
            strcpy(__dst, Key);
            int v39 = (double *)&__base[40 * (int)v5];
            v39[3] = v23;
            *((_DWORD *)v39 + 8) = v42;
          }

          uint64_t v5 = (v5 + 1);
        }
      }

      ++v18;
    }

    while (v18 != Size);
  }

  ures_close(v19);
  ures_close(v15);
  if (*a4 >= 1)
  {
    uint64_t v10 = 0LL;
    uint64_t v5 = 0LL;
    __int16 v40 = __base;
    if (__base == __src) {
      return v5;
    }
    goto LABEL_59;
  }

  if (a2)
  {
    qsort(__base, (int)v5, 0x28uLL, (int (__cdecl *)(const void *, const void *))sub_18080CAF0);
    uint64_t v10 = (int)v5 >= (int)v10 ? v10 : v5;
    memcpy(a2, __base, 40LL * (int)v10);
    uint64_t v5 = v10;
    __int16 v40 = __base;
    if (__base != __src)
    {
LABEL_59:
      free(v40);
      return v10;
    }
  }

  return v5;
}

uint64_t sub_18080CAF0(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 24);
  double v3 = *(double *)(a2 + 24);
  if (v2 > v3) {
    return 0xFFFFFFFFLL;
  }
  if (v2 < v3) {
    return 1LL;
  }
  return strcmp((const char *)a1, (const char *)a2);
}

uint64_t ualoc_getRegionsForLanguage(icu::Locale *a1, void *a2, unsigned int a3, int *a4, double a5)
{
  uint64_t v63 = *MEMORY[0x1895F89C0];
  if (*a4 > 0) {
    return 0LL;
  }
  __p = 0LL;
  unint64_t v42 = 0LL;
  int v43 = 0LL;
  __int128 v52 = 0u;
  memset(v53, 0, sizeof(v53));
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  *(_OWORD *)__s = 0u;
  __int128 v61 = 0u;
  memset(v62, 0, sizeof(v62));
  __int128 v59 = 0u;
  __int128 v60 = 0u;
  __int128 v57 = 0u;
  __int128 v58 = 0u;
  __int128 v55 = 0u;
  __int128 v56 = 0u;
  *(_OWORD *)__s2 = 0u;
  ualoc_canonicalForm(a1, __s, 157, a4);
  int v44 = 0;
  uloc_getLanguage((uint64_t)__s, __s2, 157, a4);
  uloc_addLikelySubtags(__s, __s, 157, (UErrorCode *)a4);
  uloc_addLikelySubtags(__s2, __s2, 157, (UErrorCode *)a4);
  if (*a4 <= 0)
  {
    uint64_t v19 = strrchr(__s, 95);
    if (v19)
    {
      *uint64_t v19 = 0;
      *strrchr(__s2, 95) = 0;
      if (!strcmp(__s, __s2)) {
        *strrchr(__s, 95) = 0;
      }
    }
  }

  uint64_t v10 = ures_openDirect(0LL, (uint64_t)"supplementalData", (uint64_t)a4);
  uint64_t v11 = ures_getByKey(v10, "territoryInfo", 0LL, a4);
  if (*a4 <= 0)
  {
    uint64_t v5 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v12 = 0LL;
    while (1)
    {
      if (!ures_hasNext(v11)) {
        goto LABEL_8;
      }
      NextResource = ures_getNextResource(v11, v12, a4);
      uint64_t v12 = (uint64_t)NextResource;
      if (*a4 > 0) {
        goto LABEL_8;
      }
      int v44 = 0;
      Key = (const char *)ures_getKey((uint64_t)NextResource);
      else {
        uint64_t v22 = __s;
      }
      uint64_t v23 = ures_getByKey(v12, v22, v13, &v44);
      uint64_t v13 = v23;
      if (v44 <= 0)
      {
        uint64_t v24 = ures_getByKey(v23, "populationShareF", v14, &v44);
        uint64_t v14 = v24;
        double v25 = 0.0;
        if (v44 <= 0)
        {
          int Int = ures_getInt(v24, &v44);
          if (v44 <= 0) {
            double v25 = uprv_pow10(Int / 1000000 - 55) * (double)(Int % 1000000);
          }
        }

        if (v25 >= a5)
        {
          if (a2)
          {
            memset(__s2, 0, sizeof(__s2));
            *(void *)&__int128 v55 = 0LL;
            int v27 = (const char *)ures_getKey(v12);
            strcpy(__s2, v27);
            *(double *)&__s2[8] = v25;
            LODWORD(v55) = 0;
            int v44 = 0;
            StringByKey = ures_getStringByKey(v13, "officialStatus", 0LL, &v44);
            if (v44 > 0) {
              goto LABEL_56;
            }
            int32_t v29 = StringByKey;
            if (!StringByKey) {
              goto LABEL_56;
            }
            if (u_strcmp(StringByKey, word_1809F2CEA))
            {
              if (u_strcmp(v29, (const UChar *)L"official_regional"))
              {
                if (!u_strcmp(v29, (const UChar *)L"de_facto_official"))
                {
                  int v30 = 8;
                  goto LABEL_55;
                }

LABEL_56:
                if (v42 >= (unint64_t)v43)
                {
                  unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - (void)__p) >> 3) + 1;
                  if (v33 > 0xAAAAAAAAAAAAAAALL) {
                    abort();
                  }
                  if (0x5555555555555556LL * ((v43 - __p) >> 3) > v33) {
                    unint64_t v33 = 0x5555555555555556LL * ((v43 - __p) >> 3);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((v43 - __p) >> 3) >= 0x555555555555555LL) {
                    unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v34 = v33;
                  }
                  if (v34) {
                    uint64_t v35 = (char *)sub_18080E314((uint64_t)&v43, v34);
                  }
                  else {
                    uint64_t v35 = 0LL;
                  }
                  uint64_t v36 = &v35[8 * ((uint64_t)(v42 - (void)__p) >> 3)];
                  __int128 v37 = *(_OWORD *)__s2;
                  *((void *)v36 + 2) = v55;
                  *(_OWORD *)uint64_t v36 = v37;
                  int v38 = (char *)v42;
                  int v39 = v36;
                  if ((char *)v42 != __p)
                  {
                    do
                    {
                      __int128 v40 = *(_OWORD *)(v38 - 24);
                      *((void *)v39 - icu::UVector32::~UVector32(this + 1) = *((void *)v38 - 1);
                      *(_OWORD *)(v39 - 24) = v40;
                      v39 -= 24;
                      v38 -= 24;
                    }

                    while (v38 != __p);
                    int v38 = __p;
                  }

                  unint64_t v32 = (unint64_t)(v36 + 24);
                  __p = v39;
                  int v43 = &v35[24 * v34];
                  if (v38) {
                    operator delete(v38);
                  }
                }

                else
                {
                  __int128 v31 = *(_OWORD *)__s2;
                  *(void *)(v42 + 16) = v55;
                  *(_OWORD *)unint64_t v42 = v31;
                  unint64_t v32 = v42 + 24;
                }

                unint64_t v42 = v32;
                goto LABEL_73;
              }

              int v30 = 4;
            }

            else
            {
              int v30 = 12;
            }

          ++v11;
        }

        *(_BYTE *)(v6 + 65) = v12;
        *(_BYTE *)(v2[1] + 64LL) = 1;
LABEL_47:
        uint64_t v5 = v11;
        goto LABEL_40;
      }

      if ((_DWORD)v12 == 126) {
        goto LABEL_15;
      }
      *(_DWORD *)(v6 + 72) = v12 | 0x100;
      v7[19] = 0;
LABEL_19:
      ++v9;
    }

    *(_DWORD *)(v6 + 76) = 0;
    if ((int)v12 <= 124)
    {
      if ((_DWORD)v12 == 10) {
        goto LABEL_19;
      }
      if ((_DWORD)v12 != 123) {
        goto LABEL_41;
      }
      goto LABEL_17;
    }

    if ((_DWORD)v12 == 125)
    {
LABEL_17:
      v7[17] = (_DWORD)v12 == 123;
      if (v7[19])
      {
        v7[19] = 0;
        *a2 = 18;
        *(_DWORD *)(v6 + 284) = 2;
        *(_BYTE *)(v6 + 65) = 126;
        *(_BYTE *)(v2[1] + 66LL) = v12;
        signed int v18 = v2[1];
LABEL_38:
        *(_BYTE *)(v18 + 64) = 2;
LABEL_39:
        uint64_t v5 = v11 + 1;
        break;
      }

      v7[19] = 1;
      goto LABEL_19;
    }

    if ((_DWORD)v12 != 126)
    {
LABEL_41:
      v7[19] = 0;
      *a2 = 18;
      *(_BYTE *)(v6 + 65) = 126;
      if (v7[17])
      {
        if ((v12 - 33) >= 0x5E)
        {
LABEL_43:
          ++v11;
          *(_BYTE *)(v2[1] + 66LL) = v12;
          uint64_t v19 = 2;
LABEL_46:
          *(_BYTE *)(v2[1] + 64LL) = v19;
          goto LABEL_47;
        }
      }

      else if ((v12 & 0x80) != 0)
      {
        goto LABEL_43;
      }

      uint64_t v19 = 1;
      goto LABEL_46;
    }

    uint64_t v16 = v2[6];
    if (v16) {
      *(_DWORD *)(v16 + 2LL * ((void)v3 - v2[4])) = ~*((_DWORD *)v2 + 4) + v9;
    }
    *double v3 = 126;
    v7[19] = 0;
LABEL_34:
    ++v3;
    uint64_t v5 = v11 + 1;
    break;
  }

          if (v8 >= 0x10000) {
            __int128 v31 = -2;
          }
          else {
            __int128 v31 = -1;
          }
          return (v31 + v12);
        }

        while (v14 < (int)v11)
        {
          unint64_t v15 = v14 + 1LL;
          uint64_t v16 = *(unsigned __int16 *)(a2 + 2LL * v14);
          if ((v16 & 0xFC00) == 0xD800 && v14 + 3 != (_DWORD)v6)
          {
            signed int v18 = *(unsigned __int16 *)(a2 + 2 * v15);
            uint64_t v19 = (v18 & 0xFC00) == 56320;
            uint64_t v20 = v14 + 2;
            int v21 = (v16 << 10) - 56613888 + v18;
            if (v19) {
              LODWORD(v15) = v20;
            }
            if (v19) {
              uint64_t v16 = v21;
            }
          }

          uint64_t v14 = v15;
          if (v8 == v16) {
            goto LABEL_56;
          }
        }
      }

      else if (a3)
      {
        if ((_DWORD)v6 != 2)
        {
          int32_t v29 = 0LL;
          while (v8 != *(unsigned __int16 *)(a2 + 2 * v29))
          {
            if (v11 == ++v29) {
              goto LABEL_47;
            }
          }

          return v9;
        }
      }

      else
      {
        if ((_DWORD)v6 == 2) {
          return v9;
        }
        int v30 = 0LL;
        while (v8 != *(unsigned __int16 *)(a2 + 2 * v30))
        {
          if (v11 == ++v30) {
            return v9;
          }
        }
      }

          icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)&v37);
          goto LABEL_57;
        }
      }

      else
      {
        if (!(_DWORD)v19) {
          goto LABEL_57;
        }
        LODWORD(v19) = (unsigned __int16)v58 >> 5;
        uint64_t v19 = (v58 & 0x8000u) == 0LL ? v19 : DWORD1(v58);
        if ((_DWORD)v19) {
          goto LABEL_57;
        }
      }

      icu::UnicodeString::doReplace((uint64_t)&v52, 0LL, 0LL, (uint64_t)L"yMd", 0, 0xFFFFFFFFLL);
      int v39 = 0u;
      __int128 v40 = 0u;
      __int128 v37 = 0u;
      int v38 = 0u;
      icu::DateFormat::getBestPattern(SmpFmtLocale, (UErrorCode *)&v52, a2, (uint64_t)&v37);
      double v25 = (void *)*(unsigned int *)a2;
      if ((int)v25 <= 0)
      {
        DefaultOrde__int16 r = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(v3 + 328));
        icu::DateIntervalFormat::setPatternInfo(v3, 5u, 0LL, (UChar **)&v37, DefaultOrder);
        int v28 = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(v3 + 328));
        icu::DateIntervalFormat::setPatternInfo(v3, 2u, 0LL, (UChar **)&v37, v28);
        int32_t v29 = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(v3 + 328));
        icu::DateIntervalFormat::setPatternInfo(v3, 1u, 0LL, (UChar **)&v37, v29);
        LOWORD(v36[0]) = 71;
        icu::UnicodeString::doReplace((uint64_t)&v52, 0LL, 0LL, (uint64_t)v36, 0, 1LL);
        icu::DateFormat::getBestPattern(SmpFmtLocale, (UErrorCode *)&v52, a2, (uint64_t)v36);
        icu::UnicodeString::operator=((icu::UnicodeString *)&v37, (icu::UnicodeString *)v36);
        icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v36);
        double v25 = (void *)*(unsigned int *)a2;
        if ((int)v25 <= 0)
        {
          __int128 v31 = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(v3 + 328));
          icu::DateIntervalFormat::setPatternInfo(v3, 0, 0LL, (UChar **)&v37, v31);
        }
      }

      goto LABEL_56;
    }
  }

  return this;
}

      if (v53) {
        (*(void (**)(uint64_t))(*(void *)v53 + 8LL))(v53);
      }
    }
  }

        icu::UMemory::operator delete(v25);
      }

      if ((int)v14 >= 1)
      {
        *a6 = (_DWORD)v18;
        icu::UnicodeString::copyFrom(v9, &v44, 0);
      }
    }

    else
    {
      uint64_t v14 = 0LL;
    }

    goto LABEL_61;
  }

  return v14;
}

LABEL_73:
      if (*a4 >= 1) {
        goto LABEL_8;
      }
    }
  }

  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  uint64_t v5 = 0LL;
LABEL_8:
  if (a2)
  {
    unint64_t v15 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - (void)__p) >> 3));
    uint64_t v16 = (char *)v42 == __p ? 0LL : v15;
    sub_18080E364((uint64_t)__p, v42, v16, 1);
    unsigned int v17 = -1431655765 * ((v42 - (unint64_t)__p) >> 3);
    uint64_t v5 = (int)v17 >= (int)a3 ? a3 : v17;
    if ((_DWORD)v5) {
      memmove(a2, __p, 24LL * (int)v5);
    }
  }

  if (v14) {
    ures_close(v14);
  }
  if (v13) {
    ures_close(v13);
  }
  if (v12) {
    ures_close(v12);
  }
  if (v11) {
    ures_close(v11);
  }
  if (v10) {
    ures_close(v10);
  }
  if (__p) {
    operator delete(__p);
  }
  return v5;
}

  __int128 v59 = v86;
LABEL_74:
  if (v59) {
    __int128 v60 = v35 == 0LL;
  }
  else {
    __int128 v60 = 0;
  }
  if (v60) {
    __int128 v61 = (const char **)v59;
  }
  else {
    __int128 v61 = (const char **)v35;
  }
  if (!v61) {
    goto LABEL_108;
  }
  _WORD *v49 = *v61;
  unsigned int v17 = 1LL;
  sub_18080D8DC((uint64_t)v61, v100, 1, (int *)v7);
  uint64_t v63 = v61 + 5;
  BOOL v62 = v61[5];
  if (v62)
  {
    uint64_t v64 = 0LL;
    else {
      uint64_t v65 = a4;
    }
    v97 = (const char **)v65;
    v96 += 2;
    BOOL v66 = v90;
    while (1)
    {
      if (v64)
      {
        if (v61[(v64 - 1) + 5] != v62 && (int)a4 >= 1)
        {
LABEL_94:
          int v69 = v96;
          BOOL v68 = v97;
          do
          {
            BOOL v70 = *(v69 - 2);
            if (*v61 != v70 && (int)v17 < v66)
            {
              BOOL v72 = *v63;
              v73 = strcmp(*v63, "zh_Hant_HK");
              unint64_t v74 = *v69;
              if (!v73 && !strcmp(*v69, "zh_Hant_TW") || !strcmp(v72, v74))
              {
                v87[(int)v17] = v70;
                unsigned int v17 = (v17 + 1);
              }

              BOOL v9 = v93;
              BOOL v66 = v90;
            }

            else
            {
              BOOL v9 = v93;
            }

            v69 += 15;
            BOOL v68 = (const char **)((char *)v68 - 1);
          }

          while (v68);
        }
      }

      else if ((int)a4 >= 1)
      {
        goto LABEL_94;
      }

      v75 = &v61[++v64];
      int v76 = v75[5];
      uint64_t v63 = v75 + 5;
      BOOL v62 = v76;
      LODWORD(a4) = v84;
      if (!v76)
      {
        __int128 v49 = v87;
        if (!(_DWORD)v17)
        {
LABEL_108:
          if ((int)a4 < 1)
          {
LABEL_111:
            unsigned int v17 = 0LL;
          }

          else
          {
            while (strcmp(*v9, "zxx"))
            {
              ++v9;
              if (!--v98) {
                goto LABEL_111;
              }
            }

            _WORD *v49 = *v9;
            unsigned int v17 = 1LL;
          }
        }

        break;
      }
    }
  }

  sub_18080E2E4((uint64_t)v100);
  return v17;
}

  LODWORD(i) = v80 - 1;
  if ((int)v80 - 1 > (int)v7)
  {
    for (uint64_t i = (int)i; !v52 && i > v17; --i)
    {
      __int128 v37 = *(_BYTE *)(v39 + i);
      if (((0x5D800uLL >> v37) & 1) == 0) {
        break;
      }
      if (v9)
      {
        __int128 v52 = *(unsigned __int16 *)(v9 + 2 * i);
        if (*(_WORD *)(v9 + 2 * i))
        {
          while (1)
          {
            __int128 v37 = byte_1809F2DB6[v52 & 0xF];
            if (((0x5D800uLL >> v37) & 1) == 0) {
              goto LABEL_83;
            }
            __int128 v53 = v52 > 0xF;
            v52 >>= 4;
            if (!v53)
            {
              __int128 v52 = 0;
              goto LABEL_83;
            }
          }
        }
      }

      else
      {
        __int128 v52 = 0;
      }

      __int128 v37 = 10;
LABEL_83:
      ;
    }
  }

  if ((_DWORD)i == (_DWORD)v7) {
    __int128 v37 = *(_BYTE *)(v39 + v17);
  }
  v75 = *(int *)(v38 + 340) + 1LL;
  *(_DWORD *)(v38 + 340) = v75;
  int v76 = *(void *)(v38 + 344) + 16 * v75;
  *(_WORD *)(v76 + 12) = v36;
  unsigned int v77 = v92;
  int v78 = v90;
  *(_DWORD *)(v76 + 4) = v35;
  *(_DWORD *)(v76 + 8) = v77;
  *(_DWORD *)int v76 = v78;
  return result;
}

    if (v33 > 0xFF)
    {
      uint64_t v45 = v64++;
      *uint64_t v45 = BYTE1(v33);
      if (v16 < 2)
      {
        *(_BYTE *)(v6 + 104) = v33;
        *(_BYTE *)(v6 + 9icu::UVector32::~UVector32(this + 1) = 1;
        *a3 = 15;
        goto LABEL_113;
      }

      __int128 v46 = v64++;
      uint64_t *v46 = v33;
      int v44 = -2;
    }

    else
    {
      int v43 = v64++;
      *int v43 = v33;
      int v44 = -1;
    }

    v16 += v44;
  }

  __int128 v58 = (char)v13 - (uint64_t)v23;
  if ((char)v13 < v23)
  {
    __int128 v59 = (_BYTE *)((char)v13 + v8 + 65);
    do
      *v59++ = v7[v58];
    while (!__CFADD__(v58++, 1LL));
  }

  *(_BYTE *)(v8 + 64) = v23;
  a2[2] = &v7[v58];
  *(void *)(v5 + 32) = v64;
  *a3 = 12;
  return result;
}

        double v3 = 0LL;
        *a2 = v17;
        goto LABEL_28;
      default:
        unsigned int v17 = 16;
        goto LABEL_73;
    }
  }

  return 0LL;
}

  if ((v9 & 0x400) == 0) {
    goto LABEL_74;
  }
  int v69 = 0;
  BOOL v70 = 0;
  *(void *)v107 = 0LL;
  while (2)
  {
    while (2)
    {
      if (v69) {
        goto LABEL_187;
      }
      while (2)
      {
        BOOL v72 = *(int *)&v107[4];
        if (*(_DWORD *)&v107[4] == v109[0])
        {
          int v69 = 2;
          if (v70) {
            goto LABEL_206;
          }
          while (1)
          {
LABEL_194:
            v79 = *(int *)v107;
            if (*(_DWORD *)v107 == v108)
            {
              BOOL v70 = 2;
              goto LABEL_206;
            }

            ++*(_DWORD *)v107;
            unsigned int v80 = *(unsigned __int8 *)(a6 + v79);
            if ((v80 & 0x80) == 0)
            {
              int v81 = *(unsigned __int8 *)(a6 + v79);
              goto LABEL_201;
            }

            unsigned int v83 = *(unsigned __int8 *)(v79 + a6 + 2);
            *(_DWORD *)v107 = v79 + 3;
            if ((_DWORD)v80 == 226)
            {
              int v81 = v83 | 0x100;
LABEL_201:
              int v78 = *((unsigned __int16 *)v13 + v81);
              goto LABEL_203;
            }

            if ((_DWORD)v83 == 190)
            {
              int v78 = 3LL;
LABEL_202:
              LODWORD(v78) = icu::CollationFastLatin::nextPair( (uint64_t)v13,  v80,  v78,  0LL,  a6,  (int *)v107,  (int *)&v108);
              goto LABEL_203;
            }

            LODWORD(v78) = 64680;
LABEL_203:
            Cases = icu::CollationFastLatin::getCases(v14, v106 < 0x1000, v78);
            if (Cases)
            {
              BOOL v70 = Cases;
              goto LABEL_206;
            }
          }

          unsigned int v82 = *(unsigned __int8 *)(a6 + v79 + 1) + (v80 << 6);
          *(_DWORD *)v107 = v79 + 2;
          int v81 = v82 - 12416;
          goto LABEL_201;
        }

        ++*(_DWORD *)&v107[4];
        v73 = *(unsigned __int8 *)(a4 + v72);
        if ((v73 & 0x80) == 0)
        {
          unint64_t v74 = *(unsigned __int8 *)(a4 + v72);
          goto LABEL_183;
        }

        if (v73 <= 0xC5)
        {
          v75 = *(unsigned __int8 *)(a4 + v72 + 1) + (v73 << 6);
          *(_DWORD *)&v107[4] = v72 + 2;
          unint64_t v74 = v75 - 12416;
          goto LABEL_183;
        }

        int v76 = *(unsigned __int8 *)(v72 + a4 + 2);
        *(_DWORD *)&v107[4] = v72 + 3;
        if ((_DWORD)v73 == 226)
        {
          unint64_t v74 = v76 | 0x100;
LABEL_183:
          int v71 = *((unsigned __int16 *)v13 + v74);
          if (v71 <= 0xBFF) {
LABEL_184:
          }
            LODWORD(v7icu::UVector32::~UVector32(this + 1) = icu::CollationFastLatin::nextPair((uint64_t)v13, v73, v71, 0LL, a4, (int *)&v107[4], v109);
        }

        else
        {
          if ((_DWORD)v76 == 190)
          {
            int v71 = 3LL;
            goto LABEL_184;
          }

          LODWORD(v7icu::UVector32::~UVector32(this + 1) = 64680;
        }

        unsigned int v77 = icu::CollationFastLatin::getCases(v14, v106 < 0x1000, v71);
        if (!v77) {
          continue;
        }
        break;
      }

      int v69 = v77;
LABEL_187:
      if (!v70) {
        goto LABEL_194;
      }
LABEL_206:
      if (v69 != v70)
      {
        if ((unsigned __int16)v69 != (unsigned __int16)v70)
        {
          else {
            unsigned int v86 = -1;
          }
          else {
            unsigned int v87 = 1;
          }
          if ((v9 & 0x100) != 0) {
            return v86;
          }
          else {
            return v87;
          }
        }

        if (v69 == 2) {
          goto LABEL_74;
        }
        v69 >>= 16;
        v70 >>= 16;
        continue;
      }

      break;
    }

    BOOL v70 = 0;
    uint64_t v19 = v69 == 2;
    int v69 = 0;
    if (!v19) {
      continue;
    }
    break;
  }

    __int128 v50 = 1;
    int v39 = *(_DWORD *)v25;
    if (*((_BYTE *)v25 + 9)) {
      __int128 v40 = 0;
    }
    else {
      __int128 v40 = v39 == 1;
    }
    uint64_t v19 = v41;
    if (v40)
    {
      if ((*((_BYTE *)v25 + 8) & 0x70) != 0)
      {
        int v39 = 1;
      }

      else
      {
        __int128 v50 = 0;
        int v39 = *(_DWORD *)v25;
      }
    }

    LODWORD(v47) = *(_DWORD *)a3;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)v25 + 8);
    *(_DWORD *)(a1 + 4) = *((_DWORD *)v25 + 1);
    sub_1808C77A4((_BYTE *)a1, (int *)&v47, (char *)v25 + 9, v39, &v50, a4);
    sub_1808C7A24((unsigned int *)a1, a3, &v50, a4);
    goto LABEL_82;
  }

  double v25 = uprv_malloc(v31);
  unint64_t v42 = v25;
  if (v25) {
    goto LABEL_44;
  }
  signed int v18 = 0LL;
  unint64_t v32 = 0LL;
  *a4 |= 0x10u;
LABEL_83:
  if (v19) {
    uprv_free(v19);
  }
  if (v32) {
    uprv_free(v32);
  }
  if (v18) {
    uprv_free(v18);
  }
  return a1;
}

            v216 = U_ZERO_ERROR;
            ures_close((uint64_t)v65);
            uint64_t v65 = ures_getNextResource(v63, 0LL, (int *)&v216);
            unint64_t v15 = a4;
          }

          while (v65);
        }

        ures_close(v63);
        __int128 v56 = v181;
        __int128 v51 = (char **)v177;
      }

      v216 = U_ZERO_ERROR;
      unsigned int v77 = icu::NumberingSystem::createInstance((icu::NumberingSystem *)v51, &v216, v62);
      if (v77 || v216 > U_ZERO_ERROR)
      {
        if (v216 <= U_ZERO_ERROR)
        {
          int v78 = ures_getByKeyWithFallback(v60, "NumberElements", 0LL, &v216);
          Name = (char *)icu::NumberingSystem::getName(v77);
          unsigned int v80 = ures_getByKeyWithFallback(v78, Name, 0LL, &v216);
          int v81 = ures_getByKeyWithFallback(v80, "symbols", 0LL, &v216);
          v223 = 0u;
          v224 = 0u;
          v225 = 0u;
          v226 = 0LL;
          v222 = off_18971B688;
          LOWORD(v223) = 2;
          v221 = 0;
          StringByKey = ures_getStringByKey(v81, "timeSeparator", &v221, (int *)&v216);
          if (v216 <= U_ZERO_ERROR)
          {
            v220 = StringByKey;
            icu::UnicodeString::setTo((icu::UnicodeString *)&v222, 1, &v220, v221);
          }

          else
          {
            icu::UnicodeString::setToBogus((icu::UnicodeString *)&v222);
          }

          icu::UnicodeString::operator=(v56, (icu::UnicodeString *)&v222);
          icu::UnicodeString::~UnicodeString(v84, (icu::UnicodeString *)&v222);
          if (v216 >= U_ILLEGAL_ARGUMENT_ERROR) {
            icu::UnicodeString::setToBogus(v56);
          }
          if (v81) {
            ures_close(v81);
          }
          if (v80) {
            ures_close(v80);
          }
          if (v78) {
            ures_close(v78);
          }
        }

        ures_close(v60);
        if (v77) {
          (*(void (**)(icu::NumberingSystem *))(*(void *)v77 + 8LL))(v77);
        }
      }

      else
      {
        v216 = U_MEMORY_ALLOCATION_ERROR;
        ures_close(v60);
      }
    }

    unsigned __int16 v85 = (int *)(v179 + 108);
    unsigned int v86 = v179 + 110;
    unsigned int v87 = v179 + 112;
    uint64_t v88 = v179 + 114;
    uint64_t v89 = v179 + 116;
    uint64_t v90 = this;
    uint32_t v91 = v179 + 118;
    if ((*((_WORD *)this + 160) & 1) != 0)
    {
      LOWORD(v222) = 58;
      icu::UnicodeString::unBogus((uint64_t)v56);
      else {
        v92 = *((unsigned __int16 *)this + 160) >> 5;
      }
      icu::UnicodeString::doReplace((uint64_t)v56, 0LL, v92, (uint64_t)&v222, 0, 1LL);
      uint64_t v90 = this;
    }

    uint64_t v93 = sub_1808DF4B0((icu::CharString *)&v227, "dayPeriod", "format", "abbreviated", a4);
    *((void *)v90 + 108) = sub_1808DF628((uint64_t)&v233, v93, v85, (int *)a4);
    __int128 v94 = sub_1808DF4B0((icu::CharString *)&v227, "dayPeriod", "format", "wide", a4);
    *((void *)v90 + 110) = sub_1808DF628((uint64_t)&v233, v94, v86, (int *)a4);
    __int128 v95 = sub_1808DF4B0((icu::CharString *)&v227, "dayPeriod", "format", "narrow", a4);
    *((void *)v90 + 112) = sub_1808DF628((uint64_t)&v233, v95, v87, (int *)a4);
    UErrorCode v96 = sub_1808DF4B0((icu::CharString *)&v227, "dayPeriod", "stand-alone", "abbreviated", a4);
    *((void *)v90 + 114) = sub_1808DF628((uint64_t)&v233, v96, v88, (int *)a4);
    v97 = sub_1808DF4B0((icu::CharString *)&v227, "dayPeriod", "stand-alone", "wide", a4);
    *((void *)v90 + 116) = sub_1808DF628((uint64_t)&v233, v97, v89, (int *)a4);
    v98 = sub_1808DF4B0((icu::CharString *)&v227, "dayPeriod", "stand-alone", "narrow", a4);
    *((void *)v90 + 118) = sub_1808DF628((uint64_t)&v233, v98, v91, (int *)a4);
    if (*(int *)a4 <= 0 && *v85 >= 1)
    {
      v99 = 0LL;
      v100 = 0LL;
      do
      {
        if (v100 < (int)*v86)
        {
          v101 = *((void *)v90 + 110);
          if (v101)
          {
            if ((*(_WORD *)(v101 + v99 + 8) & 1) != 0)
            {
              icu::UnicodeString::fastCopyFrom((UChar **)(v101 + v99), (UChar **)(*((void *)v90 + 108) + v99));
              uint64_t v90 = this;
            }
          }
        }

        if (v100 < (int)*v87)
        {
          v102 = *((void *)v90 + 112);
          if (v102)
          {
            if ((*(_WORD *)(v102 + v99 + 8) & 1) != 0)
            {
              icu::UnicodeString::fastCopyFrom((UChar **)(v102 + v99), (UChar **)(*((void *)v90 + 108) + v99));
              uint64_t v90 = this;
            }
          }
        }

        if (v100 < (int)*v88)
        {
          v103 = *((void *)v90 + 114);
          if (v103)
          {
            if ((*(_WORD *)(v103 + v99 + 8) & 1) != 0)
            {
              icu::UnicodeString::fastCopyFrom((UChar **)(v103 + v99), (UChar **)(*((void *)v90 + 108) + v99));
              uint64_t v90 = this;
            }
          }
        }

        if (v100 < (int)*v89)
        {
          v104 = *((void *)v90 + 116);
          if (v104)
          {
            if ((*(_WORD *)(v104 + v99 + 8) & 1) != 0)
            {
              icu::UnicodeString::fastCopyFrom((UChar **)(v104 + v99), (UChar **)(*((void *)v90 + 114) + v99));
              uint64_t v90 = this;
            }
          }
        }

        if (v100 < (int)*v91)
        {
          v105 = *((void *)v90 + 118);
          if (v105)
          {
            if ((*(_WORD *)(v105 + v99 + 8) & 1) != 0)
            {
              icu::UnicodeString::fastCopyFrom((UChar **)(v105 + v99), (UChar **)(*((void *)v90 + 114) + v99));
              uint64_t v90 = this;
            }
          }
        }

        ++v100;
        v99 += 64LL;
      }

      while (v100 < *v85);
    }

    v222 = (void (**)(icu::UnicodeString *__hidden))((char *)v90 + 956);
    *(void *)&v223 = (char *)v90 + 1113;
    LocaleByType = (const char *)ures_getLocaleByType(v21, 1, (int *)a4);
    v107 = (const char *)ures_getLocaleByType(v21, 0, (int *)a4);
    icu::LocaleBased::setLocaleIDs((char *)&v222, LocaleByType, v107);
    v108 = sub_1808DF7F0((icu::CharString *)&v227, "eras", "abbreviated", a4);
    sub_1808DF4F0(v179, v197, (uint64_t)&v233, v108, (int *)a4);
    v109 = *a4;
    v110 = sub_1808DF7F0((icu::CharString *)&v227, "eras", "wide", a4);
    sub_1808DF4F0(v186, v185, (uint64_t)&v233, v110, (int *)a4);
    v111 = *a4;
    if (*a4 == U_MISSING_RESOURCE_ERROR)
    {
      *a4 = v109;
      icu::DateFormatSymbols::assignArray( (icu::UnicodeString *)v186,  v185,  (int *)*v179,  (const icu::UnicodeString *)*v197);
      v111 = *a4;
    }

    v112 = sub_1808DF7F0((icu::CharString *)&v227, "eras", "narrow", a4);
    sub_1808DF4F0(v188, v187, (uint64_t)&v233, v112, (int *)a4);
    if (*a4 == U_MISSING_RESOURCE_ERROR)
    {
      *a4 = v111;
      icu::DateFormatSymbols::assignArray( (icu::UnicodeString *)v188,  v187,  (int *)*v179,  (const icu::UnicodeString *)*v197);
    }

    v113 = sub_1808DF4B0((icu::CharString *)&v227, "monthNames", "format", "wide", a4);
    sub_1808DF4F0(v199, v198, (uint64_t)&v233, v113, (int *)a4);
    v114 = sub_1808DF4B0((icu::CharString *)&v227, "monthNames", "format", "abbreviated", a4);
    sub_1808DF4F0(v204, v205, (uint64_t)&v233, v114, (int *)a4);
    v115 = sub_1808DF4B0((icu::CharString *)&v227, "monthNames", "stand-alone", "wide", a4);
    sub_1808DF4F0(v191, v190, (uint64_t)&v233, v115, (int *)a4);
    if (*a4 == U_MISSING_RESOURCE_ERROR)
    {
      *a4 = U_ZERO_ERROR;
      icu::DateFormatSymbols::assignArray( (icu::UnicodeString *)v191,  v190,  (int *)*v199,  (const icu::UnicodeString *)*v198);
    }

    v116 = sub_1808DF4B0((icu::CharString *)&v227, "monthNames", "stand-alone", "abbreviated", a4);
    sub_1808DF4F0(v193, v192, (uint64_t)&v233, v116, (int *)a4);
    v117 = *a4;
    if (*a4 == U_MISSING_RESOURCE_ERROR)
    {
      *a4 = U_ZERO_ERROR;
      icu::DateFormatSymbols::assignArray( (icu::UnicodeString *)v193,  v192,  (int *)*v204,  (const icu::UnicodeString *)*v205);
      v117 = *a4;
    }

    v118 = v179;
    v119 = v179 + 36;
    v120 = (icu::UnicodeString **)(v179 + 37);
    v155 = v179 + 34;
    v157 = (unsigned int *)(v179 + 35);
    LODWORD(v220) = v117;
    v221 = v117;
    v121 = sub_1808DF4B0((icu::CharString *)&v227, "monthNames", "format", "narrow", (UErrorCode *)&v220);
    sub_1808DF4F0(v189, v206, (uint64_t)&v233, v121, (int *)&v220);
    v122 = sub_1808DF4B0((icu::CharString *)&v227, "monthNames", "stand-alone", "narrow", (UErrorCode *)&v220);
    sub_1808DF4F0(v195, v194, (uint64_t)&v233, v122, &v221);
    if ((_DWORD)v220 != 2 || v221 == 2)
    {
      if ((_DWORD)v220 == 2 || v221 != 2)
      {
        if ((_DWORD)v220 != 2 || v221 != 2)
        {
LABEL_143:
          v215 = U_ZERO_ERROR;
          LODWORD(v23icu::UVector32::~UVector32(this + 1) = 0;
          *v227 = 0;
          v128 = icu::CharString::append((icu::CharString *)&v227, "AmPmMarkers", -1, &v215);
          v129 = (icu::UnicodeString *)(v179 + 34);
          sub_1808DF4F0(v155, v157, (uint64_t)&v233, v128, (int *)&v215);
          if (v215 >= U_ILLEGAL_ARGUMENT_ERROR)
          {
            LODWORD(v23icu::UVector32::~UVector32(this + 1) = 0;
            *v227 = 0;
            v130 = icu::CharString::append((icu::CharString *)&v227, "AmPmMarkersAbbr", -1, a4);
            sub_1808DF4F0(v155, v157, (uint64_t)&v233, v130, (int *)a4);
          }

          v215 = U_ZERO_ERROR;
          LODWORD(v23icu::UVector32::~UVector32(this + 1) = 0;
          *v227 = 0;
          v131 = icu::CharString::append((icu::CharString *)&v227, "AmPmMarkersNarrow", -1, &v215);
          sub_1808DF4F0(v119, v120, (uint64_t)&v233, v131, (int *)&v215);
          if (v215 >= U_ILLEGAL_ARGUMENT_ERROR)
          {
            LODWORD(v23icu::UVector32::~UVector32(this + 1) = 0;
            *v227 = 0;
            v132 = icu::CharString::append((icu::CharString *)&v227, "AmPmMarkersAbbr", -1, a4);
            sub_1808DF4F0(v119, v120, (uint64_t)&v233, v132, (int *)a4);
          }

          v164 = (icu::UnicodeString **)(v118 + 53);
          v165 = v118 + 52;
          v167 = (unsigned int *)(v118 + 47);
          v168 = v118 + 46;
          v182 = v118 + 48;
          v178 = (icu::UnicodeString **)(v118 + 49);
          if (*a4 == U_MISSING_RESOURCE_ERROR)
          {
            *a4 = U_ZERO_ERROR;
            icu::DateFormatSymbols::assignArray( (icu::UnicodeString *)v119,  v120,  (int *)*v155,  (const icu::UnicodeString *)*v157);
          }

          v162 = (icu::UnicodeString **)(v118 + 55);
          v163 = v118 + 54;
          v133 = sub_1808DF4B0((icu::CharString *)&v227, "quarters", "format", "wide", a4);
          sub_1808DF4F0(v168, v167, (uint64_t)&v233, v133, (int *)a4);
          v134 = sub_1808DF4B0((icu::CharString *)&v227, "quarters", "format", "abbreviated", a4);
          sub_1808DF4F0(v182, v178, (uint64_t)&v233, v134, (int *)a4);
          if (*a4 == U_MISSING_RESOURCE_ERROR)
          {
            *a4 = U_ZERO_ERROR;
            icu::DateFormatSymbols::assignArray( (icu::UnicodeString *)v182,  v178,  (int *)*v168,  (const icu::UnicodeString *)*v167);
          }

          v160 = (icu::UnicodeString **)(v118 + 51);
          v161 = v118 + 50;
          v135 = sub_1808DF4B0((icu::CharString *)&v227, "quarters", "stand-alone", "wide", a4);
          sub_1808DF4F0(v165, v164, (uint64_t)&v233, v135, (int *)a4);
          if (*a4 == U_MISSING_RESOURCE_ERROR)
          {
            *a4 = U_ZERO_ERROR;
            icu::DateFormatSymbols::assignArray( (icu::UnicodeString *)v165,  v164,  (int *)*v168,  (const icu::UnicodeString *)*v167);
          }

          v158 = (unsigned int *)(v118 + 57);
          v159 = v118 + 56;
          v136 = sub_1808DF4B0((icu::CharString *)&v227, "quarters", "stand-alone", "abbreviated", a4);
          sub_1808DF4F0(v163, v162, (uint64_t)&v233, v136, (int *)a4);
          if (*a4 == U_MISSING_RESOURCE_ERROR)
          {
            *a4 = U_ZERO_ERROR;
            icu::DateFormatSymbols::assignArray( (icu::UnicodeString *)v163,  v162,  (int *)*v182,  (const icu::UnicodeString *)*(unsigned int *)v178);
          }

          v137 = sub_1808DF4B0((icu::CharString *)&v227, "quarters", "stand-alone", "narrow", a4);
          sub_1808DF4F0(v159, v158, (uint64_t)&v233, v137, (int *)a4);
          v138 = sub_1808DF4B0((icu::CharString *)&v227, "quarters", "format", "narrow", a4);
          sub_1808DF4F0(v161, v160, (uint64_t)&v233, v138, (int *)a4);
          if (*a4 == U_MISSING_RESOURCE_ERROR)
          {
            *a4 = U_ZERO_ERROR;
            icu::DateFormatSymbols::assignArray( (icu::UnicodeString *)v161,  v160,  (int *)*v159,  (const icu::UnicodeString *)*v158);
          }

          v214 = (const UChar *)L"GyMdkHmsSEDFwWahKzYeugAZvcLQqVUOXxrbB";
          v209 = (icu::DateFormatSymbols *)((char *)this + 768);
          icu::UnicodeString::setTo(v209, 1, &v214, 37);
          v139 = sub_1808DF4B0((icu::CharString *)&v227, "dayNames", "format", "wide", a4);
          sub_1808DF83C(v201, v200, (uint64_t)&v233, v139, (int *)a4);
          v140 = sub_1808DF4B0((icu::CharString *)&v227, "dayNames", "format", "abbreviated", a4);
          sub_1808DF83C(v207, v202, (uint64_t)&v233, v140, (int *)a4);
          v141 = sub_1808DF4B0((icu::CharString *)&v227, "dayNames", "format", "short", a4);
          sub_1808DF83C(v196, v203, (uint64_t)&v233, v141, (int *)a4);
          if (*a4 == U_MISSING_RESOURCE_ERROR)
          {
            *a4 = U_ZERO_ERROR;
            icu::DateFormatSymbols::assignArray( (icu::UnicodeString *)v196,  v203,  (int *)*v207,  (const icu::UnicodeString *)*v202);
          }

          v142 = sub_1808DF4B0((icu::CharString *)&v227, "dayNames", "stand-alone", "wide", a4);
          sub_1808DF83C(v173, v170, (uint64_t)&v233, v142, (int *)a4);
          if (*a4 == U_MISSING_RESOURCE_ERROR)
          {
            *a4 = U_ZERO_ERROR;
            icu::DateFormatSymbols::assignArray( (icu::UnicodeString *)v173,  v170,  (int *)*v201,  (const icu::UnicodeString *)*v200);
          }

          v143 = sub_1808DF4B0((icu::CharString *)&v227, "dayNames", "stand-alone", "abbreviated", a4);
          sub_1808DF83C(v171, v174, (uint64_t)&v233, v143, (int *)a4);
          if (*a4 == U_MISSING_RESOURCE_ERROR)
          {
            *a4 = U_ZERO_ERROR;
            icu::DateFormatSymbols::assignArray( (icu::UnicodeString *)v171,  v174,  (int *)*v207,  (const icu::UnicodeString *)*v202);
          }

          v144 = (icu::UnicodeString *)(v118 + 32);
          v145 = (icu::UnicodeString **)(v118 + 33);
          v146 = sub_1808DF4B0((icu::CharString *)&v227, "dayNames", "stand-alone", "short", a4);
          sub_1808DF83C(v176, v175, (uint64_t)&v233, v146, (int *)a4);
          v147 = *a4;
          if (*a4 == U_MISSING_RESOURCE_ERROR)
          {
            *a4 = U_ZERO_ERROR;
            icu::DateFormatSymbols::assignArray( (icu::UnicodeString *)v176,  v175,  (int *)*v196,  (const icu::UnicodeString *)*(unsigned int *)v203);
            v147 = *a4;
          }

          v213 = v147;
          v148 = sub_1808DF4B0((icu::CharString *)&v227, "dayNames", "format", "narrow", a4);
          sub_1808DF83C(v172, v169, (uint64_t)&v233, v148, &v213);
          v212 = *a4;
          v149 = sub_1808DF4B0((icu::CharString *)&v227, "dayNames", "stand-alone", "narrow", a4);
          sub_1808DF83C(v118 + 32, (_DWORD *)v118 + 66, (uint64_t)&v233, v149, (int *)&v212);
          if (v213 != 2 || v212 == U_MISSING_RESOURCE_ERROR)
          {
            v151 = v202;
            v152 = a5;
            if (v213 == 2 || v212 != U_MISSING_RESOURCE_ERROR)
            {
              v150 = (icu::UnicodeString *)v172;
              if (v213 != 2 || v212 != U_MISSING_RESOURCE_ERROR) {
                goto LABEL_175;
              }
              icu::DateFormatSymbols::assignArray( (icu::UnicodeString *)v172,  v169,  (int *)*v207,  (const icu::UnicodeString *)*v202);
              v153 = (int *)*v207;
              v129 = (icu::UnicodeString *)(v179 + 34);
              v154 = *v202;
            }

            else
            {
              v150 = (icu::UnicodeString *)v172;
              v153 = (int *)*v172;
              v154 = *(unsigned int *)v169;
            }

            icu::DateFormatSymbols::assignArray(v144, v145, v153, (const icu::UnicodeString *)v154);
          }

          else
          {
            v150 = (icu::UnicodeString *)v172;
            icu::DateFormatSymbols::assignArray( (icu::UnicodeString *)v172,  v169,  *(int **)v144,  (const icu::UnicodeString *)*(unsigned int *)v145);
            v151 = v202;
            v152 = a5;
          }

    icu::FieldPositionIteratorHandler::~FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v73);
  }

  return a4;
}

          ures_close(v20);
          goto LABEL_25;
        }

uint64_t ualoc_getAppleParent(char *a1, char *a2, int a3, UErrorCode *a4)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  if (!a2)
  {
    if (!a3) {
      goto LABEL_6;
    }
LABEL_25:
    size_t v4 = 0LL;
    int v17 = 1;
LABEL_26:
    *a4 = v17;
    return v4;
  }

  if (a3 < 0) {
    goto LABEL_25;
  }
LABEL_6:
  __int128 v45 = 0u;
  memset(v46, 0, sizeof(v46));
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  *(_OWORD *)__big = 0u;
  int BaseName = uloc_getBaseName(a1, __big, 157, a4);
  int v10 = BaseName;
  if (*a4 == U_STRING_NOT_TERMINATED_WARNING)
  {
    HIBYTE(v46[14]) = 0;
    *a4 = U_ZERO_ERROR;
  }

  uint64_t v11 = strstr(__big, "__");
  if (v11)
  {
    char *v11 = 0;
    int v10 = strlen(__big);
  }

  if (v10 > 1)
  {
    if (*(unsigned __int16 *)__big == 28261
      || *(unsigned __int16 *)__big == 26746
      || v10 >= 3 && (*(unsigned __int16 *)__big == 30073 ? (BOOL v12 = __big[2] == 101) : (BOOL v12 = 0), v12))
    {
      uint64_t v13 = "en_150";
      uint64_t v14 = off_189710788;
      while (1)
      {
        int v15 = strcmp(__big, v13);
        if (v15 <= 0) {
          break;
        }
        uint64_t v16 = *v14;
        v14 += 2;
        uint64_t v13 = v16;
        if (!v16) {
          goto LABEL_28;
        }
      }

      if (!v15)
      {
        LocaleByType = *(v14 - 1);
        size_t v4 = strlen(LocaleByType);
LABEL_66:
        int v17 = 15;
        goto LABEL_26;
      }
    }
  }

char **sub_18080D500(char **result, char *a2, void *a3, UErrorCode *a4)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  if (*result) {
    return result;
  }
  uint64_t v5 = a3;
  int v6 = result;
  icu::UnicodeSet *result = a2;
  int v7 = (char *)sub_18080D874(a3);
  v6[1] = v7;
  int BaseName = uloc_getBaseName(*v6, v7, 58, a4);
  BOOL v9 = v5;
  do
  {
    int v10 = v9;
    BOOL v9 = (void *)v9[84];
  }

  while (v9);
  uint64_t v11 = (_BYTE *)(v10[82] + BaseName);
  v10[82] = v11 + 1;
  _BYTE *v11 = 0;
  BOOL v12 = (char *)sub_18080D874(v5);
  v6[2] = v12;
  if (*(int *)a4 <= 0)
  {
    uint64_t v13 = v6[1];
    uint64_t v14 = bsearch(v13, off_18C5341F8, 0x1BuLL, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_18080E290);
    if (v14)
    {
      uint64_t v13 = (char *)v14[1];
      goto LABEL_7;
    }

    if (dword_18C449020 >= 1)
    {
      int v32 = 0;
      uint64_t v26 = ures_getByKey(qword_18C449028, v13, 0LL, &v32);
      int v27 = v32;
      if (v32 < 1)
      {
        uint64_t v28 = v26;
        int v29 = v32;
        goto LABEL_27;
      }

      if (strchr(v13, 95))
      {
        memset(v41, 0, sizeof(v41));
        __int128 v39 = 0u;
        __int128 v40 = 0u;
        __int128 v37 = 0u;
        __int128 v38 = 0u;
        __int128 v35 = 0u;
        __int128 v36 = 0u;
        *(_OWORD *)__dst = 0u;
        __int128 v34 = 0u;
        strcpy(__dst, v13);
        *strchr(__dst, 95) = 0;
        int v32 = 0;
        uint64_t v28 = ures_getByKey(qword_18C449028, __dst, 0LL, &v32);
        int v29 = v32;
LABEL_27:
        if (v29 > 0 || !v28) {
          goto LABEL_7;
        }
        *(_DWORD *)__dst = 58;
        ures_getUTF8StringByKey(v28, "replacement", v12, (int32_t *)__dst, 1, (int *)a4);
        if (v27 >= 1)
        {
          if (strchr(v12, 95))
          {
            int v30 = strlen(v12);
            if (v30 < 6) {
              goto LABEL_40;
            }
            if (v12[v30 - 5] != 95) {
              goto LABEL_40;
            }
            __int128 v31 = strrchr(v13, 95);
            if (strlen(v31) > 4) {
              goto LABEL_40;
            }
          }

          else
          {
            __int128 v31 = strchr(v13, 95);
          }

          strcat(v12, v31);
        }

uint64_t sub_18080D874(void *a1)
{
  while (1)
  {
    do
    {
      double v2 = a1;
      a1 = (void *)a1[84];
    }

    while (a1);
    uint64_t result = v2[82];
    if (v2[83] - result > 58) {
      break;
    }
    a1 = operator new(0x2A8uLL);
    bzero(a1, 0x28AuLL);
    a1[82] = a1;
    a1[83] = (char *)a1 + 650;
    a1[84] = 0LL;
    v2[84] = a1;
  }

  return result;
}

uint64_t sub_18080D8DC(uint64_t result, void *a2, int a3, int *a4)
{
  _OWORD v21[2] = *MEMORY[0x1895F89C0];
  if (!*(void *)(result + 40))
  {
    int v6 = (void *)result;
    uint64_t result = *(void *)(result + 16);
    v6[5] = result;
    if (!a3) {
      goto LABEL_9;
    }
    int v20 = 0;
    uint64_t result = uloc_getCountry(result, 0LL, 0, &v20);
    int v7 = (char *)v6[2];
    uint64_t result = strcmp(v7, "es_MX");
    if (!(_DWORD)result) {
      goto LABEL_9;
    }
    uint64_t result = strcmp(v7, "zh_Hant_TW");
    if ((_DWORD)result
      && (int v20 = 0,
          v21[0] = 0LL,
          v21[1] = 0LL,
          uloc_minimizeSubtags(v7, (char *)v21, 16, (UErrorCode *)&v20),
          uint64_t result = uloc_getCountry((uint64_t)v21, 0LL, 0, &v20),
          (int)result >= 1))
    {
      v6[6] = v6[2];
      uint64_t v8 = 1LL;
    }

    else
    {
LABEL_9:
      uint64_t v8 = 0LL;
    }

    do
    {
      BOOL v9 = &v6[v8];
      uint64_t v11 = v9[5];
      int v10 = (void **)(v9 + 5);
      if (!v11) {
        break;
      }
      uint64_t result = sub_18080D874(a2);
      BOOL v12 = (char *)result;
      if (*a4 <= 0)
      {
        int v17 = *v10;
        uint64_t v18 = bsearch(v17, off_18C5343A8, 0x5AuLL, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_18080E290);
        if (v18)
        {
          uint64_t v19 = (const char *)*((void *)v18 + 1);
          uint64_t result = strlen(v19);
          else {
            uint64_t result = (uint64_t)strcpy(v12, v19);
          }
        }

        else
        {
          uint64_t result = ures_getLocParent((char *)v17, v12, 57, a4);
          v12[57] = 0;
        }
      }

      uint64_t v13 = v8 + 1;
      if (v8 != 8 && *v12 && (uint64_t result = strcmp(v12, "root"), (_DWORD)result))
      {
        v6[v13 + 5] = v12;
        uint64_t result = strlen(v12);
        uint64_t v14 = a2;
        do
        {
          int v15 = v14;
          uint64_t v14 = (void *)v14[84];
        }

        while (v14);
        uint64_t v16 = (_BYTE *)(v15[82] + (int)result);
        v15[82] = v16 + 1;
        _BYTE *v16 = 0;
      }

      else
      {
        v6[v13 + 5] = 0LL;
      }

      ++v8;
    }

    while (v13 != 9);
  }

  return result;
}

uint64_t ualoc_localizationsToUse( uint64_t inited, int a2, const char **a3, uint64_t a4, const char **a5, int a6, int *a7)
{
  uint64_t v104 = *MEMORY[0x1895F89C0];
  if (*a7 > 0) {
    return 0xFFFFFFFFLL;
  }
  int v7 = (UErrorCode *)a7;
  uint64_t v8 = inited;
  if (!inited || (BOOL v9 = a3) == 0LL || !a5)
  {
    *a7 = 1;
    return 0xFFFFFFFFLL;
  }

  int v90 = a6;
  unsigned int v87 = a5;
  if (!dword_18C449020)
  {
    unsigned int v12 = atomic_load((unsigned int *)&unk_18C449030);
    if (v12 != 2)
    {
      inited = icu::umtx_initImplPreInit((unsigned int *)&unk_18C449030);
      if ((_DWORD)inited)
      {
        sub_180820C94(7u, (uint64_t)sub_18080E298);
        LODWORD(v100[0]) = 0;
        uint64_t v13 = ures_openDirect(0LL, (uint64_t)"metadata", (uint64_t)v100);
        uint64_t v14 = ures_getByKey(v13, "alias", v13, (int *)v100);
        uint64_t v15 = ures_getByKey(v14, "language", v14, (int *)v100);
        if (SLODWORD(v100[0]) <= 0)
        {
          qword_18C449028 = v15;
          int v16 = 1;
        }

        else
        {
          int v16 = -1;
        }

        dword_18C449020 = v16;
        icu::umtx_initImplPostInit((unsigned int *)&unk_18C449030);
      }
    }
  }

  uint64_t v77 = (uint64_t)&v77;
  unint64_t v82 = a2;
  MEMORY[0x1895F8858](inited);
  int v20 = (char *)&v77 - v19;
  bzero((char *)&v77 - v19, v21);
  if (a2)
  {
    uint64_t v23 = &v20[120 * v82];
    uint64_t v24 = v20;
    do
    {
      *(void *)uint64_t v24 = 0LL;
      *((void *)v24 + 5) = 0LL;
      v24 += 120;
    }

    while (v24 != v23);
  }

  uint64_t v88 = v20;
  uint64_t v98 = a4;
  MEMORY[0x1895F8858](v22);
  uint64_t v26 = (char *)&v77 - v25;
  bzero((char *)&v77 - v25, v27);
  if ((_DWORD)a4)
  {
    uint64_t v28 = &v26[120 * v98];
    int v29 = v26;
    do
    {
      *(void *)int v29 = 0LL;
      *((void *)v29 + 5) = 0LL;
      v29 += 120;
    }

    while (v29 != v28);
  }

  UErrorCode v96 = (const char **)v26;
  bzero(v100, 0x290uLL);
  *(void *)&v101[6] = v100;
  v102 = v101;
  uint64_t v103 = 0LL;
  uint64_t v93 = v9;
  uint64_t v84 = a4;
  if (a2 < 1)
  {
    __int128 v59 = 0LL;
    __int128 v35 = 0LL;
    __int128 v49 = v87;
    goto LABEL_74;
  }

  uint64_t v81 = v8;
  uint64_t v30 = 0LL;
  unsigned int v86 = 0LL;
  __int128 v31 = v96;
  int v78 = v96 + 6;
  int v32 = 999;
  __int128 v95 = v7;
  do
  {
    unint64_t v33 = v88;
    sub_18080D500((char **)&v88[120 * v30], *(char **)(v81 + 8 * v30), v100, v7);
    uint64_t v89 = v30;
    if ((int)a4 >= 1)
    {
      unsigned int v80 = (const char **)&v33[120 * v30];
      uint64_t v34 = 0LL;
      __int128 v35 = 0LL;
      uint32_t v91 = v80 + 1;
      v97 = v80 + 2;
      unsigned int v83 = v80 + 4;
      v79 = v80 + 5;
      __int128 v94 = v80 + 3;
      __int128 v36 = v78;
      while (1)
      {
        __int128 v37 = (char **)&v31[15 * v34];
        sub_18080D500(v37, (char *)v9[v34], v100, v7);
        if ((v32 & 0x80000000) == 0)
        {
          if (!strcmp(*v91, v31[15 * v34 + 1]))
          {
            int v32 = -1;
LABEL_50:
            __int128 v35 = (char **)&v31[15 * v34];
            goto LABEL_26;
          }

          if (v32)
          {
            __int128 v38 = *v97;
            __int128 v39 = &v31[15 * v34];
            __int128 v40 = v39[2];
            v92 = v39 + 2;
            if (strcmp(v38, v40))
            {
              if (!strcmp(*v83, v31[15 * v34 + 4]))
              {
                sub_18080D8DC((uint64_t)v80, v100, 0, (int *)v7);
                sub_18080D8DC((uint64_t)&v31[15 * v34], v100, 1, (int *)v7);
                if (*(int *)v7 <= 0)
                {
                  __int128 v41 = *v79;
                  if (*v79)
                  {
                    uint64_t v42 = 0LL;
                    __int128 v43 = &v96[15 * v34];
                    __int128 v44 = v43[5];
                    __int128 v45 = v43 + 3;
                    unsigned __int16 v85 = v44;
                    do
                    {
                      if (v44)
                      {
                        uint64_t v46 = 0LL;
                        do
                        {
                          if (!strcmp(v41, v44))
                          {
                            if (!strcmp(*v97, "pt_PT") && !strcmp(*v92, "pt_BR"))
                            {
                              unsigned int v86 = v37;
                            }

                            else
                            {
                              int v47 = strcmp(*v94, *v45);
                              int v48 = v42 + v46;
                              if (v47) {
                                ++v48;
                              }
                              if (v48 < v32)
                              {
                                __int128 v35 = v37;
                                int v32 = v48;
                              }
                            }
                          }

                          __int128 v44 = v36[v46++];
                        }

                        while (v44);
                      }

                      ++v42;
                      __int128 v41 = *(const char **)&v88[120 * v89 + 40 + 8 * v42];
                      BOOL v9 = v93;
                      __int128 v44 = v85;
                    }

                    while (v41);
                  }
                }
              }

              goto LABEL_26;
            }

            int v32 = 0;
            goto LABEL_50;
          }
        }

uint64_t sub_18080E290(const char *a1, const char **a2)
{
  return strcmp(a1, *a2);
}

uint64_t sub_18080E298()
{
  if (dword_18C449020 >= 1)
  {
    ures_close(qword_18C449028);
    qword_18C449028 = 0LL;
  }

  dword_18C449020 = 0;
  atomic_store(0, (unsigned int *)&unk_18C449030);
  return 1LL;
}

uint64_t sub_18080E2E4(uint64_t a1)
{
  if (*(void *)(a1 + 672))
  {
    double v2 = (void *)sub_18080E2E4();
    operator delete(v2);
  }

  return a1;
}

void *sub_18080E314(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_18080E358();
  }
  return operator new(24 * a2);
}

void sub_18080E358()
{
}

void sub_18080E364(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
LABEL_1:
  uint64_t v8 = (__int128 *)(a2 - 24);
  int j = (double *)a1;
  while (2)
  {
    a1 = (uint64_t)j;
    uint64_t v10 = a2 - (void)j;
    uint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - (void)j) >> 3);
    switch(v11)
    {
      case 0LL:
      case 1LL:
        return;
      case 2LL:
        double v67 = *(double *)(a2 - 16);
        double v68 = *(double *)(a1 + 8);
        if (v67 > v68 || v67 == v68 && strcmp((const char *)(a2 - 24), (const char *)a1) < 0)
        {
          __int128 v69 = *(_OWORD *)a1;
          uint64_t v152 = *(void *)(a1 + 16);
          *(_OWORD *)__s1 = v69;
          __int128 v70 = *v8;
          *(void *)(a1 + 16) = *(void *)(a2 - 8);
          *(_OWORD *)a1 = v70;
          __int128 v71 = *(_OWORD *)__s1;
          *(void *)(a2 - 8) = v152;
          __int128 *v8 = v71;
        }

        return;
      case 3LL:
        sub_18080F04C(a1, (double *)(a1 + 24), (double *)(a2 - 24));
        return;
      case 4LL:
        sub_18080F41C(a1, a1 + 24, a1 + 48, a2 - 24);
        return;
      case 5LL:
        sub_18080EEF4(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
        return;
      default:
        if (v10 <= 575)
        {
          if ((a4 & 1) != 0)
          {
            if (a1 != a2)
            {
              BOOL v72 = (const char *)(a1 + 24);
              if (a1 + 24 != a2)
              {
                uint64_t v73 = 0LL;
                uint64_t v74 = a1;
                do
                {
                  uint64_t v75 = v74;
                  uint64_t v74 = (uint64_t)v72;
                  double v76 = *(double *)(v75 + 32);
                  double v77 = *(double *)(v75 + 8);
                  if (v76 > v77 || v76 == v77 && strcmp(v72, (const char *)v75) < 0)
                  {
                    __int128 v78 = *(_OWORD *)v74;
                    uint64_t v152 = *(void *)(v74 + 16);
                    *(_OWORD *)__s1 = v78;
                    *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
                    *(void *)(v74 + 16) = *(void *)(v75 + 16);
                    uint64_t v79 = a1;
                    if (v75 != a1)
                    {
                      double v80 = *(double *)&__s1[8];
                      uint64_t v81 = v73;
                      while (1)
                      {
                        uint64_t v82 = a1 + v81;
                        double v83 = *(double *)(a1 + v81 - 16);
                        if (v80 <= v83)
                        {
                          if (v80 != v83)
                          {
                            uint64_t v79 = a1 + v81;
                            goto LABEL_117;
                          }
                        }

                        v75 -= 24LL;
                        *(_OWORD *)uint64_t v82 = *(_OWORD *)(a1 + v81 - 24);
                        *(void *)(v82 + 16) = *(void *)(a1 + v81 - 8);
                        v81 -= 24LL;
                        if (!v81)
                        {
                          uint64_t v79 = a1;
                          goto LABEL_117;
                        }
                      }

                      uint64_t v79 = v75;
                    }

LABEL_117:
                    __int128 v84 = *(_OWORD *)__s1;
                    *(void *)(v79 + 16) = v152;
                    *(_OWORD *)uint64_t v79 = v84;
                  }

                  BOOL v72 = (const char *)(v74 + 24);
                  v73 += 24LL;
                }

                while (v74 + 24 != a2);
              }
            }
          }

          else if (a1 != a2)
          {
            v139 = (const char *)(a1 + 24);
            if (a1 + 24 != a2)
            {
              uint64_t v140 = a1 - 24;
              do
              {
                uint64_t v141 = a1;
                a1 = (uint64_t)v139;
                double v142 = *(double *)(v141 + 32);
                double v143 = *(double *)(v141 + 8);
                if (v142 > v143 || v142 == v143 && strcmp(v139, (const char *)v141) < 0)
                {
                  uint64_t v144 = *(void *)(a1 + 16);
                  *(_OWORD *)__s1 = *(_OWORD *)a1;
                  uint64_t v152 = v144;
                  double v145 = *(double *)&__s1[8];
                  for (uint64_t i = v140; ; i -= 24LL)
                  {
                    *(_OWORD *)(i + 48) = *(_OWORD *)(i + 24);
                    *(void *)(i + 64) = *(void *)(i + 40);
                    double v147 = *(double *)(i + 8);
                  }

                  __int128 v148 = *(_OWORD *)__s1;
                  *(void *)(i + 40) = v152;
                  *(_OWORD *)(i + 24) = v148;
                }

                v139 = (const char *)(a1 + 24);
                v140 += 24LL;
              }

              while (a1 + 24 != a2);
            }
          }

          return;
        }

        if (!a3)
        {
          if (a1 == a2) {
            return;
          }
          int64_t v85 = (unint64_t)(v11 - 2) >> 1;
          int64_t v86 = v85;
          do
          {
            int64_t v87 = v86;
            if (v85 >= v86)
            {
              uint64_t v88 = (2 * v86) | 1;
              uint64_t v89 = a1 + 24 * v88;
              if (2 * v86 + 2 < v11)
              {
                double v90 = *(double *)(a1 + 24 * v88 + 8);
                double v91 = *(double *)(v89 + 32);
                if (v90 > v91
                  || v90 == v91
                  && (int v92 = strcmp((const char *)(a1 + 24 * v88), (const char *)(v89 + 24)),
                      int64_t v85 = (unint64_t)(v11 - 2) >> 1,
                      v92 < 0))
                {
                  v89 += 24LL;
                  uint64_t v88 = 2 * v87 + 2;
                }
              }

              double v93 = *(double *)(v89 + 8);
              double v94 = *(double *)(a1 + 24 * v87 + 8);
              if (v93 <= v94)
              {
                uint64_t v95 = a1 + 24 * v87;
                if (v93 != v94
                  || (int v96 = strcmp((const char *)v89, (const char *)(a1 + 24 * v87)),
                      int64_t v85 = (unint64_t)(v11 - 2) >> 1,
                      (v96 & 0x80000000) == 0))
                {
                  __int128 v97 = *(_OWORD *)v95;
                  uint64_t v152 = *(void *)(v95 + 16);
                  *(_OWORD *)__s1 = v97;
                  __int128 v98 = *(_OWORD *)v89;
                  *(void *)(v95 + 16) = *(void *)(v89 + 16);
                  *(_OWORD *)uint64_t v95 = v98;
                  if (v85 >= v88)
                  {
                    double v101 = *(double *)&__s1[8];
                    while (1)
                    {
                      uint64_t v102 = 2 * v88;
                      uint64_t v88 = (2 * v88) | 1;
                      uint64_t v99 = a1 + 24 * v88;
                      uint64_t v103 = v102 + 2;
                      if (v102 + 2 < v11)
                      {
                        double v104 = *(double *)(a1 + 24 * v88 + 8);
                        double v105 = *(double *)(v99 + 32);
                        if (v104 > v105
                          || v104 == v105
                          && (int v106 = strcmp((const char *)(a1 + 24 * v88), (const char *)(v99 + 24)),
                              int64_t v85 = (unint64_t)(v11 - 2) >> 1,
                              v106 < 0))
                        {
                          v99 += 24LL;
                          uint64_t v88 = v103;
                        }
                      }

                      double v107 = *(double *)(v99 + 8);
                      if (v107 > v101) {
                        break;
                      }
                      if (v107 == v101)
                      {
                        int v108 = strcmp((const char *)v99, __s1);
                        int64_t v85 = (unint64_t)(v11 - 2) >> 1;
                        if (v108 < 0) {
                          break;
                        }
                      }

                      __int128 v109 = *(_OWORD *)v99;
                      *(void *)(v89 + 16) = *(void *)(v99 + 16);
                      *(_OWORD *)uint64_t v89 = v109;
                      uint64_t v89 = v99;
                      if (v85 < v88) {
                        goto LABEL_133;
                      }
                    }
                  }

                  uint64_t v99 = v89;
LABEL_133:
                  __int128 v100 = *(_OWORD *)__s1;
                  *(void *)(v99 + 16) = v152;
                  *(_OWORD *)uint64_t v99 = v100;
                }
              }
            }

            int64_t v86 = v87 - 1;
          }

          while (v87);
          int64_t v110 = v10 / 0x18uLL;
          while (2)
          {
            uint64_t v111 = 0LL;
            __int128 v112 = *(_OWORD *)a1;
            uint64_t v150 = *(void *)(a1 + 16);
            *(_OWORD *)__s2 = v112;
            uint64_t v113 = a1;
            do
            {
              uint64_t v114 = v113;
              uint64_t v115 = v111 + 1;
              v113 += 24 * (v111 + 1);
              uint64_t v116 = 2 * v111;
              uint64_t v111 = (2 * v111) | 1;
              uint64_t v117 = v116 + 2;
              if (v116 + 2 < v110)
              {
                double v118 = *(double *)(v114 + 24 * v115 + 8);
                double v119 = *(double *)(v113 + 32);
                if (v118 > v119 || v118 == v119 && strcmp((const char *)v113, (const char *)(v113 + 24)) < 0)
                {
                  v113 += 24LL;
                  uint64_t v111 = v117;
                }
              }

              __int128 v120 = *(_OWORD *)v113;
              *(void *)(v114 + 16) = *(void *)(v113 + 16);
              *(_OWORD *)uint64_t v114 = v120;
            }

            while (v111 <= (uint64_t)((unint64_t)(v110 - 2) >> 1));
            a2 -= 24LL;
            if (v113 != a2)
            {
              __int128 v121 = *(_OWORD *)a2;
              *(void *)(v113 + 16) = *(void *)(a2 + 16);
              *(_OWORD *)uint64_t v113 = v121;
              __int128 v122 = *(_OWORD *)__s2;
              *(void *)(a2 + 16) = v150;
              *(_OWORD *)a2 = v122;
              uint64_t v123 = v113 - a1 + 24;
              if (v123 >= 25)
              {
                unint64_t v124 = v123 / 0x18uLL;
                unint64_t v125 = v124 - 2;
                unint64_t v126 = (v124 - 2) >> 1;
                unint64_t v127 = a1 + 24 * v126;
                double v128 = *(double *)(v127 + 8);
                double v129 = *(double *)(v113 + 8);
                if (v128 > v129
                  || v128 == v129 && strcmp((const char *)(a1 + 24 * ((v124 - 2) >> 1)), (const char *)v113) < 0)
                {
                  __int128 v130 = *(_OWORD *)v113;
                  uint64_t v152 = *(void *)(v113 + 16);
                  *(_OWORD *)__s1 = v130;
                  __int128 v131 = *(_OWORD *)v127;
                  *(void *)(v113 + 16) = *(void *)(v127 + 16);
                  *(_OWORD *)uint64_t v113 = v131;
                  if (v125 >= 2)
                  {
                    double v134 = *(double *)&__s1[8];
                    while (1)
                    {
                      unint64_t v135 = v126 - 1;
                      unint64_t v126 = (v126 - 1) >> 1;
                      uint64_t v113 = a1 + 24 * v126;
                      double v136 = *(double *)(v113 + 8);
                      if (v136 <= v134
                        && (v136 != v134 || (strcmp((const char *)(a1 + 24 * v126), __s1) & 0x80000000) == 0))
                      {
                        break;
                      }

                      __int128 v137 = *(_OWORD *)v113;
                      *(void *)(v127 + 16) = *(void *)(v113 + 16);
                      *(_OWORD *)unint64_t v127 = v137;
                      unint64_t v127 = a1 + 24 * v126;
                      if (v135 <= 1) {
                        goto LABEL_167;
                      }
                    }
                  }

                  uint64_t v113 = v127;
LABEL_167:
                  __int128 v132 = *(_OWORD *)__s1;
                  uint64_t v133 = v152;
LABEL_168:
                  *(void *)(v113 + 16) = v133;
                  *(_OWORD *)uint64_t v113 = v132;
                }
              }

              if (v110-- <= 2) {
                return;
              }
              continue;
            }

            break;
          }

          __int128 v132 = *(_OWORD *)__s2;
          uint64_t v133 = v150;
          goto LABEL_168;
        }

        unint64_t v12 = (unint64_t)v11 >> 1;
        uint64_t v13 = a1 + 24 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0xC01)
        {
          sub_18080F04C(v13, (double *)a1, (double *)(a2 - 24));
        }

        else
        {
          sub_18080F04C(a1, (double *)v13, (double *)(a2 - 24));
          uint64_t v14 = 3 * v12;
          sub_18080F04C(a1 + 24, (double *)(a1 + 8 * v14 - 24), (double *)(a2 - 48));
          sub_18080F04C(a1 + 48, (double *)(a1 + 24 + 8 * v14), (double *)(a2 - 72));
          sub_18080F04C(a1 + 8 * v14 - 24, (double *)v13, (double *)(a1 + 24 + 8 * v14));
          __int128 v15 = *(_OWORD *)a1;
          uint64_t v152 = *(void *)(a1 + 16);
          *(_OWORD *)__s1 = v15;
          uint64_t v16 = *(void *)(v13 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(void *)(a1 + 16) = v16;
          __int128 v17 = *(_OWORD *)__s1;
          *(void *)(v13 + 16) = v152;
          *(_OWORD *)uint64_t v13 = v17;
        }

        --a3;
        if ((a4 & 1) == 0)
        {
          double v18 = *(double *)(a1 - 16);
          double v19 = *(double *)(a1 + 8);
          if (v18 <= v19 && (v18 != v19 || (strcmp((const char *)(a1 - 24), (const char *)a1) & 0x80000000) == 0))
          {
            uint64_t v46 = *(void *)(a1 + 16);
            *(_OWORD *)__s2 = *(_OWORD *)a1;
            uint64_t v150 = v46;
            double v47 = *(double *)&__s2[8];
            double v48 = *(double *)(a2 - 16);
            if (*(double *)&__s2[8] > v48 || *(double *)&__s2[8] == v48 && strcmp(__s2, (const char *)(a2 - 24)) < 0)
            {
              double v49 = *(double *)(a1 + 32);
              if (v47 <= v49)
              {
                uint64_t v51 = (double *)(a1 + 56);
                while (1)
                {
                  if (v47 == v49)
                  {
                    int j = v51 - 4;
                  }

                  double v52 = *v51;
                  v51 += 3;
                  double v49 = v52;
                  if (v47 > v52)
                  {
                    int j = v51 - 4;
                    break;
                  }
                }
              }

              else
              {
                int j = (double *)(a1 + 24);
              }
            }

            else
            {
              for (int j = (double *)(a1 + 24); (unint64_t)j < a2; j += 3)
              {
                double v50 = j[1];
              }
            }

            unint64_t v53 = a2;
            if ((unint64_t)j < a2)
            {
              for (unint64_t k = a2 - 40; v47 > v48 || v47 == v48 && strcmp(__s2, (const char *)(k + 16)) < 0; k -= 24LL)
              {
                double v55 = *(double *)k;
                double v48 = v55;
              }

              unint64_t v53 = k + 16;
            }

            while ((unint64_t)j < v53)
            {
              __int128 v56 = *(_OWORD *)j;
              uint64_t v152 = *((void *)j + 2);
              *(_OWORD *)__s1 = v56;
              __int128 v57 = *(_OWORD *)v53;
              j[2] = *(double *)(v53 + 16);
              *(_OWORD *)int j = v57;
              __int128 v58 = *(_OWORD *)__s1;
              *(void *)(v53 + 16) = v152;
              *(_OWORD *)unint64_t v53 = v58;
              double v59 = *(double *)&__s2[8];
              double v60 = j[4];
              if (*(double *)&__s2[8] <= v60)
              {
                __int128 v61 = j + 7;
                while (1)
                {
                  if (v59 == v60)
                  {
                    int j = v61 - 4;
                  }

                  double v62 = *v61;
                  v61 += 3;
                  double v60 = v62;
                  if (v59 > v62)
                  {
                    int j = v61 - 4;
                    goto LABEL_84;
                  }
                }
              }

              else
              {
                j += 3;
              }

              do
              {
                do
                {
LABEL_84:
                  v53 -= 24LL;
                  double v63 = *(double *)(v53 + 8);
                }

                while (v59 > v63);
              }

              while (v59 == v63 && strcmp(__s2, (const char *)v53) < 0);
            }

            uint64_t v64 = j - 3;
            if (j - 3 != (double *)a1)
            {
              __int128 v65 = *(_OWORD *)v64;
              *(double *)(a1 + 16) = *(j - 1);
              *(_OWORD *)a1 = v65;
            }

            a4 = 0;
            __int128 v66 = *(_OWORD *)__s2;
            *((void *)j - icu::UVector32::~UVector32(this + 1) = v150;
            *(_OWORD *)uint64_t v64 = v66;
            continue;
          }
        }

        uint64_t v20 = 0LL;
        uint64_t v21 = *(void *)(a1 + 16);
        *(_OWORD *)__s2 = *(_OWORD *)a1;
        uint64_t v150 = v21;
        double v22 = *(double *)&__s2[8];
        while (1)
        {
          double v23 = *(double *)(a1 + v20 + 32);
          v20 += 24LL;
        }

        unint64_t v24 = a1 + v20;
        unint64_t v25 = a1 + v20 + 24;
        if (v20)
        {
          double v26 = *(double *)(a2 - 16);
          unint64_t v27 = a2 - 40;
          unint64_t v28 = a2 - 24;
          if (v26 <= v22)
          {
            do
            {
              double v29 = *(double *)v27;
              v27 -= 24LL;
              double v26 = v29;
            }

            while (v29 <= v22);
LABEL_22:
            unint64_t v28 = v27 + 16;
          }
        }

        else
        {
          unint64_t v28 = a2;
          if (v25 < a2)
          {
            double v30 = *(double *)(a2 - 16);
            unint64_t v28 = a2 - 24;
            if (v30 <= v22)
            {
              unint64_t v27 = a2 - 40;
              unint64_t v28 = a2 - 24;
              while (1)
              {
                unint64_t v44 = v27 + 16;
                if (v30 == v22)
                {
                }

                else if (v25 >= v44)
                {
                  goto LABEL_22;
                }

                v28 -= 24LL;
                double v45 = *(double *)v27;
                v27 -= 24LL;
                double v30 = v45;
                if (v45 > v22) {
                  goto LABEL_22;
                }
              }
            }
          }
        }

        if (v25 < v28)
        {
          unint64_t v31 = v28;
          unint64_t v32 = v25;
          do
          {
            __int128 v33 = *(_OWORD *)v32;
            uint64_t v152 = *(void *)(v32 + 16);
            *(_OWORD *)__s1 = v33;
            __int128 v34 = *(_OWORD *)v31;
            *(void *)(v32 + 16) = *(void *)(v31 + 16);
            *(_OWORD *)unint64_t v32 = v34;
            __int128 v35 = *(_OWORD *)__s1;
            *(void *)(v31 + 16) = v152;
            *(_OWORD *)unint64_t v31 = v35;
            double v36 = *(double *)&__s2[8];
            do
            {
              do
              {
                v32 += 24LL;
                double v37 = *(double *)(v32 + 8);
              }

              while (v37 > v36);
            }

            while (v37 == v36 && strcmp((const char *)v32, __s2) < 0);
            double v38 = *(double *)(v31 - 16);
            if (v38 <= v36)
            {
              unint64_t v39 = v31 - 40;
              do
              {
                double v40 = *(double *)v39;
                v39 -= 24LL;
                double v38 = v40;
              }

              while (v40 <= v36);
              unint64_t v31 = v39 + 16;
            }

            else
            {
              v31 -= 24LL;
            }
          }

          while (v32 < v31);
          unint64_t v24 = v32 - 24;
        }

        if (v24 != a1)
        {
          __int128 v41 = *(_OWORD *)v24;
          *(void *)(a1 + 16) = *(void *)(v24 + 16);
          *(_OWORD *)a1 = v41;
        }

        __int128 v42 = *(_OWORD *)__s2;
        *(void *)(v24 + 16) = v150;
        *(_OWORD *)unint64_t v24 = v42;
        if (v25 < v28)
        {
LABEL_45:
          sub_18080E364(a1, v24, a3, a4 & 1);
          a4 = 0;
          int j = (double *)(v24 + 24);
          continue;
        }

        BOOL v43 = sub_18080F1D4((double *)a1, (char *)v24);
        int j = (double *)(v24 + 24);
        if (!sub_18080F1D4((double *)(v24 + 24), (char *)a2))
        {
          if (v43) {
            continue;
          }
          goto LABEL_45;
        }

        a2 = v24;
        if (!v43) {
          goto LABEL_1;
        }
        return;
    }
  }

      int v96 = 1;
      goto LABEL_118;
    }

    goto LABEL_116;
  }

__n128 sub_18080EEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = *(void *)(a5 + 8);
  double v11 = *(double *)(a4 + 8);
  if (result.n128_f64[0] > v11 || result.n128_f64[0] == v11 && strcmp((const char *)a5, (const char *)a4) < 0)
  {
    uint64_t v12 = *(void *)(a4 + 16);
    __n128 result = *(__n128 *)a4;
    uint64_t v13 = *(void *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 16) = v13;
    *(__n128 *)a5 = result;
    *(void *)(a5 + 16) = v12;
    result.n128_u64[0] = *(void *)(a4 + 8);
    double v14 = *(double *)(a3 + 8);
    if (result.n128_f64[0] > v14 || result.n128_f64[0] == v14 && strcmp((const char *)a4, (const char *)a3) < 0)
    {
      uint64_t v15 = *(void *)(a3 + 16);
      __n128 result = *(__n128 *)a3;
      uint64_t v16 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v16;
      *(__n128 *)a4 = result;
      *(void *)(a4 + 16) = v15;
      result.n128_u64[0] = *(void *)(a3 + 8);
      double v17 = *(double *)(a2 + 8);
      if (result.n128_f64[0] > v17 || result.n128_f64[0] == v17 && strcmp((const char *)a3, (const char *)a2) < 0)
      {
        uint64_t v18 = *(void *)(a2 + 16);
        __n128 result = *(__n128 *)a2;
        uint64_t v19 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v19;
        *(__n128 *)a3 = result;
        *(void *)(a3 + 16) = v18;
        result.n128_u64[0] = *(void *)(a2 + 8);
        double v20 = *(double *)(a1 + 8);
        if (result.n128_f64[0] > v20 || result.n128_f64[0] == v20 && strcmp((const char *)a2, (const char *)a1) < 0)
        {
          uint64_t v21 = *(void *)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v22 = *(void *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v22;
          *(__n128 *)a2 = result;
          *(void *)(a2 + 16) = v21;
        }
      }
    }
  }

  return result;
}

uint64_t sub_18080F04C(uint64_t __s2, double *a2, double *__s1)
{
  uint64_t v5 = __s2;
  double v6 = a2[1];
  double v7 = *(double *)(__s2 + 8);
  if (v6 > v7 || v6 == v7 && (__s2 = strcmp((const char *)a2, (const char *)__s2), (__s2 & 0x80000000) != 0))
  {
    double v8 = __s1[1];
    if (v8 > v6 || v8 == v6 && (__s2 = strcmp((const char *)__s1, (const char *)a2), (__s2 & 0x80000000) != 0))
    {
      uint64_t v9 = *(void *)(v5 + 16);
      __int128 v10 = *(_OWORD *)v5;
      uint64_t v11 = *((void *)__s1 + 2);
      *(_OWORD *)uint64_t v5 = *(_OWORD *)__s1;
      *(void *)(v5 + 16) = v11;
LABEL_19:
      *(_OWORD *)__s1 = v10;
      *((void *)__s1 + 2) = v9;
      return __s2;
    }

    uint64_t v21 = *(void *)(v5 + 16);
    __int128 v22 = *(_OWORD *)v5;
    uint64_t v23 = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
    *(void *)(v5 + 16) = v23;
    *(_OWORD *)a2 = v22;
    *((void *)a2 + 2) = v21;
    double v24 = __s1[1];
    double v25 = a2[1];
    if (v24 > v25 || v24 == v25 && (__s2 = strcmp((const char *)__s1, (const char *)a2), (__s2 & 0x80000000) != 0))
    {
      uint64_t v9 = *((void *)a2 + 2);
      __int128 v10 = *(_OWORD *)a2;
      uint64_t v26 = *((void *)__s1 + 2);
      *(_OWORD *)a2 = *(_OWORD *)__s1;
      *((void *)a2 + 2) = v26;
      goto LABEL_19;
    }
  }

  else
  {
    double v12 = __s1[1];
    if (v12 > v6 || v12 == v6 && (__s2 = strcmp((const char *)__s1, (const char *)a2), (__s2 & 0x80000000) != 0))
    {
      uint64_t v13 = *((void *)a2 + 2);
      __int128 v14 = *(_OWORD *)a2;
      uint64_t v15 = *((void *)__s1 + 2);
      *(_OWORD *)a2 = *(_OWORD *)__s1;
      *((void *)a2 + 2) = v15;
      *(_OWORD *)__s1 = v14;
      *((void *)__s1 + 2) = v13;
      double v16 = a2[1];
      double v17 = *(double *)(v5 + 8);
      if (v16 > v17 || v16 == v17 && (__s2 = strcmp((const char *)a2, (const char *)v5), (__s2 & 0x80000000) != 0))
      {
        uint64_t v18 = *(void *)(v5 + 16);
        __int128 v19 = *(_OWORD *)v5;
        uint64_t v20 = *((void *)a2 + 2);
        *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
        *(void *)(v5 + 16) = v20;
        *(_OWORD *)a2 = v19;
        *((void *)a2 + 2) = v18;
      }
    }
  }

  return __s2;
}

BOOL sub_18080F1D4(double *__s2, char *a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - (char *)__s2) >> 3);
  BOOL result = 1LL;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      double v6 = a2 - 24;
      double v7 = *((double *)a2 - 2);
      double v8 = __s2[1];
      if (v7 > v8) {
        goto LABEL_5;
      }
      if (v7 == v8)
      {
LABEL_5:
        uint64_t v9 = *((void *)__s2 + 2);
        __int128 v10 = *(_OWORD *)__s2;
        uint64_t v11 = *((void *)a2 - 1);
        *(_OWORD *)__s2 = *(_OWORD *)v6;
        *((void *)__s2 + 2) = v11;
        *(_OWORD *)double v6 = v10;
        *((void *)a2 - icu::UVector32::~UVector32(this + 1) = v9;
        return 1LL;
      }

      return result;
    case 3uLL:
      sub_18080F04C((uint64_t)__s2, __s2 + 3, (double *)a2 - 3);
      return 1LL;
    case 4uLL:
      sub_18080F41C((uint64_t)__s2, (uint64_t)(__s2 + 3), (uint64_t)(__s2 + 6), (uint64_t)(a2 - 24));
      return 1LL;
    case 5uLL:
      sub_18080EEF4((uint64_t)__s2, (uint64_t)(__s2 + 3), (uint64_t)(__s2 + 6), (uint64_t)(__s2 + 9), (uint64_t)(a2 - 24));
      return 1LL;
    default:
      double v12 = (char *)(__s2 + 6);
      sub_18080F04C((uint64_t)__s2, __s2 + 3, __s2 + 6);
      uint64_t v13 = (char *)(__s2 + 9);
      uint64_t v14 = 0LL;
      int v15 = 0;
      break;
  }

  while (1)
  {
    double v16 = *((double *)v13 + 1);
    double v17 = *((double *)v12 + 1);
    if (v16 > v17 || v16 == v17 && strcmp(v13, v12) < 0)
    {
      __int128 v24 = *(_OWORD *)v13;
      uint64_t v25 = *((void *)v13 + 2);
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v12;
      *((void *)v13 + 2) = *((void *)v12 + 2);
      uint64_t v18 = (char *)__s2;
      if (v12 != (char *)__s2)
      {
        double v19 = *((double *)&v24 + 1);
        uint64_t v20 = v14;
        while (1)
        {
          uint64_t v21 = (char *)__s2 + v20;
          double v22 = *(double *)((char *)__s2 + v20 + 32);
          if (v19 <= v22)
          {
            if (v19 != v22)
            {
              uint64_t v18 = v12;
              goto LABEL_20;
            }
          }

          v12 -= 24;
          *((_OWORD *)v21 + 3) = *(_OWORD *)((char *)__s2 + v20 + 24);
          *((double *)v21 + 8) = *(double *)((char *)__s2 + v20 + 40);
          v20 -= 24LL;
          if (v20 == -48)
          {
            uint64_t v18 = (char *)__s2;
            goto LABEL_20;
          }
        }

        uint64_t v18 = (char *)__s2 + v20 + 48;
      }

__n128 sub_18080F41C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  result.n128_u64[0] = *(void *)(a4 + 8);
  double v9 = *(double *)(a3 + 8);
  if (result.n128_f64[0] > v9 || result.n128_f64[0] == v9 && strcmp((const char *)a4, (const char *)a3) < 0)
  {
    uint64_t v10 = *(void *)(a3 + 16);
    __n128 result = *(__n128 *)a3;
    uint64_t v11 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v11;
    *(__n128 *)a4 = result;
    *(void *)(a4 + 16) = v10;
    result.n128_u64[0] = *(void *)(a3 + 8);
    double v12 = *(double *)(a2 + 8);
    if (result.n128_f64[0] > v12 || result.n128_f64[0] == v12 && strcmp((const char *)a3, (const char *)a2) < 0)
    {
      uint64_t v13 = *(void *)(a2 + 16);
      __n128 result = *(__n128 *)a2;
      uint64_t v14 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v14;
      *(__n128 *)a3 = result;
      *(void *)(a3 + 16) = v13;
      result.n128_u64[0] = *(void *)(a2 + 8);
      double v15 = *(double *)(a1 + 8);
      if (result.n128_f64[0] > v15 || result.n128_f64[0] == v15 && strcmp((const char *)a2, (const char *)a1) < 0)
      {
        uint64_t v16 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v17 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v17;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v16;
      }
    }
  }

  return result;
}

uint64_t uprv_uint16Comparator(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return *a2 - *a3;
}

uint64_t uprv_int32Comparator(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return (*a2 - *a3);
}

uint64_t uprv_uint32Comparator(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 < *a3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 != *a3;
  }
}

uint64_t uprv_stableBinarySearch( uint64_t a1, int a2, uint64_t a3, int a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t), uint64_t a6)
{
  int v10 = a2;
  if (a2 < 9)
  {
    int v13 = 0;
    char v12 = 0;
  }

  else
  {
    char v12 = 0;
    int v13 = 0;
    do
    {
      int v14 = v13 + v10;
      if (v13 + v10 < 0 != __OFADD__(v13, v10)) {
        ++v14;
      }
      int v15 = v14 >> 1;
      int v16 = a5(a6, a3, a1 + (v14 >> 1) * (uint64_t)a4);
      if (v16 >= 0) {
        int v17 = v10;
      }
      else {
        int v17 = v15;
      }
      if (v16 >= 0) {
        int v18 = v15;
      }
      else {
        int v18 = v13;
      }
      if (v16)
      {
        int v10 = v17;
        int v13 = v18;
      }

      else
      {
        int v13 = v15 + 1;
      }

      if (!v16) {
        char v12 = 1;
      }
    }

    while (v10 - v13 > 8);
  }

  if (v13 < v10)
  {
    uint64_t v19 = a4;
    uint64_t v20 = a1 + v13 * (uint64_t)a4;
    do
    {
      int v21 = a5(a6, a3, v20);
      if (v21)
      {
        if (v21 < 0) {
          goto LABEL_27;
        }
      }

      else
      {
        char v12 = 1;
      }

      ++v13;
      v20 += v19;
    }

    while (v10 != v13);
    int v13 = v10;
  }

void uprv_sortArray( uint64_t a1, uint64_t a2, int a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t), uint64_t a5, int a6, int *a7)
{
  if (a7 && *a7 <= 0)
  {
    if (a1) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = (int)a2 <= 0;
    }
    int v12 = !v11;
    if (!a4 || a3 < 1 || (a2 & 0x80000000) != 0 || v12)
    {
      *a7 = 1;
      return;
    }

    unint64_t v15 = a3 + 7LL;
    unint64_t v16 = v15 >> 3;
    if (a2 >= 9 && !a6)
    {
      __int128 v45 = 0u;
      __int128 v46 = 0u;
      __int128 v43 = 0u;
      __int128 v44 = 0u;
      __int128 v41 = 0u;
      __int128 v42 = 0u;
      __int128 v39 = 0u;
      __int128 v40 = 0u;
      __int128 v38 = 0u;
      uint64_t v47 = 0LL;
      __int128 v37 = 0u;
      __int128 v36 = 0u;
      __int128 v35 = 0u;
      __int128 v34 = 0u;
      __int128 v33 = 0u;
      __int128 v32 = 0u;
      __int128 v31 = 0u;
      __int128 v30 = 0u;
      __int128 v29 = 0u;
      __int128 v28 = 0u;
      __int128 v27 = 0u;
      __int128 v26 = 0u;
      __int128 v25 = 0u;
      __int128 v24 = 0u;
      __int128 v23 = 0u;
      __int128 v22 = 0u;
      int v17 = (char *)&v22 + 8;
      int v21 = (char *)&v22 + 8;
      if (v16 < 0x1A)
      {
LABEL_21:
        sub_18080F9C0(a1, 0, a2, a3, a4, a5, v17, &v17[8 * v16]);
        goto LABEL_30;
      }

      int v18 = (char *)uprv_malloc(8LL * (2 * v16));
      if (v18)
      {
        int v17 = v18;
        if (BYTE4(v22)) {
          uprv_free((char *)&v22 + 8);
        }
        int v21 = v17;
        BYTE4(v22) = 1;
        goto LABEL_21;
      }

      goto LABEL_29;
    }

    __int128 v22 = 0u;
    __int128 v34 = 0u;
    __int128 v33 = 0u;
    __int128 v32 = 0u;
    __int128 v31 = 0u;
    __int128 v30 = 0u;
    __int128 v29 = 0u;
    __int128 v28 = 0u;
    __int128 v27 = 0u;
    __int128 v26 = 0u;
    __int128 v25 = 0u;
    __int128 v24 = 0u;
    __int128 v23 = 0u;
    uint64_t v19 = (char *)&v22 + 8;
    int v21 = (char *)&v22 + 8;
    if (v16 >= 0x1A)
    {
      uint64_t v20 = (char *)uprv_malloc(v15 & 0x1FFFFFFF8LL);
      if (!v20)
      {
LABEL_29:
        *a7 = 7;
LABEL_30:
        if (BYTE4(v22)) {
          uprv_free(v21);
        }
        return;
      }

      uint64_t v19 = v20;
      if (BYTE4(v22)) {
        uprv_free((char *)&v22 + 8);
      }
      int v21 = v19;
      BYTE4(v22) = 1;
    }

    sub_18080F8A4(a1, a2, a3, a4, a5, v19);
    goto LABEL_30;
  }

uint64_t sub_18080F8A4( uint64_t result, int a2, int a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t), uint64_t a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v9 = result;
    uint64_t v22 = result;
    uint64_t v10 = a3;
    uint64_t v11 = a2;
    uint64_t v12 = 1LL;
    int v13 = (char *)(result + a3);
    uint64_t v21 = a2;
    size_t v14 = a3;
    do
    {
      __n128 result = uprv_stableBinarySearch(v9, v12, (uint64_t)v13, a3, a4, a5);
      int v15 = ~(_DWORD)result;
      if (v12 > v15)
      {
        unint64_t v16 = a4;
        uint64_t v17 = a5;
        uint64_t v18 = v15;
        uint64_t v19 = (char *)(v9 + v15 * (uint64_t)(int)v10);
        memcpy(a6, v13, v14);
        uint64_t v20 = v12 - v18;
        a5 = v17;
        a4 = v16;
        uint64_t v11 = v21;
        memmove(&v19[v14], v19, v20 * v14);
        uint64_t v9 = v22;
        __n128 result = (uint64_t)memcpy(v19, a6, v14);
      }

      ++v12;
      v13 += v10;
    }

    while (v11 != v12);
  }

  return result;
}

uint64_t sub_18080F9C0( uint64_t a1, int a2, uint64_t a3, int a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t), uint64_t a6, void *a7, void *a8)
{
  uint64_t v13 = a4;
  size_t __n = a4;
  uint64_t v29 = -(uint64_t)a4;
  uint64_t v28 = a4;
  while (a2 + 9 < (int)a3)
  {
    int v14 = a2 + a3;
    memcpy(a7, (const void *)(a1 + ((uint64_t)v14 >> 1) * __n), __n);
    int v24 = a2;
    unsigned int v25 = a3;
    LODWORD(v15) = a2;
    do
    {
      uint64_t v16 = ((uint64_t)(int)v15 << 32) - 0x100000000LL;
      uint64_t v17 = a1 + (int)v13 * (uint64_t)(int)v15;
      do
      {
        int v18 = a5(a6, v17, (uint64_t)a7);
        v16 += 0x100000000LL;
        uint64_t v15 = (v15 + 1);
        v17 += v13;
      }

      while (v18 < 0);
      uint64_t v19 = a3 << 32;
      uint64_t v20 = a1 + v13 * ((int)a3 - 1LL);
      do
      {
        uint64_t result = a5(a6, (uint64_t)a7, v20);
        a3 = (a3 - 1);
        v19 -= 0x100000000LL;
        v20 += v29;
      }

      while ((result & 0x80000000) != 0);
      if ((int)v15 - 1 >= (int)a3 + 1)
      {
        uint64_t v15 = (v15 - 1);
        a3 = (a3 + 1);
      }

      else if ((int)v15 - 1 < (int)a3)
      {
        memcpy(a8, (const void *)(a1 + (v16 >> 32) * __n), __n);
        uint64_t v22 = (void *)(a1 + (v19 >> 32) * __n);
        memcpy((void *)(a1 + (v16 >> 32) * __n), v22, __n);
        uint64_t result = (uint64_t)memcpy(v22, a8, __n);
      }

      uint64_t v13 = v28;
    }

    while ((int)v15 < (int)a3);
    if ((int)a3 - v24 >= (int)(v25 - v15))
    {
      LODWORD(v15) = v24;
    }

    else
    {
      a3 = v25;
    }

    a2 = v15;
  }

  return sub_18080F8A4(a1 + (int)v13 * (uint64_t)a2, (int)a3 - a2, a4, a5, a6, a7);
}

void **ubidi_open()
{
  int v1 = 0;
  return ubidi_openSized(0, 0, &v1);
}

void **ubidi_openSized(int a1, int a2, int *a3)
{
  if (!a3 || *a3 > 0) {
    return 0LL;
  }
  if ((a2 | a1) < 0)
  {
    unint64_t v4 = 0LL;
    int v9 = 1;
LABEL_13:
    *a3 = v9;
    return v4;
  }

  double v8 = (void **)uprv_malloc(0x1E0uLL);
  unint64_t v4 = v8;
  if (!v8)
  {
    int v9 = 7;
    goto LABEL_13;
  }

  *((_OWORD *)v8 + 28) = 0u;
  *((_OWORD *)v8 + 29) = 0u;
  *((_OWORD *)v8 + 26) = 0u;
  *((_OWORD *)v8 + 27) = 0u;
  *((_OWORD *)v8 + 24) = 0u;
  *((_OWORD *)v8 + 25) = 0u;
  *((_OWORD *)v8 + 22) = 0u;
  *((_OWORD *)v8 + 23) = 0u;
  *((_OWORD *)v8 + 20) = 0u;
  *((_OWORD *)v8 + 2icu::UVector32::~UVector32(this + 1) = 0u;
  *((_OWORD *)v8 + 18) = 0u;
  *((_OWORD *)v8 + 19) = 0u;
  *((_OWORD *)v8 + 16) = 0u;
  *((_OWORD *)v8 + 17) = 0u;
  *((_OWORD *)v8 + 14) = 0u;
  *((_OWORD *)v8 + 15) = 0u;
  *((_OWORD *)v8 + 12) = 0u;
  *((_OWORD *)v8 + 13) = 0u;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 1icu::UVector32::~UVector32(this + 1) = 0u;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *(_OWORD *)double v8 = 0u;
  *((_OWORD *)v8 + icu::UVector32::~UVector32(this + 1) = 0u;
  if (a1 < 1)
  {
    *((_BYTE *)v8 + 112) = 1;
  }

  else if (!sub_18080FDAC(v8 + 8, (_DWORD *)v8 + 8, 1, a1) {
         || !sub_18080FDAC(v4 + 9, (_DWORD *)v4 + 9, 1, a1))
  }
  {
    *a3 = 7;
  }

  if (a2 < 1)
  {
    *((_BYTE *)v4 + 113) = 1;
    goto LABEL_21;
  }

  if (a2 == 1)
  {
    *((_DWORD *)v4 + 12) = 12;
    goto LABEL_21;
  }

  if (sub_18080FDAC(v4 + 12, (_DWORD *)v4 + 12, 1, 12 * a2))
  {
LABEL_21:
    if (*a3 < 1) {
      return v4;
    }
    goto LABEL_22;
  }

  *a3 = 7;
LABEL_22:
  ubidi_close(v4);
  return 0LL;
}

uint64_t sub_18080FDAC(void **a1, _DWORD *a2, int a3, int a4)
{
  double v7 = *a1;
  if (v7)
  {
    if (*a2 >= a4) {
      return 1LL;
    }
    if (a3)
    {
      uint64_t result = (uint64_t)uprv_realloc(v7, a4);
      if (!result) {
        return result;
      }
      *a1 = (void *)result;
LABEL_8:
      *a2 = a4;
      return 1LL;
    }
  }

  else if (a3)
  {
    uint64_t result = (uint64_t)uprv_malloc(a4);
    *a1 = (void *)result;
    if (!result) {
      return result;
    }
    goto LABEL_8;
  }

  return 0LL;
}

void ubidi_close(void *a1)
{
  if (a1)
  {
    *a1 = 0LL;
    double v2 = (void *)a1[7];
    if (v2) {
      uprv_free(v2);
    }
    double v3 = (void *)a1[8];
    if (v3) {
      uprv_free(v3);
    }
    unint64_t v4 = (void *)a1[9];
    if (v4) {
      uprv_free(v4);
    }
    uint64_t v5 = (void *)a1[10];
    if (v5) {
      uprv_free(v5);
    }
    double v6 = (void *)a1[11];
    if (v6) {
      uprv_free(v6);
    }
    double v7 = (void *)a1[12];
    if (v7) {
      uprv_free(v7);
    }
    double v8 = (void *)a1[13];
    if (v8) {
      uprv_free(v8);
    }
    int v9 = (void *)a1[56];
    if (v9) {
      uprv_free(v9);
    }
    uprv_free(a1);
  }

uint64_t ubidi_setInverse(uint64_t result, int a2)
{
  if (result)
  {
    *(_BYTE *)(result + 144) = a2;
    *(_DWORD *)(result + 148) = 4 * (a2 != 0);
  }

  return result;
}

uint64_t ubidi_isInverse(uint64_t a1)
{
  if (a1) {
    return *(char *)(a1 + 144);
  }
  else {
    return 0;
  }
}

uint64_t ubidi_setReorderingMode(uint64_t result, unsigned int a2)
{
  if (result)
  {
    if (a2 <= 6)
    {
      *(_DWORD *)(result + 148) = a2;
      *(_BYTE *)(result + 144) = a2 == 4;
    }
  }

  return result;
}

uint64_t ubidi_getReorderingMode(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 148);
  }
  return result;
}

uint64_t ubidi_setReorderingOptions(uint64_t result, unsigned int a2)
{
  if (result)
  {
    unsigned int v2 = a2 & 0xFFFFFFFE;
    if ((a2 & 2) == 0) {
      unsigned int v2 = a2;
    }
    *(_DWORD *)(result + 152) = v2;
  }

  return result;
}

uint64_t ubidi_getReorderingOptions(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 152);
  }
  return result;
}

uint64_t ubidi_getBaseDirection(UChar *s, int a2)
{
  uint64_t result = 3LL;
  if (s)
  {
    int32_t v4 = a2;
    if (a2 >= -1)
    {
      if (a2 == -1) {
        int32_t v4 = u_strlen(s);
      }
      int32_t v5 = 0;
      while (v5 < v4)
      {
        uint64_t v6 = v5 + 1LL;
        UChar32 v7 = s[v5];
        if ((v7 & 0xFC00) != 0xD800 || (_DWORD)v6 == v4)
        {
          ++v5;
        }

        else
        {
          int v9 = s[v6];
          BOOL v10 = (v9 & 0xFC00) == 56320;
          int v11 = v9 + (v7 << 10) - 56613888;
          if (v10) {
            v5 += 2;
          }
          else {
            ++v5;
          }
          if (v10) {
            UChar32 v7 = v11;
          }
        }

        uint64_t result = u_charDirection(v7);
        if (!(_DWORD)result) {
          return result;
        }
        if ((_DWORD)result == 13 || (_DWORD)result == 1) {
          return 1LL;
        }
      }

      return 3LL;
    }
  }

  return result;
}

uint64_t sub_18081000C(uint64_t a1, int a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 216);
  double v3 = *(_DWORD **)(a1 + 224);
  if ((int)v2 <= 0)
  {
    int v6 = v2 - 1;
  }

  else
  {
    if (*v3 <= a2)
    {
      unint64_t v4 = 0LL;
      UChar32 v7 = v3 + 2;
      while (v2 - 1 != v4)
      {
        int v8 = *v7;
        v7 += 2;
        ++v4;
        if (v8 > a2)
        {
          BOOL v5 = v4 < v2;
          goto LABEL_10;
        }
      }

      BOOL v5 = 0;
      LODWORD(v4) = *(_DWORD *)(a1 + 216);
    }

    else
    {
      LODWORD(v4) = 0;
      BOOL v5 = 1;
    }

uint64_t ubidi_setContext(uint64_t result, UChar *s, int a3, UChar *a4, int a5, int *a6)
{
  if (a6 && *a6 <= 0)
  {
    uint64_t v6 = result;
    if (result && a3 >= -1 && (int v7 = a5, a5 >= -1) && (s || !a3) && (a4 || !a5))
    {
      if (a3 == -1)
      {
        uint64_t result = u_strlen(s);
        a3 = result;
      }

      *(_DWORD *)(v6 + 168) = a3;
      if (v7 == -1)
      {
        uint64_t result = u_strlen(a4);
        int v7 = result;
      }

      *(_DWORD *)(v6 + 184) = v7;
      *(void *)(v6 + 160) = s;
      *(void *)(v6 + 176) = a4;
    }

    else
    {
      *a6 = 1;
    }
  }

  return result;
}

void ubidi_setPara(uint64_t a1, const UChar *a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  if (a6)
  {
    if (*a6 <= 0) {
      sub_180810170(a1, a2, a3, a4, a5, 0LL, 0, 0LL, 0LL, a6);
    }
  }

void sub_180810170( uint64_t a1, const UChar *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, int *a10)
{
  BOOL v10 = a10;
  uint64_t v247 = *MEMORY[0x1895F89C0];
  if (!a1 || !a2 || (uint64_t v12 = a3, (int)a3 < -1) || ((char)(a4 - 126) & 0x80000000) == 0)
  {
    int v80 = 1;
LABEL_81:
    int *v10 = v80;
    return;
  }

  if ((_DWORD)a3 == -1) {
    uint64_t v12 = u_strlen(a2);
  }
  int v19 = *(_DWORD *)(a1 + 148);
  if (v19 <= 2) {
    unsigned int v20 = a7;
  }
  else {
    unsigned int v20 = 0;
  }
  if (a7 <= 0) {
    uint64_t v21 = 0LL;
  }
  else {
    uint64_t v21 = v20;
  }
  if (v19 == 3)
  {
    *(_DWORD *)(a1 + 148) = 0;
    if (!(_DWORD)v12)
    {
      if (a10 && *a10 <= 0) {
        sub_180810170(a1, a2, 0LL, a4, 0LL, 0LL, 0LL, 0LL, 0LL, a10);
      }
      uint64_t v22 = 0LL;
      goto LABEL_120;
    }

    uint64_t v22 = (int *)uprv_malloc(7LL * (int)v12);
    if (!v22)
    {
      *a10 = 7;
      goto LABEL_120;
    }

    int v23 = *(_DWORD *)(a1 + 152);
    if ((v23 & 1) != 0) {
      *(_DWORD *)(a1 + 152) = v23 & 0xFFFFFFFC | 2;
    }
    int v24 = a4 & 1;
    if (a10)
    {
      if (*a10 > 0) {
        goto LABEL_120;
      }
      sub_180810170(a1, a2, v12, a4 & 1, 0LL, 0LL, 0LL, 0LL, 0LL, a10);
    }

    if (*a10 <= 0)
    {
      unsigned int v25 = (unsigned __int8 *)&v22[(int)v12] + 2 * (int)v12;
      Levels = ubidi_getLevels(a1, a10);
      int v27 = *(_DWORD *)(a1 + 20);
      memcpy(v25, Levels, v27);
      int v239 = *(_DWORD *)(a1 + 200);
      int v28 = *(_DWORD *)(a1 + 212);
      unsigned int v233 = ubidi_writeReordered(a1, (unint64_t)&v22[(int)v12], v12, 2, a10);
      ubidi_getVisualMap(a1, v22, a10);
      int v29 = v239;
      if (*a10 >= 1)
      {
LABEL_76:
        *(void *)(a1 + 8) = a2;
        *(_DWORD *)(a1 + 16) = v12;
        *(_DWORD *)(a1 + 20) = v27;
        *(_DWORD *)(a1 + 200) = v29;
        int v79 = *(_DWORD *)(a1 + 36);
        if (v27 < v79) {
          int v79 = v27;
        }
        memcpy(*(void **)(a1 + 136), v25, v79);
        *(_DWORD *)(a1 + 212) = v28;
        goto LABEL_120;
      }

      int v228 = v28;
      int v230 = v27;
      *(_DWORD *)(a1 + 148) = 5;
      *(_DWORD *)(a1 + 152) = v23;
      char v30 = *(_BYTE *)(a1 + 112);
      *(_BYTE *)(a1 + 112) = 0;
      sub_180810170(a1, &v22[(int)v12], v233, v24 ^ 1u, 0LL, 0LL, 0LL, 0LL, 0LL, a10);
      *(_BYTE *)(a1 + 112) = v30;
      sub_180814B7C(a1);
      if (*a10 <= 0)
      {
        uint64_t v31 = *(unsigned int *)(a1 + 312);
        if ((int)v31 >= 1)
        {
          uint64_t v32 = 0LL;
          int v33 = 0;
          int v34 = 0;
          __int128 v35 = *(uint64_t **)(a1 + 320);
          do
          {
            int v36 = *((_DWORD *)v35 + 3 * v32 + 1);
            int v37 = v36 - v34;
            if (v37 >= 2)
            {
              int v38 = *((_DWORD *)v35 + 3 * v32);
              int v39 = (v38 & 0x7FFFFFFF) + v37;
              uint64_t v40 = v38 & 0x7FFFFFFF;
              do
              {
                uint64_t v41 = v22[v40 + 1];
                uint64_t v42 = v22[v40];
                int v43 = v41 - v42;
                if (v43 != 1 || v25[v41] != v25[v42]) {
                  ++v33;
                }
                ++v40;
              }

              while (v39 > (int)v40 + 1);
            }

            ++v32;
            int v34 = v36;
          }

          while (v32 != v31);
          if (!v33) {
            goto LABEL_40;
          }
          if (sub_18080FDAC( (void **)(a1 + 96),  (_DWORD *)(a1 + 48),  *(char *)(a1 + 113),  12 * (v33 + (int)v31)))
          {
            if ((_DWORD)v31 == 1)
            {
              uint64_t v44 = *(void *)(a1 + 96);
              uint64_t v45 = *v35;
              *(_DWORD *)(v44 + 8) = *((_DWORD *)v35 + 2);
              *(void *)uint64_t v44 = v45;
            }

            __int128 v35 = *(uint64_t **)(a1 + 96);
            *(void *)(a1 + 320) = v35;
            *(_DWORD *)(a1 + 312) += v33;
            do
            {
LABEL_40:
              unsigned int v46 = v31 - 1;
              if ((_DWORD)v31 == 1)
              {
                unsigned int v47 = 0;
                int v48 = *((_DWORD *)v35 + 1);
                int v49 = v48;
              }

              else
              {
                unsigned int v47 = v31 - 1;
                int v48 = *((_DWORD *)v35 + 3 * v46 + 1);
                int v49 = v48 - *((_DWORD *)v35 + 3 * (v31 - 2) + 1);
              }

              double v50 = (unsigned int *)v35 + 3 * v47;
              unint64_t v51 = *v50;
              uint64_t v52 = (v51 >> 31) & 1;
              uint64_t v53 = v51 & 0x7FFFFFFF;
              if (v49 > 1)
              {
                int v58 = v49 + v53 - 1;
                if ((v51 & 0x80000000) != 0LL) {
                  int v59 = v51 & 0x7FFFFFFF;
                }
                else {
                  int v59 = v49 + v53 - 1;
                }
                if ((v51 & 0x80000000) != 0LL) {
                  LODWORD(v53) = v58;
                }
                if (v59 == (_DWORD)v53)
                {
                  int v60 = v59;
                }

                else
                {
                  uint64_t v61 = 0LL;
                  if ((v51 & 0x80000000) == 0LL) {
                    uint64_t v62 = -1LL;
                  }
                  else {
                    uint64_t v62 = 1LL;
                  }
                  int v63 = v59;
                  uint64_t v64 = &v22[v59];
                  uint64_t v65 = (uint64_t)v35 + 12 * v47;
                  __int128 v66 = (_DWORD *)(v65 + 4);
                  double v67 = (_DWORD *)(v65 + 8);
                  int v68 = v62 + v59;
                  int v60 = v59;
                  do
                  {
                    uint64_t v69 = v64[v61];
                    v63 += v62;
                    uint64_t v70 = v64[v62 + v61];
                    int v71 = v69 - v70;
                    if (v71 == 1 && v25[v69] == v25[v70])
                    {
                      int v72 = v68 + v61;
                    }

                    else
                    {
                      int v73 = v22[v60];
                      uint64_t v74 = (unsigned int *)v35 + 3 * (int)(v33 + v46);
                      *uint64_t v74 = v73 | ((v52 ^ v25[v73]) << 31);
                      v74[1] = v48;
                      int v75 = v59 + v61 - v60;
                      if (v75 < 0) {
                        int v75 = v60 - (v59 + v61);
                      }
                      int v48 = *v66 + ~v75;
                      *__int128 v66 = v48;
                      int v76 = *v67 & 0xA;
                      v74[2] = v76;
                      *v67 &= ~v76;
                      --v33;
                      int v60 = v68 + v61;
                      int v72 = v63;
                    }

                    v61 += v62;
                  }

                  while (v72 != (_DWORD)v53);
                }

                uint64_t v54 = v33 + (uint64_t)(int)v46;
                if (v33)
                {
                  uint64_t v77 = *(void *)v50;
                  uint64_t v78 = (uint64_t)v35 + 12 * v54;
                  *(_DWORD *)(v78 + 8) = v50[2];
                  *(void *)uint64_t v78 = v77;
                }

                int v57 = v22[(int)v53];
                if (v22[v60] < v57) {
                  int v57 = v22[v60];
                }
              }

              else
              {
                uint64_t v54 = v33 + (uint64_t)(int)v46;
                if (v33)
                {
                  uint64_t v55 = *(void *)v50;
                  uint64_t v56 = (uint64_t)v35 + 12 * v54;
                  *(_DWORD *)(v56 + 8) = v50[2];
                  *(void *)uint64_t v56 = v55;
                }

                int v57 = v22[v53];
              }

              *((_DWORD *)v35 + 3 * v54) = v57 | ((v52 ^ v25[v57]) << 31);
              BOOL v169 = v31-- <= 1;
            }

            while (!v169);
          }
        }
      }

      *(_BYTE *)(a1 + 157) ^= 1u;
      int v27 = v230;
      int v28 = v228;
      int v29 = v239;
      goto LABEL_76;
    }

LABEL_105:
  if (!sub_18080FDAC((void **)(a1 + 64), (_DWORD *)(a1 + 32), *(char *)(a1 + 112), v12))
  {
LABEL_116:
    int v80 = 7;
    goto LABEL_81;
  }

  uint64_t v94 = *(void *)(a1 + 64);
  *(void *)(a1 + 128) = v94;
  unsigned int v95 = *(unsigned __int8 *)(a1 + 157);
  v232 = v10;
  BOOL v221 = v95 >= 0xFE && (*(_DWORD *)(a1 + 148) - 5) < 2;
  uint64_t v97 = *(void *)(a1 + 8);
  uint64_t v98 = *(void *)(a1 + 120);
  int v99 = *(_DWORD *)(a1 + 16);
  int v100 = *(_DWORD *)(a1 + 152);
  uint64_t v246 = 0LL;
  memset(v245, 0, sizeof(v245));
  memset(v244, 0, 126);
  uint64_t v243 = 0LL;
  memset(v242, 0, sizeof(v242));
  if ((v100 & 4) != 0) {
    *(_DWORD *)(a1 + 20) = 0;
  }
  uint64_t v101 = *(void *)(a1 + 224);
  uint64_t v235 = v94;
  uint64_t v240 = v97;
  char v237 = v100;
  int v219 = v95 & 1;
  unsigned int v220 = v95;
  if (v95 < 0xFE)
  {
    int v231 = 0;
    *(_DWORD *)(v101 + 4) = v95;
    int v226 = 10;
  }

  else
  {
    uint64_t v224 = a5;
    *(_DWORD *)(v101 + 4) = v95 & 1;
    int v102 = *(_DWORD *)(a1 + 168);
    int v231 = 1;
    if (v102 < 1)
    {
      int v226 = v95 & 1;
      a5 = v224;
    }

    else
    {
      int v103 = 0;
      uint64_t v104 = *(void *)(a1 + 160);
      int v105 = 10;
      do
      {
        uint64_t v106 = v103 + 1LL;
        uint64_t v107 = *(unsigned __int16 *)(v104 + 2LL * v103);
        BOOL v108 = (v107 & 0xFC00) != 0xD800 || (_DWORD)v106 == v102;
        if (!v108)
        {
          int v109 = *(unsigned __int16 *)(v104 + 2 * v106);
          BOOL v110 = (v109 & 0xFC00) == 56320;
          int v111 = v103 + 2;
          unsigned int v112 = ((_DWORD)v107 << 10) - 56613888 + v109;
          if (v110) {
            LODWORD(v106) = v111;
          }
          if (v110) {
            uint64_t v107 = v112;
          }
          else {
            uint64_t v107 = v107;
          }
        }

        int v113 = ubidi_getCustomizedClass(a1, v107);
        else {
          int v114 = v105;
        }
        else {
          int v116 = v113;
        }
        else {
          int v105 = v114;
        }
        int v103 = v106;
      }

      while ((int)v106 < v102);
      if (v105 == 10)
      {
        int v231 = 1;
        int v226 = v219;
        a5 = v224;
        uint64_t v94 = v235;
        uint64_t v97 = v240;
        LOBYTE(v100) = v237;
      }

      else
      {
        a5 = v224;
        uint64_t v94 = v235;
        uint64_t v97 = v240;
        LOBYTE(v100) = v237;
        int v231 = 0;
        if ((_BYTE)v105) {
          *(_DWORD *)(*(void *)(a1 + 224) + 4LL) = 1;
        }
        else {
          *(_DWORD *)(*(void *)(a1 + 224) + 4LL) = 0;
        }
        int v226 = v219;
      }
    }
  }

  if (v99 >= 1)
  {
    int v117 = 0;
    int v118 = 0;
    unsigned int v119 = 0;
    int v120 = 0;
    v218 = (_DWORD *)(a1 + 44);
    char v121 = -1;
    int v227 = -1;
    int v222 = -1;
    while (1)
    {
      if (v98 && v121 < 0) {
        int v118 = *(unsigned __int16 *)(v98 + 2LL * v120);
      }
      if (v118 >= 1) {
        break;
      }
      uint64_t v131 = v120 + 1LL;
      uint64_t v122 = *(unsigned __int16 *)(v97 + 2LL * v120);
      if ((v122 & 0xFC00) != 0xD800 || (_DWORD)v131 == v99)
      {
        ++v120;
      }

      else
      {
        int v133 = *(unsigned __int16 *)(v97 + 2 * v131);
        BOOL v134 = (v133 & 0xFC00) == 56320;
        unsigned int v135 = ((_DWORD)v122 << 10) - 56613888 + v133;
        if (v134) {
          v120 += 2;
        }
        else {
          ++v120;
        }
        if (v134) {
          uint64_t v122 = v135;
        }
        else {
          uint64_t v122 = v122;
        }
      }

      unsigned __int8 v136 = ubidi_getCustomizedClass(a1, v122);
      int v123 = v136;
      v119 |= 1LL << v136;
      uint64_t v94 = v235;
      *(_BYTE *)(v235 + v120 - icu::UVector32::~UVector32(this + 1) = v136;
      int v118 = 0;
      if (v122 >= 0x10000)
      {
        v119 |= 0x40000u;
        *(_BYTE *)(v120 + v235 - 2) = 18;
      }

      char v121 = -1;
      uint64_t v97 = v240;
      LOBYTE(v100) = v237;
      if ((v237 & 2) != 0) {
        goto LABEL_166;
      }
LABEL_174:
      if (v123 == 13 || v123 == 1)
      {
        if (v231 == 2)
        {
          if (v227 <= 125)
          {
            int v137 = *((char *)v244 + v227);
            if (v137 < 0) {
              *(_BYTE *)(v94 + *((int *)v245 + v227)) = 21;
            }
            else {
              *(_WORD *)(v98 + 2LL * v227) = *(_WORD *)(v98 + 2LL * v227) & ~(15 << (4 * v137)) | (11 << (4 * v137));
            }
            v119 |= 0x200000u;
          }

          int v231 = 3;
        }

        else if (v231 == 1)
        {
          int v231 = 0;
          *(_DWORD *)(*(void *)(a1 + 224) + 8LL * *(int *)(a1 + 216) - 4) = 1;
        }

        BOOL v108 = v123 == 13;
        int v145 = v222;
        if (v108) {
          int v145 = v120 - 1;
        }
        int v222 = v145;
        int v226 = 1;
        goto LABEL_194;
      }

      if (!v123)
      {
        if (v231 != 2)
        {
          if (v231 == 1)
          {
            int v231 = 0;
            int v226 = 0;
            *(_DWORD *)(*(void *)(a1 + 224) + 8LL * *(int *)(a1 + 216) - 4) = 0;
          }

          else
          {
            int v226 = 0;
          }

          goto LABEL_194;
        }

        int v226 = 0;
        if (v227 < 126) {
          v119 |= 0x100000u;
        }
        int v128 = 3;
        goto LABEL_245;
      }

      if ((v123 - 19) <= 2)
      {
        uint64_t v129 = v227 + 1LL;
        if (v227 <= 124)
        {
          *((_DWORD *)v245 + v129) = v120 + (v121 >> 7);
          *((_BYTE *)v244 + v129) = v121;
          *((_DWORD *)v242 + v129) = v231;
        }

        if (v123 == 19)
        {
          if (v121 < 0) {
            *(_BYTE *)(v94 + v120 - icu::UVector32::~UVector32(this + 1) = 20;
          }
          else {
            *(_WORD *)(v98 + 2LL * v120) = *(_WORD *)(v98 + 2LL * v120) & ~(15 << (4 * v121)) | (10 << (4 * v121));
          }
          int v128 = 2;
        }

        else
        {
          int v128 = 3;
        }

        int v23 = 0;
        int v24 = 0;
LABEL_106:
        int v29 = 1;
        goto LABEL_127;
      case 5:
        if (a4 && (_DWORD)v13 != 7 && (_DWORD)v13 != 2) {
          goto LABEL_104;
        }
        if (v18 < v19) {
          goto LABEL_98;
        }
        if (v12 <= -2147483646) {
          char v30 = -2147483646;
        }
        else {
          char v30 = v12;
        }
        uint64_t v31 = v30 - 1;
        uint64_t v32 = 4 * v30 - 8;
        do
        {
          --v31;
          if (*(_BYTE *)(a1 + 64))
          {
            if ((v31 & 0x80000000) == 0
              && *(_DWORD *)(a1 + 16) > (signed int)v31
              && *(_BYTE *)(*(void *)(a1 + 48) + v31))
            {
              goto LABEL_110;
            }
          }

          else if (v31 <= 0xF && ((*(void *)(a1 + 48) >> v32) & 0xF) != 0)
          {
            goto LABEL_110;
          }

          v32 -= 4;
        }

        while ((int)v31 > v19);
LABEL_98:
        int v24 = 0;
        int v29 = 2;
        int v23 = 1;
        goto LABEL_127;
      case 9:
        if (a4)
        {
          switch((int)v13)
          {
            case 2:
            case 7:
              goto LABEL_101;
            case 4:
            case 9:
              break;
            default:
              goto LABEL_104;
          }
        }

        if (v18 < v19)
        {
          int v23 = 0;
          int v29 = 3;
          int v24 = 1;
          goto LABEL_127;
        }

        if (v12 <= -2147483646) {
          int v33 = -2147483646;
        }
        else {
          int v33 = v12;
        }
        int v34 = v33 - 1;
        __int128 v35 = 4 * v33 - 8;
        break;
      default:
        if (!a4 || (_DWORD)v13 == 2 || (_DWORD)v13 == 7)
        {
LABEL_101:
          int v23 = 0;
          int v24 = 0;
          else {
            int v29 = 3;
          }
          goto LABEL_127;
        }

        if (!icu::ResourceTable::getKeyAndValue( (icu::ResourceTable *)&v77,  v48++,  (const char **)&v75,  a3)) {
          goto LABEL_100;
        }
      }
    }
  }

  return result;
}

LABEL_244:
        int v227 = v129;
        goto LABEL_245;
      }

      if (v123 == 7)
      {
        BOOL v130 = v120 < v99;
        if (v120 >= v99 || (_DWORD)v122 != 13) {
          goto LABEL_228;
        }
        if (*(_WORD *)(v97 + 2LL * v120) != 10)
        {
          BOOL v130 = 1;
LABEL_228:
          v138 = *(_OWORD **)(a1 + 224);
          int v139 = *(_DWORD *)(a1 + 216);
          *((_DWORD *)v138 + 2 * v139 - 2) = v120;
          BOOL v140 = v221;
          if (v226 != 1) {
            BOOL v140 = 0;
          }
          if (v140) {
            *((_DWORD *)v138 + 2 * v139 - icu::UVector32::~UVector32(this + 1) = 1;
          }
          if ((*(_BYTE *)(a1 + 152) & 4) != 0)
          {
            *(_DWORD *)(a1 + 20) = v120;
            *(_DWORD *)(a1 + 456) = v117;
          }

          if (!v130) {
            goto LABEL_194;
          }
          *(_DWORD *)(a1 + 216) = v139 + 1;
          if (v138 != v229)
          {
            *(void *)(a1 + 224) = *(void *)(a1 + 88);
            goto LABEL_250;
          }

          if (v139 >= 10)
          {
            if (!sub_18080FDAC(v225, v218, 1, 160))
            {
LABEL_431:
              int v96 = 7;
              goto LABEL_118;
            }

            uint64_t v141 = *(_OWORD **)(a1 + 88);
            *(void *)(a1 + 224) = v141;
            __int128 v142 = *(_OWORD *)(a1 + 248);
            __int128 v144 = *(_OWORD *)(a1 + 280);
            __int128 v143 = *(_OWORD *)(a1 + 296);
            v141[2] = *(_OWORD *)(a1 + 264);
            v141[3] = v144;
            v141[1] = v142;
            *uint64_t v141 = *v229;
            v141[4] = v143;
LABEL_250:
            uint64_t v94 = v235;
            uint64_t v97 = v240;
            LOBYTE(v100) = v237;
          }

          if (v220 < 0xFE)
          {
            int v231 = 0;
            *(_DWORD *)(*(void *)(a1 + 224) + 8LL * *(int *)(a1 + 216) - 4) = *(unsigned __int8 *)(a1 + 157);
            int v227 = -1;
          }

          else
          {
            *(_DWORD *)(*(void *)(a1 + 224) + 8LL * *(int *)(a1 + 216) - 4) = v219;
            int v227 = -1;
            int v231 = 1;
            int v226 = v219;
          }
        }
      }

      else if (v123 == 22)
      {
        if (v227 < 126 && v231 == 2) {
          v119 |= 0x100000u;
        }
        if ((v227 & 0x80000000) == 0)
        {
          int v128 = v231;
          if (v227 <= 125) {
            int v128 = *((_DWORD *)v242 + v227);
          }
          LODWORD(v129) = v227 - 1;
          goto LABEL_244;
        }

        int v128 = v231;
LABEL_245:
        int v231 = v128;
      }

    icu::UnicodeString::~UnicodeString((void *)v121, (icu::UnicodeString *)&v225);
    BOOL v110 = 1;
LABEL_245:
    icu::UnicodeString::~UnicodeString(v114, (icu::UnicodeString *)v230);
LABEL_246:
    if (v108) {
      ures_close(v108);
    }
    if (v110 == 35 || !v110)
    {
      uint64_t v106 = v216;
      if (!ures_hasNext(v216))
      {
LABEL_251:
        LODWORD(v230[0]) = -1;
        Element = uhash_nextElement(v3, (int *)v230);
        if (Element)
        {
          while (1)
          {
            int v128 = *(void *)(Element + 8);
            uint64_t v129 = qword_18C5357D0[*(unsigned int *)(v128 + 84)];
            if (!v129)
            {
              BOOL v130 = icu::UMemory::operator new(0LL, (icu::UMemory *)0x28, v127);
              if (v130)
              {
                BOOL v130 = (uint64_t *)icu::UVector::UVector( (uint64_t)v130,  (uint64_t)uprv_deleteUObject,  (uint64_t)uhash_compareUnicodeString,  (int *)this);
              }

              else if (*(int *)this <= 0)
              {
                *(_DWORD *)this = 7;
              }

              uint64_t v129 = *(unsigned int *)(v128 + 84);
              qword_18C5357D0[v129] = (uint64_t)v130;
            }

            uint64_t v131 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)v129, (icu::UMemory *)0x40, v127);
            if (!v131) {
              break;
            }
            __int128 v132 = v131;
            icu::UnicodeString::UnicodeString(v131, (UChar **)(v128 + 16));
            if (*(int *)this >= 1)
            {
              (*(void (**)(icu::UnicodeString *))(*(void *)v132 + 8LL))(v132);
              goto LABEL_338;
            }

            icu::UVector::adoptElement( (icu::UVector *)qword_18C5357D0[*(unsigned int *)(v128 + 84)],  v132,  (UErrorCode *)this);
            Element = uhash_nextElement(v3, (int *)v230);
            if (!Element) {
              goto LABEL_261;
            }
          }

          int v109 = *(unsigned int *)this;
          if ((int)v109 <= 0)
          {
            int v109 = 7LL;
            *(_DWORD *)this = 7;
          }
        }

        else
        {
LABEL_261:
          qword_18C535808 = v206;
          qword_18C535810 = (uint64_t)v3;
          int v109 = (uint64_t)qword_18C535000;
          qword_18C535818 = v204;
          int v206 = 0LL;
          v207 = 0LL;
          BOOL v204 = 0LL;
        }

        break;
      }

      continue;
    }

    break;
  }

            uint64_t v146 = icu::DateFormatSymbols::getPatternCharIndex(v121);
            int v147 = *(unsigned __int16 *)(a2 + 8);
            int v148 = (__int16)v147;
            unsigned int v149 = v147 >> 5;
            if (v148 >= 0) {
              BOOL v150 = v149;
            }
            else {
              BOOL v150 = *(unsigned int *)(a2 + 12);
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a8 + 16LL))(a8, v146, v46, v150);
            return (uint64_t)icu::UnicodeString::~UnicodeString(v89, (icu::UnicodeString *)v173);
          }

          int v154 = *(void *)(v14 + 768);
          uint64_t v152 = *(void *)(v154 + 232);
          int v153 = *(_DWORD *)(v154 + 240);
        }

        sub_18098A560(a2, v94, v152, v153);
        uint64_t v32 = 5;
        goto LABEL_191;
      case 0x1Bu:
        if ((int)a4 >= 5)
        {
          double v50 = v166 / 3;
          unint64_t v51 = *(void *)(v14 + 768);
          int v48 = *(void *)(v51 + 408);
          int v49 = *(_DWORD *)(v51 + 416);
          goto LABEL_163;
        }

        unsigned int v46 = v168;
        int v96 = v166;
        if ((_DWORD)a4 == 3)
        {
          uint64_t v97 = v166 / 3;
          unsigned int v119 = *(void *)(v14 + 768);
          int v99 = *(void *)(v119 + 392);
          int v100 = *(_DWORD *)(v119 + 400);
        }

        else
        {
          if ((_DWORD)a4 != 4) {
            goto LABEL_160;
          }
          uint64_t v97 = v166 / 3;
          uint64_t v98 = *(void *)(v14 + 768);
          int v99 = *(void *)(v98 + 376);
          int v100 = *(_DWORD *)(v98 + 384);
        }

        goto LABEL_189;
      case 0x1Cu:
        if ((int)a4 >= 5)
        {
          double v50 = v166 / 3;
          uint64_t v52 = *(void *)(v14 + 768);
          int v48 = *(void *)(v52 + 456);
          int v49 = *(_DWORD *)(v52 + 464);
          goto LABEL_163;
        }

        unsigned int v46 = v168;
        int v96 = v166;
        if ((_DWORD)a4 == 3)
        {
          uint64_t v97 = v166 / 3;
          int v120 = *(void *)(v14 + 768);
          int v99 = *(void *)(v120 + 440);
          int v100 = *(_DWORD *)(v120 + 448);
        }

        else
        {
          if ((_DWORD)a4 != 4)
          {
LABEL_160:
            BOOL v108 = (v96 / 3 + 1);
            int v109 = (icu::SimpleDateFormat *)v14;
            uint64_t v44 = lpsrc;
            BOOL v110 = (icu::UnicodeString *)a2;
            uint64_t v42 = a4;
            goto LABEL_161;
          }

          uint64_t v97 = v166 / 3;
          uint64_t v101 = *(void *)(v14 + 768);
          int v99 = *(void *)(v101 + 424);
          int v100 = *(_DWORD *)(v101 + 432);
        }

LABEL_194:
      if (v120 >= v99) {
        goto LABEL_261;
      }
    }

    LODWORD(v122) = 0;
    ++v121;
    int v123 = byte_1809F2DB6[v118 & 0xF];
    int v118 = v118 >> 4;
    v119 |= 1LL << v123;
    if ((v100 & 2) == 0) {
      goto LABEL_174;
    }
LABEL_166:
    goto LABEL_174;
  }

  unsigned int v119 = 0;
  int v117 = 0;
  int v222 = -1;
  int v227 = -1;
LABEL_261:
  if (v227 >= 125) {
    uint64_t v146 = 125LL;
  }
  else {
    uint64_t v146 = v227;
  }
  if ((v146 & 0x80000000) != 0)
  {
    int v148 = v222;
  }

  else
  {
    int v147 = v231;
    if (v227 > 125) {
      int v147 = 2;
    }
    int v148 = v222;
    while (v147 != 2)
    {
      int v147 = *((_DWORD *)v242 + v146);
      BOOL v169 = v146-- <= 0;
      if (v169) {
        goto LABEL_274;
      }
    }

    v119 |= 0x100000u;
  }

LABEL_274:
  if ((*(_BYTE *)(a1 + 152) & 4) != 0)
  {
    unsigned int v149 = v220;
    if (*(_DWORD *)(a1 + 20) < v99) {
      --*(_DWORD *)(a1 + 216);
    }
  }

  else
  {
    *(_DWORD *)(*(void *)(a1 + 224) + 8LL * *(int *)(a1 + 216) - 8) = v99;
    *(_DWORD *)(a1 + 456) = v117;
    unsigned int v149 = v220;
  }

  BOOL v150 = v221;
  if (v226 != 1) {
    BOOL v150 = 0;
  }
  if (v150) {
    *(_DWORD *)(*(void *)(a1 + 224) + 8LL * *(int *)(a1 + 216) - 4) = 1;
  }
  if (v149 >= 0xFE) {
    *(_BYTE *)(a1 + 157) = *(_DWORD *)(*(void *)(a1 + 224) + 4LL);
  }
  uint64_t v151 = *(unsigned int *)(a1 + 216);
  if ((int)v151 >= 1)
  {
    uint64_t v152 = (int *)(*(void *)(a1 + 224) + 4LL);
    do
    {
      int v153 = *v152;
      v152 += 2;
      v119 |= dword_1809F2D7C[v153 & 1];
      --v151;
    }

    while (v151);
  }

  int v154 = (v119 >> 7) & 1;
  if (!*(_BYTE *)(a1 + 156)) {
    int v154 = 0;
  }
  *(_DWORD *)(a1 + 204) = v119 | v154;
  *(_DWORD *)(a1 + 208) = v148;
  uint64_t v155 = *(void *)(a1 + 128);
  uint64_t v156 = *(unsigned int *)(a1 + 20);
  *(_DWORD *)(a1 + 212) = v156;
  uint64_t v241 = v155;
  if (!a5)
  {
    if (!sub_18080FDAC((void **)(a1 + 72), (_DWORD *)(a1 + 36), *(char *)(a1 + 112), v156))
    {
LABEL_334:
      int v177 = 7;
LABEL_336:
      int *v232 = v177;
      return;
    }

    *(void *)(a1 + 136) = *(void *)(a1 + 72);
    unsigned int v173 = sub_180811C80(a1, v232);
    uint64_t v155 = v241;
    if (*v232 >= 1) {
      return;
    }
    unsigned int v172 = v173;
LABEL_329:
    int v174 = *(_DWORD *)(a1 + 340);
    if (v174 <= 5)
    {
      uint64_t v175 = a1 + 352;
LABEL_338:
      *(void *)(a1 + 344) = v175;
      *(_DWORD *)(a1 + 340) = -1;
      *(_DWORD *)(a1 + 200) = v172;
      if (v172 > 1)
      {
        switch(*(_DWORD *)(a1 + 148))
        {
          case 0:
            v192 = &off_189710EB8;
            break;
          case 1:
            v192 = &off_189710ED8;
            break;
          case 2:
            v192 = &off_189710EF8;
            break;
          case 4:
            v192 = &off_189710F18;
            break;
          case 5:
            if ((*(_BYTE *)(a1 + 152) & 1) != 0) {
              v192 = &off_189710F38;
            }
            else {
              v192 = &off_189710F58;
            }
            break;
          case 6:
            if ((*(_BYTE *)(a1 + 152) & 1) != 0) {
              v192 = &off_189710F78;
            }
            else {
              v192 = &off_189710F98;
            }
            break;
          default:
            abort();
        }

        *(void *)(a1 + 192) = v192;
        if (a5 || *(int *)(a1 + 216) > 1 || (*(_DWORD *)(a1 + 204) & 0x80000000) != 0)
        {
          v238 = *(char **)(a1 + 136);
          if (*(_BYTE *)(a1 + 158) && **(int **)(a1 + 224) < 1)
          {
            unsigned int v195 = sub_18081000C(a1, 0);
            uint64_t v155 = v241;
          }

          else
          {
            unsigned int v195 = *(unsigned __int8 *)(a1 + 157);
          }

          uint64_t v196 = 0LL;
          unsigned int v197 = *v238;
          if (v195 <= v197) {
            char v198 = *v238;
          }
          else {
            char v198 = v195;
          }
          unsigned __int8 v199 = v198 & 1;
          do
          {
            if ((int)v196 < 1)
            {
              unsigned __int8 v200 = v199;
            }

            else
            {
              unsigned __int8 v200 = v199;
              if (*(_BYTE *)(v155 + (v196 - 1)) == 7)
              {
                if (*(_BYTE *)(a1 + 158) && (int)v196 >= **(_DWORD **)(a1 + 224))
                {
                  char v201 = sub_18081000C(a1, v196);
                  uint64_t v155 = v241;
                }

                else
                {
                  char v201 = *(_BYTE *)(a1 + 157);
                }

                unsigned __int8 v200 = v201 & 1;
              }
            }

            uint64_t v202 = (int)v196 + 1LL;
            if ((int)v202 >= (int)v156)
            {
              BOOL v204 = 0;
              int v206 = v196;
LABEL_405:
              if (*(_BYTE *)(a1 + 158) && (v207 = *(_DWORD **)(a1 + 224), (int)v156 > *v207))
              {
                unint64_t v208 = *(unsigned int *)(a1 + 216);
                if ((int)v208 <= 0)
                {
                  int v213 = v208 - 1;
                }

                else
                {
                  unint64_t v209 = 0LL;
                  v210 = v207 + 2;
                  while (v208 - 1 != v209)
                  {
                    int v211 = *v210;
                    v210 += 2;
                    ++v209;
                    if (v211 >= (int)v156)
                    {
                      BOOL v212 = v209 < v208;
                      goto LABEL_416;
                    }
                  }

                  BOOL v212 = 0;
                  LODWORD(v209) = *(_DWORD *)(a1 + 216);
LABEL_416:
                  int v213 = v208 - 1;
                  if (v212) {
                    int v213 = v209;
                  }
                }

                int v205 = v207[2 * v213 + 1];
              }

              else
              {
                LOBYTE(v205) = *(_BYTE *)(a1 + 157);
              }
            }

            else
            {
              uint64_t v203 = 0LL;
              BOOL v204 = 1;
              while (1)
              {
                int v205 = v238[v202 + v203];
                BOOL v204 = ++v203 + v202 < (int)v156;
                if (!(1 - (_DWORD)v156 + (_DWORD)v196 + (_DWORD)v203))
                {
                  int v206 = v156 - 1;
                  uint64_t v202 = v156;
                  goto LABEL_405;
                }
              }

              int v206 = v196 + v203;
              uint64_t v202 = (v206 + 1);
            }

            if ((v205 & 0x7Fu) <= (v197 & 0x7F)) {
              char v214 = v197;
            }
            else {
              char v214 = v205;
            }
            unsigned __int8 v199 = v214 & 1;
            if ((v197 & 0x80) != 0)
            {
              v215 = (unsigned __int8 *)&v238[(int)v196];
              int v216 = v206 - v196 + 1;
              do
              {
                *v215++ &= ~0x80u;
                --v216;
              }

              while (v216);
            }

            else
            {
              sub_180812740(a1, v196, v202, v200, v214 & 1);
              uint64_t v155 = v241;
            }

            uint64_t v196 = v202;
            LOBYTE(v197) = v205;
          }

          while (v204);
        }

        else
        {
          if (*(_BYTE *)(a1 + 158))
          {
            int v193 = **(_DWORD **)(a1 + 224);
            if (v193 <= 0) {
              char v194 = sub_18081000C(a1, 0);
            }
            else {
              char v194 = *(_BYTE *)(a1 + 157);
            }
            else {
              char v217 = sub_18081000C(a1, (int)v156 - 1);
            }
          }

          else
          {
            char v194 = *(_BYTE *)(a1 + 157);
            char v217 = v194;
          }

          sub_180812740(a1, 0LL, v156, v194 & 1, v217 & 1);
        }

        int v96 = *(_DWORD *)(a1 + 444);
        if (v96 >= 1)
        {
LABEL_118:
          int *v232 = v96;
          return;
        }

        sub_180812E98(a1);
      }

      else
      {
        *(_DWORD *)(a1 + 212) = 0;
      }

      int v178 = *(_DWORD *)(a1 + 152);
      if (*(_BYTE *)(a1 + 158))
      {
        if ((v178 & 1) != 0 && (*(_DWORD *)(a1 + 148) - 5) <= 1)
        {
          int v179 = *(_DWORD *)(a1 + 216);
          if (v179 >= 1)
          {
            uint64_t v180 = 0LL;
            uint64_t v181 = v241;
            do
            {
              uint64_t v182 = *(void *)(a1 + 224);
              uint64_t v183 = v182 + 8 * v180;
              if (*(_BYTE *)(v183 + 4))
              {
                int v184 = v180 ? *(_DWORD *)(v182 + 8 * v180 - 8) : 0;
                int v185 = *(_DWORD *)v183;
                if (v185 > v184)
                {
                  int v186 = v185 - 1;
                  uint64_t v187 = v185 - 1LL;
                  while (1)
                  {
                    char v188 = *(_BYTE *)(v181 + v187);
                    if (!v188) {
                      break;
                    }
                    if (v187 > v184)
                    {
                      --v187;
                      if (((1LL << v188) & 0x2002) == 0) {
                        continue;
                      }
                    }

                    goto LABEL_359;
                  }

                  if (v186 > (int)v187)
                  {
                    v189 = (unsigned __int8 *)(v241 - 1 + v185);
                    int v186 = v185;
                    do
                    {
                      int v190 = *v189--;
                      --v186;
                    }

                    while (v190 == 7);
                  }

                  sub_180813088((_DWORD *)a1, v186, 4);
                  int v179 = *(_DWORD *)(a1 + 216);
                  uint64_t v181 = v241;
                }
              }

LABEL_359:
              ++v180;
            }

            while (v180 < v179);
            int v178 = *(_DWORD *)(a1 + 152);
          }
        }
      }

      if ((v178 & 2) != 0) {
        int v191 = *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 456);
      }
      else {
        int v191 = *(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 436);
      }
      *(_DWORD *)(a1 + 24) = v191;
LABEL_115:
      *(_DWORD *)(a1 + 168) = 0;
      *(_DWORD *)(a1 + 184) = 0;
      *(void *)a1 = a1;
      return;
    }

    v176 = (uint64_t *)(a1 + 104);
    if (16 * v174 <= *(_DWORD *)(a1 + 52))
    {
      uint64_t v175 = *v176;
      goto LABEL_338;
    }

    if (sub_18080FDAC((void **)(a1 + 104), (_DWORD *)(a1 + 52), 1, 16 * v174))
    {
      uint64_t v175 = *v176;
      uint64_t v155 = v241;
      goto LABEL_338;
    }

    goto LABEL_334;
  }

  *(void *)(a1 + 136) = a5;
  *(_DWORD *)(a1 + 340) = 0;
  if ((int)v156 <= 0)
  {
    unsigned int v172 = 0;
    *(_DWORD *)(a1 + 204) = 0;
  }

  else
  {
    uint64_t v157 = 0LL;
    int v158 = 0;
    int v159 = 0;
    int v160 = 0;
    int v161 = *(unsigned __int8 *)(a1 + 157);
    uint64_t v162 = **(unsigned int **)(a1 + 224);
    do
    {
      char v163 = *(_BYTE *)(a5 + v157);
      int v164 = *(unsigned __int8 *)(v155 + v157);
      if ((v164 & 0xFE) == 0x14)
      {
        if (v160 >= *(_DWORD *)(a1 + 340)) {
          *(_DWORD *)(a1 + 340) = v160 + 1;
        }
        ++v160;
      }

      else if (v164 == 7)
      {
        int v160 = 0;
      }

      else if (v164 == 22)
      {
        --v160;
      }

      if (*(_BYTE *)(a1 + 158))
      {
        if (v157 == v162)
        {
          uint64_t v165 = v158 + 1LL;
          if ((int)v165 < *(_DWORD *)(a1 + 216))
          {
            v166 = (unsigned int *)(*(void *)(a1 + 224) + 8 * v165);
            uint64_t v162 = *v166;
            int v161 = v166[1];
            int v158 = v165;
          }
        }
      }

      int v167 = v163 & 0x80;
      int v168 = v163 & 0x7F;
      BOOL v169 = v168 <= 0x7D && v161 <= v168;
      if (!v169)
      {
        if (v168)
        {
          int v177 = 1;
          goto LABEL_336;
        }

        if (v164 == 7)
        {
          LOBYTE(v168) = 0;
        }

        else
        {
          LOBYTE(v168) = v161;
          *(_BYTE *)(a5 + v157) = v167 | v161;
        }
      }

      uint64_t v170 = v168 & 1;
      if (v167) {
        int v171 = dword_1809F2DC8[v170];
      }
      else {
        int v171 = dword_1809F2DD0[v170] | (1LL << v164);
      }
      v159 |= v171;
      ++v157;
    }

    while (v156 != v157);
    if ((v159 & 0x7FDFD8) != 0) {
      v159 |= dword_1809F2D7C[*(_BYTE *)(a1 + 157) & 1];
    }
    *(_DWORD *)(a1 + 204) = v159;
    if ((*(void *)&v159 & 0x20E002LL) != 0 || (unsigned int v172 = 0, (v159 & 0x20) != 0) && (*(void *)&v159 & 0x7DDFD8LL) != 0)
    {
      if ((v159 & 0x1901825) != 0) {
        unsigned int v172 = 2;
      }
      else {
        unsigned int v172 = 1;
      }
    }
  }

  if (*v232 <= 0) {
    goto LABEL_329;
  }
}

        int v92 = 0;
        LODWORD(v46) = 0;
        goto LABEL_360;
      }

      if (v42)
      {
        unint64_t v2 = v203;
        int v59 = v201;
        switch((int)v61)
        {
          case 1:
            goto LABEL_333;
          case 2:
            goto LABEL_332;
          case 3:
            goto LABEL_331;
          case 4:
            unsigned int v149 = v205++;
            *unsigned int v149 = HIBYTE(v102);
            BOOL v150 = v204;
            *BOOL v204 = v49;
            BOOL v204 = v150 + 1;
LABEL_331:
            uint64_t v151 = v205++;
            *uint64_t v151 = BYTE2(v102);
            uint64_t v152 = v204;
            *BOOL v204 = v49;
            BOOL v204 = v152 + 1;
LABEL_332:
            int v153 = v205++;
            *int v153 = BYTE1(v102);
            int v154 = v204;
            *BOOL v204 = v49;
            BOOL v204 = v154 + 1;
LABEL_333:
            uint64_t v155 = v205++;
            *uint64_t v155 = v102;
            uint64_t v156 = v204;
            *BOOL v204 = v49;
            uint64_t v42 = v156 + 1;
            BOOL v204 = v42;
            break;
          default:
            break;
        }
      }

      else
      {
        unint64_t v2 = v203;
        int v59 = v201;
        switch((int)v61)
        {
          case 1:
            goto LABEL_338;
          case 2:
            goto LABEL_337;
          case 3:
            goto LABEL_336;
          case 4:
            uint64_t v157 = v205++;
            *uint64_t v157 = HIBYTE(v102);
LABEL_336:
            int v158 = v205++;
            *int v158 = BYTE2(v102);
LABEL_337:
            int v159 = v205++;
            *int v159 = BYTE1(v102);
LABEL_338:
            int v160 = v205++;
            *int v160 = v102;
            uint64_t v42 = v204;
            break;
          default:
            break;
        }
      }

      LODWORD(v46) = 0;
      v48 -= v61;
      if (v42)
      {
        int v60 = v49;
        int v49 = v58;
      }

      int v39 = (unsigned __int16 *)v206;
    }

    if ((v46 & 0xF800) == 0xD800 && (v7 & 2) == 0) {
      break;
    }
LABEL_154:
    int v100 = *(_DWORD *)(v195
                     + 4LL * (((v46 >> 4) & 0x3F) + *(unsigned __int16 *)(v195 + 2LL * ((int)v46 >> 10))));
    switch(v8)
    {
      case 0:
        uint64_t v101 = v46 & 0xF;
        int v102 = *(unsigned __int16 *)(v197
                                   + 2
                                   * (v46 & 0xF | (16
                                                 * (unsigned __int16)*(_DWORD *)(v195
                                                                                             + 4LL
        if (v102 < 0x100) {
          int v103 = 1LL;
        }
        else {
          int v103 = 2LL;
        }
        goto LABEL_258;
      case 1:
        uint64_t v101 = v46 & 0xF;
        uint64_t v107 = v46 & 0xF | (16
                          * (unsigned __int16)*(_DWORD *)(v195
                                                                      + 4LL
                                                                      * (((v46 >> 4) & 0x3F)
                                                                       + *(unsigned __int16 *)(v195
                                                                                             + 2LL * ((int)v46 >> 10)))));
        int v102 = (*(unsigned __int8 *)(v197 + v107 + 2LL * v107) << 16) | (*(unsigned __int8 *)(v197 + v107 + 2LL * v107 + 1) << 8) | *(unsigned __int8 *)(v197 + v107 + 2LL * v107 + 2);
        if (v102 < 0x10000) {
          LODWORD(v103) = 2;
        }
        else {
          LODWORD(v103) = 3;
        }
        goto LABEL_191;
      case 2:
        uint64_t v101 = v46 & 0xF;
        int v102 = *(_DWORD *)(v197
                         + 4
                         * (v46 & 0xF | (16
                                       * (unsigned __int16)*(_DWORD *)(v195
                                                                                   + 4LL
        if (HIBYTE(v102)) {
          BOOL v108 = 4;
        }
        else {
          BOOL v108 = 3;
        }
        if (v102 >= 0x10000) {
          LODWORD(v103) = v108;
        }
        else {
          LODWORD(v103) = 2;
        }
LABEL_191:
        if (v102 >= 0x100) {
          int v103 = v103;
        }
        else {
          int v103 = 1LL;
        }
        goto LABEL_258;
      case 3:
      case 4:
      case 5:
      case 6:
      case 9:
      case 10:
        goto LABEL_181;
      case 7:
        uint64_t v101 = v46 & 0xF;
        int v109 = *(unsigned __int16 *)(v197
                                   + 2
                                   * (v46 & 0xF | (16
                                                 * (unsigned __int16)*(_DWORD *)(v195
                                                                                             + 4LL
        int v102 = v109 | 0x8F0080;
        if ((v109 & 0x80) != 0)
        {
          int v102 = *(unsigned __int16 *)(v197
                                     + 2
                                     * (v46 & 0xF | (16
                                                   * (unsigned __int16)*(_DWORD *)(v195
                                                                                               + 4LL
          BOOL v110 = 2;
        }

        else
        {
          BOOL v110 = 3;
        }

        uint64_t result = 3LL;
        if ((v109 & 0x8000) == 0)
        {
          int v102 = v109 | 0x8E8000;
          BOOL v110 = 3;
        }

        if (v109 >= 0x100)
        {
          int v103 = v110;
        }

        else
        {
          int v102 = *(unsigned __int16 *)(v197
                                     + 2
                                     * (v46 & 0xF | (16
                                                   * (unsigned __int16)*(_DWORD *)(v195
                                                                                               + 4LL
          int v103 = 1LL;
        }

        goto LABEL_258;
      case 8:
        uint64_t v101 = v46 & 0xF;
        int v111 = v46 & 0xF | (16
                          * (unsigned __int16)*(_DWORD *)(v195
                                                                      + 4LL
                                                                      * (((v46 >> 4) & 0x3F)
                                                                       + *(unsigned __int16 *)(v195
                                                                                             + 2LL * ((int)v46 >> 10)))));
        unsigned int v112 = (unsigned __int8 *)(v197 + v111 + 2LL * v111);
        int v113 = *v112;
        int v114 = v112[1];
        uint64_t v115 = v112[2] | (v113 << 16) | (v114 << 8);
        if ((v114 & 0x80u) != 0) {
          int v116 = v115;
        }
        else {
          int v116 = v115 | 0x8F008000;
        }
        if ((v114 & 0x80u) != 0) {
          int v117 = 3;
        }
        else {
          int v117 = 4;
        }
        uint64_t result = v115 | 0x8E800000;
        if ((v113 & 0x80u) == 0) {
          int v118 = v115 | 0x8E800000;
        }
        else {
          int v118 = v116;
        }
        if ((v113 & 0x80u) == 0) {
          unsigned int v119 = 4;
        }
        else {
          unsigned int v119 = v117;
        }
        if (v115 < 0x10000)
        {
          int v118 = v115;
          unsigned int v119 = 2;
        }

        if (v115 >= 0x100) {
          int v102 = v118;
        }
        else {
          int v102 = v115;
        }
        if (v115 >= 0x100) {
          int v103 = v119;
        }
        else {
          int v103 = 1LL;
        }
        goto LABEL_258;
      case 11:
        *(_DWORD *)(v4 + 80) = v47;
        uint64_t v101 = v46 & 0xF;
        int v120 = *(unsigned __int16 *)(v197 + 2 * (v46 & 0xF | (16 * (unsigned __int16)v100)));
        if (v120 > 0xFF)
        {
          int v123 = v192 | (v191 << 24) | v120;
          unint64_t v124 = v120 | (v191 << 16);
          if (v190 == 1) {
            LODWORD(v6icu::UVector32::~UVector32(this + 1) = 3;
          }
          else {
            unint64_t v124 = *(unsigned __int16 *)(v197 + 2 * (v46 & 0xF | (16 * (unsigned __int16)v100)));
          }
          if (v190 == 2) {
            LODWORD(v6icu::UVector32::~UVector32(this + 1) = 4;
          }
          else {
            int v123 = v124;
          }
          uint64_t result = 2LL;
          if (v47 == 2) {
            int v102 = *(unsigned __int16 *)(v197 + 2 * (v46 & 0xF | (16 * (unsigned __int16)v100)));
          }
          else {
            int v102 = v123;
          }
          if (v47 == 2) {
            int v103 = 2LL;
          }
          else {
            int v103 = v61;
          }
          unsigned int v47 = 2;
        }

        else if (*(_WORD *)(v197 + 2 * (v46 & 0xF | (16 * (unsigned __int16)v100))) {
               || ((v100 >> (v101 | 0x10)) & 1) != 0)
        }
        {
          char v121 = (v194 << 16) | (HIDWORD(v192) << 8) | v120;
          uint64_t v122 = v120 | (v194 << 8);
          if (v193 == 1) {
            LODWORD(v6icu::UVector32::~UVector32(this + 1) = 2;
          }
          else {
            uint64_t v122 = *(unsigned __int16 *)(v197 + 2 * (v46 & 0xF | (16 * (unsigned __int16)v100)));
          }
          if (v193 == 2) {
            LODWORD(v6icu::UVector32::~UVector32(this + 1) = 3;
          }
          else {
            char v121 = v122;
          }
          uint64_t result = 1LL;
          if (v47 >= 2) {
            int v102 = v121;
          }
          else {
            int v102 = *(unsigned __int16 *)(v197 + 2 * (v46 & 0xF | (16 * (unsigned __int16)v100)));
          }
          if (v47 >= 2) {
            int v103 = v61;
          }
          else {
            int v103 = 1LL;
          }
          if (v47 >= 2) {
            unsigned int v47 = 1;
          }
        }

        else
        {
          int v102 = 0;
          int v103 = 0LL;
        }

        goto LABEL_258;
      default:
        if ((_DWORD)v6 == 219)
        {
          uint64_t v101 = v46 & 0xF;
          uint64_t v106 = *(unsigned __int16 *)(v197
                                     + 2
                                     * (v46 & 0xF | (16
                                                   * (unsigned __int16)*(_DWORD *)(v195
                                                                                               + 4LL
          if (v106 >= 0x100)
          {
            int v102 = *(unsigned __int16 *)(v197
                                       + 2
                                       * (v46 & 0xF | (16
                                                     * (unsigned __int16)*(_DWORD *)(v195
                                                                                                 + 4LL
          }

          else
          {
            int v100 = 0;
            int v102 = 0;
          }

          if (v106 >= 0x100) {
            int v103 = 2LL;
          }
          else {
            int v103 = 0LL;
          }
        }

        else
        {
LABEL_181:
          int v100 = 0;
          int v102 = 0;
          int v103 = 0LL;
          uint64_t v101 = v46 & 0xF;
        }

                    v210 = v5[1].u32[1];
                    if ((v210 & 0x80000000) != 0 && (v215 & 0x80000000) == 0)
                    {
                      v5[1].i32[1] = v217;
                      v210 = v217;
                    }

                    v295[v211] = v217;
                    v157 += 32LL;
                    v213 += 128LL;
                    ++v211;
                    v249 = v287;
                    if (v211 == v287)
                    {
                      v250 = v214;
                      int v123 = v281;
                      LODWORD(v207) = v283;
                      goto LABEL_370;
                    }
                  }

                  v215 = 0LL;
                  if (v5[4].i32[0] >= 0x10000) {
                    goto LABEL_322;
                  }
LABEL_320:
                  v218 = v215;
                  int v219 = (uint64_t)v5[7];
                  unsigned int v220 = *v5;
                  BOOL v221 = sub_1808583A0((uint64_t *)&v289, v219, (uint64_t)*v5, v157);
                  if ((v221 & 0x80000000) != 0)
                  {
                    if ((_DWORD)v214 == (_DWORD)v283)
                    {
                      int v231 = 0LL;
                      v232 = v275;
                      char v217 = v283;
                      unsigned int v233 = v219;
                    }

                    else
                    {
                      v232 = (int)v214;
                      uint64_t v241 = 32;
                      int v231 = 31LL;
                      unsigned int v233 = v219;
LABEL_338:
                      v242 = (unsigned __int16 *)(v219 + 2 * ((int)v214 - v231));
                      uint64_t v243 = v220;
                      v244 = v241;
                      do
                      {
                        if (*(_DWORD *)(*(void *)&v243 + v213) != *v242)
                        {
                          --v241;
                          int v111 = v231-- > 1;
                          if (v111) {
                            goto LABEL_338;
                          }
                          int v231 = 0LL;
                          char v217 = v214;
                          goto LABEL_354;
                        }

                        ++v242;
                        --v244;
                        *(void *)&v243 += 4LL;
                      }

                      while (v244 > 1);
                      char v217 = (v214 - v231);
                      uint64_t v246 = v214;
                    }

void ubidi_setParaWithControls( uint64_t a1, const UChar *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, int *a9)
{
  if (a9 && *a9 <= 0)
  {
    if (a6 < 0 || a6 && (!a5 || !a8)) {
      *a9 = 1;
    }
    else {
      sub_180810170(a1, a2, a3, a4, 0LL, a5, a6, a7, a8, a9);
    }
  }

uint64_t ubidi_orderParagraphsLTR(uint64_t result, char a2)
{
  if (result) {
    *(_BYTE *)(result + 156) = a2;
  }
  return result;
}

uint64_t ubidi_isOrderParagraphsLTR(uint64_t a1)
{
  if (a1) {
    return *(char *)(a1 + 156);
  }
  else {
    return 0;
  }
}

uint64_t ubidi_getDirection(uint64_t result)
{
  if (result)
  {
    int v1 = *(void **)result;
    if (*(void *)result == result || v1 && (void *)*v1 == v1) {
      return *(unsigned int *)(result + 200);
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t ubidi_getText(uint64_t result)
{
  if (result)
  {
    int v1 = *(void **)result;
    if (*(void *)result == result || v1 && (void *)*v1 == v1) {
      return *(void *)(result + 8);
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t ubidi_getLength(uint64_t result)
{
  if (result)
  {
    int v1 = *(void **)result;
    if (*(void *)result == result || v1 && (void *)*v1 == v1) {
      return *(unsigned int *)(result + 16);
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t ubidi_getProcessedLength(uint64_t result)
{
  if (result)
  {
    int v1 = *(void **)result;
    if (*(void *)result == result || v1 && (void *)*v1 == v1) {
      return *(unsigned int *)(result + 20);
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t ubidi_getResultLength(uint64_t result)
{
  if (result)
  {
    int v1 = *(void **)result;
    if (*(void *)result == result || v1 && (void *)*v1 == v1) {
      return *(unsigned int *)(result + 24);
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t ubidi_getParaLevel(uint64_t result)
{
  if (result)
  {
    int v1 = *(void **)result;
    if (*(void *)result == result || v1 && (void *)*v1 == v1) {
      return *(unsigned __int8 *)(result + 157);
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t ubidi_countParagraphs(uint64_t result)
{
  if (result)
  {
    int v1 = *(void **)result;
    if (*(void *)result == result || v1 && (void *)*v1 == v1) {
      return *(unsigned int *)(result + 216);
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t ubidi_getParagraphByIndex(uint64_t result, unsigned int a2, int *a3, _DWORD *a4, _BYTE *a5, int *a6)
{
  if (a6 && *a6 <= 0)
  {
    uint64_t v6 = result;
    if (!result || (uint64_t result = *(void *)result, *(void *)v6 != v6) && (!result || *(void *)result != result))
    {
      int v8 = 27;
LABEL_13:
      *a6 = v8;
      return result;
    }

    if ((a2 & 0x80000000) != 0 || *(_DWORD *)(v6 + 216) <= (signed int)a2)
    {
      int v8 = 1;
      goto LABEL_13;
    }

    if (a2) {
      int v9 = *(_DWORD *)(*(void *)(result + 224) + 8LL * (a2 - 1));
    }
    else {
      int v9 = 0;
    }
    if (a3) {
      *a3 = v9;
    }
    if (a4) {
      *a4 = *(_DWORD *)(*(void *)(result + 224) + 8LL * a2);
    }
    if (a5)
    {
      if (*(_BYTE *)(result + 158) && v9 >= **(_DWORD **)(result + 224)) {
        uint64_t result = sub_18081000C(result, v9);
      }
      else {
        uint64_t result = *(unsigned __int8 *)(result + 157);
      }
      *a5 = result;
    }
  }

  return result;
}

uint64_t ubidi_getParagraph(uint64_t *a1, int a2, int *a3, _DWORD *a4, _BYTE *a5, int *a6)
{
  if (!a6 || *a6 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a1 || (uint64_t v7 = *a1, (uint64_t *)*a1 != a1) && (!v7 || *(void *)v7 != v7))
  {
    int v8 = 27;
LABEL_14:
    *a6 = v8;
    return 0xFFFFFFFFLL;
  }

  if (a2 < 0 || *(_DWORD *)(v7 + 20) <= a2)
  {
    int v8 = 1;
    goto LABEL_14;
  }

  int v9 = *(int **)(v7 + 224);
  LODWORD(v10) = -1;
  do
  {
    int v11 = *v9;
    v9 += 2;
    uint64_t v10 = (v10 + 1);
  }

  while (v11 <= a2);
  ubidi_getParagraphByIndex(v7, v10, a3, a4, a5, a6);
  return v10;
}

uint64_t ubidi_setClassCallback(uint64_t result, uint64_t a2, uint64_t a3, void *a4, void *a5, int *a6)
{
  if (a6 && *a6 <= 0)
  {
    if (result)
    {
      if (a4) {
        *a4 = *(void *)(result + 464);
      }
      if (a5) {
        *a5 = *(void *)(result + 472);
      }
      *(void *)(result + 464) = a2;
      *(void *)(result + 472) = a3;
    }

    else
    {
      *a6 = 1;
    }
  }

  return result;
}

uint64_t ubidi_getClassCallback(uint64_t result, void *a2, void *a3)
{
  if (result)
  {
    if (a2) {
      *a2 = *(void *)(result + 464);
    }
    if (a3) {
      *a3 = *(void *)(result + 472);
    }
  }

  return result;
}

uint64_t ubidi_getCustomizedClass(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = a2;
  double v3 = *(uint64_t (**)(void, uint64_t))(a1 + 464);
  if (!v3 || (LODWORD(result) = v3(*(void *)(a1 + 472), a2), (_DWORD)result == 23)) {
    LODWORD(result) = ubidi_getClass(v2);
  }
  else {
    return 10LL;
  }
}

uint64_t sub_180811C80(uint64_t a1, int *a2)
{
  uint64_t v120 = *MEMORY[0x1895F89C0];
  uint64_t v5 = *(void *)(a1 + 120);
  uint64_t v4 = *(void *)(a1 + 128);
  uint64_t v6 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(int *)(a1 + 20);
  int v9 = *(_DWORD *)(a1 + 204);
  if (*(_BYTE *)(a1 + 158) && (uint64_t v10 = *(int **)(a1 + 224), *v10 < 1))
  {
    unint64_t v12 = *(unsigned int *)(a1 + 216);
    if ((int)v12 > 0)
    {
      unint64_t v13 = 0LL;
      int v14 = v10 + 2;
      while (v12 - 1 != v13)
      {
        int v15 = *v14;
        v14 += 2;
        ++v13;
        if (v15 > 0)
        {
          BOOL v16 = v13 < v12;
          int v17 = v12 - 1;
          if (v16) {
            int v17 = v13;
          }
          goto LABEL_12;
        }
      }
    }

    int v17 = v12 - 1;
LABEL_12:
    uint64_t v11 = v10[2 * v17 + 1];
  }

  else
  {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 157);
  }

  uint64_t result = 0LL;
  *(_DWORD *)(a1 + 340) = 0;
  if (*a2 <= 0)
  {
    if ((*(void *)&v9 & 0x20E002LL) != 0 || (uint64_t result = 0LL, (v9 & 0x20) != 0) && (*(void *)&v9 & 0x7DDFD8LL) != 0)
    {
      if ((v9 & 0x1901825) == 0) {
        return 1LL;
      }
      uint64_t v96 = v6;
      if (*(int *)(a1 + 148) >= 2)
      {
        int v19 = *(_DWORD *)(a1 + 216);
        if (v19 >= 1)
        {
          uint64_t v20 = 0LL;
          for (uint64_t i = 0LL; i < v19; ++i)
          {
            uint64_t v22 = *(void *)(a1 + 224);
            if (v20) {
              int v23 = *(_DWORD *)(v22 + v20 - 8);
            }
            else {
              int v23 = 0;
            }
            int v24 = *(_DWORD *)(v22 + v20);
            if (v23 < v24)
            {
              memset((void *)(v6 + v23), *(_DWORD *)(v22 + v20 + 4), (v24 + ~v23) + 1LL);
              uint64_t v6 = v96;
              int v19 = *(_DWORD *)(a1 + 216);
            }

            v20 += 8LL;
          }
        }

        return 2LL;
      }

      uint64_t v95 = v4;
      if ((v9 & 0x79D800) == 0)
      {
        bzero(v97, 0x9F0uLL);
        sub_180813134(a1, (uint64_t)v97);
        int v68 = *(_DWORD *)(a1 + 216);
        if (v68 >= 1)
        {
          uint64_t v69 = 0LL;
          uint64_t v71 = v95;
          uint64_t v70 = v96;
          do
          {
            uint64_t v72 = *(void *)(a1 + 224);
            if (v69) {
              int v73 = *(_DWORD *)(v72 + 8 * v69 - 8);
            }
            else {
              int v73 = 0;
            }
            uint64_t v74 = (int *)(v72 + 8 * v69);
            uint64_t v75 = *v74;
            if (v73 < (int)v75)
            {
              int v76 = v74[1];
              uint64_t v77 = v73;
              uint64_t v78 = (_WORD *)(v7 + 2 + 2LL * v73);
              do
              {
                *(_BYTE *)(v70 + v77) = v76;
                int v79 = *(unsigned __int8 *)(v71 + v77);
                if (v79 != 18)
                {
                  if (v79 == 7)
                  {
                    if (v77 + 1 < v8 && (*(v78 - 1) != 13 || *v78 != 10))
                    {
                      uint64_t v98 = 0LL;
                      __int16 v99 = 0;
                      char v100 = v76;
                      v102[0] = v76 & 1;
                      char v101 = v76 & 1;
                      int v103 = v76 & 1;
                    }
                  }

                  else
                  {
                    uint64_t result = sub_180813284(v97, v77);
                    uint64_t v71 = v95;
                    uint64_t v70 = v96;
                    if (!(_DWORD)result)
                    {
                      *a2 = 7;
                      return result;
                    }
                  }
                }

                ++v77;
                ++v78;
              }

              while (v75 != v77);
              int v68 = *(_DWORD *)(a1 + 216);
            }

            ++v69;
          }

          while (v69 < v68);
        }

        return 2LL;
      }

      memset(v119, 0, sizeof(v119));
      __int128 v118 = 0u;
      __int128 v117 = 0u;
      __int128 v116 = 0u;
      __int128 v115 = 0u;
      __int128 v114 = 0u;
      __int128 v113 = 0u;
      __int128 v112 = 0u;
      __int128 v111 = 0u;
      __int128 v110 = 0u;
      __int128 v109 = 0u;
      __int128 v108 = 0u;
      __int128 v107 = 0u;
      __int128 v106 = 0u;
      __int128 v105 = 0u;
      uint64_t v25 = v11;
      bzero(v97, 0x9F0uLL);
      sub_180813134(a1, (uint64_t)v97);
      __int16 v104 = v25;
      if ((int)v8 < 1)
      {
        unsigned int v31 = 0;
        goto LABEL_146;
      }

      uint64_t v26 = v25;
      uint64_t v82 = v7;
      int v86 = 0;
      uint64_t v27 = 0LL;
      int v28 = 0;
      unsigned int v29 = 0;
      uint64_t v91 = 0LL;
      int v30 = 0;
      unsigned int v31 = 0;
      unsigned int v32 = 0;
      LOBYTE(v33) = -1;
      uint64_t v34 = v26;
      uint64_t v36 = v95;
      uint64_t v35 = v96;
      uint64_t v84 = v5;
      int v85 = v8;
      while (2)
      {
        if (v5 && (v33 & 0x80) != 0) {
          int v30 = *(unsigned __int16 *)(v5 + 2LL * v32);
        }
        int v37 = (char *)&unk_1809F2DB6 + (v30 & 0xF);
        int v38 = (_BYTE *)(v36 + v32);
        BOOL v39 = v30 <= 0;
        if (v30 > 0)
        {
          int v30 = v30 >> 4;
        }

        else
        {
          int v37 = (_BYTE *)(v36 + v32);
          int v30 = 0;
        }

        if (v39) {
          char v40 = -1;
        }
        else {
          char v40 = v33 + 1;
        }
        int v33 = v40;
        int v41 = *v37;
        switch(*v37)
        {
          case 7:
            if (*(_BYTE *)(a1 + 158) && (uint64_t v44 = *(_DWORD **)(a1 + 224), (signed int)v32 >= *v44))
            {
              unint64_t v59 = *(unsigned int *)(a1 + 216);
              if ((int)v59 <= 0)
              {
                int v64 = v59 - 1;
              }

              else
              {
                unint64_t v60 = 0LL;
                uint64_t v61 = v44 + 2;
                do
                {
                  if (v59 - 1 == v60)
                  {
                    BOOL v63 = 0;
                    LODWORD(v60) = *(_DWORD *)(a1 + 216);
                    goto LABEL_109;
                  }

                  signed int v62 = *v61;
                  v61 += 2;
                  ++v60;
                }

                while (v62 <= (int)v32);
                BOOL v63 = v60 < v59;
LABEL_109:
                int v64 = v59 - 1;
                if (v63) {
                  int v64 = v60;
                }
              }

              int v45 = v44[2 * v64 + 1];
            }

            else
            {
              LOBYTE(v45) = *(_BYTE *)(a1 + 157);
            }

            v31 |= 0x80u;
            *(_BYTE *)(v35 + v32) = v45;
            int v65 = v32 + 1;
            if ((int)(v32 + 1) >= (int)v8
              || *(_WORD *)(v82 + 2LL * v32) == 13 && *(_WORD *)(v82 + 2LL * v65) == 10)
            {
              goto LABEL_121;
            }

            if (*(_BYTE *)(a1 + 158) && v65 >= **(_DWORD **)(a1 + 224))
            {
              unsigned int v66 = v31;
              char v67 = v33;
              uint64_t v42 = sub_18081000C(a1, v65);
              LOBYTE(v33) = v67;
              unsigned int v31 = v66;
              uint64_t v36 = v95;
              uint64_t v35 = v96;
            }

            else
            {
              uint64_t v42 = *(unsigned __int8 *)(a1 + 157);
            }

            unsigned int v29 = 0;
            int v28 = 0;
            uint64_t v27 = 0LL;
            int v86 = 0;
            __int16 v104 = v42;
            uint64_t v98 = 0LL;
            __int16 v99 = 0;
            char v100 = v42;
            v102[0] = v42 & 1;
            char v101 = v42 & 1;
            LOBYTE(v26) = v42;
            int v103 = v42 & 1;
            goto LABEL_122;
          case 0xB:
          case 0xC:
          case 0xE:
          case 0xF:
            *(_BYTE *)(v35 + v32) = v26;
            else {
              uint64_t v42 = ((_DWORD)v34 + 2) & 0x7E;
            }
            v31 |= 0x40000u;
            if (v42 > 0x7D || v28 || (_DWORD)v27)
            {
              if (v28) {
                uint64_t v27 = v27;
              }
              else {
                uint64_t v27 = (v27 + 1);
              }
              goto LABEL_121;
            }

            if (v41 == 15 || v41 == 12) {
              uint64_t v42 = v42 | 0xFFFFFF80;
            }
            int v28 = 0;
            uint64_t v27 = 0LL;
            *(&v104 + ++v29) = v42;
            LODWORD(v9icu::UVector32::~UVector32(this + 1) = v32;
            BYTE4(v9icu::UVector32::~UVector32(this + 1) = v41;
            goto LABEL_122;
          case 0x10:
            v31 |= 0x40000u;
            *(_BYTE *)(v35 + v32) = v26;
            if (v28) {
              goto LABEL_121;
            }
            if ((_DWORD)v27)
            {
              int v28 = 0;
              uint64_t v27 = (v27 - 1);
            }

            else
            {
              if (v29 && (unsigned __int16)*(&v104 + v29) <= 0xFFu)
              {
                int v28 = 0;
                uint64_t v27 = 0LL;
                uint64_t v42 = (unsigned __int16)*(&v104 + --v29);
                LODWORD(v9icu::UVector32::~UVector32(this + 1) = v32;
                BYTE4(v9icu::UVector32::~UVector32(this + 1) = 16;
                goto LABEL_122;
              }

              int v28 = 0;
              uint64_t v27 = 0LL;
            }

LABEL_121:
            uint64_t v42 = v34;
            goto LABEL_122;
          case 0x12:
            *(_BYTE *)(v35 + v32) = v26;
            v31 |= 0x40000u;
            goto LABEL_121;
          case 0x14:
          case 0x15:
            int v43 = v31 | dword_1809F2D7C[v34 & 1];
            *(_BYTE *)(v35 + v32) = v34 & 0x7F;
            if ((v34 & 0x7F) == (v26 & 0x7F))
            {
              unsigned int v31 = v43 | 0x400;
            }

            else
            {
              int v94 = v30;
              int v54 = v40;
              int v88 = v28;
              unsigned int v90 = v27;
              sub_1808137CC((uint64_t)v97, v91, SBYTE4(v91), v26, v34);
              int v28 = v88;
              uint64_t v27 = v90;
              int v33 = v54;
              int v30 = v94;
              uint64_t v36 = v95;
              uint64_t v35 = v96;
              unsigned int v31 = v43 | 0x80000400;
            }

            if (v41 == 20) {
              uint64_t v42 = ((_BYTE)v34 + 2) & 0x7E;
            }
            else {
              uint64_t v42 = ((v34 & 0x7F) + 1) | 1;
            }
            uint64_t v5 = v84;
            if (v42 > 0x7D || v28 || (_DWORD)v27)
            {
              LODWORD(v8) = v85;
              if (v33 < 0) {
                *int v38 = 9;
              }
              else {
                *(_WORD *)(v84 + 2LL * v32) |= 15 << (4 * v33);
              }
              ++v28;
              uint64_t v42 = v34;
              LOBYTE(v26) = v34;
            }

            else
            {
              LODWORD(v8) = v85;
              if (v86 >= *(_DWORD *)(a1 + 340)) {
                *(_DWORD *)(a1 + 340) = v86 + 1;
              }
              int v28 = 0;
              uint64_t v27 = 0LL;
              v31 |= 1LL << v41;
              *(&v104 + ++v29) = v42 | 0x100;
              uint64_t v55 = &v97[4 * (int)v98];
              LODWORD(v98) = v98 + 1;
              __int16 v56 = *((_WORD *)v55 + 255);
              *((_WORD *)v55 + 263) = v56;
              *((_WORD *)v55 + 262) = v56;
              *((_BYTE *)v55 + 530) = v42 & 1;
              *((_BYTE *)v55 + 529) = v42 & 1;
              v55[133] = v42 & 1;
              *((_BYTE *)v55 + 514) = 10;
              *((_BYTE *)v55 + 528) = v42;
              v55[130] = 0;
              LOBYTE(v26) = v34;
              LODWORD(v9icu::UVector32::~UVector32(this + 1) = v32;
              BYTE4(v9icu::UVector32::~UVector32(this + 1) = v41;
              ++v86;
            }

            goto LABEL_122;
          case 0x16:
            int v93 = v30;
            if (((v26 ^ v34) & 0x7F) != 0)
            {
              char v48 = v34;
              unsigned int v49 = v31;
              int v50 = v40;
              uint64_t v51 = v27;
              uint64_t v52 = v5;
              int v53 = v28;
              sub_1808137CC((uint64_t)v97, v91, SBYTE4(v91), v26, v48);
              int v28 = v53;
              uint64_t v5 = v52;
              uint64_t v27 = v51;
              int v33 = v50;
              unsigned int v31 = v49 | 0x80000000;
            }

            if (v28)
            {
              --v28;
              uint64_t v36 = v95;
              uint64_t v35 = v96;
              int v30 = v93;
              if (v33 < 0) {
                *int v38 = 9;
              }
              else {
                *(_WORD *)(v5 + 2LL * v32) |= 15 << (4 * v33);
              }
              LODWORD(v8) = v85;
            }

            else
            {
              uint64_t v36 = v95;
              uint64_t v35 = v96;
              int v30 = v93;
              if (v86)
              {
                LODWORD(v8) = v85;
                do
                  unsigned int v57 = (unsigned __int16)*(&v104 + v29--);
                while (v57 < 0x100);
                int v28 = 0;
                uint64_t v27 = 0LL;
                v31 |= 0x400000u;
                --v86;
                uint64_t v58 = (int)v98 - 1LL;
                LODWORD(v98) = v98 - 1;
                v102[16 * v58] = 10;
                LODWORD(v9icu::UVector32::~UVector32(this + 1) = v32;
                BYTE4(v9icu::UVector32::~UVector32(this + 1) = 22;
              }

              else
              {
                LODWORD(v8) = v85;
                int v28 = 0;
                int v86 = 0;
                if (v33 < 0) {
                  *int v38 = 9;
                }
                else {
                  *(_WORD *)(v5 + 2LL * v32) |= 15 << (4 * v33);
                }
              }
            }

            uint64_t v42 = (unsigned __int16)*(&v104 + v29);
            v31 |= dword_1809F2D7C[v42 & 1] | 0x400;
            *(_BYTE *)(v35 + v32) = v42 & 0x7F;
            LOBYTE(v26) = v42;
            goto LABEL_122;
          default:
            int v87 = v28;
            unsigned int v89 = v27;
            int v92 = v30;
            char v83 = v40;
            unsigned int v46 = v31;
            if ((v34 & 0x7F) != (v26 & 0x7F))
            {
              sub_1808137CC((uint64_t)v97, v91, SBYTE4(v91), v26, v34);
              uint64_t v35 = v96;
              unsigned int v47 = &unk_1809F2DC8;
              if ((v34 & 0x80u) == 0LL) {
                unsigned int v47 = &unk_1809F2DD0;
              }
              v46 |= v47[v34 & 1] | 0x80000000;
            }

            *(_BYTE *)(v35 + v32) = v34;
            unsigned int v31 = v46 | (1LL << *v38);
            uint64_t v42 = v34;
            LOBYTE(v26) = v34;
            uint64_t v36 = v95;
            uint64_t v35 = v96;
            LOBYTE(v33) = v83;
            int v30 = v92;
            int v28 = v87;
            uint64_t v27 = v89;
LABEL_122:
            v32 += (v33 & 0x80) >> 7;
            uint64_t v34 = v42;
            if ((v31 & 0x7FDFD8) != 0) {
              v31 |= dword_1809F2D7C[*(_BYTE *)(a1 + 157) & 1];
            }
LABEL_146:
            int v80 = (v31 >> 7) & 1;
            if (!*(_BYTE *)(a1 + 156)) {
              int v80 = 0;
            }
            int v81 = v31 | v80;
            *(_DWORD *)(a1 + 204) = v81;
            if ((*(void *)&v81 & 0x20E002LL) != 0
              || (uint64_t result = 0LL, (v81 & 0x20) != 0) && (*(void *)&v81 & 0x7DDFD8LL) != 0)
            {
              if ((v81 & 0x1901825) != 0) {
                uint64_t result = 2LL;
              }
              else {
                uint64_t result = 1LL;
              }
            }

            break;
        }

        break;
      }
    }
  }

  return result;
}

  uint64_t v4 = v63;
LABEL_122:
  return v4;
}

        unsigned int v66 = 65792;
LABEL_124:
        *a4 = v66;
LABEL_125:
        *(_DWORD *)(a1 + 92) = *(_DWORD *)(a1 + 88);
        return;
      case 10:
        int v28 = icu::UMemory::operator new((uint64_t *)v11, (icu::UMemory *)0xE0, v10);
        if (!v28) {
          goto LABEL_123;
        }
        unsigned int v29 = v28;
        v28[1] = (uint64_t)off_18971B688;
        *int v28 = (uint64_t)off_1897298C0;
        *((_WORD *)v28 + 8) = 2;
        v28[9] = 0LL;
        v28[10] = 0LL;
        v28[11] = (uint64_t)off_18971B688;
        *((_WORD *)v28 + 48) = 2;
        v28[19] = (uint64_t)off_18971B688;
        *((_WORD *)v28 + 80) = 2;
        *((_WORD *)v28 + 108) = 0;
        *((_DWORD *)v28 + 55) = 0;
        icu::UnicodeString::operator=((UChar **)v28 + 1, v6);
        unsigned int v32 = (uint64_t)*v7;
        int v33 = v7;
        if (!*v7) {
          goto LABEL_106;
        }
        while (1)
        {
          unsigned int v31 = *(const char ***)(v32 + 72);
          uint64_t v7 = (uint64_t **)(v32 + 72);
          if (!v31) {
            break;
          }
          else {
            uint64_t v34 = *((unsigned __int16 *)v31 + 8) >> 5;
          }
          uint64_t v35 = icu::UnicodeString::doCompare((uint64_t)(v31 + 1), 0, v34, (uint64_t)"o", 0, 5);
          char v67 = "o";
          unsigned int v31 = &v67;
          unsigned int v32 = (uint64_t)*v7;
          if (!v35) {
            goto LABEL_105;
          }
        }

        unsigned int v32 = 0LL;
LABEL_105:
        v29[9] = v32;
LABEL_106:
        *uint64_t v7 = v29;
        uint64_t v58 = icu::UMemory::operator new((uint64_t *)v31, (icu::UMemory *)0x20, v30);
        if (!v58) {
          goto LABEL_123;
        }
        v58[2] = 0LL;
        v58[3] = 0LL;
        *uint64_t v58 = (uint64_t)off_1897298A0;
        v58[1] = 0LL;
        *((_DWORD *)v58 + 6) = 0;
        v29[10] = (uint64_t)v58;
        sub_180954B3C((uint64_t)v58, a4);
        *(void *)(a1 + 96) = v59;
        *(void *)(a1 + 104) = v29;
        uint64_t v7 = v33;
        goto LABEL_117;
      case 11:
        sub_180954AB4(*(void *)(a1 + 96), a4);
        goto LABEL_50;
      case 12:
        int v37 = *(void *)(*(void *)(a1 + 104) + 80LL);
        do
        {
          int v38 = v37;
          int v37 = *(void *)(v37 + 16);
        }

        while (v37);
        BOOL v39 = icu::UMemory::operator new(0LL, (icu::UMemory *)0x20, v10);
        if (!v39)
        {
          *(void *)(v38 + 16) = 0LL;
LABEL_123:
          unsigned int v66 = 7;
          goto LABEL_124;
        }

        _OWORD v39[2] = 0LL;
        v39[3] = 0LL;
        *BOOL v39 = (uint64_t)off_1897298A0;
        v39[1] = 0LL;
        *((_DWORD *)v39 + 6) = 0;
        *(void *)(v38 + 16) = v39;
        _OWORD v39[2] = 0LL;
        sub_180954B3C((uint64_t)v39, a4);
LABEL_50:
        *(void *)(a1 + 96) = v36;
        goto LABEL_117;
      case 13:
        *(_DWORD *)(*(void *)(a1 + 96) + 8LL) = 1;
        goto LABEL_117;
      case 14:
        *(_BYTE *)(*(void *)(a1 + 96) + 32LL) = 1;
        goto LABEL_117;
      case 15:
      case 16:
      case 19:
        goto LABEL_54;
      case 17:
        uint64_t v11 = *(void *)(a1 + 96);
        *(_BYTE *)(v11 + 32) = 1;
LABEL_54:
        char v40 = (icu::UVector32 *)icu::UMemory::operator new((uint64_t *)v11, (icu::UMemory *)0x20, v10);
        if (v40)
        {
          int v41 = v40;
          icu::UVector32::UVector32(v40, (UErrorCode *)a4);
          if (*a4 > 0)
          {
            (*(void (**)(icu::UVector32 *))(*(void *)v41 + 8LL))(v41);
            goto LABEL_117;
          }

          *(void *)(*(void *)(a1 + 96) + 24LL) = v41;
          int v54 = *((_DWORD *)v41 + 2);
          if (v54 >= -1 && *((_DWORD *)v41 + 3) > v54)
          {
LABEL_97:
            *(_DWORD *)(*((void *)v41 + 3) + 4LL * v54) = -1;
            ++*((_DWORD *)v41 + 2);
          }

          else if (icu::UVector32::expandCapacity(v41, v54 + 1, (UErrorCode *)a4))
          {
            int v54 = *((_DWORD *)v41 + 2);
            goto LABEL_97;
          }

          uint64_t v55 = *(void *)(*(void *)(a1 + 96) + 24LL);
          __int16 v56 = *(_DWORD *)(v55 + 8);
          if (v56 >= -1 && *(_DWORD *)(v55 + 12) > v56)
          {
LABEL_102:
            *(_DWORD *)(*(void *)(v55 + 24) + 4LL * v56) = -1;
            ++*(_DWORD *)(v55 + 8);
          }

          else if (icu::UVector32::expandCapacity( *(icu::UVector32 **)(*(void *)(a1 + 96) + 24LL),  v56 + 1,  (UErrorCode *)a4))
          {
            __int16 v56 = *(_DWORD *)(v55 + 8);
            goto LABEL_102;
          }

          *(void *)(a1 + 112) = 0x100000000LL;
          unsigned int v57 = *(void *)(a1 + 96);
          *(_DWORD *)(v57 + 16) = 0x7FFFFFFF;
          *(_BYTE *)(v57 + 33) = *(_DWORD *)(a1 + 88) != 19;
          goto LABEL_117;
        }

        if (*a4 <= 0) {
          *a4 = 7;
        }
        goto LABEL_117;
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
        *(_DWORD *)(*(void *)(a1 + 96) + 36LL) = v12;
        goto LABEL_117;
      case 28:
        sub_180954608((int *)a1, a4);
        if (*a4 > 0) {
          goto LABEL_125;
        }
        while (2)
        {
          uint64_t v42 = *(_DWORD *)(a1 + 88);
          if (v42 > 8)
          {
            if (v42 == 9)
            {
              *(_BYTE *)(*(void *)(a1 + 104) + 216LL) = 1;
            }

            else
            {
              if (v42 == 30) {
                goto LABEL_117;
              }
LABEL_70:
              uint64_t v44 = *(unsigned __int16 *)(a1 + 32);
              int v45 = (__int16)v44;
              unsigned int v46 = v44 >> 5;
              if (v45 >= 0) {
                unsigned int v47 = v46;
              }
              else {
                unsigned int v47 = *(unsigned int *)(a1 + 36);
              }
              icu::UnicodeString::doAppend(*(void *)(a1 + 104) + 88LL, (const icu::UnicodeString *)v6, 0, v47);
            }

            sub_180954608((int *)a1, a4);
            if (*a4 >= 1) {
              goto LABEL_125;
            }
            continue;
          }

          break;
        }

        if (v42 != 3 && v42 != 6) {
          goto LABEL_70;
        }
        goto LABEL_117;
      case 29:
        sub_180954608((int *)a1, a4);
        if (*a4 > 0) {
          goto LABEL_125;
        }
        while (2)
        {
          char v48 = *(_DWORD *)(a1 + 88);
          if (v48 > 8)
          {
            if (v48 == 9)
            {
              *(_BYTE *)(*(void *)(a1 + 104) + 217LL) = 1;
            }

            else
            {
              if (v48 == 30) {
                goto LABEL_117;
              }
LABEL_87:
              int v50 = *(unsigned __int16 *)(a1 + 32);
              uint64_t v51 = (__int16)v50;
              uint64_t v52 = v50 >> 5;
              if (v51 >= 0) {
                int v53 = v52;
              }
              else {
                int v53 = *(unsigned int *)(a1 + 36);
              }
              icu::UnicodeString::doAppend(*(void *)(a1 + 104) + 152LL, (const icu::UnicodeString *)v6, 0, v53);
            }

            sub_180954608((int *)a1, a4);
            if (*a4 >= 1) {
              goto LABEL_125;
            }
            continue;
          }

          break;
        }

        if (v48 != 3 && v48 != 6) {
          goto LABEL_87;
        }
        goto LABEL_117;
      default:
        goto LABEL_118;
    }
  }

uint64_t sub_180812740(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, unsigned int a5)
{
  uint64_t v7 = a2;
  uint64_t v9 = *(void *)(a1 + 120);
  uint64_t v8 = *(void *)(a1 + 128);
  if (*(_BYTE *)(a1 + 158))
  {
    uint64_t v10 = *(_DWORD **)(a1 + 224);
    if (*v10 <= (int)a2)
    {
      unint64_t v11 = *(unsigned int *)(a1 + 216);
      if ((int)v11 <= 0)
      {
        int v16 = v11 - 1;
      }

      else
      {
        unint64_t v12 = 0LL;
        unint64_t v13 = v10 + 2;
        while (v11 - 1 != v12)
        {
          int v14 = *v13;
          v13 += 2;
          ++v12;
          if (v14 > (int)a2)
          {
            BOOL v15 = v12 < v11;
            goto LABEL_13;
          }
        }

        BOOL v15 = 0;
        LODWORD(v12) = *(_DWORD *)(a1 + 216);
LABEL_13:
        int v16 = v11 - 1;
        if (v15) {
          int v16 = v12;
        }
      }

      if ((v10[2 * v16 + 1] & 1) == 0) {
        goto LABEL_5;
      }
LABEL_16:
      BOOL v84 = (*(_DWORD *)(a1 + 148) - 5) < 2;
      goto LABEL_17;
    }
  }

  if ((*(_BYTE *)(a1 + 157) & 1) != 0) {
    goto LABEL_16;
  }
LABEL_5:
  BOOL v84 = 0;
LABEL_17:
  int v90 = 0;
  int v92 = 0;
  int v94 = 0;
  uint64_t v91 = -1LL;
  int v93 = a2;
  uint64_t v17 = (int)a2;
  LOBYTE(v94) = *(_BYTE *)(*(void *)(a1 + 136) + (int)a2);
  int v18 = (uint64_t *)(*(void *)(a1 + 192) + 8LL * (v94 & 1));
  uint64_t v19 = *v18;
  uint64_t v20 = v18[2];
  v89[0] = v19;
  v89[1] = v20;
  int v88 = (void *)a1;
  uint64_t v86 = v8;
  if (!(_DWORD)a2)
  {
    int v24 = *(_DWORD *)(a1 + 168);
    if (v24 >= 1)
    {
      uint64_t v25 = *(void *)(a1 + 160);
      while (v24 >= 1)
      {
        uint64_t v26 = *(unsigned __int16 *)(v25 + 2LL * (v24 - 1));
        if ((v26 & 0xFC00) == 0xDC00)
        {
          if (v24 < 2)
          {
            int v24 = 0;
          }

          else
          {
            int v27 = *(unsigned __int16 *)(v25 + 2LL * (v24 - 2));
            int v28 = v27 & 0xFC00;
            unsigned int v29 = v26 + (v27 << 10) - 56613888;
            if (v28 == 55296) {
              v24 -= 2;
            }
            else {
              --v24;
            }
            if (v28 == 55296) {
              uint64_t v26 = v29;
            }
            else {
              uint64_t v26 = v26;
            }
          }
        }

        else
        {
          --v24;
        }

        unsigned __int8 CustomizedClass = ubidi_getCustomizedClass(a1, v26);
        int v31 = CustomizedClass;
        if (CustomizedClass > 6u)
        {
          uint64_t v7 = a2;
          a1 = (uint64_t)v88;
          uint64_t v8 = v86;
          if (v31 == 13)
          {
LABEL_144:
            a4 = 1;
            break;
          }

          if (v31 == 7) {
            break;
          }
        }

        else
        {
          uint64_t v8 = v86;
          uint64_t v7 = a2;
          if (!CustomizedClass)
          {
            a4 = CustomizedClass;
            a1 = (uint64_t)v88;
            break;
          }

          a1 = (uint64_t)v88;
          if (v31 == 1) {
            goto LABEL_144;
          }
        }
      }
    }
  }

  if (v9 && (unsigned int v21 = *(unsigned __int16 *)(v9 + 2 * v17), *(_WORD *)(v9 + 2 * v17)))
  {
    while ((v21 & 0xF) != 0xC)
    {
      BOOL v22 = v21 >= 0x10;
      v21 >>= 4;
      if (!v22) {
        goto LABEL_22;
      }
    }

    int v23 = *(unsigned __int8 *)(v8 + v17);
  }

  else
  {
LABEL_22:
    int v23 = *(unsigned __int8 *)(v8 + v17);
    if (v23 != 22) {
      goto LABEL_47;
    }
  }

  uint64_t v32 = *(unsigned int *)(a1 + 340);
  if ((v32 & 0x80000000) == 0)
  {
    uint64_t v33 = *(void *)(a1 + 344) + 16 * v32;
    int v34 = *(_DWORD *)v33;
    uint64_t v35 = *(unsigned int *)(v33 + 4);
    unsigned __int16 v36 = *(_WORD *)(v33 + 12);
    LODWORD(v33) = *(_DWORD *)(v33 + 8);
    int v90 = v34;
    int v92 = v33;
    *(_DWORD *)(a1 + 340) = v32 - 1;
    goto LABEL_51;
  }

uint64_t sub_180812E98(uint64_t result)
{
  if ((*(_DWORD *)(result + 204) & 0x7DDB80) == 0) {
    return result;
  }
  int v1 = *(_DWORD *)(result + 212);
  if (v1 < 1) {
    return result;
  }
  uint64_t v2 = *(void *)(result + 128);
  uint64_t v3 = *(void *)(result + 136);
  int v4 = *(unsigned __int8 *)(result + 156);
  do
  {
    unsigned int v5 = v1;
    for (int i = v1 - 1; ; --i)
    {
      int v7 = v5--;
      uint64_t v8 = v5;
      uint64_t v9 = 1LL << *(_BYTE *)(v2 + v5);
      if ((v9 & 0x7DDB80) == 0) {
        break;
      }
      if (v4 && (v9 & 0x80) != 0)
      {
        LOBYTE(v10) = 0;
      }

      else if (*(_BYTE *)(result + 158) && (unint64_t v11 = *(int **)(result + 224), *v11 < v7))
      {
        unint64_t v12 = *(unsigned int *)(result + 216);
        if ((int)v12 <= 0)
        {
          int v17 = v12 - 1;
        }

        else
        {
          unint64_t v13 = 0LL;
          int v14 = v11 + 2;
          while (v12 - 1 != v13)
          {
            int v15 = *v14;
            v14 += 2;
            ++v13;
            if (v15 >= v7)
            {
              BOOL v16 = v13 < v12;
              goto LABEL_19;
            }
          }

          BOOL v16 = 0;
          LODWORD(v13) = *(_DWORD *)(result + 216);
LABEL_19:
          int v17 = v12 - 1;
          if (v16) {
            int v17 = v13;
          }
        }

        int v10 = v11[2 * v17 + 1];
      }

      else
      {
        LOBYTE(v10) = *(_BYTE *)(result + 157);
      }

      *(_BYTE *)(v3 + v5) = v10;
      if (v7 <= 1) {
        return result;
      }
    }

    while (1)
    {
      uint64_t v18 = v8 - 1;
      uint64_t v19 = (v8 - 1);
      uint64_t v20 = 1LL << *(_BYTE *)(v2 + v19);
      if ((v20 & 0x5D800) != 0)
      {
        *(_BYTE *)(v3 + v19) = *(_BYTE *)(v3 + v8);
        goto LABEL_30;
      }

      if (v4 && (v20 & 0x80) != 0)
      {
        LOBYTE(v2icu::UVector32::~UVector32(this + 1) = 0;
        goto LABEL_46;
      }

      if ((v20 & 0x180) != 0) {
        break;
      }
LABEL_30:
      --v8;
    }

    if (*(_BYTE *)(result + 158) && (BOOL v22 = *(_DWORD **)(result + 224), *v22 < (int)v8))
    {
      unint64_t v23 = *(unsigned int *)(result + 216);
      if ((int)v23 <= 0)
      {
        int v28 = v23 - 1;
      }

      else
      {
        unint64_t v24 = 0LL;
        uint64_t v25 = v22 + 2;
        while (v23 - 1 != v24)
        {
          int v26 = *v25;
          v25 += 2;
          ++v24;
          if (v26 >= (int)v8)
          {
            BOOL v27 = v24 < v23;
            goto LABEL_43;
          }
        }

        BOOL v27 = 0;
        LODWORD(v24) = *(_DWORD *)(result + 216);
LABEL_43:
        int v28 = v23 - 1;
        if (v27) {
          int v28 = v24;
        }
      }

      int v21 = v22[2 * v28 + 1];
    }

    else
    {
      LOBYTE(v2icu::UVector32::~UVector32(this + 1) = *(_BYTE *)(result + 157);
    }

_DWORD *sub_180813088(_DWORD *result, int a2, int a3)
{
  unsigned int v5 = result;
  int v6 = result[108];
  if (!v6)
  {
    uint64_t result = uprv_malloc(0x50uLL);
    *((void *)v5 + 56) = result;
    if (!result) {
      goto LABEL_9;
    }
    int v6 = 10;
    v5[108] = 10;
  }

  int v7 = v5[109];
  uint64_t v8 = (_DWORD *)*((void *)v5 + 56);
  if (v7 < v6)
  {
LABEL_7:
    uint64_t v9 = &v8[2 * v7];
    *uint64_t v9 = a2;
    v9[1] = a3;
    ++v5[109];
    return result;
  }

  uint64_t result = uprv_realloc(*((void **)v5 + 56), 16LL * v6);
  *((void *)v5 + 56) = result;
  if (result)
  {
    v5[108] *= 2;
    int v7 = v5[109];
    uint64_t v8 = result;
    goto LABEL_7;
  }

  *((void *)v5 + 56) = v8;
LABEL_9:
  v5[111] = 7;
  return result;
}

uint64_t sub_180813134(uint64_t result, uint64_t a2)
{
  *(void *)a2 = result;
  *(_DWORD *)(a2 + 500) = 0;
  *(_DWORD *)(a2 + 508) = 0;
  int v2 = *(unsigned __int8 *)(result + 158);
  if (*(_BYTE *)(result + 158) && (uint64_t v3 = *(int **)(result + 224), *v3 < 1))
  {
    unint64_t v5 = *(unsigned int *)(result + 216);
    if ((int)v5 > 0)
    {
      unint64_t v6 = 0LL;
      int v7 = v3 + 2;
      while (v5 - 1 != v6)
      {
        int v8 = *v7;
        v7 += 2;
        ++v6;
        if (v8 > 0)
        {
          BOOL v9 = v6 < v5;
          int v10 = v5 - 1;
          if (v9) {
            int v10 = v6;
          }
          goto LABEL_12;
        }
      }
    }

    int v10 = v5 - 1;
LABEL_12:
    int v4 = v3[2 * v10 + 1];
  }

  else
  {
    LOBYTE(v4) = *(_BYTE *)(result + 157);
  }

  *(_BYTE *)(a2 + 512) = v4;
  if (v2 && (unint64_t v11 = *(int **)(result + 224), *v11 < 1))
  {
    unint64_t v13 = *(unsigned int *)(result + 216);
    if ((int)v13 > 0)
    {
      unint64_t v14 = 0LL;
      int v15 = v11 + 2;
      while (v13 - 1 != v14)
      {
        int v16 = *v15;
        v15 += 2;
        ++v14;
        if (v16 > 0)
        {
          BOOL v17 = v14 < v13;
          int v18 = v13 - 1;
          if (v17) {
            int v18 = v14;
          }
          goto LABEL_24;
        }
      }
    }

    int v18 = v13 - 1;
LABEL_24:
    int v12 = v11[2 * v18 + 1];
  }

  else
  {
    LOBYTE(v12) = *(_BYTE *)(result + 157);
  }

  int v19 = v12 & 1;
  *(_BYTE *)(a2 + 514) = v19;
  *(_BYTE *)(a2 + 513) = v19;
  *(_DWORD *)(a2 + 516) = v19;
  *(_DWORD *)(a2 + 504) = 0;
  uint64_t v20 = *(void *)(result + 80);
  if (v20)
  {
    unint64_t v21 = *(int *)(result + 40) / 0x18uLL;
  }

  else
  {
    uint64_t v20 = a2 + 8;
    LODWORD(v2icu::UVector32::~UVector32(this + 1) = 20;
  }

  *(void *)(a2 + 488) = v20;
  *(_DWORD *)(a2 + 496) = v21;
  int v22 = *(_DWORD *)(result + 148);
  BOOL v24 = v22 == 1 || v22 == 6;
  *(_BYTE *)(a2 + 2536) = v24;
  return result;
}

uint64_t sub_180813284(int *a1, int a2)
{
  uint64_t v4 = a1[125];
  unint64_t v5 = &a1[4 * v4];
  unint64_t v6 = v5 + 126;
  uint64_t v7 = *(void *)(*(void *)a1 + 128LL);
  uint64_t v8 = a2;
  int v9 = *(unsigned __int8 *)(v7 + a2);
  if (v9 != 10) {
    goto LABEL_49;
  }
  unsigned int v10 = *(unsigned __int16 *)(*(void *)(*(void *)a1 + 8LL) + 2LL * a2);
  unint64_t v11 = (unsigned __int16 *)v5 + 255;
  uint64_t v12 = *((unsigned __int16 *)v5 + 255);
  unint64_t v13 = (unsigned __int16 *)(v5 + 127);
  uint64_t v14 = *((unsigned __int16 *)v5 + 254);
  uint64_t v15 = 24 * v12;
  do
  {
    if (v12 <= v14)
    {
      if (!*(_WORD *)(*(void *)(*(void *)a1 + 8LL) + 2LL * a2)) {
        goto LABEL_49;
      }
      uint64_t v21 = *(void *)(*(void *)a1 + 128LL);
      unsigned __int16 BidiPairedBracket = u_getBidiPairedBracket(*(unsigned __int16 *)(*(void *)(*(void *)a1 + 8LL) + 2LL * a2));
      uint64_t v7 = v21;
      if (v10 == BidiPairedBracket) {
        goto LABEL_49;
      }
      unsigned __int16 v23 = BidiPairedBracket;
      int v24 = sub_180814410(v10);
      uint64_t v7 = v21;
      if (v24 != 1) {
        goto LABEL_49;
      }
      if (v23 == 12297)
      {
        uint64_t v25 = a1;
        int v26 = 9002;
      }

      else
      {
        if (v23 != 9002) {
          goto LABEL_48;
        }
        uint64_t v25 = a1;
        int v26 = 12297;
      }

      uint64_t result = sub_18081381C(v25, v26, a2);
      if (!(_DWORD)result) {
        return result;
      }
LABEL_48:
      uint64_t result = sub_18081381C(a1, v23, a2);
      uint64_t v7 = v21;
      if (!(_DWORD)result) {
        return result;
      }
      goto LABEL_49;
    }

    --v12;
    uint64_t v16 = *((void *)a1 + 61);
    int v17 = *(_DWORD *)(v16 + v15 - 20);
    v15 -= 24LL;
  }

  while (v17 != v10);
  __int16 v18 = *(_WORD *)(v16 + v15 + 12);
  if ((a1[4 * v4 + 128] & 1) == 0)
  {
    if ((v18 & 1) != 0)
    {
      unsigned int v60 = v6;
      uint64_t v61 = v13;
      uint64_t v58 = v11;
      LOBYTE(v20) = 0;
      BOOL v19 = 1;
      goto LABEL_19;
    }

uint64_t sub_1808137CC(uint64_t result, int a2, char a3, char a4, char a5)
{
  if (((1LL << a3) & 0x780000) == 0)
  {
    uint64_t v5 = result + 16LL * *(int *)(result + 500);
    *(_WORD *)(v5 + 510) = *(_WORD *)(v5 + 508);
    if ((a5 & 0x7Fu) <= (a4 & 0x7Fu)) {
      char v6 = a4;
    }
    else {
      char v6 = a5;
    }
    *(_BYTE *)(v5 + 512) = a5;
    int v7 = v6 & 1;
    *(_BYTE *)(v5 + 514) = v7;
    *(_BYTE *)(v5 + 513) = v7;
    *(_DWORD *)(v5 + 516) = v7;
    *(_DWORD *)(v5 + 504) = a2;
  }

  return result;
}

uint64_t sub_18081381C(int *a1, int a2, int a3)
{
  uint64_t v6 = a1[125];
  int v7 = &a1[4 * v6];
  uint64_t v8 = (_WORD *)v7 + 255;
  int v9 = *((unsigned __int16 *)v7 + 255);
  if (a1[124] <= v9)
  {
    unint64_t v11 = (void **)(*(void *)a1 + 80LL);
    uint64_t v12 = (_DWORD *)(*(void *)a1 + 40LL);
    uint64_t result = sub_18080FDAC(v11, v12, 1, 48 * v9);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v14 = (int *)*((void *)a1 + 61);
    if (v14 == a1 + 2) {
      memcpy(*v11, v14, 0x1E0uLL);
    }
    unsigned int v10 = (char *)*v11;
    *((void *)a1 + 6icu::UVector32::~UVector32(this + 1) = *v11;
    a1[124] = (int)*v12 / 0x18uLL;
    int v9 = (unsigned __int16)*v8;
  }

  else
  {
    unsigned int v10 = (char *)*((void *)a1 + 61);
  }

  uint64_t v15 = &v10[24 * v9];
  *(_DWORD *)uint64_t v15 = a3;
  *((_DWORD *)v15 + icu::UVector32::~UVector32(this + 1) = a2;
  *((_DWORD *)v15 + 4) = a1[4 * v6 + 129];
  *((_DWORD *)v15 + 2) = v7[126];
  *((_WORD *)v15 + 6) = 0;
  _WORD *v8 = v9 + 1;
  return 1LL;
}

uint64_t sub_180813918(uint64_t result, int a2, int a3, int a4)
{
  uint64_t v4 = (a2 + 1);
  uint64_t v5 = result + 16LL * *(int *)(result + 500);
  int v6 = *(unsigned __int16 *)(v5 + 510);
  if ((int)v4 < v6)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(*(void *)result + 128LL);
    unint64_t v11 = (unsigned __int16 *)(v5 + 510);
    uint64_t v12 = (int *)(*(void *)(result + 488) + 24LL * v4);
    do
    {
      if (v12[1] < 0)
      {
        if (v12[2] > a3) {
          return result;
        }
        uint64_t v13 = *v12;
        if ((int)v13 > a3)
        {
          if (v12[4] == a4) {
            return result;
          }
          *(_BYTE *)(v10 + v13) = a4;
          *(_BYTE *)(v10 - v12[1]) = a4;
          v12[1] = 0;
          sub_180813918(v9, v4);
          uint64_t result = sub_180813918(v9, v4);
          int v6 = *v11;
        }
      }

      uint64_t v4 = (v4 + 1);
      v12 += 6;
    }

    while ((int)v4 < v6);
  }

  return result;
}

void *sub_180813A00(void *result, uint64_t *a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v7 = result[17];
  uint64_t v8 = *((unsigned __int8 *)a2 + 28);
  unint64_t v9 = *(unsigned __int8 *)(*a2 + 8 * v8 + a3);
  *((_DWORD *)a2 + 7) = v9 & 0xF;
  int v11 = a4;
  uint64_t v14 = result;
  int v15 = *(unsigned __int8 *)(v6 + 8 * (v9 & 0xF) + 7);
  int v16 = a4;
  switch(*(_BYTE *)(v5 + (v9 >> 4)))
  {
    case 0:
      goto LABEL_67;
    case 1:
      goto LABEL_39;
    case 2:
      int v16 = *((_DWORD *)a2 + 4);
      goto LABEL_67;
    case 3:
      char v17 = *((_BYTE *)a2 + 36) + 1;
      goto LABEL_5;
    case 4:
      char v17 = *((_BYTE *)a2 + 36) + 2;
LABEL_5:
      uint64_t result = sub_180813E84(result, *((_DWORD *)a2 + 4), a4, v17);
      goto LABEL_67;
    case 5:
      int v18 = *((_DWORD *)a2 + 5);
      if ((v18 & 0x80000000) == 0) {
        uint64_t result = sub_180813088(result, v18, 1);
      }
      *((_DWORD *)a2 + 5) = -1;
      if (*((_DWORD *)v14 + 108) && (int v19 = *((_DWORD *)v14 + 109), v19 > *((_DWORD *)v14 + 110)))
      {
        uint64_t v20 = *((int *)a2 + 6);
        if ((int)v20 + 1 < v11)
        {
          uint64_t v21 = (_BYTE *)(v20 + v7 + 1);
          int v22 = ~(_DWORD)v20 + v11;
          do
          {
            *uint64_t v21 = (*v21 & 0xFE) - 2;
            ++v21;
            --v22;
          }

          while (v22);
          int v19 = *((_DWORD *)v14 + 109);
        }

        *((_DWORD *)v14 + 110) = v19;
        *((_DWORD *)a2 + 6) = -1;
      }

      else
      {
        *((_DWORD *)a2 + 6) = -1;
        int v16 = v11;
        if ((*(_BYTE *)(v6 + 8 * v8 + 7) & 1) != 0)
        {
          else {
            int v16 = *((_DWORD *)a2 + 4);
          }
        }
      }

      if (a3 != 5) {
        goto LABEL_67;
      }
      uint64_t result = v14;
      int v30 = v11;
      int v31 = 1;
      goto LABEL_66;
    case 6:
      a2[2] = -1LL;
      goto LABEL_18;
    case 7:
      if (a3 == 3 && *(_BYTE *)(result[16] + (int)a4) == 5 && *((_DWORD *)result + 37) != 6)
      {
        int v57 = *((_DWORD *)a2 + 5);
        if (v57 == -1)
        {
LABEL_18:
          *((_DWORD *)a2 + 6) = a5 - 1;
        }

        else
        {
          if ((v57 & 0x80000000) == 0)
          {
            sub_180813088(result, v57, 1);
            *((_DWORD *)a2 + 5) = -2;
          }

          uint64_t v27 = v14;
          int v28 = v11;
          int v29 = 1;
LABEL_30:
          uint64_t result = sub_180813088(v27, v28, v29);
        }
      }

      else if (*((_DWORD *)a2 + 5) == -1)
      {
        *((_DWORD *)a2 + 5) = a4;
      }

      goto LABEL_67;
    case 8:
      *((_DWORD *)a2 + 6) = a5 - 1;
      *((_DWORD *)a2 + 4) = -1;
      goto LABEL_67;
    case 9:
      uint64_t v23 = v7 - 1;
      int v24 = a4;
      break;
    case 0xA:
      sub_180813088(result, a4, 1);
      uint64_t v27 = v14;
      int v28 = v11;
      int v29 = 2;
      goto LABEL_30;
    case 0xB:
      *((_DWORD *)result + 109) = *((_DWORD *)result + 110);
      if (a3 != 5) {
        goto LABEL_67;
      }
      int v30 = a4;
      int v31 = 4;
LABEL_66:
      uint64_t result = sub_180813088(result, v30, v31);
      *((_DWORD *)v14 + 110) = *((_DWORD *)v14 + 109);
      goto LABEL_67;
    case 0xC:
      uint64_t v32 = *((int *)a2 + 4);
      if ((int)v32 < (int)a4)
      {
        unsigned __int8 v33 = *((_BYTE *)a2 + 36) + v15;
        int v34 = (unsigned __int8 *)(v7 + v32);
        uint64_t v35 = (int)a4 - v32;
        do
        {
          ++v34;
          --v35;
        }

        while (v35);
      }

      goto LABEL_38;
    case 0xD:
      if (*((_DWORD *)a2 + 4) < (int)a4)
      {
        int v36 = *((unsigned __int8 *)a2 + 36);
        int v37 = v36 + 3;
        uint64_t v38 = a4;
        do
        {
          uint64_t v39 = (int)v38 - 1LL;
          uint64_t v40 = (_BYTE *)(v7 + v39);
          int v41 = *(unsigned __int8 *)(v7 + v39);
          if (v37 == v41)
          {
            uint64_t v42 = (v38 << 32) - 0x100000000LL;
            unint64_t v43 = (v38 - 2);
            do
            {
              uint64_t result = (void *)v43;
              LODWORD(v44) = v39;
              *uint64_t v40 = v41 - 2;
              int v45 = *--v40;
              LOBYTE(v4icu::UVector32::~UVector32(this + 1) = v45;
              v42 -= 0x100000000LL;
              unint64_t v43 = (v43 - 1);
              LODWORD(v39) = v39 - 1;
            }

            while (v37 == v45);
            uint64_t v46 = ((uint64_t)(int)result << 32) + 0x100000000LL;
            int v47 = (unsigned __int8 *)(v7 + (int)result);
            do
            {
              int v48 = *v47--;
              v46 -= 0x100000000LL;
              uint64_t v44 = (v44 - 1);
            }

            while (v48 == v36);
            uint64_t v49 = v46 >> 32;
            int v41 = *(unsigned __int8 *)(v7 + (v46 >> 32));
            uint64_t v39 = v44;
          }

          else
          {
            uint64_t v49 = (int)v38 - 1LL;
          }

          if (v36 + 2 == v41) {
            char v50 = v36;
          }
          else {
            char v50 = v36 + 1;
          }
          *(_BYTE *)(v7 + v49) = v50;
          uint64_t v38 = v39;
        }

        while ((int)v39 > *((_DWORD *)a2 + 4));
      }

      goto LABEL_67;
    case 0xE:
      int v51 = *((_DWORD *)a2 + 4);
      if (v51 < (int)a4)
      {
        unsigned __int8 v52 = *((_BYTE *)a2 + 36) + 1;
        uint64_t v53 = (int)a4;
        uint64_t v54 = v7 - 1;
        do
        {
          unsigned int v55 = *(unsigned __int8 *)(v54 + v53);
          if (v55 > v52)
          {
            *(_BYTE *)(v54 + v53) = v55 - 2;
            int v51 = *((_DWORD *)a2 + 4);
          }

          --v53;
        }

        while (v53 > v51);
      }

      goto LABEL_67;
    default:
      abort();
  }

  while (1)
  {
    BOOL v25 = __OFSUB__(v24--, 1);
    if (v24 < 0 != v25) {
      break;
    }
    char v26 = *(_BYTE *)(v23 + a4);
    --v23;
    if ((v26 & 1) != 0)
    {
      uint64_t result = sub_180813088(result, v24, 4);
LABEL_38:
      *((_DWORD *)v14 + 110) = *((_DWORD *)v14 + 109);
      break;
    }
  }

void *sub_180813E84(void *result, int a2, int a3, char a4)
{
  if (a2 < a3)
  {
    int v4 = 0;
    int v5 = 0;
    uint64_t v6 = result[15];
    uint64_t v7 = (unsigned __int8 *)(result[16] + a2);
    uint64_t v8 = (_BYTE *)(result[17] + a2);
    unint64_t v9 = (unsigned __int16 *)(v6 + 2LL * a2);
    uint64_t v10 = a3 - (uint64_t)a2;
    char v11 = -1;
    do
    {
      if (v6 && v11 < 0) {
        int v5 = *v9;
      }
      uint64_t v12 = (unsigned __int8 *)&unk_1809F2DB6 + (v5 & 0xF);
      BOOL v13 = v5 <= 0;
      if (v5 > 0)
      {
        int v5 = v5 >> 4;
      }

      else
      {
        uint64_t v12 = v7;
        int v5 = 0;
      }

      if (v13) {
        char v11 = -1;
      }
      else {
        ++v11;
      }
      int v14 = *v12;
      v4 -= v14 == 22;
      if (!v4) {
        _BYTE *v8 = a4;
      }
      uint64_t result = (void *)(v14 & 0xFE);
      if ((_DWORD)result == 20) {
        ++v4;
      }
      ++v7;
      ++v8;
      ++v9;
      --v10;
    }

    while (v10);
  }

  return result;
}

uint64_t sub_180813F24(uint64_t result, int *a2)
{
  if (*a2 <= 0)
  {
    int v2 = (void *)result;
    utrie2_enum( (uint64_t)&off_189710FE0,  0LL,  (uint64_t (*)(uint64_t, uint64_t, void, uint64_t))sub_180814048,  result);
    for (uint64_t i = 0LL; i != 40; ++i)
      uint64_t result = ((uint64_t (*)(void, void, void))v2[2])( *v2,  dword_1809F31D8[i] & 0x1FFFFF,  (dword_1809F31D8[i] & 0x1FFFFFu) + 1);
    int v4 = &byte_1809F3278;
    uint64_t v5 = 2252LL;
    char v6 = 1;
    uint64_t v7 = 1568LL;
    do
    {
      char v8 = v6;
      if (v7 < v5)
      {
        int v9 = 0;
        uint64_t v10 = (v5 - v7 - 4) + 4LL;
        do
        {
          int v12 = *v4++;
          int v11 = v12;
          if (v12 != v9)
          {
            uint64_t result = ((uint64_t (*)(void, uint64_t))v2[1])(*v2, v7);
            int v9 = v11;
          }

          uint64_t v7 = (v7 + 1);
          --v10;
        }

        while (v10);
        if (v9) {
          uint64_t result = ((uint64_t (*)(void, uint64_t))v2[1])(*v2, v5);
        }
      }

      char v6 = 0;
      uint64_t v5 = 68900LL;
      uint64_t v7 = 68288LL;
      int v4 = ":<<@@=";
    }

    while ((v8 & 1) != 0);
  }

  return result;
}

uint64_t sub_180814048(uint64_t a1)
{
  return 1LL;
}

uint64_t sub_180814064(int a1)
{
  if (a1 > 4102)
  {
    if (a1 != 4103)
    {
      if (a1 == 4117) {
        return 2LL;
      }
      return 0xFFFFFFFFLL;
    }

    return 5LL;
  }

  else
  {
    if (a1 != 4096)
    {
      if (a1 == 4102) {
        return 103LL;
      }
      return 0xFFFFFFFFLL;
    }

    return 22LL;
  }

uint64_t ubidi_getClass(unsigned int a1)
{
  if (a1 >> 11 <= 0x1A)
  {
    unsigned int v1 = a1 >> 5;
LABEL_11:
    uint64_t v3 = (a1 & 0x1F) + 4 * word_1809F3788[v1];
    return word_1809F3788[v3] & 0x1F;
  }

  if (!HIWORD(a1))
  {
    if (a1 >> 10 >= 0x37) {
      int v2 = 0;
    }
    else {
      int v2 = 320;
    }
    unsigned int v1 = v2 + (a1 >> 5);
    goto LABEL_11;
  }

  if (HIWORD(a1) <= 0x10u)
  {
    unsigned int v1 = ((a1 >> 5) & 0x3F) + word_1809F3788[(a1 >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 3740LL;
  return word_1809F3788[v3] & 0x1F;
}

UBool u_isMirrored_0(UChar32 c)
{
  if (c >> 11 <= 0x1A)
  {
    unsigned int v1 = c >> 5;
LABEL_11:
    uint64_t v3 = (c & 0x1F) + 4 * word_1809F3788[v1];
    return (word_1809F3788[v3] >> 12) & 1;
  }

  if (!HIWORD(c))
  {
    else {
      int v2 = 320;
    }
    unsigned int v1 = v2 + (c >> 5);
    goto LABEL_11;
  }

  if (HIWORD(c) <= 0x10u)
  {
    unsigned int v1 = ((c >> 5) & 0x3F) + word_1809F3788[(c >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 3740LL;
  return (word_1809F3788[v3] >> 12) & 1;
}

UChar32 u_charMirror_0(UChar32 c)
{
  if (c >> 11 <= 0x1A)
  {
    unsigned int v1 = c >> 5;
LABEL_11:
    uint64_t v3 = (c & 0x1F) + 4 * word_1809F3788[v1];
    return sub_180814218(*(uint64_t *)&c, word_1809F3788[v3]);
  }

  if (!HIWORD(c))
  {
    else {
      int v2 = 320;
    }
    unsigned int v1 = v2 + (c >> 5);
    goto LABEL_11;
  }

  if (HIWORD(c) <= 0x10u)
  {
    unsigned int v1 = ((c >> 5) & 0x3F) + word_1809F3788[(c >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 3740LL;
  return sub_180814218(*(uint64_t *)&c, word_1809F3788[v3]);
}

uint64_t sub_180814218(uint64_t result, __int16 a2)
{
  int v2 = a2 >> 13;
  if (v2 != -4) {
    return (v2 + result);
  }
  uint64_t v3 = 0LL;
  while (1)
  {
    unint64_t v4 = dword_1809F31D8[v3];
    if ((v4 & 0x1FFFFF) == (_DWORD)result) {
      break;
    }
    return result;
  }

  return *(int *)((char *)dword_1809F31D8 + ((v4 >> 19) & 0x1FFC)) & 0x1FFFFF;
}

uint64_t sub_180814274(unsigned int a1)
{
  if (a1 >> 11 <= 0x1A)
  {
    int v1 = a1 >> 5;
LABEL_11:
    uint64_t v3 = (a1 & 0x1F) + 4 * word_1809F3788[v1];
    return (word_1809F3788[v3] >> 11) & 1;
  }

  if (!HIWORD(a1))
  {
    if (a1 >> 10 >= 0x37) {
      int v2 = 0;
    }
    else {
      int v2 = 320;
    }
    int v1 = v2 + (a1 >> 5);
    goto LABEL_11;
  }

  if (HIWORD(a1) <= 0x10u)
  {
    int v1 = ((a1 >> 5) & 0x3F) + word_1809F3788[(a1 >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 3740LL;
  return (word_1809F3788[v3] >> 11) & 1;
}

uint64_t sub_1808142E8(unsigned int a1)
{
  if (a1 >> 11 <= 0x1A)
  {
    int v1 = a1 >> 5;
LABEL_11:
    uint64_t v3 = (a1 & 0x1F) + 4 * word_1809F3788[v1];
    return (word_1809F3788[v3] >> 10) & 1;
  }

  if (!HIWORD(a1))
  {
    if (a1 >> 10 >= 0x37) {
      int v2 = 0;
    }
    else {
      int v2 = 320;
    }
    int v1 = v2 + (a1 >> 5);
    goto LABEL_11;
  }

  if (HIWORD(a1) <= 0x10u)
  {
    int v1 = ((a1 >> 5) & 0x3F) + word_1809F3788[(a1 >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 3740LL;
  return (word_1809F3788[v3] >> 10) & 1;
}

uint64_t sub_18081435C(unsigned int a1)
{
  if (a1 >> 11 <= 0x1A)
  {
    int v1 = a1 >> 5;
LABEL_11:
    uint64_t v3 = (a1 & 0x1F) + 4 * word_1809F3788[v1];
    return word_1809F3788[v3] >> 5;
  }

  if (!HIWORD(a1))
  {
    if (a1 >> 10 >= 0x37) {
      int v2 = 0;
    }
    else {
      int v2 = 320;
    }
    int v1 = v2 + (a1 >> 5);
    goto LABEL_11;
  }

  if (HIWORD(a1) <= 0x10u)
  {
    int v1 = ((a1 >> 5) & 0x3F) + word_1809F3788[(a1 >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 3740LL;
  return word_1809F3788[v3] >> 5;
}

uint64_t sub_1808143D0(int a1)
{
  int v1 = a1 - 1568;
  if ((a1 - 1568) < 0x2AC)
  {
    int v2 = &byte_1809F3278;
    return v2[v1];
  }

  int v1 = a1 - 68288;
  if ((a1 - 68288) <= 0x263)
  {
    int v2 = ":<<@@=";
    return v2[v1];
  }

  return 0LL;
}

uint64_t sub_180814410(unsigned int a1)
{
  if (a1 >> 11 <= 0x1A)
  {
    int v1 = a1 >> 5;
LABEL_11:
    uint64_t v3 = (a1 & 0x1F) + 4 * word_1809F3788[v1];
    return HIBYTE(word_1809F3788[v3]) & 3;
  }

  if (!HIWORD(a1))
  {
    if (a1 >> 10 >= 0x37) {
      int v2 = 0;
    }
    else {
      int v2 = 320;
    }
    int v1 = v2 + (a1 >> 5);
    goto LABEL_11;
  }

  if (HIWORD(a1) <= 0x10u)
  {
    int v1 = ((a1 >> 5) & 0x3F) + word_1809F3788[(a1 >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 3740LL;
  return HIBYTE(word_1809F3788[v3]) & 3;
}

UChar32 u_getBidiPairedBracket_0(UChar32 c)
{
  if (c >> 11 > 0x1A)
  {
    if (HIWORD(c))
    {
      if (HIWORD(c) > 0x10u)
      {
        uint64_t v3 = 3740LL;
        goto LABEL_12;
      }

      unsigned int v1 = ((c >> 5) & 0x3F) + word_1809F3788[(c >> 11) + 2080];
    }

    else
    {
      else {
        int v2 = 320;
      }
      unsigned int v1 = v2 + (c >> 5);
    }
  }

  else
  {
    unsigned int v1 = c >> 5;
  }

  uint64_t v3 = (c & 0x1F) + 4 * word_1809F3788[v1];
LABEL_12:
  if ((word_1809F3788[v3] & 0x300) != 0) {
    return sub_180814218(*(uint64_t *)&c, word_1809F3788[v3]);
  }
  return c;
}

uint64_t ubidi_setLine(uint64_t result, unsigned int a2, signed int a3, uint64_t a4, int *a5)
{
  if (a5 && *a5 <= 0)
  {
    uint64_t v6 = result;
    if (!result || *(void *)result != result)
    {
      int v7 = 27;
LABEL_15:
      *a5 = v7;
      return result;
    }

    if ((a2 & 0x80000000) != 0
      || (int v10 = a3 - a2, a3 <= (int)a2)
      || *(_DWORD *)(result + 20) < a3
      || !a4
      || (int Paragraph = ubidi_getParagraph((uint64_t *)result, a2, 0LL, 0LL, 0LL, a5),
          uint64_t result = ubidi_getParagraph((uint64_t *)v6, a3 - 1, 0LL, 0LL, 0LL, a5),
          Paragraph != (_DWORD)result))
    {
      int v7 = 1;
      goto LABEL_15;
    }

    uint64_t v13 = *(void *)(v6 + 8) + 2LL * a2;
    *(void *)a4 = 0LL;
    *(void *)(a4 + 8) = v13;
    *(_DWORD *)(a4 + 16) = v10;
    *(_DWORD *)(a4 + 20) = v10;
    *(_DWORD *)(a4 + 24) = v10;
    else {
      uint64_t result = *(unsigned __int8 *)(v6 + 157);
    }
    *(_BYTE *)(a4 + 157) = result;
    *(_DWORD *)(a4 + 216) = *(_DWORD *)(v6 + 216);
    *(void *)(a4 + 320) = 0LL;
    *(_DWORD *)(a4 + 204) = 0;
    *(void *)(a4 + 148) = *(void *)(v6 + 148);
    *(_DWORD *)(a4 + 456) = 0;
    if (*(int *)(v6 + 456) >= 1)
    {
      int v14 = 0;
      int v15 = (unsigned __int16 *)(*(void *)(v6 + 8) + 2LL * a2);
      signed int v16 = a2;
      do
      {
        int v17 = *v15++;
        unsigned int v18 = v17 - 8234;
        unsigned int v19 = v17 - 8294;
        if ((v17 & 0xFFFC) == 0x200C || v18 < 5 || v19 <= 3) {
          *(_DWORD *)(a4 + 456) = ++v14;
        }
        ++v16;
      }

      while (v16 < a3);
      *(_DWORD *)(a4 + 24) -= v14;
    }

    uint64_t v22 = *(void *)(v6 + 136);
    *(void *)(a4 + 128) = *(void *)(v6 + 128) + a2;
    *(void *)(a4 + 136) = v22 + a2;
    *(_DWORD *)(a4 + 312) = -1;
    int v23 = *(_DWORD *)(v6 + 200);
    if (v23 == 2)
    {
      uint64_t result = sub_1808147A0(a4);
      uint64_t v24 = *(unsigned int *)(a4 + 212);
      if ((_DWORD)v24)
      {
        int v25 = *(_BYTE *)(v22 + a2) & 1;
        if ((int)v24 < v10 && (*(_BYTE *)(a4 + 157) & 1) != v25)
        {
LABEL_45:
          *(_DWORD *)(a4 + 200) = 2;
LABEL_49:
          *(void *)a4 = v6;
          return result;
        }

        if ((_DWORD)v24 != 1)
        {
          char v26 = (char *)(a2 + v22 + 1);
          uint64_t v27 = v24 - 1;
          do
          {
            char v28 = *v26++;
            if ((v28 & 1) != v25) {
              goto LABEL_45;
            }
          }

          while (--v27);
        }
      }

      else
      {
        int v25 = *(_BYTE *)(a4 + 157) & 1;
      }

      *(_DWORD *)(a4 + 200) = v25;
      char v30 = *(_BYTE *)(a4 + 157);
      if (v25) {
        char v31 = v30 | 1;
      }
      else {
        char v31 = (v30 + 1) & 0xFE;
      }
      *(_BYTE *)(a4 + 157) = v31;
    }

    else
    {
      *(_DWORD *)(a4 + 200) = v23;
      signed int v29 = *(_DWORD *)(v6 + 212);
      if (v29 > (int)a2)
      {
        if (v29 >= a3) {
          *(_DWORD *)(a4 + 212) = v10;
        }
        else {
          *(_DWORD *)(a4 + 212) = v29 - a2;
        }
        goto LABEL_49;
      }
    }

    *(_DWORD *)(a4 + 212) = 0;
    goto LABEL_49;
  }

  return result;
}

uint64_t sub_1808147A0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 128);
  uint64_t v2 = *(int *)(result + 20);
  if (*(_BYTE *)(v2 + v1 - 1) != 7)
  {
    int v3 = v2 & ((int)v2 >> 31);
    unint64_t v4 = (char *)(*(unsigned int *)(result + 20) + v1 - 1);
    while (1)
    {
      BOOL v5 = __OFSUB__((_DWORD)v2, 1);
      LODWORD(v2) = v2 - 1;
      char v6 = *v4--;
      if (((1LL << v6) & 0x7DDB80) == 0)
      {
        int v3 = v2 + 1;
        break;
      }
    }

    LODWORD(v2) = v3 & (v3 >> 31);
    int v7 = (unsigned __int8 *)(*(void *)(result + 136) + v3 - 1LL);
    while (1)
    {
      BOOL v5 = __OFSUB__(v3--, 1);
      if (v3 < 0 != v5) {
        break;
      }
      int v8 = *v7--;
      if (v8 != *(unsigned __int8 *)(result + 157))
      {
        LODWORD(v2) = v3 + 1;
        break;
      }
    }
  }

  *(_DWORD *)(result + 212) = v2;
  return result;
}

uint64_t ubidi_getLevelAt(uint64_t a1, int a2)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1 == a1)
  {
    if ((a2 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    return 0LL;
  }

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  if (a2 < 0 || (void *)*v2 != v2) {
    return v3;
  }
LABEL_8:
  if (*(_DWORD *)(a1 + 20) <= a2) {
    return 0LL;
  }
  if (*(_DWORD *)(a1 + 200) == 2 && *(_DWORD *)(a1 + 212) > a2) {
    return *(unsigned __int8 *)(*(void *)(a1 + 136) + a2);
  }
  if (!*(_BYTE *)(a1 + 158) || **(_DWORD **)(a1 + 224) > a2) {
    return *(unsigned __int8 *)(a1 + 157);
  }
  return sub_18081000C(a1, a2);
}

char *ubidi_getLevels(uint64_t a1, int *a2)
{
  if (!a2 || *a2 > 0) {
    return 0LL;
  }
  if (!a1 || (BOOL v5 = *(void **)a1, *(void *)a1 != a1) && (!v5 || (void *)*v5 != v5))
  {
    uint64_t v3 = 0LL;
    int v6 = 27;
LABEL_9:
    *a2 = v6;
    return v3;
  }

  int v8 = *(_DWORD *)(a1 + 20);
  if (v8 <= 0)
  {
    uint64_t v3 = 0LL;
    int v6 = 1;
    goto LABEL_9;
  }

  size_t v9 = *(unsigned int *)(a1 + 212);
  if (v8 == (_DWORD)v9) {
    return *(char **)(a1 + 136);
  }
  if (!sub_18080FDAC((void **)(a1 + 72), (_DWORD *)(a1 + 36), *(char *)(a1 + 112), *(_DWORD *)(a1 + 20)))
  {
    uint64_t v3 = 0LL;
    int v6 = 7;
    goto LABEL_9;
  }

  uint64_t v3 = *(char **)(a1 + 72);
  if ((int)v9 >= 1)
  {
    int v10 = *(char **)(a1 + 136);
    if (v3 != v10) {
      memcpy(*(void **)(a1 + 72), v10, v9);
    }
  }

  memset(&v3[(int)v9], *(unsigned __int8 *)(a1 + 157), v8 - (int)v9);
  *(_DWORD *)(a1 + 212) = v8;
  *(void *)(a1 + 136) = v3;
  return v3;
}

uint64_t ubidi_getLogicalRun(uint64_t result, int a2, int *a3, _BYTE *a4)
{
  int v17 = 0;
  if (a2 < 0) {
    return result;
  }
  uint64_t v5 = result;
  if (*(_DWORD *)(result + 20) <= a2) {
    return result;
  }
  uint64_t result = ubidi_countRuns(result, &v17);
  if (v17 > 0) {
    return result;
  }
  int v8 = *(unsigned int **)(v5 + 320);
  if ((int)result < 1)
  {
    int v14 = 0;
    unsigned int v12 = *v8;
    if (a3) {
LABEL_15:
    }
      *a3 = v14;
  }

  else
  {
    int v9 = 0;
    uint64_t v10 = result - 1LL;
    int v11 = (int *)(v8 + 1);
    do
    {
      unsigned int v12 = *(v11 - 1);
      int v13 = *v11;
      int v14 = *v11 - v9 + (v12 & 0x7FFFFFFF);
      BOOL v16 = v14 > a2 && (int)(v12 & 0x7FFFFFFF) <= a2 || v10-- == 0;
      v11 += 3;
      int v9 = v13;
    }

    while (!v16);
    if (a3) {
      goto LABEL_15;
    }
  }

  if (a4)
  {
    if (*(_DWORD *)(v5 + 148) == 3)
    {
      uint64_t result = v12 >> 31;
    }

    else if (*(_DWORD *)(v5 + 200) == 2 && *(_DWORD *)(v5 + 212) > a2)
    {
      uint64_t result = *(unsigned __int8 *)(*(void *)(v5 + 136) + a2);
    }

    else if (*(_BYTE *)(v5 + 158) && **(_DWORD **)(v5 + 224) <= a2)
    {
      uint64_t result = sub_18081000C(v5, a2);
    }

    else
    {
      uint64_t result = *(unsigned __int8 *)(v5 + 157);
    }

    *a4 = result;
  }

  return result;
}

uint64_t ubidi_countRuns(uint64_t a1, int *a2)
{
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  if (*a2 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a1 || (unint64_t v4 = *(void **)a1, *(void *)a1 != a1) && (!v4 || (void *)*v4 != v4))
  {
    *a2 = 27;
    return 0xFFFFFFFFLL;
  }

  sub_180814B7C(a1);
  if (*a2 > 0) {
    return 0xFFFFFFFFLL;
  }
  return *(unsigned int *)(a1 + 312);
}

uint64_t sub_180814B7C(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 312) & 0x80000000) == 0) {
    return 1LL;
  }
  if (*(_DWORD *)(a1 + 200) != 2)
  {
    int v12 = *(unsigned __int8 *)(a1 + 157);
    *(void *)(a1 + 320) = a1 + 328;
    *(_DWORD *)(a1 + 312) = 1;
    *(_DWORD *)(a1 + 328) = v12 << 31;
    *(_DWORD *)(a1 + 332) = *(_DWORD *)(a1 + 20);
    goto LABEL_17;
  }

  int v3 = *(_DWORD *)(a1 + 20);
  unint64_t v4 = *(unsigned __int8 **)(a1 + 136);
  uint64_t v5 = *(unsigned int *)(a1 + 212);
  if ((int)v5 < 1)
  {
    unsigned int v7 = 0;
    goto LABEL_35;
  }

  uint64_t v6 = 0LL;
  unsigned int v7 = 0;
  unsigned __int8 v8 = -2;
  do
  {
    int v9 = v4[v6];
    if (v9 != v8) {
      ++v7;
    }
    ++v6;
    unsigned __int8 v8 = v9;
  }

  while (v5 != v6);
  if (v7 == 1 && v3 == (_DWORD)v5)
  {
    int v11 = *v4;
    *(void *)(a1 + 320) = a1 + 328;
    *(_DWORD *)(a1 + 312) = 1;
    *(_DWORD *)(a1 + 328) = v11 << 31;
    *(_DWORD *)(a1 + 332) = v3;
LABEL_17:
    *(_DWORD *)(a1 + 336) = 0;
LABEL_18:
    uint64_t v13 = *(unsigned int *)(a1 + 436);
    if ((int)v13 >= 1)
    {
      int v14 = *(int **)(a1 + 448);
      int v15 = &v14[2 * v13];
      do
      {
        uint64_t v16 = *(void *)(a1 + 320) + 12LL * (int)sub_180815104(a1, *v14);
        *(_DWORD *)(v16 + 8) |= v14[1];
        v14 += 2;
      }

      while (v14 < v15);
    }

    if (*(int *)(a1 + 456) >= 1)
    {
      uint64_t v17 = *(int *)(a1 + 20);
      if ((int)v17 >= 1)
      {
        int v18 = 0;
        unsigned int v19 = *(unsigned __int16 **)(a1 + 8);
        uint64_t v20 = &v19[v17];
        do
        {
          int v21 = *v19;
          int v22 = v21 & 0xFFFC;
          unsigned int v23 = v21 - 8234;
          unsigned int v24 = v21 - 8294;
          BOOL v26 = v22 != 8204 && v23 >= 5 && v24 > 3;
          if (!v26)
          {
            uint64_t v27 = *(void *)(a1 + 320) + 12LL * (int)sub_180815104(a1, v18);
            --*(_DWORD *)(v27 + 8);
          }

          ++v19;
          ++v18;
        }

        while (v19 < v20);
      }
    }

    return 1LL;
  }

void *ubidi_getVisualRun(void *result, unsigned int a2, int *a3, int *a4)
{
  if (result)
  {
    unsigned int v7 = result;
    unsigned __int8 v8 = (void *)*result;
    if (((void *)*result == result || v8 && (void *)*v8 == v8)
      && (sub_180814B7C((uint64_t)result), (a2 & 0x80000000) == 0)
      && *((_DWORD *)v7 + 78) > (signed int)a2)
    {
      uint64_t v9 = v7[40];
      unsigned int v10 = *(_DWORD *)(v9 + 12LL * a2);
      if (a3) {
        *a3 = v10 & 0x7FFFFFFF;
      }
      if (a4)
      {
        if (a2) {
          int v11 = *(_DWORD *)(v9 + 12LL * a2 + 4) - *(_DWORD *)(v9 + 12LL * (a2 - 1) + 4);
        }
        else {
          int v11 = *(_DWORD *)(v9 + 4);
        }
        *a4 = v11;
      }

      return (void *)(v10 >> 31);
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_180815104(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 312);
  if ((int)v2 < 1) {
LABEL_6:
  }
    abort();
  uint64_t result = 0LL;
  int v5 = 0;
  uint64_t v6 = (int *)(*(void *)(a1 + 320) + 4LL);
  while (1)
  {
    int v7 = *v6;
    int v8 = *(v6 - 1) & 0x7FFFFFFF;
    if (v8 <= a2 && v7 - v5 + v8 > a2) {
      return result;
    }
    v6 += 3;
    ++result;
    int v5 = v7;
    if (v2 == result) {
      goto LABEL_6;
    }
  }

uint64_t ubidi_reorderLogical(uint64_t result, int a2, uint64_t a3)
{
  if (a3)
  {
    if (result)
    {
      int v3 = a2 - 1;
      if (a2 >= 1)
      {
        uint64_t v4 = 0LL;
        LOBYTE(v5) = 0;
        LOBYTE(v7) = 126;
        while (1)
        {
          unsigned int v8 = *(unsigned __int8 *)(result + (v3 + v4));
          if (v8 > 0x7E) {
            break;
          }
          else {
            int v7 = *(unsigned __int8 *)(result + (v3 + v4));
          }
          else {
            int v5 = *(unsigned __int8 *)(result + (v3 + v4));
          }
          --v4;
          if (a2 + 1LL + v4 <= 1)
          {
            uint64_t v9 = a2;
            do
            {
              BOOL v10 = v9-- <= 1;
              *(_DWORD *)(a3 + 4LL * v9) = v9;
            }

            while (!v10);
            if (v7 != v5 || (v7 & 1) != 0)
            {
              unsigned int v11 = v7 | 1;
              uint64_t v12 = a2;
              do
              {
                uint64_t v13 = 0LL;
                do
                {
                  uint64_t v14 = (int)v13;
                  int v15 = 2 * v13;
                  uint64_t v16 = v13 << 32;
                  uint64_t v17 = (int)v13 + 1LL;
                  int v18 = -2 * v13;
                  while (*(unsigned __int8 *)(result + v14) < v5)
                  {
                    ++v14;
                    v15 += 2;
                    v18 -= 2;
                    LODWORD(v13) = v13 + 1;
                    v16 += 0x100000000LL;
                    ++v17;
                    if (v14 >= v12) {
                      goto LABEL_29;
                    }
                  }

                  do
                  {
                    int v19 = v18;
                    int v20 = v13;
                    uint64_t v21 = v16;
                    if (v17 >= v12) {
                      break;
                    }
                    unsigned int v22 = *(unsigned __int8 *)(result + v17);
                    --v18;
                    LODWORD(v13) = v13 + 1;
                    v16 += 0x100000000LL;
                    ++v17;
                  }

                  while (v22 >= v5);
                  do
                  {
                    *(_DWORD *)(a3 + 4 * v14) = -v19 - *(_DWORD *)(a3 + 4 * v14);
                    BOOL v10 = v14++ < v21 >> 32;
                  }

                  while (v10);
                  if (v3 == v20) {
                    break;
                  }
                  uint64_t v13 = (v20 + 2);
                }

                while ((int)v13 < a2);
LABEL_29:
                LOBYTE(v5) = v5 - 1;
              }

              while (v11 <= v5);
            }

            return result;
          }
        }
      }
    }
  }

  return result;
}

uint64_t ubidi_reorderVisual(uint64_t result, int a2, uint64_t a3)
{
  if (a3)
  {
    if (result)
    {
      int v3 = a2 - 1;
      if (a2 >= 1)
      {
        uint64_t v4 = 0LL;
        LOBYTE(v5) = 0;
        LOBYTE(v7) = 126;
        while (1)
        {
          unsigned int v8 = *(unsigned __int8 *)(result + (v3 + v4));
          if (v8 > 0x7E) {
            break;
          }
          else {
            int v7 = *(unsigned __int8 *)(result + (v3 + v4));
          }
          else {
            int v5 = *(unsigned __int8 *)(result + (v3 + v4));
          }
          --v4;
          if (a2 + 1LL + v4 <= 1)
          {
            uint64_t v9 = a2;
            do
            {
              BOOL v10 = v9-- <= 1;
              *(_DWORD *)(a3 + 4LL * v9) = v9;
            }

            while (!v10);
            if (v7 != v5 || (v7 & 1) != 0)
            {
              unsigned int v11 = v7 | 1;
              uint64_t v12 = a2;
              int v13 = -a2;
              do
              {
                int v14 = 0;
                do
                {
                  uint64_t v15 = 0LL;
                  uint64_t v16 = v14;
                  while (*(unsigned __int8 *)(result + v16) < v5)
                  {
                    ++v16;
                    ++v15;
                    if (v16 >= v12) {
                      goto LABEL_32;
                    }
                  }

                  uint64_t v17 = v15;
                  do
                  {
                    uint64_t v18 = v17;
                    if (v14 + v17 + 1 >= v12) {
                      break;
                    }
                    ++v17;
                  }

                  while (*(unsigned __int8 *)(result + 1 + v14 + v18) >= v5);
                  if ((int)v16 < v14 + (int)v18)
                  {
                    uint64_t v19 = a3 + 4LL * v14;
                    uint64_t v20 = v18;
                    do
                    {
                      int v21 = *(_DWORD *)(v19 + 4 * v15);
                      *(_DWORD *)(v19 + 4 * v15) = *(_DWORD *)(v19 + 4 * v20);
                      *(_DWORD *)(v19 + 4 * v20) = v21;
                      ++v15;
                      --v20;
                    }

                    while (v14 + v15 < v20 + v14);
                  }

                  if (v13 + v14 + (_DWORD)v18 == -1) {
                    break;
                  }
                  v14 += v18 + 2;
                }

                while (v14 < a2);
LABEL_32:
                LOBYTE(v5) = v5 - 1;
              }

              while (v11 <= v5);
            }

            return result;
          }
        }
      }
    }
  }

  return result;
}

uint64_t ubidi_getVisualIndex(uint64_t a1, uint64_t a2, int *a3)
{
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  if (*a3 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a1 || (unsigned int v5 = a2, v6 = *(void **)a1, *(void *)a1 != a1) && (!v6 || (void *)*v6 != v6))
  {
    int v7 = 27;
LABEL_24:
    *a3 = v7;
    return 0xFFFFFFFFLL;
  }

  if ((a2 & 0x80000000) != 0 || (int v9 = *(_DWORD *)(a1 + 20), v9 <= (int)a2))
  {
    int v7 = 1;
    goto LABEL_24;
  }

  int v10 = *(_DWORD *)(a1 + 200);
  uint64_t result = a2;
  if (v10)
  {
    if (v10 == 1)
    {
      uint64_t result = (v9 + ~(_DWORD)a2);
    }

    else
    {
      if (!sub_180814B7C(a1))
      {
        int v7 = 7;
        goto LABEL_24;
      }

      uint64_t v16 = *(unsigned int *)(a1 + 312);
      int v17 = 0;
      uint64_t v18 = (int *)(*(void *)(a1 + 320) + 4LL);
      uint64_t result = 0xFFFFFFFFLL;
      while (1)
      {
        int v20 = *(v18 - 1);
        int v19 = *v18;
        signed int v21 = v5 - (v20 & 0x7FFFFFFF);
        if ((v21 & 0x80000000) == 0 && v21 < v19 - v17) {
          break;
        }
        v18 += 3;
        int v17 = v19;
        if (!--v16) {
          return result;
        }
      }

      if (v20 >= 0) {
        uint64_t result = (v21 + v17);
      }
      else {
        uint64_t result = (v19 + ~v21);
      }
    }
  }

  if (*(int *)(a1 + 436) < 1)
  {
    if (*(int *)(a1 + 456) >= 1)
    {
      uint64_t v22 = *(void *)(a1 + 8);
      int v23 = *(unsigned __int16 *)(v22 + 2LL * v5);
      int v24 = v23 & 0xFFFC;
      unsigned int v25 = v23 - 8234;
      unsigned int v26 = v23 - 8294;
      if (v24 == 8204 || v25 < 5 || v26 < 4) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v29 = *(int **)(a1 + 320);
      int v30 = v29[1];
      int v31 = v29[2];
      if ((int)result >= v30)
      {
        uint64_t v32 = 0LL;
        int v34 = 0;
        int v35 = v29 + 5;
        do
        {
          int v33 = v30;
          v34 -= v31;
          ++v32;
          int v30 = *(v35 - 1);
          int v31 = *v35;
          v35 += 3;
        }

        while ((int)result >= v30);
      }

      else
      {
        uint64_t v32 = 0LL;
        int v33 = 0;
        int v34 = 0;
      }

      if (v31)
      {
        int v36 = v29[3 * v32];
        int v37 = v30 - v33 + (v36 & 0x7FFFFFFF);
        int v38 = v36 < 0 ? v5 + 1 : v36;
        int v39 = v36 < 0 ? v37 : v5;
        if (v38 < v39)
        {
          uint64_t v40 = (unsigned __int16 *)(v22 + 2LL * v38);
          uint64_t v41 = v39 - (uint64_t)v38;
          do
          {
            int v43 = *v40++;
            int v42 = v43;
            unsigned int v44 = v43 - 8234;
            BOOL v45 = (v43 & 0xFFFC) != 0x200C && v44 >= 5;
            unsigned int v46 = v42 - 8294;
            if (!v45 || v46 < 4) {
              ++v34;
            }
            --v41;
          }

          while (v41);
        }
      }

      return (result - v34);
    }
  }

  else
  {
    unsigned int v11 = *(_DWORD **)(a1 + 320);
    int v12 = v11[2];
    int v13 = (v12 & 5) != 0;
    if ((int)result >= v11[1])
    {
      int v14 = v11 + 5;
      do
      {
        if ((v12 & 0xA) != 0) {
          ++v13;
        }
        int v15 = *(v14 - 1);
        int v12 = *v14;
        if ((*v14 & 5) != 0) {
          ++v13;
        }
        v14 += 3;
      }

      while ((int)result >= v15);
    }

    return (v13 + result);
  }

  return result;
}

uint64_t ubidi_getLogicalIndex(uint64_t a1, uint64_t a2, int *a3)
{
  if (!a3 || *a3 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a1 || (uint64_t v5 = a2, v6 = *(void **)a1, *(void *)a1 != a1) && (!v6 || (void *)*v6 != v6))
  {
    int v7 = 27;
LABEL_23:
    *a3 = v7;
    return 0xFFFFFFFFLL;
  }

  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(a1 + 24) <= (int)a2)
  {
    int v7 = 1;
    goto LABEL_23;
  }

  if (!*(_DWORD *)(a1 + 436) && !*(_DWORD *)(a1 + 456))
  {
    int v21 = *(_DWORD *)(a1 + 200);
    if (!v21) {
      return v5;
    }
    if (v21 == 1) {
      return (*(_DWORD *)(a1 + 20) + ~(_DWORD)a2);
    }
  }

  if (!sub_180814B7C(a1))
  {
    int v7 = 7;
    goto LABEL_23;
  }

  unsigned int v8 = *(int **)(a1 + 320);
  int v9 = *(_DWORD *)(a1 + 312);
  if (*(int *)(a1 + 436) < 1)
  {
    if (*(int *)(a1 + 456) >= 1)
    {
      int v16 = v8[1];
      int v17 = v8[2];
      if (v16 + v17 <= (int)v5)
      {
        uint64_t v18 = 0LL;
        int v20 = 0;
        uint64_t v22 = v8 + 5;
        do
        {
          int v19 = v16;
          v20 -= v17;
          ++v18;
          int v16 = *(v22 - 1);
          int v17 = *v22;
          int v23 = v16 - v20 + *v22;
          v22 += 3;
        }

        while (v23 <= (int)v5);
      }

      else
      {
        uint64_t v18 = 0LL;
        int v19 = 0;
        int v20 = 0;
      }

      if (v17 && v16 - v19 >= 1)
      {
        int v24 = 0;
        int v25 = v8[3 * v18];
        int v26 = v25 & 0x7FFFFFFF;
        int v27 = ~v19 + v16;
        do
        {
          int v28 = v26 + v24;
          if (v25 < 0) {
            int v28 = v26 + v27;
          }
          int v29 = *(unsigned __int16 *)(*(void *)(a1 + 8) + 2LL * v28);
          BOOL v30 = (v29 & 0xFFFC) != 0x200C && (v29 - 8234) >= 5;
          unsigned int v31 = v29 - 8294;
          if (!v30 || v31 < 4) {
            ++v20;
          }
          int v33 = v19 + v24++;
        }

        while (v33 != v20 + (_DWORD)v5 && v27-- != 0);
      }

      LODWORD(v5) = v20 + v5;
    }
  }

  else
  {
    int v10 = 0;
    int v11 = 0;
    for (int i = v8 + 2; ; i += 3)
    {
      int v13 = *(i - 1);
      int v14 = *i;
      if ((*i & 5) != 0)
      {
        ++v10;
      }

      int v11 = v13;
      if ((v14 & 0xA) != 0)
      {
        if (v10 + v13 == (_DWORD)v5) {
          return 0xFFFFFFFFLL;
        }
        ++v10;
        int v11 = v13;
      }
    }

    LODWORD(v5) = v5 - v10;
  }

  if (v9 >= 11)
  {
    int v43 = 0;
    do
    {
      while (1)
      {
        int v44 = v9 + v43;
        int v45 = v9 + v43 < 0 != __OFADD__(v9, v43) ? v44 + 1 : v9 + v43;
        int v37 = v45 >> 1;
        int v43 = v37 + 1;
      }

      uint64_t v39 = (uint64_t)v45 >> 1;
      int v9 = v37;
    }

    while ((int)v5 < v8[3 * (int)v39 - 2]);
  }

  else
  {
    int v35 = v8 + 1;
    uint64_t v36 = 0xFFFFFFFF00000000LL;
    int v37 = -1;
    do
    {
      int v38 = *v35;
      v35 += 3;
      v36 += 0x100000000LL;
      ++v37;
    }

    while ((int)v5 >= v38);
    uint64_t v39 = v36 >> 32;
  }

  int v40 = v8[3 * (int)v39];
  if (v40 < 0) {
    return (v40 & 0x7FFFFFFFu) + ~(_DWORD)v5 + v8[3 * (int)v39 + 1];
  }
  BOOL v41 = __OFSUB__(v37, 1);
  int v42 = v37 - 1;
  if (v42 < 0 == v41) {
    LODWORD(v5) = v5 - v8[3 * v42 + 1];
  }
  return (v5 + v40);
}

uint64_t ubidi_getLogicalMap(uint64_t result, char *a2, int *a3)
{
  if (a3)
  {
    if (*a3 <= 0)
    {
      uint64_t v5 = result;
      uint64_t result = ubidi_countRuns(result, a3);
      if (*a3 <= 0)
      {
        if (a2)
        {
          uint64_t v6 = *(unsigned int *)(v5 + 20);
          if ((int)v6 >= 1)
          {
            uint64_t v7 = *(void *)(v5 + 320);
            LODWORD(v8) = *(_DWORD *)(v5 + 312);
            if ((int)v8 >= 1)
            {
              uint64_t v9 = 0LL;
              signed int v10 = 0;
              do
              {
                int v11 = (unsigned int *)(v7 + 12 * v9);
                uint64_t v13 = *v11;
                signed int v12 = v11[1];
                if ((v13 & 0x80000000) != 0)
                {
                  int v16 = &a2[4 * (int)(v12 - v10 + (v13 & 0x7FFFFFFF)) - 4];
                  do
                  {
                    signed int v15 = v10 + 1;
                    *(_DWORD *)int v16 = v10;
                    v16 -= 4;
                    signed int v10 = v15;
                  }

                  while (v15 < v12);
                }

                else
                {
                  int v14 = &a2[4 * v13];
                  do
                  {
                    signed int v15 = v10 + 1;
                    *(_DWORD *)int v14 = v10;
                    v14 += 4;
                    signed int v10 = v15;
                  }

                  while (v15 < v12);
                }

                ++v9;
                uint64_t v8 = *(int *)(v5 + 312);
                signed int v10 = v15;
              }

              while (v9 < v8);
            }

            if (*(int *)(v5 + 436) < 1)
            {
              if (*(int *)(v5 + 456) >= 1 && (int)v8 >= 1)
              {
                uint64_t v29 = 0LL;
                int v30 = 0;
                int v31 = 0;
                do
                {
                  uint64_t result = v7 + 12 * v29;
                  int v33 = *(_DWORD *)(result + 4);
                  int v32 = *(_DWORD *)(result + 8);
                  if (v30 != v32)
                  {
                    uint64_t result = (v33 - v31);
                    int v34 = *(_DWORD *)(v7 + 12 * v29);
                    uint64_t v35 = v34 & 0x7FFFFFFF;
                    if (v32)
                    {
                      if ((int)result >= 1)
                      {
                        uint64_t v36 = *(void *)(v5 + 8);
                        int v37 = v35 - 1;
                        do
                        {
                          if (v34 >= 0) {
                            int v38 = v35;
                          }
                          else {
                            int v38 = v37 + result;
                          }
                          uint64_t v39 = v38;
                          int v40 = *(unsigned __int16 *)(v36 + 2LL * v38);
                          int v41 = v40 & 0xFFFC;
                          unsigned int v42 = v40 - 8234;
                          unsigned int v43 = v40 - 8294;
                          if (v41 != 8204 && v42 >= 5 && v43 > 3)
                          {
                            *(_DWORD *)&a2[4 * v39] -= v30;
                          }

                          else
                          {
                            ++v30;
                            *(_DWORD *)&a2[4 * v39] = -1;
                          }

                          LODWORD(v35) = v35 + 1;
                          uint64_t result = (result - 1);
                        }

                        while ((_DWORD)result);
                      }
                    }

                    else if ((int)result >= 1)
                    {
                      uint64_t result = (v35 + result);
                      unsigned int v46 = &a2[4 * v35];
                      do
                      {
                        *(_DWORD *)v46 -= v30;
                        v46 += 4;
                        LODWORD(v35) = v35 + 1;
                      }

                      while ((int)result > (int)v35);
                    }
                  }

                  ++v29;
                  int v31 = v33;
                }

                while (v29 != v8);
              }
            }

            else if ((int)v8 >= 1)
            {
              uint64_t v17 = 0LL;
              int v18 = 0;
              int v19 = 0;
              uint64_t v20 = v8;
              do
              {
                uint64_t v21 = v7 + 12 * v17;
                int v22 = *(_DWORD *)(v21 + 4);
                int v23 = *(_DWORD *)(v21 + 8);
                if ((v23 & 5) != 0) {
                  int v24 = v18 + 1;
                }
                else {
                  int v24 = v18;
                }
                if (v24 >= 1)
                {
                  int v25 = v22 - v19;
                  if (v25 >= 1)
                  {
                    uint64_t v26 = *(_DWORD *)(v7 + 12 * v17) & 0x7FFFFFFF;
                    int v27 = v25 + v26;
                    uint64_t result = (uint64_t)&a2[4 * v26];
                    do
                    {
                      *(_DWORD *)result += v24;
                      result += 4LL;
                      LODWORD(v26) = v26 + 1;
                    }

                    while (v27 > (int)v26);
                  }
                }

                if ((v23 & 0xA) != 0) {
                  int v18 = v24 + 1;
                }
                else {
                  int v18 = v24;
                }
                ++v17;
                int v19 = v22;
              }

              while (v17 != v20);
            }
          }
        }

        else
        {
          *a3 = 1;
        }
      }
    }
  }

  return result;
}

uint64_t ubidi_getVisualMap(uint64_t result, int *a2, int *a3)
{
  if (a3 && *a3 <= 0)
  {
    if (a2)
    {
      uint64_t v5 = result;
      uint64_t result = ubidi_countRuns(result, a3);
      if (*a3 <= 0 && *(int *)(v5 + 24) >= 1)
      {
        uint64_t v6 = *(void *)(v5 + 320);
        int v7 = *(_DWORD *)(v5 + 312);
        if (v7 >= 1)
        {
          int v8 = 0;
          unint64_t v9 = v6 + 12LL * v7;
          signed int v10 = a2;
          int v11 = *(int **)(v5 + 320);
          do
          {
            int v13 = *v11;
            int v12 = v11[1];
            if (*v11 < 0)
            {
              int v15 = v13 & 0x7FFFFFFF;
              int v16 = v8 + 1;
              int v17 = ~v8 + v12 + v15;
              do
              {
                *v10++ = v17;
                ++v8;
                --v17;
              }

              while (v8 < v12);
              if (v12 <= v16) {
                int v12 = v16;
              }
            }

            else
            {
              if (v12 <= v8 + 1) {
                int v12 = v8 + 1;
              }
              int v14 = v12 - v8;
              do
              {
                *v10++ = v13++;
                --v14;
              }

              while (v14);
            }

            v11 += 3;
            int v8 = v12;
          }

          while ((unint64_t)v11 < v9);
        }

        if (*(int *)(v5 + 436) < 1)
        {
          if (*(int *)(v5 + 456) >= 1)
          {
            uint64_t v29 = *(unsigned int *)(v5 + 312);
            if ((int)v29 >= 1)
            {
              uint64_t v30 = 0LL;
              int v31 = 0;
              LODWORD(result) = 0;
              do
              {
                int v32 = (int *)(v6 + 12 * v30);
                uint64_t v34 = v32[1];
                int v33 = v32[2];
                int v35 = v34 - result;
                if (v33) {
                  BOOL v36 = 0;
                }
                else {
                  BOOL v36 = v31 == (_DWORD)result;
                }
                if (v36)
                {
                  v31 += v35;
                }

                else if (v33)
                {
                  if (v35 >= 1)
                  {
                    int v37 = *v32;
                    int v38 = *v32 & 0x7FFFFFFF;
                    uint64_t v39 = *(void *)(v5 + 8);
                    int v40 = v38 - 1;
                    do
                    {
                      int v41 = v40 + v35;
                      if (v37 >= 0) {
                        int v41 = v38;
                      }
                      int v42 = *(unsigned __int16 *)(v39 + 2LL * v41);
                      int v43 = v42 & 0xFFFC;
                      unsigned int v44 = v42 - 8234;
                      unsigned int v45 = v42 - 8294;
                      if (v43 != 8204 && v44 >= 5 && v45 >= 4) {
                        a2[v31++] = v41;
                      }
                      ++v38;
                      --v35;
                    }

                    while (v35);
                  }
                }

                else if ((int)v34 > (int)result)
                {
                  uint64_t v48 = &a2[(int)result];
                  uint64_t v49 = &a2[v31];
                  int v31 = v31 + v34 - result;
                  uint64_t v50 = (int)v34 - (uint64_t)(int)result;
                  do
                  {
                    int v51 = *v48++;
                    *v49++ = v51;
                    --v50;
                  }

                  while (v50);
                }

                ++v30;
                uint64_t result = v34;
              }

              while (v30 != v29);
            }
          }
        }

        else
        {
          uint64_t v18 = *(unsigned int *)(v5 + 312);
          if ((int)v18 >= 1)
          {
            int v19 = 0;
            uint64_t v20 = (int *)(v6 + 8);
            uint64_t v21 = *(unsigned int *)(v5 + 312);
            do
            {
              int v23 = *v20;
              v20 += 3;
              char v22 = v23;
              if ((v23 & 5) != 0) {
                ++v19;
              }
              if ((v22 & 0xA) != 0) {
                ++v19;
              }
              --v21;
            }

            while (v21);
            if (v19 >= 1)
            {
              int v24 = *(_DWORD *)(v5 + 24);
              do
              {
                uint64_t result = *(unsigned int *)(v6 + 12LL * (v18 - 1) + 8);
                if ((result & 0xA) != 0)
                {
                  a2[--v24] = -1;
                  --v19;
                }

                else {
                  int v25 = *(_DWORD *)(v6 + 12LL * (v18 - 2) + 4);
                }
                uint64_t v26 = *(int *)(v6 + 12LL * (v18 - 1) + 4);
                if ((int)v26 > v25 && v19 != 0)
                {
                  uint64_t v28 = v24;
                  int v24 = v25 + v24 - v26;
                  do
                    a2[--v28] = a2[--v26];
                  while (v26 > v25);
                }

                if ((result & 5) != 0)
                {
                  a2[--v24] = -1;
                  --v19;
                }

                if (v18 < 2) {
                  break;
                }
                --v18;
              }

              while (v19 > 0);
            }
          }
        }
      }
    }

    else
    {
      *a3 = 1;
    }
  }

  return result;
}

char *ubidi_invertMap(char *result, void *__b, int a3)
{
  if (result && __b && a3 >= 1)
  {
    uint64_t v5 = result;
    int v6 = 0;
    int v7 = -1;
    unint64_t v8 = (unint64_t)&result[4 * a3];
    do
    {
      int v10 = *(_DWORD *)(v8 - 4);
      v8 -= 4LL;
      int v9 = v10;
      if (v10 > v7) {
        int v7 = v9;
      }
      v6 += v9 >= 0;
    }

    while (v8 > (unint64_t)result);
    if (v6 <= v7) {
      uint64_t result = (char *)memset(__b, 255, 4LL * (v7 + 1));
    }
    int v11 = &v5[4 * a3 - 4];
    int v12 = a3 + 1;
    do
    {
      unsigned int v14 = *(_DWORD *)v11;
      v11 -= 4;
      uint64_t v13 = v14;
      if ((v14 & 0x80000000) == 0) {
        *((_DWORD *)__b + v13) = v12 - 2;
      }
      --v12;
    }

    while (v12 > 1);
  }

  return result;
}

void *ubiditransform_open(int *a1)
{
  if (*a1 > 0) {
    return 0LL;
  }
  uint64_t result = uprv_calloc(1LL, 72LL);
  if (!result) {
    *a1 = 7;
  }
  return result;
}

void ubiditransform_close(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)*a1;
    if (v2) {
      ubidi_close(v2);
    }
    int v3 = (void *)a1[2];
    if (v3) {
      uprv_free(v3);
    }
    uprv_free(a1);
  }

void *ubiditransform_transform( uint64_t a1, UChar *s, uint64_t a3, UChar *a4, int32_t a5, unsigned __int8 a6, int a7, unsigned __int8 a8, int a9, int a10, unsigned int a11, int *a12)
{
  uint64_t result = 0LL;
  unsigned __int8 v31 = a6;
  unsigned __int8 v30 = a8;
  unsigned int v29 = 0;
  if (*a12 > 0) {
    return result;
  }
  if (!s || !a4) {
    goto LABEL_10;
  }
  uint64_t v16 = a3;
  if (!(_DWORD)a3) {
    return 0LL;
  }
  if ((int)a3 <= -2)
  {
LABEL_10:
    uint64_t result = 0LL;
    int v19 = 1;
LABEL_11:
    *a12 = v19;
    return result;
  }

  if ((_DWORD)a3 == -1) {
    uint64_t v16 = u_strlen(s);
  }
  if (!a5) {
    return 0LL;
  }
  if (a5 <= -2) {
    goto LABEL_10;
  }
  if (a5 == -1) {
    a5 = u_strlen(a4);
  }
  uint64_t v20 = a1;
  if (!a1)
  {
    if (*a12 <= 0)
    {
      uint64_t result = uprv_calloc(1LL, 72LL);
      if (!result)
      {
        int v19 = 7;
        goto LABEL_11;
      }

      if (*a12 <= 0)
      {
        uint64_t v20 = (uint64_t)result;
        goto LABEL_15;
      }
    }

    return 0LL;
  }

uint64_t sub_1808162FC(UChar *a1, int a2, _BYTE *a3, _BYTE *a4)
{
  unsigned int v6 = *a3;
  if (v6 < 0xFE)
  {
    uint64_t result = v6 & 1;
  }

  else
  {
    uint64_t result = ubidi_getBaseDirection(a1, a2);
  }

  *a3 = result;
  unsigned int v8 = *a4;
  if (v8 <= 0xFD) {
    char v9 = v8 & 1;
  }
  else {
    char v9 = result;
  }
  *a4 = v9;
  return result;
}

char *sub_180816364(int a1, int a2, int a3, int a4)
{
  uint64_t v4 = 0LL;
  while (1)
  {
    if (byte_189711038[v4] == a1
      && byte_189711038[v4 + 8] == a2
      && *(_DWORD *)&byte_189711038[v4 + 4] == a3)
    {
      uint64_t v5 = &byte_189711038[v4];
      if (*(_DWORD *)&byte_189711038[v4 + 12] == a4) {
        break;
      }
    }

    v4 += 88LL;
    if (v4 == 1408) {
      return 0LL;
    }
  }

  return v5;
}

uint64_t sub_1808163C0(uint64_t result, const UChar *a2, uint64_t a3, unsigned int a4, int *a5)
{
  if (a4 < a3)
  {
    int v6 = 15;
LABEL_3:
    *a5 = v6;
    return result;
  }

  uint64_t v9 = result;
  if (*(_DWORD *)(result + 36) >= a4)
  {
    uint64_t result = *(void *)(result + 16);
  }

  else
  {
    unsigned int v10 = a4 + 50;
    int v11 = *(void **)(result + 16);
    if (v11)
    {
      uprv_free(v11);
      *(void *)(v9 + 16) = 0LL;
    }

    uint64_t result = (uint64_t)uprv_malloc(2LL * v10);
    *(void *)(v9 + 16) = result;
    if (!result)
    {
      int v6 = 7;
      goto LABEL_3;
    }

    *(_DWORD *)(v9 + 36) = v10;
  }

  u_strncpy((UChar *)result, a2, a3);
  uint64_t result = u_terminateUChars(*(void *)(v9 + 16), *(_DWORD *)(v9 + 36), a3, a5);
  *(_DWORD *)(v9 + 32) = result;
  return result;
}

uint64_t sub_180816474(uint64_t a1, int *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 60);
  int v3 = v2 | *(_DWORD *)(a1 + 64);
  if (!*(void *)(a1 + 60)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  int v6 = *(UChar **)(a1 + 16);
  uint64_t v10 = v7 + 16;
  int v9 = *(_DWORD *)(v7 + 16);
  int v8 = *(_DWORD *)(v10 + 4);
  uint64_t v11 = *(unsigned int *)(a1 + 32);
  int v12 = *(UChar **)(a1 + 24);
  int v13 = *(_DWORD *)(a1 + 40);
  if (v8 == v9)
  {
    int v14 = v8 | v3;
LABEL_7:
    **(_DWORD **)(a1 + 48) = u_shapeArabic(v6, v11, v12, v13, v14, a2);
    return 1LL;
  }

  uint64_t v16 = u_shapeArabic(v6, v11, v12, v13, v9 | v2, a2);
  **(_DWORD **)(a1 + 48) = v16;
  if (*a2 <= 0)
  {
    sub_1808163C0(a1, *(const UChar **)(a1 + 24), v16, v16, a2);
    int v6 = *(UChar **)(a1 + 16);
    int v14 = *(_DWORD *)(*(void *)(a1 + 8) + 20LL) | *(_DWORD *)(a1 + 64);
    uint64_t v11 = *(unsigned int *)(a1 + 32);
    int v12 = *(UChar **)(a1 + 24);
    int v13 = *(_DWORD *)(a1 + 40);
    goto LABEL_7;
  }

  return 1LL;
}

uint64_t sub_180816534(uint64_t a1, int *a2)
{
  return 0LL;
}

uint64_t sub_180816568(uint64_t a1, int *a2)
{
  **(_DWORD **)(a1 + 48) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 56) = 0;
  return 1LL;
}

uint64_t sub_1808165B0(uint64_t a1, int *a2)
{
  **(_DWORD **)(a1 + 48) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

uint64_t sub_1808165F8(uint64_t *a1)
{
  return 0LL;
}

uint64_t sub_180816630(uint64_t a1, _DWORD *a2)
{
  if ((*(_BYTE *)(a1 + 56) & 2) == 0) {
    return 0LL;
  }
  if (*(_DWORD *)(a1 + 40) < *(_DWORD *)(a1 + 32))
  {
    uint64_t result = 0LL;
    *a2 = 15;
    return result;
  }

  unsigned int v4 = 0;
  unsigned int v5 = 0;
  do
  {
    char LevelAt = ubidi_getLevelAt(*(void *)a1, v4);
    uint64_t v7 = *(void *)(a1 + 16);
    unsigned int v8 = v4 + 1;
    unsigned int v9 = *(unsigned __int16 *)(v7 + 2LL * v4);
    if ((v9 & 0xFC00) == 0xD800 && v8 != *(_DWORD *)(a1 + 32))
    {
      int v11 = *(unsigned __int16 *)(v7 + 2LL * v8);
      BOOL v12 = (v11 & 0xFC00) == 56320;
      int v13 = v11 + (v9 << 10) - 56613888;
      if (v12) {
        unsigned int v9 = v13;
      }
      if (v12) {
        v4 += 2;
      }
      else {
        ++v4;
      }
      if ((LevelAt & 1) != 0)
      {
LABEL_18:
        unsigned int v14 = u_charMirror(v9);
        unsigned int v10 = u_charMirror(v9);
        if (!HIWORD(v14)) {
          goto LABEL_19;
        }
        *(_WORD *)(*(void *)(a1 + 24) + 2LL * v5) = (v10 >> 10) - 10304;
        LOWORD(v9) = u_charMirror(v9);
        uint64_t v15 = *(void *)(a1 + 24);
        goto LABEL_22;
      }
    }

    else
    {
      ++v4;
      if ((LevelAt & 1) != 0) {
        goto LABEL_18;
      }
    }

    if (v9 < 0x10000)
    {
      LOWORD(v10) = v9;
LABEL_19:
      uint64_t v15 = *(void *)(a1 + 24);
      int v16 = 1;
      unsigned int v17 = v5;
      goto LABEL_23;
    }

    uint64_t v15 = *(void *)(a1 + 24);
    *(_WORD *)(v15 + 2LL * v5) = (v9 >> 10) - 10304;
LABEL_22:
    unsigned int v17 = v5 + 1;
    LOWORD(v10) = v9 & 0x3FF | 0xDC00;
    int v16 = 2;
LABEL_23:
    v5 += v16;
    *(_WORD *)(v15 + 2LL * v17) = v10;
    unsigned int v18 = *(_DWORD *)(a1 + 32);
  }

  while (v4 < v18);
  **(_DWORD **)(a1 + 48) = v18;
  *(_DWORD *)(a1 + 56) = 0;
  return 1LL;
}

uint64_t sub_1808167B0(uint64_t *a1)
{
  return 0LL;
}

uint64_t ubidi_writeReverse(UChar *s, uint64_t a2, UChar *a3, unsigned int a4, char a5, int *a6)
{
  if (!a6 || *a6 > 0) {
    return 0LL;
  }
  if (!s
    || (int)a2 < -1
    || (a4 & 0x80000000) != 0
    || !a3 && a4
    || a3 && (s >= a3 && &a3[a4] > s || a3 >= s && &s[(int)a2] > a3))
  {
    *a6 = 1;
    return 0LL;
  }

  if ((_DWORD)a2 == -1) {
    a2 = u_strlen(s);
  }
  else {
    uint64_t v12 = sub_1808168CC(s, a2, a3, a4, a5, a6);
  }
  return u_terminateUChars((uint64_t)a3, a4, v12, a6);
}

uint64_t sub_1808168CC(unsigned __int16 *a1, uint64_t a2, _WORD *a3, int a4, char a5, _DWORD *a6)
{
  uint64_t v7 = a2;
  unsigned int v8 = a1;
  if ((a5 & 0xB) != 1)
  {
    if ((a5 & 0xB) != 0)
    {
      if ((a5 & 8) != 0)
      {
        LODWORD(v22) = 0;
        int v23 = a2 + 1;
        do
        {
          int v25 = *v8++;
          int v24 = v25;
          unsigned int v26 = v25 - 8239;
          BOOL v27 = (v25 & 0xFFFC) == 0x200C || v26 >= 0xFFFFFFFB;
          unsigned int v28 = v24 - 8298;
          if (v27 || v28 >= 0xFFFFFFFC) {
            uint64_t v22 = v22;
          }
          else {
            uint64_t v22 = (v22 + 1);
          }
          --v23;
        }

        while (v23 > 1);
        v8 -= (int)a2;
      }

      else
      {
        uint64_t v22 = a2;
      }

      if ((int)v22 <= a4)
      {
        do
        {
          int v30 = v7;
          LODWORD(v7) = v7 - 1;
          unsigned int v31 = v8[(int)v7];
          if (v30 > 1 && (v31 & 0xFC00) == 0xDC00)
          {
            int v32 = v8[v30 - 2];
            BOOL v33 = (v32 & 0xFC00) == 55296;
            int v34 = v31 - 56613888 + (v32 << 10);
            if (v33) {
              LODWORD(v7) = v30 - 2;
            }
            if (v33) {
              unsigned int v31 = v34;
            }
          }

          if ((a5 & 1) != 0 && (int)v7 >= 1)
          {
            while (((1LL << u_charType(v31)) & 0x1C0) != 0)
            {
              int v35 = v7 - 1;
              unsigned int v31 = v8[(v7 - 1)];
              if ((v31 & 0xFC00) == 0xDC00)
              {
                int v36 = v8[(v7 - 2)];
                BOOL v37 = (v36 & 0xFC00) == 55296;
                int v38 = v31 - 56613888 + (v36 << 10);
                if (v37) {
                  int v35 = v7 - 2;
                }
                if (v37) {
                  unsigned int v31 = v38;
                }
              }

              LODWORD(v7) = v35;
              if (v35 <= 0)
              {
LABEL_67:
                LODWORD(v7) = 0;
                break;
              }
            }
          }

          if ((a5 & 8) == 0 || v31 >> 2 != 2051 && v31 - 8234 >= 5 && v31 - 8294 >= 4)
          {
            if ((a5 & 2) != 0)
            {
              unsigned int v40 = u_charMirror(v31);
              if (HIWORD(v40))
              {
                __int16 v42 = v40 & 0x3FF | 0xDC00;
                unsigned int v40 = (v40 >> 10) - 10304;
                a3[1] = v42;
                unsigned int v41 = 2;
              }

              else
              {
                unsigned int v41 = 1;
              }

              *a3 = v40;
              a3 += v41;
              int v39 = v41 + v7;
            }

            else
            {
              int v39 = v7;
            }

            if (v39 < v30)
            {
              int v43 = &v8[v39];
              uint64_t v44 = v30 - (uint64_t)v39;
              do
              {
                __int16 v45 = *v43++;
                *a3++ = v45;
                --v44;
              }

              while (v44);
            }
          }
        }

        while ((int)v7 >= 1);
        return v22;
      }

      uint64_t v7 = v22;
    }

    else if (a4 >= (int)a2)
    {
      int v9 = a2;
      do
      {
        int v10 = v9 - 1;
        uint64_t v11 = v9 - 1;
        if (v9 > 1 && (a1[v10] & 0xFC00) == 0xDC00)
        {
          LODWORD(v1icu::UVector32::~UVector32(this + 1) = v9 - 2;
          if ((a1[v9 - 2] & 0xFC00) == 0xD800) {
            uint64_t v11 = v11;
          }
          else {
            uint64_t v11 = v10;
          }
          int v10 = v11;
        }

        do
          *a3++ = a1[v11++];
        while (v11 < v9);
        int v9 = v10;
      }

      while (v10 >= 1);
      return v7;
    }

uint64_t ubidi_writeReordered(uint64_t a1, unint64_t a2, int a3, char a4, int *a5)
{
  if (!a5 || *a5 > 0) {
    return 0LL;
  }
  if (!a1
    || (unint64_t v8 = *(void *)(a1 + 8)) == 0
    || (int v10 = *(_DWORD *)(a1 + 20), (v10 | a3) < 0)
    || !a2 && a3 >= 1
    || a2 && (v8 >= a2 && v8 < a2 + 2LL * a3 || v8 <= a2 && v8 + 2LL * *(int *)(a1 + 16) > a2))
  {
    uint64_t result = 0LL;
    *a5 = 1;
    return result;
  }

  if (!v10) {
    return u_terminateUChars(a2, a3, 0LL, a5);
  }
  int v13 = ubidi_countRuns(a1, a5);
  if (*a5 > 0) {
    return 0LL;
  }
  int v14 = v13;
  char v15 = a4 & 0xF3 | 4;
  int v17 = *(_DWORD *)(a1 + 148);
  int v16 = *(_DWORD *)(a1 + 152);
  if ((v16 & 1) == 0) {
    char v15 = a4;
  }
  uint64_t v58 = 0LL;
  char v18 = a4 & 0xF3 | 8;
  if ((v16 & 2) == 0) {
    char v18 = v15;
  }
  char v57 = v18;
  int v19 = a3;
  if ((v18 & 0x10) != 0)
  {
    if ((v18 & 4) == 0)
    {
      if (v13 >= 1)
      {
        unsigned int v26 = v13 + 1;
        char v27 = v18 & 0xFD;
        int v19 = a3;
        unsigned int v28 = (_WORD *)a2;
        do
        {
          unsigned int VisualRun = ubidi_getVisualRun((void *)a1, v26 - 2, (int *)&v58 + 1, (int *)&v58);
          int v30 = (unsigned __int16 *)(v8 + 2LL * SHIDWORD(v58));
          if (VisualRun) {
            int v31 = sub_1808171FC(v30, v58, v28, v19, v57, a5);
          }
          else {
            int v31 = sub_1808168CC(v30, v58, v28, v19, v27, a5);
          }
          LODWORD(v58) = v31;
          if (v28) {
            v28 += v31;
          }
          else {
            unsigned int v28 = 0LL;
          }
          v19 -= v31;
          --v26;
        }

        while (v26 > 1);
      }

      return u_terminateUChars(a2, a3, (a3 - v19), a5);
    }

    if (v13 < 1) {
      return u_terminateUChars(a2, a3, (a3 - v19), a5);
    }
    uint64_t v43 = *(void *)(a1 + 128);
    int v44 = v13 + 1;
    char v56 = v18 & 0xFD;
    int v19 = a3;
    __int16 v45 = (__int16 *)a2;
    while (1)
    {
      unsigned int v46 = ubidi_getVisualRun((void *)a1, v44 - 2, (int *)&v58 + 1, (int *)&v58);
      int v47 = (unsigned __int16 *)(v8 + 2LL * SHIDWORD(v58));
      if (v46)
      {
        if (((1LL << *(_BYTE *)(v43 + SHIDWORD(v58))) & 0x2002) != 0)
        {
          char v48 = v57;
        }

        else
        {
          BOOL v40 = __OFSUB__(v19--, 1);
          char v48 = v57;
          if (v19 < 0 == v40) {
            *v45++ = 8207;
          }
        }

        int v52 = sub_1808171FC(v47, v58, v45, v19, v48, a5);
        LODWORD(v58) = v52;
        if (v45) {
          v45 += v52;
        }
        else {
          __int16 v45 = 0LL;
        }
        v19 -= v52;
        if (((1LL << *(_BYTE *)(v43 + v52 + HIDWORD(v58) - 1)) & 0x2002) != 0) {
          goto LABEL_111;
        }
        BOOL v40 = __OFSUB__(v19--, 1);
        if (v19 < 0 != v40) {
          goto LABEL_111;
        }
        __int16 v51 = 8207;
      }

      else
      {
        uint64_t v49 = v58;
        if (*(_BYTE *)(v43 + HIDWORD(v58) + (int)v58 - 1))
        {
          BOOL v40 = __OFSUB__(v19--, 1);
          if (v19 < 0 == v40) {
            *v45++ = 8206;
          }
        }

        int v50 = sub_1808168CC(v47, v49, v45, v19, v56, a5);
        LODWORD(v58) = v50;
        if (v45) {
          v45 += v50;
        }
        else {
          __int16 v45 = 0LL;
        }
        v19 -= v50;
        if (!*(_BYTE *)(v43 + SHIDWORD(v58))) {
          goto LABEL_111;
        }
        BOOL v40 = __OFSUB__(v19--, 1);
        if (v19 < 0 != v40) {
          goto LABEL_111;
        }
        __int16 v51 = 8206;
      }

      *v45++ = v51;
LABEL_111:
    }
  }

  if ((v18 & 4) == 0)
  {
    if (v13 >= 1)
    {
      unsigned int v20 = 0;
      char v21 = v18 & 0xFD;
      int v19 = a3;
      uint64_t v22 = (_WORD *)a2;
      do
      {
        unsigned int v23 = ubidi_getVisualRun((void *)a1, v20, (int *)&v58 + 1, (int *)&v58);
        int v24 = (unsigned __int16 *)(v8 + 2LL * SHIDWORD(v58));
        if (v23) {
          int v25 = sub_1808168CC(v24, v58, v22, v19, v57, a5);
        }
        else {
          int v25 = sub_1808171FC(v24, v58, v22, v19, v21, a5);
        }
        LODWORD(v58) = v25;
        if (v22) {
          v22 += v25;
        }
        else {
          uint64_t v22 = 0LL;
        }
        v19 -= v25;
        ++v20;
      }

      while (v14 != v20);
    }

    return u_terminateUChars(a2, a3, (a3 - v19), a5);
  }

  if (v13 >= 1)
  {
    uint64_t v32 = 0LL;
    uint64_t v33 = 8LL;
    char v53 = v18 & 0xFD;
    int v19 = a3;
    int v34 = (__int16 *)a2;
    uint64_t v54 = v13;
    uint64_t v55 = *(void *)(a1 + 128);
    while (1)
    {
      unsigned int v35 = ubidi_getVisualRun((void *)a1, v32, (int *)&v58 + 1, (int *)&v58);
      int v36 = (unsigned __int16 *)(v8 + 2LL * SHIDWORD(v58));
      int v37 = *(_DWORD *)(*(void *)(a1 + 320) + v33) & ~(*(int *)(*(void *)(a1 + 320) + v33) >> 31);
      if (v35)
      {
        if ((v37 & 1) == 0)
        {
          if ((v37 & 4) != 0)
          {
            __int16 v38 = 8207;
LABEL_62:
            BOOL v40 = __OFSUB__(v19--, 1);
            if (v19 < 0 == v40) {
              *v34++ = v38;
            }
          }

          int v41 = sub_1808168CC(v36, v58, v34, v19, v57, a5);
          LODWORD(v58) = v41;
          if (v34) {
            v34 += v41;
          }
          else {
            int v34 = 0LL;
          }
          if (*(_BYTE *)(a1 + 144) && ((1LL << *(_BYTE *)(v55 + SHIDWORD(v58))) & 0x2002) == 0) {
            LOBYTE(v37) = v37 | 8;
          }
          goto LABEL_80;
        }

        __int16 v38 = 8206;
        goto LABEL_62;
      }

      if (*(_BYTE *)(a1 + 144)) {
        LOBYTE(v37) = v37 | (*(_BYTE *)(v55 + SHIDWORD(v58)) != 0);
      }
      if ((v37 & 1) != 0) {
        break;
      }
      if ((v37 & 4) != 0)
      {
        __int16 v39 = 8207;
        goto LABEL_72;
      }

uint64_t sub_1808171FC(unsigned __int16 *a1, uint64_t a2, _WORD *a3, int a4, char a5, _DWORD *a6)
{
  uint64_t v7 = a2;
  unint64_t v8 = a1;
  int v9 = a5 & 0xA;
  if ((a5 & 0xA) == 0)
  {
    if (a4 >= (int)a2)
    {
      int v22 = a2 + 1;
      do
      {
        __int16 v23 = *v8++;
        *a3++ = v23;
        --v22;
      }

      while (v22 > 1);
      return v7;
    }

char *ubrk_open(int a1, const char *a2, const UChar *a3, int a4, const icu::Locale *a5)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  switch(a1)
  {
    case 0:
      icu::Locale::Locale((icu::Locale *)&v22, a2, 0LL, 0LL, 0LL);
      CharacterInstance = icu::BreakIterator::createCharacterInstance((char **)&v22, a5, v8, v9);
      goto LABEL_9;
    case 1:
      icu::Locale::Locale((icu::Locale *)&v22, a2, 0LL, 0LL, 0LL);
      CharacterInstance = icu::BreakIterator::createWordInstance((char **)&v22, a5, v17, v18);
      goto LABEL_9;
    case 2:
      icu::Locale::Locale((icu::Locale *)&v22, a2, 0LL, 0LL, 0LL);
      CharacterInstance = icu::BreakIterator::createLineInstance((char **)&v22, a5, v11, v12);
      goto LABEL_9;
    case 3:
      icu::Locale::Locale((icu::Locale *)&v22, a2, 0LL, 0LL, 0LL);
      CharacterInstance = icu::BreakIterator::createSentenceInstance((char **)&v22, a5, v19, v20);
      goto LABEL_9;
    case 4:
      icu::Locale::Locale((icu::Locale *)&v22, a2, 0LL, 0LL, 0LL);
      CharacterInstance = icu::BreakIterator::createTitleInstance((char **)&v22, a5, v13, v14);
LABEL_9:
      unsigned int v15 = CharacterInstance;
      icu::Locale::~Locale((icu::Locale *)&v22);
      if (v15)
      {
        if (a3)
        {
          memset(&v22, 0, sizeof(v22));
          v22.magic = 878368812;
          v22.sizeOfStruct = 144;
          utext_openUChars(&v22, a3, a4, (UErrorCode *)a5);
          (*(void (**)(char *, UText *, const icu::Locale *))(*(void *)v15 + 64LL))(v15, &v22, a5);
        }
      }

      else
      {
        int v16 = 7;
LABEL_16:
        *(_DWORD *)a5 = v16;
      }

      break;
    default:
      unsigned int v15 = 0LL;
      int v16 = 1;
      goto LABEL_16;
  }

  return v15;
}

uint64_t ubrk_setText(uint64_t a1, const UChar *a2, int a3, UErrorCode *a4)
{
  v7.magic = 878368812;
  v7.sizeOfStruct = 144;
  utext_openUChars(&v7, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, UText *, UErrorCode *))(*(void *)a1 + 64LL))(a1, &v7, a4);
}

icu::RuleBasedBreakIterator *ubrk_openRules( uint64_t a1, uint64_t a2, const UChar *a3, int a4, uint64_t a5, UErrorCode *a6)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  memset(v16, 0, sizeof(v16));
  int v11 = (UChar **)icu::UnicodeString::UnicodeString((uint64_t)v16, a1, a2);
  int v12 = sub_1807FDC38(v11, a5, a6);
  __int16 v13 = (void *)*(unsigned int *)a6;
  if ((int)v13 <= 0)
  {
    UText v7 = v12;
    if (a3)
    {
      memset(&v15, 0, sizeof(v15));
      v15.magic = 878368812;
      v15.sizeOfStruct = 144;
      utext_openUChars(&v15, a3, a4, a6);
      (*(void (**)(icu::RuleBasedBreakIterator *, UText *, UErrorCode *))(*(void *)v7 + 64LL))( v7,  &v15,  a6);
    }
  }

  else
  {
    UText v7 = 0LL;
  }

  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v16);
  return v7;
}

icu::RuleBasedBreakIterator *ubrk_openBinaryRules( const unsigned __int8 *a1, unint64_t a2, const UChar *a3, int a4, UErrorCode *a5)
{
  unsigned int v5 = (uint64_t *)*(unsigned int *)a5;
  unsigned int v9 = a2;
  if ((a2 & 0x80000000) != 0)
  {
    int v6 = 0LL;
    int v14 = 1;
    goto LABEL_11;
  }

  __int16 v13 = (icu::RuleBasedBreakIterator *)icu::UMemory::operator new(v5, (icu::UMemory *)0x310, a2);
  if (!v13)
  {
    int v6 = 0LL;
    int v14 = 7;
LABEL_11:
    *a5 = v14;
    return v6;
  }

  int v6 = v13;
  icu::RuleBasedBreakIterator::RuleBasedBreakIterator(v13, a1, v9, a5);
  if (*(int *)a5 > 0)
  {
    (*(void (**)(icu::RuleBasedBreakIterator *))(*(void *)v6 + 8LL))(v6);
    return 0LL;
  }

  if (a3)
  {
    memset(&v15, 0, sizeof(v15));
    v15.magic = 878368812;
    v15.sizeOfStruct = 144;
    utext_openUChars(&v15, a3, a4, a5);
    (*(void (**)(icu::RuleBasedBreakIterator *, UText *, UErrorCode *))(*(void *)v6 + 64LL))(v6, &v15, a5);
  }

  return v6;
}

uint64_t ubrk_safeClone(uint64_t result, uint64_t a2, int *a3, int *a4)
{
  if (!a4) {
    return 0LL;
  }
  if (*a4 > 0) {
    return 0LL;
  }
  if (!result)
  {
    int v7 = 1;
LABEL_18:
    *a4 = v7;
    return result;
  }

  if (a3)
  {
    int v6 = *a3;
    *a3 = 1;
    if (!v6) {
      return 0LL;
    }
  }

  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32LL))(result);
  if (result) {
    int v7 = -126;
  }
  else {
    int v7 = 7;
  }
  if (result) {
    BOOL v8 = a3 == 0LL;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8) {
    goto LABEL_18;
  }
  return result;
}

uint64_t ubrk_clone(uint64_t a1, int *a2)
{
  if (!a2) {
    return 0LL;
  }
  if (*a2 > 0) {
    return 0LL;
  }
  if (a1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    if (result) {
      return result;
    }
    int v4 = 7;
  }

  else
  {
    int v4 = 1;
  }

  uint64_t result = 0LL;
  *a2 = v4;
  return result;
}

uint64_t ubrk_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t ubrk_setLineWordOpts(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t ubrk_setUText(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64LL))(a1);
}

uint64_t ubrk_current(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
}

uint64_t ubrk_next(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
}

uint64_t ubrk_previous(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
}

uint64_t ubrk_first(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80LL))(a1);
}

uint64_t ubrk_last(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88LL))(a1);
}

uint64_t ubrk_preceding(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128LL))(a1);
}

uint64_t ubrk_following(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
}

uint64_t ubrk_isBoundary(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136LL))(a1);
}

uint64_t ubrk_getRuleStatus(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152LL))(a1);
}

uint64_t ubrk_getRuleStatusVec(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160LL))(a1);
}

uint64_t ubrk_getLocaleByType(uint64_t a1, int a2, int *a3)
{
  if (a1) {
    return icu::BreakIterator::getLocaleID(a1, a2, a3);
  }
  if (*a3 <= 0) {
    *a3 = 1;
  }
  return 0LL;
}

uint64_t ubrk_refreshUText(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(a1);
}

uint64_t ubrk_getBinaryRules(const void *a1, void *a2, unsigned int a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (a2) {
      BOOL v8 = 1;
    }
    else {
      BOOL v8 = (int)a3 <= 0;
    }
    int v9 = !v8;
    if ((a3 & 0x80000000) != 0 {
      || v9
    }
      || !a1
    {
      uint64_t v4 = 0LL;
      int v12 = 1;
    }

    else
    {
      LODWORD(__n) = 0;
      int v11 = (const void *)(*(uint64_t (**)(void *, size_t *))(*(void *)v10 + 200LL))(v10, &__n);
      uint64_t v4 = __n;
      if ((__n & 0x80000000) != 0)
      {
        uint64_t v4 = 0LL;
        int v12 = 8;
      }

      else
      {
        if (!a2) {
          return v4;
        }
        if (__n <= a3)
        {
          memcpy(a2, v11, __n);
          return v4;
        }

        int v12 = 15;
      }
    }

    *a4 = v12;
    return v4;
  }

  return 0LL;
}

uint64_t sub_180817C98(uint64_t result, int *a2)
{
  if (*a2 <= 0) {
    return utrie2_enum( (uint64_t)&off_1897115D8,  0LL,  (uint64_t (*)(uint64_t, uint64_t, void, uint64_t))sub_180817CC4,  result);
  }
  return result;
}

uint64_t sub_180817CC4(uint64_t a1)
{
  return 1LL;
}

void *ucase_getSingleton(_DWORD *a1, _DWORD *a2)
{
  *a1 = 1664;
  *a2 = 370;
  return &unk_1897115B8;
}

_UNKNOWN **sub_180817CFC()
{
  return &off_1897115D8;
}

uint64_t ucase_tolower(uint64_t result)
{
  unsigned int v1 = result >> 11;
  if (result >> 11 > 0x1A)
  {
    if (WORD1(result))
    {
      if (WORD1(result) > 0x10u)
      {
        uint64_t v4 = 3540LL;
        goto LABEL_14;
      }

      if (v1 > 0x1C0)
      {
        uint64_t v4 = 13156LL;
        goto LABEL_14;
      }

      unsigned int v2 = ((result >> 5) & 0x3F) + word_1809FB5A8[v1 + 2080];
    }

    else
    {
      else {
        int v3 = 320;
      }
      unsigned int v2 = v3 + (result >> 5);
    }
  }

  else
  {
    unsigned int v2 = result >> 5;
  }

  uint64_t v4 = (result & 0x1F) + 4 * word_1809FB5A8[v2];
LABEL_14:
  unint64_t v5 = word_1809FB5A8[v4];
  if ((v5 & 8) != 0)
  {
    int v6 = (_WORD *)((char *)&unk_1809FA5C4 + ((v5 >> 3) & 0x1FFE));
    __int16 v9 = *v6;
    BOOL v8 = v6 + 1;
    __int16 v7 = v9;
    if ((v5 & 2) != 0 && (v7 & 0x10) != 0)
    {
      uint64_t v10 = byte_1809F9E61[v7 & 0xF];
      if ((v7 & 0x100) != 0) {
        int v11 = v8[2 * v10 + 1] | (v8[2 * v10] << 16);
      }
      else {
        int v11 = v8[v10];
      }
      if ((v7 & 0x400) != 0) {
        int v12 = -v11;
      }
      else {
        int v12 = v11;
      }
      return (v12 + result);
    }

    else if ((v7 & 1) != 0)
    {
      if ((v7 & 0x100) != 0) {
        return *(unsigned __int16 *)((char *)&unk_1809FA5C4 + ((v5 >> 3) & 0x1FFE) + 4) | (*(unsigned __int16 *)((char *)&unk_1809FA5C4 + ((v5 >> 3) & 0x1FFE) + 2) << 16);
      }
      else {
        return *v8;
      }
    }
  }

  else if ((v5 & 2) != 0)
  {
    return (result + ((__int16)v5 >> 7));
  }

  return result;
}

uint64_t ucase_toupper(uint64_t result)
{
  unsigned int v1 = result >> 11;
  if (result >> 11 > 0x1A)
  {
    if (WORD1(result))
    {
      if (WORD1(result) > 0x10u)
      {
        uint64_t v4 = 3540LL;
        goto LABEL_14;
      }

      if (v1 > 0x1C0)
      {
        uint64_t v4 = 13156LL;
        goto LABEL_14;
      }

      unsigned int v2 = ((result >> 5) & 0x3F) + word_1809FB5A8[v1 + 2080];
    }

    else
    {
      else {
        int v3 = 320;
      }
      unsigned int v2 = v3 + (result >> 5);
    }
  }

  else
  {
    unsigned int v2 = result >> 5;
  }

  uint64_t v4 = (result & 0x1F) + 4 * word_1809FB5A8[v2];
LABEL_14:
  unint64_t v5 = word_1809FB5A8[v4];
  if ((v5 & 8) != 0)
  {
    int v6 = (__int16 *)((char *)&unk_1809FA5C4 + ((v5 >> 3) & 0x1FFE));
    __int16 v9 = *v6;
    BOOL v8 = v6 + 1;
    __int16 v7 = v9;
    int v10 = v9 & 0x10;
    if ((v5 & 3) != 1 || v10 == 0)
    {
      if ((v7 & 4) != 0)
      {
        uint64_t v12 = byte_1809F9E61[v7 & 3];
        if ((v7 & 0x100) != 0) {
          return (unsigned __int16)v8[2 * v12 + 1] | ((unsigned __int16)v8[2 * v12] << 16);
        }
        else {
          return (unsigned __int16)v8[v12];
        }
      }
    }

    else
    {
      uint64_t v13 = byte_1809F9E61[v7 & 0xF];
      if ((v7 & 0x100) != 0) {
        int v14 = (unsigned __int16)v8[2 * v13 + 1] | ((unsigned __int16)v8[2 * v13] << 16);
      }
      else {
        int v14 = (unsigned __int16)v8[v13];
      }
      if ((v7 & 0x400) != 0) {
        int v15 = -v14;
      }
      else {
        int v15 = v14;
      }
      return (v15 + result);
    }
  }

  else if ((v5 & 3) == 1)
  {
    return (result + ((__int16)v5 >> 7));
  }

  return result;
}

uint64_t ucase_totitle(uint64_t result)
{
  unsigned int v1 = result >> 11;
  if (result >> 11 > 0x1A)
  {
    if (WORD1(result))
    {
      if (WORD1(result) > 0x10u)
      {
        uint64_t v4 = 3540LL;
        goto LABEL_14;
      }

      if (v1 > 0x1C0)
      {
        uint64_t v4 = 13156LL;
        goto LABEL_14;
      }

      unsigned int v2 = ((result >> 5) & 0x3F) + word_1809FB5A8[v1 + 2080];
    }

    else
    {
      else {
        int v3 = 320;
      }
      unsigned int v2 = v3 + (result >> 5);
    }
  }

  else
  {
    unsigned int v2 = result >> 5;
  }

  uint64_t v4 = (result & 0x1F) + 4 * word_1809FB5A8[v2];
LABEL_14:
  unint64_t v5 = word_1809FB5A8[v4];
  if ((v5 & 8) != 0)
  {
    int v6 = (unsigned __int16 *)((char *)&unk_1809FA5C4 + ((v5 >> 3) & 0x1FFE));
    int v9 = *v6;
    BOOL v8 = v6 + 1;
    int v7 = v9;
    int v10 = v9 & 0x10;
    if ((v5 & 3) != 1 || v10 == 0)
    {
      if ((v7 & 8) != 0)
      {
        char v12 = 3;
      }

      else
      {
        if ((v7 & 4) == 0) {
          return result;
        }
        char v12 = 2;
      }

      uint64_t v15 = byte_1809F9E61[~(-1 << v12) & v7];
      if ((v7 & 0x100) != 0) {
        return v8[2 * v15 + 1] | (v8[2 * v15] << 16);
      }
      else {
        return v8[v15];
      }
    }

    else
    {
      uint64_t v13 = byte_1809F9E61[v7 & 0xF];
      if ((v7 & 0x100) != 0) {
        int v14 = v8[2 * v13 + 1] | (v8[2 * v13] << 16);
      }
      else {
        int v14 = v8[v13];
      }
      if ((v7 & 0x400) != 0) {
        int v16 = -v14;
      }
      else {
        int v16 = v14;
      }
      return (v16 + result);
    }
  }

  else if ((v5 & 3) == 1)
  {
    return (result + ((__int16)v5 >> 7));
  }

  return result;
}

uint64_t sub_18081809C(uint64_t result, void *a2)
{
  int v3 = result;
  unsigned int v4 = result >> 11;
  if (result >> 11 > 0x1A)
  {
    if (WORD1(result))
    {
      if (WORD1(result) > 0x10u)
      {
        uint64_t v7 = 3540LL;
        goto LABEL_14;
      }

      if (v4 > 0x1C0)
      {
        uint64_t v7 = 13156LL;
        goto LABEL_14;
      }

      unsigned int v5 = ((result >> 5) & 0x3F) + word_1809FB5A8[v4 + 2080];
    }

    else
    {
      else {
        int v6 = 320;
      }
      unsigned int v5 = v6 + (result >> 5);
    }
  }

  else
  {
    unsigned int v5 = result >> 5;
  }

  uint64_t v7 = (result & 0x1F) + 4 * word_1809FB5A8[v5];
LABEL_14:
  unint64_t v8 = word_1809FB5A8[v7];
  if ((v8 & 8) != 0)
  {
    uint64_t v13 = (__int16 *)((char *)&unk_1809FA5C4 + ((v8 >> 3) & 0x1FFE));
    int v16 = *v13;
    uint64_t v15 = v13 + 1;
    unsigned __int16 v14 = v16;
    if (v16 < 0)
    {
      if ((_DWORD)result == 304) {
        return ((uint64_t (*)(void, void *, uint64_t))a2[3])(*a2, &unk_1809F9F62, 2LL);
      }
      if ((_DWORD)result == 73)
      {
        uint64_t v10 = *a2;
        int v11 = (uint64_t (*)(uint64_t, uint64_t))a2[1];
        uint64_t v12 = 105LL;
        return v11(v10, v12);
      }
    }

    else
    {
      if ((_DWORD)result == 305) {
        return result;
      }
      if ((_DWORD)result == 105)
      {
        uint64_t v10 = *a2;
        int v11 = (uint64_t (*)(uint64_t, uint64_t))a2[1];
        uint64_t v12 = 73LL;
        return v11(v10, v12);
      }
    }

    int v17 = 0;
    int v18 = v14;
    int v19 = v14;
    do
    {
      if (((1 << v17) & v19) != 0)
      {
        uint64_t v20 = byte_1809F9E61[((1 << v17) - 1) & v18];
        if ((v19 & 0x100) != 0) {
          uint64_t v21 = (unsigned __int16)v15[2 * v20 + 1] | ((unsigned __int16)v15[2 * v20] << 16);
        }
        else {
          uint64_t v21 = (unsigned __int16)v15[v20];
        }
        uint64_t result = ((uint64_t (*)(void, uint64_t))a2[1])(*a2, v21);
      }

      ++v17;
    }

    while (v17 != 4);
    if ((v19 & 0x10) != 0)
    {
      uint64_t v22 = byte_1809F9E61[v18 & 0xF];
      if ((v19 & 0x100) != 0) {
        int v23 = (unsigned __int16)v15[2 * v22 + 1] | ((unsigned __int16)v15[2 * v22] << 16);
      }
      else {
        int v23 = (unsigned __int16)v15[v22];
      }
      if ((v19 & 0x400) != 0) {
        int v23 = -v23;
      }
      uint64_t result = ((uint64_t (*)(void, void))a2[1])(*a2, (v23 + v3));
    }

    if ((v19 & 0x40) != 0)
    {
      uint64_t v26 = byte_1809F9E61[v18 & 0x3F];
      unsigned int v27 = &v15[v26];
      uint64_t v28 = (uint64_t)&v15[2 * v26 + 1];
      if ((v19 & 0x100) != 0) {
        BOOL v29 = (__int16 *)v28;
      }
      else {
        BOOL v29 = v27;
      }
      __int16 v30 = *v29;
      uint64_t v24 = (uint64_t)(v29 + 1);
      int v25 = v30 & 0xF;
      if ((v19 & 0x80) == 0)
      {
LABEL_55:
        if (v25)
        {
          int v36 = 0;
          do
          {
            uint64_t v37 = v36 + 1LL;
            uint64_t v38 = *(unsigned __int16 *)(v24 + 2LL * v36);
            if ((v38 & 0xFC00) == 0xD800)
            {
              v36 += 2;
              uint64_t v38 = *(unsigned __int16 *)(v24 + 2 * v37) + ((_DWORD)v38 << 10) - 56613888;
            }

            else
            {
              ++v36;
            }

            uint64_t result = ((uint64_t (*)(void, uint64_t))a2[1])(*a2, v38);
          }

          while (v36 < v25);
        }

        return result;
      }
    }

    else
    {
      uint64_t v24 = 0LL;
      int v25 = 0;
      if ((v19 & 0x80) == 0) {
        goto LABEL_55;
      }
    }

    uint64_t v31 = byte_1809F9E61[v18 & 0x7F];
    uint64_t v32 = &v15[v31];
    unsigned int v33 = &v15[2 * v31 + 1];
    if ((v19 & 0x100) == 0) {
      unsigned int v33 = v32;
    }
    unint64_t v34 = (unsigned __int16)*v33;
    uint64_t v35 = (uint64_t)&v33[(v34 & 0xF) + 1];
    if (v34 >> 4)
    {
      uint64_t result = ((uint64_t (*)(void, uint64_t, void))a2[3])(*a2, v35, v34 >> 4);
      v35 += 2LL * (v34 >> 4);
    }

    uint64_t v24 = v35 + 2 * ((v34 >> 8) & 0xF) + ((v34 >> 11) & 0x1E);
    goto LABEL_55;
  }

  if (v8 >= 0x80 && (v8 & 3) != 0)
  {
    uint64_t v10 = *a2;
    int v11 = (uint64_t (*)(uint64_t, uint64_t))a2[1];
    uint64_t v12 = (v3 + ((__int16)v8 >> 7));
    return v11(v10, v12);
  }

  return result;
}

uint64_t sub_180818394(uint64_t result, void *a2)
{
  int v3 = result;
  unsigned int v4 = result >> 11;
  if (result >> 11 > 0x1A)
  {
    if (WORD1(result))
    {
      if (WORD1(result) > 0x10u)
      {
        uint64_t v7 = 3540LL;
        goto LABEL_14;
      }

      if (v4 > 0x1C0)
      {
        uint64_t v7 = 13156LL;
        goto LABEL_14;
      }

      unsigned int v5 = ((result >> 5) & 0x3F) + word_1809FB5A8[v4 + 2080];
    }

    else
    {
      else {
        int v6 = 320;
      }
      unsigned int v5 = v6 + (result >> 5);
    }
  }

  else
  {
    unsigned int v5 = result >> 5;
  }

  uint64_t v7 = (result & 0x1F) + 4 * word_1809FB5A8[v5];
LABEL_14:
  unint64_t v8 = word_1809FB5A8[v7];
  if ((v8 & 8) == 0)
  {
    if (v8 >= 0x80 && (v8 & 3) != 0)
    {
      uint64_t v10 = *a2;
      int v11 = (uint64_t (*)(uint64_t, uint64_t))a2[1];
      uint64_t v12 = (v3 + ((__int16)v8 >> 7));
      return v11(v10, v12);
    }

    return result;
  }

  uint64_t v13 = (__int16 *)((char *)&unk_1809FA5C4 + ((v8 >> 3) & 0x1FFE));
  int v16 = *v13;
  uint64_t v15 = v13 + 1;
  unsigned __int16 v14 = v16;
  if (v16 < 0)
  {
    if ((_DWORD)result == 304) {
      return result;
    }
    if ((_DWORD)result == 73)
    {
      uint64_t v10 = *a2;
      int v11 = (uint64_t (*)(uint64_t, uint64_t))a2[1];
      uint64_t v12 = 105LL;
      return v11(v10, v12);
    }
  }

  else
  {
    if ((_DWORD)result == 305) {
      return result;
    }
    if ((_DWORD)result == 105)
    {
      uint64_t v10 = *a2;
      int v11 = (uint64_t (*)(uint64_t, uint64_t))a2[1];
      uint64_t v12 = 73LL;
      return v11(v10, v12);
    }
  }

  int v17 = 0;
  int v18 = v14;
  int v19 = v14;
  do
  {
    if (((1 << v17) & v19) != 0)
    {
      uint64_t v20 = byte_1809F9E61[((1 << v17) - 1) & v18];
      if ((v19 & 0x100) != 0) {
        uint64_t v21 = (unsigned __int16)v15[2 * v20 + 1] | ((unsigned __int16)v15[2 * v20] << 16);
      }
      else {
        uint64_t v21 = (unsigned __int16)v15[v20];
      }
      uint64_t result = ((uint64_t (*)(void, uint64_t))a2[1])(*a2, v21);
    }

    ++v17;
  }

  while (v17 != 4);
  if ((v19 & 0x10) != 0)
  {
    uint64_t v22 = byte_1809F9E61[v18 & 0xF];
    if ((v19 & 0x100) != 0) {
      int v23 = (unsigned __int16)v15[2 * v22 + 1] | ((unsigned __int16)v15[2 * v22] << 16);
    }
    else {
      int v23 = (unsigned __int16)v15[v22];
    }
    if ((v19 & 0x400) != 0) {
      int v23 = -v23;
    }
    uint64_t result = ((uint64_t (*)(void, void))a2[1])(*a2, (v23 + v3));
  }

  if ((v19 & 0x40) != 0)
  {
    uint64_t v24 = byte_1809F9E61[v18 & 0x3F];
    if ((v19 & 0x100) != 0)
    {
      __int16 v30 = &v15[2 * v24];
      int v28 = v30[1] & 0xF;
      unint64_t v26 = (unint64_t)(v30 + 2);
      if ((v19 & 0x80) != 0 && v28)
      {
        BOOL v29 = &v15[2 * byte_1809F9E61[v18 & 0x7F] + 1];
        goto LABEL_50;
      }
    }

    else
    {
      int v25 = &v15[v24];
      __int16 v27 = *v25;
      unint64_t v26 = (unint64_t)(v25 + 1);
      int v28 = v27 & 0xF;
      if ((v19 & 0x80) != 0 && v28)
      {
        BOOL v29 = &v15[byte_1809F9E61[v18 & 0x7F]];
LABEL_50:
        unint64_t v26 = (unint64_t)&v29[(*v29 & 0xFLL)
                                   + 1
                                   + (*v29 >> 4)
                                   + (((unint64_t)(unsigned __int16)*v29 >> 8) & 0xF)]
            + (((unint64_t)(unsigned __int16)*v29 >> 11) & 0x1E);
LABEL_52:
        int v31 = 0;
        do
        {
          uint64_t v32 = v31 + 1LL;
          uint64_t v33 = *(unsigned __int16 *)(v26 + 2LL * v31);
          if ((v33 & 0xFC00) == 0xD800)
          {
            v31 += 2;
            uint64_t v33 = *(unsigned __int16 *)(v26 + 2 * v32) + ((_DWORD)v33 << 10) - 56613888;
          }

          else
          {
            ++v31;
          }

          uint64_t result = ((uint64_t (*)(void, uint64_t))a2[1])(*a2, v33);
        }

        while (v31 < v28);
        return result;
      }
    }

    if (!v28) {
      return result;
    }
    goto LABEL_52;
  }

  return result;
}

uint64_t sub_180818650(unsigned __int16 *a1, int a2, void *a3)
{
  uint64_t v3 = 0LL;
  if (a1 && (a2 - 4) >= 0xFFFFFFFE)
  {
    int v5 = 0;
    int v6 = 73;
LABEL_4:
    if (v6 + v5 < 0 != __OFADD__(v6, v5)) {
      int v7 = v6 + v5 + 1;
    }
    else {
      int v7 = v6 + v5;
    }
    int v8 = v7 >> 1;
    int v9 = (char *)&unk_1809FB2C4 + 10 * (v7 >> 1) + 10;
    int v10 = a2 + 1;
    int v11 = a1;
    uint64_t v12 = v9;
    do
    {
      int v14 = (unsigned __int16)*v12++;
      int v13 = v14;
      if (!v14)
      {
        int v15 = 1;
LABEL_18:
        if (v15 < 0) {
          int v6 = v8;
        }
        else {
          int v5 = v8 + 1;
        }
        if (v5 >= v6) {
          return 0LL;
        }
        goto LABEL_4;
      }

      int v15 = *v11 - v13;
      if (v15) {
        goto LABEL_15;
      }
      ++v11;
      --v10;
    }

    while (v10 > 1);
    if (a2 == 3) {
      goto LABEL_23;
    }
    if (*v12) {
      int v15 = -1;
    }
    else {
      int v15 = 0;
    }
LABEL_15:
    if (v15) {
      goto LABEL_18;
    }
LABEL_23:
    int v16 = 3;
    do
    {
      uint64_t v17 = *(unsigned __int16 *)&v9[2 * v16];
      if (!*(_WORD *)&v9[2 * v16]) {
        break;
      }
      uint64_t v18 = v16 + 1LL;
      if ((v17 & 0xFC00) == 0xD800)
      {
        v16 += 2;
        uint64_t v17 = *(unsigned __int16 *)&v9[2 * v18] + ((_DWORD)v17 << 10) - 56613888;
      }

      else
      {
        ++v16;
      }

      ((void (*)(void, uint64_t))a3[1])(*a3, v17);
      sub_18081809C(v17, a3);
    }

    while (v16 < 5);
    return 1LL;
  }

  return v3;
}

double icu::FullCaseFoldingIterator::FullCaseFoldingIterator(icu::FullCaseFoldingIterator *this)
{
  *(void *)&double result = 0x500000049LL;
  *(_OWORD *)((char *)this + 8) = xmmword_1809F9E40;
  *((_DWORD *)this + 6) = 3;
  *(void *)this = &unk_1809FB2CE;
  return result;
}

{
  double result;
  *(void *)&double result = 0x500000049LL;
  *(_OWORD *)((char *)this + 8) = xmmword_1809F9E40;
  *((_DWORD *)this + 6) = 3;
  *(void *)this = &unk_1809FB2CE;
  return result;
}

uint64_t icu::FullCaseFoldingIterator::next(icu::FullCaseFoldingIterator *this, icu::UnicodeString *a2)
{
  uint64_t v3 = *((int *)this + 3);
  int v4 = *((_DWORD *)this + 5);
  uint64_t v5 = *((int *)this + 6);
  int v6 = (const UChar *)(*(void *)this + 2LL * (int)v3 * v4);
  if ((int)v5 >= (int)v3 || !v6[v5])
  {
    ++v4;
    int v7 = *((_DWORD *)this + 4);
    v6 += v3;
    *((_DWORD *)this + 5) = v4;
    *((_DWORD *)this + 6) = v7;
  }

  if (v4 >= *((_DWORD *)this + 2)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = *((unsigned int *)this + 4);
  int v9 = v8 & ((int)v8 >> 31);
  uint64_t v10 = 2 * v8 - 2;
  while (1)
  {
    BOOL v11 = __OFSUB__((_DWORD)v8, 1);
    LODWORD(v8) = v8 - 1;
    int v12 = *(const UChar *)((char *)v6 + v10);
    v10 -= 2LL;
    if (v12)
    {
      int v9 = v8 + 1;
      break;
    }
  }

  int v15 = v6;
  icu::UnicodeString::setTo(a2, 0, &v15, v9);
  uint64_t v13 = *((int *)this + 6);
  *((_DWORD *)this + 6) = v13 + 1;
  uint64_t result = v6[v13];
  if ((result & 0xFC00) == 0xD800)
  {
    *((_DWORD *)this + 6) = v13 + 2;
    return v6[(int)v13 + 1] + ((_DWORD)result << 10) - 56613888;
  }

  return result;
}

uint64_t ucase_getType(unsigned int a1)
{
  unsigned int v1 = a1 >> 11;
  if (a1 >> 11 <= 0x1A)
  {
    int v2 = a1 >> 5;
LABEL_13:
    uint64_t v4 = (a1 & 0x1F) + 4 * word_1809FB5A8[v2];
    return word_1809FB5A8[v4] & 3;
  }

  if (!HIWORD(a1))
  {
    if (a1 >> 10 >= 0x37) {
      int v3 = 0;
    }
    else {
      int v3 = 320;
    }
    int v2 = v3 + (a1 >> 5);
    goto LABEL_13;
  }

  if (HIWORD(a1) <= 0x10u)
  {
    if (v1 <= 0x1C0)
    {
      int v2 = ((a1 >> 5) & 0x3F) + word_1809FB5A8[v1 + 2080];
      goto LABEL_13;
    }

    uint64_t v4 = 13156LL;
  }

  else
  {
    uint64_t v4 = 3540LL;
  }

  return word_1809FB5A8[v4] & 3;
}

uint64_t ucase_getTypeOrIgnorable(unsigned int a1)
{
  unsigned int v1 = a1 >> 11;
  if (a1 >> 11 <= 0x1A)
  {
    int v2 = a1 >> 5;
LABEL_13:
    uint64_t v4 = (a1 & 0x1F) + 4 * word_1809FB5A8[v2];
    return word_1809FB5A8[v4] & 7;
  }

  if (!HIWORD(a1))
  {
    if (a1 >> 10 >= 0x37) {
      int v3 = 0;
    }
    else {
      int v3 = 320;
    }
    int v2 = v3 + (a1 >> 5);
    goto LABEL_13;
  }

  if (HIWORD(a1) <= 0x10u)
  {
    if (v1 <= 0x1C0)
    {
      int v2 = ((a1 >> 5) & 0x3F) + word_1809FB5A8[v1 + 2080];
      goto LABEL_13;
    }

    uint64_t v4 = 13156LL;
  }

  else
  {
    uint64_t v4 = 3540LL;
  }

  return word_1809FB5A8[v4] & 7;
}

BOOL ucase_isSoftDotted(unsigned int a1)
{
  unsigned int v1 = a1 >> 11;
  if (a1 >> 11 > 0x1A)
  {
    if (HIWORD(a1))
    {
      if (HIWORD(a1) > 0x10u)
      {
        uint64_t v4 = 3540LL;
        goto LABEL_14;
      }

      if (v1 > 0x1C0)
      {
        uint64_t v4 = 13156LL;
        goto LABEL_14;
      }

      int v2 = ((a1 >> 5) & 0x3F) + word_1809FB5A8[v1 + 2080];
    }

    else
    {
      if (a1 >> 10 >= 0x37) {
        int v3 = 0;
      }
      else {
        int v3 = 320;
      }
      int v2 = v3 + (a1 >> 5);
    }
  }

  else
  {
    int v2 = a1 >> 5;
  }

  uint64_t v4 = (a1 & 0x1F) + 4 * word_1809FB5A8[v2];
LABEL_14:
  unint64_t v5 = word_1809FB5A8[v4];
  if ((v5 & 8) != 0) {
    LODWORD(v5) = *(unsigned __int16 *)((char *)&unk_1809FA5C4 + ((v5 >> 3) & 0x1FFE)) >> 7;
  }
  return (v5 & 0x60) == 32;
}

uint64_t ucase_isCaseSensitive(unsigned int a1)
{
  unsigned int v1 = a1 >> 11;
  if (a1 >> 11 > 0x1A)
  {
    if (HIWORD(a1))
    {
      if (HIWORD(a1) > 0x10u)
      {
        uint64_t v4 = 3540LL;
        goto LABEL_14;
      }

      if (v1 > 0x1C0)
      {
        uint64_t v4 = 13156LL;
        goto LABEL_14;
      }

      int v2 = ((a1 >> 5) & 0x3F) + word_1809FB5A8[v1 + 2080];
    }

    else
    {
      if (a1 >> 10 >= 0x37) {
        int v3 = 0;
      }
      else {
        int v3 = 320;
      }
      int v2 = v3 + (a1 >> 5);
    }
  }

  else
  {
    int v2 = a1 >> 5;
  }

  uint64_t v4 = (a1 & 0x1F) + 4 * word_1809FB5A8[v2];
LABEL_14:
  unint64_t v5 = word_1809FB5A8[v4];
  if ((v5 & 8) != 0) {
    LODWORD(v5) = *(unsigned __int16 *)((char *)&unk_1809FA5C4 + ((v5 >> 3) & 0x1FFE)) >> 11;
  }
  else {
    LOBYTE(v5) = v5 >> 4;
  }
  return v5 & 1;
}

uint64_t sub_180818B2C(unsigned __int8 *a1)
{
  int v1 = *a1;
  if (v1 == 122) {
    return 1LL;
  }
  if (v1 == 101)
  {
LABEL_3:
    if ((a1[1] & 0xDF) != 0x4C) {
      return 1LL;
    }
    int v2 = a1[2];
    if ((v2 & 0xFFFFFFDF) == 0x4C) {
      int v2 = a1[3];
    }
    uint64_t result = 4LL;
    if (!v2) {
      return result;
    }
LABEL_44:
    if (v2 == 45 || v2 == 95) {
      return result;
    }
    return 1LL;
  }

  if ((char)v1 < 97)
  {
    switch(*a1)
    {
      case 'E':
        goto LABEL_3;
      case 'F':
      case 'G':
      case 'I':
      case 'J':
      case 'K':
      case 'M':
        return 1LL;
      case 'H':
        goto LABEL_19;
      case 'L':
        goto LABEL_15;
      case 'N':
        goto LABEL_28;
      default:
        if (v1 == 65) {
          goto LABEL_33;
        }
        if (v1 == 84) {
          goto LABEL_26;
        }
        return 1LL;
    }
  }

  if (*a1 <= 0x6Bu)
  {
    if (v1 == 97)
    {
LABEL_33:
      if ((a1[1] & 0xDF) != 0x5A) {
        return 1LL;
      }
      int v2 = a1[2];
      if ((v2 & 0xFFFFFFDF) == 0x45) {
        int v2 = a1[3];
      }
      goto LABEL_43;
    }

    if (v1 != 104) {
      return 1LL;
    }
LABEL_19:
    if ((a1[1] & 0xDF) != 0x59) {
      return 1LL;
    }
    int v2 = a1[2];
    if ((v2 & 0xFFFFFFDF) == 0x45) {
      int v2 = a1[3];
    }
    uint64_t result = 6LL;
    if (v2) {
      goto LABEL_44;
    }
  }

  else
  {
    if (v1 == 108)
    {
LABEL_15:
      int v4 = a1[1];
      if ((v4 & 0xFFFFFFDF) == 0x49)
      {
        unint64_t v5 = a1 + 3;
        int v4 = a1[2];
      }

      else
      {
        unint64_t v5 = a1 + 2;
      }

      if ((v4 & 0xFFFFFFDF) != 0x54) {
        return 1LL;
      }
      int v2 = *v5;
      uint64_t result = 3LL;
      if (!v2) {
        return result;
      }
      goto LABEL_44;
    }

    if (v1 != 110)
    {
      if (v1 != 116) {
        return 1LL;
      }
LABEL_26:
      int v6 = a1[1];
      if ((v6 & 0xFFFFFFDF) == 0x55)
      {
        int v7 = a1 + 3;
        int v6 = a1[2];
      }

      else
      {
        int v7 = a1 + 2;
      }

      if ((v6 & 0xFFFFFFDF) != 0x52) {
        return 1LL;
      }
      int v2 = *v7;
LABEL_43:
      uint64_t result = 2LL;
      if (!v2) {
        return result;
      }
      goto LABEL_44;
    }

uint64_t ucase_toFullLower( unsigned int a1, uint64_t (*a2)(uint64_t, void), uint64_t a3, void *a4, int a5)
{
  *a4 = 0LL;
  unsigned int v10 = a1 >> 11;
  if (a1 >> 11 > 0x1A)
  {
    if (HIWORD(a1))
    {
      if (HIWORD(a1) > 0x10u)
      {
        int v13 = 3540;
        goto LABEL_14;
      }

      if (v10 > 0x1C0)
      {
        int v13 = 13156;
        goto LABEL_14;
      }

      int v11 = ((a1 >> 5) & 0x3F) + word_1809FB5A8[v10 + 2080];
    }

    else
    {
      if (a1 >> 10 >= 0x37) {
        int v12 = 0;
      }
      else {
        int v12 = 320;
      }
      int v11 = v12 + (a1 >> 5);
    }
  }

  else
  {
    int v11 = a1 >> 5;
  }

  int v13 = (a1 & 0x1F) + 4 * word_1809FB5A8[v11];
LABEL_14:
  unint64_t v14 = word_1809FB5A8[v13];
  if ((v14 & 8) == 0)
  {
    unsigned int v15 = a1;
    if ((v14 & 2) != 0) {
      unsigned int v15 = a1 + ((__int16)v14 >> 7);
    }
    goto LABEL_17;
  }

  uint64_t v17 = (_WORD *)((char *)&unk_1809FA5C4 + ((v14 >> 3) & 0x1FFE));
  int v19 = v17 + 1;
  __int16 v18 = *v17;
  if ((*v17 & 0x4000) == 0)
  {
    if ((v18 & 0x80) != 0)
    {
      uint64_t v20 = byte_1809F9E61[v18 & 0x7F];
      uint64_t v21 = &v19[v20];
      uint64_t v22 = &v19[2 * v20 + 1];
      if ((*v17 & 0x100) == 0) {
        uint64_t v22 = v21;
      }
      uint64_t result = *v22 & 0xF;
      if ((*v22 & 0xF) != 0)
      {
        *a4 = v22 + 1;
        return result;
      }
    }

    goto LABEL_126;
  }

  if (a5 != 3)
  {
LABEL_63:
    if (a1 == 304 && a5 == 2) {
      return 105LL;
    }
    if (a1 == 775 && a5 == 2)
    {
      if (!a2)
      {
LABEL_126:
        if ((v14 & 2) != 0 && (v18 & 0x10) != 0)
        {
          uint64_t v45 = byte_1809F9E61[v18 & 0xF];
          if ((v18 & 0x100) != 0) {
            int v46 = v19[2 * v45 + 1] | (v19[2 * v45] << 16);
          }
          else {
            int v46 = v19[v45];
          }
          if ((v18 & 0x400) != 0) {
            int v46 = -v46;
          }
          return v46 + a1;
        }

        unsigned int v15 = a1;
        if ((v18 & 1) != 0)
        {
          if ((v18 & 0x100) != 0) {
            unsigned int v15 = (unsigned __int16)v17[2] | ((unsigned __int16)v17[1] << 16);
          }
          else {
            unsigned int v15 = *v19;
          }
        }

LABEL_112:
    if (a1 != 304)
    {
      if (a1 == 931 && !sub_1808192B8((BOOL)a2, a3, 1) && sub_1808192B8((BOOL)a2, a3, -1)) {
        return 962LL;
      }
      goto LABEL_126;
    }

    goto LABEL_124;
  }

  if (a1 - 73 >= 2)
  {
    if (a1 == 204)
    {
LABEL_121:
      UChar32 v43 = &unk_1809FA570;
      goto LABEL_144;
    }

    if (a1 == 205) {
      goto LABEL_142;
    }
    goto LABEL_126;
  }

          if ((int)v46 < v12)
          {
            uint64_t v63 = v48;
            int v53 = *(char *)(a4 + (int)v46);
            unsigned int v54 = *(unsigned __int8 *)(a4 + (int)v46);
            if (v53 < 0)
            {
              int v55 = (int)v46 + 1LL;
              if ((_DWORD)v55 == v12) {
                goto LABEL_130;
              }
              if (v54 < 0xE0)
              {
                if (v54 < 0xC2) {
                  goto LABEL_130;
                }
                BOOL v58 = v54 & 0x1F;
LABEL_123:
                unsigned int v59 = *(unsigned __int8 *)(a4 + (int)v55) ^ 0x80;
                if (v59 > 0x3F) {
                  goto LABEL_130;
                }
                unsigned int v54 = v59 | (v58 << 6);
              }

              else
              {
                if (v54 <= 0xEF)
                {
                  int v56 = v53 & 0xF;
                  if (((a00000000000000[v56] >> (*(_BYTE *)(a4 + v55) >> 5)) & 1) != 0)
                  {
                    unsigned int v57 = *(_BYTE *)(a4 + v55) & 0x3F;
                    goto LABEL_119;
                  }

                  goto LABEL_130;
                }

                if (v54 <= 0xF4)
                {
                  int v55 = *(unsigned __int8 *)(a4 + v55);
                  if (((byte_180A01C78[v55 >> 4] >> (v54 + 16)) & 1) != 0 && (_DWORD)v46 + 2 != v12)
                  {
                    unsigned int v57 = *(unsigned __int8 *)(a4 + (int)v46 + 2LL) ^ 0x80;
                    if (v57 <= 0x3F)
                    {
                      LODWORD(v56) = v55 & 0x3F | ((v54 - 240) << 6);
                      LODWORD(v55) = v46 + 2;
LABEL_119:
                      LODWORD(v55) = v55 + 1;
                      if ((_DWORD)v55 != v12)
                      {
                        BOOL v58 = v57 | ((_DWORD)v56 << 6);
                        goto LABEL_123;
                      }
                    }
                  }
                }

        int v9 = 0;
        uint64_t v8 = v8 - sub_180864178((unsigned __int8 **)&v68);
      }

      else
      {
        unsigned int v59 = 1;
LABEL_115:
        uint64_t v8 = (v8 - v59);
        if (!(_DWORD)v8)
        {
          int v13 = 0LL;
          goto LABEL_131;
        }

        unsigned int v60 = LODWORD(v70[0]) + v59;
        else {
          int v61 = 0;
        }
        signed int v62 = v60 - v61;
        if (*((_BYTE *)v68 + v62))
        {
          *((_BYTE *)v68 + v62) = 0;
          --HIDWORD(v69);
        }

        int v9 = 0;
        LODWORD(v70[0]) = v62;
      }
    }

    else
    {
      uint64_t v63 = icu::UnicodeSet::spanBack(v64, s);
      int v13 = v63;
      if (!(_DWORD)v63) {
        goto LABEL_131;
      }
      int v9 = v8 - v63;
      uint64_t v8 = v63;
      if (!v9) {
        goto LABEL_131;
      }
    }
  }

  if (HIDWORD(v69)) {
    goto LABEL_112;
  }
  int v13 = v8;
LABEL_131:
  unsigned int v32 = (char *)v68;
LABEL_126:
  return v13;
}

      src = v36;
      unsigned int v38 = __OFSUB__(v22--, 1);
      if ((v22 < 0) ^ v38 | (v22 == 0))
      {
LABEL_114:
        int v39 = (unsigned __int128)((v10 - v24) * (__int128)0x5555555555555556LL) >> 64;
        uint64_t v22 = v39 + (v39 >> 63);
        if (v22 < 3) {
          goto LABEL_31;
        }
      }
    }
  }

  char v23 = 0;
  unsigned int v24 = dest;
LABEL_31:
  if (src >= v19)
  {
LABEL_61:
    int v29 = 0;
    goto LABEL_138;
  }

  while (1)
  {
    int v26 = src + 1;
    int v25 = *src;
    if (v25 <= 0x7F)
    {
      if (v24 >= v10)
      {
        int v29 = 1;
        goto LABEL_137;
      }

      *v24++ = v25;
      goto LABEL_60;
    }

    if (v25 > 0x7FF) {
      break;
    }
    if (v10 - v24 < 2)
    {
      int v29 = 2;
      goto LABEL_137;
    }

    *unsigned int v24 = (v25 >> 6) | 0xC0;
    v24[1] = v25 & 0x3F | 0x80;
    v24 += 2;
LABEL_60:
    src = v26;
    if (v26 >= v19) {
      goto LABEL_61;
    }
  }

  if ((unsigned __int16)((unsigned __int16)(v25 + 0x2000) >> 11) > 0x1Eu)
  {
    if ((v25 & 0x400) != 0 || v26 >= v19 || (uint64_t v27 = *v26, (v27 & 0xFC00) != 0xDC00))
    {
      ++v23;
      unint64_t v28 = subchar;
    }

    else
    {
      int v26 = src + 2;
      unint64_t v28 = v27 + (v25 << 10) - 56613888;
    }

    if (v28 >= 0x80)
    {
      if (v28 >= 0x800)
      {
        if (v28 >> 11 >= 0x1B)
        {
          if (v28 - 1114112 >= 0xFFEFE000)
          {
            if (v28 < 0x10000) {
              int v29 = 3;
            }
            else {
              int v29 = 4;
            }
          }

          else
          {
            int v29 = 0;
          }
        }

        else
        {
          int v29 = 3;
        }
      }

      else
      {
        int v29 = 2;
      }
    }

    else
    {
      int v29 = 1;
    }

    if (v10 - v24 < v29) {
      goto LABEL_137;
    }
    unsigned int v24 = sub_1808820B4(v24, v28);
    goto LABEL_60;
  }

  if (v10 - v24 >= 3)
  {
    *unsigned int v24 = (v25 >> 12) | 0xE0;
    v24[1] = (v25 >> 6) & 0x3F | 0x80;
    v24[2] = v25 & 0x3F | 0x80;
    v24 += 3;
    goto LABEL_60;
  }

  int v29 = 3;
LABEL_137:
  src = v26;
LABEL_138:
  if (src < v19)
  {
    else {
      unint64_t v42 = 4;
    }
    else {
      UChar32 v43 = 2;
    }
    else {
      unsigned int v44 = v43;
    }
    uint64_t v45 = src;
    do
    {
      int v47 = *v45++;
      int v46 = v47;
      if (v47 > 0x7F)
      {
        if (v46 > 0x7FF)
        {
          if ((v46 & 0xF800) == 0xD800)
          {
            if ((v46 & 0x400) != 0 || v45 >= v19 || (*v45 & 0xFC00) != 0xDC00)
            {
              v29 += v44;
              ++v23;
            }

            else
            {
              uint64_t v45 = src + 2;
              v29 += 4;
            }
          }

          else
          {
            v29 += 3;
          }
        }

        else
        {
          v29 += 2;
        }
      }

      else
      {
        ++v29;
      }

      src = v45;
    }

    while (v45 < v19);
  }

LABEL_142:
    UChar32 v43 = &unk_1809FA576;
    goto LABEL_144;
  }

  uint64_t result = 0LL;
  if ((int)a1 > 204)
  {
    if (a1 == 205) {
      goto LABEL_142;
    }
    if (a1 == 296) {
      goto LABEL_143;
    }
    if (a1 != 302) {
      return result;
    }
    unsigned int v44 = &unk_1809FA56A;
LABEL_125:
    *a4 = v44;
    return 2LL;
  }

  switch(a1)
  {
    case 0x49u:
LABEL_124:
      unsigned int v44 = &unk_1809F9F62;
      goto LABEL_125;
    case 0x4Au:
      unsigned int v44 = &unk_1809FA566;
      goto LABEL_125;
    case 0xCCu:
      goto LABEL_121;
  }

  return result;
}

BOOL sub_1808192B8(BOOL result, uint64_t a2, char a3)
{
  if (result)
  {
    int v4 = (uint64_t (*)(uint64_t, void))result;
    while (1)
    {
      unsigned int v5 = v4(a2, a3);
      if ((v5 & 0x80000000) != 0) {
        break;
      }
      unsigned int TypeOrIgnorable = ucase_getTypeOrIgnorable(v5);
      a3 = 0;
      if (TypeOrIgnorable <= 3) {
        return TypeOrIgnorable != 0;
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t ucase_toFullUpper( unsigned int a1, uint64_t (*a2)(uint64_t, void), uint64_t a3, void *a4, int a5)
{
  return sub_180819314(a1, a2, a3, a4, a5, 1);
}

uint64_t sub_180819314( unsigned int a1, uint64_t (*a2)(uint64_t, void), uint64_t a3, void *a4, int a5, int a6)
{
  *a4 = 0LL;
  unsigned int v12 = a1 >> 11;
  if (a1 >> 11 > 0x1A)
  {
    if (HIWORD(a1))
    {
      if (HIWORD(a1) > 0x10u)
      {
        uint64_t v15 = 3540LL;
        goto LABEL_14;
      }

      if (v12 > 0x1C0)
      {
        uint64_t v15 = 13156LL;
        goto LABEL_14;
      }

      int v13 = ((a1 >> 5) & 0x3F) + word_1809FB5A8[v12 + 2080];
    }

    else
    {
      if (a1 >> 10 >= 0x37) {
        int v14 = 0;
      }
      else {
        int v14 = 320;
      }
      int v13 = v14 + (a1 >> 5);
    }
  }

  else
  {
    int v13 = a1 >> 5;
  }

  uint64_t v15 = (a1 & 0x1F) + 4 * word_1809FB5A8[v13];
LABEL_14:
  unint64_t v16 = word_1809FB5A8[v15];
  if ((v16 & 8) == 0)
  {
    unsigned int v17 = a1;
    if ((v16 & 3) == 1) {
      unsigned int v17 = a1 + ((__int16)v16 >> 7);
    }
LABEL_17:
    if (v17 == a1) {
      return ~v17;
    }
    else {
      return v17;
    }
  }

  uint64_t v19 = (v16 >> 3) & 0x1FFE;
  uint64_t v21 = (char *)&unk_1809FA5C4 + v19 + 2;
  int v20 = *(unsigned __int16 *)((char *)&unk_1809FA5C4 + v19);
  if ((v20 & 0x4000) == 0)
  {
    if ((v20 & 0x80) != 0)
    {
      uint64_t v22 = byte_1809F9E61[v20 & 0x7F];
      char v23 = &v21[2 * v22];
      uint64_t v24 = (uint64_t)&v21[4 * v22 + 2];
      if ((v20 & 0x100) != 0) {
        char v23 = (char *)v24;
      }
      unint64_t v25 = *(unsigned __int16 *)v23;
      unsigned int v26 = v25 >> 8;
      if (!a6) {
        LOBYTE(v26) = v25 >> 12;
      }
      uint64_t result = v26 & 0xF;
      if ((v26 & 0xF) != 0)
      {
        uint64_t v27 = (uint64_t)&v23[2 * (v25 & 0xF) + 2 * (v25 >> 4)];
        uint64_t v28 = (v25 >> 8) & 0xF;
        if (a6) {
          uint64_t v28 = 0LL;
        }
        *a4 = v27 + 2 * v28 + 2;
        return result;
      }
    }

    goto LABEL_64;
  }

  if (a1 == 105 && a5 == 2) {
    return 304LL;
  }
  if (a1 == 775 && a5 == 3)
  {
    if (a2)
    {
      char v29 = -1;
      while (1)
      {
        unsigned int v30 = a2(a3, v29);
        if ((v30 & 0x80000000) != 0) {
          goto LABEL_57;
        }
        if (v30 >> 11 > 0x1A)
        {
          if (HIWORD(v30))
          {
            if (v30 > 0x10FFFF)
            {
              uint64_t v33 = 3540LL;
              goto LABEL_46;
            }

            if (v30 > 0xE07FF)
            {
              uint64_t v33 = 13156LL;
              goto LABEL_46;
            }

            int v31 = ((v30 >> 5) & 0x3F) + word_1809FB5A8[(v30 >> 11) + 2080];
          }

          else
          {
            if (v30 >> 10 >= 0x37) {
              int v32 = 0;
            }
            else {
              int v32 = 320;
            }
            int v31 = v32 + (v30 >> 5);
          }
        }

        else
        {
          int v31 = v30 >> 5;
        }

        uint64_t v33 = (v30 & 0x1F) + 4 * word_1809FB5A8[v31];
LABEL_46:
        unint64_t v34 = word_1809FB5A8[v33];
        if ((v34 & 8) != 0) {
          LODWORD(v34) = *(unsigned __int16 *)((char *)&unk_1809FA5C4 + ((v34 >> 3) & 0x1FFE)) >> 7;
        }
        char v29 = 0;
        int v35 = v34 & 0x60;
        if (v35 != 96)
        {
          if (v35 != 32) {
            goto LABEL_57;
          }
          return 0LL;
        }
      }
    }
  }

  else
  {
LABEL_57:
    if (a1 == 1415)
    {
      unint64_t v36 = &unk_180A47C36;
      if (a6)
      {
        uint64_t v37 = &unk_180A47C2A;
      }

      else
      {
        unint64_t v36 = &unk_180A47C3C;
        uint64_t v37 = &unk_180A47C30;
      }

      if (a5 == 6) {
        unint64_t v36 = v37;
      }
      *a4 = v36;
      return 2LL;
    }
  }

uint64_t ucase_toFullTitle( unsigned int a1, uint64_t (*a2)(uint64_t, void), uint64_t a3, void *a4, int a5)
{
  return sub_180819314(a1, a2, a3, a4, a5, 0);
}

uint64_t ucase_fold(uint64_t result, char a2)
{
  unsigned int v2 = result >> 11;
  if (result >> 11 <= 0x1A)
  {
    unsigned int v3 = result >> 5;
LABEL_8:
    uint64_t v5 = (result & 0x1F) + 4 * word_1809FB5A8[v3];
    goto LABEL_9;
  }

  if (!WORD1(result))
  {
    else {
      int v4 = 320;
    }
    unsigned int v3 = v4 + (result >> 5);
    goto LABEL_8;
  }

  if (WORD1(result) <= 0x10u)
  {
    if (v2 <= 0x1C0)
    {
      unsigned int v3 = ((result >> 5) & 0x3F) + word_1809FB5A8[v2 + 2080];
      goto LABEL_8;
    }

    uint64_t v5 = 13156LL;
  }

  else
  {
    uint64_t v5 = 3540LL;
  }

uint64_t ucase_toFullFolding(unsigned int a1, void *a2, char a3)
{
  *a2 = 0LL;
  unsigned int v3 = a1 >> 11;
  if (a1 >> 11 <= 0x1A)
  {
    int v4 = a1 >> 5;
LABEL_8:
    uint64_t v6 = (a1 & 0x1F) + 4 * word_1809FB5A8[v4];
    goto LABEL_9;
  }

  if (!HIWORD(a1))
  {
    if (a1 >> 10 >= 0x37) {
      int v5 = 0;
    }
    else {
      int v5 = 320;
    }
    int v4 = v5 + (a1 >> 5);
    goto LABEL_8;
  }

  if (HIWORD(a1) <= 0x10u)
  {
    if (v3 <= 0x1C0)
    {
      int v4 = ((a1 >> 5) & 0x3F) + word_1809FB5A8[v3 + 2080];
      goto LABEL_8;
    }

    uint64_t v6 = 13156LL;
  }

  else
  {
    uint64_t v6 = 3540LL;
  }

UBool u_isULowercase(UChar32 c)
{
  return ucase_getType(c) == 1;
}

UBool u_isUUppercase(UChar32 c)
{
  return ucase_getType(c) == 2;
}

uint64_t sub_180819A64(unsigned int a1, int a2)
{
  unsigned int v2 = a1;
  uint64_t v3 = 0LL;
  if (a2 > 33)
  {
    switch(a2)
    {
      case '1':
        return ucase_getType(a1) != 0;
      case '2':
        return ucase_getTypeOrIgnorable(a1) >> 2;
      case '3':
        int v6 = ucase_toFullLower(a1, 0LL, 0LL, &v9, 1);
        return v6 >= 0;
      case '4':
        int v7 = 1;
        goto LABEL_22;
      case '5':
        goto LABEL_21;
      case '6':
        return v3;
      case '7':
        uint64_t v3 = 1LL;
        if ((ucase_toFullLower(a1, 0LL, 0LL, &v9, 1) & 0x80000000) != 0
          && (sub_180819314(v2, 0LL, 0LL, &v9, 1, 1) & 0x80000000) != 0)
        {
LABEL_21:
          a1 = v2;
          int v7 = 0;
LABEL_22:
          int v6 = sub_180819314(a1, 0LL, 0LL, &v9, 1, v7);
          return v6 >= 0;
        }

        return v3;
      default:
        if (a2 != 34) {
          return v3;
        }
        unsigned __int8 isCaseSensitive = ucase_isCaseSensitive(a1);
        break;
    }

    return isCaseSensitive;
  }

  switch(a2)
  {
    case 22:
      return ucase_getType(a1) == 1;
    case 27:
      return ucase_isSoftDotted(a1);
    case 30:
      return ucase_getType(a1) == 2;
  }

  return v3;
}

uint64_t ucasemap_setLocale(uint64_t result, char *a2, int *a3)
{
  if (*a3 <= 0)
  {
    uint64_t v5 = result;
    if (a2 && !*a2)
    {
      *(_BYTE *)(result + 8) = 0;
LABEL_12:
      uint64_t result = 1LL;
LABEL_14:
      *(_DWORD *)(v5 + 40) = result;
      return result;
    }

    int v6 = (_BYTE *)(result + 8);
    int Name = uloc_getName(a2, (char *)(result + 8), 32, a3);
    int v8 = *a3;
    if (*a3 == 15 || Name == 32)
    {
      *a3 = 0;
      if (uloc_getLanguage((uint64_t)a2, (char *)(v5 + 8), 32, a3) == 32)
      {
        *a3 = 15;
LABEL_11:
        *int v6 = 0;
        goto LABEL_12;
      }

      int v8 = *a3;
    }

    if (v8 <= 0)
    {
      uint64_t result = sub_180818B2C((unsigned __int8 *)(v5 + 8));
      goto LABEL_14;
    }

    goto LABEL_11;
  }

  return result;
}

uint64_t *ucasemap_open(char *a1, unint64_t a2, int *a3)
{
  uint64_t v3 = (uint64_t *)*a3;
  int v7 = a2;
  uint64_t v9 = icu::UMemory::operator new(v3, (icu::UMemory *)0x30, a2);
  int v4 = v9;
  if (!v9)
  {
    *a3 = 7;
    return v4;
  }

  *uint64_t v9 = 0LL;
  *((_DWORD *)v9 + 10) = 0;
  *((_DWORD *)v9 + 1icu::UVector32::~UVector32(this + 1) = v7;
  ucasemap_setLocale((uint64_t)v9, a1, a3);
  if (*a3 >= 1)
  {
    if (*v4) {
      (*(void (**)(uint64_t))(*(void *)*v4 + 8LL))(*v4);
    }
    icu::UMemory::operator delete(v4);
    return 0LL;
  }

  return v4;
}

void ucasemap_close(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    icu::UMemory::operator delete(a1);
  }

uint64_t ucasemap_getLocale(uint64_t a1)
{
  return a1 + 8;
}

uint64_t ucasemap_getOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t ucasemap_setOptions(uint64_t result, int a2, int *a3)
{
  if (*a3 <= 0) {
    *(_DWORD *)(result + 44) = a2;
  }
  return result;
}

uint64_t sub_180819DA8( uint64_t result, icu::ByteSink *a2, void *a3, uint64_t a4, int a5, uint64_t a6, icu::Edits *a7, int *a8)
{
  if (*a8 <= 0)
  {
    if ((~(_DWORD)a2 & 0x600) == 0)
    {
      *a8 = 1;
      return result;
    }

    int v68 = result;
    uint64_t v72 = 0LL;
    v70[0] = a4;
    v70[1] = 0LL;
    uint64_t v71 = a5;
    if (a5 >= 1)
    {
      int v12 = 0;
      uint64_t v13 = 10LL;
      do
      {
        int v14 = v12;
        uint64_t result = (*(uint64_t (**)(void *))(*a3 + 8 * v13))(a3);
        else {
          int v12 = result;
        }
        if (v14 >= v12) {
          goto LABEL_140;
        }
        uint64_t v18 = v14 + 1LL;
        uint64_t v19 = (unsigned __int8 *)(a4 + v14);
        int v20 = (char)*v19;
        unsigned int v21 = *v19;
        if ((v20 & 0x80000000) == 0) {
          goto LABEL_36;
        }
        if ((_DWORD)v18 != v12)
        {
          if (v21 < 0xE0)
          {
            if (v21 >= 0xC2)
            {
              int v24 = v21 & 0x1F;
LABEL_25:
              unsigned int v25 = *(unsigned __int8 *)(a4 + (int)v18) ^ 0x80;
              int v26 = v25 | (v24 << 6);
              if (v25 > 0x3F)
              {
                unsigned int v21 = -1;
              }

              else
              {
                LODWORD(v18) = v18 + 1;
                unsigned int v21 = v26;
              }

              if (((unsigned __int16)a2 & 0x200) != 0)
              {
LABEL_67:
                int v27 = v14;
                int v28 = v18;
                goto LABEL_68;
              }

              goto LABEL_37;
            }

LABEL_68:
        if (v28 <= v27) {
          goto LABEL_140;
        }
        if ((v21 & 0x80000000) != 0)
        {
          if (*a8 > 0) {
            return result;
          }
          if (v28 - v27 >= 1) {
            uint64_t result = (uint64_t)icu::ByteSinkUtil::appendNonEmptyUnchanged( (_DWORD *)(a4 + v27),  (const unsigned __int8 *)(v28 - v27),  a6,  a2,  a7,  v16);
          }
          goto LABEL_83;
        }

        HIDWORD(v7icu::UVector32::~UVector32(this + 1) = v27;
        LODWORD(v72) = v28;
        uint64_t v69 = 0LL;
        unsigned int v40 = ucase_toFullTitle(v21, (uint64_t (*)(uint64_t, void))sub_18081A51C, (uint64_t)v70, &v69, v68);
        unsigned int v21 = v40;
        if ((v40 & 0x80000000) != 0)
        {
          uint64_t result = (uint64_t)a7;
          if (a7) {
            uint64_t result = (uint64_t)icu::Edits::addUnchanged(a7, v28 - v27);
          }
          unsigned int v41 = ~v21;
          unint64_t v42 = (icu::ByteSinkUtil *)(v28 - v27);
          uint64_t v43 = a6;
          unsigned int v44 = 0LL;
LABEL_82:
          uint64_t result = icu::ByteSinkUtil::appendCodePoint(v42, v41, v43, v44, v15);
          goto LABEL_83;
        }

        uint64_t v15 = a7;
        if (v40 >= 0x20)
        {
          unint64_t v42 = (icu::ByteSinkUtil *)(v28 - v27);
          unsigned int v41 = v21;
          uint64_t v43 = a6;
          unsigned int v44 = a7;
          goto LABEL_82;
        }

        uint64_t result = icu::ByteSinkUtil::appendChange(v28 - v27, v69, v40, a6, a7, a8);
        if (!(_DWORD)result) {
          return result;
        }
LABEL_83:
        if (v68 != 5) {
          goto LABEL_132;
        }
        if (v28 >= v12) {
          goto LABEL_132;
        }
        int v45 = v21 ^ ((int)v21 >> 31);
        if (v45 != 205 && v45 != 73) {
          goto LABEL_132;
        }
        uint64_t v46 = v28 + 1LL;
        int v47 = *(unsigned __int8 *)(a4 + v28);
        if (v45 != 73)
        {
          uint64_t v48 = 0LL;
LABEL_94:
          int v49 = 1;
LABEL_96:
          if (v47 == 106)
          {
            int v50 = 1;
            if (v49) {
              goto LABEL_101;
            }
            unsigned int v64 = 0;
          }

          else
          {
            if (v47 != 74) {
              goto LABEL_132;
            }
            int v50 = 0;
            uint64_t v48 = v48 | 1;
            if ((v49 & 1) == 0)
            {
              unsigned int v64 = 0;
              goto LABEL_112;
            }

  unsigned int v38 = v25;
  LODWORD(v24) = v24 + 1;
LABEL_58:
  *(_DWORD *)a6 = v26 | v27;
  icu::UnicodeString::releaseBuffer((uint64_t)this, v24);
  sub_18088D630(a1, (icu::UnicodeString *)a2, v38, v24, a3, a4, (uint64_t)this, a6, a7);
  if (*(_BYTE *)(a6 + 9)) {
    int v39 = *a7 <= 0;
  }
  else {
    int v39 = 0;
  }
  if (v39)
  {
    unsigned int v40 = *(_DWORD *)a6;
    if ((*(_DWORD *)a6 & 0x7C0) == 0)
    {
      if (!*(_BYTE *)(a6 + 10)
        || (int)v38 >= 1
        && ((unsigned int v41 = *((_WORD *)this + 4), (v41 & 0x11) == 0)
          ? ((uint64_t v43 = v38, (v41 & 2) != 0)
           ? (unint64_t v42 = (char *)this + 10)
           : (unint64_t v42 = (char *)*((void *)this + 3)))
          : (char *)(v42 = 0LL, uint64_t v43 = v38),
            !sub_18088D998((uint64_t)v42, v43)))
      {
        uint64_t v15 = v40 | 0x800;
        goto LABEL_74;
      }
    }
  }

  return this;
}

    if (v33 > 9) {
      goto LABEL_73;
    }
    int v36 = 1 << v33;
    if ((v36 & 0x150) != 0)
    {
      uint64_t v30 = 98;
      goto LABEL_74;
    }

    if ((v36 & 0x2A0) == 0)
    {
LABEL_73:
      uint64_t v30 = 97;
      goto LABEL_74;
    }

    uint64_t v30 = 66;
LABEL_74:
    if (v31 != 72 && v31 != 107)
    {
      unsigned int v37 = v29 + 1;
      do
      {
        int v45 = v30;
        icu::UnicodeString::doAppend((uint64_t)&v46, (uint64_t)&v45, 0, 1LL);
        --v37;
      }

      while (v37 > 1);
    }

    unsigned int v38 = v28 + 1;
    do
    {
      int v45 = v31;
      icu::UnicodeString::doAppend((uint64_t)&v46, (uint64_t)&v45, 0, 1LL);
      --v38;
    }

    while (v38 > 1);
    int v14 = 0;
LABEL_81:
    ++v13;
  }

  while (v13 < (int)v11);
LABEL_82:
  icu::UnicodeString::UnicodeString(a6, (icu::UnicodeString *)&v46);
  return icu::UnicodeString::~UnicodeString((void *)v39, (icu::UnicodeString *)&v46);
}

  int v31 = 66308LL;
  pErrorCode = U_REGEX_PROPERTY_SYNTAX;
LABEL_88:
  icu::UnicodeString::~UnicodeString((void *)v31, (icu::UnicodeString *)v93);
LABEL_89:
  icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v94);
  int v58 = pErrorCode;
  if (pErrorCode <= U_ZERO_ERROR)
  {
    icu::UnicodeSet::removeAllStrings(v90);
    if (a3) {
      icu::UnicodeSet::complement(v90);
    }
    return v90;
  }

  else
  {
    if (pErrorCode == U_ILLEGAL_ARGUMENT_ERROR)
    {
      int v58 = U_REGEX_PROPERTY_SYNTAX;
      pErrorCode = U_REGEX_PROPERTY_SYNTAX;
    }

    icu::RegexCompile::error(this, v58);
    uint64_t result = v90;
    if (v90)
    {
      unsigned int v60 = icu::UnicodeSet::~UnicodeSet(v59, v90);
      icu::UMemory::operator delete(v60);
      return 0LL;
    }
  }

  return result;
}

LABEL_132:
        LODWORD(v46) = v28;
LABEL_133:
        unsigned int v60 = (const unsigned __int8 *)(v12 - v46);
        if (v12 > (int)v46)
        {
          if (((unsigned __int16)a2 & 0x100) != 0)
          {
            if (*a8 > 0) {
              return result;
            }
            if ((int)v60 >= 1) {
              uint64_t result = (uint64_t)icu::ByteSinkUtil::appendNonEmptyUnchanged( (_DWORD *)(a4 + (int)v46),  v60,  a6,  a2,  a7,  v16);
            }
          }

          else
          {
            uint64_t result = sub_18081A690(v68, a2, a4, (uint64_t)v70, v46, v12, a6, a7, a8);
            if (*a8 > 0) {
              return result;
            }
          }
        }

        unint64_t v55 = v44 >> 8;
        goto LABEL_133;
      }

      uint64_t v46 = v45 - 2;
      *v17++ = v45 - 2;
    }

    if ((unint64_t)v10 < v4)
    {
      __int16 *v10 = BYTE1(v44);
      if (v17) {
        *v17++ = v46;
      }
      goto LABEL_108;
    }

    goto LABEL_132;
  }

  if (v29 == 232)
  {
    *(_WORD *)(v15 + 2) = 232;
    if ((unint64_t)v10 < v4)
    {
      unint64_t v42 = (((unint64_t)v19 + v20 - result[2] + 2) >> 1) - 1;
LABEL_92:
      __int16 *v10 = v29;
      uint64_t v3 = v10 + 1;
      if (v17) {
        *v17++ = v42;
      }
      goto LABEL_112;
    }

    goto LABEL_134;
  }

  if (v29 == 0xFFFF)
  {
    int v6 = (unsigned __int16 *)((char *)v19 + v20 + 2);
    if (v9 >> 11 == 27)
    {
      if ((v9 & 0x400) == 0) {
        goto LABEL_11;
      }
      int v14 = 12;
    }

    else
    {
      int v14 = 10;
    }

    goto LABEL_119;
  }

  if ((unint64_t)v10 >= v4)
  {
    if ((v29 & 0xFF00) != 0)
    {
      unint64_t v55 = v29 >> 8;
LABEL_133:
      int v61 = result[1];
      int v62 = *(char *)(v61 + 91);
      *(_BYTE *)(v61 + 9icu::UVector32::~UVector32(this + 1) = v62 + 1;
      *(_BYTE *)(v61 + v62 + 104) = v55;
    }

    int v4 = 0LL;
    goto LABEL_133;
  }

uint64_t sub_18081A51C(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    int32_t v2 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 12) = v2;
    *(_BYTE *)(a1 + 28) = a2;
    goto LABEL_5;
  }

  if (a2)
  {
    int32_t v2 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 12) = v2;
    *(_BYTE *)(a1 + 28) = a2;
    goto LABEL_9;
  }

  int32_t v2 = *(_DWORD *)(a1 + 12);
  if (*(char *)(a1 + 28) < 0)
  {
LABEL_5:
    int32_t v3 = *(_DWORD *)(a1 + 8);
    if (v3 >= v2) {
      return 0xFFFFFFFFLL;
    }
    int v4 = *(const uint8_t **)a1;
    uint64_t v5 = v2 - 1LL;
    *(_DWORD *)(a1 + 12) = v5;
    int v6 = (char)v4[v5];
    uint64_t v7 = v6;
    if (v6 < 0) {
      return utf8_prevCharSafeBody(v4, v3, (int32_t *)(a1 + 12), v6, -1);
    }
    return v7;
  }

uint64_t sub_18081A690( int a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, icu::Edits *a8, int *a9)
{
  if (a1 == 1) {
    goto LABEL_4;
  }
  if (a1 < 0)
  {
    if ((a2 & 7) == 0) {
      goto LABEL_4;
    }
LABEL_6:
    int v13 = &unk_1809FA0E6;
    goto LABEL_7;
  }

  if ((a1 & 0xFFFFFFFE) == 2) {
    goto LABEL_6;
  }
LABEL_4:
  int v13 = &unk_1809F9F66;
LABEL_7:
  unsigned int v57 = v13;
  uint64_t result = (uint64_t)sub_180817CFC();
  int v17 = *a9;
  if (*a9 > 0 || a5 >= a6)
  {
    int v19 = a5;
    LODWORD(v20) = a5;
    goto LABEL_105;
  }

  uint64_t v52 = result;
  int v19 = a5;
  while (1)
  {
    while (1)
    {
      uint64_t v20 = a5 + 1LL;
      uint64_t v21 = *(unsigned __int8 *)(a3 + a5);
      LODWORD(v22) = *(unsigned __int8 *)(a3 + a5);
      int v23 = v57[v21];
      if (!v57[v21]) {
        goto LABEL_95;
      }
      if (v23 != 128)
      {
        int v27 = (const unsigned __int8 *)(a5 - v19);
        char v59 = v23 + v21;
        uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)a7 + 16LL))(a7, &v59, 1LL);
        if (!a8) {
          goto LABEL_34;
        }
        int v28 = a8;
        int v29 = 1;
        int v30 = 1;
LABEL_33:
        uint64_t result = (uint64_t)icu::Edits::addReplace(v28, v29, v30);
LABEL_34:
        int v19 = v20;
        goto LABEL_95;
      }

BOOL sub_18081AB78(uint64_t a1, int a2, int a3)
{
  while (a2 < a3)
  {
    uint64_t v5 = a2 + 1LL;
    int v6 = *(char *)(a1 + a2);
    unsigned int v7 = *(unsigned __int8 *)(a1 + a2);
    if (v6 < 0)
    {
      if ((_DWORD)v5 != a3)
      {
        if (v7 < 0xE0)
        {
          if (v7 >= 0xC2)
          {
            int v10 = v7 & 0x1F;
LABEL_13:
            unsigned int v11 = *(unsigned __int8 *)(a1 + (int)v5) ^ 0x80;
            int v12 = v11 | (v10 << 6);
            if (v11 > 0x3F)
            {
              unsigned int v7 = -1;
            }

            else
            {
              LODWORD(v5) = v5 + 1;
              unsigned int v7 = v12;
            }

            goto LABEL_22;
          }

uint64_t sub_18081ACC8(uint64_t result, uint64_t a2, int a3, uint64_t a4, icu::Edits *a5, int *a6)
{
  unsigned int v61 = result;
  if (a3 < 1) {
    return result;
  }
  LODWORD(v9) = 0;
  char v10 = 0;
  BOOL v12 = (result & 0x4000) == 0 && a5 == 0LL;
  BOOL v62 = v12;
  while (1)
  {
    uint64_t v66 = (int)v9;
    uint64_t v13 = (int)v9 + 1LL;
    unint64_t v14 = (unsigned __int8 *)(a2 + (int)v9);
    LODWORD(v9) = v9 + 1;
    int v15 = (char)*v14;
    unsigned int v16 = *v14;
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    if ((_DWORD)v9 == a3)
    {
LABEL_11:
      unsigned int v16 = -1;
      LODWORD(v9) = a3;
      goto LABEL_29;
    }

    if (v16 < 0xE0)
    {
      if (v16 < 0xC2) {
        goto LABEL_28;
      }
      int v19 = v16 & 0x1F;
    }

    else
    {
      if (v16 > 0xEF)
      {
        if (v16 > 0xF4) {
          goto LABEL_28;
        }
        unint64_t v22 = *(unsigned __int8 *)(a2 + v13);
        uint64_t v9 = v66 + 2;
        if ((_DWORD)v66 + 2 == a3) {
          goto LABEL_11;
        }
        unsigned int v18 = *(unsigned __int8 *)(a2 + v9) ^ 0x80;
        if (v18 > 0x3F)
        {
LABEL_28:
          unsigned int v16 = -1;
          goto LABEL_29;
        }

        int v17 = v22 & 0x3F | ((v16 - 240) << 6);
      }

      else
      {
        int v17 = v15 & 0xF;
        unsigned int v18 = *(_BYTE *)(a2 + v13) & 0x3F;
      }

      LODWORD(v9) = v9 + 1;
      if ((_DWORD)v9 == a3) {
        goto LABEL_11;
      }
      int v19 = v18 | (v17 << 6);
    }

    unsigned int v20 = *(unsigned __int8 *)(a2 + (int)v9) ^ 0x80;
    int v21 = v20 | (v19 << 6);
    if (v20 > 0x3F)
    {
      unsigned int v16 = -1;
    }

    else
    {
      LODWORD(v9) = v9 + 1;
      unsigned int v16 = v21;
    }

LABEL_62:
        unsigned int v40 = sub_18087C740(v34);
        if (!v40)
        {
          LODWORD(v32) = v9;
LABEL_73:
          if ((v27 & 0x4000) != 0) {
            char v45 = 4;
          }
          else {
            char v45 = 2;
          }
          if ((v31 & 0xD000) == 0x5000) {
            char v46 = v45;
          }
          else {
            char v46 = 0;
          }
          if (v28 != 919 || (v31 & 0x4000) == 0 || v30 || v24 || sub_18081AB78(a2, v32, a3))
          {
            if ((v31 & 0x8000) == 0)
            {
              LOBYTE(v47) = 1;
              goto LABEL_102;
            }

            if (v28 != 933)
            {
              char v48 = v67;
              if (v28 == 921)
              {
                unsigned int v31 = 0;
                LOBYTE(v47) = 1;
                unsigned int v28 = 938;
              }

              else
              {
                LOBYTE(v47) = 1;
              }

            LOBYTE(v9) = 16 * (v19 & 3);
            LOBYTE(v1icu::UVector32::~UVector32(this + 1) = 2;
LABEL_63:
            int v6 = v20;
            goto LABEL_64;
          }

          if (v7)
          {
            *unsigned int v7 = v2;
            v7[1] = v2;
            v7 += 2;
            ++v2;
          }

          *(_BYTE *)(v3 + 104) = aAbcdefghijklmn[v19 >> 2];
          *(_BYTE *)(v3 + 9icu::UVector32::~UVector32(this + 1) = 1;
        }

        *a2 = 15;
        goto LABEL_62;
      }

      if (!(_BYTE)v11)
      {
        *int v6 = aAbcdefghijklmn[v19 >> 10];
        unsigned int v20 = v6 + 1;
        if ((unint64_t)(v6 + 1) >= v8)
        {
          if (v7) {
            *v7++ = v2++;
          }
          *(_BYTE *)(v3 + 104) = aAbcdefghijklmn[(v19 >> 4) & 0x3F];
          *(_BYTE *)(v3 + 9icu::UVector32::~UVector32(this + 1) = 1;
          *a2 = 15;
        }

        else
        {
          unsigned int v20 = v6 + 2;
          v6[1] = aAbcdefghijklmn[(v19 >> 4) & 0x3F];
          if (v7)
          {
            *unsigned int v7 = v2;
            v7[1] = v2;
            v7 += 2;
            ++v2;
          }
        }

        LOBYTE(v9) = 4 * (v19 & 0xF);
        LOBYTE(v1icu::UVector32::~UVector32(this + 1) = 1;
        goto LABEL_63;
      }

  if (*(int *)v13 <= 0)
  {
    if ((int)v14 <= v12)
    {
      if (a8) {
        icu::Edits::copyErrorTo(a8, v13);
      }
    }

    else
    {
      *uint64_t v13 = U_BUFFER_OVERFLOW_ERROR;
    }
  }

  return v14;
}

LABEL_103:
              char v44 = v46 | v48;
              if (v62)
              {
                int v50 = v31 & 0x18000;
                goto LABEL_134;
              }

              uint64_t v51 = v66 + 2;
              char v53 = (int)v66 + 2 > (int)v32
                 || *v65 != ((v28 >> 6) | 0xC0)
              int v50 = v31 & 0x18000;
              if (v50)
              {
                BOOL v54 = (int)v66 + 4 > (int)v32
                   || *(unsigned __int8 *)(a2 + v51) != 204
                   || *(unsigned __int8 *)(v66 + a2 + 3) != 136;
                v53 |= v54;
                LODWORD(v5icu::UVector32::~UVector32(this + 1) = v66 + 4;
              }

              if ((v47 & 1) == 0)
              {
                int v55 = v51 + 2;
                BOOL v56 = (int)v51 + 2 > (int)v32
                   || *(unsigned __int8 *)(a2 + (int)v51) != 204
                   || *(unsigned __int8 *)((int)v51 + a2 + 1) != 129;
                v53 |= v56;
                LODWORD(v5icu::UVector32::~UVector32(this + 1) = v55;
              }

              unsigned int v57 = v32 - v66;
              int v58 = v51 - v66 + 2 * v30;
              if ((v53 & 1) != 0 || v57 != v58)
              {
                if (a5) {
                  icu::Edits::addReplace(a5, v57, v58);
                }
              }

              else
              {
                uint64_t result = (uint64_t)a5;
                if (a5) {
                  uint64_t result = (uint64_t)icu::Edits::addUnchanged(a5, v57);
                }
                if ((v61 & 0x4000) != 0)
                {
LABEL_141:
                  LODWORD(v9) = v32;
                  goto LABEL_142;
                }
              }

  icu::umtx_initImplPostInit((unsigned int *)&unk_18C535040);
  return qword_18C535038;
}

    if (v9 || (_DWORD)v8 == a3) {
      break;
    }
    if (HIDWORD(v69))
    {
      unsigned int v57 = s[(int)v8 - 1];
      if ((int)v8 >= 2 && (v57 & 0xFC00) == 0xDC00 && (int v58 = s[(v8 - 2)], (v58 & 0xFC00) == 0xD800))
      {
        if (icu::UnicodeSet::contains(v64, v57 + (v58 << 10) - 56613888))
        {
          unsigned int v59 = 2;
          goto LABEL_115;
        }

  icu::UnicodeString::releaseBuffer((uint64_t)&v69, v53);
  if ((int)v64 >= 1)
  {
    BOOL v56 = *(_DWORD *)(a6 + 4) | 0x100;
LABEL_105:
    *(_DWORD *)(a6 + 4) = v56;
    a1 = v12;
    this = (void (***)(icu::UnicodeString *__hidden))v63;
    goto LABEL_19;
  }

  unsigned int v57 = (*(uint64_t (**)(void, void (***)(icu::UnicodeString *__hidden), int *))(**(void **)(v12 + 8) + 88LL))( *(void *)(v12 + 8),  &v69,  a7);
  unsigned int v36 = *a7;
  if (!v57)
  {
    BOOL v56 = *(_DWORD *)(a6 + 4) | 0x400;
    goto LABEL_105;
  }

  unsigned int v16 = v61;
  this = (void (***)(icu::UnicodeString *__hidden))v63;
  if ((v70 & 0x11) != 0)
  {
    int v15 = 0LL;
  }

  else if ((v70 & 2) != 0)
  {
    int v15 = (unsigned __int16 *)&v70 + 1;
  }

  else
  {
    int v15 = (unsigned __int16 *)v71;
  }

  unsigned int v18 = 0LL;
  if ((v70 & 0x8000u) == 0LL) {
    int v17 = (unsigned __int16)v70 >> 5;
  }
  else {
    int v17 = DWORD1(v70);
  }
  int v19 = &v69;
  if (!(_DWORD)v17) {
    goto LABEL_119;
  }
LABEL_9:
  if ((int)v17 >= 4)
  {
LABEL_21:
    if (v15[2] == 45 && v15[3] == 45) {
      *(_DWORD *)(a6 + 4) |= 0x20u;
    }
  }

  if (*v15 == 45) {
    *(_DWORD *)(a6 + 4) |= 8u;
  }
  unsigned int v59 = a3;
  int v23 = *(_DWORD *)(a6 + 4);
  if (v15[(int)v17 - 1] == 45)
  {
    v23 |= 0x10u;
    *(_DWORD *)(a6 + 4) = v23;
  }

  int v24 = 0;
  char v25 = *(_DWORD *)(v12 + 16);
  int v26 = v15;
  do
  {
    unsigned int v27 = *v26;
    if (v27 > 0x7F)
    {
      v24 |= v27;
      if ((_DWORD)v27 == 65533)
      {
        v23 |= 0x80u;
        *(_DWORD *)(a6 + 4) = v23;
      }
    }

    else
    {
      if ((_DWORD)v27 == 46)
      {
        v23 |= 0x200u;
LABEL_32:
        *(_DWORD *)(a6 + 4) = v23;
        *int v26 = -3;
        goto LABEL_37;
      }

      if ((v25 & 2) != 0 && byte_180A2CC38[v27] < 0)
      {
        v23 |= 0x80u;
        goto LABEL_32;
      }
    }

LABEL_134:
              uint64_t result = icu::ByteSinkUtil::appendTwoBytes(v28, a4);
              if (v50) {
                uint64_t result = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(void *)a4 + 16LL))( a4,  "̈",  2LL);
              }
              if ((v47 & 1) == 0) {
                uint64_t result = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(void *)a4 + 16LL))( a4,  "́",  2LL);
              }
              if (v30 >= 1)
              {
                unsigned int v59 = v30 + 1;
                do
                {
                  uint64_t result = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(void *)a4 + 16LL))( a4,  "Ι",  2LL);
                  --v59;
                }

                while (v59 > 1);
              }

              goto LABEL_141;
            }

            unsigned int v31 = 0;
            LOBYTE(v47) = 1;
            unsigned int v28 = 939;
          }

          else
          {
            int v47 = (v27 >> 14) & 1;
            if ((v27 & 0x4000) != 0) {
              unsigned int v28 = 905;
            }
            else {
              unsigned int v28 = 919;
            }
          }

    uint64_t v63 = result[1];
    unsigned int v64 = *(char *)(v63 + 91);
    *(_BYTE *)(v63 + 9icu::UVector32::~UVector32(this + 1) = v64 + 1;
    *(_BYTE *)(v63 + v64 + 104) = v29;
    *a2 = 15;
    int v6 = (unsigned __int16 *)((char *)v19 + v20 + 2);
    goto LABEL_139;
  }

  unint64_t v42 = (((unint64_t)v19 + v20 - result[2] + 2) >> 1) - 1;
  if (v29 <= 0xFF) {
    goto LABEL_92;
  }
  const uint8_t *v10 = BYTE1(v29);
  int32_t v3 = v10 + 1;
  if (!v17)
  {
    int v17 = 0LL;
    int32_t v3 = v10 + 2;
    v10[1] = v29;
LABEL_112:
    if (*a2 >= 1) {
      goto LABEL_137;
    }
    goto LABEL_113;
  }

  *int v17 = v42;
  if ((unint64_t)v3 < v4)
  {
    int32_t v3 = v10 + 2;
    v10[1] = v29;
    v17[1] = v42;
    v17 += 2;
    goto LABEL_112;
  }

uint64_t sub_18081B334( uint64_t result, uint64_t a2, uint64_t a3, char *__s, size_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, char *, size_t, uint64_t, icu::Edits *, UErrorCode *), uint64_t a7, icu::Edits *this, UErrorCode *a9)
{
  if (*(int *)a9 <= 0)
  {
    size_t v9 = a5;
    if (__s) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = (_DWORD)a5 == 0;
    }
    int v12 = !v11;
    if ((int)a5 < -1 || v12)
    {
      *a9 = U_ILLEGAL_ARGUMENT_ERROR;
    }

    else
    {
      uint64_t v18 = result;
      if ((_DWORD)a5 == -1) {
        size_t v9 = strlen(__s);
      }
      if ((a2 & 0x2000) == 0 && this) {
        icu::Edits::reset((uint64_t)this);
      }
      a6(v18, a2, a3, __s, v9, a7, this, a9);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a7 + 32LL))(a7);
      if (this)
      {
      }
    }
  }

  return result;
}

uint64_t sub_18081B448( uint64_t a1, uint64_t a2, uint64_t a3, char *a4, int a5, char *__s, size_t a7, void (*a8)(uint64_t, uint64_t, uint64_t, char *, size_t, __int128 *, icu::Edits *, UErrorCode *), icu::Edits *a9, UErrorCode *a10)
{
  if (a5 < 0) {
    goto LABEL_6;
  }
  size_t v13 = a7;
  if (!a4)
  {
    if (a5) {
      goto LABEL_6;
    }
  }

  BOOL v20 = __s || (_DWORD)a7 == 0;
  BOOL v21 = !v20;
  if ((_DWORD)a7 == -1) {
    size_t v13 = strlen(__s);
  }
  if (a4 && (__s >= a4 && &a4[a5] > __s || a4 >= __s && &__s[(int)v13] > a4))
  {
LABEL_6:
    uint64_t v10 = 0LL;
    *a10 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  else
  {
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    icu::CheckedArrayByteSink::CheckedArrayByteSink((uint64_t)&v22, a4, a5);
    if ((a2 & 0x2000) == 0 && a9) {
      icu::Edits::reset((uint64_t)a9);
    }
    a8(a1, a2, a3, __s, v13, &v22, a9, a10);
    icu::ByteSink::Flush((icu::ByteSink *)&v22);
    if (*(int *)a10 <= 0)
    {
      if (BYTE12(v23))
      {
        *a10 = U_BUFFER_OVERFLOW_ERROR;
      }

      else if (a9)
      {
        icu::Edits::copyErrorTo(a9, a10);
      }
    }

    uint64_t v10 = u_terminateChars((uint64_t)a4, a5, DWORD2(v23), (int *)a10);
    icu::CheckedArrayByteSink::~CheckedArrayByteSink((icu::CheckedArrayByteSink *)&v22);
  }

  return v10;
}

uint64_t ucasemap_utf8ToLower(uint64_t a1, char *a2, int a3, char *__s, size_t a5, UErrorCode *a6)
{
  return sub_18081B448( *(unsigned int *)(a1 + 40),  *(unsigned int *)(a1 + 44),  0LL,  a2,  a3,  __s,  a5,  (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, __int128 *, icu::Edits *, UErrorCode *))sub_18081B628,  0LL,  a6);
}

uint64_t sub_18081B628( int a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, icu::Edits *a7, int *a8)
{
  v9[3] = 0LL;
  v9[0] = a4;
  v9[1] = 0LL;
  v9[2] = a5;
  return sub_18081A690(a1, a2, a4, (uint64_t)v9, 0, a5, a6, a7, a8);
}

uint64_t ucasemap_utf8ToUpper(uint64_t a1, char *a2, int a3, char *__s, size_t a5, UErrorCode *a6)
{
  return sub_18081B448( *(unsigned int *)(a1 + 40),  *(unsigned int *)(a1 + 44),  0LL,  a2,  a3,  __s,  a5,  (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, __int128 *, icu::Edits *, UErrorCode *))sub_18081B6B8,  0LL,  a6);
}

uint64_t sub_18081B6B8( int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, icu::Edits *a7, int *a8)
{
  if (a1 == 4) {
    return sub_18081ACC8(a2, a4, a5, a6, a7, a8);
  }
  unsigned int v54 = a2;
  uint64_t v58 = 0LL;
  v56[0] = a4;
  v56[1] = 0LL;
  uint64_t v57 = a5;
  int v15 = (icu::ByteSink *)&unk_1809FA266;
  if (a1 == 2) {
    int v15 = (icu::ByteSink *)&unk_1809FA3E6;
  }
  int v55 = v15;
  uint64_t result = (uint64_t)sub_180817CFC();
  int v18 = 0;
  int v19 = *a8;
  if (a5 < 1 || v19 > 0)
  {
    LODWORD(v2icu::UVector32::~UVector32(this + 1) = 0;
    goto LABEL_97;
  }

  uint64_t v52 = result;
  int v53 = a1;
  int v20 = 0;
  int v18 = 0;
  while (1)
  {
    while (1)
    {
      uint64_t v21 = v20 + 1LL;
      uint64_t v22 = *(unsigned __int8 *)(a4 + v20);
      LODWORD(v23) = *(unsigned __int8 *)(a4 + v20);
      int v24 = *((unsigned __int8 *)v55 + v22);
      if (!*((_BYTE *)v55 + v22)) {
        goto LABEL_87;
      }
      if (v24 != 128)
      {
        unsigned int v31 = (const unsigned __int8 *)(v20 - v18);
        LOBYTE(v59) = v24 + v23;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a6 + 16LL))(a6, &v59, 1LL);
        if (!a7) {
          goto LABEL_33;
        }
        uint64_t v32 = a7;
        int v33 = 1;
        int v34 = 1;
LABEL_32:
        uint64_t result = (uint64_t)icu::Edits::addReplace(v32, v33, v34);
LABEL_33:
        int v18 = v21;
        goto LABEL_87;
      }

LABEL_72:
    LODWORD(v2icu::UVector32::~UVector32(this + 1) = v21 + 1;
    unsigned int v45 = *(unsigned __int16 *)(v41 + 2LL * v44);
    if ((v45 & 8) != 0) {
      goto LABEL_11;
    }
    if (v45 >= 0x80 && (v45 & 3) == 1)
    {
      int v47 = (const unsigned __int8 *)(v20 - v18);
      uint64_t result = icu::ByteSinkUtil::appendCodePoint( (icu::ByteSinkUtil *)(v21 - v20),  (int)v23 + ((__int16)v45 >> 7),  a6,  a7,  v16);
      goto LABEL_33;
    }

    goto LABEL_87;
  }

  if (v22 <= 0xEF)
  {
    unint64_t v37 = v22 & 0xF;
    unsigned int v38 = *(_BYTE *)(a4 + v21) & 0x3F;
    goto LABEL_46;
  }

  unint64_t v37 = *(unsigned __int8 *)(a4 + v21);
  uint64_t v21 = v20 + 2LL;
  if (v20 + 2 != a5)
  {
    unsigned int v38 = *(unsigned __int8 *)(a4 + v21) ^ 0x80;
    if (v38 > 0x3F) {
      goto LABEL_87;
    }
    LODWORD(v37) = v37 & 0x3F | (((_DWORD)v23 - 240) << 6);
LABEL_46:
    LODWORD(v2icu::UVector32::~UVector32(this + 1) = v21 + 1;
    if ((_DWORD)v21 == a5) {
      goto LABEL_96;
    }
    unsigned int v39 = v38 | ((_DWORD)v37 << 6);
    goto LABEL_50;
  }

  char i = v48;
  if ((_DWORD)v8 || !(_DWORD)v48)
  {
    if (!HIDWORD(v50)) {
      goto LABEL_91;
    }
LABEL_83:
    LODWORD(v32) = sub_180864178((unsigned __int8 **)&v49);
    LODWORD(v8) = 0;
    v7 -= v32;
LABEL_88:
    int v12 = a1;
    goto LABEL_89;
  }

  uint64_t v41 = (unsigned __int8 *)&__s[(int)v48];
  if (HIDWORD(v50))
  {
    LODWORD(v32) = sub_180865028(v45, v41, v7);
    if ((int)v32 >= 1)
    {
      v7 -= v32;
      if (!v7) {
        goto LABEL_90;
      }
      unsigned int v42 = v50;
      int v43 = LODWORD(v51[0]) + v32 - v42;
      if (*((_BYTE *)v49 + v43))
      {
        *((_BYTE *)v49 + v43) = 0;
        --HIDWORD(v50);
      }

      LODWORD(v8) = 0;
      LODWORD(v51[0]) = v43;
      goto LABEL_88;
    }

    goto LABEL_83;
  }

  LODWORD(v32) = icu::UnicodeSet::spanUTF8(v45, (char *)v41);
  LODWORD(v8) = v32;
  v7 -= v32;
  if (v7 && (_DWORD)v32) {
    goto LABEL_88;
  }
  char i = (v32 + v48);
LABEL_91:
  return i;
}

      if (v61) {
        (*(void (**)(icu::UnicodeString *))(*(void *)v61 + 8LL))(v61);
      }
      if (*(int *)a3 > 0)
      {
LABEL_3:
        icu::UnicodeSetIterator::~UnicodeSetIterator((icu::UnicodeSetIterator *)v62);
        return;
      }
    }

    int v34 = v28;
    unsigned int v27 = v31;
    goto LABEL_35;
  }

  if (v106 < 0x1000) {
    goto LABEL_73;
  }
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  *(void *)__int128 v107 = 0LL;
  while (2)
  {
    if (v51) {
      goto LABEL_124;
    }
    while (2)
    {
      unsigned int v54 = *(int *)&v107[4];
      if (*(_DWORD *)&v107[4] == v109[0])
      {
        uint64_t v51 = 2;
        goto LABEL_124;
      }

      ++*(_DWORD *)&v107[4];
      int v55 = *(unsigned __int8 *)(a4 + v54);
      if ((v55 & 0x80) == 0)
      {
        BOOL v56 = *(unsigned __int8 *)(a4 + v54);
LABEL_141:
        int v53 = *((unsigned __int16 *)v13 + v56);
LABEL_142:
        if (v53 > v14)
        {
          uint64_t v51 = 192;
          goto LABEL_124;
        }

        uint64_t v59 = icu::CollationFastLatin::nextPair((uint64_t)v13, v55, v53, 0LL, a4, (int *)&v107[4], v109);
        Secondaries = icu::CollationFastLatin::getSecondaries(v14, v59);
        if (Secondaries)
        {
          uint64_t v51 = Secondaries;
          goto LABEL_124;
        }

        continue;
      }

      break;
    }

    if (v55 <= 0xC5)
    {
      uint64_t v57 = *(unsigned __int8 *)(a4 + v54 + 1) + (v55 << 6);
      *(_DWORD *)&v107[4] = v54 + 2;
      BOOL v56 = v57 - 12416;
      goto LABEL_141;
    }

    uint64_t v58 = *(unsigned __int8 *)(v54 + a4 + 2);
    *(_DWORD *)&v107[4] = v54 + 3;
    if ((_DWORD)v55 == 226)
    {
      BOOL v56 = v58 | 0x100;
      goto LABEL_141;
    }

    if ((_DWORD)v58 == 190)
    {
      int v53 = 3LL;
      goto LABEL_142;
    }

    LOWORD(v53) = -856;
LABEL_163:
    else {
      uint64_t v51 = (v53 & 0x3E0) + 32;
    }
LABEL_124:
    if (v52) {
      goto LABEL_125;
    }
    while (2)
    {
      BOOL v62 = *(int *)v107;
      if (*(_DWORD *)v107 == v108)
      {
        uint64_t v52 = 2;
        goto LABEL_125;
      }

      ++*(_DWORD *)v107;
      uint64_t v63 = *(unsigned __int8 *)(a6 + v62);
      if ((v63 & 0x80) == 0)
      {
        unsigned int v64 = *(unsigned __int8 *)(a6 + v62);
LABEL_154:
        unsigned int v61 = *((unsigned __int16 *)v13 + v64);
LABEL_155:
        if (v61 > v14)
        {
          uint64_t v52 = 192;
          goto LABEL_125;
        }

        char v67 = icu::CollationFastLatin::nextPair((uint64_t)v13, v63, v61, 0LL, a6, (int *)v107, (int *)&v108);
        uint64_t v68 = icu::CollationFastLatin::getSecondaries(v14, v67);
        if (v68)
        {
          uint64_t v52 = v68;
          goto LABEL_125;
        }

        continue;
      }

      break;
    }

    if (v63 <= 0xC5)
    {
      uint64_t v65 = *(unsigned __int8 *)(a6 + v62 + 1) + (v63 << 6);
      *(_DWORD *)__int128 v107 = v62 + 2;
      unsigned int v64 = v65 - 12416;
      goto LABEL_154;
    }

    uint64_t v66 = *(unsigned __int8 *)(v62 + a6 + 2);
    *(_DWORD *)__int128 v107 = v62 + 3;
    if ((_DWORD)v63 == 226)
    {
      unsigned int v64 = v66 | 0x100;
      goto LABEL_154;
    }

    if ((_DWORD)v66 == 190)
    {
      unsigned int v61 = 3LL;
      goto LABEL_155;
    }

    LOWORD(v6icu::UVector32::~UVector32(this + 1) = -856;
LABEL_167:
    else {
      uint64_t v52 = (v61 & 0x3E0) + 32;
    }
LABEL_125:
    if (v51 == v52)
    {
      uint64_t v52 = 0;
      int v19 = v51 == 2;
      uint64_t v51 = 0;
      if (!v19) {
        continue;
      }
    }

    else
    {
      if ((unsigned __int16)v51 != (unsigned __int16)v52)
      {
        else {
          int v85 = 1;
        }
        if ((v9 & 0x800) != 0) {
          return 4294967294LL;
        }
        else {
          return v85;
        }
      }

      if (v51 != 2)
      {
        v51 >>= 16;
        v52 >>= 16;
        continue;
      }
    }

    break;
  }

    ++v12;
  }

  while (v12 != 6);
  if ((int)v14 > 1)
  {
    uint64_t v52 = 0;
    LODWORD(v15) = 1;
    do
    {
      while (1)
      {
        int v53 = a1 + 32 * ((int)v15 - 1LL);
        unsigned int v54 = v15;
        int v55 = a1 + 32LL * v15;
        v75[0] = 0LL;
        uint64_t v73 = (uint64_t (**)(icu::numparse::impl::NumberParseMatcher *))v16;
        uint64_t v74 = *(_OWORD *)(v53 + 8);
        BOOL v56 = v74;
        LODWORD(v75[0]) = *(_DWORD *)(v53 + 24);
        uint64_t v57 = v75[0];
        uint64_t v58 = *(_DWORD *)(v55 + 24);
        *(_OWORD *)(v53 + 8) = *(_OWORD *)(v55 + 8);
        *(_DWORD *)(v53 + 24) = v58;
        *(_OWORD *)(v55 + 8) = v56;
        *(_DWORD *)(v55 + 24) = v57;
        icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v73);
        uint64_t v52 = v54 + 1 < (int)v14;
        else {
          LODWORD(v15) = 1;
        }
      }

      uint64_t v59 = v54 + 1 < (int)v14;
      unsigned int v60 = v59 | v52;
      else {
        int v15 = 1LL;
      }
      v52 &= v59;
    }

    while ((v60 & 1) != 0);
  }

  if ((int)v14 >= 1)
  {
    unsigned int v61 = v14;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v62 + 16LL))(v62, a1);
      a1 += 32LL;
      --v61;
    }

    while (v61);
  }

  return icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v82);
}

  if (*a3 <= 0)
  {
    int v33 = v11;
    switch((int)v11)
    {
      case 0:
        BOOL v36 = WORD4(v41[0]) >> 5;
        if (SWORD4(v41[0]) < 0) {
          BOOL v36 = HIDWORD(v41[0]);
        }
        if (v36 < 1) {
          goto LABEL_86;
        }
        unint64_t v35 = sub_1809A074C((uint64_t)v41, a3);
        goto LABEL_85;
      case 1:
        int v33 = (v15 - 1);
        goto LABEL_75;
      case 2:
      case 4:
        if (v15 != 2)
        {
LABEL_83:
          *a3 = 1;
          break;
        }

        int v12 = 10LL;
        if (!v20) {
          goto LABEL_25;
        }
        goto LABEL_73;
      }
    }

    LODWORD(v36) = 0;
    goto LABEL_69;
  }

  int v12 = 10LL;
LABEL_29:
  if (v11) {
    ures_close(v11);
  }
  return v12;
}

  icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)&v44);
LABEL_73:
  if ((SWORD4(v53) & 0x8000u) == 0) {
    unsigned int v42 = WORD4(v53) >> 5;
  }
  else {
    unsigned int v42 = HIDWORD(v53);
  }
  icu::UnicodeString::doReplace( (icu::UnicodeString *)a4,  a7,  (a8 - a7),  (const icu::UnicodeString *)&v53,  0,  v42);
  LODWORD(v40) = WORD4(v53) >> 5;
  if ((SWORD4(v53) & 0x8000u) == 0) {
    unsigned int v40 = v40;
  }
  else {
    unsigned int v40 = HIDWORD(v53);
  }
  int v18 = (a7 - a8 + v40);
LABEL_80:
  icu::UnicodeString::~UnicodeString((void *)v40, (icu::UnicodeString *)&v49);
LABEL_81:
  icu::UnicodeString::~UnicodeString((void *)v17, (icu::UnicodeString *)&v53);
  return v18;
}

uint64_t ucasemap_utf8FoldCase(uint64_t a1, char *a2, int a3, char *__s, size_t a5, UErrorCode *a6)
{
  return sub_18081B448( 1LL,  *(unsigned int *)(a1 + 44),  0LL,  a2,  a3,  __s,  a5,  (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, __int128 *, icu::Edits *, UErrorCode *))sub_18081BBEC,  0LL,  a6);
}

uint64_t sub_18081BBEC( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, icu::Edits *a7, int *a8)
{
  return sub_18081A690(-1, a2, a4, 0LL, 0, a5, a6, a7, a8);
}

uint64_t icu::CaseMap::utf8ToLower( unsigned __int8 *a1, uint64_t a2, char *a3, size_t a4, uint64_t a5, icu::Edits *a6, UErrorCode *a7)
{
  uint64_t v13 = sub_18087DD70(a1);
  return sub_18081B334( v13,  a2,  0LL,  a3,  a4,  (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, uint64_t, icu::Edits *, UErrorCode *))sub_18081B628,  a5,  a6,  a7);
}

uint64_t icu::CaseMap::utf8ToUpper( unsigned __int8 *a1, uint64_t a2, char *a3, size_t a4, uint64_t a5, icu::Edits *a6, UErrorCode *a7)
{
  uint64_t v13 = sub_18087DD70(a1);
  return sub_18081B334( v13,  a2,  0LL,  a3,  a4,  (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, uint64_t, icu::Edits *, UErrorCode *))sub_18081B6B8,  a5,  a6,  a7);
}

uint64_t icu::CaseMap::utf8Fold(uint64_t a1, char *a2, size_t a3, uint64_t a4, icu::Edits *a5, UErrorCode *a6)
{
  return sub_18081B334( 1LL,  a1,  0LL,  a2,  a3,  (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, uint64_t, icu::Edits *, UErrorCode *))sub_18081BBEC,  a4,  a5,  a6);
}

uint64_t icu::CaseMap::utf8ToLower( icu::CaseMap *this, const char *a2, char *a3, const char *a4, char *a5, char *a6, icu::Edits *a7, UErrorCode *a8, UErrorCode *a9)
{
  int v11 = (int)a6;
  uint64_t v16 = sub_18087DD70((unsigned __int8 *)this);
  return sub_18081B448( v16,  (uint64_t)a2,  0LL,  a5,  v11,  a3,  (size_t)a4,  (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, __int128 *, icu::Edits *, UErrorCode *))sub_18081B628,  a7,  a8);
}

uint64_t icu::CaseMap::utf8ToUpper( icu::CaseMap *this, const char *a2, char *a3, const char *a4, char *a5, char *a6, icu::Edits *a7, UErrorCode *a8, UErrorCode *a9)
{
  int v11 = (int)a6;
  uint64_t v16 = sub_18087DD70((unsigned __int8 *)this);
  return sub_18081B448( v16,  (uint64_t)a2,  0LL,  a5,  v11,  a3,  (size_t)a4,  (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, __int128 *, icu::Edits *, UErrorCode *))sub_18081B6B8,  a7,  a8);
}

uint64_t icu::CaseMap::utf8Fold( icu::CaseMap *this, char *__s, const char *a3, char *a4, char *a5, icu::Edits *a6, UErrorCode *a7, UErrorCode *a8)
{
  return sub_18081B448( 1LL,  (uint64_t)this,  0LL,  a4,  (int)a5,  __s,  (size_t)a3,  (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, __int128 *, icu::Edits *, UErrorCode *))sub_18081BBEC,  a6,  a7);
}

uint64_t icu::CaseMap::utf8ToTitle( uint64_t result, uint64_t a2, uint64_t a3, char *a4, size_t a5, uint64_t a6, icu::Edits *a7, UErrorCode *a8)
{
  if (*(int *)a8 <= 0)
  {
    int v15 = (char *)result;
    memset(&ut, 0, sizeof(ut));
    ut.magic = 878368812;
    ut.sizeOfStruct = 144;
    utext_openUTF8(&ut, a4, (int)a5, a8);
    uint64_t v19 = 0LL;
    uint64_t v16 = sub_18087B438(0LL, v15, a2, a3, &v19, (const icu::Locale *)a8);
    if (v16)
    {
      uint64_t v17 = v16;
      (*(void (**)(uint64_t, UText *, UErrorCode *))(*(void *)v16 + 64LL))(v16, &ut, a8);
      uint64_t v18 = sub_18087DD70((unsigned __int8 *)v15);
      sub_18081B334( v18,  a2,  v17,  a4,  a5,  (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, uint64_t, icu::Edits *, UErrorCode *))sub_180819DA8,  a6,  a7,  a8);
    }

    utext_close(&ut);
    uint64_t result = v19;
    if (v19) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
    }
  }

  return result;
}

uint64_t icu::CaseMap::utf8ToTitle( icu::CaseMap *this, const char *a2, uint64_t a3, icu::BreakIterator *s, const char *a5, char *a6, char *a7, icu::Edits *a8, UErrorCode *status, UErrorCode *a10)
{
  int v12 = (int)a7;
  memset(&ut, 0, sizeof(ut));
  ut.magic = 878368812;
  ut.sizeOfStruct = 144;
  utext_openUTF8(&ut, (const char *)s, (int)a5, status);
  uint64_t v23 = 0LL;
  uint64_t v19 = sub_18087B438(0LL, (const char *)this, (char)a2, a3, &v23, (const icu::Locale *)status);
  if (v19)
  {
    uint64_t v20 = v19;
    (*(void (**)(uint64_t, UText *, UErrorCode *))(*(void *)v19 + 64LL))(v19, &ut, status);
    uint64_t v21 = sub_18087DD70((unsigned __int8 *)this);
    uint64_t v10 = sub_18081B448( v21,  (uint64_t)a2,  v20,  a6,  v12,  (char *)s,  (size_t)a5,  (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, __int128 *, icu::Edits *, UErrorCode *))sub_180819DA8,  a8,  status);
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  utext_close(&ut);
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
  }
  return v10;
}

uint64_t ucasemap_getBreakIterator(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t ucasemap_setBreakIterator(uint64_t result, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
  {
    int v4 = (void *)result;
    uint64_t result = *(void *)result;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
    *int v4 = a2;
  }

  return result;
}

uint64_t ucasemap_utf8ToTitle(uint64_t a1, char *a2, int a3, char *s, size_t a5, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    memset(&ut, 0, sizeof(ut));
    ut.magic = 878368812;
    ut.sizeOfStruct = 144;
    utext_openUTF8(&ut, s, (int)a5, status);
    if (*(int *)status <= 0)
    {
      uint64_t v14 = *(void *)a1;
      if (!*(void *)a1)
      {
        uint64_t v15 = 0LL;
        if (!sub_18087B438(0LL, (const char *)(a1 + 8), *(_DWORD *)(a1 + 44), 0LL, &v15, (const icu::Locale *)status))
        {
          utext_close(&ut);
          if (v15) {
            (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
          }
          return 0LL;
        }

        uint64_t v14 = v15;
        *(void *)a1 = v15;
      }

      (*(void (**)(uint64_t, UText *, UErrorCode *))(*(void *)v14 + 64LL))(v14, &ut, status);
      uint64_t v12 = sub_18081B448( *(unsigned int *)(a1 + 40),  *(unsigned int *)(a1 + 44),  *(void *)a1,  a2,  a3,  s,  a5,  (void (*)(uint64_t, uint64_t, uint64_t, char *, size_t, __int128 *, icu::Edits *, UErrorCode *))sub_180819DA8,  0LL,  status);
      utext_close(&ut);
      return v12;
    }
  }

  return 0LL;
}

UChar *u_catgets(uint64_t a1, unsigned int a2, unsigned int a3, UChar *s, int *a5, int *a6)
{
  v14[3] = *MEMORY[0x1895F89C0];
  memset(v14, 0, 24);
  if (a6)
  {
    if (*a6 <= 0)
    {
      int v11 = (char *)v14 + (int)T_CString_integerToString(v14, a2, 0xAu);
      char *v11 = 37;
      T_CString_integerToString(v11 + 1, a3, 0xAu);
      StringByKey = ures_getStringByKey(a1, (const char *)v14, a5, a6);
      if (*a6 < 1) {
        return (UChar *)StringByKey;
      }
    }
  }

  if (a5) {
    *a5 = u_strlen(s);
  }
  return s;
}

int8_t u_charType(UChar32 c)
{
  if (c >> 11 <= 0x1A)
  {
    unsigned int v1 = c >> 5;
LABEL_11:
    uint64_t v3 = (c & 0x1F) + 4 * word_180A0913C[v1];
    return word_180A0913C[v3] & 0x1F;
  }

  if (!HIWORD(c))
  {
    else {
      int v2 = 320;
    }
    unsigned int v1 = v2 + (c >> 5);
    goto LABEL_11;
  }

  if (HIWORD(c) <= 0x10u)
  {
    unsigned int v1 = ((c >> 5) & 0x3F) + word_180A0913C[(c >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 4820LL;
  return word_180A0913C[v3] & 0x1F;
}

void u_enumCharTypes(UCharEnumTypeRange *enumRange, const void *context)
{
  if (enumRange)
  {
    v2[0] = enumRange;
    v2[1] = context;
    utrie2_enum( (uint64_t)&off_189711630,  (uint64_t (*)(uint64_t, uint64_t))sub_18081C450,  (uint64_t (*)(uint64_t, uint64_t, void, uint64_t))sub_18081C458,  (uint64_t)v2);
  }

uint64_t sub_18081C450(uint64_t a1, char a2)
{
  return a2 & 0x1F;
}

uint64_t sub_18081C458(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void, uint64_t, void))a1)(*(void *)(a1 + 8), a2, (a3 + 1));
}

UBool u_islower(UChar32 c)
{
  if (c >> 11 <= 0x1A)
  {
    unsigned int v1 = c >> 5;
LABEL_11:
    uint64_t v3 = (c & 0x1F) + 4 * word_180A0913C[v1];
    return (word_180A0913C[v3] & 0x1F) == 2;
  }

  if (!HIWORD(c))
  {
    else {
      int v2 = 320;
    }
    unsigned int v1 = v2 + (c >> 5);
    goto LABEL_11;
  }

  if (HIWORD(c) <= 0x10u)
  {
    unsigned int v1 = ((c >> 5) & 0x3F) + word_180A0913C[(c >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 4820LL;
  return (word_180A0913C[v3] & 0x1F) == 2;
}

UBool u_isupper(UChar32 c)
{
  if (c >> 11 <= 0x1A)
  {
    unsigned int v1 = c >> 5;
LABEL_11:
    uint64_t v3 = (c & 0x1F) + 4 * word_180A0913C[v1];
    return (word_180A0913C[v3] & 0x1F) == 1;
  }

  if (!HIWORD(c))
  {
    else {
      int v2 = 320;
    }
    unsigned int v1 = v2 + (c >> 5);
    goto LABEL_11;
  }

  if (HIWORD(c) <= 0x10u)
  {
    unsigned int v1 = ((c >> 5) & 0x3F) + word_180A0913C[(c >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 4820LL;
  return (word_180A0913C[v3] & 0x1F) == 1;
}

UBool u_istitle(UChar32 c)
{
  if (c >> 11 <= 0x1A)
  {
    unsigned int v1 = c >> 5;
LABEL_11:
    uint64_t v3 = (c & 0x1F) + 4 * word_180A0913C[v1];
    return (word_180A0913C[v3] & 0x1F) == 3;
  }

  if (!HIWORD(c))
  {
    else {
      int v2 = 320;
    }
    unsigned int v1 = v2 + (c >> 5);
    goto LABEL_11;
  }

  if (HIWORD(c) <= 0x10u)
  {
    unsigned int v1 = ((c >> 5) & 0x3F) + word_180A0913C[(c >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 4820LL;
  return (word_180A0913C[v3] & 0x1F) == 3;
}

UBool u_isdigit(UChar32 c)
{
  if (c >> 11 <= 0x1A)
  {
    unsigned int v1 = c >> 5;
LABEL_11:
    uint64_t v3 = (c & 0x1F) + 4 * word_180A0913C[v1];
    return (word_180A0913C[v3] & 0x1F) == 9;
  }

  if (!HIWORD(c))
  {
    else {
      int v2 = 320;
    }
    unsigned int v1 = v2 + (c >> 5);
    goto LABEL_11;
  }

  if (HIWORD(c) <= 0x10u)
  {
    unsigned int v1 = ((c >> 5) & 0x3F) + word_180A0913C[(c >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 4820LL;
  return (word_180A0913C[v3] & 0x1F) == 9;
}

UBool u_isxdigit(UChar32 c)
{
  if ((c - 65) <= 0x25 && (c - 97) < 0xFFFFFFE6
    || (c - 65313) <= 0x25 && (c - 65345) < 0xFFFFFFE6)
  {
    return 1;
  }

  if (c >> 11 <= 0x1A)
  {
    unsigned int v2 = c >> 5;
LABEL_16:
    uint64_t v4 = (c & 0x1F) + 4 * word_180A0913C[v2];
    return (word_180A0913C[v4] & 0x1F) == 9;
  }

  if (!HIWORD(c))
  {
    else {
      int v3 = 320;
    }
    unsigned int v2 = v3 + (c >> 5);
    goto LABEL_16;
  }

  if (HIWORD(c) <= 0x10u)
  {
    unsigned int v2 = ((c >> 5) & 0x3F) + word_180A0913C[(c >> 11) + 2080];
    goto LABEL_16;
  }

  uint64_t v4 = 4820LL;
  return (word_180A0913C[v4] & 0x1F) == 9;
}

UBool u_isalpha(UChar32 c)
{
  if (c >> 11 <= 0x1A)
  {
    unsigned int v1 = c >> 5;
LABEL_11:
    uint64_t v3 = (c & 0x1F) + 4 * word_180A0913C[v1];
    return ((1 << word_180A0913C[v3]) & 0x3E) != 0;
  }

  if (!HIWORD(c))
  {
    else {
      int v2 = 320;
    }
    unsigned int v1 = v2 + (c >> 5);
    goto LABEL_11;
  }

  if (HIWORD(c) <= 0x10u)
  {
    unsigned int v1 = ((c >> 5) & 0x3F) + word_180A0913C[(c >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 4820LL;
  return ((1 << word_180A0913C[v3]) & 0x3E) != 0;
}

UBool u_isUAlphabetic(UChar32 c)
{
  return (sub_18081C7AC(c, 1) >> 8) & 1;
}

uint64_t sub_18081C7AC(unsigned int a1, int a2)
{
  if (a2 > 2) {
    return 0LL;
  }
  if (a1 >> 11 <= 0x1A)
  {
    unsigned int v3 = a1 >> 5;
LABEL_13:
    uint64_t v5 = (a1 & 0x1F) + 4 * word_180A1472C[v3];
    return dword_180A01CA0[word_180A1472C[v5] + a2];
  }

  if (!HIWORD(a1))
  {
    if (a1 >> 10 >= 0x37) {
      int v4 = 0;
    }
    else {
      int v4 = 320;
    }
    unsigned int v3 = v4 + (a1 >> 5);
    goto LABEL_13;
  }

  if (HIWORD(a1) <= 0x10u)
  {
    unsigned int v3 = ((a1 >> 5) & 0x3F) + word_180A1472C[(a1 >> 11) + 2080];
    goto LABEL_13;
  }

  uint64_t v5 = 5496LL;
  return dword_180A01CA0[word_180A1472C[v5] + a2];
}

UBool u_isalnum(UChar32 c)
{
  if (c >> 11 <= 0x1A)
  {
    unsigned int v1 = c >> 5;
LABEL_11:
    uint64_t v3 = (c & 0x1F) + 4 * word_180A0913C[v1];
    return ((1 << word_180A0913C[v3]) & 0x23E) != 0;
  }

  if (!HIWORD(c))
  {
    else {
      int v2 = 320;
    }
    unsigned int v1 = v2 + (c >> 5);
    goto LABEL_11;
  }

  if (HIWORD(c) <= 0x10u)
  {
    unsigned int v1 = ((c >> 5) & 0x3F) + word_180A0913C[(c >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 4820LL;
  return ((1 << word_180A0913C[v3]) & 0x23E) != 0;
}

BOOL sub_18081C8C0(unsigned int a1)
{
  uint64_t v2 = 1LL;
  if ((sub_18081C7AC(a1, 1) & 0x100) == 0) {
    return u_isdigit(a1) != 0;
  }
  return v2;
}

UBool u_isdefined(UChar32 c)
{
  if (c >> 11 <= 0x1A)
  {
    unsigned int v1 = c >> 5;
LABEL_11:
    uint64_t v3 = (c & 0x1F) + 4 * word_180A0913C[v1];
    return (word_180A0913C[v3] & 0x1F) != 0;
  }

  if (!HIWORD(c))
  {
    else {
      int v2 = 320;
    }
    unsigned int v1 = v2 + (c >> 5);
    goto LABEL_11;
  }

  if (HIWORD(c) <= 0x10u)
  {
    unsigned int v1 = ((c >> 5) & 0x3F) + word_180A0913C[(c >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 4820LL;
  return (word_180A0913C[v3] & 0x1F) != 0;
}

UBool u_isbase(UChar32 c)
{
  if (c >> 11 <= 0x1A)
  {
    unsigned int v1 = c >> 5;
LABEL_11:
    uint64_t v3 = (c & 0x1F) + 4 * word_180A0913C[v1];
    return ((1 << word_180A0913C[v3]) & 0xFBE) != 0;
  }

  if (!HIWORD(c))
  {
    else {
      int v2 = 320;
    }
    unsigned int v1 = v2 + (c >> 5);
    goto LABEL_11;
  }

  if (HIWORD(c) <= 0x10u)
  {
    unsigned int v1 = ((c >> 5) & 0x3F) + word_180A0913C[(c >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 4820LL;
  return ((1 << word_180A0913C[v3]) & 0xFBE) != 0;
}

UBool u_iscntrl(UChar32 c)
{
  if (c >> 11 <= 0x1A)
  {
    unsigned int v1 = c >> 5;
LABEL_11:
    uint64_t v3 = (c & 0x1F) + 4 * word_180A0913C[v1];
    return ((1 << word_180A0913C[v3]) & 0x1E000) != 0;
  }

  if (!HIWORD(c))
  {
    else {
      int v2 = 320;
    }
    unsigned int v1 = v2 + (c >> 5);
    goto LABEL_11;
  }

  if (HIWORD(c) <= 0x10u)
  {
    unsigned int v1 = ((c >> 5) & 0x3F) + word_180A0913C[(c >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 4820LL;
  return ((1 << word_180A0913C[v3]) & 0x1E000) != 0;
}

UBool u_isISOControl(UChar32 c)
{
  return c < 0xA0 && (c - 127) < 0xFFFFFFA1;
}

UBool u_isspace(UChar32 c)
{
  if (c >> 11 > 0x1A)
  {
    if (HIWORD(c))
    {
      if (HIWORD(c) > 0x10u)
      {
        uint64_t v3 = 4820LL;
        goto LABEL_12;
      }

      unsigned int v1 = ((c >> 5) & 0x3F) + word_180A0913C[(c >> 11) + 2080];
    }

    else
    {
      else {
        int v2 = 320;
      }
      unsigned int v1 = v2 + (c >> 5);
    }
  }

  else
  {
    unsigned int v1 = c >> 5;
  }

  uint64_t v3 = (c & 0x1F) + 4 * word_180A0913C[v1];
LABEL_12:
  UBool v4 = 1;
  if (((1 << word_180A0913C[v3]) & 0x7000) == 0) {
    return c <= 159 && ((c - 9) < 5 || (c & 0xFFFFFFFC) == 28 || c == 133);
  }
  return v4;
}

UBool u_isJavaSpaceChar(UChar32 c)
{
  if (c >> 11 <= 0x1A)
  {
    unsigned int v1 = c >> 5;
LABEL_11:
    uint64_t v3 = (c & 0x1F) + 4 * word_180A0913C[v1];
    return ((1 << word_180A0913C[v3]) & 0x7000) != 0;
  }

  if (!HIWORD(c))
  {
    else {
      int v2 = 320;
    }
    unsigned int v1 = v2 + (c >> 5);
    goto LABEL_11;
  }

  if (HIWORD(c) <= 0x10u)
  {
    unsigned int v1 = ((c >> 5) & 0x3F) + word_180A0913C[(c >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 4820LL;
  return ((1 << word_180A0913C[v3]) & 0x7000) != 0;
}

UBool u_isWhitespace(UChar32 c)
{
  if (c >> 11 > 0x1A)
  {
    if (HIWORD(c))
    {
      if (HIWORD(c) > 0x10u)
      {
        uint64_t v3 = 4820LL;
        goto LABEL_12;
      }

      unsigned int v1 = ((c >> 5) & 0x3F) + word_180A0913C[(c >> 11) + 2080];
    }

    else
    {
      else {
        int v2 = 320;
      }
      unsigned int v1 = v2 + (c >> 5);
    }
  }

  else
  {
    unsigned int v1 = c >> 5;
  }

  uint64_t v3 = (c & 0x1F) + 4 * word_180A0913C[v1];
LABEL_12:
  if (((1 << word_180A0913C[v3]) & 0x7000) != 0) {
    return c != 160 && c != 8239 && c != 8199;
  }
  else {
    return (c - 9) <= 0x16 && (c - 28) < 0xFFFFFFF2;
  }
}

UBool u_isblank(UChar32 c)
{
  if (c >> 11 <= 0x1A)
  {
    unsigned int v2 = c >> 5;
LABEL_15:
    uint64_t v4 = (c & 0x1F) + 4 * word_180A0913C[v2];
    return (word_180A0913C[v4] & 0x1F) == 12;
  }

  if (!HIWORD(c))
  {
    else {
      int v3 = 320;
    }
    unsigned int v2 = v3 + (c >> 5);
    goto LABEL_15;
  }

  if (HIWORD(c) <= 0x10u)
  {
    unsigned int v2 = ((c >> 5) & 0x3F) + word_180A0913C[(c >> 11) + 2080];
    goto LABEL_15;
  }

  uint64_t v4 = 4820LL;
  return (word_180A0913C[v4] & 0x1F) == 12;
}

UBool u_isUWhiteSpace(UChar32 c)
{
  return sub_18081C7AC(c, 1) & 1;
}

UBool u_isprint(UChar32 c)
{
  if (c >> 11 <= 0x1A)
  {
    unsigned int v1 = c >> 5;
LABEL_11:
    uint64_t v3 = (c & 0x1F) + 4 * word_180A0913C[v1];
    return ((1 << word_180A0913C[v3]) & 0x78001) == 0;
  }

  if (!HIWORD(c))
  {
    else {
      int v2 = 320;
    }
    unsigned int v1 = v2 + (c >> 5);
    goto LABEL_11;
  }

  if (HIWORD(c) <= 0x10u)
  {
    unsigned int v1 = ((c >> 5) & 0x3F) + word_180A0913C[(c >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 4820LL;
  return ((1 << word_180A0913C[v3]) & 0x78001) == 0;
}

BOOL sub_18081CDC4(unsigned int a1)
{
  if (a1 >> 11 > 0x1A)
  {
    if (HIWORD(a1))
    {
      if (HIWORD(a1) > 0x10u)
      {
        uint64_t v3 = 4820LL;
        return (word_180A0913C[v3] & 0x1F) == 0xC || sub_18081CE60(a1);
      }

      int v1 = ((a1 >> 5) & 0x3F) + word_180A0913C[(a1 >> 11) + 2080];
    }

    else
    {
      if (a1 >> 10 >= 0x37) {
        int v2 = 0;
      }
      else {
        int v2 = 320;
      }
      int v1 = v2 + (a1 >> 5);
    }
  }

  else
  {
    int v1 = a1 >> 5;
  }

  uint64_t v3 = (a1 & 0x1F) + 4 * word_180A0913C[v1];
  return (word_180A0913C[v3] & 0x1F) == 0xC || sub_18081CE60(a1);
}

BOOL sub_18081CE60(unsigned int a1)
{
  if (a1 >> 11 <= 0x1A)
  {
    int v1 = a1 >> 5;
LABEL_11:
    uint64_t v3 = (a1 & 0x1F) + 4 * word_180A0913C[v1];
    return ((1 << word_180A0913C[v3]) & 0x4F001) == 0;
  }

  if (!HIWORD(a1))
  {
    if (a1 >> 10 >= 0x37) {
      int v2 = 0;
    }
    else {
      int v2 = 320;
    }
    int v1 = v2 + (a1 >> 5);
    goto LABEL_11;
  }

  if (HIWORD(a1) <= 0x10u)
  {
    int v1 = ((a1 >> 5) & 0x3F) + word_180A0913C[(a1 >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 4820LL;
  return ((1 << word_180A0913C[v3]) & 0x4F001) == 0;
}

UBool u_isgraph(UChar32 c)
{
  if (c >> 11 <= 0x1A)
  {
    unsigned int v1 = c >> 5;
LABEL_11:
    uint64_t v3 = (c & 0x1F) + 4 * word_180A0913C[v1];
    return ((1 << word_180A0913C[v3]) & 0x5F001) == 0;
  }

  if (!HIWORD(c))
  {
    else {
      int v2 = 320;
    }
    unsigned int v1 = v2 + (c >> 5);
    goto LABEL_11;
  }

  if (HIWORD(c) <= 0x10u)
  {
    unsigned int v1 = ((c >> 5) & 0x3F) + word_180A0913C[(c >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 4820LL;
  return ((1 << word_180A0913C[v3]) & 0x5F001) == 0;
}

UBool u_ispunct(UChar32 c)
{
  if (c >> 11 <= 0x1A)
  {
    unsigned int v1 = c >> 5;
LABEL_11:
    uint64_t v3 = (c & 0x1F) + 4 * word_180A0913C[v1];
    return ((1 << word_180A0913C[v3]) & 0x30F80000) != 0;
  }

  if (!HIWORD(c))
  {
    else {
      int v2 = 320;
    }
    unsigned int v1 = v2 + (c >> 5);
    goto LABEL_11;
  }

  if (HIWORD(c) <= 0x10u)
  {
    unsigned int v1 = ((c >> 5) & 0x3F) + word_180A0913C[(c >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 4820LL;
  return ((1 << word_180A0913C[v3]) & 0x30F80000) != 0;
}

UBool u_isIDIgnorable(UChar32 c)
{
  if (c > 159)
  {
    if (c >> 11 > 0x1A)
    {
      if (HIWORD(c))
      {
        if (HIWORD(c) > 0x10u)
        {
          uint64_t v7 = 4820LL;
          return (word_180A0913C[v7] & 0x1F) == 16;
        }

        unsigned int v5 = ((c >> 5) & 0x3F) + word_180A0913C[(c >> 11) + 2080];
      }

      else
      {
        else {
          int v6 = 320;
        }
        unsigned int v5 = v6 + (c >> 5);
      }
    }

    else
    {
      unsigned int v5 = c >> 5;
    }

    uint64_t v7 = (c & 0x1F) + 4 * word_180A0913C[v5];
    return (word_180A0913C[v7] & 0x1F) == 16;
  }

  BOOL v2 = (c - 32) < 0xFFFFFFE9 || (c - 14) < 0xE;
  UBool v3 = (c - 32) >= 0x5F && v2;
  else {
    return 0;
  }
}

UBool u_isJavaIDStart(UChar32 c)
{
  if (c >> 11 <= 0x1A)
  {
    unsigned int v1 = c >> 5;
LABEL_11:
    uint64_t v3 = (c & 0x1F) + 4 * word_180A0913C[v1];
    return ((1 << word_180A0913C[v3]) & 0x240003E) != 0;
  }

  if (!HIWORD(c))
  {
    else {
      int v2 = 320;
    }
    unsigned int v1 = v2 + (c >> 5);
    goto LABEL_11;
  }

  if (HIWORD(c) <= 0x10u)
  {
    unsigned int v1 = ((c >> 5) & 0x3F) + word_180A0913C[(c >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 4820LL;
  return ((1 << word_180A0913C[v3]) & 0x240003E) != 0;
}

UBool u_isJavaIDPart(UChar32 c)
{
  if (c >> 11 > 0x1A)
  {
    if (HIWORD(c))
    {
      if (HIWORD(c) > 0x10u)
      {
        uint64_t v3 = 4820LL;
        goto LABEL_12;
      }

      unsigned int v1 = ((c >> 5) & 0x3F) + word_180A0913C[(c >> 11) + 2080];
    }

    else
    {
      else {
        int v2 = 320;
      }
      unsigned int v1 = v2 + (c >> 5);
    }
  }

  else
  {
    unsigned int v1 = c >> 5;
  }

  uint64_t v3 = (c & 0x1F) + 4 * word_180A0913C[v1];
LABEL_12:
  UBool v4 = 1;
  if (((1 << word_180A0913C[v3]) & 0x240077E) == 0) {
    return u_isIDIgnorable(c) != 0;
  }
  return v4;
}

int32_t u_charDigitValue(UChar32 c)
{
  if (c >> 11 > 0x1A)
  {
    if (HIWORD(c))
    {
      if (HIWORD(c) > 0x10u)
      {
        uint64_t v3 = 4820LL;
        goto LABEL_12;
      }

      unsigned int v1 = ((c >> 5) & 0x3F) + word_180A0913C[(c >> 11) + 2080];
    }

    else
    {
      else {
        int v2 = 320;
      }
      unsigned int v1 = v2 + (c >> 5);
    }
  }

  else
  {
    unsigned int v1 = c >> 5;
  }

  uint64_t v3 = (c & 0x1F) + 4 * word_180A0913C[v1];
LABEL_12:
  unsigned int v4 = word_180A0913C[v3];
  if (v4 >= 0x2C0) {
    return -1;
  }
  else {
    return (v4 >> 6) - 1;
  }
}

double u_getNumericValue(UChar32 c)
{
  if (c >> 11 > 0x1A)
  {
    if (HIWORD(c))
    {
      if (HIWORD(c) > 0x10u)
      {
        uint64_t v3 = 4820LL;
        goto LABEL_12;
      }

      unsigned int v1 = ((c >> 5) & 0x3F) + word_180A0913C[(c >> 11) + 2080];
    }

    else
    {
      else {
        int v2 = 320;
      }
      unsigned int v1 = v2 + (c >> 5);
    }
  }

  else
  {
    unsigned int v1 = c >> 5;
  }

  uint64_t v3 = (c & 0x1F) + 4 * word_180A0913C[v1];
LABEL_12:
  unsigned int v4 = word_180A0913C[v3];
  double result = -123456789.0;
  if (v4 < 0x40) {
    return result;
  }
  unsigned int v6 = v4 >> 6;
  if (v4 <= 0x2BF) {
    return (double)(int)(v6 - 1);
  }
  if (v4 <= 0x53F) {
    return (double)(int)(v6 - 11);
  }
  if (v4 >> 10 <= 0xA) {
    return (double)(int)(v6 - 21);
  }
  if (v4 >> 11 <= 0xE)
  {
    double v8 = (double)(int)((v4 >> 10) - 12);
    double v9 = (double)(int)(((v4 >> 6) & 0xF) + 1);
    return v8 / v9;
  }

  if (v4 >> 14 > 2)
  {
    unsigned int v14 = v4 >> 8;
    if (v4 >> 8 <= 0xC8) {
      return (double)(int)(((v4 >> 8) - 191) * dword_180A248B0[v4 >> 6]);
    }
    if (v14 > 0xCE)
    {
      if (v14 > 0xD2) {
        return result;
      }
      int v15 = (2 * (v4 >> 6)) | 1;
      unsigned int v16 = (v6 - 828) >> 2;
      int v17 = 32;
    }

    else
    {
      int v15 = (2 * (v4 >> 6)) | 1;
      unsigned int v16 = (v6 - 804) >> 2;
      int v17 = 20;
    }

    double v8 = (double)v15;
    double v9 = (double)(v17 << v16);
    return v8 / v9;
  }

  int v10 = (v4 >> 11) - 14;
  unsigned int v11 = (v4 >> 6) & 0x1F;
  unsigned int v12 = v11 + 2;
  double result = (double)v10;
  if (v11 >= 2)
  {
    do
    {
      double result = result * 10000.0;
      v12 -= 4;
    }

    while (v12 > 3);
  }

  switch(v12)
  {
    case 1u:
      double v13 = 10.0;
      return result * v13;
    case 2u:
      double v13 = 100.0;
      return result * v13;
    case 3u:
      double v13 = 1000.0;
      return result * v13;
  }

  return result;
}

int32_t u_digit(UChar32 ch, int8_t radix)
{
  int v2 = radix;
  if ((radix - 2) > 0x22)
  {
    char v8 = -1;
  }

  else
  {
    char v4 = u_charDigitValue(ch);
    else {
      char v5 = ch - 23;
    }
    else {
      char v6 = v5;
    }
    else {
      char v7 = v6;
    }
    else {
      char v8 = v7;
    }
    if ((v4 & 0x80) == 0) {
      char v8 = v4;
    }
  }

  if (v8 >= v2) {
    return -1;
  }
  else {
    return v8;
  }
}

UChar32 u_forDigit(int32_t digit, int8_t radix)
{
  UChar32 v2 = digit + 87;
  if (digit <= 9) {
    UChar32 v2 = digit + 48;
  }
  else {
    return 0;
  }
}

void u_getUnicodeVersion(UVersionInfo versionArray)
{
  if (versionArray) {
    *(_DWORD *)versionArray = 271;
  }
}

uint64_t sub_18081D4F8(unsigned int a1)
{
  if (a1 >> 11 <= 0x1A)
  {
    int v1 = a1 >> 5;
LABEL_11:
    uint64_t v3 = (a1 & 0x1F) + 4 * word_180A0913C[v1];
    return word_180A0913C[v3];
  }

  if (!HIWORD(a1))
  {
    if (a1 >> 10 >= 0x37) {
      int v2 = 0;
    }
    else {
      int v2 = 320;
    }
    int v1 = v2 + (a1 >> 5);
    goto LABEL_11;
  }

  if (HIWORD(a1) <= 0x10u)
  {
    int v1 = ((a1 >> 5) & 0x3F) + word_180A0913C[(a1 >> 11) + 2080];
    goto LABEL_11;
  }

  uint64_t v3 = 4820LL;
  return word_180A0913C[v3];
}

uint64_t sub_18081D568(int a1)
{
  if (a1 == 2) {
    unsigned int v1 = 49764913;
  }
  else {
    unsigned int v1 = 0;
  }
  if (a1) {
    return v1;
  }
  else {
    return 739527LL;
  }
}

void u_charAge(UChar32 c, UVersionInfo versionArray)
{
  if (versionArray)
  {
    unsigned int v3 = sub_18081C7AC(c, 0);
    *versionArray = v3 >> 28;
    versionArray[1] = HIBYTE(v3) & 0xF;
    *((_WORD *)versionArray + icu::UVector32::~UVector32(this + 1) = 0;
  }

uint64_t uscript_getScript(unsigned int a1, int *a2)
{
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  if (*a2 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (a1 >= 0x110000)
  {
    *a2 = 1;
    return 0xFFFFFFFFLL;
  }

  unsigned int v3 = sub_18081C7AC(a1, 0);
  unsigned int v4 = v3 & 0xF000FF;
  uint64_t result = v3 | (((v3 >> 20) & 3) << 8);
  if (v4 >= 0x400000)
  {
    if (v4 >= 0x800000)
    {
      if (v4 >= 0xC00000) {
        return word_180A08EE8[result];
      }
      else {
        return 1LL;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

BOOL uscript_hasScript(unsigned int a1, unsigned int a2)
{
  unsigned int v3 = sub_18081C7AC(a1, 0);
  unsigned int v4 = v3 | (((v3 >> 20) & 3) << 8);
  if (((v3 >> 22) & 3) != 0)
  {
    char v5 = (char *)&unk_180A08EE8 + 2 * v4;
    if ((v3 & 0xF000FF) >= 0xC00000) {
      char v5 = (char *)&unk_180A08EE8 + 2 * *((unsigned __int16 *)v5 + 1);
    }
    if (a2 >> 15) {
      return 0LL;
    }
    do
    {
      unsigned int v8 = *(unsigned __int16 *)v5;
      v5 += 2;
      __int16 v7 = v8;
    }

    while (v8 < a2);
    unsigned int v4 = v7 & 0x7FFF;
  }

  return v4 == a2;
}

uint64_t uscript_getScriptExtensions(unsigned int a1, int *a2, int a3, int *a4)
{
  if (!a4) {
    return 0LL;
  }
  if (*a4 > 0) {
    return 0LL;
  }
  if (a3 < 0 || !a2 && a3)
  {
    uint64_t result = 0LL;
    int v8 = 1;
LABEL_9:
    *a4 = v8;
    return result;
  }

  unsigned int v9 = sub_18081C7AC(a1, 0);
  int v10 = v9 | (((v9 >> 20) & 3) << 8);
  if (((v9 >> 22) & 3) != 0)
  {
    unsigned int v11 = &word_180A08EE8[v10];
    if ((v9 & 0xF000FF) >= 0xC00000) {
      unsigned int v11 = &word_180A08EE8[v11[1]];
    }
    uint64_t result = 0LL;
    do
    {
      while (1)
      {
        __int16 v13 = *v11++;
        __int16 v12 = v13;
        a2[result++] = v12 & 0x7FFF;
        if (v12 < 0) {
          return result;
        }
      }

      ++result;
    }

    while ((v12 & 0x8000) == 0);
    int v8 = 15;
    goto LABEL_9;
  }

  if (a3) {
    *a2 = v10;
  }
  else {
    *a4 = 15;
  }
  return 1LL;
}

UBlockCode ublock_getCode(UChar32 c)
{
  return (sub_18081C7AC(c, 0) >> 8) & 0x1FF;
}

uint64_t sub_18081D7EC(uint64_t result, int *a2)
{
  if (*a2 <= 0)
  {
    int v2 = (void *)result;
    utrie2_enum( (uint64_t)&off_189711630,  0LL,  (uint64_t (*)(uint64_t, uint64_t, void, uint64_t))sub_18081DA10,  result);
    ((void (*)(void, uint64_t))v2[1])(*v2, 9LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 10LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 14LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 28LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 32LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 133LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 134LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 127LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 8202LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 8208LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 8298LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 8304LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 65279LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 65280LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 160LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 161LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 8199LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 8200LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 8239LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 8240LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 97LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 123LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 65LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 91LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 65345LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 65371LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 65313LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 65339LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 103LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 71LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 65351LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 65319LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 8288LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 65520LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 65532LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 917504LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 921600LL);
    ((void (*)(void, uint64_t))v2[1])(*v2, 847LL);
    return ((uint64_t (*)(void, uint64_t))v2[1])(*v2, 848LL);
  }

  return result;
}

uint64_t sub_18081DA10(uint64_t a1)
{
  return 1LL;
}

uint64_t sub_18081DA2C(uint64_t result, int *a2)
{
  if (*a2 <= 0) {
    return utrie2_enum( (uint64_t)&off_189711680,  0LL,  (uint64_t (*)(uint64_t, uint64_t, void, uint64_t))sub_18081DA10,  result);
  }
  return result;
}

void icu::UCharsTrie::~UCharsTrie(void **this)
{
}

{
  uprv_free(*this);
}

uint64_t icu::UCharsTrie::current(icu::UCharsTrie *this)
{
  unsigned int v1 = (unsigned __int16 *)*((void *)this + 2);
  if (!v1) {
    return 0LL;
  }
  if ((*((_DWORD *)this + 6) & 0x80000000) != 0)
  {
    unsigned int v2 = *v1;
    if (v2 >= 0x40) {
      return (v2 >> 15) ^ 3;
    }
  }

  return 1LL;
}

uint64_t icu::UCharsTrie::firstForCodePoint(icu::UCharsTrie *this, int a2)
{
  __int16 v2 = a2;
  if (a2 >= 0x10000)
  {
    *((_DWORD *)this + 6) = -1;
    if ((icu::UCharsTrie::nextImpl( (uint64_t)this,  *((unsigned __int16 **)this + 1),  (unsigned __int16)((a2 >> 10) - 10304)) & 1) != 0) {
      return icu::UCharsTrie::next(this, v2 & 0x3FF | 0xDC00u);
    }
    else {
      return 0LL;
    }
  }

  else
  {
    *((_DWORD *)this + 6) = -1;
    return icu::UCharsTrie::nextImpl((uint64_t)this, *((unsigned __int16 **)this + 1), a2);
  }

uint64_t icu::UCharsTrie::next(icu::UCharsTrie *this, int a2)
{
  unsigned int v3 = (unsigned __int16 *)*((void *)this + 2);
  if (!v3) {
    return 0LL;
  }
  int v4 = *((_DWORD *)this + 6);
  if (v4 < 0) {
    return icu::UCharsTrie::nextImpl((uint64_t)this, v3, a2);
  }
  int v6 = *v3;
  char v5 = v3 + 1;
  if (v6 == a2)
  {
    *((_DWORD *)this + 6) = v4 - 1;
    *((void *)this + 2) = v5;
    if (v4) {
      return 1LL;
    }
    unsigned int v7 = *v5;
    if (v7 < 0x40) {
      return 1LL;
    }
    else {
      return (v7 >> 15) ^ 3;
    }
  }

  else
  {
    uint64_t v8 = 0LL;
    *((void *)this + 2) = 0LL;
  }

  return v8;
}

uint64_t icu::UCharsTrie::nextForCodePoint(icu::UCharsTrie *this, int a2)
{
  int v2 = a2;
  if (a2 >= 0x10000)
  {
    int v2 = v2 & 0x3FF | 0xDC00;
  }

  return icu::UCharsTrie::next(this, v2);
}

uint64_t icu::UCharsTrie::branchNext(uint64_t a1, unsigned __int16 *a2, int a3, int a4)
{
  if (!a3)
  {
    int v4 = *a2++;
    a3 = v4;
  }

  unsigned int v5 = a3 + 1;
  if (a3 < 5)
  {
    int v6 = a3 + 1;
  }

  else
  {
    do
    {
      int v6 = v5 >> 1;
      if (*a2 <= a4)
      {
        int v6 = v5 - v6;
        unsigned int v9 = a2[1];
        unsigned int v10 = v9 >> 10;
        BOOL v11 = v9 == 0xFFFF;
        __int16 v12 = a2 + 3;
        if (v11) {
          __int16 v12 = a2 + 4;
        }
        if (v10 >= 0x3F) {
          a2 = v12;
        }
        else {
          a2 += 2;
        }
      }

      else
      {
        int v7 = a2[1];
        if (v7 >> 10 < 0x3F)
        {
          uint64_t v8 = a2 + 2;
        }

        else if (v7 == 0xFFFF)
        {
          int v7 = a2[3] | (a2[2] << 16);
          uint64_t v8 = a2 + 4;
        }

        else
        {
          uint64_t v8 = a2 + 3;
          int v7 = (a2[2] | (v7 << 16)) + 0x4000000;
        }

        a2 = &v8[v7];
      }

      unsigned int v5 = v6;
    }

    while (v6 > 5);
  }

  int v13 = v6 + 1;
  while (1)
  {
    unsigned int v14 = (__int16 *)(a2 + 1);
    if (*a2 == a4) {
      break;
    }
    unsigned int v15 = a2[1] & 0x7FFF;
    unsigned int v16 = a2 + 4;
    if (v15 != 0x7FFF) {
      unsigned int v16 = a2 + 3;
    }
    if (v15 >= 0x4000) {
      a2 = v16;
    }
    else {
      a2 += 2;
    }
    if (--v13 <= 2)
    {
      if (*a2 == a4)
      {
        unsigned int v17 = a2[1];
        *(void *)(a1 + 16) = a2 + 1;
        LODWORD(v18) = (v17 >> 15) ^ 3;
        if (v17 >= 0x40) {
          return v18;
        }
        else {
          return 1LL;
        }
      }

      else
      {
        uint64_t v18 = 0LL;
        *(void *)(a1 + 16) = 0LL;
      }

      return v18;
    }
  }

  if (*v14 < 0)
  {
    uint64_t v18 = 2LL;
  }

  else
  {
    unsigned int v19 = (unsigned __int16)*v14;
    if (v19 >= 0x4000)
    {
      if (v19 > 0x7FFE)
      {
        unsigned int v19 = a2[3] | (a2[2] << 16);
        uint64_t v20 = a2 + 4;
      }

      else
      {
        uint64_t v20 = a2 + 3;
        unsigned int v19 = (a2[2] | (v19 << 16)) - 0x40000000;
      }
    }

    else
    {
      uint64_t v20 = a2 + 2;
    }

    unsigned int v14 = (__int16 *)&v20[v19];
    unsigned int v21 = (unsigned __int16)*v14;
    if (v21 < 0x40) {
      uint64_t v18 = 1LL;
    }
    else {
      uint64_t v18 = (v21 >> 15) ^ 3;
    }
  }

  *(void *)(a1 + 16) = v14;
  return v18;
}

uint64_t icu::UCharsTrie::nextImpl(uint64_t a1, unsigned __int16 *a2, int a3)
{
  unsigned int v6 = *a2;
  int v4 = a2 + 1;
  unsigned int v5 = v6;
  if (v6 < 0x30) {
    return icu::UCharsTrie::branchNext(a1, v4, v5, a3);
  }
  unsigned int v7 = v5 & 0x3F;
  while (v5 > 0x3F)
  {
    if (v5 >> 15) {
      goto LABEL_17;
    }
    uint64_t v8 = v4 + 2;
    if (v5 >> 6 <= 0x1FE) {
      uint64_t v8 = v4 + 1;
    }
    if (v5 >> 6 >= 0x101) {
      int v4 = v8;
    }
    unsigned int v5 = v7;
    if (v7 < 0x30)
    {
      unsigned int v5 = v7;
      return icu::UCharsTrie::branchNext(a1, v4, v5, a3);
    }
  }

  int v11 = *v4;
  unsigned int v10 = v4 + 1;
  if (v11 != a3)
  {
LABEL_17:
    uint64_t v14 = 0LL;
    *(void *)(a1 + 16) = 0LL;
    return v14;
  }

  *(_DWORD *)(a1 + 24) = v5 - 49;
  *(void *)(a1 + 16) = v10;
  if (v5 > 0x30) {
    return 1LL;
  }
  unsigned int v12 = *v10;
  BOOL v13 = v12 >= 0x40;
  LODWORD(v14) = (v12 >> 15) ^ 3;
  if (v13) {
    return v14;
  }
  else {
    return 1LL;
  }
}

uint64_t icu::UCharsTrie::next(uint64_t a1, _WORD **a2, int a3)
{
  int v3 = a3;
  unsigned int v5 = *a2;
  if ((a3 & 0x80000000) == 0)
  {
    if (a3) {
      goto LABEL_3;
    }
LABEL_45:
    uint64_t v20 = *(unsigned __int16 **)(a1 + 16);
    if (v20)
    {
      if ((*(_DWORD *)(a1 + 24) & 0x80000000) != 0)
      {
        unsigned int v21 = *v20;
        if (v21 >= 0x40) {
          return (v21 >> 15) ^ 3;
        }
      }

      return 1LL;
    }

    return 0LL;
  }

  if (!*v5) {
    goto LABEL_45;
  }
LABEL_3:
  unsigned int v6 = *(unsigned __int16 **)(a1 + 16);
  if (!v6) {
    return 0LL;
  }
  int v7 = *(_DWORD *)(a1 + 24);
  if (a3 < 0) {
    goto LABEL_14;
  }
  while (v3)
  {
    uint64_t v8 = 0LL;
    if (v7 >= -1) {
      int v9 = -1;
    }
    else {
      int v9 = v7;
    }
    int v10 = 1 - v3;
    int v11 = v7;
    while (1)
    {
      int v12 = (unsigned __int16)v5[v8];
      if (v11 < 0) {
        break;
      }
      if (v12 != v6[v8])
      {
LABEL_50:
        uint64_t result = 0LL;
        *(void *)(a1 + 16) = 0LL;
        return result;
      }

      --v11;
      ++v8;
      if (++v10 == 1)
      {
        v6 += (v3 - 1) + 1;
        v7 -= v3;
        goto LABEL_51;
      }
    }

    unsigned int v6 = (unsigned __int16 *)((char *)v6 + v8 * 2);
    unsigned int v5 = (_WORD *)((char *)v5 + v8 * 2 + 2);
    int v3 = -v10;
    while (1)
    {
      *(_DWORD *)(a1 + 24) = v9;
LABEL_25:
      unsigned int v16 = *v6;
      uint64_t v14 = v6 + 1;
      unsigned int v15 = v16;
      int v17 = v16 & 0x3F;
      while (1)
      {
        if (v15 <= 0x2F)
        {
          uint64_t result = icu::UCharsTrie::branchNext(a1, v14, v15, v12);
          if (!(_DWORD)result) {
            return result;
          }
          if (v3 < 0)
          {
            int v12 = (unsigned __int16)*v5;
            if (!*v5) {
              return result;
            }
          }

          else
          {
            if (!v3) {
              return result;
            }
            int v12 = (unsigned __int16)*v5;
            --v3;
          }

          if ((_DWORD)result != 2)
          {
            ++v5;
            unsigned int v6 = *(unsigned __int16 **)(a1 + 16);
            goto LABEL_25;
          }

          goto LABEL_50;
        }

        if (v15 <= 0x3F) {
          break;
        }
        if (v15 >= 0x8000) {
          goto LABEL_50;
        }
        unsigned int v18 = v15 >> 6;
        unsigned int v15 = v17;
        if (v18 >= 0x101)
        {
          if (v18 <= 0x1FE) {
            ++v14;
          }
          else {
            v14 += 2;
          }
          unsigned int v15 = v17;
        }
      }

      if (v12 != *v14) {
        goto LABEL_50;
      }
      unsigned int v6 = v14 + 1;
      int v7 = v15 - 49;
      if ((v3 & 0x80000000) == 0) {
        break;
      }
LABEL_14:
      int v12 = (unsigned __int16)*v5;
      if (!*v5) {
        goto LABEL_51;
      }
      if (v7 >= -1) {
        int v9 = -1;
      }
      else {
        int v9 = v7;
      }
      ++v5;
      while ((v7 & 0x80000000) == 0)
      {
        if (v12 != *v6) {
          goto LABEL_50;
        }
        ++v6;
        --v7;
        int v13 = (unsigned __int16)*v5++;
        int v12 = v13;
        if (!v13) {
          goto LABEL_51;
        }
      }
    }
  }

uint64_t icu::UCharsTrie::findUniqueValueFromBranch( unsigned __int16 *a1, int a2, uint64_t a3, unsigned int *a4)
{
  int v6 = a2;
  if (a2 < 6)
  {
LABEL_15:
    int v15 = v6 + 1;
    while (1)
    {
      unsigned int v16 = a1 + 2;
      unsigned __int16 v17 = a1[1];
      int v18 = v17 & 0x7FFF;
      if (v18 >= 0x4000)
      {
        if (v18 == 0x7FFF)
        {
          int v19 = a1[2] << 16;
          unsigned int v16 = a1 + 3;
          uint64_t v20 = 4LL;
        }

        else
        {
          int v19 = (v18 << 16) - 0x40000000;
          uint64_t v20 = 3LL;
        }

        int v18 = v19 | *v16;
        a1 += v20;
        if ((v17 & 0x8000) == 0)
        {
LABEL_25:
          goto LABEL_26;
        }
      }

      else
      {
        a1 += 2;
        if ((v17 & 0x8000) == 0) {
          goto LABEL_25;
        }
      }

      if (!(_BYTE)a3)
      {
        *a4 = v18;
LABEL_26:
        LOBYTE(a3) = 1;
        goto LABEL_27;
      }

      if (v18 != *a4) {
        return 0LL;
      }
LABEL_27:
      if (--v15 <= 2) {
        return (uint64_t)(a1 + 1);
      }
    }
  }

  while (1)
  {
    int v8 = a1[1];
    if (v8 >> 10 < 0x3F)
    {
      int v9 = a1 + 2;
    }

    else if (v8 == 0xFFFF)
    {
      int v8 = a1[3] | (a1[2] << 16);
      int v9 = a1 + 4;
    }

    else
    {
      int v9 = a1 + 3;
      int v8 = (a1[2] | (v8 << 16)) + 0x4000000;
    }

    uint64_t result = icu::UCharsTrie::findUniqueValueFromBranch(&v9[v8], v6 >> 1, a3, a4);
    if (!result) {
      return result;
    }
    v6 -= v6 >> 1;
    unsigned int v11 = a1[1];
    unsigned int v12 = v11 >> 10;
    BOOL v13 = v11 == 0xFFFF;
    uint64_t v14 = a1 + 3;
    if (v13) {
      uint64_t v14 = a1 + 4;
    }
    if (v12 >= 0x3F) {
      a1 = v14;
    }
    else {
      a1 += 2;
    }
    if (v6 <= 5) {
      goto LABEL_15;
    }
  }

uint64_t icu::UCharsTrie::findUniqueValue(unsigned __int16 *a1, char a2, unsigned int *a3)
{
  unsigned int v6 = *a1;
  int v4 = a1 + 1;
  for (unsigned int i = v6; ; i &= 0x3Fu)
  {
    while (1)
    {
      while (i <= 0x2F)
      {
        if (!i)
        {
          unsigned int v9 = *v4++;
          unsigned int i = v9;
        }

        uint64_t result = icu::UCharsTrie::findUniqueValueFromBranch(v4, i + 1, a2, a3);
        if (!result) {
          return result;
        }
        unsigned int v11 = *(unsigned __int16 *)result;
        int v4 = (unsigned __int16 *)(result + 2);
        unsigned int i = v11;
        a2 = 1;
      }

      if (i > 0x3F) {
        break;
      }
      int v7 = &v4[i - 47];
      unsigned int v8 = *v7;
      int v4 = v7 + 1;
      unsigned int i = v8;
    }

    unsigned int v12 = i >> 6;
    if (i >= 0x8000)
    {
      unsigned int v13 = i & 0x7FFF;
      if (v13 >= 0x4000)
      {
        if (v13 == 0x7FFF)
        {
          uint64_t v14 = v4 + 1;
          int v15 = *v4 << 16;
        }

        else
        {
          int v15 = (v13 << 16) - 0x40000000;
          uint64_t v14 = v4;
        }

        unsigned int v13 = v15 | *v14;
      }
    }

    else if (v12 > 0x100)
    {
      unsigned int v13 = v12 > 0x1FE ? v4[1] | (*v4 << 16) : (*v4 | (((i >> 6) & 0x1FF) << 16)) - 16842752;
    }

    else
    {
      unsigned int v13 = v12 - 1;
    }

    if (a2)
    {
      if (v13 != *a3) {
        return 0LL;
      }
    }

    else
    {
      *a3 = v13;
      a2 = 1;
    }

    if (i >> 15) {
      break;
    }
    if (v12 >= 0x101)
    {
      if (v12 > 0x1FE) {
        v4 += 2;
      }
      else {
        ++v4;
      }
    }
  }

  return 1LL;
}

uint64_t icu::UCharsTrie::getNextUChars(icu::UCharsTrie *this, icu::Appendable *a2)
{
  int v2 = (unsigned __int16 *)*((void *)this + 2);
  if (!v2) {
    return 0LL;
  }
  if ((*((_DWORD *)this + 6) & 0x80000000) == 0)
  {
    uint64_t v4 = *v2;
LABEL_4:
    (*(void (**)(icu::Appendable *, uint64_t))(*(void *)a2 + 24LL))(a2, v4);
    return 1LL;
  }

  int v7 = v2 + 1;
  unsigned int v6 = *v2;
  if (v6 >= 0x40)
  {
    if ((v6 & 0x8000) == 0)
    {
      unsigned int v8 = v2 + 3;
      unsigned int v9 = v2 + 2;
      if (v6 >> 6 > 0x1FE) {
        unsigned int v9 = v8;
      }
      if (v6 >> 6 >= 0x101) {
        int v7 = v9;
      }
      v6 &= 0x3Fu;
      goto LABEL_12;
    }

    return 0LL;
  }

uint64_t icu::UCharsTrie::getNextBranchUChars(unsigned __int16 *a1, int a2, uint64_t a3)
{
  int v4 = a2;
  if (a2 >= 6)
  {
    do
    {
      int v6 = a1[1];
      if (v6 >> 10 < 0x3F)
      {
        int v7 = a1 + 2;
      }

      else if (v6 == 0xFFFF)
      {
        int v6 = a1[3] | (a1[2] << 16);
        int v7 = a1 + 4;
      }

      else
      {
        int v7 = a1 + 3;
        int v6 = (a1[2] | (v6 << 16)) + 0x4000000;
      }

      icu::UCharsTrie::getNextBranchUChars(&v7[v6], v4 >> 1, a3);
      v4 -= v4 >> 1;
      unsigned int v8 = a1[1];
      unsigned int v9 = v8 >> 10;
      BOOL v10 = v8 == 0xFFFF;
      unsigned int v11 = a1 + 3;
      if (v10) {
        unsigned int v11 = a1 + 4;
      }
      if (v9 >= 0x3F) {
        a1 = v11;
      }
      else {
        a1 += 2;
      }
    }

    while (v4 > 5);
  }

  int v12 = v4 + 1;
  do
  {
    (*(void (**)(uint64_t, void))(*(void *)a3 + 24LL))(a3, *a1);
    unsigned int v13 = a1[1] & 0x7FFF;
    uint64_t v14 = a1 + 4;
    if (v13 != 0x7FFF) {
      uint64_t v14 = a1 + 3;
    }
    if (v13 >= 0x4000) {
      a1 = v14;
    }
    else {
      a1 += 2;
    }
    --v12;
  }

  while (v12 > 2);
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 24LL))(a3, *a1);
}

unsigned int *sub_18081E560(unsigned int *result, uint64_t a2, unsigned int a3, uint64_t a4, int *a5)
{
  if (*a5 <= 0)
  {
    unsigned int v8 = result;
    if (*(__int16 *)(a2 + 8) < 0)
    {
      int v9 = *(_DWORD *)(a2 + 12);
      if (v9 >= 0x10000)
      {
        *a5 = 8;
        return result;
      }
    }

    else
    {
      int v9 = *(unsigned __int16 *)(a2 + 8) >> 5;
    }

    unsigned int v10 = *(unsigned __int16 *)(a4 + 8);
    int v11 = (__int16)v10;
    unsigned int v12 = v10 >> 5;
    if (v11 < 0) {
      unsigned int v12 = *(_DWORD *)(a4 + 12);
    }
    void *result = v12;
    __int16 v17 = v9;
    icu::UnicodeString::doAppend(a4, (uint64_t)&v17, 0, 1LL);
    v8[1] = a3;
    unsigned int v13 = *(unsigned __int16 *)(a2 + 8);
    int v14 = (__int16)v13;
    unsigned int v15 = v13 >> 5;
    if (v14 >= 0) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = *(unsigned int *)(a2 + 12);
    }
    return (unsigned int *)icu::UnicodeString::doAppend(a4, (const icu::UnicodeString *)a2, 0, v16);
  }

  return result;
}

uint64_t sub_18081E630(int *a1, int *a2, icu::UnicodeString *this)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  sub_18081E728(this, a1, (icu::UnicodeString *)v14);
  sub_18081E728(this, a2, (icu::UnicodeString *)v10);
  if ((v11 & 1) != 0)
  {
    uint64_t v8 = (v15 & 1) == 0;
  }

  else
  {
    if ((v15 & 0x8000u) == 0) {
      int32_t v5 = v15 >> 5;
    }
    else {
      int32_t v5 = v16;
    }
    if ((v11 & 0x8000u) == 0) {
      int v6 = v11 >> 5;
    }
    else {
      int v6 = *(_DWORD *)&v12[2];
    }
    if ((v11 & 2) != 0) {
      int v7 = v12;
    }
    else {
      int v7 = v13;
    }
    uint64_t v8 = icu::UnicodeString::doCompare( (uint64_t)v14,  0,  v5,  (uint64_t)v7,  v6 & (v6 >> 31),  v6 & ~(v6 >> 31));
  }

  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v10);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v14);
  return v8;
}

icu::UnicodeString *sub_18081E728@<X0>( icu::UnicodeString *this@<X1>, int *a2@<X0>, icu::UnicodeString *a3@<X8>)
{
  uint64_t v3 = *a2;
  unsigned int v4 = *((unsigned __int16 *)this + 4);
  if ((v4 & 0x8000u) == 0) {
    unsigned int v5 = v4 >> 5;
  }
  else {
    unsigned int v5 = *((_DWORD *)this + 3);
  }
  if (v5 <= v3)
  {
    int32_t v7 = 0xFFFF;
  }

  else
  {
    if ((v4 & 2) != 0) {
      int v6 = (char *)this + 10;
    }
    else {
      int v6 = (char *)*((void *)this + 3);
    }
    int32_t v7 = *(unsigned __int16 *)&v6[2 * v3];
  }

  return icu::UnicodeString::tempSubString(this, (int)v3 + 1, v7, a3);
}

double icu::UCharsTrieBuilder::UCharsTrieBuilder(icu::UCharsTrieBuilder *this, UErrorCode *a2)
{
  int v2 = icu::StringTrieBuilder::StringTrieBuilder(this);
  *int v2 = off_1897116E0;
  void v2[2] = off_18971B688;
  *((_WORD *)v2 + 12) = 2;
  double result = 0.0;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  return result;
}

{
  void *v2;
  double result;
  int v2 = icu::StringTrieBuilder::StringTrieBuilder(this);
  *int v2 = off_1897116E0;
  void v2[2] = off_18971B688;
  *((_WORD *)v2 + 12) = 2;
  double result = 0.0;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  return result;
}

void icu::UCharsTrieBuilder::~UCharsTrieBuilder(icu::UCharsTrieBuilder *this)
{
  *(void *)this = off_1897116E0;
  int v2 = (void *)*((void *)this + 10);
  if (v2) {
    icu::UMemory::operator delete[](v2);
  }
  uprv_free(*((void **)this + 12));
  icu::UnicodeString::~UnicodeString(v3, (icu::UCharsTrieBuilder *)((char *)this + 16));
  icu::StringTrieBuilder::~StringTrieBuilder(this);
}

{
  void *v1;
  icu::UCharsTrieBuilder::~UCharsTrieBuilder(this);
  icu::UMemory::operator delete(v1);
}

icu::UCharsTrieBuilder *icu::UCharsTrieBuilder::add( icu::UCharsTrieBuilder *this, const icu::UnicodeString *a2, unsigned int a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    if (*((int *)this + 27) > 0)
    {
      UErrorCode v6 = U_NO_WRITE_PERMISSION;
LABEL_4:
      *a4 = v6;
      return this;
    }

    int v10 = *((_DWORD *)this + 23);
    if (v10 == *((_DWORD *)this + 22))
    {
      if (v10) {
        int v11 = 4 * v10;
      }
      else {
        int v11 = 1024;
      }
      if (v11 < 0) {
        uint64_t v12 = -1LL;
      }
      else {
        uint64_t v12 = 8LL * v11;
      }
      unsigned int v13 = (unsigned int *)icu::UMemory::operator new[]((icu::UMemory *)v12, (unint64_t)a2);
      if (!v13) {
        goto LABEL_22;
      }
      int v14 = v13;
      uint64_t v15 = *((unsigned int *)this + 23);
      int32_t v16 = (void *)*((void *)this + 10);
      if (v16) {
        icu::UMemory::operator delete[](v16);
      }
      *((void *)this + 10) = v14;
      *((_DWORD *)this + 22) = v11;
      int v10 = *((_DWORD *)this + 23);
    }

    else
    {
      int v14 = (unsigned int *)*((void *)this + 10);
    }

    *((_DWORD *)this + 23) = v10 + 1;
    sub_18081E560(&v14[2 * v10], (uint64_t)a2, a3, (uint64_t)this + 16, (int *)a4);
    if (*(int *)a4 <= 0 && (*((_WORD *)this + 12) & 1) != 0)
    {
LABEL_22:
      UErrorCode v6 = U_MEMORY_ALLOCATION_ERROR;
      goto LABEL_4;
    }
  }

  return this;
}

uint64_t icu::UCharsTrieBuilder::build(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t result = icu::UMemory::operator new((icu::UMemory *)0x20, v5);
  if (result)
  {
    uint64_t v7 = *(void *)(a1 + 96);
    uint64_t v8 = v7 + 2LL * (*(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 108));
    *(void *)uint64_t result = v7;
    *(void *)(result + 8) = v8;
    *(void *)(result + 16) = v8;
    *(_DWORD *)(result + 24) = -1;
    *(void *)(a1 + 96) = 0LL;
    *(_DWORD *)(a1 + 104) = 0;
  }

  else
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }

  return result;
}

void icu::UCharsTrieBuilder::buildUChars(icu::StringTrieBuilder *this, uint64_t a2, UErrorCode *a3)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (*(int *)a3 <= 0)
  {
    int v4 = *((_DWORD *)this + 27);
    if (!*((void *)this + 12) || v4 <= 0)
    {
      if (!v4)
      {
        uint64_t v10 = *((unsigned int *)this + 23);
        if (!(_DWORD)v10)
        {
          UErrorCode v17 = U_INDEX_OUTOFBOUNDS_ERROR;
          goto LABEL_39;
        }

        if ((*((_WORD *)this + 12) & 1) != 0)
        {
LABEL_37:
          UErrorCode v17 = U_MEMORY_ALLOCATION_ERROR;
LABEL_39:
          *a3 = v17;
          return;
        }

        uprv_sortArray( *((void *)this + 10),  v10,  8,  (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18081ECA4,  (uint64_t)this + 16,  0,  (int *)a3);
        memset(v19, 0, sizeof(v19));
        sub_18081E728((icu::StringTrieBuilder *)((char *)this + 16), *((int **)this + 10), (icu::UnicodeString *)v19);
        if (*((int *)this + 23) >= 2)
        {
          uint64_t v11 = 1LL;
          uint64_t v12 = 8LL;
          do
          {
            memset(v18, 0, sizeof(v18));
            sub_18081E728( (icu::StringTrieBuilder *)((char *)this + 16),  (int *)(*((void *)this + 10) + v12),  (icu::UnicodeString *)v18);
            if ((BYTE8(v19[0]) & 1) != 0)
            {
              if ((BYTE8(v18[0]) & 1) != 0) {
                goto LABEL_42;
              }
            }

            else
            {
              if ((SWORD4(v19[0]) & 0x8000u) == 0) {
                int v13 = WORD4(v19[0]) >> 5;
              }
              else {
                int v13 = HIDWORD(v19[0]);
              }
              if ((SWORD4(v18[0]) & 0x8000u) == 0) {
                int v14 = WORD4(v18[0]) >> 5;
              }
              else {
                int v14 = HIDWORD(v18[0]);
              }
              if ((BYTE8(v18[0]) & 1) == 0
                && v13 == v14
                && icu::UnicodeString::doEquals((icu::UnicodeString *)v19, (const icu::UnicodeString *)v18, v13))
              {
LABEL_42:
                *a3 = U_ILLEGAL_ARGUMENT_ERROR;
                icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v18);
                icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v19);
                return;
              }
            }

            icu::UnicodeString::fastCopyFrom((UChar **)v19, (UChar **)v18);
            icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v18);
            ++v11;
            v12 += 8LL;
          }

          while (v11 < *((int *)this + 23));
        }

        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v19);
      }

      *((_DWORD *)this + 27) = 0;
      unsigned int v8 = *((unsigned __int16 *)this + 12);
      if ((v8 & 0x8000) != 0) {
        int v9 = *((_DWORD *)this + 7);
      }
      else {
        int v9 = v8 >> 5;
      }
      if (v9 <= 1024) {
        int v15 = 1024;
      }
      else {
        int v15 = v9;
      }
      if (*((_DWORD *)this + 26) < v15)
      {
        uprv_free(*((void **)this + 12));
        int32_t v16 = uprv_malloc((2 * v15));
        *((void *)this + 12) = v16;
        if (!v16)
        {
          *a3 = U_MEMORY_ALLOCATION_ERROR;
          *((_DWORD *)this + 26) = 0;
          return;
        }

        *((_DWORD *)this + 26) = v15;
      }

      icu::StringTrieBuilder::build((int32x2_t *)this, a2, *((unsigned int *)this + 23), a3);
      if (*((void *)this + 12)) {
        return;
      }
      goto LABEL_37;
    }
  }

icu::UnicodeString *icu::UCharsTrieBuilder::buildUnicodeString( uint64_t a1, uint64_t a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    int v7 = *(_DWORD *)(a1 + 108);
    int v9 = (const UChar *)(*(void *)(a1 + 96) + 2LL * (*(_DWORD *)(a1 + 104) - v7));
    icu::UnicodeString::setTo(a3, 0, &v9, v7);
  }

  return a3;
}

uint64_t sub_18081ECA4(icu::UnicodeString *this, int *a2, int *a3)
{
  return sub_18081E630(a2, a3, this);
}

uint64_t icu::UCharsTrieBuilder::getElementStringLength(icu::UCharsTrieBuilder *this, int a2)
{
  uint64_t v2 = *(int *)(*((void *)this + 10) + 8LL * a2);
  unsigned int v3 = *((unsigned __int16 *)this + 12);
  if ((v3 & 0x8000u) == 0) {
    unsigned int v4 = v3 >> 5;
  }
  else {
    unsigned int v4 = *((_DWORD *)this + 7);
  }
  if ((v3 & 2) != 0) {
    unint64_t v5 = (char *)this + 26;
  }
  else {
    unint64_t v5 = (char *)*((void *)this + 5);
  }
  return *(unsigned __int16 *)&v5[2 * v2];
}

uint64_t icu::UCharsTrieBuilder::getElementUnit(icu::UCharsTrieBuilder *this, int a2, int a3)
{
  int v3 = a3 + *(_DWORD *)(*((void *)this + 10) + 8LL * a2) + 1;
  unsigned int v4 = *((unsigned __int16 *)this + 12);
  if ((v4 & 0x8000u) == 0) {
    unsigned int v5 = v4 >> 5;
  }
  else {
    unsigned int v5 = *((_DWORD *)this + 7);
  }
  if (v5 <= v3) {
    return 0xFFFFLL;
  }
  if ((v4 & 2) != 0) {
    UErrorCode v6 = (char *)this + 26;
  }
  else {
    UErrorCode v6 = (char *)*((void *)this + 5);
  }
  return *(unsigned __int16 *)&v6[2 * v3];
}

uint64_t icu::UCharsTrieBuilder::getElementValue(icu::UCharsTrieBuilder *this, int a2)
{
  return *(unsigned int *)(*((void *)this + 10) + 8LL * a2 + 4);
}

uint64_t icu::UCharsTrieBuilder::getLimitOfLinearMatch( icu::UCharsTrieBuilder *this, int a2, int a3, uint64_t a4)
{
  uint64_t v4 = *((void *)this + 10);
  uint64_t v5 = *(int *)(v4 + 8LL * a2);
  unsigned int v6 = *((unsigned __int16 *)this + 12);
  if ((v6 & 0x8000u) == 0) {
    unsigned int v7 = v6 >> 5;
  }
  else {
    unsigned int v7 = *((_DWORD *)this + 7);
  }
  if (v7 <= v5)
  {
    LODWORD(v9) = 0xFFFF;
  }

  else
  {
    unsigned int v8 = (char *)this + 26;
    if ((v6 & 2) == 0) {
      unsigned int v8 = (char *)*((void *)this + 5);
    }
    LODWORD(v9) = *(unsigned __int16 *)&v8[2 * v5];
  }

  uint64_t v10 = (_DWORD *)(v4 + 8LL * a3);
  uint64_t v11 = v9;
  else {
    uint64_t v9 = v9;
  }
  int v12 = v5 + 2;
  for (uint64_t i = (int)a4 + 1LL; i < v11; ++i)
  {
    if (v7 <= v12 + (int)a4)
    {
      int v15 = 0xFFFF;
    }

    else
    {
      int v14 = (char *)*((void *)this + 5);
      if ((v6 & 2) != 0) {
        int v14 = (char *)this + 26;
      }
      int v15 = *(unsigned __int16 *)&v14[2 * v12 + 2 * (int)a4];
    }

    unsigned int v16 = a4 + *v10 + 2;
    if (v7 <= v16)
    {
      int v18 = 0xFFFF;
    }

    else
    {
      UErrorCode v17 = (char *)*((void *)this + 5);
      if ((v6 & 2) != 0) {
        UErrorCode v17 = (char *)this + 26;
      }
      int v18 = *(unsigned __int16 *)&v17[2 * v16];
    }

    a4 = (a4 + 1);
    if (v15 != v18) {
      return a4;
    }
  }

  return v9;
}

uint64_t icu::UCharsTrieBuilder::countElementUnits(icu::UCharsTrieBuilder *this, uint64_t a2, int a3, int a4)
{
  int v4 = 0;
  uint64_t v5 = *((void *)this + 10);
  int v6 = a4 + 1;
  unsigned int v7 = *((unsigned __int16 *)this + 12);
  if ((v7 & 0x8000u) == 0) {
    unsigned int v8 = v7 >> 5;
  }
  else {
    unsigned int v8 = *((_DWORD *)this + 7);
  }
  uint64_t v9 = a3;
LABEL_5:
  unsigned int v10 = *(_DWORD *)(v5 + 8LL * (int)a2) + v6;
  if (v8 <= v10)
  {
    int v12 = 0xFFFF;
  }

  else
  {
    uint64_t v11 = (char *)*((void *)this + 5);
    if ((v7 & 2) != 0) {
      uint64_t v11 = (char *)this + 26;
    }
    int v12 = *(unsigned __int16 *)&v11[2 * v10];
  }

  a2 = (int)a2;
  int v13 = (_DWORD *)(v5 + 8 + 8LL * (int)a2);
  while (++a2 < v9)
  {
    unsigned int v14 = *v13 + v6;
    if (v8 <= v14)
    {
      int v16 = 0xFFFF;
    }

    else
    {
      int v15 = (char *)*((void *)this + 5);
      if ((v7 & 2) != 0) {
        int v15 = (char *)this + 26;
      }
      int v16 = *(unsigned __int16 *)&v15[2 * v14];
    }

    v13 += 2;
    if (v12 != v16)
    {
      ++v4;
      goto LABEL_5;
    }
  }

  return (v4 + 1);
}

uint64_t icu::UCharsTrieBuilder::skipElementsBySomeUnits( icu::UCharsTrieBuilder *this, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = *((void *)this + 10);
  int v5 = a3 + 1;
  unsigned int v6 = *((unsigned __int16 *)this + 12);
  if ((v6 & 0x8000u) == 0) {
    unsigned int v7 = v6 >> 5;
  }
  else {
    unsigned int v7 = *((_DWORD *)this + 7);
  }
  do
  {
    unsigned int v8 = *(_DWORD *)(v4 + 8LL * (int)a2) + v5;
    if (v7 <= v8)
    {
      int v10 = 0xFFFF;
    }

    else
    {
      uint64_t v9 = (char *)*((void *)this + 5);
      if ((v6 & 2) != 0) {
        uint64_t v9 = (char *)this + 26;
      }
      int v10 = *(unsigned __int16 *)&v9[2 * v8];
    }

    uint64_t v11 = (int *)(v4 + 8 + 8LL * (int)a2);
    do
    {
      int v12 = *v11;
      v11 += 2;
      int v13 = v12 + v5;
      if (v7 <= v12 + v5)
      {
        int v15 = 0xFFFF;
      }

      else
      {
        unsigned int v14 = (char *)*((void *)this + 5);
        if ((v6 & 2) != 0) {
          unsigned int v14 = (char *)this + 26;
        }
        int v15 = *(unsigned __int16 *)&v14[2 * v13];
      }

      a2 = (a2 + 1);
    }

    while (v10 == v15);
    BOOL v16 = __OFSUB__(a4--, 1);
  }

  while (!((a4 < 0) ^ v16 | (a4 == 0)));
  return a2;
}

uint64_t icu::UCharsTrieBuilder::indexOfElementWithNextUnit(uint64_t a1, int a2, int a3, int a4)
{
  int v4 = a3 + 1;
  unsigned int v5 = *(unsigned __int16 *)(a1 + 24);
  unsigned int v6 = v5 >> 5;
  if ((v5 & 0x8000u) != 0) {
    unsigned int v6 = *(_DWORD *)(a1 + 28);
  }
  LODWORD(v7) = a2 - 1;
  unsigned int v8 = (int *)(*(void *)(a1 + 80) + 8LL * a2);
  do
  {
    int v9 = *v8;
    v8 += 2;
    int v10 = v4 + v9;
    if (v6 <= v4 + v9)
    {
      int v12 = 0xFFFF;
    }

    else
    {
      uint64_t v11 = *(void *)(a1 + 40);
      if ((v5 & 2) != 0) {
        uint64_t v11 = a1 + 26;
      }
      int v12 = *(unsigned __int16 *)(v11 + 2LL * v10);
    }

    uint64_t v7 = (v7 + 1);
  }

  while (v12 == a4);
  return v7;
}

uint64_t icu::UCharsTrieBuilder::UCTLinearMatchNode::UCTLinearMatchNode( uint64_t a1, unsigned __int16 *a2, int a3, uint64_t a4)
{
  if (a4) {
    int v5 = *(_DWORD *)(a4 + 8);
  }
  else {
    int v5 = 0;
  }
  unsigned int v6 = v5 + 37 * a3 + 298634171;
  *(void *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = a3;
  *(void *)a1 = &off_189711790;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 8) = ustr_hashUCharsN(a2, a3) + 37 * v6;
  return a1;
}

uint64_t icu::UCharsTrieBuilder::UCTLinearMatchNode::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  uint64_t result = icu::StringTrieBuilder::LinearMatchNode::operator==(a1, a2);
  if ((_DWORD)result) {
    return u_memcmp(*(const UChar **)(a1 + 40), *(const UChar **)(a2 + 40), *(_DWORD *)(a1 + 24)) == 0;
  }
  return result;
}

uint64_t icu::UCharsTrieBuilder::UCTLinearMatchNode::write( icu::UCharsTrieBuilder::UCTLinearMatchNode *this, icu::StringTrieBuilder *a2)
{
  uint64_t v4 = *((char *)this + 16);
  uint64_t v5 = *((unsigned int *)this + 5);
  int v6 = (*(uint64_t (**)(icu::StringTrieBuilder *))(*(void *)a2 + 96LL))(a2);
  uint64_t result = (*(uint64_t (**)(icu::StringTrieBuilder *, uint64_t, uint64_t, void))(*(void *)a2 + 144LL))( a2,  v4,  v5,  (v6 + *((_DWORD *)this + 6) - 1));
  *((_DWORD *)this + 3) = result;
  return result;
}

uint64_t icu::UCharsTrieBuilder::write(uint64_t a1, const UChar *a2, int32_t a3)
{
  int v6 = *(_DWORD *)(a1 + 108) + a3;
  if (icu::UCharsTrieBuilder::ensureCapacity((icu::UCharsTrieBuilder *)a1, v6))
  {
    *(_DWORD *)(a1 + 108) = v6;
    u_memcpy((UChar *)(*(void *)(a1 + 96) + 2LL * (*(_DWORD *)(a1 + 104) - v6)), a2, a3);
  }

  return *(unsigned int *)(a1 + 108);
}

uint64_t *icu::UCharsTrieBuilder::createLinearMatchNode( icu::UCharsTrieBuilder *this, unint64_t a2, int a3, int a4, icu::StringTrieBuilder::Node *a5)
{
  int v8 = a2;
  UErrorCode v17 = (uint64_t *)*MEMORY[0x1895F89C0];
  int v10 = icu::UMemory::operator new(v17, (icu::UMemory *)0x30, a2);
  if (v10)
  {
    sub_18081E728( (icu::UCharsTrieBuilder *)((char *)this + 16),  (int *)(*((void *)this + 10) + 8LL * v8),  (icu::UnicodeString *)v14);
    if ((v15 & 0x11) != 0)
    {
      uint64_t v11 = 0LL;
    }

    else if ((v15 & 2) != 0)
    {
      uint64_t v11 = v16;
    }

    else
    {
      uint64_t v11 = *(_BYTE **)&v16[14];
    }

    icu::UCharsTrieBuilder::UCTLinearMatchNode::UCTLinearMatchNode( (uint64_t)v10,  (unsigned __int16 *)&v11[2 * a3],  a4,  (uint64_t)a5);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v14);
  }

  return v10;
}

uint64_t icu::UCharsTrieBuilder::ensureCapacity(icu::UCharsTrieBuilder *this, int a2)
{
  if (!*((void *)this + 12)) {
    return 0LL;
  }
  int v3 = *((_DWORD *)this + 26);
  if (v3 >= a2) {
    return 1LL;
  }
  do
  {
    int v4 = v3;
    v3 *= 2;
  }

  while (v3 <= a2);
  uint64_t v5 = (UChar *)uprv_malloc(4 * v4);
  int v6 = v5;
  if (v5)
  {
    u_memcpy( &v5[v3 - *((_DWORD *)this + 27)],  (const UChar *)(*((void *)this + 12) + 2LL * (*((_DWORD *)this + 26) - *((_DWORD *)this + 27))),  *((_DWORD *)this + 27));
    uint64_t v7 = 1LL;
  }

  else
  {
    int v3 = 0;
    uint64_t v7 = 0LL;
  }

  uprv_free(*((void **)this + 12));
  *((void *)this + 12) = v6;
  *((_DWORD *)this + 26) = v3;
  return v7;
}

uint64_t icu::UCharsTrieBuilder::write(icu::UCharsTrieBuilder *this, __int16 a2)
{
  int v4 = *((_DWORD *)this + 27);
  uint64_t v5 = (v4 + 1);
  *((_DWORD *)this + 27) = v5;
  *(_WORD *)(*((void *)this + 12) + 2LL * (*((_DWORD *)this + 26) - (int)v5)) = a2;
  return v5;
}

uint64_t icu::UCharsTrieBuilder::writeElementUnits(icu::UCharsTrieBuilder *this, int a2, int a3, int32_t a4)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  sub_18081E728( (icu::UCharsTrieBuilder *)((char *)this + 16),  (int *)(*((void *)this + 10) + 8LL * a2),  (icu::UnicodeString *)v11);
  if ((v12 & 0x11) != 0)
  {
    uint64_t v7 = 0LL;
  }

  else if ((v12 & 2) != 0)
  {
    uint64_t v7 = v13;
  }

  else
  {
    uint64_t v7 = *(_BYTE **)&v13[14];
  }

  uint64_t v8 = icu::UCharsTrieBuilder::write((uint64_t)this, (const UChar *)&v7[2 * a3], a4);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v11);
  return v8;
}

uint64_t icu::UCharsTrieBuilder::writeValueAndFinal(icu::UCharsTrieBuilder *this, unsigned int a2, int a3)
{
  if (!(a2 >> 14)) {
    return (*(uint64_t (**)(icu::UCharsTrieBuilder *, void))(*(void *)this + 120LL))( this,  a2 | (a3 << 15));
  }
  __int16 v7 = 0;
  if (a2 < 0x3FFF0000)
  {
    __int16 v5 = HIWORD(a2) + 0x4000;
    int32_t v4 = 2;
  }

  else
  {
    __int16 v7 = a2;
    int32_t v4 = 3;
    __int16 v5 = 0x7FFF;
    a2 >>= 16;
  }

  v6[1] = a2;
  v6[0] = v5 | ((_WORD)a3 << 15);
  return icu::UCharsTrieBuilder::write((uint64_t)this, v6, v4);
}

uint64_t icu::UCharsTrieBuilder::writeValueAndType( icu::UCharsTrieBuilder *this, int a2, unsigned int a3, uint64_t a4)
{
  if (!a2) {
    return (*(uint64_t (**)(icu::UCharsTrieBuilder *, uint64_t))(*(void *)this + 120LL))(this, a4);
  }
  int v9 = 0;
  if (a3 < 0xFE0000)
  {
    if (a3 > 0xFF)
    {
      int v6 = ((a3 >> 10) & 0x7FC0) + 16448;
      LOWORD(v9) = a3;
      int32_t v5 = 2;
    }

    else
    {
      LOWORD(v6) = ((_WORD)a3 << 6) + 64;
      int32_t v5 = 1;
    }
  }

  else
  {
    HIDWORD(v4) = a3;
    LODWORD(v4) = a3;
    int v9 = v4 >> 16;
    int32_t v5 = 3;
    LOWORD(v6) = 32704;
  }

  UChar v8 = v6 | a4;
  return icu::UCharsTrieBuilder::write((uint64_t)this, &v8, v5);
}

uint64_t icu::UCharsTrieBuilder::writeDeltaTo(icu::UCharsTrieBuilder *this, int a2)
{
  int v2 = *((_DWORD *)this + 27) - a2;
  if (v2 <= 64511) {
    return (*(uint64_t (**)(icu::UCharsTrieBuilder *))(*(void *)this + 120LL))(this);
  }
  int v7 = 0;
  if (HIWORD(v2) > 0x3FEu)
  {
    LOWORD(v7) = HIWORD(v2);
    unsigned int v5 = 2;
    UChar v4 = -1;
  }

  else
  {
    UChar v4 = HIWORD(v2) - 1024;
    unsigned int v5 = 1;
  }

  UChar v6 = v4;
  *(&v6 + v5) = v2;
  return icu::UCharsTrieBuilder::write((uint64_t)this, &v6, v5 + 1);
}

uint64_t sub_18081F600()
{
  return 1LL;
}

uint64_t sub_18081F608()
{
  return 5LL;
}

uint64_t sub_18081F610()
{
  return 48LL;
}

uint64_t sub_18081F618()
{
  return 16LL;
}

void sub_18081F624(icu::UObject *a1)
{
}

uint64_t icu::UCharsTrie::Iterator::Iterator(uint64_t a1, uint64_t *a2, int a3, UErrorCode *a4)
{
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = -1LL;
  *(_BYTE *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = off_18971B688;
  *(_WORD *)(a1 + 48) = 2;
  *(_DWORD *)(a1 + 104) = a3;
  *(_DWORD *)(a1 + 108) = 0;
  *(void *)(a1 + 112) = 0LL;
  UChar v6 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v6 <= 0)
  {
    UChar v8 = (icu::UVector32 *)icu::UMemory::operator new(v6, (icu::UMemory *)0x20, (unint64_t)a2);
    if (v8)
    {
      *(void *)(a1 + 112) = icu::UVector32::UVector32(v8, a4);
    }

    else
    {
      *(void *)(a1 + 112) = 0LL;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  return a1;
}

icu::UCharsTrie::Iterator *icu::UCharsTrie::Iterator::Iterator( icu::UCharsTrie::Iterator *this, const icu::UCharsTrie *a2, int a3, UErrorCode *a4)
{
  uint64_t v5 = *((void *)a2 + 2);
  *(void *)this = *((void *)a2 + 1);
  *((void *)this + icu::UVector32::~UVector32(this + 1) = v5;
  *((void *)this + 2) = v5;
  int v6 = *((_DWORD *)a2 + 6);
  *((_DWORD *)this + 6) = v6;
  *((_DWORD *)this + 7) = v6;
  *((_BYTE *)this + 32) = 0;
  *((void *)this + 5) = off_18971B688;
  int v7 = (char *)this + 40;
  *((_WORD *)this + 24) = 2;
  *((_DWORD *)this + 26) = a3;
  *((_DWORD *)this + 27) = 0;
  *((void *)this + 14) = 0LL;
  UChar v8 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v8 <= 0)
  {
    uint64_t v11 = (icu::UVector32 *)icu::UMemory::operator new(v8, (icu::UMemory *)0x20, (unint64_t)a2);
    if (v11)
    {
      *((void *)this + 14) = icu::UVector32::UVector32(v11, a4);
      if (*(int *)a4 < 1)
      {
        int v12 = *((_DWORD *)this + 6);
        if ((v12 & 0x80000000) == 0)
        {
          int v13 = *((_DWORD *)this + 26);
          if (v12 < v13 || v13 < 1) {
            uint64_t v15 = (v12 + 1);
          }
          else {
            uint64_t v15 = v13;
          }
          icu::UnicodeString::doAppend((uint64_t)v7, *((void *)this + 1), 0, v15);
          *((void *)this + 1) += 2LL * (int)v15;
          *((_DWORD *)this + 6) -= v15;
        }
      }
    }

    else
    {
      *((void *)this + 14) = 0LL;
    }
  }

  return this;
}

void icu::UCharsTrie::Iterator::~Iterator(icu::UCharsTrie::Iterator *this)
{
  uint64_t v2 = *((void *)this + 14);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::UnicodeString::~UnicodeString((icu::UCharsTrie::Iterator *)((char *)this + 40));
}

{
  uint64_t v2;
  uint64_t v2 = *((void *)this + 14);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::UnicodeString::~UnicodeString((icu::UCharsTrie::Iterator *)((char *)this + 40));
}

icu::UCharsTrie::Iterator *icu::UCharsTrie::Iterator::reset(icu::UCharsTrie::Iterator *this)
{
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + icu::UVector32::~UVector32(this + 1) = v2;
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 6) = v3;
  *((_BYTE *)this + 32) = 0;
  int v4 = *((_DWORD *)this + 26);
  if (v3 < v4 || v4 < 1) {
    int v6 = v3 + 1;
  }
  else {
    int v6 = *((_DWORD *)this + 26);
  }
  unsigned int v7 = *((unsigned __int16 *)this + 24);
  if ((v7 & 1) == 0 || v6)
  {
    if ((v7 & 0x8000) != 0) {
      unsigned int v8 = *((_DWORD *)this + 13);
    }
    else {
      unsigned int v8 = v7 >> 5;
    }
    if (v8 > v6)
    {
      if (v6 > 1023)
      {
        *((_WORD *)this + 24) = v7 | 0xFFE0;
        *((_DWORD *)this + 13) = v6;
      }

      else
      {
        *((_WORD *)this + 24) = *((_WORD *)this + 24) & 0x1F | (32 * v6);
      }
    }
  }

  else
  {
    icu::UnicodeString::unBogus((uint64_t)this + 40);
    uint64_t v2 = *((void *)this + 1);
    int v3 = *((_DWORD *)this + 6);
  }

  *((void *)this + icu::UVector32::~UVector32(this + 1) = v2 + 2LL * v6;
  *((_DWORD *)this + 6) = v3 - v6;
  icu::UVector32::setSize(*((icu::UVector32 **)this + 14), 0);
  return this;
}

BOOL icu::UCharsTrie::Iterator::hasNext(icu::UCharsTrie::Iterator *this)
{
  return *((void *)this + 1) || *(_DWORD *)(*((void *)this + 14) + 8LL) != 0;
}

uint64_t icu::UCharsTrie::Iterator::next(icu::UCharsTrie::Iterator *this, UErrorCode *a2)
{
  uint64_t v5 = (unsigned __int16 *)*((void *)this + 1);
  if (!v5)
  {
    uint64_t v6 = *((void *)this + 14);
    int v7 = *(_DWORD *)(v6 + 8);
    if (!v7) {
      return 0LL;
    }
    if (v7 <= 0)
    {
      unsigned int v10 = 0;
      int v11 = 0;
      uint64_t v9 = *(void *)this;
      int v12 = v7 - 2;
    }

    else
    {
      uint64_t v8 = *(void *)(v6 + 24);
      uint64_t v9 = *(void *)this;
      unsigned int v10 = *(_DWORD *)(v8 + 4LL * (v7 - 1));
      if (v7 == 1)
      {
        int v11 = 0;
        int v12 = -1;
      }

      else
      {
        int v12 = v7 - 2;
        int v11 = *(_DWORD *)(v8 + 4LL * (v7 - 2));
      }
    }

    icu::UVector32::setSize((icu::UVector32 *)v6, v12);
    unsigned int v23 = *((unsigned __int16 *)this + 24);
    if ((_WORD)v10 || (v23 & 1) == 0)
    {
      if ((v23 & 0x8000) != 0) {
        unsigned int v24 = *((_DWORD *)this + 13);
      }
      else {
        unsigned int v24 = v23 >> 5;
      }
      if (v24 > (unsigned __int16)v10)
      {
        if ((unsigned __int16)v10 > 0x3FFu)
        {
          *((_WORD *)this + 24) = v23 | 0xFFE0;
          *((_DWORD *)this + 13) = (unsigned __int16)v10;
        }

        else
        {
          *((_WORD *)this + 24) = *((_WORD *)this + 24) & 0x1F | (32 * v10);
        }
      }
    }

    else
    {
      icu::UnicodeString::unBogus((uint64_t)this + 40);
    }

    unsigned int v28 = (__int16 *)(v9 + 2LL * v11);
    if (v10 < 0x20000)
    {
      __int16 v29 = *v28;
      uint64_t v5 = (unsigned __int16 *)(v28 + 1);
      __int16 v32 = v29;
      icu::UnicodeString::doAppend((uint64_t)this + 40, (uint64_t)&v32, 0, 1LL);
    }

    else
    {
      uint64_t v5 = icu::UCharsTrie::Iterator::branchNext((uint64_t *)this, v28, HIWORD(v10), a2);
      if (!v5) {
        return 1LL;
      }
    }
  }

  if ((*((_DWORD *)this + 6) & 0x80000000) == 0)
  {
LABEL_5:
    *((void *)this + icu::UVector32::~UVector32(this + 1) = 0LL;
    *((_DWORD *)this + 27) = -1;
    return 1LL;
  }

  while (1)
  {
    uint64_t v14 = (__int16 *)(v5 + 1);
    unsigned int v13 = *v5;
    if (v13 >= 0x40) {
      break;
    }
LABEL_18:
    int v16 = *((_DWORD *)this + 26);
    if (v16 < 1)
    {
      if (v13 < 0x30) {
        goto LABEL_26;
      }
      uint64_t v19 = v13 - 47;
LABEL_34:
      icu::UnicodeString::doAppend((uint64_t)this + 40, (uint64_t)v14, 0, v19);
      uint64_t v5 = (unsigned __int16 *)&v14[v19];
    }

    else
    {
      unsigned int v17 = *((unsigned __int16 *)this + 24);
      else {
        unsigned int v18 = v17 >> 5;
      }
      if (v18 == v16) {
        goto LABEL_5;
      }
      if (v13 >= 0x30)
      {
        uint64_t v19 = v13 - 47;
        if ((v17 & 0x8000) != 0)
        {
          unsigned int v27 = *((_DWORD *)this + 13);
        }

        else if (v19 + (v17 >> 5) > v16)
        {
          unsigned int v27 = v17 >> 5;
LABEL_52:
          icu::UnicodeString::doAppend((uint64_t)this + 40, (uint64_t)v14, 0, v16 - v27);
          goto LABEL_5;
        }

        goto LABEL_34;
      }

unsigned __int16 *icu::UCharsTrie::Iterator::branchNext(uint64_t *a1, __int16 *a2, int a3, UErrorCode *a4)
{
  unsigned int v5 = a3;
  if (a3 >= 6)
  {
    while (1)
    {
      uint64_t v8 = a2 + 2;
      unsigned int v9 = (unsigned __int16)a2[1];
      unsigned int v10 = a2 + 2;
      if (v9 >> 10 >= 0x3F)
      {
        if (v9 == 0xFFFF) {
          unsigned int v10 = a2 + 4;
        }
        else {
          unsigned int v10 = a2 + 3;
        }
      }

      uint64_t v11 = a1[14];
      uint64_t v12 = *a1;
      int v13 = *(_DWORD *)(v11 + 8);
      if (v13 < -1 || *(_DWORD *)(v11 + 12) <= v13)
      {
        int v13 = *(_DWORD *)(v11 + 8);
      }

      *(_DWORD *)(*(void *)(v11 + 24) + 4LL * v13) = ((unint64_t)v10 - v12) >> 1;
      ++*(_DWORD *)(v11 + 8);
LABEL_11:
      uint64_t v14 = a1[14];
      else {
        int v15 = *((unsigned __int16 *)a1 + 24) >> 5;
      }
      int v16 = *(_DWORD *)(v14 + 8);
      if (v16 >= -1 && *(_DWORD *)(v14 + 12) > v16) {
        goto LABEL_18;
      }
      if (icu::UVector32::expandCapacity((icu::UVector32 *)a1[14], v16 + 1, a4))
      {
        int v16 = *(_DWORD *)(v14 + 8);
LABEL_18:
        *(_DWORD *)(*(void *)(v14 + 24) + 4LL * v16) = v15 | ((v5 - (v5 >> 1)) << 16);
        ++*(_DWORD *)(v14 + 8);
      }

      int v17 = (unsigned __int16)a2[1];
      if (v17 >> 10 >= 0x3F)
      {
        if (v17 == 0xFFFF)
        {
          int v17 = (unsigned __int16)a2[3] | ((unsigned __int16)a2[2] << 16);
          uint64_t v8 = a2 + 4;
        }

        else
        {
          uint64_t v8 = a2 + 3;
          int v17 = ((unsigned __int16)a2[2] | (v17 << 16)) + 0x4000000;
        }
      }

      unsigned int v18 = v5 >> 1;
      a2 = &v8[v17];
      BOOL v19 = v5 > 0xB;
      v5 >>= 1;
      if (!v19) {
        goto LABEL_26;
      }
    }
  }

  unsigned int v18 = a3;
LABEL_26:
  unsigned int v20 = (unsigned __int16 *)(a2 + 2);
  __int16 v21 = a2[1];
  int v22 = v21 & 0x7FFF;
  if (v22 >= 0x4000)
  {
    if (v22 == 0x7FFF)
    {
      int v23 = (unsigned __int16)a2[2] << 16;
      unsigned int v20 = (unsigned __int16 *)(a2 + 3);
      uint64_t v24 = 4LL;
    }

    else
    {
      int v23 = (v22 << 16) - 0x40000000;
      uint64_t v24 = 3LL;
    }

    int v22 = v23 | *v20;
    unsigned int v20 = (unsigned __int16 *)&a2[v24];
  }

  __int16 v25 = *a2;
  uint64_t v26 = a1[14];
  uint64_t v27 = *a1;
  int v28 = *(_DWORD *)(v26 + 8);
  if (v28 < -1 || *(_DWORD *)(v26 + 12) <= v28)
  {
    int v28 = *(_DWORD *)(v26 + 8);
  }

  *(_DWORD *)(*(void *)(v26 + 24) + 4LL * v28) = ((unint64_t)v20 - v27) >> 1;
  ++*(_DWORD *)(v26 + 8);
LABEL_36:
  uint64_t v29 = a1[14];
  else {
    int v30 = *((unsigned __int16 *)a1 + 24) >> 5;
  }
  int v31 = *(_DWORD *)(v29 + 8);
  if (v31 < -1 || *(_DWORD *)(v29 + 12) <= v31)
  {
    int v31 = *(_DWORD *)(v29 + 8);
  }

  *(_DWORD *)(*(void *)(v29 + 24) + 4LL * v3icu::UVector32::~UVector32(this + 1) = v30 | ((v18 << 16) - 0x10000);
  ++*(_DWORD *)(v29 + 8);
LABEL_44:
  __int16 v33 = v25;
  icu::UnicodeString::doAppend((uint64_t)(a1 + 5), (uint64_t)&v33, 0, 1LL);
  if ((v21 & 0x8000) == 0) {
    return &v20[v22];
  }
  uint64_t result = 0LL;
  a1[1] = 0LL;
  *((_DWORD *)a1 + 27) = v22;
  return result;
}

void *icu::UCharCharacterIterator::getStaticClassID(icu::UCharCharacterIterator *this)
{
  return &unk_18C534E91;
}

void *icu::UCharCharacterIterator::getDynamicClassID(icu::UCharCharacterIterator *this)
{
  return &unk_18C534E91;
}

void *icu::UCharCharacterIterator::UCharCharacterIterator(icu::UCharCharacterIterator *this)
{
  uint64_t result = icu::CharacterIterator::CharacterIterator(this);
  void *result = off_189711800;
  result[3] = 0LL;
  return result;
}

{
  void *result;
  uint64_t result = icu::CharacterIterator::CharacterIterator(this);
  void *result = off_189711800;
  result[3] = 0LL;
  return result;
}

uint64_t icu::UCharCharacterIterator::UCharCharacterIterator( icu::CharacterIterator *this, const UChar **a2, int32_t a3)
{
  if (*a2)
  {
    if (a3 < 0) {
      a3 = u_strlen(*a2);
    }
  }

  else
  {
    a3 = 0;
  }

  uint64_t result = icu::CharacterIterator::CharacterIterator((uint64_t)this, a3);
  *(void *)this = off_189711800;
  *((void *)this + 3) = *a2;
  return result;
}

uint64_t icu::UCharCharacterIterator::UCharCharacterIterator( icu::CharacterIterator *this, const UChar **a2, int32_t a3, unsigned int a4)
{
  if (*a2)
  {
    if (a3 < 0) {
      a3 = u_strlen(*a2);
    }
  }

  else
  {
    a3 = 0;
  }

  uint64_t result = icu::CharacterIterator::CharacterIterator((uint64_t)this, a3, a4);
  *(void *)this = off_189711800;
  *((void *)this + 3) = *a2;
  return result;
}

uint64_t icu::UCharCharacterIterator::UCharCharacterIterator( icu::CharacterIterator *this, const UChar **a2, int32_t a3, unsigned int a4, signed int a5, int a6)
{
  if (*a2)
  {
    if (a3 < 0) {
      a3 = u_strlen(*a2);
    }
  }

  else
  {
    a3 = 0;
  }

  uint64_t result = icu::CharacterIterator::CharacterIterator((uint64_t)this, a3, a4, a5, a6);
  *(void *)this = off_189711800;
  *((void *)this + 3) = *a2;
  return result;
}

void icu::UCharCharacterIterator::UCharCharacterIterator( icu::UCharCharacterIterator *this, const icu::UCharCharacterIterator *a2)
{
  *int v3 = off_189711800;
  v3[3] = *((void *)a2 + 3);
}

{
  void *v3;
  icu::CharacterIterator::CharacterIterator(this, a2);
  *int v3 = off_189711800;
  v3[3] = *((void *)a2 + 3);
}

uint64_t icu::UCharCharacterIterator::operator=(uint64_t a1, uint64_t a2)
{
  icu::CharacterIterator::operator=(a1, a2);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

void icu::UCharCharacterIterator::~UCharCharacterIterator(icu::UCharCharacterIterator *this)
{
}

BOOL icu::UCharCharacterIterator::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  BOOL result = sub_1807F874C(*(void *)(*(void *)a1 - 8LL), *(void *)(*(void *)a2 - 8LL));
  if (result) {
    return *(void *)(a1 + 24) == *(void *)(a2 + 24)
  }
        && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
        && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
        && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
        && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  return result;
}

uint64_t icu::UCharCharacterIterator::hashCode(icu::UCharCharacterIterator *this)
{
  return *((_DWORD *)this + 3) ^ *((_DWORD *)this + 4) ^ ustr_hashUCharsN( *((unsigned __int16 **)this + 3),  *((_DWORD *)this + 2)) ^ *((_DWORD *)this + 5);
}

void icu::UCharCharacterIterator::clone( icu::UCharCharacterIterator *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = (icu::CharacterIterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x20, a2);
  if (v4)
  {
    icu::CharacterIterator::CharacterIterator(v4, this);
    *unsigned int v5 = off_189711800;
    v5[3] = *((void *)this + 3);
  }

uint64_t icu::UCharCharacterIterator::first(icu::UCharCharacterIterator *this)
{
  int v1 = *((_DWORD *)this + 5);
  uint64_t v2 = *((int *)this + 4);
  *((_DWORD *)this + 3) = v2;
  else {
    return *(unsigned __int16 *)(*((void *)this + 3) + 2 * v2);
  }
}

uint64_t icu::UCharCharacterIterator::firstPostInc(icu::UCharCharacterIterator *this)
{
  int v1 = *((_DWORD *)this + 5);
  uint64_t v2 = *((int *)this + 4);
  *((_DWORD *)this + 3) = v2;
  uint64_t v3 = *((void *)this + 3);
  *((_DWORD *)this + 3) = v2 + 1;
  return *(unsigned __int16 *)(v3 + 2 * v2);
}

uint64_t icu::UCharCharacterIterator::last(icu::UCharCharacterIterator *this)
{
  int v2 = *((_DWORD *)this + 4);
  int v1 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 3) = v1;
  if (v1 <= v2) {
    return 0xFFFFLL;
  }
  uint64_t v3 = *((void *)this + 3);
  int v4 = v1 - 1;
  *((_DWORD *)this + 3) = v4;
  return *(unsigned __int16 *)(v3 + 2LL * v4);
}

uint64_t icu::UCharCharacterIterator::setIndex(icu::UCharCharacterIterator *this, int a2)
{
  int v2 = *((_DWORD *)this + 4);
  if (v2 <= a2)
  {
    int v3 = *((_DWORD *)this + 5);
    if (v3 < a2)
    {
      *((_DWORD *)this + 3) = v3;
      return 0xFFFFLL;
    }

    *((_DWORD *)this + 3) = a2;
  }

  else
  {
    *((_DWORD *)this + 3) = v2;
    int v3 = *((_DWORD *)this + 5);
    a2 = v2;
  }

  if (a2 < v3) {
    return *(unsigned __int16 *)(*((void *)this + 3) + 2LL * a2);
  }
  return 0xFFFFLL;
}

uint64_t icu::UCharCharacterIterator::current(icu::UCharCharacterIterator *this)
{
  uint64_t v1 = *((int *)this + 3);
  else {
    return *(unsigned __int16 *)(*((void *)this + 3) + 2 * v1);
  }
}

uint64_t icu::UCharCharacterIterator::next(icu::UCharCharacterIterator *this)
{
  uint64_t v1 = *((int *)this + 3);
  uint64_t v2 = v1 + 1;
  if ((int)v1 + 1 >= *((_DWORD *)this + 5))
  {
    uint64_t v3 = 0xFFFFLL;
    LODWORD(v2) = *((_DWORD *)this + 5);
  }

  else
  {
    uint64_t v3 = *(unsigned __int16 *)(*((void *)this + 3) + 2 * v2);
  }

  *((_DWORD *)this + 3) = v2;
  return v3;
}

uint64_t icu::UCharCharacterIterator::nextPostInc(icu::UCharCharacterIterator *this)
{
  uint64_t v1 = *((int *)this + 3);
  uint64_t v2 = *((void *)this + 3);
  *((_DWORD *)this + 3) = v1 + 1;
  return *(unsigned __int16 *)(v2 + 2 * v1);
}

BOOL icu::UCharCharacterIterator::hasNext(icu::UCharCharacterIterator *this)
{
  return *((_DWORD *)this + 3) < *((_DWORD *)this + 5);
}

uint64_t icu::UCharCharacterIterator::previous(icu::UCharCharacterIterator *this)
{
  int v1 = *((_DWORD *)this + 3);
  if (v1 <= *((_DWORD *)this + 4)) {
    return 0xFFFFLL;
  }
  uint64_t v2 = *((void *)this + 3);
  int v3 = v1 - 1;
  *((_DWORD *)this + 3) = v3;
  return *(unsigned __int16 *)(v2 + 2LL * v3);
}

BOOL icu::UCharCharacterIterator::hasPrevious(icu::UCharCharacterIterator *this)
{
  return *((_DWORD *)this + 3) > *((_DWORD *)this + 4);
}

uint64_t icu::UCharCharacterIterator::first32(icu::UCharCharacterIterator *this)
{
  int v1 = *((_DWORD *)this + 5);
  uint64_t v2 = *((int *)this + 4);
  *((_DWORD *)this + 3) = v2;
  uint64_t v3 = *((void *)this + 3);
  int v4 = v2 + 1;
  uint64_t result = *(unsigned __int16 *)(v3 + 2 * v2);
  if ((result & 0xFC00) == 0xD800 && v4 != v1)
  {
    int v7 = *(unsigned __int16 *)(v3 + 2LL * v4);
    if ((v7 & 0xFC00) == 0xDC00) {
      return (v7 + ((_DWORD)result << 10) - 56613888);
    }
  }

  return result;
}

uint64_t icu::UCharCharacterIterator::first32PostInc(icu::UCharCharacterIterator *this)
{
  int v1 = *((_DWORD *)this + 5);
  uint64_t v2 = *((int *)this + 4);
  *((_DWORD *)this + 3) = v2;
  uint64_t v3 = *((void *)this + 3);
  int v4 = v2 + 1;
  *((_DWORD *)this + 3) = v2 + 1;
  uint64_t v5 = *(unsigned __int16 *)(v3 + 2 * v2);
  if ((v5 & 0xFC00) == 0xD800 && v4 != v1)
  {
    int v7 = *(unsigned __int16 *)(v3 + 2LL * v4);
    if ((v7 & 0xFC00) == 0xDC00)
    {
      *((_DWORD *)this + 3) = v2 + 2;
      return (v7 + ((_DWORD)v5 << 10) - 56613888);
    }
  }

  return v5;
}

uint64_t icu::UCharCharacterIterator::last32(icu::UCharCharacterIterator *this)
{
  int v2 = *((_DWORD *)this + 4);
  int v1 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 3) = v1;
  if (v1 <= v2) {
    return 0xFFFFLL;
  }
  uint64_t v4 = *((void *)this + 3);
  *((_DWORD *)this + 3) = v1 - 1;
  uint64_t result = *(unsigned __int16 *)(v4 + 2LL * (v1 - 1));
  if (v1 - 1 > v2 && (result & 0xFC00) == 56320)
  {
    int v7 = v1 - 2;
    int v8 = *(unsigned __int16 *)(v4 + 2LL * v7);
    if ((v8 & 0xFC00) == 0xD800)
    {
      *((_DWORD *)this + 3) = v7;
      return (result + (v8 << 10) - 56613888);
    }
  }

  return result;
}

uint64_t icu::UCharCharacterIterator::setIndex32(icu::UCharCharacterIterator *this, int a2)
{
  int v4 = *((_DWORD *)this + 4);
  int v3 = *((_DWORD *)this + 5);
  if (v3 >= a2) {
    int v5 = a2;
  }
  else {
    int v5 = *((_DWORD *)this + 5);
  }
  if (v4 <= a2) {
    int v6 = v5;
  }
  else {
    int v6 = *((_DWORD *)this + 4);
  }
  if (v6 >= v3)
  {
    *((_DWORD *)this + 3) = v6;
    return 0xFFFFLL;
  }

  else
  {
    uint64_t v7 = *((void *)this + 3);
    uint64_t result = *(unsigned __int16 *)(v7 + 2LL * v6);
    if (v6 > v4 && (result & 0xFC00) == 56320)
    {
      if ((*(_WORD *)(v7 + 2 * (v6 - 1LL)) & 0xFC00) == 0xD800) {
        --v6;
      }
      uint64_t result = *(unsigned __int16 *)(v7 + 2LL * v6);
    }

    *((_DWORD *)this + 3) = v6;
    int v10 = v6 + 1;
    if ((result & 0xFC00) == 0xD800 && v10 != v3)
    {
      int v12 = *(unsigned __int16 *)(v7 + 2LL * v10);
      if ((v12 & 0xFC00) == 0xDC00) {
        return (v12 + ((_DWORD)result << 10) - 56613888);
      }
    }
  }

  return result;
}

uint64_t icu::UCharCharacterIterator::current32(icu::UCharCharacterIterator *this)
{
  int v1 = *((_DWORD *)this + 4);
  uint64_t v2 = *((int *)this + 3);
  int v3 = *((_DWORD *)this + 5);
  uint64_t v4 = *((void *)this + 3);
  uint64_t result = *(unsigned __int16 *)(v4 + 2 * v2);
  if ((result & 0xF800) != 0xD800) {
    return result;
  }
  if ((result & 0x400) != 0)
  {
    if ((int)v2 > v1)
    {
      int v9 = *(unsigned __int16 *)(v4 + 2LL * ((int)v2 - 1));
      if ((v9 & 0xFC00) == 0xD800)
      {
        int v8 = result + (v9 << 10);
        return (v8 - 56613888);
      }
    }
  }

  else
  {
    int v6 = v2 + 1;
    if (v6 != v3)
    {
      int v7 = *(unsigned __int16 *)(v4 + 2LL * v6);
      if ((v7 & 0xFC00) == 0xDC00)
      {
        int v8 = v7 + ((_DWORD)result << 10);
        return (v8 - 56613888);
      }
    }
  }

  return result;
}

uint64_t icu::UCharCharacterIterator::next32(icu::UCharCharacterIterator *this)
{
  uint64_t v1 = *((int *)this + 3);
  int v2 = *((_DWORD *)this + 5);
  uint64_t v3 = *((void *)this + 3);
  int v4 = v1 + 1;
  *((_DWORD *)this + 3) = v1 + 1;
  BOOL v5 = (*(_WORD *)(v3 + 2 * v1) & 0xFC00) != 0xD800 || v4 == v2;
  if (!v5 && (*(_WORD *)(v3 + 2LL * v4) & 0xFC00) == 0xDC00)
  {
    int v4 = v1 + 2;
    *((_DWORD *)this + 3) = v1 + 2;
  }

  if (v4 >= v2)
  {
LABEL_15:
    *((_DWORD *)this + 3) = v2;
    return 0xFFFFLL;
  }

  else
  {
    uint64_t v6 = v4 + 1LL;
    uint64_t result = *(unsigned __int16 *)(v3 + 2LL * v4);
    if ((result & 0xFC00) == 0xD800 && (_DWORD)v6 != v2)
    {
      int v9 = *(unsigned __int16 *)(v3 + 2 * v6);
      if ((v9 & 0xFC00) == 0xDC00) {
        return (v9 + ((_DWORD)result << 10) - 56613888);
      }
    }
  }

  return result;
}

uint64_t icu::UCharCharacterIterator::next32PostInc(icu::UCharCharacterIterator *this)
{
  uint64_t v1 = *((int *)this + 3);
  int v2 = *((_DWORD *)this + 5);
  uint64_t v4 = *((void *)this + 3);
  int v5 = v1 + 1;
  *((_DWORD *)this + 3) = v1 + 1;
  uint64_t result = *(unsigned __int16 *)(v4 + 2 * v1);
  if ((result & 0xFC00) == 0xD800 && v5 != v2)
  {
    int v8 = *(unsigned __int16 *)(v4 + 2LL * v5);
    if ((v8 & 0xFC00) == 0xDC00)
    {
      *((_DWORD *)this + 3) = v1 + 2;
      return (v8 + ((_DWORD)result << 10) - 56613888);
    }
  }

  return result;
}

uint64_t icu::UCharCharacterIterator::previous32(icu::UCharCharacterIterator *this)
{
  int v1 = *((_DWORD *)this + 3);
  int v2 = *((_DWORD *)this + 4);
  if (v1 <= v2) {
    return 0xFFFFLL;
  }
  uint64_t v4 = *((void *)this + 3);
  *((_DWORD *)this + 3) = v1 - 1;
  uint64_t result = *(unsigned __int16 *)(v4 + 2LL * (v1 - 1));
  if (v1 - 1 > v2 && (result & 0xFC00) == 56320)
  {
    int v7 = v1 - 2;
    int v8 = *(unsigned __int16 *)(v4 + 2LL * v7);
    if ((v8 & 0xFC00) == 0xD800)
    {
      *((_DWORD *)this + 3) = v7;
      return (result + (v8 << 10) - 56613888);
    }
  }

  return result;
}

uint64_t icu::UCharCharacterIterator::move(_DWORD *a1, int a2, int a3)
{
  if (a3)
  {
    if (a3 == 1)
    {
      int v3 = a1[3];
    }

    else
    {
      if (a3 != 2)
      {
        uint64_t v4 = a1[3];
        goto LABEL_9;
      }

      int v3 = a1[5];
    }
  }

  else
  {
    int v3 = a1[4];
  }

  uint64_t v4 = (v3 + a2);
  a1[3] = v4;
LABEL_9:
  uint64_t v5 = a1[4];
  if ((int)v4 < (int)v5 || (uint64_t v5 = a1[5], (int)v4 > (int)v5))
  {
    a1[3] = v5;
    return v5;
  }

  return v4;
}

uint64_t icu::UCharCharacterIterator::move32(uint64_t a1, int a2, int a3)
{
  switch(a3)
  {
    case 2:
      LODWORD(v10) = *(_DWORD *)(a1 + 20);
      *(_DWORD *)(a1 + 12) = v10;
      if (a2 < 0)
      {
        int v11 = *(_DWORD *)(a1 + 16);
        int v12 = 1 - a2;
        do
        {
          uint64_t v13 = *(void *)(a1 + 24);
          uint64_t v14 = (int)v10;
          uint64_t v10 = (int)v10 - 1LL;
          *(_DWORD *)(a1 + 12) = v10;
          if ((int)v10 > v11 && (*(_WORD *)(v13 + 2 * v10) & 0xFC00) == 0xDC00)
          {
            uint64_t v15 = v14 - 2;
            if ((*(_WORD *)(v13 + 2 * v15) & 0xFC00) == 0xD800)
            {
              *(_DWORD *)(a1 + 12) = v15;
              LODWORD(v10) = v15;
            }
          }

          --v12;
        }

        while (v12 > 1);
      }

      break;
    case 1:
      if (a2 < 1)
      {
        if (a2 < 0)
        {
          LODWORD(v24) = *(_DWORD *)(a1 + 12);
          int v23 = *(_DWORD *)(a1 + 16);
          int v25 = 1 - a2;
          do
          {
            uint64_t v26 = *(void *)(a1 + 24);
            uint64_t v27 = (int)v24;
            uint64_t v24 = (int)v24 - 1LL;
            *(_DWORD *)(a1 + 12) = v24;
            if ((int)v24 > v23 && (*(_WORD *)(v26 + 2 * v24) & 0xFC00) == 0xDC00)
            {
              uint64_t v28 = v27 - 2;
              if ((*(_WORD *)(v26 + 2 * v28) & 0xFC00) == 0xD800)
              {
                *(_DWORD *)(a1 + 12) = v28;
                LODWORD(v24) = v28;
              }
            }

            --v25;
          }

          while (v25 > 1);
        }
      }

      else
      {
        int v16 = *(_DWORD *)(a1 + 20);
        int v17 = *(_DWORD *)(a1 + 12);
        int v18 = a2 + 1;
        do
        {
          if (v17 >= v16)
          {
            if ((v16 & 0x80000000) == 0) {
              return *(unsigned int *)(a1 + 12);
            }
            uint64_t v19 = *(void *)(a1 + 24);
            __int16 v20 = *(_WORD *)(v19 + 2LL * v17);
            if (!v20) {
              return *(unsigned int *)(a1 + 12);
            }
          }

          else
          {
            uint64_t v19 = *(void *)(a1 + 24);
            __int16 v20 = *(_WORD *)(v19 + 2LL * v17);
          }

          uint64_t v21 = v17 + 1LL;
          *(_DWORD *)(a1 + 12) = v21;
          BOOL v22 = (v20 & 0xFC00) != 0xD800 || (_DWORD)v21 == v16;
          if (!v22 && (*(_WORD *)(v19 + 2 * v21) & 0xFC00) == 0xDC00)
          {
            LODWORD(v2icu::UVector32::~UVector32(this + 1) = v17 + 2;
            *(_DWORD *)(a1 + 12) = v17 + 2;
          }

          --v18;
          int v17 = v21;
        }

        while (v18 > 1);
      }

      break;
    case 0:
      int v3 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 12) = v3;
      if (a2 >= 1)
      {
        int v4 = *(_DWORD *)(a1 + 20);
        int v5 = a2 + 1;
        do
        {
          if (v3 >= v4)
          {
            if ((v4 & 0x80000000) == 0) {
              return *(unsigned int *)(a1 + 12);
            }
            uint64_t v6 = *(void *)(a1 + 24);
            __int16 v7 = *(_WORD *)(v6 + 2LL * v3);
            if (!v7) {
              return *(unsigned int *)(a1 + 12);
            }
          }

          else
          {
            uint64_t v6 = *(void *)(a1 + 24);
            __int16 v7 = *(_WORD *)(v6 + 2LL * v3);
          }

          uint64_t v8 = v3 + 1LL;
          *(_DWORD *)(a1 + 12) = v8;
          BOOL v9 = (v7 & 0xFC00) != 0xD800 || (_DWORD)v8 == v4;
          if (!v9 && (*(_WORD *)(v6 + 2 * v8) & 0xFC00) == 0xDC00)
          {
            LODWORD(v8) = v3 + 2;
            *(_DWORD *)(a1 + 12) = v3 + 2;
          }

          --v5;
          int v3 = v8;
        }

        while (v5 > 1);
      }

      break;
  }

  return *(unsigned int *)(a1 + 12);
}

uint64_t icu::UCharCharacterIterator::setText(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3 = *a2;
  *(void *)(result + 24) = *a2;
  if (v3) {
    BOOL v4 = a3 < 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    int v5 = 0;
  }
  else {
    int v5 = a3;
  }
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = v5;
  *(_DWORD *)(result + 8) = v5;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void *icu::UCharCharacterIterator::getText(icu::UCharCharacterIterator *this, icu::UnicodeString *a2)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  icu::UnicodeString::UnicodeString((uint64_t)v5, *((void *)this + 3), *((unsigned int *)this + 2));
  icu::UnicodeString::operator=(a2, (icu::UnicodeString *)v5);
  return icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)v5);
}

uint64_t u_cleanup()
{
  return sub_180888338();
}

uint64_t sub_180820BF4()
{
  for (uint64_t i = 0LL; i != 8; ++i)
  {
    int v1 = (void (*)(void))qword_18C449038[i];
    if (v1)
    {
      v1();
      qword_18C449038[i] = 0LL;
    }
  }

  for (uint64_t j = 0LL; j != 30; ++j)
  {
    uint64_t v3 = (void (*)(void))qword_18C449078[j];
    if (v3)
    {
      v3();
      qword_18C449078[j] = 0LL;
    }
  }

  return 1LL;
}

uint64_t ucln_cleanupOne(uint64_t result)
{
  int v1 = (uint64_t (*)(void))qword_18C449038[(int)result];
  if (v1)
  {
    uint64_t v2 = (int)result;
    uint64_t result = v1();
    qword_18C449038[v2] = 0LL;
  }

  return result;
}

void sub_180820C94(unsigned int a1, uint64_t a2)
{
  if (a1 == 29)
  {
    qword_18C449160 = a2;
  }

  else if (a1 <= 0x1D)
  {
    umtx_lock(0LL);
    qword_18C449078[a1] = a2;
    umtx_unlock(0LL);
  }

uint64_t ucln_registerCleanup(uint64_t result, uint64_t a2)
{
  return result;
}

uint64_t sub_180820D08(_BYTE *a1)
{
  if (a1)
  {
    unsigned int v1 = bswap32(*(unsigned __int16 *)a1) >> 16;
    if (a1[8]) {
      return (unsigned __int16)v1;
    }
    else {
      return *(unsigned __int16 *)a1;
    }
  }

  else
  {
    return 0;
  }

uint64_t sub_180820D34(_BYTE *a1)
{
  if (a1)
  {
    unsigned int v1 = bswap32(*(unsigned __int16 *)a1) >> 16;
    if (a1[4]) {
      return (unsigned __int16)v1;
    }
    else {
      return *(unsigned __int16 *)a1;
    }
  }

  else
  {
    return 0;
  }

void sub_180820D60(_OWORD *a1, int *a2)
{
  if (*a2 <= 0)
  {
    if (!a1) {
      goto LABEL_8;
    }
    uint64_t v2 = (unsigned __int8 *)*((void *)a1 + 1);
    if (!v2 || v2[2] != 218 || v2[3] != 39 || v2[8] || v2[9]) {
      goto LABEL_8;
    }
    int v3 = v2[12];
    if (v3 == 84)
    {
      if (v2[13] == 111 && v2[14] == 67 && v2[15] == 80 && v2[16] == 1)
      {
        BOOL v4 = off_189711900;
        goto LABEL_21;
      }
    }

    else if (v3 == 67 && v2[13] == 109 && v2[14] == 110 && v2[15] == 68 && v2[16] == 1)
    {
      BOOL v4 = off_1897118F0;
LABEL_21:
      *(void *)a1 = v4;
      *((void *)a1 + 2) = &v2[*(unsigned __int16 *)v2];
      return;
    }

char *sub_180820E4C(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v3 = *(int **)(a1 + 16);
  if (!v3) {
    return *(char **)(a1 + 8);
  }
  BOOL v4 = v3 + 1;
  int v5 = *v3;
  if (!*v3) {
    return 0LL;
  }
  uint64_t v6 = (unsigned __int8 *)v3 + v3[1];
  int v7 = -1;
  uint64_t v8 = a2;
  do
  {
    int v10 = *v8++;
    int v9 = v10;
    int v12 = *v6++;
    int v11 = v12;
    ++v7;
    if (v9) {
      BOOL v13 = v9 == v11;
    }
    else {
      BOOL v13 = 0;
    }
  }

  while (v13);
  if (v9 != v11)
  {
    signed int v16 = v5 - 1;
    int v17 = (unsigned __int8 *)v3 + v4[2 * v5 - 2];
    int v18 = -1;
    uint64_t v19 = a2;
    do
    {
      int v21 = *v19++;
      int v20 = v21;
      int v23 = *v17++;
      int v22 = v23;
      ++v18;
      if (v20) {
        BOOL v24 = v20 == v22;
      }
      else {
        BOOL v24 = 0;
      }
    }

    while (v24);
    if (v20 == v22)
    {
      unsigned int v14 = v5 - 1;
LABEL_18:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 3)
    {
      int v26 = 1;
      do
      {
        int v27 = v26 + v16;
        if (v26 + v16 < 0 != __OFADD__(v26, v16)) {
          ++v27;
        }
        unsigned int v14 = v27 >> 1;
        if (v7 >= v18) {
          int v28 = v18;
        }
        else {
          int v28 = v7;
        }
        uint64_t v29 = &a2[v28];
        int v30 = (unsigned __int8 *)v3 + v4[2 * v14] + v28;
        int v31 = v28 - 1;
        do
        {
          unsigned int v33 = *v29++;
          unsigned int v32 = v33;
          unsigned int v35 = *v30++;
          unsigned int v34 = v35;
          ++v31;
          if (v32) {
            BOOL v36 = v32 == v34;
          }
          else {
            BOOL v36 = 0;
          }
        }

        while (v36);
        if (v32 >= v34)
        {
          if (v32 == v34) {
            goto LABEL_18;
          }
          int v26 = v14 + 1;
          int v7 = v31;
        }

        else
        {
          int v18 = v31;
          signed int v16 = v14;
        }
      }

      while (v26 < v16);
    }

    return 0LL;
  }

  unsigned int v14 = 0;
LABEL_19:
  else {
    int v25 = v4[2 * v14 + 3] - v4[2 * v14 + 1];
  }
  *a3 = v25;
  return (char *)v3 + v4[2 * v14 + 1];
}

uint64_t sub_180820F9C(uint64_t a1)
{
  unsigned int v1 = *(unsigned int **)(a1 + 16);
  if (v1) {
    return *v1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_180820FB4(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  int v3 = *(_DWORD **)(a1 + 16);
  if (!v3) {
    return *(void *)(a1 + 8);
  }
  BOOL v4 = (unsigned __int8 **)(v3 + 2);
  int v5 = *v3;
  if (*v3)
  {
    uint64_t v6 = *v4;
    int v7 = -1;
    uint64_t v8 = a2;
    do
    {
      int v10 = *v8++;
      int v9 = v10;
      int v12 = *v6++;
      int v11 = v12;
      ++v7;
      if (v9) {
        BOOL v13 = v9 == v11;
      }
      else {
        BOOL v13 = 0;
      }
    }

    while (v13);
    if (v9 == v11)
    {
      int v14 = 0;
LABEL_19:
      *a3 = -1;
      return sub_180847528(*(void *)&v3[4 * v14 + 4]);
    }

    int v16 = v5 - 1;
    int v17 = v4[2 * v5 - 2];
    int v18 = -1;
    uint64_t v19 = a2;
    do
    {
      int v21 = *v19++;
      int v20 = v21;
      int v23 = *v17++;
      int v22 = v23;
      ++v18;
      if (v20) {
        BOOL v24 = v20 == v22;
      }
      else {
        BOOL v24 = 0;
      }
    }

    while (v24);
    if (v20 == v22)
    {
      int v14 = v5 - 1;
LABEL_18:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 3)
    {
      int v25 = 1;
      do
      {
        int v26 = v25 + v16;
        if (v25 + v16 < 0 != __OFADD__(v25, v16)) {
          ++v26;
        }
        int v14 = v26 >> 1;
        if (v7 >= v18) {
          int v27 = v18;
        }
        else {
          int v27 = v7;
        }
        int v28 = &a2[v27];
        uint64_t v29 = &v4[2 * v14][v27];
        int v30 = v27 - 1;
        do
        {
          unsigned int v32 = *v28++;
          unsigned int v31 = v32;
          unsigned int v34 = *v29++;
          unsigned int v33 = v34;
          ++v30;
          if (v31) {
            BOOL v35 = v31 == v33;
          }
          else {
            BOOL v35 = 0;
          }
        }

        while (v35);
        if (v31 >= v33)
        {
          if (v31 == v33) {
            goto LABEL_18;
          }
          int v25 = v14 + 1;
          int v7 = v30;
        }

        else
        {
          int v18 = v30;
          int v16 = v14;
        }
      }

      while (v25 < v16);
    }
  }

  return 0LL;
}

uint64_t sub_1808210D0(uint64_t a1)
{
  unsigned int v1 = *(unsigned int **)(a1 + 16);
  if (v1) {
    return *v1;
  }
  else {
    return 0LL;
  }
}

_OWORD *ucnv_open(unsigned __int8 *a1, UErrorCode *a2)
{
  else {
    return 0LL;
  }
}

_OWORD *ucnv_openU(UChar *s, UErrorCode *a2)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  if (!s) {
    return ucnv_createConverter(0LL, 0LL, a2);
  }
  if (u_strlen(s) >= 60)
  {
    uint64_t result = 0LL;
    *a2 = U_ILLEGAL_ARGUMENT_ERROR;
    return result;
  }

  memset(v6, 0, 60);
  int v5 = (unsigned __int8 *)u_austrcpy((char *)v6, s);
  else {
    return 0LL;
  }
}

_OWORD *ucnv_openCCSID(unsigned int a1, int a2, UErrorCode *a3)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  memset(v6, 0, 60);
  if (a2)
  {
    uint64_t v5 = 0LL;
  }

  else
  {
    strcpy((char *)v6, "ibm-");
    uint64_t v5 = 4LL;
  }

  T_CString_integerToString((_BYTE *)((unint64_t)v6 | v5), a1, 0xAu);
  return ucnv_createConverter(0LL, (unsigned __int8 *)v6, a3);
}

uint64_t ucnv_safeClone( void (**a1)(void, void, void, void, void, void, void), uint64_t a2, int *a3, int *a4)
{
  uint64_t v32 = 0LL;
  memset(v31, 0, sizeof(v31));
  LOWORD(v31[0]) = 56;
  BYTE2(v31[0]) = 1;
  uint64_t v30 = 0LL;
  memset(v29, 0, sizeof(v29));
  LOWORD(v29[0]) = 56;
  BYTE2(v29[0]) = 1;
  if (!a4 || *a4 > 0) {
    return 0LL;
  }
  if (!a1)
  {
    uint64_t v5 = 0LL;
    int v12 = 1;
LABEL_12:
    *a4 = v12;
    return v5;
  }

  uint64_t v8 = a3;
  int v10 = *(void (**)(void, void, void, void))(*((void *)a1[6] + 4) + 112LL);
  if (v10)
  {
    int v34 = 0;
    v10(a1, 0LL, &v34, a4);
    uint64_t v5 = 0LL;
    if (*a4 >= 1) {
      return v5;
    }
    if (v8) {
      goto LABEL_9;
    }
LABEL_14:
    int v11 = 1;
    int v35 = 1;
    uint64_t v8 = &v35;
    goto LABEL_15;
  }

  int v34 = 288;
  if (!a3) {
    goto LABEL_14;
  }
LABEL_9:
  int v11 = *v8;
  int v35 = v11;
  if (v11 <= 0)
  {
    uint64_t v5 = 0LL;
    int *v8 = v34;
    return v5;
  }

uint64_t ucnv_clone(void (**a1)(void, void, void, void, void, void, void), int *a2)
{
  return ucnv_safeClone(a1, 0LL, 0LL, a2);
}

void ucnv_close(void *a1)
{
  int v12 = 0;
  if (a1)
  {
    uint64_t v2 = (_BYTE *(*)(_BYTE *, uint64_t, uint64_t, uint64_t, int, int *))a1[1];
    if (v2 != UCNV_TO_U_CALLBACK_SUBSTITUTE)
    {
      uint64_t v11 = 0LL;
      __int128 v9 = 0u;
      __int128 v10 = 0u;
      uint64_t v7 = 65592LL;
      uint64_t v8 = a1;
      int v12 = 0;
      v2((_BYTE *)a1[4], (uint64_t)&v7, 0LL, 0LL, 4, &v12);
    }

    int v3 = (_BYTE *(*)(_BYTE *, uint64_t, uint64_t, uint64_t, int, int, int *))*a1;
    if ((_BYTE *(*)(_BYTE *, uint64_t, uint64_t, uint64_t, int, int, int *))*a1 != UCNV_FROM_U_CALLBACK_SUBSTITUTE)
    {
      uint64_t v11 = 0LL;
      __int128 v9 = 0u;
      __int128 v10 = 0u;
      uint64_t v7 = 65592LL;
      uint64_t v8 = a1;
      int v12 = 0;
      v3((_BYTE *)a1[3], (uint64_t)&v7, 0LL, 0LL, 0, 4, &v12);
    }

    BOOL v4 = *(void (**)(void *))(*(void *)(a1[6] + 32LL) + 32LL);
    if (v4) {
      v4(a1);
    }
    uint64_t v5 = (void *)a1[5];
    if (v5 != a1 + 17) {
      uprv_free(v5);
    }
    uint64_t v6 = a1[6];
    if (*(_BYTE *)(v6 + 25)) {
      sub_180827BA4(v6);
    }
    if (!*((_BYTE *)a1 + 61)) {
      uprv_free(a1);
    }
  }

uint64_t ucnv_getAvailableName(unsigned int a1)
{
  if (HIWORD(a1)) {
    return 0LL;
  }
  int v2 = 0;
  uint64_t result = sub_1808288B4((unsigned __int16)a1, (UErrorCode *)&v2);
  if (v2 >= 1) {
    return 0LL;
  }
  return result;
}

uint64_t ucnv_countAvailable()
{
  int v1 = 0;
  return sub_1808286CC((UErrorCode *)&v1);
}

const void **ucnv_getSubstChars(const void **result, void *__dst, _BYTE *a3, int *a4)
{
  if (*a4 <= 0)
  {
    uint64_t v5 = result;
    int v6 = *((char *)result + 89);
    if (v6 <= 0)
    {
      *a3 = 0;
    }

    else if ((char)*a3 >= (char)v6)
    {
      uint64_t result = (const void **)memcpy(__dst, result[5], *((unsigned __int8 *)result + 89));
      *a3 = *((_BYTE *)v5 + 89);
    }

    else
    {
      *a4 = 8;
    }
  }

  return result;
}

void **ucnv_setSubstChars(void **result, const void *a2, int a3, int *a4)
{
  if (*a4 <= 0)
  {
    char v4 = a3;
    uint64_t v5 = result;
    uint64_t v6 = *((void *)result[6] + 2);
    if (*(char *)(v6 + 71) >= a3 && *(char *)(v6 + 70) <= a3)
    {
      uint64_t result = (void **)memcpy(result[5], a2, a3);
      *((_BYTE *)v5 + 89) = v4;
      *((_BYTE *)v5 + 94) = 0;
    }

    else
    {
      *a4 = 1;
    }
  }

  return result;
}

void ucnv_setSubstString(uint64_t a1, const UChar *a2, int32_t a3, int *a4)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  bzero(v17, 0x400uLL);
  memset(__src, 0, sizeof(__src));
  int v15 = 1024;
  uint64_t v8 = (void *)ucnv_safeClone( (void (**)(void, void, void, void, void, void, void))a1,  (uint64_t)v17,  &v15,  a4);
  __int128 v9 = v8;
  if (*a4 <= 0)
  {
    void *v8 = UCNV_FROM_U_CALLBACK_STOP;
    v8[3] = 0LL;
  }

  int v10 = ucnv_fromUChars((uint64_t)v8, (unint64_t)__src, 32, a2, a3, a4);
  ucnv_close(v9);
  if (*a4 <= 0)
  {
    uint64_t v11 = *(void *)(a1 + 48);
    if (*(void *)(*(void *)(v11 + 32) + 104LL)
      && (*(_BYTE *)(*(void *)(v11 + 16) + 69LL) != 2 || sub_18083AC68(a1) == 9))
    {
      if (a3 >= 33)
      {
        int v12 = 15;
LABEL_9:
        *a4 = v12;
        return;
      }

      if (a3 < 0) {
        a3 = u_strlen(a2);
      }
      int v10 = 2 * a3;
    }

    else
    {
      a2 = (const UChar *)__src;
    }

    if (v10 < 5)
    {
      if (!v10)
      {
LABEL_22:
        *(_BYTE *)(a1 + 89) = v10;
        *(_BYTE *)(a1 + 94) = 0;
        return;
      }

      unint64_t v13 = *(void **)(a1 + 40);
    }

    else
    {
      unint64_t v13 = *(void **)(a1 + 40);
      if (v13 == (void *)(a1 + 136))
      {
        size_t v14 = uprv_malloc(0x40uLL);
        *(void *)(a1 + 40) = v14;
        if (!v14)
        {
          *(void *)(a1 + 40) = v13;
          int v12 = 7;
          goto LABEL_9;
        }

        _OWORD v14[2] = 0u;
        v14[3] = 0u;
        *size_t v14 = 0u;
        v14[1] = 0u;
        unint64_t v13 = v14;
      }
    }

    memcpy(v13, a2, v10);
    if (a2 != (const UChar *)__src) {
      int v10 = -a3;
    }
    goto LABEL_22;
  }

void *ucnv_setFromUCallBack(void *result, uint64_t a2, uint64_t a3, void *a4, void *a5, int *a6)
{
  if (*a6 <= 0)
  {
    if (a4) {
      *a4 = *result;
    }
    _OWORD *result = a2;
    if (a5) {
      *a5 = result[3];
    }
    result[3] = a3;
  }

  return result;
}

uint64_t ucnv_fromUChars(uint64_t a1, unint64_t a2, int a3, const UChar *a4, int a5, int *a6)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v18 = a4;
  uint64_t v19 = (_BYTE *)a2;
  if (!a6 || *a6 > 0) {
    return 0LL;
  }
  if (!a1 || (int v9 = a3, a3 < 0) || (a3 ? (v11 = a2 == 0) : (v11 = 0), v11 || (v12 = a5, a5 < -1) || !a4 && a5))
  {
    uint64_t result = 0LL;
    *a6 = 1;
  }

  else
  {
    sub_180821C04(a1, 2LL, 1);
    if (v12 == -1) {
      int32_t v12 = u_strlen(a4);
    }
    if (v12 < 1)
    {
      uint64_t v17 = 0LL;
    }

    else
    {
      unint64_t v14 = (unint64_t)&a4[v12];
      int v15 = a2 + 0x7FFFFFFF;
      if (a2 > 0xFFFFFFFF80000000LL) {
        int v15 = -1;
      }
      int v16 = v15 - a2;
      if (v16 >= v9) {
        int v16 = v9;
      }
      if (v9) {
        int v9 = v16;
      }
      else {
        int v9 = 0;
      }
      ucnv_fromUnicode(a1, (uint64_t *)&v19, a2 + v9, (unint64_t *)&v18, v14, 0LL, 1, a6);
      uint64_t v17 = ((_DWORD)v19 - a2);
      if (*a6 == 15)
      {
        bzero(v20, 0x400uLL);
        do
        {
          uint64_t v19 = v20;
          *a6 = 0;
          ucnv_fromUnicode(a1, (uint64_t *)&v19, (unint64_t)&v21, (unint64_t *)&v18, v14, 0LL, 1, a6);
          uint64_t v17 = v17 + (_DWORD)v19 - v20;
        }

        while (*a6 == 15);
      }
    }

    return u_terminateChars(a2, v9, v17, a6);
  }

  return result;
}

uint64_t ucnv_reset(uint64_t a1)
{
  return sub_180821C04(a1, 0LL, 1);
}

uint64_t sub_180821C04(uint64_t result, uint64_t a2, int a3)
{
  if (result)
  {
    uint64_t v4 = result;
    if (a3)
    {
      uint64_t v5 = *(_BYTE *(**)(_BYTE *, uint64_t, uint64_t, uint64_t, int, int *))(result + 8);
      if (v5 != UCNV_TO_U_CALLBACK_SUBSTITUTE)
      {
        uint64_t v13 = 0LL;
        __int128 v11 = 0u;
        __int128 v12 = 0u;
        uint64_t v9 = 65592LL;
        uint64_t v10 = result;
        int v14 = 0;
        uint64_t result = (uint64_t)v5(*(_BYTE **)(result + 32), (uint64_t)&v9, 0LL, 0LL, 3, &v14);
      }

      if ((_DWORD)a2 != 1)
      {
LABEL_7:
        uint64_t v6 = *(_BYTE *(**)(_BYTE *, uint64_t, uint64_t, uint64_t, int, int, int *))v4;
        if (*(_BYTE *(**)(_BYTE *, uint64_t, uint64_t, uint64_t, int, int, int *))v4 != UCNV_FROM_U_CALLBACK_SUBSTITUTE)
        {
          uint64_t v13 = 0LL;
          __int128 v11 = 0u;
          __int128 v12 = 0u;
          uint64_t v9 = 65592LL;
          uint64_t v10 = v4;
          int v14 = 0;
          uint64_t result = (uint64_t)v6(*(_BYTE **)(v4 + 24), (uint64_t)&v9, 0LL, 0LL, 0, 3, &v14);
        }
      }
    }

    uint64_t v7 = *(void *)(v4 + 48);
    if ((int)a2 > 1
      || (*(void *)(v4 + 72) = *(unsigned int *)(v7 + 40),
          *(_BYTE *)(v4 + 64) = 0,
          *(_BYTE *)(v4 + 93) = 0,
          *(_BYTE *)(v4 + 90) = 0,
          *(_BYTE *)(v4 + 282) = 0,
          (_DWORD)a2 != 1))
    {
      *(void *)(v4 + 80) = 0LL;
      *(_WORD *)(v4 + 9icu::UVector32::~UVector32(this + 1) = 0;
      *(_DWORD *)(v4 + 208) = -1;
      *(_BYTE *)(v4 + 28icu::UVector32::~UVector32(this + 1) = 0;
    }

    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 + 32) + 40LL);
    if (v8) {
      return v8(v4, a2);
    }
  }

  return result;
}

uint64_t ucnv_resetToUnicode(uint64_t a1)
{
  return sub_180821C04(a1, 1LL, 1);
}

uint64_t ucnv_resetFromUnicode(uint64_t a1)
{
  return sub_180821C04(a1, 2LL, 1);
}

uint64_t ucnv_getMaxCharSize(uint64_t a1)
{
  return *(char *)(a1 + 88);
}

uint64_t ucnv_getMinCharSize(uint64_t a1)
{
  return *(char *)(*(void *)(*(void *)(a1 + 48) + 16LL) + 70LL);
}

uint64_t ucnv_getName(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(v4 + 32) + 96LL);
  if (v5)
  {
    uint64_t result = v5(a1);
    if (result) {
      return result;
    }
    uint64_t v4 = *(void *)(a1 + 48);
  }

  return *(void *)(v4 + 16) + 4LL;
}

uint64_t ucnv_getCCSID(uint64_t a1, UErrorCode *a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t result = *(unsigned int *)(v5 + 64);
  if (!(_DWORD)result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)(v4 + 32) + 96LL);
    if (v7)
    {
      uint64_t v8 = (char *)v7(a1);
      if (v8)
      {
LABEL_9:
        Standardint Name = (const char *)ucnv_getStandardName(v8, "IBM", a2);
        uint64_t result = 0LL;
        if (*(int *)a2 <= 0 && StandardName)
        {
          uint64_t result = (uint64_t)strchr(StandardName, 45);
          if (result) {
            return atol((const char *)(result + 1));
          }
        }

        return result;
      }

      uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 16LL);
    }

    uint64_t v8 = (char *)(v5 + 4);
    goto LABEL_9;
  }

  return result;
}

uint64_t ucnv_getPlatform(uint64_t a1, int *a2)
{
  if (*a2 <= 0) {
    return *(char *)(*(void *)(*(void *)(a1 + 48) + 16LL) + 68LL);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t ucnv_getToUCallBack(uint64_t result, void *a2, void *a3)
{
  *a2 = *(void *)(result + 8);
  *a3 = *(void *)(result + 32);
  return result;
}

void *ucnv_getFromUCallBack(void *result, void *a2, void *a3)
{
  *a2 = *result;
  *a3 = result[3];
  return result;
}

uint64_t ucnv_setToUCallBack(uint64_t result, uint64_t a2, uint64_t a3, void *a4, void *a5, int *a6)
{
  if (*a6 <= 0)
  {
    if (a4) {
      *a4 = *(void *)(result + 8);
    }
    *(void *)(result + 8) = a2;
    if (a5) {
      *a5 = *(void *)(result + 32);
    }
    *(void *)(result + 32) = a3;
  }

  return result;
}

uint64_t ucnv_fromUnicode( uint64_t result, uint64_t *a2, unint64_t a3, unint64_t *a4, unint64_t a5, _DWORD *a6, int a7, int *a8)
{
  unsigned int v31 = a6;
  if (a8 && *a8 <= 0)
  {
    uint64_t v9 = result;
    if (!result || !a2 || !a4) {
      goto LABEL_30;
    }
    unint64_t v13 = *a4;
    unint64_t v14 = *a2;
    uint64_t v15 = a5 + 0x7FFFFFFF;
    if (a5 >= 0xFFFFFFFF80000001LL) {
      uint64_t v15 = -1LL;
    }
    unint64_t v16 = a5 - (v15 == a5);
    BOOL v17 = v16 < v13 || v14 > a3;
    if (!v17
      && ((unint64_t v18 = v16 - v13, v16 > v13) ? (v19 = v18 > 0x7FFFFFFE) : (v19 = 0),
          !v19
       && ((a3 - v14) >> 31 ? (BOOL v20 = a3 > v14) : (BOOL v20 = 0), v20 ? (v21 = 0) : (v21 = 1), (v18 & 1) == 0
                                                                                      && (v21 & 1) != 0)))
    {
      v25[0] = 0LL;
      if (*(char *)(result + 91) < 1 || (uint64_t result = sub_18082205C(result, a2, a3, &v31, a8), !(_DWORD)result))
      {
        if (a7 || v13 != v16 || *(char *)(v9 + 281) < 0)
        {
          BYTE2(v25[0]) = a7;
          v25[1] = v9;
          unint64_t v26 = v13;
          uint64_t v23 = *a2;
          unint64_t v27 = v16;
          uint64_t v28 = v23;
          unint64_t v29 = a3;
          uint64_t v30 = v31;
          LOWORD(v25[0]) = 56;
          uint64_t result = sub_180822114((uint64_t)v25, a8);
          uint64_t v24 = v28;
          *a4 = v26;
          *a2 = v24;
        }
      }
    }

    else
    {
LABEL_30:
      *a8 = 1;
    }
  }

  return result;
}

uint64_t sub_18082205C(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD **a4, _DWORD *a5)
{
  if (a4) {
    uint64_t v5 = *a4;
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = *a2;
  if (*(char *)(a1 + 91) < 1)
  {
LABEL_11:
    *(_BYTE *)(a1 + 9icu::UVector32::~UVector32(this + 1) = 0;
    *a2 = v6;
    uint64_t result = 0LL;
    if (v5) {
      *a4 = v5;
    }
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = a1 + 104;
    uint64_t v9 = *(unsigned __int8 *)(a1 + 91);
    while (v6 + v7 != a3)
    {
      *(_BYTE *)(v6 + v7) = *(_BYTE *)(v8 + v7);
      if (v5) {
        *v5++ = -1;
      }
      if (v9 == ++v7)
      {
        v6 += v7;
        goto LABEL_11;
      }
    }

    uint64_t v11 = 0LL;
    do
    {
      __int128 v12 = (_BYTE *)(v8 + v11);
      char v13 = *(_BYTE *)(v8 + v11++ + v7);
      *__int128 v12 = v13;
    }

    while (v11 + v7 < (char)v9);
    *(_BYTE *)(a1 + 9icu::UVector32::~UVector32(this + 1) = v11;
    *a2 = a3;
    if (v5) {
      *a4 = v5;
    }
    *a5 = 15;
    return 1LL;
  }

  return result;
}

uint64_t sub_180822114(uint64_t result, int *a2)
{
  uint64_t v3 = result;
  uint64_t v26 = *MEMORY[0x1895F89C0];
  memset(__dst, 0, sizeof(__dst));
  uint64_t v4 = *(void *)(result + 8);
  unint64_t v5 = *(void *)(result + 16);
  unint64_t v6 = *(void *)(result + 48);
  uint64_t v7 = *(void *)(*(void *)(v4 + 48) + 32LL);
  if (v6)
  {
    BOOL v19 = *(uint64_t (**)(uint64_t, int *))(v7 + 72);
    if (v19)
    {
      uint64_t v8 = 0LL;
      goto LABEL_7;
    }

    uint64_t v8 = 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  BOOL v19 = *(uint64_t (**)(uint64_t, int *))(v7 + 64);
LABEL_7:
  uint64_t v9 = *(void *)(result + 32);
  uint64_t v10 = *(char *)(v4 + 281);
  if (v10 < 0)
  {
    uint64_t v23 = *(void *)(result + 24);
    LODWORD(v22) = v8;
    BYTE4(v22) = *(_BYTE *)(result + 2);
    uint64_t result = (uint64_t)memcpy(__dst, (const void *)(v4 + 212), (-2 * v10));
    *(void *)(v3 + 16) = __dst;
    *(void *)(v3 + 24) = &__dst[-2 * v10];
    *(_BYTE *)(v3 + 2) = 0;
    *(_BYTE *)(v4 + 28icu::UVector32::~UVector32(this + 1) = 0;
    uint64_t v8 = 0xFFFFFFFFLL;
    unint64_t v24 = v5;
  }

  else
  {
    uint64_t v23 = 0LL;
    unint64_t v24 = 0LL;
    uint64_t v22 = 0LL;
  }

  __src = (void *)(v4 + 212);
  int v11 = *a2;
  while (2)
  {
    while (2)
    {
      while (2)
      {
        BOOL v20 = v11 <= 0
           && (uint64_t result = v19(v3, a2), *a2 <= 0)
           && *(_BYTE *)(v3 + 2)
           && *(void *)(v3 + 16) == *(void *)(v3 + 24)
           && *(_DWORD *)(v4 + 84) == 0;
        LODWORD(v12) = 0;
        char v13 = 0;
        if (!v6) {
          goto LABEL_19;
        }
LABEL_15:
        uint64_t v14 = *(void *)(v3 + 32) - v9;
        if ((int)v14 >= 1)
        {
          uint64_t result = sub_180824120(v6, v14, v8, v12);
          v6 += 4LL * v14;
          *(void *)(v3 + 48) = v6;
        }

        if ((v8 & 0x80000000) == 0)
        {
          uint64_t v15 = v8 + ((*(void *)(v3 + 16) - v5) >> 1);
          goto LABEL_20;
        }

        while (1)
        {
LABEL_19:
          uint64_t v15 = v8;
LABEL_20:
          uint64_t v16 = *(char *)(v4 + 281);
          if ((v16 & 0x8000000000000000LL) == 0) {
            goto LABEL_23;
          }
          if (v24)
          {
            *a2 = 5;
LABEL_23:
            uint64_t v8 = v15;
            goto LABEL_24;
          }

          uint64_t v23 = *(void *)(v3 + 24);
          unint64_t v24 = *(void *)(v3 + 16);
          BYTE4(v22) = *(_BYTE *)(v3 + 2);
          uint64_t result = (uint64_t)memcpy(__dst, __src, (-2 * v16));
          *(void *)(v3 + 16) = __dst;
          *(void *)(v3 + 24) = &__dst[-2 * v16];
          *(_BYTE *)(v3 + 2) = 0;
          uint64_t v8 = (int)v15 + (int)v16 < 0 != __OFADD__((_DWORD)v15, (_DWORD)v16) ? 0xFFFFFFFFLL : (v15 + v16);
          *(_BYTE *)(v4 + 28icu::UVector32::~UVector32(this + 1) = 0;
          LODWORD(v22) = v15;
LABEL_24:
          unint64_t v5 = *(void *)(v3 + 16);
          uint64_t v9 = *(void *)(v3 + 32);
          int v11 = *a2;
          if (*a2 <= 0) {
            break;
          }
          if (v13 & 1 | ((v11 - 13) < 0xFFFFFFFD))
          {
            if (v24)
            {
              unint64_t v18 = *(void *)(v3 + 24) - v5;
              if ((int)(v18 >> 1) >= 1)
              {
                uint64_t result = (uint64_t)u_memcpy((UChar *)__src, *(const UChar **)(v3 + 16), v18 >> 1);
                *(_BYTE *)(v4 + 28icu::UVector32::~UVector32(this + 1) = -(v18 >> 1);
              }

              *(void *)(v3 + 16) = v24;
              *(void *)(v3 + 24) = v23;
              *(_BYTE *)(v3 + 2) = BYTE4(v22);
            }

            return result;
          }

          unsigned int v17 = *(_DWORD *)(v4 + 84);
LABEL_32:
          if (HIWORD(v17))
          {
            *(_WORD *)(v4 + 140) = (v17 >> 10) - 10304;
            *(_WORD *)(v4 + 142) = v17 & 0x3FF | 0xDC00;
            uint64_t v12 = 2LL;
          }

          else
          {
            *(_WORD *)(v4 + 140) = v17;
            uint64_t v12 = 1LL;
          }

          *(_BYTE *)(v4 + 92) = v12;
          *(_DWORD *)(v4 + 84) = 0;
          uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))v4)( *(void *)(v4 + 24),  v3,  v4 + 140,  v12);
          char v13 = 1;
          if (v6) {
            goto LABEL_15;
          }
        }

        if (v5 < *(void *)(v3 + 24)) {
          continue;
        }
        break;
      }

      if (v24)
      {
        *(void *)(v3 + 16) = v24;
        *(void *)(v3 + 24) = v23;
        uint64_t v8 = v22;
        *(_BYTE *)(v3 + 2) = BYTE4(v22);
        unint64_t v24 = 0LL;
        continue;
      }

      break;
    }

    if (!*(_BYTE *)(v3 + 2)) {
      return result;
    }
    unsigned int v17 = *(_DWORD *)(v4 + 84);
    if (v17)
    {
      *a2 = 11;
      goto LABEL_32;
    }

    unint64_t v24 = 0LL;
    if (!v20) {
      continue;
    }
    return sub_180821C04(v4, 2LL, 0LL);
  }

uint64_t ucnv_toUnicode( uint64_t result, char **a2, unint64_t a3, unint64_t *a4, unint64_t a5, _DWORD *a6, int a7, int *a8)
{
  unsigned int v31 = a6;
  if (a8 && *a8 <= 0)
  {
    uint64_t v9 = result;
    if (!result || !a2 || !a4) {
      goto LABEL_19;
    }
    unint64_t v13 = *a4;
    uint64_t v14 = a3 + 0x7FFFFFFF;
    if (a3 >= 0xFFFFFFFF80000001LL) {
      uint64_t v14 = -1LL;
    }
    BOOL v15 = v14 == a3;
    if (v13 > a5) {
      goto LABEL_19;
    }
    uint64_t v16 = *a2;
    unsigned int v17 = (char *)(a3 - v15);
    BOOL v20 = v17 >= v16;
    unint64_t v19 = v17 - v16;
    BOOL v20 = v19 != 0 && v20 && v19 >= 0x7FFFFFFF;
    unint64_t v21 = v19 & 1;
    if (!v20 && v21 == 0)
    {
      v25[0] = 0LL;
      if (*(char *)(result + 93) < 1 || (uint64_t result = sub_1808225DC(result, (_WORD **)a2, v17, &v31, a8), !(_DWORD)result))
      {
        if (a7 || v13 != a5 || *(char *)(v9 + 282) < 0)
        {
          BYTE2(v25[0]) = a7;
          v25[1] = v9;
          unint64_t v26 = v13;
          uint64_t v23 = *a2;
          unint64_t v27 = a5;
          uint64_t v28 = v23;
          unint64_t v29 = v17;
          uint64_t v30 = v31;
          LOWORD(v25[0]) = 56;
          uint64_t result = sub_18082268C((uint64_t)v25, a8);
          unint64_t v24 = v28;
          *a4 = v26;
          *a2 = v24;
        }
      }
    }

    else
    {
LABEL_19:
      *a8 = 1;
    }
  }

  return result;
}

uint64_t sub_1808225DC(uint64_t a1, _WORD **a2, _WORD *a3, _DWORD **a4, _DWORD *a5)
{
  unint64_t v5 = *a2;
  if (a4) {
    unint64_t v6 = *a4;
  }
  else {
    unint64_t v6 = 0LL;
  }
  if (*(char *)(a1 + 93) < 1)
  {
LABEL_10:
    *(_BYTE *)(a1 + 93) = 0;
    *a2 = v5;
    uint64_t result = 0LL;
    if (v6) {
      *a4 = v6;
    }
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = a1 + 144;
    uint64_t v9 = *(unsigned __int8 *)(a1 + 93);
    while (v5 != a3)
    {
      *v5++ = *(_WORD *)(v8 + 2 * v7);
      if (v6) {
        *v6++ = -1;
      }
      if (v9 == ++v7) {
        goto LABEL_10;
      }
    }

    uint64_t v11 = 0LL;
    do
      *(_WORD *)(v8 + 2 * v11++) = *(_WORD *)(v8 + 2 * v7++);
    while (v7 < (char)v9);
    *(_BYTE *)(a1 + 93) = v11;
    *a2 = a3;
    if (v6) {
      *a4 = v6;
    }
    *a5 = 15;
    return 1LL;
  }

  return result;
}

uint64_t sub_18082268C(uint64_t result, int *a2)
{
  uint64_t v3 = result;
  __dst[4] = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(result + 8);
  unint64_t v5 = *(void *)(result + 16);
  unint64_t v6 = *(void *)(result + 48);
  uint64_t v7 = *(void *)(*(void *)(v4 + 48) + 32LL);
  if (v6)
  {
    unint64_t v24 = *(uint64_t (**)(uint64_t, int *))(v7 + 56);
    if (v24)
    {
      uint64_t v8 = 0LL;
      goto LABEL_7;
    }

    uint64_t v8 = 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  unint64_t v24 = *(uint64_t (**)(uint64_t, int *))(v7 + 48);
LABEL_7:
  uint64_t v9 = *(void *)(result + 32);
  memset(__dst, 0, 31);
  uint64_t v10 = *(char *)(v4 + 282);
  if (v10 < 0)
  {
    uint64_t v28 = *(void *)(result + 24);
    LODWORD(v27) = v8;
    BYTE4(v27) = *(_BYTE *)(result + 2);
    uint64_t result = (uint64_t)memcpy(__dst, (const void *)(v4 + 250), -v10);
    *(void *)(v3 + 16) = __dst;
    *(void *)(v3 + 24) = (char *)__dst - v10;
    *(_BYTE *)(v3 + 2) = 0;
    *(_BYTE *)(v4 + 282) = 0;
    uint64_t v8 = 0xFFFFFFFFLL;
    unint64_t v29 = v5;
  }

  else
  {
    unint64_t v29 = 0LL;
    uint64_t v27 = 0LL;
    uint64_t v28 = 0LL;
  }

  unint64_t v26 = (void *)(v4 + 250);
  int v11 = *a2;
  while (2)
  {
    while (2)
    {
      while (2)
      {
        BOOL v25 = v11 <= 0
           && (uint64_t result = v24(v3, a2), *a2 <= 0)
           && *(_BYTE *)(v3 + 2)
           && *(void *)(v3 + 16) == *(void *)(v3 + 24)
           && *(_BYTE *)(v4 + 64) == 0;
        LODWORD(v12) = 0;
        char v13 = 1;
        if (!v6) {
          goto LABEL_19;
        }
LABEL_15:
        unint64_t v14 = *(void *)(v3 + 32) - v9;
        unint64_t v15 = v14 >> 1;
        if ((int)(v14 >> 1) >= 1)
        {
          uint64_t result = sub_180824120(v6, v14 >> 1, v8, v12);
          v6 += 4LL * v15;
          *(void *)(v3 + 48) = v6;
        }

        if ((v8 & 0x80000000) == 0)
        {
          uint64_t v16 = (v8 + *(_DWORD *)(v3 + 16) - v5);
          goto LABEL_20;
        }

        while (1)
        {
LABEL_19:
          uint64_t v16 = v8;
LABEL_20:
          uint64_t v17 = *(char *)(v4 + 282);
          if ((v17 & 0x8000000000000000LL) == 0) {
            goto LABEL_23;
          }
          if (v29)
          {
            *a2 = 5;
LABEL_23:
            uint64_t v8 = v16;
            goto LABEL_24;
          }

          unint64_t v29 = *(void *)(v3 + 16);
          uint64_t v28 = *(void *)(v3 + 24);
          BYTE4(v27) = *(_BYTE *)(v3 + 2);
          uint64_t result = (uint64_t)memcpy(__dst, v26, -(int)v17);
          *(void *)(v3 + 16) = __dst;
          *(void *)(v3 + 24) = (char *)__dst - v17;
          *(_BYTE *)(v3 + 2) = 0;
          uint64_t v8 = (int)v16 + (int)v17 < 0 != __OFADD__((_DWORD)v16, (_DWORD)v17) ? 0xFFFFFFFFLL : (v16 + v17);
          *(_BYTE *)(v4 + 282) = 0;
          LODWORD(v27) = v16;
LABEL_24:
          unint64_t v5 = *(void *)(v3 + 16);
          uint64_t v9 = *(void *)(v3 + 32);
          int v11 = *a2;
          if (*a2 <= 0) {
            break;
          }
          if ((v13 & 1) == 0
            || ((BOOL v18 = v11 > 0x13, v19 = (1 << v11) & 0xC1C00, !v18) ? (v20 = v19 == 0) : (v20 = 1), v20))
          {
            if (v29)
            {
              int v23 = *(void *)(v3 + 24) - v5;
              if (v23 >= 1)
              {
                uint64_t result = (uint64_t)memcpy( v26,  *(const void **)(v3 + 16),  *(void *)(v3 + 24) - v5);
                *(_BYTE *)(v4 + 282) = -(char)v23;
              }

              *(void *)(v3 + 16) = v29;
              *(void *)(v3 + 24) = v28;
              *(_BYTE *)(v3 + 2) = BYTE4(v27);
            }

            return result;
          }

          uint64_t v12 = *(char *)(v4 + 64);
          *(_BYTE *)(v4 + 90) = *(_BYTE *)(v4 + 64);
LABEL_38:
          *(_BYTE *)(v4 + 64) = 0;
          uint64_t v22 = *(unsigned int *)(v4 + 284);
          if ((_DWORD)v22 == 1)
          {
            if (*a2 == 10)
            {
              uint64_t v22 = 0LL;
              *(_DWORD *)(v4 + 284) = 0;
            }

            else
            {
              uint64_t v22 = 1LL;
            }
          }

          uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, int *))(v4 + 8))( *(void *)(v4 + 32),  v3,  v4 + 96,  v12,  v22,  a2);
          char v13 = 0;
          *(_DWORD *)(v4 + 284) = 1;
          if (v6) {
            goto LABEL_15;
          }
        }

        if (v5 < *(void *)(v3 + 24)) {
          continue;
        }
        break;
      }

      if (v29)
      {
        *(void *)(v3 + 16) = v29;
        *(void *)(v3 + 24) = v28;
        uint64_t v8 = v27;
        *(_BYTE *)(v3 + 2) = BYTE4(v27);
        unint64_t v29 = 0LL;
        continue;
      }

      break;
    }

    if (!*(_BYTE *)(v3 + 2)) {
      return result;
    }
    int v21 = *(char *)(v4 + 64);
    if (v21 >= 1)
    {
      uint64_t v12 = *(unsigned __int8 *)(v4 + 64);
      *a2 = 11;
      *(_BYTE *)(v4 + 90) = v21;
LABEL_37:
      memcpy((void *)(v4 + 96), (const void *)(v4 + 65), v12);
      goto LABEL_38;
    }

    unint64_t v29 = 0LL;
    if (!v25) {
      continue;
    }
    return sub_180821C04(v4, 1LL, 0);
  }

uint64_t ucnv_toUChars(uint64_t a1, unint64_t a2, int a3, const char *a4, int a5, int *a6)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  BOOL v18 = a4;
  int v19 = (char *)a2;
  if (!a6 || *a6 > 0) {
    return 0LL;
  }
  if (!a1 || (int v9 = a3, a3 < 0) || (a3 ? (v11 = a2 == 0) : (v11 = 0), v11 || (v12 = a5, a5 < -1) || !a4 && a5))
  {
    uint64_t result = 0LL;
    *a6 = 1;
  }

  else
  {
    sub_180821C04(a1, 1LL, 1);
    if (v12 == -1) {
      int v12 = strlen(a4);
    }
    if (v12 < 1)
    {
      unint64_t v17 = 0LL;
    }

    else
    {
      unint64_t v14 = (unint64_t)&a4[v12];
      uint64_t v15 = a2 + 0x7FFFFFFF;
      if (a2 > 0xFFFFFFFF80000000LL) {
        uint64_t v15 = 0x1FFFFFFFFLL;
      }
      unint64_t v16 = (v15 - a2) >> 1;
      if (v9) {
        int v9 = v16;
      }
      else {
        int v9 = 0;
      }
      ucnv_toUnicode(a1, &v19, a2 + 2LL * v9, (unint64_t *)&v18, v14, 0LL, 1, a6);
      unint64_t v17 = (unint64_t)&v19[-a2] >> 1;
      if (*a6 == 15)
      {
        bzero(v20, 0x800uLL);
        do
        {
          int v19 = v20;
          *a6 = 0;
          ucnv_toUnicode(a1, &v19, (unint64_t)&v21, (unint64_t *)&v18, v14, 0LL, 1, a6);
          unint64_t v17 = v17 + ((unint64_t)(v19 - v20) >> 1);
        }

        while (*a6 == 15);
      }
    }

    return u_terminateUChars(a2, v9, v17, a6);
  }

  return result;
}

uint64_t ucnv_getNextUChar(uint64_t a1, unint64_t *a2, unint64_t a3, int *a4)
{
  if (!a4 || *a4 > 0) {
    return 0xFFFFLL;
  }
  if (!a1 || !a2 || (unint64_t v8 = *a2, *a2 > a3) || a3 > v8 && (a3 - v8) >> 31)
  {
    *a4 = 1;
    return 0xFFFFLL;
  }

  int v11 = *(char *)(a1 + 93);
  if (v11 < 1)
  {
    LODWORD(v9) = -1;
  }

  else
  {
    int v12 = (char *)(a1 + 144);
    uint64_t v9 = *(unsigned __int16 *)(a1 + 144);
    int v13 = 1;
    if (v11 != 1 && (v9 & 0xFC00) == 0xD800)
    {
      int v14 = *(unsigned __int16 *)(a1 + 146);
      BOOL v15 = (v14 & 0xFC00) == 56320;
      unsigned int v16 = v14 + ((_DWORD)v9 << 10) - 56613888;
      if (v15) {
        uint64_t v9 = v16;
      }
      else {
        uint64_t v9 = *(unsigned __int16 *)(a1 + 144);
      }
      if (v15) {
        int v13 = 2;
      }
      else {
        int v13 = 1;
      }
    }

    *(_BYTE *)(a1 + 93) = v11 - v13;
  }

  int v29 = 0;
  v30[0] = 65592LL;
  v30[1] = a1;
  unint64_t v31 = v8;
  unint64_t v32 = a3;
  int v33 = (char *)&v29;
  int v34 = (char *)&v29 + 2;
  uint64_t v35 = 0LL;
  if ((v9 & 0x80000000) == 0)
  {
    LOWORD(v29) = v9;
    int v33 = (char *)&v29 + 2;
    LODWORD(v17) = 1;
    if (*a4 >= 1)
    {
      int v18 = 0;
      uint64_t v9 = 0xFFFFLL;
LABEL_55:
      int v27 = v17 - v18;
      uint64_t v28 = *(unsigned __int8 *)(a1 + 93);
      *(_BYTE *)(a1 + 93) = v28 + v27;
      *(_WORD *)(a1 + 144) = *(_WORD *)((unint64_t)&v29 | (2LL * v18));
      if (v27 > 1) {
        *(_WORD *)(a1 + 146) = *((_WORD *)&v29 + (v18 + 1));
      }
      goto LABEL_59;
    }

    unsigned __int16 v19 = v9;
    goto LABEL_37;
  }

  if (*(_BYTE *)(a1 + 64)) {
    goto LABEL_30;
  }
  unint64_t v24 = *(uint64_t (**)(void *, int *))(*(void *)(*(void *)(a1 + 48) + 32LL) + 80LL);
  if (!v24) {
    goto LABEL_30;
  }
  uint64_t v25 = v24(v30, a4);
  *a2 = v31;
  if (*a4 == 8)
  {
    sub_180821C04(a1, 1LL, 0);
    return 0xFFFFLL;
  }

  if (*a4 > 0 || (uint64_t v9 = v25, (v25 & 0x80000000) != 0))
  {
LABEL_30:
    sub_18082268C((uint64_t)v30, a4);
    if (*a4 == 15)
    {
      *a4 = 0;
      unint64_t v17 = (unint64_t)(v33 - (char *)&v29) >> 1;
    }

    else
    {
      unint64_t v17 = (unint64_t)(v33 - (char *)&v29) >> 1;
      if (*a4 >= 1)
      {
        int v18 = 0;
        uint64_t v9 = 0xFFFFLL;
        goto LABEL_54;
      }
    }

    if (!(_DWORD)v17)
    {
      *a4 = 8;
      uint64_t v9 = 0xFFFFLL;
      goto LABEL_59;
    }

    unsigned __int16 v19 = v29;
LABEL_37:
    uint64_t v9 = v19;
    if ((v19 & 0xFC00) == 0xD800)
    {
      int v20 = *(char *)(a1 + 93);
      BOOL v21 = __OFSUB__(v20, 1);
      int v22 = v20 - 1;
      if (v22 < 0 != v21)
      {
        if (v31 < a3)
        {
          int v34 = (char *)v30;
          sub_18082268C((uint64_t)v30, a4);
          int v26 = *a4;
          if (*a4 == 15)
          {
            int v26 = 0;
            *a4 = 0;
          }

          unint64_t v17 = (unint64_t)(v33 - (char *)&v29) >> 1;
          int v18 = 1;
          if (v26 <= 0 && (_DWORD)v17 == 2)
          {
            if ((HIWORD(v29) & 0xFC00) != 0xDC00)
            {
              LODWORD(v17) = 2;
              goto LABEL_55;
            }

            uint64_t v9 = HIWORD(v29) + ((_DWORD)v9 << 10) - 56613888;
            goto LABEL_59;
          }

void ucnv_convertEx( uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, const char **a5, const char *a6, uint64_t *a7, uint64_t **a8, uint64_t *a9, uint64_t *a10, char a11, char a12, int *a13)
{
  uint64_t v62 = *MEMORY[0x1895F89C0];
  unsigned int v60 = 0LL;
  if (!a13 || *a13 > 0) {
    return;
  }
  if (!a1) {
    goto LABEL_21;
  }
  if (!a2) {
    goto LABEL_21;
  }
  if (!a5) {
    goto LABEL_21;
  }
  if (!a3) {
    goto LABEL_21;
  }
  unint64_t v17 = *a5;
  if (!*a5) {
    goto LABEL_21;
  }
  if (!a4) {
    goto LABEL_21;
  }
  unint64_t v19 = *a3;
  if (!*a3) {
    goto LABEL_21;
  }
  int v20 = a6;
  if (v17 > a6 && a6 != 0LL) {
    goto LABEL_21;
  }
  if (v19 > a4) {
    goto LABEL_21;
  }
  int v22 = a8;
  int v23 = a7;
  if (a6 > v17)
  {
  }

  BOOL v24 = a4 >= v19;
  unint64_t v25 = a4 - v19;
  if (v25 != 0 && v24)
  {
    if (v25 >> 31) {
      goto LABEL_21;
    }
  }

  uint64_t v59 = 0LL;
  if (a7)
  {
    if (!a8 || (v27 = a10, a7 >= a10) || (uint64_t v28 = a9) == 0LL || !*a8 || !*a9)
    {
LABEL_21:
      int v26 = 1;
LABEL_22:
      *a13 = v26;
      return;
    }
  }

  else
  {
    if (!a12) {
      goto LABEL_21;
    }
    int v23 = (uint64_t *)v61;
    uint64_t v59 = v61;
    unsigned int v60 = v61;
    int v27 = &v62;
    int v22 = (uint64_t **)&v60;
    uint64_t v28 = (uint64_t *)&v59;
  }

  unsigned int v45 = v27;
  char v48 = v28;
  bzero(v61, 0x800uLL);
  BOOL v56 = 0LL;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  if (!v20) {
    int v20 = &v17[strlen(v17)];
  }
  if (a11)
  {
    sub_180821C04(a2, 1LL, 1);
    sub_180821C04(a1, 2LL, 1);
    int v29 = v48;
    *char v48 = (uint64_t)v23;
    *int v22 = v23;
  }

  else
  {
    int v29 = v48;
    if (*(char *)(a1 + 91) >= 1)
    {
      int v44 = sub_18082205C(a1, a3, a4, 0LL, a13);
      int v29 = v48;
      if (v44
        || !a12
        && (*(char *)(a1 + 281) & 0x80000000) == 0
        && *v22 == (uint64_t *)*v48
        && !*(_BYTE *)(a2 + 93)
        && (*(char *)(a2 + 282) & 0x80000000) == 0
        && v17 == v20)
      {
        return;
      }
    }
  }

  uint64_t v30 = *(void *)(a2 + 48);
  uint64_t v31 = *(void *)(a1 + 48);
  if ((*(_BYTE *)(*(void *)(v30 + 16) + 69LL) != 4
     || (unint64_t v32 = *(void (**)(__int128 *, __int128 *, int *))(*(void *)(v31 + 32) + 136LL)) == 0LL)
    && (*(_BYTE *)(*(void *)(v31 + 16) + 69LL) != 4
     || (unint64_t v32 = *(void (**)(__int128 *, __int128 *, int *))(*(void *)(v30 + 32) + 128LL)) == 0LL))
  {
    unint64_t v32 = 0LL;
  }

  BYTE2(v49) = 0;
  int v47 = v32;
  else {
    int v34 = v23 + 8;
  }
  uint64_t v35 = *a3;
  *((void *)&v49 + icu::UVector32::~UVector32(this + 1) = a1;
  uint64_t v51 = (_BYTE *)v35;
  unint64_t v52 = a4;
  uint64_t v53 = 0LL;
  LOWORD(v49) = 56;
  BYTE2(v54) = a12;
  uint64_t v57 = v34;
  uint64_t v58 = 0LL;
  *((void *)&v54 + icu::UVector32::~UVector32(this + 1) = a2;
  *(void *)&__int128 v55 = v17;
  LOWORD(v54) = 56;
  char v46 = (uint64_t *)((char *)v23 + 2);
  *((void *)&v55 + icu::UVector32::~UVector32(this + 1) = v20;
  BOOL v36 = v34;
  while (1)
  {
    uint64_t v37 = *v29;
    if ((unint64_t)*v22 >= *v29)
    {
      int v38 = *a13;
    }

    *(void *)&__int128 v50 = *v22;
    *((void *)&v50 + icu::UVector32::~UVector32(this + 1) = v37;
    sub_180822114((uint64_t)&v49, a13);
    int v38 = *a13;
    if (*a13 >= 1) {
      break;
    }
    int v29 = v48;
LABEL_53:
    uint64_t *v29 = (uint64_t)v23;
    *int v22 = v23;
    if (*(char *)(a2 + 93) < 1)
    {
      if ((const char *)v55 == v20
        && (*(char *)(a2 + 282) & 0x80000000) == 0
        && !*(_BYTE *)(a2 + 64)
        && (!a12 || BYTE2(v49)))
      {
        goto LABEL_92;
      }

      if (!v47 || (*(_DWORD *)(a1 + 208) & 0x80000000) == 0 || *(_BYTE *)(a2 + 282)) {
        goto LABEL_60;
      }
      if (v38 == -127) {
        *a13 = 0;
      }
      v47(&v49, &v54, a13);
      int v38 = *a13;
      if (*a13 == 15) {
        goto LABEL_92;
      }
      int v29 = v48;
      if (v38 < 1)
      {
        if (v38 == -127)
        {
          int v42 = 0;
        }

        else
        {
          if (!a12)
          {
LABEL_108:
            *a5 = (const char *)v55;
            *a3 = (uint64_t)v51;
            return;
          }

          if (*(char *)(a2 + 64) <= 0)
          {
            sub_180821C04(a2, 1LL, 0);
            sub_180821C04(a1, 2LL, 0);
            *a5 = (const char *)v55;
            int v43 = v51;
            *a3 = (uint64_t)v51;
            int v38 = *a13;
            goto LABEL_94;
          }

          int v42 = 11;
        }

        *a13 = v42;
        goto LABEL_60;
      }

      if (*(char *)(a2 + 64) > 0)
      {
LABEL_60:
        BOOL v56 = v23;
        sub_18082268C((uint64_t)&v54, a13);
        int v29 = v48;
        unsigned int v40 = v56;
        *char v48 = (uint64_t)v56;
        int v38 = *a13;
        if (*a13 == 15)
        {
          *a13 = 0;
          if (a12) {
            goto LABEL_68;
          }
        }

        else
        {
          int v41 = a12;
          if (v38 > 0) {
            goto LABEL_93;
          }
          if (a12)
          {
LABEL_68:
          }

          else if (v40 == v23)
          {
            goto LABEL_108;
          }
        }
      }

      else
      {
        *char v48 = (uint64_t)v46;
        *int v22 = v46;
      }
    }

    else
    {
      int v39 = sub_1808225DC(a2, (_WORD **)v48, v36, 0LL, a13);
      int v29 = v48;
      if (v39) {
        *a13 = 0;
      }
    }
  }

  *int v22 = (uint64_t *)v50;
LABEL_92:
  int v41 = a12;
LABEL_93:
  *a5 = (const char *)v55;
  int v43 = v51;
  *a3 = (uint64_t)v51;
  if (!v41) {
    return;
  }
LABEL_94:
  if (v38 > 0) {
    return;
  }
  if (v43 == (_BYTE *)a4)
  {
    int v26 = -124;
    goto LABEL_22;
  }

  *int v43 = 0;
  if (*a13 == -124) {
    *a13 = 0;
  }
}

uint64_t ucnv_convert( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, int a4, char *a5, signed int a6, UErrorCode *a7)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (a4 < 0 || !a5 || a6 < -1 || !a3 && a4)
  {
    uint64_t v8 = 0LL;
    *a7 = U_ILLEGAL_ARGUMENT_ERROR;
    return v8;
  }

  if (a6 && ((a6 & 0x80000000) == 0 || *a5))
  {
    memset(v20, 0, sizeof(v20));
    memset(v19, 0, sizeof(v19));
    Converte__int16 r = ucnv_createConverter(v20, a2, a7);
    if (*(int *)a7 <= 0)
    {
      unsigned int v16 = Converter;
      unint64_t v17 = ucnv_createConverter(v19, a1, a7);
      if (*(int *)a7 < 1)
      {
        int v18 = v17;
        uint64_t v8 = sub_1808236E4((uint64_t)v17, (uint64_t)v16, a3, a4, a5, a6, (int *)a7);
        ucnv_close(v16);
        ucnv_close(v18);
        return v8;
      }

      ucnv_close(v16);
    }

    return 0LL;
  }

  return u_terminateChars(a3, a4, 0LL, (int *)a7);
}

uint64_t sub_1808236E4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char *__s, unsigned int a6, int *a7)
{
  v23[0] = *MEMORY[0x1895F89C0];
  int v20 = __s;
  if ((a6 & 0x80000000) == 0)
  {
    size_t v13 = a6;
    if (a6) {
      goto LABEL_3;
    }
    return u_terminateChars(a3, a4, 0LL, a7);
  }

  size_t v13 = strlen(__s);
  if (!v13) {
    return u_terminateChars(a3, a4, 0LL, a7);
  }
LABEL_3:
  int v14 = &__s[v13];
  bzero(v22, 0x800uLL);
  int v18 = v22;
  unint64_t v19 = v22;
  unint64_t v17 = (_BYTE *)a3;
  if (a4 < 1)
  {
    uint64_t v15 = 0LL;
    if (!a4) {
      goto LABEL_9;
    }
  }

  else
  {
    ucnv_convertEx(a1, a2, (uint64_t *)&v17, a3 + a4, &v20, v14, v22, &v19, (uint64_t *)&v18, v23, 0, 1, a7);
    uint64_t v15 = ((_DWORD)v17 - a3);
  }

  if (*a7 == 15)
  {
LABEL_9:
    bzero(v21, 0x400uLL);
    do
    {
      *a7 = 0;
      unint64_t v17 = v21;
      ucnv_convertEx( a1,  a2,  (uint64_t *)&v17,  (unint64_t)v22,  &v20,  v14,  v22,  &v19,  (uint64_t *)&v18,  v23,  0,  1,  a7);
      uint64_t v15 = v15 + (_DWORD)v17 - v21;
    }

    while (*a7 == 15);
    return u_terminateChars(a3, a4, v15, a7);
  }

  return v15;
}

uint64_t ucnv_toAlgorithmic( unsigned int a1, uint64_t a2, uint64_t a3, int a4, char *a5, signed int a6, int *a7)
{
  return sub_18082390C(1, a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_18082390C( int a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5, char *a6, signed int a7, int *a8)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (!a8 || *a8 > 0) {
    return 0LL;
  }
  if (a5 < 0 || !a3 || !a6 || a7 < -1 || !a4 && a5)
  {
    uint64_t v9 = 0LL;
    *a8 = 1;
    return v9;
  }

  if (a7 && ((a7 & 0x80000000) == 0 || *a6))
  {
    memset(v23, 0, sizeof(v23));
    unint64_t v17 = sub_180828458(v23, a2, (uint64_t)"", 0, a8);
    uint64_t v9 = 0LL;
    if (*a8 <= 0)
    {
      int v18 = v17;
      BOOL v19 = a1 == 0;
      if (a1) {
        uint64_t v20 = 1LL;
      }
      else {
        uint64_t v20 = 2LL;
      }
      if (a1) {
        uint64_t v21 = (uint64_t)v17;
      }
      else {
        uint64_t v21 = a3;
      }
      if (v19) {
        uint64_t v22 = (uint64_t)v17;
      }
      else {
        uint64_t v22 = a3;
      }
      sub_180821C04(a3, v20, 1);
      uint64_t v9 = sub_1808236E4(v21, v22, a4, a5, a6, a7, a8);
      ucnv_close(v18);
    }

    return v9;
  }

  return u_terminateChars(a4, a5, 0LL, a8);
}

uint64_t ucnv_fromAlgorithmic( uint64_t a1, unsigned int a2, uint64_t a3, int a4, char *a5, signed int a6, int *a7)
{
  if (a2 < 0x22) {
    return sub_18082390C(0, a2, a1, a3, a4, a5, a6, a7);
  }
  *a7 = 1;
  return 0LL;
}

uint64_t ucnv_getType(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 16LL) + 69LL) == 2) {
    return sub_18083AC68(a1);
  }
  else {
    return *(char *)(*(void *)(*(void *)(a1 + 48) + 16LL) + 69LL);
  }
}

uint64_t ucnv_getStarters(uint64_t result, uint64_t a2, int *a3)
{
  if (a3 && *a3 <= 0)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*(void *)(result + 48) + 32LL) + 88LL);
    if (v3) {
      return v3();
    }
    else {
      *a3 = 1;
    }
  }

  return result;
}

char **ucnv_fixFileSeparator(char **result, _WORD *a2, int a3)
{
  if (result)
  {
    uint64_t v3 = a2;
    if (a2)
    {
      if (a3 >= 1)
      {
        uint64_t result = sub_180823BC0(result);
        if (result)
        {
          int v5 = *((unsigned __int16 *)result + 4);
          uint64_t v6 = a3;
          do
          {
            ++v3;
            --v6;
          }

          while (v6);
        }
      }
    }
  }

  return result;
}

char **sub_180823BC0(char **result)
{
  if (!result) {
    return result;
  }
  int v1 = result;
  int v2 = result[6];
  uint64_t v3 = *(uint64_t (**)(char **))(*((void *)v2 + 4) + 96LL);
  if (v3)
  {
    uint64_t v4 = (const char *)v3(result);
    if (v4) {
      goto LABEL_6;
    }
    int v2 = v1[6];
  }

  uint64_t v4 = (const char *)(*((void *)v2 + 2) + 4LL);
LABEL_6:
  uint64_t v5 = 0LL;
  while (strcmp(v4, (&off_189711910)[v5]))
  {
    v5 += 2LL;
    if (v5 == 22) {
      return 0LL;
    }
  }

  return &(&off_189711910)[v5];
}

BOOL ucnv_isAmbiguous(char **a1)
{
  return sub_180823BC0(a1) != 0LL;
}

uint64_t ucnv_setFallback(uint64_t result, char a2)
{
  *(_BYTE *)(result + 63) = a2;
  return result;
}

uint64_t ucnv_usesFallback(uint64_t a1)
{
  return *(char *)(a1 + 63);
}

char *ucnv_getInvalidChars(char *result, void *__dst, _BYTE *a3, int *a4)
{
  if (a4 && *a4 <= 0)
  {
    if (result && __dst && a3)
    {
      int v4 = result[90];
      if ((char)*a3 >= v4)
      {
        *a3 = v4;
        if (v4 >= 1) {
          return (char *)memcpy(__dst, result + 96, v4);
        }
        return result;
      }

      int v5 = 8;
    }

    else
    {
      int v5 = 1;
    }

    *a4 = v5;
  }

  return result;
}

UChar *ucnv_getInvalidUChars(UChar *result, UChar *dest, _BYTE *a3, int *a4)
{
  if (a4 && *a4 <= 0)
  {
    if (result && dest && a3)
    {
      int32_t v4 = *((char *)result + 92);
      if ((char)*a3 >= v4)
      {
        *a3 = v4;
        if (v4 >= 1) {
          return u_memcpy(dest, result + 70, v4);
        }
        return result;
      }

      int v5 = 8;
    }

    else
    {
      int v5 = 1;
    }

    *a4 = v5;
  }

  return result;
}

const char *ucnv_detectUnicodeSignature(char *__s, int a2, int *a3, int *a4)
{
  char v14 = -91;
  int __dst = -1515870811;
  if (!a4 || *a4 > 0) {
    return 0LL;
  }
  if (!__s || a2 <= -2)
  {
    uint64_t result = 0LL;
    *a4 = 1;
    return result;
  }

  if (a2 == -1) {
    a2 = strlen(__s);
  }
  if (a2 <= 0)
  {
    BOOL v10 = 0;
    int v11 = BYTE2(__dst);
    int v8 = 165;
    int v9 = 165;
  }

  else
  {
    int v7 = a2 - 1;
    memcpy(&__dst, __s, (v7 + 1));
    int v8 = __dst;
    int v9 = BYTE1(__dst);
    if (__dst == 254 && BYTE1(__dst) == 255)
    {
      if (a3) {
        *a3 = 2;
      }
      return "UTF-16BE";
    }

    BOOL v10 = BYTE1(__dst) == 254;
    if (__dst == 255 && BYTE1(__dst) == 254)
    {
      if (BYTE2(__dst) | HIBYTE(__dst))
      {
        if (a3) {
          *a3 = 2;
        }
        return "UTF-16LE";
      }

      else
      {
        if (a3) {
          *a3 = 4;
        }
        return "UTF-32LE";
      }
    }

    int v11 = BYTE2(__dst);
    if (__dst == 239 && BYTE1(__dst) == 187 && BYTE2(__dst) == 191)
    {
      if (a3) {
        *a3 = 3;
      }
      return "UTF-8";
    }
  }

  if (!v8 && !v9 && v11 == 254 && HIBYTE(__dst) == 255)
  {
    if (a3) {
      *a3 = 4;
    }
    return "UTF-32BE";
  }

  if (v8 != 14) {
    BOOL v10 = 0;
  }
  if (v10 && v11 == 255)
  {
    if (a3) {
      *a3 = 3;
    }
    return "SCSU";
  }

  if (v8 == 251 && v9 == 238 && v11 == 40)
  {
    if (a3) {
      *a3 = 3;
    }
    return "BOCU-1";
  }

  if (v8 == 43 && v9 == 47 && v11 == 118)
  {
    if (HIBYTE(__dst) == 56 && v14 == 45)
    {
      if (a3)
      {
        int v12 = 5;
LABEL_71:
        *a3 = v12;
        return "UTF-7";
      }

      return "UTF-7";
    }

    if (HIBYTE(__dst) <= 0x39u && ((1LL << SHIBYTE(__dst)) & 0x300880000000000LL) != 0)
    {
      if (a3)
      {
        int v12 = 4;
        goto LABEL_71;
      }

      return "UTF-7";
    }
  }

  else if (v8 == 221 && v9 == 115 && v11 == 102 && HIBYTE(__dst) == 115)
  {
    if (a3) {
      *a3 = 4;
    }
    return "UTF-EBCDIC";
  }

  if (!a3) {
    return 0LL;
  }
  uint64_t result = 0LL;
  *a3 = 0;
  return result;
}

uint64_t ucnv_fromUCountPending(uint64_t a1, int *a2)
{
  if (!a2 || *a2 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a1)
  {
    *a2 = 1;
    return 0xFFFFFFFFLL;
  }

  unsigned int v3 = *(_DWORD *)(a1 + 208);
  if ((v3 & 0x80000000) != 0)
  {
    int v5 = *(char *)(a1 + 281);
    if (v5 < 0) {
      return -v5;
    }
    else {
      return *(_DWORD *)(a1 + 84) > 0;
    }
  }

  else
  {
    if (v3 < 0x10000) {
      int v4 = 1;
    }
    else {
      int v4 = 2;
    }
    return (v4 + *(char *)(a1 + 281));
  }

uint64_t ucnv_toUCountPending(uint64_t a1, int *a2)
{
  if (!a2 || *a2 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a1)
  {
    *a2 = 1;
    return 0xFFFFFFFFLL;
  }

  uint64_t result = *(char *)(a1 + 282);
  if ((int)result <= 0)
  {
    if ((result & 0x80000000) != 0) {
      return -(int)result;
    }
    else {
      return *(char *)(a1 + 64) & ~(*(char *)(a1 + 64) >> 31);
    }
  }

  return result;
}

uint64_t ucnv_isFixedWidth(uint64_t result, int *a2)
{
  if (*a2 > 0) {
    return 0LL;
  }
  if (result)
  {
    unsigned int v2 = *(char *)(*(void *)(*(void *)(result + 48) + 16LL) + 69LL);
    if (v2 == 2) {
      unsigned int v2 = sub_18083AC68(result);
    }
    uint64_t result = 1LL;
    BOOL v3 = v2 > 0x1E;
    int v4 = (1 << v2) & 0x44000183;
    if (v3 || v4 == 0) {
      return 0LL;
    }
  }

  else
  {
    *a2 = 1;
  }

  return result;
}

unint64_t sub_180824120(unint64_t result, unsigned int a2, int a3, int a4)
{
  int v4 = a3 - a4;
  if (a3 < 0) {
    int v4 = -1;
  }
  if (v4)
  {
    if (v4 <= 0)
    {
      if (a2)
      {
        unint64_t v6 = result + 4LL * a2;
        if (v6 <= result + 4) {
          unint64_t v6 = result + 4;
        }
        return (unint64_t)memset((void *)result, 255, ((v6 + ~result) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      }
    }

    else if (a2)
    {
      int v5 = (_DWORD *)(result + 4LL * a2);
      do
      {
        if ((*(_DWORD *)result & 0x80000000) == 0) {
          *(_DWORD *)result += v4;
        }
        result += 4LL;
      }

      while (result < (unint64_t)v5);
    }
  }

  return result;
}

void sub_180824194(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  memset(__dst, 32, 6);
  unint64_t v6 = uprv_malloc(0x98uLL);
  *(void *)(a1 + 16) = v6;
  if (!v6)
  {
    int v14 = 7;
LABEL_16:
    *a3 = v14;
    return;
  }

  int v7 = v6;
  memset(v24, 0, sizeof(v24));
  uint64_t v22 = 0LL;
  memset(v21, 0, sizeof(v21));
  LODWORD(v21[0]) = 40;
  int v8 = *(unsigned __int8 *)(a2 + 8);
  BYTE8(v21[0]) = *(_BYTE *)(a2 + 8);
  *unint64_t v6 = 0u;
  v6[1] = 0u;
  UChar v6[2] = 0u;
  v6[3] = 0u;
  _OWORD v6[4] = 0u;
  v6[5] = 0u;
  v6[6] = 0u;
  v6[7] = 0u;
  __int128 v6[8] = 0u;
  *((void *)v6 + 18) = 0LL;
  *(_DWORD *)(a1 + 80) = 0;
  int v9 = *(const char **)(a2 + 32);
  if (!v9)
  {
    *((_DWORD *)v6 + 27) = *(_DWORD *)(a2 + 12) & 0xF;
    goto LABEL_15;
  }

  strncpy(__dst, v9, 6uLL);
  int v10 = __dst[0];
  unsigned int v11 = *(_DWORD *)(a2 + 12) & 0xF;
  *((_DWORD *)v7 + 27) = v11;
  if (v10 != 107)
  {
    if (v10 == 106)
    {
      if ((__dst[1] == 112 || __dst[1] == 97) && (__dst[2] == 95 || !__dst[2]) && v11 < 5)
      {
        if (v11 > 1)
        {
          *((void *)v7 + 2) = sub_180827C48("ISO8859_7", v24, v21, a3);
          *((void *)v7 + 4) = sub_180827C48("Shift-JIS", v24, v21, a3);
          *((void *)v7 + 5) = sub_180827C48("jisx-212", v24, v21, a3);
          *((void *)v7 + 6) = sub_180827C48("ibm-5478", v24, v21, a3);
          int v12 = "ksc_5601";
          uint64_t v13 = 7LL;
        }

        else
        {
          *((void *)v7 + 4) = sub_180827C48("Shift-JIS", v24, v21, a3);
          if (!v11)
          {
LABEL_39:
            unint64_t v17 = &unk_189711B78;
            *(void *)(a1 + 48) = &unk_189711B78;
            strcpy((char *)v7 + 143, "ja");
            strcpy((char *)v7 + 113, "ISO_2022,locale=ja,version=");
            int v18 = (char *)v7 + strlen((const char *)v7 + 113) + 113;
            *int v18 = *((_BYTE *)v7 + 108) + 48;
            v18[1] = 0;
            goto LABEL_50;
          }

          int v12 = "jisx-212";
          uint64_t v13 = 5LL;
        }

        *((void *)v7 + v13) = sub_180827C48((unsigned __int8 *)v12, v24, v21, a3);
        goto LABEL_39;
      }

      goto LABEL_15;
    }

    if ((v10 == 122 && __dst[1] == 104 || v10 == 99 && __dst[1] == 110) && (__dst[2] == 95 || !__dst[2]) && v11 < 3)
    {
      *((void *)v7 + icu::UVector32::~UVector32(this + 1) = sub_180827C48("ibm-5478", v24, v21, a3);
      if (v11 == 1) {
        *((void *)v7 + 2) = sub_180827C48("iso-ir-165", v24, v21, a3);
      }
      *((void *)v7 + 3) = sub_180827C48("cns-11643-1992", v24, v21, a3);
      *(void *)(a1 + 48) = &unk_189711DC8;
      strcpy((char *)v7 + 143, "cn");
      if (v11)
      {
        if (v11 == 1)
        {
          *((_DWORD *)v7 + 27) = 1;
          unsigned int v16 = "ISO_2022,locale=zh,version=1";
        }

        else
        {
          *((_DWORD *)v7 + 27) = 2;
          unsigned int v16 = "ISO_2022,locale=zh,version=2";
        }

        *(_OWORD *)((char *)v7 + 113) = *(_OWORD *)v16;
        *(_OWORD *)((char *)v7 + 126) = *(_OWORD *)(v16 + 13);
      }

      else
      {
        *((_DWORD *)v7 + 27) = 0;
        strcpy((char *)v7 + 113, "ISO_2022,locale=zh,version=0");
      }

      unint64_t v17 = &unk_189711DC8;
      goto LABEL_50;
    }

void sub_18082469C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    for (uint64_t i = 0LL; i != 80; i += 8LL)
    {
      uint64_t v4 = *(void *)(v1 + i);
      if (v4) {
        sub_180827BA4(v4);
      }
    }

    ucnv_close(*(void **)(v1 + 80));
    if (!*(_BYTE *)(a1 + 62))
    {
      uprv_free(*(void **)(a1 + 16));
      *(void *)(a1 + 16) = 0LL;
    }
  }

double sub_180824700(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (a2 > 1)
  {
    *(_WORD *)(v2 + 102) = 0;
    *(_DWORD *)(v2 + 98) = 0;
    if (*(_BYTE *)(v2 + 143) != 107) {
      return result;
    }
  }

  else
  {
    *(_WORD *)(v2 + 96) = 0;
    *(_DWORD *)(v2 + 92) = 0;
    *(_DWORD *)(v2 + 104) = 0;
    *(_BYTE *)(v2 + 112) = 0;
    if (a2 == 1)
    {
      if (*(_BYTE *)(v2 + 143) == 107 && *(_DWORD *)(v2 + 108) == 1)
      {
        uint64_t v3 = *(void *)(v2 + 80);
        *(void *)(v3 + 72) = 0LL;
        *(_BYTE *)(v3 + 64) = 0;
      }

      return result;
    }

    *(_WORD *)(v2 + 102) = 0;
    *(_DWORD *)(v2 + 98) = 0;
    if (*(_BYTE *)(v2 + 143) != 107) {
      return result;
    }
    if (*(_DWORD *)(v2 + 108) == 1)
    {
      uint64_t v4 = *(void *)(v2 + 80);
      *(void *)(v4 + 72) = 0LL;
      *(_BYTE *)(v4 + 64) = 0;
    }
  }

  if (!*(_BYTE *)(a1 + 91))
  {
    *(_BYTE *)(a1 + 9icu::UVector32::~UVector32(this + 1) = 4;
    *(void *)&double result = 1126769691LL;
    *(_DWORD *)(a1 + 104) = 1126769691;
  }

  if (*(_DWORD *)(v2 + 108) == 1)
  {
    *(void *)&double result = 1LL;
    *(void *)(*(void *)(v2 + 80) + 80LL) = 1LL;
  }

  return result;
}

uint64_t sub_1808247CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    return v1 + 113;
  }
  else {
    return 0LL;
  }
}

void *sub_1808247E0(void *a1, int a2, int *a3)
{
  v20[1] = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1[1];
  uint64_t v6 = *(void *)(v5 + 16);
  v20[0] = 0LL;
  int v7 = *(char **)(v5 + 40);
  int v8 = *(char *)(v6 + 143);
  if (v8 == 99)
  {
    int v9 = (char *)v20;
    if (!*(_BYTE *)(v6 + 102)) {
      goto LABEL_14;
    }
    *(_BYTE *)(v6 + 102) = 0;
LABEL_13:
    int v9 = (char *)v20 + 1;
    LOBYTE(v20[0]) = 15;
    goto LABEL_14;
  }

  if (v8 != 107)
  {
    if (v8 != 106)
    {
      int v9 = (char *)v20;
      return ucnv_cbFromUWriteBytes(a1, (char *)v20, v9 - v20, a2, a3);
    }

    int v9 = (char *)v20;
    if (*(_BYTE *)(v6 + 102) == 1)
    {
      *(_BYTE *)(v6 + 102) = 0;
      int v9 = (char *)v20 + 1;
      LOBYTE(v20[0]) = 15;
    }

    if (*(_BYTE *)(v6 + 98)) {
      BOOL v10 = *(_BYTE *)(v6 + 98) == 3;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      *(_BYTE *)(v6 + 98) = 0;
      *int v9 = 27;
      *(_WORD *)(v9 + icu::UVector32::~UVector32(this + 1) = 16936;
      v9 += 3;
    }

uint64_t sub_1808249E4(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  if (*a4 > 0) {
    return 0LL;
  }
  if (!*a3)
  {
    uint64_t v4 = 0LL;
    *a3 = 728;
    return v4;
  }

  uint64_t v4 = a2;
  int v18 = 0;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v6 + 144);
  __int128 v8 = *(_OWORD *)(v6 + 96);
  __int128 v9 = *(_OWORD *)(v6 + 128);
  *(_OWORD *)(a2 + 688) = *(_OWORD *)(v6 + 112);
  *(_OWORD *)(a2 + 704) = v9;
  *(_OWORD *)(a2 + 672) = v8;
  *(void *)(a2 + 720) = v7;
  __int128 v10 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)(a2 + 576) = *(_OWORD *)v6;
  *(_OWORD *)(a2 + 592) = v10;
  __int128 v11 = *(_OWORD *)(v6 + 32);
  __int128 v12 = *(_OWORD *)(v6 + 48);
  __int128 v13 = *(_OWORD *)(v6 + 80);
  *(_OWORD *)(a2 + 640) = *(_OWORD *)(v6 + 64);
  *(_OWORD *)(a2 + 656) = v13;
  *(_OWORD *)(a2 + 608) = v11;
  *(_OWORD *)(a2 + 624) = v12;
  *(void *)(a2 + 16) = a2 + 576;
  *(_BYTE *)(a2 + 62) = 1;
  char v14 = *(void (***)(void, void, void, void, void, void, void))(v6 + 80);
  if (v14)
  {
    int v18 = 288;
    *(void *)(a2 + 656) = ucnv_safeClone(v14, a2 + 288, &v18, a4);
    if (*a4 > 0) {
      return 0LL;
    }
  }

  for (uint64_t i = 0LL; i != 80; i += 8LL)
  {
    uint64_t v17 = *(void *)(v6 + i);
    if (v17) {
      sub_180827BF4(v17);
    }
  }

  return v4;
}

uint64_t sub_180824AD4(uint64_t result, uint64_t *a2, uint64_t a3, int *a4)
{
  if (*a4 > 0) {
    return result;
  }
  uint64_t v7 = *(void *)(result + 16);
  int v8 = *(char *)(v7 + 143);
  if (v8 <= 106)
  {
    if (v8 != 99)
    {
      if (v8 == 106)
      {
        ((void (*)(uint64_t, uint64_t))a2[1])(*a2, 165LL);
        ((void (*)(uint64_t, uint64_t))a2[1])(*a2, 8254LL);
        uint64_t v9 = *(_DWORD *)(v7 + 108) >= 2u ? 255LL : 127LL;
        ((void (*)(uint64_t, void, uint64_t))a2[2])(*a2, 0LL, v9);
        int v10 = *(_DWORD *)(v7 + 108);
        BOOL v11 = v10 == 3 || (_DWORD)a3 == 1;
        if (v11 || v10 == 4) {
          ((void (*)(uint64_t, uint64_t, uint64_t))a2[2])(*a2, 65377LL, 65439LL);
        }
      }

      goto LABEL_21;
    }

uint64_t sub_180824CAC(void *a1, int *a2)
{
  __int16 v46 = 0;
  uint64_t v6 = a1 + 1;
  uint64_t result = a1[1];
  uint64_t v5 = (unsigned __int8 *)v6[1];
  unsigned int v45 = v5;
  unint64_t v7 = a1[3];
  int v8 = (_WORD *)a1[4];
  uint64_t v9 = *(void *)(result + 16);
  int v10 = (_BYTE *)(v9 + 92);
  if (!*(_DWORD *)(v9 + 104))
  {
    BOOL v13 = *(_BYTE *)(result + 64) != 1 || (unint64_t)v5 >= v7;
    int v14 = *(unsigned __int8 *)(result + 65);
    *(_BYTE *)(result + 64) = 0;
    int v15 = (char)v10[*(char *)(v9 + 96)];
    goto LABEL_66;
  }

LABEL_66:
          unsigned int v25 = *v5;
          LODWORD(v20) = v25 | (v14 << 8);
          if ((((_BYTE)v14 - 33) & 0xFEu) > 0x5D || (v25 - 33) > 0x5Du)
          {
            uint64_t result = 0xFFFFLL;
            if ((v25 - 33) >= 0x5Eu
              && (v25 <= 0x1F ? (BOOL v34 = ((1 << v25) & 0x800C000) == 0) : (BOOL v34 = 1), v34))
            {
              unsigned int v45 = ++v5;
              LODWORD(v20) = v20 + 0x10000;
            }

            else
            {
              LODWORD(v20) = v14;
            }

            goto LABEL_91;
          }

          unsigned int v45 = ++v5;
          if (v15 == 7)
          {
            unsigned int v26 = v20 + 32896;
          }

          else
          {
            unsigned int v26 = v25 | (v14 << 8);
            if (v15 == 4)
            {
              if (v25 < 0x60) {
                char v27 = 31;
              }
              else {
                char v27 = 32;
              }
              if ((v14 & 1) == 0) {
                char v27 = 126;
              }
              unsigned __int8 v28 = (v14 & 1) + v14;
              unsigned int v29 = v28;
              int v30 = (char)v28;
              char v31 = v25 + v27;
              v28 >>= 1;
              char v32 = v28 + 112;
              char v33 = v28 - 80;
              if (v30 < 0) {
                char v33 = 0;
              }
              if (v29 < 0x60) {
                char v33 = v32;
              }
              LOBYTE(v46) = v33;
              HIBYTE(v46) = v31;
              goto LABEL_90;
            }
          }

          __int16 v46 = bswap32(v26) >> 16;
LABEL_90:
          uint64_t result = sub_18083932C(*(void *)(v9 + 8LL * v15), (uint64_t)&v46, 2);
          goto LABEL_91;
        }

        unsigned int v45 = v5;
        uint64_t result = a1[1];
        goto LABEL_2;
    }
  }

        *a5 = 19;
LABEL_67:
        *((_DWORD *)v7 + 7icu::UVector32::~UVector32(this + 1) = 0;
        return result;
      }

      goto LABEL_50;
    }

    goto LABEL_57;
  }

  if (v14 != 48) {
    goto LABEL_66;
  }
LABEL_59:
  unsigned int v29 = *a5;
  if (*a5 <= 0)
  {
    *((_BYTE *)v7 + 64) = 0;
    return result;
  }

  if (v29 == 18) {
    goto LABEL_18;
  }
  if (v29 == 19) {
    goto LABEL_67;
  }
  return result;
}

unint64_t sub_180825274(unint64_t result, int *a2)
{
  uint64_t v2 = 0LL;
  uint64_t v3 = 0LL;
  v119[1] = *MEMORY[0x1895F89C0];
  uint64_t v5 = *(unsigned __int16 **)(result + 16);
  unint64_t v6 = *(void *)(result + 24);
  unint64_t v7 = *(_WORD **)(result + 32);
  unint64_t v8 = *(void *)(result + 40);
  uint64_t v97 = *(void *)(result + 8);
  uint64_t v4 = v97;
  unint64_t v98 = result;
  __int128 v115 = *(_DWORD **)(result + 48);
  v119[0] = 0LL;
  __int16 v118 = 0;
  uint64_t v117 = 0LL;
  uint64_t v114 = *(void *)(v97 + 16);
  uint64_t v9 = (_BYTE *)(v114 + 98);
  LODWORD(v10) = *(_DWORD *)(v97 + 84);
  unint64_t v100 = v6;
  unint64_t v101 = v8;
  if ((_DWORD)v10) {
    BOOL v11 = (unint64_t)v7 >= v8;
  }
  else {
    BOOL v11 = 1;
  }
  __int16 v99 = (_BYTE *)(v114 + 98);
  if (v11) {
    goto LABEL_6;
  }
LABEL_10:
  if ((unint64_t)v5 >= v100)
  {
    *(_DWORD *)(v4 + 84) = v10;
LABEL_143:
    if (*a2 <= 0
      && (*(_BYTE *)(v114 + 102) || *v9)
      && *(_BYTE *)(v98 + 2)
      && (unint64_t)v5 >= v100
      && !*(_DWORD *)(v4 + 84))
    {
      if (*(_BYTE *)(v114 + 102))
      {
        LOBYTE(v119[0]) = 15;
        *(_BYTE *)(v114 + 102) = 0;
        unsigned int v69 = 1;
      }

      else
      {
        unsigned int v69 = 0;
      }

      if (*v9)
      {
        unint64_t v89 = (unint64_t)v119 | v69;
        *(_BYTE *)(v89 + 2) = 66;
        *(_WORD *)unint64_t v89 = 10267;
        v69 += 3;
        *uint64_t v9 = 0;
      }

      uint64_t v90 = *(void *)(v98 + 16);
      unint64_t v91 = ((unint64_t)v5 - v90) >> 1;
      unsigned int v92 = v91 - 1;
      if ((int)v91 < 1)
      {
        unsigned int v92 = -1;
      }

      else if ((*(_WORD *)(v90 + 2LL * v92) & 0xFC00) == 0xDC00 {
             && ((_DWORD)v91 == 1 || (*(_WORD *)(v90 + 2LL * (v91 - 2)) & 0xFC00) == 0xD800))
      }
      {
        unsigned int v92 = v91 - 2;
      }

      __int128 v116 = v7;
      uint64_t result = sub_180829514(v4, (char *)v119, v69, &v116, v101, &v115, v92, a2);
      unint64_t v7 = v116;
    }

    goto LABEL_187;
  }

  int v13 = *v5;
  if ((v13 & 0xFC00) != 0xDC00)
  {
LABEL_135:
    *a2 = 12;
    *(_DWORD *)(v4 + 84) = v10;
    goto LABEL_187;
  }

  ++v5;
  uint64_t v10 = (v13 + ((_DWORD)v10 << 10) - 56613888);
  *(_DWORD *)(v4 + 84) = 0;
LABEL_13:
  __int16 v104 = v7;
  if (!(_DWORD)v2)
  {
    unsigned int v15 = 0;
    uint64_t v16 = *(unsigned int *)(v114 + 108);
    int v17 = word_180A249B4[v16];
    if ((v16 - 3) <= 1)
    {
      LOBYTE(v117) = 8;
      unsigned int v15 = 1;
    }

    char v18 = *(_BYTE *)(v114 + 98);
    uint64_t v2 = v15 + 1LL;
    *(_BYTE *)((unint64_t)&v117 | v15) = v18;
    unsigned int v19 = v17 & ~(1 << v18) & 0xFFFFFEFF;
    char v20 = *(_BYTE *)(v114 + 100);
    if (v20)
    {
      *(_BYTE *)((unint64_t)&v117 | v2) = v20;
      v19 &= (unsigned __int16)~(unsigned __int16)(1 << v20);
      uint64_t v2 = v15 | 2;
    }

    for (uint64_t i = 0LL; i != 9; ++i)
    {
      int v22 = dword_180A24D2C[i];
      if (((1 << v22) & v19) != 0)
      {
        *((_BYTE *)&v117 + (int)v2) = v22;
        v19 &= (unsigned __int16)~(unsigned __int16)(1 << v22);
        uint64_t v2 = (v2 + 1);
      }
    }
  }

  int v103 = v5;
  uint64_t v23 = 0LL;
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  int v26 = 0;
  int v27 = *(unsigned __int8 *)(v4 + 63);
  uint64_t v28 = (uint64_t)(int)v10 >> 10;
  unsigned int v29 = (v10 >> 4) & 0x3F;
  uint64_t v30 = v10 & 0xF;
  int v31 = 1 << (v10 & 0xF | 0x10);
  unsigned int v105 = v10 - 57344;
  unsigned int v102 = v10 - 983040;
  uint64_t v32 = (v10 - 65377);
  unsigned int v95 = v10 - 65216;
  unsigned int v94 = v10 - 65344;
  uint64_t v33 = (v10 - 160);
  unsigned int v96 = v10 - 128;
  unint64_t v34 = v2;
  uint64_t v109 = v2;
  int v108 = v31;
  uint64_t v106 = v10;
  uint64_t v107 = v32;
  while (2)
  {
    LODWORD(v116) = 0;
    uint64_t v35 = *((unsigned __int8 *)&v117 + v23);
    uint64_t v36 = *((char *)&v117 + v23);
    switch(*((_BYTE *)&v117 + v23))
    {
      case 0:
        LODWORD(v24) = 0;
        uint64_t v3 = v10;
        goto LABEL_141;
      case 1:
        LODWORD(v24) = 2;
        uint64_t v5 = v103;
        uint64_t v4 = v97;
        uint64_t v9 = (_BYTE *)(v114 + 98);
        uint64_t v3 = v96;
        goto LABEL_153;
      case 2:
        uint64_t v37 = *(void *)(v114 + 8 * v36);
        unsigned int v38 = *(unsigned __int16 *)(*(void *)(v37 + 232)
                                  + 2LL
                                  * (v30
                                   + *(unsigned __int16 *)(*(void *)(v37 + 88)
                                                         + 2LL
                                                         * (v29 + *(unsigned __int16 *)(*(void *)(v37 + 88) + 2 * v28)))));
        if (v38 <= 0xEFF)
        {
          if ((_BYTE)v27)
          {
            if (v38 <= 0x7FF) {
              goto LABEL_128;
            }
          }

          else if (v38 < 0xC00)
          {
            int v27 = 0;
            goto LABEL_128;
          }

          int v39 = -1;
        }

        else
        {
          int v39 = 1;
        }

        if (v26) {
          BOOL v64 = v38 > 0xEFF;
        }
        else {
          BOOL v64 = 1;
        }
        if (v64 && v38 >= 0xA0u)
        {
          int v27 = 0;
          uint64_t v3 = v38 - 128;
          uint64_t v24 = 2LL;
          goto LABEL_126;
        }

        goto LABEL_128;
      case 3:
        if (v10 > 0x7F)
        {
          if ((_DWORD)v10 == 165)
          {
            uint64_t v3 = 92LL;
            goto LABEL_151;
          }

          if ((_DWORD)v10 == 8254)
          {
            LODWORD(v24) = 0;
            uint64_t v3 = 126LL;
            goto LABEL_141;
          }
        }

        else if ((_DWORD)v10 != 92 && (_DWORD)v10 != 126)
        {
          uint64_t v3 = v10;
LABEL_151:
          uint64_t v5 = v103;
          LODWORD(v24) = 0;
          goto LABEL_152;
        }

        goto LABEL_128;
      case 4:
        uint64_t v41 = *(void *)(v114 + 8 * v36);
        unsigned int v42 = *(unsigned __int16 *)(*(void *)(v41 + 232)
                                  + 2
                                  * (v30 & 0xFFF0000F | (16
                                                       * (unsigned __int16)*(_DWORD *)(*(void *)(v41 + 88) + 4LL * (v29 + *(unsigned __int16 *)(*(void *)(v41 + 88) + 2 * v28))))));
        if (v42 >= 0x100) {
          uint64_t result = 4294967294LL;
        }
        else {
          uint64_t result = 0xFFFFFFFFLL;
        }
        if ((*(_DWORD *)(*(void *)(v41 + 88) + 4LL * (v29 + *(unsigned __int16 *)(*(void *)(v41 + 88) + 2 * v28))) & v31) != 0)
        {
          if (v42 < 0x100) {
            goto LABEL_76;
          }
          int v39 = 2;
LABEL_115:
          if (v42 > 0xEFFC) {
            goto LABEL_128;
          }
          int v27 = 0;
          uint64_t v24 = 0LL;
          if ((v42 & 0xFF00) >= 0x9F01) {
            int v65 = -45056;
          }
          else {
            int v65 = -28672;
          }
          int v66 = 2 * (v65 + (v42 & 0xFF00));
          else {
            int v67 = -31;
          }
          if (v42 >= 0x9Fu)
          {
            int v68 = -126;
          }

          else
          {
            v66 -= 256;
            int v68 = v67;
          }

          uint64_t v3 = v66 | (v68 + v42);
LABEL_126:
          int v26 = v39;
LABEL_127:
          uint64_t v25 = v35;
          goto LABEL_128;
        }

        if (((_BYTE)v27 || v105 >> 8 < 0x19 || !(v102 >> 17))
          && *(_WORD *)(*(void *)(v41 + 232)
                      + 2
                      * (v30 & 0xFFF0000F | (16
                                           * (unsigned __int16)*(_DWORD *)(*(void *)(v41 + 88)
                                                                                       + 4LL
                                                                                       * (v29
                                                                                        + *(unsigned __int16 *)(*(void *)(v41 + 88) + 2 * v28)))))))
        {
          LODWORD(v116) = *(unsigned __int16 *)(*(void *)(v41 + 232)
                                              + 2
                                              * (v30 & 0xFFF0000F | (16
                                                                   * (unsigned __int16)*(_DWORD *)(*(void *)(v41 + 88) + 4LL * (v29 + *(unsigned __int16 *)(*(void *)(v41 + 88) + 2 * v28))))));
        }

        else
        {
LABEL_73:
          uint64_t result = *(void *)(v41 + 288);
          if (!result)
          {
LABEL_76:
            BOOL v52 = v26 == 0;
LABEL_89:
            if (v52 && (_BYTE)v27)
            {
              if (v32 <= 0x3E)
              {
                int v27 = 0;
                uint64_t v24 = 0LL;
                uint64_t v3 = word_180A24D50[v32];
                int v26 = -2;
                goto LABEL_127;
              }

              int v26 = 0;
            }

            goto LABEL_128;
          }

          unsigned int v110 = *((unsigned __int8 *)&v117 + v23);
          int v112 = v27;
          int v45 = v10;
          uint64_t v46 = v3;
          uint64_t v47 = v24;
          uint64_t v48 = v25;
          uint64_t v49 = v30;
          uint64_t v50 = v33;
          unint64_t v51 = v34;
          uint64_t result = sub_18082BD0C(result, v45, (int *)&v116, (char)v27);
          unint64_t v34 = v51;
          uint64_t v35 = v110;
          int v27 = v112;
          uint64_t v33 = v50;
          int v31 = v108;
          uint64_t v30 = v49;
          uint64_t v10 = v106;
          uint64_t v32 = v107;
          uint64_t v25 = v48;
          uint64_t v24 = v47;
          uint64_t v2 = v109;
          uint64_t v3 = v46;
          if ((_DWORD)result == 2)
          {
            int v39 = 2;
LABEL_114:
            unsigned int v42 = v116;
            goto LABEL_115;
          }
        }

        BOOL v52 = v26 == 0;
        if ((_DWORD)result != -2 || v26 != 0) {
          goto LABEL_89;
        }
        int v39 = -2;
        goto LABEL_114;
      case 8:
        int v40 = *(_DWORD *)(v114 + 108);
        if (v40 != 4)
        {
          if (v40 == 3)
          {
            *(_BYTE *)(v114 + 99) = v35;
            LODWORD(v24) = 1;
            uint64_t v3 = v94;
LABEL_141:
            uint64_t v5 = v103;
LABEL_152:
            uint64_t v4 = v97;
            uint64_t v9 = (_BYTE *)(v114 + 98);
            goto LABEL_153;
          }

LABEL_128:
          if (++v23 >= v34 || v26 >= 1)
          {
            uint64_t v5 = v103;
            uint64_t v4 = v97;
            uint64_t v9 = (_BYTE *)(v114 + 98);
            if (v26) {
              goto LABEL_154;
            }
LABEL_134:
            *a2 = 10;
            *(_DWORD *)(v4 + 84) = v10;
            unint64_t v7 = v104;
            goto LABEL_187;
          }

          continue;
        }

        LODWORD(v24) = 0;
        uint64_t v9 = (_BYTE *)(v114 + 98);
        if ((*v99 & 0xFC) == 4) {
          LOBYTE(v35) = 3;
        }
        else {
          LOBYTE(v35) = *v99;
        }
        uint64_t v3 = v95;
        uint64_t v5 = v103;
        uint64_t v4 = v97;
LABEL_153:
        int v26 = 1;
        LOBYTE(v25) = v35;
LABEL_154:
        int v70 = 0;
        if (v26 < 0) {
          int v26 = -v26;
        }
        int v71 = *(unsigned __int8 *)(v114 + 102);
        if (v71 == 1 && !(_DWORD)v24)
        {
          LOBYTE(v7icu::UVector32::~UVector32(this + 1) = 0;
          LOBYTE(v119[0]) = 15;
          *(_BYTE *)(v114 + 102) = 0;
          int v70 = 1;
        }

        if (v9[v24] != v25)
        {
          int v72 = byte_180A24DCE[(char)v25];
          uint64_t v73 = v24;
          uint64_t v74 = v3;
          int v75 = v24;
          uint64_t v76 = v4;
          char v77 = v25;
          uint64_t result = (unint64_t)memcpy( (void *)((unint64_t)v119 | v70),  (char *)&unk_180A24DD7 + 6 * (char)v25,  byte_180A24DCE[(char)v25]);
          LODWORD(v24) = v75;
          uint64_t v3 = v74;
          uint64_t v2 = 0LL;
          v70 += v72;
          uint64_t v9 = (_BYTE *)(v114 + 98);
          v99[v73] = v77;
          uint64_t v4 = v76;
          LOBYTE(v7icu::UVector32::~UVector32(this + 1) = *(_BYTE *)(v114 + 102);
        }

        if ((_DWORD)v24 != (char)v71)
        {
          uint64_t v78 = v70 + 1LL;
          if ((_DWORD)v24 == 1)
          {
            *((_BYTE *)v119 + v70) = 14;
            *(_BYTE *)(v114 + 102) = 1;
            ++v70;
          }

          else
          {
            *((_BYTE *)v119 + v70) = 27;
            v70 += 2;
            *((_BYTE *)v119 + v78) = 78;
          }
        }

        int v79 = 1;
        int v80 = v70;
        if (v26 != 1)
        {
          int v80 = v70 + 1;
          *((_BYTE *)v119 + v70) = BYTE1(v3);
          int v79 = 2;
        }

        int v81 = v70 + v79;
        *((_BYTE *)v119 + v80) = v3;
        if ((_DWORD)v10 == 13 || (_DWORD)v10 == 10)
        {
          uint64_t v2 = 0LL;
          *(_BYTE *)(v114 + 100) = 0;
        }

        if (v81 == 2)
        {
          *__int16 v104 = v119[0];
          uint64_t v86 = v115;
          if (v115)
          {
            else {
              int v87 = -1;
            }
            int v88 = (((unint64_t)v5 - *(void *)(v98 + 16)) >> 1) + v87;
            *__int128 v115 = v88;
            __int128 v115 = v86 + 2;
            v86[1] = v88;
          }

          unint64_t v7 = v104 + 1;
LABEL_6:
          if ((unint64_t)v7 >= v101)
          {
            *a2 = 15;
            goto LABEL_187;
          }

          unsigned int v12 = *v5++;
          uint64_t v10 = v12;
          if ((v12 & 0xF800) == 0xD800)
          {
            if ((v10 & 0x400) == 0) {
              goto LABEL_10;
            }
            goto LABEL_135;
          }

          goto LABEL_13;
        }

        if (v81 == 1)
        {
          *(_BYTE *)__int16 v104 = v119[0];
          unint64_t v7 = (_WORD *)((char *)v104 + 1);
          uint64_t v82 = v115;
          if (v115)
          {
            *__int128 v115 = (((unint64_t)v5 - *(void *)(v98 + 16)) >> 1) - 1;
            __int128 v115 = v82 + 1;
          }

          goto LABEL_6;
        }

    if (v24) {
      ures_close(v24);
    }
    if (v68) {
      ures_close(v68);
    }
    if (v69) {
      ures_close(v69);
    }
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v80);
  }

  while (!v25);
  if (v12) {
    ures_close(v12);
  }
LABEL_143:
  if (v5) {
    ures_close(v5);
  }
  if (v4) {
    ures_close(v4);
  }
LABEL_147:
  if (v3) {
    ures_close(v3);
  }
  if (v2) {
    ures_close(v2);
  }
  if (v1) {
    ures_close(v1);
  }
  dword_18C4491DC = v70;
  icu::umtx_initImplPostInit(&dword_18C4491D8);
  return v70 < U_ILLEGAL_ARGUMENT_ERROR;
}

          BOOL v64 = v57;
          if ((a5 & 4) == 0)
          {
            LODWORD(v65) = 0;
            int v66 = (int)v57 > 0;
            if ((int)v57 >= 1 && *v41 == 32)
            {
              int v65 = 0LL;
              do
              {
                int v67 = v41[++v65];
                int v66 = (int)v57 > (int)v65;
              }

              while (v67 == 32 && (int)v57 > (int)v65);
            }

            if (v66)
            {
              unsigned int v69 = &v41[(int)v57 - 1];
              int v66 = -1;
              do
              {
                int v70 = *v69--;
                ++v66;
              }

              while (v70 == 32);
            }

            LODWORD(v7icu::UVector32::~UVector32(this + 1) = v57 + ~v66;
            if ((int)v71 > (int)v65)
            {
              int v71 = (int)v71;
              int v65 = (int)v65;
              do
              {
                int v72 = v41[v65];
                v41[v65] = v41[v71];
                v41[v71] = v72;
                ++v65;
                --v71;
              }

              while (v65 < v71);
            }
          }

          uint64_t v73 = uprv_min(v57, a4);
          u_memcpy(dest, v41, v73);
          if (v41 != desta) {
            uprv_free(v41);
          }
          unsigned int v29 = v64;
          if ((int)v64 > a4)
          {
            uint64_t v30 = 15;
            goto LABEL_147;
          }

          char v18 = v87;
LABEL_150:
          if (v18)
          {
            if ((a5 & 0x300) == 0x100) {
              uint64_t v74 = 1776;
            }
            else {
              uint64_t v74 = 0;
            }
            if ((a5 & 0x300) != 0) {
              int v75 = v74;
            }
            else {
              int v75 = 1632;
            }
            uint64_t v76 = 0;
            switch((v18 - 32) >> 5)
            {
              case 0u:
                if ((int)v29 >= 1)
                {
                  char v77 = v29;
                  uint64_t v78 = dest;
                  do
                  {
                    int v79 = *v78;
                    ++v78;
                    --v77;
                  }

                  while (v77);
                }

                break;
              case 1u:
                if ((int)v29 >= 1)
                {
                  int v80 = v29;
                  int v81 = dest;
                  do
                  {
                    uint64_t v82 = *v81;
                    ++v81;
                    --v80;
                  }

                  while (v80);
                }

                break;
              case 2u:
                goto LABEL_171;
              case 3u:
                uint64_t v76 = 1;
LABEL_171:
                unint64_t v83 = (a5 & 4) == 0;
                int v84 = v29;
                sub_18087921C((uint64_t)dest, v29, v75, v83, v76);
                unsigned int v29 = v84;
                break;
              default:
                return u_terminateUChars((uint64_t)dest, a4, v29, a6);
            }
          }

          return u_terminateUChars((uint64_t)dest, a4, v29, a6);
        }

        v101[0] = v88;
        v101[1] = 0;
        unsigned int v102 = v51;
        int v103 = v52;
        __int16 v104 = v53;
        unsigned int v105 = v54;
        uint64_t v106 = v55;
        uint64_t v58 = (__int128 *)v101;
        unint64_t v59 = v41;
        int v60 = v7;
        unsigned int v61 = a5;
        uint64_t v62 = a6;
        uint64_t v63 = 0;
LABEL_127:
        uint64_t v57 = sub_18087884C(v59, v60, v61, v62, v63, v58);
        goto LABEL_128;
      }

      if (v7 <= a4)
      {
        u_memcpy(dest, (const UChar *)v8, v7);
        unsigned int v29 = v7;
        goto LABEL_150;
      }

      unsigned int v19 = 15;
LABEL_28:
      *a6 = v19;
      return v7;
    }

                    *a3 = 9;
                    goto LABEL_133;
                  }
                }

                isWhiteSpace = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v30);
                if ((v30 & 0xFFFFFFFD) != 0x2C && !isWhiteSpace) {
                  goto LABEL_98;
                }
LABEL_96:
                if (v19 == ++v44) {
                  goto LABEL_132;
                }
                continue;
              }
            }

            LODWORD(v19) = v26;
LABEL_65:
            if ((_DWORD)v30 != 62) {
              goto LABEL_112;
            }
            unint64_t v34 = (unsigned __int16)v61;
            uint64_t v36 = (unint64_t)(unsigned __int16)v61 >> 5;
            uint64_t v37 = DWORD1(v61);
            unsigned int v38 = (char *)&v61 + 2;
            if ((v61 & 2) == 0) {
              unsigned int v38 = (char *)v62;
            }
            int v39 = (int)v19;
            if ((v61 & 0x8000) != 0) {
              goto LABEL_71;
            }
LABEL_69:
            int v40 = v36;
            if (v39 >= v36) {
              goto LABEL_112;
            }
            while (v40 > v39)
            {
              if (*(_WORD *)&v38[2 * v39] != 62) {
                break;
              }
              uint64_t v41 = *(__int16 *)(a1 + 12);
              unsigned int v42 = __OFSUB__(v41, 1);
              uint64_t v43 = v41 - 1;
              if (v43 < 0 != v42) {
                break;
              }
              *(_WORD *)(a1 + 12) = v43;
              ++v39;
              if ((v34 & 0x8000) == 0) {
                goto LABEL_69;
              }
LABEL_71:
              int v40 = v37;
              if (v39 >= v37) {
                goto LABEL_112;
              }
            }

        int v67 = 7LL;
        goto LABEL_129;
      }

      uint64_t v36 = (unsigned __int16)v36;
LABEL_62:
      unsigned int v38 = 0;
      int v39 = v36 >> 5;
      goto LABEL_64;
    }
  }

  return result;
}

void *sub_180825DD4(void *result, unint64_t *a2, unint64_t a3, int a4, int *a5)
{
  uint64_t v5 = (unsigned __int8 *)*a2;
  if (*a2 >= a3) {
    return result;
  }
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  char v9 = *((_BYTE *)result + 64);
  int v10 = *(_DWORD *)(v8 + 104);
  do
  {
    *a2 = (unint64_t)(v5 + 1);
    uint64_t v11 = *v5;
    uint64_t v12 = *((char *)v7 + 64);
    *((_BYTE *)v7 + 64) = v12 + 1;
    *((_BYTE *)v7 + v12 + 65) = v11;
    int v13 = byte_180A24C2A[v11];
    if (!byte_180A24C2A[v11])
    {
LABEL_15:
      int v10 = 0;
LABEL_16:
      *(_DWORD *)(v8 + 104) = v10;
LABEL_17:
      *a5 = 18;
LABEL_18:
      int v20 = *((char *)v7 + 64);
      if (v20 >= 2)
      {
        char v21 = v20 - v9;
        if ((v20 - 1) <= (char)(v20 - v9))
        {
          uint64_t v22 = (v20 - 1);
        }

        else
        {
          *((_BYTE *)v7 + 282) = 1 - v9;
          uint64_t result = memcpy((char *)v7 + 250, (char *)v7 + 66, -(uint64_t)(char)(1 - v9));
          uint64_t v22 = v21;
        }

        *a2 -= v22;
        *((_BYTE *)v7 + 64) = 1;
      }

      return result;
    }

    int v14 = 0;
    int v15 = 0;
    uint64_t v16 = 74LL;
    int v10 = v13 + 32 * v10;
    while (1)
    {
      int v17 = v14;
      int v14 = (v15 + (int)v16) >> 1;
      if (v14 == v17) {
        goto LABEL_15;
      }
      uint64_t result = (void *)dword_180A24AB8[v14];
      uint64_t v18 = ((v15 + (int)v16) >> 1);
      if ((int)result <= v10)
      {
        int v15 = (v15 + (int)v16) >> 1;
        uint64_t v18 = v16;
      }

      uint64_t v16 = v18;
      if ((_DWORD)v18 == v15) {
        goto LABEL_15;
      }
    }

    int v19 = byte_180A24BE0[v14];
    if ((v19 - 1) < 2)
    {
      *(_DWORD *)(v8 + 104) = 0;
      goto LABEL_25;
    }

    if (v19 == -1) {
      goto LABEL_16;
    }
    uint64_t v5 = (unsigned __int8 *)*a2;
  }

  while (*a2 < a3);
  *(_DWORD *)(v8 + 104) = v10;
  if (!v19) {
    return result;
  }
LABEL_25:
  if (a4 == 3)
  {
    int v25 = byte_180A24A6E[v14];
    char v24 = byte_180A24A6E[v14];
    if (v25 <= 15)
    {
      if (v25 == -1) {
        goto LABEL_66;
      }
      if (v25 != 1)
      {
        if (v25 != 2)
        {
LABEL_64:
          if (!*(_DWORD *)(v8 + 108)) {
            goto LABEL_66;
          }
          *(_BYTE *)(v8 + 95) = v24;
          goto LABEL_59;
        }

        if (!*(_DWORD *)(v8 + 108)) {
          goto LABEL_66;
        }
      }
    }

    else
    {
      if (v25 <= 32)
      {
        if (v25 == 16)
        {
LABEL_50:
          if (!*(_BYTE *)(v8 + 94)) {
            goto LABEL_17;
          }
          int v28 = *(char *)(v8 + 96);
          if (v28 <= 1) {
            *(_BYTE *)(v8 + 97) = v28;
          }
          char v27 = 2;
          goto LABEL_54;
        }

        if (v25 == 17)
        {
          if (!*(_BYTE *)(v8 + 95)) {
            goto LABEL_17;
          }
          int v26 = *(char *)(v8 + 96);
          if (v26 <= 1) {
            *(_BYTE *)(v8 + 97) = v26;
          }
          char v27 = 3;
LABEL_54:
          *(_BYTE *)(v8 + 96) = v27;
          goto LABEL_59;
        }

        goto LABEL_64;
      }

      if (v25 != 33)
      {
        if (v25 == 34)
        {
LABEL_57:
          *(_BYTE *)(v8 + 94) = v24;
          goto LABEL_59;
        }

        goto LABEL_64;
      }
    }

    *(_BYTE *)(v8 + 93) = v24;
    goto LABEL_59;
  }

  if (a4 != 2)
  {
    if (a4 != 1) {
      goto LABEL_17;
    }
    int v23 = byte_180A24A24[v14];
    char v24 = byte_180A24A24[v14];
    if ((v23 - 1) >= 2)
    {
      if (v23 == -1) {
        goto LABEL_66;
      }
      if (v23 != 16)
      {
        if (((word_180A249B4[*(unsigned int *)(v8 + 108)] >> v23) & 1) != 0)
        {
          *(_BYTE *)(v8 + 92) = v24;
          goto LABEL_59;
        }

uint64_t sub_1808260D8(uint64_t result, int *a2)
{
  uint64_t v3 = result;
  __int16 v44 = 0;
  unint64_t v6 = *(unsigned __int8 **)(result + 16);
  unint64_t v4 = *(void *)(result + 24);
  uint64_t v5 = (unint64_t *)(result + 16);
  uint64_t v43 = v6;
  uint64_t v7 = *(void *)(result + 8);
  uint64_t v8 = *(void *)(v7 + 16);
  if (*(_DWORD *)(v8 + 108) != 1)
  {
    uint64_t v11 = *(_WORD **)(result + 32);
    uint64_t v12 = *(void *)(*(void *)(v8 + 80) + 48LL);
    if (*(_DWORD *)(v8 + 104)) {
      goto LABEL_59;
    }
    BOOL v13 = *(_BYTE *)(v7 + 64) != 1 || (unint64_t)v6 >= v4;
    LOWORD(v14) = *(unsigned __int8 *)(v7 + 65);
    *(_BYTE *)(v7 + 64) = 0;
LABEL_63:
    unsigned int v34 = *v6;
    unsigned int v35 = v34 - 33;
    __int16 v36 = v34 | ((_WORD)v14 << 8);
    if ((((_BYTE)v14 - 33) & 0xFEu) > 0x5D || v35 > 0x5D)
    {
      uint64_t result = 0xFFFFLL;
      if (v35 < 0x5E || v34 <= 0x1F && ((1 << v34) & 0x800C000) != 0) {
        goto LABEL_71;
      }
      uint64_t v43 = ++v6;
    }

    else
    {
      uint64_t v43 = ++v6;
      LOBYTE(v44) = v14 ^ 0x80;
      HIBYTE(v44) = v34 ^ 0x80;
      uint64_t result = sub_18083932C(v12, (uint64_t)&v44, 2);
    }

    LOWORD(v14) = v36;
LABEL_71:
    if ((int)result > 65533)
    {
      int v40 = *(_BYTE **)(v3 + 8);
      if ((unsigned __int16)v14 < 0x100u)
      {
        char v41 = 1;
      }

      else
      {
        v40[66] = v14;
        LOBYTE(v14) = BYTE1(v14);
        char v41 = 2;
      }

      v40[65] = v14;
      v40[64] = v41;
      if ((_DWORD)result == 65534) {
        int v42 = 10;
      }
      else {
        int v42 = 12;
      }
      *a2 = v42;
      unint64_t v6 = v43;
      goto LABEL_55;
    }

    uint64_t v37 = *(void *)(v3 + 48);
    if (v37)
    {
      else {
        int v38 = -1;
      }
      *(_DWORD *)(v37 + 2LL * ((void)v11 - *(void *)(v3 + 32))) = v38 + (_DWORD)v6 - *(_DWORD *)(v3 + 16);
    }

    *v11++ = result;
    while (1)
    {
LABEL_44:
      uint64_t v31 = 0LL;
      unint64_t v32 = *(void *)(v3 + 40);
      while (1)
      {
        if ((unint64_t)v11 >= v32)
        {
          *a2 = 15;
          goto LABEL_55;
        }

        int v14 = v6[v31];
        if (v14 != 14) {
          break;
        }
        *(_BYTE *)(v8 + 96) = 1;
        *(_BYTE *)(v8 + 112) = 1;
LABEL_52:
        if (v4 - (void)v6 == ++v31)
        {
          unint64_t v6 = (unsigned __int8 *)v4;
          goto LABEL_55;
        }
      }

      if (v14 == 15) {
        break;
      }
      if (v14 != 27)
      {
        uint64_t v33 = (uint64_t)&v6[v31];
        v6 += v31 + 1;
        uint64_t v43 = v6;
        *(_BYTE *)(v8 + 112) = 0;
        if (*(_BYTE *)(v8 + 96) != 1)
        {
          uint64_t result = 0xFFFFLL;
          goto LABEL_71;
        }

        if ((unint64_t)v6 >= v4)
        {
          *(_BYTE *)(*(void *)(v3 + 8) + 65LL) = v14;
          *(_BYTE *)(*(void *)(v3 + 8) + 64LL) = 1;
          goto LABEL_55;
        }

        goto LABEL_63;
      }

      uint64_t v43 = &v6[v31];
      uint64_t v7 = *(void *)(v3 + 8);
LABEL_59:
      *(_BYTE *)(v8 + 112) = 0;
      uint64_t result = (uint64_t)sub_180825DD4((void *)v7, (unint64_t *)&v43, v4, 2, a2);
      unint64_t v6 = v43;
      if (*a2 >= 1)
      {
LABEL_55:
        *(void *)(v3 + 32) = v11;
        *(void *)(v3 + 16) = v6;
        return result;
      }
    }

    *(_BYTE *)(v8 + 96) = 0;
    if (*(_BYTE *)(v8 + 112))
    {
      *(_BYTE *)(v8 + 112) = 0;
      *a2 = 18;
      uint64_t v39 = *(void *)(v3 + 8);
      *(_DWORD *)(v39 + 284) = 2;
      *(_BYTE *)(v39 + 65) = 15;
      *(_BYTE *)(*(void *)(v3 + 8) + 64LL) = 1;
      *(void *)(v3 + 32) = v11;
      *(void *)(v3 + 16) = &v6[v31 + 1];
      return result;
    }

    goto LABEL_52;
  }

  else {
    size_t v9 = *(unsigned __int16 *)result;
  }
  else {
    size_t v10 = 0LL;
  }
  bzero((char *)__dst + v9, v10);
  uint64_t result = (uint64_t)memcpy(__dst, (const void *)v3, v9);
  __dst[0] = v9;
  uint64_t v46 = *(char **)(v8 + 80);
  if (*(_DWORD *)(v8 + 104)) {
    goto LABEL_43;
  }
  while (1)
  {
    int v15 = *a2;
    if (*a2 > 0) {
      return result;
    }
    unint64_t v16 = *(void *)(v3 + 16);
    unint64_t v17 = *(void *)(v3 + 24);
    if (v16 >= v17) {
      return result;
    }
    uint64_t v18 = 0LL;
    uint64_t v47 = *(void *)(v3 + 16);
    while (*(_BYTE *)(v16 + v18) != 27)
    {
      if (v17 - v16 == ++v18) {
        goto LABEL_24;
      }
    }

    unint64_t v17 = v16 + v18;
LABEL_24:
    unint64_t v48 = v17;
    if (v16 != v17)
    {
      uint64_t v19 = *(void *)(v3 + 8);
      int v20 = *(char *)(v19 + 64);
      char v21 = v46;
      if (v20 >= 1)
      {
        memcpy(v46 + 65, (const void *)(v19 + 65), *(unsigned __int8 *)(v19 + 64));
        LOBYTE(v20) = *(_BYTE *)(*(void *)(v3 + 8) + 64LL);
      }

      _BYTE v21[64] = v20;
      uint64_t result = sub_180838280((uint64_t)__dst, a2);
      uint64_t v22 = *(_DWORD **)(v3 + 48);
      if (v22)
      {
        if (v6 != (unsigned __int8 *)*v5)
        {
          unint64_t v23 = *(void *)(v3 + 32);
          unint64_t v24 = v49;
          if (v23 < v49)
          {
            int v25 = *v5 - (_DWORD)v6;
            do
            {
              if ((*v22 & 0x80000000) == 0) {
                *v22 += v25;
              }
              ++v22;
              v23 += 2LL;
            }

            while (v23 < v24);
          }
        }
      }

      int v26 = v46;
      *(void *)(v3 + 16) = v47;
      uint64_t v27 = v50;
      *(void *)(v3 + 32) = v49;
      *(void *)(v3 + 48) = v27;
      int v28 = v26[64];
      if (v28 >= 1)
      {
        uint64_t result = (uint64_t)memcpy((void *)(*(void *)(v3 + 8) + 65LL), v26 + 65, v26[64]);
        LOBYTE(v28) = v26[64];
      }

      int v29 = *(_BYTE **)(v3 + 8);
      v29[64] = v28;
      int v15 = *a2;
      if (*a2 == 15)
      {
        int v30 = v26[93];
        if (v30 >= 1)
        {
          uint64_t result = (uint64_t)memcpy(v29 + 144, v26 + 144, v26[93]);
          LOBYTE(v30) = v26[93];
          int v29 = *(_BYTE **)(v3 + 8);
          int v15 = *a2;
        }

        v29[93] = v30;
        v26[93] = 0;
      }
    }

    if (v15 > 0) {
      return result;
    }
    unint64_t v4 = *(void *)(v3 + 24);
    if (*(void *)(v3 + 16) == v4) {
      return result;
    }
    uint64_t v7 = *(void *)(v3 + 8);
LABEL_43:
    uint64_t result = (uint64_t)sub_180825DD4((void *)v7, v5, v4, 2, a2);
  }

unint64_t sub_1808265D0(unint64_t result, int *a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = result;
  unint64_t v5 = *(void *)(result + 24);
  unint64_t v4 = *(char **)(result + 32);
  unint64_t v6 = *(void *)(result + 40);
  uint64_t v56 = *(_DWORD **)(result + 48);
  unsigned int v55 = 0;
  uint64_t v7 = *(void *)(result + 8);
  uint64_t v8 = *(unsigned __int16 **)(result + 16);
  uint64_t v9 = *(void *)(v7 + 16);
  uint64_t v10 = *(void *)(v9 + 80);
  if (*(_DWORD *)(v9 + 108) == 1)
  {
    *(void *)(result + 8) = v10;
    *(_DWORD *)(v10 + 84) = *(_DWORD *)(v7 + 84);
    uint64_t result = sub_1808394B8(result, a2);
    uint64_t v11 = *(void *)(v9 + 80);
    *(_DWORD *)(v7 + 84) = *(_DWORD *)(v11 + 84);
    if (*v2 == 15)
    {
      int v12 = *(char *)(v11 + 91);
      if (v12 >= 1)
      {
        uint64_t result = (unint64_t)memcpy((void *)(v7 + 104), (const void *)(v11 + 104), *(unsigned __int8 *)(v11 + 91));
        uint64_t v11 = *(void *)(v9 + 80);
        LOBYTE(v12) = *(_BYTE *)(v11 + 91);
      }

      *(_BYTE *)(v7 + 9icu::UVector32::~UVector32(this + 1) = v12;
      *(_BYTE *)(v11 + 9icu::UVector32::~UVector32(this + 1) = 0;
    }

    *(void *)(v3 + 8) = v7;
    return result;
  }

  int v14 = *(_DWORD *)(v7 + 80);
  LODWORD(v13) = *(_DWORD *)(v7 + 84);
  if ((_DWORD)v13) {
    BOOL v15 = (unint64_t)v4 >= v6;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15)
  {
LABEL_68:
    if ((unint64_t)v8 >= v5)
    {
      int v47 = 0;
    }

    else
    {
      int v44 = *v8;
      BOOL v45 = (v44 & 0xFC00) == 56320;
      int v46 = v44 + ((_DWORD)v13 << 10) - 56613888;
      if ((v44 & 0xFC00) == 0xDC00) {
        int v47 = 10;
      }
      else {
        int v47 = 12;
      }
      v8 += v45;
      if (v45) {
        LODWORD(v13) = v46;
      }
    }

    goto LABEL_79;
  }

  if ((unint64_t)v8 < v5)
  {
    unint64_t v16 = *(void **)(v10 + 48);
    unint64_t v17 = v8 + 1;
    int v18 = *(unsigned __int8 *)(v7 + 63);
    int v19 = (char)v18;
    int v20 = *(_DWORD *)(v7 + 80);
    while (1)
    {
      char v21 = v8;
      LOBYTE(v14) = v20;
      unsigned int v55 = 0xFFFF;
      if ((unint64_t)v4 >= *(void *)(v3 + 40))
      {
        *uint64_t v2 = 15;
        goto LABEL_81;
      }

      ++v8;
      unint64_t v13 = *v21;
      if (v13 <= 0x1F && ((1 << v13) & 0x800C000) != 0)
      {
        *uint64_t v2 = 12;
        *(_DWORD *)(*(void *)(v3 + 8) + 84LL) = v13;
        ++v21;
        goto LABEL_81;
      }

      if (*(unsigned __int16 *)(v16[29] {
                               + 2
      }
                               * (v13 & 0xF | (16
                                             * (unsigned __int16)*(_DWORD *)(v16[11]
                                                                                         + 4LL
                                                                                         * (((v13 >> 4) & 0x3F)
      else {
        uint64_t result = 2LL;
      }
      if (((*(_DWORD *)(v16[11]
                       + 4LL
                       * (((v13 >> 4) & 0x3F) + *(unsigned __int16 *)(v16[11] + ((v13 >> 9) & 0x7E)))) >> (v13 & 0xF | 0x10)) & 1) != 0
        || ((v13 - 63744) < 0xFFFFE700 ? (BOOL v23 = v18 == 0) : (BOOL v23 = 0),
            !v23
         && *(_WORD *)(v16[29]
                     + 2
                     * (v13 & 0xF | (16
                                   * (unsigned __int16)*(_DWORD *)(v16[11]
                                                                               + 4LL
                                                                               * (((v13 >> 4) & 0x3F)
                                                                                + *(unsigned __int16 *)(v16[11] + ((v13 >> 9) & 0x7E)))))))))
      {
        unsigned int v55 = *(unsigned __int16 *)(v16[29]
                                  + 2
                                  * (v13 & 0xF | (16
                                                * (unsigned __int16)*(_DWORD *)(v16[11]
                                                                                            + 4LL
      }

      else
      {
        uint64_t result = v16[36];
        if (!result) {
          goto LABEL_65;
        }
        int v52 = v19;
        int v53 = v18;
        unint64_t v38 = v6;
        uint64_t v39 = v16;
        uint64_t v54 = v2;
        unint64_t v40 = v5;
        char v41 = v4;
        uint64_t result = sub_18082BD0C(result, v13, (int *)&v55, v19);
        int v19 = v52;
        int v18 = v53;
        unint64_t v4 = v41;
        unint64_t v5 = v40;
        uint64_t v2 = v54;
        unint64_t v16 = v39;
        unint64_t v6 = v38;
        if ((result & 0x80000000) != 0) {
          uint64_t result = -(int)result;
        }
      }

      BOOL v24 = (int)result > 2 || (_DWORD)result == 0;
      if (v24
        || (_DWORD)result == 1 && v55 > 0x7F
        || (_DWORD)result == 2 && ((((_WORD)v55 + 24159) & 0xFFFEu) > 0x5D5D || (((_BYTE)v55 + 95) & 0xFEu) >= 0x5E))
      {
LABEL_65:
        unsigned int v55 = 0xFFFF;
LABEL_66:
        uint64_t v8 = v21 + 1;
        if ((v13 & 0xF800) == 0xD800)
        {
          if ((v13 & 0x400) == 0) {
            goto LABEL_68;
          }
          int v47 = 12;
        }

        else
        {
          int v47 = 10;
        }

LABEL_79:
        *uint64_t v2 = v47;
        *(_DWORD *)(*(void *)(v3 + 8) + 84LL) = v13;
        break;
      }

      if (v55 == 0xFFFF) {
        goto LABEL_66;
      }
      int v20 = v55 > 0xFF;
      if (v20 != (char)v14)
      {
        char v25 = v55 > 0xFF ? 14 : 15;
        *v4++ = v25;
        int v26 = v56;
        if (v56)
        {
          *uint64_t v56 = (((unint64_t)v17 - *(void *)(v3 + 16)) >> 1) - 1;
          uint64_t v56 = v26 + 1;
        }
      }

      char v27 = v55;
      if (v55 > 0xFF)
      {
        unsigned int v29 = (v55 >> 8) ^ 0xFFFFFF80;
        if ((unint64_t)v4 < v6)
        {
          *unint64_t v4 = v29;
          int v30 = v4 + 1;
          uint64_t v31 = v56;
          if (v56)
          {
            *uint64_t v56 = (((unint64_t)v17 - *(void *)(v3 + 16)) >> 1) - 1;
            uint64_t v56 = v31 + 1;
          }

          char v32 = v55 ^ 0x80;
          if ((unint64_t)v30 >= v6)
          {
            uint64_t v42 = *(void *)(v3 + 8);
            uint64_t v43 = *(char *)(v42 + 91);
            *(_BYTE *)(v42 + 9icu::UVector32::~UVector32(this + 1) = v43 + 1;
            *(_BYTE *)(v42 + v43 + 104) = v32;
            *uint64_t v2 = 15;
          }

          else
          {
            int v30 = v4 + 2;
            v4[1] = v32;
            uint64_t v33 = v56;
            if (v56)
            {
              *uint64_t v56 = (((unint64_t)v17 - *(void *)(v3 + 16)) >> 1) - 1;
              uint64_t v56 = v33 + 1;
            }
          }

          unint64_t v4 = v30;
          goto LABEL_63;
        }

        uint64_t v34 = *(void *)(v3 + 8);
        uint64_t v35 = *(char *)(v34 + 91);
        *(_BYTE *)(v34 + 9icu::UVector32::~UVector32(this + 1) = v35 + 1;
        *(_BYTE *)(v34 + v35 + 104) = v29;
        char v27 = v55 ^ 0x80;
      }

      else if ((unint64_t)v4 < v6)
      {
        *v4++ = v55;
        int v28 = v56;
        if (v56)
        {
          *uint64_t v56 = (((unint64_t)v17 - *(void *)(v3 + 16)) >> 1) - 1;
          uint64_t v56 = v28 + 1;
        }

        goto LABEL_63;
      }

      uint64_t v36 = *(void *)(v3 + 8);
      uint64_t v37 = *(char *)(v36 + 91);
      *(_BYTE *)(v36 + 9icu::UVector32::~UVector32(this + 1) = v37 + 1;
      *(_BYTE *)(v36 + v37 + 104) = v27;
      *uint64_t v2 = 15;
LABEL_63:
      ++v17;
      if ((unint64_t)v8 >= v5)
      {
        ++v21;
        LOBYTE(v14) = v20;
        goto LABEL_81;
      }
    }
  }

  char v21 = v8;
LABEL_81:
  if (*v2 <= 0 && v14 != 0)
  {
    if (*(_BYTE *)(v3 + 2))
    {
      if ((unint64_t)v21 >= v5)
      {
        uint64_t result = *(void *)(v3 + 8);
        if (!*(_DWORD *)(result + 84))
        {
          uint64_t v49 = *(void *)(v3 + 16);
          unint64_t v50 = ((unint64_t)v21 - v49) >> 1;
          unsigned int v51 = v50 - 1;
          if ((int)v50 < 1)
          {
            unsigned int v51 = -1;
          }

          else if ((*(_WORD *)(v49 + 2LL * v51) & 0xFC00) == 0xDC00 {
                 && ((_DWORD)v50 == 1 || (*(_WORD *)(v49 + 2LL * (v50 - 2)) & 0xFC00) == 0xD800))
          }
          {
            unsigned int v51 = v50 - 2;
          }

          uint64_t v57 = v4;
          uint64_t result = sub_180829514(result, byte_180A24E74, 1, &v57, v6, &v56, v51, v2);
          LOBYTE(v14) = 0;
          unint64_t v4 = v57;
        }
      }
    }
  }

  *(void *)(v3 + 16) = v21;
  *(void *)(v3 + 32) = v4;
  *(_DWORD *)(*(void *)(v3 + 8) + 80LL) = (char)v14;
  return result;
}

        int v14 = v10;
LABEL_80:
        if ((unint64_t)v3 >= v6)
        {
          uint64_t v8 = 0;
          goto LABEL_99;
        }

        int v30 = 0LL;
        unint64_t v13 = v12;
        uint64_t v31 = v9;
        while (1)
        {
          if ((unint64_t)v5 >= v7)
          {
            uint64_t v8 = 0;
            *a2 = 15;
            goto LABEL_99;
          }

          char v32 = *((unsigned __int8 *)v3 + v30);
          if (!v31) {
            break;
          }
          if (v31 == 1)
          {
            *(_BYTE *)(v2 + 66) = v32;
            uint64_t v33 = 2;
            uint64_t v31 = 2;
            goto LABEL_94;
          }

          if (v31 == 2)
          {
            *v5++ = v32 | ((_WORD)v13 << 8);
            unint64_t v3 = (unsigned __int16 *)((char *)v3 + v30 + 1);
            int v12 = v13;
            uint64_t v10 = v14;
            goto LABEL_72;
          }

    unint64_t v40 = a3;
    unint64_t v17 = (UChar *)v48;
    char v41 = u_strToPunycode(v14, v16, (uint64_t)v48, 100, 0LL, a8);
    uint64_t v42 = v41;
    uint64_t v43 = *a8;
    if (*a8 == 15)
    {
      unint64_t v17 = (UChar *)uprv_malloc(2 * v41);
      if (!v17)
      {
        unint64_t v16 = 0LL;
        int v44 = 7;
        goto LABEL_87;
      }

      *a8 = 0;
      uint64_t v42 = u_strToPunycode(v14, v16, (uint64_t)v17, v42, 0LL, a8);
      uint64_t v43 = *a8;
    }

    if (v43 > 0)
    {
      unint64_t v16 = 0LL;
LABEL_88:
      a3 = v40;
      goto LABEL_23;
    }

    unint64_t v16 = (v42 + 4);
    if ((int)v16 <= a4)
    {
      u_memcpy(v40, (const UChar *)aXn, 4);
      BOOL v45 = v42;
      a3 = v40;
      u_memcpy(v40 + 4, v17, v45);
LABEL_66:
LABEL_23:
      if (v14 == (_WORD *)v50) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }

    int v44 = 15;
LABEL_87:
    *a8 = v44;
    goto LABEL_88;
  }

  int v14 = uprv_malloc((2 * v12));
  BOOL v15 = v12;
  if (v14) {
    goto LABEL_8;
  }
LABEL_5:
  unint64_t v16 = 0LL;
  int v14 = 0LL;
  *a8 = 7;
  unint64_t v17 = (UChar *)v48;
LABEL_24:
  uprv_free(v14);
LABEL_25:
  if (v17 != (UChar *)v48) {
    uprv_free(v17);
  }
  uprv_free(0LL);
  return u_terminateUChars((uint64_t)a3, a4, v16, a8);
}

    int v18 = *(_DWORD *)(a1 + 136);
    unint64_t v16 = *(_DWORD *)(a1 + 140);
    int v19 = v16 + v18;
    unint64_t v17 = v26;
    uint64_t v10 = v20++ < v16 + v18;
    if (!v10) {
      goto LABEL_85;
    }
  }

  if ((_DWORD)v26 == v17)
  {
    int v26 = v17;
    goto LABEL_79;
  }

  int v30 = (v20 - v18);
  if (v17 == 38 || (v17 & 0xF0) == 0x30)
  {
    int v44 = v66;
    goto LABEL_40;
  }

  uint64_t v31 = icu::FormattedValueStringBuilderImpl::trimBack((icu::FormattedValueStringBuilderImpl *)a1, v30);
  if (v31 <= v66)
  {
LABEL_40:
    int v26 = 0LL;
    --v20;
    int v66 = -1;
    goto LABEL_79;
  }

  LODWORD(v30) = v31;
  int v44 = icu::FormattedValueStringBuilderImpl::trimFront((icu::FormattedValueStringBuilderImpl *)a1, v66);
LABEL_83:
  BOOL v45 = v17 >> 4;
  int v46 = v17 & 0xF;
  int v47 = this;
  unint64_t v48 = v30;
LABEL_108:
  icu::ConstrainedFieldPosition::setState(v47, v45, v46, v44, v48);
  return 1LL;
}

    unint64_t v13 = sub_1809CAC44((uint64_t)v60, ++v14);
    ++v15;
    if (!v13) {
      goto LABEL_83;
    }
  }

  uint64_t v58 = v16;
  int v18 = 0;
  int v19 = 0;
  while (1)
  {
    int v20 = *(void *)(*(void *)(a1 + 1064) + 8LL * v19);
    char v21 = sub_1809CAC44((uint64_t)v60, v19 + v14 + v18);
    uint64_t v22 = *v21;
    BOOL v23 = sub_1809CACF8(*v21, v20, *(__int16 *)(*(void *)a1 + 14LL));
    if (!v23) {
      break;
    }
    if (v23 >= 1)
    {
      if (v23 == 1)
      {
        --v19;
        ++v18;
      }

      else
      {
        --v18;
      }
    }

    ++v19;
    unint64_t v17 = *(_DWORD *)(a1 + 1056);
    if (v19 >= v17)
    {
      unint64_t v59 = v15;
      goto LABEL_25;
    }
  }

  if (v22 != 0x7FFFFFFFFFFFFFFFLL)
  {
    LODWORD(v16) = v58;
    goto LABEL_79;
  }

  uint64_t v35 = 0;
  uint64_t v49 = v54;
  LODWORD(v16) = v58;
LABEL_85:
  unint64_t v50 = v53;
  LODWORD(v4icu::UVector32::~UVector32(this + 1) = v55;
LABEL_88:
  else {
    unint64_t v5 = v35;
  }
  if ((_DWORD)v5) {
    unsigned int v51 = v41;
  }
  else {
    unsigned int v51 = -1;
  }
  if (v50)
  {
    if ((_DWORD)v5) {
      int v52 = v16;
    }
    else {
      int v52 = -1;
    }
    *unint64_t v50 = v52;
  }

  if (v49) {
    const unsigned __int8 *v49 = v51;
  }
LABEL_101:
  if (v61 != v60) {
    uprv_free(v61);
  }
  return v5;
}

uint64_t sub_180826B1C(void *a1, int *a2)
{
  char v42 = 0;
  __int16 v41 = 0;
  unint64_t v6 = a1 + 1;
  uint64_t result = a1[1];
  unint64_t v5 = (unsigned __int8 *)v6[1];
  unint64_t v40 = v5;
  unint64_t v7 = a1[3];
  uint64_t v8 = (_WORD *)a1[4];
  uint64_t v9 = *(void *)(result + 16);
  uint64_t v10 = (_DWORD *)(v9 + 92);
  if (*(_DWORD *)(v9 + 104))
  {
LABEL_2:
    char v11 = *(_BYTE *)(result + 64);
    uint64_t result = (uint64_t)sub_180825DD4((void *)result, (unint64_t *)&v40, v7, 3, a2);
    int v12 = *a2;
    if (*(_DWORD *)(v9 + 104)) {
      goto LABEL_5;
    }
    if (v12 <= 0)
    {
      if (!*(_BYTE *)(v9 + 112))
      {
LABEL_5:
        unint64_t v5 = v40;
        if (v12 < 1) {
          goto LABEL_17;
        }
        goto LABEL_15;
      }

      *a2 = 18;
      uint64_t v15 = a1[1];
      *(_DWORD *)(v15 + 284) = 2;
      *(_BYTE *)(v15 + 64) = v11 + (_BYTE)v40 - (_BYTE)v5;
    }

    unint64_t v5 = v40;
LABEL_15:
    a1[4] = v8;
    a1[2] = v5;
    *(_BYTE *)(v9 + 112) = 0;
    return result;
  }

  BOOL v13 = *(_BYTE *)(result + 64) != 1 || (unint64_t)v5 >= v7;
  if (!v13 && (unint64_t)v8 < a1[5])
  {
    LODWORD(v14) = *(unsigned __int8 *)(result + 65);
    *(_BYTE *)(result + 64) = 0;
    goto LABEL_37;
  }

LABEL_34:
        unint64_t v40 = &v5[v18 + 1];
        int v22 = *(unsigned __int8 *)(v9 + 96);
        *(_BYTE *)(v9 + 112) = 0;
        if (v22)
        {
          if ((unint64_t)&v5[v18 + 1] >= v7)
          {
            *(_BYTE *)(a1[1] + 65LL) = v20;
            *(_BYTE *)(a1[1] + 64LL) = 1;
            v5 += v18 + 1;
            goto LABEL_28;
          }

          v5 += v18 + 1;
LABEL_37:
          unsigned int v23 = *v5;
          int v24 = v23 | ((_DWORD)v14 << 8);
          if ((((_BYTE)v14 - 33) & 0xFEu) > 0x5D || (v23 - 33) > 0x5Du)
          {
            uint64_t result = 0xFFFFLL;
            if ((v23 - 33) >= 0x5Eu && (v23 > 0x1F || ((1 << v23) & 0x800C000) == 0))
            {
              unint64_t v40 = ++v5;
              LODWORD(v14) = v24 | 0x10000;
            }
          }

          else
          {
            unint64_t v40 = ++v5;
            uint64_t v25 = *((char *)v10 + *(char *)(v9 + 96));
            if (v25 < 32)
            {
              uint64_t v26 = *(void *)(v9 + 8 * v25);
              int v28 = 2;
              char v27 = v14;
            }

            else
            {
              uint64_t v26 = *(void *)(v9 + 24);
              char v27 = v25 + 96;
              char v42 = v23;
              int v28 = 3;
              LOBYTE(v23) = v14;
            }

            LOBYTE(v4icu::UVector32::~UVector32(this + 1) = v27;
            HIBYTE(v4icu::UVector32::~UVector32(this + 1) = v23;
            uint64_t result = sub_18083932C(v26, (uint64_t)&v41, v28);
            LODWORD(v14) = v24;
          }
        }

        else
        {
          uint64_t result = 0xFFFFLL;
          if ((char)v14 < 0)
          {
            v5 += v18 + 1;
          }

          else
          {
LABEL_31:
            v5 += v18 + 1;
            uint64_t result = v14;
          }
        }

    ++v11;
  }

  while ((_DWORD)v10 != v11);
  if (!v12) {
    goto LABEL_127;
  }
  if (*(_BYTE *)(a1 + 260) && (icu::UnicodeSet::freeze(v8), int v22 = *(unsigned __int8 *)(a1 + 260), *(_BYTE *)(a1 + 260)))
  {
    unsigned int v23 = *(_DWORD *)(a1 + 248) + 8 * v10;
  }

  else
  {
    int v22 = 0;
    if ((a4 & 4) != 0) {
      unsigned int v23 = 5 * v10 + *(_DWORD *)(a1 + 248);
    }
    else {
      unsigned int v23 = v10;
    }
  }

  if (v23 <= 128)
  {
    int v24 = (char *)(a1 + 264);
    *(void *)(a1 + 224) = a1 + 264;
    if (v22) {
      goto LABEL_44;
    }
LABEL_47:
    if ((a4 & 4) != 0)
    {
      v24 += 4 * (int)v10;
      *(void *)(a1 + 240) = &v24[(int)v10];
    }

    *(void *)(a1 + 232) = v24;
    int v60 = v24;
    uint64_t v26 = v24;
    goto LABEL_50;
  }

  char v27 = (char *)uprv_malloc(v23);
  *uint64_t v56 = v27;
  if (!v27)
  {
LABEL_127:
    *(_DWORD *)(a1 + 252) = 0;
    *(_DWORD *)(a1 + 256) = 0;
    return a1;
  }

  int v24 = v27;
  if (!*(_BYTE *)(a1 + 260)) {
    goto LABEL_47;
  }
LABEL_44:
  uint64_t v25 = &v24[4 * (int)v10];
  int v24 = &v25[(int)v10];
  int v60 = &v24[(int)v10];
  uint64_t v26 = &v60[(int)v10];
  *(void *)(a1 + 232) = v25;
  *(void *)(a1 + 240) = &v26[(int)v10];
LABEL_50:
  int v28 = 0LL;
  unsigned int v61 = 0;
  uint64_t v58 = v10;
  unint64_t v59 = v24;
  uint64_t v57 = v26;
  while (2)
  {
    uint64_t v29 = icu::UVector::elementAt(*(icu::UVector **)(a1 + 216), v28);
    int v30 = *(unsigned __int16 *)(v29 + 8);
    if ((v30 & 0x11) == 0)
    {
      if ((v30 & 2) != 0)
      {
        uint64_t v31 = (UChar *)(v29 + 10);
        if ((v30 & 0x8000) != 0) {
          goto LABEL_58;
        }
      }

      else
      {
        uint64_t v31 = *(UChar **)(v29 + 24);
        if ((v30 & 0x8000) != 0) {
          goto LABEL_58;
        }
      }

      goto LABEL_56;
    }

    uint64_t v31 = 0LL;
    if ((v30 & 0x8000) == 0)
    {
LABEL_56:
      int v32 = v30 >> 5;
      goto LABEL_59;
    }

  *a5 = 3;
  BOOL v13 = *(_OWORD **)a1;
  if (*(void *)a1)
  {
    udata_close(v13);
    *(void *)a1 = 0LL;
  }

      if ((_DWORD)v26 == (_DWORD)v16) {
        break;
      }
      int v21 = (int)v26 + 1LL;
      unsigned int v23 = *(unsigned __int16 *)(a6 + 2LL * (int)v26);
      int v32 = (v23 & 0xFC00) != 0xD800 || (_DWORD)v21 == (_DWORD)v16;
      uint64_t v25 = v26;
      if (!v32)
      {
        int v33 = *(unsigned __int16 *)(a6 + 2 * v21);
        uint64_t v25 = v26;
        if ((v33 & 0xFC00) == 0xDC00)
        {
          int v21 = (v26 + 2);
          unsigned int v23 = (v23 << 10) - 56613888 + v33;
          uint64_t v25 = v26;
        }
      }
    }

    uint64_t v26 = v16;
    uint64_t v25 = v16;
LABEL_42:
    uint64_t v34 = __OFSUB__(v25, v18);
    unint64_t v35 = v25 - v18;
    if (!((v35 < 0) ^ v34 | (v35 == 0)))
    {
      if (v35 < 1) {
        goto LABEL_50;
      }
      if (a8) {
        icu::Edits::addUnchanged(a8, v35);
      }
      if ((v11 & 0x4000) != 0)
      {
LABEL_50:
        uint64_t v36 = v10;
        goto LABEL_51;
      }

      uint64_t v36 = (v35 + v10);
LABEL_51:
      uint64_t v10 = v36;
      if ((v36 & 0x80000000) != 0) {
        goto LABEL_139;
      }
    }

    *((_DWORD *)this + 6) = v2;
    return v15 | 0xC0u;
  }

  *((void *)this + 4) = 0LL;
  uint64_t v9 = U_MEMORY_ALLOCATION_ERROR;
LABEL_36:
  *a2 = v9;
  return 0xFFFFFFFFLL;
}

        if ((v13 & 0x3F3F) < 0x501) {
          goto LABEL_37;
        }
        if (v6 <= 6)
        {
          ++v6;
LABEL_37:
          int v22 = v6 | v8;
          if (v8 - 3072 > 0x3F8) {
            int v22 = v7 | v8 | v6;
          }
          goto LABEL_60;
        }

        int v22 = 1;
LABEL_60:
        *((_WORD *)this[907] + v5++) = v22;
        uint64_t v10 = v14;
        char v11 = v15;
      }

      if (!v8)
      {
        unint64_t v6 = 0;
        unint64_t v7 = 160;
        uint64_t v8 = 3072;
        goto LABEL_31;
      }

      if (v8 > 0xFF7)
      {
        int v22 = 1;
LABEL_56:
        uint64_t v14 = v10;
        goto LABEL_60;
      }

      unint64_t v6 = 0;
      v8 += 8;
      goto LABEL_29;
    }

    return (void *)(*v23 < U_ILLEGAL_ARGUMENT_ERROR);
  }

  else
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }

  return result;
}

    uint64_t v37 = 0;
LABEL_35:
    unint64_t v38 = v37;
LABEL_36:
    unint64_t v40 = (v33 & 2) != 0
    char v39 = icu::UnicodeString::doCompare((uint64_t)v72, v24, v32, (uint64_t)v40, v36, v38);
    uint64_t v26 = a3;
LABEL_40:
    if (v39)
    {
      unint64_t v6 = 0LL;
      *((_DWORD *)a4 + 3) = v25;
      goto LABEL_120;
    }

  if (v4 >= 1 && (v3 > 0x7Fu ? (uint64_t v17 = -1) : (uint64_t v17 = dword_180A3CD5C[v3]), v6 <= v17)) {
    return 0LL;
  }
  else {
    return 1LL;
  }
}

          unint64_t v7 = 65533LL;
          goto LABEL_35;
        }

unint64_t sub_180826FB0(unint64_t result, int *a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = result;
  unsigned int v4 = 0;
  uint64_t v5 = 0LL;
  v87[1] = *MEMORY[0x1895F89C0];
  uint64_t v7 = *(void *)(result + 8);
  unint64_t v6 = *(unsigned __int16 **)(result + 16);
  unint64_t v9 = *(void *)(result + 24);
  uint64_t v8 = *(_WORD **)(result + 32);
  unint64_t v10 = *(void *)(result + 40);
  uint64_t v85 = *(_DWORD **)(result + 48);
  v87[0] = 0LL;
  memset(v84, 0, 3);
  uint64_t v11 = *(void *)(v7 + 16);
  uint64_t v12 = v11 + 98;
  unsigned int v13 = *(_DWORD *)(v7 + 84);
  if (v13) {
    BOOL v14 = (unint64_t)v8 >= v10;
  }
  else {
    BOOL v14 = 1;
  }
  unint64_t v74 = result;
  uint64_t v71 = v11 + 98;
  uint64_t v72 = v7;
  unint64_t v69 = v9;
  unint64_t v70 = v10;
  uint64_t v82 = *(void *)(v7 + 16);
  if (v14) {
    goto LABEL_6;
  }
  while (2)
  {
    if ((unint64_t)v6 >= v9)
    {
      *(_DWORD *)(v7 + 84) = v13;
LABEL_138:
      if (*v2 <= 0
        && *(_BYTE *)(v11 + 102)
        && *(_BYTE *)(v3 + 2)
        && (unint64_t)v6 >= v9
        && !*(_DWORD *)(v7 + 84))
      {
        *(_BYTE *)(v11 + 102) = 0;
        uint64_t v66 = *(void *)(v3 + 16);
        unint64_t v67 = ((unint64_t)v6 - v66) >> 1;
        unsigned int v68 = v67 - 1;
        if ((int)v67 < 1)
        {
          unsigned int v68 = -1;
        }

        else if ((*(_WORD *)(v66 + 2LL * v68) & 0xFC00) == 0xDC00 {
               && ((_DWORD)v67 == 1 || (*(_WORD *)(v66 + 2LL * (v67 - 2)) & 0xFC00) == 0xD800))
        }
        {
          unsigned int v68 = v67 - 2;
        }

        uint64_t v86 = v8;
        uint64_t result = sub_180829514(v7, byte_180A24E74, 1, &v86, v10, &v85, v68, v2);
        uint64_t v8 = v86;
      }

      goto LABEL_149;
    }

    int v16 = *v6;
    if ((v16 & 0xFC00) != 0xDC00)
    {
LABEL_38:
      *uint64_t v2 = 12;
      *(_DWORD *)(v7 + 84) = v13;
      goto LABEL_149;
    }

    ++v6;
    unsigned int v13 = v16 + (v13 << 10) - 56613888;
    *(_DWORD *)(v7 + 84) = 0;
LABEL_13:
    if ((int)v13 <= 127)
    {
      if ((int)v13 > 31 || ((1 << v13) & 0x800C000) == 0)
      {
        int v18 = 1;
        char v19 = v13;
        if (*(_BYTE *)(v11 + 102))
        {
          unsigned int v4 = 0;
          BYTE1(v87[0]) = v13;
          *(_BYTE *)(v11 + 102) = 0;
          int v18 = 2;
          char v19 = 15;
        }

        LOBYTE(v87[0]) = v19;
        if (v13 == 13 || v13 == 10)
        {
          unsigned int v4 = 0;
          *(_WORD *)(v12 + 4) = 0;
          *(_DWORD *)uint64_t v12 = 0;
        }

        goto LABEL_120;
      }

      goto LABEL_38;
    }

    uint64_t v76 = v6;
    if (v4)
    {
      unsigned int v77 = v4;
    }

    else
    {
      unsigned int v20 = *(unsigned __int8 *)(v11 + 99);
      if (v20 <= 1) {
        int v21 = 1;
      }
      else {
        int v21 = *(unsigned __int8 *)(v11 + 99);
      }
      LOBYTE(v84[0]) = v21;
      int v22 = *(_DWORD *)(v11 + 108);
      if (v22 == 1)
      {
        if (v21 == 2)
        {
          __int16 v24 = 8449;
        }

        else if ((char)v21 == 1)
        {
          __int16 v24 = 545;
        }

        else
        {
          __int16 v24 = 513;
        }

        *(_WORD *)((char *)v84 + icu::UVector32::~UVector32(this + 1) = v24;
        int v25 = 3;
      }

      else
      {
        if (v22) {
          goto LABEL_136;
        }
        if (v20 > 1) {
          char v23 = 1;
        }
        else {
          char v23 = 33;
        }
        HIBYTE(v84[0]) = v23;
        int v25 = 2;
      }

      unsigned int v77 = v25;
    }

    int v75 = v8;
    unint64_t v26 = 0LL;
    uint64_t v27 = 0LL;
    uint64_t v28 = 0LL;
    int v29 = 0;
    uint64_t v30 = *(unsigned __int8 *)(v7 + 63);
    uint64_t v83 = v13 >> 10;
    int v31 = (v13 >> 4) & 0x3F;
    int v32 = 1 << (v13 & 0xF | 0x10);
    unsigned int v81 = v13 - 57344;
    unsigned int v78 = v13 - 983040;
    unint64_t v33 = v77;
    do
    {
      int v34 = *((char *)v84 + v26);
      if (v34 < 1) {
        goto LABEL_101;
      }
      uint64_t v35 = *((unsigned __int8 *)v84 + v26);
      LODWORD(v86) = 0;
      if (v35 < 0x20)
      {
        uint64_t v41 = *(void *)(v11 + 8LL * v34);
        if (v13 >= 0x10000 && (*(_BYTE *)(v41 + 253) & 1) == 0) {
          goto LABEL_87;
        }
        unsigned int v42 = *(unsigned __int16 *)(*(void *)(v41 + 232)
                                  + 2LL
                                  * (v13 & 0xF | (16
                                                * (unsigned __int16)*(_DWORD *)(*(void *)(v41 + 88)
                                                                              + 4LL
                                                                              * (v31
                                                                               + *(unsigned __int16 *)(*(void *)(v41 + 88) + 2 * v83))))));
        if (v42 >= 0x100) {
          uint64_t result = 4294967294LL;
        }
        else {
          uint64_t result = 0xFFFFFFFFLL;
        }
        if ((*(_DWORD *)(*(void *)(v41 + 88)
                        + 4LL * (v31 + *(unsigned __int16 *)(*(void *)(v41 + 88) + 2 * v83))) & v32) != 0)
        {
          LODWORD(v86) = *(unsigned __int16 *)(*(void *)(v41 + 232)
                                             + 2LL
                                             * (v13 & 0xF | (16
                                                           * (unsigned __int16)*(_DWORD *)(*(void *)(v41 + 88)
                                                                                         + 4LL
                                                                                         * (v31
                                                                                          + *(unsigned __int16 *)(*(void *)(v41 + 88) + 2 * v83))))));
          if (v42 < 0x100) {
            goto LABEL_101;
          }
LABEL_89:
          int v29 = 2;
LABEL_96:
          uint64_t v30 = 0LL;
          uint64_t v27 = 1LL;
          uint64_t v5 = v86;
          uint64_t v28 = v35;
          goto LABEL_101;
        }

        if (((_BYTE)v30 || v81 >> 8 < 0x19 || !(v78 >> 17))
          && *(_WORD *)(*(void *)(v41 + 232)
                      + 2LL
                      * (v13 & 0xF | (16
                                    * (unsigned __int16)*(_DWORD *)(*(void *)(v41 + 88)
                                                                  + 4LL
                                                                  * (v31
                                                                   + *(unsigned __int16 *)(*(void *)(v41 + 88) + 2 * v83)))))))
        {
          LODWORD(v86) = *(unsigned __int16 *)(*(void *)(v41 + 232)
                                             + 2LL
                                             * (v13 & 0xF | (16
                                                           * (unsigned __int16)*(_DWORD *)(*(void *)(v41 + 88)
                                                                                         + 4LL
                                                                                         * (v31
                                                                                          + *(unsigned __int16 *)(*(void *)(v41 + 88) + 2 * v83))))));
        }

        else
        {
LABEL_87:
          uint64_t result = *(void *)(v41 + 288);
          if (!result) {
            goto LABEL_101;
          }
          uint64_t v79 = v28;
          uint64_t v48 = v5;
          int v80 = v29;
          uint64_t v49 = v27;
          uint64_t v50 = v30;
          uint64_t result = sub_18082BD0C(result, v13, (int *)&v86, (char)v30);
          uint64_t v28 = v79;
          unint64_t v33 = v77;
          uint64_t v11 = v82;
          uint64_t v30 = v50;
          uint64_t v27 = v49;
          int v29 = v80;
          uint64_t v5 = v48;
          if ((_DWORD)result == 2) {
            goto LABEL_89;
          }
        }

        if ((_DWORD)result == -2 && v29 == 0)
        {
          int v29 = -2;
          goto LABEL_96;
        }

        goto LABEL_101;
      }

      uint64_t v36 = *(void *)(v11 + 24);
      if (v13 >= 0x10000 && (*(_BYTE *)(v36 + 253) & 1) == 0)
      {
LABEL_69:
        uint64_t result = *(void *)(v36 + 288);
        if (!result) {
          goto LABEL_101;
        }
        uint64_t v43 = v28;
        uint64_t v44 = v5;
        uint64_t v45 = v27;
        uint64_t v46 = v30;
        uint64_t result = sub_18082BD0C(result, v13, (int *)&v86, (char)v30);
        uint64_t v28 = v43;
        unint64_t v33 = v77;
        uint64_t v11 = v82;
        uint64_t v30 = v46;
        uint64_t v27 = v45;
        uint64_t v5 = v44;
LABEL_71:
        if ((_DWORD)result == 3)
        {
          int v29 = 2;
          goto LABEL_79;
        }

        goto LABEL_73;
      }

      uint64_t v37 = v13 & 0xF | (16
                       * (unsigned __int16)*(_DWORD *)(*(void *)(v36 + 88)
                                                     + 4LL
                                                     * (v31
      unint64_t v38 = (unsigned __int8 *)(*(void *)(v36 + 232) + v37 + 2LL * v37);
      unsigned int v39 = (*v38 << 16) | (v38[1] << 8) | v38[2];
      if (v39 < 0x10000) {
        unsigned int v40 = 2;
      }
      else {
        unsigned int v40 = 3;
      }
      if (v39 < 0x100) {
        uint64_t result = 1LL;
      }
      else {
        uint64_t result = v40;
      }
      if ((*(_DWORD *)(*(void *)(v36 + 88)
                      + 4LL * (v31 + *(unsigned __int16 *)(*(void *)(v36 + 88) + 2 * v83))) & v32) != 0)
      {
        LODWORD(v86) = v39;
        goto LABEL_71;
      }

      if (!(_BYTE)v30 && v81 >> 8 >= 0x19 && v78 >> 17 || !v39) {
        goto LABEL_69;
      }
      LODWORD(v86) = v39;
      uint64_t result = -(int)result;
LABEL_73:
      if ((_DWORD)result == -3 && v29 == 0)
      {
        uint64_t v30 = 0LL;
        int v29 = -2;
LABEL_79:
        uint64_t v5 = v86;
        if (BYTE2(v86) == 129)
        {
          uint64_t v27 = 1LL;
          uint64_t v28 = 33LL;
        }

        else if (BYTE2(v86) == 130)
        {
          uint64_t v27 = 2LL;
          uint64_t v28 = 34LL;
        }

        else
        {
          uint64_t v28 = (v86 >> 16) - 96;
          if (*(_DWORD *)(v11 + 108) == 1)
          {
            uint64_t v27 = 3LL;
          }

          else
          {
            int v29 = 0;
            uint64_t v27 = v27;
          }
        }
      }

LABEL_125:
  unint64_t v60 = ((unint64_t)v6 - *(void *)(v3 + 16)) >> 1;
  if (v13 >= 0x10000) {
    int v61 = -2;
  }
  else {
    int v61 = -1;
  }
  uint64_t v86 = v8;
  uint64_t v62 = v5;
  uint64_t result = sub_180829514(v7, (char *)v87, v18, &v86, v10, &v85, (int)v60 + v61, v2);
  uint64_t v5 = v62;
  uint64_t v11 = v82;
  uint64_t v8 = v86;
  if (*v2 < 1) {
    goto LABEL_6;
  }
LABEL_149:
  *(void *)(v3 + 16) = v6;
  *(void *)(v3 + 32) = v8;
  return result;
}

        if (!v92) {
          goto LABEL_130;
        }
        if (*v2 >= 1)
        {
          if (v92 >= 2)
          {
            uint64_t v146 = 0LL;
            int v147 = *(_BYTE *)(*(void *)(v4 + 48) + 49LL) != 0;
            int v148 = v4;
            unsigned int v149 = v4 + 66;
            do
            {
              uint64_t result = sub_1808392FC(v78, v76, v147, *(unsigned __int8 *)(v149 + v146));
              if ((_DWORD)result)
              {
                LOBYTE(v75) = v146 + 1;
                BOOL v150 = v92 - (v146 + 1);
                uint64_t v151 = &v71[-*(void *)(v158 + 16)];
                unsigned int v4 = v148;
                if ((int)v151 >= v150)
                {
                  unint64_t v74 = 0;
                  v71 -= v150;
                }

                else
                {
                  uint64_t v152 = (_BYTE)v151 - v150;
                  *(_BYTE *)(v148 + 282) = v152;
                  uint64_t result = (uint64_t)memcpy((void *)(v148 + 250), (const void *)(v148 + v146 + 66), -(uint64_t)v152);
                  unsigned int v4 = v148;
                  unint64_t v74 = 0;
                  uint64_t v71 = *(_BYTE **)(v158 + 16);
                }

                goto LABEL_211;
              }

              ++v146;
            }

            while (v92 - 1LL != v146);
            unint64_t v74 = 0;
            LOBYTE(v75) = v92;
            unsigned int v4 = v148;
            goto LABEL_211;
          }

          unint64_t v74 = 0;
        }

        else
        {
          uint64_t v109 = v158;
          *(void *)(v158 + 16) = v71;
          unsigned int v110 = *(void *)(*(void *)(v4 + 48) + 288LL);
          if (v110)
          {
            uint64_t v157 = v2;
            unsigned int v111 = v4;
            int v112 = v79;
            int v113 = v80;
            uint64_t result = sub_18082B208( v4,  v110,  v92,  (uint64_t *)&v161,  v70,  (unint64_t *)&v160,  v72,  &v159,  v81,  *(_BYTE *)(v158 + 2),  v2);
            uint64_t v109 = v158;
            int v80 = v113;
            uint64_t v79 = v112;
            unsigned int v4 = v111;
            uint64_t v2 = v157;
            if ((_DWORD)result) {
              goto LABEL_129;
            }
          }

          if (v92 == 4 && (*(_BYTE *)(v4 + 57) & 0x80) != 0)
          {
            uint64_t v114 = 0LL;
            __int128 v115 = *(unsigned __int8 *)(v4 + 68)
                 + 10
            while (1)
            {
              __int128 v116 = dword_180A26704[v114 + 2];
              __int128 v143 = v115 >= v116;
              uint64_t v117 = v115 - v116;
              if (v143 && v115 <= dword_180A26704[v114 + 3]) {
                break;
              }
              v114 += 4LL;
              if ((_DWORD)(v114 * 4) == 224) {
                goto LABEL_142;
              }
            }

            *uint64_t v2 = 0;
            unsigned int v119 = v81;
            uint64_t v120 = v2;
            char v121 = v4;
            uint64_t v122 = v79;
            int v123 = v80;
            uint64_t result = sub_180829664(v4, v117 + dword_180A26704[v114], (unint64_t *)&v160, v72, &v159, v119, v2);
            uint64_t v109 = v158;
            int v80 = v123;
            uint64_t v79 = v122;
            unsigned int v4 = v121;
            uint64_t v2 = v120;
LABEL_129:
            LOBYTE(v92) = 0;
          }

          else
          {
LABEL_142:
            *uint64_t v2 = 10;
          }

          unint64_t v74 = 0;
          uint64_t v71 = v161;
          if (*v2 < 1)
          {
            int v93 = (v77 + (_DWORD)v161 - *(_DWORD *)(v109 + 16));
            LOBYTE(v75) = v92;
            LODWORD(v77) = v77 + (_DWORD)v161 - *(_DWORD *)(v109 + 16);
            goto LABEL_133;
          }
        }

        LOBYTE(v75) = v92;
        goto LABEL_211;
      }

      if (v94 != 4)
      {
        if ((v84 & 0xD00000) != 0x100000)
        {
          unint64_t v74 = 0;
          uint64_t v106 = v94 - 2;
          LOBYTE(v75) = 0;
          int v93 = v77;
          uint64_t result = BYTE3(v84) & 0x7F;
          switch(v106)
          {
            case 0u:
              goto LABEL_109;
            case 1u:
            case 2u:
            case 3u:
              goto LABEL_133;
            case 4u:
              goto LABEL_125;
            case 5u:
              goto LABEL_124;
            case 6u:
              unint64_t v74 = *(unsigned __int8 *)(*(void *)(v4 + 48) + 49LL);
              uint64_t result = v85;
              if (*(_BYTE *)(*(void *)(v4 + 48) + 49LL)) {
                goto LABEL_124;
              }
              goto LABEL_131;
            default:
              LOBYTE(v75) = 0;
              goto LABEL_132;
          }
        }

        *uint64_t v82 = (v84 >> 10) & 0x3FF | 0xD800;
        __int16 v99 = v82 + 1;
        int v160 = v82 + 1;
        unint64_t v100 = v159;
        if (v159)
        {
          *int v159 = v81;
          int v159 = v100 + 1;
          unint64_t v101 = v84 & 0x3FF | 0xDC00;
          if ((unint64_t)v99 < v72)
          {
            unint64_t v74 = 0;
            LOBYTE(v75) = 0;
            int v160 = v82 + 2;
            v82[1] = v101;
            int v159 = v100 + 2;
            v100[1] = v81;
LABEL_132:
            int v93 = v77;
            goto LABEL_133;
          }
        }

        else
        {
          unint64_t v101 = v84 & 0x3FF | 0xDC00;
          if ((unint64_t)v99 < v72)
          {
            unint64_t v74 = 0;
            LOBYTE(v75) = 0;
            int v160 = v82 + 2;
            v82[1] = v101;
            goto LABEL_132;
          }
        }

        unint64_t v74 = 0;
        LOBYTE(v75) = 0;
        *(_WORD *)(v4 + 144) = v101;
        goto LABEL_209;
      }

      unsigned int v95 = v74 + (unsigned __int16)v84;
      unsigned int v96 = *(unsigned __int16 *)(v80 + 2LL * v95);
      if (v96 <= 0xFFFD) {
        goto LABEL_99;
      }
      if (v96 != 65534)
      {
        uint64_t result = BYTE3(v84) & 0x7F;
        goto LABEL_124;
      }

      int v153 = v80;
      int v154 = v79;
      uint64_t v156 = v2;
      uint64_t v155 = v4;
      uint64_t result = sub_180839290(*(void *)(v4 + 48) + 48LL, v95);
      if ((_DWORD)result == 65534)
      {
        uint64_t v2 = v156;
        unsigned int v4 = v155;
        int v80 = v153;
        uint64_t v79 = v154;
        goto LABEL_125;
      }

      *uint64_t v82 = result;
      int v160 = v82 + 1;
      int v108 = v159;
      uint64_t v2 = v156;
      int v80 = v153;
      uint64_t v79 = v154;
      unint64_t v74 = 0;
      LOBYTE(v75) = 0;
      if (v159)
      {
        *int v159 = v81;
        int v159 = v108 + 1;
      }

      int v93 = v77;
      unsigned int v4 = v155;
LABEL_133:
      unsigned int v81 = v93;
      if ((unint64_t)v71 >= v70)
      {
LABEL_211:
        *(_DWORD *)(v4 + 72) = v74;
        *(_DWORD *)(v4 + 76) = v76;
        *(_BYTE *)(v4 + 64) = v75;
        *(void *)(v158 + 16) = v71;
        *(void *)(v158 + 32) = v160;
        *(void *)(v158 + 48) = v159;
        return result;
      }
    }

    int v161 = ++v71;
    *uint64_t v82 = v84;
    int v160 = v82 + 1;
    uint64_t v85 = 0LL;
    if (v86)
    {
      *v86++ = v81;
      int v159 = v86;
      unsigned int v81 = (v77 + 1);
      LODWORD(v77) = v77 + 1;
    }

    goto LABEL_71;
  }

  if ((*(_BYTE *)(v7 + 253) & 1) == 0)
  {
    uint64_t v8 = 0;
    unint64_t v10 = *(void *)(v3 + 8);
    unint64_t v9 = *(unsigned __int8 **)(v3 + 16);
    uint64_t v12 = *(void *)(v3 + 24);
    uint64_t v11 = *(_WORD **)(v3 + 32);
    unsigned int v13 = v3;
    BOOL v14 = (*(void *)(v3 + 40) - (void)v11) >> 1;
    uint64_t v162 = *(int **)(v3 + 48);
    char v163 = v11;
    unsigned int v15 = 64LL;
    if ((*(_BYTE *)(v10 + 56) & 0x10) == 0) {
      unsigned int v15 = 56LL;
    }
    int v16 = *(void *)(*(void *)(v10 + 48) + v15);
    uint64_t v17 = (int32x4_t)xmmword_180A26580;
    int v18 = (int32x4_t)xmmword_180A26590;
    char v19 = (int32x4_t)xmmword_180A265A0;
    uint64_t result = 2LL;
    unsigned int v20 = v9;
    while (1)
    {
      int v21 = v14 >> 4;
      while (1)
      {
        v164[0] = (uint64_t)(v9 + 1);
        int v22 = *(_DWORD *)(v16 + 4LL * *v9);
        char v163 = v11 + 1;
        _WORD *v11 = v22;
        v164[0] = (uint64_t)(v9 + 2);
        char v23 = *(_DWORD *)(v16 + 4LL * v9[1]);
        __int16 v24 = v23 | v22;
        char v163 = v11 + 2;
        v11[1] = v23;
        v164[0] = (uint64_t)(v9 + 3);
        int v25 = *(_DWORD *)(v16 + 4LL * v9[2]);
        char v163 = v11 + 3;
        v11[2] = v25;
        v164[0] = (uint64_t)(v9 + 4);
        unint64_t v26 = *(_DWORD *)(v16 + 4LL * v9[3]);
        uint64_t v27 = v24 | v25 | v26;
        char v163 = v11 + 4;
        v11[3] = v26;
        v164[0] = (uint64_t)(v9 + 5);
        uint64_t v28 = *(_DWORD *)(v16 + 4LL * v9[4]);
        char v163 = v11 + 5;
        v11[4] = v28;
        v164[0] = (uint64_t)(v9 + 6);
        int v29 = *(_DWORD *)(v16 + 4LL * v9[5]);
        uint64_t v30 = v28 | v29;
        char v163 = v11 + 6;
        v11[5] = v29;
        v164[0] = (uint64_t)(v9 + 7);
        int v31 = *(_DWORD *)(v16 + 4LL * v9[6]);
        int v32 = v30 | v31;
        char v163 = v11 + 7;
        v11[6] = v31;
        v164[0] = (uint64_t)(v9 + 8);
        unint64_t v33 = *(_DWORD *)(v16 + 4LL * v9[7]);
        int v34 = v27 | v32;
        v11[7] = v33;
        uint64_t v35 = *(_DWORD *)(v16 + 4LL * v9[8]);
        uint64_t v36 = v33 | v35;
        _BYTE v11[8] = v35;
        uint64_t v37 = *(_DWORD *)(v16 + 4LL * v9[9]);
        unint64_t v38 = v36 | v37;
        v11[9] = v37;
        unsigned int v39 = *(_DWORD *)(v16 + 4LL * v9[10]);
        unsigned int v40 = v38 | v39;
        v11[10] = v39;
        uint64_t v41 = *(_DWORD *)(v16 + 4LL * v9[11]);
        v11[11] = v41;
        unsigned int v42 = *(_DWORD *)(v16 + 4LL * v9[12]);
        uint64_t v43 = v34 | v40;
        uint64_t v44 = v41 | v42;
        _OWORD v11[12] = v42;
        uint64_t v45 = *(_DWORD *)(v16 + 4LL * v9[13]);
        uint64_t v46 = v44 | v45;
        v11[13] = v45;
        int v47 = *(_DWORD *)(v16 + 4LL * v9[14]);
        uint64_t v48 = v46 | v47;
        v11[14] = v47;
        uint64_t v49 = v9 + 16;
        v164[0] = (uint64_t)(v9 + 16);
        uint64_t v50 = *(_DWORD *)(v16 + 4LL * v9[15]);
        unsigned int v51 = v11 + 16;
        char v163 = v11 + 16;
        v11[15] = v50;
        if ((v43 | v48 | v50) >= -2146435072) {
          break;
        }
        v11 += 16;
        v9 += 16;
        unsigned int v52 = __OFSUB__(v21--, 1);
        if ((v21 < 0) ^ v52 | (v21 == 0))
        {
          int v21 = 0;
          unint64_t v9 = v49;
          uint64_t v11 = v51;
          goto LABEL_18;
        }
      }

      v164[0] = (uint64_t)v9;
      char v163 = v11;
LABEL_18:
      uint64_t v53 = (v14 >> 4) - v21;
      LODWORD(v14) = v14 - 16 * v53;
      uint64_t v54 = v162;
      if (v162 && (v20 += 16 * v53, v53 >= 1))
      {
        unint64_t v55 = v53 + 1;
        do
        {
          uint64_t v56 = vdupq_n_s32(v8);
          *uint64_t v54 = v8;
          *(int32x4_t *)(v54 + icu::UVector32::~UVector32(this + 1) = vaddq_s32(v56, v17);
          *(int32x4_t *)(v54 + 5) = vaddq_s32(v56, v18);
          *(int32x4_t *)(v54 + 9) = vaddq_s32(v56, v19);
          *(int32x2_t *)(v54 + 13) = vadd_s32(*(int32x2_t *)v56.i8, (int32x2_t)0xE0000000DLL);
          char v57 = v8 + 16;
          unint64_t v58 = v54 + 16;
          v54[15] = v8 + 15;
          --v55;
          v8 += 16;
          v54 += 16;
        }

        while (v55 > 1);
        uint64_t v162 = v58;
        unint64_t v59 = v164[0];
        uint64_t v8 = v57;
      }

      else
      {
LABEL_23:
        unint64_t v59 = (uint64_t)v9;
      }

      if ((int)v14 < 1)
      {
LABEL_183:
        unint64_t v9 = (unsigned __int8 *)v59;
        goto LABEL_190;
      }

      unsigned int v13 = a7;
      unsigned int v15 = a3;
      goto LABEL_126;
    }

    if (a4) {
      unsigned int v52 = a4 + 2LL * (int)v10;
    }
    else {
      unsigned int v52 = 0LL;
    }
    if (*a9 == 15)
    {
      *a9 = 0;
      goto LABEL_125;
    }

    unsigned int v13 = a7;
    unsigned int v15 = a3;
    if (*a9 <= 0)
    {
LABEL_126:
      uint64_t v17 = 13LL;
      if ((int)v16 >= v13)
      {
        if (*a9 > 0) {
          return v10;
        }
LABEL_135:
        if ((int)v10 <= a5)
        {
          if (a8) {
            icu::Edits::copyErrorTo(a8, (UErrorCode *)a9);
          }
          return v10;
        }

        uint64_t v12 = 15;
LABEL_140:
        unint64_t v9 = a9;
LABEL_141:
        *unint64_t v9 = v12;
        return v10;
      }

      continue;
    }

    return v10;
  }

          LOBYTE(v37) = 1;
          goto LABEL_39;
        }

        unint64_t v6 = v94;
        if (!v94) {
          goto LABEL_229;
        }
        int v88 = icu::TimeZoneNames::MatchInfoCollection::getNameTypeAt((icu::UVector **)v31, v86);
        unint64_t v89 = 1;
        if (v88 > 15)
        {
          if (v88 == 16) {
            goto LABEL_228;
          }
          if (v88 != 32) {
            goto LABEL_203;
          }
        }

        else
        {
          if (v88 == 2)
          {
LABEL_228:
            *unsigned int v94 = v89;
LABEL_229:
            v95[2] = v87;
            icu::TimeZoneFormat::getTimeZoneID(v103, (icu::UVector **)v31, v86, (icu::UnicodeString *)v119);
            int v31 = (uint64_t)icu::TimeZone::createTimeZone(v119, v90);
            uint64_t v37 = 0;
            goto LABEL_230;
          }

          if (v88 != 4)
          {
LABEL_203:
            unint64_t v89 = 0;
            goto LABEL_228;
          }
        }

        unint64_t v89 = 2;
        goto LABEL_228;
      case 5u:
        int v112 = v12;
        int v113 = -1;
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneFormat::parseOffsetLocalizedGMT( this,  a3,  (icu::ParsePosition *)&v111,  0,  0LL);
        if (v113 == -1) {
          goto LABEL_26;
        }
        int v103 = this;
        unint64_t v38 = v105 | 0x40;
        goto LABEL_47;
      case 6u:
        int v112 = v12;
        int v113 = -1;
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneFormat::parseOffsetLocalizedGMT( this,  a3,  (icu::ParsePosition *)&v111,  1,  0LL);
        if (v113 == -1) {
          goto LABEL_26;
        }
        int v103 = this;
        unint64_t v38 = v105 | 0x20;
LABEL_47:
        unsigned int v105 = v38;
        goto LABEL_48;
      case 7u:
      case 9u:
      case 0xBu:
      case 0xDu:
      case 0xFu:
        int v103 = this;
        int v112 = v12;
        int v113 = -1;
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneFormat::parseOffsetISO8601( BestMatch,  a3,  (icu::ParsePosition *)&v111,  0,  0LL);
        uint64_t v30 = v108;
        if (v113 == -1) {
          goto LABEL_26;
        }
        goto LABEL_72;
      case 8u:
      case 0xAu:
      case 0xCu:
      case 0xEu:
      case 0x10u:
        int v112 = v12;
        int v113 = -1;
        v115[0] = 0;
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneFormat::parseOffsetISO8601( BestMatch,  a3,  (icu::ParsePosition *)&v111,  0,  v115);
        if (v113 == -1 && v115[0])
        {
LABEL_26:
          _OWORD v8[2] = v112;
          int v32 = BestMatch;
          goto LABEL_74;
        }

        int v103 = this;
LABEL_48:
        uint64_t v30 = v108;
        goto LABEL_72;
      case 0x11u:
        int v103 = this;
        int v112 = v12;
        int v113 = -1;
        BestMatch = icu::TimeZoneFormat::parseZoneID( BestMatch,  a3,  (icu::ParsePosition *)&v111,  (icu::UnicodeString *)v119);
        goto LABEL_52;
      case 0x12u:
        int v103 = this;
        int v112 = v12;
        int v113 = -1;
        BestMatch = icu::TimeZoneFormat::parseShortZoneID( BestMatch,  a3,  (icu::ParsePosition *)&v111,  (icu::UnicodeString *)v119);
        goto LABEL_52;
      case 0x13u:
        int v112 = v12;
        int v113 = -1;
        int v103 = this;
        BestMatch = icu::TimeZoneFormat::parseExemplarLocation( this,  a3,  (icu::ParsePosition *)&v111,  (icu::UnicodeString *)v119);
LABEL_52:
        uint64_t v30 = v108;
        if (v113 != -1) {
          goto LABEL_72;
        }
        unsigned int v39 = v112;
        goto LABEL_54;
      default:
        goto LABEL_71;
    }
  }

  __int16 v24 = v112;
  if (v112 != v16 && !LOBYTE(v120[0])) {
    goto LABEL_20;
  }
  _OWORD v8[2] = v112;
  int v31 = (uint64_t)icu::TimeZoneFormat::createTimeZoneForOffset(v19, v19, v20, v21, v22, v23);
LABEL_177:
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v111);
  return v31;
}

void ucnv_enableCleanup()
{
}

BOOL sub_1808277E4()
{
  if (qword_18C534E98 && !uhash_count(qword_18C534E98))
  {
    uhash_close((_BYTE *)qword_18C534E98);
    qword_18C534E98 = 0LL;
  }

  word_18C534EA0 = 0;
  if (qword_18C534EA8)
  {
    uprv_free((void *)qword_18C534EA8);
    qword_18C534EA8 = 0LL;
  }

  atomic_store(0, &dword_18C534EB0);
  return qword_18C534E98 == 0;
}

_BYTE *ucnv_load(uint64_t a1, UErrorCode *a2)
{
  uint64_t v5 = *(_BYTE **)(a1 + 16);
  if (v5 && *v5) {
    return sub_18082791C(a1, a2);
  }
  if (qword_18C534E98 && (uint64_t result = (_BYTE *)uhash_get(qword_18C534E98, *(void *)(a1 + 24))) != 0LL)
  {
    ++*((_DWORD *)result + 1);
  }

  else
  {
    unint64_t v6 = sub_18082791C(a1, a2);
    uint64_t result = 0LL;
    if (*(int *)a2 <= 0 && v6)
    {
      if (!*(_BYTE *)(a1 + 8)) {
        sub_180827A84((uint64_t)v6);
      }
      return v6;
    }
  }

  return result;
}

_BYTE *sub_18082791C(uint64_t a1, UErrorCode *a2)
{
  uint64_t v5 = udata_openChoice( *(char **)(a1 + 16),  "cnv",  *(const char **)(a1 + 24),  (unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_180829188,  0LL,  a2);
  uint64_t v2 = 0LL;
  uint64_t v7 = v5;
  uint64_t Memory = udata_getMemory((uint64_t)v5);
  if (*(int *)a2 <= 0)
  {
    unint64_t v9 = (char *)Memory;
    __int16 v10 = *(char *)(Memory + 69);
    if ((v10 & 0xFFFEu) <= 0x21
      && ((0x203uLL >> v10) & 1) == 0
      && (uint64_t v11 = qword_1897120F0[*(char *)(Memory + 69)], *(_BYTE *)(v11 + 25))
      && *(_DWORD *)(v11 + 4) == 1
      && *(_DWORD *)Memory == 100)
    {
      uint64_t v12 = uprv_malloc(0x128uLL);
      if (v12)
      {
        uint64_t v2 = v12;
        memcpy(v12, (const void *)v11, 0x128uLL);
        v2[24] = 0;
        *((void *)v2 + icu::UVector32::~UVector32(this + 1) = v7;
        *((void *)v2 + 2) = v9;
        unsigned int v13 = *(void (**)(_BYTE *, uint64_t, char *, UErrorCode *))(*((void *)v2 + 4) + 8LL);
        if (v13)
        {
          v13(v2, a1, &v9[*(unsigned int *)v9], a2);
          uprv_free(v2);
          uint64_t v2 = 0LL;
        }

        goto LABEL_19;
      }

      int v14 = 7;
    }

    else
    {
      int v14 = 13;
    }

    *a2 = v14;
  }

void sub_180827A84(uint64_t a1)
{
  int v4 = 0;
  uint64_t v2 = qword_18C534E98;
  if (qword_18C534E98) {
    goto LABEL_2;
  }
  int v3 = ucnv_io_countKnownConverters((UErrorCode *)&v4);
  qword_18C534E98 = (uint64_t)uhash_openSize((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0LL, 2 * v3, &v4);
  sub_180820C94(0x16u, (uint64_t)sub_1808277E4);
  if (v4 <= 0)
  {
    uint64_t v2 = qword_18C534E98;
LABEL_2:
    *(_BYTE *)(a1 + 24) = 1;
    uhash_put(v2, *(void *)(a1 + 16) + 4LL, a1, &v4);
  }

void ucnv_unload(uint64_t a1)
{
  if (a1)
  {
    int v1 = *(_DWORD *)(a1 + 4);
    if (!v1 || (int v2 = v1 - 1, (*(_DWORD *)(a1 + 4) = v2) == 0))
    {
      if (!*(_BYTE *)(a1 + 24)) {
        sub_180827B50(a1);
      }
    }
  }

void sub_180827B50(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 4))
  {
    int v2 = *(void (**)(uint64_t))(*(void *)(a1 + 32) + 16LL);
    if (v2) {
      v2(a1);
    }
    int v3 = *(_OWORD **)(a1 + 8);
    if (v3) {
      udata_close(v3);
    }
    uprv_free((void *)a1);
  }

void sub_180827BA4(uint64_t a1)
{
  if (a1)
  {
    if (*(_BYTE *)(a1 + 25))
    {
      umtx_lock((icu::UMutex *)&unk_18C534EB8);
      ucnv_unload(a1);
      umtx_unlock((std::mutex **)&unk_18C534EB8);
    }
  }

void sub_180827BF4(uint64_t a1)
{
  if (a1)
  {
    if (*(_BYTE *)(a1 + 25))
    {
      umtx_lock((icu::UMutex *)&unk_18C534EB8);
      ++*(_DWORD *)(a1 + 4);
      umtx_unlock((std::mutex **)&unk_18C534EB8);
    }
  }

_BYTE *sub_180827C48(unsigned __int8 *a1, _OWORD *a2, __int128 *a3, UErrorCode *a4)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  int v21 = 0;
  char v20 = 1;
  unint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v24 = 0LL;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  if (a2)
  {
    if (a3) {
      goto LABEL_11;
    }
  }

  else
  {
    if (a3)
    {
      uint64_t result = 0LL;
      *a4 = U_INTERNAL_PROGRAM_ERROR;
      return result;
    }

    uint64_t v7 = v25;
  }

  uint64_t v24 = 0LL;
  __int128 v22 = 0uLL;
  __int128 v23 = 0uLL;
  LODWORD(v22) = 40;
  unint64_t v6 = &v22;
LABEL_11:
  memset(v25, 0, sizeof(v25));
  *(_BYTE *)uint64_t v7 = 0;
  *((_BYTE *)v7 + 60) = 0;
  *((_DWORD *)v7 + 55) = 0;
  *((void *)v6 + 3) = a1;
  *((void *)v6 + 4) = (char *)v7 + 60;
  *((_DWORD *)v6 + 3) = 0;
  if (!a1) {
    goto LABEL_23;
  }
  int v8 = *a1;
  if (v8 != 117)
  {
    if (v8 != 85 || a1[1] != 84 || a1[2] != 70) {
      goto LABEL_25;
    }
    goto LABEL_19;
  }

  if (a1[1] == 116 && a1[2] == 102)
  {
LABEL_19:
    int v9 = a1[3];
    if (v9 == 56)
    {
      if (a1[4]) {
        goto LABEL_25;
      }
    }

    else if (v9 != 45 || a1[4] != 56 || a1[5])
    {
      goto LABEL_25;
    }

uint64_t sub_180827F5C(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v7 = 0LL;
  int v8 = (_BYTE *)(a2 + 60);
  *(void *)(a3 + 24) = result;
  *(void *)(a3 + 32) = a2 + 60;
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 220);
  while (1)
  {
    int v9 = *(unsigned __int8 *)(result + v7);
    if (!*(_BYTE *)(result + v7) || v9 == 44) {
      break;
    }
    if ((_DWORD)v7 == 59)
    {
      *a4 = 1;
      *(_BYTE *)a2 = 0;
      return result;
    }

    *(_BYTE *)(a2 + v7++) = v9;
  }

  *(_BYTE *)(a2 + v7) = 0;
  *(void *)(a3 + 24) = a2;
  __int16 v10 = (_BYTE *)(result + v7);
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_7:
        if (*v10 == 44)
        {
          uint64_t v11 = v10 + 1;
        }

        else
        {
          uint64_t v11 = v10;
          if (!*v10) {
            return result;
          }
        }

        uint64_t result = strncmp(v11, "locale=", 7uLL);
        if ((_DWORD)result) {
          break;
        }
        for (uint64_t i = 0LL; ; ++i)
        {
          int v15 = v11[i + 7];
          if (!v11[i + 7] || v15 == 44)
          {
            v8[i] = 0;
            __int16 v10 = &v11[i + 7];
            if (!v15) {
              goto LABEL_7;
            }
            goto LABEL_30;
          }

          if ((_DWORD)i == 156) {
            break;
          }
          v8[i] = v15;
        }

        *a4 = 1;
        _BYTE *v8 = 0;
        __int16 v10 = &v11[i + 8];
        if (!v15) {
          continue;
        }
LABEL_30:
        if (v15 != 44) {
          return result;
        }
      }

      uint64_t result = strncmp(v11, "version=", 8uLL);
      if (!(_DWORD)result) {
        break;
      }
      uint64_t result = strncmp(v11, "swaplfnl", 8uLL);
      if ((_DWORD)result)
      {
        __int16 v10 = v11;
        while (1)
        {
          int v13 = *v10++;
          int v12 = v13;
          if (v13 == 44) {
            break;
          }
          if (!v12) {
            return result;
          }
        }
      }

      else
      {
        __int16 v10 = v11 + 8;
        int v18 = *(_DWORD *)(a2 + 220) | 0x10;
        *(_DWORD *)(a2 + 220) = v18;
        *(_DWORD *)(a3 + 12) = v18;
      }
    }

    __int16 v10 = v11 + 8;
    if (!v11[8]) {
      break;
    }
    int v16 = (char)v11[8] - 48;
    if ((v16 & 0xFEu) <= 9)
    {
      unsigned int v17 = *(_DWORD *)(a2 + 220) & 0xFFFFFFF0 | v16;
      *(_DWORD *)(a2 + 220) = v17;
      *(_DWORD *)(a3 + 12) = v17;
      __int16 v10 = v11 + 9;
    }
  }

  unsigned int v19 = *(_DWORD *)(a2 + 220) & 0xFFFFFFF0;
  *(_DWORD *)(a2 + 220) = v19;
  *(_DWORD *)(a3 + 12) = v19;
  return result;
}

_OWORD *ucnv_createConverter(_OWORD *a1, unsigned __int8 *a2, UErrorCode *a3)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  uint64_t v8 = 0LL;
  memset(v7, 0, sizeof(v7));
  LODWORD(v7[0]) = 40;
  memset(v9, 0, sizeof(v9));
  uint64_t v5 = sub_180827C48(a2, v9, v7, a3);
  uint64_t result = sub_180828210(a1, (uint64_t)v5, (uint64_t)v7, (int *)a3);
  return result;
}

_OWORD *sub_180828210(_OWORD *a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v5 = a1;
  if (*a4 >= 1) {
    goto LABEL_2;
  }
  if (a1)
  {
    char v9 = 1;
  }

  else
  {
    uint64_t v5 = uprv_malloc(0x120uLL);
    if (!v5)
    {
      *a4 = 7;
LABEL_2:
      sub_180827BA4(a2);
      return v5;
    }

    char v9 = 0;
  }

  v5[16] = 0u;
  v5[17] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  *uint64_t v5 = 0u;
  v5[1] = 0u;
  *((_BYTE *)v5 + 6icu::UVector32::~UVector32(this + 1) = v9;
  *((void *)v5 + 6) = a2;
  *((_DWORD *)v5 + 14) = *(_DWORD *)(a3 + 12);
  if (!*(_BYTE *)(a3 + 8))
  {
    *((_DWORD *)v5 + 52) = -1;
    *(void *)uint64_t v5 = UCNV_FROM_U_CALLBACK_SUBSTITUTE;
    *((void *)v5 + icu::UVector32::~UVector32(this + 1) = UCNV_TO_U_CALLBACK_SUBSTITUTE;
    *((_DWORD *)v5 + 18) = *(_DWORD *)(a2 + 40);
    uint64_t v10 = *(_BYTE **)(a2 + 16);
    *((_BYTE *)v5 + 88) = v10[71];
    *((_BYTE *)v5 + 94) = v10[80];
    size_t v11 = (char)v10[76];
    *((_BYTE *)v5 + 89) = v11;
    *((void *)v5 + 5) = (char *)v5 + 136;
    memcpy((char *)v5 + 136, v10 + 72, v11);
    *((_DWORD *)v5 + 7icu::UVector32::~UVector32(this + 1) = 1;
  }

  int v12 = *(void (**)(_OWORD *, uint64_t, int *))(*(void *)(a2 + 32) + 24LL);
  if (v12)
  {
    v12(v5, a3, a4);
    if (*a4 >= 1 && !*(_BYTE *)(a3 + 8))
    {
      ucnv_close(v5);
      return 0LL;
    }
  }

  return v5;
}

BOOL sub_18082835C(unsigned __int8 *a1, UErrorCode *a2)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  uint64_t v7 = 0LL;
  memset(v6, 0, sizeof(v6));
  LODWORD(v6[0]) = 40;
  UErrorCode v2 = *a2;
  if (*(int *)a2 <= 0)
  {
    memset(v9, 0, sizeof(v9));
    memset(v8, 0, sizeof(v8));
    BYTE8(v6[0]) = 1;
    int v4 = sub_180827C48(a1, v8, v6, a2);
    sub_180828210(v9, (uint64_t)v4, (uint64_t)v6, (int *)a2);
    sub_180827BA4((uint64_t)v4);
    UErrorCode v2 = *a2;
  }

  return v2 < U_ILLEGAL_ARGUMENT_ERROR;
}

_OWORD *sub_180828458(_OWORD *a1, unsigned int a2, uint64_t a3, int a4, int *a5)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v7 = 40LL;
  if (a2 >= 0x22 || ((0x203uLL >> a2) & 1) != 0 || (uint64_t v5 = qword_1897120F0[a2], *(_BYTE *)(v5 + 25)))
  {
    uint64_t result = 0LL;
    *a5 = 1;
  }

  else
  {
    HIDWORD(v8) = a4;
    uint64_t v10 = "";
    uint64_t v11 = a3;
    return sub_180828210(a1, v5, (uint64_t)&v7, a5);
  }

  return result;
}

void *ucnv_openPackage_0(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  v7[0] = 40;
  if (*(int *)a3 <= 0)
  {
    __int128 v19 = 0uLL;
    memset(v20, 0, sizeof(v20));
    __int128 v17 = 0uLL;
    __int128 v18 = 0uLL;
    __int128 v15 = 0uLL;
    __int128 v16 = 0uLL;
    __int128 v14 = 0uLL;
    __int128 v12 = 0uLL;
    __int128 v13 = 0uLL;
    __int128 v11 = 0uLL;
    memset(v10, 0, sizeof(v10));
    LOBYTE(v10[0]) = 0;
    BYTE12(v1icu::UVector32::~UVector32(this + 1) = 0;
    int v21 = 0;
    sub_180827F5C(a2, (uint64_t)v10, (uint64_t)v7, a3);
    if (*(int *)a3 <= 0)
    {
      v7[1] = 1;
      *((void *)&v8 + icu::UVector32::~UVector32(this + 1) = a1;
      uint64_t v5 = sub_18082791C((uint64_t)v7, a3);
      if (*(int *)a3 <= 0)
      {
        uint64_t result = sub_180828210(0LL, (uint64_t)v5, (uint64_t)v7, (int *)a3);
        ucnv_close(result);
      }
    }
  }

  return 0LL;
}

uint64_t ucnv_flushCache()
{
  if (!qword_18C534E98) {
    return 0LL;
  }
  umtx_lock((icu::UMutex *)&unk_18C534EB8);
  uint64_t v0 = 0LL;
  char v1 = 1;
  do
  {
    int v8 = -1;
    uint64_t v2 = uhash_nextElement((uint64_t *)qword_18C534E98, &v8);
    if (!v2) {
      break;
    }
    uint64_t v3 = v2;
    int v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8);
      if (*(_DWORD *)(v5 + 4))
      {
        ++v4;
      }

      else
      {
        uint64_t v0 = (v0 + 1);
        uhash_removeElement(qword_18C534E98, (_DWORD *)v3);
        *(_BYTE *)(v5 + 24) = 0;
        sub_180827B50(v5);
      }

      uint64_t v3 = uhash_nextElement((uint64_t *)qword_18C534E98, &v8);
    }

    while (v3);
    char v6 = v1 & (v4 > 0);
    char v1 = 0;
  }

  while ((v6 & 1) != 0);
  umtx_unlock((std::mutex **)&unk_18C534EB8);
  return v0;
}

uint64_t sub_1808286CC(UErrorCode *a1)
{
  BOOL v1 = sub_1808286F4(a1);
  unsigned __int16 v2 = word_18C534EA0;
  if (!v1) {
    return 0;
  }
  return v2;
}

BOOL sub_1808286F4(UErrorCode *a1)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (*(int *)a1 <= 0)
  {
    unsigned int v2 = atomic_load(&dword_18C534EB0);
    if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_18C534EB0))
    {
      if (dword_18C534EB4 >= 1) {
        *a1 = dword_18C534EB4;
      }
    }

    else
    {
      sub_180820C94(0x16u, (uint64_t)sub_1808277E4);
      uint64_t v3 = (void **)ucnv_openAllNames(a1);
      int v4 = uenum_count((uint64_t)v3, (int *)a1);
      UErrorCode v5 = *a1;
      if (*(int *)a1 <= 0)
      {
        int v6 = v4;
        qword_18C534EA8 = (uint64_t)uprv_malloc(8LL * v4);
        if (qword_18C534EA8)
        {
          int v11 = 0;
          memset(v12, 0, sizeof(v12));
          Converte__int16 r = ucnv_createConverter(v12, 0LL, (UErrorCode *)&v11);
          ucnv_close(Converter);
          word_18C534EA0 = 0;
          if (v6 >= 1)
          {
            do
            {
              int v11 = 0;
              int v8 = (unsigned __int8 *)uenum_next((uint64_t)v3, 0LL, &v11);
              if (sub_18082835C(v8, (UErrorCode *)&v11))
              {
                uint64_t v9 = (unsigned __int16)word_18C534EA0++;
                *(void *)(qword_18C534EA8 + 8 * v9) = v8;
              }

              --v6;
            }

            while (v6);
          }

          uenum_close(v3);
          UErrorCode v5 = *a1;
        }

        else
        {
          UErrorCode v5 = U_MEMORY_ALLOCATION_ERROR;
          *a1 = U_MEMORY_ALLOCATION_ERROR;
        }
      }

      dword_18C534EB4 = v5;
      icu::umtx_initImplPostInit(&dword_18C534EB0);
    }
  }

  return *a1 < U_ILLEGAL_ARGUMENT_ERROR;
}

uint64_t sub_1808288B4(unsigned int a1, UErrorCode *a2)
{
  if (!sub_1808286F4(a2)) {
    return 0LL;
  }
  uint64_t result = 0LL;
  *a2 = U_INDEX_OUTOFBOUNDS_ERROR;
  return result;
}

const char *ucnv_getDefaultName()
{
  return "UTF-8";
}

uint64_t ucnv_swap( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a3;
  int v13 = udata_swapDataHeader(a1, (unsigned __int16 *)a2, a3, a4, a5, a6, a7, a8);
  if (!a5 || *a5 > 0) {
    return 0LL;
  }
  if (__PAIR64__(*(unsigned __int8 *)(a2 + 13), *(unsigned __int8 *)(a2 + 12)) != 0x6E00000063LL
    || *(_BYTE *)(a2 + 14) != 118
    || *(_BYTE *)(a2 + 15) != 116
    || *(_BYTE *)(a2 + 16) != 6
    || *(unsigned __int8 *)(a2 + 17) <= 1u)
  {
    uint64_t v62 = *(unsigned __int8 *)(a2 + 12);
    uint64_t v27 = "ucnv_swap(): data format %02x.%02x.%02x.%02x (format version %02x.%02x) is not recognized as an ICU .cnv conversion table\n";
LABEL_18:
    udata_printError(a1, (uint64_t)v27, v14, v15, v16, v17, v18, v19, v62);
LABEL_19:
    uint64_t result = 0LL;
    int v26 = 16;
    goto LABEL_20;
  }

  int v21 = v13;
  uint64_t v22 = (char *)(a2 + v13);
  if (a4) {
    __int128 v23 = (char *)a4 + v13;
  }
  else {
    __int128 v23 = 0LL;
  }
  if ((v10 & 0x80000000) != 0)
  {
    unsigned int v28 = (*(uint64_t (**)(void))(a1 + 16))(*(unsigned int *)v22);
    uint64_t v29 = v28;
    uint64_t v30 = &v23[v28];
  }

  else
  {
    uint64_t v24 = (v10 - v13);
    if ((int)v24 < 100
      || (unsigned int v25 = (*(uint64_t (**)(void))(a1 + 16))(*(unsigned int *)v22),
          uint64_t v10 = v24 - v25,
          v24 < v25))
    {
      udata_printError( a1,  (uint64_t)"ucnv_swap(): too few bytes (%d after header) for an ICU .cnv conversion table\n",  v14,  v15,  v16,  v17,  v18,  v19,  v24);
LABEL_16:
      uint64_t result = 0LL;
      int v26 = 8;
LABEL_20:
      *a5 = v26;
      return result;
    }

    unsigned int v28 = v25;
    if (v22 != v23) {
      memcpy(v23, v22, v25);
    }
    (*(void (**)(uint64_t, char *, uint64_t, char *, int *))(a1 + 56))(a1, v22, 4LL, v23, a5);
    (*(void (**)(uint64_t, unsigned int *, uint64_t, char *, int *))(a1 + 56))( a1,  (unsigned int *)v22 + 16,  4LL,  v23 + 64,  a5);
    size_t v32 = strlen(v22 + 4);
    (*(void (**)(uint64_t, unsigned int *, size_t, char *, int *))(a1 + 72))( a1,  (unsigned int *)v22 + 1,  v32,  v23 + 4,  a5);
    if (*a5 >= 1)
    {
      udata_printError(a1, (uint64_t)"ucnv_swap(): error swapping converter name\n", v14, v15, v16, v17, v18, v19, v62);
      return 0LL;
    }

    uint64_t v29 = v28;
    uint64_t v30 = &v23[v28];
  }

  if (v23) {
    int v31 = v30;
  }
  else {
    int v31 = 0LL;
  }
  if (v22[69] != 2)
  {
    udata_printError( a1,  (uint64_t)"ucnv_swap(): unknown conversionType=%d!=UCNV_MBCS\n",  v14,  v15,  v16,  v17,  v18,  v19,  v22[69]);
    goto LABEL_19;
  }

  if (v10 <= 0x27)
  {
LABEL_27:
    udata_printError( a1,  (uint64_t)"ucnv_swap(): too few bytes (%d after headers) for an ICU MBCS .cnv conversion table\n",  v14,  v15,  v16,  v17,  v18,  v19,  v10);
    goto LABEL_16;
  }

  unint64_t v33 = &v22[v29];
  unsigned int v34 = v22[v29];
  if (v34 == 5)
  {
    if (v33[1] < 3u)
    {
      unsigned int v34 = 5;
    }

    else
    {
      unsigned int v35 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v33 + 8));
      if ((v35 & 0xFF80) == 0)
      {
        int v78 = (v35 >> 6) & 1;
        unsigned int v73 = 4 * (v35 & 0x3F);
        unsigned int v75 = v33[1];
        goto LABEL_45;
      }

      unsigned int v34 = *v33;
    }

LABEL_43:
    udata_printError( a1,  (uint64_t)"ucnv_swap(): unsupported _MBCSHeader.version %d.%d\n",  v14,  v15,  v16,  v17,  v18,  v19,  v34);
    goto LABEL_19;
  }

  if (v34 != 4) {
    goto LABEL_43;
  }
  if (!v33[1])
  {
    unsigned int v34 = 4;
    goto LABEL_43;
  }

  unsigned int v75 = v33[1];
  int v78 = 0;
  unsigned int v73 = 32;
LABEL_45:
  int v71 = v33[2];
  int v68 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v33 + 1));
  int v67 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v33 + 2));
  int v69 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v33 + 3));
  int v70 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v33 + 4));
  int v74 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v33 + 5));
  unsigned int v36 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v33 + 6));
  unsigned int v37 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v33 + 7));
  unsigned int v77 = v36;
  if (v78 && !(_BYTE)v36)
  {
    uint64_t v27 = "ucnv_swap(): unsupported combination of makeconv --small with SBCS\n";
    goto LABEL_18;
  }

  unsigned int v66 = v37;
  if (v36 > 0xEu || ((1 << v36) & 0x530F) == 0)
  {
    udata_printError( a1,  (uint64_t)"ucnv_swap(): unsupported MBCS output type 0x%x\n",  v14,  v15,  v16,  v17,  v18,  v19,  v36);
    goto LABEL_19;
  }

  int v64 = v36;
  if (v75 >= 3 && (_BYTE)v36)
  {
    unsigned int v38 = ((v71 << 8) + 256) >> 5;
    if (!v71) {
      unsigned int v38 = 0;
    }
    else {
      unsigned int v39 = v38;
    }
    unsigned int v65 = v39;
  }

  else
  {
    unsigned int v65 = 0;
  }

  unsigned int v72 = v36 >> 8;
  if (v36 > 0xFF)
  {
    if ((v10 & 0x80000000) == 0 && (int)v10 < (int)(v72 + 128))
    {
      udata_printError( a1,  (uint64_t)"ucnv_swap(): too few bytes (%d after headers) for an ICU MBCS .cnv conversion table with extension data\n",  v14,  v15,  v16,  v17,  v18,  v19,  v10);
      goto LABEL_16;
    }

    uint64_t v63 = (unsigned int *)&v33[v72];
    int v41 = udata_readInt32(a1, v63[31]) + v72;
  }

  else
  {
    uint64_t v63 = 0LL;
    unsigned int v40 = v37;
    if (v78) {
      unsigned int v40 = 0;
    }
    int v41 = v40 + v74 + v65;
  }

  int v76 = v41;
  if ((v10 & 0x80000000) == 0)
  {
    if (v33 != v31) {
      memcpy(v31, v33, v41);
    }
    (*(void (**)(uint64_t, unsigned __int8 *, void, char *, int *))(a1 + 56))( a1,  (unsigned __int8 *)v33 + 4,  v73 - 4,  v31 + 4,  a5);
    if (v36 == 14)
    {
      size_t v42 = strlen(&v33[v73]);
      (*(void (**)(uint64_t, char *, size_t, char *, int *))(a1 + 72))(a1, &v33[v73], v42, &v31[v73], a5);
      goto LABEL_91;
    }

    (*(void (**)(uint64_t, char *, void, char *, int *))(a1 + 56))( a1,  &v33[v73],  (v68 << 10),  &v31[v73],  a5);
    (*(void (**)(uint64_t, char *, void, char *, int *))(a1 + 56))( a1,  &v33[v73 & 0x3FF | (v68 << 10)],  (8 * v67),  &v31[v73 & 0x3FF | (v68 << 10)],  a5);
    uint64_t v43 = (void (**)(uint64_t, unsigned __int8 *, uint64_t, char *, int *))(a1 + 48);
    (*(void (**)(uint64_t, char *, void, char *, int *))(a1 + 48))( a1,  &v33[v69],  (v70 - v69),  &v31[v69],  a5);
    if (!v64)
    {
      (*(void (**)(uint64_t, char *, void, char *, int *))(a1 + 48))( a1,  &v33[v70],  v74 - v70 + v66,  &v31[v70],  a5);
LABEL_91:
      if (v77 >= 0x100)
      {
        uint64_t v46 = (unsigned __int8 *)&v33[v72];
        int v47 = &v31[v72];
        int Int32 = udata_readInt32(a1, v63[1]);
        int v49 = udata_readInt32(a1, v63[2]);
        (*(void (**)(uint64_t, unsigned __int8 *, void, char *, int *))(a1 + 56))( a1,  &v46[Int32],  (4 * v49),  &v47[Int32],  a5);
        int v50 = udata_readInt32(a1, v63[3]);
        int v51 = udata_readInt32(a1, v63[4]);
        (*(void (**)(uint64_t, unsigned __int8 *, void, char *, int *))(a1 + 48))( a1,  &v46[v50],  (2 * v51),  &v47[v50],  a5);
        int v52 = udata_readInt32(a1, v63[5]);
        int v53 = udata_readInt32(a1, v63[7]);
        (*(void (**)(uint64_t, unsigned __int8 *, void, char *, int *))(a1 + 48))( a1,  &v46[v52],  (2 * v53),  &v47[v52],  a5);
        int v54 = udata_readInt32(a1, v63[6]);
        (*(void (**)(uint64_t, unsigned __int8 *, void, char *, int *))(a1 + 56))( a1,  &v46[v54],  (4 * v53),  &v47[v54],  a5);
        int v55 = udata_readInt32(a1, v63[10]);
        int v56 = udata_readInt32(a1, v63[12]);
        (*(void (**)(uint64_t, unsigned __int8 *, void, char *, int *))(a1 + 48))( a1,  &v46[v55],  (2 * v56),  &v47[v55],  a5);
        int v57 = udata_readInt32(a1, v63[13]);
        int v58 = udata_readInt32(a1, v63[14]);
        (*(void (**)(uint64_t, unsigned __int8 *, void, char *, int *))(a1 + 48))( a1,  &v46[v57],  (2 * v58),  &v47[v57],  a5);
        int v59 = udata_readInt32(a1, v63[15]);
        int v60 = udata_readInt32(a1, v63[16]);
        (*(void (**)(uint64_t, unsigned __int8 *, void, char *, int *))(a1 + 56))( a1,  &v46[v59],  (4 * v60),  &v47[v59],  a5);
        int v61 = udata_readInt32(a1, *v63);
        (*(void (**)(uint64_t, unsigned __int8 *, void, char *, int *))(a1 + 56))( a1,  v46,  (4 * v61),  v47,  a5);
      }

      return v28 + v21 + v76;
    }

    if ((v22[79] & 1) != 0) {
      uint64_t v44 = 2176LL;
    }
    else {
      uint64_t v44 = 128LL;
    }
    (*(void (**)(uint64_t, char *, uint64_t, char *, int *))(a1 + 48))(a1, &v33[v70], v44, &v31[v70], a5);
    (*(void (**)(uint64_t, char *, void, char *, int *))(a1 + 56))( a1,  &v33[(v44 + v70)],  (v74 - (v44 + v70)),  &v31[(v44 + v70)],  a5);
    if (v78) {
      uint64_t v45 = 0LL;
    }
    else {
      uint64_t v45 = v66;
    }
    if (v77 > 7u)
    {
      if (v77 != 8 && v77 != 12)
      {
LABEL_89:
        if (v65) {
          (*(void (**)(uint64_t, char *, void, char *, int *))(a1 + 48))( a1,  &v33[(v45 + v74)],  v65,  &v31[(v45 + v74)],  a5);
        }
        goto LABEL_91;
      }
    }

    else if (v77 != 1)
    {
      uint64_t v43 = (void (**)(uint64_t, unsigned __int8 *, uint64_t, char *, int *))(a1 + 56);
    }

    (*v43)(a1, (unsigned __int8 *)&v33[v74], v45, &v31[v74], a5);
    goto LABEL_89;
  }

  return v28 + v21 + v76;
}

        unsigned int v37 = v6;
        unsigned int v38 = &v6[v22];
        unsigned int v39 = v4;
        int v26 = *(void *)(v36 + 48);
        *(void *)(v36 + 48) = *(void *)(v34 + 8LL * v11);
        uint64_t result = sub_180838280((uint64_t)__dst, a2);
        uint64_t v27 = v36;
        int v6 = v37;
        *(void *)(v36 + 48) = v26;
        int v4 = v39;
        if (*a2 >= 1)
        {
          if (*a2 == 15)
          {
            unint64_t v33 = *(char *)(v27 + 93);
            if (v33 >= 1)
            {
              uint64_t result = (size_t)memcpy( (void *)(a1[1] + 144LL),  (const void *)(v27 + 144),  *(unsigned __int8 *)(v27 + 93));
              LOBYTE(v33) = *(_BYTE *)(v27 + 93);
            }

            *(_BYTE *)(a1[1] + 93LL) = v33;
            *(_BYTE *)(v27 + 93) = 0;
          }

          goto LABEL_57;
        }
      }
    }

    else if (v6 < v5)
    {
      uint64_t v24 = v5 - v6;
      while (1)
      {
        unsigned int v25 = *v6;
        if (v25 == 27) {
          break;
        }
        if ((unint64_t)v4 >= v12)
        {
          *a2 = 15;
          goto LABEL_8;
        }

        ++v6;
        *v4++ = v25;
        if (!--v24)
        {
          int v6 = v5;
          goto LABEL_8;
        }
      }
    }
  }

  uint64_t v16 = 0LL;
  uint64_t v17 = &v6[-v14];
  uint64_t v18 = (unsigned __int8 *)&unk_180A24F79;
  while (2)
  {
    uint64_t v19 = 0LL;
    char v20 = 27;
    while (v19 < v14)
    {
      int v21 = *(unsigned __int8 *)(v13 + 65 + v19);
LABEL_20:
      if (v21 != v20) {
        goto LABEL_24;
      }
      char v20 = v18[v19++];
      if (!v20)
      {
        if (*a2 != 11)
        {
          if ((_DWORD)v16 != -2)
          {
            uint64_t result = strlen((const char *)&unk_180A24F78 + 5 * (int)v16);
            v6 += (int)result - (int)v14;
            *(_BYTE *)(v13 + 64) = 0;
            int v11 = v16;
            goto LABEL_29;
          }

          goto LABEL_53;
        }

        goto LABEL_48;
      }
    }

    if (&v17[v19] < v5)
    {
      int v21 = (char)v17[v19];
      goto LABEL_20;
    }

    *a2 = 11;
LABEL_24:
    ++v16;
    v18 += 5;
    if (v16 != 20) {
      continue;
    }
    break;
  }

  if (*a2 != 11)
  {
LABEL_53:
    if (!(_DWORD)v14) {
      ++v6;
    }
    unsigned int v28 = 12;
    goto LABEL_56;
  }

  if (v28 == 3)
  {
    uint64_t v27 = sub_180846CE4(v10, (uint64_t)v89[0], v9, (uint64_t)a2, (uint64_t)a3, a4, a5, &v81, (int *)a6);
  }

  else if (*(int *)a6 > 0)
  {
    goto LABEL_81;
  }

  unsigned int v37 = v81;
  if (v81 <= 0) {
    unsigned int v37 = 4;
  }
  *a6 = v37;
LABEL_81:
  if (BYTE4(v84[1])) {
    uprv_free(v84[0]);
  }
  if (BYTE4(v86[1])) {
    uprv_free(v86[0]);
  }
  if (BYTE4(v88[1])) {
    uprv_free(v88[0]);
  }
  if (BYTE4(v89[1])) {
    uprv_free(v89[0]);
  }
  return v27;
}

          uint64_t result = 0LL;
          if ((c - 8294) <= 2)
          {
            LOBYTE(v16) = v16 | 0x80;
            ++*a7;
            LODWORD(v14) = *a6;
          }

          uint64_t v18 = (int)v14 + 1LL;
          *a6 = v18;
          *(_BYTE *)(a5 + v18) = v16;
          break;
      }

      return 1LL;
    }

                        if (v27 == -1 && !v9) {
                          break;
                        }
                        ++v29;
                        uint64_t v24 = v60;
                        if (v27 != -1 && v29 >= v27) {
                          break;
                        }
                        continue;
                    }

                    break;
                  }
                }
              }

              else
              {
                int v50 = 0LL;
                do
                {
                  int v51 = v50 + 1;
                  sub_180887FB8(aNull[v50], a1, &v63, a2, a3);
                  int v50 = v51;
                }

                while (v51 != 8);
              }

              sub_180887FB8(91LL, a1, &v63, a2, a3);
              for (n = 28LL; n != -4; n -= 4LL)
                sub_180887FB8(a0123456789abcd_0[(v27 >> n) & 0xFLL], a1, &v63, a2, 0);
              sub_180887FB8(93LL, a1, &v63, a2, a3);
              UErrorCode v5 = a4;
            }

            break;
        }
      }

      goto LABEL_2;
    }

    sub_180887FB8((char)v15, a1, &v63, a2, a3);
    ++v12;
    v14 += 0x100000000LL;
  }

  while (v15);
  LODWORD(v53) = v63;
  if (!v63)
  {
    if (a3 < 1)
    {
      LODWORD(v53) = 0;
    }

    else
    {
      int v53 = 0LL;
      do
      {
        ++v53;
      }

      while (a3 != (_DWORD)v53);
    }
  }

  return (v53 + 1);
}

  uint64_t result = sub_1808D5A3C((__int16 *)v47, v44, v46);
  if ((v22 & 1) == 0)
  {
    if ((result & 0x80000000) != 0) {
      goto LABEL_45;
    }
LABEL_48:
    *a6 = v24 + 1;
    goto LABEL_49;
  }

    uint64_t v14 = v18;
    goto LABEL_44;
  }

  if (v10 >= 3.40282357e38) {
    uint64_t v15 = 2139095040;
  }
  else {
    uint64_t v15 = 2139095039;
  }
  uint64_t v14 = *(float *)&v15;
  if ((result & 1) == 0) {
    goto LABEL_32;
  }
LABEL_44:
  if (v12 != v14)
  {
    if (v12 == 0.0)
    {
      uint64_t v19 = 0x10000000000000LL;
      char v20 = -202;
    }

    else
    {
      if ((LODWORD(v12) & 0x7F800000) != 0) {
        int v21 = (2 * (LODWORD(v12) & 0x7FFFFF)) | 0x1000000;
      }
      else {
        int v21 = 2 * (LODWORD(v12) & 0x7FFFFF);
      }
      uint64_t v19 = v21 | 1u;
      if ((LODWORD(v12) & 0x7F800000) != 0) {
        char v20 = (LODWORD(v12) >> 23) - 151;
      }
      else {
        char v20 = -150;
      }
    }

    return sub_1808D911C(a1, a2, v3, v19, v20);
  }

  return result;
}

  int v31 = (icu::UnicodeString *)icu::UMemory::operator new(v16, (icu::UMemory *)0x40, v15);
  size_t v32 = v31;
  if (v31)
  {
    icu::UnicodeString::UnicodeString(v31, &v39);
  }

  else if (*(int *)a3 <= 0)
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }

  icu::UVector::adoptElement(v7, v32, a3);
  int v26 = *(unsigned int *)a3;
  if ((int)v26 >= 1)
  {
LABEL_50:
    icu::UnicodeString::~UnicodeString((void *)v26, (icu::UnicodeString *)&v39);
    return (uint64_t *)(*(uint64_t (**)(icu::UVector *))(*(void *)v7 + 8LL))(v7);
  }

  *((void *)v34 + 10) = v7;
  icu::VTimeZone::parse(v34, a3);
  return (uint64_t *)icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v39);
}

BOOL sub_180829188(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  return *(unsigned __int16 *)a4 >= 0x14u
      && !a4[4]
      && !a4[5]
      && a4[6] == 2
      && a4[8] == 99
      && a4[9] == 110
      && a4[10] == 118
      && a4[11] == 116
      && a4[12] == 6;
}

void *ucnv_cbFromUWriteBytes(void *result, char *a2, int a3, int a4, int *a5)
{
  if (*a5 <= 0) {
    return (void *)sub_180829514(result[1], a2, a3, result + 4, result[5], result + 6, a4, a5);
  }
  return result;
}

uint64_t ucnv_cbFromUWriteUChars(uint64_t result, unint64_t *a2, unint64_t a3, int a4, int *a5)
{
  if (*a5 <= 0)
  {
    uint64_t v9 = result;
    uint64_t v10 = (uint64_t *)(result + 32);
    uint64_t v11 = *(void *)(result + 32);
    uint64_t result = ucnv_fromUnicode( *(void *)(result + 8),  (uint64_t *)(result + 32),  *(void *)(result + 40),  a2,  a3,  0LL,  0,  a5);
    __int128 v12 = (_DWORD *)v10[2];
    if (v12)
    {
      uint64_t v13 = *v10;
      if (*v10 != v11)
      {
        do
        {
          *v12++ = a4;
          ++v11;
        }

        while (v11 != v13);
        *(void *)(v9 + 48) = v12;
      }
    }

    if (*a5 == 15)
    {
      int v16 = 0;
      uint64_t result = *(void *)(v9 + 8);
      unint64_t v17 = result + *(char *)(result + 91) + 104;
      unint64_t v14 = result + 136;
      if (v17 >= result + 136 {
        || (*(_BYTE *)(result + 9icu::UVector32::~UVector32(this + 1) = 0,
      }
            uint64_t result = ucnv_fromUnicode(result, (uint64_t *)&v17, result + 136, a2, a3, 0LL, 0, &v16),
            unint64_t v15 = v17,
            *(_BYTE *)(*(void *)(v9 + 8) + 91LL) = v17 - *(void *)(v9 + 8) - 104,
            v15 >= v14)
        || v16 == 15)
      {
        *a5 = 5;
      }
    }
  }

  return result;
}

uint64_t ucnv_cbFromUWriteSub(uint64_t result, int a2, int *a3)
{
  if (*a3 <= 0)
  {
    uint64_t v4 = *(void *)(result + 8);
    int v5 = *(char *)(v4 + 89);
    if (*(_BYTE *)(v4 + 89))
    {
      if (v5 < 0)
      {
        return ucnv_cbFromUWriteUChars(result, &v13, *(void *)(v4 + 40) - 2LL * *(char *)(v4 + 89), a2, a3);
      }

      else
      {
        uint64_t v7 = *(uint64_t (**)(void))(*(void *)(*(void *)(v4 + 48) + 32LL) + 104LL);
        if (v7)
        {
          return v7();
        }

        else
        {
          int v8 = (char *)(v4 + 94);
          if (*(_BYTE *)(v4 + 94) && *(unsigned __int16 *)(v4 + 140) <= 0xFFu)
          {
            uint64_t v9 = (void *)(result + 32);
            unint64_t v10 = *(void *)(result + 40);
            uint64_t v11 = (void *)(result + 48);
            uint64_t v12 = *(void *)(result + 8);
            int v5 = 1;
          }

          else
          {
            int v8 = *(char **)(v4 + 40);
            uint64_t v9 = (void *)(result + 32);
            unint64_t v10 = *(void *)(result + 40);
            uint64_t v11 = (void *)(result + 48);
            uint64_t v12 = *(void *)(result + 8);
          }

          return sub_180829514(v12, v8, v5, v9, v10, v11, a2, a3);
        }
      }
    }
  }

  return result;
}

uint64_t ucnv_cbToUWriteUChars(uint64_t result, __int16 *a2, int a3, int a4, int *a5)
{
  if (*a5 <= 0) {
    return sub_1808295BC( *(void *)(result + 8),  a2,  a3,  (_WORD **)(result + 32),  *(void *)(result + 40),  (void *)(result + 48),  a4,  a5);
  }
  return result;
}

uint64_t ucnv_cbToUWriteSub(uint64_t a1, int a2, int *a3)
{
  uint64_t result = *(void *)(a1 + 8);
  if (*(_BYTE *)(result + 90) == 1 && *(_BYTE *)(result + 94))
  {
    if (*a3 < 1)
    {
      int v6 = (__int16 *)&unk_180A24F0E;
      return sub_1808295BC(result, v6, 1, (_WORD **)(a1 + 32), *(void *)(a1 + 40), (void *)(a1 + 48), a2, a3);
    }
  }

  else if (*a3 <= 0)
  {
    int v6 = (__int16 *)&unk_180A24F10;
    return sub_1808295BC(result, v6, 1, (_WORD **)(a1 + 32), *(void *)(a1 + 40), (void *)(a1 + 48), a2, a3);
  }

  return result;
}

uint64_t sub_1808294C0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(a2 + 16))(*(void *)a2, 0LL, 1114111LL);
}

uint64_t sub_1808294D4(uint64_t a1, void *a2)
{
  return ((uint64_t (*)(void, uint64_t, uint64_t))a2[2])(*a2, 57344LL, 1114111LL);
}

uint64_t sub_180829514( uint64_t result, char *a2, int a3, void *a4, unint64_t a5, void *a6, int a7, _DWORD *a8)
{
  int v8 = (_BYTE *)*a4;
  if (a6 && (uint64_t v9 = (_DWORD *)*a6) != 0LL)
  {
    if (a3 >= 1)
    {
      do
      {
        unsigned int v10 = a3;
        char v11 = *a2++;
        *v8++ = v11;
        *v9++ = a7;
        --a3;
      }

      while (v10 >= 2);
    }

    *a6 = v9;
  }

  else if (a3 >= 1)
  {
    do
    {
      unsigned int v12 = a3;
      char v13 = *a2++;
      *v8++ = v13;
      --a3;
    }

    while (v12 >= 2);
  }

  *a4 = v8;
  if (a3 >= 1)
  {
    if (result)
    {
      unint64_t v14 = (_BYTE *)(result + 104);
      *(_BYTE *)(result + 9icu::UVector32::~UVector32(this + 1) = a3;
      unsigned int v15 = a3 + 1;
      do
      {
        char v16 = *a2++;
        *v14++ = v16;
        --v15;
      }

      while (v15 > 1);
    }

    *a8 = 15;
  }

  return result;
}

uint64_t sub_1808295BC( uint64_t result, __int16 *a2, int a3, _WORD **a4, unint64_t a5, void *a6, int a7, _DWORD *a8)
{
  int v8 = *a4;
  if (a6 && (uint64_t v9 = (_DWORD *)*a6) != 0LL)
  {
    if (a3 >= 1)
    {
      do
      {
        unsigned int v10 = a3;
        __int16 v11 = *a2++;
        *v8++ = v11;
        *v9++ = a7;
        --a3;
      }

      while (v10 >= 2);
    }

    *a6 = v9;
  }

  else if (a3 >= 1)
  {
    do
    {
      unsigned int v12 = a3;
      __int16 v13 = *a2++;
      *v8++ = v13;
      --a3;
    }

    while (v12 >= 2);
  }

  *a4 = v8;
  if (a3 >= 1)
  {
    if (result)
    {
      unint64_t v14 = (_WORD *)(result + 144);
      *(_BYTE *)(result + 93) = a3;
      unsigned int v15 = a3 + 1;
      do
      {
        __int16 v16 = *a2++;
        *v14++ = v16;
        --v15;
      }

      while (v15 > 1);
    }

    *a8 = 15;
  }

  return result;
}

uint64_t sub_180829664( uint64_t result, unsigned int a2, unint64_t *a3, unint64_t a4, _DWORD **a5, int a6, _DWORD *a7)
{
  uint64_t v7 = (_WORD *)*a3;
  int v8 = (_WORD *)*a3;
  if (*a3 >= a4) {
    goto LABEL_13;
  }
  if ((int)a2 < 0x10000)
  {
    int v9 = 0;
    _WORD *v8 = a2;
    a2 = -1;
LABEL_7:
    uint64_t v11 = 1LL;
    goto LABEL_8;
  }

  _WORD *v8 = (a2 >> 10) - 10304;
  unsigned int v10 = v8 + 1;
  if ((unint64_t)v10 >= a4)
  {
    int v9 = 0;
    a2 = a2 & 0x3FF | 0xDC00;
    goto LABEL_7;
  }

  _WORD *v10 = a2 & 0x3FF | 0xDC00;
  int v9 = 1;
  a2 = -1;
  uint64_t v11 = 2LL;
LABEL_8:
  int v8 = &v7[v11];
  if (a5)
  {
    unsigned int v12 = *a5;
    if (*a5)
    {
      *unsigned int v12 = a6;
      __int16 v13 = v12 + 1;
      if (v9)
      {
        __int16 v13 = v12 + 2;
        v12[1] = a6;
      }

      *a5 = v13;
    }
  }

void sub_180829738(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  int v6 = uprv_malloc(0xA8uLL);
  *(void *)(a1 + 16) = v6;
  if (v6)
  {
    uint64_t v7 = v6;
    memset(v10, 0, sizeof(v10));
    uint64_t v9 = 0LL;
    memset(v8, 0, sizeof(v8));
    LODWORD(v8[0]) = 40;
    *int v6 = 0LL;
    v6[1] = sub_180827C48("icu-internal-compound-s1", v10, v8, a3);
    _DWORD v7[2] = sub_180827C48("icu-internal-compound-s2", v10, v8, a3);
    v7[3] = sub_180827C48("icu-internal-compound-s3", v10, v8, a3);
    v7[4] = sub_180827C48("icu-internal-compound-d1", v10, v8, a3);
    v7[5] = sub_180827C48("icu-internal-compound-d2", v10, v8, a3);
    v7[6] = sub_180827C48("icu-internal-compound-d3", v10, v8, a3);
    v7[7] = sub_180827C48("icu-internal-compound-d4", v10, v8, a3);
    v7[8] = sub_180827C48("icu-internal-compound-d5", v10, v8, a3);
    v7[9] = sub_180827C48("icu-internal-compound-d6", v10, v8, a3);
    v7[10] = sub_180827C48("icu-internal-compound-d7", v10, v8, a3);
    v7[11] = sub_180827C48("icu-internal-compound-t", v10, v8, a3);
    v7[12] = sub_180827C48("ibm-915_P100-1995", v10, v8, a3);
    v7[13] = sub_180827C48("ibm-916_P100-1995", v10, v8, a3);
    v7[14] = sub_180827C48("ibm-914_P100-1995", v10, v8, a3);
    v7[15] = sub_180827C48("ibm-874_P100-1995", v10, v8, a3);
    v7[16] = sub_180827C48("ibm-912_P100-1995", v10, v8, a3);
    v7[17] = sub_180827C48("ibm-913_P100-2000", v10, v8, a3);
    v7[18] = sub_180827C48("iso-8859_14-1998", v10, v8, a3);
    v7[19] = sub_180827C48("ibm-923_P100-1998", v10, v8, a3);
    else {
      *((_DWORD *)v7 + 40) = 0;
    }
  }

  else
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }

void sub_180829A2C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    for (uint64_t i = 0LL; i != 160; i += 8LL)
    {
      uint64_t v4 = *(void *)(v1 + i);
      if (v4) {
        sub_180827BA4(v4);
      }
    }

    uprv_free(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0LL;
  }

size_t sub_180829A84(void *a1, int *a2)
{
  int v5 = (unsigned __int8 *)a1[3];
  uint64_t v4 = (_WORD *)a1[4];
  int v6 = (unsigned __int8 *)a1[2];
  uint64_t v7 = *(void *)(a1[1] + 16LL);
  else {
    size_t v8 = *(unsigned __int16 *)a1;
  }
  else {
    size_t v9 = 0LL;
  }
  bzero((char *)__dst + v8, v9);
  size_t result = (size_t)memcpy(__dst, a1, v8);
  __dst[0] = v8;
  uint64_t v34 = v7;
  int v11 = *(_DWORD *)(v7 + 160);
  while (1)
  {
LABEL_8:
    if (v6 >= v5) {
      goto LABEL_57;
    }
    unint64_t v12 = a1[5];
    if ((unint64_t)v4 >= v12)
    {
      int v28 = 15;
LABEL_56:
      *a2 = v28;
      goto LABEL_57;
    }

    uint64_t v13 = a1[1];
    uint64_t v14 = *(char *)(v13 + 64);
    __int16 v15 = (int)v14 <= 0 ? v6 : (unsigned __int8 *)(v13 + 65);
    if (*v15 == 27) {
      break;
    }
LABEL_29:
    if (v11)
    {
      if (v6 < v5)
      {
        int v22 = (_DWORD)v5 - (_DWORD)v6;
        if ((int)v5 - (int)v6 > 1)
        {
          uint64_t v23 = 1LL;
          while (v6[v23] != 27)
          {
            if ((_DWORD)v5 - (_DWORD)v6 == ++v23) {
              goto LABEL_43;
            }
          }

          int v22 = v23;
        }

uint64_t sub_180829D70(uint64_t result, int *a2)
{
  unsigned int v2 = (void *)result;
  uint64_t v3 = *(_BYTE **)(result + 32);
  unint64_t v4 = *(void *)(result + 40);
  uint64_t v5 = *(void *)(result + 8);
  int v6 = *(unsigned __int16 **)(result + 16);
  unint64_t v7 = *(void *)(result + 24);
  char v58 = *(_BYTE *)(v5 + 63);
  unsigned int v60 = 0;
  memset(v61, 0, 7);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v9 = *(unsigned int *)(v8 + 160);
  int v10 = *(_DWORD *)(v5 + 84);
  if (v10) {
    BOOL v11 = (unint64_t)v3 >= v4;
  }
  else {
    BOOL v11 = 1;
  }
  uint64_t v56 = v5;
  int v57 = a2;
  unint64_t v54 = v7;
  unint64_t v55 = v4;
  if (v11) {
    goto LABEL_6;
  }
  while ((unint64_t)v6 < v7)
  {
    int v13 = *v6;
    if ((v13 & 0xFC00) != 0xDC00)
    {
LABEL_72:
      *a2 = 12;
      break;
    }

    ++v6;
    int v10 = v13 + (v10 << 10) - 56613888;
    *(_DWORD *)(v5 + 84) = 0;
    do
    {
      uint64_t v14 = 0LL;
      if (v10 > 0xA || ((1 << v10) & 0x601) == 0)
      {
        uint64_t v14 = 0LL;
        if ((v10 & 0xFFFFFF60) - 32 >= 0x60)
        {
          if ((v10 - 258) >= 0x10 || (uint64_t v14 = 16LL, ((0xFC3Fu >> (v10 - 2)) & 1) == 0))
          {
            unsigned int v32 = v10 & 0xFFFFFFFC;
            uint64_t v14 = 16LL;
            if ((v10 & 0xFFFFFFFC) != 0x118 && (v10 & 0xFFFFFFFB) - 313 >= 2)
            {
              if ((v10 - 321) >= 0x15 || (uint64_t v14 = 16LL, ((0x19804Fu >> (v10 - 65)) & 1) == 0))
              {
                uint64_t v14 = 16LL;
                if (v32 != 344)
                {
                  unsigned int v33 = v10 & 0xFFFFFFFE;
                  if ((v10 & 0xFFFFFFFE) != 0x15E)
                  {
                    uint64_t v14 = 16LL;
                    if (((v10 - 352) > 0x1E || ((1 << (v10 - 96)) & 0x7E03C03F) == 0)
                      && ((v10 - 711) > 0x16 || ((1 << (v10 + 57)) & 0x560001) == 0))
                    {
                      uint64_t v14 = 17LL;
                      if (v32 != 264)
                      {
                        if ((v10 - 284) >= 6)
                        {
                          uint64_t v14 = 17LL;
                        }

                        else
                        {
                          uint64_t v14 = 17LL;
                          if (((0x33u >> (v10 - 28)) & 1) != 0) {
                            goto LABEL_17;
                          }
                        }

                        if (v32 != 292)
                        {
                          if ((v10 - 308) > 0x39
                            || (uint64_t v14 = 17LL, ((1LL << (v10 - 52)) & 0x300030000000003LL) == 0))
                          {
                            uint64_t v14 = 18LL;
                            if (v32 != 372)
                            {
                              uint64_t v14 = 18LL;
                              if (v10 <= 7765)
                              {
                                if ((v10 - 7690) <= 0x37
                                  && ((1LL << (v10 - 10)) & 0xC0000000300003LL) != 0)
                                {
                                  goto LABEL_17;
                                }

                                uint64_t v52 = v5;
                                int v53 = a2;
                                if ((v10 - 338) <= 0x26
                                  && ((1LL << (v10 - 82)) & 0x4000000003LL) != 0)
                                {
LABEL_91:
                                  uint64_t v14 = 19LL;
LABEL_92:
                                  a2 = v53;
                                  uint64_t v5 = v52;
                                  goto LABEL_17;
                                }
                              }

                              else
                              {
                                if ((v10 - 7766) <= 0x2F
                                  && ((1LL << (v10 - 86)) & 0xFC0000300C03LL) != 0
                                  || (v10 - 7922) < 2)
                                {
                                  goto LABEL_17;
                                }

                                uint64_t v52 = v5;
                                int v53 = a2;
                                if (v10 == 8364) {
                                  goto LABEL_91;
                                }
                              }

                              uint64_t v14 = 15LL;
                              a2 = v53;
                              uint64_t v5 = v52;
                              if ((v10 - 3647) >= 0x1D)
                              {
                                if ((v10 - 256) > 0x23
                                  || (uint64_t v14 = 14LL, ((1LL << v10) & 0xC00CC0003LL) == 0))
                                {
                                  int v59 = v6;
                                  uint64_t v14 = 14LL;
                                  if (v32 == 296) {
                                    goto LABEL_124;
                                  }
                                  uint64_t v5 = v56;
                                  a2 = v57;
                                  unint64_t v7 = v54;
                                  unint64_t v4 = v55;
                                  if (v33 != 302)
                                  {
                                    if ((v10 - 310) > 0x3D
                                      || (uint64_t v14 = 14LL, ((1LL << (v10 - 54)) & 0x303F000300F18067LL) == 0))
                                    {
                                      uint64_t v14 = 2LL;
                                      if (v33 != 700)
                                      {
                                        uint64_t v14 = 2LL;
                                        if (v10 == 8213) {
                                          goto LABEL_124;
                                        }
                                        uint64_t v5 = v56;
                                        a2 = v57;
                                        unint64_t v7 = v54;
                                        unint64_t v4 = v55;
                                        if ((v10 - 900) >= 0x4B)
                                        {
                                          if ((v10 - 1548) > 0x13
                                            || (uint64_t v14 = 3LL, ((1 << (v10 - 12)) & 0x88001) == 0))
                                          {
                                            uint64_t v14 = 3LL;
                                            uint64_t v5 = v56;
                                            a2 = v57;
                                            unint64_t v7 = v54;
                                            unint64_t v4 = v55;
                                            uint64_t v14 = 3LL;
                                            if (v10 == 8203) {
                                              goto LABEL_124;
                                            }
                                            uint64_t v5 = v56;
                                            a2 = v57;
                                            unint64_t v7 = v54;
                                            unint64_t v4 = v55;
                                            if ((v10 - 65136) >= 5)
                                            {
                                              uint64_t v14 = 3LL;
                                              uint64_t v5 = v56;
                                              a2 = v57;
                                              unint64_t v7 = v54;
                                              unint64_t v4 = v55;
                                            }

                                            else
                                            {
                                              uint64_t v14 = 3LL;
                                              if (((0x17u >> (v10 - 112)) & 1) != 0) {
                                                goto LABEL_124;
                                              }
                                              uint64_t v5 = v56;
                                              a2 = v57;
                                              unint64_t v7 = v54;
                                              unint64_t v4 = v55;
                                            }

                                            uint64_t v14 = 13LL;
                                            uint64_t v14 = 13LL;
                                            if (v10 == 8215) {
                                              goto LABEL_124;
                                            }
                                            uint64_t v5 = v56;
                                            a2 = v57;
                                            unint64_t v7 = v54;
                                            unint64_t v4 = v55;
                                            if (v10 == 8254) {
                                              goto LABEL_17;
                                            }
                                            uint64_t v14 = 12LL;
                                            if (v10 == 8470)
                                            {
LABEL_124:
                                              uint64_t v5 = v56;
                                              a2 = v57;
                                              unint64_t v7 = v54;
                                              unint64_t v4 = v55;
                                              goto LABEL_17;
                                            }

                                            uint64_t v5 = v56;
                                            a2 = v57;
                                            unint64_t v7 = v54;
                                            unint64_t v4 = v55;
                                            if ((v10 - 1025) >= 0x5F)
                                            {
                                              if ((v10 - 286) > 0x13
                                                || (uint64_t v14 = 1LL, ((1 << (v10 - 30)) & 0xC0003) == 0))
                                              {
                                                uint64_t v14 = 1LL;
                                                if (v32 != 536)
                                                {
                                                  LODWORD(v16) = 0;
LABEL_23:
                                                  uint64_t v21 = 1LL;
                                                  uint64_t v22 = v9;
                                                  uint64_t v23 = v9;
                                                  uint64_t v24 = &byte_180A24F7E;
                                                  while (1)
                                                  {
                                                    size_t result = sub_18083AB3C( *(void *)(v8 + 8 * v21),  v10,  (int *)&v60,  v58);
                                                    ++v21;
                                                    v24 += 5;
                                                    if (v21 == 12)
                                                    {
                                                      uint64_t v9 = v23;
                                                      uint64_t v5 = v56;
                                                      a2 = v57;
                                                      unint64_t v7 = v54;
                                                      unint64_t v4 = v55;
                                                      goto LABEL_32;
                                                    }
                                                  }

                                                  if ((_DWORD)v22 == (_DWORD)v21)
                                                  {
                                                    uint64_t v9 = v22;
                                                    uint64_t v5 = v56;
                                                    a2 = v57;
                                                    int v6 = v59;
                                                  }

                                                  else
                                                  {
                                                    char v34 = *(v24 - 1);
                                                    unsigned int v35 = &v61[v16];
                                                    uint64_t v5 = v56;
                                                    a2 = v57;
                                                    int v6 = v59;
                                                    do
                                                    {
                                                      *v35++ = v34;
                                                      int v36 = *v24++;
                                                      char v34 = v36;
                                                      LODWORD(v16) = v16 + 1;
                                                    }

                                                    while (v36);
                                                    uint64_t v9 = v21;
                                                  }

                                                  unsigned int v37 = v60;
                                                  unsigned int v38 = &v61[(int)v16];
                                                  int v39 = result + 1;
                                                  int v40 = 8 * result - 8;
                                                  unint64_t v7 = v54;
                                                  unint64_t v4 = v55;
                                                  do
                                                  {
                                                    *v38++ = v37 >> v40;
                                                    LODWORD(v16) = v16 + 1;
                                                    --v39;
                                                    v40 -= 8;
                                                  }

                                                  while (v39 > 1);
                                                  goto LABEL_57;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

const char *sub_18082A58C()
{
  return "x11-compound-text";
}

uint64_t sub_18082A598(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v7 = *(void *)(a1 + 16);
  for (uint64_t i = 8LL; i != 160; i += 8LL)
    sub_18083826C(*(void *)(v7 + i), a2, a3, a4);
  ((void (*)(uint64_t, void))a2[1])(*a2, 0LL);
  ((void (*)(uint64_t, uint64_t))a2[1])(*a2, 9LL);
  ((void (*)(uint64_t, uint64_t))a2[1])(*a2, 10LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))a2[2])(*a2, 32LL, 127LL);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2[2])(*a2, 160LL, 255LL);
}

void UCNV_FROM_U_CALLBACK_STOP(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, _DWORD *a7)
{
  if (!a6)
  {
    if (a5 <= 8202)
    {
      if (a5 > 6067)
      {
        int v7 = -6068;
      }

      else
      {
        if (a5 <= 4446)
        {
          if (a5 == 173 || a5 == 847 || a5 == 1564) {
            goto LABEL_17;
          }
          goto LABEL_18;
        }

        int v7 = -4447;
      }

      goto LABEL_18;
    }

LABEL_18:
    if (a5 != 12644
      && (a5 & 0xFFFFFFF0) != 0x2060
      && (a5 & 0xFFFFF000) != 0xE0000
      && (a5 - 119155) >= 8
      && (a5 & 0xFFFFFFFC) != 0x1BCA0
      && (a5 - 65520) >= 9
      && a5 != 65440
      && a5 != 65279
      && (a5 & 0xFFFFFFF0) != 0xFE00)
    {
      return;
    }

      *int v6 = -2;
      uint64_t v14 = v15 + 1;
      if (v13 + v15 + 1 >= v3)
      {
        v13 += v15 + 1;
        goto LABEL_203;
      }
    }

    if (v17 == 217)
    {
      uint64_t v27 = *((_DWORD *)v6 + 11);
      if (v27)
      {
        *v4++ = v27;
        unsigned int v28 = *(_DWORD **)(result + 48);
        if (v28)
        {
          *unsigned int v28 = v13 - v5 + v15;
          *(void *)(result + 48) = v28 + 1;
        }

        *((_DWORD *)v6 + 1icu::UVector32::~UVector32(this + 1) = 0;
      }

      if ((_DWORD)v16 == 232) {
        uint64_t v29 = 32;
      }
      else {
        uint64_t v29 = 8205;
      }
      if ((unint64_t)v4 >= v12)
      {
        int v31 = *(char *)(v2 + 93);
        *(_BYTE *)(v2 + 93) = v31 + 1;
        *(_WORD *)(v2 + 2 * v31 + 144) = v29;
        int v7 = 15;
        *a2 = 15;
      }

      else
      {
        *v4++ = v29;
        unsigned int v30 = *(_DWORD **)(result + 48);
        if (v30)
        {
          *unsigned int v30 = ~(_DWORD)v5 + v13 + v15;
          *(void *)(result + 48) = v30 + 1;
        }
      }

      unint64_t v17 = 65534;
      *int v6 = -2;
LABEL_52:
      if ((int)v16 <= 223)
      {
        if ((_DWORD)v16 == 10 || (_DWORD)v16 == 13)
        {
          *((_BYTE *)v6 + 25) = 1;
          unsigned int v32 = word_180A2616C[v16];
          int v36 = v16;
        }

        else
        {
          if ((_DWORD)v16 == 217)
          {
LABEL_59:
            *int v6 = v16;
            unsigned int v33 = *(_DWORD *)(v2 + 72);
            if (v33 == 0xFFFF) {
              goto LABEL_172;
            }
            char v34 = *((_DWORD *)v6 + 11);
            if (v34)
            {
              if ((unint64_t)v4 >= v12)
              {
                int v39 = *(char *)(v2 + 93);
                *(_BYTE *)(v2 + 93) = v39 + 1;
                *(_WORD *)(v2 + 2 * v39 + 144) = v34;
                int v7 = 15;
                *a2 = 15;
              }

              else
              {
                *v4++ = v34;
                unsigned int v35 = *(_DWORD **)(result + 48);
                if (v35)
                {
                  *unsigned int v35 = v11 + v13 + v15;
                  *(void *)(result + 48) = v35 + 1;
                }
              }

              *((_DWORD *)v6 + 1icu::UVector32::~UVector32(this + 1) = 0;
              unsigned int v33 = *(_DWORD *)(v2 + 72);
            }

            if ((unint64_t)v4 >= v12)
            {
              unint64_t v41 = *(char *)(v2 + 93);
              *(_BYTE *)(v2 + 93) = v41 + 1;
              *(_WORD *)(v2 + 2 * v41 + 144) = v33;
              int v7 = 15;
              *a2 = 15;
            }

            else
            {
              *v4++ = v33;
              int v40 = *(_DWORD **)(result + 48);
              if (v40)
              {
                *int v40 = v10 + v13 + v15;
                *(void *)(result + 48) = v40 + 1;
              }
            }

            goto LABEL_164;
          }

      if (v3 != (_DWORD)v6) {
        return 0xFFFFLL;
      }
      if ((_DWORD)result == 65534)
      {
        uint64_t v18 = *(void *)(a1 + 288);
        if (v18) {
          size_t result = sub_18082B5CC(v18, a2, a3);
        }
        else {
          size_t result = 65534LL;
        }
      }

      break;
    case 6u:
      goto LABEL_18;
    default:
      return 0xFFFFLL;
  }

  return result;
}

  LODWORD(v104) = 0;
  unsigned int v94 = a3;
  if (*a4 > 0) {
    goto LABEL_19;
  }
  *(_DWORD *)&__s[8] = 0;
  *(void *)__s = 0LL;
  signed int Language = uloc_getLanguage((uint64_t)v109[0], __s, 12, (int *)&v104);
  int v31 = (size_t)Language;
  if (!(_DWORD)Language)
  {
LABEL_79:
    (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 16LL))(a2, "und", 3LL);
    goto LABEL_86;
  }

  if (!sub_180850E44(__s, Language))
  {
LABEL_73:
    if (a3)
    {
      *a4 = 1;
      goto LABEL_19;
    }

    goto LABEL_79;
  }

  unsigned int v32 = strlen(__s);
  unsigned int v33 = (const char *)&unk_180A26DF8;
  char v34 = -2LL;
  while (v32 >= strlen(v33))
  {
    if (!strcmp(__s, v33))
    {
      strcpy(__s, v33 + 4);
      int v31 = strlen(__s);
      break;
    }

    v33 += 8;
    v34 += 2LL;
    if (v34 >= 0x9A) {
      break;
    }
  }

  (*(void (**)(uint64_t, char *, size_t))(*(void *)a2 + 16LL))(a2, __s, v31);
LABEL_86:
  int v40 = *a4;
  LODWORD(v104) = 0;
  if (v40 <= 0)
  {
    *(_WORD *)&__s[4] = 0;
    *(_DWORD *)__s = 0;
    Script = uloc_getScript((uint64_t)v109[0], __s, 6, (int *)&v104);
    if ((int)v104 <= 0 && (_DWORD)v104 != -124)
    {
      uint64_t v42 = Script;
      if (sub_180850EA0(__s, Script))
      {
        (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 16LL))(a2, "-", 1LL);
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)a2 + 16LL))(a2, __s, v42);
        goto LABEL_19;
      }
    }

    if (a3)
    {
      *a4 = 1;
      goto LABEL_20;
    }
  }

    v277 = v2;
    if (v1) {
      int v12 = 4096;
    }
    else {
      int v12 = 0x10000;
    }
    int v13 = v12 >> 4;
    uint64_t v14 = v0[6].u32[0];
    if ((int)v14 < 1114112)
    {
      uint64_t v16 = (_DWORD *)&v0[6] + 1;
      unint64_t v17 = v0[6].i32[1];
      if ((int)v14 < 16)
      {
LABEL_25:
        uint64_t v18 = 0;
        goto LABEL_41;
      }
    }

    else
    {
      if (v0[8711].i8[7]) {
        __int16 v15 = (__int32 *)(*(void *)&v0[2] + 4LL * (*(_DWORD *)(*(void *)v0 + 278524LL) + 15));
      }
      else {
        __int16 v15 = (__int32 *)(*(void *)v0 + 278524LL);
      }
      unint64_t v17 = *v15;
      v0[6].i32[1] = *v15;
      uint64_t v16 = (_DWORD *)&v0[6] + 1;
    }

    int v19 = v14 >> 4;
    while (1)
    {
      char v20 = (v19 - 1);
      if (v0[8].i8[v20]) {
        break;
      }
      if (*(_DWORD *)(*(void *)v0 + 4 * v20) != v17) {
        goto LABEL_38;
      }
LABEL_35:
      unsigned int v111 = v19-- <= 1;
      if (v111) {
        goto LABEL_25;
      }
    }

    uint64_t v21 = 0LL;
    uint64_t v22 = *(void *)&v0[2] + 4LL * *(unsigned int *)(*(void *)v0 + 4 * v20);
    while (*(_DWORD *)(v22 + v21) == v17)
    {
      v21 += 4LL;
      if (v21 == 64) {
        goto LABEL_35;
      }
    }

  int v13 = (const UChar *)&v11[2 * a2];
  return icu::UnicodeString::UnicodeString(a4, 0, &v13, a3);
}

                length = v10;
                if ((v7 & 2) == 0) {
                  goto LABEL_13;
                }
                goto LABEL_19;
              }

                length = v10;
                if ((v7 & 2) == 0) {
                  goto LABEL_13;
                }
                goto LABEL_19;
              }

      unint64_t v17 = v20;
LABEL_37:
      char v20 = v17;
    }

    unint64_t v17 = v20;
LABEL_41:
    if ((int)v19 < a7)
    {
      uint64_t v18 = (v19 + 1);
      HIDWORD(v44) = v19;
      uint64_t v27 = (unsigned __int16)v21;
      if ((v21 & 0xFC00) == 0xD800 && (int)v18 < a7)
      {
        unsigned int v28 = *(unsigned __int16 *)(a6 + 2LL * (int)v18);
        uint64_t v29 = (v28 & 0xFC00) == 56320;
        unsigned int v30 = v28 + ((unsigned __int16)v21 << 10) - 56613888;
        uint64_t v18 = v29 ? (v19 + 2) : (v19 + 1);
        if (v29) {
          uint64_t v27 = v30;
        }
      }

      LODWORD(v45) = v18;
      *(void *)int v46 = 0LL;
      int v31 = ucase_toFullUpper(v27, (uint64_t (*)(uint64_t, void))sub_18087C080, (uint64_t)v43, v46, a1);
      if ((v31 & 0x80000000) == 0)
      {
        unsigned int v32 = v31;
        unsigned int v33 = v19 - v17;
        if (a8) {
          icu::Edits::addUnchanged(a8, v19 - v17);
        }
        if ((a2 & 0x4000) != 0)
        {
LABEL_58:
          char v34 = v16;
          goto LABEL_59;
        }

        char v34 = v33 + v16;
LABEL_59:
        if ((v34 & 0x80000000) != 0
          || (uint64_t v16 = sub_18087C17C(a4, v34, a5, v32, *(__int16 **)v46, (int)v18 - (int)v19, a2, a8),
              unint64_t v17 = v18,
              (v16 & 0x80000000) != 0))
        {
LABEL_61:
          uint64_t v14 = 0LL;
          int v13 = a9;
          *a9 = U_INDEX_OUTOFBOUNDS_ERROR;
          int v12 = a5;
          goto LABEL_62;
        }
      }

      continue;
    }

    break;
  }

  int v36 = v19 - v17;
  if ((int)v19 - (int)v17 < 1)
  {
    uint64_t v14 = v16;
    int v13 = a9;
    int v12 = a5;
    goto LABEL_77;
  }

  if (a8) {
    icu::Edits::addUnchanged(a8, v19 - v17);
  }
  int v13 = a9;
  int v12 = a5;
  if ((a2 & 0x4000) != 0)
  {
    uint64_t v14 = v16;
    goto LABEL_77;
  }

  uint64_t v14 = v36 + v16;
LABEL_77:
  if ((v14 & 0x80000000) != 0)
  {
LABEL_78:
    uint64_t v14 = 0LL;
    *int v13 = U_INDEX_OUTOFBOUNDS_ERROR;
  }

  uint64_t v16 = 0LL;
LABEL_19:
  uint64_t v9 = v16;
LABEL_20:
  icu::UnicodeString::doReplace(v12, Char32Start, (v9 - Char32Start), a4, 0, a5);
  unint64_t v17 = *(unsigned __int16 *)(v12 + 8);
  else {
    uint64_t v18 = v17 >> 5;
  }
  if ((v17 & 0x11) != 0)
  {
    int v19 = 0LL;
  }

  else if ((v17 & 2) != 0)
  {
    int v19 = v12 + 10;
  }

  else
  {
    int v19 = *(void *)(v12 + 24);
  }

  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 16) = (int)v18;
  *(_DWORD *)(a1 + 28) = v18;
  size_t result = v18 - v14;
  *(_DWORD *)(a1 + 40) = result + v9;
  *(_DWORD *)(a1 + 44) = v18;
  return result;
}

                uint64_t v14 = *(uint64_t **)(v4 + 144);
                if (v14) {
                  __int16 v15 = *(void *)(v4 + 144);
                }
                else {
                  __int16 v15 = v4;
                }
                uint64_t v16 = *(icu::UVector **)(v15 + 160);
                if (!v16)
                {
                  this = icu::UMemory::operator new(v14, (icu::UMemory *)0x28, v10);
                  if (!this)
                  {
                    return this;
                  }

                  uint64_t v16 = icu::UVector::UVector((icu::UVector *)this, a2);
                  *(void *)(v15 + 160) = v16;
                }

                icu::UVector::addElement(v16, (void *)v11, a2);
                this = (uint64_t *)v2[1];
              }
            }
          }
        }
      }
    }
  }

  return this;
}

          BOOL v11 = 35;
LABEL_19:
          unint64_t v41 = v11;
          icu::UnicodeString::doAppend((uint64_t)&v47, (uint64_t)&v41, 0, 1LL);
          int v13 = (char *)v7 + 64 * v9;
          uint64_t v16 = *((__int16 *)v13 + 4);
          __int16 v15 = (__int16 *)(v13 + 8);
          uint64_t v14 = v16;
          if (v16 < 0) {
            unint64_t v17 = (void *)*((unsigned int *)v7 + 16 * v9 + 3);
          }
          else {
            unint64_t v17 = (void *)(v14 >> 5);
          }
          if ((int)v17 >= 1)
          {
            uint64_t v18 = 0LL;
            int v19 = 0;
            char v20 = (char *)a4 + 64 * v9;
            uint64_t v21 = (unsigned int *)(v20 + 12);
            uint64_t v22 = (char **)(v20 + 24);
            uint64_t v23 = v17;
            while (1)
            {
              uint64_t v24 = (unsigned __int16)*v15;
              unint64_t v25 = *v15 < 0 ? *v21 : v24 >> 5;
              if (v18 >= v25) {
                break;
              }
              uint64_t v26 = &v36[64 * v9];
              if ((v24 & 2) == 0) {
                uint64_t v26 = *v22;
              }
              uint64_t v27 = *(unsigned __int16 *)&v26[2 * v18];
              if (v27 == 39 && v19 == 0)
              {
                LOWORD(v27) = 39;
                unint64_t v41 = 39;
                icu::UnicodeString::doAppend((uint64_t)&v47, (uint64_t)&v41, 0, 1LL);
                int v19 = 0;
LABEL_48:
                unint64_t v41 = v27;
                unsigned int v30 = &v47;
                goto LABEL_49;
              }

              if (v27 != 124 || v19)
              {
                if (v27 == 123)
                {
                  ++v19;
                  goto LABEL_48;
                }

        int v12 = *(unsigned __int16 *)(a1 + 2LL * v8);
        int v13 = (a3 & 0x3FF) + 448;
        do
        {
          v13 += v12 >> 9;
          int v12 = *(unsigned __int16 *)(a1 + 2LL * v13);
        }

        while ((unsigned __int16)(v12 & 0x1FF) < (int)v11);
        if ((v12 & 0x1FF) == v11)
        {
          *a6 = v10;
          uint64_t v8 = v13;
        }

        goto LABEL_22;
      }
    }

    else
    {
      BOOL v11 = *(unsigned __int8 *)(a5 + v9);
      if (*(char *)(a5 + v9) < 0)
      {
        unint64_t v17 = (v11 + 58) < 0xFCu || (_DWORD)v10 == v7;
        if (v17 || *(char *)(a5 + v10) > -65)
        {
          uint64_t v18 = v9 + 2LL;
          if (v11 == 239)
          {
            BOOL v11 = -1;
          }

          else
          {
            BOOL v11 = *(unsigned __int8 *)(a5 + v18) | 0x100;
          }

          LODWORD(v10) = v9 + 3;
          goto LABEL_18;
        }

        BOOL v11 = *(unsigned __int8 *)(a5 + v10) + (v11 << 6) - 12416;
        LODWORD(v10) = v9 + 2;
        if (v11) {
          goto LABEL_18;
        }
        goto LABEL_15;
      }
    }

    if (v11) {
      goto LABEL_18;
    }
    goto LABEL_15;
  }

    *(_BYTE *)(a2 + 12) = 1;
  }

  return result;
}

    uint64_t v5 = 0;
    return v4 + 10 * v5;
  }

  if ((_DWORD)v2 == 1 && !*((_BYTE *)a1 + 9)) {
    goto LABEL_18;
  }
LABEL_4:
  uprv_decContextSetStatus(a2, 128);
  return 0LL;
}

    if (!*((_DWORD *)a4 + 3)) {
      goto LABEL_19;
    }
    goto LABEL_38;
  }

  uint64_t v16 = (__int16)v10;
  unint64_t v17 = v10 >> 5;
  if (v16 < 0) {
    unint64_t v17 = *((_DWORD *)a4 + 3);
  }
  icu::UnicodeString::doReplace((uint64_t)&v28, v17 - 1, 1LL, 0LL, 0, 0LL);
  icu::UnicodeString::doReplace((uint64_t)&v28, 0LL, 1LL, 0LL, 0, 0LL);
LABEL_19:
  uint64_t v18 = WORD4(v28);
  if (SWORD4(v28) < 0)
  {
    if (!HIDWORD(v28)) {
      goto LABEL_21;
    }
  }

  else if (WORD4(v28) <= 0x1Fu)
  {
LABEL_21:
    *uint64_t v9 = a3;
    goto LABEL_40;
  }

  int v19 = (unsigned __int16 *)((unint64_t)&v28 | 0xA);
  if ((BYTE8(v28) & 2) == 0) {
    int v19 = (unsigned __int16 *)*((void *)&v29 + 1);
  }
  char v20 = *v19;
  if (v20 == 37)
  {
    *uint64_t v9 = icu::RuleBasedNumberFormat::findRuleSet( *(icu::RuleBasedNumberFormat **)(a3 + 136),  (const icu::UnicodeString *)&v28,  a5);
    goto LABEL_40;
  }

  LODWORD(v18) = WORD4(v28) >> 5;
  if ((SWORD4(v28) & 0x8000u) == 0) {
    uint64_t v18 = v18;
  }
  else {
    uint64_t v18 = HIDWORD(v28);
  }
  if (!(_DWORD)v18) {
    goto LABEL_38;
  }
  if (v20 != 35)
  {
    if (v20 == 62)
    {
      *(void *)(a1 + 16) = a3;
      *(void *)(a1 + 24) = 0LL;
      goto LABEL_40;
    }

    if (v20 != 48) {
      goto LABEL_38;
    }
  }

  DecimalFormatSymbols = icu::RuleBasedNumberFormat::getDecimalFormatSymbols(*(icu::RuleBasedNumberFormat **)(a3 + 136));
  if (!DecimalFormatSymbols)
  {
    uint64_t v18 = 2LL;
    goto LABEL_39;
  }

  uint64_t v24 = (const icu::DecimalFormatSymbols *)DecimalFormatSymbols;
  unint64_t v25 = (icu::DecimalFormat *)icu::UMemory::operator new(v23, (icu::UMemory *)0x170, v22);
  if (!v25)
  {
    uint64_t v18 = 7LL;
    goto LABEL_39;
  }

  uint64_t v26 = icu::DecimalFormat::DecimalFormat(v25, (const icu::UnicodeString *)&v28, v24, a5);
  uint64_t v18 = *(unsigned int *)a5;
  else {
    (*(void (**)(icu::DecimalFormat *))(*(void *)v26 + 8LL))(v26);
  }
LABEL_40:
  icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)&v28);
  return a1;
}

  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v35);
}

    int v13 = v7;
    goto LABEL_19;
  }

  int v12 = (_OWORD *)(a2 + 64);
  if ((_DWORD)v7) {
    icu::number::Precision::minFraction(v7, (uint64_t)v14);
  }
  else {
    icu::number::Precision::unlimited((uint64_t)v14);
  }
  *int v12 = *(_OWORD *)v14;
  size_t result = *(double *)&v14[12];
  *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)&v14[12];
  return result;
}

  if (v7) {
    uint64_t v14 = ((_DWORD)v13 + v9);
  }
  else {
    uint64_t v14 = 0xFFFFFFFFLL;
  }
  size_t result = icu::StringSegment::length(a1);
  if (v8 >= (int)result)
  {
    if ((_DWORD)v14 == -1)
    {
      size_t result = icu::number::IntegerWidth::zeroFillTo(v13);
    }

    else
    {
      uint64_t v18 = icu::number::IntegerWidth::zeroFillTo(v13);
      int v19 = v16;
      size_t result = icu::number::IntegerWidth::truncateAt((icu::number::IntegerWidth *)&v18, v14);
    }

    *(void *)(a2 + 124) = result;
    *(_BYTE *)(a2 + 132) = v17;
  }

  else
  {
    *a3 = 65811;
  }

  return result;
}

  if (icu::StringSegment::startsWith(this, a1[24])) {
    return 1LL;
  }
  int v10 = 0LL;
  BOOL v11 = 64LL;
  do
  {
    int v12 = v10;
    if (v10 == 9) {
      break;
    }
    int v13 = icu::StringSegment::startsWith(this, (const icu::UnicodeSet *)((char *)a1[24] + v11));
    v11 += 64LL;
    int v10 = v12 + 1;
  }

  while (!v13);
  return v12 < 9;
}

    icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)v25);
    icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v24);
    icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v23);
    icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v29);
    icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)v28);
    icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v27);
  }

    if (!*v8)
    {
      uint64_t v9 = *v7;
      return v9 == 0;
    }

    return 0LL;
  }

  return result;
}

  unint64_t v17 = *((_DWORD *)this + 9);
LABEL_19:
  this[19] = usearch_open(v13, v14, v16, v17, a4[5], (uint64_t)a5, (const icu::Locale *)a6);
  uprv_free(this[1]);
  this[1] = 0LL;
  return this;
}

  unint64_t v17 = *((_DWORD *)this + 9);
LABEL_19:
  this[19] = usearch_open(v13, v14, v16, v17, a4[5], (uint64_t)a5, (const icu::Locale *)a6);
  uprv_free(this[1]);
  this[1] = 0LL;
  return this;
}

  BOOL v11 = *((_DWORD *)this + 9);
LABEL_19:
  int v12 = (void **)usearch_openFromCollator( v7,  v8,  v10,  v11,  *(icu::RuleBasedCollator **)(v5 + 3128),  *((void *)a2 + 2),  &v14);
  this[19] = v12;
  if (v14 <= 0) {
    this[1] = *v12;
  }
  return this;
}

  icu::units::ComplexUnitsConverter::convert(v14 + 8, (uint64_t)a2, (int *)a3, (uint64_t)v20, a5);
  icu::MeasureUnitImpl::copy((icu::MeasureUnitImpl *)(v14 + 264), a3, (uint64_t)&v23);
  sub_1809C3968(a4, (uint64_t)v20, &v23);
  if (v25) {
    uprv_free(v24[11]);
  }
  sub_180850D68((uint64_t)v24);
  return sub_1807DDB98((uint64_t)v20);
}

_BYTE *UCNV_FROM_U_CALLBACK_SKIP( _BYTE *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, _DWORD *a7)
{
  if (a6 <= 2)
  {
    if (a6)
    {
LABEL_3:
      if (result && (a6 || *result != 105)) {
        return result;
      }
LABEL_21:
      *a7 = 0;
      return result;
    }

    if (a5 <= 8202)
    {
      if (a5 > 6067)
      {
        int v7 = -6068;
      }

      else
      {
        if (a5 <= 4446)
        {
          if (a5 == 173 || a5 == 847 || a5 == 1564) {
            goto LABEL_21;
          }
LABEL_22:
          if (a5 == 12644
            || (a5 & 0xFFFFFFF0) == 0x2060
            || (a5 & 0xFFFFF000) == 0xE0000
            || (a5 - 119155) < 8
            || (a5 & 0xFFFFFFFC) == 0x1BCA0
            || (a5 - 65520) < 9
            || a5 == 65440
            || a5 == 65279
            || (a5 & 0xFFFFFFF0) == 0xFE00)
          {
            goto LABEL_21;
          }

          goto LABEL_3;
        }

        int v7 = -4447;
      }

      goto LABEL_22;
    }

    goto LABEL_22;
  }

  return result;
}

_BYTE *UCNV_FROM_U_CALLBACK_SUBSTITUTE( _BYTE *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int *a7)
{
  if (a6 > 2) {
    return result;
  }
  if (!a6)
  {
    if (a5 <= 8202)
    {
      if (a5 > 6067)
      {
        int v7 = -6068;
      }

      else
      {
        if (a5 <= 4446)
        {
          if (a5 == 173 || a5 == 847 || a5 == 1564) {
            goto LABEL_22;
          }
          goto LABEL_23;
        }

        int v7 = -4447;
      }

      goto LABEL_23;
    }

char *UCNV_FROM_U_CALLBACK_ESCAPE( char *result, uint64_t a2, unsigned __int16 *a3, int a4, int a5, int a6, int *a7)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  int v34 = 0;
  uint64_t v33 = 0LL;
  uint64_t v31 = 0LL;
  if (a6 <= 2)
  {
    unsigned int v8 = a5;
    LODWORD(v9) = a4;
    int v12 = result;
    if (a6)
    {
LABEL_3:
      memset(v36, 0, sizeof(v36));
      uint64_t v32 = 0LL;
      uint64_t v30 = 0LL;
      size_t result = (char *)ucnv_setFromUCallBack( *(void **)(a2 + 8),  (uint64_t)UCNV_FROM_U_CALLBACK_SUBSTITUTE,  0LL,  &v33,  &v32,  &v34);
      int v13 = v34;
      if (v34 <= 0)
      {
        if (!v12)
        {
          int v17 = 0;
          uint64_t v9 = v9;
          do
          {
            *(_DWORD *)((char *)v36 + 2 * v17) = 5570597;
            unsigned int v18 = *a3++;
            v17 += uprv_itou((__int16 *)v36 + v17 + 2, 46 - v17, v18, 0x10u, 4LL) + 2;
            --v9;
          }

          while (v9);
LABEL_64:
          unsigned int v35 = v36;
          *a7 = 0;
          ucnv_cbFromUWriteUChars(a2, (unint64_t *)&v35, (unint64_t)v36 + 2 * v17, 0, a7);
          size_t result = (char *)ucnv_setFromUCallBack(*(void **)(a2 + 8), v33, v32, &v31, &v30, &v34);
          int v13 = v34;
          if (v34 < 1) {
            return result;
          }
          goto LABEL_65;
        }

        int v14 = *v12;
        if (v14 <= 82)
        {
          switch(v14)
          {
            case 'C':
              LOWORD(v36[0]) = 92;
              if ((_DWORD)v9 == 2)
              {
                WORD1(v36[0]) = 85;
                unsigned int v23 = v8;
                uint64_t v24 = 8LL;
              }

              else
              {
                WORD1(v36[0]) = 117;
                unsigned int v23 = *a3;
                uint64_t v24 = 4LL;
              }

              int v17 = uprv_itou((__int16 *)v36 + 2, 46, v23, 0x10u, v24) + 2;
              goto LABEL_64;
            case 'D':
              LODWORD(v36[0]) = 2293798;
              if ((_DWORD)v9 != 2) {
                unsigned int v8 = *a3;
              }
              int v25 = uprv_itou((__int16 *)v36 + 2, 46, v8, 0xAu, 0LL);
              int v17 = v25 + 3;
              *((_WORD *)v36 + v25 + 2) = 59;
              goto LABEL_64;
            case 'J':
              if ((int)v9 >= 1)
              {
                int v15 = 0;
                uint64_t v9 = v9;
                do
                {
                  *(_DWORD *)((char *)v36 + 2 * v15) = 7667804;
                  unsigned int v16 = *a3++;
                  v15 += uprv_itou((__int16 *)v36 + v15 + 2, 46 - v15, v16, 0x10u, 4LL) + 2;
                  int v17 = v15;
                  --v9;
                }

                while (v9);
                goto LABEL_64;
              }

_BYTE *UCNV_TO_U_CALLBACK_SKIP(_BYTE *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _DWORD *a6)
{
  if (a5 <= 2 && (!result || !a5 && *result == 105)) {
    *a6 = 0;
  }
  return result;
}

_BYTE *UCNV_TO_U_CALLBACK_SUBSTITUTE(_BYTE *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int *a6)
{
  if (a5 <= 2 && (!result || !a5 && *result == 105))
  {
    *a6 = 0;
    return (_BYTE *)ucnv_cbToUWriteSub(a2, 0, a6);
  }

  return result;
}

char *UCNV_TO_U_CALLBACK_ESCAPE(char *result, uint64_t a2, unsigned __int8 *a3, int a4, int a5, int *a6)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  if (a5 <= 2)
  {
    memset(v31, 0, sizeof(v31));
    if (result)
    {
      int v9 = *result;
      switch(v9)
      {
        case 'X':
          if (a4 >= 1)
          {
            int v16 = 0;
            uint64_t v17 = a4;
            do
            {
              unsigned int v18 = (char *)v31 + 2 * v16;
              *(_DWORD *)unsigned int v18 = 2293798;
              uint64_t v19 = v16 + 3LL;
              *((_WORD *)v18 + 2) = 120;
              unsigned int v20 = *a3++;
              int v21 = uprv_itou((__int16 *)v31 + v19, 45 - v16, v20, 0x10u, 0LL);
              int v16 = v21 + v19 + 1;
              *((_WORD *)v31 + v21 + (int)v19) = 59;
              int v13 = v16;
              --v17;
            }

            while (v17);
            goto LABEL_27;
          }

          break;
        case 'D':
          if (a4 >= 1)
          {
            int v22 = 0;
            uint64_t v23 = a4;
            do
            {
              *(_DWORD *)((char *)v31 + 2 * v22) = 2293798;
              uint64_t v24 = v22 + 2LL;
              unsigned int v25 = *a3++;
              int v26 = uprv_itou((__int16 *)v31 + v24, 46 - v22, v25, 0xAu, 0LL);
              int v22 = v26 + v24 + 1;
              *((_WORD *)v31 + v26 + (int)v24) = 59;
              int v13 = v22;
              --v23;
            }

            while (v23);
            goto LABEL_27;
          }

          break;
        case 'C':
          if (a4 >= 1)
          {
            int v10 = 0;
            uint64_t v11 = a4;
            do
            {
              *(_DWORD *)((char *)v31 + 2 * v10) = 7864412;
              unsigned int v12 = *a3++;
              v10 += uprv_itou((__int16 *)v31 + v10 + 2, 46 - v10, v12, 0x10u, 2LL) + 2;
              int v13 = v10;
              --v11;
            }

            while (v11);
            goto LABEL_27;
          }

          break;
        default:
          if (a4 >= 1)
          {
            uint64_t v27 = 0LL;
            int v28 = (__int16 *)v31 + 2;
            uint64_t v29 = 4LL * a4;
            do
            {
              *((_DWORD *)v28 - icu::UVector32::~UVector32(this + 1) = 5767205;
              unsigned int v30 = *a3++;
              uprv_itou(v28, v27 + 46, v30, 0x10u, 2LL);
              v27 -= 4LL;
              v28 += 4;
            }

            while (v29 + v27);
            int v13 = -(int)v27;
            goto LABEL_27;
          }

          break;
      }
    }

    else if (a4 >= 1)
    {
      int v13 = 0;
      uint64_t v14 = a4;
      do
      {
        *(_DWORD *)((char *)v31 + 2 * v13) = 5767205;
        unsigned int v15 = *a3++;
        v13 += uprv_itou((__int16 *)v31 + v13 + 2, 46 - v13, v15, 0x10u, 2LL) + 2;
        --v14;
      }

      while (v14);
      goto LABEL_27;
    }

    int v13 = 0;
LABEL_27:
    *a6 = 0;
    return (char *)ucnv_cbToUWriteUChars(a2, (__int16 *)v31, v13, 0, a6);
  }

  return result;
}

uint64_t sub_18082B208( uint64_t a1, uint64_t a2, int a3, uint64_t *a4, int a5, unint64_t *a6, unint64_t a7, void *a8, int a9, unsigned __int8 a10, _DWORD *a11)
{
  int v15 = a3;
  unsigned int v29 = 0;
  int v18 = *(unsigned __int8 *)(*(void *)(a1 + 48) + 252LL);
  if (v18 == 12)
  {
    int v19 = *(_DWORD *)(a1 + 76);
  }

  else if (v18 == 219)
  {
    LOBYTE(v19) = 1;
  }

  else
  {
    LOBYTE(v19) = -1;
  }

  unsigned int v20 = (_BYTE *)(a1 + 65);
  int v21 = (char *)*a4;
  int v22 = sub_18082B3A8(a2, (char)v19, a1 + 65, a3, *a4, a5 - *a4, &v29, a10);
  if (v22 < 1)
  {
    if ((v22 & 0x80000000) == 0) {
      return 0LL;
    }
    *(_BYTE *)(a1 + 283) = v15;
    if (v15 < 1)
    {
      int v15 = 0;
    }

    else
    {
      uint64_t v24 = v15;
      do
      {
        v20[185] = *v20;
        ++v20;
        --v24;
      }

      while (v24);
      int v21 = (char *)*a4;
    }

    uint64_t v25 = -v22;
    if (v15 < (int)v25)
    {
      int v26 = (_BYTE *)(a1 + v15 + 250);
      uint64_t v27 = v25 - v15;
      do
      {
        char v28 = *v21++;
        *v26++ = v28;
        --v27;
      }

      while (v27);
    }

    *a4 = (uint64_t)v21;
    *(_BYTE *)(a1 + 282) = -(char)v22;
  }

  else
  {
    *a4 = (uint64_t)&v21[v22 - v15];
    if (v29 >> 20 > 2) {
      sub_1808295BC( a1,  (__int16 *)(a2 + *(int *)(a2 + 12) + 2LL * (v29 & 0x3FFFF)),  (v29 >> 18) - 12,  (_WORD **)a6,  a7,  a8,  a9,  a11);
    }
    else {
      sub_180829664(a1, v29 - 2031616, a6, a7, (_DWORD **)a8, a9, a11);
    }
  }

  return 1LL;
}

uint64_t sub_18082B3A8( uint64_t result, int a2, uint64_t a3, int a4, uint64_t a5, int a6, unsigned int *a7, unsigned __int8 a8)
{
  if (!result) {
    return result;
  }
  uint64_t v8 = result;
  if (!a2)
  {
    if (a4 <= 1)
    {
      if (a6 >= 1) {
        int v10 = 1;
      }
      else {
        int v10 = a6;
      }
      if (a4 == 1) {
        a6 = 0;
      }
      else {
        a6 = v10;
      }
      int v9 = 1;
      goto LABEL_14;
    }

    return 0LL;
  }

  int v9 = a8;
LABEL_14:
  unsigned int v11 = 0;
  int v12 = 0;
  int v13 = 0;
  unsigned int v14 = 0;
  size_t result = 0LL;
  uint64_t v15 = v8 + *(int *)(v8 + 4);
  while (1)
  {
    int v16 = (unsigned int *)(v15 + 4LL * v14);
    unsigned int v19 = *v16;
    uint64_t v17 = v16 + 1;
    unsigned int v18 = v19;
    int v20 = v19 & 0xFFFFFF;
    if ((v19 & 0xFFFFFF) != 0)
    {
      int v21 = (a2 == 0) ^ (v13 + v12 != 1);
      if (a2 < 0) {
        int v21 = 1;
      }
      if (v21)
      {
        unsigned int v11 = v20;
        size_t result = (v13 + v12);
      }

      else
      {
        size_t result = result;
      }
    }

    if (v12 >= a4) {
      break;
    }
    int v22 = v12++;
    uint64_t v23 = a3;
LABEL_25:
    int v24 = HIBYTE(v18);
    unsigned int v25 = *(unsigned __int8 *)(v23 + v22);
    unsigned int v26 = HIBYTE(v17[HIBYTE(v18) - 1]);
    if (v25 < HIBYTE(*v17) || v26 < v25) {
      goto LABEL_60;
    }
    int v28 = HIBYTE(*v17);
    if (v26 - v28 + 1 == v24)
    {
      unsigned int v29 = v17[v25 - v28];
    }

    else
    {
      int v30 = v18 >> 25;
      if (v30)
      {
        int v30 = 0;
        unsigned int v31 = v25 << 24;
        unsigned int v32 = v24;
        while (v32 > 4)
        {
          int v33 = v30 + v24;
          if (v30 + v24 < 0 != __OFADD__(v30, v24)) {
            ++v33;
          }
          int v34 = v33 >> 1;
          else {
            int v30 = v34;
          }
          unsigned int v32 = v24 - v30;
          if (v24 - v30 <= 1) {
            goto LABEL_49;
          }
        }

        if (v31 > v17[v30])
        {
          uint64_t v35 = v30 + 1LL;
          else {
            v30 += 3;
          }
        }
      }

uint64_t sub_18082B5CC(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v7 = 0;
  if (a3 < 1) {
    return 0xFFFFLL;
  }
  int v4 = sub_18082B3A8(a1, -1, a2, a3, 0LL, 0, &v7, 1u);
  if (v7 < 0x300000 && v4 == a3) {
    return v7 - 2031616;
  }
  else {
    return 65534LL;
  }
}

uint64_t sub_18082B63C(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  unsigned int v24 = 0;
  uint64_t v8 = *(void *)(a1 + 48);
  int v9 = *(unsigned __int8 *)(v8 + 252);
  if (v9 == 12)
  {
    int v10 = *(_DWORD *)(a1 + 76);
  }

  else if (v9 == 219)
  {
    LOBYTE(v10) = 1;
  }

  else
  {
    LOBYTE(v10) = -1;
  }

  uint64_t v11 = a1 + 250;
  int v12 = *(char *)(a1 + 282);
  int v13 = *(char **)(a2 + 16);
  uint64_t result = sub_18082B3A8( *(void *)(v8 + 288),  (char)v10,  a1 + 250,  v12,  (uint64_t)v13,  *(_DWORD *)(a2 + 24) - (int)v13,  &v24,  *(_BYTE *)(a2 + 2));
  if ((int)result < 1)
  {
    if ((result & 0x80000000) != 0)
    {
      uint64_t v20 = -(int)result;
      if (v12 < (int)v20)
      {
        int v21 = (_BYTE *)(a1 + v12 + 250);
        uint64_t v22 = v20 - v12;
        do
        {
          char v23 = *v13++;
          *v21++ = v23;
          --v22;
        }

        while (v22);
      }

      *(void *)(a2 + 16) = v13;
      *(_BYTE *)(a1 + 282) = -(char)result;
    }

    else
    {
      uint64_t result = (uint64_t)memcpy((void *)(a1 + 65), (const void *)(a1 + 250), *(char *)(a1 + 283));
      int v17 = *(char *)(a1 + 283);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 283);
      int v18 = *(char *)(a1 + 282);
      char v19 = v18 - v17;
      if (v18 - v17 >= 1) {
        uint64_t result = (uint64_t)memmove((void *)(a1 + 250), (const void *)(v11 + v17), (v18 - v17));
      }
      *(_BYTE *)(a1 + 282) = -v19;
      *a4 = 10;
    }
  }

  else
  {
    if ((int)result >= v12)
    {
      LOBYTE(v16) = 0;
      *(void *)(a2 + 16) = &v13[(int)result - v12];
    }

    else
    {
      int v15 = v12 - result;
      memmove((void *)(a1 + 250), (const void *)(v11 + result), v12 - (int)result);
      int v16 = -v15;
    }

    *(_BYTE *)(a1 + 282) = v16;
    if (v24 >> 20 > 2) {
      return sub_1808295BC( a1,  (__int16 *)(*(void *)(v8 + 288) + *(int *)(*(void *)(v8 + 288) + 12LL) + 2LL * (v24 & 0x3FFFF)),  (v24 >> 18) - 12,  (_WORD **)(a2 + 32),  *(void *)(a2 + 40),  (void *)(a2 + 48),  a3,  a4);
    }
    else {
      return sub_180829664( a1,  v24 - 2031616,  (unint64_t *)(a2 + 32),  *(void *)(a2 + 40),  (_DWORD **)(a2 + 48),  a3,  a4);
    }
  }

  return result;
}

uint64_t sub_18082B838( uint64_t a1, unint64_t a2, int a3, uint64_t *a4, uint64_t a5, void *a6, unint64_t a7, void *a8, int a9, char a10, _DWORD *a11)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  unsigned int v32 = 0;
  int v18 = (__int16 *)*a4;
  int v19 = sub_18082BA84(a2, a3, 0LL, 0, *a4, (unint64_t)(a5 - *a4) >> 1, &v32, *(char *)(a1 + 63), a10);
  if (v19 < 2)
  {
    if (v19 < 0)
    {
      *(_DWORD *)(a1 + 208) = a3;
      if (v19 <= 0xFFFFFFFD)
      {
        unsigned int v29 = (_WORD *)(a1 + 212);
        uint64_t v30 = (-2 - v19);
        do
        {
          __int16 v31 = *v18++;
          *v29++ = v31;
          --v30;
        }

        while (v30);
      }

      *a4 = (uint64_t)v18;
      *(_BYTE *)(a1 + 28icu::UVector32::~UVector32(this + 1) = -2 - v19;
      return 1LL;
    }

    if (v19 == 1)
    {
      uint64_t result = 0LL;
      *(_BYTE *)(a1 + 95) = 1;
      return result;
    }

    return 0LL;
  }

  unsigned int v20 = v32;
  *a4 = (uint64_t)&v18[v19 - 2];
  memset(v33, 0, sizeof(v33));
  size_t v21 = HIBYTE(v20) & 0x1F;
  if (v21 > 3)
  {
    uint64_t v22 = (char *)(a2 + *(int *)(a2 + 32) + (*(void *)&v20 & 0xFFFFFFLL));
  }

  else
  {
    uint64_t v22 = (char *)v33 + 1;
    char v23 = (char *)v33 + 1;
    if ((_DWORD)v21 != 1)
    {
      unsigned int v24 = (char *)v33 + 1;
      if ((_DWORD)v21 != 2)
      {
        if ((_DWORD)v21 != 3) {
          goto LABEL_16;
        }
        unsigned int v24 = (char *)v33 + 2;
        BYTE1(v33[0]) = BYTE2(v20);
      }

      *unsigned int v24 = BYTE1(v20);
      char v23 = v24 + 1;
    }

    *char v23 = v20;
  }

LABEL_30:
  sub_180829514(a1, v22, v21, a6, a7, a8, a9, a11);
  return 1LL;
}

  if (v17 > v10)
  {
    uint64_t v22 = 0;
    char v23 = v10;
    while (1)
    {
      unsigned int v24 = *(char *)(v16 + v23);
      if ((v24 & 0x80000000) == 0) {
        break;
      }
      --v23;
      if (++v22 == 3)
      {
        v10 -= 3;
        goto LABEL_40;
      }
    }

    v10 -= v22;
  }

    if (a2 != 15)
    {
      inserted = icu::CollationBuilder::findOrInsertNodeForCEs((icu::CollationBuilder *)v13, a2, (const char **)a6, a7);
      int v33 = *(void *)(v13 + 8LL * *(int *)(v13 + 544) + 288);
      if (a2)
      {
        uint64_t v34 = v33 == 0;
        if (a2 == 3 && !v33)
        {
          *a7 = U_UNSUPPORTED_ERROR;
          int v17 = "tailoring quaternary after tertiary ignorables not supported";
          goto LABEL_7;
        }
      }

      else
      {
        if ((v33 - 1174405120) >> 30 != 3 && HIDWORD(v33) == 0)
        {
          *a7 = U_UNSUPPORTED_ERROR;
          int v17 = "tailoring primary after ignorables not supported";
          goto LABEL_7;
        }

        uint64_t v34 = v33 == 0;
      }

      int v36 = icu::CollationBuilder::insertTailoredNodeAfter((icu::CollationBuilder *)v13, inserted, a2, a7);
      if (*(int *)a7 >= 1)
      {
        int v17 = "modifying collation elements";
        goto LABEL_7;
      }

      if ((v33 - 1174405120) >> 30 == 3)
      {
        uint64_t v37 = (v33 >> 8) & 3;
      }

      else if (HIBYTE(v33))
      {
        uint64_t v37 = 0;
      }

      else
      {
        if (v34) {
          uint64_t v37 = 15;
        }
        else {
          uint64_t v37 = 2;
        }
        if ((v33 & 0xFF000000) != 0) {
          uint64_t v37 = 1;
        }
      }

      if (v37 >= a2) {
        uint64_t v37 = a2;
      }
      *(void *)(v13 + 8LL * *(int *)(v13 + 544) + 288) = (((unint64_t)(v36 & 0x1FC0) << 42) & 0x80FFFFFFFFFFFFFFLL | ((((unint64_t)(v36 & 0xFE000) >> 13) & 0x7F) << 56) | ((v36 & 0x3F) << 24))
                                                         + (v37 << 8)
                                                         + 0x4040000006002000LL;
    }

    icu::CollationBuilder::setCaseBits( (icu::CollationBuilder *)v13,  (const icu::UnicodeString *)&v48,  (const char **)a6,  a7);
    int v17 = (char *)*(unsigned int *)a7;
    int v28 = *(_DWORD *)(v13 + 544);
    if (*((unsigned __int16 *)a5 + 4) >= 0x20u)
    {
      unsigned int v29 = *(void *)(v13 + 8);
      unint64_t v44 = 0u;
      char v45 = 0u;
      int v46 = 0u;
      int v47 = 0LL;
      uint64_t v43 = off_18971B688;
      LOWORD(v44) = 2;
      (*(void (**)(uint64_t, const icu::UnicodeString *, void (***)(icu::UnicodeString *__hidden), UErrorCode *))(*(void *)v29 + 24LL))( v29,  a5,  &v43,  a7);
      uint64_t v30 = (uint64_t *)*(unsigned int *)a7;
      if ((int)v30 > 0)
      {
        __int16 v31 = "normalizing the relation extension";
LABEL_58:
        *a6 = v31;
        icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)&v43);
        goto LABEL_8;
      }

      CEs = icu::CollationDataBuilder::getCEs( *(icu::CollationDataBuilder **)(v13 + 72),  (const icu::UnicodeString *)&v43,  (uint64_t *)(v13 + 296),  *(unsigned int *)(v13 + 544),  v30);
      *(_DWORD *)(v13 + 544) = CEs;
      if (CEs >= 32)
      {
        *a7 = U_ILLEGAL_ARGUMENT_ERROR;
        __int16 v31 = "extension string adds too many collation elements (more than 31 total)";
        goto LABEL_58;
      }

      icu::UnicodeString::~UnicodeString(v39, (icu::UnicodeString *)&v43);
    }

    if (*(_BYTE *)(v13 + 81))
    {
      int v40 = *(unsigned int *)(v13 + 544);
      unint64_t v41 = 0xFFFFFFFFLL;
      goto LABEL_75;
    }

    if ((sub_18086B6D8((uint64_t)a3, (uint64_t)&v53) & 1) != 0)
    {
      if (*(int *)a7 > 0)
      {
LABEL_73:
        unint64_t v41 = 0xFFFFFFFFLL;
        goto LABEL_74;
      }
    }

    else
    {
      uint64_t v42 = sub_18086B6D8((uint64_t)a4, (uint64_t)&v48);
      unint64_t v41 = 0xFFFFFFFFLL;
    }

    if (!(*(unsigned int (**)(void, const icu::UnicodeString *, UErrorCode *))(**(void **)(v13 + 16)
                                                                                           + 88LL))( *(void *)(v13 + 16),  a3,  a7)
      || icu::CollationBuilder::ignoreString((icu::CollationBuilder *)v13, a4, a7))
    {
      goto LABEL_73;
    }

    unint64_t v41 = icu::CollationBuilder::addIfDifferent( (icu::CollationDataBuilder **)v13,  a3,  a4,  (const uint64_t *)(v13 + 296),  *(unsigned int *)(v13 + 544),  0xFFFFFFFFLL,  a7);
LABEL_74:
    int v40 = *(unsigned int *)(v13 + 544);
    if (!*(_BYTE *)(v13 + 81))
    {
      icu::CollationBuilder::addWithClosure( (icu::CollationDataBuilder **)v13,  (const icu::UnicodeString *)&v53,  (const icu::UnicodeString *)&v48,  (const uint64_t *)(v13 + 296),  v40,  v41,  a7);
      goto LABEL_76;
    }

  int v17 = (a3 << 8) | ((_DWORD)v9 << 13);
  return v17 | 0xC5u;
}

  int v17 = (a3 << 8) | ((_DWORD)v9 << 13);
  return v17 | 0xC6u;
}

      int v13 = 3;
      goto LABEL_31;
    }

      uint64_t v5 = *(_DWORD *)(v4 + 72);
LABEL_32:
      a2 = *(const icu::UnicodeString **)(v4 + 16);
    }
  }

  return this;
}

      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v24);
LABEL_31:
      unsigned int v20 = 5LL;
      *a4 = 5;
      int v9 = 3LL;
LABEL_32:
      icu::UnicodeString::~UnicodeString((void *)v20, (icu::UnicodeString *)v25);
      return v9;
    }
  }

  return 3LL;
}

    if (v12)
    {
      if (!v15)
      {
LABEL_32:
        int v16 = *v12;
        if (v16 >= 4) {
          int v17 = 72;
        }
        else {
          int v17 = 0x6B004B00480068uLL >> (16 * v16);
        }
        *((_WORD *)this + 2380) = v17;
      }
    }

    else
    {
      *(_DWORD *)char v23 = 0;
      Instance = icu::Region::getInstance((icu::Region *)v11, (icu::Region *)v23, v14);
      if (*(int *)v23 >= 1
        || (RegionCode = (const char *)icu::Region::getRegionCode(Instance),
            (uint64_t v22 = sub_1808EA88C(v7, RegionCode, a3)) == 0))
      {
        if (!*((_WORD *)this + 2380)) {
          *((_WORD *)this + 2380) = 72;
        }
        *(void *)((char *)this + 4764) = 0xFFFFFFFF00000001LL;
        goto LABEL_44;
      }

      int v12 = (unsigned int *)v22;
      if (!*((_WORD *)this + 2380)) {
        goto LABEL_32;
      }
    }

    int v18 = 0LL;
    do
    {
      if (v18 == 7) {
        break;
      }
      int v19 = v12[v18 + 1];
      *(_DWORD *)((char *)this + v18 * 4 + 4764) = v19;
      ++v18;
    }

    while (v19 != -1);
LABEL_44:
    icu::Locale::~Locale((icu::Locale *)v25);
  }

  if (v4 == v3) {
    size_t v21 = v4;
  }
  else {
    size_t v21 = v4 + 1;
  }
  icu::ConstrainedFieldPosition::setInt64IterationContext(this, v21);
  return v7;
}

      ++v10;
      v11 += 4LL;
      int v6 = v16;
    }

    while (v16 != v8);
    if ((_DWORD)v9 != 0x7FFFFFFF)
    {
      unsigned int v29 = result;
      uint64_t v30 = *(_DWORD *)(v5 + 80);
      if (v30 >= -1 && *(_DWORD *)(v5 + 84) > v30
        || (uint64_t result = icu::UVector32::expandCapacity(v31, v30 + 1, a4), v30 = *(_DWORD *)(v5 + 80), (_DWORD)result))
      {
        *(_DWORD *)(*(void *)(v5 + 96) + 4LL * v30) = a2;
        uint64_t v30 = *(_DWORD *)(v5 + 80) + 1;
        *(_DWORD *)(v5 + 80) = v30;
      }

      if (v30 >= -1 && *(_DWORD *)(v5 + 84) > v30
        || (uint64_t result = icu::UVector32::expandCapacity(v31, v30 + 1, a4), v30 = *(_DWORD *)(v5 + 80), (_DWORD)result))
      {
        *(_DWORD *)(*(void *)(v5 + 96) + 4LL * v30) = a3;
        uint64_t v30 = *(_DWORD *)(v5 + 80) + 1;
        *(_DWORD *)(v5 + 80) = v30;
      }

      if (v30 >= -1 && *(_DWORD *)(v5 + 84) > v30
        || (uint64_t result = icu::UVector32::expandCapacity(v31, v30 + 1, a4), v30 = *(_DWORD *)(v5 + 80), (_DWORD)result))
      {
        *(_DWORD *)(*(void *)(v5 + 96) + 4LL * v30) = v9;
        uint64_t v30 = *(_DWORD *)(v5 + 80) + 1;
        *(_DWORD *)(v5 + 80) = v30;
      }

      if (v30 >= -1 && *(_DWORD *)(v5 + 84) > v30
        || (uint64_t result = icu::UVector32::expandCapacity(v31, v30 + 1, a4), v30 = *(_DWORD *)(v5 + 80), (_DWORD)result))
      {
        *(_DWORD *)(*(void *)(v5 + 96) + 4LL * v30) = v7;
        uint64_t v30 = *(_DWORD *)(v5 + 80) + 1;
        *(_DWORD *)(v5 + 80) = v30;
      }

      if (v30 >= -1 && *(_DWORD *)(v5 + 84) > v30
        || (uint64_t result = icu::UVector32::expandCapacity(v31, v30 + 1, a4), v30 = *(_DWORD *)(v5 + 80), (_DWORD)result))
      {
        *(_DWORD *)(*(void *)(v5 + 96) + 4LL * v30) = a2;
        uint64_t v30 = *(_DWORD *)(v5 + 80) + 1;
        *(_DWORD *)(v5 + 80) = v30;
      }

      if (v30 >= -1 && *(_DWORD *)(v5 + 84) > v30
        || (uint64_t result = icu::UVector32::expandCapacity(v31, v30 + 1, a4), v30 = *(_DWORD *)(v5 + 80), (_DWORD)result))
      {
        *(_DWORD *)(*(void *)(v5 + 96) + 4LL * v30) = 1 - a3;
        uint64_t v30 = *(_DWORD *)(v5 + 80) + 1;
        *(_DWORD *)(v5 + 80) = v30;
      }

      if (v30 >= -1 && *(_DWORD *)(v5 + 84) > v30
        || (uint64_t result = icu::UVector32::expandCapacity(v31, v30 + 1, a4), v30 = *(_DWORD *)(v5 + 80), (_DWORD)result))
      {
        *(_DWORD *)(*(void *)(v5 + 96) + 4LL * v30) = v35;
        uint64_t v30 = *(_DWORD *)(v5 + 80) + 1;
        *(_DWORD *)(v5 + 80) = v30;
      }

      if (v30 < -1 || *(_DWORD *)(v5 + 84) <= v30)
      {
        uint64_t result = icu::UVector32::expandCapacity(v31, v30 + 1, a4);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v30 = *(_DWORD *)(v5 + 80);
      }

      *(_DWORD *)(*(void *)(v5 + 96) + 4LL * v30) = v29;
      ++*(_DWORD *)(v5 + 80);
    }
  }

  return result;
}

  ures_close(v4);
  if (!v2) {
    return;
  }
LABEL_4:
  ures_close(v2);
}

    *((_DWORD *)this + 172) = 0;
    return result;
  }

  *((_DWORD *)this + 172) = v4;
  uint64_t result = uprv_malloc(8LL * v4);
  if (!result) {
    goto LABEL_30;
  }
  *((void *)this + 85) = result;
LABEL_18:
  LODWORD(v13) = 0;
LABEL_19:
  unsigned int v14 = *((void *)this + 80);
  if ((_DWORD)v13)
  {
    int v15 = *(_DWORD *)(v14 + 16LL * v13 + 12);
    else {
      int v13 = v15;
    }
  }

  else
  {
    int v13 = 0LL;
  }

  int v16 = (int *)(v14 + 16 * v13 + 16);
  while (1)
  {
    int v18 = *v16;
    v16 += 4;
    int v17 = v18;
    if (v18 == 1) {
      return (void *)*((void *)this + 85);
    }
    LODWORD(v13) = v13 + 1;
    if (v17 == 5)
    {
      if ((v13 & 0x80000000) != 0) {
        return (void *)*((void *)this + 85);
      }
      CachedFormatte__int16 r = icu::MessageFormat::getCachedFormatter(this, v13);
      unsigned int v20 = *((void *)this + 85);
      size_t v21 = *a2;
      *a2 = v21 + 1;
      *(void *)(v20 + 8 * v2icu::UVector32::~UVector32(this + 1) = CachedFormatter;
      goto LABEL_19;
    }
  }

          int v36 = icu::UMemory::operator new((uint64_t *)v34, (icu::UMemory *)0x70, v26);
          if (!v36)
          {
            *a6 = U_MEMORY_ALLOCATION_ERROR;
            icu::UnicodeString::~UnicodeString((void *)7, (icu::UnicodeString *)&v49);
            return;
          }

          uint64_t v37 = (uint64_t)v36;
          int v47 = (UChar *)off_18971B688;
          unint64_t v48 = 2;
          sub_180915168((uint64_t)v36, a4, &v47, a6);
          icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v47);
          int v39 = *(void *)v13;
          if ((*(void *)v13 & 0x8000000000000000LL) != 0)
          {
            if ((_DWORD)v39 != -4)
            {
              if ((_DWORD)v39 == -2) {
                *(void *)uint64_t v37 = -3LL;
              }
LABEL_41:
              *(_DWORD *)(v37 + 8) = *(_DWORD *)(v13 + 8);
              *(_WORD *)(v37 + 12) = *(_WORD *)(v13 + 12);
              icu::UnicodeString::doAppend((uint64_t)&v49, (const icu::UnicodeString *)a1, 0, v20);
              unint64_t v41 = v27 + 1;
              uint64_t v42 = *(unsigned __int16 *)(a1 + 8);
              if ((v42 & 0x8000) != 0)
              {
                uint64_t v43 = *(_DWORD *)(a1 + 12);
                if (v41 < v43) {
                  goto LABEL_45;
                }
              }

              else if (v41 < v42 >> 5)
              {
                uint64_t v43 = v42 >> 5;
LABEL_45:
                icu::UnicodeString::doAppend( (uint64_t)&v49,  (const icu::UnicodeString *)a1,  v27 + 1,  (v43 + ~v27));
              }

              sub_180915C34(v37, a2, &v49, a3, a6);
LABEL_47:
              sub_1808E0E9C((uint64_t)&v49, (const icu::UnicodeString *)a1, 0, v20);
              icu::UnicodeString::doAppend( (uint64_t)&v49,  (const icu::UnicodeString *)a1,  v20 + 1,  (v27 + ~(_DWORD)v20));
              unint64_t v44 = *(unsigned __int16 *)(a1 + 8);
              if ((v44 & 0x8000) != 0)
              {
                char v45 = *(_DWORD *)(a1 + 12);
                if (v41 < v45) {
                  goto LABEL_51;
                }
              }

              else if (v41 < v44 >> 5)
              {
                char v45 = v44 >> 5;
LABEL_51:
                icu::UnicodeString::doAppend( (uint64_t)&v49,  (const icu::UnicodeString *)a1,  v41,  (v45 + ~v27));
              }

              sub_180915C34(v13, a2, &v49, a3, a6);
              if (v37)
              {
                if ((*(void *)v37 & 0x8000000000000000LL) != 0) {
                  sub_180914000((void *)a2, (void *)v37);
                }
                else {
                  sub_1809141A4(a5, v37);
                }
              }

              icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)&v49);
              goto LABEL_19;
            }

            *(void *)uint64_t v37 = v39;
            int v40 = -2LL;
          }

          else
          {
            *(void *)uint64_t v37 = v39;
            if (*(_BYTE *)(a2 + 160)) {
              goto LABEL_41;
            }
            int v40 = *(void *)v13 + 1LL;
          }

          *(void *)int v13 = v40;
          goto LABEL_41;
        }
      }
    }
  }

  sub_180915C34(v13, a2, (UChar **)a1, a3, a6);
LABEL_19:
  if ((*(void *)v13 & 0x8000000000000000LL) != 0) {
    sub_180914000((void *)a2, (void *)v13);
  }
  else {
    sub_1809141A4(a5, v13);
  }
}

      int v4 = 1LL;
LABEL_33:
      icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v12);
    }
  }

  return v4;
}

    char v27 = *(_DWORD *)(a1 + 20);
    if (v26 != v27) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }

  char v23 = 0LL;
  *a7 = U_INTERNAL_PROGRAM_ERROR;
  return v23;
}

  icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v34);
  icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v39);
  return v6;
}

  char v27 = (icu::SimpleDateFormat *)icu::SimpleDateFormat::skipPatternWhiteSpace( (icu::SimpleDateFormat *)isWhiteSpace,  a2,  v11);
  int v28 = (icu::SimpleDateFormat *)icu::SimpleDateFormat::skipUWhiteSpace(v27, a3, v8);
  unsigned int v29 = v28;
  if ((v26 & 1) != 0 || (_DWORD)v28 != (_DWORD)v8)
  {
    uint64_t v11 = icu::SimpleDateFormat::skipUWhiteSpace(v28, a2, (uint64_t)v27);
    uint64_t v8 = (uint64_t)v29;
    goto LABEL_36;
  }

  return 0xFFFFFFFFLL;
}

  if (*a4 >= 1)
  {
    uprv_free(v12);
    int v12 = 0LL;
  }

  ures_close(v15);
  uint64_t v11 = *a4;
  if ((int)v11 <= 0)
  {
    if (v12)
    {
      __int16 v31 = icu::UMemory::operator new((uint64_t *)v11, (icu::UMemory *)0x90, v8);
      if (v31)
      {
        uint64_t result = icu::StringEnumeration::StringEnumeration((uint64_t)v31);
        *(void *)uint64_t result = &off_18972B858;
        *(void *)(result + 120) = v12;
        *(void *)(result + 128) = v12;
        *(_DWORD *)(result + 136) = v17;
        *(_DWORD *)(result + 140) = 0;
        return result;
      }

  if (v20 >= a4)
  {
    *(_DWORD *)(a2 + 8) = v21 + v9;
  }

  else
  {
    uint64_t result = 0LL;
    *(_DWORD *)(a2 + 12) = v9;
  }

  return result;
}

  umtx_unlock((std::mutex **)&unk_18C535BA0);
  if (*(int *)a5 <= 0)
  {
    umtx_lock((icu::UMutex *)&unk_18C535BA0);
    icu::TextTrieMap::search((icu::TextTrieMap *)(a1 + 424), a2, a3, v28, a5);
    umtx_unlock((std::mutex **)&unk_18C535BA0);
    unsigned int v25 = v29;
    int v26 = (uint64_t *)v30;
    unsigned int v29 = 0LL;
    LODWORD(v30) = 0;
    if (!v25 || (int)v26 <= 0)
    {
      int v10 = 0LL;
      v28[0] = (uint64_t (**)(void, void, void *, int *))off_18972BF18;
      goto LABEL_4;
    }

    char v27 = icu::UMemory::operator new(v26, (icu::UMemory *)8, v24);
    int v10 = v27;
    if (v27)
    {
      const char *v27 = v25;
    }

    else
    {
      *a5 = U_MEMORY_ALLOCATION_ERROR;
      (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
    }
  }

  else
  {
    int v10 = 0LL;
  }

      int v12 = 0LL;
    }

unint64_t sub_18082BA84( unint64_t result, int a2, uint64_t a3, int a4, uint64_t a5, int a6, _DWORD *a7, int a8, char a9)
{
  if (!result) {
    return result;
  }
  unint64_t v9 = result;
  if (a2 >> 10 >= *(_DWORD *)(result + 44)) {
    return 0LL;
  }
  unint64_t v10 = *(unsigned int *)(result
                        + *(int *)(result + 60)
                        + 4LL
                        * *(unsigned __int16 *)(result
                                              + *(int *)(result + 52)
                                              + 2LL
                                              * ((a2 & 0xF)
                                               + 4
                                               * *(unsigned __int16 *)(result
                                                                                   + *(int *)(result + 40)
                                                                                   + 2LL
  if (!(_DWORD)v10) {
    return 0LL;
  }
  if (v10 >> 16 <= 0x1E)
  {
    unint64_t v11 = 0LL;
    int v12 = 0;
    int v13 = 0;
    uint64_t result = 0LL;
    unint64_t v14 = v9 + *(int *)(v9 + 20);
    unint64_t v15 = v9 + *(int *)(v9 + 24);
    unsigned int v16 = a2 - 57344;
    unsigned int v17 = a2 - 983040;
    while (1)
    {
      int v18 = (unsigned int *)(v15 + 4 * v10);
      unsigned int v21 = *v18;
      unsigned int v20 = v18 + 1;
      unint64_t v19 = v21;
      if (v21)
      {
        BOOL v22 = (v19 & 0xC0000000) == 0 && a8 == 0;
        BOOL v23 = v22 && v16 >> 8 >= 0x19;
        BOOL v24 = v23 && v17 >= 0x20000;
        BOOL v25 = !v24;
        if ((v19 & 0x20000000) == 0)
        {
          if (v25)
          {
            unint64_t v11 = v19;
            uint64_t result = (v13 + v12 + 2);
          }

          else
          {
            uint64_t result = result;
          }
        }
      }

      int v26 = (unsigned __int16 *)(v14 + 2 * v10);
      int v29 = *v26;
      char v27 = v26 + 1;
      int v28 = v29;
      if (v12 >= a4)
      {
        if (v13 >= a6)
        {
          if (!a9 && v13 + v12 <= 19) {
            return (-2 - (v13 + v12));
          }
LABEL_83:
          unint64_t v10 = v11;
          if (!(_DWORD)result) {
            return result;
          }
LABEL_84:
          if (v10 == 2147483649) {
            return 1LL;
          }
          *a7 = v10;
          return result;
        }

        int v30 = v13++;
        uint64_t v31 = a5;
      }

      else
      {
        int v30 = v12++;
        uint64_t v31 = a3;
      }

      unsigned int v32 = *(unsigned __int16 *)(v31 + 2LL * v30);
      if (v28 >= 2)
      {
        int v33 = 0;
        unsigned int v34 = v28;
        while (v34 > 4)
        {
          int v35 = v33 + v28;
          if (v33 + v28 < 0 != __OFADD__(v33, v28)) {
            ++v35;
          }
          int v36 = v35 >> 1;
          if (v27[v36] > v32) {
            int v28 = v36;
          }
          else {
            int v33 = v36;
          }
          unsigned int v34 = v28 - v33;
          if (v28 - v33 <= 1) {
            goto LABEL_45;
          }
        }

        if (v27[v33] < v32)
        {
          uint64_t v37 = v33 + 1LL;
          else {
            v33 += 3;
          }
        }
      }

      else
      {
        int v33 = 0;
      }

uint64_t sub_18082BD0C(unint64_t a1, int a2, int *a3, int a4)
{
  unsigned int v9 = 0;
  int v5 = sub_18082BA84(a1, a2, 0LL, 0, 0LL, 0, &v9, a4, 1);
  uint64_t result = 0LL;
  if (v5 >= 2)
  {
    int v7 = v9;
    unsigned int v8 = HIBYTE(v9) & 0x1F;
    if (v8 <= 3)
    {
      *a3 = v9 & 0xFFFFFF;
      if (v7 < 0) {
        return v8;
      }
      else {
        return -v8;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_18082BD90(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  unsigned int v32 = 0;
  unint64_t v8 = *(void *)(*(void *)(a1 + 48) + 288LL);
  int v9 = *(_DWORD *)(a1 + 208);
  unint64_t v10 = (UChar *)(a1 + 212);
  int v11 = *(char *)(a1 + 281);
  int v12 = *(__int16 **)(a2 + 16);
  unint64_t result = sub_18082BA84( v8,  v9,  a1 + 212,  v11,  (uint64_t)v12,  (*(void *)(a2 + 24) - (void)v12) >> 1,  &v32,  *(char *)(a1 + 63),  *(_BYTE *)(a2 + 2));
  int v14 = result - 2;
  if ((int)result >= 2)
  {
    int v15 = v14 - v11;
    if (v14 >= v11)
    {
      LOBYTE(v17) = 0;
      *(void *)(a2 + 16) = &v12[v15];
    }

    else
    {
      int v16 = v11 - v14;
      u_memmove(v10, &v10[v14], v11 - v14);
      int v17 = -v16;
      unint64_t v8 = *(void *)(*(void *)(a1 + 48) + 288LL);
    }

    *(_BYTE *)(a1 + 28icu::UVector32::~UVector32(this + 1) = v17;
    *(_DWORD *)(a1 + 208) = -1;
    char v18 = v32;
    unint64_t v19 = (void *)(a2 + 32);
    unint64_t v20 = *(void *)(a2 + 40);
    unsigned int v21 = (void *)(a2 + 48);
    memset(v33, 0, sizeof(v33));
    unint64_t v22 = ((unint64_t)v32 >> 24) & 0x1F;
    if (v22 > 3)
    {
      BOOL v23 = (char *)(v8 + (v32 & 0xFFFFFF) + *(int *)(v8 + 32));
    }

    else
    {
      BOOL v23 = (char *)v33 + 1;
      BOOL v24 = (char *)v33 + 1;
      if ((_DWORD)v22 != 1)
      {
        BOOL v25 = (char *)v33 + 1;
        if ((_DWORD)v22 != 2)
        {
          if ((_DWORD)v22 != 3) {
            goto LABEL_17;
          }
          BOOL v25 = (char *)v33 + 2;
          BYTE1(v33[0]) = BYTE2(v32);
        }

        *BOOL v25 = BYTE1(v32);
        BOOL v24 = v25 + 1;
      }

      *BOOL v24 = v18;
    }

uint64_t sub_18082C01C(uint64_t result, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(result + 288);
  if (v4)
  {
    uint64_t v7 = *(unsigned int *)(v4 + 44);
    int v8 = a4 - 2;
    if (a4 == 2)
    {
      uint64_t v9 = 3LL;
    }

    else
    {
      BOOL v10 = *(unsigned __int8 *)(result + 252) != 219 && a4 == 0;
      uint64_t v9 = v10 ? 1LL : 2LL;
    }

    if ((int)v7 >= 1)
    {
      uint64_t v11 = 0LL;
      uint64_t v12 = 0LL;
      uint64_t v13 = v4 + *(int *)(v4 + 40);
      uint64_t v14 = v4 + *(int *)(v4 + 60);
      uint64_t v27 = *(int *)(v4 + 52);
      memset(v29, 0, sizeof(v29));
      uint64_t v24 = v13;
      uint64_t v25 = v7;
      while (1)
      {
        uint64_t v26 = v11;
        uint64_t v15 = *(unsigned __int16 *)(v13 + 2 * v11);
        uint64_t v12 = (v12 + 1024);
LABEL_54:
        LODWORD(v7) = v25;
        uint64_t v11 = v26 + 1;
        uint64_t v13 = v24;
        if (v26 + 1 == v25) {
          return result;
        }
      }

      uint64_t v16 = 0LL;
      uint64_t v28 = v13 + 2 * v15;
      while (!*(_WORD *)(v28 + 2 * v16))
      {
        uint64_t v12 = (v12 + 16);
LABEL_51:
        if (++v16 == 64) {
          goto LABEL_54;
        }
      }

      uint64_t v17 = v27 + 8LL * *(unsigned __int16 *)(v28 + 2 * v16);
      while (1)
      {
        unsigned int v18 = *(_DWORD *)(v14 + 4LL * *(unsigned __int16 *)(v4 + v17));
        if (v18)
        {
          if (HIBYTE(v18))
          {
            if ((_DWORD)a3)
            {
              if ((v18 & 0x20000000) == 0) {
                goto LABEL_28;
              }
            }

            else if ((v18 & 0xA0000000) == 0x80000000)
            {
LABEL_28:
              if ((HIBYTE(v18) & 0x1F) >= v9)
              {
                switch(v8)
                {
                  case 0:
                    if ((v18 & 0x1F000000) == 0x3000000 && (v18 & 0xFF0000) < 0x830000) {
                      goto LABEL_49;
                    }
                    break;
                  case 1:
                    if ((v18 & 0x1F000000) == 0x2000000 && (v18 & 0xFFFFFF) - 33088 < 0x6EBD) {
                      goto LABEL_49;
                    }
                    break;
                  case 2:
                    BOOL v22 = (v18 & 0x1F000000) != 0x2000000 || (((_WORD)v18 + 24159) & 0xFFFEu) > 0x5D5D;
                    if (!v22 && (((_BYTE)v18 + 95) & 0xFEu) < 0x5E) {
                      goto LABEL_49;
                    }
                    break;
                  case 3:
                    BOOL v23 = (v18 & 0x1F000000) != 0x2000000 || (((_WORD)v18 + 24159) & 0xFFFEu) > 0x5C5D;
                    if (!v23 && (((_BYTE)v18 + 95) & 0xFEu) <= 0x5D) {
                      goto LABEL_49;
                    }
                    break;
                  default:
LABEL_49:
                    unint64_t result = ((uint64_t (*)(uint64_t, uint64_t))a2[1])(*a2, v12);
                    break;
                }
              }
            }
          }

          else
          {
            if (WORD1(v12))
            {
              unsigned int v20 = (v12 >> 10) - 10304;
              *(_WORD *)&v29[2] = v12 & 0x3FF | 0xDC00;
              uint64_t v19 = 2LL;
            }

            else
            {
              uint64_t v19 = 1LL;
              LOWORD(v20) = v12;
            }

            *(_WORD *)int v29 = v20;
            unint64_t result = sub_18082C2D8(v4, a2, a3, v9, v12, (uint64_t)v29, v19, v18);
          }
        }

        uint64_t v12 = (v12 + 1);
        v17 += 2LL;
        if ((v12 & 0xF) == 0) {
          goto LABEL_51;
        }
      }
    }
  }

  return result;
}

uint64_t sub_18082C2D8( uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, int a8)
{
  int v9 = a7;
  uint64_t v14 = result;
  uint64_t v15 = *(int *)(result + 20);
  uint64_t v16 = *(int *)(result + 24);
  uint64_t v17 = *(unsigned __int16 *)(result + v15 + 2LL * a8);
  unsigned int v18 = *(_DWORD *)(result + v16 + 4LL * a8);
  if ((_DWORD)a3)
  {
    if ((v18 & 0x20000000) != 0) {
      goto LABEL_11;
    }
  }

  else if ((v18 & 0xA0000000) != 0x80000000)
  {
    goto LABEL_11;
  }

  if ((int)(HIBYTE(v18) & 0x1F) >= (int)a4)
  {
    if (a5 < 0x10000) {
      int v19 = 1;
    }
    else {
      int v19 = 2;
    }
    uint64_t v20 = *a2;
    if (v19 != (_DWORD)a7)
    {
      unint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2[3])(v20, a6, a7);
      if ((_DWORD)v17) {
        goto LABEL_12;
      }
      return result;
    }

    unint64_t result = ((uint64_t (*)(uint64_t))a2[1])(v20);
  }

_BYTE *ucnv_io_stripASCIIForCompare(_BYTE *result, _BYTE *a2)
{
  int v2 = *a2;
  uint64_t v3 = result;
  if (!*a2) {
    goto LABEL_20;
  }
  int v4 = 0;
  uint64_t v3 = result;
  do
  {
    ++a2;
    while (1)
    {
      if ((v2 & 0x80) != 0 || (int v5 = byte_180A24FE0[v2]) == 0)
      {
        int v2 = *a2;
        goto LABEL_12;
      }

      if (v5 != 1) {
        break;
      }
      if (v4)
      {
        int v4 = 1;
        goto LABEL_19;
      }

      if ((char)*a2 < 0 || byte_180A24FE0[*a2] - 1 > 1)
      {
        int v4 = 0;
        goto LABEL_19;
      }

      int v2 = *a2;
LABEL_12:
      int v4 = 0;
      ++a2;
      if (!v2) {
        goto LABEL_20;
      }
    }

    if (v5 == 2)
    {
      int v4 = 1;
    }

    else
    {
      LOBYTE(v2) = byte_180A24FE0[v2];
      int v4 = 0;
    }

_BYTE *ucnv_io_stripEBCDICForCompare(_BYTE *result, _BYTE *a2)
{
  LOBYTE(v2) = *a2;
  uint64_t v3 = result;
  if (!*a2) {
    goto LABEL_20;
  }
  int v4 = 0;
  uint64_t v3 = result;
  do
  {
    ++a2;
    while (1)
    {
      if ((v2 & 0x80) == 0 || (int v5 = byte_180A25060[v2 & 0x7F]) == 0)
      {
        int v2 = *a2;
        goto LABEL_12;
      }

      if (v5 != 1) {
        break;
      }
      if (v4)
      {
        int v4 = 1;
        goto LABEL_19;
      }

      int v6 = (char)*a2;
      if ((v6 & 0x80000000) == 0 || byte_180A25060[v6 & 0x7F] - 1 > 1)
      {
        int v4 = 0;
        goto LABEL_19;
      }

      int v2 = *a2;
LABEL_12:
      int v4 = 0;
      ++a2;
      if (!v2) {
        goto LABEL_20;
      }
    }

    if (v5 == 2)
    {
      int v4 = 1;
    }

    else
    {
      LOBYTE(v2) = byte_180A25060[v2 & 0x7F];
      int v4 = 0;
    }

uint64_t ucnv_compareNames(char *a1, char *a2)
{
  int v2 = 0;
  BOOL v3 = 0;
  while (2)
  {
    int v5 = *a1++;
    int v4 = v5;
    if (!v5)
    {
      int v7 = 0;
      goto LABEL_21;
    }

    int v6 = v2;
    while (1)
    {
      if ((v4 & 0x80) != 0 || (int v7 = byte_180A24FE0[v4]) == 0)
      {
        int v4 = *a1;
        goto LABEL_12;
      }

      if (v7 != 1) {
        break;
      }
      if (v6)
      {
        int v2 = 1;
        goto LABEL_20;
      }

      if (*a1 < 0 || byte_180A24FE0[*a1] - 1 > 1)
      {
        int v2 = 0;
LABEL_20:
        int v7 = v4;
        goto LABEL_21;
      }

      int v4 = *a1;
LABEL_12:
      int v6 = 0;
      int v7 = 0;
      int v2 = 0;
      ++a1;
      if (!v4) {
        goto LABEL_21;
      }
    }

    if (v7 == 2)
    {
      int v7 = v4;
      int v2 = 1;
    }

    else
    {
      int v2 = 0;
    }

uint64_t ucnv_io_getConverterName(char *a1, _BYTE *a2, UErrorCode *a3)
{
  char v4 = 0;
  uint64_t v27 = *MEMORY[0x1895F89C0];
  for (char i = 1; ; char i = 0)
  {
    char v6 = i;
    if ((v4 & 1) != 0)
    {
      if (*a1 != 120 || a1[1] != 45) {
        return 0LL;
      }
      a1 += 2;
    }

    if (!sub_18082C90C(a3)) {
      return 0LL;
    }
    if (!a1)
    {
      uint64_t result = 0LL;
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
      return result;
    }

    if (!*a1) {
      return 0LL;
    }
    uint64_t v7 = xmmword_18C534F38;
    int v8 = *(unsigned __int16 *)xmmword_18C534F38;
    memset(v26, 0, 60);
    int v9 = a1;
    char v25 = v6;
    if (!v8) {
      break;
    }
    if (strlen(a1) < 0x3C)
    {
      int v9 = (char *)v26;
      ucnv_io_stripASCIIForCompare(v26, a1);
      break;
    }

    *a3 = U_BUFFER_OVERFLOW_ERROR;
LABEL_29:
    char v4 = 1;
    if ((v25 & 1) == 0) {
      return 0LL;
    }
  }

  int v10 = 0;
  uint64_t v11 = DWORD1(xmmword_18C534F58);
  uint64_t v12 = DWORD1(xmmword_18C534F58) >> 1;
  uint64_t v13 = xmmword_18C534F18;
  uint64_t v15 = *((void *)&xmmword_18C534F38 + 1);
  uint64_t v14 = qword_18C534F48;
  while (1)
  {
    uint64_t v16 = *(unsigned __int16 *)(v13 + 2LL * v12);
    int v17 = v8 ? strcmp(v9, (const char *)(v14 + 2 * v16)) : ucnv_compareNames(v9, (char *)(v15 + 2 * v16));
    uint64_t v18 = v12;
    if ((v17 & 0x80000000) == 0)
    {
      int v10 = v12;
      uint64_t v18 = v11;
      if (!v17) {
        break;
      }
    }

    BOOL v19 = (_DWORD)v12 == (v18 + v10) >> 1;
    uint64_t v12 = (v18 + v10) >> 1;
    uint64_t v11 = v18;
    if (v19) {
      goto LABEL_29;
    }
  }

  uint64_t v20 = *((void *)&xmmword_18C534F18 + 1);
  int v21 = *(__int16 *)(*((void *)&xmmword_18C534F18 + 1) + 2LL * v12);
  if (v21 < 0) {
    *a3 = U_AMBIGUOUS_ALIAS_WARNING;
  }
  if (a2)
  {
    int v21 = ((unsigned __int16)v21 >> 14) & 1;
    if (!*(_BYTE *)(v7 + 2)) {
      LOBYTE(v2icu::UVector32::~UVector32(this + 1) = 1;
    }
    *a2 = v21;
    LOWORD(v2icu::UVector32::~UVector32(this + 1) = *(_WORD *)(v20 + 2LL * v12);
  }

  if (dword_18C534F50 <= (v21 & 0xFFFu)) {
    goto LABEL_29;
  }
  return v15 + 2LL * *(unsigned __int16 *)(xmmword_18C534F08 + 2LL * (v21 & 0xFFF));
}

BOOL sub_18082C90C(UErrorCode *a1)
{
  if (*(int *)a1 <= 0)
  {
    unsigned int v2 = atomic_load(&dword_18C534F78);
    if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_18C534F78))
    {
      if (dword_18C534F7C >= 1) {
        *a1 = dword_18C534F7C;
      }
    }

    else
    {
      sub_180820C94(0x17u, (uint64_t)sub_18082DFD4);
      BOOL v3 = udata_openChoice( 0LL,  "icu",  "cnvalias",  (unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_18082E02C,  0LL,  a1);
      if (*(int *)a1 <= 0)
      {
        char v4 = v3;
        uint64_t Memory = (int *)udata_getMemory((uint64_t)v3);
        int v6 = *Memory;
        if (*Memory > 7)
        {
          qword_18C534F80 = (uint64_t)v4;
          int v7 = Memory[1];
          dword_18C534F50 = v7;
          int v8 = Memory[2];
          dword_18C534F54 = v8;
          int v9 = Memory[3];
          LODWORD(xmmword_18C534F58) = v9;
          int v10 = Memory[4];
          DWORD1(xmmword_18C534F58) = v10;
          int v11 = Memory[5];
          DWORD2(xmmword_18C534F58) = v11;
          int v12 = Memory[6];
          HIDWORD(xmmword_18C534F58) = v12;
          int v13 = Memory[7];
          dword_18C534F68 = v13;
          int v14 = Memory[8];
          dword_18C534F6C = v14;
          if (v6 != 8) {
            dword_18C534F70 = Memory[9];
          }
          unsigned int v15 = 2 * v6 + 2;
          uint64_t v16 = (char *)Memory + 2 * v15;
          unsigned int v17 = v7 + v15;
          *(void *)&xmmword_18C534F08 = v16;
          *((void *)&xmmword_18C534F08 + icu::UVector32::~UVector32(this + 1) = (char *)Memory + 2 * v17;
          unsigned int v18 = v8 + v17;
          BOOL v19 = (char *)Memory + 2 * v18;
          unsigned int v20 = v9 + v18;
          *(void *)&xmmword_18C534F18 = v19;
          *((void *)&xmmword_18C534F18 + icu::UVector32::~UVector32(this + 1) = (char *)Memory + 2 * v20;
          unsigned int v21 = v10 + v20;
          uint64_t v22 = (uint64_t)Memory + 2 * v21;
          unsigned int v23 = v11 + v21;
          qword_18C534F28 = v22;
          qword_18C534F30 = (uint64_t)Memory + 2 * v23;
          unsigned int v24 = v12 + v23;
          if (v13 && (char v25 = (unsigned __int16 *)Memory + v24, v26 = *v25, *v25 < 2u))
          {
            unsigned int v27 = v13 + v24;
            uint64_t v28 = (uint64_t)Memory + 2 * v27;
            *(void *)&xmmword_18C534F38 = v25;
            *((void *)&xmmword_18C534F38 + icu::UVector32::~UVector32(this + 1) = v28;
            if (v26) {
              uint64_t v28 = (uint64_t)Memory + 2 * v14 + 2 * v27;
            }
          }

          else
          {
            uint64_t v28 = (uint64_t)Memory + 2 * v13 + 2 * v24;
            *(void *)&xmmword_18C534F38 = &unk_180A250EE;
            *((void *)&xmmword_18C534F38 + icu::UVector32::~UVector32(this + 1) = v28;
          }

          qword_18C534F48 = v28;
        }

        else
        {
          *a1 = U_INVALID_FORMAT_ERROR;
          udata_close(v4);
        }
      }

      dword_18C534F7C = *a1;
      icu::umtx_initImplPostInit(&dword_18C534F78);
    }
  }

  return *a1 < U_ILLEGAL_ARGUMENT_ERROR;
}

void *ucnv_openStandardNames(char *a1, unsigned __int8 *a2, UErrorCode *a3)
{
  if (!sub_18082C90C(a3)) {
    return 0LL;
  }
  if (!a1)
  {
    int v9 = 0LL;
    int v11 = 1;
LABEL_9:
    *a3 = v11;
    return v9;
  }

  if (!*a1) {
    return 0LL;
  }
  unsigned int v6 = sub_18082CBF8(a1, a2, (int *)a3);
  if (v6 >= HIDWORD(xmmword_18C534F58)) {
    return 0LL;
  }
  unsigned int v7 = v6;
  int v8 = uprv_malloc(0x38uLL);
  int v9 = v8;
  if (!v8)
  {
    int v11 = 7;
    goto LABEL_9;
  }

  *(_OWORD *)int v8 = xmmword_1897125D8;
  *((_OWORD *)v8 + icu::UVector32::~UVector32(this + 1) = *(_OWORD *)&off_1897125E8;
  *((_OWORD *)v8 + 2) = xmmword_1897125F8;
  v8[6] = sub_18082E1DC;
  int v10 = uprv_malloc(8uLL);
  if (!v10)
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    uprv_free(v9);
    return 0LL;
  }

  _DWORD *v10 = v7;
  v10[1] = 0;
  v9[1] = v10;
  return v9;
}

uint64_t sub_18082CBF8(char *a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  unsigned int v5 = sub_18082E090(a2);
  int v6 = *(unsigned __int16 *)xmmword_18C534F38;
  memset(v37, 0, 60);
  unsigned int v7 = a1;
  if (v6)
  {
    if (strlen(a1) >= 0x3C)
    {
      int v8 = 15;
      unsigned int v9 = -1;
LABEL_17:
      *a3 = v8;
      goto LABEL_18;
    }

    unsigned int v7 = (char *)v37;
    ucnv_io_stripASCIIForCompare(v37, a1);
  }

  int v35 = a3;
  int v10 = 0;
  uint64_t v11 = DWORD1(xmmword_18C534F58);
  uint64_t v12 = DWORD1(xmmword_18C534F58) >> 1;
  uint64_t v13 = xmmword_18C534F18;
  uint64_t v15 = *((void *)&xmmword_18C534F38 + 1);
  uint64_t v14 = qword_18C534F48;
  while (1)
  {
    uint64_t v16 = *(unsigned __int16 *)(v13 + 2LL * v12);
    int v17 = v6 ? strcmp(v7, (const char *)(v14 + 2 * v16)) : ucnv_compareNames(v7, (char *)(v15 + 2 * v16));
    uint64_t v18 = v12;
    if ((v17 & 0x80000000) == 0)
    {
      int v10 = v12;
      uint64_t v18 = v11;
      if (!v17) {
        break;
      }
    }

    BOOL v19 = (_DWORD)v12 == (v18 + v10) >> 1;
    uint64_t v12 = (v18 + v10) >> 1;
    uint64_t v11 = v18;
    if (v19)
    {
      int v8 = 0;
      unsigned int v9 = -1;
      goto LABEL_18;
    }
  }

  unsigned int v9 = *(_WORD *)(*((void *)&xmmword_18C534F18 + 1) + 2LL * v12) & 0xFFF;
  if ((*(_WORD *)(*((void *)&xmmword_18C534F18 + 1) + 2LL * v12) & 0x8000) != 0)
  {
    int v8 = -122;
    a3 = v35;
    goto LABEL_17;
  }

  int v8 = 0;
LABEL_18:
  if (v5 >= dword_18C534F54 - 1 || v9 >= dword_18C534F50) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v20 = qword_18C534F28;
  int v36 = dword_18C534F50 * v5;
  unsigned int v21 = dword_18C534F50 * v5 + v9;
  uint64_t result = *(unsigned __int16 *)(qword_18C534F28 + 2LL * v21);
  if (!*(_WORD *)(qword_18C534F28 + 2LL * v21) || !*(_WORD *)(qword_18C534F30 + 2 * result + 2))
  {
    if (v8 == -122 && (uint64_t v23 = DWORD2(xmmword_18C534F58), DWORD2(xmmword_18C534F58)))
    {
      unsigned int v34 = dword_18C534F50;
      uint64_t v24 = 0LL;
      uint64_t v25 = qword_18C534F30;
      uint64_t v26 = *((void *)&xmmword_18C534F38 + 1);
      while (1)
      {
        if (*(_WORD *)(v20 + 2 * v24))
        {
          unsigned int v27 = (unsigned __int16 *)(v25 + 2LL * *(unsigned __int16 *)(v20 + 2 * v24));
          unsigned int v30 = *v27;
          uint64_t v28 = v27 + 1;
          unint64_t v29 = v30;
          if (v30)
          {
            uint64_t v31 = 0LL;
            BOOL v32 = 1;
            do
            {
              BOOL v32 = ++v31 < v29;
            }

            while (v29 != v31);
            if (v32)
            {
              unsigned int v33 = v24 % v34 + v36;
              uint64_t result = *(unsigned __int16 *)(v20 + 2LL * v33);
              if (*(_WORD *)(v20 + 2LL * v33))
              {
                if (*(_WORD *)(v25 + 2 * result + 2)) {
                  break;
                }
              }
            }
          }
        }

        if (++v24 == v23) {
          return 0LL;
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t ucnv_getStandard(unsigned int a1, UErrorCode *a2)
{
  if (!sub_18082C90C(a2)) {
    return 0LL;
  }
  if (dword_18C534F54 - 1 > a1) {
    return *((void *)&xmmword_18C534F38 + 1)
  }
         + 2LL * *(unsigned __int16 *)(*((void *)&xmmword_18C534F08 + 1) + 2LL * a1);
  uint64_t result = 0LL;
  *a2 = U_INDEX_OUTOFBOUNDS_ERROR;
  return result;
}

uint64_t ucnv_getStandardName(char *a1, unsigned __int8 *a2, UErrorCode *a3)
{
  if (!sub_18082C90C(a3)) {
    return 0LL;
  }
  if (a1)
  {
    if (*a1)
    {
      unsigned int v6 = sub_18082CBF8(a1, a2, (int *)a3);
      if (v6)
      {
        if (v6 < HIDWORD(xmmword_18C534F58) && *(_WORD *)(qword_18C534F30 + 2LL * v6 + 2)) {
          return *((void *)&xmmword_18C534F38 + 1) + 2LL * *(unsigned __int16 *)(qword_18C534F30 + 2LL * v6 + 2);
        }
      }
    }

    return 0LL;
  }

  uint64_t result = 0LL;
  *a3 = U_ILLEGAL_ARGUMENT_ERROR;
  return result;
}

uint64_t ucnv_countAliases(char *a1, UErrorCode *a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t result = sub_18082C90C(a2);
  if ((_DWORD)result)
  {
    if (!a1)
    {
      uint64_t result = 0LL;
      *a2 = U_ILLEGAL_ARGUMENT_ERROR;
      return result;
    }

    if (!*a1) {
      return 0LL;
    }
    int v5 = *(unsigned __int16 *)xmmword_18C534F38;
    memset(v19, 0, 60);
    if (v5)
    {
      if (strlen(a1) >= 0x3C)
      {
        *a2 = U_BUFFER_OVERFLOW_ERROR;
        return 0LL;
      }

      ucnv_io_stripASCIIForCompare(v19, a1);
      a1 = (char *)v19;
    }

    int v6 = 0;
    uint64_t v7 = DWORD1(xmmword_18C534F58);
    uint64_t v8 = DWORD1(xmmword_18C534F58) >> 1;
    uint64_t v9 = xmmword_18C534F18;
    uint64_t v11 = *((void *)&xmmword_18C534F38 + 1);
    uint64_t v10 = qword_18C534F48;
    while (1)
    {
      uint64_t v12 = *(unsigned __int16 *)(v9 + 2LL * v8);
      int v13 = v5 ? strcmp(a1, (const char *)(v10 + 2 * v12)) : ucnv_compareNames(a1, (char *)(v11 + 2 * v12));
      uint64_t v14 = v8;
      if ((v13 & 0x80000000) == 0)
      {
        int v6 = v8;
        uint64_t v14 = v7;
        if (!v13) {
          break;
        }
      }

      BOOL v15 = (_DWORD)v8 == (v14 + v6) >> 1;
      uint64_t v8 = (v14 + v6) >> 1;
      uint64_t v7 = v14;
      if (v15) {
        return 0LL;
      }
    }

    __int16 v16 = *(_WORD *)(*((void *)&xmmword_18C534F18 + 1) + 2LL * v8);
    if (v16 < 0) {
      *a2 = U_AMBIGUOUS_ALIAS_WARNING;
    }
    unsigned int v17 = v16 & 0xFFF;
    if (dword_18C534F50 > v17)
    {
      uint64_t v18 = *(unsigned __int16 *)(qword_18C534F28 + 2LL * (v17 + (dword_18C534F54 - 1) * dword_18C534F50));
      if (v18) {
        return *(unsigned __int16 *)(qword_18C534F30 + 2 * v18);
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t ucnv_getAlias(char *a1, unsigned int a2, UErrorCode *a3)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (!sub_18082C90C(a3)) {
    return 0LL;
  }
  if (!a1)
  {
    uint64_t result = 0LL;
    int v8 = 1;
    goto LABEL_8;
  }

  if (*a1)
  {
    int v6 = *(unsigned __int16 *)xmmword_18C534F38;
    memset(v23, 0, 60);
    if (v6)
    {
      if (strlen(a1) >= 0x3C)
      {
        *a3 = U_BUFFER_OVERFLOW_ERROR;
        return 0LL;
      }

      ucnv_io_stripASCIIForCompare(v23, a1);
      a1 = (char *)v23;
    }

    int v9 = 0;
    uint64_t v10 = DWORD1(xmmword_18C534F58);
    uint64_t v11 = DWORD1(xmmword_18C534F58) >> 1;
    uint64_t v12 = xmmword_18C534F18;
    uint64_t v13 = *((void *)&xmmword_18C534F38 + 1);
    uint64_t v14 = qword_18C534F48;
    while (1)
    {
      uint64_t v15 = *(unsigned __int16 *)(v12 + 2LL * v11);
      int v16 = v6 ? strcmp(a1, (const char *)(v14 + 2 * v15)) : ucnv_compareNames(a1, (char *)(v13 + 2 * v15));
      uint64_t v17 = v11;
      if ((v16 & 0x80000000) == 0)
      {
        int v9 = v11;
        uint64_t v17 = v10;
        if (!v16) {
          break;
        }
      }

      BOOL v18 = (_DWORD)v11 == (v17 + v9) >> 1;
      uint64_t v11 = (v17 + v9) >> 1;
      uint64_t v10 = v17;
      if (v18) {
        return 0LL;
      }
    }

    __int16 v19 = *(_WORD *)(*((void *)&xmmword_18C534F18 + 1) + 2LL * v11);
    if (v19 < 0) {
      *a3 = U_AMBIGUOUS_ALIAS_WARNING;
    }
    unsigned int v20 = v19 & 0xFFF;
    if (dword_18C534F50 <= v20) {
      return 0LL;
    }
    uint64_t v21 = *(unsigned __int16 *)(qword_18C534F28 + 2LL * (v20 + (dword_18C534F54 - 1) * dword_18C534F50));
    if (!v21) {
      return 0LL;
    }
    uint64_t v22 = (unsigned __int16 *)(qword_18C534F30 + 2 * v21);
    if (*v22 > a2) {
      return v13 + 2LL * v22[a2 + 1];
    }
    uint64_t result = 0LL;
    int v8 = 8;
LABEL_8:
    *a3 = v8;
    return result;
  }

  return 0LL;
}

unint64_t ucnv_getAliases(char *a1, void *a2, UErrorCode *a3)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  unint64_t result = sub_18082C90C(a3);
  if ((_DWORD)result)
  {
    if (!a1)
    {
      int v8 = 1;
      goto LABEL_8;
    }

    if (!*a1) {
      return result;
    }
    int v7 = *(unsigned __int16 *)xmmword_18C534F38;
    memset(v26, 0, 60);
    if (v7)
    {
      unint64_t result = strlen(a1);
      if (result >= 0x3C)
      {
        int v8 = 15;
LABEL_8:
        *a3 = v8;
        return result;
      }

      ucnv_io_stripASCIIForCompare(v26, a1);
      a1 = (char *)v26;
    }

    int v9 = 0;
    uint64_t v10 = DWORD1(xmmword_18C534F58);
    uint64_t v11 = DWORD1(xmmword_18C534F58) >> 1;
    uint64_t v12 = xmmword_18C534F18;
    uint64_t v13 = *((void *)&xmmword_18C534F38 + 1);
    uint64_t v14 = qword_18C534F48;
    while (1)
    {
      uint64_t v15 = *(unsigned __int16 *)(v12 + 2LL * v11);
      unint64_t result = v7 ? strcmp(a1, (const char *)(v14 + 2 * v15)) : ucnv_compareNames(a1, (char *)(v13 + 2 * v15));
      uint64_t v16 = v11;
      if ((result & 0x80000000) == 0)
      {
        int v9 = v11;
        uint64_t v16 = v10;
        if (!(_DWORD)result) {
          break;
        }
      }

      BOOL v17 = (_DWORD)v11 == (v16 + v9) >> 1;
      uint64_t v11 = (v16 + v9) >> 1;
      uint64_t v10 = v16;
      if (v17) {
        return result;
      }
    }

    __int16 v18 = *(_WORD *)(*((void *)&xmmword_18C534F18 + 1) + 2LL * v11);
    if (v18 < 0) {
      *a3 = U_AMBIGUOUS_ALIAS_WARNING;
    }
    unsigned int v19 = v18 & 0xFFF;
    if (dword_18C534F50 > v19)
    {
      uint64_t v20 = *(unsigned __int16 *)(qword_18C534F28 + 2LL * (v19 + (dword_18C534F54 - 1) * dword_18C534F50));
      if (v20)
      {
        uint64_t v21 = (unsigned __int16 *)(qword_18C534F30 + 2 * v20);
        unsigned int v24 = *v21;
        uint64_t v22 = v21 + 1;
        uint64_t v23 = v24;
        if (v24)
        {
          do
          {
            unsigned int v25 = *v22++;
            *a2++ = v13 + 2LL * v25;
            --v23;
          }

          while (v23);
        }
      }
    }
  }

  return result;
}

uint64_t ucnv_countStandards()
{
  int v3 = 0;
  BOOL v0 = sub_18082C90C((UErrorCode *)&v3);
  unsigned __int16 v1 = dword_18C534F54 - 1;
  if (!v0) {
    return 0;
  }
  return v1;
}

uint64_t ucnv_getCanonicalName(char *a1, unsigned __int8 *a2, UErrorCode *a3)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  if (!sub_18082C90C(a3)) {
    return 0LL;
  }
  if (!a1)
  {
    uint64_t result = 0LL;
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    return result;
  }

  if (!*a1) {
    return 0LL;
  }
  unsigned int v6 = sub_18082E090(a2);
  int v7 = *(unsigned __int16 *)xmmword_18C534F38;
  memset(v48, 0, 60);
  int v8 = a1;
  if (v7)
  {
    if (strlen(a1) >= 0x3C)
    {
      int v9 = 15;
      unsigned int v10 = -1;
      goto LABEL_22;
    }

    int v8 = (char *)v48;
    ucnv_io_stripASCIIForCompare(v48, a1);
  }

  unsigned int v45 = v6;
  int v12 = 0;
  uint64_t v13 = DWORD1(xmmword_18C534F58);
  uint64_t v14 = DWORD1(xmmword_18C534F58) >> 1;
  uint64_t v15 = xmmword_18C534F18;
  uint64_t v17 = *((void *)&xmmword_18C534F38 + 1);
  uint64_t v16 = qword_18C534F48;
  while (1)
  {
    uint64_t v18 = *(unsigned __int16 *)(v15 + 2LL * v14);
    int v19 = v7 ? strcmp(v8, (const char *)(v16 + 2 * v18)) : ucnv_compareNames(v8, (char *)(v17 + 2 * v18));
    uint64_t v20 = v14;
    if ((v19 & 0x80000000) == 0)
    {
      int v12 = v14;
      uint64_t v20 = v13;
      if (!v19) {
        break;
      }
    }

    BOOL v21 = (_DWORD)v14 == (v20 + v12) >> 1;
    uint64_t v14 = (v20 + v12) >> 1;
    uint64_t v13 = v20;
    if (v21)
    {
      int v9 = 0;
      unsigned int v10 = -1;
LABEL_20:
      unsigned int v6 = v45;
      goto LABEL_23;
    }
  }

  __int16 v22 = *(_WORD *)(*((void *)&xmmword_18C534F18 + 1) + 2LL * v14);
  unsigned int v10 = v22 & 0xFFF;
  if ((v22 & 0x8000) == 0)
  {
    int v9 = 0;
    goto LABEL_20;
  }

  int v9 = -122;
  unsigned int v6 = v45;
LABEL_22:
  *a3 = v9;
LABEL_23:
  if (v6 >= dword_18C534F54 - 1) {
    return 0LL;
  }
  unsigned int v23 = dword_18C534F50;
  if (v10 >= dword_18C534F50) {
    return 0LL;
  }
  uint64_t v24 = qword_18C534F28;
  uint64_t v25 = dword_18C534F50 * v6;
  uint64_t v26 = (unsigned __int16 *)(qword_18C534F30
                           + 2LL * *(unsigned __int16 *)(qword_18C534F28 + 2LL * (v25 + v10)));
  unsigned int v29 = *v26;
  uint64_t v27 = v26 + 1;
  unint64_t v28 = v29;
  if (!v29) {
    goto LABEL_50;
  }
  uint64_t v43 = dword_18C534F50 * v6;
  int v46 = dword_18C534F50;
  unsigned int v30 = v6;
  uint64_t v31 = 0LL;
  uint64_t v32 = *((void *)&xmmword_18C534F38 + 1);
  BOOL v33 = 1;
  do
  {
    BOOL v33 = ++v31 < v28;
  }

  while (v28 != v31);
  unsigned int v6 = v30;
  unsigned int v23 = v46;
  uint64_t v25 = v43;
  if (!v33)
  {
LABEL_50:
    if (v9 != -122) {
      return 0LL;
    }
    uint64_t v34 = v23 + v23 * v6;
    unsigned int v47 = v23;
    uint64_t v35 = qword_18C534F30;
    uint64_t v32 = *((void *)&xmmword_18C534F38 + 1);
    int v44 = v25;
    uint64_t v36 = v25;
    while (1)
    {
      if (*(_WORD *)(v24 + 2 * v36))
      {
        uint64_t v37 = (unsigned __int16 *)(v35 + 2LL * *(unsigned __int16 *)(v24 + 2 * v36));
        unsigned int v40 = *v37;
        uint64_t v38 = v37 + 1;
        unint64_t v39 = v40;
        if (v40)
        {
          uint64_t v41 = 0LL;
          BOOL v42 = 1;
          do
          {
            BOOL v42 = ++v41 < v39;
          }

          while (v39 != v41);
          if (v42) {
            break;
          }
        }
      }

      uint64_t result = 0LL;
      if (++v36 == v34) {
        return result;
      }
    }

    unsigned int v10 = v36 - v44;
    unsigned int v23 = v47;
  }

  if (v10 < v23) {
    return v32 + 2LL * *(unsigned __int16 *)(xmmword_18C534F08 + 2LL * v10);
  }
  return 0LL;
}

void *ucnv_openAllNames(UErrorCode *a1)
{
  if (!sub_18082C90C(a1)) {
    return 0LL;
  }
  unsigned int v2 = uprv_malloc(0x38uLL);
  int v3 = v2;
  if (!v2)
  {
    *a1 = U_MEMORY_ALLOCATION_ERROR;
    return v3;
  }

  *(_OWORD *)unsigned int v2 = xmmword_189712610;
  *((_OWORD *)v2 + icu::UVector32::~UVector32(this + 1) = *(_OWORD *)&off_189712620;
  *((_OWORD *)v2 + 2) = xmmword_189712630;
  v2[6] = sub_18082E26C;
  char v4 = uprv_malloc(2uLL);
  if (!v4)
  {
    *a1 = U_MEMORY_ALLOCATION_ERROR;
    uprv_free(v3);
    return 0LL;
  }

  *char v4 = 0;
  v3[1] = v4;
  return v3;
}

uint64_t ucnv_io_countKnownConverters(UErrorCode *a1)
{
  BOOL v1 = sub_18082C90C(a1);
  unsigned __int16 v2 = dword_18C534F50;
  if (!v1) {
    return 0;
  }
  return v2;
}

uint64_t ucnv_swapAliases( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = a3;
  uint64_t v99 = *MEMORY[0x1895F89C0];
  int v13 = udata_swapDataHeader(a1, (unsigned __int16 *)a2, a3, a4, a5, a6, a7, a8);
  if (!a5 || *a5 > 0) {
    return 0LL;
  }
  uint64_t v21 = *(unsigned __int8 *)(a2 + 12);
  if (__PAIR64__(*(unsigned __int8 *)(a2 + 13), v21) != 0x7600000043LL
    || *(_BYTE *)(a2 + 14) != 65
    || *(_BYTE *)(a2 + 15) != 108
    || *(_BYTE *)(a2 + 16) != 3)
  {
    udata_printError( a1,  (uint64_t)"ucnv_swapAliases(): data format %02x.%02x.%02x.%02x (format version %02x) is not an alias table\n",  v14,  v15,  v16,  v17,  v18,  v19,  v21);
    uint64_t result = 0LL;
    int v32 = 16;
    goto LABEL_13;
  }

  int v22 = v13;
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t v23 = (v10 - v13);
    if ((int)v23 <= 35)
    {
LABEL_23:
      udata_printError( a1,  (uint64_t)"ucnv_swapAliases(): too few bytes (%d after header) for an alias table\n",  v14,  v15,  v16,  v17,  v18,  v19,  v23);
      uint64_t result = 0LL;
      int v32 = 8;
      goto LABEL_13;
    }
  }

  int v98 = 0;
  __int128 v97 = 0u;
  __int128 v96 = 0u;
  uint64_t v24 = (*(uint64_t (**)(void))(a1 + 16))(*(unsigned int *)(a2 + v13));
  unsigned int v31 = v24;
  v95[0] = v24;
  if ((v24 - 10) < 0xFFFFFFFE)
  {
    udata_printError( a1,  (uint64_t)"ucnv_swapAliases(): table of contents contains unsupported number of sections (%u sections)\n",  v25,  v26,  v27,  v28,  v29,  v30,  v24);
    uint64_t result = 0LL;
    int v32 = 3;
LABEL_13:
    *a5 = v32;
    return result;
  }

  uint64_t v83 = a2 + v22;
  uint64_t v33 = v22 + 4LL;
  uint64_t v34 = &v96;
  unint64_t __dst = (v24 + 1);
  uint64_t v35 = (char *)(__dst - 1);
  do
  {
    *(_DWORD *)uint64_t v34 = (*(uint64_t (**)(void))(a1 + 16))(*(unsigned int *)(a2 + v33));
    uint64_t v34 = (__int128 *)((char *)v34 + 4);
    v33 += 4LL;
    --v35;
  }

  while (v35);
  uint64_t v94 = 0LL;
  __int128 v92 = 0u;
  __int128 v93 = 0u;
  int v36 = 2 * __dst;
  DWORD1(v92) = 2 * __dst;
  if (v31 >= 2)
  {
    uint64_t v38 = 0LL;
    do
    {
      v36 += *((_DWORD *)&v96 + (void)v38);
      *((_DWORD *)&v92 + (void)v38++ + 2) = v36;
    }

    while ((_BYTE *)(__dst - 2) != v38);
    int v36 = *((_DWORD *)&v92 + (void)v38 + 1);
    int v37 = (_DWORD)v38 + 1;
  }

  else
  {
    int v37 = 1;
  }

  int v39 = v95[v37] + v36;
  if (v10 < 0)
  {
    int v40 = 2 * v39;
  }

  else
  {
    uint64_t v23 = (v10 - v22);
    uint64_t v41 = (char *)a4 + v22;
    (*(void (**)(uint64_t, uint64_t, void, char *, int *))(a1 + 56))( a1,  v83,  (4 * __dst),  v41,  a5);
    uint64_t v42 = v94;
    (*(void (**)(uint64_t, uint64_t, void, char *, int *))(a1 + 72))( a1,  v83 + 2LL * v94,  (2 * (v98 + HIDWORD(v97))),  &v41[2 * v94],  a5);
    if (*a5 >= 1)
    {
      udata_printError( a1,  (uint64_t)"ucnv_swapAliases().swapInvChars(charset names) failed\n",  v43,  v44,  v45,  v46,  v47,  v48,  v77);
      return 0LL;
    }

    int v40 = 2 * v39;
    int v49 = *(unsigned __int8 *)(a1 + 3);
    if (*(unsigned __int8 *)(a1 + 1) == v49)
    {
      (*(void (**)(uint64_t, uint64_t, void, char *, int *))(a1 + 48))( a1,  v83 + 2LL * DWORD1(v92),  (2 * (v42 - DWORD1(v92))),  &v41[2 * DWORD1(v92)],  a5);
    }

    else
    {
      int v87 = 0LL;
      __src = 0LL;
      unint64_t v89 = 0LL;
      uint64_t v50 = DWORD2(v96);
      uint64_t v86 = &v41[2 * v42];
      if (DWORD2(v96) > 0x1F4)
      {
        uint64_t v52 = (unsigned __int16 *)uprv_malloc((2 * DWORD2(v96)) + 4LL * DWORD2(v96));
        int v87 = v52;
        if (!v52)
        {
          udata_printError( a1,  (uint64_t)"ucnv_swapAliases(): unable to allocate memory for sorting tables (max length: %u)\n",  v53,  v54,  v55,  v56,  v57,  v58,  v50);
          uint64_t result = 0LL;
          int v32 = 7;
          goto LABEL_13;
        }

        int v79 = v42;
        int v80 = v40;
        uint64_t v51 = v52;
        __src = &v52[2 * v50];
        int v49 = *(unsigned __int8 *)(a1 + 3);
      }

      else
      {
        int v79 = v42;
        int v80 = v40;
        uint64_t v51 = (unsigned __int16 *)v91;
        int v87 = (unsigned __int16 *)v91;
        __src = v90;
      }

      unsigned int v81 = (char *)a4 + v22;
      if (v49) {
        int v59 = ucnv_io_stripEBCDICForCompare;
      }
      else {
        int v59 = ucnv_io_stripASCIIForCompare;
      }
      bzero(v91, 0x7D0uLL);
      bzero(v90, 0x3E8uLL);
      unint64_t v89 = v59;
      uint64_t v78 = v93;
      uint64_t v82 = HIDWORD(v92);
      uint64_t v60 = v83 + 2LL * HIDWORD(v92);
      uint64_t v61 = (uint64_t)v51;
      if ((_DWORD)v50)
      {
        uint64_t v62 = 0LL;
        uint64_t v63 = v51 + 1;
        do
        {
          *(v63 - icu::UVector32::~UVector32(this + 1) = (*(uint64_t (**)(void))(a1 + 8))(*(unsigned __int16 *)(v60 + 2 * v62));
          *uint64_t v63 = v62;
          v63 += 2;
          ++v62;
        }

        while (v50 != v62);
      }

      uprv_sortArray( v61,  v50,  4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18082DF20,  (uint64_t)&v86,  0,  a5);
      if (*a5 <= 0)
      {
        __dsta = &v81[2 * v78];
        uint64_t v70 = v83 + 2 * v78;
        if ((unsigned __int16 *)a2 == a4)
        {
          unsigned int v73 = (char *)__src;
          if ((_DWORD)v50)
          {
            uint64_t v74 = 0LL;
            size_t v75 = 2 * v50;
            do
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t, char *, int *))(a1 + 48))( a1,  v60 + 2LL * v87[v74 + 1],  2LL,  &v73[v74],  a5);
              v74 += 2LL;
            }

            while (v75 != v74);
            memcpy(&v81[2 * v82], v73, 2 * v50);
            uint64_t v76 = 0LL;
            do
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t, char *, int *))(a1 + 48))( a1,  v70 + 2LL * v87[v76 + 1],  2LL,  &v73[v76],  a5);
              v76 += 2LL;
            }

            while (v75 != v76);
          }

          else
          {
            memcpy(&v81[2 * v82], __src, 2 * v50);
            size_t v75 = 0LL;
          }

          memcpy(__dsta, v73, v75);
        }

        else if ((_DWORD)v50)
        {
          uint64_t v71 = 0LL;
          do
          {
            uint64_t v72 = v87[v71 + 1];
            (*(void (**)(uint64_t, uint64_t, uint64_t, char *, int *))(a1 + 48))( a1,  v60 + 2 * v72,  2LL,  &v81[2 * v82 + v71],  a5);
            (*(void (**)(uint64_t, uint64_t, uint64_t, char *, int *))(a1 + 48))( a1,  v70 + 2 * v72,  2LL,  &__dsta[v71],  a5);
            v71 += 2LL;
          }

          while (2 * v50 != v71);
        }
      }

      if (*a5 >= 1)
      {
        udata_printError( a1,  (uint64_t)"ucnv_swapAliases().uprv_sortArray(%u items) failed\n",  v64,  v65,  v66,  v67,  v68,  v69,  v50);
        return 0LL;
      }

      (*(void (**)(uint64_t, uint64_t, void, char *, int *))(a1 + 48))( a1,  v83 + 2LL * DWORD1(v92),  (2 * (v82 - DWORD1(v92))),  &v81[2 * DWORD1(v92)],  a5);
      (*(void (**)(uint64_t, uint64_t, void, char *, int *))(a1 + 48))( a1,  v83 + 2LL * DWORD1(v93),  (2 * (v79 - DWORD1(v93))),  &v81[2 * DWORD1(v93)],  a5);
      int v40 = v80;
    }
  }

  return (v40 + v22);
}

uint64_t sub_18082DF20(uint64_t *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  memset(v10, 0, 60);
  memset(v9, 0, 60);
  uint64_t v5 = *a1;
  unsigned int v6 = (const char *)((uint64_t (*)(_OWORD *, uint64_t))a1[3])(v10, *a1 + 2LL * *a2);
  int v7 = (const char *)((uint64_t (*)(_OWORD *, uint64_t))a1[3])(v9, v5 + 2LL * *a3);
  return strcmp(v6, v7);
}

uint64_t sub_18082DFD4()
{
  if (qword_18C534F80)
  {
    udata_close((_OWORD *)qword_18C534F80);
    qword_18C534F80 = 0LL;
  }

  atomic_store(0, &dword_18C534F78);
  xmmword_18C534F58 = 0u;
  *(_OWORD *)&dword_18C534F68 = 0u;
  xmmword_18C534F38 = 0u;
  *(_OWORD *)&qword_18C534F48 = 0u;
  xmmword_18C534F18 = 0u;
  *(_OWORD *)&qword_18C534F28 = 0u;
  xmmword_18C534F08 = 0u;
  return 1LL;
}

BOOL sub_18082E02C(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  return *(unsigned __int16 *)a4 >= 0x14u
      && !a4[4]
      && !a4[5]
      && a4[8] == 67
      && a4[9] == 118
      && a4[10] == 65
      && a4[11] == 108
      && a4[12] == 3;
}

uint64_t sub_18082E090(unsigned __int8 *a1)
{
  if (*((void *)&xmmword_18C534F08 + 1)) {
    BOOL v1 = dword_18C534F54 == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = 0LL;
  while (uprv_stricmp( (_BYTE *)(*((void *)&xmmword_18C534F38 + 1)
                                  + 2LL * *(unsigned __int16 *)(*((void *)&xmmword_18C534F08 + 1) + 2 * v3)),
                          a1))
  {
  }

  return v3;
}

void sub_18082E10C(void **a1)
{
}

uint64_t sub_18082E134(uint64_t a1)
{
  uint64_t v1 = **(unsigned int **)(a1 + 8);
  if ((_DWORD)v1) {
    return *(unsigned __int16 *)(qword_18C534F30 + 2 * v1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_18082E158(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = *(unsigned int **)(a1 + 8);
  uint64_t v4 = *v3;
  if ((_DWORD)v4 && (uint64_t v5 = (unsigned __int16 *)(qword_18C534F30 + 2 * v4), v6 = v3[1], v6 < *v5))
  {
    uint64_t v7 = *((void *)&xmmword_18C534F38 + 1);
    v3[1] = v6 + 1;
    uint64_t v8 = v5[v6 + 1];
    uint64_t v9 = v7 + 2 * v8;
    if (a2)
    {
      int v10 = strlen((const char *)(v7 + 2 * v8));
LABEL_7:
      *a2 = v10;
    }
  }

  else
  {
    uint64_t v9 = 0LL;
    if (a2)
    {
      int v10 = 0;
      goto LABEL_7;
    }
  }

  return v9;
}

uint64_t sub_18082E1DC(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 8) + 4LL) = 0;
  return result;
}

uint64_t sub_18082E1E8()
{
  return dword_18C534F50;
}

uint64_t sub_18082E1F4(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = *(_WORD **)(a1 + 8);
  uint64_t v4 = (unsigned __int16)*v3;
  if (dword_18C534F50 <= v4)
  {
    uint64_t v8 = 0LL;
    if (a2)
    {
      int v9 = 0;
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v5 = *((void *)&xmmword_18C534F38 + 1);
    uint64_t v6 = xmmword_18C534F08;
    *uint64_t v3 = v4 + 1;
    uint64_t v7 = *(unsigned __int16 *)(v6 + 2 * v4);
    uint64_t v8 = v5 + 2 * v7;
    if (a2)
    {
      int v9 = strlen((const char *)(v5 + 2 * v7));
LABEL_6:
      *a2 = v9;
    }
  }

  return v8;
}

uint64_t sub_18082E26C(uint64_t result)
{
  **(_WORD **)(result + 8) = 0;
  return result;
}

void sub_18082E278(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
}

void sub_18082E280(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    for (uint64_t i = 0LL; i != 160; i += 8LL)
    {
      uint64_t v4 = *(void *)(v1 + i);
      if (v4) {
        sub_180827BA4(v4);
      }
    }

    if (!*(_BYTE *)(a1 + 62))
    {
      uprv_free(*(void **)(a1 + 16));
      *(void *)(a1 + 16) = 0LL;
    }
  }

void *sub_18082E2DC(void *result, int *a2)
{
  uint64_t v3 = result;
  int v4 = *a2;
  if (*a2 < 1)
  {
    char v21 = 0;
    __int16 __dst = 0;
    unint64_t v6 = result[2];
    unint64_t v7 = result[3];
    if (v7 <= v6) {
      return result;
    }
    uint64_t v8 = (char *)result[2];
    while (1)
    {
      if (v3[5] <= v3[4])
      {
        int v5 = 15;
        goto LABEL_5;
      }

      uint64_t v9 = v3[1];
      uint64_t v10 = *(char *)(v9 + 64);
      if (*(_BYTE *)(v9 + 64))
      {
        else {
          size_t v11 = 3 - v10;
        }
        memcpy(&__dst, (const void *)(v9 + 65), *(char *)(v9 + 64));
        int v12 = (char *)&__dst + v10;
        memcpy((char *)&__dst + v10, v8, v11);
        v3[2] = &__dst;
        v3[3] = (char *)&__dst + v10 + v11;
        unsigned __int8 v13 = v10 + v11;
        uint64_t result = (void *)sub_18082ED3C(v3, a2);
        uint64_t v14 = v3[1];
        uint64_t v15 = &v8[v3[2] - (void)v12];
        v3[2] = v15;
        v3[3] = v7;
        int v4 = *a2;
        if (*a2 == 11)
        {
          *(_BYTE *)(v14 + 64) = v13;
          uint64_t result = memcpy((void *)(v14 + 65), &__dst, (char)v13);
          int v5 = 0;
          v3[2] = v3[3];
          goto LABEL_5;
        }

        *(_BYTE *)(v14 + 64) = 0;
        p_dst = &__dst;
      }

      else
      {
        uint64_t result = (void *)sub_18082ED3C(v3, a2);
        uint64_t v15 = (char *)v3[2];
        unsigned __int8 v13 = (_BYTE)v15 - (_BYTE)v8;
        int v4 = *a2;
        p_dst = (__int16 *)v8;
      }

      if (v4 > 0) {
        break;
      }
      if ((unsigned __int16)result > 0xFFFDu)
      {
        else {
          int v4 = 12;
        }
        *a2 = v4;
        break;
      }

      uint64_t v17 = (_WORD *)v3[4];
      *uint64_t v17 = (_WORD)result;
      v3[4] = v17 + 1;
      uint64_t v18 = (_DWORD *)v3[6];
      if (v18)
      {
        *uint64_t v18 = (_DWORD)v8 - v6;
        v3[6] = v18 + 1;
      }

      unint64_t v7 = v3[3];
      uint64_t v8 = v15;
    }

    uint64_t v19 = v3[1];
    *(_BYTE *)(v19 + 64) = v13;
    if ((char)v13 >= 1)
    {
      uint64_t result = memcpy((void *)(v19 + 65), p_dst, v13);
      int v4 = *a2;
    }
  }

  else
  {
    *(_BYTE *)(result[1] + 64LL) = 0;
  }

  if (v4 == 11)
  {
    int v5 = 0;
LABEL_5:
    *a2 = v5;
  }

  return result;
}

uint64_t sub_18082E4C8(uint64_t result, int *a2)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  unsigned __int8 v39 = 0;
  unsigned __int16 v2 = *(unsigned __int16 **)(result + 16);
  if ((unint64_t)v2 < *(void *)(result + 24))
  {
    int v4 = (void *)result;
    int v5 = 0;
    uint64_t v6 = *(void *)(*(void *)(result + 8) + 16LL);
    unint64_t v7 = (char *)&v36 + 1;
    char v37 = 0;
    __int16 v36 = 0;
    uint64_t v40 = 0LL;
    uint64_t v41 = 0LL;
    int v42 = 0;
    while (1)
    {
      if (*a2 > 0) {
        return result;
      }
      if (v4[4] >= v4[5])
      {
        *a2 = 15;
        return result;
      }

      char v8 = *(_BYTE *)(v6 + 161);
      unsigned __int16 v9 = *v2;
      unsigned __int16 v38 = v9;
      if ((v9 & 0xFF80) != 0x80) {
        break;
      }
      uint64_t v10 = &v36;
      BOOL v11 = v9 - 167 > 0x30 || ((1LL << (v9 + 89)) & 0x100000000A603LL) == 0;
      if (v11 && v9 != 247)
      {
        *(_BYTE *)(v6 + 16icu::UVector32::~UVector32(this + 1) = 1;
LABEL_15:
        uint64_t v10 = &v36;
        if (v9 <= 0x19u && ((1 << v9) & 0x2002601) != 0)
        {
          LOBYTE(v36) = v9;
          uint64_t v10 = (__int16 *)v7;
        }
      }

      if (v9 <= 0x19u && ((1 << v9) & 0x2002601) != 0) {
        goto LABEL_20;
      }
      uint64_t v19 = (unsigned __int8 *)&unk_180A255B2;
      do
      {
        unsigned int v20 = *((unsigned __int16 *)v19 + 2);
        v19 += 6;
      }

      while (v20 < v9);
      unsigned int v21 = *v19;
      if (v21 == 15)
      {
        if (v9 <= 0x1Fu)
        {
          *(_BYTE *)uint64_t v10 = 15;
          LOBYTE(v9) = v9 + 32;
          goto LABEL_51;
        }

        if ((unsigned __int16)(v9 - 128) <= 0x20u)
        {
          *(_BYTE *)uint64_t v10 = 15;
LABEL_51:
          *((_BYTE *)v10++ + icu::UVector32::~UVector32(this + 1) = v9;
        }

        uint64_t result = (char *)v10 - (char *)&v36;
        unsigned int v21 = 15;
        goto LABEL_53;
      }

      if (v21 == 20)
      {
LABEL_39:
        unsigned int v21 = 20;
        *(_BYTE *)uint64_t v10 = 20;
        if ((_BYTE)v9) {
          char v22 = HIBYTE(v9);
        }
        else {
          char v22 = -10;
        }
        if (!(_BYTE)v9) {
          LOBYTE(v9) = HIBYTE(v9);
        }
        *((_BYTE *)v10 + icu::UVector32::~UVector32(this + 1) = v22;
        *((_BYTE *)v10 + 2) = v9;
        uint64_t v10 = (__int16 *)((char *)v10 + 3);
        uint64_t result = (char *)v10 - (char *)&v36;
      }

      else
      {
        if (v21 > 0x13) {
          goto LABEL_54;
        }
        uint64_t result = sub_18082EFB0(v6, *v19, v10, &v38, &v39, (uint64_t)&v40);
      }

uint64_t sub_18082EAC0(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
  {
    uint64_t v3 = 0LL;
    *a3 = 456;
  }

  else
  {
    uint64_t v3 = a2;
    uint64_t v4 = 0LL;
    int v5 = *(__int128 **)(a1 + 16);
    __int128 v6 = *v5;
    __int128 v7 = v5[2];
    *(_OWORD *)(a2 + 304) = v5[1];
    *(_OWORD *)(a2 + 320) = v7;
    *(_OWORD *)(a2 + 288) = v6;
    __int128 v8 = v5[3];
    __int128 v9 = v5[4];
    __int128 v10 = v5[6];
    *(_OWORD *)(a2 + 368) = v5[5];
    *(_OWORD *)(a2 + 384) = v10;
    *(_OWORD *)(a2 + 336) = v8;
    *(_OWORD *)(a2 + 352) = v9;
    __int128 v11 = v5[7];
    __int128 v12 = v5[8];
    __int128 v13 = v5[9];
    *(void *)(a2 + 448) = *((void *)v5 + 20);
    uint64_t v14 = a2 + 288;
    *(_OWORD *)(a2 + 416) = v12;
    *(_OWORD *)(a2 + 432) = v13;
    *(_OWORD *)(a2 + 400) = v11;
    do
    {
      uint64_t v15 = *(void *)((char *)v5 + v4);
      if (v15) {
        sub_180827BF4(v15);
      }
      v4 += 8LL;
    }

    while (v4 != 160);
    *(void *)(v3 + 16) = v14;
    *(_BYTE *)(v3 + 62) = 1;
  }

  return v3;
}

void sub_18082EB6C(uint64_t a1, uint64_t a2, UErrorCode *a3, char a4)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  __int128 v8 = uprv_malloc(0xA8uLL);
  *(void *)(a1 + 16) = v8;
  if (v8)
  {
    __int128 v9 = v8;
    uint64_t v10 = 0LL;
    memset(v21, 0, sizeof(v21));
    uint64_t v20 = 0LL;
    memset(v19, 0, sizeof(v19));
    LODWORD(v19[0]) = 40;
    _OWORD *v8 = 0u;
    v8[1] = 0u;
    __int128 v8[2] = 0u;
    v8[3] = 0u;
    v8[4] = 0u;
    v8[5] = 0u;
    v8[6] = 0u;
    v8[7] = 0u;
    __int128 v8[8] = 0u;
    v8[9] = 0u;
    BYTE8(v19[0]) = *(_BYTE *)(a2 + 8);
    *((void *)v8 + 20) = 0LL;
    do
    {
      if (((0xF680uLL >> v10) & 1) == 0) {
        *((void *)v9 + v10) = sub_180827C48((unsigned __int8 *)off_189713AE8[v10], v21, v19, a3);
      }
      ++v10;
    }

    while (v10 != 20);
    if (*(int *)a3 > 0 || *(_BYTE *)(a2 + 8))
    {
LABEL_9:
      sub_18082E280(a1);
      return;
    }

    *((_BYTE *)v9 + 160) = a4;
    __int128 v11 = *(const char **)(a2 + 32);
    if (v11 && (int v12 = *(unsigned __int8 *)v11, *v11))
    {
      __int128 v13 = "ar";
      uint64_t v14 = &off_189713B98;
      do
      {
        int v15 = *(unsigned __int8 *)v13;
        if (v15 == v12)
        {
          size_t v16 = strlen(v13);
          if (!strncmp(v13, v11, v16))
          {
            char v18 = *((_BYTE *)v14 - 8);
            goto LABEL_22;
          }
        }

        else if ((char)v15 > (char)v12)
        {
          break;
        }

        uint64_t v17 = *v14;
        v14 += 2;
        __int128 v13 = v17;
      }

      while (v17);
      char v18 = 1;
    }

    else
    {
      char v18 = 0;
    }

uint64_t sub_18082ED3C(void *a1, _DWORD *a2)
{
  uint64_t v4 = (unsigned __int8 *)a1[2];
  unint64_t v3 = a1[3];
  if ((unint64_t)v4 >= v3)
  {
    *a2 = 1;
    return 0xFFFFLL;
  }

  else
  {
    __int128 v6 = v4 + 1;
    a1[2] = v4 + 1;
    unsigned __int8 v7 = *v4;
    uint64_t result = *v4;
    if ((char)*v4 <= 31)
    {
      switch(*v4)
      {
        case 9u:
        case 0xAu:
        case 0xDu:
          return result;
        case 0xBu:
        case 0xCu:
        case 0xEu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
          goto LABEL_15;
        case 0xFu:
          a1[2] = v4 + 2;
          int v9 = *v6;
          if ((v9 & 0x80u) == 0) {
            return (v9 - 32);
          }
          else {
            return *v6;
          }
        case 0x14u:
          a1[2] = v4 + 2;
          int v22 = v4[1];
          a1[2] = v4 + 3;
          int v23 = v4[2];
          if (v22 == 246)
          {
            int v22 = v4[2];
            int v23 = 0;
          }

          return v23 | (v22 << 8);
        default:
          if (*v4) {
            BOOL v10 = (_DWORD)result == 25;
          }
          else {
            BOOL v10 = 1;
          }
          if (v10) {
            return result;
          }
LABEL_15:
          if (*v4 <= 0x20u)
          {
            if (*v4 > 0x13u || (__int128 v11 = *(uint64_t **)(a1[1] + 16LL), (v12 = v11[*v4]) == 0))
            {
              uint64_t result = 0LL;
              *a2 = 10;
              return result;
            }

            if (*v4 >= 0x10u)
            {
              if ((unint64_t)(v4 + 3) <= v3)
              {
                if ((char)*v6 != (_DWORD)result)
                {
                  uint64_t result = sub_18083932C(v12, (uint64_t)v6, 2);
                  uint64_t v21 = a1[2] + 2LL;
                  goto LABEL_29;
                }

                uint64_t v13 = (uint64_t)(v4 + 2);
                a1[2] = v4 + 2;
                uint64_t v14 = v12;
                int v15 = 1;
LABEL_28:
                uint64_t result = sub_18083932C(v14, v13, v15);
                uint64_t v21 = a1[2] + 1LL;
LABEL_29:
                a1[2] = v21;
                return result;
              }

              goto LABEL_23;
            }

            BOOL v26 = v4 + 2;
            a1[2] = v26;
            int v27 = (char)*v6;
            if ((v27 & 0x80000000) == 0)
            {
              uint64_t v28 = *v11;
              v29[0] = v7;
              v29[1] = v27;
              return sub_18083932C(v28, (uint64_t)v29, 2);
            }

            uint64_t v25 = *v6;
            uint64_t v24 = *(void *)(v12 + 56);
            return *(unsigned __int16 *)(v24 + 4 * v25);
          }

          uint64_t v16 = *(void *)(a1[1] + 16LL);
          unint64_t v17 = *(unsigned __int8 *)(v16 + 160);
          uint64_t v18 = *(void *)(v16 + 8 * v17);
          if (v17 < 0x10)
          {
            uint64_t v24 = *(void *)(v18 + 56);
            uint64_t v25 = v7;
            return *(unsigned __int16 *)(v24 + 4 * v25);
          }

          BOOL v19 = sub_18083AC50(*(void *)(v16 + 8 * v17), v7);
          unint64_t v20 = a1[2];
          if (v19)
          {
            unint64_t v3 = a1[3];
            if (v20 + 1 <= v3)
            {
              uint64_t v13 = v20 - 1;
              uint64_t v14 = v18;
              int v15 = 2;
              goto LABEL_28;
            }

uint64_t sub_18082EFB0(uint64_t a1, unsigned int a2, _BYTE *a3, unsigned __int16 *a4, _BYTE *a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a1 + 8LL * a2);
  int v18 = 0;
  char v12 = a2;
  int v13 = sub_18083AB3C(v11, *a4, &v18, 0);
  if (v13 < 1)
  {
    uint64_t result = 0LL;
    *(_BYTE *)(a6 + a2) = 1;
  }

  else
  {
    int v14 = v18;
    *a5 = v12;
    int v15 = a3;
    if (a2)
    {
      int v15 = a3;
      if (*(unsigned __int8 *)(a1 + 160) != a2)
      {
        *a3 = a2;
        int v15 = a3 + 1;
        if (a2 >= 0x10 && v13 == 1)
        {
          int v15 = a3 + 2;
          a3[1] = a2;
        }
      }
    }

    if (v13 == 1 && (v14 & 0xE0) == 0)
    {
      return 0LL;
    }

    else
    {
      switch(v13)
      {
        case 1:
          goto LABEL_15;
        case 2:
          goto LABEL_14;
        case 3:
          goto LABEL_13;
        case 4:
          *v15++ = HIBYTE(v14);
LABEL_13:
          *v15++ = BYTE2(v14);
          BYTE1(v14) = BYTE1(v18);
LABEL_14:
          *v15++ = BYTE1(v14);
          LOBYTE(v14) = v18;
LABEL_15:
          *v15++ = v14;
          break;
        default:
          return v15 - a3;
      }

      return v15 - a3;
    }
  }

  return result;
}

void sub_18082F0D8(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
}

void sub_18082F0E0(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
}

void sub_18082F0E8(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
}

void sub_18082F0F0(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
}

void sub_18082F0F8(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
}

void sub_18082F100(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
}

void sub_18082F108(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
}

void sub_18082F110(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
}

void sub_18082F118(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
}

void sub_18082F120(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
}

void sub_18082F128(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
}

uint64_t ucnv_getUnicodeSet(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (a4 && *a4 <= 0)
  {
    uint64_t v5 = result;
    if (result && a2 && a3 < 2)
    {
      if (*(void *)(*(void *)(*(void *)(result + 48) + 32LL) + 120LL))
      {
        v8[1] = 0x1808768ECLL;
        __int128 v9 = *(_OWORD *)&off_189713D28;
        __int128 v10 = xmmword_189713D38;
        v8[0] = a2;
        uset_clear(a2);
        return (*(uint64_t (**)(uint64_t, void *, uint64_t, int *))(*(void *)(*(void *)(v5 + 48) + 32LL)
                                                                            + 120LL))( v5,  v8,  a3,  a4);
      }

      int v7 = 16;
    }

    else
    {
      int v7 = 1;
    }

    *a4 = v7;
  }

  return result;
}

_DWORD *sub_18082F1EC(_DWORD *result, uint64_t a2, _DWORD *a3)
{
  if ((result[14] & 0xE) != 0)
  {
    *a3 = 1;
  }

  else
  {
    int v3 = result[14] & 0xF;
    result[19] = 8 * (v3 == 0);
    if (v3 == 1) {
      result[20] = 1;
    }
  }

  return result;
}

_DWORD *sub_18082F224(_DWORD *result, int a2)
{
  int v2 = result[14] & 0xF;
  if (a2 > 1 || (result[19] = 8 * (v2 == 0), a2 != 1))
  {
    if (v2 == 1) {
      result[20] = 1;
    }
  }

  return result;
}

void *sub_18082F260(void *result, int *a2)
{
  uint64_t v2 = result[1];
  unint64_t v3 = result[2];
  uint64_t v4 = result[3];
  unsigned int v5 = v4 - v3;
  if ((_DWORD)v4 != (_DWORD)v3 || *(_DWORD *)(v2 + 72))
  {
    __int128 v6 = (_WORD *)result[4];
    unint64_t v7 = result[5];
    if ((unint64_t)v6 >= v7)
    {
      *a2 = 15;
      return result;
    }

    unint64_t v8 = (v7 - (unint64_t)v6) >> 1;
    __int128 v9 = (int *)result[6];
    int v10 = *(_DWORD *)(v2 + 72);
    if (v10)
    {
      LOBYTE(v1icu::UVector32::~UVector32(this + 1) = 1;
      *(_BYTE *)(v2 + 64) = 1;
      char v12 = (char *)(v2 + 64);
      *(_BYTE *)(v2 + 65) = v10;
      *(_DWORD *)(v2 + 72) = 0;
    }

    else
    {
      char v12 = (char *)(v2 + 64);
      unsigned int v11 = *(unsigned __int8 *)(v2 + 64);
      if (!*(_BYTE *)(v2 + 64))
      {
        char v19 = 0;
        int v15 = 0;
        goto LABEL_33;
      }
    }

    uint64_t v13 = 0LL;
    int v14 = (char)v11;
    int v15 = 4 - (char)v11;
    unsigned int v16 = v4 + (char)v11 - v3 - 4;
    unsigned int v17 = ~(_DWORD)v3 + v4;
    while (1)
    {
      uint64_t v18 = v13;
      *(_BYTE *)(v2 + 65 + (v14 + v1(*(void (**)(void))(**((void **)this + 3) + 40LL))(*((void *)this + 3)) = *(_BYTE *)(v3 + v13);
      if (v14 + (_DWORD)v13 == 1)
      {
        unsigned int v11 = __rev16(*(unsigned __int16 *)(v2 + 65));
        if ((v11 & 0xF800) != 0xD800)
        {
          *v6++ = v11;
          int v15 = v13 + 1;
          if (v9) {
            *v9++ = -1;
          }
          char v19 = 0;
          unsigned int v11 = 0;
          LODWORD(v8) = v8 - 1;
          goto LABEL_32;
        }

        if ((v11 & 0x400) != 0)
        {
          int v15 = v13 + 1;
          char v19 = 2;
          goto LABEL_32;
        }
      }

      else if (v14 + (_DWORD)v13 == 3)
      {
        if ((*(_BYTE *)(v2 + 67) & 0xFC) != 0xDC)
        {
          *a2 = 12;
          if ((uint64_t)(~v3 + result[2] - v13) < 2)
          {
            uint64_t v23 = v3 + v13;
            *(_DWORD *)(v2 + 72) = *(unsigned __int8 *)(v2 + 67) | 0x100;
          }

          else
          {
            uint64_t v23 = v3 + v13 - 1;
          }

          *char v12 = 2;
          result[2] = v23;
          goto LABEL_78;
        }

        unsigned __int16 v20 = _byteswap_ushort(*(_WORD *)(v2 + 67));
        *__int128 v6 = bswap32(*(unsigned __int16 *)(v2 + 65)) >> 16;
        uint64_t v21 = v6 + 1;
        BOOL v22 = v8 >= 2;
        LODWORD(v8) = v8 - 2;
        if (v22)
        {
          uint64_t v21 = v6 + 2;
          v6[1] = v20;
          if (v9)
          {
            *(void *)__int128 v9 = -1LL;
            v9 += 2;
          }

          char v19 = 0;
          unsigned int v11 = 0;
        }

        else
        {
          LODWORD(v8) = 0;
          char v19 = 0;
          unsigned int v11 = 0;
          *(_WORD *)(v2 + 144) = v20;
          *(_BYTE *)(v2 + 93) = 1;
          *a2 = 15;
        }

        unsigned int v17 = v16;
        __int128 v6 = v21;
LABEL_32:
        *char v12 = v19;
        v3 += v18 + 1;
        unsigned int v5 = v17;
LABEL_33:
        unsigned int v24 = v5 & 0xFFFFFFFE;
        if (v11 || !v24) {
          goto LABEL_61;
        }
        v5 -= v24;
        unsigned int v25 = v24 >> 1;
        LODWORD(v8) = v8 - (v24 >> 1);
        if (v9)
        {
          while (1)
          {
            BOOL v26 = (unsigned __int8 *)(v3 + 2);
            unsigned int v11 = __rev16(*(unsigned __int16 *)v3);
            if ((v11 & 0xF800) == 0xD800)
            {
              if ((v11 & 0x400) != 0 || v25 < 2) {
                goto LABEL_57;
              }
              __int16 v27 = *v26;
              if ((v27 & 0xFC) != 0xDC) {
                goto LABEL_60;
              }
              __int16 v28 = *(unsigned __int8 *)(v3 + 3) | (unsigned __int16)(v27 << 8);
              v3 += 4LL;
              --v25;
              *__int128 v6 = v11;
              v6[1] = v28;
              v6 += 2;
              *__int128 v9 = v15;
              unint64_t v29 = v9 + 1;
              int v30 = 4;
              uint64_t v31 = 2LL;
            }

            else
            {
              *v6++ = v11;
              int v30 = 2;
              uint64_t v31 = 1LL;
              unint64_t v29 = v9;
              v3 += 2LL;
            }

            v9 += v31;
            int *v29 = v15;
            v15 += v30;
            if (!--v25) {
              goto LABEL_72;
            }
          }
        }

        while (1)
        {
          BOOL v26 = (unsigned __int8 *)(v3 + 2);
          unsigned int v11 = __rev16(*(unsigned __int16 *)v3);
          if ((v11 & 0xF800) == 0xD800)
          {
            if ((v11 & 0x400) != 0 || v25 < 2)
            {
              __int128 v9 = 0LL;
LABEL_57:
              if (!v25)
              {
                unint64_t v3 = (unint64_t)v26;
                goto LABEL_72;
              }

LABEL_60:
              unsigned int v5 = v5 + 2 * v25 - 2;
              LODWORD(v8) = v25 + v8;
              unint64_t v3 = (unint64_t)v26;
LABEL_61:
              if (!v11) {
                goto LABEL_72;
              }
              *(_BYTE *)(v2 + 65) = BYTE1(v11);
              *(_BYTE *)(v2 + 66) = v11;
              char v19 = 2;
              *(_BYTE *)(v2 + 64) = 2;
              if ((v11 & 0x400) == 0)
              {
                unsigned int v34 = v5 - 2;
                if (v5 < 2)
                {
                  char v19 = 2;
                  goto LABEL_72;
                }

                if ((*(_BYTE *)v3 & 0xFC) == 0xDC)
                {
                  unsigned __int16 v35 = _byteswap_ushort(*(_WORD *)v3);
                  v3 += 2LL;
                  *v6++ = v11;
                  if (v9) {
                    *v9++ = v15;
                  }
                  char v19 = 0;
                  *(_WORD *)(v2 + 144) = v35;
                  *(_BYTE *)(v2 + 93) = 1;
                  *(_BYTE *)(v2 + 64) = 0;
                  int v36 = 15;
                  unsigned int v5 = v34;
LABEL_71:
                  *a2 = v36;
LABEL_72:
                  if (v5 && *a2 <= 0)
                  {
                    if ((_DWORD)v8)
                    {
                      char v37 = *(_BYTE *)v3++;
                      *(_BYTE *)(v2 + 64) = v19 + 1;
                      *(_BYTE *)(v2 + v19 + 65) = v37;
                    }

                    else
                    {
                      *a2 = 15;
                    }
                  }

                  result[2] = v3;
LABEL_78:
                  result[4] = v6;
                  result[6] = v9;
                  return result;
                }

                unsigned int v5 = 1;
                char v19 = 2;
              }

              int v36 = 12;
              goto LABEL_71;
            }

            __int16 v32 = *v26;
            if ((v32 & 0xFC) != 0xDC)
            {
              __int128 v9 = 0LL;
              goto LABEL_60;
            }

            __int16 v33 = *(unsigned __int8 *)(v3 + 3) | (unsigned __int16)(v32 << 8);
            v3 += 4LL;
            --v25;
            *__int128 v6 = v11;
            v6[1] = v33;
            v6 += 2;
          }

          else
          {
            *v6++ = v11;
            v3 += 2LL;
          }

          if (!--v25)
          {
            __int128 v9 = 0LL;
            goto LABEL_72;
          }
        }
      }

      ++v13;
      --v17;
      if (v5 == (_DWORD)v18 + 1)
      {
        unsigned int v17 = 0;
        unsigned int v11 = 0;
        char v19 = v14 + v13;
        int v15 = v5;
        goto LABEL_32;
      }
    }
  }

  return result;
}

              unsigned int v5 = v5 + 2 * v26 - 2;
              LODWORD(v8) = v26 + v8;
              unint64_t v3 = (unint64_t)v27;
LABEL_61:
              if (!v11) {
                goto LABEL_72;
              }
              *(_WORD *)(v2 + 65) = v11;
              char v19 = 2;
              *(_BYTE *)(v2 + 64) = 2;
              if ((v11 & 0x400) == 0)
              {
                unsigned __int16 v35 = v5 - 2;
                if (v5 < 2)
                {
                  char v19 = 2;
                  goto LABEL_72;
                }

                int v36 = *(unsigned __int8 *)(v3 + 1);
                if ((v36 & 0xFC) == 0xDC)
                {
                  char v37 = *(unsigned __int8 *)v3;
                  v3 += 2LL;
                  unsigned __int16 v38 = v37 | (v36 << 8);
                  *v6++ = v11;
                  if (v9) {
                    *v9++ = v15;
                  }
                  char v19 = 0;
                  *(_WORD *)(v2 + 144) = v38;
                  *(_BYTE *)(v2 + 93) = 1;
                  *(_BYTE *)(v2 + 64) = 0;
                  unsigned __int8 v39 = 15;
                  unsigned int v5 = v35;
LABEL_71:
                  *a2 = v39;
LABEL_72:
                  if (v5 && *a2 <= 0)
                  {
                    if ((_DWORD)v8)
                    {
                      uint64_t v40 = *(_BYTE *)v3++;
                      *(_BYTE *)(v2 + 64) = v19 + 1;
                      *(_BYTE *)(v2 + v19 + 65) = v40;
                    }

                    else
                    {
                      *a2 = 15;
                    }
                  }

                  result[2] = v3;
LABEL_78:
                  result[4] = v6;
                  result[6] = v9;
                  return result;
                }

                unsigned int v5 = 1;
                char v19 = 2;
              }

              unsigned __int8 v39 = 12;
              goto LABEL_71;
            }

            __int16 v33 = *(unsigned __int8 *)(v3 + 3);
            if ((v33 & 0xFC) != 0xDC)
            {
              __int128 v9 = 0LL;
              goto LABEL_60;
            }

            unsigned int v34 = *(unsigned __int8 *)(v3 + 2) | (unsigned __int16)(v33 << 8);
            v3 += 4LL;
            --v26;
            *__int128 v6 = v11;
            v6[1] = v34;
            v6 += 2;
          }

          else
          {
            *v6++ = v11;
            v3 += 2LL;
          }

          if (!--v26)
          {
            __int128 v9 = 0LL;
            goto LABEL_72;
          }
        }
      }

      ++v13;
      --v17;
      if (v5 == (_DWORD)v18 + 1)
      {
        unsigned int v17 = 0;
        unsigned int v11 = 0;
        char v19 = v14 + v13;
        int v15 = v5;
        goto LABEL_32;
      }
    }
  }

  return result;
}

      if (v35 >= --v19) {
        goto LABEL_61;
      }
    }

    int v36 = (int)this + (int)v36;
LABEL_55:
    unsigned __int16 v38 = *(unsigned __int16 *)(v12 + 2 * v36);
    if (v38)
    {
      if (*((_BYTE *)v55 + v38)) {
        goto LABEL_96;
      }
      unsigned __int8 v39 = (__int16 *)(v14 + 2 * v38);
      uint64_t v40 = v39[1];
      uint64_t v41 = *v39;
      int v42 = (v18 & 0xFF00) + (v41 & 0xFF00) - (v40 & 0xFF00);
      uint64_t v43 = v42 >> 8;
      uint64_t v18 = v42 & 0xFFFFFF00 | v41;
      *((_BYTE *)v55 + v38) = v43;
    }

    goto LABEL_60;
  }

  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v40);
  return icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v45);
}

                icu::UnicodeString::~UnicodeString((void *)v29, (icu::UnicodeString *)v42);
                v39[0] = v40;
                int v36 = v39;
                __int16 v28 = 1LL;
                if (!v34)
                {
                  *a5 = U_ILLEGAL_ARGUMENT_ERROR;
                  return (uint64_t)icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v47);
                }

      ++a2;
    }

    if (BYTE3(v20) != 48 && BYTE3(v20) != 38) {
      goto LABEL_60;
    }
    if (--v18) {
      goto LABEL_60;
    }
    ++a2;
LABEL_35:
    unsigned int v16 = a2++ < a3;
  }

  while (v16);
LABEL_8:
  if (a3 < -1 || SDWORD2(v31) < 1 || SDWORD2(v31) <= v8)
  {
    unsigned int v5 = v10 & (v10 >> 31);
  }

  else
  {
    unsigned int v11 = *(_DWORD *)(*((void *)&v32 + 1) + 4LL * v8);
    if (v11 >= v10) {
      unsigned int v5 = v10;
    }
    else {
      unsigned int v5 = v11;
    }
  }

  icu::UVector32::~UVector32((void **)&v31);
  return v5;
}

              unsigned __int16 v20 = (icu::SimpleDateFormat *)((char *)this + 352);
            }

            LODWORD(v108[0]) = v41;
            goto LABEL_39;
          }

          if (v40 < 1)
          {
LABEL_94:
            HIDWORD(v108[0]) = 9;
            __int128 v6 = v95;
            uint64_t v4 = v96;
            goto LABEL_168;
          }

          uint64_t v41 = v40;
          goto LABEL_60;
        }

        unint64_t v100 = 0;
        uint64_t v21 = v19;
      }

      uint64_t v18 = v99;
      unsigned __int16 v20 = (icu::SimpleDateFormat *)((char *)this + 352);
      if (v19 == v21)
      {
        if ((_DWORD)v26 - v100 == -1) {
          goto LABEL_94;
        }
        unsigned __int8 v39 = v100 + 1;
        unsigned __int16 v38 = v26 - v100 + 1;
      }

      else
      {
        unsigned __int8 v39 = v100;
      }

      unint64_t v100 = v39;
      unint64_t v7 = (const icu::UnicodeString *)v98;
      LODWORD(v108[0]) = icu::SimpleDateFormat::subParse( (icu::NumberFormat **)this,  v98,  (int *)v108,  v25,  v38,  1,  0,  &v106,  &v105,  v101,  v37,  v99,  (uint64_t)&v104);
      if ((v108[0] & 0x80000000) != 0)
      {
        LODWORD(v37) = v21 - 1;
        LODWORD(v102[0]) = v21 - 1;
        LODWORD(v108[0]) = v94;
      }
    }

    else
    {
LABEL_37:
      unsigned int v34 = (int *)(*(uint64_t (**)(icu::SimpleDateFormat *, void, char *))(*(void *)this + 224LL))( this,  0LL,  (char *)v108 + 4);
      unsigned __int16 v35 = (*(uint64_t (**)(icu::SimpleDateFormat *, uint64_t, char *))(*(void *)this + 224LL))( this,  2LL,  (char *)v108 + 4);
      int v36 = (*(uint64_t (**)(icu::SimpleDateFormat *))(*(void *)this + 96LL))(this);
      if (!icu::SimpleDateFormat::matchLiterals( v20,  (const icu::UnicodeString *)v102,  (int *)v7,  (const icu::UnicodeString *)v108,  v34,  v35,  v36)) {
        goto LABEL_94;
      }
      uint64_t v21 = -1;
      LODWORD(v37) = v102[0];
    }

  if ((v10 & 1) == 0 && *(int *)status <= 0)
  {
    uint64_t v13 = U_BUFFER_OVERFLOW_ERROR;
    goto LABEL_31;
  }

  return v11;
}

void *sub_18082F690(void *result, int *a2)
{
  uint64_t v2 = (unsigned __int16 *)result[2];
  uint64_t v3 = (result[3] - (void)v2) >> 1;
  if (!(_DWORD)v3) {
    return result;
  }
  unsigned int v5 = result;
  uint64_t v6 = result[1];
  if (*(_DWORD *)(v6 + 80) == 1)
  {
    uint64_t result = (void *)sub_180829514(result[1], byte_180A25A80, 2, result + 4, result[5], result + 6, -1, a2);
    *(_DWORD *)(v6 + 80) = 0;
  }

  unint64_t v7 = (_BYTE *)v5[4];
  unint64_t v8 = v5[5];
  __int16 v33 = v7;
  if ((unint64_t)v7 >= v8)
  {
    *a2 = 15;
    return result;
  }

  int v31 = 0;
  unsigned int v9 = v8 - (_DWORD)v7;
  int v10 = (int32x4_t *)v5[6];
  __int16 v32 = v10;
  int v11 = *(_DWORD *)(v6 + 84);
  int v12 = (unsigned __int16)v11;
  if ((_WORD)v11 && ((unsigned __int16 v13 = *v2, v9 >= 4) ? (v14 = (*v2 & 0xFC00) == 56320) : (v14 = 0), v14))
  {
    ++v2;
    LODWORD(v3) = v3 - 1;
    *unint64_t v7 = BYTE1(v11);
    v7[1] = v11;
    _DWORD v7[2] = HIBYTE(v13);
    v7[3] = v13;
    v7 += 4;
    __int16 v33 = v7;
    if (v10)
    {
      v18.i64[0] = -1LL;
      v18.i64[1] = -1LL;
      *v10++ = v18;
      __int16 v32 = v10;
    }

    *(_DWORD *)(v6 + 84) = 0;
    unsigned int v15 = 1;
    v9 -= 4;
  }

  else
  {
    unsigned int v15 = 0;
    if ((unsigned __int16)*(_DWORD *)(v6 + 84))
    {
LABEL_11:
      if ((v12 & 0x400) != 0) {
        goto LABEL_16;
      }
      if ((unint64_t)v2 >= v5[3])
      {
        int v17 = 0;
        goto LABEL_49;
      }

      unsigned __int16 v16 = *v2;
      if ((*v2 & 0xFC00) != 0xDC00)
      {
LABEL_16:
        int v17 = 0;
        *a2 = 12;
      }

      else
      {
        ++v2;
        LOBYTE(v3icu::UVector32::~UVector32(this + 1) = BYTE1(v12);
        BYTE1(v3icu::UVector32::~UVector32(this + 1) = v12;
        BYTE2(v3icu::UVector32::~UVector32(this + 1) = HIBYTE(v16);
        HIBYTE(v3icu::UVector32::~UVector32(this + 1) = v16;
        int v17 = 4;
        int v12 = 0;
      }

uint64_t sub_18082FA2C(void *a1, int *a2)
{
  uint64_t v2 = a1[1];
  if (*(int *)(v2 + 76) >= 8)
  {
    uint64_t v4 = (char *)a1[2];
    unint64_t v5 = a1[3];
    if ((unint64_t)v4 >= v5)
    {
      int v7 = 8;
      goto LABEL_7;
    }

    uint64_t v6 = (unsigned __int8 *)(v4 + 2);
    if ((unint64_t)(v4 + 2) > v5)
    {
      *(_BYTE *)(v2 + 65) = *v4;
      *(_BYTE *)(a1[1] + 64LL) = 1;
      a1[2] = v4 + 1;
      int v7 = 11;
LABEL_7:
      *a2 = v7;
      return 0xFFFFLL;
    }

    int v8 = *v4;
    uint64_t v3 = v4[1] | (v8 << 8);
    if ((v8 & 0xF8) != 0xD8) {
      goto LABEL_19;
    }
    if ((v8 & 4) == 0)
    {
      unsigned int v9 = (unsigned __int8 *)(v4 + 4);
      if ((unint64_t)(v4 + 4) > v5)
      {
        int v10 = (_BYTE *)(v2 + 65);
        unint64_t v11 = v5 - (void)v4;
        *(_BYTE *)(v2 + 64) = v5 - (_BYTE)v4;
        uint64_t v6 = (unsigned __int8 *)v5;
        do
        {
          char v12 = *v4++;
          *v10++ = v12;
          --v11;
        }

        while (v11);
        int v13 = 11;
        goto LABEL_18;
      }

      int v14 = *v6;
      if ((v14 & 0xFC) == 0xDC)
      {
        unsigned int v15 = (v4[3] | (v14 << 8)) + ((_DWORD)v3 << 10);
        if (v15 > 0x35FDBFF)
        {
          uint64_t v3 = v15 - 56613888;
          goto LABEL_20;
        }

        uint64_t v6 = (unsigned __int8 *)(v4 + 4);
      }
    }

    *(_BYTE *)(v2 + 64) = 2;
    *(_BYTE *)(v2 + 65) = *(v6 - 2);
    *(_BYTE *)(v2 + 66) = *(v6 - 1);
    int v13 = 12;
LABEL_18:
    *a2 = v13;
    uint64_t v3 = 0xFFFFLL;
LABEL_19:
    unsigned int v9 = v6;
LABEL_20:
    a1[2] = v9;
    return v3;
  }

  return 4294967287LL;
}

const char *sub_18082FB50(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 56) & 0xF) != 0) {
    return "UTF-16BE,version=1";
  }
  else {
    return "UTF-16BE";
  }
}

void *sub_18082FB70(void *result, int *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = result[1];
  uint64_t v4 = (unsigned __int8 *)result[2];
  uint64_t v6 = (unsigned __int8 *)result[3];
  int v7 = *(_DWORD *)(v5 + 76);
  if (v4 >= v6)
  {
LABEL_33:
    v3[2] = v4;
    if (v4 == v6 && *((_BYTE *)v3 + 2))
    {
      if (v7 == 9)
      {
        uint64_t result = sub_18082FDC4(v3, a2);
      }

      else if (v7 == 8)
      {
        uint64_t result = (void *)sub_18082F260(v3, a2);
      }
    }

    *(_DWORD *)(v5 + 76) = v7;
    return result;
  }

  int v8 = 0;
  unsigned int v9 = (_DWORD *)result[6];
  while (2)
  {
    if (*a2 > 0)
    {
LABEL_28:
      if (v9 && v8)
      {
        unint64_t v15 = v3[6];
      }

      goto LABEL_33;
    }

    switch(v7)
    {
      case 0:
        char v10 = *v4++;
        *(_BYTE *)(v5 + 65) = v10;
        int v7 = 1;
        *(_BYTE *)(v5 + 64) = 1;
        goto LABEL_8;
      case 1:
        int v11 = *v4;
        int v12 = *(unsigned __int8 *)(v5 + 65);
        if (v12 == 254 && v11 == 255)
        {
          if (*(_UNKNOWN **)(v5 + 48) == &unk_189713F90)
          {
            int v16 = 9;
            LOBYTE(v1icu::UVector32::~UVector32(this + 1) = -1;
            goto LABEL_43;
          }

          int v7 = 8;
LABEL_18:
          ++v4;
          *(_BYTE *)(v5 + 64) = 0;
          int v8 = (_DWORD)v4 - *((_DWORD *)v3 + 4);
          goto LABEL_27;
        }

        int v13 = *(void **)(v5 + 48);
        if (v12 == 255 && v11 == 254)
        {
          if (v13 == &unk_189713DD8)
          {
            int v16 = 8;
            LOBYTE(v1icu::UVector32::~UVector32(this + 1) = -2;
            goto LABEL_43;
          }

          int v7 = 9;
          goto LABEL_18;
        }

        if (v13 != &unk_189714148 && v13 != &unk_189714300 || (*(_DWORD *)(v5 + 56) & 0xF) != 1)
        {
          int v14 = (unsigned __int8 *)v3[2];
          if (v4 != v14)
          {
            *(_BYTE *)(v5 + 64) = 0;
            uint64_t v4 = v14;
          }

          if (v13 == &unk_189713F90) {
            int v7 = 9;
          }
          else {
            int v7 = 8;
          }
LABEL_27:
          *(_DWORD *)(v5 + 76) = v7;
LABEL_8:
          if (v4 >= v6) {
            goto LABEL_28;
          }
          continue;
        }

        int v16 = 8;
LABEL_43:
        *(_BYTE *)(v5 + 66) = v11;
        *(_BYTE *)(v5 + 64) = 2;
        v3[2] = v4 + 1;
        *(_DWORD *)(v5 + 76) = v16;
        *a2 = 18;
        return result;
      case 8:
        v3[2] = v4;
        uint64_t result = (void *)sub_18082F260(v3, a2);
        uint64_t v4 = (unsigned __int8 *)v3[2];
        int v7 = 8;
        goto LABEL_8;
      case 9:
        v3[2] = v4;
        uint64_t result = sub_18082FDC4(v3, a2);
        uint64_t v4 = (unsigned __int8 *)v3[2];
        int v7 = 9;
        goto LABEL_8;
      default:
        goto LABEL_8;
    }
  }

void *sub_18082FDC4(void *result, int *a2)
{
  uint64_t v2 = result[1];
  unint64_t v3 = result[2];
  uint64_t v4 = result[3];
  unsigned int v5 = v4 - v3;
  if ((_DWORD)v4 != (_DWORD)v3 || *(_DWORD *)(v2 + 72))
  {
    uint64_t v6 = (_WORD *)result[4];
    unint64_t v7 = result[5];
    if ((unint64_t)v6 >= v7)
    {
      *a2 = 15;
      return result;
    }

    unint64_t v8 = (v7 - (unint64_t)v6) >> 1;
    unsigned int v9 = (int *)result[6];
    int v10 = *(_DWORD *)(v2 + 72);
    if (v10)
    {
      LOBYTE(v1icu::UVector32::~UVector32(this + 1) = 1;
      *(_BYTE *)(v2 + 64) = 1;
      int v12 = (char *)(v2 + 64);
      *(_BYTE *)(v2 + 65) = v10;
      *(_DWORD *)(v2 + 72) = 0;
    }

    else
    {
      int v12 = (char *)(v2 + 64);
      int v11 = *(unsigned __int8 *)(v2 + 64);
      if (!*(_BYTE *)(v2 + 64))
      {
        char v19 = 0;
        int v15 = 0;
        goto LABEL_33;
      }
    }

    uint64_t v13 = 0LL;
    int v14 = (char)v11;
    int v15 = 4 - (char)v11;
    unsigned int v16 = v4 + (char)v11 - v3 - 4;
    unsigned int v17 = ~(_DWORD)v3 + v4;
    while (1)
    {
      uint64_t v18 = v13;
      *(_BYTE *)(v2 + 65 + (v14 + v1(*(void (**)(void))(**((void **)this + 3) + 40LL))(*((void *)this + 3)) = *(_BYTE *)(v3 + v13);
      if (v14 + (_DWORD)v13 == 1)
      {
        int v11 = *(unsigned __int16 *)(v2 + 65);
        if ((v11 & 0xF800) != 0xD800)
        {
          *v6++ = v11;
          int v15 = v13 + 1;
          if (v9) {
            *v9++ = -1;
          }
          char v19 = 0;
          int v11 = 0;
          LODWORD(v8) = v8 - 1;
          goto LABEL_32;
        }

        if ((v11 & 0x400) != 0)
        {
          int v15 = v13 + 1;
          char v19 = 2;
          goto LABEL_32;
        }
      }

      else if (v14 + (_DWORD)v13 == 3)
      {
        __int16 v20 = *(unsigned __int8 *)(v2 + 68);
        if ((v20 & 0xFC) != 0xDC)
        {
          *a2 = 12;
          if ((uint64_t)(~v3 + result[2] - v13) < 2)
          {
            uint64_t v24 = v3 + v13;
            *(_DWORD *)(v2 + 72) = *(unsigned __int8 *)(v2 + 67) | 0x100;
          }

          else
          {
            uint64_t v24 = v3 + v13 - 1;
          }

          *int v12 = 2;
          result[2] = v24;
          goto LABEL_78;
        }

        __int16 v21 = *(unsigned __int8 *)(v2 + 67) | (unsigned __int16)(v20 << 8);
        *uint64_t v6 = *(_WORD *)(v2 + 65);
        int v22 = v6 + 1;
        BOOL v23 = v8 >= 2;
        LODWORD(v8) = v8 - 2;
        if (v23)
        {
          int v22 = v6 + 2;
          v6[1] = v21;
          if (v9)
          {
            *(void *)unsigned int v9 = -1LL;
            v9 += 2;
          }

          char v19 = 0;
          int v11 = 0;
        }

        else
        {
          LODWORD(v8) = 0;
          char v19 = 0;
          int v11 = 0;
          *(_WORD *)(v2 + 144) = v21;
          *(_BYTE *)(v2 + 93) = 1;
          *a2 = 15;
        }

        unsigned int v17 = v16;
        uint64_t v6 = v22;
LABEL_32:
        *int v12 = v19;
        v3 += v18 + 1;
        unsigned int v5 = v17;
LABEL_33:
        unsigned int v25 = v5 & 0xFFFFFFFE;
        if (v11 || !v25) {
          goto LABEL_61;
        }
        v5 -= v25;
        unsigned int v26 = v25 >> 1;
        LODWORD(v8) = v8 - (v25 >> 1);
        if (v9)
        {
          while (1)
          {
            __int16 v27 = (unsigned __int8 *)(v3 + 2);
            int v11 = *(unsigned __int16 *)v3;
            if ((v11 & 0xF800) == 0xD800)
            {
              if ((v11 & 0x400) != 0 || v26 < 2) {
                goto LABEL_57;
              }
              __int16 v28 = *(unsigned __int8 *)(v3 + 3);
              if ((v28 & 0xFC) != 0xDC) {
                goto LABEL_60;
              }
              __int16 v29 = *(unsigned __int8 *)(v3 + 2) | (unsigned __int16)(v28 << 8);
              v3 += 4LL;
              --v26;
              *uint64_t v6 = v11;
              v6[1] = v29;
              v6 += 2;
              *unsigned int v9 = v15;
              int v30 = v9 + 1;
              int v31 = 4;
              uint64_t v32 = 2LL;
            }

            else
            {
              *v6++ = v11;
              int v31 = 2;
              uint64_t v32 = 1LL;
              int v30 = v9;
              v3 += 2LL;
            }

            v9 += v32;
            *int v30 = v15;
            v15 += v31;
            if (!--v26) {
              goto LABEL_72;
            }
          }
        }

        while (1)
        {
          __int16 v27 = (unsigned __int8 *)(v3 + 2);
          int v11 = *(unsigned __int16 *)v3;
          if ((v11 & 0xF800) == 0xD800)
          {
            if ((v11 & 0x400) != 0 || v26 < 2)
            {
              unsigned int v9 = 0LL;
LABEL_57:
              if (!v26)
              {
                unint64_t v3 = (unint64_t)v27;
                goto LABEL_72;
              }

_DWORD *sub_1808301DC(_DWORD *result, uint64_t a2, _DWORD *a3)
{
  if ((result[14] & 0xE) != 0)
  {
    *a3 = 1;
  }

  else
  {
    int v3 = result[14] & 0xF;
    result[19] = 8 * (v3 == 0);
    if (v3 == 1) {
      result[20] = 1;
    }
  }

  return result;
}

_DWORD *sub_180830214(_DWORD *result, int a2)
{
  int v2 = result[14] & 0xF;
  if (a2 > 1 || (result[19] = 8 * (v2 == 0), a2 != 1))
  {
    if (v2 == 1) {
      result[20] = 1;
    }
  }

  return result;
}

void *sub_180830250(void *result, int *a2)
{
  int v2 = (unsigned __int16 *)result[2];
  uint64_t v3 = (result[3] - (void)v2) >> 1;
  if (!(_DWORD)v3) {
    return result;
  }
  unsigned int v5 = result;
  uint64_t v6 = result[1];
  if (*(_DWORD *)(v6 + 80) == 1)
  {
    uint64_t result = (void *)sub_180829514(result[1], byte_180A25A82, 2, result + 4, result[5], result + 6, -1, a2);
    *(_DWORD *)(v6 + 80) = 0;
  }

  unint64_t v7 = (_WORD *)v5[4];
  unint64_t v8 = v5[5];
  __int16 v37 = v7;
  if ((unint64_t)v7 >= v8)
  {
    *a2 = 15;
    return result;
  }

  int v35 = 0;
  unsigned int v9 = v8 - (_DWORD)v7;
  int v10 = (int32x4_t *)v5[6];
  __int16 v36 = v10;
  int v11 = *(_DWORD *)(v6 + 84);
  unsigned int v12 = (unsigned __int16)v11;
  if ((_WORD)v11 && ((unsigned __int16 v13 = *v2, v9 >= 4) ? (v14 = (*v2 & 0xFC00) == 56320) : (v14 = 0), v14))
  {
    ++v2;
    LODWORD(v3) = v3 - 1;
    *unint64_t v7 = v11;
    v7[1] = v13;
    v7 += 2;
    __int16 v37 = v7;
    if (v10)
    {
      v18.i64[0] = -1LL;
      v18.i64[1] = -1LL;
      *v10++ = v18;
      __int16 v36 = v10;
    }

    *(_DWORD *)(v6 + 84) = 0;
    unsigned int v15 = 1;
    v9 -= 4;
  }

  else
  {
    unsigned int v15 = 0;
    if ((unsigned __int16)*(_DWORD *)(v6 + 84))
    {
LABEL_11:
      if ((v12 & 0x400) != 0) {
        goto LABEL_16;
      }
      if ((unint64_t)v2 >= v5[3])
      {
        int v17 = 0;
        goto LABEL_49;
      }

      unsigned __int16 v16 = *v2;
      if ((*v2 & 0xFC00) != 0xDC00)
      {
LABEL_16:
        int v17 = 0;
        *a2 = 12;
      }

      else
      {
        ++v2;
        LOWORD(v35) = v12;
        HIWORD(v35) = v16;
        int v17 = 4;
        unsigned int v12 = 0;
      }

uint64_t sub_1808305EC(void *a1, int *a2)
{
  uint64_t v2 = a1[1];
  if (*(int *)(v2 + 76) >= 8)
  {
    uint64_t v4 = (char *)a1[2];
    unint64_t v5 = a1[3];
    if ((unint64_t)v4 >= v5)
    {
      int v7 = 8;
      goto LABEL_7;
    }

    uint64_t v6 = (unsigned __int8 *)(v4 + 2);
    if ((unint64_t)(v4 + 2) > v5)
    {
      *(_BYTE *)(v2 + 65) = *v4;
      *(_BYTE *)(a1[1] + 64LL) = 1;
      a1[2] = v4 + 1;
      int v7 = 11;
LABEL_7:
      *a2 = v7;
      return 0xFFFFLL;
    }

    int v8 = v4[1];
    uint64_t v3 = *v4 | (v8 << 8);
    if ((v8 & 0xF8) != 0xD8) {
      goto LABEL_19;
    }
    if ((v8 & 4) == 0)
    {
      unsigned int v9 = (unsigned __int8 *)(v4 + 4);
      if ((unint64_t)(v4 + 4) > v5)
      {
        int v10 = (_BYTE *)(v2 + 65);
        unint64_t v11 = v5 - (void)v4;
        *(_BYTE *)(v2 + 64) = v5 - (_BYTE)v4;
        uint64_t v6 = (unsigned __int8 *)v5;
        do
        {
          char v12 = *v4++;
          *v10++ = v12;
          --v11;
        }

        while (v11);
        int v13 = 11;
        goto LABEL_18;
      }

      int v14 = v4[3];
      if ((v14 & 0xFC) == 0xDC)
      {
        unsigned int v15 = (*v6 | (v14 << 8)) + ((_DWORD)v3 << 10);
        if (v15 > 0x35FDBFF)
        {
          uint64_t v3 = v15 - 56613888;
          goto LABEL_20;
        }

        uint64_t v6 = v9;
      }
    }

    *(_BYTE *)(v2 + 64) = 2;
    *(_BYTE *)(v2 + 65) = *(v6 - 2);
    *(_BYTE *)(v2 + 66) = *(v6 - 1);
    int v13 = 12;
LABEL_18:
    *a2 = v13;
    uint64_t v3 = 0xFFFFLL;
LABEL_19:
    unsigned int v9 = v6;
LABEL_20:
    a1[2] = v9;
    return v3;
  }

  return 4294967287LL;
}

const char *sub_180830714(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 56) & 0xF) != 0) {
    return "UTF-16LE,version=1";
  }
  else {
    return "UTF-16LE";
  }
}

uint64_t sub_180830734(uint64_t result, uint64_t a2, _DWORD *a3)
{
  if ((*(_DWORD *)(result + 56) & 0xFu) > 2)
  {
    *a3 = 1;
  }

  else
  {
    if ((*(_DWORD *)(result + 56) & 0xF) == 2 && !*(_BYTE *)(a2 + 8))
    {
      *(void *)(result + 48) = &unk_189714300;
      **(_DWORD **)(result + 40) = 65023;
    }

    *(void *)(result + 76) = 0x100000000LL;
  }

  return result;
}

uint64_t sub_180830784(uint64_t result, int a2)
{
  if (a2 > 1 || (*(_DWORD *)(result + 76) = 0, a2 != 1)) {
    *(_DWORD *)(result + 80) = 1;
  }
  return result;
}

uint64_t sub_1808307A0(void *a1, int *a2)
{
  int v2 = *(_DWORD *)(a1[1] + 76LL);
  if (v2 == 9) {
    return sub_1808305EC(a1, a2);
  }
  if (v2 == 8) {
    return sub_18082FA2C(a1, a2);
  }
  return 4294967287LL;
}

const char *sub_1808307C8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 56);
  int v2 = "UTF-16,version=2";
  if ((v1 & 0xF) == 1) {
    int v2 = "UTF-16,version=1";
  }
  if ((v1 & 0xF) != 0) {
    return v2;
  }
  else {
    return "UTF-16";
  }
}

void *sub_1808307FC(void *result, int *a2)
{
  unint64_t v3 = result[3];
  int v2 = (_WORD *)result[4];
  unint64_t v4 = result[5];
  uint64_t v6 = result[1];
  unint64_t v5 = (unsigned __int8 *)result[2];
  uint64_t v7 = v6 + 65;
  LODWORD(v9) = *(unsigned __int8 *)(v6 + 64);
  *(_BYTE *)(v6 + 64) = 0;
  unsigned int v10 = *(_DWORD *)(v6 + 72) - 1;
  *(_DWORD *)(v6 + 72) = 0;
  while (v9 > 3)
  {
LABEL_14:
    if (HIWORD(v10) > 0x10u || (v10 & 0xFFFFF800) == 55296)
    {
      *(_BYTE *)(result[1] + 64LL) = v9;
      *a2 = 12;
      goto LABEL_23;
    }

    if (HIWORD(v10))
    {
      *int v2 = (v10 >> 10) - 10304;
      int v14 = v2 + 1;
      __int16 v15 = v10 & 0x3FF | 0xDC00;
      if ((unint64_t)(v2 + 1) >= v4)
      {
        uint64_t v18 = result[1];
        *(_WORD *)(v18 + 144) = v15;
        *(_BYTE *)(v18 + 93) = 1;
        *a2 = 15;
        int v2 = v14;
        goto LABEL_23;
      }

      v2[1] = v15;
      v2 += 2;
    }

    else
    {
      *v2++ = v10;
    }

void *sub_18083093C(void *result, int *a2)
{
  unint64_t v3 = result[3];
  int v2 = (_WORD *)result[4];
  unint64_t v5 = result[5];
  unint64_t v4 = (_DWORD *)result[6];
  uint64_t v7 = result[1];
  uint64_t v6 = (unsigned __int8 *)result[2];
  uint64_t v8 = v7 + 65;
  int v9 = 0;
  LODWORD(v1icu::UVector32::~UVector32(this + 1) = *(unsigned __int8 *)(v7 + 64);
  *(_BYTE *)(v7 + 64) = 0;
  unsigned int v12 = *(_DWORD *)(v7 + 72) - 1;
  *(_DWORD *)(v7 + 72) = 0;
  while (v11 > 3)
  {
LABEL_14:
    if (HIWORD(v12) > 0x10u || (v12 & 0xFFFFF800) == 55296)
    {
      *(_BYTE *)(result[1] + 64LL) = v11;
      *a2 = 12;
      goto LABEL_24;
    }

    if (HIWORD(v12))
    {
      *int v2 = (v12 >> 10) - 10304;
      *unint64_t v4 = v9;
      uint64_t v17 = v4 + 1;
      __int16 v18 = v12 & 0x3FF | 0xDC00;
      if ((unint64_t)(v2 + 1) >= v5)
      {
        uint64_t v20 = result[1];
        *(_WORD *)(v20 + 144) = v18;
        *(_BYTE *)(v20 + 93) = 1;
        *a2 = 15;
        ++v2;
        unint64_t v4 = v17;
        goto LABEL_24;
      }

      v2[1] = v18;
      v2 += 2;
      uint64_t v16 = 2LL;
    }

    else
    {
      *v2++ = v12;
      uint64_t v16 = 1LL;
      uint64_t v17 = v4;
    }

    v4 += v16;
    *uint64_t v17 = v9;
    v9 += v11;
LABEL_6:
    unsigned int v12 = 0;
    LODWORD(v1icu::UVector32::~UVector32(this + 1) = 0;
  }

  uint64_t v11 = v11;
  while ((unint64_t)v6 < v3)
  {
    int v14 = *v6++;
    unsigned int v12 = v14 | (v12 << 8);
    *(_BYTE *)(v8 + v11++) = v14;
    if (v11 == 4) {
      goto LABEL_14;
    }
  }

  uint64_t v19 = result[1];
  *(_DWORD *)(v19 + 72) = v12 + 1;
  *(_BYTE *)(v19 + 64) = v11;
LABEL_24:
  result[4] = v2;
  result[2] = v6;
  result[6] = v4;
  return result;
}

uint64_t sub_180830AA8(uint64_t result, int *a2)
{
  int v2 = *(unsigned __int16 **)(result + 16);
  unint64_t v3 = *(void *)(result + 24);
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(result + 40);
  uint64_t result = *(void *)(result + 8);
  if (*(_DWORD *)(result + 80) == 1)
  {
    sub_180829514(result, byte_180A25BBC, 4, (void *)(v5 + 32), v6, (void *)(v5 + 48), -1, a2);
    uint64_t result = *(void *)(v5 + 8);
    *(_DWORD *)(result + 80) = 0;
  }

  int v16 = 0;
  uint64_t v7 = *(_BYTE **)(v5 + 32);
  int v8 = *(_DWORD *)(result + 84);
  if (!v8) {
    goto LABEL_6;
  }
  *(_DWORD *)(result + 84) = 0;
LABEL_12:
  if ((unint64_t)v2 >= v3)
  {
    *(_DWORD *)(*(void *)(v5 + 8) + 84LL) = v8;
    if (!*(_BYTE *)(v5 + 2)) {
      goto LABEL_24;
    }
  }

  else
  {
    int v11 = *v2;
    if ((v11 & 0xFC00) == 0xDC00)
    {
      int v8 = v11 + (v8 << 10) - 56613888;
      ++v2;
      while (1)
      {
        uint64_t v12 = 0LL;
        BYTE1(v16) = BYTE2(v8) & 0x1F;
        BYTE2(v16) = BYTE1(v8);
        HIBYTE(v16) = v8;
        do
        {
          char v13 = *((_BYTE *)&v16 + v12);
          if ((unint64_t)v7 >= v6)
          {
            uint64_t v14 = *(void *)(v5 + 8);
            uint64_t v15 = *(char *)(v14 + 91);
            *(_BYTE *)(v14 + 9icu::UVector32::~UVector32(this + 1) = v15 + 1;
            *(_BYTE *)(v14 + v15 + 104) = v13;
            *a2 = 15;
          }

          else
          {
            *v7++ = v13;
          }

          ++v12;
        }

        while (v12 != 4);
LABEL_6:
        int v10 = *v2++;
        int v8 = v10;
        if ((v10 & 0xF800) == 0xD800)
        {
          if ((v8 & 0xFC00) != 0xD800) {
            break;
          }
          goto LABEL_12;
        }
      }
    }

    *(_DWORD *)(*(void *)(v5 + 8) + 84LL) = v8;
  }

  *a2 = 12;
LABEL_24:
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 16) = v2;
  return result;
}

uint64_t sub_180830C50(uint64_t result, int *a2)
{
  int v2 = *(unsigned __int16 **)(result + 16);
  unint64_t v3 = *(void *)(result + 24);
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(result + 40);
  uint64_t result = *(void *)(result + 8);
  if (*(_DWORD *)(result + 80) == 1)
  {
    sub_180829514(result, byte_180A25BC0, 4, (void *)(v5 + 32), v6, (void *)(v5 + 48), -1, a2);
    uint64_t result = *(void *)(v5 + 8);
    *(_DWORD *)(result + 80) = 0;
  }

  int v18 = 0;
  uint64_t v7 = *(_BYTE **)(v5 + 32);
  int v8 = *(_DWORD **)(v5 + 48);
  int v9 = *(_DWORD *)(result + 84);
  if (!v9)
  {
    int v10 = 0;
    goto LABEL_7;
  }

  int v10 = 0;
  *(_DWORD *)(result + 84) = 0;
LABEL_13:
  if ((unint64_t)v2 >= v3)
  {
    *(_DWORD *)(*(void *)(v5 + 8) + 84LL) = v9;
    if (!*(_BYTE *)(v5 + 2)) {
      goto LABEL_27;
    }
  }

  else
  {
    int v13 = *v2;
    if ((v13 & 0xFC00) == 0xDC00)
    {
      int v9 = v13 + (v9 << 10) - 56613888;
      ++v2;
      while (1)
      {
        uint64_t v14 = 0LL;
        BYTE1(v18) = BYTE2(v9) & 0x1F;
        BYTE2(v18) = BYTE1(v9);
        HIBYTE(v18) = v9;
        do
        {
          char v15 = *((_BYTE *)&v18 + v14);
          if ((unint64_t)v7 >= v6)
          {
            uint64_t v16 = *(void *)(v5 + 8);
            uint64_t v17 = *(char *)(v16 + 91);
            *(_BYTE *)(v16 + 9icu::UVector32::~UVector32(this + 1) = v17 + 1;
            *(_BYTE *)(v16 + v17 + 104) = v15;
            *a2 = 15;
          }

          else
          {
            *v7++ = v15;
            *v8++ = v10;
          }

          ++v14;
        }

        while (v14 != 4);
        if (BYTE1(v18)) {
          ++v10;
        }
        ++v10;
LABEL_7:
        int v12 = *v2++;
        int v9 = v12;
        if ((v12 & 0xF800) == 0xD800)
        {
          if ((v9 & 0xFC00) != 0xD800) {
            break;
          }
          goto LABEL_13;
        }
      }
    }

    *(_DWORD *)(*(void *)(v5 + 8) + 84LL) = v9;
  }

  *a2 = 12;
LABEL_27:
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 48) = v8;
  return result;
}

uint64_t sub_180830E1C(void *a1, int *a2)
{
  unint64_t v4 = (unsigned __int8 *)a1[2];
  unint64_t v3 = a1[3];
  if ((unint64_t)v4 >= v3)
  {
    int v7 = 8;
  }

  else
  {
    int v6 = v3 - (_DWORD)v4;
    if ((int)v3 - (int)v4 > 3)
    {
      unsigned int v8 = (*v4 << 24) | (v4[1] << 16);
      int v9 = v8 | (v4[2] << 8);
      unsigned int v10 = v4[3];
      a1[2] = v4 + 4;
      if (HIWORD(v8) <= 0x10u && (v9 & 0xFFFFF800) != 55296) {
        return v9 | v10;
      }
      *(_DWORD *)(a1[1] + 65LL) = *(_DWORD *)v4;
      *(_BYTE *)(a1[1] + 64LL) = 4;
      int v7 = 12;
    }

    else
    {
      memcpy((void *)(a1[1] + 65LL), v4, v6);
      *(_BYTE *)(a1[1] + 64LL) = v6;
      a1[2] = &v4[v6];
      int v7 = 11;
    }
  }

  *a2 = v7;
  return 0xFFFFLL;
}

void *sub_180830EF8(void *result, int *a2)
{
  unint64_t v3 = result[3];
  int v2 = (_WORD *)result[4];
  unint64_t v4 = result[5];
  uint64_t v6 = result[1];
  uint64_t v5 = (unsigned __int8 *)result[2];
  uint64_t v7 = v6 + 65;
  LODWORD(v9) = *(unsigned __int8 *)(v6 + 64);
  *(_BYTE *)(v6 + 64) = 0;
  unsigned int v10 = *(_DWORD *)(v6 + 72) - 1;
  *(_DWORD *)(v6 + 72) = 0;
  while (v9 > 3)
  {
LABEL_14:
    if (HIWORD(v10) > 0x10u || (v10 & 0xFFFFF800) == 55296)
    {
      *(_BYTE *)(result[1] + 64LL) = v9;
      *a2 = 12;
      goto LABEL_23;
    }

    if (HIWORD(v10))
    {
      *int v2 = (v10 >> 10) - 10304;
      char v15 = v2 + 1;
      __int16 v16 = v10 & 0x3FF | 0xDC00;
      if ((unint64_t)(v2 + 1) >= v4)
      {
        uint64_t v19 = result[1];
        *(_WORD *)(v19 + 144) = v16;
        *(_BYTE *)(v19 + 93) = 1;
        *a2 = 15;
        int v2 = v15;
        goto LABEL_23;
      }

      v2[1] = v16;
      v2 += 2;
    }

    else
    {
      *v2++ = v10;
    }

void *sub_180831044(void *result, int *a2)
{
  unint64_t v3 = result[3];
  int v2 = (_WORD *)result[4];
  unint64_t v5 = result[5];
  unint64_t v4 = (_DWORD *)result[6];
  uint64_t v7 = result[1];
  uint64_t v6 = (unsigned __int8 *)result[2];
  uint64_t v8 = v7 + 65;
  int v9 = 0;
  LODWORD(v1icu::UVector32::~UVector32(this + 1) = *(unsigned __int8 *)(v7 + 64);
  *(_BYTE *)(v7 + 64) = 0;
  unsigned int v12 = *(_DWORD *)(v7 + 72) - 1;
  *(_DWORD *)(v7 + 72) = 0;
  while (v11 > 3)
  {
LABEL_14:
    if (HIWORD(v12) > 0x10u || (v12 & 0xFFFFF800) == 55296)
    {
      *(_BYTE *)(result[1] + 64LL) = v11;
      *a2 = 12;
      goto LABEL_24;
    }

    if (HIWORD(v12))
    {
      *int v2 = (v12 >> 10) - 10304;
      *unint64_t v4 = v9;
      uint64_t v18 = v4 + 1;
      __int16 v19 = v12 & 0x3FF | 0xDC00;
      if ((unint64_t)(v2 + 1) >= v5)
      {
        uint64_t v21 = result[1];
        *(_WORD *)(v21 + 144) = v19;
        *(_BYTE *)(v21 + 93) = 1;
        *a2 = 15;
        ++v2;
        unint64_t v4 = v18;
        goto LABEL_24;
      }

      v2[1] = v19;
      v2 += 2;
      uint64_t v17 = 2LL;
    }

    else
    {
      *v2++ = v12;
      uint64_t v17 = 1LL;
      uint64_t v18 = v4;
    }

    v4 += v17;
    *uint64_t v18 = v9;
    v9 += v11;
LABEL_6:
    unsigned int v12 = 0;
    LODWORD(v1icu::UVector32::~UVector32(this + 1) = 0;
  }

  int v14 = 8 * v11;
  uint64_t v11 = v11;
  while ((unint64_t)v6 < v3)
  {
    int v15 = *v6++;
    v12 |= v15 << v14;
    *(_BYTE *)(v8 + v1icu::UVector32::~UVector32(this + 1) = v15;
    v14 += 8;
    if (++v11 == 4) {
      goto LABEL_14;
    }
  }

  uint64_t v20 = result[1];
  *(_DWORD *)(v20 + 72) = v12 + 1;
  *(_BYTE *)(v20 + 64) = v11;
LABEL_24:
  result[4] = v2;
  result[2] = v6;
  result[6] = v4;
  return result;
}

uint64_t sub_1808311BC(uint64_t result, int *a2)
{
  int v2 = *(unsigned __int16 **)(result + 16);
  unint64_t v3 = *(void *)(result + 24);
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(result + 40);
  uint64_t result = *(void *)(result + 8);
  if (*(_DWORD *)(result + 80) == 1)
  {
    sub_180829514(result, byte_180A25BC4, 4, (void *)(v5 + 32), v6, (void *)(v5 + 48), -1, a2);
    uint64_t result = *(void *)(v5 + 8);
    *(_DWORD *)(result + 80) = 0;
  }

  int v16 = 0;
  uint64_t v7 = *(_BYTE **)(v5 + 32);
  int v8 = *(_DWORD *)(result + 84);
  if (!v8) {
    goto LABEL_6;
  }
  *(_DWORD *)(result + 84) = 0;
LABEL_12:
  if ((unint64_t)v2 >= v3)
  {
    *(_DWORD *)(*(void *)(v5 + 8) + 84LL) = v8;
    if (!*(_BYTE *)(v5 + 2)) {
      goto LABEL_24;
    }
  }

  else
  {
    int v11 = *v2;
    if ((v11 & 0xFC00) == 0xDC00)
    {
      int v8 = v11 + (v8 << 10) - 56613888;
      ++v2;
      while (1)
      {
        uint64_t v12 = 0LL;
        BYTE2(v16) = BYTE2(v8) & 0x1F;
        LOWORD(v16) = v8;
        do
        {
          char v13 = *((_BYTE *)&v16 + v12);
          if ((unint64_t)v7 >= v6)
          {
            uint64_t v14 = *(void *)(v5 + 8);
            uint64_t v15 = *(char *)(v14 + 91);
            *(_BYTE *)(v14 + 9icu::UVector32::~UVector32(this + 1) = v15 + 1;
            *(_BYTE *)(v14 + v15 + 104) = v13;
            *a2 = 15;
          }

          else
          {
            *v7++ = v13;
          }

          ++v12;
        }

        while (v12 != 4);
LABEL_6:
        int v10 = *v2++;
        int v8 = v10;
        if ((v10 & 0xF800) == 0xD800)
        {
          if ((v8 & 0xFC00) != 0xD800) {
            break;
          }
          goto LABEL_12;
        }
      }
    }

    *(_DWORD *)(*(void *)(v5 + 8) + 84LL) = v8;
  }

  *a2 = 12;
LABEL_24:
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 16) = v2;
  return result;
}

uint64_t sub_180831364(uint64_t result, int *a2)
{
  int v2 = *(unsigned __int16 **)(result + 16);
  unint64_t v3 = *(void *)(result + 24);
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(result + 40);
  uint64_t result = *(void *)(result + 8);
  if (*(_DWORD *)(result + 80) == 1)
  {
    sub_180829514(result, byte_180A25BC8, 4, (void *)(v5 + 32), v6, (void *)(v5 + 48), -1, a2);
    uint64_t result = *(void *)(v5 + 8);
    *(_DWORD *)(result + 80) = 0;
  }

  int v18 = 0;
  uint64_t v7 = *(_BYTE **)(v5 + 32);
  int v8 = *(_DWORD **)(v5 + 48);
  int v9 = *(_DWORD *)(result + 84);
  if (!v9)
  {
    int v10 = 0;
    goto LABEL_7;
  }

  int v10 = 0;
  *(_DWORD *)(result + 84) = 0;
LABEL_13:
  if ((unint64_t)v2 >= v3)
  {
    *(_DWORD *)(*(void *)(v5 + 8) + 84LL) = v9;
    if (!*(_BYTE *)(v5 + 2)) {
      goto LABEL_27;
    }
  }

  else
  {
    int v13 = *v2;
    if ((v13 & 0xFC00) == 0xDC00)
    {
      int v9 = v13 + (v9 << 10) - 56613888;
      ++v2;
      while (1)
      {
        uint64_t v14 = 0LL;
        BYTE2(v18) = BYTE2(v9) & 0x1F;
        LOWORD(v18) = v9;
        do
        {
          char v15 = *((_BYTE *)&v18 + v14);
          if ((unint64_t)v7 >= v6)
          {
            uint64_t v16 = *(void *)(v5 + 8);
            uint64_t v17 = *(char *)(v16 + 91);
            *(_BYTE *)(v16 + 9icu::UVector32::~UVector32(this + 1) = v17 + 1;
            *(_BYTE *)(v16 + v17 + 104) = v15;
            *a2 = 15;
          }

          else
          {
            *v7++ = v15;
            *v8++ = v10;
          }

          ++v14;
        }

        while (v14 != 4);
        if (BYTE2(v18)) {
          ++v10;
        }
        ++v10;
LABEL_7:
        int v12 = *v2++;
        int v9 = v12;
        if ((v12 & 0xF800) == 0xD800)
        {
          if ((v9 & 0xFC00) != 0xD800) {
            break;
          }
          goto LABEL_13;
        }
      }
    }

    *(_DWORD *)(*(void *)(v5 + 8) + 84LL) = v9;
  }

  *a2 = 12;
LABEL_27:
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 48) = v8;
  return result;
}

uint64_t sub_180831530(void *a1, int *a2)
{
  unint64_t v4 = (unsigned __int8 *)a1[2];
  unint64_t v3 = a1[3];
  if ((unint64_t)v4 >= v3)
  {
    int v7 = 8;
  }

  else
  {
    int v6 = v3 - (_DWORD)v4;
    if ((int)v3 - (int)v4 > 3)
    {
      unsigned int v8 = (v4[3] << 24) | (v4[2] << 16);
      int v9 = v8 | (v4[1] << 8);
      unsigned int v10 = *v4;
      a1[2] = v4 + 4;
      if (HIWORD(v8) <= 0x10u && (v9 & 0xFFFFF800) != 55296) {
        return v9 | v10;
      }
      *(_DWORD *)(a1[1] + 65LL) = *(_DWORD *)v4;
      *(_BYTE *)(a1[1] + 64LL) = 4;
      int v7 = 12;
    }

    else
    {
      memcpy((void *)(a1[1] + 65LL), v4, v6);
      *(_BYTE *)(a1[1] + 64LL) = v6;
      a1[2] = &v4[v6];
      int v7 = 11;
    }
  }

  *a2 = v7;
  return 0xFFFFLL;
}

double sub_18083160C(uint64_t a1)
{
  *(void *)&double result = 0x100000000LL;
  *(void *)(a1 + 76) = 0x100000000LL;
  return result;
}

uint64_t sub_18083161C(uint64_t result, int a2)
{
  if (a2 > 1 || (*(_DWORD *)(result + 76) = 0, a2 != 1)) {
    *(_DWORD *)(result + 80) = 1;
  }
  return result;
}

void *sub_180831638(void *result, int *a2)
{
  unint64_t v3 = result;
  int v4 = 0;
  uint64_t v6 = result[1];
  uint64_t v5 = (_BYTE *)result[2];
  int v7 = (_BYTE *)result[3];
  unsigned int v8 = (_DWORD *)result[6];
  uint64_t v9 = *(unsigned int *)(v6 + 76);
LABEL_2:
  uint64_t v10 = v9;
  while (1)
  {
    if (v5 >= v7) {
      goto LABEL_32;
    }
    if (*a2 > 0) {
      break;
    }
    if ((_DWORD)v10)
    {
      uint64_t v9 = v10;
      if (((1 << v10) & 0xEE) != 0)
      {
        if (*v5 == *((_BYTE *)&unk_180A25BCC + v10))
        {
          ++v5;
          if ((_DWORD)v10 == 3)
          {
            uint64_t v9 = 8LL;
          }

          else
          {
            uint64_t v9 = (v10 + 1);
            if ((_DWORD)v10 != 7) {
              goto LABEL_2;
            }
            uint64_t v9 = 9LL;
          }

          int v4 = (_DWORD)v5 - *((_DWORD *)v3 + 4);
        }

        else
        {
          int v11 = (_BYTE *)v3[2];
          int v12 = (_DWORD)v5 - (_DWORD)v11;
          uint64_t v9 = 8u;
          uint64_t v5 = v11;
          int v13 = (v10 & 3) - v12;
          if (v13)
          {
            uint64_t v14 = v6;
            char v15 = *((_BYTE *)v3 + 2);
            uint64_t v16 = (char *)&unk_180A25BCC + (v10 & 4);
            v3[2] = v16;
            v3[3] = &v16[v13];
            *((_BYTE *)v3 + 2) = 0;
            double result = sub_1808307FC(v3, a2);
            v3[3] = v7;
            *((_BYTE *)v3 + 2) = v15;
            uint64_t v6 = v14;
            uint64_t v9 = 8LL;
            uint64_t v5 = v11;
          }
        }
      }

      else if ((_DWORD)v10 == 8)
      {
        v3[2] = v5;
        if (v8) {
          double result = sub_18083093C(v3, a2);
        }
        else {
          double result = sub_1808307FC(v3, a2);
        }
        uint64_t v5 = (_BYTE *)v3[2];
        uint64_t v9 = 8LL;
      }

      else
      {
        uint64_t v9 = v10;
        if ((_DWORD)v10 == 9)
        {
          v3[2] = v5;
          if (v8) {
            double result = sub_180831044(v3, a2);
          }
          else {
            double result = sub_180830EF8(v3, a2);
          }
          uint64_t v5 = (_BYTE *)v3[2];
          uint64_t v9 = 9u;
        }
      }

      goto LABEL_2;
    }

    if (*v5 == 255)
    {
      uint64_t v9 = 5u;
      goto LABEL_24;
    }

    uint64_t v10 = 8LL;
    if (!*v5)
    {
      uint64_t v9 = 1u;
LABEL_24:
      ++v5;
      goto LABEL_2;
    }
  }

  LODWORD(v9) = v10;
LABEL_32:
  if (v8 && v4)
  {
    unint64_t v17 = v3[6];
  }

  v3[2] = v5;
  if (v5 == v7 && *((_BYTE *)v3 + 2) && (_DWORD)v9 != 0)
  {
    if ((_DWORD)v9 == 9)
    {
      double result = sub_180830EF8(v3, a2);
      LODWORD(v9) = 9;
    }

    else
    {
      if ((_DWORD)v9 == 8)
      {
        double result = sub_1808307FC(v3, a2);
      }

      else
      {
        __int16 v19 = (char *)&unk_180A25BCC + (v9 & 4);
        v3[2] = v19;
        v3[3] = &v19[v9 & 3];
        double result = sub_1808307FC(v3, a2);
        v3[2] = v7;
        v3[3] = v7;
      }

      LODWORD(v9) = 8;
    }
  }

  *(_DWORD *)(v6 + 76) = v9;
  return result;
}

uint64_t sub_1808318A0(void *a1, int *a2)
{
  int v2 = *(_DWORD *)(a1[1] + 76LL);
  if (v2 == 9) {
    return sub_180831530(a1, a2);
  }
  if (v2 == 8) {
    return sub_180830E1C(a1, a2);
  }
  return 4294967287LL;
}

uint64_t sub_1808318C8(uint64_t result, uint64_t a2, _DWORD *a3)
{
  unsigned int v3 = *(_DWORD *)(result + 56) & 0xF;
  if (v3 > 1)
  {
    *a3 = 1;
  }

  else
  {
    *(_DWORD *)(result + 72) = 0x1000000;
    *(_BYTE *)(result + 64) = 0;
    *(_DWORD *)(result + 80) = (v3 << 28) | 0x1000000;
  }

  return result;
}

uint64_t sub_1808318FC(uint64_t result, int a2)
{
  if (a2 > 1 || (*(_DWORD *)(result + 72) = 0x1000000, *(_BYTE *)(result + 64) = 0, a2 != 1)) {
    *(_DWORD *)(result + 80) = *(_DWORD *)(result + 80) & 0xF0000000 | 0x1000000;
  }
  return result;
}

uint64_t sub_18083192C(uint64_t result, int *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  unsigned int v3 = *(unsigned __int8 **)(result + 16);
  uint64_t v5 = *(unsigned __int8 **)(result + 24);
  int v4 = *(_WORD **)(result + 32);
  unint64_t v7 = *(void *)(result + 40);
  uint64_t v6 = *(_DWORD **)(result + 48);
  unsigned int v8 = *(_DWORD *)(v2 + 72);
  unsigned int v9 = HIWORD(v8);
  uint64_t v10 = (_BYTE *)(v2 + 65);
  unsigned __int8 v11 = *(_BYTE *)(v2 + 64);
  if (v11) {
    int v12 = -1;
  }
  else {
    int v12 = 0;
  }
  if ((v8 & 0x1000000) != 0)
  {
    int v13 = v12;
LABEL_7:
    int v14 = (_DWORD)v5 - (_DWORD)v3;
    if (v14 >= 1)
    {
      int v15 = v14 + 1;
      uint64_t v16 = v3 + 1;
      do
      {
        unsigned int v3 = v16;
        unsigned int v17 = *(v16 - 1);
        if (v17 - 32 >= 0x5E || v17 == 92)
        {
          if (v17 > 0xD || ((1 << v17) & 0x2600) == 0)
          {
            _BYTE *v10 = v17;
            *a2 = 12;
            unsigned __int8 v11 = 1;
            goto LABEL_25;
          }
        }

        else if (v17 == 43)
        {
          unsigned __int8 v11 = 0;
          LOWORD(v8) = 0;
          int v12 = v13 + 1;
          LOBYTE(v9) = -1;
          ++v13;
          goto LABEL_28;
        }

        *v4++ = v17;
        if (v6) {
          *v6++ = v13++;
        }
        --v15;
        uint64_t v16 = v3 + 1;
      }

      while (v15 > 1);
    }

    unsigned __int8 v11 = 0;
LABEL_25:
    int v20 = 0x1000000;
    if (v3 < v5 && (unint64_t)v4 >= v7)
    {
LABEL_38:
      int v25 = 15;
LABEL_39:
      *a2 = v25;
    }
  }

  else
  {
    int v13 = 0;
LABEL_28:
    if (v3 < v5)
    {
      int64_t v21 = v5 - v3;
      while (1)
      {
        if ((unint64_t)v4 >= v7)
        {
          int v20 = 0;
          goto LABEL_38;
        }

        unint64_t v22 = *v3;
        v10[v11] = v22;
        if (v22 > 0x7D) {
          break;
        }
        int v23 = byte_180A25CB0[v22];
        unsigned __int8 v24 = byte_180A25CB0[v22];
        if ((~v23 & 0xFD) == 0) {
          goto LABEL_51;
        }
        if ((char)v23 < 0)
        {
          ++v13;
          ++v3;
          if ((_BYTE)v9 != 0xFF)
          {
            if (!(_WORD)v8)
            {
              LOWORD(v8) = 0;
              goto LABEL_7;
            }

            goto LABEL_62;
          }

          *v4++ = 43;
          LOBYTE(v9) = -1;
          if (v6)
          {
            *v6++ = v12 - 1;
            LOBYTE(v9) = -1;
          }

          goto LABEL_7;
        }

        LOBYTE(v9) = 1;
        ++v11;
        LOWORD(v8) = byte_180A25CB0[v22];
        ++v13;
        ++v3;
        if (!--v21)
        {
          int v20 = 0;
          unsigned int v3 = v5;
          goto LABEL_40;
        }
      }

      unsigned __int8 v24 = -3;
LABEL_51:
      if ((_BYTE)v9 == 0xFF)
      {
        _BYTE *v10 = 43;
        int v20 = 0x1000000;
        LOBYTE(v9) = -1;
        unsigned __int8 v11 = 1;
      }

      else
      {
        if (!(_WORD)v8)
        {
          LOWORD(v8) = 0;
          if (v24 != 253) {
            goto LABEL_7;
          }
          ++v3;
LABEL_62:
          int v20 = 0x1000000;
          int v25 = 12;
          ++v11;
          goto LABEL_39;
        }

        int v20 = 0x1000000;
      }

      int v25 = 12;
      goto LABEL_39;
    }

    int v20 = 0;
  }

uint64_t sub_180831C78(uint64_t result, _DWORD *a2)
{
  int v2 = 0;
  uint64_t v3 = *(void *)(result + 8);
  int v4 = *(unsigned __int16 **)(result + 16);
  unint64_t v5 = *(void *)(result + 24);
  uint64_t v6 = *(char **)(result + 32);
  unint64_t v8 = *(void *)(result + 40);
  unint64_t v7 = *(_DWORD **)(result + 48);
  unsigned int v9 = *(_DWORD *)(v3 + 80);
  uint64_t v10 = &unk_180A25DB0;
  if (!(v9 >> 28)) {
    uint64_t v10 = &unk_180A25D30;
  }
  unsigned int v11 = HIWORD(v9);
  if ((v9 & 0x1000000) != 0) {
    goto LABEL_4;
  }
  while (2)
  {
    int v17 = 1;
    if ((unint64_t)v4 >= v5)
    {
      int v21 = 0;
      goto LABEL_83;
    }

    while (1)
    {
      int v18 = v4;
      if ((unint64_t)v6 >= v8)
      {
        int v21 = 0;
        int v17 = 1;
        goto LABEL_67;
      }

      ++v4;
      unint64_t v19 = *v18;
      if (v19 <= 0x7F)
      {
        if (v10[v19]) {
          break;
        }
      }

      if (v11 == 2)
      {
        *uint64_t v6 = aAbcdefghijklmn[v9 | (v19 >> 12)];
        int v20 = v6 + 1;
        if ((unint64_t)(v6 + 1) >= v8)
        {
          if (v7) {
            *v7++ = v2++;
          }
          LOBYTE(v9) = 0;
          LOBYTE(v1icu::UVector32::~UVector32(this + 1) = 0;
          *(_BYTE *)(v3 + 104) = aAbcdefghijklmn[(v19 >> 6) & 0x3F];
          *(_BYTE *)(v3 + 105) = aAbcdefghijklmn[v19 & 0x3F];
          *(_BYTE *)(v3 + 9icu::UVector32::~UVector32(this + 1) = 2;
        }

        else
        {
          int v20 = v6 + 2;
          v6[1] = aAbcdefghijklmn[(v19 >> 6) & 0x3F];
          if ((unint64_t)(v6 + 2) < v8)
          {
            __int128 v6[2] = aAbcdefghijklmn[v19 & 0x3F];
            LOBYTE(v9) = 0;
            LOBYTE(v1icu::UVector32::~UVector32(this + 1) = 0;
            if (v7)
            {
              *unint64_t v7 = v2;
              v7[1] = v2;
              _DWORD v7[2] = v2++;
              v7 += 3;
            }

            v6 += 3;
            goto LABEL_64;
          }

          if (v7)
          {
            *unint64_t v7 = v2;
            v7[1] = v2;
            v7 += 2;
            ++v2;
          }

          LOBYTE(v9) = 0;
          LOBYTE(v1icu::UVector32::~UVector32(this + 1) = 0;
          *(_BYTE *)(v3 + 104) = aAbcdefghijklmn[v19 & 0x3F];
          *(_BYTE *)(v3 + 9icu::UVector32::~UVector32(this + 1) = 1;
        }

        *a2 = 15;
        goto LABEL_63;
      }

      if ((char)v11 == 1)
      {
        *uint64_t v6 = aAbcdefghijklmn[v9 | (v19 >> 14)];
        int v20 = v6 + 1;
        if ((unint64_t)(v6 + 1) >= v8)
        {
          if (v7) {
            *v7++ = v2++;
          }
          *(_BYTE *)(v3 + 104) = aAbcdefghijklmn[(v19 >> 8) & 0x3F];
          *(_BYTE *)(v3 + 105) = aAbcdefghijklmn[v19 >> 2];
          *(_BYTE *)(v3 + 9icu::UVector32::~UVector32(this + 1) = 2;
        }

        else
        {
          int v20 = v6 + 2;
          v6[1] = aAbcdefghijklmn[(v19 >> 8) & 0x3F];
          if ((unint64_t)(v6 + 2) < v8)
          {
            int v20 = v6 + 3;
            __int128 v6[2] = aAbcdefghijklmn[v19 >> 2];
            if (v7)
            {
              *unint64_t v7 = v2;
              v7[1] = v2;
              _DWORD v7[2] = v2++;
              v7 += 3;
            }

LABEL_76:
    int v4 = v18;
LABEL_4:
    else {
      LODWORD(v12) = (v5 - (unint64_t)v4) >> 1;
    }
    if ((int)v12 >= 1)
    {
      unint64_t v13 = v5 - (void)v4 - 2;
      for (i = v4; ; int v4 = i)
      {
        unsigned int v16 = *i++;
        uint64_t v15 = v16;
        if (v16 > 0x7F) {
          break;
        }
        if (v10[v15])
        {
          *v6++ = v15;
          if (v7) {
            *v7++ = v2++;
          }
          LODWORD(v12) = v12 - 1;
        }

        else
        {
          if ((_DWORD)v15 != 43) {
            break;
          }
          *uint64_t v6 = 43;
          if ((unint64_t)(v6 + 1) >= v8)
          {
            ++v4;
            if (v7) {
              *v7++ = v2++;
            }
            *(_BYTE *)(v3 + 104) = 45;
            *(_BYTE *)(v3 + 9icu::UVector32::~UVector32(this + 1) = 1;
            *a2 = 15;
            ++v6;
            goto LABEL_80;
          }

          v6[1] = 45;
          if (v7)
          {
            *unint64_t v7 = v2;
            v7[1] = v2;
            v7 += 2;
            ++v2;
          }

          v6 += 2;
          unint64_t v12 = v13 >> 1;
          if ((int)v12 <= 0)
          {
LABEL_68:
            ++v4;
            goto LABEL_80;
          }
        }

        v13 -= 2LL;
      }

      *v6++ = 43;
      LOBYTE(v1icu::UVector32::~UVector32(this + 1) = 0;
      if (v7) {
        *v7++ = v2;
      }
      continue;
    }

    break;
  }

                ++v15;
                continue;
              }

              break;
            }

            if (v8) {
              *v8++ = v15;
            }
            uint64_t v27 = v46;
            uint64_t v10 = 0;
            *(_WORD *)(v3 + 144) = v34 & 0x3FF | 0xDC00;
            *(_BYTE *)(v3 + 93) = 1;
            *int v2 = 15;
            ++v6;
LABEL_121:
            if (*v2 < 1 || *v2 == 15)
            {
              if (!v10) {
                *(_BYTE *)(v3 + 64) = 0;
              }
            }

            else
            {
              LOBYTE(v10) = 0;
            }

            _BYTE v5[64] = v27;
            v5[65] = v10;
            v5[66] = v11;
            v5[67] = v18;
            v5[68] = v17;
            result[2] = v4;
            result[4] = v6;
            result[6] = v8;
            return result;
          case 1:
            goto LABEL_24;
          case 2:
            *v6++ = v22 | ((_WORD)v17 << 8);
            goto LABEL_39;
          case 3:
            unsigned int v11 = v47;
            v4 += v19 + 1;
            if ((v22 & 0x80) == 0)
            {
              *v6++ = LOWORD(dword_180A268BC[(char)v47]) + v22;
              __int16 v28 = 1LL;
              int v2 = a2;
              if (!v8) {
                goto LABEL_52;
              }
LABEL_49:
              unsigned int v31 = v8;
              uint64_t v32 = v6;
              goto LABEL_50;
            }

            unsigned __int16 v30 = *(_DWORD *)&v5[4 * (char)v47] + (v22 & 0x7F);
            int v2 = a2;
            if (!HIWORD(v30))
            {
              *v6++ = v30;
              __int16 v28 = 1LL;
              if (!v8)
              {
LABEL_52:
                uint64_t v15 = v14 + 1 + v19;
                goto LABEL_68;
              }

              goto LABEL_49;
            }

            *uint64_t v6 = (v30 >> 10) - 10304;
            if ((unint64_t)(v6 + 1) < v9)
            {
              unsigned int v33 = v30 & 0x3FF | 0xDC00;
              uint64_t v32 = v6 + 2;
              v6[1] = v33;
              if (!v8) {
                goto LABEL_51;
              }
              _DWORD *v8 = v15;
              unsigned int v31 = v8 + 1;
              __int16 v28 = 2LL;
LABEL_50:
              v8 += v28;
              *unsigned int v31 = v15;
LABEL_51:
              uint64_t v6 = v32;
              goto LABEL_52;
            }

            if (v8) {
              *v8++ = v15;
            }
            *(_WORD *)(v3 + 144) = v30 & 0x3FF | 0xDC00;
            *(_BYTE *)(v3 + 93) = 1;
            *a2 = 15;
            uint64_t v10 = 3;
            ++v6;
            goto LABEL_29;
          case 4:
            int v18 = v22 >> 5;
            uint64_t v26 = v22 & 0x1F;
            int v21 = 5;
            int v25 = (_BYTE *)(v3 + 66);
LABEL_24:
            *int v25 = v22;
            *(_BYTE *)(v3 + 64) = v24;
            int v17 = v26;
            goto LABEL_25;
          case 5:
            *(_DWORD *)&v5[4 * (char)v18] = ((v22 << 7) & 0xFF807FFF | (v17 << 15)) + 0x10000;
            uint64_t v15 = v14 + v19 + 1;
            v4 += v19 + 1;
            goto LABEL_42;
          case 6:
            v4 += v19 + 1;
            int v2 = a2;
            if (!v22)
            {
              *(_BYTE *)(v3 + 66) = 0;
              *(_BYTE *)(v3 + 64) = 2;
              uint64_t v10 = 6;
              goto LABEL_27;
            }

            uint64_t v15 = v14 + 1 + v19;
            unsigned int v11 = v47;
            if (v22 <= 0x67)
            {
              __int16 v29 = v22 << 7;
LABEL_55:
              *(_DWORD *)&v5[4 * (char)v18] = v29;
              goto LABEL_68;
            }

            if ((v22 - 104) <= 0x3Fu)
            {
              __int16 v29 = (v22 << 7) + 44032;
              goto LABEL_55;
            }

            if (v22 >= 0xF9)
            {
              __int16 v29 = dword_180A268DC[v22 - 249];
              goto LABEL_55;
            }

            *(_BYTE *)(v3 + 66) = v22;
            *(_BYTE *)(v3 + 64) = 2;
            uint64_t v10 = 6;
            break;
          default:
LABEL_25:
            if (v7 - (void)v4 != ++v19) {
              goto LABEL_9;
            }
            int v4 = (unsigned __int8 *)v7;
            uint64_t v10 = v21;
            int v2 = a2;
            goto LABEL_27;
        }
      }
    }

    break;
  }

const char *sub_1808321C4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 80) >> 28 == 1) {
    return "UTF-7,version=1";
  }
  else {
    return "UTF-7";
  }
}

uint64_t sub_1808321E8(uint64_t result, int *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(unsigned __int8 **)(result + 16);
  unint64_t v5 = *(unsigned __int8 **)(result + 24);
  int v4 = *(_WORD **)(result + 32);
  unint64_t v7 = *(void *)(result + 40);
  uint64_t v6 = *(int **)(result + 48);
  unsigned int v8 = *(_DWORD *)(v2 + 72);
  unsigned int v9 = HIWORD(v8);
  uint64_t v10 = (_BYTE *)(v2 + 65);
  int v11 = *(unsigned __int8 *)(v2 + 64);
  if (*(_BYTE *)(v2 + 64)) {
    int v12 = -1;
  }
  else {
    int v12 = 0;
  }
  if ((v8 & 0x1000000) != 0)
  {
    int v14 = v12;
    goto LABEL_7;
  }

  int v13 = 0;
LABEL_22:
  if (v3 < v5)
  {
    uint64_t v22 = v5 - v3;
    while (1)
    {
      if ((unint64_t)v4 >= v7)
      {
        *a2 = 15;
        goto LABEL_51;
      }

      uint64_t v23 = *v3;
      char v19 = v11 + 1;
      v10[v11] = v23;
      if ((_DWORD)v23 == 44)
      {
        unsigned int v24 = 63;
      }

      else
      {
        if ((_DWORD)v23 == 47) {
          goto LABEL_67;
        }
        if ((char)byte_180A25CB0[v23] < 0)
        {
          if ((_DWORD)v23 == 45)
          {
            int v14 = v13 + 1;
            ++v3;
            if ((_BYTE)v9 != 0xFF)
            {
              if (!(_WORD)v8 && v9 <= 6u && ((1 << v9) & 0x49) != 0)
              {
                LOWORD(v8) = 0;
                goto LABEL_7;
              }

              goto LABEL_69;
            }

            *v4++ = 38;
            LOBYTE(v9) = -1;
            if (v6)
            {
              *v6++ = v12 - 1;
              LOBYTE(v9) = -1;
            }

LABEL_67:
          ++v3;
          if ((_BYTE)v9 == 0xFF)
          {
            *(_BYTE *)(v2 + 65) = 38;
            *(_BYTE *)(v2 + 66) = v23;
            char v19 = 2;
          }

  if (*(_BYTE *)(a1 + 254))
  {
    if (*v13 != 1)
    {
      uint64_t v56 = *v11;
      if (v56 == 1)
      {
        *(void *)(a1 + 32) = &unk_189715B10;
        return;
      }

      goto LABEL_71;
    }

    *(void *)(a1 + 32) = &unk_189715A80;
  }

  uint64_t v56 = *v11;
LABEL_71:
  if (v56 == 219 || v56 == 12) {
    *(_DWORD *)(a1 + 260) = 0;
  }
}

        uint64_t v48 = DWORD1(v291[0]);
        if ((DWORD1(v291[0]) & 0x80000000) != 0 || *((_DWORD *)&v291[8] + DWORD1(v291[0]) + 2) != (_DWORD)v37) {
          break;
        }
LABEL_76:
        uint64_t v50 = (char *)v291 + 4 * v48;
        *((_DWORD *)v50 + 66) += v35;
        uint64_t v51 = *((_DWORD *)v50 + 2);
        if (v51 == -2)
        {
LABEL_77:
          if (!v31)
          {
LABEL_84:
            if (SLODWORD(v291[0]) < 1)
            {
              uint64_t v54 = -1;
            }

            else
            {
              uint64_t v53 = 0LL;
              uint64_t v54 = -1;
              uint64_t v55 = 69632;
              do
              {
                if (*((_DWORD *)&v291[16] + v53 + 2) < v55)
                {
                  uint64_t v54 = v53;
                  uint64_t v55 = *((_DWORD *)&v291[16] + v53 + 2);
                }

                ++v53;
              }

              while (LODWORD(v291[0]) != v53);
            }

            DWORD1(v291[0]) = v54;
            int v49 = v54;
            uint64_t v56 = (char *)v291 + 4 * v54;
            *((_DWORD *)v56 + 2) = v31;
            *((_DWORD *)v56 + 34) = v37;
LABEL_92:
            *((_DWORD *)&v291[16] + v49 + 2) = v35;
            goto LABEL_93;
          }

          uint64_t v51 = 0;
          uint64_t v52 = 4;
          while (1)
          {
            if (v51 == (_DWORD)v13) {
              uint64_t v52 = 1;
            }
            if (!v5[8].i8[v51] && *(_DWORD *)(*(void *)&v36 + 4LL * v51) == (_DWORD)v37) {
              break;
            }
            v51 += v52;
            if (v51 == v31) {
              goto LABEL_84;
            }
          }

          if (SLODWORD(v291[0]) < 1)
          {
            uint64_t v58 = -1;
          }

          else
          {
            uint64_t v57 = 0LL;
            uint64_t v58 = -1;
            int v59 = 69632;
            do
            {
              if (*((_DWORD *)&v291[16] + v57 + 2) < v59)
              {
                uint64_t v58 = v57;
                int v59 = *((_DWORD *)&v291[16] + v57 + 2);
              }

              ++v57;
            }

            while (LODWORD(v291[0]) != v57);
          }

          DWORD1(v291[0]) = v58;
          uint64_t v60 = (_DWORD *)v291 + v58;
          v60[2] = v51;
          v60[34] = v37;
          v60[66] = v52 + v35;
        }

        if ((v51 & 0x80000000) == 0)
        {
          *int v39 = 2;
          *(_DWORD *)(*(void *)v5 + 4LL * v3icu::UVector32::~UVector32(this + 1) = v51;
          goto LABEL_94;
        }

      if ((v11 & 4) == 0)
      {
        uint64_t v10 = v18;
        int v14 = v13;
        int v13 = v11;
      }

      int v17 = v18 - 1;
      if (v18 - 1 == v16)
      {
        int v16 = -2;
        int v11 = v12;
        if (!v18) {
          goto LABEL_77;
        }
      }

      else
      {
        if (!v18) {
          goto LABEL_77;
        }
        int v11 = sub_18087865C(a1[v17]);
      }
    }
  }

  uint64_t v85 = 0LL;
  int v15 = 0;
  unsigned int v81 = 0;
LABEL_77:
  unsigned int v33 = a2;
  __int16 v34 = a2;
  if (v85 | v81)
  {
    int v35 = *((_DWORD *)a6 + 1);
    __int16 v36 = *((_DWORD *)a6 + 2);
    __int16 v37 = *((_DWORD *)a6 + 3);
    __int16 v38 = *((_DWORD *)a6 + 4);
    int v39 = *((_DWORD *)a6 + 5);
    char v40 = (int)(2 * a2 + 2);
    uint64_t v41 = (char *)uprv_malloc(v40);
    if (!v41)
    {
      __int16 v34 = 0LL;
      *a4 = 7;
      goto LABEL_156;
    }

    int v42 = v41;
    int v84 = v39;
    uint64_t v86 = v38;
    uint64_t v43 = a3 & 0xE0000;
    uint64_t v44 = a3 & 0x10003;
    if ((a3 & 0x10003) != 0)
    {
      __int16 v34 = a2;
      if (v43 != 0x80000)
      {
LABEL_105:
        if (v44 == 1)
        {
          __int16 v34 = a2;
          if ((int)a2 < 1)
          {
            if (v35 == 1)
            {
LABEL_115:
              uint64_t v58 = v43 == v37;
              int v59 = 1;
              goto LABEL_116;
            }

        *__int16 v28 = (uint64_t)off_18971CFA0;
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v28 + 1), v30);
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v28 + 9), (UChar **)v20);
        *((_DWORD *)v28 + 34) = 0;
        v28[18] = 0LL;
        *((_DWORD *)v28 + 38) = -1;
        v28[20] = 0LL;
        if (*(int *)a2 > 0)
        {
          (*(void (**)(uint64_t *))(*v28 + 8))(v28);
          goto LABEL_73;
        }

    __int16 v28 = 16LL;
    *a5 = U_UNSUPPORTED_ERROR;
    return (uint64_t)icu::UnicodeString::~UnicodeString((void *)v28, (icu::UnicodeString *)v66);
  }

      unsigned int v31 = 104;
    }

    if (v18) {
      ures_close(v18);
    }
    icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)&v76);
    if (v57) {
      (*((void (**)(const UChar **))*v57 + 1))(v57);
    }
    goto LABEL_25;
  }

  int v4 = 0LL;
  *a4 = U_UNSUPPORTED_ERROR;
LABEL_25:
  if (v16) {
    (*(void (**)(icu::NumberingSystem *))(*(void *)v16 + 8LL))(v16);
  }
  return v4;
}

uint64_t sub_180832580(uint64_t result, _DWORD *a2)
{
  int v2 = 0;
  uint64_t v3 = *(void *)(result + 8);
  int v4 = *(unsigned __int16 **)(result + 16);
  unint64_t v6 = *(void *)(result + 24);
  unint64_t v5 = *(char **)(result + 32);
  unint64_t v7 = *(void *)(result + 40);
  unsigned int v8 = *(_DWORD **)(result + 48);
  unsigned int v9 = *(_DWORD *)(v3 + 80);
  unsigned int v10 = HIWORD(v9);
  int v11 = v5;
  int v12 = v8;
  if ((v9 & 0x1000000) != 0) {
    goto LABEL_100;
  }
  while (2)
  {
    int v13 = 1;
    if ((unint64_t)v4 >= v6)
    {
      int v42 = 0;
      goto LABEL_131;
    }

    int v14 = v4;
    while (1)
    {
      int v4 = v14;
      if ((unint64_t)v11 >= v7)
      {
        int v42 = 0;
        int v43 = 1;
        goto LABEL_130;
      }

      ++v14;
      unint64_t v15 = *v4;
      if (v10 == 2)
      {
        else {
          char v17 = aAbcdefghijklmn[(v9 | (v15 >> 12))];
        }
        char *v11 = v17;
        uint64_t v22 = v11 + 1;
        if ((unint64_t)(v11 + 1) >= v7)
        {
          if (v12) {
            *v12++ = v2++;
          }
          uint64_t v29 = (v15 >> 6) & 0x3F;
          if ((_DWORD)v29 == 63) {
            char v30 = 44;
          }
          else {
            char v30 = aAbcdefghijklmn[v29];
          }
          *(_BYTE *)(v3 + 104) = v30;
          if ((v15 & 0x3F) == 0x3F) {
            char v36 = 44;
          }
          else {
            char v36 = aAbcdefghijklmn[v15 & 0x3F];
          }
          LOBYTE(v9) = 0;
          LOBYTE(v10) = 0;
          *(_BYTE *)(v3 + 105) = v36;
          *(_BYTE *)(v3 + 9icu::UVector32::~UVector32(this + 1) = 2;
        }

        else
        {
          uint64_t v23 = (v15 >> 6) & 0x3F;
          if ((_DWORD)v23 == 63) {
            char v24 = 44;
          }
          else {
            char v24 = aAbcdefghijklmn[v23];
          }
          uint64_t v22 = v11 + 2;
          v11[1] = v24;
          if ((unint64_t)(v11 + 2) < v7)
          {
            if ((v15 & 0x3F) == 0x3F) {
              char v33 = 44;
            }
            else {
              char v33 = aAbcdefghijklmn[v15 & 0x3F];
            }
            char v19 = v11 + 3;
            v11[2] = v33;
            LOBYTE(v9) = 0;
            LOBYTE(v10) = 0;
            if (v12)
            {
              *int v12 = v2;
              v12[1] = v2;
              v12[2] = v2++;
              v12 += 3;
            }

            goto LABEL_84;
          }

          if (v12)
          {
            *int v12 = v2;
            v12[1] = v2;
            v12 += 2;
            ++v2;
          }

          if ((v15 & 0x3F) == 0x3F) {
            char v39 = 44;
          }
          else {
            char v39 = aAbcdefghijklmn[v15 & 0x3F];
          }
          LOBYTE(v9) = 0;
          LOBYTE(v10) = 0;
          *(_BYTE *)(v3 + 104) = v39;
          *(_BYTE *)(v3 + 9icu::UVector32::~UVector32(this + 1) = 1;
        }

        int v11 = v22;
        *a2 = 15;
      }

      else
      {
        if ((char)v10 == 1)
        {
          else {
            char v18 = aAbcdefghijklmn[(v9 | (v15 >> 14))];
          }
          char *v11 = v18;
          char v19 = v11 + 1;
          if ((unint64_t)(v11 + 1) >= v7)
          {
            if (v12) {
              *v12++ = v2++;
            }
            uint64_t v31 = (v15 >> 8) & 0x3F;
            if ((_DWORD)v31 == 63) {
              char v32 = 44;
            }
            else {
              char v32 = aAbcdefghijklmn[v31];
            }
            *(_BYTE *)(v3 + 104) = v32;
            uint64_t v37 = v15 >> 2;
            if ((_DWORD)v37 == 63) {
              char v38 = 44;
            }
            else {
              char v38 = aAbcdefghijklmn[v37];
            }
            *(_BYTE *)(v3 + 105) = v38;
            *(_BYTE *)(v3 + 9icu::UVector32::~UVector32(this + 1) = 2;
          }

          else
          {
            uint64_t v25 = (v15 >> 8) & 0x3F;
            if ((_DWORD)v25 == 63) {
              char v26 = 44;
            }
            else {
              char v26 = aAbcdefghijklmn[v25];
            }
            char v19 = v11 + 2;
            v11[1] = v26;
            if ((unint64_t)(v11 + 2) < v7)
            {
              uint64_t v34 = v15 >> 2;
              if ((_DWORD)v34 == 63) {
                char v35 = 44;
              }
              else {
                char v35 = aAbcdefghijklmn[v34];
              }
              char v19 = v11 + 3;
              v11[2] = v35;
              if (v12)
              {
                *int v12 = v2;
                v12[1] = v2;
                v12[2] = v2++;
                v12 += 3;
              }

              goto LABEL_83;
            }

            if (v12)
            {
              *int v12 = v2;
              v12[1] = v2;
              v12 += 2;
              ++v2;
            }

            uint64_t v40 = v15 >> 2;
            if ((_DWORD)v40 == 63) {
              char v41 = 44;
            }
            else {
              char v41 = aAbcdefghijklmn[v40];
            }
            *(_BYTE *)(v3 + 104) = v41;
            *(_BYTE *)(v3 + 9icu::UVector32::~UVector32(this + 1) = 1;
          }

          *a2 = 15;
LABEL_83:
          LOBYTE(v9) = 16 * (v15 & 3);
          LOBYTE(v10) = 2;
LABEL_84:
          int v11 = v19;
          goto LABEL_85;
        }

        if (!(_BYTE)v10)
        {
          else {
            char v16 = aAbcdefghijklmn[v15 >> 10];
          }
          char *v11 = v16;
          char v19 = v11 + 1;
          if ((unint64_t)(v11 + 1) >= v7)
          {
            if (v12) {
              *v12++ = v2++;
            }
            uint64_t v27 = (v15 >> 4) & 0x3F;
            if ((_DWORD)v27 == 63) {
              char v28 = 44;
            }
            else {
              char v28 = aAbcdefghijklmn[v27];
            }
            *(_BYTE *)(v3 + 104) = v28;
            *(_BYTE *)(v3 + 9icu::UVector32::~UVector32(this + 1) = 1;
            *a2 = 15;
          }

          else
          {
            uint64_t v20 = (v15 >> 4) & 0x3F;
            if ((_DWORD)v20 == 63) {
              char v21 = 44;
            }
            else {
              char v21 = aAbcdefghijklmn[v20];
            }
            char v19 = v11 + 2;
            v11[1] = v21;
            if (v12)
            {
              *int v12 = v2;
              v12[1] = v2;
              v12 += 2;
              ++v2;
            }
          }

          LOBYTE(v9) = 4 * (v15 & 0xF);
          LOBYTE(v10) = 1;
          goto LABEL_84;
        }
      }

LABEL_85:
      if ((unint64_t)v14 >= v6)
      {
        int v42 = 0;
        int v13 = 1;
        int v4 = v14;
        goto LABEL_131;
      }
    }

    if (!(_BYTE)v10) {
      goto LABEL_93;
    }
    char v44 = 44;
    *v11++ = v44;
    if (!v12)
    {
      if ((unint64_t)v11 < v7)
      {
        unsigned int v8 = 0LL;
        char *v11 = 45;
        goto LABEL_99;
      }

      int v12 = 0LL;
      goto LABEL_161;
    }

    *v12++ = v2 - 1;
LABEL_93:
    if ((unint64_t)v11 >= v7)
    {
LABEL_161:
      int v43 = 0;
      *(_BYTE *)(v3 + 104) = 45;
      *(_BYTE *)(v3 + 9icu::UVector32::~UVector32(this + 1) = 1;
      int v42 = 0x1000000;
      goto LABEL_130;
    }

    char *v11 = 45;
    if (v12)
    {
      *int v12 = v2 - 1;
      unsigned int v8 = v12 + 1;
    }

    else
    {
      unsigned int v8 = 0LL;
    }

        if (v25) {
          goto LABEL_86;
        }
        goto LABEL_99;
      }
    }

    strcpy(__dst, "root");
    uint64_t v37 = sub_180872B34(a2, __dst, v17, a4, (BOOL *)&v41, &v40, (BOOL *)&v41 + 1, (UErrorCode *)&v43);
    char v19 = v43;
    if (v43 == 7) {
      goto LABEL_14;
    }
    int v14 = (uint64_t)v37;
    if (!v37)
    {
      char v19 = 2;
      goto LABEL_15;
    }

    int v42 = v37;
    int v43 = -127;
    if (!(_BYTE)v41) {
      goto LABEL_102;
    }
    goto LABEL_86;
  }

      int v48 = __OFSUB__(v19--, 1);
      if ((v19 < 0) ^ v48 | (v19 == 0))
      {
LABEL_87:
        LODWORD(v18) = pi;
        else {
          char v19 = (srcLength - pi) / 3;
        }
        if (v19 <= 2) {
          goto LABEL_25;
        }
      }
    }
  }

  LODWORD(v34) = 0;
  char v35 = *(unsigned __int8 *)src;
  if (!*src || !destCapacity)
  {
    uint64_t v20 = dest;
    char v21 = 0;
    uint64_t v61 = 0;
    goto LABEL_140;
  }

  LODWORD(v34) = 0;
  char v36 = 0;
  uint64_t v20 = dest;
  while (1)
  {
    uint64_t v37 = v35;
    char v38 = (int)v34 + 1LL;
    uint64_t v71 = v34 + 1;
    if ((v35 & 0x80) != 0) {
      break;
    }
    *v20++ = v35;
LABEL_61:
    LODWORD(v34) = v71;
    char v35 = src[v71];
    if (src[v71]) {
      char v39 = v20 >= v17;
    }
    else {
      char v39 = 1;
    }
    if (v39)
    {
      char v21 = 0;
      goto LABEL_139;
    }
  }

  if ((v35 & 0xF0) == 0xE0)
  {
    uint64_t v40 = src[v38];
    char v41 = src[(int)v34 + 2] ^ 0x80;
    if (v41 > 0x3F) {
      goto LABEL_75;
    }
    *v20++ = ((_WORD)v37 << 12) | ((v40 & 0x3F) << 6) | v41;
    int v42 = v34 + 3;
    goto LABEL_74;
  }

  if ((v35 + 62) <= 0x1Du)
  {
    int v43 = src[v38] ^ 0x80;
    if (v43 <= 0x3F)
    {
      *v20++ = ((v37 & 0x1F) << 6) | v43;
      int v42 = v34 + 2;
LABEL_74:
      uint64_t v71 = v42;
      goto LABEL_61;
    }
  }

      unsigned int v8 = 7;
      goto LABEL_8;
    }
  }

  return result;
}

        int v45 = *(_DWORD *)(v20 + 12);
LABEL_86:
        if (v45 == 2)
        {
          if (icu::UnicodeString::doEqualsSubstring(v20, 0, 1, (uint64_t)&unk_180A2CD02, 0, 1))
          {
            unint64_t v46 = *(unsigned __int16 *)(v20 + 8);
            else {
              uint64_t v47 = v46 >> 5;
            }
            if (v47 <= 1)
            {
              uint64_t v99 = &unk_180A2CD02;
            }

            else
            {
              if ((v46 & 2) != 0) {
                int v48 = v20 + 10;
              }
              else {
                int v48 = *(void *)(v20 + 24);
              }
              int v49 = *(unsigned __int16 *)(v48 + 2);
              int v98 = &unk_180A2CD02;
              if ((v49 - 65) <= 0x19)
              {
                *((void *)&v112[-32] + v49 - icu::UVector32::~UVector32(this + 1) = icu::UVector::elementAt((icu::UVector *)v9, v9[2] - 1);
                __int128 v93 = 1;
              }
            }
          }

          else
          {
            __int128 v97 = &unk_180A2CD02;
          }
        }

                  ++v35;
                }

                while (icu::ResourceTable::getKeyAndValue( (icu::ResourceTable *)v72,  v35,  (const char **)&v73,  a3));
              }
            }
          }
        }

        icu::UVector::adoptElement(v4, v35, (UErrorCode *)a3);
LABEL_86:
        if (*a3 > 0) {
          break;
        }
        uint64_t v37 = v39 > 2 ? 0LL : (void *)dword_180A3D8E4[v39];
        if (v14 != (_DWORD)v37) {
          break;
        }
        goto LABEL_92;
      default:
LABEL_94:
        abort();
    }
  }

LABEL_99:
    unint64_t v5 = v11 + 1;
LABEL_100:
    else {
      int v45 = (v6 - (unint64_t)v4) >> 1;
    }
    if (v45 < 1)
    {
      int v11 = v5;
      goto LABEL_125;
    }

    unint64_t v46 = v6 - (void)v4 - 2;
    uint64_t v47 = v4;
    while (2)
    {
      int v49 = *v47++;
      int v48 = v49;
      int v11 = v5 + 1;
      if (v49 != 38 && (v48 - 32) <= 0x5E)
      {
        *unint64_t v5 = v48;
        if (v8) {
          *v8++ = v2++;
        }
        if (v45 < 2) {
          goto LABEL_119;
        }
        --v45;
LABEL_118:
        v46 -= 2LL;
        unint64_t v5 = v11;
        int v4 = v47;
        continue;
      }

      break;
    }

    *unint64_t v5 = 38;
    if (v48 != 38)
    {
      LOBYTE(v10) = 0;
      if (v8)
      {
        _DWORD *v8 = v2;
        int v12 = v8 + 1;
      }

      else
      {
        int v12 = 0LL;
      }

      continue;
    }

    break;
  }

  if ((unint64_t)v11 < v7)
  {
    v5[1] = 45;
    if (v8)
    {
      _DWORD *v8 = v2;
      v8[1] = v2;
      v8 += 2;
      ++v2;
    }

    int v11 = v5 + 2;
    int v45 = v7 - ((_DWORD)v5 + 2);
    if (v45 <= 0)
    {
LABEL_119:
      ++v4;
      goto LABEL_125;
    }

    goto LABEL_118;
  }

  ++v4;
  if (v8) {
    *v8++ = v2++;
  }
  *(_BYTE *)(v3 + 104) = 45;
  *(_BYTE *)(v3 + 9icu::UVector32::~UVector32(this + 1) = 1;
  *a2 = 15;
LABEL_125:
  int v43 = 0;
  int v13 = 0;
  int v42 = 0x1000000;
  BOOL v50 = (unint64_t)v4 < v6 && (unint64_t)v11 >= v7;
  int v12 = v8;
  if (v50)
  {
LABEL_130:
    *a2 = 15;
    int v13 = v43;
  }

    if (v15 || !(_DWORD)v10)
    {
      if (!HIDWORD(v69))
      {
        int v4 = v10;
        goto LABEL_122;
      }

        if (icu::UnicodeString::doEqualsSubstring(v20, 0, 1, (uint64_t)&unk_180A2CD02, 0, 1)
          || !sub_1808937E0(this[8], VariableTop, (const icu::UnicodeString *)v20, (icu::UVector64 *)v102, a2))
        {
          uint64_t v94 = &unk_180A2CD02;
        }

        else
        {
          BOOL v50 = *(unsigned __int16 *)(v20 + 8);
          else {
            BOOL v51 = v50 >> 5;
          }
          if (v51)
          {
            if ((v50 & 2) != 0) {
              unsigned int v52 = v20 + 10;
            }
            else {
              unsigned int v52 = *(void *)(v20 + 24);
            }
            char v53 = *(__int16 *)(v52 + 2LL * (int)(v51 - 1));
            __int128 v96 = &unk_180A2CD02;
            if (v53 != -1)
            {
              char v54 = v9[2];
              uint64_t v55 = icu::UVector::elementAt((icu::UVector *)v9, v54 - 2);
              if (!*(_DWORD *)(v55 + 136))
              {
                uint64_t v56 = v55;
                uint64_t v57 = v54 - 3;
                while (*(void *)(v56 + 144)
                     || sub_1808937E0( this[8],  VariableTop,  (const icu::UnicodeString *)(v56 + 72),  (icu::UVector64 *)v102,  a2))
                {
                  uint64_t v56 = icu::UVector::elementAt((icu::UVector *)v9, v57--);
                  if (*(_DWORD *)(v56 + 136)) {
                    goto LABEL_101;
                  }
                }

                uint64_t v60 = icu::UMemory::operator new(v59, (icu::UMemory *)0xA8, v58);
                if (!v60)
                {
                  uint64_t v22 = *(unsigned int *)a2;
                  if (v101) {
                    (*(void (**)(void *))(*(void *)v101 + 8LL))(v101);
                  }
                  int v4 = 0LL;
                  unint64_t v101 = 0LL;
LABEL_163:
                  uint64_t v22 = 7LL;
                  *a2 = U_MEMORY_ALLOCATION_ERROR;
LABEL_133:
                  icu::UnicodeString::~UnicodeString((void *)v22, (icu::UnicodeString *)&v107);
LABEL_134:
                  int v13 = v101;
                  if (v101) {
LABEL_135:
                  }
                    (*(void (**)(_DWORD *))(*(void *)v13 + 8LL))(v13);
                  if (!v9)
                  {
LABEL_137:
                    icu::UVector64::~UVector64((void **)v102);
                    goto LABEL_138;
                  }

LABEL_158:
    unsigned int v52 = *(_DWORD *)(v3 + 80) & 0xF0000000 | 0x1000000;
    goto LABEL_159;
  }

  unsigned int v52 = v42 | v9 | ((char)v10 << 16) | *(_DWORD *)(v3 + 80) & 0xF0000000;
LABEL_159:
  *(_DWORD *)(v3 + 80) = v52;
  *(void *)(result + 16) = v4;
  *(void *)(result + 32) = v11;
  *(void *)(result + 48) = v12;
  return result;
}

      LOBYTE(v35) = src[(int)v34];
      if (!(_BYTE)v35) {
        break;
      }
      continue;
    }
  }

void *sub_180832C34(void *result, int *a2)
{
  uint64_t v3 = result[1];
  int v2 = (unsigned __int16 *)result[2];
  unint64_t v5 = result[3];
  int v4 = (char *)result[4];
  unint64_t v6 = result[5];
  int v21 = 0;
  unint64_t v7 = *(void **)(v3 + 48);
  unsigned int v8 = *(_DWORD *)(v3 + 84);
  if (v8) {
    BOOL v9 = (unint64_t)v4 >= v6;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    goto LABEL_13;
  }
  *(_DWORD *)(v3 + 84) = 0;
LABEL_23:
  if ((unint64_t)v2 >= v5)
  {
    *(_DWORD *)(v3 + 84) = v8;
  }

  else if ((v8 & 0x400) != 0 || (int v13 = *v2, (v13 & 0xFC00) != 0xDC00))
  {
    *(_DWORD *)(v3 + 84) = v8;
    *a2 = 12;
  }

  else
  {
    unsigned int v8 = v13 + (v8 << 10) - 56613888;
    ++v2;
LABEL_27:
    else {
      int v14 = v4;
    }
    if ((int)v8 >= 0x10000)
    {
      unsigned int v15 = (v8 >> 18) | 0xFFFFFFF0;
      else {
        char v17 = (int *)v4;
      }
      *((_BYTE *)v17 + icu::UVector32::~UVector32(this + 1) = (v8 >> 12) & 0x3F | 0x80;
      unsigned int v16 = 3;
    }

    else
    {
      unsigned int v15 = (v8 >> 12) | 0xFFFFFFE0;
      unsigned int v16 = 2;
    }

    *int v14 = v15;
    v14[v16 - 1] = (v8 >> 6) & 0x3F | 0x80;
    v14[v16] = v8 & 0x3F | 0x80;
    if (v14 == v4)
    {
      v4 += v16 + 1;
    }

    else
    {
      for (unint64_t i = (unint64_t)&v21 | v16; (unint64_t)v14 <= i; ++v14)
      {
        char v19 = *v14;
        if ((unint64_t)v4 >= v6)
        {
          uint64_t v20 = *(char *)(v3 + 91);
          *(_BYTE *)(v3 + 9icu::UVector32::~UVector32(this + 1) = v20 + 1;
          *(_BYTE *)(v3 + v20 + 104) = v19;
          *a2 = 15;
        }

        else
        {
          *v4++ = v19;
        }
      }
    }

void *sub_180832E40(void *result, int *a2)
{
  uint64_t v3 = result[1];
  int v2 = (unsigned __int16 *)result[2];
  unint64_t v4 = result[3];
  unint64_t v5 = (char *)result[4];
  unint64_t v6 = result[5];
  unint64_t v7 = (int *)result[6];
  int v23 = 0;
  unsigned int v8 = *(void **)(v3 + 48);
  unsigned int v9 = *(_DWORD *)(v3 + 84);
  if (v9) {
    BOOL v10 = (unint64_t)v5 >= v6;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    int v12 = 0;
    goto LABEL_7;
  }

  int v11 = 0;
  *(_DWORD *)(v3 + 84) = 0;
  int v12 = -1;
LABEL_19:
  if ((unint64_t)v2 >= v4)
  {
    *(_DWORD *)(v3 + 84) = v9;
  }

  else if ((v9 & 0x400) != 0 || (int v15 = *v2, (v15 & 0xFC00) != 0xDC00))
  {
    *(_DWORD *)(v3 + 84) = v9;
    *a2 = 12;
  }

  else
  {
    unsigned int v9 = v15 + (v9 << 10) - 56613888;
    ++v2;
    ++v11;
LABEL_23:
    else {
      unsigned int v16 = v5;
    }
    if ((int)v9 < 0x10000)
    {
      unsigned int v17 = (v9 >> 12) | 0xFFFFFFE0;
      unsigned int v19 = 2;
    }

    else
    {
      unsigned int v17 = (v9 >> 18) | 0xFFFFFFF0;
      else {
        char v18 = (int *)v5;
      }
      *((_BYTE *)v18 + icu::UVector32::~UVector32(this + 1) = (v9 >> 12) & 0x3F | 0x80;
      unsigned int v19 = 3;
    }

    char *v16 = v17;
    v16[v19 - 1] = (v9 >> 6) & 0x3F | 0x80;
    v16[v19] = v9 & 0x3F | 0x80;
    if (v16 == v5)
    {
      uint64_t v22 = v19 + 1;
      v5 += v22;
      *unint64_t v7 = v12;
      v7[1] = v12;
      _DWORD v7[2] = v12;
      v7 += v22;
    }

    else
    {
      for (; (unint64_t)v16 <= ((unint64_t)&v23 | v19); ++v16)
      {
        if ((unint64_t)v5 >= v6)
        {
          char v20 = *v16;
          uint64_t v21 = *(char *)(v3 + 91);
          *(_BYTE *)(v3 + 9icu::UVector32::~UVector32(this + 1) = v21 + 1;
          *(_BYTE *)(v3 + v21 + 104) = v20;
          *a2 = 15;
        }

        else
        {
          *v7++ = v12;
          *v5++ = *v16;
        }
      }
    }

    int v12 = v11;
LABEL_7:
    while ((unint64_t)v2 < v4 && (unint64_t)v5 < v6)
    {
      unsigned int v13 = *v2++;
      unsigned int v9 = v13;
      if (v13 > 0x7F)
      {
        if (v9 > 0x7FF)
        {
          int v11 = v12 + 1;
          if ((v9 & 0xF800) != 0xD800 || v8 == &unk_189714F08) {
            goto LABEL_23;
          }
          goto LABEL_19;
        }

        *unint64_t v7 = v12;
        *unint64_t v5 = (v9 >> 6) | 0xC0;
        if ((unint64_t)(v5 + 1) >= v6)
        {
          *(_BYTE *)(v3 + 104) = v9 & 0x3F | 0x80;
          *(_BYTE *)(v3 + 9icu::UVector32::~UVector32(this + 1) = 1;
          *a2 = 15;
          ++v7;
          ++v5;
        }

        else
        {
          v7[1] = v12++;
          v7 += 2;
          v5[1] = v9 & 0x3F | 0x80;
          v5 += 2;
        }
      }

      else
      {
        *v7++ = v12++;
        *v5++ = v9;
      }
    }
  }

  result[4] = v5;
  result[2] = v2;
  result[6] = v7;
  return result;
}

void *sub_1808330B4(void *result, int *a2)
{
  uint64_t v3 = result[1];
  int v2 = (char *)result[2];
  unint64_t v5 = result[3];
  unint64_t v4 = (_WORD *)result[4];
  unint64_t v6 = result[5];
  unint64_t v7 = *(void **)(v3 + 48);
  if (*(char *)(v3 + 64) < 1 || (unint64_t)v4 >= v6)
  {
    while (1)
    {
LABEL_7:
      unsigned int v10 = *v2;
      if (*v2 < 0) {
        break;
      }
      *v4++ = v10;
      ++v2;
    }

    *(_BYTE *)(v3 + 65) = v10;
    ++v2;
    if (v10 <= 0xEF) {
      int v12 = 2;
    }
    else {
      int v12 = 3;
    }
    if (v10 > 0xDF) {
      ++v12;
    }
    int v9 = 1;
    else {
      int v11 = 0;
    }
  }

  else
  {
    int v9 = *(unsigned __int8 *)(v3 + 64);
    *(_BYTE *)(v3 + 64) = 0;
    unsigned int v10 = *(_DWORD *)(v3 + 72);
    int v11 = *(_DWORD *)(v3 + 76);
    *(_DWORD *)(v3 + 72) = 0;
  }

  if (v9 < v11)
  {
    uint64_t v13 = 0LL;
    uint64_t v14 = v9;
    uint64_t v15 = v3 + v9 + 65;
    int v16 = v9 - v11;
    while (1)
    {
      if ((unint64_t)&v2[v13] >= v5)
      {
        *(_DWORD *)(v3 + 72) = v10;
        *(_DWORD *)(v3 + 76) = v11;
        *(_BYTE *)(v3 + 64) = v14 + v13;
        v2 += v13;
        goto LABEL_36;
      }

      unint64_t v17 = v14 + v13;
      unint64_t v18 = v2[v13];
      *(_BYTE *)(v15 + v13) = v18;
      if (v11 < 3 || v17 >= 2)
      {
      }

      else
      {
        if (v11 == 3)
        {
          int v19 = a00000000000000[v10 & 0xF];
          int v20 = 1 << (v18 >> 5);
        }

        else
        {
          int v19 = byte_180A25F4C[v18 >> 4];
          int v20 = 1 << (v10 & 7);
        }

        if ((v19 & v20) != 0) {
          goto LABEL_33;
        }
      }

      if (v7 != &unk_189714F08 || v17 != 1 || v10 != 237 || (char)v18 > -65)
      {
        int v9 = v14 + v13;
        v2 += v13;
        break;
      }

void *sub_180833324(void *result, int *a2)
{
  uint64_t v3 = result[1];
  int v2 = (char *)result[2];
  unint64_t v5 = result[3];
  unint64_t v4 = (_WORD *)result[4];
  unint64_t v7 = result[5];
  unint64_t v6 = (_DWORD *)result[6];
  unsigned int v8 = *(void **)(v3 + 48);
  int v9 = 0;
  int v11 = *(unsigned __int8 *)(v3 + 64);
  *(_BYTE *)(v3 + 64) = 0;
  unsigned int v13 = *(_DWORD *)(v3 + 72);
  int v12 = *(_DWORD *)(v3 + 76);
  *(_DWORD *)(v3 + 72) = 0;
LABEL_18:
  if (v11 < v12)
  {
    uint64_t v15 = 0LL;
    uint64_t v16 = v11;
    uint64_t v17 = v3 + v11 + 65;
    int v18 = v11 - v12;
    while (1)
    {
      if ((unint64_t)&v2[v15] >= v5)
      {
        *(_DWORD *)(v3 + 72) = v13;
        *(_DWORD *)(v3 + 76) = v12;
        *(_BYTE *)(v3 + 64) = v16 + v15;
        v2 += v15;
        goto LABEL_36;
      }

      unint64_t v19 = v16 + v15;
      unint64_t v20 = v2[v15];
      *(_BYTE *)(v17 + v15) = v20;
      if (v12 < 3 || v19 >= 2)
      {
      }

      else
      {
        if (v12 == 3)
        {
          int v21 = a00000000000000[v13 & 0xF];
          int v22 = 1 << (v20 >> 5);
        }

        else
        {
          int v21 = byte_180A25F4C[v20 >> 4];
          int v22 = 1 << (v13 & 7);
        }

        if ((v21 & v22) != 0) {
          goto LABEL_33;
        }
      }

      if (v8 != &unk_189714F08 || v19 != 1 || v13 != 237 || (char)v20 > -65)
      {
        int v11 = v16 + v15;
        v2 += v15;
        break;
      }

uint64_t sub_1808335CC(void *a1, int *a2)
{
  int v2 = (char *)a1[2];
  unint64_t v3 = a1[3];
  if ((unint64_t)v2 >= v3)
  {
    int v6 = 8;
LABEL_5:
    *a2 = v6;
    return 0xFFFFLL;
  }

  unint64_t v4 = v2 + 1;
  uint64_t v5 = *v2;
  if ((*v2 & 0x80000000) == 0)
  {
    a1[2] = v4;
    return v5;
  }

  uint64_t v7 = a1[1];
  if ((v5 + 62) > 0x32u)
  {
    *(_BYTE *)(v7 + 65) = v5;
    *(_BYTE *)(v7 + 64) = 1;
    *a2 = 12;
    goto LABEL_41;
  }

  char v8 = *v2;
  int v9 = v5 > 0xEF;
  if ((unint64_t)&v4[v9 + 1] <= v3)
  {
    int v15 = (_DWORD)v5 << 6;
    if (v9)
    {
      if (v9 == 1)
      {
        int v16 = *v4;
        if (((a00000000000000[v8 & 0xF] >> (*v4 >> 5)) & 1) != 0)
        {
          unint64_t v4 = v2 + 2;
          int v17 = v2[2];
          if (v17 <= -65)
          {
            a1[2] = v2 + 3;
            return v17 + ((v15 + v16) << 6) - 925824;
          }
        }

        goto LABEL_36;
      }

      unint64_t v21 = *v4;
      if (((byte_180A25F4C[v21 >> 4] >> (v5 & 7)) & 1) != 0)
      {
        unint64_t v4 = v2 + 2;
        int v22 = v2[2];
        if (v22 <= -65)
        {
          unint64_t v4 = v2 + 3;
          int v23 = v2[3];
          if (v23 <= -65)
          {
            a1[2] = v2 + 4;
            int v19 = ((v15 + (_DWORD)v21) << 12) + (v22 << 6);
            int v20 = v23 - 63447168;
            return (v19 + v20);
          }
        }
      }
    }

    else
    {
      int v18 = *v4;
      if (v18 <= -65)
      {
        a1[2] = v2 + 2;
        int v19 = v15 + v18;
        int v20 = -12416;
        return (v19 + v20);
      }
    }

uint64_t sub_18083384C(uint64_t result, void *a2, int *a3)
{
  uint64_t v3 = a2[1];
  unint64_t v4 = (unsigned __int8 *)a2[2];
  uint64_t v5 = (unsigned __int8 *)a2[3];
  int v6 = *(char *)(v3 + 64);
  if (v6 < 1)
  {
    int v6 = 0;
    LOBYTE(v8) = 0;
    unsigned int v7 = 0;
  }

  else
  {
    unsigned int v7 = *(_DWORD *)(v3 + 72);
    int v8 = *(_DWORD *)(v3 + 76);
  }

  int v9 = *(_BYTE **)(result + 32);
  int v10 = (_DWORD)v5 - (_DWORD)v4 + v6;
  if (v10 >= (char)v8)
  {
    int v11 = *(_DWORD *)(result + 40) - (_DWORD)v9;
    if (v11 < (char)v8)
    {
      int v12 = -127;
LABEL_33:
      *a3 = v12;
      return result;
    }

    if (v10 >= v11) {
      int v10 = *(_DWORD *)(result + 40) - (_DWORD)v9;
    }
    int v13 = v10 - v6;
    unsigned int v14 = v13 - 1;
    if (v13 >= 1)
    {
      int v15 = (char)v4[v14];
      if (v15 < 0)
      {
        unint64_t v18 = v4[v14];
        unsigned int v19 = v4[v14];
        if (v19 <= 0xBF)
        {
          unsigned int v14 = v13 - 2;
          if (v13 < 2)
          {
            unsigned int v14 = 1;
            goto LABEL_12;
          }

          unint64_t v20 = v4[v14];
          if ((v20 + 32) <= 0x14u)
          {
            BOOL v21 = v20 > 0xEF;
            int v22 = &byte_180A25F4C[v18 >> 4];
            char v23 = v20 & 7;
            char v24 = &a00000000000000[v20 & 0xF];
            unsigned int v25 = v19 >> 5;
            if (v21)
            {
              LOBYTE(v25) = v23;
              char v24 = (char *)v22;
            }

            goto LABEL_12;
          }

          if ((char)v20 <= -65)
          {
            if (v13 < 3)
            {
              unsigned int v14 = 2;
            }

            else
            {
              unsigned __int8 v26 = v4[v13 - 3];
              unsigned int v14 = v13;
              if ((v26 + 16) <= 4u)
              {
                if (((byte_180A25F4C[v20 >> 4] >> (v26 & 7)) & 1) != 0) {
                  unsigned int v14 = v13 - 3;
                }
                else {
                  unsigned int v14 = v13;
                }
              }
            }

            goto LABEL_12;
          }
        }
      }
    }

    unsigned int v14 = v13;
LABEL_12:
    int v10 = v14 + v6;
  }

  if (v7)
  {
    *(_DWORD *)(v3 + 72) = 0;
    *(_BYTE *)(v3 + 64) = 0;
    int v16 = v6;
    goto LABEL_63;
  }

  int v17 = (unsigned __int8 *)a2[2];
  while (2)
  {
    if (v10 < 1)
    {
      unint64_t v4 = v17;
LABEL_48:
      if (*a3 <= 0 && v4 < v5)
      {
        if (v9 == *(_BYTE **)(result + 40))
        {
          int v38 = 15;
        }

        else
        {
          unsigned int v36 = *v4;
          if ((char)*v4 < 0)
          {
            if (v36 <= 0xEF) {
              char v55 = 2;
            }
            else {
              char v55 = 3;
            }
            if (v36 > 0xDF) {
              ++v55;
            }
            else {
              unsigned __int8 v37 = 0;
            }
          }

          else
          {
            unsigned __int8 v37 = 1;
          }

          if (v5 - v4 >= v37)
          {
            int v38 = -127;
          }

          else
          {
            *(_BYTE *)(v3 + 65) = v36;
            if (++v4 == v5)
            {
              char v62 = 1;
LABEL_121:
              *(_BYTE *)(v3 + 64) = v62;
              *(_DWORD *)(v3 + 72) = v36;
              *(_DWORD *)(v3 + 76) = v37;
              goto LABEL_125;
            }

            char v56 = 1;
            while (1)
            {
              unint64_t v57 = *v4;
              unsigned __int8 v58 = *v4;
              if (v37 < 3u || v56 >= 2)
              {
                int v61 = (char)v57 < -64;
              }

              else
              {
                if (v37 == 3)
                {
                  int v59 = a00000000000000[v36 & 0xF];
                  char v60 = v58 >> 5;
                }

                else
                {
                  int v59 = byte_180A25F4C[v57 >> 4];
                  char v60 = v36 & 7;
                }

                int v61 = v59 & (1 << v60);
              }

              if (!v61) {
                break;
              }
              unsigned int v36 = v57 + (v36 << 6);
              char v62 = v56 + 1;
              *(_BYTE *)(v3 + v56 + 65) = v58;
              ++v4;
              ++v56;
              if (v4 == v5) {
                goto LABEL_121;
              }
            }

            *(_BYTE *)(v3 + 64) = v56;
            int v38 = 12;
          }
        }

        *a3 = v38;
      }

      uint64_t v5 = v4;
      goto LABEL_125;
    }

    unint64_t v4 = v17;
    while (1)
    {
      int v28 = (char)*v4++;
      char v27 = v28;
      unsigned int v7 = v28;
      if ((v28 & 0x80000000) == 0)
      {
        *v9++ = v7;
        int v29 = -1;
        goto LABEL_46;
      }

      if (v7 >= 0xE0) {
        break;
      }
      if (v7 < 0xC2) {
        goto LABEL_91;
      }
      int v33 = (char)*v4;
      if (v33 > -65) {
        goto LABEL_57;
      }
      unint64_t v4 = v17 + 2;
      *int v9 = v7;
      v9[1] = v33;
      v9 += 2;
      int v29 = -2;
LABEL_46:
      int v17 = v4;
      BOOL v34 = __OFADD__(v10, v29);
      v10 += v29;
      if ((v10 < 0) ^ v34 | (v10 == 0)) {
        goto LABEL_48;
      }
    }

    if (v7 <= 0xEF)
    {
      unsigned int v30 = a00000000000000[v27 & 0xF];
      unsigned __int8 v31 = *v4;
      if (((v30 >> (*v4 >> 5)) & 1) == 0) {
        goto LABEL_57;
      }
      int v32 = (char)v17[2];
      if (v32 > -65) {
        goto LABEL_57;
      }
      unint64_t v4 = v17 + 3;
      *int v9 = v7;
      v9[1] = v31;
      v9[2] = v32;
      v9 += 3;
      int v29 = -3;
      goto LABEL_46;
    }

    if ((v7 + 62) > 0x32u)
    {
LABEL_91:
      LOBYTE(v6) = 0;
      LOBYTE(v16) = 1;
      goto LABEL_92;
    }

void *sub_180833DDC(void *result, _DWORD *a2)
{
  uint64_t v2 = result[1];
  uint64_t v3 = (_BYTE *)result[2];
  unint64_t v5 = result[3];
  unint64_t v4 = (_WORD *)result[4];
  unint64_t v6 = result[5];
  int v7 = *(_DWORD *)(v2 + 76);
  if (*(_DWORD *)(v2 + 72)) {
    unsigned int v8 = *(_DWORD *)(v2 + 72);
  }
  else {
    unsigned int v8 = 64;
  }
  LODWORD(v9) = *(_DWORD *)(v2 + 76) & 3;
  int v10 = *(char *)(v2 + 64);
  int v11 = (_BYTE *)(v2 + 65);
  if ((v7 & 3) == 0 || v10 < 1 || (unint64_t)v4 >= v6)
  {
    uint64_t v14 = result[5];
LABEL_13:
    int v15 = v5 - (_DWORD)v3;
    unint64_t v9 = (unint64_t)(v14 - (void)v4) >> 1;
    if ((int)v9 >= 1)
    {
      do
      {
        unsigned int v16 = *v3;
        if (((v16 - 80) & 0x80) != 0)
        {
          if (v16 > 0x20) {
            goto LABEL_26;
          }
          if (v16 != 32) {
            unsigned int v8 = 64;
          }
          *unint64_t v4 = v16;
        }

        else
        {
          int v17 = v8 + v16 - 144;
          if (v17 >= 12288) {
            goto LABEL_26;
          }
          *unint64_t v4 = v17;
          unsigned int v8 = v17 & 0xFFFFFF80 | 0x40;
        }

        ++v4;
        ++v3;
        BOOL v18 = __OFSUB__((_DWORD)v9, 1);
        LODWORD(v9) = v9 - 1;
      }

      while (!(((v9 & 0x80000000) != 0LL) ^ v18 | ((_DWORD)v9 == 0)));
      LODWORD(v9) = 0;
    }

    goto LABEL_26;
  }

LABEL_75:
  int v15 = v7 >> 2;
  while ((unint64_t)v3 < v5)
  {
    unsigned int v36 = *v3++;
    uint64_t v35 = v36;
    v11[(char)v10] = v36;
    if (v36 > 0x20uLL) {
      int v37 = v35 - 13;
    }
    else {
      int v37 = byte_180A25FC4[v35];
    }
    LOBYTE(v10) = v10 + 1;
    int v38 = 59049 * v37;
    if ((_DWORD)v9 == 2) {
      int v38 = 243 * v37;
    }
    if ((_DWORD)v9 != 1) {
      int v37 = v38;
    }
    if (v37 < 0) {
      goto LABEL_106;
    }
    v15 += v37;
    LODWORD(v9) = v9 - 1;
    if (!(_DWORD)v9)
    {
      unsigned int v25 = v15 + v8;
      if (v15 + v8 > 0x10FFFF)
      {
        LOBYTE(v10) = 0;
LABEL_106:
        char v27 = v3;
LABEL_107:
        *a2 = 12;
        uint64_t v3 = v27;
        goto LABEL_108;
      }

      LODWORD(v9) = 0;
      LOBYTE(v10) = 0;
LABEL_91:
      if (v25 - 55204 >= 0xFFFF589C)
      {
        if (v25 >> 10 <= 0x2A) {
          unsigned int v40 = v25 & 0xFFFFFF80 | 0x40;
        }
        else {
          unsigned int v40 = 49617;
        }
        if (v25 - 19968 >= 0x51A6) {
          int v41 = v40;
        }
        else {
          int v41 = 30481;
        }
        if (v25 >> 5 >= 0x185) {
          unsigned int v8 = v41;
        }
        else {
          unsigned int v8 = 12400;
        }
      }

      else
      {
        unsigned int v8 = v25 & 0xFFFFFF80 | 0x40;
        if (HIWORD(v25))
        {
          *unint64_t v4 = (v25 >> 10) - 10304;
          __int16 v39 = v25 & 0x3FF | 0xDC00;
          if ((unint64_t)(v4 + 1) < v6)
          {
            v4[1] = v39;
            v4 += 2;
            goto LABEL_26;
          }

          *(_WORD *)(v2 + 144) = v39;
          *(_BYTE *)(v2 + 93) = 1;
          ++v4;
LABEL_47:
          *a2 = 15;
LABEL_48:
          *(_DWORD *)(v2 + 72) = v8;
          int v24 = v9 | (4 * v15);
          goto LABEL_109;
        }
      }

      *v4++ = v25;
LABEL_26:
      unsigned int v19 = v3;
      int v20 = v8;
LABEL_27:
      uint64_t v3 = v19 + 1;
      int v21 = v20;
      do
      {
        unsigned int v8 = v21;
        if ((unint64_t)(v3 - 1) >= v5)
        {
          --v3;
          goto LABEL_44;
        }

        if ((unint64_t)v4 >= v6)
        {
          unsigned int v8 = v20;
          uint64_t v3 = v19;
          goto LABEL_47;
        }

        unsigned int v22 = *(v3 - 1);
        if (((v22 - 80) & 0x80) == 0)
        {
          unsigned int v25 = v21 + v22 - 144;
          *v4++ = v25;
          unsigned int v8 = v25 & 0xFFFFFF80 | 0x40;
          uint64_t v14 = result[5];
          goto LABEL_13;
        }

        if (v22 <= 0x20)
        {
          if (v22 == 32) {
            int v20 = v21;
          }
          else {
            int v20 = 64;
          }
          *v4++ = v22;
          unsigned int v19 = v3;
          goto LABEL_27;
        }

        if ((v22 - 37) <= 0xD5u && (unint64_t)v3 < v5)
        {
          if (v22 <= 0x8F) {
            int v26 = -19504;
          }
          else {
            int v26 = -50480;
          }
          int v15 = v26 + 243 * v22;
          char v27 = v3 + 1;
          unsigned int v28 = *v3;
          if (v28 >= 0x21)
          {
            unsigned int v29 = v28 - 13;
          }

          else
          {
            unsigned int v29 = byte_180A25FC4[*v3];
            if (((0x10C00FF81uLL >> v28) & 1) != 0)
            {
LABEL_110:
              *(_BYTE *)(v2 + 65) = v22;
              *(_BYTE *)(v2 + 66) = *v3;
              LOBYTE(v10) = 2;
              goto LABEL_107;
            }
          }

          unsigned int v25 = v15 + v21 + v29;
          if (v25 < 0x110000)
          {
            ++v3;
            goto LABEL_91;
          }

          goto LABEL_110;
        }

        ++v3;
        int v21 = 64;
      }

      while (v22 == 255);
      _BYTE *v11 = v22;
      --v3;
      if (v22 >= 0x22) {
        int v30 = 59049 * v22 - 2195326;
      }
      else {
        int v30 = -14536567;
      }
      if (v22 >= 0x22) {
        int v31 = 2;
      }
      else {
        int v31 = 3;
      }
      if (v22 >= 0x25)
      {
        int v30 = 243 * v22 - 19504;
        int v31 = 1;
      }

      int v32 = 59049 * v22 - 14810786;
      if (v22 <= 0xFD)
      {
        int v33 = 2;
      }

      else
      {
        int v32 = 187660;
        int v33 = 3;
      }

      if (v22 > 0xFA)
      {
        int v34 = v33;
      }

      else
      {
        int v32 = 243 * v22 - 50480;
        int v34 = 1;
      }

      if (v22 >= 0x50)
      {
        LODWORD(v9) = v34;
      }

      else
      {
        int v32 = v30;
        LODWORD(v9) = v31;
      }

      int v7 = v9 | (4 * v32);
      LOBYTE(v10) = 1;
      goto LABEL_75;
    }
  }

  *(_DWORD *)(v2 + 72) = 0;
  *(_DWORD *)(v2 + 76) = v18;
  a1[2] = v27;
  return result;
}

  char v54 = qword_18C534F90[byte_18C534FE0];
  if (v54)
  {
    char v55 = *(_DWORD *)(v54 + 188) - 1;
    *(_DWORD *)(v54 + 188) = v55;
    if (!v55) {
      sub_1808450B0(v54);
    }
  }

  char v51 = (char *)uprv_malloc(0xC0uLL);
  char v56 = byte_18C534FE0;
  qword_18C534F90[byte_18C534FE0] = (uint64_t)v51;
  unint64_t v57 = strcpy(v51, a1);
  *((void *)v57 + 20) = __base;
  *((_DWORD *)v57 + 42) = v6;
  *((void *)v57 + 22) = v68;
  *((_DWORD *)v57 + 46) = v7;
  *((_DWORD *)v57 + 47) = 2;
  byte_18C534FE0 = v56 + 1 - 10 * ((6554 * (v56 + 1)) >> 16);
  sub_180820C94(0xEu, (uint64_t)sub_1808450E8);
LABEL_79:
  umtx_unlock((std::mutex **)&unk_18C534FE8);
  return v51;
}

    if (a4 || v14 || HIBYTE(v41) || v25)
    {
      if (v14) {
        goto LABEL_85;
      }
    }

    else
    {
      strcpy(__dst, v17);
      unsigned int v36 = sub_180872B34(a2, __dst, v17, 0, (BOOL *)&v41, &v40, (BOOL *)&v41 + 1, (UErrorCode *)&v43);
      unsigned int v19 = v43;
      if (v43 == 7) {
        goto LABEL_14;
      }
      uint64_t v14 = (uint64_t)v36;
      int v43 = -127;
      if (v36)
      {
        unint64_t v42 = v36;
        if (v40)
        {
          if ((_BYTE)v41) {
            goto LABEL_86;
          }
          goto LABEL_97;
        }

        unsigned int v25 = v41;
        if (__dst[0])
        {
          uint64_t v35 = 1;
          if (strstr("nb nn", __dst) && !v25)
          {
LABEL_97:
            uint64_t v35 = 1;
LABEL_99:
            int v38 = v42;
            if (!strcmp(*v42, "root") || v38[2] || *(_BYTE *)(v14 + 96))
            {
LABEL_102:
              for (unint64_t i = v42; ; ++*((_DWORD *)i + 27))
              {
                unint64_t i = (const char **)i[2];
                if (!i) {
                  break;
                }
              }

              goto LABEL_86;
            }

            if (sub_18087361C((uint64_t)&v42, a5))
            {
              if (!v35) {
                *(_DWORD *)(v14 + 112) = -127;
              }
              goto LABEL_102;
            }

  if (BYTE4(__s[1])) {
    uprv_free(__s[0]);
  }
  return v16;
}

  unsigned int v44 = utf8_nextCharSafeBody((const uint8_t *)src, &v71, -1, v37, -1);
  if ((v44 & 0x80000000) != 0)
  {
    if (subchar < 0)
    {
LABEL_165:
      unsigned int v8 = 0LL;
      int v33 = U_INVALID_CHAR_FOUND;
      goto LABEL_55;
    }

    ++v36;
    unsigned int v44 = subchar;
  }

  if (!HIWORD(v44))
  {
    *v20++ = v44;
    goto LABEL_61;
  }

  *int v20 = (v44 >> 10) - 10304;
  if (v20 + 1 < v17)
  {
    v20[1] = v44 & 0x3FF | 0xDC00;
    v20 += 2;
    goto LABEL_61;
  }

  LODWORD(v34) = v71;
  uint64_t v35 = src[v71];
  int v21 = 1;
  ++v20;
LABEL_139:
  int v61 = v36;
LABEL_140:
  if (v35)
  {
    while (2)
    {
      char v62 = (int)v34;
      int v34 = (int)v34 + 1LL;
      uint64_t v71 = v34;
      if ((v35 & 0x80) == 0)
      {
        ++v21;
        goto LABEL_158;
      }

      if ((v35 & 0xF0) == 0xE0)
      {
        if (((a00000000000000[v35 & 0xF] >> (src[v34] >> 5)) & 1) != 0
          && src[v62 + 2] <= -65)
        {
          ++v21;
          LODWORD(v34) = v62 + 3;
          goto LABEL_150;
        }
    }

    if (v12)
    {
      int v13 = *(unsigned __int8 *)v12;
      if (*v12) {
        continue;
      }
    }

    goto LABEL_100;
  }

  unint64_t v45 = 5;
LABEL_99:
  *(_DWORD *)a2 = v45;
LABEL_100:
  if (*(int *)a2 >= 1)
  {
    (*(void (**)(icu::RuleBasedCollator *))(*(void *)v3 + 8LL))(v3);
    return 0LL;
  }

  return v3;
}

    icu::CollationBuilder::addIfDifferent( (icu::CollationDataBuilder **)v13,  (const icu::UnicodeString *)&v53,  (const icu::UnicodeString *)&v48,  (const uint64_t *)(v13 + 296),  v40,  v41,  a7);
LABEL_76:
    int v17 = (char *)*(unsigned int *)a7;
    if ((int)v17 < 1)
    {
      *(_DWORD *)(v13 + 544) = v28;
      goto LABEL_8;
    }

    int v17 = "writing collation elements";
    goto LABEL_7;
  }

  return this;
}

  if ((v9 & 0x400) == 0) {
    goto LABEL_76;
  }
  unsigned __int8 v58 = 0;
  int v59 = 0;
  char v60 = v88 < 0x1000;
  unint64_t v89 = 0LL;
  while (1)
  {
LABEL_177:
    if (v58) {
      goto LABEL_194;
    }
    do
    {
      int v61 = SHIDWORD(v89);
      if (HIDWORD(v89) == v91)
      {
        unsigned __int8 v58 = 2;
        if (v59) {
          goto LABEL_214;
        }
        while (1)
        {
LABEL_195:
          uint64_t v66 = (int)v89;
          if ((_DWORD)v89 == v90)
          {
            int v59 = 2;
            goto LABEL_214;
          }

          LODWORD(v89) = v89 + 1;
          uint64_t v67 = *(unsigned __int16 *)(a6 + 2 * v66);
          if (v67 <= 0x17F) {
            break;
          }
          if ((v67 & 0xFFC0) == 0x2000)
          {
            uint64_t v68 = v67 - 7808;
            goto LABEL_200;
          }

          if (v67 == 0xFFFF) {
            uint64_t v69 = 64680LL;
          }
          else {
            uint64_t v69 = 1LL;
          }
          if (v67 != 65534) {
            goto LABEL_201;
          }
          uint64_t v69 = 3LL;
LABEL_208:
          LODWORD(v69) = icu::CollationFastLatin::nextPair(v13, v67, v69, a6, 0LL, (int *)&v89, &v90);
LABEL_209:
          Cases = icu::CollationFastLatin::getCases(v14, v60, v69);
          if (Cases)
          {
            int v59 = Cases;
            goto LABEL_214;
          }
        }

        uint64_t v68 = *(unsigned __int16 *)(a6 + 2 * v66);
LABEL_200:
        uint64_t v69 = *(unsigned __int16 *)(v13 + 2 * v68);
LABEL_201:
        goto LABEL_208;
      }

      ++HIDWORD(v89);
      char v62 = *(unsigned __int16 *)(a4 + 2 * v61);
      if (v62 <= 0x17F)
      {
        uint64_t v63 = *(unsigned __int16 *)(a4 + 2 * v61);
LABEL_183:
        uint64_t v64 = *(unsigned __int16 *)(v13 + 2 * v63);
        goto LABEL_184;
      }

      if ((v62 & 0xFFC0) == 0x2000)
      {
        uint64_t v63 = v62 - 7808;
        goto LABEL_183;
      }

      if (v62 == 0xFFFF) {
        uint64_t v64 = 64680LL;
      }
      else {
        uint64_t v64 = 1LL;
      }
      if (v62 == 65534)
      {
        uint64_t v64 = 3LL;
LABEL_191:
        LODWORD(v64) = icu::CollationFastLatin::nextPair(v13, v62, v64, a4, 0LL, (int *)&v89 + 1, &v91);
        goto LABEL_192;
      }

          v3[22] = 8;
          goto LABEL_66;
        case 0xA:
          goto LABEL_31;
        case 0x11:
          LODWORD(v14) = i + 1;
          if ((v11 & 1) != 0) {
            unsigned int v25 = *(_DWORD *)(v4 + 12);
          }
          else {
            unsigned int v25 = v7 >> 5;
          }
          if ((v7 & 2) == 0) {
            unint64_t v5 = *(void *)(v4 + 24);
          }
          else {
LABEL_65:
          }
            v3[22] = 0;
          goto LABEL_66;
        default:
          *a2 = 65792;
LABEL_19:
          LODWORD(v14) = i + 1;
          goto LABEL_66;
      }

      do
      {
LABEL_31:
        uint64_t v14 = v13;
        if (*(__int16 *)(v4 + 8) < 0)
        {
          int v20 = *(int *)(v4 + 12);
          if (v13 >= v20) {
            break;
          }
        }

        else
        {
          int v20 = (unint64_t)*(unsigned __int16 *)(v4 + 8) >> 5;
        }

        if (v20 <= v13)
        {
          unsigned int v22 = 0xFFFF;
        }

        else
        {
          int v21 = v4 + 10;
          if ((*(_WORD *)(v4 + 8) & 2) == 0) {
            int v21 = *(void *)(v4 + 24);
          }
          unsigned int v22 = *(unsigned __int16 *)(v21 + 2 * v13);
        }

        char v23 = sub_18095607C(v22);
        v3[22] = v23;
        int v13 = v14 + 1;
      }

      while (v23 == 10);
      unsigned int v19 = 10;
LABEL_42:
      v3[22] = v19;
LABEL_66:
      icu::UnicodeString::UnicodeString( (icu::UnicodeString *)v29,  (const icu::UnicodeString *)v4,  i,  (v14 - i));
      icu::UnicodeString::operator=((icu::UnicodeString *)(v3 + 6), (icu::UnicodeString *)v29);
      double result = (int *)icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v29);
      v3[4] = v14;
    }
  }

  return result;
}

      if ((*(_BYTE *)(*((void *)this + 1) + 24LL) & 1) == 0)
      {
        while (1)
        {
          int v30 = *(unsigned __int16 *)(v6 + 2LL * v5 - 2);
          if ((v30 & 0xDF50) == 0)
          {
            if (*(unsigned __int16 *)(v6 + 2LL * v5 - 2) > 0x84u)
            {
            }

            else
            {
              if (v30 == 13)
              {
                if (*((void *)this + 15) > v5 && *(_WORD *)(v6 + 2LL * v5) == 10) {
                  ++v5;
                }
LABEL_86:
                icu::RegexMatcher::MatchChunkAt(this, v5, 0, a2);
                if (*((_BYTE *)this + 130)) {
                  return 1;
                }
              }
            }
          }

          if (v5 >= v10) {
            goto LABEL_15;
          }
          int v31 = v5 + 1LL;
          if ((*(_WORD *)(v6 + 2LL * v5) & 0xFC00) == 0xD800 && *((void *)this + 15) != v31)
          {
            if ((*(_WORD *)(v6 + 2 * v31) & 0xFC00) == 0xDC00) {
              v5 += 2;
            }
            else {
              ++v5;
            }
          }

          else
          {
            ++v5;
          }

          int v32 = (unsigned int (*)(void, void))*((void *)this + 37);
          if (v32 && !v32(*((void *)this + 38), v5)) {
            goto LABEL_109;
          }
        }
      }

      LODWORD(v33) = v5;
      do
      {
        int v34 = (int)v33;
        if (*(_WORD *)(v6 + 2LL * (int)v33 - 2) == 10)
        {
          icu::RegexMatcher::MatchChunkAt(this, v33, 0, a2);
          if (*((_BYTE *)this + 130)) {
            return 1;
          }
        }

        int v33 = (int)v33 + 1LL;
        if ((*(_WORD *)(v6 + 2 * v34) & 0xFC00) == 0xD800
          && *((void *)this + 15) != v33
          && (*(_WORD *)(v6 + 2 * v33) & 0xFC00) == 0xDC00)
        {
          LODWORD(v33) = v34 + 2;
        }

        uint64_t v35 = (unsigned int (*)(void, void))*((void *)this + 37);
      }

      while (!v35 || v35(*((void *)this + 38), (int)v33));
LABEL_109:
      unsigned int v8 = 0;
      int v21 = U_REGEX_STOPPED_BY_CALLER;
LABEL_110:
      *a2 = v21;
      return v8;
    default:
      unsigned int v8 = 0;
      int v21 = U_INTERNAL_PROGRAM_ERROR;
      goto LABEL_110;
  }

    int v26 = 65533;
    goto LABEL_76;
  }

  if (v26 < 0xC2) {
    goto LABEL_75;
  }
  int v30 = v26 & 0x1F;
LABEL_62:
  int v37 = a4[v27] ^ 0x80;
  uint64_t v35 = v37 > 0x3F;
  int v38 = v37 | (v30 << 6);
  if (v35) {
    int v26 = 65533;
  }
  else {
    int v26 = v38;
  }
LABEL_76:
  int v41 = *((void *)this + 1);
  while (sub_1808B2F00(v41, v26, v21))
  {
LABEL_102:
    uint64_t v63 = --pi;
    uint64_t v64 = a2[v63];
    if ((v64 & 0x80) != 0)
    {
      uint64_t v64 = utf8_prevCharSafeBody(a2, 0, &pi, v64, -3);
      LODWORD(v63) = pi;
    }

    int v41 = *((void *)this + 1);
    int v26 = v64;
  }

        int v34 = icu::UMemory::operator new((uint64_t *)v33, (icu::UMemory *)0x18, v9);
        uint64_t v35 = v34;
        if (v34)
        {
          *int v34 = (uint64_t)&off_18972BE28;
          v34[1] = 0LL;
          *((_DWORD *)v34 + 4) = v11;
          *((_BYTE *)v34 + 20) = v15;
        }

        else
        {
          *a3 = 7;
        }

void *sub_1808341DC(void *result, int *a2)
{
  int v2 = 0;
  uint64_t v3 = result[1];
  unint64_t v4 = (unsigned __int8 *)result[2];
  unint64_t v6 = result[3];
  unint64_t v5 = (_WORD *)result[4];
  unint64_t v8 = result[5];
  int v7 = (int *)result[6];
  int v9 = *(_DWORD *)(v3 + 76);
  if (*(_DWORD *)(v3 + 72)) {
    unsigned int v10 = *(_DWORD *)(v3 + 72);
  }
  else {
    unsigned int v10 = 64;
  }
  LODWORD(v1icu::UVector32::~UVector32(this + 1) = *(_DWORD *)(v3 + 76) & 3;
  int v12 = *(char *)(v3 + 64);
  int v13 = (_BYTE *)(v3 + 65);
  if ((v9 & 3) == 0 || v12 < 1 || (unint64_t)v5 >= v8)
  {
    uint64_t v16 = result[5];
    goto LABEL_13;
  }

  int v21 = -1;
LABEL_72:
  int v17 = v9 >> 2;
  v2 += v11;
  do
  {
    unsigned int v35 = *v4++;
    uint64_t v34 = v35;
    v13[(char)v12] = v35;
    if (v35 > 0x20uLL) {
      int v36 = v34 - 13;
    }
    else {
      int v36 = byte_180A25FC4[v34];
    }
    LOBYTE(v12) = v12 + 1;
    int v37 = 59049 * v36;
    if ((_DWORD)v11 == 2) {
      int v37 = 243 * v36;
    }
    if ((_DWORD)v11 != 1) {
      int v36 = v37;
    }
    if (v36 < 0) {
      goto LABEL_97;
    }
    v17 += v36;
    LODWORD(v1icu::UVector32::~UVector32(this + 1) = v11 - 1;
  }

  while ((_DWORD)v11);
  unsigned int v28 = v17 + v10;
  if (v17 + v10 > 0x10FFFF)
  {
    int v27 = 12;
    LOBYTE(v12) = 0;
    goto LABEL_98;
  }

  LOBYTE(v12) = 0;
LABEL_85:
  while (2)
  {
    if (v28 - 55204 >= 0xFFFF589C)
    {
      unsigned int v10 = 12400;
      if (v28 >> 5 >= 0x185)
      {
        unsigned int v10 = 30481;
        if (v28 - 19968 >= 0x51A6)
        {
          unsigned int v10 = 49617;
          if (v28 >> 10 <= 0x2A) {
            unsigned int v10 = v28 & 0xFFFFFF80 | 0x40;
          }
        }
      }

      goto LABEL_93;
    }

    unsigned int v10 = v28 & 0xFFFFFF80 | 0x40;
    if (!HIWORD(v28))
    {
LABEL_93:
      *v5++ = v28;
      uint64_t v39 = 1LL;
      int v38 = v7;
      goto LABEL_94;
    }

    *unint64_t v5 = (v28 >> 10) - 10304;
    if ((unint64_t)(v5 + 1) >= v8)
    {
      *v7++ = v21;
      *(_WORD *)(v3 + 144) = v28 & 0x3FF | 0xDC00;
      *(_BYTE *)(v3 + 93) = 1;
      int v27 = 15;
      ++v5;
      goto LABEL_98;
    }

    v5[1] = v28 & 0x3FF | 0xDC00;
    v5 += 2;
    *int v7 = v21;
    int v38 = v7 + 1;
    uint64_t v39 = 2LL;
LABEL_94:
    v7 += v39;
    *int v38 = v21;
LABEL_26:
    int v22 = v10;
LABEL_27:
    uint64_t v23 = 0LL;
    int v24 = v22;
    while (1)
    {
      unsigned int v10 = v24;
      if ((unint64_t)&v4[v23] >= v6)
      {
        v4 += v23;
        goto LABEL_99;
      }

      if ((unint64_t)v5 >= v8)
      {
        int v27 = 15;
        unsigned int v10 = v22;
        goto LABEL_98;
      }

      unsigned int v25 = v4[v23];
      if (((v25 - 80) & 0x80) == 0)
      {
        unsigned int v28 = v24 + v25 - 144;
        v4 += v23 + 1;
        int v21 = v23 + v2;
        v2 += v23 + 1;
        *v5++ = v28;
        *v7++ = v21;
        unsigned int v10 = v28 & 0xFFFFFF80 | 0x40;
        uint64_t v16 = result[5];
LABEL_13:
        int v17 = v6 - (_DWORD)v4;
        unint64_t v11 = (unint64_t)(v16 - (void)v5) >> 1;
        if ((int)v11 >= 1)
        {
          do
          {
            unsigned int v18 = *v4;
            if (((v18 - 80) & 0x80) != 0)
            {
              if (v18 > 0x20) {
                goto LABEL_26;
              }
              if (v18 != 32) {
                unsigned int v10 = 64;
              }
              *unint64_t v5 = v18;
              *int v7 = v2;
            }

            else
            {
              int v19 = v10 + v18 - 144;
              if (v19 >= 12288) {
                goto LABEL_26;
              }
              *unint64_t v5 = v19;
              *int v7 = v2;
              unsigned int v10 = v19 & 0xFFFFFF80 | 0x40;
            }

            ++v7;
            ++v5;
            ++v2;
            ++v4;
            BOOL v20 = __OFSUB__((_DWORD)v11, 1);
            LODWORD(v1icu::UVector32::~UVector32(this + 1) = v11 - 1;
          }

          while (!(((v11 & 0x80000000) != 0LL) ^ v20 | ((_DWORD)v11 == 0)));
          LODWORD(v1icu::UVector32::~UVector32(this + 1) = 0;
        }

        goto LABEL_26;
      }

      if (v25 <= 0x20)
      {
        if (v25 == 32) {
          int v22 = v24;
        }
        else {
          int v22 = 64;
        }
        *v5++ = v25;
        *v7++ = v2 + v23;
        v4 += v23 + 1;
        v2 += v23 + 1;
        goto LABEL_27;
      }

      ++v23;
      int v24 = 64;
      if (v25 != 255)
      {
        *int v13 = v25;
        v4 += v23;
        int v21 = v2 - 1 + v23;
        v2 += v23;
        if (v25 < 0x50)
        {
          if (v25 < 0x25)
          {
            LODWORD(v1icu::UVector32::~UVector32(this + 1) = 3;
            int v12 = -14536567;
            if (v25 >= 0x22)
            {
              int v12 = 59049 * v25 - 2195326;
              LODWORD(v1icu::UVector32::~UVector32(this + 1) = 2;
            }

            goto LABEL_71;
          }

          int v33 = -19504;
        }

        else
        {
          if (v25 > 0xFA)
          {
            if (v25 <= 0xFD) {
              int v12 = 59049 * v25 - 14810786;
            }
            else {
              int v12 = 187660;
            }
            if (v25 <= 0xFD) {
              LODWORD(v1icu::UVector32::~UVector32(this + 1) = 2;
            }
            else {
              LODWORD(v1icu::UVector32::~UVector32(this + 1) = 3;
            }
            goto LABEL_71;
          }

          int v33 = -50480;
        }

        int v12 = v33 + 243 * v25;
        LODWORD(v1icu::UVector32::~UVector32(this + 1) = 1;
LABEL_71:
        int v9 = v11 | (4 * v12);
        LOBYTE(v12) = 1;
        goto LABEL_72;
      }
    }

    if (v25 <= 0x8F) {
      int v29 = -19504;
    }
    else {
      int v29 = -50480;
    }
    int v17 = v29 + 243 * v25;
    int v30 = &v4[v23];
    v4 += v23 + 2;
    unsigned int v31 = v30[1];
    int v21 = v23 + v2;
    if (v31 >= 0x21)
    {
      unsigned int v32 = v31 - 13;
    }

    else
    {
      unsigned int v32 = byte_180A25FC4[v30[1]];
      if (((0x10C00FF81uLL >> v31) & 1) != 0) {
        break;
      }
    }

    unsigned int v28 = v17 + v10 + v32;
    if (HIWORD(v28) <= 0x10u)
    {
      int v2 = v21 + 2;
      continue;
    }

    break;
  }

  *(_BYTE *)(v3 + 65) = v25;
  *(_BYTE *)(v3 + 66) = v30[1];
  LOBYTE(v12) = 2;
LABEL_97:
  int v27 = 12;
LABEL_98:
  *a2 = v27;
LABEL_99:
  int v40 = v11 | (4 * v17);
  if (*a2 == 12) {
    int v41 = 64;
  }
  else {
    int v41 = v10;
  }
  if (*a2 == 12) {
    int v40 = 0;
  }
  *(_DWORD *)(v3 + 72) = v41;
  *(_DWORD *)(v3 + 76) = v40;
  *(_BYTE *)(v3 + 64) = v12;
  result[2] = v4;
  result[4] = v5;
  result[6] = v7;
  return result;
}

uint64_t sub_180834658(uint64_t result, _DWORD *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  unint64_t v5 = *(unsigned __int16 **)(result + 16);
  unint64_t v7 = *(void *)(result + 24);
  unint64_t v6 = *(_BYTE **)(result + 32);
  int v8 = *(_DWORD *)(result + 40) - (_DWORD)v6;
  unsigned int v9 = *(_DWORD *)(v4 + 84);
  if (*(_DWORD *)(v4 + 80)) {
    int v10 = *(_DWORD *)(v4 + 80);
  }
  else {
    int v10 = 64;
  }
  if (v9) {
    BOOL v11 = v8 <= 0;
  }
  else {
    BOOL v11 = 1;
  }
  int v12 = *(unsigned __int16 **)(result + 16);
  unsigned int v13 = *(_DWORD *)(result + 40) - (_DWORD)v6;
  if (v11) {
    goto LABEL_9;
  }
LABEL_33:
  if ((unint64_t)v12 >= v7)
  {
    unsigned int v9 = -v9;
    unint64_t v5 = v12;
    goto LABEL_56;
  }

  int v20 = *v12;
  BOOL v21 = (v20 & 0xFC00) == 56320;
  int v22 = v20 + (v9 << 10) - 56613888;
  unint64_t v5 = &v12[v21];
  if (v21) {
    unsigned int v9 = v22;
  }
  while (1)
  {
    double result = v9 - v10;
    unsigned int v23 = v9 >> 10 <= 0x2A ? v9 & 0xFFFFFF80 | 0x40 : 49617;
    int v24 = v9 - 19968 >= 0x51A6 ? v23 : 30481;
    unsigned int v25 = v9 >> 5 >= 0x185 ? v24 : 12400;
    int v10 = v9 - 55204 <= 0xFFFF589B ? v9 & 0xFFFFFF80 | 0x40 : v25;
    *v6++ = result - 112;
    int v8 = v13 - 1;
    if ((int)v9 < 12288)
    {
LABEL_9:
      if (v8 >= 1)
      {
        int v14 = v8 + 1;
        do
        {
          unsigned int v9 = *v5;
          if (v9 >> 12 > 2) {
            break;
          }
          if (v9 > 0x20)
          {
            char v16 = v9 - v10;
            if (v9 - v10 + 64 > 0x7F) {
              break;
            }
            int v10 = v9 & 0xFF80 | 0x40;
            LOBYTE(v15) = v16 - 112;
          }

          else
          {
            if (v9 != 32) {
              int v10 = 64;
            }
            unsigned __int16 v15 = *v5;
          }

          *v6++ = v15;
          ++v5;
          --v14;
        }

        while (v14 > 1);
      }

      int v8 = *(_DWORD *)(v3 + 40) - (_DWORD)v6;
    }

uint64_t sub_180834A38(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = result;
  int v3 = 0;
  uint64_t v5 = *(void *)(result + 8);
  uint64_t v4 = *(unsigned __int16 **)(result + 16);
  unint64_t v7 = *(void *)(result + 24);
  unint64_t v6 = *(_BYTE **)(result + 32);
  int v8 = *(_DWORD *)(result + 40) - (_DWORD)v6;
  unsigned int v9 = *(int **)(result + 48);
  unsigned int v10 = *(_DWORD *)(v5 + 84);
  if (*(_DWORD *)(v5 + 80)) {
    int v11 = *(_DWORD *)(v5 + 80);
  }
  else {
    int v11 = 64;
  }
  if (v10) {
    int v12 = -1;
  }
  else {
    int v12 = 0;
  }
  if (v10) {
    BOOL v13 = v8 <= 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    int v14 = *(unsigned __int16 **)(result + 16);
    goto LABEL_13;
  }

uint64_t sub_180834EC8(int a1)
{
  if (a1 < -64)
  {
    if (a1 >= 0xFFFFD6EF)
    {
      if (-64 - (_WORD)a1 == 243 * (_WORD)v3) {
        int v4 = -v3;
      }
      else {
        int v4 = ~v3;
      }
      if (-64 - (_WORD)a1 == 243 * (_WORD)v3) {
        unsigned __int16 v5 = 0;
      }
      else {
        unsigned __int16 v5 = 243 - (-64 - a1 - 243 * v3);
      }
      if (v5 < 0x14u) {
        int v2 = byte_180A25FE5[v5];
      }
      else {
        int v2 = v5 + 13;
      }
      int v11 = (v4 << 8) + 20480;
      return v11 | v2 | 0x2000000u;
    }

    if (a1 > 0xFFFD22F3)
    {
      unsigned int v8 = (-10513 - a1) / 0xF3u;
      unsigned int v9 = (-10513 - a1) % 0xF3u;
      if (v9)
      {
        LOWORD(v8) = v8 + 1;
        unsigned int v10 = 243 - v9;
      }

      else
      {
        unsigned int v10 = 0;
      }

      if (v10 < 0x14) {
        unsigned int v7 = byte_180A25FE5[v10];
      }
      else {
        unsigned int v7 = v10 + 13;
      }
      __int16 v23 = v8 - 243 * v22;
      unsigned __int16 v24 = 243 - v23;
      BOOL v25 = v23 == 0;
      if (v23) {
        int v26 = ~v22;
      }
      else {
        int v26 = -v22;
      }
      if (v25) {
        unsigned __int16 v27 = 0;
      }
      else {
        unsigned __int16 v27 = v24;
      }
      if (v27 < 0x14u) {
        int v21 = byte_180A25FE5[v27];
      }
      else {
        int v21 = v27 + 13;
      }
      int v37 = (v26 << 16) + 2424832;
      return v37 | v7 | (v21 << 8) | 0x3000000;
    }

    unsigned int v16 = (-187660 - a1) % 0xF3u;
    if (v16) {
      unsigned int v17 = (-187660 - a1) / 0xF3u + 1;
    }
    else {
      unsigned int v17 = (-187660 - a1) / 0xF3u;
    }
    if (v16) {
      unsigned int v18 = 243 - v16;
    }
    else {
      unsigned int v18 = 0;
    }
    if (v18 < 0x14) {
      unsigned int v19 = byte_180A25FE5[v18];
    }
    else {
      unsigned int v19 = v18 + 13;
    }
    unsigned int v30 = v17 / 0xF3;
    unsigned int v31 = v17 % 0xF3;
    unsigned int v32 = 243 - v31;
    BOOL v33 = v31 == 0;
    if (v31) {
      int v34 = ~v30;
    }
    else {
      int v34 = -v30;
    }
    if (v33) {
      unsigned int v35 = 0;
    }
    else {
      unsigned int v35 = v32;
    }
    if (v35 < 0x14) {
      unsigned int v36 = byte_180A25FE5[v35];
    }
    else {
      unsigned int v36 = v35 + 13;
    }
    unsigned int v40 = v36 << 8;
    if (v34 < -223) {
      int v41 = byte_180A25FE5[v34 + 243];
    }
    else {
      int v41 = v34 + 256;
    }
    return v19 | v40 | (v41 << 16) | 0x21000000;
  }

  else
  {
    if (a1 <= 10512)
    {
      int v1 = (__int16)(a1 - 64) % 243;
      if (v1 < 20) {
        int v2 = byte_180A25FE5[(__int16)(a1 - 64) % 243];
      }
      else {
        int v2 = (unsigned __int16)(v1 + 13);
      }
      int v11 = ((unsigned __int16)((__int16)(a1 - 64) / 243) << 8) + 53248;
      return v11 | v2 | 0x2000000u;
    }

    if (a1 <= 0x2DD0B)
    {
      unsigned int v6 = (a1 - 10513) % 0xF3u;
      if (v6 < 0x14) {
        unsigned int v7 = byte_180A25FE5[v6];
      }
      else {
        unsigned int v7 = v6 + 13;
      }
      if (v20 < 0x14) {
        int v21 = byte_180A25FE5[v20];
      }
      else {
        int v21 = v20 + 13;
      }
      int v37 = (((a1 - 10513) / 0xE6A9u) << 16) + 16449536;
      return v37 | v7 | (v21 << 8) | 0x3000000;
    }

    unsigned int v13 = a1 - 187660;
    unsigned int v14 = (a1 - 187660) % 0xF3u;
    if (v14 < 0x14) {
      unsigned int v15 = byte_180A25FE5[v14];
    }
    else {
      unsigned int v15 = v14 + 13;
    }
    unsigned int v28 = (a1 - 187660) / 0xF3u - 243 * ((17674763 * (unint64_t)((a1 - 187660) / 0xF3u)) >> 32);
    if (v28 < 0x14) {
      unsigned int v29 = byte_180A25FE5[v28];
    }
    else {
      unsigned int v29 = v28 + 13;
    }
    unsigned int v38 = v13 / 0xE6A9;
    if (v13 < 0x120534) {
      unsigned int v39 = byte_180A25FE5[v38];
    }
    else {
      unsigned int v39 = v38 + 13;
    }
    return v15 | (v29 << 8) | (v39 << 16) | 0xFE000000;
  }

uint64_t ucnv_getDisplayName(uint64_t a1, char *a2, UChar *a3, int a4, int *a5)
{
  int v17 = 0;
  if (!a5 || *a5 > 0) {
    return 0LL;
  }
  if (!a1 || a4 < 0 || !a3 && a4)
  {
    uint64_t result = 0LL;
    *a5 = 1;
    return result;
  }

  uint64_t v10 = ures_open(0LL, a2, a5);
  if (*a5 > 0) {
    return 0LL;
  }
  uint64_t v11 = v10;
  unsigned int v18 = 0;
  StringByKey = ures_getStringByKey( v10,  (const char *)(*(void *)(*(void *)(a1 + 48) + 16LL) + 4LL),  (int *)&v18,  &v17);
  ures_close(v11);
  if (v17 <= 0)
  {
    if (!*a5) {
      *a5 = v17;
    }
    int v16 = uprv_min(v18, a4);
    u_memcpy(a3, StringByKey, 2 * v16);
  }

  else
  {
    unsigned int v13 = (const char *)(*(void *)(*(void *)(a1 + 48) + 16LL) + 4LL);
    size_t v14 = strlen(v13);
    unsigned int v18 = v14;
    int32_t v15 = uprv_min(v14, a4);
    u_charsToUChars(v13, a3, v15);
  }

  return u_terminateUChars((uint64_t)a3, a4, v18, a5);
}

void sub_1808353F0(void *a1, uint64_t a2, UErrorCode *a3)
{
  if (*(_BYTE *)(a2 + 8))
  {
    sub_18082835C("GBK", a3);
  }

  else
  {
    unsigned __int16 v5 = ucnv_open("GBK", a3);
    if (*(int *)a3 <= 0)
    {
      unsigned int v6 = v5;
      a1[9] = 0LL;
      a1[10] = 0LL;
      unsigned int v7 = uprv_calloc(1LL, 24LL);
      a1[2] = v7;
      if (v7)
      {
        *unsigned int v7 = v6;
      }

      else
      {
        ucnv_close(v6);
        *a3 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
  }

void sub_18083548C(uint64_t a1)
{
  int v1 = *(void ***)(a1 + 16);
  if (v1)
  {
    ucnv_close(*v1);
    if (!*(_BYTE *)(a1 + 62)) {
      uprv_free(*(void **)(a1 + 16));
    }
    *(void *)(a1 + 16) = 0LL;
  }

void *sub_1808354CC(void *result, int a2)
{
  if (a2 >= 2)
  {
    uint64_t v2 = result[2];
LABEL_7:
    result[10] = 0LL;
    if (v2)
    {
      *(_BYTE *)(v2 + 18) = 0;
      *(void *)(v2 + 8) = 0LL;
      *(_BYTE *)(v2 + 16) = 0;
    }

    return result;
  }

  result[9] = 0LL;
  uint64_t v2 = result[2];
  if (v2)
  {
    *(_BYTE *)(v2 + 17) = 0;
    *(_BYTE *)(v2 + 19) = 0;
  }

  if (a2 != 1) {
    goto LABEL_7;
  }
  return result;
}

void *sub_180835510(void *result, int *a2)
{
  uint64_t v2 = result;
  __int16 v22 = 0;
  unint64_t v4 = result[3];
  unsigned int v3 = (_WORD *)result[4];
  unsigned __int16 v5 = (unsigned __int8 *)result[2];
  uint64_t v6 = result[1];
  unsigned int v7 = *(_BYTE **)(v6 + 16);
  while (2)
  {
    unint64_t v8 = v2[5];
    int v9 = (int)v5;
    uint64_t v10 = v5;
    while (1)
    {
      if ((unint64_t)v3 >= v8)
      {
        *a2 = 15;
        goto LABEL_40;
      }

      uint64_t v11 = v10;
      unsigned int v13 = *v10++;
      unint64_t v12 = v13;
      if (*(_DWORD *)(v6 + 76) == 126) {
        break;
      }
      if (!v7[17])
      {
        if ((_DWORD)v12 == 126)
        {
LABEL_15:
          *(_DWORD *)(v6 + 76) = 126;
          goto LABEL_19;
        }

        v7[19] = 0;
        if ((v12 & 0x80) == 0)
        {
          uint64_t result = (void *)v12;
          goto LABEL_31;
        }

        *a2 = 12;
        goto LABEL_56;
      }

      int v14 = *(_DWORD *)(v6 + 72);
      if (v14)
      {
        unsigned int v15 = v12 - 33;
        if ((v14 - 33) > 0x5Cu || v15 >= 0x5E)
        {
          *(_DWORD *)(v6 + 72) = 0;
          *a2 = 12;
          if (v15 >= 0x5E)
          {
            LOWORD(v12) = v12 | (v14 << 8);
            goto LABEL_59;
          }

          LOBYTE(v12) = v14;
        }

        else
        {
          int v21 = a2;
          LOBYTE(v22) = v14 ^ 0x80;
          HIBYTE(v22) = v12 ^ 0x80;
          uint64_t result = (void *)sub_18083932C(*(void *)(*(void *)v7 + 48LL), (uint64_t)&v22, 2);
          uint64_t v6 = v2[1];
          *(_DWORD *)(v6 + 72) = 0;
          if ((int)result <= 65533)
          {
            a2 = v21;
LABEL_31:
            uint64_t v17 = v2[6];
            if (v17) {
              *(_DWORD *)(v17 + 2LL * ((void)v3 - v2[4])) = v9 - ((char)v7[17] + *((_DWORD *)v2 + 4));
            }
            *unsigned int v3 = (_WORD)result;
            goto LABEL_34;
          }

          LODWORD(v12) = v12 & 0xFFFF00FF | (v14 << 8);
          if ((_DWORD)result == 65534) {
            int v20 = 10;
          }
          else {
            int v20 = 12;
          }
          *int v21 = v20;
          if (v12 >= 0x100)
          {
LABEL_59:
            *(_BYTE *)(v6 + 65) = BYTE1(v12);
            *(_BYTE *)(v2[1] + 66LL) = v12;
            uint64_t v18 = v2[1];
            goto LABEL_38;
          }

uint64_t sub_180835834(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(_DWORD *)(a1 + 40) - v5;
  uint64_t result = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = v4 - result;
  unint64_t v10 = (unint64_t)v9 >> 1;
  uint64_t v11 = *(_BYTE **)(v8 + 16);
  LOBYTE(v12) = v11[18];
  LODWORD(v13) = *(_DWORD *)(v8 + 84);
  if ((_DWORD)v13) {
    BOOL v14 = v6 <= 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    LODWORD(v45) = 0;
    LODWORD(v46) = 0;
    uint64_t result = 0LL;
    goto LABEL_65;
  }

  if ((int)v10 < 1)
  {
    LODWORD(v45) = 0;
    LODWORD(v15) = 0;
    goto LABEL_76;
  }

  uint64_t v15 = 0LL;
  LODWORD(v45) = 0;
  uint64_t v16 = *(_DWORD **)(a1 + 48);
  uint64_t v17 = (int)(v9 >> 1);
  char v18 = v11[18];
  while (2)
  {
    uint64_t v19 = (int)v45;
    uint64_t v46 = v15;
    while (1)
    {
      unsigned int v55 = 0xFFFF;
      if ((int)v46 >= v6)
      {
        *a2 = 15;
        LODWORD(v45) = v19;
        goto LABEL_75;
      }

      uint64_t v45 = v19 + 1;
      uint64_t v13 = *(unsigned __int16 *)(result + 2 * v19);
      if ((_DWORD)v13 != 126) {
        break;
      }
      uint64_t v20 = 0LL;
      do
      {
        char v21 = asc_180A410C4[v20];
        if ((int)v46 >= v6)
        {
          uint64_t v22 = *(void *)(a1 + 8);
          uint64_t v23 = *(char *)(v22 + 91);
          *(_BYTE *)(v22 + 9icu::UVector32::~UVector32(this + 1) = v23 + 1;
          *(_BYTE *)(v22 + v23 + 104) = v21;
          *a2 = 15;
        }

        else
        {
          *(_BYTE *)(*(void *)(a1 + 32) + (int)v46) = v21;
          if (*(void *)(a1 + 48)) {
            *v16++ = v19;
          }
          uint64_t v46 = (v46 + 1);
        }

        ++v20;
      }

      while ((_DWORD)v20 != 2);
      ++v19;
      if (v45 >= v17) {
        goto LABEL_75;
      }
    }

    unint64_t v54 = v10;
    unsigned int v24 = *(unsigned __int16 *)(result + 2 * v19);
    if (v13 >= 0x80)
    {
      uint64_t v50 = v17;
      uint64_t v51 = result;
      uint64_t v52 = v5;
      unint64_t v53 = v11;
      char v49 = v18;
      int v25 = sub_18083AB3C(*(void *)(*(void *)v11 + 48LL), v13, (int *)&v55, *(char *)(*(void *)(a1 + 8) + 63LL));
      char v18 = v49;
      uint64_t v5 = v52;
      uint64_t v11 = v53;
      BOOL v26 = v25 == 2;
      uint64_t v17 = v50;
      uint64_t result = v51;
      if (!v26 || (((_WORD)v55 + 24159) & 0xFFFEu) > 0x5C5D || (((_BYTE)v55 + 95) & 0xFEu) > 0x5D) {
        break;
      }
      unsigned int v24 = v55 - 32896;
    }

    unsigned int v55 = v24;
    if (v24 != 0xFFFF)
    {
      int v12 = v24 > 0xFF;
      v11[18] = v12;
      if (v12 == v18 && v11[16])
      {
        unint64_t v10 = v54;
      }

      else
      {
        if (v24 <= 0xFF)
        {
          uint64_t v31 = 0LL;
          unint64_t v10 = v54;
          do
          {
            char v32 = asc_180A410C7[v31];
            if ((int)v46 >= v6)
            {
              uint64_t v33 = *(void *)(a1 + 8);
              uint64_t v34 = *(char *)(v33 + 91);
              *(_BYTE *)(v33 + 9icu::UVector32::~UVector32(this + 1) = v34 + 1;
              *(_BYTE *)(v33 + v34 + 104) = v32;
              *a2 = 15;
            }

            else
            {
              *(_BYTE *)(*(void *)(a1 + 32) + (int)v46) = v32;
              if (*(void *)(a1 + 48)) {
                *v16++ = v19;
              }
              uint64_t v46 = (v46 + 1);
            }

            ++v31;
          }

          while ((_DWORD)v31 != 2);
        }

        else
        {
          uint64_t v27 = 0LL;
          unint64_t v10 = v54;
          do
          {
            char v28 = asc_180A410CA[v27];
            if ((int)v46 >= v6)
            {
              uint64_t v29 = *(void *)(a1 + 8);
              uint64_t v30 = *(char *)(v29 + 91);
              *(_BYTE *)(v29 + 9icu::UVector32::~UVector32(this + 1) = v30 + 1;
              *(_BYTE *)(v29 + v30 + 104) = v28;
              *a2 = 15;
            }

            else
            {
              *(_BYTE *)(*(void *)(a1 + 32) + (int)v46) = v28;
              if (*(void *)(a1 + 48)) {
                *v16++ = v19;
              }
              uint64_t v46 = (v46 + 1);
            }

            ++v27;
          }

          while ((_DWORD)v27 != 2);
        }

        v11[16] = 1;
      }

      char v35 = v55;
      if (v24 < 0x100)
      {
        if ((int)v46 < v6)
        {
          uint64_t v15 = (v46 + 1);
          *(_BYTE *)(v5 + (int)v46) = v55;
          if (v16) {
            *v16++ = v19;
          }
          goto LABEL_63;
        }

        uint64_t v41 = *(void *)(a1 + 8);
        uint64_t v42 = *(char *)(v41 + 91);
        *(_BYTE *)(v41 + 9icu::UVector32::~UVector32(this + 1) = v42 + 1;
        *(_BYTE *)(v41 + v42 + 104) = v35;
      }

      else
      {
        unsigned int v36 = v55 >> 8;
        if ((int)v46 < v6)
        {
          uint64_t v15 = (int)v46 + 1LL;
          *(_BYTE *)(v5 + (int)v46) = BYTE1(v55);
          if (v16)
          {
            _DWORD *v16 = v19;
            char v35 = v55;
            if ((int)v15 < v6)
            {
              *(_BYTE *)(v5 + v15) = v55;
              uint64_t v15 = (v46 + 2);
              v16[1] = v19;
              v16 += 2;
              goto LABEL_63;
            }

            ++v16;
          }

          else
          {
            if ((int)v15 < v6)
            {
              uint64_t v16 = 0LL;
              *(_BYTE *)(v5 + v15) = v35;
              uint64_t v15 = (v46 + 2);
              goto LABEL_63;
            }

            uint64_t v16 = 0LL;
          }

          uint64_t v43 = *(void *)(a1 + 8);
          uint64_t v44 = *(char *)(v43 + 91);
          *(_BYTE *)(v43 + 9icu::UVector32::~UVector32(this + 1) = v44 + 1;
          *(_BYTE *)(v43 + v44 + 104) = v35;
          *a2 = 15;
LABEL_63:
          unsigned int v55 = 0xFFFF;
          char v18 = v12;
          goto LABEL_76;
        }

        uint64_t v37 = *(void *)(a1 + 8);
        uint64_t v38 = *(char *)(v37 + 91);
        *(_BYTE *)(v37 + 9icu::UVector32::~UVector32(this + 1) = v38 + 1;
        *(_BYTE *)(v37 + v38 + 104) = v36;
        LOBYTE(v37) = v55;
        uint64_t v39 = *(void *)(a1 + 8);
        uint64_t v40 = *(char *)(v39 + 91);
        *(_BYTE *)(v39 + 9icu::UVector32::~UVector32(this + 1) = v40 + 1;
        *(_BYTE *)(v39 + v40 + 104) = v37;
      }

      *a2 = 15;
      uint64_t v15 = v46;
      goto LABEL_63;
    }

    break;
  }

  if ((v13 & 0xF800) == 0xD800)
  {
    if ((v13 & 0x400) == 0)
    {
      uint64_t v8 = *(void *)(a1 + 8);
      *(_DWORD *)(v8 + 84) = v13;
      uint64_t result = v13;
      LOBYTE(v12) = v18;
      LODWORD(v10) = v54;
LABEL_65:
      if ((int)v45 >= (int)v10)
      {
        int v48 = 0;
      }

      else
      {
        int v47 = *(unsigned __int16 *)(*(void *)(a1 + 16) + 2LL * (int)v45);
        if ((v47 & 0xFC00) == 0xDC00)
        {
          LODWORD(v45) = v45 + 1;
          LODWORD(v13) = v47 + ((_DWORD)v13 << 10) - 56613888;
          *(_DWORD *)(v8 + 84) = 0;
          int v48 = 10;
LABEL_73:
          char v18 = v12;
          goto LABEL_74;
        }

        int v48 = 12;
      }

      LODWORD(v13) = result;
      goto LABEL_73;
    }

    int v48 = 12;
  }

  else
  {
    int v48 = 10;
  }

void *sub_180835D04(void *a1, int a2, int *a3)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = *(void *)(v3 + 16);
  int v7 = 0;
  uint64_t v5 = &v7;
  if (*(_BYTE *)(v4 + 18))
  {
    LOWORD(v7) = 32126;
    uint64_t v5 = (int *)((char *)&v7 + 2);
    *(_BYTE *)(v4 + 18) = 0;
  }

  *(_BYTE *)uint64_t v5 = **(_BYTE **)(v3 + 40);
  return ucnv_cbFromUWriteBytes(a1, (char *)&v7, v5 - (&vars0 - 4) + 1, a2, a3);
}

uint64_t sub_180835D6C(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  if (*a4 > 0) {
    return 0LL;
  }
  if (*a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = *(__int128 **)(a1 + 16);
    __int128 v6 = *v5;
    *(void *)(a2 + 592) = *((void *)v5 + 2);
    *(_OWORD *)(a2 + 576) = v6;
    *(void *)(a2 + 16) = a2 + 576;
    *(_BYTE *)(a2 + 62) = 1;
    int v8 = 288;
    **(void **)(a2 + 16) = ucnv_safeClone( **(void (****)(void, void, void, void, void, void, void))(a1 + 16),  a2 + 288,  &v8,  a4);
  }

  else
  {
    uint64_t v4 = 0LL;
    *a3 = 600;
  }

  return v4;
}

uint64_t sub_180835E08(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4)
{
  return sub_180837E60(*(void *)(**(void **)(a1 + 16) + 48LL), a2, a3, 5, a4);
}

void sub_180835E68(uint64_t a1, uint64_t a2, int *a3)
{
  if (!*(_BYTE *)(a2 + 8))
  {
    __int128 v6 = (char *)uprv_malloc(0x30uLL);
    *(void *)(a1 + 16) = v6;
    if (v6)
    {
      *(_DWORD *)__int128 v6 = 65534;
      *(_DWORD *)(a1 + 72) = 0xFFFF;
      v6[25] = 0;
      int v7 = *(_DWORD *)(a2 + 12);
      if ((v7 & 0xFu) <= 8)
      {
        int v8 = &dword_180A260D0[3 * (v7 & 0xF)];
        __int16 v9 = *(_WORD *)v8;
        *(void *)(v6 + 26) = *(void *)"ISCII,version=";
        unint64_t v10 = v6 + 26;
        v9 <<= 7;
        *((_WORD *)v6 + 2) = v9;
        *((_WORD *)v6 + 4) = v9;
        *((_WORD *)v6 + 3) = v9;
        LODWORD(v8) = v8[1];
        *((_DWORD *)v6 + 5) = (_DWORD)v8;
        *((_DWORD *)v6 + 4) = (_DWORD)v8;
        *((_DWORD *)v6 + 3) = (_DWORD)v8;
        v6[24] = 1;
        strcpy(v6 + 33, "ersion=");
        int v11 = strlen(v6 + 26);
        v10[v11] = v7 & 0xF | 0x30;
        v10[v11 + 1] = 0;
        *(_DWORD *)(v10 + 18) = 0;
        return;
      }

      uprv_free(v6);
      *(void *)(a1 + 16) = 0LL;
      int v12 = 1;
    }

    else
    {
      int v12 = 7;
    }

    *a3 = v12;
  }

void sub_180835F68(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    if (!*(_BYTE *)(a1 + 62)) {
      uprv_free(v2);
    }
    *(void *)(a1 + 16) = 0LL;
  }

uint64_t sub_180835F9C(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (a2 >= 2)
  {
    int v4 = *(_DWORD *)(v2 + 20);
    __int16 v3 = *(_WORD *)(v2 + 4);
    goto LABEL_5;
  }

  *(void *)(result + 72) = 0xFFFFLL;
  __int16 v3 = *(_WORD *)(v2 + 4);
  *(_WORD *)(v2 + 8) = v3;
  int v4 = *(_DWORD *)(v2 + 20);
  *(_DWORD *)(v2 + 16) = v4;
  *(_WORD *)uint64_t v2 = -2;
  *(_DWORD *)(v2 + 44) = 0;
  if (a2 != 1)
  {
LABEL_5:
    *(_DWORD *)(result + 84) = 0;
    *(_WORD *)(v2 + 2) = 0;
    *(_DWORD *)(v2 + 12) = v4;
    *(_WORD *)(v2 + 6) = v3;
    *(_WORD *)(v2 + 24) = 1;
  }

  return result;
}

uint64_t sub_180835FFC(uint64_t result, int *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (!v2)
  {
    *a2 = 1;
    return result;
  }

  unint64_t v3 = *(void *)(result + 24);
  int v4 = *(__int16 **)(result + 32);
  unint64_t v5 = *(void *)(result + 16);
  __int128 v6 = *(__int16 **)(v2 + 16);
  int v7 = *a2;
  if (*a2 > 0 || v5 >= v3)
  {
    uint64_t v9 = *(void *)(result + 8);
    unint64_t v13 = *(void *)(result + 16);
    goto LABEL_209;
  }

  int v10 = ~*(_DWORD *)(result + 16);
  int v11 = -*(_DWORD *)(result + 16);
  unint64_t v12 = *(void *)(result + 40);
  unint64_t v13 = *(void *)(result + 16);
  while (2)
  {
    uint64_t v14 = 0LL;
    while (1)
    {
      if ((unint64_t)v4 >= v12)
      {
        *a2 = 15;
        goto LABEL_210;
      }

      uint64_t v15 = v14;
      uint64_t v16 = *(unsigned __int8 *)(v13 + v14);
      int v17 = (unsigned __int16)*v6;
      if (v17 != 239) {
        break;
      }
      if ((v16 - 66) <= 9)
      {
        char v18 = (_WORD *)((char *)&unk_180A2613C + 4 * (v16 & 0xF));
        _OWORD v6[4] = *v18 << 7;
        int v19 = (unsigned __int16)v18[1];
LABEL_16:
        *((_DWORD *)v6 + 4) = v19;
        goto LABEL_18;
      }

      if ((_DWORD)v16 == 64)
      {
        _OWORD v6[4] = v6[2];
        int v19 = *((_DWORD *)v6 + 5);
        goto LABEL_16;
      }

      if ((v16 - 33) >= 0x1F)
      {
        *a2 = 12;
        *__int128 v6 = -2;
        goto LABEL_208;
      }

LABEL_113:
          int v32 = word_180A2616C[v16];
          if (v16 >= 0xA1
            && (*((_DWORD *)v6 + 4) & byte_180A263AC[v32 & 0x7F]) == 0
            && ((_DWORD)v16 != 208 || v6[4] != 768))
          {
            int v32 = 0xFFFF;
          }

          __int16 v36 = v16;
        }
      }

      else
      {
        switch((int)v16)
        {
          case 232:
            if (v17 == 232)
            {
              int v32 = 8204;
              goto LABEL_71;
            }

            if (*((_BYTE *)v6 + 16)) {
              int v32 = 2381;
            }
            else {
              int v32 = 0xFFFF;
            }
            __int16 v36 = 232;
            break;
          case 233:
            if (v17 == 232)
            {
              int v32 = 8205;
LABEL_71:
              __int16 v36 = -2;
              break;
            }

            int v42 = (unsigned __int16)v6[4];
            if (v17 != 192 || v42 != 256)
            {
              uint64_t v45 = 0LL;
              while (1)
              {
                uint64_t v46 = (char *)&unk_180A2636C + v45;
                v45 += 4LL;
                if (v45 == 60) {
                  goto LABEL_113;
                }
              }

              int v32 = *((unsigned __int16 *)v46 + 3);
              *__int128 v6 = -2;
              *(_DWORD *)(v2 + 72) = 0xFFFF;
              if (v42 != 256) {
                goto LABEL_169;
              }
              int v47 = *((_DWORD *)v6 + 11);
              if (v47)
              {
                if ((unint64_t)v4 >= v12)
                {
                  uint64_t v75 = *(char *)(v2 + 93);
                  *(_BYTE *)(v2 + 93) = v75 + 1;
                  *(_WORD *)(v2 + 2 * v75 + 144) = v47;
                  int v7 = 15;
                  *a2 = 15;
                }

                else
                {
                  *v4++ = v47;
                  int v48 = *(_DWORD **)(result + 48);
                  if (v48)
                  {
                    *int v48 = v11 + v13 + v15;
                    *(void *)(result + 48) = v48 + 1;
                  }
                }

                *((_DWORD *)v6 + 1icu::UVector32::~UVector32(this + 1) = 0;
              }

              BOOL v76 = (v32 - 2404) >= 2 && (v32 - 8204) >= 2;
              __int16 v24 = v32 + 256;
              if (!v76) {
                __int16 v24 = v32;
              }
              *v4++ = v24;
              int v25 = *(_DWORD **)(result + 48);
              if (v25)
              {
                int v26 = v10 + v13 + v15;
LABEL_39:
                *int v25 = v26;
                *(void *)(result + 48) = v25 + 1;
              }

        a2[2] = v24;
LABEL_114:
        *(void *)(v5 + 32) = v64;
        return result;
      }

      uint64_t v16 = *(_DWORD *)(v5 + 40) - (_DWORD)v64;
    }

    uint64_t v23 = 1;
    int v34 = *v7 ^ 0x80;
    if (v34 <= 0x3F)
    {
      v24 += (unint64_t)(v28 + 2);
      int v33 = *(unsigned __int16 *)(v17 + 2LL * (v61[v29 & 0x1F] + v34));
      if (!*(_WORD *)(v17 + 2LL * (v61[v29 & 0x1F] + v34)))
      {
        uint64_t v14 = v34 | ((v29 & 0x1F) << 6);
        goto LABEL_78;
      }

      goto LABEL_73;
    }

      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)&v68, (const icu::UnicodeString *)v63, v27[18], a3);
      int v27 = (unsigned int *)icu::UVector::elementAt((icu::UVector *)(a1 + 104), v27[22]);
      icu::UnicodeString::~UnicodeString(v54, (icu::UnicodeString *)v63);
LABEL_88:
      int v32 = 0uLL;
    }

    icu::UnicodeString::~UnicodeString(v53, (icu::UnicodeString *)v63);
    unsigned int v55 = icu::CollationDataBuilder::addContextTrie( (icu::CollationDataBuilder *)a1,  v62,  (icu::UCharsTrieBuilder *)&v68,  a3);
    char v56 = *(unsigned int *)a3;
    if ((int)v56 > 0)
    {
      unint64_t v3 = 0LL;
LABEL_132:
      icu::UnicodeString::~UnicodeString((void *)v56, (icu::UnicodeString *)&v64);
      goto LABEL_5;
    }

    if (v55 >= 0x80000)
    {
      unint64_t v3 = 0LL;
      char v56 = 15LL;
      *a3 = U_BUFFER_OVERFLOW_ERROR;
      goto LABEL_132;
    }

    unint64_t v3 = v28 | (v55 << 13) | 0xC9u;
    a2 = v60;
    __int16 v24 = v61;
LABEL_118:
    *(_DWORD *)(a2 + 76) = v3;
    if (!v24)
    {
      char v56 = *(unsigned int *)(v14 + 88);
      if ((v56 & 0x80000000) != 0) {
        goto LABEL_132;
      }
LABEL_125:
      icu::UnicodeString::~UnicodeString((void *)v56, (icu::UnicodeString *)&v64);
      a2 = icu::UVector::elementAt((icu::UVector *)(a1 + 104), *(_DWORD *)(v14 + 88));
      continue;
    }

    break;
  }

  icu::UnicodeString::doReplace((uint64_t)&v64, 0LL, 1LL, 0LL, 0, 0LL);
  if ((SWORD4(v64) & 0x8000u) == 0) {
    uint64_t v57 = WORD4(v64) >> 5;
  }
  else {
    uint64_t v57 = HIDWORD(v64);
  }
  icu::UnicodeString::doReverse((icu::UnicodeString *)&v64, 0, v57);
  icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v75, (const icu::UnicodeString *)&v64, v3, a3);
  char v56 = *(unsigned int *)(v14 + 88);
  if ((v56 & 0x80000000) == 0) {
    goto LABEL_125;
  }
  icu::UnicodeString::~UnicodeString((void *)v56, (icu::UnicodeString *)&v64);
  int v58 = icu::CollationDataBuilder::addContextTrie( (icu::CollationDataBuilder *)a1,  *(_DWORD *)(v59 + 76),  (icu::UCharsTrieBuilder *)v75,  a3);
  if (*(int *)a3 > 0)
  {
LABEL_4:
    unint64_t v3 = 0LL;
    goto LABEL_5;
  }

  if (v58 < 0x80000)
  {
    unint64_t v3 = (v58 << 13) | 0xC8u;
  }

  else
  {
    unint64_t v3 = 0LL;
    *a3 = U_BUFFER_OVERFLOW_ERROR;
  }

LABEL_172:
              v13 += v15 + 1;
              if (v7 > 0 || v13 >= v3)
              {
LABEL_203:
                uint64_t v9 = v2;
LABEL_209:
                if (v7 <= 0 && *(_BYTE *)(result + 2) && v13 == v3)
                {
                  int v79 = (unsigned __int16)*v6;
                  if ((v79 - 217) > 0x17 || ((1 << (v79 + 39)) & 0xC00001) == 0)
                  {
                    *(_BYTE *)(v9 + 64) = 0;
                  }

                  else
                  {
                    *(_BYTE *)(v9 + 65) = v79;
                    *(_BYTE *)(v9 + 64) = 1;
                    *__int128 v6 = -2;
                  }

                  int v81 = *(_DWORD *)(v2 + 72);
                  if (v81 != 0xFFFF)
                  {
                    if ((unint64_t)v4 >= *(void *)(result + 40))
                    {
                      uint64_t v83 = *(void *)(result + 8);
                      uint64_t v84 = *(char *)(v83 + 93);
                      *(_BYTE *)(v83 + 93) = v84 + 1;
                      *(_WORD *)(v83 + 2 * v84 + 144) = v81;
                      *a2 = 15;
                    }

                    else
                    {
                      *v4++ = v81;
                      uint64_t v82 = *(_DWORD **)(result + 48);
                      if (v82)
                      {
                        *uint64_t v82 = ~*(_DWORD *)(result + 16) + v3;
                        *(void *)(result + 48) = v82 + 1;
                      }
                    }

                    *(_DWORD *)(v2 + 72) = 0xFFFF;
                  }
                }

                goto LABEL_210;
              }

              continue;
            }

            int v43 = *((_DWORD *)v6 + 11);
            if (v43)
            {
              if ((unint64_t)v4 >= v12)
              {
                uint64_t v67 = *(char *)(v2 + 93);
                *(_BYTE *)(v2 + 93) = v67 + 1;
                *(_WORD *)(v2 + 2 * v67 + 144) = v43;
                int v7 = 15;
                *a2 = 15;
              }

              else
              {
                *v4++ = v43;
                uint64_t v44 = *(_DWORD **)(result + 48);
                if (v44)
                {
                  *uint64_t v44 = v11 + v13 + v15;
                  *(void *)(result + 48) = v44 + 1;
                }
              }

              *((_DWORD *)v6 + 1icu::UVector32::~UVector32(this + 1) = 0;
            }

            if ((unint64_t)v4 >= v12)
            {
              uint64_t v72 = *(char *)(v2 + 93);
              *(_BYTE *)(v2 + 93) = v72 + 1;
              *(_WORD *)(v2 + 2 * v72 + 144) = 2652;
              int v7 = 15;
              *a2 = 15;
              uint64_t v68 = v4;
            }

            else
            {
              *int v4 = 2652;
              uint64_t v68 = v4 + 1;
              uint64_t v69 = *(_DWORD **)(result + 48);
              if (v69)
              {
                *uint64_t v69 = v10 + v13 + v15;
                *(void *)(result + 48) = v69 + 1;
              }

              if (v7 <= 0)
              {
                if ((unint64_t)v68 >= v12)
                {
                  uint64_t v74 = *(char *)(v2 + 93);
                  *(_WORD *)(v2 + 144 + 2 * v74) = 2637;
                  int v7 = 15;
                  *a2 = 15;
                  *(_BYTE *)(v2 + 93) = v74 + 2;
                  *(_WORD *)(v2 + 144 + 2LL * (char)(v74 + uhash_close(*((_BYTE **)this + 1)) = 2617;
                }

                else
                {
                  v4[1] = 2637;
                  uint64_t v70 = *(_DWORD **)(result + 48);
                  if (v70)
                  {
                    *uint64_t v70 = v10 + v13 + v15;
                    *(void *)(result + 48) = v70 + 1;
                  }

                  uint64_t v68 = v4 + 2;
                  if ((unint64_t)(v4 + 2) >= v12)
                  {
                    uint64_t v77 = *(char *)(v2 + 93);
                    *(_BYTE *)(v2 + 93) = v77 + 1;
                    *(_WORD *)(v2 + 2 * v77 + 144) = 2617;
                    int v7 = 15;
                    *a2 = 15;
                  }

                  else
                  {
                    uint64_t v68 = v4 + 3;
                    v4[2] = 2617;
                    uint64_t v71 = *(_DWORD **)(result + 48);
                    if (v71)
                    {
                      *uint64_t v71 = v10 + v13 + v15;
                      *(void *)(result + 48) = v71 + 1;
                    }
                  }
                }

                goto LABEL_189;
              }
            }

            uint64_t v73 = *(char *)(v2 + 93);
            *(_WORD *)(v2 + 144 + 2 * v73) = 2637;
            *(_BYTE *)(v2 + 93) = v73 + 2;
            *(_WORD *)(v2 + 144 + 2LL * (char)(v73 + uhash_close(*((_BYTE **)this + 1)) = 2617;
LABEL_189:
            *(_DWORD *)(v2 + 72) = 0xFFFF;
            *__int128 v6 = -2;
            int v4 = v68;
            goto LABEL_172;
          case 234:
            if (v17 == 234)
            {
              int v32 = 2405;
              goto LABEL_74;
            }

            if ((v6[8] & 0x80) != 0) {
              int v32 = 2404;
            }
            else {
              int v32 = 0xFFFF;
            }
            __int16 v36 = 234;
            break;
          case 235:
          case 236:
          case 237:
          case 238:
            goto LABEL_113;
          case 239:
          case 240:
            goto LABEL_59;
          default:
            if ((_DWORD)v16 != 224) {
              goto LABEL_113;
            }
            int v37 = v17;
            int v38 = *((_DWORD *)v6 + 4);
            if (v37 == 164 && (v38 & 0x80) != 0)
            {
              int v32 = 2308;
LABEL_74:
              *__int128 v6 = -2;
              goto LABEL_170;
            }

            if ((v38 & 0x87) != 0) {
              int v32 = 2374;
            }
            else {
              int v32 = 0xFFFF;
            }
            __int16 v36 = 224;
            break;
        }
      }

      *__int128 v6 = v36;
      int v50 = *(_DWORD *)(v2 + 72);
      if (v50 == 0xFFFF) {
        goto LABEL_169;
      }
      int v51 = (unsigned __int16)v6[4];
      int v52 = *((_DWORD *)v6 + 11);
      if (v51 != 256 || (v52 - 2560) > 0x4F)
      {
        if (!v52) {
          goto LABEL_139;
        }
        goto LABEL_134;
      }

      if (v50 != 2381 || ((byte_180A2642C[v52 - 2560] & 1) != 0 ? (BOOL v53 = v32 + 256 == v52) : (BOOL v53 = 0), !v53))
      {
LABEL_134:
        if ((unint64_t)v4 >= v12)
        {
          uint64_t v57 = *(char *)(v2 + 93);
          *(_BYTE *)(v2 + 93) = v57 + 1;
          *(_WORD *)(v2 + 2 * v57 + 144) = v52;
          int v7 = 15;
          *a2 = 15;
        }

        else
        {
          *v4++ = v52;
          char v56 = *(_DWORD **)(result + 48);
          if (v56)
          {
            *char v56 = v11 + v13 + v15;
            *(void *)(result + 48) = v56 + 1;
          }
        }

        *((_DWORD *)v6 + 1icu::UVector32::~UVector32(this + 1) = 0;
LABEL_139:
        if (v51 == 256 && v32 == 2306)
        {
          int v58 = *(_DWORD *)(v2 + 72);
          if ((v58 - 2384) >= 0xFFFFFFB0 && byte_180A2642C[v58 - 2304] >= 2u)
          {
            __int16 v59 = v58 + 256;
            if ((unint64_t)v4 >= v12)
            {
              uint64_t v66 = *(char *)(v2 + 93);
              *(_BYTE *)(v2 + 93) = v66 + 1;
              *(_WORD *)(v2 + 2 * v66 + 144) = v59;
              int v7 = 15;
              *a2 = 15;
            }

            else
            {
              *v4++ = v59;
              char v60 = *(_DWORD **)(result + 48);
              if (v60)
              {
                *char v60 = v10 + v13 + v15;
                *(void *)(result + 48) = v60 + 1;
              }
            }

            int v32 = 2416;
            goto LABEL_168;
          }
        }

        else
        {
          int v58 = *(_DWORD *)(v2 + 72);
          if (v51 == 256
            && v32 == 2381
            && (v58 - 2384) >= 0xFFFFFFB0
            && (byte_180A2642C[v58 - 2304] & 1) != 0)
          {
            *((_DWORD *)v6 + 1icu::UVector32::~UVector32(this + 1) = v58 + 256;
            int v32 = 2381;
LABEL_168:
            *(_DWORD *)(v2 + 72) = 0xFFFF;
LABEL_169:
            if (v32 == 0xFFFF) {
              goto LABEL_205;
            }
LABEL_170:
            *(_DWORD *)(v2 + 72) = v32;
            if (*((_BYTE *)v6 + 25))
            {
              _OWORD v6[4] = v6[2];
              *((_DWORD *)v6 + 4) = *((_DWORD *)v6 + 5);
              *((_BYTE *)v6 + 25) = 0;
            }

            goto LABEL_172;
          }
        }

        if (v58 >= 161 && (v58 - 2404) >= 2 && (v58 - 8204) >= 2)
        {
          v58 += v51;
          *(_DWORD *)(v2 + 72) = v58;
        }

        if ((unint64_t)v4 >= v12)
        {
          uint64_t v62 = *(char *)(v2 + 93);
          *(_BYTE *)(v2 + 93) = v62 + 1;
          *(_WORD *)(v2 + 2 * v62 + 144) = v58;
          int v7 = 15;
          *a2 = 15;
        }

        else
        {
          *v4++ = v58;
          int v61 = *(_DWORD **)(result + 48);
          if (v61)
          {
            *int v61 = v10 + v13 + v15;
            *(void *)(result + 48) = v61 + 1;
          }
        }

        goto LABEL_168;
      }

      int v54 = -2 - v5 + v13 + v15;
      if ((unint64_t)v4 >= v12)
      {
        uint64_t v63 = *(char *)(v2 + 93);
        *(_BYTE *)(v2 + 93) = v63 + 1;
        *(_WORD *)(v2 + 2 * v63 + 144) = 2673;
        int v7 = 15;
        *a2 = 15;
      }

      else
      {
        *v4++ = 2673;
        unsigned int v55 = *(_DWORD **)(result + 48);
        if (v55)
        {
          *unsigned int v55 = v54;
          *(void *)(result + 48) = v55 + 1;
          int v52 = *((_DWORD *)v6 + 11);
        }
      }

      if ((unint64_t)v4 >= v12)
      {
        uint64_t v65 = *(char *)(v2 + 93);
        *(_BYTE *)(v2 + 93) = v65 + 1;
        *(_WORD *)(v2 + 2 * v65 + 144) = v52;
        int v7 = 15;
        *a2 = 15;
      }

      else
      {
        *v4++ = v52;
        uint64_t v64 = *(_DWORD **)(result + 48);
        if (v64)
        {
          *uint64_t v64 = v54;
          *(void *)(result + 48) = v64 + 1;
        }
      }

      *((_DWORD *)v6 + 1icu::UVector32::~UVector32(this + 1) = 0;
LABEL_164:
      *(_DWORD *)(v2 + 72) = 0xFFFF;
      goto LABEL_172;
    }

    break;
  }

  if (v17 != 240) {
    goto LABEL_52;
  }
  if ((v16 + 95) > 0x4Du)
  {
    *__int128 v6 = -2;
    int v78 = 12;
LABEL_207:
    *a2 = v78;
LABEL_208:
    *(_BYTE *)(v2 + 65) = v16;
    uint64_t v9 = *(void *)(result + 8);
    *(_BYTE *)(v9 + 64) = 1;
    int v7 = *a2;
    v13 += v15 + 1;
    goto LABEL_209;
  }

  if ((_DWORD)v16 != 191 && (_DWORD)v16 != 184
    || ((_DWORD)v16 != 191 ? (__int16 v20 = 2386) : (__int16 v20 = 2416),
        (_DWORD)v16 != 191 ? (char v21 = 82) : (char v21 = 112),
        (*((_DWORD *)v6 + 4) & byte_180A263AC[v21 & 0xFE]) == 0))
  {
LABEL_205:
    int v78 = 10;
    goto LABEL_207;
  }

  *__int128 v6 = -2;
  int v22 = *((_DWORD *)v6 + 11);
  if (v22)
  {
    *v4++ = v22;
    uint64_t v23 = *(_DWORD **)(result + 48);
    if (v23)
    {
      *uint64_t v23 = v13 - v5 + v15;
      *(void *)(result + 48) = v23 + 1;
    }

    *((_DWORD *)v6 + 1icu::UVector32::~UVector32(this + 1) = 0;
  }

  __int16 v24 = v6[4] + v20;
  if ((unint64_t)v4 < v12)
  {
    *v4++ = v24;
    int v25 = *(_DWORD **)(result + 48);
    if (v25)
    {
      int v26 = ~(_DWORD)v5 + v13 + v15;
      goto LABEL_39;
    }

    goto LABEL_172;
  }

LABEL_229:
  uint64_t v85 = *(char *)(v2 + 93);
  *(_BYTE *)(v2 + 93) = v85 + 1;
  *(_WORD *)(v2 + 2 * v85 + 144) = v24;
  *a2 = 15;
  v13 += v15 + 1;
LABEL_210:
  *(void *)(result + 32) = v4;
  *(void *)(result + 16) = v13;
  return result;
}

void *sub_180836B48(void *result, int *a2)
{
  unint64_t v2 = result[3];
  unint64_t v3 = (_BYTE *)result[4];
  unint64_t v4 = result[5];
  uint64_t v5 = result[1];
  __int128 v6 = (unsigned __int16 *)result[2];
  if (v5) {
    BOOL v7 = v4 >= (unint64_t)v3;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7 || v2 < (unint64_t)v6)
  {
    *a2 = 1;
    return result;
  }

  unsigned int v9 = *(_DWORD *)(v5 + 84);
  if (v9)
  {
    int v10 = (_BYTE *)result[4];
LABEL_11:
    if ((unint64_t)v6 >= v2)
    {
      int v14 = 0;
    }

    else
    {
      int v11 = *v6;
      BOOL v12 = (v11 & 0xFC00) == 56320;
      int v13 = v11 + (v9 << 10) - 56613888;
      if ((v11 & 0xFC00) == 0xDC00) {
        int v14 = 10;
      }
      else {
        int v14 = 12;
      }
      v6 += v12;
      if (v12) {
        unsigned int v9 = v13;
      }
    }

LABEL_119:
    *a2 = v14;
    *(_DWORD *)(result[1] + 84LL) = v9;
    goto LABEL_139;
  }

  uint64_t v15 = *(void *)(v5 + 16);
  int v16 = *(unsigned __int16 *)(v15 + 6) >> 7;
  int v17 = (_DWORD *)result[6];
  while (2)
  {
    uint64_t v18 = 0LL;
    int v19 = v6;
    while (1)
    {
      uint64_t v20 = v18;
      uint64_t v21 = result[1];
      if (*(_DWORD *)(v21 + 80) == 10)
      {
        int v22 = dword_180A260D0[3 * (unsigned __int16)v16 + 2];
        *(_DWORD *)(v21 + 80) = 0;
        __int128 v6 = (unsigned __int16 *)((char *)v19 + v20);
        if ((unint64_t)v3 >= v4)
        {
          uint64_t v49 = *(char *)(v21 + 91);
          *(_BYTE *)(v21 + 9icu::UVector32::~UVector32(this + 1) = v49 + 1;
          *(_BYTE *)(v21 + v49 + 104) = -17;
          uint64_t v50 = result[1];
          uint64_t v51 = *(char *)(v50 + 91);
          *(_BYTE *)(v50 + 9icu::UVector32::~UVector32(this + 1) = v51 + 1;
          *(_BYTE *)(v50 + v51 + 104) = v22;
          *a2 = 15;
          goto LABEL_138;
        }

        uint64_t v23 = result[2];
        *unint64_t v3 = -17;
        int v10 = v3 + 1;
        if (v17)
        {
          int v24 = (((unint64_t)v6 - v23) >> 1) - 1;
          *int v17 = v24;
          _BYTE *v10 = v22;
          v17[1] = v24;
          v17 += 2;
        }

        else
        {
          if ((unint64_t)v10 >= v4)
          {
LABEL_121:
            uint64_t v52 = result[1];
            uint64_t v53 = *(char *)(v52 + 91);
            *(_BYTE *)(v52 + 9icu::UVector32::~UVector32(this + 1) = v53 + 1;
            *(_BYTE *)(v52 + v53 + 104) = v22;
            *a2 = 15;
            __int128 v6 = (unsigned __int16 *)((char *)v19 + v20);
            goto LABEL_139;
          }

          int v17 = 0LL;
          _BYTE *v10 = v22;
        }

        v3 += 2;
        if (*a2 > 0)
        {
          __int128 v6 = (unsigned __int16 *)((char *)v19 + v20);
          goto LABEL_138;
        }
      }

      unsigned int v9 = *(unsigned __int16 *)((char *)v19 + v20);
      if (v9 <= 0xA0)
      {
        uint64_t v25 = result[1];
        *(_DWORD *)(v25 + 80) = v9;
        int v26 = (char *)v19 + v20;
        if ((unint64_t)v3 >= v4)
        {
          uint64_t v54 = *(char *)(v25 + 91);
          *(_BYTE *)(v25 + 9icu::UVector32::~UVector32(this + 1) = v54 + 1;
          *(_BYTE *)(v25 + v54 + 104) = v9;
          *a2 = 15;
          __int128 v6 = (unsigned __int16 *)(v26 + 2);
          goto LABEL_138;
        }

        uint64_t v27 = result[2];
        *v3++ = v9;
        if (v17) {
          *v17++ = ((unint64_t)&v26[-v27 + 2] >> 1) - 1;
        }
        if (*a2 >= 1) {
          goto LABEL_137;
        }
        goto LABEL_37;
      }

      int v28 = *(unsigned __int16 *)(v15 + 2);
      if (v9 != 8204) {
        break;
      }
      *(_WORD *)(v15 + 2) = 0;
      if (v28)
      {
        unsigned int v9 = 8204;
        unsigned int v29 = 232;
        goto LABEL_78;
      }

        if (v31 < v50) {
          return 0xFFFFFFFFLL;
        }
        else {
          return 1LL;
        }
      }

      break;
    }

    int v34 = 0;
    int v19 = v33 == 2;
    unsigned __int16 v33 = 0;
    if (!v19) {
      continue;
    }
    break;
  }

LABEL_136:
  uint64_t v67 = result[1];
  uint64_t v68 = *(char *)(v67 + 91);
  *(_BYTE *)(v67 + 9icu::UVector32::~UVector32(this + 1) = v68 + 1;
  *(_BYTE *)(v67 + v68 + 104) = v29;
  *a2 = 15;
LABEL_137:
  __int128 v6 = (unsigned __int16 *)((char *)v19 + v20 + 2);
LABEL_138:
  int v10 = v3;
LABEL_139:
  result[2] = v6;
  result[4] = v10;
  return result;
}
      }
    }

    uint64_t v69 = 0;
    uint64_t v20 = dest;
    while (1)
    {
      unint64_t v45 = pi;
      int v46 = ++pi;
      uint64_t v47 = src[v45];
      if ((v47 & 0x80) != 0)
      {
        if ((v47 & 0xF0) == 0xE0)
        {
          uint64_t v49 = v45 + 2LL;
          if ((int)v49 < srcLength)
          {
            uint64_t v50 = src[v46];
            if (((a00000000000000[v47 & 0xF] >> (v50 >> 5)) & 1) != 0)
            {
              uint64_t v51 = src[v49] ^ 0x80;
              if (v51 <= 0x3F)
              {
                *v20++ = ((_WORD)v47 << 12) | ((v50 & 0x3F) << 6) | v51;
                uint64_t v52 = v45 + 3;
LABEL_103:
                punint64_t i = v52;
                goto LABEL_85;
              }
            }
          }
        }

        else if ((v47 + 32) >= 0xE2u && (_DWORD)v46 != srcLength)
        {
          uint64_t v54 = src[v46] ^ 0x80;
          if (v54 <= 0x3F)
          {
            *v20++ = ((v47 & 0x1F) << 6) | v54;
            uint64_t v52 = v45 + 2;
            goto LABEL_103;
          }
        }

        if ((subchar >= 0x10000 || v47 >= 0xF0) && !--v19)
        {
          punint64_t i = v45;
          goto LABEL_87;
        }

        unsigned int v55 = utf8_nextCharSafeBody((const uint8_t *)src, &pi, srcLength, v47, -1);
        if ((v55 & 0x80000000) != 0)
        {
          ++v69;
          unsigned int v55 = subchar;
        }

        if (HIWORD(v55))
        {
          *uint64_t v20 = (v55 >> 10) - 10304;
          v20[1] = v55 & 0x3FF | 0xDC00;
          v20 += 2;
        }

        else
        {
          *v20++ = v55;
        }
      }

      else
      {
        *v20++ = v47;
      }

  if (v48) {
    *uint64_t v48 = v26;
  }
  uint64_t v47 = v46 + ((unint64_t)((char *)v20 - (char *)v8) >> 1);
  if (v70) {
    *uint64_t v70 = v47;
  }
  dest = v8;
  destCapacity = v14;
LABEL_141:
  u_terminateUChars((uint64_t)dest, destCapacity, v47, (int *)pErrorCode);
  return v8;
}

    uint64_t v71 = *(_DWORD *)(a1 + 16);
    if (v71 >= 1)
    {
      uint64_t v72 = 0;
      unsigned int v95 = *(_DWORD *)(a1 + 16);
      do
      {
        uint64_t v73 = icu::UVector::elementAt(v9, v72);
        uint64_t v74 = v73;
        uint64_t v75 = *(int *)(a1 + 200);
        *(_DWORD *)(v73 + 1164) = v75;
        __int128 v97 = v72;
        if ((_DWORD)v75)
        {
          BOOL v76 = uprv_malloc(8 * v75);
          *(void *)(v74 + 1152) = v76;
          if (!v76) {
            goto LABEL_165;
          }
          *(_BYTE *)(v74 + 1160) = v72 == 0;
          if (*(int *)(v74 + 1164) >= 1)
          {
            uint64_t v77 = 0LL;
            do
            {
              *(void *)(*(void *)(v74 + 1152) + 8 * v77) = icu::UVector::elementAt((icu::UVector *)(a1 + 192), v77);
              ++v77;
            }

            while (v77 < *(int *)(v74 + 1164));
          }
        }

        else
        {
          *(void *)(v73 + 1152) = 0LL;
        }

        uhash_removeAll(*(void *)(v74 + 1064));
        uint64_t v99 = -1;
        while (1)
        {
          Element = uhash_nextElement(*(uint64_t **)(a1 + 232), (int *)&v99);
          int v79 = Element;
          if (!Element) {
            break;
          }
          int v80 = (*(uint64_t (**)(void))(**(void **)(Element + 8) + 56LL))(*(void *)(Element + 8));
          if (!v80) {
            goto LABEL_165;
          }
          uint64_t v83 = v80;
          uint64_t v84 = *(UChar ***)(v79 + 16);
          uint64_t v85 = *(void *)(v74 + 1064);
          uint64_t v86 = (icu::UnicodeString *)icu::UMemory::operator new(v82, (icu::UMemory *)0x40, v81);
          int v87 = (uint64_t)v86;
          if (v86) {
            icu::UnicodeString::UnicodeString(v86, v84);
          }
          uhash_put(v85, v87, v83, (int *)a4);
        }

        uint64_t v72 = v97 + 1;
        uint64_t v71 = v95;
      }

      while (v97 + 1 != v95);
    }

    icu::UVector::removeAllElements(a1 + 192);
    if (*(void *)(a1 + 88))
    {
      if ((int v88 = *(_DWORD *)(a1 + 104)) == 0 && v92 != 1 || v88 == 1 && v92 != v96) {
        *a4 = U_MISPLACED_COMPOUND_FILTER;
      }
    }

    if (v71 >= 1)
    {
      for (unint64_t i = 0; i != v71; ++i)
      {
        uint64_t v90 = icu::UVector::elementAt(v9, i);
        sub_180961408(v90 + 8, v8, a4);
      }
    }

    uint64_t v41 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v41 == 1)
    {
      uint64_t v41 = *(unsigned __int16 *)(icu::UVector::elementAt((icu::UVector *)v93, 0) + 8);
    }
  }

  else
  {
LABEL_135:
    uint64_t v41 = *(unsigned int *)a4;
  }

      icu::UnicodeString::~UnicodeString((void *)v46, (icu::UnicodeString *)statusa);
LABEL_137:
      if (*(int *)status > 0)
      {
        uint64_t v18 = v76;
        int v17 = v77;
        goto LABEL_149;
      }

      uint64_t v18 = v76;
      if (v77) {
        uint64_t v68 = &v77[v15];
      }
      else {
        uint64_t v68 = 0LL;
      }
      v15 += uregex_group(regexp, v47, v68, (v76 - v15) & ~(((int)v76 - v15) >> 31), status);
      if (*status == U_BUFFER_OVERFLOW_ERROR)
      {
        *UErrorCode status = U_ZERO_ERROR;
        int v17 = v77;
        goto LABEL_144;
      }

      int v17 = v77;
LABEL_144:
      int v32 = offset;
      if (offset >= v9) {
        goto LABEL_149;
      }
    }

    *UErrorCode status = U_REGEX_INVALID_CAPTURE_GROUP_NAME;
    goto LABEL_128;
  }

uint64_t sub_1808372F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    return v1 + 26;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_18083730C(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  if (*a4 > 0) {
    return 0LL;
  }
  if (*a3)
  {
    unint64_t v4 = *(__int128 **)(a1 + 16);
    __int128 v5 = *v4;
    __int128 v6 = v4[2];
    *(_OWORD *)(a2 + 304) = v4[1];
    *(_OWORD *)(a2 + 320) = v6;
    *(_OWORD *)(a2 + 288) = v5;
    *(void *)(a2 + 16) = a2 + 288;
    *(_BYTE *)(a2 + 62) = 1;
  }

  else
  {
    a2 = 0LL;
    *a3 = 336;
  }

  return a2;
}

uint64_t sub_180837364(uint64_t a1, void *a2)
{
  uint64_t v3 = 0LL;
  int v4 = 2304;
  do
  {
    uint64_t v5 = 0LL;
    int v6 = dword_180A260D0[3 * v3 + 1];
    do
    {
      BOOL v8 = v3 == 6 && v5 == 49;
      ++v5;
    }

    while (v5 != 128);
    ++v3;
    v4 += 128;
  }

  while (v3 != 9);
  ((void (*)(void, uint64_t))a2[1])(*a2, 2404LL);
  ((void (*)(void, uint64_t))a2[1])(*a2, 2405LL);
  ((void (*)(void, uint64_t))a2[1])(*a2, 8204LL);
  return ((uint64_t (*)(void, uint64_t))a2[1])(*a2, 8205LL);
}

uint64_t sub_180837454(uint64_t result, _DWORD *a2)
{
  unint64_t v2 = *(unsigned __int8 **)(result + 16);
  uint64_t v3 = *(_WORD **)(result + 32);
  uint64_t v4 = (*(void *)(result + 40) - (void)v3) >> 1;
  uint64_t v5 = *(void *)(result + 48);
  int v6 = *(_DWORD *)(result + 24) - (_DWORD)v2;
  if (v6 > (int)v4)
  {
    *a2 = 15;
    int v6 = v4;
  }

  if (v6 < 8)
  {
    unsigned int v12 = 0;
  }

  else
  {
    unsigned int v7 = v6 >> 3;
    unsigned int v8 = (v6 >> 3) + 1;
    do
    {
      *uint64_t v3 = *v2;
      v3[1] = v2[1];
      v3[2] = v2[2];
      v3[3] = v2[3];
      v3[4] = v2[4];
      v3[5] = v2[5];
      v3[6] = v2[6];
      v3[7] = v2[7];
      v3 += 8;
      v2 += 8;
      --v8;
    }

    while (v8 > 1);
    v6 &= 7u;
    if (!v5)
    {
      if (!v6)
      {
        *(void *)(result + 16) = v2;
        *(void *)(result + 32) = v3;
        return result;
      }

      unsigned int v12 = 0;
      uint64_t v5 = 0LL;
      goto LABEL_12;
    }

    unsigned int v9 = 0;
    int v10 = v7 + 1;
    do
    {
      int8x16_t v11 = (int8x16_t)vdupq_n_s32(v9);
      *(_DWORD *)uint64_t v5 = v9;
      *(int8x16_t *)(v5 + 4) = vorrq_s8(v11, (int8x16_t)xmmword_180A26580);
      *(int8x8_t *)(v5 + 20) = vorr_s8(*(int8x8_t *)v11.i8, (int8x8_t)0x600000005LL);
      unsigned int v12 = v9 + 8;
      *(_DWORD *)(v5 + 28) = v9 + 7;
      v5 += 32LL;
      --v10;
      v9 += 8;
    }

    while (v10 > 1);
  }

  if (v6 <= 0)
  {
    *(void *)(result + 16) = v2;
    *(void *)(result + 32) = v3;
    if (!v5) {
      return result;
    }
    goto LABEL_18;
  }

uint64_t sub_1808375B8(uint64_t result, int *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  unint64_t v2 = *(__int16 **)(result + 16);
  unint64_t v4 = *(void *)(result + 24);
  uint64_t v5 = *(_BYTE **)(result + 32);
  uint64_t v6 = *(void *)(result + 48);
  if (*(_UNKNOWN **)(v3 + 48) == &unk_1897155E8) {
    unsigned int v7 = 255;
  }
  else {
    unsigned int v7 = 127;
  }
  unsigned int v8 = *(_DWORD *)(v3 + 84);
  if (v8) {
    unsigned int v9 = -1;
  }
  else {
    unsigned int v9 = 0;
  }
  unint64_t v10 = (v4 - (unint64_t)v2) >> 1;
  if (v8) {
    BOOL v11 = (int)v10 <= 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    int v32 = *(_BYTE **)(result + 32);
LABEL_19:
    if ((unint64_t)v2 >= v4)
    {
LABEL_40:
      *(_DWORD *)(v3 + 84) = v8;
      goto LABEL_41;
    }

    int v33 = (unsigned __int16)*v2;
    BOOL v34 = (v33 & 0xFC00) == 56320;
    int v35 = v33 + (v8 << 10) - 56613888;
    v2 += v34;
    if (v34) {
      unsigned int v8 = v35;
    }
LABEL_36:
    if (v8 >> 11 == 27) {
      int v43 = 12;
    }
    else {
      int v43 = 10;
    }
    *a2 = v43;
    goto LABEL_40;
  }

  if ((int)v10 < 16)
  {
    int v32 = *(_BYTE **)(result + 32);
  }

  else
  {
    unsigned int v12 = (v10 >> 4) + 1;
    int v32 = *(_BYTE **)(result + 32);
    while (1)
    {
      __int16 v13 = *v2;
      *int v32 = *v2;
      __int16 v14 = v2[1];
      v32[1] = v14;
      __int16 v15 = v2[2];
      void v32[2] = v15;
      __int16 v16 = v2[3];
      v32[3] = v16;
      __int16 v17 = v2[4];
      v32[4] = v17;
      __int16 v18 = v2[5];
      v32[5] = v18;
      __int16 v19 = v2[6];
      v32[6] = v19;
      __int16 v20 = v2[7];
      v32[7] = v20;
      __int16 v21 = v2[8];
      v32[8] = v21;
      __int16 v22 = v2[9];
      v32[9] = v22;
      __int16 v23 = v2[10];
      v32[10] = v23;
      __int16 v24 = v2[11];
      v32[11] = v24;
      __int16 v25 = v2[12];
      v32[12] = v25;
      __int16 v26 = v2[13];
      v32[13] = v26;
      __int16 v27 = v2[14];
      v28.i16[0] = v13;
      v28.i16[1] = v14;
      v28.i16[2] = v15;
      v28.i16[3] = v16;
      v28.i16[4] = v17;
      v28.i16[5] = v18;
      v32[14] = v27;
      v28.i16[6] = v19;
      v28.i16[7] = v20;
      v29.i16[0] = v21;
      v29.i16[1] = v22;
      v29.i16[2] = v23;
      v29.i16[3] = v24;
      v29.i16[4] = v25;
      v29.i16[5] = v26;
      v29.i16[6] = v27;
      v29.i16[7] = v2[15];
      int8x16_t v30 = vorrq_s8(v28, v29);
      *(int8x8_t *)v30.i8 = vorr_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
      v32[15] = v29.i8[14];
      v32 += 16;
      v2 += 16;
      if ((int)--v12 <= 1)
      {
        unsigned int v31 = 0;
        goto LABEL_25;
      }
    }

    unsigned int v31 = v12 - 1;
LABEL_25:
    int v36 = (v10 >> 4) - v31;
    LODWORD(v10) = v10 - 16 * v36;
    if (v6)
    {
      v5 += 16 * v36;
      if (v36 >= 1)
      {
        unsigned int v37 = v36 + 1;
        do
        {
          int32x4_t v38 = vdupq_n_s32(v9);
          *(_DWORD *)uint64_t v6 = v9;
          *(int32x4_t *)(v6 + 4) = vaddq_s32(v38, (int32x4_t)xmmword_180A26580);
          *(int32x4_t *)(v6 + 20) = vaddq_s32(v38, (int32x4_t)xmmword_180A26590);
          *(int32x4_t *)(v6 + 36) = vaddq_s32(v38, (int32x4_t)xmmword_180A265A0);
          unsigned int v39 = v9 + 15;
          *(int32x2_t *)(v6 + 52) = vadd_s32(*(int32x2_t *)v38.i8, (int32x2_t)0xE0000000DLL);
          v9 += 16;
          uint64_t v40 = v6 + 64;
          *(_DWORD *)(v6 + 60) = v39;
          --v37;
          v6 += 64LL;
        }

        while (v37 > 1);
        uint64_t v6 = v40;
      }
    }
  }

  if ((int)v10 >= 1)
  {
    int v41 = v10 + 1;
    int v42 = (unsigned __int16 *)(v2 + 1);
    do
    {
      unint64_t v2 = (__int16 *)v42;
      unsigned int v8 = *(v42 - 1);
      if (v8 > v7) {
        break;
      }
      *v32++ = v8;
      --v41;
      ++v42;
    }

    while (v41 > 1);
    if (v7 < v8)
    {
      if ((v8 & 0xFC00) != 0xD800) {
        goto LABEL_36;
      }
      goto LABEL_19;
    }
  }

uint64_t sub_1808378DC(uint64_t a1, _DWORD *a2)
{
  unint64_t v2 = *(unsigned __int8 **)(a1 + 16);
  if ((unint64_t)v2 >= *(void *)(a1 + 24))
  {
    *a2 = 8;
    return 0xFFFFLL;
  }

  else
  {
    *(void *)(a1 + 16) = v2 + 1;
    return *v2;
  }

uint64_t sub_180837908(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(a2 + 16))(*(void *)a2, 0LL, 255LL);
}

uint64_t sub_18083791C(uint64_t result, void *a2, int *a3)
{
  uint64_t v3 = a2[1];
  unint64_t v4 = (_BYTE *)a2[2];
  unint64_t v5 = a2[3];
  uint64_t v6 = *(_BYTE **)(result + 32);
  int v7 = *(_DWORD *)(result + 40) - (_DWORD)v6;
  int v8 = *(_DWORD *)(v3 + 72);
  if (!v7)
  {
    int v21 = 15;
LABEL_43:
    *a3 = v21;
    return result;
  }

  if ((v8 & 0xFFFFFFFE) != 0xC2 || (*v4 ^ 0x80u) > 0x3F)
  {
LABEL_42:
    int v21 = -127;
    goto LABEL_43;
  }

  *v6++ = *v4++ ^ 0x80 | ((_BYTE)v8 << 6);
  --v7;
  *(_DWORD *)(v3 + 72) = 0;
  *(_BYTE *)(v3 + 64) = 0;
LABEL_7:
  if ((unint64_t)v4 < v5)
  {
    while (1)
    {
      BOOL v10 = __OFSUB__(v7--, 1);
      if (v7 < 0 != v10)
      {
        *a3 = 15;
        goto LABEL_39;
      }

      BOOL v11 = v4 + 1;
      int v12 = (char)*v4;
      if (v12 < 0)
      {
        if ((v12 & 0xFFFFFFFE) != 0xFFFFFFC2 || (unsigned __int8 v13 = *v11 ^ 0x80, v13 > 0x3Fu))
        {
          a2[2] = v4;
          *(void *)(result + 32) = v6;
          goto LABEL_42;
        }

        BOOL v11 = v4 + 2;
        LOBYTE(v12) = v13 | ((_BYTE)v12 << 6);
      }

      *v6++ = v12;
      unint64_t v4 = v11;
    }
  }

  BOOL v11 = v4;
LABEL_19:
  if (*a3 <= 0 && (unint64_t)v11 < a2[3])
  {
    int v15 = (char)*v11++;
    int v14 = v15;
    unsigned int v16 = v15;
    *(_BYTE *)(v3 + 65) = v15;
    *(_BYTE *)(v3 + 64) = 1;
    unsigned int v17 = (v15 + 62);
    else {
      int v18 = 3;
    }
    if (v16 > 0xDF) {
      ++v18;
    }
    if (v17 <= 0x32) {
      int v19 = v18;
    }
    else {
      int v19 = 0;
    }
    if (v14 < 0) {
      int v20 = v19;
    }
    else {
      int v20 = 1;
    }
    *(_DWORD *)(v3 + 72) = v16;
    *(_DWORD *)(v3 + 76) = v20;
  }

  unint64_t v4 = v11;
LABEL_39:
  a2[2] = v4;
  *(void *)(result + 32) = v6;
  return result;
}

void *sub_180837A9C(void *result, int *a2)
{
  unint64_t v2 = (unsigned __int8 *)result[2];
  unint64_t v3 = result[3];
  uint64_t v4 = result[4];
  unint64_t v5 = result[5];
  uint64_t v6 = result[6];
  int v7 = v3 - (_DWORD)v2;
  if (v7 < 8)
  {
    unsigned int v27 = 0;
    int v8 = (_WORD *)result[4];
  }

  else
  {
    int v8 = (_WORD *)result[4];
    int v9 = v7 >> 3;
    while (1)
    {
      int v10 = *v2;
      _WORD *v8 = v10;
      int v11 = v2[1];
      v8[1] = v11;
      int v12 = v11 | v10;
      int v13 = v2[2];
      void v8[2] = v13;
      int v14 = v2[3];
      v8[3] = v14;
      int v15 = v12 | v13 | v14;
      int v16 = v2[4];
      v8[4] = v16;
      int v17 = v2[5];
      v8[5] = v17;
      int v18 = v16 | v17;
      int v19 = v2[6];
      v8[6] = v19;
      int v20 = v15 | v18 | v19;
      int v21 = v2[7];
      v8[7] = v21;
      if (((v20 | v21) & 0x80) != 0) {
        break;
      }
      v2 += 8;
      v8 += 8;
      BOOL v22 = __OFSUB__(v9--, 1);
      if ((v9 < 0) ^ v22 | (v9 == 0))
      {
        int v9 = 0;
        break;
      }
    }

    int v23 = (v7 >> 3) - v9;
    v7 -= 8 * v23;
    if (v6 && (v4 += 16LL * v23, v23 >= 1))
    {
      unsigned int v24 = 0;
      unsigned int v25 = v23 + 1;
      do
      {
        int8x16_t v26 = (int8x16_t)vdupq_n_s32(v24);
        *(_DWORD *)uint64_t v6 = v24;
        *(int8x16_t *)(v6 + 4) = vorrq_s8(v26, (int8x16_t)xmmword_180A26580);
        *(int8x8_t *)(v6 + 20) = vorr_s8(*(int8x8_t *)v26.i8, (int8x8_t)0x600000005LL);
        unsigned int v27 = v24 + 8;
        *(_DWORD *)(v6 + 28) = v24 + 7;
        v6 += 32LL;
        --v25;
        v24 += 8;
      }

      while (v25 > 1);
    }

    else
    {
      unsigned int v27 = 0;
    }
  }

  if (v7 >= 1)
  {
    int v28 = v7 + 1;
    while (1)
    {
      int v30 = (char)*v2++;
      unsigned __int8 v29 = v30;
      if (v30 < 0) {
        break;
      }
      *v8++ = v29;
      if (--v28 <= 1) {
        goto LABEL_20;
      }
    }

    uint64_t v32 = result[1];
    *(_BYTE *)(v32 + 65) = v29;
    *(_BYTE *)(v32 + 64) = 1;
    int v31 = 12;
    goto LABEL_24;
  }

uint64_t sub_180837C4C(void *a1, int *a2)
{
  unint64_t v2 = (char *)a1[2];
  if ((unint64_t)v2 >= a1[3])
  {
    int v6 = 8;
  }

  else
  {
    int v4 = *v2;
    unsigned __int8 v3 = *v2;
    a1[2] = v2 + 1;
    if ((v4 & 0x80000000) == 0) {
      return v3;
    }
    uint64_t v7 = a1[1];
    *(_BYTE *)(v7 + 65) = v3;
    *(_BYTE *)(v7 + 64) = 1;
    int v6 = 12;
  }

  *a2 = v6;
  return 0xFFFFLL;
}

uint64_t sub_180837C94(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(a2 + 16))(*(void *)a2, 0LL, 127LL);
}

uint64_t sub_180837CA8(uint64_t result, void *a2, int *a3)
{
  if (*(char *)(a2[1] + 64LL) >= 1)
  {
    *a3 = -127;
    return result;
  }

  unsigned __int8 v3 = (__int8 *)a2[2];
  unint64_t v4 = a2[3];
  unint64_t v5 = *(__int8 **)(result + 32);
  int v6 = *(_DWORD *)(result + 40) - (_DWORD)v5;
  if (v6 >= 16)
  {
    int v7 = v6 >> 4;
    while (1)
    {
      __int8 v8 = *v3;
      *unint64_t v5 = *v3;
      __int8 v9 = v3[1];
      v5[1] = v9;
      __int8 v10 = v3[2];
      v5[2] = v10;
      __int8 v11 = v3[3];
      v5[3] = v11;
      __int8 v12 = v3[4];
      v5[4] = v12;
      __int8 v13 = v3[5];
      v5[5] = v13;
      __int8 v14 = v3[6];
      v5[6] = v14;
      __int8 v15 = v3[7];
      v5[7] = v15;
      __int8 v16 = v3[8];
      v5[8] = v16;
      __int8 v17 = v3[9];
      v5[9] = v17;
      __int8 v18 = v3[10];
      v5[10] = v18;
      __int8 v19 = v3[11];
      v5[11] = v19;
      __int8 v20 = v3[12];
      v5[12] = v20;
      __int8 v21 = v3[13];
      v5[13] = v21;
      __int8 v22 = v3[14];
      v5[14] = v22;
      __int8 v23 = v3[15];
      v24.i8[0] = v8;
      v24.i8[1] = v9;
      v24.i8[2] = v10;
      v24.i8[3] = v11;
      v24.i8[4] = v12;
      v24.i8[5] = v13;
      v24.i8[6] = v14;
      v5[15] = v23;
      v24.i8[7] = v15;
      v25.i8[0] = v16;
      v25.i8[1] = v17;
      v25.i8[2] = v18;
      v25.i8[3] = v19;
      v25.i8[4] = v20;
      v25.i8[5] = v21;
      v25.i8[6] = v22;
      v25.i8[7] = v23;
      int8x8_t v26 = vorr_s8(v24, v25);
      v5 += 16;
      v3 += 16;
      BOOL v27 = __OFSUB__(v7--, 1);
      if ((v7 < 0) ^ v27 | (v7 == 0))
      {
        int v7 = 0;
        break;
      }
    }

    v6 += 16 * (v7 - (v6 >> 4));
  }

  if (v6 < 1)
  {
LABEL_16:
    int v30 = 15;
  }

  else
  {
    int v28 = v6 + 1;
    while (1)
    {
      int v29 = *v3;
      if (v29 < 0) {
        break;
      }
      ++v3;
      *v5++ = v29;
      if (--v28 <= 1) {
        goto LABEL_16;
      }
    }

    int v30 = -127;
  }

  *a3 = v30;
LABEL_21:
  a2[2] = v3;
  *(void *)(result + 32) = v5;
  return result;
}

uint64_t sub_180837E60(uint64_t result, uint64_t *a2, uint64_t a3, int a4, _DWORD *a5)
{
  uint64_t v35 = result;
  uint64_t v40 = *(void *)(result + 88);
  if ((*(_BYTE *)(result + 253) & 1) != 0) {
    uint64_t v7 = 1088LL;
  }
  else {
    uint64_t v7 = 64LL;
  }
  int v8 = *(unsigned __int8 *)(result + 252);
  uint64_t v9 = *(void *)(result + 232);
  if (*(_BYTE *)(result + 252))
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    if (v8 == 3) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v8 == 2 || v8 == 9) {
      uint64_t v14 = 3LL;
    }
    else {
      uint64_t v14 = v12;
    }
    unsigned int v38 = v7 >> 1;
    uint64_t v37 = v7;
    while (1)
    {
      uint64_t v39 = v10;
      uint64_t v15 = *(unsigned __int16 *)(v40 + 2 * v10);
      uint64_t v11 = (v11 + 1024);
LABEL_66:
      uint64_t v10 = v39 + 1;
      if (v39 + 1 == v37) {
        return sub_18082C01C(v35, a2, a3, a4);
      }
    }

    uint64_t v16 = 0LL;
    uint64_t v17 = v40 + 4 * v15;
    while (1)
    {
      unsigned int v18 = *(_DWORD *)(v17 + 4 * v16);
      if (v18) {
        break;
      }
      uint64_t v11 = (v11 + 16);
LABEL_63:
      if (++v16 == 64) {
        goto LABEL_66;
      }
    }

    __int8 v19 = (unsigned __int8 *)(v9 + 16 * (_DWORD)v14 * (unsigned __int16)*(_DWORD *)(v17 + 4 * v16));
    unsigned int v20 = HIWORD(v18);
    switch(a4)
    {
      case 0:
        do
        {
          if ((v20 & 1) != 0)
          {
            uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))a2[1])(*a2, v11);
            v19 += v14;
          }

          else if ((_DWORD)a3 == 1)
          {
            int v21 = 0;
            if ((_DWORD)v14 != 2)
            {
              if ((_DWORD)v14 != 3)
              {
                int v22 = *v19++;
                int v21 = v22;
              }

              int v23 = *v19++;
              v21 |= v23;
            }

            int v24 = *v19;
            int v25 = v19[1];
            v19 += 2;
            if (v24 | v21 | v25) {
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))a2[1])(*a2, v11);
            }
          }

          v20 >>= 1;
          uint64_t v11 = (v11 + 1);
        }

        while ((v11 & 0xF) != 0);
        goto LABEL_63;
      case 1:
        do
        {
          v20 >>= 1;
          v19 += 2;
          uint64_t v11 = (v11 + 1);
        }

        while ((v11 & 0xF) != 0);
        goto LABEL_63;
      case 2:
        do
        {
          v20 >>= 1;
          v19 += 3;
          uint64_t v11 = (v11 + 1);
        }

        while ((v11 & 0xF) != 0);
        goto LABEL_63;
      case 3:
        do
        {
          v20 >>= 1;
          v19 += 2;
          uint64_t v11 = (v11 + 1);
        }

        while ((v11 & 0xF) != 0);
        goto LABEL_63;
      case 4:
        do
        {
          if (((_DWORD)a3 == 1 || (v20 & 1) != 0)
            && (unsigned __int16)(*(_WORD *)v19 + 24159) <= 0x5D5Du
            && ((*(_WORD *)v19 + 95) & 0xFEu) <= 0x5D)
          {
            uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))a2[1])(*a2, v11);
          }

          v20 >>= 1;
          v19 += 2;
          uint64_t v11 = (v11 + 1);
        }

        while ((v11 & 0xF) != 0);
        goto LABEL_63;
      case 5:
        do
        {
          if (((_DWORD)a3 == 1 || (v20 & 1) != 0)
            && (unsigned __int16)(*(_WORD *)v19 + 24159) <= 0x5C5Du
            && ((*(_WORD *)v19 + 95) & 0xFEu) <= 0x5D)
          {
            uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))a2[1])(*a2, v11);
          }

          v20 >>= 1;
          v19 += 2;
          uint64_t v11 = (v11 + 1);
        }

        while ((v11 & 0xF) != 0);
        goto LABEL_63;
      default:
        *a5 = 5;
        break;
    }
  }

  else
  {
    uint64_t v26 = 0LL;
    uint64_t v27 = 0LL;
    if ((_DWORD)a3) {
      unsigned int v28 = 2048;
    }
    else {
      unsigned int v28 = 3840;
    }
    uint64_t v29 = v7;
    do
    {
      uint64_t v30 = *(unsigned __int16 *)(v40 + 2 * v26);
      if (v29 >= v30)
      {
        uint64_t v27 = (v27 + 1024);
      }

      else
      {
        uint64_t v31 = 0LL;
        uint64_t v32 = v40 + 2 * v30;
        do
        {
          if (*(_WORD *)(v32 + 2 * v31))
          {
            uint64_t v33 = (unsigned __int16 *)(v9 + 2LL * *(unsigned __int16 *)(v32 + 2 * v31));
            do
            {
              unsigned int v34 = *v33++;
              if (v28 <= v34) {
                ((void (*)(uint64_t, uint64_t))a2[1])(*a2, v27);
              }
              uint64_t v27 = (v27 + 1);
            }

            while ((v27 & 0xF) != 0);
          }

          else
          {
            uint64_t v27 = (v27 + 16);
          }

          ++v31;
        }

        while (v31 != 64);
      }

      ++v26;
    }

    while (v26 != v29);
    return sub_18082C01C(v35, a2, a3, a4);
  }

  return result;
}

uint64_t sub_18083826C(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4)
{
  return sub_180837E60(a1, a2, a3, *(unsigned __int8 *)(a1 + 252) == 219, a4);
}

uint64_t sub_180838280(uint64_t result, int *a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  int v160 = 0LL;
  int v161 = 0LL;
  int v159 = 0LL;
  uint64_t v4 = *(void *)(result + 8);
  if (*(char *)(v4 + 282) >= 1)
  {
    uint64_t v6 = *(void *)(result + 8);
    uint64_t result = sub_18082B63C(v6, result, -1, a2);
    if (*a2 > 0) {
      return result;
    }
    uint64_t v4 = v6;
    unint64_t v2 = a2;
  }

  uint64_t v7 = *(void *)(v4 + 48);
  if (*(_BYTE *)(v7 + 48) != 1)
  {
    uint64_t v71 = *(_BYTE **)(v3 + 16);
    unint64_t v70 = *(void *)(v3 + 24);
    unint64_t v72 = *(void *)(v3 + 40);
    int v160 = *(_WORD **)(v3 + 32);
    int v161 = v71;
    uint64_t v158 = v3;
    int v159 = *(_DWORD **)(v3 + 48);
    uint64_t v73 = 56LL;
    if ((*(_BYTE *)(v4 + 56) & 0x10) != 0) {
      uint64_t v73 = 64LL;
    }
    int v74 = *(_DWORD *)(v4 + 72);
    LOBYTE(v75) = *(_BYTE *)(v4 + 64);
    uint64_t v76 = *(unsigned __int8 *)(v4 + 76);
    if (!*(_BYTE *)(v4 + 76)) {
      uint64_t v76 = *(unsigned __int8 *)(v7 + 49);
    }
    LODWORD(v77) = 0;
    uint64_t v78 = *(void *)(v7 + v73);
    int v79 = (_BYTE *)(v4 + 65);
    uint64_t v80 = *(void *)(v7 + 72);
    if (*(_BYTE *)(v4 + 64)) {
      uint64_t v81 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v81 = 0LL;
    }
    while (1)
    {
      uint64_t v82 = v160;
      if ((_BYTE)v75)
      {
        int v161 = v71 + 1;
        uint64_t v83 = *v71;
        v79[(char)v75] = v83;
        LODWORD(v84) = *(_DWORD *)(v78 + ((unint64_t)v76 << 10) + 4 * v83);
        ++v71;
        uint64_t v85 = v76;
        goto LABEL_89;
      }

      uint64_t v86 = v159;
      if (!v159)
      {
        while (1)
        {
          unint64_t v84 = *(unsigned int *)(v78 + ((unint64_t)v76 << 10) + 4LL * *v71);
          if ((v84 & 0x80000000) != 0)
          {
            uint64_t v76 = 0LL;
            int v161 = ++v71;
            *uint64_t v82 = v84;
            int v160 = v82 + 1;
          }

          else
          {
            unint64_t v90 = v84 >> 24;
            int v74 = v84 & 0xFFFFFF;
            int v88 = v71 + 1;
            int v161 = v71 + 1;
            if ((unint64_t)(v71 + 1) >= v70
              || (LODWORD(v84) = *(_DWORD *)(v78 + (v90 << 10) + 4LL * *v88), (v84 & 0x80F00000) != 0x80400000)
              || (unsigned int v91 = *(unsigned __int16 *)(v80 + 2LL * (v74 + (unsigned __int16)v84)), v91 > 0xFFFD))
            {
LABEL_85:
              _BYTE *v79 = *v71;
              unsigned int v75 = 1;
              uint64_t v71 = v88;
              uint64_t v85 = v90;
              goto LABEL_86;
            }

            int v74 = 0;
            v71 += 2;
            int v161 = v71;
            *uint64_t v82 = v91;
            int v160 = v82 + 1;
            uint64_t v76 = BYTE3(v84) & 0x7F;
          }

          uint64_t v82 = v160;
          if ((unint64_t)v71 >= v70 || (unint64_t)v160 >= v72)
          {
LABEL_83:
            unsigned int v75 = 0;
            uint64_t v85 = v76;
            goto LABEL_86;
          }
        }
      }

      uint64_t v85 = v76;
      while (1)
      {
        unint64_t v84 = *(unsigned int *)(v78 + ((unint64_t)v85 << 10) + 4LL * *v71);
        if ((v84 & 0x80000000) != 0) {
          break;
        }
        unint64_t v87 = v84 >> 24;
        int v74 = v84 & 0xFFFFFF;
        int v88 = v71 + 1;
        int v161 = v71 + 1;
        if ((unint64_t)(v71 + 1) >= v70
          || (LODWORD(v84) = *(_DWORD *)(v78 + (v87 << 10) + 4LL * *v88), (v84 & 0x80F00000) != 0x80400000)
          || (unsigned int v89 = *(unsigned __int16 *)(v80 + 2LL * (v74 + (unsigned __int16)v84)), v89 > 0xFFFD))
        {
          LODWORD(v77) = v77 + 1;
          unint64_t v90 = v87;
          goto LABEL_85;
        }

        v71 += 2;
        int v161 = v71;
        *uint64_t v82 = v89;
        int v160 = v82 + 1;
        if (v86)
        {
          *v86++ = v81;
          int v159 = v86;
          uint64_t v81 = (v77 + 2);
          LODWORD(v77) = v77 + 2;
        }

        int v74 = 0;
        uint64_t v85 = BYTE3(v84) & 0x7F;
LABEL_71:
        unsigned int v75 = 0;
        uint64_t v82 = v160;
      }

      unsigned int v75 = 0;
LABEL_86:
      if ((unint64_t)v82 >= v72)
      {
        *unint64_t v2 = 15;
LABEL_182:
        LOBYTE(v76) = v85;
        goto LABEL_211;
      }

      int v161 = v71 + 1;
      v79[v75] = *v71++;
LABEL_89:
      uint64_t v77 = (v77 + 1);
      int v92 = (char)(v75 + 1);
      if ((v84 & 0x80000000) == 0)
      {
        uint64_t v76 = BYTE3(v84);
        v74 += v84 & 0xFFFFFF;
        LOBYTE(v75) = v75 + 1;
        uint64_t v93 = v81;
        goto LABEL_133;
      }

      *(_DWORD *)(v4 + 76) = v85;
      uint64_t v76 = BYTE3(v84) & 0x7F;
      unsigned int v94 = (v84 >> 20) & 0xF;
      if (!v94)
      {
LABEL_109:
        *uint64_t v82 = v84;
        unint64_t v98 = (unint64_t)(v82 + 1);
LABEL_110:
        int v160 = (_WORD *)v98;
        uint64_t v107 = v159;
        if (v159)
        {
          int v74 = 0;
          LOBYTE(v75) = 0;
          *int v159 = v81;
          int v159 = v107 + 1;
          goto LABEL_132;
        }

LABEL_184:
  *(_WORD *)(v125 + 144) = v137;
  *(_BYTE *)(v125 + 93) = 1;
  *unint64_t v2 = 15;
  ++v126;
LABEL_180:
  *(void *)(v3 + 16) = v132;
  *(void *)(v3 + 32) = v126;
  *(void *)(v3 + 48) = v162;
  return result;
}

LABEL_192:
      uint64_t v65 = icu::CollationFastLatin::getCases(v14, v60, v64);
    }

    while (!v65);
    uint64_t v58 = v65;
LABEL_194:
    if (!v59) {
      goto LABEL_195;
    }
LABEL_214:
    if (v58 == v59) {
      break;
    }
    if ((unsigned __int16)v58 != (unsigned __int16)v59)
    {
      else {
        unint64_t v72 = -1;
      }
      else {
        uint64_t v73 = 1;
      }
      if ((v9 & 0x100) != 0) {
        return v72;
      }
      else {
        return v73;
      }
    }

    if (v58 == 2) {
      goto LABEL_76;
    }
    v58 >>= 16;
    v59 >>= 16;
  }

  uint64_t v59 = 0;
  uint64_t v15 = v58 == 2;
  uint64_t v58 = 0;
  if (!v15) {
    goto LABEL_177;
  }
LABEL_76:
  if (v88 < 0x2000) {
    return 0LL;
  }
  int v30 = 0;
  int v31 = 0;
  int v32 = (v9 & 0x600) == 512;
  unsigned int v89 = 0LL;
  while (2)
  {
    while (2)
    {
      if (v30) {
        goto LABEL_95;
      }
      while (2)
      {
        int v33 = SHIDWORD(v89);
        if (HIDWORD(v89) == v91)
        {
          int v30 = 2;
          if (v31) {
            goto LABEL_115;
          }
          while (1)
          {
LABEL_96:
            int v38 = (int)v89;
            if ((_DWORD)v89 == v90)
            {
              int v31 = 2;
              goto LABEL_115;
            }

            LODWORD(v89) = v89 + 1;
            int v39 = *(unsigned __int16 *)(a6 + 2 * v38);
            if (v39 <= 0x17F) {
              break;
            }
            if ((v39 & 0xFFC0) == 0x2000)
            {
              int v40 = v39 - 7808;
              goto LABEL_101;
            }

            if (v39 == 0xFFFF) {
              int v41 = 64680LL;
            }
            else {
              int v41 = 1LL;
            }
            if (v39 != 65534) {
              goto LABEL_102;
            }
            int v41 = 3LL;
LABEL_109:
            LODWORD(v4icu::UVector32::~UVector32(this + 1) = icu::CollationFastLatin::nextPair(v13, v39, v41, a6, 0LL, (int *)&v89, &v90);
LABEL_110:
            Tertiaries = icu::CollationFastLatin::getTertiaries(v14, v32, v41);
            if (Tertiaries)
            {
              int v31 = Tertiaries;
              goto LABEL_115;
            }
          }

          int v40 = *(unsigned __int16 *)(a6 + 2 * v38);
LABEL_101:
          int v41 = *(unsigned __int16 *)(v13 + 2 * v40);
LABEL_102:
          goto LABEL_109;
        }

        ++HIDWORD(v89);
        int v34 = *(unsigned __int16 *)(a4 + 2 * v33);
        if (v34 <= 0x17F)
        {
          int v35 = *(unsigned __int16 *)(a4 + 2 * v33);
          goto LABEL_84;
        }

        if ((v34 & 0xFFC0) != 0x2000)
        {
          if (v34 == 0xFFFF) {
            int v36 = 64680LL;
          }
          else {
            int v36 = 1LL;
          }
          if (v34 != 65534) {
            goto LABEL_85;
          }
          int v36 = 3LL;
          goto LABEL_92;
        }

        int v35 = v34 - 7808;
LABEL_84:
        int v36 = *(unsigned __int16 *)(v13 + 2 * v35);
LABEL_85:
        if (v36 <= 0xBFF) {
LABEL_92:
        }
          LODWORD(v36) = icu::CollationFastLatin::nextPair(v13, v34, v36, a4, 0LL, (int *)&v89 + 1, &v91);
        int v37 = icu::CollationFastLatin::getTertiaries(v14, v32, v36);
        if (!v37) {
          continue;
        }
        break;
      }

      int v30 = v37;
LABEL_95:
      if (!v31) {
        goto LABEL_96;
      }
LABEL_115:
      if (v30 != v31)
      {
        uint64_t v16 = (unsigned __int16)v30;
        if ((unsigned __int16)v30 != (unsigned __int16)v31)
        {
          int v43 = (unsigned __int16)v31;
          int v74 = (unsigned __int16)v30 ^ 0x18;
          unsigned int v75 = (unsigned __int16)v31 ^ 0x18;
          if ((v9 & 0x700) == 0x300)
          {
            uint64_t v16 = v74;
            int v43 = v75;
          }

          goto LABEL_123;
        }

        if (v30 == 2) {
          goto LABEL_221;
        }
        v30 >>= 16;
        v31 >>= 16;
        continue;
      }

      break;
    }

    int v31 = 0;
    uint64_t v15 = v30 == 2;
    int v30 = 0;
    if (!v15) {
      continue;
    }
    break;
  }

uint64_t sub_180839290(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 4);
  if (!v2) {
    return 65534LL;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2 == 1)
  {
    uint64_t v4 = 0LL;
  }

  else
  {
    LODWORD(v4) = 0;
    do
    {
      unsigned int v5 = (v2 + v4) >> 1;
      unsigned int v6 = *(_DWORD *)(v3 + 8LL * v5);
      if (v6 <= a2) {
        uint64_t v4 = v5;
      }
      else {
        uint64_t v4 = v4;
      }
      if (v6 > a2) {
        unsigned int v2 = v5;
      }
    }

    while (v4 < v2 - 1);
  }

  if (*(_DWORD *)(v3 + 8 * v4) == a2) {
    return *(unsigned int *)(v3 + 8 * v4 + 4);
  }
  else {
    return 65534LL;
  }
}

uint64_t sub_1808392FC(uint64_t a1, unsigned int a2, int a3, unsigned int a4)
{
  unsigned int v4 = *(_DWORD *)(a1 + ((unint64_t)a2 << 10) + 4LL * a4);
  if ((v4 & 0x80000000) == 0) {
    return sub_18083D020(a1, HIBYTE(v4));
  }
  int v6 = (v4 >> 20) & 0xF;
  if (a3) {
    BOOL v7 = v6 == 8;
  }
  else {
    BOOL v7 = 0;
  }
  return !v7 && v6 != 7;
}

uint64_t sub_18083932C(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = a3 - 1;
  if (a3 < 1) {
    return 0xFFFFLL;
  }
  uint64_t v6 = 0LL;
  int v7 = 0;
  uint64_t v8 = a1 + 48;
  uint64_t v9 = *(void *)(a1 + 72);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 49);
  while (1)
  {
    unsigned int v12 = *(_DWORD *)(*(void *)(a1 + 56) + (v11 << 10) + 4LL * *(unsigned __int8 *)(a2 + v6));
    if ((v12 & 0x80000000) != 0) {
      break;
    }
    ++v6;
    uint64_t v11 = HIBYTE(v12);
    v7 += v12 & 0xFFFFFF;
    if (a3 == v6) {
      return 0xFFFFLL;
    }
  }

  uint64_t result = 65534LL;
  switch((v12 >> 20) & 0xF)
  {
    case 0u:
    case 2u:
      uint64_t result = (unsigned __int16)v12;
      goto LABEL_18;
    case 1u:
    case 3u:
      uint64_t result = (v12 & 0xFFFFF) + 0x10000;
      goto LABEL_18;
    case 4u:
      unsigned int v14 = v7 + (unsigned __int16)v12;
      uint64_t result = *(unsigned __int16 *)(v9 + 2LL * v14);
      if ((_DWORD)result == 65534) {
        uint64_t result = sub_180839290(v8, v14);
      }
      goto LABEL_18;
    case 5u:
      unsigned int v15 = v7 + (unsigned __int16)v12;
      uint64_t result = *(unsigned __int16 *)(v9 + 2LL * v15);
      unsigned int v16 = v15 + 1;
      if (result >> 13 > 6)
      {
        if ((result & 0xFFFE) == 0xE000)
        {
          uint64_t result = *(unsigned __int16 *)(v9 + 2LL * v16);
        }

        else
        {
          BOOL v17 = (_DWORD)result == 0xFFFF;
          uint64_t result = 0xFFFFLL;
          if (v17) {
            return result;
          }
          uint64_t result = 65534LL;
        }
      }

      else
      {
        uint64_t result = ((result & 0x3FF) << 10) + *(unsigned __int16 *)(v9 + 2LL * v16) + 9216;
      }

uint64_t sub_1808394B8(uint64_t result, int *a2)
{
  unsigned int v2 = a2;
  uint64_t v3 = result;
  int v205 = 0LL;
  unint64_t v206 = 0LL;
  BOOL v204 = 0LL;
  uint64_t v4 = *(void *)(result + 8);
  if ((*(_DWORD *)(v4 + 208) & 0x80000000) == 0)
  {
    uint64_t result = sub_18082BD90(*(void *)(result + 8), result, -1, a2);
  }

  uint64_t v5 = *(void *)(v4 + 48);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 252);
  char v7 = *(_BYTE *)(v5 + 253);
  int v8 = v6 - 1;
  if ((_DWORD)v6 == 1)
  {
    if (*(_BYTE *)(v5 + 254))
    {
      int v22 = 0;
      uint64_t v24 = *(void *)(v3 + 8);
      int v23 = *(unsigned __int16 **)(v3 + 16);
      uint64_t v25 = *(void *)(v24 + 48);
      char v26 = *(_BYTE *)(v25 + 253);
      unint64_t v27 = *(void *)(v3 + 24);
      unint64_t v208 = *(_BYTE **)(v3 + 32);
      unint64_t v209 = 0LL;
      int v28 = *(_DWORD *)(v3 + 40) - (_DWORD)v208;
      v207 = *(int **)(v3 + 48);
      uint64_t v29 = *(void *)(v25 + 88);
      uint64_t v30 = *(void *)(v25 + 96);
      uint64_t v31 = 240LL;
      if ((*(_BYTE *)(v24 + 56) & 0x10) == 0) {
        uint64_t v31 = 232LL;
      }
      uint64_t v32 = *(void *)(v25 + v31);
      unsigned int v33 = *(_DWORD *)(v25 + 260);
      LODWORD(v34) = *(_DWORD *)(v24 + 84);
      if ((_DWORD)v34) {
        int v35 = -1;
      }
      else {
        int v35 = 0;
      }
      if (!(_DWORD)v34 || v28 <= 0) {
        goto LABEL_386;
      }
      do
      {
        int v36 = *v23;
        if ((v36 & 0xFC00) != 0xDC00) {
          break;
        }
        unint64_t v209 = ++v23;
        ++v22;
        unint64_t v34 = (((_DWORD)v34 << 10) - 56613888 + v36);
        if ((v26 & 1) != 0) {
          goto LABEL_29;
        }
LABEL_123:
        while (2)
        {
          *(void *)(v3 + 16) = v23;
          uint64_t result = sub_18083A99C( v24,  *(void *)(v24 + 48),  v34,  (uint64_t *)&v209,  v27,  &v208,  (unint64_t)&v208[v28],  &v207,  v35,  *(_BYTE *)(v3 + 2),  v2);
          LODWORD(v34) = result;
          int v23 = v209;
          if (*v2 > 0) {
            goto LABEL_419;
          }
          int v35 = v22 + (((unint64_t)v209 - *(void *)(v3 + 16)) >> 1);
          int v28 = *(_DWORD *)(v3 + 40) - (_DWORD)v208;
          int v22 = v35;
LABEL_386:
          if (v28 < 1)
          {
LABEL_397:
            int v178 = 15;
LABEL_398:
            *unsigned int v2 = v178;
            goto LABEL_419;
          }

          ++v22;
          while (1)
          {
            unint64_t v34 = *v23;
            unint64_t v209 = v23 + 1;
            if (((v33 >> (v34 >> 2)) & 1) == 0)
            {
              ++v23;
LABEL_408:
              unsigned int v37 = *(unsigned __int16 *)(v32 + 2 * ((v34 & 0x3F) + *(unsigned __int16 *)(v30 + ((v34 >> 5) & 0x7FE))));
LABEL_409:
              if (!v37) {
                goto LABEL_123;
              }
LABEL_410:
              if (v37 > 0xFF)
              {
                int v184 = v208++;
                *int v184 = BYTE1(v37);
                if (v28 < 2)
                {
                  uint64_t v187 = v207;
                  if (v207)
                  {
                    int *v207 = v35;
                    v207 = v187 + 1;
                  }

                  LODWORD(v34) = 0;
                  *(_BYTE *)(v24 + 104) = v37;
                  *(_BYTE *)(v24 + 9icu::UVector32::~UVector32(this + 1) = 1;
                  *unsigned int v2 = 15;
                  int v23 = v209;
LABEL_419:
                  *(_DWORD *)(v24 + 84) = v34;
                  *(void *)(v3 + 16) = v23;
LABEL_383:
                  *(void *)(v3 + 32) = v208;
                  int64_t v145 = v207;
                  goto LABEL_384;
                }

                int v185 = v208++;
                *int v185 = v37;
                int v186 = v207;
                int v182 = -2;
                if (v207)
                {
                  uint64_t v181 = v207 + 1;
                  int *v207 = v35;
                  uint64_t v183 = v186 + 2;
LABEL_416:
                  v207 = v183;
                  *uint64_t v181 = v35;
                }
              }

              else
              {
                uint64_t v180 = v208++;
                *uint64_t v180 = v37;
                uint64_t v181 = v207;
                int v182 = -1;
                if (v207)
                {
                  uint64_t v183 = v207 + 1;
                  goto LABEL_416;
                }
              }

              LODWORD(v34) = 0;
              v28 += v182;
              int v23 = v209;
              int v35 = v22;
              goto LABEL_386;
            }

            uint64_t v175 = v208++;
            *uint64_t v175 = v34;
            v176 = v207;
            if (v207)
            {
              int *v207 = v35;
              v207 = v176 + 1;
              int v35 = v22;
            }

            int v23 = v209;
            if ((unint64_t)v209 >= v27)
            {
              LODWORD(v34) = 0;
              goto LABEL_419;
            }

            ++v22;
            if (v28-- < 2)
            {
              LODWORD(v34) = 0;
              goto LABEL_397;
            }
          }

          ++v23;
          if ((v34 & 0xF800) != 0xD800 || (v26 & 2) != 0)
          {
LABEL_29:
            unsigned int v37 = *(unsigned __int16 *)(v32
                                      + 2
                                      * (v34 & 0xF | (16
                                                    * (unsigned __int16)*(_DWORD *)(v29
                                                                                                + 4LL
            if (((*(_DWORD *)(v29 {
                             + 4LL
            }
            if (*(_BYTE *)(v24 + 63)
              || (v34 - 57344) >> 8 < 0x19
              || !((v34 - 983040) >> 17))
            {
              goto LABEL_409;
            }

            continue;
          }

          break;
        }
      }

      while ((v34 & 0x400) == 0);
      int v178 = 12;
      goto LABEL_398;
    }
  }

  else if (!*(_BYTE *)(v5 + 252) && (*(_BYTE *)(v5 + 253) & 2) == 0)
  {
    if ((*(_BYTE *)(v5 + 253) & 1) == 0)
    {
      uint64_t v10 = *(void *)(v3 + 8);
      uint64_t v9 = *(char **)(v3 + 16);
      unint64_t v11 = *(void *)(v3 + 24);
      unint64_t v208 = *(_BYTE **)(v3 + 32);
      unint64_t v209 = (unsigned __int16 *)v9;
      int v12 = *(_DWORD *)(v3 + 40) - (_DWORD)v208;
      v207 = *(int **)(v3 + 48);
      uint64_t v13 = *(void *)(v10 + 48);
      uint64_t v14 = *(void *)(v13 + 88);
      uint64_t v15 = 240LL;
      if ((*(_BYTE *)(v10 + 56) & 0x10) == 0) {
        uint64_t v15 = 232LL;
      }
      uint64_t v16 = *(void *)(v13 + v15);
      unsigned int v17 = *(_DWORD *)(v13 + 260);
      int v202 = *(unsigned __int8 *)(v10 + 63);
      LODWORD(v18) = *(_DWORD *)(v10 + 84);
      if ((_DWORD)v18) {
        int v19 = -1;
      }
      else {
        int v19 = 0;
      }
      unint64_t v20 = (v11 - (unint64_t)v9) >> 1;
      if (!(_DWORD)v18 || (signed int v21 = v9, (int)v20 <= 0))
      {
LABEL_81:
        if (v202) {
          unsigned int v75 = 2048;
        }
        else {
          unsigned int v75 = 3072;
        }
        int v76 = v20 + 1;
        while (1)
        {
          uint64_t v77 = v209;
          unsigned int v78 = *v209;
          unint64_t v18 = *v209++;
          if (v78 <= 0x7F && ((v17 >> (v18 >> 2)) & 1) != 0)
          {
            int v79 = v208++;
            _BYTE *v79 = v18;
          }

          else
          {
            unsigned int v80 = *(unsigned __int16 *)(v16
                                      + 2
                                      * ((v18 & 0xF)
                                       + *(unsigned __int16 *)(v14
                                                             + 2LL
            if (v75 > v80)
            {
              signed int v21 = (char *)(v77 + 1);
              if ((v18 & 0xF800) == 0xD800)
              {
                if ((v18 & 0x400) == 0) {
                  break;
                }
LABEL_119:
                int v91 = 12;
LABEL_122:
                *unsigned int v2 = v91;
                goto LABEL_93;
              }

LABEL_118:
              signed int v21 = v9;
              goto LABEL_93;
            }

            uint64_t v81 = v208++;
            *uint64_t v81 = v80;
          }

          if (--v76 <= 1)
          {
            LODWORD(v18) = 0;
            signed int v21 = (char *)v209;
            goto LABEL_93;
          }
        }
      }

      if ((unint64_t)v21 < v11)
      {
        int v86 = *(unsigned __int16 *)v21;
        if ((v86 & 0xFC00) != 0xDC00) {
          goto LABEL_119;
        }
        v21 += 2;
        unint64_t v209 = (unsigned __int16 *)v21;
        unint64_t v18 = (((_DWORD)v18 << 10) - 56613888 + v86);
        goto LABEL_107;
      }

      if (*(_BYTE *)(v3 + 2))
      {
        int v91 = 11;
        goto LABEL_122;
      }

LABEL_327:
      int v148 = v61 - v48;
      if ((int)v61 > v48)
      {
        int v161 = (_BYTE *)(v4 + 104);
        if (v148 == 1)
        {
          unsigned int v2 = v203;
          char v95 = v196;
        }

        else
        {
          unsigned int v2 = v203;
          char v95 = v196;
          if (v148 != 2)
          {
            if (v148 != 3) {
              goto LABEL_350;
            }
            int v161 = (_BYTE *)(v4 + 105);
            *(_BYTE *)(v4 + 104) = BYTE2(v102);
          }

          *v161++ = BYTE1(v102);
        }

        *int v161 = v102;
LABEL_350:
        *(_BYTE *)(v4 + 9icu::UVector32::~UVector32(this + 1) = v148;
        unsigned int v162 = v102 >> (8 * v148);
        if (v48 != 1)
        {
          if (v48 != 2)
          {
            if (v48 != 3) {
              goto LABEL_359;
            }
            char v163 = v205++;
            *char v163 = BYTE2(v162);
            int v164 = v204;
            if (v204)
            {
              *BOOL v204 = v49;
              BOOL v204 = v164 + 1;
            }
          }

          uint64_t v165 = v205++;
          *uint64_t v165 = BYTE1(v162);
          v166 = v204;
          if (v204)
          {
            *BOOL v204 = v49;
            BOOL v204 = v166 + 1;
          }
        }

        int v167 = v205++;
        *int v167 = v162;
        int v168 = v204;
        if (v204)
        {
          int v92 = 0;
          LODWORD(v46) = 0;
          *BOOL v204 = v49;
          BOOL v204 = v168 + 1;
LABEL_360:
          int v94 = 15;
          goto LABEL_137;
        }

              char v72 = v145;
              uint64_t v73 = v186;
            }

            unsigned int v71 = v148;
            goto LABEL_324;
        }
      }

      switch(PatternCharIndex)
      {
        case 0u:
          if (!v184)
          {
            if (v185 == 4)
            {
              int v98 = *a3;
              uint64_t v133 = a1[96];
              unsigned int v100 = *((void *)v133 + 3);
              char v101 = *((_DWORD *)v133 + 8);
              uint64_t v134 = a2;
              unsigned int v97 = a10;
            }

            else
            {
              unsigned int v97 = a10;
              int v98 = *a3;
              int v99 = a1[96];
              if (v185 == 5)
              {
                unsigned int v100 = *((void *)v99 + 5);
                char v101 = *((_DWORD *)v99 + 12);
              }

              else
              {
                unsigned int v100 = *((void *)v99 + 1);
                char v101 = *((_DWORD *)v99 + 4);
              }

              uint64_t v134 = a2;
            }

            matched = icu::SimpleDateFormat::matchString(isWhiteSpace, v134, v98, 0, v100, v101, 0LL, v97);
            uint64_t v32 = matched + *a3 == 0;
            int v28 = (__PAIR64__(matched, matched + *a3) - 1) >> 32;
            goto LABEL_28;
          }

          if (v51) {
            goto LABEL_277;
          }
          char v72 = a10;
          uint64_t v73 = 0;
          goto LABEL_323;
        case 1u:
        case 8u:
        case 0x12u:
          goto LABEL_93;
        case 2u:
        case 0x1Au:
          if ((v51 & 1) == 0)
          {
LABEL_114:
            uint64_t v70 = (const char *)(*(uint64_t (**)(_BYTE *))(*(void *)a10 + 184LL))(a10);
            if (!strcmp(v70, "hebrew"))
            {
              if (!icu::Calendar::isSet((uint64_t)a10, 1u))
              {
                uint64_t v32 = (uint64_t)a9;
                *a9 = v14;
LABEL_325:
                int v28 = v191[0];
                goto LABEL_28;
              }

              v193[0] = U_ZERO_ERROR;
              int v104 = (icu::HebrewCalendar *)icu::Calendar::get(a10, 1u, v193);
              unsigned int v106 = icu::HebrewCalendar::isLeapYear(v104) || (int)v14 < 6;
              unsigned int v71 = v14 - v106;
            }

            else
            {
              unsigned int v71 = v14 - 1;
            }

            char v72 = a10;
            goto LABEL_201;
          }

          int v60 = a1[96];
          uint64_t v61 = (const icu::UnicodeString *)*((void *)v60 + 59);
          if (v61 && *((int *)v60 + 120) >= 7)
          {
            int v62 = v185;
            if (PatternCharIndex == 2)
            {
              int v63 = (const icu::UnicodeString *)((char *)v61 + 64);
              goto LABEL_178;
            }

            int v92 = (const icu::UnicodeString *)((char *)v61 + 192);
            int v91 = (const icu::UnicodeString *)((char *)v61 + 256);
          }

          else
          {
            int v63 = 0LL;
            uint64_t v61 = 0LL;
            int v91 = 0LL;
            int v92 = 0LL;
            int v62 = v185;
            if (PatternCharIndex == 2)
            {
LABEL_178:
              uint64_t v93 = v63;
              int v94 = (icu::SimpleDateFormat *)(*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1
                                              + 28))( a1,  3LL,  &v192);
              int v28 = 0LL;
              if ((v62 - 3) <= 1 && (_DWORD)v94)
              {
                char v95 = a1[96];
                if (*((void *)v95 + 59) || (unsigned int v96 = *((_DWORD *)v95 + 16), v96 != *((_DWORD *)v95 + 20)))
                {
                  int v28 = 0LL;
                }

                else
                {
                  int v28 = icu::SimpleDateFormat::matchAlphaMonthStrings( v94,  (const icu::UnicodeString *)a2,  *a3,  *((const icu::UnicodeString **)v95 + 7),  *((const icu::UnicodeString **)v95 + 9),  v96,  (icu::Calendar *)a10);
                }
              }

              int v131 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3LL, &v192);
              if (v185 == 4 || (_DWORD)v131)
              {
                int v28 = icu::SimpleDateFormat::matchString( v131,  a2,  *a3,  2,  *((void *)a1[96] + 7),  *((_DWORD *)a1[96] + 16),  v61,  a10);
              }

              int v108 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3LL, &v192);
              if (v185 != 3 && !(_DWORD)v108) {
                goto LABEL_267;
              }
              unsigned int v109 = *a3;
              int v132 = a1[96];
              unint64_t v111 = *((void *)v132 + 9);
              int v112 = *((_DWORD *)v132 + 20);
              int v113 = a2;
              int v114 = 2;
              unsigned int v115 = v93;
              goto LABEL_266;
            }
          }

          uint64_t v136 = (icu::SimpleDateFormat *)(*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1
                                           + 28))( a1,  3LL,  &v192);
          int v28 = 0LL;
          if ((v62 - 3) <= 1 && (_DWORD)v136)
          {
            int v137 = a1[96];
            if (*((void *)v137 + 59) || (uint64_t v138 = *((_DWORD *)v137 + 28), v138 != *((_DWORD *)v137 + 32)))
            {
              int v28 = 0LL;
            }

            else
            {
              int v28 = icu::SimpleDateFormat::matchAlphaMonthStrings( v136,  (const icu::UnicodeString *)a2,  *a3,  *((const icu::UnicodeString **)v137 + 13),  *((const icu::UnicodeString **)v137 + 15),  v138,  (icu::Calendar *)a10);
            }
          }

          uint64_t v139 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3LL, &v192);
          if (v185 == 4 || (_DWORD)v139)
          {
            int v28 = icu::SimpleDateFormat::matchString( v139,  a2,  *a3,  2,  *((void *)a1[96] + 13),  *((_DWORD *)a1[96] + 28),  v92,  a10);
          }

          int v108 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3LL, &v192);
          if (v185 != 3 && !(_DWORD)v108) {
            goto LABEL_267;
          }
          unsigned int v109 = *a3;
          unint64_t v140 = a1[96];
          unint64_t v111 = *((void *)v140 + 15);
          int v112 = *((_DWORD *)v140 + 32);
          int v113 = a2;
          int v114 = 2;
          unsigned int v115 = v91;
LABEL_266:
          int v28 = icu::SimpleDateFormat::matchString(v108, v113, v109, v114, v111, v112, v115, a10);
LABEL_267:
          isWhiteSpace = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))( a1,  1LL,  &v192);
          if ((_DWORD)isWhiteSpace) {
            goto LABEL_268;
          }
LABEL_28:
          icu::UnicodeString::~UnicodeString((void *)v32, (icu::UnicodeString *)v194);
          goto LABEL_29;
        case 3u:
        case 6u:
        case 7u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          goto LABEL_268;
        case 4u:
        case 5u:
        case 0xFu:
        case 0x10u:
          if (v14 < 0x19)
          {
LABEL_93:
            if (!v51)
            {
              switch(PatternCharIndex)
              {
                case 1u:
                  if (sub_180941B08((uint64_t)(a1 + 52), (uint64_t)v194) || (int)v14 > 999)
                  {
                    char v152 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)a2, *a3, 2);
                    uint64_t v153 = v152 != v191[0] || v184;
                    if ((v153 & 1) == 0)
                    {
                      int v154 = icu::UnicodeString::char32At((uint64_t *)v153, (icu::UnicodeString *)a2, *a3);
                      if (u_isdigit(v154))
                      {
                        uint64_t v155 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)a2, *a3, 1);
                        uint64_t v157 = icu::UnicodeString::char32At(v156, (icu::UnicodeString *)a2, v155);
                        uint64_t v158 = u_isdigit(v157);
                        if (v185 <= 2 && v158 && *((_BYTE *)a1 + 816))
                        {
                          int v159 = *((_DWORD *)a1 + 199) % 100;
                          *a8 = (_DWORD)v14 == v159;
                          else {
                            int v160 = 100;
                          }
                          uint64_t v14 = (v14 + 100 * (*((_DWORD *)a1 + 199) / 100) + v160);
                        }
                      }
                    }
                  }

                  else
                  {
                    uint64_t v14 = (v14 + 5000);
                  }

                  icu::Calendar::set(a10, 1u, v14);
                  uint64_t v32 = *a9;
                  if ((v32 & 0x80000000) == 0)
                  {
                    isLeapYea__int16 r = icu::HebrewCalendar::isLeapYear((icu::HebrewCalendar *)v14);
                    unsigned int v162 = *a9;
                    int v164 = isLeapYear || v162 < 6;
                    icu::Calendar::set(a10, 2u, v162 - v164);
                    uint64_t v32 = 0xFFFFFFFFLL;
                    *a9 = -1;
                  }

                  goto LABEL_325;
                case 2u:
                  goto LABEL_114;
                case 4u:
                  if ((_DWORD)v14 == (*(unsigned int (**)(_BYTE *, uint64_t))(*(void *)a10 + 128LL))( a10,  11LL)
                                    + 1)
                    LODWORD(v14) = 0;
                  goto LABEL_229;
                case 5u:
LABEL_229:
                  char v72 = a10;
                  uint64_t v73 = 11;
                  goto LABEL_323;
                case 8u:
                  int v124 = icu::SimpleDateFormat::countDigits( (const icu::UnicodeString *)a2,  *a3,  v183,  PatternCharIndex - 1);
                  if (v124 > 2)
                  {
                    if (v124 == 3)
                    {
                      uint64_t v165 = 1;
                    }

                    else
                    {
                      unsigned int v173 = (uint32x4_t)vdupq_n_s32(v124 - 4);
                      v174.i64[0] = 0x100000001LL;
                      v174.i64[1] = 0x100000001LL;
                      uint64_t v175 = -4;
                      v176.i64[0] = 0xA0000000ALL;
                      v176.i64[1] = 0xA0000000ALL;
                      do
                      {
                        int v177 = (int8x16_t)v174;
                        int v174 = vmulq_s32(v174, v176);
                        v175 += 4;
                      }

                      while (((v124 - 4) & 0xFFFFFFFC) != v175);
                      int v178 = vbslq_s8( (int8x16_t)vcgtq_u32( (uint32x4_t)vorrq_s8( (int8x16_t)vdupq_n_s32(v175),  (int8x16_t)xmmword_180A267F0),  v173),  v177,  (int8x16_t)v174);
                      *(int32x2_t *)v178.i8 = vmul_s32( *(int32x2_t *)v178.i8,  (int32x2_t)*(_OWORD *)&vextq_s8(v178, v178, 8uLL));
                      uint64_t v165 = v178.i32[0] * v178.i32[1];
                    }

                    unsigned int v71 = (int)v14 / v165;
                  }

                  else
                  {
                    uint64_t v125 = 0;
                    int v126 = (uint32x4_t)vdupq_n_s32(2 - v124);
                    v127.i64[1] = 0x100000001LL;
                    v127.i64[0] = v14 | 0x100000000LL;
                    v128.i64[0] = 0xA0000000ALL;
                    v128.i64[1] = 0xA0000000ALL;
                    do
                    {
                      int v129 = (int8x16_t)v127;
                      BOOL v127 = vmulq_s32(v127, v128);
                      v125 += 4;
                    }

                    while (((6 - v124) & 0xFFFFFFFC) != v125);
                    int v130 = vbslq_s8( (int8x16_t)vcgtq_u32( (uint32x4_t)vorrq_s8( (int8x16_t)vdupq_n_s32(v125 - 4),  (int8x16_t)xmmword_180A267F0),  v126),  v129,  (int8x16_t)v127);
                    *(int32x2_t *)v130.i8 = vmul_s32( *(int32x2_t *)v130.i8,  (int32x2_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL));
                    unsigned int v71 = v130.i32[0] * v130.i32[1];
                  }

                  char v72 = a10;
                  uint64_t v73 = 14;
                  goto LABEL_324;
                case 9u:
                  goto LABEL_120;
                case 0xEu:
                  goto LABEL_106;
                case 0xFu:
                  if ((_DWORD)v14 == (*(unsigned int (**)(_BYTE *, uint64_t))(*(void *)a10 + 160LL))( a10,  10LL)
                                    + 1)
                    LODWORD(v14) = 0;
                  goto LABEL_236;
                case 0x10u:
LABEL_236:
                  char v72 = a10;
                  uint64_t v73 = 10;
                  goto LABEL_323;
                case 0x11u:
                  goto LABEL_112;
                case 0x12u:
                  if (sub_180941B08((uint64_t)(a1 + 52), (uint64_t)v194) || (int)v14 > 999)
                  {
                    v166 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)a2, *a3, 2);
                    if (v166 == v191[0])
                    {
                      int v167 = icu::UnicodeString::char32At( (uint64_t *)v191[0],  (icu::UnicodeString *)a2,  *a3);
                      if (u_isdigit(v167))
                      {
                        int v168 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)a2, *a3, 1);
                        int v170 = icu::UnicodeString::char32At(v169, (icu::UnicodeString *)a2, v168);
                        if (u_isdigit(v170))
                        {
                          if (*((_BYTE *)a1 + 816))
                          {
                            int v171 = *((_DWORD *)a1 + 199) % 100;
                            *a8 = (_DWORD)v14 == v171;
                            else {
                              unsigned int v172 = 100;
                            }
                            LODWORD(v14) = v14 + 100 * (*((_DWORD *)a1 + 199) / 100) + v172;
                          }
                        }
                      }
                    }
                  }

                  else
                  {
                    LODWORD(v14) = v14 + 5000;
                  }

                  char v72 = a10;
                  uint64_t v73 = 17;
                  goto LABEL_323;
                default:
                  goto LABEL_268;
              }
            }
          }

          goto LABEL_277;
        case 9u:
          goto LABEL_120;
        case 0xEu:
LABEL_106:
          uint64_t v64 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3LL, &v192);
          if (v185 >= 5 && !(_DWORD)v64
            || (int v28 = icu::SimpleDateFormat::matchString( v64,  a2,  *a3,  9,  *((void *)a1[96] + 35),  *((_DWORD *)a1[96] + 72),  0LL,  a10),  (int)v28 <= 0))
          {
            unint64_t v65 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3LL, &v192);
            if (v185 <= 4 && !(_DWORD)v65) {
              goto LABEL_277;
            }
            int v66 = icu::SimpleDateFormat::matchString( v65,  a2,  *a3,  9,  *((void *)a1[96] + 37),  *((_DWORD *)a1[96] + 76),  0LL,  a10);
            int v28 = v66;
          }

          goto LABEL_28;
        case 0x11u:
LABEL_112:
          uint64_t v67 = icu::SimpleDateFormat::tzFormat((icu::SimpleDateFormat *)a1, &v192);
          if (v192 > U_ZERO_ERROR) {
            goto LABEL_277;
          }
          uint64_t v68 = v185 < 4;
          uint64_t v69 = 3;
          goto LABEL_132;
        case 0x13u:
          if ((v51 & 1) == 0) {
            goto LABEL_161;
          }
LABEL_120:
          int v74 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3LL, &v192);
          if (v185 == 4 || (_DWORD)v74)
          {
            int v28 = icu::SimpleDateFormat::matchString( v74,  a2,  *a3,  7,  *((void *)a1[96] + 19),  *((_DWORD *)a1[96] + 40),  0LL,  a10);
          }

          else
          {
            int v28 = 0LL;
          }

          int v88 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3LL, &v192);
          if (v185 == 3 || (_DWORD)v88)
          {
            int v28 = icu::SimpleDateFormat::matchString( v88,  a2,  *a3,  7,  *((void *)a1[96] + 21),  *((_DWORD *)a1[96] + 44),  0LL,  a10);
          }

          int v89 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3LL, &v192);
          if (v185 == 6 || (_DWORD)v89)
          {
            int v28 = icu::SimpleDateFormat::matchString( v89,  a2,  *a3,  7,  *((void *)a1[96] + 23),  *((_DWORD *)a1[96] + 48),  0LL,  a10);
          }

          unsigned int v90 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3LL, &v192);
          if (v185 == 5 || (_DWORD)v90)
          {
            int v28 = icu::SimpleDateFormat::matchString( v90,  a2,  *a3,  7,  *((void *)a1[96] + 25),  *((_DWORD *)a1[96] + 52),  0LL,  a10);
          }

          isWhiteSpace = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))( a1,  1LL,  &v192);
          if (!(_DWORD)isWhiteSpace || PatternCharIndex == 9) {
            goto LABEL_28;
          }
          goto LABEL_268;
        case 0x17u:
          unsigned int v75 = (unsigned int *)icu::SimpleDateFormat::tzFormat((icu::SimpleDateFormat *)a1, &v192);
          if (v192 <= U_ZERO_ERROR)
          {
            int v76 = v185 == 5 ? 15 : 5;
            uint64_t v77 = v185 >= 4 ? v76 : 12LL;
            int v79 = icu::TimeZoneFormat::parse(v75, v77, a2, (uint64_t)&v190, a13);
            if (v79) {
              goto LABEL_158;
            }
          }

          goto LABEL_277;
        case 0x18u:
          uint64_t v67 = icu::SimpleDateFormat::tzFormat((icu::SimpleDateFormat *)a1, &v192);
          if (v192 > U_ZERO_ERROR) {
            goto LABEL_277;
          }
          uint64_t v68 = v185 < 4;
          uint64_t v69 = 1;
LABEL_132:
          if (v68) {
            unsigned int v78 = v69 + 1;
          }
          else {
            unsigned int v78 = v69;
          }
          int v79 = (*(uint64_t (**)(icu::TimeZoneFormat *, uint64_t, uint64_t, void (***)(icu::ParsePosition *__hidden), BOOL, uint64_t))(*(void *)v67 + 72LL))( v67,  v78,  a2,  &v190,  v20,  a13);
          if (!v79) {
            goto LABEL_277;
          }
LABEL_158:
          uint64_t v85 = v79;
          int v86 = a10;
          goto LABEL_191;
        case 0x19u:
          if ((v51 & 1) == 0)
          {
LABEL_161:
            char v72 = a10;
            uint64_t v73 = 18;
LABEL_323:
            unsigned int v71 = v14;
            goto LABEL_324;
          }

          unsigned int v80 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3LL, &v192);
          if (v185 == 4 || (_DWORD)v80)
          {
            int v28 = icu::SimpleDateFormat::matchString( v80,  a2,  *a3,  7,  *((void *)a1[96] + 27),  *((_DWORD *)a1[96] + 56),  0LL,  a10);
          }

          else
          {
            int v28 = 0LL;
          }

          unint64_t v107 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3LL, &v192);
          if (v185 == 3 || (_DWORD)v107)
          {
            int v28 = icu::SimpleDateFormat::matchString( v107,  a2,  *a3,  7,  *((void *)a1[96] + 29),  *((_DWORD *)a1[96] + 60),  0LL,  a10);
          }

          int v108 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3LL, &v192);
          if (v185 != 6 && !(_DWORD)v108) {
            goto LABEL_267;
          }
          unsigned int v109 = *a3;
          unsigned int v110 = a1[96];
          unint64_t v111 = *((void *)v110 + 31);
          int v112 = *((_DWORD *)v110 + 64);
          int v113 = a2;
          int v114 = 7;
          unsigned int v115 = 0LL;
          goto LABEL_266;
        case 0x1Bu:
          if ((v51 & 1) == 0) {
            goto LABEL_162;
          }
          uint64_t v81 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3LL, &v192);
          if (v185 == 4 || (_DWORD)v81)
          {
            int v28 = icu::SimpleDateFormat::matchQuarterString( v81,  a2,  *a3,  2u,  *((void *)a1[96] + 47),  *((_DWORD *)a1[96] + 96),  a10);
          }

          else
          {
            int v28 = 0LL;
          }

          unsigned int v116 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3LL, &v192);
          if (v185 == 3 || (_DWORD)v116)
          {
            int v28 = icu::SimpleDateFormat::matchQuarterString( v116,  a2,  *a3,  2u,  *((void *)a1[96] + 49),  *((_DWORD *)a1[96] + 100),  a10);
          }

          int v117 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3LL, &v192);
          if (v185 == 5 || (_DWORD)v117)
          {
            unsigned int v118 = *a3;
            unsigned int v119 = a1[96];
            unsigned int v120 = *((void *)v119 + 51);
            int v121 = *((_DWORD *)v119 + 104);
LABEL_223:
            int v28 = icu::SimpleDateFormat::matchQuarterString(v117, a2, v118, 2u, v120, v121, a10);
          }

LABEL_258:
        if (((v100 >> (v101 | 0x10)) & 1) != 0)
        {
          uint64_t v61 = v103;
          goto LABEL_327;
        }

        if (*(_BYTE *)(v4 + 63) || (v46 - 57344) >> 8 < 0x19 || !((v46 - 983040) >> 17))
        {
          uint64_t v61 = v103;
          if (v102) {
            goto LABEL_327;
          }
        }

LABEL_305:
        int v200 = v60;
        *(void *)(v3 + 16) = v39;
        uint64_t v133 = *(void *)(v4 + 48);
        uint64_t v134 = v6;
        unsigned int v2 = v203;
        char v189 = *(_BYTE *)(v3 + 2);
        int v188 = v49;
        uint64_t v135 = v4;
        uint64_t v136 = v43;
        int v137 = v49;
        uint64_t v138 = v4;
        uint64_t v139 = v3;
        unint64_t v140 = v38;
        uint64_t v141 = v103;
        uint64_t result = sub_18083A99C( v135,  v133,  v46,  (uint64_t *)&v206,  v38,  &v205,  (unint64_t)&v205[v48],  &v204,  v188,  v189,  v203);
        uint64_t v142 = v141;
        unint64_t v38 = v140;
        uint64_t v3 = v139;
        uint64_t v4 = v138;
        int v49 = v137;
        uint64_t v43 = v136;
        uint64_t v6 = v134;
        int v60 = v200;
        unsigned int v59 = v201;
        char v7 = v198;
        int v8 = v199;
        LODWORD(v46) = result;
        int v47 = *(_DWORD *)(v4 + 80);
        if (*v203 > 0)
        {
LABEL_162:
          char v95 = v196;
          goto LABEL_163;
        }

        int v39 = (unsigned __int16 *)v206;
        v58 += (v206 - *(void *)(v3 + 16)) >> 1;
        int v48 = *(_DWORD *)(v3 + 40) - (_DWORD)v205;
        int v42 = v204;
        if (v204)
        {
          int v60 = v49;
          int v49 = v58;
        }

        uint64_t v61 = v142;
        break;
    }
  }

  if ((v46 & 0x400) != 0) {
    goto LABEL_266;
  }
LABEL_149:
  int v98 = *v39;
  if ((v98 & 0xFC00) == 0xDC00)
  {
    int v99 = 0;
    unint64_t v206 = (unint64_t)++v39;
    ++v58;
    unint64_t v46 = (((_DWORD)v46 << 10) - 56613888 + v98);
    if ((v7 & 1) == 0)
    {
      *(_DWORD *)(v4 + 80) = v47;
      int v99 = 6;
    }

    if (v99 == 6)
    {
LABEL_304:
      uint64_t v103 = v61;
      goto LABEL_305;
    }

    goto LABEL_154;
  }

LABEL_266:
  int v94 = 12;
  int v92 = v48;
LABEL_136:
  char v95 = v196;
LABEL_137:
  *unsigned int v2 = v94;
  int v48 = v92;
LABEL_163:
  if ((_DWORD)v6 == 12 && *v2 <= 0 && v47 == 2)
  {
    if (*(_BYTE *)(v3 + 2))
    {
      int v47 = 2;
      if (v206 >= v38 && !(_DWORD)v46)
      {
        if (v48 < 1)
        {
          *(_BYTE *)(v4 + 104) = v194;
          if (v193 == 2) {
            *(_BYTE *)(v4 + 105) = BYTE4(v192);
          }
          *(_BYTE *)(v4 + 9icu::UVector32::~UVector32(this + 1) = v95;
          *unsigned int v2 = 15;
        }

        else
        {
          __int16 v105 = v205++;
          *__int16 v105 = v194;
          if (v193 == 2)
          {
            if (v48 > 1)
            {
              BOOL v143 = v205++;
              *BOOL v143 = BYTE4(v192);
            }

            else
            {
              *(_BYTE *)(v4 + 104) = BYTE4(v192);
              *(_BYTE *)(v4 + 9icu::UVector32::~UVector32(this + 1) = 1;
              *unsigned int v2 = 15;
            }
          }

          __int128 v144 = v204;
          if (v204)
          {
            *BOOL v204 = v60;
            BOOL v204 = v144 + 1;
          }
        }

        int v47 = 1;
      }
    }

    else
    {
      int v47 = 2;
    }
  }

  *(_DWORD *)(v4 + 80) = v47;
  *(_DWORD *)(v4 + 84) = v46;
  *(void *)(v3 + 16) = v206;
  *(void *)(v3 + 32) = v205;
  int64_t v145 = v204;
LABEL_384:
  *(void *)(v3 + 48) = v145;
  return result;
}

              int v129 = *((_DWORD *)v128 + 1);
              if ((int)a4 > 3)
              {
                int v159 = *(void *)(v14 + 768);
                else {
                  uint64_t v158 = *(void *)(v159 + 896);
                }
              }

              else
              {
                uint64_t v158 = *(void *)(*(void *)(v14 + 768) + 864LL);
              }

              uint64_t v155 = v158 + ((uint64_t)(int)v129 << 6);
              goto LABEL_274;
            }

uint64_t sub_18083A99C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, void *a6, unint64_t a7, void *a8, int a9, char a10, _DWORD *a11)
{
  uint64_t v14 = a3;
  *(_BYTE *)(a1 + 95) = 0;
  unint64_t v16 = *(void *)(a2 + 288);
  if (!v16 || !sub_18082B838(a1, v16, a3, a4, a5, a6, a7, a8, a9, a10, a11))
  {
    if ((*(_BYTE *)(a1 + 57) & 0x80) == 0)
    {
LABEL_10:
      *a11 = 10;
      return v14;
    }

    uint64_t v17 = 0LL;
    while (1)
    {
      unsigned int v18 = dword_180A26704[v17];
      BOOL v19 = v14 >= v18;
      int v20 = v14 - v18;
      v17 += 4LL;
      if ((_DWORD)(v17 * 4) == 224) {
        goto LABEL_10;
      }
    }

    unsigned int v22 = v20 + dword_180A26704[v17 + 2] - 1687218;
    v23[3] = (v22 % 0xA) | 0x30;
    uint64_t v23[2] = v22 / 0xA - 126 * ((545392673 * (unint64_t)(v22 / 0xA)) >> 36) - 127;
    v23[1] = (v22 / 0x4EC - 10 * ((429496730 * (unint64_t)(v22 / 0x4EC)) >> 32)) | 0x30;
    v23[0] = v22 / 0x3138 - 127;
    sub_180829514(a1, v23, 4, a6, a7, a8, a9, a11);
  }

  return 0LL;
}

uint64_t sub_18083AB3C(uint64_t a1, int a2, int *a3, int a4)
{
  if (a2 < 0x10000 || (*(_BYTE *)(a1 + 253) & 1) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (*(_BYTE *)(a1 + 252) != 1)
    {
      if (*(_BYTE *)(a1 + 252)) {
        return 0xFFFFFFFFLL;
      }
      unsigned int v5 = *(unsigned __int16 *)(*(void *)(a1 + 232)
                               + 2LL
                               * ((a2 & 0xF)
                                + *(unsigned __int16 *)(v4
                                                                    + 2LL
      if (a4)
      {
        if (v5 <= 0x7FF) {
          goto LABEL_20;
        }
      }

      else if (v5 < 0xC00)
      {
        goto LABEL_20;
      }

      *a3 = v5;
      return 1LL;
    }

    unsigned int v6 = *(_DWORD *)(v4 + 4LL * (((a2 >> 4) & 0x3F) + *(unsigned __int16 *)(v4 + 2LL * (a2 >> 10))));
    unsigned int v7 = *(unsigned __int16 *)(*(void *)(a1 + 232) + 2LL * (a2 & 0xF | (16 * (unsigned __int16)v6)));
    if (v7 < 0x100) {
      uint64_t v8 = 1LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    if (((v6 >> (a2 & 0xF | 0x10)) & 1) != 0
      || (a4 || (a2 - 57344) >> 8 < 0x19 || !((a2 - 983040) >> 17))
      && *(_WORD *)(*(void *)(a1 + 232) + 2LL * (a2 & 0xF | (16 * (unsigned __int16)v6))))
    {
      *a3 = v7;
      return v8;
    }
  }

BOOL sub_18083AC50(uint64_t a1, unsigned __int8 a2)
{
  return *(_DWORD *)(*(void *)(a1 + 56) + 4LL * a2) >= 0;
}

uint64_t sub_18083AC68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (*(_BYTE *)(v1 + 48) == 1) {
    return 0LL;
  }
  if (*(_BYTE *)(v1 + 252) == 12) {
    return 9LL;
  }
  uint64_t v3 = *(void *)(v1 + 16);
  if (*(_BYTE *)(v3 + 70) == 2 && *(_BYTE *)(v3 + 71) == 2) {
    return 1LL;
  }
  else {
    return 2LL;
  }
}

void sub_18083ACC0(uint64_t a1, uint64_t a2, unsigned __int8 *a3, UErrorCode *a4)
{
  uint64_t v90 = *MEMORY[0x1895F89C0];
  int v8 = *a3;
  if (v8 == 5)
  {
    if (a3[1] < 3u) {
      goto LABEL_32;
    }
    unsigned int v22 = *((_DWORD *)a3 + 8);
    if ((v22 & 0xFF80) != 0) {
      goto LABEL_32;
    }
    int v12 = *((_DWORD *)a3 + 8) & 0x3F;
    unsigned int v10 = *((_DWORD *)a3 + 6);
    *(_BYTE *)(a1 + 252) = v10;
    unint64_t v11 = (unsigned __int8 *)(a1 + 252);
    int v9 = (v22 >> 6) & 1;
    if ((v22 & 0x40) != 0 && !(_BYTE)v10) {
      goto LABEL_32;
    }
  }

  else
  {
    if (v8 != 4) {
      goto LABEL_32;
    }
    int v9 = 0;
    unsigned int v10 = *((_DWORD *)a3 + 6);
    *(_BYTE *)(a1 + 252) = v10;
    unint64_t v11 = (unsigned __int8 *)(a1 + 252);
    int v12 = 8;
  }

  if (v10 >= 0x100) {
    *(void *)(a1 + 288) = &a3[v10 >> 8];
  }
  uint64_t v81 = 0LL;
  uint64_t v82 = 0LL;
  int v83 = 0;
  uint64_t v13 = (_BYTE *)(a1 + 48);
  if (((1 << v10) & 0x130F) != 0)
  {
    if (*(_BYTE *)(a2 + 8)) {
      return;
    }
    uint64_t v14 = *((unsigned int *)a3 + 1);
    *(_BYTE *)(a1 + 48) = v14;
    *(_DWORD *)(a1 + 52) = *((_DWORD *)a3 + 2);
    uint64_t v15 = &a3[4 * v12];
    *(void *)(a1 + 56) = v15;
    *(void *)(a1 + 80) = &v15[1024 * v14];
    *(void *)(a1 + 72) = &a3[*((unsigned int *)a3 + 3)];
    *(void *)(a1 + 88) = &a3[*((unsigned int *)a3 + 4)];
    *(void *)(a1 + 232) = &a3[*((unsigned int *)a3 + 5)];
    *(_DWORD *)(a1 + 248) = *((_DWORD *)a3 + 7);
    LOWORD(v8icu::UVector32::~UVector32(this + 1) = 20;
    udata_getInfo(*(void **)(a1 + 8), &v81);
    if (BYTE4(v82) > 6u || BYTE4(v82) == 6 && BYTE5(v82))
    {
      unsigned int v16 = *(_BYTE *)(*(void *)(a1 + 16) + 79LL) & 3;
      *(_BYTE *)(a1 + 253) = v16;
      if (a3[1] >= 3u && v16 < 2)
      {
        unsigned int v17 = a3[2];
        if (*v13 == 1)
        {
          if (v17 > 0xE)
          {
            uint64_t v18 = 0LL;
            uint64_t v19 = 0LL;
            *(_BYTE *)(a1 + 254) = 1;
            uint64_t v20 = *(void *)(a1 + 88);
            do
            {
              *(_WORD *)(a1 + 104 + 2 * v19) = *(_WORD *)(v20
                                                        + 2
                                                        * ((v18 & 0x3C)
                                                         + *(unsigned __int16 *)(v20 + 2LL * (v19 >> 4))));
              ++v19;
              v18 += 4LL;
            }

            while (v19 != 64);
            __int16 v21 = 4095;
LABEL_42:
            *(_WORD *)(a1 + 256) = v21;
          }
        }

        else if (v17 > 0xD6)
        {
          *(_BYTE *)(a1 + 254) = 1;
          if ((v9 & 1) != 0) {
            uint64_t v28 = 0LL;
          }
          else {
            uint64_t v28 = *(unsigned int *)(a1 + 248);
          }
          *(void *)(a1 + 96) = *(void *)(a1 + 232) + v28;
          __int16 v21 = (a3[2] << 8) | 0xFF;
          goto LABEL_42;
        }
      }
    }

    else
    {
      LOBYTE(v16) = 3;
      *(_BYTE *)(a1 + 253) = 3;
    }

    uint64_t v29 = 0LL;
    int32x4_t v30 = (int32x4_t)xmmword_180A267F0;
    v31.i64[0] = -1LL;
    v31.i64[1] = -1LL;
    v32.i64[0] = 0x100000001LL;
    v32.i64[1] = 0x100000001LL;
    v33.i64[0] = 0x400000004LL;
    v33.i64[1] = 0x400000004LL;
    do
    {
      int8x16_t v31 = vandq_s8( vornq_s8( (int8x16_t)vceqq_s32( *(int32x4_t *)(*(void *)(a1 + 56) + v29),  (int32x4_t)(*(_OWORD *)&v30 | __PAIR128__(0x8000000080000000LL, 0x8000000080000000LL))),  (int8x16_t)vshlq_u32(v32, vshrq_n_u32((uint32x4_t)v30, 2uLL))),  v31);
      int32x4_t v30 = vaddq_s32(v30, v33);
      v29 += 16LL;
    }

    while (v29 != 512);
    int8x8_t v34 = vand_s8(*(int8x8_t *)v31.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
    *(_DWORD *)(a1 + 260) = v34.i32[0] & v34.i32[1];
    if (v9)
    {
      unsigned int v80 = v11;
      if ((v16 & 1) != 0) {
        unsigned int v35 = 1088;
      }
      else {
        unsigned int v35 = 64;
      }
      int v36 = *((_DWORD *)a3 + 4);
      int v37 = *((_DWORD *)a3 + 5);
      uint64_t v38 = *((unsigned int *)a3 + 9);
      size_t v39 = 4 * (_DWORD)v38 + 2 * v35 + *(_DWORD *)(a1 + 248);
      int v40 = (char *)uprv_malloc(v39);
      *(void *)(a1 + 264) = v40;
      if (v40)
      {
        int v41 = v40;
        bzero(v40, v39);
        int v42 = *(char **)(a1 + 88);
        memcpy(v41, v42, 2 * v35);
        uint64_t v43 = &v41[2 * v35];
        memcpy( &v43[4 * (v38 - (((v37 - v36) >> 2) - (v35 >> 1)))],  &v42[2 * v35],  4 * (((v37 - v36) >> 2) - (v35 >> 1)));
        *(void *)(a1 + 88) = v41;
        *(void *)(a1 + 232) = &v43[4 * v38];
        unsigned int v44 = *(unsigned __int16 *)(a1 + 256);
        unint64_t v11 = v80;
        if (v44 >= 0x3F)
        {
          uint64_t v45 = 0LL;
          signed int v46 = 0;
          signed int v47 = (v44 + 1) >> 6;
          do
          {
            uint64_t v48 = *(unsigned __int16 *)&v41[2 * v45];
            if (v35 >> 1 == (_DWORD)v48)
            {
              v46 += 16;
            }

            else
            {
              uint64_t v49 = 0LL;
              uint64_t v50 = *(void *)(a1 + 96) + 2LL * v46;
              int v51 = &v41[4 * v48];
              do
              {
                if (*(_WORD *)(v50 + 2 * v49))
                {
                  unsigned int v52 = *(unsigned __int16 *)(v50 + 2 * v49) >> 4;
                  *(_DWORD *)int v51 = v52;
                  *(int32x2_t *)(v51 + 4) = vadd_s32(vdup_n_s32(v52), (int32x2_t)0x200000001LL);
                  *((_DWORD *)v51 + 3) = v52 + 3;
                }

                ++v49;
                v51 += 16;
              }

              while ((_DWORD)v49 != 16);
              v46 += 16;
            }

            ++v45;
          }

          while (v46 < v47);
        }

        *(void *)&__int128 v53 = -1LL;
        *((void *)&v53 + icu::UVector32::~UVector32(this + 1) = -1LL;
        __int128 v88 = v53;
        __int128 v89 = v53;
        __int128 v86 = v53;
        __int128 v87 = v53;
        *(_OWORD *)&v84[32] = v53;
        __int128 v85 = v53;
        *(_OWORD *)uint64_t v84 = v53;
        *(_OWORD *)&v84[16] = v53;
        sub_18083BF58(*(void *)(a1 + 56), (uint64_t)v84, 0);
        unsigned int v54 = *(unsigned __int8 *)(a1 + 48);
        if (*(_BYTE *)(a1 + 48))
        {
          unint64_t v55 = 0LL;
          do
          {
            if ((char)v84[v55] >= 64)
            {
              sub_18083C140(a1 + 48, (uint64_t)v84, v55, 0, 0, a1 + 48);
              unsigned int v54 = *v13;
            }

            ++v55;
          }

          while (v55 < v54);
        }
      }

      else
      {
        *a4 = U_MEMORY_ALLOCATION_ERROR;
        unint64_t v11 = v80;
      }
    }

    goto LABEL_67;
  }

  memset(&v84[8], 0, 32);
  uint64_t v23 = *(void *)(a1 + 288);
  if (!v23) {
    goto LABEL_32;
  }
  if (*(_DWORD *)(a2 + 4) != 1)
  {
    int v27 = 14;
    goto LABEL_33;
  }

  uint64_t v24 = (const char *)&a3[4 * v12];
  if (!strcmp(v24, (const char *)(*(void *)(a1 + 16) + 4LL)))
  {
LABEL_32:
    int v27 = 13;
LABEL_33:
    *a4 = v27;
    return;
  }

  *(void *)uint64_t v84 = 0x200000028LL;
  char v84[8] = *(_BYTE *)(a2 + 8);
  *(_WORD *)&v84[10] = *(_WORD *)(a2 + 10);
  *(_DWORD *)&v84[12] = *(_DWORD *)(a2 + 12);
  *(void *)&v84[16] = *(void *)(a2 + 16);
  *(void *)&v84[24] = v24;
  uint64_t v25 = ucnv_load((uint64_t)v84, a4);
  uint64_t v26 = (uint64_t)v25;
  if (*(_BYTE *)(*((void *)v25 + 2) + 69LL) != 2 || *((void *)v25 + 35))
  {
    ucnv_unload((uint64_t)v25);
    goto LABEL_32;
  }

  if (*(_BYTE *)(a2 + 8))
  {
    ucnv_unload((uint64_t)v25);
    return;
  }

  __int128 v58 = *((_OWORD *)v25 + 3);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)v25 + 4);
  __int128 v59 = *((_OWORD *)v25 + 5);
  __int128 v60 = *((_OWORD *)v25 + 6);
  __int128 v61 = *((_OWORD *)v25 + 8);
  *(_OWORD *)(a1 + 112) = *((_OWORD *)v25 + 7);
  *(_OWORD *)(a1 + 128) = v61;
  *(_OWORD *)(a1 + 80) = v59;
  *(_OWORD *)(a1 + 96) = v60;
  __int128 v62 = *((_OWORD *)v25 + 9);
  __int128 v63 = *((_OWORD *)v25 + 10);
  __int128 v64 = *((_OWORD *)v25 + 12);
  *(_OWORD *)(a1 + 176) = *((_OWORD *)v25 + 11);
  *(_OWORD *)(a1 + 192) = v64;
  *(_OWORD *)(a1 + 144) = v62;
  *(_OWORD *)(a1 + 160) = v63;
  __int128 v65 = *((_OWORD *)v25 + 13);
  __int128 v66 = *((_OWORD *)v25 + 14);
  __int128 v67 = *((_OWORD *)v25 + 15);
  *(void *)(a1 + 256) = *((void *)v25 + 32);
  *(_OWORD *)(a1 + 224) = v66;
  *(_OWORD *)(a1 + 240) = v67;
  *(_OWORD *)(a1 + 208) = v65;
  *(_OWORD *)uint64_t v13 = v58;
  *(void *)(a1 + 280) = v25;
  *(void *)(a1 + 288) = v23;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 240) = 0LL;
  *(void *)(a1 + 264) = 0LL;
  *(void *)(a1 + 272) = 0LL;
  uint64_t v68 = *(void *)(a1 + 16);
  int v69 = *(unsigned __int8 *)(v68 + 69);
  if (v69 == 1 || v69 == 2 && *(char *)(v68 + 70) >= 2)
  {
    if (v25[252] == 12)
    {
      unsigned int v70 = *(_DWORD *)(*(void *)(a1 + 56) + 56LL);
      if ((v70 & 0x80F00000) != 0x80800000) {
        goto LABEL_67;
      }
      int v71 = HIBYTE(v70) & 0x7F;
      if (!v71) {
        goto LABEL_67;
      }
      char v72 = v11;
      *(_BYTE *)(a1 + 49) = v71;
    }

    else
    {
      uint64_t v73 = (_BYTE *)*((void *)v25 + 2);
      if (v73[69] != 2) {
        goto LABEL_67;
      }
      if (v73[70] != 1) {
        goto LABEL_67;
      }
      if (v73[71] != 2) {
        goto LABEL_67;
      }
      int v74 = (char)*v13;
      if (v74 < 0) {
        goto LABEL_67;
      }
      char v72 = v11;
      unsigned int v75 = (char *)uprv_malloc((*v13 + 1LL) << 10);
      if (!v75)
      {
        ucnv_unload(v26);
        int v27 = 7;
        goto LABEL_33;
      }

      int v76 = v75;
      memcpy(v75, *(const void **)(a1 + 56), (unint64_t)v74 << 10);
      uint64_t v77 = 0LL;
      int v78 = v74 << 24;
      do
      {
        int32x2_t v79 = vcltz_s32(*(int32x2_t *)&v76[v77]);
        if ((v79.i8[0] & 1) != 0) {
          *(_DWORD *)&v76[v77] = v78;
        }
        if ((v79.i8[4] & 1) != 0) {
          *(_DWORD *)&v76[v77 + 4] = v78;
        }
        v77 += 8LL;
      }

      while (v77 != 1024);
      memset_pattern16(&v76[1024 * (unint64_t)v74], &unk_180A26800, 0x400uLL);
      *(void *)(a1 + 56) = v76;
      *(_BYTE *)(a1 + 48) = v74 + 1;
      *(_BYTE *)(a1 + 50) = 1;
    }

    unint64_t v11 = v72;
    unsigned __int8 *v72 = -37;
  }

void sub_18083B3EC(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 64);
  if (v2) {
    uprv_free(v2);
  }
  if (*(_BYTE *)(a1 + 50)) {
    uprv_free(*(void **)(a1 + 56));
  }
  uint64_t v3 = *(void *)(a1 + 280);
  if (v3) {
    ucnv_unload(v3);
  }
  uint64_t v4 = *(void **)(a1 + 264);
  if (v4) {
    uprv_free(v4);
  }
}

void sub_18083B444(uint64_t a1, uint64_t a2, int *a3)
{
  if (*(_BYTE *)(a2 + 8)) {
    return;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  int v7 = *(unsigned __int8 *)(v6 + 252);
  int v8 = *(_DWORD *)(a2 + 12);
  if (v7 == 219)
  {
    v8 &= ~0x10u;
    *(_DWORD *)(a2 + 12) = v8;
    *(_DWORD *)(a1 + 56) = v8;
  }

  if ((v8 & 0x10) != 0)
  {
    umtx_lock(0LL);
    uint64_t v9 = *(void *)(v6 + 64);
    umtx_unlock(0LL);
    if (!v9)
    {
      uint64_t v14 = *(void *)(a1 + 48);
      int v15 = *(unsigned __int8 *)(v14 + 252);
      if (v15 != 12 && v15 != 0) {
        goto LABEL_44;
      }
      uint64_t v17 = *(void *)(v14 + 56);
      if (*(_DWORD *)(v17 + 148) != -2147483638 || *(_DWORD *)(v17 + 84) != -2147483515) {
        goto LABEL_44;
      }
      uint64_t v18 = *(unsigned __int16 **)(v14 + 88);
      uint64_t v19 = *(_WORD **)(v14 + 232);
      uint64_t v20 = *v18;
      if (*(_BYTE *)(v14 + 252))
      {
        if ((*(_DWORD *)&v18[2 * v20] & 0x4000000) == 0
          || v19[16 * (unsigned __int16)*(_DWORD *)&v18[2 * v20] + 10] != 37
          || (int v21 = *(_DWORD *)&v18[2 * v20 + 16], (v21 & 0x200000) == 0)
          || v19[16 * (unsigned __int16)v21 + 5] != 21)
        {
LABEL_44:
          if (*a3 > 0) {
            return;
          }
          unsigned int v31 = *(_DWORD *)(a2 + 12) & 0xFFFFFFEF;
          *(_DWORD *)(a2 + 12) = v31;
          *(_DWORD *)(a1 + 56) = v31;
          goto LABEL_7;
        }
      }

      else if (v19[v18[v20] + 10] != 3877 || v19[v18[v20 + 8] + 5] != 3861)
      {
        goto LABEL_44;
      }

      size_t v22 = *(unsigned int *)(v14 + 248);
      if ((_DWORD)v22)
      {
        uint64_t v23 = uprv_malloc(v22 + (*(unsigned __int8 *)(v14 + 48) << 10) + 80);
        if (v23)
        {
          uint64_t v24 = *(unsigned __int8 *)(v14 + 48);
          size_t __n = v22;
          uint64_t v25 = v23;
          memcpy(v23, *(const void **)(v14 + 56), v24 << 10);
          v25[37] = -2147483515;
          v25[21] = -2147483638;
          uint64_t v26 = (char *)&v25[256 * v24];
          memcpy(v26, v19, __n);
          uint64_t v27 = *v18;
          if (*(_BYTE *)(v14 + 252))
          {
            uint64_t v28 = &v18[2 * v27];
            *(_WORD *)&v26[32 * (unsigned __int16)*(_DWORD *)v28 + 20] = 21;
            uint64_t v29 = (16LL * (unsigned __int16)*((_DWORD *)v28 + 8)) | 5;
            __int16 v30 = 37;
          }

          else
          {
            int32x4_t v33 = &v18[v27];
            *(_WORD *)&v26[2 * *v33 + 20] = 3861;
            uint64_t v29 = v33[8] + 5LL;
            __int16 v30 = 3877;
          }

          *(_WORD *)&v26[2 * v29] = v30;
          int8x8_t v34 = strcpy(&v26[__n], (const char *)(*(void *)(v14 + 16) + 4LL));
          strcpy(&v26[__n + strlen(v34)], ",swaplfnl");
          umtx_lock(0LL);
          if (*(void *)(v14 + 64))
          {
            umtx_unlock(0LL);
            uprv_free(v25);
          }

          else
          {
            *(void *)(v14 + 64) = v25;
            *(void *)(v14 + 240) = v26;
            *(void *)(v14 + 272) = &v26[__n];
            umtx_unlock(0LL);
          }

          goto LABEL_7;
        }

        int v32 = 7;
      }

      else
      {
        int v32 = 3;
      }

      *a3 = v32;
      return;
    }
  }

uint64_t sub_18083B804(void *a1, int *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *(void *)(v2 + 48);
  if ((*(_BYTE *)(v3 + 253) & 2) != 0) {
    return 4294967287LL;
  }
  uint64_t v6 = (char *)a1[2];
  unint64_t v7 = a1[3];
  if (*(_BYTE *)(v3 + 48) == 1)
  {
    uint64_t v8 = 64LL;
    if ((*(_BYTE *)(v2 + 56) & 0x10) == 0) {
      uint64_t v8 = 56LL;
    }
    uint64_t v9 = *(void *)(v3 + v8);
    while (1)
    {
      unsigned int v10 = *v6++;
      int v11 = *(_DWORD *)(v9 + 4LL * v10);
      a1[2] = v6;
      if (v11 < -2146435072) {
        return (unsigned __int16)v11;
      }
      if ((v11 & 0xD00000) == 0x100000) {
        return (v11 & 0xFFFFFu) + 0x10000;
      }
      int v12 = (v11 >> 20) & 0xF;
      if (v12 == 7) {
        goto LABEL_36;
      }
      if (v12 == 6) {
        break;
      }
      if (v12 == 2) {
        return (unsigned __int16)v11;
      }
    }

    if (*a2 > 0)
    {
LABEL_36:
      *a2 = 8;
      return 0xFFFFLL;
    }

    a1[2] = v6 - 1;
    return 4294967287LL;
  }

  uint64_t v14 = 64LL;
  if ((*(_BYTE *)(v2 + 56) & 0x10) == 0) {
    uint64_t v14 = 56LL;
  }
  uint64_t v15 = *(void *)(v3 + v14);
  uint64_t v16 = *(void *)(v3 + 72);
  int v17 = *(_DWORD *)(v2 + 72);
  unint64_t v18 = *(unsigned __int8 *)(v2 + 76);
  if (!*(_BYTE *)(v2 + 76)) {
    unint64_t v18 = *(unsigned __int8 *)(v3 + 49);
  }
  uint64_t result = 0xFFFFFFFFLL;
  while (2)
  {
    uint64_t v19 = v6;
    if ((unint64_t)v6 >= v7)
    {
      uint64_t v21 = 0LL;
      goto LABEL_51;
    }

    uint64_t v20 = 0LL;
    uint64_t v21 = v7 - (void)v6;
    unint64_t v22 = v18;
    while (1)
    {
      uint64_t v23 = &v19[v20 + 1];
      unint64_t v24 = *(unsigned int *)(v15 + ((unint64_t)v22 << 10) + 4LL * v19[v20]);
      if ((v24 & 0x80000000) != 0) {
        break;
      }
      unint64_t v22 = v24 >> 24;
      v17 += v24 & 0xFFFFFF;
      if ((unint64_t)v23 < v7)
      {
        unsigned int v25 = *(_DWORD *)(v15 + (v22 << 10) + 4LL * *v23);
        if ((v25 & 0x80F00000) == 0x80400000)
        {
          uint64_t result = *(unsigned __int16 *)(v16 + 2LL * (v17 + (unsigned __int16)v25));
          if (result <= 0xFFFD)
          {
            uint64_t v27 = (uint64_t)&v19[v20 + 2];
            LODWORD(v18) = HIBYTE(v25) & 0x7F;
            goto LABEL_75;
          }
        }
      }

      if (v21 == ++v20) {
        goto LABEL_50;
      }
    }

    *(_DWORD *)(v2 + 76) = v22;
    unint64_t v18 = BYTE3(v24) & 0x7F;
    unsigned int v26 = (v24 >> 20) & 0xF;
    switch(v26)
    {
      case 5u:
        unsigned int v28 = v17 + (unsigned __int16)v24;
        uint64_t result = *(unsigned __int16 *)(v16 + 2LL * v28);
        uint64_t v27 = (uint64_t)&v19[v20 + 1];
        unsigned int v29 = v28 + 1;
        if (result >> 13 <= 6)
        {
          uint64_t result = ((result & 0x3FF) << 10) + *(unsigned __int16 *)(v16 + 2LL * v29) + 9216;
          goto LABEL_75;
        }

        if ((result & 0xFFFE) == 0xE000)
        {
          uint64_t result = *(unsigned __int16 *)(v16 + 2LL * v29);
          goto LABEL_75;
        }

        if ((_DWORD)result != 0xFFFF)
        {
LABEL_83:
          if (*a2 > 0)
          {
            uint64_t v21 = v20 + 1;
            goto LABEL_51;
          }

          *(_DWORD *)(v2 + 72) = 0;
          *(_DWORD *)(v2 + 76) = BYTE3(v24) & 0x7F;
          a1[2] = v19;
          return 4294967287LL;
        }

LABEL_82:
        *a2 = 12;
        uint64_t v27 = (uint64_t)&v19[v20 + 1];
LABEL_66:
        uint64_t result = 0xFFFFLL;
        goto LABEL_75;
      case 4u:
        unsigned int v30 = v17 + (unsigned __int16)v24;
        uint64_t result = *(unsigned __int16 *)(v16 + 2LL * v30);
        uint64_t v21 = v20 + 1;
        if (result < 0xFFFE)
        {
          uint64_t v27 = (uint64_t)&v19[v21];
          goto LABEL_75;
        }

        if ((_DWORD)result == 65534)
        {
          uint64_t v42 = sub_180839290(v3 + 48, v30);
          unint64_t v18 = BYTE3(v24) & 0x7F;
          uint64_t v43 = v42;
          uint64_t result = 65534LL;
          if ((_DWORD)v43 != 65534)
          {
            uint64_t result = v43;
            goto LABEL_51;
          }

          goto LABEL_83;
        }

        goto LABEL_82;
      case 0u:
LABEL_32:
        uint64_t result = (unsigned __int16)v24;
LABEL_46:
        uint64_t v27 = (uint64_t)&v19[v20 + 1];
        goto LABEL_75;
    }

    if ((v24 & 0xD00000) == 0x100000)
    {
      uint64_t result = (v24 & 0xFFFFF) + 0x10000;
      goto LABEL_46;
    }

    int v17 = 0;
    uint64_t v6 = &v19[v20 + 1];
    switch(v26)
    {
      case 2u:
        goto LABEL_32;
      case 6u:
        goto LABEL_83;
      case 7u:
        unint64_t v22 = BYTE3(v24) & 0x7F;
        break;
      case 8u:
        if (!*(_BYTE *)(v3 + 49)) {
          goto LABEL_83;
        }
        break;
      default:
        continue;
    }

    break;
  }

  *a2 = 12;
  uint64_t v21 = v20 + 1;
LABEL_50:
  unint64_t v18 = v22;
LABEL_51:
  uint64_t v27 = (uint64_t)&v19[v21];
  if ((result & 0x80000000) != 0)
  {
    if (*a2 <= 0 && v27 == v7 && v21 >= 1)
    {
      int8x8_t v34 = (_BYTE *)(v2 + 65);
      *(_BYTE *)(v2 + 64) = v21;
      do
      {
        char v35 = *v19++;
        *v34++ = v35;
      }

      while ((unint64_t)v19 < v7);
      *a2 = 11;
      uint64_t result = 0xFFFFLL;
      uint64_t v27 = v7;
      goto LABEL_75;
    }

    if (*a2 < 1)
    {
      *a2 = 8;
    }

    else
    {
      BOOL v33 = *(_BYTE *)(v3 + 49) != 0;
      *(_BYTE *)(v2 + 65) = *v19;
      if (v21 != 1)
      {
        int v36 = v19 + 1;
        if (v21 < 2)
        {
          char v38 = 1;
        }

        else
        {
          int v37 = (_BYTE *)(v2 + 66);
          char v38 = 1;
          while (1)
          {
            unint64_t v39 = v27;
            char v40 = *v36;
            unint64_t v41 = v18;
            ++v36;
            *v37++ = v40;
            ++v38;
            uint64_t v27 = v39;
            unint64_t v18 = v41;
          }

          LOBYTE(v18) = v41;
        }

    this = utrie2_set32(*(void *)(v7 + 32), v12, a4, (int *)a5);
    goto LABEL_115;
  }

  if (v40 == 199)
  {
    unint64_t v41 = icu::UVector::elementAt((icu::UVector *)(v7 + 104), v16 >> 13);
    *(_DWORD *)(v41 + 80) = 1;
  }

  else
  {
    icu::UnicodeString::UnicodeString((uint64_t)v66, 0);
    uint64_t v42 = icu::CollationDataBuilder::addConditionalCE32((icu::CollationDataBuilder *)v7, (UChar **)v66, v16, a5);
    this = (uint64_t)icu::UnicodeString::~UnicodeString(v43, (icu::UnicodeString *)v66);
    utrie2_set32(*(void *)(v7 + 32), v12, (v42 << 13) | 0xC7, (int *)a5);
    icu::UnicodeSet::add((icu::UnicodeSet *)(v7 + 144), v12);
    unint64_t v41 = icu::UVector::elementAt((icu::UVector *)(v7 + 104), v42);
  }

  memset(v66, 0, sizeof(v66));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v66, a3, v14);
  memset(v65, 0, sizeof(v65));
  unsigned int v44 = *((unsigned __int16 *)a2 + 4);
  uint64_t v45 = (__int16)v44;
  signed int v46 = v44 >> 5;
  if (v45 < 0) {
    LOWORD(v46) = *((_DWORD *)a2 + 3);
  }
  icu::UnicodeString::UnicodeString((uint64_t)v65, v46);
  signed int v47 = *((unsigned __int16 *)a2 + 4);
  uint64_t v48 = (__int16)v47;
  uint64_t v49 = v47 >> 5;
  if (v48 >= 0) {
    uint64_t v50 = v49;
  }
  else {
    uint64_t v50 = *((unsigned int *)a2 + 3);
  }
  int v51 = icu::UnicodeString::doAppend((uint64_t)v65, a2, 0, v50);
  if ((SWORD4(v66[0]) & 0x8000u) == 0) {
    unsigned int v52 = WORD4(v66[0]) >> 5;
  }
  else {
    unsigned int v52 = HIDWORD(v66[0]);
  }
  icu::UnicodeString::doAppend(v51, (const icu::UnicodeString *)v66, 0, v52);
  icu::UnicodeSet::addAll((icu::UnicodeSet *)(v7 + 416), (const icu::UnicodeString *)v66);
  while (1)
  {
    __int128 v53 = *(_DWORD *)(v41 + 88);
    if (v53 < 0)
    {
      __int128 v60 = icu::CollationDataBuilder::addConditionalCE32((icu::CollationDataBuilder *)v7, (UChar **)v65, a4, a5);
      uint64_t v27 = *(unsigned int *)a5;
      *(_DWORD *)(v41 + 88) = v60;
      goto LABEL_114;
    }

    unsigned int v54 = icu::UVector::elementAt((icu::UVector *)(v7 + 104), *(_DWORD *)(v41 + 88));
    unint64_t v55 = v54;
    uint64_t v27 = *(unsigned __int16 *)(v54 + 16);
    if ((v27 & 1) == 0) {
      break;
    }
    __int128 v59 = (BYTE8(v65[0]) & 1) == 0;
LABEL_108:
    unint64_t v41 = v55;
    if (!v59)
    {
      *(_DWORD *)(v55 + 72) = a4;
LABEL_114:
      icu::UnicodeString::~UnicodeString((void *)v27, (icu::UnicodeString *)v65);
      this = (uint64_t)icu::UnicodeString::~UnicodeString(v62, (icu::UnicodeString *)v66);
      goto LABEL_115;
    }
  }

  if ((SWORD4(v65[0]) & 0x8000u) == 0) {
    int v56 = WORD4(v65[0]) >> 5;
  }
  else {
    int v56 = HIDWORD(v65[0]);
  }
  if ((v27 & 0x8000u) == 0LL) {
    int v57 = v27 >> 5;
  }
  else {
    int v57 = *(_DWORD *)(v54 + 20);
  }
  if ((v27 & 2) != 0) {
    __int128 v58 = v54 + 18;
  }
  else {
    __int128 v58 = *(void *)(v54 + 32);
  }
  __int128 v59 = icu::UnicodeString::doCompare( (uint64_t)v65,  0,  v56,  v58,  v57 & (v57 >> 31),  v57 & ~(v57 >> 31));
  if ((v59 & 0x80000000) == 0) {
    goto LABEL_108;
  }
  __int128 v61 = icu::CollationDataBuilder::addConditionalCE32((icu::CollationDataBuilder *)v7, (UChar **)v65, a4, a5);
  uint64_t v27 = *(unsigned int *)a5;
  if ((int)v27 <= 0)
  {
    *(_DWORD *)(v41 + 88) = v61;
    *(_DWORD *)(icu::UVector::elementAt((icu::UVector *)(v7 + 104), v61) + 88) = v53;
    goto LABEL_114;
  }

uint64_t sub_18083BC84(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0LL;
  unint64_t v3 = *(void *)(*(void *)(result + 48) + 56LL)
     + ((unint64_t)*(unsigned __int8 *)(*(void *)(result + 48) + 49LL) << 10);
  do
  {
    *(_BYTE *)(a2 + v2) = *(_DWORD *)(v3 + 4 * v2) >= 0;
    ++v2;
  }

  while (v2 != 256);
  return result;
}

uint64_t sub_18083BCB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if ((*(_BYTE *)(a1 + 56) & 0x10) == 0) {
    return *(void *)(v1 + 16) + 4LL;
  }
  uint64_t result = *(void *)(v1 + 272);
  if (!result) {
    return *(void *)(v1 + 16) + 4LL;
  }
  return result;
}

void *sub_18083BCDC(void *result, int a2, int *a3)
{
  uint64_t v5 = result[1];
  uint64_t v6 = (char *)(v5 + 94);
  uint64_t v7 = *(void *)(v5 + 48);
  if (*(_BYTE *)(v5 + 94))
  {
    if (*(void *)(v7 + 288))
    {
      if (*(_BYTE *)(v5 + 95))
      {
LABEL_4:
        int v8 = 1;
        goto LABEL_7;
      }
    }

    else if (*(unsigned __int16 *)(v5 + 140) < 0x100u)
    {
      goto LABEL_4;
    }
  }

  uint64_t v6 = *(char **)(v5 + 40);
  int v8 = *(char *)(v5 + 89);
LABEL_7:
  int v12 = 0;
  *(_BYTE *)(v5 + 95) = 0;
  if (*(_BYTE *)(v7 + 252) == 12)
  {
    if (v8 == 2)
    {
      int v11 = (char *)&v12;
      if (*(_DWORD *)(v5 + 80) <= 1u)
      {
        *(_DWORD *)(v5 + 80) = 2;
        int v11 = (char *)&v12 + 1;
        LOBYTE(v12) = 14;
      }

      char *v11 = *v6;
      int v10 = (_DWORD)v11 + 2;
      v11[1] = v6[1];
    }

    else
    {
      if (v8 != 1)
      {
        *a3 = 1;
        return result;
      }

      uint64_t v9 = (char *)&v12;
      if (*(_DWORD *)(v5 + 80) == 2)
      {
        *(_DWORD *)(v5 + 80) = 1;
        uint64_t v9 = (char *)&v12 + 1;
        LOBYTE(v12) = 15;
      }

      *uint64_t v9 = *v6;
      int v10 = (_DWORD)v9 + 1;
    }

    uint64_t v6 = (char *)&v12;
    int v8 = v10 - (&vars0 - 4);
  }

  return ucnv_cbFromUWriteBytes(result, v6, v8, a2, a3);
}

uint64_t sub_18083BDE4(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4)
{
  if ((*(_BYTE *)(a1 + 57) & 0x80) == 0) {
    return sub_180837E60(*(void *)(a1 + 48), a2, a3, *(unsigned __int8 *)(*(void *)(a1 + 48) + 252LL) == 219, a4);
  }
  ((void (*)(uint64_t, void, uint64_t))a2[2])(*a2, 0LL, 55295LL);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2[2])(*a2, 57344LL, 1114111LL);
}

uint64_t sub_18083BE50(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 184);
  int v6 = a2 & 0xFF7FFF;
  if (HIBYTE(a2) <= 0x8Eu) {
    int v6 = a2 & 0x7FFFFF;
  }
  if (HIBYTE(a2)) {
    unsigned int v7 = v6;
  }
  else {
    unsigned int v7 = a2;
  }
  int v8 = a2 & 0xFF7F;
  if (HIWORD(a2) <= 0x8Eu) {
    int v8 = a2 & 0x7FFF;
  }
  int v9 = *(unsigned __int8 *)(a1 + 204);
  if (a2 < 0x10000) {
    int v8 = a2;
  }
  if (v9 != 8) {
    int v8 = a2;
  }
  if (v9 != 9) {
    unsigned int v7 = v8;
  }
  do
  {
    unint64_t v10 = *(unsigned int *)(a3 + 4 * v3);
    if ((v10 & 0x80000000) != 0) {
      goto LABEL_22;
    }
    uint64_t v11 = v4 + 4LL * *(unsigned __int16 *)(v4 + ((v10 >> 9) & 0x7FFFFE));
    uint64_t v12 = (v10 >> 4) & 0x3F;
    int v13 = v7 + v3;
    int v14 = *(_DWORD *)(a3 + 4 * v3) & 0xF;
    unsigned int v15 = v14 | (16 * (unsigned __int16)*(_DWORD *)(v11 + 4 * v12));
    int v16 = *(unsigned __int8 *)(a1 + 204);
    if (v16 != 9)
    {
      if (v16 == 3)
      {
        *(_DWORD *)(v5 + 4LL * v15) = v13;
        goto LABEL_21;
      }

      if (v16 != 2)
      {
        *(_WORD *)(v5 + 2LL * v15) = v13;
        goto LABEL_21;
      }
    }

    int v17 = (_BYTE *)(v5 + 3LL * v15);
    *int v17 = BYTE2(v13);
    v17[1] = BYTE1(v13);
    v17[2] = v13;
LABEL_21:
    *(_DWORD *)(v11 + 4 * v12) |= 1 << (v14 | 0x10);
LABEL_22:
    ++v3;
  }

  while (v3 != 32);
  return 1LL;
}

uint64_t sub_18083BF58(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = result;
  uint64_t v5 = 0LL;
  int v6 = 0;
  uint64_t v21 = a3;
  unint64_t v7 = result + ((unint64_t)a3 << 10);
  unint64_t v8 = (unint64_t)a3 << 10;
  *(_BYTE *)(a2 + a3) = 0;
  while (1)
  {
    unint64_t v9 = *(unsigned int *)(v4 + v8);
    uint64_t v10 = (v9 >> 24) & 0x7F;
    if ((v9 & 0x80000000) != 0) {
      goto LABEL_7;
    }
LABEL_4:
LABEL_8:
    if (v5 == -255)
    {
      *(_BYTE *)(a2 + v2icu::UVector32::~UVector32(this + 1) = -64;
      return result;
    }

    ++v6;
    v8 += 4LL;
    --v5;
  }

  uint64_t result = sub_18083BF58(v4, a2, (v9 >> 24) & 0x7F);
  if ((v9 & 0x80000000) == 0) {
    goto LABEL_4;
  }
LABEL_7:
  if ((v9 & 0xE00000) >= 0x600000) {
    goto LABEL_8;
  }
LABEL_10:
  uint64_t v11 = -v5;
  uint64_t v12 = v21;
  char v13 = *(_BYTE *)(a2 + v21) | ((unint64_t)-v5 >> 2) & 0xF8;
  *(_BYTE *)(a2 + v2icu::UVector32::~UVector32(this + 1) = v13;
  if (-(int)v5 > 0xFE)
  {
    LODWORD(v14) = 255;
    goto LABEL_24;
  }

  uint64_t v14 = 255LL;
  while (2)
  {
    unint64_t v15 = *(unsigned int *)(v7 + 4 * v14);
    uint64_t v16 = (v15 >> 24) & 0x7F;
    if (*(unsigned __int8 *)(a2 + v16) == 255)
    {
      uint64_t result = sub_18083BF58(v4, a2, (v15 >> 24) & 0x7F);
      if ((v15 & 0x80000000) == 0) {
        goto LABEL_14;
      }
    }

    else if ((v15 & 0x80000000) == 0)
    {
LABEL_14:
      goto LABEL_18;
    }

    if ((v15 & 0xE00000) >= 0x600000)
    {
LABEL_18:
      if (-v5 >= (unint64_t)--v14)
      {
        uint64_t v11 = -v5;
        uint64_t v12 = v21;
        uint64_t v14 = -v5;
        goto LABEL_23;
      }

      continue;
    }

    break;
  }

  uint64_t v11 = -v5;
  uint64_t v12 = v21;
LABEL_23:
  char v13 = *(_BYTE *)(a2 + v12);
LABEL_24:
  *(_BYTE *)(a2 + v12) = v13 | (v14 >> 5);
  if ((int)v14 >= (int)v11)
  {
    else {
      uint64_t v17 = v14;
    }
    for (uint64_t i = v17 + v5 + 1; i; --i)
    {
      unint64_t v19 = *(unsigned int *)(v4 + v8);
      uint64_t v20 = (v19 >> 24) & 0x7F;
      if (*(unsigned __int8 *)(a2 + v20) == 255)
      {
        uint64_t result = sub_18083BF58(v4, a2, (v19 >> 24) & 0x7F);
        if ((v19 & 0x80000000) != 0)
        {
LABEL_33:
          *(_BYTE *)(a2 + v20) |= 0x40u;
          if ((v19 & 0xC00000) == 0) {
            *(_BYTE *)(a2 + v12) |= 0x40u;
          }
        }
      }

      else if ((v19 & 0x80000000) != 0)
      {
        goto LABEL_33;
      }

      v8 += 4LL;
    }
  }

  return result;
}

uint64_t sub_18083C140(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  memset(v26, 0, sizeof(v26));
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v24 = *(void *)(a1 + 24);
  int v10 = *(char *)(a2 + a3);
  unsigned int v11 = (4 * v10) & 0xE0;
  if (v11)
  {
LABEL_4:
    unsigned int v12 = 32 * (v10 & 7) + 32;
    if (v11 >= v12) {
      return 1LL;
    }
    goto LABEL_7;
  }

  if (v10 > 63)
  {
    LODWORD(v26[0]) = -1;
    unsigned int v11 = 1;
    goto LABEL_4;
  }

  unsigned int v11 = 0;
  unsigned int v12 = 32 * (v10 & 7) + 32;
LABEL_7:
  uint64_t v13 = v9 + ((uint64_t)a3 << 10);
  int v14 = a5 << 8;
  uint64_t v15 = v11;
  int v16 = -1;
  unint64_t v17 = v12;
  do
  {
    unint64_t v18 = *(unsigned int *)(v13 + 4 * v15);
    if ((v18 & 0x80000000) != 0)
    {
      unsigned int v20 = -1;
      switch((v18 >> 20) & 0xF)
      {
        case 0u:
          unsigned int v20 = (unsigned __int16)*(_DWORD *)(v13 + 4 * v15);
          break;
        case 1u:
          unsigned int v20 = (v18 & 0xFFFFF) + 0x10000;
          break;
        case 4u:
          unsigned int v20 = *(unsigned __int16 *)(v24 + 2LL * (a4 + (unsigned __int16)v18));
          if (v20 >= 0xFFFE) {
            unsigned int v20 = -1;
          }
          break;
        case 5u:
          int v21 = a4 + (unsigned __int16)v18;
          unsigned int v20 = *(unsigned __int16 *)(v24 + 2LL * v21);
          if (v20 >> 11 >= 0x1B)
          {
            uint64_t v22 = v21 + 1LL;
            if (v20 >> 10 > 0x36)
            {
              if (v20 == 57344) {
                unsigned int v20 = *(unsigned __int16 *)(v24 + 2LL * (int)v22);
              }
              else {
                unsigned int v20 = -1;
              }
            }

            else
            {
              unsigned int v20 = ((v20 & 0x3FF) << 10) + 9216 + *(unsigned __int16 *)(v24 + 2 * v22);
            }
          }

          break;
        default:
          break;
      }

      *((_DWORD *)v26 + (v15 & 0x1F)) = v20;
      v16 &= v20;
    }

    else
    {
      if ((*(char *)(a2 + (v18 >> 24)) & 0x80000000) == 0)
      {
        uint64_t result = sub_18083C140(a1, a2);
        if (!(_DWORD)result) {
          return result;
        }
      }

      *((_DWORD *)v26 + (v15 & 0x1F)) = -1;
    }

    unint64_t v23 = v15 + 1;
    if (((v15 + 1) & 0x1F) == 0 && (v16 & 0x80000000) == 0)
    {
      uint64_t result = sub_18083BE50(a6, (v15 - 31) | v14, (uint64_t)v26);
      if (!(_DWORD)result) {
        return result;
      }
      int v16 = -1;
    }

    ++v15;
  }

  while (v23 < v17);
  return 1LL;
}

uint64_t sub_18083C394(uint64_t result, void *a2, int *a3)
{
  uint64_t v4 = *(void *)(result + 8);
  uint64_t v6 = a2[1];
  unint64_t v5 = a2[2];
  unint64_t v7 = a2[3];
  unint64_t v8 = *(_BYTE **)(result + 32);
  __int128 v66 = v8;
  uint64_t v64 = result;
  uint64_t v9 = *(void *)(v4 + 48);
  if ((*(_BYTE *)(v4 + 56) & 0x10) != 0) {
    uint64_t v10 = 240LL;
  }
  else {
    uint64_t v10 = 232LL;
  }
  if (*(_BYTE *)(v4 + 63)) {
    uint64_t v11 = 2048LL;
  }
  else {
    uint64_t v11 = 3072LL;
  }
  int v12 = *(char *)(v6 + 64);
  if (v12 < 1)
  {
    LOBYTE(v12) = 0;
    LOBYTE(v14) = 0;
    LODWORD(v13) = 0;
  }

  else
  {
    LODWORD(v13) = *(_DWORD *)(v6 + 72);
    int v14 = *(_DWORD *)(v6 + 76);
  }

  int v15 = *(_DWORD *)(result + 40) - (_DWORD)v8;
  uint64_t v16 = *(void *)(v9 + 88);
  uint64_t v17 = *(void *)(v9 + v10);
  int v18 = v7 - v5 - (char)v14 + v12;
  if (v18 >= 1 && *(char *)(v7 - 1) < 0)
  {
    unsigned int v19 = *(unsigned __int8 *)(v7 - 1);
    if (v18 < 2 || v19 > 0xBF)
    {
    }

    else
    {
      char v20 = *(_BYTE *)(v7 - 2);
    }
  }

  int v21 = (unsigned __int16 *)(v9 + 104);
  uint64_t v22 = *(unsigned int *)(v9 + 260);
  int v23 = *(unsigned __int8 *)(v9 + 253);
  if ((_DWORD)v13 && v15 > 0)
  {
    *(_DWORD *)(v6 + 72) = 0;
    *(_BYTE *)(v6 + 64) = 0;
    char v24 = v12;
    goto LABEL_66;
  }

  unsigned int v25 = (unsigned __int8 *)v5;
  while (1)
  {
    if ((unint64_t)v25 >= v7)
    {
      unint64_t v5 = (unint64_t)v25;
      goto LABEL_39;
    }

    while (1)
    {
      int v26 = v15 - 1;
      if (v15 < 1)
      {
        *a3 = 15;
        goto LABEL_59;
      }

      unint64_t v5 = (unint64_t)(v25 + 1);
      LOBYTE(v27) = *v25;
      uint64_t v13 = *v25;
      if ((*v25 & 0x80) == 0)
      {
        if (((v22 >> (*v25 >> 2)) & 1) == 0)
        {
          unsigned int v27 = *(unsigned __int16 *)(v17 + 2LL * (*v21 + v13));
LABEL_63:
          unsigned int v25 = (unsigned __int8 *)v5;
          goto LABEL_89;
        }

        goto LABEL_38;
      }

      unsigned int v28 = *v25;
      if (v13 <= 0xDF)
      {
        if (v28 < 0xC2)
        {
          LOBYTE(v12) = 0;
          LOBYTE(v14) = 0;
LABEL_65:
          char v24 = 1;
          goto LABEL_66;
        }

        unsigned int v29 = *(unsigned __int8 *)v5 ^ 0x80;
        if (v29 > 0x3F) {
          goto LABEL_60;
        }
        LODWORD(v30) = v13 & 0x1F;
        unint64_t v5 = (unint64_t)(v25 + 2);
        int v31 = v21[v13 & 0x1F];
        goto LABEL_37;
      }

      if (v28 != 224) {
        break;
      }
      uint64_t v30 = *(unsigned __int8 *)v5 ^ 0x80LL;
      if ((v30 & 0xE0) != 0x20 || (unsigned int v29 = v25[2] ^ 0x80, v29 > 0x3F))
      {
LABEL_60:
        BOOL v43 = *v25 > 0xDFu;
        char v44 = 2;
        goto LABEL_61;
      }

      unint64_t v5 = (unint64_t)(v25 + 3);
      int v31 = v21[v30];
LABEL_37:
      unsigned int v27 = *(unsigned __int16 *)(v17 + 2LL * (v31 + v29));
      if (v27 < v11)
      {
        uint64_t v13 = v29 | ((_DWORD)v30 << 6);
        goto LABEL_63;
      }

LABEL_59:
        a2[2] = v25;
        goto LABEL_96;
      }

      a2 = v56;
      if ((*(_DWORD *)(v4 + 208) & 0x80000000) == 0)
      {
        int *v57 = -127;
        unint64_t v5 = (unint64_t)v25;
        goto LABEL_111;
      }

      uint64_t v6 = v63;
      int v15 = *(_DWORD *)(v64 + 40) - (_DWORD)v66;
      uint64_t v17 = v55;
      int v21 = v54;
      uint64_t v11 = v53;
      uint64_t v22 = v52;
      int v23 = v62;
    }
  }

  uint64_t result = 1LL;
  LOBYTE(v45) = v24;
  unsigned int v25 = (unsigned __int8 *)v5;
  while ((unint64_t)v25 < a2[3])
  {
    unint64_t v46 = *v25;
    if ((char)v14 < 3 || v45 >= 2u)
    {
    }

    else
    {
      if (v14 == 3)
      {
        int v47 = a00000000000000[v13 & 0xF];
        unsigned int v48 = v46 >> 5;
      }

      else
      {
        int v47 = byte_180A266EE[v46 >> 4];
        LOBYTE(v48) = v13 & 7;
      }

      if ((v47 & (1 << v48)) == 0)
      {
LABEL_82:
        char v24 = v45;
        unint64_t v5 = (unint64_t)v25;
        goto LABEL_83;
      }
    }

    int v45 = (char)(v45 + 1);
    ++v25;
    LODWORD(v13) = v46 + ((_DWORD)v13 << 6);
  }

  unint64_t v49 = (char)v12;
  if ((char)v12 >= (char)v45)
  {
    int v51 = &v25[(char)v12 - (uint64_t)(char)v45];
  }

  else
  {
    do
    {
      unint64_t v50 = v49 + 1;
      *(_BYTE *)(v6 + 65 + v49) = *(_BYTE *)(v5 - v24 + v49);
      unint64_t v49 = v50;
    }

    while (v50 < (char)v45);
    int v51 = (unsigned __int8 *)(v5 - v24 + v50);
  }

  *(_BYTE *)(v6 + 64) = v45;
  *(_DWORD *)(v6 + 72) = v13;
  *(_DWORD *)(v6 + 76) = (char)v14;
  a2[2] = v51;
LABEL_96:
  *(void *)(v64 + 32) = v66;
  return result;
}

        if (a2 == ++v26)
        {
          a3 = a2;
          break;
        }
      }
    }
  }

  if (!v14 && a6 == 1)
  {
    a3 = sub_1808786F8((__int16 *)a1, a2, a4);
    int v34 = 2 * (int)a3 + 2;
    int v35 = (UChar *)uprv_malloc(v34);
    if (v35)
    {
      int v36 = v35;
      bzero(v35, v34);
      if ((int)a3 >= 1)
      {
        int v37 = 0LL;
        int v38 = 0;
        do
        {
          unint64_t v39 = a1[v37];
          if ((unsigned __int16)(v39 + 259) >= 0xFFF8u)
          {
            v36[v38++] = word_180A2C4A2[v39 - 65269];
            LOWORD(v39) = 1604;
          }

          v36[v38] = v39;
          ++v38;
        }

        while (v38 < (int)a3);
      }

      u_memcpy(a1, v36, a3);
      uprv_free(v36);
    }

    else
    {
      a3 = 0LL;
      *a5 = 7;
    }
  }

  return a3;
}

            icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)&v35);
            goto LABEL_60;
          }

          icu::UnicodeString::unBogus((uint64_t)&v35);
          if ((v36 & 0x8000u) == 0LL) {
            unsigned int v29 = (unsigned __int16)v36 >> 5;
          }
          else {
            unsigned int v29 = DWORD1(v36);
          }
          LODWORD(v15) = v28 + 65533;
          icu::UnicodeString::replace((icu::UnicodeString *)&v35, 0LL, v29, v15);
          (*(void (**)(void, uint64_t, void (***)(icu::UnicodeString *__hidden), void (***)(icu::UnicodeString *__hidden), void (***)(icu::UnicodeString *__hidden), char *, UErrorCode *))(**((void **)this + 7) + 32LL))( *((void *)this + 7),  a2,  &v45,  &v35,  &v45,  (char *)this + 48,  a4);
          int v26 = *(unsigned int *)a4;
        }

        if (v25 < 0x10000) {
          int v12 = 1;
        }
        else {
          int v12 = 2;
        }
        icu::UnicodeString::~UnicodeString((void *)v26, (icu::UnicodeString *)&v35);
        uint64_t v10 = (unsigned __int16)v41;
      }

      uint64_t v9 = (void *)*(unsigned int *)a4;
      *a4 = U_INVALID_FORMAT_ERROR;
      uint64_t v30 = "range start greater than end in starred-relation string";
    }

        icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v42);
        icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v44);
        unsigned int v29 = 0;
        char v24 = 1;
        unint64_t v7 = a3;
LABEL_40:
        icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v46);
        icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v48);
        if (v24) {
          goto LABEL_44;
        }
LABEL_45:
        icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v59);
        if (v29) {
          return v9;
        }
      }

      uint64_t v17 = 0;
      uint64_t v16 = 0;
      if ((v13 & 0x80000000) == 0) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
  }

  uint64_t v9 = 0LL;
  *a5 = U_INTERNAL_PROGRAM_ERROR;
  return v9;
}

          *(_DWORD *)(a1 + 16) = v22;
          unsigned int v70 = 0LL;
          __s1 = v11;
          memset(v69, 0, sizeof(v69));
          (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88LL))( v69,  a3,  v5);
          if (*v5 > 0
            || !icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v69, 0, (const char **)&__s1, a3))
          {
            goto LABEL_60;
          }

          unsigned int v25 = 0;
          break;
        case 7:
          if (strncmp(v11, "quarter", 7uLL)) {
            goto LABEL_36;
          }
          uint64_t v22 = 6;
          goto LABEL_59;
        default:
          goto LABEL_36;
      }

      while (1)
      {
        if (!strcmp(__s1, "dn")
          && !(*(unsigned int (**)(icu::ResourceValue *))(*(void *)a3 + 24LL))(a3)
          && *v5 <= 0)
        {
          unsigned int v27 = sub_180970470(*(_DWORD *)(a1 + 16));
          if ((v27 & 0x80000000) == 0)
          {
            unsigned int v28 = *(void *)(a1 + 24);
            unsigned int v29 = *(_DWORD *)(a1 + 12);
            if (*(unsigned __int16 *)(v28 + 5760LL * v29 + 384LL * v27 + 352) <= 0x1Fu)
            {
              uint64_t v30 = (UChar **)(v28 + 5760LL * v29 + 384LL * v27 + 344);
              LODWORD(v72[0]) = 0;
              *(void *)&uint64_t v77 = (*(uint64_t (**)(icu::ResourceValue *, void *, int *))(*(void *)a3 + 32LL))( a3,  v72,  v5);
              icu::UnicodeString::UnicodeString(v80, 1LL, &v77);
              v65[5] = v77;
              icu::UnicodeString::fastCopyFrom(v30, v80);
              icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)v80);
            }
          }
        }

        int v32 = __s1;
        if (!strcmp(__s1, "relative")) {
          break;
        }
        if (!strcmp(v32, "relativeTime"))
        {
          uint64_t v73 = v32;
          memset(v72, 0, 40);
          (*(void (**)(void *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88LL))( v72,  a3,  v5);
          if (*v5 <= 0)
          {
            unint64_t v33 = sub_180970494(*(_DWORD *)(a1 + 16));
            if ((v33 & 0x80000000) == 0)
            {
              int v34 = v33;
              if (icu::ResourceTable::getKeyAndValue( (icu::ResourceTable *)v72,  0,  (const char **)&v73,  a3))
              {
                int v35 = 0;
                uint64_t v63 = v34;
                do
                {
                  int v36 = v73;
                  if (!strcmp(v73, "past"))
                  {
                    int v37 = 0;
                  }

                  else
                  {
                    if (strcmp(v36, "future")) {
                      goto LABEL_85;
                    }
                    int v37 = 1;
                  }

                  *(_DWORD *)(a1 + 8) = v37;
                  int v74 = (icu::StandardPlural *)v36;
                  int32x2_t v79 = 0LL;
                  uint64_t v77 = 0u;
                  int v78 = 0u;
                  (*(void (**)(__int128 *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88LL))( &v77,  a3,  v5);
                  if (*v5 <= 0
                    && icu::ResourceTable::getKeyAndValue( (icu::ResourceTable *)&v77,  0,  (const char **)&v74,  a3))
                  {
                    int v38 = 1;
                    while (1)
                    {
                      int v41 = icu::StandardPlural::indexOrNegativeFromString(v74, v39);
                      if ((v41 & 0x80000000) != 0) {
                        goto LABEL_90;
                      }
                      BOOL v43 = *(void *)(a1 + 24)
                          + 1920LL * *(unsigned int *)(a1 + 12)
                          + (v63 << 7)
                      if (*(void *)(v43 + 8LL * v41)) {
                        goto LABEL_90;
                      }
                      char v44 = v41;
                      int v45 = icu::UMemory::operator new(0LL, (icu::UMemory *)0x48, v42);
                      if (!v45) {
                        break;
                      }
                      unint64_t v46 = v45;
                      int v76 = 0;
                      unint64_t v5 = (int *)v62;
                      unsigned int v75 = (char *)(*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(void *)a3 + 32LL))( a3,  &v76,  v62);
                      icu::UnicodeString::UnicodeString(v80, 1LL, &v75);
                      v65[4] = v75;
                      v46[1] = (uint64_t)off_18971B688;
                      *((_WORD *)v46 + 8) = 2;
                      icu::SimpleFormatter::applyPatternMinMaxArguments( (icu::SimpleFormatter *)v46,  (const icu::UnicodeString *)v80,  0,  1,  0,  v62);
                      *(void *)(v43 + 8 * v44) = v46;
                      icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)v80);
                      if (!*(void *)(v43 + 8 * v44)) {
                        goto LABEL_98;
                      }
LABEL_90:
                      if (!icu::ResourceTable::getKeyAndValue( (icu::ResourceTable *)&v77,  v38++,  (const char **)&v74,  a3)) {
                        goto LABEL_85;
                      }
                    }

                    *(void *)(v43 + 8 * v44) = 0LL;
                    unint64_t v5 = (int *)v62;
LABEL_98:
                    *unint64_t v5 = 7;
                    goto LABEL_90;
                  }

uint64_t sub_18083C9B8(uint64_t result, void *a2, int *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v8 = a2[1];
  unint64_t v7 = (_BYTE *)a2[2];
  uint64_t v9 = (_BYTE *)a2[3];
  uint64_t v10 = *(_BYTE **)(result + 32);
  uint64_t v64 = v10;
  uint64_t v11 = *(void *)(v6 + 48);
  if ((*(_BYTE *)(v6 + 56) & 0x10) != 0) {
    uint64_t v12 = 240LL;
  }
  else {
    uint64_t v12 = 232LL;
  }
  int v13 = *(char *)(v8 + 64);
  if (v13 < 1)
  {
    LOBYTE(v13) = 0;
    LOBYTE(v15) = 0;
    LODWORD(v14) = 0;
  }

  else
  {
    LODWORD(v14) = *(_DWORD *)(v8 + 72);
    int v15 = *(_DWORD *)(v8 + 76);
  }

  int v16 = *(_DWORD *)(result + 40) - (_DWORD)v10;
  __int128 v61 = *(unsigned __int16 **)(v11 + 96);
  uint64_t v62 = *(void *)(v11 + 88);
  uint64_t v17 = *(void *)(v11 + v12);
  int v18 = (_DWORD)v9 - (_DWORD)v7 - (char)v15 + v13;
  if (v18 >= 1 && (char)*(v9 - 1) < 0)
  {
    unsigned int v19 = *(v9 - 1);
    if (v18 < 2 || v19 > 0xBF)
    {
    }

    else
    {
      char v20 = *(v9 - 2);
    }
  }

  unsigned int v21 = *(_DWORD *)(v11 + 260);
  char v22 = *(_BYTE *)(v11 + 253);
  if ((_DWORD)v14 && v16 >= 1)
  {
    *(_DWORD *)(v8 + 72) = 0;
    *(_BYTE *)(v8 + 64) = 0;
    char v23 = v13;
    goto LABEL_46;
  }

  unint64_t v24 = (unint64_t)v7;
  while (1)
  {
    while (1)
    {
      unsigned int v28 = 0LL;
      while (1)
      {
        int v25 = v16 - 1;
        if (v16 < 1)
        {
          *a3 = 15;
          v24 += (unint64_t)v28;
          goto LABEL_113;
        }

        int v26 = (char)v28[v24];
        uint64_t v14 = v28[v24];
        if (v26 < 0) {
          break;
        }
        if (((v21 >> (v28[v24] >> 2)) & 1) == 0)
        {
          unsigned int v33 = *(unsigned __int16 *)(v17 + 2LL * (*v61 + v14));
          v24 += (unint64_t)(v28 + 1);
          goto LABEL_72;
        }

        unsigned int v27 = v64++;
        _BYTE *v27 = v14;
        ++v28;
        int v16 = v25;
        if (&v9[-v24] == v28)
        {
          unint64_t v24 = (unint64_t)v9;
          goto LABEL_87;
        }
      }

      char v29 = v28[v24];
      unint64_t v7 = &v28[v24 + 1];
      if (v14 > 0xED)
      {
        char v23 = 1;
        if ((v14 + 62) > 0x32u)
        {
LABEL_45:
          LOBYTE(v13) = 0;
          LOBYTE(v15) = 0;
          goto LABEL_46;
        }

        goto LABEL_39;
      }

      uint64_t v30 = &v28[v24];
      unsigned int v31 = v28[v24 + 2] ^ 0x80;
      if (v31 > 0x3F) {
        goto LABEL_39;
      }
      unsigned int v32 = *v7 & 0x3F | ((v26 & 0xF) << 6);
      unint64_t v24 = (unint64_t)(v30 + 3);
      unsigned int v33 = *(unsigned __int16 *)(v17 + 2LL * (v61[v32] + v31));
      if (*(_WORD *)(v17 + 2LL * (v61[v32] + v31))) {
        goto LABEL_73;
      }
      uint64_t v14 = v31 | (v32 << 6);
LABEL_78:
      uint64_t v63 = &unk_180A26700;
      uint64_t result = sub_18083A99C( v6,  *(void *)(v6 + 48),  v14,  (uint64_t *)&v63,  (uint64_t)&unk_180A26700,  &v64,  (unint64_t)&v64[v16],  0LL,  -1,  *(_BYTE *)(v5 + 2),  a3);
      if (*a3 >= 1)
      {
        *(_DWORD *)(v6 + 84) = result;
        goto LABEL_87;
      }

      if ((*(_DWORD *)(v6 + 208) & 0x80000000) == 0)
      {
        *a3 = -127;
LABEL_87:
        if (*a3 <= 0 && (*(_DWORD *)(v6 + 208) & 0x80000000) != 0)
        {
          unint64_t v47 = a2[3];
          if (v24 < v47)
          {
            int v48 = *(char *)v24;
            *(_BYTE *)(v8 + 65) = *(_BYTE *)v24;
            int v49 = v48;
            else {
              int v50 = 3;
            }
            else {
              int v51 = 0;
            }
            if (v48 < 0) {
              int v52 = v51;
            }
            else {
              int v52 = 1;
            }
            uint64_t v53 = (unsigned __int8 *)(v24 + 1);
            if (v24 + 1 >= v47)
            {
              char v55 = 1;
            }

            else
            {
              unint64_t v54 = ~v24 + v47;
              char v55 = 1;
              do
              {
                int v56 = *v53++;
                char v57 = v55++;
                *(_BYTE *)(v8 + v57 + 65) = v56;
                int v49 = v56 + (v49 << 6);
                --v54;
              }

              while (v54);
              uint64_t v53 = (unsigned __int8 *)v47;
            }

            *(_BYTE *)(v8 + 64) = v55;
            unint64_t v24 = (unint64_t)v53;
            *(_DWORD *)(v8 + 72) = v49;
            *(_DWORD *)(v8 + 76) = v52;
          }
        }

uint64_t sub_18083D020(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = a1 + ((unint64_t)a2 << 10);
  int v4 = *(_DWORD *)(v3 + 644);
  if ((v4 & 0x80000000) == 0 || (v4 & 0xF00000) == 0x700000)
  {
    int v5 = *(_DWORD *)(v3 + 260);
    if ((v5 & 0x80000000) == 0 || (v5 & 0xF00000) == 0x700000)
    {
      uint64_t v7 = 0LL;
      while (1)
      {
        int v8 = *(_DWORD *)(v3 + v7);
        if (v8 < 0 && (v8 & 0xF00000) != 0x700000) {
          break;
        }
        v7 += 4LL;
        if (v7 == 1024)
        {
          uint64_t v9 = 0LL;
          while (1)
          {
            unsigned int v10 = *(_DWORD *)(v3 + v9);
            if ((v10 & 0x80000000) == 0)
            {
            }

            v9 += 4LL;
            if (v9 == 1024) {
              return 0LL;
            }
          }

          return 1LL;
        }
      }
    }
  }

  return 1LL;
}

char *sub_18083D0CC(char *result, uint64_t a2, _DWORD *a3)
{
  if (!*(_BYTE *)(a2 + 8))
  {
    int v4 = result;
    int v5 = *(_BYTE **)(a2 + 32);
    uint64_t result = (char *)uprv_malloc(0x54uLL);
    *((void *)v4 + 2) = result;
    if (result)
    {
      if (!v5 || *v5 != 106 || v5[1] != 97 || (v6 = 0x605070001040203LL, char v7 = 1, v5[2]) && v5[2] != 95)
      {
        char v7 = 0;
        uint64_t v6 = 0x106050402030007LL;
      }

      result[74] = v7;
      *(_OWORD *)uint64_t result = xmmword_180A2689C;
      *((_OWORD *)result + icu::UVector32::~UVector32(this + 1) = unk_180A268AC;
      result[64] = 1;
      *(_DWORD *)(result + 65) = 0;
      v4[64] = 0;
      *((_OWORD *)result + 2) = xmmword_180A2689C;
      *((_OWORD *)result + 3) = unk_180A268AC;
      *((_WORD *)result + 36) = 1;
      result[75] = 0;
      *(void *)(result + 76) = v6;
      *((_DWORD *)v4 + 2icu::UVector32::~UVector32(this + 1) = 0;
    }

    else
    {
      *a3 = 7;
    }

    *((_WORD *)v4 + 68) = -3;
    v4[89] = -1;
  }

  return result;
}

void sub_18083D1B8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    if (!*(_BYTE *)(a1 + 62)) {
      uprv_free(v2);
    }
    *(void *)(a1 + 16) = 0LL;
  }

uint64_t sub_18083D1EC(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (a2 > 1
    || (*(_OWORD *)uint64_t v2 = xmmword_180A2689C,
        *(_OWORD *)(v2 + 16) = unk_180A268AC,
        *(_BYTE *)(v2 + 64) = 1,
        *(_DWORD *)(v2 + 65) = 0,
        *(_BYTE *)(result + 64) = 0,
        a2 != 1))
  {
    *(_OWORD *)(v2 + 32) = xmmword_180A2689C;
    *(_OWORD *)(v2 + 48) = unk_180A268AC;
    *(_WORD *)(v2 + 72) = 1;
    *(_BYTE *)(v2 + 75) = 0;
    uint64_t v3 = 0x106050402030007LL;
    if (*(_BYTE *)(v2 + 74) == 1) {
      uint64_t v3 = 0x605070001040203LL;
    }
    *(void *)(v2 + 76) = v3;
    *(_DWORD *)(result + 84) = 0;
  }

  return result;
}

void *sub_18083D26C(void *result, int *a2)
{
  uint64_t v2 = result[1];
  uint64_t v3 = (unsigned __int16 *)result[2];
  int v4 = *(_BYTE **)(v2 + 16);
  unint64_t v6 = result[3];
  int v5 = (_WORD *)result[4];
  unint64_t v7 = result[5];
  char v8 = v4[64];
  int v9 = v4[65];
  uint64_t v10 = v4[66];
  uint64_t v11 = v4[67];
  uint64_t v12 = v4[68];
  if (!v8)
  {
    uint64_t v14 = v4[66];
    if (v4[65]) {
      goto LABEL_80;
    }
    goto LABEL_72;
  }

  uint64_t v13 = v4[68];
  uint64_t v14 = v4[66];
  uint64_t v15 = v4[67];
  if (v4[65]) {
    goto LABEL_21;
  }
  while (2)
  {
    int v9 = 0;
    if ((unint64_t)v3 < v6 && (unint64_t)v5 < v7)
    {
      do
      {
        unsigned int v16 = *(unsigned __int8 *)v3;
        if (v16 < 0x20) {
          break;
        }
        uint64_t v3 = (unsigned __int16 *)((char *)v3 + 1);
        if ((v16 & 0x80) != 0)
        {
          unsigned int v17 = *(_DWORD *)&v4[4 * (char)v11] + (v16 & 0x7F);
          if (HIWORD(v17))
          {
            *int v5 = (v17 >> 10) - 10304;
            __int16 v18 = v17 & 0x3FF | 0xDC00;
            if ((unint64_t)(v5 + 1) >= v7)
            {
              int v9 = 0;
              *(_WORD *)(v2 + 144) = v18;
              *(_BYTE *)(v2 + 93) = 1;
              *a2 = 15;
              ++v5;
              goto LABEL_100;
            }

            v5[1] = v18;
            v5 += 2;
          }

          else
          {
            *v5++ = v17;
          }
        }

        else
        {
          *v5++ = v16;
        }
      }

      while ((unint64_t)v3 < v6 && (unint64_t)v5 < v7);
      int v9 = 0;
    }

    uint64_t v13 = v12;
    uint64_t v14 = v10;
LABEL_20:
    uint64_t v15 = v11;
LABEL_21:
    uint64_t v19 = 0LL;
    uint64_t v11 = v15;
    uint64_t v10 = v14;
    uint64_t v12 = v13;
    int v20 = v9;
LABEL_23:
    if ((unint64_t)v5 >= v7)
    {
      *a2 = 15;
LABEL_42:
      LOBYTE(v12) = v13;
      LOBYTE(v10) = v14;
      LOBYTE(v1icu::UVector32::~UVector32(this + 1) = v15;
      goto LABEL_100;
    }

    int v22 = v20;
    unsigned int v21 = *((unsigned __int8 *)v3 + v19);
    char v23 = 2;
    unint64_t v24 = (_BYTE *)(v2 + 66);
    int v20 = 2;
    uint64_t v25 = *((unsigned __int8 *)v3 + v19);
    switch(v22)
    {
      case 0:
        if (((1LL << v21) & 0x2601) != 0)
        {
          *v5++ = v21;
LABEL_51:
          uint64_t v3 = (unsigned __int16 *)((char *)v3 + v19 + 1);
          continue;
        }

        if (v21 >= 0x10)
        {
          if (v21 > 0x17)
          {
            uint64_t v11 = v21 - 24;
            int v20 = 6;
LABEL_36:
            char v23 = 1;
            unint64_t v24 = (_BYTE *)(v2 + 65);
            goto LABEL_37;
          }

          uint64_t v3 = (unsigned __int16 *)((char *)v3 + v19 + 1);
          uint64_t v11 = v21 - 16;
          continue;
        }

        if (v21 <= 8)
        {
          uint64_t v10 = v21 - 1;
          int v20 = 3;
          goto LABEL_36;
        }

        if (v21 == 11)
        {
          int v20 = 4;
          goto LABEL_36;
        }

        if (v21 == 14)
        {
          char v23 = 1;
          unint64_t v24 = (_BYTE *)(v2 + 65);
          int v20 = 1;
LABEL_37:
          uint64_t v25 = v12;
          goto LABEL_38;
        }

        if (v21 != 15)
        {
          int v9 = 0;
          *a2 = 12;
          *(_BYTE *)(v2 + 65) = v21;
          *(_BYTE *)(v2 + 64) = 1;
          uint64_t v3 = (unsigned __int16 *)((char *)v3 + v19 + 1);
          goto LABEL_100;
        }

        uint64_t v3 = (unsigned __int16 *)((char *)v3 + v19 + 1);
LABEL_72:
        int v9 = 0;
        if ((unint64_t)v3 + 1 < v6 && (unint64_t)v5 < v7)
        {
          while ((*(_BYTE *)v3 + 13) <= 0xECu)
          {
            *v5++ = _byteswap_ushort(*v3);
            char v29 = v3 + 1;
            if ((unint64_t)v3 + 3 < v6)
            {
              ++v3;
            }

            int v9 = 0;
            uint64_t v3 = v29;
            goto LABEL_79;
          }

          int v9 = 0;
        }

void *sub_18083D858(void *result, int *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = result[1];
  int v4 = (unsigned __int8 *)result[2];
  int v5 = *(_BYTE **)(v3 + 16);
  unint64_t v7 = result[3];
  unint64_t v6 = (_WORD *)result[4];
  unint64_t v9 = result[5];
  char v8 = (int *)result[6];
  int v10 = v5[65];
  uint64_t v11 = v5[66];
  uint64_t v12 = v5[67];
  uint64_t v13 = v5[68];
  if (v5[64])
  {
    char v46 = v5[64];
    int v14 = 0;
    if (v5[65])
    {
      int v15 = -1;
      goto LABEL_7;
    }

    uint64_t v17 = v5[68];
    uint64_t v18 = v5[67];
    int v15 = 0;
    goto LABEL_68;
  }

  int v16 = 0;
  if (v5[65])
  {
    int v15 = -1;
    uint64_t v17 = v5[68];
  }

  else
  {
LABEL_131:
    uint64_t v17 = v13;
LABEL_88:
    if ((unint64_t)(v4 + 1) >= v7 || (unint64_t)v6 >= v9)
    {
      int v10 = 0;
      int v15 = v16;
    }

    else
    {
      unint64_t v38 = 0LL;
      int v15 = v16;
      while ((v4[v38] + 13) <= 0xECu)
      {
        v6[v38 / 2] = _byteswap_ushort(*(_WORD *)&v4[v38]);
        unint64_t v39 = (unint64_t)&v6[v38 / 2 + 1];
        if (v8) {
          *v8++ = v15;
        }
        unint64_t v40 = v38 + 2;
        if ((unint64_t)&v4[v38 + 3] < v7)
        {
          int v15 = v16 + v38;
          v38 += 2LL;
          if (v39 < v9) {
            continue;
          }
        }

        int v10 = 0;
        v16 += v40;
        int v15 = v16 - 2;
        unint64_t v6 = (_WORD *)((char *)v6 + v40);
        v4 += v40;
        goto LABEL_101;
      }

      int v10 = 0;
      v16 += v38;
      unint64_t v6 = (_WORD *)((char *)v6 + v38);
      v4 += v38;
    }
  }

LABEL_116:
    if (v7 - (void)v4 == ++v41)
    {
      char v27 = 0;
      int v4 = (unsigned __int8 *)v7;
      int v10 = v42;
      goto LABEL_118;
    }
  }

  uint64_t v18 = (v43 + 32);
  if ((v43 + 32) >= 0x13u)
  {
    *(_BYTE *)(v3 + 65) = v43;
    int v42 = 2;
    char v44 = 1;
LABEL_115:
    *(_BYTE *)(v3 + 64) = v44;
    uint64_t v13 = v43;
    goto LABEL_116;
  }

  if (v43 < 0xE8)
  {
    int v15 = v16 + v41 + 1;
    v4 += v41 + 1;
    char v46 = 1;
    uint64_t v17 = v13;
    goto LABEL_68;
  }

  if (v43 > 0xEF)
  {
    if ((_DWORD)v43 != 240)
    {
      if ((_DWORD)v43 == 241)
      {
        int v10 = 4;
        goto LABEL_135;
      }

      char v27 = 0;
      int v10 = 0;
      *uint64_t v2 = 12;
      *(_BYTE *)(v3 + 65) = v43;
      *(_BYTE *)(v3 + 64) = 1;
      v4 += v41 + 1;
LABEL_118:
      LOBYTE(v17) = v13;
LABEL_120:
      LOBYTE(v18) = v12;
      goto LABEL_121;
    }

    *(_BYTE *)(v3 + 65) = -16;
    char v44 = 1;
    int v42 = 1;
    uint64_t v43 = v13;
    goto LABEL_115;
  }

  uint64_t v12 = (v43 + 24);
  int v10 = 6;
LABEL_135:
  *(_BYTE *)(v3 + 65) = v43;
  char v46 = 1;
  *(_BYTE *)(v3 + 64) = 1;
  int v14 = v16 + v41 + 1;
  v4 += v41 + 1;
LABEL_7:
  while (2)
  {
    if ((unint64_t)v4 >= v7)
    {
      LOBYTE(v17) = v13;
      LOBYTE(v18) = v12;
      uint64_t v2 = a2;
    }

    else
    {
      uint64_t v19 = 0LL;
      uint64_t v18 = v12;
      char v20 = v11;
      uint64_t v47 = v11;
      uint64_t v17 = v13;
      int v21 = v10;
LABEL_9:
      if ((unint64_t)v6 >= v9)
      {
        uint64_t v2 = a2;
        *a2 = 15;
        LOBYTE(v17) = v13;
        LOBYTE(v1icu::UVector32::~UVector32(this + 1) = v20;
        LOBYTE(v18) = v12;
      }

      else
      {
        int v23 = v21;
        unsigned int v22 = v4[v19];
        char v24 = 2;
        uint64_t v25 = (_BYTE *)(v3 + 66);
        int v21 = 2;
        uint64_t v26 = v4[v19];
        switch(v23)
        {
          case 0:
            if (((1LL << v22) & 0x2601) != 0)
            {
              *v6++ = v22;
LABEL_39:
              v4 += v19 + 1;
              if (v8) {
                *v8++ = v15;
              }
              int v15 = v14 + 1 + v19;
              goto LABEL_42;
            }

            if (v22 < 0x10)
            {
              if (v22 <= 8)
              {
                uint64_t v47 = v22 - 1;
                int v21 = 3;
LABEL_22:
                char v24 = 1;
                uint64_t v25 = (_BYTE *)(v3 + 65);
                goto LABEL_23;
              }

              switch(v22)
              {
                case 0xBu:
                  int v21 = 4;
                  goto LABEL_22;
                case 0xEu:
                  char v24 = 1;
                  uint64_t v25 = (_BYTE *)(v3 + 65);
                  int v21 = 1;
LABEL_23:
                  uint64_t v26 = v17;
                  goto LABEL_24;
                case 0xFu:
                  int v16 = v14 + v19 + 1;
                  v4 += v19 + 1;
                  uint64_t v2 = a2;
                  uint64_t v11 = v47;
                  uint64_t v12 = v18;
                  goto LABEL_88;
              }

              int v10 = 0;
              uint64_t v2 = a2;
              *a2 = 12;
              *(_BYTE *)(v3 + 65) = v22;
              *(_BYTE *)(v3 + 64) = 1;
              v4 += v19 + 1;
LABEL_27:
              char v27 = v46;
              LOBYTE(v1icu::UVector32::~UVector32(this + 1) = v47;
              goto LABEL_121;
            }

            if (v22 > 0x17)
            {
              uint64_t v18 = v22 - 24;
              int v21 = 6;
              goto LABEL_22;
            }

            int v15 = v14 + v19 + 1;
            v4 += v19 + 1;
            uint64_t v18 = v22 - 16;
LABEL_42:
            uint64_t v11 = v47;
            uint64_t v2 = a2;
LABEL_68:
            int v10 = 0;
            if ((unint64_t)v4 >= v7 || (unint64_t)v6 >= v9)
            {
LABEL_84:
              uint64_t v13 = v17;
              uint64_t v12 = v18;
              int v14 = v15;
              continue;
            }

            while (2)
            {
              unsigned int v34 = *v4;
              if (v34 < 0x20)
              {
LABEL_83:
                int v10 = 0;
                goto LABEL_84;
              }

              ++v4;
              if ((v34 & 0x80) == 0 || (unsigned int v34 = *(_DWORD *)&v5[4 * (char)v18] + (v34 & 0x7F), !HIWORD(v34)))
              {
                *v6++ = v34;
                if (v8)
                {
                  uint64_t v35 = 1LL;
                  unint64_t v36 = v8;
                  goto LABEL_75;
                }

                goto LABEL_76;
              }

              *unint64_t v6 = (v34 >> 10) - 10304;
              if ((unint64_t)(v6 + 1) < v9)
              {
                v6[1] = v34 & 0x3FF | 0xDC00;
                if (v8)
                {
                  int *v8 = v15;
                  unint64_t v36 = v8 + 1;
                  uint64_t v35 = 2LL;
                  v6 += 2;
LABEL_75:
                  v8 += v35;
                  *unint64_t v36 = v15;
                }

                else
                {
                  v6 += 2;
                }

                BOOL v143 = L"strength";
                icu::UnicodeString::UnicodeString(&__src, 1LL, &v143);
                if ((v172 & 1) != 0)
                {
                  uint64_t v47 = (void *)WORD4(__src);
                  if ((BYTE8(__src) & 1) != 0) {
                    goto LABEL_126;
                  }
                }

                else
                {
                  if ((v172 & 0x8000u) == 0LL) {
                    char v46 = (unsigned __int16)v172 >> 5;
                  }
                  else {
                    char v46 = DWORD1(v172);
                  }
                  if ((SWORD4(__src) & 0x8000u) == 0) {
                    uint64_t v47 = (void *)(WORD4(__src) >> 5);
                  }
                  else {
                    uint64_t v47 = (void *)HIDWORD(__src);
                  }
                  if ((BYTE8(__src) & 1) == 0
                    && v46 == (_DWORD)v47
                    && icu::UnicodeString::doEquals( (icu::UnicodeString *)&v171,  (const icu::UnicodeString *)&__src,  v46))
                  {
LABEL_126:
                    if ((v167 & 0x8000u) == 0LL) {
                      int v48 = (unsigned __int16)v167 >> 5;
                    }
                    else {
                      int v48 = DWORD1(v167);
                    }
                    icu::UnicodeString::~UnicodeString( (void *)((unsigned __int16)v167 >> 5),  (icu::UnicodeString *)&__src);
                    v121[6] = (uint64_t)v143;
                    if (v48 == 1)
                    {
                      int v49 = (unsigned __int16)v167;
                      if ((v167 & 0x8000u) == 0LL) {
                        int v50 = (unsigned __int16)v167 >> 5;
                      }
                      else {
                        int v50 = DWORD1(v167);
                      }
                      if (v50)
                      {
                        if ((v167 & 2) != 0) {
                          int v51 = (unsigned __int16 *)&v167 + 1;
                        }
                        else {
                          int v51 = (unsigned __int16 *)v168;
                        }
                        int v52 = *v51;
                        int v49 = *v51;
                        if ((_DWORD)v49 == 73)
                        {
                          uint64_t v53 = 15;
LABEL_173:
                          icu::CollationSettings::setStrength(*(void *)(v3 + 32), v53, 0, a2);
                          goto LABEL_189;
                        }

                        if ((unsigned __int16)(v52 - 53) >= 0xFFFCu)
                        {
                          uint64_t v53 = v49 - 49;
                          if ((_DWORD)v49 != 48) {
                            goto LABEL_173;
                          }
                        }
                      }

                      goto LABEL_211;
                    }

uint64_t sub_18083E008(uint64_t result, int *a2)
{
  uint64_t v84 = result;
  unsigned int v87 = 0;
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(unsigned __int16 **)(result + 16);
  uint64_t v4 = *(void *)(v2 + 16);
  unint64_t v5 = *(void *)(result + 24);
  unint64_t v6 = *(_BYTE **)(result + 32);
  int v7 = *(_DWORD *)(result + 40) - (_DWORD)v6;
  uint64_t v8 = *(unsigned __int8 *)(v4 + 72);
  __int128 v85 = (_BYTE *)v2;
  uint64_t v86 = *(unsigned __int8 *)(v4 + 73);
  uint64_t v9 = *(unsigned int *)(v4 + 4 * v86 + 32);
  for (unsigned int i = *(_DWORD *)(v2 + 84); ; unsigned int i = 0)
  {
    BOOL v11 = !i || v7 <= 0;
    BOOL v12 = !v11;
    if (!(_DWORD)v8) {
      break;
    }
    if (v12) {
      goto LABEL_10;
    }
    while (1)
    {
      if (v7 < 1) {
        goto LABEL_157;
      }
      unsigned int v56 = *v3++;
      unsigned int i = v56;
      if (v56 - 32 <= 0x5F) {
        goto LABEL_91;
      }
      if (i > 0x1F) {
        break;
      }
      if (((1LL << i) & 0x2601) == 0)
      {
        i |= 0x100u;
        goto LABEL_98;
      }

LABEL_91:
      *unint64_t v6 = i;
LABEL_92:
      unsigned int i = 0;
      ++v6;
      --v7;
    }

    char v15 = i - v9;
    if ((i & 0xF800) != 0xD800)
    {
      if (i > 0x9F)
      {
        if (i == 65279 || i >> 4 > 0xFFE)
        {
          i |= 0xE0000u;
LABEL_114:
          int v32 = 3;
        }

        else
        {
          uint64_t v57 = 0LL;
          int v58 = 4224;
          while (i - *(_DWORD *)(v4 + 4 * v57 + 32) >= 0x80)
          {
            ++v57;
            v58 += 256;
            if (v57 == 8) {
              goto LABEL_119;
            }
          }

          if ((v57 & 0x80) != 0)
          {
LABEL_119:
            uint64_t v64 = 0LL;
            int v62 = 256;
            while (i - dword_180A268BC[v64] >= 0x80)
            {
              ++v64;
              v62 += 256;
              if (v64 == 8) {
                goto LABEL_126;
              }
            }

            if ((v64 & 0x80) == 0)
            {
              int v63 = i - dword_180A268BC[v64];
              goto LABEL_125;
            }

        uint64_t v46 = v39;
LABEL_92:
        ++v37;
        char v39 = v46;
        if (v37 == v14) {
          goto LABEL_96;
        }
      }
    }

    LODWORD(v46) = 0;
    int v38 = 0;
LABEL_96:
    uint64_t v57 = v46 | v38;
    int v7 = v65;
    int v10 = v66;
    if (v57)
    {
      v9 -= v46;
      if (!v9) {
        goto LABEL_121;
      }
      char v15 = 0;
      goto LABEL_120;
    }

    if (v10 || (_DWORD)v9 == a3) {
      break;
    }
    if (HIDWORD(v55))
    {
      uint64_t v43 = (int)v9 - 1LL;
      char v44 = s[v43];
      if ((char)s[v43] < 0)
      {
        punsigned int i = v9 - 1;
        int v47 = utf8_prevCharSafeBody(s, 0, &pi, v44, -3);
        uint64_t v48 = v9 - pi;
        else {
          int v45 = -v48;
        }
        if (v45 < 1) {
          goto LABEL_98;
        }
LABEL_108:
        uint64_t v9 = (v9 - v45);
        if (!(_DWORD)v9)
        {
          int v14 = 0LL;
          goto LABEL_118;
        }

        uint64_t v49 = LODWORD(v56[0]) + v45;
        else {
          int v50 = 0;
        }
        uint64_t v51 = v49 - v50;
        if (*((_BYTE *)v54 + v51))
        {
          *((_BYTE *)v54 + v5icu::UVector32::~UVector32(this + 1) = 0;
          --HIDWORD(v55);
        }

        int v10 = 0;
        LODWORD(v56[0]) = v51;
      }

      else
      {
        if (icu::UnicodeSet::contains(v52, s[v43]))
        {
          int v45 = 1;
          goto LABEL_108;
        }

      uint64_t v16 = *(_DWORD *)(v11 + 120);
      uint64_t v37 = (_DWORD)v48 == v16 - 1;
      LODWORD(v48) = v48 + 1;
      if (v37) {
        return this;
      }
    }
  }

  if ((int)(v15 - v20) > v18)
  {
    uint64_t v46 = U_BUFFER_OVERFLOW_ERROR;
    goto LABEL_97;
  }

  return icu::CollationData::makeReorderRanges((icu::CollationData *)v11, a2, a3, 1, a5, a6);
}

      LODWORD(v12) = v13;
    }

    return (v12 + 1);
  }

  return result;
}

  (*(void (**)(icu::UVector *))(*(void *)v4 + 8LL))(v4);
  uint64_t v4 = 0LL;
LABEL_92:
  icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)v41);
  return v4;
}

LABEL_126:
            uint64_t v65 = v9;
            uint64_t v66 = v8;
            uint64_t result = sub_18083F67C(i, &v87);
            if ((result & 0x80000000) != 0)
            {
              uint64_t v9 = v65;
              if ((i - 13312) >> 10 <= 0x28
                && ((unint64_t)v3 >= v5 || (*v3 - 13312) >> 10 <= 0x28))
              {
                uint64_t v8 = 0LL;
                i |= 0xF0000u;
                goto LABEL_114;
              }

              i |= 0xE0000u;
              int v32 = 3;
            }

            else
            {
              int v67 = result;
              uint64_t v68 = *(char *)(v4 + 75);
              unsigned __int8 v69 = *(_BYTE *)(v4 + v68 + 76);
              int v70 = v69;
              else {
                char v71 = v68 + 1;
              }
              *(_BYTE *)(v4 + 75) = v71;
              uint64_t v72 = v87;
              *(_DWORD *)(v4 + 4LL * v69 + 32) = v87;
              uint64_t result = sub_18083F604(v4, v69);
              uint64_t v9 = v72;
              LOBYTE(v86) = v70;
              unsigned int i = ((v70 << 16) + 1572864) | (v67 << 8) | (i - v72) | 0x80;
              int v32 = 3;
            }

            uint64_t v8 = v66;
            goto LABEL_99;
          }

          char v59 = v57;
          if ((unint64_t)v3 >= v5
            || (v60 = *(_DWORD *)(v4 + 4 * v57 + 32), unsigned int v61 = *v3, v60 + 127 >= v61)
            && (v60 <= v61 || v61 <= 0x7F && (v61 > 0x1F || ((1LL << v61) & 0x2601) != 0)))
          {
            uint64_t v73 = *(unsigned int *)(v4 + 4 * v57 + 32);
            uint64_t v74 = v8;
            uint64_t result = sub_18083F604(v4, v57);
            uint64_t v9 = v73;
            uint64_t v8 = v74;
            unsigned int i = v58 | (i - v73);
            int v32 = 2;
            LOBYTE(v86) = v59;
            goto LABEL_99;
          }

          int v62 = i - v60;
          int v63 = ((char)v57 << 8) + 384;
LABEL_125:
          unsigned int i = v63 | v62;
LABEL_98:
          int v32 = 2;
        }
      }

      else
      {
        int v32 = 2;
        unsigned int i = i & 0x7F | 0x200;
      }

      goto LABEL_99;
    }

    if ((i & 0x400) != 0)
    {
LABEL_164:
      int v81 = 12;
LABEL_165:
      uint64_t v79 = v84;
      unsigned int v75 = v85;
LABEL_166:
      unsigned int v80 = a2;
      goto LABEL_167;
    }

  if (v67) {
    (*(void (**)(icu::AnnualTimeZoneRule *))(*(void *)v67 + 8LL))(v67);
  }
  icu::UnicodeString::~UnicodeString((void *)v60, (icu::UnicodeString *)&v105);
  icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v96);
  icu::UnicodeString::~UnicodeString(v80, (icu::UnicodeString *)&v110);
  return icu::UnicodeString::~UnicodeString(v81, (icu::UnicodeString *)&v115);
}

uint64_t sub_18083E9CC(uint64_t result, int *a2)
{
  int v98 = (void *)result;
  int v2 = 0;
  unsigned int v106 = 0;
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v4 = *(unsigned __int16 **)(result + 16);
  uint64_t v5 = *(void *)(v3 + 16);
  unint64_t v6 = *(void *)(result + 24);
  int v7 = *(_BYTE **)(result + 32);
  int v8 = *(_DWORD *)(result + 40) - (_DWORD)v7;
  uint64_t v9 = *(int **)(result + 48);
  uint64_t v10 = *(unsigned __int8 *)(v5 + 72);
  unint64_t v104 = v6;
  uint64_t v105 = *(unsigned __int8 *)(v5 + 73);
  uint64_t v103 = v3;
  unsigned int v11 = *(_DWORD *)(v3 + 84);
  if (v11) {
    int v12 = -1;
  }
  else {
    int v12 = 0;
  }
  uint64_t v13 = *(unsigned int *)(v5 + 4 * v105 + 32);
  while (1)
  {
    if (v11) {
      BOOL v14 = v8 <= 0;
    }
    else {
      BOOL v14 = 1;
    }
    char v15 = !v14;
    if (!(_DWORD)v10)
    {
      if ((v15 & 1) != 0)
      {
        int v16 = v12;
LABEL_24:
        if ((unint64_t)v4 < v6)
        {
          int v22 = *v4;
          if ((v22 & 0xFC00) == 0xDC00)
          {
            uint64_t v23 = 0LL;
            ++v4;
            int v12 = v2 + 1;
            unsigned int v24 = v22 + (v11 << 10) - 56613888;
            int v25 = 57472;
            while (v24 - *(_DWORD *)(v5 + 4 * v23 + 32) >= 0x80)
            {
              ++v23;
              v25 += 256;
              if (v23 == 8) {
                goto LABEL_54;
              }
            }

            if ((v23 & 0x80) != 0 || (unint64_t)v4 < v6 && (*v4 - 13312) >> 10 < 0x29)
            {
LABEL_54:
              uint64_t v44 = v13;
              unsigned int v100 = v4;
              int v95 = v16;
              uint64_t result = sub_18083F67C(v24, &v106);
              int v16 = v95;
              uint64_t v4 = v100;
              uint64_t v13 = v44;
              unint64_t v6 = v104;
              if ((result & 0x80000000) != 0)
              {
LABEL_61:
                uint64_t v10 = 0LL;
                unsigned int v11 = v22 | (v11 << 16);
                int v33 = 4;
                goto LABEL_96;
              }

              int v45 = result;
              uint64_t v46 = *(char *)(v5 + 75);
              int v47 = *(char *)(v5 + v46 + 76);
              LOBYTE(v105) = *(_BYTE *)(v5 + v46 + 76);
              else {
                char v48 = v46 + 1;
              }
              *(_BYTE *)(v5 + 75) = v48;
              uint64_t v49 = v106;
              *(_DWORD *)(v5 + 4LL * v47 + 32) = v106;
              uint64_t result = sub_18083F604(v5, v47);
              int v16 = v95;
              uint64_t v4 = v100;
              uint64_t v13 = v49;
              unint64_t v6 = v104;
              unsigned int v11 = ((v45 << 8) + 268304384) | (v47 << 21) | (v24 - v49) | 0xF1000080;
              int v33 = 4;
            }

            else
            {
              uint64_t v52 = *(unsigned int *)(v5 + 4 * v23 + 32);
              LOBYTE(v105) = v23;
              int v53 = v4;
              int v54 = v16;
              uint64_t result = sub_18083F604(v5, v23);
              int v16 = v54;
              uint64_t v4 = v53;
              uint64_t v13 = v52;
              unint64_t v6 = v104;
              unsigned int v11 = v25 | (v24 - v52);
              int v33 = 2;
            }

            uint64_t v10 = 1LL;
            goto LABEL_96;
          }

          LOBYTE(v10) = 0;
          goto LABEL_185;
        }

LABEL_179:
        LOBYTE(v10) = 0;
LABEL_180:
        __int128 v88 = v98;
        goto LABEL_188;
      }

      if (v8 < 1)
      {
        LOBYTE(v10) = 0;
        goto LABEL_175;
      }

      unint64_t v41 = 0LL;
      int v42 = v2 + 1;
      while (1)
      {
        unsigned int v11 = v4[v41 / 2];
        if ((v11 - 13312) >> 10 > 0x28) {
          break;
        }
        if (v8 < 2)
        {
          LOBYTE(v10) = 0;
          uint64_t v4 = (unsigned __int16 *)((char *)v4 + v41 + 2);
          v7 += v41;
          int v8 = 1;
          int v33 = 2;
          goto LABEL_162;
        }

        uint64_t v43 = &v7[v41];
        *uint64_t v43 = BYTE1(v11);
        v43[1] = v11;
        if (v9)
        {
          *uint64_t v9 = v12;
          v9[1] = v12;
          v9 += 2;
        }

        if ((unint64_t)&v4[v41 / 2 + 1] >= v6)
        {
          LOBYTE(v10) = 0;
          unsigned int v11 = 0;
          uint64_t v4 = (unsigned __int16 *)((char *)v4 + v41 + 2);
          v7 += v41 + 2;
          goto LABEL_180;
        }

        v41 += 2LL;
        ++v42;
        int v12 = ++v2;
        BOOL v14 = v8 < 3;
        v8 -= 2;
        if (v14)
        {
          LOBYTE(v10) = 0;
          unsigned int v11 = 0;
          uint64_t v4 = (unsigned __int16 *)((char *)v4 + v41);
          v7 += v41;
          goto LABEL_175;
        }
      }

      int v50 = &v4[v41 / 2 + 1];
      uint64_t v51 = &v7[v41];
      if ((v11 - 13312) >> 8 < 0xBF)
      {
        if (v11 >> 13 <= 6)
        {
          if ((v11 & 0x400) != 0)
          {
            LOBYTE(v10) = 0;
            uint64_t v4 = (unsigned __int16 *)((char *)v4 + v41 + 2);
            v7 += v41;
            goto LABEL_185;
          }

          uint64_t v4 = (unsigned __int16 *)((char *)v4 + v41 + 2);
          v7 += v41;
          int v16 = v12;
          int v2 = v42;
          goto LABEL_24;
        }

        uint64_t v10 = 0LL;
        v11 |= 0xF00000u;
        int v33 = 3;
LABEL_95:
        uint64_t v4 = v50;
        int v7 = v51;
        int v16 = v12;
        int v12 = v42;
        goto LABEL_96;
      }

      if ((unint64_t)v50 < v6 && (*v50 - 13312) >> 10 < 0x29)
      {
        uint64_t v10 = 0LL;
        int v33 = 2;
        goto LABEL_95;
      }

      if (v11 - 48 >= 0xA && v11 - 97 >= 0x1A && v11 - 65 >= 0x1A)
      {
        uint64_t v57 = 0LL;
        int v58 = 57472;
        while (v11 - *(_DWORD *)(v5 + 4 * v57 + 32) >= 0x80)
        {
          ++v57;
          v58 += 256;
          if (v57 == 8) {
            goto LABEL_89;
          }
        }

        if ((v57 & 0x80) != 0)
        {
LABEL_89:
          unsigned int v101 = v13;
          uint64_t result = sub_18083F67C(v11, &v106);
          if ((result & 0x80000000) != 0)
          {
            uint64_t v10 = 0LL;
            int v33 = 2;
            uint64_t v4 = v50;
            int v7 = v51;
            int v16 = v12;
            int v12 = v42;
            unint64_t v6 = v104;
            uint64_t v13 = v101;
            goto LABEL_96;
          }

          int v60 = result;
          uint64_t v61 = *(char *)(v5 + 75);
          unsigned __int8 v62 = *(_BYTE *)(v5 + v61 + 76);
          LODWORD(v105) = v62;
          else {
            char v63 = v61 + 1;
          }
          *(_BYTE *)(v5 + 75) = v63;
          uint64_t v64 = v106;
          *(_DWORD *)(v5 + 4LL * v62 + 32) = v106;
          uint64_t result = sub_18083F604(v5, v62);
          uint64_t v13 = v64;
          unint64_t v6 = v104;
          unsigned int v11 = (((_DWORD)v105 << 16) + 15204352) | (v60 << 8) | (v11 - v64) | 0x80;
          int v33 = 3;
          goto LABEL_94;
        }

        uint64_t v59 = *(unsigned int *)(v5 + 4 * v57 + 32);
        LOBYTE(v105) = v57;
        uint64_t result = sub_18083F604(v5, v57);
        uint64_t v13 = v59;
        unint64_t v6 = v104;
        unsigned int v11 = v58 | (v11 - v59);
      }

      else
      {
        v11 |= (v105 << 8) + 57344;
      }

      int v33 = 2;
LABEL_94:
      uint64_t v10 = 1LL;
      goto LABEL_95;
    }

    int v16 = v12;
    if ((v15 & 1) != 0) {
      goto LABEL_13;
    }
    while (1)
    {
      if (v8 < 1) {
        goto LABEL_175;
      }
      unsigned int v65 = *v4++;
      unsigned int v11 = v65;
      int v12 = v2 + 1;
      if (v65 - 32 > 0x5F) {
        break;
      }
LABEL_115:
      *int v7 = v11;
      if (v9) {
        goto LABEL_17;
      }
LABEL_116:
      uint64_t result = 0LL;
LABEL_117:
      unsigned int v11 = 0;
      ++v7;
      --v8;
      uint64_t v9 = (int *)result;
      int v16 = v12;
      int v2 = v12;
    }

    if (v11 > 0x1F)
    {
      char v19 = v11 - v13;
      if (v11 - v13 <= 0x7F)
      {
LABEL_16:
        *int v7 = v19 | 0x80;
        if (!v9) {
          goto LABEL_116;
        }
LABEL_17:
        *uint64_t v9 = v16;
        uint64_t result = (uint64_t)(v9 + 1);
        goto LABEL_117;
      }

      if ((v11 & 0xF800) != 0xD800)
      {
        if (v11 <= 0x9F)
        {
          int v33 = 2;
          unsigned int v11 = v11 & 0x7F | 0x200;
          goto LABEL_96;
        }

        if (v11 == 65279 || v11 >> 4 > 0xFFE)
        {
          v11 |= 0xE0000u;
          int v33 = 3;
          goto LABEL_96;
        }

        uint64_t v66 = 0LL;
        int v67 = 4224;
        while (v11 - *(_DWORD *)(v5 + 4 * v66 + 32) >= 0x80)
        {
          ++v66;
          v67 += 256;
          if (v66 == 8) {
            goto LABEL_137;
          }
        }

        if ((v66 & 0x80) == 0)
        {
          char v68 = v66;
          if ((unint64_t)v4 >= v6
            || (unsigned int v69 = *(_DWORD *)(v5 + 4 * v66 + 32), v70 = *v4, v69 + 127 >= v70)
            && (v69 <= v70 || v70 <= 0x7F && (v70 > 0x1F || ((1LL << v70) & 0x2601) != 0)))
          {
            unsigned int v102 = *(_DWORD *)(v5 + 4 * v66 + 32);
            uint64_t v82 = v10;
            int v83 = v4;
            int v96 = v16;
            uint64_t result = sub_18083F604(v5, v66);
            int v16 = v96;
            uint64_t v4 = v83;
            uint64_t v13 = v102;
            uint64_t v10 = v82;
            unint64_t v6 = v104;
            unsigned int v11 = v67 | (v11 - v102);
            int v33 = 2;
            LOBYTE(v105) = v68;
            goto LABEL_96;
          }

          int v71 = v11 - v69;
          int v72 = ((char)v66 << 8) + 384;
LABEL_143:
          unsigned int v11 = v72 | v71;
          goto LABEL_123;
        }

  if (!v15)
  {
LABEL_182:
    if (*a4 > 0) {
      goto LABEL_200;
    }
    uint64_t v73 = v100;
    if (!v100) {
      goto LABEL_200;
    }
    uint64_t v74 = 0;
    uint64_t v75 = v99;
    while (1)
    {
      int v76 = *v73;
      if (!v74)
      {
        if (strlen(*v73) < 2)
        {
          uint64_t v74 = 0;
          goto LABEL_189;
        }

        (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 16LL))(a2, "-u", 2LL);
        int v76 = *v73;
      }

      uint64_t v74 = 1;
LABEL_189:
      if (!strcmp(v76, "attribute"))
      {
        if (v75)
        {
          char v80 = v75;
          do
          {
            (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 16LL))(a2, "-", 1LL);
            uint64_t v81 = strlen(*v80);
            (*(void (**)(uint64_t, const char *, size_t))(*(void *)a2 + 16LL))(a2, *v80, v81);
            char v80 = (const char **)v80[1];
          }

          while (v80);
        }
      }

      else
      {
        (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 16LL))(a2, "-", 1LL);
        uint64_t v77 = strlen(*v73);
        (*(void (**)(uint64_t, const char *, size_t))(*(void *)a2 + 16LL))(a2, *v73, v77);
        unsigned __int8 v78 = v73[1];
        if (strcmp(v78, "true") && strcmp(v78, "yes"))
        {
          (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 16LL))(a2, "-", 1LL);
          int v79 = strlen(v73[1]);
          (*(void (**)(uint64_t, const char *, size_t))(*(void *)a2 + 16LL))(a2, v73[1], v79);
        }
      }

      uint64_t v73 = (const char **)v73[2];
      if (!v73) {
        goto LABEL_200;
      }
    }
  }

  int v72 = sub_180853FF0(v103, v48);
  if (v72)
  {
    unsigned __int8 *v72 = "va";
    v72[1] = "posix";
    sub_1808540C8(&v100, (uint64_t)v72, 1);
    goto LABEL_182;
  }

  *a4 = 7;
LABEL_200:
  sub_180850DC8((uint64_t)v98);
LABEL_201:
  if (v46) {
    uenum_close(v46);
  }
  sub_180850DC8((uint64_t)v102);
  sub_180850D68((uint64_t)v103);
  sub_180850D68((uint64_t)&v104);
  LODWORD(v104) = 0;
  if (*a4 <= 0)
  {
    unsigned int v118 = 0u;
    memset(v119, 0, sizeof(v119));
    unsigned int v116 = 0u;
    int v117 = 0u;
    unsigned int v115 = 0u;
    memset(__s, 0, sizeof(__s));
    uint64_t v82 = uloc_getVariant((char *)v109[0], __s, 157, (int *)&v104);
    if ((int)v104 > 0 || (_DWORD)v104 == -124)
    {
LABEL_230:
      if (v94) {
        *a4 = 1;
      }
      goto LABEL_204;
    }

    if (v82 < 1) {
      goto LABEL_204;
    }
    int v83 = 0LL;
    int v84 = __s;
    __int128 v85 = 1;
    do
    {
      unsigned int v86 = *v84;
      if (*v84)
      {
        if (v86 != 95 && v86 != 45)
        {
          if (!v83) {
            int v83 = v84;
          }
          unsigned int v86 = 1;
          goto LABEL_228;
        }

        const char *v84 = 0;
        unsigned int v86 = 1;
      }

      if (v83)
      {
        unsigned int v87 = *v83;
        if (*v83)
        {
          __int128 v88 = (unsigned __int8 *)(v83 + 1);
          do
          {
            *(v88 - icu::UVector32::~UVector32(this + 1) = uprv_asciitolower(v87);
            __int128 v89 = *v88++;
            unsigned int v87 = v89;
          }

          while (v89);
        }

        if (!sub_180851260(v83, -1, 1)) {
          goto LABEL_230;
        }
        if (!v85) {
          goto LABEL_227;
        }
        if (!sub_180851058(v83, -1))
        {
          (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 16LL))(a2, "-", 1LL);
          (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 16LL))(a2, "x", 1LL);
          (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 16LL))(a2, "-", 1LL);
          (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 16LL))(a2, "lvariant", 8LL);
LABEL_227:
          (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 16LL))(a2, "-", 1LL);
          int v90 = strlen(v83);
          (*(void (**)(uint64_t, char *, size_t))(*(void *)a2 + 16LL))(a2, v83, v90);
          int v83 = 0LL;
          __int128 v85 = 0;
          goto LABEL_228;
        }

        int v83 = 0LL;
      }

LABEL_137:
        uint64_t v73 = 0LL;
        int v71 = 256;
        while (v11 - dword_180A268BC[v73] >= 0x80)
        {
          ++v73;
          v71 += 256;
          if (v73 == 8) {
            goto LABEL_144;
          }
        }

        if ((v73 & 0x80) == 0)
        {
          int v72 = v11 - dword_180A268BC[v73];
          goto LABEL_143;
        }

LABEL_144:
        unsigned int v93 = v10;
        int v94 = v16;
        uint64_t v74 = v4;
        uint64_t v75 = v13;
        uint64_t result = sub_18083F67C(v11, &v106);
        if ((result & 0x80000000) == 0)
        {
          int v76 = result;
          uint64_t v77 = *(char *)(v5 + 75);
          unsigned __int8 v78 = *(_BYTE *)(v5 + v77 + 76);
          int v79 = v78;
          else {
            char v80 = v77 + 1;
          }
          *(_BYTE *)(v5 + 75) = v80;
          uint64_t v81 = v106;
          *(_DWORD *)(v5 + 4LL * v78 + 32) = v106;
          uint64_t result = sub_18083F604(v5, v78);
          uint64_t v13 = v81;
          LOBYTE(v105) = v79;
          unsigned int v11 = ((v79 << 16) + 1572864) | (v76 << 8) | (v11 - v81) | 0x80;
          int v33 = 3;
          unint64_t v6 = v104;
          uint64_t v10 = v93;
          int v16 = v94;
          uint64_t v4 = v74;
          goto LABEL_96;
        }

        unint64_t v6 = v104;
        uint64_t v13 = v75;
        uint64_t v4 = v74;
        if ((v11 - 13312) >> 10 > 0x28 || (unint64_t)v74 < v104 && (*v74 - 13312) >> 10 > 0x28)
        {
          v11 |= 0xE0000u;
          int v33 = 3;
          uint64_t v10 = v93;
        }

        else
        {
          uint64_t v10 = 0LL;
          v11 |= 0xF0000u;
          int v33 = 3;
        }

        goto LABEL_37;
      }

      if ((v11 & 0x400) == 0)
      {
        int v2 = v12;
LABEL_13:
        unsigned int v92 = v10;
        int v94 = v16;
        int v91 = v7;
        int v17 = *v4;
        if ((v17 & 0xFC00) == 0xDC00)
        {
          ++v4;
          int v12 = v2 + 1;
          int v18 = (v11 << 10) - 56613888 + v17;
          char v19 = v17 - v13;
          uint64_t v20 = 0LL;
          int v21 = 4224;
          while ((v18 - *(_DWORD *)(v5 + 4 * v20 + 32)) >= 0x80)
          {
            ++v20;
            v21 += 256;
            if (v20 == 8) {
              goto LABEL_32;
            }
          }

          if ((v20 & 0x80) == 0)
          {
            uint64_t v26 = *(unsigned int *)(v5 + 4 * v20 + 32);
            uint64_t v27 = v5;
            LOBYTE(v105) = v20;
            uint64_t v28 = v10;
            int v29 = v4;
            char v30 = v9;
            uint64_t v31 = v5;
            int v32 = v16;
            uint64_t result = sub_18083F604(v27, v20);
            int v16 = v32;
            uint64_t v5 = v31;
            uint64_t v9 = v30;
            uint64_t v4 = v29;
            uint64_t v13 = v26;
            int v7 = v91;
            uint64_t v10 = v28;
            unint64_t v6 = v104;
            unsigned int v11 = v21 | (v18 - v13);
            int v33 = 2;
            goto LABEL_96;
          }

LABEL_185:
      int v90 = 12;
      goto LABEL_186;
    }

    if (((1LL << v11) & 0x2601) != 0) {
      goto LABEL_115;
    }
    v11 |= 0x100u;
LABEL_123:
    int v33 = 2;
LABEL_96:
    if (v8 < v33) {
      break;
    }
    if (v9)
    {
      if (v33 != 2)
      {
        if (v33 != 3)
        {
          *v7++ = HIBYTE(v11);
          *v9++ = v16;
        }

        *v7++ = BYTE2(v11);
        *v9++ = v16;
      }

      *int v7 = BYTE1(v11);
      *uint64_t v9 = v16;
      v7[1] = v11;
      v7 += 2;
      v9[1] = v16;
      v9 += 2;
    }

    else
    {
      if (v33 != 2)
      {
        if (v33 != 3) {
          *v7++ = HIBYTE(v11);
        }
        *v7++ = BYTE2(v11);
      }

      uint64_t v9 = 0LL;
      *(_WORD *)int v7 = bswap32(v11) >> 16;
      v7 += 2;
    }

    unsigned int v11 = 0;
    v8 -= v33;
    int v2 = v12;
  }

  int v12 = v16;
LABEL_162:
  int v84 = v33 - v8;
  __int128 v85 = (_BYTE *)(v103 + 104);
  switch(v84)
  {
    case 1:
      goto LABEL_166;
    case 2:
      goto LABEL_165;
    case 3:
      goto LABEL_164;
    case 4:
      __int128 v85 = (_BYTE *)(v103 + 105);
      *(_BYTE *)(v103 + 104) = HIBYTE(v11);
LABEL_164:
      *v85++ = BYTE2(v11);
LABEL_165:
      *v85++ = BYTE1(v11);
LABEL_166:
      *__int128 v85 = v11;
      break;
    default:
      break;
  }

  *(_BYTE *)(v103 + 9icu::UVector32::~UVector32(this + 1) = v84;
  unsigned int v86 = v11 >> (8 * v84);
  if (v8 == 1)
  {
    *v7++ = v86;
    if (!v9) {
      goto LABEL_174;
    }
    __int128 v89 = a2;
    __int128 v88 = v98;
LABEL_178:
    unsigned int v11 = 0;
    *v9++ = v12;
    goto LABEL_183;
  }

  if (v8 == 2)
  {
    *int v7 = BYTE1(v86);
    unsigned int v87 = v7 + 1;
    __int128 v89 = a2;
    __int128 v88 = v98;
    if (!v9) {
      goto LABEL_182;
    }
LABEL_177:
    *v9++ = v12;
    *unsigned int v87 = v86;
    int v7 = v87 + 1;
    goto LABEL_178;
  }

  if (v8 != 3)
  {
LABEL_174:
    unsigned int v11 = 0;
LABEL_175:
    int v90 = 15;
LABEL_186:
    __int128 v89 = a2;
    __int128 v88 = v98;
    goto LABEL_187;
  }

  *int v7 = BYTE2(v86);
  if (v9)
  {
    *v9++ = v12;
    v7[1] = BYTE1(v86);
    unsigned int v87 = v7 + 2;
    __int128 v89 = a2;
    __int128 v88 = v98;
    goto LABEL_177;
  }

  v7[1] = BYTE1(v86);
  unsigned int v87 = v7 + 2;
  __int128 v89 = a2;
  __int128 v88 = v98;
LABEL_182:
  uint64_t v9 = 0LL;
  unsigned int v11 = 0;
  *unsigned int v87 = v86;
  int v7 = v87 + 1;
LABEL_183:
  int v90 = 15;
LABEL_187:
  *__int128 v89 = v90;
LABEL_188:
  *(_BYTE *)(v5 + 72) = v10;
  *(_BYTE *)(v5 + 73) = v105;
  *(_DWORD *)(v103 + 84) = v11;
  v88[2] = v4;
  v88[4] = v7;
  v88[6] = v9;
  return result;
}

const char *sub_18083F578(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(a1 + 16) + 74LL) == 1) {
    return "SCSU,locale=ja";
  }
  else {
    return "SCSU";
  }
}

uint64_t sub_18083F59C(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  if (*a4 > 0) {
    return 0LL;
  }
  if (*a3)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    __int128 v5 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)(a2 + 288) = *(_OWORD *)v4;
    *(_OWORD *)(a2 + 304) = v5;
    __int128 v6 = *(_OWORD *)(v4 + 32);
    __int128 v7 = *(_OWORD *)(v4 + 48);
    __int128 v8 = *(_OWORD *)(v4 + 64);
    *(_DWORD *)(a2 + 368) = *(_DWORD *)(v4 + 80);
    *(_OWORD *)(a2 + 336) = v7;
    *(_OWORD *)(a2 + 352) = v8;
    *(_OWORD *)(a2 + 320) = v6;
    *(void *)(a2 + 16) = a2 + 288;
    *(_BYTE *)(a2 + 62) = 1;
  }

  else
  {
    a2 = 0LL;
    *a3 = 376;
  }

  return a2;
}

uint64_t sub_18083F604(uint64_t result, unsigned __int8 a2)
{
  int v2 = *(char *)(result + 75);
  do
  {
    BOOL v3 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v3) {
      int v2 = 7;
    }
  }

  while (*(unsigned __int8 *)(result + v2 + 76) != a2);
  if (v2 == 7) {
    int v4 = 0;
  }
  else {
    int v4 = v2 + 1;
  }
  while (v4 != *(char *)(result + 75))
  {
    int v5 = v2;
    int v2 = v4;
    *(_BYTE *)(result + 76 + v5) = *(_BYTE *)(result + 76 + v4);
    if (v4 == 7) {
      int v4 = 0;
    }
    else {
      ++v4;
    }
  }

  *(_BYTE *)(result + v2 + 76) = a2;
  return result;
}

uint64_t sub_18083F67C(unsigned int a1, unsigned int *a2)
{
  for (uint64_t i = 0LL; i != 7; ++i)
  {
    unsigned int v3 = dword_180A268DC[i];
    if (a1 - v3 <= 0x7F)
    {
      *a2 = v3;
      return (i + 249);
    }
  }

  if (a1 < 0x80) {
    return 0xFFFFFFFFLL;
  }
  if (a1 - 118784 < 0x3000 || a1 >> 10 < 0xD || (a1 & 0xFFFFC000) == 0x10000)
  {
    *a2 = a1 & 0x7FFFFF80;
    return a1 >> 7;
  }

  else
  {
    uint64_t v4 = 0xFFFFFFFFLL;
    if (a1 != 65279 && (a1 - 57344) >> 4 <= 0x1FE)
    {
      *a2 = a1 & 0x7FFFFF80;
      return (a1 - 44032) >> 7;
    }
  }

  return v4;
}

uint64_t ucnvsel_open(uint64_t a1, int a2, icu::UnicodeSet *a3, unsigned int a4, int *a5)
{
  if (*a5 > 0) {
    return 0LL;
  }
  int v7 = a2;
  if (a2 < 0 || (uint64_t v10 = a1) == 0 && a2)
  {
    uint64_t v5 = 0LL;
    int v11 = 1;
LABEL_7:
    *a5 = v11;
    return v5;
  }

  uint64_t v13 = uprv_malloc(0x38uLL);
  uint64_t v5 = (uint64_t)v13;
  if (!v13)
  {
    int v11 = 7;
    goto LABEL_7;
  }

  v13[6] = 0LL;
  *((_OWORD *)v13 + icu::UVector32::~UVector32(this + 1) = 0u;
  *((_OWORD *)v13 + 2) = 0u;
  *(_OWORD *)uint64_t v13 = 0u;
  if (!v7)
  {
    int v7 = ucnv_countAvailable();
    uint64_t v10 = 0LL;
  }

  BOOL v14 = uprv_malloc(8LL * v7);
  *(void *)(v5 + 24) = v14;
  if (!v14) {
    goto LABEL_41;
  }
  *BOOL v14 = 0LL;
  if (v7 < 1)
  {
    int v16 = 0;
  }

  else
  {
    uint64_t v15 = 0LL;
    int v16 = 0;
    do
    {
      if (v10) {
        Availableint Name = *(const char **)(v10 + 8 * v15);
      }
      else {
        Availableint Name = (const char *)ucnv_getAvailableName(v15);
      }
      v16 += strlen(AvailableName) + 1;
      ++v15;
    }

    while (v7 != v15);
  }

  int v30 = v16 & 3;
  int v18 = (v16 & 3) != 0 ? 4 - (v16 & 3) : 0;
  int v19 = v18 + v16;
  *(_DWORD *)(v5 + 36) = v19;
  uint64_t v20 = (char *)uprv_malloc(v19);
  if (!v20)
  {
LABEL_41:
    *a5 = 7;
LABEL_42:
    ucnvsel_close(v5);
    return 0LL;
  }

  int v21 = v20;
  int v29 = 4 - (v16 & 3);
  if (v7 >= 1)
  {
    uint64_t v22 = 0LL;
    uint64_t v23 = *(void *)(v5 + 24);
    do
    {
      *(void *)(v23 + 8 * v22) = v21;
      unsigned int v24 = *(char **)(*(void *)(v5 + 24) + 8 * v22);
      if (v10) {
        int v25 = *(const char **)(v10 + 8 * v22);
      }
      else {
        int v25 = (const char *)ucnv_getAvailableName(v22);
      }
      strcpy(v24, v25);
      uint64_t v23 = *(void *)(v5 + 24);
      v21 += strlen(*(const char **)(v23 + 8 * v22++)) + 1;
    }

    while (v7 != v22);
  }

  if (v30)
  {
    if (v29 >= 1) {
      int v26 = 1;
    }
    else {
      int v26 = v29;
    }
    bzero(v21, (v29 - v26) + 1LL);
  }

  *(_BYTE *)(v5 + 49) = 1;
  *(_DWORD *)(v5 + 32) = v7;
  int v27 = v7 + 31;
  if (v7 < -31) {
    int v27 = v7 + 62;
  }
  uint64_t v28 = (void **)upvec_open(v27 >> 5, a5);
  sub_18083F968(v5, (uint64_t)v28, a3, a4, a5);
  upvec_close(v28);
  if (*a5 >= 1) {
    goto LABEL_42;
  }
  return v5;
}

void sub_18083F968(uint64_t a1, uint64_t a2, icu::UnicodeSet *a3, unsigned int a4, int *a5)
{
  if (*a5 <= 0)
  {
    uint64_t v8 = a1;
    int v9 = *(_DWORD *)(a1 + 32);
    int v10 = v9 + 31;
    if (v9 < -31) {
      int v10 = v9 + 62;
    }
    int v27 = v10 >> 5;
    if (v9 < 1) {
      goto LABEL_20;
    }
    int v11 = 0;
    int v12 = v27 <= 1 ? 1 : v10 >> 5;
    do
      upvec_setValue(a2, 1114113, 1114113, v11++, -1, -1, a5);
    while (v12 != v11);
    if (*(int *)(v8 + 32) < 1)
    {
LABEL_20:
      if (a3)
      {
        int ItemCount = uset_getItemCount(a3);
        if (ItemCount >= 1)
        {
          int v23 = ItemCount;
          int v24 = 0;
          if (v27 <= 1) {
            int v25 = 1;
          }
          else {
            int v25 = v27;
          }
          do
          {
            uint64_t v32 = 0LL;
            uset_getItem(a3, v24, (_DWORD *)&v32 + 1, &v32, 0LL, 0, a5);
            if (v9 >= 1)
            {
              for (int i = 0; i != v25; ++i)
                upvec_setValue(a2, SHIDWORD(v32), v32, i, -1, -1, a5);
            }

            ++v24;
          }

          while (v24 != v23);
        }
      }

      *(void *)uint64_t v8 = upvec_compactToUTrie2WithRowIndexes(a2, a5);
      *(void *)(v8 + 8) = upvec_cloneArray(a2, (_DWORD *)(v8 + 16), 0LL, a5);
      *(_DWORD *)(v8 + 16) *= v27;
      *(_BYTE *)(v8 + 48) = 1;
    }

    else
    {
      uint64_t v13 = 0LL;
      uint64_t v29 = v8;
      int v28 = v9;
      while (1)
      {
        BOOL v14 = ucnv_open(*(unsigned __int8 **)(*(void *)(v8 + 24) + 8 * v13), (UErrorCode *)a5);
        uint64_t v15 = (uint64_t *)*a5;
        int v16 = v14;
        int v17 = uset_open(1u, 0LL, v15);
        ucnv_getUnicodeSet((uint64_t)v16, (uint64_t)v17, a4, a5);
        if (*a5 >= 1)
        {
          ucnv_close(v16);
          return;
        }

        int v18 = a3;
        int v19 = uset_getItemCount(v17);
        if (v19 >= 1)
        {
          int v20 = v19;
          for (int j = 0; j != v20; ++j)
          {
            uint64_t v32 = 0LL;
            int v31 = 0;
            uset_getItem(v17, j, (_DWORD *)&v32 + 1, &v32, 0LL, 0, &v31);
            if (v31 <= 0) {
              upvec_setValue(a2, SHIDWORD(v32), v32, v13 >> 5, -1, 1 << v13, a5);
            }
          }
        }

        ucnv_close(v16);
        uset_close(v17);
        a3 = v18;
        uint64_t v8 = v29;
        int v9 = v28;
        if (*a5 >= 1) {
          return;
        }
      }
    }
  }

void ucnvsel_close(uint64_t a1)
{
  if (a1)
  {
    if (*(_BYTE *)(a1 + 49)) {
      uprv_free(**(void ***)(a1 + 24));
    }
    uprv_free(*(void **)(a1 + 24));
    if (*(_BYTE *)(a1 + 48)) {
      uprv_free(*(void **)(a1 + 8));
    }
    utrie2_close(*(void *)a1);
    uprv_free(*(void **)(a1 + 40));
    uprv_free((void *)a1);
  }

uint64_t ucnvsel_serialize(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  if (*a4 > 0) {
    return 0LL;
  }
  if (a3 < 0 || a3 && (!a2 || (a2 & 3) != 0))
  {
    uint64_t v4 = 0LL;
    int v13 = 1;
LABEL_12:
    *a4 = v13;
    return v4;
  }

  int v9 = utrie2_serialize(*(void *)a1, 0LL, 0, a4);
  int v10 = v9;
  if (*a4 == 15 || (uint64_t v4 = 0LL, *a4 <= 0))
  {
    *a4 = 0;
    int v11 = *(_DWORD *)(a1 + 16);
    int v12 = *(_DWORD *)(a1 + 36);
    uint64_t v4 = (v9 + 4 * v11 + v12 + 96);
    if ((int)v4 <= a3)
    {
      int v15 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)a2 = 668598304;
      *(_DWORD *)(a2 + 20) = 0;
      *(_OWORD *)(a2 + 4) = xmmword_180A268F8;
      *(void *)(a2 + 24) = 0LL;
      *(_DWORD *)(a2 + 32) = v9;
      *(_DWORD *)(a2 + 36) = v11;
      *(_DWORD *)(a2 + 40) = v15;
      *(_DWORD *)(a2 + 44) = v12;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)(a2 + 64) = 0u;
      *(_OWORD *)(a2 + 76) = 0u;
      *(_DWORD *)(a2 + 92) = v9 + 4 * v11 + v12 + 64;
      int v16 = (char *)(a2 + 96);
      utrie2_serialize(*(void *)a1, v16, v9, a4);
      int v17 = &v16[v10];
      uint64_t v18 = *(int *)(a1 + 16);
      memcpy(v17, *(const void **)(a1 + 8), 4 * v18);
      memcpy(&v17[4 * v18], **(const void ***)(a1 + 24), *(int *)(a1 + 36));
      return v4;
    }

    int v13 = 15;
    goto LABEL_12;
  }

  return v4;
}

_OWORD *ucnvsel_openFromSerialized(unsigned __int16 *a1, uint64_t a2, int *a3)
{
  if (*a3 > 0) {
    return 0LL;
  }
  uint64_t v5 = a1;
  if (!a1 || (int)a2 < 1 || (a1 & 3) != 0)
  {
    unsigned int v3 = 0LL;
    int v7 = 1;
    goto LABEL_21;
  }

  if (a2 <= 0x1F)
  {
LABEL_7:
    unsigned int v3 = 0LL;
    int v7 = 8;
LABEL_21:
    *a3 = v7;
    return v3;
  }

  if (*((unsigned __int8 *)a1 + 2) != 218
    || *((_BYTE *)a1 + 3) != 39
    || *((_BYTE *)a1 + 12) != 67
    || *((_BYTE *)a1 + 13) != 83
    || *((_BYTE *)a1 + 14) != 101
    || *((_BYTE *)a1 + 15) != 108)
  {
    unsigned int v3 = 0LL;
    int v7 = 3;
    goto LABEL_21;
  }

  if (*((_BYTE *)a1 + 16) != 1)
  {
    unsigned int v3 = 0LL;
    int v7 = 16;
    goto LABEL_21;
  }

  if (*((_BYTE *)a1 + 8) || *((_BYTE *)a1 + 9))
  {
    uint64_t v8 = udata_openSwapperForInputData(a1, a2, 0, 0, a3);
    int v12 = sub_1808400CC((uint64_t)v8, (uint64_t)v5, 0xFFFFFFFFLL, 0LL, a3, v9, v10, v11);
    if (*a3 >= 1)
    {
      udata_closeSwapper(v8);
      return 0LL;
    }

    if (v12 > (int)a2)
    {
      udata_closeSwapper(v8);
      goto LABEL_7;
    }

    BOOL v14 = (unsigned __int16 *)uprv_malloc(v12);
    if (!v14)
    {
      udata_closeSwapper(v8);
LABEL_40:
      unsigned int v3 = 0LL;
      int v7 = 7;
      goto LABEL_21;
    }

    uint64_t v18 = (uint64_t)v5;
    uint64_t v5 = v14;
    sub_1808400CC((uint64_t)v8, v18, a2, v14, a3, v15, v16, v17);
    udata_closeSwapper(v8);
    if (*a3 >= 1)
    {
      uprv_free(v5);
      return 0LL;
    }

    int v19 = v5;
  }

  else
  {
    int v19 = 0LL;
  }

  int v20 = *v5;
  if (v20 + 64 > a2 || (v30 = v19, int v21 = (int *)((char *)v5 + *v5), (int)a2 - v20 < v21[15]))
  {
    uprv_free(v19);
    goto LABEL_7;
  }

  unsigned int v3 = uprv_malloc(0x38uLL);
  uint64_t v22 = uprv_malloc(8LL * v21[2]);
  int v23 = v22;
  if (!v3 || !v22)
  {
    uprv_free(v30);
    uprv_free(v3);
    uprv_free(v23);
    goto LABEL_40;
  }

  v3[1] = 0u;
  v3[2] = 0u;
  *unsigned int v3 = 0u;
  int v24 = *v21;
  *((_DWORD *)v3 + 4) = v21[1];
  *((void *)v3 + 3) = v22;
  *((void *)v3 + 4) = *((void *)v21 + 1);
  *((void *)v3 + 5) = v30;
  *((void *)v3 + 6) = 0LL;
  *(void *)unsigned int v3 = utrie2_openFromSerialized(0, (uint64_t)(v21 + 16), v24, 0LL, a3);
  if (*a3 >= 1)
  {
    ucnvsel_close((uint64_t)v3);
    return 0LL;
  }

  uint64_t v25 = (uint64_t)v21 + *v21 + 64;
  *((void *)v3 + icu::UVector32::~UVector32(this + 1) = v25;
  uint64_t v26 = *((unsigned int *)v3 + 8);
  if ((int)v26 >= 1)
  {
    uint64_t v27 = 0LL;
    int v28 = (const char *)(v25 + 4LL * *((int *)v3 + 4));
    uint64_t v29 = 8 * v26;
    do
    {
      *(void *)(*((void *)v3 + 3) + v27) = v28;
      v28 += strlen(v28) + 1;
      v27 += 8LL;
    }

    while (v29 != v27);
  }

  return v3;
}

uint64_t sub_1808400CC( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = a3;
  uint64_t v41 = *MEMORY[0x1895F89C0];
  int v13 = udata_swapDataHeader(a1, (unsigned __int16 *)a2, a3, a4, a5, a6, a7, a8);
  if (*a5 > 0) {
    return 0LL;
  }
  uint64_t v21 = *(unsigned __int8 *)(a2 + 12);
  if (__PAIR64__(*(unsigned __int8 *)(a2 + 13), v21) != 0x5300000043LL
    || *(_BYTE *)(a2 + 14) != 101
    || *(_BYTE *)(a2 + 15) != 108)
  {
    udata_printError( a1,  (uint64_t)"ucnvsel_swap(): data format %02x.%02x.%02x.%02x is not recognized as UConverterSelector data\n",  v14,  v15,  v16,  v17,  v18,  v19,  v21);
    uint64_t result = 0LL;
    int v24 = 3;
LABEL_11:
    *a5 = v24;
    return result;
  }

  if (*(_BYTE *)(a2 + 16) != 1)
  {
    udata_printError( a1,  (uint64_t)"ucnvsel_swap(): format version %02x is not supported\n",  v14,  v15,  v16,  v17,  v18,  v19,  *(unsigned __int8 *)(a2 + 16));
    uint64_t result = 0LL;
    int v24 = 16;
    goto LABEL_11;
  }

  int v22 = v13;
  if (v10 < 0)
  {
    uint64_t v23 = 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t v23 = (v10 - v13);
    if ((int)v23 <= 63)
    {
      udata_printError( a1,  (uint64_t)"ucnvsel_swap(): too few bytes (%d after header) for UConverterSelector data\n",  v14,  v15,  v16,  v17,  v18,  v19,  (v10 - v13));
LABEL_19:
      uint64_t result = 0LL;
      int v24 = 8;
      goto LABEL_11;
    }
  }

  uint64_t v25 = 0LL;
  uint64_t v26 = v13;
  *(_OWORD *)size_t __n = 0u;
  uint64_t v27 = a2 + v13;
  memset(v39, 0, sizeof(v39));
  do
  {
    *(_DWORD *)((char *)v39 + v25) = udata_readInt32(a1, *(unsigned int *)(v27 + v25));
    v25 += 4LL;
  }

  while (v25 != 64);
  int v34 = HIDWORD(__n[1]);
  if ((v23 & 0x80000000) == 0)
  {
    if ((int)v23 < SHIDWORD(__n[1]))
    {
      udata_printError( a1,  (uint64_t)"ucnvsel_swap(): too few bytes (%d after header) for all of UConverterSelector data\n",  v28,  v29,  v30,  v31,  v32,  v33,  v23);
      goto LABEL_19;
    }

    int v35 = (char *)a4 + v22;
    (*(void (**)(uint64_t, uint64_t, uint64_t, char *, int *))(a1 + 56))( a1,  a2 + v22,  64LL,  (char *)a4 + v26,  a5);
    uint64_t v36 = SLODWORD(v39[0]);
    utrie2_swap(a1, (unsigned __int16 *)(v27 + 64), v39[0], (uint64_t)(v35 + 64), a5);
    uint64_t v37 = v36 + 64;
    uint64_t v38 = 4LL * SDWORD1(v39[0]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, char *, int *))(a1 + 56))(a1, v27 + v37, v38, &v35[v37], a5);
    (*(void (**)(uint64_t, uint64_t, void, char *, int *))(a1 + 72))( a1,  v27 + v38 + (int)v37,  HIDWORD(v39[0]),  &v35[v38 + (int)v37],  a5);
  }

  return (v34 + v22);
}

void *ucnvsel_selectForString(uint64_t a1, unsigned __int16 *a2, int a3, int *a4)
{
  if (*a4 > 0) {
    return 0LL;
  }
  if (!a1 || (int v7 = a2) == 0LL && a3)
  {
    int v8 = 1;
LABEL_6:
    *a4 = v8;
    return 0LL;
  }

  int v10 = *(_DWORD *)(a1 + 32);
  int v11 = v10 + 31;
  if (v10 < -31) {
    int v11 = v10 + 62;
  }
  uint64_t v12 = (v11 >> 5);
  int v13 = (__int32 *)uprv_malloc(4 * (int)v12);
  if (!v13)
  {
    int v8 = 7;
    goto LABEL_6;
  }

  uint64_t v14 = v13;
  memset(v13, 255, 4 * (int)v12);
  if (v7)
  {
    uint64_t v15 = &v7[a3];
    while (1)
    {
      if (a3 < 0)
      {
        unsigned int v16 = *v7;
        if (!*v7) {
          return sub_18084051C(a1, v14, a4);
        }
      }

      else
      {
        if (v7 == v15) {
          return sub_18084051C(a1, v14, a4);
        }
        unsigned int v16 = *v7;
      }

      uint64_t v17 = v7 + 1;
      if ((v16 & 0xFC00) == 0xD800)
      {
        if (a3 < 0 || v15 != v17)
        {
          int v21 = *v17;
          uint64_t v18 = *(uint64_t **)a1;
          if ((v21 & 0xFC00) == 0xDC00)
          {
            unsigned int v22 = v21 + (v16 << 10) - 56613888;
            uint64_t v23 = *v18;
            else {
              int v24 = (v21 & 0x1F)
            }
                  + 4
                  * *(unsigned __int16 *)(v23
                                        + 2LL
                                        * (((v22 >> 5) & 0x3F) + *(unsigned __int16 *)(v23 + 2LL * ((v22 >> 11) + 2080))));
            uint64_t v17 = v7 + 2;
            uint64_t v25 = (unsigned __int16 *)(v23 + 2LL * v24);
            goto LABEL_27;
          }
        }

        else
        {
          uint64_t v18 = *(uint64_t **)a1;
        }

        uint64_t v19 = *v18;
        unsigned int v20 = (v16 >> 5) + 320;
      }

      else
      {
        uint64_t v19 = **(void **)a1;
        unsigned int v20 = v16 >> 5;
      }

      uint64_t v25 = (unsigned __int16 *)(v19 + 2LL * ((v16 & 0x1F) + 4 * *(unsigned __int16 *)(v19 + 2LL * v20)));
LABEL_27:
      if (v10 >= 1)
      {
        int v26 = 0;
        uint64_t v27 = (int *)(*(void *)(a1 + 8) + 4LL * *v25);
        uint64_t v28 = v14;
        uint64_t v29 = v12;
        do
        {
          int v30 = *v27++;
          int v31 = *v28 & v30;
          *v28++ = v31;
          v26 |= v31;
          --v29;
        }

        while (v29);
        int v7 = v17;
        if (v26) {
          continue;
        }
      }

      return sub_18084051C(a1, v14, a4);
    }
  }

  return sub_18084051C(a1, v14, a4);
}

void *sub_18084051C(uint64_t a1, __int32 *a2, _DWORD *a3)
{
  __int128 v6 = (__int16 *)uprv_malloc(0x18uLL);
  int v7 = v6;
  if (v6)
  {
    *(void *)__int128 v6 = 0LL;
    *((_DWORD *)v6 + 2) = 0;
    *((void *)v6 + 2) = a1;
    int v8 = uprv_malloc(0x38uLL);
    uint64_t v9 = v8;
    if (v8)
    {
      _OWORD *v8 = xmmword_189715D58;
      v8[1] = *(_OWORD *)&off_189715D68;
      v10.i32[1] = 1;
      void v8[2] = xmmword_189715D78;
      *((void *)v8 + 6) = sub_1808409B8;
      int v11 = *(_DWORD *)(a1 + 32);
      int v12 = v11 + 31;
      if (v11 < -31) {
        int v12 = v11 + 62;
      }
      if (v11 >= 1)
      {
        unsigned __int16 v13 = 0;
        uint64_t v14 = (v12 >> 5);
        uint64_t v15 = a2;
        uint64_t v16 = v14;
        do
        {
          __int32 v18 = *v15++;
          __int32 v17 = v18;
          if (v18)
          {
            v10.i32[0] = v17;
            int8x8_t v10 = vcnt_s8(v10);
            v13 += vaddlv_u8((uint8x8_t)v10);
          }

          --v16;
        }

        while (v16);
        if ((__int16)v13 >= 1)
        {
          uint64_t v19 = uprv_malloc(2 * v13);
          *(void *)int v7 = v19;
          if (!v19)
          {
            *a3 = 7;
            int v8 = v9;
            uint64_t v9 = 0LL;
            goto LABEL_25;
          }

          uint64_t v20 = 0LL;
          __int16 v21 = 0;
          int v22 = *(_DWORD *)(a1 + 32);
          else {
            uint64_t v23 = v14;
          }
          do
          {
            unsigned int v24 = a2[v20];
            int v25 = 32;
            do
            {
              if (v22 <= v21) {
                break;
              }
              if ((v24 & 1) != 0)
              {
                uint64_t v26 = v7[4];
                v7[4] = v26 + 1;
                v19[v26] = v21;
              }

              v24 >>= 1;
              ++v21;
              --v25;
            }

            while (v25);
            ++v20;
          }

          while (v20 != v23);
        }
      }

      int v8 = 0LL;
      v9[1] = v7;
      int v7 = 0LL;
    }

    else
    {
      *a3 = 7;
    }

void *ucnvsel_selectForUTF8(_DWORD *a1, char *a2, int a3, int *a4)
{
  if (*a4 > 0) {
    return 0LL;
  }
  if (!a1 || (v6 = a3, (int v7 = a2) == 0LL) && a3)
  {
    int v8 = 1;
LABEL_6:
    *a4 = v8;
    return 0LL;
  }

  int v10 = a1[8];
  int v11 = v10 + 31;
  if (v10 < -31) {
    int v11 = v10 + 62;
  }
  uint64_t v12 = (v11 >> 5);
  unsigned __int16 v13 = (__int32 *)uprv_malloc(4 * (int)v12);
  if (!v13)
  {
    int v8 = 7;
    goto LABEL_6;
  }

  uint64_t v14 = v13;
  memset(v13, 255, 4 * (int)v12);
  if (v6 < 0) {
    int v6 = strlen(v7);
  }
  if (v7)
  {
    unint64_t v15 = (unint64_t)&v7[v6];
    while (1)
    {
      __int32 v17 = v7 + 1;
      int v16 = *v7;
      uint64_t v18 = *v7;
      if ((v16 & 0x80000000) == 0)
      {
        uint64_t v19 = (unsigned __int16 *)(*(void *)(*(void *)a1 + 8LL) + 2 * v18);
        ++v7;
        goto LABEL_30;
      }

      UChar32 v20 = *v7;
      if ((v18 & 0xF0) == 0xE0)
      {
        if ((unint64_t)(v7 + 2) < v15 && ((a00000000000000[v18 & 0xF] >> (*v17 >> 5)) & 1) != 0)
        {
          unsigned int v21 = v7[2] ^ 0x80;
          if (v21 <= 0x3F)
          {
            v7 += 3;
            uint64_t v19 = (unsigned __int16 *)(**(void **)a1
                                     + 2LL
                                     * ((v21 & 0x1F)
                                      + 4
                                      * *(unsigned __int16 *)(**(void **)a1
                                                            + 2LL
                                                            * (((2 * (*v17 & 0x3F)) | (v20 << 7)) + (v21 >> 5) - 28672))));
            goto LABEL_30;
          }
        }
      }

      else if ((v16 + 62) <= 0x1Du && (unint64_t)v17 < v15)
      {
        uint64_t v23 = *v17 ^ 0x80LL;
        if (v23 <= 0x3F)
        {
          v7 += 2;
          uint64_t v19 = (unsigned __int16 *)(**(void **)a1
                                   + 2 * (*(unsigned __int16 *)(**(void **)a1 + 2 * v18 + 3776) + v23));
          goto LABEL_30;
        }
      }

      int Index = utrie2_internalU8NextIndex(*(uint64_t **)a1, v20, (uint8_t *)v7 + 1, v15);
      int v7 = &v17[Index & 7];
      uint64_t v19 = (unsigned __int16 *)(**(void **)a1 + 2LL * (Index >> 3));
LABEL_30:
      if (v10 >= 1)
      {
        int v25 = 0;
        uint64_t v26 = (int *)(*((void *)a1 + 1) + 4LL * *v19);
        uint64_t v27 = v14;
        uint64_t v28 = v12;
        do
        {
          int v29 = *v26++;
          int v30 = *v27 & v29;
          *v27++ = v30;
          v25 |= v30;
          --v28;
        }

        while (v28);
        if (v25) {
          continue;
        }
      }

      return sub_18084051C((uint64_t)a1, v14, a4);
    }
  }

  return sub_18084051C((uint64_t)a1, v14, a4);
}

void sub_1808408EC(void ***a1)
{
}

uint64_t sub_180840920(uint64_t a1, int *a2)
{
  if (*a2 <= 0) {
    return *(__int16 *)(*(void *)(a1 + 8) + 8LL);
  }
  else {
    return 0LL;
  }
}

const char *sub_180840940(uint64_t a1, _DWORD *a2, int *a3)
{
  if (*a3 > 0) {
    return 0LL;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(__int16 *)(v3 + 10);
  *(_WORD *)(v3 + 10) = v4 + 1;
  if (a2) {
    *a2 = strlen(v5);
  }
  return v5;
}

uint64_t sub_1808409B8(uint64_t result, int *a2)
{
  if (*a2 <= 0) {
    *(_WORD *)(*(void *)(result + 8) + 10LL) = 0;
  }
  return result;
}

BOOL ucol_looksLikeCollationBinary( unsigned __int8 *a1, unsigned __int16 *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL result = 0LL;
  if (a1 && a2 && a3 >= -1)
  {
    int v12 = 0;
    udata_swapDataHeader((uint64_t)a1, a2, 0xFFFFFFFFLL, 0LL, &v12, a6, a7, a8);
    if (v12 <= 0
      && *((_BYTE *)a2 + 12) == 85
      && *((_BYTE *)a2 + 13) == 67
      && *((_BYTE *)a2 + 14) == 111
      && *((_BYTE *)a2 + 15) == 108)
    {
      return 1LL;
    }

    if (a3 < 0)
    {
      udata_readInt32((uint64_t)a1, *(unsigned int *)a2);
    }

    else if (a3 < 0xA8 || (int)udata_readInt32((uint64_t)a1, *(unsigned int *)a2) > a3)
    {
      return 0LL;
    }

    if ((*((unsigned int (**)(void))a1 + 2))(*((unsigned int *)a2 + 4)) == 537069080
      && *((_BYTE *)a2 + 80) == 3
      && *((unsigned __int8 *)a2 + 65) == *a1)
    {
      return *((unsigned __int8 *)a2 + 66) == a1[1];
    }

    return 0LL;
  }

  return result;
}

uint64_t ucol_swap( unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*a5 > 0) {
    return 0LL;
  }
  int v14 = udata_swapDataHeader((uint64_t)a1, (unsigned __int16 *)a2, a3, a4, a5, a6, a7, a8);
  if (*a5 < 1)
  {
    uint64_t v21 = *(unsigned __int8 *)(a2 + 12);
    if (__PAIR64__(*(unsigned __int8 *)(a2 + 13), v21) == 0x4300000055LL
      && *(_BYTE *)(a2 + 14) == 111
      && *(_BYTE *)(a2 + 15) == 108
      && (unsigned int v22 = *(unsigned __int8 *)(a2 + 16), v22 - 3 < 3))
    {
      int v23 = v14;
      unsigned int v24 = (unsigned int *)(a2 + v14);
      else {
        int v25 = 0;
      }
      uint64_t v26 = (a3 - v25);
      if (a4) {
        uint64_t v27 = (unsigned int *)((char *)a4 + v14);
      }
      else {
        uint64_t v27 = 0LL;
      }
      if (v22 < 4) {
        int v28 = sub_180840C64(a1, v24, v26, (uint64_t)v27, a5, v18, v19, v20);
      }
      else {
        int v28 = sub_1808410E4((uint64_t)a1, v24, v26, v27, a5, v18, v19, v20);
      }
      if (*a5 <= 0) {
        return (v28 + v23);
      }
      else {
        return 0LL;
      }
    }

    else
    {
      udata_printError( (uint64_t)a1,  (uint64_t)"ucol_swap(): data format %02x.%02x.%02x.%02x (format version %02x.%02x) is not recognized as collation data\n",  v15,  v16,  v17,  v18,  v19,  v20,  v21);
      uint64_t result = 0LL;
      *a5 = 16;
    }
  }

  else
  {
    *a5 = 0;
    return sub_180840C64(a1, (unsigned int *)a2, a3, (uint64_t)a4, a5, v18, v19, v20);
  }

  return result;
}

uint64_t sub_180840C64( unsigned __int8 *a1, unsigned int *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*a5 > 0) {
    return 0LL;
  }
  if (!a1 || !a2 || (int)a3 < -1 || (int)a3 >= 1 && !a4)
  {
    uint64_t Int32 = 0LL;
    int v14 = 1;
LABEL_9:
    *a5 = v14;
    return Int32;
  }

  if ((a3 & 0x80000000) != 0)
  {
    uint64_t Int32 = udata_readInt32((uint64_t)a1, *a2);
  }

  else if (a3 < 0xA8 || (uint64_t Int32 = udata_readInt32((uint64_t)a1, *a2), (int)Int32 > (int)a3))
  {
    udata_printError( (uint64_t)a1,  (uint64_t)"ucol_swap(formatVersion=3): too few bytes (%d after header) for collation data\n",  a3,  a4,  (uint64_t)a5,  a6,  a7,  a8,  a3);
    uint64_t Int32 = 0LL;
    int v14 = 8;
    goto LABEL_9;
  }

  uint64_t v16 = (*((uint64_t (**)(void))a1 + 2))(a2[4]);
  if ((_DWORD)v16 != 537069080 || *((_BYTE *)a2 + 80) != 3)
  {
    udata_printError( (uint64_t)a1,  (uint64_t)"ucol_swap(formatVersion=3): magic 0x%08x or format version %02x.%02x is not a collation binary\n",  v17,  v18,  v19,  v20,  v21,  v22,  v16);
    uint64_t Int32 = 0LL;
    int v14 = 16;
    goto LABEL_9;
  }

  int v23 = *((unsigned __int8 *)a2 + 65);
  if (v23 != *a1 || *((unsigned __int8 *)a2 + 66) != a1[1])
  {
    udata_printError( (uint64_t)a1,  (uint64_t)"ucol_swap(formatVersion=3): endianness %d or charset %d does not match the swapper\n",  v17,  v18,  v19,  v20,  v21,  v22,  (char)v23);
    uint64_t Int32 = 0LL;
    int v14 = 3;
    goto LABEL_9;
  }

  if ((a3 & 0x80000000) == 0)
  {
    unsigned int v24 = (*((uint64_t (**)(void))a1 + 2))(a2[1]);
    unsigned int v41 = (*((uint64_t (**)(void))a1 + 2))(a2[2]);
    unsigned int v42 = (*((uint64_t (**)(void))a1 + 2))(a2[3]);
    unsigned int v25 = (*((uint64_t (**)(void))a1 + 2))(a2[5]);
    unsigned int v26 = (*((uint64_t (**)(void))a1 + 2))(a2[6]);
    unsigned int v43 = (*((uint64_t (**)(void))a1 + 2))(a2[7]);
    unsigned int v35 = (*((uint64_t (**)(void))a1 + 2))(a2[8]);
    int v27 = (*((uint64_t (**)(void))a1 + 2))(a2[9]);
    unsigned int v37 = (*((uint64_t (**)(void))a1 + 2))(a2[10]);
    (*((void (**)(void))a1 + 2))(a2[11]);
    int v36 = udata_readInt32((uint64_t)a1, a2[12]);
    int v38 = udata_readInt32((uint64_t)a1, a2[15]);
    unsigned int v39 = (*((uint64_t (**)(void))a1 + 2))(a2[21]);
    unsigned int v40 = (*((uint64_t (**)(void))a1 + 2))(a2[22]);
    (*((void (**)(unsigned __int8 *, unsigned int *, uint64_t, uint64_t, int *))a1 + 7))(a1, a2, 64LL, a4, a5);
    (*((void (**)(unsigned __int8 *, unsigned int *, uint64_t, uint64_t, int *))a1 + 7))( a1,  a2 + 21,  8LL,  a4 + 84,  a5);
    *(_WORD *)(a4 + 65) = *((_WORD *)a1 + 1);
    if (v24) {
      (*((void (**)(unsigned __int8 *, char *, void, uint64_t, int *))a1 + 7))( a1,  (char *)a2 + v24,  v26 - v24,  a4 + v24,  a5);
    }
    if (v25 && v26)
    {
      unsigned int v28 = v43;
      if (!v43) {
        unsigned int v28 = v25;
      }
      (*((void (**)(unsigned __int8 *, char *, void, uint64_t, int *))a1 + 7))( a1,  (char *)a2 + v26,  v28 - v26,  a4 + v26,  a5);
    }

    if (v27)
    {
      (*((void (**)(unsigned __int8 *, char *, void, uint64_t, int *))a1 + 6))( a1,  (char *)a2 + v43,  (2 * v27),  a4 + v43,  a5);
      (*((void (**)(unsigned __int8 *, char *, void, uint64_t, int *))a1 + 7))( a1,  (char *)a2 + v35,  (4 * v27),  a4 + v35,  a5);
    }

    if (v25) {
      utrie_swap((uint64_t)a1, (unsigned int *)((char *)a2 + v25), v37 - v25, a4 + v25, a5);
    }
    if (v36) {
      (*((void (**)(unsigned __int8 *, char *, void, uint64_t, int *))a1 + 7))( a1,  (char *)a2 + v37,  (4 * v36),  a4 + v37,  a5);
    }
    if (v41) {
      (*((void (**)(unsigned __int8 *, char *, void, uint64_t, int *))a1 + 7))( a1,  (char *)a2 + v41,  v42 - v41,  a4 + v41,  a5);
    }
    if (v38) {
      (*((void (**)(unsigned __int8 *, char *, void, uint64_t, int *))a1 + 6))( a1,  (char *)a2 + v42,  2 * v38 * *((unsigned __int8 *)a2 + 67),  a4 + v42,  a5);
    }
    if (v39)
    {
      int v29 = (unsigned __int16 *)((char *)a2 + v39);
      int v30 = (*((uint64_t (**)(void))a1 + 1))(*v29);
      int v31 = (*((uint64_t (**)(void))a1 + 1))(v29[1]);
      (*((void (**)(unsigned __int8 *, unsigned __int16 *, void, uint64_t, int *))a1 + 6))( a1,  v29,  (4 * v30 + 2 * v31 + 4),  a4 + v39,  a5);
    }

    if (v40)
    {
      uint64_t v32 = (unsigned __int16 *)((char *)a2 + v40);
      int v33 = (*((uint64_t (**)(void))a1 + 1))(*v32);
      int v34 = (*((uint64_t (**)(void))a1 + 1))(v32[1]);
      (*((void (**)(unsigned __int8 *, unsigned __int16 *, void, uint64_t, int *))a1 + 6))( a1,  v32,  (2 * (v34 + v33) + 4),  a4 + v40,  a5);
    }
  }

  return Int32;
}

uint64_t sub_1808410E4( uint64_t a1, unsigned int *a2, uint64_t a3, unsigned int *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  if (*a5 > 0) {
    return 0LL;
  }
  memset(v44, 0, sizeof(v44));
  __int128 v43 = 0u;
  __int128 v42 = 0u;
  __int128 v41 = 0u;
  int Int32 = udata_readInt32(a1, *a2);
  int v15 = Int32;
  int v40 = Int32;
  uint64_t v16 = (4 * Int32);
  unint64_t v17 = (Int32 - 2);
  if (Int32 < 2) {
    goto LABEL_12;
  }
  uint64_t v18 = &v41;
  uint64_t v19 = a2 + 1;
  if (v17 >= 0x12) {
    unint64_t v17 = 18LL;
  }
  unint64_t v20 = v17 + 1;
  do
  {
    unsigned int v21 = *v19++;
    *(_DWORD *)uint64_t v18 = udata_readInt32(a1, v21);
    uint64_t v18 = (__int128 *)((char *)v18 + 4);
    --v20;
  }

  while (v20);
  if (v15 >= 20)
  {
    uint64_t v22 = 19LL;
  }

  else
  {
LABEL_12:
    memset(&v40 + v15, 255, 4LL * (19 - v15) + 4);
    uint64_t v8 = v16;
    if (v15 < 6) {
      goto LABEL_16;
    }
    uint64_t v22 = (v15 - 1);
  }

  uint64_t v8 = *(&v40 + v22);
LABEL_16:
  if ((a3 & 0x80000000) != 0) {
    return v8;
  }
  if ((int)v8 > (int)a3)
  {
LABEL_18:
    udata_printError( a1,  (uint64_t)"ucol_swap(formatVersion=4): too few bytes (%d after header) for collation data\n",  a3,  (uint64_t)a4,  (uint64_t)a5,  a6,  a7,  a8,  a3);
    int v23 = 8;
LABEL_19:
    uint64_t v8 = 0LL;
    *a5 = v23;
    return v8;
  }

  if (a2 != a4) {
    memcpy(a4, a2, (int)v8);
  }
  (*(void (**)(uint64_t, unsigned int *, uint64_t, unsigned int *, int *))(a1 + 56))(a1, a2, v16, a4, a5);
  int v30 = HIDWORD(v42);
  uint64_t v31 = (HIDWORD(v42) - DWORD2(v42));
  if ((int)v43 - v30 >= 1)
  {
    udata_printError( a1,  (uint64_t)"ucol_swap(formatVersion=4): unknown data at IX_RESERVED8_OFFSET\n",  v31,  v25,  v26,  v27,  v28,  v29,  (v43 - v30));
LABEL_47:
    int v23 = 16;
    goto LABEL_19;
  }

  int v32 = DWORD1(v43);
  uint64_t v33 = (DWORD1(v43) - v43);
  if (DWORD2(v43) - v32 >= 1)
  {
    udata_printError( a1,  (uint64_t)"ucol_swap(formatVersion=4): unknown data at IX_RESERVED10_OFFSET\n",  v33,  v25,  v26,  v27,  v28,  v29,  (DWORD2(v43) - v32));
    goto LABEL_47;
  }

  uint64_t v34 = SHIDWORD(v43);
  if (HIDWORD(v43) - DWORD2(v43) >= 1) {
    (*(void (**)(uint64_t, char *))(a1 + 56))(a1, (char *)a2 + SDWORD2(v43));
  }
  uint64_t v35 = v44[0];
  uint64_t v36 = v44[1];
  uint64_t v37 = v44[2];
  uint64_t v38 = v44[3];
  uint64_t v39 = (v44[4] - v38);
  if (v44[6] - v44[5] >= 1)
  {
    udata_printError( a1,  (uint64_t)"ucol_swap(formatVersion=4): unknown data at IX_RESERVED18_OFFSET\n",  v39,  v25,  v26,  v27,  v28,  v29,  (v44[6] - v44[5]));
    goto LABEL_47;
  }

  return v8;
}

uint64_t ucol_swapInverseUCA( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13 = udata_swapDataHeader(a1, (unsigned __int16 *)a2, a3, a4, a5, a6, a7, a8);
  if (!a5 || *a5 > 0) {
    return 0LL;
  }
  uint64_t v21 = *(unsigned __int8 *)(a2 + 12);
  if (__PAIR64__(*(unsigned __int8 *)(a2 + 13), v21) != 0x6E00000049LL
    || *(_BYTE *)(a2 + 14) != 118
    || *(_BYTE *)(a2 + 15) != 67
    || *(_BYTE *)(a2 + 16) != 2
    || !*(_BYTE *)(a2 + 17))
  {
    udata_printError( a1,  (uint64_t)"ucol_swapInverseUCA(): data format %02x.%02x.%02x.%02x (format version %02x.%02x) is not an inverse UCA collation file\n",  v14,  v15,  v16,  v17,  v18,  v19,  v21);
    uint64_t result = 0LL;
    int v26 = 16;
    goto LABEL_14;
  }

  int v22 = v13;
  int v23 = (unsigned int *)(a2 + v13);
  if ((a3 & 0x80000000) != 0)
  {
    int Int32 = udata_readInt32(a1, *v23);
  }

  else
  {
    unsigned int v24 = a3 - v13;
    if ((int)a3 - v13 < 32 || (unsigned int v25 = udata_readInt32(a1, *v23), v24 < v25))
    {
      udata_printError( a1,  (uint64_t)"ucol_swapInverseUCA(): too few bytes (%d after header) for inverse UCA collation data\n",  v14,  v15,  v16,  v17,  v18,  v19,  a3);
      uint64_t result = 0LL;
      int v26 = 8;
LABEL_14:
      *a5 = v26;
      return result;
    }

    int Int32 = v25;
    uint64_t v28 = (char *)a4 + v22;
    int v29 = (*(uint64_t (**)(void))(a1 + 16))(v23[1]);
    int v30 = (*(uint64_t (**)(void))(a1 + 16))(v23[2]);
    unsigned int v31 = (*(uint64_t (**)(void))(a1 + 16))(v23[3]);
    unsigned int v32 = (*(uint64_t (**)(void))(a1 + 16))(v23[4]);
    (*(void (**)(uint64_t, unsigned int *, uint64_t, char *, int *))(a1 + 56))(a1, v23, 20LL, v28, a5);
    (*(void (**)(uint64_t, char *, void, char *, int *))(a1 + 56))( a1,  (char *)v23 + v31,  (12 * v29),  &v28[v31],  a5);
    (*(void (**)(uint64_t, char *, void, char *, int *))(a1 + 48))( a1,  (char *)v23 + v32,  (2 * v30),  &v28[v32],  a5);
  }

  return (Int32 + v22);
}

_DWORD *ucptrie_openFromBinary(int a1, int a2, uint64_t a3, int a4, int *a5, int *a6)
{
  if (*a6 > 0) {
    return 0LL;
  }
  if (a4 < 1 || (a2 - 3) < 0xFFFFFFFC || (a1 - 2) < 0xFFFFFFFD || (a3 & 3) != 0)
  {
    uint64_t result = 0LL;
    int v19 = 1;
LABEL_31:
    *a6 = v19;
    return result;
  }

  if (*(_DWORD *)a3 != 1416784179) {
    goto LABEL_30;
  }
  unsigned int v9 = *(unsigned __int16 *)(a3 + 4);
  if ((v9 & 0x38) != 0) {
    goto LABEL_30;
  }
  unsigned int v10 = v9 & 7;
  if (v10 > 2) {
    goto LABEL_30;
  }
  unsigned int v11 = v9 >> 6;
  if (v11 >= 2) {
    goto LABEL_30;
  }
  BOOL v12 = a1 < 0 || v11 == a1;
  BOOL v13 = v12;
  BOOL v14 = v10 == a2 || a2 <= -1;
  if (!v14 || !v13) {
    goto LABEL_30;
  }
  unsigned int v16 = *(unsigned __int16 *)(a3 + 6);
  unsigned int v17 = *(unsigned __int16 *)(a3 + 8) | ((unsigned __int16)v9 >> 12 << 16);
  if (v10 == 1)
  {
    int v18 = 4 * v17;
  }

  else
  {
    int v18 = *(unsigned __int16 *)(a3 + 8) | ((unsigned __int16)v9 >> 12 << 16);
    if ((v9 & 7) == 0) {
      int v18 = 2 * v17;
    }
  }

  if (2 * v16 + 16 + v18 > a4)
  {
LABEL_30:
    uint64_t result = 0LL;
    int v19 = 3;
    goto LABEL_31;
  }

  int v26 = 2 * v16 + 16 + v18;
  int v20 = *(unsigned __int16 *)(a3 + 12);
  int v21 = *(unsigned __int16 *)(a3 + 14);
  __int16 v27 = *(_WORD *)(a3 + 10);
  uint64_t result = uprv_malloc(0x30uLL);
  if (!result)
  {
    int v19 = 7;
    goto LABEL_31;
  }

  result[5] = v17;
  result[6] = v21 << 9;
  result[4] = v16;
  *((_WORD *)result + 14) = ((v21 << 9) + 4095) >> 12;
  unsigned int v22 = v20 & 0xFFF0FFFF | (((v9 >> 8) & 0xF) << 16);
  *((_BYTE *)result + 30) = v11;
  *((_BYTE *)result + 3icu::UVector32::~UVector32(this + 1) = v10;
  result[8] = 0;
  *((_WORD *)result + 18) = 0;
  *((_WORD *)result + 19) = v27;
  *((void *)result + 5) = v22;
  uint64_t v23 = a3 + 16 + 2LL * v16;
  signed int v24 = v17 - 2;
  if (v22 < v17) {
    signed int v24 = v22;
  }
  *(void *)uint64_t result = a3 + 16;
  *((void *)result + icu::UVector32::~UVector32(this + 1) = 0LL;
  if (v10 == 2)
  {
    *((void *)result + icu::UVector32::~UVector32(this + 1) = v23;
    int v25 = *(unsigned __int8 *)(v23 + v24);
  }

  else if (v10 == 1)
  {
    *((void *)result + icu::UVector32::~UVector32(this + 1) = v23;
    int v25 = *(_DWORD *)(v23 + 4LL * v24);
  }

  else
  {
    if ((v9 & 7) != 0) {
      goto LABEL_30;
    }
    *((void *)result + icu::UVector32::~UVector32(this + 1) = v23;
    int v25 = *(unsigned __int16 *)(v23 + 2LL * v24);
  }

  result[11] = v25;
  if (a5) {
    *a5 = v26;
  }
  return result;
}

uint64_t ucptrie_getType(uint64_t a1)
{
  return *(char *)(a1 + 30);
}

uint64_t ucptrie_getValueWidth(uint64_t a1)
{
  return *(char *)(a1 + 31);
}

uint64_t ucptrie_internalSmallIndex(uint64_t *a1, unsigned int a2)
{
  if (*((_BYTE *)a1 + 30)) {
    int v2 = 64;
  }
  else {
    int v2 = 1020;
  }
  int v3 = v2 + ((int)a2 >> 14);
  uint64_t v4 = *a1;
  int v5 = *(__int16 *)(*a1 + 2LL * (((a2 >> 9) & 0x1F) + *(unsigned __int16 *)(*a1 + 2LL * v3)));
  int v6 = *(unsigned __int16 *)(*a1 + 2LL * (((a2 >> 9) & 0x1F) + *(unsigned __int16 *)(*a1 + 2LL * v3)));
  unsigned int v7 = (a2 >> 4) & 0x1F;
  if (v5 < 0)
  {
    unsigned int v9 = ((a2 >> 4) & 0x18 | (v7 >> 3)) + (v6 & 0x7FFF);
    int v8 = (*(unsigned __int16 *)(v4 + 2LL * v9) << (2 * ((a2 >> 4) & 7) + 2)) & 0x30000 | *(unsigned __int16 *)(v4 + 2LL * (((a2 >> 4) & 7) + v9 + 1));
  }

  else
  {
    int v8 = *(unsigned __int16 *)(v4 + 2LL * (v7 + v6));
  }

  return v8 + (a2 & 0xF);
}

uint64_t ucptrie_internalSmallU8Index(uint64_t a1, int a2, int a3, int a4)
{
  signed int v4 = (a3 << 6) | (a2 << 12) | a4;
  if (v4 >= *(_DWORD *)(a1 + 24)) {
    return (*(_DWORD *)(a1 + 20) - 2);
  }
  else {
    return ucptrie_internalSmallIndex((uint64_t *)a1, v4);
  }
}

uint64_t ucptrie_internalU8PrevIndex(uint64_t a1, UChar32 c, const uint8_t *a3, uint64_t a4)
{
  else {
    int32_t v5 = a4 - (_DWORD)a3;
  }
  else {
    int v6 = a3;
  }
  pint i = v5;
  unsigned int v7 = utf8_prevCharSafeBody(v6, 0, &pi, c, -1);
  int32_t v8 = v5 - pi;
  pint i = v8;
  if (HIWORD(v7))
  {
    if (HIWORD(v7) > 0x10u)
    {
      int v9 = *(_DWORD *)(a1 + 20) - 1;
    }

    else if ((signed int)v7 >= *(_DWORD *)(a1 + 24))
    {
      int v9 = *(_DWORD *)(a1 + 20) - 2;
    }

    else
    {
      int v9 = ucptrie_internalSmallIndex((uint64_t *)a1, v7);
    }
  }

  else
  {
    int v9 = (v7 & 0x3F) + *(unsigned __int16 *)(*(void *)a1 + 2LL * (v7 >> 6));
  }

  return v8 | (8 * v9);
}

uint64_t ucptrie_get(uint64_t a1, unsigned int a2)
{
  if (a2 >= 0x80)
  {
    if (*(_BYTE *)(a1 + 30)) {
      unsigned int v3 = 4095;
    }
    else {
      unsigned int v3 = 0xFFFF;
    }
    if (v3 >= a2)
    {
      a2 = (a2 & 0x3F) + *(unsigned __int16 *)(*(void *)a1 + 2LL * (a2 >> 6));
    }

    else if (HIWORD(a2) > 0x10u)
    {
      a2 = *(_DWORD *)(a1 + 20) - 1;
    }

    else if (*(_DWORD *)(a1 + 24) <= (signed int)a2)
    {
      a2 = *(_DWORD *)(a1 + 20) - 2;
    }

    else
    {
      a2 = ucptrie_internalSmallIndex((uint64_t *)a1, a2);
    }
  }

  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = *(char *)(a1 + 31);
  if (v5 == 2) {
    return *(unsigned __int8 *)(v4 + (int)a2);
  }
  if (v5 == 1) {
    return *(unsigned int *)(v4 + 4LL * (int)a2);
  }
  if (*(_BYTE *)(a1 + 31)) {
    return 0xFFFFFFFFLL;
  }
  return *(unsigned __int16 *)(v4 + 2LL * (int)a2);
}

uint64_t sub_180841AE8( uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t, int *), uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, int *a8)
{
  int v10 = a3;
  if (!a4) {
    return a1(a2, a3, a6, a7, a8);
  }
  int v20 = 0;
  if (a8) {
    BOOL v13 = a8;
  }
  else {
    BOOL v13 = &v20;
  }
  if (a4 == 2) {
    uint64_t v14 = 57343LL;
  }
  else {
    uint64_t v14 = 56319LL;
  }
  uint64_t result = a1(a2, a3, a6, a7, v13);
  if ((int)v14 >= v10 && (int)result >= 55295)
  {
    if (*v13 == a5)
    {
      unsigned int v16 = a1;
      goto LABEL_17;
    }

    unsigned int v16 = a1;
    if (v10 < 55296) {
      return 55295LL;
    }
    *BOOL v13 = a5;
    BOOL v17 = result > v14;
    uint64_t result = v14;
    if (!v17)
    {
LABEL_17:
      int v19 = 0;
      LODWORD(result) = v16(a2, (v14 + 1), a6, a7, &v19);
      if (v19 == a5) {
        return result;
      }
      else {
        return v14;
      }
    }
  }

  return result;
}

uint64_t ucptrie_getRange(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, int *a7)
{
  return sub_180841AE8( (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, int *))sub_180841C50,  a1,  a2,  a3,  a4,  a5,  a6,  a7);
}

uint64_t sub_180841C50( uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, _DWORD *a5)
{
  if (WORD1(a2) > 0x10u) {
    return 0xFFFFFFFFLL;
  }
  int v6 = a5;
  uint64_t v7 = a4;
  uint64_t v8 = a2;
  uint64_t v5 = 1114111LL;
  int v10 = *((char *)a1 + 31);
  if (*((_DWORD *)a1 + 6) <= (int)a2)
  {
    if (a5)
    {
      uint64_t v48 = *((int *)a1 + 5) - 2LL;
      uint64_t v49 = a1[1];
      if (v10 == 2)
      {
        uint64_t v50 = *(unsigned __int8 *)(v49 + v48);
      }

      else if (v10 == 1)
      {
        uint64_t v50 = *(unsigned int *)(v49 + 4LL * (int)v48);
      }

      else if (*((_BYTE *)a1 + 31))
      {
        uint64_t v50 = 0xFFFFFFFFLL;
      }

      else
      {
        uint64_t v50 = *(unsigned __int16 *)(v49 + 2 * v48);
      }

      if (a3) {
        LODWORD(v50) = a3(a4, v50);
      }
      *int v6 = v50;
    }

    return v5;
  }

  uint64_t v11 = *((unsigned int *)a1 + 11);
  uint64_t v66 = a3;
  if (a3)
  {
    uint64_t v12 = a3(a4, v11);
    a3 = v66;
    uint64_t v11 = v12;
  }

  uint64_t v13 = 0LL;
  char v14 = 0;
  uint64_t v15 = *a1;
  uint64_t v16 = 0xFFFFFFFFLL;
  int v17 = -1;
  uint64_t v5 = v8;
  uint64_t v18 = v11;
  unsigned int v65 = v11;
  int v59 = v8;
  uint64_t v57 = v6;
  uint64_t v58 = *a1;
  while ((int)v5 >= 0x10000 || (int)v5 >= 4096 && *((_BYTE *)a1 + 30))
  {
    if (*((_BYTE *)a1 + 30)) {
      int v19 = 64;
    }
    else {
      int v19 = 1020;
    }
    uint64_t v20 = *(unsigned __int16 *)(*a1
                              + 2LL
    if ((_DWORD)v16 == (_DWORD)v20 && (int)v5 - (int)v8 >= 512)
    {
      uint64_t v5 = (v5 + 512);
      uint64_t v20 = v16;
    }

    else
    {
      if ((_DWORD)v20 != *((unsigned __int16 *)a1 + 19))
      {
        signed int v21 = (v5 >> 4) & 0x1F;
        int v22 = 16;
        unsigned int v56 = v20;
        uint64_t v23 = 32LL;
        goto LABEL_24;
      }

      if ((v14 & 1) != 0)
      {
        if ((_DWORD)v11 != (_DWORD)v18) {
          return (v5 - 1);
        }
      }

      else
      {
        uint64_t v13 = *((unsigned int *)a1 + 11);
        if (v6) {
          *int v6 = v11;
        }
      }

      int v17 = *((_DWORD *)a1 + 10);
      uint64_t v5 = (v5 & 0xFFFFFE00) + 512;
      char v14 = 1;
      uint64_t v18 = v11;
    }

uint64_t ucptrie_toBinary(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  if (*a4 > 0) {
    return 0LL;
  }
  if (a3 < 0
    || (unsigned int v6 = *(unsigned __int8 *)(a1 + 30), v6 > 1)
    || (int v7 = *(char *)(a1 + 31), v7 < 0)
    || v7 > 2
    || a3 && (!a2 || (a2 & 3) != 0))
  {
    uint64_t v4 = 0LL;
    int v9 = 1;
  }

  else
  {
    uint64_t v8 = *(int *)(a1 + 16);
    uint64_t v4 = (2 * v8 + 16);
    if (v7 == 2)
    {
      uint64_t v4 = (*(_DWORD *)(a1 + 20) + v4);
    }

    else if (v7 == 1)
    {
      uint64_t v4 = (v4 + 4 * *(_DWORD *)(a1 + 20));
    }

    else if (!*(_BYTE *)(a1 + 31))
    {
      uint64_t v4 = (2 * (*(_DWORD *)(a1 + 20) + v8) + 16);
    }

    if ((int)v4 <= a3)
    {
      *(_DWORD *)a2 = 1416784179;
      unsigned int v11 = *(_DWORD *)(a1 + 20);
      unsigned int v12 = *(_DWORD *)(a1 + 24);
      unsigned int v13 = *(_DWORD *)(a1 + 40);
      *(_WORD *)(a2 + 4) = (v11 >> 4) & 0xF000 | ((_WORD)v6 << 6) | (v13 >> 8) & 0xF00 | v7;
      *(_WORD *)(a2 + 6) = v8;
      *(_WORD *)(a2 + 8) = v11;
      *(_WORD *)(a2 + 10) = *(_WORD *)(a1 + 38);
      *(_WORD *)(a2 + 12) = v13;
      *(_WORD *)(a2 + 14) = v12 >> 9;
      uint64_t v14 = a2 + 16;
      memcpy((void *)(a2 + 16), *(const void **)a1, 2 * v8);
      if (v7 == 2)
      {
        uint64_t v15 = *(const void **)(a1 + 8);
        size_t v16 = *(int *)(a1 + 20);
      }

      else if (v7 == 1)
      {
        uint64_t v15 = *(const void **)(a1 + 8);
        size_t v16 = 4LL * *(int *)(a1 + 20);
      }

      else
      {
        if (v7) {
          return v4;
        }
        uint64_t v15 = *(const void **)(a1 + 8);
        size_t v16 = 2LL * *(int *)(a1 + 20);
      }

      memcpy((void *)(v14 + 2LL * *(int *)(a1 + 16)), v15, v16);
      return v4;
    }

    int v9 = 15;
  }

  *a4 = v9;
  return v4;
}

UChar32 ucpmap_getRange( const UCPMap *map, UChar32 start, UCPMapRangeOption option, uint32_t surrogateValue, UCPMapValueFilter *filter, const void *context, uint32_t *pValue)
{
  return sub_180841AE8( (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, int *))sub_180841C50,  (uint64_t)map,  *(uint64_t *)&start,  option,  surrogateValue,  (uint64_t)filter,  (uint64_t)context,  (int *)pValue);
}

uint64_t sub_180842318(uint64_t a1)
{
  uint64_t v2 = uhash_get(**(void **)a1, *(void *)(a1 + 16));
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    unsigned int v5 = *(unsigned __int16 *)(v2 + 8);
    if ((v5 & 1) != 0)
    {
      if ((*(_WORD *)(v4 + 8) & 1) != 0) {
        return 0LL;
      }
    }

    else
    {
      if ((v5 & 0x8000) != 0) {
        int v6 = *(_DWORD *)(v2 + 12);
      }
      else {
        int v6 = v5 >> 5;
      }
      unsigned int v7 = *(unsigned __int16 *)(v4 + 8);
      if ((v7 & 0x8000u) == 0) {
        unsigned int v8 = v7 >> 5;
      }
      else {
        unsigned int v8 = *(_DWORD *)(v4 + 12);
      }
      if ((v7 & 1) == 0
        && v6 == v8
        && icu::UnicodeString::doEquals((icu::UnicodeString *)v2, (const icu::UnicodeString *)v4, v6))
      {
        return 0LL;
      }
    }

    *(void *)(a1 + 16) = v3;
  }

  return v3;
}

uint64_t ucurr_forLocale(char *a1, UChar *a2, uint64_t a3, int *a4)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  if (*a4 > 0) {
    return 0LL;
  }
  if ((a3 & 0x80000000) != 0 || !a2 && (_DWORD)a3)
  {
    uint64_t v4 = 0LL;
    *a4 = 1;
    return v4;
  }

  int v29 = 0;
  uint64_t v41 = 0LL;
  memset(&v40[1], 0, 48);
  v40[0] = (char *)&v40[1] + 5;
  LODWORD(v40[1]) = 40;
  memset(__s, 0, sizeof(__s));
  icu::CharStringByteSink::CharStringByteSink(__s, (uint64_t)v40);
  ulocimp_getKeywordValue(a1, "currency", (uint64_t)__s, &v29);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)__s);
  unsigned int v28 = v41;
  if (v29 > 0 || (_DWORD)v41 != 3 || !uprv_isInvariantString((unsigned __int8 *)v40[0], 3))
  {
    __int128 v38 = 0u;
    memset(v39, 0, sizeof(v39));
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    *(_OWORD *)__s = 0u;
    ulocimp_getRegionForSupplementalData(a1, 0, __s, 157, a4);
    uint64_t v4 = 0LL;
    if (*a4 > 0) {
      goto LABEL_50;
    }
    unsigned int v12 = strchr(__s, 95);
    if (v12) {
      *unsigned int v12 = 0;
    }
    if (!__s[0])
    {
      int v17 = 0LL;
      int v18 = 2;
      int v29 = 2;
      goto LABEL_39;
    }

    int v29 = 0;
    uint64_t v13 = ures_openDirect((uint64_t)"icudt74l-curr", (uint64_t)"supplementalData", (uint64_t)&v29);
    uint64_t v14 = ures_getByKey(v13, "CurrencyMap", v13, &v29);
    uint64_t v15 = ures_getByKey(v13, __s, v14, &v29);
    uint64_t v16 = v15;
    if (v29 > 0)
    {
      int v17 = 0LL;
      goto LABEL_38;
    }

    int Size = ures_getSize(v15);
    if (Size < 1)
    {
      int v17 = 0LL;
LABEL_35:
      if (v29 <= 0 && !v17) {
        int v29 = 2;
      }
LABEL_38:
      ures_close(v16);
      int v18 = v29;
      if (v29 < 1)
      {
        if (!v29)
        {
          int v25 = *a4;
          if (*a4) {
            goto LABEL_45;
          }
        }

        goto LABEL_44;
      }

const UChar *ucurr_getName(const UChar *a1, char *a2, unsigned int a3, _BYTE *a4, int *a5, int *a6)
{
  v46[8] = *(void **)MEMORY[0x1895F89C0];
  if (*a6 > 0) {
    return 0LL;
  }
  signed int v8 = a3;
  if (a3 >= 5)
  {
    int v6 = 0LL;
    *a6 = 1;
    return v6;
  }

  UErrorCode v42 = U_ZERO_ERROR;
  memset(&v46[1], 0, 56);
  v46[0] = (char *)&v46[1] + 5;
  LODWORD(v46[1]) = 40;
  v43[0] = 0LL;
  v43[1] = 0LL;
  icu::CharStringByteSink::CharStringByteSink(v43, (uint64_t)v46);
  ulocimp_getName(a2);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v43);
  *(_DWORD *)__s = 0;
  u_UCharsToChars(a1, __s, 3);
  __s[3] = 0;
  T_CString_toUpperCase((unsigned __int8 *)__s);
  UErrorCode v42 = U_ZERO_ERROR;
  BOOL v40 = 0;
  uint64_t v13 = ures_open("icudt74l-curr", (char *)v46[0], (int *)&v42);
  uint64_t v14 = ures_openWithCountryFallback("icudt74l-curr", (char *)v46[0], &v40, (int *)&v42);
  v44[0] = 0LL;
  v44[1] = 0LL;
  int v45 = 0;
  if (v40)
  {
    uscript_getCode((char *)v46[0], (int32_t *)v44, 5, (int *)&v42);
    if (v42 >= U_ILLEGAL_ARGUMENT_ERROR) {
      LODWORD(v44[0]) = 0;
    }
  }

  memset(&v43[1], 0, 56);
  v43[0] = (char *)&v43[1] + 5;
  LODWORD(v43[1]) = 40;
  switch(v8)
  {
    case 4:
      uint64_t v15 = "Currencies%variant";
      uint64_t v16 = v37;
      int v17 = (icu::StringPiece *)v37;
      break;
    case 3:
      uint64_t v15 = "Currencies%formal";
      uint64_t v16 = v38;
      int v17 = (icu::StringPiece *)v38;
      break;
    case 2:
      uint64_t v15 = "Currencies%narrow";
      uint64_t v16 = v39;
      int v17 = (icu::StringPiece *)v39;
      break;
    default:
      int v20 = 0;
      int v6 = 0LL;
      *a6 = 16;
      goto LABEL_33;
  }

  icu::StringPiece::StringPiece(v17, v15);
  icu::CharString::append((icu::CharString *)v43, *(const char **)v16, *((_DWORD *)v16 + 2), &v42);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v35, "/");
  icu::CharString::append((icu::CharString *)v43, v35, v36, &v42);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v33, __s);
  icu::CharString::append((icu::CharString *)v43, v33, v34, &v42);
  if (!v40)
  {
    UErrorCode v19 = v42;
    goto LABEL_21;
  }

  StringByKeyWithFallbacunint64_t k = ures_getStringByKeyWithFallback(v14, (char *)v43[0], a5, &v42);
  int v6 = StringByKeyWithFallback;
  UErrorCode v19 = v42;
  if (v42 <= U_ZERO_ERROR)
  {
    int v21 = *StringByKeyWithFallback;
    if ((v21 & 0xFC00) == 0xD800 && u_strlen(StringByKeyWithFallback) != 1)
    {
      int v22 = v6[1];
      if ((v22 & 0xFC00) == 0xDC00) {
        int v21 = v22 + (v21 << 10) - 56613888;
      }
    }

    int Script = uscript_getScript(v21, (int *)&v42);
    if (v42 > U_ZERO_ERROR) {
      goto LABEL_29;
    }
    int v31 = Script;
    int v32 = u_isalpha(v21);
    UErrorCode v19 = v42;
    if (v32)
    {
      if (v31 != 25 && v31 != LODWORD(v44[0])) {
        goto LABEL_21;
      }
    }
  }

  if (v19 == U_MISSING_RESOURCE_ERROR || !v6)
  {
LABEL_21:
    if (v19 < U_ILLEGAL_ARGUMENT_ERROR)
    {
LABEL_30:
      int v6 = ures_getStringByKeyWithFallback(v13, (char *)v43[0], a5, &v42);
      if (v42 == U_MISSING_RESOURCE_ERROR)
      {
        signed int v8 = 0;
        *a6 = -128;
        UErrorCode v42 = U_ZERO_ERROR;
      }

      goto LABEL_32;
    }

const UChar *ucurr_getPluralName(const UChar *a1, char *a2, _BYTE *a3, char *a4, int *a5, int *a6)
{
  v21[8] = *(void **)MEMORY[0x1895F89C0];
  if (*a6 > 0) {
    return 0LL;
  }
  int v20 = 0;
  memset(&v21[1], 0, 56);
  v21[0] = (char *)&v21[1] + 5;
  LODWORD(v21[1]) = 40;
  v19[0] = 0LL;
  v19[1] = 0LL;
  icu::CharStringByteSink::CharStringByteSink(v19, (uint64_t)v21);
  ulocimp_getName(a2);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v19);
  if (v20 >= 1)
  {
    int Name = 0LL;
    int v13 = 1;
LABEL_5:
    *a6 = v13;
    goto LABEL_6;
  }

  LODWORD(v19[0]) = 0;
  u_UCharsToChars(a1, (char *)v19, 3);
  BYTE3(v19[0]) = 0;
  int v20 = 0;
  uint64_t v15 = ures_open("icudt74l-curr", (char *)v21[0], &v20);
  uint64_t v16 = ures_getByKey(v15, "CurrencyPlurals", v15, &v20);
  uint64_t v17 = ures_getByKeyWithFallback(v16, (char *)v19, v16, (UErrorCode *)&v20);
  StringByKeyWithFallbacunint64_t k = ures_getStringByKeyWithFallback(v17, a4, a5, (UErrorCode *)&v20);
  if (v20 < 1
    || (int v20 = 0, StringByKeyWithFallback = ures_getStringByKeyWithFallback(v17, "other", a5, (UErrorCode *)&v20),
                 v20 < 1))
  {
    int Name = StringByKeyWithFallback;
    ures_close(v17);
    int v13 = v20;
    if (v20 <= 0)
    {
      if (v20 == -127 || v20 == -128 && *a6 != -127) {
        goto LABEL_5;
      }
    }

    else
    {
      *a5 = u_strlen(a1);
      *a6 = -127;
      int Name = a1;
    }
  }

  else
  {
    ures_close(v17);
    int Name = ucurr_getName(a1, a2, 1u, a3, a5, a6);
  }

void uprv_parseCurrency(char *a1, uint64_t a2, uint64_t a3, int a4, int *a5, UChar *a6, int *a7)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  if (*a7 <= 0)
  {
    uint64_t v14 = sub_18084320C(a1, a7);
    if (*a7 <= 0)
    {
      uint64_t v15 = (uint64_t)v14;
      int v25 = *((_DWORD *)v14 + 46);
      int v26 = *((_DWORD *)v14 + 42);
      uint64_t v27 = *((void *)v14 + 20);
      uint64_t v28 = *((void *)v14 + 22);
      int v16 = *(_DWORD *)(a3 + 8);
      uint64_t v59 = 0LL;
      __int128 v57 = 0u;
      __int128 v58 = 0u;
      __int128 v55 = 0u;
      __int128 v56 = 0u;
      __int128 v53 = 0u;
      __int128 v54 = 0u;
      __int128 v51 = 0u;
      __int128 v52 = 0u;
      __int128 v49 = 0u;
      __int128 v50 = 0u;
      *(_OWORD *)src = 0u;
      __int128 v48 = 0u;
      uint64_t v46 = 0LL;
      __int128 v44 = 0u;
      __int128 v45 = 0u;
      __int128 v42 = 0u;
      __int128 v43 = 0u;
      __int128 v40 = 0u;
      __int128 v41 = 0u;
      __int128 v38 = 0u;
      __int128 v39 = 0u;
      __int128 v36 = 0u;
      __int128 v37 = 0u;
      *(_OWORD *)dest = 0u;
      __int128 v35 = 0u;
      unsigned int v17 = *(unsigned __int16 *)(a2 + 8);
      if ((v17 & 0x8000) != 0) {
        unsigned int v18 = *(_DWORD *)(a2 + 12);
      }
      else {
        unsigned int v18 = v17 >> 5;
      }
      int v19 = v18 - v16;
      icu::UnicodeString::doExtract((char *)a2, v16, v19, (uint64_t)src, 0);
      UErrorCode pErrorCode = U_ZERO_ERROR;
      int32_t v20 = u_strToUpper(dest, 100, src, v19, a1, &pErrorCode);
      *a5 = 0;
      int v31 = -1;
      int v32 = 0;
      sub_180843AF8(v27, v26, dest, v20, a5, &v32, &v31);
      int v21 = 0;
      int v29 = -1;
      int v30 = 0;
      BOOL v22 = a4 == 1;
      uint64_t v23 = v28;
      if (!v22)
      {
        sub_180843AF8(v28, v25, src, v20, a5, &v30, &v29);
        int v21 = v30;
      }

      if (v32 < v21 || (int v24 = v31, v31 == -1))
      {
        if (v21 < v32) {
          goto LABEL_16;
        }
        int v24 = v29;
        if (v29 == -1) {
          goto LABEL_16;
        }
      }

      else
      {
        uint64_t v23 = v27;
        int v21 = v32;
      }

      u_charsToUChars(*(const char **)(v23 + 24LL * v24), a6, 4);
      *(_DWORD *)(a3 + 8) = v21 + v16;
LABEL_16:
      sub_180843D9C(v15);
    }
  }

char *sub_18084320C(char *a1, int *a2)
{
  uint64_t v83 = *MEMORY[0x1895F89C0];
  umtx_lock((icu::UMutex *)&unk_18C534FE8);
  for (uint64_t i = 0LL; i != 10; ++i)
  {
    unsigned int v5 = (const char *)qword_18C534F90[i];
    if (v5 && !strcmp(a1, v5))
    {
      __int128 v51 = (char *)qword_18C534F90[i];
LABEL_62:
      ++*((_DWORD *)v51 + 47);
      goto LABEL_79;
    }
  }

  umtx_unlock((std::mutex **)&unk_18C534FE8);
  uint64_t v63 = sub_1808451D4();
  int v71 = 0;
  memset(&__s[1], 0, 56);
  __s[0] = (char *)&__s[1] + 5;
  LODWORD(__s[1]) = 40;
  v82[0] = 0uLL;
  icu::CharStringByteSink::CharStringByteSink(v82, (uint64_t)__s);
  ulocimp_getName(a1);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v82);
  uint64_t v59 = a2;
  memset((char *)v82 + 8, 0, 56);
  *(void *)&v82[0] = (char *)v82 + 13;
  DWORD2(v82[0]) = 40;
  v79[0] = 0;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v75, __s[0]);
  icu::CharString::append((icu::CharString *)v82, v75, v76, (UErrorCode *)v79);
  int v6 = 0;
  int v7 = 0;
  if (v79[0] <= 0)
  {
    uint64_t v8 = sub_1808451D4();
    int v6 = 0;
    int v7 = 0;
    do
    {
      int32_t srcLength = 0;
      uint64_t v69 = ures_open("icudt74l-curr", *(char **)&v82[0], &srcLength);
      uint64_t v9 = ures_getByKey(v69, "Currencies", 0LL, &srcLength);
      int Size = ures_getSize(v9);
      if (Size >= 1)
      {
        int v11 = Size;
        for (signed int j = 0; j != v11; ++j)
        {
          int v13 = ures_getByIndex(v9, j, 0LL, &srcLength);
          int v73 = 0;
          StringByint Index = ures_getStringByIndex((uint64_t)v13, 0, &v73, &srcLength);
          if (v8)
          {
            int v72 = StringByIndex;
            icu::UnicodeString::UnicodeString(v79, 1LL, &v72);
            v77[1] = v79;
            v77[2] = v79;
            v77[0] = v8;
            do
              ++v7;
            while (sub_180842318((uint64_t)v77));
            icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v79);
          }

          else
          {
            ++v7;
          }

          ++v7;
          ures_close((uint64_t)v13);
        }

        v6 += v11;
      }

      v79[0] = 0;
      uint64_t v16 = ures_getByKey(v69, "CurrencyPlurals", 0LL, v79);
      int v17 = ures_getSize(v16);
      if (v17 >= 1)
      {
        int v18 = v17;
        for (signed int k = 0; k != v18; ++k)
        {
          int32_t v20 = ures_getByIndex(v16, k, 0LL, v79);
          v6 += ures_getSize((uint64_t)v20);
          ures_close((uint64_t)v20);
        }
      }

      ures_close(v16);
      ures_close(v9);
      ures_close(v69);
    }

    while (sub_1808457A8((icu::CharString *)v82));
  }

  if (BYTE12(v82[0])) {
    uprv_free(*(void **)&v82[0]);
  }
  int v21 = v59;
  uint64_t v22 = v63;
  __base = (char *)uprv_malloc(24LL * v6);
  if (__base)
  {
    char v68 = (char *)uprv_malloc(24LL * v7);
    if (v68)
    {
      if (*v59 <= 0)
      {
        LODWORD(v75) = 0;
        LODWORD(v72) = 0;
        int v67 = uhash_open((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0LL, (int *)&v75);
        int v6 = 0;
        int v7 = 0;
        int v70 = 0;
        int v61 = uhash_open((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0LL, (int *)&v72);
        do
        {
          int v71 = 0;
          uint64_t v60 = ures_open("icudt74l-curr", __s[0], &v71);
          uint64_t v66 = ures_getByKey(v60, "Currencies", 0LL, &v71);
          int v23 = ures_getSize(v66);
          if (v23 >= 1)
          {
            int v24 = v23;
            for (signed int m = 0; m != v24; ++m)
            {
              int v26 = ures_getByIndex(v66, m, 0LL, &v71);
              int32_t srcLength = 0;
              uint64_t v27 = ures_getStringByIndex((uint64_t)v26, 0, &srcLength, &v71);
              Key = (const char *)ures_getKey((uint64_t)v26);
              if (!v70 || !uhash_get((uint64_t)v67, (uint64_t)Key))
              {
                uhash_put((uint64_t)v67, (uint64_t)Key, (uint64_t)Key, (int *)&v75);
                int v29 = (const char **)&v68[24 * v7];
                unsigned __int16 *v29 = Key;
                v29[1] = (const char *)v27;
                int v30 = v7 + 1;
                _BYTE v29[2] = (const char *)srcLength;
                if (v22)
                {
                  memset(v82, 0, sizeof(v82));
                  v77[0] = v27;
                  icu::UnicodeString::UnicodeString(v82, 1LL, v77);
                  char v80 = v82;
                  uint64_t v81 = v82;
                  *(void *)int v79 = v22;
                  uint64_t v31 = sub_180842318((uint64_t)v79);
                  if (v31)
                  {
                    __int128 v33 = (int *)&v68[24 * v30 + 16];
                    do
                    {
                      *((void *)v33 - 2) = Key;
                      __int16 v34 = *(_WORD *)(v31 + 8);
                      if ((v34 & 0x11) != 0)
                      {
                        uint64_t v35 = 0LL;
                      }

                      else if ((v34 & 2) != 0)
                      {
                        uint64_t v35 = v31 + 10;
                      }

                      else
                      {
                        uint64_t v35 = *(void *)(v31 + 24);
                      }

                      *((void *)v33 - icu::UVector32::~UVector32(this + 1) = v35;
                      v33[1] = 0;
                      else {
                        int v36 = *(unsigned __int16 *)(v31 + 8) >> 5;
                      }
                      *__int128 v33 = v36;
                      v33 += 6;
                      uint64_t v31 = sub_180842318((uint64_t)v79);
                      ++v30;
                    }

                    while (v31);
                  }

                  icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)v82);
                }

                __int128 v37 = (UChar *)ures_getStringByIndex((uint64_t)v26, 1, &srcLength, &v71);
                __int128 v38 = &__base[24 * v6];
                *(void *)__int128 v38 = Key;
                *((void *)v38 + icu::UVector32::~UVector32(this + 1) = sub_1808456F8(v37, srcLength, a1);
                ++v6;
                *((_DWORD *)v38 + 4) = srcLength;
                *((_DWORD *)v38 + 5) = 1;
                __int128 v39 = (const char **)&v68[24 * v30];
                *__int128 v39 = Key;
                __int128 v40 = (UChar *)uprv_malloc(6uLL);
                v39[1] = (const char *)v40;
                u_charsToUChars(Key, v40, 3);
                int v7 = v30 + 1;
                _OWORD v39[2] = (const char *)0x100000003LL;
                uint64_t v22 = v63;
              }

              ures_close((uint64_t)v26);
            }
          }

          LODWORD(v82[0]) = 0;
          uint64_t v65 = ures_getByKey(v60, "CurrencyPlurals", 0LL, (int *)v82);
          int v64 = ures_getSize(v65);
          if (v64 < 1)
          {
            __int128 v42 = v61;
          }

          else
          {
            signed int v41 = 0;
            __int128 v42 = v61;
            do
            {
              __int128 v43 = ures_getByIndex(v65, v41, 0LL, (int *)v82);
              uint64_t v44 = ures_getKey((uint64_t)v43);
              if (!v70 || !uhash_get((uint64_t)v42, v44))
              {
                uhash_put((uint64_t)v42, v44, v44, (int *)&v72);
                int v45 = ures_getSize((uint64_t)v43);
                v79[0] = 0;
                if (v45 >= 1)
                {
                  int v46 = v45;
                  signed int v47 = 0;
                  __int128 v48 = &__base[24 * v6 + 16];
                  do
                  {
                    __int128 v49 = (UChar *)ures_getStringByIndex((uint64_t)v43, v47, v79, (int *)v82);
                    *((void *)v48 - 2) = v44;
                    *((void *)v48 - icu::UVector32::~UVector32(this + 1) = sub_1808456F8(v49, v79[0], a1);
                    *(_DWORD *)__int128 v48 = v79[0];
                    *((_DWORD *)v48 + icu::UVector32::~UVector32(this + 1) = 1;
                    v48 += 24;
                    ++v47;
                  }

                  while (v46 != v47);
                  v6 += v47;
                  uint64_t v22 = v63;
                  __int128 v42 = v61;
                }
              }

              ures_close((uint64_t)v43);
              ++v41;
            }

            while (v41 != v64);
          }

          ures_close(v65);
          ures_close(v66);
          ures_close(v60);
          ++v70;
        }

        while (sub_1808457A8((icu::CharString *)__s));
        uhash_close(v67);
        uhash_close(v42);
        qsort(__base, v6, 0x18uLL, (int (__cdecl *)(const void *, const void *))sub_1808458D0);
        qsort(v68, v7, 0x18uLL, (int (__cdecl *)(const void *, const void *))sub_1808458D0);
        int v50 = (int)v75;
        int v21 = v59;
      }

      goto LABEL_65;
    }

    uprv_free(__base);
  }

  int v6 = 0;
  __base = 0LL;
  int v7 = 0;
  char v68 = 0LL;
  int *v59 = 7;
LABEL_65:
  if (BYTE4(__s[1])) {
    uprv_free(__s[0]);
  }
  if (*v21 > 0) {
    return 0LL;
  }
  umtx_lock((icu::UMutex *)&unk_18C534FE8);
  uint64_t v52 = 0LL;
  while (1)
  {
    __int128 v53 = (const char *)qword_18C534F90[v52];
    if (v53)
    {
      if (!strcmp(a1, v53)) {
        break;
      }
    }

    if (++v52 == 10) {
      goto LABEL_75;
    }
  }

  if (v52 != 255)
  {
    sub_18084517C(__base, v6);
    sub_18084517C(v68, v7);
    __int128 v51 = (char *)qword_18C534F90[v52];
    goto LABEL_62;
  }

uint64_t sub_180843AF8(uint64_t result, int a2, unsigned __int16 *__s2, int a4, int *a5, int *a6, int *a7)
{
  uint64_t v12 = result;
  uint64_t v13 = 0LL;
  int v14 = 0;
  *a7 = -1;
  *a6 = 0;
  int v15 = a2 - 1;
  while (2)
  {
    if (v13 == (a4 & ~(a4 >> 31)) || v14 > v15) {
      return result;
    }
    unsigned int v16 = __s2[v13];
    int v17 = v15;
    int v18 = v14;
    while (1)
    {
      int v19 = v18 + v17 < 0 != __OFADD__(v18, v17) ? v18 + v17 + 1 : v18 + v17;
      int v20 = v19 >> 1;
      uint64_t result = *(int *)(v12 + 24LL * (v19 >> 1) + 16);
      if (v13 < result)
      {
        unsigned int v21 = *(unsigned __int16 *)(*(void *)(v12 + 24LL * (v19 >> 1) + 8) + 2 * v13);
        if (v21 >= v16) {
          break;
        }
      }

      int v18 = v20 + 1;
LABEL_13:
      if (v18 > v17) {
        return result;
      }
    }

    if (v21 > v16)
    {
      int v17 = v20 - 1;
      goto LABEL_13;
    }

    if (v14 < v20)
    {
      int v22 = v20;
      do
      {
        int v23 = v14 + v22;
        if (v14 + v22 < 0 != __OFADD__(v14, v22)) {
          ++v23;
        }
        int v24 = v23 >> 1;
        uint64_t v25 = (uint64_t)v23 >> 1;
        if (v13 >= *(int *)(v12 + 24LL * v24 + 16))
        {
          int v14 = v25 + 1;
        }

        else if (*(unsigned __int16 *)(*(void *)(v12 + 24LL * (int)v25 + 8) + 2 * v13) >= v16)
        {
          int v22 = v25;
        }

        else
        {
          int v14 = v25 + 1;
        }
      }

      while (v14 < v22);
    }

    while (v20 < v15)
    {
      int v26 = v20 + v15;
      if (v20 + v15 < 0 != __OFADD__(v20, v15)) {
        ++v26;
      }
      int v27 = v26 >> 1;
      uint64_t v28 = (uint64_t)v26 >> 1;
      if (v13 <= *(int *)(v12 + 24LL * v27 + 16))
      {
        else {
          int v20 = v28 + 1;
        }
      }

      else
      {
        int v20 = v28 + 1;
      }
    }

    int v29 = *(unsigned __int16 *)(*(void *)(v12 + 24LL * v15 + 8) + 2 * v13) > v16;
    uint64_t v30 = v13 + 1;
    if (v13 + 1 == *(_DWORD *)(v12 + 24LL * v14 + 16)) {
      int v31 = v14;
    }
    else {
      int v31 = -1;
    }
    if (v14 != -1)
    {
      if (v13 >= *a5) {
        int v32 = v13 + 1;
      }
      else {
        int v32 = *a5;
      }
      *a5 = v32;
      if (v31 != -1)
      {
        *a6 = v30;
        *a7 = v31;
      }

      v15 -= v29;
      uint64_t v13 = v30;
      if (v15 - v14 <= 9)
      {
        if (v15 >= v14)
        {
          uint64_t v33 = v14;
          uint64_t v34 = *a5;
          int v35 = v15 + 1;
          do
          {
            int v36 = *(_DWORD *)(v12 + 24 * v33 + 16);
            BOOL v37 = v36 > a4 || v36 <= *a6;
            if (v37 || (uint64_t result = memcmp(*(const void **)(v12 + 24 * v33 + 8), __s2, 2LL * v36), (_DWORD)result))
            {
              if (v36 >= a4) {
                int v38 = a4;
              }
              else {
                int v38 = v36;
              }
              if ((int)v34 < v38)
              {
                uint64_t v39 = *(void *)(v12 + 24 * v33 + 8);
                uint64_t v40 = v34;
                do
                {
                  uint64_t v41 = *a5;
                  if (v40 >= v41) {
                    LODWORD(v4icu::UVector32::~UVector32(this + 1) = v40 + 1;
                  }
                  *a5 = v41;
                  ++v40;
                }

                while (v38 != (_DWORD)v40);
              }
            }

            else
            {
              int v42 = *a5;
              if (*a5 <= v36) {
                int v42 = v36;
              }
              *a5 = v42;
              *a7 = v33;
              *a6 = v36;
            }

            ++v33;
          }

          while (v35 != (_DWORD)v33);
        }

        return result;
      }

      continue;
    }

    return result;
  }

void sub_180843D9C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 188) - 1;
  *(_DWORD *)(a1 + 188) = v2;
  if (!v2) {
    sub_1808450B0(a1);
  }
  umtx_unlock((std::mutex **)&unk_18C534FE8);
}

const UChar *uprv_getStaticCurrencyName(const UChar *a1, char *a2, uint64_t a3, int *a4)
{
  unsigned int v13 = 0;
  uint64_t result = ucurr_getName(a1, a2, 0, 0LL, (int *)&v13, a4);
  if (*a4 <= 0)
  {
    uint64_t v7 = (uint64_t)result;
    uint64_t v8 = v13;
    icu::UnicodeString::unBogus(a3);
    unsigned int v9 = *(unsigned __int16 *)(a3 + 8);
    int v10 = (__int16)v9;
    unsigned int v11 = v9 >> 5;
    if (v10 >= 0) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = *(unsigned int *)(a3 + 12);
    }
    return (const UChar *)icu::UnicodeString::doReplace(a3, 0LL, v12, v7, 0, v8);
  }

  return result;
}

uint64_t ucurr_getDefaultFractionDigits(const UChar *a1, int *a2)
{
  if (*a2 <= 0) {
    return *sub_180843F00(a1, a2);
  }
  else {
    return 0LL;
  }
}

uint64_t ucurr_getDefaultFractionDigitsForUsage(const UChar *a1, int a2, int *a3)
{
  if (*a3 > 0) {
    return 0LL;
  }
  if (a2 == 1) {
    return sub_180843F00(a1, a3)[2];
  }
  if (!a2) {
    return *sub_180843F00(a1, a3);
  }
  uint64_t result = 0LL;
  *a3 = 16;
  return result;
}

int *sub_180843F00(const UChar *a1, int *a2)
{
  if (!a1 || !*a1)
  {
    if (*a2 <= 0) {
      *a2 = 1;
    }
    return (int *)&unk_180A269DC;
  }

  uint64_t v4 = ures_openDirect((uint64_t)"icudt74l-curr", (uint64_t)"supplementalData", (uint64_t)a2);
  uint64_t v5 = ures_getByKey(v4, "CurrencyMeta", v4, a2);
  uint64_t v6 = v5;
  if (*a2 >= 1)
  {
LABEL_4:
    ures_close(v5);
    return (int *)&unk_180A269DC;
  }

  *(void *)unsigned int v13 = 0LL;
  u_UCharsToChars(a1, &v13[4], 3);
  v13[7] = 0;
  uint64_t v9 = ures_getByKey(v6, &v13[4], 0LL, (int *)v13);
  uint64_t v10 = v9;
  if (*(int *)v13 >= 1)
  {
    ures_close(v9);
    uint64_t v10 = ures_getByKey(v6, "DEFAULT", 0LL, a2);
    if (*a2 >= 1)
    {
      ures_close(v6);
      uint64_t v5 = v10;
      goto LABEL_4;
    }
  }

  int v12 = 0;
  IntVecto__int16 r = ures_getIntVector(v10, &v12, a2);
  if (*a2 < 1 && v12 == 4) {
    uint64_t v7 = IntVector;
  }
  else {
    uint64_t v7 = (int *)&unk_180A269DC;
  }
  if ((*a2 >= 1 || v12 != 4) && *a2 <= 0)
  {
    *a2 = 3;
    uint64_t v7 = (int *)&unk_180A269DC;
  }

  ures_close(v6);
  ures_close(v10);
  return v7;
}

int *ucurr_getRoundingIncrement(const UChar *a1, int *a2)
{
  return ucurr_getRoundingIncrementForUsage(a1, 0, a2);
}

int *ucurr_getRoundingIncrementForUsage(const UChar *a1, int a2, int *a3)
{
  uint64_t result = sub_180843F00(a1, a3);
  if (*a3 <= 0)
  {
    if (a2)
    {
      if (a2 != 1)
      {
        int v7 = 16;
        goto LABEL_10;
      }

      uint64_t v6 = result + 2;
    }

    else
    {
      uint64_t v6 = result;
    }

    if (*v6 >= 0xA)
    {
      int v7 = 3;
LABEL_10:
      *a3 = v7;
    }
  }

  return result;
}

uint64_t ucurr_isAvailable(uint64_t a1, int *a2, double a3, double a4)
{
  if (*a2 > 0) {
    return 0LL;
  }
  unsigned int v9 = atomic_load(&dword_18C535048);
  if (v9 == 2 || !icu::umtx_initImplPreInit(&dword_18C535048))
  {
    int v16 = dword_18C53504C;
    if (dword_18C53504C < 1) {
      goto LABEL_36;
    }
    uint64_t result = 0LL;
LABEL_13:
    *a2 = v16;
    return result;
  }

  sub_180820C94(0xEu, (uint64_t)sub_1808450E8);
  uint64_t v10 = uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0LL, a2);
  int v11 = *a2;
  if (*a2 > 0) {
    goto LABEL_35;
  }
  int v12 = v10;
  uhash_setValueDeleter((uint64_t)v10, (uint64_t)j__uprv_free);
  int v39 = 0;
  uint64_t v13 = ures_openDirect((uint64_t)"icudt74l-curr", (uint64_t)"supplementalData", (uint64_t)&v39);
  uint64_t v14 = ures_getByKey(v13, "CurrencyMap", v13, &v39);
  uint64_t v15 = v14;
  if (v39 > 0)
  {
    *a2 = v39;
LABEL_9:
    ures_close(v15);
    int v11 = *a2;
    if (*a2 >= 1) {
      goto LABEL_34;
    }
    qword_18C534F88 = (uint64_t)v12;
    goto LABEL_35;
  }

  signed int v17 = 0;
  uint64_t v35 = v15;
  while (1)
  {
    signed int v36 = v17;
    int v18 = ures_getByIndex(v15, v17, 0LL, &v39);
    uint64_t v19 = (uint64_t)v18;
    if (v39 <= 0) {
      break;
    }
    *a2 = v39;
LABEL_18:
    ures_close(v19);
    signed int v17 = v36 + 1;
    uint64_t v15 = v35;
  }

  signed int v20 = 0;
  while (1)
  {
    unsigned int v21 = ures_getByIndex(v19, v20, 0LL, &v39);
    int v22 = uprv_malloc(0x18uLL);
    if (!v22) {
      break;
    }
    uint64_t v23 = (uint64_t)v22;
    int v38 = 0;
    uint64_t v24 = ures_getByKey((uint64_t)v21, "id", 0LL, &v39);
    if (v24)
    {
      uint64_t v25 = v24;
      String = ures_getString(v24, &v38, &v39);
      uint64_t v27 = ures_getByKey((uint64_t)v21, "from", 0LL, &v39);
      uint64_t v28 = v27;
      if (v39 <= 0)
      {
        int v37 = 0;
        IntVecto__int16 r = ures_getIntVector(v27, &v37, &v39);
        double v29 = (double)(uint64_t)(IntVector[1] | ((unint64_t)*IntVector << 32));
      }

      else
      {
        double v29 = -1.79769313e308;
      }

      ures_close(v28);
      int v39 = 0;
      uint64_t v31 = ures_getByKey((uint64_t)v21, "to", 0LL, &v39);
      uint64_t v32 = v31;
      if (v39 <= 0)
      {
        int v37 = 0;
        uint64_t v34 = ures_getIntVector(v31, &v37, &v39);
        double v33 = (double)(uint64_t)(v34[1] | ((unint64_t)*v34 << 32));
      }

      else
      {
        double v33 = 1.79769313e308;
      }

      ures_close(v32);
      ures_close(v25);
      ures_close((uint64_t)v21);
      *(void *)uint64_t v23 = String;
      *(double *)(v23 + 8) = v29;
      *(double *)(v23 + 16) = v33;
      int v39 = 0;
      uhash_put((uint64_t)v12, (uint64_t)String, v23, &v39);
    }
  }

  *a2 = 7;
LABEL_34:
  uhash_close(v12);
  int v11 = *a2;
LABEL_35:
  dword_18C53504C = v11;
  icu::umtx_initImplPostInit(&dword_18C535048);
LABEL_36:
  if (*a2 > 0) {
    return 0LL;
  }
  uint64_t result = uhash_get(qword_18C534F88, a1);
  if (result)
  {
    if (a3 > a4)
    {
      uint64_t result = 0LL;
      int v16 = 1;
      goto LABEL_13;
    }

    return *(double *)(result + 16) >= a3 && *(double *)(result + 8) <= a4;
  }

  return result;
}

void *ucurr_openISOCurrencies(int a1, _DWORD *a2)
{
  uint64_t v4 = uprv_malloc(0x38uLL);
  uint64_t v5 = v4;
  if (v4)
  {
    *(_OWORD *)uint64_t v4 = xmmword_189715D90;
    *((_OWORD *)v4 + icu::UVector32::~UVector32(this + 1) = *(_OWORD *)&off_189715DA0;
    *((_OWORD *)v4 + 2) = xmmword_189715DB0;
    v4[6] = sub_180845A74;
    uint64_t v6 = uprv_malloc(8uLL);
    if (v6)
    {
      *uint64_t v6 = a1;
      v6[1] = 0;
      v5[1] = v6;
    }

    else
    {
      *a2 = 7;
      uprv_free(v5);
      return 0LL;
    }
  }

  else
  {
    *a2 = 7;
  }

  return v5;
}

uint64_t ucurr_countCurrencies(char *a1, int *a2, double a3)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  if (!a2 || *a2 > 0) {
    return 0LL;
  }
  int v23 = 0;
  memset(v32, 0, sizeof(v32));
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  *(_OWORD *)__s = 0u;
  __int128 v25 = 0u;
  ulocimp_getRegionForSupplementalData(a1, 0, __s, 157, a2);
  uint64_t v4 = 0LL;
  if (*a2 <= 0)
  {
    int v7 = strchr(__s, 95);
    if (v7) {
      *int v7 = 0;
    }
    uint64_t v8 = ures_openDirect((uint64_t)"icudt74l-curr", (uint64_t)"supplementalData", (uint64_t)&v23);
    uint64_t v9 = ures_getByKey(v8, "CurrencyMap", v8, &v23);
    uint64_t v10 = ures_getByKey(v8, __s, v9, &v23);
    uint64_t v11 = v10;
    if (v23 > 0 || (int)ures_getSize(v10) < 1)
    {
      uint64_t v4 = 0LL;
    }

    else
    {
      uint64_t v4 = 0LL;
      signed int v12 = 0;
      do
      {
        uint64_t v13 = ures_getByIndex(v11, v12, 0LL, &v23);
        int v22 = 0;
        uint64_t v14 = ures_getByKey((uint64_t)v13, "from", 0LL, &v23);
        IntVecto__int16 r = ures_getIntVector(v14, &v22, &v23);
        double v16 = (double)(uint64_t)(IntVector[1] | ((unint64_t)*IntVector << 32));
        if ((int)ures_getSize((uint64_t)v13) < 3)
        {
          if (v16 <= a3) {
            uint64_t v4 = (v4 + 1);
          }
        }

        else
        {
          int v21 = 0;
          uint64_t v17 = ures_getByKey((uint64_t)v13, "to", 0LL, &v23);
          int v18 = ures_getIntVector(v17, &v21, &v23);
          ures_close(v17);
        }

        ures_close((uint64_t)v13);
        ures_close(v14);
        ++v12;
      }

      while (v12 < (int)ures_getSize(v11));
    }

    ures_close(v11);
    int v19 = *a2;
    int v20 = v23;
    if (!*a2 || v23)
    {
      *a2 = v23;
      int v19 = v20;
    }

    if (v19 > 0) {
      return 0LL;
    }
  }

  return v4;
}

uint64_t ucurr_forLocaleAndDate(char *a1, int a2, UChar *a3, int a4, int *a5, double a6)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  unsigned int v35 = 0;
  if (!a5 || *a5 > 0) {
    return 0LL;
  }
  if (!a3 && a4)
  {
    uint64_t result = 0LL;
    *a5 = 1;
    return result;
  }

  int v34 = 0;
  __int128 v43 = 0u;
  memset(v44, 0, sizeof(v44));
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  *(_OWORD *)__s = 0u;
  ulocimp_getRegionForSupplementalData(a1, 0, __s, 157, a5);
  uint64_t result = 0LL;
  if (*a5 <= 0)
  {
    signed int v12 = strchr(__s, 95);
    if (v12) {
      *signed int v12 = 0;
    }
    uint64_t v13 = ures_openDirect((uint64_t)"icudt74l-curr", (uint64_t)"supplementalData", (uint64_t)&v34);
    uint64_t v14 = ures_getByKey(v13, "CurrencyMap", v13, &v34);
    uint64_t v15 = ures_getByKey(v13, __s, v14, &v34);
    uint64_t v16 = v15;
    if (v34 <= 0)
    {
      if (a2 < 1 || (int)ures_getSize(v15) < a2)
      {
        ures_close(v16);
        return 0LL;
      }

      if ((int)ures_getSize(v16) < 1)
      {
        StringByKey = 0LL;
        char v23 = 0;
      }

      else
      {
        int v30 = 0;
        signed int v22 = 0;
        char v23 = 0;
        do
        {
          uint64_t v24 = ures_getByIndex(v16, v22, 0LL, &v34);
          StringByKey = ures_getStringByKey((uint64_t)v24, "id", (int *)&v35, &v34);
          int v33 = 0;
          uint64_t v25 = ures_getByKey((uint64_t)v24, "from", 0LL, &v34);
          IntVecto__int16 r = ures_getIntVector(v25, &v33, &v34);
          double v27 = (double)(uint64_t)(IntVector[1] | ((unint64_t)*IntVector << 32));
          if ((int)ures_getSize((uint64_t)v24) < 3)
          {
            if (v27 <= a6 && ++v30 == a2) {
              char v23 = 1;
            }
          }

          else
          {
            __int128 v31 = StringByKey;
            int v32 = 0;
            uint64_t v28 = ures_getByKey((uint64_t)v24, "to", 0LL, &v34);
            __int128 v29 = ures_getIntVector(v28, &v32, &v34);
            if (v27 <= a6
              && (double)(uint64_t)(v29[1] | ((unint64_t)*v29 << 32)) > a6
              && ++v30 == a2)
            {
              char v23 = 1;
            }

            ures_close(v28);
            StringByKey = v31;
          }

          ures_close((uint64_t)v24);
          ures_close(v25);
          if ((v23 & 1) != 0) {
            break;
          }
          ++v22;
        }

        while (v22 < (int)ures_getSize(v16));
      }

      BOOL v18 = (v23 & 1) == 0;
    }

    else
    {
      StringByKey = 0LL;
      BOOL v18 = 1;
    }

    ures_close(v16);
    int v19 = *a5;
    int v20 = v34;
    if (!*a5 || v34)
    {
      *a5 = v34;
      int v19 = v20;
    }

    if (v19 <= 0)
    {
      char v21 = (int)v35 >= a4 || v18;
      if ((v21 & 1) != 0) {
        return 0LL;
      }
      u_strcpy(a3, StringByKey);
    }

    return u_terminateUChars((uint64_t)a3, a4, v35, a5);
  }

  return result;
}

uint64_t ucurr_getKeywordValuesForLocale(uint64_t a1, char *a2, int a3, int *a4)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  *(_DWORD *)__s2 = 0;
  ulocimp_getRegionForSupplementalData(a2, 1, __s2, 4, a4);
  EmptyList = ulist_createEmptyList(a4);
  uint64_t v8 = ulist_createEmptyList(a4);
  uint64_t v9 = uprv_malloc(0x38uLL);
  uint64_t KeywordValuesForLocale = (uint64_t)v9;
  if (*a4 <= 0 && v9 != 0LL)
  {
    uint64_t v27 = a1;
    *uint64_t v9 = xmmword_189715DC8;
    v9[1] = *(_OWORD *)&off_189715DD8;
    v9[2] = xmmword_189715DE8;
    *((void *)v9 + 6) = ulist_reset_keyword_values_iterator;
    *((void *)v9 + icu::UVector32::~UVector32(this + 1) = EmptyList;
    uint64_t v12 = ures_openDirect((uint64_t)"icudt74l-curr", (uint64_t)"supplementalData", (uint64_t)a4);
    ures_getByKey(v12, "CurrencyMap", v12, a4);
    uint64_t v37 = 0LL;
    memset(v36, 0, sizeof(v36));
    uint64_t v35 = 0LL;
    memset(v34, 0, sizeof(v34));
    uint64_t v33 = 0LL;
    memset(v32, 0, sizeof(v32));
    uint64_t v31 = 0LL;
    memset(v30, 0, sizeof(v30));
    ures_initStackObject((uint64_t)v36);
    ures_initStackObject((uint64_t)v34);
    ures_initStackObject((uint64_t)v32);
    ures_initStackObject((uint64_t)v30);
    if (*a4 > 0) {
      goto LABEL_9;
    }
    while (1)
    {
      if (!ures_hasNext(v12))
      {
        if (*a4 <= 0)
        {
          if (a3)
          {
            if (!ulist_getListSize((uint64_t)EmptyList))
            {
              uenum_close((void **)KeywordValuesForLocale);
              uint64_t KeywordValuesForLocale = ucurr_getKeywordValuesForLocale(v27, "und", 1LL, a4);
            }
          }

          else
          {
            ulist_resetList(v8);
            Next = (const char *)ulist_getNext((uint64_t)v8);
            if (Next)
            {
              char v23 = Next;
              do
              {
                int v24 = strlen(v23);
                if (!ulist_containsString((uint64_t)EmptyList, v23, v24))
                {
                  uint64_t v25 = uprv_malloc(0x60uLL);
                  size_t v26 = strlen(v23);
                  memcpy(v25, v23, v26 + 1);
                  ulist_addItemEndList((uint64_t)EmptyList, v25, 1, a4);
                  if (*a4 > 0) {
                    break;
                  }
                }

                char v23 = (const char *)ulist_getNext((uint64_t)v8);
              }

              while (v23);
            }
          }

          ulist_resetList(*(void **)(KeywordValuesForLocale + 8));
          goto LABEL_10;
        }

uint64_t ucurr_getNumericCode(const UChar *a1)
{
  if (!a1 || u_strlen(a1) != 3) {
    return 0LL;
  }
  int v7 = 0;
  uint64_t v2 = ures_openDirect(0LL, (uint64_t)"currencyNumericCodes", (uint64_t)&v7);
  ures_getByKey(v2, "codeMap", v2, &v7);
  uint64_t v3 = 0LL;
  if (v7 <= 0)
  {
    *(_DWORD *)uint64_t v6 = 0;
    u_UCharsToChars(a1, v6, 3);
    v6[3] = 0;
    T_CString_toUpperCase((unsigned __int8 *)v6);
    ures_getByKey(v2, v6, v2, &v7);
    unsigned int Int = ures_getInt(v2, &v7);
    if (v7 <= 0) {
      uint64_t v3 = Int;
    }
    else {
      uint64_t v3 = 0LL;
    }
  }

  ures_close(v2);
  return v3;
}

void sub_1808450B0(uint64_t a1)
{
}

uint64_t sub_1808450E8()
{
  for (uint64_t i = 0LL; i != 10; ++i)
  {
    uint64_t v1 = qword_18C534F90[i];
    if (v1)
    {
      sub_1808450B0(v1);
      qword_18C534F90[i] = 0LL;
    }
  }

  if (qword_18C534F88)
  {
    uhash_close((_BYTE *)qword_18C534F88);
    qword_18C534F88 = 0LL;
  }

  atomic_store(0, &dword_18C535048);
  uint64_t v2 = (void *)qword_18C535038;
  if (qword_18C535038)
  {
    if (*(void *)qword_18C535038) {
      uhash_close(*(_BYTE **)qword_18C535038);
    }
    icu::UMemory::operator delete(v2);
  }

  qword_18C535038 = 0LL;
  atomic_store(0, (unsigned int *)&unk_18C535040);
  return 1LL;
}

void sub_18084517C(char *a1, int a2)
{
  if (a2 >= 1)
  {
    uint64_t v3 = a2;
    uint64_t v4 = a1 + 20;
    uint64_t v5 = a1 + 20;
    do
    {
      char v6 = *v5;
      v5 += 24;
      if ((v6 & 1) != 0) {
        uprv_free(*(void **)(v4 - 12));
      }
      uint64_t v4 = v5;
      --v3;
    }

    while (v3);
  }

  uprv_free(a1);
}

uint64_t sub_1808451D4()
{
  uint64_t v59 = *MEMORY[0x1895F89C0];
  unsigned int v0 = atomic_load((unsigned int *)&unk_18C535040);
  int v53 = 0;
  sub_180820C94(0xEu, (uint64_t)sub_1808450E8);
  uint64_t v3 = (int32x2_t *)icu::UMemory::operator new(v2, (icu::UMemory *)0x58, v1);
  if (!v3) {
    goto LABEL_103;
  }
  uint64_t v4 = (uint64_t *)v3;
  *uint64_t v3 = 0LL;
  uint64_t v5 = (uint64_t)&v3[1];
  uhash_init(v3 + 1, (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0LL, &v53);
  if (v53 > 0) {
    goto LABEL_100;
  }
  *uint64_t v4 = v5;
  uhash_setKeyDeleter(v5, (uint64_t)uprv_deleteUObject);
  if (v53 >= 1) {
    goto LABEL_100;
  }
  uhash_setValueDeleter(*v4, (uint64_t)sub_180845930);
  if (v53 > 0) {
    goto LABEL_100;
  }
  char v6 = &dword_180A269B4;
  __int128 v7 = 0uLL;
  while (2)
  {
    v58[2] = v7;
    v58[3] = v7;
    v58[0] = v7;
    v58[1] = v7;
    icu::UnicodeString::UnicodeString((uint64_t)v58, v6[1]);
    uint64_t v8 = (const icu::UnicodeSet *)icu::unisets::get(*v6);
    if (!v8)
    {
LABEL_98:
      icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v58);
      break;
    }

    memset(v54, 0, sizeof(v54));
    icu::UnicodeSetIterator::UnicodeSetIterator((icu::UnicodeSetIterator *)v54, v8);
    while (icu::UnicodeSetIterator::next((icu::UnicodeSetIterator *)v54))
    {
      memset(v57, 0, sizeof(v57));
      String = icu::UnicodeSetIterator::getString((icu::UnicodeSetIterator *)v54, v10, v11);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v57, (UChar **)String);
      if ((BYTE8(v57[0]) & 1) != 0)
      {
        unint64_t v15 = WORD4(v58[0]);
        if ((BYTE8(v58[0]) & 1) != 0) {
          goto LABEL_92;
        }
      }

      else
      {
        if ((SWORD4(v57[0]) & 0x8000u) == 0) {
          int v13 = WORD4(v57[0]) >> 5;
        }
        else {
          int v13 = HIDWORD(v57[0]);
        }
        if ((SWORD4(v58[0]) & 0x8000u) == 0) {
          int v14 = WORD4(v58[0]) >> 5;
        }
        else {
          int v14 = HIDWORD(v58[0]);
        }
        if ((BYTE8(v58[0]) & 1) == 0
          && v13 == v14
          && icu::UnicodeString::doEquals((icu::UnicodeString *)v57, (const icu::UnicodeString *)v58, v13))
        {
          goto LABEL_92;
        }
      }

      unint64_t v15 = v53;
      if (v53 > 0) {
        goto LABEL_97;
      }
      if ((BYTE8(v58[0]) & 1) != 0)
      {
        if ((BYTE8(v57[0]) & 1) != 0) {
          goto LABEL_91;
        }
      }

      else
      {
        if ((SWORD4(v58[0]) & 0x8000u) == 0) {
          int v16 = WORD4(v58[0]) >> 5;
        }
        else {
          int v16 = HIDWORD(v58[0]);
        }
        if ((SWORD4(v57[0]) & 0x8000u) == 0) {
          int v17 = WORD4(v57[0]) >> 5;
        }
        else {
          int v17 = HIDWORD(v57[0]);
        }
        if ((BYTE8(v57[0]) & 1) == 0
          && v16 == v17
          && icu::UnicodeString::doEquals((icu::UnicodeString *)v58, (const icu::UnicodeString *)v57, v16))
        {
          goto LABEL_91;
        }
      }

      v56[1] = v58;
      void v56[2] = v58;
      v55[2] = v57;
      v56[0] = v4;
      v55[0] = v4;
      v55[1] = v57;
      uint64_t v18 = sub_180842318((uint64_t)v56);
      uint64_t v19 = sub_180842318((uint64_t)v55);
      uint64_t v22 = v19;
      if (v18 && v19)
      {
        uint64_t v23 = v19;
        uint64_t v24 = v18;
        while (1)
        {
          unsigned int v25 = *(unsigned __int16 *)(v24 + 8);
          if ((v25 & 1) != 0)
          {
            if ((BYTE8(v57[0]) & 1) != 0) {
              goto LABEL_91;
            }
          }

          else
          {
            if ((v25 & 0x8000) != 0) {
              int v26 = *(_DWORD *)(v24 + 12);
            }
            else {
              int v26 = v25 >> 5;
            }
            if ((SWORD4(v57[0]) & 0x8000u) == 0) {
              int v27 = WORD4(v57[0]) >> 5;
            }
            else {
              int v27 = HIDWORD(v57[0]);
            }
            if ((BYTE8(v57[0]) & 1) == 0
              && v26 == v27
              && icu::UnicodeString::doEquals((icu::UnicodeString *)v24, (const icu::UnicodeString *)v57, v26))
            {
              goto LABEL_91;
            }
          }

          unsigned int v28 = *(unsigned __int16 *)(v23 + 8);
          if ((v28 & 1) != 0)
          {
            if ((BYTE8(v58[0]) & 1) != 0) {
              goto LABEL_91;
            }
          }

          else
          {
            if ((v28 & 0x8000) != 0) {
              int v29 = *(_DWORD *)(v23 + 12);
            }
            else {
              int v29 = v28 >> 5;
            }
            if ((SWORD4(v58[0]) & 0x8000u) == 0) {
              int v30 = WORD4(v58[0]) >> 5;
            }
            else {
              int v30 = HIDWORD(v58[0]);
            }
            if ((BYTE8(v58[0]) & 1) == 0
              && v29 == v30
              && icu::UnicodeString::doEquals((icu::UnicodeString *)v23, (const icu::UnicodeString *)v58, v29))
            {
              goto LABEL_91;
            }
          }

          uint64_t v24 = sub_180842318((uint64_t)v56);
          uint64_t v31 = sub_180842318((uint64_t)v55);
          if (v24)
          {
            uint64_t v23 = v31;
            if (v31) {
              continue;
            }
          }

          break;
        }
      }

      int v32 = (icu::UnicodeString *)icu::UMemory::operator new(v21, (icu::UMemory *)0x40, v20);
      uint64_t v35 = (uint64_t)v32;
      if (v22 | v18)
      {
        if (!v22)
        {
          if (v32)
          {
            __int128 v40 = (UChar **)v57;
LABEL_77:
            icu::UnicodeString::UnicodeString(v32, v40);
          }

LABEL_78:
          uint64_t v37 = (icu::UnicodeString *)icu::UMemory::operator new(v34, (icu::UMemory *)0x40, v33);
          if (!v37)
          {
LABEL_86:
            if (v35) {
              goto LABEL_89;
            }
            goto LABEL_90;
          }

          uint64_t v38 = (uint64_t)v37;
          __int128 v39 = (UChar **)v18;
          goto LABEL_80;
        }

        if (v18)
        {
          if (v32)
          {
            __int128 v40 = (UChar **)v22;
            goto LABEL_77;
          }

          goto LABEL_78;
        }

        if (v32)
        {
          signed int v36 = (UChar **)v22;
          goto LABEL_68;
        }
      }

      else if (v32)
      {
        signed int v36 = (UChar **)v57;
LABEL_68:
        icu::UnicodeString::UnicodeString(v32, v36);
      }

      uint64_t v37 = (icu::UnicodeString *)icu::UMemory::operator new(v34, (icu::UMemory *)0x40, v33);
      if (!v37) {
        goto LABEL_86;
      }
      uint64_t v38 = (uint64_t)v37;
      __int128 v39 = (UChar **)v58;
LABEL_80:
      icu::UnicodeString::UnicodeString(v37, v39);
      if (!v35)
      {
        uint64_t v35 = v38;
LABEL_89:
        (*(void (**)(uint64_t))(*(void *)v35 + 8LL))(v35);
LABEL_90:
        int v53 = 7;
        goto LABEL_91;
      }

      uint64_t v43 = *v4;
      uint64_t v44 = (icu::UnicodeString *)icu::UMemory::operator new(v42, (icu::UMemory *)0x40, v41);
      uint64_t v45 = (uint64_t)v44;
      if (v44) {
        icu::UnicodeString::UnicodeString(v44, (UChar **)v58);
      }
      uhash_put(v43, v45, v35, &v53);
      uint64_t v46 = *v4;
      __int128 v49 = (icu::UnicodeString *)icu::UMemory::operator new(v48, (icu::UMemory *)0x40, v47);
      uint64_t v50 = (uint64_t)v49;
      if (v49) {
        icu::UnicodeString::UnicodeString(v49, (UChar **)v57);
      }
      uhash_put(v46, v50, v38, &v53);
LABEL_91:
      unint64_t v15 = v53;
      if (v53 >= 1)
      {
LABEL_97:
        icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)v57);
        icu::UnicodeSetIterator::~UnicodeSetIterator((icu::UnicodeSetIterator *)v54);
        goto LABEL_98;
      }

    if (!v40)
    {
      goto LABEL_47;
    }

    int v27 = 0LL;
    uint64_t v38 = 66565;
    goto LABEL_80;
  }

  destCapacity = v35;
  uint64_t v37 = (UChar *)uprv_malloc(2 * v35);
  if (v37)
  {
    int v34 = v37;
    *a8 = 0;
    uint64_t v35 = uidna_toASCII(v32, v27, v37, destCapacity, options, parseErrora, (UErrorCode *)a8);
    signed int v36 = *a8;
    goto LABEL_40;
  }

          int v146 = a6;
          uint64_t v156 = v160;
          uint64_t v44 = sub_18099F638(a2, (const icu::UnicodeString *)&v156);
          if (!v44
            || (uint64_t v45 = (uint64_t)v44, !icu::ICU_Utility::parseChar(a2, (const icu::UnicodeString *)&v156, 40))
            || (__int128 v48 = sub_18099E5A8(v45, v46, v47),
                __int128 v49 = (void *)sub_18095E3F0(v45),
                icu::UMemory::operator delete(v49),
                !v48))
          {
            int v26 = *(void *)(a1 + 104);
            uint64_t v139 = 65570;
            goto LABEL_243;
          }

          int v147 = v8;
          uint64_t v50 = *(unsigned __int16 *)(a5 + 8);
          __int128 v51 = (__int16)v50;
          uint64_t v52 = v50 >> 5;
          if (v51 >= 0) {
            int v53 = v52;
          }
          else {
            int v53 = *(unsigned int *)(a5 + 12);
          }
          uint64_t v54 = v156;
          uint64_t v155 = L"^(.*+?{}|@";
          icu::UnicodeString::UnicodeString(v162, 1LL, &v155);
          int v160 = sub_18095D2CC(a1, a2, v54, a4, a5, v162, 1LL, a8);
          icu::UnicodeString::~UnicodeString(v55, (icu::UnicodeString *)v162);
          v154[1] = (uint64_t)v155;
          memset((char *)v162 + 8, 0, 56);
          *(void *)&v162[0] = off_18971B688;
          WORD4(v162[0]) = 2;
          int v56 = *(unsigned __int16 *)(a5 + 8);
          __int128 v57 = (__int16)v56;
          __int128 v58 = v56 >> 5;
          if (v57 >= 0) {
            uint64_t v59 = v58;
          }
          else {
            uint64_t v59 = *(unsigned int *)(a5 + 12);
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, _OWORD *))(*(void *)a5 + 24LL))(a5, v53, v59, v162);
          uint64_t v62 = icu::UMemory::operator new(v61, (icu::UMemory *)0x20, v60);
          if (!v62)
          {
            uint64_t v19 = v147;
            sub_18095F4F8(*(void *)(a1 + 104), 7, a2, v147, a8);
            icu::UnicodeString::~UnicodeString(v140, (icu::UnicodeString *)v162);
            goto LABEL_245;
          }

          uint64_t v65 = v62;
          __int128 v144 = (uint64_t)v48;
          uint64_t v66 = icu::UMemory::operator new(v64, (icu::UMemory *)0x60, v63);
          int v67 = (uint64_t)v66;
          if (v66) {
            sub_180991184((uint64_t)v66, (UChar **)v162, *(void *)(*(void *)(a1 + 104) + 96LL));
          }
          sub_1808F78F8(v65, v144, v67);
          sub_1808623BC(a5, v53);
          int v161 = sub_18095E428(*(void *)(a1 + 104), v65, a8);
          icu::UnicodeString::doAppend(a5, (uint64_t)&v161, 0, 1LL);
          icu::UnicodeString::~UnicodeString(v68, (icu::UnicodeString *)v162);
          goto LABEL_178;
        }

        if ((*(_DWORD *)(a1 + 80) & 0x80000000) == 0)
        {
          int v26 = *(void *)(a1 + 104);
          uint64_t v139 = 65551;
          goto LABEL_243;
        }

        int v113 = *(unsigned __int16 *)(a5 + 8);
        int v114 = (__int16)v113;
        LODWORD(v1icu::UVector32::~UVector32(this + 1) = v113 >> 5;
        if (v114 >= 0) {
          uint64_t v11 = v11;
        }
        else {
          uint64_t v11 = *(unsigned int *)(a5 + 12);
        }
        *(_DWORD *)(a1 + 80) = v11;
      }

      else if ((_DWORD)v24 == 123)
      {
        if ((*(_DWORD *)(a1 + 76) & 0x80000000) == 0)
        {
          int v26 = *(void *)(a1 + 104);
          uint64_t v139 = 65549;
          goto LABEL_243;
        }

        unint64_t v107 = *(unsigned __int16 *)(a5 + 8);
        int v108 = (__int16)v107;
        LODWORD(v1icu::UVector32::~UVector32(this + 1) = v107 >> 5;
        if (v108 >= 0) {
          uint64_t v11 = v11;
        }
        else {
          uint64_t v11 = *(unsigned int *)(a5 + 12);
        }
        *(_DWORD *)(a1 + 76) = v11;
      }

      else
      {
        if ((*(_DWORD *)(a1 + 72) & 0x80000000) == 0)
        {
          int v26 = *(void *)(a1 + 104);
          uint64_t v139 = 65550;
          goto LABEL_243;
        }

        signed int v36 = *(unsigned __int16 *)(a5 + 8);
        uint64_t v37 = (__int16)v36;
        LODWORD(v1icu::UVector32::~UVector32(this + 1) = v36 >> 5;
        if (v37 >= 0) {
          uint64_t v11 = v11;
        }
        else {
          uint64_t v11 = *(unsigned int *)(a5 + 12);
        }
        *(_DWORD *)(a1 + 72) = v11;
      }
    }

    __int128 v49 = sub_1809CB614((uint64_t)v52, ++v13);
    if (!v49) {
      goto LABEL_86;
    }
  }

  uint64_t v18 = 0;
  while (1)
  {
    uint64_t v19 = *(void *)(*(void *)(a1 + 1064) + 8LL * (v17 - 1));
    unint64_t v20 = sub_1809CB614((uint64_t)v52, v13 - v17 + v18 + *(_DWORD *)(a1 + 1056));
    uint64_t v21 = *v20;
    uint64_t v22 = sub_1809CACF8(*v20, v19, *(__int16 *)(*(void *)a1 + 14LL));
    if (!v22) {
      break;
    }
    if (v22 < 1) {
      goto LABEL_30;
    }
    if (v22 != 1)
    {
      --v18;
LABEL_30:
      --v17;
      goto LABEL_31;
    }

    ++v18;
LABEL_31:
    if (v17 <= 0)
    {
      int v17 = *(_DWORD *)(a1 + 1056);
      goto LABEL_34;
    }
  }

  if (v21 != 0x7FFFFFFFFFFFFFFFLL)
  {
    LODWORD(v16) = v48;
    unint64_t v15 = v50;
    goto LABEL_78;
  }

  uint64_t v24 = 0;
  uint64_t v44 = v47;
  LODWORD(v16) = v48;
LABEL_90:
  unint64_t v15 = v50;
LABEL_91:
  uint64_t v5 = *(int *)a5 < 1 && v24;
  if (v5) {
    uint64_t v45 = v15;
  }
  else {
    uint64_t v45 = -1;
  }
  if (a3)
  {
    if (v5) {
      uint64_t v46 = v16;
    }
    else {
      uint64_t v46 = -1;
    }
    *a3 = v46;
  }

  if (v44) {
    *uint64_t v44 = v45;
  }
LABEL_19:
  if (v53 != v52) {
    uprv_free(v53);
  }
  return v5;
}

UChar *sub_1808456F8(UChar *src, int32_t srcLength, char *locale)
{
  UErrorCode pErrorCode = U_ZERO_ERROR;
  int32_t v6 = u_strToUpper(0LL, 0, src, srcLength, locale, &pErrorCode);
  int32_t v7 = v6;
  UErrorCode pErrorCode = U_ZERO_ERROR;
  if (v6 <= srcLength) {
    int32_t v8 = srcLength;
  }
  else {
    int32_t v8 = v6;
  }
  uint64_t v9 = (UChar *)uprv_malloc(2LL * v8);
  u_strToUpper(v9, v7, src, srcLength, locale, &pErrorCode);
  if (pErrorCode >= U_ILLEGAL_ARGUMENT_ERROR) {
    u_memcpy(v9, src, srcLength);
  }
  return v9;
}

uint64_t sub_1808457A8(icu::CharString *a1)
{
  v9[8] = *(void **)MEMORY[0x1895F89C0];
  if (!*((_DWORD *)a1 + 14)) {
    return 0LL;
  }
  UErrorCode v8 = U_ZERO_ERROR;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v6, "en_GB");
  if (sub_180845944((uint64_t)a1, v6, v7))
  {
    icu::CharString::truncate((uint64_t)a1, 3);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v4, "001");
    icu::CharString::append(a1, v4, v5, &v8);
  }

  else
  {
    memset(&v9[1], 0, 56);
    v9[0] = (char *)&v9[1] + 5;
    LODWORD(v9[1]) = 40;
    v3[0] = 0LL;
    v3[1] = 0LL;
    icu::CharStringByteSink::CharStringByteSink(v3, (uint64_t)v9);
    ulocimp_getParent(*(char **)a1, (uint64_t)v3, (int *)&v8);
    icu::CharString::operator=((uint64_t)a1, (uint64_t)v9);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v3);
    if (BYTE4(v9[1])) {
      uprv_free(v9[0]);
    }
  }

  return 1LL;
}

uint64_t sub_1808458D0(uint64_t a1, uint64_t a2)
{
  signed int v2 = *(_DWORD *)(a1 + 16);
  signed int v3 = *(_DWORD *)(a2 + 16);
  if (v2 >= v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = v2;
  }
  if ((int)v4 < 1)
  {
LABEL_9:
    BOOL v10 = v2 < v3;
    BOOL v11 = v2 > v3;
    if (v10) {
      return 0xFFFFFFFFLL;
    }
    else {
      return v11;
    }
  }

  else
  {
    int v5 = *(unsigned __int16 **)(a1 + 8);
    int32_t v6 = *(unsigned __int16 **)(a2 + 8);
    while (1)
    {
      unsigned int v8 = *v5++;
      unsigned int v7 = v8;
      unsigned int v9 = *v6++;
      BOOL v10 = v7 > v9;
      if (v7 < v9) {
        return 0xFFFFFFFFLL;
      }
      if (v10) {
        return 1LL;
      }
      if (!--v4) {
        goto LABEL_9;
      }
    }
  }

uint64_t sub_180845930(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

BOOL sub_180845944(uint64_t a1, const void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 56) != a3) {
    return 0LL;
  }
  if (a3) {
    return memcmp(*(const void **)a1, a2, a3) == 0;
  }
  return 1LL;
}

void sub_18084598C(void **a1)
{
}

uint64_t sub_1808459B4(uint64_t a1)
{
  uint64_t result = 0LL;
  int v3 = **(_DWORD **)(a1 + 8);
  uint64_t v4 = &off_189715E10;
  do
  {
    if (v3 == 0x7FFFFFFF || (v3 & ~*((_DWORD *)v4 - 2)) == 0) {
      uint64_t result = (result + 1);
    }
    int v5 = *v4;
    v4 += 2;
  }

  while (v5);
  return result;
}

uint64_t sub_1808459F4(uint64_t a1, _DWORD *a2)
{
  signed int v2 = *(_DWORD **)(a1 + 8);
  uint64_t v3 = v2[1];
  else {
    uint64_t v4 = v3;
  }
  int v5 = &(&off_189715E00)[2 * v3 + 1];
  while (v4 != v3)
  {
    int32_t v6 = v5;
    v2[1] = v3 + 1;
    if (*v2 != 0x7FFFFFFF)
    {
      v5 += 2;
      ++v3;
      if ((*v2 & ~*v6) != 0) {
        continue;
      }
    }

    if (a2) {
      *a2 = 3;
    }
    return *((void *)v6 - 1);
  }

  uint64_t result = 0LL;
  if (a2) {
    *a2 = 0;
  }
  return result;
}

uint64_t sub_180845A74(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 8) + 4LL) = 0;
  return result;
}

uint64_t sub_180845A80( uint64_t a1, const char *DataDirectory, const char *a3, char *__s, const char *a5, char a6, UErrorCode *a7)
{
  *(void *)(a1 + 24) = 0LL;
  uint64_t v13 = a1 + 24;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = a1 + 61;
  int v14 = (icu::CharString *)(a1 + 48);
  *(_DWORD *)(a1 + 56) = 40;
  *(_WORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = a1 + 125;
  *(_DWORD *)(a1 + 120) = 40;
  *(_WORD *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = a1 + 189;
  unint64_t v15 = (icu::CharString *)(a1 + 176);
  *(_DWORD *)(a1 + 184) = 40;
  *(_WORD *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  if (!DataDirectory) {
    DataDirectory = u_getDataDirectory();
  }
  *(void *)a1 = DataDirectory;
  if (a3)
  {
    int v16 = icu::CharString::append(v15, 47, a7);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v24, a3);
    icu::CharString::append(v16, v24, v25, a7);
  }

  int v17 = strrchr(__s, 47);
  if (v17) {
    uint64_t v18 = v17 + 1;
  }
  else {
    uint64_t v18 = __s;
  }
  *(void *)(a1 + 16) = v18;
  *(_DWORD *)(a1 + 40) = strlen(v18);
  uint64_t v19 = (icu::CharString *)a1;
  if (v18 != __s)
  {
    icu::CharString::append(v14, __s, (_DWORD)v18 - (_DWORD)__s, a7);
    uint64_t v19 = v14;
  }

  *(void *)(a1 + 8) = *(void *)v19;
  if (a5) {
    unint64_t v20 = a5;
  }
  else {
    unint64_t v20 = "";
  }
  icu::StringPiece::StringPiece((icu::StringPiece *)&v22, v20);
  *(void *)uint64_t v13 = v22;
  *(_DWORD *)(v13 + 8) = v23;
  *(_BYTE *)(a1 + 240) = a6;
  return a1;
}

uint64_t sub_180845BFC(uint64_t a1, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    int v5 = (icu::CharString *)(a1 + 112);
    while (1)
    {
      int32_t v6 = *(const char **)(a1 + 8);
      if (!v6) {
        return 0LL;
      }
      unsigned int v7 = strchr(*(const char **)(a1 + 8), 58);
      *(void *)(a1 + 8) = v7;
      if (!v7) {
        goto LABEL_10;
      }
      size_t v8 = v7 - v6;
      *(void *)(a1 + 8) = v7 + 1;
      if ((_DWORD)v7 == (_DWORD)v6) {
        goto LABEL_22;
      }
LABEL_11:
      *(_DWORD *)(a1 + 168) = 0;
      **(_BYTE **)(a1 + 112) = 0;
      icu::CharString::append(v5, v6, v8, a2);
      unsigned int v9 = *(const char **)(a1 + 112);
      BOOL v10 = strrchr(v9, 47);
      if (v10) {
        BOOL v11 = v10 + 1;
      }
      else {
        BOOL v11 = v9;
      }
      if ((int)v8 >= 4)
      {
        if (*(_BYTE *)(a1 + 240))
        {
          if (!strncmp(&v9[(v8 - 4)], *(const char **)(a1 + 24), 4uLL))
          {
            unsigned int v12 = *(_DWORD *)(a1 + 40);
          }
        }
      }

      if ((int)v8 < 4 || strncmp(&v9[(v8 - 4)], ".dat", 4uLL))
      {
        int v13 = *(_DWORD *)(a1 + 232);
        if (v13)
        {
          if ((int)v8 > v13)
          {
            int v14 = *(_DWORD *)(a1 + 232);
          }
        }

        icu::CharString::append(v5, 47, a2);
LABEL_29:
        icu::CharString::append(v5, (const char *)(*(void *)(a1 + 176) + 1LL), *(_DWORD *)(a1 + 232) - 1, a2);
        int v15 = *(_DWORD *)(a1 + 32);
        if (v15)
        {
          if (v15 >= 5) {
            icu::CharString::ensureEndsWithFileSeparator(v5, a2);
          }
          icu::CharString::append(v5, *(const char **)(a1 + 24), *(_DWORD *)(a1 + 32), a2);
        }

        return *(void *)v5;
      }

void udata_setCommonData(uint64_t a1, int *a2)
{
  if (a2 && *a2 <= 0)
  {
    if (a1)
    {
      uint64_t v5 = 0LL;
      memset(v4, 0, sizeof(v4));
      sub_180847480((uint64_t)v4);
      sub_18084754C((uint64_t)v4, a1);
      sub_180820D60(v4, a2);
      if (*a2 <= 0) {
        sub_180845EB0((uint64_t)v4, 1, a2);
      }
    }

    else
    {
      *a2 = 1;
    }
  }

void sub_180845EB0(uint64_t a1, int a2, int *a3)
{
  NewInstance = UDataMemory_createNewInstance(a3);
  if (*a3 <= 0)
  {
    unsigned int v7 = NewInstance;
    sub_18084749C((uint64_t)NewInstance, a1);
    umtx_lock(0LL);
    uint64_t v8 = 0LL;
    while (1)
    {
      uint64_t v9 = qword_18C449168[v8];
      if (!v9) {
        break;
      }
      if (*(void *)(v9 + 8) != *(void *)(a1 + 8) && ++v8 != 10) {
        continue;
      }
      goto LABEL_8;
    }

    qword_18C449168[v8] = (uint64_t)v7;
LABEL_8:
    umtx_unlock(0LL);
    if (a2 && (_DWORD)v8 == 10) {
      *a3 = -127;
    }
    if (v9) {
      uprv_free(v7);
    }
    else {
      sub_180820C94(0x18u, (uint64_t)sub_180846B74);
    }
  }

void **udata_setAppData(void **result, uint64_t a2, int *a3)
{
  if (a3 && *a3 <= 0)
  {
    if (a2)
    {
      uint64_t v5 = (const char *)result;
      uint64_t v7 = 0LL;
      memset(v6, 0, sizeof(v6));
      sub_180847480((uint64_t)v6);
      sub_18084754C((uint64_t)v6, a2);
      sub_180820D60(v6, a3);
      return sub_180846030(v5, (uint64_t)v6, a3);
    }

    else
    {
      *a3 = 1;
    }
  }

  return result;
}

void **sub_180846030(const char *a1, uint64_t a2, int *a3)
{
  int v16 = 0;
  uint64_t v6 = sub_180846BE4(a3);
  if (*a3 > 0) {
    return 0LL;
  }
  uint64_t v7 = v6;
  uint64_t result = (void **)uprv_malloc(0x10uLL);
  if (!result)
  {
    *a3 = 7;
    return result;
  }

  uint64_t v9 = result;
  NewInstance = UDataMemory_createNewInstance(a3);
  v9[1] = NewInstance;
  if (*a3 >= 1) {
    goto LABEL_4;
  }
  sub_18084749C((uint64_t)NewInstance, a2);
  BOOL v11 = strrchr(a1, 47);
  if (v11) {
    unsigned int v12 = v11 + 1;
  }
  else {
    unsigned int v12 = a1;
  }
  int v13 = strlen(v12);
  int v14 = (char *)uprv_malloc(v13 + 1);
  *uint64_t v9 = v14;
  if (!v14)
  {
    *a3 = 7;
    uprv_free(v9[1]);
LABEL_4:
    uprv_free(v9);
    return 0LL;
  }

  strcpy(v14, v12);
  umtx_lock(0LL);
  uint64_t v15 = uhash_get(v7, (uint64_t)a1);
  if (v15) {
    int v16 = -127;
  }
  else {
    uhash_put(v7, (uint64_t)*v9, (uint64_t)v9, &v16);
  }
  umtx_unlock(0LL);
  if (v16 != -127 && v16 < 1) {
    return (void **)v9[1];
  }
  *a3 = v16;
  uprv_free(*v9);
  uprv_free(v9[1]);
  uprv_free(v9);
  if (v15) {
    return *(void ***)(v15 + 8);
  }
  return 0LL;
}

void *udata_open(char *a1, const char *a2, const char *a3, UErrorCode *a4)
{
  if (a4 && *(int *)a4 <= 0)
  {
    if (a3 && *a3) {
      return sub_1808461E0(a1, a2, a3, 0LL, 0LL, a4);
    }
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return 0LL;
}

void *sub_1808461E0( char *__s1, const char *a2, const char *a3, unsigned int (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5, UErrorCode *a6)
{
  uint64_t v9 = __s1;
  uint64_t v91 = *MEMORY[0x1895F89C0];
  int v81 = 0;
  if (!__s1 || !strcmp(__s1, "ICUDATA") || !strncmp(v9, "icudt74l-", 9uLL) || !strncmp(v9, "ICUDATA-", 8uLL))
  {
    char v11 = 0;
    int v10 = 1;
  }

  else
  {
    int v10 = 0;
    char v11 = 1;
  }

  memset(&v89[1], 0, 48);
  uint64_t v90 = 0LL;
  v89[0] = (char *)&v89[1] + 5;
  LODWORD(v89[1]) = 40;
  memset(&v88[1], 0, 56);
  v88[0] = (char *)&v88[1] + 5;
  LODWORD(v88[1]) = 40;
  memset(&v86[1], 0, 48);
  v87[1] = 0;
  v86[0] = (char *)&v86[1] + 5;
  LODWORD(v86[1]) = 40;
  v87[0] = 0;
  memset(&v84[1], 0, 48);
  v85[1] = 0;
  v84[0] = (char *)&v84[1] + 5;
  LODWORD(v84[1]) = 40;
  v85[0] = 0;
  if (!v9)
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v79, "icudt74l");
    int v16 = v79;
    int v17 = v80;
LABEL_23:
    icu::CharString::append((icu::CharString *)v86, v16, v17, a6);
    goto LABEL_24;
  }

  unsigned int v12 = strrchr(v9, 47);
  int v13 = strchr(v9, 47);
  if (uprv_pathIsAbsolute((unsigned __int8 *)v9) || v12 != v13)
  {
    if (v12)
    {
      icu::StringPiece::StringPiece((icu::StringPiece *)&v77, v12 + 1);
      int v16 = v77;
      int v17 = v78;
    }

    else
    {
      icu::StringPiece::StringPiece((icu::StringPiece *)&v75, v9);
      int v16 = v75;
      int v17 = v76;
    }

    goto LABEL_23;
  }

  int v14 = strchr(v9, 45);
  if (!v14)
  {
    if ((v11 & 1) != 0)
    {
      icu::StringPiece::StringPiece((icu::StringPiece *)&v67, v9);
      int v16 = v67;
      int v17 = v68;
    }

    else
    {
      icu::StringPiece::StringPiece((icu::StringPiece *)&v69, "icudt74l");
      int v16 = v69;
      int v17 = v70;
    }

    goto LABEL_23;
  }

  int v15 = (int)v14;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v73, v14 + 1);
  icu::CharString::append((icu::CharString *)v84, v73, v74, a6);
  if ((v11 & 1) == 0)
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v71, "icudt74l");
    int v16 = v71;
    int v17 = v72;
    goto LABEL_23;
  }

  icu::CharString::append((icu::CharString *)v86, v9, v15 - (_DWORD)v9, a6);
  if (!v12) {
    uint64_t v9 = v86[0];
  }
LABEL_24:
  icu::CharString::append((icu::CharString *)v89, v86[0], v87[0], a6);
  icu::CharString::append((icu::CharString *)v88, v86[0], v87[0], a6);
  uint64_t v18 = (int)v90;
  if (v85[0])
  {
    uint64_t v19 = icu::CharString::append((icu::CharString *)v89, 47, a6);
    icu::CharString::append(v19, v84[0], v85[0], a6);
    unint64_t v20 = icu::CharString::append((icu::CharString *)v88, 47, a6);
    icu::CharString::append(v20, v84[0], v85[0], a6);
  }

  uint64_t v21 = icu::CharString::append((icu::CharString *)v89, 47, a6);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v65, a3);
  icu::CharString::append(v21, v65, v66, a6);
  uint64_t v22 = icu::CharString::append((icu::CharString *)v88, 47, a6);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v63, a3);
  icu::CharString::append(v22, v63, v64, a6);
  if (a2 && *a2)
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v61, ".");
    int v23 = icu::CharString::append((icu::CharString *)v89, v61, v62, a6);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v59, a2);
    icu::CharString::append(v23, v59, v60, a6);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v57, ".");
    uint64_t v24 = icu::CharString::append((icu::CharString *)v88, v57, v58, a6);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v55, a2);
    icu::CharString::append(v24, v55, v56, a6);
  }

  int v25 = (char *)v88[0] + v18 + 1;
  if (!v9) {
    uint64_t v9 = "icudt74l";
  }
  DataDirectory = u_getDataDirectory();
  if (v10
    && !strcmp(a2, "res")
    && (!strcmp(a3, "zoneinfo64")
     || !strcmp(a3, "timezoneTypes")
     || !strcmp(a3, "windowsZones")
     || !strcmp(a3, "metaZones"))
    && (TimeZoneFilesDirectory = u_getTimeZoneFilesDirectory(a6), *TimeZoneFilesDirectory))
  {
    UErrorCode v54 = U_ZERO_ERROR;
    memset(&v83[1], 0, 56);
    v83[0] = (char *)&v83[1] + 5;
    LODWORD(v83[1]) = 40;
    __int128 v39 = TimeZoneFilesDirectory;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v52, TimeZoneFilesDirectory);
    icu::CharString::append((icu::CharString *)v83, v52, v53, &v54);
    uint64_t v31 = icu::CharString::append((icu::CharString *)v83, 47, &v54);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v50, "icutz44l");
    icu::CharString::append(v31, v50, v51, &v54);
    memset(&v82[1], 0, 56);
    v82[0] = (char *)&v82[1] + 5;
    LODWORD(v82[1]) = 40;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v48, "icutz44l");
    icu::CharString::append((icu::CharString *)v82, v48, v49, &v54);
    if (v85[0])
    {
      int v32 = icu::CharString::append((icu::CharString *)v82, 47, &v54);
      icu::CharString::append(v32, v84[0], v85[0], &v54);
    }

    unint64_t v33 = icu::CharString::append((icu::CharString *)v82, 47, &v54);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v46, a3);
    icu::CharString::append(v33, v46, v47, &v54);
    if (a2 && *a2)
    {
      icu::StringPiece::StringPiece((icu::StringPiece *)&v44, ".");
      int v34 = icu::CharString::append((icu::CharString *)v82, v44, v45, &v54);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v42, a2);
      icu::CharString::append(v34, v42, v43, &v54);
    }

    uint64_t v35 = sub_180846CE4(0, (uint64_t)v82[0], (char *)v83[0], (uint64_t)a2, (uint64_t)a3, a4, a5, &v81, (int *)&v54);
    if (v54 > U_ZERO_ERROR || (v27 = v35, BOOL v36 = 0, !v35))
    {
      int v27 = sub_180846EE8("", v39, v25, "", (uint64_t)a2, (uint64_t)a3, a4, a5, &v81, a6);
      if (v27) {
        BOOL v36 = 0;
      }
      else {
        BOOL v36 = *a6 < U_ILLEGAL_ARGUMENT_ERROR;
      }
    }

    if (BYTE4(v82[1])) {
      uprv_free(v82[0]);
    }
    if (BYTE4(v83[1])) {
      uprv_free(v83[0]);
    }
    if (!v36) {
      goto LABEL_81;
    }
  }

  else
  {
    int v27 = 0LL;
  }

  unsigned int v28 = dword_18C534948;
  if (dword_18C534948 == 2)
  {
    int v27 = sub_180846CE4(v10, (uint64_t)v89[0], v9, (uint64_t)a2, (uint64_t)a3, a4, a5, &v81, (int *)a6);
    if (v27) {
      goto LABEL_81;
    }
    int v27 = 0LL;
    unsigned int v28 = dword_18C534948;
  }

  if ((v28 & 0xFFFFFFFD) == 0)
  {
    if (DataDirectory)
    {
      if (*DataDirectory) {
        char v29 = 0;
      }
      else {
        char v29 = v10;
      }
      if ((v29 & 1) != 0) {
        goto LABEL_39;
      }
    }

    else if ((v10 & 1) != 0)
    {
      goto LABEL_39;
    }

    int v27 = sub_180846EE8(v86[0], DataDirectory, v25, v9, (uint64_t)a2, (uint64_t)a3, a4, a5, &v81, a6);
    if (v27) {
      goto LABEL_81;
    }
    int v27 = 0LL;
    unsigned int v28 = dword_18C534948;
  }

void *udata_openChoice( char *a1, const char *a2, const char *a3, unsigned int (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5, UErrorCode *a6)
{
  if (a6 && *(int *)a6 <= 0)
  {
    if (a3 && a4 && *a3) {
      return sub_1808461E0(a1, a2, a3, a4, a5, a6);
    }
    *a6 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return 0LL;
}

void *udata_getInfo(void *result, _WORD *a2)
{
  if (a2)
  {
    if (result && (uint64_t v3 = (_BYTE *)result[1]) != 0LL)
    {
      unsigned int v4 = sub_180820D34(v3 + 4);
      unsigned int v5 = (unsigned __int16)*a2;
      if (v5 > v4)
      {
        *a2 = v4;
        unsigned int v5 = v4;
      }

      uint64_t v6 = a2 + 1;
      uint64_t result = memcpy(v6, v3 + 6, v5 - 2LL);
      if (v3[8]) {
        *uint64_t v6 = bswap32(*((unsigned __int16 *)v3 + 3)) >> 16;
      }
    }

    else
    {
      *a2 = 0;
    }
  }

  return result;
}

uint64_t udata_setFileAccess(uint64_t result)
{
  dword_18C534948 = result;
  return result;
}

uint64_t sub_180846B74()
{
  if (qword_18C4491B8)
  {
    uhash_close((_BYTE *)qword_18C4491B8);
    qword_18C4491B8 = 0LL;
  }

  uint64_t v0 = 0LL;
  atomic_store(0, &dword_18C4491C0);
  do
  {
    unint64_t v1 = (_OWORD *)qword_18C449168[v0];
    if (!v1) {
      break;
    }
    udata_close(v1);
    qword_18C449168[v0++] = 0LL;
  }

  while (v0 != 10);
  atomic_store(0, (unsigned int *)&unk_18C4491C8);
  return 1LL;
}

uint64_t sub_180846BE4(int *a1)
{
  if (*a1 <= 0)
  {
    unsigned int v2 = atomic_load(&dword_18C4491C0);
    if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_18C4491C0))
    {
      if (dword_18C4491C4 >= 1) {
        *a1 = dword_18C4491C4;
      }
    }

    else
    {
      uint64_t v3 = uhash_open((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0LL, a1);
      qword_18C4491B8 = (uint64_t)v3;
      int v4 = *a1;
      if (*a1 <= 0)
      {
        uhash_setValueDeleter((uint64_t)v3, (uint64_t)sub_180846CB4);
        sub_180820C94(0x18u, (uint64_t)sub_180846B74);
        int v4 = *a1;
      }

      dword_18C4491C4 = v4;
      icu::umtx_initImplPostInit(&dword_18C4491C0);
    }
  }

  return qword_18C4491B8;
}

void sub_180846CB4(uint64_t a1)
{
}

void *sub_180846CE4( int a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, unsigned int (*a6)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a7, int *a8, int *a9)
{
  int v13 = 0;
  if (a1) {
    unsigned int v14 = 0;
  }
  else {
    unsigned int v14 = -1;
  }
  while (1)
  {
    int v15 = (uint64_t (***)(void, void, void, void))sub_180847078(a3, v14, a8);
    int v16 = v15;
    int v17 = *a8;
    if (*a8 <= 0 && v15 != 0LL) {
      break;
    }
LABEL_12:
    if (v17 == 7)
    {
      uint64_t result = 0LL;
      *a9 = 7;
      return result;
    }

    if (!a1) {
      return 0LL;
    }
    if (v16)
    {
      ++v14;
    }

    else
    {
      if (v13) {
        return 0LL;
      }
      uint64_t v33 = 0LL;
      __int128 v32 = 0u;
      memset(v31, 0, sizeof(v31));
      if (!atomic_load((unsigned int *)&unk_18C4491C8))
      {
        uint64_t v22 = sub_180847078("icudt74l", 0xFFFFFFFF, a8);
        sub_180847480((uint64_t)v31);
        if (v22)
        {
          sub_18084749C((uint64_t)v31, v22);
          __int128 v32 = 0uLL;
          sub_180845EB0((uint64_t)v31, 0, a8);
        }

        atomic_store(1u, (unsigned int *)&unk_18C4491C8);
      }

      uint64_t v23 = sub_1808473AC("icudt74l", a8);
      if (*a8 > 0) {
        return 0LL;
      }
      uint64_t v24 = v23;
      if (!v23) {
        return 0LL;
      }
      umtx_lock(0LL);
      uint64_t v25 = 0LL;
      while (1)
      {
        uint64_t v26 = qword_18C449168[v25];
        if (v26)
        {
          if (*(void *)(v26 + 8) == *(void *)(v24 + 8)) {
            break;
          }
        }

        if (++v25 == 10)
        {
          umtx_unlock(0LL);
          return 0LL;
        }
      }

      umtx_unlock(0LL);
      int v13 = 1;
    }
  }

  LODWORD(v31[0]) = 0;
  uint64_t v19 = (**v15)(v15, a2, v31, a8);
  if (!v19) {
    goto LABEL_11;
  }
  uint64_t result = sub_180847308(v19, a6, a7, a4, a5, a8, a9);
  if (*a9 > 0) {
    return 0LL;
  }
  if (!result)
  {
LABEL_11:
    int v17 = *a8;
    goto LABEL_12;
  }

  *((_DWORD *)result + 12) = v31[0];
  return result;
}

void *sub_180846EE8( const char *a1, const char *a2, const char *a3, char *a4, uint64_t a5, uint64_t a6, unsigned int (*a7)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a8, _DWORD *a9, UErrorCode *a10)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  uint64_t v21 = 0LL;
  __int128 v20 = 0u;
  memset(v19, 0, sizeof(v19));
  uint64_t v35 = 0LL;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  memset(v22, 0, sizeof(v22));
  sub_180845A80((uint64_t)v22, a2, a1, a4, a3, 0, a10);
  uint64_t v14 = sub_180845BFC((uint64_t)v22, a10);
  if (!v14)
  {
LABEL_8:
    int v17 = 0LL;
    goto LABEL_9;
  }

  int v15 = (const char *)v14;
  while (!uprv_mapFile(v19, v15, (int *)a10))
  {
LABEL_7:
    int v15 = (const char *)sub_180845BFC((uint64_t)v22, a10);
    if (!v15) {
      goto LABEL_8;
    }
  }

  int v16 = sub_180847308(*((uint64_t *)&v19[0] + 1), a7, a8, a5, a6, a9, (int *)a10);
  if (!v16)
  {
    udata_close(v19);
    *a9 = 3;
    goto LABEL_7;
  }

  int v17 = v16;
  *((_OWORD *)v16 + 2) = v20;
LABEL_9:
  if (BYTE12(v31)) {
    uprv_free((void *)v31);
  }
  if (BYTE12(v27)) {
    uprv_free((void *)v27);
  }
  if (BYTE12(v23)) {
    uprv_free((void *)v23);
  }
  return v17;
}

uint64_t sub_180847078(char *a1, unsigned int a2, int *a3)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  if (*a3 > 0) {
    return 0LL;
  }
  uint64_t v15 = 0LL;
  memset(v14, 0, sizeof(v14));
  sub_180847480((uint64_t)v14);
  if ((a2 & 0x80000000) != 0)
  {
    int v10 = strrchr(a1, 47);
    if (v10) {
      char v11 = v10 + 1;
    }
    else {
      char v11 = a1;
    }
    if (!*v11)
    {
      if (*a3 <= 0)
      {
        uint64_t v3 = 0LL;
        *a3 = 4;
        return v3;
      }

      return 0LL;
    }

    uint64_t v3 = sub_1808473AC(v11, a3);
    if (v3) {
      return v3;
    }
    if (*a3 > 0) {
      return 0LL;
    }
    uint64_t v31 = 0LL;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v16 = 0u;
    DataDirectory = u_getDataDirectory();
    sub_180845A80((uint64_t)&v16, DataDirectory, v11, a1, ".dat", 1, (UErrorCode *)a3);
    while (!sub_180847660((uint64_t)v14))
    {
      int v13 = (const char *)sub_180845BFC((uint64_t)&v16, (UErrorCode *)a3);
      if (!v13) {
        break;
      }
      uprv_mapFile(v14, v13, a3);
    }

    if (*a3 <= 0)
    {
      if (sub_180847660((uint64_t)v14))
      {
        sub_180820D60(v14, a3);
        uint64_t v3 = (uint64_t)sub_180846030(v11, (uint64_t)v14, a3);
      }

      else
      {
        uint64_t v3 = 0LL;
        *a3 = 4;
      }
    }

    else
    {
      uint64_t v3 = 0LL;
    }

    sub_180847430((uint64_t)&v16);
  }

  else
  {
    if (a2 > 9) {
      return 0LL;
    }
    umtx_lock(0LL);
    uint64_t v3 = qword_18C449168[a2];
    if (!v3)
    {
      if (a2)
      {
        uint64_t v8 = qword_18C449168;
        uint64_t v9 = a2;
        while (*(char **)(*v8 + 8) != " ")
        {
          ++v8;
          if (!--v9) {
            goto LABEL_11;
          }
        }

        uint64_t v3 = 0LL;
      }

      else
      {
LABEL_11:
        umtx_unlock(0LL);
        *(void *)&__int128 v19 = 0LL;
        __int128 v17 = 0u;
        __int128 v18 = 0u;
        __int128 v16 = 0u;
        sub_180847480((uint64_t)&v16);
        sub_18084754C((uint64_t)&v16, (uint64_t)" ");
        sub_180820D60(&v16, a3);
        sub_180845EB0((uint64_t)&v16, 0, a3);
        umtx_lock(0LL);
        uint64_t v3 = qword_18C449168[a2];
      }
    }

    umtx_unlock(0LL);
  }

  return v3;
}

void *sub_180847308( uint64_t a1, unsigned int (*a2)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, int *a7)
{
  if (*a7 > 0) {
    return 0LL;
  }
  if (*(unsigned __int8 *)(a1 + 2) == 218 && *(_BYTE *)(a1 + 3) == 39 && (!a2 || a2(a3, a4, a5, a1 + 4)))
  {
    uint64_t result = UDataMemory_createNewInstance(a7);
    if (*a7 > 0) {
      return 0LL;
    }
    result[1] = a1;
  }

  else
  {
    uint64_t result = 0LL;
    *a6 = 3;
  }

  return result;
}

uint64_t sub_1808473AC(const char *a1, int *a2)
{
  uint64_t v4 = sub_180846BE4(a2);
  if (*a2 > 0) {
    return 0LL;
  }
  uint64_t v6 = v4;
  uint64_t v7 = strrchr(a1, 47);
  if (v7) {
    a1 = v7 + 1;
  }
  umtx_lock(0LL);
  uint64_t v8 = uhash_get(v6, (uint64_t)a1);
  umtx_unlock(0LL);
  if (v8) {
    return *(void *)(v8 + 8);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_180847430(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 188)) {
    uprv_free(*(void **)(a1 + 176));
  }
  if (*(_BYTE *)(a1 + 124)) {
    uprv_free(*(void **)(a1 + 112));
  }
  if (*(_BYTE *)(a1 + 60)) {
    uprv_free(*(void **)(a1 + 48));
  }
  return a1;
}

double sub_180847480(uint64_t a1)
{
  *(void *)(a1 + 48) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 48) = -1;
  return result;
}

__n128 sub_18084749C(uint64_t a1, uint64_t a2)
{
  char v2 = *(_BYTE *)(a1 + 24);
  __int128 v4 = *(_OWORD *)(a2 + 16);
  __n128 result = *(__n128 *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 48) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 24) = v2;
  return result;
}

void *UDataMemory_createNewInstance(int *a1)
{
  if (*a1 > 0) {
    return 0LL;
  }
  __n128 result = uprv_malloc(0x38uLL);
  if (result)
  {
    result[6] = 0LL;
    *((_OWORD *)result + icu::UVector32::~UVector32(this + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *((_DWORD *)result + 12) = -1;
    *((_BYTE *)result + 24) = 1;
  }

  else
  {
    *a1 = 7;
  }

  return result;
}

uint64_t sub_180847528(uint64_t result)
{
  return result;
}

uint64_t sub_18084754C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = a2;
  return result;
}

double udata_close(_OWORD *a1)
{
  if (a1)
  {
    sub_180855938((uint64_t)a1);
    if (*((_BYTE *)a1 + 24))
    {
      uprv_free(a1);
    }

    else
    {
      *((void *)a1 + 6) = 0LL;
      double result = 0.0;
      a1[1] = 0u;
      a1[2] = 0u;
      *a1 = 0u;
      *((_DWORD *)a1 + 12) = -1;
    }
  }

  return result;
}

uint64_t udata_getMemory(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 8);
    if (v1) {
      return v1 + sub_180820D08(*(_BYTE **)(result + 8));
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t udata_getLength(uint64_t a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  char v2 = *(_BYTE **)(a1 + 8);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  int v3 = *(_DWORD *)(a1 + 48);
  if (v3 < 0) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v3 - sub_180820D08(v2);
  }
}

uint64_t udata_getRawMemory(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t result = *(void *)(a1 + 8);
  if (!result) {
    return 0LL;
  }
  return result;
}

BOOL sub_180847660(uint64_t a1)
{
  return *(void *)(a1 + 8) != 0LL;
}

uint64_t udata_readInt16(uint64_t a1, unsigned __int16 a2)
{
  return (*(__int16 (**)(void))(a1 + 8))(a2);
}

uint64_t udata_readInt32(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 16))(a2);
}

uint64_t udata_swapInvStringBlock(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int *a5)
{
  if (!a5) {
    return 0LL;
  }
  if (*a5 > 0) {
    return 0LL;
  }
  if (a1 && a2 && (a3 & 0x80000000) == 0 && (!a3 || a4))
  {
    uint64_t v10 = a3;
    LODWORD(v1icu::UVector32::~UVector32(this + 1) = a3 + 1;
    while (v10 >= 1)
    {
      int v12 = *(unsigned __int8 *)(a2 + v10 - 1);
      uint64_t v11 = (v11 - 1);
      --v10;
      if (!v12) {
        goto LABEL_16;
      }
    }

    uint64_t v11 = 0LL;
LABEL_16:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(a1 + 72))(a1, a2, v11, a4, a5);
    if (*a5 <= 0) {
      return a3;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
    *a5 = 1;
  }

  return result;
}

uint64_t udata_printError( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(void *)(result + 80)) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t *))(result + 80))(*(void *)(result + 88), a2, &a9);
  }
  return result;
}

uint64_t udata_swapDataHeader( uint64_t a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a5 || *a5 > 0) {
    return 0LL;
  }
  if (!a1 || !a2 || (int v12 = a3, (int)a3 < -1) || (int)a3 >= 1 && !a4)
  {
    uint64_t v9 = 0LL;
    int v14 = 1;
LABEL_21:
    *a5 = v14;
    return v9;
  }

  if (a3 < 0x18
    || *((unsigned __int8 *)a2 + 2) != 218
    || *((_BYTE *)a2 + 3) != 39
    || *((_BYTE *)a2 + 10) != 2)
  {
    udata_printError( a1,  (uint64_t)"udata_swapDataHeader(): initial bytes do not look like ICU data\n",  a3,  (uint64_t)a4,  (uint64_t)a5,  a6,  a7,  a8,  v27);
    uint64_t v9 = 0LL;
    int v14 = 16;
    goto LABEL_21;
  }

  unsigned int v15 = (*(uint64_t (**)(void))(a1 + 8))(*a2);
  unsigned int v16 = (*(uint64_t (**)(void))(a1 + 8))(a2[2]);
  uint64_t v9 = v15;
  if (v15 < 0x18 || v16 < 0x14 || (unint64_t v23 = v16 + 4LL, v23 > v15) || (v12 & 0x80000000) == 0 && (int)v15 > v12)
  {
    udata_printError( a1,  (uint64_t)"udata_swapDataHeader(): header size mismatch - headerSize %d infoSize %d length %d\n",  v17,  v18,  v19,  v20,  v21,  v22,  v15);
    uint64_t v9 = 0LL;
    int v14 = 8;
    goto LABEL_21;
  }

  if (v12 >= 1)
  {
    if (a2 != a4) {
      memcpy(a4, a2, v15);
    }
    a4[4] = *(_WORD *)(a1 + 2);
    (*(void (**)(uint64_t, unsigned __int16 *, uint64_t, unsigned __int16 *, int *))(a1 + 48))( a1,  a2,  2LL,  a4,  a5);
    (*(void (**)(uint64_t, unsigned __int16 *, uint64_t, unsigned __int16 *, int *))(a1 + 48))( a1,  a2 + 2,  4LL,  a4 + 2,  a5);
    uint64_t v25 = v15 - (unsigned __int16)v23;
    if ((int)v25 >= 1)
    {
      for (uint64_t i = 0LL; i != v25; ++i)
      {
      }
    }

    (*(void (**)(uint64_t))(a1 + 72))(a1);
  }

  return v9;
}

_OWORD *udata_openSwapper(int a1, unsigned int a2, int a3, int a4, int *a5)
{
  if (!a5) {
    return 0LL;
  }
  if (*a5 > 0) {
    return 0LL;
  }
  if ((a4 | a2) >= 2)
  {
    uint64_t result = 0LL;
    int v22 = 1;
LABEL_27:
    *a5 = v22;
    return result;
  }

  uint64_t result = uprv_malloc(0x60uLL);
  if (!result)
  {
    int v22 = 7;
    goto LABEL_27;
  }

  uint64_t v11 = sub_180847B70;
  int v12 = sub_18084ABD8;
  if (!a1) {
    uint64_t v11 = (uint64_t (*))nullsub_19;
  }
  int v13 = (uint64_t (*))nullsub_20;
  if (a1) {
    int v13 = sub_180847B7C;
  }
  int v14 = sub_180847B8C;
  if (!a3) {
    int v14 = sub_180847B84;
  }
  unsigned int v15 = sub_180847BA0;
  if (!a3) {
    unsigned int v15 = sub_180847B98;
  }
  if (!a4) {
    int v12 = sub_18084AAE0;
  }
  _OWORD *result = 0u;
  result[1] = 0u;
  *(_BYTE *)uint64_t result = a1;
  *((_BYTE *)result + 2) = a3;
  result[2] = 0u;
  result[3] = 0u;
  result[4] = 0u;
  result[5] = 0u;
  *((_BYTE *)result + icu::UVector32::~UVector32(this + 1) = a2;
  *((_BYTE *)result + 3) = a4;
  *((void *)result + icu::UVector32::~UVector32(this + 1) = v11;
  *((void *)result + 2) = v13;
  unsigned int v16 = sub_180847D10;
  *((void *)result + 4) = v14;
  *((void *)result + 5) = v15;
  *((void *)result + 3) = v12;
  if (a1 == a3) {
    unsigned int v16 = sub_180847BAC;
  }
  uint64_t v17 = sub_180847C20;
  if (a1 != a3) {
    uint64_t v17 = sub_180847D80;
  }
  *((void *)result + 6) = v16;
  *((void *)result + 7) = v17;
  uint64_t v18 = sub_180847C98;
  if (a1 != a3) {
    uint64_t v18 = sub_180847DF0;
  }
  *((void *)result + 8) = v18;
  if (a2)
  {
    uint64_t v19 = sub_18084A91C;
    uint64_t v20 = sub_18084A9F4;
    BOOL v21 = a4 == 1;
  }

  else
  {
    uint64_t v19 = uprv_ebcdicFromAscii;
    uint64_t v20 = sub_18084A838;
    BOOL v21 = a4 == 0;
  }

  if (v21) {
    uint64_t v19 = v20;
  }
  *((void *)result + 9) = v19;
  return result;
}

uint64_t sub_180847B70(unsigned int a1)
{
  return __rev16(a1);
}

uint64_t sub_180847B7C(unsigned int a1)
{
  return bswap32(a1);
}

_WORD *sub_180847B84(_WORD *result, __int16 a2)
{
  _OWORD *result = a2;
  return result;
}

_WORD *sub_180847B8C(_WORD *result, unsigned int a2)
{
  _OWORD *result = __rev16(a2);
  return result;
}

_DWORD *sub_180847B98(_DWORD *result, int a2)
{
  _OWORD *result = a2;
  return result;
}

_DWORD *sub_180847BA0(_DWORD *result, unsigned int a2)
{
  _OWORD *result = bswap32(a2);
  return result;
}

size_t sub_180847BAC(uint64_t a1, const void *a2, size_t __n, void *__dst, int *a5)
{
  if (!a5 || *a5 > 0) {
    return 0LL;
  }
  if (a1 && a2 && (size_t v5 = __n, (__n & 0x80000000) == 0) && (__n & 1) == 0 && __dst)
  {
    if ((_DWORD)__n && a2 != __dst) {
      memcpy(__dst, a2, __n);
    }
  }

  else
  {
    size_t v5 = 0LL;
    *a5 = 1;
  }

  return v5;
}

size_t sub_180847C20(uint64_t a1, const void *a2, size_t __n, void *__dst, int *a5)
{
  if (!a5 || *a5 > 0) {
    return 0LL;
  }
  if (a1 && a2 && (size_t v5 = __n, (__n & 0x80000000) == 0) && (__n & 3) == 0 && __dst)
  {
    if ((_DWORD)__n && a2 != __dst) {
      memcpy(__dst, a2, __n);
    }
  }

  else
  {
    size_t v5 = 0LL;
    *a5 = 1;
  }

  return v5;
}

size_t sub_180847C98(uint64_t a1, const void *a2, size_t __n, void *__dst, int *a5)
{
  if (!a5 || *a5 > 0) {
    return 0LL;
  }
  if (a1 && a2 && (size_t v5 = __n, (__n & 0x80000000) == 0) && (__n & 7) == 0 && __dst)
  {
    if ((_DWORD)__n && a2 != __dst) {
      memcpy(__dst, a2, __n);
    }
  }

  else
  {
    size_t v5 = 0LL;
    *a5 = 1;
  }

  return v5;
}

uint64_t sub_180847D10(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD *a4, int *a5)
{
  if (!a5 || *a5 > 0) {
    return 0LL;
  }
  if (a1 && a2 && (a3 & 0x80000000) == 0 && (a3 & 1) == 0 && a4)
  {
    if (a3 >= 2)
    {
      unsigned int v6 = (a3 >> 1) + 1;
      do
      {
        unsigned int v7 = *a2++;
        *a4++ = bswap32(v7) >> 16;
        --v6;
      }

      while (v6 > 1);
    }
  }

  else
  {
    a3 = 0LL;
    *a5 = 1;
  }

  return a3;
}

uint64_t sub_180847D80(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD *a4, int *a5)
{
  if (!a5 || *a5 > 0) {
    return 0LL;
  }
  if (a1 && a2 && (a3 & 0x80000000) == 0 && (a3 & 3) == 0 && a4)
  {
    if (a3 >= 4)
    {
      unsigned int v6 = (a3 >> 2) + 1;
      do
      {
        unsigned int v7 = *a2++;
        *a4++ = bswap32(v7);
        --v6;
      }

      while (v6 > 1);
    }
  }

  else
  {
    a3 = 0LL;
    *a5 = 1;
  }

  return a3;
}

uint64_t sub_180847DF0(uint64_t a1, unint64_t *a2, uint64_t a3, void *a4, int *a5)
{
  if (!a5 || *a5 > 0) {
    return 0LL;
  }
  if (a1 && a2 && (a3 & 0x80000000) == 0 && (a3 & 7) == 0 && a4)
  {
    if (a3 >= 8)
    {
      unsigned int v6 = (a3 >> 3) + 1;
      do
      {
        unint64_t v7 = *a2++;
        *a4++ = bswap64(v7);
        --v6;
      }

      while (v6 > 1);
    }
  }

  else
  {
    a3 = 0LL;
    *a5 = 1;
  }

  return a3;
}

_OWORD *udata_openSwapperForInputData( unsigned __int16 *a1, unsigned int a2, int a3, unsigned int a4, int *a5)
{
  if (a5 && *a5 <= 0)
  {
    if (a1 && a2 >= 0x18 && a4 < 2)
    {
      if (*((unsigned __int8 *)a1 + 2) == 218 && *((_BYTE *)a1 + 3) == 39 && *((_BYTE *)a1 + 10) == 2)
      {
        unsigned int v5 = *a1;
        if (*((_BYTE *)a1 + 8))
        {
          unsigned int v5 = __rev16(v5);
          unsigned int v6 = bswap32(a1[2]) >> 16;
        }

        else
        {
          unsigned int v6 = a1[2];
        }
      }

      int v7 = 16;
    }

    else
    {
      int v7 = 1;
    }

    *a5 = v7;
  }

  return 0LL;
}

void uenum_close(void **a1)
{
  if (a1)
  {
    char v2 = (void (*)(void **))a1[2];
    if (v2)
    {
      int v3 = *a1;
      if (*a1)
      {
        uprv_free(v3);
        char v2 = (void (*)(void **))a1[2];
      }

      v2(a1);
    }

    else
    {
      uprv_free(a1);
    }
  }

uint64_t uenum_count(uint64_t a1, int *a2)
{
  if (!a1 || *a2 > 0) {
    return 0xFFFFFFFFLL;
  }
  int v3 = *(uint64_t (**)(void))(a1 + 24);
  if (!v3)
  {
    *a2 = 16;
    return 0xFFFFFFFFLL;
  }

  return v3();
}

UChar *uenum_unextDefault(uint64_t a1, _DWORD *a2, int *a3)
{
  int v12 = 0;
  unsigned int v5 = *(uint64_t (**)(void))(a1 + 40);
  if (v5)
  {
    uint64_t v7 = v5();
    if (!v7)
    {
      uint64_t v9 = 0LL;
      goto LABEL_9;
    }

    uint64_t v8 = (const char *)v7;
    uint64_t v9 = (UChar *)sub_18084805C((_DWORD **)a1, 2 * v12 + 2);
    if (v9)
    {
      u_charsToUChars(v8, v9, v12 + 1);
      goto LABEL_9;
    }

    int v10 = 7;
  }

  else
  {
    uint64_t v9 = 0LL;
    int v10 = 16;
  }

  *a3 = v10;
LABEL_9:
  if (a2) {
    *a2 = v12;
  }
  return v9;
}

_DWORD *sub_18084805C(_DWORD **a1, int a2)
{
  uint64_t result = *a1;
  if (result)
  {
    if (*result >= a2) {
      return ++result;
    }
    uint64_t result = uprv_realloc(result, a2 + 12LL);
  }

  else
  {
    uint64_t result = uprv_malloc(a2 + 12LL);
  }

  *a1 = result;
  if (!result) {
    return result;
  }
  _DWORD *result = a2 + 8;
  return ++result;
}

char *uenum_nextDefault(uint64_t a1, _DWORD *a2, int *a3)
{
  __int128 v4 = *(uint64_t (**)(void))(a1 + 32);
  if (!v4)
  {
    uint64_t v9 = 0LL;
    int v10 = 16;
LABEL_8:
    *a3 = v10;
    return v9;
  }

  uint64_t v7 = v4();
  if (!v7) {
    return 0LL;
  }
  uint64_t v8 = (const UChar *)v7;
  uint64_t v9 = (char *)sub_18084805C((_DWORD **)a1, *a2 + 1);
  if (!v9)
  {
    int v10 = 7;
    goto LABEL_8;
  }

  u_UCharsToChars(v8, v9, *a2 + 1);
  return v9;
}

uint64_t uenum_unext(uint64_t a1, uint64_t a2, int *a3)
{
  if (!a1 || *a3 > 0) {
    return 0LL;
  }
  __int128 v4 = *(uint64_t (**)(void))(a1 + 32);
  if (!v4)
  {
    *a3 = 16;
    return 0LL;
  }

  return v4();
}

uint64_t uenum_next(uint64_t result, uint64_t a2, int *a3)
{
  if (result)
  {
    if (*a3 <= 0)
    {
      int v3 = *(uint64_t (**)(void))(result + 40);
      if (v3)
      {
        if (a2)
        {
          return v3();
        }

        else
        {
          int v4 = 0;
          return v3();
        }
      }

      else
      {
        uint64_t result = 0LL;
        *a3 = 16;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t uenum_reset(uint64_t result, int *a2)
{
  if (result && *a2 <= 0)
  {
    char v2 = *(uint64_t (**)(void))(result + 48);
    if (v2) {
      return v2();
    }
    else {
      *a2 = 16;
    }
  }

  return result;
}

int32x2_t *uhash_open(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  return sub_180848224(a1, a2, a3, 4, a4);
}

int32x2_t *sub_180848224(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int *a5)
{
  if (*a5 > 0) {
    return 0LL;
  }
  int v12 = (int32x2_t *)uprv_malloc(0x50uLL);
  unsigned int v5 = v12;
  if (!v12)
  {
    *a5 = 7;
    return v5;
  }

  sub_180848304(v12, a1, a2, a3, a4, a5);
  v5[9].i8[1] = 1;
  if (*a5 >= 1)
  {
    uprv_free(v5);
    return 0LL;
  }

  return v5;
}

int32x2_t *uhash_openSize(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int *a5)
{
  for (uint64_t i = 0LL; i != 28; ++i)
  {
    if (dword_180A26A10[i] >= a4) {
      break;
    }
  }

  return sub_180848224(a1, a2, a3, i, a5);
}

int32x2_t *uhash_init(int32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  return sub_180848304(a1, a2, a3, a4, 4, a5);
}

int32x2_t *sub_180848304(int32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int *a6)
{
  if (*a6 > 0) {
    return 0LL;
  }
  a1[1] = (int32x2_t)a2;
  a1[2] = (int32x2_t)a3;
  a1[9].i8[1] = 0;
  a1[4] = 0LL;
  a1[5] = 0LL;
  a1[3] = (int32x2_t)a4;
  a1[8] = (int32x2_t)1056964608LL;
  sub_180849044(a1, a5, a6);
  if (*a6 >= 1) {
    return 0LL;
  }
  else {
    return a1;
  }
}

int32x2_t *uhash_initSize(int32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int *a6)
{
  for (uint64_t i = 0LL; i != 28; ++i)
  {
    if (dword_180A26A10[i] >= a5) {
      break;
    }
  }

  return sub_180848304(a1, a2, a3, a4, i, a6);
}

void uhash_close(_BYTE *a1)
{
  if (a1)
  {
    char v2 = *(void **)a1;
    if (v2)
    {
      if (*((void *)a1 + 4) || *((void *)a1 + 5))
      {
        LODWORD(v3) = -1;
LABEL_6:
        uint64_t v3 = (int)v3;
        char v2 = *(void **)a1;
        int v4 = (int *)(*(void *)a1 + 24LL * (int)v3 + 24);
        while (++v3 < *((int *)a1 + 13))
        {
          unsigned int v5 = v4 + 6;
          int v6 = *v4;
          v4 += 6;
          if ((v6 & 0x80000000) == 0)
          {
            uint64_t v7 = (void (*)(void))*((void *)a1 + 4);
            if (v7 && *((void *)v5 - 1)) {
              v7();
            }
            uint64_t v8 = (void (*)(void))*((void *)a1 + 5);
            if (v8)
            {
              if (*((void *)v5 - 2)) {
                v8();
              }
            }

            goto LABEL_6;
          }
        }
      }

      uprv_free(v2);
      *(void *)a1 = 0LL;
    }

    if (a1[73]) {
      uprv_free(a1);
    }
  }

uint64_t uhash_nextElement(uint64_t *a1, int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = 24 * v2;
  while (v3 < *((int *)a1 + 13))
  {
    uint64_t v5 = *a1;
    int v6 = *(_DWORD *)(*a1 + v4 + 24);
    LODWORD(v2) = v2 + 1;
    ++v3;
    v4 += 24LL;
    if ((v6 & 0x80000000) == 0)
    {
      *a2 = v2;
      return v5 + v4;
    }
  }

  return 0LL;
}

uint64_t uhash_setKeyHasher(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2;
  return v2;
}

uint64_t uhash_setKeyComparator(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2;
  return v2;
}

uint64_t uhash_setValueComparator(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = a2;
  return v2;
}

uint64_t uhash_setKeyDeleter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = a2;
  return v2;
}

uint64_t uhash_setValueDeleter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = a2;
  return v2;
}

void uhash_setResizePolicy(int32x2_t *a1, int a2)
{
  int v3 = 0;
  float32x2_t v2 = qword_180A26A84[a2];
  a1[7] = vrev64_s32(vcvt_s32_f32(vmul_n_f32(v2, (float)a1[6].i32[1])));
  a1[8] = vrev64_s32((int32x2_t)v2);
  sub_180848548(a1, &v3);
}

void sub_180848548(int32x2_t *a1, int *a2)
{
  uint64_t v4 = (char *)*a1;
  int v5 = a1[9].i8[0];
  __int32 v6 = a1[6].i32[0];
  uint64_t v7 = a1[6].u32[1];
  if (v6 <= a1[7].i32[0])
  {
    if (v6 >= a1[7].i32[1] || v5 < 1) {
      return;
    }
    int v8 = v5 - 1;
  }

  else
  {
    if (v5 > 27) {
      return;
    }
    int v8 = v5 + 1;
  }

  sub_180849044(a1, v8, a2);
  if (*a2 <= 0)
  {
    if ((int)v7 >= 1)
    {
      unint64_t v10 = v7 + 1;
      do
      {
        uint64_t v11 = (int *)&v4[24 * (v10 - 2)];
        if ((*v11 & 0x80000000) == 0)
        {
          int v12 = &v4[24 * (v10 - 2)];
          int v13 = sub_180848694((uint64_t *)a1, *((void *)v12 + 2), *v11);
          *((void *)v13 + 2) = *((void *)v12 + 2);
          *((void *)v13 + icu::UVector32::~UVector32(this + 1) = *((void *)v12 + 1);
          *int v13 = *v11;
          ++a1[6].i32[0];
        }

        --v10;
      }

      while (v10 > 1);
    }

    uprv_free(v4);
  }

  else
  {
    *a1 = (int32x2_t)v4;
    a1[6].i32[1] = v7;
  }

uint64_t uhash_count(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t uhash_get(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
  return *((void *)sub_180848694((uint64_t *)a1, a2, v4) + 1);
}

int *sub_180848694(uint64_t *a1, uint64_t a2, int a3)
{
  int v4 = 0;
  int v5 = a3 & 0x7FFFFFFF;
  int v6 = *((_DWORD *)a1 + 13);
  int v7 = (a3 & 0x7FFFFFFF ^ 0x4000000) % v6;
  uint64_t v8 = *a1;
  int v9 = -1;
  int v10 = v7;
  do
  {
    int v11 = v10;
    int v12 = (int *)(v8 + 24LL * v10);
    int v13 = *v12;
    if (*v12 == v5)
    {
      int v6 = *((_DWORD *)a1 + 13);
    }

    else if (v13 < 0)
    {
      if (v9 < 0) {
        int v9 = v10;
      }
      if (v13 == -2147483647) {
        return (int *)(v8 + 24LL * v9);
      }
    }

    if (!v4) {
      int v4 = v5 % (v6 - 1) + 1;
    }
    int v10 = (v4 + v11) % v6;
  }

  while (v10 != v7);
  if (v9 < 0)
  {
    int v9 = v7;
    if (v13 != -2147483647) {
      abort();
    }
  }

  return (int *)(v8 + 24LL * v9);
}

uint64_t uhash_iget(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = a2;
  int v4 = (*(uint64_t (**)(void))(a1 + 8))(a2);
  return *((void *)sub_180848694((uint64_t *)a1, v3, v4) + 1);
}

uint64_t uhash_geti(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
  return sub_180848694((uint64_t *)a1, a2, v4)[2];
}

uint64_t uhash_igeti(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = a2;
  int v4 = (*(uint64_t (**)(void))(a1 + 8))(a2);
  return sub_180848694((uint64_t *)a1, v3, v4)[2];
}

uint64_t uhash_getiAndFound(uint64_t a1, uint64_t a2, BOOL *a3)
{
  int v6 = (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
  int v7 = sub_180848694((uint64_t *)a1, a2, v6);
  *a3 = *v7 >= 0;
  return v7[2];
}

uint64_t uhash_igetiAndFound(uint64_t a1, unsigned int a2, BOOL *a3)
{
  uint64_t v5 = a2;
  int v6 = (*(uint64_t (**)(void))(a1 + 8))(a2);
  int v7 = sub_180848694((uint64_t *)a1, v5, v6);
  *a3 = *v7 >= 0;
  return v7[2];
}

uint64_t uhash_put(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  return sub_180848920(a1, a2, a3, 3, a4);
}

uint64_t sub_180848920(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int *a5)
{
  if (*a5 > 0) {
    goto LABEL_2;
  }
  if ((a4 & 2) != 0)
  {
    if (!a3) {
      return sub_180848B00(a1, a2);
    }
  }

  else if (!(_DWORD)a3 && (a4 & 4) == 0)
  {
    return sub_180848B00(a1, a2);
  }

  if (*(_DWORD *)(a1 + 48) <= *(_DWORD *)(a1 + 56) || (sub_180848548((int32x2_t *)a1, a5), *a5 <= 0))
  {
    int v14 = (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
    unsigned int v15 = sub_180848694((uint64_t *)a1, a2, v14);
    if ((*v15 & 0x80000000) == 0) {
      return sub_1808490E4(a1, (uint64_t)v15, v14 & 0x7FFFFFFF, a2, a3);
    }
    int v16 = *(_DWORD *)(a1 + 48);
    int v17 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 48) = v16 + 1;
    if (v16 + 1 != v17) {
      return sub_1808490E4(a1, (uint64_t)v15, v14 & 0x7FFFFFFF, a2, a3);
    }
    *(_DWORD *)(a1 + 48) = v16;
    *a5 = 7;
  }

uint64_t uhash_iput(uint64_t a1, unsigned int a2, uint64_t a3, int *a4)
{
  return sub_180848920(a1, a2, a3, 2, a4);
}

uint64_t uhash_puti(uint64_t a1, uint64_t a2, unsigned int a3, int *a4)
{
  return sub_180848920(a1, a2, a3, 1, a4);
}

uint64_t uhash_iputi(uint64_t a1, unsigned int a2, unsigned int a3, int *a4)
{
  return sub_180848920(a1, a2, a3, 0, a4);
}

uint64_t uhash_putiAllowZero(uint64_t a1, uint64_t a2, unsigned int a3, int *a4)
{
  return sub_180848920(a1, a2, a3, 5, a4);
}

uint64_t uhash_iputiAllowZero(uint64_t a1, unsigned int a2, unsigned int a3, int *a4)
{
  return sub_180848920(a1, a2, a3, 4, a4);
}

uint64_t sub_180848B00(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
  uint64_t v5 = sub_180848694((uint64_t *)a1, a2, v4);
  if (*v5 < 0) {
    return 0LL;
  }
  --*(_DWORD *)(a1 + 48);
  uint64_t v6 = sub_1808490E4(a1, (uint64_t)v5, 0x80000000, 0LL, 0LL);
  if (*(_DWORD *)(a1 + 48) < *(_DWORD *)(a1 + 60))
  {
    int v8 = 0;
    sub_180848548((int32x2_t *)a1, &v8);
  }

  return v6;
}

uint64_t uhash_iremove(uint64_t a1, unsigned int a2)
{
  return sub_180848B00(a1, a2);
}

uint64_t uhash_removei(uint64_t a1, uint64_t a2)
{
  return sub_180848B00(a1, a2);
}

uint64_t uhash_iremovei(uint64_t a1, unsigned int a2)
{
  return sub_180848B00(a1, a2);
}

uint64_t uhash_removeAll(uint64_t result)
{
  if (*(_DWORD *)(result + 48))
  {
    uint64_t v1 = result;
    LODWORD(v2) = -1;
LABEL_3:
    uint64_t v3 = 24LL * (int)v2;
    uint64_t v2 = (int)v2;
    while (++v2 < *(int *)(v1 + 52))
    {
      uint64_t v4 = v3 + 24;
      int v5 = *(_DWORD *)(*(void *)v1 + v3 + 24);
      v3 += 24LL;
      if ((v5 & 0x80000000) == 0)
      {
        uint64_t result = uhash_removeElement(v1, (_DWORD *)(*(void *)v1 + v4));
        goto LABEL_3;
      }
    }
  }

  return result;
}

uint64_t uhash_removeElement(uint64_t a1, _DWORD *a2)
{
  if ((*a2 & 0x80000000) != 0) {
    return 0LL;
  }
  --*(_DWORD *)(a1 + 48);
  return sub_1808490E4(a1, (uint64_t)a2, 0x80000000, 0LL, 0LL);
}

BOOL uhash_containsKey(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
  return *sub_180848694((uint64_t *)a1, a2, v4) >= 0;
}

BOOL uhash_icontainsKey(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = a2;
  int v4 = (*(uint64_t (**)(void))(a1 + 8))(a2);
  return *sub_180848694((uint64_t *)a1, v3, v4) >= 0;
}

int *uhash_find(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
  uint64_t result = sub_180848694((uint64_t *)a1, a2, v4);
  if (*result < 0) {
    return 0LL;
  }
  return result;
}

unsigned __int16 *uhash_hashUChars(unsigned __int16 *result)
{
  if (result)
  {
    uint64_t v1 = result;
    int32_t v2 = u_strlen(result);
    return ustr_hashUCharsN(v1, v2);
  }

  return result;
}

unsigned __int8 *uhash_hashChars(unsigned __int8 *result)
{
  if (result)
  {
    uint64_t v1 = result;
    int v2 = strlen((const char *)result);
    return ustr_hashCharsN(v1, v2);
  }

  return result;
}

char *uhash_hashIChars(char *result)
{
  if (result)
  {
    uint64_t v1 = result;
    int v2 = strlen(result);
    return ustr_hashICharsN(v1, v2);
  }

  return result;
}

uint64_t uhash_equals(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  uint64_t result = 0LL;
  if (a1 && a2)
  {
    if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0LL;
    }
    uint64_t result = 0LL;
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5 && v5 == *(void *)(a2 + 24))
    {
      int v6 = *(_DWORD *)(a1 + 48);
      if (v6 != *(_DWORD *)(a2 + 48)) {
        return 0LL;
      }
      if (v6 < 1)
      {
        return 1LL;
      }

      else
      {
        int v7 = 0;
        int v8 = -1;
        do
        {
          BOOL v9 = (_DWORD *)(*(void *)a1 + 24LL * v8 + 24);
          do
          {
            ++v8;
            int v10 = *v9;
            v9 += 6;
          }

          while (v10 < 0);
          uint64_t v12 = *((void *)v9 - 2);
          uint64_t v11 = *((void *)v9 - 1);
          int v13 = (*(uint64_t (**)(uint64_t))(a2 + 8))(v11);
          int v14 = sub_180848694((uint64_t *)a2, v11, v13);
          uint64_t result = (*(uint64_t (**)(uint64_t, void))(a1 + 24))(v12, *((void *)v14 + 1));
          if (!(_DWORD)result) {
            break;
          }
          ++v7;
          uint64_t result = 1LL;
        }

        while (v7 != v6);
      }
    }
  }

  return result;
}

BOOL uhash_compareUChars(unsigned __int16 *a1, unsigned __int16 *a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  BOOL result = 0LL;
  if (a1 && a2)
  {
    int v4 = *a1;
    if (*a1)
    {
      uint64_t v5 = a1 + 1;
      do
      {
        if (v4 != *a2) {
          break;
        }
        ++a2;
        int v6 = *v5++;
        int v4 = v6;
      }

      while (v6);
    }

    return v4 == *a2;
  }

  return result;
}

BOOL uhash_compareChars(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  BOOL result = 0LL;
  if (a1 && a2)
  {
    int v4 = *a1;
    if (*a1)
    {
      uint64_t v5 = a1 + 1;
      do
      {
        if (v4 != *a2) {
          break;
        }
        ++a2;
        int v6 = *v5++;
        int v4 = v6;
      }

      while (v6);
    }

    return v4 == *a2;
  }

  return result;
}

BOOL uhash_compareIChars(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  BOOL result = 0LL;
  if (a1)
  {
    int v4 = a2;
    if (a2)
    {
      unsigned __int8 v5 = *a1;
      if (*a1)
      {
        int v6 = a1 + 1;
        while (1)
        {
          int v7 = uprv_asciitolower((char)v5);
          ++v4;
          int v8 = *v6++;
          unsigned __int8 v5 = v8;
          if (!v8) {
            goto LABEL_8;
          }
        }

        int v9 = *(v6 - 1);
      }

      else
      {
LABEL_8:
        int v9 = 0;
      }

      return v9 == *v4;
    }
  }

  return result;
}

BOOL uhash_compareLong(int a1, int a2)
{
  return a1 == a2;
}

int32x2_t *sub_180849044(int32x2_t *result, int a2, int *a3)
{
  if (*a3 <= 0)
  {
    int v4 = result;
    result[9].i8[0] = a2;
    uint64_t v5 = dword_180A26A10[a2];
    result[6].i32[1] = v5;
    BOOL result = (int32x2_t *)uprv_malloc(24 * v5);
    *int v4 = (int32x2_t)result;
    if (result)
    {
      int v6 = v4[6].i32[1];
      if (v6 >= 1)
      {
        int v7 = (char *)&result[3 * v6];
        do
        {
          result[1] = 0LL;
          result[2] = 0LL;
          result->i32[0] = -2147483647;
          result += 3;
        }

        while (result < (int32x2_t *)v7);
      }

      v4[6].i32[0] = 0;
      v4[7] = vcvt_s32_f32(vmul_n_f32((float32x2_t)v4[8], (float)v6));
    }

    else
    {
      *a3 = 7;
    }
  }

  return result;
}

uint64_t sub_1808490E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a2 + 8);
  uint64_t v11 = *(void (**)(void))(a1 + 32);
  if (v11)
  {
    uint64_t v12 = *(void *)(a2 + 16);
    if (v12 && v12 != a4) {
      v11();
    }
  }

  int v14 = *(void (**)(uint64_t))(a1 + 40);
  if (v14)
  {
    if (v10) {
      BOOL v15 = v10 == a5;
    }
    else {
      BOOL v15 = 1;
    }
    if (!v15) {
      v14(v10);
    }
    uint64_t v10 = 0LL;
  }

  *(void *)(a2 + 8) = a5;
  *(void *)(a2 + 16) = a4;
  *(_DWORD *)a2 = a3;
  return v10;
}

void uhash_deleteHashtable(void *a1)
{
  if (a1)
  {
    int v2 = (_BYTE *)*a1;
    if (v2) {
      uhash_close(v2);
    }
    icu::UMemory::operator delete(a1);
  }

int32_t uidna_toASCII( const UChar *src, int32_t srcLength, UChar *dest, int32_t destCapacity, int32_t options, UParseError *parseError, UErrorCode *status)
{
  if (src
    && (uint64_t v10 = *(void *)&srcLength, srcLength >= -1)
    && (destCapacity & 0x80000000) == 0
    && ((char v13 = options, dest) || !destCapacity))
  {
    uint64_t v15 = usprep_openByType(0, (int *)status);
    if (*(int *)status <= 0)
    {
      uint64_t v16 = v15;
      int32_t v17 = sub_180849284((UChar *)src, v10, dest, destCapacity, v13, v15, (uint64_t)parseError, (int *)status);
      usprep_close(v16);
      return v17;
    }

    else
    {
      return -1;
    }
  }

  else
  {
    int32_t result = 0;
    *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return result;
}

uint64_t sub_180849284(UChar *s, uint64_t a2, UChar *a3, int a4, char a5, uint64_t a6, uint64_t a7, int *a8)
{
  uint64_t v12 = a2;
  uint64_t v52 = *MEMORY[0x1895F89C0];
  if ((_DWORD)a2 == -1) {
    uint64_t v12 = u_strlen(s);
  }
  uint64_t v51 = 0LL;
  memset(v50, 0, sizeof(v50));
  memset(v48, 0, sizeof(v48));
  uint64_t v49 = 0LL;
  if ((int)v12 < 101)
  {
    int v14 = v50;
    if ((int)v12 < 1)
    {
      uint64_t v12 = 0LL;
      goto LABEL_19;
    }

    int v15 = 100;
LABEL_8:
    char v18 = a5 & 1;
    memcpy(v14, s, 2LL * v12);
    uint64_t v19 = 0LL;
    char v20 = 1;
    do
    {
      if (s[v19] > 0x7Fu) {
        char v20 = 0;
      }
      ++v19;
    }

    while (v12 != v19);
    if (!v20)
    {
      uint64_t v16 = usprep_prepare(a6, s, v12, v14, v15, v18, a7, a8);
      int v21 = *a8;
      if (*a8 != 15) {
        goto LABEL_20;
      }
      if (v14 != (_WORD *)v50) {
        uprv_free(v14);
      }
      int v22 = (UChar *)uprv_malloc(2 * (int)v16);
      if (!v22) {
        goto LABEL_5;
      }
      int v14 = v22;
      *a8 = 0;
      uint64_t v12 = usprep_prepare(a6, s, v12, v22, v16, v18, a7, a8);
    }

int32_t uidna_toUnicode( const UChar *src, int32_t srcLength, UChar *dest, int32_t destCapacity, int32_t options, UParseError *parseError, UErrorCode *status)
{
  if (src
    && (uint64_t v10 = *(void *)&srcLength, srcLength >= -1)
    && (destCapacity & 0x80000000) == 0
    && (dest || !destCapacity))
  {
    uint64_t v15 = usprep_openByType(0, (int *)status);
    if (*(int *)status <= 0)
    {
      uint64_t v16 = v15;
      int32_t v17 = sub_180849874((UChar *)src, v10, dest, destCapacity, options, v15, (uint64_t)parseError, (int *)status);
      usprep_close(v16);
      return v17;
    }

    else
    {
      return -1;
    }
  }

  else
  {
    int32_t result = 0;
    *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return result;
}

uint64_t sub_180849874( UChar *src, uint64_t a2, UChar *dest, int a4, int32_t a5, uint64_t a6, uint64_t a7, int *a8)
{
  int v11 = a4;
  uint64_t v12 = dest;
  uint64_t v68 = *MEMORY[0x1895F89C0];
  uint64_t v67 = 0LL;
  memset(v66, 0, sizeof(v66));
  uint64_t v65 = 0LL;
  memset(v64, 0, sizeof(v64));
  uint64_t v63 = 0LL;
  __int128 v61 = 0u;
  __int128 v62 = 0u;
  __int128 v59 = 0u;
  __int128 v60 = 0u;
  __int128 v57 = 0u;
  __int128 v58 = 0u;
  __int128 v55 = 0u;
  __int128 v56 = 0u;
  __int128 v53 = 0u;
  __int128 v54 = 0u;
  *(_OWORD *)desta = 0u;
  __int128 v52 = 0u;
  if ((_DWORD)a2 == -1)
  {
    unsigned int v18 = *src;
    if (!*src)
    {
      uint64_t v14 = 0LL;
      uint64_t v16 = src;
LABEL_42:
      uint64_t v32 = (UChar *)v64;
      uint64_t v27 = v14;
      goto LABEL_47;
    }

    uint64_t v17 = 0LL;
    char v19 = 1;
    do
    {
      if (v18 > 0x7F) {
        char v19 = 0;
      }
      char v20 = &src[v17++];
      unsigned int v18 = v20[1];
    }

    while (v18);
    if (v19)
    {
      uint64_t v14 = v17;
      uint64_t v16 = src;
      goto LABEL_24;
    }

    parseErro__int16 r = (UParseError *)dest;
    int v22 = a4;
    uint64_t v14 = v17;
  }

  else
  {
    uint64_t v14 = a2;
    uint64_t v15 = 0LL;
    while (src[v15] <= 0x7Fu)
    {
      if (a2 == ++v15)
      {
        uint64_t v16 = src;
        LODWORD(v17) = a2;
        goto LABEL_24;
      }
    }

    parseErro__int16 r = (UParseError *)dest;
    int v22 = a4;
  }

  int32_t v23 = a5;
  char v24 = a5 & 1;
  uint64_t v16 = (UChar *)v66;
  int v25 = usprep_prepare(a6, src, v14, (UChar *)v66, 100, a5 & 1, a7, a8);
  LODWORD(v17) = v25;
  int v26 = *a8;
  if (*a8 == 15)
  {
    uint64_t v16 = (UChar *)uprv_malloc(2 * v25);
    if (!v16)
    {
      uint64_t v27 = 0LL;
      *a8 = 7;
      goto LABEL_46;
    }

    *a8 = 0;
    LODWORD(v17) = usprep_prepare(a6, src, v14, v16, v17, v24, a7, a8);
    int v26 = *a8;
  }

  if (v26 > 0)
  {
    uint64_t v27 = 0LL;
LABEL_46:
    uint64_t v32 = (UChar *)v64;
    int v11 = v22;
    uint64_t v12 = (UChar *)parseError;
    goto LABEL_47;
  }

  a5 = v23;
  int v11 = v22;
  uint64_t v12 = (UChar *)parseError;
LABEL_24:
  int v28 = *v16;
  uint64_t v29 = 1LL;
  while (v29 != 4)
  {
    int v30 = v16[v29];
    int v31 = (unsigned __int16)aXn[v29++];
    if (v31 != (unsigned __int16)v30)
    {
      break;
    }
  }

  int32_t options = a5;
  parseErrora = (UParseError *)a7;
  uint64_t v32 = (UChar *)v64;
  uint64_t v33 = u_strFromPunycode(v16 + 4, (v17 - 4), (uint64_t)v64, 100, 0LL, a8);
  uint64_t v27 = v33;
  if (*a8 == 15)
  {
    uint64_t v32 = (UChar *)uprv_malloc(2 * (int)v33);
    if (!v32) {
      goto LABEL_58;
    }
    *a8 = 0;
    uint64_t v27 = u_strFromPunycode(v16 + 4, (v17 - 4), (uint64_t)v32, v27, 0LL, a8);
  }

  __int128 v34 = desta;
  int32_t v35 = uidna_toASCII(v32, v27, desta, 100, options, parseErrora, (UErrorCode *)a8);
  int v36 = *a8;
  if (*a8 != 15)
  {
LABEL_40:
    if (v36 > 0)
    {
      uint64_t v27 = 0LL;
      goto LABEL_47;
    }

    else {
      uint64_t v39 = v17;
    }
    else {
      int v40 = 1;
    }
    if ((_DWORD)v17 == v35) {
      int v40 = 0;
    }
    if ((_DWORD)v39)
    {
      int v41 = v16;
      while (1)
      {
        int v43 = *v41++;
        int v42 = v43;
        int v45 = *v34++;
        int v44 = v45;
        if (v42 != v45)
        {
          int v46 = (unsigned __int16)v42 - (unsigned __int16)v44;
          if (v46) {
            break;
          }
        }

        if (!--v39) {
          goto LABEL_78;
        }
      }

      int v40 = v46;
    }

int32_t uidna_IDNToASCII( const UChar *src, int32_t srcLength, UChar *dest, int32_t destCapacity, int32_t options, UParseError *parseError, UErrorCode *status)
{
  if (!src
    || (uint64_t v9 = *(void *)&srcLength, srcLength < -1)
    || (int32_t v10 = destCapacity, destCapacity < 0)
    || (uint64_t v12 = *(void *)&options, (v13 = dest) == 0LL) && destCapacity)
  {
    *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
    return 0;
  }

  uint64_t v15 = usprep_openByType(0, (int *)status);
  UErrorCode v16 = *status;
  uint64_t v17 = v15;
  int v40 = parseError;
  uint64_t v18 = 0LL;
  char v19 = (UChar *)src;
  uint64_t v37 = v13;
  uint64_t v20 = v9;
  int32_t v38 = v10;
  int v39 = v9;
  while (1)
  {
    if ((_DWORD)v20 == -1)
    {
      for (uint64_t i = 0LL; ; ++i)
      {
        unsigned int v27 = v19[i];
        if (v27 <= 0x3001)
        {
          if (!v19[i])
          {
            uint64_t v21 = i;
            goto LABEL_46;
          }

          if (v27 == 46) {
            goto LABEL_43;
          }
        }

        else if (v27 == 12290 || v27 == 65294 || v27 == 65377)
        {
LABEL_43:
          int v22 = &v19[(i + 1)];
          int v30 = 1;
          uint64_t v21 = i;
          goto LABEL_47;
        }
      }
    }

    if ((int)v20 >= 1)
    {
      uint64_t v21 = 0LL;
      int v22 = v19 + 1;
      while (1)
      {
        unsigned int v23 = *(v22 - 1);
        if (v23 > 0xFF0D)
        {
          if (v23 == 65377 || v23 == 65294)
          {
LABEL_42:
            int v30 = 1;
            goto LABEL_47;
          }
        }

        else if (v23 == 46 || v23 == 12290)
        {
          goto LABEL_42;
        }

        ++v21;
        ++v22;
        if (v20 == v21)
        {
          uint64_t v21 = v20;
          goto LABEL_45;
        }
      }
    }

    uint64_t v21 = 0LL;
LABEL_45:
    uint64_t i = (int)v20;
LABEL_46:
    int v22 = &v19[i];
    int v30 = 0;
    if ((_DWORD)v21) {
      break;
    }
    int v33 = 0;
LABEL_52:
    if (v16 > U_ZERO_ERROR
      || ((uint64_t v18 = (v33 + v18), v10 <= v33) ? (v34 = 0) : (v34 = v33),
          v10 <= v33 ? (int32_t v10 = 0) : (v10 -= v33),
          !v30))
    {
      int v35 = v38;
      uint64_t v36 = (uint64_t)v37;
      goto LABEL_69;
    }

    char v19 = v22;
LABEL_61:
    v13 += v34;
    if (v10 >= 1)
    {
      *v13++ = 46;
      --v10;
    }

    uint64_t v18 = (v18 + 1);
    else {
      uint64_t v20 = v9 - ((unint64_t)((char *)v19 - (char *)src) >> 1);
    }
  }

int32_t uidna_IDNToUnicode( const UChar *src, int32_t srcLength, UChar *dest, int32_t destCapacity, int32_t options, UParseError *parseError, UErrorCode *status)
{
  if (!src
    || (uint64_t v9 = *(void *)&srcLength, srcLength < -1)
    || (int32_t v10 = destCapacity, destCapacity < 0)
    || (char v13 = dest) == 0LL && destCapacity)
  {
    *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
    return 0;
  }

  uint64_t v15 = usprep_openByType(0, (int *)status);
  uint64_t v16 = v15;
  int v36 = v9;
  int32_t v37 = options;
  int32_t v38 = parseError;
  uint64_t v17 = 0LL;
  uint64_t v18 = (UChar *)src;
  uint64_t v33 = (uint64_t)v13;
  uint64_t v19 = v9;
  int v34 = v10;
  int v35 = src;
  while (1)
  {
    if ((_DWORD)v19 == -1)
    {
      uint64_t v21 = v18;
      for (unsigned int i = 1; ; ++i)
      {
        unsigned int v26 = *v21;
        if (v26 <= 0x3001)
        {
          if (!*v21)
          {
            int v29 = 0;
            uint64_t v20 = i - 1;
            goto LABEL_46;
          }

          if (v26 == 46)
          {
LABEL_42:
            uint64_t v20 = i - 1;
            uint64_t v21 = &v18[i];
LABEL_43:
            int v29 = 1;
            goto LABEL_46;
          }
        }

        else if (v26 == 12290 || v26 == 65294 || v26 == 65377)
        {
          goto LABEL_42;
        }

        ++v21;
      }
    }

    if ((int)v19 < 1)
    {
      uint64_t v20 = 0LL;
    }

    else
    {
      uint64_t v20 = 0LL;
      uint64_t v21 = v18 + 1;
      do
      {
        unsigned int v22 = *(v21 - 1);
        if (v22 > 0xFF0D)
        {
          if (v22 == 65377 || v22 == 65294) {
            goto LABEL_43;
          }
        }

        else if (v22 == 46 || v22 == 12290)
        {
          goto LABEL_43;
        }

        ++v20;
        ++v21;
      }

      while (v19 != v20);
      uint64_t v20 = v19;
    }

    int v29 = 0;
    uint64_t v21 = &v18[(int)v19];
LABEL_46:
    uint64_t v30 = v16;
    int32_t v31 = sub_180849874(v18, v20, v13, v10, v37, v16, (uint64_t)v38, (int *)status);
    if (*status == U_BUFFER_OVERFLOW_ERROR)
    {
      int32_t v10 = 0;
      *UErrorCode status = U_ZERO_ERROR;
      goto LABEL_49;
    }

int32_t uidna_compare( const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, int32_t options, UErrorCode *status)
{
  uint64_t v92 = *MEMORY[0x1895F89C0];
  __int128 v91 = 0u;
  __int128 v90 = 0u;
  __int128 v89 = 0u;
  __int128 v88 = 0u;
  __int128 v86 = 0u;
  __int128 v87 = 0u;
  __int128 v84 = 0u;
  __int128 v85 = 0u;
  __int128 v82 = 0u;
  __int128 v83 = 0u;
  __int128 v80 = 0u;
  __int128 v81 = 0u;
  __int128 v78 = 0u;
  __int128 v79 = 0u;
  __int128 v76 = 0u;
  __int128 v77 = 0u;
  __int128 v74 = 0u;
  __int128 v75 = 0u;
  __int128 v72 = 0u;
  __int128 v73 = 0u;
  __int128 v70 = 0u;
  __int128 v71 = 0u;
  __int128 v68 = 0u;
  __int128 v69 = 0u;
  __int128 v66 = 0u;
  __int128 v67 = 0u;
  __int128 v64 = 0u;
  __int128 v65 = 0u;
  __int128 v62 = 0u;
  __int128 v63 = 0u;
  *(_OWORD *)dest = 0u;
  __int128 v61 = 0u;
  __int128 v58 = 0u;
  __int128 v59 = 0u;
  __int128 v56 = 0u;
  __int128 v57 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  *(_OWORD *)int v28 = 0u;
  __int128 v29 = 0u;
  memset(&v27, 0, sizeof(v27));
  uint64_t v14 = dest;
  int32_t v15 = uidna_IDNToASCII(s1, length1, dest, 256, options, &v27, status);
  int32_t v16 = v15;
  if (*status != U_BUFFER_OVERFLOW_ERROR)
  {
LABEL_8:
    uint64_t v17 = v28;
    int32_t v18 = uidna_IDNToASCII(s2, length2, v28, 256, options, &v27, status);
    int32_t v19 = v18;
    if (*status == U_BUFFER_OVERFLOW_ERROR)
    {
      uint64_t v17 = (UChar *)uprv_malloc(2 * v18);
      if (!v17)
      {
        *UErrorCode status = U_MEMORY_ALLOCATION_ERROR;
        int32_t v7 = -1;
        goto LABEL_33;
      }

      *UErrorCode status = U_ZERO_ERROR;
      int32_t v19 = uidna_IDNToASCII(s2, length2, v17, v19, options, &v27, status);
    }

    if (v16 >= v19) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = v16;
    }
    if (v16 < v19) {
      int v21 = -1;
    }
    else {
      int v21 = 1;
    }
    if (v16 == v19) {
      int32_t v7 = 0;
    }
    else {
      int32_t v7 = v21;
    }
    if (v20)
    {
      unint64_t v22 = 0LL;
      uint64_t v23 = 2LL * v20;
      while (1)
      {
        int v24 = v14[v22 / 2];
        int v25 = v17[v22 / 2];
        if (v24 != v25)
        {
          int v26 = (unsigned __int16)v24 - (unsigned __int16)v25;
          if (v26) {
            break;
          }
        }

        v22 += 2LL;
        if (v23 == v22) {
          goto LABEL_33;
        }
      }

      int32_t v7 = v26;
    }

void u_init(UErrorCode *a1)
{
  if (*(int *)a1 <= 0)
  {
    unsigned int v2 = atomic_load(&dword_18C535050);
    if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_18C535050))
    {
      if (dword_18C535054 >= 1) {
        *a1 = dword_18C535054;
      }
    }

    else
    {
      ucnv_io_countKnownConverters(a1);
      sub_180820C94(0x1Au, (uint64_t)sub_18084A638);
      dword_18C535054 = *a1;
      icu::umtx_initImplPostInit(&dword_18C535050);
    }
  }

uint64_t sub_18084A638()
{
  return 1LL;
}

void u_charsToUChars(const char *cs, UChar *us, int32_t length)
{
  if (length >= 1)
  {
    unsigned int v3 = length + 1;
    do
    {
      UChar v4 = *(unsigned __int8 *)cs++;
      *us++ = v4;
      --v3;
    }

    while (v3 > 1);
  }

void u_UCharsToChars(const UChar *us, char *cs, int32_t length)
{
  if (length >= 1)
  {
    int v3 = length + 1;
    do
    {
      unsigned int v5 = *us++;
      unsigned int v4 = v5;
      if (v5 > 0x7F || ((dword_180A26AA4[v4 >> 5] >> v4) & 1) == 0) {
        LOBYTE(v4) = 0;
      }
      *cs++ = v4;
      --v3;
    }

    while (v3 > 1);
  }

uint64_t uprv_isInvariantString(unsigned __int8 *a1, int a2)
{
  while ((a2 & 0x80000000) == 0)
  {
    if (!a2) {
      return 1LL;
    }
    --a2;
    unsigned int v3 = *a1++;
    unsigned int v2 = v3;
    if (v3)
    {
LABEL_6:
      if ((v2 & 0x80) != 0 || ((dword_180A26AA4[v2 >> 5] >> v2) & 1) == 0) {
        return 0LL;
      }
    }
  }

  unsigned int v4 = *a1++;
  unsigned int v2 = v4;
  if (v4) {
    goto LABEL_6;
  }
  return 1LL;
}

uint64_t uprv_isInvariantUString(_WORD *a1, int a2)
{
  while ((a2 & 0x80000000) == 0)
  {
    if (!a2) {
      return 1LL;
    }
    --a2;
    unsigned int v2 = (unsigned __int16)*a1;
LABEL_5:
    if (v2 <= 0x7F)
    {
      ++a1;
      if (((dword_180A26AA4[v2 >> 5] >> v2) & 1) != 0) {
        continue;
      }
    }

    return 0LL;
  }

  unsigned int v2 = (unsigned __int16)*a1;
  if (*a1) {
    goto LABEL_5;
  }
  return 1LL;
}

uint64_t uprv_ebcdicFromAscii( uint64_t a1, char *a2, uint64_t a3, _BYTE *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a5) {
    return 0LL;
  }
  if (*a5 <= 0)
  {
    int v9 = 1;
    if (a1 && a2 && (a3 & 0x80000000) == 0 && (!(_DWORD)a3 || a4))
    {
      if (!(_DWORD)a3) {
        return a3;
      }
      int v10 = 0;
      while (1)
      {
        int v12 = *a2++;
        unsigned __int8 v11 = v12;
        *a4++ = byte_180A26CB7[v11];
        --v10;
      }

      udata_printError( a1,  (uint64_t)"uprv_ebcdicFromAscii() string[%d] contains a variant character in position %d\n",  a3,  (uint64_t)a4,  (uint64_t)a5,  a6,  a7,  a8,  a3);
      int v9 = 10;
    }

    a3 = 0LL;
    *a5 = v9;
    return a3;
  }

  return 0LL;
}

uint64_t sub_18084A838( uint64_t a1, _BYTE *a2, uint64_t __n, _BYTE *__dst, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a5 || *a5 > 0) {
    return 0LL;
  }
  if (a1 && a2 && (uint64_t v9 = __n, (__n & 0x80000000) == 0) && (!(_DWORD)__n || __dst))
  {
    if ((_DWORD)__n)
    {
      uint64_t v12 = 0LL;
      int v13 = __n + 1;
      do
      {
        if ((char)a2[v12] < 0
          || ((*(_DWORD *)((char *)dword_180A26AA4 + (((unint64_t)a2[v12] >> 3) & 0x1C)) >> a2[v12]) & 1) == 0)
        {
          udata_printError( a1,  (uint64_t)"uprv_copyFromAscii() string[%d] contains a variant character in position %d\n",  __n,  (uint64_t)__dst,  (uint64_t)a5,  a6,  a7,  a8,  __n);
          uint64_t v9 = 0LL;
          int v10 = 10;
          goto LABEL_10;
        }

        ++v12;
        --v13;
      }

      while (v13 > 1);
      if (a2 != __dst) {
        memcpy(__dst, a2, __n);
      }
    }
  }

  else
  {
    uint64_t v9 = 0LL;
    int v10 = 1;
LABEL_10:
    *a5 = v10;
  }

  return v9;
}

uint64_t sub_18084A91C( uint64_t a1, unsigned __int8 *a2, uint64_t a3, _BYTE *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a5) {
    return 0LL;
  }
  if (*a5 <= 0)
  {
    int v9 = 1;
    if (a1 && a2 && (a3 & 0x80000000) == 0 && (!(_DWORD)a3 || a4))
    {
      if (!(_DWORD)a3) {
        return a3;
      }
      int v10 = 0;
      while (1)
      {
        unsigned int v12 = *a2++;
        unint64_t v11 = v12;
        if (v12)
        {
          unint64_t v11 = byte_180A26AB4[v11];
        }

        *a4++ = v11;
        --v10;
      }

      udata_printError( a1,  (uint64_t)"uprv_asciiFromEbcdic() string[%d] contains a variant character in position %d\n",  a3,  (uint64_t)a4,  (uint64_t)a5,  a6,  a7,  a8,  a3);
      int v9 = 10;
    }

    a3 = 0LL;
    *a5 = v9;
    return a3;
  }

  return 0LL;
}

uint64_t sub_18084A9F4( uint64_t a1, _BYTE *a2, uint64_t __n, _BYTE *__dst, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a5 || *a5 > 0) {
    return 0LL;
  }
  if (a1 && a2 && (uint64_t v9 = __n, (__n & 0x80000000) == 0) && (!(_DWORD)__n || __dst))
  {
    if ((_DWORD)__n)
    {
      uint64_t v12 = 0LL;
      int v13 = __n + 1;
      do
      {
        if (a2[v12])
        {
          if (!byte_180A26AB4[a2[v12]]
            || (unint64_t v14 = byte_180A26AB4[a2[v12]],
                ((*(_DWORD *)((char *)dword_180A26AA4 + ((v14 >> 3) & 0x1C)) >> v14) & 1) == 0))
          {
            udata_printError( a1,  (uint64_t)"uprv_copyEbcdic() string[%] contains a variant character in position %d\n",  __n,  (uint64_t)__dst,  (uint64_t)a5,  a6,  a7,  a8,  __n);
            uint64_t v9 = 0LL;
            int v10 = 10;
            goto LABEL_10;
          }
        }

        ++v12;
        --v13;
      }

      while (v13 > 1);
      if (a2 != __dst) {
        memcpy(__dst, a2, __n);
      }
    }
  }

  else
  {
    uint64_t v9 = 0LL;
    int v10 = 1;
LABEL_10:
    *a5 = v10;
  }

  return v9;
}

uint64_t sub_18084AAE0(int a1, char *__s, int a3, UChar *s, int a5)
{
  uint64_t result = 0LL;
  if (!__s) {
    return result;
  }
  int v6 = a3;
  if (a3 < -1) {
    return result;
  }
  int32_t v7 = s;
  if (!s) {
    return result;
  }
  int32_t v8 = a5;
  if (a5 < -1) {
    return result;
  }
  uint64_t v9 = __s;
  if ((a3 & 0x80000000) == 0)
  {
    if ((a5 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  int v6 = strlen(__s);
  if (v8 < 0) {
LABEL_7:
  }
    int32_t v8 = u_strlen(v7);
LABEL_8:
  uint64_t result = (v6 - v8);
  if (v6 >= v8) {
    int v10 = v8;
  }
  else {
    int v10 = v6;
  }
  if (v10 >= 1)
  {
    int v11 = v10 + 1;
    while (1)
    {
      int v13 = *v9++;
      LOBYTE(v12) = v13;
      if (v13 < 0
        || (int v12 = v12,
            ((*(_DWORD *)((char *)dword_180A26AA4 + (((unint64_t)v12 >> 3) & 0x1C)) >> v12) & 1) == 0))
      {
        int v12 = -1;
      }

      unsigned int v15 = *v7++;
      unint64_t v14 = v15;
      uint64_t v16 = (v12 - v14);
      if ((_DWORD)v16) {
        break;
      }
      if (--v11 < 2) {
        return result;
      }
    }

    return v16;
  }

  return result;
}

uint64_t sub_18084ABD8(int a1, char *__s, int a3, UChar *s, int a5)
{
  uint64_t result = 0LL;
  if (!__s) {
    return result;
  }
  int v6 = a3;
  if (a3 < -1) {
    return result;
  }
  int32_t v7 = s;
  if (!s) {
    return result;
  }
  int32_t v8 = a5;
  if (a5 < -1) {
    return result;
  }
  uint64_t v9 = __s;
  if ((a3 & 0x80000000) == 0)
  {
    if ((a5 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  int v6 = strlen(__s);
  if (v8 < 0) {
LABEL_7:
  }
    int32_t v8 = u_strlen(v7);
LABEL_8:
  uint64_t result = (v6 - v8);
  if (v6 >= v8) {
    int v10 = v8;
  }
  else {
    int v10 = v6;
  }
  if (v10 >= 1)
  {
    int v11 = v10 + 1;
    while (1)
    {
      unsigned int v13 = *v9++;
      unint64_t v12 = v13;
      if (v13)
      {
        unint64_t v12 = byte_180A26AB4[v12];
      }

      unsigned int v15 = *v7++;
      unint64_t v14 = v15;
      uint64_t v16 = (v12 - v14);
      if ((_DWORD)v16) {
        break;
      }
      if (--v11 < 2) {
        return result;
      }
    }

    return v16;
  }

  return result;
}

uint64_t uprv_compareInvEbcdicAsAscii(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 != v3)
  {
LABEL_5:
    if (v2)
    {
      unint64_t v8 = byte_180A26AB4[v2];
      if (v3) {
        goto LABEL_10;
      }
    }

    else
    {
      LODWORD(v8) = 0;
      if (v3)
      {
LABEL_10:
        unint64_t v9 = byte_180A26AB4[v3];
        return (v8 - v9);
      }
    }

    LODWORD(v9) = 0;
    return (v8 - v9);
  }

  unsigned int v4 = a2 + 1;
  unsigned int v5 = a1 + 1;
  while (v2)
  {
    int v6 = *v5++;
    int v2 = v6;
    int v7 = *v4++;
    int v3 = v7;
    if (v2 != v7) {
      goto LABEL_5;
    }
  }

  return 0LL;
}

uint64_t uprv_ebcdicToAscii(unsigned __int8 a1)
{
  return (char)byte_180A26AB4[a1];
}

uint64_t uprv_ebcdicToLowercaseAscii(unsigned __int8 a1)
{
  return byte_180A26BB7[a1];
}

_BYTE *uprv_aestrncpy(_BYTE *a1, char *__s, int a3)
{
  if (a3 == -1) {
    a3 = strlen(__s) + 1;
  }
  int v5 = *__s;
  if (*__s) {
    BOOL v6 = a3 < 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    unint64_t v9 = a1;
    int v7 = a3;
  }

  else
  {
    unint64_t v8 = __s + 1;
    unint64_t v9 = a1;
    do
    {
      *v9++ = byte_180A26AB4[v5];
      int v7 = a3 - 1;
      int v10 = *v8++;
      int v5 = v10;
      if (v10) {
        BOOL v11 = a3 > 1;
      }
      else {
        BOOL v11 = 0;
      }
      --a3;
    }

    while (v11);
  }

  if (v7 >= 1) {
    bzero(v9, v7);
  }
  return a1;
}

_BYTE *uprv_eastrncpy(_BYTE *a1, char *__s, int a3)
{
  if (a3 == -1) {
    a3 = strlen(__s) + 1;
  }
  int v5 = *__s;
  if (*__s) {
    BOOL v6 = a3 < 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    unint64_t v9 = a1;
    int v7 = a3;
  }

  else
  {
    unint64_t v8 = __s + 1;
    unint64_t v9 = a1;
    do
    {
      int v10 = byte_180A26CB7[v5];
      if (!v10) {
        LOBYTE(v10) = 111;
      }
      *v9++ = v10;
      int v7 = a3 - 1;
      int v11 = *v8++;
      int v5 = v11;
      if (v11) {
        BOOL v12 = a3 > 1;
      }
      else {
        BOOL v12 = 0;
      }
      --a3;
    }

    while (v12);
  }

  if (v7 >= 1) {
    bzero(v9, v7);
  }
  return a1;
}

void uiter_setString(UCharIterator *iter, const UChar *s, int32_t length)
{
  if (iter)
  {
    if (s && length >= -1)
    {
      *ite__int16 r = *(UCharIterator *)byte_189717130;
      iter->context = s;
      if (length < 0) {
        length = u_strlen(s);
      }
      iter->length = length;
      iter->limit = length;
    }

    else
    {
      *ite__int16 r = *(UCharIterator *)byte_1897171A0;
    }
  }

void uiter_setUTF16BE(UCharIterator *iter, const char *s, int32_t length)
{
  if (iter)
  {
    int v3 = iter;
    if (!s)
    {
LABEL_5:
      *ite__int16 r = *(UCharIterator *)byte_1897171A0;
      return;
    }

    if (length == -1)
    {
      *ite__int16 r = *(UCharIterator *)byte_189717210;
      iter->context = s;
      if ((s & 1) != 0)
      {
        for (uint64_t i = 0LL; s[i] || s[i + 1]; i += 2LL)
          ;
        ite__int16 r = (UCharIterator *)((i + (unint64_t)(i < 0)) >> 1);
      }

      else
      {
        LODWORD(iter) = u_strlen((const UChar *)s);
      }
    }

    else
    {
      if ((length & 0x80000001) != 0) {
        goto LABEL_5;
      }
      *ite__int16 r = *(UCharIterator *)byte_189717210;
      LODWORD(iter) = length >> 1;
      v3->context = s;
    }

    v3->length = (int)iter;
    v3->limit = (int)iter;
  }

double uiter_setCharacterIterator(_OWORD *a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      a1[4] = xmmword_1897172C0;
      a1[5] = *(_OWORD *)&off_1897172D0;
      a1[6] = xmmword_1897172E0;
      *a1 = xmmword_189717280;
      a1[1] = *(_OWORD *)algn_189717290;
      double result = COERCE_DOUBLE(sub_18084B790);
      a1[2] = xmmword_1897172A0;
      a1[3] = *(_OWORD *)&off_1897172B0;
      *(void *)a1 = a2;
    }

    else
    {
      a1[4] = xmmword_1897171E0;
      a1[5] = *(_OWORD *)&off_1897171F0;
      a1[6] = xmmword_189717200;
      *a1 = xmmword_1897171A0;
      a1[1] = *(_OWORD *)algn_1897171B0;
      double result = COERCE_DOUBLE(sub_18084B5E4);
      a1[2] = xmmword_1897171C0;
      a1[3] = *(_OWORD *)&off_1897171D0;
    }
  }

  return result;
}

double uiter_setReplaceable(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      *(_OWORD *)a1 = xmmword_1897172F0;
      *(_OWORD *)(a1 + 16) = unk_189717300;
      *(_OWORD *)(a1 + 96) = xmmword_189717350;
      *(_OWORD *)(a1 + 64) = xmmword_189717330;
      *(_OWORD *)(a1 + 80) = *(_OWORD *)&off_189717340;
      *(_OWORD *)(a1 + 32) = xmmword_189717310;
      *(_OWORD *)(a1 + 48) = *(_OWORD *)&off_189717320;
      *(void *)a1 = a2;
      int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64LL))(a2);
      *(_DWORD *)(a1 + 8) = v3;
      *(_DWORD *)(a1 + 20) = v3;
    }

    else
    {
      *(_OWORD *)(a1 + 64) = xmmword_1897171E0;
      *(_OWORD *)(a1 + 80) = *(_OWORD *)&off_1897171F0;
      *(_OWORD *)(a1 + 96) = xmmword_189717200;
      *(_OWORD *)a1 = xmmword_1897171A0;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1897171B0;
      double result = COERCE_DOUBLE(sub_18084B5E4);
      *(_OWORD *)(a1 + 32) = xmmword_1897171C0;
      *(_OWORD *)(a1 + 48) = *(_OWORD *)&off_1897171D0;
    }
  }

  return result;
}

void uiter_setUTF8(UCharIterator *iter, const char *s, int32_t length)
{
  if (iter)
  {
    if (s && length >= -1)
    {
      *ite__int16 r = *(UCharIterator *)byte_189717360;
      iter->context = s;
      if (length < 0) {
        length = strlen(s);
      }
      iter->limit = length;
      if (length >= 2) {
        int32_t v4 = -1;
      }
      else {
        int32_t v4 = length;
      }
      iter->length = v4;
    }

    else
    {
      *ite__int16 r = *(UCharIterator *)byte_1897171A0;
    }
  }

UChar32 uiter_current32(UCharIterator *iter)
{
  unsigned int v2 = ((uint64_t (*)(void))iter->current)();
  UChar32 v3 = v2;
  if (v2 >> 11 == 27)
  {
    if ((v2 & 0x400) == 0)
    {
      ((void (*)(UCharIterator *, uint64_t, uint64_t))iter->move)(iter, 1LL, 1LL);
      unsigned int v4 = ((uint64_t (*)(UCharIterator *))iter->current)(iter);
      if (v4 >> 10 == 55) {
        UChar32 v3 = v4 + (v3 << 10) - 56613888;
      }
      uint64_t v5 = 0xFFFFFFFFLL;
      goto LABEL_10;
    }

    unsigned int v6 = ((uint64_t (*)(UCharIterator *))iter->previous)(iter);
    if (v6 >> 10 == 54) {
      UChar32 v3 = v3 + (v6 << 10) - 56613888;
    }
    if ((v6 & 0x80000000) == 0)
    {
      uint64_t v5 = 1LL;
LABEL_10:
      ((void (*)(UCharIterator *, uint64_t, uint64_t))iter->move)(iter, v5, 1LL);
    }
  }

  return v3;
}

UChar32 uiter_next32(UCharIterator *iter)
{
  unsigned int v2 = ((uint64_t (*)(void))iter->next)();
  if (v2 >> 10 == 54)
  {
    unsigned int v3 = ((uint64_t (*)(UCharIterator *))iter->next)(iter);
    if (v3 >> 10 == 55)
    {
      return v3 + (v2 << 10) - 56613888;
    }

    else if ((v3 & 0x80000000) == 0)
    {
      ((void (*)(UCharIterator *, uint64_t, uint64_t))iter->move)(iter, 0xFFFFFFFFLL, 1LL);
    }
  }

  return v2;
}

UChar32 uiter_previous32(UCharIterator *iter)
{
  unsigned int v2 = ((uint64_t (*)(void))iter->previous)();
  if (v2 >> 10 == 55)
  {
    unsigned int v3 = ((uint64_t (*)(UCharIterator *))iter->previous)(iter);
    if (v3 >> 10 == 54)
    {
      return v2 + (v3 << 10) - 56613888;
    }

    else if ((v3 & 0x80000000) == 0)
    {
      ((void (*)(UCharIterator *, uint64_t, uint64_t))iter->move)(iter, 1LL, 1LL);
    }
  }

  return v2;
}

uint32_t uiter_getState(const UCharIterator *iter)
{
  else {
    return -1;
  }
}

void uiter_setState(UCharIterator *iter, uint32_t state, UErrorCode *pErrorCode)
{
  if (pErrorCode && *(int *)pErrorCode <= 0)
  {
    if (iter)
    {
      setState = (void (*)(void))iter->setState;
      if (setState)
      {
        setState();
        return;
      }

      UErrorCode v4 = U_UNSUPPORTED_ERROR;
    }

    else
    {
      UErrorCode v4 = U_ILLEGAL_ARGUMENT_ERROR;
    }

    *UErrorCode pErrorCode = v4;
  }

uint64_t sub_18084B424(unsigned int *a1, int a2)
{
  uint64_t result = 0LL;
  switch(a2)
  {
    case 0:
      uint64_t result = a1[3];
      break;
    case 1:
      uint64_t result = a1[4];
      break;
    case 2:
      uint64_t result = a1[5];
      break;
    case 3:
      return result;
    case 4:
      uint64_t result = a1[2];
      break;
    default:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }

  return result;
}

uint64_t sub_18084B478(_DWORD *a1, int a2, int a3)
{
  switch(a3)
  {
    case 0:
      int v3 = a1[3];
      goto LABEL_7;
    case 1:
      int v3 = a1[4];
      goto LABEL_7;
    case 2:
      int v3 = a1[5];
      goto LABEL_7;
    case 3:
      goto LABEL_8;
    case 4:
      int v3 = a1[2];
LABEL_7:
      a2 += v3;
LABEL_8:
      uint64_t v4 = a1[3];
      if (a2 >= (int)v4)
      {
        LODWORD(v4) = a1[5];
        else {
          uint64_t v4 = a2;
        }
      }

      a1[4] = v4;
      break;
    default:
      uint64_t v4 = 0xFFFFFFFFLL;
      break;
  }

  return v4;
}

BOOL sub_18084B4E8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) < *(_DWORD *)(a1 + 20);
}

BOOL sub_18084B4F8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) > *(_DWORD *)(a1 + 12);
}

uint64_t sub_18084B508(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 16);
  else {
    return *(unsigned __int16 *)(*(void *)a1 + 2 * v1);
  }
}

uint64_t sub_18084B52C(uint64_t *a1)
{
  uint64_t v1 = *((int *)a1 + 4);
  uint64_t v2 = *a1;
  *((_DWORD *)a1 + 4) = v1 + 1;
  return *(unsigned __int16 *)(v2 + 2 * v1);
}

uint64_t sub_18084B558(uint64_t *a1)
{
  int v1 = *((_DWORD *)a1 + 4);
  if (v1 <= *((_DWORD *)a1 + 3)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = *a1;
  int v3 = v1 - 1;
  *((_DWORD *)a1 + 4) = v3;
  return *(unsigned __int16 *)(v2 + 2LL * v3);
}

uint64_t sub_18084B580(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

_DWORD *sub_18084B588(_DWORD *result, int a2, int *a3)
{
  if (a3 && *a3 <= 0)
  {
    if (result)
    {
      if (result[3] <= a2 && result[5] >= a2)
      {
        result[4] = a2;
        return result;
      }

      int v3 = 8;
    }

    else
    {
      int v3 = 1;
    }

    *a3 = v3;
  }

  return result;
}

uint64_t sub_18084B5D4()
{
  return 0LL;
}

uint64_t sub_18084B5DC()
{
  return 0LL;
}

uint64_t sub_18084B5E4()
{
  return 0LL;
}

uint64_t sub_18084B5EC()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_18084B5F4()
{
  return 0xFFFFFFFFLL;
}

void sub_18084B5FC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 16;
}

uint64_t sub_18084B608(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 16);
  else {
    return *(unsigned __int8 *)(*(void *)a1 + 2 * (int)v1 + 1LL) | (*(unsigned __int8 *)(*(void *)a1 + 2 * v1) << 8);
  }
}

uint64_t sub_18084B63C(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = v1 + 1;
  return *(unsigned __int8 *)(*(void *)a1 + 2 * (int)v1 + 1LL) | (*(unsigned __int8 *)(*(void *)a1 + 2 * v1) << 8);
}

uint64_t sub_18084B678(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if (v1 <= *(_DWORD *)(a1 + 12)) {
    return 0xFFFFFFFFLL;
  }
  int v2 = v1 - 1;
  *(_DWORD *)(a1 + 16) = v2;
  return *(unsigned __int8 *)(*(void *)a1 + 2 * v2 + 1LL) | (*(unsigned __int8 *)(*(void *)a1 + 2LL * v2) << 8);
}

uint64_t sub_18084B6B0(uint64_t a1, int a2)
{
  uint64_t result = 0LL;
  switch(a2)
  {
    case 0:
      uint64_t result = *(unsigned int *)(*(void *)a1 + 16LL);
      break;
    case 1:
      uint64_t result = *(unsigned int *)(*(void *)a1 + 12LL);
      break;
    case 2:
      uint64_t result = *(unsigned int *)(*(void *)a1 + 20LL);
      break;
    case 3:
      return result;
    case 4:
      uint64_t result = *(unsigned int *)(*(void *)a1 + 8LL);
      break;
    default:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }

  return result;
}

uint64_t sub_18084B714(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  if (a3 < 3) {
    return (*(uint64_t (**)(void))(*(void *)*a1 + 192LL))();
  }
  if (a3 == 4)
  {
    uint64_t v5 = *a1;
    goto LABEL_7;
  }

  if (a3 == 3)
  {
    uint64_t v5 = *a1;
LABEL_7:
    (*(void (**)(uint64_t))(*(void *)v5 + 120LL))(v5);
    return *(unsigned int *)(*a1 + 12);
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_18084B790(void *a1)
{
  return (*(uint64_t (**)(void))(*(void *)*a1 + 56LL))(*a1);
}

uint64_t sub_18084B7A0(void *a1)
{
  return (*(uint64_t (**)(void))(*(void *)*a1 + 184LL))(*a1);
}

uint64_t sub_18084B7B0(void *a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)*a1 + 136LL))(*a1);
  if ((_DWORD)v2 == 0xFFFF)
  {
    else {
      return 0xFFFFFFFFLL;
    }
  }

  return v2;
}

uint64_t sub_18084B808(void *a1)
{
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_18084B850(void *a1)
{
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_18084B898(uint64_t a1)
{
  return *(unsigned int *)(*(void *)a1 + 12LL);
}

_DWORD *sub_18084B8A4(_DWORD *result, int a2, int *a3)
{
  if (a3 && *a3 <= 0)
  {
    if (result && (uint64_t result = *(_DWORD **)result) != 0LL)
    {
      if (result[4] <= a2 && result[5] >= a2) {
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 120LL))(result);
      }
      int v3 = 8;
    }

    else
    {
      int v3 = 1;
    }

    *a3 = v3;
  }

  return result;
}

uint64_t sub_18084B8FC(_DWORD *a1)
{
  if (a1[4] >= a1[5]) {
    return 0xFFFFFFFFLL;
  }
  else {
    return (*(uint64_t (**)(void))(**(void **)a1 + 72LL))(*(void *)a1);
  }
}

uint64_t sub_18084B930(uint64_t *a1)
{
  int v1 = *((_DWORD *)a1 + 4);
  if (v1 >= *((_DWORD *)a1 + 5)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = *a1;
  *((_DWORD *)a1 + 4) = v1 + 1;
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 72LL))(v2);
}

uint64_t sub_18084B970(uint64_t *a1)
{
  int v1 = *((_DWORD *)a1 + 4);
  if (v1 <= *((_DWORD *)a1 + 3)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = *a1;
  *((_DWORD *)a1 + 4) = v1 - 1;
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 72LL))(v2);
}

uint64_t sub_18084B9B0(uint64_t *a1, int a2)
{
  uint64_t v2 = 0LL;
  switch(a2)
  {
    case 0:
    case 3:
      return v2;
    case 1:
      uint64_t v2 = *((unsigned int *)a1 + 4);
      if ((v2 & 0x80000000) == 0) {
        return v2;
      }
      int v5 = *((_DWORD *)a1 + 3);
      if (v5 >= 1)
      {
        int v6 = 0;
        int v7 = 0;
        uint64_t v8 = *a1;
        while (1)
        {
          uint64_t v9 = v7;
          uint64_t v10 = v7 + 1LL;
          int v11 = *(char *)(v8 + v7);
          if ((v11 & 0x80000000) == 0 || (_DWORD)v10 == v5) {
            goto LABEL_30;
          }
          unsigned int v12 = *(unsigned __int8 *)(v8 + v7);
          if (v11 < 0xE0u)
          {
            if (v12 < 0xC2) {
              goto LABEL_30;
            }
            unsigned int v16 = v11 & 0x1F;
          }

          else
          {
            if (v12 > 0xEF)
            {
              if (v12 > 0xF4) {
                goto LABEL_30;
              }
              unsigned int v18 = v12 - 240;
              unint64_t v13 = *(unsigned __int8 *)(v8 + v10);
              uint64_t v19 = v9 + 2;
              LODWORD(v10) = *((_DWORD *)a1 + 3);
              if ((_DWORD)v9 + 2 == v5) {
                goto LABEL_30;
              }
              unsigned int v14 = *(unsigned __int8 *)(v8 + v19) ^ 0x80;
              if (v14 > 0x3F)
              {
                LODWORD(v10) = v19;
LABEL_30:
                int v17 = 1;
                goto LABEL_31;
              }

              LODWORD(v13) = v13 & 0x3F | (v18 << 6);
              LODWORD(v10) = v19;
            }

            else
            {
              unint64_t v13 = v11 & 0xF;
              unsigned int v14 = *(_BYTE *)(v8 + v10) & 0x3F;
            }

            int v15 = v10 + 1;
            LODWORD(v10) = *((_DWORD *)a1 + 3);
            if (v15 == v5) {
              goto LABEL_30;
            }
            unsigned int v16 = v14 | ((_DWORD)v13 << 6);
            LODWORD(v10) = v15;
          }

          LODWORD(v10) = v10 + 1;
          if (v16 <= 0x3FF) {
            goto LABEL_30;
          }
          int v17 = 2;
LABEL_31:
          v6 += v17;
          int v7 = v10;
        }
      }

      LODWORD(v10) = 0;
      int v6 = 0;
LABEL_58:
      *((_DWORD *)a1 + 3) = v10;
      if ((_DWORD)v10 == *((_DWORD *)a1 + 5)) {
        *((_DWORD *)a1 + 2) = v6;
      }
      uint64_t v2 = v6 - (*((_DWORD *)a1 + 6) != 0);
      *((_DWORD *)a1 + 4) = v2;
      return v2;
    case 2:
    case 4:
      uint64_t v2 = *((unsigned int *)a1 + 2);
      if ((v2 & 0x80000000) == 0) {
        return v2;
      }
      uint64_t v3 = *a1;
      int v4 = *((_DWORD *)a1 + 3);
      LODWORD(v2) = *((_DWORD *)a1 + 4);
      if ((v2 & 0x80000000) != 0)
      {
        if (v4 < 1)
        {
          LODWORD(v22) = 0;
          uint64_t v2 = 0LL;
LABEL_62:
          BOOL v32 = *((_DWORD *)a1 + 6) != 0;
          *((_DWORD *)a1 + 3) = v22;
          *((_DWORD *)a1 + 4) = v2 - v32;
          int v4 = v22;
          goto LABEL_63;
        }

        LODWORD(v2) = 0;
        int v20 = 0;
        while (1)
        {
          uint64_t v21 = v20;
          uint64_t v22 = v20 + 1LL;
          int v23 = *(char *)(v3 + v20);
          if ((v23 & 0x80000000) == 0 || (_DWORD)v22 == v4) {
            goto LABEL_54;
          }
          unsigned int v24 = *(unsigned __int8 *)(v3 + v20);
          if (v23 < 0xE0u)
          {
            if (v24 < 0xC2) {
              goto LABEL_54;
            }
            unsigned int v28 = v23 & 0x1F;
          }

          else
          {
            if (v24 > 0xEF)
            {
              if (v24 > 0xF4) {
                goto LABEL_54;
              }
              unsigned int v30 = v24 - 240;
              unint64_t v25 = *(unsigned __int8 *)(v3 + v22);
              uint64_t v31 = v21 + 2;
              LODWORD(v22) = *((_DWORD *)a1 + 3);
              if ((_DWORD)v21 + 2 == v4) {
                goto LABEL_54;
              }
              unsigned int v26 = *(unsigned __int8 *)(v3 + v31) ^ 0x80;
              if (v26 > 0x3F)
              {
                LODWORD(v22) = v31;
LABEL_54:
                int v29 = 1;
                goto LABEL_55;
              }

              LODWORD(v25) = v25 & 0x3F | (v30 << 6);
              LODWORD(v22) = v31;
            }

            else
            {
              unint64_t v25 = v23 & 0xF;
              unsigned int v26 = *(_BYTE *)(v3 + v22) & 0x3F;
            }

            int v27 = v22 + 1;
            LODWORD(v22) = *((_DWORD *)a1 + 3);
            if (v27 == v4) {
              goto LABEL_54;
            }
            unsigned int v28 = v26 | ((_DWORD)v25 << 6);
            LODWORD(v22) = v27;
          }

          LODWORD(v22) = v22 + 1;
          if (v28 <= 0x3FF) {
            goto LABEL_54;
          }
          int v29 = 2;
LABEL_55:
          uint64_t v2 = (v29 + v2);
          int v20 = v22;
        }
      }

      if (*((_DWORD *)a1 + 6)) {
        uint64_t v2 = (v2 + 1);
      }
      else {
        uint64_t v2 = v2;
      }
LABEL_63:
      int v33 = *((_DWORD *)a1 + 5);
      if (v4 < v33)
      {
        do
        {
          uint64_t v34 = v4;
          uint64_t v35 = v4 + 1LL;
          int v36 = *(char *)(v3 + v4);
          if ((v36 & 0x80000000) == 0 || (_DWORD)v35 == v33) {
            goto LABEL_83;
          }
          unsigned int v37 = *(unsigned __int8 *)(v3 + v4);
          if (v36 < 0xE0u)
          {
            if (v37 < 0xC2) {
              goto LABEL_83;
            }
            unsigned int v41 = v36 & 0x1F;
          }

          else
          {
            if (v37 > 0xEF)
            {
              if (v37 > 0xF4) {
                goto LABEL_83;
              }
              unsigned int v43 = v37 - 240;
              unint64_t v38 = *(unsigned __int8 *)(v3 + v35);
              uint64_t v44 = v34 + 2;
              LODWORD(v35) = *((_DWORD *)a1 + 5);
              if ((_DWORD)v34 + 2 == v33) {
                goto LABEL_83;
              }
              unsigned int v39 = *(unsigned __int8 *)(v3 + v44) ^ 0x80;
              if (v39 > 0x3F)
              {
                LODWORD(v35) = v44;
LABEL_83:
                int v42 = 1;
                goto LABEL_84;
              }

              LODWORD(v38) = v38 & 0x3F | (v43 << 6);
              LODWORD(v35) = v44;
            }

            else
            {
              unint64_t v38 = v36 & 0xF;
              unsigned int v39 = *(_BYTE *)(v3 + v35) & 0x3F;
            }

            int v40 = v35 + 1;
            LODWORD(v35) = *((_DWORD *)a1 + 5);
            if (v40 == v33) {
              goto LABEL_83;
            }
            unsigned int v41 = v39 | ((_DWORD)v38 << 6);
            LODWORD(v35) = v40;
          }

          LODWORD(v35) = v35 + 1;
          if (v41 <= 0x3FF) {
            goto LABEL_83;
          }
          int v42 = 2;
LABEL_84:
          uint64_t v2 = (v42 + v2);
          int v4 = v35;
        }

        while ((int)v35 < v33);
      }

      *((_DWORD *)a1 + 2) = v2;
      return v2;
    default:
      return 0xFFFFFFFFLL;
  }

uint64_t sub_18084BDC0(uint64_t a1, signed int a2, int a3)
{
  signed int v3 = a2;
  switch(a3)
  {
    case 0:
    case 3:
      goto LABEL_7;
    case 1:
      uint64_t v7 = *(unsigned int *)(a1 + 16);
      if ((v7 & 0x80000000) == 0)
      {
        signed int v3 = v7 + a2;
        goto LABEL_7;
      }

      if (!a2) {
        return 4294967294LL;
      }
      uint64_t v9 = *(unsigned int *)(a1 + 12);
      goto LABEL_56;
    case 2:
    case 4:
      int v5 = *(_DWORD *)(a1 + 8);
      if ((v5 & 0x80000000) == 0)
      {
        signed int v3 = v5 + a2;
LABEL_7:
        if (v3 > 0)
        {
          uint64_t v6 = *(unsigned int *)(a1 + 8);
          if ((v6 & 0x80000000) == 0 && (int)v6 <= v3)
          {
            *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 20);
            *(_DWORD *)(a1 + 16) = v6;
            *(_DWORD *)(a1 + 24) = 0;
            return v6;
          }

          uint64_t v8 = (_DWORD *)(a1 + 16);
          uint64_t v7 = *(unsigned int *)(a1 + 16);
          if ((v7 & 0x80000000) != 0 || v3 < v7 >> 1)
          {
            uint64_t v6 = 0LL;
            *(_DWORD *)(a1 + 24) = 0;
            *(_DWORD *)(a1 + 12) = 0;
          }

          else
          {
            *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 20);
            *(_DWORD *)(a1 + 16) = v6;
            uint64_t v8 = (_DWORD *)(a1 + 24);
          }

          _DWORD *v8 = 0;
          uint64_t v7 = v6;
LABEL_20:
          v3 -= v7;
          if (!v3) {
            return v7;
          }
          uint64_t v9 = *(unsigned int *)(a1 + 12);
LABEL_22:
          uint64_t v10 = *(const uint8_t **)a1;
          if (v3 < 1)
          {
            if (*(_DWORD *)(a1 + 24))
            {
              *(_DWORD *)(a1 + 24) = 0;
              uint64_t v11 = (v9 - 4);
              uint64_t v6 = (v7 - 1);
              ++v3;
            }

            else
            {
              uint64_t v11 = v9;
              uint64_t v6 = v7;
            }

            if (v3 < 0 && (int)v11 >= 1)
            {
              do
              {
                puint64_t i = v11 - 1;
                int v25 = (char)v10[(v11 - 1)];
                if (v25 < 0 && (UChar32 v26 = utf8_prevCharSafeBody(v10, 0, &pi, v25, -3), v26 >= 0x10000))
                {
                  if (v3 >= -1)
                  {
                    uint64_t v11 = (pi + 4);
                    *(_DWORD *)(a1 + 24) = v26;
                    uint64_t v6 = (v6 - 1);
                    break;
                  }

                  int v27 = 2;
                  int v28 = -2;
                }

                else
                {
                  int v27 = 1;
                  int v28 = -1;
                }

                uint64_t v6 = (v6 + v28);
                uint64_t v11 = pi;
                v3 += v27;
              }

              while (v3 < 0 && pi > 0);
            }
          }

          else
          {
            uint64_t v11 = *(unsigned int *)(a1 + 20);
            uint64_t v6 = v7;
            if (*(_DWORD *)(a1 + 24))
            {
              *(_DWORD *)(a1 + 24) = 0;
              uint64_t v6 = (v7 + 1);
              --v3;
            }

            unsigned int v12 = 0;
            if (v3 && (int)v9 < (int)v11)
            {
              do
              {
                uint64_t v13 = (int)v9;
                int v14 = (char)v10[(int)v9];
                uint64_t v9 = (int)v9 + 1LL;
                int v15 = -1;
                int v16 = 1;
                if ((v14 & 0x80000000) == 0 || (_DWORD)v9 == (_DWORD)v11) {
                  goto LABEL_47;
                }
                char v17 = v14;
                if (v14 < 0xE0u)
                {
                  int v20 = v14 & 0x1F;
                }

                else
                {
                  if (v14 > 0xEFu)
                  {
                    if (v14 > 0xF4u)
                    {
LABEL_46:
                      int v15 = -1;
                      goto LABEL_47;
                    }

                    int v22 = v14 - 240;
                    unint64_t v18 = v10[v9];
                    uint64_t v9 = v13 + 2;
                    if ((_DWORD)v13 + 2 == (_DWORD)v11)
                    {
LABEL_44:
                      int v15 = -1;
                      int v16 = 1;
                      uint64_t v9 = v11;
                      goto LABEL_47;
                    }

                    unsigned int v19 = v10[v9] ^ 0x80;
                    if (v19 > 0x3F)
                    {
                      int v15 = -1;
                      int v16 = 1;
                      goto LABEL_47;
                    }

                    LODWORD(v18) = v18 & 0x3F | (v22 << 6);
                  }

                  else
                  {
                    unint64_t v18 = v14 & 0xF;
                    unsigned int v19 = v10[v9] & 0x3F;
                  }

                  uint64_t v9 = (v9 + 1);
                  if ((_DWORD)v9 == (_DWORD)v11) {
                    goto LABEL_44;
                  }
                  int v20 = v19 | ((_DWORD)v18 << 6);
                }

                unsigned int v21 = v10[(int)v9] ^ 0x80;
                if (v21 > 0x3F || (v12 = v21 | (v20 << 6), uint64_t v9 = (v9 + 1), v12 < 0x10000))
                {
LABEL_45:
                  int v15 = -1;
                  int v16 = 1;
                  goto LABEL_47;
                }

                if (v3 <= 1)
                {
                  *(_DWORD *)(a1 + 24) = v12;
                  uint64_t v6 = (v6 + 1);
                  break;
                }

                int v15 = -2;
                int v16 = 2;
LABEL_47:
                unsigned int v12 = 0;
                uint64_t v6 = (v6 + v16);
                v3 += v15;
              }

              while (v3 >= 1 && (int)v9 < (int)v11);
            }

            if ((_DWORD)v9 == (_DWORD)v11)
            {
              int v29 = *(_DWORD *)(a1 + 8);
              if (v29 < 0)
              {
                if ((v7 & 0x80000000) == 0)
                {
                  if (v12) {
                    int v32 = v6 + 1;
                  }
                  else {
                    int v32 = v6;
                  }
                  *(_DWORD *)(a1 + 8) = v32;
                }
              }

              else if ((v7 & 0x80000000) != 0)
              {
                int v30 = v29 - (v12 != 0);
                *(_DWORD *)(a1 + 16) = v30;
LABEL_83:
                *(_DWORD *)(a1 + 12) = v11;
                if ((v30 & 0x80000000) == 0)
                {
                  *(_DWORD *)(a1 + 16) = v6;
                  return v6;
                }

                if ((int)v11 <= 1)
                {
                  *(_DWORD *)(a1 + 16) = v11;
                  return v11;
                }

                return 4294967294LL;
              }
            }

            else
            {
              uint64_t v11 = v9;
            }
          }

          int v30 = *(_DWORD *)(a1 + 16);
          goto LABEL_83;
        }

BOOL sub_18084C1CC(_DWORD *a1)
{
  return a1[3] < a1[5] || a1[6] != 0;
}

BOOL sub_18084C1F4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) > 0;
}

uint64_t sub_18084C204(uint64_t *a1)
{
  if (*((_DWORD *)a1 + 6)) {
    return a1[3] & 0x3FF | 0xDC00;
  }
  uint64_t v2 = *((int *)a1 + 3);
  int v3 = *((_DWORD *)a1 + 5);
  uint64_t v4 = *a1;
  int v5 = *(char *)(*a1 + v2);
  uint64_t result = *(unsigned __int8 *)(*a1 + v2);
  if (v5 < 0)
  {
    unint64_t v6 = v2 + 1;
    if ((_DWORD)v2 + 1 != v3)
    {
      if (result < 0xE0)
      {
        unsigned int v9 = result & 0x1F;
      }

      else
      {
        if (result > 0xEF)
        {
          unint64_t v6 = *(unsigned __int8 *)(v4 + v6);
          uint64_t v11 = v2 + 2;
          if ((_DWORD)v2 + 2 == v3) {
            return 65533LL;
          }
          unsigned int v8 = *(unsigned __int8 *)(v4 + v11) ^ 0x80;
          if (v8 > 0x3F) {
            return 65533LL;
          }
          LODWORD(v7) = v6 & 0x3F | (((_DWORD)result - 240) << 6);
          LODWORD(v6) = v11;
        }

        else
        {
          uint64_t v7 = v5 & 0xF;
          unsigned int v8 = *(_BYTE *)(v4 + v6) & 0x3F;
        }

        LODWORD(v6) = v6 + 1;
        if ((_DWORD)v6 == v3) {
          return 65533LL;
        }
        unsigned int v9 = v8 | ((_DWORD)v7 << 6);
      }

      unsigned int v10 = *(unsigned __int8 *)(v4 + (int)v6) ^ 0x80;
      if (v10 <= 0x3F)
      {
        uint64_t result = v10 | (v9 << 6);
        if (WORD1(result)) {
          return (unsigned __int16)((v9 >> 4) - 10304);
        }
        return result;
      }
    }

    return 65533LL;
  }

  return result;
}

uint64_t sub_18084C330(uint64_t *a1)
{
  if (*((_DWORD *)a1 + 6))
  {
    uint64_t v1 = a1[3] & 0x3FF | 0xDC00;
    *((_DWORD *)a1 + 6) = 0;
    int v2 = *((_DWORD *)a1 + 4);
    if ((v2 & 0x80000000) == 0) {
      *((_DWORD *)a1 + 4) = v2 + 1;
    }
    return v1;
  }

  uint64_t v3 = *((int *)a1 + 3);
  int v4 = *((_DWORD *)a1 + 5);
  uint64_t v5 = *a1;
  uint64_t v6 = v3 + 1;
  *((_DWORD *)a1 + 3) = v3 + 1;
  int v7 = *(char *)(v5 + v3);
  uint64_t v1 = *(unsigned __int8 *)(v5 + v3);
  if (v7 < 0)
  {
    if ((_DWORD)v6 == v4)
    {
LABEL_7:
      uint64_t v1 = 65533LL;
      LODWORD(v6) = v4;
      goto LABEL_25;
    }

    if (v1 < 0xE0)
    {
      int v10 = v1 & 0x1F;
    }

    else
    {
      if (v1 > 0xEF)
      {
        int v12 = v1 - 240;
        unint64_t v8 = *(unsigned __int8 *)(v5 + v6);
        uint64_t v6 = v3 + 2;
        *((_DWORD *)a1 + 3) = v3 + 2;
        if ((_DWORD)v3 + 2 == v4) {
          goto LABEL_7;
        }
        unsigned int v9 = *(unsigned __int8 *)(v5 + v6) ^ 0x80;
        if (v9 > 0x3F)
        {
          uint64_t v1 = 65533LL;
          goto LABEL_25;
        }

        LODWORD(v8) = v8 & 0x3F | (v12 << 6);
      }

      else
      {
        unint64_t v8 = v7 & 0xF;
        unsigned int v9 = *(_BYTE *)(v5 + v6) & 0x3F;
      }

      LODWORD(v6) = v6 + 1;
      *((_DWORD *)a1 + 3) = v6;
      if ((_DWORD)v6 == v4) {
        goto LABEL_7;
      }
      int v10 = v9 | ((_DWORD)v8 << 6);
    }

    unsigned int v11 = *(unsigned __int8 *)(v5 + (int)v6) ^ 0x80;
    if (v11 <= 0x3F)
    {
      uint64_t v1 = v11 | (v10 << 6);
      LODWORD(v6) = v6 + 1;
      *((_DWORD *)a1 + 3) = v6;
      goto LABEL_25;
    }

uint64_t sub_18084C4E8(int32_t *pi)
{
  unsigned int v2 = pi[6];
  if (v2)
  {
    int v3 = (v2 >> 10) + 55232;
    pi[6] = 0;
    int v4 = pi[4];
    pi[3] -= 4;
    if (v4 >= 1) {
      pi[4] = v4 - 1;
    }
    return (unsigned __int16)v3;
  }

  unint64_t v8 = pi + 3;
  int32_t v7 = pi[3];
  BOOL v9 = __OFSUB__(v7, 1);
  int v10 = v7 - 1;
  if (v10 < 0 != v9) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v11 = *(const uint8_t **)pi;
  pi[3] = v10;
  int v12 = (char)v11[v10];
  uint64_t CharSafeBody = v12;
  if (v12 < 0) {
    uint64_t CharSafeBody = utf8_prevCharSafeBody(v11, 0, pi + 3, v12, -3);
  }
  int32_t v13 = pi[4];
  BOOL v9 = __OFSUB__(v13, 1);
  int v14 = v13 - 1;
  if (v14 < 0 != v9)
  {
    int v14 = *v8;
    if (*v8 > 1) {
      goto LABEL_15;
    }
  }

  pi[4] = v14;
LABEL_15:
  if ((int)CharSafeBody >= 0x10000)
  {
    pi[3] += 4;
    pi[6] = CharSafeBody;
    return CharSafeBody & 0x3FF | 0xDC00;
  }

  return CharSafeBody;
}

uint64_t sub_18084C5C4(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 24) != 0) | (2 * *(_DWORD *)(a1 + 12));
}

uint64_t sub_18084C5DC(uint64_t result, unsigned int a2, int *a3)
{
  if (a3 && *a3 <= 0)
  {
    uint64_t v4 = result;
    if (result)
    {
      if (((*(_DWORD *)(result + 24) != 0) | (2 * *(_DWORD *)(result + 12))) == a2) {
        return result;
      }
      if ((a2 & 0xFFFFFFF9) != 1)
      {
        uint64_t v5 = a2 >> 1;
        if (*(_DWORD *)(result + 20) >= (int)v5)
        {
          if (a2 >= 4) {
            int v6 = -1;
          }
          else {
            int v6 = a2 >> 1;
          }
          *(_DWORD *)(result + 12) = v5;
          *(_DWORD *)(result + 16) = v6;
          if ((a2 & 1) == 0)
          {
            *(_DWORD *)(result + 24) = 0;
            return result;
          }

          uint64_t result = *(void *)result;
          uint64_t v8 = v5 - 1;
          puint64_t i = v8;
          int v9 = *(char *)(result + v8);
          if (v9 < 0)
          {
            uint64_t result = utf8_prevCharSafeBody((const uint8_t *)result, 0, &pi, v9, -3);
            if ((int)result >= 0x10000)
            {
              *(_DWORD *)(v4 + 24) = result;
              return result;
            }
          }
        }
      }

      int v7 = 8;
    }

    else
    {
      int v7 = 1;
    }

    *a3 = v7;
  }

  return result;
}

void *ulist_createEmptyList(int *a1)
{
  if (*a1 > 0) {
    return 0LL;
  }
  uint64_t result = uprv_malloc(0x20uLL);
  if (result)
  {
    void *result = 0LL;
    result[1] = 0LL;
    *((_DWORD *)result + 6) = 0;
    result[2] = 0LL;
  }

  else
  {
    *a1 = 7;
  }

  return result;
}

void ulist_addItemEndList(uint64_t a1, void *a2, int a3, int *a4)
{
  if (a2 && a1 && *a4 < 1)
  {
    uint64_t v8 = uprv_malloc(0x20uLL);
    if (v8)
    {
      *(void *)uint64_t v8 = a2;
      v8[24] = a3;
      int v9 = *(_DWORD *)(a1 + 24);
      if (v9)
      {
        uint64_t v10 = *(void *)(a1 + 16);
        *((void *)v8 + icu::UVector32::~UVector32(this + 1) = 0LL;
        *((void *)v8 + 2) = v10;
        *(void *)(v10 + 8) = v8;
      }

      else
      {
        *((void *)v8 + icu::UVector32::~UVector32(this + 1) = 0LL;
        *((void *)v8 + 2) = 0LL;
        *(void *)(a1 + 8) = v8;
      }

      *(void *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 24) = v9 + 1;
    }

    else
    {
      if (a3) {
        uprv_free(a2);
      }
      *a4 = 7;
    }
  }

  else if (a3)
  {
    uprv_free(a2);
  }

void ulist_addItemBeginList(uint64_t a1, void *a2, int a3, int *a4)
{
  if (a2 && a1 && *a4 < 1)
  {
    uint64_t v8 = uprv_malloc(0x20uLL);
    if (v8)
    {
      *(void *)uint64_t v8 = a2;
      v8[24] = a3;
      int v9 = *(_DWORD *)(a1 + 24);
      if (v9)
      {
        uint64_t v10 = (void *)(a1 + 8);
        uint64_t v11 = *(void *)(a1 + 8);
        *((void *)v8 + icu::UVector32::~UVector32(this + 1) = v11;
        *((void *)v8 + 2) = 0LL;
        *(void *)(v11 + 16) = v8;
      }

      else
      {
        *((void *)v8 + icu::UVector32::~UVector32(this + 1) = 0LL;
        *((void *)v8 + 2) = 0LL;
        uint64_t v10 = (void *)(a1 + 16);
        *(void *)(a1 + 8) = v8;
      }

      void *v10 = v8;
      *(_DWORD *)(a1 + 24) = v9 + 1;
    }

    else
    {
      if (a3) {
        uprv_free(a2);
      }
      *a4 = 7;
    }
  }

  else if (a3)
  {
    uprv_free(a2);
  }

uint64_t ulist_containsString(uint64_t result, const void *a2, int a3)
{
  if (result)
  {
    uint64_t v3 = *(void *)(result + 8);
    if (v3)
    {
      size_t v6 = a3;
      while (strlen(*(const char **)v3) != a3 || memcmp(a2, *(const void **)v3, v6))
      {
        uint64_t v3 = *(void *)(v3 + 8);
        if (!v3) {
          return 0LL;
        }
      }

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t ulist_removeString(uint64_t result, char *__s1)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 8);
    if (v3)
    {
      while (strcmp(__s1, *(const char **)v3))
      {
        uint64_t v3 = *(void *)(v3 + 8);
        if (!v3) {
          return 0LL;
        }
      }

      uint64_t v5 = *(void *)(v3 + 8);
      uint64_t v6 = *(void *)(v3 + 16);
      if (v6)
      {
        *(void *)(v6 + 8) = v5;
        uint64_t v5 = *(void *)(v3 + 8);
      }

      else
      {
        *(void *)(v2 + 8) = v5;
      }

      if (v5) {
        uint64_t v7 = v5;
      }
      else {
        uint64_t v7 = v2;
      }
      *(void *)(v7 + 16) = v6;
      if (*(void *)v2 == v3) {
        *(void *)uint64_t v2 = v5;
      }
      --*(_DWORD *)(v2 + 24);
      if (*(_BYTE *)(v3 + 24)) {
        uprv_free(*(void **)v3);
      }
      uprv_free((void *)v3);
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void *ulist_getNext(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v1 = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t v1 = (void *)*v1;
    *(void *)a1 = *(void *)(*(void *)a1 + 8LL);
  }

  return v1;
}

uint64_t ulist_getListSize(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 24);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void *ulist_resetList(void *result)
{
  if (result) {
    void *result = result[1];
  }
  return result;
}

void ulist_deleteList(void *a1)
{
  if (a1)
  {
    uint64_t v2 = a1[1];
    if (v2)
    {
      do
      {
        uint64_t v3 = *(void *)(v2 + 8);
        if (*(_BYTE *)(v2 + 24)) {
          uprv_free(*(void **)v2);
        }
        uprv_free((void *)v2);
        uint64_t v2 = v3;
      }

      while (v3);
    }

    uprv_free(a1);
  }

void ulist_close_keyword_values_iterator(void **a1)
{
  if (a1)
  {
    ulist_deleteList(a1[1]);
    uprv_free(a1);
  }

uint64_t ulist_count_keyword_values(uint64_t a1, int *a2)
{
  if (*a2 <= 0 && (uint64_t v3 = *(void *)(a1 + 8)) != 0) {
    return *(unsigned int *)(v3 + 24);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

const char *ulist_next_keyword_value(uint64_t a1, _DWORD *a2, int *a3)
{
  if (*a3 > 0) {
    return 0LL;
  }
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  if (!v5) {
    return 0LL;
  }
  uint64_t v6 = *v5;
  if (!*v5) {
    return 0LL;
  }
  uint64_t v3 = *(const char **)v6;
  *uint64_t v5 = *(void *)(v6 + 8);
  if (a2 && v3) {
    *a2 = strlen(v3);
  }
  return v3;
}

uint64_t ulist_reset_keyword_values_iterator(uint64_t result, int *a2)
{
  if (*a2 <= 0)
  {
    uint64_t v2 = *(void **)(result + 8);
    if (v2) {
      *uint64_t v2 = v2[1];
    }
  }

  return result;
}

uint64_t ulist_getListFromEnum(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

char *locale_getKeywordsStart(const char *a1)
{
  return strchr(a1, 64);
}

void sub_18084CB30(const char *a1, int a2, uint64_t a3, int a4, int *a5)
{
  v44[144] = *MEMORY[0x1895F89C0];
  bzero(__s1, 0x4B0uLL);
  if (a2 != 64) {
    return;
  }
  uint64_t v10 = 0LL;
  uint64_t v11 = (const char *)v44;
  do
  {
    for (uint64_t i = a1; *i == 32; ++i)
      ++a1;
    if (!*i) {
      break;
    }
    if ((_DWORD)v10 == 25) {
      goto LABEL_52;
    }
    unsigned int v41 = v11;
    int32_t v13 = strchr(i, 61);
    int v14 = strchr(i, 59);
    if (!v13 || (int v15 = v14) != 0LL && v14 < v13)
    {
LABEL_51:
      int v40 = 3;
      goto LABEL_49;
    }

    uint64_t v16 = v13 - a1;
    if (v13 - a1 > 24)
    {
LABEL_52:
      int v40 = 5;
      goto LABEL_49;
    }

    if (v16 < 1) {
      goto LABEL_51;
    }
    int v42 = a5;
    uint64_t v17 = 0LL;
    int v18 = 0;
    unsigned int v19 = &__s1[48 * v10];
    do
    {
      int v20 = i[v17];
      if (v20 != 32) {
        v19[v18++] = uprv_asciitolower((char)v20);
      }
      ++v17;
    }

    while (v16 > v17);
    if (!v18) {
      goto LABEL_48;
    }
    uint64_t v21 = 0LL;
    v19[v18] = 0;
    *(_DWORD *)&__s1[48 * v10 + 28] = v18;
    int v22 = (_DWORD)v15 - (_DWORD)v13;
    do
    {
      int v23 = v22;
      int v25 = *++v13;
      int v24 = v25;
      --v21;
      --v22;
    }

    while (v25 == 32);
    if (!v24 || v13 == v15)
    {
LABEL_48:
      int v40 = 3;
      a5 = v42;
LABEL_49:
      *a5 = v40;
      return;
    }

    *(void *)&__s1[48 * v10 + 32] = v13;
    if (v15)
    {
      UChar32 v26 = v15 - 1;
      do
      {
        int v27 = *v26--;
        --v23;
      }

      while (v27 == 32);
      *(_DWORD *)&__s1[48 * v10 + 40] = v23;
      a1 = v15 + 1;
      uint64_t v11 = v41;
      if ((_DWORD)v10) {
        goto LABEL_26;
      }
    }

    else
    {
      int v33 = strlen(v13);
      uint64_t v34 = v33;
      int v35 = v33 + 1;
      uint64_t v11 = v41;
      while (v34)
      {
        int v36 = &v13[v34--];
        --v35;
        if (*(v36 - 1) != 32) {
          goto LABEL_37;
        }
      }

      int v35 = 0;
LABEL_37:
      a1 = 0LL;
      *(_DWORD *)&__s1[48 * v10 + 40] = v35;
      if ((_DWORD)v10)
      {
LABEL_26:
        if (!strcmp(__s1, &__s1[48 * v10]))
        {
          BOOL v32 = 0;
        }

        else
        {
          int v28 = v11;
          uint64_t v29 = 1LL;
          do
          {
            unint64_t v30 = v29;
            int v31 = strcmp(v28, &__s1[48 * v10]);
            uint64_t v29 = v30 + 1;
            v28 += 48;
          }

          while (v31);
          BOOL v32 = v30 >= v10;
        }

        goto LABEL_39;
      }
    }

    BOOL v32 = 1;
LABEL_39:
    uint64_t v10 = (v10 + v32);
    a5 = v42;
  }

  while (a1);
  uprv_sortArray((uint64_t)__s1, v10, 48, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18084CEA0, 0LL, 0, a5);
  if ((int)v10 >= 1)
  {
    unint64_t v37 = 0LL;
    unint64_t v38 = __s1;
    do
    {
      (*(void (**)(uint64_t, char *, void))(*(void *)a3 + 16LL))(a3, v38, *((unsigned int *)v38 + 7));
      unsigned int v39 = *(void (**)(uint64_t, const char *, uint64_t))(*(void *)a3 + 16LL);
      if (a4)
      {
        v39(a3, "=", 1LL);
        (*(void (**)(uint64_t, void, void))(*(void *)a3 + 16LL))( a3,  *((void *)v38 + 4),  *((unsigned int *)v38 + 10));
      }

      else
      {
        v39(a3, byte_180A26DE1, 1LL);
      }

      ++v37;
      v38 += 48;
    }

    while (v10 != v37);
  }

uint64_t sub_18084CEA0(int a1, char *__s1, char *__s2)
{
  return strcmp(__s1, __s2);
}

uint64_t uloc_getKeywordValue(char *a1, char *a2, char *a3, int a4, int *a5)
{
  if (*a5 > 0) {
    return 0LL;
  }
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  icu::CheckedArrayByteSink::CheckedArrayByteSink((uint64_t)&v12, a3, a4);
  ulocimp_getKeywordValue(a1, a2, (uint64_t)&v12, a5);
  uint64_t v5 = DWORD2(v13);
  if (*a5 <= 0)
  {
    if (BYTE12(v13)) {
      *a5 = 15;
    }
    else {
      u_terminateChars((uint64_t)a3, a4, DWORD2(v13), a5);
    }
  }

  icu::CheckedArrayByteSink::~CheckedArrayByteSink((icu::CheckedArrayByteSink *)&v12);
  return v5;
}

void ulocimp_getKeywordValue(char *a1, char *a2, uint64_t a3, int *a4)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  if (a4)
  {
    uint64_t v4 = a1;
    if (a1)
    {
      if (*a4 <= 0)
      {
        memset(&v28[1], 0, 48);
        uint64_t v29 = 0LL;
        v28[0] = (char *)&v28[1] + 5;
        LODWORD(v28[1]) = 40;
        if (a2 && *a2)
        {
          *(void *)__s1 = 0LL;
          uint64_t v35 = 0LL;
          char v37 = 0;
          uint64_t v36 = 0LL;
          sub_18084D260((uint64_t)__s1, a2, a4);
          if (*a4 <= 0)
          {
            if (!strchr(v4, 64) && sub_18084D30C(v4) == 1)
            {
              *(void *)__s2 = 0LL;
              uint64_t v31 = 0LL;
              icu::CharStringByteSink::CharStringByteSink(__s2, (uint64_t)v28);
              ulocimp_forLanguageTag(v4, -1, (uint64_t)__s2, 0LL, a4);
              if ((_DWORD)v29) {
                BOOL v7 = *a4 <= 0;
              }
              else {
                BOOL v7 = 0;
              }
              if (v7) {
                uint64_t v4 = (char *)v28[0];
              }
              icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)__s2);
            }

            uint64_t v8 = strchr(v4, 64);
            if (v8)
            {
              int v9 = v8;
              *(void *)__s2 = 0LL;
              uint64_t v31 = 0LL;
              char v33 = 0;
              uint64_t v32 = 0LL;
              while (v9)
              {
                uint64_t v10 = strchr(v9 + 1, 61);
                if (!v10) {
                  goto LABEL_50;
                }
                uint64_t v11 = v10;
                do
                  int v12 = *++v9;
                while (v12 == 32);
                __int128 v13 = v10;
                while (v13 > v9)
                {
                  int v14 = *--v13;
                  if (v14 != 32)
                  {
                    uint64_t v15 = 0LL;
                    uint64_t v16 = v13 + 1;
                    while (uprv_isASCIILetter(v9[v15]) || v9[v15] - 48 <= 9)
                    {
                      if (v15 == 24)
                      {
                        int v27 = 5;
                        goto LABEL_51;
                      }

                      char v17 = uprv_asciitolower(v9[v15]);
                      int v18 = v15 + 1;
                      __s2[v15] = v17;
                      unsigned int v19 = &v9[++v15];
                      if (v19 >= v16) {
                        goto LABEL_33;
                      }
                    }

                    goto LABEL_50;
                  }
                }

                if (v13 == v9) {
                  goto LABEL_50;
                }
                int v18 = 0;
LABEL_33:
                __s2[v18] = 0;
                int v9 = strchr(v11, 59);
                if (!strcmp(__s1, __s2))
                {
                  do
                    int v20 = *(unsigned __int8 *)++v11;
                  while (v20 == 32);
                  if (!v9) {
                    int v9 = (char *)&v11[strlen(v11)];
                  }
                  while (v9 > v11)
                  {
                    int v21 = *--v9;
                    if (v21 != 32)
                    {
                      int v22 = v9 + 1;
                      while (1)
                      {
                        if (!uprv_isASCIILetter(*v11))
                        {
                          int v23 = *(unsigned __int8 *)v11;
                          if ((v23 - 48) >= 0xA)
                          {
                            unsigned int v24 = v23 - 43;
                            BOOL v7 = v24 > 0x34;
                            uint64_t v25 = (1LL << v24) & 0x10000000000015LL;
                            if (v7 || v25 == 0) {
                              goto LABEL_50;
                            }
                          }
                        }

                        (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a3 + 16LL))(a3, v11++, 1LL);
                        if (v11 >= v22) {
                          goto LABEL_52;
                        }
                      }
                    }
                  }

                  if (v11 != v9) {
                    break;
                  }
                  goto LABEL_50;
                }
              }
            }
          }
        }

        else
        {
LABEL_50:
          int v27 = 1;
LABEL_51:
          *a4 = v27;
        }

uint64_t sub_18084D260(uint64_t a1, char *a2, int *a3)
{
  char v4 = *a2;
  if (*a2)
  {
    uint64_t v7 = 0LL;
    while (uprv_isASCIILetter(v4) || a2[v7] - 48 < 0xA)
    {
      if (v7 == 24)
      {
        uint64_t result = 0LL;
        int v10 = 5;
        goto LABEL_11;
      }

      char v8 = uprv_asciitolower(a2[v7]);
      uint64_t result = v7 + 1;
      *(_BYTE *)(a1 + v7) = v8;
      char v4 = a2[++v7];
      if (!v4)
      {
        if (!(_DWORD)result) {
          break;
        }
        *(_BYTE *)(a1 + result) = 0;
        return result;
      }
    }
  }

  uint64_t result = 0LL;
  int v10 = 1;
LABEL_11:
  *a3 = v10;
  return result;
}

size_t sub_18084D30C(const char *a1)
{
  uint64_t v1 = a1;
  size_t result = strlen(a1);
  if ((int)result >= 1)
  {
    int v3 = 0;
    uint64_t v4 = result;
    int v5 = 1;
    do
    {
      int v7 = *(unsigned __int8 *)v1++;
      int v6 = v7;
      if (v7 == 45 || v6 == 95)
      {
        BOOL v8 = v3 >= (int)result || v3 == 0;
        if (v8) {
          size_t result = result;
        }
        else {
          size_t result = v3;
        }
        int v5 = 1;
      }

      else
      {
        BOOL v8 = v5 == 0;
        int v5 = 0;
        if (v8) {
          ++v3;
        }
        else {
          int v3 = 1;
        }
      }

      --v4;
    }

    while (v4);
  }

  return result;
}

size_t uloc_setKeywordValue(char *a1, _BYTE *a2, char *__s, int a4, int *a5)
{
  uint64_t v71 = *MEMORY[0x1895F89C0];
  *(void *)__s1 = 0LL;
  uint64_t v68 = 0LL;
  char v70 = 0;
  uint64_t v69 = 0LL;
  char v66 = 0;
  __int128 v64 = 0u;
  __int128 v65 = 0u;
  __int128 v62 = 0u;
  __int128 v63 = 0u;
  *(_OWORD *)__src = 0u;
  __int128 v61 = 0u;
  *(void *)__s2 = 0LL;
  uint64_t v57 = 0LL;
  char v59 = 0;
  uint64_t v58 = 0LL;
  memset(&v54[1], 0, 48);
  uint64_t v55 = 0LL;
  v54[0] = (char *)&v54[1] + 5;
  LODWORD(v54[1]) = 40;
  if (*a5 > 0)
  {
    size_t v5 = 0xFFFFFFFFLL;
    goto LABEL_11;
  }

  if (*a5 == -124) {
    *a5 = 0;
  }
  if (!a1) {
    goto LABEL_9;
  }
  if (a4 < 2) {
    goto LABEL_9;
  }
  if (!*a1) {
    goto LABEL_9;
  }
  size_t v5 = strlen(__s);
  int v13 = sub_18084D260((uint64_t)__s1, a1, a5);
  if (*a5 > 0)
  {
    size_t v5 = 0LL;
    goto LABEL_11;
  }

  int v14 = v13;
  if (!a2 || (LOBYTE(v15) = *a2) == 0)
  {
    int v22 = 0;
    goto LABEL_29;
  }

  int v50 = v13;
  uint64_t v16 = 0LL;
  do
  {
    if (!uprv_isASCIILetter(v15))
    {
      int v17 = a2[v16];
      if ((v17 - 48) >= 0xA)
      {
        unsigned int v18 = v17 - 43;
        BOOL v19 = v18 > 0x34;
        uint64_t v20 = (1LL << v18) & 0x10000000000015LL;
        if (v19 || v20 == 0) {
          goto LABEL_9;
        }
      }
    }

    if (v16 == 96)
    {
LABEL_77:
      size_t v5 = 0LL;
      int v11 = 5;
      goto LABEL_10;
    }

    int v22 = v16 + 1;
    __src[v16] = a2[v16];
    int v15 = a2[++v16];
  }

  while (v15);
  int v14 = v50;
LABEL_29:
  __src[v22] = 0;
  int v23 = strchr(__s, 64);
  if (!v23 || !v23[1])
  {
    if (v22)
    {
      int v44 = v5 + v14 + v22;
      if (!v23) {
        ++v44;
      }
      size_t v45 = (v44 + 1);
      if ((int)v45 >= a4)
      {
        *a5 = 15;
      }

      else
      {
        if (!v23) {
          int v23 = &__s[(int)v5];
        }
        *int v23 = 64;
        __int128 v46 = &strcpy(v23 + 1, __s1)[v14];
        char *v46 = 61;
        strcpy(v46 + 1, __src);
      }

      size_t v5 = v45;
    }

    goto LABEL_11;
  }

  int v52 = 0;
  char v53 = 64;
  __int16 __dst = v23;
  unsigned int v24 = v23;
  int v51 = v14;
  while (2)
  {
    uint64_t v25 = strchr(v24 + 1, 61);
    UChar32 v26 = v25;
    if (!v25) {
      goto LABEL_9;
    }
    do
      int v27 = *++v24;
    while (v27 == 32);
    int v28 = v25;
    while (v28 > v24)
    {
      int v29 = *--v28;
      if (v29 != 32)
      {
        uint64_t v30 = 0LL;
        uint64_t v31 = v28 + 1;
        while (uprv_isASCIILetter(v24[v30]) || v24[v30] - 48 < 0xA)
        {
          if (v30 == 24) {
            goto LABEL_77;
          }
          int v32 = v30 + 1;
          __s2[v30] = uprv_asciitolower(v24[v30]);
          char v33 = &v24[++v30];
          if (v33 >= v31)
          {
            int v14 = v51;
            goto LABEL_45;
          }
        }

        goto LABEL_9;
      }
    }

    if (v28 == v24) {
      goto LABEL_9;
    }
    int v32 = 0;
LABEL_45:
    __s2[v32] = 0;
    uint64_t v34 = strchr(v26, 59);
    unsigned int v24 = v34;
    int v35 = ~(_DWORD)v26;
    do
    {
      int v36 = v35;
      int v37 = *(unsigned __int8 *)++v26;
      --v35;
    }

    while (v37 == 32);
    uint64_t v38 = v34;
    if (!v34) {
      uint64_t v38 = (char *)&v26[strlen(v26)];
    }
    int v39 = (_DWORD)v38 + v36;
    do
    {
      int v40 = v38;
      int v41 = v39;
      if (v38 <= v26) {
        break;
      }
      --v38;
      --v39;
    }

    while (*(v40 - 1) == 32);
    if (v40 == v26)
    {
LABEL_9:
      size_t v5 = 0LL;
      int v11 = 1;
LABEL_10:
      *a5 = v11;
      goto LABEL_11;
    }

    int v42 = strcmp(__s1, __s2);
    if (v42)
    {
      if (v22 && v42 < 0 && !v52)
      {
        icu::CharString::append((icu::CharString *)v54, v53, (UErrorCode *)a5);
        icu::CharString::append((icu::CharString *)v54, __s1, v14, (UErrorCode *)a5);
        icu::CharString::append((icu::CharString *)v54, 61, (UErrorCode *)a5);
        icu::CharString::append((icu::CharString *)v54, __src, v22, (UErrorCode *)a5);
        char v43 = 59;
        int v52 = 1;
      }

      else
      {
        char v43 = v53;
      }

      icu::CharString::append((icu::CharString *)v54, v43, (UErrorCode *)a5);
      icu::CharString::append((icu::CharString *)v54, __s2, v32, (UErrorCode *)a5);
      icu::CharString::append((icu::CharString *)v54, 61, (UErrorCode *)a5);
      icu::CharString::append((icu::CharString *)v54, v26, v41, (UErrorCode *)a5);
      if (v22)
      {
        char v53 = 59;
        if (!v24 && !v52)
        {
          icu::CharString::append((icu::CharString *)v54, 59, (UErrorCode *)a5);
          icu::CharString::append((icu::CharString *)v54, __s1, v14, (UErrorCode *)a5);
          icu::CharString::append((icu::CharString *)v54, 61, (UErrorCode *)a5);
          icu::CharString::append((icu::CharString *)v54, __src, v22, (UErrorCode *)a5);
LABEL_80:
          if (*a5 <= 0)
          {
            int v47 = v55;
            int v48 = a4 - ((_DWORD)__dst - (_DWORD)__s);
            else {
              int v47 = icu::CharString::extract(v54, __dst, v48, (UErrorCode *)a5);
            }
            size_t v5 = (v47 + (_DWORD)__dst - (_DWORD)__s);
          }

          goto LABEL_11;
        }
      }

      else
      {
        char v53 = 59;
      }
    }

    else
    {
      if (v22)
      {
        icu::CharString::append((icu::CharString *)v54, v53, (UErrorCode *)a5);
        icu::CharString::append((icu::CharString *)v54, __s1, v14, (UErrorCode *)a5);
        icu::CharString::append((icu::CharString *)v54, 61, (UErrorCode *)a5);
        icu::CharString::append((icu::CharString *)v54, __src, v22, (UErrorCode *)a5);
        char v53 = 59;
      }

      int v52 = 1;
    }

    if (v24) {
      continue;
    }
    break;
  }

  if (v52) {
    goto LABEL_80;
  }
LABEL_11:
  if (BYTE4(v54[1])) {
    uprv_free(v54[0]);
  }
  return v5;
}

char *sub_18084D904(char *__s1)
{
  uint64_t v1 = __s1;
  int v2 = sub_18084D948((const char **)off_1897173D0, __s1);
  if ((v2 & 0x80000000) == 0) {
    return off_189717460[(unsigned __int16)v2];
  }
  return v1;
}

uint64_t sub_18084D948(const char **a1, char *__s1)
{
  int v3 = a1;
  uint64_t v4 = -(uint64_t)a1;
  int v5 = 1;
  while (1)
  {
    int v6 = *v3;
    if (*v3) {
      break;
    }
LABEL_6:
    ++v3;
    if (++v5 == 3)
    {
      LOWORD(v9) = -1;
      return (__int16)v9;
    }
  }

  unint64_t v7 = (unint64_t)v3 + v4;
  while (strcmp(__s1, v6))
  {
    BOOL v8 = v3[1];
    ++v3;
    int v6 = v8;
    v7 += 8LL;
    if (!v8) {
      goto LABEL_6;
    }
  }

  unint64_t v9 = v7 >> 3;
  return (__int16)v9;
}

char *sub_18084D9C4(char *__s1)
{
  uint64_t v1 = __s1;
  int v2 = sub_18084D948((const char **)off_1897174F0, __s1);
  if ((v2 & 0x80000000) == 0) {
    return off_189717528[(unsigned __int16)v2];
  }
  return v1;
}

uint64_t sub_18084DA08@<X0>(uint64_t result@<X0>, void *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  int v6 = (unsigned __int8 *)result;
  *(_OWORD *)(a4 + 8) = 0u;
  *(void *)(a4 + 56) = 0LL;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(void *)a4 = a4 + 13;
  *(_DWORD *)(a4 + 8) = 40;
  *(_DWORD *)(a4 + 56) = 0;
  int v8 = *(unsigned __int8 *)result;
  if ((v8 - 73) <= 0x2F && ((1LL << (v8 - 73)) & 0x800100008001LL) != 0)
  {
    int v10 = *(unsigned __int8 *)(result + 1);
    if (v10 == 95 || v10 == 45)
    {
      char v11 = uprv_asciitolower((char)v8);
      icu::CharString::append((icu::CharString *)a4, v11, a3);
      size_t result = (uint64_t)icu::CharString::append((icu::CharString *)a4, 45, a3);
      v6 += 2;
    }
  }

  while (1)
  {
    int v12 = *v6;
    BOOL v13 = (v12 - 45) > 0x32 || ((1LL << (v12 - 45)) & 0x4000000080003LL) == 0;
    if (!v13 || v12 == 0) {
      break;
    }
    char v15 = uprv_asciitolower((char)v12);
    size_t result = (uint64_t)icu::CharString::append((icu::CharString *)a4, v15, a3);
    ++v6;
  }

  if (*(_DWORD *)(a4 + 56) == 3)
  {
    uint64_t v16 = *(_BYTE **)a4;
    size_t result = sub_18084D948((const char **)off_189717560, *(char **)a4);
    if ((result & 0x80000000) == 0)
    {
      *(_DWORD *)(a4 + 56) = 0;
      _BYTE *v16 = 0;
      icu::StringPiece::StringPiece((icu::StringPiece *)&v17, off_1897188E8[(unsigned __int16)result]);
      size_t result = (uint64_t)icu::CharString::append((icu::CharString *)a4, v17, v18, a3);
    }
  }

  if (a2) {
    *a2 = v6;
  }
  return result;
}

icu::CharString *sub_18084DB88@<X0>( icu::CharString *result@<X0>, void *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  int v6 = (char *)result;
  *(_OWORD *)(a4 + 8) = 0u;
  *(void *)(a4 + 56) = 0LL;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(void *)a4 = a4 + 13;
  *(_DWORD *)(a4 + 8) = 40;
  *(_DWORD *)(a4 + 56) = 0;
  if (a2) {
    *a2 = result;
  }
  for (uint64_t i = 0LL; ; ++i)
  {
    int v9 = v6[i];
    BOOL v10 = (v9 - 45) > 0x32 || ((1LL << (v9 - 45)) & 0x4000000080003LL) == 0;
    if (!v10 || v9 == 0) {
      break;
    }
    size_t result = (icu::CharString *)uprv_isASCIILetter(v9);
    if (!(_DWORD)result) {
      break;
    }
  }

  if ((_DWORD)i == 4)
  {
    if (a2) {
      *a2 = &v6[i];
    }
    char v12 = uprv_toupper(*v6);
    icu::CharString::append((icu::CharString *)a4, v12, a3);
    uint64_t v13 = 1LL;
    do
    {
      char v14 = uprv_asciitolower(v6[v13]);
      size_t result = icu::CharString::append((icu::CharString *)a4, v14, a3);
      ++v13;
    }

    while ((_DWORD)v13 != 4);
  }

  return result;
}

uint64_t sub_18084DC94@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = 0LL;
  *(_OWORD *)(a4 + 8) = 0u;
  *(void *)(a4 + 56) = 0LL;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(void *)a4 = a4 + 13;
  *(_DWORD *)(a4 + 8) = 40;
  *(_DWORD *)(a4 + 56) = 0;
  while (1)
  {
    int v9 = *(unsigned __int8 *)(v6 + v8);
    BOOL v10 = (v9 - 45) > 0x32 || ((1LL << (v9 - 45)) & 0x4000000080003LL) == 0;
    if (!v10 || v9 == 0) {
      break;
    }
    char v12 = uprv_toupper((char)v9);
    size_t result = (uint64_t)icu::CharString::append((icu::CharString *)a4, v12, a3);
    ++v8;
  }

  if ((v8 & 0x7FFFFFFE) == 2)
  {
    v6 += v8;
    if ((_DWORD)v8 == 3)
    {
      uint64_t v13 = *(_BYTE **)a4;
      size_t result = sub_18084D948((const char **)off_189719C70, *(char **)a4);
      if ((result & 0x80000000) == 0)
      {
        *(_DWORD *)(a4 + 56) = 0;
        *uint64_t v13 = 0;
        icu::StringPiece::StringPiece((icu::StringPiece *)&v14, off_18971A4D8[(unsigned __int16)result]);
        size_t result = (uint64_t)icu::CharString::append((icu::CharString *)a4, v14, v15, a3);
      }
    }
  }

  else
  {
    *(_DWORD *)(a4 + 56) = 0;
    **(_BYTE **)a4 = 0;
  }

  if (a2) {
    *a2 = v6;
  }
  return result;
}

_OWORD *uloc_openKeywordList(const void *a1, int a2, int *a3)
{
  if (*a3 > 0)
  {
    int v3 = 0LL;
    uint64_t v4 = 0LL;
LABEL_8:
    uint64_t v8 = 0LL;
    goto LABEL_9;
  }

  int v3 = uprv_malloc(0x10uLL);
  uprv_free(0LL);
  uint64_t v8 = uprv_malloc(0x38uLL);
  uprv_free(0LL);
  if (!v3
    || !v8
    || (_OWORD *v8 = xmmword_18971AD40,
        v8[1] = *(_OWORD *)&off_18971AD50,
        void v8[2] = xmmword_18971AD60,
        *((void *)v8 + 6) = sub_18084FA70,
        int v9 = uprv_malloc(a2 + 1),
        (*int v3 = v9) == 0LL))
  {
    *a3 = 7;
    uint64_t v4 = v8;
    goto LABEL_8;
  }

  BOOL v10 = v9;
  memcpy(v9, a1, a2);
  uint64_t v4 = 0LL;
  v10[a2] = 0;
  v3[1] = v10;
  *((void *)v8 + icu::UVector32::~UVector32(this + 1) = v3;
  int v3 = 0LL;
LABEL_9:
  uprv_free(v4);
  uprv_free(v3);
  return v8;
}

_OWORD *uloc_openKeywords(char *__s, int *a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  memset(&v20[1], 0, 48);
  uint64_t v21 = 0LL;
  v20[0] = (char *)&v20[1] + 5;
  LODWORD(v20[1]) = 40;
  if (!a2 || *a2 > 0) {
    goto LABEL_18;
  }
  Default_0 = __s;
  if (__s)
  {
    if (!strchr(__s, 64) && sub_18084D30C(Default_0) == 1)
    {
      v12[0] = 0LL;
      v12[1] = 0LL;
      icu::CharStringByteSink::CharStringByteSink(v12, (uint64_t)v20);
      ulocimp_forLanguageTag(Default_0, -1, (uint64_t)v12, 0LL, a2);
      if ((_DWORD)v21) {
        BOOL v4 = *a2 <= 0;
      }
      else {
        BOOL v4 = 0;
      }
      if (v4) {
        Default_0 = (char *)v20[0];
      }
      __sa = Default_0;
      icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v12);
      goto LABEL_15;
    }
  }

  else
  {
    Default_0 = (char *)uloc_getDefault_0();
  }

  __sa = Default_0;
LABEL_15:
  sub_18084DA08((uint64_t)Default_0, &__sa, (UErrorCode *)a2, (uint64_t)&v18);
  if (v19) {
    uprv_free(v18);
  }
  if (*a2 > 0) {
    goto LABEL_18;
  }
  unint64_t v7 = __sa;
  int v8 = *__sa;
  if (v8 == 95 || v8 == 45)
  {
    v12[0] = 0LL;
    sub_18084DB88((icu::CharString *)(__sa + 1), v12, (UErrorCode *)a2, (uint64_t)&v16);
    if (v17) {
      uprv_free(v16);
    }
    if (*a2 > 0) {
      goto LABEL_18;
    }
    unint64_t v7 = __sa;
    if (v12[0] != __sa + 1)
    {
      __sa = (char *)v12[0];
      unint64_t v7 = (char *)v12[0];
    }

    int v9 = *v7;
    if (v9 == 95 || v9 == 45)
    {
      sub_18084DC94((uint64_t)(v7 + 1), (uint64_t *)&__sa, (UErrorCode *)a2, (uint64_t)&v14);
      if (v15) {
        uprv_free(v14);
      }
      if (*a2 > 0) {
        goto LABEL_18;
      }
      unint64_t v7 = __sa;
    }
  }

  __sa = strchr(v7, 64);
  if (!__sa)
  {
LABEL_18:
    int v5 = 0LL;
    goto LABEL_19;
  }

  memset(&v12[1], 0, 48);
  uint64_t v13 = 0LL;
  v12[0] = (char *)&v12[1] + 5;
  LODWORD(v12[1]) = 40;
  v10[0] = 0LL;
  v10[1] = 0LL;
  icu::CharStringByteSink::CharStringByteSink(v10, (uint64_t)v12);
  sub_18084CB30(__sa + 1, 64, (uint64_t)v10, 0, a2);
  int v5 = 0LL;
  if (*a2 <= 0) {
    int v5 = uloc_openKeywordList(v12[0], v13, a2);
  }
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v10);
  if (BYTE4(v12[1])) {
    uprv_free(v12[0]);
  }
LABEL_19:
  if (BYTE4(v20[1])) {
    uprv_free(v20[0]);
  }
  return v5;
}

uint64_t uloc_getParent(char *a1, char *a2, int a3, int *a4)
{
  if (*a4 > 0) {
    return 0LL;
  }
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  icu::CheckedArrayByteSink::CheckedArrayByteSink((uint64_t)&v10, a2, a3);
  ulocimp_getParent(a1, (uint64_t)&v10, a4);
  uint64_t v4 = DWORD2(v11);
  if (*a4 <= 0)
  {
    if (BYTE12(v11)) {
      *a4 = 15;
    }
    else {
      u_terminateChars((uint64_t)a2, a3, DWORD2(v11), a4);
    }
  }

  icu::CheckedArrayByteSink::~CheckedArrayByteSink((icu::CheckedArrayByteSink *)&v10);
  return v4;
}

char *ulocimp_getParent(char *__s, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
  {
    Default_0 = __s;
    if (!__s) {
      Default_0 = (const char *)uloc_getDefault_0(0LL);
    }
    __s = strrchr(Default_0, 95);
    if (__s) {
      int v5 = (_DWORD)__s - (_DWORD)Default_0;
    }
    else {
      int v5 = 0;
    }
    if (v5 >= 1) {
      return (char *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 16LL))(a2, Default_0);
    }
  }

  return __s;
}

UErrorCode *uloc_getLanguage(uint64_t Default_0, char *a2, int a3, int *a4)
{
  uint64_t v4 = (UErrorCode *)a4;
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (a4)
  {
    if (*a4 <= 0)
    {
      if (!Default_0) {
        Default_0 = uloc_getDefault_0();
      }
      sub_18084DA08(Default_0, 0LL, v4, (uint64_t)&v8);
      uint64_t v4 = (UErrorCode *)icu::CharString::extract(&v8, a2, a3, v4);
      if (v9) {
        uprv_free(v8);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return v4;
}

uint64_t uloc_getScript(uint64_t Default_0, char *a2, int a3, int *a4)
{
  uint64_t v4 = (UErrorCode *)a4;
  uint64_t v14 = *MEMORY[0x1895F89C0];
  char v9 = (unsigned __int8 *)Default_0;
  if (a4)
  {
    if (*a4 > 0) {
      return 0LL;
    }
    if (!Default_0)
    {
      Default_0 = uloc_getDefault_0();
      char v9 = (unsigned __int8 *)Default_0;
    }

    sub_18084DA08(Default_0, &v9, v4, (uint64_t)&v12);
    if (v13) {
      uprv_free(v12);
    }
    if (*(int *)v4 <= 0)
    {
      int v8 = *v9;
      if (v8 == 95 || v8 == 45)
      {
        sub_18084DB88((icu::CharString *)(v9 + 1), 0LL, v4, (uint64_t)&v10);
        uint64_t v4 = (UErrorCode *)icu::CharString::extract(&v10, a2, a3, v4);
        if (v11) {
          uprv_free(v10);
        }
      }

      else
      {
        return u_terminateChars((uint64_t)a2, a3, 0LL, (int *)v4);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return (uint64_t)v4;
}

uint64_t uloc_getCountry(uint64_t Default_0, char *a2, int a3, int *a4)
{
  uint64_t v4 = (UErrorCode *)a4;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  char v12 = (unsigned __int8 *)Default_0;
  if (a4)
  {
    if (*a4 > 0) {
      return 0LL;
    }
    if (!Default_0)
    {
      Default_0 = uloc_getDefault_0();
      char v12 = (unsigned __int8 *)Default_0;
    }

    sub_18084DA08(Default_0, &v12, v4, (uint64_t)&v17);
    if (v18) {
      uprv_free(v17);
    }
    int v8 = *v12;
    if (v8 != 95 && v8 != 45) {
      return u_terminateChars((uint64_t)a2, a3, 0LL, (int *)v4);
    }
    char v11 = 0LL;
    sub_18084DB88((icu::CharString *)(v12 + 1), &v11, v4, (uint64_t)&v15);
    if (v16) {
      uprv_free(v15);
    }
    char v9 = v12;
    if (v11 != v12 + 1)
    {
      char v12 = v11;
      char v9 = v11;
    }

    int v10 = *v9;
    if (v10 != 95 && v10 != 45) {
      return u_terminateChars((uint64_t)a2, a3, 0LL, (int *)v4);
    }
    sub_18084DC94((uint64_t)(v9 + 1), 0LL, v4, (uint64_t)&v13);
    uint64_t v4 = (UErrorCode *)icu::CharString::extract(&v13, a2, a3, v4);
    if (v14) {
      uprv_free(v13);
    }
  }

  return (uint64_t)v4;
}

uint64_t uloc_getVariant(char *__s, char *a2, int a3, int *a4)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  memset(&v31[1], 0, 48);
  uint64_t v32 = 0LL;
  v31[0] = (char *)&v31[1] + 5;
  LODWORD(v31[1]) = 40;
  unsigned int v24 = 0LL;
  if (!a4 || *a4 > 0) {
    goto LABEL_17;
  }
  Default_0 = __s;
  if (__s)
  {
    if (!strchr(__s, 64) && sub_18084D30C(Default_0) == 1)
    {
      __int128 v20 = 0uLL;
      icu::CharStringByteSink::CharStringByteSink(&v20, (uint64_t)v31);
      ulocimp_forLanguageTag(Default_0, -1, (uint64_t)&v20, 0LL, a4);
      if ((_DWORD)v32) {
        BOOL v8 = *a4 <= 0;
      }
      else {
        BOOL v8 = 0;
      }
      char v9 = (char *)v31[0];
      if (!v8) {
        char v9 = Default_0;
      }
      unsigned int v24 = v9;
      icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)&v20);
      Default_0 = v24;
      goto LABEL_14;
    }
  }

  else
  {
    Default_0 = (char *)uloc_getDefault_0();
  }

  unsigned int v24 = Default_0;
LABEL_14:
  sub_18084DA08((uint64_t)Default_0, &v24, (UErrorCode *)a4, (uint64_t)&v29);
  if (v30) {
    uprv_free(v29);
  }
  if (*a4 > 0) {
    goto LABEL_17;
  }
  int v12 = *v24;
  if (v12 != 95 && v12 != 45) {
    goto LABEL_45;
  }
  int v23 = 0LL;
  sub_18084DB88((icu::CharString *)(v24 + 1), &v23, (UErrorCode *)a4, (uint64_t)&v27);
  if (v28) {
    uprv_free(v27);
  }
  if (*a4 > 0) {
    goto LABEL_17;
  }
  char v13 = (unsigned __int8 *)v24;
  if (v23 != (unsigned __int8 *)(v24 + 1))
  {
    unsigned int v24 = (char *)v23;
    char v13 = v23;
  }

  int v14 = *v13;
  if (v14 != 95 && v14 != 45) {
    goto LABEL_45;
  }
  uint64_t v22 = 0LL;
  sub_18084DC94((uint64_t)(v13 + 1), (uint64_t *)&v22, (UErrorCode *)a4, (uint64_t)&v25);
  if (v26) {
    uprv_free(v25);
  }
  if (*a4 > 0)
  {
LABEL_17:
    uint64_t v10 = 0LL;
    goto LABEL_18;
  }

  char v15 = (unsigned __int8 *)v24;
  if (v22 != (unsigned __int8 *)(v24 + 1))
  {
    unsigned int v24 = (char *)v22;
    char v15 = v22;
  }

  int v16 = *v15;
  if (v16 != 95 && v16 != 45)
  {
LABEL_45:
    uint64_t v10 = 0LL;
    goto LABEL_46;
  }

  if (v15 != v22)
  {
    int v19 = v15[1];
    char v17 = v15 + 1;
    int v18 = v19;
    if (v19 == 95 || v18 == 45) {
      unsigned int v24 = (char *)v17;
    }
  }

  __int128 v20 = 0u;
  __int128 v21 = 0u;
  icu::CheckedArrayByteSink::CheckedArrayByteSink((uint64_t)&v20, a2, a3);
  sub_18084E908(v24 + 1, *v24, (uint64_t)&v20, 0);
  uint64_t v10 = DWORD2(v21);
  if (*a4 > 0) {
    goto LABEL_44;
  }
  if (BYTE12(v21))
  {
    *a4 = 15;
LABEL_44:
    icu::CheckedArrayByteSink::~CheckedArrayByteSink((icu::CheckedArrayByteSink *)&v20);
    goto LABEL_18;
  }

  icu::CheckedArrayByteSink::~CheckedArrayByteSink((icu::CheckedArrayByteSink *)&v20);
LABEL_46:
  uint64_t v10 = u_terminateChars((uint64_t)a2, a3, v10, a4);
LABEL_18:
  if (BYTE4(v31[1])) {
    uprv_free(v31[0]);
  }
  return v10;
}

char *sub_18084E908(char *__s, int a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v6 = __s;
  int v7 = a4;
  if (a2 != 95 && a2 != 45) {
    goto LABEL_14;
  }
  for (char i = 1; ; char i = 0)
  {
    int v9 = *(unsigned __int8 *)v6;
    if (!*v6 || v9 == 46 || v9 == 64) {
      break;
    }
    if (v7)
    {
      (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a3 + 16LL))(a3, "_", 1LL);
      LOBYTE(v9) = *v6;
    }

    char v17 = 0;
    int v10 = uprv_toupper((char)v9);
    if (v10 == 45) {
      char v11 = 95;
    }
    else {
      char v11 = v10;
    }
    char v17 = v11;
    __s = (char *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)a3 + 16LL))(a3, &v17, 1LL);
    int v7 = 0;
    ++v6;
  }

  if ((i & 1) != 0)
  {
LABEL_14:
    if (a2 != 64)
    {
      __s = strchr(v6, 64);
      if (!__s) {
        return __s;
      }
      uint64_t v6 = __s + 1;
    }

    while (1)
    {
      int v12 = *(unsigned __int8 *)v6;
      if (!*v6 || v12 == 46 || v12 == 64) {
        break;
      }
      if (v7) {
        (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a3 + 16LL))(a3, "_", 1LL);
      }
      char v16 = 0;
      int v13 = *v6++;
      int v14 = uprv_toupper(v13);
      if ((v14 & 0xFFFFFFFE) == 0x2C) {
        char v15 = 95;
      }
      else {
        char v15 = v14;
      }
      char v16 = v15;
      __s = (char *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)a3 + 16LL))(a3, &v16, 1LL);
      int v7 = 0;
    }
  }

  return __s;
}

uint64_t uloc_getName(char *a1, char *a2, int a3, int *a4)
{
  if (*a4 > 0) {
    return 0LL;
  }
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  icu::CheckedArrayByteSink::CheckedArrayByteSink((uint64_t)&v10, a2, a3);
  sub_18084EB3C(a1);
  uint64_t v4 = DWORD2(v11);
  if (*a4 <= 0)
  {
    if (BYTE12(v11)) {
      *a4 = 15;
    }
    else {
      u_terminateChars((uint64_t)a2, a3, DWORD2(v11), a4);
    }
  }

  icu::CheckedArrayByteSink::~CheckedArrayByteSink((icu::CheckedArrayByteSink *)&v10);
  return v4;
}

uint64_t ulocimp_getName(char *a1)
{
  return sub_18084EB3C(a1);
}

void sub_18084EB3C(char *__s, uint64_t a2, char a3, UErrorCode *a4)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  Default_0 = __s;
  uint64_t v57 = 0LL;
  memset(&v56[1], 0, 48);
  v56[0] = (char *)&v56[1] + 5;
  LODWORD(v56[1]) = 40;
  memset(&v55[1], 0, 56);
  v55[0] = (char *)&v55[1] + 5;
  LODWORD(v55[1]) = 40;
  __sa = 0LL;
  if (!__s)
  {
    Default_0 = (char *)uloc_getDefault_0(0LL);
LABEL_16:
    __sa = Default_0;
    goto LABEL_17;
  }

  if (!strchr(Default_0, 95)) {
    goto LABEL_94;
  }
  int v8 = Default_0[1];
  if (v8 == 45) {
    goto LABEL_94;
  }
  if (v8 == 95) {
    goto LABEL_94;
  }
  icu::CharString::append((icu::CharString *)v55, Default_0, -1, a4);
  for (char i = v55[0]; *i == 95; ++i)
  {
    *char i = 45;
LABEL_14:
    ;
  }

  if (*i) {
    goto LABEL_14;
  }
  Default_0 = (char *)v55[0];
LABEL_94:
  __int128 __s1 = 0uLL;
  icu::CharStringByteSink::CharStringByteSink(&__s1, (uint64_t)v56);
  ulocimp_forLanguageTag(Default_0, -1, (uint64_t)&__s1, 0LL, (int *)a4);
  if ((_DWORD)v57) {
    BOOL v33 = *a4 <= U_ZERO_ERROR;
  }
  else {
    BOOL v33 = 0;
  }
  uint64_t v34 = (char *)v56[0];
  if (!v33) {
    uint64_t v34 = Default_0;
  }
  __sa = v34;
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)&__s1);
  Default_0 = __sa;
LABEL_17:
  __int128 v53 = 0u;
  __int128 v54 = 0u;
  __int128 __s1 = 0u;
  __int128 v52 = 0u;
  sub_18084DA08((uint64_t)Default_0, &__sa, a4, (uint64_t)&__s1);
  if (DWORD2(v54) == 9)
  {
    __int128 v10 = (icu::Locale *)strncmp(Default_0, aIDefault_0, 9uLL);
    if (!(_DWORD)v10)
    {
      DWORD2(v54) = 0;
      *(_BYTE *)__int128 __s1 = 0;
      char v17 = (const char *)uloc_getDefault_0(v10);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v40, v17);
      icu::CharString::append((icu::CharString *)&__s1, v40, v41, a4);
LABEL_32:
      int v14 = 0;
      int v12 = 0;
      int v18 = 0;
      goto LABEL_47;
    }
  }

  int v11 = *__sa;
  if (v11 != 95 && v11 != 45) {
    goto LABEL_32;
  }
  int v39 = 0LL;
  icu::CharString::append((icu::CharString *)&__s1, 95, a4);
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 __s2 = 0u;
  __int128 v48 = 0u;
  sub_18084DB88((icu::CharString *)(__sa + 1), &v39, a4, (uint64_t)&__s2);
  icu::CharString::append((icu::CharString *)&__s1, (const char *)__s2, SDWORD2(v50), a4);
  int v12 = DWORD2(v50);
  if (SDWORD2(v50) < 1)
  {
    int v14 = 1;
  }

  else
  {
    __sa = v39;
    int v13 = *v39;
    if (v13 == 95 || v13 == 45) {
      icu::CharString::append((icu::CharString *)&__s1, 95, a4);
    }
    int v14 = 2;
  }

  int v15 = *__sa;
  if (v15 == 95 || v15 == 45)
  {
    uint64_t v38 = 0LL;
    __int128 v45 = 0u;
    *(_OWORD *)__int128 v46 = 0u;
    *(_OWORD *)char v43 = 0u;
    __int128 v44 = 0u;
    sub_18084DC94((uint64_t)(__sa + 1), (uint64_t *)&v38, a4, (uint64_t)v43);
    icu::CharString::append((icu::CharString *)&__s1, v43[0], v46[2], a4);
    if (v46[2])
    {
      char v16 = v38;
      __sa = v38;
    }

    else
    {
      char v16 = __sa;
    }

    int v19 = *v16;
    if (v19 == 95 || v19 == 45)
    {
      int v20 = v16[1];
      if (v20 != 45 && v20 != 95)
      {
        ++v14;
        icu::CharString::append((icu::CharString *)&__s1, 95, a4);
      }

      int v21 = DWORD2(v54);
      v37[0] = 0LL;
      v37[1] = 0LL;
      icu::CharStringByteSink::CharStringByteSink(v37, (uint64_t)&__s1);
      sub_18084E908(__sa + 1, *__sa, (uint64_t)v37, 0);
      icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v37);
      int v18 = DWORD2(v54) - v21;
      if (DWORD2(v54) - v21 >= 1) {
        __sa += (v18 + 1);
      }
    }

    else
    {
      int v18 = 0;
    }

    if (BYTE4(v43[1])) {
      uprv_free(v43[0]);
    }
  }

  else
  {
    int v18 = 0;
  }

  if (BYTE12(__s2)) {
    uprv_free((void *)__s2);
  }
LABEL_47:
  uint64_t v22 = __sa;
  if ((a3 & 1) == 0)
  {
    int v23 = *__sa;
    if (v23 == 46)
    {
      while (((char)v23 | 0x40) != 0x40)
      {
        icu::CharString::append((icu::CharString *)&__s1, v23, a4);
        uint64_t v22 = __sa + 1;
        __sa = v22;
        LOBYTE(v23) = *v22;
      }
    }
  }

  unsigned int v24 = strchr(v22, 64);
  uint64_t v25 = v24;
  __sa = v24;
  if (!v24)
  {
    int v27 = 0LL;
    goto LABEL_58;
  }

  char v26 = strchr(v24, 61);
  int v27 = strchr(v25, 59);
  BOOL v28 = v26 == 0LL;
  if ((a3 & 1) == 0 && !v26)
  {
    char v29 = *v25;
    if (!*v25)
    {
      char v26 = 0LL;
      goto LABEL_81;
    }

    do
    {
      icu::CharString::append((icu::CharString *)&__s1, v29, a4);
      uint64_t v25 = __sa + 1;
      __sa = v25;
      char v29 = *v25;
    }

    while (*v25);
LABEL_58:
    char v26 = 0LL;
    BOOL v28 = 1;
  }

  if ((a3 & 1) == 0) {
    goto LABEL_81;
  }
  if (!v25) {
    BOOL v28 = 0;
  }
  if (v28)
  {
    if (v14 < 2 || v14 == 2 && v12 >= 1)
    {
      if (v14 <= 1) {
        int v30 = 1;
      }
      else {
        int v30 = v14;
      }
      int v31 = v30 - v14 + 1;
      do
      {
        icu::CharString::append((icu::CharString *)&__s1, 95, a4);
        --v31;
      }

      while (v31);
    }

    __int128 __s2 = 0uLL;
    icu::CharStringByteSink::CharStringByteSink(&__s2, (uint64_t)&__s1);
    sub_18084E908(__sa + 1, 64, (uint64_t)&__s2, v18 > 0);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)&__s2);
  }

  uint64_t v32 = 0LL;
  while (2)
  {
    __int128 __s2 = 0uLL;
    icu::StringPiece::StringPiece((icu::StringPiece *)&__s2, off_18971AD78[v32]);
    if (DWORD2(v54) != DWORD2(__s2))
    {
LABEL_76:
      v32 += 2LL;
      if (v32 == 20) {
        goto LABEL_81;
      }
      continue;
    }

    break;
  }

  if (DWORD2(__s2))
  {
    goto LABEL_76;
  }

  if (__sa) {
    goto LABEL_81;
  }
LABEL_80:
  DWORD2(v54) = 0;
  *(_BYTE *)__int128 __s1 = 0;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v35, off_18971AD78[v32 + 1]);
  icu::CharString::append((icu::CharString *)&__s1, v35, v36, a4);
LABEL_81:
  (*(void (**)(uint64_t, void, void))(*(void *)a2 + 16LL))(a2, __s1, DWORD2(v54));
  if ((a3 & 2) == 0 && __sa && v26 && (!v27 || v27 > v26))
  {
    (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 16LL))(a2, "@", 1LL);
    sub_18084CB30(__sa + 1, 64, a2, 1, (int *)a4);
  }

  if (BYTE12(__s1)) {
    uprv_free((void *)__s1);
  }
  if (BYTE4(v55[1])) {
    uprv_free(v55[0]);
  }
  if (BYTE4(v56[1])) {
    uprv_free(v56[0]);
  }
}