std::string *ctu::binary@<X0>(ctu *this@<X0>, std::string *a2@<X8>)
{
  unsigned int v2;
  const std::string::value_type *v4;
  std::string *result;
  int size;
  BOOL v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  BOOL v11;
  unint64_t v12;
  std::string::value_type v13;
  v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  do
  {
    if ((v2 & 1) != 0) {
      v4 = "1";
    }
    else {
      v4 = "0";
    }
    result = std::string::append(a2, v4, 1uLL);
    v11 = v2 > 1;
    v2 >>= 1;
  }

  while (v11);
  size = (char)a2->__r_.__value_.__s.__size_;
  v7 = size < 0;
  if (size >= 0) {
    v8 = a2;
  }
  else {
    v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v7) {
    v9 = a2->__r_.__value_.__l.__size_;
  }
  else {
    v9 = a2->__r_.__value_.__s.__size_;
  }
  v10 = (std::string *)((char *)v8 + v9 - 1);
  if (v9) {
    v11 = v10 > v8;
  }
  else {
    v11 = 0;
  }
  if (v11)
  {
    v12 = (unint64_t)v8->__r_.__value_.__r.__words + 1;
    do
    {
      v13 = *(_BYTE *)(v12 - 1);
      *(_BYTE *)(v12 - 1) = v10->__r_.__value_.__s.__data_[0];
      v10->__r_.__value_.__s.__data_[0] = v13;
      v10 = (std::string *)((char *)v10 - 1);
    }

    while (v12++ < (unint64_t)v10);
  }

  return result;
}

{
  return ctu::binary((ctu *)this, a2);
}

{
  return ctu::binary((ctu *)this, a2);
}

{
  unsigned int v2;
  const std::string::value_type *v4;
  std::string *result;
  int size;
  BOOL v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  BOOL v11;
  unint64_t v12;
  std::string::value_type v13;
  v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  do
  {
    if ((v2 & 1) != 0) {
      v4 = "1";
    }
    else {
      v4 = "0";
    }
    result = std::string::append(a2, v4, 1uLL);
    v11 = v2 > 1;
    v2 >>= 1;
  }

  while (v11);
  size = (char)a2->__r_.__value_.__s.__size_;
  v7 = size < 0;
  if (size >= 0) {
    v8 = a2;
  }
  else {
    v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v7) {
    v9 = a2->__r_.__value_.__l.__size_;
  }
  else {
    v9 = a2->__r_.__value_.__s.__size_;
  }
  v10 = (std::string *)((char *)v8 + v9 - 1);
  if (v9) {
    v11 = v10 > v8;
  }
  else {
    v11 = 0;
  }
  if (v11)
  {
    v12 = (unint64_t)v8->__r_.__value_.__r.__words + 1;
    do
    {
      v13 = *(_BYTE *)(v12 - 1);
      *(_BYTE *)(v12 - 1) = v10->__r_.__value_.__s.__data_[0];
      v10->__r_.__value_.__s.__data_[0] = v13;
      v10 = (std::string *)((char *)v10 - 1);
    }

    while (v12++ < (unint64_t)v10);
  }

  return result;
}

{
  return ctu::binary((ctu *)(unsigned __int16)this, a2);
}

{
  unsigned int v2;
  const std::string::value_type *v4;
  std::string *result;
  int size;
  BOOL v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  BOOL v11;
  unint64_t v12;
  std::string::value_type v13;
  v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  do
  {
    if ((v2 & 1) != 0) {
      v4 = "1";
    }
    else {
      v4 = "0";
    }
    result = std::string::append(a2, v4, 1uLL);
    v11 = v2 > 1;
    v2 >>= 1;
  }

  while (v11);
  size = (char)a2->__r_.__value_.__s.__size_;
  v7 = size < 0;
  if (size >= 0) {
    v8 = a2;
  }
  else {
    v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v7) {
    v9 = a2->__r_.__value_.__l.__size_;
  }
  else {
    v9 = a2->__r_.__value_.__s.__size_;
  }
  v10 = (std::string *)((char *)v8 + v9 - 1);
  if (v9) {
    v11 = v10 > v8;
  }
  else {
    v11 = 0;
  }
  if (v11)
  {
    v12 = (unint64_t)v8->__r_.__value_.__r.__words + 1;
    do
    {
      v13 = *(_BYTE *)(v12 - 1);
      *(_BYTE *)(v12 - 1) = v10->__r_.__value_.__s.__data_[0];
      v10->__r_.__value_.__s.__data_[0] = v13;
      v10 = (std::string *)((char *)v10 - 1);
    }

    while (v12++ < (unint64_t)v10);
  }

  return result;
}

void sub_1865C2DB8(_Unwind_Exception *exception_object)
{
}

void sub_1865C2E98(_Unwind_Exception *exception_object)
{
}

void sub_1865C2F70(_Unwind_Exception *exception_object)
{
}

std::string *ctu::binary@<X0>(unint64_t this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  do
  {
    if ((this & 1) != 0) {
      v4 = "1";
    }
    else {
      v4 = "0";
    }
    result = std::string::append(a2, v4, 1uLL);
    BOOL v11 = this > 1;
    this >>= 1;
  }

  while (v11);
  int size = (char)a2->__r_.__value_.__s.__size_;
  BOOL v7 = size < 0;
  if (size >= 0) {
    v8 = a2;
  }
  else {
    v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v7) {
    std::string::size_type v9 = a2->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v9 = a2->__r_.__value_.__s.__size_;
  }
  v10 = (std::string *)((char *)v8 + v9 - 1);
  if (v9) {
    BOOL v11 = v10 > v8;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    unint64_t v12 = (unint64_t)v8->__r_.__value_.__r.__words + 1;
    do
    {
      std::string::value_type v13 = *(_BYTE *)(v12 - 1);
      *(_BYTE *)(v12 - 1) = v10->__r_.__value_.__s.__data_[0];
      v10->__r_.__value_.__s.__data_[0] = v13;
      v10 = (std::string *)((char *)v10 - 1);
    }

    while (v12++ < (unint64_t)v10);
  }

  return result;
}

{
  const std::string::value_type *v4;
  std::string *result;
  int size;
  BOOL v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  BOOL v11;
  unint64_t v12;
  std::string::value_type v13;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  do
  {
    if ((this & 1) != 0) {
      v4 = "1";
    }
    else {
      v4 = "0";
    }
    result = std::string::append(a2, v4, 1uLL);
    BOOL v11 = this > 1;
    this >>= 1;
  }

  while (v11);
  int size = (char)a2->__r_.__value_.__s.__size_;
  BOOL v7 = size < 0;
  if (size >= 0) {
    v8 = a2;
  }
  else {
    v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v7) {
    std::string::size_type v9 = a2->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v9 = a2->__r_.__value_.__s.__size_;
  }
  v10 = (std::string *)((char *)v8 + v9 - 1);
  if (v9) {
    BOOL v11 = v10 > v8;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    unint64_t v12 = (unint64_t)v8->__r_.__value_.__r.__words + 1;
    do
    {
      std::string::value_type v13 = *(_BYTE *)(v12 - 1);
      *(_BYTE *)(v12 - 1) = v10->__r_.__value_.__s.__data_[0];
      v10->__r_.__value_.__s.__data_[0] = v13;
      v10 = (std::string *)((char *)v10 - 1);
    }

    while (v12++ < (unint64_t)v10);
  }

  return result;
}

void sub_1865C3044(_Unwind_Exception *exception_object)
{
}

void sub_1865C3118(_Unwind_Exception *exception_object)
{
}

void ctu::binary0(ctu *this@<X0>, std::string *a2@<X8>)
{
  unsigned int v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::resize(a2, 8uLL, 48);
  if (v2)
  {
    int size = (char)a2->__r_.__value_.__s.__size_;
    BOOL v5 = size < 0;
    v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (size >= 0) {
      v6 = a2;
    }
    std::string::size_type v7 = a2->__r_.__value_.__s.__size_;
    if (v5) {
      std::string::size_type v7 = a2->__r_.__value_.__l.__size_;
    }
    v8 = (char *)v6 + v7 - 1;
    do
    {
      if ((v2 & 1) != 0) {
        _BYTE *v8 = 49;
      }
      --v8;
      BOOL v9 = v2 > 1;
      v2 >>= 1;
    }

    while (v9);
  }

{
  ctu::binary0((ctu *)this, a2);
}

{
  ctu::binary0((ctu *)this, a2);
}

{
  unsigned int v2;
  int size;
  BOOL v5;
  std::string *v6;
  std::string::size_type v7;
  _BYTE *v8;
  BOOL v9;
  unsigned int v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::resize(a2, 0x10uLL, 48);
  if (v2)
  {
    int size = (char)a2->__r_.__value_.__s.__size_;
    BOOL v5 = size < 0;
    v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (size >= 0) {
      v6 = a2;
    }
    std::string::size_type v7 = a2->__r_.__value_.__s.__size_;
    if (v5) {
      std::string::size_type v7 = a2->__r_.__value_.__l.__size_;
    }
    v8 = (char *)v6 + v7 - 1;
    do
    {
      if ((v2 & 1) != 0) {
        _BYTE *v8 = 49;
      }
      --v8;
      BOOL v9 = v2 > 1;
      v2 >>= 1;
    }

    while (v9);
  }

{
  ctu::binary0((ctu *)(unsigned __int16)this, a2);
}

{
  unsigned int v2;
  int size;
  BOOL v5;
  std::string *v6;
  std::string::size_type v7;
  _BYTE *v8;
  BOOL v9;
  unsigned int v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::resize(a2, 0x20uLL, 48);
  if (v2)
  {
    int size = (char)a2->__r_.__value_.__s.__size_;
    BOOL v5 = size < 0;
    v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (size >= 0) {
      v6 = a2;
    }
    std::string::size_type v7 = a2->__r_.__value_.__s.__size_;
    if (v5) {
      std::string::size_type v7 = a2->__r_.__value_.__l.__size_;
    }
    v8 = (char *)v6 + v7 - 1;
    do
    {
      if ((v2 & 1) != 0) {
        _BYTE *v8 = 49;
      }
      --v8;
      BOOL v9 = v2 > 1;
      v2 >>= 1;
    }

    while (v9);
  }
}

void sub_1865C31B4(_Unwind_Exception *exception_object)
{
}

void sub_1865C325C(_Unwind_Exception *exception_object)
{
}

void sub_1865C32FC(_Unwind_Exception *exception_object)
{
}

void ctu::binary0(unint64_t this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::resize(a2, 0x40uLL, 48);
  if (this)
  {
    int size = (char)a2->__r_.__value_.__s.__size_;
    BOOL v5 = size < 0;
    v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (size >= 0) {
      v6 = a2;
    }
    std::string::size_type v7 = a2->__r_.__value_.__s.__size_;
    if (v5) {
      std::string::size_type v7 = a2->__r_.__value_.__l.__size_;
    }
    v8 = (char *)v6 + v7 - 1;
    do
    {
      if ((this & 1) != 0) {
        _BYTE *v8 = 49;
      }
      --v8;
      BOOL v9 = this > 1;
      this >>= 1;
    }

    while (v9);
  }

{
  int size;
  BOOL v5;
  std::string *v6;
  std::string::size_type v7;
  _BYTE *v8;
  BOOL v9;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::resize(a2, 0x40uLL, 48);
  if (this)
  {
    int size = (char)a2->__r_.__value_.__s.__size_;
    BOOL v5 = size < 0;
    v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (size >= 0) {
      v6 = a2;
    }
    std::string::size_type v7 = a2->__r_.__value_.__s.__size_;
    if (v5) {
      std::string::size_type v7 = a2->__r_.__value_.__l.__size_;
    }
    v8 = (char *)v6 + v7 - 1;
    do
    {
      if ((this & 1) != 0) {
        _BYTE *v8 = 49;
      }
      --v8;
      BOOL v9 = this > 1;
      this >>= 1;
    }

    while (v9);
  }

void sub_1865C3398(_Unwind_Exception *exception_object)
{
}

void sub_1865C3434(_Unwind_Exception *exception_object)
{
}

uint64_t ctu::bitfield(unsigned int a1, unsigned int a2)
{
  int v2 = 0;
  int v3 = (a2 >> 8) - a2 + 1;
  do
  {
    int v2 = (2 * v2) | 1;
    --v3;
  }

  while ((_BYTE)v3);
  return v2 & (a1 >> a2);
}

{
  int v2;
  int v3;
  int v2 = 0;
  int v3 = (a2 >> 8) - a2 + 1;
  do
  {
    int v2 = (2 * v2) | 1;
    --v3;
  }

  while ((_BYTE)v3);
  return v2 & (a1 >> a2);
}

{
  int v2;
  int v3;
  int v2 = 0;
  int v3 = (a2 >> 8) - a2 + 1;
  do
  {
    int v2 = (2 * v2) | 1;
    --v3;
  }

  while ((_BYTE)v3);
  return v2 & (a1 >> a2);
}

{
  int v2;
  int v3;
  int v2 = 0;
  int v3 = (a2 >> 8) - a2 + 1;
  do
  {
    int v2 = (2 * v2) | 1;
    --v3;
  }

  while ((_BYTE)v3);
  return v2 & (a1 >> a2);
}

uint64_t ctu::bitfield(unsigned __int8 a1, unsigned int a2)
{
  int v2 = 0;
  int v3 = (a2 >> 8) - a2 + 1;
  do
  {
    int v2 = (2 * v2) | 1;
    --v3;
  }

  while ((_BYTE)v3);
  return v2 & (a1 >> a2);
}

{
  int v2;
  int v3;
  int v2 = 0;
  int v3 = (a2 >> 8) - a2 + 1;
  do
  {
    int v2 = (2 * v2) | 1;
    --v3;
  }

  while ((_BYTE)v3);
  return v2 & (a1 >> a2);
}

uint64_t ctu::bitfield(unsigned __int16 a1, unsigned int a2)
{
  int v2 = 0;
  int v3 = (a2 >> 8) - a2 + 1;
  do
  {
    int v2 = (2 * v2) | 1;
    --v3;
  }

  while ((_BYTE)v3);
  return v2 & (a1 >> a2);
}

uint64_t ctu::bitfield(unint64_t a1, unsigned int a2)
{
  uint64_t v2 = 0LL;
  int v3 = (a2 >> 8) - a2 + 1;
  do
  {
    uint64_t v2 = (2 * v2) | 1;
    --v3;
  }

  while ((_BYTE)v3);
  return v2 & (a1 >> a2);
}

{
  uint64_t v2;
  int v3;
  uint64_t v2 = 0LL;
  int v3 = (a2 >> 8) - a2 + 1;
  do
  {
    uint64_t v2 = (2 * v2) | 1;
    --v3;
  }

  while ((_BYTE)v3);
  return v2 & (a1 >> a2);
}

{
  uint64_t v2;
  int v3;
  uint64_t v2 = 0LL;
  int v3 = (a2 >> 8) - a2 + 1;
  do
  {
    uint64_t v2 = (2 * v2) | 1;
    --v3;
  }

  while ((_BYTE)v3);
  return v2 & (a1 >> a2);
}

{
  uint64_t v2;
  int v3;
  uint64_t v2 = 0LL;
  int v3 = (a2 >> 8) - a2 + 1;
  do
  {
    uint64_t v2 = (2 * v2) | 1;
    --v3;
  }

  while ((_BYTE)v3);
  return v2 & (a1 >> a2);
}

void ctu::bitfieldPrettyPrint( unsigned int a1@<W0>, unsigned __int16 a2@<W1>, std::string::value_type a3@<W2>, std::string *a4@<X8>)
{
}

{
  ctu::bitfieldPrettyPrint(a1, a2, a3, a4);
}

void ctu::to_bitfieldPrettyPrint<unsigned char>( unsigned int a1@<W0>, unint64_t a2@<X1>, std::string::value_type a3@<W2>, std::string *a4@<X8>)
{
  unsigned int v4 = a2;
  a4->__r_.__value_.__r.__words[0] = 0LL;
  a4->__r_.__value_.__l.__size_ = 0LL;
  a4->__r_.__value_.__l.__cap_ = 0LL;
  if ((((a2 >> 8) - (_DWORD)a2) & 0xF8) == 0)
  {
    unsigned int v6 = a2;
    if ((BYTE1(a2) - a2) > 7u)
    {
      int v9 = 0;
    }

    else
    {
      int v7 = 0;
      int v8 = (a2 >> 8) - a2 + 1;
      do
      {
        int v7 = (2 * v7) | 1;
        --v8;
      }

      while ((_BYTE)v8);
      int v9 = v7 & (a1 >> a2);
    }

    std::string::resize(a4, 8uLL, a3);
    if (BYTE1(v4) >= v6)
    {
      int v10 = 1;
      unsigned int v11 = v4 >> 8;
      do
      {
        if ((v10 & v9) != 0) {
          char v12 = 49;
        }
        else {
          char v12 = 48;
        }
        if ((a4->__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::value_type v13 = a4;
        }
        else {
          std::string::value_type v13 = (std::string *)a4->__r_.__value_.__r.__words[0];
        }
        v13->__r_.__value_.__s.__data_[v4] = v12;
        int v10 = 2 * v10;
        ++v4;
      }

      while (v4 <= v11);
    }

    int size = (char)a4->__r_.__value_.__s.__size_;
    BOOL v15 = size < 0;
    if (size >= 0) {
      v16 = a4;
    }
    else {
      v16 = (std::string *)a4->__r_.__value_.__r.__words[0];
    }
    if (v15) {
      std::string::size_type v17 = a4->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v17 = a4->__r_.__value_.__s.__size_;
    }
    v18 = (std::string *)((char *)v16 + v17 - 1);
    if (v17) {
      BOOL v19 = v18 > v16;
    }
    else {
      BOOL v19 = 0;
    }
    if (v19)
    {
      unint64_t v20 = (unint64_t)v16->__r_.__value_.__r.__words + 1;
      do
      {
        std::string::value_type v21 = *(_BYTE *)(v20 - 1);
        *(_BYTE *)(v20 - 1) = v18->__r_.__value_.__s.__data_[0];
        v18->__r_.__value_.__s.__data_[0] = v21;
        v18 = (std::string *)((char *)v18 - 1);
      }

      while (v20++ < (unint64_t)v18);
    }
  }

void sub_1865C38AC(_Unwind_Exception *exception_object)
{
}

void ctu::bitfieldPrettyPrint( unsigned __int8 a1@<W0>, unsigned __int16 a2@<W1>, std::string::value_type a3@<W2>, std::string *a4@<X8>)
{
}

{
  ctu::to_bitfieldPrettyPrint<unsigned char>(a1, a2, a3, a4);
}

void ctu::bitfieldPrettyPrint( std::string::value_type __c@<W2>, unsigned int a2@<W0>, unsigned __int16 a3@<W1>, std::string *a4@<X8>)
{
}

void ctu::to_bitfieldPrettyPrint<unsigned short>( std::string *this, unsigned int a2, unint64_t a3, std::string::value_type __c)
{
  unsigned int v4 = a3;
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__l.__cap_ = 0LL;
  if ((((a3 >> 8) - (_DWORD)a3) & 0xF0) == 0)
  {
    unsigned int v6 = a3;
    if ((BYTE1(a3) - a3) > 0xFu)
    {
      LOBYTE(v9) = 0;
    }

    else
    {
      int v7 = 0;
      int v8 = (a3 >> 8) - a3 + 1;
      do
      {
        int v7 = (2 * v7) | 1;
        --v8;
      }

      while ((_BYTE)v8);
      int v9 = v7 & (a2 >> a3);
    }

    std::string::resize(this, 0x10uLL, __c);
    if (BYTE1(v4) >= v6)
    {
      char v10 = 1;
      unsigned int v11 = v4 >> 8;
      do
      {
        else {
          char v12 = 48;
        }
        if ((this->__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::value_type v13 = this;
        }
        else {
          std::string::value_type v13 = (std::string *)this->__r_.__value_.__r.__words[0];
        }
        v13->__r_.__value_.__s.__data_[v4] = v12;
        v10 *= 2;
        ++v4;
      }

      while (v4 <= v11);
    }

    int size = (char)this->__r_.__value_.__s.__size_;
    BOOL v15 = size < 0;
    if (size >= 0) {
      v16 = this;
    }
    else {
      v16 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    if (v15) {
      std::string::size_type v17 = this->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v17 = this->__r_.__value_.__s.__size_;
    }
    v18 = (std::string *)((char *)v16 + v17 - 1);
    if (v17) {
      BOOL v19 = v18 > v16;
    }
    else {
      BOOL v19 = 0;
    }
    if (v19)
    {
      unint64_t v20 = &v16->__r_.__value_.__s.__data_[1];
      do
      {
        std::string::value_type v21 = *(v20 - 1);
        *(v20 - 1) = v18->__r_.__value_.__s.__data_[0];
        v18->__r_.__value_.__s.__data_[0] = v21;
        v18 = (std::string *)((char *)v18 - 1);
      }

      while (v20++ < (char *)v18);
    }
  }

void sub_1865C3A2C(_Unwind_Exception *exception_object)
{
}

void ctu::bitfieldPrettyPrint( std::string::value_type __c@<W2>, unsigned __int16 a2@<W0>, unsigned __int16 a3@<W1>, std::string *a4@<X8>)
{
}

void ctu::bitfieldPrettyPrint( unsigned int a1@<W0>, int a2@<W1>, std::string::value_type a3@<W2>, std::string *a4@<X8>)
{
  unint64_t v5 = (unsigned __int16)a2;
  unsigned int v6 = BYTE1(a2);
  a4->__r_.__value_.__r.__words[0] = 0LL;
  a4->__r_.__value_.__l.__size_ = 0LL;
  a4->__r_.__value_.__l.__cap_ = 0LL;
  if (((BYTE1(a2) - (_BYTE)a2) & 0xE0) == 0)
  {
    int v7 = a2;
    unsigned int v8 = a2;
    if ((BYTE1(a2) - a2) > 0x1Fu)
    {
      LOBYTE(v11) = 0;
    }

    else
    {
      int v9 = 0;
      int v10 = BYTE1(a2) - (unsigned __int16)a2 + 1;
      do
      {
        int v9 = (2 * v9) | 1;
        --v10;
      }

      while ((_BYTE)v10);
      int v11 = v9 & (a1 >> a2);
    }

    std::string::resize(a4, 0x20uLL, a3);
    if (v8 <= v6)
    {
      char v12 = 1;
      do
      {
        else {
          char v13 = 48;
        }
        if ((a4->__r_.__value_.__s.__size_ & 0x80u) == 0) {
          v14 = a4;
        }
        else {
          v14 = (std::string *)a4->__r_.__value_.__r.__words[0];
        }
        v14->__r_.__value_.__s.__data_[v7] = v13;
        v12 *= 2;
        ++v7;
      }

      while ((v5 >> 8) >= v7);
    }

    int size = (char)a4->__r_.__value_.__s.__size_;
    BOOL v16 = size < 0;
    if (size >= 0) {
      std::string::size_type v17 = a4;
    }
    else {
      std::string::size_type v17 = (std::string *)a4->__r_.__value_.__r.__words[0];
    }
    if (v16) {
      std::string::size_type v18 = a4->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v18 = a4->__r_.__value_.__s.__size_;
    }
    BOOL v19 = (std::string *)((char *)v17 + v18 - 1);
    if (v18) {
      BOOL v20 = v19 > v17;
    }
    else {
      BOOL v20 = 0;
    }
    if (v20)
    {
      unint64_t v21 = (unint64_t)v17->__r_.__value_.__r.__words + 1;
      do
      {
        std::string::value_type v22 = *(_BYTE *)(v21 - 1);
        *(_BYTE *)(v21 - 1) = v19->__r_.__value_.__s.__data_[0];
        v19->__r_.__value_.__s.__data_[0] = v22;
        BOOL v19 = (std::string *)((char *)v19 - 1);
      }

      while (v21++ < (unint64_t)v19);
    }
  }

void sub_1865C3B90(_Unwind_Exception *exception_object)
{
}

void ctu::bitfieldPrettyPrint( unint64_t a1@<X0>, int a2@<W1>, std::string::value_type a3@<W2>, std::string *a4@<X8>)
{
  unint64_t v5 = (unsigned __int16)a2;
  unsigned int v6 = BYTE1(a2);
  a4->__r_.__value_.__r.__words[0] = 0LL;
  a4->__r_.__value_.__l.__size_ = 0LL;
  a4->__r_.__value_.__l.__cap_ = 0LL;
  if (((BYTE1(a2) - (_BYTE)a2) & 0xC0) == 0)
  {
    int v7 = a2;
    if ((BYTE1(a2) - a2) > 0x3Fu)
    {
      LOBYTE(v10) = 0;
    }

    else
    {
      uint64_t v8 = 0LL;
      int v9 = BYTE1(a2) - (unsigned __int16)a2 + 1;
      do
      {
        uint64_t v8 = (2 * v8) | 1;
        --v9;
      }

      while ((_BYTE)v9);
      uint64_t v10 = v8 & (a1 >> a2);
    }

    std::string::resize(a4, 0x40uLL, a3);
    if (v6 >= v5)
    {
      char v11 = 1;
      do
      {
        else {
          char v12 = 48;
        }
        if ((a4->__r_.__value_.__s.__size_ & 0x80u) == 0) {
          char v13 = a4;
        }
        else {
          char v13 = (std::string *)a4->__r_.__value_.__r.__words[0];
        }
        v13->__r_.__value_.__s.__data_[v7] = v12;
        v11 *= 2;
        ++v7;
      }

      while ((v5 >> 8) >= v7);
    }

    int size = (char)a4->__r_.__value_.__s.__size_;
    BOOL v15 = size < 0;
    if (size >= 0) {
      BOOL v16 = a4;
    }
    else {
      BOOL v16 = (std::string *)a4->__r_.__value_.__r.__words[0];
    }
    if (v15) {
      std::string::size_type v17 = a4->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v17 = a4->__r_.__value_.__s.__size_;
    }
    std::string::size_type v18 = (std::string *)((char *)v16 + v17 - 1);
    if (v17) {
      BOOL v19 = v18 > v16;
    }
    else {
      BOOL v19 = 0;
    }
    if (v19)
    {
      unint64_t v20 = (unint64_t)v16->__r_.__value_.__r.__words + 1;
      do
      {
        std::string::value_type v21 = *(_BYTE *)(v20 - 1);
        *(_BYTE *)(v20 - 1) = v18->__r_.__value_.__s.__data_[0];
        v18->__r_.__value_.__s.__data_[0] = v21;
        std::string::size_type v18 = (std::string *)((char *)v18 - 1);
      }

      while (v20++ < (unint64_t)v18);
    }
  }

{
  unint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  char v12;
  std::string *v13;
  int size;
  BOOL v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  BOOL v19;
  unint64_t v20;
  std::string::value_type v21;
  unint64_t v5 = (unsigned __int16)a2;
  unsigned int v6 = BYTE1(a2);
  a4->__r_.__value_.__r.__words[0] = 0LL;
  a4->__r_.__value_.__l.__size_ = 0LL;
  a4->__r_.__value_.__l.__cap_ = 0LL;
  if (((BYTE1(a2) - (_BYTE)a2) & 0xC0) == 0)
  {
    int v7 = a2;
    if ((BYTE1(a2) - a2) > 0x3Fu)
    {
      LOBYTE(v10) = 0;
    }

    else
    {
      uint64_t v8 = 0LL;
      int v9 = BYTE1(a2) - (unsigned __int16)a2 + 1;
      do
      {
        uint64_t v8 = (2 * v8) | 1;
        --v9;
      }

      while ((_BYTE)v9);
      uint64_t v10 = v8 & (a1 >> a2);
    }

    std::string::resize(a4, 0x40uLL, a3);
    if (v6 >= v5)
    {
      char v11 = 1;
      do
      {
        else {
          char v12 = 48;
        }
        if ((a4->__r_.__value_.__s.__size_ & 0x80u) == 0) {
          char v13 = a4;
        }
        else {
          char v13 = (std::string *)a4->__r_.__value_.__r.__words[0];
        }
        v13->__r_.__value_.__s.__data_[v7] = v12;
        v11 *= 2;
        ++v7;
      }

      while ((v5 >> 8) >= v7);
    }

    int size = (char)a4->__r_.__value_.__s.__size_;
    BOOL v15 = size < 0;
    if (size >= 0) {
      BOOL v16 = a4;
    }
    else {
      BOOL v16 = (std::string *)a4->__r_.__value_.__r.__words[0];
    }
    if (v15) {
      std::string::size_type v17 = a4->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v17 = a4->__r_.__value_.__s.__size_;
    }
    std::string::size_type v18 = (std::string *)((char *)v16 + v17 - 1);
    if (v17) {
      BOOL v19 = v18 > v16;
    }
    else {
      BOOL v19 = 0;
    }
    if (v19)
    {
      unint64_t v20 = (unint64_t)v16->__r_.__value_.__r.__words + 1;
      do
      {
        std::string::value_type v21 = *(_BYTE *)(v20 - 1);
        *(_BYTE *)(v20 - 1) = v18->__r_.__value_.__s.__data_[0];
        v18->__r_.__value_.__s.__data_[0] = v21;
        std::string::size_type v18 = (std::string *)((char *)v18 - 1);
      }

      while (v20++ < (unint64_t)v18);
    }
  }

void sub_1865C3CE8(_Unwind_Exception *exception_object)
{
}

void ctu::bitfieldPrettyPrint( unint64_t a1@<X0>, unsigned __int16 a2@<W1>, std::string::value_type a3@<W2>, std::string *a4@<X8>)
{
}

{
  ctu::bitfieldPrettyPrint(a1, a2, a3, a4);
}

void sub_1865C3E40(_Unwind_Exception *exception_object)
{
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_189E93120, MEMORY[0x1896141F8]);
}

void sub_1865C3EB4(_Unwind_Exception *a1)
{
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x189614778] + 16LL);
  return result;
}

uint64_t ctu::MapRestResource::MapRestResource(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_189E93A28;
  std::__function::__value_func<std::unique_ptr<ctu::RestResourceBase> ()(std::string const&,xpc::object)>::__value_func[abi:ne180100]( a1 + 8,  a2);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return a1;
}

{
  *(void *)a1 = off_189E93A28;
  std::__function::__value_func<std::unique_ptr<ctu::RestResourceBase> ()(std::string const&,xpc::object)>::__value_func[abi:ne180100]( a1 + 8,  a2);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return a1;
}

void ctu::MapRestResource::~MapRestResource(ctu::MapRestResource *this)
{
  *(void *)this = off_189E93A28;
  boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::~vector((void *)this + 8);
  uint64_t v2 = *((void *)this + 6);
  if (v2)
  {
    int v3 = (uint64_t *)(*((void *)this + 5) + 24LL);
    do
    {
      uint64_t v4 = *v3;
      *int v3 = 0LL;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
      }
      v3 += 4;
      --v2;
    }

    while (v2);
  }

  if (*((void *)this + 7)) {
    operator delete(*((void **)this + 5));
  }
  unint64_t v5 = (ctu::MapRestResource *)*((void *)this + 4);
  if (v5 == (ctu::MapRestResource *)((char *)this + 8))
  {
    uint64_t v6 = 4LL;
    unint64_t v5 = (ctu::MapRestResource *)((char *)this + 8);
  }

  else
  {
    if (!v5) {
      return;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*(void *)v5 + 8 * v6))();
}

{
  void *v1;
  ctu::MapRestResource::~MapRestResource(this);
  operator delete(v1);
}

uint64_t ctu::MapRestResource::handleRestMessage_GET( void ***this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  uint64_t v5 = *((void *)a3 + 3);
  if (v5)
  {
    if (v5 != 1) {
      return ctu::MapRestResource::handleMessage_Resource(this, a2, a3);
    }
    int v7 = **((unsigned __int8 **)a3 + 2);
    if (v7 == 42)
    {
      v29[0] = 0LL;
      v29[1] = 0LL;
      uint64_t v30 = 0LL;
      __p.__r_.__value_.__l.__cap_ = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v11 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
      __int128 v32 = v11;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      __int128 v31 = v11;
      ctu::ReplyDictRestResourceContextDecorator::ReplyDictRestResourceContextDecorator( (ctu::ReplyDictRestResourceContextDecorator *)&v31,  a2);
      char v12 = this[6];
      if (v12)
      {
        uint64_t v13 = (uint64_t)this[5];
        uint64_t v14 = v13 + 32LL * (void)v12;
        do
        {
          std::string::operator=(&__p, (const std::string *)v13);
          *(void *)&__int128 v15 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __int128 v34 = v15;
          __int128 v35 = v15;
          if (*((void *)a3 + 3))
          {
            BOOL v16 = *(unsigned __int8 **)a3;
            unint64_t v17 = *((void *)a3 + 2) - *(void *)a3;
            unint64_t v18 = v17 - 1;
            if (v17 > 1)
            {
              unint64_t v17 = *((void *)a3 + 1);
              if (v18 < v17) {
                unint64_t v17 = v18;
              }
            }

            else if (v17 >= *((void *)a3 + 1))
            {
              unint64_t v17 = *((void *)a3 + 1);
            }
          }

          else
          {
            BOOL v16 = *(unsigned __int8 **)a3;
            unint64_t v17 = *((void *)a3 + 1);
          }

          v28[0] = v16;
          v28[1] = v17;
          ctu::splice_path_with_head<ctu::llvm::StringRef,std::string &,char const(&)[2]>( (uint64_t)v29,  (uint64_t)v28,  v13,  "*",  (uint64_t)&v34);
          ctu::PathView::advance((uint64_t)&v34, 1LL);
          (*(void (**)(void, __int128 *, __int128 *))(**(void **)(v13 + 24) + 16LL))( *(void *)(v13 + 24),  &v31,  &v34);
          v13 += 32LL;
        }

        while (v13 != v14);
      }

      *(void *)&__int128 v31 = off_189E95FB8;
      BOOL v19 = (std::__shared_weak_count *)*((void *)&v32 + 1);
      if (*((void *)&v32 + 1))
      {
        unint64_t v20 = (unint64_t *)(*((void *)&v32 + 1) + 8LL);
        do
          unint64_t v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }

      if (SHIBYTE(v30) < 0) {
        operator delete(v29[0]);
      }
      return 1LL;
    }

    if (v7 != 95) {
      return ctu::MapRestResource::handleMessage_Resource(this, a2, a3);
    }
    __int128 v8 = *((_OWORD *)a3 + 1);
    __int128 v34 = *(_OWORD *)a3;
    __int128 v35 = v8;
    int v9 = (ctu::MapRestResource *)ctu::PathView::advance((uint64_t)&v34, 1LL);
    if (*((void *)&v35 + 1))
    {
      if (*((void *)&v35 + 1) == 3LL)
      {
        if (*(_WORD *)v35 == 27745 && *(_BYTE *)(v35 + 2) == 108)
        {
          __p.__r_.__value_.__l.__cap_ = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&__int128 v23 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __int128 v32 = v23;
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v23;
          __int128 v31 = v23;
          ctu::ReplyDictRestResourceContextDecorator::ReplyDictRestResourceContextDecorator( (ctu::ReplyDictRestResourceContextDecorator *)&v31,  a2);
          v24 = this[6];
          if (v24)
          {
            v25 = this[5];
            v26 = &v25[4 * (void)v24];
            do
            {
              std::string::operator=(&__p, (const std::string *)v25);
              (*(void (**)(void *, __int128 *, __int128 *))(*(void *)v25[3] + 16LL))(v25[3], &v31, &v34);
              v25 += 4;
            }

            while (v25 != v26);
          }

          ctu::ReplyDictRestResourceContextDecorator::~ReplyDictRestResourceContextDecorator((void **)&v31);
          return 1LL;
        }
      }

      else if (*((void *)&v35 + 1) == 6LL)
      {
        if (*(_DWORD *)v35 == 1768189805 && *(_WORD *)(v35 + 4) == 31078) {
          return 1LL;
        }
      }

      else if (*((void *)&v35 + 1) == 8LL && *(void *)v35 == 0x7372656863746177LL)
      {
        if ((void)v34 + *((void *)&v34 + 1) == (void)v35 + 8LL
          || (void)v35 + 9LL == (void)v34 + *((void *)&v34 + 1))
        {
          ctu::MapRestResource::handleMessage_Watchers_GET((ctu::MapRestResource *)this, a2);
        }

        return 1LL;
      }

      return 0LL;
    }

    ctu::MapRestResource::handleMessage_Meta_GET(v9, a2);
  }

  else
  {
    ctu::MapRestResource::handleMessage_Root_GET((ctu::MapRestResource *)this, a2);
  }

  return 1LL;
}

void sub_1865C4374( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

uint64_t ctu::MapRestResource::handleMessage_Root_GET( ctu::MapRestResource *this, ctu::RestResourceContext *a2)
{
  xpc_object_t v5 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32LL))(a2, &v5);
  xpc_release(v5);
  xpc_object_t v5 = 0LL;
  xpc_release(object);
  return 1LL;
}

void sub_1865C4434( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
}

uint64_t ctu::MapRestResource::handleMessage_Meta_GET( ctu::MapRestResource *this, ctu::RestResourceContext *a2)
{
  xpc_object_t v3 = v5;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32LL))(a2, &object);
  xpc_release(object);
  xpc_release(v3);
  return 1LL;
}

void sub_1865C4504( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t ctu::MapRestResource::handleMessage_Watchers_GET( ctu::MapRestResource *this, ctu::RestResourceContext *a2)
{
  xpc_object_t v4 = xpc_array_create(0LL, 0LL);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0LL)
  {
    if (MEMORY[0x186E3CD4C](v4) == MEMORY[0x1895F9220])
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }

    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0LL;
  }

  xpc_release(v4);
  if (*((void *)this + 9))
  {
    uint64_t v6 = *((void *)this + 8);
    do
    {
      xpc_object_t object = 0LL;
      unint64_t v20 = 0LL;
      int v7 = *(std::__shared_weak_count **)(v6 + 8);
      if (v7)
      {
        __int128 v8 = std::__shared_weak_count::lock(v7);
        unint64_t v20 = v8;
        if (v8)
        {
          int v9 = *(char **)v6;
          xpc_object_t object = v9;
          if (v9)
          {
            char v12 = (const char *)*((void *)v9 + 1);
            uint64_t v10 = v9 + 8;
            __int128 v11 = v12;
            if (v10[23] >= 0) {
              uint64_t v13 = v10;
            }
            else {
              uint64_t v13 = v11;
            }
            xpc_object_t v14 = xpc_string_create(v13);
            if (!v14) {
              xpc_object_t v14 = xpc_null_create();
            }
            xpc_array_append_value(v5, v14);
            xpc_release(v14);
            v6 += 16LL;
            __int128 v8 = v20;
            if (!v20) {
              continue;
            }
LABEL_21:
            p_shared_owners = (unint64_t *)&v8->__shared_owners_;
            do
              unint64_t v16 = __ldaxr(p_shared_owners);
            while (__stlxr(v16 - 1, p_shared_owners));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }

            continue;
          }
        }
      }

      else
      {
        __int128 v8 = 0LL;
      }

      uint64_t v21 = v6;
      boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::erase( (void *)this + 8,  &v21,  &v18);
      uint64_t v6 = v18;
      if (v8) {
        goto LABEL_21;
      }
    }

    while (v6 != *((void *)this + 8) + 16LL * *((void *)this + 9));
  }

  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32LL))(a2, &object);
  xpc_release(object);
  xpc_release(v5);
  return 1LL;
}

void sub_1865C471C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::ReplyDictRestResourceContextDecorator::~ReplyDictRestResourceContextDecorator(void **this)
{
  *this = off_189E95FB8;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)(this + 2));
}

{
  *this = off_189E95FB8;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)(this + 2));
  operator delete(this);
}

uint64_t ctu::splice_path_with_head<ctu::llvm::StringRef,std::string &,char const(&)[2]>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(void **)a2;
  if (v10) {
    std::string::basic_string[abi:ne180100](&__dst, v10, *(void *)(a2 + 8));
  }
  else {
    memset(&__dst, 0, sizeof(__dst));
  }
  int v11 = *(char *)(a3 + 23);
  if (v11 >= 0) {
    char v12 = (_BYTE *)a3;
  }
  else {
    char v12 = *(_BYTE **)a3;
  }
  if (v11 >= 0) {
    size_t v13 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v13 = *(void *)(a3 + 8);
  }
  ctu::path_join_impl(&__dst, v12, v13);
  size_t v14 = strlen(a4);
  ctu::path_join_impl(&__dst, a4, v14);
  *(_OWORD *)a1 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  std::string::size_type cap = __dst.__r_.__value_.__l.__cap_;
  *(void *)(a1 + 16) = __dst.__r_.__value_.__l.__cap_;
  *(void *)&__int128 v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)a5 = v16;
  *(_OWORD *)(a5 + 16) = v16;
  std::string::size_type v17 = HIBYTE(cap);
  if ((v17 & 0x80u) == 0LL) {
    uint64_t v18 = (void *)a1;
  }
  else {
    uint64_t v18 = *(void **)a1;
  }
  if ((v17 & 0x80u) == 0LL) {
    unint64_t v19 = v17;
  }
  else {
    unint64_t v19 = *(void *)(a1 + 8);
  }
  unint64_t v20 = ctu::PathView::PathView((void *)a5, (uint64_t)v18, v19);
  return ctu::PathView::skip(v20, *(_BYTE **)a2, *(void *)(a2 + 8));
}

void sub_1865C48C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::MapRestResource::handleMessage_Resource( void ***this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  xpc_object_t v5 = (void *)*((void *)a3 + 2);
  size_t v6 = *((void *)a3 + 3);
  __int128 v7 = *((_OWORD *)a3 + 1);
  v10[0] = *(_OWORD *)a3;
  v10[1] = v7;
  ctu::PathView::advance((uint64_t)v10, 1LL);
  if (v5)
  {
    std::string::basic_string[abi:ne180100](__p, v5, v6);
  }

  else
  {
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v12 = 0LL;
  }

  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find( (uint64_t)&v13,  this + 5,  __p);
  uint64_t v8 = v13;
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  else {
    return (*(uint64_t (**)(void, ctu::RestResourceContext *, _OWORD *))(**(void **)(v8 + 24) + 16LL))( *(void *)(v8 + 24),  a2,  v10);
  }
}

uint64_t ctu::MapRestResource::handleRestMessage_SET( void ***this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  uint64_t v3 = *((void *)a3 + 3);
  if (!v3) {
    return 1LL;
  }
  if (v3 != 1 || **((_BYTE **)a3 + 2) != 95) {
    return ctu::MapRestResource::handleMessage_Resource(this, a2, a3);
  }
  __int128 v4 = *((_OWORD *)a3 + 1);
  __int128 v8 = *(_OWORD *)a3;
  __int128 v9 = v4;
  uint64_t v5 = 1LL;
  ctu::PathView::advance((uint64_t)&v8, 1LL);
  if (*((void *)&v9 + 1))
  {
    if (*((void *)&v9 + 1) == 6LL) {
      return *(_DWORD *)v9 == 1768189805 && *(_WORD *)(v9 + 4) == 31078;
    }
    if (*((void *)&v9 + 1) == 8LL) {
      return *(void *)v9 == 0x7372656863746177LL;
    }
    return 0LL;
  }

  return v5;
}

uint64_t ctu::MapRestResource::handleRestMessage_POP( void ***this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  uint64_t v6 = *((void *)a3 + 3);
  if (v6 == 1)
  {
    if (**((_BYTE **)a3 + 2) == 95)
    {
      __int128 v8 = *((_OWORD *)a3 + 1);
      __int128 v11 = *(_OWORD *)a3;
      __int128 v12 = v8;
      uint64_t v7 = 1LL;
      ctu::PathView::advance((uint64_t)&v11, 1LL);
      if (*((void *)&v12 + 1))
      {
        if (*((void *)&v12 + 1) == 6LL
          && (*(_DWORD *)v12 == 1768189805 ? (BOOL v9 = *(unsigned __int16 *)(v12 + 4) == 31078) : (BOOL v9 = 0), v9))
        {
          uint64_t v7 = 1LL;
          ctu::PathView::advance((uint64_t)&v11, 1LL);
          ctu::MapRestResource::handleMessage_Modify_POP(this, a2, a3, (const ctu::PathView *)&v11);
        }

        else
        {
          return 0LL;
        }
      }

      return v7;
    }

    return ctu::MapRestResource::handleMessage_Resource(this, a2, a3);
  }

  if (v6) {
    return ctu::MapRestResource::handleMessage_Resource(this, a2, a3);
  }
  ctu::MapRestResource::handleMessage_Root_POP((ctu::MapRestResource *)this, a2);
  return 1LL;
}

uint64_t ctu::MapRestResource::handleMessage_Root_POP( ctu::MapRestResource *this, ctu::RestResourceContext *a2)
{
  (**(void (***)(uint64_t *__return_ptr, ctu::RestResourceContext *))a2)(&v18, a2);
  uint64_t v3 = (uint64_t *)*((void *)this + 8);
  if (*((void *)this + 9))
  {
    do
    {
      uint64_t v21 = 0LL;
      std::string::value_type v22 = 0LL;
      __int128 v4 = (std::__shared_weak_count *)v3[1];
      if (v4)
      {
        uint64_t v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        std::string::value_type v22 = v5;
        if (v5)
        {
          uint64_t v7 = *v3;
          uint64_t v21 = (uint64_t *)v7;
          if (v7)
          {
            uint64_t v8 = v18;
            BOOL v9 = v7 != v18;
            v3 += 2 * (v7 != v18);
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              unint64_t v11 = __ldaxr(p_shared_owners);
            while (__stlxr(v11 - 1, p_shared_owners));
            if (!v11) {
              goto LABEL_16;
            }
            if (v7 == v8) {
              break;
            }
            continue;
          }
        }
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      __int128 v23 = v3;
      boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::erase( (void *)this + 8,  (uint64_t *)&v23,  &v20);
      uint64_t v3 = v20;
      if (v6)
      {
        __int128 v12 = (unint64_t *)&v6->__shared_owners_;
        do
          unint64_t v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          BOOL v9 = 1;
LABEL_16:
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
          if (!v9) {
            break;
          }
        }
      }
    }

    while (v3 != (uint64_t *)(*((void *)this + 8) + 16LL * *((void *)this + 9)));
  }

  size_t v14 = v19;
  if (v19)
  {
    __int128 v15 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

  if (v3 != (uint64_t *)(*((void *)this + 8) + 16LL * *((void *)this + 9)))
  {
    uint64_t v21 = v3;
    boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::erase( (void *)this + 8,  (uint64_t *)&v21,  &v18);
  }

  return 1LL;
}

void sub_1865C4CF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t ctu::MapRestResource::handleMessage_Modify_POP( void ***this, ctu::RestResourceContext *a2, const ctu::PathView *a3, const ctu::PathView *a4)
{
  size_t v7 = *((void *)a4 + 3);
  if (v7)
  {
    uint64_t v8 = (char *)*((void *)a4 + 2);
    BOOL v9 = (char *)(*(void *)a4 + *((void *)a4 + 1));
    if (v9 != &v8[v7] && &v8[v7 + 1] != v9) {
      return 1LL;
    }
  }

  else
  {
    uint64_t v8 = (char *)*((void *)a4 + 2);
  }

  if (v8) {
    std::string::basic_string[abi:ne180100](__p, v8, v7);
  }
  else {
    memset(__p, 0, sizeof(__p));
  }
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find( (uint64_t)&v29,  this + 5,  __p);
  uint64_t v11 = v29;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = (uint64_t)&this[5][4 * (void)this[6]];
  if (v11 != v12)
  {
    uint64_t v13 = v11 + 32;
    while (v13 != v12)
    {
      boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>::operator=( v11,  (__int128 *)(v11 + 32));
      uint64_t v13 = v11 + 64;
      v11 += 32LL;
    }

    uint64_t v14 = *(void *)(v12 - 8);
    *(void *)(v12 - 8) = 0LL;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
    }
    this[6] = (void **)((char *)this[6] - 1);
    memset(__p, 170, sizeof(__p));
    if (*((void *)a3 + 3))
    {
      __int128 v15 = *(void **)a3;
      unint64_t v16 = *((void *)a3 + 2) - *(void *)a3;
      if (v16 > 1)
      {
        if (v16 - 1 >= *((void *)a3 + 1)) {
          size_t v17 = *((void *)a3 + 1);
        }
        else {
          size_t v17 = v16 - 1;
        }
        if (!v15) {
          goto LABEL_34;
        }
      }

      else
      {
        if (v16 >= *((void *)a3 + 1)) {
          size_t v17 = *((void *)a3 + 1);
        }
        else {
          size_t v17 = *((void *)a3 + 2) - *(void *)a3;
        }
        if (!v15) {
          goto LABEL_34;
        }
      }
    }

    else
    {
      __int128 v15 = *(void **)a3;
      size_t v17 = *((void *)a3 + 1);
      if (!*(void *)a3)
      {
LABEL_34:
        memset(__p, 0, sizeof(__p));
        goto LABEL_35;
      }
    }

    std::string::basic_string[abi:ne180100](__p, v15, v17);
LABEL_35:
    xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    ctu::MapRestResource::getResourceList((ctu::MapRestResource *)this, &object);
    if (!this[9])
    {
LABEL_62:
      xpc_release(object);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      return 1LL;
    }

    uint64_t v18 = this[8];
    while (1)
    {
      uint64_t v29 = 0LL;
      uint64_t v30 = 0LL;
      unint64_t v19 = (std::__shared_weak_count *)v18[1];
      if (v19)
      {
        unint64_t v20 = std::__shared_weak_count::lock(v19);
        uint64_t v30 = v20;
        if (v20)
        {
          uint64_t v21 = (char *)*v18;
          uint64_t v29 = (uint64_t)v21;
          if (v21)
          {
            if (v21[31] >= 0) {
              std::string::value_type v22 = v21 + 8;
            }
            else {
              std::string::value_type v22 = (const char *)*((void *)v21 + 1);
            }
            xpc_object_t v33 = xpc_string_create(v22);
            if (!v33) {
              xpc_object_t v33 = xpc_null_create();
            }
            if (SHIBYTE(__p[2]) >= 0) {
              __int128 v23 = __p;
            }
            else {
              __int128 v23 = (void **)__p[0];
            }
            xpc_object_t v32 = xpc_string_create((const char *)v23);
            if (!v32) {
              xpc_object_t v32 = xpc_null_create();
            }
            xpc_object_t v31 = object;
            if (object) {
              xpc_retain(object);
            }
            else {
              xpc_object_t v31 = xpc_null_create();
            }
            (*(void (**)(ctu::RestResourceContext *, char *, xpc_object_t *, xpc_object_t *, xpc_object_t *))(*(void *)a2 + 48LL))( a2,  v21,  &v33,  &v32,  &v31);
            xpc_release(v31);
            xpc_release(v32);
            xpc_release(v33);
            v18 += 2;
LABEL_57:
            p_shared_owners = (unint64_t *)&v20->__shared_owners_;
            do
              unint64_t v25 = __ldaxr(p_shared_owners);
            while (__stlxr(v25 - 1, p_shared_owners));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }

            goto LABEL_61;
          }
        }
      }

      else
      {
        unint64_t v20 = 0LL;
      }

      xpc_object_t v33 = v18;
      boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::erase( this + 8,  (uint64_t *)&v33,  &v32);
      uint64_t v18 = (void **)v32;
      if (v20) {
        goto LABEL_57;
      }
LABEL_61:
      if (v18 == &this[8][2 * (void)this[9]]) {
        goto LABEL_62;
      }
    }
  }

  return 1LL;
}

void sub_1865C5010( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, xpc_object_t object, xpc_object_t a20, xpc_object_t a21)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::MapRestResource::handleRestMessage_PUSH( ctu::MapRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  uint64_t v6 = *((void *)a3 + 3);
  if (v6 == 1)
  {
    if (**((_BYTE **)a3 + 2) == 95)
    {
      __int128 v8 = *((_OWORD *)a3 + 1);
      __int128 v11 = *(_OWORD *)a3;
      __int128 v12 = v8;
      uint64_t v7 = 1LL;
      ctu::PathView::advance((uint64_t)&v11, 1LL);
      if (*((void *)&v12 + 1))
      {
        if (*((void *)&v12 + 1) == 6LL
          && (*(_DWORD *)v12 == 1768189805 ? (BOOL v9 = *(unsigned __int16 *)(v12 + 4) == 31078) : (BOOL v9 = 0), v9))
        {
          uint64_t v7 = 1LL;
          ctu::PathView::advance((uint64_t)&v11, 1LL);
          ctu::MapRestResource::handleMessage_Modify_PUSH(this, a2, a3, (const ctu::PathView *)&v11);
        }

        else
        {
          return 0LL;
        }
      }

      return v7;
    }

    return ctu::MapRestResource::handleMessage_Resource((void ***)this, a2, a3);
  }

  if (v6) {
    return ctu::MapRestResource::handleMessage_Resource((void ***)this, a2, a3);
  }
  ctu::MapRestResource::handleMessage_Root_PUSH(this, a2, a3);
  return 1LL;
}

uint64_t ctu::MapRestResource::handleMessage_Root_PUSH( ctu::MapRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  (**(void (***)(__n128 *__return_ptr, ctu::RestResourceContext *))a2)(&v24, a2);
  if (!v24.n128_u64[0]) {
    goto LABEL_35;
  }
  __n128 string = v24;
  if (v24.n128_u64[1])
  {
    uint64_t v6 = (unint64_t *)(v24.n128_u64[1] + 16);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::insert_unique( (uint64_t *)this + 8,  &string,  (__n128 **)v23);
  if (string.n128_u64[1]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)string.n128_u64[1]);
  }
  unint64_t v8 = v24.n128_u64[0];
  BOOL v9 = (const char *)(v24.n128_u64[0] + 8);
  v23[0] = xpc_string_create(v9);
  if (!v23[0]) {
    v23[0] = xpc_null_create();
  }
  if (*((void *)a3 + 3))
  {
    uint64_t v10 = *(void **)a3;
    unint64_t v11 = *((void *)a3 + 2) - *(void *)a3;
    if (v11 > 1)
    {
      if (v11 - 1 >= *((void *)a3 + 1)) {
        size_t v12 = *((void *)a3 + 1);
      }
      else {
        size_t v12 = v11 - 1;
      }
      if (!v10) {
        goto LABEL_26;
      }
    }

    else
    {
      if (v11 >= *((void *)a3 + 1)) {
        size_t v12 = *((void *)a3 + 1);
      }
      else {
        size_t v12 = *((void *)a3 + 2) - *(void *)a3;
      }
      if (!v10) {
        goto LABEL_26;
      }
    }

LABEL_19:
    std::string::basic_string[abi:ne180100](&string, v10, v12);
    if (v21 >= 0) {
      p___n128 string = &string;
    }
    else {
      p___n128 string = (__n128 *)string.n128_u64[0];
    }
    goto LABEL_27;
  }

  uint64_t v10 = *(void **)a3;
  size_t v12 = *((void *)a3 + 1);
  if (*(void *)a3) {
    goto LABEL_19;
  }
LABEL_26:
  __n128 string = 0uLL;
  p___n128 string = &string;
  uint64_t v21 = 0LL;
LABEL_27:
  xpc_object_t v22 = xpc_string_create((const char *)p_string);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  ctu::MapRestResource::getResourceList(this, &object);
  xpc_object_t v19 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v19 = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, unint64_t, xpc_object_t *, xpc_object_t *, xpc_object_t *))(*(void *)a2 + 48LL))( a2,  v8,  v23,  &v22,  &v19);
  xpc_release(v19);
  xpc_object_t v19 = 0LL;
  xpc_release(object);
  xpc_release(v22);
  xpc_object_t v22 = 0LL;
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)string.n128_u64[0]);
  }
  xpc_release(v23[0]);
LABEL_35:
  uint64_t v14 = (std::__shared_weak_count *)v24.n128_u64[1];
  if (v24.n128_u64[1])
  {
    __int128 v15 = (unint64_t *)(v24.n128_u64[1] + 8);
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

  return 1LL;
}

  if (v6 == v9)
  {
    BOOL v9 = v6;
    goto LABEL_36;
  }

  uint64_t v21 = v9 - 16;
  xpc_object_t v22 = *(void *)(v9 - 8);
  if (v22 <= (unint64_t)v8)
  {
    v9 -= 16LL;
LABEL_42:
    v36 = v9;
    goto LABEL_43;
  }

  if (v21 == v6)
  {
    BOOL v9 = v6;
  }

  else
  {
    __int128 v23 = (v21 - v6) >> 4;
    BOOL v9 = v6;
    do
    {
      __n128 v24 = v23 >> 1;
      unint64_t v25 = v9 + 16 * (v23 >> 1);
      v26 = *(void *)(v25 + 8);
      v27 = v25 + 16;
      v23 += ~(v23 >> 1);
      else {
        BOOL v9 = v27;
      }
    }

    while (v23);
  }

  if (v9 == v21)
  {
    BOOL v9 = v21;
    goto LABEL_36;
  }

void sub_1865C53A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t a10, void *__p, std::__shared_weak_count *a12, int a13, __int16 a14, char a15, char a16, xpc_object_t a17, xpc_object_t object)
{
}

uint64_t ctu::MapRestResource::handleMessage_Modify_PUSH( ctu::MapRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3, const ctu::PathView *a4)
{
  uint64_t v59 = *MEMORY[0x1895F89C0];
  size_t v7 = *((void *)a4 + 3);
  if (!v7)
  {
    unint64_t v8 = (char *)*((void *)a4 + 2);
    goto LABEL_8;
  }

  unint64_t v8 = (char *)*((void *)a4 + 2);
  BOOL v9 = (char *)(*(void *)a4 + *((void *)a4 + 1));
  if (v9 == &v8[v7] || &v8[v7 + 1] == v9)
  {
LABEL_8:
    memset(__dst, 170, sizeof(__dst));
    if (v8) {
      std::string::basic_string[abi:ne180100](__dst, v8, v7);
    }
    else {
      memset(__dst, 0, sizeof(__dst));
    }
    xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(xpc_object_t *__return_ptr, ctu::RestResourceContext *))(*(void *)a2 + 24LL))(&object, a2);
    xpc_object_t v48 = object;
    unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
    if (object) {
      xpc_retain(object);
    }
    else {
      xpc_object_t v48 = xpc_null_create();
    }
    uint64_t v11 = *((void *)this + 4);
    if (!v11) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(unint64_t *__return_ptr, uint64_t, void **, xpc_object_t *))(*(void *)v11 + 48LL))( &v49,  v11,  __dst,  &v48);
    xpc_release(v48);
    xpc_object_t v48 = 0LL;
    if (!v49) {
      goto LABEL_102;
    }
    uint64_t v12 = *((void *)this + 5);
    unint64_t v14 = *((void *)this + 6);
    uint64_t v13 = (void ***)((char *)this + 40);
    if (v14)
    {
      __int128 v15 = (void **)*((void *)this + 5);
      do
      {
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( &v15[4 * (v14 >> 1)],  __dst) & 0x80u) == 0LL)
        {
          v14 >>= 1;
        }

        else
        {
          v15 += 4 * (v14 >> 1) + 4;
          v14 += ~(v14 >> 1);
        }
      }

      while (v14);
      uint64_t v12 = *((void *)this + 5);
      uint64_t v16 = *((void *)this + 6);
    }

    else
    {
      uint64_t v16 = 0LL;
      __int128 v15 = (void **)*((void *)this + 5);
    }

    if (v15 != (void **)(v12 + 32 * v16)
      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, v15) & 0x80) == 0)
    {
LABEL_55:
      unint64_t v33 = v49;
      unint64_t v49 = 0LL;
      __int128 v34 = v15[3];
      v15[3] = (void *)v33;
      if (v34) {
        (*(void (**)(void *))(*(void *)v34 + 8LL))(v34);
      }
      memset(__p, 170, sizeof(__p));
      if (*((void *)a3 + 3))
      {
        __int128 v35 = *(void **)a3;
        unint64_t v36 = *((void *)a3 + 2) - *(void *)a3;
        if (v36 > 1)
        {
          if (v36 - 1 >= *((void *)a3 + 1)) {
            size_t v37 = *((void *)a3 + 1);
          }
          else {
            size_t v37 = v36 - 1;
          }
          if (!v35) {
            goto LABEL_70;
          }
        }

        else
        {
          if (v36 >= *((void *)a3 + 1)) {
            size_t v37 = *((void *)a3 + 1);
          }
          else {
            size_t v37 = *((void *)a3 + 2) - *(void *)a3;
          }
          if (!v35) {
            goto LABEL_70;
          }
        }
      }

      else
      {
        __int128 v35 = *(void **)a3;
        size_t v37 = *((void *)a3 + 1);
        if (!*(void *)a3)
        {
LABEL_70:
          memset(__p, 0, sizeof(__p));
          goto LABEL_71;
        }
      }

      std::string::basic_string[abi:ne180100](__p, v35, v37);
LABEL_71:
      xpc_object_t v54 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      ctu::MapRestResource::getResourceList(this, &v54);
      if (*((void *)this + 9))
      {
        v38 = (uint64_t *)*((void *)this + 8);
        do
        {
          *(_OWORD *)v52 = 0uLL;
          v39 = (std::__shared_weak_count *)v38[1];
          if (v39)
          {
            v40 = std::__shared_weak_count::lock(v39);
            *(void *)&v52[8] = v40;
            if (v40)
            {
              uint64_t v41 = *v38;
              *(void *)v52 = v41;
              if (v41)
              {
                else {
                  v42 = *(const char **)(v41 + 8);
                }
                v53[0] = xpc_string_create(v42);
                if (!v53[0]) {
                  v53[0] = xpc_null_create();
                }
                if (SHIBYTE(__p[2]) >= 0) {
                  v43 = __p;
                }
                else {
                  v43 = (void **)__p[0];
                }
                xpc_object_t v56 = xpc_string_create((const char *)v43);
                if (!v56) {
                  xpc_object_t v56 = xpc_null_create();
                }
                xpc_object_t v55 = v54;
                if (v54) {
                  xpc_retain(v54);
                }
                else {
                  xpc_object_t v55 = xpc_null_create();
                }
                (*(void (**)(ctu::RestResourceContext *, uint64_t, xpc_object_t *, xpc_object_t *, xpc_object_t *))(*(void *)a2 + 48LL))( a2,  v41,  v53,  &v56,  &v55);
                xpc_release(v55);
                xpc_release(v56);
                xpc_release(v53[0]);
                v38 += 2;
LABEL_93:
                p_shared_owners = (unint64_t *)&v40->__shared_owners_;
                do
                  unint64_t v45 = __ldaxr(p_shared_owners);
                while (__stlxr(v45 - 1, p_shared_owners));
                if (!v45)
                {
                  ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                  std::__shared_weak_count::__release_weak(v40);
                }

                continue;
              }
            }
          }

          else
          {
            v40 = 0LL;
          }

          v53[0] = v38;
          boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::erase( (void *)this + 8,  (uint64_t *)v53,  &v56);
          v38 = (uint64_t *)v56;
          if (v40) {
            goto LABEL_93;
          }
        }

        while (v38 != (uint64_t *)(*((void *)this + 8) + 16LL * *((void *)this + 9)));
      }

      xpc_release(v54);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      unint64_t v46 = v49;
      unint64_t v49 = 0LL;
      if (v46) {
        (*(void (**)(unint64_t))(*(void *)v46 + 8LL))(v46);
      }
LABEL_102:
      xpc_release(object);
      if (SHIBYTE(__dst[2]) < 0) {
        operator delete(__dst[0]);
      }
      return 1LL;
    }

    *(void *)&__int128 v17 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v52 = v17;
    *(_OWORD *)&v52[16] = v17;
    if (SHIBYTE(__dst[2]) < 0)
    {
      std::string::__init_copy_ctor_external( (std::string *)v52,  (const std::string::value_type *)__dst[0],  (std::string::size_type)__dst[1]);
    }

    else
    {
      *(_OWORD *)v52 = *(_OWORD *)__dst;
      *(void **)&v52[16] = __dst[2];
    }

    *(_OWORD *)std::string __p = *(_OWORD *)v52;
    uint64_t v18 = *(void **)&v52[16];
    memset(v52, 0, sizeof(v52));
    __p[2] = v18;
    v58 = 0LL;
    v53[0] = __p;
    v53[1] = (char *)this + 40;
    xpc_object_t v54 = 0LL;
    xpc_object_t v19 = (void **)*((void *)this + 5);
    unint64_t v20 = &v19[4 * *((void *)this + 6)];
    if (v20 != v15)
    {
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, v15) & 0x80) == 0)
      {
        xpc_object_t v55 = v20;
        if (!boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::priv_insert_unique_prepare( v15,  (void ***)&v55,  __p,  (void ***)&v54)) {
          goto LABEL_44;
        }
LABEL_39:
        xpc_object_t v22 = (void **)v54;
        uint64_t v23 = *((void *)this + 6);
        if (*((void *)this + 7) == v23)
        {
          boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>*,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>( &v56,  (char *)this + 40,  (__int128 *)v54,  (__int128 *)__p);
          goto LABEL_47;
        }

        __n128 v24 = &(*v13)[4 * v23];
        if (v24 == v54)
        {
          __int128 v29 = *(_OWORD *)__p;
          *((void **)v54 + 2) = __p[2];
          *(_OWORD *)xpc_object_t v22 = v29;
          memset(__p, 0, sizeof(__p));
          uint64_t v30 = v58;
          v58 = 0LL;
          v24[3] = v30;
          ++*((void *)this + 6);
        }

        else
        {
          uint64_t v25 = (uint64_t)(v24 - 4);
          *(_OWORD *)__n128 v24 = *((_OWORD *)v24 - 2);
          *(v24 - 4) = 0LL;
          *(v24 - 3) = 0LL;
          v26 = *(v24 - 2);
          v27 = *(v24 - 1);
          *(v24 - 2) = 0LL;
          *(v24 - 1) = 0LL;
          v24[2] = v26;
          v24[3] = v27;
          ++*((void *)this + 6);
          if (v24 - 4 != v22)
          {
            do
            {
              v28 = (void **)(v25 - 32);
              boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>::operator=( v25,  (__int128 *)(v25 - 32));
              uint64_t v25 = (uint64_t)v28;
            }

            while (v28 != v22);
          }

          boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>::operator=( (uint64_t)v22,  (__int128 *)__p);
        }

LABEL_46:
        xpc_object_t v56 = v22;
LABEL_47:
        xpc_object_t v31 = v58;
        v58 = 0LL;
        if (v31) {
          (*(void (**)(void *))(*(void *)v31 + 8LL))(v31);
        }
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
        __int128 v15 = (void **)v56;
        uint64_t v32 = *(void *)&v52[24];
        *(void *)&v52[24] = 0LL;
        if (v32) {
          (*(void (**)(uint64_t))(*(void *)v32 + 8LL))(v32);
        }
        if ((v52[23] & 0x80000000) != 0) {
          operator delete(*(void **)v52);
        }
        goto LABEL_55;
      }

      xpc_object_t v19 = *v13;
    }

    xpc_object_t v54 = v15;
    if (v19 == v15) {
      goto LABEL_39;
    }
    uint64_t v21 = v15 - 4;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, v21) & 0x80) != 0)
    {
      xpc_object_t v56 = v21;
      if (boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::priv_insert_unique_prepare( v19,  (void ***)&v56,  __p,  (void ***)&v54))
      {
        goto LABEL_39;
      }
    }

    else
    {
      xpc_object_t v54 = v21;
    }

    CFRelease(v13);
    goto LABEL_47;
  }

  CFRelease(v13);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = v21;
    _os_log_debug_impl( &dword_1865C1000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEBUG,  "Detected a baseband device with hardware model string '%s'",  buf,  0xCu);
  }

  memset(buf, 170, 12);
  if (TelephonyUtilParseHardwareModel(v21, (uint64_t)buf))
  {
    sTelephonyCapabilitiesHardwareModelInfo = *(void *)buf;
    dword_18C4A4580 = *(_DWORD *)&buf[8];
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl( &dword_1865C1000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEBUG,  "Successfully set the hardware model info",  buf,  2u);
    }

    return;
  }

  dword_18C4A4580 = 0;
  sTelephonyCapabilitiesHardwareModelInfo = 0LL;
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = v21;
    uint64_t v6 = (os_log_s *)MEMORY[0x1895F8DA0];
    size_t v7 = "Failed to set hardware model info based on hardware model string '%s'";
    unint64_t v8 = 12;
    goto LABEL_14;
  }

  uint64_t v12 = v20;
LABEL_47:
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v18 - 48) = v19;
  *(void *)(a1 + 56) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v18 - 48) = v19;
}

  *(_BYTE *)(a2 + 23) = 13;
  strcpy((char *)a2, "No Assertions");
LABEL_47:
}

      v11 += 16LL;
      if (v11 == v12) {
        goto LABEL_47;
      }
    }

    __int128 v15 = v14;
    uint64_t v16 = *(void **)v11;
    xpc_object_t object = v16;
    if (!v16
      || (__int128 v17 = (*(uint64_t (**)(void *))(*(void *)v16 + 40LL))(v16), v18 = v17, (a4 & 1) == 0) && !v17)
    {
LABEL_42:
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        uint64_t v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }

      goto LABEL_46;
    }

    value = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v19 = xpc_dictionary_create(0LL, 0LL, 0LL);
    unint64_t v20 = v19;
    if (v19)
    {
      value = v19;
    }

    else
    {
      unint64_t v20 = xpc_null_create();
      value = v20;
      if (!v20)
      {
        uint64_t v21 = xpc_null_create();
        unint64_t v20 = 0LL;
        goto LABEL_27;
      }
    }

    if (MEMORY[0x186E3CD4C](v20) == MEMORY[0x1895F9250])
    {
      xpc_retain(v20);
      goto LABEL_28;
    }

    uint64_t v21 = xpc_null_create();
LABEL_27:
    value = v21;
LABEL_28:
    xpc_release(v20);
    (*(void (**)(std::string *__return_ptr))(*(void *)object + 32LL))(&__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    __int128 v35 = xpc_string_create((const char *)p_p);
    if (!v35) {
      __int128 v35 = xpc_null_create();
    }
    v33[0] = &value;
    v33[1] = "kLoggerName";
    xpc::dict::object_proxy::operator=((uint64_t)v33, &v35, &v36);
    xpc_release(v36);
    unint64_t v36 = 0LL;
    xpc_release(v35);
    __int128 v35 = 0LL;
    xpc_object_t v31 = xpc_int64_create(v18);
    if (!v31) {
      xpc_object_t v31 = xpc_null_create();
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&value;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"kLoggerLevel";
    xpc::dict::object_proxy::operator=((uint64_t)&__p, &v31, &v32);
    xpc_release(v32);
    uint64_t v32 = 0LL;
    xpc_release(v31);
    xpc_object_t v31 = 0LL;
    uint64_t v23 = (const char *)a2;
    __int128 v29 = xpc_string_create(v23);
    if (!v29) {
      __int128 v29 = xpc_null_create();
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&value;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"kLoggerDomain";
    xpc::dict::object_proxy::operator=((uint64_t)&__p, &v29, &v30);
    xpc_release(v30);
    uint64_t v30 = 0LL;
    xpc_release(v29);
    __int128 v29 = 0LL;
    xpc_array_append_value(v40, value);
    xpc_release(value);
    __int128 v15 = v39;
    if (!v39) {
      goto LABEL_46;
    }
    goto LABEL_42;
  }

LABEL_44:
    xpc_object_t v22 = (void **)v54;
    goto LABEL_46;
  }

  return 1LL;
}

        *uint64_t v21 = 0LL;
        v21[1] = 0LL;
        v21[2] = 0LL;
        goto LABEL_68;
      }
    }

    else if (__dst.__r_.__value_.__s.__size_)
    {
      xpc_object_t v31 = __dst;
      goto LABEL_39;
    }

    std::string::basic_string[abi:ne180100]<0>((void *)a3, "");
    uint64_t v21 = (void *)(a3 + 24);
    if (a1)
    {
      std::string::basic_string[abi:ne180100](v21, v8, v9);
      goto LABEL_68;
    }

    goto LABEL_44;
  }

  memset(&__p, 0, sizeof(__p));
  unint64_t v14 = &a1[a2 - 1];
  __int128 v15 = v9;
  while (v15)
  {
    --v15;
    uint64_t v16 = *v14--;
    if (v16 == 47)
    {
      if (v15 >= v9) {
        __int128 v17 = v9;
      }
      else {
        __int128 v17 = v15;
      }
      if (v15 + 1 < v9) {
        uint64_t v18 = v15 + 1;
      }
      else {
        uint64_t v18 = v9;
      }
      xpc_object_t v19 = &v8[v18];
      unint64_t v20 = v9 - v18;
      BOOL v9 = v17;
      goto LABEL_47;
    }
  }

  if (!a1)
  {
    memset(&__p, 0, sizeof(__p));
    goto LABEL_52;
  }

  xpc_object_t v19 = 0LL;
  unint64_t v20 = 0LL;
LABEL_47:
  std::string::basic_string[abi:ne180100](&v31, v8, v9);
  std::string __p = v31;
  if (v19)
  {
    std::string::basic_string[abi:ne180100](&v31, v19, v20);
    goto LABEL_53;
  }

void sub_1865C5A30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, xpc_object_t object, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, xpc_object_t a26, uint64_t a27, xpc_object_t a28, xpc_object_t a29, xpc_object_t a30, uint64_t a31, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  if (a24) {
    (*(void (**)(uint64_t))(*(void *)a24 + 8LL))(a24);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  xpc_release(object);
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::MapRestResource::handleRestMessage_NOTIFY( void ***this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  if (*((void *)a3 + 3)) {
    return ctu::MapRestResource::handleMessage_Resource(this, a2, a3);
  }
  else {
    return 0LL;
  }
}

void ctu::MapRestResource::getResourceList(ctu::MapRestResource *this@<X0>, xpc_object_t *a2@<X8>)
{
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_array_create(0LL, 0LL);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v5) == MEMORY[0x1895F9220])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }

  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  uint64_t v7 = *((void *)this + 6);
  if (v7)
  {
    unint64_t v8 = (__int128 *)*((void *)this + 5);
    uint64_t v9 = 32 * v7;
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }

      else
      {
        __int128 v10 = *v8;
        __p.__r_.__value_.__l.__cap_ = *((void *)v8 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
      }

      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v12 = xpc_string_create((const char *)p_p);
      if (!v12) {
        xpc_object_t v12 = xpc_null_create();
      }
      xpc_array_append_value(*a2, v12);
      xpc_release(v12);
      v8 += 2;
      v9 -= 32LL;
    }

    while (v9);
  }

void sub_1865C5CD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void xpc::array::~array(xpc_object_t *this)
{
  *this = 0LL;
}

void *boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::~vector( void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count **)(*a1 + 8LL);
    do
    {
      if (*v3) {
        std::__shared_weak_count::__release_weak(*v3);
      }
      v3 += 2;
      --v2;
    }

    while (v2);
  }

  if (a1[2]) {
    operator delete((void *)*a1);
  }
  return a1;
}

void __clang_call_terminate(void *a1)
{
}

uint64_t std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  return a1;
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8LL) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    xpc_object_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000LL;
    *std::string __dst = v6;
  }

  else
  {
    *((_BYTE *)__dst + 23) = __len;
    xpc_object_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }

  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void std::string::__init_copy_ctor_external( std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  xpc_object_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8LL) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    size_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__l.__cap_ = v7 | 0x8000000000000000LL;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    xpc_object_t v5 = v8;
  }

  else
  {
    this->__r_.__value_.__s.__size_ = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

uint64_t std::__function::__value_func<std::unique_ptr<ctu::RestResourceBase> ()(std::string const&,xpc::object)>::__value_func[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

uint64_t boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find( uint64_t result, void ***a2, void **a3)
{
  uint64_t v4 = (void *)result;
  *(void *)result = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v5 = *a2;
  std::string::size_type v6 = a2[1];
  if (v6)
  {
    size_t v8 = *a2;
    do
    {
      result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( &v8[4 * ((unint64_t)v6 >> 1)],  a3);
      if ((result & 0x80u) == 0LL)
      {
        std::string::size_type v6 = (void **)((unint64_t)v6 >> 1);
      }

      else
      {
        v8 += 4 * ((unint64_t)v6 >> 1) + 4;
        std::string::size_type v6 = (void **)((char *)v6 + ~((unint64_t)v6 >> 1));
      }
    }

    while (v6);
    xpc_object_t v5 = *a2;
    uint64_t v9 = a2[1];
  }

  else
  {
    uint64_t v9 = 0LL;
    size_t v8 = *a2;
  }

  void *v4 = v8;
  __int128 v10 = &v5[4 * (void)v9];
  if (v8 != v10)
  {
    result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v8);
    if ((result & 0x80) != 0) {
      void *v4 = v10;
    }
  }

  return result;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0LL)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }

  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    xpc_object_t v5 = a2;
  }
  else {
    xpc_object_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>( const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1LL;
    }
  }

  else
  {
    if (a2 == a4) {
      return 0LL;
    }
    if (a2 >= a4) {
      return 1LL;
    }
  }

  return 255LL;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
}

uint64_t *boost::container::dtl::value_destructor<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>::~value_destructor( uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 24);
  *(void *)(v2 + 24) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  return a1;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::priv_insert_unique_prepare( void **a1, void ***a2, void **a3, void ***a4)
{
  size_t v7 = a1;
  if (*a2 != a1)
  {
    unint64_t v8 = ((char *)*a2 - (char *)a1) >> 5;
    do
    {
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v7[4 * (v8 >> 1)], a3) & 0x80u) == 0LL)
      {
        v8 >>= 1;
      }

      else
      {
        v7 += 4 * (v8 >> 1) + 4;
        v8 += ~(v8 >> 1);
      }
    }

    while (v8);
  }

  *a4 = v7;
  return v7 == *a2
      || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v7) & 0x80u) != 0LL;
}

void boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>*,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>( void *a1, char *a2, __int128 *a3, __int128 *a4)
{
  unint64_t v4 = *((void *)a2 + 2);
  unint64_t v5 = 0x3FFFFFFFFFFFFFFLL;
  unint64_t v6 = *((void *)a2 + 1) + 1LL;
  if (0x3FFFFFFFFFFFFFFLL - v4 < v6 - v4) {
    goto LABEL_29;
  }
  unint64_t v7 = v4 >> 61;
  unint64_t v8 = 8 * v4;
  if (v7 > 4) {
    uint64_t v9 = -1LL;
  }
  else {
    uint64_t v9 = v8;
  }
  unint64_t v10 = v8 / 5;
  if (v7) {
    unint64_t v10 = v9;
  }
  if (v10 < 0x3FFFFFFFFFFFFFFLL) {
    unint64_t v5 = v10;
  }
  unint64_t v11 = v6 <= v5 ? v5 : *((void *)a2 + 1) + 1LL;
  if (v11 >> 58) {
LABEL_29:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  uint64_t v16 = *(char **)a2;
  __int128 v17 = (char *)operator new(32 * v11);
  uint64_t v18 = v17;
  xpc_object_t v19 = *(char **)a2;
  uint64_t v20 = *(void *)a2 + 32LL * *((void *)a2 + 1);
  uint64_t v21 = v17;
  if (*(__int128 **)a2 != a3)
  {
    xpc_object_t v22 = *(char **)a2;
    uint64_t v21 = v17;
    do
    {
      __int128 v23 = *(_OWORD *)v22;
      *((void *)v21 + 2) = *((void *)v22 + 2);
      *(_OWORD *)uint64_t v21 = v23;
      *(void *)xpc_object_t v22 = 0LL;
      *((void *)v22 + 1) = 0LL;
      uint64_t v24 = *((void *)v22 + 3);
      *((void *)v22 + 2) = 0LL;
      *((void *)v22 + 3) = 0LL;
      *((void *)v21 + 3) = v24;
      v21 += 32;
      v22 += 32;
    }

    while (v22 != (char *)a3);
  }

  __int128 v25 = *a4;
  *((void *)v21 + 2) = *((void *)a4 + 2);
  *(_OWORD *)uint64_t v21 = v25;
  *(void *)a4 = 0LL;
  *((void *)a4 + 1) = 0LL;
  uint64_t v26 = *((void *)a4 + 3);
  *((void *)a4 + 2) = 0LL;
  *((void *)a4 + 3) = 0LL;
  *((void *)v21 + 3) = v26;
  if ((__int128 *)v20 != a3)
  {
    v27 = v21 + 56;
    v28 = a3;
    do
    {
      __int128 v29 = *v28;
      *(v27 - 1) = *((void *)v28 + 2);
      *(_OWORD *)(v27 - 3) = v29;
      *(void *)v28 = 0LL;
      *((void *)v28 + 1) = 0LL;
      uint64_t v30 = *((void *)v28 + 3);
      *((void *)v28 + 2) = 0LL;
      *((void *)v28 + 3) = 0LL;
      void *v27 = v30;
      v27 += 4;
      v28 += 2;
    }

    while (v28 != (__int128 *)v20);
  }

  if (v19)
  {
    uint64_t v31 = *((void *)a2 + 1);
    if (v31)
    {
      uint64_t v32 = (uint64_t *)(v19 + 24);
      do
      {
        uint64_t v33 = *v32;
        *uint64_t v32 = 0LL;
        if (v33) {
          (*(void (**)(uint64_t))(*(void *)v33 + 8LL))(v33);
        }
        v32 += 4;
        --v31;
      }

      while (v31);
    }

    operator delete(*(void **)a2);
  }

  uint64_t v34 = *((void *)a2 + 1) + 1LL;
  *(void *)a2 = v18;
  *((void *)a2 + 1) = v34;
  *((void *)a2 + 2) = v11;
  *a1 = &v18[(char *)a3 - v16];
}

uint64_t boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>::operator=( uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  uint64_t v5 = *((void *)a2 + 3);
  *((void *)a2 + 3) = 0LL;
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  return a1;
}

void boost::container::throw_length_error(boost::container *this, const char *a2)
{
  exception = __cxa_allocate_exception(0x10uLL);
  void *exception = &unk_189E93AD0;
  exception[1] = this;
}

void boost::container::out_of_range::~out_of_range(std::exception *this)
{
}

const char *boost::container::exception::what(boost::container::exception *this)
{
  if (*((void *)this + 1)) {
    return (const char *)*((void *)this + 1);
  }
  else {
    return "unknown boost::container exception";
  }
}

void xpc::array_creator::operator()<char const*>( char *string@<X1>, xpc_object_t *a2@<X0>, xpc_object_t *a3@<X8>)
{
  xpc_object_t v5 = xpc_string_create(string);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_array_append_value(*a2, v5);
  xpc_object_t v6 = *a2;
  *a3 = *a2;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    *a3 = xpc_null_create();
  }
  xpc_release(v5);
}

void sub_1865C6560(_Unwind_Exception *a1)
{
}

xpc::array_creator *xpc::array_creator::array_creator(xpc::array_creator *this)
{
  xpc_object_t v2 = xpc_array_create(0LL, 0LL);
  if (v2 || (xpc_object_t v2 = xpc_null_create()) != 0LL)
  {
    if (MEMORY[0x186E3CD4C](v2) == MEMORY[0x1895F9220])
    {
      xpc_retain(v2);
      xpc_object_t v3 = v2;
    }

    else
    {
      xpc_object_t v3 = xpc_null_create();
    }
  }

  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v2 = 0LL;
  }

  xpc_release(v2);
  *(void *)this = v3;
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v4);
  return this;
}

void boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::erase( void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a1 + 16LL * a1[1];
  for (uint64_t i = *a2 + 16; i != v6; i += 16LL)
  {
    __int128 v8 = *(_OWORD *)i;
    *(void *)uint64_t i = 0LL;
    *(void *)(i + 8) = 0LL;
    uint64_t v9 = *(std::__shared_weak_count **)(i - 8);
    *(_OWORD *)(i - 16) = v8;
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  unint64_t v10 = *(std::__shared_weak_count **)(v6 - 8);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  --a1[1];
  *a3 = v5;
}

void boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::insert_unique( uint64_t *a1@<X0>, __n128 *a2@<X1>, __n128 **a3@<X8>)
{
  *a3 = 0LL;
  a3[1] = (__n128 *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = (__n128 *)*a1;
  uint64_t v5 = a1[1];
  unint64_t v7 = (__n128 *)(*a1 + 16 * v5);
  if (v5)
  {
    unint64_t v8 = a1[1];
    do
    {
      unint64_t v9 = v8 >> 1;
      unint64_t v10 = &v6[v8 >> 1];
      unint64_t v11 = v10->n128_u64[1];
      xpc_object_t v12 = v10 + 1;
      v8 += ~(v8 >> 1);
      if (v11 >= a2->n128_u64[1]) {
        unint64_t v8 = v9;
      }
      else {
        uint64_t v6 = v12;
      }
    }

    while (v8);
  }

  if (v6 == v7)
  {
    *((_BYTE *)a3 + 8) = 1;
    if (a1[2] != v5)
    {
      *unint64_t v7 = *a2;
      a2->n128_u64[0] = 0LL;
      a2->n128_u64[1] = 0LL;
      ++a1[1];
      goto LABEL_20;
    }

    goto LABEL_21;
  }

  unint64_t v13 = a2->n128_u64[1];
  unint64_t v14 = v6->n128_u64[1];
  *((_BYTE *)a3 + 8) = v13 < v14;
  if (v13 < v14)
  {
    if (a1[2] != v5)
    {
      __int128 v15 = v7 - 1;
      *unint64_t v7 = v7[-1];
      v7[-1].n128_u64[1] = 0LL;
      v7[-1].n128_u64[0] = 0LL;
      ++a1[1];
      if (&v7[-1] != v6)
      {
        uint64_t v16 = v7 - 1;
        do
        {
          __n128 v17 = v16[-1];
          --v16;
          v15[-1].n128_u64[1] = 0LL;
          v16->n128_u64[0] = 0LL;
          uint64_t v18 = (std::__shared_weak_count *)v15->n128_u64[1];
          *__int128 v15 = v17;
          if (v18) {
            std::__shared_weak_count::__release_weak(v18);
          }
          __int128 v15 = v16;
        }

        while (v16 != v6);
      }

      __n128 v19 = *a2;
      a2->n128_u64[0] = 0LL;
      a2->n128_u64[1] = 0LL;
      uint64_t v20 = (std::__shared_weak_count *)v6->n128_u64[1];
      __n128 *v6 = v19;
      if (v20) {
        std::__shared_weak_count::__release_weak(v20);
      }
      goto LABEL_17;
    }

LABEL_21:
    boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,std::weak_ptr<ctu::RestResourceConnection>*,std::weak_ptr<ctu::RestResourceConnection>>>( a1,  v6,  (const char *)1,  a2,  &v21);
    unint64_t v7 = v21;
    goto LABEL_20;
  }

  if ((**a1)(a1, 20LL))
  {
    uint64_t v31 = 0LL;
    uint64_t v30 = 0u;
    memset(v29, 0, sizeof(v29));
    ctu::LogMessageBuffer::appendString((std::string *)v29, "Invalid current byte position");
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog((uint64_t)a1, 20, (ctu::LogMessageBuffer *)v29);
LABEL_23:
    ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v29);
  }

  if (v29 == (_OWORD *)((char *)v28 + 8))
  {
    uint64_t v21 = 4LL;
    goto LABEL_25;
  }

  if (v29)
  {
    uint64_t v21 = 5LL;
    unint64_t v10 = v29;
LABEL_25:
    (*(void (**)(void *))(*v10 + 8 * v21))(v10);
  }

  if (SBYTE7(v28[0]) < 0) {
    operator delete((void *)v27);
  }
  if ((_BYTE)v15 || a4)
  {
    xpc_object_t v22 = *(void *)(a1 + 56);
    if (v22)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v22 + 32LL))(v22))
      {
        __int128 v23 = *(void *)(a1 + 56);
        else {
          uint64_t v24 = *(const char **)a2;
        }
        *(void *)&v27 = xpc_string_create(v24);
        if (!(void)v27) {
          *(void *)&v27 = xpc_null_create();
        }
        object[0] = xpc_null_create();
        (*(void (**)(uint64_t, __int128 *, xpc_object_t *))(*(void *)v23 + 48LL))(v23, &v27, object);
        xpc_release(object[0]);
        xpc_release((xpc_object_t)v27);
      }
    }
  }

  xpc_object_t v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  xpc_object_t v12 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

    __n128 v19 = 1;
    goto LABEL_23;
  }

  return 1LL;
}

LABEL_17:
  unint64_t v7 = v6;
LABEL_20:
  *a3 = v7;
}

  if (object) {
    dispatch_release(object);
  }
  xpc_release(v21);
}

    unint64_t v10 = 0;
    goto LABEL_25;
  }

  if (v4 == v2)
  {
    uint64_t v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16LL) + 4 * v6) & 0x500) != 0)
        {
          unint64_t v10 = 1;
          goto LABEL_25;
        }

        goto LABEL_17;
      }

      goto LABEL_17;
    }
  }

  unint64_t v7 = *(v4 - 1);
  unint64_t v8 = *v4;
  unint64_t v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16LL) + 4 * v7) & 0x500) != 0;
  unint64_t v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16LL) + 4 * v8) & 0x500) != 0;
  unint64_t v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    xpc_object_t v12 = 0LL;
    unint64_t v13 = -993;
  }

  else
  {
    xpc_object_t v12 = *(void *)(result + 8);
    unint64_t v13 = -994;
  }

  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 80) = v12;
  return result;
}

  ctu::Http::HttpRequest::create(a1, a2, a3, (uint64_t)&v25, a5);
  __n128 v19 = v26;
  if (v26)
  {
    uint64_t v20 = (unint64_t *)&v26->__shared_owners_;
    do
      uint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  xpc_object_t v22 = v32;
  if (v32)
  {
    __int128 v23 = (unint64_t *)&v32->__shared_owners_;
    do
      uint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v35);
  __int128 v23 = (void (***)(void, uint64_t, void **))*a2;
  uint64_t v24 = (std::__shared_weak_count *)a5[1];
  __int128 v25 = (uint64_t)&(*a5)->~__shared_weak_count_0;
  if (*a5) {
    p_get_deleter = &(*a5)[1].__get_deleter;
  }
  else {
    p_get_deleter = 0LL;
  }
  uint64_t v32 = p_get_deleter;
  uint64_t v33 = v24;
  if (v24)
  {
    v27 = (unint64_t *)&v24->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }

  (**v23)(v23, v25, (void **)&v32);
  __int128 v29 = v33;
  if (v33)
  {
    uint64_t v30 = (unint64_t *)&v33->__shared_owners_;
    do
      uint64_t v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }

  std::string __p = v23;
  xpc_object_t v12 = v3 + 2;
  if (v3 + 2 != v4)
  {
    do
    {
      unint64_t v13 = v12;
      v23.__r_.__value_.__s.__size_ = 1;
      LOWORD(v23.__r_.__value_.__l.__data_) = 44;
      std::string::append(&__p, (const std::string::value_type *)&v23, 1uLL);
      unint64_t v14 = (std::__shared_weak_count *)v3[3];
      if (v14)
      {
        __int128 v15 = std::__shared_weak_count::lock(v14);
        if (v15)
        {
          uint64_t v16 = (__int128 *)*v13;
          if (*v13)
          {
            ++v9;
            if (*((char *)v16 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v16, *((void *)v16 + 1));
            }

            else
            {
              __n128 v17 = *v16;
              v23.__r_.__value_.__l.__cap_ = *((void *)v16 + 2);
              *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v17;
            }

        ctu::rest::WatchableRestResourceHelper::removeWatcher(v18 + 9, a4);
LABEL_19:
        xpc_object_t v22 = *(void **)a3;
        __int128 v23 = *(void *)(a3 + 8);
        memset(&__p, 170, sizeof(__p));
        if (v22) {
          std::string::basic_string[abi:ne180100](&__p, v22, v23);
        }
        else {
          memset(&__p, 0, sizeof(__p));
        }
        uint64_t v24 = *(char *)(v9 + 23);
        if (v24 >= 0) {
          __int128 v25 = (_BYTE *)v9;
        }
        else {
          __int128 v25 = *(_BYTE **)v9;
        }
        if (v24 >= 0) {
          uint64_t v26 = *(unsigned __int8 *)(v9 + 23);
        }
        else {
          uint64_t v26 = *(void *)(v9 + 8);
        }
        ctu::path_join_impl(&__p, v25, v26);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int size = __p.__r_.__value_.__s.__size_;
        }
        else {
          int size = __p.__r_.__value_.__l.__size_;
        }
        ctu::PathView::PathView(v29, (uint64_t)p_p, size);
        ctu::AssertionRestResource::startNewGeneration( a1,  a2,  (const ctu::PathView *)v29,  *(ctu::AssertionRestResourceState **)(v9 + 24));
        goto LABEL_37;
      }

      ctu::rest::WatchableRestResourceHelper::removeWatcher(v18 + 9, a4);
      if (v16) {
        goto LABEL_19;
      }
LABEL_37:
      v9 += 32LL;
    }

    while (v9 != v10);
  }

void boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,std::weak_ptr<ctu::RestResourceConnection>*,std::weak_ptr<ctu::RestResourceConnection>>>( uint64_t *a1@<X0>, __n128 *a2@<X1>, const char *a3@<X2>, __n128 *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = boost::container::vector_alloc_holder<boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>( (uint64_t)a1,  a3);
  if (v11 >> 59) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  unint64_t v14 = (__n128 *)operator new(16 * v11);
  boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,std::weak_ptr<ctu::RestResourceConnection>*,std::weak_ptr<ctu::RestResourceConnection>>>( (uint64_t)a1,  v14,  v13,  a2,  (uint64_t)a3,  a4);
  *a5 = (char *)a2 + *a1 - v10;
}

unint64_t boost::container::vector_alloc_holder<boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>( uint64_t a1, const char *a2)
{
  unint64_t v2 = 0x7FFFFFFFFFFFFFFLL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1LL;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = &a2[v3];
  if (v8 < 0x7FFFFFFFFFFFFFFLL) {
    unint64_t v2 = v8;
  }
  else {
    return (unint64_t)v9;
  }
}

void boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,std::weak_ptr<ctu::RestResourceConnection>*,std::weak_ptr<ctu::RestResourceConnection>>>( uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4, uint64_t a5, __n128 *a6)
{
  uint64_t v10 = *(__n128 **)a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,std::weak_ptr<ctu::RestResourceConnection>*,std::weak_ptr<ctu::RestResourceConnection>*,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,std::weak_ptr<ctu::RestResourceConnection>*,std::weak_ptr<ctu::RestResourceConnection>>>( a1,  *(__n128 **)a1,  a4,  (__n128 *)(*(void *)a1 + 16LL * *(void *)(a1 + 8)),  a2,  a5,  a6);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    if (v11)
    {
      xpc_object_t v12 = (std::__shared_weak_count **)&v10->n128_u64[1];
      do
      {
        if (*v12) {
          std::__shared_weak_count::__release_weak(*v12);
        }
        v12 += 2;
        --v11;
      }

      while (v11);
    }

    operator delete(*(void **)a1);
  }

  uint64_t v13 = *(void *)(a1 + 8) + a5;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v13;
  *(void *)(a1 + 16) = a3;
}

void sub_1865C69C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,std::weak_ptr<ctu::RestResourceConnection>*,std::weak_ptr<ctu::RestResourceConnection>*,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,std::weak_ptr<ctu::RestResourceConnection>*,std::weak_ptr<ctu::RestResourceConnection>>>( uint64_t a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, uint64_t a6, __n128 *a7)
{
  while (a2 != a3)
  {
    *a5++ = *a2;
    a2->n128_u64[0] = 0LL;
    a2->n128_u64[1] = 0LL;
    ++a2;
  }

  __n128 result = *a7;
  *a5 = *a7;
  a7->n128_u64[0] = 0LL;
  a7->n128_u64[1] = 0LL;
  if (a3 != a4)
  {
    unint64_t v8 = &a5[a6];
    do
    {
      __n128 result = *a3;
      *v8++ = *a3;
      a3->n128_u64[0] = 0LL;
      a3->n128_u64[1] = 0LL;
      ++a3;
    }

    while (a3 != a4);
  }

  return result;
}

void *ctu::getDescUtil@<X0>(void *this@<X0>, const char *const *a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = 0LL;
  return this;
}

void ctu::logBitFieldWithDesc( unsigned int (***a1)(void, uint64_t), unsigned int a2, unsigned __int16 *a3, uint64_t a4)
{
  if ((**a1)(a1, 20LL))
  {
    uint64_t v17 = 0LL;
    memset(v16, 0, sizeof(v16));
    ctu::LogMessageBuffer::appendString(v16, "              ");
    ctu::to_bitfieldPrettyPrint<unsigned char>(a2, *a3, 45, &v15);
    ctu::LogMessageBuffer::appendString(v16, (uint64_t)&v15);
    ctu::LogMessageBuffer::appendString(v16, "    ");
    unsigned int v8 = *a3;
    if ((BYTE1(v8) - v8) > 7u)
    {
      int v11 = 0;
    }

    else
    {
      int v9 = 0;
      int v10 = (v8 >> 8) - v8 + 1;
      do
      {
        int v9 = (2 * v9) | 1;
        --v10;
      }

      while ((_BYTE)v10);
      int v11 = v9 & (a2 >> v8);
    }

    int v18 = v11;
    uint64_t v12 = *(void *)(a4 + 24);
    if (!v12) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(void **__return_ptr, uint64_t, int *))(*(void *)v12 + 48LL))(__p, v12, &v18);
    ctu::LogMessageBuffer::appendString(v16, (uint64_t)__p);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog((uint64_t)a1, 20, (ctu::LogMessageBuffer *)v16);
    ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v16);
  }

{
  std::string __p;
  std::string v9[2];
  uint64_t v10;
  if ((**a1)(a1, 20LL))
  {
    int v10 = 0LL;
    memset(v9, 0, sizeof(v9));
    ctu::LogMessageBuffer::appendString(v9, "              ");
    ctu::to_bitfieldPrettyPrint<unsigned char>(a2, *a3, 45, &__p);
    ctu::LogMessageBuffer::appendString(v9, (uint64_t)&__p);
    ctu::LogMessageBuffer::appendString(v9, "    ");
    ctu::LogMessageBuffer::appendString(v9, a4);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog((uint64_t)a1, 20, (ctu::LogMessageBuffer *)v9);
    ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v9);
  }

void sub_1865C6B98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)&a21);
  _Unwind_Resume(a1);
}

void sub_1865C6CB4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t ctu::getBitFieldPrintWithDesc@<X0>( unsigned int a1@<W0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v34 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[7] = v8;
  v33[8] = v8;
  v33[5] = v8;
  v33[6] = v8;
  v33[3] = v8;
  v33[4] = v8;
  v33[1] = v8;
  v33[2] = v8;
  __int128 v32 = v8;
  v33[0] = v8;
  *(_OWORD *)uint64_t v30 = v8;
  __int128 v31 = v8;
  v29[2] = v8;
  v29[3] = v8;
  v29[0] = v8;
  v29[1] = v8;
  __int128 v28 = v8;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v28);
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"              ", 14LL);
  ctu::to_bitfieldPrettyPrint<unsigned char>(a1, *a2, 45, &v27);
  if ((v27.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v10 = &v27;
  }
  else {
    int v10 = (std::string *)v27.__r_.__value_.__r.__words[0];
  }
  if ((v27.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = v27.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = v27.__r_.__value_.__l.__size_;
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, size);
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"    ", 4LL);
  unsigned int v14 = *a2;
  if ((BYTE1(v14) - v14) > 7u)
  {
    int v17 = 0;
  }

  else
  {
    int v15 = 0;
    int v16 = (v14 >> 8) - v14 + 1;
    do
    {
      int v15 = (2 * v15) | 1;
      --v16;
    }

    while ((_BYTE)v16);
    int v17 = v15 & (a1 >> v14);
  }

  LODWORD(v35.__locale_) = v17;
  uint64_t v18 = *(void *)(a3 + 24);
  if (!v18) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void **__return_ptr, uint64_t, std::locale *))(*(void *)v18 + 48LL))(__p, v18, &v35);
  if ((v26 & 0x80u) == 0) {
    __n128 v19 = __p;
  }
  else {
    __n128 v19 = (void **)__p[0];
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v20 = v26;
  }
  else {
    uint64_t v20 = (uint64_t)__p[1];
  }
  uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v19, v20);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24LL)));
  xpc_object_t v22 = std::locale::use_facet(&v35, MEMORY[0x189614558]);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10LL);
  std::locale::~locale(&v35);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v29 + 8, a4);
  *(void *)&__int128 v28 = *MEMORY[0x189614728];
  uint64_t v23 = *(void *)(MEMORY[0x189614728] + 72LL);
  *(void *)((char *)&v29[-1] + *(void *)(v28 - 24)) = *(void *)(MEMORY[0x189614728] + 64LL);
  *(void *)&v29[0] = v23;
  *((void *)&v29[0] + 1) = MEMORY[0x189614750] + 16LL;
  if (SHIBYTE(v31) < 0) {
    operator delete(v30[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x186E3C284](v33);
}

{
  __int128 v8;
  void *v9;
  std::string *p_p;
  uint64_t size;
  void *v12;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string __p;
  __int128 v20;
  _OWORD v21[4];
  void *v22[2];
  __int128 v23;
  __int128 v24;
  _OWORD v25[9];
  unint64_t v26;
  unsigned __int8 v26 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v25[7] = v8;
  v25[8] = v8;
  v25[5] = v8;
  v25[6] = v8;
  v25[3] = v8;
  v25[4] = v8;
  v25[1] = v8;
  v25[2] = v8;
  uint64_t v24 = v8;
  v25[0] = v8;
  *(_OWORD *)xpc_object_t v22 = v8;
  uint64_t v23 = v8;
  v21[2] = v8;
  v21[3] = v8;
  v21[0] = v8;
  v21[1] = v8;
  uint64_t v20 = v8;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v20);
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"              ", 14LL);
  ctu::to_bitfieldPrettyPrint<unsigned char>(a1, *a2, 45, &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)p_p, size);
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"    ", 4LL);
  unsigned int v14 = *(char *)(a3 + 23);
  if (v14 >= 0) {
    int v15 = a3;
  }
  else {
    int v15 = *(void *)a3;
  }
  if (v14 >= 0) {
    int v16 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    int v16 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v21 + 8, a4);
  *(void *)&uint64_t v20 = *MEMORY[0x189614728];
  int v17 = *(void *)(MEMORY[0x189614728] + 72LL);
  *(void *)((char *)&v21[-1] + *(void *)(v20 - 24)) = *(void *)(MEMORY[0x189614728] + 64LL);
  *(void *)&v21[0] = v17;
  *((void *)&v21[0] + 1) = MEMORY[0x189614750] + 16LL;
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x186E3C284](v25);
}

void sub_1865C6F50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]( uint64_t a1)
{
  uint64_t v2 = MEMORY[0x189614758];
  uint64_t v3 = MEMORY[0x189614758] + 104LL;
  *(void *)(a1 + 128) = MEMORY[0x189614758] + 104LL;
  *(void *)(a1 + 16) = v2 + 64;
  uint64_t v4 = a1 + 16;
  unint64_t v5 = (void *)MEMORY[0x189614728];
  uint64_t v6 = *(void *)(MEMORY[0x189614728] + 16LL);
  uint64_t v7 = *(void *)(MEMORY[0x189614728] + 24LL);
  *(void *)a1 = v6;
  *(void *)(a1 + *(void *)(v6 - 24)) = v7;
  *(void *)(a1 + 8) = 0LL;
  __int128 v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24LL));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0LL;
  v8[1].__fmtflags_ = -1;
  uint64_t v9 = v5[4];
  uint64_t v10 = v5[5];
  *(void *)(a1 + 16) = v9;
  *(void *)(v4 + *(void *)(v9 - 24)) = v10;
  uint64_t v11 = v5[1];
  *(void *)a1 = v11;
  *(void *)(a1 + *(void *)(v11 - 24)) = v5[6];
  *(void *)a1 = v2 + 24;
  *(void *)(a1 + 128) = v3;
  *(void *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x189614750] + 16LL;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1865C70B0(_Unwind_Exception *a1)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream( uint64_t a1)
{
  uint64_t v2 = MEMORY[0x189614728];
  uint64_t v3 = *MEMORY[0x189614728];
  *(void *)a1 = *MEMORY[0x189614728];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 24) = MEMORY[0x189614750] + 16LL;
  *(void *)(a1 + 16) = v4;
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x186E3C284](a1 + 128);
  return a1;
}

void sub_1865C72E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void ctu::getBytedumpPrettyPrint(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  if ((a1->__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = a1->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (size >= 0x11)
  {
    __int16 v5 = 0;
    std::string::size_type v6 = 0LL;
    do
    {
      ctu::hex0((ctu *)v5, &v31);
      uint64_t v7 = std::string::append(&v31, "    ", 4uLL);
      __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__l.__cap_ = v7->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0LL;
      v7->__r_.__value_.__l.__cap_ = 0LL;
      v7->__r_.__value_.__r.__words[0] = 0LL;
      std::string::basic_string(&v29, a1, v6, 0x10uLL, (std::allocator<char> *)&v36);
      ctu::getPrettyByteLine(&__p, (uint64_t *)&v29);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v10 = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v11 = std::string::append(&v32, (const std::string::value_type *)p_p, v10);
      __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0LL;
      v11->__r_.__value_.__l.__cap_ = 0LL;
      v11->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v13 = std::string::append(&v33, "\n", 1uLL);
      __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      int64_t cap = v13->__r_.__value_.__l.__cap_;
      __int128 v34 = v14;
      v13->__r_.__value_.__l.__size_ = 0LL;
      v13->__r_.__value_.__l.__cap_ = 0LL;
      v13->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        int v15 = (const std::string::value_type *)&v34;
      }
      else {
        int v15 = (const std::string::value_type *)v34;
      }
      if (cap >= 0) {
        std::string::size_type v16 = HIBYTE(cap);
      }
      else {
        std::string::size_type v16 = *((void *)&v34 + 1);
      }
      std::string::append(a2, v15, v16);
      if (SHIBYTE(cap) < 0) {
        operator delete((void *)v34);
      }
      v6 += 16LL;
      size -= 16LL;
      v5 += 8;
    }

    while (size > 0x10);
    if (size) {
      goto LABEL_32;
    }
LABEL_55:
    uint64_t v25 = a2->__r_.__value_.__s.__size_;
    int v26 = (char)v25;
    std::string v27 = (char *)a2 + v25;
    if (v26 >= 0)
    {
      __int128 v28 = a2;
    }

    else
    {
      std::string v27 = (char *)(a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_);
      __int128 v28 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }

    std::string::erase(a2, v27 - (char *)v28, 1uLL);
    return;
  }

  std::string::size_type v6 = 0LL;
  if (!size) {
    goto LABEL_55;
  }
LABEL_32:
  ctu::hex0((ctu *)(__int16)((int)v6 >> 1), &v32);
  int v17 = std::string::append(&v32, "    ", 4uLL);
  __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0LL;
  v17->__r_.__value_.__l.__cap_ = 0LL;
  v17->__r_.__value_.__r.__words[0] = 0LL;
  std::string::basic_string(&__p, a1, v6, size, (std::allocator<char> *)&v29);
  ctu::getPrettyByteLine(&v31, (uint64_t *)&__p);
  if ((v31.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __n128 v19 = &v31;
  }
  else {
    __n128 v19 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  if ((v31.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v20 = v31.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v20 = v31.__r_.__value_.__l.__size_;
  }
  uint64_t v21 = std::string::append(&v33, (const std::string::value_type *)v19, v20);
  __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  int64_t cap = v21->__r_.__value_.__l.__cap_;
  __int128 v34 = v22;
  v21->__r_.__value_.__l.__size_ = 0LL;
  v21->__r_.__value_.__l.__cap_ = 0LL;
  v21->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v23 = (const std::string::value_type *)&v34;
  }
  else {
    uint64_t v23 = (const std::string::value_type *)v34;
  }
  if (cap >= 0) {
    std::string::size_type v24 = HIBYTE(cap);
  }
  else {
    std::string::size_type v24 = *((void *)&v34 + 1);
  }
  std::string::append(a2, v23, v24);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v34);
  }
}

void sub_1865C7634( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
}

uint64_t ctu::getPrettyByteLine(std::string *a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0x38uLL);
  __int16 v5 = v4;
  v4[2] = 0LL;
  *((_BYTE *)v4 + 24) = 0;
  void *v4 = off_189E98230;
  v12[0] = v4;
  v12[1] = v4;
  LODWORD(v6) = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) == 0LL) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = (uint64_t *)*a2;
  }
  if ((v6 & 0x80u) != 0LL) {
    uint64_t v6 = a2[1];
  }
  *((_DWORD *)v4 + 2) = v6;
  v4[4] = v7;
  v4[5] = 0LL;
  v4[6] = (int)v6;
  do
  {
    (*(void (**)(void *))(*v5 + 24LL))(v5);
    __int16 v5 = (void *)v5[2];
  }

  while (v5);
  ctu::TextConverter::pushConversion(v12, 1, 0, 0x7FFFFFFF, 0);
  memset(&__p, 170, sizeof(__p));
  ctu::TextConverter::readChars((ctu::TextConverter *)v12, 0x7FFFFFFFLL, &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = (ctu *)&__p;
  }
  else {
    p_p = (ctu *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  ctu::hex_sp(p_p, size, a1);
  while (1)
  {
    uint64_t result = v12[0];
    if (!v12[0]) {
      break;
    }
    v12[0] = *(void *)(v12[0] + 16LL);
    (*(void (**)(uint64_t))(*(void *)result + 8LL))(result);
  }

  return result;
}

void sub_1865C7878( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  while (1)
  {
    uint64_t v17 = a16;
    if (!a16) {
      break;
    }
    a16 = *(void *)(a16 + 16);
    (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
  }

  _Unwind_Resume(exception_object);
}

void ctu::getBytePrettyPrint(__int16 a1@<W0>, ctu *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v7 = std::string::append(&v27, "    ", 4uLL);
  __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__l.__cap_ = v7->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0LL;
  v7->__r_.__value_.__l.__cap_ = 0LL;
  v7->__r_.__value_.__r.__words[0] = 0LL;
  ctu::hex0(a2, &v26);
  if ((v26.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v9 = &v26;
  }
  else {
    uint64_t v9 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  if ((v26.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v26.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  uint64_t v11 = std::string::append(&v28, (const std::string::value_type *)v9, size);
  __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v13 = std::string::append(&v29, "    ", 4uLL);
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  ctu::binary0(a2, &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v16 = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v16 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v17 = std::string::append(&v30, (const std::string::value_type *)p_p, v16);
  __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0LL;
  v17->__r_.__value_.__l.__cap_ = 0LL;
  v17->__r_.__value_.__r.__words[0] = 0LL;
  __n128 v19 = std::string::append(&v31, "    ", 4uLL);
  __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0LL;
  v19->__r_.__value_.__l.__cap_ = 0LL;
  v19->__r_.__value_.__r.__words[0] = 0LL;
  int v21 = *(char *)(a3 + 23);
  if (v21 >= 0) {
    __int128 v22 = (const std::string::value_type *)a3;
  }
  else {
    __int128 v22 = *(const std::string::value_type **)a3;
  }
  if (v21 >= 0) {
    std::string::size_type v23 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v23 = *(void *)(a3 + 8);
  }
  std::string::size_type v24 = std::string::append(&v32, v22, v23);
  *a4 = *v24;
  v24->__r_.__value_.__l.__size_ = 0LL;
  v24->__r_.__value_.__l.__cap_ = 0LL;
  v24->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_1865C7AE4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, void *a42, uint64_t a43, int a44, __int16 a45, char a46, char a47)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void ctu::getBytesPrettyPrint(__int16 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v7 = std::string::append(&v22, "    ", 4uLL);
  __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__l.__cap_ = v7->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0LL;
  v7->__r_.__value_.__l.__cap_ = 0LL;
  v7->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9 == *(void *)a2) {
    std::string::size_type v10 = 0LL;
  }
  else {
    std::string::size_type v10 = *(ctu **)a2;
  }
  ctu::hex_sp(v10, v9 - *(void *)a2, &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v13 = std::string::append(&v23, (const std::string::value_type *)p_p, size);
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  int v15 = std::string::append(&v24, "    ", 4uLL);
  __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__l.__cap_ = v15->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0LL;
  v15->__r_.__value_.__l.__cap_ = 0LL;
  v15->__r_.__value_.__r.__words[0] = 0LL;
  int v17 = *(char *)(a3 + 23);
  if (v17 >= 0) {
    __int128 v18 = (const std::string::value_type *)a3;
  }
  else {
    __int128 v18 = *(const std::string::value_type **)a3;
  }
  if (v17 >= 0) {
    std::string::size_type v19 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v19 = *(void *)(a3 + 8);
  }
  __int128 v20 = std::string::append(&v25, v18, v19);
  *a4 = *v20;
  v20->__r_.__value_.__l.__size_ = 0LL;
  v20->__r_.__value_.__l.__cap_ = 0LL;
  v20->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_1865C7D18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void ctu::getBytesPrettyPrint(__int16 a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v7 = std::string::append(&v20, "    ", 4uLL);
  __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__l.__cap_ = v7->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0LL;
  v7->__r_.__value_.__l.__cap_ = 0LL;
  v7->__r_.__value_.__r.__words[0] = 0LL;
  ctu::getPrettyByteLine(&__p, a2);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v11 = std::string::append(&v21, (const std::string::value_type *)p_p, size);
  __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v13 = std::string::append(&v22, "    ", 4uLL);
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  int v15 = *(char *)(a3 + 23);
  if (v15 >= 0) {
    __int128 v16 = (const std::string::value_type *)a3;
  }
  else {
    __int128 v16 = *(const std::string::value_type **)a3;
  }
  if (v15 >= 0) {
    std::string::size_type v17 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v17 = *(void *)(a3 + 8);
  }
  __int128 v18 = std::string::append(&v23, v16, v17);
  *a4 = *v18;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_1865C7EFC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::getBytedumpPrettyPrintBinary@<X0>( ctu *this@<X0>, const unsigned __int8 *a2@<X1>, std::string *a3@<X8>)
{
  int v3 = (int)a2;
  uint64_t v6 = operator new(0x38uLL);
  v6[2] = 0LL;
  *((_BYTE *)v6 + 24) = 0;
  void *v6 = off_189E98230;
  v9[0] = v6;
  v9[1] = v6;
  *((_DWORD *)v6 + 2) = v3;
  v6[4] = this;
  v6[5] = 0LL;
  v6[6] = v3;
  do
  {
    (*(void (**)(void *))(*v6 + 24LL))(v6);
    uint64_t v6 = (void *)v6[2];
  }

  while (v6);
  ctu::TextConverter::pushConversion(v9, 0, 0, 0x7FFFFFFF, 0);
  ctu::TextConverter::readChars((ctu::TextConverter *)v9, 0x7FFFFFFFLL, &__p);
  ctu::getBytedumpPrettyPrint(&__p, a3);
  while (1)
  {
    uint64_t result = v9[0];
    if (!v9[0]) {
      break;
    }
    v9[0] = *(void *)(v9[0] + 16LL);
    (*(void (**)(uint64_t))(*(void *)result + 8LL))(result);
  }

  return result;
}

void sub_1865C805C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  while (1)
  {
    uint64_t v17 = a16;
    if (!a16) {
      break;
    }
    a16 = *(void *)(a16 + 16);
    (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
  }

  _Unwind_Resume(exception_object);
}

void ctu::logStraddlingBitField( unsigned int (***a1)(void, uint64_t), int a2, signed int a3, uint64_t *a4, __int16 a5, uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  int v7 = a2 - a3;
  if (a2 - a3 >= -7)
  {
    signed int v9 = a3;
    while (1)
    {
      if (v7 >= 0) {
        int v10 = v7;
      }
      else {
        int v10 = v7 + 7;
      }
      unint64_t v11 = (v10 >> 3);
      uint64_t v12 = *a4;
      if (a4[1] - *a4 <= v11) {
        goto LABEL_21;
      }
      unsigned int v13 = v7 - (v10 & 0xFFFFFFF8);
      unsigned int v14 = 8 - v13;
      char v15 = 7 - v13;
      signed int v16 = v9 - (8 - v13);
      if (v9 <= (int)(8 - v13))
      {
        if (v9 != 8)
        {
          if (!v13)
          {
            unsigned int v21 = (**a1)(a1, 20LL);
            uint64_t v12 = *a4;
            if (v21)
            {
              uint64_t v31 = 0LL;
              __int128 v30 = 0u;
              memset(v29, 0, sizeof(v29));
              std::string v22 = (ctu *)*(unsigned __int8 *)(v12 + v11);
              std::string::basic_string[abi:ne180100]<0>(v26, "");
              ctu::getBytePrettyPrint(v11 + a5, v22, (uint64_t)v26, &__p);
              ctu::LogMessageBuffer::appendString((std::string *)v29, (uint64_t)&__p);
              if (v27 < 0) {
                operator delete(v26[0]);
              }
              ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog((uint64_t)a1, 20, (ctu::LogMessageBuffer *)v29);
              ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v29);
              uint64_t v12 = *a4;
            }
          }

          unsigned int v23 = *(unsigned __int8 *)(v12 + v11);
          v29[0] = v15 - v9 + 1;
          v29[1] = v15;
          ctu::logBitFieldWithDesc(a1, v23, (unsigned __int16 *)v29, a6);
          return;
        }

        if (!(**a1)(a1, 20LL)) {
          return;
        }
        uint64_t v31 = 0LL;
        __int128 v30 = 0u;
        memset(v29, 0, sizeof(v29));
        ctu::getBytePrettyPrint(v11 + a5, (ctu *)*(unsigned __int8 *)(*a4 + v11), a6, &__p);
        ctu::LogMessageBuffer::appendString((std::string *)v29, (uint64_t)&__p);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog((uint64_t)a1, 20, (ctu::LogMessageBuffer *)v29);
        goto LABEL_23;
      }

      if (!v13)
      {
        if ((**a1)(a1, 20LL))
        {
          uint64_t v31 = 0LL;
          __int128 v30 = 0u;
          memset(v29, 0, sizeof(v29));
          std::string v20 = (ctu *)*(unsigned __int8 *)(*a4 + v11);
          std::string::basic_string[abi:ne180100]<0>(v26, "");
          ctu::getBytePrettyPrint(v11 + a5, v20, (uint64_t)v26, &__p);
          ctu::LogMessageBuffer::appendString((std::string *)v29, (uint64_t)&__p);
          if (v27 < 0) {
            operator delete(v26[0]);
          }
          ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog((uint64_t)a1, 20, (ctu::LogMessageBuffer *)v29);
          ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v29);
        }

        goto LABEL_20;
      }

      unsigned int v17 = *(unsigned __int8 *)(v12 + v11);
      v29[0] = v15 - v14 + 1;
      v29[1] = 7 - v13;
      v32[0] = off_189E93B38;
      uint64_t v33 = v32;
      ctu::logBitFieldWithDesc(a1, v17, (unsigned __int16 *)v29, (uint64_t)v32);
      __int128 v18 = v33;
      if (v33 == v32) {
        break;
      }
      if (v33)
      {
        uint64_t v19 = 5LL;
LABEL_19:
        (*(void (**)(void *))(*v18 + 8 * v19))(v18);
      }

LABEL_20:
      v7 += v14;
      signed int v9 = v16;
      if (v7 < -7) {
        goto LABEL_21;
      }
    }

    __int128 v18 = v32;
    uint64_t v19 = 4LL;
    goto LABEL_19;
  }

    std::string::basic_string[abi:ne180100](&v31, a1, a2);
    goto LABEL_21;
  }

  uint64_t v6 = 0LL;
  while (a1[v6] == 47)
  {
    if (a2 == ++v6) {
      goto LABEL_20;
    }
  }

  if (v6 == -1LL) {
    goto LABEL_20;
  }
  memset(&__dst, 170, sizeof(__dst));
  if (v6 >= a2) {
    int v7 = a2;
  }
  else {
    int v7 = v6;
  }
  std::string::basic_string[abi:ne180100](&__dst, a1, v7);
  __int128 v8 = &a1[v7];
  signed int v9 = a2 - v7;
  if (!v9) {
    goto LABEL_34;
  }
  int v10 = 0LL;
  unint64_t v11 = a2 >= v6 ? v6 : a2;
  uint64_t v12 = a2 - v11;
  unsigned int v13 = &a1[v11];
  while (v13[v10] != 47)
  {
    if (v12 == ++v10) {
      goto LABEL_34;
    }
  }

  if (v10 == -1)
  {
LABEL_34:
    if ((char)__dst.__r_.__value_.__s.__size_ < 0)
    {
      if (__dst.__r_.__value_.__l.__size_)
      {
        std::string::__init_copy_ctor_external(&v31, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
LABEL_39:
        std::string v32 = v8;
        uint64_t v33 = v9;
        *(std::string *)a3 = v31;
        memset(&v31, 0, sizeof(v31));
        unsigned int v21 = (void *)(a3 + 24);
        if (a1)
        {
          std::string::basic_string[abi:ne180100](v21, v8, v9);
          std::string v22 = (void *)v31.__r_.__value_.__r.__words[0];
          goto LABEL_67;
        }

  __p[0] = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    __p[0] = xpc_null_create();
  }
  (*(void (**)(uint64_t, void **))(*(void *)a2 + 32LL))(a2, __p);
  xpc_release(__p[0]);
  xpc_release(object);
  return 1LL;
}

  __p[0] = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    __p[0] = xpc_null_create();
  }
  (*(void (**)(uint64_t, void **))(*(void *)a2 + 32LL))(a2, __p);
  xpc_release(__p[0]);
  xpc_release(object);
  return 1LL;
}

  __p[0] = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    __p[0] = xpc_null_create();
  }
  (*(void (**)(uint64_t, void **))(*(void *)a2 + 32LL))(a2, __p);
  xpc_release(__p[0]);
  xpc_release(object);
  return 1LL;
}

void sub_1865C8428( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34)
{
}

uint64_t ctu::getStraddlingBitFieldPrint@<X0>( int a1@<W0>, signed int a2@<W1>, uint64_t *a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v62 = *MEMORY[0x1895F89C0];
  unint64_t v58 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v57[7] = v9;
  v57[8] = v9;
  v57[5] = v9;
  v57[6] = v9;
  v57[3] = v9;
  v57[4] = v9;
  v57[1] = v9;
  v57[2] = v9;
  __int128 v56 = v9;
  v57[0] = v9;
  *(_OWORD *)xpc_object_t v54 = v9;
  __int128 v55 = v9;
  xpc_object_t v53[2] = v9;
  v53[3] = v9;
  v53[0] = v9;
  v53[1] = v9;
  __int128 v52 = v9;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v52);
  int v10 = a1 - a2;
  if (a1 - a2 >= -7)
  {
    while (1)
    {
      if (v10 >= 0) {
        int v11 = v10;
      }
      else {
        int v11 = v10 + 7;
      }
      unint64_t v12 = (v11 >> 3);
      uint64_t v13 = *a3;
      if (a3[1] - *a3 <= v12) {
        goto LABEL_32;
      }
      unsigned int v14 = v10 - (v11 & 0xFFFFFFF8);
      unsigned int v15 = 8 - v14;
      char v16 = 7 - v14;
      signed int v17 = a2 - (8 - v14);
      if (a2 <= (int)(8 - v14))
      {
        if (a2 == 8)
        {
          ctu::getBytePrettyPrint(v12 + a4, (ctu *)*(unsigned __int8 *)(v13 + v12), a5, &__p);
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t size = __p.__r_.__value_.__s.__size_;
          }
          else {
            uint64_t size = __p.__r_.__value_.__l.__size_;
          }
          char v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)p_p, size);
          std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(*v36 - 24LL)));
          size_t v37 = std::locale::use_facet(&v49, MEMORY[0x189614558]);
          ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10LL);
          std::locale::~locale(&v49);
          std::ostream::put();
          std::ostream::flush();
        }

        else
        {
          if (!v14)
          {
            v38 = (ctu *)*(unsigned __int8 *)(v13 + v12);
            std::string::basic_string[abi:ne180100]<0>(&v49, "");
            ctu::getBytePrettyPrint(v12 + a4, v38, (uint64_t)&v49, &__p);
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              v39 = &__p;
            }
            else {
              v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v40 = __p.__r_.__value_.__s.__size_;
            }
            else {
              uint64_t v40 = __p.__r_.__value_.__l.__size_;
            }
            uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v39, v40);
            std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24LL)));
            v42 = std::locale::use_facet(&v59, MEMORY[0x189614558]);
            ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10LL);
            std::locale::~locale(&v59);
            std::ostream::put();
            std::ostream::flush();
            if (v50 < 0) {
              operator delete(v49.__locale_);
            }
            uint64_t v13 = *a3;
          }

          unsigned int v43 = *(unsigned __int8 *)(v13 + v12);
          LOBYTE(v49.__locale_) = v16 - a2 + 1;
          BYTE1(v49.__locale_) = v16;
          ctu::getBitFieldPrintWithDesc(v43, (unsigned __int16 *)&v49, a5, &__p);
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v44 = &__p;
          }
          else {
            v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v45 = __p.__r_.__value_.__s.__size_;
          }
          else {
            uint64_t v45 = __p.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v44, v45);
        }

        goto LABEL_33;
      }

      if (!v14)
      {
        std::string v25 = (ctu *)*(unsigned __int8 *)(v13 + v12);
        std::string::basic_string[abi:ne180100]<0>(&v49, "");
        ctu::getBytePrettyPrint(v12 + a4, v25, (uint64_t)&v49, &__p);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string v26 = &__p;
        }
        else {
          std::string v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v27 = __p.__r_.__value_.__s.__size_;
        }
        else {
          uint64_t v27 = __p.__r_.__value_.__l.__size_;
        }
        std::string v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v26, v27);
        std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24LL)));
        std::string v29 = std::locale::use_facet(&v59, MEMORY[0x189614558]);
        ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10LL);
        std::locale::~locale(&v59);
        std::ostream::put();
        std::ostream::flush();
        if (v50 < 0) {
          operator delete(v49.__locale_);
        }
        goto LABEL_31;
      }

      unsigned int v18 = *(unsigned __int8 *)(v13 + v12);
      LOBYTE(v59.__locale_) = v16 - v15 + 1;
      BYTE1(v59.__locale_) = 7 - v14;
      v60[0] = off_189E93BB8;
      v61 = v60;
      ctu::getBitFieldPrintWithDesc(v18, (unsigned __int16 *)&v59, (uint64_t)v60, &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v19 = &__p;
      }
      else {
        uint64_t v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v20 = __p.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t v20 = __p.__r_.__value_.__l.__size_;
      }
      unsigned int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v19, v20);
      std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24LL)));
      std::string v22 = std::locale::use_facet(&v49, MEMORY[0x189614558]);
      ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10LL);
      std::locale::~locale(&v49);
      std::ostream::put();
      std::ostream::flush();
      unsigned int v23 = v61;
      if (v61 == v60) {
        break;
      }
      if (v61)
      {
        uint64_t v24 = 5LL;
LABEL_30:
        (*(void (**)(void))(*v23 + 8 * v24))();
      }

LABEL_31:
      v10 += v15;
      a2 = v17;
      if (v10 < -7) {
        goto LABEL_32;
      }
    }

    unsigned int v23 = v60;
    uint64_t v24 = 4LL;
    goto LABEL_30;
  }

LABEL_32:
  __int128 v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v53,  (uint64_t)"Invalid current byte position",  29LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(void *)(*v30 - 24LL)));
  uint64_t v31 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x189614558]);
  ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10LL);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
LABEL_33:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v53 + 8, a6);
  *(void *)&__int128 v52 = *MEMORY[0x189614728];
  uint64_t v32 = *(void *)(MEMORY[0x189614728] + 72LL);
  *(void *)((char *)&v53[-1] + *(void *)(v52 - 24)) = *(void *)(MEMORY[0x189614728] + 64LL);
  *(void *)&v53[0] = v32;
  *((void *)&v53[0] + 1) = MEMORY[0x189614750] + 16LL;
  if (SHIBYTE(v55) < 0) {
    operator delete(v54[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x186E3C284](v57);
}

  std::string v26 = this->__end_;
  uint64_t v27 = this->__marked_count_;
  if ((char)v7 <= 91)
  {
    uint64_t result = a2;
    switch((char)v7)
    {
      case '$':
      case ')':
        return result;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_60;
      case '(':
        if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
        {
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          std::string v29 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
          if (v29 == a3) {
            goto LABEL_98;
          }
          __int128 v30 = v29;
          if (*v29 != 41) {
            goto LABEL_98;
          }
        }

        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
          v38 = this->__marked_count_;
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v39 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 1, a3);
          if (v39 == a3 || (__int128 v30 = v39, *v39 != 41)) {
LABEL_98:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v38);
        }

        --*p_open_count;
        uint64_t v32 = (unsigned __int8 *)(v30 + 1);
        goto LABEL_57;
      case '*':
      case '+':
        goto LABEL_64;
      case '.':
        char v36 = (std::__node<char> *)operator new(0x10uLL);
        size_t v37 = v26->__first_;
        v36->__vftable = (std::__node<char>_vtbl *)&off_189E95590;
        v36[1].__vftable = (std::__node<char>_vtbl *)v37;
        v26->__first_ = v36;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        goto LABEL_61;
      default:
        if ((char)v7 == 91)
        {
          uint64_t v32 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>( (uint64_t)this,  (char *)a2,  a3);
          goto LABEL_57;
        }

        goto LABEL_64;
    }
  }

  uint64_t v31 = ((char)v7 - 92);
  if (v31 > 0x21)
  {
LABEL_60:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v7);
LABEL_61:
    uint64_t v32 = a2 + 1;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>( (uint64_t)this,  v32,  (unsigned __int8 *)a3,  v26,  v27 + 1,  this->__marked_count_ + 1);
  }

  if ((char)v7 != 92)
  {
    if (v31 == 31) {
LABEL_64:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
    goto LABEL_60;
  }

  if (v7 != 92) {
    return a2;
  }
  uint64_t v33 = a2 + 1;
  uint64_t v34 = *v33;
  std::locale v35 = v34 - 48;
  if (v34 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v35);
LABEL_97:
    uint64_t v32 = a2 + 2;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>( (uint64_t)this,  v32,  (unsigned __int8 *)a3,  v26,  v27 + 1,  this->__marked_count_ + 1);
  }

  if ((v34 - 49) > 8)
  {
LABEL_77:
    if ((char)v34 > 99)
    {
      if ((char)v34 == 119)
      {
        uint64_t v41 = this;
        v42 = 0;
        goto LABEL_89;
      }

      if ((char)v34 == 115)
      {
        std::locale v49 = this;
        char v50 = 0;
LABEL_95:
        started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v49, v50);
        unint64_t v46 = started->__mask_ | 0x4000;
        goto LABEL_96;
      }

      if ((char)v34 != 100)
      {
LABEL_90:
        xpc_object_t v48 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>( this,  a2 + 1,  (unsigned __int8 *)a3,  0LL);
        if (v48 == v33) {
          uint64_t v32 = a2;
        }
        else {
          uint64_t v32 = v48;
        }
        goto LABEL_57;
      }

      unsigned int v43 = this;
      v44 = 0;
    }

    else
    {
      if ((char)v34 != 68)
      {
        if ((char)v34 != 83)
        {
          if ((char)v34 == 87)
          {
            uint64_t v41 = this;
            v42 = 1;
LABEL_89:
            uint64_t v47 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v41, v42);
            v47->__mask_ |= 0x500u;
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v47, 95LL);
            goto LABEL_97;
          }

          goto LABEL_90;
        }

        std::locale v49 = this;
        char v50 = 1;
        goto LABEL_95;
      }

      unsigned int v43 = this;
      v44 = 1;
    }

    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v43, v44);
    unint64_t v46 = started->__mask_ | 0x400;
LABEL_96:
    started->__mask_ = v46;
    goto LABEL_97;
  }

  uint64_t v32 = a2 + 2;
  if (a2 + 2 == (unsigned __int8 *)a3)
  {
    uint64_t v32 = (unsigned __int8 *)a3;
  }

  else
  {
    while (1)
    {
      uint64_t v40 = *v32;
      if (v35 >= 0x19999999) {
        goto LABEL_99;
      }
      ++v32;
      std::locale v35 = v40 + 10 * v35 - 48;
      if (v32 == (unsigned __int8 *)a3)
      {
        uint64_t v32 = (unsigned __int8 *)a3;
        break;
      }
    }

    if (!v35) {
LABEL_99:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }

  if (v35 > v27) {
    goto LABEL_99;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v35);
  if (v32 == v33)
  {
    LOBYTE(v34) = *v33;
    goto LABEL_77;
  }

      std::string::push_back(a3, (std::string::value_type)v12);
LABEL_33:
      ++v9;
      --v10;
    }

    while (v10);
  }

  if ((a2 & 1) != 0) {
    std::string::push_back(a3, 34);
  }
}

void sub_1865C8A70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::locale a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000LL;
    *a1 = v6;
  }

  else
  {
    *((_BYTE *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }

  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_189E93128, MEMORY[0x189614200]);
}

void sub_1865C8C84(_Unwind_Exception *a1)
{
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x189614780] + 16LL);
  return result;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( void *a1, uint64_t a2, uint64_t a3)
{
  v13[0] = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x186E3C0C8](v13, a1);
  if (LOBYTE(v13[0]))
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
      int v10 = std::locale::use_facet(&v14, MEMORY[0x189614558]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32LL);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }

    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear( (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)),  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + 32) | 5);
    }
  }

  MEMORY[0x186E3C0D4](v13);
  return a1;
}

void sub_1865C8DCC( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
}

void sub_1865C8E14(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0LL;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (v12 >= 1)
    {
      memset(__p, 170, sizeof(__p));
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      uint64_t v13 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96LL))(v6, v13, v12);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0LL;
      }
    }

    uint64_t v15 = a4 - a3;
    else {
      return 0LL;
    }
  }

  return v6;
}

void sub_1865C8F54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8LL) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000LL;
    *__b = v6;
  }

  else
  {
    *((_BYTE *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }

  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000LL;
    *a2 = v9;
    a2 = v9;
  }

  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }

  uint64_t result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 88) = v3;
    }
    return *(void *)(a1 + 40);
  }

  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::logStraddlingBitField(ctu::StaticLogger const&,int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0,std::allocator<ctu::logStraddlingBitField(ctu::StaticLogger const&,int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E93B38;
  return result;
}

void std::__function::__func<ctu::logStraddlingBitField(ctu::StaticLogger const&,int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0,std::allocator<ctu::logStraddlingBitField(ctu::StaticLogger const&,int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E93B38;
}

void *std::__function::__func<ctu::logStraddlingBitField(ctu::StaticLogger const&,int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0,std::allocator<ctu::logStraddlingBitField(ctu::StaticLogger const&,int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0>,std::string ()(int)>::operator()@<X0>( void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t std::__function::__func<ctu::logStraddlingBitField(ctu::StaticLogger const&,int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0,std::allocator<ctu::logStraddlingBitField(ctu::StaticLogger const&,int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::logStraddlingBitField(ctu::StaticLogger const&,int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0,std::allocator<ctu::logStraddlingBitField(ctu::StaticLogger const&,int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0>,std::string ()(int)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1LL;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0LL;
}

void *std::__function::__func<ctu::getStraddlingBitFieldPrint(int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0,std::allocator<ctu::getStraddlingBitFieldPrint(int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E93BB8;
  return result;
}

void std::__function::__func<ctu::getStraddlingBitFieldPrint(int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0,std::allocator<ctu::getStraddlingBitFieldPrint(int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E93BB8;
}

void *std::__function::__func<ctu::getStraddlingBitFieldPrint(int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0,std::allocator<ctu::getStraddlingBitFieldPrint(int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0>,std::string ()(int)>::operator()@<X0>( void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t std::__function::__func<ctu::getStraddlingBitFieldPrint(int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0,std::allocator<ctu::getStraddlingBitFieldPrint(int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::getStraddlingBitFieldPrint(int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0,std::allocator<ctu::getStraddlingBitFieldPrint(int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0>,std::string ()(int)>::target_type()
{
}

BOOL ctu::Compression::Compress(uint64_t a1, unint64_t *a2)
{
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v13.state = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v13.avail_in = v4;
  v13.reserved = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v13.data_type = v4;
  *(_OWORD *)&v13.total_out = v4;
  *(_OWORD *)&v13.next_out = v4;
  *(_OWORD *)&v13.zfree = 0uLL;
  v13.next_in = *(Bytef **)a1;
  v13.avail_in = *(_DWORD *)(a1 + 8) - LODWORD(v13.next_in);
  int v5 = deflateInit2_(&v13, -1, 8, 31, 8, 0, "1.2.12", 112);
  BOOL result = 0LL;
  if (!v5)
  {
    uint64_t v7 = *(Bytef **)a1;
    if (*(void *)(a1 + 8) == *(void *)a1) {
      return 0LL;
    }
    a2[1] = *a2;
    uint64_t v8 = 2LL * (*(void *)(a1 + 8) - (void)v7);
    if (v8 != -12) {
      std::vector<unsigned char>::__append(a2, v8 + 12);
    }
    do
    {
      unint64_t v9 = *a2;
      v13.next_out = (Bytef *)(*a2 + v13.total_out);
      v13.avail_out = *((_DWORD *)a2 + 2) - (LODWORD(v13.total_out) + v9);
      int v10 = deflate(&v13, 4);
    }

    while (!v10);
    int v11 = v10;
    uLong v12 = a2[1] - *a2;
    if (v13.total_out <= v12)
    {
      if (v13.total_out < v12) {
        a2[1] = *a2 + v13.total_out;
      }
    }

    else
    {
      std::vector<unsigned char>::__append(a2, v13.total_out - v12);
    }

    return v11 == 1 && deflateEnd(&v13) == 0;
  }

  return result;
}

BOOL ctu::Compression::Decompress(uint64_t a1, unint64_t *a2)
{
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v18.state = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v18.avail_in = v4;
  v18.reserved = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v18.data_type = v4;
  *(_OWORD *)&v18.uLong total_out = v4;
  *(_OWORD *)&v18.next_out = v4;
  *(_OWORD *)&v18.zfree = 0uLL;
  v18.next_in = *(Bytef **)a1;
  v18.avail_in = *(_DWORD *)(a1 + 8) - LODWORD(v18.next_in);
  if (inflateInit2_(&v18, 47, "1.2.12", 112)) {
    return 0LL;
  }
  unint64_t v6 = *(void *)(a1 + 8) - *(void *)a1;
  if (!v6) {
    return 0LL;
  }
  size_t v7 = v6 >> 1;
  a2[1] = *a2;
  if ((v6 >> 1) + v6) {
    std::vector<unsigned char>::__append(a2, (v6 >> 1) + v6);
  }
  uLong total_out = v18.total_out;
  uLong v9 = -v18.total_out;
  while (1)
  {
    uLong v10 = v18.total_out;
    if (!v18.avail_in) {
      break;
    }
    unint64_t v12 = *a2;
    unint64_t v11 = a2[1];
    uLong v13 = v11 - *a2;
    if (v18.total_out - total_out >= v13)
    {
      uLong v14 = v13 + v7;
      if (v13 >= v13 + v7)
      {
        if (v13 > v13 + v7)
        {
          LODWORD(v11) = v12 + v14;
          a2[1] = v12 + v14;
        }
      }

      else
      {
        std::vector<unsigned char>::__append(a2, v7);
        uLong v10 = v18.total_out;
        unint64_t v12 = *a2;
        unint64_t v11 = a2[1];
      }
    }

    v18.next_out = (Bytef *)(v12 + v10 + v9);
    v18.avail_out = total_out - (v12 + v10) + v11;
    int v15 = inflate(&v18, 0);
    if (v15)
    {
      if (v15 != 1) {
        return 0LL;
      }
      uLong v10 = v18.total_out;
      break;
    }
  }

  uLong v16 = v10 - total_out;
  unint64_t v17 = a2[1] - *a2;
  if (v16 <= v17)
  {
    if (v16 < v17) {
      a2[1] = *a2 + v16;
    }
  }

  else
  {
    std::vector<unsigned char>::__append(a2, v16 - v17);
  }

  return inflateEnd(&v18) == 0;
}

BOOL ctu::Compression::Decompress(uint64_t a1)
{
  v7.reserved = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v7.data_type = v2;
  *(_OWORD *)&v7.state = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v7.uLong total_out = v2;
  *(_OWORD *)&v7.next_out = v2;
  *(_OWORD *)&v7.avail_in = v2;
  uint64_t v3 = operator new(0x4000uLL);
  bzero(v3, 0x4000uLL);
  *(_OWORD *)&v7.zfree = 0uLL;
  v7.next_in = *(Bytef **)a1;
  v7.avail_in = *(_DWORD *)(a1 + 8) - LODWORD(v7.next_in);
  if (!inflateInit2_(&v7, 47, "1.2.12", 112) && *(void *)(a1 + 8) != *(void *)a1)
  {
    while (1)
    {
      v7.next_out = (Bytef *)v3;
      v7.avail_out = 0x4000;
      if (inflate(&v7, 0) == -2) {
        break;
      }
      unint64_t v6 = (void *)std::ostream::write();
      if ((*((_BYTE *)v6 + *(void *)(*v6 - 24LL) + 32) & 5) != 0) {
        break;
      }
      if (v7.avail_out)
      {
        BOOL v4 = inflateEnd(&v7) == 0;
        goto LABEL_3;
      }
    }
  }

  BOOL v4 = 0LL;
LABEL_3:
  operator delete(v3);
  return v4;
}

void sub_1865C9680(_Unwind_Exception *a1)
{
}

const __CFData *ctu::Compression::Decompress@<X0>(void *a1@<X0>, CFDataRef *a2@<X1>, CFDataRef *a3@<X8>)
{
  BOOL result = *a2;
  unint64_t v6 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  if (!*a2) {
    unint64_t v6 = 0LL;
  }
  if (!v6) {
    goto LABEL_5;
  }
  memset(&strm.data_type, 0, 24);
  memset(&strm.avail_in, 0, 56);
  strm.zalloc = (alloc_func)ctu::Compression::Decompress(__CFAllocator const*,ctu::cf::CFSharedRef<__CFData const> const&)::$_0::__invoke;
  strm.zfree = (free_func)ctu::Compression::Decompress(__CFAllocator const*,ctu::cf::CFSharedRef<__CFData const> const&)::$_1::__invoke;
  strm.opaque = a1;
  BytePtr = (Bytef *)CFDataGetBytePtr(result);
  unint64_t Length = CFDataGetLength(*a2);
  strm.next_in = BytePtr;
  strm.avail_in = Length;
  BOOL result = (const __CFData *)inflateInit2_(&strm, 47, "1.2.12", 112);
  if ((_DWORD)result) {
    goto LABEL_5;
  }
  if (Length)
  {
    CFTypeRef v21 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    CFTypeRef cf = a1;
    if (a1)
    {
      CFRetain(a1);
      CFTypeRef v10 = cf;
      CFTypeRef v21 = cf;
      CFRetain(cf);
    }

    else
    {
      CFTypeRef v10 = 0LL;
      CFTypeRef v21 = 0LL;
    }

    ctu::SharedRef<__CFAllocator const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFAllocator const>::~SharedRef(&cf);
    CFTypeRef cf = 0LL;
    z_stream v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = v10;
    if (v10) {
      CFRetain(v10);
    }
    unint64_t v11 = Length >> 1;
    if ((Length >> 1) + Length) {
      std::vector<unsigned char,ctu::cf::allocator_adapter<unsigned char>>::__append( (char **)&cf,  (Length >> 1) + Length);
    }
    do
    {
      if (!strm.avail_in) {
        goto LABEL_24;
      }
      unint64_t v12 = v18 - (_BYTE *)cf;
      if (strm.total_out >= v18 - (_BYTE *)cf)
      {
        if (v12 >= v12 + v11)
        {
          if (v12 > v12 + v11) {
            v18 += v11;
          }
        }

        else
        {
          std::vector<unsigned char,ctu::cf::allocator_adapter<unsigned char>>::__append((char **)&cf, Length >> 1);
        }
      }

      if (!strm.avail_out)
      {
        strm.next_out = (Bytef *)cf + strm.total_out;
        strm.avail_out = (_DWORD)v18 - (LODWORD(strm.total_out) + (_DWORD)cf);
      }

      int v13 = inflate(&strm, 0);
    }

    while (!v13);
    if (v13 != 1)
    {
LABEL_25:
      CFDataRef v14 = 0LL;
      goto LABEL_31;
    }

LABEL_24:
    if (inflateEnd(&strm)) {
      goto LABEL_25;
    }
    int v15 = (const UInt8 *)cf;
    uLong v16 = v18;
    if (strm.total_out <= v18 - (_BYTE *)cf)
    {
      if (strm.total_out < v18 - (_BYTE *)cf)
      {
        uLong v16 = (char *)cf + strm.total_out;
        z_stream v18 = (char *)cf + strm.total_out;
      }
    }

    else
    {
      std::vector<unsigned char,ctu::cf::allocator_adapter<unsigned char>>::__append( (char **)&cf,  strm.total_out - (v18 - (_BYTE *)cf));
      int v15 = (const UInt8 *)cf;
      uLong v16 = v18;
    }

    CFDataRef v14 = CFDataCreate((CFAllocatorRef)a1, v15, v16 - (char *)v15);
LABEL_31:
    *a3 = v14;
    std::vector<unsigned char,ctu::cf::allocator_adapter<unsigned char>>::__destroy_vector::operator()[abi:ne180100]((uint64_t)&cf);
    ctu::SharedRef<__CFAllocator const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFAllocator const>::~SharedRef(&v20);
    return (const __CFData *)ctu::SharedRef<__CFAllocator const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFAllocator const>::~SharedRef(&v21);
  }

  else
  {
LABEL_5:
    *a3 = 0LL;
  }

  return result;
}

  std::string v28 = *(char **)a1;
  if (v22 != *(char **)a1)
  {
    std::string v29 = 0LL;
    __int128 v30 = 0LL;
    uint64_t v32 = *a4;
    uint64_t v31 = a4[1];
    do
    {
      uint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v32) >> 3);
      uint64_t v34 = (void *)(v32 + v29);
      if (v33 <= v30) {
        std::locale v35 = a4 + 3;
      }
      else {
        std::locale v35 = v34;
      }
      *(void *)&v28[v29] = a2 + *v35 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v30) {
        char v36 = a4 + 3;
      }
      else {
        char v36 = (uint64_t *)(*a4 + v29);
      }
      *(void *)(*(void *)a1 + v29 + 8) = a2 + v36[1] - v10;
      uint64_t v32 = *a4;
      uint64_t v31 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v31 - *a4) >> 3) <= v30) {
        size_t v37 = a4 + 3;
      }
      else {
        size_t v37 = (uint64_t *)(*a4 + v29);
      }
      v38 = *((_BYTE *)v37 + 16);
      std::string v28 = *(char **)a1;
      v39 = *(void *)(a1 + 8);
      *(_BYTE *)(*(void *)a1 + v29 + 16) = v38;
      ++v30;
      v29 += 24LL;
    }

    while (v30 < 0xAAAAAAAAAAAAAAABLL * ((v39 - (uint64_t)v28) >> 3));
  }

  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 40) = 0;
  uint64_t v40 = a2 + a4[6] - v10;
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v18 - 48) = v40;
  *(void *)(a1 + 56) = a2 + a4[7] - v10;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a4 + 64);
  *(void *)(a1 + 72) = a2 + a4[9] - v10;
  *(void *)(a1 + 80) = a2 + a4[10] - v10;
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a4 + 88);
  if ((v5 & 1) == 0) {
    *(void *)(a1 + 104) = v40;
  }
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a4 + 96);
}

  os_unfair_lock_unlock(v2);
}

void sub_1865C98D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::vector<unsigned char,ctu::cf::allocator_adapter<unsigned char>>::__destroy_vector::operator()[abi:ne180100]((uint64_t)va);
  ctu::SharedRef<__CFAllocator const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFAllocator const>::~SharedRef(v2);
  ctu::SharedRef<__CFAllocator const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFAllocator const>::~SharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get( uint64_t a1)
{
  return *(void *)a1;
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  int v5 = (char *)a1[1];
  uint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }

    a1[1] = (unint64_t)v5;
  }

  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0LL;
    }
    unint64_t v12 = &v7[v11];
    int v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }

    else
    {
      CFDataRef v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }

      while (v5 != (char *)v6);
      int v5 = (char *)*a1;
    }

    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5) {
      operator delete(v5);
    }
  }

void std::vector<unsigned char>::__throw_length_error[abi:ne180100]()
{
}

char *std::vector<char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000LL) != 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void ctu::Compression::Decompress(__CFAllocator const*,ctu::cf::CFSharedRef<__CFData const> const&)::$_0::__invoke()
{
}

const void **ctu::SharedRef<__CFAllocator const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFAllocator const>::~SharedRef( const void **a1)
{
  __int128 v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void std::vector<unsigned char,ctu::cf::allocator_adapter<unsigned char>>::__append(char **a1, size_t a2)
{
  unint64_t v6 = a1 + 1;
  uint64_t v4 = a1[1];
  int v5 = v6[1];
  if (v5 - v4 >= a2)
  {
    if (a2)
    {
      unint64_t v12 = &v4[a2];
      bzero(v4, a2);
      uint64_t v4 = v12;
    }

    a1[1] = v4;
  }

  else
  {
    uint64_t v7 = (char *)(v4 - *a1);
    unint64_t v8 = (unint64_t)&v7[a2];
    unint64_t v9 = v5 - *a1;
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10) {
      uint64_t v11 = MEMORY[0x186E3BC60](a1[3], v10, 0LL);
    }
    else {
      uint64_t v11 = 0LL;
    }
    int v13 = &v7[v11];
    uint64_t v14 = v11 + v10;
    char v15 = &v13[a2];
    bzero(v13, a2);
    unint64_t v17 = *a1;
    uLong v16 = a1[1];
    if (v16 != *a1)
    {
      do
      {
        char v18 = *--v16;
        *--int v13 = v18;
      }

      while (v16 != v17);
      uLong v16 = *a1;
    }

    *a1 = v13;
    a1[1] = v15;
    a1[2] = (char *)v14;
    if (v16) {
      CFAllocatorDeallocate((CFAllocatorRef)a1[3], v16);
    }
  }

void std::vector<unsigned char,ctu::cf::allocator_adapter<unsigned char>>::__destroy_vector::operator()[abi:ne180100]( uint64_t a1)
{
  int v1 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v1;
    CFAllocatorDeallocate(*(CFAllocatorRef *)(a1 + 24), v1);
  }

uint64_t TelephonyUtilWriteToCompletion(int __fd, char *__buf, size_t __nbyte, _DWORD *a4)
{
  *a4 = 0;
  if (!(_DWORD)__nbyte) {
    return 0LL;
  }
  unsigned int v5 = __nbyte;
  while (1)
  {
    ssize_t v8 = write(__fd, __buf, v5);
    if (v8 < 0) {
      break;
    }
    *a4 += v8;
    __buf += v8;
    v5 -= v8;
    if (!v5) {
      return 0LL;
    }
  }

  return *__error();
}

ssize_t TelephonyUtilUnblockableReadWithTimeout( int a1, unsigned int a2, void *a3, unsigned int a4, unsigned int a5)
{
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  if (a1 < 0) {
    return 4294967287LL;
  }
  memset(&v15, 0, sizeof(v15));
  if (__darwin_check_fd_set_overflow(a1, &v15, 0)) {
    v15.fds_bits[a1 >> 5] |= 1 << a1;
  }
  if ((a2 & 0x80000000) == 0 && __darwin_check_fd_set_overflow(a2, &v15, 0)) {
    v15.fds_bits[a2 >> 5] |= 1 << a2;
  }
  if (a5 == -1)
  {
    uint64_t v10 = 0LL;
  }

  else
  {
    unint64_t v13 = a5 / 0x3E8uLL;
    LODWORD(v14) = 1000 * (a5 % 0x3E8);
    uint64_t v10 = (timeval *)&v13;
  }

  else {
    unsigned int v12 = a1;
  }
  ssize_t result = select(v12 + 1, &v15, 0LL, 0LL, v10);
  if ((int)result >= 1)
  {
    if ((a2 & 0x80000000) == 0
      && __darwin_check_fd_set_overflow(a2, &v15, 0)
      && ((v15.fds_bits[a2 >> 5] >> a2) & 1) != 0)
    {
      return 0LL;
    }

    else
    {
      return read(a1, a3, a4);
    }
  }

  return result;
}

BOOL TelephonyUtilUnblockableReadToCompletionWithTimeout( int a1, unsigned int a2, char *a3, unsigned int a4, unsigned int a5)
{
  do
  {
    unsigned int v9 = a4;
    if (!a4) {
      break;
    }
    int v10 = TelephonyUtilUnblockableReadWithTimeout(a1, a2, a3, a4, a5);
    a3 += v10;
    a4 = v9 - v10;
  }

  while (v10 > 0);
  return v9 == 0;
}

uint64_t TelephonyUtilLogGetBufferSize(int a1)
{
  return (146 * ((a1 + 31) >> 5)) | 1;
}

uint64_t TelephonyUtilLogBinaryToBuffer(_BYTE *a1, unsigned int a2, unsigned __int8 *a3, int a4)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (a4 < 1)
  {
    uint64_t v6 = 0LL;
    *a1 = 0;
  }

  else
  {
    uint64_t v5 = 0LL;
    LODWORD(v6) = 0;
    uint64_t v7 = a4;
    int v8 = a4;
    uint64_t v22 = a4;
    while (1)
    {
      int v9 = v8 - 32;
      if (v8 >= 32) {
        int v8 = 32;
      }
      memset(&v25[14], 0, 32);
      if (v8 <= 1) {
        uint64_t v10 = 1LL;
      }
      else {
        uint64_t v10 = v8;
      }
      memset(v25, 0, 224);
      if (v5 >= v7)
      {
        LODWORD(v11) = 0;
        int v15 = 0;
      }

      else
      {
        uint64_t v11 = 0LL;
        unsigned int v12 = a3;
        do
        {
          unsigned int v13 = *v12++;
          unint64_t v14 = (char *)v25 + v11;
          char *v14 = str_17[(unint64_t)v13 >> 4];
          v14[1] = str_17[v13 & 0xF];
          v11 += 3LL;
          v14[2] = 32;
        }

        while (v10 + 2LL * v10 != v11);
        int v15 = v10;
      }

      unsigned int v16 = 3 * (33 - v15);
      memset((char *)v25 + v11, 32, v16);
      unsigned int v17 = v16 + v11;
      uint64_t v7 = v22;
      if (v5 < v22)
      {
        for (uint64_t i = 0LL; i != v10; ++i)
        {
          char v19 = a3[i];
          *((_BYTE *)v25 + v17 + i) = v19;
        }

        v17 += i;
      }

      *(_WORD *)((char *)v25 + (int)v17) = 10;
      uint64_t v6 = (snprintf(&a1[v6], a2 - v6, "%04x  %s", v5, (const char *)v25) + v6);
      v5 += 32LL;
      a3 += 32;
      int v8 = v9;
    }

    return a2;
  }

  return v6;
}

uint64_t TelephonyUtilDecodeHexWithDefault(int a1, unsigned int a2)
{
  unsigned int v2 = a1 - 48;
  else {
    unsigned int v3 = a1 - 87;
  }
  else {
    unsigned int v4 = v3;
  }
  if (v2 <= 9) {
    return v2;
  }
  else {
    return v4;
  }
}

uint64_t TelephonyUtilEncodeHex(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  *a2 = str_17[(unint64_t)result >> 4];
  *a3 = str_17[result & 0xF];
  return result;
}

uint64_t TelephonyUtilBinToHexGetBufferSize(int a1)
{
  return (2 * a1) | 1u;
}

uint64_t TelephonyUtilBinToHex(_BYTE *a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  if (((2 * a4) | 1) <= a2) {
    unint64_t v4 = a4;
  }
  else {
    unint64_t v4 = (a2 - 1) >> 1;
  }
  uint64_t v5 = a1;
  if (v4)
  {
    uint64_t v6 = a1;
    do
    {
      unsigned int v7 = *a3++;
      char v8 = str_17[v7 & 0xF];
      _BYTE *v6 = str_17[(unint64_t)v7 >> 4];
      uint64_t v5 = v6 + 2;
      v6[1] = v8;
      v6 += 2;
      --v4;
    }

    while (v4);
  }

  *uint64_t v5 = 0;
  return ((_DWORD)v5 - (_DWORD)a1 + 1);
}

uint64_t TelephonyUtilHexToBin(_BYTE *a1, uint64_t a2, char *__s)
{
  unsigned int v6 = strlen(__s);
  LODWORD(v7) = v6 >> 1;
  uint64_t v8 = v6 & 1;
  else {
    uint64_t v7 = (a2 - v8);
  }
  if ((v6 & 1) != 0)
  {
    int v9 = *__s;
    unsigned int v10 = v9 - 48;
    unsigned int v11 = v9 - 65;
    else {
      char v12 = v9 - 87;
    }
    char v13 = v9 - 55;
    if (v11 > 5) {
      char v13 = v12;
    }
    if (v10 < 0xA) {
      char v13 = v10;
    }
    *a1 = v13;
  }

  int v14 = v6 & 1;
  if ((_DWORD)v7)
  {
    int v15 = &__s[v8];
    unsigned int v16 = &a1[v8];
    unsigned int v17 = (unsigned __int8 *)(v15 + 1);
    uint64_t v18 = v7;
    do
    {
      int v19 = *(v17 - 1);
      unsigned int v20 = v19 - 48;
      unsigned int v21 = v19 - 65;
      else {
        char v22 = v19 - 87;
      }
      char v23 = v19 - 55;
      if (v21 > 5) {
        char v23 = v22;
      }
      if (v20 < 0xA) {
        char v23 = v20;
      }
      char v24 = 16 * v23;
      int v26 = *v17;
      v17 += 2;
      char v25 = v26;
      unsigned int v27 = v26 - 48;
      unsigned int v28 = v26 - 65;
      char v29 = v26 - 87;
      else {
        char v30 = v29;
      }
      char v31 = v25 - 55;
      if (v28 > 5) {
        char v31 = v30;
      }
      if (v27 < 0xA) {
        char v31 = v27;
      }
      *v16++ = v31 | v24;
      --v18;
    }

    while (v18);
  }

  return (v7 + v14);
}

uint64_t TelephonyUtilParseHardwareModel(_BYTE *a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)a2 = 0LL;
  if (!*a1) {
    return 0LL;
  }
  *(_OWORD *)__s = 0u;
  __int128 v40 = 0u;
  __strlcpy_chk();
  size_t v3 = strlen(__s);
  if (!v3)
  {
    unsigned int v10 = "received zero-length string parameter\n";
    goto LABEL_20;
  }

  if (v3 >> 31)
  {
    unsigned int v10 = "received string with length exceeding maximum int value";
LABEL_20:
    _TelephonyUtilDebugPrintError((uint64_t)"stripLongPrefix", (uint64_t)v10, v4, v5, v6, v7, v8, v9, v37);
    char v23 = "aborting because stripLongPrefix failed\n";
LABEL_21:
    _TelephonyUtilDebugPrintError( (uint64_t)"TelephonyUtilParseHardwareModel",  (uint64_t)v23,  v17,  v18,  v19,  v20,  v21,  v22,  v37);
    return 0LL;
  }

  uint64_t v11 = 0LL;
  *(_OWORD *)__endptr = 0u;
  __int128 v42 = 0u;
  int v12 = -1;
  unsigned int v10 = "aborting to prevent out-of-bounds access while copying suffix (non-numeric) characters\n";
  char v13 = "received string parameter with no suffix (non-numeric) characters\n";
  while (1)
  {
    int v14 = __s[(v3 + v12)];
    if (v11 == 32) {
      goto LABEL_20;
    }
    *((_BYTE *)__endptr + v11) = v14;
    --v12;
    if (v3 == ++v11)
    {
LABEL_10:
      unsigned int v10 = v13;
      goto LABEL_20;
    }
  }

  if ((int)v3 - (int)v11 < 1)
  {
    unsigned int v10 = "received string parameter without non-numeric prefix\n";
    goto LABEL_20;
  }

  int v15 = -1 - v11;
  unsigned int v10 = "aborting to prevent out-of-bounds access while copying numeric characters\n";
  char v13 = "received string parameter without non-numeric prefix\n";
  while (1)
  {
    char v16 = __s[(v3 + v15)];
    if (v11 == 32) {
      goto LABEL_20;
    }
    *((_BYTE *)__endptr + v11) = v16;
    --v15;
    if (v3 == ++v11) {
      goto LABEL_10;
    }
  }

  if ((v11 & 0xFFFFFFE0) != 0)
  {
    unsigned int v10 = "aborting to prevent out-of-bounds access while copying 1-character alphabetical prefix\n";
    goto LABEL_20;
  }

  *((_BYTE *)__endptr + v11) = v16;
  char v25 = __s;
  __memset_chk();
  uint64_t v26 = v11;
  do
    *v25++ = *((_BYTE *)__endptr + v26--);
  while (v26 != -1);
  __s[v11 + 1] = 0;
  __endptr[0] = 0LL;
  __darwin_ct_rune_t v27 = __s[0];
  *(_BYTE *)(a2 + 4) = __s[0];
  __darwin_ct_rune_t v28 = __toupper(v27);
  *(_BYTE *)(a2 + 4) = v28;
  if (((v28 << 24) - 1509949441) <= 0xE6FFFFFE)
  {
    char v23 = "detected hardware model info string without alphabetical prefix\n";
    goto LABEL_21;
  }

  *__error() = 0;
  *(_DWORD *)a2 = strtoul(&__s[1], __endptr, 10);
  if (*__error())
  {
    uint64_t v38 = *__error();
    _TelephonyUtilDebugPrintError( (uint64_t)"TelephonyUtilParseHardwareModel",  (uint64_t)"strtoul failed with error no %d\n",  v29,  v30,  v31,  v32,  v33,  v34,  v38);
    return 0LL;
  }

  std::locale v35 = __endptr[0];
  if (!*__endptr[0])
  {
    *(_DWORD *)(a2 + 8) = 0;
    return 1LL;
  }

  if (!strncasecmp("SIM", __endptr[0], 3uLL))
  {
    *(_DWORD *)(a2 + 8) = 3;
    goto LABEL_48;
  }

  if (!strncasecmp("FPGA", v35, 4uLL))
  {
    *(_DWORD *)(a2 + 8) = 4;
    return 1LL;
  }

  if (!strncasecmp("AP", v35 + 1, 2uLL))
  {
    *(_DWORD *)(a2 + 8) = 2;
    goto LABEL_48;
  }

  if (!strncasecmp("AP", v35, 2uLL))
  {
    *(_DWORD *)(a2 + 8) = 2;
    return 1LL;
  }

  if (!strncasecmp("DEV", v35 + 1, 3uLL))
  {
    int v36 = 1;
LABEL_47:
    *(_DWORD *)(a2 + 8) = v36;
    goto LABEL_48;
  }

  if (!strncasecmp("DEV", v35, 3uLL))
  {
    uint64_t result = 1LL;
    *(_DWORD *)(a2 + 8) = 1;
    return result;
  }

  if (!strncasecmp("Mac", v35 + 1, 3uLL))
  {
    int v36 = 5;
    goto LABEL_47;
  }

  if (strncasecmp("Mac", v35, 3uLL))
  {
LABEL_48:
    __strlcpy_chk();
    *(_BYTE *)(a2 + 5) = __tolower(*(char *)(a2 + 5));
    *(_BYTE *)(a2 + 6) = __tolower(*(char *)(a2 + 6));
    return 1LL;
  }

  *(_DWORD *)(a2 + 8) = 5;
  return 1LL;
}

uint64_t TelephonyUtilIsInternalBuild()
{
  if (_TUQueryBuildInformationOnce != -1) {
    dispatch_once(&_TUQueryBuildInformationOnce, &__block_literal_global_32);
  }
  return _TUIsInternalBuildCached;
}

uint64_t TelephonyUtilIsCarrierBuild()
{
  if (_TUQueryBuildInformationOnce != -1) {
    dispatch_once(&_TUQueryBuildInformationOnce, &__block_literal_global_32);
  }
  return _TUIsCarrierBuildCached;
}

uint64_t TelephonyUtilIsDesenseBuild()
{
  if (_TUQueryBuildInformationOnce != -1) {
    dispatch_once(&_TUQueryBuildInformationOnce, &__block_literal_global_32);
  }
  return _MergedGlobals;
}

uint64_t TelephonyUtilIsVendorBuild()
{
  if (_TUQueryBuildInformationOnce != -1) {
    dispatch_once(&_TUQueryBuildInformationOnce, &__block_literal_global_32);
  }
  return byte_18C4A45A9;
}

uint64_t TelephonyUtilIsRestoreOS()
{
  if (_TUQueryBuildInformationOnce != -1) {
    dispatch_once(&_TUQueryBuildInformationOnce, &__block_literal_global_32);
  }
  return byte_18C4A45AA;
}

uint64_t TelephonyUtilTraceAllowed()
{
  if (_TUQueryBuildInformationOnce != -1) {
    dispatch_once(&_TUQueryBuildInformationOnce, &__block_literal_global_32);
  }
  if ((_TUIsInternalBuildCached & 1) != 0 || (_TUIsCarrierBuildCached & 1) != 0 || (_MergedGlobals & 1) != 0) {
    return 1LL;
  }
  else {
    return byte_18C4A45A9;
  }
}

unint64_t TelephonyUtilGetSystemTime()
{
  v1.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v1.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v1, 0LL);
  return 1000 * v1.tv_sec + v1.tv_usec / 0x3E8uLL;
}

uint64_t TelephonyUtilSystemMachTime()
{
  if (!qword_18C4A45B8)
  {
    mach_timebase_info info = (mach_timebase_info)0xAAAAAAAAAAAAAAAALL;
    mach_timebase_info(&info);
    if (info.denom)
    {
      uint32_t denom = info.denom;
      uint32_t numer = info.numer;
      do
      {
        uint32_t v2 = denom;
        uint32_t denom = numer % denom;
        uint32_t numer = v2;
      }

      while (denom);
    }

    else
    {
      uint32_t v2 = info.numer;
    }

    unsigned int v3 = 1000000;
    uint32_t v4 = info.numer / v2;
    do
    {
      uint32_t v5 = v4;
      uint32_t v4 = v3;
      unsigned int v3 = v5 % v3;
    }

    while (v3);
    qword_18C4A45B0 = info.numer / v2 / v4;
    qword_18C4A45B8 = 0xF4240 / v4 * (unint64_t)(info.denom / v2);
  }

  return qword_18C4A45B0 * mach_absolute_time() / qword_18C4A45B8;
}

uint64_t TelephonyUtilGetSystemWakeReason(void *a1, size_t a2, BOOL *a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  *(_OWORD *)__big = 0u;
  __int128 v10 = 0u;
  size_t __n = 0LL;
  int v6 = sysctlbyname("kern.wakereason", 0LL, &__n, 0LL, 0LL);
  uint64_t result = 0LL;
  if (!v6 && __n && __n <= 0x100)
  {
    if (a1 && __n > a2)
    {
      return 0LL;
    }

    else
    {
      sysctlbyname("kern.wakereason", __big, &__n, 0LL, 0LL);
      if (a3) {
        *a3 = strstr(__big, "baseband") != 0LL;
      }
      if (a1) {
        memcpy(a1, __big, __n);
      }
      return 1LL;
    }
  }

  return result;
}

size_t TelephonyUtilStrlcpy(void *a1, char *__s1, size_t __n)
{
  size_t v6 = strnlen(__s1, __n);
  size_t v7 = v6;
  if (v6 >= __n)
  {
    if (__n)
    {
      size_t v8 = __n - 1;
      memcpy(a1, __s1, v8);
      *((_BYTE *)a1 + v8) = 0;
    }
  }

  else
  {
    memcpy(a1, __s1, v6 + 1);
  }

  return v7;
}

uint64_t TelephonyUtilRunCommand(uint64_t a1, uint64_t a2)
{
  v4[1] = *MEMORY[0x1895F89C0];
  v4[0] = 0LL;
  v3[0] = a1;
  v3[1] = a2;
  v3[4] = 0LL;
  v3[5] = 0xAAAAAAAAAAAAAA00LL;
  v3[2] = v4;
  v3[3] = 0LL;
  else {
    return 22LL;
  }
}

uint64_t TelephonyUtilRunCommandExt(uint64_t a1)
{
  pid_t v6 = 0;
  if (!a1)
  {
    syslog(3, "%s: parameter cannot be NULL.\n");
    return 0LL;
  }

  if (!*(void *)a1)
  {
    syslog(3, "%s: command cannot be NULL\n");
    return 0LL;
  }

  uint32_t v2 = *(char *const **)(a1 + 8);
  if (!v2)
  {
    syslog(3, "%s: argument cannot be NULL\n");
    return 0LL;
  }

  unsigned int v3 = *(char *const **)(a1 + 16);
  if (!v3)
  {
    syslog(3, "%s: environment cannot be NULL\n");
    return 0LL;
  }

  if (posix_spawn( &v6,  *(const char **)a1,  *(const posix_spawn_file_actions_t **)(a1 + 24),  *(const posix_spawnattr_t **)(a1 + 32),  v2,  v3))
  {
    syslog(3, "%s: spawning %s failed! ret: %d\n");
    return 0LL;
  }

  if (!*(_BYTE *)(a1 + 40))
  {
    int v5 = -1431655766;
    waitpid(v6, &v5, 0);
  }

  return v6;
}

uint64_t TelephonyUtilIsBBPlatformSimulationEnabled()
{
  if (qword_18C4A45C0 != -1) {
    dispatch_once(&qword_18C4A45C0, &__block_literal_global);
  }
  return byte_18C4A45AB;
}

void __TelephonyUtilIsBBPlatformSimulationEnabled_block_invoke()
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (_TUQueryBuildInformationOnce != -1) {
    dispatch_once(&_TUQueryBuildInformationOnce, &__block_literal_global_32);
  }
  if (_TUIsInternalBuildCached == 1)
  {
    if (qword_18C4A45C8 != -1) {
      dispatch_once(&qword_18C4A45C8, &__block_literal_global_50);
    }
    if ((byte_18C4A45AC & 1) != 0)
    {
      CFPropertyListRef v0 = CFPreferencesCopyValue( @"EnableBBSimulation",  @"/private/var/wireless/Library/Preferences/com.apple.AppleBasebandManager.plist",  (CFStringRef)*MEMORY[0x189605198],  (CFStringRef)*MEMORY[0x189605178]);
      if (v0)
      {
        byte_18C4A45AB = v0 == (CFPropertyListRef)*MEMORY[0x189604DE8];
        CFRelease(v0);
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEBUG))
        {
          if (byte_18C4A45AB) {
            timeval v1 = "enabled";
          }
          else {
            timeval v1 = "disabled";
          }
          int v4 = 136315138;
          int v5 = v1;
          _os_log_debug_impl( &dword_1865C1000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEBUG,  "BBSimulation %s",  (uint8_t *)&v4,  0xCu);
        }

        return;
      }

      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      LOWORD(v4) = 0;
      uint32_t v2 = (os_log_s *)MEMORY[0x1895F8DA0];
      unsigned int v3 = "BBSimulation disabled due to key not set";
    }

    else
    {
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      LOWORD(v4) = 0;
      uint32_t v2 = (os_log_s *)MEMORY[0x1895F8DA0];
      unsigned int v3 = "Platform Simulation disabled due to 'libRemoteTelephonyTransport' not found";
    }

    _os_log_impl(&dword_1865C1000, v2, OS_LOG_TYPE_DEFAULT, v3, (uint8_t *)&v4, 2u);
  }

void __TelephonyUtilQueryBuildInformation_block_invoke()
{
  v15[1] = *(const void **)MEMORY[0x1895F89C0];
  v15[0] = @"ReleaseType";
  CFArrayRef v0 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x189604DB0], v15, 1LL, MEMORY[0x189605228]);
  if (v0)
  {
    CFArrayRef v1 = v0;
    uint32_t v2 = dlopen("/usr/lib/libMobileGestalt.dylib", 1);
    if (!v2) {
      goto LABEL_25;
    }
    unsigned int v3 = (uint64_t (*)(CFArrayRef, void))dlsym(v2, "MGCopyMultipleAnswers");
    if (!v3) {
      goto LABEL_25;
    }
    int v4 = (const __CFDictionary *)v3(v1, 0LL);
    if (!v4) {
      goto LABEL_25;
    }
    int v5 = v4;
    Value = (const __CFString *)CFDictionaryGetValue(v4, @"ReleaseType");
    if (!Value)
    {
LABEL_24:
      CFRelease(v5);
LABEL_25:
      CFRelease(v1);
      return;
    }

    size_t v7 = Value;
    CFTypeID v8 = CFGetTypeID(Value);
    if (v8 == CFStringGetTypeID() && CFStringCompare(v7, @"Vendor", 0LL) == kCFCompareEqualTo)
    {
      __int128 v14 = &byte_18C4A45A9;
    }

    else
    {
      CFTypeID v9 = CFGetTypeID(v7);
      if (v9 == CFStringGetTypeID() && CFStringCompare(v7, @"Carrier", 0LL) == kCFCompareEqualTo)
      {
        __int128 v14 = &_TUIsCarrierBuildCached;
      }

      else
      {
        CFTypeID v10 = CFGetTypeID(v7);
        if (v10 != CFStringGetTypeID() || CFStringCompare(v7, @"Internal", 0LL))
        {
          CFTypeID v11 = CFGetTypeID(v7);
          if (v11 == CFStringGetTypeID() && CFStringCompare(v7, @"Desense", 0LL) == kCFCompareEqualTo)
          {
            __int128 v14 = &_MergedGlobals;
            goto LABEL_23;
          }

          CFTypeID v12 = CFGetTypeID(v7);
          if (v12 != CFStringGetTypeID() || CFStringCompare(v7, @"NonUI", 0LL))
          {
            CFTypeID v13 = CFGetTypeID(v7);
            if (v13 != CFStringGetTypeID() || CFStringCompare(v7, @"Restore", 0LL)) {
              goto LABEL_24;
            }
            __int128 v14 = &byte_18C4A45AA;
            goto LABEL_23;
          }
        }

        __int128 v14 = &_TUIsInternalBuildCached;
      }
    }

LABEL_23:
    char *v14 = 1;
    goto LABEL_24;
  }

          CFTypeID v13 = v42.i64[1];
          ++v15;
          if (v42.i64[0] != v42.i64[1]) {
            continue;
          }
          uint64_t v6 = 0LL;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }

      break;
    }
  }

  *(void *)__int128 v40 = &v42;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
  return v6;
}

    *(_DWORD *)a2 = -992;
    return result;
  }

  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

void *__isRTDylibPresent_block_invoke()
{
  uint64_t v0 = 0LL;
  for (char i = 1; ; char i = 0)
  {
    char v2 = i;
    uint64_t result = dlopen(off_189E93CF8[v0], 1);
    if (result) {
      break;
    }
    uint64_t v0 = 1LL;
    if ((v2 & 1) == 0) {
      return result;
    }
  }

  byte_18C4A45AC = 1;
  return (void *)dlclose(result);
}

ctu::MallocZone *ctu::MallocZone::MallocZone(ctu::MallocZone *this, const char *a2, vm_size_t start_size)
{
  zone = malloc_create_zone(start_size, 0);
  *(void *)this = zone;
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = off_189E93D18;
  v6[1] = 0LL;
  v6[2] = 0LL;
  v6[3] = zone;
  *((void *)this + 1) = v6;
  *((void *)this + 2) = a2;
  malloc_set_zone_name(zone, a2);
  return this;
}

void sub_1865CB154(_Unwind_Exception *a1)
{
}

uint64_t ctu::MallocZone::get(ctu::MallocZone *this)
{
  return *(void *)this;
}

void *ctu::MallocZone::MallocZone(void *result)
{
  void *result = 0LL;
  result[1] = 0LL;
  result[2] = 0LL;
  return result;
}

{
  void *result = 0LL;
  result[1] = 0LL;
  result[2] = 0LL;
  return result;
}

void *ctu::MallocZone::operator=(void *a1)
{
  char v2 = (std::__shared_weak_count *)a1[1];
  *a1 = 0LL;
  a1[1] = 0LL;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  a1[2] = 0LL;
  return a1;
}

void *ctu::MallocZone::malloc(malloc_zone_t **this, size_t a2)
{
  return malloc_zone_malloc(*this, a2);
}

void *ctu::MallocZone::calloc(malloc_zone_t **this, size_t a2, size_t a3)
{
  return malloc_zone_calloc(*this, a2, a3);
}

void *ctu::MallocZone::valloc(malloc_zone_t **this, size_t a2)
{
  return malloc_zone_valloc(*this, a2);
}

void *ctu::MallocZone::realloc(malloc_zone_t **this, void *a2, size_t a3)
{
  return malloc_zone_realloc(*this, a2, a3);
}

void *ctu::MallocZone::memalign(malloc_zone_t **this, size_t a2, size_t a3)
{
  return malloc_zone_memalign(*this, a2, a3);
}

void ctu::MallocZone::free(malloc_zone_t **this, void *a2)
{
}

uint64_t ctu::MallocZone::getName(ctu::MallocZone *this)
{
  return *((void *)this + 2);
}

BOOL ctu::MallocZone::operator==(void *a1, void *a2)
{
  return *a1 == *a2;
}

void std::__shared_ptr_pointer<_malloc_zone_t *,ctu::MallocZone::MallocZone(char const*,unsigned long)::$_0,std::allocator<_malloc_zone_t>>::~__shared_ptr_pointer( std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_pointer<_malloc_zone_t *,ctu::MallocZone::MallocZone(char const*,unsigned long)::$_0,std::allocator<_malloc_zone_t>>::__on_zero_shared( uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<_malloc_zone_t *,ctu::MallocZone::MallocZone(char const*,unsigned long)::$_0,std::allocator<_malloc_zone_t>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void *ctu::RestModule::RestModule(void *this)
{
  *this = 0LL;
  this[1] = 0LL;
  return this;
}

{
  *this = 0LL;
  this[1] = 0LL;
  return this;
}

std::__shared_weak_count_vtbl **ctu::RestModule::RestModule( std::__shared_weak_count_vtbl **a1, __int128 *a2, dispatch_object_s **a3, dispatch_object_s **a4)
{
  return a1;
}

{
  ctu::RestModuleState::create(a2, a3, a4, a1);
  return a1;
}

void ctu::RestModuleState::create( __int128 *a1@<X0>, dispatch_object_s **a2@<X1>, dispatch_object_s **a3@<X2>, std::__shared_weak_count_vtbl **a4@<X8>)
{
  CFTypeID v8 = (std::__shared_weak_count_vtbl *)operator new(0x68uLL);
  ctu::RestModuleState::RestModuleState((uint64_t)v8, a1, a2, a3);
  *a4 = v8;
  CFTypeID v9 = (std::__shared_weak_count *)operator new(0x20uLL);
  v9->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)off_189E93E88;
  v9->__shared_weak_owners_ = 0LL;
  v9[1].__vftable = v8;
  a4[1] = (std::__shared_weak_count_vtbl *)v9;
  CFTypeID v11 = (std::__shared_weak_count *)v8->~__shared_weak_count_0;
  if (v11)
  {
    if (v11->__shared_owners_ != -1) {
      return;
    }
    do
      unint64_t v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      unint64_t v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
    v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
    v8->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
    std::__shared_weak_count::__release_weak(v11);
  }

  else
  {
    do
      unint64_t v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    __int128 v16 = (unint64_t *)&v9->__shared_weak_owners_;
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
    v8->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  }

  do
    unint64_t v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }

void sub_1865CB43C(void *a1)
{
}

void sub_1865CB45C(_Unwind_Exception *a1)
{
}

std::__shared_weak_count_vtbl **ctu::RestModule::RestModule( std::__shared_weak_count_vtbl **a1, dispatch_object_s **a2, std::string *a3)
{
  else {
    std::string v9 = *a3;
  }
  int v5 = *a2;
  CFTypeID v8 = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  size_t v7 = 0LL;
  ctu::RestModuleState::create((__int128 *)&v9, &v8, &v7, a1);
  if (v5) {
    dispatch_release(v5);
  }
  return a1;
}

{
  dispatch_object_s *v5;
  dispatch_object_s *v7;
  dispatch_object_s *v8;
  std::string v9;
  else {
    std::string v9 = *a3;
  }
  int v5 = *a2;
  CFTypeID v8 = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  size_t v7 = 0LL;
  ctu::RestModuleState::create((__int128 *)&v9, &v8, &v7, a1);
  if (v5) {
    dispatch_release(v5);
  }
  return a1;
}

void sub_1865CB550( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v16) {
    dispatch_release(v16);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1865CB614( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v16) {
    dispatch_release(v16);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ctu::RestModule::registerAsRequestSink(uint64_t *a1, uint64_t a2, void *a3)
{
}

void ctu::RestModuleState::addRequestHandler(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  uint64_t v6 = *(uint64_t **)(a1 + 96);
  if (!v6)
  {
    size_t v7 = operator new(0x18uLL);
    v7[1] = 0LL;
    v7[2] = 0LL;
    *size_t v7 = 0LL;
    std::unique_ptr<boost::container::flat_map<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>,std::less<std::string>,void>>::reset[abi:ne180100]( (uint64_t *)(a1 + 96),  (uint64_t)v7);
    uint64_t v6 = *(uint64_t **)(a1 + 96);
  }

  uint64_t v8 = a3[3];
  if (v8)
  {
    v39 = (_OWORD *)0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v38[0] = v9;
    v38[1] = v9;
    __int128 v37 = v9;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external( (std::string *)&v37,  *(const std::string::value_type **)a2,  *(void *)(a2 + 8));
      uint64_t v8 = a3[3];
      CFTypeID v10 = (void *)v38 + 1;
      if (!v8) {
        goto LABEL_13;
      }
    }

    else
    {
      __int128 v37 = *(_OWORD *)a2;
      *(void *)&v38[0] = *(void *)(a2 + 16);
      CFTypeID v10 = (void *)v38 + 1;
    }

    if ((void *)v8 == a3)
    {
      v39 = (_OWORD *)((char *)v38 + 8);
      (*(void (**)(void *, char *))(*a3 + 24LL))(a3, (char *)v38 + 8);
LABEL_18:
      uint64_t v34 = a2;
      object[0] = &v37;
      object[1] = v6;
      uint64_t v17 = *v6;
      unint64_t v18 = v6[1];
      uint64_t v19 = *v6 + 56 * v18;
      while (v18)
      {
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( (void *)(v17 + 56 * (v18 >> 1)),  (void **)&v37) & 0x80u) == 0LL)
        {
          v18 >>= 1;
        }

        else
        {
          v17 += 56 * (v18 >> 1) + 56;
          v18 += ~(v18 >> 1);
        }
      }

      if (v17 == v19)
      {
        LOBYTE(v21) = 1;
      }

      else
      {
        unsigned int v20 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v37, (void **)v17);
        unsigned int v21 = (v20 >> 7) & 1 | 0xAAAAAA00;
        if ((v20 & 0x80) == 0) {
          goto LABEL_33;
        }
      }

      uint64_t v22 = v6[1];
      if (v6[2] == v22)
      {
        boost::container::vector<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>>,boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>*,boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>>>( &v36,  (char *)v6,  (__int128 *)v17,  &v37);
        uint64_t v17 = v36;
      }

      else
      {
        uint64_t v23 = *v6;
        uint64_t v24 = *v6 + 56 * v22;
        if (v24 == v17)
        {
          __int128 v26 = v37;
          *(void *)(v17 + 16) = *(void *)&v38[0];
          *(_OWORD *)uint64_t v17 = v26;
          *(void *)&v38[0] = 0LL;
          __int128 v37 = 0uLL;
          std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::__value_func[abi:ne180100]( v23 + 56 * v22 + 24,  (uint64_t)v38 + 8);
          ++v6[1];
        }

        else
        {
          uint64_t v25 = v24 - 56;
          *(_OWORD *)uint64_t v24 = *(_OWORD *)(v24 - 56);
          *(void *)(v24 + 16) = *(void *)(v24 - 40);
          *(void *)(v24 - std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v18 - 48) = 0LL;
          *(void *)(v24 - 40) = 0LL;
          *(void *)(v24 - 56) = 0LL;
          std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::__value_func[abi:ne180100]( v23 + 56 * v22 + 24,  v24 - 32);
          ++v6[1];
          for (; v25 != v17; v25 -= 56LL)
            boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>::operator=( v25,  (__int128 *)(v25 - 56));
          boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>::operator=( v17,  &v37);
        }
      }

LABEL_33:
      if (v39 == (_OWORD *)((char *)v38 + 8))
      {
        uint64_t v27 = 4LL;
      }

      else
      {
        if (!v39)
        {
LABEL_38:
          if (SBYTE7(v38[0]) < 0) {
            operator delete((void *)v37);
          }
          if ((_BYTE)v21)
          {
            uint64_t v28 = *(void *)(a1 + 56);
            if (v28 && (*(unsigned int (**)(uint64_t))(*(void *)v28 + 32LL))(v28))
            {
              uint64_t v29 = *(void *)(a1 + 56);
              else {
                uint64_t v30 = *(const char **)v34;
              }
              *(void *)&__int128 v37 = xpc_string_create(v30);
              if (!(void)v37) {
                *(void *)&__int128 v37 = xpc_null_create();
              }
              object[0] = xpc_null_create();
              (*(void (**)(uint64_t, __int128 *, xpc_object_t *))(*(void *)v29 + 48LL))(v29, &v37, object);
              xpc_release(object[0]);
              xpc_release((xpc_object_t)v37);
            }
          }

          else
          {
            std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::operator=[abi:ne180100]( (void *)(v17 + 24),  (uint64_t)a3);
          }

          return;
        }

        uint64_t v27 = 5LL;
        CFTypeID v10 = v39;
      }

      (*(void (**)(void *))(*v10 + 8 * v27))(v10);
      goto LABEL_38;
    }

    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16LL))(v8);
LABEL_13:
    v39 = (_OWORD *)v8;
    goto LABEL_18;
  }

  *(void *)&__int128 v37 = 0xAAAAAAAAAAAAAAAALL;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>>::find( (uint64_t)&v37,  (void ***)v6,  (void **)a2);
  uint64_t v11 = *v6 + 56 * v6[1];
  uint64_t v12 = v37;
  if ((void)v37 == v11) {
    return;
  }
  uint64_t v13 = v37 + 56;
  while (v13 != v11)
  {
    uint64_t v14 = v12 + 56;
    uint64_t v13 = boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>::operator=( v12,  (__int128 *)(v12 + 56))
        + 112;
    uint64_t v12 = v14;
  }

  unint64_t v15 = *(void **)(v11 - 8);
  if (v15 == (void *)(v11 - 32))
  {
    uint64_t v16 = 4LL;
    unint64_t v15 = (void *)(v11 - 32);
    goto LABEL_51;
  }

  if (v15)
  {
    uint64_t v16 = 5LL;
LABEL_51:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }

  --v6[1];
  uint64_t v31 = *(void *)(a1 + 56);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(void *)v31 + 32LL))(v31))
  {
    uint64_t v32 = *(void *)(a1 + 56);
    else {
      uint64_t v33 = *(const char **)a2;
    }
    *(void *)&__int128 v37 = xpc_string_create(v33);
    if (!(void)v37) {
      *(void *)&__int128 v37 = xpc_null_create();
    }
    object[0] = xpc_null_create();
    (*(void (**)(uint64_t, __int128 *, xpc_object_t *))(*(void *)v32 + 56LL))(v32, &v37, object);
    xpc_release(object[0]);
    xpc_release((xpc_object_t)v37);
  }

  uint64_t v27 = this->__end_;
  uint64_t v28 = this->__marked_count_;
  if ((char)v7 <= 91)
  {
    uint64_t result = a2;
    switch((char)v7)
    {
      case '$':
      case ')':
        return result;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_58;
      case '(':
        if (a2 + 1 == a3) {
          goto LABEL_97;
        }
        if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
        {
          ++this->__open_count_;
          uint64_t v29 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>( this,  a2 + 3,  a3);
          if (v29 != a3 && *v29 == 41)
          {
            --this->__open_count_;
            uint64_t v30 = v29 + 1;
            goto LABEL_94;
          }

LABEL_36:
  if (*((void *)this + 3) != v5)
  {
    if (v7 == (void *)v9)
    {
      *size_t v7 = v15;
      *(void *)(v6 + 16 * v5 + 8) = v8;
      uint64_t v38 = 0uLL;
      *((void *)this + 2) = v5 + 1;
      __int128 v9 = v6 + 16 * v5;
    }

    else
    {
      uint64_t v28 = (uint64_t)(v7 - 2);
      *(_OWORD *)size_t v7 = *((_OWORD *)v7 - 1);
      *(v7 - 1) = 0LL;
      *(v7 - 2) = 0LL;
      ++*((void *)this + 2);
      if (v7 - 2 != (void *)v9)
      {
        do
        {
          uint64_t v29 = v28 - 16;
          std::shared_ptr<ctu::rest::RestConnectorDelegateBase>::operator=[abi:ne180100]<ctu::rest::RestConnectorDelegate<ctu::RestModuleState>,void>( v28,  (__int128 *)(v28 - 16));
          uint64_t v28 = v29;
        }

        while (v29 != v9);
      }

      std::shared_ptr<ctu::rest::RestConnectorDelegateBase>::operator=[abi:ne180100]<ctu::rest::RestConnectorDelegate<ctu::RestModuleState>,void>( v9,  &v38);
    }

    goto LABEL_42;
  }

  boost::container::vector<std::shared_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::shared_ptr<ctu::RestResourceConnection>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<std::shared_ptr<ctu::RestResourceConnection>>,std::shared_ptr<ctu::RestResourceConnection>*,std::shared_ptr<ctu::RestResourceConnection>>>( &v36,  v4,  v9,  (uint64_t)&v38);
LABEL_43:
  uint64_t v30 = (std::__shared_weak_count *)*((void *)&v38 + 1);
  if (*((void *)&v38 + 1))
  {
    uint64_t v31 = (unint64_t *)(*((void *)&v38 + 1) + 8LL);
    do
      uint64_t v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *, char *))v30->__on_zero_shared)(v30, v4);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

  uint64_t v8 = (std::__shared_weak_count *)*((void *)&v37 + 1);
LABEL_49:
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      uint64_t v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *, char *))v8->__on_zero_shared)(v8, v4);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return 1LL;
}

void sub_1865CBAD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, uint64_t a13, uint64_t a14, xpc_object_t __p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

void *ctu::RestModule::deregisterAsRequestSink(uint64_t *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *a1;
  uint64_t v6 = 0LL;
  ctu::RestModuleState::addRequestHandler(v2, a2, v5);
  uint64_t result = v6;
  if (v6 == v5)
  {
    uint64_t v4 = 4LL;
    uint64_t result = v5;
  }

  else
  {
    if (!v6) {
      return result;
    }
    uint64_t v4 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_1865CBC0C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v14 = a13;
  if (a13 == &a10)
  {
    uint64_t v15 = 4LL;
    uint64_t v14 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*(void *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void *ctu::RestModule::registerAsRequestSink(uint64_t *a1, uint64_t a2, void *aBlock)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *a1;
  if (aBlock)
  {
    v7[0] = &off_189E93D78;
    v7[1] = _Block_copy(aBlock);
    uint64_t v8 = v7;
    ctu::RestModuleState::addRequestHandler(v4, a2, v7);
  }

  else
  {
    uint64_t v8 = 0LL;
    ctu::RestModuleState::addRequestHandler(v4, a2, v7);
  }

  uint64_t result = v8;
  if (v8 == v7)
  {
    uint64_t v6 = 4LL;
    uint64_t result = v7;
  }

  else
  {
    if (!v8) {
      return result;
    }
    uint64_t v6 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_1865CBD1C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void *ctu::RestModule::getPropertyOnce(uint64_t **a1, uint64_t a2, void *aBlock)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *a1;
  if (aBlock) {
    int v5 = _Block_copy(aBlock);
  }
  else {
    int v5 = 0LL;
  }
  v8[0] = &off_189E93E08;
  v8[1] = v5;
  uint64_t v9 = v8;
  ctu::RestModuleState::getValueOnce(v4, a2, (uint64_t)v8);
  uint64_t result = v9;
  if (v9 == v8)
  {
    uint64_t v7 = 4LL;
    uint64_t result = v8;
  }

  else
  {
    if (!v9) {
      return result;
    }
    uint64_t v7 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_1865CBE2C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ctu::RestModuleState::getValueOnce(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1[7];
  if (v5 && ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 32LL))(v5) & 1) != 0)
  {
    uint64_t v7 = a1[7];
    else {
      uint64_t v8 = *(const char **)a2;
    }
    xpc_object_t v31 = xpc_string_create(v8);
    if (!v31) {
      xpc_object_t v31 = xpc_null_create();
    }
    uint64_t v9 = (std::__shared_weak_count *)a1[1];
    if (!v9 || (v10 = *a1, (uint64_t v11 = std::__shared_weak_count::lock(v9)) == 0LL)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v12 = v11;
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      unint64_t v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }

    uint64_t v17 = std::__shared_weak_count::lock(v12);
    if (v17)
    {
      unint64_t v18 = v17;
      uint64_t v19 = (unint64_t *)&v17->__shared_weak_owners_;
      do
        unint64_t v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      uint64_t v29 = v10;
      uint64_t v30 = v17;
      std::__shared_weak_count::__release_weak(v12);
      unsigned int v21 = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (v22)
      {
LABEL_27:
        std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v33, a3);
        uint64_t v36 = 0LL;
        uint64_t v24 = operator new(0x28uLL);
        *uint64_t v24 = &off_189E93FC0;
        std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]( (uint64_t)(v24 + 1),  (uint64_t)v33);
        uint64_t v36 = v24;
        (*(void (**)(uint64_t, xpc_object_t *, uint64_t *, uint64_t *, _BYTE *))(*(void *)v7 + 72LL))( v7,  &v31,  &v29,  a1 + 2,  v35);
        uint64_t v25 = v36;
        if (v36 == v35)
        {
          uint64_t v26 = 4LL;
          uint64_t v25 = v35;
        }

        else
        {
          if (!v36) {
            goto LABEL_32;
          }
          uint64_t v26 = 5LL;
        }

        (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_32:
        uint64_t v27 = v34;
        if (v34 == v33)
        {
          uint64_t v28 = 4LL;
          uint64_t v27 = v33;
        }

        else
        {
          if (!v34)
          {
LABEL_37:
            if (v30) {
              std::__shared_weak_count::__release_weak(v30);
            }
            xpc_release(v31);
            return;
          }

          uint64_t v28 = 5LL;
        }

        (*(void (**)(void))(*v27 + 8 * v28))();
        goto LABEL_37;
      }

      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      uint64_t v12 = v18;
    }

    else
    {
      uint64_t v29 = 0LL;
      uint64_t v30 = 0LL;
    }

    std::__shared_weak_count::__release_weak(v12);
    goto LABEL_27;
  }

  xpc_object_t object = xpc_null_create();
  uint64_t v23 = *(void *)(a3 + 24);
  if (!v23) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v23 + 48LL))(v23, &object);
  xpc_release(object);
}

void sub_1865CC0EC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, xpc_object_t object, xpc_object_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ctu::RestModule::getPropertyOnce(uint64_t **a1, uint64_t a2, uint64_t a3)
{
}

void ctu::RestModule::unobserveProperty(uint64_t *a1, uint64_t a2)
{
}

void ctu::RestModuleState::removeSubscription(uint64_t a1, uint64_t a2)
{
  xpc_object_t v14 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>>::find( (uint64_t)&v14,  (void ***)(a1 + 72),  (void **)a2);
  uint64_t v4 = (char *)(*(void *)(a1 + 72) + 56LL * *(void *)(a1 + 80));
  uint64_t v5 = (char *)v14;
  if (v14 == v4) {
    return;
  }
  uint64_t v6 = (char *)v14 + 56;
  while (v6 != v4)
  {
    uint64_t v7 = v5 + 56;
    uint64_t v6 = (char *)(boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>::operator=( (uint64_t)v5,  (__int128 *)(v5 + 56))
                + 112);
    uint64_t v5 = v7;
  }

  uint64_t v8 = (char *)*((void *)v4 - 1);
  if (v8 == v4 - 32)
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = v4 - 32;
    goto LABEL_9;
  }

  if (v8)
  {
    uint64_t v9 = 5LL;
LABEL_9:
    (*(void (**)(void))(*(void *)v8 + 8 * v9))();
  }

  if (*(v4 - 33) < 0) {
    operator delete(*((void **)v4 - 7));
  }
  --*(void *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 56);
  if (v10 && (*(unsigned int (**)(uint64_t))(*(void *)v10 + 32LL))(v10))
  {
    uint64_t v11 = *(void *)(a1 + 56);
    else {
      uint64_t v12 = *(const char **)a2;
    }
    xpc_object_t v14 = xpc_string_create(v12);
    if (!v14) {
      xpc_object_t v14 = xpc_null_create();
    }
    xpc_object_t object = xpc_null_create();
    (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(*(void *)v11 + 56LL))(v11, &v14, &object);
    xpc_release(object);
    xpc_release(v14);
  }

void sub_1865CC310( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
}

void *ctu::RestModule::observeProperty(uint64_t *a1, uint64_t a2, void *aBlock)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *a1;
  if (aBlock)
  {
    v7[0] = &off_189E93E08;
    v7[1] = _Block_copy(aBlock);
    uint64_t v8 = v7;
    ctu::RestModuleState::addSubscription(v4, a2, (uint64_t)v7, 0);
  }

  else
  {
    uint64_t v8 = 0LL;
    ctu::RestModuleState::addSubscription(v4, a2, (uint64_t)v7, 0);
  }

  uint64_t result = v8;
  if (v8 == v7)
  {
    uint64_t v6 = 4LL;
    uint64_t result = v7;
  }

  else
  {
    if (!v8) {
      return result;
    }
    uint64_t v6 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_1865CC418( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ctu::RestModuleState::addSubscription(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  if (!*(void *)(a3 + 24))
  {
    ctu::RestModuleState::removeSubscription(a1, a2);
    return;
  }

  uint64_t v29 = (_OWORD *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v28[0] = v8;
  v28[1] = v8;
  __int128 v27 = v8;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external( (std::string *)&v27,  *(const std::string::value_type **)a2,  *(void *)(a2 + 8));
  }

  else
  {
    __int128 v27 = *(_OWORD *)a2;
    *(void *)&v28[0] = *(void *)(a2 + 16);
  }

  uint64_t v9 = (uint64_t *)(a1 + 72);
  uint64_t v10 = (void *)v28 + 1;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v28 + 8, a3);
  object[0] = &v27;
  object[1] = (xpc_object_t)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 72);
  unint64_t v12 = *(void *)(a1 + 80);
  uint64_t v13 = v11 + 56 * v12;
  while (v12)
  {
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( (void *)(v11 + 56 * (v12 >> 1)),  (void **)&v27) & 0x80u) == 0LL)
    {
      v12 >>= 1;
    }

    else
    {
      v11 += 56 * (v12 >> 1) + 56;
      v12 += ~(v12 >> 1);
    }
  }

  if (v11 == v13)
  {
    LOBYTE(v15) = 1;
  }

  else
  {
    unsigned int v14 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v27, (void **)v11);
    unsigned int v15 = (v14 >> 7) & 1 | 0xAAAAAA00;
    if ((v14 & 0x80) == 0) {
      goto LABEL_21;
    }
  }

  uint64_t v16 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 88) == v16)
  {
    boost::container::vector<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>,boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>*,boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>>( &v26,  (char *)(a1 + 72),  (__int128 *)v11,  &v27);
  }

  else
  {
    uint64_t v17 = *v9;
    uint64_t v18 = *v9 + 56 * v16;
    if (v18 == v11)
    {
      __int128 v20 = v27;
      *(void *)(v11 + 16) = *(void *)&v28[0];
      *(_OWORD *)uint64_t v11 = v20;
      *(void *)&v28[0] = 0LL;
      __int128 v27 = 0uLL;
      std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]( v17 + 56 * v16 + 24,  (uint64_t)v28 + 8);
      ++*(void *)(a1 + 80);
    }

    else
    {
      uint64_t v19 = v18 - 56;
      *(_OWORD *)uint64_t v18 = *(_OWORD *)(v18 - 56);
      *(void *)(v18 + 16) = *(void *)(v18 - 40);
      *(void *)(v18 - std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v18 - 48) = 0LL;
      *(void *)(v18 - 40) = 0LL;
      *(void *)(v18 - 56) = 0LL;
      std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100](v17 + 56 * v16 + 24, v18 - 32);
      ++*(void *)(a1 + 80);
      for (; v19 != v11; v19 -= 56LL)
        boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>::operator=( v19,  (__int128 *)(v19 - 56));
      boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>::operator=(v11, &v27);
    }
  }

void sub_1865CC7B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, uint64_t a13, uint64_t a14, xpc_object_t a15)
{
}

void ctu::RestModule::observeProperty(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

{
  ctu::RestModuleState::addSubscription(*a1, a2, a3, 1);
}

void *ctu::RestModule::observeEvent(uint64_t *a1, uint64_t a2, void *aBlock)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *a1;
  if (aBlock)
  {
    v7[0] = &off_189E93E08;
    v7[1] = _Block_copy(aBlock);
    __int128 v8 = v7;
    ctu::RestModuleState::addSubscription(v4, a2, (uint64_t)v7, 0);
  }

  else
  {
    __int128 v8 = 0LL;
    ctu::RestModuleState::addSubscription(v4, a2, (uint64_t)v7, 0);
  }

  uint64_t result = v8;
  if (v8 == v7)
  {
    uint64_t v6 = 4LL;
    uint64_t result = v7;
  }

  else
  {
    if (!v8) {
      return result;
    }
    uint64_t v6 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_1865CC904( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  unsigned int v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    unsigned int v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void *ctu::RestModule::unobserveEvent(uint64_t *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *a1;
  uint64_t v6 = 0LL;
  ctu::RestModuleState::addSubscription(v2, a2, (uint64_t)v5, 0);
  uint64_t result = v6;
  if (v6 == v5)
  {
    uint64_t v4 = 4LL;
    uint64_t result = v5;
  }

  else
  {
    if (!v6) {
      return result;
    }
    uint64_t v4 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_1865CC9E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  unsigned int v14 = a13;
  if (a13 == &a10)
  {
    uint64_t v15 = 4LL;
    unsigned int v14 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*(void *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ctu::RestModule::observeEvent(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void ctu::RestModule::setProperty(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void ctu::RestModuleState::setSubscriptionValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32LL))(v4))
  {
    else {
      uint64_t v7 = *(const char **)a2;
    }
    xpc_object_t object = xpc_string_create(v7);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    (*(void (**)(void, xpc_object_t *, uint64_t))(**(void **)(a1 + 56) + 40LL))( *(void *)(a1 + 56),  &object,  a3);
    xpc_release(object);
  }

void sub_1865CCACC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::RestModule::sendEvent(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void *ctu::RestModule::sendRequest(uint64_t **a1, uint64_t a2, uint64_t a3, void *aBlock)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  uint64_t v6 = *a1;
  if (aBlock) {
    uint64_t v7 = _Block_copy(aBlock);
  }
  else {
    uint64_t v7 = 0LL;
  }
  v10[0] = &off_189E93E08;
  v10[1] = v7;
  uint64_t v11 = v10;
  ctu::RestModuleState::sendRequest(v6, a2, a3, (uint64_t)v10);
  uint64_t result = v11;
  if (v11 == v10)
  {
    uint64_t v9 = 4LL;
    uint64_t result = v10;
  }

  else
  {
    if (!v11) {
      return result;
    }
    uint64_t v9 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_1865CCBB8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ctu::RestModuleState::sendRequest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  uint64_t v6 = a1[7];
  if (v6 && ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 32LL))(v6) & 1) != 0)
  {
    uint64_t v9 = a1[7];
    else {
      uint64_t v10 = *(const char **)a2;
    }
    xpc_object_t v33 = xpc_string_create(v10);
    if (!v33) {
      xpc_object_t v33 = xpc_null_create();
    }
    uint64_t v11 = (std::__shared_weak_count *)a1[1];
    if (!v11 || (uint64_t v12 = *a1, (v13 = std::__shared_weak_count::lock(v11)) == 0LL)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    unsigned int v14 = v13;
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      unint64_t v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v14);
    }

    uint64_t v19 = std::__shared_weak_count::lock(v14);
    if (v19)
    {
      __int128 v20 = v19;
      uint64_t v21 = (unint64_t *)&v19->__shared_weak_owners_;
      do
        unint64_t v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      uint64_t v31 = v12;
      uint64_t v32 = v19;
      std::__shared_weak_count::__release_weak(v14);
      uint64_t v23 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
      {
LABEL_27:
        std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v35, a4);
        uint64_t v38 = 0LL;
        uint64_t v26 = operator new(0x28uLL);
        void *v26 = &off_189E94040;
        std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]( (uint64_t)(v26 + 1),  (uint64_t)v35);
        uint64_t v38 = v26;
        (*(void (**)(uint64_t, xpc_object_t *, uint64_t, uint64_t *, uint64_t *, _BYTE *))(*(void *)v9 + 80LL))( v9,  &v33,  a3,  &v31,  a1 + 2,  v37);
        __int128 v27 = v38;
        if (v38 == v37)
        {
          uint64_t v28 = 4LL;
          __int128 v27 = v37;
        }

        else
        {
          if (!v38) {
            goto LABEL_32;
          }
          uint64_t v28 = 5LL;
        }

        (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_32:
        uint64_t v29 = v36;
        if (v36 == v35)
        {
          uint64_t v30 = 4LL;
          uint64_t v29 = v35;
        }

        else
        {
          if (!v36)
          {
LABEL_37:
            if (v32) {
              std::__shared_weak_count::__release_weak(v32);
            }
            xpc_release(v33);
            return;
          }

          uint64_t v30 = 5LL;
        }

        (*(void (**)(void))(*v29 + 8 * v30))();
        goto LABEL_37;
      }

      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      unsigned int v14 = v20;
    }

    else
    {
      uint64_t v31 = 0LL;
      uint64_t v32 = 0LL;
    }

    std::__shared_weak_count::__release_weak(v14);
    goto LABEL_27;
  }

  xpc_object_t object = xpc_null_create();
  uint64_t v25 = *(void *)(a4 + 24);
  if (!v25) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v25 + 48LL))(v25, &object);
  xpc_release(object);
}

void sub_1865CCE88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, xpc_object_t object, xpc_object_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ctu::RestModule::sendRequest(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void ctu::RestModule::sendRawGet(uint64_t **a1, uint64_t a2, uint64_t a3)
{
}

void ctu::RestModuleState::sendRawGet(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1[7];
  if (!v5 || ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 32LL))(v5) & 1) == 0)
  {
    std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)object, a3);
    uint64_t v23 = (std::__shared_weak_count *)a1[1];
    if (!v23 || (v24 = *a1, (uint64_t v25 = std::__shared_weak_count::lock(v23)) == 0LL)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v26 = v25;
    __int128 v27 = operator new(0x20uLL);
    std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v27, (uint64_t)object);
    uint64_t v28 = (dispatch_queue_s *)a1[2];
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      unint64_t v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
    uint64_t v31 = operator new(0x18uLL);
    *uint64_t v31 = v27;
    v31[1] = v24;
    v31[2] = v26;
    dispatch_async_f( v28,  v31,  (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ctu::RestModuleState>::execute_wrapped<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>(ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<std::function<void ()(xpc::object)> &&,std::default_delete<std::function<void ()(xpc::object)> &&>>)::{lambda(void *)#1}::__invoke);
    do
      unint64_t v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }

    xpc_object_t v33 = v38;
    if (v38 == object)
    {
      uint64_t v34 = 4LL;
      xpc_object_t v33 = object;
    }

    else
    {
      if (!v38) {
        return;
      }
      uint64_t v34 = 5LL;
    }

    (*((void (**)(void))*v33 + v34))();
    return;
  }

  else {
    uint64_t v7 = *(const char **)a2;
  }
  object[0] = xpc_string_create(v7);
  if (!object[0]) {
    object[0] = xpc_null_create();
  }
  __int128 v8 = (std::__shared_weak_count *)a1[1];
  if (!v8 || (uint64_t v9 = a1[7], v10 = *a1, (v11 = std::__shared_weak_count::lock(v8)) == 0LL)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v12 = v11;
  p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
  do
    unint64_t v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  uint64_t v15 = (unint64_t *)&v11->__shared_owners_;
  do
    unint64_t v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v12);
  }

  uint64_t v17 = std::__shared_weak_count::lock(v12);
  if (!v17)
  {
    uint64_t v35 = 0LL;
    uint64_t v36 = 0LL;
    goto LABEL_37;
  }

  unint64_t v18 = v17;
  uint64_t v19 = (unint64_t *)&v17->__shared_weak_owners_;
  do
    unint64_t v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  uint64_t v35 = v10;
  uint64_t v36 = v17;
  std::__shared_weak_count::__release_weak(v12);
  uint64_t v21 = (unint64_t *)&v18->__shared_owners_;
  do
    unint64_t v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    uint64_t v12 = v18;
LABEL_37:
    std::__shared_weak_count::__release_weak(v12);
  }

  (*(void (**)(uint64_t, xpc_object_t *, uint64_t *, uint64_t *, uint64_t))(*(void *)v9 + 72LL))( v9,  object,  &v35,  a1 + 2,  a3);
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  xpc_release(object[0]);
}

void sub_1865CD1E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ctu::RestModule::sendRawSet(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void ctu::RestModuleState::sendRawSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32LL))(v4))
  {
    else {
      uint64_t v7 = *(const char **)a2;
    }
    xpc_object_t object = xpc_string_create(v7);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    (*(void (**)(void, xpc_object_t *, uint64_t))(**(void **)(a1 + 56) + 40LL))( *(void *)(a1 + 56),  &object,  a3);
    xpc_release(object);
  }

void sub_1865CD2D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::RestModule::sendRawPush(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void ctu::RestModuleState::sendRawPush(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32LL))(v4))
  {
    else {
      uint64_t v7 = *(const char **)a2;
    }
    xpc_object_t object = xpc_string_create(v7);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    (*(void (**)(void, xpc_object_t *, uint64_t))(**(void **)(a1 + 56) + 48LL))( *(void *)(a1 + 56),  &object,  a3);
    xpc_release(object);
  }

void sub_1865CD394( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::RestModule::sendRawPop(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void ctu::RestModuleState::sendRawPop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32LL))(v4))
  {
    else {
      uint64_t v7 = *(const char **)a2;
    }
    xpc_object_t object = xpc_string_create(v7);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    (*(void (**)(void, xpc_object_t *, uint64_t))(**(void **)(a1 + 56) + 56LL))( *(void *)(a1 + 56),  &object,  a3);
    xpc_release(object);
  }

void sub_1865CD450( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::RestModule::sendRawNotify(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void ctu::RestModuleState::sendRawNotify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32LL))(v4))
  {
    else {
      uint64_t v7 = *(const char **)a2;
    }
    xpc_object_t object = xpc_string_create(v7);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    (*(void (**)(void, xpc_object_t *, uint64_t))(**(void **)(a1 + 56) + 64LL))( *(void *)(a1 + 56),  &object,  a3);
    xpc_release(object);
  }

void sub_1865CD50C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::RestModule::connect(uint64_t *a1, xpc_object_t *a2)
{
  uint64_t v2 = *a1;
  xpc_object_t object = *a2;
  *a2 = xpc_null_create();
  ctu::rest::RestXpcConnector::create(&object, &v7);
  ctu::RestModuleState::connect(v2, &v7);
  unsigned int v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  xpc_release(object);
}

void sub_1865CD5BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
}

void ctu::RestModuleState::connect(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100]( exception,  "RestModule::connect cannot be called with a null connector");
    __cxa_throw(exception, (struct type_info *)off_189E93138, MEMORY[0x189614258]);
  }

  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4 || (v6 = *(void *)a1, (uint64_t v7 = std::__shared_weak_count::lock(v4)) == 0LL)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  __int128 v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    unint64_t v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    unint64_t v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }

  std::string::operator=((std::string *)(v2 + 32), (const std::string *)(a1 + 32));
  uint64_t v13 = operator new(0x30uLL);
  v13[1] = 0LL;
  void v13[2] = 0LL;
  v13[3] = &off_189E93F38;
  *uint64_t v13 = off_189E93EE8;
  v13[4] = v6;
  v13[5] = v8;
  *(void *)&__int128 handler = v13 + 3;
  *((void *)&handler + 1) = v13;
  std::shared_ptr<ctu::rest::RestConnectorDelegateBase>::operator=[abi:ne180100]<ctu::rest::RestConnectorDelegate<ctu::RestModuleState>,void>( v2 + 56,  &handler);
  unint64_t v14 = (std::__shared_weak_count *)*((void *)&handler + 1);
  if (*((void *)&handler + 1))
  {
    uint64_t v15 = (unint64_t *)(*((void *)&handler + 1) + 8LL);
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

  xpc_object_t v17 = *(xpc_object_t *)(v2 + 24);
  if (v17) {
    xpc_retain(*(xpc_object_t *)(v2 + 24));
  }
  else {
    xpc_object_t v17 = xpc_null_create();
  }
  unint64_t v18 = *(dispatch_queue_s **)(a1 + 16);
  if (v18) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 16));
  }
  uint64_t v20 = *(void *)(v2 + 8);
  uint64_t v19 = *(std::__shared_weak_count **)(v2 + 16);
  uint64_t v35 = v20;
  if (!v19 || (uint64_t v21 = std::__shared_weak_count::lock(v19), (v36 = v21) == 0LL)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v22 = v21;
  uint64_t v23 = (_xpc_connection_s **)(v2 + 72);
  uint64_t v24 = (unint64_t *)&v21->__shared_weak_owners_;
  do
    unint64_t v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  xpc_object_t v44 = v17;
  if (v17) {
    xpc_retain(v17);
  }
  else {
    xpc_object_t v44 = xpc_null_create();
  }
  ctu::XpcClientHelper::setServer_internal(v23, &v44);
  xpc_release(v44);
  if (MEMORY[0x186E3CD4C](*v23) == MEMORY[0x1895F9238])
  {
    uint64_t v26 = *v23;
    *(void *)&__int128 handler = MEMORY[0x1895F87A8];
    *((void *)&handler + 1) = 1174405120LL;
    uint64_t v38 = ___ZN3ctu15XpcClientHelper9setServerINS_4rest16RestXpcConnectorEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke;
    uint64_t v39 = &__block_descriptor_tmp_0;
    uint64_t v40 = v23;
    uint64_t v41 = v20;
    __int128 v42 = v22;
    do
      unint64_t v27 = __ldxr(v24);
    while (__stxr(v27 + 1, v24));
    uint64_t v43 = v26;
    xpc_connection_set_event_handler(v26, &handler);
    xpc_connection_set_target_queue(v26, v18);
    xpc_connection_resume(v26);
    if (v42) {
      std::__shared_weak_count::__release_weak(v42);
    }
  }

  std::__shared_weak_count::__release_weak(v22);
  uint64_t v28 = (unint64_t *)&v22->__shared_owners_;
  do
    unint64_t v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }

  if (v18) {
    dispatch_release(v18);
  }
  xpc_release(v17);
  *(_OWORD *)uint64_t v34 = *(_OWORD *)a2;
  *a2 = 0LL;
  a2[1] = 0LL;
  ctu::RestModuleState::connectCommon(a1, v34);
  unint64_t v30 = (std::__shared_weak_count *)v34[1];
  if (v34[1])
  {
    uint64_t v31 = (unint64_t *)(v34[1] + 8);
    do
      unint64_t v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

{
  uint64_t v2;
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  dispatch_object_s *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::logic_error *exception;
  __int128 v23;
  __int128 v24;
  uint64_t v2 = *a2;
  if (!*a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100]( exception,  "RestModule::connect cannot be called with a null connector");
    __cxa_throw(exception, (struct type_info *)off_189E93138, MEMORY[0x189614258]);
  }

  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4 || (v6 = *(void *)a1, (uint64_t v7 = std::__shared_weak_count::lock(v4)) == 0LL)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  __int128 v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    unint64_t v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    unint64_t v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }

  std::string::operator=((std::string *)(v2 + 32), (const std::string *)(a1 + 32));
  uint64_t v13 = operator new(0x30uLL);
  v13[1] = 0LL;
  void v13[2] = 0LL;
  v13[3] = &off_189E93F38;
  *uint64_t v13 = off_189E93EE8;
  v13[4] = v6;
  v13[5] = v8;
  *(void *)&uint64_t v24 = v13 + 3;
  *((void *)&v24 + 1) = v13;
  std::shared_ptr<ctu::rest::RestConnectorDelegateBase>::operator=[abi:ne180100]<ctu::rest::RestConnectorDelegate<ctu::RestModuleState>,void>( v2 + 72,  &v24);
  unint64_t v14 = (std::__shared_weak_count *)*((void *)&v24 + 1);
  if (*((void *)&v24 + 1))
  {
    uint64_t v15 = (unint64_t *)(*((void *)&v24 + 1) + 8LL);
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

  xpc_object_t v17 = *(void *)(a1 + 16);
  if (v17) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 16));
  }
  unint64_t v18 = *(dispatch_object_s **)(v2 + 56);
  *(void *)(v2 + 56) = v17;
  if (v18) {
    dispatch_release(v18);
  }
  uint64_t v23 = *(_OWORD *)a2;
  *a2 = 0LL;
  a2[1] = 0LL;
  ctu::RestModuleState::connectCommon(a1, (uint64_t *)&v23);
  uint64_t v19 = (std::__shared_weak_count *)*((void *)&v23 + 1);
  if (*((void *)&v23 + 1))
  {
    uint64_t v20 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
    do
      uint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

void sub_1865CD910( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  std::__shared_weak_count::__release_weak(v22);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (v21) {
    dispatch_release(v21);
  }
  xpc_release(v20);
  _Unwind_Resume(a1);
}

void ctu::RestModule::connect(uint64_t *a1, uint64_t *a2)
{
}

{
  ctu::RestModuleState::connect(*a1, a2);
}

void sub_1865CDBA0(_Unwind_Exception *a1)
{
}

uint64_t ctu::RestModule::disconnect(ctu::RestModule *this)
{
  uint64_t result = *(void *)(*(void *)this + 56LL);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 16LL))(result);
  }
  return result;
}

uint64_t ctu::RestModuleState::disconnect(ctu::RestModuleState *this)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 16LL))(result);
  }
  return result;
}

uint64_t ctu::RestModule::isConnected(ctu::RestModule *this)
{
  uint64_t result = *(void *)(*(void *)this + 56LL);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 32LL))(result);
  }
  return result;
}

uint64_t ctu::RestModuleState::isConnected(ctu::RestModuleState *this)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 32LL))(result);
  }
  return result;
}

uint64_t ctu::RestModule::flush@<X0>(ctu::RestModuleState **this@<X0>, dispatch_group_t *a2@<X8>)
{
  return ctu::RestModuleState::flush(*this, a2);
}

uint64_t ctu::RestModuleState::flush@<X0>(ctu::RestModuleState *this@<X0>, dispatch_group_t *a2@<X8>)
{
  *a2 = dispatch_group_create();
  return (*(uint64_t (**)(void, dispatch_group_t *))(**((void **)this + 7) + 24LL))( *((void *)this + 7),  a2);
}

void sub_1865CDC80(_Unwind_Exception *exception_object)
{
  if (*v1) {
    dispatch_release(*v1);
  }
  _Unwind_Resume(exception_object);
}

void ctu::RestModule::getWeakHandle(ctu::RestModule *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    *a2 = this;
    a2[1] = v2;
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  else
  {
    *a2 = this;
    a2[1] = 0LL;
  }

void ctu::RestModule::getQueue(ctu::RestModule *this@<X0>, dispatch_object_s **a2@<X8>)
{
  uint64_t v2 = *(dispatch_object_s **)(*(void *)this + 16LL);
  *a2 = v2;
  if (v2) {
    dispatch_retain(v2);
  }
}

uint64_t ctu::RestModuleState::RestModuleState( uint64_t a1, __int128 *a2, dispatch_object_s **a3, dispatch_object_s **a4)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  unint64_t v7 = *a3;
  *(void *)(a1 + 16) = *a3;
  if (v7) {
    dispatch_retain(v7);
  }
  __int128 v8 = *a4;
  *(void *)(a1 + 24) = *a4;
  if (v8) {
    dispatch_retain(v8);
  }
  uint64_t v9 = (std::string *)(a1 + 32);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v10 = *a2;
    *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v18 - 48) = *((void *)a2 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }

  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return a1;
}

void sub_1865CDDC4(_Unwind_Exception *a1)
{
}

void *ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable(void *a1)
{
  uint64_t v2 = (dispatch_object_s *)a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  unsigned int v3 = (dispatch_object_s *)a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100]( std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x189614788] + 16LL);
  return result;
}

uint64_t ctu::RestModuleState::getName(ctu::RestModuleState *this)
{
  return (uint64_t)this + 32;
}

void ctu::RestModuleState::connectCommon(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  xpc_object_t v21 = xpc_string_create("/connections");
  if (!v21) {
    xpc_object_t v21 = xpc_null_create();
  }
  xpc_object_t object = xpc_null_create();
  (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(*(void *)v4 + 48LL))(v4, &v21, &object);
  xpc_release(object);
  xpc_release(v21);
  unint64_t v5 = *(uint64_t **)(a1 + 96);
  if (v5)
  {
    uint64_t v6 = v5[1];
    if (v6)
    {
      uint64_t v7 = *v5;
      uint64_t v8 = 56 * v6;
      do
      {
        uint64_t v9 = (const char *)v7;
        uint64_t v10 = *a2;
        xpc_object_t v21 = xpc_string_create(v9);
        if (!v21) {
          xpc_object_t v21 = xpc_null_create();
        }
        xpc_object_t object = xpc_null_create();
        (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(*(void *)v10 + 48LL))(v10, &v21, &object);
        xpc_release(object);
        xpc_release(v21);
        v7 += 56LL;
        v8 -= 56LL;
      }

      while (v8);
    }
  }

  uint64_t v11 = *(void *)(a1 + 80);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 72);
    uint64_t v13 = 56 * v11;
    do
    {
      unint64_t v14 = (const char *)v12;
      uint64_t v15 = *a2;
      xpc_object_t v21 = xpc_string_create(v14);
      if (!v21) {
        xpc_object_t v21 = xpc_null_create();
      }
      xpc_object_t object = xpc_null_create();
      (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(*(void *)v15 + 48LL))(v15, &v21, &object);
      xpc_release(object);
      xpc_release(v21);
      v12 += 56LL;
      v13 -= 56LL;
    }

    while (v13);
  }

  __int128 v16 = *(_OWORD *)a2;
  *a2 = 0LL;
  a2[1] = 0LL;
  xpc_object_t v17 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v16;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

void sub_1865CE018( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
}

uint64_t ctu::RestModuleState::handleMessage()
{
  return 0LL;
}

uint64_t ctu::RestModuleState::handleGetMessage(uint64_t a1, xpc_object_t *a2, void **a3, uint64_t a4)
{
  if (!*(void *)(a1 + 96)) {
    return 0LL;
  }
  memset(&__p, 170, sizeof(__p));
  memset(v20, 0, sizeof(v20));
  xpc::dyn_cast_or_default(a2, (uint64_t)v20, &__p);
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  if (!size
    || (boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>>::find( (uint64_t)v20,  *(void ****)(a1 + 96),  (void **)&__p.__r_.__value_.__l.__data_),  uint64_t v8 = v20[0],  v20[0] == **(void **)(a1 + 96) + 56LL * *(void *)(*(void *)(a1 + 96) + 8LL)))
  {
    uint64_t v10 = 0LL;
  }

  else
  {
    uint64_t v9 = *a3;
    xpc_object_t object = v9;
    if (v9) {
      xpc_retain(v9);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    ctu::rest::createAutoReplyWithAction(a4, &v16);
    uint64_t v11 = *(void *)(v8 + 48);
    if (!v11) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, xpc_object_t *, uint64_t *))(*(void *)v11 + 48LL))(v11, &object, &v16);
    uint64_t v12 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        unint64_t v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    xpc_release(object);
    xpc_object_t object = 0LL;
    uint64_t v10 = 1LL;
  }

  return v10;
}

void sub_1865CE220( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL ctu::RestModuleState::handleNotifyMessage(ctu::RestModuleState *this, xpc_object_t *a2, void **a3)
{
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    size_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    size_t size = __p.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    BOOL v7 = 0LL;
    if ((__p.__r_.__value_.__s.__size_ & 0x80) == 0) {
      return v7;
    }
    goto LABEL_9;
  }

  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  BOOL v7 = ctu::RestModuleState::handleNotifyMessage((uint64_t)this, p_p, size, a3);
  if ((__p.__r_.__value_.__s.__size_ & 0x80) != 0) {
LABEL_9:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1865CE314( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL ctu::RestModuleState::handleNotifyMessage(uint64_t a1, void *a2, size_t a3, void **a4)
{
  uint64_t v6 = (void ***)(a1 + 72);
  if (a2)
  {
    std::string::basic_string[abi:ne180100](__p, a2, a3);
  }

  else
  {
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v14 = 0LL;
  }

  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>>::find( (uint64_t)&v15,  v6,  __p);
  uint64_t v7 = v15;
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = *(void *)(a1 + 72) + 56LL * *(void *)(a1 + 80);
  if (v7 != v8)
  {
    uint64_t v9 = *a4;
    xpc_object_t object = v9;
    if (v9) {
      xpc_retain(v9);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v10 = *(void *)(v7 + 48);
    if (!v10) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v10 + 48LL))(v10, &object);
    xpc_release(object);
  }

  return v7 != v8;
}

void sub_1865CE408( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void *std::__function::__func<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>>,void ()(xpc::object,std::shared_ptr<xpc::object>)>::~__func( void *a1)
{
  *a1 = &off_189E93D78;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void std::__function::__func<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>>,void ()(xpc::object,std::shared_ptr<xpc::object>)>::~__func( void *__p)
{
  *std::string __p = &off_189E93D78;
  uint64_t v2 = (const void *)__p[1];
  if (v2) {
    _Block_release(v2);
  }
  operator delete(__p);
}

void *std::__function::__func<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>>,void ()(xpc::object,std::shared_ptr<xpc::object>)>::__clone( uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = &off_189E93D78;
  std::__compressed_pair_elem<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,0,false>::__compressed_pair_elem[abi:ne180100]<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)> const&,0ul>( v2 + 1,  v1);
  return v2;
}

void *std::__function::__func<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>>,void ()(xpc::object,std::shared_ptr<xpc::object>)>::__clone( uint64_t a1, void *a2)
{
  *a2 = &off_189E93D78;
  return std::__compressed_pair_elem<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,0,false>::__compressed_pair_elem[abi:ne180100]<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)> const&,0ul>( a2 + 1,  (void **)(a1 + 8));
}

void std::__function::__func<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>>,void ()(xpc::object,std::shared_ptr<xpc::object>)>::destroy( uint64_t a1)
{
}

void std::__function::__func<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>>,void ()(xpc::object,std::shared_ptr<xpc::object>)>::destroy_deallocate( const void **a1)
{
}

void std::__function::__func<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>>,void ()(xpc::object,std::shared_ptr<xpc::object>)>::operator()( uint64_t a1, xpc_object_t *a2, __int128 *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  xpc_object_t object = *a2;
  *a2 = xpc_null_create();
  __int128 v8 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  (*(void (**)(uint64_t, xpc_object_t *, __int128 *))(v4 + 16))(v4, &object, &v8);
  unint64_t v5 = (std::__shared_weak_count *)*((void *)&v8 + 1);
  if (*((void *)&v8 + 1))
  {
    uint64_t v6 = (unint64_t *)(*((void *)&v8 + 1) + 8LL);
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  xpc_release(object);
}

void sub_1865CE5CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, xpc_object_t object)
{
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }

  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>>,void ()(xpc::object,std::shared_ptr<xpc::object>)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>>,void ()(xpc::object,std::shared_ptr<xpc::object>)>::target_type()
{
}

void *std::__compressed_pair_elem<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,0,false>::__compressed_pair_elem[abi:ne180100]<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)> const&,0ul>( void *a1, void **a2)
{
  unsigned int v3 = *a2;
  if (*a2) {
    unsigned int v3 = _Block_copy(v3);
  }
  *a1 = v3;
  return a1;
}

void std::__function::__alloc_func<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>>,void ()(xpc::object,std::shared_ptr<xpc::object>)>::destroy[abi:ne180100]( const void *a1)
{
  if (a1) {
    _Block_release(a1);
  }
}

void *std::__function::__func<dispatch::block<void({block_pointer})(xpc::object)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object)>>,void ()(xpc::object)>::~__func( void *a1)
{
  *a1 = &off_189E93E08;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void std::__function::__func<dispatch::block<void({block_pointer})(xpc::object)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object)>>,void ()(xpc::object)>::~__func( void *__p)
{
  *std::string __p = &off_189E93E08;
  uint64_t v2 = (const void *)__p[1];
  if (v2) {
    _Block_release(v2);
  }
  operator delete(__p);
}

void *std::__function::__func<dispatch::block<void({block_pointer})(xpc::object)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object)>>,void ()(xpc::object)>::__clone( uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = &off_189E93E08;
  std::__compressed_pair_elem<dispatch::block<void({block_pointer})(xpc::object)>,0,false>::__compressed_pair_elem[abi:ne180100]<dispatch::block<void({block_pointer})(xpc::object)> const&,0ul>( v2 + 1,  v1);
  return v2;
}

void *std::__function::__func<dispatch::block<void({block_pointer})(xpc::object)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object)>>,void ()(xpc::object)>::__clone( uint64_t a1, void *a2)
{
  *a2 = &off_189E93E08;
  return std::__compressed_pair_elem<dispatch::block<void({block_pointer})(xpc::object)>,0,false>::__compressed_pair_elem[abi:ne180100]<dispatch::block<void({block_pointer})(xpc::object)> const&,0ul>( a2 + 1,  (void **)(a1 + 8));
}

void std::__function::__func<dispatch::block<void({block_pointer})(xpc::object)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object)>>,void ()(xpc::object)>::destroy( uint64_t a1)
{
}

void std::__function::__func<dispatch::block<void({block_pointer})(xpc::object)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object)>>,void ()(xpc::object)>::destroy_deallocate( const void **a1)
{
}

void std::__function::__func<dispatch::block<void({block_pointer})(xpc::object)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object)>>,void ()(xpc::object)>::operator()( uint64_t a1, xpc_object_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  xpc_object_t object = *a2;
  *a2 = xpc_null_create();
  (*(void (**)(uint64_t, xpc_object_t *))(v2 + 16))(v2, &object);
  xpc_release(object);
}

void sub_1865CE810( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t std::__function::__func<dispatch::block<void({block_pointer})(xpc::object)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object)>>,void ()(xpc::object)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<dispatch::block<void({block_pointer})(xpc::object)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object)>>,void ()(xpc::object)>::target_type()
{
}

void *std::__compressed_pair_elem<dispatch::block<void({block_pointer})(xpc::object)>,0,false>::__compressed_pair_elem[abi:ne180100]<dispatch::block<void({block_pointer})(xpc::object)> const&,0ul>( void *a1, void **a2)
{
  unsigned int v3 = *a2;
  if (*a2) {
    unsigned int v3 = _Block_copy(v3);
  }
  *a1 = v3;
  return a1;
}

void std::__function::__alloc_func<dispatch::block<void({block_pointer})(xpc::object)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object)>>,void ()(xpc::object)>::destroy[abi:ne180100]( const void *a1)
{
  if (a1) {
    _Block_release(a1);
  }
}

void std::__shared_ptr_pointer<ctu::RestModuleState *,std::shared_ptr<ctu::RestModuleState> ctu::SharedSynchronizable<ctu::RestModuleState>::make_shared_ptr<ctu::RestModuleState>(ctu::RestModuleState*)::{lambda(ctu::RestModuleState *)#1},std::allocator<ctu::RestModuleState>>::~__shared_ptr_pointer( std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_pointer<ctu::RestModuleState *,std::shared_ptr<ctu::RestModuleState> ctu::SharedSynchronizable<ctu::RestModuleState>::make_shared_ptr<ctu::RestModuleState>(ctu::RestModuleState*)::{lambda(ctu::RestModuleState *)#1},std::allocator<ctu::RestModuleState>>::__on_zero_shared( uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ctu::RestModuleState *,std::shared_ptr<ctu::RestModuleState> ctu::SharedSynchronizable<ctu::RestModuleState>::make_shared_ptr<ctu::RestModuleState>(ctu::RestModuleState*)::{lambda(ctu::RestModuleState *)#1},std::allocator<ctu::RestModuleState>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void std::shared_ptr<ctu::RestModuleState> ctu::SharedSynchronizable<ctu::RestModuleState>::make_shared_ptr<ctu::RestModuleState>(ctu::RestModuleState*)::{lambda(ctu::RestModuleState*)#1}::operator() const(ctu::RestModuleState*)::{lambda(void *)#1}::__invoke( uint64_t a1)
{
  if (a1)
  {
    std::unique_ptr<boost::container::flat_map<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>,std::less<std::string>,void>>::reset[abi:ne180100]( (uint64_t *)(a1 + 96),  0LL);
    uint64_t v2 = *(void *)(a1 + 80);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 72) + 24LL;
      while (1)
      {
        uint64_t v4 = *(void **)(v3 + 24);
        if ((void *)v3 == v4) {
          break;
        }
        if (v4)
        {
          uint64_t v5 = 5LL;
LABEL_8:
          (*(void (**)(void))(*v4 + 8 * v5))();
        }

        v3 += 56LL;
        if (!--v2) {
          goto LABEL_12;
        }
      }

      uint64_t v4 = (void *)v3;
      uint64_t v5 = 4LL;
      goto LABEL_8;
    }

LABEL_12:
    if (*(void *)(a1 + 88)) {
      operator delete(*(void **)(a1 + 72));
    }
    std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](a1 + 56);
    uint64_t v6 = ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable((void *)a1);
    operator delete(v6);
  }

    if (*(void *)(v2 + 16)) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
  }

  (**(void (***)(unint64_t *__return_ptr, ctu::RestResourceContext *))a2)(&v38, a2);
  if (v38)
  {
    unint64_t v14 = v41;
    uint64_t v15 = *(ctu::rest::WatchableRestResourceHelper **)(v41 + 24);
    uint64_t v16 = *((void *)v15 + 1);
    ctu::rest::WatchableRestResourceHelper::cleanupExpired(v15);
    xpc_object_t v17 = *(uint64_t **)(v14 + 24);
    uint64_t v36 = v38;
    uint64_t v37 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        unint64_t v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }

    memset(__p, 170, 16);
    boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::emplace_unique<std::shared_ptr<ctu::RestResourceConnection>>( v17,  &v36,  (__n128 **)__p);
    uint64_t v20 = v37;
    if (v37)
    {
      xpc_object_t v21 = (unint64_t *)&v37->__shared_owners_;
      do
        unint64_t v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }

    uint64_t v23 = v41;
    if ((v16 != 0) != (*(void *)(*(void *)(v41 + 24) + 8LL) != 0LL)) {
      ctu::PropertyRestResource::sendWatchedResourcesNotification( (ctu::PropertyRestResource *)a1,  a2,  (const ctu::PathView *)a3);
    }
    if (*((_BYTE *)a1 + 8))
    {
      if (*(void *)(a3 + 24))
      {
        uint64_t v24 = *(void **)a3;
        unint64_t v25 = *(void *)(a3 + 16) - *(void *)a3;
        if (v25 > 1)
        {
          if (v25 - 1 >= *(void *)(a3 + 8)) {
            uint64_t v26 = *(void *)(a3 + 8);
          }
          else {
            uint64_t v26 = v25 - 1;
          }
        }

        else if (v25 >= *(void *)(a3 + 8))
        {
          uint64_t v26 = *(void *)(a3 + 8);
        }

        else
        {
          uint64_t v26 = *(void *)(a3 + 16) - *(void *)a3;
        }
      }

      else
      {
        uint64_t v24 = *(void **)a3;
        uint64_t v26 = *(void *)(a3 + 8);
      }

      memset(__p, 170, 24);
      if (v24) {
        std::string::basic_string[abi:ne180100](__p, v24, v26);
      }
      else {
        memset(__p, 0, 24);
      }
      ctu::path_join_impl((std::string *)__p, a4, a5);
      unint64_t v27 = v38;
      uint64_t v28 = (const char *)(v38 + 8);
      uint64_t v35 = xpc_string_create(v28);
      if (!v35) {
        uint64_t v35 = xpc_null_create();
      }
      if (__p[23] >= 0) {
        unint64_t v29 = __p;
      }
      else {
        unint64_t v29 = *(const char **)__p;
      }
      xpc_object_t object = xpc_string_create(v29);
      if (!object) {
        xpc_object_t object = xpc_null_create();
      }
      (*(void (**)(ctu::RestResourceContext *, unint64_t, xpc_object_t *, xpc_object_t *, uint64_t))(*(void *)a2 + 48LL))( a2,  v27,  &v35,  &object,  *(void *)(v23 + 24) + 24LL);
      xpc_release(object);
      xpc_release(v35);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
  }

  unint64_t v30 = v39;
  if (v39)
  {
    uint64_t v31 = (unint64_t *)&v39->__shared_owners_;
    do
      unint64_t v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

  return 1LL;
}

void std::unique_ptr<boost::container::flat_map<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>,std::less<std::string>,void>>::reset[abi:ne180100]( uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)v2 + 24LL;
      while (1)
      {
        uint64_t v5 = *(void **)(v4 + 24);
        if ((void *)v4 == v5) {
          break;
        }
        if (v5)
        {
          uint64_t v6 = 5LL;
LABEL_8:
          (*(void (**)(void))(*v5 + 8 * v6))();
        }

        v4 += 56LL;
        if (!--v3) {
          goto LABEL_12;
        }
      }

      uint64_t v5 = (void *)v4;
      uint64_t v6 = 4LL;
      goto LABEL_8;
    }

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x189614740] + 16LL;
  __cxa_throw(exception, MEMORY[0x1896146D0], MEMORY[0x1896142B8]);
}

uint64_t std::shared_ptr<ctu::rest::RestConnectorDelegateBase>::operator=[abi:ne180100]<ctu::rest::RestConnectorDelegate<ctu::RestModuleState>,void>( uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void std::__shared_ptr_emplace<ctu::rest::RestConnectorDelegate<ctu::RestModuleState>>::~__shared_ptr_emplace( std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_189E93EE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ctu::rest::RestConnectorDelegate<ctu::RestModuleState>>::~__shared_ptr_emplace( std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_189E93EE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<ctu::rest::RestConnectorDelegate<ctu::RestModuleState>>::__on_zero_shared( uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t ctu::rest::RestConnectorDelegate<ctu::RestModuleState>::~RestConnectorDelegate(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void ctu::rest::RestConnectorDelegate<ctu::RestModuleState>::~RestConnectorDelegate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

uint64_t ctu::rest::RestConnectorDelegate<ctu::RestModuleState>::handleMessage(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v1);
    if (v2)
    {
      __int128 v3 = v2;
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        unint64_t v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }

  return 0LL;
}

uint64_t ctu::rest::RestConnectorDelegate<ctu::RestModuleState>::handleGetMessage( uint64_t a1, xpc_object_t *a2, void **a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5) {
    return 0LL;
  }
  uint64_t v9 = std::__shared_weak_count::lock(v5);
  if (!v9) {
    return 0LL;
  }
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v18, a4);
    uint64_t Message = ctu::RestModuleState::handleGetMessage(v11, a2, a3, (uint64_t)v18);
    uint64_t v13 = v19;
    if (v19 == v18)
    {
      uint64_t v14 = 4LL;
      uint64_t v13 = v18;
      goto LABEL_10;
    }

    if (v19)
    {
      uint64_t v14 = 5LL;
LABEL_10:
      (*(void (**)(void))(*v13 + 8 * v14))();
    }
  }

  else
  {
    uint64_t Message = 0LL;
  }

  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    unint64_t v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }

  return Message;
}

void sub_1865CED54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  xpc_object_t v17 = a15;
  if (a15 == v15)
  {
    uint64_t v18 = 4LL;
    xpc_object_t v17 = &a12;
  }

  else
  {
    if (!a15) {
      goto LABEL_6;
    }
    uint64_t v18 = 5LL;
  }

  (*(void (**)(void))(*(void *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

BOOL ctu::rest::RestConnectorDelegate<ctu::RestModuleState>::handleNotifyMessage( uint64_t a1, xpc_object_t *a2, void **a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4) {
    return 0LL;
  }
  unint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return 0LL;
  }
  __int128 v8 = v7;
  uint64_t v9 = *(ctu::RestModuleState **)(a1 + 8);
  if (v9) {
    BOOL v10 = ctu::RestModuleState::handleNotifyMessage(v9, a2, a3);
  }
  else {
    BOOL v10 = 0LL;
  }
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    unint64_t v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }

  return v10;
}

void sub_1865CEE40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ctu::rest::RestConnectorDelegate<ctu::RestModuleState>::reset(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void ___ZN3ctu15XpcClientHelper9setServerINS_4rest16RestXpcConnectorEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke( void *a1, xpc_object_t a2)
{
  __int128 v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    unint64_t v5 = (void *)a1[4];
    unint64_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v15 = v6;
    if (v6)
    {
      unint64_t v7 = v6;
      __int128 v8 = (void *)a1[5];
      object[1] = v8;
      if (!v8)
      {
LABEL_21:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          unint64_t v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }

        return;
      }

      uint64_t v9 = MEMORY[0x186E3CD4C](a2);
      uint64_t v10 = MEMORY[0x1895F9250];
      if (v9 != MEMORY[0x1895F9250])
      {
        if (v9 == MEMORY[0x1895F9268] && *v5 == a1[7])
        {
          if (a2) {
            xpc_retain(a2);
          }
          else {
            a2 = xpc_null_create();
          }
          xpc_release(a2);
        }

        goto LABEL_21;
      }

      if (a2)
      {
        xpc_retain(a2);
        object[0] = a2;
      }

      else
      {
        a2 = xpc_null_create();
        object[0] = a2;
        if (!a2)
        {
          xpc_object_t v11 = xpc_null_create();
          a2 = 0LL;
          goto LABEL_16;
        }
      }

      if (MEMORY[0x186E3CD4C](a2) == v10)
      {
        xpc_retain(a2);
        goto LABEL_17;
      }

      xpc_object_t v11 = xpc_null_create();
LABEL_16:
      object[0] = v11;
LABEL_17:
      ctu::rest::RestXpcConnector::handleMessage((uint64_t)v8, object);
      xpc_release(object[0]);
      object[0] = 0LL;
      xpc_release(a2);
      unint64_t v7 = v15;
      if (!v15) {
        return;
      }
      goto LABEL_21;
    }
  }

void sub_1865CEFE4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN3ctu4rest16RestXpcConnectorEEE( uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v18 - 48) = v2;
  if (v2)
  {
    __int128 v3 = (unint64_t *)(v2 + 16);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN3ctu4rest16RestXpcConnectorEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  __int128 v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    __int128 v3 = (void *)(a1 + 24);
  }

  *__int128 v3 = 0LL;
  return a1;
}

{
  uint64_t v3;
  __int128 v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24LL))(*(void *)(a2 + 24), a1);
    }

    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16LL))(v3);
    }
  }

  else
  {
    *(void *)(a1 + 24) = 0LL;
  }

  return a1;
}

void *std::__function::__func<ctu::RestModuleState::getValueOnce(std::string &&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &>,xpc::object>::~__func( void *a1)
{
  *a1 = &off_189E93FC0;
  uint64_t v2 = a1 + 1;
  __int128 v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    __int128 v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void std::__function::__func<ctu::RestModuleState::getValueOnce(std::string &&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &>,xpc::object>::~__func( char *__p)
{
  *(void *)std::string __p = &off_189E93FC0;
  uint64_t v2 = __p + 8;
  __int128 v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    __int128 v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void *std::__function::__func<ctu::RestModuleState::getValueOnce(std::string &&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &>,xpc::object>::__clone( uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &off_189E93FC0;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1865CF1B4(_Unwind_Exception *a1)
{
}

uint64_t std::__function::__func<ctu::RestModuleState::getValueOnce(std::string &&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &>,xpc::object>::__clone( uint64_t a1, void *a2)
{
  *a2 = &off_189E93FC0;
  return std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<ctu::RestModuleState::getValueOnce(std::string &&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &>,xpc::object>::destroy( uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<ctu::RestModuleState::getValueOnce(std::string &&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &>,xpc::object>::destroy_deallocate( char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void std::__function::__func<ctu::RestModuleState::getValueOnce(std::string &&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &>,xpc::object>::operator()( uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  *a2 = xpc_null_create();
  xpc_object_t v4 = xpc_null_create();
  xpc_object_t v12 = v3;
  uint64_t v5 = MEMORY[0x1895F9250];
  if (v3 && MEMORY[0x186E3CD4C](v3) == v5)
  {
    xpc_retain(v3);
    xpc_object_t v6 = v3;
  }

  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v12 = v6;
  }

  if (MEMORY[0x186E3CD4C](v6) == v5)
  {
    object[0] = &v12;
    object[1] = "v";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v11);
    unint64_t v7 = v11;
    xpc_object_t v11 = v4;
    xpc_release(v4);
    xpc_object_t v11 = 0LL;
    xpc_object_t v6 = v12;
    xpc_object_t v4 = v7;
  }

  xpc_release(v6);
  object[0] = v4;
  xpc_object_t v8 = xpc_null_create();
  uint64_t v9 = *(void *)(a1 + 32);
  if (!v9) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v9 + 48LL))(v9, object);
  xpc_release(object[0]);
  object[0] = 0LL;
  xpc_release(v8);
  xpc_release(v3);
}

void sub_1865CF394( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

uint64_t std::__function::__func<ctu::RestModuleState::getValueOnce(std::string &&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &>,xpc::object>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::RestModuleState::getValueOnce(std::string &&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &>,xpc::object>::target_type()
{
}

xpc_object_t xpc::dict::object_proxy::operator xpc::object@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  *a2 = value;
  if (value) {
    return xpc_retain(value);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void *std::__function::__func<ctu::RestModuleState::sendRequest(std::string &&,xpc::object &&,std::function<void ()(xpc)> &&)::$_0,std::allocator<std::function<void ()(xpc)>>,xpc::object &&>::~__func( void *a1)
{
  *a1 = &off_189E94040;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void std::__function::__func<ctu::RestModuleState::sendRequest(std::string &&,xpc::object &&,std::function<void ()(xpc)> &&)::$_0,std::allocator<std::function<void ()(xpc)>>,xpc::object &&>::~__func( char *__p)
{
  *(void *)std::string __p = &off_189E94040;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void *std::__function::__func<ctu::RestModuleState::sendRequest(std::string &&,xpc::object &&,std::function<void ()(xpc)> &&)::$_0,std::allocator<std::function<void ()(xpc)>>,xpc::object &&>::__clone( uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &off_189E94040;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1865CF5F0(_Unwind_Exception *a1)
{
}

uint64_t std::__function::__func<ctu::RestModuleState::sendRequest(std::string &&,xpc::object &&,std::function<void ()(xpc)> &&)::$_0,std::allocator<std::function<void ()(xpc)>>,xpc::object &&>::__clone( uint64_t a1, void *a2)
{
  *a2 = &off_189E94040;
  return std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<ctu::RestModuleState::sendRequest(std::string &&,xpc::object &&,std::function<void ()(xpc)> &&)::$_0,std::allocator<std::function<void ()(xpc)>>,xpc::object &&>::destroy( uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  xpc_object_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    xpc_object_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<ctu::RestModuleState::sendRequest(std::string &&,xpc::object &&,std::function<void ()(xpc)> &&)::$_0,std::allocator<std::function<void ()(xpc)>>,xpc::object &&>::destroy_deallocate( char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void std::__function::__func<ctu::RestModuleState::sendRequest(std::string &&,xpc::object &&,std::function<void ()(xpc)> &&)::$_0,std::allocator<std::function<void ()(xpc)>>,xpc::object &&>::operator()( uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  *a2 = xpc_null_create();
  xpc_object_t v4 = xpc_null_create();
  xpc_object_t v12 = v3;
  uint64_t v5 = MEMORY[0x1895F9250];
  if (v3 && MEMORY[0x186E3CD4C](v3) == v5)
  {
    xpc_retain(v3);
    xpc_object_t v6 = v3;
  }

  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v12 = v6;
  }

  if (MEMORY[0x186E3CD4C](v6) == v5)
  {
    object[0] = &v12;
    object[1] = "v";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v11);
    unint64_t v7 = v11;
    xpc_object_t v11 = v4;
    xpc_release(v4);
    xpc_object_t v11 = 0LL;
    xpc_object_t v6 = v12;
    xpc_object_t v4 = v7;
  }

  xpc_release(v6);
  object[0] = v4;
  xpc_object_t v8 = xpc_null_create();
  uint64_t v9 = *(void *)(a1 + 32);
  if (!v9) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v9 + 48LL))(v9, object);
  xpc_release(object[0]);
  object[0] = 0LL;
  xpc_release(v8);
  xpc_release(v3);
}

void sub_1865CF7D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

uint64_t std::__function::__func<ctu::RestModuleState::sendRequest(std::string &&,xpc::object &&,std::function<void ()(xpc)> &&)::$_0,std::allocator<std::function<void ()(xpc)>>,xpc::object &&>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::RestModuleState::sendRequest(std::string &&,xpc::object &&,std::function<void ()(xpc)> &&)::$_0,std::allocator<std::function<void ()(xpc)>>,xpc::object &&>::target_type()
{
}

uint64_t *boost::container::dtl::value_destructor<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>,boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>::~value_destructor( uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a1 + 24;
  xpc_object_t v4 = *(void **)(*a1 + 48);
  if (v4 == (void *)v3)
  {
    uint64_t v5 = 4LL;
    xpc_object_t v4 = (void *)v3;
  }

  else
  {
    if (!v4) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  return a1;
}

void boost::container::vector<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>,boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>*,boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>>( void *a1, char *a2, __int128 *a3, __int128 *a4)
{
  unint64_t v4 = *((void *)a2 + 2);
  unint64_t v5 = *((void *)a2 + 1) + 1LL;
  if (0x249249249249249LL - v4 < v5 - v4) {
    goto LABEL_32;
  }
  unint64_t v6 = v4 >> 61;
  unint64_t v7 = 8 * v4;
  if (v6 > 4) {
    uint64_t v8 = -1LL;
  }
  else {
    uint64_t v8 = v7;
  }
  unint64_t v9 = v7 / 5;
  if (v6) {
    unint64_t v9 = v8;
  }
  if (v9 >= 0x249249249249249LL) {
    unint64_t v9 = 0x249249249249249LL;
  }
  unint64_t v10 = v5 <= v9 ? v9 : *((void *)a2 + 1) + 1LL;
  if (v10 > 0x249249249249249LL) {
LABEL_32:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  uint64_t v14 = *(char **)a2;
  uint64_t v15 = (char *)operator new(56 * v10);
  unint64_t v16 = v15;
  xpc_object_t v17 = *(char **)a2;
  uint64_t v18 = *(void *)a2 + 56LL * *((void *)a2 + 1);
  unint64_t v19 = v15;
  if (*(__int128 **)a2 != a3)
  {
    uint64_t v20 = *(__int128 **)a2;
    unint64_t v19 = v15;
    do
    {
      __int128 v21 = *v20;
      *((void *)v19 + 2) = *((void *)v20 + 2);
      *(_OWORD *)unint64_t v19 = v21;
      *((void *)v20 + 1) = 0LL;
      *((void *)v20 + 2) = 0LL;
      *(void *)uint64_t v20 = 0LL;
      std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]( (uint64_t)(v19 + 24),  (uint64_t)v20 + 24);
      uint64_t v20 = (__int128 *)((char *)v20 + 56);
      v19 += 56;
    }

    while (v20 != a3);
  }

  __int128 v22 = *a4;
  *((void *)v19 + 2) = *((void *)a4 + 2);
  *(_OWORD *)unint64_t v19 = v22;
  *((void *)a4 + 1) = 0LL;
  *((void *)a4 + 2) = 0LL;
  *(void *)a4 = 0LL;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v19 + 24), (uint64_t)a4 + 24);
  if ((__int128 *)v18 != a3)
  {
    uint64_t v23 = (uint64_t)(v19 + 80);
    uint64_t v24 = a3;
    do
    {
      __int128 v25 = *v24;
      *(void *)(v23 - 8) = *((void *)v24 + 2);
      *(_OWORD *)(v23 - 24) = v25;
      *((void *)v24 + 1) = 0LL;
      *((void *)v24 + 2) = 0LL;
      *(void *)uint64_t v24 = 0LL;
      uint64_t v26 = std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100](v23, (uint64_t)v24 + 24);
      uint64_t v24 = (__int128 *)((char *)v24 + 56);
      uint64_t v23 = v26 + 56;
    }

    while (v24 != (__int128 *)v18);
  }

  if (v17)
  {
    uint64_t v27 = *((void *)a2 + 1);
    if (v27)
    {
      uint64_t v28 = v17 + 24;
      while (1)
      {
        unint64_t v29 = (void *)v28[3];
        if (v28 == v29) {
          break;
        }
        if (v29)
        {
          uint64_t v30 = 5LL;
LABEL_26:
          (*(void (**)(void))(*v29 + 8 * v30))();
        }

        v28 += 7;
        if (!--v27) {
          goto LABEL_30;
        }
      }

      unint64_t v29 = v28;
      uint64_t v30 = 4LL;
      goto LABEL_26;
    }

LABEL_30:
    operator delete(*(void **)a2);
  }

  uint64_t v31 = *((void *)a2 + 1) + 1LL;
  *(void *)a2 = v16;
  *((void *)a2 + 1) = v31;
  *((void *)a2 + 2) = v10;
  *a1 = &v16[(char *)a3 - v14];
}

    operator delete(*(void **)a2);
  }

  uint64_t v31 = *((void *)a2 + 1) + 1LL;
  *(void *)a2 = v16;
  *((void *)a2 + 1) = v31;
  *((void *)a2 + 2) = v10;
  *a1 = &v16[(char *)a3 - v14];
}

  (*((void (**)(id, uint64_t, const void *))a6 + 2))(a6, v18, Value);
  uint64_t v30 = (std::__shared_weak_count *)v41;
  if (v41)
  {
    uint64_t v31 = (unint64_t *)(v41 + 8);
    do
      unint64_t v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

uint64_t boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>::operator=( uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  unint64_t v6 = (__int128 **)(a1 + 48);
  unint64_t v5 = *(void **)(a1 + 48);
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v18 - 48) = 0LL;
  if (v5 == (void *)(a1 + 24))
  {
    uint64_t v7 = 4LL;
    unint64_t v5 = (void *)(a1 + 24);
  }

  else
  {
    if (!v5) {
      goto LABEL_8;
    }
    uint64_t v7 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v7))();
LABEL_8:
  uint64_t v8 = a2 + 3;
  unint64_t v9 = (__int128 *)*((void *)a2 + 6);
  if (v9)
  {
    if (v9 == (__int128 *)((char *)a2 + 24))
    {
      std::__shared_weak_count *v6 = (__int128 *)(a1 + 24);
      (*(void (**)(void, uint64_t))(*(void *)*v8 + 24LL))(*v8, a1 + 24);
      return a1;
    }

    std::__shared_weak_count *v6 = v9;
  }

  else
  {
    uint64_t v8 = (void *)(a1 + 48);
  }

  void *v8 = 0LL;
  return a1;
}

uint64_t boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>>::find( uint64_t result, void ***a2, void **a3)
{
  __int128 v4 = (void *)result;
  *(void *)xpc_object_t result = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  if (v6)
  {
    uint64_t v8 = *a2;
    do
    {
      xpc_object_t result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( &v8[7 * ((unint64_t)v6 >> 1)],  a3);
      if ((result & 0x80u) == 0LL)
      {
        unint64_t v6 = (void **)((unint64_t)v6 >> 1);
      }

      else
      {
        v8 += 7 * ((unint64_t)v6 >> 1) + 7;
        unint64_t v6 = (void **)((char *)v6 + ~((unint64_t)v6 >> 1));
      }
    }

    while (v6);
    unint64_t v5 = *a2;
    unint64_t v9 = a2[1];
  }

  else
  {
    unint64_t v9 = 0LL;
    uint64_t v8 = *a2;
  }

  void *v4 = v8;
  unint64_t v10 = &v5[7 * (void)v9];
  if (v8 != v10)
  {
    xpc_object_t result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v8);
    if ((result & 0x80) != 0) {
      void *v4 = v10;
    }
  }

  return result;
}

void boost::container::vector<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>>,boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>*,boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>>>( void *a1, char *a2, __int128 *a3, __int128 *a4)
{
  unint64_t v4 = *((void *)a2 + 2);
  unint64_t v5 = *((void *)a2 + 1) + 1LL;
  if (0x249249249249249LL - v4 < v5 - v4) {
    goto LABEL_32;
  }
  unint64_t v6 = v4 >> 61;
  unint64_t v7 = 8 * v4;
  if (v6 > 4) {
    uint64_t v8 = -1LL;
  }
  else {
    uint64_t v8 = v7;
  }
  unint64_t v9 = v7 / 5;
  if (v6) {
    unint64_t v9 = v8;
  }
  if (v9 >= 0x249249249249249LL) {
    unint64_t v9 = 0x249249249249249LL;
  }
  unint64_t v10 = v5 <= v9 ? v9 : *((void *)a2 + 1) + 1LL;
  if (v10 > 0x249249249249249LL) {
LABEL_32:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  uint64_t v14 = *(char **)a2;
  uint64_t v15 = (char *)operator new(56 * v10);
  unint64_t v16 = v15;
  xpc_object_t v17 = *(char **)a2;
  uint64_t v18 = *(void *)a2 + 56LL * *((void *)a2 + 1);
  unint64_t v19 = v15;
  if (*(__int128 **)a2 != a3)
  {
    uint64_t v20 = *(__int128 **)a2;
    unint64_t v19 = v15;
    do
    {
      __int128 v21 = *v20;
      *((void *)v19 + 2) = *((void *)v20 + 2);
      *(_OWORD *)unint64_t v19 = v21;
      *((void *)v20 + 1) = 0LL;
      *((void *)v20 + 2) = 0LL;
      *(void *)uint64_t v20 = 0LL;
      std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::__value_func[abi:ne180100]( (uint64_t)(v19 + 24),  (uint64_t)v20 + 24);
      uint64_t v20 = (__int128 *)((char *)v20 + 56);
      v19 += 56;
    }

    while (v20 != a3);
  }

  __int128 v22 = *a4;
  *((void *)v19 + 2) = *((void *)a4 + 2);
  *(_OWORD *)unint64_t v19 = v22;
  *((void *)a4 + 1) = 0LL;
  *((void *)a4 + 2) = 0LL;
  *(void *)a4 = 0LL;
  std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::__value_func[abi:ne180100]( (uint64_t)(v19 + 24),  (uint64_t)a4 + 24);
  if ((__int128 *)v18 != a3)
  {
    uint64_t v23 = (uint64_t)(v19 + 80);
    uint64_t v24 = a3;
    do
    {
      __int128 v25 = *v24;
      *(void *)(v23 - 8) = *((void *)v24 + 2);
      *(_OWORD *)(v23 - 24) = v25;
      *((void *)v24 + 1) = 0LL;
      *((void *)v24 + 2) = 0LL;
      *(void *)uint64_t v24 = 0LL;
      uint64_t v26 = std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::__value_func[abi:ne180100]( v23,  (uint64_t)v24 + 24);
      uint64_t v24 = (__int128 *)((char *)v24 + 56);
      uint64_t v23 = v26 + 56;
    }

    while (v24 != (__int128 *)v18);
  }

  if (v17)
  {
    uint64_t v27 = *((void *)a2 + 1);
    if (v27)
    {
      uint64_t v28 = v17 + 24;
      while (1)
      {
        unint64_t v29 = (void *)v28[3];
        if (v28 == v29) {
          break;
        }
        if (v29)
        {
          uint64_t v30 = 5LL;
LABEL_26:
          (*(void (**)(void))(*v29 + 8 * v30))();
        }

        v28 += 7;
        if (!--v27) {
          goto LABEL_30;
        }
      }

      unint64_t v29 = v28;
      uint64_t v30 = 4LL;
      goto LABEL_26;
    }

uint64_t std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::__value_func[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

uint64_t boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>::operator=( uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::operator=[abi:ne180100]( (void *)(a1 + 24),  (uint64_t)a2 + 24);
  return a1;
}

void *std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::operator=[abi:ne180100]( void *a1, uint64_t a2)
{
  __int128 v4 = (void *)a1[3];
  a1[3] = 0LL;
  if (v4 == a1)
  {
    uint64_t v5 = 4LL;
    __int128 v4 = a1;
  }

  else
  {
    if (!v4) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24LL))(*(void *)(a2 + 24), a1);
    }

    else
    {
      a1[3] = v6;
      *(void *)(a2 + 24) = 0LL;
    }
  }

  else
  {
    a1[3] = 0LL;
  }

  return a1;
}

void dispatch::async<void ctu::SharedSynchronizable<ctu::RestModuleState>::execute_wrapped<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>(ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<std::function<void ()(xpc::object)> &&,std::default_delete<std::function<void ()(xpc::object)> &&>>)::{lambda(void *)#1}::__invoke( void **a1)
{
  uint64_t v3 = *a1;
  xpc_object_t object = xpc_null_create();
  uint64_t v2 = v3[3];
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v2 + 48LL))(v2, &object);
  xpc_release(object);
  std::unique_ptr<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0,std::default_delete<std::function<void ()(xpc::object)> &>>::~unique_ptr[abi:ne180100](&v3);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_1865D0080( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void **std::unique_ptr<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0,std::default_delete<std::function<void ()(xpc::object)> &>>::~unique_ptr[abi:ne180100]( void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    uint64_t v3 = (void *)v2[3];
    if (v3 == v2)
    {
      uint64_t v4 = 4LL;
      uint64_t v3 = v2;
    }

    else
    {
      if (!v3)
      {
LABEL_7:
        operator delete(v2);
        return a1;
      }

      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_7;
  }

  return a1;
}

std::string *ctu::operator<<(std::string *a1, void *a2)
{
  if (a2) {
    uint64_t v3 = (const char *)[a2 UTF8String];
  }
  else {
    uint64_t v3 = "<nil>";
  }
  return ctu::LogMessageBuffer::appendString(a1, v3);
}

std::string *ctu::operator<<(std::string *this, void *a2)
{
  if (a2)
  {
    uint64_t v4 = (void *)MEMORY[0x186E3C8CC]();
    ctu::LogMessageBuffer::appendString( this,  (const char *)objc_msgSend((id)objc_msgSend(a2, "stringValue"), "UTF8String"));
    objc_autoreleasePoolPop(v4);
  }

  else
  {
    ctu::LogMessageBuffer::appendString(this, "<nil>");
  }

  return this;
}

__n128 ctu::LogMessageBuffer::createWithNSFormat@<Q0>( ctu::LogMessageBuffer *this@<X0>, uint64_t a2@<X8>, ...)
{
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v18 - 48) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)a2 = v3;
  ctu::LogMessageBuffer::vCreateWithNSFormat(this, (NSString *)va, a2);
  return result;
}

void ctu::LogMessageBuffer::vCreateWithNSFormat( ctu::LogMessageBuffer *this@<X0>, NSString *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (void *)[objc_alloc(NSString) initWithFormat:this arguments:a2];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(void *)(a3 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v18 - 48) = 0LL;
  std::string::__assign_external((std::string *)a3, (const std::string::value_type *)[v5 UTF8String]);
}

void sub_1865D026C(_Unwind_Exception *a1)
{
}

std::string *__cdecl std::string::__assign_external( std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = (char)this->__r_.__value_.__s.__size_;
  if ((v6 & 0x80000000) != 0)
  {
    std::string::size_type cap = this->__r_.__value_.__l.__cap_;
    unint64_t v9 = (cap & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }

    std::string::size_type v6 = HIBYTE(cap);
    unint64_t v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }

  else
  {
    unint64_t v7 = this;
    if (__n > 0x16)
    {
      std::string::size_type size = this->__r_.__value_.__s.__size_;
      unint64_t v9 = 22LL;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0LL, size, __n, __s);
      return this;
    }
  }

  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = this->__r_.__value_.__s.__size_;
  }

  if ((v6 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = __n;
  }
  else {
    this->__r_.__value_.__s.__size_ = __n & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

std::string *ctu::to_rle@<X0>(ctu *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  return ctu::to_rle(a3);
}

void sub_1865D03A8(_Unwind_Exception *exception_object)
{
}

std::string *ctu::to_rle(std::string *a1)
{
  std::string::size_type size = a1->__r_.__value_.__s.__size_;
  if ((char)a1->__r_.__value_.__s.__size_ < 0)
  {
    __int128 v3 = (std::string *)a1->__r_.__value_.__r.__words[0];
    std::string::size_type v4 = a1->__r_.__value_.__l.__size_;
  }

  else
  {
    __int128 v3 = a1;
    std::string::size_type v4 = a1->__r_.__value_.__s.__size_;
  }

  uint64_t v5 = 0LL;
  unint64_t v19 = v3;
  std::string::size_type v6 = (unsigned __int8 *)v3 + v4;
  uint64_t v17 = 0LL;
  uint64_t v18 = (std::string *)v6;
  v16[0] = &v17;
  v16[1] = &v19;
  unint64_t v7 = (unsigned __int8 *)v3;
  std::string v16[2] = a1;
  v16[3] = &v18;
  if ((size & 0x80) != 0) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v8 = (unsigned __int8 *)a1 + size;
  unint64_t v9 = a1;
  std::string::size_type v10 = size;
  while (v7 != v8)
  {
    if (v6 == (unsigned __int8 *)((char *)v9 + v10) || *v6 == *v7)
    {
      uint64_t v17 = ++v5;
    }

    else
    {
      ctu::to_rle(std::string &)::$_0::operator()((uint64_t)v16);
      uint64_t v17 = 1LL;
      std::string::size_type size = a1->__r_.__value_.__s.__size_;
      uint64_t v5 = 1LL;
    }

    uint64_t v18 = v3;
    std::string::size_type v6 = v7++;
    __int128 v3 = (std::string *)((char *)v3 + 1);
    if ((size & 0x80) == 0) {
      goto LABEL_5;
    }
LABEL_6:
    unint64_t v9 = (std::string *)a1->__r_.__value_.__r.__words[0];
    std::string::size_type v10 = a1->__r_.__value_.__l.__size_;
    uint64_t v8 = (unsigned __int8 *)(a1->__r_.__value_.__r.__words[0] + v10);
  }

  ctu::to_rle(std::string &)::$_0::operator()((uint64_t)v16);
  uint64_t v11 = a1->__r_.__value_.__s.__size_;
  int v12 = (char)v11;
  unint64_t v13 = (char *)a1 + v11;
  if (v12 >= 0)
  {
    uint64_t v14 = a1;
  }

  else
  {
    unint64_t v13 = (char *)(a1->__r_.__value_.__r.__words[0] + a1->__r_.__value_.__l.__size_);
    uint64_t v14 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }

  return std::string::erase(a1, (char *)v19 - (char *)v14, v13 - (char *)v19);
}

void ctu::to_rle(std::string &)::$_0::operator()(uint64_t a1)
{
  std::string::size_type v2 = **(void **)a1;
  if (v2 < 5)
  {
    uint64_t v14 = *(std::string **)(a1 + 16);
    std::string::size_type v15 = *(void *)(a1 + 16);
    std::string::replace(v14, **(void **)(a1 + 8) - v15, v2, v2, ***(_BYTE ***)(a1 + 24));
    **(void **)(a1 + 8) += **(void **)a1;
  }

  else
  {
    __int128 v3 = *(void **)(a1 + 8);
    std::string::size_type v4 = (_BYTE *)(*v3)++;
    _BYTE *v4 = 60;
    memset(&v16, 170, sizeof(v16));
    std::to_string(&v16, **(void **)a1);
    uint64_t v5 = *(std::string **)(a1 + 16);
    if ((v16.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v16.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v16.__r_.__value_.__l.__size_;
    }
    std::string::size_type v7 = *(void *)(a1 + 16);
    if ((v16.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v8 = &v16;
    }
    else {
      uint64_t v8 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    std::string::replace(v5, **(void **)(a1 + 8) - v7, size, (const std::string::value_type *)v8, size);
    std::string::size_type v9 = v16.__r_.__value_.__s.__size_;
    if ((v16.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v9 = v16.__r_.__value_.__l.__size_;
    }
    std::string::size_type v10 = *(void **)(a1 + 8);
    uint64_t v11 = (_BYTE *)(*v10 + v9);
    void *v10 = v11 + 1;
    *uint64_t v11 = 62;
    LOBYTE(v11) = ***(_BYTE ***)(a1 + 24);
    int v12 = *(void **)(a1 + 8);
    unint64_t v13 = (_BYTE *)(*v12)++;
    *unint64_t v13 = (_BYTE)v11;
  }

void sub_1865D0648( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ctu::from_rle(std::string *this@<X0>, std::string *a2@<X8>)
{
  BOOL v3 = (this->__r_.__value_.__s.__size_ & 0x80u) != 0;
  std::string::size_type size = this->__r_.__value_.__s.__size_;
  if ((size & 0x80u) != 0LL) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::size_type v6 = 0LL;
    std::string::size_type v7 = 1LL;
    do
    {
      if (v3) {
        uint64_t v8 = (std::string *)this->__r_.__value_.__r.__words[0];
      }
      else {
        uint64_t v8 = this;
      }
      int v9 = v8->__r_.__value_.__s.__data_[v6];
      if (v9 == 60)
      {
        std::string::size_type v10 = std::string::find(this, 62, v6);
        if (v10 == -1LL) {
          goto LABEL_18;
        }
        std::string::size_type v11 = v10;
        memset(&__str, 170, sizeof(__str));
        std::string::basic_string(&__str, this, v6 + 1, v10 - v6, (std::allocator<char> *)&v15);
        std::string::size_type v7 = std::stoi(&__str, 0LL, 10);
        std::string::size_type v6 = v11 + 1;
      }

      else
      {
        std::string::append(&v14, v7, v9);
        ++v6;
        std::string::size_type v7 = 1LL;
      }

      BOOL v3 = (this->__r_.__value_.__s.__size_ & 0x80u) != 0;
      std::string::size_type v12 = this->__r_.__value_.__s.__size_;
      if ((v12 & 0x80u) != 0LL) {
        std::string::size_type v12 = this->__r_.__value_.__l.__size_;
      }
    }

    while (v6 < v12);
  }

  *a2 = v14;
  a2 = &v14;
LABEL_18:
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
}

void sub_1865D07FC()
{
}

BOOL TelephonyUtilRingBufferInitialize( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  a9.i32[0] = a3;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(a9);
  v9.i16[0] = vaddlv_u8(v9);
  unsigned int v10 = v9.i32[0];
  if (v9.i32[0] >= 2u)
  {
    _TelephonyUtilDebugPrint( (uint64_t)"TelephonyUtilRingBufferInitialize",  (uint64_t)"Capacity %u is not a power of two\n",  a3,  a4,  a5,  a6,  a7,  a8,  a3);
  }

  else
  {
    *(void *)a1 = a2;
    *(_DWORD *)(a1 + 12) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = a3;
  }

  return v10 < 2;
}

uint64_t TelephonyUtilRingBufferReset(uint64_t result)
{
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t TelephonyUtilRingBufferGetLinearWriteRemaining(_DWORD *a1)
{
  int v2 = a1[2];
  int v1 = a1[3];
  unsigned int v3 = (v2 - 1) & v1;
  unsigned int v4 = a1[4];
  if (v3 > ((v2 - 1) & v4) || v4 == v1) {
    int v6 = a1[2];
  }
  else {
    int v6 = (v2 - 1) & v4;
  }
  return v6 - v3;
}

uint64_t TelephonyUtilRingBufferGetSize(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 16));
}

uint64_t TelephonyUtilRingBufferGetLinearReadRemaining(_DWORD *a1)
{
  int v1 = a1[4];
  int v2 = a1[2];
  int v3 = (v2 - 1) & v1;
  unsigned int v4 = a1[3] - v1;
  unsigned int v5 = v2 - v3;
  if (v5 >= v4) {
    return v4;
  }
  else {
    return v5;
  }
}

size_t TelephonyUtilRingBufferInsertRaw(uint64_t a1, const void *a2, unsigned int a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  uint64_t v6 = (v5 - 1) & v4;
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  else {
    int v9 = (v5 - 1) & v7;
  }
  unsigned int v10 = v9 - v6;
  if (v10 >= a3) {
    size_t v11 = a3;
  }
  else {
    size_t v11 = v10;
  }
  memcpy((void *)(*(void *)a1 + v6), a2, v11);
  *(_DWORD *)(a1 + 12) += v11;
  return v11;
}

ssize_t TelephonyUtilRingBufferInsertFDUnblockable( uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  uint64_t v8 = (v7 - 1) & v6;
  unsigned int v9 = *(_DWORD *)(a1 + 16);
  else {
    int v11 = (v7 - 1) & v9;
  }
  unsigned int v12 = v11 - v8;
  if (v12 < a4) {
    a4 = v12;
  }
  ssize_t result = TelephonyUtilUnblockableReadWithTimeout(a2, a3, (void *)(*(void *)a1 + v8), a4, a5);
  return result;
}

uint64_t TelephonyUtilRingBufferInsertTransport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *, void, uint64_t, void))(a2 + 8);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v14 = -1431655766;
  unsigned int v7 = *(_DWORD *)(a1 + 12);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  int v8 = *(_DWORD *)(a1 + 8);
  uint64_t v9 = (v8 - 1) & v7;
  BOOL v10 = v9 > ((v8 - 1) & v6) || v6 == v7;
  int v11 = v10 ? *(_DWORD *)(a1 + 8) : (v8 - 1) & v6;
  unsigned int v12 = v11 - v9;
  a3 = v12 >= a3 ? a3 : v12;
  if (!v4(a2, *(void *)a1 + v9, a3, &v14, 0LL, a4, 0LL)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = v14;
  *(_DWORD *)(a1 + 12) += v14;
  return result;
}

uint64_t TelephonyUtilRingBufferLinearize(char **a1)
{
  int v2 = *((_DWORD *)a1 + 2);
  unsigned int v3 = *((_DWORD *)a1 + 3);
  size_t v4 = (v2 - 1) & v3;
  int v5 = *((_DWORD *)a1 + 4);
  unsigned int v6 = (v2 - 1) & v5;
  int v7 = v3 - v5;
  if (v4 <= v6)
  {
    size_t v8 = v2 - v6;
    uint64_t result = (uint64_t)malloc(v8);
    if (!result) {
      return result;
    }
    BOOL v10 = (void *)result;
    int v11 = *a1;
    memcpy((void *)result, &(*a1)[v6], v8);
    memmove(&v11[v8], v11, v4);
    memcpy(*a1, v10, v8);
    free(v10);
  }

  else if (v6)
  {
    memmove(*a1, &(*a1)[v6], v3 - v5);
  }

  *((_DWORD *)a1 + 3) = v7;
  *((_DWORD *)a1 + 4) = 0;
  return 1LL;
}

size_t TelephonyUtilRingBufferExtractRaw(uint64_t a1, char *__dst, unsigned int a3)
{
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 12) - v5;
  uint64_t v8 = (v6 - 1) & v5;
  unsigned int v9 = v6 - v8;
  if (v7 >= a3) {
    size_t v10 = a3;
  }
  else {
    size_t v10 = v7;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  unsigned int v12 = (const void *)(*(void *)a1 + v8);
  if (v9 > v7 || v10 <= v11)
  {
    memcpy(__dst, v12, v10);
    size_t v11 = v10;
    if ((v10 & 0x80000000) != 0) {
      return v11;
    }
    goto LABEL_18;
  }

  memcpy(__dst, v12, v11);
  if ((v11 & 0x80000000) == 0)
  {
    unsigned int v14 = &__dst[v11];
    size_t v11 = (v10 - v11);
    memcpy(v14, *(const void **)a1, v11);
    size_t v11 = (v11 & 0x80000000) == 0LL ? v10 : v11;
    if ((v11 & 0x80000000) == 0)
    {
LABEL_18:
      int v15 = *(_DWORD *)(a1 + 12);
      int v16 = *(_DWORD *)(a1 + 16) + v10;
      *(_DWORD *)(a1 + 16) = v16;
      if (v16 == v15)
      {
        *(_DWORD *)(a1 + 12) = 0;
        *(_DWORD *)(a1 + 16) = 0;
      }
    }
  }

  return v11;
}

uint64_t TelephonyUtilRingBufferExtractFD(uint64_t a1, int __fd, unsigned int a3)
{
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 12) - v5;
  uint64_t v8 = (v6 - 1) & v5;
  unsigned int v9 = v6 - v8;
  if (v7 >= a3) {
    size_t v10 = a3;
  }
  else {
    size_t v10 = v7;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  unsigned int v12 = (char *)(*(void *)a1 + v8);
  if (v9 > v7 || v10 <= v11)
  {
    unsigned int v26 = -1431655766;
    unsigned int v14 = TelephonyUtilWriteToCompletion(__fd, v12, v10, &v26);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = v26;
    }
    if ((v15 & 0x80000000) != 0) {
      return v15;
    }
LABEL_26:
    int v21 = *(_DWORD *)(a1 + 12);
    int v22 = *(_DWORD *)(a1 + 16) + v10;
    *(_DWORD *)(a1 + 16) = v22;
    if (v22 == v21)
    {
      *(_DWORD *)(a1 + 12) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }

    return v15;
  }

  unsigned int v25 = -1431655766;
  unsigned int v16 = TelephonyUtilWriteToCompletion(__fd, v12, v11, &v25);
  if (v16) {
    uint64_t v15 = v16;
  }
  else {
    uint64_t v15 = v25;
  }
  if ((v15 & 0x80000000) == 0)
  {
    uint64_t v17 = *(char **)a1;
    int v24 = -1431655766;
    int v18 = TelephonyUtilWriteToCompletion(__fd, v17, (v10 - v11), &v24);
    int v19 = v24;
    if (v18) {
      int v19 = v18;
    }
    int v20 = v19 >= 0 ? v15 : 0;
    uint64_t v15 = (v20 + v19);
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_26;
    }
  }

  return v15;
}

uint64_t TelephonyUtilRingBufferSkip(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 12);
  int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = (v2 - v3);
  if (v4 <= a2 || (int v5 = v3 + a2, *(_DWORD *)(a1 + 16) = v5, v4 = a2, v5 == v2))
  {
    *(_DWORD *)(a1 + 12) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    return v4;
  }

  return a2;
}

uint64_t ctu::RestResourceBase::installSubResource()
{
  return 0LL;
}

uint64_t ctu::RestResource::handleMessage( ctu::RestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  (*(void (**)(xpc_object_t *__return_ptr, ctu::RestResourceContext *))(*(void *)a2 + 16LL))(&object, a2);
  int v7 = ctu::rest::asOperation(&object, v6);
  xpc_release(object);
  else {
    return (*(uint64_t (**)(ctu::RestResource *, ctu::RestResourceContext *, const ctu::PathView *))(*(void *)this + 8LL * qword_186632DD8[v7 - 1]))( this,  a2,  a3);
  }
}

void sub_1865D0DD8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t ctu::RestResource::handleRestMessage_GET()
{
  return 0LL;
}

uint64_t ctu::RestResource::handleRestMessage_SET()
{
  return 0LL;
}

uint64_t ctu::RestResource::handleRestMessage_PUSH()
{
  return 0LL;
}

uint64_t ctu::RestResource::handleRestMessage_POP()
{
  return 0LL;
}

uint64_t ctu::RestResource::handleRestMessage_NOTIFY()
{
  return 0LL;
}

const char *ctu::rest::asString(unsigned int a1)
{
  if (a1 > 2) {
    return "???";
  }
  else {
    return off_189E942A0[a1];
  }
}

double ctu::rest::AssertionHandle::AssertionHandle(ctu::rest::AssertionHandle *this, char a2)
{
  *((void *)this + 7) = 0LL;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(void *)&double result = 0x100000000LL;
  *((void *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0x100000000LL;
  *((_BYTE *)this + 72) = a2;
  return result;
}

{
  double result;
  *((void *)this + 7) = 0LL;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(void *)&double result = 0x100000000LL;
  *((void *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0x100000000LL;
  *((_BYTE *)this + 72) = a2;
  return result;
}

void ctu::rest::AssertionHandle::~AssertionHandle(ctu::rest::AssertionHandle *this)
{
  int v2 = (char *)this + 32;
  int v3 = (char *)*((void *)this + 7);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    int v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*(void *)v3 + 8 * v4))();
LABEL_6:
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  int v5 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ctu::rest::AssertionHandle::create( ctu::RestModule *a1@<X0>, const std::string *a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (std::__shared_weak_count *)operator new(0x68uLL);
  unsigned int v9 = v8;
  v8->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0LL;
  v8->__vftable = (std::__shared_weak_count_vtbl *)off_189E94260;
  v8[3].__shared_owners_ = 0LL;
  v8[1].__shared_weak_owners_ = 0LL;
  v8[2].__vftable = 0LL;
  v8[3].__shared_weak_owners_ = 0x100000000LL;
  LOBYTE(v8[4].__vftable) = a3;
  *a4 = v8 + 1;
  a4[1] = v8;
  do
    unint64_t v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    unint64_t v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)&v8[1];
  v8[1].__shared_owners_ = (uint64_t)v8;
  do
    unint64_t v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }

  uint64_t v16 = *a4;
  uint64_t v15 = a4[1];
  if (v15)
  {
    uint64_t v17 = (unint64_t *)(v15 + 16);
    do
      unint64_t v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }

  int v19 = (char *)operator new(0x50uLL);
  *((void *)v19 + 1) = 0LL;
  *((void *)v19 + 2) = 0LL;
  *(_OWORD *)(v19 + 24) = 0u;
  *(void *)int v19 = off_189E94190;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *((void *)v19 + 9) = 0LL;
  ctu::RestModule::getWeakHandle(a1, &v25);
  int v20 = (std::__shared_weak_count *)*((void *)v19 + 4);
  *(_OWORD *)(v19 + 24) = v25;
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  int v21 = (std::__shared_weak_count *)*((void *)v19 + 6);
  *((void *)v19 + 5) = v16;
  *((void *)v19 + 6) = v15;
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  std::string::operator=((std::string *)(v19 + 56), a2);
  int v22 = *(std::__shared_weak_count **)(v16 + 24);
  *(void *)(v16 + 16) = v19 + 24;
  *(void *)(v16 + 24) = v19;
  if (v22)
  {
    uint64_t v23 = (unint64_t *)&v22->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(*(ctu::rest::AssertionHandle::SubscriptionHandle **)(*a4 + 16LL));
}

void sub_1865D10F4(_Unwind_Exception *a1)
{
}

void ctu::rest::AssertionHandle::SubscriptionHandle::subscribe( ctu::rest::AssertionHandle::SubscriptionHandle *this)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  int v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    int v20 = v3;
    if (v3)
    {
      uint64_t v4 = v3;
      int v5 = *(uint64_t **)this;
      int v19 = v5;
      if (!v5)
      {
LABEL_17:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          unint64_t v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }

        return;
      }

      if (*((char *)this + 55) < 0) {
        std::string::__init_copy_ctor_external( &__p,  *((const std::string::value_type **)this + 4),  *((void *)this + 5));
      }
      else {
        std::string __p = *(std::string *)((char *)this + 32);
      }
      uint64_t v7 = *((void *)this + 2);
      uint64_t v6 = *((void *)this + 3);
      if (v6)
      {
        uint64_t v8 = (unint64_t *)(v6 + 16);
        do
          unint64_t v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }

      v21[0] = &off_189E941E0;
      v21[1] = v7;
      v21[2] = v6;
      int v22 = v21;
      ctu::RestModuleState::addSubscription(*v5, (uint64_t)&__p, (uint64_t)v21, 1);
      unint64_t v14 = v22;
      if (v22 == v21)
      {
        uint64_t v15 = 4LL;
        unint64_t v14 = v21;
      }

      else
      {
        if (!v22) {
          goto LABEL_15;
        }
        uint64_t v15 = 5LL;
      }

      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v14 + 8 * v15))(v14, v10, v11, v12, v13);
LABEL_15:
      goto LABEL_17;
    }
  }

void sub_1865D1284( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void ctu::rest::AssertionHandle::updateState(ctu::rest::AssertionHandle *this, xpc_object_t *a2)
{
  int v3 = *((_DWORD *)this + 17);
  if (v3)
  {
    if (v3 == 2)
    {
      uint64_t v4 = *((void *)this + 7);
      if (v4)
      {
        char v7 = 1;
        (*(void (**)(uint64_t, char *))(*(void *)v4 + 48LL))(v4, &v7);
      }
    }
  }

  else
  {
    uint64_t v5 = *((void *)this + 7);
    if (v5)
    {
      char v8 = 0;
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 48LL))(v5, &v8);
    }

    if (*((_BYTE *)this + 72))
    {
      uint64_t v6 = (ctu::rest::AssertionHandle::SubscriptionHandle *)*((void *)this + 2);
      if (v6) {
        ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(v6);
      }
    }
  }

void ctu::rest::read_rest_value(_DWORD *a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  xpc_object_t v9 = v3;
  uint64_t v4 = MEMORY[0x1895F9250];
  if (v3 && MEMORY[0x186E3CD4C](v3) == v4)
  {
    xpc_retain(v3);
  }

  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v9 = v3;
  }

  if (MEMORY[0x186E3CD4C](v3) == v4)
  {
    uint64_t v6 = &v9;
    char v7 = "generation";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v6, &object);
    *a1 = xpc::dyn_cast_or_default(&object, 0LL);
    xpc_release(object);
    uint64_t v6 = &v9;
    char v7 = "state";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v6, &object);
    uint64_t v5 = MEMORY[0x186E3CD4C](object);
    if (v5 == MEMORY[0x1895F92E8])
    {
      int v10 = a1[1];
      ctu::rest::detail::read_enum_string_value(&v10, &object);
      a1[1] = v10;
    }

    else if (v5 == MEMORY[0x1895F9228] || v5 == MEMORY[0x1895F9280] || v5 == MEMORY[0x1895F92F0])
    {
      a1[1] = xpc::dyn_cast_or_default(&object, 0LL);
    }

    xpc_release(object);
    xpc_object_t v3 = v9;
  }

  else
  {
    *(void *)a1 = 0LL;
  }

  xpc_release(v3);
}

void sub_1865D14D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t a12, xpc_object_t object)
{
}

void *ctu::rest::AssertionHandle::setHandler_impl(uint64_t a1, void *a2)
{
  v11[3] = *MEMORY[0x1895F89C0];
  xpc_object_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      int v10 = v9;
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, v9);
    }

    else
    {
      int v10 = (void *)(*(uint64_t (**)(void *))(*v3 + 16LL))(v3);
    }
  }

  else
  {
    int v10 = 0LL;
  }

  uint64_t v4 = a1 + 32;
  if (v9 != (void *)(a1 + 32))
  {
    uint64_t v5 = v10;
    uint64_t v6 = *(void *)(a1 + 56);
    if (v10 == v9)
    {
      if (v6 == v4)
      {
        memset(v11, 170, 24);
        (*(void (**)(void *, void *))(v9[0] + 24LL))(v9, v11);
        (*(void (**)(void *))(*v10 + 32LL))(v10);
        int v10 = 0LL;
        (*(void (**)(void, void *))(**(void **)(a1 + 56) + 24LL))(*(void *)(a1 + 56), v9);
        (*(void (**)(void))(**(void **)(a1 + 56) + 32LL))(*(void *)(a1 + 56));
        *(void *)(a1 + 56) = 0LL;
        int v10 = v9;
        (*(void (**)(void *, uint64_t))(v11[0] + 24LL))(v11, a1 + 32);
        (*(void (**)(void *))(v11[0] + 32LL))(v11);
      }

      else
      {
        (*(void (**)(void *, uint64_t))(v9[0] + 24LL))(v9, a1 + 32);
        (*(void (**)(void *))(*v10 + 32LL))(v10);
        int v10 = *(void **)(a1 + 56);
      }

      *(void *)(a1 + 56) = v4;
    }

    else if (v6 == v4)
    {
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 24LL))(a1 + 32, v9);
      (*(void (**)(void))(**(void **)(a1 + 56) + 32LL))(*(void *)(a1 + 56));
      *(void *)(a1 + 56) = v10;
      int v10 = v9;
    }

    else
    {
      int v10 = *(void **)(a1 + 56);
      *(void *)(a1 + 56) = v5;
    }
  }

  double result = v10;
  if (v10 == v9)
  {
    uint64_t v8 = 4LL;
    double result = v9;
  }

  else
  {
    if (!v10) {
      return result;
    }
    uint64_t v8 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_1865D172C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void ctu::rest::AssertionHandle::cancel(ctu::rest::AssertionHandle *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 3);
  *((void *)this + 2) = 0LL;
  *((void *)this + 3) = 0LL;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  *((_DWORD *)this + 17) = 0;
}

void ctu::rest::write_rest_value(unsigned int *a1@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t v16 = v4;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v16 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v5) == MEMORY[0x1895F9250])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }

  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t v16 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t object = xpc_int64_create(*a1);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v12 = &v16;
  uint64_t v13 = "generation";
  xpc::dict::object_proxy::operator=((uint64_t)&v12, &object, &v15);
  xpc_release(v15);
  xpc_object_t v15 = 0LL;
  xpc_release(object);
  xpc_object_t object = 0LL;
  uint64_t v7 = (int)a1[1];
  else {
    uint64_t v8 = off_189E942A0[v7];
  }
  xpc::string((xpc *)"%lld:%s", &v10, (int)a1[1], v8);
  uint64_t v12 = &v16;
  uint64_t v13 = "state";
  xpc::dict::object_proxy::operator=((uint64_t)&v12, &v10, &v11);
  xpc_release(v11);
  xpc_object_t v11 = 0LL;
  xpc_release(v10);
  xpc_object_t v10 = 0LL;
  xpc_object_t v9 = v16;
  *a2 = v16;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    *a2 = xpc_null_create();
  }
  xpc_release(v16);
}

void sub_1865D1930(_Unwind_Exception *a1)
{
}

xpc_object_t xpc::dict::object_proxy::operator=@<X0>( uint64_t a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  *a3 = *a2;
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

{
  xpc_object_t result;
  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), *a2);
  *a3 = *a2;
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

{
  xpc_object_t result;
  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), *a2);
  *a3 = *a2;
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void std::__shared_ptr_emplace<ctu::rest::AssertionHandle::SubscriptionHandle>::~__shared_ptr_emplace( std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_189E94190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ctu::rest::AssertionHandle::SubscriptionHandle>::~__shared_ptr_emplace( std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_189E94190;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<ctu::rest::AssertionHandle::SubscriptionHandle>::__on_zero_shared(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    xpc_object_t v3 = std::__shared_weak_count::lock(v2);
    uint64_t v12 = v3;
    if (v3)
    {
      xpc_object_t v4 = v3;
      xpc_object_t v5 = *(uint64_t **)(a1 + 24);
      xpc_object_t v11 = v5;
      if (v5)
      {
        if (*(char *)(a1 + 79) < 0) {
          std::string::__init_copy_ctor_external( &__p,  *(const std::string::value_type **)(a1 + 56),  *(void *)(a1 + 64));
        }
        else {
          std::string __p = *(std::string *)(a1 + 56);
        }
        ctu::RestModuleState::removeSubscription(*v5, (uint64_t)&__p);
      }

      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }

  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 48);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  xpc_object_t v9 = *(std::__shared_weak_count **)(a1 + 32);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_1865D1AD8( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

void *std::__function::__func<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1},std::allocator<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::~__func( void *a1)
{
  *a1 = &off_189E941E0;
  int v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1},std::allocator<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::~__func( void *__p)
{
  *std::string __p = &off_189E941E0;
  int v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void *std::__function::__func<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1},std::allocator<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::__clone( uint64_t a1)
{
  xpc_object_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &off_189E941E0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    xpc_object_t v5 = (unint64_t *)(v3 + 16);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  return result;
}

uint64_t std::__function::__func<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1},std::allocator<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::__clone( uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &off_189E941E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 16);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  return result;
}

void std::__function::__func<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1},std::allocator<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::destroy( uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1},std::allocator<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::destroy_deallocate( void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1},std::allocator<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::operator()( uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t object = *a2;
  *a2 = xpc_null_create();
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      unint64_t v5 = v4;
      unint64_t v6 = *(ctu::rest::AssertionHandle **)(a1 + 8);
      if (v6) {
        ctu::rest::AssertionHandle::updateState(v6, &object);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        unint64_t v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }

  xpc_release(object);
}

void sub_1865D1CD0(_Unwind_Exception *a1)
{
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    unint64_t v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }

  xpc_release(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1},std::allocator<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1},std::allocator<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::target_type()
{
}

void std::__shared_ptr_emplace<ctu::rest::AssertionHandle>::~__shared_ptr_emplace( std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_189E94260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ctu::rest::AssertionHandle>::~__shared_ptr_emplace( std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_189E94260;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<ctu::rest::AssertionHandle>::__on_zero_shared(uint64_t a1)
{
}

uint64_t TelephonyUtilTransportFree(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 48);
  if (!v1) {
    return 1LL;
  }
  uint64_t result = v1();
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v18 - 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0LL;
  return result;
}

BOOL _TelephonyUtilTransportFDIsValid(uint64_t a1)
{
  return **(_DWORD **)(a1 + 80) >= 0;
}

double TelephonyUtilTransportCreateWithFD(uint64_t a1, int a2)
{
  *(void *)(a1 + 80) = 0LL;
  *(_OWORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v18 - 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v4 = malloc(0xCuLL);
  *(void *)(a1 + 80) = v4;
  if (v4)
  {
    xpc_object_t v11 = v4;
    if (pipe(v4 + 1) < 0)
    {
      uint64_t v13 = __error();
      unint64_t v14 = strerror(*v13);
      _TelephonyUtilDebugPrint( (uint64_t)"TelephonyUtilTransportCreateWithFDPrivate",  (uint64_t)"Failed to create pipe FD's, err = %s (%u)\n",  v15,  v16,  v17,  v18,  v19,  v20,  (uint64_t)v14);
      free(v11);
      *(void *)(a1 + 80) = 0LL;
      double result = 0.0;
      *(_OWORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v18 - 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
    }

    else
    {
      *xpc_object_t v11 = a2;
      *(void *)a1 = _TelephonyUtilTransportFDWrite;
      *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = _TelephonyUtilTransportFDRead;
      *(void *)(a1 + 16) = _TelephonyUtilTransportFDUnblockRead;
      *(void *)(a1 + 24) = _TelephonyUtilTransportFDFlushRead;
      *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v18 - 48) = TelephonyUtilTransportFreeFD;
      *(void *)(a1 + 56) = _TelephonyUtilTransportFDIsValid;
    }
  }

  else
  {
    _TelephonyUtilDebugPrint( (uint64_t)"TelephonyUtilTransportCreateWithFD",  (uint64_t)"Out of memory!\n",  v5,  v6,  v7,  v8,  v9,  v10,  v21);
  }

  return result;
}

uint64_t _TelephonyUtilTransportFDWrite( uint64_t a1, void *a2, size_t __nbyte, _DWORD *a4, int a5, uint64_t a6, uint64_t a7)
{
  if (a7) {
    __TUAssertTrigger("!dDtor");
  }
  int v8 = **(_DWORD **)(a1 + 80);
  if (!a5)
  {
    int v16 = write(v8, a2, __nbyte);
    if (v16 < 0)
    {
      uint64_t v18 = __error();
      unsigned int v26 = strerror(*v18);
      _TelephonyUtilDebugPrint( (uint64_t)"_TelephonyUtilTransportFDWrite",  (uint64_t)"write returned %s (%u)\n",  v19,  v20,  v21,  v22,  v23,  v24,  (uint64_t)v26);
      return 0LL;
    }

    *a4 = v16;
    return 1LL;
  }

  int v9 = TelephonyUtilWriteToCompletion(v8, (char *)a2, __nbyte, a4);
  if (!v9) {
    return 1LL;
  }
  __int128 v25 = strerror(v9);
  _TelephonyUtilDebugPrint( (uint64_t)"_TelephonyUtilTransportFDWrite",  (uint64_t)"write to completion returned %s (%u)\n",  v10,  v11,  v12,  v13,  v14,  v15,  (uint64_t)v25);
  return 0LL;
}

uint64_t _TelephonyUtilTransportFDRead( uint64_t a1, char *a2, unsigned int a3, unsigned int *a4, int a5, unsigned int a6, uint64_t a7)
{
  if (a7) {
    __TUAssertTrigger("!dDtor");
  }
  unsigned int v9 = a3;
  uint64_t v10 = a2;
  uint64_t v11 = *(void *)(a1 + 80);
  int v12 = *(_DWORD *)v11;
  unsigned int v13 = *(_DWORD *)(v11 + 4);
  if (a5)
  {
    unsigned int v14 = a3;
    while (v14)
    {
      int v15 = TelephonyUtilUnblockableReadWithTimeout(v12, v13, v10, v14, a6);
      v10 += v15;
      v14 -= v15;
      if (v15 <= 0) {
        goto LABEL_10;
      }
    }
  }

  else
  {
    unsigned int v16 = TelephonyUtilUnblockableReadWithTimeout(*(_DWORD *)v11, *(_DWORD *)(v11 + 4), a2, a3, a6);
    if ((v16 & 0x80000000) != 0)
    {
LABEL_10:
      uint64_t v18 = __error();
      uint64_t v19 = strerror(*v18);
      _TelephonyUtilDebugPrint( (uint64_t)"_TelephonyUtilTransportFDRead",  (uint64_t)"read returned %s (%u)\n",  v20,  v21,  v22,  v23,  v24,  v25,  (uint64_t)v19);
      uint64_t result = 0LL;
      unsigned int v9 = 0;
      goto LABEL_11;
    }

    unsigned int v9 = v16;
  }

  uint64_t result = 1LL;
LABEL_11:
  *a4 = v9;
  return result;
}

BOOL _TelephonyUtilTransportFDUnblockRead(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  char __buf = 0;
  return write(*(_DWORD *)(v1 + 8), &__buf, 1uLL) == 1;
}

uint64_t _TelephonyUtilTransportFDFlushRead(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  memset(__b, 170, sizeof(__b));
  do
  {
    unsigned int v3 = -1431655766;
    uint64_t result = _TelephonyUtilTransportFDRead(a1, __b, 0x400u, &v3, 0, 0, 0LL);
  }

  while ((result & 1) != 0 && v3);
  return result;
}

uint64_t TelephonyUtilTransportFreeFD(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 80);
  if (v1)
  {
    int v2 = v1[2];
    if (v2 >= 1)
    {
      close(v2);
      v1[2] = -1;
    }

    int v3 = v1[1];
    if (v3 >= 1) {
      close(v3);
    }
    free(v1);
  }

  return 1LL;
}

BOOL ctu::isProcessRunning(const void **a1)
{
  __std::string::size_type size = 0LL;
  if (!sysctl(ctu::isProcessRunning(std::string const&)::kNames, 3u, 0LL, &__size, 0LL, 0LL))
  {
    uint64_t v10 = (char *)malloc(__size);
    if (!v10)
    {
      int v8 = "malloc failed for proc list";
      goto LABEL_3;
    }

    uint64_t v11 = v10;
    if (sysctl(ctu::isProcessRunning(std::string const&)::kNames, 3u, v10, &__size, 0LL, 0LL))
    {
      int v12 = __error();
      _TelephonyUtilDebugPrint( (uint64_t)"isProcessRunning",  (uint64_t)"second sysctl() failed with err = %d",  v13,  v14,  v15,  v16,  v17,  v18,  *v12);
    }

    else if (__size >= 0x288)
    {
      uint64_t v19 = 0LL;
      size_t v20 = __size / 0x288;
      size_t v35 = __size / 0x288;
      if (__size / 0x288 <= 1) {
        size_t v20 = 1LL;
      }
      size_t v34 = v20;
      uint64_t v21 = v11 + 243;
      BOOL v9 = 1;
      do
      {
        memset(v36, 170, sizeof(v36));
        std::string::basic_string[abi:ne180100]<0>(v36, v21);
        int v22 = SHIBYTE(v36[2]);
        uint64_t v23 = (void *)v36[0];
        if (v36[2] >= 0) {
          size_t v24 = HIBYTE(v36[2]);
        }
        else {
          size_t v24 = v36[1];
        }
        int v25 = *((char *)a1 + 23);
        if (v25 < 0)
        {
          if (v24 == -1LL) {
LABEL_42:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          uint64_t v27 = *a1;
          else {
            unint64_t v26 = (unint64_t)a1[1];
          }
        }

        else
        {
          if (v24 == -1LL) {
            goto LABEL_42;
          }
          if ((v25 & 0xF0) != 0) {
            unint64_t v26 = 16LL;
          }
          else {
            unint64_t v26 = *((unsigned __int8 *)a1 + 23);
          }
          uint64_t v27 = a1;
        }

        if (v36[2] >= 0) {
          uint64_t v28 = v36;
        }
        else {
          uint64_t v28 = (void *)v36[0];
        }
        if (v26 >= v24) {
          size_t v29 = v24;
        }
        else {
          size_t v29 = v26;
        }
        BOOL v30 = memcmp(v27, v28, v29) == 0;
        BOOL v31 = v26 == v24 && v30;
        if (v22 < 0) {
          operator delete(v23);
        }
        if (v31) {
          break;
        }
        BOOL v9 = ++v19 < v35;
        v21 += 648;
      }

      while (v34 != v19);
      goto LABEL_40;
    }

    BOOL v9 = 0;
LABEL_40:
    free(v11);
    return v9;
  }

  uint64_t v33 = *__error();
  int v8 = "first sysctl() failed with err = %d";
LABEL_3:
  _TelephonyUtilDebugPrint((uint64_t)"isProcessRunning", (uint64_t)v8, v2, v3, v4, v5, v6, v7, v33);
  return 0;
}

void sub_1865D2400( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TelephonyUtilDebugSetFlags(uint64_t result)
{
  _TelephonyUtilDebugFlags = result;
  return result;
}

__n128 TelephonyUtilDebugRegisterDelegate(__n128 *a1)
{
  __n128 result = *a1;
  gDelegate = (__int128)*a1;
  return result;
}

double TelephonyUtilDebugSetDefaults()
{
  double result = *(double *)&gDelegateDefault;
  gDelegate = gDelegateDefault;
  _TelephonyUtilDebugFlags = 10;
  return result;
}

uint64_t _TelephonyUtilDebugPrintError( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_TelephonyUtilDebugFlags & 7) != 0) {
    return gDelegate(result, a2, &a9);
  }
  return result;
}

uint64_t _TelephonyUtilDebugPrint( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_TelephonyUtilDebugFlags & 6) != 0) {
    return gDelegate(result, a2, &a9);
  }
  return result;
}

uint64_t _TelephonyUtilDebugPrintVerbose( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_TelephonyUtilDebugFlags & 4) != 0) {
    return gDelegate(result, a2, &a9);
  }
  return result;
}

uint64_t _TelephonyUtilDebugPrintBinary()
{
  if ((_TelephonyUtilDebugFlags & 8) != 0) {
    return ((uint64_t (*)(void))*(&gDelegate + 1))();
  }
  return result;
}

uint64_t _TelephonyUtilDebugPrintBinaryVerbose()
{
  if ((~_TelephonyUtilDebugFlags & 0xC) == 0) {
    return ((uint64_t (*)(void))*(&gDelegate + 1))();
  }
  return result;
}

void _TelephonyUtilDebugPrintOsLog(uint64_t a1, const char *a2, va_list a3)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    memset(__b, 170, sizeof(__b));
    vsnprintf(__b, 0x400uLL, a2, a3);
    if (qword_18C4A45D8 != -1) {
      dispatch_once(&qword_18C4A45D8, &__block_literal_global_0);
    }
    uint64_t v5 = (os_log_s *)_MergedGlobals_0;
    if (os_log_type_enabled((os_log_t)_MergedGlobals_0, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      uint64_t v7 = __b;
      _os_log_impl(&dword_1865C1000, v5, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v6, 0xCu);
    }
  }

uint64_t _TelephonyUtilUARTTransportConfigureFlowControl(uint64_t a1, int a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *(int **)(a1 + 80);
  uint64_t v26 = 0LL;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  if (ioctl(*v3, 0x40487413uLL, &v22))
  {
    uint64_t v4 = __error();
    size_t v20 = strerror(*v4);
    _TelephonyUtilDebugPrint( (uint64_t)"_TelephonyUtilUARTTransportConfigureFlowControl",  (uint64_t)"Failed to get termios options, ret = %s (%u)\n",  v5,  v6,  v7,  v8,  v9,  v10,  (uint64_t)v20);
    return 0LL;
  }

  *(void *)&__int128 v22 = v22 & 0xFFFFFFFFFFFFF0CCLL | 1;
  *((void *)&v22 + 1) &= ~1uLL;
  uint64_t v11 = 51968LL;
  if (a2) {
    uint64_t v11 = 248576LL;
  }
  *(void *)&__int128 v23 = v23 & 0xFFFFFFFFFFFC20FFLL | v11;
  *((void *)&v23 + 1) &= 0xFFFFFFFFFFFFFA77LL;
  if (ioctl(*v3, 0x80487414uLL, &v22))
  {
    int v12 = __error();
    uint64_t v21 = strerror(*v12);
    _TelephonyUtilDebugPrint( (uint64_t)"_TelephonyUtilUARTTransportConfigureFlowControl",  (uint64_t)"Failed to set termios options, ret = %s (%u)\n",  v13,  v14,  v15,  v16,  v17,  v18,  (uint64_t)v21);
    return 0LL;
  }

  return 1LL;
}

BOOL _TelephonyUtilUARTTransportConfigureBaudRate(uint64_t a1, unsigned int a2)
{
  unsigned int v12 = a2;
  int v2 = ioctl(**(_DWORD **)(a1 + 80), 0x80085402uLL, &v12);
  if (v2)
  {
    uint64_t v3 = __error();
    uint64_t v4 = v12;
    strerror(*v3);
    _TelephonyUtilDebugPrint( (uint64_t)"_TelephonyUtilUARTTransportConfigureBaudRate",  (uint64_t)"Failed to configure baud of %u, err = %s (%u)\n",  v5,  v6,  v7,  v8,  v9,  v10,  v4);
  }

  return v2 == 0;
}

BOOL _TelephonyUtilUARTTransportConfigureVMIN(uint64_t a1, unsigned int a2)
{
  unsigned int v12 = a2;
  int v2 = ioctl(**(_DWORD **)(a1 + 80), 0x80085408uLL, &v12);
  if (v2)
  {
    uint64_t v3 = __error();
    uint64_t v4 = v12;
    strerror(*v3);
    _TelephonyUtilDebugPrint( (uint64_t)"_TelephonyUtilUARTTransportConfigureVMIN",  (uint64_t)"Failed to configure VMIN of %u, err = %s (%u)\n",  v5,  v6,  v7,  v8,  v9,  v10,  v4);
  }

  return v2 == 0;
}

BOOL _TelephonyUtilUARTTransportConfigureRxQueueSize(uint64_t a1, unsigned int a2)
{
  unsigned int v12 = a2;
  int v2 = ioctl(**(_DWORD **)(a1 + 80), 0x80085409uLL, &v12);
  if (v2)
  {
    uint64_t v3 = __error();
    uint64_t v4 = v12;
    strerror(*v3);
    _TelephonyUtilDebugPrint( (uint64_t)"_TelephonyUtilUARTTransportConfigureRxQueueSize",  (uint64_t)"Failed to configure RX Queue size of %u, err = %s (%u)\n",  v5,  v6,  v7,  v8,  v9,  v10,  v4);
  }

  return v2 == 0;
}

BOOL _TelephonyUtilUARTTransportWrite( uint64_t a1, char *a2, size_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7) {
    __TUAssertTrigger("!dDtor");
  }
  int v7 = TelephonyUtilWriteToCompletion(**(_DWORD **)(a1 + 80), a2, a3, a4);
  int v8 = v7;
  if (v7)
  {
    uint64_t v9 = strerror(v7);
    _TelephonyUtilDebugPrint( (uint64_t)"_TelephonyUtilUARTTransportWrite",  (uint64_t)"write to completion returned %s (%u)\n",  v10,  v11,  v12,  v13,  v14,  v15,  (uint64_t)v9);
  }

  return v8 == 0;
}

uint64_t TelephonyUtilTransportCreateWithUARTTimeout( uint64_t (**a1)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7), unsigned int *a2)
{
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, int, uint64_t, char, int, uint64_t))malloc(0x200uLL);
  a1[10] = v4;
  if (v4)
  {
    uint64_t v11 = v4;
    _TelephonyUtilDebugPrint( (uint64_t)"TelephonyUtilTransportCreateWithUARTTimeout",  (uint64_t)"Creating with baud %u, Rx Queue size %u, local queue size %u\n",  v5,  v6,  v7,  v8,  v9,  v10,  a2[64]);
    *((_OWORD *)v11 + 30) = 0u;
    *((_OWORD *)v11 + 31) = 0u;
    *((_OWORD *)v11 + 2std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0u;
    *((_OWORD *)v11 + 29) = 0u;
    *((_OWORD *)v11 + 26) = 0u;
    *((_OWORD *)v11 + 27) = 0u;
    *((_OWORD *)v11 + 24) = 0u;
    *((_OWORD *)v11 + 25) = 0u;
    *((_OWORD *)v11 + 22) = 0u;
    *((_OWORD *)v11 + 23) = 0u;
    *((_OWORD *)v11 + 20) = 0u;
    *((_OWORD *)v11 + 21) = 0u;
    *((_OWORD *)v11 + 1std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0u;
    *((_OWORD *)v11 + 19) = 0u;
    *((_OWORD *)v11 + 16) = 0u;
    *((_OWORD *)v11 + 17) = 0u;
    *((_OWORD *)v11 + 14) = 0u;
    *((_OWORD *)v11 + 15) = 0u;
    *((_OWORD *)v11 + 12) = 0u;
    *((_OWORD *)v11 + 13) = 0u;
    *((_OWORD *)v11 + 10) = 0u;
    *((_OWORD *)v11 + 11) = 0u;
    *((_OWORD *)v11 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0u;
    *((_OWORD *)v11 + 9) = 0u;
    *((_OWORD *)v11 + 6) = 0u;
    *((_OWORD *)v11 + 7) = 0u;
    *((_OWORD *)v11 + 4) = 0u;
    *((_OWORD *)v11 + 5) = 0u;
    *((_OWORD *)v11 + 2) = 0u;
    *((_OWORD *)v11 + 3) = 0u;
    *a1 = _TelephonyUtilUARTTransportWithTimeoutWrite;
    a1[1] = (uint64_t (*)(uint64_t, uint64_t, int, uint64_t, char, int, uint64_t))_TelephonyUtilUARTTransportWithTimeoutRead;
    a1[2] = (uint64_t (*)(uint64_t, uint64_t, int, uint64_t, char, int, uint64_t))_TelephonyUtilUARTTransportWithTimeoutUnblockRead;
    a1[3] = (uint64_t (*)(uint64_t, uint64_t, int, uint64_t, char, int, uint64_t))_TelephonyUtilUARTTransportWithTimeoutFlushRead;
    a1[6] = (uint64_t (*)(uint64_t, uint64_t, int, uint64_t, char, int, uint64_t))_TelephonyUtilUARTTransportWithTimeoutFree;
    a1[7] = (uint64_t (*)(uint64_t, uint64_t, int, uint64_t, char, int, uint64_t))_TelephonyUtilUARTTransportWithTimeoutIsValid;
    *(_OWORD *)uint64_t v11 = 0u;
    *((_OWORD *)v11 + 1) = 0u;
    pthread_mutex_init((pthread_mutex_t *)((char *)v11 + 280), 0LL);
    pthread_mutex_lock((pthread_mutex_t *)((char *)v11 + 280));
    pthread_cond_init((pthread_cond_t *)((char *)v11 + 344), 0LL);
    pthread_cond_init((pthread_cond_t *)((char *)v11 + 416), 0LL);
    memcpy((char *)v11 + 8, a2, 0x110uLL);
    uint64_t Internal = _TelephonyUtilTransportUARTWithTimeoutCreateInternal(a1, v12, v13, v14, v15, v16, v17, v18);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)v11 + 280));
    return Internal;
  }

  else
  {
    _TelephonyUtilDebugPrint( (uint64_t)"TelephonyUtilTransportCreateWithUARTTimeout",  (uint64_t)"Out of memory!\n",  v5,  v6,  v7,  v8,  v9,  v10,  v21);
    return 0LL;
  }

uint64_t _TelephonyUtilUARTTransportWithTimeoutWrite( uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (a7) {
    __TUAssertTrigger("!dDtor");
  }
  uint64_t v12 = *(void *)(a1 + 80);
  pthread_mutex_lock((pthread_mutex_t *)(v12 + 280));
  *(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  int v20 = -1431655766;
  v22[0] = v13;
  v22[2] = v13;
  __int128 v23 = v13;
  v22[1] = v13;
  uint64_t v18 = a2;
  int v19 = a3;
  uint64_t v21 = a4;
  LOBYTE(v22[0]) = a5;
  DWORD1(v22[0]) = a6;
  BYTE8(v23) = 0;
  uint64_t v24 = 0LL;
  pthread_cond_init((pthread_cond_t *)((char *)v22 + 8), 0LL);
  uint64_t v14 = *(void *)(v12 + 464);
  if (v14)
  {
    do
    {
      uint64_t v15 = v14;
      uint64_t v14 = *(void *)(v14 + 88);
    }

    while (v14);
    uint64_t v16 = (void *)(v15 + 88);
  }

  else
  {
    uint64_t v16 = (void *)(v12 + 464);
  }

  void *v16 = &v18;
  pthread_cond_signal((pthread_cond_t *)(v12 + 416));
  while (v18)
    pthread_cond_wait((pthread_cond_t *)((char *)v22 + 8), (pthread_mutex_t *)(v12 + 280));
  pthread_cond_destroy((pthread_cond_t *)((char *)v22 + 8));
  pthread_mutex_unlock((pthread_mutex_t *)(v12 + 280));
  return BYTE8(v23);
}

BOOL _TelephonyUtilUARTTransportWithTimeoutRead( uint64_t a1, char *a2, unsigned int a3, unsigned int *a4, int a5, unsigned int a6, uint64_t a7)
{
  if (a7) {
    __TUAssertTrigger("!dDtor");
  }
  unsigned int v9 = a3;
  if (a5) {
    unsigned int v11 = a3;
  }
  else {
    unsigned int v11 = 1;
  }
  uint64_t v12 = *(void *)(a1 + 80);
  v23.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v23.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  if (a6 != -1)
  {
    v23.tv_sec = a6 / 0x3E8uLL;
    v23.tv_nsec = 1000000 * (a6 % 0x3E8);
  }

  *a4 = 0;
  pthread_mutex_lock((pthread_mutex_t *)(v12 + 280));
  if (*a4 < v11)
  {
    do
    {
      ++*(_DWORD *)(v12 + 504);
      do
      {
        while (1)
        {
          int v13 = *(_DWORD *)(v12 + 392);
          int v14 = v13 & 4;
          if (*(_DWORD *)(v12 + 492) != *(_DWORD *)(v12 + 496) || v14 != 0)
          {
            int v16 = 0;
            goto LABEL_18;
          }

          if (a6 != -1) {
            break;
          }
          pthread_cond_wait((pthread_cond_t *)(v12 + 344), (pthread_mutex_t *)(v12 + 280));
        }
      }

      while (!pthread_cond_timedwait_relative_np((pthread_cond_t *)(v12 + 344), (pthread_mutex_t *)(v12 + 280), &v23));
      int v13 = *(_DWORD *)(v12 + 392);
      int v14 = v13 & 4;
      int v16 = 1;
LABEL_18:
      int v17 = *(_DWORD *)(v12 + 504);
      if (v14) {
        int v18 = 1;
      }
      else {
        int v18 = v16;
      }
      *(_DWORD *)(v12 + 504) = v17 - 1;
      if (v17 == 1) {
        *(_DWORD *)(v12 + 392) = v13 & 0xFFFFFFFB;
      }
      unsigned int Raw = TelephonyUtilRingBufferExtractRaw(v12 + 480, a2, v9);
      v9 -= Raw;
      a2 += Raw;
      unsigned int v20 = *a4 + Raw;
      *a4 = v20;
      if (v20 >= v11) {
        int v21 = 1;
      }
      else {
        int v21 = v18;
      }
    }

    while (v21 != 1);
  }

  pthread_mutex_unlock((pthread_mutex_t *)(v12 + 280));
  return *a4 >= v11;
}

uint64_t _TelephonyUtilUARTTransportWithTimeoutUnblockRead(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 280));
  *(_DWORD *)(v1 + 392) |= 4u;
  pthread_cond_signal((pthread_cond_t *)(v1 + 344));
  pthread_mutex_unlock((pthread_mutex_t *)(v1 + 280));
  return 1LL;
}

uint64_t _TelephonyUtilUARTTransportWithTimeoutFlushRead(void *a1)
{
  int v2 = (pthread_mutex_t *)(a1[10] + 280LL);
  pthread_mutex_lock(v2);
  _TelephonyUtilDebugPrint( (uint64_t)"_TelephonyUtilUARTTransportWithTimeoutFlushRead",  (uint64_t)"Flushing\n",  v3,  v4,  v5,  v6,  v7,  v8,  v18);
  _TelephonyUtilUARTTransportWithTimeoutFreeInternal((uint64_t)a1);
  uint64_t Internal = _TelephonyUtilTransportUARTWithTimeoutCreateInternal(a1, v9, v10, v11, v12, v13, v14, v15);
  pthread_mutex_unlock(v2);
  return Internal;
}

uint64_t _TelephonyUtilUARTTransportWithTimeoutFree( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 80);
  if (v8)
  {
    _TelephonyUtilDebugPrint( (uint64_t)"_TelephonyUtilUARTTransportWithTimeoutFree",  (uint64_t)"Freeing\n",  a3,  a4,  a5,  a6,  a7,  a8,  v11);
    pthread_mutex_lock((pthread_mutex_t *)(v8 + 280));
    _TelephonyUtilUARTTransportWithTimeoutFreeInternal(a1);
    pthread_cond_destroy((pthread_cond_t *)(v8 + 344));
    pthread_cond_destroy((pthread_cond_t *)(v8 + 416));
    pthread_mutex_unlock((pthread_mutex_t *)(v8 + 280));
    pthread_mutex_destroy((pthread_mutex_t *)(v8 + 280));
    free((void *)v8);
  }

  return 1LL;
}

uint64_t _TelephonyUtilUARTTransportWithTimeoutIsValid(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    int v2 = (pthread_mutex_t *)(v1 + 280);
    pthread_mutex_lock((pthread_mutex_t *)(v1 + 280));
    if (*(void *)(v1 + 400)) {
      uint64_t v1 = *(void *)(v1 + 408) != 0LL;
    }
    else {
      uint64_t v1 = 0LL;
    }
    pthread_mutex_unlock(v2);
  }

  return v1;
}

uint64_t _TelephonyUtilTransportUARTWithTimeoutCreateInternal( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v59 = *MEMORY[0x1895F89C0];
  uint64_t v8 = a1[10];
  *(_DWORD *)(v8 + 392) = 0;
  uint64_t v9 = *(unsigned int *)(v8 + 272);
  if (v9 > 0x20000)
  {
    _TelephonyUtilDebugPrint( (uint64_t)"_TelephonyUtilTransportUARTWithTimeoutCreateInternal",  (uint64_t)"Receive queue size %u exceeds max %u\n",  a3,  a4,  a5,  a6,  a7,  a8,  *(unsigned int *)(v8 + 272));
    return 0LL;
  }

  uint64_t result = (uint64_t)malloc(*(unsigned int *)(v8 + 272));
  *(void *)(v8 + 472) = result;
  if (!result) {
    return result;
  }
  uint64_t result = TelephonyUtilRingBufferInitialize(v8 + 480, result, v9, v12, v13, v14, v15, v16, v17);
  if (!(_DWORD)result) {
    return result;
  }
  *(void *)&__int128 v18 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v57 = v18;
  __int128 v58 = v18;
  __int128 v55 = v18;
  __int128 v56 = v18;
  __int128 v53 = v18;
  __int128 v54 = v18;
  __int128 v51 = v18;
  __int128 v52 = v18;
  __int128 v49 = v18;
  __int128 v50 = v18;
  __int128 v47 = v18;
  __int128 v48 = v18;
  __int128 v45 = v18;
  __int128 v46 = v18;
  *(_OWORD *)std::string __str = v18;
  __int128 v44 = v18;
  else {
    snprintf(__str, 0x100uLL, "%s", (const char *)(v8 + 8));
  }
  *(_DWORD *)(v8 + 4) = 1;
  int v19 = open(__str, 2);
  *(_DWORD *)uint64_t v8 = v19;
  if (v19 <= 0)
  {
    uint64_t v27 = __error();
    strerror(*v27);
    _TelephonyUtilDebugPrint( (uint64_t)"_TelephonyUtilTransportUARTWithTimeoutCreateInternal",  (uint64_t)"failed to open node (%s), ret = %s(%u)\n",  v28,  v29,  v30,  v31,  v32,  v33,  (uint64_t)__str);
    return 0LL;
  }

  uint64_t result = _TelephonyUtilUARTTransportConfigureFlowControl((uint64_t)a1, *(_BYTE *)(v8 + 276) == 0);
  if ((_DWORD)result)
  {
    uint64_t result = _TelephonyUtilUARTTransportConfigureVMIN((uint64_t)a1, 1u);
    if ((_DWORD)result)
    {
      uint64_t result = _TelephonyUtilUARTTransportConfigureBaudRate((uint64_t)a1, *(_DWORD *)(v8 + 264));
      if ((_DWORD)result)
      {
        uint64_t result = _TelephonyUtilUARTTransportConfigureRxQueueSize((uint64_t)a1, *(_DWORD *)(v8 + 268));
        if ((_DWORD)result)
        {
          if (pthread_create( (pthread_t *)(v8 + 400),  0LL,  (void *(__cdecl *)(void *))_TelephonyUtilUARTTransportWithTimeoutReadWorker,  a1))
          {
            unsigned int v20 = __error();
            uint64_t v41 = strerror(*v20);
            _TelephonyUtilDebugPrint( (uint64_t)"_TelephonyUtilTransportUARTWithTimeoutCreateInternal",  (uint64_t)"Failed to launch read worker, ret = %s(%u)\n",  v21,  v22,  v23,  v24,  v25,  v26,  (uint64_t)v41);
          }

          else
          {
            if (!pthread_create( (pthread_t *)(v8 + 408),  0LL,  (void *(__cdecl *)(void *))_TelephonyUtilUARTTransportWithTimeoutWriteWorker,  a1)) {
              return 1LL;
            }
            size_t v34 = __error();
            __int128 v42 = strerror(*v34);
            _TelephonyUtilDebugPrint( (uint64_t)"_TelephonyUtilTransportUARTWithTimeoutCreateInternal",  (uint64_t)"Failed to launch write worker, ret = %s(%u)\n",  v35,  v36,  v37,  v38,  v39,  v40,  (uint64_t)v42);
          }

          return 0LL;
        }
      }
    }
  }

  return result;
}

uint64_t _TelephonyUtilUARTTransportWithTimeoutFreeInternal(uint64_t a1)
{
  uint64_t v1 = *(unsigned int **)(a1 + 80);
  v1[98] |= 3u;
  _TelephonyUtilUARTTransportConfigureVMIN(a1, 0);
  pthread_cond_signal((pthread_cond_t *)(v1 + 104));
  pthread_mutex_unlock((pthread_mutex_t *)(v1 + 70));
  uint64_t v13 = (void *)0xAAAAAAAAAAAAAAAALL;
  pthread_join(*((pthread_t *)v1 + 51), &v13);
  pthread_join(*((pthread_t *)v1 + 50), &v13);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 70));
  int v2 = (void *)*((void *)v1 + 59);
  if (v2) {
    free(v2);
  }
  for (uint64_t i = *((void *)v1 + 58); i; *((void *)v1 + 58) = i)
  {
    *(void *)uint64_t i = 0LL;
    *(_BYTE *)(i + 80) = 0;
    pthread_cond_signal((pthread_cond_t *)(i + 32));
    uint64_t i = *(void *)(*((void *)v1 + 58) + 88LL);
  }

  uint64_t result = *v1;
  if ((int)result >= 1)
  {
    uint64_t result = close(result);
    if ((_DWORD)result)
    {
      uint64_t v5 = __error();
      uint64_t v6 = strerror(*v5);
      return _TelephonyUtilDebugPrint( (uint64_t)"_TelephonyUtilUARTTransportWithTimeoutFreeInternal",  (uint64_t)"Failed to close, err = %s(%u)\n",  v7,  v8,  v9,  v10,  v11,  v12,  (uint64_t)v6);
    }
  }

  return result;
}

uint64_t _TelephonyUtilUARTTransportWithTimeoutReadWorker()
{
  uint64_t v0 = MEMORY[0x1895F8858]();
  uint64_t v14 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(void *)(v0 + 80);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 280));
  int v2 = *(_DWORD *)(v1 + 392);
  do
  {
    if ((v2 & 2) != 0) {
      break;
    }
    memset(__b, 170, sizeof(__b));
    unsigned int v3 = *(_DWORD *)(v1 + 488) - *(_DWORD *)(v1 + 492) + *(_DWORD *)(v1 + 496);
    size_t v4 = v3 >= 0x1000 ? 4096LL : v3;
    pthread_mutex_unlock((pthread_mutex_t *)(v1 + 280));
    LODWORD(v4) = read(**(_DWORD **)(v0 + 80), __b, v4);
    pthread_mutex_lock((pthread_mutex_t *)(v1 + 280));
    if ((v4 & 0x80000000) != 0) {
      break;
    }
    unsigned int v5 = *(_DWORD *)(v1 + 492);
    int v6 = *(_DWORD *)(v1 + 488);
    uint64_t v7 = (v6 - 1) & v5;
    unsigned int v8 = *(_DWORD *)(v1 + 496);
    BOOL v9 = v7 > ((v6 - 1) & v8) || v8 == v5;
    int v10 = v9 ? *(_DWORD *)(v1 + 488) : (v6 - 1) & v8;
    unsigned int v11 = v10 - v7;
    size_t v4 = v11 >= v4 ? v4 : v11;
    memcpy((void *)(*(void *)(v1 + 480) + v7), __b, v4);
    *(_DWORD *)(v1 + 492) += v4;
    pthread_cond_broadcast((pthread_cond_t *)(v1 + 344));
    int v2 = *(_DWORD *)(v1 + 392);
  }

  while ((v2 & 2) == 0);
  pthread_mutex_unlock((pthread_mutex_t *)(v1 + 280));
  return 0LL;
}

uint64_t _TelephonyUtilUARTTransportWithTimeoutWriteWorker(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 280));
  while (1)
  {
    while (1)
    {
      uint64_t v3 = *(void *)(v2 + 464);
      if (v3) {
        goto LABEL_6;
      }
      if ((*(_BYTE *)(v2 + 392) & 2) != 0) {
        break;
      }
      pthread_cond_wait((pthread_cond_t *)(v2 + 416), (pthread_mutex_t *)(v2 + 280));
    }

    uint64_t v3 = 0LL;
LABEL_6:
    if ((*(_BYTE *)(v2 + 392) & 2) != 0) {
      break;
    }
    *(void *)(v2 + 464) = *(void *)(v3 + 88);
    *(_BYTE *)(v3 + 80) = _TelephonyUtilUARTTransportWrite( a1,  *(char **)v3,  *(unsigned int *)(v3 + 8),  *(_DWORD **)(v3 + 16),  *(unsigned __int8 *)(v3 + 24),  0xFFFFFFFFLL,  0LL);
    *(void *)uint64_t v3 = 0LL;
    pthread_cond_broadcast((pthread_cond_t *)(v3 + 32));
  }

  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 280));
  return 0LL;
}

BOOL TelephonyUtilTransportCreateWithFile(uint64_t a1, char *__filename, char *__mode)
{
  unsigned int v5 = fopen(__filename, __mode);
  int v6 = v5;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v18 - 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0LL;
  if (v5)
  {
    *(void *)(a1 + 80) = v5;
    *(void *)a1 = _TelephonyUtilTransportFileWrite;
    *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = _TelephonyUtilTransportFileRead;
    *(void *)(a1 + 16) = _TelephonyUtilTransportFileUnblockRead;
    *(void *)(a1 + 24) = _TelephonyUtilTransportFileFlushRead;
    *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v18 - 48) = TelephonyUtilTransportFileFree;
    *(void *)(a1 + 56) = _TelephonyUtilTransportFileIsValid;
  }

  else
  {
    uint64_t v7 = __error();
    strerror(*v7);
    _TelephonyUtilDebugPrint( (uint64_t)"TelephonyUtilTransportCreateWithFile",  (uint64_t)"Failed to open file %s, args %s, err = %s (%u)\n",  v8,  v9,  v10,  v11,  v12,  v13,  (uint64_t)__filename);
  }

  return v6 != 0LL;
}

uint64_t _TelephonyUtilTransportFileWrite( uint64_t a1, void *__ptr, size_t __size, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7) {
    __TUAssertTrigger("!dDtor");
  }
  int v8 = __size;
  uint64_t v9 = *(FILE **)(a1 + 80);
  *a4 = 0;
  if ((_DWORD)__size)
  {
    if (fwrite(__ptr, __size, 1uLL, v9) != 1)
    {
      _TelephonyUtilDebugPrint( (uint64_t)"_TelephonyUtilTransportFileWrite",  (uint64_t)"Failed to write\n",  v10,  v11,  v12,  v13,  v14,  v15,  v24);
      return 0LL;
    }

    if (fflush(v9))
    {
      uint64_t v16 = __error();
      uint64_t v25 = strerror(*v16);
      _TelephonyUtilDebugPrint( (uint64_t)"_TelephonyUtilTransportFileWrite",  (uint64_t)"failed to flush, err = %s (%u)\n",  v17,  v18,  v19,  v20,  v21,  v22,  (uint64_t)v25);
      return 0LL;
    }

    *a4 = v8;
  }

  return 1LL;
}

uint64_t _TelephonyUtilTransportFileRead( uint64_t a1, char *__ptr, size_t __nitems, _DWORD *a4, char a5, uint64_t a6, uint64_t a7)
{
  if (a7) {
    __TUAssertTrigger("!dDtor");
  }
  unsigned int v9 = __nitems;
  uint64_t v11 = *(FILE **)(a1 + 80);
  *a4 = 0;
  while (1)
  {
    size_t v12 = fread(__ptr, 1uLL, v9, v11);
    if (!v12) {
      break;
    }
    size_t v13 = v12;
    *a4 += v12;
    uint64_t result = 1LL;
    v9 -= v13;
    if (v9)
    {
      __ptr += v13;
      if ((a5 & 1) != 0) {
        continue;
      }
    }

    return result;
  }

  if (feof(v11)) {
    return 1LL;
  }
  uint64_t v15 = __error();
  uint64_t v16 = strerror(*v15);
  _TelephonyUtilDebugPrint( (uint64_t)"_TelephonyUtilTransportFileRead",  (uint64_t)"failed to read, err = %s (%u)\n",  v17,  v18,  v19,  v20,  v21,  v22,  (uint64_t)v16);
  uint64_t result = 0LL;
  *a4 = 0;
  return result;
}

uint64_t _TelephonyUtilTransportFileUnblockRead( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return 0LL;
}

uint64_t _TelephonyUtilTransportFileFlushRead( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return 0LL;
}

uint64_t TelephonyUtilTransportFileFree(uint64_t a1)
{
  uint64_t v2 = *(FILE **)(a1 + 80);
  if (v2)
  {
    fclose(v2);
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v18 - 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(void *)(a1 + 80) = 0LL;
  }

  return 1LL;
}

BOOL _TelephonyUtilTransportFileIsValid(uint64_t a1)
{
  return *(void *)(a1 + 80) != 0LL;
}

const void *ctu::cf::map_adapter::copyCFStringRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  uint64_t v2 = (const void *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  uint64_t v3 = v2;
  if (v2)
  {
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 != CFStringGetTypeID())
    {
      CFRelease(v3);
      return 0LL;
    }
  }

  return v3;
}

const void *ctu::cf::map_adapter::copyCFBooleanRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  uint64_t v2 = (const void *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  uint64_t v3 = v2;
  if (v2)
  {
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 != CFBooleanGetTypeID())
    {
      CFRelease(v3);
      return 0LL;
    }
  }

  return v3;
}

const void *ctu::cf::map_adapter::copyCFNumberRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  uint64_t v2 = (const void *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  uint64_t v3 = v2;
  if (v2)
  {
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 != CFNumberGetTypeID())
    {
      CFRelease(v3);
      return 0LL;
    }
  }

  return v3;
}

const void *ctu::cf::map_adapter::copyCFArrayRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  uint64_t v2 = (const void *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  uint64_t v3 = v2;
  if (v2)
  {
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 != CFArrayGetTypeID())
    {
      CFRelease(v3);
      return 0LL;
    }
  }

  return v3;
}

const void *ctu::cf::map_adapter::copyCFDictionaryRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  uint64_t v2 = (const void *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  uint64_t v3 = v2;
  if (v2)
  {
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 != CFDictionaryGetTypeID())
    {
      CFRelease(v3);
      return 0LL;
    }
  }

  return v3;
}

const void *ctu::cf::map_adapter::copyCFDataRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  uint64_t v2 = (const void *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  uint64_t v3 = v2;
  if (v2)
  {
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 != CFDataGetTypeID())
    {
      CFRelease(v3);
      return 0LL;
    }
  }

  return v3;
}

void ctu::cf::map_adapter::getString( uint64_t (***a1)(void)@<X0>, std::string *a2@<X2>, std::string *a3@<X8>)
{
  unsigned int v5 = (__CFString *)(**a1)(a1);
  if (v5 && (char v6 = ctu::cf::assign(&__p, v5), CFRelease(v5), (v6 & 1) != 0))
  {
    int v7 = 1;
    p_p = &__p;
  }

  else
  {
    int v7 = 0;
    p_p = a2;
  }

  if ((char)p_p->__r_.__value_.__s.__size_ < 0)
  {
    BOOL v9 = v7 == 0;
    uint64_t v10 = &__p;
    if (v9) {
      uint64_t v10 = a2;
    }
    std::string::__init_copy_ctor_external(a3, p_p->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
  }

  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)&p_p->__r_.__value_.__l.__data_;
    a3->__r_.__value_.__l.__cap_ = p_p->__r_.__value_.__l.__cap_;
  }

void sub_1865D3AB4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL ctu::cf::map_adapter::getBool(ctu::cf::map_adapter *this, const __CFString *a2, BOOL a3)
{
  BOOL v3 = a3;
  BOOL v9 = a3;
  CFTypeID v4 = (const void *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  if (v4)
  {
    unsigned int v5 = v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v9, v5, v7);
      BOOL v3 = v9;
    }

    CFRelease(v5);
  }

  return v3;
}

uint64_t ctu::cf::map_adapter::getInt(ctu::cf::map_adapter *this, const __CFString *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unsigned int v9 = a3;
  CFTypeID v4 = (const void *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  if (v4)
  {
    unsigned int v5 = v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFNumberGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v9, v5, v7);
      uint64_t v3 = v9;
    }

    CFRelease(v5);
  }

  return v3;
}

double ctu::cf::map_adapter::getDouble(ctu::cf::map_adapter *this, const __CFString *a2, double a3)
{
  double v3 = a3;
  double v9 = a3;
  CFTypeID v4 = (const void *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  if (v4)
  {
    unsigned int v5 = v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFNumberGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v9, v5, v7);
      double v3 = v9;
    }

    CFRelease(v5);
  }

  return v3;
}

BOOL ctu::cf::map_adapter::getBoolLoosely(ctu::cf::map_adapter *this, const __CFString *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  char v8 = a3;
  CFTypeID v4 = (const __CFString *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  if (v4)
  {
    CFTypeID v6 = v4;
    ctu::cf::assign_loosely((ctu::cf *)&v8, v4, v5);
    CFRelease(v6);
    return v8 != 0;
  }

  return v3;
}

const __CFString *ctu::cf::map_adapter::getIntLoosely(ctu::cf::map_adapter *this, const __CFString *a2)
{
  unsigned int v5 = 0;
  uint64_t result = (const __CFString *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  if (result)
  {
    CFTypeID v4 = result;
    ctu::cf::assign_loosely((ctu::cf *)&v5, result, v3);
    CFRelease(v4);
    return (const __CFString *)v5;
  }

  return result;
}

double ctu::cf::map_adapter::getDoubleLoosely(ctu::cf::map_adapter *this, const __CFString *a2)
{
  double v6 = 0.0;
  uint64_t v2 = (const __CFString *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  if (!v2) {
    return 0.0;
  }
  CFTypeID v4 = v2;
  ctu::cf::assign_loosely((ctu::cf *)&v6, v2, v3);
  CFRelease(v4);
  return v6;
}

ctu::cf::MakeCFString *ctu::cf::MakeCFString::MakeCFString(ctu::cf::MakeCFString *this, const char *a2)
{
  *(void *)this = CFStringCreateWithCString(0LL, a2, 0x8000100u);
  return this;
}

{
  *(void *)this = CFStringCreateWithCString(0LL, a2, 0x8000100u);
  return this;
}

void ctu::cf::MakeCFString::~MakeCFString(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

ctu::cf::MakeCFString *ctu::cf::MakeCFString::MakeCFString(ctu::cf::MakeCFString *this, const void **a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  if (v3) {
    CFRetain(v3);
  }
  return this;
}

{
  const void *v3;
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  if (v3) {
    CFRetain(v3);
  }
  return this;
}

CFTypeRef *ctu::cf::MakeCFString::operator=(CFTypeRef *a1, const void **a2)
{
  if (a1 != a2)
  {
    CFRelease(*a1);
    CFTypeID v4 = *a2;
    *a1 = *a2;
    CFRetain(v4);
  }

  return a1;
}

ctu::cf::dict_adapter *ctu::cf::dict_adapter::dict_adapter( ctu::cf::dict_adapter *this, CFTypeRef cf, char a3)
{
  *(void *)this = &off_189E94320;
  *((void *)this + 1) = cf;
  if (cf && (a3 & 1) == 0) {
    CFRetain(cf);
  }
  return this;
}

{
  *(void *)this = &off_189E94320;
  *((void *)this + 1) = cf;
  if (cf && (a3 & 1) == 0) {
    CFRetain(cf);
  }
  return this;
}

ctu::cf::dict_adapter *ctu::cf::dict_adapter::dict_adapter( ctu::cf::dict_adapter *this, const ctu::cf::dict_adapter *a2)
{
  uint64_t v3 = (const void *)*((void *)a2 + 1);
  *(void *)this = &off_189E94320;
  *((void *)this + 1) = v3;
  if (v3) {
    CFRetain(v3);
  }
  return this;
}

{
  const void *v3;
  uint64_t v3 = (const void *)*((void *)a2 + 1);
  *(void *)this = &off_189E94320;
  *((void *)this + 1) = v3;
  if (v3) {
    CFRetain(v3);
  }
  return this;
}

uint64_t ctu::cf::dict_adapter::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CFTypeID v4 = *(const void **)(a1 + 8);
    if (v4) {
      CFRelease(v4);
    }
    unsigned int v5 = *(const void **)(a2 + 8);
    *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v5;
    if (v5) {
      CFRetain(v5);
    }
  }

  return a1;
}

void ctu::cf::dict_adapter::~dict_adapter(ctu::cf::dict_adapter *this)
{
  *(void *)this = &off_189E94320;
  uint64_t v1 = (const void *)*((void *)this + 1);
  if (v1) {
    CFRelease(v1);
  }
}

{
  void *v1;
  ctu::cf::dict_adapter::~dict_adapter(this);
  operator delete(v1);
}

const void *ctu::cf::dict_adapter::copyCFTypeRef(ctu::cf::dict_adapter *this, const __CFString *a2)
{
  uint64_t v2 = (const __CFDictionary *)*((void *)this + 1);
  if (!v2) {
    return 0LL;
  }
  Value = CFDictionaryGetValue(v2, a2);
  CFTypeID v4 = Value;
  if (Value) {
    CFRetain(Value);
  }
  return v4;
}

ctu::cf::plist_adapter *ctu::cf::plist_adapter::plist_adapter( ctu::cf::plist_adapter *this, CFTypeRef cf, CFTypeRef a3)
{
  *(void *)this = &off_189E94348;
  *((void *)this + 1) = cf;
  *((void *)this + 2) = a3;
  if (cf)
  {
    CFRetain(cf);
    a3 = (CFTypeRef)*((void *)this + 2);
  }

  if (a3) {
    CFRetain(a3);
  }
  return this;
}

ctu::cf::plist_adapter *ctu::cf::plist_adapter::plist_adapter( ctu::cf::plist_adapter *this, const ctu::cf::plist_adapter *a2)
{
  CFTypeID v4 = (const void *)*((void *)a2 + 1);
  uint64_t v3 = (const void *)*((void *)a2 + 2);
  *(void *)this = &off_189E94348;
  *((void *)this + 1) = v4;
  *((void *)this + 2) = v3;
  if (v4)
  {
    CFRetain(v4);
    uint64_t v3 = (const void *)*((void *)this + 2);
  }

  if (v3) {
    CFRetain(v3);
  }
  return this;
}

uint64_t ctu::cf::plist_adapter::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CFTypeID v4 = *(const void **)(a1 + 8);
    if (v4) {
      CFRelease(v4);
    }
    unsigned int v5 = *(const void **)(a1 + 16);
    if (v5) {
      CFRelease(v5);
    }
    int v7 = *(const void **)(a2 + 8);
    double v6 = *(const void **)(a2 + 16);
    *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v7;
    *(void *)(a1 + 16) = v6;
    if (v7)
    {
      CFRetain(v7);
      double v6 = *(const void **)(a1 + 16);
    }

    if (v6) {
      CFRetain(v6);
    }
  }

  return a1;
}

void ctu::cf::plist_adapter::~plist_adapter(ctu::cf::plist_adapter *this)
{
  *(void *)this = &off_189E94348;
  uint64_t v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 2);
  if (v3) {
    CFRelease(v3);
  }
}

{
  void *v1;
  ctu::cf::plist_adapter::~plist_adapter(this);
  operator delete(v1);
}

CFPropertyListRef ctu::cf::plist_adapter::copyCFTypeRef(ctu::cf::plist_adapter *this, CFStringRef key)
{
  uint64_t v2 = (const __CFString *)*((void *)this + 1);
  if (v2) {
    return CFPreferencesCopyValue(key, v2, *((CFStringRef *)this + 2), (CFStringRef)*MEMORY[0x189605190]);
  }
  else {
    return 0LL;
  }
}

uint64_t ctu::cf::assign(ctu::cf *this, CFTypeRef cf, const __CFNumber *a3)
{
  if (!cf) {
    return 0LL;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0LL;
  }
  int valuePtr = -1431655766;
  uint64_t result = CFNumberGetValue((CFNumberRef)cf, kCFNumberIntType, &valuePtr);
  if ((_DWORD)result)
  {
    *(_DWORD *)this = valuePtr;
    return 1LL;
  }

  return result;
}

{
  CFTypeID v5;
  uint64_t result;
  __int16 valuePtr;
  if (!cf) {
    return 0LL;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0LL;
  }
  int valuePtr = -21846;
  uint64_t result = CFNumberGetValue((CFNumberRef)cf, kCFNumberShortType, &valuePtr);
  if ((_DWORD)result)
  {
    *(_WORD *)this = valuePtr;
    return 1LL;
  }

  return result;
}

{
  CFTypeID v5;
  uint64_t result;
  char valuePtr;
  if (!cf) {
    return 0LL;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0LL;
  }
  int valuePtr = -86;
  uint64_t result = CFNumberGetValue((CFNumberRef)cf, kCFNumberCharType, &valuePtr);
  if ((_DWORD)result)
  {
    *(_BYTE *)this = valuePtr;
    return 1LL;
  }

  return result;
}

{
  CFTypeID v5;
  uint64_t result;
  unint64_t valuePtr;
  if (!cf) {
    return 0LL;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0LL;
  }
  int valuePtr = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = CFNumberGetValue((CFNumberRef)cf, kCFNumberLongType, &valuePtr);
  if ((_DWORD)result)
  {
    *(void *)this = valuePtr;
    return 1LL;
  }

  return result;
}

{
  CFTypeID v5;
  uint64_t result;
  unint64_t valuePtr;
  if (!cf) {
    return 0LL;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0LL;
  }
  int valuePtr = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = CFNumberGetValue((CFNumberRef)cf, kCFNumberLongLongType, &valuePtr);
  if ((_DWORD)result)
  {
    *(void *)this = valuePtr;
    return 1LL;
  }

  return result;
}

{
  CFTypeID v5;
  uint64_t result;
  int valuePtr;
  if (!cf) {
    return 0LL;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0LL;
  }
  int valuePtr = -1;
  uint64_t result = CFNumberGetValue((CFNumberRef)cf, kCFNumberFloatType, &valuePtr);
  if ((_DWORD)result)
  {
    *(_DWORD *)this = valuePtr;
    return 1LL;
  }

  return result;
}

{
  CFTypeID v5;
  uint64_t result;
  uint64_t valuePtr;
  if (!cf) {
    return 0LL;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0LL;
  }
  int valuePtr = -1LL;
  uint64_t result = CFNumberGetValue((CFNumberRef)cf, kCFNumberDoubleType, &valuePtr);
  if ((_DWORD)result)
  {
    *(void *)this = valuePtr;
    return 1LL;
  }

  return result;
}

{
  CFTypeID v5;
  uint64_t result;
  unint64_t valuePtr;
  if (!cf) {
    return 0LL;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0LL;
  }
  int valuePtr = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr);
  if ((_DWORD)result)
  {
    *(void *)this = valuePtr;
    return 1LL;
  }

  return result;
}

{
  CFTypeID v5;
  uint64_t result;
  unint64_t valuePtr;
  if (!cf) {
    return 0LL;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0LL;
  }
  int valuePtr = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr);
  if ((_DWORD)result)
  {
    *(void *)this = valuePtr;
    return 1LL;
  }

  return result;
}

{
  CFTypeID v5;
  uint64_t valuePtr;
  if (!cf) {
    return 0LL;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0LL;
  }
  int valuePtr = 0xAAAAAAAAAAAAAAAALL;
  if (!CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr) || valuePtr >= 0x100000000LL) {
    return 0LL;
  }
  *(_DWORD *)this = valuePtr;
  return 1LL;
}

{
  CFTypeID v5;
  uint64_t valuePtr;
  if (!cf) {
    return 0LL;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0LL;
  }
  int valuePtr = 0xAAAAAAAAAAAAAAAALL;
  if (!CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr) || valuePtr >= 0x10000) {
    return 0LL;
  }
  *(_WORD *)this = valuePtr;
  return 1LL;
}

{
  CFTypeID v5;
  uint64_t valuePtr;
  if (!cf) {
    return 0LL;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0LL;
  }
  int valuePtr = 0xAAAAAAAAAAAAAAAALL;
  if (!CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr) || valuePtr >= 256) {
    return 0LL;
  }
  *(_BYTE *)this = valuePtr;
  return 1LL;
}

BOOL ctu::cf::convert_copy( CFStringRef *a1, const UInt8 *a2, CFStringEncoding encoding, CFAllocatorRef alloc)
{
  CFIndex v6 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v7 = a2[23];
  }

  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v7 = v6;
  }

  CFStringRef v8 = CFStringCreateWithBytes(alloc, a2, v7, encoding, 0);
  *a1 = v8;
  return v8 != 0LL;
}

BOOL ctu::cf::convert_copy( ctu::cf *this, const __CFString **a2, const char *a3, CFAllocatorRef alloc, const __CFAllocator *a5)
{
  CFStringRef v6 = CFStringCreateWithCString(alloc, (const char *)a2, (CFStringEncoding)a3);
  *(void *)this = v6;
  return v6 != 0LL;
}

BOOL ctu::cf::convert_copy( CFDataRef *a1, uint64_t a2, int a3, CFAllocatorRef allocator, CFAllocatorRef bytesDeallocator)
{
  CFStringRef v8 = *(const UInt8 **)(a2 + 40);
  CFIndex v9 = *(unsigned int *)(a2 + 32);
  if (a3)
  {
    CFDataRef v10 = CFDataCreate(allocator, v8, v9);
    if (!v10) {
      return v10 != 0LL;
    }
    goto LABEL_5;
  }

  CFDataRef v10 = CFDataCreateWithBytesNoCopy(allocator, v8, v9, bytesDeallocator);
  if (v10) {
LABEL_5:
  }
    *a1 = v10;
  return v10 != 0LL;
}

BOOL ctu::cf::convert_copy(CFDataRef *a1, uint64_t a2)
{
  CFDataRef v3 = CFDataCreate((CFAllocatorRef)*MEMORY[0x189604DB0], *(const UInt8 **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = v3;
  return v3 != 0LL;
}

uint64_t ctu::cf::assign(std::string *a1, __CFString *cf)
{
  if (!cf) {
    return 0LL;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 == CFStringGetTypeID()) {
    return ctu::cf::assign(a1, cf);
  }
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 == CFErrorGetTypeID()) {
    return ctu::cf::assign((std::string::size_type *)a1, (CFErrorRef)cf);
  }
  CFTypeID v7 = CFGetTypeID(cf);
  return v7 == CFURLGetTypeID() && ctu::cf::assign(a1, (CFURLRef)cf, 0);
}

uint64_t ctu::cf::assign(std::string *a1, const __CFString *cf)
{
  if (!cf) {
    return 0LL;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFStringGetTypeID()) {
    return 0LL;
  }
  CFIndex Length = CFStringGetLength(cf);
  CFIndex usedBufLen = 0xAAAAAAAAAAAAAAAALL;
  v10.location = 0LL;
  v10.length = Length;
  CFIndex Bytes = CFStringGetBytes(cf, v10, 0x8000100u, 0, 0, 0LL, 0LL, &usedBufLen);
  if (!usedBufLen || !Bytes) {
    goto LABEL_11;
  }
  memset(__p, 170, sizeof(__p));
  std::vector<unsigned char>::vector(__p, usedBufLen);
  v11.location = 0LL;
  v11.length = Length;
  if (!CFStringGetBytes(cf, v11, 0x8000100u, 0, 0, (UInt8 *)__p[0], (char *)__p[1] - (char *)__p[0], 0LL))
  {
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }

LABEL_11:
    a1->__r_.__value_.__r.__words[0] = 0LL;
    a1->__r_.__value_.__l.__size_ = 0LL;
    a1->__r_.__value_.__l.__cap_ = 0LL;
    return 1LL;
  }

  std::string::__assign_trivial[abi:ne180100]<unsigned char *,unsigned char *>( a1,  (std::string::value_type *)__p[0],  (std::string::value_type *)__p[1],  (char *)__p[1] - (char *)__p[0]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  return 1LL;
}

    v5 += 2;
    if (v5 == (void *)v6) {
      return 0LL;
    }
  }

  uint64_t v17 = v5;
  boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::erase( a1,  (uint64_t *)&v17,  v16);
  uint64_t v14 = (unint64_t *)&v9->__shared_owners_;
  do
    uint64_t v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }

  return 1LL;
}

  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v3;
}

  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v3;
}

void sub_1865D4B38( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::cf::assign(std::string::size_type *a1, CFErrorRef err)
{
  if (!err) {
    return 0LL;
  }
  CFDataRef v3 = CFErrorCopyDescription(err);
  memset(&__p, 0, sizeof(__p));
  uint64_t v4 = ctu::cf::assign(&__p, v3);
  CFRelease(v3);
  if ((v4 & 1) != 0)
  {
    std::string::size_type v5 = *a1;
    std::string::size_type v6 = a1[1];
    std::string::size_type v7 = a1[2];
    *(std::string *)a1 = __p;
    __p.__r_.__value_.__r.__words[0] = v5;
    __p.__r_.__value_.__l.__size_ = v6;
    __p.__r_.__value_.__l.__cap_ = v7;
    if ((v7 & 0x8000000000000000LL) != 0) {
      goto LABEL_7;
    }
  }

  else if ((__p.__r_.__value_.__s.__size_ & 0x80) != 0)
  {
LABEL_7:
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  return v4;
}

void sub_1865D4BFC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL ctu::cf::assign(std::string *a1, CFURLRef url, Boolean resolveAgainstBase)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v7[30] = v4;
  v7[31] = v4;
  v7[28] = v4;
  v7[29] = v4;
  v7[26] = v4;
  v7[27] = v4;
  v7[24] = v4;
  v7[25] = v4;
  v7[22] = v4;
  v7[23] = v4;
  v7[20] = v4;
  v7[21] = v4;
  v7[18] = v4;
  v7[19] = v4;
  v7[16] = v4;
  v7[17] = v4;
  v7[14] = v4;
  v7[15] = v4;
  v7[12] = v4;
  v7[13] = v4;
  v7[10] = v4;
  v7[11] = v4;
  v7[8] = v4;
  v7[9] = v4;
  v7[6] = v4;
  v7[7] = v4;
  v7[4] = v4;
  v7[5] = v4;
  v7[2] = v4;
  void v7[3] = v4;
  v7[0] = v4;
  v7[1] = v4;
  int v5 = CFURLGetFileSystemRepresentation(url, resolveAgainstBase, (UInt8 *)v7, 512LL);
  if (v5) {
    std::string::__assign_external(a1, (const std::string::value_type *)v7);
  }
  return v5 != 0;
}

BOOL ctu::cf::copy(CFErrorRef err, __CFError *a2, const __CFString **a3)
{
  if (err) {
    *(void *)a2 = CFErrorCopyDescription(err);
  }
  return err != 0LL;
}

uint64_t ctu::cf::assign(ctu::cf *this, CFTypeRef cf, const __CFBoolean *a3)
{
  if (!cf) {
    return 0LL;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFBooleanGetTypeID()) {
    return 0LL;
  }
  *(_BYTE *)this = CFBooleanGetValue((CFBooleanRef)cf) != 0;
  return 1LL;
}

uint64_t ctu::cf::assign( std::string *a1, const __CFLocale *a2, CFDateFormatterStyle a3, CFDateFormatterStyle a4, CFAllocatorRef allocator, CFAbsoluteTime a6)
{
  CFDateFormatterRef v9 = CFDateFormatterCreate(allocator, a2, a3, a4);
  if (!v9) {
    return 0LL;
  }
  CFDateFormatterRef v14 = v9;
  CFStringRef StringWithAbsoluteTime = CFDateFormatterCreateStringWithAbsoluteTime(allocator, v9, a6);
  CFStringRef v13 = StringWithAbsoluteTime;
  if (StringWithAbsoluteTime) {
    uint64_t v11 = ctu::cf::assign(a1, StringWithAbsoluteTime);
  }
  else {
    uint64_t v11 = 0LL;
  }
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v13);
  ctu::SharedRef<__CFDateFormatter,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDateFormatter>::~SharedRef((const void **)&v14);
  return v11;
}

void sub_1865D4E20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t ctu::cf::assign(void **a1, CFTypeRef cf)
{
  if (!cf) {
    return 0LL;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFDataGetTypeID()) {
    return 0LL;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)cf);
  std::string::size_type v6 = CFDataGetBytePtr((CFDataRef)cf);
  std::string::size_type v7 = &v6[CFDataGetLength((CFDataRef)cf)];
  size_t v8 = v7 - BytePtr;
  unint64_t v9 = (unint64_t)a1[2];
  CFRange v10 = (char *)*a1;
  if (v9 - (unint64_t)*a1 >= v7 - BytePtr)
  {
    CFDateFormatterRef v14 = (char *)a1[1];
    size_t v15 = v14 - v10;
    if (v14 - v10 < v8)
    {
      uint64_t v16 = &BytePtr[v15];
      if (v14 != v10)
      {
        memmove(*a1, BytePtr, v15);
        CFRange v10 = (char *)a1[1];
      }

      if (v7 != v16) {
        memmove(v10, v16, v7 - v16);
      }
      uint64_t v17 = &v10[v7 - v16];
      goto LABEL_23;
    }
  }

  else
  {
    if (v10)
    {
      a1[1] = v10;
      operator delete(v10);
      unint64_t v9 = 0LL;
      *a1 = 0LL;
      a1[1] = 0LL;
      a1[2] = 0LL;
    }

    if ((v8 & 0x8000000000000000LL) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = 2 * v9;
    if (2 * v9 <= v8) {
      uint64_t v11 = v7 - BytePtr;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v11;
    }
    std::vector<char>::__vallocate[abi:ne180100](a1, v12);
    CFRange v10 = (char *)a1[1];
  }

  if (v7 != BytePtr) {
    memmove(v10, BytePtr, v8);
  }
  uint64_t v17 = &v10[v8];
LABEL_23:
  a1[1] = v17;
  return 1LL;
}

uint64_t ctu::cf::assign_loosely(ctu::cf *this, const __CFString *cf, const void *a3)
{
  if (!cf) {
    return 0LL;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 == CFBooleanGetTypeID())
  {
    BOOL v6 = CFBooleanGetValue((CFBooleanRef)cf) == 0;
LABEL_6:
    char v8 = !v6;
    *(_BYTE *)this = v8;
    return 1LL;
  }

  CFTypeID v7 = CFGetTypeID(cf);
  if (v7 == CFNumberGetTypeID())
  {
    int valuePtr = -1431655766;
    CFNumberGetValue((CFNumberRef)cf, kCFNumberIntType, &valuePtr);
    BOOL v6 = valuePtr == 0;
    goto LABEL_6;
  }

  CFTypeID v10 = CFGetTypeID(cf);
  if (v10 != CFStringGetTypeID()) {
    return 0LL;
  }
  uint64_t v9 = 1LL;
  if (CFStringCompare(cf, @"YES", 1uLL) == kCFCompareEqualTo
    || CFStringCompare(cf, @"TRUE", 1uLL) == kCFCompareEqualTo)
  {
    *(_BYTE *)this = 1;
    return v9;
  }

  if (CFStringCompare(cf, @"NO", 1uLL) && CFStringCompare(cf, @"FALSE", 1uLL)) {
    return 0LL;
  }
  *(_BYTE *)this = 0;
  return 1LL;
}

BOOL ctu::cf::assign_loosely(ctu::cf *this, const __CFString *cf, const void *a3)
{
  *(_DWORD *)this = 0;
  if (cf)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == CFNumberGetTypeID()) {
      return CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, this) != 0;
    }
    CFTypeID v7 = CFGetTypeID(cf);
    if (v7 == CFStringGetTypeID())
    {
      SInt32 IntValue = CFStringGetIntValue(cf);
LABEL_8:
      *(_DWORD *)this = IntValue;
      return 1LL;
    }

    CFTypeID v9 = CFGetTypeID(cf);
    if (v9 == CFBooleanGetTypeID())
    {
      SInt32 IntValue = CFBooleanGetValue((CFBooleanRef)cf);
      goto LABEL_8;
    }
  }

  return 0LL;
}

{
  CFTypeID v5;
  CFTypeID v7;
  uint64_t IntValue;
  CFTypeID v9;
  *(void *)this = 0LL;
  if (cf)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == CFNumberGetTypeID()) {
      return CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, this) != 0;
    }
    CFTypeID v7 = CFGetTypeID(cf);
    if (v7 == CFStringGetTypeID())
    {
      SInt32 IntValue = CFStringGetIntValue(cf);
LABEL_8:
      *(void *)this = IntValue;
      return 1LL;
    }

    CFTypeID v9 = CFGetTypeID(cf);
    if (v9 == CFBooleanGetTypeID())
    {
      SInt32 IntValue = CFBooleanGetValue((CFBooleanRef)cf);
      goto LABEL_8;
    }
  }

  return 0LL;
}

{
  CFTypeID v5;
  CFTypeID v7;
  double DoubleValue;
  CFTypeID v9;
  *(void *)this = 0LL;
  if (cf)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == CFNumberGetTypeID()) {
      return CFNumberGetValue((CFNumberRef)cf, kCFNumberDoubleType, this) != 0;
    }
    CFTypeID v7 = CFGetTypeID(cf);
    if (v7 == CFStringGetTypeID())
    {
      DoubleValue = CFStringGetDoubleValue(cf);
LABEL_8:
      *(double *)this = DoubleValue;
      return 1LL;
    }

    CFTypeID v9 = CFGetTypeID(cf);
    if (v9 == CFBooleanGetTypeID())
    {
      DoubleValue = (double)CFBooleanGetValue((CFBooleanRef)cf);
      goto LABEL_8;
    }
  }

  return 0LL;
}

const void **ctu::cf::show@<X0>(CFTypeRef cf@<X0>, uint64_t a2@<X8>)
{
  return ctu::cf::show((const void **)1, cf, a2);
}

const void **ctu::cf::show@<X0>(const void **this@<X0>, CFTypeRef cf@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  CFTypeID v5 = (void *)(a3 + 8);
  *(void *)a3 = 0LL;
  *(void *)(a3 + 16) = 0LL;
  if (cf)
  {
    CFTypeRef v6 = cf;
    if ((_DWORD)this)
    {
      *(void *)&__int128 v25 = CFCopyDescription(cf);
      memset(v27, 0, 24);
      ctu::cf::assign((std::string *)v27, (const __CFString *)v25);
LABEL_4:
      uint64_t v7 = *(void *)v27;
      *CFTypeID v5 = *(void *)&v27[8];
      *(void *)((char *)v5 + 7) = *(void *)&v27[15];
      char v8 = v27[23];
      *(void *)a3 = v7;
      *(_BYTE *)(a3 + 23) = v8;
      return ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v25);
    }

    CFTypeID v9 = CFGetTypeID(cf);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    CFTypeID v11 = CFGetTypeID(v6);
    if (v9 == TypeID)
    {
      CFTypeID v12 = CFDictionaryGetTypeID();
      unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
      __int128 v40 = v13;
      __int128 v41 = v13;
      if (v11 != v12) {
        CFTypeRef v6 = 0LL;
      }
      __int128 v38 = v13;
      __int128 v39 = v13;
      __int128 v36 = v13;
      __int128 v37 = v13;
      __int128 v34 = v13;
      __int128 v35 = v13;
      __int128 v33 = v13;
      __int128 v31 = v13;
      __int128 v32 = v13;
      __int128 v29 = v13;
      *(_OWORD *)std::string __p = v13;
      *(_OWORD *)&v27[16] = v13;
      __int128 v28 = v13;
      *(_OWORD *)uint64_t v27 = v13;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"CFDictionary(", 13LL);
      CFDictionaryGetCount((CFDictionaryRef)v6);
      CFDateFormatterRef v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" keys)", 6LL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v27[8], &v25);
    }

    else
    {
      CFTypeID v15 = CFArrayGetTypeID();
      CFTypeID v16 = CFGetTypeID(v6);
      if (v11 == v15)
      {
        CFTypeID v17 = CFArrayGetTypeID();
        unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&__int128 v18 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __int128 v40 = v18;
        __int128 v41 = v18;
        if (v16 != v17) {
          CFTypeRef v6 = 0LL;
        }
        __int128 v38 = v18;
        __int128 v39 = v18;
        __int128 v36 = v18;
        __int128 v37 = v18;
        __int128 v34 = v18;
        __int128 v35 = v18;
        __int128 v33 = v18;
        __int128 v31 = v18;
        __int128 v32 = v18;
        __int128 v29 = v18;
        *(_OWORD *)std::string __p = v18;
        *(_OWORD *)&v27[16] = v18;
        __int128 v28 = v18;
        *(_OWORD *)uint64_t v27 = v18;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"CFArray(", 8LL);
        CFArrayGetCount((CFArrayRef)v6);
        uint64_t v19 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" elements)", 10LL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v27[8], &v25);
      }

      else
      {
        if (v16 != CFDataGetTypeID())
        {
          *(void *)&__int128 v25 = CFCopyDescription(v6);
          memset(v27, 0, 24);
          ctu::cf::assign((std::string *)v27, (const __CFString *)v25);
          goto LABEL_4;
        }

        CFTypeID v20 = CFGetTypeID(v6);
        CFTypeID v21 = CFDataGetTypeID();
        unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&__int128 v22 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __int128 v40 = v22;
        __int128 v41 = v22;
        if (v20 != v21) {
          CFTypeRef v6 = 0LL;
        }
        __int128 v38 = v22;
        __int128 v39 = v22;
        __int128 v36 = v22;
        __int128 v37 = v22;
        __int128 v34 = v22;
        __int128 v35 = v22;
        __int128 v33 = v22;
        __int128 v31 = v22;
        __int128 v32 = v22;
        __int128 v29 = v22;
        *(_OWORD *)std::string __p = v22;
        *(_OWORD *)&v27[16] = v22;
        __int128 v28 = v22;
        *(_OWORD *)uint64_t v27 = v22;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"CFData(", 7LL);
        CFDataGetLength((CFDataRef)v6);
        uint64_t v23 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" bytes)", 7LL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v27[8], &v25);
      }
    }

    *(_OWORD *)a3 = v25;
    uint64_t v24 = v26;
    *(void *)uint64_t v27 = *MEMORY[0x189614738];
    *(void *)&v27[*(void *)(*(void *)v27 - 24LL)] = *(void *)(MEMORY[0x189614738] + 24LL);
    *(void *)(a3 + 16) = v24;
    *(void *)&v27[8] = MEMORY[0x189614750] + 16LL;
    if (SHIBYTE(v31) < 0) {
      operator delete(__p[1]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (const void **)MEMORY[0x186E3C284](&v33);
  }

  else
  {
    *(_BYTE *)(a3 + 23) = 4;
    strcpy((char *)a3, "NULL");
  }

  return this;
}

void sub_1865D568C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(&a10);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x189614768];
  uint64_t v3 = MEMORY[0x189614768] + 64LL;
  *(void *)(a1 + 112) = MEMORY[0x189614768] + 64LL;
  uint64_t v4 = *(void *)(MEMORY[0x189614738] + 8LL);
  uint64_t v5 = *(void *)(MEMORY[0x189614738] + 16LL);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v5;
  CFTypeRef v6 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24LL));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0LL;
  v6[1].__fmtflags_ = -1;
  *(void *)a1 = v2 + 24;
  *(void *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = MEMORY[0x189614750] + 16LL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1865D57B4(_Unwind_Exception *a1)
{
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)a1 = *MEMORY[0x189614738];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x186E3C284](a1 + 112);
  return a1;
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    std::vector<char>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    uint64_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }

  return a1;
}

void sub_1865D58B4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void std::string::__assign_trivial[abi:ne180100]<unsigned char *,unsigned char *>( std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  if (((char)this->__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    char v8 = this;
    if (a4 <= 0x16) {
      goto LABEL_11;
    }
    std::string::size_type size = this->__r_.__value_.__s.__size_;
    std::string::size_type v10 = 22LL;
    goto LABEL_6;
  }

  std::string::size_type cap = this->__r_.__value_.__l.__cap_;
  std::string::size_type v10 = (cap & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0LL, size, 0LL);
    this->__r_.__value_.__l.__size_ = 0LL;
    LOBYTE(v12) = this->__r_.__value_.__s.__size_;
    goto LABEL_8;
  }

  std::string::size_type v12 = HIBYTE(cap);
LABEL_8:
  char v8 = this;
  if ((v12 & 0x80) != 0) {
    char v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
LABEL_11:
  while (a2 != a3)
  {
    std::string::value_type v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    char v8 = (std::string *)((char *)v8 + 1);
  }

  v8->__r_.__value_.__s.__data_[0] = 0;
  else {
    this->__r_.__value_.__s.__size_ = a4 & 0x7F;
  }
}

const void **ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef( const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::SharedRef<__CFDateFormatter,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDateFormatter>::~SharedRef( const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void ctu::tokenize( std::string *this@<X0>, std::string::value_type __c@<W1>, std::string::size_type __pos@<X2>, uint64_t *a4@<X8>)
{
  std::string::size_type v8 = 0LL;
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = 0LL;
  do
  {
    std::string::size_type v9 = std::string::find(this, __c, __pos);
    memset(&v14, 170, sizeof(v14));
    std::string::basic_string(&v14, this, v8, v9 - v8, (std::allocator<char> *)&v13);
    unint64_t v10 = a4[1];
    if (v10 >= a4[2])
    {
      uint64_t v12 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a4, (__int128 *)&v14);
    }

    else
    {
      if ((char)v14.__r_.__value_.__s.__size_ < 0)
      {
        std::string::__init_copy_ctor_external( (std::string *)a4[1],  v14.__r_.__value_.__l.__data_,  v14.__r_.__value_.__l.__size_);
      }

      else
      {
        __int128 v11 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
        *(void *)(v10 + 16) = v14.__r_.__value_.__l.__cap_;
        *(_OWORD *)unint64_t v10 = v11;
      }

      uint64_t v12 = v10 + 24;
      a4[1] = v10 + 24;
    }

    a4[1] = v12;
    std::string::size_type v8 = v9 + 1;
    if (__pos <= v9 + 1) {
      __pos = v9 + 1;
    }
  }

  while (v9 != -1LL);
}

void sub_1865D5AFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  v15[1] = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  std::string __p = v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t ctu::count_trailing_zeroes(ctu *this, const unsigned __int8 *a2)
{
  if (!(_DWORD)a2) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  uint64_t result = a2;
  for (uint64_t i = (char *)this - 1; !i[a2]; --i)
  {
    if ((_DWORD)a2 == (_DWORD)++v3) {
      return result;
    }
  }

  return v3;
}

void ctu::assign(std::string *a1, unsigned __int8 *a2, unsigned int a3, int a4, int a5)
{
  unsigned int v6 = a3;
  if (a5)
  {
    if (a3)
    {
      unsigned int v9 = 0;
      unsigned int v10 = a3;
      __int128 v11 = a2 - 1;
      while (!v11[a3])
      {
        --v11;
        if (a3 == ++v9) {
          goto LABEL_9;
        }
      }

      unsigned int v10 = v9;
    }

    else
    {
      unsigned int v10 = 0;
    }

LABEL_9:
    unsigned int v6 = a3 - v10;
  }

  if (a4) {
    int v12 = 146 * ((v6 + 31) >> 5);
  }
  else {
    int v12 = 2 * v6;
  }
  __s = 0LL;
  CFTypeID v17 = 0LL;
  uint64_t v18 = 0LL;
  if (v12 == -2)
  {
    std::string v14 = 0LL;
  }

  else
  {
    std::vector<char>::__vallocate[abi:ne180100](&__s, (v12 + 2));
    char v13 = (char *)v17;
    bzero(v17, (v12 + 2));
    CFTypeID v17 = &v13[v12 + 2];
    std::string v14 = __s;
  }

  unint64_t v15 = v12 | 1u;
  if (a4) {
    TelephonyUtilLogBinaryToBuffer(v14, v15, a2, v6);
  }
  else {
    TelephonyUtilBinToHex(v14, v15, a2, v6);
  }
  std::string::__assign_external(a1, __s);
  if (__s)
  {
    CFTypeID v17 = __s;
    operator delete(__s);
  }

  *a2 = v7;
  return v5;
}

    _TelephonyUtilDebugPrint( (uint64_t)"TelephonyUtilWriteStackshotWithExcCode",  (uint64_t)"Failed to do stack shot/simulate crash, reason '%s', asCrash %u\n",  v8,  v9,  v10,  v11,  v12,  v13,  a1);
    return [v6 drain];
  }

  if (!off_18C4A4660 || (off_18C4A4660(v7, v5) & 1) == 0) {
    goto LABEL_9;
  }
  return [v6 drain];
}

void sub_1865D5C9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::assign(_BYTE *a1, char *a2, int a3)
{
  uint64_t v3 = a3;
  if (a2[23] >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = *(char **)a2;
  }
  return TelephonyUtilHexToBin(a1, v3, v4);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x189614700], MEMORY[0x189614270]);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    unsigned int v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    unsigned int v10 = 0LL;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }

  else
  {
    __int128 v12 = *a2;
    end->__r_.__value_.__l.__cap_ = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }

  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1865D5E20( _Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::string>::__swap_out_circular_buffer( std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  xpc_object_t value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v14 = a6;
  *((void *)&v14 + 1) = a7;
  __int128 v13 = v14;
  v12[0] = a1;
  v12[1] = &v13;
  void v12[2] = &v14;
  v12[3] = 0xAAAAAAAAAAAAAA01LL;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      __int128 v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24LL;
      *(void *)(a3 - 16) = 0LL;
      *(void *)(a3 - std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
      *(void *)(a3 - 24) = 0LL;
      v7 -= 24LL;
      a3 -= 24LL;
    }

    while (a3 != a5);
    *((void *)&v14 + 1) = v9;
  }

  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]( uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100]( uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    v1 += 24LL;
  }

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      unint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }

      uint64_t v2 = v5;
    }

    while (v5 != a2);
  }

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24LL)
  {
  }

  a1[1] = v2;
}

void ctu::RestResourceConnection::~RestResourceConnection(void **this)
{
  *this = off_189E943D8;
}

void ctu::XpcRestResourceConnection::~XpcRestResourceConnection(xpc_object_t *this)
{
  *this = off_189E94410;
  xpc_release(this[4]);
  this[4] = 0LL;
  *this = off_189E943D8;
}

{
  void *v1;
  ctu::XpcRestResourceConnection::~XpcRestResourceConnection(this);
  operator delete(v1);
}

__n128 ctu::DispatchRestResourceConnection::DispatchRestResourceConnection( uint64_t a1, __int128 *a2, __n128 *a3)
{
  *(void *)a1 = off_189E943D8;
  __int128 v3 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v3;
  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *(void *)a2 = 0LL;
  *(void *)a1 = off_189E94448;
  __n128 result = *a3;
  *(__n128 *)(a1 + 32) = *a3;
  a3->n128_u64[0] = 0LL;
  a3->n128_u64[1] = 0LL;
  return result;
}

{
  __int128 v3;
  __n128 result;
  *(void *)a1 = off_189E943D8;
  __int128 v3 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v3;
  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *(void *)a2 = 0LL;
  *(void *)a1 = off_189E94448;
  __n128 result = *a3;
  *(__n128 *)(a1 + 32) = *a3;
  a3->n128_u64[0] = 0LL;
  a3->n128_u64[1] = 0LL;
  return result;
}

void ctu::DispatchRestResourceConnection::send(uint64_t a1, xpc_object_t *a2)
{
  __int128 v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    unint64_t v5 = std::__shared_weak_count::lock(v3);
    xpc_object_t object[2] = v5;
    if (v5)
    {
      unsigned int v6 = v5;
      uint64_t v7 = *(void **)(a1 + 32);
      object[1] = v7;
      if (v7)
      {
        object[0] = *a2;
        *a2 = xpc_null_create();
        (*(void (**)(void *, xpc_object_t *))(*(void *)v7 + 16LL))(v7, object);
        xpc_release(object[0]);
        object[0] = 0LL;
      }

      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        unint64_t v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }

void sub_1865D6324( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
}

void ctu::DispatchRestResourceConnection::sendWithReply( uint64_t a1, void **a2, dispatch_object_s *a3, const void *a4)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
  {
    unint64_t v9 = (dispatch_object_s *)std::__shared_weak_count::lock(v5);
    v19[2] = v9;
    if (v9)
    {
      __int128 v10 = (std::__shared_weak_count *)v9;
      __int128 v11 = *(dispatch_object_s **)(a1 + 32);
      v19[1] = v11;
      if (!v11)
      {
LABEL_18:
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          unint64_t v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }

        return;
      }

      v19[0] = a3;
      if (a3) {
        dispatch_retain(a3);
      }
      __int128 v12 = *a2;
      xpc_object_t object = v12;
      if (v12)
      {
        xpc_retain(v12);
        if (a4)
        {
LABEL_8:
          __int128 v13 = _Block_copy(a4);
          goto LABEL_11;
        }
      }

      else
      {
        xpc_object_t object = xpc_null_create();
        if (a4) {
          goto LABEL_8;
        }
      }

      __int128 v13 = 0LL;
LABEL_11:
      v20[0] = &off_189E944C0;
      v20[1] = v13;
      CFTypeID v21 = v20;
      (*(void (**)(dispatch_object_s *, xpc_object_t *, dispatch_object_t *, void *))(*(void *)v11 + 24LL))( v11,  &object,  v19,  v20);
      __int128 v14 = v21;
      if (v21 == v20)
      {
        uint64_t v15 = 4LL;
        __int128 v14 = v20;
      }

      else
      {
        if (!v21) {
          goto LABEL_16;
        }
        uint64_t v15 = 5LL;
      }

      (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_16:
      xpc_release(object);
      xpc_object_t object = 0LL;
      if (v19[0]) {
        dispatch_release(v19[0]);
      }
      goto LABEL_18;
    }
  }

void sub_1865D64C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, dispatch_object_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

const void **ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))const::$_0::~$_0( const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

uint64_t ctu::RestResourceConnection::isUsingXpcConnection( ctu::RestResourceConnection *this, _xpc_connection_s *a2)
{
  return 0LL;
}

void ctu::XpcRestResourceConnection::send(uint64_t a1, xpc_object_t *a2)
{
}

void ctu::XpcRestResourceConnection::sendWithReply( uint64_t a1, xpc_object_t *a2, dispatch_queue_s *a3, void *a4)
{
}

BOOL ctu::XpcRestResourceConnection::isUsingXpcConnection( ctu::XpcRestResourceConnection *this, _xpc_connection_s *a2)
{
  return *((void *)this + 4) == (void)a2;
}

void ctu::DispatchRestResourceConnection::~DispatchRestResourceConnection( ctu::DispatchRestResourceConnection *this)
{
  *(void *)this = off_189E94448;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = off_189E943D8;
}

{
  std::__shared_weak_count *v2;
  *(void *)this = off_189E94448;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = off_189E943D8;
  operator delete(this);
}

void *std::__function::__func<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,std::allocator<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0>,void ()(xpc::object)>::~__func( void *a1)
{
  *a1 = &off_189E944C0;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void std::__function::__func<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,std::allocator<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0>,void ()(xpc::object)>::~__func( void *__p)
{
  *std::string __p = &off_189E944C0;
  uint64_t v2 = (const void *)__p[1];
  if (v2) {
    _Block_release(v2);
  }
  operator delete(__p);
}

void *std::__function::__func<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,std::allocator<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0>,void ()(xpc::object)>::__clone( uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = &off_189E944C0;
  std::__compressed_pair_elem<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0 const&,0ul>( v2 + 1,  v1);
  return v2;
}

void *std::__function::__func<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,std::allocator<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0>,void ()(xpc::object)>::__clone( uint64_t a1, void *a2)
{
  *a2 = &off_189E944C0;
  return std::__compressed_pair_elem<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0 const&,0ul>( a2 + 1,  (void **)(a1 + 8));
}

void std::__function::__func<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,std::allocator<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0>,void ()(xpc::object)>::destroy( uint64_t a1)
{
}

void std::__function::__func<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,std::allocator<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0>,void ()(xpc::object)>::destroy_deallocate( const void **a1)
{
}

void std::__function::__func<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,std::allocator<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0>,void ()(xpc::object)>::operator()( uint64_t a1, void **a2)
{
  __int128 v3 = *a2;
  *a2 = xpc_null_create();
  (*(void (**)(void))(*(void *)(a1 + 8) + 16LL))();
  xpc_release(v3);
}

void sub_1865D67A0(_Unwind_Exception *a1)
{
}

uint64_t std::__function::__func<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,std::allocator<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0>,void ()(xpc::object)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,std::allocator<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0>,void ()(xpc::object)>::target_type()
{
}

void *std::__compressed_pair_elem<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0 const&,0ul>( void *a1, void **a2)
{
  __int128 v3 = *a2;
  if (*a2) {
    __int128 v3 = _Block_copy(v3);
  }
  *a1 = v3;
  return a1;
}

void std::__function::__alloc_func<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,std::allocator<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0>,void ()(xpc::object)>::destroy[abi:ne180100]( const void *a1)
{
  if (a1) {
    _Block_release(a1);
  }
}

CFAllocatorRef ctu::cf::create_allocator@<X0>( ctu::cf *this@<X0>, const ctu::MallocZone *a2@<X1>, CFAllocatorRef *a3@<X8>)
{
  uint64_t v7 = operator new(0x18uLL);
  uint64_t v8 = *((void *)this + 1);
  *uint64_t v7 = *(void *)this;
  v7[1] = v8;
  if (v8)
  {
    unint64_t v9 = (unint64_t *)(v8 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  v7[2] = *((void *)this + 2);
  context.mach_timebase_info info = v7;
  CFAllocatorRef result = CFAllocatorCreate(a2, &context);
  *a3 = result;
  return result;
}

CFStringRef anonymous namespace'::sMallocZoneCopyDescription(_anonymous_namespace_ *this, const void *a2)
{
  return CFStringCreateWithFormat(0LL, 0LL, @"<Allocator %p: %s>", this, *((void *)this + 2));
}

void anonymous namespace'::sMallocZoneRelease(_anonymous_namespace_ *this, const void *a2)
{
  if (this)
  {
    uint64_t v2 = (void *)std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)this);
    operator delete(v2);
  }

void *anonymous namespace'::sMallocZoneAllocate(size_t size, uint64_t a2, malloc_zone_t **a3, void *a4)
{
  return malloc_zone_malloc(*a3, size);
}

void *anonymous namespace'::sMallocZoneReallocate( _anonymous_namespace_ *this, size_t size, uint64_t a3, malloc_zone_t **a4, void *a5)
{
  return malloc_zone_realloc(*a4, this, size);
}

void anonymous namespace'::sMallocZoneDeallocate(_anonymous_namespace_ *this, malloc_zone_t **a2, void *a3)
{
}

uint64_t ctu::concurrency::Monitor::Monitor(uint64_t a1, const void **a2)
{
  *(void *)a1 = off_189E94540;
  ctu::concurrency::PriorityQueue::PriorityQueue((dispatch_queue_t *)(a1 + 8), a2);
  *(void *)(a1 + 32) = dispatch_group_create();
  return a1;
}

{
  *(void *)a1 = off_189E94540;
  ctu::concurrency::PriorityQueue::PriorityQueue((dispatch_queue_t *)(a1 + 8), a2);
  *(void *)(a1 + 32) = dispatch_group_create();
  return a1;
}

void *ctu::concurrency::Monitor::Monitor(void *a1, uint64_t a2)
{
  *a1 = off_189E94540;
  ctu::concurrency::PriorityQueue::PriorityQueue((uint64_t)(a1 + 1), a2 + 8);
  unint64_t v4 = *(dispatch_object_s **)(a2 + 32);
  a1[4] = v4;
  dispatch_retain(v4);
  return a1;
}

{
  dispatch_object_s *v4;
  *a1 = off_189E94540;
  ctu::concurrency::PriorityQueue::PriorityQueue((uint64_t)(a1 + 1), a2 + 8);
  unint64_t v4 = *(dispatch_object_s **)(a2 + 32);
  a1[4] = v4;
  dispatch_retain(v4);
  return a1;
}

void ctu::concurrency::Monitor::~Monitor(dispatch_object_t *this)
{
  *this = (dispatch_object_t)off_189E94540;
  dispatch_release(this[4]);
  ctu::concurrency::PriorityQueue::~PriorityQueue(this + 1);
}

{
  *this = (dispatch_object_t)off_189E94540;
  dispatch_release(this[4]);
  ctu::concurrency::PriorityQueue::~PriorityQueue(this + 1);
}

{
  *this = (dispatch_object_t)off_189E94540;
  dispatch_release(this[4]);
  ctu::concurrency::PriorityQueue::~PriorityQueue(this + 1);
  operator delete(this);
}

void ctu::concurrency::Monitor::executeBlock(uint64_t a1, void *a2, int a3)
{
}

{
  ctu::concurrency::PriorityQueue::addBlock((dispatch_queue_t *)(a1 + 8), *(dispatch_group_t *)(a1 + 32), a2, a3);
}

void ctu::concurrency::Monitor::executeBlock(uint64_t a1, dispatch_group_s *a2, void *a3, int a4)
{
}

{
  ctu::concurrency::PriorityQueue::addBlock((dispatch_queue_t *)(a1 + 8), a2, a3, a4);
}

void ctu::concurrency::Monitor::executeBlockAndWait(uint64_t a1, void *a2, int a3, dispatch_time_t a4)
{
  if (a4 == -1LL)
  {
    ctu::concurrency::PriorityQueue::addBlockSync((dispatch_queue_t *)(a1 + 8), a2, a3);
  }

  else
  {
    uint64_t v8 = dispatch_group_create();
    ctu::concurrency::PriorityQueue::addBlock((dispatch_queue_t *)(a1 + 8), v8, a2, a3);
    dispatch_group_wait(v8, a4);
    dispatch_release(v8);
  }

{
  dispatch_group_s *v8;
  if (a4 == -1LL)
  {
    ctu::concurrency::PriorityQueue::addBlockSync((dispatch_queue_t *)(a1 + 8), a2, a3);
  }

  else
  {
    uint64_t v8 = dispatch_group_create();
    ctu::concurrency::PriorityQueue::addBlock((dispatch_queue_t *)(a1 + 8), v8, a2, a3);
    dispatch_group_wait(v8, a4);
    dispatch_release(v8);
  }

uint64_t ctu::concurrency::Monitor::waitForCompletion(dispatch_group_t *this, dispatch_time_t a2)
{
  return dispatch_group_wait(this[4], a2);
}

{
  return dispatch_group_wait(this[4], a2);
}

void ctu::concurrency::Monitor::notifyOnCompletion(uint64_t a1, dispatch_group_s *a2, void *a3, int a4)
{
}

{
  ctu::concurrency::PriorityQueue::notifyOn((dispatch_queue_t *)(a1 + 8), a2, a3, a4);
}

void ctu::concurrency::Monitor::suspend(dispatch_object_t *this)
{
}

void ctu::concurrency::Monitor::resume(dispatch_object_t *this)
{
}

void ctu::concurrency::Monitor::suspendAndExecute(uint64_t a1, uint64_t a2)
{
}

xpc_object_t *ctu::rest::data_view::data_view(xpc_object_t *a1, xpc_object_t *a2)
{
  *a1 = xpc_null_create();
  if (MEMORY[0x186E3CD4C](*a2) != MEMORY[0x1895F92A8] && MEMORY[0x186E3CD4C](*a2) == MEMORY[0x1895F9240])
  {
    xpc_object_t v4 = *a2;
    *a2 = xpc_null_create();
    xpc_object_t v5 = *a1;
    *a1 = v4;
    xpc_release(v5);
  }

  return a1;
}

void sub_1865D6D84(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  _Unwind_Resume(a1);
}

xpc_object_t *ctu::rest::data_view::data_view(xpc_object_t *this, CFTypeRef cf)
{
  xpc_object_t v4 = cf;
  if (cf) {
    CFRetain(cf);
  }
  ctu::rest::data_view::data_view(this, (CFDataRef *)&v4);
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(&v4);
  return this;
}

{
  const void *v4;
  xpc_object_t v4 = cf;
  if (cf) {
    CFRetain(cf);
  }
  ctu::rest::data_view::data_view(this, (CFDataRef *)&v4);
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(&v4);
  return this;
}

void sub_1865D6DF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

xpc_object_t *ctu::rest::data_view::data_view(xpc_object_t *a1, CFDataRef *a2)
{
  *a1 = xpc_null_create();
  if (*a2) {
    xpc_object_t v4 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  }
  else {
    xpc_object_t v4 = 0LL;
  }
  if (v4)
  {
    qos_class_t v5 = qos_class_self();
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(v5, 0LL);
    BytePtr = CFDataGetBytePtr(*a2);
    CFIndex Length = CFDataGetLength(*a2);
    destructor[0] = MEMORY[0x1895F87A8];
    destructor[1] = 1174405120LL;
    destructor[2] = ___ZN3ctu4rest9data_viewC2ENS_2cf11CFSharedRefIK8__CFDataEE_block_invoke;
    destructor[3] = &__block_descriptor_tmp_2;
    ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::SharedRef( &v14,  (const void **)a2);
    unint64_t v9 = dispatch_data_create(BytePtr, Length, global_queue, destructor);
    xpc_object_t v10 = xpc_data_create_with_dispatch_data(v9);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    xpc_object_t v11 = *a1;
    *a1 = v10;
    xpc_release(v11);
    dispatch_release(v9);
    ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(&v14);
  }

  return a1;
}

void sub_1865D6F1C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  _Unwind_Resume(a1);
}

void sub_1865D6FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

const void **__copy_helper_block_e8_32c38_ZTSN3ctu2cf11CFSharedRefIK8__CFDataEE(uint64_t a1, uint64_t a2)
{
  return ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::SharedRef( (const void **)(a1 + 32),  (const void **)(a2 + 32));
}

const void **__destroy_helper_block_e8_32c38_ZTSN3ctu2cf11CFSharedRefIK8__CFDataEE(uint64_t a1)
{
  return ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)(a1 + 32));
}

xpc_object_t *ctu::rest::data_view::data_view(xpc_object_t *a1, uint64_t a2)
{
  *a1 = xpc_null_create();
  if (*(void *)a2 != *(void *)(a2 + 8))
  {
    qos_class_t v4 = qos_class_self();
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(v4, 0LL);
    unsigned int v6 = dispatch_data_create( *(const void **)a2,  *(void *)(a2 + 8) - *(void *)a2,  global_queue,  &__block_literal_global_1);
    xpc_object_t v7 = xpc_data_create_with_dispatch_data(v6);
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_object_t v8 = *a1;
    *a1 = v7;
    xpc_release(v8);
    dispatch_release(v6);
  }

  return a1;
}

{
  const void *v4;
  uint64_t v5;
  void *v6;
  qos_class_t v7;
  dispatch_queue_global_t global_queue;
  dispatch_data_s *v9;
  xpc_object_t v10;
  xpc_object_t v11;
  void destructor[5];
  *a1 = xpc_null_create();
  qos_class_t v4 = *(const void **)a2;
  qos_class_t v5 = *(void *)(a2 + 8);
  if (*(void *)a2 != v5)
  {
    unsigned int v6 = operator new(0x18uLL);
    dispatch_data_s *v6 = v4;
    v6[1] = v5;
    v6[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0LL;
    *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
    xpc_object_t v7 = qos_class_self();
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(v7, 0LL);
    destructor[0] = MEMORY[0x1895F87A8];
    destructor[1] = 0x40000000LL;
    destructor[2] = ___ZN3ctu4rest9data_viewC2EONSt3__16vectorIhNS2_9allocatorIhEEEE_block_invoke;
    destructor[3] = &__block_descriptor_tmp_2;
    void destructor[4] = v6;
    unint64_t v9 = dispatch_data_create(v4, v5 - (void)v4, global_queue, destructor);
    xpc_object_t v10 = xpc_data_create_with_dispatch_data(v9);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    xpc_object_t v11 = *a1;
    *a1 = v10;
    xpc_release(v11);
    dispatch_release(v9);
  }

  return a1;
}

void sub_1865D7060(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  _Unwind_Resume(a1);
}

void sub_1865D7180(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  _Unwind_Resume(a1);
}

void ___ZN3ctu4rest9data_viewC2EONSt3__16vectorIhNS2_9allocatorIhEEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (*v1)
    {
      v1[1] = v2;
      operator delete(v2);
    }

    operator delete(v1);
  }

const void *ctu::rest::data_view::data(xpc_object_t *this)
{
  if (MEMORY[0x186E3CD4C](*this) == MEMORY[0x1895F92A8]) {
    return 0LL;
  }
  else {
    return xpc_data_get_bytes_ptr(*this);
  }
}

size_t ctu::rest::data_view::size(xpc_object_t *this)
{
  if (MEMORY[0x186E3CD4C](*this) == MEMORY[0x1895F92A8]) {
    return 0LL;
  }
  else {
    return xpc_data_get_length(*this);
  }
}

BOOL ctu::rest::data_view::operator BOOL(void *a1)
{
  return MEMORY[0x186E3CD4C](*a1) != MEMORY[0x1895F92A8];
}

void ctu::rest::read_rest_value(void **a1, void **a2)
{
  __int128 v3 = *a2;
  xpc_object_t v6 = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v6 = xpc_null_create();
  }
  ctu::rest::data_view::data_view(&object, &v6);
  xpc_object_t v4 = object;
  xpc_object_t object = xpc_null_create();
  qos_class_t v5 = *a1;
  *a1 = v4;
  xpc_release(v5);
  xpc_release(object);
  xpc_object_t object = 0LL;
  xpc_release(v6);
}

void sub_1865D732C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
}

xpc_object_t ctu::rest::write_rest_value@<X0>(void **this@<X0>, void *a2@<X8>)
{
  __int128 v3 = *this;
  *a2 = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

BOOL ctu::rest::convert_copy( ctu::rest *this, xpc_object_t *a2, const ctu::rest::data_view *a3, const __CFAllocator *a4)
{
  uint64_t v7 = MEMORY[0x186E3CD4C](*a2);
  uint64_t v8 = MEMORY[0x1895F92A8];
  if (v7 != MEMORY[0x1895F92A8])
  {
    unint64_t v9 = (const UInt8 *)ctu::rest::data_view::data(a2);
    CFIndex v10 = ctu::rest::data_view::size(a2);
    *(void *)this = CFDataCreateWithBytesNoCopy(a3, v9, v10, (CFAllocatorRef)*MEMORY[0x189604DC8]);
  }

  return v7 != v8;
}

const void **ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef( const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::SharedRef( const void **a1, const void **a2)
{
  __int128 v3 = *a2;
  *a1 = *a2;
  if (v3) {
    CFRetain(v3);
  }
  return a1;
}

void ctu::XpcClientHelper::~XpcClientHelper(xpc_object_t *this)
{
  *this = 0LL;
}

void ctu::XpcClientHelper::setServer(void *a1)
{
  xpc_object_t object = xpc_null_create();
  ctu::XpcClientHelper::setServer_internal(a1, &object);
  xpc_release(object);
}

void sub_1865D74F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::XpcClientHelper::setServer_internal(void *a1, void *a2)
{
  __int128 v3 = (void *)*a2;
  *a2 = *a1;
  *a1 = v3;
  if (MEMORY[0x186E3CD4C](*a2) == MEMORY[0x1895F9238])
  {
    xpc_object_t v4 = (void *)*a2;
    barrier[0] = MEMORY[0x1895F87A8];
    barrier[1] = 1174405120LL;
    barrier[2] = ___ZN3ctu15XpcClientHelper18setServer_internalEN3xpc10connectionE_block_invoke;
    barrier[3] = &__block_descriptor_tmp_3;
    xpc_object_t object = v4;
    if (v4) {
      xpc_retain(v4);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    xpc_connection_send_barrier((xpc_connection_t)v4, barrier);
    xpc_release(object);
  }

void sub_1865D75C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object)
{
}

void ___ZN3ctu15XpcClientHelper18setServer_internalEN3xpc10connectionE_block_invoke(uint64_t a1)
{
}

xpc_object_t __copy_helper_block_e8_32c22_ZTSN3xpc10connectionE(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c22_ZTSN3xpc10connectionE(uint64_t a1)
{
  *(void *)(a1 + 32) = 0LL;
}

void ctu::XpcClientHelper::flush(_xpc_connection_s **this, const group *a2)
{
  if (MEMORY[0x186E3CD4C](*this) == MEMORY[0x1895F9238])
  {
    gr_name = (dispatch_group_s *)a2->gr_name;
    if (gr_name)
    {
      dispatch_retain(gr_name);
      dispatch_group_enter(gr_name);
    }

    qos_class_t v5 = *this;
    barrier[0] = MEMORY[0x1895F87A8];
    barrier[1] = 1174405120LL;
    barrier[2] = ___ZNK3ctu15XpcClientHelper5flushERKN8dispatch5groupE_block_invoke;
    barrier[3] = &__block_descriptor_tmp_1_0;
    dispatch_group_t group = gr_name;
    if (gr_name)
    {
      dispatch_retain(gr_name);
      dispatch_group_enter(gr_name);
    }

    xpc_connection_send_barrier(v5, barrier);
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }

    if (gr_name)
    {
      dispatch_group_leave(gr_name);
      dispatch_release(gr_name);
    }
  }

void sub_1865D7724( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }

  if (v14)
  {
    dispatch_group_leave(v14);
    dispatch_release(v14);
  }

  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(dispatch_object_s **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    xpc_object_t v4 = *(dispatch_group_s **)(a1 + 32);
    if (v4) {
      dispatch_group_enter(v4);
    }
  }

void __destroy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(dispatch_group_s **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    __int128 v3 = *(dispatch_object_s **)(a1 + 32);
    if (v3) {
      dispatch_release(v3);
    }
  }

double ctu::PropertyRestResource::PropertyRestResource(ctu::PropertyRestResource *this, char a2)
{
  *(void *)this = off_189E94660;
  *((_BYTE *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = a2;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0LL;
  return result;
}

{
  double result;
  *(void *)this = off_189E94660;
  *((_BYTE *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = a2;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0LL;
  return result;
}

void ctu::PropertyRestResource::~PropertyRestResource(ctu::PropertyRestResource *this)
{
  *(void *)this = off_189E94660;
  boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::~vector((void *)this + 8);
  boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::~vector((void *)this + 5);
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    __int128 v3 = (void **)(*((void *)this + 2) + 24LL);
    do
    {
      std::unique_ptr<ctu::PropertyRestResourceState>::reset[abi:ne180100](v3, 0LL);
      v3 += 4;
      --v2;
    }

    while (v2);
  }

  if (*((void *)this + 4)) {
    operator delete(*((void **)this + 2));
  }
}

{
  void *v1;
  ctu::PropertyRestResource::~PropertyRestResource(this);
  operator delete(v1);
}

uint64_t ctu::PropertyRestResource::handleRestMessage_GET( ctu::PropertyRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  size_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v12 = v5;
  __int128 v13 = v5;
  __int128 v6 = *((_OWORD *)a3 + 1);
  v11[0] = *(_OWORD *)a3;
  v11[1] = v6;
  switch((int)v12)
  {
    case 1:
      ctu::PropertyRestResource::handleMessage_Root_GET(this, a2);
      break;
    case 2:
      ctu::PropertyRestResource::handleMessage_Meta_GET(v7, (uint64_t)a2);
      break;
    case 3:
      ctu::PropertyRestResource::handleMessage_Meta_Watchers_GET(this, a2);
      break;
    case 4:
      ctu::PropertyRestResource::handleMessage_Meta_Watched_GET(this, a2);
      break;
    case 5:
      ctu::PropertyRestResource::handleMessage_Meta_Watched_Meta_Watchers_GET(this, a2);
      break;
    case 6:
      ctu::PropertyRestResource::handleMessage_DumpState_GET(this, a2);
      break;
    case 7:
      ctu::PropertyRestResource::handleMessage_Resource_GET( (uint64_t)this,  (uint64_t)a2,  v8,  *((void **)&v12 + 1),  v13,  *((void **)&v13 + 1),  v14);
      break;
    case 8:
      ctu::PropertyRestResource::handleMessage_Resource_Meta_GET(v7, (uint64_t)a2);
      break;
    case 9:
      ctu::PropertyRestResource::handleMessage_Resource_Watchers_GET( (uint64_t)this,  (uint64_t)a2,  v8,  *((void **)&v12 + 1),  v13);
      break;
    default:
      xpc_object_t object = xpc_null_create();
      (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32LL))(a2, &object);
      xpc_release(object);
      break;
  }

  return 1LL;
}

void sub_1865D79F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t anonymous namespace'::sParsePath(uint64_t result, void *a2)
{
  uint64_t v2 = (_DWORD *)result;
  *(void *)double result = 0xAAAAAAAA00000000LL;
  *(_OWORD *)(result + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0u;
  *(_OWORD *)(result + memset(&context, 0, 24) = 0u;
  unint64_t v3 = a2[3];
  if (!v3)
  {
    int v15 = 1;
    goto LABEL_50;
  }

  __int128 v5 = (unsigned __int8 *)a2[2];
  if (v3 == 1)
  {
    int v6 = *v5;
    if (v6 == 42)
    {
      double result = ctu::PathView::advance((uint64_t)a2, 1LL);
      if (a2[3]) {
        return result;
      }
      int v15 = 6;
      goto LABEL_50;
    }

    if (v6 == 95)
    {
      double result = ctu::PathView::advance((uint64_t)a2, 1LL);
      uint64_t v7 = a2[3];
      if (v7)
      {
        uint64_t v8 = (int *)a2[2];
        if (v7 == 8)
        {
          if (*(void *)v8 != 0x7372656863746177LL) {
            return result;
          }
          double result = ctu::PathView::advance((uint64_t)a2, 1LL);
          if (a2[3]) {
            return result;
          }
          int v15 = 3;
        }

        else
        {
          if (v7 != 7) {
            return result;
          }
          int v9 = *v8;
          int v10 = *(int *)((char *)v8 + 3);
          if (v9 != 1668571511 || v10 != 1684367459) {
            return result;
          }
          double result = ctu::PathView::advance((uint64_t)a2, 1LL);
          uint64_t v12 = a2[3];
          if (v12)
          {
            if (v12 != 1) {
              return result;
            }
            if (*(_BYTE *)a2[2] != 95) {
              return result;
            }
            double result = ctu::PathView::advance((uint64_t)a2, 1LL);
            if (a2[3] != 8LL) {
              return result;
            }
            __int128 v13 = (void *)a2[2];
            if (*v13 != 0x7372656863746177LL) {
              return result;
            }
            size_t v14 = (void *)(*a2 + a2[1]);
            int v15 = 5;
          }

          else
          {
            int v15 = 4;
          }
        }
      }

      else
      {
        int v15 = 2;
      }

LABEL_50:
      *uint64_t v2 = v15;
      return result;
    }
  }

  unint64_t v16 = 0LL;
  *(_DWORD *)double result = 7;
  while (v5[v16] != 64)
  {
    if (v3 == ++v16)
    {
      unint64_t v17 = 0LL;
      unint64_t v18 = 0LL;
      unint64_t v19 = v3;
      goto LABEL_37;
    }
  }

  if (v16 >= v3) {
    unint64_t v19 = v3;
  }
  else {
    unint64_t v19 = v16;
  }
  if (v16 + 1 < v3) {
    unint64_t v20 = v16 + 1;
  }
  else {
    unint64_t v20 = v3;
  }
  CFTypeID v21 = &v5[v20];
  unint64_t v18 = v3 - v20;
  BOOL v22 = v16 == -1LL;
  if (v16 == -1LL) {
    unint64_t v17 = 0LL;
  }
  else {
    unint64_t v17 = v21;
  }
  if (v22)
  {
    unint64_t v18 = 0LL;
    unint64_t v19 = v3;
  }

      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }

    goto LABEL_22;
  }

  int v6 = (unint64_t *)(a1 + 40);
  __int128 v5 = *(_BYTE **)(a1 + 48);
  __int128 v13 = *(void *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      uint64_t v24 = *v6;
      __int128 v25 = &v5[-*v6];
      uint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        uint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          uint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          __int128 v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          __int128 v28 = v26;
        }
        if (v28) {
          uint64_t v12 = operator new(v28);
        }
        else {
          uint64_t v12 = 0LL;
        }
        unint64_t v20 = &v25[(void)v12];
        CFTypeID v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        unint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          __int128 v31 = &v5[~v24];
          do
          {
            __int128 v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }

          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }

        goto LABEL_46;
      }

      goto LABEL_50;
    }

    *(void *)__int128 v5 = v11;
    a1[2] += 8LL;
    goto LABEL_54;
  }

LABEL_37:
  *(void *)(result + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v5;
  *(void *)(result + 16) = v19;
  *(void *)(result + memset(&context, 0, 24) = v17;
  *(void *)(result + 32) = v18;
  if (!v19)
  {
LABEL_49:
    int v15 = 0;
    goto LABEL_50;
  }

  uint64_t v23 = &v5[v3];
  uint64_t v24 = (unsigned __int8 *)(*a2 + a2[1]);
  if (v24 != v23 && v23 + 1 != v24)
  {
    double result = ctu::PathView::advance((uint64_t)a2, 1LL);
    if (a2[3] == 1LL && *(_BYTE *)a2[2] == 95)
    {
      double result = ctu::PathView::advance((uint64_t)a2, 1LL);
      uint64_t v26 = a2[3];
      if (!v26)
      {
        int v15 = 8;
        goto LABEL_50;
      }

      if (v26 == 8)
      {
        uint64_t v27 = (void *)a2[2];
        if (*v27 == 0x7372656863746177LL)
        {
          __int128 v28 = (void *)(*a2 + a2[1]);
          int v15 = 9;
        }
      }
    }

    goto LABEL_49;
  }

  return result;
}

  xpc_release(v32[0]);
  uint64_t v27 = (std::__shared_weak_count *)v36;
  if (v36)
  {
    __int128 v28 = (unint64_t *)(v36 + 8);
    do
      __int128 v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }

        ctu::rest::WatchableRestResourceHelper::removeWatcher((void *)(*(void *)(v27 + 24) + 72LL), &v45);
        goto LABEL_38;
      }

      size_t v14 = 1;
    }

    else
    {
LABEL_17:
      size_t v14 = 0;
    }

    unint64_t v17 = v10[3];
    unint64_t v16 = v10[4];
    int v15 = v10 + 3;
    if (v16)
    {
      unint64_t v18 = 16 * v16;
      unint64_t v19 = v17 + 8;
      while (!*(void *)v19 || *(void *)(*(void *)v19 + 8LL) == -1LL)
      {
        v19 += 16LL;
        v18 -= 16LL;
        if (!v18) {
          goto LABEL_23;
        }
      }

      unint64_t v20 = 1;
    }

    else
    {
LABEL_23:
      unint64_t v20 = 0;
    }

    __int128 v39 = v45;
    __int128 v40 = v46;
    if (v46)
    {
      CFTypeID v21 = (unint64_t *)&v46->__shared_owners_;
      do
        BOOL v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }

    std::string __p = (void *)0xAAAAAAAAAAAAAAAALL;
    __int128 v48 = 0xAAAAAAAAAAAAAAAALL;
    boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::emplace_unique<std::shared_ptr<ctu::RestResourceConnection>>( v15,  (unint64_t *)&v39,  (__n128 **)&__p);
    uint64_t v24 = v40;
    if (v40)
    {
      __int128 v25 = (unint64_t *)&v40->__shared_owners_;
      do
        uint64_t v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    uint64_t v27 = v44;
    if (((v14 | v20) & 1) == 0) {
      ctu::AssertionRestResource::notifyProvider(v23, a2, a3, *(const ctu::AssertionRestResourceState **)(v44 + 24));
    }
    goto LABEL_37;
  }

uint64_t ctu::PropertyRestResource::handleMessage_Root_GET( ctu::PropertyRestResource *this, ctu::RestResourceContext *a2)
{
  xpc_object_t v5 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32LL))(a2, &v5);
  xpc_release(v5);
  xpc_object_t v5 = 0LL;
  xpc_release(object);
  return 1LL;
}

void sub_1865D7D54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
}

uint64_t ctu::PropertyRestResource::handleMessage_Meta_GET(uint64_t a1, uint64_t a2)
{
  xpc_object_t v3 = v6;
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v6);
  xpc_object_t v6 = 0LL;
  xpc_release(v5);
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)a2 + 32LL))(a2, &object);
  xpc_release(object);
  xpc_release(v3);
  return 1LL;
}

void sub_1865D7E44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, uint64_t a11, xpc_object_t object)
{
}

uint64_t ctu::PropertyRestResource::handleMessage_Meta_Watchers_GET( ctu::PropertyRestResource *this, ctu::RestResourceContext *a2)
{
  xpc_object_t v5 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32LL))(a2, &v5);
  xpc_release(v5);
  xpc_object_t v5 = 0LL;
  xpc_release(object);
  return 1LL;
}

void sub_1865D7F24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
}

uint64_t ctu::PropertyRestResource::handleMessage_Meta_Watched_GET( ctu::PropertyRestResource *this, ctu::RestResourceContext *a2)
{
  xpc_object_t v5 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32LL))(a2, &v5);
  xpc_release(v5);
  xpc_object_t v5 = 0LL;
  xpc_release(object);
  return 1LL;
}

void sub_1865D7FCC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
}

uint64_t ctu::PropertyRestResource::handleMessage_Meta_Watched_Meta_Watchers_GET( ctu::PropertyRestResource *this, ctu::RestResourceContext *a2)
{
  xpc_object_t v5 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32LL))(a2, &v5);
  xpc_release(v5);
  xpc_object_t v5 = 0LL;
  xpc_release(object);
  return 1LL;
}

void sub_1865D8078( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
}

uint64_t ctu::PropertyRestResource::handleMessage_DumpState_GET( ctu::PropertyRestResource *this, ctu::RestResourceContext *a2)
{
  if (*((_BYTE *)this + 8))
  {
    __p.__r_.__value_.__l.__cap_ = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v12 = v3;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v3;
    __int128 v11 = v3;
    ctu::ReplyDictRestResourceContextDecorator::ReplyDictRestResourceContextDecorator( (ctu::ReplyDictRestResourceContextDecorator *)&v11,  a2);
    uint64_t v4 = *((void *)this + 3);
    if (v4)
    {
      xpc_object_t v5 = (const std::string *)*((void *)this + 2);
      xpc_object_t v6 = (const std::string *)((char *)v5 + 32 * v4);
      do
      {
        std::string::operator=(&__p, v5);
        ctu::ReplyDictRestResourceContextDecorator::sendReplyWithValue( (uint64_t)&v11,  (void **)(v5[1].__r_.__value_.__r.__words[0] + 24));
        xpc_object_t v5 = (const std::string *)((char *)v5 + 32);
      }

      while (v5 != v6);
    }

    *(void *)&__int128 v11 = off_189E95FB8;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)&v12 + 1);
    if (*((void *)&v12 + 1))
    {
      uint64_t v8 = (unint64_t *)(*((void *)&v12 + 1) + 8LL);
      do
        unint64_t v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }

  return 1LL;
}

void sub_1865D8190( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t ctu::PropertyRestResource::handleMessage_Resource_GET( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, size_t a5, void *a6, size_t a7)
{
  xpc_object_t object = xpc_null_create();
  if (*(_BYTE *)(a1 + 8))
  {
    if (a4)
    {
      std::string::basic_string[abi:ne180100](&__p, a4, a5);
    }

    else
    {
      std::string __p = 0LL;
      uint64_t v23 = 0LL;
      uint64_t v24 = 0LL;
    }

    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find( (uint64_t)&v25,  (void ***)(a1 + 16),  &__p);
    uint64_t v13 = v25;
    if (SHIBYTE(v24) < 0) {
      operator delete(__p);
    }
    if (v13 != *(void *)(a1 + 16) + 32LL * *(void *)(a1 + 24))
    {
      uint64_t v14 = *(void *)(v13 + 24);
      xpc_object_t v15 = *(xpc_object_t *)(v14 + 24);
      if (v15) {
        xpc_retain(*(xpc_object_t *)(v14 + 24));
      }
      else {
        xpc_object_t v15 = xpc_null_create();
      }
      xpc_object_t v16 = object;
      xpc_object_t object = v15;
      xpc_release(v16);
      if (a7)
      {
        if (a6)
        {
          std::string::basic_string[abi:ne180100](&__p, a6, a7);
        }

        else
        {
          std::string __p = 0LL;
          uint64_t v23 = 0LL;
          uint64_t v24 = 0LL;
        }

        xpc::get_subpath(&object, (uint64_t)&__p, &v20);
        xpc_object_t v18 = v20;
        xpc_object_t v17 = object;
        xpc_object_t v20 = object;
        xpc_object_t object = v18;
        xpc_release(v17);
        xpc_object_t v20 = 0LL;
        if (SHIBYTE(v24) < 0) {
          operator delete(__p);
        }
      }
    }

    (*(void (**)(uint64_t, xpc_object_t *))(*(void *)a2 + 32LL))(a2, &object);
  }

  else
  {
    (*(void (**)(uint64_t, xpc_object_t *))(*(void *)a2 + 32LL))(a2, &object);
  }

  xpc_release(object);
  return 1LL;
}

void sub_1865D8308( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

uint64_t ctu::PropertyRestResource::handleMessage_Resource_Meta_GET(uint64_t a1, uint64_t a2)
{
  xpc_object_t v3 = v5;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)a2 + 32LL))(a2, &object);
  xpc_release(object);
  xpc_release(v3);
  return 1LL;
}

void sub_1865D83F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t ctu::PropertyRestResource::handleMessage_Resource_Watchers_GET( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, size_t a5)
{
  xpc_object_t v9 = xpc_null_create();
  if (a4)
  {
    std::string::basic_string[abi:ne180100](__p, a4, a5);
  }

  else
  {
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v16 = 0LL;
  }

  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find( (uint64_t)&v17,  (void ***)(a1 + 16),  __p);
  uint64_t v10 = v17;
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (v10 == *(void *)(a1 + 16) + 32LL * *(void *)(a1 + 24))
  {
    xpc_object_t v12 = xpc_array_create(0LL, 0LL);
    if (v12 || (xpc_object_t v12 = xpc_null_create()) != 0LL)
    {
      if (MEMORY[0x186E3CD4C](v12) == MEMORY[0x1895F9220])
      {
        xpc_retain(v12);
        xpc_object_t v11 = v12;
      }

      else
      {
        xpc_object_t v11 = xpc_null_create();
      }
    }

    else
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v12 = 0LL;
    }

    xpc_release(v12);
    xpc_object_t v13 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v13);
  }

  else
  {
    ctu::rest::WatchableRestResourceHelper::getWatcherNames(*(ctu::rest::WatchableRestResourceHelper **)(v10 + 24), __p);
    xpc_object_t v11 = __p[0];
    __p[0] = xpc_null_create();
    xpc_release(v9);
    xpc_release(__p[0]);
  }

  __p[0] = v11;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    __p[0] = xpc_null_create();
  }
  (*(void (**)(uint64_t, void **))(*(void *)a2 + 32LL))(a2, __p);
  xpc_release(__p[0]);
  xpc_release(v11);
  return 1LL;
}

void sub_1865D85F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
}

BOOL ctu::PropertyRestResource::handleRestMessage_SET( ctu::PropertyRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  uint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v10 = v6;
  __int128 v11 = v6;
  __int128 v7 = *((_OWORD *)a3 + 1);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v7;
  if ((_DWORD)v10 == 6) {
    return 0LL;
  }
  if ((_DWORD)v10 == 7) {
    return ctu::PropertyRestResource::handleMessage_Resource_SET( (uint64_t)this,  a2,  a3,  *((_BYTE **)&v10 + 1),  v11,  *((uint64_t *)&v11 + 1),  v12);
  }
  return 1LL;
}

BOOL ctu::PropertyRestResource::handleMessage_Resource_SET( uint64_t a1, ctu::RestResourceContext *a2, const ctu::PathView *a3, _BYTE *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (a7) {
    return a7 == 0;
  }
  (*(void (**)(xpc_object_t *__return_ptr, ctu::RestResourceContext *))(*(void *)a2 + 24LL))(&object, a2);
  if (a4) {
    std::string::basic_string[abi:ne180100](&__p, a4, a5);
  }
  else {
    memset(&__p, 0, sizeof(__p));
  }
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find( (uint64_t)&v26,  (void ***)(a1 + 16),  (void **)&__p.__r_.__value_.__l.__data_);
  if ((char)__p.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (a4) {
      goto LABEL_7;
    }
  }

  else if (a4)
  {
LABEL_7:
    std::string::basic_string[abi:ne180100](&__p, a4, a5);
    goto LABEL_10;
  }

  memset(&__p, 0, sizeof(__p));
LABEL_10:
  BOOL v13 = ctu::PropertyRestResource::createIfNotPresent(a1, (uint64_t)&__p, &v26);
  BOOL v14 = v13;
  if ((char)__p.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v14) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  if (v13) {
LABEL_14:
  }
    ctu::PropertyRestResource::sendResourcesNotification((ctu::PropertyRestResource *)a1, a2, a3);
LABEL_15:
  if (*(_BYTE *)(a1 + 8))
  {
    xpc_object_t v15 = object;
    if (object) {
      xpc_retain(object);
    }
    else {
      xpc_object_t v15 = xpc_null_create();
    }
    uint64_t v16 = *(void *)(v26 + 24);
    uint64_t v17 = *(void **)(v16 + 24);
    *(void *)(v16 + memset(&context, 0, 24) = v15;
    xpc_release(v17);
  }

  if (*((void *)a3 + 3))
  {
    xpc_object_t v18 = *(void **)a3;
    unint64_t v19 = *((void *)a3 + 2) - *(void *)a3;
    if (v19 > 1)
    {
      if (v19 - 1 >= *((void *)a3 + 1)) {
        size_t v20 = *((void *)a3 + 1);
      }
      else {
        size_t v20 = v19 - 1;
      }
    }

    else if (v19 >= *((void *)a3 + 1))
    {
      size_t v20 = *((void *)a3 + 1);
    }

    else
    {
      size_t v20 = *((void *)a3 + 2) - *(void *)a3;
    }
  }

  else
  {
    xpc_object_t v18 = *(void **)a3;
    size_t v20 = *((void *)a3 + 1);
  }

  memset(&__p, 170, sizeof(__p));
  if (v18) {
    std::string::basic_string[abi:ne180100](&__p, v18, v20);
  }
  else {
    memset(&__p, 0, sizeof(__p));
  }
  ctu::path_join_impl(&__p, a4, a5);
  uint64_t v21 = *(void *)(v26 + 24);
  uint64_t v30 = 0LL;
  BOOL v22 = operator new(0x20uLL);
  *BOOL v22 = off_189E946D8;
  v22[1] = a2;
  v22[2] = &__p;
  _OWORD v22[3] = &object;
  uint64_t v30 = v22;
  ctu::rest::WatchableRestResourceHelper::map(v21, (uint64_t)v29);
  uint64_t v23 = v30;
  if (v30 == v29)
  {
    uint64_t v24 = 4LL;
    uint64_t v23 = v29;
    goto LABEL_36;
  }

  if (v30)
  {
    uint64_t v24 = 5LL;
LABEL_36:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }

  xpc_release(object);
  return a7 == 0;
}

void sub_1865D893C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

uint64_t ctu::PropertyRestResource::handleRestMessage_POP( ctu::PropertyRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v10 = v6;
  __int128 v11 = v6;
  __int128 v7 = *((_OWORD *)a3 + 1);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v7;
  uint64_t result = 1LL;
  switch((int)v10)
  {
    case 1:
      ctu::PropertyRestResource::handleMessage_Root_POP(this, a2);
      goto LABEL_6;
    case 2:
    case 3:
    case 5:
    case 8:
    case 9:
      return result;
    case 4:
      ctu::PropertyRestResource::handleMessage_Meta_Watched_POP(this, a2);
      goto LABEL_6;
    case 7:
      ctu::PropertyRestResource::handleMessage_Resource_POP((void ***)this, a2, a3, *((void **)&v10 + 1), v11);
LABEL_6:
      uint64_t result = 1LL;
      break;
    default:
      uint64_t result = 0LL;
      break;
  }

  return result;
}

uint64_t ctu::PropertyRestResource::handleMessage_Root_POP( ctu::PropertyRestResource *this, ctu::RestResourceContext *a2)
{
  uint64_t v2 = (void *)((char *)this + 40);
  (**(void (***)(uint64_t *__return_ptr, ctu::RestResourceContext *))a2)(&v7, a2);
  ctu::rest::WatchableRestResourceHelper::removeWatcher(v2, &v7);
  xpc_object_t v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  return 1LL;
}

void sub_1865D8B1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ctu::PropertyRestResource::handleMessage_Meta_Watched_POP( ctu::PropertyRestResource *this, ctu::RestResourceContext *a2)
{
  uint64_t v2 = (void *)((char *)this + 64);
  (**(void (***)(uint64_t *__return_ptr, ctu::RestResourceContext *))a2)(&v7, a2);
  ctu::rest::WatchableRestResourceHelper::removeWatcher(v2, &v7);
  xpc_object_t v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  return 1LL;
}

void sub_1865D8BB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ctu::PropertyRestResource::handleMessage_Resource_POP( void ***a1, ctu::RestResourceContext *a2, const ctu::PathView *a3, void *a4, size_t a5)
{
  uint64_t v8 = a1 + 2;
  if (a4)
  {
    std::string::basic_string[abi:ne180100](&__p, a4, a5);
  }

  else
  {
    std::string __p = 0LL;
    unint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
  }

  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find( (uint64_t)&v21,  v8,  &__p);
  uint64_t v9 = v21;
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  if ((void **)v9 != &a1[2][4 * (void)a1[3]])
  {
    __int128 v10 = *(void **)(v9 + 24);
    uint64_t v11 = v10[1];
    (**(void (***)(void **__return_ptr, ctu::RestResourceContext *))a2)(&__p, a2);
    int v12 = ctu::rest::WatchableRestResourceHelper::removeWatcher(v10, &__p);
    int v13 = v12;
    BOOL v14 = v19;
    if (!v19) {
      goto LABEL_11;
    }
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if (!v13) {
        return 1LL;
      }
    }

    else
    {
LABEL_11:
      if (!v12) {
        return 1LL;
      }
    }

    if ((v11 != 0) != (*(void *)(*(void *)(v9 + 24) + 8LL) != 0LL)) {
      ctu::PropertyRestResource::sendWatchedResourcesNotification((ctu::PropertyRestResource *)a1, a2, a3);
    }
  }

  return 1LL;
}

void sub_1865D8D04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ctu::PropertyRestResource::handleRestMessage_PUSH( ctu::PropertyRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v14 = v6;
  __int128 v15 = v6;
  __int128 v7 = *((_OWORD *)a3 + 1);
  v13[0] = *(_OWORD *)a3;
  v13[1] = v7;
  uint64_t result = 1LL;
  switch((int)v14)
  {
    case 1:
      __int128 v9 = *((_OWORD *)a3 + 1);
      v12[0] = *(_OWORD *)a3;
      v12[1] = v9;
      ctu::PropertyRestResource::handleMessage_Root_PUSH((uint64_t *)this, (uint64_t)a2, (void **)v12);
      goto LABEL_6;
    case 2:
    case 3:
    case 5:
    case 8:
    case 9:
      return result;
    case 4:
      __int128 v10 = *((_OWORD *)a3 + 1);
      v11[0] = *(_OWORD *)a3;
      v11[1] = v10;
      ctu::PropertyRestResource::handleMessage_Meta_Watched_PUSH((uint64_t *)this, (uint64_t)a2, (void **)v11);
      goto LABEL_6;
    case 7:
      ctu::PropertyRestResource::handleMessage_Resource_PUSH( (void ***)this,  a2,  (uint64_t)a3,  *((_BYTE **)&v14 + 1),  v15);
LABEL_6:
      uint64_t result = 1LL;
      break;
    default:
      uint64_t result = 0LL;
      break;
  }

  return result;
}

uint64_t ctu::PropertyRestResource::handleMessage_Root_PUSH(uint64_t *a1, uint64_t a2, void **a3)
{
  (**(void (***)(unint64_t *__return_ptr, uint64_t))a2)(&v29, a2);
  if (!v29) {
    goto LABEL_38;
  }
  unint64_t v27 = v29;
  __int128 v28 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  memset(string, 170, sizeof(string));
  boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::emplace_unique<std::shared_ptr<ctu::RestResourceConnection>>( a1 + 5,  &v27,  (__n128 **)string);
  uint64_t v8 = v28;
  if (v28)
  {
    __int128 v9 = (unint64_t *)&v28->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  ctu::PathView::advance((uint64_t)a3, 1LL);
  unint64_t v11 = v29;
  int v12 = (const char *)(v29 + 8);
  xpc_object_t v26 = xpc_string_create(v12);
  if (!v26) {
    xpc_object_t v26 = xpc_null_create();
  }
  if (a3[3])
  {
    int v13 = *a3;
    unint64_t v14 = (_BYTE *)a3[2] - (_BYTE *)*a3;
    if (v14 > 1)
    {
      else {
        size_t v15 = v14 - 1;
      }
      if (!v13) {
        goto LABEL_29;
      }
    }

    else
    {
      else {
        size_t v15 = (_BYTE *)a3[2] - (_BYTE *)*a3;
      }
      if (!v13) {
        goto LABEL_29;
      }
    }

LABEL_22:
    std::string::basic_string[abi:ne180100](string, v13, v15);
    if (v24 >= 0) {
      unint64_t v16 = string;
    }
    else {
      unint64_t v16 = *(char **)string;
    }
    goto LABEL_30;
  }

  int v13 = *a3;
  size_t v15 = (size_t)a3[1];
  if (*a3) {
    goto LABEL_22;
  }
LABEL_29:
  memset(string, 0, sizeof(string));
  unint64_t v16 = string;
  uint64_t v24 = 0LL;
LABEL_30:
  xpc_object_t v25 = xpc_string_create(v16);
  if (!v25) {
    xpc_object_t v25 = xpc_null_create();
  }
  ctu::PropertyRestResource::getResourceArray((ctu::PropertyRestResource *)a1, &object);
  xpc_object_t v22 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v22 = xpc_null_create();
  }
  (*(void (**)(uint64_t, unint64_t, xpc_object_t *, xpc_object_t *, xpc_object_t *))(*(void *)a2 + 48LL))( a2,  v11,  &v26,  &v25,  &v22);
  xpc_release(v22);
  xpc_object_t v22 = 0LL;
  xpc_release(object);
  xpc_release(v25);
  xpc_object_t v25 = 0LL;
  if (SHIBYTE(v24) < 0) {
    operator delete(*(void **)string);
  }
  xpc_release(v26);
LABEL_38:
  uint64_t v17 = v30;
  if (v30)
  {
    xpc_object_t v18 = (unint64_t *)&v30->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  return 1LL;
}

    std::string::basic_string[abi:ne180100](string, v13, v15);
    if (v23 >= 0) {
      unint64_t v16 = string;
    }
    else {
      unint64_t v16 = *(char **)string;
    }
    goto LABEL_30;
  }

  int v13 = *a3;
  size_t v15 = (size_t)a3[1];
  if (*a3) {
    goto LABEL_22;
  }
LABEL_29:
  memset(string, 0, sizeof(string));
  unint64_t v16 = string;
  uint64_t v23 = 0LL;
LABEL_30:
  uint64_t v24 = xpc_string_create(v16);
  if (!v24) {
    uint64_t v24 = xpc_null_create();
  }
  uint64_t v21 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    uint64_t v21 = xpc_null_create();
  }
  (*(void (**)(uint64_t, unint64_t, xpc_object_t *, xpc_object_t *, xpc_object_t *))(*(void *)a2 + 48LL))( a2,  v11,  &v25,  &v24,  &v21);
  xpc_release(v21);
  xpc_release(v24);
  uint64_t v24 = 0LL;
  if (SHIBYTE(v23) < 0) {
    operator delete(*(void **)string);
  }
  xpc_release(v25);
  xpc_release(object);
LABEL_38:
  uint64_t v17 = v30;
  if (v30)
  {
    xpc_object_t v18 = (unint64_t *)&v30->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  return 1LL;
}

      v8 += 32LL;
    }

    while (v8 != v9);
  }

    *unint64_t v5 = v2;
    unint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }

  unint64_t v14 = *v6;
  size_t v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  uint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    xpc_object_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    xpc_object_t v18 = v16;
  }
  if (v18) {
    int v12 = operator new(v18);
  }
  else {
    int v12 = 0LL;
  }
  uint64_t v20 = &v15[(void)v12];
  uint64_t v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  unint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    unint64_t v29 = &v5[~v14];
    do
    {
      uint64_t v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }

    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }

  if (v7)
  {
    uint64_t v20 = (unint64_t *)&v7->__shared_owners_;
    do
      uint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  return std::unique_ptr<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1>(ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1 &&)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1 &&>>::~unique_ptr[abi:ne180100](&v23);
}

void sub_1865D9040( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, xpc_object_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, xpc_object_t a18, xpc_object_t object, char a20)
{
}

uint64_t ctu::PropertyRestResource::handleMessage_Meta_Watched_PUSH(uint64_t *a1, uint64_t a2, void **a3)
{
  (**(void (***)(unint64_t *__return_ptr, uint64_t))a2)(&v29, a2);
  if (!v29) {
    goto LABEL_38;
  }
  unint64_t v27 = v29;
  __int128 v28 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  memset(string, 170, sizeof(string));
  boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::emplace_unique<std::shared_ptr<ctu::RestResourceConnection>>( a1 + 8,  &v27,  (__n128 **)string);
  uint64_t v8 = v28;
  if (v28)
  {
    __int128 v9 = (unint64_t *)&v28->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  ctu::PathView::advance((uint64_t)a3, 2LL);
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::PropertyRestResource::getWatchedResourceArray((ctu::PropertyRestResource *)a1, &object);
  unint64_t v11 = v29;
  int v12 = (const char *)(v29 + 8);
  xpc_object_t v25 = xpc_string_create(v12);
  if (!v25) {
    xpc_object_t v25 = xpc_null_create();
  }
  if (a3[3])
  {
    int v13 = *a3;
    unint64_t v14 = (_BYTE *)a3[2] - (_BYTE *)*a3;
    if (v14 > 1)
    {
      else {
        size_t v15 = v14 - 1;
      }
      if (!v13) {
        goto LABEL_29;
      }
    }

    else
    {
      else {
        size_t v15 = (_BYTE *)a3[2] - (_BYTE *)*a3;
      }
      if (!v13) {
        goto LABEL_29;
      }
    }

void sub_1865D932C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t a17, xpc_object_t object, xpc_object_t a19, char a20)
{
}

uint64_t ctu::PropertyRestResource::handleMessage_Resource_PUSH( void ***a1, ctu::RestResourceContext *a2, uint64_t a3, _BYTE *a4, size_t a5)
{
  unint64_t v10 = a1 + 2;
  if (a4) {
    std::string::basic_string[abi:ne180100](__p, a4, a5);
  }
  else {
    memset(__p, 0, 24);
  }
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find( (uint64_t)&v41,  v10,  (void **)__p);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (a4) {
      goto LABEL_6;
    }
  }

  else if (a4)
  {
LABEL_6:
    std::string::basic_string[abi:ne180100](__p, a4, a5);
    goto LABEL_9;
  }

  memset(__p, 0, 24);
LABEL_9:
  BOOL v11 = ctu::PropertyRestResource::createIfNotPresent((uint64_t)a1, (uint64_t)__p, &v41);
  BOOL v12 = v11;
  if ((__p[23] & 0x80000000) == 0)
  {
    if (!v11) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

  operator delete(*(void **)__p);
  if (v12)
  {
LABEL_11:
    __int128 v13 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    *(_OWORD *)&__p[16] = v13;
    ctu::PathView::advance((uint64_t)__p, -2LL);
    ctu::PropertyRestResource::sendResourcesNotification( (ctu::PropertyRestResource *)a1,  a2,  (const ctu::PathView *)__p);
  }

void sub_1865D96F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

void sub_1865D9764( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1865D975CLL);
}

uint64_t ctu::PropertyRestResource::handleRestMessage_NOTIFY()
{
  return 0LL;
}

void ctu::PropertyRestResource::getResourceArray( ctu::PropertyRestResource *this@<X0>, xpc_object_t *a2@<X8>)
{
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_array_create(0LL, 0LL);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v5) == MEMORY[0x1895F9220])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }

  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  uint64_t v7 = *((void *)this + 3);
  if (v7)
  {
    uint64_t v8 = (__int128 *)*((void *)this + 2);
    uint64_t v9 = 32 * v7;
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }

      else
      {
        __int128 v10 = *v8;
        __p.__r_.__value_.__l.__cap_ = *((void *)v8 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
      }

      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v12 = xpc_string_create((const char *)p_p);
      if (!v12) {
        xpc_object_t v12 = xpc_null_create();
      }
      xpc_array_append_value(*a2, v12);
      xpc_release(v12);
      v8 += 2;
      v9 -= 32LL;
    }

    while (v9);
  }

void sub_1865D98D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t ctu::PropertyRestResource::handleDroppedConnection( uint64_t a1, ctu::RestResourceContext *a2, _OWORD *a3, void *a4)
{
  __int128 v8 = a3[1];
  v16[0] = *a3;
  v16[1] = v8;
  uint64_t result = ctu::PathView::advance((uint64_t)v16, 1LL);
  uint64_t v10 = *(void *)(a1 + 24);
  if (v10)
  {
    BOOL v11 = *(void ***)(a1 + 16);
    uint64_t v12 = 32 * v10;
    do
    {
      int v13 = *((char *)v11 + 23);
      if (v13 >= 0) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = *v11;
      }
      if (v13 >= 0) {
        size_t v15 = *((unsigned __int8 *)v11 + 23);
      }
      else {
        size_t v15 = (size_t)v11[1];
      }
      uint64_t result = ctu::PropertyRestResource::handleMessage_Resource_POP( (void ***)a1,  a2,  (const ctu::PathView *)v16,  v14,  v15);
      v11 += 4;
      v12 -= 32LL;
    }

    while (v12);
  }

  return result;
}

void ctu::PropertyRestResource::getWatchedResourceArray( ctu::PropertyRestResource *this@<X0>, xpc_object_t *a2@<X8>)
{
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_array_create(0LL, 0LL);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v5) == MEMORY[0x1895F9220])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }

  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  uint64_t v7 = *((void *)this + 3);
  if (v7)
  {
    uint64_t v8 = *((void *)this + 2);
    uint64_t v9 = v8 + 32 * v7;
    do
    {
      uint64_t v10 = *(uint64_t **)(v8 + 24);
      uint64_t v11 = v10[1];
      if (v11)
      {
        uint64_t v12 = *v10;
        uint64_t v13 = 16 * v11;
        uint64_t v14 = v12 + 8;
        while (!*(void *)v14 || *(void *)(*(void *)v14 + 8LL) == -1LL)
        {
          v14 += 16LL;
          v13 -= 16LL;
          if (!v13) {
            goto LABEL_22;
          }
        }

        size_t v15 = (const char *)v8;
        xpc_object_t v16 = xpc_string_create(v15);
        if (!v16) {
          xpc_object_t v16 = xpc_null_create();
        }
        xpc_array_append_value(*a2, v16);
        xpc_release(v16);
      }

void sub_1865D9B00(_Unwind_Exception *a1)
{
}

void ctu::PropertyRestResource::sendWatchedResourcesNotification( ctu::PropertyRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (*((void *)this + 9))
  {
    if (*((void *)a3 + 3))
    {
      xpc_object_t v5 = *(void **)a3;
      unint64_t v6 = *((void *)a3 + 2) - *(void *)a3;
      if (v6 > 1)
      {
        if (v6 - 1 >= *((void *)a3 + 1)) {
          size_t v7 = *((void *)a3 + 1);
        }
        else {
          size_t v7 = v6 - 1;
        }
      }

      else if (v6 >= *((void *)a3 + 1))
      {
        size_t v7 = *((void *)a3 + 1);
      }

      else
      {
        size_t v7 = *((void *)a3 + 2) - *(void *)a3;
      }
    }

    else
    {
      xpc_object_t v5 = *(void **)a3;
      size_t v7 = *((void *)a3 + 1);
    }

    memset(&__p, 170, sizeof(__p));
    if (v5) {
      std::string::basic_string[abi:ne180100](&__p, v5, v7);
    }
    else {
      memset(&__p, 0, sizeof(__p));
    }
    ctu::path_join_impl(&__p, "_", 1uLL);
    ctu::path_join_impl(&__p, "watched", 7uLL);
    xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    ctu::PropertyRestResource::getWatchedResourceArray(this, &object);
    uint64_t v14 = 0LL;
    uint64_t v8 = operator new(0x20uLL);
    void *v8 = off_189E947E8;
    v8[1] = a2;
    v8[2] = &__p;
    void v8[3] = &object;
    uint64_t v14 = v8;
    ctu::rest::WatchableRestResourceHelper::map((uint64_t)this + 64, (uint64_t)v13);
    uint64_t v9 = v14;
    if (v14 == v13)
    {
      uint64_t v10 = 4LL;
      uint64_t v9 = v13;
    }

    else
    {
      if (!v14) {
        goto LABEL_19;
      }
      uint64_t v10 = 5LL;
    }

    (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_19:
    xpc_release(object);
  }

void sub_1865D9CA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

BOOL ctu::PropertyRestResource::createIfNotPresent(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  xpc_object_t v3 = (char *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 16) + 32LL * *(void *)(a1 + 24);
  uint64_t v5 = *a3;
  if (*a3 == v4)
  {
    if (*(_BYTE *)(a1 + 8))
    {
      uint64_t v9 = operator new(0x20uLL);
      *uint64_t v9 = 0u;
      v9[1] = 0u;
      *((void *)v9 + 3) = xpc_null_create();
    }

    else
    {
      uint64_t v9 = operator new(0x18uLL);
      *((void *)v9 + 1) = 0LL;
      *((void *)v9 + 2) = 0LL;
      *(void *)uint64_t v9 = 0LL;
    }

    *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)unint64_t v25 = v10;
    *(_OWORD *)&_OWORD v25[16] = v10;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external( (std::string *)v25,  *(const std::string::value_type **)a2,  *(void *)(a2 + 8));
    }

    else
    {
      *(_OWORD *)unint64_t v25 = *(_OWORD *)a2;
      *(void *)&_OWORD v25[16] = *(void *)(a2 + 16);
    }

    *(void *)&v25[24] = v9;
    uint64_t v11 = *(void *)(a1 + 16);
    unint64_t v12 = *(void *)(a1 + 24);
    uint64_t v13 = v11 + 32 * v12;
    while (v12)
    {
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( (void *)(v11 + 32 * (v12 >> 1)),  (void **)v25) & 0x80u) == 0LL)
      {
        v12 >>= 1;
      }

      else
      {
        v11 += 32 * (v12 >> 1) + 32;
        v12 += ~(v12 >> 1);
      }
    }

    if (v11 == v13
      || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v25, (void **)v11) & 0x80) != 0)
    {
      uint64_t v14 = *(void *)(a1 + 24);
      if (*(void *)(a1 + 32) == v14)
      {
        boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>*,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>>>( &v24,  v3,  (__int128 *)v11,  (__int128 *)v25);
        uint64_t v11 = v24;
      }

      else
      {
        uint64_t v15 = *(void *)v3 + 32 * v14;
        if (v15 == v11)
        {
          __int128 v20 = *(_OWORD *)v25;
          *(void *)(v11 + 16) = *(void *)&v25[16];
          *(_OWORD *)uint64_t v11 = v20;
          memset(v25, 0, sizeof(v25));
          *(void *)(v15 + memset(&context, 0, 24) = *(void *)&v25[24];
          ++*(void *)(a1 + 24);
        }

        else
        {
          uint64_t v16 = v15 - 32;
          *(_OWORD *)uint64_t v15 = *(_OWORD *)(v15 - 32);
          *(void *)(v15 - 32) = 0LL;
          *(void *)(v15 - memset(&context, 0, 24) = 0LL;
          uint64_t v17 = *(void *)(v15 - 16);
          uint64_t v18 = *(void *)(v15 - 8);
          *(void *)(v15 - 16) = 0LL;
          *(void *)(v15 - std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
          *(void *)(v15 + 16) = v17;
          *(void *)(v15 + memset(&context, 0, 24) = v18;
          ++*(void *)(a1 + 24);
          if (v15 - 32 != v11)
          {
            do
            {
              uint64_t v19 = v16 - 32;
              boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>::operator=( v16,  (__int128 *)(v16 - 32));
              uint64_t v16 = v19;
            }

            while (v19 != v11);
          }

          boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>::operator=( v11,  (__int128 *)v25);
        }
      }
    }

    xpc_object_t v21 = *(void **)&v25[24];
    *(void *)&v25[24] = 0LL;
    if (v21)
    {
      unint64_t v22 = boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::~vector(v21);
      operator delete(v22);
    }

    if ((v25[23] & 0x80000000) != 0) {
      operator delete(*(void **)v25);
    }
    *a3 = v11;
  }

  return v5 == v4;
}

void sub_1865D9F80(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void ctu::PropertyRestResource::sendResourcesNotification( ctu::PropertyRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (*((void *)this + 6))
  {
    memset(__p, 170, sizeof(__p));
    if (*((void *)a3 + 3))
    {
      uint64_t v5 = *(void **)a3;
      unint64_t v6 = *((void *)a3 + 2) - *(void *)a3;
      if (v6 > 1)
      {
        if (v6 - 1 >= *((void *)a3 + 1)) {
          size_t v7 = *((void *)a3 + 1);
        }
        else {
          size_t v7 = v6 - 1;
        }
        if (!v5) {
          goto LABEL_15;
        }
      }

      else
      {
        if (v6 >= *((void *)a3 + 1)) {
          size_t v7 = *((void *)a3 + 1);
        }
        else {
          size_t v7 = *((void *)a3 + 2) - *(void *)a3;
        }
        if (!v5) {
          goto LABEL_15;
        }
      }
    }

    else
    {
      uint64_t v5 = *(void **)a3;
      size_t v7 = *((void *)a3 + 1);
      if (!v5)
      {
LABEL_15:
        memset(__p, 0, sizeof(__p));
LABEL_16:
        xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        ctu::PropertyRestResource::getResourceArray(this, &object);
        uint64_t v14 = 0LL;
        uint64_t v8 = operator new(0x20uLL);
        void *v8 = off_189E94768;
        v8[1] = a2;
        v8[2] = __p;
        void v8[3] = &object;
        uint64_t v14 = v8;
        ctu::rest::WatchableRestResourceHelper::map((uint64_t)this + 40, (uint64_t)v13);
        uint64_t v9 = v14;
        if (v14 == v13)
        {
          uint64_t v10 = 4LL;
          uint64_t v9 = v13;
        }

        else
        {
          if (!v14) {
            goto LABEL_21;
          }
          uint64_t v10 = 5LL;
        }

        (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_21:
        xpc_release(object);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
        return;
      }
    }

    std::string::basic_string[abi:ne180100](__p, v5, v7);
    goto LABEL_16;
  }

void sub_1865DA114( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void std::unique_ptr<ctu::PropertyRestResourceState>::reset[abi:ne180100](void **a1, void *a2)
{
  xpc_object_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::~vector(v3);
    operator delete(v4);
  }

__n128 std::__function::__func<ctu::PropertyRestResource::handleMessage_Resource_SET(ctu::RestResourceContext &,ctu::PathView const&,ctu::llvm::StringRef,ctu::llvm::StringRef)::$_0,std::allocator<ctu::PropertyRestResource::handleMessage_Resource_SET(ctu::RestResourceContext &,ctu::PathView const&,ctu::llvm::StringRef,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone( uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_189E946D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ctu::PropertyRestResource::handleMessage_Resource_SET(ctu::RestResourceContext &,ctu::PathView const&,ctu::llvm::StringRef,ctu::llvm::StringRef)::$_0,std::allocator<ctu::PropertyRestResource::handleMessage_Resource_SET(ctu::RestResourceContext &,ctu::PathView const&,ctu::llvm::StringRef,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189E946D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + memset(&context, 0, 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = result;
  return result;
}

void std::__function::__func<ctu::PropertyRestResource::handleMessage_Resource_SET(ctu::RestResourceContext &,ctu::PathView const&,ctu::llvm::StringRef,ctu::llvm::StringRef)::$_0,std::allocator<ctu::PropertyRestResource::handleMessage_Resource_SET(ctu::RestResourceContext &,ctu::PathView const&,ctu::llvm::StringRef,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::operator()( void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  else {
    uint64_t v5 = *(const char **)(a2 + 8);
  }
  xpc_object_t v8 = xpc_string_create(v5);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  unint64_t v6 = (const char *)a1[2];
  if (v6[23] < 0) {
    unint64_t v6 = *(const char **)v6;
  }
  xpc_object_t object = xpc_string_create(v6);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *, xpc_object_t *, void))(*(void *)v4 + 48LL))( v4,  a2,  &v8,  &object,  a1[3]);
  xpc_release(object);
  xpc_release(v8);
}

void sub_1865DA2EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
}

uint64_t std::__function::__func<ctu::PropertyRestResource::handleMessage_Resource_SET(ctu::RestResourceContext &,ctu::PathView const&,ctu::llvm::StringRef,ctu::llvm::StringRef)::$_0,std::allocator<ctu::PropertyRestResource::handleMessage_Resource_SET(ctu::RestResourceContext &,ctu::PathView const&,ctu::llvm::StringRef,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::PropertyRestResource::handleMessage_Resource_SET(ctu::RestResourceContext &,ctu::PathView const&,ctu::llvm::StringRef,ctu::llvm::StringRef)::$_0,std::allocator<ctu::PropertyRestResource::handleMessage_Resource_SET(ctu::RestResourceContext &,ctu::PathView const&,ctu::llvm::StringRef,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::target_type()
{
}

__n128 std::__function::__func<ctu::PropertyRestResource::sendResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0,std::allocator<ctu::PropertyRestResource::sendResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone( uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_189E94768;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ctu::PropertyRestResource::sendResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0,std::allocator<ctu::PropertyRestResource::sendResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189E94768;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + memset(&context, 0, 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = result;
  return result;
}

void std::__function::__func<ctu::PropertyRestResource::sendResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0,std::allocator<ctu::PropertyRestResource::sendResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0>,void ()(ctu::RestResourceConnection const&)>::operator()( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  else {
    uint64_t v5 = *(const char **)(a2 + 8);
  }
  xpc_object_t v10 = xpc_string_create(v5);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  unint64_t v6 = *(const char **)(a1 + 16);
  if (v6[23] < 0) {
    unint64_t v6 = *(const char **)v6;
  }
  xpc_object_t v9 = xpc_string_create(v6);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  size_t v7 = **(void ***)(a1 + 24);
  xpc_object_t object = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *, xpc_object_t *, xpc_object_t *))(*(void *)v4 + 48LL))( v4,  a2,  &v10,  &v9,  &object);
  xpc_release(object);
  xpc_release(v9);
  xpc_release(v10);
}

void sub_1865DA4BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11, xpc_object_t a12)
{
}

uint64_t std::__function::__func<ctu::PropertyRestResource::sendResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0,std::allocator<ctu::PropertyRestResource::sendResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0>,void ()(ctu::RestResourceConnection const&)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::PropertyRestResource::sendResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0,std::allocator<ctu::PropertyRestResource::sendResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0>,void ()(ctu::RestResourceConnection const&)>::target_type()
{
}

__n128 std::__function::__func<ctu::PropertyRestResource::sendWatchedResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0,std::allocator<ctu::PropertyRestResource::sendWatchedResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone( uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_189E947E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ctu::PropertyRestResource::sendWatchedResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0,std::allocator<ctu::PropertyRestResource::sendWatchedResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189E947E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + memset(&context, 0, 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = result;
  return result;
}

void std::__function::__func<ctu::PropertyRestResource::sendWatchedResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0,std::allocator<ctu::PropertyRestResource::sendWatchedResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0>,void ()(ctu::RestResourceConnection const&)>::operator()( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  else {
    uint64_t v5 = *(const char **)(a2 + 8);
  }
  xpc_object_t v10 = xpc_string_create(v5);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  unint64_t v6 = *(const char **)(a1 + 16);
  if (v6[23] < 0) {
    unint64_t v6 = *(const char **)v6;
  }
  xpc_object_t v9 = xpc_string_create(v6);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  size_t v7 = **(void ***)(a1 + 24);
  xpc_object_t object = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *, xpc_object_t *, xpc_object_t *))(*(void *)v4 + 48LL))( v4,  a2,  &v10,  &v9,  &object);
  xpc_release(object);
  xpc_release(v9);
  xpc_release(v10);
}

void sub_1865DA69C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11, xpc_object_t a12)
{
}

uint64_t std::__function::__func<ctu::PropertyRestResource::sendWatchedResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0,std::allocator<ctu::PropertyRestResource::sendWatchedResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0>,void ()(ctu::RestResourceConnection const&)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::PropertyRestResource::sendWatchedResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0,std::allocator<ctu::PropertyRestResource::sendWatchedResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0>,void ()(ctu::RestResourceConnection const&)>::target_type()
{
}

uint64_t *boost::container::dtl::value_destructor<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>>::~value_destructor( uint64_t *a1)
{
  uint64_t v2 = *a1;
  std::unique_ptr<ctu::PropertyRestResourceState>::reset[abi:ne180100]((void **)(*a1 + 24), 0LL);
  return a1;
}

void boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>*,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>>>( void *a1, char *a2, __int128 *a3, __int128 *a4)
{
  unint64_t v4 = *((void *)a2 + 2);
  unint64_t v5 = 0x3FFFFFFFFFFFFFFLL;
  unint64_t v6 = *((void *)a2 + 1) + 1LL;
  if (0x3FFFFFFFFFFFFFFLL - v4 < v6 - v4) {
    goto LABEL_27;
  }
  unint64_t v7 = v4 >> 61;
  unint64_t v8 = 8 * v4;
  if (v7 > 4) {
    uint64_t v9 = -1LL;
  }
  else {
    uint64_t v9 = v8;
  }
  unint64_t v10 = v8 / 5;
  if (v7) {
    unint64_t v10 = v9;
  }
  if (v10 < 0x3FFFFFFFFFFFFFFLL) {
    unint64_t v5 = v10;
  }
  unint64_t v11 = v6 <= v5 ? v5 : *((void *)a2 + 1) + 1LL;
  if (v11 >> 58) {
LABEL_27:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  uint64_t v16 = *(char **)a2;
  uint64_t v17 = (char *)operator new(32 * v11);
  uint64_t v18 = v17;
  uint64_t v19 = *(char **)a2;
  uint64_t v20 = *(void *)a2 + 32LL * *((void *)a2 + 1);
  xpc_object_t v21 = v17;
  if (*(__int128 **)a2 != a3)
  {
    unint64_t v22 = *(char **)a2;
    xpc_object_t v21 = v17;
    do
    {
      __int128 v23 = *(_OWORD *)v22;
      *((void *)v21 + 2) = *((void *)v22 + 2);
      *(_OWORD *)xpc_object_t v21 = v23;
      *(void *)unint64_t v22 = 0LL;
      *((void *)v22 + 1) = 0LL;
      uint64_t v24 = *((void *)v22 + 3);
      *((void *)v22 + 2) = 0LL;
      *((void *)v22 + 3) = 0LL;
      *((void *)v21 + 3) = v24;
      v21 += 32;
      v22 += 32;
    }

    while (v22 != (char *)a3);
  }

  __int128 v25 = *a4;
  *((void *)v21 + 2) = *((void *)a4 + 2);
  *(_OWORD *)xpc_object_t v21 = v25;
  *(void *)a4 = 0LL;
  *((void *)a4 + 1) = 0LL;
  uint64_t v26 = *((void *)a4 + 3);
  *((void *)a4 + 2) = 0LL;
  *((void *)a4 + 3) = 0LL;
  *((void *)v21 + 3) = v26;
  if ((__int128 *)v20 != a3)
  {
    unint64_t v27 = v21 + 56;
    __int128 v28 = a3;
    do
    {
      __int128 v29 = *v28;
      *(v27 - 1) = *((void *)v28 + 2);
      *(_OWORD *)(v27 - 3) = v29;
      *(void *)__int128 v28 = 0LL;
      *((void *)v28 + 1) = 0LL;
      uint64_t v30 = *((void *)v28 + 3);
      *((void *)v28 + 2) = 0LL;
      *((void *)v28 + 3) = 0LL;
      void *v27 = v30;
      v27 += 4;
      v28 += 2;
    }

    while (v28 != (__int128 *)v20);
  }

  if (v19)
  {
    uint64_t v31 = *((void *)a2 + 1);
    if (v31)
    {
      unint64_t v32 = (void **)(v19 + 24);
      do
      {
        std::unique_ptr<ctu::PropertyRestResourceState>::reset[abi:ne180100](v32, 0LL);
        v32 += 4;
        --v31;
      }

      while (v31);
    }

    operator delete(*(void **)a2);
  }

  uint64_t v33 = *((void *)a2 + 1) + 1LL;
  *(void *)a2 = v18;
  *((void *)a2 + 1) = v33;
  *((void *)a2 + 2) = v11;
  *a1 = &v18[(char *)a3 - v16];
}

uint64_t boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>::operator=( uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  unint64_t v5 = (void *)*((void *)a2 + 3);
  *((void *)a2 + 3) = 0LL;
  std::unique_ptr<ctu::PropertyRestResourceState>::reset[abi:ne180100]((void **)(a1 + 24), v5);
  return a1;
}

dispatch_queue_t *ctu::concurrency::PriorityQueue::PriorityQueue(dispatch_queue_t *a1, const void **a2)
{
  else {
    size_t v4 = (size_t)a2[1];
  }
  memset(__p, 170, sizeof(__p));
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 7);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v5 = __p;
  }
  else {
    unint64_t v5 = (void **)__p[0];
  }
  if (v4)
  {
    else {
      unint64_t v6 = *a2;
    }
    memmove(v5, v6, v4);
  }

  strcpy((char *)v5 + v4, ".normal");
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  dispatch_queue_t v8 = dispatch_queue_create((const char *)v7, 0LL);
  *a1 = v8;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    dispatch_queue_t v8 = *a1;
  }

  if (!v8) {
    __TUAssertTrigger("fNormalQueue");
  }
  else {
    size_t v9 = (size_t)a2[1];
  }
  memset(__p, 170, sizeof(__p));
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v9 + 8);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v10 = __p;
  }
  else {
    unint64_t v10 = (void **)__p[0];
  }
  if (v9)
  {
    else {
      unint64_t v11 = *a2;
    }
    memmove(v10, v11, v9);
  }

  strcpy((char *)v10 + v9, ".highest");
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v12 = __p;
  }
  else {
    unint64_t v12 = (void **)__p[0];
  }
  dispatch_queue_t v13 = dispatch_queue_create((const char *)v12, 0LL);
  a1[1] = v13;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    dispatch_queue_t v13 = a1[1];
  }

  if (!v13) {
    __TUAssertTrigger("fHighestQueue");
  }
  else {
    size_t v14 = (size_t)a2[1];
  }
  memset(__p, 170, sizeof(__p));
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v14 + 5);
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v15 = __p;
  }
  else {
    uint64_t v15 = (void **)__p[0];
  }
  if (v14)
  {
    else {
      uint64_t v16 = *a2;
    }
    memmove(v15, v16, v14);
  }

  strcpy((char *)v15 + v14, ".work");
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v17 = __p;
  }
  else {
    uint64_t v17 = (void **)__p[0];
  }
  uint64_t v18 = dispatch_queue_create((const char *)v17, 0LL);
  a1[2] = v18;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    uint64_t v18 = a1[2];
  }

  dispatch_set_target_queue(*a1, v18);
  dispatch_set_target_queue(a1[1], a1[2]);
  return a1;
}

uint64_t ctu::concurrency::PriorityQueue::PriorityQueue(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  xpc_object_t v3 = *(dispatch_object_s **)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  dispatch_retain(v3);
  dispatch_retain(*(dispatch_object_t *)(a1 + 8));
  dispatch_retain(*(dispatch_object_t *)a1);
  return a1;
}

void ctu::concurrency::PriorityQueue::~PriorityQueue(dispatch_object_t *this)
{
}

void ctu::concurrency::PriorityQueue::addBlock(dispatch_queue_t *a1, void *a2, int a3)
{
  if (a3 == 1) {
    ctu::concurrency::PriorityQueue::addHighestPriorityBlock((uint64_t)a1, a2);
  }
  else {
    dispatch_async(*a1, a2);
  }
}

void ctu::concurrency::PriorityQueue::addHighestPriorityBlock(uint64_t a1, const void *a2)
{
  size_t v4 = *(dispatch_object_s **)a1;
  dispatch_retain(*(dispatch_object_t *)a1);
  dispatch_suspend(v4);
  unint64_t v5 = _Block_copy(a2);
  unint64_t v6 = *(dispatch_queue_s **)(a1 + 8);
  v7[0] = MEMORY[0x1895F87A8];
  v7[1] = 1107296256LL;
  v7[2] = ___ZNK3ctu11concurrency13PriorityQueue23addHighestPriorityBlockEU13block_pointerFvvE_block_invoke;
  void v7[3] = &__block_descriptor_tmp_8;
  v7[4] = v5;
  v7[5] = v4;
  dispatch_async(v6, v7);
}

void ctu::concurrency::PriorityQueue::addBlockSync(dispatch_queue_t *a1, void *a2, int a3)
{
  if (a3 == 1) {
    ctu::concurrency::PriorityQueue::addHighestPriorityBlockSync((uint64_t)a1, a2);
  }
  else {
    dispatch_sync(*a1, a2);
  }
}

void ctu::concurrency::PriorityQueue::addHighestPriorityBlockSync(uint64_t a1, void *a2)
{
}

void ctu::concurrency::PriorityQueue::addBlock( dispatch_queue_t *a1, dispatch_group_t group, void *a3, int a4)
{
  if (a4 == 1) {
    ctu::concurrency::PriorityQueue::addHighestPriorityBlock((uint64_t)a1, group, a3);
  }
  else {
    dispatch_group_async(group, *a1, a3);
  }
}

void ctu::concurrency::PriorityQueue::addHighestPriorityBlock( uint64_t a1, dispatch_group_s *a2, const void *a3)
{
  unint64_t v6 = *(dispatch_object_s **)a1;
  dispatch_retain(*(dispatch_object_t *)a1);
  dispatch_suspend(v6);
  unint64_t v7 = _Block_copy(a3);
  dispatch_queue_t v8 = *(dispatch_queue_s **)(a1 + 8);
  v9[0] = MEMORY[0x1895F87A8];
  v9[1] = 1107296256LL;
  _OWORD v9[2] = ___ZNK3ctu11concurrency13PriorityQueue23addHighestPriorityBlockEP16dispatch_group_sU13block_pointerFvvE_block_invoke;
  void v9[3] = &__block_descriptor_tmp_7;
  v9[4] = v7;
  v9[5] = v6;
  dispatch_group_async(a2, v8, v9);
}

void ctu::concurrency::PriorityQueue::notifyOn( dispatch_queue_t *a1, dispatch_group_t group, void *aBlock, int a4)
{
  if (a4 == 1)
  {
    unint64_t v6 = _Block_copy(aBlock);
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(2LL, 0LL);
    v8[0] = MEMORY[0x1895F87A8];
    v8[1] = 1107296256LL;
    v8[2] = ___ZNK3ctu11concurrency13PriorityQueue8notifyOnEP16dispatch_group_sU13block_pointerFvvENS1_8PriorityE_block_invoke;
    void v8[3] = &__block_descriptor_tmp_4;
    v8[4] = v6;
    v8[5] = a1;
    dispatch_group_notify(group, global_queue, v8);
  }

  else
  {
    dispatch_group_notify(group, *a1, aBlock);
  }

void ___ZNK3ctu11concurrency13PriorityQueue8notifyOnEP16dispatch_group_sU13block_pointerFvvENS1_8PriorityE_block_invoke( uint64_t a1)
{
}

void __copy_helper_block_e8_32b(uint64_t a1, uint64_t a2)
{
}

void __destroy_helper_block_e8_32b(uint64_t a1)
{
}

void ___ZNK3ctu11concurrency13PriorityQueue23addHighestPriorityBlockEP16dispatch_group_sU13block_pointerFvvE_block_invoke( uint64_t a1)
{
}

void ___ZNK3ctu11concurrency13PriorityQueue23addHighestPriorityBlockEU13block_pointerFvvE_block_invoke( uint64_t a1)
{
}

void ctu::concurrency::PriorityQueue::suspend(dispatch_object_t *this)
{
}

void ctu::concurrency::PriorityQueue::resume(dispatch_object_t *this)
{
}

void ctu::concurrency::PriorityQueue::assertSynchronized(dispatch_queue_t *this)
{
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8LL) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    unint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000LL;
    *(void *)a1 = v6;
  }

  else
  {
    *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(void *)a1 = 0LL;
    *(_BYTE *)(a1 + 23) = a2;
  }

  return a1;
}

void **ctu::XpcServerHelper::XpcServerHelper(void **a1, void **a2)
{
  xpc_object_t v3 = *a2;
  *a1 = *a2;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    *a1 = xpc_null_create();
  }
  return a1;
}

void ctu::XpcServerHelper::~XpcServerHelper(xpc_connection_t *this)
{
  xpc_object_t v2 = xpc_null_create();
  xpc_object_t v3 = v2;
  ctu::XpcServerHelper::setListener(this, &v3);
  xpc_release(v2);
  xpc_release(*this);
  *this = 0LL;
}

void ctu::XpcServerHelper::setListener(xpc_connection_t *a1, xpc_object_t *a2)
{
  if (MEMORY[0x186E3CD4C](*a1) == MEMORY[0x1895F9238]) {
    xpc_connection_cancel(*a1);
  }
  xpc_object_t v4 = *a2;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t v4 = xpc_null_create();
  }
  xpc_connection_t v5 = *a1;
  *a1 = (xpc_connection_t)v4;
  xpc_release(v5);
}

void ctu::XpcServerHelper::flush(_xpc_connection_s **this, const group *a2)
{
  if (MEMORY[0x186E3CD4C](*this) == MEMORY[0x1895F9238])
  {
    gr_name = (dispatch_group_s *)a2->gr_name;
    if (gr_name)
    {
      dispatch_retain(gr_name);
      dispatch_group_enter(gr_name);
    }

    xpc_connection_t v5 = *this;
    barrier[0] = MEMORY[0x1895F87A8];
    barrier[1] = 1174405120LL;
    barrier[2] = ___ZNK3ctu15XpcServerHelper5flushERKN8dispatch5groupE_block_invoke;
    barrier[3] = &__block_descriptor_tmp_5;
    dispatch_group_t group = gr_name;
    if (gr_name)
    {
      dispatch_retain(gr_name);
      dispatch_group_enter(gr_name);
    }

    xpc_connection_send_barrier(v5, barrier);
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }

    if (gr_name)
    {
      dispatch_group_leave(gr_name);
      dispatch_release(gr_name);
    }
  }

void sub_1865DB218( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }

  if (v14)
  {
    dispatch_group_leave(v14);
    dispatch_release(v14);
  }

  _Unwind_Resume(exception_object);
}

void _rest_api_misuse(const char *a1)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  *(void *)&__int128 v1 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v1 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v10 = v1;
  __int128 v11 = v1;
  __int128 v8 = v1;
  __int128 v9 = v1;
  __int128 v6 = v1;
  __int128 v7 = v1;
  __int128 v4 = v1;
  __int128 v5 = v1;
  *(_OWORD *)std::string __str = v1;
  __int128 v3 = v1;
  snprintf(__str, 0xA0uLL, "REST API Misuse: %s", a1);
  qword_18C68EBE0 = (uint64_t)__str;
  abort();
}

os_log_t ___ZN3ctu16sGetResXpcLoggerEv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.commcenter", "rest.xpc");
  _MergedGlobals_1 = (uint64_t)result;
  return result;
}

std::string *ctu::RestXpcListener::Configuration::Configuration(std::string *this, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v3 = *a2;
    this->__r_.__value_.__l.__cap_ = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }

  return this;
}

{
  __int128 v3;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v3 = *a2;
    this->__r_.__value_.__l.__cap_ = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }

  return this;
}

uint64_t ctu::RestXpcListener::Configuration::isEntitled(const char *a1, void *a2)
{
  if (MEMORY[0x186E3CD4C](*a2) != MEMORY[0x1895F9238]) {
    return 0LL;
  }
  if (a1[23] < 0)
  {
    if (*((void *)a1 + 1))
    {
LABEL_5:
      memset(v11, 0, sizeof(v11));
      xpc_connection_get_audit_token();
      __int128 v4 = (void *)xpc_copy_entitlement_for_token();
      uint64_t v5 = MEMORY[0x1895F9250];
      if (v4 || (__int128 v4 = xpc_null_create()) != 0LL)
      {
        if (MEMORY[0x186E3CD4C](v4) == v5)
        {
          xpc_retain(v4);
          xpc_object_t v6 = v4;
        }

        else
        {
          xpc_object_t v6 = xpc_null_create();
        }
      }

      else
      {
        xpc_object_t v6 = xpc_null_create();
        __int128 v4 = 0LL;
      }

      xpc_release(v4);
      if (MEMORY[0x186E3CD4C](v6) != v5) {
        goto LABEL_18;
      }
      if (a1[23] < 0) {
        a1 = *(const char **)a1;
      }
      if (xpc_dictionary_get_value(v6, a1)
        && (xpc_object_t v9 = xpc_dictionary_get_value(v6, a1), MEMORY[0x186E3CD4C](v9) == MEMORY[0x1895F9228]))
      {
        xpc_object_t value = xpc_dictionary_get_value(v6, a1);
        BOOL v3 = xpc_BOOL_get_value(value);
      }

      else
      {
LABEL_18:
        BOOL v3 = 0LL;
      }

      xpc_release(v6);
      return v3;
    }
  }

  else if (a1[23])
  {
    goto LABEL_5;
  }

  if (qword_18C4A45E8 != -1) {
    dispatch_once(&qword_18C4A45E8, &__block_literal_global_2);
  }
  __int128 v7 = (os_log_s *)_MergedGlobals_1;
  if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v11[0]) = 0;
    _os_log_debug_impl( &dword_1865C1000,  v7,  OS_LOG_TYPE_DEBUG,  "Entitlement policy not used by RestXpcListener. Clients always allowed",  (uint8_t *)v11,  2u);
  }

  return 1LL;
}

void sub_1865DB560(_Unwind_Exception *a1)
{
}

void ctu::RestXpcListener::create( xpc_object_t *a1@<X0>, dispatch_object_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  __int128 v8 = operator new(0x68uLL);
  xpc_object_t v21 = *a1;
  *a1 = xpc_null_create();
  dispatch_object_t object = *a2;
  *a2 = 0LL;
  else {
    std::string __p = *(std::string *)a3;
  }
  ctu::RestXpcListener::RestXpcListener((uint64_t)v8, &v21, &object, (__int128 *)&__p);
  *a4 = v8;
  xpc_object_t v9 = (std::__shared_weak_count *)operator new(0x20uLL);
  v9->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)off_189E94B40;
  v9->__shared_weak_owners_ = 0LL;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  a4[1] = v9;
  __int128 v11 = (std::__shared_weak_count *)*((void *)v8 + 2);
  if (v11)
  {
    if (v11->__shared_owners_ != -1) {
      goto LABEL_17;
    }
    do
      unint64_t v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      unint64_t v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
    *((void *)v8 + 1) = v8;
    *((void *)v8 + 2) = v9;
    std::__shared_weak_count::__release_weak(v11);
  }

  else
  {
    do
      unint64_t v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    uint64_t v16 = (unint64_t *)&v9->__shared_weak_owners_;
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    *((void *)v8 + 1) = v8;
    *((void *)v8 + 2) = v9;
  }

  do
    unint64_t v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }

void sub_1865DB714( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, dispatch_object_t object, xpc_object_t a17)
{
  if (object) {
    dispatch_release(object);
  }
  xpc_release(a17);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void xpc::connection::~connection(xpc_object_t *this)
{
  *this = 0LL;
}

uint64_t ctu::RestXpcListener::RestXpcListener(uint64_t a1, xpc_object_t *a2, void *a3, __int128 *a4)
{
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_189E94968;
  *(void *)(a1 + memset(&context, 0, 24) = *a2;
  *a2 = xpc_null_create();
  *(void *)(a1 + 32) = *a3;
  *a3 = 0LL;
  __int128 v7 = (std::string *)(a1 + 40);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }

  else
  {
    __int128 v8 = *a4;
    *(void *)(a1 + 56) = *((void *)a4 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }

  *(void *)(a1 + 64) = 0LL;
  xpc_object_t v9 = xpc_null_create();
  __int128 v11 = v9;
  ctu::XpcServerHelper::XpcServerHelper((void **)(a1 + 72), &v11);
  xpc_release(v9);
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 8std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  return a1;
}

void sub_1865DB884(_Unwind_Exception *a1)
{
  __int128 v4 = *(dispatch_object_s **)(v1 + 32);
  if (v4) {
    dispatch_release(v4);
  }
  xpc::connection::~connection(v2);
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 16);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(a1);
}

void ctu::RestXpcListener::weak_from_this(ctu::RestXpcListener *this@<X0>, void *a2@<X8>)
{
  BOOL v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v3 || (uint64_t v5 = *((void *)this + 1), (v6 = std::__shared_weak_count::lock(v3)) == 0LL)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  __int128 v7 = v6;
  *a2 = v5;
  a2[1] = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    unint64_t v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    unint64_t v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }

void ctu::RestXpcListener::createConnector(xpc_connection_t *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::RestXpcListener::createPeerConnection(this, &object);
  ctu::rest::RestXpcConnector::create(&object, a2);
  xpc_release(object);
}

void sub_1865DB9A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::RestXpcListener::createPeerConnection(xpc_connection_t *this@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v3 = xpc_null_create();
  *a2 = v3;
  __int128 v4 = v7;
  if (MEMORY[0x186E3CD4C](v7) == MEMORY[0x1895F9260])
  {
    uint64_t v5 = xpc_connection_create_from_endpoint(v4);
    if (!v5) {
      uint64_t v5 = xpc_null_create();
    }
    xpc_object_t v6 = xpc_null_create();
    *a2 = v5;
    xpc_release(v3);
    xpc_release(v6);
  }

  xpc_release(v4);
}

void ctu::RestXpcListener::startListening(ctu::RestXpcListener *this)
{
  xpc_object_t v2 = (xpc_object_t)*((void *)this + 3);
  xpc_object_t v11 = v2;
  if (v2)
  {
    xpc_retain(v2);
  }

  else
  {
    xpc_object_t v2 = xpc_null_create();
    xpc_object_t v11 = v2;
  }

  xpc_object_t v3 = (xpc_connection_t *)((char *)this + 72);
  ctu::XpcServerHelper::setListener((xpc_connection_t *)this + 9, &v11);
  xpc_release(v2);
  __int128 v4 = (dispatch_queue_s *)*((void *)this + 4);
  if (v4) {
    dispatch_retain(*((dispatch_object_t *)this + 4));
  }
  ctu::RestXpcListener::weak_from_this(this, &v9);
  if (MEMORY[0x186E3CD4C](*v3) == MEMORY[0x1895F9238])
  {
    handler[0] = MEMORY[0x1895F87A8];
    handler[2] = ___ZN3ctu15XpcServerHelper13startListenerINS_15RestXpcListenerEEEvN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke;
    handler[3] = &__block_descriptor_tmp_7_0;
    uint64_t v5 = v10;
    handler[4] = v3;
    handler[5] = v9;
    xpc_object_t v6 = *v3;
    handler[1] = 1174405120LL;
    dispatch_queue_t v13 = v10;
    if (v10)
    {
      p_shared_weak_owners = &v10->__shared_weak_owners_;
      do
        unint64_t v8 = __ldxr((unint64_t *)p_shared_weak_owners);
      while (__stxr(v8 + 1, (unint64_t *)p_shared_weak_owners));
    }

    unint64_t v14 = v6;
    xpc_connection_set_event_handler(v6, handler);
    xpc_connection_set_target_queue(*v3, v4);
    xpc_connection_resume(*v3);
    if (v13) {
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  else
  {
    uint64_t v5 = v10;
  }

  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v4) {
    dispatch_release(v4);
  }
}

void sub_1865DBBB8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19)
  {
    std::__shared_weak_count::__release_weak(a19);
    if (!v20)
    {
LABEL_3:
      if (!v19) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      dispatch_release(v19);
      goto LABEL_8;
    }
  }

  else if (!v20)
  {
    goto LABEL_3;
  }

  std::__shared_weak_count::__release_weak(v20);
  if (!v19) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void *ctu::RestXpcListener::getXpcEndpoint@<X0>(xpc_connection_t *this@<X0>, void *a2@<X8>)
{
  os_log_t result = xpc_endpoint_create(this[3]);
  *a2 = result;
  if (!result)
  {
    os_log_t result = xpc_null_create();
    *a2 = result;
  }

  return result;
}

void *ctu::RestXpcListener::getOrCreateResourceConnection_sync(void *a1, void **a2, uint64_t a3)
{
  uint64_t v64 = *MEMORY[0x1895F89C0];
  uint64_t v5 = (void *)a1[10];
  unint64_t v6 = a1[11];
  __int128 v7 = (char *)(a1 + 10);
  if (v6)
  {
    unint64_t v8 = *a2;
    uint64_t v9 = &v5[3 * v6];
    do
    {
      unint64_t v10 = v6 >> 1;
      xpc_object_t v11 = &v5[3 * (v6 >> 1)];
      unint64_t v13 = *v11;
      unint64_t v12 = v11 + 3;
      v6 += ~(v6 >> 1);
      else {
        uint64_t v5 = v12;
      }
    }

    while (v6);
  }

  std::allocate_shared[abi:ne180100]<ctu::XpcRestResourceConnection,std::allocator<ctu::XpcRestResourceConnection>,xpc::connection const&,std::string,void>( a2,  a3,  &v54);
  unint64_t v14 = *a2;
  uint64_t v16 = (void **)a1[10];
  unint64_t v15 = a1[11];
  unint64_t v17 = &v16[3 * v15];
  if (!v15) {
    goto LABEL_16;
  }
  do
  {
    unint64_t v18 = v15 >> 1;
    uint64_t v19 = (unint64_t *)&v16[3 * (v15 >> 1)];
    unint64_t v21 = *v19;
    uint64_t v20 = (void **)(v19 + 3);
    v15 += ~(v15 >> 1);
    else {
      uint64_t v16 = v20;
    }
  }

  while (v15);
  if (v16 == v17 || (unint64_t v17 = v16, *v16 > v14))
  {
LABEL_16:
    if (v14) {
      xpc_retain(v14);
    }
    else {
      unint64_t v14 = xpc_null_create();
    }
    uint64_t v58 = 0LL;
    uint64_t v59 = 0LL;
    unint64_t v62 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t object = v14;
    xpc_object_t v22 = xpc_null_create();
    unint64_t v62 = 0LL;
    unint64_t v63 = 0LL;
    uint64_t v56 = 0LL;
    __int128 v57 = 0LL;
    xpc_object_t v55 = v22;
    v60[1] = &object;
    v60[2] = v7;
    uint64_t v24 = (void **)a1[10];
    uint64_t v23 = a1[11];
    uint64_t v25 = (uint64_t)&v24[3 * v23];
    if ((void **)v25 == v17 || *v17 > object)
    {
      if (v24 == v17) {
        goto LABEL_40;
      }
      uint64_t v26 = v17 - 3;
      unint64_t v27 = (unint64_t)*(v17 - 3);
      v17 -= 3;
      if (v27 <= (unint64_t)object)
      {
        uint64_t v24 = v26;
LABEL_47:
        unint64_t v17 = v24;
        goto LABEL_48;
      }

      if (v26 != v24)
      {
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (v26 - v24);
        do
        {
          unint64_t v29 = v28 >> 1;
          uint64_t v30 = (unint64_t *)&v24[3 * (v28 >> 1)];
          unint64_t v32 = *v30;
          uint64_t v31 = (void **)(v30 + 3);
          v28 += ~(v28 >> 1);
          else {
            uint64_t v24 = v31;
          }
        }

        while (v28);
      }

      if (v24 == v26)
      {
LABEL_40:
        if (a1[12] == v23)
        {
          boost::container::vector<boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>,boost::container::new_allocator<boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>>,boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>*,boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>>>( v60,  v7,  (uint64_t)v17,  (uint64_t)&object);
LABEL_49:
          uint64_t v41 = (std::__shared_weak_count *)v63;
          if (v63)
          {
            unint64_t v42 = (unint64_t *)(v63 + 8);
            do
              unint64_t v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }

          xpc_release(object);
          uint64_t v16 = (void **)v60[0];
          __int128 v44 = v57;
          if (v57)
          {
            p_shared_owners = (unint64_t *)&v57->__shared_owners_;
            do
              unint64_t v46 = __ldaxr(p_shared_owners);
            while (__stlxr(v46 - 1, p_shared_owners));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }

          xpc_release(v55);
          __int128 v47 = v59;
          if (v59)
          {
            __int128 v48 = (unint64_t *)&v59->__shared_owners_;
            do
              unint64_t v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }

          goto LABEL_64;
        }

        if ((void **)v25 == v17)
        {
          uint64_t v40 = boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>::pair( v25,  (uint64_t)&object);
          ++a1[11];
          unint64_t v17 = (void **)v40;
        }

        else
        {
          unint64_t v38 = (void **)(v25 - 24);
          boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>::pair( v25,  v25 - 24);
          ++a1[11];
          for (; v38 != v17; v38 -= 3)
            boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>::operator=( v38,  (uint64_t)(v38 - 3));
          boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>::operator=( v17,  (uint64_t)&object);
        }

LABEL_48:
        v60[0] = v17;
        goto LABEL_49;
      }
    }

    else
    {
      unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v25 - (uint64_t)v17) >> 3);
      uint64_t v24 = v17;
      do
      {
        unint64_t v34 = v33 >> 1;
        xpc_object_t v35 = (unint64_t *)&v24[3 * (v33 >> 1)];
        unint64_t v37 = *v35;
        unint64_t v36 = (void **)(v35 + 3);
        v33 += ~(v33 >> 1);
        else {
          uint64_t v24 = v36;
        }
      }

      while (v33);
      unint64_t v17 = (void **)v25;
    }

    unint64_t v17 = v24;
    if (*v24 <= object) {
      goto LABEL_47;
    }
    goto LABEL_40;
  }

LABEL_64:
  __int128 v39 = v16 + 1;
  std::shared_ptr<ctu::rest::RestConnectorDelegateBase>::operator=[abi:ne180100]<ctu::rest::RestConnectorDelegate<ctu::RestModuleState>,void>( (uint64_t)(v16 + 1),  &v54);
  __int128 v50 = (std::__shared_weak_count *)*((void *)&v54 + 1);
  if (*((void *)&v54 + 1))
  {
    __int128 v51 = (unint64_t *)(*((void *)&v54 + 1) + 8LL);
    do
      unint64_t v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }

  return v39;
}

void sub_1865DC074( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, xpc_object_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, xpc_object_t *a17)
{
}

unint64_t ctu::RestXpcListener::getResourceConnection_sync@<X0>( unint64_t this@<X0>, const xpc::connection *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = *(void *)(this + 88);
  if (!v3) {
    goto LABEL_9;
  }
  __int128 v4 = *(unint64_t **)(this + 80);
  unint64_t v5 = *(void *)a2;
  unint64_t v6 = &v4[3 * v3];
  do
  {
    unint64_t v7 = v3 >> 1;
    unint64_t v8 = &v4[3 * (v3 >> 1)];
    unint64_t v10 = *v8;
    uint64_t v9 = v8 + 3;
    this = ~(v3 >> 1);
    v3 += this;
    if (v10 >= v5) {
      unint64_t v3 = v7;
    }
    else {
      __int128 v4 = v9;
    }
  }

  while (v3);
  if (v4 != v6 && *v4 <= v5)
  {
    unint64_t v12 = v4[1];
    unint64_t v11 = v4[2];
    *a3 = v12;
    a3[1] = v11;
    if (v11)
    {
      unint64_t v13 = (unint64_t *)(v11 + 8);
      do
        unint64_t v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }

  else
  {
LABEL_9:
    *a3 = 0LL;
    a3[1] = 0LL;
  }

  return this;
}

BOOL ctu::RestXpcListener::handleNewClient(uint64_t a1, xpc_connection_t *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (MEMORY[0x186E3CD4C](*a2) == MEMORY[0x1895F9238])
  {
    pid_t pid = xpc_connection_get_pid(*a2);
    unint64_t v7 = *a2;
    unint64_t v17 = v7;
    if (v7)
    {
      xpc_retain(v7);
    }

    else
    {
      unint64_t v7 = xpc_null_create();
      unint64_t v17 = v7;
    }

    char isEntitled = ctu::RestXpcListener::Configuration::isEntitled((const char *)(a1 + 40), &v17);
    xpc_release(v7);
    unint64_t v17 = 0LL;
    if ((isEntitled & 1) != 0)
    {
      uint64_t v9 = *a2;
      if (*a2) {
        xpc_retain(*a2);
      }
      else {
        uint64_t v9 = (_xpc_connection_s *)xpc_null_create();
      }
      unint64_t v11 = *(dispatch_queue_s **)(a1 + 32);
      if (v11) {
        dispatch_retain(*(dispatch_object_t *)(a1 + 32));
      }
      ctu::RestXpcListener::weak_from_this((ctu::RestXpcListener *)a1, &v15);
      *(void *)buf = MEMORY[0x1895F87A8];
      uint64_t v19 = 1174405120LL;
      uint64_t v20 = ___ZNK3ctu15XpcServerHelper12acceptClientINS_15RestXpcListenerEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke;
      unint64_t v21 = &__block_descriptor_tmp_11;
      unint64_t v12 = v16;
      uint64_t v22 = v15;
      uint64_t v23 = v16;
      if (v16)
      {
        p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
        do
          unint64_t v14 = __ldxr(p_shared_weak_owners);
        while (__stxr(v14 + 1, p_shared_weak_owners));
      }

      uint64_t v24 = v9;
      xpc_connection_set_event_handler(v9, buf);
      xpc_connection_set_target_queue(v9, v11);
      xpc_connection_resume(v9);
      if (v23) {
        std::__shared_weak_count::__release_weak(v23);
      }
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v11) {
        dispatch_release(v11);
      }
      xpc_release(v9);
      return 1LL;
    }

    else
    {
      if (qword_18C4A45E8 != -1) {
        dispatch_once(&qword_18C4A45E8, &__block_literal_global_2);
      }
      unint64_t v10 = (os_log_s *)_MergedGlobals_1;
      BOOL result = os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_INFO);
      if (result)
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = pid;
        _os_log_impl( &dword_1865C1000,  v10,  OS_LOG_TYPE_INFO,  "Client [%d] is not entitled and thus is rejected",  buf,  8u);
        return 0LL;
      }
    }
  }

  else
  {
    if (qword_18C4A45E8 != -1) {
      dispatch_once(&qword_18C4A45E8, &__block_literal_global_2);
    }
    __int128 v4 = (os_log_s *)_MergedGlobals_1;
    BOOL result = os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl( &dword_1865C1000,  v4,  OS_LOG_TYPE_ERROR,  "New REST XPC client has no valid connection",  buf,  2u);
      return 0LL;
    }
  }

  return result;
}

void sub_1865DC3D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ctu::RestXpcListener::handleClientMessage(ctu::RestXpcListener *this, void **a2, xpc_object_t *a3)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  if (!xpc_dictionary_get_value(*a3, "r")) {
    return;
  }
  unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
  v32[0] = a3;
  v32[1] = "a";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v32, &object);
  unint64_t v37 = 0LL;
  unint64_t v38 = 0LL;
  uint64_t v39 = 0LL;
  xpc::dyn_cast_or_default(&object, (uint64_t)&v37, &__p);
  ResourceConnection_sync = ctu::RestXpcListener::getOrCreateResourceConnection_sync(this, a2, (uint64_t)&__p);
  unint64_t v8 = *ResourceConnection_sync;
  unint64_t v7 = ResourceConnection_sync[1];
  unint64_t v35 = *ResourceConnection_sync;
  unint64_t v36 = v7;
  if (v7)
  {
    uint64_t v9 = (unint64_t *)(v7 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  xpc_release(object);
  v32[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::rest::createReply(a3, (_anonymous_namespace_ *)v32);
  uint64_t v11 = MEMORY[0x186E3CD4C](v32[0]);
  uint64_t v12 = *((void *)this + 8);
  if (v11 != MEMORY[0x1895F9250])
  {
    unint64_t v37 = v8;
    unint64_t v38 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      unint64_t v13 = (unint64_t *)(v7 + 8);
      do
        unint64_t v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }

    xpc_object_t v15 = *a3;
    xpc_object_t v31 = v15;
    if (v15) {
      xpc_retain(v15);
    }
    else {
      xpc_object_t v31 = xpc_null_create();
    }
    (*(void (**)(uint64_t, unint64_t *, xpc_object_t *))(*(void *)v12 + 16LL))(v12, &v37, &v31);
    xpc_release(v31);
    xpc_object_t v31 = 0LL;
    uint64_t v19 = v38;
    if (!v38) {
      goto LABEL_37;
    }
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    goto LABEL_35;
  }

  unint64_t v37 = v8;
  unint64_t v38 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    uint64_t v16 = (unint64_t *)(v7 + 8);
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }

  xpc_object_t v18 = *a3;
  xpc_object_t v30 = v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    xpc_object_t v30 = xpc_null_create();
  }
  xpc_object_t v22 = v32[0];
  if (v32[0]) {
    xpc_retain(v32[0]);
  }
  else {
    xpc_object_t v22 = xpc_null_create();
  }
  uint64_t v41 = 0LL;
  v40[0] = off_189E94C68;
  v40[1] = v22;
  xpc_object_t v23 = xpc_null_create();
  uint64_t v41 = v40;
  (*(void (**)(uint64_t, unint64_t *, xpc_object_t *, void *))(*(void *)v12 + 24LL))( v12,  &v37,  &v30,  v40);
  uint64_t v24 = v41;
  if (v41 == v40)
  {
    uint64_t v25 = 4LL;
    uint64_t v24 = v40;
  }

  else
  {
    if (!v41) {
      goto LABEL_32;
    }
    uint64_t v25 = 5LL;
  }

  (*(void (**)(void *))(*v24 + 8 * v25))(v24);
LABEL_32:
  xpc_release(v23);
  xpc_release(v30);
  xpc_object_t v30 = 0LL;
  uint64_t v19 = v38;
  if (v38)
  {
    uint64_t v26 = (unint64_t *)&v38->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v26);
    while (__stlxr(v21 - 1, v26));
LABEL_35:
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

void sub_1865DC74C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10, xpc_object_t a11, uint64_t a12, xpc_object_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20, uint64_t a21, char a22)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ctu::RestXpcListener::handleClientError(void *a1, const xpc::connection *a2, xpc_object_t *a3)
{
  uint64_t v6 = a1[8];
  ctu::RestXpcListener::getResourceConnection_sync((unint64_t)a1, a2, (unint64_t *)&v24);
  __int128 v25 = v24;
  __int128 v24 = 0uLL;
  xpc_object_t object = *a3;
  *a3 = xpc_null_create();
  (*(void (**)(uint64_t, __int128 *, xpc_object_t *))(*(void *)v6 + 32LL))(v6, &v25, &object);
  xpc_release(object);
  xpc_object_t object = 0LL;
  unint64_t v7 = (std::__shared_weak_count *)*((void *)&v25 + 1);
  if (*((void *)&v25 + 1))
  {
    unint64_t v8 = (unint64_t *)(*((void *)&v25 + 1) + 8LL);
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  unint64_t v10 = (std::__shared_weak_count *)*((void *)&v24 + 1);
  if (*((void *)&v24 + 1))
  {
    uint64_t v11 = (unint64_t *)(*((void *)&v24 + 1) + 8LL);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  unint64_t v13 = a1[11];
  if (v13)
  {
    unint64_t v14 = *(void *)a2;
    xpc_object_t v15 = (void **)a1[10];
    uint64_t v16 = &v15[3 * v13];
    do
    {
      unint64_t v17 = v13 >> 1;
      xpc_object_t v18 = &v15[3 * (v13 >> 1)];
      uint64_t v20 = *v18;
      uint64_t v19 = v18 + 3;
      v13 += ~(v13 >> 1);
      else {
        xpc_object_t v15 = v19;
      }
    }

    while (v13);
    if (v15 != v16 && (unint64_t)*v15 <= v14)
    {
      unint64_t v21 = v15 + 3;
      while (v21 != v16)
      {
        xpc_object_t v22 = v15 + 3;
        unint64_t v21 = boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>::operator=( v15,  (uint64_t)(v15 + 3))
            + 6;
        xpc_object_t v15 = v22;
      }

      std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)(v16 - 2));
      xpc_release(*(v16 - 3));
      *(v16 - 3) = 0LL;
      --a1[11];
    }
  }

void sub_1865DC9DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11, uint64_t a12, char a13)
{
}

void ctu::RestDispatchListener::create(dispatch_object_s **a1@<X0>, void *a2@<X8>)
{
  __int128 v4 = operator new(0x50uLL);
  unint64_t v5 = *a1;
  *a1 = 0LL;
  void *v4 = off_189E94A50;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  void *v4 = off_189E94990;
  v4[4] = 0LL;
  v4[5] = &unk_189E949D0;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *a2 = v4;
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  unint64_t v7 = v6;
  v6->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_189E94CE8;
  v6->__shared_weak_owners_ = 0LL;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  a2[1] = v6;
  do
    unint64_t v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    unint64_t v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  v4[1] = v4;
  void v4[2] = v6;
  do
    unint64_t v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v5) {
      return;
    }
    goto LABEL_11;
  }

  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  if (v5) {
LABEL_11:
  }
    dispatch_release(v5);
}

void sub_1865DCB1C(_Unwind_Exception *a1)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::RestDispatchListener::RestDispatchListener(uint64_t a1, dispatch_object_s **a2)
{
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_189E94A50;
  unint64_t v3 = *a2;
  *(void *)(a1 + memset(&context, 0, 24) = *a2;
  if (v3) {
    dispatch_retain(v3);
  }
  *(void *)a1 = off_189E94990;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = &unk_189E949D0;
  *(_OWORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  return a1;
}

{
  dispatch_object_s *v3;
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_189E94A50;
  unint64_t v3 = *a2;
  *(void *)(a1 + memset(&context, 0, 24) = *a2;
  if (v3) {
    dispatch_retain(v3);
  }
  *(void *)a1 = off_189E94990;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = &unk_189E949D0;
  *(_OWORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  return a1;
}

uint64_t ctu::RestDispatchListener::createConnector@<X0>( ctu::RestDispatchListener *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  __int128 v4 = operator new(0x58uLL);
  void *v4 = off_189E97460;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = &unk_189E974D8;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  v4[10] = 0LL;
  std::shared_ptr<ctu::rest::RestDispatchConnector>::shared_ptr[abi:ne180100]<ctu::rest::RestDispatchConnector,void>( a2,  (uint64_t)v4);
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v5 || (v6 = *a2, uint64_t v7 = *((void *)this + 1), (v8 = std::__shared_weak_count::lock(v5)) == 0LL)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    unint64_t v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    unint64_t v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }

  unint64_t v14 = operator new(0x18uLL);
  void *v14 = &off_189E94D60;
  v14[1] = v7;
  v14[2] = v9;
  do
    unint64_t v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  std::__shared_weak_count::__release_weak(v9);
  uint64_t result = *(void *)(v6 + 64);
  *(void *)(v6 + 64) = v14;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_1865DCD2C(_Unwind_Exception *a1)
{
}

unint64_t *ctu::RestDispatchListener::getOrCreateResourceConnection_sync( void *a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v72 = *MEMORY[0x1895F89C0];
  uint64_t v6 = (unint64_t *)a1[7];
  unint64_t v7 = a1[8];
  unint64_t v8 = (char *)(a1 + 7);
  if (v7)
  {
    unint64_t v9 = *a2;
    unint64_t v10 = &v6[3 * v7];
    do
    {
      unint64_t v11 = v7 >> 1;
      unint64_t v12 = &v6[3 * (v7 >> 1)];
      unint64_t v14 = *v12;
      unint64_t v13 = v12 + 3;
      v7 += ~(v7 >> 1);
      if (v14 >= v9) {
        unint64_t v7 = v11;
      }
      else {
        uint64_t v6 = v13;
      }
    }

    while (v7);
    if (v6 != v10 && *v6 <= v9) {
      return v6 + 1;
    }
  }

  unint64_t v15 = operator new(0x48uLL);
  *unint64_t v15 = off_189E94DB0;
  v15[1] = 0LL;
  uint64_t v16 = *a3;
  *(void *)&__int128 v70 = a3[1];
  *(void *)((char *)&v70 + 7) = *(uint64_t *)((char *)a3 + 15);
  char v17 = *((_BYTE *)a3 + 23);
  a3[1] = 0LL;
  a3[2] = 0LL;
  *a3 = 0LL;
  unint64_t v19 = *a2;
  unint64_t v18 = a2[1];
  unint64_t v20 = *a2;
  v15[2] = 0LL;
  if (v18)
  {
    unint64_t v21 = (unint64_t *)(v18 + 16);
    do
      unint64_t v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    unint64_t v20 = *a2;
  }

  uint64_t v23 = v70;
  v15[4] = v16;
  v15[5] = v23;
  *(void *)((char *)v15 + 47) = *(void *)((char *)&v70 + 7);
  *((_BYTE *)v15 + 55) = v17;
  v15[3] = off_189E94448;
  v15[7] = v19;
  v15[8] = v18;
  *(void *)&__int128 v63 = v15 + 3;
  *((void *)&v63 + 1) = v15;
  __int128 v25 = (__int128 *)a1[7];
  uint64_t v24 = a1[8];
  uint64_t v26 = (__int128 *)((char *)v25 + 24 * v24);
  unint64_t v27 = v26;
  if (!v24) {
    goto LABEL_21;
  }
  unint64_t v28 = (__int128 *)a1[7];
  unint64_t v29 = a1[8];
  do
  {
    unint64_t v30 = v29 >> 1;
    xpc_object_t v31 = (unint64_t *)v28 + 3 * (v29 >> 1);
    unint64_t v33 = *v31;
    unint64_t v32 = (__int128 *)(v31 + 3);
    v29 += ~(v29 >> 1);
    if (v33 >= v20) {
      unint64_t v29 = v30;
    }
    else {
      unint64_t v28 = v32;
    }
  }

  while (v29);
  unint64_t v27 = (__int128 *)((char *)v25 + 24 * v24);
  if (v28 == v26 || (unint64_t v27 = v28, *(void *)v28 > v20))
  {
LABEL_21:
    uint64_t v67 = 0LL;
    v68 = 0LL;
    v71 = 0LL;
    __int128 v70 = v20;
    uint64_t v65 = 0LL;
    v66 = 0LL;
    unint64_t v64 = v20;
    if (v26 == v27 || *(void *)v27 > v20)
    {
      if (v25 == v27)
      {
        unint64_t v27 = v25;
        goto LABEL_46;
      }

      unint64_t v35 = (__int128 *)((char *)v27 - 24);
      unint64_t v34 = *((void *)v27 - 3);
      if (v34 < v20) {
        goto LABEL_46;
      }
      unint64_t v27 = (__int128 *)((char *)v27 - 24);
      if (v34 <= v20)
      {
        __int128 v47 = v35;
LABEL_53:
        unint64_t v27 = v47;
        goto LABEL_54;
      }

      if (v35 == v25)
      {
        __int128 v47 = v25;
      }

      else
      {
        unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (((char *)v35 - (char *)v25) >> 3);
        __int128 v47 = v25;
        do
        {
          unint64_t v37 = v36 >> 1;
          unint64_t v38 = (unint64_t *)v47 + 3 * (v36 >> 1);
          unint64_t v40 = *v38;
          uint64_t v39 = (__int128 *)(v38 + 3);
          v36 += ~(v36 >> 1);
          if (v40 >= v20) {
            unint64_t v36 = v37;
          }
          else {
            __int128 v47 = v39;
          }
        }

        while (v36);
      }

      if (v47 == v35)
      {
LABEL_46:
        if (a1[9] == v24)
        {
          boost::container::vector<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>,boost::container::new_allocator<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>>,boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>*,boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>>>( &v69,  v8,  v27,  (uint64_t)&v70);
LABEL_55:
          unint64_t v52 = v71;
          if (v71)
          {
            p_shared_owners = (unint64_t *)&v71->__shared_owners_;
            do
              unint64_t v54 = __ldaxr(p_shared_owners);
            while (__stlxr(v54 - 1, p_shared_owners));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }

          unint64_t v28 = v69;
          if (v66)
          {
            xpc_object_t v55 = &v66->__shared_owners_;
            do
              unint64_t v56 = __ldaxr((unint64_t *)v55);
            while (__stlxr(v56 - 1, (unint64_t *)v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }

          if (v68)
          {
            __int128 v57 = &v68->__shared_owners_;
            do
              unint64_t v58 = __ldaxr((unint64_t *)v57);
            while (__stlxr(v58 - 1, (unint64_t *)v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }

          goto LABEL_70;
        }

        if (v26 == v27)
        {
          *(void *)uint64_t v26 = v20;
          __int128 v51 = (void *)v25 + 3 * v24;
          v51[1] = 0LL;
          v51[2] = 0LL;
          *((void *)&v70 + 1) = 0LL;
          v71 = 0LL;
          a1[8] = v24 + 1;
          unint64_t v27 = v26;
        }

        else
        {
          __int128 v48 = (__int128 *)((char *)v26 - 24);
          __int128 *v26 = *(__int128 *)((char *)v26 - 24);
          *((void *)v25 + 3 * v24 + 2) = *((void *)v26 - 1);
          *((void *)v26 - 2) = 0LL;
          *((void *)v26 - 1) = 0LL;
          ++a1[8];
          if ((__int128 *)((char *)v26 - 24) != v27)
          {
            unint64_t v49 = (__int128 *)((char *)v26 - 24);
            do
            {
              uint64_t v50 = *((void *)v49 - 3);
              unint64_t v49 = (__int128 *)((char *)v49 - 24);
              *(void *)__int128 v48 = v50;
              std::shared_ptr<ctu::rest::RestConnectorDelegateBase>::operator=[abi:ne180100]<ctu::rest::RestConnectorDelegate<ctu::RestModuleState>,void>( (uint64_t)v48 + 8,  v48 - 1);
              __int128 v48 = v49;
            }

            while (v49 != v27);
          }

          *(void *)unint64_t v27 = v20;
          std::shared_ptr<ctu::rest::RestConnectorDelegateBase>::operator=[abi:ne180100]<ctu::rest::RestConnectorDelegate<ctu::RestModuleState>,void>( (uint64_t)v27 + 8,  (__int128 *)((char *)&v70 + 8));
        }

LABEL_54:
        v69 = v27;
        goto LABEL_55;
      }
    }

    else
    {
      unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (char *)v27) >> 3);
      __int128 v47 = v27;
      do
      {
        unint64_t v42 = v41 >> 1;
        unint64_t v43 = (unint64_t *)v47 + 3 * (v41 >> 1);
        unint64_t v45 = *v43;
        __int128 v44 = (__int128 *)(v43 + 3);
        v41 += ~(v41 >> 1);
        if (v45 >= v20) {
          unint64_t v41 = v42;
        }
        else {
          __int128 v47 = v44;
        }
      }

      while (v41);
      unint64_t v27 = (__int128 *)((char *)v25 + 24 * v24);
      if (v47 == v26) {
        goto LABEL_46;
      }
    }

    unint64_t v27 = v47;
    if (*(void *)v47 <= v20) {
      goto LABEL_53;
    }
    goto LABEL_46;
  }

LABEL_70:
  unint64_t v46 = (void *)v28 + 1;
  std::shared_ptr<ctu::rest::RestConnectorDelegateBase>::operator=[abi:ne180100]<ctu::rest::RestConnectorDelegate<ctu::RestModuleState>,void>( (uint64_t)v28 + 8,  &v63);
  uint64_t v59 = (std::__shared_weak_count *)*((void *)&v63 + 1);
  if (*((void *)&v63 + 1))
  {
    v60 = (unint64_t *)(*((void *)&v63 + 1) + 8LL);
    do
      unint64_t v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }

  return v46;
}

void sub_1865DD1E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t ctu::RestDispatchListener::getResourceConnection_sync@<X0>( uint64_t result@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = *(void *)(result + 64);
  if (!v3) {
    goto LABEL_9;
  }
  __int128 v4 = *(unint64_t **)(result + 56);
  unint64_t v5 = &v4[3 * v3];
  do
  {
    unint64_t v6 = v3 >> 1;
    unint64_t v7 = &v4[3 * (v3 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 3;
    v3 += ~(v3 >> 1);
    if (v9 >= a2) {
      unint64_t v3 = v6;
    }
    else {
      __int128 v4 = v8;
    }
  }

  while (v3);
  if (v4 != v5 && *v4 <= a2)
  {
    unint64_t v11 = v4[1];
    unint64_t v10 = v4[2];
    *a3 = v11;
    a3[1] = v10;
    if (v10)
    {
      unint64_t v12 = (unint64_t *)(v10 + 8);
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }

  else
  {
LABEL_9:
    *a3 = 0LL;
    a3[1] = 0LL;
  }

  return result;
}

void ctu::RestDispatchListener::handleClientMessage(void *a1, __int128 *a2, xpc_object_t *a3)
{
  __int128 v16 = *a2;
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  xpc_object_t v4 = *a3;
  *a3 = xpc_null_create();
  unint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (!v5 || (v6 = a1[1], (unint64_t v7 = std::__shared_weak_count::lock(v5)) == 0LL)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v8 = v7;
  unint64_t v9 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v9 = a1;
  *(_OWORD *)(v9 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v16;
  *((void *)v9 + 3) = v4;
  xpc_object_t v10 = xpc_null_create();
  unint64_t v11 = (dispatch_queue_s *)a1[3];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    unint64_t v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  uint64_t v14 = operator new(0x18uLL);
  void *v14 = v9;
  v14[1] = v6;
  v14[2] = v8;
  dispatch_async_f( v11,  v14,  (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ctu::RestDispatchListener>::execute_wrapped<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0>(ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    unint64_t v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }

  xpc_release(v10);
}

void non-virtual thunk to'ctu::RestDispatchListener::handleClientMessage( uint64_t a1, __int128 *a2, xpc_object_t *a3)
{
}

void ctu::RestDispatchListener::handleClientMessageWithReply( void *a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  *(void *)unint64_t v18 = a1;
  *(_OWORD *)&v18[8] = *(_OWORD *)a2;
  *(void *)a2 = 0LL;
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  xpc_object_t object = *a3;
  *a3 = xpc_null_create();
  uint64_t v6 = v21;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v21, a4);
  unint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (!v7 || (v8 = a1[1], (unint64_t v9 = std::__shared_weak_count::lock(v7)) == 0LL)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v10 = v9;
  unint64_t v11 = operator new(0x40uLL);
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v18;
  _OWORD v11[2] = *(void *)&v18[16];
  v11[3] = object;
  xpc_object_t objecta = xpc_null_create();
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v11 + 4), (uint64_t)v21);
  unint64_t v12 = (dispatch_queue_s *)a1[3];
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    unint64_t v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  unint64_t v15 = operator new(0x18uLL);
  *unint64_t v15 = v11;
  v15[1] = v8;
  v15[2] = v10;
  dispatch_async_f( v12,  v15,  (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ctu::RestDispatchListener>::execute_wrapped<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0>(ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    unint64_t v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }

  if (v22 == v21)
  {
    uint64_t v17 = 4LL;
    goto LABEL_13;
  }

  if (v22)
  {
    uint64_t v17 = 5LL;
    uint64_t v6 = v22;
LABEL_13:
    (*(void (**)(void *))(*v6 + 8 * v17))(v6);
  }

  xpc_release(objecta);
}

void sub_1865DD57C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'ctu::RestDispatchListener::handleClientMessageWithReply( uint64_t a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
}

void ctu::RestDispatchListener::handleClientError(void *a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t v5 = *a3;
  *a3 = xpc_null_create();
  uint64_t v6 = (std::__shared_weak_count *)a1[2];
  if (!v6 || (uint64_t v7 = a1[1], (v8 = std::__shared_weak_count::lock(v6)) == 0LL)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v9 = v8;
  xpc_object_t v10 = operator new(0x18uLL);
  void *v10 = a1;
  v10[1] = a2;
  _OWORD v10[2] = v5;
  xpc_object_t v11 = xpc_null_create();
  unint64_t v12 = (dispatch_queue_s *)a1[3];
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    unint64_t v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  unint64_t v15 = operator new(0x18uLL);
  *unint64_t v15 = v10;
  v15[1] = v7;
  v15[2] = v9;
  dispatch_async_f( v12,  v15,  (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ctu::RestDispatchListener>::execute_wrapped<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0>(ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0,dispatch_queue_s *::default_delete<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    unint64_t v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }

  xpc_release(v11);
}

void non-virtual thunk to'ctu::RestDispatchListener::handleClientError( uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
}

void ctu::RestXpcListener::~RestXpcListener(ctu::RestXpcListener *this)
{
  *(void *)this = off_189E94968;
  boost::container::vector<boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>,boost::container::new_allocator<boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>>,void>::~vector((uint64_t)this + 80);
  ctu::XpcServerHelper::~XpcServerHelper((xpc_connection_t *)this + 9);
  uint64_t v2 = *((void *)this + 8);
  *((void *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  unint64_t v3 = (dispatch_object_s *)*((void *)this + 4);
  if (v3) {
    dispatch_release(v3);
  }
  xpc_release(*((xpc_object_t *)this + 3));
  *((void *)this + 3) = 0LL;
  xpc_object_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

{
  uint64_t v2;
  dispatch_object_s *v3;
  std::__shared_weak_count *v4;
  *(void *)this = off_189E94968;
  boost::container::vector<boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>,boost::container::new_allocator<boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>>,void>::~vector((uint64_t)this + 80);
  ctu::XpcServerHelper::~XpcServerHelper((xpc_connection_t *)this + 9);
  uint64_t v2 = *((void *)this + 8);
  *((void *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  unint64_t v3 = (dispatch_object_s *)*((void *)this + 4);
  if (v3) {
    dispatch_release(v3);
  }
  xpc_release(*((xpc_object_t *)this + 3));
  *((void *)this + 3) = 0LL;
  xpc_object_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(this);
}

void ctu::RestDispatchListener::~RestDispatchListener(ctu::RestDispatchListener *this)
{
  *(void *)this = off_189E94990;
  *((void *)this + 5) = &unk_189E949D0;
  boost::container::vector<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>,boost::container::new_allocator<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>>,void>::~vector((uint64_t)this + 56);
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable((void *)this + 1);
}

{
  uint64_t v2;
  *(void *)this = off_189E94990;
  *((void *)this + 5) = &unk_189E949D0;
  boost::container::vector<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>,boost::container::new_allocator<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>>,void>::~vector((uint64_t)this + 56);
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable((void *)this + 1);
  operator delete(this);
}

void non-virtual thunk to'ctu::RestDispatchListener::~RestDispatchListener(ctu::RestDispatchListener *this)
{
  *((void *)this - 5) = off_189E94990;
  *(void *)this = &unk_189E949D0;
  boost::container::vector<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>,boost::container::new_allocator<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>>,void>::~vector((uint64_t)this + 16);
  uint64_t v2 = *((void *)this + 1);
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable((void *)this - 4);
}

{
  char *v2;
  uint64_t v3;
  *((void *)this - 5) = off_189E94990;
  uint64_t v2 = (char *)this - 40;
  *(void *)this = &unk_189E949D0;
  boost::container::vector<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>,boost::container::new_allocator<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>>,void>::~vector((uint64_t)this + 16);
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable((void *)this - 4);
  operator delete(v2);
}

uint64_t boost::container::vector<boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>,boost::container::new_allocator<boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>>,void>::~vector( uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)a1 + 8LL;
    do
    {
      std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v3);
      xpc_release(*(xpc_object_t *)(v3 - 8));
      *(void *)(v3 - std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
      v3 += 24LL;
      --v2;
    }

    while (v2);
  }

  if (*(void *)(a1 + 16)) {
    operator delete(*(void **)a1);
  }
  return a1;
}

xpc_object_t *boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>::~pair( xpc_object_t *a1)
{
  *a1 = 0LL;
  return a1;
}

uint64_t boost::container::vector<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>,boost::container::new_allocator<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>>,void>::~vector( uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)a1 + 8LL;
    do
    {
      --v2;
      uint64_t v3 = std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v3) + 24;
    }

    while (v2);
  }

  if (*(void *)(a1 + 16)) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__shared_ptr_pointer<ctu::RestXpcListener *,std::shared_ptr<ctu::RestXpcListener>::__shared_ptr_default_delete<ctu::RestXpcListener,ctu::RestXpcListener>,std::allocator<ctu::RestXpcListener>>::~__shared_ptr_pointer( std::__shared_weak_count *a1)
{
}

uint64_t std::__shared_ptr_pointer<ctu::RestXpcListener *,std::shared_ptr<ctu::RestXpcListener>::__shared_ptr_default_delete<ctu::RestXpcListener,ctu::RestXpcListener>,std::allocator<ctu::RestXpcListener>>::__on_zero_shared( uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ctu::RestXpcListener *,std::shared_ptr<ctu::RestXpcListener>::__shared_ptr_default_delete<ctu::RestXpcListener,ctu::RestXpcListener>,std::allocator<ctu::RestXpcListener>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void ___ZN3ctu15XpcServerHelper13startListenerINS_15RestXpcListenerEEEvN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke( void *a1, xpc_object_t a2)
{
  uint64_t v3 = (void *)a1[4];
  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v17 = std::__shared_weak_count::lock(v4);
    if (!v17) {
      return;
    }
    uint64_t v6 = a1[5];
    uint64_t v16 = v6;
    if (v6)
    {
      uint64_t v7 = MEMORY[0x186E3CD4C](a2);
      uint64_t v8 = MEMORY[0x1895F9238];
      if (v7 != MEMORY[0x1895F9238])
      {
        if (v7 == MEMORY[0x1895F9268] && *v3 == a1[7])
        {
          if (a2) {
            xpc_retain(a2);
          }
          else {
            a2 = xpc_null_create();
          }
          xpc_release(a2);
        }

        goto LABEL_21;
      }

      if (a2)
      {
        xpc_retain(a2);
        xpc_connection_t v15 = (xpc_connection_t)a2;
        unint64_t v9 = (_xpc_connection_s *)a2;
      }

      else
      {
        unint64_t v9 = (_xpc_connection_s *)xpc_null_create();
        xpc_connection_t v15 = v9;
        if (!v9)
        {
          xpc_object_t v10 = (_xpc_connection_s *)xpc_null_create();
          unint64_t v9 = 0LL;
          goto LABEL_16;
        }
      }

      if (MEMORY[0x186E3CD4C](v9) == v8)
      {
        xpc_retain(v9);
        xpc_object_t v10 = v9;
        goto LABEL_17;
      }

      xpc_object_t v10 = (_xpc_connection_s *)xpc_null_create();
LABEL_16:
      xpc_connection_t v15 = v10;
LABEL_17:
      BOOL v11 = ctu::RestXpcListener::handleNewClient(v6, &v15);
      xpc_release(v10);
      xpc_connection_t v15 = 0LL;
      xpc_release(v9);
      if (!v11) {
        xpc_connection_cancel((xpc_connection_t)a2);
      }
    }
  }

void sub_1865DDC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN3ctu15RestXpcListenerEEE( uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 16);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN3ctu15RestXpcListenerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

xpc_object_t **boost::container::dtl::value_destructor<boost::container::new_allocator<boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>>,boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>>::~value_destructor( xpc_object_t **a1)
{
  uint64_t v2 = *a1;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)(*a1 + 1));
  xpc_release(*v2);
  *uint64_t v2 = 0LL;
  return a1;
}

uint64_t boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>::pair( uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = xpc_null_create();
  *(_OWORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  return a1;
}

void boost::container::vector<boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>,boost::container::new_allocator<boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>>,boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>*,boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>>>( void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)a2 + 2);
  unint64_t v5 = *((void *)a2 + 1) + 1LL;
  if (0x555555555555555LL - v4 < v5 - v4) {
    goto LABEL_25;
  }
  unint64_t v6 = v4 >> 61;
  unint64_t v7 = 8 * v4;
  if (v6 > 4) {
    uint64_t v8 = -1LL;
  }
  else {
    uint64_t v8 = v7;
  }
  unint64_t v9 = v7 / 5;
  if (v6) {
    unint64_t v9 = v8;
  }
  if (v9 >= 0x555555555555555LL) {
    unint64_t v9 = 0x555555555555555LL;
  }
  unint64_t v10 = v5 <= v9 ? v9 : *((void *)a2 + 1) + 1LL;
  if (v10 > 0x555555555555555LL) {
LABEL_25:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  uint64_t v15 = *(void *)a2;
  uint64_t v16 = (char *)operator new(24 * v10);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)a2;
  uint64_t v19 = *(void *)a2 + 24LL * *((void *)a2 + 1);
  if (*(void *)a2 != a3)
  {
    uint64_t v20 = *(void *)a2;
    do
    {
      uint64_t v21 = boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>::pair( (uint64_t)v16,  v20);
      v20 += 24LL;
      uint64_t v16 = (char *)(v21 + 24);
    }

    while (v20 != a3);
  }

  uint64_t v22 = boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>::pair( (uint64_t)v16,  a4);
  if (v19 != a3)
  {
    uint64_t v23 = v22 + 24;
    uint64_t v24 = a3;
    do
    {
      uint64_t v25 = boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>::pair(v23, v24);
      v24 += 24LL;
      uint64_t v23 = v25 + 24;
    }

    while (v24 != v19);
  }

  if (v18)
  {
    uint64_t v26 = *((void *)a2 + 1);
    if (v26)
    {
      uint64_t v27 = v18 + 8;
      do
      {
        std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v27);
        xpc_release(*(xpc_object_t *)(v27 - 8));
        *(void *)(v27 - std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
        v27 += 24LL;
        --v26;
      }

      while (v26);
    }

    operator delete(*(void **)a2);
  }

  uint64_t v28 = *((void *)a2 + 1) + 1LL;
  *(void *)a2 = v17;
  *((void *)a2 + 1) = v28;
  *((void *)a2 + 2) = v10;
  *a1 = &v17[a3 - v15];
}

void **boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>::operator=( void **a1, uint64_t a2)
{
  unint64_t v4 = *(void **)a2;
  *(void *)a2 = xpc_null_create();
  unint64_t v5 = *a1;
  *a1 = v4;
  xpc_release(v5);
  std::shared_ptr<ctu::rest::RestConnectorDelegateBase>::operator=[abi:ne180100]<ctu::rest::RestConnectorDelegate<ctu::RestModuleState>,void>( (uint64_t)(a1 + 1),  (__int128 *)(a2 + 8));
  return a1;
}

void *std::allocate_shared[abi:ne180100]<ctu::XpcRestResourceConnection,std::allocator<ctu::XpcRestResourceConnection>,xpc::connection const&,std::string,void>@<X0>( void **a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  unint64_t v6 = operator new(0x40uLL);
  uint64_t result = std::__shared_ptr_emplace<ctu::XpcRestResourceConnection>::__shared_ptr_emplace[abi:ne180100]<xpc::connection const&,std::string,std::allocator<ctu::XpcRestResourceConnection>,0>( v6,  a1,  a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1865DDF5C(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<ctu::XpcRestResourceConnection>::__shared_ptr_emplace[abi:ne180100]<xpc::connection const&,std::string,std::allocator<ctu::XpcRestResourceConnection>,0>( void *a1, void **a2, uint64_t a3)
{
  a1[2] = 0LL;
  *a1 = &unk_189E94BE8;
  a1[1] = 0LL;
  std::construct_at[abi:ne180100]<ctu::XpcRestResourceConnection,xpc::connection const&,std::string,ctu::XpcRestResourceConnection*>( (uint64_t)(a1 + 3),  a2,  a3);
  return a1;
}

void sub_1865DDFA8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_emplace<ctu::XpcRestResourceConnection>::~__shared_ptr_emplace( std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_189E94BE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ctu::XpcRestResourceConnection>::~__shared_ptr_emplace( std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_189E94BE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<ctu::XpcRestResourceConnection>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::construct_at[abi:ne180100]<ctu::XpcRestResourceConnection,xpc::connection const&,std::string,ctu::XpcRestResourceConnection*>( uint64_t a1, void **a2, uint64_t a3)
{
  unint64_t v5 = *a2;
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v8 = *(void *)(a3 + 16);
  *(void *)(a3 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  *(void *)a3 = 0LL;
  ctu::XpcRestResourceConnection::XpcRestResourceConnection(a1, &object, (__int128 *)__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(object);
  return a1;
}

void sub_1865DE090( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t ctu::XpcRestResourceConnection::XpcRestResourceConnection( uint64_t a1, xpc_object_t *a2, __int128 *a3)
{
  *(void *)a1 = off_189E943D8;
  __int128 v4 = *a3;
  *(void *)(a1 + memset(&context, 0, 24) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v4;
  *((void *)a3 + 1) = 0LL;
  *((void *)a3 + 2) = 0LL;
  *(void *)a3 = 0LL;
  *(void *)a1 = off_189E94410;
  *(void *)(a1 + 32) = *a2;
  *a2 = xpc_null_create();
  return a1;
}

void ___ZNK3ctu15XpcServerHelper12acceptClientINS_15RestXpcListenerEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke( void *a1, xpc_object_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    unint64_t v5 = std::__shared_weak_count::lock(v3);
    uint64_t v19 = v5;
    if (v5)
    {
      unint64_t v6 = v5;
      unint64_t v7 = (void *)a1[4];
      v18[1] = v7;
      if (!v7)
      {
LABEL_24:
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          unint64_t v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }

        return;
      }

      uint64_t v8 = MEMORY[0x186E3CD4C](a2);
      uint64_t v9 = MEMORY[0x1895F9250];
      if (v8 != MEMORY[0x1895F9250])
      {
        if (v8 == MEMORY[0x1895F9268])
        {
          xpc_object_t v10 = (xpc_object_t)a1[6];
          xpc_object_t v16 = v10;
          if (v10)
          {
            xpc_retain(v10);
          }

          else
          {
            xpc_object_t v10 = xpc_null_create();
            xpc_object_t v16 = v10;
          }

          xpc_object_t object = a2;
          if (a2) {
            xpc_retain(a2);
          }
          else {
            xpc_object_t object = xpc_null_create();
          }
          ctu::RestXpcListener::handleClientError(v7, (const xpc::connection *)&v16, &object);
          xpc_release(object);
          xpc_object_t object = 0LL;
          xpc_release(v10);
          xpc_object_t v16 = 0LL;
        }

        goto LABEL_24;
      }

      BOOL v11 = (void *)a1[6];
      v18[0] = v11;
      if (v11)
      {
        xpc_retain(v11);
        if (a2)
        {
LABEL_10:
          xpc_retain(a2);
          xpc_object_t v17 = a2;
          goto LABEL_13;
        }
      }

      else
      {
        v18[0] = xpc_null_create();
        if (a2) {
          goto LABEL_10;
        }
      }

      a2 = xpc_null_create();
      xpc_object_t v17 = a2;
      if (!a2)
      {
        xpc_object_t v12 = xpc_null_create();
        a2 = 0LL;
        goto LABEL_22;
      }

LABEL_13:
      if (MEMORY[0x186E3CD4C](a2) == v9)
      {
        xpc_retain(a2);
        goto LABEL_23;
      }

      xpc_object_t v12 = xpc_null_create();
LABEL_22:
      xpc_object_t v17 = v12;
LABEL_23:
      ctu::RestXpcListener::handleClientMessage((ctu::RestXpcListener *)v7, v18, &v17);
      xpc_release(v17);
      xpc_object_t v17 = 0LL;
      xpc_release(a2);
      xpc_release(v18[0]);
      unint64_t v6 = v19;
      if (!v19) {
        return;
      }
      goto LABEL_24;
    }
  }

    goto LABEL_14;
  }

    goto LABEL_14;
  }

  if (MEMORY[0x186E3CD4C](a2) == v9)
  {
    xpc_retain(a2);
    xpc_object_t v12 = a2;
    goto LABEL_23;
  }

  xpc_object_t v12 = xpc_null_create();
LABEL_22:
  v19[0] = v12;
LABEL_23:
  unint64_t v13 = *(const void **)(a1 + 56);
  if (v13) {
    unint64_t v14 = _Block_copy(v13);
  }
  else {
    unint64_t v14 = 0LL;
  }
  dispatch::block<void({block_pointer})(xpc::connection,xpc::dict)>::operator()<xpc::connection&,xpc::dict&>( (uint64_t)v14,  v11,  v19);
  if (v14) {
    _Block_release(v14);
  }
  xpc_release(v12);
  v19[0] = 0LL;
  xpc_release(a2);
  xpc_release(v11);
  unint64_t v6 = v20;
  if (v20) {
    goto LABEL_29;
  }
}

  *(void *)&v14[0] = &unk_189E96F18;
  xpc_object_t v10 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1))
  {
    BOOL v11 = (unint64_t *)(*((void *)&v16 + 1) + 8LL);
    do
      xpc_object_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  ctu::LoggerCommonBase::~LoggerCommonBase((void **)v14);
  return v9;
}

void sub_1865DE2F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, xpc_object_t a11, xpc_object_t a12, char a13)
{
}

uint64_t __copy_helper_block_e8_32c46_ZTSNSt3__18weak_ptrIN3ctu15RestXpcListenerEEE( uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 16);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

void __destroy_helper_block_e8_32c46_ZTSNSt3__18weak_ptrIN3ctu15RestXpcListenerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,std::allocator<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0>,void ()(xpc::object)>::~__func( uint64_t a1)
{
  *(void *)a1 = off_189E94C68;
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  return a1;
}

void std::__function::__func<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,std::allocator<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0>,void ()(xpc::object)>::~__func( xpc_object_t *a1)
{
  *a1 = off_189E94C68;
  xpc_release(a1[1]);
  operator delete(a1);
}

void **std::__function::__func<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,std::allocator<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0>,void ()(xpc::object)>::__clone( uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  uint64_t v2 = (void **)operator new(0x10uLL);
  *uint64_t v2 = off_189E94C68;
  std::__compressed_pair_elem<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0 const&,0ul>( v2 + 1,  v1);
  return v2;
}

void **std::__function::__func<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,std::allocator<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0>,void ()(xpc::object)>::__clone( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189E94C68;
  return std::__compressed_pair_elem<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0 const&,0ul>( (void **)(a2 + 8),  (void **)(a1 + 8));
}

void std::__function::__func<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,std::allocator<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0>,void ()(xpc::object)>::destroy( uint64_t a1)
{
}

void std::__function::__func<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,std::allocator<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0>,void ()(xpc::object)>::destroy_deallocate( xpc_object_t *a1)
{
}

void std::__function::__func<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,std::allocator<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0>,void ()(xpc::object)>::operator()( uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  *a2 = xpc_null_create();
  unint64_t v5 = *(void **)(a1 + 8);
  unint64_t v4 = (xpc_object_t *)(a1 + 8);
  remote_connection = xpc_dictionary_get_remote_connection(v5);
  if (remote_connection)
  {
    xpc_object_t v11 = v3;
    uint64_t v7 = MEMORY[0x1895F9250];
    if (v3 && MEMORY[0x186E3CD4C](v3) == v7)
    {
      xpc_retain(v3);
      xpc_object_t v8 = v3;
    }

    else
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t v11 = v8;
    }

    if (MEMORY[0x186E3CD4C](v8) == v7)
    {
      v9[0] = &v11;
      v9[1] = "v";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v9, &object);
      ctu::rest::updateReplyValue((uint64_t)v4, &object);
      xpc_release(object);
      xpc_object_t v8 = v11;
    }

    xpc_release(v8);
    xpc_connection_send_message(remote_connection, *v4);
  }

  xpc_release(v3);
}

void sub_1865DE5AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, xpc_object_t a12)
{
}

uint64_t std::__function::__func<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,std::allocator<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0>,void ()(xpc::object)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,std::allocator<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0>,void ()(xpc::object)>::target_type()
{
}

void **std::__compressed_pair_elem<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0 const&,0ul>( void **a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    *a1 = xpc_null_create();
  }
  return a1;
}

void std::__function::__alloc_func<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,std::allocator<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0>,void ()(xpc::object)>::destroy[abi:ne180100]( xpc_object_t *a1)
{
  *a1 = 0LL;
}

void std::__shared_ptr_pointer<ctu::RestDispatchListener *,std::shared_ptr<ctu::RestDispatchListener>::__shared_ptr_default_delete<ctu::RestDispatchListener,ctu::RestDispatchListener>,std::allocator<ctu::RestDispatchListener>>::~__shared_ptr_pointer( std::__shared_weak_count *a1)
{
}

uint64_t std::__shared_ptr_pointer<ctu::RestDispatchListener *,std::shared_ptr<ctu::RestDispatchListener>::__shared_ptr_default_delete<ctu::RestDispatchListener,ctu::RestDispatchListener>,std::allocator<ctu::RestDispatchListener>>::__on_zero_shared( uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ctu::RestDispatchListener *,std::shared_ptr<ctu::RestDispatchListener>::__shared_ptr_default_delete<ctu::RestDispatchListener,ctu::RestDispatchListener>,std::allocator<ctu::RestDispatchListener>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void *ctu::rest::RestConnectorSink<ctu::RestDispatchListener>::~RestConnectorSink(void *a1)
{
  *a1 = &off_189E94D60;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void ctu::rest::RestConnectorSink<ctu::RestDispatchListener>::~RestConnectorSink(void *__p)
{
  *std::string __p = &off_189E94D60;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void ctu::rest::RestConnectorSink<ctu::RestDispatchListener>::handleClientMessage( uint64_t a1, __int128 *a2, xpc_object_t *a3)
{
  uint64_t v16 = 0LL;
  xpc_object_t v17 = 0LL;
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    xpc_object_t v17 = std::__shared_weak_count::lock(v4);
    if (!v17) {
      return;
    }
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v16 = v7;
    if (v7)
    {
      __int128 v15 = *a2;
      *(void *)a2 = 0LL;
      *((void *)a2 + 1) = 0LL;
      xpc_object_t object = *a3;
      *a3 = xpc_null_create();
      (*(void (**)(uint64_t, __int128 *, xpc_object_t *))(*(void *)v7 + 24LL))(v7, &v15, &object);
      xpc_release(object);
      xpc_object_t object = 0LL;
      xpc_object_t v8 = (std::__shared_weak_count *)*((void *)&v15 + 1);
      if (*((void *)&v15 + 1))
      {
        uint64_t v9 = (unint64_t *)(*((void *)&v15 + 1) + 8LL);
        do
          unint64_t v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }

  xpc_object_t v11 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_1865DE8A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11, uint64_t a12, char a13)
{
}

void ctu::rest::RestConnectorSink<ctu::RestDispatchListener>::handleClientMessageWithReply( uint64_t a1, __int128 *a2, xpc_object_t *a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    uint64_t v21 = std::__shared_weak_count::lock(v5);
    if (!v21) {
      return;
    }
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v20 = v9;
    if (v9)
    {
      __int128 v19 = *a2;
      *(void *)a2 = 0LL;
      *((void *)a2 + 1) = 0LL;
      xpc_object_t object = *a3;
      *a3 = xpc_null_create();
      std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v22, a4);
      (*(void (**)(uint64_t, __int128 *, xpc_object_t *, _BYTE *))(*(void *)v9 + 32LL))( v9,  &v19,  &object,  v22);
      unint64_t v10 = v23;
      if (v23 == v22)
      {
        uint64_t v11 = 4LL;
        unint64_t v10 = v22;
      }

      else
      {
        if (!v23)
        {
LABEL_9:
          xpc_release(object);
          xpc_object_t object = 0LL;
          xpc_object_t v12 = (std::__shared_weak_count *)*((void *)&v19 + 1);
          if (*((void *)&v19 + 1))
          {
            unint64_t v13 = (unint64_t *)(*((void *)&v19 + 1) + 8LL);
            do
              unint64_t v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }

          goto LABEL_14;
        }

        uint64_t v11 = 5LL;
      }

      (*(void (**)(void))(*v10 + 8 * v11))();
      goto LABEL_9;
    }
  }

LABEL_14:
  __int128 v15 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  if (*((void *)&v18 + 1))
  {
    __int128 v15 = (unint64_t *)(*((void *)&v18 + 1) + 8LL);
    do
      uint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(void))(**((void **)&v18 + 1) + 16LL))(*((void *)&v18 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v18 + 1));
    }
  }

  return (*((uint64_t (**)(std::__shared_weak_count_vtbl *))(*a2)->~__shared_weak_count + 7))(*a2);
}

  uint64_t result = v19;
  if (v19) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  return result;
}

  v7[1] = v5;
  ctu::rest::write_rest_value(v7, a2);
}

  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  if (v33) {
    dispatch_release(v33);
  }
  if (MEMORY[0x186E3CD4C](*a4) == MEMORY[0x1895F9260])
  {
    uint64_t v22 = *a5;
    uint64_t v21 = (std::__shared_weak_count *)a5[1];
    if (v21)
    {
      uint64_t v23 = (unint64_t *)&v21->__shared_weak_owners_;
      do
        uint64_t v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }

    v28[0] = MEMORY[0x1895F87A8];
    v28[1] = 1174405120LL;
    _OWORD v28[2] = ___ZN3ctu9XpcLogger6createEN8dispatch5queueEPKcNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEN3xpc8endpointE_block_invoke;
    v28[3] = &__block_descriptor_tmp_25;
    v28[4] = v22;
    unint64_t v29 = v21;
    if (v21)
    {
      uint64_t v25 = (unint64_t *)&v21->__shared_weak_owners_;
      do
        uint64_t v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }

    uint64_t v27 = (void *)*a4;
    xpc_object_t object = v27;
    if (v27) {
      xpc_retain(v27);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)&v22[1].__on_zero_shared, (uint64_t)v28);
    xpc_release(object);
    xpc_object_t object = 0LL;
    if (v29) {
      std::__shared_weak_count::__release_weak(v29);
    }
    if (v21) {
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  if (v9)
  {
    uint64_t v20 = (unint64_t *)&v9->__shared_owners_;
    do
      uint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  uint64_t v22 = *a4;
  if ((*a4)[3].~__shared_weak_count_0)
  {
    std::shared_ptr<ctu::LogServer>::shared_ptr[abi:ne180100]<ctu::LogServer,void>(&v33, &v22->~__shared_weak_count_0);
    if (v33) {
      uint64_t v23 = v33 + 72;
    }
    else {
      uint64_t v23 = 0LL;
    }
    unint64_t v33 = v23;
    unint64_t v35 = 0LL;
    unint64_t v36 = 0LL;
    (**(void (***)(void (__cdecl *)(std::__shared_weak_count *__hidden), uint64_t, uint64_t *))v22[3].~__shared_weak_count_0)( v22[3].~__shared_weak_count_0,  (uint64_t)&v22[2].~__shared_weak_count_0,  &v33);
    uint64_t v24 = v34;
    if (v34)
    {
      uint64_t v25 = (unint64_t *)&v34->__shared_owners_;
      do
        uint64_t v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    uint64_t v27 = v36;
    if (v36)
    {
      uint64_t v28 = (unint64_t *)&v36->__shared_owners_;
      do
        unint64_t v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }

void sub_1865DEA50( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ctu::rest::RestConnectorSink<ctu::RestDispatchListener>::handleClientError( uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    xpc_object_t object[2] = v7;
    if (v7)
    {
      xpc_object_t v8 = v7;
      uint64_t v9 = *(void **)(a1 + 8);
      object[1] = v9;
      if (v9)
      {
        object[0] = *a3;
        *a3 = xpc_null_create();
        (*(void (**)(void *, uint64_t, xpc_object_t *))(*(void *)v9 + 40LL))(v9, a2, object);
        xpc_release(object[0]);
        object[0] = 0LL;
      }

      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }

void sub_1865DEB80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
}

void boost::container::vector<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>,boost::container::new_allocator<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>>,boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>*,boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>>>( void *a1, char *a2, void *a3, uint64_t a4)
{
  unint64_t v4 = *((void *)a2 + 2);
  unint64_t v5 = *((void *)a2 + 1) + 1LL;
  if (0x555555555555555LL - v4 < v5 - v4) {
    goto LABEL_25;
  }
  unint64_t v6 = v4 >> 61;
  unint64_t v7 = 8 * v4;
  if (v6 > 4) {
    uint64_t v8 = -1LL;
  }
  else {
    uint64_t v8 = v7;
  }
  unint64_t v9 = v7 / 5;
  if (v6) {
    unint64_t v9 = v8;
  }
  if (v9 >= 0x555555555555555LL) {
    unint64_t v9 = 0x555555555555555LL;
  }
  unint64_t v10 = v5 <= v9 ? v9 : *((void *)a2 + 1) + 1LL;
  if (v10 > 0x555555555555555LL) {
LABEL_25:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  __int128 v15 = *(void **)a2;
  uint64_t v16 = (char *)operator new(24 * v10);
  unint64_t v17 = v16;
  uint64_t v18 = *(void **)a2;
  uint64_t v19 = *(void *)a2 + 24LL * *((void *)a2 + 1);
  uint64_t v20 = v16;
  if (*(void **)a2 != a3)
  {
    uint64_t v21 = *(void **)a2;
    uint64_t v20 = v16;
    do
    {
      *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
      *((void *)v20 + 2) = v21[2];
      v21[1] = 0LL;
      v21[2] = 0LL;
      v20 += 24;
      v21 += 3;
    }

    while (v21 != a3);
  }

  *(_OWORD *)uint64_t v20 = *(_OWORD *)a4;
  *((void *)v20 + 2) = *(void *)(a4 + 16);
  *(void *)(a4 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  *(void *)(a4 + 16) = 0LL;
  if ((void *)v19 != a3)
  {
    uint64_t v22 = v20 + 40;
    uint64_t v23 = a3;
    do
    {
      *((_OWORD *)v22 - 1) = *(_OWORD *)v23;
      *uint64_t v22 = v23[2];
      v22 += 3;
      v23[1] = 0LL;
      xpc_object_t v23[2] = 0LL;
      v23 += 3;
    }

    while (v23 != (void *)v19);
  }

  if (v18)
  {
    uint64_t v24 = *((void *)a2 + 1);
    if (v24)
    {
      uint64_t v25 = (uint64_t)(v18 + 1);
      do
      {
        --v24;
        uint64_t v25 = std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v25) + 24;
      }

      while (v24);
    }

    operator delete(*(void **)a2);
  }

  uint64_t v26 = *((void *)a2 + 1) + 1LL;
  *(void *)a2 = v17;
  *((void *)a2 + 1) = v26;
  *((void *)a2 + 2) = v10;
  *a1 = &v17[(char *)a3 - (char *)v15];
}

void std::__shared_ptr_emplace<ctu::DispatchRestResourceConnection>::~__shared_ptr_emplace( std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_189E94DB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ctu::DispatchRestResourceConnection>::~__shared_ptr_emplace( std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_189E94DB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<ctu::DispatchRestResourceConnection>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void dispatch::async<void ctu::SharedSynchronizable<ctu::RestDispatchListener>::execute_wrapped<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0>(ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke( uint64_t *a1)
{
  uint64_t v2 = *a1;
  __int128 v15 = (xpc_object_t *)v2;
  uint64_t v3 = *(void **)v2;
  unint64_t v4 = (void **)(v2 + 24);
  if (xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), "r"))
  {
    v17[0] = v2 + 24;
    v17[1] = "a";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v17, &object);
    unint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    uint64_t v22 = 0LL;
    xpc::dyn_cast_or_default(&object, (uint64_t)&v20, &__p);
    ResourceConnection_sync = ctu::RestDispatchListener::getOrCreateResourceConnection_sync( v3,  (unint64_t *)(v2 + 8),  (uint64_t *)&__p);
    unint64_t v6 = *ResourceConnection_sync;
    unint64_t v7 = ResourceConnection_sync[1];
    if (v7)
    {
      uint64_t v8 = (unint64_t *)(v7 + 8);
      do
        unint64_t v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }

    xpc_release(object);
    uint64_t v10 = v3[6];
    unint64_t v20 = v6;
    uint64_t v21 = (std::__shared_weak_count *)v7;
    unint64_t v11 = *v4;
    xpc_object_t v16 = v11;
    if (v11) {
      xpc_retain(v11);
    }
    else {
      xpc_object_t v16 = xpc_null_create();
    }
    (*(void (**)(uint64_t, unint64_t *, xpc_object_t *))(*(void *)v10 + 16LL))(v10, &v20, &v16);
    xpc_release(v16);
    xpc_object_t v16 = 0LL;
    xpc_object_t v12 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        unint64_t v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }

  std::unique_ptr<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0>>::~unique_ptr[abi:ne180100](&v15);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_1865DEEDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t *a10, xpc_object_t object, uint64_t a12, uint64_t a13, xpc_object_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, std::__shared_weak_count *a22)
{
  xpc_object_t object = 0LL;
  uint64_t v24 = a22;
  if (a22)
  {
    p_shared_owners = (unint64_t *)&a22->__shared_owners_;
    do
      unint64_t v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }

  std::unique_ptr<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v22 + 8);
  operator delete(v22);
  _Unwind_Resume(a1);
}

xpc_object_t **std::unique_ptr<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0>>::~unique_ptr[abi:ne180100]( xpc_object_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    xpc_release(v2[3]);
    v2[3] = 0LL;
    std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 1));
    operator delete(v2);
  }

  return a1;
}

void dispatch::async<void ctu::SharedSynchronizable<ctu::RestDispatchListener>::execute_wrapped<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0>(ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke( uint64_t *a1)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *a1;
  uint64_t v20 = v2;
  uint64_t v3 = *(void **)v2;
  if (!xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), "r")) {
    goto LABEL_25;
  }
  v22[0] = v2 + 24;
  v22[1] = "a";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v22, &object);
  unint64_t v25 = 0LL;
  unint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  xpc::dyn_cast_or_default(&object, (uint64_t)&v25, &__p);
  ResourceConnection_sync = ctu::RestDispatchListener::getOrCreateResourceConnection_sync( v3,  (unint64_t *)(v2 + 8),  (uint64_t *)&__p);
  unint64_t v5 = *ResourceConnection_sync;
  unint64_t v6 = ResourceConnection_sync[1];
  if (v6)
  {
    unint64_t v7 = (unint64_t *)(v6 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  xpc_release(object);
  uint64_t v9 = v3[6];
  unint64_t v25 = v5;
  unint64_t v26 = (std::__shared_weak_count *)v6;
  uint64_t v10 = *(void **)(v2 + 24);
  xpc_object_t v21 = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    xpc_object_t v21 = xpc_null_create();
  }
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v28, v2 + 32);
  xpc_object_t v31 = 0LL;
  unint64_t v11 = operator new(0x28uLL);
  *unint64_t v11 = &off_189E94E00;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v11 + 1), (uint64_t)v28);
  xpc_object_t v31 = v11;
  (*(void (**)(uint64_t, unint64_t *, xpc_object_t *, _BYTE *))(*(void *)v9 + 24LL))( v9,  &v25,  &v21,  v30);
  unint64_t v13 = v31;
  if (v31 == v30)
  {
    uint64_t v14 = 4LL;
    unint64_t v13 = v30;
  }

  else
  {
    if (!v31) {
      goto LABEL_15;
    }
    uint64_t v14 = 5LL;
  }

  (*(void (**)(void *, uint64_t))(*v13 + 8 * v14))(v13, v12);
LABEL_15:
  __int128 v15 = v29;
  if (v29 == v28)
  {
    uint64_t v16 = 4LL;
    __int128 v15 = v28;
    goto LABEL_19;
  }

  if (v29)
  {
    uint64_t v16 = 5LL;
LABEL_19:
    (*(void (**)(void *, uint64_t))(*v15 + 8 * v16))(v15, v12);
  }

  xpc_release(v21);
  xpc_object_t v21 = 0LL;
  unint64_t v17 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

LABEL_25:
  std::unique_ptr<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0>>::~unique_ptr[abi:ne180100](&v20);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  operator delete(a1);
}

  if (v14 != a2 || v14 == a3) {
    goto LABEL_37;
  }
  uint64_t v20 = *a2;
  switch(v20)
  {
    case '$':
      xpc_object_t v21 = (std::__node<char> *)operator new(0x18uLL);
      uint64_t v22 = (this->__flags_ & 0x5F0) == 1024;
      uint64_t v23 = this->__end_;
      uint64_t v24 = v23->__first_;
      unint64_t v25 = &off_189E954B8;
      goto LABEL_32;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
      unint64_t v26 = this->__marked_count_;
      ++this->__open_count_;
      uint64_t v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>( this,  a2 + 1,  a3);
      if (v27 == a3 || (uint64_t v28 = v27, *v27 != 41)) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v26);
      --this->__open_count_;
      uint64_t v14 = v28 + 1;
LABEL_37:
      unint64_t v11 = (unsigned __int8 *)v14;
      if (v14 != a2) {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>( (uint64_t)this,  v11,  (unsigned __int8 *)a3,  end,  marked_count + 1,  this->__marked_count_ + 1);
      }
      return (unsigned __int8 *)a2;
    case '^':
      xpc_object_t v21 = (std::__node<char> *)operator new(0x18uLL);
      uint64_t v22 = (this->__flags_ & 0x5F0) == 1024;
      uint64_t v23 = this->__end_;
      uint64_t v24 = v23->__first_;
      unint64_t v25 = &off_189E95470;
LABEL_32:
      v21->__vftable = (std::__node<char>_vtbl *)v25;
      v21[1].__vftable = (std::__node<char>_vtbl *)v24;
      LOBYTE(v21[2].__vftable) = v22;
      v23->__first_ = v21;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      goto LABEL_33;
  }

  return (unsigned __int8 *)a2;
}

  if (v14 != a2 || v14 == a3) {
    goto LABEL_37;
  }
  uint64_t v20 = *a2;
  switch(v20)
  {
    case '$':
      xpc_object_t v21 = (std::__node<char> *)operator new(0x18uLL);
      uint64_t v22 = (this->__flags_ & 0x5F0) == 1024;
      uint64_t v23 = this->__end_;
      uint64_t v24 = v23->__first_;
      unint64_t v25 = &off_189E954B8;
      goto LABEL_32;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
      unint64_t v26 = this->__marked_count_;
      ++this->__open_count_;
      uint64_t v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>( this,  a2 + 1,  a3);
      if (v27 == a3 || (uint64_t v28 = v27, *v27 != 41)) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v26);
      --this->__open_count_;
      uint64_t v14 = v28 + 1;
LABEL_37:
      unint64_t v11 = (unsigned __int8 *)v14;
      if (v14 != a2) {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>( (uint64_t)this,  v11,  (unsigned __int8 *)a3,  end,  marked_count + 1,  this->__marked_count_ + 1);
      }
      return (unsigned __int8 *)a2;
    case '^':
      xpc_object_t v21 = (std::__node<char> *)operator new(0x18uLL);
      uint64_t v22 = (this->__flags_ & 0x5F0) == 1024;
      uint64_t v23 = this->__end_;
      uint64_t v24 = v23->__first_;
      unint64_t v25 = &off_189E95470;
LABEL_32:
      v21->__vftable = (std::__node<char>_vtbl *)v25;
      v21[1].__vftable = (std::__node<char>_vtbl *)v24;
      LOBYTE(v21[2].__vftable) = v22;
      v23->__first_ = v21;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      goto LABEL_33;
  }

  return (unsigned __int8 *)a2;
}

    uint64_t v23 = (void **)v22;
    std::vector<std::shared_ptr<ctu::RestResourceConnection>>::__destroy_vector::operator()[abi:ne180100](&v23);
    goto LABEL_26;
  }

  do
  {
    unint64_t v8 = *(uint64_t **)(v2 + 104);
    uint64_t v9 = *(uint64_t **)(v2 + 112);
    while (v8 != v9)
    {
      uint64_t v10 = *v8;
      unint64_t v11 = (std::__shared_weak_count *)*((void *)v3 + 1);
      unint64_t v19 = *(void *)v3;
      uint64_t v20 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          unint64_t v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }

      (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 32LL))(v10, &v19);
      uint64_t v14 = v20;
      if (v20)
      {
        __int128 v15 = (unint64_t *)&v20->__shared_owners_;
        do
          uint64_t v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }

      v8 += 2;
    }

    ++v3;
  }

  while (v3 != (__int128 *)v18);
LABEL_23:
  uint64_t v23 = (void **)v22;
  std::vector<std::shared_ptr<ctu::RestResourceConnection>>::__destroy_vector::operator()[abi:ne180100](&v23);
  if (a1)
  {
LABEL_26:
    unint64_t v17 = (void *)std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](a1);
    operator delete(v17);
  }

  ctu::AssertionRestResourceState::dumpState(void)const::$_0::operator()(&v17, (uint64_t)this + 24);
  uint64_t v22 = a2;
  uint64_t v23 = "waiting";
  xpc::dict::object_proxy::operator=((uint64_t)&v22, &v17, &v18);
  xpc_release(v18);
  uint64_t v18 = 0LL;
  xpc_release(v17);
  unint64_t v17 = 0LL;
  ctu::AssertionRestResourceState::dumpState(void)const::$_0::operator()(&v15, (uint64_t)this + 48);
  uint64_t v22 = a2;
  uint64_t v23 = "granted";
  xpc::dict::object_proxy::operator=((uint64_t)&v22, &v15, &v16);
  xpc_release(v16);
  uint64_t v16 = 0LL;
  xpc_release(v15);
  __int128 v15 = 0LL;
  ctu::AssertionRestResourceState::dumpState(void)const::$_0::operator()(&v13, (uint64_t)this + 72);
  uint64_t v22 = a2;
  uint64_t v23 = "revoked";
  xpc::dict::object_proxy::operator=((uint64_t)&v22, &v13, &v14);
  xpc_release(v14);
  uint64_t v14 = 0LL;
  xpc_release(v13);
}

void sub_1865DF1F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, xpc_object_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0>>::~unique_ptr[abi:ne180100]( uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 56);
    if (v3 == (void *)(v2 + 32))
    {
      uint64_t v4 = 4LL;
      uint64_t v3 = (void *)(v2 + 32);
    }

    else
    {
      if (!v3)
      {
LABEL_7:
        xpc_release(*(xpc_object_t *)(v2 + 24));
        *(void *)(v2 + memset(&context, 0, 24) = 0LL;
        std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v2 + 8);
        operator delete((void *)v2);
        return a1;
      }

      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_7;
  }

  return a1;
}

void *std::__function::__func<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1},std::allocator<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::~__func( void *a1)
{
  *a1 = &off_189E94E00;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void std::__function::__func<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1},std::allocator<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::~__func( char *__p)
{
  *(void *)std::string __p = &off_189E94E00;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void *std::__function::__func<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1},std::allocator<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::__clone( uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &off_189E94E00;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1865DF490(_Unwind_Exception *a1)
{
}

uint64_t std::__function::__func<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1},std::allocator<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::__clone( uint64_t a1, void *a2)
{
  *a2 = &off_189E94E00;
  return std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1},std::allocator<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::destroy( uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1},std::allocator<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::destroy_deallocate( char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void std::__function::__func<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1},std::allocator<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::operator()( uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  *a2 = xpc_null_create();
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v4 + 48LL))(v4, &object);
  xpc_release(object);
  xpc_release(v3);
}

void sub_1865DF5DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t std::__function::__func<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1},std::allocator<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1},std::allocator<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::target_type()
{
}

void dispatch::async<void ctu::SharedSynchronizable<ctu::RestDispatchListener>::execute_wrapped<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0>(ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0,dispatch_queue_s *::default_delete<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0>>)::{lambda(void *)#1}::__invoke( uint64_t *a1)
{
  uint64_t v2 = *a1;
  xpc_object_t v21 = (xpc_object_t *)v2;
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 48LL);
  ctu::RestDispatchListener::getResourceConnection_sync(*(void *)v2, *(void *)(v2 + 8), (unint64_t *)&v23);
  __int128 v24 = v23;
  __int128 v23 = 0uLL;
  unint64_t v5 = *(void **)(v2 + 16);
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, __int128 *, xpc_object_t *))(*(void *)v4 + 32LL))(v4, &v24, &object);
  xpc_release(object);
  xpc_object_t object = 0LL;
  unint64_t v6 = (std::__shared_weak_count *)*((void *)&v24 + 1);
  if (*((void *)&v24 + 1))
  {
    unint64_t v7 = (unint64_t *)(*((void *)&v24 + 1) + 8LL);
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v23 + 1);
  if (*((void *)&v23 + 1))
  {
    uint64_t v10 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  unint64_t v12 = v3[8];
  if (v12)
  {
    unint64_t v13 = *(void *)(v2 + 8);
    uint64_t v14 = (unint64_t *)v3[7];
    __int128 v15 = &v14[3 * v12];
    do
    {
      unint64_t v16 = v12 >> 1;
      unint64_t v17 = &v14[3 * (v12 >> 1)];
      unint64_t v19 = *v17;
      uint64_t v18 = v17 + 3;
      v12 += ~(v12 >> 1);
      if (v19 >= v13) {
        unint64_t v12 = v16;
      }
      else {
        uint64_t v14 = v18;
      }
    }

    while (v12);
    if (v14 != v15 && *v14 <= v13)
    {
      for (uint64_t i = v14 + 3; i != v15; i += 3)
      {
        *(i - 3) = *i;
        std::shared_ptr<ctu::rest::RestConnectorDelegateBase>::operator=[abi:ne180100]<ctu::rest::RestConnectorDelegate<ctu::RestModuleState>,void>( (uint64_t)(i - 2),  (__int128 *)(i + 1));
      }

      std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)(v15 - 2));
      --v3[8];
    }
  }

  std::unique_ptr<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0>>::~unique_ptr[abi:ne180100](&v21);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_1865DF7FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  xpc_object_t object = 0LL;
  unint64_t v16 = a14;
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  unint64_t v19 = a12;
  if (a12)
  {
    uint64_t v20 = (unint64_t *)&a12->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  std::unique_ptr<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0>>::~unique_ptr[abi:ne180100]((xpc_object_t **)&a9);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v14 + 8);
  operator delete(v14);
  _Unwind_Resume(a1);
}

xpc_object_t **std::unique_ptr<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0>>::~unique_ptr[abi:ne180100]( xpc_object_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    xpc_release(v2[2]);
    operator delete(v2);
  }

  return a1;
}

void __TUAssertTrigger(const char *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, a1);
  __cxa_throw(exception, MEMORY[0x1896146E8], MEMORY[0x189614248]);
}

void sub_1865DF920(_Unwind_Exception *a1)
{
}

__int128 *__TUAssertGetReason()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&_MergedGlobals_2);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_2))
  {
    uint64_t v2 = getprogname();
    std::string::basic_string[abi:ne180100]<0>(&v6, " crashed");
    size_t v3 = strlen(v2);
    uint64_t v4 = std::string::insert(&v6, 0LL, v2, v3);
    __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    unk_18C4A4608 = v4->__r_.__value_.__l.__cap_;
    xmmword_18C4A45F8 = v5;
    v4->__r_.__value_.__l.__size_ = 0LL;
    v4->__r_.__value_.__l.__cap_ = 0LL;
    v4->__r_.__value_.__r.__words[0] = 0LL;
    __cxa_atexit(MEMORY[0x189614350], &xmmword_18C4A45F8, &dword_1865C1000);
    __cxa_guard_release(&_MergedGlobals_2);
  }

  if (byte_18C4A460F >= 0) {
    return &xmmword_18C4A45F8;
  }
  else {
    return (__int128 *)xmmword_18C4A45F8;
  }
}

void sub_1865DFA18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&_MergedGlobals_2);
  _Unwind_Resume(a1);
}

void TelephonyBasebandWatchdogStart(dispatch_source_s **a1, unsigned int a2, void *a3)
{
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(-2LL, 0LL);
  unint64_t v7 = dispatch_source_create(MEMORY[0x1895F8B78], 1uLL, 0LL, global_queue);
  dispatch_time_t v8 = dispatch_time(0LL, 1000000LL * a2);
  dispatch_source_set_event_handler(v7, a3);
  dispatch_source_set_timer(v7, v8, 0xFFFFFFFFFFFFFFFFLL, 500000LL * a2);
  dispatch_activate(v7);
  *a1 = v7;
}

void TelephonyBasebandWatchdogStop(dispatch_object_t *a1)
{
  uint64_t v2 = (dispatch_source_s *)*a1;
  if (!v2) {
    __TUAssertTrigger("context->source");
  }
  dispatch_source_cancel(v2);
  dispatch_release(*a1);
  *a1 = 0LL;
}

void TelephonyBasebandWatchdogStartWithStackshot(dispatch_source_s **a1, unsigned int a2, uint64_t a3)
{
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 0x40000000LL;
  v3[2] = __TelephonyBasebandWatchdogStartWithStackshot_block_invoke;
  v3[3] = &__block_descriptor_tmp_7;
  v3[4] = a3;
  unsigned int v4 = a2;
  TelephonyBasebandWatchdogStart(a1, a2, v3);
}

void __TelephonyBasebandWatchdogStartWithStackshot_block_invoke(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  *(void *)&__int128 v1 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v1 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v24 = v1;
  __int128 v25 = v1;
  __int128 v22 = v1;
  __int128 v23 = v1;
  __int128 v20 = v1;
  __int128 v21 = v1;
  __int128 v18 = v1;
  __int128 v19 = v1;
  __int128 v16 = v1;
  __int128 v17 = v1;
  __int128 v14 = v1;
  __int128 v15 = v1;
  __int128 v12 = v1;
  __int128 v13 = v1;
  *(_OWORD *)std::string __str = v1;
  __int128 v11 = v1;
  snprintf( __str,  0x100uLL,  "Telephony operation timeout at '%s', timeout %u\n",  *(const char **)(a1 + 32),  *(_DWORD *)(a1 + 40));
  _TelephonyUtilDebugPrint( (uint64_t)"TelephonyBasebandWatchdogStartWithStackshot_block_invoke",  (uint64_t)"Telephony watchdog fired: %s\n",  v2,  v3,  v4,  v5,  v6,  v7,  (uint64_t)__str);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v9 = __str;
    _os_log_error_impl( &dword_1865C1000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Telephony watchdog fired: %s\n",  buf,  0xCu);
  }

const void **ctu::Http::HttpResponse::getResponseData@<X0>( ctu::Http::HttpResponse *this@<X0>, void *a2@<X8>)
{
  CFDataRef theData = (CFDataRef)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(CFDataRef *__return_ptr))(*(void *)this + 40LL))(&theData);
  uint64_t v3 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  if (!theData) {
    uint64_t v3 = 0LL;
  }
  if (v3)
  {
    BytePtr = CFDataGetBytePtr(theData);
    CFIndex Length = CFDataGetLength(theData);
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
    if (Length)
    {
      std::vector<char>::__vallocate[abi:ne180100](a2, Length);
      uint64_t v6 = (char *)a2[1];
      memmove(v6, BytePtr, Length);
      a2[1] = &v6[Length];
    }
  }

  else
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

  return ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)&theData);
}

void sub_1865DFD60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v4;
    operator delete(v4);
  }

  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void *ctu::Http::asString@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 5) {
    uint64_t v2 = "????";
  }
  else {
    uint64_t v2 = off_189E95118[a1];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

std::string *ctu::Http::asString@<X0>(uint64_t __val@<X1>, int a2@<W0>, std::string *a3@<X8>)
{
  if (!a2) {
    return std::to_string(a3, __val);
  }
  if (__val > -1105)
  {
    switch(__val)
    {
      case -1022LL:
        uint64_t v3 = "App Transport Security Requires Secure Connection";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1021LL:
        uint64_t v3 = "Request Body Stream Exhausted";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1020LL:
        uint64_t v3 = "Data Not Allowed";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1019LL:
        uint64_t v3 = "Call Is Active";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1018LL:
        uint64_t v3 = "International Roaming Off";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1017LL:
        uint64_t v3 = "Cannot Parse Response";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1016LL:
        uint64_t v3 = "Cannot Decode Content Data";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1015LL:
        uint64_t v3 = "Cannot Decode Raw Data";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1014LL:
        uint64_t v3 = "Zero Byte Resource";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1013LL:
        uint64_t v3 = "User Authentication Required";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1012LL:
        uint64_t v3 = "User Cancelled Authentication";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1011LL:
        uint64_t v3 = "Bad Server Response";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1010LL:
        uint64_t v3 = "Redirect To Non Existent Location";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1009LL:
        uint64_t v3 = "Not Connected To Internet";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1008LL:
      case -1005LL:
      case -999LL:
      case -998LL:
        return std::to_string(a3, __val);
      case -1007LL:
        uint64_t v3 = "HTTP Too Many Redirects";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1006LL:
        uint64_t v3 = "DNS Lookup Failed";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1004LL:
        uint64_t v3 = "Cannot Connect To Host";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1003LL:
        uint64_t v3 = "Cannot Find Host";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1002LL:
        uint64_t v3 = "Unsupported URL";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1001LL:
        uint64_t v3 = "Timeout";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1000LL:
        uint64_t v3 = "Bad URL";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -997LL:
        uint64_t v3 = "Background Session Was Disconnected";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -996LL:
        uint64_t v3 = "Background Session In Use By Another Process";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -995LL:
        uint64_t v3 = "Background Session Requires Shared Container";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      default:
        switch(__val)
        {
          case -1104LL:
            uint64_t v3 = "File Outside Safe Area";
            return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
          case -1103LL:
            uint64_t v3 = "Data Length Exceeds Maximum";
            return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
          case -1102LL:
            uint64_t v3 = "No Permissions To Read File";
            return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
          case -1101LL:
            uint64_t v3 = "File Is Directory";
            return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
          case -1100LL:
            uint64_t v3 = "File Does Not Exist";
            return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
          default:
            return std::to_string(a3, __val);
        }
    }
  }

  switch(__val)
  {
    case -3007LL:
      uint64_t v3 = "Download Decoding Failed To Complete";
      break;
    case -3006LL:
      uint64_t v3 = "Download Decoding Failed Mid Stream";
      break;
    case -3005LL:
      uint64_t v3 = "Cannot Move File";
      break;
    case -3004LL:
      uint64_t v3 = "Cannot Remove File";
      break;
    case -3003LL:
      uint64_t v3 = "Cannot Write To File";
      break;
    case -3002LL:
      uint64_t v3 = "Cannot Close File";
      break;
    case -3001LL:
      uint64_t v3 = "Cannot Open File";
      break;
    case -3000LL:
      uint64_t v3 = "Cannot Create File";
      break;
    default:
      switch(__val)
      {
        case -1206LL:
          uint64_t v3 = "Client Certificate Required";
          return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
        case -1205LL:
          uint64_t v3 = "Client Certificate Rejected";
          return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
        case -1204LL:
          uint64_t v3 = "Server Certificate Not Yet Valid";
          return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
        case -1203LL:
          uint64_t v3 = "Server Certificate Has Unknown Root";
          return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
        case -1202LL:
          uint64_t v3 = "Server Certificate Untrusted";
          return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
        case -1201LL:
          uint64_t v3 = "Server Certificate Has Bad Date";
          return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
        case -1200LL:
          uint64_t v3 = "Secure Connection Failed";
          return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
        default:
          if (__val != -2000) {
            return std::to_string(a3, __val);
          }
          uint64_t v3 = "Cannot Load From Network";
          break;
      }

      break;
  }

  return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
}

void ctu::Http::asString(ctu::Http *this@<X0>, std::string *a2@<X8>)
{
  int v2 = (int)this;
  uint64_t v4 = (void *)MEMORY[0x186E3C8CC]();
  memset(&v5, 0, sizeof(v5));
  ctu::cf::assign(&v5, (__CFString *)[MEMORY[0x1896078B0] localizedStringForStatusCode:v2]);
  *a2 = v5;
  objc_autoreleasePoolPop(v4);
}

void sub_1865E00F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *ctu::ResultIsEmptyError::ResultIsEmptyError(std::runtime_error *this)
{
  uint64_t result = std::runtime_error::runtime_error( this,  "ResultIsEmptyError: the result was never set with a success or error value");
  result->__vftable = (std::runtime_error_vtbl *)off_189E95158;
  return result;
}

{
  std::runtime_error *result;
  uint64_t result = std::runtime_error::runtime_error( this,  "ResultIsEmptyError: the result was never set with a success or error value");
  result->__vftable = (std::runtime_error_vtbl *)off_189E95158;
  return result;
}

void ctu::ResultIsEmptyError::~ResultIsEmptyError(std::runtime_error *this)
{
}

std::runtime_error *ctu::ResultIsNotError::ResultIsNotError(std::runtime_error *this)
{
  uint64_t result = std::runtime_error::runtime_error(this, "ResultIsNotError: cannot return an error unless it was an error");
  result->__vftable = (std::runtime_error_vtbl *)off_189E95180;
  return result;
}

{
  std::runtime_error *result;
  uint64_t result = std::runtime_error::runtime_error(this, "ResultIsNotError: cannot return an error unless it was an error");
  result->__vftable = (std::runtime_error_vtbl *)off_189E95180;
  return result;
}

void ctu::ResultIsNotError::~ResultIsNotError(std::runtime_error *this)
{
}

std::runtime_error *ctu::ResultIsError::ResultIsError(std::runtime_error *this)
{
  uint64_t result = std::runtime_error::runtime_error( this,  "ResultIsError: cannot return a result because the operation was an error");
  result->__vftable = (std::runtime_error_vtbl *)off_189E951A8;
  return result;
}

{
  std::runtime_error *result;
  uint64_t result = std::runtime_error::runtime_error( this,  "ResultIsError: cannot return a result because the operation was an error");
  result->__vftable = (std::runtime_error_vtbl *)off_189E951A8;
  return result;
}

void ctu::ResultIsError::~ResultIsError(std::runtime_error *this)
{
}

uint64_t ctu::Clock::now_in_nanoseconds(ctu::Clock *this)
{
  mach_timespec_t cur_time = (mach_timespec_t)0xAAAAAAAAAAAAAAAALL;
  if (ctu::Clock::now_in_nanoseconds(void)::sKern)
  {
    syslog(3, "Returning trivial time since clock service is unavailable\n");
    return 0LL;
  }

  if (clock_get_time(ctu::Clock::now_in_nanoseconds(void)::server, &cur_time))
  {
    syslog(3, "Failed to get time from clock service (error = %d); returning trivial time\n");
    return 0LL;
  }

  return cur_time.tv_nsec + 1000000000LL * cur_time.tv_sec;
}

void ___ZN3ctu5Clock18now_in_nanosecondsEv_block_invoke()
{
  kern_return_t clock_service;
  host_t v0 = MEMORY[0x186E3C7A0]();
  clock_service = host_get_clock_service(v0, 1, (clock_serv_t *)&ctu::Clock::now_in_nanoseconds(void)::server);
  ctu::Clock::now_in_nanoseconds(void)::sKern = clock_service;
  if (clock_service) {
    syslog(3, "Failed to get clock service (error = %d)\n", clock_service);
  }
}

BOOL ctu::rest::WatchableRestResourceHelper::hasWatchers(ctu::rest::WatchableRestResourceHelper *this)
{
  return *((void *)this + 1) != 0LL;
}

uint64_t ctu::rest::WatchableRestResourceHelper::hasActiveWatchers( ctu::rest::WatchableRestResourceHelper *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = 16 * v1;
  for (uint64_t i = *(void *)this + 8LL; !*(void *)i || *(void *)(*(void *)i + 8LL) == -1LL; i += 16LL)
  {
    v2 -= 16LL;
    if (!v2) {
      return 0LL;
    }
  }

  return 1LL;
}

void ctu::rest::WatchableRestResourceHelper::cleanupExpired(ctu::rest::WatchableRestResourceHelper *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1)
  {
    uint64_t v3 = *(void *)this;
    uint64_t v4 = *(void *)this;
    do
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (!v5 || *(void *)(v5 + 8) == -1LL)
      {
        uint64_t v7 = v4;
        boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::erase( this,  &v7,  &v6);
        uint64_t v4 = v6;
        uint64_t v3 = *(void *)this;
        uint64_t v1 = *((void *)this + 1);
      }

      else
      {
        v4 += 16LL;
      }
    }

    while (v4 != v3 + 16 * v1);
  }

void ctu::rest::WatchableRestResourceHelper::getWatcherNames( ctu::rest::WatchableRestResourceHelper *this@<X0>, xpc_object_t *a2@<X8>)
{
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_array_create(0LL, 0LL);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v5) == MEMORY[0x1895F9220])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }

  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  uint64_t v7 = *((void *)this + 1);
  if (v7)
  {
    dispatch_time_t v8 = *(uint64_t **)this;
    uint64_t v9 = *(void *)this + 16 * v7;
    do
    {
      uint64_t v10 = (std::__shared_weak_count *)v8[1];
      if (v10)
      {
        __int128 v11 = std::__shared_weak_count::lock(v10);
        if (v11)
        {
          __int128 v12 = v11;
          uint64_t v13 = *v8;
          if (*v8)
          {
            __int128 v14 = (const char *)(v13 + 8);
            xpc_object_t v15 = xpc_string_create(v14);
            if (!v15) {
              xpc_object_t v15 = xpc_null_create();
            }
            xpc_array_append_value(*a2, v15);
            xpc_release(v15);
          }

          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            unint64_t v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }

      v8 += 2;
    }

    while (v8 != (uint64_t *)v9);
  }

void sub_1865E0580( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ctu::rest::WatchableRestResourceHelper::addWatcher(uint64_t *a1, unint64_t *a2)
{
  uint64_t v3 = (__n128 *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v4 = 0xAAAAAAAAAAAAAAAALL;
  boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::emplace_unique<std::shared_ptr<ctu::RestResourceConnection>>( a1,  a2,  &v3);
  return v4;
}

uint64_t ctu::rest::WatchableRestResourceHelper::removeWatcher(void *a1, void *a2)
{
  uint64_t v2 = a1[1];
  if (!v2) {
    return 0LL;
  }
  xpc_object_t v5 = (void *)*a1;
  uint64_t v6 = *a1 + 16 * v2;
  while (1)
  {
    uint64_t v7 = (std::__shared_weak_count *)v5[1];
    if (!v7) {
      goto LABEL_11;
    }
    dispatch_time_t v8 = std::__shared_weak_count::lock(v7);
    _OWORD v16[2] = v8;
    if (!v8) {
      goto LABEL_11;
    }
    uint64_t v9 = v8;
    uint64_t v10 = *v5;
    v16[1] = v10;
    if (v10)
    {
      if (v10 == *a2) {
        break;
      }
    }

    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
    }

void sub_1865E06DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void ctu::rest::WatchableRestResourceHelper::map(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    unint64_t v4 = *(void **)a1;
    uint64_t v5 = *(void *)a1 + 16 * v2;
    do
    {
      uint64_t v6 = (std::__shared_weak_count *)v4[1];
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        if (v7)
        {
          dispatch_time_t v8 = v7;
          if (*v4)
          {
            uint64_t v9 = *(void *)(a2 + 24);
            if (!v9) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            (*(void (**)(uint64_t))(*(void *)v9 + 48LL))(v9);
          }

          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            unint64_t v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }

      v4 += 2;
    }

    while (v4 != (void *)v5);
  }

void sub_1865E07A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ctu::rest::WatchableRestResourceHelper::removeWatchers( ctu::rest::WatchableRestResourceHelper *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = *(void **)this;
    uint64_t v6 = *(void *)this + 16 * v4;
    while (1)
    {
      *(void *)&__int128 v11 = 0LL;
      uint64_t v7 = (std::__shared_weak_count *)v5[1];
      if (v7) {
        break;
      }
LABEL_14:
      v5 += 2;
      if (v5 == (void *)v6) {
        goto LABEL_15;
      }
    }

    dispatch_time_t v8 = std::__shared_weak_count::lock(v7);
    *((void *)&v11 + 1) = v8;
    if (v8)
    {
      *(void *)&__int128 v11 = *v5;
      if (!(void)v11) {
        goto LABEL_9;
      }
    }

    else if (!(void)v11)
    {
LABEL_9:
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          unint64_t v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }

      goto LABEL_14;
    }

    std::vector<std::shared_ptr<ctu::RestResourceConnection>>::emplace_back<std::shared_ptr<ctu::RestResourceConnection> const>( (char **)a2,  &v11);
    dispatch_time_t v8 = (std::__shared_weak_count *)*((void *)&v11 + 1);
    goto LABEL_9;
  }

LABEL_15:
  boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::priv_destroy_all(this);
}

      uint64_t v7 = ".";
      goto LABEL_18;
    }
  }

  else if ((a2 != 1 || *a1 != 46) && a4)
  {
    if (a4 != 1)
    {
      if (a4 != 2) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }

    goto LABEL_15;
  }

  return 0LL;
}

  *a2 = v7;
  return v5;
}

void sub_1865E089C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::shared_ptr<ctu::RestResourceConnection>>::emplace_back<std::shared_ptr<ctu::RestResourceConnection> const>( char **a1, __int128 *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v12 = (v7 - *a1) >> 4;
    unint64_t v13 = v12 + 1;
    uint64_t v14 = v5 - (void)*a1;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    else {
      unint64_t v15 = v13;
    }
    uint64_t v32 = v4;
    __int128 v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::RestResourceConnection>>>( v4,  v15);
    __int128 v18 = &v16[16 * v12];
    __int128 v19 = *a2;
    *(_OWORD *)__int128 v18 = *a2;
    if (*((void *)&v19 + 1))
    {
      __int128 v20 = (unint64_t *)(*((void *)&v19 + 1) + 8LL);
      do
        unint64_t v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }

    __int128 v23 = *a1;
    __int128 v22 = a1[1];
    if (v22 == *a1)
    {
      int64x2_t v26 = vdupq_n_s64((unint64_t)v22);
      __int128 v24 = &v16[16 * v12];
    }

    else
    {
      __int128 v24 = &v16[16 * v12];
      do
      {
        __int128 v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(void *)__int128 v22 = 0LL;
        *((void *)v22 + 1) = 0LL;
      }

      while (v22 != v23);
      int64x2_t v26 = *(int64x2_t *)a1;
    }

    __int128 v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    int64x2_t v30 = v26;
    uint64_t v27 = a1[2];
    a1[2] = &v16[16 * v17];
    xpc_object_t v31 = v27;
    uint64_t v29 = v26.i64[0];
    std::__split_buffer<std::shared_ptr<ctu::RestResourceConnection>>::~__split_buffer((uint64_t)&v29);
  }

  else
  {
    *(void *)uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    *((void *)v7 + 1) = v8;
    if (v8)
    {
      uint64_t v9 = (unint64_t *)(v8 + 8);
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    __int128 v11 = v7 + 16;
  }

  a1[1] = v11;
  return v11 - 16;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::RestResourceConnection>>>( uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t std::__split_buffer<std::shared_ptr<ctu::RestResourceConnection>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](i - 16);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::shared_ptr<ctu::RestResourceConnection>>::__destroy_vector::operator()[abi:ne180100]( void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::emplace_unique<std::shared_ptr<ctu::RestResourceConnection>>( uint64_t *a1@<X0>, unint64_t *a2@<X1>, __n128 **a3@<X8>)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  unint64_t v3 = a2[1];
  v6.n128_u64[0] = *a2;
  v6.n128_u64[1] = v3;
  if (v3)
  {
    uint64_t v4 = (unint64_t *)(v3 + 16);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::insert_unique( a1,  &v6,  a3);
  if (v6.n128_u64[1]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v6.n128_u64[1]);
  }
}

void sub_1865E0B70( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_weak(a11);
  }
  _Unwind_Resume(exception_object);
}

void boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::priv_destroy_all( void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    unint64_t v3 = (std::__shared_weak_count **)(*a1 + 8LL);
    do
    {
      if (*v3) {
        std::__shared_weak_count::__release_weak(*v3);
      }
      v3 += 2;
      --v2;
    }

    while (v2);
  }

  a1[1] = 0LL;
}

uint64_t TelephonyCapabilitiesRadioGetSafeResetTime()
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  else {
    return dword_186633D9C[sTelephonyRadio - 1];
  }
}

uint64_t _TelephonyRadiosDetermineRadio(uint64_t a1)
{
  uint64_t result = __strlcpy_chk();
  sTelephonyHardwareConfig = *(_DWORD *)(a1 + 8);
  if (*(void *)a1 == 0x5500000063LL)
  {
    sTelephonyProduct = 0;
LABEL_182:
    sTelephonyRadio = 0;
    sTelephonyRadioVendor = 0;
    return result;
  }

  if (*(void *)a1 != 0x4A00000063LL)
  {
    if (*(void *)a1 == 0x4A00000080LL)
    {
      unint64_t v2 = 0x18C4A4000LL;
      int v3 = 38;
      goto LABEL_184;
    }

    if (*(void *)a1 == 0x4A00000079LL)
    {
      unint64_t v4 = 0x18C4A4000LL;
      int v5 = 52;
LABEL_183:
      *(_DWORD *)(v4 + 1352) = v5;
      unint64_t v22 = 0x18C4A4000LL;
      int v23 = 3;
      goto LABEL_187;
    }

    if (*(void *)a1 == 0x4A000000D0LL)
    {
      unint64_t v4 = 0x18C4A4000uLL;
      int v5 = 53;
      goto LABEL_183;
    }

    if (*(void *)a1 == 0x4A00000048LL)
    {
      unint64_t v2 = 0x18C4A4000uLL;
      int v3 = 57;
      goto LABEL_184;
    }

    if (*(void *)a1 == 0x4E0000008DLL)
    {
      int v8 = 60;
LABEL_185:
      sTelephonyProduct = v8;
      unint64_t v9 = 0x18C4A4000LL;
      int v10 = 4;
LABEL_190:
      *(_DWORD *)(v9 + 1356) = v10;
      unint64_t v7 = 0x18C4A4000uLL;
      int v6 = 2;
      goto LABEL_191;
    }

    if (*(void *)a1 == 0x4400000014LL)
    {
      unint64_t v11 = 0x18C4A4000LL;
      int v12 = 62;
LABEL_186:
      *(_DWORD *)(v11 + 1352) = v12;
      unint64_t v22 = 0x18C4A4000uLL;
      int v23 = 5;
      goto LABEL_187;
    }

    if (*(void *)a1 == 0x4400000015LL)
    {
      unint64_t v11 = 0x18C4A4000LL;
      int v12 = 63;
      goto LABEL_186;
    }

    if (*(void *)a1 == 0x4400000016LL)
    {
      unint64_t v11 = 0x18C4A4000uLL;
      int v12 = 64;
      goto LABEL_186;
    }

    if (*(void *)a1 == 0x44000000C9LL)
    {
      unint64_t v13 = 0x18C4A4000LL;
      int v14 = 65;
LABEL_188:
      *(_DWORD *)(v13 + 1352) = v14;
      unint64_t v9 = 0x18C4A4000LL;
      int v10 = 6;
      goto LABEL_190;
    }

    if (*(void *)a1 == 0x44000000D3LL)
    {
      unint64_t v13 = 0x18C4A4000LL;
      int v14 = 66;
      goto LABEL_188;
    }

    if (*(void *)a1 == 0x44000000DDLL)
    {
      unint64_t v13 = 0x18C4A4000uLL;
      int v14 = 67;
      goto LABEL_188;
    }

    if (*(void *)a1 == 0x4A00000048LL)
    {
      unint64_t v2 = 0x18C4A4000LL;
      int v3 = 68;
      goto LABEL_184;
    }

    if (*(void *)a1 == 0x4400000141LL)
    {
      unint64_t v15 = 0x18C4A4000LL;
      int v16 = 79;
LABEL_189:
      *(_DWORD *)(v15 + 1352) = v16;
      unint64_t v9 = 0x18C4A4000uLL;
      int v10 = 7;
      goto LABEL_190;
    }

    if (*(void *)a1 == 0x440000014BLL)
    {
      unint64_t v15 = 0x18C4A4000LL;
      int v16 = 80;
      goto LABEL_189;
    }

    if (*(void *)a1 == 0x4A0000013ELL)
    {
      unint64_t v15 = 0x18C4A4000LL;
      int v16 = 82;
      goto LABEL_189;
    }

    if (*(void *)a1 == 0x4A00000141LL)
    {
      unint64_t v15 = 0x18C4A4000LL;
      int v16 = 83;
      goto LABEL_189;
    }

    if (*(void *)a1 == 0x4E00000349LL)
    {
      unint64_t v15 = 0x18C4A4000LL;
      int v16 = 84;
      goto LABEL_189;
    }

    if (*(void *)a1 == 0x4E00000092LL)
    {
      int v8 = 87;
      goto LABEL_185;
    }

    if (*(void *)a1 == 0x4A000000D3LL)
    {
      unint64_t v15 = 0x18C4A4000LL;
      int v16 = 89;
      goto LABEL_189;
    }

    if (*(void *)a1 == 0x4A000000DALL)
    {
      unint64_t v15 = 0x18C4A4000LL;
      int v16 = 90;
      goto LABEL_189;
    }

    if (*(void *)a1 == 0x4E00000068LL)
    {
      unint64_t v17 = 0x18C4A4000LL;
      int v18 = 91;
LABEL_192:
      *(_DWORD *)(v17 + 1352) = v18;
      unint64_t v9 = 0x18C4A4000LL;
      int v10 = 8;
      goto LABEL_190;
    }

    if (*(void *)a1 == 0x44000001A5LL)
    {
      unint64_t v17 = 0x18C4A4000LL;
      int v18 = 92;
      goto LABEL_192;
    }

    if (*(void *)a1 == 0x44000001AFLL)
    {
      unint64_t v17 = 0x18C4A4000LL;
      int v18 = 93;
      goto LABEL_192;
    }

    if (*(void *)a1 == 0x4A000000ACLL)
    {
      unint64_t v15 = 0x18C4A4000uLL;
      int v16 = 94;
      goto LABEL_189;
    }

    if (*(void *)a1 == 0x4A000001A5LL)
    {
      unint64_t v17 = 0x18C4A4000LL;
      int v18 = 95;
      goto LABEL_192;
    }

    if (*(void *)a1 == 0x4A000001A2LL)
    {
      unint64_t v17 = 0x18C4A4000LL;
      int v18 = 96;
      goto LABEL_192;
    }

    if (*(void *)a1 == 0x440000004FLL)
    {
      unint64_t v17 = 0x18C4A4000uLL;
      int v18 = 97;
      goto LABEL_192;
    }

    if (*(void *)a1 == 0x4400000034LL)
    {
      int v19 = 99;
LABEL_193:
      sTelephonyProduct = v19;
      unint64_t v22 = 0x18C4A4000LL;
      int v23 = 9;
      goto LABEL_187;
    }

    if (*(void *)a1 == 0x4400000035LL)
    {
      int v19 = 100;
      goto LABEL_193;
    }

    if (*(void *)a1 == 0x4400000036LL)
    {
      int v19 = 102;
      goto LABEL_193;
    }

    if (*(void *)a1 == 0x4E0000008ELL)
    {
      int v8 = 103;
      goto LABEL_185;
    }

    if (*(void *)a1 == 0x4E0000009ELL)
    {
      int v8 = 105;
      goto LABEL_185;
    }

    if (*(void *)a1 == 0x4A00000134LL)
    {
      unint64_t v17 = 0x18C4A4000LL;
      int v18 = 107;
      goto LABEL_192;
    }

    if (*(void *)a1 == 0x4A00000206LL)
    {
      int v19 = 108;
      goto LABEL_193;
    }

    if (*(void *)a1 == 0x4A0000020BLL)
    {
      int v19 = 110;
      goto LABEL_193;
    }

    if (*(void *)a1 == 0x4A000000ACLL)
    {
      unint64_t v15 = 0x18C4A4000LL;
      int v16 = 112;
      goto LABEL_189;
    }

    if (*(void *)a1 == 0x4400000010LL)
    {
      unint64_t v20 = 0x18C4A4000LL;
      int v21 = 114;
LABEL_194:
      *(_DWORD *)(v20 + 1352) = v21;
      unint64_t v22 = 0x18C4A4000LL;
      int v23 = 10;
      goto LABEL_187;
    }

    if (*(void *)a1 == 0x4400000011LL)
    {
      unint64_t v20 = 0x18C4A4000LL;
      int v21 = 115;
      goto LABEL_194;
    }

    if (*(void *)a1 == 0x440000003FLL)
    {
      unint64_t v20 = 0x18C4A4000LL;
      int v21 = 116;
      goto LABEL_194;
    }

    if (*(void *)a1 == 0x4400000040LL)
    {
      unint64_t v20 = 0x18C4A4000LL;
      int v21 = 117;
      goto LABEL_194;
    }

    if (*(void *)a1 == 0x4E000000BCLL)
    {
      int v8 = 118;
      goto LABEL_185;
    }

    if (*(void *)a1 == 0x4A00000137LL)
    {
      unint64_t v20 = 0x18C4A4000LL;
      int v21 = 120;
      goto LABEL_194;
    }

    if (*(void *)a1 == 0x4A000000B6LL)
    {
      unint64_t v15 = 0x18C4A4000LL;
      int v16 = 122;
      goto LABEL_189;
    }

    if (*(void *)a1 == 0x4A00000198LL)
    {
      unint64_t v20 = 0x18C4A4000uLL;
      int v21 = 123;
      goto LABEL_194;
    }

    if (*(void *)a1 == 0x4400000031LL)
    {
      sTelephonyProduct = 124;
      unint64_t v22 = 0x18C4A4000LL;
      int v23 = 11;
LABEL_187:
      *(_DWORD *)(v22 + 1356) = v23;
      unint64_t v7 = 0x18C4A4000LL;
      int v6 = 1;
      goto LABEL_191;
    }

    if (*(void *)a1 == 0x4A0000026ALL)
    {
      unint64_t v24 = 0x18C4A4000LL;
      int v25 = 125;
LABEL_195:
      *(_DWORD *)(v24 + 1352) = v25;
      unint64_t v22 = 0x18C4A4000LL;
      int v23 = 12;
      goto LABEL_187;
    }

    if (*(void *)a1 == 0x4A0000026DLL)
    {
      unint64_t v24 = 0x18C4A4000LL;
      int v25 = 126;
      goto LABEL_195;
    }

    if (*(void *)a1 == 0x4E00000095LL)
    {
      int v8 = 127;
      goto LABEL_185;
    }

    if (*(void *)a1 == 0x4E000000C6LL)
    {
      int v8 = 129;
      goto LABEL_185;
    }

    if (*(void *)a1 == 0x4E000000C7LL)
    {
      int v8 = 131;
      goto LABEL_185;
    }

    if (*(void *)a1 == 0x440000001BLL)
    {
      unint64_t v24 = 0x18C4A4000LL;
      int v25 = 132;
      goto LABEL_195;
    }

    if (*(void *)a1 == 0x440000001CLL)
    {
      unint64_t v24 = 0x18C4A4000LL;
      int v25 = 133;
      goto LABEL_195;
    }

    if (*(void *)a1 == 0x4400000049LL)
    {
      unint64_t v24 = 0x18C4A4000LL;
      int v25 = 134;
      goto LABEL_195;
    }

    if (*(void *)a1 == 0x440000004ALL)
    {
      unint64_t v24 = 0x18C4A4000uLL;
      int v25 = 135;
      goto LABEL_195;
    }

    if (*(void *)a1 == 0x4A00000110LL)
    {
      unint64_t v20 = 0x18C4A4000LL;
      int v21 = 136;
      goto LABEL_194;
    }

    if (*(void *)a1 == 0x4A000001FCLL)
    {
      unint64_t v26 = 0x18C4A4000LL;
      int v27 = 137;
LABEL_196:
      *(_DWORD *)(v26 + 1352) = v27;
      unint64_t v22 = 0x18C4A4000LL;
      int v23 = 13;
      goto LABEL_187;
    }

    if (*(void *)a1 == 0x4A0000021ALL)
    {
      unint64_t v26 = 0x18C4A4000LL;
      int v27 = 138;
      goto LABEL_196;
    }

    if (*(void *)a1 == 0x4E000000D0LL)
    {
      int v8 = 139;
      goto LABEL_185;
    }

    if (*(void *)a1 == 0x4E000000D2LL)
    {
      int v8 = 141;
      goto LABEL_185;
    }

    if (*(void *)a1 == 0x4400000025LL)
    {
      unint64_t v26 = 0x18C4A4000LL;
      int v27 = 142;
      goto LABEL_196;
    }

    if (*(void *)a1 == 0x4400000026LL)
    {
      unint64_t v26 = 0x18C4A4000LL;
      int v27 = 143;
      goto LABEL_196;
    }

    if (*(void *)a1 == 0x4400000053LL)
    {
      unint64_t v26 = 0x18C4A4000LL;
      int v27 = 144;
      goto LABEL_196;
    }

    if (*(void *)a1 == 0x4400000054LL)
    {
      unint64_t v26 = 0x18C4A4000LL;
      int v27 = 145;
      goto LABEL_196;
    }

    if (*(void *)a1 == 0x4A0000019BLL)
    {
      unint64_t v26 = 0x18C4A4000LL;
      int v27 = 146;
      goto LABEL_196;
    }

    if (*(void *)a1 == 0x4A000002CELL)
    {
      unint64_t v26 = 0x18C4A4000LL;
      int v27 = 147;
      goto LABEL_196;
    }

    if (*(void *)a1 == 0x4A000002D1LL)
    {
      unint64_t v26 = 0x18C4A4000uLL;
      int v27 = 148;
      goto LABEL_196;
    }

    if (*(void *)a1 == 0x440000002FLL)
    {
      unint64_t v28 = 0x18C4A4000LL;
      int v29 = 149;
LABEL_197:
      *(_DWORD *)(v28 + 1352) = v29;
      unint64_t v22 = 0x18C4A4000LL;
      int v23 = 17;
      goto LABEL_187;
    }

    if (*(void *)a1 == 0x4400000030LL)
    {
      unint64_t v28 = 0x18C4A4000LL;
      int v29 = 150;
      goto LABEL_197;
    }

    if (*(void *)a1 == 0x440000005DLL)
    {
      unint64_t v28 = 0x18C4A4000LL;
      int v29 = 151;
      goto LABEL_197;
    }

    if (*(void *)a1 == 0x440000005ELL)
    {
      unint64_t v28 = 0x18C4A4000uLL;
      int v29 = 152;
      goto LABEL_197;
    }

    if (*(void *)a1 == 0x4E000000DALL)
    {
      int v8 = 153;
      goto LABEL_185;
    }

    if (*(void *)a1 == 0x4E000000E6LL)
    {
      unint64_t v30 = 0x18C4A4000uLL;
      int v31 = 155;
      goto LABEL_198;
    }

    if (*(void *)a1 == 0x560000003BLL)
    {
      int v32 = 156;
    }

    else
    {
      if (*(void *)a1 == 0x4A000001E2LL)
      {
        unint64_t v26 = 0x18C4A4000LL;
        int v27 = 157;
        goto LABEL_196;
      }

      if (*(void *)a1 == 0x4A00000260LL)
      {
        unint64_t v26 = 0x18C4A4000LL;
        int v27 = 158;
        goto LABEL_196;
      }

      if (*(void *)a1 == 0x4A0000027ELL)
      {
        unint64_t v26 = 0x18C4A4000LL;
        int v27 = 159;
        goto LABEL_196;
      }

      if (*(void *)a1 == 0x5400001FAELL)
      {
        int v32 = 200;
      }

      else if (*(void *)a1 == 0x4300000FA0LL)
      {
        int v32 = 201;
      }

      else if (*(void *)a1 == 0x54000002E6LL)
      {
        int v32 = 202;
      }

      else
      {
        if (*(void *)a1 != 0x4300000FA0LL)
        {
          switch(*(void *)a1)
          {
            case 0x5400001FB8LL:
              unint64_t v35 = 0x18C4A4000LL;
              int v36 = 207;
              break;
            case 0x4300000FB4LL:
              unint64_t v35 = 0x18C4A4000uLL;
              int v36 = 208;
              break;
            case 0x5400000481LL:
              int v8 = 209;
              goto LABEL_185;
            case 0x54000004D0LL:
              unint64_t v30 = 0x18C4A4000LL;
              int v31 = 211;
LABEL_198:
              *(_DWORD *)(v30 + 1352) = v31;
              sTelephonyRadio = 16;
              unint64_t v7 = 0x18C4A4000LL;
              int v6 = 4;
              goto LABEL_191;
            case 0x54000007EELL:
              unint64_t v26 = 0x18C4A4000LL;
              int v27 = 212;
              goto LABEL_196;
            default:
              switch(*(void *)a1)
              {
                case 0x5700000063LL:
                  unint64_t v37 = 0x18C4A4000LL;
                  int v38 = 0x8000;
                  break;
                case 0x5000000063LL:
                  unint64_t v37 = 0x18C4A4000LL;
                  int v38 = 32769;
                  break;
                case 0x4D00000040LL:
                  unint64_t v37 = 0x18C4A4000uLL;
                  int v38 = 32770;
                  break;
                default:
                  sTelephonyProduct = 0;
                  sTelephonyRadio = 0;
                  sTelephonyRadioVendor = 0;
                  sTelephonyHardwareConfig = 0;
                  return result;
              }

              *(_DWORD *)(v37 + 1352) = v38;
              goto LABEL_182;
          }

          *(_DWORD *)(v35 + 1352) = v36;
          unint64_t v33 = 0x18C4A4000LL;
          int v34 = 15;
LABEL_200:
          *(_DWORD *)(v33 + 1356) = v34;
          unint64_t v7 = 0x18C4A4000LL;
          int v6 = 3;
          goto LABEL_191;
        }

        int v32 = 204;
      }
    }

    sTelephonyProduct = v32;
    unint64_t v33 = 0x18C4A4000uLL;
    int v34 = 14;
    goto LABEL_200;
  }

  unint64_t v2 = 0x18C4A4000LL;
  int v3 = 33;
LABEL_184:
  *(_DWORD *)(v2 + 1352) = v3;
  int v6 = 1;
  sTelephonyRadio = 1;
  unint64_t v7 = 0x18C4A4000LL;
LABEL_191:
  *(_DWORD *)(v7 + 1360) = v6;
  return result;
}

uint64_t TelephonyRadiosGetRadioVendor()
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  return sTelephonyRadioVendor;
}

uint64_t TelephonyRadiosGetRadio()
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  return sTelephonyRadio;
}

uint64_t TelephonyRadiosDetermineRadio(uint64_t a1)
{
  return sTelephonyRadio;
}

uint64_t TelephonyRadiosGetProduct()
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  return sTelephonyProduct;
}

uint64_t TelephonyRadiosGetHardwareConfig()
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  return sTelephonyHardwareConfig;
}

uint64_t ctu::llvm::StringRef::compare_lower(uint64_t a1, const char *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 < a3) {
    a3 = *(void *)(a1 + 8);
  }
  LODWORD(result) = ascii_strncasecmp(*(const char **)a1, a2, a3);
  if (v4 < v3) {
    unsigned int v6 = -1;
  }
  else {
    unsigned int v6 = 1;
  }
  if (v4 == v3) {
    unsigned int v6 = 0;
  }
  if ((_DWORD)result) {
    return result;
  }
  else {
    return v6;
  }
}

uint64_t ascii_strncasecmp(const char *a1, const char *a2, uint64_t a3)
{
  if (!a3) {
    return 0LL;
  }
  while (1)
  {
    int v4 = *(unsigned __int8 *)a1++;
    unsigned __int8 v3 = v4;
    unsigned __int8 v5 = v4 + 32;
    int v7 = *(unsigned __int8 *)a2++;
    unsigned __int8 v6 = v7;
    unsigned __int8 v8 = v7 + 32;
    if (v3 != v6) {
      break;
    }
    if (!--a3) {
      return 0LL;
    }
  }

  else {
    return 1LL;
  }
}

BOOL ctu::llvm::StringRef::startswith_lower(uint64_t a1, const char *a2, unint64_t a3)
{
  return *(void *)(a1 + 8) >= a3 && ascii_strncasecmp(*(const char **)a1, a2, a3) == 0;
}

BOOL ctu::llvm::StringRef::endswith_lower(void *a1, const char *a2, unint64_t a3)
{
  unint64_t v3 = a1[1];
  return v3 >= a3 && ascii_strncasecmp((const char *)(*a1 + v3 - a3), a2, a3) == 0;
}

uint64_t ctu::llvm::StringRef::compare_numeric(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = a1[1];
  if (v5 >= a3) {
    unint64_t v6 = a3;
  }
  else {
    unint64_t v6 = a1[1];
  }
  if (v6)
  {
    uint64_t v7 = a2;
    unint64_t v8 = 0LL;
    unint64_t v9 = v6 + 1;
    uint64_t v10 = *a1;
    uint64_t v11 = -(uint64_t)v6;
    uint64_t v12 = a2 + 1;
    uint64_t v13 = *a1 + 1;
    do
    {
      unsigned int v14 = *(unsigned __int8 *)(v10 + v8);
      unsigned int v15 = *(unsigned __int8 *)(v7 + v8);
      if (v14 - 48 > 9 || v15 - 48 > 9)
      {
        unint64_t v17 = v8;
        if (v14 != v15)
        {
          if (v14 < v15) {
            return 0xFFFFFFFFLL;
          }
          else {
            return 1LL;
          }
        }
      }

      else
      {
        uint64_t v18 = 0LL;
        uint64_t v19 = v13;
        uint64_t v20 = v12;
        do
        {
          if (!(v11 + v8 + v18))
          {
            unint64_t v17 = v6;
            unint64_t v27 = v9;
            goto LABEL_33;
          }

          unint64_t v21 = v8 + v18 + 1;
          int v22 = v21 < v5 && *(unsigned __int8 *)(v19 + v8) - 48 < 0xA;
          if (v21 >= a3)
          {
            int v25 = 5;
            unsigned int v24 = 1;
          }

          else
          {
            unsigned int v23 = (*(_BYTE *)(v20 + v8) - 48);
            v22 ^= v23 < 0xA;
            if (v23 < 0xA) {
              unsigned int v24 = -1;
            }
            else {
              unsigned int v24 = 1;
            }
            int v25 = 0;
          }

          if (v22) {
            uint64_t v3 = v24;
          }
          else {
            uint64_t v3 = v3;
          }
          if (v22) {
            int v26 = 1;
          }
          else {
            int v26 = v25;
          }
          ++v18;
          ++v20;
          ++v19;
        }

        while (!v26);
        if (v26 != 5) {
          return v3;
        }
        unint64_t v27 = v8 + v18;
        unint64_t v17 = v27 - 1;
LABEL_33:
        if (v27 != v8)
        {
          uint64_t v28 = v10;
          uint64_t v29 = v7;
          unint64_t v33 = v6;
          int v30 = memcmp((const void *)(v10 + v8), (const void *)(v7 + v8), v27 - v8);
          unint64_t v6 = v33;
          uint64_t v7 = v29;
          uint64_t v10 = v28;
          if (v30) {
            return (v30 >> 31) | 1u;
          }
        }
      }

      unint64_t v8 = v17 + 1;
    }

    while (v17 + 1 != v6);
  }

  if (v5 < a3) {
    unsigned int v31 = -1;
  }
  else {
    unsigned int v31 = 1;
  }
  if (v5 == a3) {
    return 0LL;
  }
  else {
    return v31;
  }
}

void *ctu::llvm::StringRef::lower@<X0>(ctu::llvm::StringRef *this@<X0>, void *a2@<X8>)
{
  uint64_t result = std::string::basic_string[abi:ne180100](a2, *((void *)this + 1), 0);
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    for (uint64_t i = 0LL; i != v4; ++i)
    {
      int v6 = *(unsigned __int8 *)(*(void *)this + i);
      else {
        uint64_t v7 = (void *)*result;
      }
      *((_BYTE *)v7 + i) = v6;
    }
  }

  return result;
}

void *ctu::llvm::StringRef::upper@<X0>(ctu::llvm::StringRef *this@<X0>, void *a2@<X8>)
{
  uint64_t result = std::string::basic_string[abi:ne180100](a2, *((void *)this + 1), 0);
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    for (uint64_t i = 0LL; i != v4; ++i)
    {
      int v6 = *(unsigned __int8 *)(*(void *)this + i);
      else {
        uint64_t v7 = (void *)*result;
      }
      *((_BYTE *)v7 + i) = v6;
    }
  }

  return result;
}

uint64_t ctu::llvm::StringRef::find(uint64_t *a1, unsigned __int8 *a2, size_t a3, unint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 - a3;
  if (v4 < a3) {
    return -1LL;
  }
  unint64_t v6 = a4;
  if (a3 - 256 >= 0xFFFFFFFFFFFFFF01LL && v4 > 0xF)
  {
    size_t v9 = v4 - a4;
    if (v4 > a4)
    {
      int8x16_t v21 = vdupq_n_s8(a3);
      int8x16_t v22 = v21;
      v20[12] = v21;
      v20[13] = v21;
      v20[10] = v21;
      v20[11] = v21;
      v20[8] = v21;
      v20[9] = v21;
      v20[6] = v21;
      v20[7] = v21;
      v20[4] = v21;
      v20[5] = v21;
      v20[2] = v21;
      void v20[3] = v21;
      v20[0] = v21;
      v20[1] = v21;
      size_t v10 = a3 - 1;
      if (a3 != 1)
      {
        uint64_t v11 = 0LL;
        size_t v12 = a3 - 1;
        do
          *((_BYTE *)v20 + a2[v11++]) = v12--;
        while (v10 != v11);
      }

      if (v9 >= a3)
      {
        uint64_t v13 = *a1;
        while (1)
        {
          unint64_t v14 = v6 >= v4 ? v4 : v6;
          uint64_t v15 = *((unsigned __int8 *)v20 + *(unsigned __int8 *)(v13 + v6 + v10));
          v9 -= v15;
          v6 += v15;
          if (v9 < a3) {
            return -1LL;
          }
        }

        return v6;
      }
    }

    return -1LL;
  }

  unint64_t v16 = v5 + 1;
  if (v5 + 1 <= a4) {
    return -1LL;
  }
  uint64_t v17 = *a1;
  while (1)
  {
    unint64_t v18 = v6 >= v4 ? v4 : v6;
    if (v16 == ++v6) {
      return -1LL;
    }
  }

  return v6;
}

size_t ctu::llvm::StringRef::rfind(uint64_t *a1, void *__s2, size_t __n)
{
  size_t v3 = a1[1];
  size_t v4 = v3 - __n;
  if (v3 < __n) {
    return -1LL;
  }
  size_t v5 = v4 + 1;
  if (v4 == -1LL) {
    return -1LL;
  }
  uint64_t v9 = *a1;
  while (1)
  {
    --v5;
    size_t v10 = v4 >= v3 ? v3 : v4;
    if (__n <= v3 - v10)
    {
      if (!__n) {
        return v4;
      }
    }

    if (--v4 == -1LL) {
      return v4;
    }
  }

  return v5;
}

uint64_t ctu::llvm::StringRef::find_first_of( void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v7 + (((unint64_t)v4 >> 3) & 0x18)) |= 1LL << v4;
  }

  unint64_t v5 = a1[1];
  if (v5 <= a4) {
    return -1LL;
  }
  while (((*(void *)((char *)&v7 + (((unint64_t)*(unsigned __int8 *)(*a1 + a4) >> 3) & 0x18)) >> *(_BYTE *)(*a1 + a4)) & 1) == 0)
  {
    if (v5 == ++a4) {
      return -1LL;
    }
  }

  return a4;
}

unint64_t ctu::llvm::StringRef::find_first_not_of( ctu::llvm::StringRef *this, unsigned __int8 a2, unint64_t a3)
{
  unint64_t v3 = *((void *)this + 1);
  if (v3 <= a3) {
    return -1LL;
  }
  while (*(unsigned __int8 *)(*(void *)this + a3) == a2)
  {
    if (v3 == ++a3) {
      return -1LL;
    }
  }

  return a3;
}

uint64_t ctu::llvm::StringRef::find_first_not_of( void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v7 + (((unint64_t)v4 >> 3) & 0x18)) |= 1LL << v4;
  }

  unint64_t v5 = a1[1];
  if (v5 <= a4) {
    return -1LL;
  }
  while (((*(void *)((char *)&v7 + (((unint64_t)*(unsigned __int8 *)(*a1 + a4) >> 3) & 0x18)) >> *(_BYTE *)(*a1 + a4)) & 1) != 0)
  {
    if (v5 == ++a4) {
      return -1LL;
    }
  }

  return a4;
}

uint64_t ctu::llvm::StringRef::find_last_of(void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v10 + (((unint64_t)v4 >> 3) & 0x18)) |= 1LL << v4;
  }

  if (a4 >= a1[1]) {
    unint64_t v5 = a1[1];
  }
  else {
    unint64_t v5 = a4;
  }
  while (v5)
  {
    unint64_t v6 = v5 - 1;
    unint64_t v7 = *(unsigned __int8 *)(*a1 + v5 - 1);
    uint64_t v8 = *(void *)((char *)&v10 + ((v7 >> 3) & 0x18)) >> v7;
    unint64_t v5 = v6;
    if ((v8 & 1) != 0) {
      return v6;
    }
  }

  return -1LL;
}

unint64_t ctu::llvm::StringRef::find_last_not_of( ctu::llvm::StringRef *this, unsigned __int8 a2, unint64_t a3)
{
  if (a3 >= *((void *)this + 1)) {
    unint64_t v3 = *((void *)this + 1);
  }
  else {
    unint64_t v3 = a3;
  }
  while (v3)
  {
    unint64_t v4 = v3 - 1;
    int v5 = *(unsigned __int8 *)(*(void *)this + v3-- - 1);
    if (v5 != a2) {
      return v4;
    }
  }

  return -1LL;
}

uint64_t ctu::llvm::StringRef::find_last_not_of( void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v10 + (((unint64_t)v4 >> 3) & 0x18)) |= 1LL << v4;
  }

  if (a4 >= a1[1]) {
    unint64_t v5 = a1[1];
  }
  else {
    unint64_t v5 = a4;
  }
  while (v5)
  {
    unint64_t v6 = v5 - 1;
    unint64_t v7 = *(unsigned __int8 *)(*a1 + v5 - 1);
    uint64_t v8 = *(void *)((char *)&v10 + ((v7 >> 3) & 0x18)) >> v7;
    unint64_t v5 = v6;
    if ((v8 & 1) == 0) {
      return v6;
    }
  }

  return -1LL;
}

void ctu::llvm::StringRef::split( __int128 *a1, void **a2, unsigned __int8 *a3, size_t a4, int a5, uint64_t a6)
{
  __int128 v49 = *a1;
  uint64_t v6 = v49;
  if ((void)v49)
  {
    int v8 = a5;
    int v12 = 0;
    uint64_t v47 = (uint64_t)(a2 + 2);
    unint64_t v13 = *((void *)&v49 + 1);
    while (v8 < 0 || v12 < v8)
    {
      unint64_t v14 = ctu::llvm::StringRef::find((uint64_t *)&v49, a3, a4, 0LL);
      if (v14 >= v13) {
        unint64_t v15 = v13;
      }
      else {
        unint64_t v15 = v14;
      }
      unint64_t v16 = v14 + a4;
      if (v14 + a4 >= v13) {
        unint64_t v16 = v13;
      }
      uint64_t v17 = v6 + v16;
      unint64_t v18 = v13 - v16;
      uint64_t v19 = v6;
      if (v14 == -1LL) {
        unint64_t v20 = v13;
      }
      else {
        unint64_t v20 = v15;
      }
      if (v14 == -1LL) {
        uint64_t v6 = 0LL;
      }
      else {
        uint64_t v6 = v17;
      }
      if (v14 == -1LL) {
        unint64_t v13 = 0LL;
      }
      else {
        unint64_t v13 = v18;
      }
      if ((a6 & 1) != 0 || v20)
      {
        int8x16_t v22 = a2[1];
        unint64_t v21 = (unint64_t)a2[2];
        if ((unint64_t)v22 >= v21)
        {
          unsigned int v24 = a3;
          uint64_t v25 = a6;
          uint64_t v26 = ((char *)v22 - (_BYTE *)*a2) >> 4;
          unint64_t v27 = v26 + 1;
          uint64_t v28 = v21 - (void)*a2;
          if (v28 >> 3 > v27) {
            unint64_t v27 = v28 >> 3;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29) {
            int v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::RestResourceConnection>>>( v47,  v29);
          }
          else {
            int v30 = 0LL;
          }
          unsigned int v31 = &v30[16 * v26];
          *(void *)unsigned int v31 = v19;
          *((void *)v31 + 1) = v20;
          unint64_t v33 = (char *)*a2;
          int v32 = (char *)a2[1];
          int v34 = v31;
          a6 = v25;
          if (v32 != *a2)
          {
            do
            {
              *((_OWORD *)v34 - 1) = *((_OWORD *)v32 - 1);
              v34 -= 16;
              v32 -= 16;
            }

            while (v32 != v33);
            int v32 = (char *)*a2;
          }

          a3 = v24;
          uint64_t v23 = v31 + 16;
          *a2 = v34;
          a2[1] = v31 + 16;
          a2[2] = &v30[16 * v29];
          int v8 = a5;
          if (v32) {
            operator delete(v32);
          }
        }

        else
        {
          *int8x16_t v22 = v19;
          v22[1] = v20;
          uint64_t v23 = v22 + 2;
        }

        a2[1] = v23;
      }

      *(void *)&__int128 v49 = v6;
      *((void *)&v49 + 1) = v13;
      ++v12;
      if (!v6) {
        return;
      }
    }

    if (v13 || (_DWORD)a6)
    {
      int v36 = a2[1];
      unint64_t v35 = (unint64_t)a2[2];
      if ((unint64_t)v36 >= v35)
      {
        uint64_t v38 = ((char *)v36 - (_BYTE *)*a2) >> 4;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 60) {
LABEL_60:
        }
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        uint64_t v40 = v35 - (void)*a2;
        if (v40 >> 3 > v39) {
          unint64_t v39 = v40 >> 3;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41) {
          unint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::RestResourceConnection>>>( v47,  v41);
        }
        else {
          unint64_t v42 = 0LL;
        }
        unint64_t v43 = &v42[16 * v38];
        __int128 v44 = &v42[16 * v41];
        *(_OWORD *)unint64_t v43 = v49;
        unint64_t v37 = v43 + 16;
        unint64_t v46 = (char *)*a2;
        unint64_t v45 = (char *)a2[1];
        if (v45 != *a2)
        {
          do
          {
            *((_OWORD *)v43 - 1) = *((_OWORD *)v45 - 1);
            v43 -= 16;
            v45 -= 16;
          }

          while (v45 != v46);
          unint64_t v45 = (char *)*a2;
        }

        *a2 = v43;
        a2[1] = v37;
        a2[2] = v44;
        if (v45) {
          operator delete(v45);
        }
      }

      else
      {
        *int v36 = v49;
        unint64_t v37 = v36 + 1;
      }

      a2[1] = v37;
    }
  }

uint64_t ctu::llvm::StringRef::count(uint64_t *a1, const void *a2, size_t a3)
{
  unint64_t v3 = a1[1];
  size_t v4 = v3 - a3;
  if (v3 < a3 || v4 == -1LL) {
    return 0LL;
  }
  uint64_t v7 = 0LL;
  unint64_t v8 = 0LL;
  uint64_t v9 = *a1;
  size_t v10 = v4 + 1;
  do
  {
    if (v8 >= v3) {
      unint64_t v11 = v3;
    }
    else {
      unint64_t v11 = v8;
    }
    ++v8;
  }

  while (v10 != v8);
  return v7;
}

uint64_t ctu::llvm::getAsUnsignedInteger( _WORD *a1, unint64_t a2, unsigned int a3, unint64_t *a4)
{
  if (a3)
  {
LABEL_2:
    if (!a2) {
      return 1LL;
    }
    goto LABEL_13;
  }

  if (a2 < 2)
  {
    if (!a2) {
      return 1LL;
    }
    goto LABEL_10;
  }

  switch(*a1)
  {
    case 0x7830:
      ++a1;
      a3 = 16;
LABEL_29:
      a2 -= 2LL;
      goto LABEL_2;
    case 0x6230:
      ++a1;
      a3 = 2;
      goto LABEL_29;
    case 0x6F30:
      ++a1;
      a3 = 8;
      goto LABEL_29;
  }

LABEL_10:
  if (*(_BYTE *)a1 == 48) {
    a3 = 8;
  }
  else {
    a3 = 10;
  }
LABEL_13:
  unint64_t v5 = 0LL;
  *a4 = 0LL;
  while (*(char *)a1 >= 48)
  {
    unsigned int v6 = *(unsigned __int8 *)a1;
    if (v6 >= 0x3A)
    {
      if (v6 < 0x61)
      {
        if (v6 - 65 > 0x19) {
          return 1LL;
        }
        int v7 = -55;
      }

      else
      {
        if (v6 >= 0x7B) {
          return 1LL;
        }
        int v7 = -87;
      }
    }

    else
    {
      int v7 = -48;
    }

    unsigned int v8 = v7 + v6;
    if (v8 >= a3) {
      break;
    }
    unint64_t v9 = v5 * a3 + v8;
    *a4 = v9;
    if (v9 / a3 < v5) {
      break;
    }
    a1 = (_WORD *)((char *)a1 + 1);
    unint64_t v5 = v9;
    if (!--a2) {
      return 0LL;
    }
  }

  return 1LL;
}

    operator delete(p_s);
    return;
  }

  unint64_t v9 = __s.__r_.__value_.__s.__size_;
  if (__s.__r_.__value_.__s.__size_ < 3u)
  {
    p_s = &__s;
    goto LABEL_16;
  }

    operator delete(p_s);
    return;
  }

  unint64_t v9 = __s.__r_.__value_.__s.__size_;
  if (__s.__r_.__value_.__s.__size_ < 3u)
  {
    p_s = &__s;
    goto LABEL_16;
  }

    unint64_t v3 = 0LL;
  }

    unint64_t v3 = 0LL;
  }

uint64_t ctu::llvm::getAsSignedInteger(_WORD *a1, unint64_t a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  if (a2 && *(_BYTE *)a1 == 45)
  {
    uint64_t v5 = -v8;
    if (-v8 >= 0 && v8 != 0) {
      return 1LL;
    }
    goto LABEL_8;
  }

  char AsUnsignedInteger = ctu::llvm::getAsUnsignedInteger(a1, a2, a3, (unint64_t *)&v8);
  uint64_t result = 1LL;
  if ((AsUnsignedInteger & 1) == 0)
  {
    uint64_t v5 = v8;
    if ((v8 & 0x8000000000000000LL) == 0)
    {
LABEL_8:
      uint64_t result = 0LL;
      *a4 = v5;
    }
  }

  return result;
}

void *ctu::llvm::operator<<(void *a1, uint64_t a2)
{
  size_t v4 = *(void **)a2;
  if (v4)
  {
    std::string::basic_string[abi:ne180100](&__p, v4, *(void *)(a2 + 8));
    unsigned int v5 = HIBYTE(v14);
    unsigned int v6 = (void **)__p;
    uint64_t v7 = v13;
  }

  else
  {
    uint64_t v7 = 0LL;
    unsigned int v6 = 0LL;
    unsigned int v5 = 0;
    std::string __p = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
  }

  if ((v5 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = v6;
  }
  if ((v5 & 0x80u) == 0) {
    uint64_t v9 = v5;
  }
  else {
    uint64_t v9 = v7;
  }
  size_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, v9);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  return v10;
}

void sub_1865E4D3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c39_ZTSNSt3__110shared_ptrIN3xpc6objectEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2)
  {
    unint64_t v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

uint64_t __destroy_helper_block_e8_32c39_ZTSNSt3__110shared_ptrIN3xpc6objectEEE(uint64_t a1)
{
  return std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](a1 + 32);
}

uint64_t ctu::asChronoString@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v20[7] = v4;
  v20[8] = v4;
  v20[5] = v4;
  v20[6] = v4;
  void v20[3] = v4;
  v20[4] = v4;
  v20[1] = v4;
  v20[2] = v4;
  __int128 v19 = v4;
  v20[0] = v4;
  *(_OWORD *)std::string __p = v4;
  __int128 v18 = v4;
  _OWORD v16[2] = v4;
  void v16[3] = v4;
  v16[0] = v4;
  v16[1] = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  if (a1 > 86399)
  {
    unsigned int v5 = (void *)std::ostream::operator<<();
    char v22 = 100;
    unsigned int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v22, 1LL);
    uint64_t v7 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, 32);
    *(void *)((char *)v7 + *(void *)(*v7 - 24LL) + memset(&context, 0, 24) = 2LL;
LABEL_4:
    uint64_t v8 = (void *)std::ostream::operator<<();
    char v22 = 104;
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v22, 1LL);
    size_t v10 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, 32);
    *(void *)((char *)v10 + *(void *)(*v10 - 24LL) + memset(&context, 0, 24) = 2LL;
LABEL_5:
    unint64_t v11 = (void *)std::ostream::operator<<();
    char v22 = 109;
    int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v22, 1LL);
    uint64_t v13 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, 32);
    *(void *)((char *)v13 + *(void *)(*v13 - 24LL) + memset(&context, 0, 24) = 2LL;
    goto LABEL_6;
  }

  if (a1 >= 3600) {
    goto LABEL_4;
  }
  if (a1 >= 60) {
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v14 = (void *)std::ostream::operator<<();
  char v22 = 115;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v22, 1LL);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16 + 8, a2);
  *(void *)&v16[0] = *MEMORY[0x189614738];
  *(void *)((char *)v16 + *(void *)(*(void *)&v16[0] - 24LL)) = *(void *)(MEMORY[0x189614738] + 24LL);
  *((void *)&v16[0] + 1) = MEMORY[0x189614750] + 16LL;
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x186E3C284](v20);
}

void sub_1865E4FB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char a2)
{
  __int128 v4 = (char *)a1 + *(void *)(*a1 - 24LL);
  if (*((_DWORD *)v4 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
    unsigned int v5 = std::locale::use_facet(&v8, MEMORY[0x189614558]);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32LL);
    std::locale::~locale(&v8);
    *((_DWORD *)v4 + 36) = v6;
  }

  *((_DWORD *)v4 + 36) = a2;
  return a1;
}

void sub_1865E5068( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

double ctu::asChronoString@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1 % 1000000000;
  memset(v26, 170, sizeof(v26));
  ctu::asChronoString(a1 / 1000000000, v26);
  if (!v3)
  {
    double result = *(double *)v26;
    *(_OWORD *)a2 = *(_OWORD *)v26;
    a2[2] = *(void *)&v26[16];
    return result;
  }

  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24[7] = v4;
  v24[8] = v4;
  v24[5] = v4;
  v24[6] = v4;
  v24[3] = v4;
  v24[4] = v4;
  v24[1] = v4;
  v24[2] = v4;
  __int128 v23 = v4;
  v24[0] = v4;
  *(_OWORD *)std::string __p = v4;
  __int128 v22 = v4;
  v20[2] = v4;
  void v20[3] = v4;
  v20[0] = v4;
  v20[1] = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
  if (v26[23] >= 0) {
    unsigned int v5 = v26;
  }
  else {
    unsigned int v5 = *(_BYTE **)v26;
  }
  if (v26[23] >= 0) {
    uint64_t v6 = v26[23];
  }
  else {
    uint64_t v6 = *(void *)&v26[8];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v5, v6);
  uint64_t v7 = v3 % 1000000 % 1000;
  unint64_t v8 = v3 % 1000000 + 999;
  if ((unint64_t)(v3 + 999999) <= 0x1E847E && (v8 <= 0x7CE ? (BOOL v9 = v7 == 0) : (BOOL v9 = 0), v9) {
    || ((char v27 = 46,
  }
         size_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v27, 1LL),
         unint64_t v11 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, 48),
         *(void *)((char *)v11 + *(void *)(*v11 - 24LL) + memset(&context, 0, 24) = 3LL,
         std::ostream::operator<<(),
         v8 <= 0x7CE)
      ? (BOOL v12 = v7 == 0)
      : (BOOL v12 = 0),
        v12))
  {
    __int128 v18 = "ms";
LABEL_20:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v18, 2LL);
    goto LABEL_21;
  }

  char v27 = 95;
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v27, 1LL);
  uint64_t v14 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, 48);
  *(void *)((char *)v14 + *(void *)(*v14 - 24LL) + memset(&context, 0, 24) = 3LL;
  std::ostream::operator<<();
  if (!v7)
  {
    __int128 v18 = "us";
    goto LABEL_20;
  }

  char v27 = 95;
  unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v27, 1LL);
  unint64_t v16 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, 48);
  *(void *)((char *)v16 + *(void *)(*v16 - 24LL) + memset(&context, 0, 24) = 3LL;
  uint64_t v17 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"ns", 2LL);
LABEL_21:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v20 + 8, a2);
  *(void *)&v20[0] = *MEMORY[0x189614738];
  *(void *)((char *)v20 + *(void *)(*(void *)&v20[0] - 24LL)) = *(void *)(MEMORY[0x189614738] + 24LL);
  *((void *)&v20[0] + 1) = MEMORY[0x189614750] + 16LL;
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x186E3C284](v24);
  if ((v26[23] & 0x80000000) != 0) {
    operator delete(*(void **)v26);
  }
  return result;
}

void sub_1865E5344( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t TelephonyCapabilitiesSetHardwareModelFromString(_BYTE *a1)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAAALL;
  int v3 = -1431655766;
  uint64_t result = TelephonyUtilParseHardwareModel(a1, (uint64_t)&v2);
  if ((_DWORD)result)
  {
    sTelephonyCapabilitiesHardwareModelInfo = v2;
    dword_18C4A4580 = v3;
  }

  else
  {
    dword_18C4A4580 = 0;
    sTelephonyCapabilitiesHardwareModelInfo = 0LL;
  }

  return result;
}

uint64_t TelephonyCapabilitiesSetHardwareModelFromTelephonyProduct(int a1)
{
  if (a1 < 0x8000)
  {
    switch(a1)
    {
      case 33:
        char v1 = 97;
        char v2 = 74;
        goto LABEL_133;
      case 38:
        char v1 = 0;
        char v2 = 74;
        int v3 = 128;
        goto LABEL_136;
      case 52:
        char v1 = 0;
        char v2 = 74;
        int v3 = 121;
        goto LABEL_136;
      case 53:
        char v1 = 0;
        char v2 = 74;
        goto LABEL_96;
      case 57:
        char v1 = 115;
        goto LABEL_23;
      case 60:
        char v1 = 98;
        goto LABEL_14;
      case 61:
        char v1 = 115;
LABEL_14:
        char v2 = 78;
        int v3 = 141;
        goto LABEL_136;
      case 62:
        char v1 = 0;
        char v2 = 68;
        int v3 = 20;
        goto LABEL_136;
      case 63:
        char v1 = 0;
        char v2 = 68;
        int v3 = 21;
        goto LABEL_136;
      case 64:
        char v1 = 0;
        char v2 = 68;
        int v3 = 22;
        goto LABEL_136;
      case 65:
        char v1 = 0;
        char v2 = 68;
        int v3 = 201;
        goto LABEL_136;
      case 66:
        char v1 = 0;
        char v2 = 68;
        goto LABEL_36;
      case 67:
        char v1 = 0;
        char v2 = 68;
        int v3 = 221;
        goto LABEL_136;
      case 68:
        char v1 = 116;
        goto LABEL_23;
      case 73:
        char v1 = 98;
LABEL_23:
        char v2 = 74;
        int v3 = 72;
        goto LABEL_136;
      case 79:
        char v1 = 0;
        char v2 = 68;
        goto LABEL_30;
      case 80:
        char v1 = 0;
        goto LABEL_27;
      case 81:
        char v1 = 112;
LABEL_27:
        char v2 = 68;
        int v3 = 331;
        goto LABEL_136;
      case 82:
        char v1 = 0;
        char v2 = 74;
        int v3 = 318;
        goto LABEL_136;
      case 83:
        char v1 = 0;
        char v2 = 74;
LABEL_30:
        int v3 = 321;
        goto LABEL_136;
      case 84:
        char v1 = 0;
        char v2 = 78;
        int v3 = 841;
        goto LABEL_136;
      case 87:
        char v1 = 115;
        goto LABEL_34;
      case 88:
        char v1 = 98;
LABEL_34:
        char v2 = 78;
        int v3 = 146;
        goto LABEL_136;
      case 89:
        char v1 = 0;
        char v2 = 74;
LABEL_36:
        int v3 = 211;
        goto LABEL_136;
      case 90:
        char v1 = 0;
        char v2 = 74;
        goto LABEL_112;
      case 91:
        char v1 = 0;
        char v2 = 78;
        int v3 = 104;
        goto LABEL_136;
      case 92:
        char v1 = 0;
        char v2 = 68;
        goto LABEL_43;
      case 93:
        char v1 = 0;
        char v2 = 68;
        int v3 = 431;
        goto LABEL_136;
      case 94:
        char v1 = 0;
        goto LABEL_65;
      case 95:
        char v1 = 0;
        char v2 = 74;
LABEL_43:
        int v3 = 421;
        goto LABEL_136;
      case 96:
        char v1 = 0;
        char v2 = 74;
        int v3 = 418;
        goto LABEL_136;
      case 97:
        char v1 = 0;
        char v2 = 68;
        int v3 = 79;
        goto LABEL_136;
      case 99:
        char v1 = 103;
        char v2 = 68;
        int v3 = 52;
        goto LABEL_136;
      case 100:
        char v1 = 103;
        goto LABEL_49;
      case 101:
        char v1 = 112;
LABEL_49:
        char v2 = 68;
        int v3 = 53;
        goto LABEL_136;
      case 102:
        char v1 = 112;
        char v2 = 68;
        int v3 = 54;
        goto LABEL_136;
      case 103:
        char v1 = 115;
        goto LABEL_53;
      case 104:
        char v1 = 98;
LABEL_53:
        char v2 = 78;
        int v3 = 142;
        goto LABEL_136;
      case 105:
        char v1 = 115;
        goto LABEL_56;
      case 106:
        char v1 = 98;
LABEL_56:
        char v2 = 78;
        int v3 = 158;
        goto LABEL_136;
      case 107:
        char v1 = 0;
        char v2 = 74;
        int v3 = 308;
        goto LABEL_136;
      case 108:
        char v1 = 0;
        goto LABEL_60;
      case 109:
        char v1 = 120;
LABEL_60:
        char v2 = 74;
        int v3 = 518;
        goto LABEL_136;
      case 110:
        char v1 = 0;
        goto LABEL_63;
      case 111:
        char v1 = 120;
LABEL_63:
        char v2 = 74;
        int v3 = 523;
        goto LABEL_136;
      case 112:
        char v1 = 97;
LABEL_65:
        char v2 = 74;
        int v3 = 172;
        goto LABEL_136;
      case 114:
        char v1 = 0;
        char v2 = 68;
        int v3 = 16;
        goto LABEL_136;
      case 115:
        char v1 = 0;
        char v2 = 68;
        int v3 = 17;
        goto LABEL_136;
      case 116:
        char v1 = 0;
        char v2 = 68;
        int v3 = 63;
        goto LABEL_136;
      case 117:
        char v1 = 0;
        char v2 = 68;
        goto LABEL_135;
      case 118:
        char v1 = 115;
        goto LABEL_72;
      case 119:
        char v1 = 98;
LABEL_72:
        char v2 = 78;
        int v3 = 188;
        goto LABEL_136;
      case 120:
        char v1 = 0;
        char v2 = 74;
        int v3 = 311;
        goto LABEL_136;
      case 122:
        char v1 = 0;
        char v2 = 74;
        int v3 = 182;
        goto LABEL_136;
      case 123:
        char v1 = 0;
        char v2 = 74;
        int v3 = 408;
        goto LABEL_136;
      case 124:
        char v1 = 0;
        char v2 = 68;
        int v3 = 49;
        goto LABEL_136;
      case 125:
        char v1 = 0;
        char v2 = 74;
        int v3 = 618;
        goto LABEL_136;
      case 126:
        char v1 = 0;
        char v2 = 74;
        int v3 = 621;
        goto LABEL_136;
      case 127:
        char v1 = 115;
        goto LABEL_81;
      case 128:
        char v1 = 98;
LABEL_81:
        char v2 = 78;
        int v3 = 149;
        goto LABEL_136;
      case 129:
        char v1 = 115;
        goto LABEL_84;
      case 130:
        char v1 = 98;
LABEL_84:
        char v2 = 78;
        int v3 = 198;
        goto LABEL_136;
      case 131:
        char v1 = 0;
        char v2 = 78;
        int v3 = 199;
        goto LABEL_136;
      case 132:
        char v1 = 0;
        char v2 = 68;
        int v3 = 27;
        goto LABEL_136;
      case 133:
        char v1 = 0;
        char v2 = 68;
        int v3 = 28;
        goto LABEL_136;
      case 134:
        char v1 = 0;
        char v2 = 68;
        int v3 = 73;
        goto LABEL_136;
      case 135:
        char v1 = 0;
        char v2 = 68;
        int v3 = 74;
        goto LABEL_136;
      case 136:
        char v1 = 0;
        char v2 = 74;
        int v3 = 272;
        goto LABEL_136;
      case 137:
        char v1 = 0;
        char v2 = 74;
        int v3 = 508;
        goto LABEL_136;
      case 138:
        char v1 = 0;
        char v2 = 74;
        int v3 = 538;
        goto LABEL_136;
      case 139:
        char v1 = 115;
        goto LABEL_95;
      case 140:
        char v1 = 98;
LABEL_95:
        char v2 = 78;
LABEL_96:
        int v3 = 208;
        goto LABEL_136;
      case 141:
        char v1 = 0;
        char v2 = 78;
        int v3 = 210;
        goto LABEL_136;
      case 142:
        char v1 = 0;
        char v2 = 68;
        int v3 = 37;
        goto LABEL_136;
      case 143:
        char v1 = 0;
        char v2 = 68;
        int v3 = 38;
        goto LABEL_136;
      case 144:
        char v1 = 0;
        char v2 = 68;
        int v3 = 83;
        goto LABEL_136;
      case 145:
        char v1 = 0;
        char v2 = 68;
        int v3 = 84;
        goto LABEL_136;
      case 146:
        char v1 = 0;
        char v2 = 74;
        int v3 = 411;
        goto LABEL_136;
      case 147:
        char v1 = 0;
        char v2 = 74;
        int v3 = 718;
        goto LABEL_136;
      case 148:
        char v1 = 0;
        char v2 = 74;
        int v3 = 721;
        goto LABEL_136;
      case 149:
        char v1 = 0;
        char v2 = 68;
        int v3 = 47;
        goto LABEL_136;
      case 150:
        char v1 = 0;
        char v2 = 68;
        int v3 = 48;
        goto LABEL_136;
      case 151:
        char v1 = 0;
        char v2 = 68;
        int v3 = 93;
        goto LABEL_136;
      case 152:
        char v1 = 0;
        char v2 = 68;
        int v3 = 94;
        goto LABEL_136;
      case 153:
        char v1 = 115;
        goto LABEL_111;
      case 154:
        char v1 = 98;
LABEL_111:
        char v2 = 78;
LABEL_112:
        int v3 = 218;
        goto LABEL_136;
      case 155:
        char v1 = 0;
        char v2 = 78;
        int v3 = 230;
        goto LABEL_136;
      case 156:
        char v1 = 0;
        char v2 = 86;
        int v3 = 59;
        goto LABEL_136;
      case 157:
        char v1 = 0;
        char v2 = 74;
        int v3 = 482;
        goto LABEL_136;
      case 158:
        char v1 = 0;
        char v2 = 74;
        int v3 = 608;
        goto LABEL_136;
      case 159:
        char v1 = 0;
        char v2 = 74;
        int v3 = 638;
        goto LABEL_136;
      case 200:
        char v1 = 120;
        char v2 = 84;
        int v3 = 8110;
        goto LABEL_136;
      case 201:
        char v1 = 0;
        goto LABEL_126;
      case 202:
        char v1 = 0;
        goto LABEL_122;
      case 203:
        char v1 = 120;
LABEL_122:
        char v2 = 84;
        int v3 = 742;
        goto LABEL_136;
      case 204:
        char v1 = 98;
        goto LABEL_126;
      case 205:
        char v1 = 107;
        goto LABEL_126;
      case 206:
        char v1 = 118;
LABEL_126:
        char v2 = 67;
        int v3 = 4000;
        break;
      case 207:
        char v1 = 120;
        char v2 = 84;
        int v3 = 8120;
        goto LABEL_136;
      case 208:
        char v1 = 0;
        char v2 = 67;
        int v3 = 4020;
        goto LABEL_136;
      case 209:
        char v1 = 0;
        char v2 = 84;
        int v3 = 1153;
        goto LABEL_136;
      case 211:
        char v1 = 0;
        char v2 = 84;
        int v3 = 1232;
        goto LABEL_136;
      case 212:
        char v1 = 0;
        char v2 = 84;
        int v3 = 2030;
        goto LABEL_136;
      default:
        goto LABEL_137;
    }

    goto LABEL_136;
  }

  switch(a1)
  {
    case 32768:
      char v1 = 104;
      char v2 = 87;
      goto LABEL_133;
    case 32770:
      char v1 = 100;
      char v2 = 77;
LABEL_135:
      int v3 = 64;
      goto LABEL_136;
    case 32769:
      char v1 = 100;
      char v2 = 80;
LABEL_133:
      int v3 = 99;
LABEL_136:
      LODWORD(sTelephonyCapabilitiesHardwareModelInfo) = v3;
      BYTE4(sTelephonyCapabilitiesHardwareModelInfo) = v2;
      BYTE5(sTelephonyCapabilitiesHardwareModelInfo) = v1;
      HIWORD(sTelephonyCapabilitiesHardwareModelInfo) = 0;
      dword_18C4A4580 = 0;
      return 1LL;
  }

LABEL_137:
  uint64_t result = 0LL;
  dword_18C4A4580 = 0;
  sTelephonyCapabilitiesHardwareModelInfo = 0LL;
  return result;
}

uint64_t *TelephonyCapabilitiesGetHardwareModel()
{
  if (TelephonyCapabilitiesGetHardwareModel_sOnce != -1) {
    dispatch_once(&TelephonyCapabilitiesGetHardwareModel_sOnce, &__block_literal_global_5);
  }
  return &sTelephonyCapabilitiesHardwareModelInfo;
}

void __TelephonyCapabilitiesGetHardwareModel_block_invoke()
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  memset(v21, 0, sizeof(v21));
  host_t v0 = dlopen("/usr/lib/libMobileGestalt.dylib", 1);
  if (!v0)
  {
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
      goto LABEL_47;
    }
    *(_WORD *)buf = 0;
    uint64_t v6 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v7 = "Failed to load MobileGestalt library";
    goto LABEL_13;
  }

  char v1 = (uint64_t (*)(const __CFString *, void))dlsym(v0, "MGCopyAnswer");
  if (!v1)
  {
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
      goto LABEL_47;
    }
    *(_WORD *)buf = 0;
    uint64_t v6 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v7 = "Unable to find MGCopyAnswer function";
    goto LABEL_13;
  }

  char v2 = v1;
  int v3 = (const __CFBoolean *)v1(@"IsVirtualDevice", 0LL);
  if (!v3)
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl( &dword_1865C1000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEBUG,  "Unable to determine whether this is a virtual device",  buf,  2u);
    }

    goto LABEL_47;
  }

  __int128 v4 = v3;
  if (CFBooleanGetValue(v3) == 1)
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl( &dword_1865C1000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEBUG,  "Detected virtual device, so treating it as unknown Telephony product",  buf,  2u);
    }

    dword_18C4A4580 = 0;
    sTelephonyCapabilitiesHardwareModelInfo = 0LL;
    unsigned int v5 = (const __CFString *)v4;
    goto LABEL_8;
  }

  CFRelease(v4);
  uint64_t v9 = (const __CFBoolean *)v2(@"HasBaseband", 0LL);
  if (!v9)
  {
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
      goto LABEL_47;
    }
    *(_WORD *)buf = 0;
    uint64_t v6 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v7 = "Unable to determine whether device has baseband";
    goto LABEL_13;
  }

  size_t v10 = v9;
  int Value = CFBooleanGetValue(v9);
  CFRelease(v10);
  if (!Value)
  {
    unint64_t v15 = (const __CFString *)v2(@"DeviceName", 0LL);
    if (v15)
    {
      uint64_t v13 = v15;
      CFTypeID v16 = CFGetTypeID(v15);
      if (v16 != CFStringGetTypeID())
      {
        if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
          goto LABEL_46;
        }
        *(_WORD *)buf = 0;
        uint64_t v17 = (os_log_s *)MEMORY[0x1895F8DA0];
        __int128 v18 = "Detected unexpected type in the MobileGestalt device name";
        goto LABEL_45;
      }

      if (CFStringCompare(@"iPad", v13, 0LL))
      {
        if (CFStringCompare(@"Apple Watch", v13, 0LL))
        {
          if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
            goto LABEL_46;
          }
          *(_WORD *)buf = 0;
          uint64_t v17 = (os_log_s *)MEMORY[0x1895F8DA0];
          __int128 v18 = "Detected an unsupported non-baseband device";
LABEL_45:
          _os_log_error_impl(&dword_1865C1000, v17, OS_LOG_TYPE_ERROR, v18, buf, 2u);
          goto LABEL_46;
        }

        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_1865C1000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEBUG, "Detected a WiFi Watch", buf, 2u);
        }

        char v19 = 104;
        char v20 = 87;
      }

      else
      {
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_1865C1000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEBUG, "Detected a WiFi iPad", buf, 2u);
        }

        char v19 = 100;
        char v20 = 80;
      }

      LODWORD(sTelephonyCapabilitiesHardwareModelInfo) = 99;
      BYTE4(sTelephonyCapabilitiesHardwareModelInfo) = v20;
      BYTE5(sTelephonyCapabilitiesHardwareModelInfo) = v19;
      HIWORD(sTelephonyCapabilitiesHardwareModelInfo) = 0;
      dword_18C4A4580 = 0;
      unsigned int v5 = v13;
LABEL_8:
      CFRelease(v5);
      return;
    }

    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
      goto LABEL_47;
    }
    *(_WORD *)buf = 0;
    uint64_t v6 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v7 = "Unable to determine the device name";
LABEL_13:
    uint32_t v8 = 2;
LABEL_14:
    _os_log_error_impl(&dword_1865C1000, v6, OS_LOG_TYPE_ERROR, v7, buf, v8);
    goto LABEL_47;
  }

  BOOL v12 = (const __CFString *)v2(@"HWModelStr", 0LL);
  if (!v12)
  {
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
      goto LABEL_47;
    }
    *(_WORD *)buf = 0;
    uint64_t v6 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v7 = "Unable to determine the hardware model string";
    goto LABEL_13;
  }

  uint64_t v13 = v12;
  CFTypeID v14 = CFGetTypeID(v12);
  if (v14 != CFStringGetTypeID())
  {
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
      goto LABEL_46;
    }
    *(_WORD *)buf = 0;
    uint64_t v17 = (os_log_s *)MEMORY[0x1895F8DA0];
    __int128 v18 = "Detected unexpected type in the MobileGestalt hardware model string";
    goto LABEL_45;
  }

  if (!CFStringGetCString(v13, (char *)v21, 32LL, 0x600u))
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      uint64_t v17 = (os_log_s *)MEMORY[0x1895F8DA0];
      __int128 v18 = "Unable to copy MobileGestalt hardware model string into local buffer";
      goto LABEL_45;
    }

LABEL_47:
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
  {
    LOWORD(v21[0]) = 0;
    _os_log_error_impl( &dword_1865C1000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "Treating device as unknown Telephony product due error determining hardware model info from MobileGestalt query",  (uint8_t *)v21,  2u);
  }

  dword_18C4A4580 = 0;
  sTelephonyCapabilitiesHardwareModelInfo = 0LL;
}

        unint64_t v58 = (char *)*a1;
        *a1 = v49;
        a1[1] = v50;
        a1[2] = v5;
        a1[3] = v52;
        if (v58)
        {
          operator delete(v58);
          unsigned int v5 = (char *)a1[2];
        }
      }
    }

    else
    {
      a1[4] = v8 - 42;
      BOOL v12 = *(void *)v4;
      size_t v10 = v4 + 8;
      unint64_t v11 = v12;
      a1[1] = v10;
      if (v5 == (char *)a1[3])
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 > *a1)
        {
          CFTypeID v14 = v13 >> 3;
          unint64_t v15 = v13 >> 3 < -1;
          CFTypeID v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          __int128 v18 = -(v17 >> 1);
          char v19 = v17 >> 1;
          char v20 = &v10[-8 * v19];
          unint64_t v21 = v5 - v10;
          if (v5 != v10)
          {
            memmove(&v10[-8 * v19], v10, v5 - v10);
            unsigned int v5 = (char *)a1[1];
          }

          __int128 v22 = &v5[8 * v18];
          unsigned int v5 = &v20[v21];
LABEL_14:
          a1[1] = v22;
          a1[2] = v5;
          goto LABEL_50;
        }

        else {
          __int128 v48 = (uint64_t)&v5[-*a1] >> 2;
        }
        __int128 v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v48);
        uint64_t v50 = &v49[8 * (v48 >> 2)];
        unint64_t v52 = &v49[8 * v51];
        __int128 v53 = (uint64_t *)a1[1];
        unsigned int v5 = v50;
        unint64_t v54 = a1[2] - (void)v53;
        if (v54)
        {
          unsigned int v5 = &v50[v54 & 0xFFFFFFFFFFFFFFF8LL];
          xpc_object_t v55 = 8 * (v54 >> 3);
          unint64_t v56 = &v49[8 * (v48 >> 2)];
          do
          {
            __int128 v57 = *v53++;
            *(void *)unint64_t v56 = v57;
            v56 += 8;
            v55 -= 8LL;
          }

          while (v55);
        }

        goto LABEL_47;
      }
    }

  if ((char)a2->__r_.__value_.__s.__size_ < 0)
  {
    if (!a2->__r_.__value_.__l.__size_) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }

  if (a2->__r_.__value_.__s.__size_) {
LABEL_51:
  }
    std::string::push_back(a2, 46);
LABEL_52:
  char v27 = *a1;
  for (uint64_t i = a1[1]; v27 != i; v27 += 88LL)
  {
    memset(&__p, 170, sizeof(__p));
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( (const void **)&a2->__r_.__value_.__l.__data_,  (const void **)(v27 + 48),  &__p);
    else {
      uint64_t v28 = __p;
    }
    ctu::LoggerTree::getConfig(v27, &v28, a3, a4);
  }

  xpc_release(v40);
}

uint64_t TelephonyCapabilitiesSetHardwareModel(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  dword_18C4A4580 = *(_DWORD *)(result + 8);
  sTelephonyCapabilitiesHardwareModelInfo = v1;
  return result;
}

uint64_t TelephonyCapabilitiesRadioCoreDumpCaptureTime()
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  else {
    return dword_186633F50[sTelephonyRadioVendor - 1];
  }
}

uint64_t TelephonyCapabilitiesRadioCoreDumpSupportsSPMISignalling()
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  return ((sTelephonyProduct - 156) < 0x35) & (0x18700000000001uLL >> (sTelephonyProduct
                                                                                                 + 100));
}

BOOL ctu::fs::file_exists(const char *a1)
{
  v1.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v1.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v3.st_blkstd::string::size_type size = v1;
  *(timespec *)v3.st_qspare = v1;
  v3.st_birthtimespec = v1;
  *(timespec *)&v3.st_std::string::size_type size = v1;
  v3.st_mtimespec = v1;
  v3.st_ctimespec = v1;
  *(timespec *)&v3.st_uid = v1;
  v3.st_atimespec = v1;
  *(timespec *)&v3.st_dev = v1;
  return stat(a1, &v3) == 0;
}

BOOL ctu::fs::is_directory(const char *a1)
{
  v1.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v1.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v4.st_blkstd::string::size_type size = v1;
  *(timespec *)v4.st_qspare = v1;
  v4.st_birthtimespec = v1;
  *(timespec *)&v4.st_std::string::size_type size = v1;
  v4.st_mtimespec = v1;
  v4.st_ctimespec = v1;
  *(timespec *)&v4.st_uid = v1;
  v4.st_atimespec = v1;
  *(timespec *)&v4.st_dev = v1;
  return !stat(a1, &v4) && (v4.st_mode & 0xF000) == 0x4000;
}

BOOL ctu::fs::create_directory(char *a1, size_t a2, mode_t a3, int a4)
{
  v8.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v8.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blkstd::string::size_type size = v8;
  *(timespec *)__dst.st_qspare = v8;
  __dst.st_birthtimespec = v8;
  *(timespec *)&__dst.st_std::string::size_type size = v8;
  __dst.st_ctimespec = v8;
  __dst.st_atimespec = v8;
  __dst.st_mtimespec = v8;
  *(timespec *)&__dst.st_dev = v8;
  *(timespec *)&__dst.st_uid = v8;
  if (!stat(a1, &__dst) && (__dst.st_mode & 0xF000) == 0x4000) {
    return 1LL;
  }
  if (!a4) {
    return ctu::fs::_create_directory(a1, a2, a3);
  }
  memset(&__str, 170, sizeof(__str));
  std::string::basic_string[abi:ne180100]<0>(&__str, "/");
  memset(v26, 170, sizeof(v26));
  if (a1) {
    std::string::basic_string[abi:ne180100](&__dst, a1, a2);
  }
  else {
    memset(&__dst, 0, 24);
  }
  ctu::tokenize((std::string *)&__dst, 47, 0LL, v26);
  if (SHIBYTE(__dst.st_gid) < 0) {
    operator delete(*(void **)&__dst.st_dev);
  }
  memset(&v25, 0, sizeof(v25));
  if (*a1 == 47) {
    std::string::operator=(&v25, &__str);
  }
  uint64_t v10 = v26[0];
  if (v26[1] == v26[0])
  {
LABEL_42:
    uint64_t v9 = 1LL;
  }

  else
  {
    uint64_t v11 = 0LL;
    unsigned int v12 = 1;
    while (1)
    {
      if (v12 != 1)
      {
        if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type size = __str.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
        }
        std::string::append(&v25, (const std::string::value_type *)p_str, size);
        uint64_t v10 = v26[0];
      }

      uint64_t v15 = v10 + 24 * v11;
      int v16 = *(char *)(v15 + 23);
      uint64_t v17 = v16 >= 0 ? (const std::string::value_type *)v15 : *(const std::string::value_type **)v15;
      std::string::size_type v18 = v16 >= 0 ? *(unsigned __int8 *)(v15 + 23) : *(void *)(v15 + 8);
      std::string::append(&v25, v17, v18);
      char v19 = (v25.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v25 : (std::string *)v25.__r_.__value_.__r.__words[0];
      v20.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v20.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blkstd::string::size_type size = v20;
      *(timespec *)__dst.st_qspare = v20;
      __dst.st_birthtimespec = v20;
      *(timespec *)&__dst.st_std::string::size_type size = v20;
      __dst.st_ctimespec = v20;
      __dst.st_atimespec = v20;
      __dst.st_mtimespec = v20;
      *(timespec *)&__dst.st_dev = v20;
      *(timespec *)&__dst.st_uid = v20;
      if (stat((const char *)v19, &__dst) || (__dst.st_mode & 0xF000) != 0x4000)
      {
        unint64_t v21 = (v25.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v25 : (std::string *)v25.__r_.__value_.__r.__words[0];
        uint64_t v22 = (v25.__r_.__value_.__s.__size_ & 0x80u) == 0
            ? v25.__r_.__value_.__s.__size_
            : v25.__r_.__value_.__l.__size_;
      }

      uint64_t v11 = v12;
      uint64_t v10 = v26[0];
      if (0xAAAAAAAAAAAAAAABLL * ((v26[1] - v26[0]) >> 3) <= v12++) {
        goto LABEL_42;
      }
    }

    uint64_t v9 = 0LL;
  }

  *(void *)&__dst.st_dev = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
  return v9;
}

void sub_1865E64C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::string __p = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

BOOL ctu::fs::_create_directory(const char *a1, uint64_t a2, mode_t a3)
{
  int v3 = mkdir(a1, a3);
  if (v3)
  {
    __error();
    __error();
    stat v4 = __error();
    strerror(*v4);
    _TelephonyUtilDebugPrint( (uint64_t)"_create_directory",  (uint64_t)"%s: Failed to make the directory: %s with mode: 0x%x, error: %d(0x%x) (%s)",  v5,  v6,  v7,  v8,  v9,  v10,  (uint64_t)"_create_directory");
  }

  return v3 == 0;
}

BOOL ctu::fs::iterate_folder(const char *a1, uint64_t a2, uint64_t a3)
{
  stat v4 = opendir(a1);
  uint64_t v5 = v4;
  if (!v4)
  {
    uint64_t v8 = "%s: Failed to open the directory: %s, error: %d(0x%x) (%s)";
    goto LABEL_8;
  }

  uint64_t v6 = readdir(v4);
  if (v6)
  {
    uint64_t v7 = v6;
    do
    {
      (*(void (**)(uint64_t, dirent *))(a3 + 16))(a3, v7);
      uint64_t v7 = readdir(v5);
    }

    while (v7);
  }

  if (closedir(v5))
  {
    uint64_t v8 = "%s: Failed to close the directory: %s, error: %d(0x%x) (%s)";
LABEL_8:
    __error();
    __error();
    uint64_t v9 = __error();
    strerror(*v9);
    _TelephonyUtilDebugPrint( (uint64_t)"iterate_folder",  (uint64_t)v8,  v10,  v11,  v12,  v13,  v14,  v15,  (uint64_t)"iterate_folder");
  }

  return v5 != 0LL;
}

BOOL ctu::fs::read_folder(const char *a1, uint64_t a2, uint64_t a3, char a4)
{
  v5[0] = MEMORY[0x1895F87A8];
  v5[1] = 0x40000000LL;
  v5[2] = ___ZN3ctu2fs11read_folderENS_4llvm9StringRefERNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEb_block_invoke;
  void v5[3] = &__block_descriptor_tmp_11;
  char v6 = a4;
  v5[4] = a3;
  return ctu::fs::iterate_folder(a1, a2, (uint64_t)v5);
}

void ___ZN3ctu2fs11read_folderENS_4llvm9StringRefERNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEb_block_invoke( uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 20) != 4 || *(_BYTE *)(a1 + 40))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)(a2 + 21));
    unint64_t v3 = *(void *)(v2 + 8);
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 >= v4)
    {
      unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *(void *)v2) >> 3);
      unint64_t v7 = v6 + 1;
      if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *(void *)v2) >> 3);
      if (2 * v8 > v7) {
        unint64_t v7 = 2 * v8;
      }
      if (v8 >= 0x555555555555555LL) {
        unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v9 = v7;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v2 + 16);
      if (v9) {
        uint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v2 + 16, v9);
      }
      else {
        uint64_t v10 = 0LL;
      }
      uint64_t v11 = v10 + v6;
      __v.__first_ = v10;
      __v.__begin_ = v11;
      __v.__end_cap_.__value_ = &v10[v9];
      __int128 v12 = *(_OWORD *)__p;
      v11->__r_.__value_.__l.__cap_ = v16;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
      __p[1] = 0LL;
      std::string::size_type v16 = 0LL;
      __p[0] = 0LL;
      __v.__end_ = v11 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v2, &__v);
      uint64_t v13 = *(void *)(v2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      int v14 = SHIBYTE(v16);
      *(void *)(v2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v13;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }

    else
    {
      __int128 v5 = *(_OWORD *)__p;
      *(void *)(v3 + 16) = v16;
      *(_OWORD *)unint64_t v3 = v5;
      *(void *)(v2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v3 + 24;
    }
  }

void sub_1865E6820( _Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(__p);
}

uint64_t ctu::fs::memory_mapped_file::memory_mapped_file(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + memset(&context, 0, 24) = a4;
  *(void *)(a1 + 2std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0xFFFFFFFFLL;
  *(void *)(a1 + 40) = 0LL;
  ctu::fs::memory_mapped_file::load((ctu::fs::memory_mapped_file *)a1);
  return a1;
}

{
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + memset(&context, 0, 24) = a4;
  *(void *)(a1 + 2std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0xFFFFFFFFLL;
  *(void *)(a1 + 40) = 0LL;
  ctu::fs::memory_mapped_file::load((ctu::fs::memory_mapped_file *)a1);
  return a1;
}

uint64_t ctu::fs::memory_mapped_file::load(ctu::fs::memory_mapped_file *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2 == 3) {
    int v3 = open(*((const char **)this + 1), 2);
  }
  else {
    int v3 = open(*((const char **)this + 1), v2 == 2);
  }
  if (v3 < 0)
  {
    __error();
    __error();
    uint64_t v22 = __error();
    strerror(*v22);
    return _TelephonyUtilDebugPrint( (uint64_t)"load",  (uint64_t)"%s: Failed to open the file: %s, error: %d(0x%x) (%s)",  v23,  v24,  v25,  v26,  v27,  v28,  (uint64_t)"load");
  }

  else
  {
    int v4 = v3;
    off_t v5 = lseek(v3, 0LL, 2);
    if (v5 >= 1)
    {
      *((_DWORD *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v5;
      if (!lseek(v4, 0LL, 0))
      {
        *__error() = 0;
        uint64_t result = (uint64_t)mmap(0LL, *((unsigned int *)this + 8), *((_DWORD *)this + 6) & 3, 2, v4, 0LL);
        *((void *)this + 5) = result;
        if (result != 0xFFFFFFFFLL && result != 0)
        {
          *((_DWORD *)this + 7) = v4;
          return result;
        }

        unint64_t v8 = __error();
        strerror(*v8);
        _TelephonyUtilDebugPrint( (uint64_t)"load",  (uint64_t)"%s: Failed to map, error: %d(0x%x) (%s)",  v9,  v10,  v11,  v12,  v13,  v14,  (uint64_t)"load");
      }
    }

    uint64_t result = close(v4);
    if ((_DWORD)result)
    {
      __error();
      __error();
      uint64_t v15 = __error();
      strerror(*v15);
      return _TelephonyUtilDebugPrint( (uint64_t)"load",  (uint64_t)"%s: Failed to close the file: %s, error: %d(0x%x) (%s)",  v16,  v17,  v18,  v19,  v20,  v21,  (uint64_t)"load");
    }
  }

  return result;
}

void ctu::fs::memory_mapped_file::~memory_mapped_file(ctu::fs::memory_mapped_file *this)
{
}

{
  ctu::fs::memory_mapped_file::unload(this);
}

uint64_t ctu::fs::memory_mapped_file::unload(ctu::fs::memory_mapped_file *this)
{
  int v2 = (void *)*((void *)this + 5);
  if (v2) {
    BOOL v3 = v2 == (void *)0xFFFFFFFFLL;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3 && munmap(v2, *((unsigned int *)this + 8)))
  {
    int v4 = __error();
    strerror(*v4);
    _TelephonyUtilDebugPrint( (uint64_t)"unload",  (uint64_t)"%s: Failed to unmap, error: %d(0x%x) (%s)",  v5,  v6,  v7,  v8,  v9,  v10,  (uint64_t)"unload");
  }

  uint64_t result = *((unsigned int *)this + 7);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = close(result);
    if ((_DWORD)result)
    {
      __error();
      __error();
      uint64_t v12 = __error();
      strerror(*v12);
      uint64_t result = _TelephonyUtilDebugPrint( (uint64_t)"unload",  (uint64_t)"%s: Failed to close a file: %s, error: %d(0x%x) (%s)",  v13,  v14,  v15,  v16,  v17,  v18,  (uint64_t)"unload");
    }

    *((_DWORD *)this + 7) = -1;
  }

  return result;
}

uint64_t ctu::fs::memory_mapped_file::getIOFlags(ctu::fs::memory_mapped_file *this)
{
  int v1 = *((_DWORD *)this + 6);
  if (v1 == 3) {
    return 2LL;
  }
  else {
    return v1 == 2;
  }
}

uint64_t ctu::fs::memory_mapped_file::getProtectionFlags(ctu::fs::memory_mapped_file *this)
{
  return *((_DWORD *)this + 6) & 3;
}

uint64_t ctu::fs::write_to_completion(ctu::fs *this, char *__buf, size_t __nbyte)
{
  if (!__nbyte) {
    return 1LL;
  }
  size_t v3 = __nbyte;
  int v5 = (int)this;
  while (1)
  {
    ssize_t v6 = write(v5, __buf, v3);
    if (v6 < 0) {
      break;
    }
    __buf += v6;
    v3 -= v6;
    if (!v3) {
      return 1LL;
    }
  }

  __error();
  __error();
  uint64_t v8 = __error();
  strerror(*v8);
  _TelephonyUtilDebugPrint( (uint64_t)"write_to_completion",  (uint64_t)"%s: Failed to write, error: %d(0x%x) (%s)",  v9,  v10,  v11,  v12,  v13,  v14,  (uint64_t)"write_to_completion");
  return 0LL;
}

uint64_t ctu::fs::open_file(const char *a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v4 = open(a1, a3, a4);
  if ((v4 & 0x80000000) != 0)
  {
    __error();
    __error();
    int v5 = __error();
    strerror(*v5);
    _TelephonyUtilDebugPrint( (uint64_t)"open_file",  (uint64_t)"%s: Failed to open the file: %s, error: %d(0x%x) (%s)",  v6,  v7,  v8,  v9,  v10,  v11,  (uint64_t)"open_file");
  }

  return v4;
}

BOOL ctu::fs::close_file(ctu::fs *this)
{
  int v1 = (int)this;
  do
  {
    int v2 = close(v1);
    if (!v2) {
      break;
    }
    __error();
    __error();
    size_t v3 = __error();
    strerror(*v3);
    _TelephonyUtilDebugPrint( (uint64_t)"close_file",  (uint64_t)"%s: Failed to close a file, error: %d(0x%x) (%s)",  v4,  v5,  v6,  v7,  v8,  v9,  (uint64_t)"close_file");
  }

  while (*__error() == 4);
  return v2 == 0;
}

BOOL ctu::fs::copy_file(const char *a1, uint64_t a2, const char *a3, uint64_t a4, int a5)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  size_t v8 = strlen(a1);
  uint64_t v9 = ctu::fs::open_file(a1, v8, 0, 0x1A4u);
  if ((v9 & 0x80000000) != 0) {
    return 0LL;
  }
  uint64_t v10 = (ctu::fs *)v9;
  size_t v11 = strlen(a3);
  uint64_t v12 = ctu::fs::open_file(a3, v11, 514, 0x1A4u);
  if ((v12 & 0x80000000) != 0)
  {
    int v16 = 0;
  }

  else
  {
    uint64_t v13 = (ctu::fs *)v12;
    while (1)
    {
      memset(__b, 170, sizeof(__b));
      ssize_t v14 = read((int)v10, __b, 0x400uLL);
      if (v14 < 0)
      {
        __error();
        __error();
        uint64_t v17 = __error();
        strerror(*v17);
        _TelephonyUtilDebugPrint( (uint64_t)"copy_file",  (uint64_t)"%s: Failed to read the file: %s, error: %d(0x%x) (%s)",  v18,  v19,  v20,  v21,  v22,  v23,  (uint64_t)"copy_file");
LABEL_16:
        int v16 = 0;
        goto LABEL_17;
      }

      if (!v14) {
        break;
      }
      if ((ctu::fs::write_to_completion(v13, __b, v14) & 1) == 0) {
        goto LABEL_16;
      }
    }

    if (a5)
    {
      *(void *)&__int128 v24 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&__b[112] = v24;
      *(_OWORD *)&__b[128] = v24;
      *(_OWORD *)&__b[80] = v24;
      *(_OWORD *)&__b[96] = v24;
      *(_OWORD *)&__b[48] = v24;
      *(_OWORD *)&__b[64] = v24;
      *(_OWORD *)&__b[16] = v24;
      *(_OWORD *)&__b[32] = v24;
      *(_OWORD *)__b = v24;
      if (fstat((int)v10, (stat *)__b))
      {
        __error();
        __error();
        uint64_t v25 = __error();
        strerror(*v25);
        _TelephonyUtilDebugPrint( (uint64_t)"copy_file",  (uint64_t)"%s: Failed to get stats the source file: %s, error: %d(0x%x) (%s)",  v26,  v27,  v28,  v29,  v30,  v31,  (uint64_t)"copy_file");
        goto LABEL_16;
      }

      if (fchmod((int)v13, *(mode_t *)&__b[4]))
      {
        __error();
        __error();
        int v32 = __error();
        strerror(*v32);
        _TelephonyUtilDebugPrint( (uint64_t)"copy_file",  (uint64_t)"%s: Failed to change mode the destination file: %s, error: %d(0x%x) (%s)",  v33,  v34,  v35,  v36,  v37,  v38,  (uint64_t)"copy_file");
        goto LABEL_16;
      }
    }

    int v16 = 1;
LABEL_17:
    ctu::fs::close_file(v13);
  }

  ctu::fs::close_file(v10);
  return v16 != 0;
}

BOOL ctu::fs::load_file(void *a1, size_t a2, unint64_t *a3)
{
  __b[72] = *MEMORY[0x1895F89C0];
  memset(__b, 170, 0x240uLL);
  if (a1)
  {
    std::string::basic_string[abi:ne180100](__p, a1, a2);
  }

  else
  {
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v33 = 0LL;
  }

  uint64_t v6 = MEMORY[0x189614748];
  uint64_t v7 = MEMORY[0x189614748] + 64LL;
  size_t v8 = (void *)MEMORY[0x189614720];
  uint64_t v9 = *(void *)(MEMORY[0x189614720] + 8LL);
  uint64_t v10 = *(void *)(MEMORY[0x189614720] + 16LL);
  __b[53] = MEMORY[0x189614748] + 64LL;
  __b[0] = v9;
  *(void *)((char *)__b + *(void *)(v9 - 24)) = v10;
  __b[1] = 0LL;
  size_t v11 = (std::ios_base *)((char *)__b + *(void *)(__b[0] - 24LL));
  std::ios_base::init(v11, &__b[2]);
  v11[1].__vftable = 0LL;
  v11[1].__fmtflags_ = -1;
  __b[0] = v6 + 24;
  __b[53] = v7;
  MEMORY[0x186E3C05C](&__b[2]);
  if (!std::filebuf::open()) {
    std::ios_base::clear( (std::ios_base *)((char *)__b + *(void *)(__b[0] - 24LL)),  *(_DWORD *)((char *)&__b[4] + *(void *)(__b[0] - 24LL)) | 4);
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = 0LL;
  if (__b[17]
    && ((file_std::string::size_type size = ctu::fs::get_file_size((uint64_t)__b, __p), (v13 = (char *)__p[0]) != 0LL)
      ? (BOOL v14 = file_size)
      : (BOOL v14 = 0),
        v14 && !*(_DWORD *)((char *)&__b[4] + *(void *)(__b[0] - 24LL))))
  {
    unint64_t v18 = *a3;
    unint64_t v17 = a3[1];
    uint64_t v19 = (char *)(v17 - *a3);
    uint64_t v20 = (char *)((char *)__p[0] - (char *)v19);
    if (__p[0] <= v19)
    {
      if (__p[0] < v19) {
        a3[1] = (unint64_t)__p[0] + v18;
      }
    }

    else
    {
      unint64_t v21 = a3[2];
      if (v21 - v17 >= (unint64_t)v20)
      {
        bzero((void *)a3[1], (char *)__p[0] - (char *)v19);
        a3[1] = (unint64_t)&v20[v17];
      }

      else
      {
        unint64_t v22 = v21 - v18;
        uint64_t v23 = (void *)(2 * v22);
        if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v24 = (size_t)v23;
        }
        size_t v30 = v24;
        unint64_t v25 = (unint64_t)operator new(v24);
        uint64_t v29 = (char *)(v25 + v30);
        uint64_t v31 = &v13[v25];
        uint64_t v26 = &v19[v25];
        bzero(v26, (size_t)v20);
        if (v17 == v18)
        {
          unint64_t v25 = (unint64_t)v26;
        }

        else
        {
          uint64_t v27 = (char *)(~v18 + v17);
          do
          {
            char v28 = *(_BYTE *)--v17;
            (v27--)[v25] = v28;
          }

          while (v17 != v18);
          unint64_t v17 = v18;
        }

        *a3 = v25;
        a3[1] = (unint64_t)v31;
        a3[2] = (unint64_t)v29;
        if (v17) {
          operator delete((void *)v17);
        }
      }
    }

    std::istream::read();
    BOOL v15 = __b[1] == (int)v13;
    if (!std::filebuf::close()) {
      std::ios_base::clear( (std::ios_base *)((char *)__b + *(void *)(__b[0] - 24LL)),  *(_DWORD *)((char *)&__b[4] + *(void *)(__b[0] - 24LL)) | 4);
    }
  }

  else
  {
    BOOL v15 = 0LL;
  }

  __b[0] = *v8;
  *(void *)((char *)__b + *(void *)(__b[0] - 24LL)) = v8[3];
  MEMORY[0x186E3C068](&__b[2]);
  std::istream::~istream();
  MEMORY[0x186E3C284](&__b[53]);
  return v15;
}

void sub_1865E727C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

BOOL ctu::fs::get_file_size(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2)
  {
    std::istream::tellg();
    std::istream::seekg();
    std::istream::tellg();
    *a2 = v5;
    std::istream::seekg();
  }

  return v2 != 0;
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x189614720];
  uint64_t v3 = *MEMORY[0x189614720];
  *a1 = *MEMORY[0x189614720];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x186E3C068](a1 + 2);
  std::istream::~istream();
  MEMORY[0x186E3C284](a1 + 53);
  return a1;
}

BOOL ctu::fs::get_file_size(uint64_t a1, uint64_t a2, void *a3)
{
  v13[70] = *MEMORY[0x1895F89C0];
  if (!a2) {
    return 0LL;
  }
  memset(v13, 170, 0x230uLL);
  uint64_t v4 = MEMORY[0x189614748];
  uint64_t v5 = (void *)MEMORY[0x189614720];
  uint64_t v6 = MEMORY[0x189614748] + 64LL;
  uint64_t v7 = *(void *)(MEMORY[0x189614720] + 8LL);
  uint64_t v8 = *(void *)(MEMORY[0x189614720] + 16LL);
  v13[51] = MEMORY[0x189614748] + 64LL;
  v12[0] = v7;
  *(void *)((char *)v12 + *(void *)(v7 - 24)) = v8;
  v12[1] = 0LL;
  uint64_t v9 = (std::ios_base *)((char *)v12 + *(void *)(v12[0] - 24LL));
  std::ios_base::init(v9, v13);
  v9[1].__vftable = 0LL;
  v9[1].__fmtflags_ = -1;
  v12[0] = v4 + 24;
  v13[51] = v6;
  MEMORY[0x186E3C05C](v13);
  if (!std::filebuf::open()) {
    std::ios_base::clear( (std::ios_base *)((char *)v12 + *(void *)(v12[0] - 24LL)),  *(_DWORD *)((char *)&v13[2] + *(void *)(v12[0] - 24LL)) | 4);
  }
  if (v13[15])
  {
    file_std::string::size_type size = ctu::fs::get_file_size((uint64_t)v12, a3);
    if (!std::filebuf::close()) {
      std::ios_base::clear( (std::ios_base *)((char *)v12 + *(void *)(v12[0] - 24LL)),  *(_DWORD *)((char *)&v13[2] + *(void *)(v12[0] - 24LL)) | 4);
    }
  }

  else
  {
    file_std::string::size_type size = 0LL;
  }

  v12[0] = *v5;
  *(void *)((char *)v12 + *(void *)(v12[0] - 24LL)) = v5[3];
  MEMORY[0x186E3C068](v13);
  std::istream::~istream();
  MEMORY[0x186E3C284](&v13[51]);
  return file_size;
}

void sub_1865E7590(_Unwind_Exception *a1)
{
}

void ctu::fs::get_base_name(void *a1@<X0>, size_t a2@<X1>, std::string *a3@<X8>)
{
  if (a1) {
    std::string::basic_string[abi:ne180100](&__p, a1, a2);
  }
  else {
    memset(&__p, 0, sizeof(__p));
  }
  ctu::tokenize(&__p, 47, 0LL, v6);
  if (*(char *)(v6[1] - 1) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v6[1] - 24), *(void *)(v6[1] - 16));
  }

  else
  {
    __int128 v4 = *(_OWORD *)(v6[1] - 24);
    a3->__r_.__value_.__l.__cap_ = *(void *)(v6[1] - 8);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v4;
  }

  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1865E7688( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::string __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void ctu::fs::get_unique_filename(void *a1@<X0>, size_t a2@<X1>, void *a3@<X8>)
{
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v82[16] = v6;
  *(_OWORD *)&v82[32] = v6;
  __int128 v81 = v6;
  *(_OWORD *)v82 = v6;
  std::regex_traits<char>::regex_traits((std::regex_traits<char> *)&v81);
  memset(&v82[8], 0, 40);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>( (uint64_t)&v81,  "^([/_\\-[:alnum:]]*)(.*)",  "") != "") {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  }
  memset(v80, 170, sizeof(v80));
  ctu::fs::get_dir_name(a1, a2, (uint64_t)v80);
  memset(&v79, 170, sizeof(v79));
  ctu::fs::get_base_name(a1, a2, &v79);
  memset(&v78, 170, sizeof(v78));
  else {
    std::string v78 = v79;
  }
  v71 = a3;
  unsigned int i = 0;
  while (1)
  {
    int v8 = SHIBYTE(v80[2]);
    if (SHIBYTE(v80[2]) >= 0) {
      size_t v9 = HIBYTE(v80[2]);
    }
    else {
      size_t v9 = (size_t)v80[1];
    }
    memset(v85, 170, 24);
    std::string::basic_string[abi:ne180100]((uint64_t)v85, v9 + 1);
    else {
      first = (char *)v85[0].first;
    }
    if (v9)
    {
      if (v8 >= 0) {
        size_t v11 = v80;
      }
      else {
        size_t v11 = (void **)v80[0];
      }
      memmove(first, v11, v9);
    }

    *(_WORD *)&first[v9] = 47;
    if ((v78.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v12 = &v78;
    }
    else {
      uint64_t v12 = (std::string *)v78.__r_.__value_.__r.__words[0];
    }
    if ((v78.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v78.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v78.__r_.__value_.__l.__size_;
    }
    BOOL v14 = std::string::append((std::string *)v85, (const std::string::value_type *)v12, size);
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    __p.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&__p.__begin_.__i_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    if (SHIBYTE(__p.__pregex_) >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = __p.__begin_.__i_;
    }
    v17.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v17.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&v84.st_blkstd::string::size_type size = v17;
    *(timespec *)v84.st_qspare = v17;
    v84.st_birthtimespec = v17;
    *(timespec *)&v84.st_std::string::size_type size = v17;
    v84.st_mtimespec = v17;
    v84.st_ctimespec = v17;
    *(timespec *)&v84.st_uid = v17;
    v84.st_atimespec = v17;
    *(timespec *)&v84.st_dev = v17;
    int v18 = stat(p_p, &v84);
    if (SHIBYTE(__p.__pregex_) < 0) {
      operator delete((void *)__p.__begin_.__i_);
    }
    if (v18)
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( (const void **)v80,  (const void **)&v78.__r_.__value_.__l.__data_,  v71);
      goto LABEL_128;
    }

    std::string::size_type v19 = v78.__r_.__value_.__s.__size_;
    if ((v78.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v20 = &v78;
    }
    else {
      uint64_t v20 = (std::string *)v78.__r_.__value_.__r.__words[0];
    }
    if ((v78.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v19 = v78.__r_.__value_.__l.__size_;
    }
    *(void *)&__int128 v21 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v84.st_birthtimespec.uint64_t tv_nsec = v21;
    v84.st_ctimespec.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v84.st_atimespec.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    memset(&v84.st_mtimespec, 0, 17);
    memset(&v84.st_ctimespec.tv_nsec, 0, 17);
    LOBYTE(v84.st_size) = 0;
    v84.st_blocks = 0LL;
    memset(&v84, 0, 41);
    int v22 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>( (const char *)v20,  (const char *)v20 + v19,  (uint64_t)&v84,  (uint64_t)&v81);
    if (*(void *)&v84.st_dev) {
      operator delete(*(void **)&v84.st_dev);
    }
    if (!v22) {
      break;
    }
    ++i;
    memset(v77, 170, 24);
    std::to_string((std::string *)&__p, i);
    uint64_t v23 = std::string::insert((std::string *)&__p, 0LL, "$1-", 3uLL);
    __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(void *)&v84.st_uid = v23->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v84.st_dev = v24;
    v23->__r_.__value_.__l.__size_ = 0LL;
    v23->__r_.__value_.__l.__cap_ = 0LL;
    v23->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v25 = std::string::append((std::string *)&v84, "$2", 2uLL);
    __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v77[2] = (void *)v25->__r_.__value_.__l.__cap_;
    *(_OWORD *)v77 = v26;
    v25->__r_.__value_.__l.__size_ = 0LL;
    v25->__r_.__value_.__l.__cap_ = 0LL;
    v25->__r_.__value_.__r.__words[0] = 0LL;
    if (SHIBYTE(v84.st_gid) < 0) {
      operator delete(*(void **)&v84.st_dev);
    }
    if (SHIBYTE(__p.__pregex_) < 0) {
      operator delete((void *)__p.__begin_.__i_);
    }
    memset(&v76, 0, sizeof(v76));
    if ((v79.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v27 = &v79;
    }
    else {
      uint64_t v27 = (std::string *)v79.__r_.__value_.__r.__words[0];
    }
    if ((v79.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v28 = v79.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v28 = v79.__r_.__value_.__l.__size_;
    }
    uint64_t v29 = v77;
    if (SHIBYTE(v77[2]) < 0) {
      uint64_t v29 = (void **)v77[0];
    }
    __s = (char *)v29;
    *(void *)&__int128 v30 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v84.st_gen = v30;
    v84.st_std::string::size_type size = 0xAAAAAAAAAAAAAAAALL;
    v84.st_ctimespec.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(&v84.st_rdev + 1) = -1431655766;
    *(void *)&v84.st_dev = v27;
    v84.st_ino = (__darwin_ino64_t)v27 + v28;
    *(void *)&v84.st_uid = &v81;
    v84.dev_t st_rdev = 0;
    memset(&v84.st_birthtimespec, 0, 17);
    memset(&v84.st_blocks, 0, 17);
    LOBYTE(v84.st_qspare[0]) = 0;
    v84.st_qspare[1] = 0LL;
    memset(&v84.st_atimespec, 0, 41);
    *(_OWORD *)&__p.__match_.__prefix_.second.__i_ = v30;
    __p.__match_.__unmatched_.second.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
    __p.__match_.__matches_.__end_ = (std::vector<std::ssub_match>::pointer)0xAAAAAAAAAAAAAAAALL;
    memset(&__p.__match_.__matches_.__end_cap_, 0, 17);
    memset(&__p.__match_.__unmatched_.matched, 0, 17);
    __p.__match_.__prefix_.matched = 0;
    __p.__match_.__suffix_.first.__i_ = 0LL;
    memset(&__p, 0, 41);
    std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>( (uint64_t)&v81,  (const char *)v27,  (const char *)v27 + v28,  (std::vector<std::csub_match>::value_type *)&__p,  0);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>( (uint64_t)&v84.st_atimespec,  (uint64_t)v27,  (uint64_t)v27 + v28,  (uint64_t *)&__p,  0);
    if (__p.__begin_.__i_) {
      operator delete((void *)__p.__begin_.__i_);
    }
    *(void *)&__int128 v31 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v31 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&__p.__match_.__suffix_.matched = v31;
    *(void *)&__p.__match_.__prefix_.matched = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__p.__match_.__unmatched_.matched = 0xAAAAAAAAAAAAAAAALL;
    *((_DWORD *)&__p.__flags_ + 1) = -1431655766;
    memset(&__p.__match_.__prefix_, 0, 17);
    memset(&__p.__match_.__suffix_, 0, 17);
    __p.__match_.__ready_ = 0;
    __p.__match_.__position_start_.__i_ = 0LL;
    memset(&__p.__match_, 0, 41);
    memset(&__p, 0, 28);
    if (std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==( (const std::regex_iterator<std::__wrap_iter<const char *>, char> *)&v84,  &__p))
    {
      for (; v28; --v28)
      {
        std::string::push_back(&v76, v27->__r_.__value_.__s.__data_[0]);
        uint64_t v27 = (std::string *)((char *)v27 + 1);
      }

      goto LABEL_120;
    }

    unsigned int v72 = i;
    int v32 = 0LL;
    st_blocks = 0LL;
    size_t v74 = strlen(__s);
    uint64_t v34 = (unsigned __int8 *)&__s[v74];
    while (!std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==( (const std::regex_iterator<std::__wrap_iter<const char *>, char> *)&v84,  &__p))
    {
      __darwin_time_t tv_sec = v84.st_birthtimespec.tv_sec;
      uint64_t tv_nsec = v84.st_birthtimespec.tv_nsec;
      if (v84.st_birthtimespec.tv_sec != v84.st_birthtimespec.tv_nsec)
      {
        uint64_t v37 = (std::string::value_type *)v84.st_birthtimespec.tv_sec;
        do
          std::string::push_back(&v76, *v37++);
        while (v37 != (std::string::value_type *)tv_nsec);
      }

      uint64_t v38 = (char *)v84.st_atimespec.tv_sec;
      if (v74)
      {
        int v32 = *(std::string::value_type **)&v84.st_blksize;
        st_blocks = (std::string::value_type *)v84.st_blocks;
        uint64_t v39 = v84.st_atimespec.tv_nsec;
        unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * ((v84.st_atimespec.tv_nsec - v84.st_atimespec.tv_sec) >> 3);
        uint64_t v40 = (unsigned __int8 *)__s;
        while (1)
        {
          int v41 = *v40;
          if (v41 == 36)
          {
            unint64_t v42 = v40 + 1;
            if (v40 + 1 != v34)
            {
              int v43 = (char)*v42;
              int v41 = *v42;
              if (v43 > 38)
              {
                if (v43 == 39)
                {
                  if (st_blocks != v32)
                  {
                    __int128 v57 = st_blocks;
                    do
                      std::string::push_back(&v76, *v57++);
                    while (v57 != v32);
                  }

                  goto LABEL_94;
                }

                if (v43 == 96)
                {
                  if (tv_sec != tv_nsec)
                  {
                    unint64_t v46 = (std::string::value_type *)tv_sec;
                    do
                      std::string::push_back(&v76, *v46++);
                    while (v46 != (std::string::value_type *)tv_nsec);
                  }

                  goto LABEL_94;
                }
              }

              else
              {
                if (v43 == 36)
                {
                  ++v40;
                  goto LABEL_93;
                }

                if (v43 == 38)
                {
                  unint64_t v45 = *(std::string::value_type **)v38;
                  __int128 v44 = (std::string::value_type *)*((void *)v38 + 1);
                  while (v45 != v44)
                    std::string::push_back(&v76, *v45++);
                  goto LABEL_94;
                }
              }

              if ((v41 - 48) <= 9)
              {
                unint64_t v47 = *v42 - 48LL;
                if (v40 + 2 != v34)
                {
                  uint64_t v48 = v40[2];
                  unsigned int v49 = v48 - 48;
                  uint64_t v50 = v48 + 10LL * (int)v47 - 48;
                  if (v49 > 9)
                  {
                    unint64_t v42 = v40 + 1;
                  }

                  else
                  {
                    unint64_t v47 = v50;
                    unint64_t v42 = v40 + 2;
                  }
                }

                __int128 v51 = &v38[24 * (int)v47];
                BOOL v52 = v75 > v47;
                p_uint64_t tv_nsec = &v84.st_mtimespec.tv_nsec;
                if (v52) {
                  p_uint64_t tv_nsec = (uint64_t *)v51;
                }
                unint64_t v54 = (std::string::value_type *)*p_tv_nsec;
                p_st_ctimespec = (timespec *)(v51 + 8);
                if (!v52) {
                  p_st_ctimespec = &v84.st_ctimespec;
                }
                unint64_t v56 = (std::string::value_type *)p_st_ctimespec->tv_sec;
                while (v54 != v56)
                  std::string::push_back(&v76, *v54++);
                goto LABEL_94;
              }
            }

            LOBYTE(v41) = 36;
          }

LABEL_93:
          std::string::push_back(&v76, v41);
          unint64_t v42 = v40;
LABEL_94:
          uint64_t v40 = v42 + 1;
          if (v42 + 1 == v34) {
            goto LABEL_101;
          }
        }
      }

      int v32 = *(std::string::value_type **)&v84.st_blksize;
      st_blocks = (std::string::value_type *)v84.st_blocks;
      uint64_t v39 = v84.st_atimespec.tv_nsec;
LABEL_101:
      dev_t st_rdev = v84.st_rdev;
      int v59 = v84.st_rdev | 0x800;
      v84.st_rdev |= 0x800u;
      v60 = &v84.st_mtimespec.tv_nsec;
      unint64_t v61 = (timespec *)(v38 + 8);
      unint64_t v62 = (const char *)v61->tv_sec;
      st_ino = (const char *)v84.st_ino;
      if (*v60 != v61->tv_sec) {
        goto LABEL_106;
      }
      if ((const char *)v84.st_ino == v62)
      {
LABEL_115:
        if (v38) {
          operator delete(v38);
        }
        LOBYTE(v84.st_qspare[0]) = 0;
        memset(&v84.st_atimespec, 0, 41);
        memset(&v84.st_birthtimespec, 0, 17);
        memset(&v84.st_blocks, 0, 17);
        v84.st_qspare[1] = 0LL;
      }

      else
      {
        *(void *)&__int128 v66 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v66 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __int128 v91 = v66;
        unint64_t v88 = 0xAAAAAAAAAAAAAA00LL;
        *(void *)&v85[1].matched = 0xAAAAAAAAAAAAAAAALL;
        uint64_t v86 = 0LL;
        uint64_t v87 = 0LL;
        uint64_t v89 = 0LL;
        uint64_t v90 = 0LL;
        LOBYTE(v91) = 0;
        BYTE8(v91) = 0;
        uint64_t v92 = 0LL;
        memset(v85, 0, 41);
        char v67 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>( *(uint64_t *)&v84.st_uid,  v62,  (const char *)v84.st_ino,  v85,  st_rdev | 0x860u);
        std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>( (uint64_t)&v84.st_atimespec,  (uint64_t)v62,  (uint64_t)st_ino,  (uint64_t *)v85,  1);
        if (v85[0].first) {
          operator delete((void *)v85[0].first);
        }
        if ((v67 & 1) == 0)
        {
          ++v62;
          int v59 = v84.st_rdev;
          st_ino = (const char *)v84.st_ino;
LABEL_106:
          v84.dev_t st_rdev = v59 | 0x80;
          *(void *)&__int128 v64 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v64 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __int128 v91 = v64;
          unint64_t v88 = 0xAAAAAAAAAAAAAA00LL;
          *(void *)&v85[1].matched = 0xAAAAAAAAAAAAAAAALL;
          uint64_t v86 = 0LL;
          uint64_t v87 = 0LL;
          uint64_t v89 = 0LL;
          uint64_t v90 = 0LL;
          LOBYTE(v91) = 0;
          BYTE8(v91) = 0;
          uint64_t v92 = 0LL;
          memset(v85, 0, 41);
          char v65 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>( *(uint64_t *)&v84.st_uid,  v62,  st_ino,  v85,  v59 | 0x80u);
          std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>( (uint64_t)&v84.st_atimespec,  (uint64_t)v62,  (uint64_t)st_ino,  (uint64_t *)v85,  (v59 & 0x800) != 0);
          if (v85[0].first) {
            operator delete((void *)v85[0].first);
          }
          if ((v65 & 1) == 0)
          {
            uint64_t v38 = (char *)v84.st_atimespec.tv_sec;
            goto LABEL_115;
          }
        }
      }
    }

    for (unsigned int i = v72; st_blocks != v32; ++st_blocks)
      std::string::push_back(&v76, *st_blocks);
LABEL_120:
    if (v84.st_atimespec.tv_sec) {
      operator delete((void *)v84.st_atimespec.tv_sec);
    }
    std::string v78 = v76;
    if (SHIBYTE(v77[2]) < 0) {
      operator delete(v77[0]);
    }
  }

  std::string::basic_string[abi:ne180100]<0>(v71, "");
LABEL_128:
  if (SHIBYTE(v80[2]) < 0) {
    operator delete(v80[0]);
  }
  v68 = *(std::__shared_weak_count **)&v82[32];
  if (*(void *)&v82[32])
  {
    v69 = (unint64_t *)(*(void *)&v82[32] + 8LL);
    do
      unint64_t v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }

  std::locale::~locale((std::locale *)&v81);
}

void sub_1865E80C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, void *a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, void *__p, uint64_t a46, int a47, __int16 a48, char a49, char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,std::locale a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  std::locale::~locale(&a57);
  _Unwind_Resume(a1);
}

void ctu::fs::get_dir_name(void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  v14[0] = (uint64_t)a1;
  v14[1] = a2;
  if (a2)
  {
    *(void *)a3 = 0LL;
    *(void *)(a3 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
    *(void *)(a3 + 16) = 0LL;
    memset(&__p, 170, sizeof(__p));
    ctu::fs::get_base_name(a1, a2, &__p);
    unsigned __int8 size = __p.__r_.__value_.__s.__size_;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v8 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v8 = __p.__r_.__value_.__l.__size_;
    }
    size_t v9 = ctu::llvm::StringRef::rfind(v14, p_p, v8);
    if (v9 != -1LL)
    {
      if (a1)
      {
        if (v9 >= a2) {
          size_t v10 = a2;
        }
        else {
          size_t v10 = v9;
        }
        std::string::basic_string[abi:ne180100](&v11, a1, v10);
        unsigned __int8 size = __p.__r_.__value_.__s.__size_;
      }

      else
      {
        __int128 v11 = 0uLL;
        uint64_t v12 = 0LL;
      }

      *(_OWORD *)a3 = v11;
      *(void *)(a3 + 16) = v12;
    }

    if ((size & 0x80) != 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }

  else if (a1)
  {
    *(_BYTE *)(a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
  }

  else
  {
    *(void *)a3 = 0LL;
    *(void *)(a3 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
    *(void *)(a3 + 16) = 0LL;
  }

void sub_1865E8314( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>( const void **a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  else {
    size_t v5 = (size_t)a1[1];
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  memset(a3, 170, 24);
  uint64_t result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v6 + v5);
  else {
    size_t v8 = *(char **)result;
  }
  if (v5)
  {
    else {
      size_t v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }

  size_t v10 = &v8[v5];
  if (v6)
  {
    else {
      __int128 v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }

  v10[v6] = 0;
  return result;
}

void *ctu::fs::get_unique_pathname@<X0>(char *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  v6.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v19.st_blkunsigned __int8 size = v6;
  *(timespec *)v19.st_qspare = v6;
  v19.st_birthtimespec = v6;
  *(timespec *)&v19.st_unsigned __int8 size = v6;
  v19.st_mtimespec = v6;
  v19.st_ctimespec = v6;
  *(timespec *)&v19.st_uid = v6;
  v19.st_atimespec = v6;
  *(timespec *)&v19.st_dev = v6;
  uint64_t result = (void *)stat(a1, &v19);
  if ((_DWORD)result)
  {
    if (a1)
    {
      return std::string::basic_string[abi:ne180100]((void *)a3, a1, a2);
    }

    else
    {
      *(void *)a3 = 0LL;
      *(void *)(a3 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
      *(void *)(a3 + 16) = 0LL;
    }
  }

  else
  {
    for (int i = 1; ; ++i)
    {
      v9.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v9.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      timespec v25 = v9;
      timespec v26 = v9;
      timespec v23 = v9;
      timespec v24 = v9;
      timespec v21 = v9;
      timespec v22 = v9;
      *(timespec *)v19.st_qspare = v9;
      timespec v20 = v9;
      *(timespec *)&v19.st_unsigned __int8 size = v9;
      *(timespec *)&v19.st_blkunsigned __int8 size = v9;
      v19.st_ctimespec = v9;
      v19.st_birthtimespec = v9;
      v19.st_atimespec = v9;
      v19.st_mtimespec = v9;
      *(timespec *)&v19.st_dev = v9;
      *(timespec *)&v19.st_uid = v9;
      snprintf((char *)&v19, 0x100uLL, "-%u", i);
      memset((void *)a3, 170, 24);
      if (a1) {
        std::string::basic_string[abi:ne180100](&__dst, a1, a2);
      }
      else {
        memset(&__dst, 0, 24);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&v19);
      if ((v17 & 0x80u) == 0) {
        size_t v10 = __p;
      }
      else {
        size_t v10 = (void **)__p[0];
      }
      if ((v17 & 0x80u) == 0) {
        std::string::size_type v11 = v17;
      }
      else {
        std::string::size_type v11 = (std::string::size_type)__p[1];
      }
      uint64_t v12 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v10, v11);
      __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      *(void *)(a3 + 16) = v12->__r_.__value_.__l.__cap_;
      *(_OWORD *)a3 = v13;
      v12->__r_.__value_.__l.__size_ = 0LL;
      v12->__r_.__value_.__l.__cap_ = 0LL;
      v12->__r_.__value_.__r.__words[0] = 0LL;
      if (SHIBYTE(__dst.st_gid) < 0) {
        operator delete(*(void **)&__dst.st_dev);
      }
      BOOL v14 = *(char *)(a3 + 23) >= 0 ? (const char *)a3 : *(const char **)a3;
      v15.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v15.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blkunsigned __int8 size = v15;
      *(timespec *)__dst.st_qspare = v15;
      __dst.st_birthtimespec = v15;
      *(timespec *)&__dst.st_unsigned __int8 size = v15;
      __dst.st_mtimespec = v15;
      __dst.st_ctimespec = v15;
      *(timespec *)&__dst.st_uid = v15;
      __dst.st_atimespec = v15;
      *(timespec *)&__dst.st_dev = v15;
      uint64_t result = (void *)stat(v14, &__dst);
      if ((_DWORD)result) {
        break;
      }
    }
  }

  return result;
}

void sub_1865E85E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

uint64_t ctu::fs::remove_file(const char *a1)
{
  if (!remove(a1)) {
    return 1LL;
  }
  __error();
  __error();
  uint64_t v2 = __error();
  strerror(*v2);
  _TelephonyUtilDebugPrint( (uint64_t)"remove_file",  (uint64_t)"%s: Failed to remove the file: %s, error: %d(0x%x) (%s)",  v3,  v4,  v5,  v6,  v7,  v8,  (uint64_t)"remove_file");
  if (!unlink(a1)) {
    return 1LL;
  }
  __error();
  __error();
  timespec v9 = __error();
  strerror(*v9);
  _TelephonyUtilDebugPrint( (uint64_t)"remove_file",  (uint64_t)"%s: Failed to unlink the file: %s, error: %d(0x%x) (%s)",  v10,  v11,  v12,  v13,  v14,  v15,  (uint64_t)"remove_file");
  return 0LL;
}

uint64_t ctu::fs::remove_dir(char *a1, size_t a2)
{
  v4.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v6.st_blkunsigned __int8 size = v4;
  *(timespec *)v6.st_qspare = v4;
  v6.st_birthtimespec = v4;
  *(timespec *)&v6.st_unsigned __int8 size = v4;
  v6.st_mtimespec = v4;
  v6.st_ctimespec = v4;
  *(timespec *)&v6.st_uid = v4;
  v6.st_atimespec = v4;
  *(timespec *)&v6.st_dev = v4;
  if (stat(a1, &v6)) {
    return 1LL;
  }
  uint64_t result = ctu::fs::remove_directory_contents(a1, a2);
  if ((_DWORD)result) {
    return ctu::fs::remove_file(a1);
  }
  return result;
}

uint64_t ctu::fs::remove_directory_contents(char *a1, size_t a2)
{
  uint64_t v36 = 0LL;
  uint64_t v37 = 0LL;
  uint64_t v38 = 0LL;
  *(void *)&v39.st_dev = MEMORY[0x1895F87A8];
  v39.st_ino = 0x40000000LL;
  *(void *)&v39.st_uid = ___ZN3ctu2fs11read_folderENS_4llvm9StringRefERNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEb_block_invoke;
  *(void *)&v39.dev_t st_rdev = &__block_descriptor_tmp_11;
  LOBYTE(v39.st_atimespec.tv_nsec) = 1;
  v39.st_atimespec.__darwin_time_t tv_sec = (__darwin_time_t)&v36;
  ctu::fs::iterate_folder(a1, a2, (uint64_t)&v39);
  uint64_t v4 = v37;
  if (v36 != v37)
  {
    uint64_t v5 = v36 + 24;
    char v6 = 1;
    while (1)
    {
      memset(&v35, 170, sizeof(v35));
      if (*(char *)(v5 - 1) < 0)
      {
        std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(v5 - 24), *(void *)(v5 - 16));
      }

      else
      {
        __int128 v7 = *(_OWORD *)(v5 - 24);
        v35.__r_.__value_.__l.__cap_ = *(void *)(v5 - 8);
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v7;
      }

      std::string::size_type size = v35.__r_.__value_.__s.__size_;
      if ((v35.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        std::string::size_type size = v35.__r_.__value_.__l.__size_;
      }
      if (size == 2)
      {
        if ((v35.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v10 = &v35;
        }
        else {
          uint64_t v10 = (std::string *)v35.__r_.__value_.__r.__words[0];
        }
        if (LOWORD(v10->__r_.__value_.__l.__data_) == 11822) {
          goto LABEL_66;
        }
      }

      else if (size == 1)
      {
        timespec v9 = (v35.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v35 : (std::string *)v35.__r_.__value_.__r.__words[0];
        if (v9->__r_.__value_.__s.__data_[0] == 46) {
          goto LABEL_66;
        }
      }

      memset(__p, 170, 24);
      if (a1) {
        std::string::basic_string[abi:ne180100](&__dst, a1, a2);
      }
      else {
        memset(&__dst, 0, sizeof(__dst));
      }
      uint64_t v11 = std::string::append(&__dst, "/", 1uLL);
      __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      *(void *)&v39.st_uid = v11->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v39.st_dev = v12;
      v11->__r_.__value_.__l.__size_ = 0LL;
      v11->__r_.__value_.__l.__cap_ = 0LL;
      v11->__r_.__value_.__r.__words[0] = 0LL;
      if ((v35.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v13 = &v35;
      }
      else {
        uint64_t v13 = (std::string *)v35.__r_.__value_.__r.__words[0];
      }
      if ((v35.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v14 = v35.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v14 = v35.__r_.__value_.__l.__size_;
      }
      uint64_t v15 = std::string::append((std::string *)&v39, (const std::string::value_type *)v13, v14);
      __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      __p[2] = (void *)v15->__r_.__value_.__l.__cap_;
      *(_OWORD *)std::string __p = v16;
      v15->__r_.__value_.__l.__size_ = 0LL;
      v15->__r_.__value_.__l.__cap_ = 0LL;
      v15->__r_.__value_.__r.__words[0] = 0LL;
      if (SHIBYTE(v39.st_gid) < 0) {
        operator delete(*(void **)&v39.st_dev);
      }
      if (SHIBYTE(__p[2]) >= 0) {
        unsigned __int8 v17 = __p;
      }
      else {
        unsigned __int8 v17 = (void **)__p[0];
      }
      v18.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v18.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&v39.st_blkstd::string::size_type size = v18;
      *(timespec *)v39.st_qspare = v18;
      v39.st_birthtimespec = v18;
      *(timespec *)&v39.st_std::string::size_type size = v18;
      v39.st_mtimespec = v18;
      v39.st_ctimespec = v18;
      *(timespec *)&v39.st_uid = v18;
      v39.st_atimespec = v18;
      *(timespec *)&v39.st_dev = v18;
      if (stat((const char *)v17, &v39) || (v39.st_mode & 0xF000) != 0x4000)
      {
        if (SHIBYTE(__p[2]) >= 0) {
          stat v19 = __p;
        }
        else {
          stat v19 = (void **)__p[0];
        }
        char v20 = ctu::fs::remove_file((const char *)v19);
      }

      else
      {
        if (a1) {
          std::string::basic_string[abi:ne180100](&v32, a1, a2);
        }
        else {
          memset(&v32, 0, sizeof(v32));
        }
        timespec v21 = std::string::append(&v32, "/", 1uLL);
        __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0LL;
        v21->__r_.__value_.__l.__cap_ = 0LL;
        v21->__r_.__value_.__r.__words[0] = 0LL;
        if ((v35.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          timespec v23 = &v35;
        }
        else {
          timespec v23 = (std::string *)v35.__r_.__value_.__r.__words[0];
        }
        if ((v35.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v24 = v35.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v24 = v35.__r_.__value_.__l.__size_;
        }
        timespec v25 = std::string::append(&__dst, (const std::string::value_type *)v23, v24);
        __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        *(void *)&v39.st_uid = v25->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v39.st_dev = v26;
        v25->__r_.__value_.__l.__size_ = 0LL;
        v25->__r_.__value_.__l.__cap_ = 0LL;
        v25->__r_.__value_.__r.__words[0] = 0LL;
        if ((v39.st_gid & 0x80000000) == 0) {
          uint64_t v27 = &v39;
        }
        else {
          uint64_t v27 = *(stat **)&v39.st_dev;
        }
        if ((v39.st_gid & 0x80000000) == 0) {
          __darwin_ino64_t st_gid_high = HIBYTE(v39.st_gid);
        }
        else {
          __darwin_ino64_t st_gid_high = v39.st_ino;
        }
        char v20 = ctu::fs::remove_dir(v27, st_gid_high);
        if (SHIBYTE(v39.st_gid) < 0) {
          operator delete(*(void **)&v39.st_dev);
        }
      }

      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      char v29 = 1;
      if ((v20 & 1) == 0)
      {
        char v6 = 0;
        goto LABEL_68;
      }

      char v6 = 1;
LABEL_66:
      char v29 = 0;
LABEL_68:
      if (v5 == v4) {
        char v30 = 1;
      }
      else {
        char v30 = v29;
      }
      v5 += 24LL;
      if ((v30 & 1) != 0) {
        goto LABEL_76;
      }
    }
  }

  char v6 = 1;
LABEL_76:
  *(void *)&v39.st_dev = &v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  return v6 & 1;
}

void sub_1865E8B08( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, char *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, char a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, int a41, __int16 a42, char a43, char a44)
{
  a30 = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  _Unwind_Resume(a1);
}

uint64_t ctu::fs::rename(const char *a1, uint64_t a2, const void *a3, size_t a4)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 == 2)
  {
    if (*(_WORD *)a1 != 11822 && a4 != 0)
    {
      if (a4 == 2)
      {
LABEL_17:
        __int128 v7 = "..";
LABEL_18:
        uint64_t result = memcmp(a3, v7, a4);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_19;
      }

      if (a4 != 1)
      {
LABEL_19:
        __error();
        __error();
        timespec v9 = __error();
        strerror(*v9);
        _TelephonyUtilDebugPrint( (uint64_t)"rename",  (uint64_t)"%s: Failed to rename %s -> %s. error: %d(0x%x)(%s)",  v10,  v11,  v12,  v13,  v14,  v15,  (uint64_t)"rename");
        return 0LL;
      }

void *ctu::fs::rename_directory_unique@<X0>( const char *a1@<X0>, char *a2@<X2>, size_t a3@<X3>, void *a4@<X8>)
{
  v8.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v8.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v19.st_blkstd::string::size_type size = v8;
  *(timespec *)v19.st_qspare = v8;
  v19.st_birthtimespec = v8;
  *(timespec *)&v19.st_std::string::size_type size = v8;
  v19.st_mtimespec = v8;
  v19.st_ctimespec = v8;
  *(timespec *)&v19.st_uid = v8;
  v19.st_atimespec = v8;
  *(timespec *)&v19.st_dev = v8;
  if (stat(a1, &v19) || (v19.st_mode & 0xF000) != 0x4000) {
    return std::string::basic_string[abi:ne180100]<0>(a4, "");
  }
  ctu::fs::get_unique_pathname(a2, a3, (uint64_t)&v19);
  if ((v19.st_gid & 0x80000000) == 0) {
    timespec v9 = &v19;
  }
  else {
    timespec v9 = *(stat **)&v19.st_dev;
  }
  if ((v19.st_gid & 0x80000000) == 0) {
    __darwin_ino64_t st_gid_high = HIBYTE(v19.st_gid);
  }
  else {
    __darwin_ino64_t st_gid_high = v19.st_ino;
  }
  if (SHIBYTE(v19.st_gid) < 0) {
    operator delete(*(void **)&v19.st_dev);
  }
  uint64_t result = (void *)rename(a1, (const char *)v9);
  if ((_DWORD)result)
  {
    __error();
    __error();
    uint64_t v12 = __error();
    strerror(*v12);
    _TelephonyUtilDebugPrint( (uint64_t)"rename_directory_unique",  (uint64_t)"%s: Failed to rename %s -> %s. error: %d(0x%x)(%s)",  v13,  v14,  v15,  v16,  v17,  v18,  (uint64_t)"rename_directory_unique");
    return std::string::basic_string[abi:ne180100]<0>(a4, "");
  }

  if (v9) {
    return std::string::basic_string[abi:ne180100](a4, v9, st_gid_high);
  }
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = 0LL;
  return result;
}

BOOL ctu::fs::chmod(const char *a1, uint64_t a2, mode_t a3)
{
  int v3 = chmod(a1, a3);
  if (v3)
  {
    __error();
    __error();
    uint64_t v4 = __error();
    strerror(*v4);
    _TelephonyUtilDebugPrint( (uint64_t)"chmod",  (uint64_t)"%s: Failed to chmod %s as mode(0x%x). error: %d(0x%x)(%s)",  v5,  v6,  v7,  v8,  v9,  v10,  (uint64_t)"chmod");
  }

  return v3 == 0;
}

uint64_t ctu::fs::get_filtered_files(const char *a1, uint64_t a2, uint64_t a3, std::vector<std::string> *a4)
{
  uint64_t v6 = opendir(a1);
  if (!v6)
  {
    __error();
    __error();
    uint64_t v40 = __error();
    strerror(*v40);
    _TelephonyUtilDebugPrint( (uint64_t)"get_filtered_files",  (uint64_t)"%s: Failed to open the directory: %s, error: %d(0x%x) (%s)",  v41,  v42,  v43,  v44,  v45,  v46,  (uint64_t)"get_filtered_files");
    goto LABEL_34;
  }

  uint64_t v7 = v6;
  uint64_t v8 = readdir(v6);
  for (i = 0; v8; uint64_t v8 = readdir(v7))
  {
    d_name = v8->d_name;
    std::string::basic_string[abi:ne180100]<0>(v48, v8->d_name);
    uint64_t v11 = (const char *)HIBYTE(v49);
    if (v49 >= 0) {
      uint64_t v12 = v48;
    }
    else {
      uint64_t v12 = (void **)v48[0];
    }
    if (v49 < 0) {
      uint64_t v11 = (const char *)v48[1];
    }
    *(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v57 = v13;
    unint64_t v54 = 0xAAAAAAAAAAAAAA00LL;
    *(void *)&v51[24] = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v52 = 0LL;
    uint64_t v53 = 0LL;
    uint64_t v55 = 0LL;
    uint64_t v56 = 0LL;
    LOBYTE(v57) = 0;
    BYTE8(v57) = 0;
    uint64_t v58 = 0LL;
    *(_OWORD *)std::string __p = 0u;
    memset(v51, 0, 25);
    int v14 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>( (const char *)v12,  &v11[(void)v12],  (uint64_t)__p,  a3);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v49) < 0)
    {
      operator delete(v48[0]);
      if (v14)
      {
LABEL_14:
        std::string::basic_string[abi:ne180100]<0>(v48, d_name);
        std::vector<std::string>::pointer end = a4->__end_;
        xpc_object_t value = a4->__end_cap_.__value_;
        if (end >= value)
        {
          unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a4->__begin_) >> 3);
          unint64_t v19 = v18 + 1;
          if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)a4->__begin_) >> 3);
          if (2 * v20 > v19) {
            unint64_t v19 = 2 * v20;
          }
          if (v20 >= 0x555555555555555LL) {
            unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v21 = v19;
          }
          *(void *)&v51[16] = &a4->__end_cap_;
          if (v21) {
            __int128 v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>( (uint64_t)&a4->__end_cap_,  v21);
          }
          else {
            __int128 v22 = 0LL;
          }
          timespec v23 = &v22[24 * v18];
          __p[0] = v22;
          __p[1] = v23;
          *(void *)&v51[8] = &v22[24 * v21];
          __int128 v24 = *(_OWORD *)v48;
          *((void *)v23 + 2) = v49;
          *(_OWORD *)timespec v23 = v24;
          v48[1] = 0LL;
          int64_t v49 = 0LL;
          v48[0] = 0LL;
          *(void *)__int128 v51 = v23 + 24;
          std::vector<std::string>::__swap_out_circular_buffer(a4, (std::__split_buffer<std::string> *)__p);
          timespec v25 = a4->__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)__p);
          int v26 = SHIBYTE(v49);
          a4->__end_ = v25;
          if (v26 < 0) {
            operator delete(v48[0]);
          }
        }

        else
        {
          __int128 v17 = *(_OWORD *)v48;
          end->__r_.__value_.__l.__cap_ = v49;
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v17;
          a4->__end_ = end + 1;
        }

        char i = 1;
      }
    }

    else if (v14)
    {
      goto LABEL_14;
    }
  }

  if (closedir(v7))
  {
    __error();
    __error();
    uint64_t v33 = __error();
    strerror(*v33);
    _TelephonyUtilDebugPrint( (uint64_t)"get_filtered_files",  (uint64_t)"%s: Failed to close the directory: %s, error: %d(0x%x) (%s)",  v34,  v35,  v36,  v37,  v38,  v39,  (uint64_t)"get_filtered_files");
    if ((i & 1) != 0) {
      return 1LL;
    }
LABEL_34:
    _TelephonyUtilDebugPrint( (uint64_t)"get_filtered_files",  (uint64_t)"%s: Find no content in %s",  v27,  v28,  v29,  v30,  v31,  v32,  (uint64_t)"get_filtered_files");
    return 0LL;
  }

  if ((i & 1) == 0) {
    goto LABEL_34;
  }
  return 1LL;
}

void sub_1865E9194( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, std::__split_buffer<std::string> *a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ctu::fs::get_last_number_in_unique_path(void *a1@<X0>, size_t a2@<X1>, void *a3@<X8>)
{
  if (a1) {
    std::string::basic_string[abi:ne180100](&__dst, a1, a2);
  }
  else {
    memset(&__dst, 0, sizeof(__dst));
  }
  memset(v73, 170, sizeof(v73));
  std::string::basic_string[abi:ne180100]<0>(v73, "/");
  size_t size = __dst.__r_.__value_.__s.__size_;
  signed __int8 v5 = __dst.__r_.__value_.__s.__size_;
  std::string::size_type v7 = __dst.__r_.__value_.__l.__size_;
  std::string::size_type v6 = __dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v9 = __dst.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v9 = __dst.__r_.__value_.__l.__size_;
  }
  if (SHIBYTE(v73[2]) >= 0) {
    uint64_t v10 = v73;
  }
  else {
    uint64_t v10 = (void **)v73[0];
  }
  if (SHIBYTE(v73[2]) >= 0) {
    size_t v11 = HIBYTE(v73[2]);
  }
  else {
    size_t v11 = (size_t)v73[1];
  }
  p_size_t size = (std::string::__short::$654DBF3D633A6121C0B197AC38B89F76 *)&p_dst[-1].__r_.__value_.__s.__size_;
  while (v9)
  {
    std::string::size_type v13 = v9;
    if (v11)
    {
      int v14 = memchr(v10, (char)p_size[v9].__size_, v11);
      std::string::size_type v9 = v13 - 1;
      if (v14) {
        continue;
      }
    }

    std::string::erase(&__dst, v13, 0xFFFFFFFFFFFFFFFFLL);
    size_t size = __dst.__r_.__value_.__s.__size_;
    std::string::size_type v7 = __dst.__r_.__value_.__l.__size_;
    std::string::size_type v6 = __dst.__r_.__value_.__r.__words[0];
    signed __int8 v5 = __dst.__r_.__value_.__s.__size_;
    break;
  }

  unint64_t v71 = 0xAAAAAAAAAAAAAAAALL;
  int64_t v72 = 0xAAAAAAAAAAAAAAAALL;
  if (v5 >= 0) {
    uint64_t v15 = &__dst;
  }
  else {
    uint64_t v15 = (std::string *)v6;
  }
  if (v5 >= 0) {
    size_t v16 = size;
  }
  else {
    size_t v16 = v7;
  }
  unint64_t v70 = (char *)0xAAAAAAAAAAAAAAAALL;
  ctu::fs::get_dir_name(v15, v16, (uint64_t)&v70);
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    size_t v17 = __dst.__r_.__value_.__s.__size_;
  }
  else {
    size_t v17 = __dst.__r_.__value_.__l.__size_;
  }
  if (!v17) {
    goto LABEL_84;
  }
  unint64_t v18 = HIBYTE(v72);
  if (v72 < 0) {
    unint64_t v18 = v71;
  }
  if (!v18)
  {
LABEL_84:
    if (a1)
    {
      std::string::basic_string[abi:ne180100](a3, a1, a2);
    }

    else
    {
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
    }

    goto LABEL_129;
  }

  memset(&v69, 170, sizeof(v69));
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unint64_t v19 = &__dst;
  }
  else {
    unint64_t v19 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  ctu::fs::get_base_name(v19, v17, &v69);
  if ((v69.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    size_t v20 = v69.__r_.__value_.__s.__size_;
  }
  else {
    size_t v20 = v69.__r_.__value_.__l.__size_;
  }
  memset(v68, 170, sizeof(v68));
  std::string::basic_string[abi:ne180100]((uint64_t)v68, v20 + 13);
  if (SHIBYTE(v68[2]) >= 0) {
    unint64_t v21 = v68;
  }
  else {
    unint64_t v21 = (void **)v68[0];
  }
  if (v20)
  {
    if ((v69.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v22 = &v69;
    }
    else {
      __int128 v22 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    memmove(v21, v22, v20);
  }

  strcpy((char *)v21 + v20, "-[[:alnum:]]*");
  *(void *)&__int128 v23 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v67[1].__ct_ = v23;
  *(_OWORD *)&v67[2].__loc_.__locale_ = v23;
  *(_OWORD *)&v67[0].__loc_.__locale_ = v23;
  *(_OWORD *)&v67[0].__col_ = v23;
  std::regex_traits<char>::regex_traits(v67);
  memset(&v67[1], 0, 40);
  __int128 v24 = (char *)HIBYTE(v68[2]);
  if (SHIBYTE(v68[2]) >= 0) {
    timespec v25 = (char *)v68;
  }
  else {
    timespec v25 = (char *)v68[0];
  }
  if (SHIBYTE(v68[2]) < 0) {
    __int128 v24 = (char *)v68[1];
  }
  if (&v24[(void)v25] != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>( (uint64_t)v67,  v25,  &v24[(void)v25])) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  }
  memset(&v66, 0, sizeof(v66));
  if (v72 >= 0) {
    int v26 = (const char *)&v70;
  }
  else {
    int v26 = v70;
  }
  if (v72 >= 0) {
    uint64_t v27 = HIBYTE(v72);
  }
  else {
    uint64_t v27 = v71;
  }
  std::locale::locale(&v61, &v67[0].__loc_);
  __int128 v62 = *(_OWORD *)&v67[0].__ct_;
  std::regex_traits<char> v63 = v67[1];
  locale = v67[2].__loc_.__locale_;
  if (v67[2].__loc_.__locale_)
  {
    uint64_t v28 = (unint64_t *)((char *)v67[2].__loc_.__locale_ + 8);
    do
      unint64_t v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }

  ct = v67[2].__ct_;
  if (ctu::fs::get_filtered_files(v26, v27, (uint64_t)&v61, &v66))
  {
    std::vector<std::string>::pointer begin = v66.__begin_;
    std::vector<std::string>::pointer end = v66.__end_;
    uint64_t v32 = (std::__shared_weak_count *)locale;
    if (locale)
    {
      uint64_t v33 = (unint64_t *)((char *)locale + 8);
      do
        unint64_t v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }

    std::locale::~locale(&v61);
    if (begin != end)
    {
      uint64_t v35 = v66.__begin_;
      std::vector<std::string>::pointer v36 = v66.__end_;
      if (v66.__begin_ == v66.__end_)
      {
        unsigned int v37 = 0;
      }

      else
      {
        unsigned int v37 = 0;
        do
        {
          memset(&v60, 170, sizeof(v60));
          ctu::tokenize(v35, 45, 0LL, (uint64_t *)&v60);
          memset(&v59, 170, sizeof(v59));
          if (*(char *)(v60.__r_.__value_.__l.__size_ - 1) < 0)
          {
            std::string::__init_copy_ctor_external( &v59,  *(const std::string::value_type **)(v60.__r_.__value_.__l.__size_ - 24),  *(void *)(v60.__r_.__value_.__l.__size_ - 16));
          }

          else
          {
            __int128 v38 = *(_OWORD *)(v60.__r_.__value_.__l.__size_ - 24);
            v59.__r_.__value_.__l.__cap_ = *(void *)(v60.__r_.__value_.__l.__size_ - 8);
            *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v38;
          }

          if ((v59.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v39 = &v59;
          }
          else {
            uint64_t v39 = (std::string *)v59.__r_.__value_.__r.__words[0];
          }
          unsigned int v40 = strtol((const char *)v39, 0LL, 0);
          if (v37 <= v40) {
            unsigned int v37 = v40;
          }
          v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
          ++v35;
        }

        while (v35 != v36);
      }

      if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v44 = __dst.__r_.__value_.__s.__size_;
      }
      else {
        size_t v44 = __dst.__r_.__value_.__l.__size_;
      }
      memset(&v59, 170, sizeof(v59));
      std::string::basic_string[abi:ne180100]((uint64_t)&v59, v44 + 1);
      if ((v59.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v45 = &v59;
      }
      else {
        uint64_t v45 = (std::string *)v59.__r_.__value_.__r.__words[0];
      }
      if (v44)
      {
        if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v46 = &__dst;
        }
        else {
          uint64_t v46 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        memmove(v45, v46, v44);
      }

      *(_WORD *)((char *)&v45->__r_.__value_.__l.__data_ + v44) = 45;
      std::to_string(&v58, v37);
      if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v47 = &v58;
      }
      else {
        unint64_t v47 = (std::string *)v58.__r_.__value_.__r.__words[0];
      }
      if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v48 = v58.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v48 = v58.__r_.__value_.__l.__size_;
      }
      int64_t v49 = std::string::append(&v59, (const std::string::value_type *)v47, v48);
      __int128 v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__l.__cap_ = v49->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0LL;
      v49->__r_.__value_.__l.__cap_ = 0LL;
      v49->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v51 = std::string::append(&v60, "/", 1uLL);
      __int128 v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      a3[2] = v51->__r_.__value_.__l.__cap_;
      *(_OWORD *)a3 = v52;
      v51->__r_.__value_.__l.__size_ = 0LL;
      v51->__r_.__value_.__l.__cap_ = 0LL;
      v51->__r_.__value_.__r.__words[0] = 0LL;
      goto LABEL_120;
    }
  }

  else
  {
    uint64_t v41 = (std::__shared_weak_count *)locale;
    if (locale)
    {
      uint64_t v42 = (unint64_t *)((char *)locale + 8);
      do
        unint64_t v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }

    std::locale::~locale(&v61);
  }

  if (a1)
  {
    std::string::basic_string[abi:ne180100](a3, a1, a2);
  }

  else
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
  }

LABEL_120:
  v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  uint64_t v53 = v67[2].__loc_.__locale_;
  if (v67[2].__loc_.__locale_)
  {
    unint64_t v54 = (unint64_t *)((char *)v67[2].__loc_.__locale_ + 8);
    do
      unint64_t v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      (*(void (**)(std::locale::__imp *))(*(void *)v53 + 16LL))(v53);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v53);
    }
  }

  std::locale::~locale(&v67[0].__loc_);
  if (SHIBYTE(v68[2]) < 0) {
    operator delete(v68[0]);
  }
LABEL_129:
  if (SHIBYTE(v72) < 0) {
    operator delete(v70);
  }
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
}

void sub_1865E9824( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, char *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30, std::locale a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, std::locale a42)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  std::string __p = &a39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v42 + 40);
  std::locale::~locale(&a42);
  _Unwind_Resume(a1);
}

BOOL ctu::fs::get_partition_info(const char *a1, uint64_t a2, void *a3, void *a4, unint64_t *a5)
{
  if (!a2) {
    return 0LL;
  }
  memset(&v19, 0, sizeof(v19));
  int v8 = statvfs(a1, &v19);
  BOOL v9 = v8 == 0;
  if (v8)
  {
    __error();
    __error();
    uint64_t v10 = __error();
    strerror(*v10);
    _TelephonyUtilDebugPrint( (uint64_t)"get_partition_info",  (uint64_t)"%s: Failed to get stats the source file: %s, error: %d(0x%x) (%s)",  v11,  v12,  v13,  v14,  v15,  v16,  (uint64_t)"get_partition_info");
  }

  else
  {
    *a5 = v19.f_frsize;
    uint64_t f_bavail = v19.f_bavail;
    *a3 = v19.f_blocks;
    *a4 = f_bavail;
  }

  return v9;
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  uint64_t v2 = (const std::locale *)MEMORY[0x186E3C224]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x189614558]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1896145F8]);
  return this;
}

void sub_1865E9A74(_Unwind_Exception *a1)
{
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  std::string::size_type v6 = operator new(8uLL);
  void *v6 = off_189E952F8;
  std::string::size_type v7 = operator new(0x10uLL);
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>( (void *)(a1 + 40),  (uint64_t)v7);
  int v8 = *(std::__owns_one_state<char> **)(a1 + 40);
  *(void *)(a1 + 56) = v8;
  unsigned int v9 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v9 > 0x3F)
  {
    switch(v9)
    {
      case 0x40u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>( (std::basic_regex<char> *)a1,  a2,  a3);
      case 0x80u:
        uint64_t v13 = (char *)memchr(a2, 10, a3 - a2);
        if (v13) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = a3;
        }
        if (v14 == a2)
        {
          __int128 v22 = (std::__node<char> *)operator new(0x10uLL);
          first = v8->__first_;
          v22[1].__vftable = (std::__node<char>_vtbl *)first;
          v8->__first_ = v22;
          *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
        }

        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, a2, v14);
        }

        while (1)
        {
          uint64_t v28 = v14 == a3 ? v14 : v14 + 1;
          if (v28 == a3) {
            break;
          }
          __int128 v24 = (char *)memchr(v28, 10, a3 - v28);
          if (v24) {
            uint64_t v14 = v24;
          }
          else {
            uint64_t v14 = a3;
          }
          timespec v25 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v14 == v28)
          {
            int v26 = (std::__node<char> *)operator new(0x10uLL);
            uint64_t v27 = v25->__first_;
            v26[1].__vftable = (std::__node<char>_vtbl *)v27;
            v25->__first_ = v26;
            *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
          }

          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v28, v14);
          }

          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v8, v25);
        }

        break;
      case 0x100u:
        uint64_t v10 = (char *)memchr(a2, 10, a3 - a2);
        if (v10) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = a3;
        }
        if (v11 == a2)
        {
          uint64_t v15 = (std::__node<char> *)operator new(0x10uLL);
          uint64_t v16 = v8->__first_;
          v15[1].__vftable = (std::__node<char>_vtbl *)v16;
          v8->__first_ = v15;
          *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
        }

        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>( (std::basic_regex<char> *)a1,  a2,  v11);
        }

        while (1)
        {
          unint64_t v21 = v11 == a3 ? v11 : v11 + 1;
          if (v21 == a3) {
            break;
          }
          size_t v17 = (char *)memchr(v21, 10, a3 - v21);
          if (v17) {
            uint64_t v11 = v17;
          }
          else {
            uint64_t v11 = a3;
          }
          unint64_t v18 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v11 == v21)
          {
            statvfs v19 = (std::__node<char> *)operator new(0x10uLL);
            size_t v20 = v18->__first_;
            v19[1].__vftable = (std::__node<char>_vtbl *)v20;
            v18->__first_ = v19;
            *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
          }

          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>( (std::basic_regex<char> *)a1,  v21,  v11);
          }

          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v8, v18);
        }

        break;
      default:
        goto LABEL_48;
    }

    return a3;
  }

  else if (v9)
  {
    if (v9 != 16)
    {
      if (v9 != 32) {
LABEL_48:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>( (std::basic_regex<char> *)a1,  a2,  a3);
    }

    return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, a2, a3);
  }

  else
  {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>( (std::basic_regex<char> *)a1,  (unsigned __int8 *)a2,  a3);
  }

void sub_1865E9D5C(_Unwind_Exception *a1)
{
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186E3BF90](exception, 17LL);
  __cxa_throw(exception, MEMORY[0x1896146C8], MEMORY[0x189614288]);
}

void sub_1865E9DB0(_Unwind_Exception *a1)
{
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>( void *a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = off_189E95350;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = a2;
  signed __int8 v5 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

void sub_1865E9E4C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>( std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::vector<std::string>::pointer end = a1->__end_;
  unint64_t v7 = a2;
  do
  {
    int v8 = v7;
    unint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v7, a3);
  }

  while (v7 != v8);
  if (v8 == a2)
  {
    unsigned int v9 = (std::__node<char> *)operator new(0x10uLL);
    uint64_t v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }

  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    uint64_t v12 = a1->__end_;
    uint64_t v13 = v8 + 1;
    uint64_t v14 = v8 + 1;
    do
    {
      int v8 = v14;
      uint64_t v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v14, a3);
    }

    while (v14 != v8);
    if (v8 == v13)
    {
      uint64_t v15 = (std::__node<char> *)operator new(0x10uLL);
      uint64_t v16 = a1->__end_;
      size_t v17 = v16->__first_;
      v15[1].__vftable = (std::__node<char>_vtbl *)v17;
      v16->__first_ = v15;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }

    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
  }

  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>( uint64_t a1, char *a2, char *a3)
{
  int v3 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v4 = a3;
  if (*a2 == 94)
  {
    std::string::size_type v6 = operator new(0x18uLL);
    BOOL v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(v8 + 8);
    void *v6 = &off_189E95470;
    v6[1] = v9;
    *((_BYTE *)v6 + 16) = v7;
    *(void *)(v8 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v6;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
    ++v3;
  }

  if (v3 != v4)
  {
    do
    {
      uint64_t v10 = v3;
      int v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>( (std::basic_regex<char> *)a1,  v3,  v4);
    }

    while (v3 != v10);
    if (v10 != v4)
    {
      if (v10 + 1 != v4 || *v10 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      uint64_t v11 = operator new(0x18uLL);
      BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v13 = *(void *)(a1 + 56);
      uint64_t v14 = *(void *)(v13 + 8);
      *uint64_t v11 = &off_189E954B8;
      v11[1] = v14;
      *((_BYTE *)v11 + 16) = v12;
      *(void *)(v13 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v11;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
    }
  }

  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>( std::basic_regex<char> *a1, char *a2, char *a3)
{
  int v3 = a3;
  std::vector<std::string>::pointer end = a1->__end_;
  BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  uint64_t v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    uint64_t v9 = a1->__end_;
    uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, (char *)v8 + 1, v3);
    if (v10 == v8 + 1) {
      goto LABEL_9;
    }
    uint64_t v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }

  return v3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186E3BF90](exception, 14LL);
  __cxa_throw(exception, MEMORY[0x1896146C8], MEMORY[0x189614288]);
}

void sub_1865EA184(_Unwind_Exception *a1)
{
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer( std::__shared_weak_count *a1)
{
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared( uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void (__cdecl ***std::__empty_state<char>::~__empty_state( void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__empty_state<char>::~__empty_state( void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  operator delete(__p);
}

void std::__empty_state<char>::__exec( const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

{
  std::__node<char> *first;
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
  operator delete(this);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation( std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
  std::string::size_type v6 = (std::__node<char> *)operator new(0x18uLL);
  first = __sb->__first_;
  v6[1].__vftable = (std::__node<char>_vtbl *)__sa->__first_;
  v6[2].__vftable = (std::__node<char>_vtbl *)first;
  v6->__vftable = (std::__node<char>_vtbl *)&off_189E95938;
  __sa->__first_ = v6;
  __sb->__first_ = 0LL;
  uint64_t v8 = (std::__node<char> *)operator new(0x10uLL);
  uint64_t v9 = this->__end_->__first_;
  v8[1].__vftable = (std::__node<char>_vtbl *)v9;
  __sb->__first_ = v8;
  this->__end_->__first_ = 0LL;
  uint64_t v10 = (std::__node<char> *)operator new(0x10uLL);
  uint64_t v11 = __sb->__first_;
  v10->__vftable = (std::__node<char>_vtbl *)off_189E95980;
  v10[1].__vftable = (std::__node<char>_vtbl *)v11;
  this->__end_->__first_ = v10;
  this->__end_ = (std::__owns_one_state<char> *)__sb->__first_;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>( std::basic_regex<char> *this, unsigned __int8 *a2, char *a3)
{
  int v6 = (char)*a2;
  int v7 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      int v22 = a2[1];
      if (v22 == 66)
      {
        BOOL v23 = 1;
      }

      else
      {
        if (v22 != 98) {
          goto LABEL_32;
        }
        BOOL v23 = 0;
      }

      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v23);
      return a2 + 2;
    }

    if (v6 != 94) {
      goto LABEL_32;
    }
    uint64_t v16 = (std::__node<char> *)operator new(0x18uLL);
    BOOL v17 = (this->__flags_ & 0x5F0) == 1024;
    std::vector<std::string>::pointer end = this->__end_;
    first = end->__first_;
    size_t v20 = &off_189E95470;
LABEL_21:
    v16->__vftable = (std::__node<char>_vtbl *)v20;
    v16[1].__vftable = (std::__node<char>_vtbl *)first;
    LOBYTE(v16[2].__vftable) = v17;
    end->__first_ = v16;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return a2 + 1;
  }

  if (v6 == 36)
  {
    uint64_t v16 = (std::__node<char> *)operator new(0x18uLL);
    BOOL v17 = (this->__flags_ & 0x5F0) == 1024;
    std::vector<std::string>::pointer end = this->__end_;
    first = end->__first_;
    size_t v20 = &off_189E954B8;
    goto LABEL_21;
  }

  BOOL v9 = v6 == 40;
  uint64_t v8 = (char *)(a2 + 1);
  BOOL v9 = !v9 || v8 == a3;
  if (!v9)
  {
    BOOL v9 = *v8 == 63;
    uint64_t v10 = (char *)(a2 + 2);
    if (v9 && v10 != a3)
    {
      int v12 = *v10;
      if (v12 == 33)
      {
        *(void *)&__int128 v24 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v51.__loop_count_ = v24;
        *(_OWORD *)&v51.__start_.__cntrl_ = v24;
        *(_OWORD *)&v51.__traits_.__loc_.__locale_ = v24;
        *(_OWORD *)&v51.__traits_.__col_ = v24;
        std::regex_traits<char>::regex_traits(&v51.__traits_);
        memset(&v51.__flags_, 0, 40);
        v51.__flags_ = this->__flags_;
        uint64_t v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v51, a2 + 3, a3);
        unsigned int marked_count = v51.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v51, 1, this->__marked_count_);
        this->__marked_count_ += marked_count;
        if (v14 == a3 || *v14 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
      }

      else
      {
        if (v12 != 61) {
          goto LABEL_32;
        }
        *(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v51.__loop_count_ = v13;
        *(_OWORD *)&v51.__start_.__cntrl_ = v13;
        *(_OWORD *)&v51.__traits_.__loc_.__locale_ = v13;
        *(_OWORD *)&v51.__traits_.__col_ = v13;
        std::regex_traits<char>::regex_traits(&v51.__traits_);
        memset(&v51.__flags_, 0, 40);
        v51.__flags_ = this->__flags_;
        uint64_t v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v51, a2 + 3, a3);
        unsigned int v15 = v51.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v51, 0, this->__marked_count_);
        this->__marked_count_ += v15;
        if (v14 == a3 || *v14 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
      }

      std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)&v51.__start_);
      std::locale::~locale(&v51.__traits_.__loc_);
      uint64_t result = (unsigned __int8 *)(v14 + 1);
      int v7 = *a2;
    }
  }

LABEL_57:
  uint64_t result = a2;
  if (v32 != a2) {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>( (uint64_t)this,  v32,  (unsigned __int8 *)a3,  v26,  v27 + 1,  this->__marked_count_ + 1);
  }
  return result;
}

void sub_1865EA9E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>( uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      __int128 v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        __int128 v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0LL;
        size_t v18 = 1LL;
        goto LABEL_33;
      }

      a5 = a5;
      a6 = a6;
      size_t v14 = 0LL;
      size_t v18 = 1LL;
      goto LABEL_45;
    }

    if (v12 != 123) {
      return a2;
    }
    LODWORD(__max) = -1431655766;
    unsigned int v15 = a2 + 1;
    uint64_t v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            __int128 v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              __int128 v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              unint64_t v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop( (std::basic_regex<char> *)a1,  v14,  v18,  v21,  a5,  a6,  v22);
              return v13;
            }

            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            unint64_t v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }

          goto LABEL_58;
        }

        BOOL v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          __int128 v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            __int128 v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }

          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1LL;
          goto LABEL_45;
        }

        int v27 = -1;
        timespec v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            __int128 v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                __int128 v13 = v25 + 2;
              }
            }

            a5 = v7;
            a6 = v6;
            a1 = v10;
            unint64_t v21 = __s;
            goto LABEL_46;
          }

          goto LABEL_58;
        }
      }

      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }

LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }

  if (v12 == 42)
  {
    __int128 v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      __int128 v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0LL;
      goto LABEL_26;
    }

    a5 = a5;
    a6 = a6;
    size_t v14 = 0LL;
    goto LABEL_36;
  }

  if (v12 == 43)
  {
    __int128 v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      __int128 v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1LL;
LABEL_26:
      size_t v18 = -1LL;
      goto LABEL_33;
    }

    a5 = a5;
    a6 = a6;
    size_t v14 = 1LL;
    goto LABEL_36;
  }

  return a2;
}

  std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v7);
  uint64_t v30 = a2 + 1;
LABEL_95:
  unsigned int v37 = this->__marked_count_;
  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>( (uint64_t)this,  v30,  a3,  v27,  v28 + 1,  v37 + 1);
}

    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }

  if (v12 == 42)
  {
    __int128 v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      __int128 v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0LL;
      goto LABEL_26;
    }

    a5 = a5;
    a6 = a6;
    size_t v14 = 0LL;
    goto LABEL_36;
  }

  __int128 v13 = a2;
  if (v12 == 43)
  {
    __int128 v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      __int128 v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1LL;
LABEL_26:
      size_t v18 = -1LL;
      goto LABEL_33;
    }

    a5 = a5;
    a6 = a6;
    size_t v14 = 1LL;
    goto LABEL_36;
  }

  return v13;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary( std::basic_regex<char> *this, BOOL a2)
{
  uint64_t v4 = (char *)operator new(0x30uLL);
  first = this->__end_->__first_;
  *(void *)uint64_t v4 = off_189E95500;
  *((void *)v4 + 1) = first;
  std::locale::locale((std::locale *)v4 + 2, &this->__traits_.__loc_);
  *(_OWORD *)(v4 + memset(&context, 0, 24) = *(_OWORD *)&this->__traits_.__ct_;
  v4[40] = a2;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead( std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  uint64_t v8 = (char *)operator new(0x58uLL);
  first = this->__end_->__first_;
  *(void *)uint64_t v8 = off_189E95548;
  *((void *)v8 + 1) = first;
  std::locale::locale((std::locale *)v8 + 2, &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + memset(&context, 0, 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *((void *)v8 + 7) = a2->__start_.__ptr_;
  *((void *)v8 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = cntrl;
  if (cntrl)
  {
    p_shared_owners = (unint64_t *)&cntrl->__shared_owners_;
    do
      unint64_t v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }

  *((void *)v8 + 9) = a2->__end_;
  *((_DWORD *)v8 + 20) = a4;
  v8[84] = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186E3BF90](exception, 6LL);
  __cxa_throw(exception, MEMORY[0x1896146C8], MEMORY[0x189614288]);
}

void sub_1865EAE6C(_Unwind_Exception *a1)
{
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline( void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline( void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  operator delete(__p);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0LL;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }

  else
  {
    if (!*(_BYTE *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1LL);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }

  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 80) = v4;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline( void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline( void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  operator delete(__p);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((int v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }

  else
  {
    uint64_t v5 = 0LL;
    *(_DWORD *)a2 = -993;
  }

  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_189E95500;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_189E95500;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  operator delete(a1);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead( void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))off_189E95548;
  int v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_189E95548;
  int v2 = a1 + 2;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)&a1[7]);
  std::locale::~locale(v2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  operator delete(a1);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v23 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v25 = 0xAAAAAAAAAAAAAA00LL;
  __int128 v27 = v4;
  uint64_t v24 = 0LL;
  __int128 v26 = 0uLL;
  LOBYTE(v27) = 0;
  BYTE8(v27) = 0;
  uint64_t v28 = 0LL;
  std::string __p = 0LL;
  uint64_t v20 = 0LL;
  std::vector<std::csub_match>::size_type v5 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v21 = 0LL;
  *(void *)&__int128 v22 = v6;
  *((void *)&v22 + 1) = v6;
  LOBYTE(v23) = 0;
  std::vector<std::sub_match<char const*>>::assign( (std::vector<std::sub_match<const char *>> *)&__p,  v5,  (std::vector<std::csub_match>::const_reference)&v22);
  *((void *)&v23 + 1) = v7;
  uint64_t v24 = v7;
  LOBYTE(v25) = 0;
  __int128 v26 = v22;
  LOBYTE(v27) = v23;
  uint64_t v28 = v7;
  BYTE8(v27) = 1;
  uint64_t v8 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92)) {
    BOOL v9 = v8 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v9 = 0;
  }
  char v10 = v9;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>( a1 + 16,  v8,  *(const char **)(a2 + 24),  (uint64_t *)&__p,  *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u,  v10))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0LL;
    int v11 = (char *)__p;
    goto LABEL_13;
  }

  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  int v11 = (char *)__p;
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)__p) >> 3);
  if (v12 < 2)
  {
LABEL_13:
    if (!v11) {
      return;
    }
    goto LABEL_14;
  }

  int v13 = 0;
  int v14 = *(_DWORD *)(a1 + 80);
  uint64_t v15 = *(void *)(a2 + 32);
  unint64_t v16 = 1LL;
  do
  {
    int v17 = &v11[24 * v16];
    uint64_t v18 = v15 + 24LL * (v14 + v13);
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v17;
    *(_BYTE *)(v18 + 16) = v17[16];
    unint64_t v16 = (v13 + 2);
    ++v13;
  }

  while (v12 > v16);
LABEL_14:
  operator delete(v11);
}

void sub_1865EB42C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>( uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int64x2_t v42 = 0uLL;
  unint64_t v43 = 0LL;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.second = a3;
    *(void *)&__x.matched = 0xAAAAAAAAAAAAAA00LL;
    __x.first = a3;
    *(_DWORD *)int v40 = 0;
    memset(&v40[8], 0, 85);
    v42.i64[1] = (uint64_t)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(&v42, (uint64_t)v40);
    if (*(void *)&v40[56]) {
      operator delete(*(void **)&v40[56]);
    }
    if (*(void *)&v40[32]) {
      operator delete(*(void **)&v40[32]);
    }
    unsigned int v37 = a4;
    uint64_t v12 = v42.i64[1];
    *(_DWORD *)(v42.i64[1] - 96) = 0;
    *(void *)(v12 - 8std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = a2;
    *(void *)(v12 - 80) = a2;
    *(void *)(v12 - 72) = a3;
    std::vector<std::sub_match<char const*>>::resize( (std::vector<std::sub_match<const char *>> *)(v12 - 64),  *(unsigned int *)(a1 + 28),  &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize( (std::vector<std::pair<unsigned long, const char *>> *)(v42.i64[1] - 40),  *(unsigned int *)(a1 + 32));
    uint64_t v13 = v42.i64[1];
    unsigned int v38 = a3;
    signed int v14 = (_DWORD)a3 - (_DWORD)a2;
    *(void *)(v42.i64[1] - 16) = v6;
    *(_DWORD *)(v13 - std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = a5;
    *(_BYTE *)(v13 - 4) = a6;
    unsigned int v15 = 1;
    while (2)
    {
      int v17 = (void *)(v13 - 16);
      uint64_t v16 = *(void *)(v13 - 16);
      uint64_t v18 = (_OWORD *)(v13 - 96);
      if (v16) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16LL))(v16, v13 - 96);
      }
      switch(*(_DWORD *)v18)
      {
        case 0xFFFFFC18:
          BOOL v19 = *(const char **)(v13 - 80);
          if ((a5 & 0x20) != 0 && v19 == a2 || (a5 & 0x1000) != 0 && v19 != v38) {
            goto LABEL_16;
          }
          uint64_t v28 = *v37;
          *(void *)uint64_t v28 = a2;
          *(void *)(v28 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v19;
          *(_BYTE *)(v28 + 16) = 1;
          uint64_t v29 = *(void *)(v13 - 64);
          uint64_t v30 = *(void *)(v13 - 56) - v29;
          if (v30)
          {
            unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (v30 >> 3);
            uint64_t v32 = (_BYTE *)(v29 + 16);
            unsigned int v33 = 1;
            do
            {
              uint64_t v34 = v28 + 24LL * v33;
              *(_OWORD *)uint64_t v34 = *((_OWORD *)v32 - 1);
              char v35 = *v32;
              v32 += 24;
              *(_BYTE *)(v34 + 16) = v35;
            }

            while (v31 > v33++);
          }

          uint64_t v6 = 1LL;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          uint64_t v20 = v42.i64[1] - 96;
          std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)(v42.i64[1] - 96));
          v42.i64[1] = v20;
          goto LABEL_23;
        case 0xFFFFFC20:
          *(void *)&__int128 v21 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v40[64] = v21;
          *(_OWORD *)&v40[80] = v21;
          *(_OWORD *)&v40[32] = v21;
          *(_OWORD *)&v40[48] = v21;
          *(_OWORD *)int v40 = v21;
          *(_OWORD *)&v40[16] = v21;
          __int128 v22 = *(_OWORD *)(v13 - 80);
          *(_OWORD *)int v40 = *v18;
          *(_OWORD *)&v40[16] = v22;
          memset(&v40[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>( &v40[32],  *(__int128 **)(v13 - 64),  *(__int128 **)(v13 - 56),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v13 - 56) - *(void *)(v13 - 64)) >> 3));
          memset(&v40[56], 0, 24);
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>( &v40[56],  *(__int128 **)(v13 - 40),  *(__int128 **)(v13 - 32),  (uint64_t)(*(void *)(v13 - 32) - *(void *)(v13 - 40)) >> 4);
          uint64_t v23 = *v17;
          *(void *)&v40[85] = *(void *)(v13 - 11);
          *(void *)&v40[80] = v23;
          (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v17 + 24LL))(*v17, 1LL, v13 - 96);
          (*(void (**)(void, void, _BYTE *))(**(void **)&v40[80] + 24LL))( *(void *)&v40[80],  0LL,  v40);
          uint64_t v24 = v42.i64[1];
          if (v42.i64[1] >= v43)
          {
            v42.i64[1] = (uint64_t)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>( &v42,  (uint64_t)v40);
            if (*(void *)&v40[56])
            {
              *(void *)&v40[64] = *(void *)&v40[56];
              operator delete(*(void **)&v40[56]);
            }
          }

          else
          {
            __int128 v25 = *(_OWORD *)&v40[16];
            *(_OWORD *)v42.i64[1] = *(_OWORD *)v40;
            *(_OWORD *)(v24 + 16) = v25;
            *(void *)(v24 + 32) = 0LL;
            *(void *)(v24 + 40) = 0LL;
            *(void *)(v24 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = 0LL;
            *(void *)(v24 + 56) = 0LL;
            *(_OWORD *)(v24 + 32) = *(_OWORD *)&v40[32];
            *(void *)(v24 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = *(void *)&v40[48];
            memset(&v40[32], 0, 24);
            *(void *)(v24 + 64) = 0LL;
            *(void *)(v24 + 72) = 0LL;
            *(_OWORD *)(v24 + 56) = *(_OWORD *)&v40[56];
            *(void *)(v24 + 72) = *(void *)&v40[72];
            memset(&v40[56], 0, 24);
            uint64_t v26 = *(void *)&v40[80];
            *(void *)(v24 + 85) = *(void *)&v40[85];
            *(void *)(v24 + 80) = v26;
            v42.i64[1] = v24 + 96;
          }

          if (*(void *)&v40[32])
          {
            *(void *)&v40[40] = *(void *)&v40[32];
            operator delete(*(void **)&v40[32]);
          }

void sub_1865EB7E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign( std::vector<std::sub_match<const char *>> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  uint64_t v6 = *((void *)this + 2);
  uint64_t v7 = *(std::vector<std::csub_match>::value_type **)this;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)v7) >> 3) >= __n)
  {
    unsigned int v15 = (std::pair<const char *, const char *> *)*((void *)this + 1);
    std::vector<std::csub_match>::size_type v16 = ((char *)v15 - (char *)v7) / 24;
    if (v16 >= __n) {
      std::vector<std::csub_match>::size_type v17 = __n;
    }
    else {
      std::vector<std::csub_match>::size_type v17 = ((char *)v15 - (char *)v7) / 24;
    }
    if (v17)
    {
      uint64_t v18 = v7;
      do
      {
        *v18++ = *__u;
        --v17;
      }

      while (v17);
    }

    if (__n <= v16)
    {
      *((void *)this + 1) = &v7[__n];
    }

    else
    {
      std::vector<std::csub_match>::size_type v19 = (std::vector<std::csub_match>::size_type)v15 + 24 * (__n - v16);
      std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
      do
      {
        std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
        v15[1].first = *(const char **)&__u->matched;
        *unsigned int v15 = v21;
        unsigned int v15 = (std::pair<const char *, const char *> *)((char *)v15 + 24);
        v20 -= 24LL;
      }

      while (v20);
      *((void *)this + 1) = v19;
    }
  }

  else
  {
    if (v7)
    {
      *((void *)this + 1) = v7;
      operator delete(v7);
      uint64_t v6 = 0LL;
      *(void *)this = 0LL;
      *((void *)this + 1) = 0LL;
      *((void *)this + 2) = 0LL;
    }

    if (__n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    if (v8 >= 0x555555555555555LL) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](this, v10);
    int v11 = (std::pair<const char *, const char *> *)*((void *)this + 1);
    std::vector<std::csub_match>::size_type v12 = (std::vector<std::csub_match>::size_type)v11 + 24 * __n;
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    do
    {
      std::pair<const char *, const char *> v14 = __u->std::pair<const char *, const char *>;
      v11[1].first = *(const char **)&__u->matched;
      *int v11 = v14;
      int v11 = (std::pair<const char *, const char *> *)((char *)v11 + 24);
      v13 -= 24LL;
    }

    while (v13);
    *((void *)this + 1) = v12;
  }

char *std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>( unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a1);
}

void *std::__state<char>::~__state(void *a1)
{
  int v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }

  int v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }

  return a1;
}

void std::vector<std::sub_match<char const*>>::resize( std::vector<std::sub_match<const char *>> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  uint64_t v6 = *(char **)this;
  std::vector<std::csub_match>::size_type v5 = (std::pair<const char *, const char *> *)*((void *)this + 1);
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)this) >> 3);
  unint64_t v8 = __sz - v7;
  if (__sz <= v7)
  {
    if (__sz < v7) {
      *((void *)this + 1) = &v6[24 * __sz];
    }
  }

  else
  {
    uint64_t v10 = *((void *)this + 2);
    if (0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v5) >> 3) >= v8)
    {
      __int128 v25 = (char *)v5 + 24 * v8;
      std::vector<std::csub_match>::size_type v26 = 24 * __sz - 8 * (((uint64_t)v5 - *(void *)this) >> 3);
      do
      {
        std::pair<const char *, const char *> v27 = __x->std::pair<const char *, const char *>;
        v5[1].first = *(const char **)&__x->matched;
        *std::vector<std::csub_match>::size_type v5 = v27;
        std::vector<std::csub_match>::size_type v5 = (std::pair<const char *, const char *> *)((char *)v5 + 24);
        v26 -= 24LL;
      }

      while (v26);
      *((void *)this + 1) = v25;
    }

    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v6) >> 3);
      std::vector<std::csub_match>::size_type v12 = 2 * v11;
      if (2 * v11 <= __sz) {
        std::vector<std::csub_match>::size_type v12 = __sz;
      }
      if (v11 >= 0x555555555555555LL) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v12;
      }
      std::pair<const char *, const char *> v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v13);
      std::vector<std::csub_match>::size_type v16 = (std::pair<const char *, const char *> *)&v14[24 * v7];
      std::vector<std::csub_match>::size_type v17 = &v14[24 * __sz];
      uint64_t v18 = v16;
      std::vector<std::csub_match>::size_type v19 = 24 * __sz - 24 * v7;
      do
      {
        std::pair<const char *, const char *> v20 = __x->std::pair<const char *, const char *>;
        v18[1].first = *(const char **)&__x->matched;
        std::pair<const char *, const char *> *v18 = v20;
        uint64_t v18 = (std::pair<const char *, const char *> *)((char *)v18 + 24);
        v19 -= 24LL;
      }

      while (v19);
      std::pair<const char *, const char *> v21 = &v14[24 * v15];
      uint64_t v23 = *(char **)this;
      __int128 v22 = (char *)*((void *)this + 1);
      if (v22 != *(char **)this)
      {
        do
        {
          __int128 v24 = *(_OWORD *)(v22 - 24);
          v16[-1].second = (const char *)*((void *)v22 - 1);
          *(_OWORD *)&v16[-2].second = v24;
          std::vector<std::csub_match>::size_type v16 = (std::pair<const char *, const char *> *)((char *)v16 - 24);
          v22 -= 24;
        }

        while (v22 != v23);
        __int128 v22 = *(char **)this;
      }

      *(void *)this = v16;
      *((void *)this + 1) = v17;
      *((void *)this + 2) = v21;
      if (v22) {
        operator delete(v22);
      }
    }
  }

void std::vector<std::pair<unsigned long,char const*>>::resize( std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
  std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
  std::vector<std::pair<unsigned long, const char *>>::size_type v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5) {
      return;
    }
    uint64_t v18 = &begin[__sz];
    goto LABEL_17;
  }

  std::vector<std::pair<unsigned long, const char *>>::size_type v6 = __sz - v5;
  xpc_object_t value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 16 * v6);
    uint64_t v18 = &end[v6];
LABEL_17:
    this->__end_ = v18;
    return;
  }

  if (__sz >> 60) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (char *)value - (char *)begin;
  std::vector<std::pair<unsigned long, const char *>>::size_type v9 = v8 >> 3;
  if (v8 >> 3 <= __sz) {
    std::vector<std::pair<unsigned long, const char *>>::size_type v9 = __sz;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v10);
  std::vector<std::csub_match>::size_type v12 = (std::pair<unsigned long, const char *> *)&v11[16 * v5];
  std::pair<const char *, const char *> v14 = (std::pair<unsigned long, const char *> *)&v11[16 * v13];
  bzero(v12, 16 * v6);
  uint64_t v15 = &v12[v6];
  std::vector<std::pair<unsigned long, const char *>>::pointer v17 = this->__begin_;
  std::vector<std::csub_match>::size_type v16 = this->__end_;
  if (v16 != this->__begin_)
  {
    do
    {
      v12[-1] = v16[-1];
      --v12;
      --v16;
    }

    while (v16 != v17);
    std::vector<std::csub_match>::size_type v16 = this->__begin_;
  }

  this->__begin_ = v12;
  this->__end_ = v15;
  this->__end_cap_.__value_ = v14;
  if (v16) {
    operator delete(v16);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186E3BF90](exception, 12LL);
  __cxa_throw(exception, MEMORY[0x1896146C8], MEMORY[0x189614288]);
}

void sub_1865EBD34(_Unwind_Exception *a1)
{
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186E3BF90](exception, 16LL);
  __cxa_throw(exception, MEMORY[0x1896146C8], MEMORY[0x189614288]);
}

void sub_1865EBD80(_Unwind_Exception *a1)
{
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(int64x2_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556LL * ((a1[1].i64[0] - a1->i64[0]) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556LL * ((a1[1].i64[0] - a1->i64[0]) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 5) >= 0x155555555555555LL) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  std::pair<const char *, const char *> v27 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(96 * v6);
  }

  else
  {
    unint64_t v7 = 0LL;
  }

  uint64_t v24 = 0LL;
  v25.i64[0] = 0LL;
  uint64_t v8 = &v7[96 * v2];
  __int128 v9 = *(_OWORD *)(a2 + 16);
  unint64_t v10 = &v7[96 * v6];
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  *((_OWORD *)v8 + 1) = v9;
  *((_OWORD *)v8 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v8 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  *(void *)(v8 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v8 + 9) = 0LL;
  *((void *)v8 + 10) = v12;
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v8 + 9) = v11;
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = 0LL;
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  uint64_t v13 = v8 + 96;
  v25.i64[1] = (uint64_t)(v8 + 96);
  std::vector<std::csub_match>::size_type v26 = v10;
  uint64_t v15 = a1->i64[0];
  unint64_t v14 = a1->u64[1];
  if (v14 == a1->i64[0])
  {
    int64x2_t v21 = vdupq_n_s64(v14);
  }

  else
  {
    uint64_t v16 = 0LL;
    do
    {
      std::vector<std::pair<unsigned long, const char *>>::pointer v17 = &v8[v16];
      uint64_t v18 = v14 + v16;
      __int128 v19 = *(_OWORD *)(v14 + v16 - 80);
      *((_OWORD *)v17 - 6) = *(_OWORD *)(v14 + v16 - 96);
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 7) = 0LL;
      *((void *)v17 - 6) = 0LL;
      *((void *)v17 - std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
      *((_OWORD *)v17 - 4) = *(_OWORD *)(v14 + v16 - 64);
      *((void *)v17 - 6) = *(void *)(v14 + v16 - 48);
      *(void *)(v18 - 64) = 0LL;
      *(void *)(v18 - 56) = 0LL;
      *(void *)(v18 - std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = 0LL;
      *((void *)v17 - 5) = 0LL;
      *((void *)v17 - 4) = 0LL;
      *((void *)v17 - 3) = 0LL;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)(v14 + v16 - 40);
      *((void *)v17 - 3) = *(void *)(v14 + v16 - 24);
      *(void *)(v18 - 40) = 0LL;
      *(void *)(v18 - 32) = 0LL;
      *(void *)(v18 - memset(&context, 0, 24) = 0LL;
      uint64_t v20 = *(void *)(v14 + v16 - 16);
      *(void *)(v17 - 11) = *(void *)(v14 + v16 - 11);
      *((void *)v17 - 2) = v20;
      v16 -= 96LL;
    }

    while (v14 + v16 != v15);
    int64x2_t v21 = *a1;
    v8 += v16;
    uint64_t v13 = (char *)v25.i64[1];
    unint64_t v10 = v26;
  }

  a1->i64[0] = (uint64_t)v8;
  a1->i64[1] = (uint64_t)v13;
  int64x2_t v25 = v21;
  __int128 v22 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v10;
  std::vector<std::csub_match>::size_type v26 = v22;
  uint64_t v24 = v21.i64[0];
  std::__split_buffer<std::__state<char>>::~__split_buffer((uint64_t)&v24);
  return v13;
}

void std::__destroy_at[abi:ne180100]<std::__state<char>,0>(void *a1)
{
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }

  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }

uint64_t std::__split_buffer<std::__state<char>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)(i - 96));
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>( unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>( char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      __int128 v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24LL;
      a2 = (__int128 *)((char *)a2 + 24);
    }

    *((void *)v6 + 1) = v7;
  }

  return result;
}

void sub_1865EC080(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>( char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      __int128 v8 = *a2++;
      *v7++ = v8;
    }

    *((void *)v6 + 1) = v7;
  }

  return result;
}

void sub_1865EC0F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100]( void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    std::vector<std::pair<unsigned long, const char *>>::size_type v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v4);
      }

      while (v4 != v2);
      std::vector<std::pair<unsigned long, const char *>>::size_type v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>( uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_139;
    }
    uint64_t v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list( (std::basic_regex<char> *)a1,  a2[1] == 94);
    uint64_t v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(_BYTE *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93LL);
      ++v5;
    }

    int v40 = a3 - 4;
    while (1)
    {
      __int128 v8 = (char *)v5;
      __int128 v9 = a3;
      int v10 = *(unsigned __int8 *)v5;
      __int128 v9 = (char *)v5;
      if (v10 == 93) {
        goto LABEL_117;
      }
      uint64_t v11 = 0LL;
      v42[0] = 0LL;
      v42[1] = 0LL;
      unint64_t v43 = 0LL;
      uint64_t v12 = 0LL;
      __int128 v9 = (char *)v5;
      if ((char *)(v5 + 1) != a3 && v10 == 91)
      {
        int v13 = *(unsigned __int8 *)(v5 + 1);
        switch(v13)
        {
          case '.':
            __int128 v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>( a1,  (char *)(v5 + 2),  a3,  (uint64_t)v42);
            uint64_t v12 = (void *)HIBYTE(v43);
            uint64_t v11 = v42[1];
            break;
          case ':':
            for (unint64_t i = 0LL; *(_BYTE *)(v5 + i + 2) != 58 || *(_BYTE *)(v5 + i + 3) != 93; ++i)
            {
            }

            uint64_t v18 = (char *)(v5 + i + 2);
            if (v18 == a3) {
LABEL_138:
            }
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
            int v19 = *(_DWORD *)(a1 + 24);
            memset(&__p, 170, sizeof(__p));
            std::string::__init_with_size[abi:ne180100]<char *,char *>(&__p, (char *)(v5 + 2), v18, i);
            std::string::size_type size = __p.__r_.__value_.__s.__size_;
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
            }
            (*(void (**)(void, std::string *, char *))(**(void **)(a1 + 8) + 48LL))( *(void *)(a1 + 8),  p_p,  (char *)p_p + size);
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              __int128 v22 = &__p;
            }
            else {
              __int128 v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            std::regex_traits<char>::char_class_type classname = std::__get_classname((const char *)v22, v19 & 1);
            if (!classname) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
            }
            char v24 = 0;
            *(_DWORD *)(v7 + 160) |= classname;
            goto LABEL_113;
          case '=':
            for (unint64_t i = 0LL; *(_BYTE *)(v5 + i + 2) != 61 || *(_BYTE *)(v5 + i + 3) != 93; ++i)
            {
            }

            int64x2_t v25 = (char *)(v5 + i + 2);
            if (v25 == a3) {
              goto LABEL_138;
            }
            memset(&__p, 170, sizeof(__p));
            std::regex_traits<char>::__lookup_collatename<char const*>(&__p, a1, (char *)(v5 + 2), v25);
            if ((char)__p.__r_.__value_.__s.__size_ < 0)
            {
              std::string::size_type v26 = __p.__r_.__value_.__l.__size_;
              if (!__p.__r_.__value_.__l.__size_) {
LABEL_140:
              }
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              memset(v44, 170, sizeof(v44));
              std::pair<const char *, const char *> v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }

            else
            {
              std::string::size_type v26 = __p.__r_.__value_.__s.__size_;
              if (!__p.__r_.__value_.__s.__size_) {
                goto LABEL_140;
              }
              std::pair<const char *, const char *> v27 = &__p;
              memset(v44, 170, sizeof(v44));
            }

            std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>( v44,  a1,  (char *)v27,  (char *)v27 + v26);
            uint64_t v29 = (void *)HIBYTE(v44[2]);
            if (SHIBYTE(v44[2]) < 0) {
              uint64_t v29 = v44[1];
            }
            if (v29)
            {
              std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100]( (void *)v7,  (uint64_t)v44);
            }

            else
            {
              std::string::size_type v30 = __p.__r_.__value_.__s.__size_;
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
              }
              if (v30 == 2)
              {
                if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  unsigned int v37 = &__p;
                }
                else {
                  unsigned int v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]( v7,  v37->__r_.__value_.__s.__data_[0],  v37->__r_.__value_.__s.__data_[1]);
              }

              else
              {
                if (v30 != 1) {
                  std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
                }
                if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  unint64_t v31 = &__p;
                }
                else {
                  unint64_t v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]( v7,  v31->__r_.__value_.__s.__data_[0]);
              }
            }

            if (SHIBYTE(v44[2]) < 0) {
              operator delete(v44[0]);
            }
            char v24 = 0;
LABEL_113:
            v5 += i + 4;
            char v35 = v8;
            goto LABEL_114;
          default:
            uint64_t v11 = 0LL;
            uint64_t v12 = 0LL;
            __int128 v9 = (char *)v5;
            break;
        }
      }

      uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if (!v11)
      {
        if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) == 0x40)
        {
          int v15 = *v9;
          if (v15 == 92)
          {
            uint64_t v16 = v9 + 1;
            if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0) {
              std::vector<std::pair<unsigned long, const char *>>::pointer v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>( (std::basic_regex<char> *)a1,  v16,  a3,  (uint64_t *)v42);
            }
            else {
              std::vector<std::pair<unsigned long, const char *>>::pointer v17 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>( (std::basic_regex<char> *)a1,  (unsigned __int8 *)v16,  (unsigned __int8 *)a3,  (uint64_t)v42,  v7);
            }
            __int128 v9 = v17;
            goto LABEL_79;
          }
        }

        else
        {
          LOBYTE(v15) = *v9;
        }

        if ((char)v12 < 0)
        {
          uint64_t v28 = (void **)v42[0];
          v42[1] = (void *)1;
        }

        else
        {
          HIBYTE(v43) = 1;
          uint64_t v28 = v42;
        }

        *(_BYTE *)uint64_t v28 = v15;
        *((_BYTE *)v28 + 1) = 0;
        ++v9;
      }

LABEL_79:
      if (v9 != a3)
      {
        int v32 = *v9;
        if (v32 != 93)
        {
          uint64_t v34 = v9 + 1;
          if (v9 + 1 != a3 && v32 == 45 && *v34 != 93)
          {
            memset(&__p, 0, sizeof(__p));
            char v35 = v9 + 2;
            if (v9 + 2 != a3 && *v34 == 91 && *v35 == 46)
            {
              uint64_t v36 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>( a1,  v9 + 3,  a3,  (uint64_t)&__p);
              goto LABEL_123;
            }

            if ((v5 | 0x40) == 0x40)
            {
              LODWORD(v34) = *v34;
              if ((_DWORD)v34 == 92)
              {
                if ((_DWORD)v5) {
                  uint64_t v36 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>( (std::basic_regex<char> *)a1,  v9 + 2,  a3,  (uint64_t *)&__p);
                }
                else {
                  uint64_t v36 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>( (std::basic_regex<char> *)a1,  (unsigned __int8 *)v9 + 2,  (unsigned __int8 *)a3,  (uint64_t)&__p,  v7);
                }
LABEL_123:
                char v35 = (char *)v36;
LABEL_124:
                *(_OWORD *)BOOL v44 = *(_OWORD *)v42;
                unsigned int v38 = v43;
                v42[1] = 0LL;
                unint64_t v43 = 0LL;
                std::string v41 = __p;
                v42[0] = 0LL;
                v44[2] = v38;
                memset(&__p, 0, sizeof(__p));
                std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]( v7,  (char *)v44,  (char *)&v41);
                if (SHIBYTE(v44[2]) < 0) {
                  operator delete(v44[0]);
                }
                char v24 = 1;
LABEL_114:
                if (SHIBYTE(v43) < 0) {
                  operator delete(v42[0]);
                }
                __int128 v9 = v35;
                if ((v24 & 1) == 0) {
                  goto LABEL_118;
                }
                goto LABEL_117;
              }
            }

            else
            {
              LOBYTE(v34) = *v34;
            }

            __p.__r_.__value_.__s.__size_ = 1;
            LOWORD(__p.__r_.__value_.__l.__data_) = v34;
            goto LABEL_124;
          }
        }
      }

      if (SHIBYTE(v43) < 0)
      {
        if (v42[1])
        {
          if (v42[1] == (void *)1)
          {
            unsigned int v33 = (void **)v42[0];
LABEL_88:
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]( v7,  *(char *)v33);
LABEL_99:
            char v24 = 1;
            char v35 = v9;
            goto LABEL_114;
          }

          unsigned int v33 = (void **)v42[0];
LABEL_98:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]( v7,  *(char *)v33,  *((char *)v33 + 1));
          goto LABEL_99;
        }

        operator delete(v42[0]);
      }

      else if (HIBYTE(v43))
      {
        unsigned int v33 = v42;
        if (HIBYTE(v43) == 1) {
          goto LABEL_88;
        }
        goto LABEL_98;
      }

    unsigned int v38 = 2;
    goto LABEL_183;
  }

  __int128 v9 = *(void *)(v2 + 56);
  if (!v9) {
    goto LABEL_79;
  }
  URLString = (CFStringRef)0xAAAAAAAAAAAAAAAALL;
  std::string::__init_copy_ctor_external(&v91, *v8, v9);
LABEL_16:
  else {
    v93 = v91;
  }
  v95 = 0LL;
  else {
    v94 = v93;
  }
  int v10 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  if ((v94.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v11 = &v94;
  }
  else {
    uint64_t v11 = (std::string *)v94.__r_.__value_.__r.__words[0];
  }
  if ((v94.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v94.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v94.__r_.__value_.__l.__size_;
  }
  int v13 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x189604DB0], (const UInt8 *)v11, size, 0x8000100u, 0);
  if (v13)
  {
    unint64_t v14 = v95;
    v95 = v13;
    v96[0] = v14;
    ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(v96);
  }

  URLString = v95;
  v95 = 0LL;
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v95);
  if (URLString) {
    int v15 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  }
  else {
    int v15 = 0LL;
  }
  if (!v15)
  {
    ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&URLString);
    goto LABEL_79;
  }

  uint64_t v90 = (CFURLRef)0xAAAAAAAAAAAAAAAALL;
  uint64_t v90 = CFURLCreateWithString(v10, URLString, 0LL);
  uint64_t v16 = ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get;
  if (!v90) {
    uint64_t v16 = 0LL;
  }
  if (!v16)
  {
    uint64_t v18 = 0LL;
    unsigned int v38 = 2;
    goto LABEL_100;
  }

  std::vector<std::pair<unsigned long, const char *>>::pointer v17 = objc_alloc(MEMORY[0x189607948]);
  uint64_t v18 = (void *)[v17 initWithURL:v90 cachePolicy:1 timeoutInterval:*(double *)(v2 + 144)];
  if (!v18)
  {
    unsigned int v38 = 3;
    goto LABEL_100;
  }

  std::string::basic_string[abi:ne180100]<0>(&v94, "Connection");
  int v19 = (void *)(v2 + 120);
  uint64_t v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>( v2 + 120,  (uint64_t)&v94);
  int64x2_t v21 = (void *)(v2 + 128);
  if (v21 != (void *)v20) {
    [MEMORY[0x189607A80] setProperty:MEMORY[0x189604A88] forKey:*MEMORY[0x1896020B0] inRequest:v18];
  }
  CFTypeRef cf = 0LL;
  Mutable = CFDictionaryCreateMutable(v10, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  if (!Mutable) {
    goto LABEL_97;
  }
  uint64_t v23 = (void *)*v19;
  if ((void *)*v19 != v21)
  {
    do
    {
      v96[0] = 0LL;
      char v24 = *((char *)v23 + 55);
      if (v24 >= 0) {
        int64x2_t v25 = (const UInt8 *)(v23 + 4);
      }
      else {
        int64x2_t v25 = (const UInt8 *)v23[4];
      }
      if (v24 >= 0) {
        std::string::size_type v26 = *((unsigned __int8 *)v23 + 55);
      }
      else {
        std::string::size_type v26 = v23[5];
      }
      std::pair<const char *, const char *> v27 = CFStringCreateWithBytes(v10, v25, v26, 0x8000100u, 0);
      v95 = 0LL;
      v96[0] = v27;
      uint64_t v28 = *((char *)v23 + 79);
      if (v28 >= 0) {
        uint64_t v29 = (const UInt8 *)(v23 + 7);
      }
      else {
        uint64_t v29 = (const UInt8 *)v23[7];
      }
      if (v28 >= 0) {
        std::string::size_type v30 = *((unsigned __int8 *)v23 + 79);
      }
      else {
        std::string::size_type v30 = v23[8];
      }
      unint64_t v31 = CFStringCreateWithBytes(v10, v29, v30, 0x8000100u, 0);
      v95 = v31;
      v94.__r_.__value_.__l.__data_ = (std::string::pointer)v96[0];
      if (v96[0]) {
        CFRetain(v96[0]);
      }
      v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
      if (v31)
      {
        CFRetain(v31);
        if (v94.__r_.__value_.__r.__words[0]) {
          CFDictionaryAddValue(Mutable, v94.__r_.__value_.__l.__data_, v31);
        }
      }

      ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&v93.__r_.__value_.__l.__data_);
      ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&v94.__r_.__value_.__l.__data_);
      ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&v95);
      ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(v96);
      int v32 = (void *)v23[1];
      if (v32)
      {
        do
        {
          unsigned int v33 = v32;
          int v32 = (void *)*v32;
        }

        while (v32);
      }

      else
      {
        do
        {
          unsigned int v33 = (void *)v23[2];
          uint64_t v34 = *v33 == (void)v23;
          uint64_t v23 = v33;
        }

        while (!v34);
      }

      uint64_t v23 = v33;
    }

    while (v33 != v21);
  }

  char v35 = cf;
  CFTypeRef cf = Mutable;
  v94.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
  ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)&v94.__r_.__value_.__l.__data_);
  uint64_t v36 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  if (!cf) {
    uint64_t v36 = 0LL;
  }
  if (!v36) {
    goto LABEL_97;
  }
  unint64_t v88 = cf;
  if (cf)
  {
    CFRetain(cf);
    unsigned int v37 = v88;
  }

  else
  {
    unsigned int v37 = 0LL;
  }

  [v18 setAllHTTPHeaderFields:v37];
  ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef(&v88);
  uint64_t v39 = *(int *)(v2 + 112);
  else {
    int v40 = off_189E969A8[v39];
  }
  [v18 setHTTPMethod:v40];
  if (*(_DWORD *)(v2 + 112) != 3 || *(void *)(v2 + 72) == *(void *)(v2 + 80))
  {
    unsigned int v38 = 1;
    goto LABEL_99;
  }

  std::string::basic_string[abi:ne180100]<0>(&v94, "CONTENT-ENCODING");
  std::string v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>( v2 + 120,  (uint64_t)&v94);
  if (v21 == (void *)v41) {
    goto LABEL_94;
  }
  MEMORY[0x186E3C224](&v93);
  boost::algorithm::to_upper_copy<std::string>(&v94, v41 + 56, (std::locale *)&v93);
  int64x2_t v42 = std::string::compare(&v94, "GZIP");
  std::locale::~locale((std::locale *)&v93);
  if (v42)
  {
LABEL_94:
    unint64_t v43 = [MEMORY[0x189603F48] dataWithBytes:*(void *)(v2 + 72) length:*(void *)(v2 + 80) - *(void *)(v2 + 72)];
    unsigned int v38 = 1;
  }

  else
  {
    memset(&v94, 0, sizeof(v94));
    v85 = ctu::Compression::Compress(v2 + 72, (unint64_t *)&v94);
    if (v85)
    {
      unint64_t v43 = [MEMORY[0x189603F48] dataWithBytes:v94.__r_.__value_.__r.__words[0] length:v94.__r_.__value_.__l.__size_ - v94.__r_.__value_.__r.__words[0]];
      unsigned int v38 = 1;
    }

    else
    {
      unint64_t v43 = 0LL;
      unsigned int v38 = 3;
    }

    if (v94.__r_.__value_.__r.__words[0])
    {
      v94.__r_.__value_.__l.__size_ = v94.__r_.__value_.__r.__words[0];
      operator delete(v94.__r_.__value_.__l.__data_);
    }

    if (!v85) {
      goto LABEL_99;
    }
  }

  if (v43) {
    [v18 setHTTPBody:v43];
  }
  else {
LABEL_97:
  }
    unsigned int v38 = 3;
LABEL_99:
  ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef(&cf);
LABEL_100:
  ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::~SharedRef((const void **)&v90);
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&URLString);
  if (v38 != 1)
  {
    if (v18) {

    }
    goto LABEL_183;
  }

  if (!v18) {
    goto LABEL_195;
  }
  BOOL v44 = v18;
  if ((char)v86.__r_.__value_.__s.__size_ < 0)
  {
    if (!v86.__r_.__value_.__l.__size_) {
      goto LABEL_110;
    }
    uint64_t v45 = (std::string *)v86.__r_.__value_.__r.__words[0];
  }

  else
  {
    if (!v86.__r_.__value_.__s.__size_) {
      goto LABEL_110;
    }
    uint64_t v45 = &v86;
  }

  objc_msgSend( v18,  "setBoundInterfaceIdentifier:",  objc_msgSend(NSString, "stringWithCString:encoding:", v45, 4));
LABEL_110:
  int v46 = *(void *)(v2 + 32);
  unint64_t v47 = *(id *)(v46 + 8);
  if (v47) {
    goto LABEL_168;
  }
  std::string::size_type v48 = (void *)(v46 + 136);
  if (*(char *)(v46 + 159) < 0)
  {
    if (!*(void *)(v46 + 144)) {
      goto LABEL_117;
    }
    std::string::size_type v48 = (void *)*v48;
  }

  else if (!*(_BYTE *)(v46 + 159))
  {
LABEL_117:
    if (*(_BYTE *)(v46 + 132)) {
      BOOL v50 = (void *)[MEMORY[0x189607AA8] defaultSessionConfiguration];
    }
    else {
      BOOL v50 = (void *)[MEMORY[0x189607AA8] ephemeralSessionConfiguration];
    }
    goto LABEL_120;
  }

  int64_t v49 = objc_msgSend(NSString, "stringWithFormat:", @"%s", v48);
  BOOL v50 = (void *)[MEMORY[0x189607AA8] backgroundSessionConfigurationWithIdentifier:v49];
LABEL_120:
  std::basic_regex<char> v51 = v50;
  __int128 v52 = *(void *)(v2 + 32);
  if (*(void *)(v52 + 160)) {
    uint64_t v53 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  }
  else {
    uint64_t v53 = 0LL;
  }
  if (v53)
  {
    objc_msgSend(v50, "set_tlsTrustPinningPolicyName:");
    __int128 v52 = *(void *)(v2 + 32);
  }

  if (*(_BYTE *)(v52 + 172))
  {
    [v51 _setAllowsUCA:1];
    __int128 v52 = *(void *)(v2 + 32);
  }

  if (*(void *)(v52 + 88)) {
    unint64_t v54 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  }
  else {
    unint64_t v54 = 0LL;
  }
  if (v54)
  {
    objc_msgSend(v51, "set_CTDataConnectionServiceType:");
    __int128 v52 = *(void *)(v2 + 32);
  }

  unint64_t v55 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!*(void *)(v52 + 32)) {
    unint64_t v55 = 0LL;
  }
  if (v55)
  {
    objc_msgSend(v51, "setConnectionProxyDictionary:");
  }

  else
  {
    std::string v59 = *(const __CFString **)(v52 + 88);
    if (v59) {
      std::string v60 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
    }
    else {
      std::string v60 = 0LL;
    }
    if (v60 && CFStringCompare(v59, @"kCTDataConnectionServiceTypeInternet", 0LL)) {
      [v51 setConnectionProxyDictionary:MEMORY[0x189604A60]];
    }
  }

  uint64_t v56 = *(void *)(v2 + 32);
  if (*(_DWORD *)(v56 + 124))
  {
    objc_msgSend(v51, "setTLSMinimumSupportedProtocol:");
    uint64_t v56 = *(void *)(v2 + 32);
  }

  if (*(_DWORD *)(v56 + 128))
  {
    objc_msgSend(v51, "setTLSMaximumSupportedProtocol:");
    uint64_t v56 = *(void *)(v2 + 32);
  }

  __int128 v57 = *(unsigned __int8 **)(v56 + 104);
  if (v57)
  {
    [v51 setAllowsCellularAccess:*v57];
    uint64_t v56 = *(void *)(v2 + 32);
  }

  std::string v58 = (void *)(v56 + 40);
  if (*(char *)(v56 + 63) < 0)
  {
    if (!*(void *)(v56 + 48)) {
      goto LABEL_154;
    }
    std::string v58 = (void *)*v58;
    goto LABEL_153;
  }

  if (*(_BYTE *)(v56 + 63))
  {
LABEL_153:
    objc_msgSend( v51,  "set_sourceApplicationSecondaryIdentifier:",  objc_msgSend( NSString,  "stringWithCString:encoding:",  v58,  objc_msgSend(NSString, "defaultCStringEncoding")));
    uint64_t v56 = *(void *)(v2 + 32);
  }

LABEL_117:
      uint64_t v5 = (uint64_t)v9;
LABEL_118:
      if ((char *)v5 == v8)
      {
        if (v8 != a3)
        {
          if (*v8 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45LL);
            ++v8;
          }

          if (v8 != a3 && *v8 == 93) {
            return v8 + 1;
          }
        }

LABEL_139:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
  }

  return a2;
}

    if (++v59 == v64) {
      goto LABEL_146;
    }
    goto LABEL_143;
  }

  memset(&__s, 170, sizeof(__s));
  std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v88, (char *)&v89);
  int v19 = this->__ranges_.__begin_;
  if (this->__ranges_.__end_ == v19)
  {
LABEL_34:
    uint64_t v86 = 0;
    __int128 v22 = 1;
  }

  else
  {
    uint64_t v20 = 0LL;
    int64x2_t v21 = 3LL;
    while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( &v19->first.__r_.__value_.__r.__words[v21 - 3],  (void **)&__s.__r_.__value_.__l.__data_) << 24) > 0xFFFFFF || (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( &__s,  (void **)((char *)&this->__ranges_.__begin_->first.__r_.__value_.__l.__data_ + v21 * 8)) << 24) >= 0x1000000)
    {
      ++v20;
      int v19 = this->__ranges_.__begin_;
      v21 += 6LL;
    }

    __int128 v22 = 0;
    uint64_t v86 = 1;
  }

  if ((v86 & 1) == 0) {
    goto LABEL_118;
  }
  if ((v22 & 1) == 0) {
    goto LABEL_186;
  }
  uint64_t v11 = 2LL;
LABEL_37:
  char v24 = *a2->__current_;
  v89.__r_.__value_.__s.__data_[0] = v24;
  if (this->__icase_)
  {
    char v24 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)( this->__traits_.__ct_,  (char)v24);
    v89.__r_.__value_.__s.__data_[0] = v24;
  }

  int64x2_t v25 = this->__chars_.__begin_;
  std::string::size_type v26 = this->__chars_.__end_ - v25;
  if (v26)
  {
    if (v26 <= 1) {
      std::string::size_type v26 = 1LL;
    }
    do
    {
      std::pair<const char *, const char *> v27 = *v25++;
      if (v27 == v24) {
        goto LABEL_175;
      }
    }

    while (--v26);
  }

  uint64_t v28 = this->__neg_mask_;
  if (v28 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v24 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v24] & v28) == 0)
    {
      std::string::size_type v30 = (v28 >> 7) & 1;
      uint64_t v29 = v24 == 95 ? v30 : 0;
    }

    else
    {
      uint64_t v29 = 1;
    }

    std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__neg_chars_.__end_;
    int v32 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v24, end - this->__neg_chars_.__begin_);
    unsigned int v33 = v32 ? v32 : end;
    if ((v29 & 1) == 0 && v33 == end)
    {
LABEL_175:
      negate = 1;
      goto LABEL_176;
    }
  }

  uint64_t v34 = this->__ranges_.__begin_;
  char v35 = this->__ranges_.__end_;
  if (v34 != v35)
  {
    memset(&__s, 170, sizeof(__s));
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>( (uint64_t)&__s,  (uint64_t)&this->__traits_,  (char *)&v89,  &v89.__r_.__value_.__s.__data_[1]);
      uint64_t v34 = this->__ranges_.__begin_;
      char v35 = this->__ranges_.__end_;
    }

    else
    {
      __s.__r_.__value_.__s.__size_ = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v24;
    }

    if (v35 == v34)
    {
LABEL_67:
      unsigned int v38 = 0;
    }

    else
    {
      uint64_t v36 = 0LL;
      unsigned int v37 = 3LL;
      while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( &v34->first.__r_.__value_.__r.__words[v37 - 3],  (void **)&__s.__r_.__value_.__l.__data_) << 24) > 0xFFFFFF || (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( &__s,  (void **)((char *)&this->__ranges_.__begin_->first.__r_.__value_.__l.__data_ + v37 * 8)) << 24) >= 0x1000000)
      {
        ++v36;
        uint64_t v34 = this->__ranges_.__begin_;
        v37 += 6LL;
      }

      unsigned int v38 = 1;
      uint64_t v86 = 1;
    }

    if ((v38 & 1) != 0) {
      goto LABEL_177;
    }
  }

  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_170:
    if (v89.__r_.__value_.__s.__data_[0] < 0) {
      goto LABEL_177;
    }
    std::string v79 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v89.__r_.__value_.__s.__data_[0]] & v79) == 0)
    {
      v80 = (v79 >> 7) & 1;
      if (v89.__r_.__value_.__s.__data_[0] != 95) {
        v80 = 0;
      }
      if (v80 != 1) {
        goto LABEL_177;
      }
    }

    goto LABEL_175;
  }

  memset(&__s, 170, sizeof(__s));
  std::regex_traits<char>::__transform_primary<char *>( &__s,  (uint64_t)&this->__traits_,  (char *)&v89,  &v89.__r_.__value_.__s.__data_[1]);
  uint64_t v39 = this->__equivalences_.__begin_;
  int v40 = __s.__r_.__value_.__s.__size_;
  std::string v41 = (char *)this->__equivalences_.__end_ - (char *)v39;
  if (!v41)
  {
    if ((__s.__r_.__value_.__s.__size_ & 0x80) != 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    goto LABEL_170;
  }

  v85 = v11;
  int64x2_t v42 = 0LL;
  unint64_t v43 = v41 / 24;
  uint64_t v45 = __s.__r_.__value_.__l.__size_;
  BOOL v44 = (const void *)__s.__r_.__value_.__r.__words[0];
  if ((__s.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v46 = __s.__r_.__value_.__s.__size_;
  }
  else {
    int v46 = __s.__r_.__value_.__l.__size_;
  }
  if (v43 <= 1) {
    unint64_t v47 = 1LL;
  }
  else {
    unint64_t v47 = v41 / 24;
  }
  for (j = 1; ; j = v42 < v43)
  {
    int64_t v49 = &v39[v42];
    BOOL v50 = v49->__r_.__value_.__s.__size_;
    std::basic_regex<char> v51 = (char)v50;
    if ((v50 & 0x80u) != 0LL) {
      BOOL v50 = v49->__r_.__value_.__l.__size_;
    }
    if (v46 == v50) {
      break;
    }
LABEL_100:
    if (++v42 == v47)
    {
      if ((v40 & 0x80) != 0) {
LABEL_168:
      }
        operator delete(__s.__r_.__value_.__l.__data_);
      uint64_t v11 = v85;
      goto LABEL_170;
    }

void sub_1865EC854( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression( std::basic_regex<char> *this)
{
  if ((this->__flags_ & 2) == 0)
  {
    unint64_t v2 = (std::__node<char> *)operator new(0x18uLL);
    unsigned int v3 = this->__marked_count_ + 1;
    this->__marked_count_ = v3;
    std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
    first = end->__first_;
    v2->__vftable = (std::__node<char>_vtbl *)&off_189E957D0;
    v2[1].__vftable = (std::__node<char>_vtbl *)first;
    LODWORD(v2[2].__vftable) = v3;
    end->__first_ = v2;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression( std::basic_regex<char> *this, unsigned int a2)
{
  if ((this->__flags_ & 2) == 0)
  {
    uint64_t v4 = (std::__node<char> *)operator new(0x18uLL);
    std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
    first = end->__first_;
    v4->__vftable = (std::__node<char>_vtbl *)&off_189E95818;
    v4[1].__vftable = (std::__node<char>_vtbl *)first;
    LODWORD(v4[2].__vftable) = a2;
    end->__first_ = v4;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186E3BF90](exception, 11LL);
  __cxa_throw(exception, MEMORY[0x1896146C8], MEMORY[0x189614288]);
}

void sub_1865EC9C0(_Unwind_Exception *a1)
{
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline( void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline( void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  unint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  operator delete(__p);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186E3BF90](exception, 3LL);
  __cxa_throw(exception, MEMORY[0x1896146C8], MEMORY[0x189614288]);
}

void sub_1865ECA8C(_Unwind_Exception *a1)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>( std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v4 = a2;
  if (a2 != a3)
  {
    uint64_t v5 = *a2;
    std::basic_regex<char>::value_type v6 = v5;
    if ((char)v5 > 109)
    {
      switch((char)v5)
      {
        case 'n':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 10;
            goto LABEL_67;
          }

          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1LL;
            a4 = (uint64_t *)*a4;
          }

          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }

          __int16 v16 = 10;
          goto LABEL_79;
        case 'r':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 13;
            goto LABEL_67;
          }

          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1LL;
            a4 = (uint64_t *)*a4;
          }

          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }

          __int16 v16 = 13;
          goto LABEL_79;
        case 't':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 9;
            goto LABEL_67;
          }

          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1LL;
            a4 = (uint64_t *)*a4;
          }

          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }

          __int16 v16 = 9;
          goto LABEL_79;
        case 'u':
          if (v4 + 1 != a3)
          {
            int v7 = v4[1];
            if ((v7 & 0xF8) == 0x30 || (v7 & 0xFE) == 0x38 || (v7 | 0x20u) - 97 < 6)
            {
              v4 += 2;
              if (v4 != a3)
              {
                int v8 = *v4;
                if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6) {
                  goto LABEL_27;
                }
              }
            }
          }

          goto LABEL_89;
        case 'v':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 11;
            goto LABEL_67;
          }

          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1LL;
            a4 = (uint64_t *)*a4;
          }

          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }

          __int16 v16 = 11;
          break;
        case 'x':
LABEL_27:
          if (v4 + 1 == a3) {
            goto LABEL_89;
          }
          unsigned __int8 v9 = v4[1];
          char v10 = -48;
          if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38) {
            goto LABEL_32;
          }
          v9 |= 0x20u;
          char v10 = -87;
LABEL_32:
          if (v4 + 2 == a3) {
            goto LABEL_89;
          }
          unsigned __int8 v11 = v4[2];
          char v12 = -48;
          if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38) {
            goto LABEL_37;
          }
          v11 |= 0x20u;
          char v12 = -87;
LABEL_37:
          std::basic_regex<char>::value_type v13 = v11 + 16 * (v9 + v10) + v12;
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1LL;
              a4 = (uint64_t *)*a4;
            }

            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }

            *(_BYTE *)a4 = v13;
            *((_BYTE *)a4 + 1) = 0;
          }

          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v13);
          }

          v4 += 3;
          return v4;
        default:
          goto LABEL_51;
      }

      goto LABEL_79;
    }

    if ((char)v5 == 48)
    {
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1LL;
          a4 = (uint64_t *)*a4;
        }

        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }

        *(_WORD *)a4 = 0;
        return ++v4;
      }

      std::basic_regex<char>::value_type v6 = 0;
      goto LABEL_67;
    }

    if ((char)v5 != 99)
    {
      if ((char)v5 == 102)
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1LL;
            a4 = (uint64_t *)*a4;
          }

          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }

          __int16 v16 = 12;
LABEL_79:
          *(_WORD *)a4 = v16;
          return ++v4;
        }

        std::basic_regex<char>::value_type v6 = 12;
LABEL_67:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return ++v4;
      }

LABEL_51:
      if ((char)v5 != 95 && ((char)v5 < 0 || (a1->__traits_.__ct_->__tab_[v5] & 0x500) == 0))
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1LL;
            a4 = (uint64_t *)*a4;
          }

          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }

          *(_BYTE *)a4 = v5;
          *((_BYTE *)a4 + 1) = 0;
          return ++v4;
        }

        goto LABEL_67;
      }

    std::basic_regex<char>::value_type v15 = v31;
LABEL_52:
    *(void *)(a1 + 64) = v15;
    *(void *)(a1 + 72) = v22;
    *(void *)(a1 + 80) = v32;
    if (v9) {
      operator delete(v9);
    }
    goto LABEL_54;
  }

  *unsigned __int8 v9 = 95;
  __int128 v22 = (uint64_t)(v9 + 1);
LABEL_54:
  *(void *)(a1 + 72) = v22;
}

LABEL_89:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }

    if (v4 + 1 == a3) {
      goto LABEL_89;
    }
    unsigned __int8 v14 = v4[1];
    std::basic_regex<char>::value_type v15 = v14 & 0x1F;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1LL;
        a4 = (uint64_t *)*a4;
      }

      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }

      *(_BYTE *)a4 = v15;
      *((_BYTE *)a4 + 1) = 0;
    }

    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v15);
    }

    v4 += 2;
  }

  return v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char( std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2 = __c;
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    int v8 = (char *)operator new(0x30uLL);
    first = this->__end_->__first_;
    *(void *)int v8 = off_189E955D8;
    *((void *)v8 + 1) = first;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + memset(&context, 0, 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)( this->__traits_.__ct_,  v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }

  if ((flags & 8) != 0)
  {
    int v8 = (char *)operator new(0x30uLL);
    char v10 = this->__end_->__first_;
    *(void *)int v8 = off_189E95620;
    *((void *)v8 + 1) = v10;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + memset(&context, 0, 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = v2;
    goto LABEL_6;
  }

  uint64_t v5 = (std::__node<char> *)operator new(0x18uLL);
  std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
  int v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&off_189E95668;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LOBYTE(v5[2].__vftable) = v2;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1865ECF4C(_Unwind_Exception *a1)
{
  uint64_t v4 = v1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186E3BF90](exception, 4LL);
  __cxa_throw(exception, MEMORY[0x1896146C8], MEMORY[0x189614288]);
}

void sub_1865ECFC0(_Unwind_Exception *a1)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    int v8 = (std::locale *)operator new(0x30uLL);
    unsigned __int8 v9 = v8;
    first = this->__end_->__first_;
    unsigned __int8 v11 = off_189E956B0;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)v11;
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }

  if ((flags & 8) != 0)
  {
    int v8 = (std::locale *)operator new(0x30uLL);
    unsigned __int8 v9 = v8;
    first = this->__end_->__first_;
    unsigned __int8 v11 = off_189E956F8;
    goto LABEL_6;
  }

  uint64_t v5 = (std::__node<char> *)operator new(0x18uLL);
  std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
  int v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&off_189E95740;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LODWORD(v5[2].__vftable) = __i;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_189E955D8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_189E955D8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  operator delete(a1);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40LL))( *(void *)(result + 24),  *v3),  *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0LL;
    *(_DWORD *)a2 = -993;
  }

  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }

  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_189E95620;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_189E95620;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  operator delete(a1);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0LL;
    *(_DWORD *)a2 = -993;
  }

  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }

  *(void *)(a2 + 80) = v3;
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char( void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_char<char>::~__match_char( void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  operator delete(__p);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0LL;
    *(_DWORD *)a2 = -993;
  }

  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }

  *(void *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_189E956B0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_189E956B0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  operator delete(a1);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24LL * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }

      uint64_t v8 = 0LL;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40LL))( *(void *)(v7 + 24),  *(char *)(*(void *)v3 + v8));
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40LL))( *(void *)(v7 + 24),  *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }

  uint64_t v6 = 0LL;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 80) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_189E956F8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_189E956F8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  operator delete(a1);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24LL * v2 + 16))
  {
    uint64_t v4 = (unsigned __int8 **)(v3 + 24LL * v2);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }

      uint64_t v9 = v6;
      char v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v10++;
        if (v11 != v13) {
          break;
        }
        if (!--v9) {
          goto LABEL_8;
        }
      }
    }
  }

  uint64_t v8 = 0LL;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 80) = v8;
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref( void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  unsigned int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  operator delete(__p);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24LL * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24LL * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }

  else
  {
    uint64_t v10 = 0LL;
    *(_DWORD *)a2 = -993;
  }

  *(void *)(a2 + 80) = v10;
  return result;
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list( std::basic_regex<char> *this, BOOL __negate)
{
  uint64_t v4 = (char *)operator new(0xB0uLL);
  first = this->__end_->__first_;
  unsigned int flags_low = LOBYTE(this->__flags_);
  char v7 = flags_low & 1;
  int v8 = (flags_low >> 3) & 1;
  *((void *)v4 + 1) = first;
  std::locale::locale((std::locale *)v4 + 2, &this->__traits_.__loc_);
  *(_OWORD *)(v4 + memset(&context, 0, 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 8std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  v4[168] = __negate;
  v4[169] = v7;
  v4[170] = v8;
  std::locale::locale(&v13, (const std::locale *)v4 + 2);
  std::locale::name(&v14, &v13);
  std::string::size_type size = v14.__r_.__value_.__s.__size_;
  if ((v14.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  if (size == 1)
  {
    uint64_t v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v10 = &v14;
    }
    BOOL v11 = v10->__r_.__value_.__s.__data_[0] != 67;
  }

  else
  {
    BOOL v11 = 1;
    if ((char)v14.__r_.__value_.__s.__size_ < 0) {
LABEL_9:
    }
      operator delete(v14.__r_.__value_.__l.__data_);
  }

  std::locale::~locale(&v13);
  v4[171] = v11;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)v4;
  return (std::__bracket_expression<char, std::regex_traits<char>> *)v4;
}

void sub_1865ED890( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::string v14 = v10[14];
  if (v14)
  {
    v10[15] = v14;
    operator delete(v14);
  }

  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::basic_regex<char>::value_type v15 = v10[8];
  if (v15)
  {
    v10[9] = v15;
    operator delete(v15);
  }

  __int16 v16 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))*v12;
  if (*v12)
  {
    v10[6] = v16;
    operator delete(v16);
  }

  std::locale::~locale(v11);
  std::vector<std::pair<unsigned long, const char *>>::pointer v17 = v10[1];
  if (v17) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v17 + 1))(v17);
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24), a2);
    unsigned int v5 = *(_BYTE **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v6 = (unint64_t *)(a1 + 40);
      unint64_t v7 = *(void *)(a1 + 40);
      int v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          int v12 = operator new(v11);
        }
        else {
          int v12 = 0LL;
        }
        uint64_t v20 = &v8[(void)v12];
        int64x2_t v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          __int128 v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }

          while (v5 != (_BYTE *)v7);
LABEL_45:
          unsigned int v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }

        goto LABEL_46;
      }

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  unint64_t v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }

  unint64_t v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }

  unint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }

  std::locale::~locale(a1 + 2);
  unsigned int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8LL))(v5);
  }
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  uint64_t v6 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }

  uint64_t v6 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }

  unint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }

  std::locale::~locale(a1 + 2);
  unsigned int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8LL))(v5);
  }
  operator delete(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec( const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v11 = 0LL;
    BOOL negate = this->__negate_;
LABEL_176:
    int v86 = negate;
    goto LABEL_177;
  }

  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_36;
  }
  char v6 = *current;
  LOBYTE(v8std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = *current;
  char v7 = current[1];
  HIBYTE(v8std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v7;
  if (this->__icase_)
  {
    LOBYTE(v8std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)( this->__traits_.__ct_,  v6);
    HIBYTE(v8std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)( this->__traits_.__ct_,  v7);
  }

  __s.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  __s.__r_.__value_.__l.__cap_ = 0x2AAAAAAAAAAAAAALL;
  __s.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAA00AAAALL;
  LOWORD(__s.__r_.__value_.__l.__data_) = v88;
  std::__get_collation_name(&v89, (const char *)&__s);
  std::string __p = v89;
  std::string::size_type size = v89.__r_.__value_.__s.__size_;
  int v9 = (char)v89.__r_.__value_.__s.__size_;
  if ((v89.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = v89.__r_.__value_.__l.__size_;
  }
  if (size) {
    goto LABEL_9;
  }
  if ((char)__s.__r_.__value_.__s.__size_ < 0)
  {
    std::string::size_type v13 = __s.__r_.__value_.__l.__size_;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (__s.__r_.__value_.__l.__size_ >= 3)
    {
LABEL_11:
      operator delete(p_s);
      goto LABEL_16;
    }

LABEL_69:
    (*(void (**)(std::string *__return_ptr, const std::collate<char> *, std::string *, char *))(*(void *)this->__traits_.__col_ + 32LL))( &v89,  this->__traits_.__col_,  p_s,  (char *)p_s + v13);
    if (v9 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v89;
    if ((char)v89.__r_.__value_.__s.__size_ < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 1 && __p.__r_.__value_.__l.__size_ != 12)
      {
        *__p.__r_.__value_.__l.__data_ = 0;
        __p.__r_.__value_.__l.__size_ = 0LL;
        goto LABEL_9;
      }
    }

    else if (v89.__r_.__value_.__s.__size_ != 12 && v89.__r_.__value_.__s.__size_ != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      __p.__r_.__value_.__s.__size_ = 0;
LABEL_9:
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
      goto LABEL_11;
    }

    std::string::operator=(&__p, &__s);
    goto LABEL_9;
  }

  std::string::size_type v13 = __s.__r_.__value_.__s.__size_;
  if (__s.__r_.__value_.__s.__size_ < 3u)
  {
    p_s = &__s;
    goto LABEL_69;
  }

LABEL_16:
  if (((char)__p.__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    if (__p.__r_.__value_.__s.__size_) {
      goto LABEL_18;
    }
LABEL_36:
    int v86 = 0;
    uint64_t v11 = 1LL;
    goto LABEL_37;
  }

  std::string::size_type v23 = __p.__r_.__value_.__l.__size_;
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v23) {
    goto LABEL_36;
  }
LABEL_18:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v15 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v15)
  {
    uint64_t v16 = v15 >> 1;
    p_second = &begin->second;
    do
    {
      p_second += 2;
      --v16;
    }

    while (v16);
  }

  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    int v86 = 0;
LABEL_118:
    if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
      goto LABEL_148;
    }
    memset(&__s, 170, sizeof(__s));
    std::regex_traits<char>::__transform_primary<char *>(&__s, (uint64_t)&this->__traits_, (char *)&v88, (char *)&v89);
    std::vector<std::string>::pointer v56 = this->__equivalences_.__begin_;
    uint64_t v57 = __s.__r_.__value_.__s.__size_;
    int64_t v58 = (char *)this->__equivalences_.__end_ - (char *)v56;
    if (!v58)
    {
LABEL_146:
      if ((v57 & 0x80) != 0) {
LABEL_147:
      }
        operator delete(__s.__r_.__value_.__l.__data_);
      goto LABEL_148;
    }

    unint64_t v59 = 0LL;
    unint64_t v60 = v58 / 24;
    size_t v62 = __s.__r_.__value_.__l.__size_;
    std::locale v61 = (const void *)__s.__r_.__value_.__r.__words[0];
    if ((__s.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v63 = __s.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v63 = __s.__r_.__value_.__l.__size_;
    }
    if (v60 <= 1) {
      uint64_t v64 = 1LL;
    }
    else {
      uint64_t v64 = v58 / 24;
    }
    for (BOOL i = 1; ; BOOL i = v59 < v60)
    {
      std::vector<std::string> v66 = &v56[v59];
      std::string::size_type v67 = v66->__r_.__value_.__s.__size_;
      int v68 = (char)v67;
      if ((v67 & 0x80u) != 0LL) {
        std::string::size_type v67 = v66->__r_.__value_.__l.__size_;
      }
      if (v63 != v67) {
        goto LABEL_139;
      }
      std::string v69 = v68 >= 0 ? &v56[v59] : (std::string *)v66->__r_.__value_.__r.__words[0];
      if ((v57 & 0x80) == 0) {
        break;
      }
      LOBYTE(v85) = i;
      unint64_t v71 = v56;
      int64_t v72 = v61;
      size_t v73 = v62;
      if (!memcmp(v61, v69, v62))
      {
        operator delete(__s.__r_.__value_.__l.__data_);
        if ((v85 & 1) != 0) {
          goto LABEL_184;
        }
LABEL_145:
        int v86 = 1;
LABEL_148:
        if ((char)v88 < 0)
        {
          neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
          goto LABEL_161;
        }

        std::regex_traits<char>::char_class_type mask = this->__mask_;
        tab = this->__traits_.__ct_->__tab_;
        std::ctype_base::mask v76 = tab[v88];
        if ((v76 & mask) == 0 && (v88 != 95 || (mask & 0x80) == 0)
          || SHIBYTE(v88) < 0
          || (tab[HIBYTE(v88)] & mask) == 0 && ((mask & 0x80) == 0 || HIBYTE(v88) != 95))
        {
          neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
LABEL_161:
          if (SHIBYTE(v88) < 0) {
            goto LABEL_184;
          }
          if ((this->__traits_.__ct_->__tab_[HIBYTE(v88)] & neg_mask) != 0
            || (int v78 = 1, HIBYTE(v88) == 95) && (neg_mask & 0x80) != 0)
          {
LABEL_165:
            int v78 = v86;
          }

    xpc_release(object);
  }

  size_t v18 = (void **)v16;
  std::vector<std::shared_ptr<ctu::RestResourceConnection>>::__destroy_vector::operator()[abi:ne180100](&v18);
}

LABEL_185:
          int v86 = v78;
LABEL_186:
          uint64_t v11 = 2LL;
          goto LABEL_177;
        }

LABEL_184:
        int v78 = 1;
        goto LABEL_185;
      }

      ++v59;
      size_t v62 = v73;
      std::locale v61 = v72;
      std::vector<std::string>::pointer v56 = v71;
      if (v59 == v64) {
        goto LABEL_147;
      }
LABEL_143:
      ;
    }

    if (!(_DWORD)v57)
    {
LABEL_144:
      if (i) {
        goto LABEL_184;
      }
      goto LABEL_145;
    }

    uint64_t v70 = 0LL;
    while (__s.__r_.__value_.__s.__data_[v70] == v69->__r_.__value_.__s.__data_[v70])
    {
      if (v57 == ++v70) {
        goto LABEL_144;
      }
    }

LABEL_104:
    ;
  }

  if (v51 >= 0) {
    __int128 v52 = &v39[v42];
  }
  else {
    __int128 v52 = (std::string *)v49->__r_.__value_.__r.__words[0];
  }
  if ((v40 & 0x80) == 0)
  {
    if (!(_DWORD)v40)
    {
LABEL_105:
      int v86 = 1;
      uint64_t v11 = v85;
      if (!j) {
        goto LABEL_170;
      }
      goto LABEL_177;
    }

    uint64_t v53 = 0LL;
    while (__s.__r_.__value_.__s.__data_[v53] == v52->__r_.__value_.__s.__data_[v53])
    {
      if (v40 == ++v53) {
        goto LABEL_105;
      }
    }

    goto LABEL_100;
  }

  LOBYTE(v83) = j;
  stat v84 = v39;
  unint64_t v54 = v44;
  size_t v55 = v45;
  if (memcmp(v44, v52, v45))
  {
    ++v42;
    size_t v45 = v55;
    BOOL v44 = v54;
    std::vector<std::string>::pointer v39 = v84;
    if (v42 == v47) {
      goto LABEL_168;
    }
    goto LABEL_104;
  }

  operator delete(__s.__r_.__value_.__l.__data_);
  int v86 = 1;
  uint64_t v11 = v85;
  if ((v83 & 1) == 0) {
    goto LABEL_170;
  }
LABEL_177:
  if (v86 == this->__negate_)
  {
    first = 0LL;
    int v82 = -993;
  }

  else
  {
    a2->__current_ += v11;
    first = this->__first_;
    int v82 = -995;
  }

  a2->__do_ = v82;
  a2->__node_ = first;
}

void sub_1865EE5A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unsigned int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48LL;
        std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v4);
      }

      while ((void *)v4 != v2);
      unsigned int v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(uint64_t a1)
{
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  return a1;
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unsigned int v5 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    char v6 = __p;
  }
  else {
    char v6 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    unsigned int v5 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32LL))( *(void *)(a2 + 16),  v6,  &v5[(void)v6]);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1865EE76C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::__init_with_size[abi:ne180100]<char *,char *>( void *result, char *a2, char *a3, unint64_t a4)
{
  uint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8LL) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    void v4[2] = v9 | 0x8000000000000000LL;
    void *v4 = result;
    uint64_t v4 = result;
  }

  else
  {
    *((_BYTE *)result + 23) = a4;
  }

  while (a2 != a3)
  {
    char v10 = *a2++;
    *(_BYTE *)uint64_t v4 = v10;
    uint64_t v4 = (void *)((char *)v4 + 1);
  }

  *(_BYTE *)uint64_t v4 = 0;
  return result;
}

void std::regex_traits<char>::__transform_primary<char *>(void *a1, uint64_t a2, char *a3, char *a4)
{
  char v6 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    char v7 = __p;
  }
  else {
    char v7 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    char v6 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32LL))( *(void *)(a2 + 16),  v7,  &v6[(void)v7]);
  uint64_t v8 = *((unsigned __int8 *)a1 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0LL) {
    uint64_t v8 = a1[1];
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        char v10 = a1;
      }
      else {
        char v10 = (_BYTE *)*a1;
      }
      v10[11] = v10[3];
    }

    else if (v9 < 0)
    {
      *(_BYTE *)*a1 = 0;
      a1[1] = 0LL;
    }

    else
    {
      *(_BYTE *)a1 = 0;
      *((_BYTE *)a1 + 23) = 0;
    }
  }

  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1865EE924( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186E3BF90](exception, 5LL);
  __cxa_throw(exception, MEMORY[0x1896146C8], MEMORY[0x189614288]);
}

void sub_1865EE978(_Unwind_Exception *a1)
{
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>( uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  for (uint64_t i = 0LL; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_15;
    }
  }

  if (&a2[i] == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>(&v10, a1, a2, &a2[i]);
  *(_OWORD *)a4 = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
  std::string::size_type cap = v10.__r_.__value_.__l.__cap_;
  *(void *)(a4 + 16) = v10.__r_.__value_.__l.__cap_;
  std::string::size_type v8 = HIBYTE(cap);
  if ((v8 & 0x80u) != 0LL) {
    std::string::size_type v8 = *(void *)(a4 + 8);
  }
  if (v8 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return (uint64_t)&a2[i + 2];
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>( std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v6 = (char)*a2;
  if (v6 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119) {
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>( a1,  a2,  a3,  (uint64_t *)a4);
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95LL);
        return a2 + 1;
      }

      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }

    else
    {
      if (v6 == 98)
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 1LL;
          a4 = *(void *)a4;
        }

        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }

        *(_WORD *)a4 = 8;
        return a2 + 1;
      }

      if (v6 != 100) {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>( a1,  a2,  a3,  (uint64_t *)a4);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }

    *(_DWORD *)(a5 + 160) = v8;
    return a2 + 1;
  }

  if (v6 <= 82)
  {
    if (!*a2)
    {
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 1LL;
        a4 = *(void *)a4;
      }

      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }

      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 1) = 0;
      return a2 + 1;
    }

    if (v6 == 68)
    {
      int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_22:
      *(_DWORD *)(a5 + 164) = v7;
      return a2 + 1;
    }

    return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>( a1,  a2,  a3,  (uint64_t *)a4);
  }

  if (v6 == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_22;
  }

  if (v6 != 87) {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>( a1,  a2,  a3,  (uint64_t *)a4);
  }
  *(_DWORD *)(a5 + 164) |= 0x500u;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5);
  return a2 + 1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>( std::basic_regex<char> *a1, char *a2, char *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_80:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  std::basic_regex<char>::value_type v6 = *a2;
  if (v5 > 97)
  {
    switch(*a2)
    {
      case 'n':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 10;
          break;
        }

        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1LL;
          a4 = (uint64_t *)*a4;
        }

        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }

        __int16 v13 = 10;
        goto LABEL_77;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_25;
      case 'r':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 13;
          break;
        }

        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1LL;
          a4 = (uint64_t *)*a4;
        }

        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }

        __int16 v13 = 13;
        goto LABEL_77;
      case 't':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 9;
          break;
        }

        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1LL;
          a4 = (uint64_t *)*a4;
        }

        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }

        __int16 v13 = 9;
        goto LABEL_77;
      case 'v':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 11;
          break;
        }

        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1LL;
          a4 = (uint64_t *)*a4;
        }

        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }

        __int16 v13 = 11;
        goto LABEL_77;
      default:
        if (v5 == 98)
        {
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1LL;
              a4 = (uint64_t *)*a4;
            }

            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }

            __int16 v13 = 8;
            goto LABEL_77;
          }

          std::basic_regex<char>::value_type v7 = 8;
        }

        else
        {
          if (v5 != 102) {
            goto LABEL_25;
          }
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1LL;
              a4 = (uint64_t *)*a4;
            }

            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }

            __int16 v13 = 12;
            goto LABEL_77;
          }

          std::basic_regex<char>::value_type v7 = 12;
        }

        break;
    }

LABEL_62:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
    return a2 + 1;
  }

  if (v5 > 91)
  {
    if (v5 == 92)
    {
LABEL_16:
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1LL;
          a4 = (uint64_t *)*a4;
        }

        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }

        *(_BYTE *)a4 = v6;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }

      std::basic_regex<char>::value_type v7 = *a2;
      goto LABEL_62;
    }

    if (v5 != 97) {
      goto LABEL_25;
    }
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1LL;
        a4 = (uint64_t *)*a4;
      }

      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }

      __int16 v13 = 7;
LABEL_77:
      *(_WORD *)a4 = v13;
      return a2 + 1;
    }

    std::basic_regex<char>::value_type v7 = 7;
    goto LABEL_62;
  }

  if (v5 == 34 || v5 == 47) {
    goto LABEL_16;
  }
LABEL_25:
  if ((v6 & 0xF8) != 0x30) {
    goto LABEL_80;
  }
  std::basic_regex<char>::value_type v8 = v5 - 48;
  int v9 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v9 & 0xF8) != 0x30) {
      goto LABEL_49;
    }
    std::basic_regex<char>::value_type v8 = *v9 + 8 * v8 - 48;
    if (a2 + 2 != a3)
    {
      char v10 = a2[2];
      int v11 = v10 & 0xF8;
      std::basic_regex<char>::value_type v12 = v10 + 8 * v8 - 48;
      if (v11 == 48) {
        int v9 = a2 + 3;
      }
      else {
        int v9 = a2 + 2;
      }
      if (v11 == 48) {
        std::basic_regex<char>::value_type v8 = v12;
      }
      goto LABEL_49;
    }
  }

  int v9 = a3;
LABEL_49:
  if (a4)
  {
    if (*((char *)a4 + 23) < 0)
    {
      a4[1] = 1LL;
      a4 = (uint64_t *)*a4;
    }

    else
    {
      *((_BYTE *)a4 + 23) = 1;
    }

    *(_BYTE *)a4 = v8;
    *((_BYTE *)a4 + 1) = 0;
  }

  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
  }

  return v9;
}

    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
    return a2 + 1;
  }

  if (v5 > 91)
  {
    if (v5 == 92)
    {
LABEL_16:
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1LL;
          a4 = (uint64_t *)*a4;
        }

        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }

        *(_BYTE *)a4 = v6;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }

      std::basic_regex<char>::value_type v7 = *a2;
      goto LABEL_62;
    }

    if (v5 != 97) {
      goto LABEL_25;
    }
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1LL;
        a4 = (uint64_t *)*a4;
      }

      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }

      __int16 v13 = 7;
LABEL_77:
      *(_WORD *)a4 = v13;
      return a2 + 1;
    }

    std::basic_regex<char>::value_type v7 = 7;
    goto LABEL_62;
  }

  if (v5 == 34 || v5 == 47) {
    goto LABEL_16;
  }
LABEL_25:
  if ((v6 & 0xF8) != 0x30) {
    goto LABEL_80;
  }
  std::basic_regex<char>::value_type v8 = v5 - 48;
  int v9 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v9 & 0xF8) != 0x30) {
      goto LABEL_49;
    }
    std::basic_regex<char>::value_type v8 = *v9 + 8 * v8 - 48;
    if (a2 + 2 != a3)
    {
      char v10 = a2[2];
      int v11 = v10 & 0xF8;
      std::basic_regex<char>::value_type v12 = v10 + 8 * v8 - 48;
      if (v11 == 48) {
        int v9 = a2 + 3;
      }
      else {
        int v9 = a2 + 2;
      }
      if (v11 == 48) {
        std::basic_regex<char>::value_type v8 = v12;
      }
      goto LABEL_49;
    }
  }

  int v9 = a3;
LABEL_49:
  if (a4)
  {
    if (*((char *)a4 + 23) < 0)
    {
      a4[1] = 1LL;
      a4 = (uint64_t *)*a4;
    }

    else
    {
      *((_BYTE *)a4 + 23) = 1;
    }

    *(_BYTE *)a4 = v8;
    *((_BYTE *)a4 + 1) = 0;
  }

  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
  }

  return v9;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]( uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  if (*(_BYTE *)(a1 + 170))
  {
    if (*(_BYTE *)(a1 + 169))
    {
      for (unint64_t i = 0LL; ; ++i)
      {
        unint64_t v7 = v4[23] < 0 ? *((void *)v4 + 1) : v4[23];
        if (i >= v7) {
          break;
        }
        std::basic_regex<char>::value_type v8 = v4;
        if (v4[23] < 0) {
          std::basic_regex<char>::value_type v8 = *(char **)v4;
        }
        char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40LL))( *(void *)(a1 + 24),  v8[i]);
        char v10 = v4;
        if (v4[23] < 0) {
          char v10 = *(char **)v4;
        }
        v10[i] = v9;
      }

      for (unint64_t j = 0LL; ; ++j)
      {
        unint64_t v12 = v3[23] < 0 ? *((void *)v3 + 1) : v3[23];
        if (j >= v12) {
          break;
        }
        __int16 v13 = v3;
        if (v3[23] < 0) {
          __int16 v13 = *(char **)v3;
        }
        char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40LL))( *(void *)(a1 + 24),  v13[j]);
        uint64_t v15 = v3;
        if (v3[23] < 0) {
          uint64_t v15 = *(char **)v3;
        }
        v15[j] = v14;
      }
    }

    else
    {
      for (unint64_t k = 0LL; ; ++k)
      {
        unint64_t v18 = a2[23] < 0 ? *((void *)a2 + 1) : a2[23];
        if (k >= v18) {
          break;
        }
        uint64_t v19 = a2;
        if (a2[23] < 0) {
          uint64_t v19 = *(char **)a2;
        }
        unint64_t v20 = a2;
        if (a2[23] < 0) {
          unint64_t v20 = *(char **)a2;
        }
        v20[k] = v19[k];
      }

      for (unint64_t m = 0LL; ; ++m)
      {
        unint64_t v22 = a3[23] < 0 ? *((void *)a3 + 1) : a3[23];
        if (m >= v22) {
          break;
        }
        std::string::size_type v23 = a3;
        if (a3[23] < 0) {
          std::string::size_type v23 = *(char **)a3;
        }
        unsigned __int8 v24 = a3;
        if (a3[23] < 0) {
          unsigned __int8 v24 = *(char **)a3;
        }
        v24[m] = v23[m];
      }
    }

    if (v4[23] < 0)
    {
      unint64_t v26 = v4;
      uint64_t v4 = *(char **)v4;
      uint64_t v25 = *((void *)v26 + 1);
    }

    else
    {
      uint64_t v25 = v4[23];
    }

    std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&v39, a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      std::regex_traits<char>::char_class_type v28 = v3;
      uint64_t v3 = *(char **)v3;
      uint64_t v27 = *((void *)v28 + 1);
    }

    else
    {
      uint64_t v27 = v3[23];
    }

    std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)v37, a1 + 16, v3, &v3[v27]);
    *(_OWORD *)int64_t v41 = v39;
    uint64_t v42 = v40;
    uint64_t v40 = 0LL;
    *(_OWORD *)std::string __p = *(_OWORD *)v37;
    uint64_t v44 = v38;
    v37[0] = 0LL;
    v37[1] = 0LL;
    uint64_t v38 = 0LL;
    __int128 v39 = 0uLL;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((void **)(a1 + 88), (__int128 *)v41);
    if (SHIBYTE(v44) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v42) < 0) {
      operator delete(v41[0]);
    }
    if (SHIBYTE(v38) < 0) {
      operator delete(v37[0]);
    }
    if (SHIBYTE(v40) < 0)
    {
      char v29 = (void *)v39;
LABEL_79:
      operator delete(v29);
    }
  }

  else
  {
    if (a2[23] < 0) {
      uint64_t v16 = *((void *)a2 + 1);
    }
    else {
      uint64_t v16 = a2[23];
    }
    if (*(_BYTE *)(a1 + 169))
    {
      unint64_t v31 = a2;
      if (a2[23] < 0) {
        unint64_t v31 = *(char **)a2;
      }
      char v32 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40LL))( *(void *)(a1 + 24),  *v31);
      unsigned int v33 = v4;
      if (v4[23] < 0) {
        unsigned int v33 = *(_BYTE **)v4;
      }
      *unsigned int v33 = v32;
      std::vector<std::pair<std::string, std::string>>::pointer v34 = v3;
      if (v3[23] < 0) {
        std::vector<std::pair<std::string, std::string>>::pointer v34 = *(char **)v3;
      }
      char v35 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40LL))( *(void *)(a1 + 24),  *v34);
      unint64_t v36 = v3;
      if (v3[23] < 0) {
        unint64_t v36 = *(_BYTE **)v3;
      }
      *unint64_t v36 = v35;
    }

    *(_OWORD *)int64_t v41 = *(_OWORD *)v4;
    uint64_t v42 = *((void *)v4 + 2);
    *((void *)v4 + 1) = 0LL;
    *((void *)v4 + 2) = 0LL;
    *(void *)uint64_t v4 = 0LL;
    *(_OWORD *)std::string __p = *(_OWORD *)v3;
    uint64_t v44 = *((void *)v3 + 2);
    *(void *)uint64_t v3 = 0LL;
    *((void *)v3 + 1) = 0LL;
    *((void *)v3 + 2) = 0LL;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((void **)(a1 + 88), (__int128 *)v41);
    if (SHIBYTE(v44) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v42) < 0)
    {
      char v29 = v41[0];
      goto LABEL_79;
    }
  }

void sub_1865EF238( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21)
{
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]( uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(_BYTE *)(a1 + 169))
  {
    __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    std::basic_regex<char>::value_type v8 = *(_WORD **)(a1 + 120);
    unint64_t v16 = *(void *)(a1 + 128);
    if (*(_BYTE *)(a1 + 170))
    {
      uint64_t v17 = *(void *)(a1 + 112);
      uint64_t v18 = (uint64_t)v8 - v17;
      if ((uint64_t)v8 - v17 > -3)
      {
        uint64_t v19 = v18 >> 1;
        unint64_t v20 = v16 - v17;
        if (v20 <= (v18 >> 1) + 1) {
          unint64_t v21 = v19 + 1;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v20 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v22 = v21;
        }
        if (v22) {
          uint64_t v22 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v22);
        }
        else {
          uint64_t v23 = 0LL;
        }
        uint64_t v25 = (_WORD *)(v22 + 2 * v19);
        uint64_t v26 = v22 + 2 * v23;
        *uint64_t v25 = v6;
        unsigned __int8 v24 = v25 + 1;
        uint64_t v37 = *(char **)(a1 + 112);
        uint64_t v27 = *(char **)(a1 + 120);
        if (v27 == v37) {
          goto LABEL_46;
        }
        do
        {
          __int16 v38 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--uint64_t v25 = v38;
        }

        while (v27 != v37);
        goto LABEL_45;
      }
    }

    else
    {
      uint64_t v30 = *(void *)(a1 + 112);
      uint64_t v31 = (uint64_t)v8 - v30;
      if ((uint64_t)v8 - v30 > -3)
      {
        uint64_t v32 = v31 >> 1;
        unint64_t v33 = v16 - v30;
        if (v33 <= (v31 >> 1) + 1) {
          unint64_t v34 = v32 + 1;
        }
        else {
          unint64_t v34 = v33;
        }
        if (v33 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v35 = v34;
        }
        if (v35) {
          uint64_t v35 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v35);
        }
        else {
          uint64_t v36 = 0LL;
        }
        uint64_t v25 = (_WORD *)(v35 + 2 * v32);
        uint64_t v26 = v35 + 2 * v36;
        *uint64_t v25 = v6;
        unsigned __int8 v24 = v25 + 1;
        __int128 v39 = *(char **)(a1 + 112);
        uint64_t v27 = *(char **)(a1 + 120);
        if (v27 == v39) {
          goto LABEL_46;
        }
        do
        {
          __int16 v40 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--uint64_t v25 = v40;
        }

        while (v27 != v39);
        goto LABEL_45;
      }
    }

LABEL_49:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24), a2);
  __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40LL))( *(void *)(a1 + 24),  a3) << 8);
  std::basic_regex<char>::value_type v8 = *(_WORD **)(a1 + 120);
  unint64_t v7 = *(void *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
LABEL_24:
    _WORD *v8 = v6;
    unsigned __int8 v24 = v8 + 1;
    goto LABEL_48;
  }

  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = (uint64_t)v8 - v9;
  uint64_t v11 = v10 >> 1;
  unint64_t v12 = v7 - v9;
  if (v12 <= (v10 >> 1) + 1) {
    unint64_t v13 = v11 + 1;
  }
  else {
    unint64_t v13 = v12;
  }
  if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v14 = v13;
  }
  if (v14) {
    uint64_t v14 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v14);
  }
  else {
    uint64_t v15 = 0LL;
  }
  uint64_t v25 = (_WORD *)(v14 + 2 * v11);
  uint64_t v26 = v14 + 2 * v15;
  *uint64_t v25 = v6;
  unsigned __int8 v24 = v25 + 1;
  std::regex_traits<char>::char_class_type v28 = *(char **)(a1 + 112);
  uint64_t v27 = *(char **)(a1 + 120);
  if (v27 == v28) {
    goto LABEL_46;
  }
  do
  {
    __int16 v29 = *((_WORD *)v27 - 1);
    v27 -= 2;
    *--uint64_t v25 = v29;
  }

  while (v27 != v28);
LABEL_45:
  uint64_t v27 = *(char **)(a1 + 112);
LABEL_46:
  *(void *)(a1 + 112) = v25;
  *(void *)(a1 + 120) = v24;
  *(void *)(a1 + 12std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v26;
  if (v27) {
    operator delete(v27);
  }
LABEL_48:
  *(void *)(a1 + 120) = v24;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186E3BF90](exception, 1LL);
  __cxa_throw(exception, MEMORY[0x1896146C8], MEMORY[0x189614288]);
}

void sub_1865EF4C4(_Unwind_Exception *a1)
{
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100]( void *a1, uint64_t a2)
{
  unint64_t v3 = a1[18];
  if (v3 >= a1[19])
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>(a1 + 17, (__int128 *)a2);
  }

  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external( (std::string *)a1[18],  *(const std::string::value_type **)a2,  *(void *)(a2 + 8));
    }

    else
    {
      __int128 v4 = *(_OWORD *)a2;
      *(void *)(v3 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v3 = v4;
    }

    uint64_t result = v3 + 24;
    a1[18] = v3 + 24;
  }

  a1[18] = result;
  return result;
}

void sub_1865EF544(_Unwind_Exception *a1)
{
  *(void *)(v1 + 144) = v2;
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__lookup_collatename<char const*>( std::string *a1, uint64_t a2, char *a3, char *a4)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  if ((char)__s.__r_.__value_.__s.__size_ < 0)
  {
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_10;
    }
  }

  else
  {
    if (!__s.__r_.__value_.__s.__size_) {
      return;
    }
    p_s = &__s;
  }

  std::__get_collation_name(&v12, (const char *)p_s);
  *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
  std::string::size_type cap = v12.__r_.__value_.__l.__cap_;
  a1->__r_.__value_.__l.__cap_ = v12.__r_.__value_.__l.__cap_;
  std::string::size_type size = HIBYTE(cap);
  if ((size & 0x80u) != 0LL) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (size) {
    goto LABEL_8;
  }
  if ((char)__s.__r_.__value_.__s.__size_ < 0)
  {
    std::string::size_type v9 = __s.__r_.__value_.__l.__size_;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (__s.__r_.__value_.__l.__size_ < 3)
    {
LABEL_16:
      (*(void (**)(std::string *__return_ptr, void, std::string *, char *))(**(void **)(a2 + 16) + 32LL))( &v12,  *(void *)(a2 + 16),  p_s,  (char *)p_s + v9);
      *a1 = v12;
      if ((char)a1->__r_.__value_.__s.__size_ < 0)
      {
        std::string::size_type v11 = a1->__r_.__value_.__l.__size_;
        if (v11 != 1 && v11 != 12)
        {
          *a1->__r_.__value_.__l.__data_ = 0;
          a1->__r_.__value_.__l.__size_ = 0LL;
          goto LABEL_8;
        }
      }

      else
      {
        int v10 = a1->__r_.__value_.__s.__size_;
        if (v10 != 12 && v10 != 1)
        {
          a1->__r_.__value_.__s.__data_[0] = 0;
          a1->__r_.__value_.__s.__size_ = 0;
LABEL_8:
          p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
          goto LABEL_10;
        }
      }

      std::string::operator=(a1, &__s);
      goto LABEL_8;
    }

void sub_1865EF6C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>( void *a1, uint64_t a2, char *a3, char *a4)
{
  __int16 v6 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    __int16 v6 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32LL))( *(void *)(a2 + 16),  v7,  &v6[(void)v7]);
  uint64_t v8 = *((unsigned __int8 *)a1 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0LL) {
    uint64_t v8 = a1[1];
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        int v10 = a1;
      }
      else {
        int v10 = (_BYTE *)*a1;
      }
      v10[11] = v10[3];
    }

    else if (v9 < 0)
    {
      *(_BYTE *)*a1 = 0;
      a1[1] = 0LL;
    }

    else
    {
      *(_BYTE *)a1 = 0;
      *((_BYTE *)a1 + 23) = 0;
    }
  }

  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1865EF7EC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186E3BF90](exception, 2LL);
  __cxa_throw(exception, MEMORY[0x1896146C8], MEMORY[0x189614288]);
}

void sub_1865EF840(_Unwind_Exception *a1)
{
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24), 95LL);
    char v3 = v2;
    unsigned __int8 v5 = *(_BYTE **)(a1 + 72);
    unint64_t v4 = *(void *)(a1 + 80);
    if ((unint64_t)v5 < v4)
    {
      *unsigned __int8 v5 = v2;
      uint64_t v6 = (uint64_t)(v5 + 1);
LABEL_32:
      *(void *)(a1 + 72) = v6;
      return;
    }

    unint64_t v16 = *(void *)(a1 + 64);
    uint64_t v17 = &v5[-v16];
    uint64_t v18 = (uint64_t)&v5[-v16 + 1];
    if (v18 >= 0)
    {
      unint64_t v19 = v4 - v16;
      if (2 * v19 > v18) {
        uint64_t v18 = 2 * v19;
      }
      if (v19 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v20 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v20 = v18;
      }
      if (v20) {
        unint64_t v21 = operator new(v20);
      }
      else {
        unint64_t v21 = 0LL;
      }
      uint64_t v23 = &v21[v20];
      v17[(void)v21] = v3;
      uint64_t v6 = (uint64_t)&v17[(void)v21 + 1];
      if (v5 == (_BYTE *)v16)
      {
        unint64_t v21 = &v17[(void)v21];
      }

      else
      {
        unsigned __int8 v24 = &v5[~v16];
        do
        {
          char v25 = *--v5;
          (v24--)[(void)v21] = v25;
        }

        while (v5 != (_BYTE *)v16);
        unsigned __int8 v5 = *(_BYTE **)(a1 + 64);
      }

      *(void *)(a1 + 64) = v21;
      *(void *)(a1 + 72) = v6;
      *(void *)(a1 + 80) = v23;
      if (v5) {
        operator delete(v5);
      }
      goto LABEL_32;
    }

LABEL_55:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }

  unint64_t v7 = (unint64_t *)(a1 + 64);
  int v9 = *(_BYTE **)(a1 + 72);
  unint64_t v8 = *(void *)(a1 + 80);
  if (*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v9 >= v8)
    {
      unint64_t v10 = *v7;
      std::string::size_type v11 = &v9[-*v7];
      unint64_t v12 = (unint64_t)(v11 + 1);
      unint64_t v13 = v8 - v10;
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v14 = v12;
      }
      if (v14) {
        uint64_t v15 = operator new(v14);
      }
      else {
        uint64_t v15 = 0LL;
      }
      uint64_t v31 = &v11[(void)v15];
      uint64_t v32 = (char *)v15 + v14;
      v11[(void)v15] = 95;
      uint64_t v22 = (uint64_t)&v11[(void)v15 + 1];
      if (v9 != (_BYTE *)v10)
      {
        unint64_t v33 = &v9[~v10];
        do
        {
          char v34 = *--v9;
          (v33--)[(void)v15] = v34;
        }

        while (v9 != (_BYTE *)v10);
LABEL_50:
        int v9 = (_BYTE *)*v7;
        goto LABEL_52;
      }

      goto LABEL_51;
    }
  }

  else if ((unint64_t)v9 >= v8)
  {
    unint64_t v26 = *v7;
    uint64_t v27 = &v9[-*v7];
    unint64_t v28 = (unint64_t)(v27 + 1);
    unint64_t v29 = v8 - v26;
    if (2 * v29 > v28) {
      unint64_t v28 = 2 * v29;
    }
    if (v29 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v30 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v30 = v28;
    }
    if (v30) {
      uint64_t v15 = operator new(v30);
    }
    else {
      uint64_t v15 = 0LL;
    }
    uint64_t v31 = &v27[(void)v15];
    uint64_t v32 = (char *)v15 + v30;
    v27[(void)v15] = 95;
    uint64_t v22 = (uint64_t)&v27[(void)v15 + 1];
    if (v9 != (_BYTE *)v26)
    {
      uint64_t v35 = &v9[~v26];
      do
      {
        char v36 = *--v9;
        (v35--)[(void)v15] = v36;
      }

      while (v9 != (_BYTE *)v26);
      goto LABEL_50;
    }

  std::string::size_type v63 = *(void *)&v4[8 * (v9 / 0x2A)] + 96 * (v9 % 0x2A);
  uint64_t v64 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)std::string::size_type v63 = *(_OWORD *)a2;
  *(_OWORD *)(v63 + 16) = v64;
  *(void *)(v63 + 40) = 0LL;
  *(void *)(v63 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = 0LL;
  *(void *)(v63 + 32) = 0LL;
  *(_OWORD *)(v63 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v63 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = 0LL;
  *(void *)(v63 + 56) = 0LL;
  *(void *)(v63 + 64) = 0LL;
  *(void *)(v63 + 72) = 0LL;
  uint64_t result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v63 + 56) = result;
  *(void *)(v63 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  std::vector<std::string> v66 = *(void *)(a2 + 80);
  *(void *)(v63 + 85) = *(void *)(a2 + 85);
  *(void *)(v63 + 80) = v66;
  ++a1[5];
  return result;
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](void **a1, __int128 *a2)
{
  unint64_t v4 = (char *)a1[1];
  unsigned __int8 v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 4);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0x555555555555555LL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555LL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0x555555555555555LL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v13 = (char *)operator new(48 * v12);
    }

    else
    {
      unint64_t v13 = 0LL;
    }

    size_t v14 = &v13[48 * v9];
    *(_OWORD *)size_t v14 = *a2;
    *((void *)v14 + 2) = *((void *)a2 + 2);
    __int128 v15 = *(__int128 *)((char *)a2 + 24);
    *((void *)a2 + 2) = 0LL;
    *((void *)a2 + 3) = 0LL;
    *(void *)a2 = 0LL;
    *((void *)a2 + 1) = 0LL;
    *(_OWORD *)(v14 + memset(&context, 0, 24) = v15;
    *((void *)v14 + 5) = *((void *)a2 + 5);
    *((void *)a2 + 4) = 0LL;
    *((void *)a2 + 5) = 0LL;
    unint64_t v16 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 == *a1)
    {
      unint64_t v8 = v14 + 48;
      *a1 = v14;
      a1[1] = v14 + 48;
      a1[2] = &v13[48 * v12];
    }

    else
    {
      uint64_t v18 = &v13[48 * v9];
      do
      {
        __int128 v19 = *((_OWORD *)v17 - 3);
        *((void *)v18 - 4) = *((void *)v17 - 4);
        *((_OWORD *)v18 - 3) = v19;
        *((void *)v17 - 5) = 0LL;
        *((void *)v17 - 4) = 0LL;
        *((void *)v17 - 6) = 0LL;
        __int128 v20 = *(_OWORD *)(v17 - 24);
        *((void *)v18 - 1) = *((void *)v17 - 1);
        *(_OWORD *)(v18 - memset(&context, 0, 24) = v20;
        v18 -= 48;
        *((void *)v17 - 2) = 0LL;
        *((void *)v17 - 1) = 0LL;
        *((void *)v17 - 3) = 0LL;
        v17 -= 48;
      }

      while (v17 != v16);
      uint64_t v17 = (char *)*a1;
      uint64_t v21 = (uint64_t)a1[1];
      unint64_t v8 = v14 + 48;
      *a1 = v18;
      a1[1] = v14 + 48;
      a1[2] = &v13[48 * v12];
      while ((char *)v21 != v17)
      {
        v21 -= 48LL;
        std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v21);
      }
    }

    if (v17) {
      operator delete(v17);
    }
  }

  else
  {
    __int128 v6 = *a2;
    *((void *)v4 + 2) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v4 = v6;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    __int128 v7 = *(__int128 *)((char *)a2 + 24);
    *((void *)v4 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v4 + memset(&context, 0, 24) = v7;
    *((void *)a2 + 4) = 0LL;
    *((void *)a2 + 5) = 0LL;
    *((void *)a2 + 3) = 0LL;
    unint64_t v8 = v4 + 48;
  }

  a1[1] = v8;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>( uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unsigned __int8 v5 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    __int128 v6 = __p;
  }
  else {
    __int128 v6 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    unsigned __int8 v5 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32LL))( *(void *)(a2 + 16),  v6,  &v5[(void)v6]);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1865EFD1C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186E3BF90](exception, 9LL);
  __cxa_throw(exception, MEMORY[0x1896146C8], MEMORY[0x189614288]);
}

void sub_1865EFD70(_Unwind_Exception *a1)
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(uint64_t a1)
{
  if (a1 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a1);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression( void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression( void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  char v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  operator delete(__p);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24LL * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression( void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression( void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  char v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  operator delete(__p);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24LL * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = *(void *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop( std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8 = __mexp_end;
  int v9 = __mexp_begin;
  size_t v14 = operator new(0x10uLL);
  std::vector<char>::pointer end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0LL;
  uint64_t v17 = operator new(0x38uLL);
  LODWORD(first) = this->__loop_count_;
  uint64_t v18 = __s->__first_;
  *(void *)uint64_t v17 = &off_189E95860;
  *((void *)v17 + 1) = v18;
  *((void *)v17 + 2) = v14;
  *((void *)v17 + 3) = __min;
  *((void *)v17 + 4) = __max;
  *((_DWORD *)v17 + 10) = (_DWORD)first;
  *((_DWORD *)v17 + 11) = v9;
  *((_DWORD *)v17 + 12) = v8;
  *((_BYTE *)v17 + 52) = __greedy;
  __s->__first_ = 0LL;
  __int128 v19 = (std::__node<char> *)operator new(0x10uLL);
  v19->__vftable = (std::__node<char>_vtbl *)off_189E958F0;
  v19[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v19;
  this->__end_ = (std::__owns_one_state<char> *)*((void *)v17 + 2);
  __s->__first_ = (std::__node<char> *)v17;
  this->__loop_count_ = (_DWORD)first + 1;
}

void sub_1865EFFFC(_Unwind_Exception *a1)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>( unsigned __int8 *result, unsigned __int8 *a2, int *a3)
{
  if (result != a2)
  {
    int v3 = *result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      int v4 = v3 - 48;
      *a3 = v4;
      if (++result == a2)
      {
        return a2;
      }

      else
      {
        while (1)
        {
          int v5 = *result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38) {
            break;
          }
          if (v4 >= 214748364) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          }
          int v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          if (++result == a2) {
            return a2;
          }
        }
      }
    }
  }

  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186E3BF90](exception, 8LL);
  __cxa_throw(exception, MEMORY[0x1896146C8], MEMORY[0x189614288]);
}

void sub_1865F0110(_Unwind_Exception *a1)
{
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186E3BF90](exception, 7LL);
  __cxa_throw(exception, MEMORY[0x1896146C8], MEMORY[0x189614288]);
}

void sub_1865F015C(_Unwind_Exception *a1)
{
}

void (__cdecl ***std::__loop<char>::~__loop( void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_189E958C0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  *std::string __p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_189E958C0;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  operator delete(__p);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  int v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    unint64_t *v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }

    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }

    goto LABEL_23;
  }

  unint64_t *v4 = 0LL;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }

  else
  {
    a3[10] = *((void *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }

  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states( void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_189E958C0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states( void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  *std::string __p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_189E958C0;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  operator delete(__p);
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16LL * result[10] + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    unint64_t v7 = (_BYTE *)(a2[4] + 24LL * v4 + 16);
    do
    {
      *((void *)v7 - 2) = v5;
      *((void *)v7 - 1) = v5;
      *unint64_t v7 = 0;
      v7 += 24;
      --v6;
    }

    while (v6);
  }

  return result;
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate( void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_189E958C0;
  unsigned int v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  unsigned int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  *std::string __p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_189E958C0;
  unsigned int v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  unsigned int v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  operator delete(__p);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8LL;
  if (a2) {
    uint64_t v3 = 16LL;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186E3BF90](exception, 15LL);
  __cxa_throw(exception, MEMORY[0x1896146C8], MEMORY[0x189614288]);
}

void sub_1865F0584(_Unwind_Exception *a1)
{
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>( std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    std::vector<char>::pointer end = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    int v9 = (unsigned __int8 *)(a2 + 1);
    int v8 = *a2;
    if (a2 + 1 != a3 || v8 != 36)
    {
      if ((v8 - 46) > 0x2E || ((1LL << (v8 - 46)) & 0x600000000001LL) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
        goto LABEL_32;
      }

      if (v9 == (unsigned __int8 *)a3 || v8 != 92)
      {
        if (v8 == 46)
        {
          uint64_t v18 = (std::__node<char> *)operator new(0x10uLL);
          first = end->__first_;
          v18->__vftable = (std::__node<char>_vtbl *)&off_189E959C8;
          v18[1].__vftable = (std::__node<char>_vtbl *)first;
          end->__first_ = v18;
          a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
          goto LABEL_32;
        }
      }

      else
      {
        int v17 = (char)*v9;
        if ((v17 - 36) <= 0x3A && ((1LL << (v17 - 36)) & 0x580000000000441LL) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v17);
          int v9 = (unsigned __int8 *)(v3 + 2);
          goto LABEL_32;
        }
      }
    }

    uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, a2, a3);
    unint64_t v11 = v10;
    if (v10 == v3 && v10 != a3)
    {
      int v12 = *v9;
      if (v12 == 40)
      {
        uint64_t v13 = (uint64_t)(v3 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int v14 = a1->__marked_count_;
        do
        {
          __int128 v15 = (char *)v13;
          uint64_t v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v13, a3);
        }

        while ((char *)v13 != v15);
        if (v15 == a3 || v15 + 1 == a3 || *v15 != 92 || v15[1] != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        unint64_t v11 = v15 + 2;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v14);
      }

      else
      {
        BOOL v20 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v12);
        uint64_t v21 = 2LL;
        if (!v20) {
          uint64_t v21 = 0LL;
        }
        unint64_t v11 = &v3[v21];
      }
    }

    int v9 = (unsigned __int8 *)v11;
    if (v11 != v3)
    {
LABEL_32:
      size_t v22 = a1->__marked_count_ + 1;
      int v23 = *v9;
      if (v23 == 42)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_loop( a1,  0LL,  0xFFFFFFFFFFFFFFFFLL,  end,  marked_count + 1,  a1->__marked_count_ + 1,  1);
        return (char *)(v9 + 1);
      }

      int v33 = 0;
      unsigned __int8 v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>( v9 + 2,  (unsigned __int8 *)a3,  &v33);
      if (v24 == v9 + 2) {
LABEL_48:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
      if (v24 != (unsigned __int8 *)a3)
      {
        char v25 = (char *)(v24 + 1);
        int v26 = *v24;
        if (v26 == 44)
        {
          int v32 = -1;
          uint64_t v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>( v24 + 1,  (unsigned __int8 *)a3,  &v32);
          if (v27 != (unsigned __int8 *)a3 && v27 + 1 != (unsigned __int8 *)a3 && *v27 == 92 && v27[1] == 125)
          {
            size_t v29 = v32;
            size_t v28 = v33;
            if (v32 == -1)
            {
              size_t v29 = -1LL;
            }

            else if (v32 < v33)
            {
              goto LABEL_48;
            }

            uint64_t v3 = (char *)&v27[2 * (v27[1] == 125)];
            size_t v30 = a1;
LABEL_56:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v30, v28, v29, end, marked_count + 1, v22, 1);
            return v3;
          }
        }

        else if (v25 != a3 && v26 == 92 && *v25 == 125)
        {
          uint64_t v3 = (char *)(v24 + 2);
          size_t v28 = v33;
          size_t v30 = a1;
          size_t v29 = v33;
          goto LABEL_56;
        }
      }

      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }

  return v3;
}

void (__cdecl ***std::__match_any<char>::~__match_any( void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  unsigned int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  operator delete(__p);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0LL;
    *(_DWORD *)a2 = -993;
  }

  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }

  *(void *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  return 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>( std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  do
  {
    unint64_t v7 = v6;
    uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (char *)v6, a3);
  }

  while (v6 != v7);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>( std::basic_regex<char> *this, char *a2, char *a3)
{
  std::vector<char>::pointer end = this->__end_;
  unsigned int marked_count = this->__marked_count_;
  if (a2 == a3)
  {
LABEL_24:
    unsigned int v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    goto LABEL_25;
  }

  int v8 = *a2;
  int v9 = *a2;
  uint64_t v10 = (v8 - 36);
  if (((1LL << (v8 - 36)) & 0x5800000080004D1LL) == 0)
  {
    if (v10 == 5)
    {
      if (this->__open_count_) {
        goto LABEL_4;
      }
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
LABEL_33:
      unint64_t v11 = (unsigned __int8 *)(a2 + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>( (uint64_t)this,  v11,  (unsigned __int8 *)a3,  end,  marked_count + 1,  this->__marked_count_ + 1);
    }

LABEL_4:
  unint64_t v11 = (unsigned __int8 *)(a2 + 1);
  if (a2 + 1 == a3 || v9 != 92)
  {
LABEL_22:
    if (v9 == 46)
    {
      int v17 = (std::__node<char> *)operator new(0x10uLL);
      uint64_t v18 = this->__end_;
      first = v18->__first_;
      v17->__vftable = (std::__node<char>_vtbl *)&off_189E959C8;
      v17[1].__vftable = (std::__node<char>_vtbl *)first;
      v18->__first_ = v17;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>( (uint64_t)this,  v11,  (unsigned __int8 *)a3,  end,  marked_count + 1,  this->__marked_count_ + 1);
    }

    goto LABEL_24;
  }

  int v12 = (char)*v11;
  std::basic_regex<char>::value_type v13 = *v11;
  if ((v12 - 36) <= 0x3A && ((1LL << (v12 - 36)) & 0x5800000080004F1LL) != 0
    || (v12 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v13);
    unint64_t v11 = (unsigned __int8 *)(a2 + 2);
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>( (uint64_t)this,  v11,  (unsigned __int8 *)a3,  end,  marked_count + 1,  this->__marked_count_ + 1);
  }

  if ((this->__flags_ & 0x1F0) == 0x40)
  {
    unsigned int v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(this, a2 + 1, a3, 0LL);
  }

  else
  {
    BOOL v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(this, v13);
    uint64_t v16 = 2LL;
    if (!v15) {
      uint64_t v16 = 0LL;
    }
    unsigned int v14 = &a2[v16];
  }

  if (v14 == a2)
  {
    int v9 = *a2;
    goto LABEL_22;
  }

  uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>( (uint64_t)a1,  a2,  a3);
LABEL_18:
  if (v3 == v10)
  {
    if (v9 == a3 || *v3 != 92) {
      return v3;
    }
    uint64_t v18 = *v9;
    if (v18 == 40)
    {
      __int128 v19 = (uint64_t)(v3 + 2);
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
      int v20 = a1->__marked_count_;
      do
      {
        uint64_t v21 = (char *)v19;
        __int128 v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>( a1,  v19,  a3);
      }

      while (v21 != (char *)v19);
      if (v21 == a3 || v21 + 1 == a3 || *v21 != 92 || v21[1] != 41) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      uint64_t v10 = v21 + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v20);
    }

    else
    {
      size_t v30 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v18);
      uint64_t v31 = 2LL;
      if (!v30) {
        uint64_t v31 = 0LL;
      }
      uint64_t v10 = &v3[v31];
    }
  }

  if (v10 != v3)
  {
    if (v10 == a3) {
      return a3;
    }
    uint64_t v16 = a1->__marked_count_ + 1;
    int v17 = *v10;
    if (v17 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop( a1,  0LL,  0xFFFFFFFFFFFFFFFFLL,  end,  marked_count + 1,  a1->__marked_count_ + 1,  1);
      return ++v10;
    }

    if (v10 + 1 == a3 || v17 != 92 || v10[1] != 123) {
      return v10;
    }
    int v23 = (unsigned __int8 *)(v10 + 2);
    char v34 = 0;
    unsigned __int8 v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>( v23,  (unsigned __int8 *)a3,  &v34);
    if (v23 == v24) {
LABEL_48:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    if (v24 != (unsigned __int8 *)a3)
    {
      char v25 = (char *)(v24 + 1);
      unsigned int v26 = *v24;
      if (v26 == 44)
      {
        int v33 = -1;
        uint64_t v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>( v24 + 1,  (unsigned __int8 *)a3,  &v33);
        if (v27 != (unsigned __int8 *)a3 && v27 + 1 != (unsigned __int8 *)a3 && *v27 == 92 && v27[1] == 125)
        {
          size_t v29 = v33;
          size_t v28 = v34;
          if (v33 == -1)
          {
            size_t v29 = -1LL;
          }

          else if (v33 < v34)
          {
            goto LABEL_48;
          }

          uint64_t v10 = (char *)&v27[2 * (v27[1] == 125)];
          int v32 = a1;
LABEL_58:
          std::basic_regex<char,std::regex_traits<char>>::__push_loop(v32, v28, v29, end, marked_count + 1, v16, 1);
          return v10;
        }
      }

      else if (v25 != a3 && v26 == 92 && *v25 == 125)
      {
        uint64_t v10 = (char *)(v24 + 2);
        size_t v28 = v34;
        int v32 = a1;
        size_t v29 = v34;
        goto LABEL_58;
      }
    }

    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }

  return v3;
}

  unint64_t v11 = (unsigned __int8 *)(a2 + 1);
  if (a2 + 1 == a3 || v9 != 92)
  {
LABEL_22:
    if (v9 == 46)
    {
      int v17 = (std::__node<char> *)operator new(0x10uLL);
      uint64_t v18 = this->__end_;
      first = v18->__first_;
      v17->__vftable = (std::__node<char>_vtbl *)&off_189E959C8;
      v17[1].__vftable = (std::__node<char>_vtbl *)first;
      v18->__first_ = v17;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>( (uint64_t)this,  v11,  (unsigned __int8 *)a3,  end,  marked_count + 1,  this->__marked_count_ + 1);
    }

    goto LABEL_24;
  }

  int v12 = (char)*v11;
  std::basic_regex<char>::value_type v13 = *v11;
  if ((v12 - 36) <= 0x3A && ((1LL << (v12 - 36)) & 0x5800000080004F1LL) != 0
    || (v12 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v13);
    unint64_t v11 = (unsigned __int8 *)(a2 + 2);
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>( (uint64_t)this,  v11,  (unsigned __int8 *)a3,  end,  marked_count + 1,  this->__marked_count_ + 1);
  }

  if ((this->__flags_ & 0x1F0) == 0x40)
  {
    unsigned int v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>( this,  a2 + 1,  a3,  0LL);
  }

  else
  {
    BOOL v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(this, v13);
    uint64_t v16 = 2LL;
    if (!v15) {
      uint64_t v16 = 0LL;
    }
    unsigned int v14 = &a2[v16];
  }

  if (v14 == a2)
  {
    int v9 = *a2;
    goto LABEL_22;
  }

uint64_t std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>( const char *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v11 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAA00LL;
  __int128 v15 = v7;
  uint64_t v12 = 0LL;
  __int128 v14 = 0uLL;
  LOBYTE(v15) = 0;
  BYTE8(v15) = 0;
  uint64_t v16 = 0LL;
  memset(__p, 0, sizeof(__p));
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>( a4,  a1,  a2,  (std::vector<std::csub_match>::value_type *)__p,  4160);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>( a3,  (uint64_t)a1,  (uint64_t)a2,  (uint64_t *)__p,  0);
  if (*(void *)__p) {
    operator delete(*(void **)__p);
  }
  if (!v8) {
    return 0LL;
  }
  if (!*(_BYTE *)(a3 + 88)) {
    return 1LL;
  }
  uint64_t result = 0LL;
  *(void *)(a3 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = *(void *)a3;
  return result;
}

void sub_1865F0E44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>( uint64_t a1, const char *a2, const char *a3, std::vector<std::csub_match>::value_type *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  int v10 = *(_DWORD *)(a1 + 28);
  this[1].first = a3;
  __int128 v11 = this + 1;
  this[1].second = a3;
  this[1].matched = 0;
  std::vector<std::sub_match<char const*>>::assign( (std::vector<std::sub_match<const char *>> *)this,  (v10 + 1),  this + 1);
  this[2].first = a2;
  this[2].second = a2;
  this[2].matched = 0;
  this[3].std::pair<const char *, const char *> = v11->std::pair<const char *, const char *>;
  this[3].matched = this[1].matched;
  if ((v9 & 0x800) == 0) {
    this[4].second = a2;
  }
  LOBYTE(this[4].first) = 1;
  if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>( a1,  a2,  a3,  (uint64_t *)this,  v9,  (v9 & 0x800) == 0))
  {
    if (a2 == a3 || (v9 & 0x40) != 0) {
      goto LABEL_18;
    }
    int v18 = v9 | 0x80;
    __int128 v19 = a2 + 1;
    if (v19 != a3)
    {
      do
      {
        std::vector<std::sub_match<char const*>>::assign( (std::vector<std::sub_match<const char *>> *)this,  0xAAAAAAAAAAAAAAABLL * ((this->second - this->first) >> 3),  v11);
        int v20 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>( a1,  v19,  a3,  (uint64_t *)this,  v18,  0);
        first = this->first;
        second = this->second;
        if (v20) {
          goto LABEL_8;
        }
        std::vector<std::sub_match<char const*>>::assign( (std::vector<std::sub_match<const char *>> *)this,  0xAAAAAAAAAAAAAAABLL * ((second - first) >> 3),  v11);
      }

      while (++v19 != a3);
    }

    std::vector<std::sub_match<char const*>>::assign( (std::vector<std::sub_match<const char *>> *)this,  0xAAAAAAAAAAAAAAABLL * ((this->second - this->first) >> 3),  v11);
    if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>( a1,  a3,  a3,  (uint64_t *)this,  v18,  0))
    {
LABEL_18:
      uint64_t result = 0LL;
      this->second = this->first;
      return result;
    }
  }

  first = this->first;
  second = this->second;
LABEL_8:
  if (second == first) {
    __int128 v14 = v11;
  }
  else {
    __int128 v14 = (const std::vector<std::csub_match>::value_type *)first;
  }
  __int128 v15 = v14->first;
  this[2].second = v14->first;
  this[2].matched = this[2].first != v15;
  uint64_t v16 = v14->second;
  this[3].first = v16;
  this[3].matched = v16 != this[3].second;
  return 1LL;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  char v5 = a5;
  uint64_t v10 = a4[6];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  unint64_t v13 = *(char **)a1;
  uint64_t v12 = *(char **)(a1 + 8);
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v12[-*(void *)a1] >> 3);
  unint64_t v15 = v11 - v14;
  if (v11 <= v14)
  {
    BOOL v22 = *(char **)(a1 + 8);
    if (v11 >= v14) {
      goto LABEL_24;
    }
    BOOL v22 = &v13[8 * ((a4[1] - *a4) >> 3)];
    goto LABEL_20;
  }

  uint64_t v16 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v12) >> 3) >= v15)
  {
    BOOL v22 = &v12[24 * v15];
    uint64_t v27 = 8 * ((a4[1] - *a4) >> 3) - 8 * ((uint64_t)&v12[-*(void *)a1] >> 3);
    do
    {
      *(void *)uint64_t v12 = 0LL;
      *((void *)v12 + 1) = 0LL;
      v12[16] = 0;
      v12 += 24;
      v27 -= 24LL;
    }

    while (v27);
LABEL_20:
    *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v22;
    goto LABEL_24;
  }

  if (v11 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v13) >> 3);
  unint64_t v18 = 0x5555555555555556LL * ((v16 - (uint64_t)v13) >> 3);
  if (v18 <= v11) {
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  }
  if (v17 >= 0x555555555555555LL) {
    unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v19 = v18;
  }
  if (v19 > 0xAAAAAAAAAAAAAAALL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  int v20 = (char *)operator new(24 * v19);
  uint64_t v21 = &v20[24 * v14];
  BOOL v22 = &v20[24 * v11];
  int v23 = v21;
  uint64_t v24 = 24 * v11 - 24 * v14;
  do
  {
    *(void *)int v23 = 0LL;
    *((void *)v23 + 1) = 0LL;
    v23[16] = 0;
    v23 += 24;
    v24 -= 24LL;
  }

  while (v24);
  char v25 = &v20[24 * v19];
  if (v12 == v13)
  {
    char v5 = a5;
  }

  else
  {
    char v5 = a5;
    do
    {
      __int128 v26 = *(_OWORD *)(v12 - 24);
      *((void *)v21 - 1) = *((void *)v12 - 1);
      *(_OWORD *)(v21 - memset(&context, 0, 24) = v26;
      v21 -= 24;
      v12 -= 24;
    }

    while (v12 != v13);
    uint64_t v12 = v13;
  }

  *(void *)a1 = v21;
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v22;
  *(void *)(a1 + 16) = v25;
  if (v12)
  {
    operator delete(v12);
    BOOL v22 = *(char **)(a1 + 8);
  }

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>( uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int v7 = a5;
  int v9 = a3;
  uint64_t v10 = a2;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0) {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>( a1,  a2,  a3,  a4,  a5,  a6);
  }
  __int16 v169 = a5;
  if (*(_DWORD *)(a1 + 28))
  {
    v173[0] = 0LL;
    v173[1] = 0LL;
    *(void *)&__int128 v174 = 0LL;
    uint64_t v12 = *(void *)(a1 + 40);
    if (v12)
    {
      __x.second = a3;
      *(void *)&__x.matched = 0xAAAAAAAAAAAAAA00LL;
      __x.first = a3;
      *(_DWORD *)v176 = 0;
      memset(&v176[8], 0, 85);
      v173[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>( (int64x2_t *)v173,  (uint64_t)v176);
      if (*(void *)&v176[56]) {
        operator delete(*(void **)&v176[56]);
      }
      if (*(void *)&v176[32]) {
        operator delete(*(void **)&v176[32]);
      }
      v154 = a4;
      unint64_t v13 = v173[1];
      *((_DWORD *)v173[1] - memset(&context, 0, 24) = 0;
      *(v13 - 11) = v10;
      *(v13 - 10) = v10;
      v165 = v9;
      *(v13 - 9) = v9;
      std::vector<std::sub_match<char const*>>::resize( (std::vector<std::sub_match<const char *>> *)(v13 - 8),  *(unsigned int *)(a1 + 28),  &__x);
      std::vector<std::pair<unsigned long,char const*>>::resize( (std::vector<std::pair<unsigned long, const char *>> *)((char *)v173[1] - 40),  *(unsigned int *)(a1 + 32));
      v161 = 0LL;
      v163 = 0LL;
      v158 = 0LL;
      uint64_t v160 = 0LL;
      v156 = 0LL;
      v157 = 0LL;
      int64_t v170 = 0LL;
      char v14 = 0;
      unsigned int v15 = 0;
      v167 = v10;
      int64_t v16 = v9 - v10;
      unint64_t v17 = v173[1];
      *((void *)v173[1] - 2) = v12;
      *(v17 - 2) = v7;
      *((_BYTE *)v17 - 4) = a6;
      do
      {
        BOOL v18 = (++v15 & 0xFFF) != 0 || (int)(v15 >> 12) < (int)v16;
        if (!v18) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
        }
        int v20 = v17 - 4;
        uint64_t v19 = *((void *)v17 - 2);
        uint64_t v21 = v17 - 24;
        if (v19) {
          (*(void (**)(uint64_t, _DWORD *))(*(void *)v19 + 16LL))(v19, v17 - 24);
        }
        switch(*(_DWORD *)v21)
        {
          case 0xFFFFFC18:
            BOOL v22 = (const char *)*((void *)v17 - 10);
            if ((v169 & 0x20) != 0 && v22 == v167 || (v169 & 0x1000) != 0 && v22 != v165) {
              goto LABEL_21;
            }
            uint64_t v30 = v170;
            if ((v14 & (v170 >= (uint64_t)&v22[-*((void *)v17 - 11)])) == 0)
            {
              v171 = &v22[-*((void *)v17 - 11)];
              uint64_t v32 = (__int128 *)*((void *)v17 - 8);
              uint64_t v31 = (__int128 *)*((void *)v17 - 7);
              unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v32) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v160 - (uint64_t)v163) >> 3) >= v33)
              {
                char v38 = v158;
                uint64_t v40 = (uint64_t)v156;
                if (0xAAAAAAAAAAAAAAABLL * ((v158 - v163) >> 3) >= v33)
                {
                  int64_t v41 = v157;
                  if (v32 == v31)
                  {
                    std::string::size_type v50 = v163;
                  }

                  else
                  {
                    int64_t v49 = v163;
                    std::string::size_type v50 = v163;
                    do
                    {
                      *(_OWORD *)int64_t v49 = *v32;
                      v49[16] = *((_BYTE *)v32 + 16);
                      v50 += 24;
                      uint64_t v32 = (__int128 *)((char *)v32 + 24);
                      v49 += 24;
                    }

                    while (v32 != v31);
                  }

                  int64_t v48 = v50 - v163;
                  char v38 = v163;
                }

                else
                {
                  unint64_t v43 = (__int128 *)((char *)v32 + 8 * ((v158 - v163) >> 3));
                  int64_t v41 = v157;
                  if (v158 != v163)
                  {
                    uint64_t v44 = v163;
                    do
                    {
                      *(_OWORD *)uint64_t v44 = *v32;
                      v44[16] = *((_BYTE *)v32 + 16);
                      uint64_t v32 = (__int128 *)((char *)v32 + 24);
                      v44 += 24;
                    }

                    while (v32 != v43);
                  }

                  size_t v45 = v158;
                  if (v43 != v31)
                  {
                    std::string::size_type v46 = v158;
                    do
                    {
                      __int128 v47 = *v43;
                      *((void *)v46 + 2) = *((void *)v43 + 2);
                      *(_OWORD *)std::string::size_type v46 = v47;
                      v46 += 24;
                      unint64_t v43 = (__int128 *)((char *)v43 + 24);
                      v45 += 24;
                    }

                    while (v43 != v31);
                  }

                  int64_t v48 = v45 - v158;
                }
              }

              else
              {
                if (v163)
                {
                  operator delete(v163);
                  uint64_t v160 = 0LL;
                }

                if (v33 > 0xAAAAAAAAAAAAAAALL) {
                  goto LABEL_216;
                }
                unint64_t v34 = 0x5555555555555556LL * (v160 >> 3);
                if (v34 <= v33) {
                  unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v32) >> 3);
                }
                unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (v160 >> 3) >= 0x555555555555555LL ? 0xAAAAAAAAAAAAAAALL : v34;
                if (v35 > 0xAAAAAAAAAAAAAAALL) {
LABEL_216:
                }
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                char v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v35);
                char v38 = v36;
                uint64_t v39 = v36;
                if (v32 == v31)
                {
                  uint64_t v40 = (uint64_t)v156;
                  int64_t v41 = v157;
                }

                else
                {
                  uint64_t v40 = (uint64_t)v156;
                  int64_t v41 = v157;
                  do
                  {
                    __int128 v42 = *v32;
                    *((void *)v39 + 2) = *((void *)v32 + 2);
                    *(_OWORD *)uint64_t v39 = v42;
                    v39 += 24;
                    uint64_t v32 = (__int128 *)((char *)v32 + 24);
                  }

                  while (v32 != v31);
                }

                uint64_t v160 = (uint64_t)&v36[24 * v37];
                int64_t v48 = v39 - v36;
                v163 = v36;
              }

              __int128 v52 = (char *)*((void *)v17 - 5);
              int v51 = (char *)*((void *)v17 - 4);
              unint64_t v53 = (v51 - v52) >> 4;
              if (v53 <= (v40 - (uint64_t)v161) >> 4)
              {
                unint64_t v61 = (v41 - v161) >> 4;
                if (v61 >= v53)
                {
                  if (v52 == v51)
                  {
                    std::string v69 = v161;
                    uint64_t v30 = (uint64_t)v171;
                  }

                  else
                  {
                    int v68 = v161;
                    std::string v69 = v161;
                    uint64_t v30 = (uint64_t)v171;
                    do
                    {
                      *(void *)int v68 = *(void *)v52;
                      *((void *)v68 + 1) = *((void *)v52 + 1);
                      v69 += 16;
                      v52 += 16;
                      v68 += 16;
                    }

                    while (v52 != v51);
                  }

                  int64_t v67 = v69 - v161;
                  int64_t v41 = v161;
                }

                else
                {
                  size_t v62 = &v52[16 * v61];
                  if (v41 != v161)
                  {
                    std::string::size_type v63 = v161;
                    do
                    {
                      *(void *)std::string::size_type v63 = *(void *)v52;
                      *((void *)v63 + 1) = *((void *)v52 + 1);
                      v52 += 16;
                      v63 += 16;
                    }

                    while (v52 != v62);
                  }

                  uint64_t v30 = (uint64_t)v171;
                  uint64_t v64 = v41;
                  if (v62 != v51)
                  {
                    char v65 = v41;
                    do
                    {
                      __int128 v66 = *(_OWORD *)v62;
                      v62 += 16;
                      *(_OWORD *)char v65 = v66;
                      v65 += 16;
                      v64 += 16;
                    }

                    while (v62 != v51);
                  }

                  int64_t v67 = v64 - v41;
                }
              }

              else
              {
                int64_t v159 = v48;
                unint64_t v54 = v38;
                if (v161)
                {
                  operator delete(v161);
                  uint64_t v40 = 0LL;
                }

                if (v51 - v52 < 0) {
                  goto LABEL_215;
                }
                uint64_t v55 = v40 >> 3;
                if (v40 >> 3 <= v53) {
                  uint64_t v55 = (v51 - v52) >> 4;
                }
                unint64_t v56 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0LL ? 0xFFFFFFFFFFFFFFFLL : v55;
                if (v56 >> 60) {
LABEL_215:
                }
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                uint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v56);
                unint64_t v59 = v57;
                while (v52 != v51)
                {
                  __int128 v60 = *(_OWORD *)v52;
                  v52 += 16;
                  *(_OWORD *)unint64_t v59 = v60;
                  v59 += 16;
                }

                int64_t v41 = v57;
                v156 = &v57[16 * v58];
                int64_t v67 = v59 - v57;
                v161 = v57;
                char v38 = v54;
                uint64_t v30 = (uint64_t)v171;
                int64_t v48 = v159;
              }

              v158 = &v38[v48];
              v157 = &v41[v67];
            }

            uint64_t v70 = v173[1];
            if (v30 == v16)
            {
              unint64_t v71 = v173[0];
              while (v70 != v71)
              {
                v70 -= 12;
                std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v70);
              }

              v173[1] = v71;
              char v14 = 1;
              int64_t v170 = v16;
            }

            else
            {
              int64_t v170 = v30;
              int64_t v72 = (char *)v173[1] - 96;
              std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)v173[1] - 12);
              v173[1] = v72;
              char v14 = 1;
            }

            break;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            break;
          case 0xFFFFFC1F:
LABEL_21:
            int v23 = (char *)v173[1] - 96;
            std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)v173[1] - 12);
            v173[1] = v23;
            break;
          case 0xFFFFFC20:
            *(void *)&__int128 v24 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)&v176[64] = v24;
            *(_OWORD *)&v176[80] = v24;
            *(_OWORD *)&v176[32] = v24;
            *(_OWORD *)&v176[48] = v24;
            *(_OWORD *)v176 = v24;
            *(_OWORD *)&v176[16] = v24;
            __int128 v25 = *((_OWORD *)v17 - 5);
            *(_OWORD *)v176 = *v21;
            *(_OWORD *)&v176[16] = v25;
            memset(&v176[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>( &v176[32],  *((__int128 **)v17 - 8),  *((__int128 **)v17 - 7),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v17 - 7) - *((void *)v17 - 8)) >> 3));
            memset(&v176[56], 0, 24);
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>( &v176[56],  *((__int128 **)v17 - 5),  *((__int128 **)v17 - 4),  (uint64_t)(*((void *)v17 - 4) - *((void *)v17 - 5)) >> 4);
            uint64_t v26 = *v20;
            *(void *)&v176[85] = *(void *)((char *)v17 - 11);
            *(void *)&v176[80] = v26;
            (*(void (**)(void, uint64_t, _DWORD *))(*(void *)*v20 + 24LL))(*v20, 1LL, v17 - 24);
            (*(void (**)(void, void, _BYTE *))(**(void **)&v176[80] + 24LL))( *(void *)&v176[80],  0LL,  v176);
            uint64_t v27 = (char *)v173[1];
            if (v173[1] >= (void *)v174)
            {
              v173[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>( (int64x2_t *)v173,  (uint64_t)v176);
              if (*(void *)&v176[56])
              {
                *(void *)&v176[64] = *(void *)&v176[56];
                operator delete(*(void **)&v176[56]);
              }
            }

            else
            {
              __int128 v28 = *(_OWORD *)&v176[16];
              *(_OWORD *)v173[1] = *(_OWORD *)v176;
              *((_OWORD *)v27 + 1) = v28;
              *((void *)v27 + 4) = 0LL;
              *((void *)v27 + 5) = 0LL;
              *((void *)v27 + 6) = 0LL;
              *((void *)v27 + 7) = 0LL;
              *((_OWORD *)v27 + 2) = *(_OWORD *)&v176[32];
              *((void *)v27 + 6) = *(void *)&v176[48];
              memset(&v176[32], 0, 24);
              *((void *)v27 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
              *((void *)v27 + 9) = 0LL;
              *(_OWORD *)(v27 + 56) = *(_OWORD *)&v176[56];
              *((void *)v27 + 9) = *(void *)&v176[72];
              memset(&v176[56], 0, 24);
              uint64_t v29 = *(void *)&v176[80];
              *(void *)(v27 + 85) = *(void *)&v176[85];
              *((void *)v27 + 10) = v29;
              v173[1] = v27 + 96;
            }

            if (*(void *)&v176[32])
            {
              *(void *)&v176[40] = *(void *)&v176[32];
              operator delete(*(void **)&v176[32]);
            }

            break;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }

        unint64_t v17 = v173[1];
      }

      while (v173[0] != v173[1]);
      if ((v14 & 1) != 0)
      {
        uint64_t v74 = *v154;
        *(void *)uint64_t v74 = v167;
        *(void *)(v74 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = &v167[v170];
        *(_BYTE *)(v74 + 16) = 1;
        unint64_t v75 = v163;
        if (v158 != v163)
        {
          std::ctype_base::mask v76 = v163 + 16;
          unsigned int v77 = 1;
          do
          {
            uint64_t v78 = v74 + 24LL * v77;
            *(_OWORD *)uint64_t v78 = *((_OWORD *)v76 - 1);
            char v79 = *v76;
            v76 += 24;
            *(_BYTE *)(v78 + 16) = v79;
            BOOL v18 = 0xAAAAAAAAAAAAAAABLL * ((v158 - v163) >> 3) > v77++;
          }

          while (v18);
        }
      }

      else
      {
        unint64_t v75 = v163;
      }

      if (v161) {
        operator delete(v161);
      }
      if (v75) {
        operator delete(v75);
      }
    }

    else
    {
      char v14 = 0;
    }

    *(void *)v176 = v173;
    std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v176);
  }

  else
  {
    __int128 v174 = 0u;
    int64x2_t v175 = 0u;
    *(_OWORD *)v173 = 0u;
    uint64_t v80 = *(void *)(a1 + 40);
    if (v80)
    {
      *(_DWORD *)v176 = 0;
      memset(&v176[8], 0, 85);
      std::deque<std::__state<char>>::push_back(v173, (uint64_t)v176);
      if (*(void *)&v176[56]) {
        operator delete(*(void **)&v176[56]);
      }
      if (*(void *)&v176[32]) {
        operator delete(*(void **)&v176[32]);
      }
      v155 = a4;
      __int128 v81 = v173[1];
      unint64_t v82 = v175.i64[1] + v175.i64[0] - 1;
      unint64_t v83 = v82 / 0x2A;
      uint64_t v84 = *((void *)v173[1] + v82 / 0x2A);
      unint64_t v85 = 3 * (v82 % 0x2A);
      uint64_t v86 = v84 + 32 * v85;
      *(_DWORD *)uint64_t v86 = 0;
      *(void *)(v86 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v10;
      *(void *)(v81[v83] + 32 * v85 + 16) = v10;
      *(void *)(v81[v83] + 32 * v85 + memset(&context, 0, 24) = v9;
      std::vector<std::pair<unsigned long,char const*>>::resize( (std::vector<std::pair<unsigned long, const char *>> *)(v81[v83] + 32 * v85 + 56),  *(unsigned int *)(a1 + 32));
      v162 = 0LL;
      char v164 = 0;
      unsigned int v87 = 0;
      uint64_t v88 = v175.i64[1];
      std::string v89 = v173[1];
      unint64_t v90 = v175.i64[1] + v175.i64[0] - 1;
      unint64_t v91 = v90 / 0x2A;
      unint64_t v92 = 3 * (v90 % 0x2A);
      *(void *)(*((void *)v173[1] + v91) + 32 * v92 + 80) = v80;
      v172 = (char *)(v9 - v10);
      uint64_t v93 = v89[v91] + 32 * v92;
      *(_DWORD *)(v93 + 8std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v7;
      *(_BYTE *)(v93 + 92) = a6;
      while (2)
      {
        unint64_t v95 = v88 + v175.i64[0] - 1;
        uint64_t v96 = *((void *)v173[1] + v95 / 0x2A);
        unint64_t v97 = v95 % 0x2A;
        uint64_t v98 = v96 + 96 * (v95 % 0x2A);
        v100 = (void *)(v98 + 80);
        uint64_t v99 = *(void *)(v98 + 80);
        if (v99) {
          (*(void (**)(uint64_t, unint64_t))(*(void *)v99 + 16LL))(v99, v96 + 96 * v97);
        }
        switch(*(_DWORD *)v98)
        {
          case 0xFFFFFC18:
            v101 = *(const char **)(v96 + 96 * v97 + 16);
            BOOL v102 = (v7 & 0x1000) == 0 || v101 == v9;
            char v103 = v102;
            BOOL v104 = v101 != v10 || (v7 & 0x20) == 0;
            if (!v104 || (v103 & 1) == 0) {
              goto LABEL_199;
            }
            uint64_t v105 = (uint64_t)&v101[-*(void *)(v96 + 96 * v97 + 8)];
            v106 = v162;
            if (v106 != v172)
            {
              v162 = v106;
              std::deque<std::__state<char>>::pop_back(v173);
              char v164 = 1;
              goto LABEL_200;
            }

            v107 = (void **)v173[1];
            v108 = (_BYTE *)v174;
            if ((void *)v174 == v173[1])
            {
              v108 = v173[1];
            }

            else
            {
              v109 = v9;
              v110 = (char *)v173[1] + 8 * (v175.i64[0] / 0x2AuLL);
              v111 = (void *)(*v110 + 96 * (v175.i64[0] % 0x2AuLL));
              unint64_t v112 = *((void *)v173[1] + (v175.i64[1] + v175.i64[0]) / 0x2AuLL)
                   + 96 * ((v175.i64[1] + v175.i64[0]) % 0x2AuLL);
              if (v111 != (void *)v112)
              {
                do
                {
                  std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v111);
                  v111 += 12;
                  if ((void *)((char *)v111 - *v110) == (void *)4032)
                  {
                    v113 = (void *)v110[1];
                    ++v110;
                    v111 = v113;
                  }
                }

                while (v111 != (void *)v112);
                v107 = (void **)v173[1];
                v108 = (_BYTE *)v174;
              }

              LOWORD(v7) = v169;
              int v9 = v109;
            }

            v175.i64[1] = 0LL;
            unint64_t v144 = v108 - (_BYTE *)v107;
            if (v144 >= 0x11)
            {
              do
              {
                operator delete(*v107);
                v107 = (void **)((char *)v173[1] + 8);
                v173[1] = v107;
                unint64_t v144 = v174 - (void)v107;
              }

              while ((void)v174 - (void)v107 > 0x10uLL);
            }

            if (v144 >> 3 == 1)
            {
              uint64_t v145 = 21LL;
            }

            else
            {
              if (v144 >> 3 != 2) {
                goto LABEL_187;
              }
              uint64_t v145 = 42LL;
            }

            v175.i64[0] = v145;
LABEL_187:
            char v164 = 1;
            v162 = v172;
LABEL_200:
            uint64_t v88 = v175.i64[1];
            if (v175.i64[1]) {
              continue;
            }
            if ((v164 & 1) == 0) {
              goto LABEL_203;
            }
            uint64_t v153 = *v155;
            *(void *)uint64_t v153 = v10;
            *(void *)(v153 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = &v162[(void)v10];
            char v14 = 1;
            *(_BYTE *)(v153 + 16) = 1;
            break;
          case 0xFFFFFC19:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_200;
          case 0xFFFFFC1D:
            unint64_t v114 = v175.i64[0];
            v115 = (char *)v173[1];
            v116 = (char *)v174;
            if (!v175.i64[0])
            {
              unint64_t v120 = (uint64_t)(v174 - (unint64_t)v173[1]) >> 3;
              uint64_t v121 = 42 * v120 - 1;
              if ((unint64_t)(v121 - v175.i64[1]) < 0x2A)
              {
                if (v120 >= (uint64_t)(*((void *)&v174 + 1) - (unint64_t)v173[0]) >> 3)
                {
                  else {
                    unint64_t v122 = (uint64_t)(*((void *)&v174 + 1) - (unint64_t)v173[0]) >> 2;
                  }
                  *(void *)&v176[32] = (char *)&v174 + 8;
                  *(void *)v176 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v122);
                  *(void *)&v176[8] = *(void *)v176;
                  *(void *)&v176[16] = *(void *)v176;
                  *(void *)&v176[24] = *(void *)v176 + 8 * v123;
                  v166 = v9;
                  v168 = v10;
                  __x.first = (const char *)operator new(0xFC0uLL);
                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v176, &__x);
                  v124 = (uint64_t *)v173[1];
                  v125 = *(char **)&v176[16];
                  for (LOWORD(v7) = v169; v124 != (uint64_t *)v174; *(void *)&v176[16] += 8LL)
                  {
                    if (v125 == *(char **)&v176[24])
                    {
                      v126 = *(char **)&v176[8];
                      v127 = *(void **)v176;
                      if (*(void *)&v176[8] <= *(void *)v176)
                      {
                        else {
                          unint64_t v134 = (uint64_t)&v125[-*(void *)v176] >> 2;
                        }
                        v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v134);
                        uint64_t v137 = v125 - v126;
                        BOOL v102 = v125 == v126;
                        v125 = &v135[8 * (v134 >> 2)];
                        if (!v102)
                        {
                          v125 = &v135[8 * (v134 >> 2) + (v137 & 0xFFFFFFFFFFFFFFF8LL)];
                          uint64_t v138 = 8 * (v137 >> 3);
                          v139 = &v135[8 * (v134 >> 2)];
                          do
                          {
                            uint64_t v140 = *(void *)v126;
                            v126 += 8;
                            *(void *)v139 = v140;
                            v139 += 8;
                            v138 -= 8LL;
                          }

                          while (v138);
                        }

                        *(void *)v176 = v135;
                        *(void *)&v176[8] = &v135[8 * (v134 >> 2)];
                        *(void *)&v176[16] = v125;
                        *(void *)&v176[24] = &v135[8 * v136];
                        if (v127) {
                          operator delete(v127);
                        }
                      }

                      else
                      {
                        uint64_t v128 = (uint64_t)(*(void *)&v176[8] - *(void *)v176) >> 3;
                        if (v128 >= -1) {
                          uint64_t v129 = v128 + 1;
                        }
                        else {
                          uint64_t v129 = v128 + 2;
                        }
                        uint64_t v130 = *(void *)&v176[8] - 8 * (v129 >> 1);
                        size_t v131 = (size_t)&v125[-*(void *)&v176[8]];
                        if (v125 != *(char **)&v176[8])
                        {
                          v132 = (void *)(*(void *)&v176[8] - 8 * (v129 >> 1));
                          memmove(v132, *(const void **)&v176[8], v131);
                          uint64_t v130 = (uint64_t)v132;
                          v125 = v126;
                        }

                        v133 = &v125[-8 * (v129 >> 1)];
                        v125 = (char *)(v130 + v131);
                        *(void *)&v176[8] = v133;
                        *(void *)&v176[16] = v130 + v131;
                      }

                      LOWORD(v7) = v169;
                    }

                    uint64_t v141 = *v124++;
                    *(void *)v125 = v141;
                    v125 = (char *)(*(void *)&v176[16] + 8LL);
                  }

                  v142 = v173[0];
                  *(_OWORD *)v173 = *(_OWORD *)v176;
                  *(void *)&__int128 v174 = v125;
                  *((void *)&v174 + 1) = *(void *)&v176[24];
                  uint64_t v143 = 21LL;
                  v175.i64[0] = v143;
                  uint64_t v10 = v168;
                  if (v142) {
                    operator delete(v142);
                  }
                  int v9 = v166;
                }

                else
                {
                  if (v173[1] == v173[0])
                  {
                    *(void *)v176 = operator new(0xFC0uLL);
                    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back( v173,  v176);
                    *(void *)v176 = *(void *)(v174 - 8);
                    *(void *)&__int128 v174 = v174 - 8;
                  }

                  else
                  {
                    *(void *)v176 = operator new(0xFC0uLL);
                  }

                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front( (uint64_t)v173,  v176);
                  uint64_t v146 = 21LL;
                  v175.i64[0] = v146;
                }
              }

              else
              {
                v175.i64[0] = 42LL;
                *(void *)v176 = *(void *)(v174 - 8);
                *(void *)&__int128 v174 = v174 - 8;
                std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front( (uint64_t)v173,  v176);
              }

              unint64_t v114 = v175.i64[0];
              v115 = (char *)v173[1];
              v116 = (char *)v174;
            }

            v147 = &v115[8 * (v114 / 0x2A)];
            unint64_t v148 = *(void *)v147 + 96 * (v114 % 0x2A);
            if (v116 == v115) {
              uint64_t v149 = 0LL;
            }
            else {
              uint64_t v149 = v148;
            }
            if (v149 == *(void *)v147) {
              uint64_t v149 = *((void *)v147 - 1) + 4032LL;
            }
            __int128 v150 = *(_OWORD *)(v98 + 16);
            *(_OWORD *)(v149 - 96) = *(_OWORD *)v98;
            *(_OWORD *)(v149 - 80) = v150;
            uint64_t v151 = v96 + 96 * v97;
            *(void *)(v149 - 56) = 0LL;
            *(void *)(v149 - std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = 0LL;
            *(void *)(v149 - 64) = 0LL;
            *(_OWORD *)(v149 - 64) = *(_OWORD *)(v151 + 32);
            *(void *)(v149 - std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = *(void *)(v151 + 48);
            *(void *)(v151 + 32) = 0LL;
            *(void *)(v151 + 40) = 0LL;
            *(void *)(v151 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = 0LL;
            *(void *)(v149 - 40) = 0LL;
            *(void *)(v149 - 32) = 0LL;
            *(void *)(v149 - memset(&context, 0, 24) = 0LL;
            *(_OWORD *)(v149 - 40) = *(_OWORD *)(v151 + 56);
            *(void *)(v149 - memset(&context, 0, 24) = *(void *)(v151 + 72);
            *(void *)(v151 + 56) = 0LL;
            *(void *)(v151 + 64) = 0LL;
            *(void *)(v151 + 72) = 0LL;
            uint64_t v152 = *v100;
            *(void *)(v149 - 11) = *(void *)(v98 + 85);
            *(void *)(v149 - 16) = v152;
            int64x2_t v175 = vaddq_s64(v175, (int64x2_t)xmmword_186634460);
            goto LABEL_199;
          case 0xFFFFFC1F:
LABEL_199:
            std::deque<std::__state<char>>::pop_back(v173);
            goto LABEL_200;
          case 0xFFFFFC20:
            *(void *)&__int128 v117 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v117 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)&v176[64] = v117;
            *(_OWORD *)&v176[80] = v117;
            *(_OWORD *)&v176[32] = v117;
            *(_OWORD *)&v176[48] = v117;
            *(_OWORD *)v176 = v117;
            *(_OWORD *)&v176[16] = v117;
            __int128 v118 = *(_OWORD *)(v98 + 16);
            *(_OWORD *)v176 = *(_OWORD *)v98;
            *(_OWORD *)&v176[16] = v118;
            memset(&v176[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>( &v176[32],  *(__int128 **)(v96 + 96 * v97 + 32),  *(__int128 **)(v96 + 96 * v97 + 40),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v96 + 96 * v97 + 40) - *(void *)(v96 + 96 * v97 + 32)) >> 3));
            memset(&v176[56], 0, 24);
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>( &v176[56],  *(__int128 **)(v96 + 96 * v97 + 56),  *(__int128 **)(v96 + 96 * v97 + 64),  (uint64_t)(*(void *)(v96 + 96 * v97 + 64) - *(void *)(v96 + 96 * v97 + 56)) >> 4);
            uint64_t v119 = *v100;
            *(void *)&v176[85] = *(void *)(v98 + 85);
            *(void *)&v176[80] = v119;
            (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v100 + 24LL))(*v100, 1LL, v98);
            (*(void (**)(void, void, _BYTE *))(**(void **)&v176[80] + 24LL))( *(void *)&v176[80],  0LL,  v176);
            std::deque<std::__state<char>>::push_back(v173, (uint64_t)v176);
            if (*(void *)&v176[56])
            {
              *(void *)&v176[64] = *(void *)&v176[56];
              operator delete(*(void **)&v176[56]);
            }

            if (*(void *)&v176[32])
            {
              *(void *)&v176[40] = *(void *)&v176[32];
              operator delete(*(void **)&v176[32]);
            }

            goto LABEL_200;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }

        break;
      }
    }

    else
    {
LABEL_203:
      char v14 = 0;
    }

    std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)v173);
  }

  return v14 & 1;
}

void sub_1865F2310( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *__p, uint64_t a30, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, uint64_t a35, void *a36, uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::__state<char>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[1];
  char v5 = (char *)a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v5 == v4) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = 42 * v6 - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 < 0x2A)
    {
      int v23 = (char *)a1[3];
      uint64_t v24 = (uint64_t)&v23[-*a1];
      if (v6 >= v24 >> 3)
      {
        else {
          unint64_t v25 = v24 >> 2;
        }
        unsigned int v87 = a1 + 3;
        unint64_t v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v25);
        uint64_t v84 = &v83[8 * v6];
        unint64_t v85 = v84;
        uint64_t v86 = &v83[8 * v26];
        unint64_t v82 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(&v83, &v82);
        __int128 v28 = v83;
        uint64_t v27 = v84;
        uint64_t v29 = v85;
        uint64_t v30 = v86;
        uint64_t v31 = a1[2];
        if (v31 == a1[1])
        {
          __int128 v47 = v84;
        }

        else
        {
          do
          {
            if (v27 == v28)
            {
              if (v29 >= v30)
              {
                if (v30 == v27) {
                  unint64_t v37 = 1LL;
                }
                else {
                  unint64_t v37 = (v30 - v27) >> 2;
                }
                char v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v37);
                __int128 v28 = v38;
                uint64_t v32 = &v38[(2 * v37 + 6) & 0xFFFFFFFFFFFFFFF8LL];
                uint64_t v41 = v29 - v27;
                BOOL v40 = v29 == v27;
                uint64_t v29 = v32;
                if (!v40)
                {
                  uint64_t v29 = &v32[v41 & 0xFFFFFFFFFFFFFFF8LL];
                  uint64_t v42 = 8 * (v41 >> 3);
                  unint64_t v43 = v32;
                  uint64_t v44 = v27;
                  do
                  {
                    uint64_t v45 = *(void *)v44;
                    v44 += 8;
                    *(void *)unint64_t v43 = v45;
                    v43 += 8;
                    v42 -= 8LL;
                  }

                  while (v42);
                }

                uint64_t v30 = &v38[8 * v39];
                if (v27) {
                  operator delete(v27);
                }
              }

              else
              {
                uint64_t v33 = (v30 - v29) >> 3;
                if (v33 >= -1) {
                  uint64_t v34 = v33 + 1;
                }
                else {
                  uint64_t v34 = v33 + 2;
                }
                uint64_t v35 = v34 >> 1;
                uint64_t v32 = &v27[8 * (v34 >> 1)];
                char v36 = v27;
                if (v29 != v27)
                {
                  memmove(v32, v27, v29 - v27);
                  char v36 = v29;
                }

                uint64_t v29 = &v36[8 * v35];
                __int128 v28 = v27;
              }
            }

            else
            {
              uint64_t v32 = v27;
            }

            uint64_t v46 = *(void *)(v31 - 8);
            v31 -= 8LL;
            *((void *)v32 - 1) = v46;
            __int128 v47 = v32 - 8;
            uint64_t v27 = v47;
          }

          while (v31 != a1[1]);
        }

        size_t v62 = (char *)*a1;
        *a1 = v28;
        a1[1] = v47;
        a1[2] = v29;
        a1[3] = v30;
        if (v62) {
          operator delete(v62);
        }
        goto LABEL_54;
      }

      if (v23 != v5)
      {
        unint64_t v83 = (char *)operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v83);
LABEL_54:
        uint64_t v4 = (char *)a1[1];
        unint64_t v9 = a1[5] + a1[4];
        goto LABEL_55;
      }

      unint64_t v83 = (char *)operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v83);
      unint64_t v59 = (void *)a1[1];
      char v5 = (char *)a1[2];
      uint64_t v61 = *v59;
      __int128 v60 = (char *)(v59 + 1);
      uint64_t v11 = v61;
      a1[1] = v60;
      if (v5 == (char *)a1[3])
      {
        uint64_t v67 = (uint64_t)&v60[-*a1];
        if ((unint64_t)v60 > *a1)
        {
          uint64_t v68 = v67 >> 3;
          BOOL v15 = v67 >> 3 < -1;
          uint64_t v69 = (v67 >> 3) + 2;
          if (v15) {
            uint64_t v70 = v69;
          }
          else {
            uint64_t v70 = v68 + 1;
          }
          uint64_t v71 = -(v70 >> 1);
          uint64_t v72 = v70 >> 1;
          size_t v73 = &v60[-8 * v72];
          int64_t v74 = v5 - v60;
          if (v5 != v60)
          {
            memmove(&v60[-8 * v72], v60, v5 - v60);
            __int128 v60 = (char *)a1[1];
          }

          char v5 = &v73[v74];
          BOOL v22 = &v60[8 * v71];
          goto LABEL_14;
        }

        else {
          unint64_t v75 = (uint64_t)&v5[-*a1] >> 2;
        }
        int64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v75);
        std::string::size_type v50 = &v49[8 * (v75 >> 2)];
        __int128 v52 = &v49[8 * v76];
        unsigned int v77 = (uint64_t *)a1[1];
        char v5 = v50;
        uint64_t v78 = a1[2] - (void)v77;
        if (v78)
        {
          char v5 = &v50[v78 & 0xFFFFFFFFFFFFFFF8LL];
          uint64_t v79 = 8 * (v78 >> 3);
          uint64_t v80 = &v49[8 * (v75 >> 2)];
          do
          {
            uint64_t v81 = *v77++;
            *(void *)uint64_t v80 = v81;
            v80 += 8;
            v79 -= 8LL;
          }

          while (v79);
        }

void sub_1865F28B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1LL;
  uint64_t v3 = a1[2];
  BOOL v4 = v3 == a1[1];
  uint64_t v5 = 42 * ((v3 - a1[1]) >> 3) - 1;
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  a1[5] = v6 - 1;
  if (v4) {
    uint64_t v5 = 0LL;
  }
  if ((unint64_t)(v5 - (v6 + v7) - 83) <= 0xFFFFFFFFFFFFFFABLL)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8LL;
  }

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back( void *a1, void *a2)
{
  BOOL v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      int v20 = (uint64_t *)a1[1];
      BOOL v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        BOOL v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v22 = 8 * (v21 >> 3);
        int v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)int v23 = v24;
          v23 += 8;
          v22 -= 8LL;
        }

        while (v22);
      }

      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        BOOL v4 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        BOOL v4 = (char *)a1[1];
      }

      BOOL v15 = &v4[8 * v11];
      BOOL v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }

  *(void *)BOOL v4 = *a2;
  a1[2] += 8LL;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front( uint64_t a1, void *a2)
{
  BOOL v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(_BYTE **)(a1 + 16);
    uint64_t v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1LL;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8LL];
      BOOL v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8LL;
        }

        while (v18);
      }

      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + memset(&context, 0, 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }

    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        BOOL v4 = *(char **)(a1 + 16);
      }

      *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }

  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }

  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8LL;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    BOOL v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }

  else
  {
    BOOL v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 / 0x2A];
    uint64_t v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0x2A] + 96 * ((*(void *)(a1 + 40) + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v7);
        v7 += 96;
        if (v7 - (_BYTE *)*v6 == 4032)
        {
          uint64_t v9 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }

      while (v7 != (char *)v8);
      unint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }

  void *v4 = 0LL;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8LL);
      *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 21LL;
    goto LABEL_14;
  }

  if (v11 == 2)
  {
    uint64_t v12 = 42LL;
LABEL_14:
    *(void *)(a1 + 32) = v12;
  }

  if (v2 != v3)
  {
    do
    {
      uint64_t v13 = *v2++;
      operator delete(v13);
    }

    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    }
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==( const std::regex_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_iterator<std::__wrap_iter<const char *>, char> *__x)
{
  p_match = &this->__match_;
  std::vector<std::ssub_match>::pointer begin = this->__match_.__matches_.__begin_;
  std::vector<char>::pointer end = p_match->__matches_.__end_;
  uint64_t v9 = &__x->__match_;
  std::vector<std::ssub_match>::pointer v7 = __x->__match_.__matches_.__begin_;
  unint64_t v8 = v9->__matches_.__end_;
  BOOL v10 = v8 == v7 && end == begin;
  if (end != begin && v8 != v7) {
    return this->__begin_.__i_ == __x->__begin_.__i_
  }
        && this->__end_.__i_ == __x->__end_.__i_
        && this->__pregex_ == __x->__pregex_
        && this->__flags_ == __x->__flags_
        && std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]( (uint64_t)begin,  (uint64_t)v7) == 0;
  return v10;
}

uint64_t std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>( &__p,  *(char **)a1,  *(char **)(a1 + 8),  *(void *)(a1 + 8) - *(void *)a1);
  }

  else
  {
    std::string __p = 0LL;
    size_t v19 = 0LL;
    uint64_t v20 = 0LL;
  }

  if (*(_BYTE *)(a2 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>( &v15,  *(char **)a2,  *(char **)(a2 + 8),  *(void *)(a2 + 8) - *(void *)a2);
    unsigned int v3 = HIBYTE(v17);
    unint64_t v5 = v15;
    size_t v4 = v16;
  }

  else
  {
    size_t v4 = 0LL;
    unint64_t v5 = 0LL;
    unsigned int v3 = 0;
    uint64_t v15 = 0LL;
    size_t v16 = 0LL;
    uint64_t v17 = 0LL;
  }

  char v6 = HIBYTE(v20);
  if (v20 >= 0) {
    size_t v7 = HIBYTE(v20);
  }
  else {
    size_t v7 = v19;
  }
  if (v20 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v3 & 0x80u) == 0) {
    size_t v9 = v3;
  }
  else {
    size_t v9 = v4;
  }
  if ((v3 & 0x80u) == 0) {
    BOOL v10 = (void **)&v15;
  }
  else {
    BOOL v10 = v5;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  unsigned int v12 = memcmp(p_p, v10, v11);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v20 & 0x8000000000000000LL) == 0) {
      goto LABEL_24;
    }
  }

  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_24;
  }

  operator delete(__p);
LABEL_24:
  unsigned int v13 = v9 < v7;
  if (v7 < v9) {
    unsigned int v13 = -1;
  }
  if (v12) {
    return v12;
  }
  else {
    return v13;
  }
}

void sub_1865F2F04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>( uint64_t a1, char *a2, char *a3)
{
  char v6 = operator new(8uLL);
  void *v6 = off_189E952F8;
  size_t v7 = operator new(0x10uLL);
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>( (void *)(a1 + 40),  (uint64_t)v7);
  unint64_t v8 = *(std::__owns_one_state<char> **)(a1 + 40);
  *(void *)(a1 + 56) = v8;
  unsigned int v9 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v9 > 0x3F)
  {
    switch(v9)
    {
      case 0x40u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>( (std::basic_regex<char> *)a1,  a2,  a3);
      case 0x80u:
        uint64_t v15 = (char *)memchr(a2, 10, a3 - a2);
        if (v15) {
          size_t v16 = v15;
        }
        else {
          size_t v16 = a3;
        }
        if (v16 == a2)
        {
          uint64_t v17 = (std::__node<char> *)operator new(0x10uLL);
          first = v8->__first_;
          v17[1].__vftable = (std::__node<char>_vtbl *)first;
          v8->__first_ = v17;
          *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
        }

        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>( a1,  a2,  v16);
        }

        while (1)
        {
          __int128 v28 = v16 == a3 ? v16 : v16 + 1;
          if (v28 == a3) {
            break;
          }
          uint64_t v24 = (char *)memchr(v28, 10, a3 - v28);
          if (v24) {
            size_t v16 = v24;
          }
          else {
            size_t v16 = a3;
          }
          unint64_t v25 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v16 == v28)
          {
            uint64_t v26 = (std::__node<char> *)operator new(0x10uLL);
            uint64_t v27 = v25->__first_;
            v26[1].__vftable = (std::__node<char>_vtbl *)v27;
            v25->__first_ = v26;
            *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
          }

          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>( a1,  v28,  v16);
          }

          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v8, v25);
        }

        break;
      case 0x100u:
        BOOL v10 = (char *)memchr(a2, 10, a3 - a2);
        if (v10) {
          size_t v11 = v10;
        }
        else {
          size_t v11 = a3;
        }
        if (v11 == a2)
        {
          unsigned int v12 = (std::__node<char> *)operator new(0x10uLL);
          unsigned int v13 = v8->__first_;
          v12[1].__vftable = (std::__node<char>_vtbl *)v13;
          v8->__first_ = v12;
          *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
        }

        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>( (std::basic_regex<char> *)a1,  a2,  v11);
        }

        while (1)
        {
          int v23 = v11 == a3 ? v11 : v11 + 1;
          if (v23 == a3) {
            break;
          }
          size_t v19 = (char *)memchr(v23, 10, a3 - v23);
          if (v19) {
            size_t v11 = v19;
          }
          else {
            size_t v11 = a3;
          }
          uint64_t v20 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v11 == v23)
          {
            uint64_t v21 = (std::__node<char> *)operator new(0x10uLL);
            uint64_t v22 = v20->__first_;
            v21[1].__vftable = (std::__node<char>_vtbl *)v22;
            v20->__first_ = v21;
            *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
          }

          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>( (std::basic_regex<char> *)a1,  v23,  v11);
          }

          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v8, v20);
        }

        break;
      default:
        goto LABEL_48;
    }

    return a3;
  }

  else if (v9)
  {
    if (v9 != 16)
    {
      if (v9 != 32) {
LABEL_48:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>( (std::basic_regex<char> *)a1,  a2,  a3);
    }

    return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>( a1,  a2,  a3);
  }

  else
  {
    return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>( (std::basic_regex<char> *)a1,  (unsigned __int8 *)a2,  (unsigned __int8 *)a3);
  }

void sub_1865F31F4(_Unwind_Exception *a1)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>( std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  std::vector<char>::pointer end = a1->__end_;
  size_t v7 = a2;
  do
  {
    unint64_t v8 = v7;
    size_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v7, a3);
  }

  while (v8 != v7);
  if (v8 == a2)
  {
    unsigned int v9 = (std::__node<char> *)operator new(0x10uLL);
    BOOL v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }

  if (v8 != a3)
  {
    while (*v8 == 124)
    {
      unsigned int v12 = a1->__end_;
      unsigned int v13 = v8 + 1;
      uint64_t v14 = v8 + 1;
      do
      {
        unint64_t v8 = v14;
        uint64_t v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v14, a3);
      }

      while (v8 != v14);
      if (v13 == v8)
      {
        uint64_t v15 = (std::__node<char> *)operator new(0x10uLL);
        size_t v16 = a1->__end_;
        uint64_t v17 = v16->__first_;
        v15[1].__vftable = (std::__node<char>_vtbl *)v17;
        v16->__first_ = v15;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
      }

      std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
      if (v8 == a3) {
        return a3;
      }
    }
  }

  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>( uint64_t a1, char *a2, char *a3)
{
  unsigned int v3 = a2;
  if (a2 == a3) {
    return a2;
  }
  size_t v4 = a3;
  if (*a2 == 94)
  {
    char v6 = operator new(0x18uLL);
    BOOL v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(v8 + 8);
    void *v6 = &off_189E95470;
    v6[1] = v9;
    *((_BYTE *)v6 + 16) = v7;
    *(void *)(v8 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v6;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
    ++v3;
  }

  if (v3 != v4)
  {
    do
    {
      BOOL v10 = v3;
      unsigned int v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>( (std::basic_regex<char> *)a1,  v3,  v4);
    }

    while (v10 != v3);
    if (v10 != v4)
    {
      if (v10 + 1 != v4 || *v10 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      size_t v11 = operator new(0x18uLL);
      BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v13 = *(void *)(a1 + 56);
      uint64_t v14 = *(void *)(v13 + 8);
      *size_t v11 = &off_189E954B8;
      v11[1] = v14;
      *((_BYTE *)v11 + 16) = v12;
      *(void *)(v13 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v11;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
    }
  }

  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>( std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::vector<char>::pointer end = a1->__end_;
  BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  uint64_t v8 = v7;
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    uint64_t v9 = a1->__end_;
    BOOL v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>( a1,  (char *)v8 + 1,  a3);
    if (v8 + 1 == v10) {
      goto LABEL_9;
    }
    uint64_t v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }

  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>( std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v6 = (char)*a2;
  int v7 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == a3) {
        goto LABEL_33;
      }
      int v23 = a2[1];
      if (v23 == 66)
      {
        BOOL v24 = 1;
      }

      else
      {
        if (v23 != 98) {
          goto LABEL_33;
        }
        BOOL v24 = 0;
      }

      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v24);
      uint64_t v21 = 2LL;
      return &a2[v21];
    }

    if (v6 != 94) {
      goto LABEL_33;
    }
    size_t v16 = (std::__node<char> *)operator new(0x18uLL);
    BOOL v17 = (this->__flags_ & 0x5F0) == 1024;
    std::vector<char>::pointer end = this->__end_;
    first = end->__first_;
    uint64_t v20 = &off_189E95470;
LABEL_21:
    v16->__vftable = (std::__node<char>_vtbl *)v20;
    v16[1].__vftable = (std::__node<char>_vtbl *)first;
    LOBYTE(v16[2].__vftable) = v17;
    end->__first_ = v16;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    uint64_t v21 = 1LL;
    return &a2[v21];
  }

  if (v6 == 36)
  {
    size_t v16 = (std::__node<char> *)operator new(0x18uLL);
    BOOL v17 = (this->__flags_ & 0x5F0) == 1024;
    std::vector<char>::pointer end = this->__end_;
    first = end->__first_;
    uint64_t v20 = &off_189E954B8;
    goto LABEL_21;
  }

  BOOL v9 = v6 == 40;
  uint64_t v8 = a2 + 1;
  BOOL v9 = !v9 || v8 == a3;
  if (!v9)
  {
    BOOL v9 = *v8 == 63;
    BOOL v10 = a2 + 2;
    if (v9 && v10 != a3)
    {
      int v12 = (char)*v10;
      if (v12 == 33)
      {
        *(void *)&__int128 v25 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v52.__loop_count_ = v25;
        *(_OWORD *)&v52.__start_.__cntrl_ = v25;
        *(_OWORD *)&v52.__traits_.__loc_.__locale_ = v25;
        *(_OWORD *)&v52.__traits_.__col_ = v25;
        std::regex_traits<char>::regex_traits(&v52.__traits_);
        memset(&v52.__flags_, 0, 40);
        v52.__flags_ = this->__flags_;
        uint64_t v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>( &v52,  a2 + 3,  a3);
        unsigned int marked_count = v52.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v52, 1, this->__marked_count_);
        this->__marked_count_ += marked_count;
        if (v14 == a3 || *v14 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
      }

      else
      {
        if (v12 != 61) {
          goto LABEL_33;
        }
        *(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v52.__loop_count_ = v13;
        *(_OWORD *)&v52.__start_.__cntrl_ = v13;
        *(_OWORD *)&v52.__traits_.__loc_.__locale_ = v13;
        *(_OWORD *)&v52.__traits_.__col_ = v13;
        std::regex_traits<char>::regex_traits(&v52.__traits_);
        memset(&v52.__flags_, 0, 40);
        v52.__flags_ = this->__flags_;
        uint64_t v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>( &v52,  a2 + 3,  a3);
        unsigned int v15 = v52.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v52, 0, this->__marked_count_);
        this->__marked_count_ += v15;
        if (v14 == a3 || *v14 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
      }

      std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)&v52.__start_);
      std::locale::~locale(&v52.__traits_.__loc_);
      __n128 result = v14 + 1;
      if (v14 + 1 != a2) {
        return result;
      }
      int v7 = *a2;
    }
  }

LABEL_97:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }

        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
        unsigned int v38 = this->__marked_count_;
        ++this->__open_count_;
        uint64_t v39 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>( this,  a2 + 1,  a3);
        if (v39 == a3) {
          goto LABEL_97;
        }
        BOOL v40 = v39;
        if (*v39 != 41) {
          goto LABEL_97;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v38);
        --this->__open_count_;
        uint64_t v30 = v40 + 1;
        goto LABEL_94;
      case '*':
      case '+':
        goto LABEL_60;
      case '.':
        uint64_t v35 = (std::__node<char> *)operator new(0x10uLL);
        char v36 = v27->__first_;
        v35->__vftable = (std::__node<char>_vtbl *)&off_189E95590;
        v35[1].__vftable = (std::__node<char>_vtbl *)v36;
        v27->__first_ = v35;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        uint64_t v30 = a2 + 1;
        unsigned int v37 = v28;
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>( (uint64_t)this,  v30,  a3,  v27,  v28 + 1,  v37 + 1);
      default:
        if ((char)v7 == 91)
        {
          uint64_t v30 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>( (uint64_t)this,  (char *)a2,  (char *)a3);
          goto LABEL_94;
        }

        goto LABEL_60;
    }
  }

  uint64_t v31 = ((char)v7 - 92);
  if (v31 <= 0x21)
  {
    if ((char)v7 == 92)
    {
      uint64_t v30 = a2;
      if (v7 != 92) {
        goto LABEL_94;
      }
      uint64_t v32 = a2 + 1;
      if (a2 + 1 == a3) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
      }
      int v33 = *v32;
      unsigned int v34 = v33 - 48;
      if (v33 == 48)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v34);
LABEL_93:
        uint64_t v30 = a2 + 2;
        goto LABEL_94;
      }

      if ((v33 - 49) <= 8)
      {
        uint64_t v30 = a2 + 2;
        if (a2 + 2 == a3)
        {
          uint64_t v30 = a3;
        }

        else
        {
          while (1)
          {
            int v41 = *v30;
            if (v34 >= 0x19999999) {
              goto LABEL_98;
            }
            ++v30;
            unsigned int v34 = v41 + 10 * v34 - 48;
            if (v30 == a3)
            {
              uint64_t v30 = a3;
              break;
            }
          }

          if (!v34) {
LABEL_98:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
        }

        if (v34 > v28) {
          goto LABEL_98;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v34);
        if (v32 != v30) {
          goto LABEL_94;
        }
        LOBYTE(v33) = *v32;
      }

      if ((char)v33 > 99)
      {
        if ((char)v33 == 119)
        {
          uint64_t v42 = this;
          BOOL v43 = 0;
          goto LABEL_85;
        }

        if ((char)v33 == 115)
        {
          std::string::size_type v50 = this;
          BOOL v51 = 0;
LABEL_91:
          started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v50, v51);
          int v47 = started->__mask_ | 0x4000;
          goto LABEL_92;
        }

        uint64_t v44 = this;
        BOOL v45 = 0;
      }

      else
      {
        if ((char)v33 != 68)
        {
          if ((char)v33 != 83)
          {
            if ((char)v33 == 87)
            {
              uint64_t v42 = this;
              BOOL v43 = 1;
LABEL_85:
              unint64_t v48 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v42, v43);
              v48->__mask_ |= 0x500u;
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v48, 95LL);
              goto LABEL_93;
            }

LABEL_86:
            int64_t v49 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>( this,  a2 + 1,  a3,  0LL);
            if (v32 == v49) {
              uint64_t v30 = a2;
            }
            else {
              uint64_t v30 = v49;
            }
LABEL_94:
            __n128 result = a2;
            if (v30 == a2) {
              return result;
            }
            goto LABEL_95;
          }

          std::string::size_type v50 = this;
          BOOL v51 = 1;
          goto LABEL_91;
        }

        uint64_t v44 = this;
        BOOL v45 = 1;
      }

      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v44, v45);
      int v47 = started->__mask_ | 0x400;
LABEL_92:
      started->__mask_ = v47;
      goto LABEL_93;
    }

    if (v31 == 31) {
LABEL_60:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
  }

void sub_1865F3B0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>( uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      __int128 v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        __int128 v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0LL;
        size_t v18 = 1LL;
        goto LABEL_33;
      }

      a5 = a5;
      a6 = a6;
      size_t v14 = 0LL;
      size_t v18 = 1LL;
      goto LABEL_45;
    }

    __int128 v13 = a2;
    if (v12 != 123) {
      return v13;
    }
    LODWORD(__max) = -1431655766;
    unsigned int v15 = a2 + 1;
    size_t v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v15 != v16)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            __int128 v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              __int128 v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              uint64_t v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop( (std::basic_regex<char> *)a1,  v14,  v18,  v21,  a5,  a6,  v22);
              return v13;
            }

            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            uint64_t v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }

          goto LABEL_58;
        }

        int v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          __int128 v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            __int128 v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }

          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1LL;
          goto LABEL_45;
        }

        int v27 = -1;
        __int128 v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v27);
        if (v23 != v25 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            __int128 v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                __int128 v13 = v25 + 2;
              }
            }

            a5 = v7;
            a6 = v6;
            a1 = v10;
            uint64_t v21 = __s;
            goto LABEL_46;
          }

          goto LABEL_58;
        }
      }

      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>( uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_140;
    }
    uint64_t v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list( (std::basic_regex<char> *)a1,  a2[1] == 94);
    uint64_t v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(_BYTE *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93LL);
      ++v5;
    }

    uint64_t v40 = 4LL - (void)a3;
    while (1)
    {
      uint64_t v8 = (char *)v5;
      if ((char *)v5 == a3)
      {
        uint64_t v10 = a3;
        goto LABEL_118;
      }

      int v9 = *(unsigned __int8 *)v5;
      uint64_t v10 = (char *)v5;
      if (v9 != 93) {
        break;
      }
LABEL_118:
      uint64_t v5 = (uint64_t)v10;
LABEL_119:
      if (v8 == (char *)v5)
      {
        if (v8 != a3)
        {
          if (*v8 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45LL);
            ++v8;
          }

          if (v8 != a3 && *v8 == 93) {
            return v8 + 1;
          }
        }

LABEL_140:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }

    int v11 = 0LL;
    v42[0] = 0LL;
    v42[1] = 0LL;
    BOOL v43 = 0LL;
    int v12 = 0LL;
    uint64_t v10 = (char *)v5;
    if ((char *)(v5 + 1) != a3 && v9 == 91)
    {
      int v13 = *(unsigned __int8 *)(v5 + 1);
      switch(v13)
      {
        case '.':
          uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>( a1,  (char *)(v5 + 2),  a3,  (uint64_t)v42);
          int v12 = (void *)HIBYTE(v43);
          int v11 = v42[1];
          break;
        case ':':
          for (unint64_t i = 0LL; *(_BYTE *)(v5 + i + 2) != 58 || *(_BYTE *)(v5 + i + 3) != 93; ++i)
          {
            if (!(v40 + v5 + i)) {
              goto LABEL_139;
            }
          }

          size_t v18 = (char *)(v5 + i + 2);
          if (v18 == a3) {
LABEL_139:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
          int v19 = *(_DWORD *)(a1 + 24);
          memset(&__p, 170, sizeof(__p));
          std::string::__init_with_size[abi:ne180100]<char *,char *>(&__p, (char *)(v5 + 2), v18, i);
          std::string::size_type size = __p.__r_.__value_.__s.__size_;
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          (*(void (**)(void, std::string *, char *))(**(void **)(a1 + 8) + 48LL))( *(void *)(a1 + 8),  p_p,  (char *)p_p + size);
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            BOOL v22 = &__p;
          }
          else {
            BOOL v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          std::regex_traits<char>::char_class_type classname = std::__get_classname((const char *)v22, v19 & 1);
          if (!classname) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
          }
          char v24 = 0;
          *(_DWORD *)(v7 + 160) |= classname;
          goto LABEL_114;
        case '=':
          for (unint64_t i = 0LL; *(_BYTE *)(v5 + i + 2) != 61 || *(_BYTE *)(v5 + i + 3) != 93; ++i)
          {
            if (!(v40 + v5 + i)) {
              goto LABEL_139;
            }
          }

          __int128 v25 = (char *)(v5 + i + 2);
          if (v25 == a3) {
            goto LABEL_139;
          }
          memset(&__p, 170, sizeof(__p));
          std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(&__p, a1, (char *)(v5 + 2), v25);
          if ((char)__p.__r_.__value_.__s.__size_ < 0)
          {
            std::string::size_type v26 = __p.__r_.__value_.__l.__size_;
            if (!__p.__r_.__value_.__l.__size_) {
LABEL_141:
            }
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
            memset(v44, 170, sizeof(v44));
            int v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }

          else
          {
            std::string::size_type v26 = __p.__r_.__value_.__s.__size_;
            if (!__p.__r_.__value_.__s.__size_) {
              goto LABEL_141;
            }
            int v27 = &__p;
            memset(v44, 170, sizeof(v44));
          }

          std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>( v44,  a1,  (char *)v27,  (char *)v27 + v26);
          uint64_t v29 = (void *)HIBYTE(v44[2]);
          if (SHIBYTE(v44[2]) < 0) {
            uint64_t v29 = v44[1];
          }
          if (v29)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100]( (void *)v7,  (uint64_t)v44);
          }

          else
          {
            std::string::size_type v30 = __p.__r_.__value_.__s.__size_;
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
            }
            if (v30 == 2)
            {
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                unsigned int v37 = &__p;
              }
              else {
                unsigned int v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]( v7,  v37->__r_.__value_.__s.__data_[0],  v37->__r_.__value_.__s.__data_[1]);
            }

            else
            {
              if (v30 != 1) {
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              }
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                uint64_t v31 = &__p;
              }
              else {
                uint64_t v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]( v7,  v31->__r_.__value_.__s.__data_[0]);
            }
          }

          if (SHIBYTE(v44[2]) < 0) {
            operator delete(v44[0]);
          }
          char v24 = 0;
LABEL_114:
          v5 += i + 4;
          uint64_t v35 = v8;
          goto LABEL_115;
        default:
          int v11 = 0LL;
          int v12 = 0LL;
          uint64_t v10 = (char *)v5;
          break;
      }
    }

    uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (!v11)
    {
      if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) == 0x40)
      {
        int v15 = *v10;
        if (v15 == 92)
        {
          size_t v16 = v10 + 1;
          if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0) {
            int v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>( (std::basic_regex<char> *)a1,  v16,  a3,  (uint64_t *)v42);
          }
          else {
            int v17 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>( (std::basic_regex<char> *)a1,  (unsigned __int8 *)v16,  (unsigned __int8 *)a3,  (uint64_t)v42,  v7);
          }
          uint64_t v10 = v17;
          goto LABEL_80;
        }
      }

      else
      {
        LOBYTE(v15) = *v10;
      }

      if ((char)v12 < 0)
      {
        unsigned int v28 = (void **)v42[0];
        v42[1] = (void *)1;
      }

      else
      {
        HIBYTE(v43) = 1;
        unsigned int v28 = v42;
      }

      *(_BYTE *)unsigned int v28 = v15;
      *((_BYTE *)v28 + 1) = 0;
      ++v10;
    }

LABEL_80:
    if (v10 != a3)
    {
      int v32 = *v10;
      if (v32 != 93)
      {
        unsigned int v34 = v10 + 1;
        if (v10 + 1 != a3 && v32 == 45 && *v34 != 93)
        {
          memset(&__p, 0, sizeof(__p));
          uint64_t v35 = v10 + 2;
          if (v10 + 2 != a3 && *v34 == 91 && *v35 == 46)
          {
            char v36 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>( a1,  v10 + 3,  a3,  (uint64_t)&__p);
            goto LABEL_124;
          }

          if ((v5 | 0x40) == 0x40)
          {
            LODWORD(v34) = *v34;
            if ((_DWORD)v34 == 92)
            {
              if ((_DWORD)v5) {
                char v36 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>( (std::basic_regex<char> *)a1,  v10 + 2,  a3,  (uint64_t *)&__p);
              }
              else {
                char v36 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>( (std::basic_regex<char> *)a1,  (unsigned __int8 *)v10 + 2,  (unsigned __int8 *)a3,  (uint64_t)&__p,  v7);
              }
LABEL_124:
              uint64_t v35 = v36;
LABEL_125:
              *(_OWORD *)uint64_t v44 = *(_OWORD *)v42;
              unsigned int v38 = v43;
              v42[1] = 0LL;
              BOOL v43 = 0LL;
              std::string v41 = __p;
              v42[0] = 0LL;
              v44[2] = v38;
              memset(&__p, 0, sizeof(__p));
              std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]( v7,  (char *)v44,  (char *)&v41);
              if (SHIBYTE(v44[2]) < 0) {
                operator delete(v44[0]);
              }
              char v24 = 1;
LABEL_115:
              if (SHIBYTE(v43) < 0) {
                operator delete(v42[0]);
              }
              uint64_t v10 = v35;
              if ((v24 & 1) == 0) {
                goto LABEL_119;
              }
              goto LABEL_118;
            }
          }

          else
          {
            LOBYTE(v34) = *v34;
          }

          __p.__r_.__value_.__s.__size_ = 1;
          LOWORD(__p.__r_.__value_.__l.__data_) = v34;
          goto LABEL_125;
        }
      }
    }

    if (SHIBYTE(v43) < 0)
    {
      if (v42[1])
      {
        if (v42[1] == (void *)1)
        {
          int v33 = (void **)v42[0];
LABEL_89:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]( v7,  *(char *)v33);
LABEL_100:
          char v24 = 1;
          uint64_t v35 = v10;
          goto LABEL_115;
        }

        int v33 = (void **)v42[0];
LABEL_99:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]( v7,  *(char *)v33,  *((char *)v33 + 1));
        goto LABEL_100;
      }

      operator delete(v42[0]);
    }

    else if (HIBYTE(v43))
    {
      int v33 = v42;
      if (HIBYTE(v43) == 1) {
        goto LABEL_89;
      }
      goto LABEL_99;
    }

    goto LABEL_118;
  }

  return a2;
}

void sub_1865F44E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, void *__p, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>( std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  size_t v4 = a2;
  if (a2 != a3)
  {
    uint64_t v5 = *a2;
    std::basic_regex<char>::value_type v6 = v5;
    if ((char)v5 > 109)
    {
      switch((char)v5)
      {
        case 'n':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 10;
            goto LABEL_69;
          }

          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1LL;
            a4 = (uint64_t *)*a4;
          }

          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }

          __int16 v16 = 10;
          goto LABEL_81;
        case 'r':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 13;
            goto LABEL_69;
          }

          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1LL;
            a4 = (uint64_t *)*a4;
          }

          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }

          __int16 v16 = 13;
          goto LABEL_81;
        case 't':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 9;
            goto LABEL_69;
          }

          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1LL;
            a4 = (uint64_t *)*a4;
          }

          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }

          __int16 v16 = 9;
          goto LABEL_81;
        case 'u':
          if (v4 + 1 != a3)
          {
            int v7 = v4[1];
            if ((v7 & 0xF8) == 0x30 || (v7 & 0xFE) == 0x38 || (v7 | 0x20u) - 97 < 6)
            {
              v4 += 2;
              if (v4 != a3)
              {
                int v8 = *v4;
                if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6) {
                  goto LABEL_27;
                }
              }
            }
          }

          goto LABEL_91;
        case 'v':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 11;
            goto LABEL_69;
          }

          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1LL;
            a4 = (uint64_t *)*a4;
          }

          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }

          __int16 v16 = 11;
          break;
        case 'x':
LABEL_27:
          if (v4 + 1 == a3) {
            goto LABEL_91;
          }
          unsigned __int8 v9 = v4[1];
          char v10 = -48;
          if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38) {
            goto LABEL_32;
          }
          v9 |= 0x20u;
          char v10 = -87;
LABEL_32:
          if (v4 + 2 == a3) {
            goto LABEL_91;
          }
          unsigned __int8 v11 = v4[2];
          char v12 = -48;
          if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38) {
            goto LABEL_37;
          }
          v11 |= 0x20u;
          char v12 = -87;
LABEL_37:
          std::basic_regex<char>::value_type v13 = v11 + 16 * (v9 + v10) + v12;
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1LL;
              a4 = (uint64_t *)*a4;
            }

            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }

            *(_BYTE *)a4 = v13;
            *((_BYTE *)a4 + 1) = 0;
          }

          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v13);
          }

          v4 += 3;
          return v4;
        default:
          goto LABEL_53;
      }

      goto LABEL_81;
    }

    if ((char)v5 == 48)
    {
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1LL;
          a4 = (uint64_t *)*a4;
        }

        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }

        *(_WORD *)a4 = 0;
        return ++v4;
      }

      std::basic_regex<char>::value_type v6 = 0;
      goto LABEL_69;
    }

    if ((char)v5 != 99)
    {
      if ((char)v5 == 102)
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1LL;
            a4 = (uint64_t *)*a4;
          }

          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }

          __int16 v16 = 12;
LABEL_81:
          *(_WORD *)a4 = v16;
          return ++v4;
        }

        std::basic_regex<char>::value_type v6 = 12;
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return ++v4;
      }

LABEL_53:
      if ((char)v5 != 95 && ((char)v5 < 0 || (a1->__traits_.__ct_->__tab_[v5] & 0x500) == 0))
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1LL;
            a4 = (uint64_t *)*a4;
          }

          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }

          *(_BYTE *)a4 = v5;
          *((_BYTE *)a4 + 1) = 0;
          return ++v4;
        }

        goto LABEL_69;
      }

LABEL_91:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }

    if (v4 + 1 == a3) {
      goto LABEL_91;
    }
    unsigned int v14 = v4[1];
    std::basic_regex<char>::value_type v15 = v14 & 0x1F;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1LL;
        a4 = (uint64_t *)*a4;
      }

      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }

      *(_BYTE *)a4 = v15;
      *((_BYTE *)a4 + 1) = 0;
    }

    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v15);
    }

    v4 += 2;
  }

  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>( uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  uint64_t v5 = a3 - 2;
  std::basic_regex<char>::value_type v6 = a2;
  int v7 = a2;
  for (i = a2; ; int v7 = i)
  {
    int v9 = *i++;
    if (v9 == 46 && *i == 93) {
      break;
    }
    if (a2 == v5) {
      goto LABEL_15;
    }
    ++v6;
    --v5;
  }

  if (v7 == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(&v13, a1, a2, v6);
  *(_OWORD *)a4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  std::string::size_type cap = v13.__r_.__value_.__l.__cap_;
  *(void *)(a4 + 16) = v13.__r_.__value_.__l.__cap_;
  std::string::size_type v11 = HIBYTE(cap);
  if ((v11 & 0x80u) != 0LL) {
    std::string::size_type v11 = *(void *)(a4 + 8);
  }
  if (v11 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>( std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v6 = (char)*a2;
  if (v6 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119) {
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>( a1,  a2,  a3,  (uint64_t *)a4);
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95LL);
        return a2 + 1;
      }

      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }

    else
    {
      if (v6 == 98)
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 1LL;
          a4 = *(void *)a4;
        }

        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }

        *(_WORD *)a4 = 8;
        return a2 + 1;
      }

      if (v6 != 100) {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>( a1,  a2,  a3,  (uint64_t *)a4);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }

    *(_DWORD *)(a5 + 160) = v8;
    return a2 + 1;
  }

  if (v6 <= 82)
  {
    if (!*a2)
    {
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 1LL;
        a4 = *(void *)a4;
      }

      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }

      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 1) = 0;
      return a2 + 1;
    }

    if (v6 == 68)
    {
      int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_22:
      *(_DWORD *)(a5 + 164) = v7;
      return a2 + 1;
    }

    return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>( a1,  a2,  a3,  (uint64_t *)a4);
  }

  if (v6 == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_22;
  }

  if (v6 != 87) {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>( a1,  a2,  a3,  (uint64_t *)a4);
  }
  *(_DWORD *)(a5 + 164) |= 0x500u;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5);
  return a2 + 1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>( std::basic_regex<char> *a1, char *a2, char *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_80:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  std::basic_regex<char>::value_type v6 = *a2;
  if (v5 > 97)
  {
    switch(*a2)
    {
      case 'n':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 10;
          break;
        }

        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1LL;
          a4 = (uint64_t *)*a4;
        }

        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }

        __int16 v13 = 10;
        goto LABEL_77;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_25;
      case 'r':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 13;
          break;
        }

        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1LL;
          a4 = (uint64_t *)*a4;
        }

        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }

        __int16 v13 = 13;
        goto LABEL_77;
      case 't':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 9;
          break;
        }

        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1LL;
          a4 = (uint64_t *)*a4;
        }

        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }

        __int16 v13 = 9;
        goto LABEL_77;
      case 'v':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 11;
          break;
        }

        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1LL;
          a4 = (uint64_t *)*a4;
        }

        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }

        __int16 v13 = 11;
        goto LABEL_77;
      default:
        if (v5 == 98)
        {
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1LL;
              a4 = (uint64_t *)*a4;
            }

            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }

            __int16 v13 = 8;
            goto LABEL_77;
          }

          std::basic_regex<char>::value_type v7 = 8;
        }

        else
        {
          if (v5 != 102) {
            goto LABEL_25;
          }
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1LL;
              a4 = (uint64_t *)*a4;
            }

            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }

            __int16 v13 = 12;
            goto LABEL_77;
          }

          std::basic_regex<char>::value_type v7 = 12;
        }

        break;
    }

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>( std::string *a1, uint64_t a2, char *a3, char *a4)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  if ((char)__s.__r_.__value_.__s.__size_ < 0)
  {
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_10;
    }
  }

  else
  {
    if (!__s.__r_.__value_.__s.__size_) {
      return;
    }
    p_s = &__s;
  }

  std::__get_collation_name(&v12, (const char *)p_s);
  *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
  std::string::size_type cap = v12.__r_.__value_.__l.__cap_;
  a1->__r_.__value_.__l.__cap_ = v12.__r_.__value_.__l.__cap_;
  std::string::size_type size = HIBYTE(cap);
  if ((size & 0x80u) != 0LL) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (size) {
    goto LABEL_8;
  }
  if ((char)__s.__r_.__value_.__s.__size_ < 0)
  {
    std::string::size_type v9 = __s.__r_.__value_.__l.__size_;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (__s.__r_.__value_.__l.__size_ < 3)
    {
LABEL_16:
      (*(void (**)(std::string *__return_ptr, void, std::string *, char *))(**(void **)(a2 + 16) + 32LL))( &v12,  *(void *)(a2 + 16),  p_s,  (char *)p_s + v9);
      *a1 = v12;
      if ((char)a1->__r_.__value_.__s.__size_ < 0)
      {
        std::string::size_type v11 = a1->__r_.__value_.__l.__size_;
        if (v11 != 1 && v11 != 12)
        {
          *a1->__r_.__value_.__l.__data_ = 0;
          a1->__r_.__value_.__l.__size_ = 0LL;
          goto LABEL_8;
        }
      }

      else
      {
        int v10 = a1->__r_.__value_.__s.__size_;
        if (v10 != 12 && v10 != 1)
        {
          a1->__r_.__value_.__s.__data_[0] = 0;
          a1->__r_.__value_.__s.__size_ = 0;
LABEL_8:
          p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
          goto LABEL_10;
        }
      }

      std::string::operator=(a1, &__s);
      goto LABEL_8;
    }

void sub_1865F4FE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>( std::basic_regex<char> *a1, char *a2, char *a3)
{
  unsigned int v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  std::vector<char>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  std::string::size_type v9 = a2 + 1;
  int v8 = *a2;
  if (a2 + 1 == a3 && v8 == 36) {
    goto LABEL_4;
  }
  if ((v8 - 46) > 0x2E || ((1LL << (v8 - 46)) & 0x600000000001LL) == 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
    goto LABEL_17;
  }

  if (v9 != a3 && v8 == 92)
  {
    int v12 = *v9;
    if ((v12 - 36) <= 0x3A && ((1LL << (v12 - 36)) & 0x580000000000441LL) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v12);
      int v10 = v3 + 2;
      goto LABEL_18;
    }
  }

  if (*a2 == 46)
  {
    __int16 v13 = (std::__node<char> *)operator new(0x10uLL);
    unsigned int v14 = a1->__end_;
    first = v14->__first_;
    v13->__vftable = (std::__node<char>_vtbl *)&off_189E959C8;
    v13[1].__vftable = (std::__node<char>_vtbl *)first;
    v14->__first_ = v13;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
LABEL_17:
    int v10 = v3 + 1;
    goto LABEL_18;
  }

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>( std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::basic_regex<char>::value_type v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  do
  {
    std::basic_regex<char>::value_type v7 = v6;
    std::basic_regex<char>::value_type v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>( a1,  (char *)v6,  a3);
  }

  while (v7 != v6);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>( std::basic_regex<char> *this, char *a2, char *a3)
{
  std::vector<char>::pointer end = this->__end_;
  unsigned int marked_count = this->__marked_count_;
  if (a2 == a3)
  {
LABEL_24:
    unsigned int v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>( (uint64_t)this,  a2,  a3);
    goto LABEL_25;
  }

  int v8 = *a2;
  int v9 = *a2;
  uint64_t v10 = (v8 - 36);
  if (((1LL << (v8 - 36)) & 0x5800000080004D1LL) == 0)
  {
    if (v10 == 5)
    {
      if (this->__open_count_) {
        goto LABEL_4;
      }
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
LABEL_33:
      std::string::size_type v11 = (unsigned __int8 *)(a2 + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>( (uint64_t)this,  v11,  (unsigned __int8 *)a3,  end,  marked_count + 1,  this->__marked_count_ + 1);
    }

BOOL ctu::install_termination_handler()
{
  unint64_t v0 = atomic_load(&_MergedGlobals_3);
  if (!v0)
  {
    while (!__ldaxr(&_MergedGlobals_3))
    {
    }

    __clrex();
  }

  return v0 == 0;
}

void anonymous namespace'::log_termination_info_then_continue_crashing( _anonymous_namespace_ *this)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  atomic_load(&_MergedGlobals_3);
  memset(v4, 170, 24);
  ctu::backtrace_string(0LL, v4);
  v3.__ptr_ = (void *)0xAAAAAAAAAAAAAAAALL;
  std::current_exception();
  std::exception_ptr::exception_ptr(&v2, &v3);
  v1.__ptr_ = &v2;
  std::rethrow_exception(v1);
  __break(1u);
}

void sub_1865F586C( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::exception_ptr a10, std::exception_ptr a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, __int128 buf, int a23, __int16 a24, __int16 a25, void *a26)
{
  if (a2)
  {
    std::exception_ptr::~exception_ptr(&a10);
    if (a2 == 4)
    {
      size_t v28 = (_anonymous_namespace_ *)__cxa_begin_catch(a1);
      if (os_log_type_enabled((os_log_t)qword_18C4A4620, OS_LOG_TYPE_ERROR)) {
        boost::current_exception_diagnostic_information();
      }
    }

    else if (a2 == 3)
    {
      size_t v29 = (_anonymous_namespace_ *)__cxa_begin_catch(a1);
      if (os_log_type_enabled((os_log_t)qword_18C4A4620, OS_LOG_TYPE_ERROR)) {
        boost::current_exception_diagnostic_information();
      }
    }

    else
    {
      BOOL v30 = (_anonymous_namespace_ *)__cxa_begin_catch(a1);
      uint64_t v31 = (os_log_s *)qword_18C4A4620;
      BOOL v32 = os_log_type_enabled((os_log_t)qword_18C4A4620, OS_LOG_TYPE_ERROR);
      if (a2 == 2)
      {
        if (v32)
        {
          uint64_t v33 = -[_anonymous_namespace_ userInfo](v30, "userInfo");
          p_p = &__p;
          if (a17 < 0) {
            p_p = __p;
          }
          LODWORD(buf) = 138543874;
          *(void *)((char *)&buf + 4) = v33;
          WORD6(buf) = 2114;
          *(void *)((char *)&buf + 14) = v30;
          a25 = 2082;
          a26 = p_p;
          _os_log_error_impl( &dword_1865C1000,  v31,  OS_LOG_TYPE_ERROR,  "Uncaught ObjC exception! Diagnostics follow, then crashing!\n ========== Diagnostic info:\n userInfo = %{public}@\n %{public}@\n ========== Backtrace:\n %{public}s\n",  (uint8_t *)&buf,  0x20u);
        }
      }

      else if (v32)
      {
        uint64_t v35 = &__p;
        if (a17 < 0) {
          uint64_t v35 = __p;
        }
        LODWORD(buf) = 136446210;
        *(void *)((char *)&buf + 4) = v35;
        _os_log_error_impl( &dword_1865C1000,  v31,  OS_LOG_TYPE_ERROR,  "Uncaught exception of unknown type (it's not C++ or ObjC)! Crashing! ========== Backtrace:\n %{public}s\n ==========",  (uint8_t *)&buf,  0xCu);
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x1865F57E0LL);
  }

  _Unwind_Resume(a1);
}

void anonymous namespace'::sGetLogger(_anonymous_namespace_ *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_18C4A4628);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_18C4A4628))
    {
      qword_18C4A4620 = (uint64_t)os_log_create("com.apple.telephony.util", "terminate");
      __cxa_guard_release(&qword_18C4A4628);
    }
  }

void boost::current_exception_diagnostic_information()
{
}

void sub_1865F5BB4( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, __int128 a21, __int128 a22, __int128 a23, __int128 a24, void *a25, uint64_t a26, __int128 a27, __int128 a28, __int128 a29, __int128 a30, __int128 a31, __int128 a32, __int128 a33, __int128 a34, __int128 a35, __int128 a36, __int128 a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51)
{
}

void sub_1865F60B8( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

void sub_1865F60F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(a12);
  }
  JUMPOUT(0x1865F6148LL);
}

void sub_1865F610C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1865F611C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  JUMPOUT(0x1865F6148LL);
}

uint64_t (*anonymous namespace'::continue_crashing_with_system_termination_handler( uint64_t (*this)(void), void (*a2)(void)))(void)
{
  if (this) {
    return (uint64_t (*)(void))this();
  }
  return this;
}

uint64_t boost::exception_detail::error_info_container_impl::diagnostic_information( boost::exception_detail::error_info_container_impl *this, const char *a2)
{
  if (a2)
  {
    unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v20[7] = v4;
    v20[8] = v4;
    v20[5] = v4;
    v20[6] = v4;
    void v20[3] = v4;
    _OWORD v20[4] = v4;
    v20[1] = v4;
    v20[2] = v4;
    __int128 v19 = v4;
    v20[0] = v4;
    *(_OWORD *)int v17 = v4;
    __int128 v18 = v4;
    _OWORD v16[2] = v4;
    void v16[3] = v4;
    v16[0] = v4;
    v16[1] = v4;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
    size_t v5 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)a2, v5);
    std::basic_regex<char>::value_type v6 = (boost::exception_detail::error_info_container_impl *)*((void *)this + 1);
    if (v6 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16))
    {
      do
      {
        (***((void (****)(_BYTE *__return_ptr))v6 + 5))(__p);
        if (__p[23] >= 0) {
          std::basic_regex<char>::value_type v7 = __p;
        }
        else {
          std::basic_regex<char>::value_type v7 = *(_BYTE **)__p;
        }
        if (__p[23] >= 0) {
          uint64_t v8 = __p[23];
        }
        else {
          uint64_t v8 = *(void *)&__p[8];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v7, v8);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        int v9 = (boost::exception_detail::error_info_container_impl *)*((void *)v6 + 1);
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            int v9 = *(boost::exception_detail::error_info_container_impl **)v9;
          }

          while (v9);
        }

        else
        {
          do
          {
            uint64_t v10 = (boost::exception_detail::error_info_container_impl *)*((void *)v6 + 2);
            BOOL v11 = *(void *)v10 == (void)v6;
            std::basic_regex<char>::value_type v6 = v10;
          }

          while (!v11);
        }

        std::basic_regex<char>::value_type v6 = v10;
      }

      while (v10 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16));
    }

    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16 + 8, __p);
    uint64_t v12 = *(void *)__p;
    __int128 v13 = *(_OWORD *)&__p[8];
    *(void *)&__p[16] = *((void *)this + 6);
    *(_OWORD *)std::string __p = *((_OWORD *)this + 2);
    *((void *)this + 4) = v12;
    *(_OWORD *)((char *)this + 40) = v13;
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    *(void *)&v16[0] = *MEMORY[0x189614738];
    *(void *)((char *)v16 + *(void *)(*(void *)&v16[0] - 24LL)) = *(void *)(MEMORY[0x189614738] + 24LL);
    *((void *)&v16[0] + 1) = MEMORY[0x189614750] + 16LL;
    if (SHIBYTE(v18) < 0) {
      operator delete(v17[1]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x186E3C284](v20);
  }

  uint64_t result = (uint64_t)this + 32;
  return result;
}

void sub_1865F6330( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

void *boost::exception_detail::error_info_container_impl::get@<X0>( void *result@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  __int128 v4 = result + 2;
  size_t v5 = (void *)result[2];
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = *a2;
  std::basic_regex<char>::value_type v7 = result + 2;
  do
  {
    uint64_t v8 = v5[4];
    if (v8 == v6)
    {
      std::basic_regex<char>::value_type v7 = v5;
    }

    else
    {
      uint64_t result = (void *)strcmp( (const char *)(*(void *)(v8 + 8) & 0x7FFFFFFFFFFFFFFFLL),  (const char *)(*(void *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL));
      else {
        std::basic_regex<char>::value_type v7 = v5;
      }
    }

    size_t v5 = (void *)*v5;
  }

  while (v5);
  if (v4 != v7
    && ((uint64_t v9 = v7[4], v9 == v6)
     || (uint64_t result = (void *)strcmp( (const char *)(*(void *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL),  (const char *)(*(void *)(v9 + 8) & 0x7FFFFFFFFFFFFFFFLL)),  (result & 0x80000000) == 0)))
  {
    uint64_t v10 = v7[6];
    *a3 = v7[5];
    return boost::detail::shared_count::shared_count(a3 + 1, v10);
  }

  else
  {
LABEL_12:
    *a3 = 0LL;
    a3[1] = 0LL;
  }

  return result;
}

void boost::exception_detail::error_info_container_impl::set(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = (uint64_t **)(a1 + 8);
  uint64_t v7 = *a3;
  uint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (uint64_t **)std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__find_equal<boost::exception_detail::type_info_>( a1 + 8,  &v17,  v7);
  uint64_t v9 = *v8;
  if (!*v8)
  {
    uint64_t v10 = v8;
    unint64_t v16 = 0xAAAAAAAAAAAAAA01LL;
    uint64_t v9 = (uint64_t *)operator new(0x38uLL);
    *((void *)&v15 + 1) = a1 + 16;
    uint64_t v11 = *a3;
    v9[5] = 0LL;
    void v9[6] = 0LL;
    v9[4] = v11;
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at( v6,  v17,  v10,  v9);
    *(void *)&__int128 v15 = 0LL;
    std::unique_ptr<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>>>>::reset[abi:ne180100]((uint64_t *)&v15);
  }

  uint64_t v12 = a2[1];
  *(void *)&__int128 v15 = *a2;
  __int128 v13 = (boost::detail::shared_count *)boost::detail::shared_count::shared_count((void *)&v15 + 1, v12);
  __int128 v14 = *(_OWORD *)(v9 + 5);
  *(_OWORD *)(v9 + 5) = v15;
  __int128 v15 = v14;
  boost::detail::shared_count::~shared_count(v13);
  if (*(char *)(a1 + 55) < 0)
  {
    **(_BYTE **)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0LL;
  }

  else
  {
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 55) = 0;
  }

uint64_t boost::exception_detail::error_info_container_impl::add_ref(uint64_t this)
{
  return this;
}

BOOL boost::exception_detail::error_info_container_impl::release( boost::exception_detail::error_info_container_impl *this)
{
  int v1 = *((_DWORD *)this + 14) - 1;
  *((_DWORD *)this + 14) = v1;
  if (this && !v1)
  {
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy(*((void **)this + 2));
    operator delete(this);
  }

  return v1 == 0;
}

void boost::exception_detail::error_info_container_impl::clone( boost::exception_detail::error_info_container_impl *this@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  __int128 v4 = (char *)operator new(0x40uLL);
  *(void *)__int128 v4 = &off_189E95A20;
  *((void *)v4 + 2) = 0LL;
  uint64_t v16 = (uint64_t)(v4 + 16);
  *((void *)v4 + 1) = v4 + 16;
  size_t v5 = (uint64_t **)(v4 + 8);
  *((void *)v4 + 3) = 0LL;
  *((void *)v4 + 4) = 0LL;
  *((void *)v4 + 5) = 0LL;
  *((void *)v4 + 6) = 0LL;
  *a2 = v4;
  *((_DWORD *)v4 + 14) = 1;
  uint64_t v6 = (boost::exception_detail::error_info_container_impl *)*((void *)this + 1);
  if (v6 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16))
  {
    do
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v7 = (*(uint64_t (**)(void))(**((void **)v6 + 5) + 8LL))(*((void *)v6 + 5));
      unint64_t v19 = v7;
      uint64_t v20 = 0LL;
      uint64_t v8 = (char *)operator new(0x58uLL);
      *(void *)uint64_t v8 = off_189E95AF8;
      *((void *)v8 + 1) = 0x100000001LL;
      pthread_mutex_init((pthread_mutex_t *)(v8 + 16), 0LL);
      *(void *)uint64_t v8 = off_189E95A88;
      *((void *)v8 + 10) = v7;
      uint64_t v9 = v20;
      uint64_t v20 = (uint64_t)v8;
      v21[0] = v9;
      boost::detail::shared_count::~shared_count((boost::detail::shared_count *)v21);
      uint64_t v17 = *((void *)v6 + 4);
      *(void *)&__int128 v18 = v19;
      boost::detail::shared_count::shared_count((void *)&v18 + 1, v20);
      uint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v10 = (uint64_t **)std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__find_equal<boost::exception_detail::type_info_>( (uint64_t)v5,  &v22,  v17);
      if (!*v10)
      {
        uint64_t v11 = v10;
        _OWORD v21[2] = 0xAAAAAAAAAAAAAA01LL;
        uint64_t v12 = (char *)operator new(0x38uLL);
        v21[1] = v16;
        *((void *)v12 + 4) = v17;
        *(_OWORD *)(v12 + 40) = v18;
        __int128 v18 = 0uLL;
        std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at( v5,  v22,  v11,  (uint64_t *)v12);
        v21[0] = 0LL;
        std::unique_ptr<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>>>>::reset[abi:ne180100](v21);
      }

      boost::detail::shared_count::~shared_count((boost::detail::shared_count *)((char *)&v18 + 8));
      boost::detail::shared_count::~shared_count((boost::detail::shared_count *)&v20);
      __int128 v13 = (boost::exception_detail::error_info_container_impl *)*((void *)v6 + 1);
      if (v13)
      {
        do
        {
          __int128 v14 = v13;
          __int128 v13 = *(boost::exception_detail::error_info_container_impl **)v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          __int128 v14 = (boost::exception_detail::error_info_container_impl *)*((void *)v6 + 2);
          BOOL v15 = *(void *)v14 == (void)v6;
          uint64_t v6 = v14;
        }

        while (!v15);
      }

      uint64_t v6 = v14;
    }

    while (v14 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16));
  }

void sub_1865F6788( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
}

void *boost::detail::shared_count::shared_count(void *a1, uint64_t a2)
{
  *a1 = a2;
  if (a2)
  {
    __int128 v4 = (pthread_mutex_t *)(a2 + 16);
    pthread_mutex_lock((pthread_mutex_t *)(a2 + 16));
    ++*(_DWORD *)(a2 + 8);
    pthread_mutex_unlock(v4);
  }

  return a1;
}

void *std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__find_equal<boost::exception_detail::type_info_>( uint64_t a1, void *a2, uint64_t a3)
{
  __int128 v4 = (void *)(a1 + 8);
  size_t v5 = *(void **)(a1 + 8);
  if (v5)
  {
    uint64_t v7 = v5[4];
    if (v7 != a3)
    {
      uint64_t v8 = (const char *)(*(void *)(a3 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      do
      {
        uint64_t v9 = (const char *)(*(void *)(v7 + 8) & 0x7FFFFFFFFFFFFFFFLL);
        if (strcmp(v8, v9) < 0)
        {
          uint64_t v10 = (void *)*v5;
          __int128 v4 = v5;
          if (!*v5) {
            break;
          }
        }

        else
        {
          if ((strcmp(v9, v8) & 0x80000000) == 0) {
            break;
          }
          __int128 v4 = v5 + 1;
          uint64_t v10 = (void *)v5[1];
          if (!v10) {
            break;
          }
        }

        uint64_t v7 = v10[4];
        size_t v5 = v10;
      }

      while (v7 != a3);
    }
  }

  else
  {
    size_t v5 = (void *)(a1 + 8);
  }

  *a2 = v5;
  return v4;
}

uint64_t *std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at( uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = a2;
  *a3 = a4;
  size_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }

  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>( uint64_t *result, uint64_t *a2)
{
  *((_BYTE *)a2 + memset(&context, 0, 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      std::exception_ptr v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24)) {
        return result;
      }
      std::exception_ptr v3 = (uint64_t *)v2[2];
      __int128 v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), size_t v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }

          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              _OWORD v10[2] = (uint64_t)v2;
              std::exception_ptr v3 = (uint64_t *)v2[2];
            }

            void v9[2] = v3;
            *(void *)(v2[2] + 8LL * (*(void *)v2[2] != (void)v2)) = v9;
            *uint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            std::exception_ptr v3 = v9[2];
            std::exception_ptr v2 = (uint64_t *)*v3;
          }

          *((_BYTE *)v9 + memset(&context, 0, 24) = 1;
          *((_BYTE *)v3 + memset(&context, 0, 24) = 0;
          uint64_t v13 = v2[1];
          *std::exception_ptr v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8LL * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }

      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), size_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *std::exception_ptr v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            std::exception_ptr v3 = (uint64_t *)v2[2];
          }

          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8LL * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          std::exception_ptr v3 = (uint64_t *)a2[2];
        }

        else
        {
          a2 = (uint64_t *)a2[2];
        }

        *((_BYTE *)a2 + memset(&context, 0, 24) = 1;
        *((_BYTE *)v3 + memset(&context, 0, 24) = 0;
        std::exception_ptr v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8LL * (*(void *)v3[2] != (void)v3)) = v2;
        *std::exception_ptr v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }

      *((_BYTE *)v2 + memset(&context, 0, 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + memset(&context, 0, 24) = v3 == result;
      *size_t v5 = 1;
    }

    while (v3 != result);
  }

  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>>>>::reset[abi:ne180100]( uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0LL;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16)) {
      boost::detail::shared_count::~shared_count((boost::detail::shared_count *)(v1 + 48));
    }
    operator delete((void *)v1);
  }

void boost::detail::shared_count::~shared_count(boost::detail::shared_count *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    pthread_mutex_lock((pthread_mutex_t *)(v1 + 16));
    int v2 = *(_DWORD *)(v1 + 8) - 1;
    *(_DWORD *)(v1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v2;
    pthread_mutex_unlock((pthread_mutex_t *)(v1 + 16));
    if (!v2)
    {
      (*(void (**)(uint64_t))(*(void *)v1 + 16LL))(v1);
      pthread_mutex_lock((pthread_mutex_t *)(v1 + 16));
      int v3 = *(_DWORD *)(v1 + 12) - 1;
      *(_DWORD *)(v1 + 12) = v3;
      pthread_mutex_unlock((pthread_mutex_t *)(v1 + 16));
      if (!v3) {
        (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
      }
    }
  }

void std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy( void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy(*a1);
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy(a1[1]);
    boost::detail::shared_count::~shared_count((boost::detail::shared_count *)(a1 + 6));
    operator delete(a1);
  }

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::~sp_counted_impl_p( uint64_t a1)
{
  *(void *)a1 = off_189E95AF8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 16));
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::~sp_counted_impl_p( char *a1)
{
  *(void *)a1 = off_189E95AF8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 16));
  operator delete(a1);
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 80);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24LL))(result);
  }
  return result;
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this) {
    return (*(uint64_t (**)(uint64_t))(*(void *)this + 8LL))(this);
  }
  return this;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::get_deleter()
{
  return 0LL;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::get_local_deleter()
{
  return 0LL;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::get_untyped_deleter()
{
  return 0LL;
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr( uint64_t *a1)
{
  uint64_t v2 = *a1;
  return a1;
}

void ctu::RequestRestResourceState::dumpState(ctu::RequestRestResourceState *this@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v5) == MEMORY[0x1895F9250])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }

  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v7)
  {
    int v8 = 0LL;
    goto LABEL_18;
  }

  int v8 = std::__shared_weak_count::lock(v7);
  if (!v8 || (uint64_t v9 = *(void *)this) == 0)
  {
LABEL_18:
    __int128 v14 = a2;
    BOOL v15 = "provider";
    xpc::dict::object_proxy::operator=((uint64_t)&v14, &v13);
    xpc_release(v13);
    xpc_object_t v13 = 0LL;
    if (!v8) {
      return;
    }
    goto LABEL_19;
  }

  uint64_t v10 = (const char *)(v9 + 8);
  xpc_object_t v16 = xpc_string_create(v10);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  __int128 v14 = a2;
  BOOL v15 = "provider";
  xpc::dict::object_proxy::operator=((uint64_t)&v14, &v16, &object);
  xpc_release(object);
  xpc_object_t object = 0LL;
  xpc_release(v16);
  xpc_object_t v16 = 0LL;
LABEL_19:
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    unint64_t v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }

void xpc::dict::object_proxy::operator=(uint64_t a1@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t object = xpc_null_create();
  xpc::dict::object_proxy::operator=(a1, &object, a2);
  xpc_release(object);
}

void *ctu::RequestRestResource::RequestRestResource(void *this)
{
  *this = off_189E95B40;
  this[1] = 0LL;
  this[2] = 0LL;
  this[3] = 0LL;
  return this;
}

{
  *this = off_189E95B40;
  this[1] = 0LL;
  this[2] = 0LL;
  this[3] = 0LL;
  return this;
}

void ctu::RequestRestResource::~RequestRestResource(ctu::RequestRestResource *this)
{
  *(void *)this = off_189E95B40;
  boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>,void>::~vector((void *)this + 1);
}

{
  *(void *)this = off_189E95B40;
  boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>,void>::~vector((void *)this + 1);
}

{
  *(void *)this = off_189E95B40;
  boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>,void>::~vector((void *)this + 1);
  operator delete(this);
}

uint64_t ctu::RequestRestResource::handleRestMessage_GET( ctu::RequestRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  __int128 v6 = *((_OWORD *)a3 + 1);
  v10[0] = *(_OWORD *)a3;
  v10[1] = v6;
  switch(LODWORD(v11[0]))
  {
    case 1:
      ctu::RequestRestResource::handleMessage_Root_GET(this, a2);
      return 1LL;
    case 2:
      ctu::RequestRestResource::handleMessage_RootDumpState_GET(this, a2);
      return 1LL;
    case 3:
      return ctu::RequestRestResource::handleMessage_Resource_GET( (uint64_t)this,  (uint64_t)a2,  (uint64_t)a3,  v11[1],  (size_t)v11[2]);
    case 4:
      ctu::RequestRestResource::handleMessage_Resource_Provider_GET( (uint64_t)this,  (uint64_t)a2,  v7,  v11[1],  (size_t)v11[2]);
      return 1LL;
    default:
      xpc_object_t object = xpc_null_create();
      (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32LL))(a2, &object);
      xpc_release(object);
      return 1LL;
  }

void sub_1865F70A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

int *anonymous namespace'::sParsePath(int *result, void *a2)
{
  uint64_t v2 = result;
  *((void *)result + 1) = 0LL;
  *((void *)result + 2) = 0LL;
  *(void *)uint64_t result = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = a2[3];
  if (!v3)
  {
    int v9 = 1;
    goto LABEL_16;
  }

  uint64_t *result = 3;
  uint64_t v6 = a2[1];
  xpc_object_t v5 = (_BYTE *)a2[2];
  *((void *)result + 1) = v5;
  *((void *)result + 2) = v3;
  uint64_t v7 = (_BYTE *)(*a2 + v6);
  if (v7 != &v5[v3] && &v5[v3 + 1] != v7)
  {
    uint64_t result = (int *)ctu::PathView::advance((uint64_t)a2, 1LL);
    if (a2[3] != 8LL
      || (uint64_t v10 = (void *)a2[2], *v10 != 0x72656469766F7270LL)
      || (v11 = (void *)(*a2 + a2[1]), int v9 = 4, v11 != v10 + 1) && (void *)((char *)v10 + 9) != v11)
    {
      int v9 = 0;
    }

    goto LABEL_16;
  }

  if (v3 == 1 && *v5 == 42)
  {
    int v9 = 2;
LABEL_16:
    *uint64_t v2 = v9;
  }

  return result;
}

{
  int *v2;
  uint64_t v3;
  _BYTE *v5;
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  int *v10;
  uint64_t v11;
  int v14;
  int v15;
  uint64_t v2 = result;
  *((void *)result + 1) = 0LL;
  *((void *)result + 2) = 0LL;
  *(void *)uint64_t result = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = a2[3];
  if (!v3)
  {
    uint64_t v6 = 1;
    goto LABEL_28;
  }

  uint64_t *result = 3;
  xpc_object_t v5 = (_BYTE *)a2[2];
  *((void *)result + 1) = v5;
  *((void *)result + 2) = v3;
  if (v3 == 1 && *v5 == 42)
  {
    uint64_t v6 = 2;
LABEL_28:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = &v5[v3];
  int v8 = (_BYTE *)(*a2 + a2[1]);
  if (v8 != v7 && v7 + 1 != v8)
  {
    uint64_t result = (int *)ctu::PathView::advance((uint64_t)a2, 1LL);
    uint64_t v10 = (int *)a2[2];
    uint64_t v11 = a2[3];
    if (v11 == 8)
    {
      if (*(void *)v10 == 0x72656469766F7270LL)
      {
        uint64_t v6 = 7;
        goto LABEL_28;
      }
    }

    else if (v11 == 7)
    {
      if (*v10 == 1851880039 && *(int *)((char *)v10 + 3) == 1684370542)
      {
        uint64_t v6 = 4;
        goto LABEL_28;
      }

      if (*v10 == 1953063287 && *(int *)((char *)v10 + 3) == 1735289204)
      {
        uint64_t v6 = 6;
        goto LABEL_28;
      }

      __int128 v14 = *v10;
      BOOL v15 = *(int *)((char *)v10 + 3);
      if (v14 == 1870030194 && v15 == 1684368239)
      {
        uint64_t v6 = 5;
        goto LABEL_28;
      }
    }

    uint64_t v6 = 0;
    goto LABEL_28;
  }

  return result;
}

uint64_t ctu::RequestRestResource::handleMessage_Root_GET( ctu::RequestRestResource *this, ctu::RestResourceContext *a2)
{
  xpc_object_t v5 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32LL))(a2, &v5);
  xpc_release(v5);
  xpc_object_t v5 = 0LL;
  xpc_release(object);
  return 1LL;
}

void sub_1865F7228( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
}

uint64_t ctu::RequestRestResource::handleMessage_RootDumpState_GET( ctu::RequestRestResource *this, ctu::RestResourceContext *a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t v15 = v4;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v15 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v5) == MEMORY[0x1895F9250])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }

  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t v15 = v6;
LABEL_9:
  xpc_release(v5);
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    int v8 = (void **)*((void *)this + 1);
    uint64_t v9 = 32 * v7;
    do
    {
      ctu::RequestRestResourceState::dumpState((ctu::RequestRestResourceState *)v8[3], &v13);
      uint64_t v10 = v8;
      v12[0] = &v15;
      v12[1] = v10;
      xpc::dict::object_proxy::operator=((uint64_t)v12, &v13, &object);
      xpc_release(object);
      xpc_object_t object = 0LL;
      xpc_release(v13);
      xpc_object_t v13 = 0LL;
      v8 += 4;
      v9 -= 32LL;
    }

    while (v9);
  }

  v12[0] = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    v12[0] = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32LL))(a2, v12);
  xpc_release(v12[0]);
  xpc_release(v15);
  return 1LL;
}

void sub_1865F73AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t a14)
{
}

uint64_t ctu::RequestRestResource::handleMessage_Resource_GET( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, size_t a5)
{
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)a2 + 40LL))(&v28, a2);
  if (v28)
  {
    if (a4)
    {
      std::string::basic_string[abi:ne180100](&__p, a4, a5);
    }

    else
    {
      std::string __p = 0LL;
      uint64_t v31 = 0LL;
      uint64_t v32 = 0LL;
    }

    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find( (uint64_t)v27,  (void ***)(a1 + 8),  &__p);
    uint64_t v11 = v27[0];
    if (SHIBYTE(v32) < 0) {
      operator delete(__p);
    }
    if (v11 != *(void *)(a1 + 8) + 32LL * *(void *)(a1 + 16)
      && (unint64_t v12 = *(uint64_t **)(v11 + 24), (v13 = (std::__shared_weak_count *)v12[1]) != 0LL)
      && (__int128 v14 = std::__shared_weak_count::lock(v13), (v27[1] = v14) != 0LL))
    {
      xpc_object_t v15 = v14;
      uint64_t v16 = *v12;
      v27[0] = v16;
      if (v16)
      {
        (*(void (**)(xpc_object_t *__return_ptr, uint64_t))(*(void *)a2 + 8LL))(&v26, a2);
        if (*(void *)a3)
        {
          std::string::basic_string[abi:ne180100](&__p, *(void **)a3, *(void *)(a3 + 8));
          if (v32 >= 0) {
            p_p = (const char *)&__p;
          }
          else {
            p_p = (const char *)__p;
          }
        }

        else
        {
          std::string __p = 0LL;
          uint64_t v31 = 0LL;
          p_p = (const char *)&__p;
          uint64_t v32 = 0LL;
        }

        xpc_object_t v25 = xpc_string_create(p_p);
        if (!v25) {
          xpc_object_t v25 = xpc_null_create();
        }
        (*(void (**)(xpc_object_t *__return_ptr, uint64_t))(*(void *)a2 + 24LL))(&object, a2);
        uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, xpc_object_t *, xpc_object_t *, xpc_object_t *, unint64_t *))(*(void *)a2 + 56LL))( a2,  v16,  &v26,  &v25,  &object,  &v28);
        xpc_release(object);
        xpc_release(v25);
        xpc_object_t v25 = 0LL;
        if (SHIBYTE(v32) < 0) {
          operator delete(__p);
        }
        xpc_release(v26);
      }

      else
      {
        uint64_t v10 = 1LL;
      }

      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        unint64_t v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }

    else
    {
      uint64_t v10 = 1LL;
    }
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  __int128 v18 = (std::__shared_weak_count *)v29;
  if (v29)
  {
    unint64_t v19 = (unint64_t *)(v29 + 8);
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  return v10;
}

void sub_1865F7630( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t a10, xpc_object_t object, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

uint64_t ctu::RequestRestResource::handleMessage_Resource_Provider_GET( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, size_t a5)
{
  xpc_object_t v9 = xpc_array_create(0LL, 0LL);
  if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0LL)
  {
    if (MEMORY[0x186E3CD4C](v9) == MEMORY[0x1895F9220])
    {
      xpc_retain(v9);
      xpc_object_t v10 = v9;
    }

    else
    {
      xpc_object_t v10 = xpc_null_create();
    }
  }

  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v9 = 0LL;
  }

  xpc_release(v9);
  if (a4)
  {
    std::string::basic_string[abi:ne180100](&__p, a4, a5);
  }

  else
  {
    std::string __p = 0LL;
    unint64_t v23 = 0LL;
    uint64_t v24 = 0LL;
  }

  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find( (uint64_t)&v25,  (void ***)(a1 + 8),  &__p);
  uint64_t v11 = v25;
  if (SHIBYTE(v24) < 0) {
    operator delete(__p);
  }
  if (v11 != *(void *)(a1 + 8) + 32LL * *(void *)(a1 + 16))
  {
    uint64_t v12 = *(void *)(v11 + 24);
    xpc_object_t v13 = *(std::__shared_weak_count **)(v12 + 8);
    if (v13)
    {
      __int128 v14 = std::__shared_weak_count::lock(v13);
      unint64_t v23 = v14;
      if (v14)
      {
        xpc_object_t v15 = *(char **)v12;
        std::string __p = v15;
        if (v15)
        {
          uint64_t v16 = v15 + 8;
          if (v15[31] < 0) {
            uint64_t v16 = *(const char **)v16;
          }
          xpc_object_t v17 = xpc_string_create(v16);
          if (!v17) {
            xpc_object_t v17 = xpc_null_create();
          }
          xpc_array_append_value(v10, v17);
          xpc_release(v17);
          __int128 v18 = v23;
          if (!v23) {
            goto LABEL_27;
          }
        }

        else
        {
          __int128 v18 = v14;
        }

        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          unint64_t v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
  }

LABEL_27:
  std::string __p = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    std::string __p = xpc_null_create();
  }
  (*(void (**)(uint64_t, void **))(*(void *)a2 + 32LL))(a2, &__p);
  xpc_release(__p);
  xpc_release(v10);
  return 1LL;
}

  std::string __p = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    std::string __p = xpc_null_create();
  }
  (*(void (**)(uint64_t, void **))(*(void *)a2 + 32LL))(a2, &__p);
  xpc_release(__p);
  xpc_release(v10);
  return 1LL;
}

void sub_1865F789C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
}

uint64_t ctu::RequestRestResource::handleRestMessage_SET()
{
  return 1LL;
}

BOOL ctu::RequestRestResource::handleRestMessage_POP( ctu::RequestRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  __int128 v5 = *((_OWORD *)a3 + 1);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v5;
  int v7 = (int)v10[0];
  if (LODWORD(v10[0]) == 3) {
    ctu::RequestRestResource::handleMessage_Resource_POP( (uint64_t)this,  (void (***)(void **__return_ptr, void))a2,  v6,  v10[1],  (size_t)v10[2]);
  }
  return v7 == 3;
}

uint64_t ctu::RequestRestResource::handleMessage_Resource_POP( uint64_t a1, void (***a2)(void **__return_ptr, void), uint64_t a3, void *a4, size_t a5)
{
  int v7 = (void ***)(a1 + 8);
  if (a4)
  {
    std::string::basic_string[abi:ne180100](&__p, a4, a5);
  }

  else
  {
    std::string __p = 0LL;
    __int128 v18 = 0LL;
    uint64_t v19 = 0LL;
  }

  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find( (uint64_t)&v20,  v7,  &__p);
  uint64_t v8 = v20;
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (v8 != *(void *)(a1 + 8) + 32LL * *(void *)(a1 + 16))
  {
    uint64_t v9 = *(void *)(v8 + 24);
    (**a2)(&__p, a2);
    xpc_object_t v10 = *(std::__shared_weak_count **)(v9 + 8);
    uint64_t v11 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }

    if (v11 == v10)
    {
      __int128 v14 = *(void **)(v8 + 24);
      xpc_object_t v15 = (std::__shared_weak_count *)v14[1];
      void *v14 = 0LL;
      v14[1] = 0LL;
      if (v15) {
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }

  return 1LL;
}

BOOL ctu::RequestRestResource::handleRestMessage_PUSH( ctu::RequestRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  __int128 v5 = *((_OWORD *)a3 + 1);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v5;
  int v7 = (int)v10[0];
  if (LODWORD(v10[0]) == 3) {
    ctu::RequestRestResource::handleMessage_Resource_PUSH( this,  (void (***)(void **__return_ptr, void))a2,  v6,  v10[1],  (size_t)v10[2]);
  }
  return v7 == 3;
}

uint64_t ctu::RequestRestResource::handleMessage_Resource_PUSH( void *a1, void (***a2)(void **__return_ptr, void), uint64_t a3, void *a4, size_t a5)
{
  uint64_t v9 = (void ***)(a1 + 1);
  if (a4)
  {
    std::string::basic_string[abi:ne180100](&__p, a4, a5);
  }

  else
  {
    std::string __p = 0LL;
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
  }

  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find( (uint64_t)&v20,  v9,  &__p);
  if (SHIBYTE(v23) < 0)
  {
    operator delete(__p);
    if (a4) {
      goto LABEL_6;
    }
  }

  else if (a4)
  {
LABEL_6:
    std::string::basic_string[abi:ne180100](&__p, a4, a5);
    goto LABEL_9;
  }

  std::string __p = 0LL;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
LABEL_9:
  ctu::RequestRestResource::createIfNotPresent(a1, (uint64_t)&__p, &v20);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
  (**a2)(&__p, a2);
  xpc_object_t v10 = __p;
  if (__p)
  {
    uint64_t v11 = *(void **)(v20 + 24);
    uint64_t v12 = v22;
    if (v22)
    {
      p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
    }

    xpc_object_t v15 = (std::__shared_weak_count *)v11[1];
    *uint64_t v11 = v10;
    v11[1] = v12;
    if (v15) {
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  uint64_t v16 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  return 1LL;
}

void sub_1865F7C60( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::RequestRestResource::handleRestMessage_NOTIFY()
{
  return 0LL;
}

void ctu::RequestRestResource::getResourceArray(ctu::RequestRestResource *this@<X0>, xpc_object_t *a2@<X8>)
{
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_array_create(0LL, 0LL);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v5) == MEMORY[0x1895F9220])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }

  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    uint64_t v8 = (__int128 *)*((void *)this + 1);
    uint64_t v9 = 32 * v7;
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }

      else
      {
        __int128 v10 = *v8;
        __p.__r_.__value_.__l.__cap_ = *((void *)v8 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
      }

      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v12 = xpc_string_create((const char *)p_p);
      if (!v12) {
        xpc_object_t v12 = xpc_null_create();
      }
      xpc_array_append_value(*a2, v12);
      xpc_release(v12);
      v8 += 2;
      v9 -= 32LL;
    }

    while (v9);
  }

void sub_1865F7DD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

BOOL ctu::RequestRestResource::createIfNotPresent(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1[1];
  unint64_t v5 = a1[2];
  xpc_object_t v4 = a1 + 1;
  uint64_t v6 = v3 + 32 * v5;
  uint64_t v7 = *a3;
  if (*a3 == v6)
  {
    uint64_t v11 = operator new(0x10uLL);
    *uint64_t v11 = 0LL;
    v11[1] = 0LL;
    v22[0] = v11;
    *(void *)&__int128 v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)uint64_t v24 = v12;
    *(_OWORD *)&v24[16] = v12;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external( (std::string *)v24,  *(const std::string::value_type **)a2,  *(void *)(a2 + 8));
      uint64_t v3 = a1[1];
      unint64_t v5 = a1[2];
    }

    else
    {
      *(_OWORD *)uint64_t v24 = *(_OWORD *)a2;
      *(void *)&v24[16] = *(void *)(a2 + 16);
    }

    v22[0] = 0LL;
    *(void *)&v24[24] = v11;
    v22[1] = v24;
    void v22[2] = v4;
    uint64_t v13 = v3 + 32 * v5;
    while (v5)
    {
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( (void *)(v3 + 32 * (v5 >> 1)),  (void **)v24) & 0x80u) == 0LL)
      {
        v5 >>= 1;
      }

      else
      {
        v3 += 32 * (v5 >> 1) + 32;
        v5 += ~(v5 >> 1);
      }
    }

    if (v3 == v13
      || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v24, (void **)v3) & 0x80) != 0)
    {
      uint64_t v14 = a1[2];
      if (a1[3] == v14)
      {
        boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>*,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>>( &v23,  (char *)v4,  (__int128 *)v3,  (__int128 *)v24);
        uint64_t v3 = v23;
      }

      else
      {
        uint64_t v15 = *v4 + 32 * v14;
        if (v15 == v3)
        {
          __int128 v20 = *(_OWORD *)v24;
          *(void *)(v3 + 16) = *(void *)&v24[16];
          *(_OWORD *)uint64_t v3 = v20;
          memset(v24, 0, sizeof(v24));
          *(void *)(v15 + memset(&context, 0, 24) = *(void *)&v24[24];
          ++a1[2];
        }

        else
        {
          uint64_t v16 = v15 - 32;
          *(_OWORD *)uint64_t v15 = *(_OWORD *)(v15 - 32);
          *(void *)(v15 - 32) = 0LL;
          *(void *)(v15 - memset(&context, 0, 24) = 0LL;
          uint64_t v17 = *(void *)(v15 - 16);
          uint64_t v18 = *(void *)(v15 - 8);
          *(void *)(v15 - 16) = 0LL;
          *(void *)(v15 - std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
          *(void *)(v15 + 16) = v17;
          *(void *)(v15 + memset(&context, 0, 24) = v18;
          ++a1[2];
          if (v15 - 32 != v3)
          {
            do
            {
              uint64_t v19 = v16 - 32;
              boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>::operator=( v16,  (__int128 *)(v16 - 32));
              uint64_t v16 = v19;
            }

            while (v19 != v3);
          }

          boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>::operator=( v3,  (__int128 *)v24);
        }
      }
    }

    std::unique_ptr<ctu::RequestRestResourceState>::reset[abi:ne180100]((void **)&v24[24], 0LL);
    if ((v24[23] & 0x80000000) != 0) {
      operator delete(*(void **)v24);
    }
    *a3 = v3;
    std::unique_ptr<ctu::RequestRestResourceState>::reset[abi:ne180100](v22, 0LL);
  }

  return v7 == v6;
}

void sub_1865F809C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  xpc_object_t v4 = va_arg(va1, void *);
  boost::container::dtl::value_destructor<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>::~value_destructor((uint64_t *)va1);
  std::unique_ptr<ctu::RequestRestResourceState>::reset[abi:ne180100]((void **)va, 0LL);
  _Unwind_Resume(a1);
}

void *boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>,void>::~vector( void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = (void **)(*a1 + 24LL);
    do
    {
      std::unique_ptr<ctu::RequestRestResourceState>::reset[abi:ne180100](v3, 0LL);
      v3 += 4;
      --v2;
    }

    while (v2);
  }

  if (a1[2]) {
    operator delete((void *)*a1);
  }
  return a1;
}

void std::unique_ptr<ctu::RequestRestResourceState>::reset[abi:ne180100](void **a1, void *a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    operator delete(v2);
  }

uint64_t *boost::container::dtl::value_destructor<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>::~value_destructor( uint64_t *a1)
{
  uint64_t v2 = *a1;
  std::unique_ptr<ctu::RequestRestResourceState>::reset[abi:ne180100]((void **)(*a1 + 24), 0LL);
  return a1;
}

void boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>*,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>>( void *a1, char *a2, __int128 *a3, __int128 *a4)
{
  unint64_t v4 = *((void *)a2 + 2);
  unint64_t v5 = 0x3FFFFFFFFFFFFFFLL;
  unint64_t v6 = *((void *)a2 + 1) + 1LL;
  if (0x3FFFFFFFFFFFFFFLL - v4 < v6 - v4) {
    goto LABEL_27;
  }
  unint64_t v7 = v4 >> 61;
  unint64_t v8 = 8 * v4;
  if (v7 > 4) {
    uint64_t v9 = -1LL;
  }
  else {
    uint64_t v9 = v8;
  }
  unint64_t v10 = v8 / 5;
  if (v7) {
    unint64_t v10 = v9;
  }
  if (v10 < 0x3FFFFFFFFFFFFFFLL) {
    unint64_t v5 = v10;
  }
  unint64_t v11 = v6 <= v5 ? v5 : *((void *)a2 + 1) + 1LL;
  if (v11 >> 58) {
LABEL_27:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  uint64_t v16 = *(char **)a2;
  uint64_t v17 = (char *)operator new(32 * v11);
  uint64_t v18 = v17;
  uint64_t v19 = *(char **)a2;
  uint64_t v20 = *(void *)a2 + 32LL * *((void *)a2 + 1);
  unint64_t v21 = v17;
  if (*(__int128 **)a2 != a3)
  {
    uint64_t v22 = *(char **)a2;
    unint64_t v21 = v17;
    do
    {
      __int128 v23 = *(_OWORD *)v22;
      *((void *)v21 + 2) = *((void *)v22 + 2);
      *(_OWORD *)unint64_t v21 = v23;
      *(void *)uint64_t v22 = 0LL;
      *((void *)v22 + 1) = 0LL;
      uint64_t v24 = *((void *)v22 + 3);
      *((void *)v22 + 2) = 0LL;
      *((void *)v22 + 3) = 0LL;
      *((void *)v21 + 3) = v24;
      v21 += 32;
      v22 += 32;
    }

    while (v22 != (char *)a3);
  }

  __int128 v25 = *a4;
  *((void *)v21 + 2) = *((void *)a4 + 2);
  *(_OWORD *)unint64_t v21 = v25;
  *(void *)a4 = 0LL;
  *((void *)a4 + 1) = 0LL;
  uint64_t v26 = *((void *)a4 + 3);
  *((void *)a4 + 2) = 0LL;
  *((void *)a4 + 3) = 0LL;
  *((void *)v21 + 3) = v26;
  if ((__int128 *)v20 != a3)
  {
    int v27 = v21 + 56;
    unint64_t v28 = a3;
    do
    {
      __int128 v29 = *v28;
      *(v27 - 1) = *((void *)v28 + 2);
      *(_OWORD *)(v27 - 3) = v29;
      *(void *)unint64_t v28 = 0LL;
      *((void *)v28 + 1) = 0LL;
      uint64_t v30 = *((void *)v28 + 3);
      *((void *)v28 + 2) = 0LL;
      *((void *)v28 + 3) = 0LL;
      void *v27 = v30;
      v27 += 4;
      v28 += 2;
    }

    while (v28 != (__int128 *)v20);
  }

  if (v19)
  {
    uint64_t v31 = *((void *)a2 + 1);
    if (v31)
    {
      uint64_t v32 = (void **)(v19 + 24);
      do
      {
        std::unique_ptr<ctu::RequestRestResourceState>::reset[abi:ne180100](v32, 0LL);
        v32 += 4;
        --v31;
      }

      while (v31);
    }

    operator delete(*(void **)a2);
  }

  uint64_t v33 = *((void *)a2 + 1) + 1LL;
  *(void *)a2 = v18;
  *((void *)a2 + 1) = v33;
  *((void *)a2 + 2) = v11;
  *a1 = &v18[(char *)a3 - v16];
}

uint64_t boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>::operator=( uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  unint64_t v5 = (void *)*((void *)a2 + 3);
  *((void *)a2 + 3) = 0LL;
  std::unique_ptr<ctu::RequestRestResourceState>::reset[abi:ne180100]((void **)(a1 + 24), v5);
  return a1;
}

double mav_buffer_queue_create()
{
  unint64_t v0 = operator new(0x38uLL);
  double result = 0.0;
  *unint64_t v0 = 0u;
  v0[1] = 0u;
  v0[2] = 0u;
  *((_DWORD *)v0 + 12) = 0;
  return result;
}

void mav_buffer_queue_free(void **__p)
{
  if (!__p) {
    return;
  }
  uint64_t v2 = (void **)__p[1];
  uint64_t v3 = (void **)__p[2];
  __p[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)__p[2];
      uint64_t v2 = (void **)((char *)__p[1] + 8);
      __p[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_10;
    }
    uint64_t v6 = 512LL;
  }

  __p[4] = (void *)v6;
LABEL_10:
  if (v2 != v3)
  {
    do
    {
      unint64_t v7 = *v2++;
      operator delete(v7);
    }

    while (v2 != v3);
    uint64_t v9 = __p[1];
    unint64_t v8 = __p[2];
    if (v8 != v9) {
      __p[2] = &v8[(v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8LL];
    }
  }

  if (*__p) {
    operator delete(*__p);
  }
  operator delete(__p);
}

uint64_t mav_buffer_queue_enqueue_internal(uint64_t a1, dispatch_data_t *a2)
{
  dispatch_data_t v4 = *a2;
  int size = dispatch_data_get_size(*a2);
  uint64_t v6 = *(char **)(a1 + 16);
  unint64_t v7 = *(char **)(a1 + 8);
  uint64_t v8 = v6 - v7;
  *(_DWORD *)(a1 + 48) += size;
  if (v6 == v7) {
    uint64_t v9 = 0LL;
  }
  else {
    uint64_t v9 = ((v6 - v7) << 6) - 1;
  }
  unint64_t v11 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  unint64_t v12 = v10 + v11;
  if (v9 == v10 + v11)
  {
    if (v11 < 0x200)
    {
      uint64_t v26 = v8 >> 3;
      int v27 = *(char **)(a1 + 24);
      unint64_t v28 = *(char **)a1;
      uint64_t v29 = (uint64_t)&v27[-*(void *)a1];
      if (v8 >> 3 >= (unint64_t)(v29 >> 3))
      {
        uint64_t v32 = v29 >> 2;
        if (v27 == v28) {
          unint64_t v33 = 1LL;
        }
        else {
          unint64_t v33 = v32;
        }
        int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v33);
        uint64_t v36 = v35;
        unsigned int v37 = operator new(0x1000uLL);
        unsigned int v38 = &v34[8 * v26];
        uint64_t v39 = &v34[8 * v36];
        if (v26 == v36)
        {
          uint64_t v40 = 8 * v26;
          if (v8 < 1)
          {
            uint64_t v76 = v37;
            uint64_t v77 = v40 >> 2;
            if (v6 == v7) {
              unint64_t v78 = 1LL;
            }
            else {
              unint64_t v78 = v77;
            }
            uint64_t v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v78);
            unsigned int v38 = &v79[8 * (v78 >> 2)];
            uint64_t v39 = &v79[8 * v80];
            if (v34) {
              operator delete(v34);
            }
            int v34 = v79;
            unsigned int v37 = v76;
          }

          else
          {
            uint64_t v41 = v40 >> 3;
            if (v41 >= -1) {
              unint64_t v42 = v41 + 1;
            }
            else {
              unint64_t v42 = v41 + 2;
            }
            v38 -= 8 * (v42 >> 1);
          }
        }

        *(void *)unsigned int v38 = v37;
        uint64_t v81 = v38 + 8;
        for (uint64_t i = *(void *)(a1 + 16); i != *(void *)(a1 + 8); i -= 8LL)
        {
          if (v38 == v34)
          {
            if (v81 >= v39)
            {
              if (v39 == v34) {
                unint64_t v87 = 1LL;
              }
              else {
                unint64_t v87 = (v39 - v34) >> 2;
              }
              uint64_t v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v87);
              unint64_t v90 = v88;
              unsigned int v38 = &v88[(2 * v87 + 6) & 0xFFFFFFFFFFFFFFF8LL];
              uint64_t v92 = v81 - v34;
              BOOL v91 = v81 == v34;
              uint64_t v81 = v38;
              if (!v91)
              {
                uint64_t v81 = &v38[v92 & 0xFFFFFFFFFFFFFFF8LL];
                uint64_t v93 = 8 * (v92 >> 3);
                v94 = v38;
                unint64_t v95 = (uint64_t *)v34;
                do
                {
                  uint64_t v96 = *v95++;
                  *(void *)v94 = v96;
                  v94 += 8;
                  v93 -= 8LL;
                }

                while (v93);
              }

              uint64_t v39 = &v88[8 * v89];
              if (v34) {
                operator delete(v34);
              }
              int v34 = v90;
            }

            else
            {
              uint64_t v83 = (v39 - v81) >> 3;
              if (v83 >= -1) {
                uint64_t v84 = v83 + 1;
              }
              else {
                uint64_t v84 = v83 + 2;
              }
              uint64_t v85 = v84 >> 1;
              unsigned int v38 = &v34[8 * (v84 >> 1)];
              uint64_t v86 = v34;
              if (v81 != v34)
              {
                memmove(v38, v34, v81 - v34);
                uint64_t v86 = v81;
              }

              uint64_t v81 = &v86[8 * v85];
            }
          }

          uint64_t v97 = *(void *)(i - 8);
          *((void *)v38 - 1) = v97;
          v38 -= 8;
        }

        uint64_t v98 = *(char **)a1;
        *(void *)a1 = v34;
        *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v38;
        *(void *)(a1 + 16) = v81;
        *(void *)(a1 + memset(&context, 0, 24) = v39;
        if (v98) {
          operator delete(v98);
        }
        goto LABEL_36;
      }

      uint64_t v30 = operator new(0x1000uLL);
      uint64_t v31 = v30;
      if (v27 == v6)
      {
        if (v7 == v28)
        {
          if (v6 == v7) {
            unint64_t v54 = 1LL;
          }
          else {
            unint64_t v54 = (v27 - v7) >> 2;
          }
          uint64_t v55 = 2 * v54;
          unint64_t v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v54);
          unint64_t v7 = &v56[(v55 + 6) & 0xFFFFFFFFFFFFFFF8LL];
          uint64_t v58 = *(uint64_t **)(a1 + 8);
          unint64_t v59 = v7;
          uint64_t v60 = *(void *)(a1 + 16) - (void)v58;
          if (v60)
          {
            unint64_t v59 = &v7[v60 & 0xFFFFFFFFFFFFFFF8LL];
            uint64_t v61 = 8 * (v60 >> 3);
            size_t v62 = &v56[(v55 + 6) & 0xFFFFFFFFFFFFFFF8LL];
            do
            {
              uint64_t v63 = *v58++;
              *(void *)size_t v62 = v63;
              v62 += 8;
              v61 -= 8LL;
            }

            while (v61);
          }

          __int128 v64 = *(char **)a1;
          *(void *)a1 = v56;
          *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v7;
          *(void *)(a1 + 16) = v59;
          *(void *)(a1 + memset(&context, 0, 24) = &v56[8 * v57];
          if (v64)
          {
            operator delete(v64);
            unint64_t v7 = *(char **)(a1 + 8);
          }
        }

        *((void *)v7 - 1) = v31;
        char v65 = *(char **)(a1 + 8);
        uint64_t v66 = *(char **)(a1 + 16);
        *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v65 - 8;
        uint64_t v67 = *((void *)v65 - 1);
        *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v65;
        if (v66 == *(char **)(a1 + 24))
        {
          uint64_t v68 = (uint64_t)&v65[-*(void *)a1];
          if ((unint64_t)v65 <= *(void *)a1)
          {
            else {
              unint64_t v99 = (uint64_t)&v66[-*(void *)a1] >> 2;
            }
            v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v99);
            BOOL v102 = &v100[8 * (v99 >> 2)];
            char v103 = *(uint64_t **)(a1 + 8);
            uint64_t v66 = v102;
            uint64_t v104 = *(void *)(a1 + 16) - (void)v103;
            if (v104)
            {
              uint64_t v66 = &v102[v104 & 0xFFFFFFFFFFFFFFF8LL];
              uint64_t v105 = 8 * (v104 >> 3);
              v106 = &v100[8 * (v99 >> 2)];
              do
              {
                uint64_t v107 = *v103++;
                *(void *)v106 = v107;
                v106 += 8;
                v105 -= 8LL;
              }

              while (v105);
            }

            v108 = *(char **)a1;
            *(void *)a1 = v100;
            *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v102;
            *(void *)(a1 + 16) = v66;
            *(void *)(a1 + memset(&context, 0, 24) = &v100[8 * v101];
            if (v108)
            {
              operator delete(v108);
              uint64_t v66 = *(char **)(a1 + 16);
            }
          }

          else
          {
            uint64_t v69 = v68 >> 3;
            BOOL v18 = v68 >> 3 < -1;
            uint64_t v70 = (v68 >> 3) + 2;
            if (v18) {
              uint64_t v71 = v70;
            }
            else {
              uint64_t v71 = v69 + 1;
            }
            uint64_t v72 = -(v71 >> 1);
            uint64_t v73 = v71 >> 1;
            int64_t v74 = &v65[-8 * v73];
            int64_t v75 = v66 - v65;
            if (v66 != v65)
            {
              memmove(&v65[-8 * v73], v65, v66 - v65);
              char v65 = *(char **)(a1 + 8);
            }

            uint64_t v66 = &v74[v75];
            *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = &v65[8 * v72];
            *(void *)(a1 + 16) = &v74[v75];
          }
        }

        *(void *)uint64_t v66 = v67;
      }

      else
      {
        *(void *)uint64_t v6 = v30;
      }
    }

    else
    {
      *(void *)(a1 + 32) = v11 - 512;
      uint64_t v15 = *(void *)v7;
      uint64_t v13 = v7 + 8;
      uint64_t v14 = v15;
      *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v13;
      if (v6 == *(char **)(a1 + 24))
      {
        uint64_t v16 = (uint64_t)&v13[-*(void *)a1];
        if ((unint64_t)v13 <= *(void *)a1)
        {
          else {
            unint64_t v43 = (uint64_t)&v6[-*(void *)a1] >> 2;
          }
          uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v43);
          uint64_t v46 = &v44[8 * (v43 >> 2)];
          int v47 = *(uint64_t **)(a1 + 8);
          uint64_t v6 = v46;
          uint64_t v48 = *(void *)(a1 + 16) - (void)v47;
          if (v48)
          {
            uint64_t v6 = &v46[v48 & 0xFFFFFFFFFFFFFFF8LL];
            uint64_t v49 = 8 * (v48 >> 3);
            std::string::size_type v50 = &v44[8 * (v43 >> 2)];
            do
            {
              uint64_t v51 = *v47++;
              *(void *)std::string::size_type v50 = v51;
              v50 += 8;
              v49 -= 8LL;
            }

            while (v49);
          }

          std::basic_regex<char> v52 = *(char **)a1;
          *(void *)a1 = v44;
          *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v46;
          *(void *)(a1 + 16) = v6;
          *(void *)(a1 + memset(&context, 0, 24) = &v44[8 * v45];
          if (v52)
          {
            operator delete(v52);
            uint64_t v6 = *(char **)(a1 + 16);
          }
        }

        else
        {
          uint64_t v17 = v16 >> 3;
          BOOL v18 = v16 >> 3 < -1;
          uint64_t v19 = (v16 >> 3) + 2;
          if (v18) {
            uint64_t v20 = v19;
          }
          else {
            uint64_t v20 = v17 + 1;
          }
          uint64_t v21 = -(v20 >> 1);
          uint64_t v22 = v20 >> 1;
          __int128 v23 = &v13[-8 * v22];
          int64_t v24 = v6 - v13;
          if (v6 != v13)
          {
            memmove(&v13[-8 * v22], v13, v6 - v13);
            uint64_t v6 = *(char **)(a1 + 8);
          }

          __int128 v25 = &v6[8 * v21];
          uint64_t v6 = &v23[v24];
          *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v25;
          *(void *)(a1 + 16) = &v23[v24];
        }
      }

      *(void *)uint64_t v6 = v14;
    }

    *(void *)(a1 + 16) += 8LL;
LABEL_36:
    unint64_t v7 = *(char **)(a1 + 8);
    uint64_t v10 = *(void *)(a1 + 40);
    unint64_t v12 = *(void *)(a1 + 32) + v10;
    dispatch_data_t v4 = *a2;
  }

  *(void *)(*(void *)&v7[(v12 >> 6) & 0x3FFFFFFFFFFFFF8LL] + 8 * (v12 & 0x1FF)) = v4;
  *(void *)(a1 + 40) = v10 + 1;
  *a2 = 0LL;
  return 0LL;
}

void sub_1865F89A8(_Unwind_Exception *a1)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t mav_buffer_queue_dequeue_internal(uint64_t a1, dispatch_data_s **a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    unint64_t v5 = *(dispatch_data_s **)(*(void *)(*(void *)(a1 + 8) + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v4 & 0x1FF));
    *a2 = v5;
    *(_DWORD *)(a1 + 48) -= dispatch_data_get_size(v5);
    *(void *)(a1 + 32) = v4 + 1;
    *(void *)(a1 + 40) = v2 - 1;
    std::deque<void *>::__maybe_remove_front_spare[abi:ne180100](a1, 1);
    if (*(void *)(a1 + 40))
    {
      std::deque<void *>::__maybe_remove_front_spare[abi:ne180100](a1, 0);
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v8 = ((v6 - v7) << 6) - 1;
      if (v6 == v7) {
        uint64_t v8 = 0LL;
      }
      if ((unint64_t)(v8 - (*(void *)(a1 + 40) + *(void *)(a1 + 32))) >= 0x200)
      {
        operator delete(*(void **)(v6 - 8));
        uint64_t v7 = *(void *)(a1 + 8);
        uint64_t v6 = *(void *)(a1 + 16) - 8LL;
        *(void *)(a1 + 16) = v6;
      }
    }

    else
    {
      uint64_t v7 = *(void *)(a1 + 16);
      if (v7 != *(void *)(a1 + 8))
      {
        do
        {
          operator delete(*(void **)(v7 - 8));
          uint64_t v9 = *(void *)(a1 + 8);
          uint64_t v7 = *(void *)(a1 + 16) - 8LL;
          *(void *)(a1 + 16) = v7;
        }

        while (v7 != v9);
      }

      *(void *)(a1 + 32) = 0LL;
      uint64_t v6 = v7;
    }

    unint64_t v10 = (v6 - v7) >> 3;
    if (v10 < (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 3)
    {
      if (v6 == v7)
      {
        uint64_t v14 = 0LL;
        unint64_t v11 = 0LL;
      }

      else
      {
        unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v10);
        uint64_t v12 = *(void *)(a1 + 8);
        uint64_t v6 = *(void *)(a1 + 16);
        uint64_t v14 = &v11[8 * v13];
        uint64_t v15 = v6 - v12;
        if (v6 != v12)
        {
          uint64_t v16 = 0LL;
          uint64_t v17 = 8 * (v15 >> 3);
          do
          {
            *(void *)&v11[v16] = *(void *)(v12 + v16);
            v16 += 8LL;
          }

          while (v17 != v16);
          uint64_t v6 = *(void *)(a1 + 8);
          uint64_t v18 = *(void *)(a1 + 16);
LABEL_18:
          uint64_t v19 = v18 - v6;
          uint64_t v20 = *(void **)a1;
          *(void *)a1 = v11;
          *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v11;
          *(void *)(a1 + 16) = &v11[v19];
          *(void *)(a1 + memset(&context, 0, 24) = v14;
          if (v20) {
            operator delete(v20);
          }
          return 0LL;
        }
      }

      uint64_t v18 = v6;
      goto LABEL_18;
    }
  }

  return 0LL;
}

void sub_1865F8B60(void *a1)
{
}

BOOL mav_buffer_queue_empty_internal(uint64_t a1)
{
  return *(void *)(a1 + 40) == 0LL;
}

uint64_t mav_buffer_queue_front_internal(void *a1, void *a2)
{
  uint64_t v2 = a1[5];
  if (v2) {
    uint64_t v2 = *(void *)(*(void *)(a1[1] + ((a1[4] >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (a1[4] & 0x1FFLL));
  }
  *a2 = v2;
  return 0LL;
}

uint64_t mav_buffer_queue_get_size_internal(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

void std::deque<void *>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, char a2)
{
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 < 0x200) {
    a2 = 1;
  }
  if (v3 > 0x3FF || (a2 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 512LL;
  }

void *mav_linked_list_init(void *result)
{
  uint64_t *result = 0LL;
  result[1] = 0LL;
  result[2] = 0LL;
  return result;
}

uint64_t *mav_linked_list_insert_front(uint64_t *result, void *a2)
{
  int v2 = *((_DWORD *)result + 4);
  if (v2)
  {
    uint64_t v3 = *result;
    *a2 = *result;
    a2[1] = 0LL;
    *(void *)(v3 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = a2;
    uint64_t *result = (uint64_t)a2;
    int v4 = v2 + 1;
  }

  else
  {
    uint64_t *result = (uint64_t)a2;
    result[1] = (uint64_t)a2;
    int v4 = 1;
    *a2 = 0LL;
    a2[1] = 0LL;
  }

  a2[2] = result;
  *((_DWORD *)result + 4) = v4;
  return result;
}

uint64_t mav_linked_list_insert_back(uint64_t result, void *a2)
{
  int v2 = *(_DWORD *)(result + 16);
  if (v2)
  {
    uint64_t v3 = *(void **)(result + 8);
    *a2 = 0LL;
    a2[1] = v3;
    *uint64_t v3 = a2;
    *(void *)(result + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = a2;
    int v4 = v2 + 1;
  }

  else
  {
    *(void *)double result = a2;
    *(void *)(result + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = a2;
    int v4 = 1;
    *a2 = 0LL;
    a2[1] = 0LL;
  }

  a2[2] = result;
  *(_DWORD *)(result + 16) = v4;
  return result;
}

void *mav_linked_list_remove_front(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  int v2 = (void *)a1;
  *(_DWORD *)(a1 + 16) = v1 - 1;
  double result = *(void **)a1;
  int v4 = (void *)*result;
  *int v2 = *result;
  if (v4) {
    int v2 = v4;
  }
  v2[1] = 0LL;
  return result;
}

uint64_t mav_linked_list_remove_back(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  int v2 = (void *)a1;
  *(_DWORD *)(a1 + 16) = v1 - 1;
  uint64_t result = *(void *)(a1 + 8);
  int v4 = *(void **)(result + 8);
  v2[1] = v4;
  if (v4) {
    int v2 = v4;
  }
  *int v2 = 0LL;
  return result;
}

void ctu::path_join_impl(std::string *a1, char *__s)
{
  if (__s)
  {
    size_t v4 = strlen(__s);
    ctu::path_join_impl(a1, __s, v4);
  }

void ctu::path_join_impl(std::string *this, _BYTE *__src, size_t __len)
{
  if (!__len) {
    return;
  }
  if (*__src == 47) {
    goto LABEL_3;
  }
  if ((char)this->__r_.__value_.__s.__size_ < 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    if (size) {
      goto LABEL_10;
    }
LABEL_3:
    std::string::basic_string[abi:ne180100](__p, __src, __len);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    this->__r_.__value_.__l.__cap_ = v11;
    return;
  }

  if (!this->__r_.__value_.__s.__size_) {
    goto LABEL_3;
  }
  std::string::size_type size = this->__r_.__value_.__s.__size_;
LABEL_10:
  if ((this->__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v7 = this;
  }
  else {
    uint64_t v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if (v7->__r_.__value_.__s.__data_[size - 1] != 47) {
    std::string::push_back(this, 47);
  }
  std::string::basic_string[abi:ne180100](__p, __src, __len);
  if (v11 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if (v11 >= 0) {
    std::string::size_type v9 = HIBYTE(v11);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  std::string::append(this, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1865F8E40( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 ctu::path_join_impl(std::string *this, uint64_t a2)
{
  int v4 = *(char *)(a2 + 23);
  if (v4 < 0)
  {
    if (!*(void *)(a2 + 8)) {
      return result;
    }
    unint64_t v5 = *(_BYTE **)a2;
  }

  else
  {
    unint64_t v5 = (_BYTE *)a2;
    if (!*(_BYTE *)(a2 + 23)) {
      return result;
    }
  }

  if (*v5 == 47)
  {
    if ((this->__r_.__value_.__s.__size_ & 0x80) != 0) {
      goto LABEL_25;
    }
LABEL_26:
    __n128 result = *(__n128 *)a2;
    this->__r_.__value_.__l.__cap_ = *(void *)(a2 + 16);
    *(__n128 *)&this->__r_.__value_.__l.__data_ = result;
    *(_BYTE *)(a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
    return result;
  }

  if ((this->__r_.__value_.__s.__size_ & 0x80) != 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    if (!size)
    {
LABEL_25:
      operator delete(this->__r_.__value_.__l.__data_);
      goto LABEL_26;
    }
  }

  else
  {
    if (!this->__r_.__value_.__s.__size_) {
      goto LABEL_26;
    }
    std::string::size_type size = this->__r_.__value_.__s.__size_;
  }

  if ((this->__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v7 = this;
  }
  else {
    uint64_t v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if (v7->__r_.__value_.__s.__data_[size - 1] != 47)
  {
    std::string::push_back(this, 47);
    LOBYTE(v4) = *(_BYTE *)(a2 + 23);
  }

  if ((v4 & 0x80u) == 0) {
    uint64_t v8 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v8 = *(const std::string::value_type **)a2;
  }
  if ((v4 & 0x80u) == 0) {
    std::string::size_type v9 = v4;
  }
  else {
    std::string::size_type v9 = *(void *)(a2 + 8);
  }
  std::string::append(this, v8, v9);
  return result;
}

void ctu::path_split(char *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a2)
  {
    if (!a1)
    {
      memset(&v31, 0, sizeof(v31));
LABEL_21:
      std::string::basic_string[abi:ne180100]<0>(&__dst, "");
      *(std::string *)a3 = v31;
      *(std::string *)(a3 + memset(&context, 0, 24) = __dst;
      return;
    }

LABEL_52:
  memset(&v31, 0, sizeof(v31));
LABEL_53:
  __int128 v23 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
  int size = (char)v31.__r_.__value_.__s.__size_;
  std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  *(_DWORD *)uint64_t v29 = v31.__r_.__value_.__r.__words[2];
  *(_DWORD *)&v29[3] = *(_DWORD *)((char *)&v31.__r_.__value_.__r.__words[2] + 3);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0)
  {
    p_p = &__p;
    std::string::size_type v25 = __p.__r_.__value_.__s.__size_;
  }

  p_int size = (std::string::__short::$654DBF3D633A6121C0B197AC38B89F76 *)&p_p[-1].__r_.__value_.__s.__size_;
  while (v25)
  {
    int v28 = p_size[v25--].__size_;
    if (v28 != 47)
    {
      if (v25 != -1LL) {
        std::string::erase(&__p, v25 + 1, 0xFFFFFFFFFFFFFFFFLL);
      }
      break;
    }
  }

  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( (const void **)&__dst.__r_.__value_.__l.__data_,  (const void **)&__p.__r_.__value_.__l.__data_,  &v31);
  *(std::string *)a3 = v31;
  memset(&v31, 0, sizeof(v31));
  if (size < 0)
  {
    std::string::__init_copy_ctor_external( (std::string *)(a3 + 24),  (const std::string::value_type *)v23,  *((std::string::size_type *)&v23 + 1));
    operator delete((void *)v23);
  }

  else
  {
    *(_OWORD *)(a3 + memset(&context, 0, 24) = v23;
    *(_DWORD *)(a3 + 40) = *(_DWORD *)v29;
    *(_DWORD *)(a3 + 43) = *(_DWORD *)&v29[3];
    *(_BYTE *)(a3 + 47) = size;
  }

  uint64_t v22 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_67:
  operator delete(v22);
LABEL_68:
}

  xpc_release(object);
}

void sub_1865F92BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (v24 < 0) {
    operator delete(v23);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ctu::basename(char *a1@<X0>, size_t a2@<X1>, std::string *a3@<X8>)
{
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v4;
  *(_OWORD *)&__p[16] = v4;
  *(_OWORD *)unint64_t v5 = v4;
  ctu::path_split(a1, a2, (uint64_t)v5);
  if ((__p[31] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external( a3,  *(const std::string::value_type **)&__p[8],  *(std::string::size_type *)&__p[16]);
    if ((__p[31] & 0x80000000) != 0) {
      operator delete(*(void **)&__p[8]);
    }
  }

  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)&__p[8];
    a3->__r_.__value_.__l.__cap_ = *(void *)&__p[24];
  }

  if ((__p[7] & 0x80000000) != 0) {
    operator delete(v5[0]);
  }
}

void sub_1865F9408( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ctu::dirname(char *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v4;
  __int128 v7 = v4;
  *(_OWORD *)unint64_t v5 = v4;
  ctu::path_split(a1, a2, (uint64_t)v5);
  if (SHIBYTE(__p[0]) < 0)
  {
    std::string::__init_copy_ctor_external( (std::string *)a3,  (const std::string::value_type *)v5[0],  (std::string::size_type)v5[1]);
  }

  else
  {
    *(_OWORD *)a3 = *(_OWORD *)v5;
    *(void **)(a3 + 16) = __p[0];
  }

  if (SHIBYTE(v7) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v5[0]);
  }
}

void sub_1865F949C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double ctu::PathView::PathView(ctu::PathView *this)
{
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

{
  double result;
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

void *ctu::PathView::PathView(void *result, uint64_t a2, unint64_t a3)
{
  void *result = a2;
  result[1] = a3;
  result[2] = 0LL;
  result[3] = 0LL;
  if (a3 < 2)
  {
    if (!a3)
    {
LABEL_11:
      unint64_t v3 = -1LL;
LABEL_13:
      if (v3 >= a3) {
        unint64_t v3 = a3;
      }
      goto LABEL_15;
    }

    a3 = 1LL;
  }

  else if (*(_BYTE *)(a2 + a3 - 1) == 47)
  {
    if (a3 - 1 < a3) {
      --a3;
    }
    result[1] = a3;
  }

  unint64_t v3 = 0LL;
  while (*(_BYTE *)(a2 + v3) != 47)
  {
    if (a3 == ++v3) {
      goto LABEL_11;
    }
  }

  if (v3) {
    goto LABEL_13;
  }
  if (a3 < 2)
  {
LABEL_20:
    unint64_t v4 = -1LL;
  }

  else
  {
    unint64_t v4 = 1LL;
    while (*(_BYTE *)(a2 + v4) != 47)
    {
      if (a3 == ++v4) {
        goto LABEL_20;
      }
    }
  }

  unint64_t v5 = a3 != 0;
  if (a3) {
    ++a2;
  }
  if (v5 > v4) {
    unint64_t v4 = a3 != 0;
  }
  if (v4 >= a3) {
    unint64_t v4 = a3;
  }
  unint64_t v3 = v4 - v5;
LABEL_15:
  result[2] = a2;
  result[3] = v3;
  return result;
}

uint64_t ctu::PathView::current(ctu::PathView *this)
{
  return *((void *)this + 2);
}

BOOL ctu::PathView::operator BOOL(uint64_t a1)
{
  return *(void *)(a1 + 24) != 0LL;
}

BOOL ctu::PathView::hasTail(ctu::PathView *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = *((void *)this + 2) + v1;
  uint64_t v3 = *(void *)this + *((void *)this + 1);
  return v3 != v2 && v2 + 1 != v3;
}

uint64_t ctu::PathView::tail(ctu::PathView *this)
{
  unint64_t v4 = (char *)this + 16;
  uint64_t result = *((void *)this + 2);
  uint64_t v3 = *((void *)v4 + 1);
  if (v3)
  {
    uint64_t v5 = result + v3;
    if (*(void *)this + *((void *)this + 1) == v5) {
      return v5;
    }
    else {
      return v5 + 1;
    }
  }

  return result;
}

uint64_t ctu::PathView::head(ctu::PathView *this)
{
  return *(void *)this;
}

BOOL ctu::PathView::hasHead(ctu::PathView *this)
{
  uint64_t v1 = (_BYTE *)*((void *)this + 2);
  uint64_t v2 = *(_BYTE **)this;
  uint64_t v3 = (uint64_t)&v1[-*(void *)this];
  if (v3 > 1) {
    return 1LL;
  }
  if (v3 == 1 && *v2 == 47) {
    return 0LL;
  }
  return v1 != v2;
}

uint64_t ctu::PathView::advance(uint64_t this, uint64_t a2)
{
  if (a2 < 1)
  {
    if (a2 < 0)
    {
      unint64_t v11 = *(void *)(this + 8);
      if (v11)
      {
        size_t v12 = *(_BYTE **)this;
        uint64_t v13 = *(_BYTE **)(this + 16);
        do
        {
          uint64_t v14 = v13 - v12;
          if (v13 - v12 <= 1)
          {
            if (v13 - v12 == 1)
            {
              if (v13 == v12 || *v12 == 47) {
                return this;
              }
            }

            else if (v13 == v12)
            {
              return this;
            }
          }

          ++a2;
          unint64_t v15 = v14 - (v14 != v11);
          if (v15 >= v11) {
            unint64_t v16 = v11;
          }
          else {
            unint64_t v16 = v14 - (v14 != v11);
          }
          unint64_t v17 = v16 - 1;
          do
          {
            if (v17 == -1LL)
            {
              uint64_t v13 = v12;
              goto LABEL_54;
            }

            int v18 = v12[v17--];
          }

          while (v18 != 47);
          unint64_t v19 = v17 + 2;
          if (v17 + 2 >= v11) {
            unint64_t v19 = v11;
          }
          if (v19 > v15) {
            unint64_t v15 = v19;
          }
          if (v15 >= v11) {
            unint64_t v20 = v11;
          }
          else {
            unint64_t v20 = v15;
          }
          uint64_t v13 = &v12[v19];
          unint64_t v16 = v20 - v19;
LABEL_54:
          *(void *)(this + 16) = v13;
          *(void *)(this + memset(&context, 0, 24) = v16;
        }

        while (a2);
      }
    }
  }

  else
  {
    uint64_t v2 = *(_BYTE **)this;
    unint64_t v3 = *(void *)(this + 8);
    uint64_t v4 = *(void *)(this + 16) + *(void *)(this + 24) - *(void *)this;
    BOOL v5 = v4 != -1 && v4 < (uint64_t)v3;
    unint64_t v6 = *(void *)(this + 8);
    unint64_t v7 = v6;
    if (v5)
    {
      while (1)
      {
        unint64_t v6 = v4 + 1;
        if (v3 <= v4 + 1) {
          break;
        }
        ++v4;
        while (v2[v4] != 47)
        {
          if (v3 == ++v4) {
            goto LABEL_18;
          }
        }

        uint64_t v8 = a2 - 1;
        if (a2 >= 2 && v4 != -1)
        {
          --a2;
        }

        goto LABEL_19;
      }

LABEL_18:
      uint64_t v8 = a2 - 1;
      uint64_t v4 = -1LL;
LABEL_19:
      if (v8)
      {
        unint64_t v6 = *(void *)(this + 8);
        unint64_t v7 = v6;
      }

      else
      {
        unint64_t v7 = v4;
      }
    }

    if (v6 >= v3) {
      unint64_t v9 = *(void *)(this + 8);
    }
    else {
      unint64_t v9 = v6;
    }
    if (v9 <= v7) {
      unint64_t v10 = v7;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 < v3) {
      unint64_t v3 = v10;
    }
    *(void *)(this + 16) = &v2[v9];
    *(void *)(this + memset(&context, 0, 24) = v3 - v9;
  }

  return this;
}

uint64_t ctu::PathView::skip(uint64_t *a1, _BYTE *a2, size_t __n)
{
  if (a1[3]) {
    BOOL v3 = __n == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0LL;
  }
  size_t v4 = __n;
  if (*a2 == 47)
  {
    size_t v4 = __n - 1;
    if (__n == 1) {
      return 0LL;
    }
    ++a2;
  }

  if (a2[v4 - 1] == 47)
  {
    if (v4 - 1 < v4) {
      --v4;
    }
    if (!v4) {
      return 0LL;
    }
  }

  uint64_t v7 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v8 = *a1;
  size_t v9 = *a1 + v7 - v6;
  if (v4 >= v9) {
    size_t v11 = v9;
  }
  else {
    size_t v11 = v4;
  }
  size_t v12 = (_BYTE *)(v6 + v11);
  if (v9 > v4)
  {
    if (*v12 == 47)
    {
      unint64_t v13 = v9 - v11;
      if (v9 - v11 < 2)
      {
LABEL_24:
        unint64_t v14 = -1LL;
      }

      else
      {
        unint64_t v14 = 0LL;
        size_t v15 = ~v6 + v7 + v8 - v11;
        uint64_t v16 = v11 + v6 + 1;
        while (1)
        {
          int v17 = *(unsigned __int8 *)(v16 + v14++);
          if (v17 == 47) {
            break;
          }
          if (v15 == v14) {
            goto LABEL_24;
          }
        }
      }

      if (v14 < v13) {
        unint64_t v13 = v14;
      }
      ++v12;
      unint64_t v18 = v13 - 1;
      goto LABEL_29;
    }

    return 0LL;
  }

  unint64_t v18 = 0LL;
LABEL_29:
  a1[2] = (uint64_t)v12;
  a1[3] = v18;
  return 1LL;
}

uint64_t TelephonyCapabilitiesRadioFusingCertIDFromSerialNumber()
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  return 0LL;
}

uint64_t TelephonyCapabilitiesRadioFusingCertIDFromPublicKeyHash()
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  return (sTelephonyRadioVendor < 5) & (0x16u >> sTelephonyRadioVendor);
}

uint64_t TelephonyCapabilitiesRadioFusingDefaultCertID()
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  if (sTelephonyProduct > 201)
  {
    if (sTelephonyProduct == 212) {
      return 3557748310LL;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t result = 3425784744LL;
    switch(sTelephonyProduct)
    {
      case 73:
      case 120:
      case 123:
      case 136:
        return result;
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 112:
      case 113:
      case 118:
      case 119:
      case 121:
      case 122:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 139:
      case 140:
      case 141:
      case 153:
      case 154:
      case 155:
      case 156:
        return 0LL;
      case 99:
      case 100:
      case 101:
      case 102:
      case 108:
      case 109:
      case 110:
      case 111:
      case 114:
      case 115:
      case 116:
      case 117:
      case 124:
      case 125:
      case 126:
      case 132:
      case 133:
      case 134:
      case 135:
      case 137:
      case 138:
      case 142:
      case 143:
      case 144:
      case 145:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 157:
      case 158:
      case 159:
        return 3557748310LL;
      default:
        break;
    }
  }

  return result;
}

uint64_t xpc::dyn_cast_or_default(xpc_object_t *a1, uint64_t a2)
{
  uint64_t v4 = MEMORY[0x186E3CD4C](*a1);
  xpc_object_t v5 = *a1;
  if (v4 == MEMORY[0x1895F9280]) {
    return xpc_int64_get_value(v5);
  }
  uint64_t v6 = MEMORY[0x186E3CD4C](v5);
  xpc_object_t v7 = *a1;
  if (v6 == MEMORY[0x1895F92F0]) {
    return xpc_uint64_get_value(v7);
  }
  if (MEMORY[0x186E3CD4C](v7) == MEMORY[0x1895F9228]) {
    return xpc::dyn_cast_or_default(a1, 0LL);
  }
  return a2;
}

BOOL xpc::dyn_cast_or_default(xpc_object_t *a1, uint64_t a2)
{
  uint64_t v4 = MEMORY[0x186E3CD4C](*a1);
  xpc_object_t v5 = *a1;
  if (v4 == MEMORY[0x1895F9228]) {
    return v5 == (xpc_object_t)MEMORY[0x1895F9178];
  }
  uint64_t v6 = MEMORY[0x186E3CD4C](v5);
  xpc_object_t v7 = *a1;
  if (v6 == MEMORY[0x1895F9280])
  {
    uint64_t value = xpc_int64_get_value(v7);
    return value != 0;
  }

  if (MEMORY[0x186E3CD4C](v7) == MEMORY[0x1895F92F0])
  {
    uint64_t value = xpc_uint64_get_value(*a1);
    return value != 0;
  }

  return a2;
}

uint64_t xpc::dyn_cast_or_default(xpc_object_t *a1, int64_t value)
{
  uint64_t v4 = MEMORY[0x186E3CD4C](*a1);
  xpc_object_t v5 = *a1;
  if (v4 == MEMORY[0x1895F9280])
  {
    uint64_t value = xpc_int64_get_value(v5);
    if (value < 0)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::out_of_range::out_of_range[abi:ne180100](exception, "dyn_cast to uint64_t requires nonnegative values");
      __cxa_throw(exception, (struct type_info *)off_189E93128, MEMORY[0x189614200]);
    }
  }

  else if (MEMORY[0x186E3CD4C](v5) == MEMORY[0x1895F92F0])
  {
    return xpc_uint64_get_value(*a1);
  }

  return value;
}

void sub_1865F9DA0(_Unwind_Exception *a1)
{
}

uint64_t xpc::dyn_cast_or_default(xpc_object_t *a1, int a2)
{
  return xpc::dyn_cast_or_default(a1, a2);
}

uint64_t xpc::dyn_cast_or_default(xpc_object_t *a1, unsigned int a2)
{
  return xpc::dyn_cast_or_default(a1, a2);
}

uint64_t xpc::dyn_cast_or_default@<X0>(xpc_object_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (MEMORY[0x186E3CD4C](*a1) == MEMORY[0x1895F9240] && (bytes_ptr = xpc_data_get_bytes_ptr(*a1)) != 0LL)
  {
    uint64_t v8 = bytes_ptr;
    uint64_t result = xpc_data_get_length(*a1);
    if (result < 1)
    {
      size_t v11 = 0LL;
      unint64_t v10 = 0LL;
    }

    else
    {
      size_t v9 = result;
      unint64_t v10 = (char *)operator new(result);
      size_t v11 = &v10[v9];
      uint64_t result = (uint64_t)memcpy(v10, v8, v9);
    }

    *a3 = v10;
    a3[1] = v11;
    a3[2] = v11;
  }

  else
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
    return (uint64_t)std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>( a3,  *(const void **)a2,  *(void *)(a2 + 8),  *(void *)(a2 + 8) - *(void *)a2);
  }

  return result;
}

void xpc::dyn_cast_or_default(xpc_object_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  if (MEMORY[0x186E3CD4C](*a1) == MEMORY[0x1895F9240])
  {
    size_t v12 = 0LL;
    uint64_t v13 = 0LL;
    size_t v11 = (uint64_t *)&v12;
    bytes_ptr = (unsigned __int8 *)xpc_data_get_bytes_ptr(*a1);
    if (bytes_ptr)
    {
      for (size_t i = xpc_data_get_length(*a1); i; --i)
      {
        std::__tree<unsigned char>::__emplace_hint_unique_key_args<unsigned char,unsigned char const&>( (uint64_t *)&v11,  (uint64_t *)&v12,  *bytes_ptr,  *bytes_ptr);
        ++bytes_ptr;
      }

      uint64_t v8 = v12;
      *a3 = (uint64_t)v11;
      a3[1] = (uint64_t)v8;
      size_t v9 = a3 + 1;
      uint64_t v10 = v13;
      a3[2] = v13;
      if (v10)
      {
        v8[2] = v9;
        size_t v11 = (uint64_t *)&v12;
        size_t v12 = 0LL;
        uint64_t v13 = 0LL;
        uint64_t v8 = 0LL;
      }

      else
      {
        *a3 = (uint64_t)v9;
      }
    }

    else
    {
      std::set<unsigned char>::set[abi:ne180100](a3, a2);
      uint64_t v8 = v12;
    }

    std::__tree<unsigned char>::destroy(v8);
  }

  else
  {
    std::set<unsigned char>::set[abi:ne180100](a3, a2);
  }

void sub_1865F9FC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void xpc::dyn_cast_or_default(xpc_object_t *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (MEMORY[0x186E3CD4C](*a1) == MEMORY[0x1895F92E8])
  {
    string_ptr = (char *)xpc_string_get_string_ptr(*a1);
    size_t length = xpc_string_get_length(*a1);
    std::string::basic_string[abi:ne180100](a3, string_ptr, length);
  }

  else if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__l.__cap_ = *(void *)(a2 + 16);
  }

void *xpc::dyn_cast_or_default@<X0>(xpc_object_t *a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  if (MEMORY[0x186E3CD4C](*a1) != MEMORY[0x1895F92E8]) {
    return std::string::basic_string[abi:ne180100]<0>(a3, a2);
  }
  string_ptr = (char *)xpc_string_get_string_ptr(*a1);
  size_t length = xpc_string_get_length(*a1);
  return std::string::basic_string[abi:ne180100](a3, string_ptr, length);
}

double xpc::dyn_cast_or_default(xpc_object_t *a1, double a2)
{
  if (MEMORY[0x186E3CD4C](*a1) == MEMORY[0x1895F9258]) {
    return xpc_double_get_value(*a1);
  }
  else {
    return a2;
  }
}

uint64_t xpc::is_logically_false(xpc_object_t *a1)
{
  if (MEMORY[0x186E3CD4C](*a1) == MEMORY[0x1895F92A8]) {
    return 1LL;
  }
  uint64_t v2 = MEMORY[0x186E3CD4C](*a1);
  xpc_object_t v3 = *a1;
  if (v2 == MEMORY[0x1895F9280])
  {
    uint64_t value = xpc_int64_get_value(v3);
  }

  else
  {
    uint64_t v4 = MEMORY[0x186E3CD4C](v3);
    xpc_object_t v5 = *a1;
    if (v4 == MEMORY[0x1895F92F0])
    {
      uint64_t value = xpc_uint64_get_value(v5);
    }

    else
    {
      uint64_t v6 = MEMORY[0x186E3CD4C](v5);
      xpc_object_t v7 = *a1;
      if (v6 == MEMORY[0x1895F9228]) {
        return !xpc_BOOL_get_value(v7);
      }
      uint64_t v8 = MEMORY[0x186E3CD4C](v7);
      xpc_object_t v9 = *a1;
      if (v8 == MEMORY[0x1895F9240])
      {
        uint64_t value = xpc_data_get_length(v9);
      }

      else
      {
        uint64_t v10 = MEMORY[0x186E3CD4C](v9);
        xpc_object_t v11 = *a1;
        if (v10 == MEMORY[0x1895F92E8])
        {
          uint64_t value = xpc_string_get_length(v11);
        }

        else
        {
          uint64_t v12 = MEMORY[0x186E3CD4C](v11);
          xpc_object_t v13 = *a1;
          if (v12 == MEMORY[0x1895F9220])
          {
            uint64_t value = xpc_array_get_count(v13);
          }

          else
          {
            if (MEMORY[0x186E3CD4C](v13) != MEMORY[0x1895F9250]) {
              return 0LL;
            }
            uint64_t value = xpc_dictionary_get_count(*a1);
          }
        }
      }
    }
  }

  return value == 0;
}

BOOL xpc::is_logically_false(xpc_object_t *a1)
{
  return MEMORY[0x186E3CD4C](*a1) != MEMORY[0x1895F9250] || xpc_dictionary_get_count(*a1) == 0;
}

BOOL xpc::is_logically_false(xpc_object_t *this, const xpc::array *a2)
{
  return MEMORY[0x186E3CD4C](*this, a2) != MEMORY[0x1895F9220] || xpc_array_get_count(*this) == 0;
}

void xpc::auto_reply::deleter(xpc_object_t *a1)
{
  if (a1)
  {
    if (MEMORY[0x186E3CD4C](*a1) == MEMORY[0x1895F9250])
    {
      remote_connection = xpc_dictionary_get_remote_connection(*a1);
      if (remote_connection) {
        xpc_connection_send_message(remote_connection, *a1);
      }
    }

    xpc_release(*a1);
    operator delete(a1);
  }

void xpc::auto_reply::deleter_with_conn(xpc_object_t *a1, xpc_connection_t *a2)
{
  if (a1)
  {
    if (MEMORY[0x186E3CD4C](*a1) == MEMORY[0x1895F9250] && MEMORY[0x186E3CD4C](*a2) == MEMORY[0x1895F9238]) {
      xpc_connection_send_message(*a2, *a1);
    }
    xpc_release(*a1);
    operator delete(a1);
  }

void xpc::auto_reply::connect(void ***a1, xpc_object_t *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    xpc_object_t v4 = *a2;
    if (*a2) {
      xpc_retain(*a2);
    }
    else {
      xpc_object_t v4 = xpc_null_create();
    }
    xpc_object_t v5 = *v2;
    *uint64_t v2 = v4;
    xpc_release(v5);
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v7 = *a2;
    *a2 = v6;
    xpc_release(v7);
  }

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>( void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    xpc_object_t v6 = result;
    uint64_t result = std::vector<char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_1865FA4EC(_Unwind_Exception *exception_object)
{
  xpc_object_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void std::__tree<unsigned char>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<unsigned char>::destroy(*a1);
    std::__tree<unsigned char>::destroy(a1[1]);
    operator delete(a1);
  }

uint64_t *std::set<unsigned char>::set[abi:ne180100](uint64_t *a1, void *a2)
{
  a1[1] = 0LL;
  xpc_object_t v3 = a1 + 1;
  a1[2] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  xpc_object_t v4 = a2 + 1;
  xpc_object_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<unsigned char>::__emplace_hint_unique_key_args<unsigned char,unsigned char const&>( a1,  v3,  *((_BYTE *)v5 + 25),  *((_BYTE *)v5 + 25));
      xpc_object_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          xpc_object_t v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          xpc_object_t v5 = v7;
        }

        while (!v8);
      }

      xpc_object_t v5 = v7;
    }

    while (v7 != v4);
  }

  return a1;
}

void sub_1865FA5D4(_Unwind_Exception *a1)
{
}

uint64_t *std::__tree<unsigned char>::__emplace_hint_unique_key_args<unsigned char,unsigned char const&>( uint64_t *result, uint64_t *a2, unsigned __int8 a3, char a4)
{
  xpc_object_t v5 = a2;
  xpc_object_t v6 = result;
  uint64_t v7 = (uint64_t **)(result + 1);
  if (result + 1 != a2)
  {
    unsigned int v8 = *((unsigned __int8 *)a2 + 25);
    if (v8 <= a3)
    {
      if (v8 >= a3) {
        return result;
      }
      xpc_object_t v13 = a2 + 1;
      uint64_t v12 = (uint64_t *)a2[1];
      if (v12)
      {
        do
        {
          xpc_object_t v13 = v12;
          uint64_t v12 = (uint64_t *)*v12;
          xpc_object_t v5 = v13;
          unint64_t v14 = v13;
        }

        while (v12);
      }

      else
      {
        unint64_t v14 = a2;
        do
        {
          unint64_t v20 = v14;
          unint64_t v14 = (uint64_t *)v14[2];
        }

        while ((uint64_t *)*v14 != v20);
      }

      uint64_t v21 = *v7;
      xpc_object_t v13 = result + 1;
      xpc_object_t v5 = result + 1;
      if (!*v7) {
        goto LABEL_42;
      }
      while (1)
      {
        while (1)
        {
          xpc_object_t v5 = v21;
          unsigned int v22 = *((unsigned __int8 *)v21 + 25);
          if (v22 <= a3) {
            break;
          }
          uint64_t v21 = (uint64_t *)*v21;
          xpc_object_t v13 = v5;
          if (!*v5) {
            goto LABEL_42;
          }
        }

        if (v22 >= a3) {
          return result;
        }
        uint64_t v21 = (uint64_t *)v21[1];
        if (!v21)
        {
LABEL_30:
          xpc_object_t v13 = v5 + 1;
          goto LABEL_42;
        }
      }
    }
  }

  uint64_t v9 = *a2;
  if ((uint64_t *)*result == a2)
  {
    xpc_object_t v11 = a2;
  }

  else
  {
    if (v9)
    {
      uint64_t v10 = (uint64_t *)*a2;
      do
      {
        xpc_object_t v11 = v10;
        uint64_t v10 = (uint64_t *)v10[1];
      }

      while (v10);
    }

    else
    {
      size_t v15 = a2;
      do
      {
        xpc_object_t v11 = (uint64_t *)v15[2];
        BOOL v16 = *v11 == (void)v15;
        size_t v15 = v11;
      }

      while (v16);
    }

    if (*((unsigned __int8 *)v11 + 25) >= a3)
    {
      unint64_t v18 = *v7;
      xpc_object_t v13 = result + 1;
      xpc_object_t v5 = result + 1;
      if (!*v7) {
        goto LABEL_42;
      }
      while (1)
      {
        while (1)
        {
          xpc_object_t v5 = v18;
          unsigned int v19 = *((unsigned __int8 *)v18 + 25);
          if (v19 <= a3) {
            break;
          }
          unint64_t v18 = (uint64_t *)*v18;
          xpc_object_t v13 = v5;
          if (!*v5) {
            goto LABEL_42;
          }
        }

        if (v19 >= a3) {
          return result;
        }
        unint64_t v18 = (uint64_t *)v18[1];
        if (!v18) {
          goto LABEL_30;
        }
      }
    }
  }

  if (v9) {
    int v17 = v11;
  }
  else {
    int v17 = a2;
  }
  if (v9) {
    xpc_object_t v13 = v11 + 1;
  }
  else {
    xpc_object_t v13 = a2;
  }
  if (!*v13)
  {
    xpc_object_t v5 = v17;
LABEL_42:
    __int128 v23 = operator new(0x20uLL);
    v23[25] = a4;
    *(void *)__int128 v23 = 0LL;
    *((void *)v23 + 1) = 0LL;
    *((void *)v23 + 2) = v5;
    *xpc_object_t v13 = (uint64_t)v23;
    uint64_t v24 = *(void *)*v6;
    if (v24)
    {
      uint64_t *v6 = v24;
      uint64_t v25 = (uint64_t *)*v13;
    }

    else
    {
      uint64_t v25 = (uint64_t *)v23;
    }

    uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[1], v25);
    ++v6[2];
  }

  return result;
}

void ctu::rest::detail::read_raw_binary_value(char *a1, size_t a2, xpc_object_t *a3)
{
  if (MEMORY[0x186E3CD4C](*a3) != MEMORY[0x1895F9240]
    || (size_t length = xpc_data_get_length(*a3), (bytes_ptr = xpc_data_get_bytes_ptr(*a3)) == 0LL))
  {
    xpc_object_t v6 = a1;
    size_t v7 = a2;
LABEL_3:
    bzero(v6, v7);
    return;
  }

  if (length >= a2) {
    size_t v10 = a2;
  }
  else {
    size_t v10 = length;
  }
  memcpy(a1, bytes_ptr, v10);
  size_t v7 = a2 - length;
  if (a2 > length)
  {
    xpc_object_t v6 = &a1[length];
    goto LABEL_3;
  }

xpc_object_t ctu::rest::detail::write_enum_string_value@<X0>( ctu::rest::detail *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return xpc::string((xpc *)"%lld:%s", a3, this, a2);
}

{
  return xpc::string((xpc *)"%llu:%s", a3, this, a2);
}

xpc_object_t xpc::string@<X0>(xpc *this@<X0>, void *a2@<X8>, ...)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t result = xpc_string_create_with_format_and_arguments((const char *)this, va);
  *a2 = result;
  if (!result)
  {
    xpc_object_t result = xpc_null_create();
    *a2 = result;
  }

  return result;
}

xpc_object_t ctu::rest::detail::write_enum_string_value@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  else {
    xpc_object_t v3 = (uint64_t *)*a2;
  }
  return xpc::string((xpc *)"%lld:%s", a3, a1, v3);
}

{
  uint64_t *v3;
  else {
    xpc_object_t v3 = (uint64_t *)*a2;
  }
  return xpc::string((xpc *)"%llu:%s", a3, a1, v3);
}

void ctu::rest::detail::read_enum_string_value(uint64_t *a1, xpc_object_t *a2)
{
  std::string __p = v4;
  *a1 = std::stoll(&__p, 0LL, 10);
}

{
  std::string __p;
  std::string v4;
  void v5[3];
  memset(v5, 0, sizeof(v5));
  xpc::dyn_cast_or_default(a2, (uint64_t)v5, &v4);
  std::string __p = v4;
  *a1 = std::stol(&__p, 0LL, 10);
}

void sub_1865FA9E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ctu::rest::detail::read_enum_string_value(unint64_t *a1, xpc_object_t *a2)
{
  std::string __p = v4;
  *a1 = std::stoull(&__p, 0LL, 10);
}

{
  std::string __p;
  std::string v4;
  void v5[3];
  memset(v5, 0, sizeof(v5));
  xpc::dyn_cast_or_default(a2, (uint64_t)v5, &v4);
  std::string __p = v4;
  *a1 = std::stoul(&__p, 0LL, 10);
}

void sub_1865FAA70(void *a1)
{
}

void sub_1865FAA7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ctu::rest::detail::read_enum_string_value(_BYTE *a1, xpc_object_t *a2)
{
  std::string __p = v4;
  *a1 = std::stoi(&__p, 0LL, 10);
}

{
  std::string __p;
  std::string v4;
  void v5[3];
  memset(v5, 0, sizeof(v5));
  xpc::dyn_cast_or_default(a2, (uint64_t)v5, &v4);
  std::string __p = v4;
  *a1 = std::stoi(&__p, 0LL, 10);
}

void sub_1865FAB0C(void *a1)
{
}

void sub_1865FAB18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1865FABA8(void *a1)
{
}

void sub_1865FABB4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ctu::rest::detail::read_enum_string_value(_WORD *a1, xpc_object_t *a2)
{
  std::string __p = v4;
  *a1 = std::stoi(&__p, 0LL, 10);
}

{
  std::string __p;
  std::string v4;
  void v5[3];
  memset(v5, 0, sizeof(v5));
  xpc::dyn_cast_or_default(a2, (uint64_t)v5, &v4);
  std::string __p = v4;
  *a1 = std::stoi(&__p, 0LL, 10);
}

void sub_1865FAC44(void *a1)
{
}

void sub_1865FAC50( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1865FACE0(void *a1)
{
}

void sub_1865FACEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ctu::rest::detail::read_enum_string_value(int *a1, xpc_object_t *a2)
{
  std::string __p = v4;
  *a1 = std::stoi(&__p, 0LL, 10);
}

void sub_1865FAD7C(void *a1)
{
}

void sub_1865FAD88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ctu::rest::detail::read_enum_string_value(_DWORD *a1, xpc_object_t *a2)
{
  std::string __p = v4;
  *a1 = std::stoul(&__p, 0LL, 10);
}

void sub_1865FAE18(void *a1)
{
}

void sub_1865FAE24( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1865FAEB4(void *a1)
{
}

void sub_1865FAEC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1865FAF50(void *a1)
{
}

void sub_1865FAF5C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xpc::bridge@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _CFXPCCreateCFObjectFromXPCObject();
  *a1 = result;
  return result;
}

uint64_t ctu::cf_to_xpc@<X0>(void *a1@<X8>)
{
  uint64_t result = _CFXPCCreateXPCObjectFromCFObject();
  *a1 = result;
  if (!result)
  {
    uint64_t result = (uint64_t)xpc_null_create();
    *a1 = result;
  }

  return result;
}

uint64_t ctu::xpc_to_cf@<X0>(void *a1@<X8>)
{
  uint64_t result = _CFXPCCreateCFObjectFromXPCObject();
  *a1 = result;
  return result;
}

std::runtime_error *ctu::IllegalTimerParamsException::IllegalTimerParamsException( std::runtime_error *this, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(this, a2);
  result->__vftable = (std::runtime_error_vtbl *)off_189E95BB8;
  return result;
}

{
  std::runtime_error *result;
  uint64_t result = std::runtime_error::runtime_error(this, a2);
  result->__vftable = (std::runtime_error_vtbl *)off_189E95BB8;
  return result;
}

void ctu::IllegalTimerParamsException::~IllegalTimerParamsException(std::runtime_error *this)
{
}

void ctu::TimerService::scheduleAfterImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  xpc_object_t v11 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  if (a5) {
    uint64_t v12 = _Block_copy(a5);
  }
  else {
    uint64_t v12 = 0LL;
  }
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v16 = *(void *)(a2 + 16);
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
  aBlocunint64_t k = v12;
  dispatch_object_t object = v11;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, dispatch_object_t *, void **))(*(void *)a1 + 8LL))( a1,  __p,  a3,  a4,  &object,  &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1865FB144( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ctu::TimerService::createOneShotTimerImpl( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t identifier, const void *a6)
{
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(identifier, 0LL);
  xpc_object_t v13 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  if (a6) {
    unint64_t v14 = _Block_copy(a6);
  }
  else {
    unint64_t v14 = 0LL;
  }
  uint64_t v18 = *(void *)(a2 + 16);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
  aBlocunint64_t k = v14;
  dispatch_object_t object = v13;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t, dispatch_object_t *, void **))(*(void *)a1 + 16LL))( a1,  __p,  a3,  a4,  identifier,  &object,  &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1865FB278( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ctu::TimerService::createPeriodicTimerImpl( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t identifier, const void *a6)
{
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(identifier, 0LL);
  xpc_object_t v13 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  if (a6) {
    unint64_t v14 = _Block_copy(a6);
  }
  else {
    unint64_t v14 = 0LL;
  }
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v18 = *(void *)(a2 + 16);
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
  aBlocunint64_t k = v14;
  dispatch_object_t object = v13;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t, dispatch_object_t *, void **))(*(void *)a1 + 24LL))( a1,  __p,  a3,  a4,  identifier,  &object,  &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1865FB3AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ctu::TimerService::scheduleAfterImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  xpc_object_t v11 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1174405120LL;
  aBlock[2] = ___ZN3ctu12TimerService17scheduleAfterImplENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_5tupleIJNS_8TimeTypeENS1_6chrono8durationIxNS1_5ratioILl1ELl1000000EEEEEEEENS1_8functionIFvvEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_12;
  uint64_t v12 = v20;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v20, a5);
  xpc_object_t v13 = _Block_copy(aBlock);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v18 = *(void *)(a2 + 16);
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
  size_t v15 = v13;
  dispatch_object_t object = v11;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, dispatch_object_t *, void **))(*(void *)a1 + 8LL))( a1,  __p,  a3,  a4,  &object,  &v15);
  if (v15) {
    _Block_release(v15);
  }
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (v21 == v20)
  {
    uint64_t v14 = 4LL;
  }

  else
  {
    if (!v21) {
      return;
    }
    uint64_t v14 = 5LL;
    uint64_t v12 = v21;
  }

  (*(void (**)(void *))(*v12 + 8 * v14))(v12);
}

void sub_1865FB55C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN3ctu12TimerService17scheduleAfterImplENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_5tupleIJNS_8TimeTypeENS1_6chrono8durationIxNS1_5ratioILl1ELl1000000EEEEEEEENS1_8functionIFvvEEE_block_invoke( uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48LL))(v1);
}

uint64_t __copy_helper_block_e8_32c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void *__destroy_helper_block_e8_32c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 56);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void ctu::TimerService::createOneShotTimerImpl( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t identifier, uint64_t a6)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(identifier, 0LL);
  xpc_object_t v13 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1174405120LL;
  aBlock[2] = ___ZN3ctu12TimerService22createOneShotTimerImplENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_5tupleIJNS_8TimeTypeENS1_6chrono8durationIxNS1_5ratioILl1ELl1000000EEEEEEEE11qos_class_tNS1_8functionIFvvEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_1_1;
  uint64_t v14 = v22;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v22, a6);
  size_t v15 = _Block_copy(aBlock);
  uint64_t v20 = *(void *)(a2 + 16);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
  int v17 = v15;
  dispatch_object_t object = v13;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t, dispatch_object_t *, void **))(*(void *)a1 + 16LL))( a1,  __p,  a3,  a4,  identifier,  &object,  &v17);
  if (v17) {
    _Block_release(v17);
  }
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (v23 == v22)
  {
    uint64_t v16 = 4LL;
  }

  else
  {
    if (!v23) {
      return;
    }
    uint64_t v16 = 5LL;
    uint64_t v14 = v23;
  }

  (*(void (**)(void *))(*v14 + 8 * v16))(v14);
}

void sub_1865FB7DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN3ctu12TimerService22createOneShotTimerImplENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_5tupleIJNS_8TimeTypeENS1_6chrono8durationIxNS1_5ratioILl1ELl1000000EEEEEEEE11qos_class_tNS1_8functionIFvvEEE_block_invoke( uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48LL))(v1);
}

void ctu::TimerService::createPeriodicTimerImpl( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t identifier, uint64_t a6)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(identifier, 0LL);
  xpc_object_t v13 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1174405120LL;
  aBlock[2] = ___ZN3ctu12TimerService23createPeriodicTimerImplENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_5tupleIJNS_8TimeTypeENS1_6chrono8durationIxNS1_5ratioILl1ELl1000000EEEEEEEE11qos_class_tNS1_8functionIFvvEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_2_0;
  uint64_t v14 = v22;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v22, a6);
  size_t v15 = _Block_copy(aBlock);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v20 = *(void *)(a2 + 16);
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
  int v17 = v15;
  dispatch_object_t object = v13;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t, dispatch_object_t *, void **))(*(void *)a1 + 24LL))( a1,  __p,  a3,  a4,  identifier,  &object,  &v17);
  if (v17) {
    _Block_release(v17);
  }
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (v23 == v22)
  {
    uint64_t v16 = 4LL;
  }

  else
  {
    if (!v23) {
      return;
    }
    uint64_t v16 = 5LL;
    uint64_t v14 = v23;
  }

  (*(void (**)(void *))(*v14 + 8 * v16))(v14);
}

void sub_1865FBA1C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN3ctu12TimerService23createPeriodicTimerImplENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_5tupleIJNS_8TimeTypeENS1_6chrono8durationIxNS1_5ratioILl1ELl1000000EEEEEEEE11qos_class_tNS1_8functionIFvvEEE_block_invoke( uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48LL))(v1);
}

void ctu::TimerService::throwIfPeriodIsZero(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    ctu::IllegalTimerParamsException::IllegalTimerParamsException( exception,  "Cannot set up a period of 0 time; that would be insane!");
  }

void sub_1865FBB20(_Unwind_Exception *a1)
{
}

void ctu::TimerService::createPeriodicTimerImpl( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, dispatch_object_s **a5, void **a6)
{
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
  xpc_object_t v6 = *a5;
  *a5 = 0LL;
  aBlocunint64_t k = *a6;
  dispatch_object_t object = v6;
  *a6 = 0LL;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, void, dispatch_object_t *, void **))(*(void *)a1 + 24LL))( a1,  __p,  a3,  a4,  0LL,  &object,  &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1865FBBC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ctu::Gestalt::create_default_global(void *a1@<X8>)
{
  uint64_t v3 = operator new(0x20uLL);
  v3[1] = 0LL;
  v3[2] = 0LL;
  *uint64_t v3 = off_189E95D38;
  v3[3] = off_189E95D88;
  *a1 = v3 + 3;
  a1[1] = v3;
}

void std::__shared_ptr_emplace<anonymous namespace'::GestaltIos>::~__shared_ptr_emplace( std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_189E95D38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::GestaltIos>::~__shared_ptr_emplace( std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_189E95D38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::GestaltIos>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 160LL))(a1 + 24);
}

const void **anonymous namespace'::GestaltIos::getBuildVersion@<X0>(std::string *a1@<X8>)
{
}

const void **anonymous namespace'::GestaltIos::getProductVersion@<X0>(std::string *a1@<X8>)
{
}

uint64_t anonymous namespace'::GestaltIos::isInternalBuild(_anonymous_namespace_::GestaltIos *this)
{
  if (_TUQueryBuildInformationOnce != -1) {
    dispatch_once(&_TUQueryBuildInformationOnce, &__block_literal_global_32);
  }
  return _TUIsInternalBuildCached;
}

uint64_t anonymous namespace'::GestaltIos::isCarrierBuild(_anonymous_namespace_::GestaltIos *this)
{
  if (_TUQueryBuildInformationOnce != -1) {
    dispatch_once(&_TUQueryBuildInformationOnce, &__block_literal_global_32);
  }
  return _TUIsCarrierBuildCached;
}

uint64_t anonymous namespace'::GestaltIos::isInternalOrCarrierBuild(_anonymous_namespace_::GestaltIos *this)
{
  else {
    return (*(uint64_t (**)(_anonymous_namespace_::GestaltIos *))(*(void *)this + 24LL))(this);
  }
}

const void **anonymous namespace'::GestaltIos::getHardwareModelName@<X0>(std::string *a1@<X8>)
{
}

const void **anonymous namespace'::GestaltIos::getProductType@<X0>(std::string *a1@<X8>)
{
}

const void **anonymous namespace'::GestaltIos::getModelNumber@<X0>(std::string *a1@<X8>)
{
}

const void **anonymous namespace'::GestaltIos::getRegionInfo@<X0>(std::string *a1@<X8>)
{
}

const void **anonymous namespace'::GestaltIos::getRegionCode@<X0>(std::string *a1@<X8>)
{
}

const void **anonymous namespace'::GestaltIos::getUniqueDeviceID@<X0>(std::string *a1@<X8>)
{
}

unint64_t anonymous namespace'::GestaltIos::hasBaseband(_anonymous_namespace_::GestaltIos *this)
{
}

unint64_t anonymous namespace'::GestaltIos::isRestoreMode(_anonymous_namespace_::GestaltIos *this)
{
}

uint64_t **anonymous namespace'::GestaltIos::getDeviceMaterial@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  int v9 = 1;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t **)a1,  1u,  &v9)
  + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = MGValueAs;
  int v9 = 1;
  int v4 = *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t **)a1,  1u,  &v9)
       + 8);
  int v8 = 2;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t **)a1,  2u,  &v8)
  + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v4;
  int v9 = 3;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t **)a1,  3u,  &v9)
  + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v5;
  int v9 = 4;
  uint64_t result = std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t **)a1,  4u,  &v9);
  *((_DWORD *)result + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v6;
  return result;
}

void sub_1865FBF18(_Unwind_Exception *a1)
{
}

const void **anonymous namespace'::GestaltIos::getNVRAMVar@<X0>(void *a1@<X8>)
{
  a1[1] = 0LL;
  uint64_t v3 = a1 + 1;
  a1[2] = 0LL;
  *a1 = a1 + 1;
  CFTypeRef cf = 0LL;
  if (off_18C4A4638)
  {
    int v4 = (const void *)off_18C4A4638(@"NVRAMDictionary", 0LL);
    int v5 = cf;
    CFTypeRef cf = v4;
    uint64_t v20 = v5;
    ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)&v20);
    int v6 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get;
    if (!cf) {
      int v6 = 0LL;
    }
    if (v6) {
      BOOL v7 = cf == 0LL;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      CFTypeID v8 = CFGetTypeID(cf);
      if (v8 == CFDictionaryGetTypeID())
      {
        uint64_t v21 = 0LL;
        uint64_t v22 = 0LL;
        context[1] = &v21;
        uint64_t v20 = &v21;
        context[0] = &v20;
        CFDictionaryApplyFunction( (CFDictionaryRef)cf,  (CFDictionaryApplierFunction)ctu::cf::_Applier_InsertMapDefault<std::string,std::string,std::insert_iterator<std::map<std::string,std::string>>>,  context);
        uint64_t v10 = (void *)*a1;
        int v9 = (void *)a1[1];
        xpc_object_t v11 = v21;
        *a1 = v20;
        a1[1] = v11;
        uint64_t v20 = v10;
        uint64_t v21 = v9;
        uint64_t v12 = a1[2];
        uint64_t v13 = v22;
        a1[2] = v22;
        uint64_t v22 = v12;
        uint64_t v14 = v11 + 2;
        if (v13) {
          size_t v15 = v14;
        }
        else {
          size_t v15 = a1;
        }
        *size_t v15 = v3;
        if (v12) {
          uint64_t v16 = v9 + 2;
        }
        else {
          uint64_t v16 = &v20;
        }
        void *v16 = &v21;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v9);
      }
    }
  }

  return ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
}

void sub_1865FC064( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

BOOL anonymous namespace'::GestaltIos::isEoS(_anonymous_namespace_::GestaltIos *this)
{
  CFTypeRef cf = 0LL;
  if (off_18C4A4638)
  {
    uint64_t v2 = (const void *)off_18C4A4638(@"EOSHalleyConfiguration", 0LL);
    CFTypeRef v3 = cf;
    CFTypeRef cf = v2;
    uint64_t v10 = v3;
    ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&v10);
    CFTypeRef v4 = cf;
  }

  else
  {
    CFTypeRef v4 = 0LL;
  }

  int v5 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get;
  if (!v4) {
    int v5 = 0LL;
  }
  int v6 = -1;
  if (v5)
  {
    LODWORD(v10) = -1;
    if (v4)
    {
      CFTypeID v7 = CFGetTypeID(v4);
      if (v7 == CFNumberGetTypeID())
      {
        ctu::cf::assign((ctu::cf *)&v10, v4, v8);
        int v6 = (int)v10;
      }

      else
      {
        int v6 = -1;
      }
    }
  }

  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v6 == 0;
}

void sub_1865FC168( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void *___ZN12_GLOBAL__N_130ensureMobileGestaltDylibLoadedEv_block_invoke()
{
  uint64_t v2 = *MEMORY[0x1895F89C0];
  strcpy(v1, "/usr/lib/libMobileGestalt.dylib");
  uint64_t result = dlopen(v1, 1);
  _MergedGlobals_4 = (uint64_t)result;
  if (result)
  {
    uint64_t result = dlsym(result, "MGCopyAnswer");
    off_18C4A4638 = (uint64_t (*)(void, void))result;
  }

  return result;
}

const void **anonymous namespace'::GestaltIos::getMGValue<std::string>(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  CFTypeID v8 = 0LL;
  if (off_18C4A4638)
  {
    CFTypeRef v3 = (__CFString *)off_18C4A4638(a2, 0LL);
    CFTypeRef v4 = v8;
    CFTypeID v8 = v3;
    int v9 = v4;
    ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)&v9);
    int v5 = v8;
  }

  else
  {
    int v5 = 0LL;
  }

  int v6 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get;
  if (!v5) {
    int v6 = 0LL;
  }
  if (v6) {
    ctu::cf::assign(a1, v5);
  }
  return ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)&v8);
}

void sub_1865FC290( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get( uint64_t a1)
{
  return *(void *)a1;
}

const void **ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef( const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

unint64_t anonymous namespace'::GestaltIos::getMGValueAsNumber<BOOL>(uint64_t a1)
{
  CFTypeRef cf = 0LL;
  if (off_18C4A4638)
  {
    uint64_t v1 = (const void *)off_18C4A4638(a1, 0LL);
    CFTypeRef v2 = cf;
    CFTypeRef cf = v1;
    uint64_t v9 = v2;
    ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&v9);
    unint64_t v3 = (unint64_t)cf;
  }

  else
  {
    unint64_t v3 = 0LL;
  }

  CFTypeRef v4 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get;
  if (!v3) {
    CFTypeRef v4 = 0LL;
  }
  if (!v4) {
    goto LABEL_10;
  }
  LOBYTE(v9) = 0;
  if (v3)
  {
    CFTypeID v5 = CFGetTypeID((CFTypeRef)v3);
    if (v5 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v9, (CFTypeRef)v3, v6);
      unint64_t v3 = (_BYTE)v9 != 0;
      goto LABEL_11;
    }

void sub_1865FC3A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

unint64_t anonymous namespace'::GestaltIos::getMGValueAsNumber<int>(uint64_t a1)
{
  CFTypeRef cf = 0LL;
  if (off_18C4A4638)
  {
    uint64_t v1 = (const void *)off_18C4A4638(a1, 0LL);
    CFTypeRef v2 = cf;
    CFTypeRef cf = v1;
    uint64_t v9 = v2;
    ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&v9);
    unint64_t v3 = (unint64_t)cf;
  }

  else
  {
    unint64_t v3 = 0LL;
  }

  CFTypeRef v4 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get;
  if (!v3) {
    CFTypeRef v4 = 0LL;
  }
  if (!v4) {
    goto LABEL_10;
  }
  LODWORD(v9) = 0;
  if (v3)
  {
    CFTypeID v5 = CFGetTypeID((CFTypeRef)v3);
    if (v5 == CFNumberGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v9, (CFTypeRef)v3, v6);
      unint64_t v3 = v9;
      goto LABEL_11;
    }

void sub_1865FC468( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t **std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  int v6 = a1 + 1;
  CFTypeID v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        CFTypeID v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        CFTypeID v5 = *v7;
        int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (v8 >= a2) {
        break;
      }
      CFTypeID v5 = v7[1];
      if (!v5)
      {
        int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    CFTypeID v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    CFTypeID v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0;
    *CFTypeID v7 = 0LL;
    v7[1] = 0LL;
    v7[2] = v9;
    CFNumberRef v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    xpc_object_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      xpc_object_t v11 = *v6;
    }

    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }

  return v7;
}

void ctu::cf::_Applier_InsertMapDefault<std::string,std::string,std::insert_iterator<std::map<std::string,std::string>>>( __CFString *cf, __CFString *a2, uint64_t *a3)
{
  *(_OWORD *)int v28 = 0u;
  __int128 v29 = 0u;
  *(_OWORD *)int v27 = 0u;
  ctu::cf::assign((std::string *)&v28[1], a2);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string,std::string,0>(&v24, (__int128 *)v27);
  uint64_t v5 = *a3;
  int v6 = (void *)a3[1];
  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
  if ((void *)(v5 + 8) == v6
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v24, (void **)v6 + 4) & 0x80) != 0)
  {
    unsigned int v8 = v6;
    if (*(void **)v5 == v6) {
      goto LABEL_18;
    }
    uint64_t v9 = (void *)*v6;
    if (*v6)
    {
      do
      {
        unsigned int v8 = v9;
        uint64_t v9 = (void *)v9[1];
      }

      while (v9);
    }

    else
    {
      uint64_t v13 = v6;
      do
      {
        unsigned int v8 = (void *)v13[2];
        BOOL v14 = *v8 == (void)v13;
        uint64_t v13 = v8;
      }

      while (v14);
    }

    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( v8 + 4,  (void **)&v24.__r_.__value_.__l.__data_) & 0x80) != 0)
    {
LABEL_18:
      if (!*v6)
      {
        unint64_t v33 = (unint64_t)v6;
LABEL_24:
        unint64_t v31 = 0xAAAAAAAAAAAAAA00LL;
        uint64_t v16 = (char *)operator new(0x50uLL);
        v30[0] = v16;
        v30[1] = v5 + 8;
        int v17 = (std::string *)(v16 + 32);
        if ((char)v24.__r_.__value_.__s.__size_ < 0)
        {
          std::string::__init_copy_ctor_external(v17, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
          uint64_t v18 = (uint64_t *)v30[0];
        }

        else
        {
          *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
          *((void *)v16 + 6) = v24.__r_.__value_.__l.__cap_;
          uint64_t v18 = (uint64_t *)v16;
        }

        *(_OWORD *)(v16 + ++*(_DWORD *)(this + 56) = *(_OWORD *)__p;
        *((void *)v16 + 9) = v26;
        __p[1] = 0LL;
        uint64_t v26 = 0LL;
        __p[0] = 0LL;
        LOBYTE(v31) = 1;
        unint64_t v19 = v33;
        uint64_t *v18 = 0LL;
        v18[1] = 0LL;
        xpc_object_t v18[2] = v19;
        void *v6 = v18;
        uint64_t v20 = **(void **)v5;
        if (v20)
        {
          *(void *)uint64_t v5 = v20;
          uint64_t v18 = (uint64_t *)*v6;
        }

        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 8), v18);
        ++*(void *)(v5 + 16);
        size_t v15 = (void *)v30[0];
        v30[0] = 0LL;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]( (uint64_t)v30,  0LL);
        goto LABEL_30;
      }

      unint64_t v33 = (unint64_t)v8;
      CFTypeID v7 = v8 + 1;
      goto LABEL_20;
    }
  }

  else
  {
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( v6 + 4,  (void **)&v24.__r_.__value_.__l.__data_) & 0x80) == 0)
    {
      unint64_t v32 = (unint64_t)v6;
      unint64_t v33 = (unint64_t)v6;
      CFTypeID v7 = &v32;
      goto LABEL_21;
    }

    CFTypeID v7 = v6 + 1;
    unint64_t v10 = v6[1];
    if (v10)
    {
      xpc_object_t v11 = (void *)v6[1];
      do
      {
        uint64_t v12 = v11;
        xpc_object_t v11 = (void *)*v11;
      }

      while (v11);
    }

    else
    {
      __int128 v23 = v6;
      do
      {
        uint64_t v12 = (void *)v23[2];
        BOOL v14 = *v12 == (void)v23;
        __int128 v23 = v12;
      }

      while (!v14);
    }

    if (v12 == (void *)(v5 + 8)) {
      goto LABEL_50;
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v24, (void **)v12 + 4) & 0x80) != 0)
    {
      unint64_t v10 = *v7;
LABEL_50:
      if (v10)
      {
        unint64_t v33 = (unint64_t)v12;
        CFTypeID v7 = v12;
      }

      else
      {
        unint64_t v33 = (unint64_t)v6;
      }

      goto LABEL_20;
    }
  }

  CFTypeID v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>( v5,  &v33,  (void **)&v24.__r_.__value_.__l.__data_);
LABEL_20:
  int v6 = (void *)*v7;
LABEL_21:
  size_t v15 = v6;
  int v6 = v7;
  if (!v15) {
    goto LABEL_24;
  }
LABEL_30:
  a3[1] = (uint64_t)v15;
  uint64_t v21 = (void *)v15[1];
  if (v21)
  {
    do
    {
      uint64_t v22 = v21;
      uint64_t v21 = (void *)*v21;
    }

    while (v21);
  }

  else
  {
    do
    {
      uint64_t v22 = (void *)v15[2];
      BOOL v14 = *v22 == (void)v15;
      size_t v15 = v22;
    }

    while (!v14);
  }

  a3[1] = (uint64_t)v22;
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
LABEL_39:
  if (SHIBYTE(v29) < 0) {
    operator delete(v28[1]);
  }
  if (SHIBYTE(v28[0]) < 0) {
    operator delete(v27[0]);
  }
}

void sub_1865FC828( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string,std::string,0>( std::string *this, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    this->__r_.__value_.__l.__cap_ = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }

  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__l.__cap_ = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }

  return this;
}

void sub_1865FC8DC(_Unwind_Exception *exception_object)
{
}

void *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>( uint64_t a1, void *a2, void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  __int128 v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        CFTypeID v7 = v4;
        unsigned int v8 = v4 + 4;
        __int128 v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      uint64_t v5 = v7 + 1;
      __int128 v4 = (void *)v7[1];
    }

    while (v4);
  }

  else
  {
    CFTypeID v7 = (void *)(a1 + 8);
  }

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  CFTypeRef v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy( void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }

void ctu::backtrace_string(ctu *this@<X0>, std::string *a2@<X8>)
{
  __int128 v6 = &v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

void sub_1865FCAB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  *(void *)(v14 - 40) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ctu::capture_backtrace(ctu *this@<X0>, uint64_t a2@<X8>)
{
  int v2 = (int)this;
  *(void *)a2 = 0LL;
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  std::vector<void *>::resize(a2, (unint64_t)this);
  int v4 = backtrace(*(void ***)a2, v2);
  std::vector<void *>::resize(a2, v4);
}

void sub_1865FCB30(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void ctu::symbolicate_frames(void *const *this@<X0>, void **a2@<X1>, std::vector<std::string> *a3@<X8>)
{
  unint64_t v3 = a2;
  uint64_t v5 = backtrace_symbols(this, (int)a2);
  a3->__end_ = 0LL;
  a3->__end_cap_.__value_ = 0LL;
  a3->__begin_ = 0LL;
  std::vector<std::string>::reserve(a3, (std::vector<std::string>::size_type)v3);
  if (v3)
  {
    std::vector<char>::pointer end = a3->__end_;
    CFTypeID v7 = v5;
    do
    {
      if (end >= a3->__end_cap_.__value_)
      {
        std::vector<char>::pointer end = (std::string *)std::vector<std::string>::__emplace_back_slow_path<char *&>((uint64_t *)a3, v7);
      }

      else
      {
        std::string::basic_string[abi:ne180100]<0>(end++, *v7);
        a3->__end_ = end;
      }

      a3->__end_ = end;
      ++v7;
      unint64_t v3 = (void **)((char *)v3 - 1);
    }

    while (v3);
  }

  if (v5) {
    operator delete(v5);
  }
}

void sub_1865FCC14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  if (v2) {
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  uint64_t value = this->__end_cap_.__value_;
  p_end_std::string::size_type cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>( (uint64_t)p_end_cap,  __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }

void sub_1865FCCF0( _Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<void *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = *(void *)a1 + 8 * a2;
    }
  }

  else
  {
    std::vector<void *>::__append((char **)a1, a2 - v2);
  }

uint64_t std::vector<std::string>::__emplace_back_slow_path<char *&>(uint64_t *a1, char **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    unint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    unint64_t v10 = 0LL;
  }
  __v.__first_ = v10;
  __v.__begin_ = v10 + v4;
  __v.__end_ = __v.__begin_;
  __v.__end_cap_.__value_ = &v10[v9];
  std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, *a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v11;
}

void sub_1865FCE24( _Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<void *>::__append(char **a1, unint64_t a2)
{
  unint64_t v5 = a1[1];
  unint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(a1[1], 8 * a2);
      v5 += 8 * a2;
    }

    a1[1] = v5;
  }

  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = v5 - *a1;
    unint64_t v8 = a2 + (v7 >> 3);
    if (v8 >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 2 > v8) {
      unint64_t v8 = v9 >> 2;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v11 = (char *)operator new(8 * v10);
    }

    else
    {
      uint64_t v11 = 0LL;
    }

    uint64_t v12 = &v11[8 * (v7 >> 3)];
    uint64_t v13 = &v11[8 * v10];
    bzero(v12, 8 * a2);
    uint64_t v14 = &v12[8 * a2];
    if (v5 != v6)
    {
      do
      {
        uint64_t v15 = *((void *)v5 - 1);
        v5 -= 8;
        *((void *)v12 - 1) = v15;
        v12 -= 8;
      }

      while (v5 != v6);
      unint64_t v5 = *a1;
    }

    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    if (v5) {
      operator delete(v5);
    }
  }

std::string *ctu::join<std::__wrap_iter<std::string *>>@<X0>( std::string *__str@<X0>, std::string *a2@<X1>, void *a3@<X2>, size_t a4@<X3>, std::string *a5@<X8>)
{
  a5->__r_.__value_.__r.__words[0] = 0LL;
  a5->__r_.__value_.__l.__size_ = 0LL;
  a5->__r_.__value_.__l.__cap_ = 0LL;
  if (__str != a2)
  {
    unint64_t v8 = __str;
    std::string __str = std::string::operator=(a5, __str);
    for (size_t i = v8 + 1; i != a2; ++i)
    {
      if (a3)
      {
        std::string::basic_string[abi:ne180100](&__p, a3, a4);
        std::string::size_type v11 = HIBYTE(v21);
        uint64_t v12 = (void **)__p;
        std::string::size_type v13 = v20;
      }

      else
      {
        std::string::size_type v13 = 0LL;
        uint64_t v12 = 0LL;
        std::string::size_type v11 = 0LL;
        std::string __p = 0LL;
        std::string::size_type v20 = 0LL;
        uint64_t v21 = 0LL;
      }

      if ((v11 & 0x80u) == 0LL) {
        p_p = &__p;
      }
      else {
        p_p = v12;
      }
      if ((v11 & 0x80u) == 0LL) {
        std::string::size_type v15 = v11;
      }
      else {
        std::string::size_type v15 = v13;
      }
      std::string::append(a5, (const std::string::value_type *)p_p, v15);
      if (SHIBYTE(v21) < 0) {
        operator delete(__p);
      }
      int size = (char)i->__r_.__value_.__s.__size_;
      if (size >= 0) {
        int v17 = (const std::string::value_type *)i;
      }
      else {
        int v17 = (const std::string::value_type *)i->__r_.__value_.__r.__words[0];
      }
      if (size >= 0) {
        std::string::size_type v18 = i->__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v18 = i->__r_.__value_.__l.__size_;
      }
      std::string __str = std::string::append(a5, v17, v18);
    }
  }

  return __str;
}

void sub_1865FD03C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void ctu::TreeRestResource::handleDroppedConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = 40 * v4;
    do
    {
      unint64_t v10 = *(void **)a3;
      size_t v11 = *(void *)(a3 + 8);
      memset(&__p, 170, sizeof(__p));
      if (v10) {
        std::string::basic_string[abi:ne180100](&__p, v10, v11);
      }
      else {
        memset(&__p, 0, sizeof(__p));
      }
      int v12 = *(char *)(v8 + 23);
      if (v12 >= 0) {
        std::string::size_type v13 = (_BYTE *)v8;
      }
      else {
        std::string::size_type v13 = *(_BYTE **)v8;
      }
      if (v12 >= 0) {
        size_t v14 = *(unsigned __int8 *)(v8 + 23);
      }
      else {
        size_t v14 = *(void *)(v8 + 8);
      }
      ctu::path_join_impl(&__p, v13, v14);
      uint64_t v15 = *(void *)(v8 + 24);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t size = __p.__r_.__value_.__s.__size_;
      }
      else {
        unint64_t size = __p.__r_.__value_.__l.__size_;
      }
      ctu::PathView::PathView(v18, (uint64_t)p_p, size);
      (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v15 + 32LL))(v15, a2, v18, a4);
      v8 += 40LL;
      v9 -= 40LL;
    }

    while (v9);
  }

void sub_1865FD178( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::TreeRestResource::handleMessage( void ***this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  size_t v6 = *((void *)a3 + 3);
  if (!v6) {
    return ctu::RestResource::handleMessage((ctu::RestResource *)this, a2, a3);
  }
  uint64_t v7 = (void *)*((void *)a3 + 2);
  if (v7)
  {
    std::string::basic_string[abi:ne180100](__p, v7, v6);
  }

  else
  {
    __p[0] = 0LL;
    __p[1] = 0LL;
    *(void *)&__int128 v14 = 0LL;
  }

  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>>::find( (uint64_t)&v15,  this + 1,  __p);
  uint64_t v9 = v15;
  if (SBYTE7(v14) < 0) {
    operator delete(__p[0]);
  }
  if ((void **)v9 == &this[1][5 * (void)this[2]]) {
    return *((void *)a3 + 3) == 1LL
  }
        && **((_BYTE **)a3 + 2) == 42
        && (__int128 v11 = *((_OWORD *)a3 + 1),
            v12[0] = *(_OWORD *)a3,
            v12[1] = v11,
            (((uint64_t (*)(void ***, ctu::RestResourceContext *, _OWORD *))(*this)[10])(this, a2, v12) & 1) != 0);
  __int128 v10 = *((_OWORD *)a3 + 1);
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  __int128 v14 = v10;
  ctu::PathView::advance((uint64_t)__p, 1LL);
  return (*(uint64_t (**)(void, ctu::RestResourceContext *, void **))(**(void **)(v9 + 24) + 16LL))( *(void *)(v9 + 24),  a2,  __p);
}

uint64_t ctu::TreeRestResource::handleRestMessage_GET(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = xpc_array_create(0LL, 0LL);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0LL)
  {
    if (MEMORY[0x186E3CD4C](v4) == MEMORY[0x1895F9220])
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }

    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0LL;
  }

  xpc_release(v4);
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(__int128 **)(a1 + 8);
    uint64_t v8 = 40 * v6;
    do
    {
      if (*((char *)v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v7, *((void *)v7 + 1));
      }

      else
      {
        __int128 v9 = *v7;
        __p.__r_.__value_.__l.__cap_ = *((void *)v7 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
      }

      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v11 = xpc_string_create((const char *)p_p);
      if (!v11) {
        xpc_object_t v11 = xpc_null_create();
      }
      xpc_array_append_value(v5, v11);
      xpc_release(v11);
      uint64_t v7 = (__int128 *)((char *)v7 + 40);
      v8 -= 40LL;
    }

    while (v8);
  }

  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)a2 + 32LL))(a2, &__p);
  xpc_release(__p.__r_.__value_.__l.__data_);
  xpc_release(v5);
  return 1LL;
}

void sub_1865FD44C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t ctu::TreeRestResource::handleMessage_DumpState( uint64_t a1, ctu::RestResourceContext *a2, uint64_t *a3)
{
  (*(void (**)(xpc_object_t *__return_ptr, ctu::RestResourceContext *))(*(void *)a2 + 16LL))(object, a2);
  int v7 = ctu::rest::asOperation(object, v6);
  xpc_release(object[0]);
  if (v7 == 2)
  {
    v25[0] = 0LL;
    v25[1] = 0LL;
    uint64_t v26 = 0LL;
    __p.__r_.__value_.__l.__cap_ = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v23 = v8;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
    *(_OWORD *)dispatch_object_t object = v8;
    ctu::ReplyDictRestResourceContextDecorator::ReplyDictRestResourceContextDecorator( (ctu::ReplyDictRestResourceContextDecorator *)object,  a2);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 8);
      uint64_t v11 = v10 + 40 * v9;
      do
      {
        std::string::operator=(&__p, (const std::string *)v10);
        *(void *)&__int128 v12 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v21[0] = v12;
        v21[1] = v12;
        if (a3[3])
        {
          uint64_t v13 = *a3;
          unint64_t v14 = a3[2] - *a3;
          unint64_t v15 = v14 - 1;
          if (v14 > 1)
          {
            unint64_t v14 = a3[1];
            if (v15 < v14) {
              unint64_t v14 = v15;
            }
          }

          else if (v14 >= a3[1])
          {
            unint64_t v14 = a3[1];
          }
        }

        else
        {
          uint64_t v13 = *a3;
          unint64_t v14 = a3[1];
        }

        v20[0] = v13;
        v20[1] = v14;
        ctu::splice_path_with_head<ctu::llvm::StringRef,std::string &,char const(&)[2]>( (uint64_t)v25,  (uint64_t)v20,  v10,  "*",  (uint64_t)v21);
        ctu::PathView::advance((uint64_t)v21, 1LL);
        (*(void (**)(void, xpc_object_t *, _OWORD *))(**(void **)(v10 + 24) + 16LL))( *(void *)(v10 + 24),  object,  v21);
        v10 += 40LL;
      }

      while (v10 != v11);
    }

    object[0] = off_189E95FB8;
    uint64_t v16 = (std::__shared_weak_count *)*((void *)&v23 + 1);
    if (*((void *)&v23 + 1))
    {
      int v17 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }

    if (SHIBYTE(v26) < 0) {
      operator delete(v25[0]);
    }
  }

  return 1LL;
}

void sub_1865FD67C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object)
{
}

uint64_t ctu::TreeRestResource::installSubResource(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  size_t v4 = a2[3];
  if (!v4) {
    return 0LL;
  }
  int v7 = (char *)a2[2];
  __int128 v8 = (char *)(*a2 + a2[1]);
  if (v8 == &v7[v4])
  {
    uint64_t v9 = (char *)(a1 + 8);
  }

  else
  {
    uint64_t v9 = (char *)(a1 + 8);
    if (&v7[v4 + 1] != v8)
    {
      if (v7)
      {
        std::string::basic_string[abi:ne180100](__p, v7, v4);
      }

      else
      {
        __p[0] = 0LL;
        __p[1] = 0LL;
        *(void *)__int128 v29 = 0LL;
      }

      boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>>::find( (uint64_t)v26,  (void ***)(a1 + 8),  __p);
      uint64_t v24 = v26[0];
      if ((v29[7] & 0x80000000) != 0) {
        operator delete(__p[0]);
      }
      if (v24 != *(void *)(a1 + 8) + 40LL * *(void *)(a1 + 16))
      {
        __int128 v25 = *((_OWORD *)a2 + 1);
        *(_OWORD *)std::string __p = *(_OWORD *)a2;
        *(_OWORD *)__int128 v29 = v25;
        ctu::PathView::advance((uint64_t)__p, 1LL);
        return (*(uint64_t (**)(void, void **, uint64_t))(**(void **)(v24 + 24) + 24LL))( *(void *)(v24 + 24),  __p,  a3);
      }

      return 0LL;
    }
  }

  *(void *)&v29[16] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v10;
  *(_OWORD *)__int128 v29 = v10;
  if (v7)
  {
    std::string::basic_string[abi:ne180100](__p, v7, v4);
  }

  else
  {
    __p[0] = 0LL;
    __p[1] = 0LL;
    *(void *)__int128 v29 = 0LL;
  }

  *(_OWORD *)&v29[8] = *(_OWORD *)a3;
  *(void *)a3 = 0LL;
  *(void *)(a3 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  v26[0] = __p;
  v26[1] = v9;
  uint64_t v11 = *(void *)(a1 + 8);
  unint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = v11 + 40 * v12;
  while (v12)
  {
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( (void *)(v11 + 40 * (v12 >> 1)),  __p) & 0x80u) == 0LL)
    {
      v12 >>= 1;
    }

    else
    {
      v11 += 40 * (v12 >> 1) + 40;
      v12 += ~(v12 >> 1);
    }
  }

  if (v11 == v13
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (void **)v11) & 0x80) != 0)
  {
    uint64_t v14 = *(void *)(a1 + 16);
    if (*(void *)(a1 + 24) == v14)
    {
      boost::container::vector<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>,boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>*,boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>>( &v27,  v9,  (__int128 *)v11,  (__int128 *)__p);
    }

    else
    {
      uint64_t v15 = *(void *)v9;
      uint64_t v16 = *(void *)v9 + 40 * v14;
      if (v16 == v11)
      {
        __int128 v19 = *(_OWORD *)__p;
        *(void *)(v11 + 16) = *(void *)v29;
        *(_OWORD *)uint64_t v11 = v19;
        __p[1] = 0LL;
        *(void *)__int128 v29 = 0LL;
        __p[0] = 0LL;
        *(_OWORD *)(v15 + 40 * v14 + memset(&context, 0, 24) = *(_OWORD *)&v29[8];
        *(void *)&v29[8] = 0LL;
        *(void *)&v29[16] = 0LL;
        ++*(void *)(a1 + 16);
      }

      else
      {
        uint64_t v17 = v16 - 40;
        *(_OWORD *)uint64_t v16 = *(_OWORD *)(v16 - 40);
        *(void *)(v16 + 16) = *(void *)(v16 - 24);
        *(void *)(v16 - 40) = 0LL;
        *(void *)(v16 - 32) = 0LL;
        *(_OWORD *)(v15 + 40 * v14 + memset(&context, 0, 24) = *(_OWORD *)(v16 - 16);
        *(void *)(v16 - memset(&context, 0, 24) = 0LL;
        *(void *)(v16 - 16) = 0LL;
        *(void *)(v16 - std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
        ++*(void *)(a1 + 16);
        if (v16 - 40 != v11)
        {
          do
          {
            uint64_t v18 = v17 - 40;
            boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>::operator=( v17,  (__int128 *)(v17 - 40));
            uint64_t v17 = v18;
          }

          while (v18 != v11);
        }

        boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>::operator=(v11, (__int128 *)__p);
      }
    }
  }

  std::string::size_type v20 = *(std::__shared_weak_count **)&v29[16];
  if (*(void *)&v29[16])
  {
    uint64_t v21 = (unint64_t *)(*(void *)&v29[16] + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  if ((v29[7] & 0x80000000) != 0) {
    operator delete(__p[0]);
  }
  return 1LL;
}

void sub_1865FD9C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void ctu::TreeRestResource::~TreeRestResource(ctu::TreeRestResource *this)
{
  *(void *)this = off_189E95EA0;
  boost::container::vector<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>,void>::~vector((uint64_t)this + 8);
}

{
  *(void *)this = off_189E95EA0;
  boost::container::vector<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>,void>::~vector((uint64_t)this + 8);
  operator delete(this);
}

uint64_t boost::container::vector<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>,void>::~vector( uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)a1 + 24LL;
    do
    {
      std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v3);
      v3 += 40LL;
      --v2;
    }

    while (v2);
  }

  if (*(void *)(a1 + 16)) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>>::find( uint64_t result, void ***a2, void **a3)
{
  size_t v4 = (void *)result;
  *(void *)uint64_t result = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6)
  {
    __int128 v8 = *a2;
    do
    {
      uint64_t result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( &v8[5 * ((unint64_t)v6 >> 1)],  a3);
      if ((result & 0x80u) == 0LL)
      {
        uint64_t v6 = (void **)((unint64_t)v6 >> 1);
      }

      else
      {
        v8 += 5 * ((unint64_t)v6 >> 1) + 5;
        uint64_t v6 = (void **)((char *)v6 + ~((unint64_t)v6 >> 1));
      }
    }

    while (v6);
    xpc_object_t v5 = *a2;
    uint64_t v9 = a2[1];
  }

  else
  {
    uint64_t v9 = 0LL;
    __int128 v8 = *a2;
  }

  void *v4 = v8;
  __int128 v10 = &v5[5 * (void)v9];
  if (v8 != v10)
  {
    uint64_t result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v8);
    if ((result & 0x80) != 0) {
      void *v4 = v10;
    }
  }

  return result;
}

uint64_t *boost::container::dtl::value_destructor<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>,boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>::~value_destructor( uint64_t *a1)
{
  uint64_t v2 = *a1;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](*a1 + 24);
  return a1;
}

void boost::container::vector<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>,boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>*,boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>>( void *a1, char *a2, __int128 *a3, __int128 *a4)
{
  unint64_t v4 = *((void *)a2 + 2);
  unint64_t v5 = *((void *)a2 + 1) + 1LL;
  if (0x333333333333333LL - v4 < v5 - v4) {
    goto LABEL_27;
  }
  unint64_t v6 = v4 >> 61;
  unint64_t v7 = 8 * v4;
  if (v6 > 4) {
    uint64_t v8 = -1LL;
  }
  else {
    uint64_t v8 = v7;
  }
  unint64_t v9 = v7 / 5;
  if (v6) {
    unint64_t v9 = v8;
  }
  if (v9 >= 0x333333333333333LL) {
    unint64_t v9 = 0x333333333333333LL;
  }
  unint64_t v10 = v5 <= v9 ? v9 : *((void *)a2 + 1) + 1LL;
  if (v10 > 0x333333333333333LL) {
LABEL_27:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  uint64_t v15 = *(char **)a2;
  uint64_t v16 = (char *)operator new(40 * v10);
  uint64_t v17 = v16;
  uint64_t v18 = *(char **)a2;
  uint64_t v19 = *(void *)a2 + 40LL * *((void *)a2 + 1);
  std::string::size_type v20 = v16;
  if (*(__int128 **)a2 != a3)
  {
    uint64_t v21 = *(__int128 **)a2;
    std::string::size_type v20 = v16;
    do
    {
      __int128 v22 = *v21;
      *((void *)v20 + 2) = *((void *)v21 + 2);
      *(_OWORD *)std::string::size_type v20 = v22;
      *((void *)v21 + 1) = 0LL;
      *((void *)v21 + 2) = 0LL;
      *(void *)uint64_t v21 = 0LL;
      *(_OWORD *)(v20 + memset(&context, 0, 24) = *(__int128 *)((char *)v21 + 24);
      *((void *)v21 + 3) = 0LL;
      *((void *)v21 + 4) = 0LL;
      v20 += 40;
      uint64_t v21 = (__int128 *)((char *)v21 + 40);
    }

    while (v21 != a3);
  }

  __int128 v23 = *a4;
  *((void *)v20 + 2) = *((void *)a4 + 2);
  *(_OWORD *)std::string::size_type v20 = v23;
  *((void *)a4 + 1) = 0LL;
  *((void *)a4 + 2) = 0LL;
  *(void *)a4 = 0LL;
  *(_OWORD *)(v20 + memset(&context, 0, 24) = *(__int128 *)((char *)a4 + 24);
  *((void *)a4 + 3) = 0LL;
  *((void *)a4 + 4) = 0LL;
  if ((__int128 *)v19 != a3)
  {
    uint64_t v24 = v20 + 64;
    __int128 v25 = a3;
    do
    {
      __int128 v26 = *v25;
      *((void *)v24 - 1) = *((void *)v25 + 2);
      *(_OWORD *)((char *)v24 - memset(&context, 0, 24) = v26;
      *((void *)v25 + 1) = 0LL;
      *((void *)v25 + 2) = 0LL;
      *(void *)__int128 v25 = 0LL;
      *uint64_t v24 = *(__int128 *)((char *)v25 + 24);
      uint64_t v24 = (_OWORD *)((char *)v24 + 40);
      *((void *)v25 + 3) = 0LL;
      *((void *)v25 + 4) = 0LL;
      __int128 v25 = (__int128 *)((char *)v25 + 40);
    }

    while (v25 != (__int128 *)v19);
  }

  if (v18)
  {
    uint64_t v27 = *((void *)a2 + 1);
    if (v27)
    {
      uint64_t v28 = (uint64_t)(v18 + 24);
      do
      {
        std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v28);
        v28 += 40LL;
        --v27;
      }

      while (v27);
    }

    operator delete(*(void **)a2);
  }

  uint64_t v29 = *((void *)a2 + 1) + 1LL;
  *(void *)a2 = v17;
  *((void *)a2 + 1) = v29;
  *((void *)a2 + 2) = v10;
  *a1 = &v17[(char *)a3 - v15];
}

uint64_t boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>::operator=( uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  __int128 v5 = *(__int128 *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0LL;
  *((void *)a2 + 4) = 0LL;
  unint64_t v6 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + memset(&context, 0, 24) = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  return a1;
}

xpc_object_t ctu::DictRestResourceContext::getRestAuthor@<X0>( ctu::DictRestResourceContext *this@<X0>, void *a2@<X8>)
{
  v3[0] = *((void *)this + 1);
  v3[1] = "a";
  return xpc::dict::object_proxy::operator xpc::object((uint64_t)v3, a2);
}

xpc_object_t ctu::DictRestResourceContext::getRestOperation@<X0>( ctu::DictRestResourceContext *this@<X0>, void *a2@<X8>)
{
  v3[0] = *((void *)this + 1);
  v3[1] = "o";
  return xpc::dict::object_proxy::operator xpc::object((uint64_t)v3, a2);
}

xpc_object_t ctu::DictRestResourceContext::getRestValue@<X0>( ctu::DictRestResourceContext *this@<X0>, void *a2@<X8>)
{
  v3[0] = *((void *)this + 1);
  v3[1] = "v";
  return xpc::dict::object_proxy::operator xpc::object((uint64_t)v3, a2);
}

uint64_t ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext( uint64_t a1, void *a2, uint64_t a3, dispatch_object_s **a4, void *a5, uint64_t a6)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  *(void *)a1 = off_189E95F20;
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = a3;
  unint64_t v10 = *a4;
  *(void *)(a1 + 16) = *a4;
  if (v10) {
    dispatch_retain(v10);
  }
  *(void *)(a1 + memset(&context, 0, 24) = *a5;
  uint64_t v11 = a5[1];
  *(void *)(a1 + 32) = v11;
  if (v11)
  {
    unint64_t v12 = (unint64_t *)(v11 + 8);
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  uint64_t v14 = (void *)(a1 + 64);
  *(void *)(a1 + 72) = *a2;
  *a2 = 0LL;
  uint64_t v15 = **(void ***)(a1 + 8);
  xpc_object_t v26 = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    xpc_object_t v26 = xpc_null_create();
  }
  uint64_t v16 = v28;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v28, a6);
  xpc_object_t object = v26;
  uint64_t v17 = a1 + 40;
  xpc_object_t v27 = xpc_null_create();
  uint64_t v18 = v31;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v31, (uint64_t)v28);
  int v34 = 0LL;
  uint64_t v19 = operator new(0x30uLL);
  xpc_object_t v20 = object;
  *uint64_t v19 = off_189E96198;
  v19[1] = v20;
  xpc_object_t object = xpc_null_create();
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v19 + 2), (uint64_t)v31);
  int v34 = v19;
  if ((_BYTE *)(a1 + 40) == v33)
  {
    uint64_t v22 = 5LL;
    goto LABEL_17;
  }

  uint64_t v21 = (_BYTE *)*v14;
  if (*v14 == v17)
  {
    uint64_t v19 = v33;
    (*(void (**)(uint64_t, _BYTE *))(*(void *)v17 + 24LL))(a1 + 40, v33);
    (*(void (**)(void))(*(void *)*v14 + 32LL))(*v14);
    void *v14 = v34;
    int v34 = v33;
    goto LABEL_16;
  }

  int v34 = (_BYTE *)*v14;
  void *v14 = v19;
  uint64_t v19 = v33;
  if (v21 == v33)
  {
LABEL_16:
    uint64_t v22 = 4LL;
    goto LABEL_17;
  }

  if (!v21) {
    goto LABEL_18;
  }
  uint64_t v22 = 5LL;
  uint64_t v19 = v21;
LABEL_17:
  (*(void (**)(void *))(*v19 + 8 * v22))(v19);
LABEL_18:
  if (v32 == v31)
  {
    uint64_t v23 = 4LL;
  }

  else
  {
    if (!v32) {
      goto LABEL_23;
    }
    uint64_t v23 = 5LL;
    uint64_t v18 = v32;
  }

  (*(void (**)(void *))(*v18 + 8 * v23))(v18);
LABEL_23:
  xpc_release(object);
  if (v29 == v28)
  {
    uint64_t v24 = 4LL;
    goto LABEL_27;
  }

  if (v29)
  {
    uint64_t v24 = 5LL;
    uint64_t v16 = v29;
LABEL_27:
    (*(void (**)(void *))(*v16 + 8 * v24))(v16);
  }

  xpc_release(v27);
  return a1;
}

void sub_1865FE124( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0::~$_0( uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  xpc_release(*(xpc_object_t *)a1);
  *(void *)a1 = 0LL;
  return a1;
}

uint64_t ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext( uint64_t a1, uint64_t a2, dispatch_object_s **a3, void *a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  unint64_t v12 = 0LL;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v13, a5);
  ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(a1, &v12, a2, a3, a4, (uint64_t)v13);
  unint64_t v9 = v14;
  if (v14 == v13)
  {
    uint64_t v10 = 4LL;
    unint64_t v9 = v13;
    goto LABEL_5;
  }

  if (v14)
  {
    uint64_t v10 = 5LL;
LABEL_5:
    (*(void (**)(void *))(*v9 + 8 * v10))(v9);
  }

  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v12);
  return a1;
}

{
  void *v9;
  uint64_t v10;
  void *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;
  uint64_t v15 = *MEMORY[0x1895F89C0];
  unint64_t v12 = 0LL;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v13, a5);
  ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(a1, &v12, a2, a3, a4, (uint64_t)v13);
  unint64_t v9 = v14;
  if (v14 == v13)
  {
    uint64_t v10 = 4LL;
    unint64_t v9 = v13;
    goto LABEL_5;
  }

  if (v14)
  {
    uint64_t v10 = 5LL;
LABEL_5:
    (*(void (**)(void *))(*v9 + 8 * v10))(v9);
  }

  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v12);
  return a1;
}

void sub_1865FE2EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&a9);
  _Unwind_Resume(a1);
}

void sub_1865FE400( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&a9);
  _Unwind_Resume(a1);
}

BOOL ctu::ReplyCallbackRestResourceContext::sendReplyWithValue( ctu::ReplyCallbackRestResourceContext *this, void **a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *((void *)this + 8);
  if (v2)
  {
    __int128 v5 = (os_log_s *)*((void *)this + 9);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *((void *)this + 3);
      uint64_t v10 = (void *)(v9 + 8);
      xpc::object::to_string(a2, &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315650;
      uint64_t v15 = v10;
      __int16 v16 = 2048;
      uint64_t v17 = v9;
      __int16 v18 = 2080;
      uint64_t v19 = p_p;
      _os_log_debug_impl(&dword_1865C1000, v5, OS_LOG_TYPE_DEBUG, "[conn %s (%p)] Sending reply: %s", buf, 0x20u);
    }

    unint64_t v6 = *a2;
    xpc_object_t object = v6;
    if (v6) {
      xpc_retain(v6);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v7 = *((void *)this + 8);
    if (!v7) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v7 + 48LL))(v7, &object);
    xpc_release(object);
  }

  return v2 != 0;
}

void sub_1865FE5A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
}

void ctu::ReplyCallbackRestResourceContext::takeAutoReplyValue( ctu::ReplyCallbackRestResourceContext *this@<X0>, void *a2@<X8>)
{
}

uint64_t ctu::ReplyCallbackRestResourceContext::getAuthorResource@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 32);
  *a2 = *(void *)(this + 24);
  a2[1] = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return this;
}

uint64_t ctu::ReplyCallbackRestResourceContext::redirect()
{
  return 0LL;
}

uint64_t ctu::ReplyCallbackRestResourceContext::sendNotify( ctu::ReplyCallbackRestResourceContext *this, const ctu::RestResourceConnection *a2, void **a3, void **a4, void **a5)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::rest::createNotify(a3, a4, a5, &object);
  uint64_t v7 = (os_log_s *)*((void *)this + 9);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = (const ctu::RestResourceConnection *)*((void *)a2 + 1);
    int v10 = *((char *)a2 + 31);
    xpc::object::to_string(&object, &__p);
    uint64_t v11 = v10 >= 0 ? (const ctu::RestResourceConnection *)((char *)a2 + 8) : v9;
    unint64_t v12 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315650;
    uint64_t v17 = v11;
    __int16 v18 = 2048;
    uint64_t v19 = a2;
    __int16 v20 = 2080;
    uint64_t v21 = v12;
    _os_log_debug_impl(&dword_1865C1000, v7, OS_LOG_TYPE_DEBUG, "Sending NOTIFY to %s (%p): %s", buf, 0x20u);
  }

  xpc_object_t v13 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v13 = xpc_null_create();
  }
  (*(void (**)(const ctu::RestResourceConnection *, xpc_object_t *))(*(void *)a2 + 16LL))(a2, &v13);
  xpc_release(v13);
  xpc_object_t v13 = 0LL;
  xpc_release(object);
  return 1LL;
}

void sub_1865FE784( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object)
{
}

uint64_t ctu::ReplyCallbackRestResourceContext::sendGet( uint64_t a1, uint64_t a2, void **a3, void **a4, void **a5, uint64_t *a6)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::rest::createGet(a3, a4, a5, &object);
  uint64_t v10 = *a6;
  uint64_t v9 = (std::__shared_weak_count *)a6[1];
  uint64_t v32 = *a6;
  unint64_t v33 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }

  xpc_object_t v13 = *(os_log_s **)(a1 + 72);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v24 = *(void *)(a2 + 8);
    int v25 = *(char *)(a2 + 31);
    xpc::object::to_string(&object, &__p);
    uint64_t v26 = v25 >= 0 ? a2 + 8 : v24;
    xpc_object_t v27 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315650;
    uint64_t v36 = v26;
    __int16 v37 = 2048;
    uint64_t v38 = a2;
    __int16 v39 = 2080;
    uint64_t v40 = v27;
    _os_log_debug_impl(&dword_1865C1000, v13, OS_LOG_TYPE_DEBUG, "Sending GET to %s (%p): %s", buf, 0x20u);
  }

  xpc_object_t v30 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v30 = xpc_null_create();
  }
  uint64_t v14 = *(void *)(a1 + 16);
  v28[0] = MEMORY[0x1895F87A8];
  v28[1] = 1174405120LL;
  _OWORD v28[2] = ___ZN3ctu32ReplyCallbackRestResourceContext7sendGetERKNS_22RestResourceConnectionERKN3xpc6objectES7_S7_RKNSt3__110shared_ptrIS5_EE_block_invoke;
  v28[3] = &__block_descriptor_tmp_14;
  v28[4] = v10;
  uint64_t v29 = v9;
  if (v9)
  {
    uint64_t v15 = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }

  (*(void (**)(uint64_t, xpc_object_t *, uint64_t, void *))(*(void *)a2 + 24LL))(a2, &v30, v14, v28);
  xpc_release(v30);
  xpc_object_t v30 = 0LL;
  uint64_t v17 = v29;
  if (v29)
  {
    __int16 v18 = (unint64_t *)&v29->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  __int16 v20 = v33;
  if (v33)
  {
    uint64_t v21 = (unint64_t *)&v33->__shared_owners_;
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  xpc_release(object);
  return 1LL;
}

void sub_1865FEA3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, xpc_object_t object)
{
}

void ___ZN3ctu32ReplyCallbackRestResourceContext7sendGetERKNS_22RestResourceConnectionERKN3xpc6objectES7_S7_RKNSt3__110shared_ptrIS5_EE_block_invoke( uint64_t a1, xpc_object_t object)
{
  uint64_t v3 = MEMORY[0x1895F9250];
  if (object)
  {
    xpc_object_t v4 = object;
    xpc_retain(object);
    xpc_object_t v11 = v4;
  }

  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v11 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v4) == v3)
  {
    xpc_retain(v4);
    goto LABEL_9;
  }

  xpc_object_t v5 = xpc_null_create();
LABEL_8:
  xpc_object_t v11 = v5;
LABEL_9:
  xpc_release(v4);
  unint64_t v6 = v11;
  if (MEMORY[0x186E3CD4C](v11) == v3)
  {
    ctu::rest::getReplyValue((ctu::rest *)&v11, v7, &v10);
    unint64_t v8 = *(void ***)(a1 + 32);
    uint64_t v9 = *v8;
    char *v8 = v10;
    uint64_t v10 = v9;
    xpc_release(v9);
    uint64_t v10 = 0LL;
    unint64_t v6 = v11;
  }

  xpc_release(v6);
}

void sub_1865FEB84( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

ctu::ReplyDictRestResourceContextDecorator *ctu::ReplyDictRestResourceContextDecorator::ReplyDictRestResourceContextDecorator( ctu::ReplyDictRestResourceContextDecorator *this, ctu::RestResourceContext *a2)
{
  *(void *)this = off_189E95FB8;
  *((void *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  uint64_t v3 = (void ***)((char *)this + 16);
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 6) = 0LL;
  (*(void (**)(__int128 *__return_ptr, ctu::RestResourceContext *))(*(void *)a2 + 40LL))(&v16, a2);
  __int128 v4 = v16;
  __int128 v16 = 0uLL;
  xpc_object_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
  *((_OWORD *)this + 1) = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  unint64_t v8 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1))
  {
    uint64_t v9 = (unint64_t *)(*((void *)&v16 + 1) + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  if (MEMORY[0x186E3CD4C](**v3) == MEMORY[0x1895F92A8])
  {
    xpc_object_t v11 = xpc_dictionary_create(0LL, 0LL, 0LL);
    if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0LL)
    {
      if (MEMORY[0x186E3CD4C](v11) == MEMORY[0x1895F9250])
      {
        xpc_retain(v11);
        xpc_object_t v12 = v11;
      }

      else
      {
        xpc_object_t v12 = xpc_null_create();
      }
    }

    else
    {
      xpc_object_t v12 = xpc_null_create();
      xpc_object_t v11 = 0LL;
    }

    xpc_release(v11);
    if (v12)
    {
      xpc_retain(v12);
      xpc_object_t v13 = v12;
    }

    else
    {
      xpc_object_t v13 = xpc_null_create();
    }

    uint64_t v14 = **v3;
    **uint64_t v3 = v13;
    xpc_release(v14);
    xpc_release(v12);
  }

  return this;
}

void sub_1865FED58(_Unwind_Exception *a1)
{
}

std::string *ctu::ReplyDictRestResourceContextDecorator::pushScope(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 32), a2);
}

BOOL ctu::ReplyDictRestResourceContextDecorator::sendReplyWithValue(uint64_t a1, void **a2)
{
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (!v4) {
      return v4 != 0;
    }
  }

  else
  {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 55);
    if (!*(_BYTE *)(a1 + 55)) {
      return v4 != 0;
    }
  }

  xpc_object_t v5 = **(void ***)(a1 + 16);
  xpc_object_t v12 = v5;
  if (v5 && MEMORY[0x186E3CD4C](v5) == MEMORY[0x1895F9250]) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v12 = xpc_null_create();
  }
  unint64_t v6 = *a2;
  xpc_object_t v10 = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t v10 = xpc_null_create();
  }
  unint64_t v7 = (void *)(a1 + 32);
  v9[0] = &v12;
  v9[1] = v7;
  xpc::dict::object_proxy::operator=((uint64_t)v9, &v10, &object);
  xpc_release(object);
  xpc_object_t object = 0LL;
  xpc_release(v10);
  xpc_object_t v10 = 0LL;
  xpc_release(v12);
  return v4 != 0;
}

void ctu::ReplyDictRestResourceContextDecorator::takeAutoReplyValue( ctu::ReplyDictRestResourceContextDecorator *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x48uLL);
  xpc_object_t v5 = (std::__shared_weak_count *)v4;
  v4[1] = 0LL;
  unint64_t v6 = v4 + 1;
  std::string v4[2] = 0LL;
  void *v4 = off_189E96148;
  uint64_t v7 = *((void *)this + 3);
  v4[3] = *((void *)this + 2);
  v4[4] = v7;
  if (v7)
  {
    unint64_t v8 = (unint64_t *)(v7 + 8);
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  xpc_object_t v10 = (std::string *)(v4 + 5);
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }

  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    v5[2].__shared_owners_ = *((void *)this + 6);
  }

  v5[2].__shared_weak_owners_ = (uint64_t)xpc_null_create();
  *a2 = (char *)v5 + 64;
  a2[1] = v5;
  do
    unint64_t v11 = __ldxr(v6);
  while (__stxr(v11 + 1, v6));
  do
    unint64_t v12 = __ldaxr(v6);
  while (__stlxr(v12 - 1, v6));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

void sub_1865FEFA0(_Unwind_Exception *a1)
{
}

uint64_t ctu::ReplyDictRestResourceContextDecorator::getAuthorResource( ctu::ReplyDictRestResourceContextDecorator *this)
{
  return (***((uint64_t (****)(void))this + 1))(*((void *)this + 1));
}

uint64_t ctu::ReplyDictRestResourceContextDecorator::getRestAuthor( ctu::ReplyDictRestResourceContextDecorator *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 8LL))(*((void *)this + 1));
}

uint64_t ctu::ReplyDictRestResourceContextDecorator::getRestOperation( ctu::ReplyDictRestResourceContextDecorator *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 16LL))(*((void *)this + 1));
}

uint64_t ctu::ReplyDictRestResourceContextDecorator::getRestValue( ctu::ReplyDictRestResourceContextDecorator *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24LL))(*((void *)this + 1));
}

uint64_t ctu::ReplyDictRestResourceContextDecorator::redirect(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 64LL))(*(void *)(a1 + 8));
}

uint64_t ctu::ReplyDictRestResourceContextDecorator::sendNotify(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48LL))(*(void *)(a1 + 8));
}

uint64_t ctu::ReplyDictRestResourceContextDecorator::sendGet(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56LL))(*(void *)(a1 + 8));
}

void ctu::ReplyCallbackRestResourceContext::~ReplyCallbackRestResourceContext(void **this)
{
  uint64_t v2 = (ctu::ReplyCallbackRestResourceContext *)this[8];
  if (v2 == (ctu::ReplyCallbackRestResourceContext *)(this + 5))
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = (ctu::ReplyCallbackRestResourceContext *)(this + 5);
  }

  else
  {
    if (!v2) {
      goto LABEL_6;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*(void *)v2 + 8 * v3))();
LABEL_6:
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
  uint64_t v4 = (dispatch_object_s *)this[2];
  if (v4) {
    dispatch_release(v4);
  }
}

{
  ctu::ReplyCallbackRestResourceContext *v2;
  uint64_t v3;
  dispatch_object_s *v4;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 9);
  uint64_t v2 = (ctu::ReplyCallbackRestResourceContext *)this[8];
  if (v2 == (ctu::ReplyCallbackRestResourceContext *)(this + 5))
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = (ctu::ReplyCallbackRestResourceContext *)(this + 5);
  }

  else
  {
    if (!v2) {
      goto LABEL_6;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*(void *)v2 + 8 * v3))();
LABEL_6:
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
  uint64_t v4 = (dispatch_object_s *)this[2];
  if (v4) {
    dispatch_release(v4);
  }
  operator delete(this);
}

void **ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef( void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    os_release(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<anonymous namespace'::createAutoReplyValueInsideOuterReply(std::shared_ptr<xpc::object> const&,std::string const&)::AutoReplier,std::allocator<anonymous namespace'::createAutoReplyValueInsideOuterReply(std::shared_ptr<xpc::object> const&,std::string const&)::AutoReplier>>::~__shared_ptr_emplace( std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_189E96148;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::createAutoReplyValueInsideOuterReply(std::shared_ptr<xpc::object> const&,std::string const&)::AutoReplier,std::allocator<anonymous namespace'::createAutoReplyValueInsideOuterReply(std::shared_ptr<xpc::object> const&,std::string const&)::AutoReplier>>::~__shared_ptr_emplace( std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_189E96148;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::createAutoReplyValueInsideOuterReply(std::shared_ptr<xpc::object> const&,std::string const&)::AutoReplier,std::allocator<anonymous namespace'::createAutoReplyValueInsideOuterReply(std::shared_ptr<xpc::object> const&,std::string const&)::AutoReplier>>::__on_zero_shared( uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  xpc_object_t v3 = **(xpc_object_t **)(a1 + 24);
  xpc_object_t v11 = v3;
  uint64_t v4 = MEMORY[0x1895F9250];
  if (v3 && MEMORY[0x186E3CD4C](v3) == v4)
  {
    xpc_retain(v3);
  }

  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v11 = v3;
  }

  if (MEMORY[0x186E3CD4C](v3) == v4)
  {
    xpc_object_t v5 = *(void **)(a1 + 64);
    xpc_object_t v9 = v5;
    if (v5) {
      xpc_retain(v5);
    }
    else {
      xpc_object_t v9 = xpc_null_create();
    }
    unint64_t v6 = (void *)(a1 + 40);
    v8[0] = &v11;
    v8[1] = v6;
    xpc::dict::object_proxy::operator=((uint64_t)v8, &v9, &object);
    xpc_release(object);
    xpc_object_t object = 0LL;
    xpc_release(v9);
    xpc_object_t v9 = 0LL;
    xpc_object_t v3 = v11;
  }

  xpc_release(v3);
  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(void *)(a1 + 64) = 0LL;
  return std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v2);
}

uint64_t std::__function::__func<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::~__func( uint64_t a1)
{
  *(void *)a1 = off_189E96198;
  uint64_t v2 = (void *)(a1 + 16);
  xpc_object_t v3 = *(void **)(a1 + 40);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    xpc_object_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  return a1;
}

void std::__function::__func<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::~__func( char *a1)
{
  *(void *)a1 = off_189E96198;
  uint64_t v2 = a1 + 16;
  xpc_object_t v3 = (void *)*((void *)a1 + 5);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    xpc_object_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  xpc_release(*((xpc_object_t *)a1 + 1));
  operator delete(a1);
}

void **std::__function::__func<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::__clone( uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  uint64_t v2 = (void **)operator new(0x30uLL);
  *uint64_t v2 = off_189E96198;
  std::__compressed_pair_elem<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0 const&,0ul>( v2 + 1,  v1);
  return v2;
}

void sub_1865FF400(_Unwind_Exception *a1)
{
}

void **std::__function::__func<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::__clone( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189E96198;
  return std::__compressed_pair_elem<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0 const&,0ul>( (void **)(a2 + 8),  (void **)(a1 + 8));
}

void std::__function::__func<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::destroy( uint64_t a1)
{
}

void std::__function::__func<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::destroy_deallocate( void *a1)
{
}

void std::__function::__func<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::operator()( uint64_t a1, void **a2)
{
  xpc_object_t v3 = *a2;
  unint64_t v6 = *a2;
  *a2 = xpc_null_create();
  ctu::rest::createReplyFromRequestWithValue((xpc_object_t *)(a1 + 8), (const xpc::dict *)&v6, &object);
  xpc_object_t v4 = object;
  xpc_object_t v8 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v8 = xpc_null_create();
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v5 + 48LL))(v5, &v8);
  xpc_release(v8);
  xpc_object_t v8 = 0LL;
  xpc_release(v4);
  xpc_release(v3);
}

void sub_1865FF520( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

uint64_t std::__function::__func<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::target_type()
{
}

void **std::__compressed_pair_elem<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0 const&,0ul>( void **a1, void **a2)
{
  xpc_object_t v4 = *a2;
  *a1 = *a2;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    *a1 = xpc_null_create();
  }
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  return a1;
}

void sub_1865FF5F4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  _Unwind_Resume(a1);
}

void std::__function::__alloc_func<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::destroy[abi:ne180100]( uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 8);
  xpc_object_t v3 = *(void **)(a1 + 32);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    xpc_object_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  xpc_release(*(xpc_object_t *)a1);
  *(void *)a1 = 0LL;
}

uint64_t _TelephonyCapabilitiesRadioPreferencesOverrideProfile()
{
  return 0LL;
}

uint64_t ctu::TelephonyUtilRadioFusingInferFusingStateFromSerialNumber()
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  return 0LL;
}

uint64_t ctu::TelephonyUtilRadioFusingInferFusingStateFromSerialNumber(ctu *this, const unsigned int *a2)
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  return 0LL;
}

uint64_t ctu::TelephonyUtilRadioFusingInferFusingStateFromCertID(ctu *this, const unsigned int *a2)
{
  uint64_t result = TelephonyCapabilitiesRadioFusingCertIDFromPublicKeyHash();
  if ((_DWORD)result)
  {
    int v4 = *(_DWORD *)this;
    if (v4)
    {
      else {
        return 3LL;
      }
    }

    else
    {
      return 1LL;
    }
  }

  return result;
}

void ctu::base64::encode(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  xpc_object_t v3 = (std::string::size_type *)(a2 + 8);
  *(void *)a2 = 0LL;
  *(void *)(a2 + 16) = 0LL;
  if (*a1 != a1[1])
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
    ctu::ns::AutoPool::AutoPool((ctu::ns::AutoPool *)&v9);
    uint64_t v5 = (void *)[MEMORY[0x189603F48] dataWithBytesNoCopy:*a1 length:a1[1] - *a1 freeWhenDone:0];
    if (v5)
    {
      unint64_t v6 = (const __CFString *)[v5 base64EncodedStringWithOptions:0];
      memset(&v10, 0, sizeof(v10));
      ctu::cf::assign(&v10, v6);
      std::string::size_type v7 = v10.__r_.__value_.__r.__words[0];
      *xpc_object_t v3 = v10.__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v3 + 7) = *(std::string::size_type *)((char *)&v10.__r_.__value_.__r.__words[1]
                                                                              + 7);
      unsigned __int8 size = v10.__r_.__value_.__s.__size_;
      *(void *)a2 = v7;
      *(_BYTE *)(a2 + 23) = size;
    }

    ctu::ns::AutoPool::~AutoPool((void **)&v9);
  }

void sub_1865FF808( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  ctu::ns::AutoPool::~AutoPool((void **)&a9);
  _Unwind_Resume(a1);
}

void ctu::base64::decode(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  uint64_t v3 = *((unsigned __int8 *)a1 + 23);
  if ((v3 & 0x80u) != 0LL) {
    uint64_t v3 = a1[1];
  }
  if (v3)
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
    ctu::ns::AutoPool::AutoPool((ctu::ns::AutoPool *)&v14);
    id v5 = objc_alloc(NSString);
    int v6 = *((char *)a1 + 23);
    if (v6 >= 0) {
      std::string::size_type v7 = a1;
    }
    else {
      std::string::size_type v7 = (uint64_t *)*a1;
    }
    if (v6 >= 0) {
      uint64_t v8 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      uint64_t v8 = a1[1];
    }
    id v9 = (id)[v5 initWithBytesNoCopy:v7 length:v8 encoding:4 freeWhenDone:0];
    if (v9)
    {
      id v10 = (id)[objc_alloc(MEMORY[0x189603F48]) initWithBase64EncodedString:v9 options:1];
      xpc_object_t v11 = v10;
      if (v10)
      {
        size_t v12 = [v10 length];
        if (v12)
        {
          std::vector<unsigned char>::__append(a2, v12);
          unint64_t v13 = *a2;
        }

        else
        {
          unint64_t v13 = 0LL;
        }

        objc_msgSend(v11, "getBytes:length:", v13, objc_msgSend(v11, "length"));
      }
    }

    ctu::ns::AutoPool::~AutoPool((void **)&v14);
  }

void sub_1865FF93C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  int v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

void ctu::DispatchTimer::~DispatchTimer(ctu::DispatchTimer *this)
{
  *(void *)this = off_189E96218;
  ctu::DispatchTimer::cancel(this);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (dispatch_object_s *)*((void *)this + 1);
  if (v3) {
    dispatch_release(v3);
  }
}

{
  void *v1;
  ctu::DispatchTimer::~DispatchTimer(this);
  operator delete(v1);
}

void ctu::DispatchTimer::cancel(ctu::DispatchTimer *this)
{
  uint64_t v2 = (dispatch_source_s *)*((void *)this + 1);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = (dispatch_object_s *)*((void *)this + 1);
    *((void *)this + 1) = 0LL;
    if (v3) {
      dispatch_release(v3);
    }
  }

BOOL ctu::DispatchTimer::isExpired(ctu::DispatchTimer *this)
{
  return !*((void *)this + 1) || (uint64_t v1 = *((void *)this + 3)) == 0 || *(void *)(v1 + 8) == -1LL;
}

uint64_t ctu::DispatchTimerService::create@<X0>(__int128 *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  *a2 = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  int v4 = (std::__shared_weak_count_vtbl *)operator new(0x30uLL);
  __int128 v18 = *a1;
  *(void *)a1 = 0LL;
  *((void *)a1 + 1) = 0LL;
  v4->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_189E95CC8;
  ctu::SharedLoggable<ctu::DispatchTimerService,ctu::OsLogLogger>::SharedLoggable<char const(&)[6]>(&v4->~__shared_weak_count_0);
  v4->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_189E96248;
  *a2 = v4;
  a2[1] = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  id v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)off_189E963C8;
  v5->__shared_weak_owners_ = 0LL;
  v5[1].__vftable = v4;
  a2[1] = (std::__shared_weak_count_vtbl *)v5;
  on_zero_shared = (std::__shared_weak_count *)v4->__on_zero_shared;
  if (on_zero_shared)
  {
    if (on_zero_shared->__shared_owners_ != -1) {
      goto LABEL_14;
    }
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    v4->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    v4->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v5;
    std::__shared_weak_count::__release_weak(on_zero_shared);
  }

  else
  {
    do
      unint64_t v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    size_t v12 = (unint64_t *)&v5->__shared_weak_owners_;
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v4->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    v4->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v5;
  }

  do
    unint64_t v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

void sub_1865FFBA8(_Unwind_Exception *a1)
{
}

void *ctu::DispatchTimerService::DispatchTimerService(void *a1)
{
  *a1 = &unk_189E95CC8;
  ctu::SharedLoggable<ctu::DispatchTimerService,ctu::OsLogLogger>::SharedLoggable<char const(&)[6]>(a1 + 1);
  *a1 = &off_189E96248;
  return a1;
}

{
  *a1 = &unk_189E95CC8;
  ctu::SharedLoggable<ctu::DispatchTimerService,ctu::OsLogLogger>::SharedLoggable<char const(&)[6]>(a1 + 1);
  *a1 = &off_189E96248;
  return a1;
}

ctu::DispatchTimerService *ctu::DispatchTimerService::DispatchTimerService(ctu::DispatchTimerService *this)
{
  *(void *)this = &unk_189E95CC8;
  ctu::SharedLoggable<ctu::DispatchTimerService,ctu::OsLogLogger>::SharedLoggable<char const(&)[6]>((void *)this + 1);
  *(void *)this = &off_189E96248;
  return this;
}

{
  *(void *)this = &unk_189E95CC8;
  ctu::SharedLoggable<ctu::DispatchTimerService,ctu::OsLogLogger>::SharedLoggable<char const(&)[6]>((void *)this + 1);
  *(void *)this = &off_189E96248;
  return this;
}

void *ctu::SharedLoggable<ctu::DispatchTimerService,ctu::OsLogLogger>::SharedLoggable<char const(&)[6]>( void *a1)
{
  uint64_t v2 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_UTILITY, 0);
  dispatch_queue_t v3 = dispatch_queue_create("DispatchTimerService", v2);
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = v3;
  if (v3)
  {
    int v4 = v3;
    dispatch_retain(v3);
    a1[3] = 0LL;
    dispatch_release(v4);
  }

  else
  {
    a1[3] = 0LL;
  }

  a1[4] = os_log_create("com.apple.telephony", "timer");
  return a1;
}

void ctu::DispatchTimerService::~DispatchTimerService(void **this)
{
  uint64_t v1 = this + 1;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 5);
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable(v1);
}

{
  void *v1;
  uint64_t v1 = this + 1;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 5);
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable(v1);
}

{
  void *v2;
  uint64_t v2 = this + 1;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 5);
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable(v2);
  operator delete(this);
}

dispatch_time_t ctu::DispatchTimerService::makeDispatchTime(uint64_t a1, char *a2)
{
  unint64_t v2 = *a2;
  if (v2 <= 2) {
    return dispatch_time(qword_186634C88[v2], 1000LL * *((void *)a2 + 1));
  }
  return result;
}

uint64_t ctu::DispatchTimerService::dispatchClockID(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  uint64_t v3 = 1LL;
  if (v2 == 2) {
    uint64_t v3 = 2LL;
  }
  if (v2 == 1) {
    return 3LL;
  }
  else {
    return v3;
  }
}

void ctu::DispatchTimerService::scheduleAfterImpl( uint64_t a1, uint64_t a2, char a3, uint64_t a4, dispatch_queue_t *a5, dispatch_block_t *a6)
{
  dispatch_time_t v8 = dispatch_time(qword_186634C88[a3], 1000 * a4);
  dispatch_after(v8, *a5, *a6);
}

void ctu::DispatchTimerService::createDispatchTimer( dispatch_queue_t queue@<X1>, char *a2@<X2>, uint64_t a3@<X3>, int a4@<W4>, void *a5@<X5>, void *a6@<X8>)
{
  int v11 = *a2;
  uint64_t v12 = 1LL;
  if (v11 == 2) {
    uint64_t v12 = 2LL;
  }
  if (v11 == 1) {
    uintptr_t v13 = 3LL;
  }
  else {
    uintptr_t v13 = v12;
  }
  dispatch_source_t v14 = dispatch_source_create(MEMORY[0x1895F8B78], v13, 0LL, queue);
  uint64_t v15 = (std::__shared_weak_count_vtbl *)operator new(1uLL);
  LOBYTE(v15->~__shared_weak_count) = 0;
  uint64_t v38 = v15;
  unint64_t v16 = (std::__shared_weak_count *)operator new(0x20uLL);
  v16->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  v16->__vftable = (std::__shared_weak_count_vtbl *)off_189E96428;
  v16->__shared_weak_owners_ = 0LL;
  v16[1].__vftable = v15;
  __int16 v39 = v16;
  uint64_t v18 = MEMORY[0x1895F87A8];
  if (a3 == -1LL)
  {
    handler[0] = MEMORY[0x1895F87A8];
    handler[1] = 1174405120LL;
    handler[2] = ___ZNK3ctu20DispatchTimerService19createDispatchTimerEP16dispatch_queue_sRKNSt3__15tupleIJNS_8TimeTypeENS3_6chrono8durationIxNS3_5ratioILl1ELl1000000EEEEEEEEy11qos_class_tU13block_pointerFvvE_block_invoke;
    handler[3] = &__block_descriptor_tmp_15;
    handler[4] = a5;
    dispatch_object_t object = v14;
    if (v14) {
      dispatch_retain(v14);
    }
    dispatch_source_set_event_handler(v14, handler);
    if (object) {
      dispatch_release(object);
    }
  }

  else
  {
    dispatch_source_set_event_handler(v14, a5);
  }

  v34[0] = v18;
  v34[1] = 1174405120LL;
  v34[2] = ___ZNK3ctu20DispatchTimerService19createDispatchTimerEP16dispatch_queue_sRKNSt3__15tupleIJNS_8TimeTypeENS3_6chrono8durationIxNS3_5ratioILl1ELl1000000EEEEEEEEy11qos_class_tU13block_pointerFvvE_block_invoke_3;
  uint64_t v34[3] = &__block_descriptor_tmp_4;
  v34[4] = v15;
  uint64_t v35 = v16;
  do
    unint64_t v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
  dispatch_source_set_cancel_handler(v14, v34);
  dispatch_time_t DispatchTime = ctu::DispatchTimerService::makeDispatchTime(v20, a2);
  dispatch_source_set_timer(v14, DispatchTime, a3, 5uLL);
  if (a4) {
    dispatch_set_qos_class();
  }
  unint64_t v22 = operator new(0x20uLL);
  uint64_t v23 = v22;
  p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
  do
    unint64_t v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  *unint64_t v22 = off_189E96218;
  v22[1] = v14;
  void v22[2] = v15;
  _OWORD v22[3] = v16;
  do
    unint64_t v26 = __ldxr(p_shared_weak_owners);
  while (__stxr(v26 + 1, p_shared_weak_owners));
  dispatch_activate(v14);
  std::__shared_weak_count::__release_weak(v16);
  xpc_object_t v27 = v35;
  *a6 = v23;
  if (v27)
  {
    uint64_t v28 = (unint64_t *)&v27->__shared_owners_;
    do
      unint64_t v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }

  xpc_object_t v30 = v39;
  if (v39)
  {
    unint64_t v31 = (unint64_t *)&v39->__shared_owners_;
    do
      unint64_t v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

void sub_186600110(_Unwind_Exception *a1)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

void ___ZNK3ctu20DispatchTimerService19createDispatchTimerEP16dispatch_queue_sRKNSt3__15tupleIJNS_8TimeTypeENS3_6chrono8durationIxNS3_5ratioILl1ELl1000000EEEEEEEEy11qos_class_tU13block_pointerFvvE_block_invoke( uint64_t a1)
{
}

void __copy_helper_block_e8_32b40c22_ZTSN8dispatch6sourceE(uint64_t a1, uint64_t a2)
{
  int v4 = *(dispatch_object_s **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4) {
    dispatch_retain(v4);
  }
}

void __destroy_helper_block_e8_32b40c22_ZTSN8dispatch6sourceE(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 40);
  if (v2) {
    dispatch_release(v2);
  }
  _Block_object_dispose(*(const void **)(a1 + 32), 7);
}

uint64_t __copy_helper_block_e8_32c27_ZTSNSt3__110shared_ptrIvEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

uint64_t __destroy_helper_block_e8_32c27_ZTSNSt3__110shared_ptrIvEE(uint64_t a1)
{
  return std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](a1 + 32);
}

void ctu::DispatchTimerService::createOneShotTimerImpl( uint64_t a1@<X2>, uint64_t a2@<X3>, int a3@<W4>, dispatch_queue_t *a4@<X5>, void **a5@<X6>, void *a6@<X8>)
{
  v6[0] = a1;
  v6[1] = a2;
  ctu::DispatchTimerService::createDispatchTimer(*a4, (char *)v6, 0xFFFFFFFFFFFFFFFFLL, a3, *a5, a6);
}

void ctu::DispatchTimerService::createPeriodicTimerImpl( uint64_t a1@<X2>, uint64_t a2@<X3>, int a3@<W4>, dispatch_queue_t *a4@<X5>, void **a5@<X6>, void *a6@<X8>)
{
  v6[0] = a1;
  v6[1] = a2;
  ctu::DispatchTimerService::createDispatchTimer(*a4, (char *)v6, 1000 * a2, a3, *a5, a6);
}

void std::__shared_ptr_pointer<ctu::DispatchTimerService *,std::shared_ptr<ctu::DispatchTimerService> ctu::SharedSynchronizable<ctu::DispatchTimerService>::make_shared_ptr<ctu::DispatchTimerService>(ctu::DispatchTimerService*)::{lambda(ctu::DispatchTimerService *)#1},std::allocator<ctu::DispatchTimerService>>::~__shared_ptr_pointer( std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_pointer<ctu::DispatchTimerService *,std::shared_ptr<ctu::DispatchTimerService> ctu::SharedSynchronizable<ctu::DispatchTimerService>::make_shared_ptr<ctu::DispatchTimerService>(ctu::DispatchTimerService*)::{lambda(ctu::DispatchTimerService *)#1},std::allocator<ctu::DispatchTimerService>>::__on_zero_shared( uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ctu::DispatchTimerService *,std::shared_ptr<ctu::DispatchTimerService> ctu::SharedSynchronizable<ctu::DispatchTimerService>::make_shared_ptr<ctu::DispatchTimerService>(ctu::DispatchTimerService*)::{lambda(ctu::DispatchTimerService *)#1},std::allocator<ctu::DispatchTimerService>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t std::shared_ptr<ctu::DispatchTimerService> ctu::SharedSynchronizable<ctu::DispatchTimerService>::make_shared_ptr<ctu::DispatchTimerService>(ctu::DispatchTimerService*)::{lambda(ctu::DispatchTimerService*)#1}::operator() const(ctu::DispatchTimerService*)::{lambda(void *)#1}::__invoke( uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 72LL))(result);
  }
  return result;
}

void std::__shared_ptr_pointer<BOOL *,std::shared_ptr<void>::__shared_ptr_default_delete<void,BOOL>,std::allocator<BOOL>>::~__shared_ptr_pointer( std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_pointer<BOOL *,std::shared_ptr<void>::__shared_ptr_default_delete<void,BOOL>,std::allocator<BOOL>>::__on_zero_shared( uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<BOOL *,std::shared_ptr<void>::__shared_ptr_default_delete<void,BOOL>,std::allocator<BOOL>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void *ctu::Http::HttpSession::create@<X0>(ctu::Http::HttpSession_impl *a1@<X8>)
{
  return ctu::Http::HttpSession_impl::createSession(a1);
}

void *ctu::Http::HttpSession_impl::createSession(ctu::Http::HttpSession_impl *this)
{
  uint64_t v2 = (char *)operator new(0xB0uLL);
  *(void *)uint64_t v2 = off_189E964C0;
  *((void *)v2 + 13) = 0LL;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0u;
  *(_OWORD *)(v2 + memset(&context, 0, 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + ++*(_DWORD *)(this + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 81) = 0u;
  *((void *)v2 + 14) = 0LL;
  *((void *)v2 + 15) = 0LL;
  *(void *)(v2 + 125) = 0LL;
  *(_OWORD *)(v2 + 152) = 0u;
  *(void *)(v2 + 165) = 0LL;
  uint64_t v3 = (void *)objc_opt_new();
  *((void *)v2 + 2) = v3;
  [v3 setMaxConcurrentOperationCount:1];
  dispatch_time_t result = operator new(0x20uLL);
  void *result = off_189E96818;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = v2;
  *(void *)this = v2;
  *((void *)this + 1) = result;
  return result;
}

void sub_186600438(void *a1)
{
}

void sub_18660044C(_Unwind_Exception *a1)
{
}

void ctu::Http::HttpSession_impl::Deleter::operator()(uint64_t a1)
{
  if (a1)
  {
    v1[0] = MEMORY[0x1895F87A8];
    v1[1] = 3221225472LL;
    v1[2] = ___ZN3ctu4Http16HttpSession_impl7DeleterclEPS1__block_invoke;
    v1[3] = &__block_descriptor_40_e5_v8__0l;
    v1[4] = a1;
    ctu::Http::HttpSession_impl::addOperation(a1, (uint64_t)v1);
  }

void ctu::Http::HttpSession_impl::addOperation(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  ctu::ns::AutoPool::AutoPool((ctu::ns::AutoPool *)&v6);
  uint64_t v4 = [MEMORY[0x1896077F0] blockOperationWithBlock:a2];
  id v5 = *(void **)(a1 + 16);
  if (v5) {
    [v5 addOperation:v4];
  }
  ctu::ns::AutoPool::~AutoPool((void **)&v6);
}

void sub_186600574(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t ___ZN3ctu4Http16HttpSession_impl7DeleterclEPS1__block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 136LL))(result);
  }
  return result;
}

void ctu::Http::HttpSession_impl::~HttpSession_impl(ctu::Http::HttpSession_impl *this)
{
  *(void *)this = off_189E964C0;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    [v2 invalidateAndCancel];
    uint64_t v2 = (void *)*((void *)this + 1);
  }

  *((void *)this + 1) = 0LL;
  *((void *)this + 3) = 0LL;

  *((void *)this + 2) = 0LL;
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)this + 20);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)this + 11);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)this + 4);
}

{
  void *v1;
  ctu::Http::HttpSession_impl::~HttpSession_impl(this);
  operator delete(v1);
}

uint64_t ctu::Http::HttpSession_impl::setSSLProtocolLimitation(uint64_t this, SSLProtocol a2, SSLProtocol a3)
{
  *(_DWORD *)(this + 1memset(&context, 0, 24) = a2;
  *(_DWORD *)(this + 12std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = a3;
  return this;
}

uint64_t ctu::Http::HttpSession_impl::setSharedConfiguration(uint64_t this, char a2)
{
  *(_BYTE *)(this + 132) = a2;
  return this;
}

std::string *ctu::Http::HttpSession_impl::setBackgroundConfiguration(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 136), a2);
}

void ctu::Http::HttpSession_impl::setBackgroundConfigurationWithUniqueIdentifier( ctu::Http::HttpSession_impl *this)
{
  uint64_t v2 = (void *)objc_opt_new();
  std::string::__assign_external( (std::string *)((char *)this + 136),  (const std::string::value_type *)objc_msgSend((id)objc_msgSend(v2, "UUIDString"), "UTF8String"));
}

const void **ctu::Http::HttpSession_impl::setProxyServer(const void **result, uint64_t a2, unsigned int a3)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (a3)
  {
    uint64_t v4 = result;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::size_type v5 = *(void *)(a2 + 8);
      if (!v5) {
        return result;
      }
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, v5);
    }

    else
    {
      if (!*(_BYTE *)(a2 + 23)) {
        return result;
      }
      std::string __p = *(std::string *)a2;
    }

    else {
      std::string v20 = __p;
    }
    CFDictionaryRef v18 = 0LL;
    else {
      std::string valuePtr = v20;
    }
    unint64_t v6 = (const __CFAllocator *)*MEMORY[0x189604DB0];
    if ((valuePtr.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_std::string valuePtr = &valuePtr;
    }
    else {
      p_std::string valuePtr = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
    }
    if ((valuePtr.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      CFIndex size = valuePtr.__r_.__value_.__s.__size_;
    }
    else {
      CFIndex size = valuePtr.__r_.__value_.__l.__size_;
    }
    CFStringRef v9 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x189604DB0], (const UInt8 *)p_valuePtr, size, 0x8000100u, 0);
    if (v9)
    {
      CFDictionaryRef v10 = v18;
      CFDictionaryRef v18 = (CFDictionaryRef)v9;
      std::string::size_type v19 = (std::string::size_type)v10;
      ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v19);
    }

    std::string::size_type v17 = (std::string::size_type)v18;
    CFDictionaryRef v18 = 0LL;
    ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v18);
    v20.__r_.__value_.__r.__words[0] = 0LL;
    valuePtr.__r_.__value_.__r.__words[0] = a3;
    CFNumberRef v11 = CFNumberCreate(v6, kCFNumberLongLongType, &valuePtr);
    if (v11)
    {
      std::string::size_type v12 = v20.__r_.__value_.__r.__words[0];
      v20.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
      valuePtr.__r_.__value_.__r.__words[0] = v12;
      ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&valuePtr.__r_.__value_.__l.__data_);
    }

    std::string::size_type v13 = v20.__r_.__value_.__r.__words[0];
    std::string::size_type v19 = v20.__r_.__value_.__r.__words[0];
    v20.__r_.__value_.__r.__words[0] = 0LL;
    ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v20.__r_.__value_.__l.__data_);
    std::string::size_type v14 = *MEMORY[0x189602130];
    valuePtr.__r_.__value_.__r.__words[0] = *MEMORY[0x189602128];
    valuePtr.__r_.__value_.__l.__size_ = v14;
    uint64_t v15 = *MEMORY[0x189602120];
    valuePtr.__r_.__value_.__l.__cap_ = *MEMORY[0x189602118];
    uint64_t v23 = v15;
    v20.__r_.__value_.__r.__words[0] = v17;
    v20.__r_.__value_.__l.__size_ = v13;
    v20.__r_.__value_.__l.__cap_ = v17;
    std::string::size_type v21 = v13;
    CFDictionaryRef v18 = CFDictionaryCreate( v6,  (const void **)&valuePtr.__r_.__value_.__l.__data_,  (const void **)&v20.__r_.__value_.__l.__data_,  4LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::operator=( v4 + 4,  (CFTypeRef *)&v18);
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v18);
    ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v19);
    return ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v17);
  }

  return result;
}

void sub_186600910( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, const void *a17, __int16 a18, char a19, char a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get( uint64_t a1)
{
  return *(void *)a1;
}

const void **ctu::Http::HttpSession_impl::setProxySettings(uint64_t a1, CFTypeRef *a2)
{
  return ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::operator=( (const void **)(a1 + 32),  a2);
}

const void **ctu::Http::HttpSession_impl::setTLSPolicyName(const void **this, const __CFString *a2)
{
  if (a2) {
    return ctu::cf::CFSharedRef<__CFString const>::operator=(this + 20, a2);
  }
  return this;
}

const void **ctu::cf::CFSharedRef<__CFString const>::operator=(const void **a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v4 = *a1;
  *a1 = cf;
  unint64_t v6 = v4;
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(&v6);
  return a1;
}

const void **ctu::Http::HttpSession_impl::setServiceType(const void **this, const __CFString *a2)
{
  return ctu::cf::CFSharedRef<__CFString const>::operator=(this + 11, a2);
}

std::string *ctu::Http::HttpSession_impl::setSourceIdentifier(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 40), a2);
}

std::string *ctu::Http::HttpSession_impl::setSourceApplicationBundleIdentifier( uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 64), a2);
}

uint64_t ctu::Http::HttpSession_impl::setOnDemand(uint64_t this, char a2)
{
  *(_BYTE *)(this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v3 - 96) = a2;
  return this;
}

void ctu::Http::HttpSession_impl::setAllowCellularAccess(ctu::Http::HttpSession_impl *this, char a2)
{
  uint64_t v4 = operator new(1uLL);
  _BYTE *v4 = a2;
  std::string::size_type v5 = operator new(0x20uLL);
  *std::string::size_type v5 = off_189E96878;
  v5[1] = 0LL;
  v5[2] = 0LL;
  void v5[3] = v4;
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 14);
  *((void *)this + 13) = v4;
  *((void *)this + 14) = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

void sub_186600AB8(_Unwind_Exception *a1)
{
}

uint64_t ctu::Http::HttpSession_impl::setConnectionCacheCellPurgeTimeout(uint64_t this, int a2)
{
  *(_DWORD *)(this + 120) = a2;
  return this;
}

uint64_t ctu::Http::HttpSession_impl::setWaitForConnectivityTimeout(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = a2;
  return this;
}

uint64_t ctu::Http::HttpSession_impl::setAllowUltraConstrained(uint64_t this, char a2)
{
  *(_BYTE *)(this + 172) = a2;
  return this;
}

void ctu::Http::HttpSession_impl::getBackgroundIdentifier( ctu::Http::HttpSession_impl *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 159) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 17), *((void *)this + 18));
  }

  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 136);
    a2->__r_.__value_.__l.__cap_ = *((void *)this + 19);
  }

void ctu::Http::HttpRequest::create( int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  CFDictionaryRef v10 = *(const void **)a4;
  if (!*(void *)a4)
  {
    ctu::Http::HttpSession_impl::createSession((ctu::Http::HttpSession_impl *)&v45);
    __int128 v11 = v45;
    __int128 v45 = 0uLL;
    std::string::size_type v12 = *(std::__shared_weak_count **)(a4 + 8);
    *(_OWORD *)a4 = v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    uint64_t v15 = (std::__shared_weak_count *)*((void *)&v45 + 1);
    if (*((void *)&v45 + 1))
    {
      unint64_t v16 = (unint64_t *)(*((void *)&v45 + 1) + 8LL);
      do
        unint64_t v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }

    CFDictionaryRef v10 = *(const void **)a4;
  }

  CFDictionaryRef v18 = *(std::__shared_weak_count **)(a4 + 8);
  if (v18)
  {
    std::string::size_type v19 = (unint64_t *)&v18->__shared_owners_;
    do
      unint64_t v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }

  std::string::size_type v21 = operator new(0xE0uLL);
  unint64_t v22 = v21;
  *(void *)&__int128 v45 = v10;
  *((void *)&v45 + 1) = v18;
  if (v18)
  {
    uint64_t v23 = (unint64_t *)&v18->__shared_owners_;
    do
      unint64_t v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }

  v21[1] = &unk_189E966B0;
  unint64_t v25 = v21 + 1;
  _OWORD v21[2] = 0LL;
  uint64_t v21[3] = 0LL;
  *std::string::size_type v21 = &off_189E96560;
  unint64_t v26 = v21 + 4;
  if (v10
  {
    v22[4] = v27;
    v22[5] = v18;
    if (v18)
    {
      uint64_t v28 = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
  }

  else
  {
    void *v26 = 0LL;
    v22[5] = 0LL;
  }

  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external( (std::string *)v22 + 2,  *(const std::string::value_type **)a2,  *(void *)(a2 + 8));
  }

  else
  {
    *((_OWORD *)v22 + 3) = *(_OWORD *)a2;
    v22[8] = *(void *)(a2 + 16);
  }

  v22[13] = 0LL;
  *(_OWORD *)(v22 + 11) = 0u;
  *(_OWORD *)(v22 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 9) = 0u;
  *((_DWORD *)v22 + 2std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = a1;
  std::map<std::string,std::string,ctu::Http::case_insensitive_key_comparer,std::allocator<std::pair<std::string const,std::string>>>::map[abi:ne180100]( v22 + 15,  a3);
  v22[18] = 0x403E000000000000LL;
  *(_OWORD *)(v22 + 1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 9) = 0u;
  *(_OWORD *)(v22 + 21) = 0u;
  *(_OWORD *)(v22 + 23) = 0u;
  v22[25] = 6LL;
  v22[26] = 0LL;
  *((_BYTE *)v22 + 216) = 0;
  xpc_object_t v30 = (std::__shared_weak_count *)operator new(0x20uLL);
  v30->__shared_owners_ = 0LL;
  unint64_t v31 = (unint64_t *)&v30->__shared_owners_;
  v30->__vftable = (std::__shared_weak_count_vtbl *)off_189E968E0;
  v30->__shared_weak_owners_ = 0LL;
  v30[1].__vftable = (std::__shared_weak_count_vtbl *)v22;
  unint64_t v32 = (std::__shared_weak_count *)v22[3];
  if (v32)
  {
    if (v32->__shared_owners_ != -1) {
      goto LABEL_42;
    }
    do
      unint64_t v33 = __ldxr(v31);
    while (__stxr(v33 + 1, v31));
    p_shared_weak_owners = (unint64_t *)&v30->__shared_weak_owners_;
    do
      unint64_t v35 = __ldxr(p_shared_weak_owners);
    while (__stxr(v35 + 1, p_shared_weak_owners));
    void v22[2] = v25;
    _OWORD v22[3] = v30;
    std::__shared_weak_count::__release_weak(v32);
  }

  else
  {
    do
      unint64_t v36 = __ldxr(v31);
    while (__stxr(v36 + 1, v31));
    __int16 v37 = (unint64_t *)&v30->__shared_weak_owners_;
    do
      unint64_t v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    void v22[2] = v25;
    _OWORD v22[3] = v30;
  }

  do
    unint64_t v39 = __ldaxr(v31);
  while (__stlxr(v39 - 1, v31));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }

{
  void (***v10)(void *__return_ptr);
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  void (***v29)(void *__return_ptr);
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t v31 = 0LL;
  unint64_t v32 = 0LL;
  if (!*(void *)a4)
  {
    unint64_t v25 = 0LL;
    unint64_t v26 = 0LL;
    goto LABEL_17;
  }

  if (v10)
  {
    __int128 v11 = *(std::__shared_weak_count **)(a4 + 8);
    unint64_t v29 = v10;
    xpc_object_t v30 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        std::string::size_type v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }

    (**v10)(&v27);
    unint64_t v14 = v28;
    unint64_t v31 = v27;
    unint64_t v32 = v28;
    if (!v11) {
      goto LABEL_12;
    }
    uint64_t v15 = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  unint64_t v14 = v32;
LABEL_12:
  unint64_t v25 = v31;
  unint64_t v26 = v14;
  if (v14)
  {
    unint64_t v17 = (unint64_t *)&v14->__shared_owners_;
    do
      CFDictionaryRef v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }

LABEL_42:
  uint64_t v40 = (std::__shared_weak_count *)*((void *)&v45 + 1);
  if (*((void *)&v45 + 1))
  {
    uint64_t v41 = (unint64_t *)(*((void *)&v45 + 1) + 8LL);
    do
      unint64_t v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }

  *a5 = v22;
  a5[1] = v30;
  if (v18)
  {
    unint64_t v43 = (unint64_t *)&v18->__shared_owners_;
    do
      unint64_t v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

void sub_186600E64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  unint64_t v14 = (std::__shared_weak_count *)v11[3];
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  operator delete(v11);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_186601098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void ctu::Http::HttpSessionRequest::Deleter::operator()(uint64_t a1)
{
  if (a1)
  {
    v2[0] = MEMORY[0x1895F87A8];
    v2[1] = 3221225472LL;
    v2[2] = ___ZN3ctu4Http18HttpSessionRequest7DeleterclEPS1__block_invoke;
    v2[3] = &__block_descriptor_40_e5_v8__0l;
    v2[4] = a1;
    uint64_t v1 = *(void *)(a1 + 32);
    if (v1) {
      ctu::Http::HttpSession_impl::addOperation(v1, (uint64_t)v2);
    }
  }

uint64_t ___ZN3ctu4Http18HttpSessionRequest7DeleterclEPS1__block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 256LL))(result);
  }
  return result;
}

uint64_t ctu::Http::HttpSessionRequest::getHttpSession@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 40);
  *a2 = *(void *)(this + 32);
  a2[1] = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return this;
}

void ctu::Http::asString(unsigned int a1@<W0>, void *a2@<X8>)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
  ctu::ns::AutoPool::AutoPool((ctu::ns::AutoPool *)&v5);
  if (a1 > 7) {
    unint64_t v4 = 0LL;
  }
  else {
    unint64_t v4 = off_189E969A8[a1];
  }
  std::string::basic_string[abi:ne180100]<0>( a2,  (char *)-[__CFString cStringUsingEncoding:](v4, "cStringUsingEncoding:", 4LL));
  ctu::ns::AutoPool::~AutoPool((void **)&v5);
}

void sub_1866011CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void ctu::Http::HttpSessionRequest::~HttpSessionRequest(ctu::Http::HttpSessionRequest *this)
{
  *(void *)this = &off_189E96560;
  *((void *)this + 1) = &unk_189E966B0;
  uint64_t v2 = (char *)this + 32;
  uint64_t v3 = *(void **)(*((void *)this + 4) + 24LL);
  if (v3)
  {
    unint64_t v4 = (void *)*((void *)this + 24);
    if (v4) {
      objc_msgSend(v3, "removeCallbackFor:", objc_msgSend(v4, "taskIdentifier"));
    }
  }

  *((void *)this + memset(&context, 0, 24) = 0LL;
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 5);
  *((void *)this + 4) = 0LL;
  *((void *)this + 5) = 0LL;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  uint64_t v8 = (const void *)*((void *)this + 23);
  if (v8) {
    _Block_release(v8);
  }
  CFStringRef v9 = (const void *)*((void *)this + 22);
  if (v9) {
    _Block_release(v9);
  }
  CFDictionaryRef v10 = (const void *)*((void *)this + 21);
  if (v10) {
    _Block_release(v10);
  }
  __int128 v11 = (const void *)*((void *)this + 20);
  if (v11) {
    _Block_release(v11);
  }
  uint64_t v12 = (dispatch_object_s *)*((void *)this + 19);
  if (v12) {
    dispatch_release(v12);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy( (uint64_t)this + 120,  *((void **)this + 16));
  ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef((const void **)this + 13);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)this + 12);
  std::string::size_type v13 = (void *)*((void *)this + 9);
  if (v13)
  {
    *((void *)this + 10) = v13;
    operator delete(v13);
  }

  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  unint64_t v14 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
}

{
  void *v1;
  ctu::Http::HttpSessionRequest::~HttpSessionRequest(this);
  operator delete(v1);
}

void non-virtual thunk to'ctu::Http::HttpSessionRequest::~HttpSessionRequest( ctu::Http::HttpSessionRequest *this)
{
}

{
  void *v1;
  ctu::Http::HttpSessionRequest::~HttpSessionRequest((ctu::Http::HttpSessionRequest *)((char *)this - 8));
  operator delete(v1);
}

void ctu::Http::HttpSessionRequest::start(void *a1, uint64_t a2)
{
  v18[0] = MEMORY[0x1895F87A8];
  v18[1] = 3321888768LL;
  xpc_object_t v18[2] = ___ZN3ctu4Http18HttpSessionRequest5startENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke;
  v18[3] = &__block_descriptor_80_e8_32c112_ZTSKZN3ctu4Http18HttpSessionRequest5startENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3__0_e5_v8__0l;
  uint64_t v4 = a1[2];
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  *(void *)&__int128 v15 = a1;
  *((void *)&v15 + 1) = v4;
  if (!v3 || (uint64_t v6 = std::__shared_weak_count::lock(v3), (v16 = v6) == 0LL)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    std::string __p = *(std::string *)a2;
    *(void *)&__int128 v19 = a1;
    *((void *)&v19 + 1) = v4;
    unint64_t v20 = v6;
    goto LABEL_6;
  }

  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  uint64_t v6 = v16;
  __int128 v19 = v15;
  unint64_t v20 = v16;
  if (v16)
  {
LABEL_6:
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }

  else {
    std::string v21 = __p;
  }
  uint64_t v9 = a1[4];
  if (v9) {
    ctu::Http::HttpSession_impl::addOperation(v9, (uint64_t)v18);
  }
  if (v16)
  {
    CFDictionaryRef v10 = (unint64_t *)&v16->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  uint64_t v12 = v20;
  if (v20)
  {
    std::string::size_type v13 = (unint64_t *)&v20->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

void sub_18660152C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN3ctu4Http18HttpSessionRequest5startENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke( uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  else {
    std::string v86 = *(std::string *)(a1 + 56);
  }
  std::string::size_type v4 = *(void *)(a1 + 40);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }

  unint64_t v87 = 0xAAAAAAAAAAAAAAAALL;
  ctu::ns::AutoPool::AutoPool((ctu::ns::AutoPool *)&v87);
  uint64_t v7 = *(void *)(v2 + 32);
  if (!v7 || !*(void *)(v2 + 152) || !*(void *)(v2 + 160) || !*(void *)(v7 + 16)) {
    goto LABEL_182;
  }
  unint64_t v8 = (const std::string::value_type **)(v2 + 48);
  if ((*(char *)(v2 + 71) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v2 + 71))
    {
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = *(_OWORD *)v8;
      v91.__r_.__value_.__l.__cap_ = *(void *)(v2 + 64);
      CFStringRef URLString = (CFStringRef)0xAAAAAAAAAAAAAAAALL;
      goto LABEL_16;
    }

LABEL_154:
  uint64_t v61 = (void *)(v56 + 64);
  if ((*(char *)(v56 + 87) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v56 + 87)) {
      goto LABEL_160;
    }
    goto LABEL_159;
  }

  if (*(void *)(v56 + 72))
  {
    uint64_t v61 = (void *)*v61;
LABEL_159:
    objc_msgSend( v51,  "set_sourceApplicationBundleIdentifier:",  objc_msgSend( NSString,  "stringWithCString:encoding:",  v61,  objc_msgSend(NSString, "defaultCStringEncoding")));
    uint64_t v56 = *(void *)(v2 + 32);
  }

LABEL_160:
  unsigned int v62 = *(_DWORD *)(v56 + 120);
  if (v62)
  {
    objc_msgSend(v51, "set_connectionCacheCellPurgeTimeout:", (double)v62);
    uint64_t v56 = *(void *)(v2 + 32);
  }

  if (*(_DWORD *)(v56 + 168))
  {
    [v51 setWaitsForConnectivity:1];
    LODWORD(v63) = *(_DWORD *)(*(void *)(v2 + 32) + 168LL);
    [v51 setTimeoutIntervalForResource:(double)v63];
  }

  uint64_t v64 = objc_opt_new();
  uint64_t v65 = *(void *)(v2 + 32);
  *(void *)(v65 + memset(&context, 0, 24) = v64;
  if (v64)
  {
    id v47 = (id)[MEMORY[0x189607AA0] sessionWithConfiguration:v51 delegate:v64 delegateQueue:*(void *)(v65 + 16)];
    uint64_t v65 = *(void *)(v2 + 32);
    *(void *)(v65 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v47;
  }

  else
  {
    id v47 = *(id *)(v65 + 8);
  }

  if (v47)
  {
LABEL_168:
    id v66 = (id)[v47 dataTaskWithRequest:v18];
    *(void *)(v2 + 192) = v66;
    if (v66)
    {
      uint64_t v67 = *(void **)(*(void *)(v2 + 32) + 24LL);
      v94.__r_.__value_.__r.__words[0] = v4;
      v94.__r_.__value_.__l.__size_ = (std::string::size_type)v3;
      if (v3)
      {
        uint64_t v68 = (unint64_t *)&v3->__shared_owners_;
        do
          unint64_t v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
        id v66 = *(id *)(v2 + 192);
      }

      objc_msgSend(v67, "addCallbackHandler:for:", &v94, objc_msgSend(v66, "taskIdentifier"));
      uint64_t v70 = (std::__shared_weak_count *)v94.__r_.__value_.__l.__size_;
      if (v94.__r_.__value_.__l.__size_)
      {
        uint64_t v71 = (unint64_t *)(v94.__r_.__value_.__l.__size_ + 8);
        do
          unint64_t v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }

      if (*(_BYTE *)(v2 + 216)) {
        *(void *)(v2 + 20std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = [v18 mutableCopy];
      }
      [*(id *)(v2 + 192) resume];
      goto LABEL_195;
    }

    goto LABEL_182;
  }

  *(void *)(*(void *)(v2 + 32) + 24LL) = 0LL;
LABEL_182:
  int v38 = 3;
LABEL_183:
  uint64_t v73 = operator new(0x68uLL);
  *(void *)uint64_t v73 = off_189E969F8;
  v73[2] = 0;
  *((void *)v73 + 4) = 0LL;
  *((void *)v73 + 3) = 0LL;
  *((void *)v73 + 2) = v73 + 6;
  v73[10] = -1;
  *((_OWORD *)v73 + 3) = 0u;
  *((_OWORD *)v73 + 4) = 0u;
  *((_OWORD *)v73 + 5) = 0u;
  *((_WORD *)v73 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = -1;
  v94.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
  int64_t v74 = operator new(0x20uLL);
  v74[1] = 0LL;
  int64_t v75 = v74 + 1;
  *int64_t v74 = off_189E96940;
  v74[2] = 0LL;
  v74[3] = v73;
  v94.__r_.__value_.__l.__size_ = (std::string::size_type)v74;
  v73[2] = v38;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)v74;
  do
    unint64_t v76 = __ldxr(v75);
  while (__stxr(v76 + 1, v75));
  (*(void (**)(uint64_t, std::string *))(*(void *)v2 + 288LL))(v2, &v93);
  uint64_t v77 = (std::__shared_weak_count *)v93.__r_.__value_.__l.__size_;
  if (v93.__r_.__value_.__l.__size_)
  {
    unint64_t v78 = (unint64_t *)(v93.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }

  uint64_t v80 = (std::__shared_weak_count *)v94.__r_.__value_.__l.__size_;
  if (v94.__r_.__value_.__l.__size_)
  {
    uint64_t v81 = (unint64_t *)(v94.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }

LABEL_195:
  ctu::ns::AutoPool::~AutoPool((void **)&v87);
  if (v3)
  {
    uint64_t v83 = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_18660205C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, __int16 a19, char a20, char a21, int a22, const void *a23, const void *a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, const void *a31, std::locale a32, uint64_t a33, int a34, __int16 a35, char a36, char a37)
{
  uint64_t v40 = *(void **)(v38 - 128);
  if (v40)
  {
    *(void *)(v38 - 120) = v40;
    operator delete(v40);
  }

  ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef(&a23);
  ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::~SharedRef(&a24);
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(&a31);
  ctu::ns::AutoPool::~AutoPool(&a18);
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      unint64_t v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }

  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c112_ZTSKZN3ctu4Http18HttpSessionRequest5startENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3__0( uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = v3;
  if (v3)
  {
    std::string::size_type v4 = (unint64_t *)(v3 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  unint64_t v6 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }

void sub_186602284(_Unwind_Exception *a1)
{
}

uint64_t __destroy_helper_block_e8_32c112_ZTSKZN3ctu4Http18HttpSessionRequest5startENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3__0( uint64_t a1)
{
  return std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](a1 + 40);
}

uint64_t ctu::Http::HttpSessionRequest::start(std::string)::$_0::~$_0(uint64_t a1)
{
  return a1;
}

uint64_t ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get( uint64_t a1)
{
  return *(void *)a1;
}

uint64_t ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get( uint64_t a1)
{
  return *(void *)a1;
}

void boost::algorithm::to_upper_copy<std::string>(std::string *a1, uint64_t a2, std::locale *this)
{
  int v3 = *(char *)(a2 + 23);
  if (v3 >= 0) {
    std::string::size_type v4 = (char *)a2;
  }
  else {
    std::string::size_type v4 = *(char **)a2;
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  a1->__r_.__value_.__r.__words[0] = 0LL;
  if (v5)
  {
    unint64_t v8 = (std::locale::id *)MEMORY[0x189614558];
    do
    {
      char v9 = *v4;
      CFDictionaryRef v10 = std::locale::use_facet(this, v8);
      std::string::value_type v11 = ((uint64_t (*)(const std::locale::facet *, void))v10->__vftable[1].~facet)( v10,  v9);
      std::string::push_back(a1, v11);
      ++v4;
      --v5;
    }

    while (v5);
  }

void sub_1866023A8(void *a1)
{
}

void sub_1866023C4(_Unwind_Exception *a1)
{
}

void ctu::Http::HttpSessionRequest::handleResponse_sync(uint64_t a1, uint64_t *a2)
{
  std::string::size_type v4 = *(const void **)(a1 + 160);
  if (v4) {
    uint64_t v5 = _Block_copy(v4);
  }
  else {
    uint64_t v5 = 0LL;
  }
  unint64_t v6 = *(dispatch_queue_s **)(a1 + 152);
  if (v6 && *(void *)(a1 + 160))
  {
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 3321888768LL;
    block[2] = ___ZN3ctu4Http18HttpSessionRequest19handleResponse_syncENSt3__110shared_ptrINS0_12HttpResponseEEE_block_invoke;
    block[3] = &__block_descriptor_56_e8_32c89_ZTSN8dispatch5blockIU13block_pointerFvNSt3__110shared_ptrIN3ctu4Http12HttpResponseEEEEEE40c51_ZTSNSt3__110shared_ptrIN3ctu4Http12HttpResponseEEE_e5_v8__0l;
    if (v5) {
      __int128 v7 = _Block_copy(v5);
    }
    else {
      __int128 v7 = 0LL;
    }
    uint64_t v9 = *a2;
    unint64_t v8 = (std::__shared_weak_count *)a2[1];
    aBlocunint64_t k = v7;
    uint64_t v17 = v9;
    CFDictionaryRef v18 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }

    dispatch_async(v6, block);
    uint64_t v12 = v18;
    if (v18)
    {
      CFStringRef v13 = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    if (aBlock) {
      _Block_release(aBlock);
    }
  }

  if (v5) {
    _Block_release(v5);
  }
}

void ___ZN3ctu4Http18HttpSessionRequest19handleResponse_syncENSt3__110shared_ptrINS0_12HttpResponseEEE_block_invoke( void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v4 = a1[5];
  int v3 = (std::__shared_weak_count *)a1[6];
  uint64_t v10 = v4;
  unint64_t v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }

  (*(void (**)(uint64_t, uint64_t *))(v2 + 16))(v2, &v10);
  __int128 v7 = v11;
  if (v11)
  {
    unint64_t v8 = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

void sub_18660258C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *__copy_helper_block_e8_32c89_ZTSN8dispatch5blockIU13block_pointerFvNSt3__110shared_ptrIN3ctu4Http12HttpResponseEEEEEE40c51_ZTSNSt3__110shared_ptrIN3ctu4Http12HttpResponseEEE( void *a1, void *a2)
{
  uint64_t result = (void *)a2[4];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  uint64_t v6 = a2[5];
  uint64_t v5 = a2[6];
  a1[4] = result;
  a1[5] = v6;
  a1[6] = v5;
  if (v5)
  {
    __int128 v7 = (unint64_t *)(v5 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  return result;
}

void __destroy_helper_block_e8_32c89_ZTSN8dispatch5blockIU13block_pointerFvNSt3__110shared_ptrIN3ctu4Http12HttpResponseEEEEEE40c51_ZTSNSt3__110shared_ptrIN3ctu4Http12HttpResponseEEE( uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
}

void non-virtual thunk to'ctu::Http::HttpSessionRequest::handleResponse_sync(uint64_t a1, uint64_t *a2)
{
}

void ctu::Http::HttpSessionRequest::handleDataSent_sync( ctu::Http::HttpSessionRequest *this, int a2, int a3, int a4)
{
  unint64_t v8 = (const void *)*((void *)this + 22);
  if (v8) {
    unint64_t v9 = _Block_copy(v8);
  }
  else {
    unint64_t v9 = 0LL;
  }
  uint64_t v10 = (dispatch_queue_s *)*((void *)this + 19);
  if (v10 && *((void *)this + 22))
  {
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 3321888768LL;
    block[2] = ___ZN3ctu4Http18HttpSessionRequest19handleDataSent_syncEiii_block_invoke;
    block[3] = &__block_descriptor_52_e8_32c45_ZTSN8dispatch5blockIU13block_pointerFviiiEEE_e5_v8__0l;
    unint64_t v11 = v9 ? _Block_copy(v9) : 0LL;
    aBlocunint64_t k = v11;
    int v14 = a2;
    int v15 = a3;
    int v16 = a4;
    dispatch_async(v10, block);
    if (aBlock) {
      _Block_release(aBlock);
    }
  }

  if (v9) {
    _Block_release(v9);
  }
}

uint64_t ___ZN3ctu4Http18HttpSessionRequest19handleDataSent_syncEiii_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned int *)(a1 + 40),  *(unsigned int *)(a1 + 44),  *(unsigned int *)(a1 + 48));
}

void *__copy_helper_block_e8_32c45_ZTSN8dispatch5blockIU13block_pointerFviiiEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c45_ZTSN8dispatch5blockIU13block_pointerFviiiEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void non-virtual thunk to'ctu::Http::HttpSessionRequest::handleDataSent_sync( ctu::Http::HttpSessionRequest *this, int a2, int a3, int a4)
{
}

void ctu::Http::HttpSessionRequest::handleDataReceived_sync( ctu::Http::HttpSessionRequest *this, int a2, int a3)
{
  uint64_t v6 = (const void *)*((void *)this + 21);
  if (v6) {
    __int128 v7 = _Block_copy(v6);
  }
  else {
    __int128 v7 = 0LL;
  }
  unint64_t v8 = (dispatch_queue_s *)*((void *)this + 19);
  if (v8 && *((void *)this + 21))
  {
    v10[0] = MEMORY[0x1895F87A8];
    v10[1] = 3321888768LL;
    _OWORD v10[2] = ___ZN3ctu4Http18HttpSessionRequest23handleDataReceived_syncEii_block_invoke;
    void v10[3] = &__block_descriptor_48_e8_32c44_ZTSN8dispatch5blockIU13block_pointerFviiEEE_e5_v8__0l;
    unint64_t v9 = v7 ? _Block_copy(v7) : 0LL;
    aBlocunint64_t k = v9;
    int v12 = a2;
    int v13 = a3;
    dispatch_async(v8, v10);
    if (aBlock) {
      _Block_release(aBlock);
    }
  }

  if (v7) {
    _Block_release(v7);
  }
}

uint64_t ___ZN3ctu4Http18HttpSessionRequest23handleDataReceived_syncEii_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned int *)(a1 + 40),  *(unsigned int *)(a1 + 44));
}

void *__copy_helper_block_e8_32c44_ZTSN8dispatch5blockIU13block_pointerFviiEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c44_ZTSN8dispatch5blockIU13block_pointerFviiEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void non-virtual thunk to'ctu::Http::HttpSessionRequest::handleDataReceived_sync( ctu::Http::HttpSessionRequest *this, int a2, int a3)
{
}

uint64_t ctu::Http::HttpSessionRequest::setProxyServer(uint64_t a1)
{
  return (***(uint64_t (****)(void))(a1 + 32))(*(void *)(a1 + 32));
}

const void **ctu::Http::HttpSessionRequest::setProxySettings(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *a2;
  uint64_t v5 = v3;
  if (v3) {
    CFRetain(v3);
  }
  (*(void (**)(uint64_t, const void **))(*(void *)v2 + 8LL))(v2, &v5);
  return ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v5);
}

void sub_186602938(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t ctu::Http::HttpSessionRequest::setSSLProtocolLimitation( ctu::Http::HttpSessionRequest *this, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 4) + 16LL))( *((void *)this + 4),  a2,  a3);
}

uint64_t ctu::Http::HttpSessionRequest::setSharedConfiguration(ctu::Http::HttpSessionRequest *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 24LL))(*((void *)this + 4));
}

uint64_t ctu::Http::HttpSessionRequest::setBackgroundConfiguration(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32LL))(*(void *)(a1 + 32));
}

uint64_t ctu::Http::HttpSessionRequest::setBackgroundConfigurationWithUniqueIdentifier( ctu::Http::HttpSessionRequest *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 40LL))(*((void *)this + 4));
}

uint64_t ctu::Http::HttpSessionRequest::setTLSPolicyName(uint64_t this, const __CFString *a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(**(void **)(this + 32) + 48LL))(*(void *)(this + 32));
  }
  return this;
}

uint64_t ctu::Http::HttpSessionRequest::setServiceType( ctu::Http::HttpSessionRequest *this, const __CFString *a2)
{
  return (*(uint64_t (**)(void, const __CFString *))(**((void **)this + 4) + 56LL))( *((void *)this + 4),  a2);
}

uint64_t ctu::Http::HttpSessionRequest::setSourceIdentifier(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 64LL))(*(void *)(a1 + 32));
}

uint64_t ctu::Http::HttpSessionRequest::setSourceApplicationBundleIdentifier(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 72LL))(*(void *)(a1 + 32));
}

uint64_t ctu::Http::HttpSessionRequest::setOnDemand(ctu::Http::HttpSessionRequest *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 80LL))(*((void *)this + 4));
}

uint64_t ctu::Http::HttpSessionRequest::setAllowCellularAccess(ctu::Http::HttpSessionRequest *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 88LL))(*((void *)this + 4));
}

uint64_t ctu::Http::HttpSessionRequest::getTLSNegotiatedCipherSuite(ctu::Http::HttpSessionRequest *this)
{
  uint64_t v1 = (void *)*((void *)this + 24);
  if (v1) {
    return [v1 _TLSNegotiatedCipherSuite];
  }
  else {
    return 0xFFFFLL;
  }
}

uint64_t ctu::Http::HttpSessionRequest::setConnectionCacheCellPurgeTimeout( ctu::Http::HttpSessionRequest *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 96LL))(*((void *)this + 4));
}

uint64_t ctu::Http::HttpSessionRequest::setWaitForConnectivityTimeout(ctu::Http::HttpSessionRequest *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 112LL))(*((void *)this + 4));
}

uint64_t ctu::Http::HttpSessionRequest::setAllowUltraConstrained(ctu::Http::HttpSessionRequest *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 120LL))(*((void *)this + 4));
}

uint64_t ctu::Http::HttpSessionRequest::setRedirection(uint64_t this, char a2)
{
  *(_BYTE *)(this + 216) = a2;
  return this;
}

uint64_t ctu::Http::HttpSessionRequest::setMaxAllowedRedirects(uint64_t this, int a2)
{
  if ((a2 & 0x80000000) == 0) {
    *(_DWORD *)(this + 200) = a2;
  }
  return this;
}

NSURLRequest *ctu::Http::HttpSessionRequest::handleWillSendRequest_sync( ctu::Http::HttpSessionRequest *this, NSURLRequest *a2, NSURLResponse *a3)
{
  int v3 = *((_DWORD *)this + 51);
  if (v3 >= *((_DWORD *)this + 50)) {
    return 0LL;
  }
  uint64_t v4 = a2;
  if (a3 && *((_BYTE *)this + 216) && *((void *)this + 26))
  {
    uint64_t v6 = -[NSURLRequest URL](a2, "URL");
    uint64_t v4 = (NSURLRequest *)(id)[*((id *)this + 26) mutableCopy];
    -[NSURLRequest setURL:](v4, "setURL:", v6);
    int v3 = *((_DWORD *)this + 51);
  }

  *((_DWORD *)this + 51) = v3 + 1;
  return v4;
}

NSURLRequest *non-virtual thunk to'ctu::Http::HttpSessionRequest::handleWillSendRequest_sync( ctu::Http::HttpSessionRequest *this, NSURLRequest *a2, NSURLResponse *a3)
{
  return ctu::Http::HttpSessionRequest::handleWillSendRequest_sync( (ctu::Http::HttpSessionRequest *)((char *)this - 8),  a2,  a3);
}

void ctu::Http::HttpSessionRequest::registerCallbackQueue( ctu::Http::HttpSessionRequest *this, dispatch_object_t object)
{
  if (object) {
    dispatch_retain(object);
  }
  uint64_t v4 = (dispatch_object_s *)*((void *)this + 19);
  *((void *)this + 1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 9) = object;
  if (v4) {
    dispatch_release(v4);
  }
}

void ctu::Http::HttpSessionRequest::registerCompletionCodeblock(uint64_t a1, void *aBlock)
{
  if (aBlock) {
    int v3 = _Block_copy(aBlock);
  }
  else {
    int v3 = 0LL;
  }
  uint64_t v4 = *(const void **)(a1 + 160);
  *(void *)(a1 + 160) = v3;
  if (v4) {
    _Block_release(v4);
  }
}

void ctu::Http::HttpSessionRequest::registerDataReceiveCodeblock(uint64_t a1, void *aBlock)
{
  if (aBlock) {
    int v3 = _Block_copy(aBlock);
  }
  else {
    int v3 = 0LL;
  }
  uint64_t v4 = *(const void **)(a1 + 168);
  *(void *)(a1 + 16std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v3;
  if (v4) {
    _Block_release(v4);
  }
}

void ctu::Http::HttpSessionRequest::registerDataSendCodeblock(uint64_t a1, void *aBlock)
{
  if (aBlock) {
    int v3 = _Block_copy(aBlock);
  }
  else {
    int v3 = 0LL;
  }
  uint64_t v4 = *(const void **)(a1 + 176);
  *(void *)(a1 + 176) = v3;
  if (v4) {
    _Block_release(v4);
  }
}

void *ctu::Http::HttpSessionRequest::setRequestBody(void *result, const void **a2)
{
  uint64_t v2 = result + 9;
  if (result + 9 != a2)
  {
    int v3 = result;
    uint64_t v4 = (char *)*a2;
    uint64_t v5 = (char *)a2[1];
    size_t v6 = v5 - (_BYTE *)*a2;
    unint64_t v7 = result[11];
    unint64_t v8 = (char *)result[9];
    if (v7 - (unint64_t)v8 >= v6)
    {
      unint64_t v11 = (_BYTE *)result[10];
      size_t v12 = v11 - v8;
      if (v11 - v8 < v6)
      {
        int v13 = &v4[v12];
        if (v11 != v8)
        {
          uint64_t result = memmove((void *)result[9], *a2, v12);
          unint64_t v8 = (char *)v3[10];
        }

        if (v5 != v13) {
          uint64_t result = memmove(v8, v13, v5 - v13);
        }
        int v14 = &v8[v5 - v13];
        goto LABEL_21;
      }
    }

    else
    {
      if (v8)
      {
        result[10] = v8;
        operator delete(v8);
        unint64_t v7 = 0LL;
        *uint64_t v2 = 0LL;
        v2[1] = 0LL;
        v2[2] = 0LL;
      }

      if ((v6 & 0x8000000000000000LL) != 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = 2 * v7;
      if (2 * v7 <= v6) {
        uint64_t v9 = v6;
      }
      if (v7 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v10 = v9;
      }
      uint64_t result = std::vector<char>::__vallocate[abi:ne180100](v2, v10);
      unint64_t v8 = (char *)v3[10];
    }

    if (v5 != v4) {
      uint64_t result = memmove(v8, v4, v6);
    }
    int v14 = &v8[v6];
LABEL_21:
    v3[10] = v14;
  }

  return result;
}

const void **ctu::Http::HttpSessionRequest::setClientCert(ctu::Http::HttpSessionRequest *this, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v4 = (const void *)*((void *)this + 12);
  *((void *)this + 12) = cf;
  size_t v6 = v4;
  return ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v6);
}

const void **ctu::Http::HttpSessionRequest::setServerPinnedCerts( ctu::Http::HttpSessionRequest *this, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v4 = (const void *)*((void *)this + 13);
  *((void *)this + 13) = cf;
  size_t v6 = v4;
  return ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(&v6);
}

uint64_t ctu::Http::HttpSessionRequest::setTimeout(uint64_t this, double a2)
{
  *(double *)(this + 144) = a2;
  return this;
}

void ctu::Http::HttpSessionRequest::setValidateCertsCallback(uint64_t a1, void *aBlock)
{
  if (aBlock) {
    int v3 = _Block_copy(aBlock);
  }
  else {
    int v3 = 0LL;
  }
  uint64_t v4 = *(const void **)(a1 + 184);
  *(void *)(a1 + 184) = v3;
  if (v4) {
    _Block_release(v4);
  }
}

void *ctu::Http::HttpSessionRequest::getClientCert@<X0>(CFTypeRef *this@<X0>, void *a2@<X8>)
{
  return ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef( a2,  this[12]);
}

void *ctu::Http::HttpSessionRequest::getServerPinnedCerts@<X0>(CFTypeRef *this@<X0>, void *a2@<X8>)
{
  return ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::SharedRef( a2,  this[13]);
}

uint64_t ctu::Http::HttpSessionRequest::executeValidateCertsCallback( ctu::Http::HttpSessionRequest *this, __SecTrust *a2)
{
  uint64_t v2 = *((void *)this + 23);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, __SecTrust *))(v2 + 16))(v2, a2);
  }
  else {
    return 1LL;
  }
}

void *non-virtual thunk to'ctu::Http::HttpSessionRequest::getClientCert@<X0>( CFTypeRef *this@<X0>, void *a2@<X8>)
{
  return ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef( a2,  this[11]);
}

void *non-virtual thunk to'ctu::Http::HttpSessionRequest::getServerPinnedCerts@<X0>( CFTypeRef *this@<X0>, void *a2@<X8>)
{
  return ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::SharedRef( a2,  this[12]);
}

uint64_t non-virtual thunk to'ctu::Http::HttpSessionRequest::executeValidateCertsCallback( ctu::Http::HttpSessionRequest *this, __SecTrust *a2)
{
  uint64_t v2 = *((void *)this + 22);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, __SecTrust *))(v2 + 16))(v2, a2);
  }
  else {
    return 1LL;
  }
}

const void **ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef( const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::operator=( const void **a1, CFTypeRef *a2)
{
  if (a1 != a2)
  {
    CFTypeRef v3 = *a2;
    if (*a2) {
      CFRetain(*a2);
    }
    uint64_t v4 = *a1;
    *a1 = v3;
    size_t v6 = v4;
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v6);
  }

  return a1;
}

void *ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef( void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

const void **ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef( const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef( const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get( uint64_t a1)
{
  return *(void *)a1;
}

const void **ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef( const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::~SharedRef( const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::SharedRef( void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

uint64_t *std::map<std::string,std::string,ctu::Http::case_insensitive_key_comparer,std::allocator<std::pair<std::string const,std::string>>>::map[abi:ne180100]( uint64_t *a1, uint64_t a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::string,ctu::Http::case_insensitive_key_comparer,std::allocator<std::pair<std::string const,std::string>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>( a1,  *(__int128 **)a2,  (__int128 *)(a2 + 8));
  return a1;
}

void sub_186603058(_Unwind_Exception *a1)
{
}

uint64_t *std::map<std::string,std::string,ctu::Http::case_insensitive_key_comparer,std::allocator<std::pair<std::string const,std::string>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>( uint64_t *result, __int128 *a2, __int128 *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    size_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>( v5,  v6,  (uint64_t)(v4 + 2),  v4 + 2);
      unint64_t v7 = (__int128 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          unint64_t v7 = *(__int128 **)v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          unint64_t v8 = (__int128 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }

        while (!v9);
      }

      uint64_t v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>( uint64_t **a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  unint64_t v11 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  size_t v12 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  size_t v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>( a1,  a2,  &v12,  &v11,  a3);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    memset(v10, 170, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>( (uint64_t)a1,  a4,  v10);
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at( a1,  (uint64_t)v12,  v8,  v10[0]);
    unint64_t v7 = v10[0];
    v10[0] = 0LL;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]( (uint64_t)v10,  0LL);
  }

  return v7;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>( uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, uint64_t a5)
{
  BOOL v9 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2
    || (*(char *)(a5 + 23) >= 0 ? (unint64_t v11 = (const char *)a5) : (unint64_t v11 = *(const char **)a5),
        *((char *)a2 + 55) >= 0 ? (size_t v12 = (const char *)(a2 + 4)) : (size_t v12 = (const char *)a2[4]),
        strcasecmp(v11, v12) < 0))
  {
    int v13 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      int v15 = a2;
LABEL_29:
      if (v13)
      {
        *a3 = v15;
        return v15 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v13)
    {
      int v14 = (uint64_t *)*a2;
      do
      {
        int v15 = v14;
        int v14 = (uint64_t *)v14[1];
      }

      while (v14);
    }

    else
    {
      CFDictionaryRef v18 = a2;
      do
      {
        int v15 = (uint64_t *)v18[2];
        BOOL v19 = *v15 == (void)v18;
        CFDictionaryRef v18 = v15;
      }

      while (v19);
    }

    else {
      uint64_t v20 = (const char *)v15[4];
    }
    else {
      std::string v21 = *(const char **)a5;
    }
    if (strcasecmp(v20, v21) < 0) {
      goto LABEL_29;
    }
    return std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>( (uint64_t)a1,  a3,  a5);
  }

  if (strcasecmp(v12, v11) < 0)
  {
    uint64_t v16 = a2[1];
    if (v16)
    {
      uint64_t v17 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v17;
        uint64_t v17 = (uint64_t *)*v17;
      }

      while (v17);
    }

    else
    {
      unint64_t v22 = a2;
      do
      {
        a4 = (uint64_t **)v22[2];
        BOOL v19 = *a4 == v22;
        unint64_t v22 = (uint64_t *)a4;
      }

      while (!v19);
    }

    if (a4 == v9
      || (*((char *)a4 + 55) >= 0 ? (uint64_t v23 = (const char *)(a4 + 4)) : (uint64_t v23 = (const char *)a4[4]),
          strcasecmp(v11, v23) < 0))
    {
      if (v16)
      {
        *a3 = (uint64_t *)a4;
      }

      else
      {
        *a3 = a2;
        return a2 + 1;
      }

      return (uint64_t *)a4;
    }

    return std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>( (uint64_t)a1,  a3,  a5);
  }

  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>( uint64_t a1@<X0>, __int128 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  memset(a3, 170, 24);
  size_t v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1866033D4(_Unwind_Exception *a1)
{
}

void *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>( uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    else {
      size_t v6 = *(const char **)a3;
    }
    do
    {
      while (1)
      {
        unint64_t v7 = v4;
        size_t v10 = (void *)v4[4];
        unint64_t v8 = v4 + 4;
        BOOL v9 = v10;
        unint64_t v11 = (const char *)(*((char *)v8 + 23) >= 0 ? v8 : v9);
        if ((strcasecmp(v6, v11) & 0x80000000) == 0) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_15;
        }
      }

      if ((strcasecmp(v11, v6) & 0x80000000) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }

    while (v4);
  }

  else
  {
    unint64_t v7 = (void *)(a1 + 8);
  }

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    this->__r_.__value_.__l.__cap_ = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }

  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__l.__cap_ = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }

  return this;
}

void sub_18660350C(_Unwind_Exception *exception_object)
{
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy( uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy( a1,  *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy( a1,  a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }

void std::__shared_ptr_pointer<ctu::Http::HttpSession_impl *,ctu::Http::HttpSession_impl::Deleter,std::allocator<ctu::Http::HttpSession_impl>>::~__shared_ptr_pointer( std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_pointer<ctu::Http::HttpSession_impl *,ctu::Http::HttpSession_impl::Deleter,std::allocator<ctu::Http::HttpSession_impl>>::__on_zero_shared( uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    v2[0] = MEMORY[0x1895F87A8];
    v2[1] = 3221225472LL;
    v2[2] = ___ZN3ctu4Http16HttpSession_impl7DeleterclEPS1__block_invoke;
    v2[3] = &__block_descriptor_40_e5_v8__0l;
    v2[4] = v1;
    ctu::Http::HttpSession_impl::addOperation(v1, (uint64_t)v2);
  }

uint64_t std::__shared_ptr_pointer<ctu::Http::HttpSession_impl *,ctu::Http::HttpSession_impl::Deleter,std::allocator<ctu::Http::HttpSession_impl>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void std::__shared_ptr_pointer<BOOL *,std::shared_ptr<BOOL>::__shared_ptr_default_delete<BOOL,BOOL>,std::allocator<BOOL>>::~__shared_ptr_pointer( std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_pointer<BOOL *,std::shared_ptr<BOOL>::__shared_ptr_default_delete<BOOL,BOOL>,std::allocator<BOOL>>::__on_zero_shared( uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<BOOL *,std::shared_ptr<BOOL>::__shared_ptr_default_delete<BOOL,BOOL>,std::allocator<BOOL>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void std::__shared_ptr_pointer<ctu::Http::HttpSessionRequest *,ctu::Http::HttpSessionRequest::Deleter,std::allocator<ctu::Http::HttpSessionRequest>>::~__shared_ptr_pointer( std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_pointer<ctu::Http::HttpSessionRequest *,ctu::Http::HttpSessionRequest::Deleter,std::allocator<ctu::Http::HttpSessionRequest>>::__on_zero_shared( uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ctu::Http::HttpSessionRequest *,ctu::Http::HttpSessionRequest::Deleter,std::allocator<ctu::Http::HttpSessionRequest>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void std::__shared_ptr_pointer<ctu::Http::HttpResponseConcrete *,std::shared_ptr<ctu::Http::HttpResponseConcrete>::__shared_ptr_default_delete<ctu::Http::HttpResponseConcrete,ctu::Http::HttpResponseConcrete>,std::allocator<ctu::Http::HttpResponseConcrete>>::~__shared_ptr_pointer( std::__shared_weak_count *a1)
{
}

uint64_t std::__shared_ptr_pointer<ctu::Http::HttpResponseConcrete *,std::shared_ptr<ctu::Http::HttpResponseConcrete>::__shared_ptr_default_delete<ctu::Http::HttpResponseConcrete,ctu::Http::HttpResponseConcrete>,std::allocator<ctu::Http::HttpResponseConcrete>>::__on_zero_shared( uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ctu::Http::HttpResponseConcrete *,std::shared_ptr<ctu::Http::HttpResponseConcrete>::__shared_ptr_default_delete<ctu::Http::HttpResponseConcrete,ctu::Http::HttpResponseConcrete>,std::allocator<ctu::Http::HttpResponseConcrete>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  __int128 v4 = *(char *)(a2 + 23) >= 0 ? (const char *)a2 : *(const char **)a2;
  uint64_t v5 = a1 + 8;
  do
  {
    else {
      __int128 v6 = *(const char **)(v3 + 32);
    }
    int v7 = strcasecmp(v6, v4);
    unint64_t v8 = (uint64_t *)(v3 + 8);
    if (v7 >= 0)
    {
      unint64_t v8 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }

    uint64_t v3 = *v8;
  }

  while (*v8);
  if (v2 == v5) {
    return v2;
  }
  BOOL v9 = *(char *)(v5 + 55) >= 0 ? (const char *)(v5 + 32) : *(const char **)(v5 + 32);
  if (strcasecmp(v4, v9) < 0) {
    return v2;
  }
  return v5;
}

void ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void ctu::Http::HttpResponseConcrete::~HttpResponseConcrete(ctu::Http::HttpResponseConcrete *this)
{
  *(void *)this = off_189E969F8;
  ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::~SharedRef((const void **)this + 11);
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)this + 10);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy( (uint64_t)this + 16,  *((void **)this + 3));
}

{
  void *v1;
  ctu::Http::HttpResponseConcrete::~HttpResponseConcrete(this);
  operator delete(v1);
}

ctu::Http::HttpResponseConcrete *ctu::Http::HttpResponseConcrete::HttpResponseConcrete( ctu::Http::HttpResponseConcrete *this, NSHTTPURLResponse *a2)
{
  *(void *)this = off_189E969F8;
  *((void *)this + 3) = 0LL;
  *((void *)this + 2) = (char *)this + 24;
  uint64_t v3 = (uint64_t *)((char *)this + 16);
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 4) = 0LL;
  *((_DWORD *)this + 10) = -1;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_WORD *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = -1;
  if (a2)
  {
    uint64_t v5 = -[NSHTTPURLResponse allHeaderFields](a2, "allHeaderFields");
    v10[0] = 0LL;
    v10[1] = 0LL;
    context[1] = v10;
    BOOL v9 = v10;
    context[0] = &v9;
    if (v5)
    {
      CFDictionaryApplyFunction( (CFDictionaryRef)v5,  (CFDictionaryApplierFunction)ctu::cf::_Applier_InsertMapDefault<std::string,std::string,std::insert_iterator<std::map<std::string,std::string,ctu::Http::case_insensitive_key_comparer,std::allocator<std::pair<std::string const,std::string>>>>>,  context);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::swap( v3,  (uint64_t)&v9);
      __int128 v6 = (void *)v10[0];
    }

    else
    {
      __int128 v6 = 0LL;
    }

    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy( (uint64_t)&v9,  v6);
    *((_DWORD *)this + 10) = -[NSHTTPURLResponse statusCode](a2, "statusCode");
  }

  return this;
}

void sub_186603990( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

const void **ctu::cf::CFSharedRef<__CFData const>::operator=(const void **a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  __int128 v4 = *a1;
  *a1 = v3;
  __int128 v6 = v4;
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(&v6);
  return a1;
}

unint64_t ctu::Http::HttpResponseConcrete::getResponseString@<X0>( ctu::Http::HttpResponseConcrete *this@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = *((void *)this + 10);
  uint64_t v5 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  if (!result) {
    uint64_t v5 = 0LL;
  }
  if (!v5)
  {
    *(void *)a2 = 0LL;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    return result;
  }

  BytePtr = CFDataGetBytePtr((CFDataRef)result);
  unint64_t result = CFDataGetLength(*((CFDataRef *)this + 10));
  if (result >= 0x7FFFFFFFFFFFFFF8LL) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v7 = result;
  if (result >= 0x17)
  {
    uint64_t v8 = (result & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v8 = result | 7;
    }
    uint64_t v9 = v8 + 1;
    unint64_t result = (unint64_t)operator new(v8 + 1);
    *((void *)a2 + 1) = v7;
    *((void *)a2 + 2) = v9 | 0x8000000000000000LL;
    *(void *)a2 = result;
    a2 = (_BYTE *)result;
    goto LABEL_12;
  }

  a2[23] = result;
  if (result)
  {
    do
    {
LABEL_12:
      char v10 = *BytePtr++;
      *a2++ = v10;
      --v7;
    }

    while (v7);
  }

  *a2 = 0;
  return result;
}

const void **ctu::cf::CFSharedRef<__CFError>::operator=(const void **a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  __int128 v4 = *a1;
  *a1 = v3;
  __int128 v6 = v4;
  ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::~SharedRef(&v6);
  return a1;
}

uint64_t ctu::Http::HttpResponseConcrete::getResult(ctu::Http::HttpResponseConcrete *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t ctu::Http::HttpResponseConcrete::getHttpResponseCode(ctu::Http::HttpResponseConcrete *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t ctu::Http::HttpResponseConcrete::getRawErrorCode(ctu::Http::HttpResponseConcrete *this)
{
  return *((void *)this + 6);
}

const void **ctu::Http::HttpResponseConcrete::getResponseCFData@<X0>( const void **this@<X0>, const void **a2@<X8>)
{
  return ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::SharedRef( a2,  this + 10);
}

uint64_t *ctu::Http::HttpResponseConcrete::getResponseHeaders@<X0>( ctu::Http::HttpResponseConcrete *this@<X0>, uint64_t *a2@<X8>)
{
  return std::map<std::string,std::string,ctu::Http::case_insensitive_key_comparer,std::allocator<std::pair<std::string const,std::string>>>::map[abi:ne180100]( a2,  (uint64_t)this + 16);
}

void ctu::Http::HttpResponseConcrete::getResponseStatusLine( ctu::Http::HttpResponseConcrete *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 7), *((void *)this + 8));
  }

  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 56);
    a2->__r_.__value_.__l.__cap_ = *((void *)this + 9);
  }

CFTypeRef ctu::Http::HttpResponseConcrete::getErrorRef@<X0>( ctu::Http::HttpResponseConcrete *this@<X0>, void *a2@<X8>)
{
  CFTypeRef result = (CFTypeRef)*((void *)this + 11);
  *a2 = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

uint64_t ctu::Http::HttpResponseConcrete::getTLSNegotiatedCipherSuite(ctu::Http::HttpResponseConcrete *this)
{
  return *((unsigned __int16 *)this + 48);
}

const void **ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::~SharedRef( const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void ctu::cf::_Applier_InsertMapDefault<std::string,std::string,std::insert_iterator<std::map<std::string,std::string,ctu::Http::case_insensitive_key_comparer,std::allocator<std::pair<std::string const,std::string>>>>>( __CFString *cf, __CFString *a2, uint64_t a3)
{
  *(_OWORD *)BOOL v19 = 0u;
  __int128 v20 = 0u;
  *(_OWORD *)CFDictionaryRef v18 = 0u;
  if (ctu::cf::assign((std::string *)v18, cf))
  {
    ctu::cf::assign((std::string *)&v19[1], a2);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string,std::string,0>(&v15, (__int128 *)v18);
    __int128 v6 = *(uint64_t ***)a3;
    uint64_t v5 = *(uint64_t **)(a3 + 8);
    uint64_t v23 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    int v24 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    unint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>( v6,  v5,  &v24,  &v23,  (uint64_t)&v15);
    uint64_t v8 = *v7;
    if (!*v7)
    {
      unint64_t v22 = 0xAAAAAAAAAAAAAA00LL;
      uint64_t v9 = (char *)operator new(0x50uLL);
      v21[0] = v9;
      v21[1] = v6 + 1;
      char v10 = (std::string *)(v9 + 32);
      if ((char)v15.__r_.__value_.__s.__size_ < 0)
      {
        std::string::__init_copy_ctor_external(v10, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
        unint64_t v11 = (uint64_t *)v21[0];
      }

      else
      {
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
        *((void *)v9 + 6) = v15.__r_.__value_.__l.__cap_;
        unint64_t v11 = (uint64_t *)v9;
      }

      *(_OWORD *)(v9 + ++*(_DWORD *)(this + 56) = *(_OWORD *)__p;
      *((void *)v9 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 9) = v17;
      __p[1] = 0LL;
      uint64_t v17 = 0LL;
      __p[0] = 0LL;
      LOBYTE(v22) = 1;
      std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at( v6,  (uint64_t)v24,  v7,  v11);
      uint64_t v8 = (uint64_t *)v21[0];
      v21[0] = 0LL;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]( (uint64_t)v21,  0LL);
    }

    *(void *)(a3 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v8;
    size_t v12 = (uint64_t *)v8[1];
    if (v12)
    {
      do
      {
        uint64_t v13 = v12;
        size_t v12 = (uint64_t *)*v12;
      }

      while (v12);
    }

    else
    {
      do
      {
        uint64_t v13 = (uint64_t *)v8[2];
        BOOL v14 = *v13 == (void)v8;
        uint64_t v8 = v13;
      }

      while (!v14);
    }

    *(void *)(a3 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v13;
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
  }

  if (SHIBYTE(v20) < 0) {
    operator delete(v19[1]);
  }
  if (SHIBYTE(v19[0]) < 0) {
    operator delete(v18[0]);
  }
}

void sub_186603D9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::swap( uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  std::string *result = *(void *)a2;
  *(void *)a2 = v2;
  uint64_t v5 = result[1];
  uint64_t v4 = result[2];
  CFTypeRef v3 = result + 1;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = v5;
  *(void *)(a2 + 16) = v4;
  if (result[2]) {
    CFTypeRef result = (uint64_t *)(*v3 + 16LL);
  }
  std::string *result = (uint64_t)v3;
  __int128 v6 = (void *)(*(void *)(a2 + 8) + 16LL);
  if (!v4) {
    __int128 v6 = (void *)a2;
  }
  void *v6 = a2 + 8;
  return result;
}

ctu::ns::AutoPool *ctu::ns::AutoPool::AutoPool(ctu::ns::AutoPool *this)
{
  *(void *)this = objc_alloc_init(MEMORY[0x1896077E8]);
  return this;
}

{
  *(void *)this = objc_alloc_init(MEMORY[0x1896077E8]);
  return this;
}

void ctu::ns::AutoPool::~AutoPool(void **this)
{
  uint64_t v1 = *this;
  if (v1) {
}
  }

void *ctu::ns::AutoPool::AutoPool(void *result, void *a2)
{
  std::string *result = *a2;
  *a2 = 0LL;
  return result;
}

{
  std::string *result = *a2;
  *a2 = 0LL;
  return result;
}

void **ctu::ns::AutoPool::operator=(void **a1, void **a2)
{
  CFTypeRef v3 = *a2;
  *a2 = 0LL;
  uint64_t v4 = *a1;
  *a1 = v3;
  __int128 v6 = v4;
  ctu::ns::AutoPool::~AutoPool(&v6);
  return a1;
}

uint64_t *ctu::ns::swap(uint64_t *this, ctu::ns::AutoPool *a2, ctu::ns::AutoPool *a3)
{
  uint64_t v3 = *this;
  *this = *(void *)a2;
  *(void *)a2 = v3;
  return this;
}

double ctu::LogMessageBuffer::LogMessageBuffer(ctu::LogMessageBuffer *this)
{
  *((void *)this + 6) = 0LL;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

{
  double result;
  *((void *)this + 6) = 0LL;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

std::string *ctu::LogMessageBuffer::LogMessageBuffer(std::string *this, std::string *__str)
{
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = 0u;
  p_CFIndex size = (uint64_t *)&this[1].__r_.__value_.__l.__size_;
  this[2].__r_.__value_.__r.__words[0] = 0LL;
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this->__r_.__value_.__r.__words[2] = 0u;
  std::string::pointer data = __str[1].__r_.__value_.__l.__data_;
  if (data)
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)(data + 8), &v19);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v19;
    this->__r_.__value_.__l.__cap_ = v20;
  }

  else
  {
    std::string::operator=(this, __str);
  }

  if (this != __str)
  {
    CFIndex size = (__int128 *)__str[1].__r_.__value_.__l.__size_;
    std::string::size_type cap = (__int128 *)__str[1].__r_.__value_.__l.__cap_;
    std::string::pointer v8 = this[2].__r_.__value_.__l.__data_;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)cap - (char *)size) >> 3);
    char v10 = (std::string *)this[1].__r_.__value_.__l.__size_;
    if (0xAAAAAAAAAAAAAAABLL * ((v8 - (std::string::pointer)v10) >> 3) < v9)
    {
      if (v10)
      {
        std::vector<std::string>::__clear[abi:ne180100](p_size);
        operator delete((void *)*p_size);
        std::string::pointer v8 = 0LL;
        *p_CFIndex size = 0LL;
        p_size[1] = 0LL;
        p_size[2] = 0LL;
      }

      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)v8 >> 3);
      uint64_t v12 = 2 * v11;
      if (2 * v11 <= v9) {
        uint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)cap - (char *)size) >> 3);
      }
      if (v11 >= 0x555555555555555LL) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v12;
      }
      std::vector<std::string>::__vallocate[abi:ne180100](p_size, v13);
      BOOL v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>( (uint64_t)&this[2],  size,  cap,  (std::string *)this[1].__r_.__value_.__l.__cap_);
      goto LABEL_19;
    }

    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(this[1].__r_.__value_.__l.__cap_ - (void)v10) >> 3) < v9)
    {
      uint64_t v15 = (std::string *)((char *)size + 8 * ((uint64_t)(this[1].__r_.__value_.__l.__cap_ - (void)v10) >> 3));
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>( (std::string *)size,  v15,  v10);
      BOOL v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>( (uint64_t)&this[2],  (__int128 *)v15,  cap,  (std::string *)this[1].__r_.__value_.__l.__cap_);
LABEL_19:
      this[1].__r_.__value_.__l.__cap_ = (std::string::size_type)v14;
      return this;
    }

    uint64_t v16 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>( (std::string *)size,  (std::string *)cap,  v10);
    for (std::string::size_type i = this[1].__r_.__value_.__l.__cap_; (std::string *)i != v16; i -= 24LL)
    {
    }

    this[1].__r_.__value_.__l.__cap_ = (std::string::size_type)v16;
  }

  return this;
}

void sub_18660414C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  uint64_t v12 = *(void *)(v9 + 24);
  *(void *)(v9 + memset(&context, 0, 24) = 0LL;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::LogMessageBuffer::LogMessageBuffer(uint64_t a1, ctu::LogMessageBuffer *a2)
{
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = 0LL;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ctu::LogMessageBuffer::swap((ctu::LogMessageBuffer *)a1, a2);
  return a1;
}

{
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = 0LL;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ctu::LogMessageBuffer::swap((ctu::LogMessageBuffer *)a1, a2);
  return a1;
}

__n128 ctu::LogMessageBuffer::swap(ctu::LogMessageBuffer *this, ctu::LogMessageBuffer *a2)
{
  uint64_t v2 = *(void *)this;
  __n128 result = *(__n128 *)((char *)this + 8);
  __int128 v4 = *(_OWORD *)a2;
  *((void *)this + 2) = *((void *)a2 + 2);
  *(_OWORD *)this = v4;
  *(void *)a2 = v2;
  *(__n128 *)((char *)a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = result;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  return result;
}

ctu::LogMessageBuffer *ctu::LogMessageBuffer::operator=( ctu::LogMessageBuffer *a1, ctu::LogMessageBuffer *a2)
{
  return a1;
}

void ctu::LogMessageBuffer::~LogMessageBuffer(ctu::LogMessageBuffer *this)
{
  uint64_t v3 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
}

__n128 ctu::LogMessageBuffer::createWithFormat@<Q0>(ctu::LogMessageBuffer *this@<X0>, uint64_t a2@<X8>, ...)
{
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)a2 = v3;
  ctu::LogMessageBuffer::vCreateWithFormat(this, va, a2);
  return result;
}

void ctu::LogMessageBuffer::vCreateWithFormat( ctu::LogMessageBuffer *this@<X0>, va_list a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(void *)(a3 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = 0LL;
  std::string::resize((std::string *)a3, 0x40uLL, 0);
  int v6 = *(char *)(a3 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (char *)a3;
  }
  else {
    uint64_t v7 = *(char **)a3;
  }
  if (v6 >= 0) {
    size_t v8 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v8 = *(void *)(a3 + 8);
  }
  int v9 = vsnprintf(v7, v8, (const char *)this, a2);
  std::string::size_type v10 = v9;
  unint64_t v11 = *(unsigned __int8 *)(a3 + 23);
  if ((v11 & 0x80u) != 0LL) {
    unint64_t v11 = *(void *)(a3 + 8);
  }
  if (v11 <= v9)
  {
    std::string::resize((std::string *)a3, v9 + 1, 0);
    int v12 = *(char *)(a3 + 23);
    if (v12 >= 0) {
      unint64_t v13 = (char *)a3;
    }
    else {
      unint64_t v13 = *(char **)a3;
    }
    if (v12 >= 0) {
      size_t v14 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      size_t v14 = *(void *)(a3 + 8);
    }
    std::string::size_type v10 = vsnprintf(v13, v14, (const char *)this, a2);
  }

  std::string::resize((std::string *)a3, v10, 0);
}

void sub_186604418(_Unwind_Exception *a1)
{
}

BOOL ctu::LogMessageBuffer::empty(ctu::LogMessageBuffer *this)
{
  if (*((void *)this + 3)) {
    return 0LL;
  }
  else {
    uint64_t v2 = *((unsigned __int8 *)this + 23);
  }
  return v2 == 0;
}

ctu::LogMessageBuffer *ctu::LogMessageBuffer::str(ctu::LogMessageBuffer *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(v2 + 8, &v5);
    *(_OWORD *)this = v5;
    uint64_t v3 = *((void *)this + 3);
    *((void *)this + 2) = v6;
    *((void *)this + 3) = 0LL;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

  return this;
}

uint64_t ctu::LogMessageBuffer::takeMetadata(ctu::LogMessageBuffer *this)
{
  return (uint64_t)this + 32;
}

uint64_t ctu::LogMessageBuffer::operator std::ostream &(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (!result)
  {
    uint64_t v3 = (uint64_t *)operator new(0x108uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + memset(&context, 0, 24) = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
      uint64_t v3 = *(uint64_t **)(a1 + 24);
    }

    uint64_t v5 = *v3;
    *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 8) &= ~0x1000u;
    *(_DWORD *)((char *)v3 + *(void *)(v5 - 24) + 8) |= 1u;
    int v6 = *(char *)(a1 + 23);
    if (v6 >= 0) {
      uint64_t v7 = a1;
    }
    else {
      uint64_t v7 = *(void *)a1;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v7, v8);
    return *(void *)(a1 + 24);
  }

  return result;
}

void sub_186604580(_Unwind_Exception *a1)
{
}

std::string *ctu::LogMessageBuffer::appendString(std::string *this, uint64_t a2)
{
  std::string::pointer data = this[1].__r_.__value_.__l.__data_;
  std::string::size_type v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    std::string::size_type v5 = *(unsigned __int8 *)(a2 + 23);
  }

  else
  {
    a2 = *(void *)a2;
    std::string::size_type v5 = v4;
  }

  if (data) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(data, a2, v5);
  }
  else {
    std::string::append(this, (const std::string::value_type *)a2, v5);
  }
  return this;
}

std::string *ctu::LogMessageBuffer::appendString(std::string *this, const char *__s)
{
  std::string::pointer data = this[1].__r_.__value_.__l.__data_;
  size_t v5 = strlen(__s);
  if (data) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(data, (uint64_t)__s, v5);
  }
  else {
    std::string::append(this, __s, v5);
  }
  return this;
}

std::string *ctu::LogMessageBuffer::appendChar(std::string *this, std::string::value_type a2)
{
  std::string::pointer data = this[1].__r_.__value_.__l.__data_;
  if (data)
  {
    std::string::value_type v5 = a2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(data, (uint64_t)&v5, 1LL);
  }

  else
  {
    std::string::push_back(this, a2);
  }

  return this;
}

uint64_t ctu::LogMessageBuffer::addMetaData(uint64_t a1, __int128 *a2)
{
  unint64_t v6 = *(void *)(a1 + 48);
  std::string::size_type v4 = (std::allocator<std::string> *)(a1 + 48);
  unint64_t v5 = v6;
  unint64_t v7 = *((void *)v4 - 1);
  if (v7 >= v6)
  {
    std::string::size_type v10 = (std::vector<std::string> *)((char *)v4 - 16);
    uint64_t v11 = *((void *)v4 - 2);
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v11) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v11) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555LL) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    __v.__end_cap_.__value_ = v4;
    if (v15) {
      uint64_t v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v4, v15);
    }
    else {
      uint64_t v16 = 0LL;
    }
    uint64_t v17 = v16 + v12;
    __v.__first_ = v16;
    __v.__begin_ = v17;
    __v.__end_cap_.__value_ = &v16[v15];
    __int128 v18 = *a2;
    v17->__r_.__value_.__l.__cap_ = *((void *)a2 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    __v.__end_ = v17 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v10, &__v);
    unint64_t v9 = *(void *)(a1 + 40);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }

  else
  {
    __int128 v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    unint64_t v9 = v7 + 24;
    *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = v7 + 24;
  }

  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = v9;
  return a1;
}

{
  std::allocator<std::string> *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  std::vector<std::string> *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::string *v16;
  std::string *v17;
  __int128 v18;
  std::__split_buffer<std::string> __v;
  unint64_t v6 = *(void *)(a1 + 48);
  std::string::size_type v4 = (std::allocator<std::string> *)(a1 + 48);
  unint64_t v5 = v6;
  unint64_t v7 = *((void *)v4 - 1);
  if (v7 >= v6)
  {
    std::string::size_type v10 = (std::vector<std::string> *)((char *)v4 - 16);
    uint64_t v11 = *((void *)v4 - 2);
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v11) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v11) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555LL) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    __v.__end_cap_.__value_ = v4;
    if (v15) {
      uint64_t v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v4, v15);
    }
    else {
      uint64_t v16 = 0LL;
    }
    uint64_t v17 = v16 + v12;
    __v.__first_ = v16;
    __v.__begin_ = v17;
    __v.__end_cap_.__value_ = &v16[v15];
    __int128 v18 = *a2;
    v17->__r_.__value_.__l.__cap_ = *((void *)a2 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    __v.__end_ = v17 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v10, &__v);
    unint64_t v9 = *(void *)(a1 + 40);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }

  else
  {
    __int128 v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    unint64_t v9 = v7 + 24;
    *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = v7 + 24;
  }

  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = v9;
  return a1;
}

void sub_1866047B8( _Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1866048F8( _Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

__n128 ctu::LogMessageBuffer::merge(ctu::LogMessageBuffer *this, const ctu::LogMessageBuffer *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (v4)
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(v4 + 8, &__p);
    if (SHIBYTE(__p.__end_) >= 0) {
      std::__split_buffer<std::string>::pointer p_p = (std::__split_buffer<std::string>::pointer)&__p;
    }
    else {
      std::__split_buffer<std::string>::pointer p_p = __p.__first_;
    }
    if (SHIBYTE(__p.__end_) >= 0) {
      std::string::size_type end_high = HIBYTE(__p.__end_);
    }
    else {
      std::string::size_type end_high = (std::string::size_type)__p.__begin_;
    }
    std::string::append((std::string *)this, (const std::string::value_type *)p_p, end_high);
    if (SHIBYTE(__p.__end_) < 0) {
      operator delete(__p.__first_);
    }
  }

  else
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      unint64_t v9 = (const std::string::value_type *)a2;
    }
    else {
      unint64_t v9 = *(const std::string::value_type **)a2;
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      std::string::size_type v10 = *((void *)a2 + 1);
    }
    std::string::append((std::string *)this, v9, v10);
  }

  uint64_t v11 = (const std::string *)*((void *)a2 + 4);
  unint64_t v12 = (const std::string *)*((void *)a2 + 5);
  if ((char *)v12 - (char *)v11 >= 1)
  {
    uint64_t v13 = *((void *)this + 4);
    unint64_t v14 = (std::string *)*((void *)this + 5);
    uint64_t v15 = v12 - v11;
    uint64_t v16 = *((void *)this + 6);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v14) >> 3)) >= v15)
    {
      if (v15 <= 0)
      {
        unint64_t v25 = &v11[v15];
        CFIndex v26 = (__n128 *)*((void *)this + 5);
        CFStringRef v27 = &v14[v15];
        int v28 = (__n128 *)((char *)v26 - 24 * v15);
        unint64_t v29 = v26;
        if (v28 < (__n128 *)v14)
        {
          unint64_t v29 = (__n128 *)*((void *)this + 5);
          do
          {
            __n128 result = *v28;
            v29[1].n128_u64[0] = v28[1].n128_u64[0];
            *unint64_t v29 = result;
            unint64_t v29 = (__n128 *)((char *)v29 + 24);
            v28->n128_u64[1] = 0LL;
            v28[1].n128_u64[0] = 0LL;
            v28->n128_u64[0] = 0LL;
            int v28 = (__n128 *)((char *)v28 + 24);
          }

          while (v28 < (__n128 *)v14);
        }

        *((void *)this + 5) = v29;
        if (v26 != (__n128 *)v27)
        {
          unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (char *)v27) >> 3);
          CFStringRef v31 = &v26[-2].n128_i8[8];
          uint64_t v32 = v30;
          do
          {
            if (v31[23] < 0) {
              operator delete(*(void **)v31);
            }
            unint64_t v33 = (__n128 *)&v14[v32 - 1];
            __n128 result = *v33;
            *((void *)v31 + 2) = v14[v32 - 1].__r_.__value_.__l.__cap_;
            *(__n128 *)CFStringRef v31 = result;
            v31 -= 24;
            v14[v32 - 1].__r_.__value_.__s.__size_ = 0;
            v33->n128_u8[0] = 0;
            --v32;
          }

          while (v32 * 24);
        }

        for (; v11 != v25; ++v14)
          std::string::operator=(v14, v11++);
      }

      else
      {
        v47[0] = *((void *)this + 5);
        std::__split_buffer<std::string>::pointer v49 = v14;
        __p.__first_ = (std::__split_buffer<std::string>::pointer)((char *)this + 48);
        __p.__begin_ = (std::__split_buffer<std::string>::pointer)&v49;
        __p.__end_ = (std::__split_buffer<std::string>::pointer)v47;
        __p.__end_cap_.__value_ = (std::string *)0xAAAAAAAAAAAAAA00LL;
        unint64_t v22 = v14;
        if (v11 != v12)
        {
          uint64_t v23 = v11;
          do
          {
            if ((char)v23->__r_.__value_.__s.__size_ < 0)
            {
              std::string::__init_copy_ctor_external( v22,  v23->__r_.__value_.__l.__data_,  v23->__r_.__value_.__l.__size_);
              unint64_t v22 = (std::string *)v47[0];
            }

            else
            {
              __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
              v22->__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
              *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v24;
            }

            ++v23;
            v47[0] = ++v22;
          }

          while (v23 != v12);
        }

        LOBYTE(__p.__end_cap_.__value_) = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&__p);
        *((void *)this + 5) = v22;
      }
    }

    else
    {
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v14 - v13) >> 3);
      if (v17 + v15 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v13) >> 3);
      uint64_t v19 = 2 * v18;
      if (2 * v18 <= v17 + v15) {
        uint64_t v19 = v17 + v15;
      }
      if (v18 >= 0x555555555555555LL) {
        unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v20 = v19;
      }
      __p.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 48);
      if (v20) {
        std::string v21 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>( (uint64_t)this + 48,  v20);
      }
      else {
        std::string v21 = 0LL;
      }
      BOOL v34 = v21 + v17;
      __p.__first_ = v21;
      __p.__begin_ = v34;
      __p.__end_ = v34;
      __p.__end_cap_.__value_ = &v21[v20];
      uint64_t v35 = 3 * v15;
      unint64_t v36 = &v34[v15];
      uint64_t v37 = 8 * v35;
      do
      {
        if ((char)v11->__r_.__value_.__s.__size_ < 0)
        {
          std::string::__init_copy_ctor_external(v34, v11->__r_.__value_.__l.__data_, v11->__r_.__value_.__l.__size_);
        }

        else
        {
          __int128 v38 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
          v34->__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v38;
        }

        ++v34;
        ++v11;
        v37 -= 24LL;
      }

      while (v37);
      __p.__end_ = v36;
      std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>( (uint64_t)this + 48,  (uint64_t)v14,  (uint64_t)v14,  *((void *)this + 4),  *((void *)this + 4),  (uint64_t)__p.__begin_,  (uint64_t)__p.__begin_);
      __p.__begin_ = v39;
      uint64_t v40 = (std::string *)*((void *)this + 5);
      std::__split_buffer<std::string>::pointer end = __p.__end_;
      std::__split_buffer<std::string>::pointer v48 = __p.__end_;
      std::__split_buffer<std::string>::pointer v49 = __p.__end_;
      v47[0] = (char *)this + 48;
      v47[1] = &v48;
      v47[2] = &v49;
      v47[3] = 0xAAAAAAAAAAAAAA01LL;
      if (v40 != v14)
      {
        do
        {
          __int128 v42 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          end->__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v42;
          ++end;
          v14->__r_.__value_.__l.__size_ = 0LL;
          v14->__r_.__value_.__l.__cap_ = 0LL;
          v14->__r_.__value_.__r.__words[0] = 0LL;
          ++v14;
        }

        while (v14 != v40);
        std::__split_buffer<std::string>::pointer v49 = end;
      }

      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v47);
      __int128 v43 = *((_OWORD *)this + 2);
      uint64_t value = __p.__end_cap_.__value_;
      *((void *)this + 4) = __p.__begin_;
      *((void *)this + 5) = end;
      *(_OWORD *)&__p.__begin_ = v43;
      __int128 v45 = (std::string *)*((void *)this + 6);
      *((void *)this + 6) = value;
      __p.__end_cap_.__value_ = v45;
      __p.__first_ = (std::__split_buffer<std::string>::pointer)v43;
      std::__split_buffer<std::string>::~__split_buffer(&__p);
    }
  }

  return result;
}

void sub_186604D14( _Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

__int128 *ctu::LogMessageBuffer::merge(uint64_t a1, uint64_t a2)
{
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    unint64_t v5 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v5 = *(const std::string::value_type **)a2;
  }
  if (v4 >= 0) {
    std::string::size_type v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v6 = *(void *)(a2 + 8);
  }
  std::string::append((std::string *)a1, v5, v6);
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::back_insert_iterator<std::vector<std::string>>,0>( *(__int128 **)(a2 + 32),  *(__int128 **)(a2 + 40),  (std::vector<std::string> *)(a1 + 32));
}

uint64_t ctu::operator<<(uint64_t a1)
{
  return a1;
}

{
  ctu::LogMessageBuffer::operator std::ostream &(a1);
  std::ostream::operator<<();
  return a1;
}

{
  ctu::LogMessageBuffer::operator std::ostream &(a1);
  std::ostream::operator<<();
  return a1;
}

{
  ctu::LogMessageBuffer::operator std::ostream &(a1);
  std::ostream::operator<<();
  return a1;
}

{
  ctu::LogMessageBuffer::operator std::ostream &(a1);
  std::ostream::operator<<();
  return a1;
}

{
  ctu::LogMessageBuffer::operator std::ostream &(a1);
  std::ostream::operator<<();
  return a1;
}

{
  ctu::LogMessageBuffer::operator std::ostream &(a1);
  std::ostream::operator<<();
  return a1;
}

{
  ctu::LogMessageBuffer::operator std::ostream &(a1);
  std::ostream::operator<<();
  return a1;
}

{
  ctu::LogMessageBuffer::operator std::ostream &(a1);
  std::ostream::operator<<();
  return a1;
}

std::string *ctu::operator<<(std::string *a1, int a2)
{
  if (a2) {
    uint64_t v2 = "true";
  }
  else {
    uint64_t v2 = "false";
  }
  return ctu::LogMessageBuffer::appendString(a1, v2);
}

uint64_t ctu::operator<<(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)std::__split_buffer<std::string> __p = *(_OWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
  ctu::LogMessageBuffer::addMetaData(a1, (__int128 *)__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

{
  ctu::LogMessageBuffer::merge(a1, a2);
  return a1;
}

void sub_186604FF4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::operator<<(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = ctu::LogMessageBuffer::operator std::ostream &(a1);
  a2(v4);
  return a1;
}

uint64_t ctu::operator<<(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4 = (char *)ctu::LogMessageBuffer::operator std::ostream &(a1);
  a2(&v4[*(void *)(*(void *)v4 - 24LL)]);
  return a1;
}

ctu::LogMessageBuffer *ctu::operator<<(ctu::LogMessageBuffer *a1, const ctu::LogMessageBuffer *a2)
{
  return a1;
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>( uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  unint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  unint64_t v10 = 0xAAAAAAAAAAAAAA00LL;
  if (a2 != a3)
  {
    std::string::size_type v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }

      else
      {
        __int128 v7 = *v6;
        v4->__r_.__value_.__l.__cap_ = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }

      std::string::size_type v6 = (__int128 *)((char *)v6 + 24);
      unint64_t v12 = ++v4;
    }

    while (v6 != a3);
  }

  LOBYTE(v10) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1866051B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]( uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100]( uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 24LL;
  }

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>( std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    uint64_t v5 = __str;
    do
      std::string::operator=(this++, v5++);
    while (v5 != a2);
  }

  return this;
}

__int128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::back_insert_iterator<std::vector<std::string>>,0>( __int128 *a1, __int128 *a2, std::vector<std::string> *a3)
{
  uint64_t v3 = a1;
  std::string::size_type v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&v6, v3);
    uint64_t v3 = (__int128 *)((char *)v3 + 24);
  }

  while (v3 != v4);
  return v4;
}

std::vector<std::string> **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]( std::vector<std::string> **a1, __int128 *a2)
{
  uint64_t v4 = *a1;
  std::vector<std::string>::pointer end = (*a1)->__end_;
  std::string::size_type v6 = *a1;
  uint64_t value = v6->__end_cap_.__value_;
  p_end_std::string::size_type cap = (std::allocator<std::string> *)&v6->__end_cap_;
  int v8 = value;
  if (end >= value)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v4->__begin_) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v4->__begin_) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555LL) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v15) {
      uint64_t v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v15);
    }
    else {
      uint64_t v16 = 0LL;
    }
    unint64_t v17 = v16 + v12;
    __v.__first_ = v16;
    __v.__begin_ = v17;
    __v.__end_cap_.__value_ = &v16[v15];
    __int128 v18 = *a2;
    v17->__r_.__value_.__l.__cap_ = *((void *)a2 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    __v.__end_ = v17 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v4, &__v);
    uint64_t v11 = v4->__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }

  else
  {
    __int128 v10 = *a2;
    end->__r_.__value_.__l.__cap_ = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    uint64_t v11 = end + 1;
    v4->__end_ = end + 1;
  }

  v4->__end_ = v11;
  return a1;
}

void sub_186605428( _Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void xpc::object::to_string(void **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  v2[0] = a2;
  v2[1] = (std::string *)0xAAAAAAAA00000000LL;
}

void sub_186605480(_Unwind_Exception *exception_object)
{
}

void anonymous namespace'::XpcDescriptionGenerator::describe(std::string **this, void *a2)
{
  uint64_t v4 = MEMORY[0x186E3CD4C](a2);
  if (v4 == MEMORY[0x1895F9250])
  {
    std::string::push_back(*this, 123);
    if (xpc_dictionary_get_count(a2))
    {
      std::string::size_type v5 = MEMORY[0x1895F87A8];
      ++*((_DWORD *)this + 2);
      applier.__r_.__value_.__r.__words[0] = v5;
      applier.__r_.__value_.__l.__size_ = 0x40000000LL;
      applier.__r_.__value_.__l.__cap_ = (std::string::size_type)___ZN12_GLOBAL__N_123XpcDescriptionGenerator19describe_dictionaryEPv_block_invoke;
      uint64_t v41 = &__block_descriptor_tmp_16;
      __int128 v42 = this;
      xpc_dictionary_apply(a2, &applier);
      --*((_DWORD *)this + 2);
      std::string::size_type v6 = *this;
      else {
        std::string::size_type size = (*this)->__r_.__value_.__s.__size_;
      }
      std::string::resize(v6, size - 1, 0);
      std::string::push_back(*this, 10);
      std::string::append(*this, *((int *)this + 2), 9);
    }

    std::string v21 = *this;
    std::string::value_type v22 = 125;
    goto LABEL_44;
  }

  if (v4 == MEMORY[0x1895F92E8])
  {
    string_ptr = xpc_string_get_string_ptr(a2);
    size_t length = xpc_string_get_length(a2);
    std::string::push_back(*this, 34);
    std::string::append(*this, string_ptr, length);
    std::string::push_back(*this, 34);
    return;
  }

  if (v4 == MEMORY[0x1895F9280])
  {
    int64_t value = xpc_int64_get_value(a2);
    uint64_t v11 = *this;
    std::to_string(&applier, value);
    if ((applier.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_std::string applier = &applier;
    }
    else {
      p_std::string applier = (std::string *)applier.__r_.__value_.__r.__words[0];
    }
    if ((applier.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v13 = applier.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v13 = applier.__r_.__value_.__l.__size_;
    }
LABEL_25:
    std::string::append(v11, (const std::string::value_type *)p_applier, v13);
    return;
  }

  if (v4 == MEMORY[0x1895F9220])
  {
    std::string::push_back(*this, 91);
    size_t count = xpc_array_get_count(a2);
    if (!count)
    {
      std::string::push_back(*this, 93);
      return;
    }

    size_t v15 = count;
    unint64_t v16 = 0LL;
    ++*((_DWORD *)this + 2);
    do
    {
      if (v16) {
        std::string::push_back(*this, 44);
      }
      std::string::push_back(*this, 10);
      std::string::append(*this, *((int *)this + 2), 9);
      unint64_t v17 = *this;
      std::to_string(&applier, v16);
      if ((applier.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v18 = &applier;
      }
      else {
        __int128 v18 = (std::string *)applier.__r_.__value_.__r.__words[0];
      }
      if ((applier.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v19 = applier.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v19 = applier.__r_.__value_.__l.__size_;
      }
      std::string::append(v17, (const std::string::value_type *)v18, v19);
      std::string::append(*this, ": ", 2uLL);
      xpc_object_t v20 = xpc_array_get_value(a2, v16);
      ++v16;
    }

    while (v15 != v16);
    --*((_DWORD *)this + 2);
    std::string::push_back(*this, 10);
    std::string::append(*this, *((int *)this + 2), 9);
    std::string v21 = *this;
    std::string::value_type v22 = 93;
    goto LABEL_44;
  }

  if (v4 != MEMORY[0x1895F9240])
  {
    if (v4 == MEMORY[0x1895F9228])
    {
      BOOL v28 = xpc_BOOL_get_value(a2);
      if (v28) {
        unint64_t v29 = "true";
      }
      else {
        unint64_t v29 = "false";
      }
      if (v28) {
        std::string::size_type v30 = 4LL;
      }
      else {
        std::string::size_type v30 = 5LL;
      }
      CFStringRef v31 = *this;
      goto LABEL_79;
    }

    if (v4 != MEMORY[0x1895F92F0])
    {
      if (v4 != MEMORY[0x1895F92A8])
      {
        if (v4 == MEMORY[0x1895F9258])
        {
        }

        else if (v4 == MEMORY[0x1895F9248])
        {
        }

        else if (v4 == MEMORY[0x1895F92F8])
        {
        }

        else if (v4 == MEMORY[0x1895F9268])
        {
        }

        else
        {
          xpc_object_t object = a2;
          if (a2) {
            xpc_retain(a2);
          }
          else {
            xpc_object_t object = xpc_null_create();
          }
          unint64_t v36 = *this;
          xpc::object::describe((xpc::object *)&object, &applier);
          if ((applier.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v37 = &applier;
          }
          else {
            uint64_t v37 = (std::string *)applier.__r_.__value_.__r.__words[0];
          }
          if ((applier.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v38 = applier.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v38 = applier.__r_.__value_.__l.__size_;
          }
          std::string::append(v36, (const std::string::value_type *)v37, v38);
          xpc_release(object);
        }

        return;
      }

      CFStringRef v31 = *this;
      unint64_t v29 = "null";
      std::string::size_type v30 = 4LL;
LABEL_79:
      std::string::append(v31, v29, v30);
      return;
    }

    uint64_t v32 = xpc_uint64_get_value(a2);
    unint64_t v33 = *this;
    std::to_string(&applier, v32);
    if ((applier.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      BOOL v34 = &applier;
    }
    else {
      BOOL v34 = (std::string *)applier.__r_.__value_.__r.__words[0];
    }
    if ((applier.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v35 = applier.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v35 = applier.__r_.__value_.__l.__size_;
    }
    std::string::append(v33, (const std::string::value_type *)v34, v35);
    std::string v21 = *this;
    std::string::value_type v22 = 117;
LABEL_44:
    std::string::push_back(v21, v22);
    return;
  }

  bytes_ptr = (ctu *)xpc_data_get_bytes_ptr(a2);
  size_t v24 = xpc_data_get_length(a2);
  std::string::append(*this, "[", 1uLL);
  unint64_t v25 = *this;
  std::to_string(&applier, v24);
  if ((applier.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    CFIndex v26 = &applier;
  }
  else {
    CFIndex v26 = (std::string *)applier.__r_.__value_.__r.__words[0];
  }
  if ((applier.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v27 = applier.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v27 = applier.__r_.__value_.__l.__size_;
  }
  std::string::append(v25, (const std::string::value_type *)v26, v27);
  std::string::append(*this, " bytes]", 7uLL);
  if (v24)
  {
    std::string::append(*this, " ", 1uLL);
    uint64_t v11 = *this;
    ctu::hex_sp(bytes_ptr, v24, &applier);
    if ((applier.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_std::string applier = &applier;
    }
    else {
      p_std::string applier = (std::string *)applier.__r_.__value_.__r.__words[0];
    }
    if ((applier.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v13 = applier.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v13 = applier.__r_.__value_.__l.__size_;
    }
    goto LABEL_25;
  }

void sub_186605AA4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

void anonymous namespace'::XpcDescriptionGenerator::describe_double( std::string **this, xpc_object_t xdouble)
{
  double value = xpc_double_get_value(xdouble);
  uint64_t v4 = *this;
  std::to_string(&v7, value);
  if ((v7.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v5 = &v7;
  }
  else {
    std::string::size_type v5 = (std::string *)v7.__r_.__value_.__r.__words[0];
  }
  if ((v7.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v7.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v7.__r_.__value_.__l.__size_;
  }
  std::string::append(v4, (const std::string::value_type *)v5, size);
}

void sub_186605B6C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *anonymous namespace'::XpcDescriptionGenerator::describe_date( std::string **this, xpc_object_t xdate)
{
  void v9[3] = *MEMORY[0x1895F89C0];
  time_t v7 = xpc_date_get_value(xdate) / 0x3B9ACA00uLL;
  v6.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v6.tm_mon = v3;
  *(_OWORD *)&v6.tm_isdst = v3;
  *(_OWORD *)&v6.tm_sec = v3;
  localtime_r(&v7, &v6);
  memset(v9, 170, 22);
  *(void *)std::string __s = 0xAAAAAAAAAAAAAAAALL;
  strftime(__s, 0x1EuLL, "%F %T %Z", &v6);
  size_t v4 = strlen(__s);
  return std::string::append(*this, __s, v4);
}

std::string *anonymous namespace'::XpcDescriptionGenerator::describe_uuid( std::string **this, xpc_object_t xuuid)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  *(void *)&v8[13] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v7 = v3;
  *(_OWORD *)int v8 = v3;
  bytes = xpc_uuid_get_bytes(xuuid);
  uuid_unparse_lower(bytes, (char *)&v7);
  size_t v5 = strlen((const char *)&v7);
  return std::string::append(*this, (const std::string::value_type *)&v7, v5);
}

void anonymous namespace'::XpcDescriptionGenerator::describe_error(std::string **this, xpc_object_t xdict)
{
  __n128 string = xpc_dictionary_get_string(xdict, (const char *)*MEMORY[0x1895F91B0]);
  std::string::append(*this, "XPC_ERROR(", 0xAuLL);
  size_t v4 = strlen(string);
  std::string::append(*this, string, v4);
  std::string::push_back(*this, 41);
}

void xpc::object::describe(xpc::object *this@<X0>, void *a2@<X8>)
{
  __int128 v3 = (char *)MEMORY[0x186E3CC80](*(void *)this);
  memset(a2, 170, 24);
  std::string::basic_string[abi:ne180100]<0>(a2, v3);
  free(v3);
}

uint64_t ___ZN12_GLOBAL__N_123XpcDescriptionGenerator19describe_dictionaryEPv_block_invoke( uint64_t a1, const char *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  std::string::push_back(*(std::string **)v5, 10);
  std::string::append(*(std::string **)v5, *(int *)(v5 + 8), 9);
  std::string::push_back(*(std::string **)v5, 34);
  size_t v6 = strlen(a2);
  std::string::append(*(std::string **)v5, a2, v6);
  std::string::append(*(std::string **)v5, ": ", 3uLL);
  std::string::push_back(*(std::string **)v5, 44);
  return 1LL;
}

xpc_object_t ctu::LogWriter::getFullConfig@<X0>(void *a1@<X8>)
{
  xpc_object_t result = xpc_null_create();
  *a1 = result;
  return result;
}

uint64_t ctu::LogWriter::getSimpleConfig(ctu::LogWriter *this)
{
  return (*(uint64_t (**)(ctu::LogWriter *))(*(void *)this + 56LL))(this);
}

uint64_t ctu::LogWriter::write(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 24LL))(a1, *a2);
}

__n128 ctu::LogMessage::LogMessage(uint64_t a1, uint64_t a2, char a3, __int128 *a4, __int128 *a5, __n128 *a6)
{
  *(void *)a1 = off_189E96E20;
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = a2;
  *(_BYTE *)(a1 + 16) = a3;
  __int128 v6 = *a4;
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + memset(&context, 0, 24) = v6;
  *((void *)a4 + 1) = 0LL;
  *((void *)a4 + 2) = 0LL;
  *(void *)a4 = 0LL;
  __int128 v7 = *a5;
  *(void *)(a1 + 64) = *((void *)a5 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = v7;
  *((void *)a5 + 1) = 0LL;
  *((void *)a5 + 2) = 0LL;
  *(void *)a5 = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 8std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  __n128 result = *a6;
  *(__n128 *)(a1 + 72) = *a6;
  *(void *)(a1 + 8std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = a6[1].n128_u64[0];
  a6->n128_u64[0] = 0LL;
  a6->n128_u64[1] = 0LL;
  a6[1].n128_u64[0] = 0LL;
  return result;
}

{
  __int128 v6;
  __int128 v7;
  __n128 result;
  *(void *)a1 = off_189E96E20;
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = a2;
  *(_BYTE *)(a1 + 16) = a3;
  __int128 v6 = *a4;
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + memset(&context, 0, 24) = v6;
  *((void *)a4 + 1) = 0LL;
  *((void *)a4 + 2) = 0LL;
  *(void *)a4 = 0LL;
  __int128 v7 = *a5;
  *(void *)(a1 + 64) = *((void *)a5 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = v7;
  *((void *)a5 + 1) = 0LL;
  *((void *)a5 + 2) = 0LL;
  *(void *)a5 = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 8std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  __n128 result = *a6;
  *(__n128 *)(a1 + 72) = *a6;
  *(void *)(a1 + 8std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = a6[1].n128_u64[0];
  a6->n128_u64[0] = 0LL;
  a6->n128_u64[1] = 0LL;
  a6[1].n128_u64[0] = 0LL;
  return result;
}

void ctu::LogMessage::~LogMessage(void **this)
{
  *this = off_189E96E20;
  uint64_t v2 = this + 9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void *v1;
  ctu::LogMessage::~LogMessage(this);
  operator delete(v1);
}

uint64_t ctu::LogServer::create@<X0>(__int128 *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = 0LL;
  ctu::LogServer::create(a1, &v3, a2);
  uint64_t result = v3;
  if (v3) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  return result;
}

void sub_18660602C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::LogServer::create@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  __int128 v6 = operator new(0xE0uLL);
  uint64_t v7 = *a2;
  *a2 = 0LL;
  uint64_t v19 = v7;
  ctu::LogServer::LogServer((uint64_t)v6, a1, &v19);
  *a3 = v6;
  int v8 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__vftable = (std::__shared_weak_count_vtbl *)off_189E96C50;
  v8->__shared_weak_owners_ = 0LL;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  a3[1] = v8;
  __int128 v10 = (std::__shared_weak_count *)*((void *)v6 + 2);
  if (v10)
  {
    if (v10->__shared_owners_ != -1) {
      goto LABEL_14;
    }
    do
      unint64_t v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      unint64_t v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *((void *)v6 + 1) = v6;
    *((void *)v6 + 2) = v8;
    std::__shared_weak_count::__release_weak(v10);
  }

  else
  {
    do
      unint64_t v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    size_t v15 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      unint64_t v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    *((void *)v6 + 1) = v6;
    *((void *)v6 + 2) = v8;
  }

  do
    unint64_t v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }

void sub_18660618C(void *a1)
{
}

void sub_1866061AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::LogServer::LogServer(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = 0LL;
  ctu::LogServer::LogServer(a1, a2, &v4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  return a1;
}

{
  uint64_t v4;
  uint64_t v4 = 0LL;
  ctu::LogServer::LogServer(a1, a2, &v4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  return a1;
}

void sub_18660623C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::LogServer::LogServer(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  __int128 v6 = __p;
  std::operator+<char>();
  if (cap < 0) {
    __int128 v6 = (void **)__p[0];
  }
  uint64_t v7 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_UTILITY, 0);
  dispatch_queue_t v8 = dispatch_queue_create((const char *)v6, v7);
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + memset(&context, 0, 24) = v8;
  if (v8)
  {
    uint64_t v9 = v8;
    dispatch_retain(v8);
    *(void *)(a1 + 32) = 0LL;
    dispatch_release(v9);
  }

  else
  {
    *(void *)(a1 + 32) = 0LL;
  }

  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = &off_189E96A98;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external( (std::string *)(a1 + 40),  *(const std::string::value_type **)a2,  *((void *)a2 + 1));
  }

  else
  {
    __int128 v10 = *a2;
    *(void *)(a1 + ++*(_DWORD *)(this + 56) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = v10;
  }

  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  unint64_t v11 = operator new(0x58uLL);
  std::string::basic_string[abi:ne180100]<0>(v19, "");
  ctu::LoggerTree::LoggerTree((uint64_t)v11, (__int128 *)v19);
  *(void *)(a1 + 80) = v11;
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  std::operator+<char>();
  unint64_t v12 = std::string::append(&v18, "::writers", 9uLL);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  int64_t cap = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::__split_buffer<std::string> __p = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v14 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_USER_INITIATED, 0);
  if (cap >= 0) {
    size_t v15 = __p;
  }
  else {
    size_t v15 = (void **)__p[0];
  }
  *(void *)(a1 + 8std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = dispatch_queue_create((const char *)v15, v14);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v16 = *a3;
  *a3 = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v3 - 96) = v16;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 12std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 850045863LL;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 16std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_BYTE *)(a1 + 216) = 0;
  atomic_store(v16 != 0, (unsigned __int8 *)(a1 + 216));
  ctu::LoggerTree::updateParentLogLevel(*(void *)(a1 + 80), 40);
  return a1;
}

void sub_186606488( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21)
{
}

void sub_1866065A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void ctu::LogServer::~LogServer(ctu::LogServer *this)
{
  *(void *)this = &off_189E96A98;
  uint64_t v4 = (void **)((char *)this + 192);
  std::vector<std::shared_ptr<ctu::RestResourceConnection>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::mutex::~mutex((std::mutex *)this + 2);
  uint64_t v4 = (void **)((char *)this + 104);
  std::vector<std::shared_ptr<ctu::RestResourceConnection>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *((void *)this + 12);
  *((void *)this + 12) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = (dispatch_object_s *)*((void *)this + 11);
  if (v3) {
    dispatch_release(v3);
  }
  std::unique_ptr<ctu::LoggerTree>::reset[abi:ne180100]((ctu::LoggerTree **)this + 10);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable((void *)this + 1);
}

{
  void *v1;
  ctu::LogServer::~LogServer(this);
  operator delete(v1);
}

uint64_t ctu::LogServer::getName(ctu::LogServer *this)
{
  return (uint64_t)this + 40;
}

void ctu::LogServer::updateConfig(void *a1, void **a2)
{
  uint64_t v3 = MEMORY[0x1895F87A8];
  v16[0] = MEMORY[0x1895F87A8];
  v16[1] = 1174405120LL;
  _OWORD v16[2] = ___ZN3ctu9LogServer12updateConfigEN3xpc4dictE_block_invoke;
  void v16[3] = &__block_descriptor_tmp_17;
  uint64_t v4 = *a2;
  _OWORD v16[4] = a1;
  xpc_object_t object = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (!v5 || (v6 = a1[1], (uint64_t v7 = std::__shared_weak_count::lock(v5)) == 0LL)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  dispatch_queue_t v8 = v7;
  uint64_t v9 = (dispatch_queue_s *)a1[3];
  block[0] = v3;
  block[1] = 1174405120LL;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9LogServerEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &__block_descriptor_tmp_13;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  block[5] = v6;
  uint64_t v19 = v8;
  do
    unint64_t v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  void block[4] = v16;
  dispatch_async(v9, block);
  unint64_t v12 = v19;
  if (v19)
  {
    __int128 v13 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  do
    unint64_t v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }

  xpc_release(object);
}

void ___ZN3ctu9LogServer12updateConfigEN3xpc4dictE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  xpc_object_t v13 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v12[0] = a1 + 40;
  v12[1] = (uint64_t)"kDomainLogLevels";
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)v12, &v13);
  if (MEMORY[0x186E3CD4C](v13) == MEMORY[0x1895F9250])
  {
    uint64_t v2 = *(void *)(v1 + 80);
    xpc_object_t v3 = v13;
    xpc_object_t v11 = v13;
    if (v13)
    {
      xpc_retain(v13);
    }

    else
    {
      xpc_object_t v3 = xpc_null_create();
      xpc_object_t v11 = v3;
    }

    ctu::LoggerTree::updateLogLevels(v2, &v11);
    xpc_release(v3);
    xpc_object_t v11 = 0LL;
  }

  v12[0] = 0xAAAAAAAAAAAAAAAALL;
  v12[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::LoggerTree::commitConfigUpdate(v12, *(ctu::LoggerTree **)(v1 + 80));
  *(_OWORD *)__int128 v10 = *(_OWORD *)v12;
  *(_OWORD *)unint64_t v12 = 0uLL;
  std::atomic_store[abi:ne180100]<std::vector<std::pair<std::string,ctu::LogLevel>> const>((uint64_t *)(v1 + 64), v10);
  uint64_t v4 = (std::__shared_weak_count *)v10[1];
  if (v10[1])
  {
    uint64_t v5 = (unint64_t *)(v10[1] + 8);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  uint64_t v7 = (std::__shared_weak_count *)v12[1];
  if (v12[1])
  {
    dispatch_queue_t v8 = (unint64_t *)(v12[1] + 8);
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  xpc_release(v13);
}

void sub_186606938( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  unint64_t v15 = v13;
  xpc_release(v15);
  xpc_release(*(xpc_object_t *)(v14 - 40));
  _Unwind_Resume(a1);
}

void xpc::dict::object_proxy::operator xpc::dict(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    xpc_object_t v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }

  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v4) != MEMORY[0x1895F9250])
  {
    xpc_object_t v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }

  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

void xpc::dict::~dict(xpc_object_t *this)
{
  *this = 0LL;
}

void std::atomic_store[abi:ne180100]<std::vector<std::pair<std::string,ctu::LogLevel>> const>( uint64_t *a1, uint64_t *a2)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  uint64_t v5 = *a1;
  *a1 = *a2;
  *a2 = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[1];
  a2[1] = v6;
  std::__sp_mut::unlock(sp_mut);
}

xpc_object_t __copy_helper_block_e8_40c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  xpc_object_t v3 = *(void **)(a2 + 40);
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE(uint64_t a1)
{
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0LL;
}

void ctu::LogServer::start(ctu::LogServer *this)
{
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 0x40000000LL;
  std::string v4[2] = ___ZN3ctu9LogServer5startEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_5;
  v4[4] = this;
  uint64_t v5 = v4;
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 0x40000000LL;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9LogServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_14;
  void block[4] = (char *)this + 8;
  block[5] = &v5;
  xpc_object_t v3 = (char *)this + 24;
  uint64_t v2 = (dispatch_queue_s *)*((void *)this + 3);
  if (*((void *)v3 + 1)) {
    dispatch_async_and_wait(v2, block);
  }
  else {
    dispatch_sync(v2, block);
  }
  atomic_store(1u, (unsigned __int8 *)this + 216);
}

void ___ZN3ctu9LogServer5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  ctu::LoggerTree::commitConfigUpdate((uint64_t *)&v10, *(ctu::LoggerTree **)(v1 + 80));
  __int128 v9 = v10;
  __int128 v10 = 0uLL;
  std::atomic_store[abi:ne180100]<std::vector<std::pair<std::string,ctu::LogLevel>> const>( (uint64_t *)(v1 + 64),  (uint64_t *)&v9);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)&v9 + 1);
  if (*((void *)&v9 + 1))
  {
    xpc_object_t v3 = (unint64_t *)(*((void *)&v9 + 1) + 8LL);
    do
      unint64_t v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  uint64_t v11 = v1;
  uint64_t v5 = *(dispatch_queue_s **)(v1 + 88);
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 0x40000000LL;
  block[2] = ___ZN8dispatch9sync_implIZN3ctu9LogServer20flushStartupMessagesEvE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke;
  block[3] = &__block_descriptor_tmp_24;
  void block[4] = &v11;
  dispatch_sync(v5, block);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1))
  {
    uint64_t v7 = (unint64_t *)(*((void *)&v10 + 1) + 8LL);
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

void sub_186606CC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ctu::LogServer::flushStartupMessages(dispatch_queue_s **this)
{
  uint64_t v2 = (ctu::LogServer *)this;
  uint64_t v1 = this[11];
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 0x40000000LL;
  block[2] = ___ZN8dispatch9sync_implIZN3ctu9LogServer20flushStartupMessagesEvE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke;
  block[3] = &__block_descriptor_tmp_24;
  void block[4] = &v2;
  dispatch_sync(v1, block);
}

uint64_t ctu::LogServer::setEnabled(uint64_t this, unsigned __int8 a2)
{
  return this;
}

uint64_t ctu::LogServer::getEnabled(ctu::LogServer *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 216);
  return v1 & 1;
}

void ctu::LogServer::close(ctu::LogServer *this)
{
  __int128 v7 = v8;
  __int128 v8 = 0uLL;
  uint64_t v2 = (dispatch_queue_s *)*((void *)this + 11);
  xpc_object_t v3 = operator new(0x18uLL);
  *(_OWORD *)xpc_object_t v3 = v7;
  void v3[2] = this;
  dispatch_async_f( v2,  v3,  (dispatch_function_t)dispatch::async<ctu::LogServer,ctu::LogServer::close(void)::$_0>(std::shared_ptr<ctu::LogServer>,dispatch_queue_s *,ctu::LogServer::close(void)::$_0 &&)::{lambda(void *)#1}::__invoke);
  unint64_t v4 = (std::__shared_weak_count *)*((void *)&v8 + 1);
  if (*((void *)&v8 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v8 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void ctu::LogServer::debugFlush(ctu::LogServer *this)
{
  xpc_object_t v3 = &__block_literal_global_7;
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 0x40000000LL;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9LogServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_14;
  void block[4] = (char *)this + 8;
  void block[5] = &v3;
  uint64_t v2 = (char *)this + 24;
  unsigned __int8 v1 = (dispatch_queue_s *)*((void *)this + 3);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void ctu::LogServer::flush(ctu::LogServer *this@<X0>, dispatch_group_s **a2@<X8>)
{
  dispatch_group_t v4 = dispatch_group_create();
  uint64_t v5 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
    dispatch_release(v5);
  }

  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v6 || (uint64_t v7 = *((void *)this + 1), (v8 = std::__shared_weak_count::lock(v6)) == 0LL)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  __int128 v9 = v8;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }

  __int128 v10 = (dispatch_queue_s *)*((void *)this + 11);
  uint64_t v11 = operator new(0x20uLL);
  *uint64_t v11 = v7;
  v11[1] = v9;
  _OWORD v11[2] = this;
  v11[3] = v5;
  dispatch_async_f( v10,  v11,  (dispatch_function_t)dispatch::async<ctu::LogServer const,ctu::LogServer::flush(void)::$_0>(std::shared_ptr<ctu::LogServer const>,dispatch_queue_s *,ctu::LogServer::flush(void)::$_0 &&)::{lambda(void *)#1}::__invoke);
  *a2 = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }

void sub_186606F5C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }

  _Unwind_Resume(exception_object);
}

void ctu::LogServer::fillLoggerFullConfig_sync(ctu::LoggerTree **this, xpc::dict *a2)
{
}

void ctu::LogServer::fillLoggerSimpleConfig_sync(ctu::LoggerTree **this, xpc::dict *a2)
{
}

void ctu::LogServer::fillLogWriterFullConfig_sync(ctu::LogServer *this, xpc::dict *a2)
{
  xpc_object_t v4 = xpc_array_create(0LL, 0LL);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t object = v4;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t object = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v5) == MEMORY[0x1895F9220])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }

  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t object = v6;
LABEL_9:
  xpc_release(v5);
  v10[0] = this;
  v10[1] = &object;
  uint64_t v7 = (dispatch_queue_s *)*((void *)this + 11);
  blocunint64_t k = (xpc::dict *)MEMORY[0x1895F87A8];
  uint64_t v13 = 0x40000000LL;
  uint64_t v14 = ___ZN8dispatch9sync_implIZNK3ctu9LogServer28fillLogWriterFullConfig_syncERN3xpc4dictEE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke;
  unint64_t v15 = &__block_descriptor_tmp_15;
  uint64_t v16 = v10;
  dispatch_sync(v7, &block);
  xpc_object_t v8 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v8 = xpc_null_create();
  }
  blocunint64_t k = a2;
  uint64_t v13 = (uint64_t)"kLogWriters";
  xpc::dict::object_proxy::operator=((uint64_t)&block, &v8, &v9);
  xpc_release(v9);
  xpc_object_t v9 = 0LL;
  xpc_release(v8);
  xpc_object_t v8 = 0LL;
  xpc_release(object);
}

void ctu::LogServer::fillLogWriterSimpleConfig_sync(ctu::LogServer *this, xpc::dict *a2)
{
  xpc_object_t v4 = xpc_array_create(0LL, 0LL);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t object = v4;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t object = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v5) == MEMORY[0x1895F9220])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }

  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t object = v6;
LABEL_9:
  xpc_release(v5);
  v10[0] = this;
  v10[1] = &object;
  uint64_t v7 = (dispatch_queue_s *)*((void *)this + 11);
  blocunint64_t k = (xpc::dict *)MEMORY[0x1895F87A8];
  uint64_t v13 = 0x40000000LL;
  uint64_t v14 = ___ZN8dispatch9sync_implIZNK3ctu9LogServer30fillLogWriterSimpleConfig_syncERN3xpc4dictEE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke;
  unint64_t v15 = &__block_descriptor_tmp_16;
  uint64_t v16 = v10;
  dispatch_sync(v7, &block);
  xpc_object_t v8 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v8 = xpc_null_create();
  }
  blocunint64_t k = a2;
  uint64_t v13 = (uint64_t)"kLogWriters";
  xpc::dict::object_proxy::operator=((uint64_t)&block, &v8, &v9);
  xpc_release(v9);
  xpc_object_t v9 = 0LL;
  xpc_release(v8);
  xpc_object_t v8 = 0LL;
  xpc_release(object);
}

void ctu::LogServer::getConfig(ctu::LogServer *this@<X0>, xpc_object_t *a2@<X8>)
{
  v2[0] = MEMORY[0x1895F87A8];
  v2[1] = 0x40000000LL;
  v2[2] = ___ZNK3ctu9LogServer9getConfigEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_9;
  v2[4] = this;
  xpc_object_t v3 = v2;
  ctu::SharedSynchronizable<ctu::LogServer>::execute_wrapped_sync<xpc::dict({block_pointer})(void)>( a2,  (uint64_t)this + 8,  (uint64_t)&v3);
}

uint64_t ___ZNK3ctu9LogServer9getConfigEv_block_invoke@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v5) != MEMORY[0x1895F9250])
  {
    xpc_object_t v6 = xpc_null_create();
LABEL_8:
    *a2 = v6;
    goto LABEL_9;
  }

  xpc_retain(v5);
LABEL_9:
  xpc_release(v5);
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 40LL))(v3, a2);
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v3 + 24LL))(v3, a2);
}

void sub_1866073C4(_Unwind_Exception *a1)
{
}

void ctu::LogServer::getSimpleConfig(ctu::LogServer *this@<X0>, xpc_object_t *a2@<X8>)
{
  v2[0] = MEMORY[0x1895F87A8];
  v2[1] = 0x40000000LL;
  v2[2] = ___ZNK3ctu9LogServer15getSimpleConfigEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_10;
  v2[4] = this;
  uint64_t v3 = v2;
  ctu::SharedSynchronizable<ctu::LogServer>::execute_wrapped_sync<xpc::dict({block_pointer})(void)>( a2,  (uint64_t)this + 8,  (uint64_t)&v3);
}

uint64_t ___ZNK3ctu9LogServer15getSimpleConfigEv_block_invoke@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v5) != MEMORY[0x1895F9250])
  {
    xpc_object_t v6 = xpc_null_create();
LABEL_8:
    *a2 = v6;
    goto LABEL_9;
  }

  xpc_retain(v5);
LABEL_9:
  xpc_release(v5);
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 48LL))(v3, a2);
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v3 + 32LL))(v3, a2);
}

void sub_186607510(_Unwind_Exception *a1)
{
}

void ctu::LogServer::addWriter(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (v5)
  {
    xpc_object_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  __int128 v13 = v14;
  __int128 v14 = 0uLL;
  xpc_object_t v8 = *(dispatch_queue_s **)(a1 + 88);
  xpc_object_t v9 = operator new(0x28uLL);
  *(_OWORD *)xpc_object_t v9 = v13;
  void v9[2] = a1;
  void v9[3] = v4;
  void v9[4] = v5;
  dispatch_async_f( v8,  v9,  (dispatch_function_t)dispatch::async<ctu::LogServer,ctu::LogServer::addWriter(std::shared_ptr<ctu::LogWriter>)::$_0>(std::shared_ptr<ctu::LogServer>,dispatch_queue_s *,ctu::LogServer::addWriter(std::shared_ptr<ctu::LogWriter>)::$_0 &&)::{lambda(void *)#1}::__invoke);
  __int128 v10 = (std::__shared_weak_count *)*((void *)&v14 + 1);
  if (*((void *)&v14 + 1))
  {
    uint64_t v11 = (unint64_t *)(*((void *)&v14 + 1) + 8LL);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

void ctu::LogServer::registerLogger(void *a1, uint64_t a2, void *a3)
{
  uint64_t CurrentLogLevel = ctu::LogServer::getCurrentLogLevel((uint64_t)a1, (void *)a2);
  if ((_DWORD)CurrentLogLevel) {
    (*(void (**)(void, uint64_t))(*(void *)*a3 + 16LL))(*a3, CurrentLogLevel);
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  unint64_t v7 = (std::__shared_weak_count *)a3[1];
  uint64_t v28 = *a3;
  unint64_t v29 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  __int128 v10 = (std::__shared_weak_count *)a1[2];
  if (!v10 || (uint64_t v11 = a1[1], (v12 = std::__shared_weak_count::lock(v10)) == 0LL)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  __int128 v13 = v12;
  __int128 v14 = operator new(0x30uLL);
  void *v14 = a1;
  unint64_t v15 = (std::string *)(v14 + 1);
  if ((char)__p.__r_.__value_.__s.__size_ < 0)
  {
    std::string::__init_copy_ctor_external(v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }

  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v14[3] = __p.__r_.__value_.__l.__cap_;
  }

  uint64_t v16 = v29;
  v14[4] = v28;
  v14[5] = v16;
  if (v16)
  {
    unint64_t v17 = (unint64_t *)&v16->__shared_owners_;
    do
      unint64_t v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }

  uint64_t v19 = (dispatch_queue_s *)a1[3];
  char v20 = (unint64_t *)&v13->__shared_owners_;
  do
    unint64_t v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  std::string::value_type v22 = operator new(0x18uLL);
  *std::string::value_type v22 = v14;
  v22[1] = v11;
  void v22[2] = v13;
  dispatch_async_f( v19,  v22,  (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ctu::LogServer>::execute_wrapped<ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0>(ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0,std::default_delete<ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    unint64_t v23 = __ldaxr(v20);
  while (__stlxr(v23 - 1, v20));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }

  size_t v24 = v29;
  if (v29)
  {
    unint64_t v25 = (unint64_t *)&v29->__shared_owners_;
    do
      unint64_t v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }

uint64_t ctu::LogServer::getCurrentLogLevel(uint64_t a1, void *a2)
{
  sp_mut = std::__get_sp_mut((const void *)(a1 + 64));
  std::__sp_mut::lock(sp_mut);
  xpc_object_t v6 = *(uint64_t **)(a1 + 64);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }

  std::__sp_mut::unlock(sp_mut);
  if (!v6)
  {
LABEL_57:
    uint64_t v31 = 0LL;
    if (!v5) {
      return v31;
    }
    goto LABEL_61;
  }

  int v9 = *((char *)a2 + 23);
  size_t v10 = a2[1];
  if (v9 >= 0)
  {
    size_t v11 = v9;
  }

  else
  {
    a2 = (void *)*a2;
    size_t v11 = v10;
  }

  uint64_t v12 = *v6;
  uint64_t v13 = v6[1];
  uint64_t v35 = v13;
  unint64_t v36 = v5;
  uint64_t v37 = *v6;
  do
  {
    if (!v11) {
      break;
    }
    uint64_t v14 = v12;
    if (v13 != v12)
    {
      unint64_t v15 = (v13 - v12) >> 5;
      uint64_t v14 = v37;
      do
      {
        uint64_t v16 = v14 + 32 * (v15 >> 1);
        int v17 = *(char *)(v16 + 23);
        if (v17 >= 0) {
          size_t v18 = *(unsigned __int8 *)(v16 + 23);
        }
        else {
          size_t v18 = *(void *)(v16 + 8);
        }
        if (v18 >= v11) {
          size_t v19 = v11;
        }
        else {
          size_t v19 = v18;
        }
        if (v19
          && (v17 >= 0 ? (char v20 = (const void *)(v14 + 32 * (v15 >> 1))) : (char v20 = *(const void **)v16),
              (int v21 = memcmp(v20, a2, v19)) != 0))
        {
          int v22 = (v21 >> 31) | 1;
        }

        else
        {
          if (v11 > v18) {
            int v22 = -1;
          }
          else {
            int v22 = 1;
          }
          if (v11 == v18) {
            int v22 = 0;
          }
        }

        if (v22 == -1) {
          v15 += ~(v15 >> 1);
        }
        else {
          v15 >>= 1;
        }
        if (v22 == -1) {
          uint64_t v14 = v16 + 32;
        }
      }

      while (v15);
    }

    if (v14 != v13)
    {
      uint64_t v23 = *(unsigned __int8 *)(v14 + 23);
      int v24 = (char)v23;
      if ((v23 & 0x80u) != 0LL) {
        uint64_t v23 = *(void *)(v14 + 8);
      }
      if (v23 == v11)
      {
        unint64_t v25 = v24 >= 0 ? (const void *)v14 : *(const void **)v14;
        if (!memcmp(v25, a2, v11))
        {
          uint64_t v12 = v14;
          uint64_t v5 = v36;
          goto LABEL_60;
        }
      }
    }

    size_t v26 = v11;
    do
    {
      if (!v26)
      {
        size_t v29 = v11;
        goto LABEL_50;
      }

      size_t v27 = v26 - 1;
      int v28 = *((unsigned __int8 *)a2 + --v26);
    }

    while (v28 != 46);
    size_t v29 = v27 >= v11 ? v11 : v27;
LABEL_50:
    uint64_t v13 = v14;
    BOOL v30 = v11 == v29;
    size_t v11 = v29;
    uint64_t v12 = v37;
  }

  while (!v30);
  uint64_t v5 = v36;
  if (v12 == v35) {
    goto LABEL_57;
  }
  if (*(char *)(v12 + 23) < 0)
  {
    if (*(void *)(v12 + 8)) {
      goto LABEL_57;
    }
  }

  else if (*(_BYTE *)(v12 + 23))
  {
    goto LABEL_57;
  }

LABEL_60:
  uint64_t v31 = *(unsigned __int8 *)(v12 + 24);
  if (v5)
  {
LABEL_61:
    uint64_t v32 = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return v31;
}

uint64_t ctu::LogServer::getCurrentLogLevelSlow(uint64_t a1, uint64_t a2)
{
  v5[0] = a1;
  v5[1] = a2;
  v6[0] = MEMORY[0x1895F87A8];
  v6[1] = 0x40000000LL;
  void v6[2] = ___ZNK3ctu20SharedSynchronizableINS_9LogServerEE20execute_wrapped_syncIZNKS1_22getCurrentLogLevelSlowERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSE__block_invoke;
  uint64_t v6[3] = &__block_descriptor_tmp_21;
  v6[4] = a1 + 8;
  v6[5] = v5;
  unint64_t v7 = v6;
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  if (*(void *)(v3 + 8))
  {
    unsigned __int8 v14 = -86;
    blocunint64_t k = MEMORY[0x1895F87A8];
    uint64_t v9 = 0x40000000LL;
    size_t v10 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFN3ctu8LogLevelEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke;
    size_t v11 = &__block_descriptor_tmp_23;
    uint64_t v12 = &v14;
    uint64_t v13 = &v7;
    dispatch_async_and_wait(v2, &block);
  }

  else
  {
    unsigned __int8 v14 = -86;
    blocunint64_t k = MEMORY[0x1895F87A8];
    uint64_t v9 = 0x40000000LL;
    size_t v10 = ___ZN8dispatch9sync_implIRU13block_pointerFN3ctu8LogLevelEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke;
    size_t v11 = &__block_descriptor_tmp_22;
    uint64_t v12 = &v14;
    uint64_t v13 = &v7;
    dispatch_sync(v2, &block);
  }

  return v14;
}

void ctu::LogServer::log(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 216));
  if ((v2 & 1) != 0)
  {
    uint64_t v5 = (std::mutex *)(a1 + 128);
    std::mutex::lock((std::mutex *)(a1 + 128));
    uint64_t v6 = *(void *)(a1 + 192);
    uint64_t v7 = *(void *)(a1 + 200);
    std::vector<std::shared_ptr<ctu::LogMessage>>::emplace_back<std::shared_ptr<ctu::LogMessage>>( (char **)(a1 + 192),  a2);
    std::mutex::unlock(v5);
    if (v6 == v7) {
      ctu::LogServer::handleLogMessages((ctu::LogServer *)a1);
    }
  }

void sub_186607B5C(_Unwind_Exception *a1)
{
}

char *std::vector<std::shared_ptr<ctu::LogMessage>>::emplace_back<std::shared_ptr<ctu::LogMessage>>( char **a1, uint64_t a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (v5 - *a1) >> 4;
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 3;
    else {
      unint64_t v10 = v9;
    }
    if (v10 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    size_t v11 = (char *)operator new(16 * v10);
    uint64_t v12 = &v11[16 * v7];
    *(_OWORD *)uint64_t v12 = *(_OWORD *)a2;
    *(void *)a2 = 0LL;
    *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
    uint64_t v13 = *a1;
    unsigned __int8 v14 = a1[1];
    if (v14 == *a1)
    {
      uint64_t v6 = v12 + 16;
      *a1 = v12;
      a1[1] = v12 + 16;
      a1[2] = &v11[16 * v10];
    }

    else
    {
      unint64_t v15 = &v11[16 * v7];
      do
      {
        __int128 v16 = *((_OWORD *)v14 - 1);
        v14 -= 16;
        *((_OWORD *)v15 - std::shared_ptr<ctu::LogServer>::shared_ptr[abi:ne180100]<ctu::LogServer,void>(&v8, (void *)this + 1) = v16;
        v15 -= 16;
        *(void *)unsigned __int8 v14 = 0LL;
        *((void *)v14 + std::shared_ptr<ctu::LogServer>::shared_ptr[abi:ne180100]<ctu::LogServer,void>(&v8, (void *)this + 1) = 0LL;
      }

      while (v14 != v13);
      unsigned __int8 v14 = *a1;
      uint64_t v17 = (uint64_t)a1[1];
      uint64_t v6 = v12 + 16;
      *a1 = v15;
      a1[1] = v12 + 16;
      a1[2] = &v11[16 * v10];
      while ((char *)v17 != v14)
      {
        v17 -= 16LL;
        std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v17);
      }
    }

    if (v14) {
      operator delete(v14);
    }
  }

  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
    uint64_t v6 = v5 + 16;
    *(void *)a2 = 0LL;
    *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 8) = 0LL;
  }

  a1[1] = v6;
  return v6 - 16;
}

void ctu::LogServer::handleLogMessages(ctu::LogServer *this)
{
  __int128 v7 = v8;
  __int128 v8 = 0uLL;
  unsigned __int8 v2 = (dispatch_queue_s *)*((void *)this + 11);
  uint64_t v3 = operator new(0x18uLL);
  *(_OWORD *)uint64_t v3 = v7;
  void v3[2] = this;
  dispatch_async_f( v2,  v3,  (dispatch_function_t)dispatch::async<ctu::LogServer,ctu::LogServer::handleLogMessages(void)::$_0>(std::shared_ptr<ctu::LogServer>,dispatch_queue_s *,ctu::LogServer::handleLogMessages(void)::$_0 &&)::{lambda(void *)#1}::__invoke);
  unint64_t v4 = (std::__shared_weak_count *)*((void *)&v8 + 1);
  if (*((void *)&v8 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v8 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void *ctu::ScopedLogFlusher::ScopedLogFlusher(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  char *result = *a2;
  result[1] = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  result[2] = 5000LL;
  return result;
}

{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v2 = a2[1];
  char *result = *a2;
  result[1] = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  result[2] = 5000LL;
  return result;
}

void *ctu::ScopedLogFlusher::ScopedLogFlusher(void *result, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  char *result = *a2;
  result[1] = v3;
  if (v3)
  {
    unint64_t v4 = (unint64_t *)(v3 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  result[2] = a3;
  return result;
}

{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v3 = a2[1];
  char *result = *a2;
  result[1] = v3;
  if (v3)
  {
    unint64_t v4 = (unint64_t *)(v3 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  result[2] = a3;
  return result;
}

void ctu::ScopedLogFlusher::~ScopedLogFlusher(ctu::LogServer **this)
{
  uint64_t v2 = *this;
  if (v2)
  {
    unint64_t v5 = (dispatch_group_s *)0xAAAAAAAAAAAAAAAALL;
    ctu::LogServer::flush(v2, &v5);
    uint64_t v3 = v5;
    if (v5)
    {
      dispatch_time_t v4 = dispatch_time(0LL, 1000000LL * (void)this[2]);
      dispatch_group_wait(v3, v4);
      dispatch_release(v3);
    }
  }

  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void std::__shared_ptr_pointer<ctu::LogServer *,std::shared_ptr<ctu::LogServer> ctu::SharedSynchronizable<ctu::LogServer>::make_shared_ptr<ctu::LogServer>(ctu::LogServer*)::{lambda(ctu::LogServer *)#1},std::allocator<ctu::LogServer>>::~__shared_ptr_pointer( std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_pointer<ctu::LogServer *,std::shared_ptr<ctu::LogServer> ctu::SharedSynchronizable<ctu::LogServer>::make_shared_ptr<ctu::LogServer>(ctu::LogServer*)::{lambda(ctu::LogServer *)#1},std::allocator<ctu::LogServer>>::__on_zero_shared( uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ctu::LogServer *,std::shared_ptr<ctu::LogServer> ctu::SharedSynchronizable<ctu::LogServer>::make_shared_ptr<ctu::LogServer>(ctu::LogServer*)::{lambda(ctu::LogServer *)#1},std::allocator<ctu::LogServer>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t std::shared_ptr<ctu::LogServer> ctu::SharedSynchronizable<ctu::LogServer>::make_shared_ptr<ctu::LogServer>(ctu::LogServer*)::{lambda(ctu::LogServer*)#1}::operator() const(ctu::LogServer*)::{lambda(void *)#1}::__invoke( uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 16LL))(result);
  }
  return result;
}

void std::unique_ptr<ctu::LoggerTree>::reset[abi:ne180100](ctu::LoggerTree **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    ctu::LoggerTree::~LoggerTree(v2);
    operator delete(v3);
  }

uint64_t ___ZNK3ctu20SharedSynchronizableINS_9LogServerEE15execute_wrappedEU13block_pointerFvvE_block_invoke( uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void __copy_helper_block_e8_32b40c43_ZTSNSt3__110shared_ptrIKN3ctu9LogServerEEE(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v4;
  if (v4)
  {
    unint64_t v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

void __destroy_helper_block_e8_32b40c43_ZTSNSt3__110shared_ptrIKN3ctu9LogServerEEE(uint64_t a1)
{
}

void *___ZNK3ctu20SharedSynchronizableINS_9LogServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke( uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16LL))(*(void **)(a1 + 40));
}

void *std::shared_ptr<ctu::LogServer>::shared_ptr[abi:ne180100]<ctu::LogServer,void>( void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0LL;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }

  uint64_t v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

void dispatch::async<ctu::LogServer,ctu::LogServer::close(void)::$_0>(std::shared_ptr<ctu::LogServer>,dispatch_queue_s *,ctu::LogServer::close(void)::$_0 &&)::{lambda(void *)#1}::__invoke( uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)(v2 + 104);
  uint64_t v4 = *(void **)(v2 + 112);
  if (v3 == v4)
  {
    *(void *)(v2 + 112) = v3;
LABEL_9:
    __int128 v7 = (void *)std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](a1);
    operator delete(v7);
    return;
  }

  do
  {
    (*(void (**)(void))(*(void *)*v3 + 16LL))(*v3);
    v3 += 2;
  }

  while (v3 != v4);
  uint64_t v6 = *(void *)(v2 + 104);
  uint64_t v5 = *(void *)(v2 + 112);
  if (v5 != v6)
  {
    do
      uint64_t v5 = std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v5 - 16);
    while (v5 != v6);
    uint64_t v5 = v6;
  }

  *(void *)(v2 + 112) = v5;
  if (a1) {
    goto LABEL_9;
  }
}

void sub_186608078(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    uint64_t v3 = (void *)std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1);
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t *dispatch::async<ctu::LogServer const,ctu::LogServer::flush(void)::$_0>(std::shared_ptr<ctu::LogServer const>,dispatch_queue_s *,ctu::LogServer::flush(void)::$_0 &&)::{lambda(void *)#1}::__invoke( uint64_t a1)
{
  uint64_t v8 = a1;
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(uint64_t **)(v1 + 104);
  for (std::string::size_type i = *(uint64_t **)(v1 + 112); v2 != i; v2 += 2)
  {
    uint64_t v5 = *v2;
    uint64_t v6 = *(dispatch_group_s **)(a1 + 24);
    dispatch_group_t group = v6;
    if (v6)
    {
      dispatch_retain(v6);
      if (group) {
        dispatch_group_enter(group);
      }
    }

    (*(void (**)(uint64_t, dispatch_group_t *))(*(void *)v5 + 40LL))(v5, &group);
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
  }

  return std::unique_ptr<std::pair<std::shared_ptr<ctu::LogServer const>,ctu::LogServer::flush(void)::$_0>>::~unique_ptr[abi:ne180100](&v8);
}

void sub_186608134( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }

  std::unique_ptr<std::pair<std::shared_ptr<ctu::LogServer const>,ctu::LogServer::flush(void)::$_0>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::pair<std::shared_ptr<ctu::LogServer const>,ctu::LogServer::flush(void)::$_0>>::~unique_ptr[abi:ne180100]( uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    uint64_t v3 = *(dispatch_group_s **)(v2 + 24);
    if (v3)
    {
      dispatch_group_leave(v3);
      uint64_t v4 = *(dispatch_object_s **)(v2 + 24);
      if (v4) {
        dispatch_release(v4);
      }
    }

    uint64_t v5 = (void *)std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v2);
    operator delete(v5);
  }

  return a1;
}

void ___ZN8dispatch9sync_implIZNK3ctu9LogServer28fillLogWriterFullConfig_syncERN3xpc4dictEE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke( uint64_t a1)
{
  uint64_t v1 = *(xpc_object_t ***)(a1 + 32);
  uint64_t v2 = (char *)(*v1)[13];
  uint64_t v3 = (char *)(*v1)[14];
  if (v2 != v3)
  {
    uint64_t v4 = MEMORY[0x1895F9250];
    do
    {
      xpc_object_t value = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(xpc_object_t *__return_ptr))(**(void **)v2 + 56LL))(&value);
      if (MEMORY[0x186E3CD4C](value) == v4) {
        xpc_array_append_value(*v1[1], value);
      }
      xpc_release(value);
      v2 += 16;
    }

    while (v2 != v3);
  }

void sub_186608250( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ___ZN8dispatch9sync_implIZNK3ctu9LogServer30fillLogWriterSimpleConfig_syncERN3xpc4dictEE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke( uint64_t a1)
{
  uint64_t v1 = *(xpc_object_t ***)(a1 + 32);
  uint64_t v2 = (char *)(*v1)[13];
  uint64_t v3 = (char *)(*v1)[14];
  if (v2 != v3)
  {
    uint64_t v4 = MEMORY[0x1895F9250];
    do
    {
      xpc_object_t value = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(xpc_object_t *__return_ptr))(**(void **)v2 + 48LL))(&value);
      if (MEMORY[0x186E3CD4C](value) == v4) {
        xpc_array_append_value(*v1[1], value);
      }
      xpc_release(value);
      v2 += 16;
    }

    while (v2 != v3);
  }

void sub_186608308( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::SharedSynchronizable<ctu::LogServer>::execute_wrapped_sync<xpc::dict({block_pointer})(void)>( xpc_object_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = MEMORY[0x1895F87A8];
  v6[0] = MEMORY[0x1895F87A8];
  v6[1] = 0x40000000LL;
  void v6[2] = ___ZNK3ctu20SharedSynchronizableINS_9LogServerEE20execute_wrapped_syncIU13block_pointerFN3xpc4dictEvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  uint64_t v6[3] = &__block_descriptor_tmp_17;
  v6[4] = a2;
  v6[5] = a3;
  __int128 v7 = v6;
  uint64_t v5 = *(dispatch_queue_s **)(a2 + 16);
  if (*(void *)(a2 + 24))
  {
    *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *a1 = xpc_null_create();
    blocunint64_t k = v4;
    uint64_t v9 = 0x40000000LL;
    unint64_t v10 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFN3xpc4dictEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke;
    size_t v11 = &__block_descriptor_tmp_19;
    uint64_t v12 = a1;
    uint64_t v13 = &v7;
    dispatch_async_and_wait(v5, &block);
  }

  else
  {
    *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *a1 = xpc_null_create();
    blocunint64_t k = v4;
    uint64_t v9 = 0x40000000LL;
    unint64_t v10 = ___ZN8dispatch9sync_implIRU13block_pointerFN3xpc4dictEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke;
    size_t v11 = &__block_descriptor_tmp_18;
    uint64_t v12 = a1;
    uint64_t v13 = &v7;
    dispatch_sync(v5, &block);
  }

uint64_t ___ZNK3ctu20SharedSynchronizableINS_9LogServerEE20execute_wrapped_syncIU13block_pointerFN3xpc4dictEvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke( uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16LL))();
}

void ___ZN8dispatch9sync_implIRU13block_pointerFN3xpc4dictEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke( uint64_t a1)
{
  (*(void (**)(xpc_object_t *__return_ptr))(**(void **)(a1 + 40) + 16LL))(&object);
  uint64_t v2 = *(void ***)(a1 + 32);
  xpc_object_t v3 = object;
  xpc_object_t object = xpc_null_create();
  uint64_t v4 = *v2;
  *uint64_t v2 = v3;
  xpc_release(v4);
  xpc_release(object);
}

void ___ZN8dispatch19async_and_wait_implIRU13block_pointerFN3xpc4dictEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke( uint64_t a1)
{
  (*(void (**)(xpc_object_t *__return_ptr))(**(void **)(a1 + 40) + 16LL))(&object);
  uint64_t v2 = *(void ***)(a1 + 32);
  xpc_object_t v3 = object;
  xpc_object_t object = xpc_null_create();
  uint64_t v4 = *v2;
  *uint64_t v2 = v3;
  xpc_release(v4);
  xpc_release(object);
}

uint64_t *dispatch::async<ctu::LogServer,ctu::LogServer::addWriter(std::shared_ptr<ctu::LogWriter>)::$_0>(std::shared_ptr<ctu::LogServer>,dispatch_queue_s *,ctu::LogServer::addWriter(std::shared_ptr<ctu::LogWriter>)::$_0 &&)::{lambda(void *)#1}::__invoke( uint64_t a1)
{
  uint64_t v22 = a1;
  uint64_t v1 = *(void **)(a1 + 16);
  __int128 v2 = *(_OWORD *)(a1 + 24);
  uint64_t v4 = (char *)v1[14];
  unint64_t v3 = v1[15];
  if ((unint64_t)v4 >= v3)
  {
    uint64_t v8 = (char *)v1[13];
    uint64_t v9 = (v4 - v8) >> 4;
    unint64_t v10 = v9 + 1;
    __int128 v21 = *(_OWORD *)(a1 + 24);
    uint64_t v11 = v3 - (void)v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(16 * v12);
    unsigned __int8 v14 = &v13[16 * v9];
    *(_OWORD *)unsigned __int8 v14 = v21;
    if (*((void *)&v21 + 1))
    {
      unint64_t v15 = (unint64_t *)(*((void *)&v21 + 1) + 8LL);
      do
        unint64_t v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      uint64_t v8 = (char *)v1[13];
      uint64_t v4 = (char *)v1[14];
    }

    if (v4 == v8)
    {
      __int128 v7 = v14 + 16;
      v1[13] = v14;
      v1[14] = v14 + 16;
      v1[15] = &v13[16 * v12];
    }

    else
    {
      uint64_t v17 = &v13[16 * v9];
      do
      {
        __int128 v18 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v17 - std::shared_ptr<ctu::LogServer>::shared_ptr[abi:ne180100]<ctu::LogServer,void>(&v8, (void *)this + 1) = v18;
        v17 -= 16;
        *(void *)uint64_t v4 = 0LL;
        *((void *)v4 + std::shared_ptr<ctu::LogServer>::shared_ptr[abi:ne180100]<ctu::LogServer,void>(&v8, (void *)this + 1) = 0LL;
      }

      while (v4 != v8);
      uint64_t v8 = (char *)v1[13];
      uint64_t v19 = v1[14];
      __int128 v7 = v14 + 16;
      v1[13] = v17;
      v1[14] = v14 + 16;
      v1[15] = &v13[16 * v12];
      while ((char *)v19 != v8)
      {
        v19 -= 16LL;
        std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v19);
      }
    }

    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    *(_OWORD *)uint64_t v4 = v2;
    if (*((void *)&v2 + 1))
    {
      uint64_t v5 = (unint64_t *)(*((void *)&v2 + 1) + 8LL);
      do
        unint64_t v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }

    __int128 v7 = v4 + 16;
  }

  v1[14] = v7;
  return std::unique_ptr<std::pair<std::shared_ptr<ctu::LogServer>,ctu::LogServer::addWriter(std::shared_ptr<ctu::LogWriter>)::$_0>>::~unique_ptr[abi:ne180100](&v22);
}

void sub_18660866C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t *std::unique_ptr<std::pair<std::shared_ptr<ctu::LogServer>,ctu::LogServer::addWriter(std::shared_ptr<ctu::LogWriter>)::$_0>>::~unique_ptr[abi:ne180100]( uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v2 + 24);
    unint64_t v3 = (void *)std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v2);
    operator delete(v3);
  }

  return a1;
}

void dispatch::async<void ctu::SharedSynchronizable<ctu::LogServer>::execute_wrapped<ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0>(ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0,std::default_delete<ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0>>)::{lambda(void *)#1}::__invoke( uint64_t *a1)
{
  uint64_t v2 = *a1;
  ctu::LoggerTree::insertAt(*(void *)(*(void *)v2 + 80LL), (__int128 *)(v2 + 8), (void *)(v2 + 32));
  std::unique_ptr<ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0,std::default_delete<ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0>>::~unique_ptr[abi:ne180100](&v2);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_186608714(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *std::unique_ptr<ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0,std::default_delete<ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0>>::~unique_ptr[abi:ne180100]( uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v2 + 32);
    operator delete((void *)v2);
  }

  return a1;
}

uint64_t ___ZNK3ctu20SharedSynchronizableINS_9LogServerEE20execute_wrapped_syncIZNKS1_22getCurrentLogLevelSlowERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSE__block_invoke( uint64_t a1)
{
  return ctu::LogServer::getCurrentLogLevel(**(void **)(a1 + 40), *(void **)(*(void *)(a1 + 40) + 8LL));
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFN3ctu8LogLevelEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke( uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16LL))();
  **(_BYTE **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFN3ctu8LogLevelEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke( uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16LL))();
  **(_BYTE **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch9sync_implIZN3ctu9LogServer20flushStartupMessagesEvE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke( uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 32);
  uint64_t v2 = *v1;
  uint64_t result = *(void *)(*v1 + 96);
  if (result)
  {
    *(void *)&unsigned __int128 v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + std::shared_ptr<ctu::LogServer>::shared_ptr[abi:ne180100]<ctu::LogServer,void>(&v8, (void *)this + 1) = 0xAAAAAAAAAAAAAAAALL;
    unsigned __int128 v73 = v4;
    unsigned __int128 v74 = v4;
    *(_OWORD *)std::string __p = v4;
    (*(void (**)(void **__return_ptr))(*(void *)result + 64LL))(__p);
    if (*(uint64_t *)(*(void *)(v2 + 96) + 80LL) >= 1)
    {
      *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v5 + std::shared_ptr<ctu::LogServer>::shared_ptr[abi:ne180100]<ctu::LogServer,void>(&v8, (void *)this + 1) = 0xAAAAAAAAAAAAAAAALL;
      v70[2] = v5;
      __int128 v71 = v5;
      v70[0] = v5;
      v70[1] = v5;
      ctu::StaticLogger::StaticLogger((ctu::StaticLogger *)v70);
      std::shared_ptr<ctu::LogServer>::shared_ptr[abi:ne180100]<ctu::LogServer,void>(v68, (void *)(v2 + 8));
      __int128 v6 = *(_OWORD *)&v68[0].__r_.__value_.__l.__data_;
      if (v68[0].__r_.__value_.__l.__size_)
      {
        __int128 v7 = (unint64_t *)(v68[0].__r_.__value_.__l.__size_ + 8);
        do
          unint64_t v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }

      uint64_t v9 = (std::__shared_weak_count *)*((void *)&v71 + 1);
      __int128 v71 = v6;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          unint64_t v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }

      std::string::size_type size = (std::__shared_weak_count *)v68[0].__r_.__value_.__l.__size_;
      if (v68[0].__r_.__value_.__l.__size_)
      {
        uint64_t v13 = (unint64_t *)(v68[0].__r_.__value_.__l.__size_ + 8);
        do
          unint64_t v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }

      std::string::operator=((std::string *)((char *)v70 + 8), (const std::string *)(v2 + 40));
      uint64_t v69 = 0LL;
      memset(v68, 0, sizeof(v68));
      ctu::LogMessageBuffer::appendString(v68, "Note: ");
      ctu::LogMessageBuffer::operator std::ostream &((uint64_t)v68);
      std::ostream::operator<<();
      ctu::LogMessageBuffer::appendString(v68, " log messages dropped prior to log start");
      *(void *)&__int128 v67 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v67 + std::shared_ptr<ctu::LogServer>::shared_ptr[abi:ne180100]<ctu::LogServer,void>(&v8, (void *)this + 1) = 0xAAAAAAAAAAAAAAAALL;
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::buildMessage( (uint64_t)v70,  40,  (ctu::LogMessageBuffer *)v68,  &v67);
      unint64_t v15 = v74;
      unint64_t v16 = (char *)__p[1];
      uint64_t v17 = (char *)v73;
      if (!(void)v74)
      {
        unint64_t v18 = 32 * (v73 - (unint64_t)__p[1]) - 1;
        if (v18 - *((void *)&v74 + 1) < 0x100)
        {
          if ((unint64_t)v73 - (unint64_t)__p[1] >= *((void *)&v73 + 1) - (unint64_t)__p[0])
          {
            else {
              unint64_t v19 = (uint64_t)(*((void *)&v73 + 1) - (unint64_t)__p[0]) >> 2;
            }
            uint64_t v80 = (uint64_t)&v73 + 8;
            unint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::LogMessage> *>>( (uint64_t)&v73 + 8,  v19);
            uint64_t v77 = v76;
            unint64_t v78 = v76;
            unint64_t v79 = &v76[8 * v20];
            int64_t v75 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *> &>::push_back( &v76,  &v75);
            __int128 v21 = (char *)__p[1];
            uint64_t v22 = v78;
            if (__p[1] == (void *)v73)
            {
              uint64_t v41 = (char *)__p[1];
            }

            else
            {
              do
              {
                if (v22 == v79)
                {
                  uint64_t v23 = v77 - v76;
                  if (v77 <= v76)
                  {
                    if (v22 == v76) {
                      unint64_t v31 = 1LL;
                    }
                    else {
                      unint64_t v31 = (v22 - v76) >> 2;
                    }
                    uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::LogMessage> *>>( v80,  v31);
                    BOOL v34 = v77;
                    uint64_t v22 = &v32[8 * (v31 >> 2)];
                    uint64_t v35 = v78 - v77;
                    if (v78 != v77)
                    {
                      uint64_t v22 = &v32[8 * (v31 >> 2) + (v35 & 0xFFFFFFFFFFFFFFF8LL)];
                      uint64_t v36 = 8 * (v35 >> 3);
                      uint64_t v37 = &v32[8 * (v31 >> 2)];
                      do
                      {
                        uint64_t v38 = *(void *)v34;
                        v34 += 8;
                        *(void *)uint64_t v37 = v38;
                        v37 += 8;
                        v36 -= 8LL;
                      }

                      while (v36);
                    }

                    uint64_t v39 = v76;
                    unint64_t v76 = v32;
                    uint64_t v77 = &v32[8 * (v31 >> 2)];
                    unint64_t v78 = v22;
                    unint64_t v79 = &v32[8 * v33];
                    if (v39)
                    {
                      operator delete(v39);
                      uint64_t v22 = v78;
                    }
                  }

                  else
                  {
                    uint64_t v24 = v23 >> 3;
                    BOOL v25 = v23 >> 3 < -1;
                    uint64_t v26 = (v23 >> 3) + 2;
                    if (v25) {
                      uint64_t v27 = v26;
                    }
                    else {
                      uint64_t v27 = v24 + 1;
                    }
                    int v28 = &v77[-8 * (v27 >> 1)];
                    int64_t v29 = v22 - v77;
                    if (v22 != v77)
                    {
                      memmove(&v77[-8 * (v27 >> 1)], v77, v22 - v77);
                      uint64_t v22 = v77;
                    }

                    BOOL v30 = &v22[-8 * (v27 >> 1)];
                    uint64_t v22 = &v28[v29];
                    uint64_t v77 = v30;
                    unint64_t v78 = &v28[v29];
                  }
                }

                uint64_t v40 = *(void *)v21;
                v21 += 8;
                *(void *)uint64_t v22 = v40;
                uint64_t v22 = v78 + 8;
                v78 += 8;
              }

              while (v21 != (char *)v73);
              uint64_t v41 = (char *)__p[1];
            }

            __int128 v43 = (char *)__p[0];
            id v44 = (char *)*((void *)&v73 + 1);
            __p[0] = v76;
            __p[1] = v77;
            unint64_t v76 = v43;
            uint64_t v77 = v41;
            *(void *)&unsigned __int128 v73 = v22;
            *((void *)&v73 + std::shared_ptr<ctu::LogServer>::shared_ptr[abi:ne180100]<ctu::LogServer,void>(&v8, (void *)this + 1) = v79;
            unint64_t v78 = v21;
            unint64_t v79 = v44;
            BOOL v45 = (char *)(v22 - (char *)__p[1]) == (char *)8;
            uint64_t v46 = 128LL;
            if (!v45) {
              uint64_t v46 = v74 + 256;
            }
            *(void *)&unsigned __int128 v74 = v46;
            if (v21 != v41) {
              unint64_t v78 = &v21[(v41 - v21 + 7) & 0xFFFFFFFFFFFFFFF8LL];
            }
            if (v43) {
              operator delete(v43);
            }
          }

          else
          {
            if (__p[1] == __p[0])
            {
              unint64_t v76 = (char *)operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *>>::push_back( __p,  &v76);
              unint64_t v76 = *(char **)(v73 - 8);
              *(void *)&unsigned __int128 v73 = v73 - 8;
            }

            else
            {
              unint64_t v76 = (char *)operator new(0x1000uLL);
            }

            std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *>>::push_front( (uint64_t)__p,  &v76);
            uint64_t v42 = 128LL;
            *(void *)&unsigned __int128 v74 = v42;
          }
        }

        else
        {
          *(void *)&unsigned __int128 v74 = 256LL;
          unint64_t v76 = *(char **)(v73 - 8);
          *(void *)&unsigned __int128 v73 = v73 - 8;
          std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *>>::push_front( (uint64_t)__p,  &v76);
        }

        unint64_t v15 = v74;
        unint64_t v16 = (char *)__p[1];
        uint64_t v17 = (char *)v73;
      }

      id v47 = &v16[8 * (v15 >> 8)];
      if (v17 == v16) {
        uint64_t v48 = 0LL;
      }
      else {
        uint64_t v48 = *(void *)v47 + 16LL * v15;
      }
      if (v48 == *(void *)v47) {
        uint64_t v48 = *((void *)v47 - 1) + 4096LL;
      }
      *(_OWORD *)(v48 - 16) = v67;
      unsigned __int128 v74 = __PAIR128__(*((unint64_t *)&v74 + 1), v15 - 1) + __PAIR128__(1LL, 0LL);
      ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v68);
      *(void *)&v70[0] = &unk_189E96F18;
      std::__split_buffer<std::string>::pointer v49 = (std::__shared_weak_count *)*((void *)&v71 + 1);
      if (*((void *)&v71 + 1))
      {
        std::string::size_type v50 = (unint64_t *)(*((void *)&v71 + 1) + 8LL);
        do
          unint64_t v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }

      ctu::LoggerCommonBase::~LoggerCommonBase((void **)v70);
    }

    if ((void *)v73 != __p[1])
    {
      uint64_t v52 = (char **)((char *)__p[1] + 8 * ((unint64_t)v74 >> 8));
      unint64_t v53 = *v52;
      unint64_t v54 = &(*v52)[16 * v74];
      while (v54 != (char *)v55)
      {
        uint64_t v56 = *(uint64_t **)(v2 + 104);
        uint64_t v57 = *(uint64_t **)(v2 + 112);
        if (v56 != v57)
        {
          do
          {
            uint64_t v58 = *v56;
            uint64_t v59 = *((void *)v54 + 1);
            *(void *)&v70[0] = *(void *)v54;
            *((void *)&v70[0] + std::shared_ptr<ctu::LogServer>::shared_ptr[abi:ne180100]<ctu::LogServer,void>(&v8, (void *)this + 1) = v59;
            if (v59)
            {
              uint64_t v60 = (unint64_t *)(v59 + 8);
              do
                unint64_t v61 = __ldxr(v60);
              while (__stxr(v61 + 1, v60));
            }

            (*(void (**)(uint64_t, _OWORD *))(*(void *)v58 + 32LL))(v58, v70);
            unsigned int v62 = (std::__shared_weak_count *)*((void *)&v70[0] + 1);
            if (*((void *)&v70[0] + 1))
            {
              unint64_t v63 = (unint64_t *)(*((void *)&v70[0] + 1) + 8LL);
              do
                unint64_t v64 = __ldaxr(v63);
              while (__stlxr(v64 - 1, v63));
              if (!v64)
              {
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
              }
            }

            v56 += 2;
          }

          while (v56 != v57);
          unint64_t v53 = *v52;
        }

        v54 += 16;
        if (v54 - v53 == 4096)
        {
          uint64_t v65 = v52[1];
          ++v52;
          unint64_t v53 = v65;
          unint64_t v54 = v65;
        }
      }
    }

    uint64_t v66 = *(void *)(v2 + 96);
    *(void *)(v2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v3 - 96) = 0LL;
    if (v66) {
      (*(void (**)(uint64_t))(*(void *)v66 + 8LL))(v66);
    }
    return std::deque<std::shared_ptr<ctu::LogMessage>>::~deque[abi:ne180100](__p);
  }

  return result;
}

void sub_186608DBC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  uint64_t v31 = *(void *)(v28 - 96);
  uint64_t v30 = *(void *)(v28 - 88);
  if (v30 != v31) {
    *(void *)(v28 - 8std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = v30 + ((v31 - v30 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  }
  uint64_t v32 = *(void **)(v28 - 104);
  if (v32) {
    operator delete(v32);
  }
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      unint64_t v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }

  ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)&a11);
  a19 = &unk_189E96F18;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  ctu::LoggerCommonBase::~LoggerCommonBase(&a19);
  std::deque<std::shared_ptr<ctu::LogMessage>>::~deque[abi:ne180100](&a27);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *>>::push_front( uint64_t a1, void *a2)
{
  unsigned __int128 v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    __int128 v7 = *(_BYTE **)(a1 + 24);
    unint64_t v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1LL;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::LogMessage> *>>(v6, v12);
      __int128 v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8LL];
      unint64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8LL;
        }

        while (v19);
      }

      uint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + memset(&context, 0, 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        __int128 v5 = *(char **)(a1 + 8);
      }
    }

    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      __int128 v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        unsigned __int128 v4 = *(char **)(a1 + 16);
      }

      *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }

  else
  {
    __int128 v5 = *(char **)(a1 + 8);
  }

  *((void *)v5 - std::shared_ptr<ctu::LogServer>::shared_ptr[abi:ne180100]<ctu::LogServer,void>(&v8, (void *)this + 1) = *a2;
  *(void *)(a1 + 8) -= 8LL;
}

void std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *>>::push_back( void *a1, void *a2)
{
  __int128 v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    __int128 v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::LogMessage> *>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      uint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v24 = 8 * (v23 >> 3);
        BOOL v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)BOOL v25 = v26;
          v25 += 8;
          v24 -= 8LL;
        }

        while (v24);
      }

      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }

      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }

  *(void *)uint64_t v6 = *a2;
  a1[2] += 8LL;
}

void std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *> &>::push_back( void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    __int128 v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::LogMessage> *>>( a1[4],  v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8LL;
        }

        while (v22);
      }

      BOOL v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }

      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }

  *(void *)uint64_t v4 = *a2;
  a1[2] += 8LL;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::LogMessage> *>>( uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

uint64_t std::deque<std::shared_ptr<ctu::LogMessage>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    unint64_t v3 = (void **)a1[1];
  }

  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6 + 16 * v5;
    if (v7 != v8)
    {
      do
      {
        uint64_t v7 = std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v7) + 16;
        if (v7 - (void)*v6 == 4096)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }

      while (v7 != v8);
      uint64_t v2 = (void **)a1[1];
      unint64_t v3 = (void **)a1[2];
    }
  }

  void *v4 = 0LL;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 128LL;
  }

  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 256LL;
  }

  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    uint64_t v13 = *v2++;
    operator delete(v13);
  }

  return std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *>>::~__split_buffer( uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void dispatch::async<ctu::LogServer,ctu::LogServer::handleLogMessages(void)::$_0>(std::shared_ptr<ctu::LogServer>,dispatch_queue_s *,ctu::LogServer::handleLogMessages(void)::$_0 &&)::{lambda(void *)#1}::__invoke( uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  memset(v22, 0, sizeof(v22));
  std::mutex::lock((std::mutex *)(v2 + 128));
  uint64_t v3 = *(__int128 **)(v2 + 192);
  __int128 v18 = *(_OWORD *)(v2 + 200);
  *(void *)uint64_t v22 = v3;
  *(_OWORD *)(v2 + 192) = 0uLL;
  *(_OWORD *)&v22[8] = v18;
  *(void *)(v2 + 20std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  std::mutex::unlock((std::mutex *)(v2 + 128));
  if (*(void *)(v2 + 96))
  {
    if (v3 != (__int128 *)v18)
    {
      do
      {
        uint64_t v4 = *(void *)(v2 + 96);
        __int128 v21 = *v3;
        *(void *)uint64_t v3 = 0LL;
        *((void *)v3 + std::shared_ptr<ctu::LogServer>::shared_ptr[abi:ne180100]<ctu::LogServer,void>(&v8, (void *)this + 1) = 0LL;
        (*(void (**)(uint64_t, __int128 *))(*(void *)v4 + 32LL))(v4, &v21);
        unint64_t v5 = (std::__shared_weak_count *)*((void *)&v21 + 1);
        if (*((void *)&v21 + 1))
        {
          uint64_t v6 = (unint64_t *)(*((void *)&v21 + 1) + 8LL);
          do
            unint64_t v7 = __ldaxr(v6);
          while (__stlxr(v7 - 1, v6));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }

        ++v3;
      }

      while (v3 != (__int128 *)v18);
      goto LABEL_23;
    }

void sub_186609574( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a15;
  std::vector<std::shared_ptr<ctu::RestResourceConnection>>::__destroy_vector::operator()[abi:ne180100](&a18);
  uint64_t v20 = (void *)std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v18);
  operator delete(v20);
  _Unwind_Resume(a1);
}

const char *ctu::asString(int a1)
{
  if (a1 > 49)
  {
    if (a1 <= 79)
    {
      if (a1 == 50) {
        return "Notice";
      }
      if (a1 == 70) {
        return "Warn";
      }
    }

    else
    {
      switch(a1)
      {
        case 80:
          return "Error";
        case 100:
          return "Fatal";
        case 255:
          return "Never";
      }
    }
  }

  else if (a1 <= 9)
  {
    if (!a1) {
      return "Unset";
    }
    if (a1 == 1) {
      return "Always";
    }
  }

  else
  {
    switch(a1)
    {
      case 10:
        return "Trace";
      case 20:
        return "Debug";
      case 40:
        return "Info";
    }
  }

  return "???";
}

uint64_t ctu::asChar(int a1)
{
  if (a1 > 49)
  {
    if (a1 > 79)
    {
      if (a1 == 100) {
        return 70LL;
      }
      if (a1 == 80) {
        return 69LL;
      }
    }

    else
    {
      if (a1 == 50) {
        return 78LL;
      }
      if (a1 == 70) {
        return 87LL;
      }
    }

    return 63LL;
  }

  if (a1 == 10) {
    return 84LL;
  }
  if (a1 != 20)
  {
    if (a1 == 40) {
      return 73LL;
    }
    return 63LL;
  }

  return 68LL;
}

void ctu::OsLogContext::~OsLogContext(void **this)
{
}

{
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1);
}

ctu::OsLogContext *ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, os_log_s *a2, const char *a3)
{
  *(void *)this = a3;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef( (void *)this + 1,  a2);
  return this;
}

{
  *(void *)this = a3;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef( (void *)this + 1,  a2);
  return this;
}

ctu::OsLogContext *ctu::OsLogContext::OsLogContext( ctu::OsLogContext *this, const char *subsystem, const char *category)
{
  *(void *)this = category;
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = os_log_create(subsystem, category);
  return this;
}

{
  *(void *)this = category;
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = os_log_create(subsystem, category);
  return this;
}

ctu::OsLogContext *ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const ctu::OsLogContext *a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v3 = (void *)*((void *)a2 + 1);
  *(void *)this = v4;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef( (void *)this + 1,  v3);
  return this;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v4 = *(void *)a2;
  uint64_t v3 = (void *)*((void *)a2 + 1);
  *(void *)this = v4;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef( (void *)this + 1,  v3);
  return this;
}

void *ctu::OsLogContext::OsLogContext(void *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = (void *)a2[1];
  *a1 = v5;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef(a1 + 1, v4);
  uint64_t v6 = (void *)a2[1];
  a2[1] = 0LL;
  uint64_t v8 = v6;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v8);
  return a1;
}

{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v8;
  uint64_t v5 = *a2;
  uint64_t v4 = (void *)a2[1];
  *a1 = v5;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef(a1 + 1, v4);
  uint64_t v6 = (void *)a2[1];
  a2[1] = 0LL;
  uint64_t v8 = v6;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v8);
  return a1;
}

uint64_t *ctu::OsLogContext::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = (void *)a2[1];
  if (v3) {
    os_retain((void *)a2[1]);
  }
  uint64_t v5 = (void *)a1[1];
  uint64_t v7 = *a1;
  *a1 = v4;
  a1[1] = 0LL;
  if (&v7 != a1)
  {
    uint64_t v10 = 0LL;
    a1[1] = (uint64_t)v3;
    uint64_t v8 = 0LL;
    ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v10);
    uint64_t v3 = v8;
  }

  uint64_t v9 = 0LL;
  uint64_t v10 = v3;
  uint64_t v8 = v5;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v10);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v9);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v8);
  return a1;
}

{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v5 = *a2;
  uint64_t v4 = (void *)a2[1];
  if (v4)
  {
    os_retain((void *)a2[1]);
    uint64_t v6 = (void *)a2[1];
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  a2[1] = 0LL;
  uint64_t v12 = v6;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v12);
  uint64_t v7 = (void *)a1[1];
  uint64_t v9 = *a1;
  *a1 = v5;
  a1[1] = 0LL;
  if (&v9 != a1)
  {
    uint64_t v12 = 0LL;
    a1[1] = (uint64_t)v4;
    uint64_t v10 = 0LL;
    ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v12);
    uint64_t v4 = v10;
  }

  unint64_t v11 = 0LL;
  uint64_t v12 = v4;
  uint64_t v10 = v7;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v12);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v11);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v10);
  return a1;
}

void *ctu::operator<<(void *a1, int a2)
{
  uint64_t v3 = ctu::asString(a2);
  size_t v4 = strlen(v3);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
}

uint64_t ctu::combine(uint64_t result, unsigned int a2)
{
  if (a2) {
    BOOL v2 = (_DWORD)result == 255;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return result;
  }
  else {
    return a2;
  }
}

uint64_t ctu::max(uint64_t result, unsigned int a2)
{
  else {
    return result;
  }
}

uint64_t ctu::TrackedLogger::registerLoggerToServer(void *a1)
{
  return (**(uint64_t (***)(void))*a1)(*a1);
}

uint64_t ctu::LoggerCommonBase::LoggerCommonBase(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_189E96E60;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), *(char **)a2);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef( (void *)(a1 + 32),  *(void **)(a2 + 8));
  *(_WORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0;
  return a1;
}

{
  *(void *)a1 = &off_189E96E60;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), *(char **)a2);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef( (void *)(a1 + 32),  *(void **)(a2 + 8));
  *(_WORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0;
  return a1;
}

{
  __int128 v4;
  void *v5;
  void *v7;
  *(void *)a1 = &off_189E96E60;
  size_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + memset(&context, 0, 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = v4;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + memset(&context, 0, 24) = 0LL;
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef( (void *)(a1 + 32),  *(void **)(a2 + 32));
  *(_WORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = *(_WORD *)(a2 + 40);
  uint64_t v5 = *(void **)(a2 + 32);
  *(void *)(a2 + 32) = 0LL;
  uint64_t v7 = v5;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v7);
  return a1;
}

uint64_t ctu::LoggerCommonBase::LoggerCommonBase(uint64_t a1, __int128 *a2, void *object)
{
  *(void *)a1 = &off_189E96E60;
  uint64_t v5 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v6 = *a2;
    v5->__r_.__value_.__l.__cap_ = *((void *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }

  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef( (void *)(a1 + 32),  object);
  *(_WORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0;
  return a1;
}

void ctu::LoggerCommonBase::~LoggerCommonBase(void **this)
{
  *this = &off_189E96E60;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 4);
}

ctu::LoggerCommonBase *ctu::LoggerCommonBase::LoggerCommonBase( ctu::LoggerCommonBase *this, const ctu::LoggerCommonBase *a2)
{
  *(void *)this = &off_189E96E60;
  size_t v4 = (std::string *)((char *)this + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }

  else
  {
    __int128 v5 = *(_OWORD *)((char *)a2 + 8);
    v4->__r_.__value_.__l.__cap_ = *((void *)a2 + 3);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }

  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef( (void *)this + 4,  *((void **)a2 + 4));
  *((_WORD *)this + 20) = *((_WORD *)a2 + 20);
  return this;
}

uint64_t ctu::LoggerCommonBase::operator=(uint64_t a1, const ctu::LoggerCommonBase *a2)
{
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v10[16] = v3;
  __int128 v11 = v3;
  *(_OWORD *)uint64_t v10 = v3;
  ctu::LoggerCommonBase::LoggerCommonBase((ctu::LoggerCommonBase *)v10, a2);
  uint64_t v4 = *(void *)(a1 + 8);
  __int128 v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = *(_OWORD *)&v10[8];
  uint64_t v6 = *(void *)&v10[24];
  *(void *)&v10[8] = v4;
  *(_OWORD *)&v10[16] = v5;
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + memset(&context, 0, 24) = v6;
  *(void *)(a1 + 32) = 0LL;
  if (v10 != (_BYTE *)a1)
  {
    unint64_t v13 = 0LL;
    *(void *)(a1 + 32) = v11;
    *(void *)&__int128 v11 = 0LL;
    ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v13);
  }

  unint64_t v13 = (void *)v11;
  *(void *)&__int128 v11 = v7;
  uint64_t v12 = 0LL;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v13);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v12);
  __int16 v8 = *(_WORD *)(a1 + 40);
  *(_WORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = WORD4(v11);
  WORD4(v1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v8;
  ctu::LoggerCommonBase::~LoggerCommonBase((void **)v10);
  return a1;
}

uint64_t ctu::LoggerCommonBase::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v10[16] = v3;
  __int128 v11 = v3;
  *(_OWORD *)uint64_t v10 = v3;
  ctu::LoggerCommonBase::LoggerCommonBase((uint64_t)v10, a2);
  uint64_t v4 = *(void *)(a1 + 8);
  __int128 v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = *(_OWORD *)&v10[8];
  uint64_t v6 = *(void *)&v10[24];
  *(void *)&v10[8] = v4;
  *(_OWORD *)&v10[16] = v5;
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + memset(&context, 0, 24) = v6;
  *(void *)(a1 + 32) = 0LL;
  if (v10 != (_BYTE *)a1)
  {
    unint64_t v13 = 0LL;
    *(void *)(a1 + 32) = v11;
    *(void *)&__int128 v11 = 0LL;
    ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v13);
  }

  unint64_t v13 = (void *)v11;
  *(void *)&__int128 v11 = v7;
  uint64_t v12 = 0LL;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v13);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v12);
  __int16 v8 = *(_WORD *)(a1 + 40);
  *(_WORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = WORD4(v11);
  WORD4(v1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v8;
  ctu::LoggerCommonBase::~LoggerCommonBase((void **)v10);
  return a1;
}

uint64_t ctu::LoggerCommonBase::getLogDomain(ctu::LoggerCommonBase *this)
{
  return (uint64_t)this + 8;
}

uint64_t ctu::LoggerCommonBase::getLogLevel(ctu::LoggerCommonBase *this)
{
  if (*((_BYTE *)this + 40)) {
    BOOL v1 = *((unsigned __int8 *)this + 41) == 255;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1) {
    return *((unsigned __int8 *)this + 41);
  }
  else {
    return *((unsigned __int8 *)this + 40);
  }
}

uint64_t ctu::LoggerCommonBase::getLocalLogLevel(ctu::LoggerCommonBase *this)
{
  return *((unsigned __int8 *)this + 40);
}

uint64_t ctu::LoggerCommonBase::getInheritedLogLevel(ctu::LoggerCommonBase *this)
{
  return *((unsigned __int8 *)this + 41);
}

uint64_t ctu::LoggerCommonBase::setInheritedLogLevel(uint64_t result, char a2)
{
  *(_BYTE *)(result + 4ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = a2;
  return result;
}

BOOL ctu::LoggerCommonBase::enabled(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 41);
  if (*(_BYTE *)(a1 + 40)) {
    BOOL v3 = v2 == 255;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    unsigned int v2 = *(unsigned __int8 *)(a1 + 40);
  }
  return a2 >= v2;
}

uint64_t ctu::LoggerCommonBase::setLogLevel(uint64_t result, char a2)
{
  *(_BYTE *)(result + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = a2;
  return result;
}

void ctu::Logger::create( dispatch_object_s **a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, std::__shared_weak_count_vtbl **a5@<X8>)
{
  *a5 = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  a5[1] = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = (std::__shared_weak_count_vtbl *)operator new(0x70uLL);
  __int128 v11 = (void *)a4[1];
  uint64_t v34 = *a4;
  uint64_t v35 = v11;
  if (v11)
  {
    os_retain(v11);
    uint64_t v12 = (const void *(__cdecl **)(const std::__shared_weak_count *__hidden, const std::type_info *))a4[1];
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  a4[1] = 0LL;
  uint64_t v32 = v12;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef((void **)&v32);
  ctu::Logger::Logger(v10, a1, a2, a3, &v34);
  *a5 = v10;
  unint64_t v13 = (std::__shared_weak_count *)operator new(0x20uLL);
  v13->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  v13->__vftable = (std::__shared_weak_count_vtbl *)off_189E97070;
  v13->__shared_weak_owners_ = 0LL;
  v13[1].__vftable = v10;
  a5[1] = (std::__shared_weak_count_vtbl *)v13;
  uint64_t v15 = (std::__shared_weak_count *)v10[2].~__shared_weak_count;
  if (v15)
  {
    if (v15->__shared_owners_ != -1) {
      goto LABEL_17;
    }
    do
      unint64_t v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      unint64_t v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
    v10[1].__on_zero_shared_weaunint64_t k = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
    v10[2].~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
    std::__shared_weak_count::__release_weak(v15);
  }

  else
  {
    do
      unint64_t v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    uint64_t v20 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      unint64_t v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v10[1].__on_zero_shared_weaunint64_t k = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
    v10[2].~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
  }

  do
    unint64_t v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }

void sub_18660A168( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *ctu::Logger::Logger(void *a1, dispatch_object_s **a2, void *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = (void *)a5[1];
  uint64_t v14 = *a5;
  uint64_t v15 = v10;
  if (v10)
  {
    os_retain(v10);
    __int128 v11 = (void *)a5[1];
  }

  else
  {
    __int128 v11 = 0LL;
  }

  a5[1] = 0LL;
  unint64_t v16 = v11;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v16);
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::LoggerBase((uint64_t)a1, (uint64_t)&v14, a3);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v15);
  a1[9] = 0LL;
  a1[10] = 0LL;
  a1[8] = off_189E96F80;
  uint64_t v12 = *a2;
  a1[11] = *a2;
  if (v12) {
    dispatch_retain(v12);
  }
  *a1 = &off_189E96E78;
  a1[8] = &unk_189E96EB8;
  a1[12] = 0LL;
  a1[13] = a4;
  return a1;
}

void sub_18660A2A8(_Unwind_Exception *a1)
{
}

uint64_t ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::LoggerBase(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = *(char **)a2;
  uint64_t v6 = *(void **)(a2 + 8);
  xpc_object_t object = v6;
  if (v6)
  {
    os_retain(v6);
    __int16 v8 = *(void **)(a2 + 8);
  }

  else
  {
    __int16 v8 = 0LL;
  }

  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  uint64_t v14 = v8;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v14);
  *(void *)a1 = &off_189E96E60;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), v7);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef( (void *)(a1 + 32),  object);
  *(_WORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&object);
  *(void *)a1 = &unk_189E96F18;
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = *a3;
  uint64_t v9 = a3[1];
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = v9;
  if (v9)
  {
    uint64_t v10 = (unint64_t *)(v9 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  return a1;
}

void sub_18660A39C(_Unwind_Exception *a1)
{
}

void ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase(void **a1)
{
  *a1 = &unk_189E96F18;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 6));
  ctu::LoggerCommonBase::~LoggerCommonBase(a1);
}

{
  *a1 = &unk_189E96F18;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 6));
  ctu::LoggerCommonBase::~LoggerCommonBase(a1);
}

{
  void *v2;
  *a1 = &unk_189E96F18;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 6));
  ctu::LoggerCommonBase::~LoggerCommonBase(a1);
  operator delete(v2);
}

uint64_t ctu::Logger::getName(ctu::Logger *this)
{
  return *((void *)this + 13);
}

void ctu::Logger::updateTrackedConfig(uint64_t a1, char a2)
{
  v2[0] = MEMORY[0x1895F87A8];
  v2[1] = 0x40000000LL;
  v2[2] = ___ZN3ctu6Logger19updateTrackedConfigENS_8LogLevelE_block_invoke;
  v2[3] = &__block_descriptor_tmp_18;
  v2[4] = a1;
  char v3 = a2;
  ctu::SharedSynchronizable<ctu::Logger>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v2);
}

uint64_t ___ZN3ctu6Logger19updateTrackedConfigENS_8LogLevelE_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 41LL) = *(_BYTE *)(result + 40);
  return result;
}

void non-virtual thunk to'ctu::Logger::updateTrackedConfig(uint64_t a1, char a2)
{
  v2[0] = MEMORY[0x1895F87A8];
  v2[1] = 0x40000000LL;
  v2[2] = ___ZN3ctu6Logger19updateTrackedConfigENS_8LogLevelE_block_invoke;
  v2[3] = &__block_descriptor_tmp_18;
  v2[4] = a1 - 64;
  char v3 = a2;
  ctu::SharedSynchronizable<ctu::Logger>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v2);
}

void *ctu::Logger::getTrackedLoggerName@<X0>(char **this@<X0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, this[13]);
}

void *non-virtual thunk to'ctu::Logger::getTrackedLoggerName@<X0>(char **this@<X0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, this[5]);
}

uint64_t ctu::Logger::getTrackedLogLevel(ctu::Logger *this)
{
  return *((unsigned __int8 *)this + 40);
}

uint64_t non-virtual thunk to'ctu::Logger::getTrackedLogLevel(ctu::Logger *this)
{
  return *((unsigned __int8 *)this - 24);
}

void ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::buildMessage( uint64_t a1@<X0>, char a2@<W1>, ctu::LogMessageBuffer *a3@<X2>, void *a4@<X8>)
{
  __int16 v8 = (void *)ctu::Clock::now_in_nanoseconds((ctu::Clock *)a1);
  else {
    std::string __p = *(std::string *)(a1 + 8);
  }
  ctu::LogMessageBuffer::str(a3);
  v10[0] = off_189E96E20;
  v10[1] = v8;
  char v11 = a2;
  std::string v12 = __p;
  memset(&__p, 0, sizeof(__p));
  __int128 v13 = *(_OWORD *)a3;
  uint64_t v14 = *((void *)a3 + 2);
  *(void *)a3 = 0LL;
  *((void *)a3 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0LL;
  *((void *)a3 + 2) = 0LL;
  __int128 v15 = *((_OWORD *)a3 + 2);
  uint64_t v16 = *((void *)a3 + 6);
  *((void *)a3 + 4) = 0LL;
  *((void *)a3 + 5) = 0LL;
  *((void *)a3 + 6) = 0LL;
  std::allocate_shared[abi:ne180100]<ctu::LogMessage,std::allocator<ctu::LogMessage>,ctu::LogMessage,void>( (uint64_t)v10,  a4);
  ctu::LogMessage::~LogMessage(v10);
}

void sub_18660A648( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog( uint64_t a1, char a2, ctu::LogMessageBuffer *a3)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v3 = *(std::__shared_weak_count **)(a1 + 56);
  uint64_t v16 = v4;
  uint64_t v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }

  if (v4)
  {
    unsigned __int8 v7 = atomic_load((unsigned __int8 *)(v4 + 216));
    if ((v7 & 1) != 0)
    {
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::buildMessage(a1, a2, a3, &v14);
      ctu::LogServer::log(v4, (uint64_t)&v14);
      __int16 v8 = v15;
      if (v15)
      {
        uint64_t v9 = (unint64_t *)&v15->__shared_owners_;
        do
          unint64_t v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }

  char v11 = v17;
  if (v17)
  {
    std::string v12 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_18660A748( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::enabled(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 41);
  if (*(_BYTE *)(a1 + 40)) {
    BOOL v3 = v2 == 255;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    unsigned int v2 = *(unsigned __int8 *)(a1 + 40);
  }
  if (v2 > a2) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(a1 + 48);
  unint64_t v6 = *(std::__shared_weak_count **)(a1 + 56);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }

  if (v5)
  {
    unsigned __int8 v9 = atomic_load((unsigned __int8 *)(v5 + 216));
    uint64_t v4 = v9 & 1;
    if (!v6) {
      return v4;
    }
  }

  else
  {
    uint64_t v4 = 1LL;
    if (!v6) {
      return v4;
    }
  }

  unint64_t v10 = (unint64_t *)&v6->__shared_owners_;
  do
    unint64_t v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }

  return v4;
}

ctu::OsLogLogger *ctu::OsLogLogger::OsLogLogger( ctu::OsLogLogger *this, const char *subsystem, const char *category)
{
  *(void *)this = os_log_create(subsystem, category);
  return this;
}

{
  *(void *)this = os_log_create(subsystem, category);
  return this;
}

void *ctu::OsLogLogger::OsLogLogger(ctu::OsLogLogger *this, void **a2)
{
  return ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef( this,  a2[1]);
}

{
  return ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef( this,  a2[1]);
}

{
  return ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef(this, *a2);
}

{
  return ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef(this, *a2);
}

void *ctu::OsLogLogger::OsLogLogger(void *a1, void **a2)
{
  uint64_t v4 = *a2;
  *a2 = 0LL;
  unint64_t v6 = v4;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v6);
  return a1;
}

{
  void *v4;
  void *v6;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef(a1, *a2);
  uint64_t v4 = *a2;
  *a2 = 0LL;
  unint64_t v6 = v4;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v6);
  return a1;
}

void **ctu::OsLogLogger::operator=(void **a1, void **a2)
{
  BOOL v3 = *a2;
  if (*a2) {
    os_retain(*a2);
  }
  uint64_t v4 = *a1;
  *a1 = 0LL;
  if (&v6 != a1)
  {
    unint64_t v8 = 0LL;
    *a1 = v3;
    unint64_t v6 = 0LL;
    ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v8);
    BOOL v3 = v6;
  }

  unsigned __int8 v7 = 0LL;
  unint64_t v8 = v3;
  unint64_t v6 = v4;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v8);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v7);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v6);
  return a1;
}

{
  void *v4;
  void *v5;
  void *v6;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v4 = *a2;
  if (*a2)
  {
    os_retain(*a2);
    uint64_t v5 = *a2;
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  *a2 = 0LL;
  unint64_t v10 = v5;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v10);
  unint64_t v6 = *a1;
  *a1 = 0LL;
  if (&v8 != a1)
  {
    unint64_t v10 = 0LL;
    *a1 = v4;
    unint64_t v8 = 0LL;
    ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v10);
    uint64_t v4 = v8;
  }

  unsigned __int8 v9 = 0LL;
  unint64_t v10 = v4;
  unint64_t v8 = v6;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v10);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v9);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v8);
  return a1;
}

ctu::StaticLogger *ctu::StaticLogger::StaticLogger(ctu::StaticLogger *this)
{
  *(void *)this = &unk_189E96F18;
  *((void *)this + 6) = 0LL;
  *((void *)this + 7) = 0LL;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)this = &off_189E96F40;
  return this;
}

void sub_18660AAFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ctu::StaticLogger::~StaticLogger(void **this)
{
  *this = &unk_189E96F18;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)(this + 6));
  ctu::LoggerCommonBase::~LoggerCommonBase(this);
}

{
  *this = &unk_189E96F18;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)(this + 6));
  ctu::LoggerCommonBase::~LoggerCommonBase(this);
}

{
  void *v2;
  *this = &unk_189E96F18;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)(this + 6));
  ctu::LoggerCommonBase::~LoggerCommonBase(this);
  operator delete(v2);
}

uint64_t ctu::StaticLogger::StaticLogger(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  uint64_t v5 = (void *)ctu::LoggerCommonBase::LoggerCommonBase(a1, a2, MEMORY[0x1895F8DA0]);
  *uint64_t v5 = &unk_189E96F18;
  unint64_t v6 = v5;
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  void v6[6] = *a3;
  unsigned __int8 v9 = v6 + 6;
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = v8;
  if (v8)
  {
    unint64_t v10 = (unint64_t *)(v8 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    uint64_t v7 = *v9;
  }

  *(void *)a1 = &off_189E96F40;
  if (v7) {
    *(_BYTE *)(a1 + 4ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = ctu::LogServer::getCurrentLogLevel(v7, (void *)(a1 + 8));
  }
  return a1;
}

void sub_18660AC54(_Unwind_Exception *a1)
{
  *BOOL v1 = (void *)(v3 + 16);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v2);
  ctu::LoggerCommonBase::~LoggerCommonBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::StaticLogger::updateLogLevel(ctu::StaticLogger *this)
{
  uint64_t result = *((void *)this + 6);
  if (result)
  {
    uint64_t result = ctu::LogServer::getCurrentLogLevel(result, (void *)this + 1);
    *((_BYTE *)this + 4ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = result;
  }

  return result;
}

uint64_t ctu::StaticLogger::StaticLogger(uint64_t a1, uint64_t *a2, void *a3)
{
  unint64_t v6 = (void *)a2[1];
  uint64_t v10 = *a2;
  unint64_t v11 = v6;
  if (v6)
  {
    os_retain(v6);
    uint64_t v7 = (void *)a2[1];
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  a2[1] = 0LL;
  std::string v12 = v7;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v12);
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::LoggerBase(a1, (uint64_t)&v10, a3);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v11);
  *(void *)a1 = &off_189E96F40;
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    *(_BYTE *)(a1 + 4ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = ctu::LogServer::getCurrentLogLevel(v8, (void *)(a1 + 8));
  }
  return a1;
}

void sub_18660AD54(_Unwind_Exception *a1)
{
  *BOOL v1 = &unk_189E96F18;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v2);
  ctu::LoggerCommonBase::~LoggerCommonBase(v1);
  _Unwind_Resume(a1);
}

ctu::LoggerCommonBase *ctu::StaticLogger::StaticLogger( ctu::LoggerCommonBase *a1, const ctu::LoggerCommonBase *a2)
{
  uint64_t result = ctu::LoggerCommonBase::LoggerCommonBase(a1, a2);
  *(void *)uint64_t result = &unk_189E96F18;
  uint64_t v4 = *((void *)a2 + 7);
  *((void *)result + 6) = *((void *)a2 + 6);
  *((void *)result + 7) = v4;
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *(void *)uint64_t result = &off_189E96F40;
  return result;
}

{
  ctu::LoggerCommonBase *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result = ctu::LoggerCommonBase::LoggerCommonBase(a1, a2);
  *(void *)uint64_t result = &unk_189E96F18;
  uint64_t v4 = *((void *)a2 + 7);
  *((void *)result + 6) = *((void *)a2 + 6);
  *((void *)result + 7) = v4;
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *(void *)uint64_t result = &off_189E96F40;
  return result;
}

std::string *ctu::StaticLogger::setLogDomain(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void ctu::destr_function(ctu *this, void *a2)
{
  if (this)
  {
    uint64_t v3 = *(void **)this;
    if (v3)
    {
      *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v3;
      operator delete(v3);
    }

    operator delete(this);
  }

void ctu::initThreadId(ctu *this)
{
  if ((_MergedGlobals_5 & 1) == 0)
  {
    unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_18C4A4648);
    if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_18C4A4648))
    {
      __cxa_atexit( (void (*)(void *))MEMORY[0x189614570],  &ctu::initThreadId(void)::g_pages_mutex,  &dword_1865C1000);
      __cxa_guard_release(&qword_18C4A4648);
    }

    std::mutex::lock(&ctu::initThreadId(void)::g_pages_mutex);
    if ((_MergedGlobals_5 & 1) == 0)
    {
      pthread_key_create((pthread_key_t *)&qword_18C4A4650, (void (__cdecl *)(void *))ctu::destr_function);
      _MergedGlobals_5 = 1;
    }

    std::mutex::unlock(&ctu::initThreadId(void)::g_pages_mutex);
  }

uint64_t ctu::getPthreadKey(ctu *this)
{
  return qword_18C4A4650;
}

void ctu::TagVector::push_back(ctu::TagVector *this, int a2)
{
  uint64_t v5 = (_DWORD *)*((void *)this + 1);
  unint64_t v4 = *((void *)this + 2);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *(_DWORD **)this;
    uint64_t v8 = ((uint64_t)v5 - *(void *)this) >> 2;
    unint64_t v9 = v8 + 1;
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 1 > v9) {
      unint64_t v9 = v10 >> 1;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      std::string v12 = (char *)operator new(4 * v11);
    }

    else
    {
      std::string v12 = 0LL;
    }

    unint64_t v13 = &v12[4 * v8];
    *(_DWORD *)unint64_t v13 = a2;
    unint64_t v6 = v13 + 4;
    while (v5 != v7)
    {
      int v14 = *--v5;
      *((_DWORD *)v13 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v14;
      v13 -= 4;
    }

    *(void *)this = v13;
    *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v6;
    *((void *)this + 2) = &v12[4 * v11];
    if (v7) {
      operator delete(v7);
    }
  }

  else
  {
    *uint64_t v5 = a2;
    unint64_t v6 = v5 + 1;
  }

  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v6;
  ++*((_DWORD *)this + 6);
}

uint64_t ctu::TagVector::pop_back(uint64_t this)
{
  *(void *)(this + 8) -= 4LL;
  int v1 = *(_DWORD *)(this + 24);
  if (v1) {
    *(_DWORD *)(this + memset(&context, 0, 24) = v1 - 1;
  }
  return this;
}

void ctu::TagVector::getTagLabel(ctu::TagVector *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v20 = 0LL;
  unint64_t v21 = 0LL;
  unint64_t v22 = 0LL;
  uint64_t v3 = *((void *)this + 1);
  if (v3 == *(void *)this)
  {
    unint64_t v13 = 0LL;
    std::string v12 = 0LL;
  }

  else
  {
    do
    {
      memset(&v19, 170, sizeof(v19));
      unsigned int v5 = *(_DWORD *)(v3 - 4);
      v3 -= 4LL;
      std::to_string(&v19, v5);
      if (*((_DWORD *)this + 6))
      {
        if ((v19.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          size_t size = v19.__r_.__value_.__s.__size_;
        }
        else {
          size_t size = v19.__r_.__value_.__l.__size_;
        }
        memset(&v18, 170, sizeof(v18));
        std::string::basic_string[abi:ne180100]((uint64_t)&v18, size + 1);
        if ((v18.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v7 = &v18;
        }
        else {
          uint64_t v7 = (std::string *)v18.__r_.__value_.__r.__words[0];
        }
        if (size)
        {
          if ((v19.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v8 = &v19;
          }
          else {
            uint64_t v8 = (std::string *)v19.__r_.__value_.__r.__words[0];
          }
          memmove(v7, v8, size);
        }

        *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + size) = 43;
        std::string v19 = v18;
        --*((_DWORD *)this + 6);
      }

      unint64_t v9 = v21;
      if ((unint64_t)v21 >= v22)
      {
        unint64_t v11 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>( (uint64_t *)&v20,  (__int128 *)&v19);
      }

      else
      {
        if ((char)v19.__r_.__value_.__s.__size_ < 0)
        {
          std::string::__init_copy_ctor_external(v21, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
        }

        else
        {
          __int128 v10 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
          v21->__r_.__value_.__l.__cap_ = v19.__r_.__value_.__l.__cap_;
          *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
        }

        unint64_t v11 = v9 + 1;
      }

      unint64_t v21 = v11;
    }

    while (v3 != *(void *)this);
    std::string v12 = v20;
    unint64_t v13 = v21;
    if (v20 != v21)
    {
      int v14 = v21 - 1;
      if (&v21[-1] > v20)
      {
        do
        {
          std::string::size_type v15 = v12->__r_.__value_.__r.__words[0];
          __int128 v16 = *(_OWORD *)&v12->__r_.__value_.__r.__words[1];
          __int128 v17 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          v12->__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v17;
          ++v12;
          v14->__r_.__value_.__r.__words[0] = v15;
          *(_OWORD *)&v14->__r_.__value_.__r.__words[1] = v16;
          --v14;
        }

        while (v12 < v14);
        std::string v12 = v20;
        unint64_t v13 = v21;
      }
    }
  }

  ctu::join<std::__wrap_iter<std::string *>>(v12, v13, ",", 1uLL, a2);
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
}

void sub_18660B254( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20, uint64_t a21)
{
  std::string __p = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void ctu::Logger::~Logger(ctu::Logger *this)
{
  *(void *)this = &unk_189E96F18;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  ctu::LoggerCommonBase::~LoggerCommonBase((void **)this);
}

{
  void *v2;
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable((void *)this + 9);
  *(void *)this = &unk_189E96F18;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  ctu::LoggerCommonBase::~LoggerCommonBase((void **)this);
  operator delete(v2);
}

void non-virtual thunk to'ctu::Logger::~Logger(void **this)
{
  int v1 = this;
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable(this + 1);
  *(v1 - std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = &unk_189E96F18;
  v1 -= 8;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 6));
  ctu::LoggerCommonBase::~LoggerCommonBase(v1);
}

{
  void **v1;
  void *v2;
  int v1 = this;
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable(this + 1);
  *(v1 - std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = &unk_189E96F18;
  v1 -= 8;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 6));
  ctu::LoggerCommonBase::~LoggerCommonBase(v1);
  operator delete(v2);
}

void *ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef( void *a1, void *object)
{
  *a1 = object;
  if (object) {
    os_retain(object);
  }
  return a1;
}

{
  *a1 = object;
  if (object) {
    os_retain(object);
  }
  return a1;
}

void std::__shared_ptr_pointer<ctu::Logger *,std::shared_ptr<ctu::Logger> ctu::SharedSynchronizable<ctu::Logger>::make_shared_ptr<ctu::Logger>(ctu::Logger*)::{lambda(ctu::Logger *)#1},std::allocator<ctu::Logger>>::~__shared_ptr_pointer( std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_pointer<ctu::Logger *,std::shared_ptr<ctu::Logger> ctu::SharedSynchronizable<ctu::Logger>::make_shared_ptr<ctu::Logger>(ctu::Logger*)::{lambda(ctu::Logger *)#1},std::allocator<ctu::Logger>>::__on_zero_shared( uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ctu::Logger *,std::shared_ptr<ctu::Logger> ctu::SharedSynchronizable<ctu::Logger>::make_shared_ptr<ctu::Logger>(ctu::Logger*)::{lambda(ctu::Logger *)#1},std::allocator<ctu::Logger>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t std::shared_ptr<ctu::Logger> ctu::SharedSynchronizable<ctu::Logger>::make_shared_ptr<ctu::Logger>(ctu::Logger*)::{lambda(ctu::Logger*)#1}::operator() const(ctu::Logger*)::{lambda(void *)#1}::__invoke( uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 16LL))(result);
  }
  return result;
}

void ctu::SharedSynchronizable<ctu::Logger>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0LL)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = (dispatch_queue_s *)a1[2];
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 1174405120LL;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_6LoggerEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &__block_descriptor_tmp_18_0;
  void block[5] = v5;
  __int128 v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    unint64_t v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  void block[4] = a2;
  dispatch_async(v8, block);
  unint64_t v11 = v16;
  if (v16)
  {
    std::string v12 = (unint64_t *)&v16->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  do
    unint64_t v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }

uint64_t ___ZNK3ctu20SharedSynchronizableINS_6LoggerEE15execute_wrappedEU13block_pointerFvvE_block_invoke( uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void __copy_helper_block_e8_32b40c40_ZTSNSt3__110shared_ptrIKN3ctu6LoggerEEE(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v4;
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

void __destroy_helper_block_e8_32b40c40_ZTSNSt3__110shared_ptrIKN3ctu6LoggerEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  _Block_object_dispose(*(const void **)(a1 + 32), 7);
}

void *std::allocate_shared[abi:ne180100]<ctu::LogMessage,std::allocator<ctu::LogMessage>,ctu::LogMessage,void>@<X0>( uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x78uLL);
  uint64_t result = std::__shared_ptr_emplace<ctu::LogMessage>::__shared_ptr_emplace[abi:ne180100]<ctu::LogMessage,std::allocator<ctu::LogMessage>,0>( v4,  a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18660B69C(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<ctu::LogMessage>::__shared_ptr_emplace[abi:ne180100]<ctu::LogMessage,std::allocator<ctu::LogMessage>,0>( void *a1, uint64_t a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_189E97100;
  std::construct_at[abi:ne180100]<ctu::LogMessage,ctu::LogMessage,ctu::LogMessage*>((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_18660B6E4(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_emplace<ctu::LogMessage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_189E97100;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ctu::LogMessage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_189E97100;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<ctu::LogMessage>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::construct_at[abi:ne180100]<ctu::LogMessage,ctu::LogMessage,ctu::LogMessage*>( uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_189E96E20;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = v4;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external( (std::string *)(a1 + 24),  *(const std::string::value_type **)(a2 + 24),  *(void *)(a2 + 32));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + memset(&context, 0, 24) = v5;
  }

  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external( (std::string *)(a1 + 48),  *(const std::string::value_type **)(a2 + 48),  *(void *)(a2 + 56));
  }

  else
  {
    __int128 v6 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = v6;
  }

  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 8std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  uint64_t v8 = *(__int128 **)(a2 + 72);
  uint64_t v7 = *(__int128 **)(a2 + 80);
  if (v7 != v8)
  {
    std::vector<std::string>::__vallocate[abi:ne180100]( (void *)(a1 + 72),  0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v8) >> 3));
    *(void *)(a1 + 80) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>( a1 + 88,  v8,  v7,  *(std::string **)(a1 + 80));
  }

  return a1;
}

void sub_18660B848(_Unwind_Exception *exception_object)
{
}

uint64_t ctu::XpcServer::XpcServer(uint64_t a1, uint64_t a2, xpc_object_t *a3, dispatch_object_s **a4)
{
  uint64_t v7 = (void *)(a1 + 8);
  uint64_t v8 = *a4;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  ctu::SharedSynchronizable<ctu::XpcServer>::SharedSynchronizable(v7, a2, 0LL, &object);
  if (object) {
    dispatch_release(object);
  }
  *(void *)a1 = &unk_189E97150;
  unint64_t v9 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }

  else
  {
    __int128 v10 = *(_OWORD *)a2;
    *(void *)(a1 + ++*(_DWORD *)(this + 56) = *(void *)(a2 + 16);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }

  xpc_object_t v11 = *a3;
  unint64_t v13 = v11;
  if (v11)
  {
    xpc_retain(v11);
  }

  else
  {
    xpc_object_t v11 = xpc_null_create();
    unint64_t v13 = v11;
  }

  ctu::XpcServerHelper::XpcServerHelper((void **)(a1 + 64), &v13);
  xpc_release(v11);
  return a1;
}

void sub_18660B968( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
}

void *ctu::SharedSynchronizable<ctu::XpcServer>::SharedSynchronizable( void *a1, uint64_t a2, dispatch_queue_attr_t attr, dispatch_object_t *a4)
{
  else {
    __int128 v6 = *(const char **)a2;
  }
  uint64_t v7 = (dispatch_queue_s *)*a4;
  if (*a4)
  {
    dispatch_retain(*a4);
    dispatch_retain(v7);
    dispatch_queue_t v8 = dispatch_queue_create_with_target_V2(v6, attr, v7);
  }

  else
  {
    dispatch_queue_t v8 = dispatch_queue_create(v6, attr);
  }

  unint64_t v9 = v8;
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  a1[3] = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  if (v9) {
    dispatch_release(v9);
  }
  if (v7)
  {
    dispatch_release(v7);
    dispatch_release(v7);
  }

  return a1;
}

void ctu::XpcServer::~XpcServer(ctu::XpcServer *this)
{
  *(void *)this = &unk_189E97150;
  ctu::XpcServerHelper::~XpcServerHelper((xpc_connection_t *)this + 8);
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable((void *)this + 1);
}

void ctu::XpcServer::setListener_sync(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v4 = *a2;
  xpc_object_t v3 = v4;
  *a2 = xpc_null_create();
  ctu::XpcServerHelper::setListener((xpc_connection_t *)(a1 + 64), &v4);
  xpc_release(v3);
}

void sub_18660BB00(_Unwind_Exception *a1)
{
}

uint64_t ctu::XpcServer::getListener_sync(ctu::XpcServer *this)
{
  return (uint64_t)this + 64;
}

void ctu::XpcServer::startListener_sync(ctu::XpcServer *this)
{
  uint64_t v2 = (void *)((char *)this + 8);
  xpc_object_t v3 = (dispatch_object_s *)*((void *)this + 3);
  dispatch_object_t object = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  std::shared_ptr<ctu::LogServer>::shared_ptr[abi:ne180100]<ctu::LogServer,void>(&v12, v2);
  xpc_object_t v4 = v13;
  uint64_t v9 = v12;
  __int128 v10 = v13;
  if (v13)
  {
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  ctu::XpcServerHelper::startListener<ctu::XpcServer>((xpc_connection_t *)this + 8, (dispatch_queue_t *)&object, &v9);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_18660BBE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, dispatch_object_t object)
{
  if (a11) {
    std::__shared_weak_count::__release_weak(a11);
  }
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void ctu::XpcServerHelper::startListener<ctu::XpcServer>( xpc_connection_t *a1, dispatch_queue_t *a2, uint64_t *a3)
{
  if (MEMORY[0x186E3CD4C](*a1) == MEMORY[0x1895F9238])
  {
    unint64_t v6 = *a1;
    v11[0] = MEMORY[0x1895F87A8];
    v11[1] = 1174405120LL;
    _OWORD v11[2] = ___ZN3ctu15XpcServerHelper13startListenerINS_9XpcServerEEEvN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke;
    v11[3] = &__block_descriptor_tmp_19;
    uint64_t v8 = *a3;
    uint64_t v7 = (std::__shared_weak_count *)a3[1];
    void v11[4] = a1;
    v11[5] = v8;
    uint64_t v12 = v7;
    if (v7)
    {
      p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
    }

    unint64_t v13 = v6;
    xpc_connection_set_event_handler(v6, v11);
    xpc_connection_set_target_queue(*a1, *a2);
    xpc_connection_resume(*a1);
    if (v12) {
      std::__shared_weak_count::__release_weak(v12);
    }
  }

void sub_18660BCD8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  _Unwind_Resume(exception_object);
}

BOOL ctu::XpcServer::handleNewClient(void *a1, void **a2)
{
  xpc_object_t v4 = *a2;
  xpc_object_t object = v4;
  aBlocunint64_t k = (void *)0xAAAAAAAAAAAAAAAALL;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(void **__return_ptr, void *, xpc_object_t *))(*a1 + 8LL))(&aBlock, a1, &object);
  xpc_release(object);
  xpc_object_t object = 0LL;
  __int128 v5 = aBlock;
  if (aBlock)
  {
    xpc_object_t v6 = *a2;
    if (v6) {
      xpc_retain(v6);
    }
    else {
      xpc_object_t v6 = xpc_null_create();
    }
    uint64_t v7 = a1 + 1;
    uint64_t v8 = (dispatch_queue_s *)a1[3];
    if (v8) {
      dispatch_retain(v8);
    }
    std::shared_ptr<ctu::LogServer>::shared_ptr[abi:ne180100]<ctu::LogServer,void>(&handler, v7);
    uint64_t v10 = handler;
    uint64_t v9 = (std::__shared_weak_count *)v23;
    if (v23)
    {
      xpc_object_t v11 = (unint64_t *)(v23 + 16);
      do
        unint64_t v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    if (aBlock) {
      std::string::size_type v15 = _Block_copy(aBlock);
    }
    else {
      std::string::size_type v15 = 0LL;
    }
    uint64_t handler = MEMORY[0x1895F87A8];
    uint64_t v23 = 1174405120LL;
    uint64_t v24 = ___ZNK3ctu15XpcServerHelper12acceptClientINS_9XpcServerEN8dispatch5blockIU13block_pointerFvN3xpc10connectionENS5_4dictEEEEEEvS6_NS3_5queueENSt3__18weak_ptrIT_EET0__block_invoke;
    uint64_t v25 = &__block_descriptor_tmp_2_1;
    uint64_t v26 = v10;
    uint64_t v27 = v9;
    if (v9)
    {
      p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
      do
        unint64_t v17 = __ldxr(p_shared_weak_owners);
      while (__stxr(v17 + 1, p_shared_weak_owners));
    }

    xpc_object_t v28 = v6;
    if (v15) {
      std::string v18 = _Block_copy(v15);
    }
    else {
      std::string v18 = 0LL;
    }
    int64_t v29 = v18;
    xpc_connection_set_event_handler((xpc_connection_t)v6, &handler);
    xpc_connection_set_target_queue((xpc_connection_t)v6, v8);
    xpc_connection_resume((xpc_connection_t)v6);
    if (v29) {
      _Block_release(v29);
    }
    if (v27) {
      std::__shared_weak_count::__release_weak(v27);
    }
    if (v15) {
      _Block_release(v15);
    }
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
    if (v8) {
      dispatch_release(v8);
    }
    xpc_release(v6);
    if (aBlock) {
      _Block_release(aBlock);
    }
  }

  return v5 != 0LL;
}

void sub_18660BF0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v21) {
    _Block_release(v21);
  }
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  if (v19) {
    dispatch_release(v19);
  }
  xpc_release(v18);
  if (a10) {
    _Block_release(a10);
  }
  _Unwind_Resume(a1);
}

void ctu::XpcServer::handleListenerError(void (***a1)(void, xpc_object_t *), void **a2)
{
  xpc_object_t v3 = *a2;
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (**a1)(a1, &object);
  xpc_release(object);
}

void sub_18660C018( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::XpcServer::handleClientMessage(uint64_t a1, xpc_object_t *a2, void **a3, uint64_t *a4)
{
}

void dispatch::block<void({block_pointer})(xpc::connection,xpc::dict)>::operator()<xpc::connection&,xpc::dict&>( uint64_t a1, xpc_object_t object, void **a3)
{
  xpc_object_t v7 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v7 = xpc_null_create();
  }
  __int128 v5 = *a3;
  xpc_object_t objecta = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t objecta = xpc_null_create();
  }
  (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(a1 + 16))(a1, &v7, &objecta);
  xpc_release(objecta);
  xpc_object_t objecta = 0LL;
  xpc_release(v7);
}

void sub_18660C0D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
}

void ctu::XpcServer::handleClientError(uint64_t a1, void **a2, void **a3)
{
  __int128 v5 = *a2;
  xpc_object_t v8 = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_object_t v6 = *a3;
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(*(void *)a1 + 16LL))(a1, &v8, &object);
  xpc_release(object);
  xpc_object_t object = 0LL;
  xpc_release(v8);
}

void sub_18660C194( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
}

void ___ZN3ctu15XpcServerHelper13startListenerINS_9XpcServerEEEvN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke( void *a1, xpc_object_t a2)
{
  xpc_object_t v3 = (void *)a1[4];
  unint64_t v17 = 0LL;
  std::string v18 = 0LL;
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    std::string v18 = std::__shared_weak_count::lock(v4);
    if (!v18) {
      return;
    }
    xpc_object_t v6 = (void (***)(void, xpc_object_t *))a1[5];
    unint64_t v17 = v6;
    if (v6)
    {
      uint64_t v7 = MEMORY[0x186E3CD4C](a2);
      uint64_t v8 = MEMORY[0x1895F9238];
      if (v7 != MEMORY[0x1895F9238])
      {
        if (v7 == MEMORY[0x1895F9268] && *v3 == a1[7])
        {
          std::string::size_type v15 = a2;
          if (a2)
          {
            xpc_retain(a2);
          }

          else
          {
            a2 = xpc_null_create();
            std::string::size_type v15 = a2;
          }

          ctu::XpcServer::handleListenerError(v6, &v15);
          xpc_release(a2);
          std::string::size_type v15 = 0LL;
        }

        goto LABEL_21;
      }

      if (a2)
      {
        xpc_retain(a2);
        __int128 v16 = a2;
        xpc_object_t v9 = a2;
      }

      else
      {
        xpc_object_t v9 = xpc_null_create();
        __int128 v16 = v9;
        if (!v9)
        {
          xpc_object_t v10 = xpc_null_create();
          xpc_object_t v9 = 0LL;
          goto LABEL_16;
        }
      }

      if (MEMORY[0x186E3CD4C](v9) == v8)
      {
        xpc_retain(v9);
        xpc_object_t v10 = v9;
        goto LABEL_17;
      }

      xpc_object_t v10 = xpc_null_create();
LABEL_16:
      __int128 v16 = v10;
LABEL_17:
      BOOL v11 = ctu::XpcServer::handleNewClient(v6, &v16);
      xpc_release(v10);
      __int128 v16 = 0LL;
      xpc_release(v9);
      if (!v11) {
        xpc_connection_cancel((xpc_connection_t)a2);
      }
    }
  }

void sub_18660C37C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t __copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = *(void *)(a2 + 40);
  *(void *)(result + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = v2;
  if (v2)
  {
    xpc_object_t v3 = (unint64_t *)(v2 + 16);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZNK3ctu15XpcServerHelper12acceptClientINS_9XpcServerEN8dispatch5blockIU13block_pointerFvN3xpc10connectionENS5_4dictEEEEEEvS6_NS3_5queueENSt3__18weak_ptrIT_EET0__block_invoke( uint64_t a1, xpc_object_t a2)
{
  xpc_object_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v3) {
    return;
  }
  __int128 v5 = std::__shared_weak_count::lock(v3);
  uint64_t v20 = v5;
  if (!v5) {
    return;
  }
  xpc_object_t v6 = v5;
  uint64_t v7 = *(void **)(a1 + 32);
  v19[1] = v7;
  if (!v7)
  {
LABEL_29:
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }

    return;
  }

  uint64_t v8 = MEMORY[0x186E3CD4C](a2);
  uint64_t v9 = MEMORY[0x1895F9250];
  if (v8 != MEMORY[0x1895F9250])
  {
    if (v8 == MEMORY[0x1895F9268])
    {
      xpc_object_t v10 = *(xpc_object_t *)(a1 + 48);
      std::string v18 = v10;
      if (v10)
      {
        xpc_retain(v10);
      }

      else
      {
        xpc_object_t v10 = xpc_null_create();
        std::string v18 = v10;
      }

      unint64_t v17 = a2;
      if (a2)
      {
        xpc_retain(a2);
      }

      else
      {
        a2 = xpc_null_create();
        unint64_t v17 = a2;
      }

      ctu::XpcServer::handleClientError((uint64_t)v7, &v18, &v17);
      xpc_release(a2);
      unint64_t v17 = 0LL;
      xpc_release(v10);
      std::string v18 = 0LL;
    }

    goto LABEL_29;
  }

  xpc_object_t v11 = *(xpc_object_t *)(a1 + 48);
  if (v11)
  {
    xpc_retain(*(xpc_object_t *)(a1 + 48));
    if (a2)
    {
LABEL_10:
      xpc_retain(a2);
      v19[0] = a2;
      goto LABEL_13;
    }
  }

  else
  {
    xpc_object_t v11 = xpc_null_create();
    if (a2) {
      goto LABEL_10;
    }
  }

  a2 = xpc_null_create();
  v19[0] = a2;
  if (!a2)
  {
    xpc_object_t v12 = xpc_null_create();
    a2 = 0LL;
    goto LABEL_22;
  }

void sub_18660C630( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void *__copy_helper_block_e8_32c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c70_ZTSN8dispatch5blockIU13block_pointerFvN3xpc10connectionENS1_4dictEEEE( void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3)
  {
    unint64_t v4 = (unint64_t *)(v3 + 16);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  uint64_t result = (void *)a2[7];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_32c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c70_ZTSN8dispatch5blockIU13block_pointerFvN3xpc10connectionENS1_4dictEEEE( uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

double ctu::MemoryBufferedLogWriter::create@<D0>( ctu::MemoryBufferedLogWriter *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  xpc_object_t v6 = (char *)operator new(0x58uLL);
  *(void *)xpc_object_t v6 = off_189E97238;
  double result = 0.0;
  *(_OWORD *)(v6 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0u;
  *(_OWORD *)(v6 + memset(&context, 0, 24) = 0u;
  *(_OWORD *)(v6 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0u;
  *((void *)v6 + 7) = this;
  *((void *)v6 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = a2;
  *((void *)v6 + ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable((void *)this + 9) = 0LL;
  *((void *)v6 + 10) = 0LL;
  *a3 = v6;
  return result;
}

double ctu::MemoryBufferedLogWriter::MemoryBufferedLogWriter( ctu::MemoryBufferedLogWriter *this, uint64_t a2, uint64_t a3)
{
  *(void *)this = off_189E97238;
  double result = 0.0;
  *(_OWORD *)((char *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0u;
  *(_OWORD *)((char *)this + memset(&context, 0, 24) = 0u;
  *(_OWORD *)((char *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0u;
  *((void *)this + 7) = a2;
  *((void *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = a3;
  *((void *)this + ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable((void *)this + 9) = 0LL;
  *((void *)this + 10) = 0LL;
  return result;
}

{
  double result;
  *(void *)this = off_189E97238;
  double result = 0.0;
  *(_OWORD *)((char *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0u;
  *(_OWORD *)((char *)this + memset(&context, 0, 24) = 0u;
  *(_OWORD *)((char *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0u;
  *((void *)this + 7) = a2;
  *((void *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = a3;
  *((void *)this + ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable((void *)this + 9) = 0LL;
  *((void *)this + 10) = 0LL;
  return result;
}

void ctu::MemoryBufferedLogWriter::~MemoryBufferedLogWriter(ctu::MemoryBufferedLogWriter *this)
{
  *(void *)this = off_189E97238;
  std::deque<std::shared_ptr<ctu::LogMessage>>::~deque[abi:ne180100]((void *)this + 1);
}

{
  *(void *)this = off_189E97238;
  std::deque<std::shared_ptr<ctu::LogMessage>>::~deque[abi:ne180100]((void *)this + 1);
}

{
  *(void *)this = off_189E97238;
  std::deque<std::shared_ptr<ctu::LogMessage>>::~deque[abi:ne180100]((void *)this + 1);
  operator delete(this);
}

__n128 ctu::MemoryBufferedLogWriter::drain@<Q0>(ctu::MemoryBufferedLogWriter *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 8);
  uint64_t v2 = *((void *)this + 4);
  *(void *)(a2 + 16) = *((void *)this + 3);
  *(void *)(a2 + memset(&context, 0, 24) = v2;
  *(_OWORD *)((char *)this + memset(&context, 0, 24) = 0u;
  *(_OWORD *)((char *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0u;
  __n128 result = *(__n128 *)((char *)this + 40);
  *(__n128 *)(a2 + 32) = result;
  *((void *)this + 5) = 0LL;
  *((void *)this + 6) = 0LL;
  return result;
}

uint64_t ctu::MemoryBufferedLogWriter::getDroppedMessageCount(ctu::MemoryBufferedLogWriter *this)
{
  return *((void *)this + 10);
}

void ctu::MemoryBufferedLogWriter::dropFrontMessage(ctu::MemoryBufferedLogWriter *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + ((*((void *)this + 5) >> 5) & 0x7FFFFFFFFFFFFF8LL))
     + 16LL * *((void *)this + 5);
  else {
    uint64_t v3 = *(unsigned __int8 *)(*(void *)v2 + 71LL);
  }
  *((void *)this + 9) -= v3;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v2);
  int64x2_t v4 = vaddq_s64(*(int64x2_t *)((char *)this + 40), (int64x2_t)xmmword_186635430);
  *(int64x2_t *)((char *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = v4;
  if (v4.i64[0] >= 0x200uLL)
  {
    operator delete(**((void ***)this + 2));
    *((void *)this + 2) += 8LL;
    *((void *)this + 5) -= 256LL;
  }

  ++*((void *)this + 10);
}

void ctu::MemoryBufferedLogWriter::write(ctu::MemoryBufferedLogWriter *this, void *a2)
{
  uint64_t v4 = *((void *)this + 7);
  if (v4 >= 1 && *((void *)this + 6) >= (unint64_t)v4)
  {
    do
      ctu::MemoryBufferedLogWriter::dropFrontMessage(this);
    while (*((void *)this + 6) >= *((void *)this + 7));
  }

  uint64_t v5 = *((void *)this + 8);
  if (v5 >= 1 && *((void *)this + 9) >= v5)
  {
    do
      ctu::MemoryBufferedLogWriter::dropFrontMessage(this);
    while (*((void *)this + 9) >= *((void *)this + 8));
  }

  uint64_t v6 = *a2;
  else {
    uint64_t v7 = *(unsigned __int8 *)(*a2 + 71LL);
  }
  uint64_t v8 = (char *)*((void *)this + 3);
  uint64_t v9 = (char *)*((void *)this + 2);
  uint64_t v10 = v8 - v9;
  *((void *)this + 9) += v7;
  if (v8 == v9) {
    uint64_t v11 = 0LL;
  }
  else {
    uint64_t v11 = 32 * (v8 - v9) - 1;
  }
  unint64_t v12 = *((void *)this + 5);
  unint64_t v13 = *((void *)this + 6) + v12;
  if (v11 == v13)
  {
    unint64_t v14 = (void *)((char *)this + 8);
    if (v12 < 0x100)
    {
      uint64_t v29 = v10 >> 3;
      uint64_t v30 = (char *)*((void *)this + 4);
      unint64_t v31 = (char *)*((void *)this + 1);
      if (v10 >> 3 >= (unint64_t)((v30 - v31) >> 3))
      {
        if (v30 == v31) {
          unint64_t v32 = 1LL;
        }
        else {
          unint64_t v32 = (v30 - v31) >> 2;
        }
        uint64_t v88 = (uint64_t)this + 32;
        std::string __p = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::LogMessage> *>>( (uint64_t)this + 32,  v32);
        __src = (char *)__p + 8 * v29;
        *(void *)&__int128 v87 = __src;
        *((void *)&v87 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = (char *)__p + 8 * v33;
        unint64_t v84 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *> &>::push_back( &__p,  &v84);
        uint64_t v34 = (char *)*((void *)this + 3);
        uint64_t v35 = (char *)__src;
        if (v34 == *((char **)this + 2))
        {
          unint64_t v51 = (char *)*((void *)this + 3);
        }

        else
        {
          do
          {
            if (v35 == __p)
            {
              if ((unint64_t)v87 >= *((void *)&v87 + 1))
              {
                else {
                  unint64_t v40 = (uint64_t)(*((void *)&v87 + 1) - (void)v35) >> 2;
                }
                uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::LogMessage> *>>( v88,  v40);
                uint64_t v36 = &v41[(2 * v40 + 6) & 0xFFFFFFFFFFFFFFF8LL];
                __int128 v43 = (uint64_t *)__src;
                id v44 = v36;
                uint64_t v45 = v87 - (void)__src;
                if ((void *)v87 != __src)
                {
                  id v44 = &v36[v45 & 0xFFFFFFFFFFFFFFF8LL];
                  uint64_t v46 = 8 * (v45 >> 3);
                  id v47 = v36;
                  do
                  {
                    uint64_t v48 = *v43++;
                    *(void *)id v47 = v48;
                    v47 += 8;
                    v46 -= 8LL;
                  }

                  while (v46);
                }

                std::__split_buffer<std::string>::pointer v49 = __p;
                std::string __p = v41;
                __src = v36;
                *(void *)&__int128 v87 = v44;
                *((void *)&v87 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = &v41[8 * v42];
                if (v49)
                {
                  operator delete(v49);
                  uint64_t v36 = (char *)__src;
                }
              }

              else
              {
                uint64_t v37 = (uint64_t)(*((void *)&v87 + 1) - v87) >> 3;
                if (v37 >= -1) {
                  uint64_t v38 = v37 + 1;
                }
                else {
                  uint64_t v38 = v37 + 2;
                }
                uint64_t v39 = v38 >> 1;
                uint64_t v36 = &v35[8 * (v38 >> 1)];
                if ((char *)v87 != v35)
                {
                  memmove(&v35[8 * (v38 >> 1)], v35, v87 - (void)v35);
                  uint64_t v35 = (char *)v87;
                }

                __src = v36;
                *(void *)&__int128 v87 = &v35[8 * v39];
              }
            }

            else
            {
              uint64_t v36 = v35;
            }

            uint64_t v50 = *((void *)v34 - 1);
            v34 -= 8;
            *((void *)v36 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v50;
            uint64_t v35 = (char *)__src - 8;
            __src = (char *)__src - 8;
          }

          while (v34 != *((char **)this + 2));
          unint64_t v51 = (char *)*((void *)this + 3);
        }

        uint64_t v66 = (void *)*((void *)this + 1);
        *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = __p;
        *((void *)this + 2) = v35;
        std::string __p = v66;
        __src = v34;
        uint64_t v67 = *((void *)this + 4);
        *(_OWORD *)((char *)this + memset(&context, 0, 24) = v87;
        *(void *)&__int128 v87 = v51;
        *((void *)&v87 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v67;
        if (v51 != v34) {
          *(void *)&__int128 v87 = &v51[(v34 - v51 + 7) & 0xFFFFFFFFFFFFFFF8LL];
        }
        if (v66) {
          operator delete(v66);
        }
        goto LABEL_65;
      }

      if (v30 != v8)
      {
        std::string __p = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *>>::push_back( (void *)this + 1,  &__p);
LABEL_65:
        uint64_t v9 = (char *)*((void *)this + 2);
        unint64_t v13 = *((void *)this + 6) + *((void *)this + 5);
        uint64_t v6 = *a2;
        goto LABEL_66;
      }

      std::string __p = operator new(0x1000uLL);
      std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *>>::push_front( (uint64_t)this + 8,  &__p);
      unint64_t v63 = (void *)*((void *)this + 2);
      uint64_t v8 = (char *)*((void *)this + 3);
      uint64_t v65 = *v63;
      unint64_t v64 = (char *)(v63 + 1);
      uint64_t v17 = v65;
      *((void *)this + 2) = v64;
      if (v8 == *((char **)this + 4))
      {
        uint64_t v69 = (uint64_t)&v64[-*v14];
        if ((unint64_t)v64 > *v14)
        {
          uint64_t v70 = v69 >> 3;
          BOOL v21 = v69 >> 3 < -1;
          uint64_t v71 = (v69 >> 3) + 2;
          if (v21) {
            uint64_t v72 = v71;
          }
          else {
            uint64_t v72 = v70 + 1;
          }
          uint64_t v73 = -(v72 >> 1);
          uint64_t v74 = v72 >> 1;
          int64_t v75 = &v64[-8 * v74];
          int64_t v76 = v8 - v64;
          if (v8 != v64)
          {
            memmove(&v64[-8 * v74], v64, v8 - v64);
            unint64_t v64 = (char *)*((void *)this + 2);
          }

          uint64_t v8 = &v75[v76];
          xpc_object_t v28 = &v64[8 * v73];
          goto LABEL_23;
        }

        else {
          unint64_t v77 = (uint64_t)&v8[-*v14] >> 2;
        }
        unint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::LogMessage> *>>( (uint64_t)this + 32,  v77);
        unint64_t v54 = &v53[8 * (v77 >> 2)];
        uint64_t v56 = &v53[8 * v78];
        unint64_t v79 = (uint64_t *)*((void *)this + 2);
        uint64_t v8 = v54;
        uint64_t v80 = *((void *)this + 3) - (void)v79;
        if (v80)
        {
          uint64_t v8 = &v54[v80 & 0xFFFFFFFFFFFFFFF8LL];
          uint64_t v81 = 8 * (v80 >> 3);
          unint64_t v82 = &v53[8 * (v77 >> 2)];
          do
          {
            uint64_t v83 = *v79++;
            *(void *)unint64_t v82 = v83;
            v82 += 8;
            v81 -= 8LL;
          }

          while (v81);
        }

LABEL_56:
        unsigned int v62 = (void *)*((void *)this + 1);
        *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v53;
        *((void *)this + 2) = v54;
        *((void *)this + 3) = v8;
        *((void *)this + 4) = v56;
        if (v62)
        {
          operator delete(v62);
          uint64_t v8 = (char *)*((void *)this + 3);
        }
      }
    }

    else
    {
      std::string::size_type v15 = (char *)*((void *)this + 4);
      *((void *)this + 5) = v12 - 256;
      uint64_t v18 = *(void *)v9;
      unint64_t v16 = v9 + 8;
      uint64_t v17 = v18;
      *((void *)this + 2) = v16;
      if (v8 == v15)
      {
        uint64_t v19 = (uint64_t)&v16[-*v14];
        if ((unint64_t)v16 > *v14)
        {
          uint64_t v20 = v19 >> 3;
          BOOL v21 = v19 >> 3 < -1;
          uint64_t v22 = (v19 >> 3) + 2;
          if (v21) {
            uint64_t v23 = v22;
          }
          else {
            uint64_t v23 = v20 + 1;
          }
          uint64_t v24 = -(v23 >> 1);
          uint64_t v25 = v23 >> 1;
          uint64_t v26 = &v16[-8 * v25];
          int64_t v27 = v8 - v16;
          if (v8 != v16)
          {
            memmove(&v16[-8 * v25], v16, v8 - v16);
            uint64_t v8 = (char *)*((void *)this + 2);
          }

          xpc_object_t v28 = &v8[8 * v24];
          uint64_t v8 = &v26[v27];
LABEL_23:
          *((void *)this + 2) = v28;
          *((void *)this + 3) = v8;
          goto LABEL_59;
        }

        else {
          unint64_t v52 = (uint64_t)&v8[-*v14] >> 2;
        }
        unint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::LogMessage> *>>( (uint64_t)this + 32,  v52);
        unint64_t v54 = &v53[8 * (v52 >> 2)];
        uint64_t v56 = &v53[8 * v55];
        uint64_t v57 = (uint64_t *)*((void *)this + 2);
        uint64_t v8 = v54;
        uint64_t v58 = *((void *)this + 3) - (void)v57;
        if (v58)
        {
          uint64_t v8 = &v54[v58 & 0xFFFFFFFFFFFFFFF8LL];
          uint64_t v59 = 8 * (v58 >> 3);
          uint64_t v60 = &v53[8 * (v52 >> 2)];
          do
          {
            uint64_t v61 = *v57++;
            *(void *)uint64_t v60 = v61;
            v60 += 8;
            v59 -= 8LL;
          }

          while (v59);
        }

        goto LABEL_56;
      }
    }

LABEL_59:
    *(void *)uint64_t v8 = v17;
    *((void *)this + 3) += 8LL;
    goto LABEL_65;
  }

LABEL_66:
  uint64_t v68 = (void *)(*(void *)&v9[(v13 >> 5) & 0x7FFFFFFFFFFFFF8LL] + 16LL * v13);
  void *v68 = v6;
  v68[1] = a2[1];
  *a2 = 0LL;
  a2[1] = 0LL;
  ++*((void *)this + 6);
}

void sub_18660CE4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::XpcClient::XpcClient(uint64_t a1, __int128 *a2, dispatch_object_s **a3, dispatch_object_s **a4)
{
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  uint64_t v7 = *a3;
  *(void *)(a1 + memset(&context, 0, 24) = *a3;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = *a4;
  *(void *)(a1 + 32) = *a4;
  if (v8) {
    dispatch_retain(v8);
  }
  *(void *)a1 = &unk_189E972A8;
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0LL;
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = xpc_null_create();
  __int128 v9 = *a2;
  *(void *)(a1 + 64) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = v9;
  *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *(void *)a2 = 0LL;
  return a1;
}

uint64_t ctu::XpcClient::XpcClient(uint64_t a1, char *label, dispatch_object_s **a3)
{
  uint64_t v4 = label;
  if (label[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)label, *((void *)label + 1));
    if (v4[23] < 0) {
      uint64_t v4 = *(char **)v4;
    }
  }

  else
  {
    std::string v9 = *(std::string *)label;
  }

  dispatch_queue_t v6 = dispatch_queue_create(v4, 0LL);
  uint64_t v8 = v6;
  ctu::XpcClient::XpcClient(a1, (__int128 *)&v9, &v8, a3);
  if (v6) {
    dispatch_release(v6);
  }
  return a1;
}

uint64_t ctu::XpcClient::XpcClient(uint64_t a1, char *label)
{
  uint64_t v2 = label;
  if (label[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)label, *((void *)label + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
  }

  else
  {
    std::string v8 = *(std::string *)label;
  }

  dispatch_queue_t v4 = dispatch_queue_create(v2, 0LL);
  dispatch_queue_t v6 = 0LL;
  uint64_t v7 = v4;
  ctu::XpcClient::XpcClient(a1, (__int128 *)&v8, &v7, &v6);
  if (v4) {
    dispatch_release(v4);
  }
  return a1;
}

void ctu::XpcClient::~XpcClient(void **this)
{
  *this = &unk_189E972A8;
  ctu::XpcClientHelper::~XpcClientHelper(this + 5);
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable(this + 1);
}

void ctu::XpcClient::setServer_sync(uint64_t a1, void *a2)
{
  if (MEMORY[0x186E3CD4C](*a2) == MEMORY[0x1895F9238])
  {
    dispatch_queue_t v4 = (void *)*a2;
    xpc_object_t v14 = v4;
    if (v4) {
      xpc_retain(v4);
    }
    else {
      xpc_object_t v14 = xpc_null_create();
    }
    uint64_t v5 = *(dispatch_object_s **)(a1 + 24);
    dispatch_object_t object = v5;
    if (v5) {
      dispatch_retain(v5);
    }
    std::shared_ptr<ctu::LogServer>::shared_ptr[abi:ne180100]<ctu::LogServer,void>(&v15, (void *)(a1 + 8));
    dispatch_queue_t v6 = v16;
    uint64_t v11 = v15;
    unint64_t v12 = v16;
    if (v16)
    {
      p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
      do
        unint64_t v8 = __ldxr(p_shared_weak_owners);
      while (__stxr(v8 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        unint64_t v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }

    ctu::XpcClientHelper::setServer<ctu::XpcClient>( (_xpc_connection_s **)(a1 + 40),  &v14,  (dispatch_queue_t *)&object,  &v11);
    if (v12) {
      std::__shared_weak_count::__release_weak(v12);
    }
    if (object) {
      dispatch_release(object);
    }
    xpc_release(v14);
  }

  else
  {
    ctu::XpcClientHelper::setServer((void *)(a1 + 40));
  }

void sub_18660D1E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, dispatch_object_t object, xpc_object_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  if (object) {
    dispatch_release(object);
  }
  xpc_release(a12);
  _Unwind_Resume(a1);
}

void ctu::XpcClientHelper::setServer<ctu::XpcClient>( _xpc_connection_s **a1, xpc_object_t *a2, dispatch_queue_t *a3, uint64_t *a4)
{
  xpc_object_t v15 = *a2;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    xpc_object_t v15 = xpc_null_create();
  }
  ctu::XpcClientHelper::setServer_internal(a1, &v15);
  xpc_release(v15);
  if (MEMORY[0x186E3CD4C](*a1) == MEMORY[0x1895F9238])
  {
    uint64_t v7 = *a1;
    handler[0] = MEMORY[0x1895F87A8];
    handler[1] = 1174405120LL;
    handler[2] = ___ZN3ctu15XpcClientHelper9setServerINS_9XpcClientEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke;
    handler[3] = &__block_descriptor_tmp_20;
    uint64_t v9 = *a4;
    unint64_t v8 = (std::__shared_weak_count *)a4[1];
    handler[4] = a1;
    void handler[5] = v9;
    unint64_t v13 = v8;
    if (v8)
    {
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        unint64_t v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
    }

    xpc_object_t v14 = v7;
    xpc_connection_set_event_handler(v7, handler);
    xpc_connection_set_target_queue(v7, *a3);
    xpc_connection_resume(v7);
    if (v13) {
      std::__shared_weak_count::__release_weak(v13);
    }
  }

void sub_18660D320( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  _Unwind_Resume(exception_object);
}

void ctu::XpcClient::handleServerError(void (***a1)(void, xpc_object_t *), void **a2)
{
  uint64_t v3 = *a2;
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (**a1)(a1, &object);
  xpc_release(object);
}

void sub_18660D3B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::XpcClient::handleMessage(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)a1 + 8LL))(a1, &object);
  xpc_release(object);
}

void sub_18660D434( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ___ZN3ctu15XpcClientHelper9setServerINS_9XpcClientEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke( void *a1, xpc_object_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (void *)a1[4];
    dispatch_queue_t v6 = std::__shared_weak_count::lock(v3);
    unint64_t v16 = v6;
    if (v6)
    {
      uint64_t v7 = v6;
      unint64_t v8 = (void *)a1[5];
      v15[1] = v8;
      if (!v8)
      {
LABEL_21:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          unint64_t v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }

        return;
      }

      uint64_t v9 = MEMORY[0x186E3CD4C](a2);
      uint64_t v10 = MEMORY[0x1895F9250];
      if (v9 != MEMORY[0x1895F9250])
      {
        if (v9 == MEMORY[0x1895F9268] && *v5 == a1[7])
        {
          xpc_object_t v14 = a2;
          if (a2)
          {
            xpc_retain(a2);
          }

          else
          {
            a2 = xpc_null_create();
            xpc_object_t v14 = a2;
          }

          ctu::XpcClient::handleServerError((void (***)(void, xpc_object_t *))v8, &v14);
          xpc_release(a2);
          xpc_object_t v14 = 0LL;
        }

        goto LABEL_21;
      }

      if (a2)
      {
        xpc_retain(a2);
        v15[0] = a2;
      }

      else
      {
        a2 = xpc_null_create();
        v15[0] = a2;
        if (!a2)
        {
          xpc_object_t v11 = xpc_null_create();
          a2 = 0LL;
          goto LABEL_16;
        }
      }

      if (MEMORY[0x186E3CD4C](a2) == v10)
      {
        xpc_retain(a2);
        xpc_object_t v11 = a2;
        goto LABEL_17;
      }

      xpc_object_t v11 = xpc_null_create();
LABEL_16:
      v15[0] = v11;
LABEL_17:
      ctu::XpcClient::handleMessage((uint64_t)v8, v15);
      xpc_release(v11);
      v15[0] = 0LL;
      xpc_release(a2);
      uint64_t v7 = v16;
      if (!v16) {
        return;
      }
      goto LABEL_21;
    }
  }

void sub_18660D5F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t __copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcClientEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = *(void *)(a2 + 40);
  *(void *)(result + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 16);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcClientEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t TelephonyUtilWriteStackshot(uint64_t a1, int a2)
{
  return TelephonyUtilWriteStackshotWithExcCode(a1, a2, -783217523);
}

uint64_t TelephonyUtilWriteStackshotWithExcCode(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = a3;
  id v6 = objc_alloc_init(MEMORY[0x1896077E8]);
  if (qword_18C4A4670 != -1) {
    dispatch_once(&qword_18C4A4670, &__block_literal_global_8);
  }
  uint64_t v7 = [NSString stringWithCString:a1 encoding:4];
  uint64_t v14 = v7;
  if (a2)
  {
    xpc_object_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_MergedGlobals_6;
    if (_MergedGlobals_6)
    {
      uint64_t v16 = getpid();
      if ((v15(v16, v5, v14) & 1) != 0) {
        return [v6 drain];
      }
    }

void TelephonyUtilTriggerNMI()
{
  if (_TUQueryBuildInformationOnce != -1) {
    dispatch_once(&_TUQueryBuildInformationOnce, &__block_literal_global_32);
  }
  if (_TUIsInternalBuildCached == 1) {
    JUMPOUT(0x186E3CA70LL);
  }
}

void *__TelephonyUtilLoadCrashSupport_block_invoke( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = dlopen("/System/Library/PrivateFrameworks/CrashReporterSupport.framework/CrashReporterSupport", 1);
  qword_18C4A4668 = (uint64_t)v9;
  if (!v9) {
    return (void *)_TelephonyUtilDebugPrint( (uint64_t)"TelephonyUtilLoadCrashSupport_block_invoke",  (uint64_t)"Unable to load CrashReporterSupport framework.\n",  v10,  v11,  v12,  v13,  v14,  v15,  a9);
  }
  off_18C4A4660 = (uint64_t (*)(void, void))dlsym(v9, "WriteStackshotReport");
  __n128 result = dlsym((void *)qword_18C4A4668, "SimulateCrash");
  _MergedGlobals_6 = result;
  return result;
}

uint64_t ctu::rest::asOperation(xpc_object_t *this, const xpc::object *a2)
{
  if (MEMORY[0x186E3CD4C](*this, a2) == MEMORY[0x1895F92A8]) {
    return 0LL;
  }
  memset(&__p, 170, sizeof(__p));
  memset(v22, 0, sizeof(v22));
  xpc::dyn_cast_or_default(this, (uint64_t)v22, &__p);
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  switch(size)
  {
    case 6uLL:
      std::__split_buffer<std::string>::pointer p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::__split_buffer<std::string>::pointer p_p = &__p;
      }
      int data = (int)p_p->__r_.__value_.__l.__data_;
      int v13 = WORD2(p_p->__r_.__value_.__r.__words[0]);
      if (data == 1769238382 && v13 == 31078)
      {
        uint64_t v10 = 5LL;
        return v10;
      }

      break;
    case 4uLL:
      uint64_t v15 = (unsigned int *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v15 = (unsigned int *)&__p;
      }
      if (*v15 != 1752397168)
      {
        unsigned int v16 = bswap32(*v15);
        BOOL v17 = v16 >= 0x70696E67;
        int v18 = v16 > 0x70696E67;
        int v19 = !v17;
        if (v18 == v19) {
          uint64_t v10 = 6LL;
        }
        else {
          uint64_t v10 = 0LL;
        }
        return v10;
      }

      uint64_t v10 = 3LL;
LABEL_49:
      operator delete(__p.__r_.__value_.__l.__data_);
      return v10;
    case 3uLL:
      unint64_t v4 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v4 = &__p;
      }
      if (LOWORD(v4->__r_.__value_.__l.__data_) == 25959 && v4->__r_.__value_.__s.__data_[2] == 116)
      {
        uint64_t v10 = 2LL;
        return v10;
      }

      if (LOWORD(v4->__r_.__value_.__l.__data_) == 25971 && v4->__r_.__value_.__s.__data_[2] == 116)
      {
        uint64_t v10 = 1LL;
        goto LABEL_49;
      }

      int data_low = LOWORD(v4->__r_.__value_.__l.__data_);
      int v8 = v4->__r_.__value_.__s.__data_[2];
      if (data_low == 28528 && v8 == 112)
      {
        uint64_t v10 = 4LL;
        goto LABEL_49;
      }

      break;
  }

  uint64_t v10 = 0LL;
  return v10;
}

const char *ctu::rest::asString(int a1)
{
  else {
    return off_189E97AF8[a1 - 1];
  }
}

void ctu::rest::createReply(xpc_object_t *this@<X0>, _anonymous_namespace_ *a2@<X8>)
{
  *(void *)a2 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)a2 = xpc_null_create();
  uint64_t v5 = MEMORY[0x186E3CD4C](*this);
  uint64_t v6 = MEMORY[0x1895F9250];
  if (v5 == MEMORY[0x1895F9250])
  {
    xpc_object_t reply = xpc_dictionary_create_reply(*this);
    if (reply || (xpc_object_t reply = xpc_null_create()) != 0LL)
    {
      if (MEMORY[0x186E3CD4C](reply) == v6)
      {
        xpc_retain(reply);
        xpc_object_t v8 = reply;
      }

      else
      {
        xpc_object_t v8 = xpc_null_create();
      }
    }

    else
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t reply = 0LL;
    }

    xpc_object_t v9 = xpc_null_create();
    uint64_t v10 = *(void **)a2;
    *(void *)a2 = v8;
    xpc_release(v10);
    xpc_release(v9);
    xpc_release(reply);
    if (MEMORY[0x186E3CD4C](*(void *)a2) == v6)
    {
    }
  }

void sub_18660DB74(_Unwind_Exception *a1)
{
}

void anonymous namespace'::copyKeyIfPresent( _anonymous_namespace_ *this, xpc_object_t *a2, const xpc::dict *key, const char *a4)
{
  v8[0] = a2;
  v8[1] = key;
  if (xpc_dictionary_get_value(*a2, (const char *)key))
  {
    v6[0] = this;
    v6[1] = key;
    xpc::dict::object_proxy::operator=((uint64_t)v6, (uint64_t)v8, &object);
    xpc_release(object);
  }

void ctu::rest::createReplyWithValue( xpc_object_t *this@<X0>, xpc_object_t *a2@<X1>, _anonymous_namespace_ *a3@<X8>)
{
  *(void *)a3 = 0xAAAAAAAAAAAAAAAALL;
  ctu::rest::createReply(this, a3);
  if (MEMORY[0x186E3CD4C](*(void *)a3) == MEMORY[0x1895F9250]) {
    ctu::rest::updateReplyValue((uint64_t)a3, a2);
  }
}

void sub_18660DC44(_Unwind_Exception *a1)
{
}

void ctu::rest::updateReplyValue(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v4 = MEMORY[0x186E3CD4C](*a2);
  xpc_object_t v5 = *a2;
  if (v4 == MEMORY[0x1895F9268])
  {
    __n128 string = xpc_dictionary_get_string(v5, (const char *)*MEMORY[0x1895F91B0]);
    xpc_object_t object = xpc_string_create(string);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v9 = a1;
    uint64_t v10 = "e";
    xpc::dict::object_proxy::operator=((uint64_t)&v9, &object, &v12);
    xpc_release(v12);
    xpc_object_t v12 = 0LL;
    xpc_release(object);
  }

  else
  {
    xpc_object_t v7 = *a2;
    if (v5) {
      xpc_retain(v5);
    }
    else {
      xpc_object_t v7 = xpc_null_create();
    }
    uint64_t v9 = a1;
    uint64_t v10 = "v";
    xpc::dict::object_proxy::operator=((uint64_t)&v9, &v7, &v8);
    xpc_release(v8);
    xpc_object_t v8 = 0LL;
    xpc_release(v7);
  }

void ctu::rest::createReplyFromRequest( xpc_object_t *this@<X0>, const xpc::dict *a2@<X1>, _anonymous_namespace_ *a3@<X8>)
{
  uint64_t v5 = MEMORY[0x186E3CD4C](*this, a2);
  uint64_t v6 = MEMORY[0x1895F9250];
  if (v5 != MEMORY[0x1895F9250])
  {
    *(void *)a3 = xpc_null_create();
    return;
  }

  *(void *)a3 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t v8 = v7;
  if (v7)
  {
    *(void *)a3 = v7;
  }

  else
  {
    xpc_object_t v8 = xpc_null_create();
    *(void *)a3 = v8;
    if (!v8)
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v8 = 0LL;
      goto LABEL_10;
    }
  }

  if (MEMORY[0x186E3CD4C](v8) != v6)
  {
    xpc_object_t v9 = xpc_null_create();
LABEL_10:
    *(void *)a3 = v9;
    goto LABEL_11;
  }

  xpc_retain(v8);
LABEL_11:
  xpc_release(v8);
}

void sub_18660DE54(_Unwind_Exception *a1)
{
}

void ctu::rest::createReplyFromRequestWithValue( xpc_object_t *a1@<X0>, const xpc::dict *a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  ctu::rest::createReplyFromRequest(a1, a2, (_anonymous_namespace_ *)&v6);
  if (MEMORY[0x186E3CD4C](v6) == MEMORY[0x1895F9250])
  {
    ctu::rest::updateReplyValue((uint64_t)&v6, (xpc_object_t *)a2);
    *a3 = v6;
    xpc_object_t v5 = xpc_null_create();
    unint64_t v6 = (unint64_t)v5;
  }

  else
  {
    *a3 = xpc_null_create();
    xpc_object_t v5 = (xpc_object_t)v6;
  }

  xpc_release(v5);
}

void sub_18660DEF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

xpc_object_t ctu::rest::getReplyValue@<X0>(ctu::rest *this@<X0>, const xpc::dict *a2@<X1>, void *a3@<X8>)
{
  if (MEMORY[0x186E3CD4C](*(void *)this, a2) == MEMORY[0x1895F9250])
  {
    v6[0] = this;
    v6[1] = "v";
    return xpc::dict::object_proxy::operator xpc::object((uint64_t)v6, a3);
  }

  else
  {
    xpc_object_t result = xpc_null_create();
    *a3 = result;
  }

  return result;
}

void ctu::rest::createNotify(void **a1@<X0>, void **a2@<X1>, void **a3@<X2>, void *a4@<X8>)
{
  xpc_object_t v8 = xpc_string_create("notify");
  xpc_object_t v9 = v8;
  if (!v8)
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v9 = v8;
  }

  ctu::rest::createRestMessage(&v9, a1, a2, a3, a4);
  xpc_release(v8);
}

void ctu::rest::createRestMessage( void **a1@<X0>, void **a2@<X1>, void **a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  *a5 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v10 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t v11 = v10;
  if (v10)
  {
    *a5 = v10;
  }

  else
  {
    xpc_object_t v11 = xpc_null_create();
    *a5 = v11;
    if (!v11)
    {
      xpc_object_t v12 = xpc_null_create();
      xpc_object_t v11 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v11) == MEMORY[0x1895F9250])
  {
    xpc_retain(v11);
    goto LABEL_9;
  }

  xpc_object_t v12 = xpc_null_create();
LABEL_8:
  *a5 = v12;
LABEL_9:
  xpc_release(v11);
  int v13 = *a1;
  xpc_object_t object = v13;
  if (v13) {
    xpc_retain(v13);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v23 = a5;
  uint64_t v24 = "o";
  xpc::dict::object_proxy::operator=((uint64_t)&v23, &object, &v26);
  xpc_release(v26);
  xpc_object_t v26 = 0LL;
  xpc_release(object);
  xpc_object_t object = 0LL;
  uint64_t v14 = *a2;
  xpc_object_t v21 = v14;
  if (v14) {
    xpc_retain(v14);
  }
  else {
    xpc_object_t v21 = xpc_null_create();
  }
  uint64_t v23 = a5;
  uint64_t v24 = "a";
  xpc::dict::object_proxy::operator=((uint64_t)&v23, &v21, &v22);
  xpc_release(v22);
  xpc_object_t v22 = 0LL;
  xpc_release(v21);
  xpc_object_t v21 = 0LL;
  uint64_t v15 = *a3;
  xpc_object_t v19 = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    xpc_object_t v19 = xpc_null_create();
  }
  uint64_t v23 = a5;
  uint64_t v24 = "r";
  xpc::dict::object_proxy::operator=((uint64_t)&v23, &v19, &v20);
  xpc_release(v20);
  xpc_object_t v20 = 0LL;
  xpc_release(v19);
  xpc_object_t v19 = 0LL;
  unsigned int v16 = *a4;
  xpc_object_t v17 = v16;
  if (v16) {
    xpc_retain(v16);
  }
  else {
    xpc_object_t v17 = xpc_null_create();
  }
  uint64_t v23 = a5;
  uint64_t v24 = "v";
  xpc::dict::object_proxy::operator=((uint64_t)&v23, &v17, &v18);
  xpc_release(v18);
  xpc_object_t v18 = 0LL;
  xpc_release(v17);
}

void ctu::rest::createGet(void **a1@<X0>, void **a2@<X1>, void **a3@<X2>, void *a4@<X8>)
{
  xpc_object_t v8 = xpc_string_create("get");
  xpc_object_t v9 = v8;
  if (!v8)
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v9 = v8;
  }

  ctu::rest::createRestMessage(&v9, a1, a2, a3, a4);
  xpc_release(v8);
}

void ctu::rest::createPingMessage(void *a1@<X8>)
{
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t v4 = v3;
  if (v3)
  {
    *a1 = v3;
  }

  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a1 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v4) == MEMORY[0x1895F9250])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }

  xpc_object_t v5 = xpc_null_create();
LABEL_8:
  *a1 = v5;
LABEL_9:
  xpc_release(v4);
  xpc_object_t v7 = xpc_string_create("ping");
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  v6[0] = a1;
  v6[1] = "o";
  xpc::dict::object_proxy::operator=((uint64_t)v6, &v7, &object);
  xpc_release(object);
  xpc_object_t object = 0LL;
  xpc_release(v7);
}

void ctu::rest::createAutoReplyValue(xpc_object_t *this@<X0>, void *a2@<X8>)
{
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::rest::createReply(this, (_anonymous_namespace_ *)&object);
  if (MEMORY[0x186E3CD4C](object) == MEMORY[0x1895F9250]
    && (xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*this)) != 0LL)
  {
    unint64_t v6 = (std::__shared_weak_count *)operator new(0x30uLL);
    v6->__shared_owners_ = 0LL;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    v6->__shared_weak_owners_ = 0LL;
    v6->__vftable = (std::__shared_weak_count_vtbl *)off_189E976F8;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)xpc_null_create();
    v6[1].__shared_owners_ = (uint64_t)remote_connection;
    xpc_retain(remote_connection);
    v6[1].__shared_weak_owners_ = (uint64_t)object;
    xpc_object_t object = xpc_null_create();
    *a2 = v6 + 1;
    a2[1] = v6;
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  else
  {
    *a2 = 0LL;
    a2[1] = 0LL;
  }

  xpc_release(object);
}

void sub_18660E4E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::rest::createAutoReplyWithAction(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v4 = (std::__shared_weak_count *)operator new(0x40uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0LL;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_189E97748;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)&v4[1], a1);
  v4[2].__shared_owners_ = (uint64_t)xpc_null_create();
  *a2 = (char *)v4 + 56;
  a2[1] = v4;
  do
    unint64_t v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  do
    unint64_t v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }

void ctu::rest::RestXpcConnector::create(xpc_object_t *a1@<X0>, uint64_t *a2@<X8>)
{
  if (MEMORY[0x186E3CD4C](*a1) == MEMORY[0x1895F9238])
  {
    xpc_object_t v4 = operator new(0x50uLL);
    xpc_object_t object = *a1;
    *a1 = xpc_null_create();
    ctu::rest::RestXpcConnector::RestXpcConnector((uint64_t)v4, &object);
    std::shared_ptr<ctu::rest::RestXpcConnector>::shared_ptr[abi:ne180100]<ctu::rest::RestXpcConnector,void>( a2,  (uint64_t)v4);
    xpc_release(object);
  }

  else
  {
    *a2 = 0LL;
    a2[1] = 0LL;
  }

void sub_18660E67C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t ctu::rest::RestXpcConnector::RestXpcConnector(uint64_t a1, xpc_object_t *a2)
{
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_189E97398;
  *(void *)(a1 + memset(&context, 0, 24) = *a2;
  *a2 = xpc_null_create();
  *(_OWORD *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 72) = xpc_null_create();
  return a1;
}

void ctu::rest::RestXpcConnector::~RestXpcConnector(xpc_object_t *this)
{
  this[3] = 0LL;
  uint64_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

{
  void *v1;
  ctu::rest::RestXpcConnector::~RestXpcConnector(this);
  operator delete(v1);
}

BOOL ctu::rest::RestXpcConnector::isConnected(ctu::rest::RestXpcConnector *this)
{
  return MEMORY[0x186E3CD4C](*((void *)this + 9)) == MEMORY[0x1895F9238];
}

void ctu::rest::RestXpcConnector::disconnect(ctu::rest::RestXpcConnector *this)
{
  uint64_t v2 = *((void *)this + 7);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40LL))(v2);
  }
  ctu::XpcClientHelper::setServer((void *)this + 9);
}

void ctu::rest::RestXpcConnector::flush(_xpc_connection_s **this, const group *a2)
{
  gr_name = a2->gr_name;
  if (a2->gr_name)
  {
    dispatch_retain((dispatch_object_t)a2->gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
  }

  xpc_object_t v5 = xpc_string_create("");
  xpc_object_t v11 = v5;
  if (!v5)
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v11 = v5;
  }

  xpc_object_t v6 = xpc_string_create("");
  xpc_object_t v10 = v6;
  if (!v6)
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v10 = v6;
  }

  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  v8[0] = MEMORY[0x1895F87A8];
  v8[1] = 1174405120LL;
  void v8[2] = ___ZNK3ctu4rest16RestXpcConnector5flushERKN8dispatch5groupE_block_invoke;
  void v8[3] = &__block_descriptor_tmp_21;
  dispatch_group_t group = (dispatch_group_t)gr_name;
  if (gr_name)
  {
    dispatch_retain((dispatch_object_t)gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
  }

  ctu::rest::RestXpcConnector::send_with_reply((uint64_t)this, "ping", &v11, &v10, global_queue, v8);
  xpc_release(v6);
  xpc_release(v5);
  ctu::XpcClientHelper::flush(this + 9, a2);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }

  if (gr_name)
  {
    dispatch_group_leave((dispatch_group_t)gr_name);
    dispatch_release((dispatch_object_t)gr_name);
  }

void sub_18660E92C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }

  if (v14)
  {
    dispatch_group_leave(v14);
    dispatch_release(v14);
  }

  _Unwind_Resume(exception_object);
}

void ctu::rest::RestXpcConnector::send_with_reply( uint64_t a1, char *string, void **a3, void **a4, dispatch_queue_s *a5, void *a6)
{
  xpc_object_t message = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v11 = xpc_string_create(string);
  uint64_t v15 = v11;
  if (!v11)
  {
    xpc_object_t v11 = xpc_null_create();
    uint64_t v15 = v11;
  }

  xpc_object_t v12 = (const char *)(a1 + 32);
  xpc_object_t v13 = xpc_string_create(v12);
  uint64_t v14 = v13;
  if (!v13)
  {
    xpc_object_t v13 = xpc_null_create();
    uint64_t v14 = v13;
  }

  ctu::rest::createRestMessage(&v15, &v14, a3, a4, &message);
  xpc_release(v13);
  xpc_release(v11);
  xpc_connection_send_message_with_reply(*(xpc_connection_t *)(a1 + 72), message, a5, a6);
  xpc_release(message);
}

void sub_18660EA9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

void ctu::rest::RestXpcConnector::send(uint64_t a1, char *string, void **a3, void **a4)
{
  xpc_object_t message = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v7 = xpc_string_create(string);
  xpc_object_t v11 = v7;
  if (!v7)
  {
    xpc_object_t v7 = xpc_null_create();
    xpc_object_t v11 = v7;
  }

  unint64_t v8 = (const char *)(a1 + 32);
  xpc_object_t v9 = xpc_string_create(v8);
  xpc_object_t v10 = v9;
  if (!v9)
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t v10 = v9;
  }

  ctu::rest::createRestMessage(&v11, &v10, a3, a4, &message);
  xpc_release(v9);
  xpc_release(v7);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 72), message);
  xpc_release(message);
}

void sub_18660EBA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

void ctu::rest::RestXpcConnector::send_with_reply( uint64_t a1, char *a2, void **a3, void **a4, uint64_t *a5, dispatch_queue_s **a6, uint64_t a7)
{
  uint64_t v14 = operator new(0x20uLL);
  uint64_t v15 = std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v14, a7);
  unsigned int v16 = *a6;
  v21[0] = MEMORY[0x1895F87A8];
  v21[1] = 1174405120LL;
  void v21[2] = ___ZNK3ctu4rest16RestXpcConnector15send_with_replyEPKcRKN3xpc6objectES7_NSt3__18weak_ptrIKvEERKN8dispatch5queueEONS8_8functionIFvS5_EEE_block_invoke;
  uint64_t v21[3] = &__block_descriptor_tmp_14_0;
  uint64_t v18 = *a5;
  xpc_object_t v17 = (std::__shared_weak_count *)a5[1];
  v21[4] = v15;
  v21[5] = v18;
  xpc_object_t v22 = v17;
  if (v17)
  {
    p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
    do
      unint64_t v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
  }

  ctu::rest::RestXpcConnector::send_with_reply(a1, a2, a3, a4, v16, v21);
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_18660ECA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ctu4rest16RestXpcConnector15send_with_replyEPKcRKN3xpc6objectES7_NSt3__18weak_ptrIKvEERKN8dispatch5queueEONS8_8functionIFvS5_EEE_block_invoke( void *a1, void *a2)
{
  uint64_t v14 = (void *)a1[4];
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    xpc_object_t v5 = std::__shared_weak_count::lock(v3);
    xpc_object_t v13 = v5;
    if (v5)
    {
      xpc_object_t v6 = v5;
      if (a1[5])
      {
        uint64_t v7 = a1[4];
        xpc_object_t object = a2;
        if (a2) {
          xpc_retain(a2);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        uint64_t v8 = *(void *)(v7 + 24);
        if (!v8) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v8 + 48LL))(v8, &object);
        xpc_release(object);
        xpc_object_t object = 0LL;
      }

      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        unint64_t v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }

  std::unique_ptr<std::function<void ()(xpc::object)>>::reset[abi:ne180100](&v14);
}

void sub_18660EDA4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10, uint64_t a11, void *a12)
{
}

uint64_t __copy_helper_block_e8_40c25_ZTSNSt3__18weak_ptrIKvEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = *(void *)(a2 + 40);
  *(void *)(result + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = v2;
  if (v2)
  {
    xpc_object_t v3 = (unint64_t *)(v2 + 16);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

void __destroy_helper_block_e8_40c25_ZTSNSt3__18weak_ptrIKvEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ctu::rest::RestXpcConnector::set(uint64_t a1, void **a2, void **a3)
{
}

void ctu::rest::RestXpcConnector::push(uint64_t a1, void **a2, void **a3)
{
}

void ctu::rest::RestXpcConnector::pop(uint64_t a1, void **a2, void **a3)
{
}

void ctu::rest::RestXpcConnector::notify(uint64_t a1, void **a2, void **a3)
{
}

void ctu::rest::RestXpcConnector::get( uint64_t a1, void **a2, void **a3, uint64_t *a4, dispatch_queue_s **a5, uint64_t a6)
{
  xpc_object_t v6 = (std::__shared_weak_count *)a4[1];
  v7[0] = *a4;
  v7[1] = (uint64_t)v6;
  *a4 = 0LL;
  a4[1] = 0LL;
  ctu::rest::RestXpcConnector::send_with_reply(a1, "get", a2, a3, v7, a5, a6);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_18660EEBC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void ctu::rest::RestXpcConnector::get(uint64_t a1, void **a2, uint64_t *a3, dispatch_queue_s **a4, uint64_t a5)
{
  xpc_object_t v10 = xpc_null_create();
  xpc_object_t v11 = (std::__shared_weak_count *)a3[1];
  v12[0] = *a3;
  v12[1] = (uint64_t)v11;
  xpc_object_t v13 = v10;
  *a3 = 0LL;
  a3[1] = 0LL;
  ctu::rest::RestXpcConnector::send_with_reply(a1, "get", a2, &v13, v12, a4, a5);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_release(v10);
}

void sub_18660EF74(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void ctu::rest::RestXpcConnector::handleMessage(uint64_t a1, void *a2)
{
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 16LL))(*(void *)(a1 + 56)) & 1) == 0)
  {
    unint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
    uint64_t v11 = *(void *)(a1 + 56);
    xpc_object_t v12 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }

    char v7 = ctu::rest::RestConnector::visitIfNotifyMessage<std::shared_ptr<ctu::rest::RestConnectorDelegateBase>>(a2, &v11);
    uint64_t v8 = v12;
    if (v12)
    {
      xpc_object_t v9 = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }

    if ((v7 & 1) == 0
      && (ctu::rest::RestXpcConnector::visitIfGetMessage<ctu::rest::RestXpcConnector*>(a2, a1) & 1) == 0)
    {
      ctu::rest::RestXpcConnector::handlePingOperation((xpc_connection_t *)a1, (const xpc::dict *)a2);
    }
  }

void sub_18660F06C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ctu::rest::RestConnector::visitIfNotifyMessage<std::shared_ptr<ctu::rest::RestConnectorDelegateBase>>( void *a1, uint64_t *a2)
{
  xpc_object_t v12 = a1;
  xpc_object_t v13 = "o";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v12, object);
  int v5 = ctu::rest::asOperation(object, v4);
  xpc_release(object[0]);
  if (v5 != 5) {
    return 0LL;
  }
  uint64_t v6 = *a2;
  xpc_object_t v12 = a1;
  xpc_object_t v13 = "r";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v12, &v11);
  object[0] = a1;
  object[1] = "v";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v10);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, xpc_object_t *, xpc_object_t *))(*(void *)v6 + 32LL))(v6, &v11, &v10);
  xpc_release(v10);
  xpc_release(v11);
  return v7;
}

void sub_18660F158( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, xpc_object_t object, xpc_object_t a12)
{
}

uint64_t ctu::rest::RestXpcConnector::visitIfGetMessage<ctu::rest::RestXpcConnector*>(void *a1, uint64_t a2)
{
  xpc_object_t v11 = a1;
  xpc_object_t v12 = "o";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v11, object);
  int v5 = ctu::rest::asOperation(object, v4);
  xpc_release(object[0]);
  if (v5 != 2) {
    return 0LL;
  }
  xpc_object_t v11 = a1;
  xpc_object_t v12 = "r";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v11, &v10);
  object[0] = a1;
  object[1] = "v";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
  uint64_t Message = ctu::rest::RestXpcConnector::handleGetMessage(a2, (xpc_object_t *)a1, (uint64_t)&v10, (uint64_t)&v9);
  xpc_release(v9);
  xpc_release(v10);
  return Message;
}

void sub_18660F26C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, xpc_object_t object, xpc_object_t a12)
{
}

BOOL ctu::rest::RestXpcConnector::handlePingOperation(xpc_connection_t *this, const xpc::dict *a2)
{
  message[0] = a2;
  message[1] = "o";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)message, &object);
  int v5 = ctu::rest::asOperation(&object, v4);
  xpc_release(object);
  if (v5 != 6) {
    return 0LL;
  }
  message[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::rest::createReply((xpc_object_t *)a2, (_anonymous_namespace_ *)message);
  uint64_t v6 = MEMORY[0x186E3CD4C](message[0]);
  BOOL v7 = v6 == MEMORY[0x1895F9250];
  if (v6 == MEMORY[0x1895F9250]) {
    xpc_connection_send_message(this[9], message[0]);
  }
  xpc_release(message[0]);
  return v7;
}

void sub_18660F368( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, xpc_object_t a12)
{
}

uint64_t ctu::rest::RestXpcConnector::handleGetMessage(uint64_t a1, xpc_object_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v6 = *(void *)(a1 + 56);
  xpc_object_t v7 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    uint64_t v14 = 0LL;
    xpc_object_t v12 = off_189E97810;
    xpc_object_t v13 = v7;
LABEL_4:
    xpc_retain(v7);
    goto LABEL_5;
  }

  xpc_object_t v7 = xpc_null_create();
  uint64_t v14 = 0LL;
  xpc_object_t v12 = off_189E97810;
  xpc_object_t v13 = v7;
  if (v7) {
    goto LABEL_4;
  }
  xpc_object_t v7 = 0LL;
  xpc_object_t v13 = xpc_null_create();
LABEL_5:
  uint64_t v14 = &v12;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t (***)()))(*(void *)v6 + 24LL))( v6,  a3,  a4,  &v12);
  xpc_object_t v9 = v14;
  if (v14 == &v12)
  {
    uint64_t v10 = 4LL;
    xpc_object_t v9 = &v12;
    goto LABEL_9;
  }

  if (v14)
  {
    uint64_t v10 = 5LL;
LABEL_9:
    (*v9)[v10]();
  }

  xpc_release(v7);
  return v8;
}

void sub_18660F4B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t *ctu::rest::RestDispatchConnector::create@<X0>(uint64_t *a1@<X8>)
{
  xpc_object_t v3 = operator new(0x58uLL);
  *xpc_object_t v3 = off_189E97460;
  v3[1] = 0LL;
  void v3[2] = 0LL;
  v3[3] = &unk_189E974D8;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  v3[10] = 0LL;
  return std::shared_ptr<ctu::rest::RestDispatchConnector>::shared_ptr[abi:ne180100]<ctu::rest::RestDispatchConnector,void>( a1,  (uint64_t)v3);
}

double ctu::rest::RestDispatchConnector::RestDispatchConnector(ctu::rest::RestDispatchConnector *this)
{
  *(void *)this = off_189E97460;
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0LL;
  *((void *)this + 2) = 0LL;
  *((void *)this + 3) = &unk_189E974D8;
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0LL;
  return result;
}

{
  double result;
  *(void *)this = off_189E97460;
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0LL;
  *((void *)this + 2) = 0LL;
  *((void *)this + 3) = &unk_189E974D8;
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0LL;
  return result;
}

void ctu::rest::RestDispatchConnector::~RestDispatchConnector(void **this)
{
  uint64_t v2 = this[8];
  this[8] = 0LL;
  if (v2) {
    (*(void (**)(void *))(*(void *)v2 + 8LL))(v2);
  }
  xpc_object_t v3 = (dispatch_object_s *)this[7];
  if (v3) {
    dispatch_release(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)this[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

{
  void *v1;
  ctu::rest::RestDispatchConnector::~RestDispatchConnector(this);
  operator delete(v1);
}

uint64_t ctu::rest::RestDispatchConnector::disconnect(ctu::rest::RestDispatchConnector *this)
{
  uint64_t result = *((void *)this + 9);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result);
  }
  uint64_t v3 = *((void *)this + 8);
  if (v3)
  {
    xpc_object_t object = xpc_null_create();
    (*(void (**)(uint64_t, char *, xpc_object_t *))(*(void *)v3 + 32LL))(v3, (char *)this + 24, &object);
    xpc_release(object);
    xpc_object_t object = 0LL;
    uint64_t result = *((void *)this + 8);
    *((void *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  else
  {
    *((void *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  }

  return result;
}

void sub_18660F6B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void non-virtual thunk to'ctu::rest::RestDispatchConnector::~RestDispatchConnector(void **this)
{
}

{
  void *v1;
  ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3);
  operator delete(v1);
}

BOOL ctu::rest::RestDispatchConnector::isConnected(ctu::rest::RestDispatchConnector *this)
{
  return *((void *)this + 8) && *((void *)this + 9) && *((void *)this + 7) != 0LL;
}

void ctu::rest::RestDispatchConnector::flush(ctu::rest::RestDispatchConnector *this, const group *a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  gr_name = a2->gr_name;
  if (a2->gr_name)
  {
    dispatch_retain((dispatch_object_t)a2->gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
  }

  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  int v5 = global_queue;
  xpc_object_t v12 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  xpc_object_t v6 = xpc_string_create("");
  xpc_object_t v11 = v6;
  if (!v6)
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v11 = v6;
  }

  xpc_object_t v7 = xpc_string_create("");
  uint64_t v10 = v7;
  if (!v7)
  {
    xpc_object_t v7 = xpc_null_create();
    uint64_t v10 = v7;
  }

  if (gr_name)
  {
    dispatch_retain((dispatch_object_t)gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
  }

  v13[0] = &off_189E97908;
  v13[1] = gr_name;
  uint64_t v14 = v13;
  ctu::rest::RestDispatchConnector::send_with_reply((uint64_t)this, "ping", &v11, &v10, &v12, (uint64_t)v13);
  uint64_t v8 = v14;
  if (v14 == v13)
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = v13;
  }

  else
  {
    if (!v14) {
      goto LABEL_16;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  xpc_release(v7);
  xpc_release(v6);
  if (v5) {
    dispatch_release(v5);
  }
  if (gr_name)
  {
    dispatch_group_leave((dispatch_group_t)gr_name);
    dispatch_release((dispatch_object_t)gr_name);
  }

void sub_18660F8BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ctu::rest::RestDispatchConnector::send_with_reply( uint64_t a1, char *string, void **a3, void **a4, dispatch_queue_s **a5, uint64_t a6)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  if (!*(void *)(a1 + 64) || !*(void *)(a1 + 72) || !*(void *)(a1 + 56)) {
    _rest_api_misuse("Attempted to send message on a disconnected connector.");
  }
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v11 = xpc_string_create(string);
  std::__split_buffer<std::string>::pointer v49 = v11;
  if (!v11)
  {
    xpc_object_t v11 = xpc_null_create();
    std::__split_buffer<std::string>::pointer v49 = v11;
  }

  xpc_object_t v12 = (const char *)(a1 + 32);
  xpc_object_t v13 = xpc_string_create(v12);
  uint64_t v42 = v13;
  if (!v13)
  {
    xpc_object_t v13 = xpc_null_create();
    uint64_t v42 = v13;
  }

  ctu::rest::createRestMessage(&v49, &v42, a3, a4, &object);
  xpc_release(v13);
  xpc_release(v11);
  uint64_t v14 = *(void *)(a1 + 64);
  if (!v14)
  {
    std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)&v49, a6);
    xpc_object_t v19 = *a5;
    unint64_t v20 = operator new(0x20uLL);
    std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)&v49);
    uint64_t v41 = 0LL;
    uint64_t v42 = 0LL;
    dispatch_async_f( v19,  v20,  (dispatch_function_t)dispatch::async<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0>(dispatch_queue_s *,std::unique_ptr<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::default_delete<std::unique_ptr>>)::{lambda(void *)#1}::__invoke);
    std::unique_ptr<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0,std::default_delete<std::function<void ()(xpc::object)> &>>::~unique_ptr[abi:ne180100](&v41);
    std::unique_ptr<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0,std::default_delete<std::function<void ()(xpc::object)> &>>::~unique_ptr[abi:ne180100]((void **)&v42);
    xpc_object_t v21 = v51;
    if (v51 == &v49)
    {
      uint64_t v22 = 4LL;
      xpc_object_t v21 = &v49;
    }

    else
    {
      if (!v51) {
        goto LABEL_52;
      }
      uint64_t v22 = 5LL;
    }

    (*((void (**)(void))*v21 + v22))();
    goto LABEL_52;
  }

  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v15 || (v16 = *(void *)(a1 + 8), (xpc_object_t v17 = std::__shared_weak_count::lock(v15)) == 0LL)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v18 = v16 + 24;
  if (!v16) {
    uint64_t v18 = 0LL;
  }
  uint64_t v38 = v18;
  uint64_t v39 = v17;
  std::__split_buffer<std::string>::pointer v49 = 0LL;
  uint64_t v50 = 0LL;
  xpc_object_t v37 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v37 = xpc_null_create();
  }
  xpc_object_t v43 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v43 = xpc_null_create();
  }
  uint64_t v23 = *a5;
  dispatch_object_t v44 = v23;
  if (v23) {
    dispatch_retain(v23);
  }
  uint64_t v24 = v45;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v45, a6);
  uint64_t v48 = 0LL;
  uint64_t v25 = operator new(0x38uLL);
  xpc_object_t v26 = v43;
  *uint64_t v25 = off_189E97988;
  v25[1] = v26;
  xpc_object_t v43 = xpc_null_create();
  int64_t v27 = v44;
  v25[2] = v44;
  if (v27) {
    dispatch_retain(v27);
  }
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v25 + 3), (uint64_t)v45);
  uint64_t v48 = v25;
  (*(void (**)(uint64_t, uint64_t *, xpc_object_t *, _BYTE *))(*(void *)v14 + 24LL))(v14, &v38, &v37, v47);
  xpc_object_t v28 = v48;
  if (v48 == v47)
  {
    uint64_t v29 = 4LL;
    xpc_object_t v28 = v47;
  }

  else
  {
    if (!v48) {
      goto LABEL_33;
    }
    uint64_t v29 = 5LL;
  }

  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_33:
  if (v46 == v45)
  {
    uint64_t v30 = 4LL;
    goto LABEL_37;
  }

  if (v46)
  {
    uint64_t v30 = 5LL;
    uint64_t v24 = v46;
LABEL_37:
    (*(void (**)(void *))(*v24 + 8 * v30))(v24);
  }

  if (v44) {
    dispatch_release(v44);
  }
  xpc_release(v43);
  xpc_object_t v43 = 0LL;
  xpc_release(v37);
  xpc_object_t v37 = 0LL;
  unint64_t v31 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      unint64_t v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  uint64_t v34 = v50;
  if (v50)
  {
    uint64_t v35 = (unint64_t *)&v50->__shared_owners_;
    do
      unint64_t v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }

void sub_18660FCE8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11, uint64_t a12, xpc_object_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

dispatch_object_t *ctu::rest::RestDispatchConnector::flush(dispatch::group const&)const::$_0::~$_0( dispatch_object_t *a1)
{
  uint64_t v2 = (dispatch_group_s *)*a1;
  if (v2)
  {
    dispatch_group_leave(v2);
    if (*a1) {
      dispatch_release(*a1);
    }
  }

  return a1;
}

void ctu::rest::RestDispatchConnector::send(uint64_t a1, char *string, void **a3, void **a4)
{
  if (!*(void *)(a1 + 64) || !*(void *)(a1 + 72) || !*(void *)(a1 + 56)) {
    _rest_api_misuse("Attempted to send message on a disconnected connector.");
  }
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v7 = xpc_string_create(string);
  uint64_t v22 = v7;
  if (!v7)
  {
    xpc_object_t v7 = xpc_null_create();
    uint64_t v22 = v7;
  }

  uint64_t v8 = (const char *)(a1 + 32);
  xpc_object_t v9 = xpc_string_create(v8);
  xpc_object_t v26 = v9;
  if (!v9)
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t v26 = v9;
  }

  ctu::rest::createRestMessage(&v22, &v26, a3, a4, &object);
  xpc_release(v9);
  xpc_release(v7);
  uint64_t v10 = *(void *)(a1 + 64);
  if (v10)
  {
    xpc_object_t v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v11 || (uint64_t v12 = *(void *)(a1 + 8), (v13 = std::__shared_weak_count::lock(v11)) == 0LL)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v14 = v12 + 24;
    if (!v12) {
      uint64_t v14 = 0LL;
    }
    uint64_t v24 = v14;
    uint64_t v25 = v13;
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    xpc_object_t v21 = object;
    if (object) {
      xpc_retain(object);
    }
    else {
      xpc_object_t v21 = xpc_null_create();
    }
    (*(void (**)(uint64_t, uint64_t *, xpc_object_t *))(*(void *)v10 + 16LL))(v10, &v24, &v21);
    xpc_release(v21);
    xpc_object_t v21 = 0LL;
    uint64_t v15 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        unint64_t v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }

    uint64_t v18 = v23;
    if (v23)
    {
      xpc_object_t v19 = (unint64_t *)&v23->__shared_owners_;
      do
        unint64_t v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }

  xpc_release(object);
}

void sub_18660FFB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, xpc_object_t a16)
{
}

uint64_t ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)const::$_1::~$_1( uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 16);
  uint64_t v3 = *(void **)(a1 + 40);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  int v5 = *(dispatch_object_s **)(a1 + 8);
  if (v5) {
    dispatch_release(v5);
  }
  xpc_release(*(xpc_object_t *)a1);
  *(void *)a1 = 0LL;
  return a1;
}

void ctu::rest::RestDispatchConnector::send_with_reply( uint64_t a1, char *a2, void **a3, void **a4, std::__shared_weak_count **a5, dispatch_queue_s **a6, uint64_t a7)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  uint64_t v12 = a5[1];
  v20[0] = *a5;
  v20[1] = v12;
  if (v12)
  {
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      unint64_t v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
  }

  uint64_t v15 = v21;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v21, a7);
  uint64_t v24 = 0LL;
  uint64_t v16 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v16 = &off_189E97A08;
  *(_OWORD *)(v16 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = *(_OWORD *)v20;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v16 + 24), (uint64_t)v21);
  uint64_t v24 = v16;
  ctu::rest::RestDispatchConnector::send_with_reply(a1, a2, a3, a4, a6, (uint64_t)v23);
  unint64_t v17 = v24;
  if (v24 == v23)
  {
    uint64_t v18 = 4LL;
    unint64_t v17 = v23;
  }

  else
  {
    if (!v24) {
      goto LABEL_9;
    }
    uint64_t v18 = 5LL;
  }

  (*(void (**)(void *))(*v17 + 8 * v18))(v17);
LABEL_9:
  if (v22 == v21)
  {
    uint64_t v19 = 4LL;
  }

  else
  {
    if (!v22) {
      return;
    }
    uint64_t v19 = 5LL;
    uint64_t v15 = v22;
  }

  (*(void (**)(void *))(*v15 + 8 * v19))(v15);
}

void sub_1866101E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  xpc_object_t v21 = a19;
  if (a19 == v19)
  {
    uint64_t v22 = 4LL;
    xpc_object_t v21 = &a16;
  }

  else
  {
    if (!a19) {
      goto LABEL_6;
    }
    uint64_t v22 = 5LL;
  }

  (*(void (**)(void))(*(void *)v21 + 8 * v22))();
LABEL_6:
  ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)const::$_0::~$_0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)const::$_0::~$_0( uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 16);
  uint64_t v3 = *(void **)(a1 + 40);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  int v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void ctu::rest::RestDispatchConnector::set(uint64_t a1, void **a2, void **a3)
{
}

void ctu::rest::RestDispatchConnector::push(uint64_t a1, void **a2, void **a3)
{
}

void ctu::rest::RestDispatchConnector::pop(uint64_t a1, void **a2, void **a3)
{
}

void ctu::rest::RestDispatchConnector::notify(uint64_t a1, void **a2, void **a3)
{
}

void ctu::rest::RestDispatchConnector::get( uint64_t a1, void **a2, void **a3, std::__shared_weak_count **a4, dispatch_queue_s **a5, uint64_t a6)
{
  xpc_object_t v6 = a4[1];
  v7[0] = *a4;
  v7[1] = v6;
  *a4 = 0LL;
  a4[1] = 0LL;
  ctu::rest::RestDispatchConnector::send_with_reply(a1, "get", a2, a3, v7, a5, a6);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_186610344(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void ctu::rest::RestDispatchConnector::get( uint64_t a1, void **a2, std::__shared_weak_count **a3, dispatch_queue_s **a4, uint64_t a5)
{
  xpc_object_t v10 = xpc_null_create();
  xpc_object_t v11 = a3[1];
  v12[0] = *a3;
  v12[1] = v11;
  xpc_object_t v13 = v10;
  *a3 = 0LL;
  a3[1] = 0LL;
  ctu::rest::RestDispatchConnector::send_with_reply(a1, "get", a2, &v13, v12, a4, a5);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_release(v10);
}

void sub_1866103FC(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void ctu::rest::RestDispatchConnector::handleMessage(void *a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  *a2 = xpc_null_create();
  if (!a1[7]) {
    _rest_api_misuse("Attempted to dispatch on a connector with no queue!");
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (uint64_t v5 = a1[1], (v6 = std::__shared_weak_count::lock(v4)) == 0LL)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    unint64_t v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  xpc_object_t v10 = xpc_null_create();
  xpc_object_t v11 = (dispatch_queue_s *)a1[7];
  uint64_t v12 = operator new(0x20uLL);
  *uint64_t v12 = v5;
  v12[1] = v7;
  uint64_t v12[2] = a1;
  uint64_t v12[3] = v3;
  xpc_object_t v13 = xpc_null_create();
  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  dispatch_async_f( v11,  v12,  (dispatch_function_t)dispatch::async<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0>(ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0,dispatch_queue_s *::default_delete<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0>(ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&>>::~unique_ptr[abi:ne180100](&v15);
  std::unique_ptr<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0>(ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&>>::~unique_ptr[abi:ne180100](&v16);
  xpc_release(v13);
  do
    unint64_t v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }

  xpc_release(v10);
}

void non-virtual thunk to'ctu::rest::RestDispatchConnector::handleMessage(uint64_t a1, xpc_object_t *a2)
{
}

void ctu::rest::RestDispatchConnector::handleMessageWithReply( void *a1, void **a2, dispatch_object_s **a3, uint64_t a4)
{
  uint64_t v50 = *MEMORY[0x1895F89C0];
  xpc_object_t v43 = (dispatch_object_t *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v42 = v8;
  *(_OWORD *)xpc_object_t object = v8;
  unint64_t v9 = *a2;
  xpc_object_t v40 = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t v40 = xpc_null_create();
  }
  xpc_object_t v10 = *a3;
  object[0] = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  xpc_object_t v11 = &object[1];
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)&object[1], a4);
  uint64_t v12 = *a2;
  v35[0] = a1;
  v35[1] = v12;
  *a2 = xpc_null_create();
  xpc_object_t v36 = v40;
  xpc_object_t v40 = xpc_null_create();
  dispatch_object_t v37 = object[0];
  if (object[0]) {
    dispatch_retain(object[0]);
  }
  xpc_object_t v13 = v38;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v38, (uint64_t)&object[1]);
  if (!a1[7]) {
    _rest_api_misuse("Attempted to dispatch on a connector with no queue!");
  }
  unint64_t v14 = (std::__shared_weak_count *)a1[2];
  if (!v14 || (uint64_t v15 = a1[1], (v16 = std::__shared_weak_count::lock(v14)) == 0LL)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v17 = v16;
  *(void *)&__int128 v44 = v15;
  *((void *)&v44 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v16;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    unint64_t v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
  *(_OWORD *)uint64_t v45 = *(_OWORD *)v35;
  v35[1] = xpc_null_create();
  xpc_object_t v46 = v36;
  xpc_object_t v36 = xpc_null_create();
  dispatch_object_t v47 = v37;
  if (v37) {
    dispatch_retain(v37);
  }
  unint64_t v20 = v48;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v48, (uint64_t)v38);
  xpc_object_t v21 = (dispatch_queue_s *)a1[7];
  uint64_t v22 = operator new(0x50uLL);
  __int128 v23 = v44;
  __int128 v24 = *(_OWORD *)v45;
  __int128 v44 = 0uLL;
  *uint64_t v22 = v23;
  v22[1] = v24;
  v45[1] = xpc_null_create();
  *((void *)v22 + 4) = v46;
  xpc_object_t v46 = xpc_null_create();
  uint64_t v25 = v47;
  *((void *)v22 + 5) = v47;
  if (v25) {
    dispatch_retain(v25);
  }
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v22 + 3), (uint64_t)v48);
  uint64_t v33 = 0LL;
  uint64_t v34 = 0LL;
  dispatch_async_f( v21,  v22,  (dispatch_function_t)dispatch::async<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1>(ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1,std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1>(ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1 &&)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1 &&>>::~unique_ptr[abi:ne180100](&v33);
  std::unique_ptr<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1>(ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1 &&)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1 &&>>::~unique_ptr[abi:ne180100](&v34);
  if (v49 == v48)
  {
    uint64_t v26 = 4LL;
  }

  else
  {
    if (!v49) {
      goto LABEL_22;
    }
    uint64_t v26 = 5LL;
    unint64_t v20 = v49;
  }

  (*(void (**)(void *))(*v20 + 8 * v26))(v20);
LABEL_22:
  if (v47) {
    dispatch_release(v47);
  }
  xpc_release(v46);
  xpc_object_t v46 = 0LL;
  xpc_release(v45[1]);
  v45[1] = 0LL;
  int64_t v27 = (std::__shared_weak_count *)*((void *)&v44 + 1);
  if (*((void *)&v44 + 1))
  {
    xpc_object_t v28 = (unint64_t *)(*((void *)&v44 + 1) + 8LL);
    do
      unint64_t v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }

  do
    unint64_t v30 = __ldaxr(p_shared_owners);
  while (__stlxr(v30 - 1, p_shared_owners));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }

  if (v39 == v38)
  {
    uint64_t v31 = 4LL;
  }

  else
  {
    if (!v39) {
      goto LABEL_37;
    }
    uint64_t v31 = 5LL;
    xpc_object_t v13 = v39;
  }

  (*(void (**)(void *))(*v13 + 8 * v31))(v13);
LABEL_37:
  if (v37) {
    dispatch_release(v37);
  }
  xpc_release(v36);
  xpc_object_t v36 = 0LL;
  xpc_release(v35[1]);
  if (v43 == &object[1])
  {
    uint64_t v32 = 4LL;
  }

  else
  {
    if (!v43) {
      goto LABEL_44;
    }
    uint64_t v32 = 5LL;
    xpc_object_t v11 = v43;
  }

  (*((void (**)(dispatch_object_t *))*v11 + v32))(v11);
LABEL_44:
  if (object[0]) {
    dispatch_release(object[0]);
  }
  xpc_release(v40);
}

void sub_1866108D0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'ctu::rest::RestDispatchConnector::handleMessageWithReply( uint64_t a1, void **a2, dispatch_object_s **a3, uint64_t a4)
{
}

void **ctu::rest::XpcConnectorServer::XpcConnectorServer(void **this)
{
  xpc_object_t v2 = xpc_null_create();
  uint64_t v4 = v2;
  ctu::XpcServerHelper::XpcServerHelper(this, &v4);
  xpc_release(v2);
  return this;
}

BOOL ctu::rest::XpcConnectorServer::isListening(ctu::rest::XpcConnectorServer *this)
{
  return MEMORY[0x186E3CD4C](*(void *)this) == MEMORY[0x1895F9238];
}

void xpc::dict::object_proxy::operator=(uint64_t a1@<X0>, uint64_t a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc::dict::object_proxy::operator xpc::object(a2, &object);
  xpc_object_t v5 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc::dict::object_proxy::operator=(a1, &v5, a3);
  xpc_release(v5);
  xpc_object_t v5 = 0LL;
  xpc_release(object);
}

void std::__shared_ptr_emplace<ctu::rest::createAutoReplyValue(xpc::dict const&)::AutoReplyHelper,std::allocator<ctu::rest::createAutoReplyValue(xpc::dict const&)::AutoReplyHelper>>::~__shared_ptr_emplace( std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_189E976F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ctu::rest::createAutoReplyValue(xpc::dict const&)::AutoReplyHelper,std::allocator<ctu::rest::createAutoReplyValue(xpc::dict const&)::AutoReplyHelper>>::~__shared_ptr_emplace( std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_189E976F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<ctu::rest::createAutoReplyValue(xpc::dict const&)::AutoReplyHelper,std::allocator<ctu::rest::createAutoReplyValue(xpc::dict const&)::AutoReplyHelper>>::__on_zero_shared( uint64_t a1)
{
  xpc_object_t v2 = (xpc_object_t *)(a1 + 24);
  xpc_object_t v3 = *(xpc_object_t *)(a1 + 24);
  if (v3 && MEMORY[0x186E3CD4C](*(void *)(a1 + 24)) == MEMORY[0x1895F9250]) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  if (MEMORY[0x186E3CD4C](*v2) != MEMORY[0x1895F92A8]) {
    ctu::rest::updateReplyValue(a1 + 40, v2);
  }
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), *(xpc_object_t *)(a1 + 40));
  xpc_release(v3);
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0LL;
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + 32) = 0LL;
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *xpc_object_t v2 = 0LL;
}

void std::__shared_ptr_emplace<ctu::rest::createAutoReplyWithAction(std::function<void ()(xpc::object)> &&)::AutoReplier,std::allocator<std::function<void ()(xpc::object)> &&>>::~__shared_ptr_emplace( std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_189E97748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ctu::rest::createAutoReplyWithAction(std::function<void ()(xpc::object)> &&)::AutoReplier,std::allocator<std::function<void ()(xpc::object)> &&>>::~__shared_ptr_emplace( std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_189E97748;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void *std::__shared_ptr_emplace<ctu::rest::createAutoReplyWithAction(std::function<void ()(xpc::object)> &&)::AutoReplier,std::allocator<std::function<void ()(xpc::object)> &&>>::__on_zero_shared( uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    xpc_object_t object = *(xpc_object_t *)(a1 + 56);
    *(void *)(a1 + ++*(_DWORD *)(this + 56) = xpc_null_create();
    uint64_t v2 = *(void *)(a1 + 48);
    if (!v2) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v2 + 48LL))(v2, &object);
    xpc_release(object);
    xpc_object_t object = 0LL;
  }

  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = 0LL;
  uint64_t result = *(void **)(a1 + 48);
  if (result == (void *)(a1 + 24))
  {
    uint64_t v4 = 4LL;
    uint64_t result = (void *)(a1 + 24);
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v4 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

uint64_t *std::shared_ptr<ctu::rest::RestXpcConnector>::shared_ptr[abi:ne180100]<ctu::rest::RestXpcConnector,void>( uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = off_189E97798;
  v4[1] = 0LL;
  std::string v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2) {
    xpc_object_t v5 = (void *)(a2 + 8);
  }
  else {
    xpc_object_t v5 = 0LL;
  }
  std::shared_ptr<ctu::rest::RestXpcConnector>::__enable_weak_this[abi:ne180100]<ctu::rest::RestXpcConnector,ctu::rest::RestXpcConnector,void>( (uint64_t)a1,  v5,  a2);
  return a1;
}

void sub_186610C94(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    ctu::rest::RestXpcConnector::~RestXpcConnector(v1);
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void std::shared_ptr<ctu::rest::RestXpcConnector>::__enable_weak_this[abi:ne180100]<ctu::rest::RestXpcConnector,ctu::rest::RestXpcConnector,void>( uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      xpc_object_t v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          unint64_t v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          unint64_t v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        uint64_t v4 = (std::__shared_weak_count *)a2[1];
      }

      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        xpc_object_t v10 = (unint64_t *)&v5->__shared_owners_;
        do
          unint64_t v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }

void std::__shared_ptr_pointer<ctu::rest::RestXpcConnector *,std::shared_ptr<ctu::rest::RestXpcConnector>::__shared_ptr_default_delete<ctu::rest::RestXpcConnector,ctu::rest::RestXpcConnector>,std::allocator<ctu::rest::RestXpcConnector>>::~__shared_ptr_pointer( std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_pointer<ctu::rest::RestXpcConnector *,std::shared_ptr<ctu::rest::RestXpcConnector>::__shared_ptr_default_delete<ctu::rest::RestXpcConnector,ctu::rest::RestXpcConnector>,std::allocator<ctu::rest::RestXpcConnector>>::__on_zero_shared( uint64_t a1)
{
  uint64_t v1 = *(xpc_object_t **)(a1 + 24);
  if (v1)
  {
    ctu::rest::RestXpcConnector::~RestXpcConnector(v1);
    operator delete(v2);
  }

uint64_t std::__shared_ptr_pointer<ctu::rest::RestXpcConnector *,std::shared_ptr<ctu::rest::RestXpcConnector>::__shared_ptr_default_delete<ctu::rest::RestXpcConnector,ctu::rest::RestXpcConnector>,std::allocator<ctu::rest::RestXpcConnector>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void std::unique_ptr<std::function<void ()(xpc::object)>>::reset[abi:ne180100](void **a1)
{
  uint64_t v1 = *a1;
  *a1 = 0LL;
  if (v1)
  {
    uint64_t v2 = (void *)v1[3];
    if (v2 == v1)
    {
      uint64_t v3 = 4LL;
      uint64_t v2 = v1;
    }

    else
    {
      if (!v2)
      {
LABEL_8:
        operator delete(v1);
        return;
      }

      uint64_t v3 = 5LL;
    }

    (*(void (**)(void))(*v2 + 8 * v3))();
    goto LABEL_8;
  }

uint64_t std::__function::__func<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,std::allocator<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0>,void ()(xpc::object)>::~__func( uint64_t a1)
{
  *(void *)a1 = off_189E97810;
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  return a1;
}

void std::__function::__func<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,std::allocator<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0>,void ()(xpc::object)>::~__func( xpc_object_t *a1)
{
  *a1 = off_189E97810;
  xpc_release(a1[1]);
  operator delete(a1);
}

void **std::__function::__func<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,std::allocator<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0>,void ()(xpc::object)>::__clone( uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  uint64_t v2 = (void **)operator new(0x10uLL);
  *uint64_t v2 = off_189E97810;
  std::__compressed_pair_elem<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0 const&,0ul>( v2 + 1,  v1);
  return v2;
}

void **std::__function::__func<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,std::allocator<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0>,void ()(xpc::object)>::__clone( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189E97810;
  return std::__compressed_pair_elem<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0 const&,0ul>( (void **)(a2 + 8),  (void **)(a1 + 8));
}

void std::__function::__func<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,std::allocator<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0>,void ()(xpc::object)>::destroy( uint64_t a1)
{
}

void std::__function::__func<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,std::allocator<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0>,void ()(xpc::object)>::destroy_deallocate( xpc_object_t *a1)
{
}

void std::__function::__func<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,std::allocator<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0>,void ()(xpc::object)>::operator()( uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v2 = *a2;
  xpc_object_t v5 = *a2;
  uint64_t v3 = (xpc_object_t *)(a1 + 8);
  *a2 = xpc_null_create();
  xpc_object_t message = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::rest::createReplyWithValue(v3, &v5, (_anonymous_namespace_ *)&message);
  if (MEMORY[0x186E3CD4C](message) == MEMORY[0x1895F9250])
  {
    xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*v3);
    if (remote_connection) {
      xpc_connection_send_message(remote_connection, message);
    }
  }

  xpc_release(message);
  xpc_release(v2);
}

void sub_186610FD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t std::__function::__func<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,std::allocator<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0>,void ()(xpc::object)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,std::allocator<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0>,void ()(xpc::object)>::target_type()
{
}

void **std::__compressed_pair_elem<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0 const&,0ul>( void **a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    *a1 = xpc_null_create();
  }
  return a1;
}

void std::__function::__alloc_func<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,std::allocator<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0>,void ()(xpc::object)>::destroy[abi:ne180100]( xpc_object_t *a1)
{
  *a1 = 0LL;
}

uint64_t *std::shared_ptr<ctu::rest::RestDispatchConnector>::shared_ptr[abi:ne180100]<ctu::rest::RestDispatchConnector,void>( uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = off_189E97890;
  v4[1] = 0LL;
  std::string v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2) {
    xpc_object_t v5 = (void *)(a2 + 8);
  }
  else {
    xpc_object_t v5 = 0LL;
  }
  std::shared_ptr<ctu::rest::RestXpcConnector>::__enable_weak_this[abi:ne180100]<ctu::rest::RestXpcConnector,ctu::rest::RestXpcConnector,void>( (uint64_t)a1,  v5,  a2);
  return a1;
}

void sub_186611120(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    ctu::rest::RestDispatchConnector::~RestDispatchConnector(v1);
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<ctu::rest::RestDispatchConnector *,std::shared_ptr<ctu::rest::RestDispatchConnector>::__shared_ptr_default_delete<ctu::rest::RestDispatchConnector,ctu::rest::RestDispatchConnector>,std::allocator<ctu::rest::RestDispatchConnector>>::~__shared_ptr_pointer( std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_pointer<ctu::rest::RestDispatchConnector *,std::shared_ptr<ctu::rest::RestDispatchConnector>::__shared_ptr_default_delete<ctu::rest::RestDispatchConnector,ctu::rest::RestDispatchConnector>,std::allocator<ctu::rest::RestDispatchConnector>>::__on_zero_shared( uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 24);
  if (v1)
  {
    ctu::rest::RestDispatchConnector::~RestDispatchConnector(v1);
    operator delete(v2);
  }

uint64_t std::__shared_ptr_pointer<ctu::rest::RestDispatchConnector *,std::shared_ptr<ctu::rest::RestDispatchConnector>::__shared_ptr_default_delete<ctu::rest::RestDispatchConnector,ctu::rest::RestDispatchConnector>,std::allocator<ctu::rest::RestDispatchConnector>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,std::allocator<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0>,void ()(xpc::object)>::~__func( void *a1)
{
  *a1 = &off_189E97908;
  xpc_object_t v2 = (dispatch_group_s *)a1[1];
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = (dispatch_object_s *)a1[1];
    if (v3) {
      dispatch_release(v3);
    }
  }

  return a1;
}

void std::__function::__func<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,std::allocator<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0>,void ()(xpc::object)>::~__func( void *__p)
{
  *std::string __p = &off_189E97908;
  xpc_object_t v2 = (dispatch_group_s *)__p[1];
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = (dispatch_object_s *)__p[1];
    if (v3) {
      dispatch_release(v3);
    }
  }

  operator delete(__p);
}

dispatch_group_t *std::__function::__func<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,std::allocator<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0>,void ()(xpc::object)>::__clone( uint64_t a1)
{
  uint64_t v1 = (dispatch_object_s **)(a1 + 8);
  xpc_object_t v2 = (dispatch_group_t *)operator new(0x10uLL);
  *xpc_object_t v2 = (dispatch_group_t)&off_189E97908;
  std::__compressed_pair_elem<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0 const&,0ul>( v2 + 1,  v1);
  return v2;
}

dispatch_group_t *std::__function::__func<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,std::allocator<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0>,void ()(xpc::object)>::__clone( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_189E97908;
  return std::__compressed_pair_elem<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0 const&,0ul>( (dispatch_group_t *)(a2 + 8),  (dispatch_object_s **)(a1 + 8));
}

void std::__function::__func<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,std::allocator<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0>,void ()(xpc::object)>::destroy( uint64_t a1)
{
}

void std::__function::__func<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,std::allocator<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0>,void ()(xpc::object)>::destroy_deallocate( dispatch_object_t *a1)
{
}

void std::__function::__func<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,std::allocator<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0>,void ()(xpc::object)>::operator()( uint64_t a1, void **a2)
{
  xpc_object_t v2 = *a2;
  *a2 = xpc_null_create();
  xpc_release(v2);
}

uint64_t std::__function::__func<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,std::allocator<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0>,void ()(xpc::object)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,std::allocator<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0>,void ()(xpc::object)>::target_type()
{
}

dispatch_group_t *std::__compressed_pair_elem<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0 const&,0ul>( dispatch_group_t *a1, dispatch_object_s **a2)
{
  uint64_t v3 = *a2;
  *a1 = (dispatch_group_t)*a2;
  if (v3)
  {
    dispatch_retain(v3);
    if (*a1) {
      dispatch_group_enter(*a1);
    }
  }

  return a1;
}

void std::__function::__alloc_func<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,std::allocator<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0>,void ()(xpc::object)>::destroy[abi:ne180100]( dispatch_object_t *a1)
{
  xpc_object_t v2 = (dispatch_group_s *)*a1;
  if (v2)
  {
    dispatch_group_leave(v2);
    if (*a1) {
      dispatch_release(*a1);
    }
  }

void **dispatch::async<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0>(dispatch_queue_s *,std::unique_ptr<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::default_delete<std::unique_ptr>>)::{lambda(void *)#1}::__invoke( void *a1)
{
  uint64_t v4 = a1;
  xpc_object_t object = (xpc_object_t)MEMORY[0x1895F91A0];
  xpc_retain(MEMORY[0x1895F91A0]);
  uint64_t v2 = a1[3];
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v2 + 48LL))(v2, &object);
  xpc_release(object);
  return std::unique_ptr<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0,std::default_delete<std::function<void ()(xpc::object)> &>>::~unique_ptr[abi:ne180100](&v4);
}

void sub_186611434( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::~__func( uint64_t a1)
{
  *(void *)a1 = off_189E97988;
  uint64_t v2 = (void *)(a1 + 24);
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  xpc_object_t v5 = *(dispatch_object_s **)(a1 + 16);
  if (v5) {
    dispatch_release(v5);
  }
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  return a1;
}

void std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::~__func( char *a1)
{
  *(void *)a1 = off_189E97988;
  uint64_t v2 = a1 + 24;
  uint64_t v3 = (void *)*((void *)a1 + 6);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  xpc_object_t v5 = (dispatch_object_s *)*((void *)a1 + 2);
  if (v5) {
    dispatch_release(v5);
  }
  xpc_release(*((xpc_object_t *)a1 + 1));
  operator delete(a1);
}

xpc_object_t *std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::__clone( uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = (xpc_object_t *)operator new(0x38uLL);
  *uint64_t v2 = off_189E97988;
  std::__compressed_pair_elem<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<std::function<void ()(xpc::object)> && const&,0ul>( v2 + 1,  v1);
  return v2;
}

void sub_186611580(_Unwind_Exception *a1)
{
}

xpc_object_t *std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::__clone( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189E97988;
  return std::__compressed_pair_elem<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<std::function<void ()(xpc::object)> && const&,0ul>( (xpc_object_t *)(a2 + 8),  a1 + 8);
}

void std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::destroy( uint64_t a1)
{
}

void std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::destroy_deallocate( void *a1)
{
}

void std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::operator()( uint64_t a1, void **a2)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *a2;
  *a2 = xpc_null_create();
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v4 = v11;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v11, a1 + 24);
  xpc_object_t v5 = *(dispatch_queue_s **)(a1 + 16);
  xpc_object_t v6 = operator new(0x28uLL);
  void *v6 = object;
  xpc_object_t object = xpc_null_create();
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v6 + 1), (uint64_t)v11);
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  dispatch_async_f( v5,  v6,  (dispatch_function_t)dispatch::async<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1::operator() const(xpc::object)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<std::unique_ptr>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<$_1>>::~unique_ptr[abi:ne180100](&v8);
  std::unique_ptr<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<$_1>>::~unique_ptr[abi:ne180100](&v9);
  if (v12 == v11)
  {
    uint64_t v7 = 4LL;
    goto LABEL_8;
  }

  if (v12)
  {
    uint64_t v7 = 5LL;
    uint64_t v4 = v12;
LABEL_8:
    (*(void (**)(void *))(*v4 + 8 * v7))(v4);
  }

  xpc_release(object);
  xpc_release(v3);
}

void sub_18661170C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::target_type()
{
}

xpc_object_t *std::__compressed_pair_elem<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<std::function<void ()(xpc::object)> && const&,0ul>( xpc_object_t *a1, uint64_t a2)
{
  xpc_object_t v4 = *(xpc_object_t *)a2;
  *a1 = *(xpc_object_t *)a2;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    *a1 = xpc_null_create();
  }
  xpc_object_t v5 = *(dispatch_object_s **)(a2 + 8);
  a1[1] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(a1 + 2), a2 + 16);
  return a1;
}

void sub_1866117FC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(dispatch_object_s **)(v1 + 8);
  if (v3) {
    dispatch_release(v3);
  }
  xpc_release(*(xpc_object_t *)v1);
  *(void *)uint64_t v1 = 0LL;
  _Unwind_Resume(a1);
}

void std::__function::__alloc_func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::destroy[abi:ne180100]( uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 16);
  uint64_t v3 = *(void **)(a1 + 40);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  xpc_object_t v5 = *(dispatch_object_s **)(a1 + 8);
  if (v5) {
    dispatch_release(v5);
  }
  xpc_release(*(xpc_object_t *)a1);
  *(void *)a1 = 0LL;
}

uint64_t *std::unique_ptr<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<$_1>>::~unique_ptr[abi:ne180100]( uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 32);
    if (v3 == (void *)(v2 + 8))
    {
      uint64_t v4 = 4LL;
      uint64_t v3 = (void *)(v2 + 8);
    }

    else
    {
      if (!v3)
      {
LABEL_7:
        xpc_release(*(xpc_object_t *)v2);
        operator delete((void *)v2);
        return a1;
      }

      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_7;
  }

  return a1;
}

uint64_t *dispatch::async<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1::operator() const(xpc::object)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<std::unique_ptr>>)::{lambda(void *)#1}::__invoke( uint64_t a1)
{
  uint64_t v5 = a1;
  uint64_t v2 = *(void **)a1;
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v3 + 48LL))(v3, &object);
  xpc_release(object);
  return std::unique_ptr<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<$_1>>::~unique_ptr[abi:ne180100](&v5);
}

void sub_18661197C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void *std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::~__func( void *a1)
{
  *a1 = &off_189E97A08;
  uint64_t v2 = a1 + 3;
  uint64_t v3 = (void *)a1[6];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::~__func( char *__p)
{
  *(void *)std::string __p = &off_189E97A08;
  uint64_t v2 = __p + 24;
  uint64_t v3 = (char *)*((void *)__p + 6);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*(void *)v3 + 8 * v4))();
LABEL_6:
  uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 2);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(__p);
}

void *std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::__clone( uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &off_189E97A08;
  std::__compressed_pair_elem<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<std::function<void ()(xpc::object)> && const&,0ul>( v2 + 1,  v1);
  return v2;
}

void sub_186611AAC(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::__clone( uint64_t a1, void *a2)
{
  *a2 = &off_189E97A08;
  return std::__compressed_pair_elem<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<std::function<void ()(xpc::object)> && const&,0ul>( a2 + 1,  (void *)(a1 + 8));
}

void std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::destroy( uint64_t a1)
{
}

void std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::destroy_deallocate( void *a1)
{
}

void std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::operator()( void *a1, void **a2)
{
  uint64_t v3 = *a2;
  *a2 = xpc_null_create();
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      xpc_object_t v6 = v5;
      if (a1[1])
      {
        xpc_object_t object = v3;
        if (v3) {
          xpc_retain(v3);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        uint64_t v7 = a1[6];
        if (!v7) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v7 + 48LL))(v7, &object);
        xpc_release(object);
        xpc_object_t object = 0LL;
      }

      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        unint64_t v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }

  xpc_release(v3);
}

void sub_186611BEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    unint64_t v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }

  xpc_release(v10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::target_type()
{
}

void *std::__compressed_pair_elem<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<std::function<void ()(xpc::object)> && const&,0ul>( void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3)
  {
    uint64_t v4 = (unint64_t *)(v3 + 16);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return a1;
}

void sub_186611CE0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__alloc_func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::destroy[abi:ne180100]( uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 16);
  uint64_t v3 = *(void **)(a1 + 40);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t *std::unique_ptr<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0>(ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&>>::~unique_ptr[abi:ne180100]( uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(void *)(v2 + memset(&context, 0, 24) = 0LL;
    uint64_t v3 = (void *)std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v2);
    operator delete(v3);
  }

  return a1;
}

uint64_t *dispatch::async<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0>(ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0,dispatch_queue_s *::default_delete<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke( uint64_t a1)
{
  uint64_t v11 = a1;
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (void *)(a1 + 24);
  uint64_t v4 = *(void *)(v1 + 72);
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 80);
  uint64_t v12 = v4;
  uint64_t v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }

  ctu::rest::RestConnector::visitIfNotifyMessage<std::shared_ptr<ctu::rest::RestConnectorDelegateBase>>(v2, &v12);
  uint64_t v7 = v13;
  if (v13)
  {
    uint64_t v8 = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  return std::unique_ptr<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0>(ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&>>::~unique_ptr[abi:ne180100](&v11);
}

void sub_186611E34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  uint64_t v13 = a12;
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  std::unique_ptr<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0>(ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1>(ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1 &&)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1 &&>>::~unique_ptr[abi:ne180100]( uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (!v2) {
    return a1;
  }
  uint64_t v3 = *(void **)(v2 + 72);
  if (v3 == (void *)(v2 + 48))
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = (void *)(v2 + 48);
    goto LABEL_6;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_6:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  unint64_t v5 = *(dispatch_object_s **)(v2 + 40);
  if (v5) {
    dispatch_release(v5);
  }
  xpc_release(*(xpc_object_t *)(v2 + 32));
  *(void *)(v2 + 32) = 0LL;
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(void *)(v2 + memset(&context, 0, 24) = 0LL;
  unint64_t v6 = (void *)std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v2);
  operator delete(v6);
  return a1;
}

uint64_t *dispatch::async<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1>(ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1,std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1>>)::{lambda(void *)#1}::__invoke( uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  uint64_t v23 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)(a1 + 24);
  xpc_object_t v28 = (xpc_object_t)(a1 + 24);
  dispatch_object_t object = (dispatch_object_t)"o";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v28, v32);
  int v5 = ctu::rest::asOperation(v32, v4);
  xpc_release(v32[0]);
  if (v5 == 6)
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v28 = v6;
    ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)const::$_0::operator()( a1 + 32,  &v28);
    xpc_release(v6);
    return std::unique_ptr<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1>(ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1 &&)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1 &&>>::~unique_ptr[abi:ne180100](&v23);
  }

  uint64_t v8 = *(void *)(v2 + 72);
  uint64_t v7 = *(std::__shared_weak_count **)(v2 + 80);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  xpc_object_t v28 = v3;
  dispatch_object_t object = (dispatch_object_t)"o";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v28, v32);
  int v12 = ctu::rest::asOperation(v32, v11);
  xpc_release(v32[0]);
  if (v12 == 2)
  {
    v26[0] = v3;
    v26[1] = "r";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v26, &v27);
    v24[0] = v3;
    v24[1] = "v";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v24, &v25);
    ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)const::$_0::$_0( &v28,  a1 + 32);
    uint64_t v33 = 0LL;
    uint64_t v13 = (xpc_object_t *)operator new(0x38uLL);
    xpc_object_t v14 = v28;
    *uint64_t v13 = off_189E97A88;
    v13[1] = v14;
    xpc_object_t v28 = xpc_null_create();
    unint64_t v15 = object;
    _OWORD v13[2] = object;
    if (v15) {
      dispatch_retain(v15);
    }
    std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v13 + 3), (uint64_t)v30);
    uint64_t v33 = v13;
    (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *, xpc_object_t *))(*(void *)v8 + 24LL))( v8,  &v27,  &v25,  v32);
    uint64_t v16 = v33;
    if (v33 == v32)
    {
      uint64_t v17 = 4LL;
      uint64_t v16 = v32;
    }

    else
    {
      if (!v33) {
        goto LABEL_14;
      }
      uint64_t v17 = 5LL;
    }

    (*((void (**)(xpc_object_t *))*v16 + v17))(v16);
LABEL_14:
    uint64_t v18 = v31;
    if (v31 == v30)
    {
      uint64_t v19 = 4LL;
      uint64_t v18 = v30;
    }

    else
    {
      if (!v31)
      {
LABEL_19:
        if (object) {
          dispatch_release(object);
        }
        xpc_release(v28);
        xpc_object_t v28 = 0LL;
        xpc_release(v25);
        xpc_release(v27);
        goto LABEL_22;
      }

      uint64_t v19 = 5LL;
    }

    (*(void (**)(void *))(*v18 + 8 * v19))(v18);
    goto LABEL_19;
  }

void sub_186612188( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t a12, uint64_t a13, uint64_t a14, xpc_object_t a15, xpc_object_t a16, dispatch_object_t object, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)const::$_0::operator()( uint64_t a1, void **a2)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void **)a1;
  xpc_object_t v12 = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t v12 = xpc_null_create();
  }
  int v5 = *a2;
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc_object_t v6 = v14;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v14, a1 + 16);
  uint64_t v7 = *(dispatch_queue_s **)(a1 + 8);
  uint64_t v8 = operator new(0x30uLL);
  void *v8 = v12;
  xpc_object_t v12 = xpc_null_create();
  v8[1] = object;
  xpc_object_t object = xpc_null_create();
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v8 + 2), (uint64_t)v14);
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  dispatch_async_f( v7,  v8,  (dispatch_function_t)dispatch::async<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&v10);
  std::unique_ptr<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&v11);
  if (v15 == v14)
  {
    uint64_t v9 = 4LL;
    goto LABEL_11;
  }

  if (v15)
  {
    uint64_t v9 = 5LL;
    xpc_object_t v6 = v15;
LABEL_11:
    (*(void (**)(void *))(*v6 + 8 * v9))(v6);
  }

  xpc_release(object);
  xpc_object_t object = 0LL;
  xpc_release(v12);
}

void sub_186612444( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t a12, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t *std::unique_ptr<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100]( uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 40);
    if (v3 == (void *)(v2 + 16))
    {
      uint64_t v4 = 4LL;
      uint64_t v3 = (void *)(v2 + 16);
    }

    else
    {
      if (!v3)
      {
LABEL_7:
        xpc_release(*(xpc_object_t *)(v2 + 8));
        *(void *)(v2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
        xpc_release(*(xpc_object_t *)v2);
        operator delete((void *)v2);
        return a1;
      }

      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_7;
  }

  return a1;
}

uint64_t *dispatch::async<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke( uint64_t a1)
{
  uint64_t v5 = a1;
  ctu::rest::createReplyFromRequestWithValue((xpc_object_t *)a1, (const xpc::dict *)(a1 + 8), &object);
  xpc_object_t v2 = object;
  xpc_object_t v7 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v7 = xpc_null_create();
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v3 + 48LL))(v3, &v7);
  xpc_release(v7);
  xpc_object_t v7 = 0LL;
  xpc_release(v2);
  return std::unique_ptr<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&v5);
}

void sub_1866125B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

xpc_object_t *ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)const::$_0::$_0( xpc_object_t *a1, uint64_t a2)
{
  xpc_object_t v4 = *(xpc_object_t *)a2;
  *a1 = *(xpc_object_t *)a2;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    *a1 = xpc_null_create();
  }
  uint64_t v5 = *(dispatch_object_s **)(a2 + 8);
  a1[1] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(a1 + 2), a2 + 16);
  return a1;
}

void sub_186612648(_Unwind_Exception *a1)
{
  uint64_t v3 = *(dispatch_object_s **)(v1 + 8);
  if (v3) {
    dispatch_release(v3);
  }
  xpc_release(*(xpc_object_t *)v1);
  *(void *)uint64_t v1 = 0LL;
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::~__func( uint64_t a1)
{
  *(void *)a1 = off_189E97A88;
  xpc_object_t v2 = (void *)(a1 + 24);
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  uint64_t v5 = *(dispatch_object_s **)(a1 + 16);
  if (v5) {
    dispatch_release(v5);
  }
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  return a1;
}

void std::__function::__func<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::~__func( char *a1)
{
  *(void *)a1 = off_189E97A88;
  xpc_object_t v2 = a1 + 24;
  uint64_t v3 = (void *)*((void *)a1 + 6);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  uint64_t v5 = (dispatch_object_s *)*((void *)a1 + 2);
  if (v5) {
    dispatch_release(v5);
  }
  xpc_release(*((xpc_object_t *)a1 + 1));
  operator delete(a1);
}

xpc_object_t *std::__function::__func<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::__clone( uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  xpc_object_t v2 = (xpc_object_t *)operator new(0x38uLL);
  *xpc_object_t v2 = off_189E97A88;
  ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)const::$_0::$_0( v2 + 1,  v1);
  return v2;
}

void sub_1866127A0(_Unwind_Exception *a1)
{
}

xpc_object_t *std::__function::__func<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::__clone( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_189E97A88;
  return ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)const::$_0::$_0( (xpc_object_t *)(a2 + 8),  a1 + 8);
}

void std::__function::__func<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::destroy( uint64_t a1)
{
}

void std::__function::__func<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::destroy_deallocate( void *a1)
{
}

void std::__function::__func<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::operator()( uint64_t a1, void **a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = v4;
  *a2 = xpc_null_create();
  ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)const::$_0::operator()( a1 + 8,  &v4);
  xpc_release(v3);
}

void sub_18661285C(_Unwind_Exception *a1)
{
}

uint64_t std::__function::__func<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::target_type()
{
}

void std::__function::__alloc_func<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::destroy[abi:ne180100]( uint64_t a1)
{
  xpc_object_t v2 = (void *)(a1 + 16);
  uint64_t v3 = *(void **)(a1 + 40);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  uint64_t v5 = *(dispatch_object_s **)(a1 + 8);
  if (v5) {
    dispatch_release(v5);
  }
  xpc_release(*(xpc_object_t *)a1);
  *(void *)a1 = 0LL;
}

void sub_186612B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1866131C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::shared_ptr<ctu::Http::HttpResponse>::reset[abi:ne180100]<ctu::Http::HttpResponseConcrete,void>( void *a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = off_189E97BB0;
  v4[1] = 0LL;
  std::string v4[2] = 0LL;
  v4[3] = a2;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

void sub_186613270(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

LABEL_29:
  xpc_object_t v27 = (std::__shared_weak_count *)v44[5];
  uint64_t v38 = v44[4];
  uint64_t v39 = v27;
  if (v27)
  {
    xpc_object_t v28 = (unint64_t *)&v27->__shared_owners_;
    do
      unint64_t v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }

  (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 16LL))(v10, &v38);
  unint64_t v30 = v39;
  if (v39)
  {
    uint64_t v31 = (unint64_t *)&v39->__shared_owners_;
    do
      uint64_t v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

  uint64_t v33 = (std::__shared_weak_count *)v41;
  if (v41)
  {
    uint64_t v34 = (unint64_t *)(v41 + 8);
    do
      uint64_t v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }

  uint64_t v17 = v43;
  if (v43) {
    goto LABEL_43;
  }
LABEL_9:
  xpc_object_t v14 = (std::__shared_weak_count *)v45;
  if (v45)
  {
    unint64_t v15 = (unint64_t *)(v45 + 8);
    do
      uint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

            uint64_t v18 = (unint64_t *)&v15->__shared_owners_;
            do
              uint64_t v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }

            goto LABEL_33;
          }
        }
      }

      else
      {
        unint64_t v15 = 0LL;
      }

      std::string::basic_string[abi:ne180100]<0>(&v23, "<expired>");
      if (v15) {
        goto LABEL_29;
      }
LABEL_33:
      if ((v23.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v20 = &v23;
      }
      else {
        unint64_t v20 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      if ((v23.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = v23.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = v23.__r_.__value_.__l.__size_;
      }
      std::string::append(&__p, (const std::string::value_type *)v20, size);
      xpc_object_t v12 = v13 + 2;
      uint64_t v3 = v13;
    }

    while (v13 + 2 != v4);
  }

  *(void *)a2 = 0LL;
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  if (v9)
  {
    std::operator+<char>();
    *(std::string *)a2 = v23;
    goto LABEL_47;
  }

void sub_18661357C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1866136EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_186613828( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_186613CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get( uint64_t a1)
{
  return *(void *)a1;
}

void sub_186613E64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void std::__shared_ptr_pointer<SessionTaskContext *,std::shared_ptr<SessionTaskContext>::__shared_ptr_default_delete<SessionTaskContext,SessionTaskContext>,std::allocator<SessionTaskContext>>::~__shared_ptr_pointer( std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_pointer<SessionTaskContext *,std::shared_ptr<SessionTaskContext>::__shared_ptr_default_delete<SessionTaskContext,SessionTaskContext>,std::allocator<SessionTaskContext>>::__on_zero_shared( uint64_t a1)
{
  uint64_t v1 = *(SessionTaskContext **)(a1 + 24);
  if (v1)
  {
    SessionTaskContext::~SessionTaskContext(v1);
    operator delete(v2);
  }

uint64_t std::__shared_ptr_pointer<SessionTaskContext *,std::shared_ptr<SessionTaskContext>::__shared_ptr_default_delete<SessionTaskContext,SessionTaskContext>,std::allocator<SessionTaskContext>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void SessionTaskContext::~SessionTaskContext(SessionTaskContext *this)
{
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void std::__tree<std::__value_type<unsigned long,std::shared_ptr<SessionTaskContext>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<SessionTaskContext>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<SessionTaskContext>>>>::destroy( void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<SessionTaskContext>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<SessionTaskContext>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<SessionTaskContext>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<SessionTaskContext>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<SessionTaskContext>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<SessionTaskContext>>>>::destroy(a1[1]);
    std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
    operator delete(a1);
  }

void std::__shared_ptr_pointer<ctu::Http::HttpResponseConcrete *,std::shared_ptr<ctu::Http::HttpResponse>::__shared_ptr_default_delete<ctu::Http::HttpResponse,ctu::Http::HttpResponseConcrete>,std::allocator<ctu::Http::HttpResponseConcrete>>::~__shared_ptr_pointer( std::__shared_weak_count *a1)
{
}

uint64_t std::__shared_ptr_pointer<ctu::Http::HttpResponseConcrete *,std::shared_ptr<ctu::Http::HttpResponse>::__shared_ptr_default_delete<ctu::Http::HttpResponse,ctu::Http::HttpResponseConcrete>,std::allocator<ctu::Http::HttpResponseConcrete>>::__on_zero_shared( uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ctu::Http::HttpResponseConcrete *,std::shared_ptr<ctu::Http::HttpResponse>::__shared_ptr_default_delete<ctu::Http::HttpResponse,ctu::Http::HttpResponseConcrete>,std::allocator<ctu::Http::HttpResponseConcrete>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

BOOL ctu::starts_with(const void *a1, size_t a2, const void *a3, size_t a4)
{
  if (a2 < a4) {
    return 0LL;
  }
  if (a4) {
    return memcmp(a1, a3, a4) == 0;
  }
  return 1LL;
}

BOOL ctu::ends_with(uint64_t a1, size_t a2, const void *a3, size_t a4)
{
  if (a2 < a4) {
    return 0LL;
  }
  if (a4) {
    return memcmp((const void *)(a1 + a2 - a4), a3, a4) == 0;
  }
  return 1LL;
}

double ctu::partition@<D0>( char *a1@<X0>, size_t a2@<X1>, unsigned __int8 *a3@<X2>, size_t a4@<X3>, uint64_t a5@<X8>)
{
  v17[0] = (uint64_t)a1;
  v17[1] = a2;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = 0u;
  *(void *)(a5 + 64) = 0LL;
  unint64_t v10 = ctu::llvm::StringRef::find(v17, a3, a4, 0LL);
  if (v10 == -1LL)
  {
    if (a1)
    {
      std::string::basic_string[abi:ne180100](&__dst, a1, a2);
    }

    else
    {
      __int128 __dst = 0uLL;
      uint64_t v16 = 0LL;
    }

    double result = *(double *)&__dst;
    *(_OWORD *)a5 = __dst;
    *(void *)(a5 + 16) = v16;
  }

  else
  {
    unint64_t v11 = v10;
    if (a1)
    {
      if (v10 >= a2) {
        size_t v12 = a2;
      }
      else {
        size_t v12 = v10;
      }
      std::string::basic_string[abi:ne180100](&__dst, a1, v12);
    }

    else
    {
      __int128 __dst = 0uLL;
      uint64_t v16 = 0LL;
    }

    *(_OWORD *)a5 = __dst;
    *(void *)(a5 + 16) = v16;
    if (a3)
    {
      std::string::basic_string[abi:ne180100](&__dst, a3, a4);
    }

    else
    {
      __int128 __dst = 0uLL;
      uint64_t v16 = 0LL;
    }

    *(_OWORD *)(a5 + memset(&context, 0, 24) = __dst;
    *(void *)(a5 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = v16;
    if (a1)
    {
      size_t v13 = v11 + a4;
      if (v11 + a4 >= a2) {
        size_t v13 = a2;
      }
      std::string::basic_string[abi:ne180100](&__dst, &a1[v13], a2 - v13);
    }

    else
    {
      __int128 __dst = 0uLL;
      uint64_t v16 = 0LL;
    }

    double result = *(double *)&__dst;
    *(_OWORD *)(a5 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = __dst;
    *(void *)(a5 + 64) = v16;
  }

  return result;
}

void sub_1866141EC(_Unwind_Exception *a1)
{
}

uint64_t std::tuple<std::string,std::string,std::string>::~tuple(uint64_t a1)
{
  return a1;
}

uint64_t ctu::split_any@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  v28[0] = a1;
  v28[1] = a2;
  a5[2] = 0LL;
  unint64_t v10 = a5 + 2;
  *a5 = 0LL;
  a5[1] = 0LL;
  unint64_t first_not_of = ctu::llvm::StringRef::find_first_not_of(v28, a3, a4, 0LL);
  uint64_t result = ctu::llvm::StringRef::find_first_of(v28, a3, a4, first_not_of);
  if ((first_not_of & result) != 0xFFFFFFFFFFFFFFFFLL)
  {
    unint64_t v13 = result;
    xpc_object_t v14 = 0LL;
    do
    {
      if (v13 == -1LL) {
        unint64_t v15 = a2;
      }
      else {
        unint64_t v15 = v13;
      }
      unint64_t v16 = v15 - first_not_of;
      uint64_t v17 = a1 + first_not_of;
      if ((unint64_t)v14 >= *v10)
      {
        uint64_t v18 = (v14 - *a5) >> 4;
        uint64_t v19 = *v10 - (void)*a5;
        uint64_t v20 = v19 >> 3;
        else {
          unint64_t v21 = v20;
        }
        uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::RestResourceConnection>>>( (uint64_t)v10,  v21);
        __int128 v24 = &v22[16 * v18];
        *(void *)__int128 v24 = v17;
        *((void *)v24 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v16;
        uint64_t v26 = *a5;
        xpc_object_t v25 = a5[1];
        xpc_object_t v27 = v24;
        if (v25 != *a5)
        {
          do
          {
            *((_OWORD *)v27 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *((_OWORD *)v25 - 1);
            v27 -= 16;
            v25 -= 16;
          }

          while (v25 != v26);
          xpc_object_t v25 = *a5;
        }

        xpc_object_t v14 = v24 + 16;
        *a5 = v27;
        a5[1] = v24 + 16;
        a5[2] = &v22[16 * v23];
        if (v25) {
          operator delete(v25);
        }
      }

      else
      {
        *(void *)xpc_object_t v14 = v17;
        *((void *)v14 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v16;
        v14 += 16;
      }

      a5[1] = v14;
      unint64_t first_not_of = ctu::llvm::StringRef::find_first_not_of(v28, a3, a4, v13);
      uint64_t result = ctu::llvm::StringRef::find_first_of(v28, a3, a4, first_not_of);
      unint64_t v13 = result;
    }

    while ((first_not_of & result) != 0xFFFFFFFFFFFFFFFFLL);
  }

  return result;
}

void sub_186614404(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t ctu::split_any_copy@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, std::vector<std::string> *a5@<X8>)
{
  uint64_t v23 = a1;
  unint64_t v24 = a2;
  a5->__end_cap_.__value_ = 0LL;
  p_end_int64_t cap = (std::allocator<std::string> *)&a5->__end_cap_;
  a5->__begin_ = 0LL;
  a5->__end_ = 0LL;
  unint64_t first_not_of = ctu::llvm::StringRef::find_first_not_of(&v23, a3, a4, 0LL);
  uint64_t result = ctu::llvm::StringRef::find_first_of(&v23, a3, a4, first_not_of);
  if ((first_not_of & result) != 0xFFFFFFFFFFFFFFFFLL)
  {
    unint64_t v11 = result;
    size_t v12 = 0LL;
    do
    {
      size_t v13 = v11 - first_not_of;
      uint64_t v14 = v23;
      if (first_not_of >= v24) {
        unint64_t v15 = v24;
      }
      else {
        unint64_t v15 = first_not_of;
      }
      unint64_t v16 = (void *)(v23 + v15);
      if (v13 >= v24 - v15) {
        size_t v17 = v24 - v15;
      }
      else {
        size_t v17 = v13;
      }
      if ((unint64_t)v12 >= *(void *)p_end_cap)
      {
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)a5->__begin_) >> 3);
        unint64_t v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        else {
          unint64_t v20 = v19;
        }
        __v.__end_cap_.__value_ = p_end_cap;
        if (v20) {
          unint64_t v21 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>( (uint64_t)p_end_cap,  v20);
        }
        else {
          unint64_t v21 = 0LL;
        }
        std::__split_buffer<std::string>::pointer end = v21 + v18;
        __v.__first_ = v21;
        __v.__begin_ = end;
        __v.__end_ = end;
        __v.__end_cap_.__value_ = &v21[v20];
        if (v14)
        {
          std::string::basic_string[abi:ne180100](end, v16, v17);
          std::__split_buffer<std::string>::pointer end = __v.__end_;
        }

        else
        {
          end->__r_.__value_.__r.__words[0] = 0LL;
          end->__r_.__value_.__l.__size_ = 0LL;
          end->__r_.__value_.__l.__cap_ = 0LL;
        }

        __v.__end_ = end + 1;
        std::vector<std::string>::__swap_out_circular_buffer(a5, &__v);
        size_t v12 = a5->__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
      }

      else
      {
        if (v23)
        {
          std::string::basic_string[abi:ne180100](v12, (void *)(v23 + v15), v17);
        }

        else
        {
          v12->__r_.__value_.__r.__words[0] = 0LL;
          v12->__r_.__value_.__l.__size_ = 0LL;
          v12->__r_.__value_.__l.__cap_ = 0LL;
        }

        a5->__end_ = ++v12;
      }

      a5->__end_ = v12;
      unint64_t first_not_of = ctu::llvm::StringRef::find_first_not_of(&v23, a3, a4, v11);
      uint64_t result = ctu::llvm::StringRef::find_first_of(&v23, a3, a4, first_not_of);
      unint64_t v11 = result;
    }

    while ((first_not_of & result) != 0xFFFFFFFFFFFFFFFFLL);
  }

  return result;
}

void sub_186614628( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__split_buffer<std::string> *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  *(void *)(v11 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = v12;
  a11 = (void **)v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void ctu::py_escape(char *a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0LL;
  a3->__r_.__value_.__l.__size_ = 0LL;
  a3->__r_.__value_.__l.__cap_ = 0LL;
  uint64_t v6 = a1[23];
  if ((v6 & 0x80u) != 0LL) {
    uint64_t v6 = *((void *)a1 + 1);
  }
  uint64_t v7 = 2LL;
  if (!a2) {
    uint64_t v7 = 0LL;
  }
  std::string::reserve(a3, v6 + v7);
  if (a2) {
    std::string::push_back(a3, 34);
  }
  int v8 = a1[23];
  if (v8 >= 0) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = *(char **)a1;
  }
  if (v8 >= 0) {
    uint64_t v10 = a1[23];
  }
  else {
    uint64_t v10 = *((void *)a1 + 1);
  }
  if (v10)
  {
    uint64_t v11 = MEMORY[0x1895F8770];
    do
    {
      uint64_t v12 = (ctu *)*v9;
      if ((int)v12 > 33)
      {
        switch((_DWORD)v12)
        {
          case '""':
            std::string::push_back(a3, 92);
            LOBYTE(v12) = 34;
            goto LABEL_32;
          case '\'':
            std::string::push_back(a3, 92);
            LOBYTE(v12) = 39;
            goto LABEL_32;
          case '\\':
            std::string::push_back(a3, 92);
            goto LABEL_32;
        }
      }

      else
      {
        switch((_DWORD)v12)
        {
          case 9:
            std::string::push_back(a3, 92);
            LOBYTE(v12) = 116;
            goto LABEL_32;
          case 0xA:
            std::string::push_back(a3, 92);
            LOBYTE(v12) = 110;
            goto LABEL_32;
          case 0xD:
            std::string::push_back(a3, 92);
            LOBYTE(v12) = 114;
            goto LABEL_32;
        }
      }

      else {
        int v13 = *(_DWORD *)(v11 + 4LL * v12 + 60) & 0x40000;
      }
      if (!v13)
      {
        std::string::push_back(a3, 92);
        std::string::push_back(a3, 120);
        ctu::hex0(v12, &__p);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::__split_buffer<std::string>::pointer p_p = &__p;
        }
        else {
          std::__split_buffer<std::string>::pointer p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type size = __p.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(a3, (const std::string::value_type *)p_p, size);
        goto LABEL_33;
      }

void sub_186614868( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ctu::replace_copy( char *__s@<X1>, uint64_t a2@<X0>, size_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, std::string *a6@<X8>)
{
  uint64_t v10 = a6;
  memset(a6, 170, sizeof(std::string));
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)&a6->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a6->__r_.__value_.__l.__cap_ = *(void *)(a2 + 16);
  }

  std::string::size_type size = v10->__r_.__value_.__l.__size_;
  if ((v10->__r_.__value_.__s.__size_ & 0x80u) == 0)
  {
    std::string::size_type v12 = v10->__r_.__value_.__s.__size_;
  }

  else
  {
    uint64_t v10 = (std::string *)v10->__r_.__value_.__r.__words[0];
    std::string::size_type v12 = size;
  }

  for (; v12; --v12)
  {
    int v13 = (char *)memchr(__s, v10->__r_.__value_.__s.__data_[0], a3);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = &__s[a3];
    }
    uint64_t v15 = v14 - __s;
    if (v15 < a5 && v15 != a3) {
      v10->__r_.__value_.__s.__data_[0] = *(_BYTE *)(a4 + v15);
    }
    uint64_t v10 = (std::string *)((char *)v10 + 1);
  }

_BYTE *ctu::replace(_BYTE *result, char *__s, size_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = (char)result[23];
  if (v5 >= 0) {
    uint64_t v6 = result;
  }
  else {
    uint64_t v6 = *(_BYTE **)result;
  }
  if (v5 >= 0) {
    uint64_t v7 = result[23];
  }
  else {
    uint64_t v7 = *((void *)result + 1);
  }
  if (v7)
  {
    std::string::size_type v12 = &__s[a3];
    do
    {
      uint64_t result = memchr(__s, (char)*v6, a3);
      if (result) {
        uint64_t v14 = result;
      }
      else {
        uint64_t v14 = v12;
      }
      uint64_t v15 = v14 - __s;
      if (v15 < a5 && v15 != a3) {
        _BYTE *v6 = *(_BYTE *)(a4 + v15);
      }
      ++v6;
      --v7;
    }

    while (v7);
  }

  return result;
}

void ctu::XpcJetsamAssertion::create_default_global(void *a1@<X8>)
{
  uint64_t v3 = operator new(0x30uLL);
  *uint64_t v3 = 0LL;
  v3[1] = 0LL;
  *((_DWORD *)v3 + 4) = 0;
  v3[4] = 0LL;
  void v3[5] = 0LL;
  v3[3] = 0LL;
  *a1 = v3;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  int v5 = v4;
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_189E97C18;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  a1[1] = v4;
  do
    unint64_t v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    unint64_t v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  *uint64_t v3 = v3;
  v3[1] = v4;
  do
    unint64_t v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }

void sub_186614AF0(_Unwind_Exception *a1)
{
}

uint64_t ctu::XpcJetsamAssertion::XpcJetsamAssertion(uint64_t this)
{
  *(void *)this = 0LL;
  *(void *)(this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  *(_DWORD *)(this + 16) = 0;
  *(void *)(this + 32) = 0LL;
  *(void *)(this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0LL;
  *(void *)(this + memset(&context, 0, 24) = 0LL;
  return this;
}

{
  *(void *)this = 0LL;
  *(void *)(this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  *(_DWORD *)(this + 16) = 0;
  *(void *)(this + 32) = 0LL;
  *(void *)(this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0LL;
  *(void *)(this + memset(&context, 0, 24) = 0LL;
  return this;
}

void ctu::XpcJetsamAssertion::createActivity(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  void v24[2] = *MEMORY[0x1895F89C0];
  int v5 = (std::__shared_weak_count *)a1[1];
  if (!v5 || (uint64_t v7 = *a1, (v8 = std::__shared_weak_count::lock(v5)) == 0LL)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    unint64_t v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    unint64_t v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }

  uint64_t v14 = (char *)operator new(0x20uLL);
  uint64_t v15 = *(void *)a2;
  v24[0] = *(void *)(a2 + 8);
  *(void *)((char *)v24 + 7) = *(void *)(a2 + 15);
  int v16 = *(char *)(a2 + 23);
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
  uint64_t v17 = v24[0];
  *(void *)uint64_t v14 = v15;
  *((void *)v14 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v17;
  *(void *)(v14 + 15) = *(void *)((char *)v24 + 7);
  v14[23] = v16;
  v24[0] = 0LL;
  *(void *)((char *)v24 + 7) = 0LL;
  if ((v16 & 0x80000000) == 0 || (uint64_t v18 = v15) != 0) {
    uint64_t v18 = os_transaction_create();
  }
  *((void *)v14 + ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = v18;
  do
    unint64_t v19 = __ldxr(p_shared_weak_owners);
  while (__stxr(v19 + 1, p_shared_weak_owners));
  unint64_t v20 = (std::__shared_weak_count *)operator new(0x30uLL);
  v20->__shared_weak_owners_ = 0LL;
  unint64_t v21 = (unint64_t *)&v20->__shared_weak_owners_;
  v20->__vftable = (std::__shared_weak_count_vtbl *)off_189E97C90;
  v20->__shared_owners_ = 0LL;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  v20[1].__shared_owners_ = v7;
  v20[1].__shared_weak_owners_ = (uint64_t)v9;
  *(void *)&__int128 v23 = v14;
  *((void *)&v23 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v20;
  do
    unint64_t v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  ctu::XpcJetsamAssertion::addActivity((uint64_t)a1, &v23);
  std::__shared_weak_count::__release_weak(v20);
  *a3 = v14;
  a3[1] = v20;
  std::__shared_weak_count::__release_weak(v9);
}

void sub_186614CC0(_Unwind_Exception *a1)
{
}

void ctu::XpcJetsamAssertion::addActivity(uint64_t a1, __int128 *a2)
{
  __int128 v24 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a2 + 1);
  if (v3)
  {
    uint64_t v4 = (unint64_t *)(*((void *)a2 + 1) + 16LL);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  uint64_t v7 = *(char **)(a1 + 32);
  unint64_t v6 = *(void *)(a1 + 40);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v11 = *(char **)(a1 + 24);
    uint64_t v12 = (v7 - v11) >> 4;
    unint64_t v13 = v12 + 1;
    uint64_t v14 = v6 - (void)v11;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v16 = (char *)operator new(16 * v15);
    uint64_t v17 = &v16[16 * v12];
    *(_OWORD *)uint64_t v17 = v24;
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        unint64_t v19 = __ldxr(p_shared_weak_owners);
      while (__stxr(v19 + 1, p_shared_weak_owners));
      unint64_t v11 = *(char **)(a1 + 24);
      uint64_t v7 = *(char **)(a1 + 32);
    }

    unint64_t v20 = &v16[16 * v15];
    unint64_t v10 = v17 + 16;
    if (v7 == v11)
    {
      *(void *)(a1 + memset(&context, 0, 24) = v17;
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = v20;
    }

    else
    {
      do
      {
        __int128 v21 = *((_OWORD *)v7 - 1);
        v7 -= 16;
        *((_OWORD *)v17 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v21;
        v17 -= 16;
        *(void *)uint64_t v7 = 0LL;
        *((void *)v7 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0LL;
      }

      while (v7 != v11);
      unint64_t v11 = *(char **)(a1 + 24);
      unint64_t v22 = *(char **)(a1 + 32);
      *(void *)(a1 + memset(&context, 0, 24) = v17;
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = v20;
      while (v22 != v11)
      {
        __int128 v23 = (std::__shared_weak_count *)*((void *)v22 - 1);
        if (v23) {
          std::__shared_weak_count::__release_weak(v23);
        }
        v22 -= 16;
      }
    }

    if (v11) {
      operator delete(v11);
    }
  }

  else
  {
    *(void *)uint64_t v7 = v24;
    *((void *)v7 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v3;
    if (v3)
    {
      int v8 = (unint64_t *)&v3->__shared_weak_owners_;
      do
        unint64_t v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }

    unint64_t v10 = v7 + 16;
  }

  *(void *)(a1 + 32) = v10;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ctu::XpcJetsamAssertion::tidyUp(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 4;
  os_unfair_lock_lock(this + 4);
  uint64_t v3 = *(uint64_t **)&this[6]._os_unfair_lock_opaque;
  uint64_t v4 = *(uint64_t **)&this[8]._os_unfair_lock_opaque;
  if (v3 != v4)
  {
    unint64_t v5 = v3 + 2;
    while (1)
    {
      uint64_t v6 = *(v5 - 1);
      if (!v6 || *(void *)(v6 + 8) == -1LL) {
        break;
      }
      BOOL v7 = v5 == v4;
      v5 += 2;
      if (v7) {
        goto LABEL_24;
      }
    }

    int v8 = v5 - 2;
    if (v5 - 2 != v4 && v5 != v4)
    {
      do
      {
        uint64_t v9 = v5[1];
        if (v9 && *(void *)(v9 + 8) != -1LL)
        {
          uint64_t v10 = *v5;
          *unint64_t v5 = 0LL;
          v5[1] = 0LL;
          unint64_t v11 = (std::__shared_weak_count *)v8[1];
          uint64_t *v8 = v10;
          v8[1] = v9;
          if (v11) {
            std::__shared_weak_count::__release_weak(v11);
          }
          v8 += 2;
        }

        v5 += 2;
      }

      while (v5 != v4);
      uint64_t v4 = *(uint64_t **)&this[8]._os_unfair_lock_opaque;
    }

    if (v8 != v4)
    {
      while (v4 != v8)
      {
        uint64_t v12 = (std::__shared_weak_count *)*(v4 - 1);
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
        v4 -= 2;
      }

      *(void *)&this[8]._os_unfair_lock_opaque = v8;
    }
  }

uint64_t ctu::XpcJetsamAssertion::getAssertionCount(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 4;
  os_unfair_lock_lock(this + 4);
  uint64_t v3 = (uint64_t)(*(void *)&this[8]._os_unfair_lock_opaque - *(void *)&this[6]._os_unfair_lock_opaque) >> 4;
  os_unfair_lock_unlock(v2);
  return v3;
}

void ctu::XpcJetsamAssertion::dumpState(os_unfair_lock_s *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = this + 4;
  os_unfair_lock_lock(this + 4);
  ctu::XpcJetsamAssertion::dumpState_sync((ctu::XpcJetsamAssertion *)this, a2);
  os_unfair_lock_unlock(v4);
}

void ctu::XpcJetsamAssertion::dumpState_sync(ctu::XpcJetsamAssertion *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)*((void *)this + 3);
  uint64_t v4 = (void *)*((void *)this + 4);
  memset(&__p, 0, sizeof(__p));
  if (v3 == v4)
  {
    *(void *)a2 = 0LL;
    *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
    goto LABEL_46;
  }

  unint64_t v5 = (std::__shared_weak_count *)v3[1];
  if (!v5)
  {
    uint64_t v6 = 0LL;
    goto LABEL_9;
  }

  uint64_t v6 = std::__shared_weak_count::lock(v5);
  if (!v6 || (BOOL v7 = (__int128 *)*v3) == 0LL)
  {
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(&v23, "<expired>");
    uint64_t v9 = 0LL;
    if (!v6) {
      goto LABEL_17;
    }
    goto LABEL_13;
  }

  if (*((char *)v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v7, *((void *)v7 + 1));
  }

  else
  {
    __int128 v8 = *v7;
    v23.__r_.__value_.__l.__cap_ = *((void *)v7 + 2);
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v8;
  }

  uint64_t v9 = 1LL;
LABEL_13:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    unint64_t v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }

void sub_1866153BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
  do
    unint64_t v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }

  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<ctu::XpcJetsamAssertion *,std::shared_ptr<ctu::XpcJetsamAssertion>::__shared_ptr_default_delete<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion>,std::allocator<ctu::XpcJetsamAssertion>>::~__shared_ptr_pointer( std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_pointer<ctu::XpcJetsamAssertion *,std::shared_ptr<ctu::XpcJetsamAssertion>::__shared_ptr_default_delete<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion>,std::allocator<ctu::XpcJetsamAssertion>>::__on_zero_shared( uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ctu::XpcJetsamAssertion *,std::shared_ptr<ctu::XpcJetsamAssertion>::__shared_ptr_default_delete<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion>,std::allocator<ctu::XpcJetsamAssertion>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void std::default_delete<ctu::XpcJetsamAssertion>::operator()[abi:ne180100](void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p[3];
    if (v2)
    {
      uint64_t v3 = __p[4];
      uint64_t v4 = (void *)__p[3];
      if (v3 != v2)
      {
        do
        {
          unint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5) {
            std::__shared_weak_count::__release_weak(v5);
          }
          v3 -= 16LL;
        }

        while (v3 != v2);
        uint64_t v4 = (void *)__p[3];
      }

      __p[4] = v2;
      operator delete(v4);
    }

    uint64_t v6 = (std::__shared_weak_count *)__p[1];
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
    operator delete(__p);
  }

void std::__shared_ptr_pointer<ctu::XpcJetsamAssertion::Activity *,ctu::XpcJetsamAssertion::createActivity(std::string)::$_0,std::allocator<ctu::XpcJetsamAssertion::Activity>>::~__shared_ptr_pointer( std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_189E97C90;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(this);
}

{
  std::__shared_weak_count *shared_weak_owners;
  void *v3;
  this->__vftable = (std::__shared_weak_count_vtbl *)off_189E97C90;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  operator delete(v3);
}

void std::__shared_ptr_pointer<ctu::XpcJetsamAssertion::Activity *,ctu::XpcJetsamAssertion::createActivity(std::string)::$_0,std::allocator<ctu::XpcJetsamAssertion::Activity>>::__on_zero_shared( void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      unint64_t v5 = (os_unfair_lock_s *)a1[4];
      if (v5) {
        ctu::XpcJetsamAssertion::tidyUp(v5);
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  if (v2)
  {
    ctu::SharedRef<os_transaction_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_transaction_s>::~SharedRef((void **)(v2 + 24));
    operator delete((void *)v2);
  }

  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  __int128 v8 = (std::__shared_weak_count *)a1[5];
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
}

uint64_t std::__shared_ptr_pointer<ctu::XpcJetsamAssertion::Activity *,ctu::XpcJetsamAssertion::createActivity(std::string)::$_0,std::allocator<ctu::XpcJetsamAssertion::Activity>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }

  else
  {
    return 0LL;
  }

void **ctu::SharedRef<os_transaction_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_transaction_s>::~SharedRef( void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    os_release(v2);
  }
  return a1;
}

void ctu::ConnectionRestResource::~ConnectionRestResource(ctu::ConnectionRestResource *this)
{
  *(void *)this = off_189E97CF0;
  boost::container::vector<std::shared_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::shared_ptr<ctu::RestResourceConnection>>,void>::~vector((uint64_t)this + 8);
}

{
  *(void *)this = off_189E97CF0;
  boost::container::vector<std::shared_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::shared_ptr<ctu::RestResourceConnection>>,void>::~vector((uint64_t)this + 8);
}

{
  *(void *)this = off_189E97CF0;
  boost::container::vector<std::shared_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::shared_ptr<ctu::RestResourceConnection>>,void>::~vector((uint64_t)this + 8);
  operator delete(this);
}

uint64_t ctu::ConnectionRestResource::handleDroppedConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ctu::ConnectionRestResource::eraseConnection(a1, a4);
}

uint64_t ctu::ConnectionRestResource::eraseConnection(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(result + 8);
    uint64_t v4 = result + 16 * v2;
    unint64_t v5 = *(void *)(a2 + 8);
    do
    {
      unint64_t v6 = v2 >> 1;
      uint64_t v7 = result + 16 * (v2 >> 1);
      unint64_t v8 = *(void *)(v7 + 8);
      uint64_t v9 = v7 + 16;
      v2 += ~(v2 >> 1);
      if (v8 >= v5) {
        unint64_t v2 = v6;
      }
      else {
        uint64_t result = v9;
      }
    }

    while (v2);
    if (result != v4 && v5 >= *(void *)(result + 8))
    {
      if (v4 == result + 16)
      {
        uint64_t v10 = result;
      }

      else
      {
        do
        {
          uint64_t v10 = result + 16;
          uint64_t v11 = std::shared_ptr<ctu::rest::RestConnectorDelegateBase>::operator=[abi:ne180100]<ctu::rest::RestConnectorDelegate<ctu::RestModuleState>,void>( result,  (__int128 *)(result + 16))
              + 32;
          uint64_t result = v10;
        }

        while (v11 != v4);
      }

      BOOL v12 = v4 == v10;
      uint64_t v13 = (v4 - v10) >> 4;
      if (!v12)
      {
        uint64_t v14 = v13;
        do
        {
          --v14;
          uint64_t result = std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v10);
          v10 += 16LL;
        }

        while (v14);
      }

      *(void *)(v3 + 16) -= v13;
    }
  }

  return result;
}

uint64_t ctu::ConnectionRestResource::getAllConnectionsForXpcConnection@<X0>( uint64_t this@<X0>, const xpc::connection *a2@<X1>, char **a3@<X8>)
{
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  uint64_t v4 = *(void *)(this + 16);
  if (v4)
  {
    unint64_t v6 = *(void **)(this + 8);
    uint64_t v7 = &v6[2 * v4];
    do
    {
      this = (*(uint64_t (**)(void, void))(*(void *)*v6 + 32LL))(*v6, *(void *)a2);
      if ((_DWORD)this)
      {
        unint64_t v8 = a3[1];
        unint64_t v9 = (unint64_t)a3[2];
        if ((unint64_t)v8 >= v9)
        {
          uint64_t v14 = (v8 - *a3) >> 4;
          unint64_t v15 = v14 + 1;
          uint64_t v16 = v9 - (void)*a3;
          if (v16 >> 3 > v15) {
            unint64_t v15 = v16 >> 3;
          }
          else {
            unint64_t v17 = v15;
          }
          uint64_t v33 = a3 + 2;
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::RestResourceConnection>>>( (uint64_t)(a3 + 2),  v17);
          unint64_t v20 = &v18[16 * v14];
          __int128 v21 = *(_OWORD *)v6;
          *(_OWORD *)unint64_t v20 = *(_OWORD *)v6;
          if (*((void *)&v21 + 1))
          {
            unint64_t v22 = (unint64_t *)(*((void *)&v21 + 1) + 8LL);
            do
              unint64_t v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }

          xpc_object_t v25 = *a3;
          unint64_t v24 = a3[1];
          if (v24 == *a3)
          {
            int64x2_t v28 = vdupq_n_s64((unint64_t)v24);
            uint64_t v26 = &v18[16 * v14];
          }

          else
          {
            uint64_t v26 = &v18[16 * v14];
            do
            {
              __int128 v27 = *((_OWORD *)v24 - 1);
              v24 -= 16;
              *((_OWORD *)v26 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v27;
              v26 -= 16;
              *(void *)unint64_t v24 = 0LL;
              *((void *)v24 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0LL;
            }

            while (v24 != v25);
            int64x2_t v28 = *(int64x2_t *)a3;
          }

          uint64_t v13 = v20 + 16;
          *a3 = v26;
          a3[1] = v20 + 16;
          int64x2_t v31 = v28;
          unint64_t v29 = a3[2];
          a3[2] = &v18[16 * v19];
          uint64_t v32 = v29;
          uint64_t v30 = v28.i64[0];
          this = std::__split_buffer<std::shared_ptr<ctu::RestResourceConnection>>::~__split_buffer((uint64_t)&v30);
        }

        else
        {
          *(void *)unint64_t v8 = *v6;
          uint64_t v10 = v6[1];
          *((void *)v8 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v10;
          if (v10)
          {
            uint64_t v11 = (unint64_t *)(v10 + 8);
            do
              unint64_t v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
          }

          uint64_t v13 = v8 + 16;
        }

        a3[1] = v13;
      }

      v6 += 2;
    }

    while (v6 != v7);
  }

  return this;
}

void sub_1866159F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t ctu::ConnectionRestResource::handleMessage( ctu::ConnectionRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  uint64_t v6 = *((void *)a3 + 3);
  if (v6 != 1)
  {
    if (!v6) {
      return ctu::RestResource::handleMessage(this, a2, a3);
    }
    return 1LL;
  }

  if (**((_BYTE **)a3 + 2) != 42) {
    return 1LL;
  }
  (*(void (**)(xpc_object_t *__return_ptr, ctu::RestResourceContext *))(*(void *)a2 + 16LL))(&object, a2);
  int v9 = ctu::rest::asOperation(&object, v8);
  xpc_release(object);
  if (v9 == 2) {
    return (*(uint64_t (**)(ctu::ConnectionRestResource *, ctu::RestResourceContext *, const ctu::PathView *))(*(void *)this + 40LL))( this,  a2,  a3);
  }
  else {
    return 0LL;
  }
}

void sub_186615AE4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t ctu::ConnectionRestResource::handleRestMessage_GET( ctu::ConnectionRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  xpc_object_t v5 = xpc_array_create(0LL, 0LL);
  if (v5 || (xpc_object_t v5 = xpc_null_create()) != 0LL)
  {
    if (MEMORY[0x186E3CD4C](v5) == MEMORY[0x1895F9220])
    {
      xpc_retain(v5);
      xpc_object_t v6 = v5;
    }

    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }

  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v5 = 0LL;
  }

  xpc_release(v5);
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    unint64_t v8 = (uint64_t *)*((void *)this + 1);
    uint64_t v9 = 16 * v7;
    do
    {
      uint64_t v10 = *v8;
      if (*(char *)(*v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external( &__p,  *(const std::string::value_type **)(v10 + 8),  *(void *)(v10 + 16));
      }

      else
      {
        __int128 v11 = *(_OWORD *)(v10 + 8);
        __p.__r_.__value_.__l.__cap_ = *(void *)(v10 + 24);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      }

      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::__split_buffer<std::string>::pointer p_p = &__p;
      }
      else {
        std::__split_buffer<std::string>::pointer p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v13 = xpc_string_create((const char *)p_p);
      if (!v13) {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_array_append_value(v6, v13);
      xpc_release(v13);
      v8 += 2;
      v9 -= 16LL;
    }

    while (v9);
  }

  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, std::string *))(*(void *)a2 + 32LL))(a2, &__p);
  xpc_release(__p.__r_.__value_.__l.__data_);
  xpc_release(v6);
  return 1LL;
}

void sub_186615C80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t ctu::ConnectionRestResource::handleRestMessage_POP( ctu::ConnectionRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  (**(void (***)(uint64_t *__return_ptr, ctu::RestResourceContext *))a2)(&v8, a2);
  ctu::ConnectionRestResource::eraseConnection((uint64_t)this, (uint64_t)&v8);
  uint64_t v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return 1LL;
}

uint64_t ctu::ConnectionRestResource::handleRestMessage_PUSH( ctu::ConnectionRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  *(void *)&__int128 v37 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v37 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  (**(void (***)(__int128 *__return_ptr, ctu::RestResourceContext *))a2)(&v37, a2);
  uint64_t v6 = *((void *)this + 1);
  uint64_t v5 = *((void *)this + 2);
  uint64_t v4 = (char *)this + 8;
  uint64_t v7 = (void *)(v6 + 16 * v5);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)&v37 + 1);
  uint64_t v9 = v6;
  if (v5)
  {
    uint64_t v9 = *((void *)this + 1);
    unint64_t v10 = *((void *)this + 2);
    do
    {
      unint64_t v11 = v10 >> 1;
      uint64_t v12 = v9 + 16 * (v10 >> 1);
      unint64_t v13 = *(void *)(v12 + 8);
      uint64_t v14 = v12 + 16;
      v10 += ~(v10 >> 1);
      if (v13 >= *((void *)&v37 + 1)) {
        unint64_t v10 = v11;
      }
      else {
        uint64_t v9 = v14;
      }
    }

    while (v10);
    if ((void *)v9 == v7)
    {
      uint64_t v15 = v37;
      __int128 v38 = v37;
      __int128 v37 = 0uLL;
      uint64_t v9 = v6 + 16 * v5;
      goto LABEL_19;
    }

    if (*((void *)&v37 + 1) >= *(void *)(v9 + 8)) {
      goto LABEL_49;
    }
  }

  uint64_t v15 = v37;
  __int128 v38 = v37;
  __int128 v37 = 0uLL;
  if (v7 != (void *)v9 && *(void *)(v9 + 8) <= (unint64_t)v8)
  {
    unint64_t v16 = ((uint64_t)v7 - v9) >> 4;
    do
    {
      unint64_t v17 = v16 >> 1;
      unint64_t v18 = v9 + 16 * (v16 >> 1);
      unint64_t v19 = *(void *)(v18 + 8);
      uint64_t v20 = v18 + 16;
      v16 += ~(v16 >> 1);
      else {
        uint64_t v9 = v20;
      }
    }

    while (v16);
    if ((void *)v9 == v7)
    {
      uint64_t v9 = v6 + 16 * v5;
      goto LABEL_36;
    }

    goto LABEL_33;
  }

void sub_186616050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ctu::ConnectionRestResource::pingAllConnections( ctu::ConnectionRestResource *this@<X0>, dispatch_group_s **a2@<X8>)
{
  dispatch_group_t v4 = dispatch_group_create();
  uint64_t v5 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
    dispatch_release(v5);
  }

  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::rest::createPingMessage(&object);
  uint64_t v6 = *((void *)this + 2);
  if (v6)
  {
    uint64_t v7 = (uint64_t *)*((void *)this + 1);
    uint64_t v8 = 16 * v6;
    uint64_t v9 = MEMORY[0x1895F87A8];
    do
    {
      uint64_t v10 = *v7;
      xpc_object_t v14 = object;
      if (object) {
        xpc_retain(object);
      }
      else {
        xpc_object_t v14 = xpc_null_create();
      }
      dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
      v12[0] = v9;
      v12[1] = 1174405120LL;
      uint64_t v12[2] = ___ZNK3ctu22ConnectionRestResource18pingAllConnectionsEv_block_invoke;
      uint64_t v12[3] = &__block_descriptor_tmp_22;
      dispatch_group_t group = v5;
      if (v5)
      {
        dispatch_retain(v5);
        if (group) {
          dispatch_group_enter(group);
        }
      }

      (*(void (**)(uint64_t, xpc_object_t *, dispatch_queue_global_t, void *))(*(void *)v10 + 24LL))( v10,  &v14,  global_queue,  v12);
      xpc_release(v14);
      xpc_object_t v14 = 0LL;
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }

      v7 += 2;
      v8 -= 16LL;
    }

    while (v8);
  }

  *a2 = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  xpc_release(object);
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }

void sub_186616200( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group, xpc_object_t object, xpc_object_t a16)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }

  xpc_release(object);
  xpc_release(a16);
  if (v16)
  {
    dispatch_group_leave(v16);
    dispatch_release(v16);
  }

  _Unwind_Resume(a1);
}

uint64_t boost::container::vector<std::shared_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::shared_ptr<ctu::RestResourceConnection>>,void>::~vector( uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void **)a1;
    do
    {
      --v2;
      uint64_t v3 = (void *)(std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v3) + 16);
    }

    while (v2);
  }

  if (*(void *)(a1 + 16)) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void boost::container::vector<std::shared_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::shared_ptr<ctu::RestResourceConnection>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<std::shared_ptr<ctu::RestResourceConnection>>,std::shared_ptr<ctu::RestResourceConnection>*,std::shared_ptr<ctu::RestResourceConnection>>>( void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)a2 + 2);
  unint64_t v5 = 0x7FFFFFFFFFFFFFFLL;
  unint64_t v6 = *((void *)a2 + 1) + 1LL;
  if (0x7FFFFFFFFFFFFFFLL - v4 < v6 - v4) {
    goto LABEL_24;
  }
  unint64_t v7 = v4 >> 61;
  unint64_t v8 = 8 * v4;
  if (v7 > 4) {
    uint64_t v9 = -1LL;
  }
  else {
    uint64_t v9 = v8;
  }
  unint64_t v10 = v8 / 5;
  if (v7) {
    unint64_t v10 = v9;
  }
  if (v10 < 0x7FFFFFFFFFFFFFFLL) {
    unint64_t v5 = v10;
  }
  unint64_t v11 = v6 <= v5 ? v5 : *((void *)a2 + 1) + 1LL;
  if (v11 >> 59) {
LABEL_24:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  uint64_t v16 = *(void *)a2;
  unint64_t v17 = operator new(16 * v11);
  uint64_t v18 = *(void *)a2;
  uint64_t v19 = *(void *)a2 + 16LL * *((void *)a2 + 1);
  uint64_t v20 = v17;
  if (*(void *)a2 != a3)
  {
    uint64_t v21 = *(void *)a2;
    uint64_t v20 = v17;
    do
    {
      *v20++ = *(_OWORD *)v21;
      *(void *)uint64_t v21 = 0LL;
      *(void *)(v21 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
      v21 += 16LL;
    }

    while (v21 != a3);
  }

  *uint64_t v20 = *(_OWORD *)a4;
  *(void *)a4 = 0LL;
  *(void *)(a4 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  if (v19 != a3)
  {
    unint64_t v22 = v20 + 1;
    uint64_t v23 = a3;
    do
    {
      *v22++ = *(_OWORD *)v23;
      *(void *)uint64_t v23 = 0LL;
      *(void *)(v23 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
      v23 += 16LL;
    }

    while (v23 != v19);
  }

  if (v18)
  {
    for (i = *((void *)a2 + 1); i; uint64_t v18 = std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v18) + 16)
      --i;
    operator delete(*(void **)a2);
  }

  uint64_t v25 = *((void *)a2 + 1) + 1LL;
  *(void *)a2 = v17;
  *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v25;
  *((void *)a2 + 2) = v11;
  *a1 = (char *)v17 + a3 - v16;
}

uint64_t ctu::LoggerTree::LoggerTree(uint64_t a1, __int128 *a2)
{
  uint64_t v3 = (std::string *)(a1 + 48);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    v3->__r_.__value_.__l.__cap_ = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }

  *(_WORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0LL;
  return a1;
}

void sub_186616468( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = v10 + 3;
  std::vector<std::weak_ptr<ctu::TrackedLogger>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v10;
  std::vector<ctu::LoggerTree>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void ctu::LoggerTree::~LoggerTree(ctu::LoggerTree *this)
{
  uint64_t v2 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0LL;
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 24);
  std::vector<std::weak_ptr<ctu::TrackedLogger>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)this;
  std::vector<ctu::LoggerTree>::__destroy_vector::operator()[abi:ne180100](&v3);
}

__n128 ctu::LoggerTree::LoggerTree(__n128 *a1, uint64_t a2)
{
  a1->n128_u64[0] = 0LL;
  a1->n128_u64[1] = 0LL;
  a1[1].n128_u64[0] = 0LL;
  *a1 = *(__n128 *)a2;
  a1[1].n128_u64[0] = *(void *)(a2 + 16);
  *(void *)a2 = 0LL;
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  a1[1].n128_u64[1] = 0LL;
  a1[2].n128_u64[0] = 0LL;
  a1[2].n128_u64[1] = 0LL;
  *(__n128 *)((char *)a1 + memset(&context, 0, 24) = *(__n128 *)(a2 + 24);
  a1[2].n128_u64[1] = *(void *)(a2 + 40);
  *(void *)(a2 + memset(&context, 0, 24) = 0LL;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0LL;
  __n128 result = *(__n128 *)(a2 + 48);
  a1[4].n128_u64[0] = *(void *)(a2 + 64);
  a1[3] = result;
  *(void *)(a2 + ++*(_DWORD *)(this + 56) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = 0LL;
  a1[4].n128_u16[4] = *(_WORD *)(a2 + 72);
  unint64_t v3 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0LL;
  a1[5].n128_u64[0] = v3;
  return result;
}

char **ctu::LoggerTree::operator=(char **a1, uint64_t a2)
{
  __int128 v4 = *a1;
  if (*a1)
  {
    unint64_t v5 = a1[1];
    unint64_t v6 = v4;
    if (v5 != v4)
    {
      do
        ctu::LoggerTree::~LoggerTree((ctu::LoggerTree *)(v5 - 88));
      while (v5 != v4);
      unint64_t v6 = *a1;
    }

    a1[1] = v4;
    operator delete(v6);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(char **)(a2 + 16);
  *(void *)a2 = 0LL;
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  unint64_t v7 = (void **)(a1 + 3);
  if (a1[3])
  {
    std::vector<std::weak_ptr<ctu::TrackedLogger>>::__clear[abi:ne180100]((uint64_t *)a1 + 3);
    operator delete(*v7);
    *unint64_t v7 = 0LL;
    a1[4] = 0LL;
    a1[5] = 0LL;
  }

  *(_OWORD *)(a1 + ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(char **)(a2 + 40);
  *(void *)(a2 + memset(&context, 0, 24) = 0LL;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0LL;
  unint64_t v8 = (void **)(a1 + 6);
  __int128 v9 = *(_OWORD *)(a2 + 48);
  a1[8] = *(char **)(a2 + 64);
  *(_OWORD *)unint64_t v8 = v9;
  *(_BYTE *)(a2 + 7ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *(_BYTE *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = 0;
  *((_WORD *)a1 + 36) = *(_WORD *)(a2 + 72);
  unint64_t v10 = *(char **)(a2 + 80);
  *(void *)(a2 + 80) = 0LL;
  unint64_t v11 = a1[10];
  a1[10] = v10;
  if (v11) {
    operator delete(v11);
  }
  return a1;
}

uint64_t ctu::LoggerTree::tidyUp(ctu::LoggerTree *this)
{
  __int128 v4 = (uint64_t *)*((void *)this + 3);
  uint64_t v2 = (uint64_t *)*((void *)this + 4);
  unint64_t v3 = (char *)this + 24;
  if (v4 != v2)
  {
    unint64_t v5 = v2 - 2;
    for (uint64_t i = (char *)*((void *)this + 3); ; i += 16)
    {
      uint64_t v7 = v4[1];
      if (!v7 || *(void *)(v7 + 8) == -1LL) {
        break;
      }
      v4 += 2;
      if (v4 == v2)
      {
        __int128 v4 = (uint64_t *)*((void *)this + 4);
        return std::vector<std::weak_ptr<ctu::TrackedLogger>>::erase((uint64_t)v3, (uint64_t)v4, *((__int128 **)this + 4));
      }
    }

    if (v4 != v5)
    {
      uint64_t v8 = (char *)v5 - i;
      __int128 v9 = v5;
      while (1)
      {
        uint64_t v10 = v9[1];
        if (v10)
        {
          if (*(void *)(v10 + 8) != -1LL) {
            break;
          }
        }

        v9 -= 2;
        v5 -= 2;
        v8 -= 16LL;
        if (v4 == v9) {
          return std::vector<std::weak_ptr<ctu::TrackedLogger>>::erase( (uint64_t)v3,  (uint64_t)v4,  *((__int128 **)this + 4));
        }
      }

      uint64_t v11 = (v8 >> 4) + 1;
      if (v8 < 33)
      {
        uint64_t v12 = 0LL;
        uint64_t v14 = 0LL;
      }

      else
      {
        uint64_t v12 = std::get_temporary_buffer[abi:ne180100]<std::weak_ptr<ctu::TrackedLogger>>((v8 >> 4) + 1);
        uint64_t v14 = v13;
      }

      __int128 v4 = std::__stable_partition_impl<std::_ClassicAlgPolicy,ctu::LoggerTree::tidyUp(void)::$_0 &,std::__wrap_iter<std::weak_ptr<ctu::TrackedLogger> *>,long,std::pair<std::weak_ptr<ctu::TrackedLogger> *,long>>( i,  v5,  v11,  v12,  v14);
      if (v12) {
        operator delete(v12);
      }
    }
  }

  return std::vector<std::weak_ptr<ctu::TrackedLogger>>::erase((uint64_t)v3, (uint64_t)v4, *((__int128 **)this + 4));
}

uint64_t std::vector<std::weak_ptr<ctu::TrackedLogger>>::erase(uint64_t a1, uint64_t a2, __int128 *a3)
{
  if ((__int128 *)a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<ctu::TrackedLogger> *,std::weak_ptr<ctu::TrackedLogger> *,std::weak_ptr<ctu::TrackedLogger> *>( (uint64_t)&v10,  a3,  *(__int128 **)(a1 + 8),  a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v7 - 8);
        if (v8) {
          std::__shared_weak_count::__release_weak(v8);
        }
        v7 -= 16LL;
      }

      while (v7 != v6);
    }

    *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = v6;
  }

  return a2;
}

uint64_t ctu::LoggerTree::insertAt(uint64_t a1, __int128 *a2, void *a3)
{
  uint64_t v4 = ctu::LoggerTree::getOrCreateFromPath(a1, a2);
  ctu::LoggerTree::tidyUp((ctu::LoggerTree *)v4);
  __int128 v5 = *(_OWORD *)a3;
  uint64_t v6 = a3[1];
  if (v6)
  {
    uint64_t v7 = (unint64_t *)(v6 + 16);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  unint64_t v9 = *(void *)(v4 + 40);
  char v10 = *(void **)(v4 + 32);
  if ((unint64_t)v10 >= v9)
  {
    __int128 v28 = v5;
    uint64_t v12 = *(void *)(v4 + 24);
    uint64_t v13 = ((uint64_t)v10 - v12) >> 4;
    unint64_t v14 = v13 + 1;
    uint64_t v15 = v9 - v12;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    else {
      unint64_t v16 = v14;
    }
    uint64_t v32 = v4 + 40;
    unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::RestResourceConnection>>>( v4 + 40,  v16);
    uint64_t v19 = &v17[16 * v13];
    *(_OWORD *)uint64_t v19 = v28;
    uint64_t v11 = v19 + 16;
    uint64_t v21 = *(void **)(v4 + 24);
    uint64_t v20 = *(void **)(v4 + 32);
    if (v20 == v21)
    {
      int64x2_t v23 = vdupq_n_s64((unint64_t)v20);
    }

    else
    {
      do
      {
        __int128 v22 = *((_OWORD *)v20 - 1);
        v20 -= 2;
        *((_OWORD *)v19 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v22;
        v19 -= 16;
        *uint64_t v20 = 0LL;
        v20[1] = 0LL;
      }

      while (v20 != v21);
      int64x2_t v23 = *(int64x2_t *)(v4 + 24);
    }

    *(void *)(v4 + memset(&context, 0, 24) = v19;
    *(void *)(v4 + 32) = v11;
    int64x2_t v30 = v23;
    uint64_t v24 = *(void *)(v4 + 40);
    *(void *)(v4 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = &v17[16 * v18];
    uint64_t v31 = v24;
    uint64_t v29 = v23.i64[0];
    std::__split_buffer<std::weak_ptr<ctu::TrackedLogger>>::~__split_buffer((void **)&v29);
  }

  else
  {
    void *v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v10 + 2;
    *(void *)(v4 + 32) = v10 + 2;
  }

  *(void *)(v4 + 32) = v11;
  if (*(_BYTE *)(v4 + 72)) {
    BOOL v25 = *(unsigned __int8 *)(v4 + 73) == 255;
  }
  else {
    BOOL v25 = 1;
  }
  if (v25) {
    uint64_t v26 = *(unsigned __int8 *)(v4 + 73);
  }
  else {
    uint64_t v26 = *(unsigned __int8 *)(v4 + 72);
  }
  return (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 16LL))(*a3, v26);
}

void sub_186616968(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::LoggerTree::getOrCreateFromPath(uint64_t a1, __int128 *a2)
{
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__str_16 = v3;
  *(_OWORD *)&__str_16[16] = v3;
  __int128 __str = v3;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external( (std::string *)&__str,  *(const std::string::value_type **)a2,  *((void *)a2 + 1));
  }

  else
  {
    __int128 __str = *a2;
    *(void *)__str_16 = *((void *)a2 + 2);
  }

  std::string::basic_string[abi:ne180100]<0>(&__str_16[8], (char *)&str_10);
  while (1)
  {
    uint64_t v4 = __str_16[7];
    char v5 = __str_16[7];
    uint64_t v6 = *((void *)&__str + 1);
    size_t v7 = __str_16[7] >= 0 ? __str_16[7] : *((void *)&__str + 1);
    if (!v7) {
      break;
    }
    unint64_t v8 = __str_16[7] >= 0 ? &__str : (__int128 *)__str;
    unint64_t v9 = memchr(v8, 46, v7);
    if (!v9) {
      break;
    }
    std::string::size_type v10 = v9 - (_BYTE *)v8;
    if (v10)
    {
      if (v10 != -1LL)
      {
        std::string::basic_string( &v81,  (const std::string *)&__str,  v10 + 1,  0xFFFFFFFFFFFFFFFFLL,  (std::allocator<char> *)v95);
        if ((__str_16[31] & 0x80000000) != 0) {
          operator delete(*(void **)&__str_16[8]);
        }
        *(std::string *)&__str_16[8] = v81;
        std::string::resize((std::string *)&__str, v10, 0);
        uint64_t v4 = __str_16[7];
        uint64_t v6 = *((void *)&__str + 1);
        char v5 = __str_16[7];
      }

      break;
    }

    std::string::erase((std::string *)&__str, 0LL, 1uLL);
  }

  if (v5 >= 0) {
    uint64_t v11 = v4;
  }
  else {
    uint64_t v11 = v6;
  }
  if (v11)
  {
    uint64_t v13 = *(void *)a1;
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)a1;
    if (*(void *)a1 == v12)
    {
LABEL_41:
      if (v14 != v12)
      {
LABEL_110:
        a1 = ctu::LoggerTree::getOrCreateFromPath(v14, &__str_16[8]);
        goto LABEL_111;
      }
    }

    else
    {
      if (v5 >= 0) {
        p_str = &__str;
      }
      else {
        p_str = (__int128 *)__str;
      }
      uint64_t v14 = *(void *)a1;
      do
      {
        uint64_t v16 = *(unsigned __int8 *)(v14 + 71);
        if ((v16 & 0x80u) == 0LL) {
          uint64_t v17 = *(unsigned __int8 *)(v14 + 71);
        }
        else {
          uint64_t v17 = *(void *)(v14 + 56);
        }
        if (v17 == v11)
        {
          if ((v16 & 0x80) != 0)
          {
          }

          else
          {
            if (!*(_BYTE *)(v14 + 71)) {
              goto LABEL_41;
            }
            uint64_t v18 = 0LL;
            while (*(unsigned __int8 *)(v14 + v18 + 48) == *((unsigned __int8 *)p_str + v18))
            {
              if (v16 == ++v18) {
                goto LABEL_41;
              }
            }
          }
        }

        v14 += 88LL;
      }

      while (v14 != v12);
    }

    if (v13 != v12)
    {
      unint64_t v19 = 0x2E8BA2E8BA2E8BA3LL * ((v12 - v13) >> 3);
      do
      {
        unint64_t v20 = v13 + 88 * (v19 >> 1);
        int v21 = (char)std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( (void *)(v20 + 48),  (void **)&__str);
        if (v21 >= 0) {
          v19 >>= 1;
        }
        else {
          v19 += ~(v19 >> 1);
        }
        if (v21 < 0) {
          uint64_t v13 = v20 + 88;
        }
      }

      while (v19);
      char v5 = __str_16[7];
      uint64_t v12 = v13;
    }

    if (v5 < 0)
    {
      std::string::__init_copy_ctor_external( &v80,  (const std::string::value_type *)__str,  *((std::string::size_type *)&__str + 1));
    }

    else
    {
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = __str;
      v80.__r_.__value_.__l.__cap_ = *(void *)__str_16;
    }

    ctu::LoggerTree::LoggerTree((uint64_t)&v81, (__int128 *)&v80);
    uint64_t v22 = *(void *)a1;
    unint64_t v23 = *(void *)(a1 + 8);
    uint64_t v24 = v12 - *(void *)a1;
    uint64_t v25 = v24 / 88;
    uint64_t v14 = *(void *)a1 + 88 * (v24 / 88);
    unint64_t v26 = *(void *)(a1 + 16);
    if (v23 >= v26)
    {
      unint64_t v32 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v23 - v22) >> 3) + 1;
      if (v32 > 0x2E8BA2E8BA2E8BALL) {
        std::vector<ctu::LoggerTree>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v33 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v26 - v22) >> 3);
      if (2 * v33 > v32) {
        unint64_t v32 = 2 * v33;
      }
      if (v33 >= 0x1745D1745D1745DLL) {
        unint64_t v34 = 0x2E8BA2E8BA2E8BALL;
      }
      else {
        unint64_t v34 = v32;
      }
      uint64_t v94 = a1 + 16;
      if (v34) {
        unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ctu::LoggerTree>>(v34);
      }
      else {
        uint64_t v35 = 0LL;
      }
      unint64_t v39 = v34 + 88 * v25;
      unint64_t v90 = v34;
      std::string v91 = (__n128 *)v39;
      uint64_t v92 = v39;
      unint64_t v93 = v34 + 88 * v35;
      if (v25 == v35)
      {
        if (v24 < 1)
        {
          if (v12 == v22) {
            unint64_t v43 = 1LL;
          }
          else {
            unint64_t v43 = 2 * v25;
          }
          v95[4] = a1 + 16;
          __int128 v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctu::LoggerTree>>(v43);
          xpc_object_t v46 = v44;
          dispatch_object_t v47 = (__n128 *)&v44[88 * (v43 >> 2)];
          uint64_t v48 = &v44[88 * v45];
          std::__split_buffer<std::string>::pointer v49 = v91;
          uint64_t v50 = v92;
          unint64_t v51 = v91;
          uint64_t v52 = (char *)v47;
          if ((__n128 *)v92 != v91)
          {
            unint64_t v77 = &v44[88 * v45];
            uint64_t v53 = (v92 - (uint64_t)v91) / 88;
            uint64_t v52 = (char *)v47 + 88 * v53;
            uint64_t v54 = 88 * v53;
            uint64_t v55 = (__n128 *)&v44[88 * (v43 >> 2)];
            uint64_t v56 = (uint64_t)v91;
            do
            {
              ctu::LoggerTree::LoggerTree(v55, v56);
              uint64_t v55 = (__n128 *)(v57 + 88);
              v56 += 88LL;
              v54 -= 88LL;
            }

            while (v54);
            unint64_t v51 = (__n128 *)v50;
            uint64_t v48 = v77;
          }

          unint64_t v58 = v90;
          unint64_t v59 = v93;
          unint64_t v90 = (unint64_t)v46;
          std::string v91 = v47;
          v95[0] = v58;
          v95[1] = v49;
          uint64_t v92 = (uint64_t)v52;
          unint64_t v93 = (unint64_t)v48;
          v95[2] = v51;
          v95[3] = v59;
          std::__split_buffer<ctu::LoggerTree>::~__split_buffer((uint64_t)v95);
          unint64_t v39 = v92;
        }

        else
        {
          uint64_t v40 = v25 + 2;
          if (v25 >= -1) {
            uint64_t v40 = v25 + 1;
          }
          v39 -= 88 * (v40 >> 1);
          std::string v91 = (__n128 *)v39;
          uint64_t v92 = v39;
        }
      }

      *(void *)(v39 + 16) = 0LL;
      *(void *)(v39 + memset(&context, 0, 24) = 0LL;
      *(void *)unint64_t v39 = 0LL;
      *(void *)(v39 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
      *(std::string *)unint64_t v39 = v81;
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = 0uLL;
      *(void *)(v39 + 32) = 0LL;
      *(void *)(v39 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0LL;
      *(_OWORD *)(v39 + memset(&context, 0, 24) = v82;
      *(void *)(v39 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = v83;
      v81.__r_.__value_.__l.__cap_ = 0LL;
      __int128 v82 = 0uLL;
      uint64_t v83 = 0LL;
      __int128 v60 = v84;
      *(void *)(v39 + 64) = v85;
      *(_OWORD *)(v39 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = v60;
      __int128 v84 = 0uLL;
      *(_WORD *)(v39 + 72) = v86;
      uint64_t v61 = v87;
      uint64_t v85 = 0LL;
      uint64_t v87 = 0LL;
      *(void *)(v39 + 80) = v61;
      uint64_t v62 = (uint64_t)v91;
      unint64_t v63 = (__n128 *)(v92 + 88);
      v92 += 88LL;
      uint64_t v64 = *(void *)a1;
      if (*(void *)a1 == v14)
      {
        uint64_t v66 = v91;
      }

      else
      {
        uint64_t v65 = v14;
        uint64_t v66 = v91;
        do
        {
          uint64_t v66 = (__n128 *)((char *)v66 - 88);
          v65 -= 88LL;
          ctu::LoggerTree::LoggerTree(v66, v65);
        }

        while (v65 != v64);
        unint64_t v63 = (__n128 *)v92;
      }

      std::string v91 = v66;
      uint64_t v67 = *(void *)(a1 + 8);
      if (v67 != v14)
      {
        do
        {
          ctu::LoggerTree::LoggerTree(v63, v14);
          v14 += 88LL;
          unint64_t v63 = (__n128 *)(v68 + 88);
        }

        while (v14 != v67);
        uint64_t v66 = v91;
        uint64_t v14 = *(void *)(a1 + 8);
      }

      uint64_t v69 = *(void *)a1;
      *(void *)a1 = v66;
      *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = v63;
      unint64_t v70 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v93;
      uint64_t v92 = v14;
      unint64_t v93 = v70;
      unint64_t v90 = v69;
      std::string v91 = (__n128 *)v69;
      std::__split_buffer<ctu::LoggerTree>::~__split_buffer((uint64_t)&v90);
      uint64_t v14 = v62;
    }

    else if (v14 == v23)
    {
      *(void *)uint64_t v14 = 0LL;
      *(void *)(v14 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
      *(void *)(v14 + 16) = 0LL;
      *(std::string *)uint64_t v14 = v81;
      memset(&v81, 0, sizeof(v81));
      uint64_t v36 = v22 + 88 * v25;
      *(void *)(v36 + memset(&context, 0, 24) = 0LL;
      *(void *)(v36 + 32) = 0LL;
      *(void *)(v36 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0LL;
      *(_OWORD *)(v36 + memset(&context, 0, 24) = v82;
      *(void *)(v36 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = v83;
      __int128 v82 = 0uLL;
      uint64_t v83 = 0LL;
      __int128 v37 = v84;
      *(void *)(v36 + 64) = v85;
      *(_OWORD *)(v36 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = v37;
      uint64_t v85 = 0LL;
      __int128 v84 = 0uLL;
      *(_WORD *)(v36 + 72) = v86;
      uint64_t v38 = v87;
      uint64_t v87 = 0LL;
      *(void *)(v36 + 80) = v38;
      *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = v14 + 88;
    }

    else
    {
      uint64_t v27 = v14 + 88;
      __int128 v28 = (char **)(v23 - 88);
      if (v23 < 0x58)
      {
        int64x2_t v30 = *(__n128 **)(a1 + 8);
      }

      else
      {
        unint64_t v29 = v23 - 88;
        int64x2_t v30 = *(__n128 **)(a1 + 8);
        do
        {
          ctu::LoggerTree::LoggerTree(v30, v29);
          v29 += 88LL;
          int64x2_t v30 = (__n128 *)(v31 + 88);
        }

        while (v29 < v23);
      }

      *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = v30;
      if (v23 != v27)
      {
        uint64_t v41 = 8 * ((uint64_t)(v23 - v27) >> 3);
        uint64_t v42 = v22 + 88 * v25 - 88;
        do
        {
          ctu::LoggerTree::operator=(v28, v42 + v41);
          v28 -= 11;
          v41 -= 88LL;
        }

        while (v41);
      }

      ctu::LoggerTree::operator=((char **)v14, (uint64_t)&v81);
    }

    ctu::LoggerTree::~LoggerTree((ctu::LoggerTree *)&v81);
    if (*(_BYTE *)(a1 + 72)) {
      BOOL v71 = *(unsigned __int8 *)(a1 + 73) == 255;
    }
    else {
      BOOL v71 = 1;
    }
    if (v71) {
      int v72 = *(unsigned __int8 *)(a1 + 73);
    }
    else {
      int v72 = *(unsigned __int8 *)(a1 + 72);
    }
    ctu::LoggerTree::updateParentLogLevel(v14, v72);
    ctu::LoggerTree::commitConfigUpdate(&v78, (ctu::LoggerTree *)v14);
    uint64_t v73 = v79;
    if (v79)
    {
      p_shared_owners = (unint64_t *)&v79->__shared_owners_;
      do
        unint64_t v75 = __ldaxr(p_shared_owners);
      while (__stlxr(v75 - 1, p_shared_owners));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }

    goto LABEL_110;
  }

LABEL_111:
  if ((__str_16[31] & 0x80000000) != 0) {
    operator delete(*(void **)&__str_16[8]);
  }
  if ((__str_16[7] & 0x80000000) != 0) {
    operator delete((void *)__str);
  }
  return a1;
}

void sub_186617098( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::pair<std::string,std::string>::~pair((uint64_t)&a32);
  _Unwind_Resume(a1);
}

char *ctu::LoggerTree::updateParentLogLevel(uint64_t a1, int a2)
{
  __n128 result = *(char **)(a1 + 80);
  uint64_t v4 = (unsigned __int8 *)(a1 + 73);
  if (result) {
    uint64_t v4 = (unsigned __int8 *)(result + 1);
  }
  if (*v4 != a2)
  {
    char v5 = a2;
    if (!result)
    {
      __n128 result = (char *)operator new(2uLL);
      *(void *)(a1 + 80) = result;
      *(_WORD *)__n128 result = *(_WORD *)(a1 + 72);
    }

    result[1] = v5;
  }

  return result;
}

void ctu::LoggerTree::commitConfigUpdate(uint64_t *__return_ptr a1@<X8>, ctu::LoggerTree *this@<X0>)
{
  uint64_t v4 = (char *)operator new(0x30uLL);
  *((void *)v4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0LL;
  *((void *)v4 + 2) = 0LL;
  *((void *)v4 + ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 0LL;
  *(void *)uint64_t v4 = off_189E97DD0;
  *((void *)v4 + 4) = 0LL;
  *((void *)v4 + 5) = 0LL;
  size_t v7 = v4 + 24;
  unint64_t v8 = v4;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_10);
  ctu::LoggerTree::appendLevels((const std::string *)this, (const void **)__p, (int64x2_t *)(v4 + 24));
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = (uint64_t)(v4 + 24);
  a1[1] = (uint64_t)v4;
}

void sub_1866171FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ctu::LoggerTree::updateLogLevels(uint64_t a1, void *a2)
{
  if (MEMORY[0x186E3CD4C](*a2) == MEMORY[0x1895F9250])
  {
    uint64_t v12 = 0LL;
    uint64_t v13 = &v12;
    uint64_t v14 = 0x4002000000LL;
    uint64_t v15 = __Block_byref_object_copy_;
    uint64_t v16 = __Block_byref_object_dispose_;
    v18[0] = 0LL;
    v18[1] = 0LL;
    uint64_t v17 = v18;
    uint64_t v4 = (void *)*a2;
    applier[0] = MEMORY[0x1895F87A8];
    applier[1] = 1107296256LL;
    applier[2] = ___ZN3ctu10LoggerTree15updateLogLevelsEN3xpc4dictE_block_invoke;
    applier[3] = &__block_descriptor_tmp_23;
    applier[4] = &v12;
    xpc_dictionary_apply(v4, applier);
    char v5 = (__int128 *)v13[5];
    char v6 = (__int128 *)(v13 + 6);
    if (v5 != (__int128 *)(v13 + 6))
    {
      do
      {
        uint64_t v7 = ctu::LoggerTree::getOrCreateFromPath(a1, v5 + 2);
        ctu::LoggerTree::updateLocalLogLevel(v7, *((unsigned __int8 *)v5 + 56));
        unint64_t v8 = (__int128 *)*((void *)v5 + 1);
        if (v8)
        {
          do
          {
            unint64_t v9 = v8;
            unint64_t v8 = *(__int128 **)v8;
          }

          while (v8);
        }

        else
        {
          do
          {
            unint64_t v9 = (__int128 *)*((void *)v5 + 2);
            BOOL v10 = *(void *)v9 == (void)v5;
            char v5 = v9;
          }

          while (!v10);
        }

        char v5 = v9;
      }

      while (v9 != v6);
    }

    _Block_object_dispose(&v12, 8);
    std::__tree<std::__value_type<std::string,ctu::LogLevel>,std::__map_value_compare<std::string,std::__value_type<std::string,ctu::LogLevel>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ctu::LogLevel>>>::destroy( (uint64_t)&v17,  v18[0]);
  }

void sub_18661735C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char *a21)
{
}

void *__Block_byref_object_copy_(void *result, void *a2)
{
  result[5] = a2[5];
  uint64_t v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  uint64_t v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    *uint64_t v2 = 0LL;
    a2[7] = 0LL;
  }

  else
  {
    result[5] = v4;
  }

  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

uint64_t ___ZN3ctu10LoggerTree15updateLogLevelsEN3xpc4dictE_block_invoke( uint64_t a1, char *a2, xpc_object_t object)
{
  xpc_object_t objecta = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t objecta = xpc_null_create();
  }
  char v5 = xpc::dyn_cast_or_default(&objecta, 0LL);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  unint64_t v8 = (uint64_t **)(v6 + 48);
  uint64_t v7 = *(uint64_t **)(v6 + 48);
  if (!v7)
  {
    unint64_t v9 = (uint64_t **)(v6 + 48);
LABEL_12:
    uint64_t v11 = (uint64_t *)operator new(0x40uLL);
    void v11[6] = v16;
    *((_OWORD *)v11 + 2) = *(_OWORD *)__p;
    __p[1] = 0LL;
    uint64_t v16 = 0LL;
    __p[0] = 0LL;
    *((_BYTE *)v11 + ++*(_DWORD *)(this + 56) = 0;
    *uint64_t v11 = 0LL;
    v11[1] = 0LL;
    _OWORD v11[2] = (uint64_t)v9;
    __int128 *v8 = v11;
    uint64_t v12 = **(void **)(v6 + 40);
    uint64_t v13 = v11;
    if (v12)
    {
      *(void *)(v6 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = v12;
      uint64_t v13 = *v8;
    }

    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 48), v13);
    ++*(void *)(v6 + 56);
    goto LABEL_15;
  }

  while (1)
  {
    while (1)
    {
      unint64_t v9 = (uint64_t **)v7;
      BOOL v10 = v7 + 4;
      uint64_t v7 = *v9;
      unint64_t v8 = v9;
      if (!*v9) {
        goto LABEL_12;
      }
    }

    unint64_t v8 = v9 + 1;
    uint64_t v7 = v9[1];
    if (!v7) {
      goto LABEL_12;
    }
  }

  uint64_t v11 = *v8;
  if (!*v8) {
    goto LABEL_12;
  }
LABEL_15:
  *((_BYTE *)v11 + ++*(_DWORD *)(this + 56) = v5;
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(objecta);
  return 1LL;
}

void sub_186617534( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32r(uint64_t a1, uint64_t a2)
{
}

void __destroy_helper_block_e8_32r(uint64_t a1)
{
}

unsigned __int8 *ctu::LoggerTree::updateLocalLogLevel(uint64_t a1, int a2)
{
  __n128 result = *(unsigned __int8 **)(a1 + 80);
  uint64_t v4 = (unsigned __int8 *)(a1 + 72);
  if (result) {
    uint64_t v4 = result;
  }
  if (*v4 != a2)
  {
    unsigned __int8 v5 = a2;
    if (!result)
    {
      __n128 result = (unsigned __int8 *)operator new(2uLL);
      *(void *)(a1 + 80) = result;
      *(_WORD *)__n128 result = *(_WORD *)(a1 + 72);
    }

    unsigned __int8 *result = v5;
  }

  return result;
}

void ctu::LoggerTree::appendLevels(const std::string *a1, const void **a2, int64x2_t *a3)
{
  _OWORD v38[2] = *MEMORY[0x1895F89C0];
  int v5 = a1[3].__r_.__value_.__s.__data_[0];
  memset(&__p, 0, sizeof(__p));
  else {
    size_t v6 = (size_t)a2[1];
  }
  if (!v6)
  {
    if ((char)a1[2].__r_.__value_.__s.__size_ < 0)
    {
      if (!a1[2].__r_.__value_.__l.__size_)
      {
LABEL_22:
      }
    }

    else if (!a1[2].__r_.__value_.__s.__size_)
    {
      goto LABEL_22;
    }

    std::string::operator=(&__p, a1 + 2);
    goto LABEL_28;
  }

  memset(&v35, 170, sizeof(v35));
  unint64_t v8 = &v35;
  std::string::basic_string[abi:ne180100]((uint64_t)&v35, v6 + 1);
  if ((v35.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    unint64_t v8 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  else {
    unint64_t v9 = *a2;
  }
  memmove(v8, v9, v6);
  *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v6) = 46;
  int size = (char)a1[2].__r_.__value_.__s.__size_;
  if (size >= 0) {
    int data = (const std::string::value_type *)&a1[2];
  }
  else {
    int data = a1[2].__r_.__value_.__l.__data_;
  }
  if (size >= 0) {
    std::string::size_type v12 = a1[2].__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v12 = a1[2].__r_.__value_.__l.__size_;
  }
  uint64_t v13 = std::string::append(&v35, data, v12);
  std::string::size_type v14 = v13->__r_.__value_.__r.__words[0];
  v38[0] = v13->__r_.__value_.__l.__size_;
  *(void *)((char *)v38 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v15 = v13->__r_.__value_.__s.__size_;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  __p.__r_.__value_.__r.__words[0] = v14;
  __p.__r_.__value_.__l.__size_ = v38[0];
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v38 + 7);
  __p.__r_.__value_.__s.__size_ = v15;
LABEL_28:
  if (v5)
  {
    unint64_t v17 = a3[1].u64[0];
    unint64_t v18 = a3->u64[1];
    if (v18 >= v17)
    {
      unint64_t v20 = a3->i64[0];
      uint64_t v21 = (uint64_t)(v18 - a3->i64[0]) >> 5;
      unint64_t v22 = v21 + 1;
      uint64_t v23 = v17 - v20;
      if (v23 >> 4 > v22) {
        unint64_t v22 = v23 >> 4;
      }
      else {
        unint64_t v24 = v22;
      }
      uint64_t v37 = a3 + 1;
      if (v24)
      {
        if (v24 >> 59) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v25 = operator new(32 * v24);
      }

      else
      {
        uint64_t v25 = 0LL;
      }

      uint64_t v27 = (std::string *)&v25[32 * v21];
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      v35.__r_.__value_.__l.__size_ = (std::string::size_type)v27;
      v35.__r_.__value_.__l.__cap_ = (std::string::size_type)v27;
      uint64_t v36 = &v25[32 * v24];
      if ((char)__p.__r_.__value_.__s.__size_ < 0)
      {
        std::string::__init_copy_ctor_external(v27, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        unint64_t v20 = a3->i64[0];
        unint64_t v18 = a3->u64[1];
        std::string::size_type cap = v35.__r_.__value_.__l.__cap_;
        uint64_t v27 = (std::string *)v35.__r_.__value_.__l.__size_;
      }

      else
      {
        std::string *v27 = __p;
        std::string::size_type cap = (std::string::size_type)&v25[32 * v21];
      }

      v25[32 * v21 + 24] = v5;
      std::string::size_type v26 = cap + 32;
      v35.__r_.__value_.__l.__cap_ = cap + 32;
      if (v18 == v20)
      {
        int64x2_t v30 = vdupq_n_s64(v20);
      }

      else
      {
        do
        {
          __int128 v29 = *(_OWORD *)(v18 - 32);
          v27[-1].__r_.__value_.__l.__size_ = *(void *)(v18 - 16);
          *(_OWORD *)&v27[-2].__r_.__value_.__r.__words[2] = v29;
          *(void *)(v18 - memset(&context, 0, 24) = 0LL;
          *(void *)(v18 - 16) = 0LL;
          *(void *)(v18 - 32) = 0LL;
          v27[-1].__r_.__value_.__s.__data_[16] = *(_BYTE *)(v18 - 8);
          uint64_t v27 = (std::string *)((char *)v27 - 32);
          v18 -= 32LL;
        }

        while (v18 != v20);
        int64x2_t v30 = *a3;
        std::string::size_type v26 = v35.__r_.__value_.__l.__cap_;
      }

      a3->i64[0] = (uint64_t)v27;
      a3->i64[1] = v26;
      *(int64x2_t *)&v35.__r_.__value_.__r.__words[1] = v30;
      uint64_t v31 = (char *)a3[1].i64[0];
      a3[1].i64[0] = (uint64_t)v36;
      uint64_t v36 = v31;
      v35.__r_.__value_.__r.__words[0] = v30.i64[0];
      std::__split_buffer<std::pair<std::string,ctu::LogLevel>>::~__split_buffer((uint64_t)&v35);
    }

    else
    {
      if ((char)__p.__r_.__value_.__s.__size_ < 0)
      {
        std::string::__init_copy_ctor_external( (std::string *)a3->i64[1],  __p.__r_.__value_.__l.__data_,  __p.__r_.__value_.__l.__size_);
      }

      else
      {
        __int128 v19 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v18 + 16) = __p.__r_.__value_.__l.__cap_;
        *(_OWORD *)unint64_t v18 = v19;
      }

      *(_BYTE *)(v18 + memset(&context, 0, 24) = v5;
      std::string::size_type v26 = v18 + 32;
      a3->i64[1] = v18 + 32;
    }

    a3->i64[1] = v26;
  }

  std::string::size_type v33 = a1->__r_.__value_.__r.__words[0];
  std::string::size_type v32 = a1->__r_.__value_.__l.__size_;
  while (v33 != v32)
  {
    ctu::LoggerTree::appendLevels(v33, &__p, a3);
    v33 += 88LL;
  }

void sub_186617948( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ctu::LoggerTree::commitConfigUpdate_impl(ctu::LoggerTree *this)
{
  uint64_t v2 = (unsigned __int8 *)*((void *)this + 10);
  if (v2)
  {
    unsigned int v3 = v2[1];
    unsigned int v4 = *v2;
    if (v4) {
      BOOL v5 = v3 == 255;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = v4;
    }
    if (*((_BYTE *)this + 72)) {
      BOOL v7 = *((unsigned __int8 *)this + 73) == 255;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7) {
      int v8 = *((unsigned __int8 *)this + 73);
    }
    else {
      int v8 = *((unsigned __int8 *)this + 72);
    }
    if (v8 != (_DWORD)v6)
    {
      uint64_t v17 = *(void *)this;
      uint64_t v18 = *((void *)this + 1);
      while (v17 != v18)
      {
        ctu::LoggerTree::updateParentLogLevel(v17, v6);
        v17 += 88LL;
      }

      __int128 v19 = (uint64_t *)*((void *)this + 3);
      unint64_t v20 = (uint64_t *)*((void *)this + 4);
      while (v19 != v20)
      {
        uint64_t v21 = (std::__shared_weak_count *)v19[1];
        if (v21)
        {
          unint64_t v22 = std::__shared_weak_count::lock(v21);
          int64x2_t v30 = v22;
          if (v22)
          {
            uint64_t v23 = v22;
            uint64_t v24 = *v19;
            uint64_t v29 = v24;
            if (v24) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16LL))(v24, v6);
            }
            p_shared_owners = (unint64_t *)&v23->__shared_owners_;
            do
              unint64_t v26 = __ldaxr(p_shared_owners);
            while (__stlxr(v26 - 1, p_shared_owners));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
        }

        v19 += 2;
      }
    }

    unint64_t v9 = (char *)*((void *)this + 10);
    if (v9) {
      BOOL v10 = (_BYTE *)*((void *)this + 10);
    }
    else {
      BOOL v10 = (char *)this + 72;
    }
    *((_BYTE *)this + 72) = *v10;
    if (v9) {
      uint64_t v11 = v9 + 1;
    }
    else {
      uint64_t v11 = (char *)this + 73;
    }
    *((_BYTE *)this + 7ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = *v11;
    *((void *)this + 10) = 0LL;
    if (v9) {
      operator delete(v9);
    }
  }

  std::string::size_type v12 = *(ctu::LoggerTree **)this;
  uint64_t v13 = (ctu::LoggerTree *)*((void *)this + 1);
  while (v12 != v13)
  {
    ctu::LoggerTree::commitConfigUpdate(&v27, v12);
    std::string::size_type v14 = v28;
    if (v28)
    {
      unsigned __int8 v15 = (unint64_t *)&v28->__shared_owners_;
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }

    std::string::size_type v12 = (ctu::LoggerTree *)((char *)v12 + 88);
  }

void sub_186617B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void ctu::LoggerTree::getSimpleConfig(ctu::LoggerTree *this, xpc::dict *a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t v15 = v4;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v15 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v5) == MEMORY[0x1895F9250])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }

  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t v15 = v6;
LABEL_9:
  xpc_release(v5);
  uint64_t v13 = a2;
  std::string::size_type v14 = "kDomainLogLevels";
  xpc::dict::object_proxy::operator=((uint64_t)&v13, &v15, &v16);
  xpc_release(v16);
  xpc_object_t v16 = 0LL;
  xpc_release(v15);
  xpc_object_t v15 = 0LL;
  xpc_object_t v7 = xpc_array_create(0LL, 0LL);
  xpc_object_t v8 = v7;
  if (v7)
  {
    xpc_object_t v11 = v7;
  }

  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v11 = v8;
    if (!v8)
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v8 = 0LL;
      goto LABEL_16;
    }
  }

  if (MEMORY[0x186E3CD4C](v8) == MEMORY[0x1895F9220])
  {
    xpc_retain(v8);
    goto LABEL_17;
  }

  xpc_object_t v9 = xpc_null_create();
LABEL_16:
  xpc_object_t v11 = v9;
LABEL_17:
  xpc_release(v8);
  uint64_t v13 = a2;
  std::string::size_type v14 = "kLoggers";
  xpc::dict::object_proxy::operator=((uint64_t)&v13, &v11, &object);
  xpc_release(object);
  xpc_object_t object = 0LL;
  xpc_release(v11);
  xpc_object_t v11 = 0LL;
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_10);
  ctu::LoggerTree::getConfig((uint64_t *)this, &__p, (std::string::size_type)a2, 0LL);
}

void sub_186617D00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ctu::LoggerTree::getConfig(uint64_t *a1, std::string *a2, std::string::size_type a3, uint64_t a4)
{
  if ((a4 & 1) != 0 || *((_BYTE *)a1 + 72))
  {
    xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    __p.__r_.__value_.__r.__words[0] = a3;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"kDomainLogLevels";
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)&__p, &object);
    if (*((_BYTE *)a1 + 72)) {
      BOOL v8 = *((unsigned __int8 *)a1 + 73) == 255;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      int64_t v9 = *((unsigned __int8 *)a1 + 73);
    }
    else {
      int64_t v9 = *((unsigned __int8 *)a1 + 72);
    }
    xpc_object_t v41 = xpc_int64_create(v9);
    if (!v41) {
      xpc_object_t v41 = xpc_null_create();
    }
    std::string::size_type v10 = (std::string::size_type)a2;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
    __p.__r_.__value_.__l.__size_ = v10;
    xpc::dict::object_proxy::operator=((uint64_t)&__p, &v41, &v42);
    xpc_release(v42);
    xpc_object_t v42 = 0LL;
    xpc_release(v41);
    xpc_object_t v41 = 0LL;
    xpc_release(object);
  }

  xpc_object_t v40 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  __p.__r_.__value_.__r.__words[0] = a3;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"kLoggers";
  xpc::dict::object_proxy::operator xpc::array((uint64_t)&__p, &v40);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  if (v11 != v12)
  {
    while (1)
    {
      uint64_t v13 = *(std::__shared_weak_count **)(v11 + 8);
      if (v13)
      {
        std::string::size_type v14 = std::__shared_weak_count::lock(v13);
        unint64_t v39 = v14;
        if (v14) {
          break;
        }
      }

void sub_186618154( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, uint64_t a29, xpc_object_t object, char a31)
{
}

void ctu::LoggerTree::getFullConfig(ctu::LoggerTree *this, xpc::dict *a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t v15 = v4;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v15 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v5) == MEMORY[0x1895F9250])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }

  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t v15 = v6;
LABEL_9:
  xpc_release(v5);
  uint64_t v13 = a2;
  std::string::size_type v14 = "kDomainLogLevels";
  xpc::dict::object_proxy::operator=((uint64_t)&v13, &v15, &v16);
  xpc_release(v16);
  xpc_object_t v16 = 0LL;
  xpc_release(v15);
  xpc_object_t v15 = 0LL;
  xpc_object_t v7 = xpc_array_create(0LL, 0LL);
  xpc_object_t v8 = v7;
  if (v7)
  {
    xpc_object_t v11 = v7;
  }

  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v11 = v8;
    if (!v8)
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v8 = 0LL;
      goto LABEL_16;
    }
  }

  if (MEMORY[0x186E3CD4C](v8) == MEMORY[0x1895F9220])
  {
    xpc_retain(v8);
    goto LABEL_17;
  }

  xpc_object_t v9 = xpc_null_create();
LABEL_16:
  xpc_object_t v11 = v9;
LABEL_17:
  xpc_release(v8);
  uint64_t v13 = a2;
  std::string::size_type v14 = "kLoggers";
  xpc::dict::object_proxy::operator=((uint64_t)&v13, &v11, &object);
  xpc_release(object);
  xpc_object_t object = 0LL;
  xpc_release(v11);
  xpc_object_t v11 = 0LL;
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_10);
  ctu::LoggerTree::getConfig((uint64_t *)this, &__p, (std::string::size_type)a2, 1LL);
}

void sub_1866183D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xpc::dict::object_proxy::operator xpc::array(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    xpc_object_t v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }

  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v4) != MEMORY[0x1895F9220])
  {
    xpc_object_t v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }

  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

void std::vector<std::weak_ptr<ctu::TrackedLogger>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::weak_ptr<ctu::TrackedLogger>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }

void std::vector<std::weak_ptr<ctu::TrackedLogger>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16LL)
  {
    xpc_object_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  a1[1] = v2;
}

void std::vector<ctu::LoggerTree>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    xpc_object_t v4 = (char *)v1[1];
    xpc_object_t v5 = v2;
    if (v4 != v2)
    {
      do
        ctu::LoggerTree::~LoggerTree((ctu::LoggerTree *)(v4 - 88));
      while (v4 != v2);
      xpc_object_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void std::vector<ctu::LoggerTree>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ctu::LoggerTree>>(unint64_t a1)
{
  if (a1 >= 0x2E8BA2E8BA2E8BBLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(88 * a1);
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<ctu::TrackedLogger> *,std::weak_ptr<ctu::TrackedLogger> *,std::weak_ptr<ctu::TrackedLogger> *>( uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  xpc_object_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      __int128 v7 = *v5;
      *(void *)xpc_object_t v5 = 0LL;
      *((void *)v5 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0LL;
      xpc_object_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      ++v5;
      a4 += 16LL;
    }

    while (v5 != a3);
    return a3;
  }

  return v5;
}

void **std::__split_buffer<std::weak_ptr<ctu::TrackedLogger>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::weak_ptr<ctu::TrackedLogger>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    xpc_object_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }

    else
    {
      v1 -= 16LL;
    }
  }

uint64_t std::__split_buffer<ctu::LoggerTree>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    ctu::LoggerTree::~LoggerTree((ctu::LoggerTree *)(i - 88));
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::pair<std::string,ctu::LogLevel>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      xpc_object_t v4 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        xpc_object_t v4 = *(void ***)(a1 + 16);
      }

      uint64_t v2 = v4;
    }

    while (v4 != v3);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::get_temporary_buffer[abi:ne180100]<std::weak_ptr<ctu::TrackedLogger>>(uint64_t a1)
{
  if (a1 < 1) {
    return 0LL;
  }
  if (a1 >= 0x7FFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x1896146B8];
  while (1)
  {
    __n128 result = operator new(16 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0LL;
    }
  }

  return result;
}

uint64_t *std::__stable_partition_impl<std::_ClassicAlgPolicy,ctu::LoggerTree::tidyUp(void)::$_0 &,std::__wrap_iter<std::weak_ptr<ctu::TrackedLogger> *>,long,std::pair<std::weak_ptr<ctu::TrackedLogger> *,long>>( void *a1, void *a2, uint64_t a3, _OWORD *a4, uint64_t a5)
{
  xpc_object_t v6 = a1;
  if (a3 == 3)
  {
    std::string::size_type v10 = a1 + 3;
    uint64_t v11 = a1[3];
    if (!v11 || *(void *)(v11 + 8) == -1LL)
    {
      uint64_t v13 = (uint64_t)(a1 + 2);
      uint64_t v22 = a1[2];
      a1[2] = *a2;
      *a2 = v22;
      uint64_t v23 = a1[3];
      a1[3] = a2[1];
      a2[1] = v23;
      uint64_t v24 = *a1;
      *a1 = a1[2];
      a1[2] = v24;
      xpc_object_t v9 = a1 + 1;
      goto LABEL_18;
    }

    __int128 v12 = *(_OWORD *)a1;
    *a1 = a1[2];
    a1[1] = v11;
    *((_OWORD *)a1 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v12;
    a1[2] = *a2;
    xpc_object_t v9 = a1 + 3;
    *a2 = v12;
    std::string::size_type v10 = a2 + 1;
LABEL_7:
    uint64_t v13 = (uint64_t)a2;
LABEL_18:
    uint64_t v25 = *v9;
    *xpc_object_t v9 = *v10;
    uint64_t *v10 = v25;
    return (uint64_t *)v13;
  }

  if (a3 == 2)
  {
    uint64_t v8 = *a1;
    *a1 = *a2;
    xpc_object_t v9 = a1 + 1;
    *a2 = v8;
    std::string::size_type v10 = a2 + 1;
    goto LABEL_7;
  }

  if (a5 >= a3)
  {
    *a4 = *(_OWORD *)a1;
    uint64_t v27 = a4 + 1;
    *a1 = 0LL;
    a1[1] = 0LL;
    std::string v28 = a1 + 2;
    unint64_t v29 = 1LL;
    if (a1 + 2 == a2)
    {
      std::string::size_type v33 = a1;
    }

    else
    {
      do
      {
        uint64_t v30 = v28[1];
        if (!v30 || *(void *)(v30 + 8) == -1LL)
        {
          void *v27 = *v28;
          v27[1] = v30;
          v27 += 2;
          void *v28 = 0LL;
          v28[1] = 0LL;
          ++v29;
        }

        else
        {
          uint64_t v31 = *v28;
          void *v28 = 0LL;
          v28[1] = 0LL;
          xpc_object_t v32 = (std::__shared_weak_count *)v6[1];
          void *v6 = v31;
          v6[1] = v30;
          if (v32) {
            std::__shared_weak_count::__release_weak(v32);
          }
          v6 += 2;
        }

        v28 += 2;
      }

      while (v28 != a2);
      std::string::size_type v33 = v28 - 2;
    }

    uint64_t v41 = *a2;
    uint64_t v42 = v33[3];
    *a2 = 0LL;
    a2[1] = 0LL;
    unint64_t v43 = (std::__shared_weak_count *)v6[1];
    void *v6 = v41;
    v6[1] = v42;
    if (v43) {
      std::__shared_weak_count::__release_weak(v43);
    }
    uint64_t v13 = (uint64_t)(v6 + 2);
    if (v27 > (void *)a4)
    {
      __int128 v44 = (std::__shared_weak_count **)(v6 + 3);
      uint64_t v45 = a4;
      do
      {
        __int128 v46 = *v45;
        *(void *)uint64_t v45 = 0LL;
        *((void *)v45 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0LL;
        dispatch_object_t v47 = *v44;
        *(_OWORD *)(v44 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v46;
        if (v47) {
          std::__shared_weak_count::__release_weak(v47);
        }
        ++v45;
        v44 += 2;
      }

      while (v45 < (_OWORD *)v27);
    }

    if (v29)
    {
      unint64_t v48 = 0LL;
      std::__split_buffer<std::string>::pointer v49 = (std::__shared_weak_count **)a4 + 1;
      do
      {
        if (*v49) {
          std::__shared_weak_count::__release_weak(*v49);
        }
        ++v48;
        v49 += 2;
      }

      while (v48 < v29);
    }
  }

  else
  {
    if (a3 >= 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 + 1;
    }
    uint64_t v17 = v16 >> 1;
    unsigned int v18 = &a1[2 * (v16 >> 1)];
    uint64_t v19 = 2 * (v16 >> 1);
    for (uint64_t i = v17; ; --i)
    {
      uint64_t v21 = a1[v19 - 1];
      if (v21)
      {
        if (*(void *)(v21 + 8) != -1LL) {
          break;
        }
      }

      v19 -= 2LL;
      if (!(v19 * 8))
      {
        unint64_t v34 = a1;
        goto LABEL_31;
      }
    }

    unint64_t v34 = (uint64_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,ctu::LoggerTree::tidyUp(void)::$_0 &,std::__wrap_iter<std::weak_ptr<ctu::TrackedLogger> *>,long,std::pair<std::weak_ptr<ctu::TrackedLogger> *,long>>( a1,  &a1[v19 - 2],  i,  a4,  a5);
LABEL_31:
    uint64_t v35 = a3 - v17;
    xpc_object_t v36 = &v6[2 * v17];
    uint64_t v38 = v36 + 1;
    uint64_t v37 = v36[1];
    if (v37)
    {
      uint64_t v13 = (uint64_t)(a2 + 2);
      unint64_t v39 = v36 + 2;
      do
      {
        if (*(void *)(v37 + 8) == -1LL) {
          break;
        }
        if (v39 == a2) {
          goto LABEL_53;
        }
        --v35;
        uint64_t v37 = v39[1];
        v39 += 2;
      }

      while (v37);
      xpc_object_t v40 = v39 - 2;
    }

    else
    {
      xpc_object_t v40 = v18;
    }

    uint64_t v13 = std::__stable_partition_impl<std::_ClassicAlgPolicy,ctu::LoggerTree::tidyUp(void)::$_0 &,std::__wrap_iter<std::weak_ptr<ctu::TrackedLogger> *>,long,std::pair<std::weak_ptr<ctu::TrackedLogger> *,long>>( v40,  a2,  v35,  a4,  a5);
LABEL_53:
    if (v34 != v18)
    {
      if (v18 == (uint64_t *)v13)
      {
        return v34;
      }

      else
      {
        uint64_t v50 = *v34;
        *unint64_t v34 = *v18;
        uint64_t *v18 = v50;
        unint64_t v51 = v18 + 2;
        uint64_t v52 = v34[1];
        v34[1] = *v38;
        uint64_t *v38 = v52;
        uint64_t v53 = v34 + 2;
        while (v51 != (uint64_t *)v13)
        {
          if (v53 == v18) {
            unsigned int v18 = v51;
          }
          uint64_t v54 = *v53;
          *uint64_t v53 = *v51;
          *unint64_t v51 = v54;
          uint64_t v55 = v53[1];
          v53[1] = v51[1];
          v51[1] = v55;
          v53 += 2;
          v51 += 2;
        }

        if (v53 == v18)
        {
          return v18;
        }

        else
        {
          uint64_t v56 = v53;
          uint64_t v57 = v18;
          do
          {
            while (1)
            {
              uint64_t v58 = *v56;
              *uint64_t v56 = *v57;
              *uint64_t v57 = v58;
              uint64_t v59 = v56[1];
              v56[1] = v57[1];
              v57[1] = v59;
              v56 += 2;
              v57 += 2;
              if (v56 == v18) {
                unsigned int v18 = v57;
              }
            }

            uint64_t v57 = v18;
          }

          while (v56 != v18);
          return v53;
        }
      }
    }
  }

  return (uint64_t *)v13;
}

void std::__tree<std::__value_type<std::string,ctu::LogLevel>,std::__map_value_compare<std::string,std::__value_type<std::string,ctu::LogLevel>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ctu::LogLevel>>>::destroy( uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,ctu::LogLevel>,std::__map_value_compare<std::string,std::__value_type<std::string,ctu::LogLevel>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ctu::LogLevel>>>::destroy( a1,  *(void *)a2);
    std::__tree<std::__value_type<std::string,ctu::LogLevel>,std::__map_value_compare<std::string,std::__value_type<std::string,ctu::LogLevel>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ctu::LogLevel>>>::destroy( a1,  *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }

void std::__shared_ptr_emplace<std::vector<std::pair<std::string,ctu::LogLevel>>>::~__shared_ptr_emplace( std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_189E97DD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::string,ctu::LogLevel>>>::~__shared_ptr_emplace( std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_189E97DD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::string,ctu::LogLevel>>>::__on_zero_shared( uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    BOOL v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        v3 -= 32LL;
      }

      while (v3 != v1);
      BOOL v4 = *(void **)(a1 + 24);
    }

    *(void *)(a1 + 32) = v1;
    operator delete(v4);
  }

uint64_t ctu::serial::configure(ctu::serial *this, unsigned int a2, cc_t a3, cc_t a4, int a5)
{
  int v9 = (int)this;
  uint64_t v39 = *MEMORY[0x1895F89C0];
  v38.c_ospeed = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v38.c_cc = v10;
  *(_OWORD *)&v38.c_cc[16] = v10;
  *(_OWORD *)&v38.c_iflag = v10;
  *(_OWORD *)&v38.c_cflag = v10;
  if (tcgetattr((int)this, &v38))
  {
    uint64_t v11 = __error();
    uint64_t v12 = *v11;
    uint64_t v13 = strerror(*v11);
    _TelephonyUtilDebugPrint( (uint64_t)"configure",  (uint64_t)"Failed get attributes, err = %s (%d)\n",  v14,  v15,  v16,  v17,  v18,  v19,  (uint64_t)v13);
  }

  else if (cfsetspeed(&v38, a2))
  {
    xpc_object_t v20 = __error();
    uint64_t v12 = *v20;
    xpc_object_t v36 = strerror(*v20);
    _TelephonyUtilDebugPrint( (uint64_t)"configure",  (uint64_t)"Failed set speed, err = %s (%d)\n",  v21,  v22,  v23,  v24,  v25,  v26,  (uint64_t)v36);
  }

  else
  {
    cfmakeraw(&v38);
    v38.c_iflag = v38.c_iflag & 0xFFFFFFFFFFFFF0CCLL | 1;
    v38.c_oflag &= ~1uLL;
    v38.c_cc[16] = a3;
    v38.c_cc[17] = a4;
    uint64_t v27 = 51968LL;
    if (a5) {
      uint64_t v27 = 248576LL;
    }
    v38.c_cflag = v38.c_cflag & 0xFFFFFFFFFFFC20FFLL | v27;
    v38.c_lflag &= 0xFFFFFFFFFFFFFA77LL;
    if (tcsetattr(v9, 0, &v38))
    {
      std::string v28 = __error();
      uint64_t v12 = *v28;
      uint64_t v37 = strerror(*v28);
      _TelephonyUtilDebugPrint( (uint64_t)"configure",  (uint64_t)"Failed set attributes, err = %s (%d)",  v29,  v30,  v31,  v32,  v33,  v34,  (uint64_t)v37);
    }

    else
    {
      return 0LL;
    }
  }

  return v12;
}

const char *ctu::asString(unsigned int a1)
{
  if (a1 > 3) {
    return "Unknown";
  }
  else {
    return off_189E99628[a1];
  }
}

{
  if (a1 > 4) {
    return "Unknown";
  }
  else {
    return off_189E99648[a1];
  }
}

uint64_t ctu::TextTransform::reset(uint64_t this)
{
  *(_BYTE *)(this + memset(&context, 0, 24) = 0;
  return this;
}

ctu::TextConverter *ctu::TextConverter::TextConverter(ctu::TextConverter *this)
{
  uint64_t v2 = operator new(0x38uLL);
  v2[2] = 0;
  *((void *)v2 + 2) = 0LL;
  *((_BYTE *)v2 + memset(&context, 0, 24) = 0;
  *(void *)uint64_t v2 = off_189E98230;
  *((void *)v2 + 5) = 0LL;
  *((void *)v2 + 6) = 0LL;
  *((void *)v2 + 4) = 0LL;
  *(void *)this = v2;
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v2;
  return this;
}

{
  _DWORD *v2;
  uint64_t v2 = operator new(0x38uLL);
  v2[2] = 0;
  *((void *)v2 + 2) = 0LL;
  *((_BYTE *)v2 + memset(&context, 0, 24) = 0;
  *(void *)uint64_t v2 = off_189E98230;
  *((void *)v2 + 5) = 0LL;
  *((void *)v2 + 6) = 0LL;
  *((void *)v2 + 4) = 0LL;
  *(void *)this = v2;
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v2;
  return this;
}

void ctu::TextConverter::~TextConverter(ctu::TextConverter *this)
{
  uint64_t v2 = *(void **)this;
  if (v2)
  {
    do
    {
      *(void *)this = v2[2];
      (*(void (**)(void *))(*v2 + 8LL))(v2);
      uint64_t v2 = *(void **)this;
    }

    while (*(void *)this);
  }

{
  void *v2;
  uint64_t v2 = *(void **)this;
  if (v2)
  {
    do
    {
      *(void *)this = v2[2];
      (*(void (**)(void *))(*v2 + 8LL))(v2);
      uint64_t v2 = *(void **)this;
    }

    while (*(void *)this);
  }

uint64_t ctu::TextConverter::popConversion(ctu::TextConverter *this)
{
  uint64_t v1 = *(void *)this;
  *(void *)this = *(void *)(*(void *)this + 16LL);
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
}

uint64_t ctu::TextConverter::setSource(uint64_t this, const char *a2, int a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(_DWORD *)(v3 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = a3;
  *(void *)(v3 + 32) = a2;
  *(void *)(v3 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0LL;
  *(void *)(v3 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = a3;
  BOOL v4 = *(void **)this;
  if (*(void *)this)
  {
    do
    {
      this = (*(uint64_t (**)(void *))(*v4 + 24LL))(v4);
      BOOL v4 = (void *)v4[2];
    }

    while (v4);
  }

  return this;
}

_DWORD *ctu::TextConverter::pushConversion(void *a1, int a2, int a3, int a4, int a5)
{
  switch(a2)
  {
    case 0:
      __n128 result = operator new(0x28uLL);
      int v9 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v9;
      *((_BYTE *)result + memset(&context, 0, 24) = 0;
      __int128 v10 = off_189E97E20;
      goto LABEL_25;
    case 1:
      __n128 result = operator new(0x20uLL);
      uint64_t v11 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v11;
      *((_BYTE *)result + memset(&context, 0, 24) = 0;
      uint64_t v12 = off_189E97E50;
      goto LABEL_29;
    case 2:
      __n128 result = operator new(0x20uLL);
      uint64_t v13 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v13;
      *((_BYTE *)result + memset(&context, 0, 24) = 0;
      uint64_t v12 = off_189E97E80;
      goto LABEL_29;
    case 3:
      __n128 result = operator new(0x40uLL);
      uint64_t v14 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v14;
      *((_BYTE *)result + memset(&context, 0, 24) = 0;
      *(void *)__n128 result = off_189E97EB0;
      result[13] = 0;
      result[14] = 0;
      goto LABEL_30;
    case 4:
      __n128 result = operator new(0x28uLL);
      uint64_t v15 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v15;
      *((_BYTE *)result + memset(&context, 0, 24) = 0;
      *(void *)__n128 result = off_189E97F10;
      result[7] = 0;
      result[8] = 0;
      result[9] = (7 - a3) % 7;
      goto LABEL_30;
    case 5:
      __n128 result = operator new(0x30uLL);
      uint64_t v16 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v16;
      *((_BYTE *)result + memset(&context, 0, 24) = 0;
      *(void *)__n128 result = off_189E97EE0;
      result[7] = a3;
      *((void *)result + 4) = 0LL;
      goto LABEL_23;
    case 6:
      __n128 result = operator new(0x30uLL);
      uint64_t v17 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v17;
      *((_BYTE *)result + memset(&context, 0, 24) = 0;
      result[7] = a3;
      *((void *)result + 4) = 0LL;
      *((_WORD *)result + 20) = 0;
      uint64_t v12 = off_189E97F40;
      goto LABEL_29;
    case 7:
      __n128 result = operator new(0x28uLL);
      uint64_t v18 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v18;
      *((_BYTE *)result + memset(&context, 0, 24) = 0;
      *(void *)__n128 result = off_189E98060;
      result[7] = -1;
      result[8] = a3;
      goto LABEL_30;
    case 8:
      __n128 result = operator new(0x28uLL);
      xpc_object_t v20 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v20;
      *((_BYTE *)result + memset(&context, 0, 24) = 0;
      *(void *)__n128 result = off_189E98090;
      result[7] = a3;
      result[8] = a5;
      goto LABEL_30;
    case 9:
      __n128 result = operator new(0x20uLL);
      uint64_t v21 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v21;
      *((_BYTE *)result + memset(&context, 0, 24) = 0;
      uint64_t v12 = off_189E98140;
      goto LABEL_29;
    case 10:
      __n128 result = operator new(0x30uLL);
      uint64_t v22 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v22;
      *((_BYTE *)result + memset(&context, 0, 24) = 0;
      *(void *)__n128 result = off_189E98170;
      *((void *)result + 4) = 0LL;
      result[10] = 0;
      goto LABEL_30;
    case 11:
      __n128 result = operator new(0x20uLL);
      uint64_t v23 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v23;
      *((_BYTE *)result + memset(&context, 0, 24) = 0;
      uint64_t v24 = off_189E981A0;
      goto LABEL_16;
    case 12:
      __n128 result = operator new(0x20uLL);
      uint64_t v25 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v25;
      *((_BYTE *)result + memset(&context, 0, 24) = 0;
      uint64_t v24 = off_189E981D0;
LABEL_16:
      *(void *)__n128 result = v24;
      *((_WORD *)result + 1ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = a3;
      goto LABEL_30;
    case 13:
      __n128 result = operator new(0x20uLL);
      uint64_t v26 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v26;
      *((_BYTE *)result + memset(&context, 0, 24) = 0;
      uint64_t v12 = off_189E98110;
      goto LABEL_29;
    case 14:
      __n128 result = operator new(0x20uLL);
      uint64_t v27 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v27;
      *((_BYTE *)result + memset(&context, 0, 24) = 0;
      uint64_t v12 = off_189E98200;
      goto LABEL_29;
    case 15:
      __n128 result = operator new(0x30uLL);
      std::string v28 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v28;
      *((_BYTE *)result + memset(&context, 0, 24) = 0;
      *(void *)__n128 result = off_189E97F70;
      result[7] = 0;
      result[8] = 0;
      if (a3 <= 0) {
        int v29 = -(-a3 & 7);
      }
      else {
        int v29 = a3 & 7;
      }
      result[9] = v29;
LABEL_23:
      *((_BYTE *)result + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0;
      goto LABEL_30;
    case 16:
      __n128 result = operator new(0x28uLL);
      uint64_t v30 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v30;
      *((_BYTE *)result + memset(&context, 0, 24) = 0;
      __int128 v10 = off_189E97FA0;
LABEL_25:
      *(void *)__n128 result = v10;
      result[7] = 0;
      result[8] = 0;
      goto LABEL_30;
    case 17:
      __n128 result = operator new(0x20uLL);
      uint64_t v31 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v31;
      *((_BYTE *)result + memset(&context, 0, 24) = 0;
      uint64_t v12 = off_189E97FD0;
      goto LABEL_29;
    case 18:
      __n128 result = operator new(0x20uLL);
      uint64_t v32 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v32;
      *((_BYTE *)result + memset(&context, 0, 24) = 0;
      uint64_t v12 = off_189E98000;
      goto LABEL_29;
    case 19:
      __n128 result = operator new(0x20uLL);
      uint64_t v33 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v33;
      *((_BYTE *)result + memset(&context, 0, 24) = 0;
      uint64_t v12 = off_189E98030;
LABEL_29:
      *(void *)__n128 result = v12;
LABEL_30:
      *a1 = result;
      break;
    default:
      __n128 result = (_DWORD *)*a1;
      break;
  }

  result[2] = a4;
  return result;
}

uint64_t ctu::TextConverter::nextCode(ctu::TextConverter *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 16LL))(*(void *)this);
}

BOOL ctu::TextConverter::exceptionOccurred(ctu::TextConverter *this)
{
  uint64_t v1 = *(void *)this;
  do
  {
    int v2 = *(unsigned __int8 *)(v1 + 24);
    if (*(_BYTE *)(v1 + 24)) {
      break;
    }
    uint64_t v1 = *(void *)(v1 + 16);
  }

  while (v1);
  return v2 != 0;
}

void ctu::TextConverter::readChars(ctu::TextConverter *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0LL;
  a3->__r_.__value_.__l.__size_ = 0LL;
  a3->__r_.__value_.__l.__cap_ = 0LL;
  if (a2)
  {
    uint64_t v3 = a2;
    do
    {
      int v6 = (*(uint64_t (**)(void))(**(void **)this + 16LL))(*(void *)this);
      if (v6 == -1) {
        break;
      }
      std::string::push_back(a3, v6);
      --v3;
    }

    while (v3);
  }

void sub_186619478(_Unwind_Exception *exception_object)
{
}

uint64_t ctu::TextConverter::getSourceCount(ctu::TextConverter *this)
{
  return *(void *)(*((void *)this + 1) + 40LL);
}

uint64_t ctu::TextConverter::getSourceAvailableCount(ctu::TextConverter *this)
{
  return *(void *)(*((void *)this + 1) + 48LL) - *(void *)(*((void *)this + 1) + 40LL);
}

void ctu::TextConverter::getBytesToCurrentOffset( ctu::TextConverter *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4 = *((void *)this + 1);
  a3->__r_.__value_.__l.__size_ = 0LL;
  a3->__r_.__value_.__l.__cap_ = 0LL;
  a3->__r_.__value_.__r.__words[0] = 0LL;
  if (*(void *)(v4 + 32))
  {
    unint64_t v5 = *(void *)(v4 + 40);
    unint64_t v6 = v5 - a2;
    if (((v5 - a2) & 0x8000000000000000LL) == 0)
    {
      while (v6 < v5)
      {
        std::string::push_back(a3, *(_BYTE *)(*(void *)(v4 + 32) + v6++));
        unint64_t v5 = *(void *)(v4 + 40);
      }
    }
  }

void sub_186619518(_Unwind_Exception *exception_object)
{
}

void ctu::TextConverter::getBytesFromCurrentOffset( ctu::TextConverter *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4 = (void *)*((void *)this + 1);
  a3->__r_.__value_.__l.__size_ = 0LL;
  a3->__r_.__value_.__l.__cap_ = 0LL;
  a3->__r_.__value_.__r.__words[0] = 0LL;
  if (v4[4])
  {
    uint64_t v5 = a2;
    uint64_t v6 = v4[5];
    if (v6 < v6 + a2 && (unint64_t)(v6 + a2) < v4[6])
    {
      do
      {
        std::string::push_back(a3, *(_BYTE *)(v4[4] + v6++));
        --v5;
      }

      while (v5);
    }
  }

void sub_1866195A0(_Unwind_Exception *exception_object)
{
}

uint64_t ctu::BinaryToHexTransform::nextCode(ctu::BinaryToHexTransform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  uint64_t result = *((unsigned int *)this + 7);
  if ((_DWORD)result == -1) {
    return result;
  }
  int v4 = *((_DWORD *)this + 8);
  if (v4)
  {
    *((_DWORD *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = v4 - 1;
    if (v4 != 2) {
      return ctu::kHexDigits[result & 0xF];
    }
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
    *((_DWORD *)this + 7) = result;
    if ((_DWORD)result == -1) {
      return result;
    }
    *((_DWORD *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 1;
  }

  LODWORD(result) = result >> 4;
  return ctu::kHexDigits[result & 0xF];
}

uint64_t ctu::BinaryToHexTransform::reset(uint64_t this)
{
  *(_DWORD *)(this + 2std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_BYTE *)(this + memset(&context, 0, 24) = 0;
  return this;
}

uint64_t ctu::HexToBinaryTransform::nextCode(ctu::HexToBinaryTransform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  int v3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
  if (v3 == -1 || v4 == -1) {
    return 0xFFFFFFFFLL;
  }
  else {
    int v7 = (char)v3 - 55;
  }
  int v8 = 16 * v7;
  else {
    int v9 = (char)v4 - 55;
  }
  return v9 | v8;
}

uint64_t ctu::Utf8ToUcs2Transform::nextCode(ctu::Utf8ToUcs2Transform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
  uint64_t v4 = v3;
  if ((_DWORD)v3 != -1 && (v3 & 0x80) != 0)
  {
    if ((v3 & 0x20) == 0)
    {
      int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
      if (v5 == -1) {
        return 0xFFFFFFFFLL;
      }
      else {
        return v5 & 0x3F | ((v4 & 0x1F) << 6);
      }
    }

    if ((v3 & 0x10) == 0)
    {
      int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
      int v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
      if (v6 != -1 && v7 != -1) {
        return ((v4 & 0xF) << 12) | ((v6 & 0x3F) << 6) | v7 & 0x3F;
      }
      return 0xFFFFFFFFLL;
    }

    if ((v3 & 8) != 0)
    {
      if ((v3 & 4) != 0)
      {
        if ((v3 & 2) != 0) {
          return 0LL;
        }
        int v21 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
        int v22 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
        int v23 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
        int v24 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
        int v11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
        if (v21 == -1 || v22 == -1 || v23 == -1 || v24 == -1 || v11 == -1) {
          return 0xFFFFFFFFLL;
        }
        int v14 = ((v4 & 1) << 30) | ((v21 & 0x3F) << 24) | ((v22 & 0x3F) << 18) | ((v23 & 0x3F) << 12) | ((v24 & 0x3F) << 6);
      }

      else
      {
        int v15 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
        int v16 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
        int v17 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
        int v11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
        if (v15 == -1 || v16 == -1 || v17 == -1 || v11 == -1) {
          return 0xFFFFFFFFLL;
        }
        int v14 = ((v4 & 3) << 24) | ((v15 & 0x3F) << 18) | ((v16 & 0x3F) << 12) | ((v17 & 0x3F) << 6);
      }
    }

    else
    {
      int v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
      int v10 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
      int v11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
      if (v9 == -1 || v10 == -1 || v11 == -1) {
        return 0xFFFFFFFFLL;
      }
      int v14 = ((v4 & 7) << 18) | ((v9 & 0x3F) << 12) | ((v10 & 0x3F) << 6);
    }

    unsigned int v30 = v14 & 0xFFFFFFC0 | v11 & 0x3F;
    int v31 = v30 - 0x10000;
    unsigned int v32 = v30 - 64513;
    if (v31 >= 0) {
      unsigned int v32 = v31;
    }
    return ((v32 >> 10 << 16) - 671088640) | (v31 - (v32 & 0xFFFFFC00) + 56320);
  }

  return v4;
}

uint64_t ctu::Ucs2ToUtf8Transform::nextCode(ctu::Ucs2ToUtf8Transform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  int v3 = *((_DWORD *)this + 13);
  if (*((_DWORD *)this + 14) == v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
    if ((_DWORD)result == -1) {
      return result;
    }
    unsigned int v5 = ((result >> 6) & 0x3FFFC00) + (unsigned __int16)result - 56613888;
    if ((v5 & 0x7C000000) != 0)
    {
      *(int8x16_t *)((char *)this + 2std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = vorrq_s8( vandq_s8( (int8x16_t)vshlq_u32( (uint32x4_t)vdupq_n_s32(v5),  (uint32x4_t)xmmword_18663A6E0),  (int8x16_t)xmmword_18663A6F0),  (int8x16_t)xmmword_18663A700);
      *((_DWORD *)this + 1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = (v5 >> 6) & 0x3F | 0x80;
      *((_DWORD *)this + 12) = v5 & 0x3F | 0x80;
      int v6 = 6;
    }

    else if ((v5 & 0x3E00000) != 0)
    {
      *(int8x16_t *)((char *)this + 2std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = vorrq_s8( vandq_s8( (int8x16_t)vshlq_u32( (uint32x4_t)vdupq_n_s32(v5),  (uint32x4_t)xmmword_18663A710),  (int8x16_t)xmmword_18663A720),  (int8x16_t)xmmword_18663A730);
      *((_DWORD *)this + 1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v5 & 0x3F | 0x80;
      int v6 = 5;
    }

    else if ((v5 & 0x1F0000) != 0)
    {
      *(int8x8_t *)((char *)this + 2std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = vorr_s8( vand_s8( (int8x8_t)vshl_u32( (uint32x2_t)vdup_n_s32(v5),  (uint32x2_t)0xFFFFFFF4FFFFFFEELL),  (int8x8_t)0x3F00000007LL),  (int8x8_t)0x80000000F0LL);
      *((_DWORD *)this + ctu::XpcClientHelper::~XpcClientHelper(this + 9) = (v5 >> 6) & 0x3F | 0x80;
      *((_DWORD *)this + 10) = v5 & 0x3F | 0x80;
      int v6 = 4;
    }

    else if ((v5 & 0xF800) != 0)
    {
      *(int8x8_t *)((char *)this + 2std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = vorr_s8( vand_s8( (int8x8_t)vshl_u32( (uint32x2_t)vdup_n_s32(v5),  (uint32x2_t)0xFFFFFFFAFFFFFFF4LL),  (int8x8_t)0x3F0000000FLL),  (int8x8_t)0x80000000E0LL);
      *((_DWORD *)this + ctu::XpcClientHelper::~XpcClientHelper(this + 9) = v5 & 0x3F | 0x80;
      int v6 = 3;
    }

    else if ((v5 & 0xFF80) != 0)
    {
      *((_DWORD *)this + 7) = (v5 >> 6) & 0x1F | 0xC0;
      *((_DWORD *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = v5 & 0x3F | 0x80;
      int v6 = 2;
    }

    else
    {
      *((_DWORD *)this + 7) = (char)v5;
      int v6 = 1;
    }

    int v3 = 0;
    *((_DWORD *)this + 14) = v6;
  }

  *((_DWORD *)this + 1ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = v3 + 1;
  return *((unsigned int *)this + v3 + 7);
}

uint64_t ctu::Ucs2ToUtf8Transform::reset(uint64_t this)
{
  *(_DWORD *)(this + 52) = 0;
  *(_DWORD *)(this + ++*(_DWORD *)(this + 56) = 0;
  *(_BYTE *)(this + memset(&context, 0, 24) = 0;
  return this;
}

uint64_t ctu::SmsPacker::nextCode(ctu::SmsPacker *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  if (*((_BYTE *)this + 40))
  {
    int v3 = *((_DWORD *)this + 9);
    goto LABEL_8;
  }

  if (!*((_DWORD *)this + 7))
  {
    int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
    *((_DWORD *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = v4;
    if (v4 != -1) {
      goto LABEL_7;
    }
    return 0xFFFFFFFFLL;
  }

  *((_DWORD *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0;
LABEL_7:
  int v3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
  *((_DWORD *)this + ctu::XpcClientHelper::~XpcClientHelper(this + 9) = v3;
  *((_BYTE *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 1;
LABEL_8:
  int v5 = *((_DWORD *)this + 8);
  if (v5 == -1 && v3 == -1) {
    return 0xFFFFFFFFLL;
  }
  int v7 = *((_DWORD *)this + 7);
  int v8 = v5 >> v7;
  int v9 = (v3 << (7 - v7));
  if (v3 == -1) {
    int v9 = 0;
  }
  uint64_t v10 = v9 | v8;
  *((_DWORD *)this + 7) = v7 + 1;
  if (v7 == 6)
  {
    *((_DWORD *)this + 7) = 0;
    int v11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
    *((_DWORD *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = v11;
    if (v11 == -1) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }

  *((_DWORD *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = v3;
  if (v3 != -1)
  {
LABEL_19:
    int v11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
LABEL_20:
    *((_DWORD *)this + ctu::XpcClientHelper::~XpcClientHelper(this + 9) = v11;
  }

  return v10;
}

uint64_t ctu::SmsPacker::reset(uint64_t this)
{
  *(_BYTE *)(this + memset(&context, 0, 24) = 0;
  *(void *)(this + 2std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  *(void *)(this + 3ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 0LL;
  return this;
}

uint64_t ctu::SmsUnpacker::nextCode(ctu::SmsUnpacker *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  int v3 = *((_DWORD *)this + 8);
  if (v3 >= 7)
  {
    int v6 = *((_DWORD *)this + 7);
LABEL_10:
    uint64_t result = v6 & 0x7F;
    *((_DWORD *)this + 7) = v6 >> 7;
    *((_DWORD *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = v3 - 7;
  }

  else
  {
    while (1)
    {
      uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
      if ((_DWORD)result == -1) {
        break;
      }
      int v5 = *((_DWORD *)this + 8);
      int v6 = *((_DWORD *)this + 7) | ((_DWORD)result << v5);
      int v3 = v5 + 8;
      *((_DWORD *)this + 7) = v6;
      *((_DWORD *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = v3;
      int v7 = *((_DWORD *)this + 9);
      if (v7)
      {
        v6 >>= v7;
        v3 -= v7;
        *((_DWORD *)this + 7) = v6;
        *((void *)this + 4) = v3;
      }

      if (v3 >= 7) {
        goto LABEL_10;
      }
    }
  }

  return result;
}

uint64_t ctu::SmsUnpacker::reset(uint64_t this)
{
  *(_DWORD *)(this + 2std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_BYTE *)(this + memset(&context, 0, 24) = 0;
  return this;
}

uint64_t ctu::UssdPacker::nextCode(ctu::UssdPacker *this)
{
  uint64_t result = ctu::SmsPacker::nextCode(this);
  if ((_DWORD)result != -1)
  {
    if (*((_DWORD *)this + 8) == -1)
    {
      if ((result & 0xFFFFFFFE) == 0x1A && !*((_BYTE *)this + 41)) {
        *((_DWORD *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 13;
      }
    }

    else if (*((_DWORD *)this + 9) == -1 && *((_DWORD *)this + 7) == 6)
    {
      *((_DWORD *)this + ctu::XpcClientHelper::~XpcClientHelper(this + 9) = 13;
      *((_BYTE *)this + 4ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 1;
    }
  }

  return result;
}

uint64_t ctu::UssdPacker::reset(uint64_t this)
{
  *(_BYTE *)(this + memset(&context, 0, 24) = 0;
  *(void *)(this + 2std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  *(void *)(this + 3ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 0LL;
  return this;
}

uint64_t ctu::C2KSmsPackedToUnpackedTransform::nextCode(ctu::C2KSmsPackedToUnpackedTransform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  int v3 = v1 - 1;
  *((_DWORD *)this + 2) = v3;
  if (!*((_BYTE *)this + 40) && *((_DWORD *)this + 9))
  {
    if (v3)
    {
      uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
      *((_DWORD *)this + 7) = result;
      if ((_DWORD)result == -1) {
        return result;
      }
      *((_DWORD *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 8 - *((_DWORD *)this + 9);
      goto LABEL_3;
    }

    return 0xFFFFFFFFLL;
  }

LABEL_3:
  *((_BYTE *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 1;
  int v4 = *((_DWORD *)this + 8);
  if (v4 >= 7)
  {
    int v6 = *((_DWORD *)this + 7);
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
    if ((_DWORD)result == -1) {
      return result;
    }
    int v4 = *((_DWORD *)this + 8) + 8;
    int v6 = result | (*((_DWORD *)this + 7) << 8);
    *((_DWORD *)this + 7) = v6;
  }

  int v7 = v4 - 7;
  uint64_t result = (v6 >> v7) & 0x7F;
  *((_DWORD *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = v7;
  return result;
}

uint64_t ctu::C2KSmsPackedToUnpackedTransform::reset(uint64_t this)
{
  *(_DWORD *)(this + 2std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_BYTE *)(this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0;
  *(_BYTE *)(this + memset(&context, 0, 24) = 0;
  return this;
}

uint64_t ctu::C2KSmsUnpackedToPackedTransform::nextCode(ctu::C2KSmsUnpackedToPackedTransform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  int v3 = *((_DWORD *)this + 8);
  if (v3 >= 8)
  {
    int v7 = *((_DWORD *)this + 7);
LABEL_8:
    int v9 = v3 - 8;
    uint64_t result = (v7 >> v9);
    *((_DWORD *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = v9;
  }

  else
  {
    while (1)
    {
      int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
      int v5 = *((_DWORD *)this + 7);
      if (v4 == -1) {
        break;
      }
      int v6 = *((_DWORD *)this + 8);
      int v3 = v6 + 7;
      int v7 = v4 & 0x7F | (v5 << 7);
      *((_DWORD *)this + 7) = v7;
      *((_DWORD *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = v6 + 7;
      if (v6 >= 1) {
        goto LABEL_8;
      }
    }

    uint64_t result = (v5 << (8 - *((_DWORD *)this + 8)));
    *((_DWORD *)this + 2) = 0;
  }

  return result;
}

uint64_t ctu::C2KSmsUnpackedToPackedTransform::reset(uint64_t this)
{
  *(_DWORD *)(this + 2std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_BYTE *)(this + memset(&context, 0, 24) = 0;
  return this;
}

uint64_t ctu::Ucs2ToAscii7Transform::nextCode(ctu::Ucs2ToAscii7Transform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
  if ((_DWORD)result != -1 && result >= 0x80)
  {
    *((_BYTE *)this + memset(&context, 0, 24) = 1;
    return 32LL;
  }

  return result;
}

uint64_t ctu::Ascii7ToUcs2Transform::nextCode(ctu::Ascii7ToUcs2Transform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
}

uint64_t ctu::ISOLatin1ToUcs2Transform::nextCode(ctu::ISOLatin1ToUcs2Transform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
}

uint64_t ctu::Ucs2ToGsm7Transform::nextCode(ctu::Ucs2ToGsm7Transform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  uint64_t result = *((unsigned int *)this + 7);
  if ((_DWORD)result == -1)
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
    if ((_DWORD)result != -1)
    {
      uint64_t result = ctu::ucs2ToGsm7(result, *((_DWORD *)this + 8));
      if ((_DWORD)result == 255)
      {
        *((_BYTE *)this + memset(&context, 0, 24) = 1;
        return 32LL;
      }

      else if (result >= 0x80)
      {
        *((_DWORD *)this + 7) = result & 0x7F;
        return 27LL;
      }
    }
  }

  else
  {
    *((_DWORD *)this + 7) = -1;
  }

  return result;
}

uint64_t ctu::ucs2ToGsm7(unsigned int a1, unsigned int a2)
{
  if ((a1 & 0x80000000) != 0) {
    return 255LL;
  }
  if (a1 < 0x100 || a1 <= 0x17F && a2 == 2)
  {
    if (a2 == 3) {
      unsigned int v2 = 0;
    }
    else {
      unsigned int v2 = a2;
    }
    int v3 = (char *)*(&ctu::kUcs2ToGsm7Tables + v2) + a1;
    return *v3;
  }

  unsigned int v5 = a1 - 896;
  if (a1 - 896 <= 0x4F && a2 == 3)
  {
    int v6 = (char *)&ctu::kUcs2ToGsm7FullGreek;
LABEL_15:
    int v3 = &v6[v5];
    return *v3;
  }

  unsigned int v5 = a1 - 912;
  if (a1 - 912 <= 0x1F)
  {
    int v6 = (char *)&ctu::kUcs2ToGsm7Greek;
    goto LABEL_15;
  }

  if (a1 != 8364) {
    return 255LL;
  }
  else {
    return 229LL;
  }
}

uint64_t ctu::Ucs2ToGsm7Transform::reset(uint64_t this)
{
  *(_DWORD *)(this + 2std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = -1;
  *(_BYTE *)(this + memset(&context, 0, 24) = 0;
  return this;
}

uint64_t ctu::Gsm7ToUcs2Transform::nextCode(ctu::Gsm7ToUcs2Transform *this)
{
  do
  {
    int v2 = *((_DWORD *)this + 2);
    if (!v2) {
      return 0xFFFFFFFFLL;
    }
    *((_DWORD *)this + 2) = v2 - 1;
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
    if ((_DWORD)result == -1) {
      return result;
    }
  }

  while ((result & 0x80) != 0);
  uint64_t v4 = (uint64_t)*(&ctu::kGsm7ToUcs2Tables + *((unsigned int *)this + 8));
  if ((_DWORD)result != 27) {
    return *(__int16 *)(v4 + 2LL * (int)result);
  }
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
  if ((_DWORD)result != -1)
  {
    int v5 = (unsigned __int16)ctu::kGsm7ExtendedToUcs2Tables[*((unsigned int *)this + 7)][(int)result];
    if (v5 == 32) {
      LOWORD(v5) = *(_WORD *)(v4 + 2LL * (int)result);
    }
    return (__int16)v5;
  }

  return result;
}

uint64_t ctu::OctetToGsm7Transform::nextCode(ctu::OctetToGsm7Transform *this)
{
  int v2 = this;
  do
  {
    if (*((_BYTE *)v2 + 24)) {
      return 0xFFFFFFFFLL;
    }
    int v2 = (ctu::OctetToGsm7Transform *)*((void *)v2 + 2);
  }

  while (v2);
  int v3 = *((_DWORD *)this + 2);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v3 - 1;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
  if ((_DWORD)result != -1 && (result & 0x80) != 0) {
    *((_BYTE *)this + memset(&context, 0, 24) = 1;
  }
  return result;
}

uint64_t ctu::OctetToUcs2Transform::nextCode(ctu::OctetToUcs2Transform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
  if ((_DWORD)v3 != -1)
  {
    unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
    if (v4 == -1) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v3 = v4 | ((_DWORD)v3 << 8);
    if (v3 >> 10 == 54)
    {
      int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
      if (v5 != -1)
      {
        int v6 = v5;
        unsigned int v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
        if (v7 != -1) {
          return (v6 << 8) | ((_DWORD)v3 << 16) | v7;
        }
      }

      return 0xFFFFFFFFLL;
    }
  }

  return v3;
}

uint64_t ctu::Ucs2ToOctetTransform::nextCode(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 8);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = this;
  *(_DWORD *)(this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = v1 - 1;
  uint64_t v3 = *(void *)(this + 32);
  if (!v3)
  {
    this = (*(uint64_t (**)(void))(**(void **)(this + 16) + 16LL))(*(void *)(this + 16));
    *(_DWORD *)(v2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = this;
    if ((_DWORD)this == -1) {
      return this;
    }
    if (this >> 27 == 27)
    {
      *(void *)(v2 + 32) = 3LL;
      return BYTE3(this);
    }

    *(void *)(v2 + 32) = 1LL;
    return BYTE1(this);
  }

  *(void *)(this + 32) = v3 - 1;
  switch(v3)
  {
    case 2LL:
      LODWORD(this) = *(_DWORD *)(this + 40);
      return BYTE1(this);
    case 3LL:
      return *(unsigned __int8 *)(this + 42);
    case 4LL:
      LODWORD(this) = *(_DWORD *)(this + 40);
      return BYTE3(this);
  }

  return *(unsigned __int8 *)(this + 40);
}

uint64_t ctu::Ucs2ToOctetTransform::reset(uint64_t this)
{
  *(void *)(this + 32) = 0LL;
  *(_DWORD *)(this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0;
  *(_BYTE *)(this + memset(&context, 0, 24) = 0;
  return this;
}

uint64_t ctu::Ucs2ToAdn8Transform::nextCode(ctu::Ucs2ToAdn8Transform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
  if ((_DWORD)result != -1)
  {
    if ((int)result > 255)
    {
      int v4 = result - *((unsigned __int16 *)this + 13);
      if (v4 >= 128) {
        return 32LL;
      }
      else {
        return v4 | 0x80u;
      }
    }

    else
    {
      return ctu::kUcs2ToGsm7Latin1[(int)result];
    }
  }

  return result;
}

uint64_t ctu::Ucs2ToAdn8Transform::reset(uint64_t this)
{
  *(_BYTE *)(this + memset(&context, 0, 24) = 0;
  return this;
}

uint64_t ctu::Adn8ToUcs2Transform::nextCode(ctu::Adn8ToUcs2Transform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
  if ((_DWORD)result == -1) {
    return result;
  }
  if ((_DWORD)result == 27)
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
    if ((_DWORD)result == -1) {
      return result;
    }
    int v4 = ctu::kGsm7ExtendedToUcs2;
  }

  else
  {
    int v4 = (const __int16 *)&ctu::kGsm7ToUcs2;
  }

  return v4[(int)result];
}

uint64_t ctu::Adn8ToUcs2Transform::reset(uint64_t this)
{
  *(_BYTE *)(this + memset(&context, 0, 24) = 0;
  return this;
}

uint64_t ctu::EucKRToUcs2Transform::nextCode(ctu::EucKRToUcs2Transform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  int v3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
  if (v3 == -1) {
    return 0xFFFFFFFFLL;
  }
  char v11 = -86;
  UInt8 bytes = v3;
  if (v3 >= 128)
  {
    int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16LL))(*((void *)this + 2));
    if (v4 != -1)
    {
      char v11 = v4;
      CFIndex v5 = 2LL;
      goto LABEL_8;
    }

    return 0xFFFFFFFFLL;
  }

  CFIndex v5 = 1LL;
LABEL_8:
  unsigned int v7 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x189604DB0], &bytes, v5, 0x422u, 0);
  if (!v7) {
    return 9633LL;
  }
  int v8 = v7;
  uint64_t CharacterAtIndex = CFStringGetCharacterAtIndex(v7, 0LL);
  CFRelease(v8);
  return CharacterAtIndex;
}

uint64_t ctu::OctetSourceBuffer::nextCode(ctu::OctetSourceBuffer *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  uint64_t v2 = *((void *)this + 4);
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = v3 + 1;
  return *(unsigned __int8 *)(v2 + v3);
}

uint64_t ctu::OctetSourceBuffer::reset(uint64_t this)
{
  *(void *)(this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0LL;
  *(_BYTE *)(this + memset(&context, 0, 24) = 0;
  return this;
}

uint64_t ctu::TextConverter::decodeHexString(ctu::TextConverter *this, const char *a2)
{
  for (uint64_t i = 0LL; a2; --a2)
  {
    int v3 = 16 * i;
    int v5 = *(char *)this;
    this = (ctu::TextConverter *)((char *)this + 1);
    int v4 = v5;
    unsigned int v6 = v5 - 48;
    unsigned int v7 = v5 - 97;
    unsigned int v8 = v5 - 55;
    else {
      unsigned int v9 = v8;
    }
    unsigned int v10 = v4 - 87;
    if (v7 > 5) {
      unsigned int v10 = v9;
    }
    if (v6 <= 9) {
      unsigned int v10 = v6;
    }
    uint64_t i = v10 | v3;
  }

  return i;
}

uint64_t ctu::TextConverter::getGsm7EncodedSize(unsigned int a1, unsigned int a2)
{
  else {
    return 7LL;
  }
}

uint64_t ctu::TextConverter::countCharactersInUtf8Message(ctu::TextConverter *this, const char *a2)
{
  int v2 = (int)a2;
  int v4 = operator new(0x38uLL);
  std::string v4[2] = 0LL;
  *((_BYTE *)v4 + memset(&context, 0, 24) = 0;
  void *v4 = off_189E98230;
  *((_DWORD *)v4 + 2) = v2;
  v4[4] = this;
  void v4[5] = 0LL;
  uint64_t v5 = v2;
  unsigned int v6 = v4;
  v4[6] = v5;
  do
  {
    (*(void (**)(void *))(*v6 + 24LL))(v6);
    unsigned int v6 = (void *)v6[2];
  }

  while (v6);
  unsigned int v7 = operator new(0x20uLL);
  uint64_t v8 = 0LL;
  uint64_t v7[2] = v4;
  *((_BYTE *)v7 + memset(&context, 0, 24) = 0;
  unsigned int v9 = off_189E97E80;
  *unsigned int v7 = off_189E97E80;
  *((_DWORD *)v7 + 2) = 0x7FFFFFFF;
  while (1)
  {
    unsigned int v10 = ((uint64_t (*)(void *))v9[2])(v7);
    if (v10 == -1) {
      break;
    }
    if (v10 >> 26 == 54) {
      uint64_t v11 = 2LL;
    }
    else {
      uint64_t v11 = 1LL;
    }
    v8 += v11;
    unsigned int v9 = (void (**)(ctu::Utf8ToUcs2Transform *__hidden))*v7;
  }

  do
  {
    uint64_t v12 = (void *)v7[2];
    (*(void (**)(void *))(*v7 + 8LL))(v7);
    unsigned int v7 = v12;
  }

  while (v12);
  return v8;
}

void sub_18661A7D8(_Unwind_Exception *a1)
{
  do
  {
    int v3 = (void *)v1[2];
    (*(void (**)(void *))(*v1 + 8LL))(v1);
    int v1 = v3;
  }

  while (v3);
  _Unwind_Resume(a1);
}

uint64_t ctu::TextConverter::countSeptetsInMessage(uint64_t a1, int a2, int a3)
{
  unsigned int v6 = operator new(0x38uLL);
  void v6[2] = 0LL;
  *((_BYTE *)v6 + memset(&context, 0, 24) = 0;
  void *v6 = off_189E98230;
  *((_DWORD *)v6 + 2) = a2;
  v6[4] = a1;
  v6[5] = 0LL;
  uint64_t v7 = a2;
  uint64_t v8 = v6;
  void v6[6] = v7;
  do
  {
    (*(void (**)(void *))(*v8 + 24LL))(v8);
    uint64_t v8 = (void *)v8[2];
  }

  while (v8);
  unsigned int v9 = operator new(0x20uLL);
  void v9[2] = v6;
  *((_BYTE *)v9 + memset(&context, 0, 24) = 0;
  *unsigned int v9 = off_189E97E80;
  *((_DWORD *)v9 + 2) = 0x7FFFFFFF;
  unsigned int v10 = operator new(0x28uLL);
  uint64_t v11 = 0LL;
  void v10[2] = v9;
  uint64_t v12 = off_189E98060;
  *((_BYTE *)v10 + memset(&context, 0, 24) = 0;
  void *v10 = off_189E98060;
  *((_DWORD *)v10 + 7) = -1;
  *((_DWORD *)v10 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = a3;
  *((_DWORD *)v10 + 2) = 0x7FFFFFFF;
  while (((unsigned int (*)(void *))v12[2])(v10) != -1)
  {
    ++v11;
    uint64_t v12 = (void (**)(ctu::Ucs2ToGsm7Transform *__hidden))*v10;
  }

  do
  {
    uint64_t v13 = (void *)v10[2];
    (*(void (**)(void *))(*v10 + 8LL))(v10);
    unsigned int v10 = v13;
  }

  while (v13);
  return v11;
}

void sub_18661A92C(_Unwind_Exception *a1)
{
  do
  {
    int v3 = (void *)v1[2];
    (*(void (**)(void *))(*v1 + 8LL))(v1);
    int v1 = v3;
  }

  while (v3);
  _Unwind_Resume(a1);
}

uint64_t ctu::TextConverter::decodeSmsDataCodingScheme( unsigned int a1, int *a2, int *a3, BOOL *a4, BOOL *a5, _BYTE *a6, BOOL *a7, _BYTE *a8, unsigned int (***a9)(void, uint64_t))
{
  uint64_t result = 0LL;
  uint64_t v61 = *MEMORY[0x1895F89C0];
  *a2 = 4;
  *a6 = 0;
  if (a1 <= 0xFF)
  {
    if ((a1 & 0x80) == 0)
    {
      unsigned __int16 v40 = 1798;
      v59[0] = off_189E98BE8;
      __int128 v60 = v59;
      ctu::logBitFieldWithDesc(a9, a1, &v40, (uint64_t)v59);
      int v15 = v60;
      if (v60 == v59)
      {
        uint64_t v16 = 4LL;
        int v15 = v59;
      }

      else
      {
        if (!v60) {
          goto LABEL_18;
        }
        uint64_t v16 = 5LL;
      }

      (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_18:
      *a4 = (a1 & 0x40) != 0;
      *a5 = (a1 & 0x20) != 0;
      unsigned __int16 v40 = 1285;
      v57[0] = off_189E98C68;
      uint64_t v58 = v57;
      ctu::logBitFieldWithDesc(a9, a1, &v40, (uint64_t)v57);
      uint64_t v25 = v58;
      if (v58 == v57)
      {
        uint64_t v26 = 4LL;
        uint64_t v25 = v57;
      }

      else
      {
        if (!v58)
        {
LABEL_23:
          ctu::decodeGeneralDataCodingIndication(a1, a2, a3, a9);
          return 1LL;
        }

        uint64_t v26 = 5LL;
      }

      (*(void (**)(void))(*v25 + 8 * v26))();
      goto LABEL_23;
    }

    if ((a1 & 0xFFFFFFC0) == 0x80)
    {
      unsigned __int16 v40 = 1796;
      v55[0] = off_189E98CE8;
      uint64_t v56 = v55;
      ctu::logBitFieldWithDesc(a9, a1, &v40, (uint64_t)v55);
      int v17 = v56;
      if (v56 == v55)
      {
        uint64_t v18 = 4LL;
        int v17 = v55;
      }

      else
      {
        if (!v56) {
          goto LABEL_29;
        }
        uint64_t v18 = 5LL;
      }

      (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_29:
      unsigned __int16 v40 = 770;
      v53[0] = off_189E98D68;
      uint64_t v54 = v53;
      ctu::logBitFieldWithDesc(a9, a1, &v40, (uint64_t)v53);
      int v29 = v54;
      if (v54 == v53)
      {
        uint64_t v30 = 4LL;
        int v29 = v53;
      }

      else
      {
        if (!v54) {
          goto LABEL_34;
        }
        uint64_t v30 = 5LL;
      }

      (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_34:
      unsigned __int16 v40 = 256;
      v51[0] = off_189E98DE8;
      uint64_t v52 = v51;
      ctu::logBitFieldWithDesc(a9, a1, &v40, (uint64_t)v51);
      int v31 = v52;
      if (v52 == v51)
      {
        uint64_t v32 = 4LL;
        int v31 = v51;
      }

      else
      {
        if (!v52) {
          goto LABEL_39;
        }
        uint64_t v32 = 5LL;
      }

      (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_39:
      if ((a1 & 0xC) == 4)
      {
        int v33 = 3;
LABEL_64:
        *a3 = v33;
        return 1LL;
      }

      return 0LL;
    }

    unsigned int v22 = a1 >> 4;
    if ((a1 & 0xFFFFFFE0) != 0xC0 && v22 != 14)
    {
      if (v22 != 15) {
        return 0LL;
      }
      unsigned __int16 v40 = 1796;
      v41[0] = off_189E99068;
      uint64_t v42 = v41;
      ctu::logBitFieldWithDesc(a9, a1, &v40, (uint64_t)v41);
      int v23 = v42;
      if (v42 == v41)
      {
        uint64_t v24 = 4LL;
        int v23 = v41;
      }

      else
      {
        if (!v42)
        {
LABEL_67:
          ctu::decodeDataCodingMessageHandling(a1, a2, a3, a9);
          return 1LL;
        }

        uint64_t v24 = 5LL;
      }

      (*(void (**)(void))(*v23 + 8 * v24))();
      goto LABEL_67;
    }

    unsigned __int16 v40 = 1796;
    v49[0] = off_189E98E68;
    uint64_t v50 = v49;
    ctu::logBitFieldWithDesc(a9, a1, &v40, (uint64_t)v49);
    uint64_t v27 = v50;
    if (v50 == v49)
    {
      uint64_t v28 = 4LL;
      uint64_t v27 = v49;
    }

    else
    {
      if (!v50) {
        goto LABEL_44;
      }
      uint64_t v28 = 5LL;
    }

    (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_44:
    unsigned __int16 v40 = 771;
    v47[0] = off_189E98EE8;
    unint64_t v48 = v47;
    ctu::logBitFieldWithDesc(a9, a1, &v40, (uint64_t)v47);
    uint64_t v34 = v48;
    if (v48 == v47)
    {
      uint64_t v35 = 4LL;
      uint64_t v34 = v47;
    }

    else
    {
      if (!v48) {
        goto LABEL_49;
      }
      uint64_t v35 = 5LL;
    }

    (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_49:
    unsigned __int16 v40 = 514;
    v45[0] = off_189E98F68;
    __int128 v46 = v45;
    ctu::logBitFieldWithDesc(a9, a1, &v40, (uint64_t)v45);
    xpc_object_t v36 = v46;
    if (v46 == v45)
    {
      uint64_t v37 = 4LL;
      xpc_object_t v36 = v45;
    }

    else
    {
      if (!v46) {
        goto LABEL_54;
      }
      uint64_t v37 = 5LL;
    }

    (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_54:
    unsigned __int16 v40 = 256;
    v43[0] = off_189E98FE8;
    __int128 v44 = v43;
    ctu::logBitFieldWithDesc(a9, a1, &v40, (uint64_t)v43);
    termios v38 = v44;
    if (v44 == v43)
    {
      uint64_t v39 = 4LL;
      termios v38 = v43;
    }

    else
    {
      if (!v44)
      {
LABEL_59:
        if (v22 == 12) {
          *a8 = 1;
        }
        if ((a1 & 3) == 0)
        {
          *a6 = 1;
          *a7 = (a1 & 8) != 0;
        }

        int v33 = 2 * (v22 == 14);
        goto LABEL_64;
      }

      uint64_t v39 = 5LL;
    }

    (*(void (**)(void))(*v38 + 8 * v39))();
    goto LABEL_59;
  }

  return result;
}

void sub_18661AE70( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
  uint64_t v37 = a14;
  if (a14 == v35)
  {
    uint64_t v38 = 4LL;
    uint64_t v37 = &a11;
  }

  else
  {
    if (!a14) {
      goto LABEL_6;
    }
    uint64_t v38 = 5LL;
  }

  (*(void (**)(void))(*(void *)v37 + 8 * v38))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void *ctu::decodeGeneralDataCodingIndication( unsigned int a1, int *a2, int *a3, unsigned int (***a4)(void, uint64_t))
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  unsigned __int16 v14 = 1028;
  v21[0] = off_189E98488;
  unsigned int v22 = v21;
  ctu::logBitFieldWithDesc(a4, a1, &v14, (uint64_t)v21);
  uint64_t v8 = v22;
  if (v22 == v21)
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = v21;
  }

  else
  {
    if (!v22) {
      goto LABEL_6;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  if ((a1 & 0x10) != 0)
  {
    *a2 = a1 & 3;
    unsigned __int16 v14 = 256;
    v19[0] = off_189E98508;
    xpc_object_t v20 = v19;
    ctu::logBitFieldWithDesc(a4, a1, &v14, (uint64_t)v19);
    unsigned int v10 = v20;
    if (v20 == v19)
    {
      uint64_t v11 = 4LL;
      unsigned int v10 = v19;
      goto LABEL_13;
    }
  }

  else
  {
    *a2 = 4;
    unsigned __int16 v14 = 256;
    v17[0] = off_189E98588;
    uint64_t v18 = v17;
    ctu::logBitFieldWithDesc(a4, a1, &v14, (uint64_t)v17);
    unsigned int v10 = v18;
    if (v18 == v17)
    {
      uint64_t v11 = 4LL;
      unsigned int v10 = v17;
      goto LABEL_13;
    }
  }

  if (!v10) {
    goto LABEL_14;
  }
  uint64_t v11 = 5LL;
LABEL_13:
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_14:
  *a3 = (a1 >> 2) & 3;
  unsigned __int16 v14 = 770;
  v15[0] = off_189E98608;
  uint64_t v16 = v15;
  ctu::logBitFieldWithDesc(a4, a1, &v14, (uint64_t)v15);
  uint64_t result = v16;
  if (v16 == v15)
  {
    uint64_t v13 = 4LL;
    uint64_t result = v15;
  }

  else
  {
    if (!v16) {
      return result;
    }
    uint64_t v13 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_18661B190( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, char *a21)
{
  uint64_t v23 = a21;
  if (a21 == v21)
  {
    uint64_t v24 = 4LL;
    uint64_t v23 = &a18;
  }

  else
  {
    if (!a21) {
      goto LABEL_6;
    }
    uint64_t v24 = 5LL;
  }

  (*(void (**)(void))(*(void *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void *ctu::decodeDataCodingMessageHandling( unsigned int a1, int *a2, int *a3, unsigned int (***a4)(void, uint64_t))
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  unsigned __int16 v14 = 771;
  v19[0] = off_189E98688;
  xpc_object_t v20 = v19;
  ctu::logBitFieldWithDesc(a4, a1, &v14, (uint64_t)v19);
  uint64_t v8 = v20;
  if (v20 == v19)
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = v19;
  }

  else
  {
    if (!v20) {
      goto LABEL_6;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  unsigned __int16 v14 = 514;
  v17[0] = off_189E98708;
  uint64_t v18 = v17;
  ctu::logBitFieldWithDesc(a4, a1, &v14, (uint64_t)v17);
  unsigned int v10 = v18;
  if (v18 == v17)
  {
    uint64_t v11 = 4LL;
    unsigned int v10 = v17;
  }

  else
  {
    if (!v18) {
      goto LABEL_11;
    }
    uint64_t v11 = 5LL;
  }

  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  *a3 = (a1 >> 2) & 1;
  unsigned __int16 v14 = 256;
  v15[0] = off_189E98788;
  uint64_t v16 = v15;
  ctu::logBitFieldWithDesc(a4, a1, &v14, (uint64_t)v15);
  uint64_t result = v16;
  if (v16 == v15)
  {
    uint64_t v13 = 4LL;
    uint64_t result = v15;
    goto LABEL_15;
  }

  if (v16)
  {
    uint64_t v13 = 5LL;
LABEL_15:
    uint64_t result = (void *)(*(uint64_t (**)(void))(*result + 8 * v13))();
  }

  *a2 = a1 & 3;
  return result;
}

void sub_18661B3AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  uint64_t v23 = a13;
  if (a13 == v21)
  {
    uint64_t v24 = 4LL;
    uint64_t v23 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v24 = 5LL;
  }

  (*(void (**)(void))(*(void *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t ctu::TextConverter::decodeSmsDataCodingScheme( unsigned int a1, unsigned int *a2, _DWORD *a3, BOOL *a4, BOOL *a5, _BYTE *a6, BOOL *a7, _BYTE *a8, std::string *a9)
{
  uint64_t result = 0LL;
  uint64_t v120 = *MEMORY[0x1895F89C0];
  *a2 = 4;
  *a6 = 0;
  if (a1 <= 0xFF)
  {
    if ((a1 & 0x80) == 0)
    {
      LOWORD(v112) = 1798;
      v106[0] = off_189E990E8;
      uint64_t v107 = v106;
      ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v112, (uint64_t)v106, &v116);
      if ((v118 & 0x80u) == 0) {
        int v15 = (const std::string::value_type *)&v116;
      }
      else {
        int v15 = (const std::string::value_type *)v116;
      }
      if ((v118 & 0x80u) == 0) {
        std::string::size_type v16 = v118;
      }
      else {
        std::string::size_type v16 = v117;
      }
      std::string::append(a9, v15, v16);
      int v17 = v107;
      if (v107 == v106)
      {
        uint64_t v18 = 4LL;
        int v17 = v106;
      }

      else
      {
        if (!v107) {
          goto LABEL_42;
        }
        uint64_t v18 = 5LL;
      }

      (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_42:
      *a4 = (a1 & 0x40) != 0;
      *a5 = (a1 & 0x20) != 0;
      LOWORD(v112) = 1285;
      v104[0] = off_189E99178;
      uint64_t v105 = v104;
      ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v112, (uint64_t)v104, &v116);
      if ((v118 & 0x80u) == 0) {
        int v31 = (const std::string::value_type *)&v116;
      }
      else {
        int v31 = (const std::string::value_type *)v116;
      }
      if ((v118 & 0x80u) == 0) {
        std::string::size_type v32 = v118;
      }
      else {
        std::string::size_type v32 = v117;
      }
      std::string::append(a9, v31, v32);
      int v33 = v105;
      if (v105 == v104)
      {
        uint64_t v34 = 4LL;
        int v33 = v104;
      }

      else
      {
        if (!v105) {
          goto LABEL_55;
        }
        uint64_t v34 = 5LL;
      }

      (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_55:
      LOWORD(v10std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 1028;
      v116 = off_189E98808;
      uint64_t v119 = (void **)&v116;
      ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v108, (uint64_t)&v116, &v112);
      if ((v114 & 0x80u) == 0) {
        uint64_t v35 = (const std::string::value_type *)&v112;
      }
      else {
        uint64_t v35 = (const std::string::value_type *)v112;
      }
      if ((v114 & 0x80u) == 0) {
        std::string::size_type v36 = v114;
      }
      else {
        std::string::size_type v36 = v113;
      }
      std::string::append(a9, v35, v36);
      uint64_t v37 = (uint64_t (***)())v119;
      if (v119 == (void **)&v116)
      {
        uint64_t v38 = 4LL;
        uint64_t v37 = &v116;
      }

      else
      {
        if (!v119) {
          goto LABEL_68;
        }
        uint64_t v38 = 5LL;
      }

      (*v37)[v38]();
LABEL_68:
      if ((a1 & 0x10) != 0)
      {
        *a2 = a1 & 3;
        LOWORD(__p) = 256;
        unint64_t v112 = off_189E98898;
        v115 = (void **)&v112;
        ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&__p, (uint64_t)&v112, &v108);
        if ((v110 & 0x80u) == 0) {
          uint64_t v39 = (const std::string::value_type *)&v108;
        }
        else {
          uint64_t v39 = (const std::string::value_type *)v108;
        }
        if ((v110 & 0x80u) == 0) {
          std::string::size_type v40 = v110;
        }
        else {
          std::string::size_type v40 = v109;
        }
      }

      else
      {
        *a2 = 4;
        LOWORD(__p) = 256;
        unint64_t v112 = off_189E98918;
        v115 = (void **)&v112;
        ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&__p, (uint64_t)&v112, &v108);
        if ((v110 & 0x80u) == 0) {
          uint64_t v39 = (const std::string::value_type *)&v108;
        }
        else {
          uint64_t v39 = (const std::string::value_type *)v108;
        }
        if ((v110 & 0x80u) == 0) {
          std::string::size_type v40 = v110;
        }
        else {
          std::string::size_type v40 = v109;
        }
      }

      std::string::append(a9, v39, v40);
      uint64_t v41 = (uint64_t (***)())v115;
      if (v115 == (void **)&v112)
      {
        uint64_t v42 = 4LL;
        uint64_t v41 = &v112;
      }

      else
      {
        if (!v115) {
          goto LABEL_88;
        }
        uint64_t v42 = 5LL;
      }

      (*v41)[v42]();
LABEL_88:
      *a3 = (a1 >> 2) & 3;
      unsigned __int16 v84 = 770;
      v108 = off_189E98998;
      v111 = (void **)&v108;
      ctu::getBitFieldPrintWithDesc(a1, &v84, (uint64_t)&v108, &__p);
      if ((v87 & 0x80u) == 0) {
        std::__split_buffer<std::string>::pointer p_p = (const std::string::value_type *)&__p;
      }
      else {
        std::__split_buffer<std::string>::pointer p_p = (const std::string::value_type *)__p;
      }
      if ((v87 & 0x80u) == 0) {
        std::string::size_type v44 = v87;
      }
      else {
        std::string::size_type v44 = v86;
      }
      std::string::append(a9, p_p, v44);
      uint64_t v45 = (uint64_t (***)())v111;
      if (v111 == (void **)&v108)
      {
        uint64_t v46 = 4LL;
        uint64_t v45 = &v108;
      }

      else
      {
        if (!v111) {
          return 1LL;
        }
        uint64_t v46 = 5LL;
      }

      (*v45)[v46]();
      return 1LL;
    }

    if ((a1 & 0xFFFFFFC0) == 0x80)
    {
      LOWORD(v112) = 1796;
      v102[0] = off_189E99208;
      char v103 = v102;
      ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v112, (uint64_t)v102, &v116);
      if ((v118 & 0x80u) == 0) {
        uint64_t v19 = (const std::string::value_type *)&v116;
      }
      else {
        uint64_t v19 = (const std::string::value_type *)v116;
      }
      if ((v118 & 0x80u) == 0) {
        std::string::size_type v20 = v118;
      }
      else {
        std::string::size_type v20 = v117;
      }
      std::string::append(a9, v19, v20);
      uint64_t v21 = v103;
      if (v103 == v102)
      {
        uint64_t v22 = 4LL;
        uint64_t v21 = v102;
      }

      else
      {
        if (!v103) {
          goto LABEL_114;
        }
        uint64_t v22 = 5LL;
      }

      (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_114:
      LOWORD(v112) = 770;
      v100[0] = off_189E99288;
      uint64_t v101 = v100;
      ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v112, (uint64_t)v100, &v116);
      if ((v118 & 0x80u) == 0) {
        unint64_t v51 = (const std::string::value_type *)&v116;
      }
      else {
        unint64_t v51 = (const std::string::value_type *)v116;
      }
      if ((v118 & 0x80u) == 0) {
        std::string::size_type v52 = v118;
      }
      else {
        std::string::size_type v52 = v117;
      }
      std::string::append(a9, v51, v52);
      uint64_t v53 = v101;
      if (v101 == v100)
      {
        uint64_t v54 = 4LL;
        uint64_t v53 = v100;
      }

      else
      {
        if (!v101) {
          goto LABEL_127;
        }
        uint64_t v54 = 5LL;
      }

      (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_127:
      LOWORD(v112) = 256;
      v98[0] = off_189E99308;
      unint64_t v99 = v98;
      ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v112, (uint64_t)v98, &v116);
      if ((v118 & 0x80u) == 0) {
        uint64_t v55 = (const std::string::value_type *)&v116;
      }
      else {
        uint64_t v55 = (const std::string::value_type *)v116;
      }
      if ((v118 & 0x80u) == 0) {
        std::string::size_type v56 = v118;
      }
      else {
        std::string::size_type v56 = v117;
      }
      std::string::append(a9, v55, v56);
      uint64_t v57 = v99;
      if (v99 == v98)
      {
        uint64_t v58 = 4LL;
        uint64_t v57 = v98;
      }

      else
      {
        if (!v99) {
          goto LABEL_140;
        }
        uint64_t v58 = 5LL;
      }

      (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_140:
      if ((a1 & 0xC) == 4)
      {
        int v59 = 3;
LABEL_189:
        *a3 = v59;
        return 1LL;
      }

      return 0LL;
    }

    unsigned int v26 = a1 >> 4;
    if ((a1 & 0xFFFFFFE0) != 0xC0 && v26 != 14)
    {
      if (v26 != 15) {
        return 0LL;
      }
      LOWORD(v112) = 1796;
      v88[0] = off_189E995B8;
      uint64_t v89 = v88;
      ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v112, (uint64_t)v88, &v116);
      if ((v118 & 0x80u) == 0) {
        uint64_t v27 = (const std::string::value_type *)&v116;
      }
      else {
        uint64_t v27 = (const std::string::value_type *)v116;
      }
      if ((v118 & 0x80u) == 0) {
        std::string::size_type v28 = v118;
      }
      else {
        std::string::size_type v28 = v117;
      }
      std::string::append(a9, v27, v28);
      int v29 = v89;
      if (v89 == v88)
      {
        uint64_t v30 = 4LL;
        int v29 = v88;
      }

      else
      {
        if (!v89) {
          goto LABEL_194;
        }
        uint64_t v30 = 5LL;
      }

      (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_194:
      LOWORD(v10std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 771;
      v116 = off_189E98A38;
      uint64_t v119 = (void **)&v116;
      ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v108, (uint64_t)&v116, &v112);
      if ((v114 & 0x80u) == 0) {
        int v72 = (const std::string::value_type *)&v112;
      }
      else {
        int v72 = (const std::string::value_type *)v112;
      }
      if ((v114 & 0x80u) == 0) {
        std::string::size_type v73 = v114;
      }
      else {
        std::string::size_type v73 = v113;
      }
      std::string::append(a9, v72, v73);
      uint64_t v74 = (uint64_t (***)())v119;
      if (v119 == (void **)&v116)
      {
        uint64_t v75 = 4LL;
        uint64_t v74 = &v116;
      }

      else
      {
        if (!v119) {
          goto LABEL_207;
        }
        uint64_t v75 = 5LL;
      }

      (*v74)[v75]();
LABEL_207:
      LOWORD(__p) = 514;
      unint64_t v112 = off_189E98AB8;
      v115 = (void **)&v112;
      ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&__p, (uint64_t)&v112, &v108);
      if ((v110 & 0x80u) == 0) {
        int64_t v76 = (const std::string::value_type *)&v108;
      }
      else {
        int64_t v76 = (const std::string::value_type *)v108;
      }
      if ((v110 & 0x80u) == 0) {
        std::string::size_type v77 = v110;
      }
      else {
        std::string::size_type v77 = v109;
      }
      std::string::append(a9, v76, v77);
      uint64_t v78 = (uint64_t (***)())v115;
      if (v115 == (void **)&v112)
      {
        uint64_t v79 = 4LL;
        uint64_t v78 = &v112;
      }

      else
      {
        if (!v115) {
          goto LABEL_220;
        }
        uint64_t v79 = 5LL;
      }

      (*v78)[v79]();
LABEL_220:
      *a3 = (a1 >> 2) & 1;
      unsigned __int16 v84 = 256;
      v108 = off_189E98B48;
      v111 = (void **)&v108;
      ctu::getBitFieldPrintWithDesc(a1, &v84, (uint64_t)&v108, &__p);
      if ((v87 & 0x80u) == 0) {
        std::string v80 = (const std::string::value_type *)&__p;
      }
      else {
        std::string v80 = (const std::string::value_type *)__p;
      }
      if ((v87 & 0x80u) == 0) {
        std::string::size_type v81 = v87;
      }
      else {
        std::string::size_type v81 = v86;
      }
      std::string::append(a9, v80, v81);
      __int128 v82 = (uint64_t (***)())v111;
      if (v111 == (void **)&v108)
      {
        uint64_t v83 = 4LL;
        __int128 v82 = &v108;
      }

      else
      {
        if (!v111)
        {
LABEL_233:
          *a2 = a1 & 3;
          return 1LL;
        }

        uint64_t v83 = 5LL;
      }

      (*v82)[v83]();
      goto LABEL_233;
    }

    LOWORD(v112) = 1796;
    v96[0] = off_189E99388;
    uint64_t v97 = v96;
    ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v112, (uint64_t)v96, &v116);
    if ((v118 & 0x80u) == 0) {
      dispatch_object_t v47 = (const std::string::value_type *)&v116;
    }
    else {
      dispatch_object_t v47 = (const std::string::value_type *)v116;
    }
    if ((v118 & 0x80u) == 0) {
      std::string::size_type v48 = v118;
    }
    else {
      std::string::size_type v48 = v117;
    }
    std::string::append(a9, v47, v48);
    std::__split_buffer<std::string>::pointer v49 = v97;
    if (v97 == v96)
    {
      uint64_t v50 = 4LL;
      std::__split_buffer<std::string>::pointer v49 = v96;
    }

    else
    {
      if (!v97) {
        goto LABEL_145;
      }
      uint64_t v50 = 5LL;
    }

    (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_145:
    LOWORD(v112) = 771;
    v94[0] = off_189E99408;
    unint64_t v95 = v94;
    ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v112, (uint64_t)v94, &v116);
    if ((v118 & 0x80u) == 0) {
      __int128 v60 = (const std::string::value_type *)&v116;
    }
    else {
      __int128 v60 = (const std::string::value_type *)v116;
    }
    if ((v118 & 0x80u) == 0) {
      std::string::size_type v61 = v118;
    }
    else {
      std::string::size_type v61 = v117;
    }
    std::string::append(a9, v60, v61);
    uint64_t v62 = v95;
    if (v95 == v94)
    {
      uint64_t v63 = 4LL;
      uint64_t v62 = v94;
    }

    else
    {
      if (!v95) {
        goto LABEL_158;
      }
      uint64_t v63 = 5LL;
    }

    (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_158:
    LOWORD(v112) = 514;
    v92[0] = off_189E99498;
    unint64_t v93 = v92;
    ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v112, (uint64_t)v92, &v116);
    if ((v118 & 0x80u) == 0) {
      uint64_t v64 = (const std::string::value_type *)&v116;
    }
    else {
      uint64_t v64 = (const std::string::value_type *)v116;
    }
    if ((v118 & 0x80u) == 0) {
      std::string::size_type v65 = v118;
    }
    else {
      std::string::size_type v65 = v117;
    }
    std::string::append(a9, v64, v65);
    uint64_t v66 = v93;
    if (v93 == v92)
    {
      uint64_t v67 = 4LL;
      uint64_t v66 = v92;
    }

    else
    {
      if (!v93) {
        goto LABEL_171;
      }
      uint64_t v67 = 5LL;
    }

    (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_171:
    LOWORD(v112) = 256;
    v90[0] = off_189E99518;
    std::string v91 = v90;
    ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v112, (uint64_t)v90, &v116);
    if ((v118 & 0x80u) == 0) {
      uint64_t v68 = (const std::string::value_type *)&v116;
    }
    else {
      uint64_t v68 = (const std::string::value_type *)v116;
    }
    if ((v118 & 0x80u) == 0) {
      std::string::size_type v69 = v118;
    }
    else {
      std::string::size_type v69 = v117;
    }
    std::string::append(a9, v68, v69);
    unint64_t v70 = v91;
    if (v91 == v90)
    {
      uint64_t v71 = 4LL;
      unint64_t v70 = v90;
    }

    else
    {
      if (!v91)
      {
LABEL_184:
        if (v26 == 12) {
          *a8 = 1;
        }
        if ((a1 & 3) == 0)
        {
          *a6 = 1;
          *a7 = (a1 & 8) != 0;
        }

        int v59 = 2 * (v26 == 14);
        goto LABEL_189;
      }

      uint64_t v71 = 5LL;
    }

    (*(void (**)(void))(*v70 + 8 * v71))();
    goto LABEL_184;
  }

  return result;
}

void sub_18661BF14( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, char a40, uint64_t a41, uint64_t a42, uint64_t a43, char a44)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  dispatch_object_t v47 = *(void **)(v44 + 248);
  if (v47 == (void *)(v45 - 192))
  {
    uint64_t v48 = 4LL;
    dispatch_object_t v47 = (void *)(v45 - 192);
  }

  else
  {
    if (!v47) {
      goto LABEL_8;
    }
    uint64_t v48 = 5LL;
  }

  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

uint64_t ctu::TextConverter::decodeCbsDataCodingScheme(unsigned int a1, int *a2, int *a3, _BYTE *a4)
{
  *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v15 = v8;
  __int128 v16 = v8;
  v14[0] = v8;
  v14[1] = v8;
  ctu::StaticLogger::StaticLogger((ctu::StaticLogger *)v14);
  uint64_t v9 = 0LL;
  BYTE8(v15) = -1;
  *a4 = 0;
  *a2 = 4;
  if (a1 <= 0xFF)
  {
    if ((a1 & 0xF0) != 0)
    {
      if (a1 == 17)
      {
        *a3 = 2;
        goto LABEL_7;
      }

      if (a1 == 16)
      {
        *a3 = 0;
LABEL_7:
        uint64_t v9 = 1LL;
        *a4 = 1;
        goto LABEL_13;
      }

      if (a1 - 33 <= 2)
      {
        *a3 = 2;
LABEL_12:
        uint64_t v9 = 1LL;
        goto LABEL_13;
      }

      if ((a1 & 0xE0 | 0x10) != 0x30)
      {
        if ((a1 & 0xC0) == 0x40)
        {
          ctu::decodeGeneralDataCodingIndication(a1, a2, a3, (unsigned int (***)(void, uint64_t))v14);
        }

        else
        {
          if ((a1 & 0xF0) != 0xF0)
          {
            uint64_t v9 = 0LL;
            goto LABEL_13;
          }

          ctu::decodeDataCodingMessageHandling(a1, a2, a3, (unsigned int (***)(void, uint64_t))v14);
        }

        goto LABEL_12;
      }
    }

    *a3 = 0;
    goto LABEL_12;
  }

void sub_18661C39C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  a9 = &unk_189E96F18;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  ctu::LoggerCommonBase::~LoggerCommonBase(&a9);
  _Unwind_Resume(a1);
}

uint64_t ctu::TextConverter::decodeCbsDataCodingScheme(unsigned __int8 a1, unsigned __int8 *a2)
{
  *a2 = a1;
  return 1LL;
}

void *ctu::asString@<X0>(int a1@<W0>, void *a2@<X8>)
{
  uint64_t result = std::string::basic_string[abi:ne180100]<0>(a2, "DCS:INVALID LANGUAGE");
  switch(a1)
  {
    case 0:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 10LL;
        uint64_t result = (void *)*result;
      }

      else
      {
        *((_BYTE *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 10;
      }

      *((_WORD *)result + 4) = 28257;
      int v4 = "DCS:German";
      goto LABEL_84;
    case 1:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 11LL;
        uint64_t result = (void *)*result;
      }

      else
      {
        *((_BYTE *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 11;
      }

      *(_DWORD *)((char *)result + 7) = 1752394092;
      uint64_t v5 = "DCS:English";
      goto LABEL_87;
    case 2:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 11LL;
        uint64_t result = (void *)*result;
      }

      else
      {
        *((_BYTE *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 11;
      }

      *(_DWORD *)((char *)result + 7) = 1851877740;
      uint64_t v5 = "DCS:Italian";
      goto LABEL_87;
    case 3:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 10LL;
        uint64_t result = (void *)*result;
      }

      else
      {
        *((_BYTE *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 10;
      }

      *((_WORD *)result + 4) = 26723;
      int v4 = "DCS:French";
      goto LABEL_84;
    case 4:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 11LL;
        uint64_t result = (void *)*result;
      }

      else
      {
        *((_BYTE *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 11;
      }

      *(_DWORD *)((char *)result + 7) = 1752394094;
      uint64_t v5 = "DCS:Spanish";
      goto LABEL_87;
    case 5:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 9LL;
        uint64_t result = (void *)*result;
      }

      else
      {
        *((_BYTE *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 9;
      }

      *((_BYTE *)result + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 104;
      unsigned int v6 = "DCS:Dutch";
      goto LABEL_79;
    case 6:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 11LL;
        uint64_t result = (void *)*result;
      }

      else
      {
        *((_BYTE *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 11;
      }

      *(_DWORD *)((char *)result + 7) = 1752394084;
      uint64_t v5 = "DCS:Swedish";
      goto LABEL_87;
    case 7:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 10LL;
        uint64_t result = (void *)*result;
      }

      else
      {
        *((_BYTE *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 10;
      }

      *((_WORD *)result + 4) = 26739;
      int v4 = "DCS:Danish";
      goto LABEL_84;
    case 8:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 14LL;
        uint64_t result = (void *)*result;
      }

      else
      {
        *((_BYTE *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 14;
      }

      uint64_t v7 = "DCS:Portuguese";
      goto LABEL_66;
    case 9:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 11LL;
        uint64_t result = (void *)*result;
      }

      else
      {
        *((_BYTE *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 11;
      }

      *(_DWORD *)((char *)result + 7) = 1752394094;
      uint64_t v5 = "DCS:Finnish";
      goto LABEL_87;
    case 10:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 14LL;
        uint64_t result = (void *)*result;
      }

      else
      {
        *((_BYTE *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 14;
      }

      uint64_t v7 = "DCS:Norweigian";
LABEL_66:
      void *result = *(void *)v7;
      *(void *)((char *)result + 6) = *(void *)(v7 + 6);
      __int128 v8 = (char *)result + 14;
      goto LABEL_91;
    case 11:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 9LL;
        uint64_t result = (void *)*result;
      }

      else
      {
        *((_BYTE *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 9;
      }

      *((_BYTE *)result + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 107;
      unsigned int v6 = "DCS:Greek";
      goto LABEL_79;
    case 12:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 11LL;
        uint64_t result = (void *)*result;
      }

      else
      {
        *((_BYTE *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 11;
      }

      *(_DWORD *)((char *)result + 7) = 1752394091;
      uint64_t v5 = "DCS:Turkish";
      goto LABEL_87;
    case 13:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 13LL;
        uint64_t result = (void *)*result;
      }

      else
      {
        *((_BYTE *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 13;
      }

      uint64_t v9 = "DCS:Hungarian";
      goto LABEL_90;
    case 14:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 10LL;
        uint64_t result = (void *)*result;
      }

      else
      {
        *((_BYTE *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 10;
      }

      *((_WORD *)result + 4) = 26739;
      int v4 = "DCS:Polish";
      goto LABEL_84;
    case 15:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 15LL;
        uint64_t result = (void *)*result;
      }

      else
      {
        *((_BYTE *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 15;
      }

      qmemcpy(result, "DCS:Unspecified", 15);
      __int128 v8 = (char *)result + 15;
      goto LABEL_91;
    case 32:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 9LL;
        uint64_t result = (void *)*result;
      }

      else
      {
        *((_BYTE *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 9;
      }

      *((_BYTE *)result + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 104;
      unsigned int v6 = "DCS:Czech";
LABEL_79:
      void *result = *(void *)v6;
      __int128 v8 = (char *)result + 9;
      goto LABEL_91;
    case 33:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 10LL;
        uint64_t result = (void *)*result;
      }

      else
      {
        *((_BYTE *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 10;
      }

      *((_WORD *)result + 4) = 30565;
      int v4 = "DCS:Hebrew";
      goto LABEL_84;
    case 34:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 10LL;
        uint64_t result = (void *)*result;
      }

      else
      {
        *((_BYTE *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 10;
      }

      *((_WORD *)result + 4) = 25449;
      int v4 = "DCS:Arabic";
LABEL_84:
      void *result = *(void *)v4;
      __int128 v8 = (char *)result + 10;
      goto LABEL_91;
    case 35:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 11LL;
        uint64_t result = (void *)*result;
      }

      else
      {
        *((_BYTE *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 11;
      }

      *(_DWORD *)((char *)result + 7) = 1851877747;
      uint64_t v5 = "DCS:Russian";
LABEL_87:
      void *result = *(void *)v5;
      __int128 v8 = (char *)result + 11;
      goto LABEL_91;
    case 36:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 13LL;
        uint64_t result = (void *)*result;
      }

      else
      {
        *((_BYTE *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 13;
      }

      uint64_t v9 = "DCS:Icelandic";
LABEL_90:
      void *result = *(void *)v9;
      *(void *)((char *)result + 5) = *(void *)(v9 + 5);
      __int128 v8 = (char *)result + 13;
LABEL_91:
      _BYTE *v8 = 0;
      break;
    default:
      return result;
  }

  return result;
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E98488;
  return result;
}

void std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E98488;
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::operator()@<X0>( unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return result;
}

uint64_t std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E98508;
  return result;
}

void std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E98508;
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::operator()@<X0>( unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return result;
}

uint64_t std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E98588;
  return result;
}

void std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E98588;
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::operator()@<X0>( void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Class unspecified");
}

uint64_t std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_3,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_3>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E98608;
  return result;
}

void std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_3,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_3>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E98608;
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_3,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_3>,std::string ()(int)>::operator()@<X0>( unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return result;
}

uint64_t std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_3,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_3>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_3,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_3>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E98688;
  return result;
}

void std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E98688;
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::operator()@<X0>( void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Reserved");
}

uint64_t std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E98708;
  return result;
}

void std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E98708;
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::operator()@<X0>( unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return result;
}

uint64_t std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E98788;
  return result;
}

void std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E98788;
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::operator()@<X0>( unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return result;
}

uint64_t std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E98808;
  return result;
}

void std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E98808;
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0>,std::string ()(int)>::operator()@<X0>( unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return result;
}

uint64_t std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E98898;
  return result;
}

void std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E98898;
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1>,std::string ()(int)>::operator()@<X0>( unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return result;
}

uint64_t std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E98918;
  return result;
}

void std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E98918;
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2>,std::string ()(int)>::operator()@<X0>( void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Class unspecified");
}

uint64_t std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_3,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_3>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E98998;
  return result;
}

void std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_3,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_3>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E98998;
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_3,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_3>,std::string ()(int)>::operator()@<X0>( unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return result;
}

uint64_t std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_3,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_3>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_3,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_3>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E98A38;
  return result;
}

void std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E98A38;
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0>,std::string ()(int)>::operator()@<X0>( void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Reserved");
}

uint64_t std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E98AB8;
  return result;
}

void std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E98AB8;
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1>,std::string ()(int)>::operator()@<X0>( unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return result;
}

uint64_t std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E98B48;
  return result;
}

void std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E98B48;
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2>,std::string ()(int)>::operator()@<X0>( unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return result;
}

uint64_t std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E98BE8;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E98BE8;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::operator()@<X0>( unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return result;
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E98C68;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E98C68;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::operator()@<X0>( unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return result;
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E98CE8;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E98CE8;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::operator()@<X0>( void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Reserved");
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_3,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_3>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E98D68;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_3,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_3>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E98D68;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_3,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_3>,std::string ()(int)>::operator()@<X0>( _DWORD *a1@<X1>, void *a2@<X8>)
{
  if (*a1 == 1) {
    uint64_t v2 = "kKSC5601 encoding";
  }
  else {
    uint64_t v2 = "Reserved";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_3,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_3>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_3,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_3>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_4,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_4>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E98DE8;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_4,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_4>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E98DE8;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_4,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_4>,std::string ()(int)>::operator()@<X0>( void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Reserved");
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_4,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_4>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_4,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_4>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_5,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_5>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E98E68;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_5,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_5>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E98E68;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_5,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_5>,std::string ()(int)>::operator()@<X0>( _DWORD *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = "Message Waiting Indication group: Store message (UCS2)";
  if (*a1 == 13) {
    uint64_t v2 = "Message waiting indication group: Store message (GSM-7)";
  }
  if (*a1 == 12) {
    int v3 = "Message waiting indication group: Discard message";
  }
  else {
    int v3 = (char *)v2;
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_5,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_5>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_5,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_5>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_6,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_6>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E98EE8;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_6,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_6>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E98EE8;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_6,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_6>,std::string ()(int)>::operator()@<X0>( unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return result;
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_6,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_6>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_6,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_6>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_7,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_7>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E98F68;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_7,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_7>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E98F68;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_7,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_7>,std::string ()(int)>::operator()@<X0>( void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Reserved");
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_7,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_7>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_7,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_7>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_8,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_8>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E98FE8;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_8,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_8>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E98FE8;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_8,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_8>,std::string ()(int)>::operator()@<X0>( unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return result;
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_8,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_8>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_8,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_8>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_9,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_9>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E99068;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_9,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_9>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E99068;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_9,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_9>,std::string ()(int)>::operator()@<X0>( void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Data coding/message class");
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_9,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_9>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_9,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_9>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_0,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_0>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E990E8;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_0,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_0>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E990E8;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_0,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_0>,std::string ()(int)>::operator()@<X0>( unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return result;
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_0,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_0>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_0,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_0>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_1,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_1>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E99178;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_1,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_1>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E99178;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_1,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_1>,std::string ()(int)>::operator()@<X0>( unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return result;
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_1,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_1>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_1,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_1>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_2,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_2>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E99208;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_2,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_2>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E99208;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_2,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_2>,std::string ()(int)>::operator()@<X0>( void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Reserved");
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_2,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_2>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_2,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_2>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_3,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_3>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E99288;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_3,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_3>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E99288;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_3,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_3>,std::string ()(int)>::operator()@<X0>( _DWORD *a1@<X1>, void *a2@<X8>)
{
  if (*a1 == 1) {
    uint64_t v2 = "kKSC5601 encoding";
  }
  else {
    uint64_t v2 = "Reserved";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_3,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_3>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_3,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_3>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_4,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_4>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E99308;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_4,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_4>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E99308;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_4,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_4>,std::string ()(int)>::operator()@<X0>( void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Reserved");
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_4,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_4>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_4,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_4>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_5,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_5>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E99388;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_5,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_5>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E99388;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_5,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_5>,std::string ()(int)>::operator()@<X0>( _DWORD *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = "Message Waiting Indication group: Store message (UCS2)";
  if (*a1 == 13) {
    uint64_t v2 = "Message waiting indication group: Store message (GSM-7)";
  }
  if (*a1 == 12) {
    int v3 = "Message waiting indication group: Discard message";
  }
  else {
    int v3 = (char *)v2;
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_5,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_5>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_5,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_5>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_6,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_6>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E99408;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_6,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_6>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E99408;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_6,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_6>,std::string ()(int)>::operator()@<X0>( unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return result;
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_6,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_6>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_6,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_6>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_7,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_7>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E99498;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_7,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_7>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E99498;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_7,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_7>,std::string ()(int)>::operator()@<X0>( void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Reserved");
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_7,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_7>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_7,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_7>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_8,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_8>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E99518;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_8,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_8>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E99518;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_8,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_8>,std::string ()(int)>::operator()@<X0>( unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return result;
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_8,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_8>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_8,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_8>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_9,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_9>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_189E995B8;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_9,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_9>,std::string ()(int)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_189E995B8;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_9,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_9>,std::string ()(int)>::operator()@<X0>( void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Data coding/message class");
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_9,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_9>,std::string ()(int)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_9,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_9>,std::string ()(int)>::target_type()
{
}

void ctu::hex(ctu *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0LL;
  a3->__r_.__value_.__l.__size_ = 0LL;
  a3->__r_.__value_.__l.__cap_ = 0LL;
  if (a2 >= 1)
  {
    int v3 = this;
    uint64_t v5 = (ctu *)((char *)this + a2);
    do
    {
      else {
        char v6 = 48;
      }
      std::string::push_back(a3, v6 + (*(_BYTE *)v3 >> 4));
      unsigned int v7 = *(_BYTE *)v3 & 0xF;
      if (v7 >= 0xA) {
        char v8 = 87;
      }
      else {
        char v8 = 48;
      }
      std::string::push_back(a3, v8 + v7);
      int v3 = (ctu *)((char *)v3 + 1);
    }

    while (v3 < v5);
  }

void sub_18661E140(_Unwind_Exception *exception_object)
{
}

void ctu::hex_sp(ctu *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0LL;
  a3->__r_.__value_.__l.__size_ = 0LL;
  a3->__r_.__value_.__l.__cap_ = 0LL;
  if (a2 >= 1)
  {
    int v3 = this;
    uint64_t v5 = (ctu *)((char *)this + a2);
    do
    {
      else {
        char v6 = 48;
      }
      std::string::push_back(a3, v6 + (*(_BYTE *)v3 >> 4));
      unsigned int v7 = *(_BYTE *)v3 & 0xF;
      if (v7 >= 0xA) {
        char v8 = 87;
      }
      else {
        char v8 = 48;
      }
      std::string::push_back(a3, v8 + v7);
      std::string::push_back(a3, 32);
      int v3 = (ctu *)((char *)v3 + 1);
    }

    while (v3 < v5);
    if ((char)a3->__r_.__value_.__s.__size_ < 0)
    {
      std::string::size_type size = a3->__r_.__value_.__l.__size_;
      if (!size) {
        return;
      }
      std::string::size_type v10 = a3->__r_.__value_.__r.__words[0];
      uint64_t v9 = (char *)(a3->__r_.__value_.__r.__words[0] + size);
    }

    else
    {
      if (!a3->__r_.__value_.__s.__size_) {
        return;
      }
      uint64_t v9 = (char *)a3 + a3->__r_.__value_.__s.__size_;
      std::string::size_type v10 = (std::string::size_type)a3;
    }

    std::string::erase(a3, (std::string::size_type)&v9[~v10], 1uLL);
  }

void sub_18661E234(_Unwind_Exception *exception_object)
{
}

void ctu::hex(ctu **a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = v2 - *a1;
  if (v2 == *a1) {
    int v4 = 0LL;
  }
  else {
    int v4 = *a1;
  }
  ctu::hex(v4, v3, a2);
}

void ctu::hex_sp(ctu **a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = v2 - *a1;
  if (v2 == *a1) {
    int v4 = 0LL;
  }
  else {
    int v4 = *a1;
  }
  ctu::hex_sp(v4, v3, a2);
}

void ctu::hex(ctu *this@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  do
  {
    if ((v2 & 0xFu) >= 0xA) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    std::string::push_back(a2, v4 + (v2 & 0xF));
    unsigned int v5 = v2;
    v2 >>= 4;
  }

  while (v5 > 0xF);
  int size = (char)a2->__r_.__value_.__s.__size_;
  BOOL v7 = size < 0;
  if (size >= 0) {
    char v8 = a2;
  }
  else {
    char v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v7) {
    std::string::size_type v9 = a2->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v9 = a2->__r_.__value_.__s.__size_;
  }
  std::string::size_type v10 = (std::string *)((char *)v8 + v9 - 1);
  if (v9) {
    BOOL v11 = v10 > v8;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    unint64_t v12 = (unint64_t)v8->__r_.__value_.__r.__words + 1;
    do
    {
      std::string::value_type v13 = *(_BYTE *)(v12 - 1);
      *(_BYTE *)(v12 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v10->__r_.__value_.__s.__data_[0];
      v10->__r_.__value_.__s.__data_[0] = v13;
      std::string::size_type v10 = (std::string *)((char *)v10 - 1);
    }

    while (v12++ < (unint64_t)v10);
  }

{
  unsigned __int16 v2;
  char v4;
  unsigned int v5;
  int size;
  BOOL v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  BOOL v11;
  unint64_t v12;
  std::string::value_type v13;
  unsigned __int8 v2 = (unsigned __int16)this;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  do
  {
    if ((v2 & 0xFu) >= 0xA) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    std::string::push_back(a2, v4 + (v2 & 0xF));
    unsigned int v5 = v2;
    v2 >>= 4;
  }

  while (v5 > 0xF);
  int size = (char)a2->__r_.__value_.__s.__size_;
  BOOL v7 = size < 0;
  if (size >= 0) {
    char v8 = a2;
  }
  else {
    char v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v7) {
    std::string::size_type v9 = a2->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v9 = a2->__r_.__value_.__s.__size_;
  }
  std::string::size_type v10 = (std::string *)((char *)v8 + v9 - 1);
  if (v9) {
    BOOL v11 = v10 > v8;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    unint64_t v12 = (unint64_t)v8->__r_.__value_.__r.__words + 1;
    do
    {
      std::string::value_type v13 = *(_BYTE *)(v12 - 1);
      *(_BYTE *)(v12 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v10->__r_.__value_.__s.__data_[0];
      v10->__r_.__value_.__s.__data_[0] = v13;
      std::string::size_type v10 = (std::string *)((char *)v10 - 1);
    }

    while (v12++ < (unint64_t)v10);
  }

{
  unsigned int v2;
  char v4;
  int size;
  BOOL v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  BOOL v10;
  unint64_t v11;
  std::string::value_type v12;
  unsigned __int8 v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  do
  {
    if ((v2 & 0xF) >= 0xA) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    std::string::push_back(a2, v4 + (v2 & 0xF));
    std::string::size_type v10 = v2 > 0xF;
    v2 >>= 4;
  }

  while (v10);
  int size = (char)a2->__r_.__value_.__s.__size_;
  char v6 = size < 0;
  if (size >= 0) {
    BOOL v7 = a2;
  }
  else {
    BOOL v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v6) {
    char v8 = a2->__r_.__value_.__l.__size_;
  }
  else {
    char v8 = a2->__r_.__value_.__s.__size_;
  }
  std::string::size_type v9 = (std::string *)((char *)v7 + v8 - 1);
  if (v8) {
    std::string::size_type v10 = v9 > v7;
  }
  else {
    std::string::size_type v10 = 0;
  }
  if (v10)
  {
    BOOL v11 = (unint64_t)v7->__r_.__value_.__r.__words + 1;
    do
    {
      unint64_t v12 = *(_BYTE *)(v11 - 1);
      *(_BYTE *)(v11 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v9->__r_.__value_.__s.__data_[0];
      v9->__r_.__value_.__s.__data_[0] = v12;
      std::string::size_type v9 = (std::string *)((char *)v9 - 1);
    }

    while (v11++ < (unint64_t)v9);
  }

{
  unsigned __int8 v2;
  char v4;
  unsigned int v5;
  int size;
  BOOL v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  BOOL v11;
  unint64_t v12;
  std::string::value_type v13;
  unsigned __int8 v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  do
  {
    if ((v2 & 0xFu) >= 0xA) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    std::string::push_back(a2, v4 + (v2 & 0xF));
    unsigned int v5 = v2;
    v2 >>= 4;
  }

  while (v5 > 0xF);
  int size = (char)a2->__r_.__value_.__s.__size_;
  BOOL v7 = size < 0;
  if (size >= 0) {
    char v8 = a2;
  }
  else {
    char v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v7) {
    std::string::size_type v9 = a2->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v9 = a2->__r_.__value_.__s.__size_;
  }
  std::string::size_type v10 = (std::string *)((char *)v8 + v9 - 1);
  if (v9) {
    BOOL v11 = v10 > v8;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    unint64_t v12 = (unint64_t)v8->__r_.__value_.__r.__words + 1;
    do
    {
      std::string::value_type v13 = *(_BYTE *)(v12 - 1);
      *(_BYTE *)(v12 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v10->__r_.__value_.__s.__data_[0];
      v10->__r_.__value_.__s.__data_[0] = v13;
      std::string::size_type v10 = (std::string *)((char *)v10 - 1);
    }

    while (v12++ < (unint64_t)v10);
  }

{
  unsigned __int8 v2;
  char v4;
  unsigned int v5;
  int size;
  BOOL v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  BOOL v11;
  unint64_t v12;
  std::string::value_type v13;
  unsigned __int8 v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  do
  {
    if ((v2 & 0xFu) >= 0xA) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    std::string::push_back(a2, v4 + (v2 & 0xF));
    unsigned int v5 = v2;
    v2 >>= 4;
  }

  while (v5 > 0xF);
  int size = (char)a2->__r_.__value_.__s.__size_;
  BOOL v7 = size < 0;
  if (size >= 0) {
    char v8 = a2;
  }
  else {
    char v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v7) {
    std::string::size_type v9 = a2->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v9 = a2->__r_.__value_.__s.__size_;
  }
  std::string::size_type v10 = (std::string *)((char *)v8 + v9 - 1);
  if (v9) {
    BOOL v11 = v10 > v8;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    unint64_t v12 = (unint64_t)v8->__r_.__value_.__r.__words + 1;
    do
    {
      std::string::value_type v13 = *(_BYTE *)(v12 - 1);
      *(_BYTE *)(v12 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v10->__r_.__value_.__s.__data_[0];
      v10->__r_.__value_.__s.__data_[0] = v13;
      std::string::size_type v10 = (std::string *)((char *)v10 - 1);
    }

    while (v12++ < (unint64_t)v10);
  }

{
  unsigned __int16 v2;
  char v4;
  unsigned int v5;
  int size;
  BOOL v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  BOOL v11;
  unint64_t v12;
  std::string::value_type v13;
  unsigned __int8 v2 = (unsigned __int16)this;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  do
  {
    if ((v2 & 0xFu) >= 0xA) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    std::string::push_back(a2, v4 + (v2 & 0xF));
    unsigned int v5 = v2;
    v2 >>= 4;
  }

  while (v5 > 0xF);
  int size = (char)a2->__r_.__value_.__s.__size_;
  BOOL v7 = size < 0;
  if (size >= 0) {
    char v8 = a2;
  }
  else {
    char v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v7) {
    std::string::size_type v9 = a2->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v9 = a2->__r_.__value_.__s.__size_;
  }
  std::string::size_type v10 = (std::string *)((char *)v8 + v9 - 1);
  if (v9) {
    BOOL v11 = v10 > v8;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    unint64_t v12 = (unint64_t)v8->__r_.__value_.__r.__words + 1;
    do
    {
      std::string::value_type v13 = *(_BYTE *)(v12 - 1);
      *(_BYTE *)(v12 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v10->__r_.__value_.__s.__data_[0];
      v10->__r_.__value_.__s.__data_[0] = v13;
      std::string::size_type v10 = (std::string *)((char *)v10 - 1);
    }

    while (v12++ < (unint64_t)v10);
  }

{
  unsigned int v2;
  char v4;
  int size;
  BOOL v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  BOOL v10;
  unint64_t v11;
  std::string::value_type v12;
  unsigned __int8 v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  do
  {
    if ((v2 & 0xF) >= 0xA) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    std::string::push_back(a2, v4 + (v2 & 0xF));
    std::string::size_type v10 = v2 > 0xF;
    v2 >>= 4;
  }

  while (v10);
  int size = (char)a2->__r_.__value_.__s.__size_;
  char v6 = size < 0;
  if (size >= 0) {
    BOOL v7 = a2;
  }
  else {
    BOOL v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v6) {
    char v8 = a2->__r_.__value_.__l.__size_;
  }
  else {
    char v8 = a2->__r_.__value_.__s.__size_;
  }
  std::string::size_type v9 = (std::string *)((char *)v7 + v8 - 1);
  if (v8) {
    std::string::size_type v10 = v9 > v7;
  }
  else {
    std::string::size_type v10 = 0;
  }
  if (v10)
  {
    BOOL v11 = (unint64_t)v7->__r_.__value_.__r.__words + 1;
    do
    {
      unint64_t v12 = *(_BYTE *)(v11 - 1);
      *(_BYTE *)(v11 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v9->__r_.__value_.__s.__data_[0];
      v9->__r_.__value_.__s.__data_[0] = v12;
      std::string::size_type v9 = (std::string *)((char *)v9 - 1);
    }

    while (v11++ < (unint64_t)v9);
  }

void sub_18661E324(_Unwind_Exception *exception_object)
{
}

void sub_18661E3F0(_Unwind_Exception *exception_object)
{
}

void sub_18661E4BC(_Unwind_Exception *exception_object)
{
}

void ctu::hex(unint64_t this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  do
  {
    if ((this & 0xF) >= 0xA) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    std::string::push_back(a2, v4 + (this & 0xF));
    BOOL v10 = this > 0xF;
    this >>= 4;
  }

  while (v10);
  int size = (char)a2->__r_.__value_.__s.__size_;
  BOOL v6 = size < 0;
  if (size >= 0) {
    BOOL v7 = a2;
  }
  else {
    BOOL v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v6) {
    std::string::size_type v8 = a2->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v8 = a2->__r_.__value_.__s.__size_;
  }
  std::string::size_type v9 = (std::string *)((char *)v7 + v8 - 1);
  if (v8) {
    BOOL v10 = v9 > v7;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    unint64_t v11 = (unint64_t)v7->__r_.__value_.__r.__words + 1;
    do
    {
      std::string::value_type v12 = *(_BYTE *)(v11 - 1);
      *(_BYTE *)(v11 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v9->__r_.__value_.__s.__data_[0];
      v9->__r_.__value_.__s.__data_[0] = v12;
      std::string::size_type v9 = (std::string *)((char *)v9 - 1);
    }

    while (v11++ < (unint64_t)v9);
  }

{
  char v4;
  int size;
  BOOL v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  BOOL v10;
  unint64_t v11;
  std::string::value_type v12;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  do
  {
    if ((this & 0xF) >= 0xA) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    std::string::push_back(a2, v4 + (this & 0xF));
    BOOL v10 = this > 0xF;
    this >>= 4;
  }

  while (v10);
  int size = (char)a2->__r_.__value_.__s.__size_;
  BOOL v6 = size < 0;
  if (size >= 0) {
    BOOL v7 = a2;
  }
  else {
    BOOL v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v6) {
    std::string::size_type v8 = a2->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v8 = a2->__r_.__value_.__s.__size_;
  }
  std::string::size_type v9 = (std::string *)((char *)v7 + v8 - 1);
  if (v8) {
    BOOL v10 = v9 > v7;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    unint64_t v11 = (unint64_t)v7->__r_.__value_.__r.__words + 1;
    do
    {
      std::string::value_type v12 = *(_BYTE *)(v11 - 1);
      *(_BYTE *)(v11 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v9->__r_.__value_.__s.__data_[0];
      v9->__r_.__value_.__s.__data_[0] = v12;
      std::string::size_type v9 = (std::string *)((char *)v9 - 1);
    }

    while (v11++ < (unint64_t)v9);
  }

{
  char v4;
  int size;
  BOOL v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  BOOL v10;
  unint64_t v11;
  std::string::value_type v12;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  do
  {
    if ((this & 0xF) >= 0xA) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    std::string::push_back(a2, v4 + (this & 0xF));
    BOOL v10 = this > 0xF;
    this >>= 4;
  }

  while (v10);
  int size = (char)a2->__r_.__value_.__s.__size_;
  BOOL v6 = size < 0;
  if (size >= 0) {
    BOOL v7 = a2;
  }
  else {
    BOOL v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v6) {
    std::string::size_type v8 = a2->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v8 = a2->__r_.__value_.__s.__size_;
  }
  std::string::size_type v9 = (std::string *)((char *)v7 + v8 - 1);
  if (v8) {
    BOOL v10 = v9 > v7;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    unint64_t v11 = (unint64_t)v7->__r_.__value_.__r.__words + 1;
    do
    {
      std::string::value_type v12 = *(_BYTE *)(v11 - 1);
      *(_BYTE *)(v11 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v9->__r_.__value_.__s.__data_[0];
      v9->__r_.__value_.__s.__data_[0] = v12;
      std::string::size_type v9 = (std::string *)((char *)v9 - 1);
    }

    while (v11++ < (unint64_t)v9);
  }

{
  char v4;
  int size;
  BOOL v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  BOOL v10;
  unint64_t v11;
  std::string::value_type v12;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  do
  {
    if ((this & 0xF) >= 0xA) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    std::string::push_back(a2, v4 + (this & 0xF));
    BOOL v10 = this > 0xF;
    this >>= 4;
  }

  while (v10);
  int size = (char)a2->__r_.__value_.__s.__size_;
  BOOL v6 = size < 0;
  if (size >= 0) {
    BOOL v7 = a2;
  }
  else {
    BOOL v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v6) {
    std::string::size_type v8 = a2->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v8 = a2->__r_.__value_.__s.__size_;
  }
  std::string::size_type v9 = (std::string *)((char *)v7 + v8 - 1);
  if (v8) {
    BOOL v10 = v9 > v7;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    unint64_t v11 = (unint64_t)v7->__r_.__value_.__r.__words + 1;
    do
    {
      std::string::value_type v12 = *(_BYTE *)(v11 - 1);
      *(_BYTE *)(v11 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v9->__r_.__value_.__s.__data_[0];
      v9->__r_.__value_.__s.__data_[0] = v12;
      std::string::size_type v9 = (std::string *)((char *)v9 - 1);
    }

    while (v11++ < (unint64_t)v9);
  }

void sub_18661E588(_Unwind_Exception *exception_object)
{
}

void sub_18661E654(_Unwind_Exception *exception_object)
{
}

void sub_18661E720(_Unwind_Exception *exception_object)
{
}

void sub_18661E7EC(_Unwind_Exception *exception_object)
{
}

void sub_18661E8B8(_Unwind_Exception *exception_object)
{
}

void sub_18661E984(_Unwind_Exception *exception_object)
{
}

void sub_18661EA50(_Unwind_Exception *exception_object)
{
}

void sub_18661EB1C(_Unwind_Exception *exception_object)
{
}

void ctu::hex0(ctu *this@<X0>, std::string *a2@<X8>)
{
  unsigned int v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::resize(a2, 2uLL, 48);
  if (v2)
  {
    int size = (char)a2->__r_.__value_.__s.__size_;
    BOOL v5 = size < 0;
    BOOL v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (size >= 0) {
      BOOL v6 = a2;
    }
    std::string::size_type v7 = a2->__r_.__value_.__s.__size_;
    if (v5) {
      std::string::size_type v7 = a2->__r_.__value_.__l.__size_;
    }
    std::string::size_type v8 = (char *)v6 + v7;
    if ((v2 & 0xF) >= 0xA) {
      char v9 = 87;
    }
    else {
      char v9 = 48;
    }
    *(v8 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v9 + (v2 & 0xF);
    if (v2 >= 0xA0) {
      char v10 = 87;
    }
    else {
      char v10 = 48;
    }
    *(v8 - 2) = v10 + (v2 >> 4);
  }

{
  int v2;
  int size;
  BOOL v5;
  std::string *v6;
  std::string::size_type v7;
  _BYTE *v8;
  unsigned int v9;
  char v10;
  char v11;
  unsigned int v2 = (int)this;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::resize(a2, 4uLL, 48);
  if (v2)
  {
    int size = (char)a2->__r_.__value_.__s.__size_;
    BOOL v5 = size < 0;
    BOOL v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (size >= 0) {
      BOOL v6 = a2;
    }
    std::string::size_type v7 = a2->__r_.__value_.__s.__size_;
    if (v5) {
      std::string::size_type v7 = a2->__r_.__value_.__l.__size_;
    }
    std::string::size_type v8 = (char *)v6 + v7 - 1;
    do
    {
      char v9 = (unsigned __int16)v2;
      if ((v2 & 0xFu) >= 0xA) {
        char v10 = 87;
      }
      else {
        char v10 = 48;
      }
      char *v8 = v10 + (v2 & 0xF);
      else {
        unint64_t v11 = 48;
      }
      *(v8 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v11 + (v2 >> 4);
      LOWORD(v2) = BYTE1(v2);
      v8 -= 2;
    }

    while (v9 >= 0x100);
  }

{
  unsigned int v2;
  int size;
  BOOL v5;
  std::string *v6;
  std::string::size_type v7;
  _BYTE *v8;
  char v9;
  char v10;
  BOOL v11;
  unsigned int v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::resize(a2, 8uLL, 48);
  if (v2)
  {
    int size = (char)a2->__r_.__value_.__s.__size_;
    BOOL v5 = size < 0;
    BOOL v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (size >= 0) {
      BOOL v6 = a2;
    }
    std::string::size_type v7 = a2->__r_.__value_.__s.__size_;
    if (v5) {
      std::string::size_type v7 = a2->__r_.__value_.__l.__size_;
    }
    std::string::size_type v8 = (char *)v6 + v7 - 1;
    do
    {
      if ((v2 & 0xF) >= 0xA) {
        char v9 = 87;
      }
      else {
        char v9 = 48;
      }
      char *v8 = v9 + (v2 & 0xF);
      else {
        char v10 = 48;
      }
      *(v8 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v10 + (v2 >> 4);
      v8 -= 2;
      unint64_t v11 = v2 >= 0x100;
      v2 >>= 8;
    }

    while (v11);
  }

{
  unsigned __int8 v2;
  int size;
  BOOL v5;
  std::string *v6;
  std::string::size_type v7;
  char *v8;
  char v9;
  char v10;
  unsigned int v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::resize(a2, 2uLL, 48);
  if (v2)
  {
    int size = (char)a2->__r_.__value_.__s.__size_;
    BOOL v5 = size < 0;
    BOOL v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (size >= 0) {
      BOOL v6 = a2;
    }
    std::string::size_type v7 = a2->__r_.__value_.__s.__size_;
    if (v5) {
      std::string::size_type v7 = a2->__r_.__value_.__l.__size_;
    }
    std::string::size_type v8 = (char *)v6 + v7;
    if ((v2 & 0xFu) >= 0xA) {
      char v9 = 87;
    }
    else {
      char v9 = 48;
    }
    *(v8 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v9 + (v2 & 0xF);
    if (v2 >= 0xA0u) {
      char v10 = 87;
    }
    else {
      char v10 = 48;
    }
    *(v8 - 2) = v10 + (v2 >> 4);
  }

{
  unsigned __int8 v2;
  int size;
  BOOL v5;
  std::string *v6;
  std::string::size_type v7;
  char *v8;
  char v9;
  char v10;
  unsigned int v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::resize(a2, 2uLL, 48);
  if (v2)
  {
    int size = (char)a2->__r_.__value_.__s.__size_;
    BOOL v5 = size < 0;
    BOOL v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (size >= 0) {
      BOOL v6 = a2;
    }
    std::string::size_type v7 = a2->__r_.__value_.__s.__size_;
    if (v5) {
      std::string::size_type v7 = a2->__r_.__value_.__l.__size_;
    }
    std::string::size_type v8 = (char *)v6 + v7;
    if ((v2 & 0xFu) >= 0xA) {
      char v9 = 87;
    }
    else {
      char v9 = 48;
    }
    *(v8 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v9 + (v2 & 0xF);
    if (v2 >= 0xA0u) {
      char v10 = 87;
    }
    else {
      char v10 = 48;
    }
    *(v8 - 2) = v10 + (v2 >> 4);
  }

{
  int v2;
  int size;
  BOOL v5;
  std::string *v6;
  std::string::size_type v7;
  _BYTE *v8;
  unsigned int v9;
  char v10;
  char v11;
  unsigned int v2 = (int)this;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::resize(a2, 4uLL, 48);
  if (v2)
  {
    int size = (char)a2->__r_.__value_.__s.__size_;
    BOOL v5 = size < 0;
    BOOL v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (size >= 0) {
      BOOL v6 = a2;
    }
    std::string::size_type v7 = a2->__r_.__value_.__s.__size_;
    if (v5) {
      std::string::size_type v7 = a2->__r_.__value_.__l.__size_;
    }
    std::string::size_type v8 = (char *)v6 + v7 - 1;
    do
    {
      char v9 = (unsigned __int16)v2;
      if ((v2 & 0xFu) >= 0xA) {
        char v10 = 87;
      }
      else {
        char v10 = 48;
      }
      char *v8 = v10 + (v2 & 0xF);
      else {
        unint64_t v11 = 48;
      }
      *(v8 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v11 + (v2 >> 4);
      LOWORD(v2) = BYTE1(v2);
      v8 -= 2;
    }

    while (v9 >= 0x100);
  }

{
  unsigned int v2;
  int size;
  BOOL v5;
  std::string *v6;
  std::string::size_type v7;
  _BYTE *v8;
  char v9;
  char v10;
  BOOL v11;
  unsigned int v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::resize(a2, 8uLL, 48);
  if (v2)
  {
    int size = (char)a2->__r_.__value_.__s.__size_;
    BOOL v5 = size < 0;
    BOOL v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (size >= 0) {
      BOOL v6 = a2;
    }
    std::string::size_type v7 = a2->__r_.__value_.__s.__size_;
    if (v5) {
      std::string::size_type v7 = a2->__r_.__value_.__l.__size_;
    }
    std::string::size_type v8 = (char *)v6 + v7 - 1;
    do
    {
      if ((v2 & 0xF) >= 0xA) {
        char v9 = 87;
      }
      else {
        char v9 = 48;
      }
      char *v8 = v9 + (v2 & 0xF);
      else {
        char v10 = 48;
      }
      *(v8 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v10 + (v2 >> 4);
      v8 -= 2;
      unint64_t v11 = v2 >= 0x100;
      v2 >>= 8;
    }

    while (v11);
  }

void sub_18661EBBC(_Unwind_Exception *exception_object)
{
}

void sub_18661EC78(_Unwind_Exception *exception_object)
{
}

void sub_18661ED34(_Unwind_Exception *exception_object)
{
}

void ctu::hex0(unint64_t this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::resize(a2, 0x10uLL, 48);
  if (this)
  {
    int size = (char)a2->__r_.__value_.__s.__size_;
    BOOL v5 = size < 0;
    BOOL v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (size >= 0) {
      BOOL v6 = a2;
    }
    std::string::size_type v7 = a2->__r_.__value_.__s.__size_;
    if (v5) {
      std::string::size_type v7 = a2->__r_.__value_.__l.__size_;
    }
    std::string::size_type v8 = (char *)v6 + v7 - 1;
    do
    {
      if ((this & 0xF) >= 0xA) {
        char v9 = 87;
      }
      else {
        char v9 = 48;
      }
      _BYTE *v8 = v9 + (this & 0xF);
      else {
        char v10 = 48;
      }
      *(v8 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v10 + (this >> 4);
      v8 -= 2;
      BOOL v11 = this >= 0x100;
      this >>= 8;
    }

    while (v11);
  }

{
  int size;
  BOOL v5;
  std::string *v6;
  std::string::size_type v7;
  _BYTE *v8;
  char v9;
  char v10;
  BOOL v11;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::resize(a2, 0x10uLL, 48);
  if (this)
  {
    int size = (char)a2->__r_.__value_.__s.__size_;
    BOOL v5 = size < 0;
    BOOL v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (size >= 0) {
      BOOL v6 = a2;
    }
    std::string::size_type v7 = a2->__r_.__value_.__s.__size_;
    if (v5) {
      std::string::size_type v7 = a2->__r_.__value_.__l.__size_;
    }
    std::string::size_type v8 = (char *)v6 + v7 - 1;
    do
    {
      if ((this & 0xF) >= 0xA) {
        char v9 = 87;
      }
      else {
        char v9 = 48;
      }
      _BYTE *v8 = v9 + (this & 0xF);
      else {
        char v10 = 48;
      }
      *(v8 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v10 + (this >> 4);
      v8 -= 2;
      BOOL v11 = this >= 0x100;
      this >>= 8;
    }

    while (v11);
  }

{
  int size;
  BOOL v5;
  std::string *v6;
  std::string::size_type v7;
  _BYTE *v8;
  char v9;
  char v10;
  BOOL v11;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::resize(a2, 0x10uLL, 48);
  if (this)
  {
    int size = (char)a2->__r_.__value_.__s.__size_;
    BOOL v5 = size < 0;
    BOOL v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (size >= 0) {
      BOOL v6 = a2;
    }
    std::string::size_type v7 = a2->__r_.__value_.__s.__size_;
    if (v5) {
      std::string::size_type v7 = a2->__r_.__value_.__l.__size_;
    }
    std::string::size_type v8 = (char *)v6 + v7 - 1;
    do
    {
      if ((this & 0xF) >= 0xA) {
        char v9 = 87;
      }
      else {
        char v9 = 48;
      }
      _BYTE *v8 = v9 + (this & 0xF);
      else {
        char v10 = 48;
      }
      *(v8 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v10 + (this >> 4);
      v8 -= 2;
      BOOL v11 = this >= 0x100;
      this >>= 8;
    }

    while (v11);
  }

{
  int size;
  BOOL v5;
  std::string *v6;
  std::string::size_type v7;
  _BYTE *v8;
  char v9;
  char v10;
  BOOL v11;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::resize(a2, 0x10uLL, 48);
  if (this)
  {
    int size = (char)a2->__r_.__value_.__s.__size_;
    BOOL v5 = size < 0;
    BOOL v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (size >= 0) {
      BOOL v6 = a2;
    }
    std::string::size_type v7 = a2->__r_.__value_.__s.__size_;
    if (v5) {
      std::string::size_type v7 = a2->__r_.__value_.__l.__size_;
    }
    std::string::size_type v8 = (char *)v6 + v7 - 1;
    do
    {
      if ((this & 0xF) >= 0xA) {
        char v9 = 87;
      }
      else {
        char v9 = 48;
      }
      _BYTE *v8 = v9 + (this & 0xF);
      else {
        char v10 = 48;
      }
      *(v8 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v10 + (this >> 4);
      v8 -= 2;
      BOOL v11 = this >= 0x100;
      this >>= 8;
    }

    while (v11);
  }

void sub_18661EDF0(_Unwind_Exception *exception_object)
{
}

void sub_18661EEAC(_Unwind_Exception *exception_object)
{
}

void sub_18661EF50(_Unwind_Exception *exception_object)
{
}

void sub_18661EFF4(_Unwind_Exception *exception_object)
{
}

void sub_18661F0B0(_Unwind_Exception *exception_object)
{
}

void sub_18661F16C(_Unwind_Exception *exception_object)
{
}

void sub_18661F228(_Unwind_Exception *exception_object)
{
}

void sub_18661F2E4(_Unwind_Exception *exception_object)
{
}

double ctu::parse_hex@<D0>(char *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = *((void *)a1 + 1);
  if (a1[23] >= 0)
  {
    uint64_t v5 = a1[23];
  }

  else
  {
    a1 = *(char **)a1;
    uint64_t v5 = v4;
  }

  return ctu::parse_hex(a1, v5, a2, a3);
}

double ctu::parse_hex@<D0>(char *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = 0LL;
  if (a3 == 2)
  {
    uint64_t v5 = a2;
    uint64_t v6 = 0LL;
  }

  else
  {
    if (a3 == 1)
    {
      uint64_t v5 = a2;
      uint64_t v6 = 0LL;
      uint64_t v7 = 1LL;
      goto LABEL_8;
    }

    if (a3) {
      return result;
    }
    uint64_t v5 = a2;
    uint64_t v6 = 1LL;
  }

  uint64_t v7 = 0LL;
LABEL_8:
  ctu::parse_hex_impl((ctu *)&v10, a1, v5, v6, v7);
  uint64_t v8 = v11;
  double result = *(double *)&v10;
  *(_OWORD *)a4 = v10;
  a4[2] = v8;
  return result;
}

void ctu::parse_hex_impl(ctu *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a4;
  uint64_t v7 = a2;
  char v9 = 0LL;
  *(void *)this = 0LL;
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0LL;
  *((void *)this + 2) = 0LL;
  __int128 v10 = &a2[a3];
  uint64_t v11 = MEMORY[0x1895F8770];
  if (!(_DWORD)a4) {
    goto LABEL_9;
  }
LABEL_2:
  if (v7 == v10)
  {
LABEL_9:
    while (v7 != v10)
    {
LABEL_10:
      int v14 = *(unsigned __int8 *)v7;
      unsigned int v15 = v14 - 48;
      unsigned int v16 = v14 - 97;
      else {
        char v17 = v14 - 55;
      }
      char v18 = v14 - 87;
      if (v16 > 5) {
        char v18 = v17;
      }
      if (v15 < 0xA) {
        char v18 = v15;
      }
      if (v7 + 1 == v10) {
        goto LABEL_51;
      }
      uint64_t v19 = v7 + 2;
      int v20 = *((unsigned __int8 *)v7 + 1);
      unsigned int v21 = v20 - 48;
      unsigned int v22 = v20 - 97;
      else {
        char v23 = v20 - 55;
      }
      char v24 = v20 - 87;
      if (v22 > 5) {
        char v24 = v23;
      }
      if (v21 < 0xA) {
        char v24 = v21;
      }
      if ((_DWORD)a5 && v19 != v10 && (v7[2] != 32 || (uint64_t v19 = v7 + 3, v7 + 3 == v10)) || v18 == -1 || v24 == -1)
      {
LABEL_51:
        *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *(void *)this;
        return;
      }

      char v25 = v24 | (16 * v18);
      unint64_t v26 = *((void *)this + 2);
      if ((unint64_t)v9 >= v26)
      {
        uint64_t v28 = v6;
        uint64_t v29 = a5;
        unint64_t v30 = *(void *)this;
        int v31 = &v9[-*(void *)this];
        unint64_t v32 = (unint64_t)(v31 + 1);
        unint64_t v33 = v26 - v30;
        if (2 * v33 > v32) {
          unint64_t v32 = 2 * v33;
        }
        if (v33 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v34 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v34 = v32;
        }
        if (v34) {
          uint64_t v35 = (char *)operator new(v34);
        }
        else {
          uint64_t v35 = 0LL;
        }
        std::string::size_type v36 = &v31[(void)v35];
        uint64_t v37 = &v31[(void)v35];
        *uint64_t v37 = v25;
        uint64_t v27 = v37 + 1;
        if (v9 != (_BYTE *)v30)
        {
          uint64_t v38 = &v9[~v30];
          do
          {
            char v39 = *--v9;
            (v38--)[(void)v35] = v39;
          }

          while (v9 != (_BYTE *)v30);
          char v9 = *(_BYTE **)this;
          std::string::size_type v36 = v35;
        }

        *(void *)this = v36;
        *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v27;
        *((void *)this + 2) = &v35[v34];
        a5 = v29;
        if (v9) {
          operator delete(v9);
        }
        uint64_t v6 = v28;
        uint64_t v11 = MEMORY[0x1895F8770];
      }

      else
      {
        *char v9 = v25;
        uint64_t v27 = v9 + 1;
      }

      *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v27;
      char v9 = v27;
      uint64_t v7 = v19;
      if ((_DWORD)v6) {
        goto LABEL_2;
      }
    }
  }

  else
  {
    do
    {
      unsigned int v12 = *v7;
      if ((v12 & 0x80000000) != 0) {
        int v13 = __maskrune(v12, 0x4000uLL);
      }
      else {
        int v13 = *(_DWORD *)(v11 + 4LL * v12 + 60) & 0x4000;
      }
      if (!v13) {
        goto LABEL_10;
      }
      ++v7;
    }

    while (v7 != v10);
  }

void sub_18661F600(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t ctu::Gestalt::getSysctlAsString@<X0>(const char *a1@<X1>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  size_t __n = 0LL;
  uint64_t result = sysctlbyname(a1, 0LL, &__n, 0LL, 0LL);
  if (!(_DWORD)result && __n)
  {
    std::string::resize(a2, __n, 0);
    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    return sysctlbyname(a1, v6, &__n, 0LL, 0LL);
  }

  return result;
}

void sub_18661F6B8(_Unwind_Exception *exception_object)
{
}

uint64_t ctu::Gestalt::isIPhone(ctu::Gestalt *this)
{
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 0x40000000LL;
  block[2] = ___ZNK3ctu7Gestalt8isIPhoneEv_block_invoke;
  block[3] = &__block_descriptor_tmp_24;
  void block[4] = this;
  if (qword_18C4A4680 != -1) {
    dispatch_once(&qword_18C4A4680, block);
  }
  return _MergedGlobals_7;
}

void ___ZNK3ctu7Gestalt8isIPhoneEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = v11;
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 32) + 48LL))(v11);
  uint64_t v2 = v12;
  int v3 = (char)v12;
  uint64_t v4 = (void *)v11[0];
  if ((v12 & 0x80u) != 0)
  {
    uint64_t v2 = v11[1];
    uint64_t v1 = (void *)v11[0];
  }

  uint64_t v5 = (char *)v1 + v2;
  if (v2 >= 6)
  {
    uint64_t v6 = v1;
    do
    {
      uint64_t v7 = (char *)memchr(v6, 105, v2 - 5);
      if (!v7) {
        break;
      }
      if (*(_DWORD *)v7 == 1869107305 && *((_WORD *)v7 + 2) == 25966) {
        goto LABEL_12;
      }
      uint64_t v6 = v7 + 1;
      uint64_t v2 = v5 - (_BYTE *)v6;
    }

    while (v5 - (_BYTE *)v6 > 5);
  }

  uint64_t v7 = v5;
LABEL_12:
  BOOL v10 = v7 != v5 && v7 - (char *)v1 != -1;
  _MergedGlobals_7 = v10;
  if (v3 < 0) {
    operator delete(v4);
  }
}

uint64_t ctu::Gestalt::isIPad(ctu::Gestalt *this)
{
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 0x40000000LL;
  block[2] = ___ZNK3ctu7Gestalt6isIPadEv_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  void block[4] = this;
  if (qword_18C4A4688 != -1) {
    dispatch_once(&qword_18C4A4688, block);
  }
  return byte_18C4A4679;
}

void ___ZNK3ctu7Gestalt6isIPadEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = v10;
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 32) + 48LL))(v10);
  uint64_t v2 = v11;
  int v3 = (char)v11;
  uint64_t v4 = (void *)v10[0];
  if ((v11 & 0x80u) != 0)
  {
    uint64_t v2 = v10[1];
    uint64_t v1 = (void *)v10[0];
  }

  uint64_t v5 = (char *)v1 + v2;
  if (v2 >= 4)
  {
    uint64_t v6 = v1;
    do
    {
      uint64_t v7 = (char *)memchr(v6, 105, v2 - 3);
      if (!v7) {
        break;
      }
      if (*(_DWORD *)v7 == 1684099177) {
        goto LABEL_9;
      }
      uint64_t v6 = v7 + 1;
      uint64_t v2 = v5 - (_BYTE *)v6;
    }

    while (v5 - (_BYTE *)v6 > 3);
  }

  uint64_t v7 = v5;
LABEL_9:
  BOOL v9 = v7 != v5 && v7 - (char *)v1 != -1;
  byte_18C4A4679 = v9;
  if (v3 < 0) {
    operator delete(v4);
  }
}

uint64_t ctu::Gestalt::isWatch(ctu::Gestalt *this)
{
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 0x40000000LL;
  block[2] = ___ZNK3ctu7Gestalt7isWatchEv_block_invoke;
  block[3] = &__block_descriptor_tmp_5_0;
  void block[4] = this;
  if (qword_18C4A4690 != -1) {
    dispatch_once(&qword_18C4A4690, block);
  }
  return byte_18C4A467A;
}

void ___ZNK3ctu7Gestalt7isWatchEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = v11;
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 32) + 48LL))(v11);
  uint64_t v2 = v12;
  int v3 = (char)v12;
  uint64_t v4 = (void *)v11[0];
  if ((v12 & 0x80u) != 0)
  {
    uint64_t v2 = v11[1];
    uint64_t v1 = (void *)v11[0];
  }

  uint64_t v5 = (char *)v1 + v2;
  if (v2 >= 5)
  {
    uint64_t v6 = v1;
    do
    {
      uint64_t v7 = (char *)memchr(v6, 87, v2 - 4);
      if (!v7) {
        break;
      }
      if (*(_DWORD *)v7 == 1668571479 && v7[4] == 104) {
        goto LABEL_12;
      }
      uint64_t v6 = v7 + 1;
      uint64_t v2 = v5 - (_BYTE *)v6;
    }

    while (v5 - (_BYTE *)v6 > 4);
  }

  uint64_t v7 = v5;
LABEL_12:
  BOOL v10 = v7 != v5 && v7 - (char *)v1 != -1;
  byte_18C4A467A = v10;
  if (v3 < 0) {
    operator delete(v4);
  }
}

uint64_t ctu::Gestalt::isMac(ctu::Gestalt *this)
{
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 0x40000000LL;
  block[2] = ___ZNK3ctu7Gestalt5isMacEv_block_invoke;
  block[3] = &__block_descriptor_tmp_7_1;
  void block[4] = this;
  if (qword_18C4A4698 != -1) {
    dispatch_once(&qword_18C4A4698, block);
  }
  return byte_18C4A467B;
}

void ___ZNK3ctu7Gestalt5isMacEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = v11;
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 32) + 48LL))(v11);
  uint64_t v2 = v12;
  int v3 = (char)v12;
  uint64_t v4 = (void *)v11[0];
  if ((v12 & 0x80u) != 0)
  {
    uint64_t v2 = v11[1];
    uint64_t v1 = (void *)v11[0];
  }

  uint64_t v5 = (char *)v1 + v2;
  if (v2 >= 3)
  {
    uint64_t v6 = v1;
    do
    {
      uint64_t v7 = (char *)memchr(v6, 77, v2 - 2);
      if (!v7) {
        break;
      }
      if (*(_WORD *)v7 == 24909 && v7[2] == 99) {
        goto LABEL_12;
      }
      uint64_t v6 = v7 + 1;
      uint64_t v2 = v5 - (_BYTE *)v6;
    }

    while (v5 - (_BYTE *)v6 > 2);
  }

  uint64_t v7 = v5;
LABEL_12:
  BOOL v10 = v7 != v5 && v7 - (char *)v1 != -1;
  byte_18C4A467B = v10;
  if (v3 < 0) {
    operator delete(v4);
  }
}

std::string *ctu::appendLabelIfBitSet(std::string *result, void *a2, char *__s, uint64_t a4, char *a5)
{
  if ((*a2 & a4) != 0)
  {
    uint64_t v7 = result;
    *a2 &= ~a4;
    std::string::size_type size = result->__r_.__value_.__s.__size_;
    if ((size & 0x80u) != 0LL) {
      std::string::size_type size = result->__r_.__value_.__l.__size_;
    }
    if (__s)
    {
      if (size)
      {
        size_t v9 = strlen(__s);
        std::string::append(v7, __s, v9);
      }
    }

    size_t v10 = strlen(a5);
    return std::string::append(v7, a5, v10);
  }

  return result;
}

{
  std::string *v7;
  std::string::size_type size;
  size_t v9;
  size_t v10;
  if ((*a2 & a4) != 0)
  {
    uint64_t v7 = result;
    *a2 &= ~a4;
    std::string::size_type size = result->__r_.__value_.__s.__size_;
    if ((size & 0x80u) != 0LL) {
      std::string::size_type size = result->__r_.__value_.__l.__size_;
    }
    if (__s)
    {
      if (size)
      {
        size_t v9 = strlen(__s);
        std::string::append(v7, __s, v9);
      }
    }

    size_t v10 = strlen(a5);
    return std::string::append(v7, a5, v10);
  }

  return result;
}

void ctu::appendLeftoverBits(std::string *a1, ctu *this, char *a3)
{
  unsigned __int8 v12 = this;
  if (this)
  {
    ctu::hex((unint64_t)this, &v9);
    uint64_t v6 = std::string::insert(&v9, 0LL, "0x", 2uLL);
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    int64_t cap = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      uint64_t v8 = (char *)__p;
    }
    else {
      uint64_t v8 = (char *)__p[0];
    }
    ctu::appendLabelIfBitSet(a1, &v12, a3, (uint64_t)this, v8);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
  }

void sub_18661FDE4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void xpc::get_subpath(xpc_object_t *a1@<X0>, uint64_t a2@<X1>, xpc_object_t *a3@<X8>)
{
  char v5 = *(_BYTE *)(a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *(void *)a2;
  }
  if (v5 >= 0) {
    unint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v7 = *(void *)(a2 + 8);
  }
  ctu::split_any(v6, v7, ".", 1LL, v23);
  xpc_object_t v8 = *a1;
  *a3 = *a1;
  if (v8)
  {
    xpc_retain(v8);
  }

  else
  {
    xpc_object_t v8 = xpc_null_create();
    *a3 = v8;
  }

  std::string v9 = v23[0];
  size_t v10 = v23[1];
  if (v23[0] == v23[1]) {
    goto LABEL_48;
  }
  uint64_t v11 = MEMORY[0x1895F9250];
  uint64_t v12 = MEMORY[0x1895F9220];
  while (1)
  {
    uint64_t v13 = MEMORY[0x186E3CD4C](v8);
    if (v13 == v11)
    {
      xpc_object_t object = v8;
      if (v8 && MEMORY[0x186E3CD4C](v8) == v11) {
        xpc_retain(v8);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      if (*(void *)v9)
      {
        std::string::basic_string[abi:ne180100](&__p, *(void **)v9, *((void *)v9 + 1));
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::__split_buffer<std::string>::pointer p_p = &__p;
        }
        else {
          std::__split_buffer<std::string>::pointer p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
      }

      else
      {
        memset(&__p, 0, sizeof(__p));
        std::__split_buffer<std::string>::pointer p_p = &__p;
      }

      v20[0] = &object;
      v20[1] = p_p;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v20, &v21);
      xpc_object_t v17 = v21;
      *a3 = v21;
      xpc_object_t v21 = v8;
      xpc_release(v8);
      xpc_object_t v21 = 0LL;
      xpc_release(object);
      goto LABEL_42;
    }

    if (v13 != v12) {
      break;
    }
    if (v8 && MEMORY[0x186E3CD4C](v8) == v12)
    {
      xpc_retain(v8);
      xpc_object_t v14 = v8;
    }

    else
    {
      xpc_object_t v14 = xpc_null_create();
    }

    if (*(void *)v9) {
      std::string::basic_string[abi:ne180100](&__p, *(void **)v9, *((void *)v9 + 1));
    }
    else {
      memset(&__p, 0, sizeof(__p));
    }
    unint64_t v15 = std::stoul(&__p, 0LL, 10);
    if (MEMORY[0x186E3CD4C](v14) == v12 && v15 < xpc_array_get_count(v14))
    {
      xpc_object_t value = xpc_array_get_value(v14, v15);
      xpc_object_t v17 = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        xpc_object_t v17 = xpc_null_create();
      }
      *a3 = v17;
      xpc_release(v8);
    }

    else
    {
      xpc_object_t v17 = xpc_null_create();
      *a3 = v17;
      xpc_release(v8);
    }

    xpc_release(v14);
LABEL_42:
    v9 += 16;
    xpc_object_t v8 = v17;
    if (v9 == v10) {
      goto LABEL_47;
    }
  }

  *a3 = xpc_null_create();
  xpc_release(v8);
LABEL_47:
  std::string v9 = v23[0];
LABEL_48:
  if (v9)
  {
    v23[1] = v9;
    operator delete(v9);
  }

void sub_186620110( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t object, void *__p, uint64_t a20)
{
  *int v20 = 0LL;
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ctu::StagedLogger::~StagedLogger(ctu::StagedLogger *this)
{
  uint64_t v2 = (ctu::StagedLogger *)((char *)this + 64);
  if (*((void *)this + 11)) {
    goto LABEL_6;
  }
  if ((*((char *)this + 87) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 87)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  if (*((void *)this + 9)) {
LABEL_6:
  }
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog( (uint64_t)this,  *((_BYTE *)this + 120),  (ctu::StagedLogger *)((char *)this + 64));
LABEL_7:
  ctu::LogMessageBuffer::~LogMessageBuffer(v2);
  *(void *)this = &unk_189E96F18;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  ctu::LoggerCommonBase::~LoggerCommonBase((void **)this);
}

__int128 *ctu::StagedLogger::forceLog(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v5 = *(unsigned __int8 *)(a1 + 120);
  if (a2 > v5) {
    LOBYTE(v5) = a2;
  }
  *(_BYTE *)(a1 + 120) = v5;
  appended = (std::string *)(a1 + 64);
  if (!*(void *)(a1 + 88))
  {
    if (*(char *)(a1 + 87) < 0)
    {
      if (!*(void *)(a1 + 72)) {
        return ctu::LogMessageBuffer::merge((uint64_t)appended, a3);
      }
    }

    else if (!*(_BYTE *)(a1 + 87))
    {
      return ctu::LogMessageBuffer::merge((uint64_t)appended, a3);
    }
  }

  if (*(void *)(a3 + 24)) {
    goto LABEL_12;
  }
  uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) != 0LL) {
    uint64_t v7 = *(void *)(a3 + 8);
  }
  if (v7) {
LABEL_12:
  }
    appended = ctu::LogMessageBuffer::appendChar(appended, 10);
  return ctu::LogMessageBuffer::merge((uint64_t)appended, a3);
}

void ctu::AssertionRestResourceState::createNotifyWithState( uint64_t a1@<X0>, unsigned int a2@<W1>, xpc_object_t *a3@<X8>)
{
  v3[0] = *(_DWORD *)(a1 + 16);
  v3[1] = a2;
  ctu::rest::write_rest_value(v3, a3);
}

void ctu::AssertionRestResourceState::createNotifyForProvider( ctu::AssertionRestResourceState *this@<X0>, xpc_object_t *a2@<X8>)
{
  v7[0] = *((_DWORD *)this + 4);
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    uint64_t v3 = 16 * v2;
    uint64_t v4 = *((void *)this + 3) + 8LL;
    while (!*(void *)v4 || *(void *)(*(void *)v4 + 8LL) == -1LL)
    {
      v4 += 16LL;
      v3 -= 16LL;
      if (!v3) {
        goto LABEL_6;
      }
    }

    LODWORD(v5) = 1;
  }

  else
  {
LABEL_6:
    uint64_t v5 = *((void *)this + 7);
    if (v5)
    {
      v5 *= 16LL;
      uint64_t v6 = *((void *)this + 6) + 8LL;
      while (!*(void *)v6 || *(void *)(*(void *)v6 + 8LL) == -1LL)
      {
        v6 += 16LL;
        v5 -= 16LL;
        if (!v5) {
          goto LABEL_14;
        }
      }

      LODWORD(v5) = 2;
    }
  }

void ctu::AssertionRestResourceState::dumpState(ctu::AssertionRestResourceState *this@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v5) == MEMORY[0x1895F9250])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }

  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v24 = xpc_int64_create(*((unsigned int *)this + 4));
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  unsigned int v22 = a2;
  char v23 = "generation";
  xpc::dict::object_proxy::operator=((uint64_t)&v22, &v24, &v25);
  xpc_release(v25);
  xpc_object_t v25 = 0LL;
  xpc_release(v24);
  xpc_object_t v24 = 0LL;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v7)
  {
    xpc_object_t v8 = 0LL;
    goto LABEL_20;
  }

  xpc_object_t v8 = std::__shared_weak_count::lock(v7);
  if (!v8 || (uint64_t v9 = *(void *)this) == 0)
  {
LABEL_20:
    unsigned int v22 = a2;
    char v23 = "provider";
    xpc::dict::object_proxy::operator=((uint64_t)&v22, &v19);
    xpc_release(v19);
    xpc_object_t v19 = 0LL;
    if (!v8) {
      goto LABEL_25;
    }
    goto LABEL_21;
  }

  size_t v10 = (const char *)(v9 + 8);
  xpc_object_t v20 = xpc_string_create(v10);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  unsigned int v22 = a2;
  char v23 = "provider";
  xpc::dict::object_proxy::operator=((uint64_t)&v22, &v20, &object);
  xpc_release(object);
  xpc_object_t object = 0LL;
  xpc_release(v20);
  xpc_object_t v20 = 0LL;
LABEL_21:
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    unint64_t v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }

void sub_186620658(_Unwind_Exception *a1)
{
}

void *ctu::AssertionRestResourceState::dumpState(void)const::$_0::operator()(void *a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_array_create(0LL, 0LL);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a1 = v4;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a1 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v5) == MEMORY[0x1895F9220])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }

  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a1 = v6;
LABEL_9:
  xpc_release(v5);
  v9[0] = off_189E99860;
  v9[1] = a1;
  size_t v10 = v9;
  ctu::rest::WatchableRestResourceHelper::map(a2, (uint64_t)v9);
  uint64_t result = v10;
  if (v10 == v9)
  {
    uint64_t v8 = 4LL;
    uint64_t result = v9;
  }

  else
  {
    if (!v10) {
      return result;
    }
    uint64_t v8 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_186620788( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ctu::AssertionRestResource::AssertionRestResource(uint64_t this)
{
  *(void *)this = off_189E997E8;
  *(void *)(this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  *(void *)(this + 16) = 0LL;
  *(void *)(this + memset(&context, 0, 24) = 0LL;
  *(_BYTE *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_189E997E8;
  *(void *)(this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  *(void *)(this + 16) = 0LL;
  *(void *)(this + memset(&context, 0, 24) = 0LL;
  *(_BYTE *)(this + 32) = 0;
  return this;
}

uint64_t ctu::AssertionRestResource::AssertionRestResource(uint64_t result)
{
  *(void *)uint64_t result = off_189E997E8;
  *(void *)(result + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + memset(&context, 0, 24) = 0LL;
  *(_BYTE *)(result + 32) = 1;
  return result;
}

{
  *(void *)uint64_t result = off_189E997E8;
  *(void *)(result + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + memset(&context, 0, 24) = 0LL;
  *(_BYTE *)(result + 32) = 1;
  return result;
}

void ctu::AssertionRestResource::~AssertionRestResource(ctu::AssertionRestResource *this)
{
  *(void *)this = off_189E997E8;
  boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>,void>::~vector((void *)this + 1);
}

{
  *(void *)this = off_189E997E8;
  boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>,void>::~vector((void *)this + 1);
}

{
  *(void *)this = off_189E997E8;
  boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>,void>::~vector((void *)this + 1);
  operator delete(this);
}

uint64_t ctu::AssertionRestResource::handleRestMessage_GET( ctu::AssertionRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  __int128 v5 = *((_OWORD *)a3 + 1);
  v10[0] = *(_OWORD *)a3;
  v10[1] = v5;
  switch(LODWORD(v11[0]))
  {
    case 1:
      ctu::AssertionRestResource::handleMessage_Root_GET(this, a2);
      break;
    case 2:
      ctu::AssertionRestResource::handleMessage_DumpState_GET(this, a2);
      break;
    case 3:
      ctu::AssertionRestResource::handleMessage_Resource_GET((uint64_t)v6, (uint64_t)a2);
      break;
    case 4:
      ctu::AssertionRestResource::handleMessage_Resource_Granted_GET((uint64_t)this, (uint64_t)a2, v11[1], (size_t)v11[2]);
      break;
    case 5:
      ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET((uint64_t)this, (uint64_t)a2, v11[1], (size_t)v11[2]);
      break;
    case 6:
      ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET((uint64_t)this, (uint64_t)a2, v11[1], (size_t)v11[2]);
      break;
    case 7:
      ctu::AssertionRestResource::handleMessage_Resource_Provider_GET( (uint64_t)this,  (uint64_t)a2,  v7,  v11[1],  (size_t)v11[2]);
      break;
    default:
      xpc_object_t object = xpc_null_create();
      (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32LL))(a2, &object);
      xpc_release(object);
      break;
  }

  return 1LL;
}

void sub_1866209F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t ctu::AssertionRestResource::handleMessage_Root_GET( ctu::AssertionRestResource *this, ctu::RestResourceContext *a2)
{
  xpc_object_t v5 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32LL))(a2, &v5);
  xpc_release(v5);
  xpc_object_t v5 = 0LL;
  xpc_release(object);
  return 1LL;
}

void sub_186620BE0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
}

uint64_t ctu::AssertionRestResource::handleMessage_DumpState_GET( ctu::AssertionRestResource *this, ctu::RestResourceContext *a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t v15 = v4;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v15 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v5) == MEMORY[0x1895F9250])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }

  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t v15 = v6;
LABEL_9:
  xpc_release(v5);
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    uint64_t v8 = (void **)*((void *)this + 1);
    uint64_t v9 = 32 * v7;
    do
    {
      ctu::AssertionRestResourceState::dumpState((ctu::AssertionRestResourceState *)v8[3], &v13);
      size_t v10 = v8;
      v12[0] = &v15;
      v12[1] = v10;
      xpc::dict::object_proxy::operator=((uint64_t)v12, &v13, &object);
      xpc_release(object);
      xpc_object_t object = 0LL;
      xpc_release(v13);
      xpc_object_t v13 = 0LL;
      v8 += 4;
      v9 -= 32LL;
    }

    while (v9);
  }

  v12[0] = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    v12[0] = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32LL))(a2, v12);
  xpc_release(v12[0]);
  xpc_release(v15);
  return 1LL;
}

void sub_186620D64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t a14)
{
}

uint64_t ctu::AssertionRestResource::handleMessage_Resource_GET(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (xpc_object_t *)xpc::array_creator::array_creator((xpc::array_creator *)&v11);
  xpc::array_creator::operator()<char const*>("grant", v3, &v6);
  xpc_release(v11);
  xpc::array_creator::operator()<char const*>("revoke", &v6, &v7);
  xpc::array_creator::operator()<char const*>("granted", &v7, &v8);
  xpc::array_creator::operator()<char const*>("revoked", &v8, &object);
  xpc::array_creator::operator()<char const*>("waiting", &object, &v10);
  xpc_object_t v4 = v10;
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v10);
  xpc_object_t v10 = 0LL;
  xpc_release(object);
  xpc_object_t object = 0LL;
  xpc_release(v8);
  xpc_object_t v8 = 0LL;
  xpc_release(v7);
  xpc_object_t v7 = 0LL;
  xpc_release(v6);
  xpc_object_t v11 = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t v11 = xpc_null_create();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)a2 + 32LL))(a2, &v11);
  xpc_release(v11);
  xpc_release(v4);
  return 1LL;
}

void sub_186620EC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t a10, xpc_object_t a11, xpc_object_t object)
{
}

uint64_t ctu::AssertionRestResource::handleMessage_Resource_Granted_GET( uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  xpc_object_t v8 = xpc_array_create(0LL, 0LL);
  xpc_object_t v9 = v8;
  if (v8)
  {
    xpc_object_t object = v8;
  }

  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t object = v9;
    if (!v9)
    {
      xpc_object_t v10 = xpc_null_create();
      xpc_object_t v9 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v9) == MEMORY[0x1895F9220])
  {
    xpc_retain(v9);
    goto LABEL_9;
  }

  xpc_object_t v10 = xpc_null_create();
LABEL_8:
  xpc_object_t object = v10;
LABEL_9:
  xpc_release(v9);
  if (a3)
  {
    std::string::basic_string[abi:ne180100](__p, a3, a4);
  }

  else
  {
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v18 = 0LL;
  }

  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find( (uint64_t)&v19,  (void ***)(a1 + 8),  __p);
  uint64_t v11 = v19;
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (v11 != *(void *)(a1 + 8) + 32LL * *(void *)(a1 + 16))
  {
    uint64_t v12 = *(void *)(v11 + 24);
    v20[0] = off_189E998E0;
    v20[1] = &object;
    xpc_object_t v21 = v20;
    ctu::rest::WatchableRestResourceHelper::map(v12 + 48, (uint64_t)v20);
    uint64_t v13 = v21;
    if (v21 == v20)
    {
      uint64_t v14 = 4LL;
      uint64_t v13 = v20;
    }

    else
    {
      if (!v21) {
        goto LABEL_20;
      }
      uint64_t v14 = 5LL;
    }

    (*(void (**)(void))(*v13 + 8 * v14))();
  }

void sub_186621140( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET( uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  xpc_object_t v8 = xpc_array_create(0LL, 0LL);
  xpc_object_t v9 = v8;
  if (v8)
  {
    xpc_object_t object = v8;
  }

  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t object = v9;
    if (!v9)
    {
      xpc_object_t v10 = xpc_null_create();
      xpc_object_t v9 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v9) == MEMORY[0x1895F9220])
  {
    xpc_retain(v9);
    goto LABEL_9;
  }

  xpc_object_t v10 = xpc_null_create();
LABEL_8:
  xpc_object_t object = v10;
LABEL_9:
  xpc_release(v9);
  if (a3)
  {
    std::string::basic_string[abi:ne180100](__p, a3, a4);
  }

  else
  {
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v18 = 0LL;
  }

  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find( (uint64_t)&v19,  (void ***)(a1 + 8),  __p);
  uint64_t v11 = v19;
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (v11 != *(void *)(a1 + 8) + 32LL * *(void *)(a1 + 16))
  {
    uint64_t v12 = *(void *)(v11 + 24);
    v20[0] = off_189E99960;
    v20[1] = &object;
    xpc_object_t v21 = v20;
    ctu::rest::WatchableRestResourceHelper::map(v12 + 72, (uint64_t)v20);
    uint64_t v13 = v21;
    if (v21 == v20)
    {
      uint64_t v14 = 4LL;
      uint64_t v13 = v20;
    }

    else
    {
      if (!v21) {
        goto LABEL_20;
      }
      uint64_t v14 = 5LL;
    }

    (*(void (**)(void))(*v13 + 8 * v14))();
  }

void sub_186621390( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET( uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  xpc_object_t v8 = xpc_array_create(0LL, 0LL);
  xpc_object_t v9 = v8;
  if (v8)
  {
    xpc_object_t object = v8;
  }

  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t object = v9;
    if (!v9)
    {
      xpc_object_t v10 = xpc_null_create();
      xpc_object_t v9 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v9) == MEMORY[0x1895F9220])
  {
    xpc_retain(v9);
    goto LABEL_9;
  }

  xpc_object_t v10 = xpc_null_create();
LABEL_8:
  xpc_object_t object = v10;
LABEL_9:
  xpc_release(v9);
  if (a3)
  {
    std::string::basic_string[abi:ne180100](__p, a3, a4);
  }

  else
  {
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v18 = 0LL;
  }

  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find( (uint64_t)&v19,  (void ***)(a1 + 8),  __p);
  uint64_t v11 = v19;
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (v11 != *(void *)(a1 + 8) + 32LL * *(void *)(a1 + 16))
  {
    uint64_t v12 = *(void *)(v11 + 24);
    v20[0] = off_189E999E0;
    v20[1] = &object;
    xpc_object_t v21 = v20;
    ctu::rest::WatchableRestResourceHelper::map(v12 + 24, (uint64_t)v20);
    uint64_t v13 = v21;
    if (v21 == v20)
    {
      uint64_t v14 = 4LL;
      uint64_t v13 = v20;
    }

    else
    {
      if (!v21) {
        goto LABEL_20;
      }
      uint64_t v14 = 5LL;
    }

    (*(void (**)(void))(*v13 + 8 * v14))();
  }

void sub_1866215E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ctu::AssertionRestResource::handleMessage_Resource_Provider_GET( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, size_t a5)
{
  xpc_object_t v9 = xpc_array_create(0LL, 0LL);
  if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0LL)
  {
    if (MEMORY[0x186E3CD4C](v9) == MEMORY[0x1895F9220])
    {
      xpc_retain(v9);
      xpc_object_t v10 = v9;
    }

    else
    {
      xpc_object_t v10 = xpc_null_create();
    }
  }

  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v9 = 0LL;
  }

  xpc_release(v9);
  if (a4)
  {
    std::string::basic_string[abi:ne180100](&__p, a4, a5);
  }

  else
  {
    std::string __p = 0LL;
    char v23 = 0LL;
    uint64_t v24 = 0LL;
  }

  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find( (uint64_t)&v25,  (void ***)(a1 + 8),  &__p);
  uint64_t v11 = v25;
  if (SHIBYTE(v24) < 0) {
    operator delete(__p);
  }
  if (v11 != *(void *)(a1 + 8) + 32LL * *(void *)(a1 + 16))
  {
    uint64_t v12 = *(void *)(v11 + 24);
    uint64_t v13 = *(std::__shared_weak_count **)(v12 + 8);
    if (v13)
    {
      uint64_t v14 = std::__shared_weak_count::lock(v13);
      char v23 = v14;
      if (v14)
      {
        xpc_object_t v15 = *(char **)v12;
        std::string __p = v15;
        if (v15)
        {
          xpc_object_t v16 = v15 + 8;
          if (v15[31] < 0) {
            xpc_object_t v16 = *(const char **)v16;
          }
          xpc_object_t v17 = xpc_string_create(v16);
          if (!v17) {
            xpc_object_t v17 = xpc_null_create();
          }
          xpc_array_append_value(v10, v17);
          xpc_release(v17);
          uint64_t v18 = v23;
          if (!v23) {
            goto LABEL_27;
          }
        }

        else
        {
          uint64_t v18 = v14;
        }

        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          unint64_t v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
  }

void sub_186621850( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
}

uint64_t ctu::AssertionRestResource::handleRestMessage_SET( void ***this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  __int128 v6 = *((_OWORD *)a3 + 1);
  v8[0] = *(_OWORD *)a3;
  v8[1] = v6;
  if (LODWORD(v9[0]) == 5)
  {
    ctu::AssertionRestResource::handleMessage_Resource_Revoked_SET(this, a2, a3, v9[1], (size_t)v9[2]);
    return 1LL;
  }

  if (LODWORD(v9[0]) == 4)
  {
    ctu::AssertionRestResource::handleMessage_Resource_Granted_SET((uint64_t)this, a2, a3, v9[1], (size_t)v9[2]);
    return 1LL;
  }

  return 0LL;
}

uint64_t ctu::AssertionRestResource::handleMessage_Resource_Granted_SET( uint64_t a1, ctu::RestResourceContext *a2, _OWORD *a3, void *a4, size_t a5)
{
  xpc_object_t v8 = (void ***)(a1 + 8);
  if (a4)
  {
    std::string::basic_string[abi:ne180100](__p, a4, a5);
  }

  else
  {
    __p[0] = 0LL;
    __p[1] = 0LL;
    *(void *)&__int128 v38 = 0LL;
  }

  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find( (uint64_t)&v30,  v8,  __p);
  xpc_object_t v9 = v30;
  if (SBYTE7(v38) < 0) {
    operator delete(__p[0]);
  }
  if (v9 != (void **)(*(void *)(a1 + 8) + 32LL * *(void *)(a1 + 16)))
  {
    (*(void (**)(void **__return_ptr, ctu::RestResourceContext *))(*(void *)a2 + 24LL))(__p, a2);
    int v10 = xpc::dyn_cast_or_default(__p, 0LL);
    xpc_release(__p[0]);
    if (*((_DWORD *)v9[3] + 4) == v10)
    {
      __int128 v11 = a3[1];
      *(_OWORD *)std::string __p = *a3;
      __int128 v38 = v11;
      ctu::PathView::advance((uint64_t)__p, 1LL);
      xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      LODWORD(v30) = *((_DWORD *)v9[3] + 4);
      HIDWORD(v30) = 2;
      ctu::rest::write_rest_value((unsigned int *)&v30, &object);
      uint64_t v12 = (char *)v9[3];
      ctu::rest::WatchableRestResourceHelper::removeWatchers( (ctu::rest::WatchableRestResourceHelper *)(v12 + 24),  (uint64_t)&v34);
      uint64_t v13 = v34;
      uint64_t v14 = v35;
      if (v34 != v35)
      {
        xpc_object_t v15 = (uint64_t *)(v12 + 48);
        do
        {
          xpc_object_t v16 = *(std::__shared_weak_count **)(v13 + 8);
          unint64_t v32 = *(const ctu::RestResourceConnection **)v13;
          unint64_t v33 = v16;
          if (v16)
          {
            p_shared_owners = (unint64_t *)&v16->__shared_owners_;
            do
              unint64_t v18 = __ldxr(p_shared_owners);
            while (__stxr(v18 + 1, p_shared_owners));
          }

          unint64_t v30 = (void **)0xAAAAAAAAAAAAAAAALL;
          unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
          boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::emplace_unique<std::shared_ptr<ctu::RestResourceConnection>>( v15,  (unint64_t *)&v32,  (__n128 **)&v30);
          int v19 = v31;
          unint64_t v20 = v33;
          if (!v33) {
            goto LABEL_17;
          }
          xpc_object_t v21 = (unint64_t *)&v33->__shared_owners_;
          do
            unint64_t v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
            if (v19)
            {
LABEL_18:
              if (*((void *)&v38 + 1))
              {
                char v23 = __p[0];
                if ((unint64_t)v38 - (unint64_t)__p[0] > 1)
                {
                  else {
                    uint64_t v24 = (void *)(v38 - (unint64_t)__p[0] - 1);
                  }
                }

                else if ((void *)(v38 - (unint64_t)__p[0]) >= __p[1])
                {
                  uint64_t v24 = __p[1];
                }

                else
                {
                  uint64_t v24 = (void *)(v38 - (unint64_t)__p[0]);
                }
              }

              else
              {
                char v23 = __p[0];
                uint64_t v24 = __p[1];
              }

              uint64_t v25 = (ctu::AssertionRestResource *)ctu::PathView::PathView(&v30, (uint64_t)v23, (unint64_t)v24);
              ctu::AssertionRestResource::notifyWatcherWithState( v25,  a2,  (const ctu::PathView *)&v30,  *(const ctu::RestResourceConnection **)v13,  (const xpc::object *)&object);
            }
          }

          else
          {
LABEL_17:
            if (v19) {
              goto LABEL_18;
            }
          }

          v13 += 16LL;
        }

        while (v13 != v14);
      }

      unint64_t v30 = (void **)&v34;
      std::vector<std::shared_ptr<ctu::RestResourceConnection>>::__destroy_vector::operator()[abi:ne180100](&v30);
      if (*((void *)&v38 + 1))
      {
        unint64_t v26 = __p[0];
        if ((unint64_t)v38 - (unint64_t)__p[0] > 1)
        {
          else {
            uint64_t v27 = (void *)(v38 - (unint64_t)__p[0] - 1);
          }
        }

        else if ((void *)(v38 - (unint64_t)__p[0]) >= __p[1])
        {
          uint64_t v27 = __p[1];
        }

        else
        {
          uint64_t v27 = (void *)(v38 - (unint64_t)__p[0]);
        }
      }

      else
      {
        unint64_t v26 = __p[0];
        uint64_t v27 = __p[1];
      }

      uint64_t v28 = (ctu::AssertionRestResource *)ctu::PathView::PathView(&v30, (uint64_t)v26, (unint64_t)v27);
      ctu::AssertionRestResource::notifyProvider( v28,  a2,  (const ctu::PathView *)&v30,  (const ctu::AssertionRestResourceState *)v9[3]);
      xpc_release(object);
    }
  }

  return 1LL;
}

void sub_186621BE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, xpc_object_t object, xpc_object_t a19)
{
}

uint64_t ctu::AssertionRestResource::handleMessage_Resource_Revoked_SET( void ***a1, ctu::RestResourceContext *a2, _OWORD *a3, void *a4, size_t a5)
{
  xpc_object_t v8 = a1 + 1;
  if (a4)
  {
    std::string::basic_string[abi:ne180100](__p, a4, a5);
  }

  else
  {
    __p[0] = 0LL;
    __p[1] = 0LL;
    *(void *)&__int128 v17 = 0LL;
  }

  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find( (uint64_t)v15,  v8,  __p);
  uint64_t v9 = v15[0];
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
  if ((void **)v9 != &a1[1][4 * (void)a1[2]])
  {
    (*(void (**)(void **__return_ptr, ctu::RestResourceContext *))(*(void *)a2 + 24LL))(__p, a2);
    int v10 = xpc::dyn_cast_or_default(__p, 0LL);
    xpc_release(__p[0]);
    if (*(_DWORD *)(*(void *)(v9 + 24) + 16LL) == v10)
    {
      __int128 v11 = a3[1];
      *(_OWORD *)std::string __p = *a3;
      __int128 v17 = v11;
      ctu::PathView::advance((uint64_t)__p, 1LL);
      if (*((void *)&v17 + 1))
      {
        uint64_t v12 = __p[0];
        if ((unint64_t)v17 - (unint64_t)__p[0] > 1)
        {
          else {
            uint64_t v13 = (void *)(v17 - (unint64_t)__p[0] - 1);
          }
        }

        else if ((void *)(v17 - (unint64_t)__p[0]) >= __p[1])
        {
          uint64_t v13 = __p[1];
        }

        else
        {
          uint64_t v13 = (void *)(v17 - (unint64_t)__p[0]);
        }
      }

      else
      {
        uint64_t v12 = __p[0];
        uint64_t v13 = __p[1];
      }

      ctu::PathView::PathView(v15, (uint64_t)v12, (unint64_t)v13);
      ctu::AssertionRestResource::startNewGeneration( (ctu::AssertionRestResource *)a1,  a2,  (const ctu::PathView *)v15,  *(ctu::AssertionRestResourceState **)(v9 + 24));
    }
  }

  return 1LL;
}

void sub_186621D8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object)
{
}

void ctu::AssertionRestResource::notifyWatcherWithState( ctu::AssertionRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3, const ctu::RestResourceConnection *a4, const xpc::object *a5)
{
  xpc_object_t v14 = xpc_null_create();
  if (*(void *)a3)
  {
    std::string::basic_string[abi:ne180100](string, *(void **)a3, *((void *)a3 + 1));
    if (v12 >= 0) {
      uint64_t v9 = string;
    }
    else {
      uint64_t v9 = *(char **)string;
    }
  }

  else
  {
    *(void *)__n128 string = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v9 = string;
    uint64_t v12 = 0LL;
  }

  xpc_object_t object = xpc_string_create(v9);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, const ctu::RestResourceConnection *, xpc_object_t *, xpc_object_t *, const xpc::object *))(*(void *)a2 + 48LL))( a2,  a4,  &v14,  &object,  a5);
  xpc_release(object);
  xpc_object_t object = 0LL;
  if (SHIBYTE(v12) < 0) {
    operator delete(*(void **)string);
  }
  xpc_release(v14);
}

void sub_186621E78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, xpc_object_t a16, xpc_object_t object)
{
}

void ctu::AssertionRestResource::notifyProvider( ctu::AssertionRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3, const ctu::AssertionRestResourceState *a4)
{
  xpc_object_t v4 = (std::__shared_weak_count *)*((void *)a4 + 1);
  if (v4)
  {
    xpc_object_t v8 = std::__shared_weak_count::lock(v4);
    xpc_object_t v21 = v8;
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)a4;
      uint64_t v20 = v10;
      if (v10)
      {
        uint64_t v11 = *(void **)a3;
        size_t v12 = *((void *)a3 + 1);
        memset(&__p, 170, sizeof(__p));
        if (v11) {
          std::string::basic_string[abi:ne180100](&__p, v11, v12);
        }
        else {
          memset(&__p, 0, sizeof(__p));
        }
        ctu::path_join_impl(&__p, "provider", 8uLL);
        xpc_object_t v18 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        ctu::AssertionRestResourceState::createNotifyForProvider(a4, &v18);
        xpc_object_t v17 = xpc_null_create();
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::__split_buffer<std::string>::pointer p_p = &__p;
        }
        else {
          std::__split_buffer<std::string>::pointer p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        xpc_object_t object = xpc_string_create((const char *)p_p);
        if (!object) {
          xpc_object_t object = xpc_null_create();
        }
        (*(void (**)(ctu::RestResourceContext *, uint64_t, xpc_object_t *, xpc_object_t *, xpc_object_t *))(*(void *)a2 + 48LL))( a2,  v10,  &v17,  &object,  &v18);
        xpc_release(object);
        xpc_release(v17);
        xpc_release(v18);
      }

      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }

void sub_186622024( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10, xpc_object_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

void ctu::AssertionRestResource::startNewGeneration( ctu::AssertionRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3, ctu::AssertionRestResourceState *a4)
{
  v11[0] = a4;
  v11[1] = this;
  void v11[2] = a2;
  v11[3] = a3;
  ctu::AssertionRestResource::startNewGeneration(ctu::RestResourceContext &,ctu::PathView const&,ctu::AssertionRestResourceState &)const::$_0::operator()( v11,  (ctu::AssertionRestResourceState *)((char *)a4 + 48));
  if (!*((_BYTE *)this + 32)) {
    ctu::AssertionRestResource::startNewGeneration(ctu::RestResourceContext &,ctu::PathView const&,ctu::AssertionRestResourceState &)const::$_0::operator()( v11,  (ctu::AssertionRestResourceState *)((char *)a4 + 24));
  }
  int v9 = *((_DWORD *)a4 + 4);
  else {
    int v10 = 1;
  }
  *((_DWORD *)a4 + 4) = v10;
  ctu::AssertionRestResource::notifyProvider(v8, a2, a3, a4);
}

uint64_t ctu::AssertionRestResource::handleRestMessage_POP( void ***this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  __int128 v6 = *((_OWORD *)a3 + 1);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v6;
  if (LODWORD(v10[0]) == 7)
  {
    ctu::AssertionRestResource::handleMessage_Resource_Provider_POP( (uint64_t)this,  (void (***)(void **__return_ptr, void))a2,  v7,  v10[1],  (size_t)v10[2]);
    return 1LL;
  }

  if (LODWORD(v10[0]) == 3)
  {
    ctu::AssertionRestResource::handleMessage_Resource_POP(this, a2, a3, v10[1], (size_t)v10[2]);
    return 1LL;
  }

  return 0LL;
}

uint64_t ctu::AssertionRestResource::handleMessage_Resource_POP( void ***a1, ctu::RestResourceContext *a2, const ctu::PathView *a3, void *a4, size_t a5)
{
  xpc_object_t v8 = a1 + 1;
  if (a4)
  {
    std::string::basic_string[abi:ne180100](&__p, a4, a5);
  }

  else
  {
    std::string __p = 0LL;
    uint64_t v25 = 0LL;
    uint64_t v26 = 0LL;
  }

  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find( (uint64_t)&v27,  v8,  &__p);
  uint64_t v9 = v27;
  if (SHIBYTE(v26) < 0) {
    operator delete(__p);
  }
  if ((void **)v9 != &a1[1][4 * (void)a1[2]])
  {
    (**(void (***)(void **__return_ptr, ctu::RestResourceContext *))a2)(&__p, a2);
    if (!__p)
    {
LABEL_25:
      uint64_t v20 = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          unint64_t v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }

      return 1LL;
    }

    int v10 = ctu::rest::WatchableRestResourceHelper::removeWatcher((void *)(*(void *)(v9 + 24) + 48LL), &__p);
    uint64_t v11 = *(void **)(v9 + 24);
    if (v10)
    {
      uint64_t v12 = v11[7];
      if (v12)
      {
        uint64_t v13 = 16 * v12;
        uint64_t v14 = v11[6] + 8LL;
        while (!*(void *)v14 || *(void *)(*(void *)v14 + 8LL) == -1LL)
        {
          v14 += 16LL;
          v13 -= 16LL;
          if (!v13) {
            goto LABEL_21;
          }
        }

        goto LABEL_22;
      }
    }

    else
    {
      int v15 = ctu::rest::WatchableRestResourceHelper::removeWatcher(v11 + 3, &__p);
      uint64_t v11 = *(void **)(v9 + 24);
      if (!v15)
      {
LABEL_22:
        int v19 = 0;
LABEL_23:
        ctu::rest::WatchableRestResourceHelper::removeWatcher(v11 + 9, &__p);
        if (v19) {
          ctu::AssertionRestResource::startNewGeneration( (ctu::AssertionRestResource *)a1,  a2,  a3,  *(ctu::AssertionRestResourceState **)(v9 + 24));
        }
        goto LABEL_25;
      }

      uint64_t v16 = v11[4];
      if (v16)
      {
        uint64_t v17 = 16 * v16;
        uint64_t v18 = v11[3] + 8LL;
        while (!*(void *)v18 || *(void *)(*(void *)v18 + 8LL) == -1LL)
        {
          v18 += 16LL;
          v17 -= 16LL;
          if (!v17) {
            goto LABEL_21;
          }
        }

        goto LABEL_22;
      }
    }

void sub_186622368( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ctu::AssertionRestResource::handleMessage_Resource_Provider_POP( uint64_t a1, void (***a2)(void **__return_ptr, void), uint64_t a3, void *a4, size_t a5)
{
  uint64_t v7 = (void ***)(a1 + 8);
  if (a4)
  {
    std::string::basic_string[abi:ne180100](&__p, a4, a5);
  }

  else
  {
    std::string __p = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
  }

  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find( (uint64_t)&v20,  v7,  &__p);
  uint64_t v8 = v20;
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (v8 != *(void *)(a1 + 8) + 32LL * *(void *)(a1 + 16))
  {
    uint64_t v9 = *(void *)(v8 + 24);
    (**a2)(&__p, a2);
    int v10 = *(std::__shared_weak_count **)(v9 + 8);
    uint64_t v11 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }

    if (v11 == v10)
    {
      uint64_t v14 = *(void **)(v8 + 24);
      int v15 = (std::__shared_weak_count *)v14[1];
      void *v14 = 0LL;
      v14[1] = 0LL;
      if (v15) {
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }

  return 1LL;
}

uint64_t ctu::AssertionRestResource::handleRestMessage_PUSH( ctu::AssertionRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  __int128 v6 = *((_OWORD *)a3 + 1);
  v8[0] = *(_OWORD *)a3;
  v8[1] = v6;
  if (LODWORD(v9[0]) == 7)
  {
    ctu::AssertionRestResource::handleMessage_Resource_Provider_PUSH(this, a2, (__int128 *)a3, v9[1], (size_t)v9[2]);
    return 1LL;
  }

  if (LODWORD(v9[0]) == 3)
  {
    ctu::AssertionRestResource::handleMessage_Resource_PUSH((uint64_t)this, a2, a3, v9[1], (size_t)v9[2]);
    return 1LL;
  }

  return 0LL;
}

uint64_t ctu::AssertionRestResource::handleMessage_Resource_PUSH( uint64_t a1, ctu::RestResourceContext *a2, const ctu::PathView *a3, void *a4, size_t a5)
{
  (**(void (***)(ctu::RestResourceConnection **__return_ptr, ctu::RestResourceContext *))a2)(&v45, a2);
  if (v45)
  {
    if (a4)
    {
      std::string::basic_string[abi:ne180100](&__p, a4, a5);
    }

    else
    {
      std::string __p = 0LL;
      unint64_t v48 = 0LL;
      uint64_t v49 = 0LL;
    }

    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find( (uint64_t)&v44,  (void ***)(a1 + 8),  &__p);
    if (SHIBYTE(v49) < 0)
    {
      operator delete(__p);
      if (a4) {
        goto LABEL_7;
      }
    }

    else if (a4)
    {
LABEL_7:
      std::string::basic_string[abi:ne180100](&__p, a4, a5);
      goto LABEL_10;
    }

    std::string __p = 0LL;
    unint64_t v48 = 0LL;
    uint64_t v49 = 0LL;
LABEL_10:
    ctu::AssertionRestResource::createIfNotPresent((void *)a1, (uint64_t)&__p, &v44);
    if (SHIBYTE(v49) < 0) {
      operator delete(__p);
    }
    int v10 = *(void **)(v44 + 24);
    uint64_t v11 = v10[7];
    if (v11)
    {
      uint64_t v12 = 16 * v11;
      uint64_t v13 = v10[6] + 8LL;
      while (!*(void *)v13 || *(void *)(*(void *)v13 + 8LL) == -1LL)
      {
        v13 += 16LL;
        v12 -= 16LL;
        if (!v12) {
          goto LABEL_17;
        }
      }

      if (!*(_BYTE *)(a1 + 32))
      {
        uint64_t v42 = v45;
        unint64_t v43 = v46;
        if (v46)
        {
          p_shared_owners = (unint64_t *)&v46->__shared_owners_;
          do
            unint64_t v33 = __ldxr(p_shared_owners);
          while (__stxr(v33 + 1, p_shared_owners));
        }

        std::string __p = (void *)0xAAAAAAAAAAAAAAAALL;
        unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
        boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::emplace_unique<std::shared_ptr<ctu::RestResourceConnection>>( v10 + 6,  (unint64_t *)&v42,  (__n128 **)&__p);
        int v34 = v48;
        uint64_t v35 = v43;
        if (v43)
        {
          std::string::size_type v36 = (unint64_t *)&v43->__shared_owners_;
          do
            unint64_t v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }

        uint64_t v27 = v44;
        if (v34)
        {
          xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          LODWORD(__p) = *(_DWORD *)(*(void *)(v44 + 24) + 16LL);
          HIDWORD(__p) = 2;
          ctu::rest::write_rest_value((unsigned int *)&__p, &object);
          ctu::AssertionRestResource::notifyWatcherWithState(v38, a2, a3, v45, (const xpc::object *)&object);
          xpc_release(object);
        }

LABEL_38:
  uint64_t v28 = v46;
  if (v46)
  {
    uint64_t v29 = (unint64_t *)&v46->__shared_owners_;
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  return 1LL;
}

void sub_186622824( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_186622878( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x186622868LL);
}

uint64_t ctu::AssertionRestResource::handleMessage_Resource_Provider_PUSH( void *a1, ctu::RestResourceContext *a2, __int128 *a3, void *a4, size_t a5)
{
  int v10 = (void ***)(a1 + 1);
  if (a4)
  {
    std::string::basic_string[abi:ne180100](__p, a4, a5);
  }

  else
  {
    __p[0] = 0LL;
    __p[1] = 0LL;
    *(void *)&__int128 v31 = 0LL;
  }

  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find( (uint64_t)&v34,  v10,  __p);
  if (SBYTE7(v31) < 0)
  {
    operator delete(__p[0]);
    if (a4) {
      goto LABEL_6;
    }
  }

  else if (a4)
  {
LABEL_6:
    std::string::basic_string[abi:ne180100](__p, a4, a5);
    goto LABEL_9;
  }

  __p[0] = 0LL;
  __p[1] = 0LL;
  *(void *)&__int128 v31 = 0LL;
LABEL_9:
  ctu::AssertionRestResource::createIfNotPresent(a1, (uint64_t)__p, &v34);
  if (SBYTE7(v31) < 0) {
    operator delete(__p[0]);
  }
  (**(void (***)(uint64_t *__return_ptr, ctu::RestResourceContext *))a2)(&v32, a2);
  uint64_t v11 = v32;
  if (v32)
  {
    uint64_t v12 = v34;
    uint64_t v13 = *(void **)(v34 + 24);
    int v14 = (std::__shared_weak_count *)v13[1];
    if (v14) {
      BOOL v15 = v14->__shared_owners_ == -1;
    }
    else {
      BOOL v15 = 1;
    }
    uint64_t v16 = v33;
    if (v33)
    {
      p_shared_weak_owners = (unint64_t *)&v33->__shared_weak_owners_;
      do
        unint64_t v18 = __ldxr(p_shared_weak_owners);
      while (__stxr(v18 + 1, p_shared_weak_owners));
      int v14 = (std::__shared_weak_count *)v13[1];
    }

    *uint64_t v13 = v11;
    v13[1] = v16;
    if (v14) {
      std::__shared_weak_count::__release_weak(v14);
    }
    if (v15)
    {
      *(void *)&__int128 v19 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v19 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)std::string __p = v19;
      __int128 v31 = v19;
      __int128 v20 = a3[1];
      __int128 v28 = *a3;
      __int128 v29 = v20;
      ctu::PathView::advance((uint64_t)&v28, 1LL);
      if (*((void *)&v29 + 1))
      {
        uint64_t v21 = v28;
        if ((void)v29 - (void)v28 > 1uLL)
        {
          else {
            unint64_t v22 = v29 - v28 - 1;
          }
        }

        else if ((void)v29 - (void)v28 >= *((void *)&v28 + 1))
        {
          unint64_t v22 = *((void *)&v28 + 1);
        }

        else
        {
          unint64_t v22 = v29 - v28;
        }
      }

      else
      {
        unint64_t v22 = *((void *)&v28 + 1);
        uint64_t v21 = v28;
      }

      char v23 = (ctu::AssertionRestResource *)ctu::PathView::PathView(__p, v21, v22);
      ctu::AssertionRestResource::notifyProvider( v23,  a2,  (const ctu::PathView *)__p,  *(const ctu::AssertionRestResourceState **)(v12 + 24));
    }
  }

  uint64_t v24 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      unint64_t v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }

  return 1LL;
}

void sub_186622A7C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, char a21)
{
}

uint64_t ctu::AssertionRestResource::handleRestMessage_NOTIFY( ctu::AssertionRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  return 0LL;
}

void ctu::AssertionRestResource::getResourceArray( ctu::AssertionRestResource *this@<X0>, xpc_object_t *a2@<X8>)
{
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_array_create(0LL, 0LL);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v5) == MEMORY[0x1895F9220])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }

  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    uint64_t v8 = (__int128 *)*((void *)this + 1);
    uint64_t v9 = 32 * v7;
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }

      else
      {
        __int128 v10 = *v8;
        __p.__r_.__value_.__l.__cap_ = *((void *)v8 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
      }

      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::__split_buffer<std::string>::pointer p_p = &__p;
      }
      else {
        std::__split_buffer<std::string>::pointer p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v12 = xpc_string_create((const char *)p_p);
      if (!v12) {
        xpc_object_t v12 = xpc_null_create();
      }
      xpc_array_append_value(*a2, v12);
      xpc_release(v12);
      v8 += 2;
      v9 -= 32LL;
    }

    while (v9);
  }

void sub_186622C04( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

BOOL ctu::AssertionRestResource::createIfNotPresent(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1[1];
  unint64_t v5 = a1[2];
  xpc_object_t v4 = (char *)(a1 + 1);
  uint64_t v6 = v3 + 32 * v5;
  uint64_t v7 = *a3;
  if (*a3 == v6)
  {
    uint64_t v11 = (char *)operator new(0x60uLL);
    *((void *)v11 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0LL;
    *((void *)v11 + 2) = 0LL;
    *(void *)uint64_t v11 = 0LL;
    *((_DWORD *)v11 + 4) = 1;
    *(_OWORD *)(v11 + memset(&context, 0, 24) = 0u;
    *(_OWORD *)(v11 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0u;
    *(_OWORD *)(v11 + ++*(_DWORD *)(this + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *((void *)v11 + 1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0LL;
    *(void *)&__int128 v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)uint64_t v24 = v12;
    *(_OWORD *)&v24[16] = v12;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external( (std::string *)v24,  *(const std::string::value_type **)a2,  *(void *)(a2 + 8));
      uint64_t v3 = a1[1];
      unint64_t v5 = a1[2];
    }

    else
    {
      *(_OWORD *)uint64_t v24 = *(_OWORD *)a2;
      *(void *)&v24[16] = *(void *)(a2 + 16);
    }

    *(void *)&v24[24] = v11;
    uint64_t v13 = v3 + 32 * v5;
    while (v5)
    {
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( (void *)(v3 + 32 * (v5 >> 1)),  (void **)v24) & 0x80u) == 0LL)
      {
        v5 >>= 1;
      }

      else
      {
        v3 += 32 * (v5 >> 1) + 32;
        v5 += ~(v5 >> 1);
      }
    }

    if (v3 == v13
      || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v24, (void **)v3) & 0x80) != 0)
    {
      uint64_t v14 = a1[2];
      if (a1[3] == v14)
      {
        boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>*,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>>( &v23,  v4,  (__int128 *)v3,  (__int128 *)v24);
        uint64_t v3 = v23;
      }

      else
      {
        uint64_t v15 = *(void *)v4 + 32 * v14;
        if (v15 == v3)
        {
          __int128 v20 = *(_OWORD *)v24;
          *(void *)(v3 + 16) = *(void *)&v24[16];
          *(_OWORD *)uint64_t v3 = v20;
          memset(v24, 0, sizeof(v24));
          *(void *)(v15 + memset(&context, 0, 24) = *(void *)&v24[24];
          ++a1[2];
        }

        else
        {
          uint64_t v16 = v15 - 32;
          *(_OWORD *)uint64_t v15 = *(_OWORD *)(v15 - 32);
          *(void *)(v15 - 32) = 0LL;
          *(void *)(v15 - memset(&context, 0, 24) = 0LL;
          uint64_t v17 = *(void *)(v15 - 16);
          uint64_t v18 = *(void *)(v15 - 8);
          *(void *)(v15 - 16) = 0LL;
          *(void *)(v15 - std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
          *(void *)(v15 + 16) = v17;
          *(void *)(v15 + memset(&context, 0, 24) = v18;
          ++a1[2];
          if (v15 - 32 != v3)
          {
            do
            {
              uint64_t v19 = v16 - 32;
              boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>::operator=( v16,  (__int128 *)(v16 - 32));
              uint64_t v16 = v19;
            }

            while (v19 != v3);
          }

          boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>::operator=( v3,  (__int128 *)v24);
        }
      }
    }

    uint64_t v21 = *(void **)&v24[24];
    *(void *)&v24[24] = 0LL;
    if (v21) {
      std::default_delete<ctu::AssertionRestResourceState>::operator()[abi:ne180100](v21);
    }
    if ((v24[23] & 0x80000000) != 0) {
      operator delete(*(void **)v24);
    }
    *a3 = v3;
  }

  return v7 == v6;
}

void sub_186622E98(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void ctu::AssertionRestResource::startNewGeneration(ctu::RestResourceContext &,ctu::PathView const&,ctu::AssertionRestResourceState &)const::$_0::operator()( ctu::RestResourceContext **a1, ctu::rest::WatchableRestResourceHelper *this)
{
  if (v16[0] != v16[1])
  {
    xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    uint64_t v18 = (void **)*((unsigned int *)*a1 + 4);
    ctu::rest::write_rest_value((unsigned int *)&v18, &object);
    uint64_t v3 = v16[0];
    uint64_t v4 = v16[1];
    if (v16[0] != v16[1])
    {
      while (1)
      {
        unint64_t v5 = *a1;
        uint64_t v6 = *(std::__shared_weak_count **)(v3 + 8);
        uint64_t v14 = *(const ctu::RestResourceConnection **)v3;
        uint64_t v15 = v6;
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            unint64_t v8 = __ldxr(p_shared_owners);
          while (__stxr(v8 + 1, p_shared_owners));
        }

        uint64_t v18 = (void **)0xAAAAAAAAAAAAAAAALL;
        unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
        boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::emplace_unique<std::shared_ptr<ctu::RestResourceConnection>>( (uint64_t *)v5 + 9,  (unint64_t *)&v14,  (__n128 **)&v18);
        int v10 = v19;
        uint64_t v11 = v15;
        if (v15)
        {
          __int128 v12 = (unint64_t *)&v15->__shared_owners_;
          do
            unint64_t v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13) {
            break;
          }
        }

        if (v10) {
          goto LABEL_11;
        }
LABEL_12:
        v3 += 16LL;
        if (v3 == v4) {
          goto LABEL_16;
        }
      }

      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (!v10) {
        goto LABEL_12;
      }
LABEL_11:
      ctu::AssertionRestResource::notifyWatcherWithState( v9,  a1[2],  a1[3],  *(const ctu::RestResourceConnection **)v3,  (const xpc::object *)&object);
      goto LABEL_12;
    }

void sub_186623004( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *object)
{
  xpc_object_t object = &a11;
  std::vector<std::shared_ptr<ctu::RestResourceConnection>>::__destroy_vector::operator()[abi:ne180100]((void ***)&object);
  _Unwind_Resume(a1);
}

void ctu::AssertionRestResource::handleDroppedConnection( ctu::AssertionRestResource *a1, ctu::RestResourceContext *a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *((void *)a1 + 2);
  if (v4)
  {
    uint64_t v9 = *((void *)a1 + 1);
    uint64_t v10 = v9 + 32 * v4;
    do
    {
      int v11 = ctu::rest::WatchableRestResourceHelper::removeWatcher((void *)(*(void *)(v9 + 24) + 24LL), a4);
      __int128 v12 = *(void **)(v9 + 24);
      if (v11)
      {
        uint64_t v13 = v12[4];
        if (!v13)
        {
LABEL_9:
          int v16 = 1;
          goto LABEL_11;
        }

        uint64_t v14 = 16 * v13;
        uint64_t v15 = v12[3] + 8LL;
        while (!*(void *)v15 || *(void *)(*(void *)v15 + 8LL) == -1LL)
        {
          v15 += 16LL;
          v14 -= 16LL;
          if (!v14) {
            goto LABEL_9;
          }
        }
      }

      int v16 = 0;
LABEL_11:
      int v17 = ctu::rest::WatchableRestResourceHelper::removeWatcher(v12 + 6, a4);
      uint64_t v18 = *(void **)(v9 + 24);
      if (v17)
      {
        uint64_t v19 = v18[7];
        if (v19)
        {
          uint64_t v20 = 16 * v19;
          uint64_t v21 = v18[6] + 8LL;
          while (!*(void *)v21 || *(void *)(*(void *)v21 + 8LL) == -1LL)
          {
            v21 += 16LL;
            v20 -= 16LL;
            if (!v20) {
              goto LABEL_17;
            }
          }

          ctu::rest::WatchableRestResourceHelper::removeWatcher(v18 + 9, a4);
          goto LABEL_37;
        }

void sub_186623210( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<ctu::AssertionRestResourceState::dumpState(void)::$_0::operator() const(ctu::rest::WatchableRestResourceHelper const&)::{lambda(ctu::RestResourceConnection const&)#1},std::allocator<ctu::AssertionRestResourceState::dumpState(void)::$_0::operator() const(ctu::rest::WatchableRestResourceHelper const&)::{lambda(ctu::RestResourceConnection const&)#1}>,void ()(ctu::RestResourceConnection const&)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_189E99860;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ctu::AssertionRestResourceState::dumpState(void)::$_0::operator() const(ctu::rest::WatchableRestResourceHelper const&)::{lambda(ctu::RestResourceConnection const&)#1},std::allocator<ctu::AssertionRestResourceState::dumpState(void)::$_0::operator() const(ctu::rest::WatchableRestResourceHelper const&)::{lambda(ctu::RestResourceConnection const&)#1}>,void ()(ctu::RestResourceConnection const&)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189E99860;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ctu::AssertionRestResourceState::dumpState(void)::$_0::operator() const(ctu::rest::WatchableRestResourceHelper const&)::{lambda(ctu::RestResourceConnection const&)#1},std::allocator<ctu::AssertionRestResourceState::dumpState(void)::$_0::operator() const(ctu::rest::WatchableRestResourceHelper const&)::{lambda(ctu::RestResourceConnection const&)#1}>,void ()(ctu::RestResourceConnection const&)>::operator()( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(xpc_object_t **)(a1 + 8);
  unint64_t v5 = *(const char **)(a2 + 8);
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  else {
    uint64_t v6 = v4;
  }
  xpc_object_t v7 = xpc_string_create(v6);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_array_append_value(*v2, v7);
  xpc_release(v7);
}

void sub_1866232E4(_Unwind_Exception *a1)
{
}

uint64_t std::__function::__func<ctu::AssertionRestResourceState::dumpState(void)::$_0::operator() const(ctu::rest::WatchableRestResourceHelper const&)::{lambda(ctu::RestResourceConnection const&)#1},std::allocator<ctu::AssertionRestResourceState::dumpState(void)::$_0::operator() const(ctu::rest::WatchableRestResourceHelper const&)::{lambda(ctu::RestResourceConnection const&)#1}>,void ()(ctu::RestResourceConnection const&)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::AssertionRestResourceState::dumpState(void)::$_0::operator() const(ctu::rest::WatchableRestResourceHelper const&)::{lambda(ctu::RestResourceConnection const&)#1},std::allocator<ctu::AssertionRestResourceState::dumpState(void)::$_0::operator() const(ctu::rest::WatchableRestResourceHelper const&)::{lambda(ctu::RestResourceConnection const&)#1}>,void ()(ctu::RestResourceConnection const&)>::target_type()
{
}

void *boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>,void>::~vector( void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = (void **)(*a1 + 24LL);
    do
    {
      uint64_t v4 = *v3;
      *uint64_t v3 = 0LL;
      if (v4) {
        std::default_delete<ctu::AssertionRestResourceState>::operator()[abi:ne180100](v4);
      }
      v3 += 4;
      --v2;
    }

    while (v2);
  }

  if (a1[2]) {
    operator delete((void *)*a1);
  }
  return a1;
}

void *std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Granted_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Granted_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_189E998E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Granted_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Granted_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189E998E0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Granted_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Granted_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::operator()( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(xpc_object_t **)(a1 + 8);
  unint64_t v5 = *(const char **)(a2 + 8);
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  else {
    uint64_t v6 = v4;
  }
  xpc_object_t v7 = xpc_string_create(v6);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_array_append_value(*v2, v7);
  xpc_release(v7);
}

void sub_186623470(_Unwind_Exception *a1)
{
}

uint64_t std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Granted_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Granted_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Granted_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Granted_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::target_type()
{
}

void *std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_189E99960;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189E99960;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::operator()( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(xpc_object_t **)(a1 + 8);
  unint64_t v5 = *(const char **)(a2 + 8);
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  else {
    uint64_t v6 = v4;
  }
  xpc_object_t v7 = xpc_string_create(v6);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_array_append_value(*v2, v7);
  xpc_release(v7);
}

void sub_186623588(_Unwind_Exception *a1)
{
}

uint64_t std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::target_type()
{
}

void *std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_189E999E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_189E999E0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::operator()( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(xpc_object_t **)(a1 + 8);
  unint64_t v5 = *(const char **)(a2 + 8);
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  else {
    uint64_t v6 = v4;
  }
  xpc_object_t v7 = xpc_string_create(v6);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_array_append_value(*v2, v7);
  xpc_release(v7);
}

void sub_1866236A0(_Unwind_Exception *a1)
{
}

uint64_t std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::target_type()
{
}

void std::default_delete<ctu::AssertionRestResourceState>::operator()[abi:ne180100](void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(a1);
}

uint64_t *boost::container::dtl::value_destructor<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>::~value_destructor( uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void **)(*a1 + 24);
  *(void *)(v2 + memset(&context, 0, 24) = 0LL;
  if (v3) {
    std::default_delete<ctu::AssertionRestResourceState>::operator()[abi:ne180100](v3);
  }
  return a1;
}

void boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>*,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>>( void *a1, char *a2, __int128 *a3, __int128 *a4)
{
  unint64_t v4 = *((void *)a2 + 2);
  unint64_t v5 = 0x3FFFFFFFFFFFFFFLL;
  unint64_t v6 = *((void *)a2 + 1) + 1LL;
  if (0x3FFFFFFFFFFFFFFLL - v4 < v6 - v4) {
    goto LABEL_29;
  }
  unint64_t v7 = v4 >> 61;
  unint64_t v8 = 8 * v4;
  if (v7 > 4) {
    uint64_t v9 = -1LL;
  }
  else {
    uint64_t v9 = v8;
  }
  unint64_t v10 = v8 / 5;
  if (v7) {
    unint64_t v10 = v9;
  }
  if (v10 < 0x3FFFFFFFFFFFFFFLL) {
    unint64_t v5 = v10;
  }
  unint64_t v11 = v6 <= v5 ? v5 : *((void *)a2 + 1) + 1LL;
  if (v11 >> 58) {
LABEL_29:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  int v16 = *(char **)a2;
  int v17 = (char *)operator new(32 * v11);
  uint64_t v18 = v17;
  uint64_t v19 = *(char **)a2;
  uint64_t v20 = *(void *)a2 + 32LL * *((void *)a2 + 1);
  uint64_t v21 = v17;
  if (*(__int128 **)a2 != a3)
  {
    unint64_t v22 = *(char **)a2;
    uint64_t v21 = v17;
    do
    {
      __int128 v23 = *(_OWORD *)v22;
      *((void *)v21 + 2) = *((void *)v22 + 2);
      *(_OWORD *)uint64_t v21 = v23;
      *(void *)unint64_t v22 = 0LL;
      *((void *)v22 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0LL;
      uint64_t v24 = *((void *)v22 + 3);
      *((void *)v22 + 2) = 0LL;
      *((void *)v22 + ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 0LL;
      *((void *)v21 + ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = v24;
      v21 += 32;
      v22 += 32;
    }

    while (v22 != (char *)a3);
  }

  __int128 v25 = *a4;
  *((void *)v21 + 2) = *((void *)a4 + 2);
  *(_OWORD *)uint64_t v21 = v25;
  *(void *)a4 = 0LL;
  *((void *)a4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0LL;
  uint64_t v26 = *((void *)a4 + 3);
  *((void *)a4 + 2) = 0LL;
  *((void *)a4 + ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 0LL;
  *((void *)v21 + ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = v26;
  if ((__int128 *)v20 != a3)
  {
    uint64_t v27 = v21 + 56;
    __int128 v28 = a3;
    do
    {
      __int128 v29 = *v28;
      *(v27 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *((void *)v28 + 2);
      *(_OWORD *)(v27 - ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = v29;
      *(void *)__int128 v28 = 0LL;
      *((void *)v28 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0LL;
      uint64_t v30 = *((void *)v28 + 3);
      *((void *)v28 + 2) = 0LL;
      *((void *)v28 + ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 0LL;
      void *v27 = v30;
      v27 += 4;
      v28 += 2;
    }

    while (v28 != (__int128 *)v20);
  }

  if (v19)
  {
    uint64_t v31 = *((void *)a2 + 1);
    if (v31)
    {
      uint64_t v32 = (void **)(v19 + 24);
      do
      {
        unint64_t v33 = *v32;
        *uint64_t v32 = 0LL;
        if (v33) {
          std::default_delete<ctu::AssertionRestResourceState>::operator()[abi:ne180100](v33);
        }
        v32 += 4;
        --v31;
      }

      while (v31);
    }

    operator delete(*(void **)a2);
  }

  uint64_t v34 = *((void *)a2 + 1) + 1LL;
  *(void *)a2 = v18;
  *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v34;
  *((void *)a2 + 2) = v11;
  *a1 = &v18[(char *)a3 - v16];
}

uint64_t boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>::operator=( uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 0;
  *(_BYTE *)a2 = 0;
  uint64_t v5 = *((void *)a2 + 3);
  *((void *)a2 + ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 0LL;
  unint64_t v6 = *(void **)(a1 + 24);
  *(void *)(a1 + memset(&context, 0, 24) = v5;
  if (v6) {
    std::default_delete<ctu::AssertionRestResourceState>::operator()[abi:ne180100](v6);
  }
  return a1;
}

void ctu::LoggerBase<ctu::DummyLogServer>::~LoggerBase(void **a1)
{
}

uint64_t ctu::LoggerBase<ctu::DummyLogServer>::enabled()
{
  return 1LL;
}

void ctu::XpcLogger::create( dispatch_object_s **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, std::__shared_weak_count_vtbl **a5@<X8>)
{
  *a5 = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  a5[1] = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v10 = (std::__shared_weak_count_vtbl *)operator new(0x80uLL);
  unint64_t v33 = *a1;
  *a1 = 0LL;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v32 = *(void *)(a3 + 16);
  *(void *)a3 = 0LL;
  *(void *)(a3 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  ctu::XpcLogger::XpcLogger(v10, &v33, a2, (__int128 *)__p);
  *a5 = v10;
  unint64_t v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)off_189E99BD8;
  v11->__shared_weak_owners_ = 0LL;
  v11[1].__vftable = v10;
  a5[1] = (std::__shared_weak_count_vtbl *)v11;
  get_deleter = (std::__shared_weak_count *)v10[1].__get_deleter;
  if (get_deleter)
  {
    if (get_deleter->__shared_owners_ != -1) {
      goto LABEL_14;
    }
    do
      unint64_t v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      unint64_t v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    v10[1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))&v10[1].~__shared_weak_count_0;
    v10[1].__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v11;
    std::__shared_weak_count::__release_weak(get_deleter);
  }

  else
  {
    do
      unint64_t v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    uint64_t v18 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      unint64_t v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v10[1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))&v10[1].~__shared_weak_count_0;
    v10[1].__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v11;
  }

  do
    unint64_t v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }

void sub_186623C20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
}

void ___ZN3ctu9XpcLogger6createEN8dispatch5queueEPKcNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEN3xpc8endpointE_block_invoke( uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    __int128 v12 = v3;
    if (v3)
    {
      __int128 v4 = *(void **)(a1 + 32);
      v11[1] = v4;
      if (!v4)
      {
        unint64_t v7 = v3;
LABEL_11:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          unint64_t v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }

        return;
      }

      xpc_object_t v5 = xpc_null_create();
      v11[0] = v5;
      if (MEMORY[0x186E3CD4C](*(void *)(a1 + 48)) == MEMORY[0x1895F9260])
      {
        unint64_t v6 = xpc_connection_create_from_endpoint(*(xpc_endpoint_t *)(a1 + 48));
        if (!v6) {
          unint64_t v6 = xpc_null_create();
        }
        xpc_object_t v8 = xpc_null_create();
        v11[0] = v6;
        xpc_release(v5);
        xpc_release(v8);
      }

      else
      {
        unint64_t v6 = v5;
      }

      ctu::XpcLogger::init_sync((uint64_t)v4, v11);
      xpc_release(v6);
      v11[0] = 0LL;
      unint64_t v7 = v12;
      if (v12) {
        goto LABEL_11;
      }
    }
  }

void sub_186623DD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ctu::XpcLogger::init_sync(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v16 = *a2;
  xpc_object_t v3 = v16;
  if (v16)
  {
    xpc_retain(v16);
  }

  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v16 = v3;
  }

  ctu::XpcClient::setServer_sync(a1 + 48, &v16);
  xpc_release(v3);
  xpc_object_t v16 = 0LL;
  xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t v15 = v4;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v15 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0LL;
      goto LABEL_11;
    }
  }

  if (MEMORY[0x186E3CD4C](v5) == MEMORY[0x1895F9250])
  {
    xpc_retain(v5);
    goto LABEL_12;
  }

  xpc_object_t v6 = xpc_null_create();
LABEL_11:
  xpc_object_t v15 = v6;
LABEL_12:
  xpc_release(v5);
  unint64_t v7 = (const char *)(a1 + 96);
  xpc_object_t v13 = xpc_string_create(v7);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  unint64_t v11 = &v15;
  __int128 v12 = "kLoggerName";
  xpc::dict::object_proxy::operator=((uint64_t)&v11, &v13, &object);
  xpc_release(object);
  xpc_object_t object = 0LL;
  xpc_release(v13);
  xpc_object_t v13 = 0LL;
  else {
    xpc_object_t v8 = *(const char **)(a1 + 8);
  }
  xpc_object_t v9 = xpc_string_create(v8);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  unint64_t v11 = &v15;
  __int128 v12 = "kLoggerDomain";
  xpc::dict::object_proxy::operator=((uint64_t)&v11, &v9, &v10);
  xpc_release(v10);
  xpc_object_t v10 = 0LL;
  xpc_release(v9);
  xpc_object_t v9 = 0LL;
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 88), v15);
  xpc_release(v15);
}

void sub_186623FAC(_Unwind_Exception *a1)
{
}

xpc_object_t __copy_helper_block_e8_32c39_ZTSNSt3__18weak_ptrIN3ctu9XpcLoggerEEE48c19_ZTSN3xpc8endpointE( void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3)
  {
    xpc_object_t v4 = (unint64_t *)(v3 + 16);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  xpc_object_t v6 = (void *)a2[6];
  a1[6] = v6;
  if (v6) {
    return xpc_retain(v6);
  }
  xpc_object_t result = xpc_null_create();
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c39_ZTSNSt3__18weak_ptrIN3ctu9XpcLoggerEEE48c19_ZTSN3xpc8endpointE( uint64_t a1)
{
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = 0LL;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void *ctu::XpcLogger::XpcLogger(void *a1, dispatch_object_s **a2, char *a3, __int128 *a4)
{
  unint64_t v7 = (void *)ctu::LoggerCommonBase::LoggerCommonBase((uint64_t)a1, a4, MEMORY[0x1895F8DA0]);
  *unint64_t v7 = off_189E99C68;
  uint64_t v8 = (uint64_t)(v7 + 6);
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  xpc_object_t v10 = 0LL;
  ctu::XpcClient::XpcClient(v8, (__int128 *)__p, a2, &v10);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  *a1 = &off_189E99A90;
  a1[6] = &unk_189E99AC8;
  a1[15] = 0LL;
  return a1;
}

void sub_186624144(_Unwind_Exception *a1)
{
}

void ctu::XpcLogger::setInvalidationCallback(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1895F87A8];
  v2[1] = 1107296256LL;
  v2[2] = ___ZN3ctu9XpcLogger23setInvalidationCallbackEU13block_pointerFvvE_block_invoke;
  v2[3] = &__block_descriptor_tmp_1_2;
  v2[4] = a2;
  void v2[5] = a1;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(a1 + 56), (uint64_t)v2);
}

uint64_t ___ZN3ctu9XpcLogger23setInvalidationCallbackEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  uint64_t v4 = a1 + 32;
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(v4 + 8);
  if (v2) {
    uint64_t v2 = _Block_copy(v2);
  }
  unint64_t v5 = *(const void **)(v3 + 120);
  *(void *)(v3 + 120) = v2;
  if (v5) {
    _Block_release(v5);
  }
  uint64_t result = MEMORY[0x186E3CD4C](*(void *)(v3 + 88));
  if (result != MEMORY[0x1895F9238]) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
  return result;
}

void ctu::XpcLogger::handleServerError_sync(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  xpc_object_t v3 = xpc_null_create();
  xpc_object_t v4 = v3;
  ctu::XpcClient::setServer_sync(a1 + 48, &v4);
  xpc_release(v3);
}

void sub_186624278(_Unwind_Exception *a1)
{
}

void non-virtual thunk to'ctu::XpcLogger::handleServerError_sync(uint64_t a1)
{
}

void ctu::XpcLogger::handleMessage_sync(uint64_t a1, xpc_object_t *a2)
{
  if (xpc_dictionary_get_value(*a2, "kLoggerLevel"))
  {
    v5[0] = a2;
    v5[1] = "kLoggerLevel";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v5, &object);
    char v4 = xpc::dyn_cast_or_default(&object, 0LL);
    xpc_release(object);
    *(_BYTE *)(a1 + 4ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v4;
  }

void sub_186624314( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

void non-virtual thunk to'ctu::XpcLogger::handleMessage_sync(uint64_t a1, xpc_object_t *a2)
{
}

void ctu::XpcLogger::forceLog(uint64_t a1, unsigned int a2, uint64_t a3)
{
  xpc_object_t v33 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t v7 = v6;
  if (v6)
  {
    xpc_object_t v33 = v6;
  }

  else
  {
    xpc_object_t v7 = xpc_null_create();
    xpc_object_t v33 = v7;
    if (!v7)
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t v7 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v7) == MEMORY[0x1895F9250])
  {
    xpc_retain(v7);
    goto LABEL_9;
  }

  xpc_object_t v8 = xpc_null_create();
LABEL_8:
  xpc_object_t v33 = v8;
LABEL_9:
  xpc_release(v7);
  xpc_object_t v31 = xpc_int64_create(a2);
  if (!v31) {
    xpc_object_t v31 = xpc_null_create();
  }
  __int128 v25 = &v33;
  *(void *)&__int128 v26 = "kLogMessageLevel";
  xpc::dict::object_proxy::operator=((uint64_t)&v25, &v31, &v32);
  xpc_release(v32);
  xpc_object_t v32 = 0LL;
  xpc_release(v31);
  xpc_object_t v31 = 0LL;
  ctu::LogMessageBuffer::str((ctu::LogMessageBuffer *)a3);
  else {
    xpc_object_t v9 = *(const char **)a3;
  }
  xpc_object_t v29 = xpc_string_create(v9);
  if (!v29) {
    xpc_object_t v29 = xpc_null_create();
  }
  __int128 v25 = &v33;
  *(void *)&__int128 v26 = "kLogMessage";
  xpc::dict::object_proxy::operator=((uint64_t)&v25, &v29, &v30);
  xpc_release(v30);
  xpc_object_t v30 = 0LL;
  xpc_release(v29);
  xpc_object_t v29 = 0LL;
  int64_t v11 = ctu::Clock::now_in_nanoseconds(v10);
  xpc_object_t object = xpc_int64_create(v11);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  __int128 v25 = &v33;
  *(void *)&__int128 v26 = "kLogMessageTimestamp";
  xpc::dict::object_proxy::operator=((uint64_t)&v25, &object, &v28);
  xpc_release(v28);
  xpc_object_t v28 = 0LL;
  xpc_release(object);
  xpc_object_t object = 0LL;
  __int128 v25 = *(xpc_object_t **)(a3 + 32);
  char v12 = v25;
  __int128 v26 = *(_OWORD *)(a3 + 40);
  xpc_object_t v13 = (xpc_object_t *)v26;
  *(void *)(a3 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0LL;
  *(void *)(a3 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = 0LL;
  *(void *)(a3 + 32) = 0LL;
  if (v12 != v13)
  {
    xpc_object_t v14 = xpc_array_create(0LL, 0LL);
    if (v14 || (xpc_object_t v14 = xpc_null_create()) != 0LL)
    {
      if (MEMORY[0x186E3CD4C](v14) == MEMORY[0x1895F9220])
      {
        xpc_retain(v14);
        xpc_object_t v15 = v14;
      }

      else
      {
        xpc_object_t v15 = xpc_null_create();
      }
    }

    else
    {
      xpc_object_t v15 = xpc_null_create();
      xpc_object_t v14 = 0LL;
    }

    xpc_release(v14);
    xpc_object_t v16 = v25;
    unint64_t v17 = (xpc_object_t *)v26;
    while (v16 != v17)
    {
      uint64_t v18 = (const char *)v16;
      xpc_object_t v19 = xpc_string_create(v18);
      if (!v19) {
        xpc_object_t v19 = xpc_null_create();
      }
      xpc_array_append_value(v15, v19);
      xpc_release(v19);
      v16 += 3;
    }

    xpc_object_t v23 = v15;
    if (v15) {
      xpc_retain(v15);
    }
    else {
      xpc_object_t v23 = xpc_null_create();
    }
    v22[0] = &v33;
    v22[1] = (void **)"kLogMessageMetadata";
    xpc::dict::object_proxy::operator=((uint64_t)v22, &v23, &v24);
    xpc_release(v24);
    xpc_object_t v24 = 0LL;
    xpc_release(v23);
    xpc_object_t v23 = 0LL;
    xpc_release(v15);
  }

  v20[0] = MEMORY[0x1895F87A8];
  v20[1] = 1174405120LL;
  void v20[2] = ___ZNK3ctu9XpcLogger8forceLogENS_8LogLevelEONS_16LogMessageBufferE_block_invoke;
  void v20[3] = &__block_descriptor_tmp_9_0;
  _OWORD v20[4] = a1;
  xpc_object_t v21 = v33;
  if (v33) {
    xpc_retain(v33);
  }
  else {
    xpc_object_t v21 = xpc_null_create();
  }
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(a1 + 56), (uint64_t)v20);
  xpc_release(v21);
  xpc_object_t v21 = 0LL;
  v22[0] = (void **)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v22);
  xpc_release(v33);
}

void sub_186624700(_Unwind_Exception *a1)
{
}

void ___ZNK3ctu9XpcLogger8forceLogENS_8LogLevelEONS_16LogMessageBufferE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (MEMORY[0x186E3CD4C](*(void *)(v2 + 88)) == MEMORY[0x1895F9238]) {
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 88), *(xpc_object_t *)(a1 + 40));
  }
}

void ctu::XpcLogger::setLogLevel(uint64_t a1, unsigned int a2)
{
  *(_BYTE *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = a2;
  xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t v12 = v4;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v12 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v5) == MEMORY[0x1895F9250])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }

  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t v12 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v10 = xpc_int64_create(a2);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  v9[0] = &v12;
  v9[1] = "kLoggerLevel";
  xpc::dict::object_proxy::operator=((uint64_t)v9, &v10, &v11);
  xpc_release(v11);
  xpc_object_t v11 = 0LL;
  xpc_release(v10);
  xpc_object_t v10 = 0LL;
  v7[0] = MEMORY[0x1895F87A8];
  v7[1] = 1174405120LL;
  unsigned int v7[2] = ___ZN3ctu9XpcLogger11setLogLevelENS_8LogLevelE_block_invoke;
  void v7[3] = &__block_descriptor_tmp_10_0;
  v7[4] = a1;
  xpc_object_t object = v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(a1 + 56), (uint64_t)v7);
  xpc_release(object);
  xpc_object_t object = 0LL;
  xpc_release(v12);
}

void ___ZN3ctu9XpcLogger11setLogLevelENS_8LogLevelE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (MEMORY[0x186E3CD4C](*(void *)(v2 + 88)) == MEMORY[0x1895F9238]) {
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 88), *(xpc_object_t *)(a1 + 40));
  }
}

void ctu::XpcLogger::~XpcLogger(ctu::XpcLogger *this)
{
  *(void *)this = &off_189E99A90;
  *((void *)this + 6) = &unk_189E99AC8;
  uint64_t v2 = (void **)((char *)this + 48);
  xpc_object_t v3 = (const void *)*((void *)this + 15);
  if (v3) {
    _Block_release(v3);
  }
  ctu::XpcClient::~XpcClient(v2);
  ctu::LoggerCommonBase::~LoggerCommonBase((void **)this);
}

{
  void **v2;
  const void *v3;
  void *v4;
  *(void *)this = &off_189E99A90;
  *((void *)this + 6) = &unk_189E99AC8;
  uint64_t v2 = (void **)((char *)this + 48);
  xpc_object_t v3 = (const void *)*((void *)this + 15);
  if (v3) {
    _Block_release(v3);
  }
  ctu::XpcClient::~XpcClient(v2);
  ctu::LoggerCommonBase::~LoggerCommonBase((void **)this);
  operator delete(v4);
}

void non-virtual thunk to'ctu::XpcLogger::~XpcLogger(ctu::XpcLogger *this)
{
  *((void *)this - 6) = &off_189E99A90;
  uint64_t v2 = (void **)((char *)this - 48);
  *(void *)this = &unk_189E99AC8;
  xpc_object_t v3 = (const void *)*((void *)this + 9);
  if (v3) {
    _Block_release(v3);
  }
  ctu::XpcClient::~XpcClient((void **)this);
  ctu::LoggerCommonBase::~LoggerCommonBase(v2);
}

{
  void **v2;
  const void *v3;
  void *v4;
  *((void *)this - 6) = &off_189E99A90;
  uint64_t v2 = (void **)((char *)this - 48);
  *(void *)this = &unk_189E99AC8;
  xpc_object_t v3 = (const void *)*((void *)this + 9);
  if (v3) {
    _Block_release(v3);
  }
  ctu::XpcClient::~XpcClient((void **)this);
  ctu::LoggerCommonBase::~LoggerCommonBase(v2);
  operator delete(v4);
}

void std::__shared_ptr_pointer<ctu::XpcLogger *,std::shared_ptr<ctu::XpcLogger> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<ctu::XpcLogger>(ctu::XpcLogger*)::{lambda(ctu::XpcLogger *)#1},std::allocator<ctu::XpcLogger>>::~__shared_ptr_pointer( std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_pointer<ctu::XpcLogger *,std::shared_ptr<ctu::XpcLogger> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<ctu::XpcLogger>(ctu::XpcLogger*)::{lambda(ctu::XpcLogger *)#1},std::allocator<ctu::XpcLogger>>::__on_zero_shared( uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ctu::XpcLogger *,std::shared_ptr<ctu::XpcLogger> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<ctu::XpcLogger>(ctu::XpcLogger*)::{lambda(ctu::XpcLogger *)#1},std::allocator<ctu::XpcLogger>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t std::shared_ptr<ctu::XpcLogger> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<ctu::XpcLogger>(ctu::XpcLogger*)::{lambda(ctu::XpcLogger*)#1}::operator() const(ctu::XpcLogger*)::{lambda(void *)#1}::__invoke( uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 16LL))(result);
  }
  return result;
}

void ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  xpc_object_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0LL)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  xpc_object_t v8 = (dispatch_queue_s *)a1[2];
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 1174405120LL;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &__block_descriptor_tmp_12;
  void block[5] = v5;
  xpc_object_t v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    unint64_t v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  void block[4] = a2;
  dispatch_async(v8, block);
  xpc_object_t v11 = v16;
  if (v16)
  {
    xpc_object_t v12 = (unint64_t *)&v16->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  do
    unint64_t v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }

uint64_t ___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE15execute_wrappedEU13block_pointerFvvE_block_invoke( uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void __copy_helper_block_e8_32b40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcClientEEE(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v4;
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

void __destroy_helper_block_e8_32b40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcClientEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  _Block_object_dispose(*(const void **)(a1 + 32), 7);
}

void ctu::XpcLoggerProxy::create( void *a1@<X0>, xpc_object_t *a2@<X1>, std::string *a3@<X2>, std::string *a4@<X3>, void *a5@<X8>)
{
  *a5 = 0xAAAAAAAAAAAAAAAALL;
  a5[1] = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v11 = (void (***)(void, uint64_t, char **))*a1;
  unint64_t v10 = (std::__shared_weak_count *)a1[1];
  xpc_object_t v12 = (std::string *)operator new(0x80uLL);
  v12->__r_.__value_.__l.__size_ = 0LL;
  p_unint64_t size = &v12->__r_.__value_.__l.__size_;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = (std::string::size_type)off_189E99F00;
  v28[0] = v11;
  v28[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }

  xpc_object_t v16 = *a2;
  uint64_t v27 = v16;
  if (v16)
  {
    xpc_retain(v16);
  }

  else
  {
    xpc_object_t v16 = xpc_null_create();
    uint64_t v27 = v16;
  }

  else {
    std::string v26 = *a3;
  }
  else {
    std::string v25 = *a4;
  }
  ctu::XpcLoggerProxy::XpcLoggerProxy(v12 + 1, v28, &v27, (__int128 *)&v26, (__int128 *)&v25);
  xpc_release(v16);
  uint64_t v27 = 0LL;
  if (v10)
  {
    unint64_t v17 = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  *a5 = v12 + 1;
  a5[1] = v12;
  xpc_object_t v23 = &v12[3].__r_.__value_.__s.__data_[16];
  xpc_object_t v24 = (std::__shared_weak_count *)v12;
  do
    unint64_t v19 = __ldxr(p_size);
  while (__stxr(v19 + 1, p_size));
  (**(void (***)(void, uint64_t, char **))*a1)(*a1, (uint64_t)&v12[1].__r_.__value_.__l.__size_, &v23);
  unint64_t v20 = v24;
  if (v24)
  {
    xpc_object_t v21 = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

void sub_186624EFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, char a25)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  xpc_release(v26);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::__shared_weak_count::~__shared_weak_count(v25);
  operator delete(v28);
  _Unwind_Resume(a1);
}

std::string *ctu::XpcLoggerProxy::XpcLoggerProxy( std::string *a1, void *a2, void **a3, __int128 *a4, __int128 *a5)
{
  xpc_object_t v9 = (void *)ctu::LoggerCommonBase::LoggerCommonBase((uint64_t)a1, a5, MEMORY[0x1895F8DA0]);
  *xpc_object_t v9 = &unk_189E96F18;
  uint64_t v10 = a2[1];
  void v9[6] = *a2;
  v9[7] = v10;
  if (v10)
  {
    xpc_object_t v11 = (unint64_t *)(v10 + 8);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_189E99C90;
  a1[2].__r_.__value_.__l.__cap_ = (std::string::size_type)&unk_189E99CD8;
  unint64_t v13 = a1 + 3;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }

  else
  {
    __int128 v14 = *a4;
    a1[3].__r_.__value_.__l.__cap_ = *((void *)a4 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }

  unint64_t v15 = *a3;
  a1[4].__r_.__value_.__r.__words[0] = (std::string::size_type)*a3;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    a1[4].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  return a1;
}

void sub_186625054(_Unwind_Exception *a1)
{
  *uint64_t v1 = (void *)(v3 + 16);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v2);
  ctu::LoggerCommonBase::~LoggerCommonBase(v1);
  _Unwind_Resume(a1);
}

void ctu::XpcLoggerProxy::updateTrackedConfig(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t message = v4;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t message = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0LL;
      goto LABEL_8;
    }
  }

  if (MEMORY[0x186E3CD4C](v5) == MEMORY[0x1895F9250])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }

  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t message = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v8 = xpc_int64_create(a2);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  v7[0] = &message;
  v7[1] = "kLoggerLevel";
  xpc::dict::object_proxy::operator=((uint64_t)v7, &v8, &object);
  xpc_release(object);
  xpc_object_t object = 0LL;
  xpc_release(v8);
  xpc_object_t v8 = 0LL;
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 96), message);
  xpc_release(message);
}

void sub_186625190( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object)
{
}

void non-virtual thunk to'ctu::XpcLoggerProxy::updateTrackedConfig(uint64_t a1, unsigned int a2)
{
}

void ctu::XpcLoggerProxy::getTrackedLoggerName(ctu::XpcLoggerProxy *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 9), *((void *)this + 10));
  }

  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    a2->__r_.__value_.__l.__cap_ = *((void *)this + 11);
  }

void non-virtual thunk to'ctu::XpcLoggerProxy::getTrackedLoggerName( ctu::XpcLoggerProxy *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }

  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__l.__cap_ = *((void *)this + 3);
  }

uint64_t ctu::XpcLoggerProxy::getTrackedLogLevel(ctu::XpcLoggerProxy *this)
{
  return *((unsigned __int8 *)this + 40);
}

uint64_t non-virtual thunk to'ctu::XpcLoggerProxy::getTrackedLogLevel(ctu::XpcLoggerProxy *this)
{
  return *((unsigned __int8 *)this - 24);
}

void ctu::XpcLoggerProxy::handleMessage(ctu::XpcLoggerProxy *this, xpc_object_t *a2)
{
  xpc_object_t v32 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  *(void *)uint64_t v27 = a2;
  *(void *)&v27[8] = "kLogMessage";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v27, &v32);
  if (MEMORY[0x186E3CD4C](v32) != MEMORY[0x1895F92A8])
  {
    uint64_t v4 = *((void *)this + 6);
    xpc_object_t v5 = (std::__shared_weak_count *)*((void *)this + 7);
    uint64_t v30 = v4;
    xpc_object_t v31 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        unint64_t v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }

    if (v4)
    {
      uint64_t v29 = 0LL;
      __int128 v28 = 0u;
      memset(v27, 0, sizeof(v27));
      xpc_object_t v33 = 0LL;
      uint64_t v34 = 0LL;
      uint64_t v35 = 0LL;
      xpc::dyn_cast_or_default(&v32, (uint64_t)&v33, &__p);
      ctu::LogMessageBuffer::appendString((std::string *)v27, (uint64_t)&__p);
      __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
      xpc_object_t v33 = a2;
      uint64_t v34 = "kLogMessageMetadata";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&v33, &__p);
      if (MEMORY[0x186E3CD4C](__p.__r_.__value_.__r.__words[0]) == MEMORY[0x1895F9220])
      {
        applier[0] = MEMORY[0x1895F87A8];
        applier[1] = 0x40000000LL;
        applier[2] = ___ZN3ctu14XpcLoggerProxy13handleMessageERKN3xpc4dictE_block_invoke;
        applier[3] = &__block_descriptor_tmp_26;
        applier[4] = v27;
        xpc_array_apply(__p.__r_.__value_.__l.__data_, applier);
      }

      xpc_object_t v33 = a2;
      uint64_t v34 = "kLogMessageTimestamp";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v33, &object);
      uint64_t v8 = xpc::dyn_cast_or_default(&object, 0LL);
      xpc_release(object);
      if (!v8) {
        uint64_t v8 = ctu::Clock::now_in_nanoseconds(v9);
      }
      xpc_object_t v33 = a2;
      uint64_t v34 = "kLogMessageLevel";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v33, &object);
      char v10 = xpc::dyn_cast_or_default(&object, 0LL);
      xpc_release(object);
      xpc_object_t v33 = (xpc_object_t *)0xAAAAAAAAAAAAAAAALL;
      uint64_t v34 = (const char *)0xAAAAAAAAAAAAAAAALL;
      xpc_object_t v11 = (char *)operator new(0x60uLL);
      if (*((char *)this + 31) < 0) {
        std::string::__init_copy_ctor_external( &v23,  *((const std::string::value_type **)this + 1),  *((void *)this + 2));
      }
      else {
        std::string v23 = *(std::string *)((char *)this + 8);
      }
      ctu::LogMessageBuffer::str((ctu::LogMessageBuffer *)v27);
      *(void *)xpc_object_t v11 = off_189E96E20;
      *((void *)v11 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v8;
      v11[16] = v10;
      *((std::string *)v11 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v23;
      memset(&v23, 0, sizeof(v23));
      *((_OWORD *)v11 + ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = *(_OWORD *)v27;
      *((void *)v11 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = *(void *)&v27[16];
      *(_OWORD *)uint64_t v27 = 0uLL;
      *(_OWORD *)(v11 + 72) = v28;
      *((void *)v11 + 1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v29;
      *(void *)&v27[16] = 0LL;
      __int128 v28 = 0uLL;
      uint64_t v29 = 0LL;
      unint64_t v12 = (std::__shared_weak_count *)operator new(0x20uLL);
      v12->__vftable = (std::__shared_weak_count_vtbl *)off_189E99F50;
      v12->__shared_owners_ = 0LL;
      v12->__shared_weak_owners_ = 0LL;
      v12[1].__vftable = (std::__shared_weak_count_vtbl *)v11;
      xpc_object_t v21 = v11;
      unint64_t v22 = v12;
      xpc_object_t v33 = 0LL;
      uint64_t v34 = 0LL;
      ctu::LogServer::log(v4, (uint64_t)&v21);
      unint64_t v13 = v22;
      if (v22)
      {
        __int128 v14 = (unint64_t *)&v22->__shared_owners_;
        do
          unint64_t v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }

      xpc_object_t v16 = (std::__shared_weak_count *)v34;
      if (v34)
      {
        unint64_t v17 = (unint64_t *)(v34 + 8);
        do
          unint64_t v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }

      xpc_release(__p.__r_.__value_.__l.__data_);
      ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v27);
      xpc_object_t v5 = v31;
    }

    if (v5)
    {
      unint64_t v19 = (unint64_t *)&v5->__shared_owners_;
      do
        unint64_t v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }

  if (xpc_dictionary_get_value(*a2, "kLoggerLevel"))
  {
    *(void *)uint64_t v27 = a2;
    *(void *)&v27[8] = "kLoggerLevel";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v27, &v33);
    *((_BYTE *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = xpc::dyn_cast_or_default((xpc_object_t *)&v33, 0LL);
    xpc_release(v33);
  }

  xpc_release(v32);
}

void sub_1866255CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, xpc_object_t object, uint64_t a24, int a25, __int16 a26, char a27, char a28, char a29)
{
}

uint64_t ___ZN3ctu14XpcLoggerProxy13handleMessageERKN3xpc4dictE_block_invoke( uint64_t a1, int a2, xpc_object_t object)
{
  uint64_t v3 = *(void *)(a1 + 32);
  xpc_object_t v6 = object;
  if (object)
  {
    xpc_object_t v4 = object;
    xpc_retain(object);
  }

  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v6 = v4;
  }

  memset(v9, 0, sizeof(v9));
  xpc::dyn_cast_or_default(&v6, (uint64_t)v9, &v7);
  std::string __p = v7;
  memset(&v7, 0, sizeof(v7));
  ctu::operator<<(v3, (uint64_t)&__p);
  xpc_release(v4);
  return 1LL;
}

void sub_1866257A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  xpc_release(v21);
  _Unwind_Resume(a1);
}

void ctu::XpcLogServer::create( void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, std::__shared_weak_count_vtbl **a4@<X8>)
{
  *a4 = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  a4[1] = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (std::__shared_weak_count_vtbl *)operator new(0xA8uLL);
  xpc_object_t v9 = (std::__shared_weak_count *)a1[1];
  v32[0] = *a1;
  v32[1] = v9;
  *a1 = 0LL;
  a1[1] = 0LL;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v31 = *(void *)(a3 + 16);
  *(void *)(a3 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  *(void *)a3 = 0LL;
  ctu::XpcLogServer::XpcLogServer(v8, v32, a2, (__int128 *)__p);
  *a4 = v8;
  char v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_189E99FC8;
  v10->__shared_weak_owners_ = 0LL;
  v10[1].__vftable = v8;
  a4[1] = (std::__shared_weak_count_vtbl *)v10;
  on_zero_shared = (std::__shared_weak_count *)v8->__on_zero_shared;
  if (on_zero_shared)
  {
    if (on_zero_shared->__shared_owners_ != -1) {
      goto LABEL_14;
    }
    do
      unint64_t v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      unint64_t v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    v8->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
    v8->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v10;
    std::__shared_weak_count::__release_weak(on_zero_shared);
  }

  else
  {
    do
      unint64_t v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    unint64_t v17 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      unint64_t v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v8->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
    v8->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v10;
  }

  do
    unint64_t v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }

void sub_186625A34( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
}

void *ctu::XpcLogServer::XpcLogServer(void *a1, void *a2, char *__s, __int128 *a4)
{
  xpc_object_t v7 = xpc_null_create();
  unint64_t v12 = 0LL;
  xpc_object_t v13 = v7;
  ctu::XpcServer::XpcServer((uint64_t)a1, (uint64_t)__p, &v13, &v12);
  xpc_release(v7);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  a1[9] = off_189E99EC0;
  ctu::LoggerCommonBase::LoggerCommonBase((uint64_t)(a1 + 10), a4, MEMORY[0x1895F8DA0]);
  a1[10] = &unk_189E96F18;
  a1[16] = *a2;
  uint64_t v8 = a2[1];
  a1[17] = v8;
  if (v8)
  {
    xpc_object_t v9 = (unint64_t *)(v8 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  *a1 = &off_189E99D38;
  a1[9] = &unk_189E99D78;
  a1[19] = 0LL;
  a1[20] = 0LL;
  a1[18] = 0LL;
  return a1;
}

void sub_186625BB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void ctu::XpcLogServer::startListeningOn(void *a1, void **a2)
{
  uint64_t v3 = MEMORY[0x1895F87A8];
  v16[0] = MEMORY[0x1895F87A8];
  v16[1] = 1174405120LL;
  _OWORD v16[2] = ___ZN3ctu12XpcLogServer16startListeningOnEN3xpc10connectionE_block_invoke;
  void v16[3] = &__block_descriptor_tmp_7_2;
  xpc_object_t v4 = *a2;
  _OWORD v16[4] = a1;
  xpc_object_t object = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc_object_t v5 = (std::__shared_weak_count *)a1[2];
  if (!v5 || (v6 = a1[1], (xpc_object_t v7 = std::__shared_weak_count::lock(v5)) == 0LL)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  xpc_object_t v9 = (dispatch_queue_s *)a1[3];
  block[0] = v3;
  block[1] = 1174405120LL;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &__block_descriptor_tmp_27;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  void block[5] = v6;
  unint64_t v19 = v8;
  do
    unint64_t v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  void block[4] = v16;
  dispatch_async(v9, block);
  unint64_t v12 = v19;
  if (v19)
  {
    xpc_object_t v13 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  do
    unint64_t v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }

  xpc_release(object);
}

void ___ZN3ctu12XpcLogServer16startListeningOnEN3xpc10connectionE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(ctu::XpcServer **)(a1 + 32);
  uint64_t v1 = *(void **)(a1 + 40);
  xpc_object_t object = v1;
  if (v1) {
    xpc_retain(v1);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::XpcServer::setListener_sync((uint64_t)v2, &object);
  xpc_release(object);
  ctu::XpcServer::startListener_sync(v2);
}

void sub_186625DAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

xpc_object_t __copy_helper_block_e8_40c22_ZTSN3xpc10connectionE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 40);
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c22_ZTSN3xpc10connectionE(uint64_t a1)
{
  *(void *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0LL;
}

void ctu::XpcLogServer::getEndpoint(ctu::XpcLogServer *this@<X0>, xpc_object_t *a2@<X8>)
{
  uint64_t v3 = MEMORY[0x1895F87A8];
  v5[0] = MEMORY[0x1895F87A8];
  v5[1] = 0x40000000LL;
  void v5[2] = ___ZNK3ctu12XpcLogServer11getEndpointEv_block_invoke;
  void v5[3] = &__block_descriptor_tmp_9_1;
  v5[4] = this;
  uint64_t v6 = v5;
  v7[0] = MEMORY[0x1895F87A8];
  v7[1] = 0x40000000LL;
  void v7[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIU13block_pointerFN3xpc8endpointEvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  void v7[3] = &__block_descriptor_tmp_28;
  v7[4] = (char *)this + 8;
  void v7[5] = &v6;
  uint64_t v8 = v7;
  xpc_object_t v4 = (dispatch_queue_s *)*((void *)this + 3);
  if (*((void *)this + 4))
  {
    *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *a2 = xpc_null_create();
    blocunint64_t k = v3;
    uint64_t v10 = 0x40000000LL;
    unint64_t v11 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFN3xpc8endpointEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke;
    unint64_t v12 = &__block_descriptor_tmp_30;
    xpc_object_t v13 = a2;
    unint64_t v14 = &v8;
    dispatch_async_and_wait(v4, &block);
  }

  else
  {
    *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *a2 = xpc_null_create();
    blocunint64_t k = v3;
    uint64_t v10 = 0x40000000LL;
    unint64_t v11 = ___ZN8dispatch9sync_implIRU13block_pointerFN3xpc8endpointEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke;
    unint64_t v12 = &__block_descriptor_tmp_29;
    xpc_object_t v13 = a2;
    unint64_t v14 = &v8;
    dispatch_sync(v4, &block);
  }

void *___ZNK3ctu12XpcLogServer11getEndpointEv_block_invoke@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t result = xpc_endpoint_create(*(xpc_connection_t *)(*(void *)(a1 + 32) + 64LL));
  *a2 = result;
  if (!result)
  {
    xpc_object_t result = xpc_null_create();
    *a2 = result;
  }

  return result;
}

void ctu::XpcLogServer::handleServerError_sync(uint64_t a1, xpc::object *a2)
{
  uint64_t v3 = a1 + 80;
  if ((**(unsigned int (***)(uint64_t, uint64_t))(a1 + 80))(a1 + 80, 40LL))
  {
    uint64_t v7 = 0LL;
    memset(v6, 0, sizeof(v6));
    ctu::LogMessageBuffer::appendString(v6, "Server error: ");
    xpc::object::describe(a2, __p);
    ctu::LogMessageBuffer::appendString(v6, (uint64_t)__p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog(v3, 40, (ctu::LogMessageBuffer *)v6);
    ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v6);
  }

void sub_18662603C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)&a16);
  _Unwind_Resume(a1);
}

void ctu::XpcLogServer::handleNewClient_sync(uint64_t a1@<X0>, void **a2@<X8>)
{
  v6[0] = 0LL;
  v6[1] = v6;
  std::string v6[2] = 0x3802000000LL;
  uint64_t v6[3] = __Block_byref_object_copy__0;
  v6[4] = __Block_byref_object_dispose__0;
  v6[5] = 0LL;
  uint64_t v7 = 0LL;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = ___ZN3ctu12XpcLogServer20handleNewClient_syncEN3xpc10connectionE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_19_0;
  void aBlock[4] = v6;
  aBlock[5] = a1;
  *a2 = _Block_copy(aBlock);
  _Block_object_dispose(v6, 8);
  uint64_t v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

__n128 __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = result;
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v1 + 40) = 0LL;
  *(void *)(a2 + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v20 - 48) = 0LL;
  return result;
}

uint64_t __Block_byref_object_dispose__0(uint64_t a1)
{
  return std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](a1 + 40);
}

void ___ZN3ctu12XpcLogServer20handleNewClient_syncEN3xpc10connectionE_block_invoke( uint64_t a1, xpc_connection_t *a2, xpc_object_t *a3)
{
  char v5 = *(ctu::XpcLoggerProxy **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  if (v5)
  {
    ctu::XpcLoggerProxy::handleMessage(v5, a3);
    return;
  }

  uint64_t v7 = *(void *)(a1 + 40);
  memset(&v54, 170, sizeof(v54));
  v53.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v53.__r_.__value_.__l.__size_ = (std::string::size_type)"kLoggerName";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v53, v51);
  memset(v48, 0, 24);
  xpc::dyn_cast_or_default(v51, (uint64_t)v48, &v54);
  xpc_release(v51[0]);
  memset(&v53, 170, sizeof(v53));
  v51[0] = a3;
  v51[1] = "kLoggerDomain";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v51, &v52);
  memset(v48, 0, 24);
  xpc::dyn_cast_or_default(&v52, (uint64_t)v48, &v53);
  xpc_release(v52);
  std::string::size_type size = v54.__r_.__value_.__s.__size_;
  if ((v54.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = v54.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_17;
  }
  std::string::size_type v9 = v53.__r_.__value_.__s.__size_;
  if ((v53.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type v9 = v53.__r_.__value_.__l.__size_;
  }
  if (v9)
  {
    char v10 = (*(uint64_t (**)(uint64_t, std::string *, std::string *))(*(void *)v7 + 40LL))(v7, &v54, &v53);
    unint64_t v11 = **(unsigned int (***)(uint64_t, uint64_t))(v7 + 80);
    if ((v10 & 1) != 0)
    {
      if (v11(v7 + 80, 40LL))
      {
        uint64_t v50 = 0LL;
        __int128 v49 = 0u;
        memset(v48, 0, sizeof(v48));
        ctu::LogMessageBuffer::appendString((std::string *)v48, "Got client checkin for client '");
        ctu::LogMessageBuffer::appendString((std::string *)v48, (uint64_t)&v54);
        ctu::LogMessageBuffer::appendString((std::string *)v48, "' in domain '");
        ctu::LogMessageBuffer::appendString((std::string *)v48, (uint64_t)&v53);
        ctu::LogMessageBuffer::appendString((std::string *)v48, "'");
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog(v7 + 80, 40, (ctu::LogMessageBuffer *)v48);
        ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v48);
      }

      unint64_t v12 = *(std::__shared_weak_count **)(v7 + 136);
      uint64_t v46 = *(void *)(v7 + 128);
      dispatch_object_t v47 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          unint64_t v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }

      xpc_connection_t v15 = *a2;
      xpc_object_t object = v15;
      if (v15) {
        xpc_retain(v15);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      else {
        std::string v44 = v54;
      }
      else {
        std::string v43 = v53;
      }
      ctu::XpcLoggerProxy::create(&v46, &object, &v44, &v43, v48);
      std::shared_ptr<ctu::rest::RestConnectorDelegateBase>::operator=[abi:ne180100]<ctu::rest::RestConnectorDelegate<ctu::RestModuleState>,void>( *(void *)(*(void *)(a1 + 32) + 8LL) + 40LL,  (__int128 *)v48);
      unint64_t v18 = *(std::__shared_weak_count **)&v48[8];
      if (*(void *)&v48[8])
      {
        unint64_t v19 = (unint64_t *)(*(void *)&v48[8] + 8LL);
        do
          unint64_t v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }

      xpc_release(object);
      xpc_object_t object = 0LL;
      unint64_t v21 = v47;
      if (v47)
      {
        unint64_t v22 = (unint64_t *)&v47->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      __int128 v24 = *(_OWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
      unint64_t v26 = *(char **)(v7 + 152);
      unint64_t v25 = *(void *)(v7 + 160);
      if ((unint64_t)v26 >= v25)
      {
        uint64_t v30 = *(char **)(v7 + 144);
        uint64_t v31 = (v26 - v30) >> 4;
        unint64_t v32 = v31 + 1;
        __int128 v42 = v24;
        uint64_t v33 = v25 - (void)v30;
        if (v33 >> 3 > v32) {
          unint64_t v32 = v33 >> 3;
        }
        else {
          unint64_t v34 = v32;
        }
        if (v34 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v35 = (char *)operator new(16 * v34);
        std::string::size_type v36 = &v35[16 * v31];
        *(_OWORD *)std::string::size_type v36 = v42;
        if (*((void *)&v42 + 1))
        {
          unint64_t v37 = (unint64_t *)(*((void *)&v42 + 1) + 8LL);
          do
            unint64_t v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
          uint64_t v30 = *(char **)(v7 + 144);
          unint64_t v26 = *(char **)(v7 + 152);
        }

        if (v26 == v30)
        {
          unint64_t v29 = v36 + 16;
          *(void *)(v7 + 144) = v36;
          *(void *)(v7 + 152) = v36 + 16;
          *(void *)(v7 + 160) = &v35[16 * v34];
        }

        else
        {
          char v39 = &v35[16 * v31];
          do
          {
            __int128 v40 = *((_OWORD *)v26 - 1);
            v26 -= 16;
            *((_OWORD *)v39 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v40;
            v39 -= 16;
            *(void *)unint64_t v26 = 0LL;
            *((void *)v26 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0LL;
          }

          while (v26 != v30);
          uint64_t v30 = *(char **)(v7 + 144);
          uint64_t v41 = *(void *)(v7 + 152);
          unint64_t v29 = v36 + 16;
          *(void *)(v7 + 144) = v39;
          *(void *)(v7 + 152) = v36 + 16;
          *(void *)(v7 + 160) = &v35[16 * v34];
          while ((char *)v41 != v30)
          {
            v41 -= 16LL;
            std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100](v41);
          }
        }

        if (v30) {
          operator delete(v30);
        }
      }

      else
      {
        *(_OWORD *)unint64_t v26 = v24;
        if (*((void *)&v24 + 1))
        {
          uint64_t v27 = (unint64_t *)(*((void *)&v24 + 1) + 8LL);
          do
            unint64_t v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }

        unint64_t v29 = v26 + 16;
      }

      *(void *)(v7 + 152) = v29;
      goto LABEL_23;
    }

    if (v11(v7 + 80, 40LL))
    {
      uint64_t v50 = 0LL;
      __int128 v49 = 0u;
      memset(v48, 0, sizeof(v48));
      ctu::LogMessageBuffer::appendString((std::string *)v48, "Request DENIED for new logger '");
      ctu::LogMessageBuffer::appendString((std::string *)v48, (uint64_t)&v54);
      ctu::LogMessageBuffer::appendString((std::string *)v48, "' in domain '");
      ctu::LogMessageBuffer::appendString((std::string *)v48, (uint64_t)&v53);
      ctu::LogMessageBuffer::appendString((std::string *)v48, "'");
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog(v7 + 80, 40, (ctu::LogMessageBuffer *)v48);
      goto LABEL_21;
    }
  }

  else
  {
LABEL_17:
    unint64_t v17 = *(unsigned int (***)(uint64_t, uint64_t))(v7 + 80);
    uint64_t v16 = v7 + 80;
    if ((*v17)(v16, 80LL))
    {
      uint64_t v50 = 0LL;
      __int128 v49 = 0u;
      memset(v48, 0, sizeof(v48));
      ctu::LogMessageBuffer::appendString((std::string *)v48, "Got request for new logger, but check in failed");
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog(v16, 80, (ctu::LogMessageBuffer *)v48);
LABEL_21:
      ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v48);
    }
  }

  xpc_connection_cancel(*a2);
LABEL_23:
}

void sub_1866266AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, char a25, uint64_t a26, char a27)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  xpc_release(v27);
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void ctu::XpcLogServer::handleClientError_sync(void *a1, xpc_object_t *a2, xpc::object *a3)
{
  uint64_t v6 = (__int128 *)a1[18];
  uint64_t v7 = (__int128 *)a1[19];
  if (v6 == v7) {
    goto LABEL_14;
  }
  while (!xpc_equal(*a2, *(xpc_object_t *)(*(void *)v6 + 96LL)))
  {
    if (++v6 == v7)
    {
      uint64_t v6 = v7;
      break;
    }
  }

  if (v6 == (__int128 *)a1[19])
  {
LABEL_14:
    unint64_t v12 = (unsigned int (**)(uint64_t, uint64_t))a1[10];
    uint64_t v11 = (uint64_t)(a1 + 10);
    if ((*v12)(v11, 80LL))
    {
      uint64_t v17 = 0LL;
      __int128 v16 = 0u;
      memset(v15, 0, sizeof(v15));
      ctu::LogMessageBuffer::appendString((std::string *)v15, "Got client error for conn ");
      ctu::LogMessageBuffer::operator std::ostream &((uint64_t)v15);
      std::ostream::operator<<();
      ctu::LogMessageBuffer::appendString((std::string *)v15, ", but no client found: ");
      xpc::object::describe(a3, __p);
      ctu::LogMessageBuffer::appendString((std::string *)v15, (uint64_t)__p);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog(v11, 80, (ctu::LogMessageBuffer *)v15);
      ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v15);
    }
  }

  else
  {
    if ((*(unsigned int (**)(void *, uint64_t))a1[10])(a1 + 10, 20LL))
    {
      uint64_t v17 = 0LL;
      __int128 v16 = 0u;
      memset(v15, 0, sizeof(v15));
      ctu::LogMessageBuffer::appendString((std::string *)v15, "Client disconnected (");
      ctu::LogMessageBuffer::operator std::ostream &((uint64_t)v15);
      std::ostream::operator<<();
      ctu::LogMessageBuffer::appendString((std::string *)v15, ": ");
      ctu::LogMessageBuffer::appendString((std::string *)v15, *(void *)v6 + 72LL);
      ctu::LogMessageBuffer::appendString((std::string *)v15, ")");
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog((uint64_t)(a1 + 10), 20, (ctu::LogMessageBuffer *)v15);
      ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v15);
    }

    uint64_t v8 = (uint64_t)(v6 + 1);
    std::string::size_type v9 = (__int128 *)a1[19];
    if (v6 + 1 != v9)
    {
      do
        uint64_t v10 = (uint64_t)v6++;
      while ((__int128 *)(std::shared_ptr<ctu::rest::RestConnectorDelegateBase>::operator=[abi:ne180100]<ctu::rest::RestConnectorDelegate<ctu::RestModuleState>,void>( v10,  v6)
                         + 32) != v9);
      uint64_t v8 = a1[19];
    }

    a1[19] = v6;
  }

void sub_186626980( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)&a16);
  _Unwind_Resume(a1);
}

uint64_t ctu::XpcLogServer::handleNewLogger_sync()
{
  return 1LL;
}

void ctu::XpcLoggerProxy::~XpcLoggerProxy(ctu::XpcLoggerProxy *this)
{
  *(void *)this = &off_189E99C90;
  *((void *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = &unk_189E99CD8;
  xpc_release(*((xpc_object_t *)this + 12));
  *((void *)this + 12) = 0LL;
  *(void *)this = &unk_189E96F18;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  ctu::LoggerCommonBase::~LoggerCommonBase((void **)this);
}

{
  void *v2;
  *(void *)this = &off_189E99C90;
  *((void *)this + std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = &unk_189E99CD8;
  xpc_release(*((xpc_object_t *)this + 12));
  *((void *)this + 12) = 0LL;
  *(void *)this = &unk_189E96F18;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  ctu::LoggerCommonBase::~LoggerCommonBase((void **)this);
  operator delete(v2);
}

void non-virtual thunk to'ctu::XpcLoggerProxy::~XpcLoggerProxy(ctu::XpcLoggerProxy *this)
{
  *((void *)this - std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = &off_189E99C90;
  uint64_t v2 = (void **)((char *)this - 64);
  *(void *)this = &unk_189E99CD8;
  xpc_release(*((xpc_object_t *)this + 4));
  *((void *)this + 4) = 0LL;
  *((void *)this - std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = &unk_189E96F18;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)this - 16);
  ctu::LoggerCommonBase::~LoggerCommonBase(v2);
}

{
  void **v2;
  void *v3;
  *((void *)this - std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = &off_189E99C90;
  uint64_t v2 = (void **)((char *)this - 64);
  *(void *)this = &unk_189E99CD8;
  xpc_release(*((xpc_object_t *)this + 4));
  *((void *)this + 4) = 0LL;
  *((void *)this - std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 8) = &unk_189E96F18;
  std::shared_ptr<xpc::object>::~shared_ptr[abi:ne180100]((uint64_t)this - 16);
  ctu::LoggerCommonBase::~LoggerCommonBase(v2);
  operator delete(v3);
}