uint64_t sub_100002C44( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void *, unint64_t *, unint64_t *, uint64_t), void *a5, unint64_t a6, void *a7, void *a8)
{
  void *v14;
  size_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  void *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t *v29;
  int v30;
  unsigned int v31;
  BOOL v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  void *v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  _OWORD __s[4];
  v46 = a5;
  v44 = a1;
  memset(__s, 0, sizeof(__s));
  v14 = (void *)ccaes_cbc_decrypt_mode();
  __chkstk_darwin(v14);
  v47 = (uint64_t)&v38 - v15;
  bzero((char *)&v38 - v15, v15);
  __chkstk_darwin(v16);
  v18 = (char *)&v38 - v17;
  bzero((char *)&v38 - v17, v17);
  v19 = 0xFFFFFFFFLL;
  if (HIDWORD(a6)) {
    goto LABEL_33;
  }
  v40 = a3;
  v20 = a6 >> 3;
  v41 = &v38;
  v42 = a8;
  v39 = a7;
  v45 = a6;
  if (!a4)
  {
    v21 = (a2 & 0xFFFFFFFFFFFFFFF7LL) == 0x10 || a2 == 32;
    if (!v21 || !a8 || *a8 < a6 - 8)
    {
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      goto LABEL_34;
    }

    cccbc_init(v14, v47, a2, v44);
    goto LABEL_15;
  }

  if (a8 && *v42 >= v45 - 8)
  {
LABEL_15:
    *(void *)&__s[0] = *v46;
    v22 = v20 - 1;
    if (v20 != 1)
    {
      v23 = (void *)__s + 1;
      v24 = v46 + 1;
      v25 = v20 - 1;
      do
      {
        v26 = *v24++;
        *v23 = v26;
        v23 += 2;
        --v25;
      }

      while (v25);
    }

    v27 = 6 * v20 - 6;
    LODWORD(v44) = 1 - v20;
    v28 = 5;
    v43 = (unint64_t *)&__s[v20 - 2];
    do
    {
      LODWORD(v46) = v28;
      if (v45 >= 0x10)
      {
        v29 = v43;
        v30 = v22;
        v31 = v27;
        do
        {
          *v29 = *(void *)&__s[v30 % v22] ^ bswap64(v31);
          if (a4)
          {
            if ((a4(0LL, &unk_1002DEF00, v29, v29, 16LL) & 1) == 0) {
              goto LABEL_6;
            }
          }

          else
          {
            cccbc_clear_iv(v18, v14[1]);
            sub_10000644C((uint64_t)v14, v47, (uint64_t)v18, 0x10uLL);
          }

          --v31;
          v29 -= 2;
          v32 = __OFSUB__(v30--, 1);
        }

        while (!((v30 < 0) ^ v32 | (v30 == 0)));
      }

      v28 = (_DWORD)v46 - 1;
      v27 += v44;
    }

    while ((_DWORD)v46);
    if (*(void *)&__s[0] == v40)
    {
      v33 = v39;
      if ((_DWORD)v22)
      {
        v34 = (uint64_t *)__s + 1;
        v35 = v22;
        do
        {
          v36 = *v34;
          v34 += 2;
          *v33++ = v36;
          --v35;
        }

        while (v35);
      }

      v19 = 0LL;
      *v42 = (8 * v22);
    }

    else
    {
      v19 = 0xFFFFFFFFLL;
    }

LABEL_33:
    memset_s(__s, 0x40uLL, 0, 0x40uLL);
    if (a4) {
      return v19;
    }
LABEL_34:
    cc_clear(*v14, v47);
    return v19;
  }

      v15 = 0LL;
      goto LABEL_34;
    }

    v10 = v42;
    if (v12)
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue([v42 altDSID]);
      if (v26
        || (v26 = (void *)objc_claimAutoreleasedReturnValue([v42 containerName]),
            ![v26 isEqualToString:@"com.apple.security.keychain"]))
      {
      }

      else
      {
        v27 = (void *)objc_claimAutoreleasedReturnValue([v42 contextID]);
        v28 = [v27 isEqualToString:@"defaultContext"];

        if (v28)
        {
          v29 = sub_10001267C("octagon-account");
          v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138412546;
            v45 = v42;
            v46 = 2112;
            v47 = v22;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "Cannot find an account matching primary persona/altDSID, allowing default context return: %@ %@",  buf,  0x16u);
          }

          v31 = (void *)objc_claimAutoreleasedReturnValue([v42 containerName]);
          v32 = (void *)objc_claimAutoreleasedReturnValue([v42 contextID]);
          v15 = (void *)objc_claimAutoreleasedReturnValue( -[OTManager contextForContainerName:contextID:]( self,  "contextForContainerName:contextID:",  v31,  v32));

          goto LABEL_34;
        }
      }
    }

    if (!a6) {
      goto LABEL_33;
    }
    if (v22)
    {
      *a6 = v22;
    }

    else
    {
      v35 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:",  @"com.apple.security.octagon",  59LL,  @"No altDSID configured"));
      *a6 = v35;
      if (!v35) {
        goto LABEL_33;
      }
    }

    v36 = sub_10001267C("octagon-account");
    v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      v38 = *a6;
      *(_DWORD *)buf = 138412546;
      v45 = v42;
      v46 = 2112;
      v47 = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Cannot find an account matching: %@ %@",  buf,  0x16u);
    }

    goto LABEL_33;
  }

  if ((v12 & 1) != 0)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue([v10 containerName]);
    v14 = (void *)objc_claimAutoreleasedReturnValue([v10 contextID]);
    v15 = (void *)objc_claimAutoreleasedReturnValue( -[OTManager contextForContainerName:contextID:]( self,  "contextForContainerName:contextID:",  v13,  v14));
  }

  else
  {
    v24 = sub_10001267C("octagon-account");
    v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Rejecting non-primary request on HomePod",  buf,  2u);
    }

    v15 = 0LL;
    if (a6) {
      *a6 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:",  @"com.apple.security.octagon",  60LL,  @"Non-primary personas not supported on this platform"));
    }
  }

  return v14 == 0LL;
}

            goto LABEL_34;
          }
        }

        v23 = (void *)v46;
        if (v46) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }

      v9 = v35;
      v8 = v36;

      v13 = 0LL;
    }
  }

  else
  {
    v28 = 0;
    if (a5) {
      *a5 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:",  @"CKKSErrorDomain",  52LL,  @"No current trust states; can't unwrap TLK"));
    }
  }

  return v28;
}

          v26 = &kSecAttrAccessibleWhenUnlocked;
          goto LABEL_34;
        }
      }

      v48 = (void *)objc_claimAutoreleasedReturnValue([v39 keyState]);
      if ([v48 isEqualToString:@"ready"])
      {

LABEL_53:
        v72 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView zoneName](self, "zoneName"));
        v73 = sub_1000AA6AC(@"ckkskey", v72);
        v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);

        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v142 = (os_log_s *)v39;
          _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEFAULT,  "Other device (%@) has keys; it should send them to us",
            buf,
            0xCu);
        }

        v32 = 1;
        goto LABEL_56;
      }

      v49 = (void *)objc_claimAutoreleasedReturnValue([v39 keyState]);
      v50 = [v49 isEqualToString:@"readypendingunlock"];

      if (v50) {
        goto LABEL_53;
      }
LABEL_39:

      v38 = (char *)v38 + 1;
    }

    while (v36 != v38);
    v33 = obj;
    v62 = [obj countByEnumeratingWithState:&v126 objects:v145 count:16];
    v36 = v62;
  }

  while (v62);
LABEL_48:

  v24 = v112;
  v106 = (void *)objc_claimAutoreleasedReturnValue([v112 currentTLKPointer]);
  v63 = (void *)objc_claimAutoreleasedReturnValue([v106 currentKeyUUID]);
  v64 = (void *)objc_claimAutoreleasedReturnValue([v112 currentTLKPointer]);
  v65 = (void *)objc_claimAutoreleasedReturnValue([v64 contextID]);
  v66 = (void *)objc_claimAutoreleasedReturnValue([v112 currentTLKPointer]);
  v67 = (void *)objc_claimAutoreleasedReturnValue([v66 zoneID]);
  v125 = 0LL;
  v68 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSTLKShareRecord allForUUID:contextID:zoneID:error:]( &OBJC_CLASS___CKKSTLKShareRecord,  "allForUUID:contextID:zoneID:error:",  v63,  v65,  v67,  &v125));
  v31 = (os_log_s *)v125;

  obj = v68;
  if (v31)
  {
    v69 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView zoneName](self, "zoneName"));
    v70 = sub_1000AA6AC(@"ckkskey", v69);
    v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);

    if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v142 = v31;
      _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "Error fetching device states: %@", buf, 0xCu);
    }

    v32 = 0;
    goto LABEL_86;
  }

  v123 = 0u;
  v124 = 0u;
  v121 = 0u;
  v122 = 0u;
  v31 = v68;
  v79 = -[os_log_s countByEnumeratingWithState:objects:count:]( v31,  "countByEnumeratingWithState:objects:count:",  &v121,  v140,  16LL);
  if (!v79)
  {
LABEL_71:

    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v31 = v31;
    v91 = -[os_log_s countByEnumeratingWithState:objects:count:]( v31,  "countByEnumeratingWithState:objects:count:",  &v117,  v139,  16LL);
    if (v91)
    {
      v92 = v91;
      v93 = *(void *)v118;
LABEL_73:
      v94 = 0LL;
      while (1)
      {
        if (*(void *)v118 != v93) {
          objc_enumerationMutation(v31);
        }
        v95 = *(void **)(*((void *)&v117 + 1) + 8 * v94);
        v96 = (void *)objc_claimAutoreleasedReturnValue([v95 storedCKRecord]);
        v97 = (void *)objc_claimAutoreleasedReturnValue([v96 modificationDate]);
        v98 = [v97 compare:v113];

        if (v98 == (id)1) {
          break;
        }
        if (v92 == (id)++v94)
        {
          v92 = -[os_log_s countByEnumeratingWithState:objects:count:]( v31,  "countByEnumeratingWithState:objects:count:",  &v117,  v139,  16LL);
          if (v92) {
            goto LABEL_73;
          }
          goto LABEL_79;
        }
      }

      v103 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView zoneName](self, "zoneName"));
      v104 = sub_1000AA6AC(@"ckkskey", v103);
      v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v104);

      if (!os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_85;
      }
      *(_DWORD *)buf = 138412290;
      v142 = (os_log_s *)v95;
      v102 = "Untrusted TLK Share (%@) created very recently; other devices might have keys and should rejoin the circle "
             "(and send them to us)";
LABEL_84:
      _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, v102, buf, 0xCu);
      goto LABEL_85;
    }

  self->_networkResponseHeaderSize = *((_DWORD *)v5 + 56);
  *(_DWORD *)&self->_has |= 0x100000u;
  v7 = *((_DWORD *)v5 + 70);
  if ((v7 & 2) == 0)
  {
LABEL_23:
    if ((v7 & 0x40000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

    v47 = cf;
    if (cf)
    {
      cf = 0LL;
      CFRelease(v47);
    }

    goto LABEL_35;
  }

  if (v9)
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "time fired but out of negotiation! Not restarting coder",  buf,  2u);
  }
}

LABEL_6:
  memset_s(__s, 0x40uLL, 0, 0x40uLL);
  return 0xFFFFFFFFLL;
}

    xpc_connection_send_message(a1, reply_with_format);
    xpc_release(reply_with_format);
LABEL_7:
    if (v8) {
      xpc_release(v8);
    }
    v11 = v223[3];
    if (v11) {
      CFRelease(v11);
    }
    if (*((void *)&v218 + 1)) {
      CFRelease(*((CFTypeRef *)&v218 + 1));
    }
    if (*((void *)&v219 + 1)) {
      CFRelease(*((CFTypeRef *)&v219 + 1));
    }
    if ((void)v218) {
      CFRelease((CFTypeRef)v218);
    }
    v12 = (const void *)*((void *)&v220 + 1);
    if (*((void *)&v220 + 1))
    {
      *((void *)&v220 + 1) = 0LL;
      CFRelease(v12);
    }

    if (v10) {
      CFRelease(v10);
    }
    goto LABEL_29;
  }

  if (v10) {
    CFRelease(v10);
  }
  xpc_connection_send_message(a1, reply_with_format);
  xpc_release(reply_with_format);
LABEL_29:
  _Block_object_dispose(&v222, 8);
}

  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v9 = v42;
  v10 = [v9 countByEnumeratingWithState:&v49 objects:v54 count:16];
  if (v10)
  {
    v11 = *(void *)v50;
LABEL_8:
    v12 = 0LL;
    while (1)
    {
      if (*(void *)v50 != v11) {
        objc_enumerationMutation(v9);
      }
      v13 = *(void **)(*((void *)&v49 + 1) + 8 * v12);
      if (-[EscrowRequestPerformEscrowEnrollOperation enforceRateLimiting](self, "enforceRateLimiting")
        && [v13 escrowAttemptedWithinLastSeconds:300.0])
      {
        v18 = sub_10001267C("escrowrequest");
        v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&buf[4] = v13;
          v16 = v15;
          v17 = "Skipping pending escrow request (%@); it's rate limited";
LABEL_14:
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v17, buf, 0xCu);
        }

  v5 = (void *)objc_claimAutoreleasedReturnValue([v3 allObjects]);
  v6 = (__CFString *)objc_claimAutoreleasedReturnValue([v5 componentsJoinedByString:@","]);

  return v6;
}
}

  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v10 = v5;
  v11 = [v10 countByEnumeratingWithState:&v49 objects:v54 count:16];
  if (v11)
  {
    v12 = v11;
    v13 = *(void *)v50;
LABEL_8:
    v14 = 0LL;
    while (1)
    {
      if (*(void *)v50 != v13) {
        objc_enumerationMutation(v10);
      }
      v15 = *(void **)(*((void *)&v49 + 1) + 8 * v14);
      if (v12 == (id)++v14)
      {
        v12 = [v10 countByEnumeratingWithState:&v49 objects:v54 count:16];
        if (v12) {
          goto LABEL_8;
        }
        goto LABEL_14;
      }
    }

    v16 = v15;

    if (!v16) {
      goto LABEL_25;
    }
    v17 = (void *)objc_claimAutoreleasedReturnValue([v16 uuid]);
    v18 = (void *)objc_claimAutoreleasedReturnValue([v16 serializedReason]);
    v48 = 0LL;
    v19 = (void *)objc_claimAutoreleasedReturnValue( +[EscrowRequestInformCloudServicesOperation triggerCloudServicesPasscodeRequest:serializedReason:error:]( &OBJC_CLASS___EscrowRequestInformCloudServicesOperation,  "triggerCloudServicesPasscodeRequest:serializedReason:error:",  v17,  v18,  &v48));
    v7 = v48;

    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v20 timeIntervalSince1970];
    [v16 setLastCloudServicesTriggerTime:(unint64_t)(v21 * 1000.0)];

    if (!v19 || v7)
    {
      v39 = sub_10001267C("SecError");
      v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v56 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "escrowrequest: cloudservices reports an issue caching the certificate, so we'll have to try again later: %@",  buf,  0xCu);
      }

      -[CKKSResultOperation setError:](self, "setError:", v7);
      -[EscrowRequestInformCloudServicesOperation setNextState:](self, "setNextState:", @"nothing_to_do");
      v47 = 0LL;
      [v16 saveToKeychain:&v47];
      v41 = v47;
      if (v41)
      {
        v42 = sub_10001267C("SecError");
        v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v56 = v41;
          _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "escrowrequest: unable to save the last attempt time: %@",  buf,  0xCu);
        }
      }
    }

    else
    {
      [v16 setCertCached:1];
      v46 = 0LL;
      [v16 saveToKeychain:&v46];
      v22 = v46;
      if (v22)
      {
        v7 = v22;
        v23 = sub_10001267C("SecError");
        v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v56 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "escrowrequest: unable to save escrow update request certificate status, so we'll have to try again later: %@",  buf,  0xCu);
        }

        -[CKKSResultOperation setError:](self, "setError:", v7);
        v25 = (void *)objc_claimAutoreleasedReturnValue(-[EscrowRequestInformCloudServicesOperation lockStateTracker](self, "lockStateTracker"));
        v26 = [v25 isLockedError:v7];

        if (v26)
        {
          v27 = sub_10001267C("escrowrequest");
          v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Trying again after unlock", buf, 2u);
          }

          v29 = @"wait_for_unlock";
        }

        else
        {
          v29 = @"nothing_to_do";
        }

        -[EscrowRequestInformCloudServicesOperation setNextState:](self, "setNextState:", v29);
      }

      else
      {
        v44 = sub_10001267C("escrowrequest");
        v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "CloudService successfully cached a certificate; request is ready for passcode",
            buf,
            2u);
        }

        -[EscrowRequestInformCloudServicesOperation setNextState:](self, "setNextState:", @"nothing_to_do");
        v7 = 0LL;
      }
    }
  }

  else
  {
LABEL_14:

LABEL_25:
    v30 = sub_10001267C("escrowrequest");
    v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "No pending escrow request needs a certificate",  buf,  2u);
    }

    -[EscrowRequestInformCloudServicesOperation setNextState:](self, "setNextState:", @"nothing_to_do");
    v7 = 0LL;
  }
}

uint64_t sub_100002FA0( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(void, void *, unint64_t *, unint64_t *, uint64_t), void *a5, unsigned int a6, void *a7, _DWORD *a8)
{
  uint64_t v11 = *a8;
  uint64_t v9 = sub_100002C44(a1, a2, a3, a4, a5, a6, a7, &v11);
  sub_1000063BC(HIDWORD(v11) == 0, 261, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/aeskeywrap.c");
  *a8 = v11;
  return v9;
}

uint64_t sub_100003008( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, void *a7, void *a8)
{
  v20 = 0LL;
  if (a1
    && (uint64_t v15 = a1 + a2, sub_1000065A4(a1, a1 + a2) == a2)
    && sub_100006E5C(&v20, (uint64_t)off_1002DCB98, a1, v15)
    || a3 && sub_1000065A4(a3, a3 + a4) == a4 && sub_100006E5C(&v20, (uint64_t)off_1002DCB80, a3, a3 + a4)
    || a5 && sub_100006FD8(&v20, (uint64_t)off_1002DCB90, a5, a6)
    || (uint64_t v18 = 0LL, v19 = 0LL, sub_100006C98(&v20, &v18, &v19)))
  {
    uint64_t v16 = 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t v16 = 0LL;
    *a7 = v18;
    *a8 = v19;
  }

  sub_10000687C(&v20);
  return v16;
}

void *sub_100003144(uint64_t a1, uint64_t a2)
{
  v4 = calloc(8uLL, 1uLL);
  v5 = v4;
  if (v4)
  {
    void *v4 = 0LL;
    if (a1)
    {
      if (sub_100006B90((uint64_t)v4, a1, a1 + a2))
      {
        memset_s(v5, 8uLL, 0, 8uLL);
        free(v5);
        return 0LL;
      }
    }
  }

  return v5;
}

void *sub_1000031C4(int a1, int a2)
{
  switch(a1)
  {
    case 1:
      v2 = (void **)&off_1002DCB98;
      goto LABEL_28;
    case 2:
      v2 = (void **)&off_1002DCB80;
      goto LABEL_28;
    case 3:
      v2 = (void **)&off_1002DCB90;
      goto LABEL_28;
    case 4:
      v2 = (void **)&off_1002DCBA0;
      goto LABEL_28;
    case 5:
      v2 = (void **)&off_1002DCB68;
      goto LABEL_28;
    case 6:
      v2 = (void **)&off_1002DCCB0;
      goto LABEL_28;
    case 7:
      v2 = (void **)&off_1002DCCA8;
      goto LABEL_28;
    case 8:
      v4 = (void **)&off_1002DCCC0;
      goto LABEL_30;
    case 9:
      v4 = (void **)&off_1002DCCC8;
      goto LABEL_30;
    case 10:
      v2 = (void **)&off_1002DCCD8;
      goto LABEL_28;
    case 11:
      v2 = (void **)&off_1002DCCE0;
      goto LABEL_28;
    case 12:
      v2 = (void **)&off_1002DCCE8;
      goto LABEL_28;
    case 13:
      v2 = (void **)&off_1002DCCF0;
      goto LABEL_28;
    case 14:
      v2 = (void **)&off_1002DCCF8;
      goto LABEL_28;
    case 15:
      v2 = (void **)&off_1002DCCB8;
      goto LABEL_28;
    case 16:
      v4 = (void **)&off_1002DCC00;
      goto LABEL_30;
    case 17:
      v2 = (void **)&off_1002DCC10;
      goto LABEL_28;
    case 18:
      v4 = (void **)&off_1002DCC18;
      goto LABEL_30;
    case 19:
      v5 = off_1002DCC28;
      BOOL v6 = a2 == 3;
      goto LABEL_31;
    case 20:
      v4 = (void **)&off_1002DCC30;
      goto LABEL_30;
    case 21:
      v2 = (void **)&off_1002DCC38;
      goto LABEL_28;
    case 22:
      v4 = (void **)&off_1002DCC20;
      goto LABEL_30;
    case 23:
      v4 = (void **)&off_1002DCC08;
      goto LABEL_30;
    case 24:
      v2 = (void **)&off_1002DCD00;
      goto LABEL_28;
    case 25:
      v2 = (void **)&off_1002DCD10;
LABEL_28:
      v5 = *v2;
      BOOL v6 = a2 == 2;
      goto LABEL_31;
    case 26:
      v4 = (void **)&off_1002DCCD0;
LABEL_30:
      v5 = *v4;
      BOOL v6 = a2 == 1;
LABEL_31:
      if (v6) {
        result = v5;
      }
      else {
        result = 0LL;
      }
      break;
    default:
      result = 0LL;
      break;
  }

  return result;
}

uint64_t sub_100003344(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 3758097090LL;
  uint64_t v9 = (unsigned __int8 *)sub_1000031C4(a2, 2);
  if (!v9) {
    return v8;
  }
  uint64_t v10 = (uint64_t)v9;
  if (!a3) {
    return 0LL;
  }
  uint64_t v11 = 0x2000000000000010LL;
  if (a2 != 1)
  {
    if (a2 == 2)
    {
      uint64_t v11 = 0x2000000000000011LL;
      goto LABEL_7;
    }

    return 0LL;
  }

LABEL_7:
  uint64_t v12 = a3 + a4;
  v14[0] = a3;
  v14[1] = v12;
  uint64_t v15 = 0LL;
  return v8;
}
}

  v14 = -[SECC2MPNetworkEvent copyWithZone:](self->_networkEvent, "copyWithZone:", a3);
  uint64_t v15 = (void *)v6[8];
  v6[8] = v14;

  uint64_t v16 = -[SECC2MPGenericEvent copyWithZone:](self->_genericEvent, "copyWithZone:", a3);
  v17 = (void *)v6[6];
  v6[6] = v16;

  return v6;
}

      return;
    }

    if (a4 == 3)
    {
      v5 = sub_1000AA6AC(@"ckks", 0LL);
      BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v10[0]) = 0;
        v7 = "Ignoring kSecDbCKKSTransaction notification";
LABEL_11:
        _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, v7, (uint8_t *)v10, 2u);
        goto LABEL_7;
      }

      goto LABEL_7;
    }

    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1000989B8;
    v10[3] = &unk_100284A68;
    v10[4] = a2;
    v10[5] = a4;
    v11.length = CFArrayGetCount(a5);
    v11.location = 0LL;
    CFArrayApplyFunction(a5, v11, (CFArrayApplierFunction)sub_100098B70, v10);
  }
}

  return v5;
}

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSUpdateCurrentItemPointerOperation viewState](self, "viewState"));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneID]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 zoneName]);
    v13 = sub_1000AA6AC(@"ckkscurrent", v12);
    v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);

    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = (const void *)v31[5];
      *(_DWORD *)buf = 138412290;
      v42 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Query failed: %@", buf, 0xCu);
    }

    if (!a4) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  if (v8) {
    goto LABEL_7;
  }
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v9 = (SecDbItem *)v38[3];
LABEL_18:

  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v37, 8);

  return v9;
}

  v48 = 0LL;
LABEL_8:
  v47 = -[NSString hash](self->_networkTaskDescription, "hash");
  v46 = -[NSString hash](self->_networkHostname, "hash");
  v45 = -[NSString hash](self->_networkRemoteAddresssAndPort, "hash");
  v44 = -[NSString hash](self->_networkConnectionUuid, "hash");
  if ((*((_BYTE *)&self->_has + 2) & 0x80) != 0) {
    v43 = 2654435761LL * self->_networkConnectionReused;
  }
  else {
    v43 = 0LL;
  }
  v42 = -[NSString hash](self->_networkInterfaceIdentifier, "hash");
  v41 = -[NSString hash](self->_networkProtocolName, "hash");
  v4 = self->_has;
  if ((*(_DWORD *)&v4 & 0x80000) != 0)
  {
    v40 = 2654435761LL * self->_networkRequestHeaderSize;
    if ((*(_BYTE *)&v4 & 1) != 0)
    {
LABEL_13:
      v39 = 2654435761u * self->_networkRequestBodyBytesSent;
      if ((*(_DWORD *)&v4 & 0x100000) != 0) {
        goto LABEL_14;
      }
      goto LABEL_19;
    }
  }

  else
  {
    v40 = 0LL;
    if ((*(_BYTE *)&v4 & 1) != 0) {
      goto LABEL_13;
    }
  }

  v39 = 0LL;
  if ((*(_DWORD *)&v4 & 0x100000) != 0)
  {
LABEL_14:
    v38 = 2654435761LL * self->_networkResponseHeaderSize;
    if ((*(_BYTE *)&v4 & 2) != 0) {
      goto LABEL_15;
    }
LABEL_20:
    v37 = 0LL;
    if ((*(_DWORD *)&v4 & 0x40000) != 0) {
      goto LABEL_16;
    }
    goto LABEL_21;
  }

  return v7;
}

  return v6;
}

  return v12;
}

uint64_t sub_100003440(void ***a1)
{
  uint64_t result = 3758097090LL;
  if (a1)
  {
    v3 = *a1;
    if (*a1)
    {
      *a1 = 0LL;
      sub_10000687C(v3);
      memset_s(v3, 8uLL, 0, 8uLL);
      free(v3);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10000349C(int a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, void ***a6)
{
  uint64_t v12 = 3758097090LL;
  v13 = off_1002DCBE0;
  v14 = (void **)calloc(8uLL, 1uLL);
  *v14 = 0LL;
  sub_100006FC8(v14, (uint64_t)off_1002DCB50, (uint64_t)v13);
  v26 = 0LL;
  size_t v27 = 0LL;
  v24 = 0LL;
  size_t v25 = 0LL;
  if (!a6) {
    goto LABEL_14;
  }
  uint64_t v15 = calloc(0x50uLL, 1uLL);
  v23 = v15;
  if (!v15)
  {
    uint64_t v12 = 3758604298LL;
    goto LABEL_14;
  }

  uint64_t v16 = (void **)v15;
  memset_s(v15, 0x50uLL, 0, 0x50uLL);
  if (a4 && sub_100006B90((uint64_t)v14, a4, a4 + a5)
    || sub_100007144(v14, (uint64_t)off_1002DCB60, a2)
    || sub_100007144(v14, (uint64_t)off_1002DCBB0, a3)
    || sub_100006C98(v14, &v26, &v27))
  {
LABEL_17:
    sub_100003848((uint64_t *)&v23);
    goto LABEL_14;
  }

  uint64_t v17 = sub_100003DA4(a1, v26, v27, &v24, &v25);
  if ((_DWORD)v17)
  {
    uint64_t v12 = v17;
    goto LABEL_17;
  }

  uint64_t v18 = (char *)v24;
  size_t v19 = v25;
  *uint64_t v16 = v24;
  v16[1] = (void *)v19;
  *((_DWORD *)v16 + 10) = a1;
  v16[2] = &v18[v19];
  v21 = 0LL;
  uint64_t v22 = 0LL;
  uint64_t v12 = 0LL;
  *a6 = v16;
  v24 = 0LL;
  size_t v25 = 0LL;
LABEL_14:
  sub_10000687C(v14);
  memset_s(v14, 8uLL, 0, 8uLL);
  free(v14);
  memset_s(v26, v27, 0, v27);
  free(v26);
  memset_s(v24, v25, 0, v25);
  free(v24);
  return v12;
}

uint64_t sub_1000036C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, size_t *a7)
{
  uint64_t v14 = 3758097090LL;
  uint64_t v15 = off_1002DCBC8;
  uint64_t v16 = (void **)calloc(8uLL, 1uLL);
  *uint64_t v16 = 0LL;
  sub_100006FC8(v16, (uint64_t)off_1002DCB50, (uint64_t)v15);
  __s = 0LL;
  rsize_t __n = 0LL;
  if (!sub_1000040B0(a1, v16, a2, a3))
  {
    sub_1000068F4(v16, (unsigned __int8 *)off_1002DCB68);
    sub_1000068F4(v16, (unsigned __int8 *)off_1002DCBC0);
    if (!sub_100006FD8(v16, (uint64_t)off_1002DCB68, a4, a5)
      && !sub_100006E5C(v16, (uint64_t)off_1002DCBC0, *(void *)a1, *(void *)(a1 + 16))
      && !sub_100006C98(v16, &__s, &__n))
    {
      uint64_t v14 = sub_100003DA4(*(_DWORD *)(a1 + 40), __s, __n, a6, a7);
    }
  }

  sub_10000687C(v16);
  memset_s(v16, 8uLL, 0, 8uLL);
  free(v16);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v14;
}

uint64_t sub_100003848(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return 3758097090LL;
  }
  *a1 = 0LL;
  if (*(void *)v1)
  {
    memset_s(*(void **)v1, *(void *)(v1 + 8), 0, *(void *)(v1 + 8));
    free(*(void **)v1);
  }

  v2 = *(void **)(v1 + 48);
  if (v2)
  {
    memset_s(v2, *(void *)(v1 + 56), 0, *(void *)(v1 + 56));
    free(*(void **)(v1 + 48));
  }

  v3 = *(void **)(v1 + 64);
  if (v3)
  {
    memset_s(v3, *(void *)(v1 + 72), 0, *(void *)(v1 + 72));
    free(*(void **)(v1 + 64));
  }

  memset_s((void *)v1, 0x50uLL, 0, 0x50uLL);
  free((void *)v1);
  return 0LL;
}

uint64_t sub_1000038F8(int a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t v4 = 3758097090LL;
  if (a2)
  {
    if (a3)
    {
      if (sub_1000065A4((uint64_t)a2, (uint64_t)a2 + a3) == a3)
      {
        uint64_t v4 = 3758604298LL;
        uint64_t v9 = calloc(0x50uLL, 1uLL);
        uint64_t v12 = v9;
        if (v9)
        {
          uint64_t v10 = (uint64_t)v9;
          memset_s(v9, 0x50uLL, 0, 0x50uLL);
          *(_DWORD *)(v10 + 40) = a1;
          if (sub_100003F7C(v10, a2, a3))
          {
            sub_100003848((uint64_t *)&v12);
          }

          else
          {
            uint64_t v4 = 0LL;
            *a4 = v10;
          }
        }
      }
    }
  }

  return v4;
}

uint64_t sub_1000039BC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, size_t a5, void *a6, size_t *a7)
{
  uint64_t v14 = 3758097090LL;
  uint64_t v15 = off_1002DCBD0;
  uint64_t v16 = (void **)calloc(8uLL, 1uLL);
  *uint64_t v16 = 0LL;
  sub_100006FC8(v16, (uint64_t)off_1002DCB50, (uint64_t)v15);
  __s = 0LL;
  rsize_t __n = 0LL;
  v20 = a4;
  size_t v21 = a5;
  if (a4)
  {
    if (a5)
    {
      uint64_t v17 = (uint64_t)a4 + a5;
      if (sub_1000065A4((uint64_t)a4, (uint64_t)a4 + a5) == a5)
      {
        int v18 = sub_100004138(a1);
        if (!v18)
        {
          uint64_t v27 = 0LL;
          v28 = 0LL;
          uint64_t v25 = 0LL;
          uint64_t v26 = 0LL;
          uint64_t v24 = 0LL;
          if (!sub_1000066DC((uint64_t)off_1002DCB88, &v24, &v25, (uint64_t)a4, v17)
            || !sub_1000066DC((uint64_t)off_1002DCB78, &v26, &v27, (uint64_t)a4, v17)
            || sub_100006E5C(&v28, (uint64_t)off_1002DCB68, v26, v17)
            || sub_100006E5C(&v28, (uint64_t)off_1002DCB88, v24, v17)
            || sub_100006C98(&v28, &v20, &v21))
          {
            sub_10000687C(&v28);
            goto LABEL_19;
          }

          sub_10000687C(&v28);
        }

        if (!sub_1000040B0(a1, v16, a2, a3))
        {
          sub_1000068F4(v16, (unsigned __int8 *)off_1002DCB68);
          sub_1000068F4(v16, (unsigned __int8 *)off_1002DCBC0);
          if (!sub_100006E5C(v16, (uint64_t)off_1002DCB68, (uint64_t)v20, (uint64_t)v20 + v21)
            && !sub_100006E5C(v16, (uint64_t)off_1002DCBC0, *(void *)a1, *(void *)(a1 + 16))
            && !sub_100006C98(v16, &__s, &__n))
          {
            uint64_t v14 = sub_100003DA4(*(_DWORD *)(a1 + 40), __s, __n, a6, a7);
          }
        }

        if (!v18)
        {
          memset_s(v20, v21, 0, v21);
          free(v20);
        }
      }
    }
  }

LABEL_19:
  sub_10000687C(v16);
  memset_s(v16, 8uLL, 0, 8uLL);
  free(v16);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v14;
}

  v29 = sub_10001267C("SecError");
  v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v35 = a2;
    v36 = 2112;
    v37 = v33;
    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "failed to der encode coder for peer %@, dropping it: %@",  buf,  0x16u);
  }

  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v4 + 96), a2);
  uint64_t v9 = v33;
  v31 = sub_10001267C("engine");
  v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v35 = a2;
    v36 = 2112;
    v37 = v9;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "%@ no coder for peer: %@", buf, 0x16u);
  }

  if (v9) {
    goto LABEL_24;
  }
}

    v39 = 0LL;
    uint64_t v25 = -[CKKSKey unwrapViaTLKSharesTrustedBy:contextID:error:]( self,  "unwrapViaTLKSharesTrustedBy:contextID:error:",  v9,  v8,  &v39);
    uint64_t v26 = v39;
    uint64_t v27 = v26;
    if (!v25 || v26)
    {
      v33 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKey zoneName](self, "zoneName"));
      v34 = sub_1000AA6AC(@"ckksshare", v33);
      v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);

      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        v36 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKey uuid](self, "uuid"));
        *(_DWORD *)buf = 138412546;
        v44 = v36;
        v45 = 2112;
        v46 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "Failed to unwrap tlk(%@) via shares: %@",  buf,  0x16u);
      }

      if (!a5)
      {
        uint64_t v16 = 0;
        goto LABEL_33;
      }
    }

    else
    {
      v38 = 0LL;
      uint64_t v16 = 1;
      v28 = -[CKKSKey saveKeyMaterialToKeychain:error:](self, "saveKeyMaterialToKeychain:error:", 1LL, &v38);
      v29 = v38;
      uint64_t v27 = v29;
      if (v28 && !v29) {
        goto LABEL_33;
      }
      v30 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKey zoneName](self, "zoneName"));
      v31 = sub_1000AA6AC(@"ckksshare", v30);
      v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);

      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v44 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "Errored saving TLK to keychain: %@",  buf,  0xCu);
      }

      if (!a5)
      {
        uint64_t v16 = 1;
LABEL_33:

        goto LABEL_34;
      }
    }

    uint64_t v27 = v27;
    uint64_t v16 = 0;
    *a5 = v27;
    goto LABEL_33;
  }

  uint64_t v16 = 0;
LABEL_35:

  return v16;
}

LABEL_20:
    v29 = 0;
    goto LABEL_21;
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"parentkeyref"]);

  if (v11)
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"parentkeyref"]);
    v13 = (void *)objc_claimAutoreleasedReturnValue([v12 recordID]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 recordName]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKey parentKeyUUID](self, "parentKeyUUID"));
    uint64_t v16 = [v14 isEqualToString:v15];

    if ((v16 & 1) == 0)
    {
      uint64_t v17 = sub_1000AA6AC(@"ckkskey", 0LL);
      int v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        v36 = 0;
        size_t v19 = "wrapping key reference (non-self-wrapped) does not match";
        v20 = (uint8_t *)&v36;
LABEL_9:
        _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, v19, v20, 2u);
        goto LABEL_19;
      }

      goto LABEL_19;
    }
  }

  else if (!-[CKKSKey wrapsSelf](self, "wrapsSelf"))
  {
    v31 = sub_1000AA6AC(@"ckkskey", 0LL);
    int v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_19;
    }
    v37 = 0;
    size_t v19 = "wrapping key reference (self-wrapped) does not match";
    v20 = (uint8_t *)&v37;
    goto LABEL_9;
  }

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"class"]);
  v23 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKey keyclass](self, "keyclass"));
  uint64_t v24 = [v22 isEqual:v23];

  if ((v24 & 1) == 0)
  {
    v30 = sub_1000AA6AC(@"ckkskey", 0LL);
    int v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_19;
    }
    v35 = 0;
    size_t v19 = "key class does not match";
    v20 = (uint8_t *)&v35;
    goto LABEL_9;
  }

  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"wrappedkey"]);
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKey wrappedKeyData](self, "wrappedKeyData"));
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 base64EncodedStringWithOptions:0]);
  v28 = [v25 isEqual:v27];

  if ((v28 & 1) == 0)
  {
    v32 = sub_1000AA6AC(@"ckkskey", 0LL);
    int v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_19;
    }
    v34 = 0;
    size_t v19 = "wrapped key does not match";
    v20 = (uint8_t *)&v34;
    goto LABEL_9;
  }

  v29 = 1;
LABEL_21:

  return v29;
}

              uint64_t v16 = 1;
              goto LABEL_48;
            }
          }

          else
          {
            size_t v19 = *(void *)(a1 + 16);
            if (v19 != sub_10010C560((uint64_t)@"inet", &qword_1002DEB38, (uint64_t)&unk_1002DEB30)
              || !CFEqual(v14, kSecAttrAccessibleAlwaysPrivate))
            {
              goto LABEL_19;
            }

            if (!CFEqual(v12, @"PrintKitAccessGroup"))
            {
              if (!CFEqual(v12, @"apple")) {
                goto LABEL_19;
              }
              v30 = (const __CFNumber *)sub_1000E7EC0(a1, kSecAttrProtocol);
              if (!v30) {
                goto LABEL_19;
              }
              v31 = v30;
              v32 = CFGetTypeID(v30);
              if (v32 == CFNumberGetTypeID())
              {
                valuePtr = -1431655766;
                CFNumberGetValue(v31, kCFNumberSInt32Type, &valuePtr);
                if (valuePtr > 2020635749)
                {
                  if (valuePtr > 2020832359)
                  {
                    if (valuePtr == 2020832370) {
                      goto LABEL_33;
                    }
                    v33 = 2020832360;
                  }

                  else
                  {
                    if (valuePtr == 2020635750) {
                      goto LABEL_33;
                    }
                    v33 = 2020635752;
                  }
                }

                else if (valuePtr > 1752462199)
                {
                  if (valuePtr == 1752462200) {
                    goto LABEL_33;
                  }
                  v33 = 1920234360;
                }

                else
                {
                  if (valuePtr == 1718907000) {
                    goto LABEL_33;
                  }
                  v33 = 1752461432;
                }

                if (valuePtr != v33) {
                  goto LABEL_19;
                }
              }

              else
              {
                v42 = CFGetTypeID(v31);
                if (v42 != CFStringGetTypeID()
                  || !CFEqual(v31, kSecAttrProtocolHTTPProxy)
                  && !CFEqual(v31, kSecAttrProtocolHTTPSProxy)
                  && !CFEqual(v31, kSecAttrProtocolRTSPProxy)
                  && !CFEqual(v31, kSecAttrProtocolFTPProxy))
                {
                  goto LABEL_19;
                }
              }
            }
          }

  return v7;
}

  v38 = 0LL;
  if ((*(_BYTE *)&v4 & 2) == 0) {
    goto LABEL_20;
  }
LABEL_15:
  v37 = 2654435761u * self->_networkResponseBodyBytesReceived;
  if ((*(_DWORD *)&v4 & 0x40000) != 0)
  {
LABEL_16:
    v36 = 2654435761LL * self->_networkPreviousAttemptCount;
    goto LABEL_22;
  }

    uint64_t v12 = 0LL;
    goto LABEL_20;
  }

  v13 = v38;
  uint64_t v14 = sub_10001267C("circleOps");
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  uint64_t v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if (v13)
  {
    if (v16)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "setting flag in account for piggyback v0",  buf,  2u);
    }

    sub_1001A93D0(v7, (uint64_t)@"initialsynctimeout", (uint64_t)kCFBooleanTrue, 0LL);
  }

  else
  {
    if (v16)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "clearing flag in account for piggyback v0",  buf,  2u);
    }

    sub_1001A9290(v7, (uint64_t)@"initialsynctimeout", 0LL);
  }

  sub_1001A164C(v7);
  sub_10018EABC((uint64_t)@"Joining", v7, (uint64_t)cf, (uint64_t)v39, (uint64_t)v40, a3);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "circle_transport"));
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472LL;
  v31[2] = sub_10018ECB4;
  v31[3] = &unk_100291980;
  v33 = v12;
  v34 = cf;
  v35 = v39;
  v36 = v40;
  v32 = v8;
  v37 = a4;
  uint64_t v12 = [v32 modifyCircle:v27 err:a4 action:v31];

  v28 = cf;
  if (cf)
  {
    cf = 0LL;
    CFRelease(v28);
  }

  v29 = v39;
  if (v39)
  {
    v39 = 0LL;
    CFRelease(v29);
  }

  v30 = v40;
  if (v40)
  {
    v40 = 0LL;
    CFRelease(v30);
  }

  int v18 = (os_log_s *)v32;
LABEL_20:

  return v12;
}
}

  return 1;
}

uint64_t sub_100003C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 3758097090LL;
  v7 = off_1002DCBD8;
  uint64_t v8 = (void **)calloc(8uLL, 1uLL);
  *uint64_t v8 = 0LL;
  sub_100006FC8(v8, (uint64_t)off_1002DCB50, (uint64_t)v7);
  __s = 0LL;
  rsize_t __n = 0LL;
  uint64_t v10 = 0LL;
  rsize_t __smax = 0LL;
  if (!sub_1000040B0(a1, v8, a2, a3))
  {
    sub_1000068F4(v8, (unsigned __int8 *)off_1002DCBC0);
    if (!sub_100006E5C(v8, (uint64_t)off_1002DCBC0, *(void *)a1, *(void *)(a1 + 16))
      && !sub_100006C98(v8, &__s, &__n))
    {
      uint64_t v6 = sub_100003DA4(*(_DWORD *)(a1 + 40), __s, __n, &v10, &__smax);
    }
  }

  sub_10000687C(v8);
  memset_s(v8, 8uLL, 0, 8uLL);
  free(v8);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  if (v10)
  {
    memset_s(v10, __smax, 0, __smax);
    free(v10);
  }

  return v6;
}

uint64_t sub_100003DA4(int a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  mach_port_t v10 = sub_100004734();
  if (v10)
  {
    if (a2)
    {
      mach_port_t v11 = v10;
      uint64_t v12 = 3758097090LL;
      if (sub_1000065A4((uint64_t)a2, (uint64_t)a2 + a3) == a3)
      {
        bzero(__src, 0x8000uLL);
        size_t __count = 0x8000LL;
        uint64_t input = a1;
        uint64_t v12 = IOConnectCallMethod(v11, 0x2Bu, &input, 1u, a2, a3, 0LL, 0LL, __src, &__count);
        if (!(_DWORD)v12 && a4 && a5)
        {
          v13 = calloc(__count, 1uLL);
          *a4 = v13;
          if (v13)
          {
            memcpy(v13, __src, __count);
            uint64_t v12 = 0LL;
            *a5 = __count;
          }

          else
          {
            uint64_t v12 = 3758097085LL;
          }
        }
      }
    }

    else
    {
      uint64_t v12 = 3758097090LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_aks_operation",  ":",  457,  "",  0,  "",  "");
    uint64_t v12 = 3758097084LL;
  }

  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  return v12;
}

uint64_t sub_100003F7C(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  if (*(void *)a1)
  {
    memset_s(*(void **)a1, *(void *)(a1 + 8), 0, *(void *)(a1 + 8));
    free(*(void **)a1);
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
  }

  uint64_t v6 = calloc(a3, 1uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = a3;
  if (!v6) {
    return 3758604298LL;
  }
  memcpy(v6, a2, a3);
  v7 = *(void **)a1;
  uint64_t v8 = *(void *)a1 + *(void *)(a1 + 8);
  *(void *)(a1 + 16) = v8;
  if ((sub_1000066DC((uint64_t)off_1002DCB80, &v10, &v11, *(void *)a1, *(void *)(a1 + 16)) & 1) != 0
    || (uint64_t result = sub_1000066DC((uint64_t)off_1002DCB70, &v10, &v11, *(void *)a1, *(void *)(a1 + 16)), (_DWORD)result))
  {
    uint64_t result = 0LL;
    *(void *)(a1 + 24) = v10;
  }

  return result;
}

uint64_t sub_1000040B0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 3758604298LL;
  if (a1)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if ((!v8 || !sub_100006B90((uint64_t)a2, v8, v8 + *(void *)(a1 + 56)))
      && (!a3 || !sub_100006B90((uint64_t)a2, a3, a3 + a4)))
    {
      sub_1000068F4(a2, (unsigned __int8 *)off_1002DCB80);
      return 0LL;
    }
  }

  return v4;
}

uint64_t sub_100004138(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    return 0LL;
  }
  uint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  uint64_t result = sub_1000066DC((uint64_t)off_1002DCBB8, &v4, &v5, v1, *(void *)(a1 + 16));
  if ((_DWORD)result) {
    return sub_1000067A8(v4, *(void *)(a1 + 16));
  }
  return result;
}

uint64_t sub_10000419C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  uint64_t v4 = 0LL;
  uint64_t result = sub_1000066DC((uint64_t)off_1002DCBB0, &v3, &v4, v1, *(void *)(a1 + 16));
  if ((_DWORD)result) {
    return sub_1000067A8(v3, v3 + v4);
  }
  return result;
}

uint64_t sub_1000041F8(uint64_t *a1, void *a2)
{
  unsigned int v20 = 0;
  uint64_t v19 = 0LL;
  uint64_t v2 = a1[4];
  if (!v2) {
    return 0LL;
  }
  uint64_t v17 = 0LL;
  uint64_t v18 = 0LL;
  if (sub_1000066DC((uint64_t)off_1002DCBA8, &v17, &v18, v2, a1[2]))
  {
    *(void *)&__int128 v16 = v17;
    *((void *)&v16 + 1) = v17 + v18;
    sub_100006810(&v16, 4LL, &v20, &v19);
  }

  int v5 = sub_10000419C((uint64_t)a1);
  if ((v5 - 7) < 2)
  {
    uint64_t v6 = ccec_cp_384();
    goto LABEL_9;
  }

  if ((v5 - 4) <= 1)
  {
    uint64_t v6 = ccec_cp_256();
LABEL_9:
    uint64_t v8 = (void *)v6;
    if (v6)
    {
      uint64_t v9 = j__cczp_bitlen(v6);
      if (v20 == (unint64_t)(v9 + 7) >> 3)
      {
        if (v19 && !a1[8])
        {
          __chkstk_darwin(v9);
          uint64_t v11 = (char *)&v15 - v10;
          bzero((char *)&v15 - v10, v10);
          ccec_compact_import_pub(v8, v20, v19, v11);
          size_t v12 = (2 * sub_10000642C()) | 1;
          v13 = calloc(v12, 1uLL);
          a1[8] = (uint64_t)v13;
          a1[9] = v12;
          if (v13) {
            ccec_export_pub(v11, v13);
          }
          cc_clear(24LL * *v8 + 16, v11);
        }

        uint64_t v14 = a1[9];
        uint64_t v19 = a1[8];
        unsigned int v20 = v14;
      }
    }
  }

  *a2 = v20;
  return v19;
}

uint64_t sub_1000043C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, size_t *a7)
{
  uint64_t v14 = 3758097090LL;
  uint64_t v15 = off_1002DCBE8;
  __int128 v16 = (void **)calloc(8uLL, 1uLL);
  *__int128 v16 = 0LL;
  sub_100006FC8(v16, (uint64_t)off_1002DCB50, (uint64_t)v15);
  __s = 0LL;
  rsize_t __n = 0LL;
  if (!sub_1000040B0(a1, v16, a2, a3))
  {
    sub_1000068F4(v16, (unsigned __int8 *)off_1002DCB68);
    sub_1000068F4(v16, (unsigned __int8 *)off_1002DCBC0);
    if (!sub_100006FD8(v16, (uint64_t)off_1002DCB68, a4, a5)
      && !sub_100006E5C(v16, (uint64_t)off_1002DCBC0, *(void *)a1, *(void *)(a1 + 16))
      && !sub_100006C98(v16, &__s, &__n))
    {
      uint64_t v14 = sub_100003DA4(*(_DWORD *)(a1 + 40), __s, __n, a6, a7);
    }
  }

  sub_10000687C(v16);
  memset_s(v16, 8uLL, 0, 8uLL);
  free(v16);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v14;
}

uint64_t sub_100004548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, size_t *a7)
{
  uint64_t v14 = 3758097090LL;
  uint64_t v15 = off_1002DCBF0;
  __int128 v16 = (void **)calloc(8uLL, 1uLL);
  *__int128 v16 = 0LL;
  sub_100006FC8(v16, (uint64_t)off_1002DCB50, (uint64_t)v15);
  __s = 0LL;
  rsize_t __n = 0LL;
  if (!sub_1000040B0(a1, v16, a2, a3))
  {
    sub_1000068F4(v16, (unsigned __int8 *)off_1002DCB68);
    sub_1000068F4(v16, (unsigned __int8 *)off_1002DCBC0);
    if (!sub_100006E5C(v16, (uint64_t)off_1002DCB68, a4, a4 + a5)
      && !sub_100006E5C(v16, (uint64_t)off_1002DCBC0, *(void *)a1, *(void *)(a1 + 16))
      && !sub_100006C98(v16, &__s, &__n))
    {
      uint64_t v14 = sub_100003DA4(*(_DWORD *)(a1 + 40), __s, __n, a6, a7);
    }
  }

  sub_10000687C(v16);
  memset_s(v16, 8uLL, 0, 8uLL);
  free(v16);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v14;
}

uint64_t sub_1000046C8(uint64_t *a1, void *a2)
{
  uint64_t result = *a1;
  *a2 = a1[1];
  return result;
}

uint64_t sub_1000046D4(uint64_t a1, uint64_t *a2)
{
  *a2 = sub_1000065A4(*(void *)(a1 + 24), *(void *)(a1 + 16));
  return *(void *)(a1 + 24);
}

void sub_100004708(void *a1, rsize_t __n)
{
}

uint64_t sub_100004734()
{
  if (qword_1002DE6A0 != -1) {
    dispatch_once(&qword_1002DE6A0, &stru_1002829A0);
  }
  dispatch_sync((dispatch_queue_t)qword_1002DE6A8, &stru_100282960);
  uint64_t result = dword_1002DE698;
  if (!dword_1002DE698)
  {
    syslog(3, "failed to open connection to %s\n", "AppleKeyStore");
    return dword_1002DE698;
  }

  return result;
}

void sub_1000047BC(id a1)
{
  if (!dword_1002DE698) {
    dword_1002DE698 = sub_100004820("IOService:/IOResources/AppleKeyStore", "AppleKeyStore");
  }
}

void sub_1000047F8(id a1)
{
  qword_1002DE6A8 = (uint64_t)dispatch_queue_create("aks-client-queue", 0LL);
}

uint64_t sub_100004820(char *path, const char *a2)
{
  kern_return_t v5;
  CFDictionaryRef v6;
  io_service_t MatchingService;
  io_object_t v8;
  uint64_t result;
  kern_return_t v10;
  io_connect_t connect;
  connect = 0;
  io_service_t v3 = IORegistryEntryFromPath(kIOMasterPortDefault, path);
  if (!v3 || (io_object_t v4 = v3, v5 = IOServiceOpen(v3, mach_task_self_, 0, &connect), IOObjectRelease(v4), v5))
  {
    uint64_t v6 = IOServiceMatching(a2);
    MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v6);
    if (MatchingService)
    {
      uint64_t v8 = MatchingService;
      IOServiceOpen(MatchingService, mach_task_self_, 0, &connect);
      IOObjectRelease(v8);
    }
  }

  uint64_t result = connect;
  if (connect)
  {
    size_t v10 = IOConnectCallMethod(connect, 0, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
    uint64_t result = connect;
    if (v10)
    {
      IOServiceClose(connect);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100004914(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&__int128 v6 = a1;
  *((void *)&v6 + 1) = a1 + a2;
  if (!ccder_blob_decode_range(&v6, 0x2000000000000010LL, &v6)
    || !sub_1000075BC(&v6, 0x8000000000000000LL, a3)
    || !sub_100006A08(&v6, 0x8000000000000001LL, a3 + 1, 16)
    || !sub_100006A08(&v6, 0x8000000000000002LL, a3 + 3, 40)
    || !sub_100006A08(&v6, 0x8000000000000003LL, a3 + 8, 16))
  {
    return 4294967277LL;
  }

  int v4 = sub_1000075BC(&v6, 0x8000000000000004LL, a3 + 10);
  uint64_t result = 4294967277LL;
  if (v4)
  {
    if ((void)v6 == *((void *)&v6 + 1)) {
      return 0LL;
    }
    else {
      return 4294967277LL;
    }
  }

  return result;
}

uint64_t sub_1000049F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v12 = 32;
  if (*(void *)a1)
  {
    uint64_t v10 = 4294967284LL;
  }

  else
  {
    uint64_t v8 = ccsha256_di(a1);
    uint64_t v9 = sub_100002FA0((uint64_t)__s, 0x20u, 0xA6A6A6A6A6A6A6A6LL, 0LL, (void *)(a1 + 24), 0x28u, (void *)a4, &v12);
    if ((_DWORD)v9)
    {
      uint64_t v10 = v9;
      goto LABEL_8;
    }

    if (v12 != 32)
    {
LABEL_9:
      uint64_t v10 = 4294967286LL;
    }

    else
    {
      cccurve25519_make_pub(a4 + 32, a4);
      else {
        uint64_t v10 = 0LL;
      }
    }
  }

LABEL_8:
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  return v10;
}

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:kSecDataInetExtraNotes]);
  if (v15
    || (uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:kSecDataInetExtraHistory])) != 0
    || (uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:kSecDataInetExtraClientDefined0])) != 0
    || (uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:kSecDataInetExtraClientDefined1])) != 0
    || (uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:kSecDataInetExtraClientDefined2])) != 0)
  {
  }

  else
  {
    v31 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:kSecDataInetExtraClientDefined3]);

    if (!v31) {
      goto LABEL_15;
    }
  }

  if (!-[SecuritydXPCServer clientHasBooleanEntitlement:]( self,  "clientHasBooleanEntitlement:",  @"com.apple.private.keychain.inet_expansion_fields"))
  {
    sub_1000194E0( -34018,  (__CFString **)&cf,  @"SecItemAddAndNotifyOnSync: %@ does not have entitlement %@",  self->_client.task,  @"com.apple.private.keychain.inet_expansion_fields");
LABEL_21:
    ((void (*)(void *, void, void, CFTypeRef))v11[2])(v11, 0LL, 0LL, cf);
    v23 = cf;
    if (cf)
    {
      cf = 0LL;
      CFRelease(v23);
    }

    goto LABEL_23;
  }

    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), kCFNull);
    return;
  }

  int v5 = sub_100011D8C((const __CFSet *)cf);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v5);
  if (v5) {
    CFRelease(v5);
  }
}

    v10[2](v10, v13);
    goto LABEL_9;
  }

  uint64_t v19 = sub_10001267C("escrowrequest");
  unsigned int v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v26 = v8;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "saved new prerecord for uuid %@", buf, 0xCu);
  }

  size_t v21 = (void *)objc_claimAutoreleasedReturnValue(-[EscrowRequestServer controller](self, "controller"));
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 stateMachine]);
  [v22 pokeStateMachine];

  v10[2](v10, 0LL);
LABEL_9:
}

  if (a8)
  {
    size_t v21 = v21;
    v32 = 0LL;
    *a8 = v21;
  }

  else
  {
    v32 = 0LL;
  }

  return v6;
}

    uint64_t v8 = 0LL;
    goto LABEL_111;
  }

  if ([*(id *)(v1 + 32) halted])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 40) zoneName]);
    io_service_t v3 = sub_1000AA6AC(@"ckksfetch", v2);
    int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      int v5 = "Dropping fetch due to halted operation";
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v5, buf, 2u);
      goto LABEL_8;
    }

    goto LABEL_8;
  }

  v171 = 0u;
  v172 = 0u;
  v169 = 0u;
  v170 = 0u;
  uint64_t v9 = *(id *)(v1 + 48);
  uint64_t v10 = [v9 countByEnumeratingWithState:&v169 objects:v188 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    int v12 = *(void *)v170;
    do
    {
      for (i = 0LL; i != v11; i = (char *)i + 1)
      {
        if (*(void *)v170 != v12) {
          objc_enumerationMutation(v9);
        }
        uint64_t v14 = *(void *)(*((void *)&v169 + 1) + 8LL * (void)i);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 32) operationDependencies]);
        [v15 intransactionCKRecordChanged:v14 resync:*(unsigned __int8 *)(v1 + 72)];
      }

      uint64_t v11 = [v9 countByEnumeratingWithState:&v169 objects:v188 count:16];
    }

    while (v11);
  }

  v167 = 0u;
  v168 = 0u;
  v165 = 0u;
  v166 = 0u;
  __int128 v16 = *(id *)(v1 + 56);
  uint64_t v17 = [v16 countByEnumeratingWithState:&v165 objects:v187 count:16];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)v166;
    do
    {
      for (j = 0LL; j != v18; j = (char *)j + 1)
      {
        if (*(void *)v166 != v19) {
          objc_enumerationMutation(v16);
        }
        size_t v21 = *(void **)(*((void *)&v165 + 1) + 8LL * (void)j);
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 32) operationDependencies]);
        v23 = (void *)objc_claimAutoreleasedReturnValue([v21 recordID]);
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v21 recordType]);
        [v22 intransactionCKRecordDeleted:v23 recordType:v24 resync:*(unsigned __int8 *)(v1 + 72)];
      }

      uint64_t v18 = [v16 countByEnumeratingWithState:&v165 objects:v187 count:16];
    }

    while (v18);
  }

  v141 = v1;
  if (!*(_BYTE *)(v1 + 72))
  {
    v42 = 0LL;
    goto LABEL_64;
  }

  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 32) resyncRecordsSeen]);

  if (!v25)
  {
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    [*(id *)(v1 + 32) setResyncRecordsSeen:v26];
  }

  v163 = 0u;
  v164 = 0u;
  v161 = 0u;
  v162 = 0u;
  uint64_t v27 = *(id *)(v1 + 48);
  v28 = [v27 countByEnumeratingWithState:&v161 objects:v186 count:16];
  if (v28)
  {
    v29 = v28;
    v30 = *(void *)v162;
    do
    {
      for (k = 0LL; k != v29; k = (char *)k + 1)
      {
        if (*(void *)v162 != v30) {
          objc_enumerationMutation(v27);
        }
        v32 = *(void **)(*((void *)&v161 + 1) + 8LL * (void)k);
        v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 32) resyncRecordsSeen]);
        v34 = (void *)objc_claimAutoreleasedReturnValue([v32 recordID]);
        v35 = (void *)objc_claimAutoreleasedReturnValue([v34 recordName]);
        [v33 addObject:v35];
      }

      v29 = [v27 countByEnumeratingWithState:&v161 objects:v186 count:16];
    }

    while (v29);
  }

  v36 = *(unsigned __int8 *)(v1 + 73);
  v37 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 40) zoneName]);
  v38 = sub_1000AA6AC(@"ckksresync", v37);
  v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);

  v40 = os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
  if (v36)
  {
    if (v40)
    {
      *(_WORD *)buf = 0;
      v41 = v39;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "In a resync, but there's More Coming. Waiting to scan for extra items.",  buf,  2u);
      v42 = 0LL;
    }

    else
    {
      v42 = 0LL;
      v41 = v39;
    }

    goto LABEL_63;
  }

  if (v40)
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "Comparing local UUIDs against the CloudKit list",  buf,  2u);
  }

  v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 32) operationDependencies]);
  v44 = (void *)objc_claimAutoreleasedReturnValue([v43 contextID]);
  v45 = *(void *)(v1 + 40);
  v160 = 0LL;
  v46 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSSQLDatabaseObject allUUIDsWithContextID:zoneID:error:]( &OBJC_CLASS___CKKSMirrorEntry,  "allUUIDsWithContextID:zoneID:error:",  v44,  v45,  &v160));
  v42 = v160;
  v47 = [v46 mutableCopy];

  v158 = 0u;
  v159 = 0u;
  v156 = 0u;
  v157 = 0u;
  v41 = (os_log_s *)v47;
  v48 = -[os_log_s countByEnumeratingWithState:objects:count:]( v41,  "countByEnumeratingWithState:objects:count:",  &v156,  v185,  16LL);
  if (v48)
  {
    v49 = v48;
    v50 = *(void *)v157;
    obj = v41;
    v142 = *(void *)v157;
    do
    {
      v51 = 0LL;
      v143 = v49;
      do
      {
        v52 = v42;
        if (*(void *)v157 != v50) {
          objc_enumerationMutation(v41);
        }
        v53 = *(os_log_s **)(*((void *)&v156 + 1) + 8LL * (void)v51);
        v54 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v141 + 32) resyncRecordsSeen]);
        v55 = [v54 containsObject:v53];

        if (!v55)
        {
          v59 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v141 + 32) operationDependencies]);
          v60 = (void *)objc_claimAutoreleasedReturnValue([v59 contextID]);
          v61 = *(void *)(v141 + 40);
          v155 = v52;
          v58 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSMirrorEntry tryFromDatabase:contextID:zoneID:error:]( &OBJC_CLASS___CKKSMirrorEntry,  "tryFromDatabase:contextID:zoneID:error:",  v53,  v60,  v61,  &v155));
          v42 = v155;

          if (v42)
          {
            v62 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v141 + 40) zoneName]);
            v63 = sub_1000AA6AC(@"ckksresync", v62);
            v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);

            if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412546;
              v174 = v53;
              v175 = 2112;
              v176 = v42;
              v65 = v64;
              v66 = "Couldn't read an item from the database, but it used to be there: %@ %@";
              v67 = 22;
              goto LABEL_51;
            }
          }

          else
          {
            v68 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v141 + 40) zoneName]);
            v69 = sub_1000AA6AC(@"ckksresync", v68);
            v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);

            v70 = os_log_type_enabled(v64, OS_LOG_TYPE_ERROR);
            if (v58)
            {
              if (v70)
              {
                *(_DWORD *)buf = 138412290;
                v174 = v53;
                _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_ERROR,  "BUG: Local item %@ not found in CloudKit, deleting",  buf,  0xCu);
              }

              v64 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(v141 + 32) operationDependencies]);
              v138 = (void *)objc_claimAutoreleasedReturnValue([v58 item]);
              v71 = (void *)objc_claimAutoreleasedReturnValue([v138 storedCKRecord]);
              v72 = (void *)objc_claimAutoreleasedReturnValue([v71 recordID]);
              v73 = (void *)objc_claimAutoreleasedReturnValue([v58 item]);
              v74 = (void *)objc_claimAutoreleasedReturnValue([v73 storedCKRecord]);
              v75 = (void *)objc_claimAutoreleasedReturnValue([v74 recordType]);
              -[os_log_s intransactionCKRecordDeleted:recordType:resync:]( v64,  "intransactionCKRecordDeleted:recordType:resync:",  v72,  v75,  *(unsigned __int8 *)(v141 + 72));

              v41 = obj;
            }

            else if (v70)
            {
              *(_DWORD *)buf = 138412290;
              v174 = v53;
              v65 = v64;
              v66 = "Couldn't read ckme(%@) from database; continuing";
              v67 = 12;
LABEL_51:
              _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, v66, buf, v67);
            }
          }

          v50 = v142;

          uint64_t v1 = v141;
          v49 = v143;
          goto LABEL_59;
        }

        v56 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v141 + 40) zoneName]);
        v57 = sub_1000AA6AC(@"ckksresync", v56);
        v58 = (void *)objc_claimAutoreleasedReturnValue(v57);

        if (os_log_type_enabled((os_log_t)v58, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v174 = v53;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v58,  OS_LOG_TYPE_DEFAULT,  "UUID %@ is still in CloudKit; carry on.",
            buf,
            0xCu);
        }

        v42 = v52;
        uint64_t v1 = v141;
LABEL_59:

        v51 = (char *)v51 + 1;
      }

      while (v49 != v51);
      v49 = -[os_log_s countByEnumeratingWithState:objects:count:]( v41,  "countByEnumeratingWithState:objects:count:",  &v156,  v185,  16LL);
    }

    while (v49);
  }

  [*(id *)(v1 + 32) setResyncRecordsSeen:0];
LABEL_63:

LABEL_64:
  v76 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 32) operationDependencies]);
  v77 = (void *)objc_claimAutoreleasedReturnValue([v76 contextID]);
  v78 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 40) zoneName]);
  v79 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSZoneStateEntry contextID:zoneName:]( &OBJC_CLASS___CKKSZoneStateEntry,  "contextID:zoneName:",  v77,  v78));

  v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v79 setLastFetchTime:v80];

  [v79 setChangeToken:*(void *)(v1 + 64)];
  [v79 setMoreRecordsInCloudKit:*(unsigned __int8 *)(v1 + 73)];
  v154 = v42;
  v134 = v79;
  [v79 saveToDatabase:&v154];
  int v4 = (os_log_s *)v154;

  if (v4)
  {
    v81 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 40) zoneName]);
    v82 = sub_1000AA6AC(@"ckksfetch", v81);
    v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(v82);

    if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v174 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_ERROR,  "Couldn't save new server change token: %@",  buf,  0xCu);
    }
  }

  if (![*(id *)(v1 + 48) count] && !objc_msgSend(*(id *)(v1 + 56), "count"))
  {
    if (*(_BYTE *)(v1 + 73)) {
      goto LABEL_108;
    }
    if (!*(_BYTE *)(v1 + 72))
    {
      v130 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 40) zoneName]);
      v131 = sub_1000AA6AC(@"ckksfetch", v130);
      v132 = (os_log_s *)objc_claimAutoreleasedReturnValue(v131);

      obja = v132;
      if (os_log_type_enabled(v132, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v132,  OS_LOG_TYPE_DEBUG,  "No record changes in this fetch",  buf,  2u);
      }

    v13 = 0;
LABEL_13:

    goto LABEL_14;
  }

  v13 = 0;
LABEL_14:

  return v13;
}

  uint64_t v11 = -[NSString copyWithZone:](self->_altDSID, "copyWithZone:", a3);
  int v12 = (void *)v5[5];
  v5[5] = v11;

  if ((*(_BYTE *)&self->_has & 4) != 0)
  {
    v5[3] = self->_triggerRequestTime;
    *((_BYTE *)v5 + 76) |= 4u;
  }

  v13 = -[NSData copyWithZone:](self->_serializedReason, "copyWithZone:", a3);
  uint64_t v14 = (void *)v5[7];
  v5[7] = v13;

  return v5;
}
  }

  return v22;
}

uint64_t sub_100004B28(void **a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)a1 != 1634431856) {
    return 0xFFFFFFFFLL;
  }
  free(a1[1]);
  free(a1);
  return 0LL;
}

uint64_t sub_100004B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)a1 != 1634431856 || !a2 && a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0xFFFFFFFFLL;
  if (a4 && (*(_DWORD *)(a1 + 24) - 4) >= 0xFFFFFFFD)
  {
    uint64_t v9 = ccsha256_di(0xFFFFFFFFLL);
    if (ccpbkdf2_hmac( v9,  a3,  a2,  *(void *)(a1 + 16),  *(void *)(a1 + 8),  *(unsigned int *)(a1 + 4),  32LL,  a4)) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100004C20(int a1, uint64_t *a2)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t result = (uint64_t)calloc(0x20uLL, 1uLL);
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  *(_DWORD *)uint64_t result = 1634431856;
  mach_port_t v6 = sub_100004734();
  if (!v6)
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_get_prederived_configuration",  ":",  384,  "",  0,  "",  "");
LABEL_16:
    sub_100004B28((void **)v5);
    return 0LL;
  }

  mach_port_t v7 = v6;
  bzero(outputStruct, 0x8000uLL);
  size_t v19 = 0x8000LL;
  uint64_t input = a1;
  if (IOConnectCallMethod(v7, 0x1Fu, &input, 1u, 0LL, 0LL, 0LL, 0LL, outputStruct, &v19) || v19 > 0x8000) {
    goto LABEL_16;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  uint64_t v9 = &outputStruct[v19];
  __int128 v22 = 0u;
  __int128 v24 = 0u;
  uint64_t v25 = 0LL;
  __int128 v21 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  unsigned int v20 = off_1002DCC88;
  __int128 v23 = (unint64_t)off_1002DCC90;
  uint64_t v26 = off_1002DCC98;
  __int128 v16 = xmmword_100204ED0;
  uint64_t v17 = 0LL;
  uint64_t v18 = &v20;
  sub_100006608( (uint64_t)outputStruct,  (uint64_t)&outputStruct[v19],  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100006458,  (uint64_t)&v16);
  uint64_t v10 = *((void *)&v23 + 1);
  uint64_t v11 = v27;
  uint64_t v12 = ccder_decode_tl(4LL, v5 + 16, v21, v9);
  if (v12)
  {
    v13 = (const void *)v12;
    uint64_t v14 = calloc(*(void *)(v5 + 16), 1uLL);
    *(void *)(v5 + 8) = v14;
    if (!v14)
    {
      int v15 = 0;
      if (!Mutable) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    memcpy(v14, v13, *(void *)(v5 + 16));
    *(_DWORD *)(v5 + 4) = sub_1000067A8(v10, (uint64_t)v9);
    *(_DWORD *)(v5 + 24) = sub_1000067A8(v11, (uint64_t)v9);
  }

  int v15 = 1;
  if (Mutable) {
LABEL_10:
  }
    CFRelease(Mutable);
LABEL_11:
  if (!v15 || !*(void *)(v5 + 16)) {
    goto LABEL_16;
  }
  *a2 = v5;
  return 1LL;
}

uint64_t sub_100004EE0(int a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  BOOL v5 = v4 || a4 == 0LL;
  else {
    uint64_t v7 = sub_100004FA8(a1, (uint64_t)v9, 32);
  }
  memset_s(v9, 0x20uLL, 0, 0x20uLL);
  return v7;
}

uint64_t sub_100004FA8(int a1, uint64_t a2, int a3)
{
  mach_port_t v6 = sub_100004734();
  if (v6)
  {
    input[0] = a1;
    input[1] = a2;
    input[2] = a3;
    return IOConnectCallMethod(v6, 0xCu, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_unlock_bag",  ":",  807,  "",  0,  "",  "");
    return 3758097084LL;
  }
}

uint64_t sub_1000050A4(const void *a1, int a2, _DWORD *a3)
{
  uint64_t v6 = 3758097084LL;
  mach_port_t v7 = sub_100004734();
  if (v7)
  {
    uint64_t v6 = 3758097090LL;
    if (a1)
    {
      if (a3)
      {
        uint64_t output = 0LL;
        uint32_t outputCnt = 1;
        uint64_t v6 = IOConnectCallMethod(v7, 6u, 0LL, 0, a1, a2, &output, &outputCnt, 0LL, 0LL);
        if (!(_DWORD)v6) {
          *a3 = output;
        }
      }
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_load_bag",  ":",  574,  "",  0,  "",  "");
  }

  return v6;
}

uint64_t sub_1000051BC(int a1)
{
  mach_port_t v2 = sub_100004734();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 4u, &input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_unload_bag",  ":",  612,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t sub_1000052A0(int a1, _OWORD *a2)
{
  uint64_t v4 = 3758097084LL;
  size_t v7 = 16LL;
  mach_port_t v5 = sub_100004734();
  if (v5)
  {
    if (a2)
    {
      __int128 outputStruct = 0uLL;
      uint64_t input = a1;
      uint64_t v4 = IOConnectCallMethod(v5, 0x17u, &input, 1u, 0LL, 0LL, 0LL, 0LL, &outputStruct, &v7);
      if (!(_DWORD)v4) {
        *a2 = outputStruct;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_bag_uuid",  ":",  729,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t sub_1000053C4(int a1, _DWORD *a2)
{
  uint64_t v4 = 3758097084LL;
  mach_port_t v5 = sub_100004734();
  if (v5)
  {
    if (a2)
    {
      uint64_t output = 0LL;
      uint64_t input = a1;
      uint32_t outputCnt = 1;
      uint64_t v4 = IOConnectCallMethod(v5, 7u, &input, 1u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
      if (!(_DWORD)v4) {
        *a2 = output;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_lock_state",  ":",  824,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t sub_1000054DC(const void *a1, int a2, int a3, int a4, void *a5, int *a6, _DWORD *a7)
{
  uint64_t v14 = 3758097084LL;
  mach_port_t v15 = sub_100004734();
  if (v15)
  {
    uint64_t v14 = 3758097090LL;
    if (a1 && a5 && a6)
    {
      input[0] = a4;
      input[1] = a3;
      uint64_t output = 0LL;
      uint32_t outputCnt = 1;
      size_t v18 = *a6;
      uint64_t v16 = IOConnectCallMethod(v15, 0xAu, input, 2u, a1, a2, &output, &outputCnt, a5, &v18);
      if ((_DWORD)v16)
      {
        return v16;
      }

      else
      {
        *a6 = v18;
        uint64_t v14 = 0LL;
        if (a7) {
          *a7 = output;
        }
      }
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_wrap_key",  ":",  848,  "",  0,  "",  "");
  }

  return v14;
}

uint64_t sub_100005644(const void *a1, int a2, int a3, int a4, void *a5, int *a6)
{
  uint64_t v12 = 3758097084LL;
  mach_port_t v13 = sub_100004734();
  if (v13)
  {
    uint64_t v12 = 3758097090LL;
    if (a1)
    {
      if (a5)
      {
        if (a6)
        {
          input[0] = a4;
          input[1] = a3;
          size_t v15 = *a6;
          uint64_t v12 = IOConnectCallMethod(v13, 0xBu, input, 2u, a1, a2, 0LL, 0LL, a5, &v15);
          if (!(_DWORD)v12) {
            *a6 = v15;
          }
        }
      }
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_unwrap_key",  ":",  877,  "",  0,  "",  "");
  }

  return v12;
}

uint64_t sub_100005788(int a1, _DWORD *a2)
{
  uint64_t v4 = 3758097084LL;
  mach_port_t v5 = sub_100004734();
  if (v5)
  {
    if (a2)
    {
      uint64_t output = 0LL;
      uint64_t input = a1;
      uint32_t outputCnt = 1;
      uint64_t v4 = IOConnectCallMethod(v5, 0xEu, &input, a1 != 0, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
      if (!(_DWORD)v4) {
        *a2 = output;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_system",  ":",  922,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t sub_1000058A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 __s = 0u;
  __int128 v16 = 0u;
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  uint64_t v8 = sub_100004914(a1, a2, v13);
  if ((_DWORD)v8)
  {
    uint64_t v9 = v8;
  }

  else
  {
    uint64_t v9 = sub_1000049F0((uint64_t)v13, a3, a4, (uint64_t)&__s);
    if (!(_DWORD)v9)
    {
      __int128 v10 = v16;
      *a5 = __s;
      a5[1] = v10;
      __int128 v11 = v18;
      a5[2] = v17;
      a5[3] = v11;
    }
  }

  memset_s(v13, 0x58uLL, 0, 0x58uLL);
  memset_s(&__s, 0x40uLL, 0, 0x40uLL);
  return sub_1000063A0(v9);
}

uint64_t sub_100005990(uint64_t a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t v10 = 3758097084LL;
  mach_port_t v11 = sub_100004734();
  if (v11)
  {
    uint64_t v10 = 3758097090LL;
    if (a2 && a4)
    {
      input[0] = a1;
      input[1] = 64LL;
      return IOConnectCallMethod(v11, 0x82u, input, 2u, a2, a3, 0LL, 0LL, a4, a5);
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_unwrap_key",  ":",  1193,  "",  0,  "",  "");
  }

  return v10;
}

uint64_t sub_100005AA8(int a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t v10 = 3758097084LL;
  mach_port_t v11 = sub_100004734();
  if (v11)
  {
    uint64_t v10 = 3758097090LL;
    if (a2 && a4)
    {
      uint64_t input = a1;
      return IOConnectCallMethod(v11, 0x81u, &input, 1u, a2, a3, 0LL, 0LL, a4, a5);
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_wrap_key",  ":",  1212,  "",  0,  "",  "");
  }

  return v10;
}

uint64_t sub_100005BC0(int a1, unsigned __int8 *a2)
{
  uint64_t v4 = 3758097084LL;
  mach_port_t v5 = sub_100004734();
  if (v5)
  {
    if (a2)
    {
      uint64_t v10 = 0LL;
      uint64_t input = a1;
      size_t v8 = 16LL;
      *(void *)src = 0LL;
      uint64_t v6 = IOConnectCallMethod(v5, 0x84u, &input, 1u, 0LL, 0LL, 0LL, 0LL, src, &v8);
      if ((_DWORD)v6)
      {
        return v6;
      }

      else if (v8 == 16)
      {
        uuid_copy(a2, src);
        return 0LL;
      }

      else
      {
        return 3758604298LL;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_get_uuid",  ":",  1253,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t sub_100005D04(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, _OWORD *a6)
{
  __int128 v17 = 0LL;
  if (a5)
  {
    int v7 = a4;
    int v9 = a2;
    *a5 = -1;
    int v11 = sub_1000058A4((uint64_t)a1, a2, a3, a4, a6);
    if (!v11)
    {
      fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s Unwrapped DER backup bag%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_open_keybag",  ":",  1302,  "",  0,  "",  "");
      uint64_t v15 = 0LL;
      goto LABEL_9;
    }

    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s Failed to unwrap backup bag as DER: 0x%08x%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_open_keybag",  ":",  1290,  "",  0,  "",  v11,  "");
    uint64_t v12 = sub_1000050A4(a1, v9, a5);
    if ((_DWORD)v12)
    {
      uint64_t v15 = v12;
      fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s Failed to load in-kernel backup bag: 0x%08x%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_open_keybag",  ":",  1292,  "",  0,  "",  v12,  "");
    }

    else
    {
      int v13 = sub_100004C20(*a5, (uint64_t *)&v17);
      int v14 = *a5;
      if (v13)
      {
        uint64_t v15 = sub_100004EE0(v14, a3, v7, v17);
        if (!(_DWORD)v15) {
          goto LABEL_9;
        }
        fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s Failed to unlock in-kernel backup bag with prederived secret: 0x%08x%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_open_keybag",  ":");
      }

      else
      {
        uint64_t v15 = sub_100004FA8(v14, a3, v7);
        if (!(_DWORD)v15) {
          goto LABEL_9;
        }
        fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s Failed to unlock in-kernel backup bag: 0x%08x%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_open_keybag",  ":");
      }
    }
  }

  else
  {
    uint64_t v15 = 3758097090LL;
  }

  if (*a5 != -1)
  {
    sub_1000051BC(*a5);
    *a5 = -1;
  }

LABEL_9:
  sub_100004B28(v17);
  return v15;
}
}

  __int128 v28 = 0LL;
  if (a5) {
    *a5 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:",  @"CKKSErrorDomain",  21LL,  @"Data failed to parse as a CKKSSerializedKey"));
  }
LABEL_11:

  return v28;
}

  *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

    goto LABEL_10;
  }

  int v11 = 0LL;
  [v3 triggerEscrowUpdate:@"octagon-sos" error:&v11];
  uint64_t v4 = (os_log_s *)v11;
  mach_port_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v5 logResultForEvent:@"OctagonEventUpgradeSilentEscrow" hardFailure:1 result:v4];

  uint64_t v6 = sub_10001267C("octagon-sos");
  int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  size_t v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v8)
    {
      *(_DWORD *)buf = 138412290;
      int v14 = v4;
      int v9 = "Unable to request silent escrow update: %@";
LABEL_8:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v9, buf, 0xCu);
      goto LABEL_9;
    }

    goto LABEL_9;
  }

  if (v8)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Requested silent escrow update", buf, 2u);
  }

  uint64_t v4 = v7;
LABEL_10:
}

  __int128 v16 = *(void *)(a1[4] + 8LL);
  __int128 v17 = *(const void **)(v16 + 24);
  if (v17)
  {
    *(void *)(v16 + 24) = 0LL;
    CFRelease(v17);
  }

  if (v4) {
    CFRelease(v4);
  }
  _Block_object_dispose(&v23, 8);
  return 1LL;
}

  return v5;
}

  if (!a2)
  {
    sub_10011FC80(a5, 0LL);
    uint64_t v15 = 0LL;
    uint64_t v12 = 0LL;
    goto LABEL_16;
  }

  uint64_t v12 = (const void *)SecAccessControlCopyData(a4);
  if (Length)
  {
    BytePtr = CFDataGetBytePtr(Length);
    Length = (const __CFData *)CFDataGetLength(Length);
  }

  else
  {
    BytePtr = 0LL;
  }

  unsigned int v20 = 0LL;
  __int128 v16 = CFDataGetBytePtr(a2);
  __int128 v17 = CFDataGetLength(a2);
  sub_100003008((uint64_t)BytePtr, (uint64_t)Length, 0LL, 0LL, (uint64_t)v16, v17, &v21, &v20);
  __int128 v18 = sub_100003C4C(a1, (uint64_t)v21, v20);
  if (!(_DWORD)v18) {
    goto LABEL_15;
  }
  sub_10011FEEC(v18, @"odel", 0LL, 0LL, (uint64_t)v12, a2, (__CFString **)a5);
  uint64_t v15 = 0LL;
LABEL_16:
  if (v21) {
    free(v21);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v15;
}

  __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v10 currentTLKPointer]);
  if (v23 || (__int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v10 currentClassAPointer])) != 0)
  {

LABEL_12:
    __int128 v24 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSProcessReceivedKeysOperation deps](self, "deps"));
    v118 = 0LL;
    uint64_t v25 = [v24 considerSelfTrusted:v12 error:&v118];
    uint64_t v26 = v118;

    if ((v25 & 1) != 0 || !v26)
    {
      if ((v25 & 1) != 0)
      {
LABEL_19:
        v33 = objc_claimAutoreleasedReturnValue([v10 tlk]);
        if (v33)
        {
          v34 = (void *)v33;
          v35 = objc_claimAutoreleasedReturnValue([v10 classA]);
          if (v35)
          {
            v36 = (void *)v35;
            v37 = (void *)objc_claimAutoreleasedReturnValue([v10 classC]);

            if (v37)
            {
              v38 = (void *)objc_claimAutoreleasedReturnValue([v10 tlk]);
              v117 = 0LL;
              v39 = [v38 loadKeyMaterialFromKeychain:&v117];
              v40 = v117;

              if ((v39 & 1) == 0)
              {
                if (v40)
                {
                  v41 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSProcessReceivedKeysOperation deps](self, "deps"));
                  v42 = (void *)objc_claimAutoreleasedReturnValue([v41 lockStateTracker]);
                  v43 = [v42 isLockedError:v40];

                  if ((v43 & 1) == 0)
                  {
                    v98 = (void *)objc_claimAutoreleasedReturnValue([v11 zoneName]);
                    v99 = sub_1000AA6AC(@"ckkskey", v98);
                    v100 = (os_log_s *)objc_claimAutoreleasedReturnValue(v99);

                    if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
                    {
                      v101 = (void *)objc_claimAutoreleasedReturnValue([v10 tlk]);
                      *(_DWORD *)buf = 138412546;
                      v124 = v101;
                      v125 = 2112;
                      v126 = v40;
                      _os_log_impl( (void *)&_mh_execute_header,  v100,  OS_LOG_TYPE_ERROR,  "Error loading TLK(%@): %@",  buf,  0x16u);
                    }

                    if (a6) {
                      *a6 = v40;
                    }
                    v71 = @"unhealthy";
                    v102 = @"unhealthy";
                    goto LABEL_70;
                  }
                }

                v44 = (void *)objc_claimAutoreleasedReturnValue([v11 zoneName]);
                v45 = sub_1000AA6AC(@"ckkskey", v44);
                v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);

                if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
                {
                  v47 = (void *)objc_claimAutoreleasedReturnValue([v10 tlk]);
                  *(_DWORD *)buf = 138412546;
                  v124 = v47;
                  v125 = 2112;
                  v126 = v40;
                  _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_ERROR,  "Soft error loading TLK(%@), maybe locked: %@",  buf,  0x16u);
                }
              }

              v48 = (void *)objc_claimAutoreleasedReturnValue([v10 classA]);
              v116 = 0LL;
              v49 = [v48 loadKeyMaterialFromKeychain:&v116];
              v50 = v116;

              if ((v49 & 1) == 0)
              {
                if (v50)
                {
                  v51 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSProcessReceivedKeysOperation deps](self, "deps"));
                  v52 = (void *)objc_claimAutoreleasedReturnValue([v51 lockStateTracker]);
                  v53 = [v52 isLockedError:v50];

                  if ((v53 & 1) == 0)
                  {
                    v103 = (void *)objc_claimAutoreleasedReturnValue([v11 zoneName]);
                    v104 = sub_1000AA6AC(@"ckkskey", v103);
                    v105 = (os_log_s *)objc_claimAutoreleasedReturnValue(v104);

                    if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
                    {
                      v106 = (void *)objc_claimAutoreleasedReturnValue([v10 classA]);
                      *(_DWORD *)buf = 138412546;
                      v124 = v106;
                      v125 = 2112;
                      v126 = v50;
                      _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_ERROR,  "Error loading classA key(%@): %@",  buf,  0x16u);
                    }

                    if (a6) {
                      *a6 = v50;
                    }
                    v71 = @"unhealthy";
                    v107 = @"unhealthy";
                    goto LABEL_69;
                  }
                }

                v54 = (void *)objc_claimAutoreleasedReturnValue([v11 zoneName]);
                v55 = sub_1000AA6AC(@"ckkskey", v54);
                v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);

                if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
                {
                  v57 = (void *)objc_claimAutoreleasedReturnValue([v10 classA]);
                  *(_DWORD *)buf = 138412546;
                  v124 = v57;
                  v125 = 2112;
                  v126 = v50;
                  _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_ERROR,  "Soft error loading classA key(%@), maybe locked: %@",  buf,  0x16u);
                }
              }

              v58 = (void *)objc_claimAutoreleasedReturnValue([v10 classC]);
              v115 = 0LL;
              v59 = [v58 loadKeyMaterialFromKeychain:&v115];
              v60 = v115;

              if ((v59 & 1) == 0)
              {
                v87 = (void *)objc_claimAutoreleasedReturnValue([v11 zoneName]);
                v88 = sub_1000AA6AC(@"ckkskey", v87);
                v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);

                if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
                {
                  v90 = (void *)objc_claimAutoreleasedReturnValue([v10 classC]);
                  *(_DWORD *)buf = 138412546;
                  v124 = v90;
                  v125 = 2112;
                  v126 = v60;
                  _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_ERROR,  "Error loading classC(%@): %@",  buf,  0x16u);
                }

                if (a6) {
                  *a6 = v60;
                }
                v71 = @"unhealthy";
                v91 = @"unhealthy";
                goto LABEL_68;
              }

              v112 = v60;
              v113 = v50;
              v114 = v40;
              v61 = (void *)objc_claimAutoreleasedReturnValue([v10 classA]);
              v62 = (void *)objc_claimAutoreleasedReturnValue([v61 parentKeyUUID]);
              v63 = (void *)objc_claimAutoreleasedReturnValue([v10 tlk]);
              v64 = (void *)objc_claimAutoreleasedReturnValue([v63 uuid]);
              v65 = [v62 isEqualToString:v64];

              if ((v65 & 1) != 0)
              {
                v66 = (void *)objc_claimAutoreleasedReturnValue([v10 classC]);
                v67 = (void *)objc_claimAutoreleasedReturnValue([v66 parentKeyUUID]);
                v68 = (void *)objc_claimAutoreleasedReturnValue([v10 tlk]);
                v69 = (void *)objc_claimAutoreleasedReturnValue([v68 uuid]);
                v70 = [v67 isEqualToString:v69];

                if ((v70 & 1) != 0)
                {
                  v71 = @"ready";
                  v72 = @"ready";
                  v50 = v113;
                  v40 = v114;
                  v60 = v112;
LABEL_68:

LABEL_69:
LABEL_70:

                  goto LABEL_56;
                }

                v119 = NSLocalizedDescriptionKey;
                v120 = @"Current class C key does not wrap to current TLK";
                v108 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v120,  &v119,  1LL));
                v93 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"CKKSServerExtensionErrorDomain",  9LL,  v108));

                v109 = (void *)objc_claimAutoreleasedReturnValue([v11 zoneName]);
                v110 = sub_1000AA6AC(@"ckkskey", v109);
                v111 = (os_log_s *)objc_claimAutoreleasedReturnValue(v110);

                v60 = v112;
                if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  v124 = v93;
                  _os_log_impl( (void *)&_mh_execute_header,  v111,  OS_LOG_TYPE_ERROR,  "Key hierarchy unhealthy: %@",  buf,  0xCu);
                }

                v50 = v113;
                v40 = v114;
                if (!a6)
                {
LABEL_67:
                  v71 = @"unhealthy";
                  v97 = @"unhealthy";

                  goto LABEL_68;
                }
              }

              else
              {
                v121 = NSLocalizedDescriptionKey;
                v122 = @"Current class A key does not wrap to current TLK";
                v92 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v122,  &v121,  1LL));
                v93 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"CKKSServerExtensionErrorDomain",  9LL,  v92));

                v94 = (void *)objc_claimAutoreleasedReturnValue([v11 zoneName]);
                v95 = sub_1000AA6AC(@"ckkskey", v94);
                v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);

                if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  v124 = v93;
                  _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_ERROR,  "Key hierarchy unhealthy: %@",  buf,  0xCu);
                }

                v50 = v113;
                v40 = v114;
                v60 = v112;
                if (!a6) {
                  goto LABEL_67;
                }
              }

              *a6 = v93;
              goto LABEL_67;
            }
          }

          else
          {
          }
        }

        v81 = (void *)objc_claimAutoreleasedReturnValue([v11 zoneName]);
        v82 = sub_1000AA6AC(@"ckkskey", v81);
        v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(v82);

        if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v124 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_ERROR,  "Error examining existing key hierarchy (missing at least one key): %@",  buf,  0xCu);
        }

        if (a6) {
          *a6 = (id)objc_claimAutoreleasedReturnValue([v10 error]);
        }
        v71 = @"unhealthy";
LABEL_55:
        v85 = v71;
LABEL_56:

        goto LABEL_57;
      }
    }

    else
    {
      __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSProcessReceivedKeysOperation deps](self, "deps"));
      __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([v27 lockStateTracker]);
      v29 = [v28 isLockedError:v26];

      if (v29)
      {
        v30 = (void *)objc_claimAutoreleasedReturnValue([v11 zoneName]);
        v31 = sub_1000AA6AC(@"ckkskey", v30);
        v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);

        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v124 = v26;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Trust system reports device locked: %@",  buf,  0xCu);
        }

        uint64_t v26 = 0LL;
        goto LABEL_19;
      }
    }

    v73 = (void *)objc_claimAutoreleasedReturnValue([v11 zoneName]);
    v74 = sub_1000AA6AC(@"ckkskey", v73);
    v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);

    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v124 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEFAULT,  "Not proceeding due to trust system failure: %@",  buf,  0xCu);
    }

    if (a6)
    {
      if (v26)
      {
        *a6 = v26;
      }

      else
      {
        v84 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:]( &OBJC_CLASS___NSError, "errorWithDomain:code:description:", @"CKKSErrorDomain", 52LL, @"No trust states available"));
        *a6 = v84;
      }
    }

    v71 = @"waitfortrust";
    goto LABEL_55;
  }

  v76 = (void *)objc_claimAutoreleasedReturnValue([v10 currentClassCPointer]);

  if (v76) {
    goto LABEL_12;
  }
  v77 = (void *)objc_claimAutoreleasedReturnValue([v11 zoneName]);
  v78 = sub_1000AA6AC(@"ckkskey", v77);
  v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);

  if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    v124 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_ERROR,  "No existing key hierarchy (missing all CKPs): %@",  buf,  0xCu);
  }

  v71 = @"waitfortlkcreation";
  v80 = @"waitfortlkcreation";
LABEL_57:

  return v71;
}

  __int128 v24 = 0LL;
  if (a4) {
    *a4 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:",  @"CKKSErrorDomain",  21LL,  @"Data failed to parse as a CKKSSerializedKey"));
  }
LABEL_11:

  return v24;
}

  return v7;
}

  if (v12) {
    -[OTCuttlefishAccountStateHolder asyncNotifyAccountStateChanges:from:]( self,  "asyncNotifyAccountStateChanges:from:",  v12,  v8);
  }

  return v12 != 0LL;
}

  if (MutableForSOSPeerInfosByID) {
    CFRelease(MutableForSOSPeerInfosByID);
  }

LABEL_12:
}

    goto LABEL_35;
  }

  Count = CFSetGetCount(a4);
  __int128 v16 = sub_10001267C("updates");
  __int128 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  __int128 v18 = v17;
  if (Count)
  {
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Requesting Ensure Peer Registration.",  buf,  2u);
    }

    global_queue = dispatch_get_global_queue(-2LL, 0LL);
    __int128 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(global_queue);
    SOSCloudKeychainRequestEnsurePeerRegistration(v18, 0LL);
  }

  else if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "Not requesting Ensure Peer Registration, since it's not needed",  buf,  2u);
  }

  if (CFSetContainsValue(a4, v14))
  {
    __int128 v23 = (__CFSet *)SOSCircleCopyPeers(a3, kCFAllocatorDefault);
    CFSetRemoveValue(v23, v14);
    if (CFSetGetCount(v23)) {
      sub_1001C3AE0(v23);
    }
    if (v23) {
      CFRelease(v23);
    }
  }

  if (CFSetGetCount(a4) || CFSetGetCount(a5) || CFSetGetCount(a6) || CFSetGetCount(a7))
  {
    if (CFSetGetCount(a5))
    {
      cf = 0LL;
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472LL;
      v34[2] = sub_1001C3BC0;
      v34[3] = &unk_100293EA8;
      v34[4] = Mutable;
      CFSetApplyFunction(a5, (CFSetApplierFunction)sub_1001C3BC8, v34);
      uint64_t v25 = v12;
      v36[0] = 0LL;
      v36[1] = v36;
      v36[2] = 0x2020000000LL;
      v37 = 1;
      PeerInfo = SOSFullPeerInfoGetPeerInfo(-[SOSAccount fullPeerInfo](v25, "fullPeerInfo"));
      PermittedViews = (const __CFSet *)SOSPeerInfoGetPermittedViews(PeerInfo);
      *(void *)buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = sub_100195DD8;
      v39 = &unk_100291D80;
      v42 = PeerInfo;
      __int128 v28 = v25;
      v40 = v28;
      v41 = v36;
      v43 = Mutable;
      p_cf = &cf;
      CFSetApplyFunction(PermittedViews, (CFSetApplierFunction)sub_100195344, buf);

      _Block_object_dispose(v36, 8);
      if (cf)
      {
        v29 = sub_10001267C("SecError");
        v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          *(void *)&buf[4] = Mutable;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = cf;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Had trouble removing: %@, error: %@",  buf,  0x16u);
        }

        v31 = cf;
        if (cf)
        {
          cf = 0LL;
          CFRelease(v31);
        }
      }

      if (Mutable) {
        CFRelease(Mutable);
      }
    }

    v32 = sub_10001267C("circleOps");
    v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "peer counts changed, posting kSOSCCCircleChangedNotification",  buf,  2u);
    }

    -[SOSAccount setNotifyCircleChangeOnExit:](v12, "setNotifyCircleChangeOnExit:", 1LL);
  }

  int v11 = (const void *)sub_100196A28(v5, Mutable, (uint64_t)v6);
  if (!v11) {
    goto LABEL_17;
  }
  [v29 setAccountKeyDerivationParameters:Mutable];
  sub_10019A160(v29, (uint64_t)v5, (uint64_t)v11, v7);
  cf = 0LL;
  if ((sub_100197744(v29, (uint64_t)&cf) & 1) == 0)
  {
    uint64_t v12 = sub_10001267C("SecError");
    int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&buf[4] = cf;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Failed to publish new cloud parameters: %@",  buf,  0xCu);
    }
  }

  int v14 = cf;
  if (cf)
  {
    cf = 0LL;
    CFRelease(v14);
  }

uint64_t sub_100005F30(int a1, unsigned int a2, uint64_t a3)
{
  input[0] = a2;
  input[1] = a3;
  uint64_t input[2] = a1;
  mach_port_t v3 = sub_100004734();
  if (v3) {
    return IOConnectCallMethod(v3, 0x1Au, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_assert_hold",  ":",  1654,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_100006010(int a1, unsigned int a2)
{
  input[0] = a2;
  input[1] = a1;
  mach_port_t v2 = sub_100004734();
  if (v2) {
    return IOConnectCallMethod(v2, 0x1Bu, input, 2u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_assert_drop",  ":",  1672,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1000060EC(int a1, unsigned int a2, _DWORD *a3)
{
  mach_port_t v6 = sub_100004734();
  if (v6)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t output = 0LL;
    uint32_t outputCnt = 1;
    uint64_t result = IOConnectCallMethod(v6, 0x28u, input, 2u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
    if (a3)
    {
      if (!(_DWORD)result) {
        *a3 = output;
      }
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_generation",  ":",  1781,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t sub_100006200(int a1, uint64_t a2)
{
  return sub_10000620C(a1, 0x11u, a2);
}

uint64_t sub_10000620C(int a1, uint32_t a2, uint64_t a3)
{
  uint64_t input = a1;
  *(void *)uint64_t v12 = 4096LL;
  uint64_t v5 = 3758097084LL;
  int v18 = 0;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 __s = 0u;
  mach_port_t v6 = sub_100004734();
  if (v6)
  {
    if (a3)
    {
      mach_port_t v7 = v6;
      bzero(outputStruct, 0x1000uLL);
      uint64_t v8 = IOConnectCallMethod(v7, a2, &input, 1u, 0LL, 0LL, 0LL, 0LL, outputStruct, (size_t *)v12);
      if ((_DWORD)v8)
      {
        return v8;
      }

      else
      {
        uint64_t v5 = 0LL;
        if (!sub_100007358((uint64_t)outputStruct, v12[0], (char *)&__s))
        {
          __int128 v9 = v16;
          *(_OWORD *)(a3 + 32) = v15;
          *(_OWORD *)(a3 + 48) = v9;
          *(_WORD *)(a3 + 64) = v17;
          __int128 v10 = v14;
          *(_OWORD *)a3 = __s;
          *(_OWORD *)(a3 + 16) = v10;
        }
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_get_device_state",  ":",  2224,  "",  0,  "",  "");
  }

  return v5;
}

uint64_t sub_1000063A0(uint64_t result)
{
  return result;
}

uint64_t sub_1000063BC(uint64_t result, int a2, const char *a3)
{
  if ((result & 1) == 0)
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s failed REQUIRE condition (%s:%d)\n%s\n",  "aks",  "",  "",  "",  "REQUIRE_func",  ":",  1047,  "",  0,  "",  a3,  a2,  "");
    abort();
  }

  return result;
}

unint64_t sub_10000642C()
{
  return (unint64_t)(cczp_bitlen() + 7) >> 3;
}

uint64_t sub_10000644C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return cccbc_update(a1, a2, a3, a4 >> 4);
}

uint64_t sub_100006458(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a5 + 8) >= *(void *)a5)
  {
    char v14 = 0;
  }

  else
  {
    uint64_t v9 = 0LL;
    unint64_t v10 = 0LL;
    uint64_t v11 = (uint64_t)a1 + a2;
    while (1)
    {
      BOOL v12 = sub_10000653C( *(const void **)(*(void *)(a5 + 24) + v9),  *(void *)(*(void *)(a5 + 24) + v9)
            + *(unsigned __int8 *)(*(void *)(*(void *)(a5 + 24) + v9) + 1LL)
            + 2LL,
              a1,
              v11);
      if (v12) {
        break;
      }
      ++v10;
      v9 += 40LL;
      if (v10 >= *(void *)a5) {
        goto LABEL_10;
      }
    }

    __int128 v15 = (void *)(*(void *)(a5 + 24) + v9);
    if (v15[1])
    {
      char v13 = 0;
      *(_BYTE *)(a5 + 16) = 1;
    }

    else
    {
      ++*(void *)(a5 + 8);
      v15[1] = a3;
      v15[2] = a3 + a4;
      v15[3] = a3;
      v15[4] = a3 + a4;
      char v13 = 1;
    }

LABEL_10:
    char v14 = v13 | !v12;
  }

  return v14 & 1;
}

  if (v18) {
    sub_100003848((uint64_t *)&v18);
  }
  if ((v2 & 0x80000000) == 0) {
    close(v2);
  }
}

    char v13 = *v10++;
    uint64_t v9 = v13;
    if (!v13) {
      goto LABEL_11;
    }
  }

  if (!v24 || cf)
  {
LABEL_11:
    char v14 = sub_10001267C("SecError");
    __int128 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138413058;
      __int128 v16 = v22;
      v29 = v22;
      v30 = 2112;
      v31 = v23;
      v32 = 2112;
      v33 = v24;
      v34 = 2112;
      v35 = cf;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "ckkscurrent: No current item for (%@,%@): %@ %@",  buf,  0x2Au);
      goto LABEL_17;
    }

    goto LABEL_16;
  }

  BOOL v12 = -[NSData copyWithZone:](self->_syncingPolicy, "copyWithZone:", a3);
  char v13 = (void *)v5[10];
  v5[10] = v12;

  char v14 = -[NSData copyWithZone:](self->_voucher, "copyWithZone:", a3);
  __int128 v15 = (void *)v5[13];
  v5[13] = v14;

  __int128 v16 = -[NSData copyWithZone:](self->_voucherSignature, "copyWithZone:", a3);
  __int128 v17 = (void *)v5[14];
  v5[14] = v16;

  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  int v18 = self->_tlkSharesForVouchedIdentitys;
  size_t v19 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v18,  "countByEnumeratingWithState:objects:count:",  &v30,  v34,  16LL);
  if (v19)
  {
    unsigned int v20 = v19;
    __int128 v21 = *(void *)v31;
    do
    {
      for (i = 0LL; i != v20; i = (char *)i + 1)
      {
        if (*(void *)v31 != v21) {
          objc_enumerationMutation(v18);
        }
        __int128 v23 = objc_msgSend(*(id *)(*((void *)&v30 + 1) + 8 * (void)i), "copyWithZone:", a3, (void)v30);
        [v5 addTlkSharesForVouchedIdentity:v23];
      }

      unsigned int v20 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v18,  "countByEnumeratingWithState:objects:count:",  &v30,  v34,  16LL);
    }

    while (v20);
  }

  __int128 v24 = -[NSData copyWithZone:](self->_secureElementIdentity, "copyWithZone:", a3);
  uint64_t v25 = (void *)v5[8];
  v5[8] = v24;

  uint64_t v26 = (__int16)self->_has;
  if ((v26 & 0x80) != 0)
  {
    *((_BYTE *)v5 + 120) = self->_isInheritedAccount;
    *((_WORD *)v5 + 62) |= 0x80u;
    uint64_t v26 = (__int16)self->_has;
    if ((v26 & 0x100) == 0)
    {
LABEL_19:
      if ((v26 & 0x200) == 0) {
        goto LABEL_20;
      }
LABEL_29:
      *((_BYTE *)v5 + 122) = self->_warnedTooManyPeers;
      *((_WORD *)v5 + 62) |= 0x200u;
      if ((*(_WORD *)&self->_has & 0x20) == 0) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
  }

  else if ((*(_WORD *)&self->_has & 0x100) == 0)
  {
    goto LABEL_19;
  }

  *((_BYTE *)v5 + 121) = self->_warmedEscrowCache;
  *((_WORD *)v5 + 62) |= 0x100u;
  uint64_t v26 = (__int16)self->_has;
  if ((v26 & 0x200) != 0) {
    goto LABEL_29;
  }
LABEL_20:
  if ((v26 & 0x20) != 0)
  {
LABEL_21:
    *((_DWORD *)v5 + 18) = self->_sendingMetricsPermitted;
    *((_WORD *)v5 + 62) |= 0x20u;
  }
}

  *(void *)buf = 0LL;
  v35 = buf;
  v36 = 0x2020000000LL;
  v37 = 0;
  v30 = 0LL;
  v31 = &v30;
  v32 = 0x2020000000LL;
  v33 = 0;
  uint64_t v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext queue](self, "queue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000C33B0;
  block[3] = &unk_1002914F8;
  block[4] = self;
  block[5] = &v30;
  block[6] = buf;
  dispatch_sync(v11, block);

  if (!*((_BYTE *)v31 + 24) || (BOOL v12 = v35[24]) == 0)
  {
    char v13 = sub_10001267C("octagon-ck");
    char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext contextID](self, "contextID"));
      *(_DWORD *)v38 = 138412290;
      v39 = (uint64_t)v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "No CK account present(%@). Attempting to refetch CK account status...",  v38,  0xCu);
    }

    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext accountStateTracker](self, "accountStateTracker"));
    __int128 v17 = [v16 notifyCKAccountStatusChangeAndWait:v6];

    if ((v17 & 1) == 0)
    {
      int v18 = sub_10001267C("octagon-ck");
      size_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v38 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Fetching new CK account status did not complete in time",  v38,  2u);
      }
    }

    unsigned int v20 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext queue](self, "queue"));
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    v28[2] = sub_1000C344C;
    v28[3] = &unk_1002914F8;
    v28[4] = self;
    v28[5] = &v30;
    v28[6] = buf;
    dispatch_sync(v20, v28);

    __int128 v21 = sub_10001267C("octagon-ck");
    __int128 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v23 = objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext contextID](self, "contextID"));
      __int128 v24 = (void *)v23;
      if (v35[24]) {
        uint64_t v25 = @"present";
      }
      else {
        uint64_t v25 = @"missing";
      }
      *(_DWORD *)v38 = 138412546;
      v39 = v23;
      v40 = 2112;
      v41 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "After refetch, CK account status(%@) is %@",  v38,  0x16u);
    }

    if (!*((_BYTE *)v31 + 24))
    {
      uint64_t v26 = 0LL;
      goto LABEL_29;
    }

    BOOL v12 = v35[24];
  }

  if (v12) {
    uint64_t v26 = 1LL;
  }
  else {
    uint64_t v26 = 3LL;
  }
LABEL_29:
  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(buf, 8);

  return v26;
}

  if (cfa)
  {
    mach_port_t v7 = sub_10001267C("engine-sync");
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      BOOL v12 = v2;
      char v13 = 2112;
      char v14 = cfa;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Failed to process sync for %@: %@",  buf,  0x16u);
    }
  }

  if (v6) {
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 56), v2);
  }
  uint64_t v9 = cfa;
  if (cfa)
  {
    cfa = 0LL;
    CFRelease(v9);
  }

  if (v5) {
    CFRelease(v5);
  }
}

    __int128 v15 = (void *)*i;
    unint64_t v10 = v15;
    if (!v15) {
      return Mutable;
    }
  }

  sub_1000194E0(-26275, a4, @"attribute %@ has NULL value", *v10);
  __int128 v16 = (os_log_s *)sub_10001267C("SecError");
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    if (a4) {
      int v18 = *a4;
    }
    else {
      int v18 = @"error == NULL";
    }
    *(_DWORD *)buf = 138412290;
    __int128 v21 = v18;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  __int128 v15 = *(void *)(v4 + 16);
  __int128 v16 = *(_BYTE **)(v15 + 16);
  if (v16)
  {
    __int128 v17 = (void *)(v15 + 24);
    do
    {
      if ((*(unsigned int (**)(uint64_t, _BYTE *))(v7 + 16))(v7, v16))
      {
        uint64_t result = (const __CFString *)sub_1000E9AF8((CFMutableDictionaryRef *)v4, v16, v6);
        if (!result) {
          goto LABEL_19;
        }
        size_t v19 = result;
        unint64_t v10 = (v10 + 1);
        LODWORD(v12) = v12 & sub_1000182E4(a2, v10, result, (CFTypeRef *)v6);
        CFRelease(v19);
        if ((_DWORD)v12 != 1) {
          goto LABEL_18;
        }
      }

      unsigned int v20 = (_BYTE *)*v17++;
      __int128 v16 = v20;
    }

    while (v20);
  }

  if ((v12 & 1) == 0)
  {
LABEL_18:
    uint64_t result = 0LL;
    goto LABEL_19;
  }

  uint64_t result = (const __CFString *)sub_100015CD8(*(void *)(a1 + 72), a2, *(CFTypeRef **)(a1 + 64), 0LL);
LABEL_19:
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

  return v4;
}

    CFRelease(v6);
    return a2;
  }

  _Block_object_dispose(&v15, 8);
  return 0LL;
}

BOOL sub_10000653C(const void *a1, uint64_t a2, const void *a3, uint64_t a4)
{
  size_t v7 = sub_1000065A4((uint64_t)a1, a2);
  return v7 == sub_1000065A4((uint64_t)a3, a4) && memcmp(a1, a3, v7) == 0;
}

uint64_t sub_1000065A4(uint64_t a1, uint64_t a2)
{
  v6[0] = a1;
  v6[1] = a2;
  uint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  else {
    return 0LL;
  }
}

uint64_t sub_100006608( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  v11[0] = a1;
  v11[1] = a2;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = ccder_blob_decode_range(v11, 0x2000000000000011LL, v11);
  if ((_DWORD)result)
  {
    if (ccder_blob_decode_sequence_tl(v11, &v9))
    {
      while (1)
      {
        uint64_t v7 = v9;
        uint64_t result = ccder_blob_decode_tl(&v9, 12LL, &v8);
        if (!(_DWORD)result) {
          break;
        }
        if (v9 - v7 != 2) {
          return 0LL;
        }
        uint64_t result = a3(v7, v10 - v7, v9 + v8, v10 - (v9 + v8), a4);
        if (!(_DWORD)result) {
          return result;
        }
        v11[0] = v10;
        if ((ccder_blob_decode_sequence_tl(v11, &v9) & 1) == 0) {
          return 1LL;
        }
      }
    }

    else
    {
      return 1LL;
    }
  }

  return result;
}

uint64_t sub_1000066DC(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v10 = a1;
  uint64_t v11 = 0LL;
  if (a1)
  {
    sub_100006608( a4,  a5,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100006748,  (uint64_t)&v10);
    if (a2)
    {
      if (a3)
      {
        uint64_t v7 = v11;
        uint64_t v8 = v12;
        *a2 = v11;
        *a3 = v8 - v7;
      }
    }
  }

  return v13;
}

BOOL sub_100006748(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v8 = sub_10000653C( *(const void **)a5,  *(void *)a5 + *(unsigned __int8 *)(*(void *)a5 + 1LL) + 2LL,  a1,  (uint64_t)a1 + a2);
  if (v8)
  {
    *(_BYTE *)(a5 + 24) = 1;
    *(void *)(a5 + 8) = a3;
    *(void *)(a5 + 16) = a3 + a4;
  }

  return !v8;
}

uint64_t sub_1000067A8(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0LL;
  v6[0] = a1;
  v6[1] = a2;
  uint64_t v2 = v7;
  mach_port_t v3 = (unsigned __int8 *)v6[0];
  uint64_t result = (uint64_t)*(char *)v6[0] >> 7;
  do
  {
    unsigned int v5 = *v3++;
    uint64_t result = v5 | (unint64_t)(result << 8);
    --v2;
  }

  while (v2);
  return result;
}

double sub_100006810(__int128 *a1, uint64_t a2, _DWORD *a3, void *a4)
{
  __int128 v11 = *a1;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  if (ccder_blob_decode_range(&v11, a2, &v9))
  {
    int v8 = v9;
    *a4 = v9;
    *a3 = v10 - v8;
    double result = *(double *)&v11;
    *a1 = v11;
  }

  return result;
}

uint64_t sub_10000687C(void **a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    uint64_t v2 = *a1;
    if (!*a1) {
      break;
    }
    mach_port_t v3 = (void *)*((void *)v2 + 1);
    *a1 = *(void **)v2;
    if (v3)
    {
      memset_s(v3, *((void *)v2 + 2), 0, *((void *)v2 + 2));
      free(*((void **)v2 + 1));
    }

    memset_s(v2, 0x18uLL, 0, 0x18uLL);
    free(v2);
  }

  return 0LL;
}

uint64_t sub_1000068F4(void *a1, unsigned __int8 *a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = (void **)a1;
  uint64_t result = (uint64_t)sub_100006988(a1, a2);
  if (result)
  {
    uint64_t v4 = result;
    for (i = *v2; i != (void *)result; i = (void *)*i)
      uint64_t v2 = (void **)i;
    void *v2 = *(void **)result;
    mach_port_t v6 = *(void **)(result + 8);
    if (v6)
    {
      memset_s(v6, *(void *)(v4 + 16), 0, *(void *)(v4 + 16));
      free(*(void **)(v4 + 8));
    }

    memset_s((void *)v4, 0x18uLL, 0, 0x18uLL);
    free((void *)v4);
    return 0LL;
  }

  return result;
}

void *sub_100006988(void *a1, unsigned __int8 *a2)
{
  if (!a1) {
    return 0LL;
  }
  mach_port_t v6 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    do
    {
      uint64_t v4 = v2[1] + v2[2];
      mach_port_t v6 = (const void *)v2[1];
      uint64_t v7 = v4;
      uint64_t v2 = (void *)*v2;
    }

    while (v2);
  }

  return v2;
}

uint64_t sub_100006A08(__int128 *a1, uint64_t a2, void *a3, int a4)
{
  __int128 v11 = *a1;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  if ((ccder_blob_decode_range(&v11, a2, &v9) & 1) == 0) {
    return 0LL;
  }
  __int128 v8 = v11;
  if (a3)
  {
    if ((_DWORD)v10 - (_DWORD)v9 == a4)
    {
      memcpy(a3, v9, (v10 - (_DWORD)v9));
      goto LABEL_5;
    }

    return 0LL;
  }

LABEL_5:
  *a1 = v8;
  return 1LL;
}

  uint64_t v10 = *((unsigned __int8 *)v27 + 24);
  _Block_object_dispose(&v26, 8);
  return v10;
}

  uint64_t v12 = sub_10001267C("octagon");
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    char v14 = OTCliqueStatusToString(a2);
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    __int128 v21 = 138412546;
    __int128 v22 = v15;
    __int128 v23 = 1024;
    __int128 v24 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "clique status: %@, posted cfu: %d",  (uint8_t *)&v21,  0x12u);
  }

  networkTaskDescription = self->_networkTaskDescription;
  if (networkTaskDescription) {
    [v3 setObject:networkTaskDescription forKey:@"network_task_description"];
  }
  networkHostname = self->_networkHostname;
  if (networkHostname) {
    [v3 setObject:networkHostname forKey:@"network_hostname"];
  }
  networkRemoteAddresssAndPort = self->_networkRemoteAddresssAndPort;
  if (networkRemoteAddresssAndPort) {
    [v3 setObject:networkRemoteAddresssAndPort forKey:@"network_remote_addresss_and_port"];
  }
  networkConnectionUuid = self->_networkConnectionUuid;
  if (networkConnectionUuid) {
    [v3 setObject:networkConnectionUuid forKey:@"network_connection_uuid"];
  }
  if ((*((_BYTE *)&self->_has + 2) & 0x80) != 0)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  self->_networkConnectionReused));
    [v3 setObject:v10 forKey:@"network_connection_reused"];
  }

  networkInterfaceIdentifier = self->_networkInterfaceIdentifier;
  if (networkInterfaceIdentifier) {
    [v3 setObject:networkInterfaceIdentifier forKey:@"network_interface_identifier"];
  }
  networkProtocolName = self->_networkProtocolName;
  if (networkProtocolName) {
    [v3 setObject:networkProtocolName forKey:@"network_protocol_name"];
  }
  uint64_t v13 = self->_has;
  if ((*(_DWORD *)&v13 & 0x80000) != 0)
  {
    v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_networkRequestHeaderSize));
    [v3 setObject:v33 forKey:@"network_request_header_size"];

    uint64_t v13 = self->_has;
    if ((*(_BYTE *)&v13 & 1) == 0)
    {
LABEL_21:
      if ((*(_DWORD *)&v13 & 0x100000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_67;
    }
  }

  else if ((*(_BYTE *)&v13 & 1) == 0)
  {
    goto LABEL_21;
  }

  v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_networkRequestBodyBytesSent));
  [v3 setObject:v34 forKey:@"network_request_body_bytes_sent"];

  uint64_t v13 = self->_has;
  if ((*(_DWORD *)&v13 & 0x100000) == 0)
  {
LABEL_22:
    if ((*(_BYTE *)&v13 & 2) == 0) {
      goto LABEL_23;
    }
    goto LABEL_68;
  }

  uint64_t v10 = v4;
  if (self->_networkTaskDescription)
  {
    objc_msgSend(v4, "setNetworkTaskDescription:");
    uint64_t v4 = v10;
  }

  if (self->_networkHostname)
  {
    objc_msgSend(v10, "setNetworkHostname:");
    uint64_t v4 = v10;
  }

  if (self->_networkRemoteAddresssAndPort)
  {
    objc_msgSend(v10, "setNetworkRemoteAddresssAndPort:");
    uint64_t v4 = v10;
  }

  if (self->_networkConnectionUuid)
  {
    objc_msgSend(v10, "setNetworkConnectionUuid:");
    uint64_t v4 = v10;
  }

  if ((*((_BYTE *)&self->_has + 2) & 0x80) != 0)
  {
    *((_BYTE *)v4 + 272) = self->_networkConnectionReused;
    *((_DWORD *)v4 + 70) |= 0x800000u;
  }

  if (self->_networkInterfaceIdentifier)
  {
    objc_msgSend(v10, "setNetworkInterfaceIdentifier:");
    uint64_t v4 = v10;
  }

  if (self->_networkProtocolName)
  {
    objc_msgSend(v10, "setNetworkProtocolName:");
    uint64_t v4 = v10;
  }

  mach_port_t v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x80000) != 0)
  {
    *((_DWORD *)v4 + 52) = self->_networkRequestHeaderSize;
    *((_DWORD *)v4 + 70) |= 0x80000u;
    mach_port_t v6 = self->_has;
    if ((*(_BYTE *)&v6 & 1) == 0)
    {
LABEL_21:
      if ((*(_DWORD *)&v6 & 0x100000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_67;
    }
  }

  else if ((*(_BYTE *)&v6 & 1) == 0)
  {
    goto LABEL_21;
  }

  v4[1] = self->_networkRequestBodyBytesSent;
  *((_DWORD *)v4 + 70) |= 1u;
  mach_port_t v6 = self->_has;
  if ((*(_DWORD *)&v6 & 0x100000) == 0)
  {
LABEL_22:
    if ((*(_BYTE *)&v6 & 2) == 0) {
      goto LABEL_23;
    }
    goto LABEL_68;
  }

  __int128 v8 = -[NSString copyWithZone:](self->_networkTaskDescription, "copyWithZone:", a3);
  uint64_t v9 = (void *)v6[29];
  v6[29] = v8;

  uint64_t v10 = -[NSString copyWithZone:](self->_networkHostname, "copyWithZone:", a3);
  __int128 v11 = (void *)v6[21];
  v6[21] = v10;

  uint64_t v12 = -[NSString copyWithZone:](self->_networkRemoteAddresssAndPort, "copyWithZone:", a3);
  uint64_t v13 = (void *)v6[25];
  v6[25] = v12;

  char v14 = -[NSString copyWithZone:](self->_networkConnectionUuid, "copyWithZone:", a3);
  __int128 v15 = (void *)v6[19];
  v6[19] = v14;

  if ((*((_BYTE *)&self->_has + 2) & 0x80) != 0)
  {
    *((_BYTE *)v6 + 272) = self->_networkConnectionReused;
    *((_DWORD *)v6 + 70) |= 0x800000u;
  }

  __int128 v16 = -[NSString copyWithZone:](self->_networkInterfaceIdentifier, "copyWithZone:", a3);
  __int128 v17 = (void *)v6[22];
  v6[22] = v16;

  int v18 = -[NSString copyWithZone:](self->_networkProtocolName, "copyWithZone:", a3);
  size_t v19 = (void *)v6[24];
  v6[24] = v18;

  unsigned int v20 = self->_has;
  if ((*(_DWORD *)&v20 & 0x80000) != 0)
  {
    *((_DWORD *)v6 + 52) = self->_networkRequestHeaderSize;
    *((_DWORD *)v6 + 70) |= 0x80000u;
    unsigned int v20 = self->_has;
    if ((*(_BYTE *)&v20 & 1) == 0)
    {
LABEL_9:
      if ((*(_DWORD *)&v20 & 0x100000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_45;
    }
  }

  else if ((*(_BYTE *)&v20 & 1) == 0)
  {
    goto LABEL_9;
  }

  v6[1] = self->_networkRequestBodyBytesSent;
  *((_DWORD *)v6 + 70) |= 1u;
  unsigned int v20 = self->_has;
  if ((*(_DWORD *)&v20 & 0x100000) == 0)
  {
LABEL_10:
    if ((*(_BYTE *)&v20 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_46;
  }

  uint64_t v13 = v4;
  if (v4[29])
  {
    -[SECC2MPNetworkEvent setNetworkTaskDescription:](self, "setNetworkTaskDescription:");
    unsigned int v5 = v13;
  }

  if (v5[21])
  {
    -[SECC2MPNetworkEvent setNetworkHostname:](self, "setNetworkHostname:");
    unsigned int v5 = v13;
  }

  if (v5[25])
  {
    -[SECC2MPNetworkEvent setNetworkRemoteAddresssAndPort:](self, "setNetworkRemoteAddresssAndPort:");
    unsigned int v5 = v13;
  }

  if (v5[19])
  {
    -[SECC2MPNetworkEvent setNetworkConnectionUuid:](self, "setNetworkConnectionUuid:");
    unsigned int v5 = v13;
  }

  if ((*((_BYTE *)v5 + 282) & 0x80) != 0)
  {
    self->_networkConnectionReused = *((_BYTE *)v5 + 272);
    *(_DWORD *)&self->_has |= 0x800000u;
  }

  if (v5[22])
  {
    -[SECC2MPNetworkEvent setNetworkInterfaceIdentifier:](self, "setNetworkInterfaceIdentifier:");
    unsigned int v5 = v13;
  }

  if (v5[24])
  {
    -[SECC2MPNetworkEvent setNetworkProtocolName:](self, "setNetworkProtocolName:");
    unsigned int v5 = v13;
  }

  uint64_t v7 = *((_DWORD *)v5 + 70);
  if ((v7 & 0x80000) != 0)
  {
    self->_networkRequestHeaderSize = *((_DWORD *)v5 + 52);
    *(_DWORD *)&self->_has |= 0x80000u;
    uint64_t v7 = *((_DWORD *)v5 + 70);
    if ((v7 & 1) == 0)
    {
LABEL_21:
      if ((v7 & 0x100000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_33;
    }
  }

  else if ((v7 & 1) == 0)
  {
    goto LABEL_21;
  }

  self->_networkRequestBodyBytesSent = v5[1];
  *(_DWORD *)&self->_has |= 1u;
  uint64_t v7 = *((_DWORD *)v5 + 70);
  if ((v7 & 0x100000) == 0)
  {
LABEL_22:
    if ((v7 & 2) == 0) {
      goto LABEL_23;
    }
    goto LABEL_34;
  }

  uint64_t v12 = (uint64_t (**)(id, uint64_t, void))[v1 factory];
  Name = SOSCircleGetName(v5);
  if (v12)
  {
    char v14 = v12[1](v12, Name, 0LL);
    if (v14)
    {
      __int128 v15 = *(void *)v14;
      __int128 v16 = (*(uint64_t (**)(uint64_t, void))(v14 + 72))(v14, 0LL);
      if (v15)
      {
        if (-[OTSOSActualAdapter sosEnabled]_0(v16, v17))
        {
          v61 = 0LL;
          v62 = &v61;
          v63 = 0x2020000000LL;
          v64 = 0;
          *(void *)block = _NSConcreteStackBlock;
          *(void *)&block[8] = 3221225472LL;
          *(void *)&block[16] = sub_1000D4D00;
          v68 = &unk_100285858;
          v69 = (os_log_s *)&v61;
          v70 = v15;
          v71 = v11;
          v72 = Mutable;
          v73 = v9;
          dispatch_sync(*(dispatch_queue_t *)(v15 + 112), block);
          v57 = 0LL;
          v58 = &v57;
          v59 = 0x2020000000LL;
          v60 = 1;
          v53 = 0LL;
          v54 = &v53;
          v55 = 0x2020000000LL;
          v56 = 0LL;
          context = _NSConcreteStackBlock;
          v47 = 3221225472LL;
          v48 = sub_1000D4DC0;
          v49 = &unk_100285880;
          v51 = &v53;
          v52 = v15;
          v50 = (os_log_s *)&v57;
          int v18 = sub_1000CD270(v15, (uint64_t)&v56, &context);
          if (*((_BYTE *)v58 + 24)) {
            size_t v19 = v18;
          }
          else {
            size_t v19 = 0;
          }
          *((_BYTE *)v58 + 24) = v19;
          if ((v19 & 1) == 0)
          {
            unsigned int v20 = sub_10001267C("SecError");
            __int128 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              __int128 v22 = v54[3];
              *(_DWORD *)buf = 138412290;
              v66 = v22;
              _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "failed to save engine state: %@",  buf,  0xCu);
            }

            __int128 v23 = (const void *)v54[3];
            if (v23) {
              CFRelease(v23);
            }
          }

          _Block_object_dispose(&v53, 8);
          _Block_object_dispose(&v57, 8);
          _Block_object_dispose(&v61, 8);
        }
      }
    }
  }

  if (v11) {
    CFRelease(v11);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v9) {
    CFRelease(v9);
  }
}

  uint64_t v4 = sub_100012920(a1[2], (uint64_t)a2);
  if (v4
    && (mach_port_t v6 = v4, (v7 = sub_100012920(a1[3], (uint64_t)a2)) != 0)
    && (v8 = v7, (uint64_t v9 = sub_100012920(a1[4], (uint64_t)a2)) != 0)
    && (v10 = v9, (__int128 v11 = sub_100012920(a1[5], (uint64_t)a2)) != 0))
  {
    uint64_t v12 = ccder_sizeof(0x2000000000000010LL, v8 + v6 + v10 + v11);
  }

  else
  {
    sub_1000194B4(-1LL, @"com.apple.security.cfder.error", 0LL, a2, v5, @"don't know how to encode");
    uint64_t v12 = 0LL;
  }

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 0x40000000LL;
  v16[2] = sub_1001A8F80;
  v16[3] = &unk_100292628;
  v16[4] = a1;
  v16[5] = a2;
  return CFDataCreateWithDER(kCFAllocatorDefault, v12, v16);
}

uint64_t sub_100006A94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  v4[1] = a2;
  unint64_t v5 = 0LL;
  v4[0] = a1;
  if ((ccder_blob_decode_tl(v4, 12LL, &v5) & 1) == 0)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s bad 1%s\n", "aks", "", "", "", "der_key_validate");
    return 0LL;
  }

  if (v5 >= 0x11)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s bad 2%s\n", "aks", "", "", "", "der_key_validate");
    return 0LL;
  }

  return v2;
}

uint64_t sub_100006B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    return sub_100006608( a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100006BCC,  a1)
  }
         - 1;
  else {
    return 4294967285LL;
  }
}

uint64_t sub_100006BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  __int128 v8 = (unsigned __int8 *)sub_100006A94(a1, a1 + a2);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
  }

  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s fail%s\n", "aks", "", "", "", "_merge_dict_cb", ":", 647, "", 0, "", "");
  return 0LL;
}

uint64_t sub_100006C98(void *a1, void *a2, size_t *a3)
{
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t v7 = (void *)*a1;
        if (*a1)
        {
          unint64_t v8 = 0LL;
          uint64_t v9 = 0LL;
          uint64_t v10 = 0LL;
          do
          {
            v10 += v7[2];
            uint64_t v7 = (void *)*v7;
            v9 -= 16LL;
            --v8;
          }

          while (v7);
          if (v8 >= 0xF000000000000001LL && (rsize_t v11 = -v9, (v12 = (char *)calloc(-v9, 1uLL)) != 0LL))
          {
            uint64_t v13 = v12;
            char v14 = (void *)*a1;
            if (*a1)
            {
              __int128 v15 = v12;
              do
              {
                *(_OWORD *)__int128 v15 = *(_OWORD *)(v14 + 1);
                v15 += 16;
                char v14 = (void *)*v14;
              }

              while (v14);
            }

            qsort(v12, -(uint64_t)v8, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_100007644);
            size_t v16 = ccder_sizeof(0x2000000000000011LL, v10);
            __int128 v17 = (char *)calloc(v16, 1uLL);
            int v18 = v17;
            if (v17)
            {
              uint64_t v25 = v17;
              uint64_t v26 = &v17[v16];
              unint64_t v19 = v8 - 1;
              unsigned int v20 = &v13[-v9 - 8];
              while (!__CFADD__(v19++, 1LL))
              {
                __int128 v22 = v20 - 16;
                char v23 = ccder_blob_encode_body(&v25, *(void *)v20, *((void *)v20 - 1));
                unsigned int v20 = v22;
                if ((v23 & 1) == 0) {
                  goto LABEL_16;
                }
              }

              if (!ccder_blob_encode_tl(&v25, 0x2000000000000011LL, v10) || v25 != v26)
              {
LABEL_16:
                uint64_t v3 = 0xFFFFFFFFLL;
                goto LABEL_20;
              }

              uint64_t v3 = 0LL;
              *a2 = v18;
              *a3 = v16;
              int v18 = 0LL;
            }

            else
            {
              uint64_t v3 = 4294967279LL;
            }

LABEL_20:
            memset_s(v13, v11, 0, v11);
            free(v13);
            if (v18)
            {
              memset_s(v18, v16, 0, v16);
              free(v18);
            }
          }

          else
          {
            return 0xFFFFFFFFLL;
          }
        }
      }
    }
  }

  return v3;
}

        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSViewManager manager](&OBJC_CLASS___CKKSViewManager, "manager"));
    size_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 completedSecCKKSInitialize]);
    __int128 v17 = [v16 wait:10];

    if (v17)
    {
      int v18 = sub_10001267C("SecError");
      unint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "secItemFetchPCSIdentityByKeyOutOfBand: CKKSViewManager not initialized?",  buf,  2u);
      }

      unsigned int v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:",  @"CKKSErrorDomain",  9LL,  @"CKKS not yet initialized"));
      ((void (*)(void *, void, void *))v10[2])(v10, 0LL, v20);
    }

    else
    {
      if (qword_1002DEB70 != -1) {
        dispatch_once(&qword_1002DEB70, &stru_10028EFA8);
      }
      if (byte_1002DEB68)
      {
        p_client = malloc(0x38uLL);
        SecSecurityFixUpClientWithPersona(&self->_client, p_client);
      }

      else
      {
        p_client = &self->_client;
      }

      __int128 v22 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSViewManager manager](&OBJC_CLASS___CKKSViewManager, "manager"));
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472LL;
      v23[2] = sub_100010D84;
      v23[3] = &unk_100282D58;
      __int128 v24 = v8;
      uint64_t v25 = v10;
      uint64_t v26 = p_client;
      [v22 fetchPCSIdentityOutOfBand:v24 forceFetch:v6 complete:v23];
    }

    goto LABEL_20;
  }

  sub_1000194E0( -25291,  (__CFString **)&cf,  @"secItemFetchPCSIdentityByKeyOutOfBand: %@ has entitlement %@",  self->_client.task,  @"com.apple.private.keychain.deny");
  ((void (*)(void *, void, CFTypeRef))v10[2])(v10, 0LL, cf);
  rsize_t v11 = cf;
  if (cf)
  {
    cf = 0LL;
    CFRelease(v11);
  }

    uint64_t v7 = 0;
    goto LABEL_21;
  }

  unint64_t v8 = (void *)v30[5];
  if (!v8 || ![v8 count]) {
    goto LABEL_20;
  }
  unsigned int v20 = 0u;
  __int128 v21 = 0u;
  int v18 = 0u;
  unint64_t v19 = 0u;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v30[5], "allValues", 0));
  uint64_t v7 = 0;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v18 objects:v35 count:16];
  if (v10)
  {
    rsize_t v11 = *(void *)v19;
    uint64_t v12 = SecEscrowRequestHavePrecord;
    uint64_t v13 = SecEscrowRequestPendingPasscode;
    char v14 = SecEscrowRequestPendingCertificate;
    do
    {
      for (i = 0LL; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v19 != v11) {
          objc_enumerationMutation(v9);
        }
        size_t v16 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
        if (([v16 isEqualToString:v12] & 1) != 0
          || ([v16 isEqualToString:v13] & 1) != 0
          || [v16 isEqualToString:v14])
        {
          uint64_t v7 = 1;
        }
      }

      uint64_t v10 = [v9 countByEnumeratingWithState:&v18 objects:v35 count:16];
    }

    while (v10);
  }

LABEL_21:
  _Block_object_dispose(&v23, 8);

  _Block_object_dispose(&v29, 8);
  return v7 & 1;
}

  __int128 v24 = sub_10001267C("escrowrequest");
  uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "No escrow requests need a passcode", buf, 2u);
  }

  uint64_t v3 = v29;
  (*((void (**)(id, void, void))v29 + 2))(v29, 0LL, 0LL);
LABEL_29:
  uint64_t v4 = v28;
LABEL_30:
}

        if (!v11) {

        }
        goto LABEL_23;
      }

      LOBYTE(v13) = v24;
      int v18 = v21;
    }

    else
    {
      int v18 = 0LL;
      char v14 = 1;
    }

    uint64_t v12 = v22;
    if ((v13 & 1) != 0) {
      goto LABEL_19;
    }
    goto LABEL_20;
  }

  char v14 = 0;
LABEL_24:

  return v14;
}

  networkEvent = self->_networkEvent;
  if (networkEvent)
  {
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(-[SECC2MPNetworkEvent dictionaryRepresentation](networkEvent, "dictionaryRepresentation"));
    [v3 setObject:v15 forKey:@"network_event"];
  }

  genericEvent = self->_genericEvent;
  if (genericEvent)
  {
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(-[SECC2MPGenericEvent dictionaryRepresentation](genericEvent, "dictionaryRepresentation"));
    [v3 setObject:v17 forKey:@"generic_event"];
  }

  return v3;
}

uint64_t sub_100006E5C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2 && a3 && a4)
  {
    unint64_t v9 = sub_1000065A4(a3, a4);
    if (v9 <= a4 - a3)
    {
      unint64_t v10 = v9;
      size_t v11 = ccder_sizeof(0x2000000000000010LL, v9 + *(unsigned __int8 *)(a2 + 1) + 2);
      uint64_t v12 = (char *)calloc(v11, 1uLL);
      if (!v12) {
        return 4294967279LL;
      }
      uint64_t v13 = v12;
      char v14 = &v12[v11];
      __int128 v22 = v12;
      char v23 = &v12[v11];
      if (ccder_blob_encode_body(&v22, v10, a3))
      {
        __int128 v24 = v13;
        uint64_t v25 = v23;
        int v15 = ccder_blob_encode_body(&v24, *(unsigned __int8 *)(a2 + 1) + 2LL, a2);
        size_t v16 = v25;
        if (!v15) {
          size_t v16 = 0LL;
        }
        __int128 v24 = v13;
        uint64_t v25 = v16;
        int v17 = ccder_blob_encode_tl(&v24, 0x2000000000000010LL, v14 - v16);
        int v18 = v25;
        if (!v17) {
          int v18 = 0LL;
        }
        if (v18 && v18 == v13)
        {
          unsigned int v20 = calloc(0x18uLL, 1uLL);
          if (v20)
          {
            __int128 v21 = v20;
            uint64_t result = 0LL;
            v21[1] = v13;
            v21[2] = v11;
            void *v21 = *a1;
            *a1 = v21;
            return result;
          }
        }
      }

      memset_s(v13, v11, 0, v11);
      free(v13);
    }

    return 0xFFFFFFFFLL;
  }

  return result;
}

uint64_t sub_100006FC8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100006E5C(a1, a2, a3, a3 + *(unsigned __int8 *)(a3 + 1) + 2);
}

uint64_t sub_100006FD8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2 && a3)
  {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 1);
    uint64_t v10 = ccder_sizeof(4LL, a4);
    size_t v11 = ccder_sizeof(0x2000000000000010LL, v9 + v10 + 2);
    uint64_t v12 = (char *)calloc(v11, 1uLL);
    if (v12)
    {
      uint64_t v13 = v12;
      char v14 = &v12[v11];
      __int128 v22 = v12;
      char v23 = &v12[v11];
      __int128 v24 = v13;
      uint64_t v25 = v23;
      int v15 = ccder_blob_encode_body(&v24, *(unsigned __int8 *)(a2 + 1) + 2LL, a2);
      size_t v16 = v25;
      if (!v15) {
        size_t v16 = 0LL;
      }
      __int128 v24 = v13;
      uint64_t v25 = v16;
      int v17 = ccder_blob_encode_tl(&v24, 0x2000000000000010LL, v14 - v16);
      int v18 = v25;
      if (!v17) {
        int v18 = 0LL;
      }
      BOOL v19 = v18 && v18 == v13;
      if (v19 && (unsigned int v20 = calloc(0x18uLL, 1uLL)) != 0LL)
      {
        __int128 v21 = v20;
        uint64_t result = 0LL;
        v21[1] = v13;
        v21[2] = v11;
        void *v21 = *a1;
        *a1 = v21;
      }

      else
      {
LABEL_19:
        memset_s(v13, v11, 0, v11);
        free(v13);
        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      return 4294967279LL;
    }
  }

  return result;
}

uint64_t sub_100007144(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unint64_t v6 = HIBYTE(a3);
  if ((HIBYTE(a3) + 1) > 1u)
  {
    uint64_t v11 = 8LL;
  }

  else
  {
    uint64_t v7 = 9LL;
    uint64_t v8 = 48LL;
    uint64_t v9 = 1LL;
    while ((unint64_t)(v7 - 2) >= 2)
    {
      uint64_t v10 = a3 >> v8;
      --v7;
      v8 -= 8LL;
      if ((_DWORD)v6 != v10)
      {
        uint64_t v9 = v7 - 1;
        goto LABEL_8;
      }
    }

    uint64_t v7 = 2LL;
LABEL_8:
    else {
      uint64_t v11 = v9;
    }
  }

  uint64_t v30 = 0LL;
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    uint64_t v13 = *(unsigned __int8 *)(a2 + 1);
    uint64_t v14 = ccder_sizeof(2LL, v11);
    size_t v15 = ccder_sizeof(0x2000000000000010LL, v13 + v14 + 2);
    size_t v16 = (char *)calloc(v15, 1uLL);
    if (v16)
    {
      int v17 = v16;
      uint64_t v18 = v11;
      do
      {
        *((_BYTE *)&v30 + v18 - 1) = v3;
        v3 >>= 8;
        --v18;
      }

      while (v18);
      uint64_t v26 = v16;
      __int128 v27 = &v16[v15];
      __int128 v28 = v17;
      v29 = v27;
      int v19 = ccder_blob_encode_body(&v28, *(unsigned __int8 *)(a2 + 1) + 2LL, a2);
      unsigned int v20 = v29;
      if (!v19) {
        unsigned int v20 = 0LL;
      }
      __int128 v28 = v17;
      v29 = v20;
      int v21 = ccder_blob_encode_tl(&v28, 0x2000000000000010LL, &v17[v15] - v20);
      __int128 v22 = v29;
      if (!v21) {
        __int128 v22 = 0LL;
      }
      BOOL v23 = v22 && v22 == v17;
      if (v23 && (__int128 v24 = calloc(0x18uLL, 1uLL)) != 0LL)
      {
        uint64_t v25 = v24;
        uint64_t result = 0LL;
        v25[1] = v17;
        v25[2] = v15;
        *uint64_t v25 = *a1;
        *a1 = v25;
      }

      else
      {
LABEL_30:
        memset_s(v17, v15, 0, v15);
        free(v17);
        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      return 4294967279LL;
    }
  }

  return result;
}

uint64_t sub_100007358(uint64_t a1, unsigned int a2, char *__s)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 && a1)
  {
    if (__s)
    {
      memset_s(__s, 0x54uLL, 0, 0x54uLL);
      bzero(v12, 0x228uLL);
      uint64_t v11 = off_1002DCC40;
      v12[4] = (uint64_t)off_1002DCC48;
      v12[9] = (uint64_t)off_1002DCC50;
      v12[14] = (uint64_t)off_1002DCC58;
      v12[19] = (uint64_t)off_1002DCC60;
      v12[24] = (uint64_t)off_1002DCC68;
      v12[29] = (uint64_t)off_1002DCC70;
      v12[34] = (uint64_t)off_1002DCC78;
      v12[39] = (uint64_t)off_1002DCC80;
      v12[44] = (uint64_t)off_1002DCB58;
      v12[49] = (uint64_t)off_1002DCBF8;
      v12[54] = (uint64_t)off_1002DCCA0;
      uint64_t v14 = off_1002DCD08;
      int v17 = off_1002DCD18;
      __int128 v8 = xmmword_100204F80;
      uint64_t v9 = 0LL;
      uint64_t v10 = &v11;
      sub_100006608( a1,  a1 + a2,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100006458,  (uint64_t)&v8);
      *(_DWORD *)__int128 __s = sub_1000067A8(v12[0], v12[1]);
      *((_DWORD *)__s + 1) = sub_1000067A8(v12[5], v12[6]);
      *((void *)__s + 1) = sub_1000067A8(v12[10], v12[11]);
      *((_DWORD *)__s + 4) = sub_1000067A8(v12[15], v12[16]);
      *((_DWORD *)__s + 5) = sub_1000067A8(v12[20], v12[21]);
      *(void *)(__s + 26) = sub_1000067A8(v12[35], v12[36]);
      *(void *)(__s + 34) = sub_1000067A8(v12[40], v12[41]);
      *(_DWORD *)(__s + 42) = sub_1000067A8(v12[45], v12[46]);
      *(_DWORD *)(__s + 46) = sub_1000067A8(v12[50], v12[51]);
      sub_100006A08(&v13, 4LL, __s + 50, 16);
      __s[66] = sub_1000067A8(v12[25], v12[26]);
      __s[67] = sub_1000067A8(v12[30], v12[31]);
      *(void *)(__s + 68) = sub_1000067A8(v15, v16);
      uint64_t v7 = sub_1000067A8(v18, v19);
      uint64_t result = 0LL;
      *(void *)(__s + 76) = v7;
    }
  }

  return result;
}

uint64_t sub_1000075BC(__int128 *a1, uint64_t a2, void *a3)
{
  uint64_t v9 = 0LL;
  if (a3) {
    *a3 = 0LL;
  }
  __int128 v8 = *a1;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t result = ccder_blob_decode_range(&v8, a2, &v6);
  if ((_DWORD)result)
  {
    if (ccn_read_uint(1LL, &v9, v7 - v6))
    {
      return 0LL;
    }

    else
    {
      *a1 = v8;
      if (a3) {
        *a3 = v9;
      }
      return 1LL;
    }
  }

  return result;
}

uint64_t sub_100007644(void *a1, void **a2)
{
  uint64_t v2 = *a1 + a1[1];
  v13[0] = *a1;
  v13[1] = v2;
  uint64_t v3 = (char *)a2[1] + (void)*a2;
  __s2[0] = *a2;
  __s2[1] = v3;
  unint64_t v17 = 0LL;
  unint64_t v15 = 0LL;
  unint64_t v16 = 0LL;
  unint64_t v14 = 0LL;
  uint64_t v4 = (const void *)v13[0];
  if (!v13[0]
    || !ccder_blob_decode_tag(__s2, &v15)
    || !ccder_blob_decode_len(__s2, &v14)
    || !__s2[0])
  {
    return 4294967293LL;
  }

  if (v17 > v15) {
    return 1LL;
  }
  if (v15 > v17) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v6 = v16;
  unint64_t v7 = v14;
  size_t v8 = v16 >= v14 ? v14 : v16;
  int v9 = memcmp(v4, __s2[0], v8);
  if (v9 > 0 || !v9 && v6 > v7) {
    return 1LL;
  }
  int v11 = v9 < 0 || v6 < v7;
  return (v11 << 31 >> 31);
}

void *acm_mem_alloc_data(size_t __size)
{
  uint64_t result = calloc(1uLL, __size);
  if (result) {
    qword_1002DE6B8 += __size;
  }
  return result;
}

void acm_mem_free_data(void *a1, rsize_t __n)
{
  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    uint64_t v4 = qword_1002DE6B8 - __n;
    if (qword_1002DE6B8 < __n) {
      uint64_t v4 = 0LL;
    }
    qword_1002DE6B8 = v4;
  }

void *acm_mem_alloc(size_t __size)
{
  uint64_t result = calloc(1uLL, __size);
  if (result) {
    qword_1002DE6C0 += __size;
  }
  return result;
}

void acm_mem_free(void *a1, rsize_t __n)
{
  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    uint64_t v4 = qword_1002DE6C0 - __n;
    if (qword_1002DE6C0 < __n) {
      uint64_t v4 = 0LL;
    }
    qword_1002DE6C0 = v4;
  }

const char *acm_mem_alloc_info( const char *result, const void *a2, uint64_t a3, const char *a4, int a5, const char *a6)
{
  if (a2) {
    qword_1002DE6B0 += a3;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    unint64_t v6 = "NULL";
    if (result) {
      unint64_t v7 = result;
    }
    else {
      unint64_t v7 = "NULL";
    }
    if (a4) {
      size_t v8 = a4;
    }
    else {
      size_t v8 = "NULL";
    }
    if (a6) {
      unint64_t v6 = a6;
    }
    return (const char *)printf( "%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n",  "ACM",  "acm_mem_alloc_info",  v7,  a2,  a3,  qword_1002DE6B0,  0,  qword_1002DE6B8,  qword_1002DE6C0,  v8,  a5,  v6);
  }

  return result;
}

const char *acm_mem_free_info( const char *result, const void *a2, unint64_t a3, const char *a4, int a5, const char *a6)
{
  if (a2)
  {
    uint64_t v6 = qword_1002DE6B0 - a3;
    if (qword_1002DE6B0 < a3) {
      uint64_t v6 = 0LL;
    }
    qword_1002DE6B0 = v6;
  }

  if (gACMLoggingLevel <= 0x1Eu)
  {
    unint64_t v7 = "NULL";
    if (result) {
      size_t v8 = result;
    }
    else {
      size_t v8 = "NULL";
    }
    if (a4) {
      int v9 = a4;
    }
    else {
      int v9 = "NULL";
    }
    if (a6) {
      unint64_t v7 = a6;
    }
    return (const char *)printf( "%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n",  "ACM",  "acm_mem_free_info",  v8,  a2,  a3,  qword_1002DE6B0,  0,  qword_1002DE6B8,  qword_1002DE6C0,  v9,  a5,  v7);
  }

  return result;
}

uint64_t sub_1000079D0(uint64_t *a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  if (byte_1002DCD21 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v18 = 136315394;
    uint64_t v19 = "ACMLib";
    __int16 v20 = 2080;
    int v21 = "ioKitTransport";
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: called.\n",  (uint8_t *)&v18,  0x16u);
  }

  if (a1)
  {
    uint64_t v14 = sub_100007FFC();
    unsigned int v15 = 70;
    if ((_DWORD)v14)
    {
      uint64_t v16 = v14;
    }

    else
    {
      uint64_t v16 = sub_1000081DC(*a1, a2, a3, a4, a5, a6, a7);
      if ((_DWORD)v16) {
        unsigned int v15 = 70;
      }
      else {
        unsigned int v15 = 10;
      }
    }
  }

  else
  {
    unsigned int v15 = 70;
    uint64_t v16 = 4294967293LL;
  }

  if (v15 >= byte_1002DCD21 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v18 = 136315650;
    uint64_t v19 = "ACMLib";
    __int16 v20 = 2080;
    int v21 = "ioKitTransport";
    __int16 v22 = 2048;
    uint64_t v23 = (int)v16;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld.\n",  (uint8_t *)&v18,  0x20u);
  }

  return v16;
}

_DWORD *ACMContextCreateWithExternalForm(_OWORD *a1, uint64_t a2)
{
  if (byte_1002DCD21 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v10 = "ACMLib";
    __int16 v11 = 2080;
    uint64_t v12 = "ACMContextCreateWithExternalForm";
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: called.\n",  buf,  0x16u);
  }

  uint64_t v8 = 0LL;
  uint64_t v4 = LibCall_ACMContextCreateWithExternalForm( (uint64_t (*)(uint64_t, uint64_t, void, _OWORD *, uint64_t, void *, uint64_t *))sub_1000079D0,  (uint64_t)&v8,  a1,  a2,  &byte_1002DCD21,  1);
  if (v4)
  {
    if (byte_1002DCD21 <= 0x28u && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      int v5 = v4[4];
      *(_DWORD *)buf = 136315650;
      uint64_t v10 = "ACMLib";
      __int16 v11 = 2080;
      uint64_t v12 = "ACMContextCreateWithExternalForm";
      __int16 v13 = 1024;
      LODWORD(v14) = v5;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: CS[%u] acquired.\n",  buf,  0x1Cu);
    }

    unsigned int v6 = 30;
  }

  else
  {
    sub_1000087B4();
    unsigned int v6 = 70;
  }

  if (v6 >= byte_1002DCD21 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v10 = "ACMLib";
    __int16 v11 = 2080;
    uint64_t v12 = "ACMContextCreateWithExternalForm";
    __int16 v13 = 2048;
    uint64_t v14 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: returning, -> ctx = %p.\n",  buf,  0x20u);
  }

  return v4;
}

uint64_t ACMContextDelete(_DWORD *a1, int a2)
{
  unsigned int v4 = byte_1002DCD21;
  if (byte_1002DCD21 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    uint64_t v14 = "ACMContextDelete";
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: called.\n",  buf,  0x16u);
    unsigned int v4 = byte_1002DCD21;
  }

  if (a1 && v4 <= 0x28 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v5 = a1[4];
    unsigned int v6 = "deleted";
    *(_DWORD *)buf = 136315906;
    uint64_t v12 = "ACMLib";
    uint64_t v14 = "ACMContextDelete";
    __int16 v13 = 2080;
    if (a2) {
      unsigned int v6 = "destroyed";
    }
    __int16 v15 = 1024;
    LODWORD(v16[0]) = v5;
    WORD2(v16[0]) = 2080;
    *(void *)((char *)v16 + 6) = v6;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: CS[%u] %s.\n",  buf,  0x26u);
  }

  uint64_t v10 = a1;
  uint64_t v7 = LibCall_ACMContextDelete( (void (*)(uint64_t, uint64_t, void, void *, uint64_t, void, void))sub_1000079D0,  (uint64_t)&v10,  a1,  a2);
  if ((_DWORD)v7) {
    unsigned int v8 = 70;
  }
  else {
    unsigned int v8 = 10;
  }
  if (v8 >= byte_1002DCD21 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    uint64_t v14 = "ACMContextDelete";
    __int16 v15 = 2048;
    v16[0] = (int)v7;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld.\n",  buf,  0x20u);
  }

  return v7;
}

uint64_t sub_100007FFC()
{
  if (byte_1002DCD21 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = "ACMLib";
    __int16 v8 = 2080;
    int v9 = "init";
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: called.\n",  (uint8_t *)&v6,  0x16u);
  }

  if ((byte_1002DE6CC & 1) != 0)
  {
    uint64_t v0 = 0LL;
  }

  else
  {
    uint64_t v1 = IOServiceMatching("AppleCredentialManager");
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v1);
    if (!MatchingService)
    {
      unsigned int v4 = 70;
      uint64_t v0 = 4294967291LL;
      goto LABEL_10;
    }

    io_object_t v3 = MatchingService;
    uint64_t v0 = IOServiceOpen(MatchingService, mach_task_self_, 0, (io_connect_t *)&dword_1002DE6C8);
    if ((_DWORD)v0)
    {
      unsigned int v4 = 70;
      goto LABEL_10;
    }

    IOObjectRelease(v3);
    byte_1002DE6CC = 1;
  }

  unsigned int v4 = 10;
LABEL_10:
  if (v4 >= byte_1002DCD21 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315650;
    uint64_t v7 = "ACMLib";
    __int16 v8 = 2080;
    int v9 = "init";
    __int16 v10 = 2048;
    uint64_t v11 = (int)v0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld.\n",  (uint8_t *)&v6,  0x20u);
  }

  return v0;
}

uint64_t sub_1000081DC(uint64_t a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  if (byte_1002DCD21 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v25 = "ACMLib";
    __int16 v26 = 2080;
    __int128 v27 = "performCommand";
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: called.\n",  buf,  0x16u);
  }

  size_t inputStructCnt = 0LL;
  uint64_t v14 = LibCall_BuildCommand(a2, 0, a3, a4, a5, &inputStructCnt);
  if (v14)
  {
    __int16 v15 = v14;
    if (!a6 && a7)
    {
      uint64_t v18 = 4294967293LL;
    }

    else
    {
      if (a7) {
        size_t v16 = *a7;
      }
      else {
        size_t v16 = 0LL;
      }
      size_t v22 = v16;
      uint64_t v17 = IOConnectCallStructMethod(dword_1002DE6C8, 0, v14, inputStructCnt, a6, &v22);
      uint64_t v18 = v17;
      if (a1) {
        LODWORD(a1) = *(_DWORD *)(a1 + 16);
      }
      if ((_DWORD)v17)
      {
        if (byte_1002DCD21 <= 0x46u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136316418;
          uint64_t v25 = "ACMLib";
          __int16 v26 = 2080;
          __int128 v27 = "performCommand";
          __int16 v28 = 1024;
          *(_DWORD *)v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          __int16 v30 = 1024;
          int v31 = v18;
          __int16 v32 = 1024;
          int v33 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: cmd(%u) on CS[%u] -> err 0x%x (%d).\n",  buf,  0x2Eu);
        }
      }

      else
      {
        if (byte_1002DCD21 <= 0x28u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315906;
          uint64_t v25 = "ACMLib";
          __int16 v26 = 2080;
          __int128 v27 = "performCommand";
          __int16 v28 = 1024;
          *(_DWORD *)v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: cmd(%u) on CS[%u] -> ok.\n",  buf,  0x22u);
        }

        uint64_t v18 = 0LL;
        if (a7) {
          *a7 = v22;
        }
      }
    }

    rsize_t v19 = inputStructCnt;
    acm_mem_free_info( "<data>",  v15,  inputStructCnt,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  134,  "performCommand");
    acm_mem_free_data(v15, v19);
    if ((_DWORD)v18) {
      unsigned int v20 = 70;
    }
    else {
      unsigned int v20 = 10;
    }
  }

  else
  {
    unsigned int v20 = 70;
    uint64_t v18 = 4294967291LL;
  }

  if (v20 >= byte_1002DCD21 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v25 = "ACMLib";
    __int16 v26 = 2080;
    __int128 v27 = "performCommand";
    __int16 v28 = 2048;
    *(void *)v29 = (int)v18;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld.\n",  buf,  0x20u);
  }

  return v18;
}

uint64_t ACMContextRemovePassphraseCredentialsByPurposeAndScope(_OWORD *a1, int a2, int a3)
{
  if (byte_1002DCD21 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v11 = 136315394;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    uint64_t v14 = "ACMContextRemovePassphraseCredentialsByPurposeAndScope";
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: called.\n",  (uint8_t *)&v11,  0x16u);
  }

  if (a1 || a3 == 2)
  {
    uint64_t v6 = sub_100007FFC();
    if ((_DWORD)v6)
    {
      uint64_t v8 = v6;
      unsigned int v9 = 70;
    }

    else
    {
      uint64_t v7 = acm_mem_alloc_data(0x18uLL);
      acm_mem_alloc_info( "<data>",  v7,  24LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  492,  "ACMContextRemovePassphraseCredentialsByPurposeAndScope");
      if (v7)
      {
        if (a1)
        {
          _OWORD *v7 = *a1;
        }

        else
        {
          *(void *)uint64_t v7 = 0LL;
          *((void *)v7 + 1) = 0LL;
        }

        *((_DWORD *)v7 + 4) = a2;
        *((_DWORD *)v7 + 5) = a3;
        uint64_t v8 = sub_1000081DC((uint64_t)a1, 16, 0, v7, 0x18uLL, 0LL, 0LL);
        acm_mem_free_info( "<data>",  v7,  0x18uLL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  513,  "ACMContextRemovePassphraseCredentialsByPurposeAndScope");
        acm_mem_free_data(v7, 0x18uLL);
        if ((_DWORD)v8) {
          unsigned int v9 = 70;
        }
        else {
          unsigned int v9 = 10;
        }
      }

      else
      {
        unsigned int v9 = 70;
        uint64_t v8 = 4294967292LL;
      }
    }
  }

  else
  {
    unsigned int v9 = 70;
    uint64_t v8 = 4294967293LL;
  }

  if (v9 >= byte_1002DCD21 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v11 = 136315650;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    uint64_t v14 = "ACMContextRemovePassphraseCredentialsByPurposeAndScope";
    __int16 v15 = 2048;
    uint64_t v16 = (int)v8;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld.\n",  (uint8_t *)&v11,  0x20u);
  }

  return v8;
}

void sub_1000087B4()
{
  if (byte_1002DCD21 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    uint64_t v7 = "updateLogLevelFromKext";
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: called.\n",  buf,  0x16u);
  }

  uint32_t outputCnt = 1;
  if (IOConnectCallScalarMethod(dword_1002DE6C8, 2u, 0LL, 0, &output, &outputCnt)) {
    goto LABEL_8;
  }
  unsigned __int8 v0 = output;
  unsigned int v1 = output;
  byte_1002DCD21 = output;
  if (output <= 0x1EuLL && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    uint64_t v7 = "updateLogLevelFromKext";
    __int16 v8 = 1024;
    int v9 = v0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: log level set to %d.\n",  buf,  0x1Cu);
LABEL_8:
    unsigned int v1 = byte_1002DCD21;
  }

  if (v1 <= 0xA && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    uint64_t v7 = "updateLogLevelFromKext";
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: returning.\n",  buf,  0x16u);
  }

_BYTE *LibCall_BuildCommand(char a1, char a2, char a3, const void *a4, size_t a5, void *a6)
{
  uint64_t v12 = 0LL;
  if (a5) {
    BOOL v13 = a4 == 0LL;
  }
  else {
    BOOL v13 = 0;
  }
  if (!v13 && a6)
  {
    if (a5 >= 0xFFFFFFFFFFFFFFF8LL)
    {
      uint64_t v12 = 0LL;
    }

    else
    {
      uint64_t v12 = acm_mem_alloc_data(a5 + 8);
      acm_mem_alloc_info( "<data>",  v12,  a5 + 8,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  22,  "LibCall_BuildCommand");
      if (v12)
      {
        *a6 = a5 + 8;
        *(_DWORD *)uint64_t v12 = 1396920900;
        v12[4] = a1;
        v12[5] = a2;
        v12[6] = a3;
        if (a5) {
          memcpy(v12 + 8, a4, a5);
        }
      }
    }
  }

  return v12;
}

_DWORD *LibCall_ACMContextCreateWithExternalForm( uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, uint64_t, void *, uint64_t *), uint64_t a2, _OWORD *a3, uint64_t a4, _BYTE *a5, int a6)
{
  uint64_t v12 = 0LL;
  unsigned int v13 = 70;
  int v14 = -3;
  if (a1 && a3 && a4 == 16)
  {
    memset(v21, 0, 9);
    if (a6)
    {
      uint64_t v20 = 9LL;
      int v15 = a1(a2, 37LL, 0LL, a3, 16LL, v21, &v20);
      if (!v15)
      {
        if (v20 == 9)
        {
          int v14 = 0;
          goto LABEL_19;
        }

        int v14 = -5;
        goto LABEL_28;
      }

      int v14 = v15;
      if (v15 != -3) {
        goto LABEL_28;
      }
    }

    uint64_t v20 = 5LL;
    int v16 = a1(a2, 18LL, 0LL, a3, 16LL, v21, &v20);
    if (v20 == 5) {
      int v17 = 0;
    }
    else {
      int v17 = -5;
    }
    if (v16) {
      int v14 = v16;
    }
    else {
      int v14 = v17;
    }
    if (!v16 && v20 == 5)
    {
LABEL_19:
      if (LODWORD(v21[0]))
      {
        uint64_t v12 = acm_mem_alloc(0x14uLL);
        acm_mem_alloc_info( "ACMHandleWithPayload",  v12,  20LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  128,  "LibCall_ACMContextCreateWithExternalForm");
        if (!v12)
        {
          unsigned int v13 = 70;
          int v14 = -4;
          goto LABEL_31;
        }

        int v18 = *(_DWORD *)((char *)v21 + 5);
        *(_OWORD *)uint64_t v12 = *a3;
        v12[4] = v18;
        if (a5) {
          *a5 = BYTE4(v21[0]);
        }
        if (v14)
        {
          acm_mem_free_info( "ACMHandleWithPayload",  v12,  0x14uLL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  147,  "LibCall_ACMContextCreateWithExternalForm");
          acm_mem_free(v12, 0x14uLL);
LABEL_29:
          unsigned int v13 = 70;
          goto LABEL_31;
        }
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      goto LABEL_30;
    }

LABEL_28:
    uint64_t v12 = 0LL;
    if (v14) {
      goto LABEL_29;
    }
LABEL_30:
    int v14 = 0;
    unsigned int v13 = 10;
  }

  uint64_t v25 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &v28);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  __int128 v27 = Mutable;
  if (cf) {
    CFDictionaryAddValue(Mutable, kCFErrorUnderlyingErrorKey, cf);
  }
  if (v25) {
    CFDictionaryAddValue(v27, kSOSCountKey, v25);
  }
  if (v10) {
    CFDictionaryAddValue(v27, kCFErrorDescriptionKey, v10);
  }
  *a4 = CFErrorCreate(kCFAllocatorDefault, a2, a1, v27);
  if (v25) {
    CFRelease(v25);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (cf)
  {
    uint64_t v20 = cf;
LABEL_42:
    CFRelease(v20);
  }
}

      __int128 v24 = 0;
      goto LABEL_85;
    }

    *(_DWORD *)buf = 138412546;
    v147 = v8;
    v148 = 2112;
    v149 = v15;
    int v21 = "couldn't save new CKRecord to database: %@ %@";
    size_t v22 = v20;
    uint64_t v23 = 22;
LABEL_4:
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, v21, buf, v23);
    goto LABEL_5;
  }

  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v147 = v14;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "CKKSMirrorEntry was created: %@",  buf,  0xCu);
  }

  v69 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSMirrorEntry item](v14, "item"));
  v70 = (void *)objc_claimAutoreleasedReturnValue([v69 uuid]);
  v71 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSMirrorEntry item](v14, "item"));
  v72 = (void *)objc_claimAutoreleasedReturnValue([v71 zoneID]);
  v141 = 0LL;
  v73 = (CKKSMirrorEntry *)objc_claimAutoreleasedReturnValue( +[CKKSIncomingQueueEntry tryFromDatabase:contextID:zoneID:error:]( &OBJC_CLASS___CKKSIncomingQueueEntry,  "tryFromDatabase:contextID:zoneID:error:",  v70,  v9,  v72,  &v141));
  v74 = (CKKSMirrorEntry *)v141;

  v131 = v74;
  if (v74)
  {
    v75 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSMirrorEntry recordID](v8, "recordID"));
    v76 = (void *)objc_claimAutoreleasedReturnValue([v75 zoneID]);
    v77 = (void *)objc_claimAutoreleasedReturnValue([v76 zoneName]);
    v78 = sub_1000AA6AC(@"ckks", v77);
    v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);

    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v147 = v131;
      _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_ERROR,  "Couldn't load possible existing incoming queue entry: %@",  buf,  0xCu);
    }
  }

  if (v73)
  {
    v80 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSMirrorEntry recordID](v8, "recordID"));
    v81 = (void *)objc_claimAutoreleasedReturnValue([v80 zoneID]);
    v82 = (void *)objc_claimAutoreleasedReturnValue([v81 zoneName]);
    v83 = sub_1000AA6AC(@"ckks", v82);
    v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);

    if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v147 = v73;
      _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEFAULT,  "Deleting existing CKKSIncomingQueueEntry: %@",  buf,  0xCu);
    }

    v140 = 0LL;
    -[CKKSSQLDatabaseObject deleteFromDatabase:](v73, "deleteFromDatabase:", &v140);
    v85 = (CKKSMirrorEntry *)v140;
    if (v85)
    {
      v86 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSMirrorEntry recordID](v8, "recordID"));
      v87 = (void *)objc_claimAutoreleasedReturnValue([v86 zoneID]);
      v88 = (void *)objc_claimAutoreleasedReturnValue([v87 zoneName]);
      v89 = sub_1000AA6AC(@"ckks", v88);
      v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);

      if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v147 = v85;
        _os_log_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_ERROR,  "Couldn't delete existing incoming queue entry: %@",  buf,  0xCu);
      }
    }
  }

  v130 = v73;
  v91 = objc_alloc(&OBJC_CLASS___CKKSIncomingQueueEntry);
  v92 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSMirrorEntry item](v14, "item"));
  v93 = -[CKKSIncomingQueueEntry initWithCKKSItem:action:state:]( v91,  "initWithCKKSItem:action:state:",  v92,  v37,  @"new");

  v139 = 0LL;
  LODWORD(v91) = -[CKKSSQLDatabaseObject saveToDatabase:](v93, "saveToDatabase:", &v139);
  v94 = (CKKSMirrorEntry *)v139;
  v95 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSMirrorEntry recordID](v8, "recordID"));
  v96 = (void *)objc_claimAutoreleasedReturnValue([v95 zoneID]);
  v97 = (void *)objc_claimAutoreleasedReturnValue([v96 zoneName]);
  v98 = sub_1000AA6AC(@"ckks", v97);
  v99 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);

  v100 = v94;
  if (!(_DWORD)v91 || v94)
  {
    if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v147 = v94;
      _os_log_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_ERROR,  "Couldn't save modified incoming queue entry: %@",  buf,  0xCu);
    }

    v119 = v130;
    if (a6)
    {
      v120 = v94;
      int v15 = 0LL;
      __int128 v24 = 0;
      *a6 = v120;
    }

    else
    {
      int v15 = 0LL;
      __int128 v24 = 0;
    }
  }

  else
  {
    if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v147 = (CKKSMirrorEntry *)v93;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_DEBUG,  "CKKSIncomingQueueEntry was created: %@",  buf,  0xCu);
    }

    v101 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSIncomingQueueEntry uuid](v93, "uuid"));
    v145[0] = @"new";
    v145[1] = @"reencrypt";
    v145[2] = @"error";
    v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v145, 3LL));
    v103 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSMirrorEntry recordID](v8, "recordID"));
    v104 = (void *)objc_claimAutoreleasedReturnValue([v103 zoneID]);
    v138 = 0LL;
    v105 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSOutgoingQueueEntry allWithUUID:states:contextID:zoneID:error:]( &OBJC_CLASS___CKKSOutgoingQueueEntry,  "allWithUUID:states:contextID:zoneID:error:",  v101,  v102,  v9,  v104,  &v138));
    int v15 = (CKKSMirrorEntry *)v138;

    if (!v105 || v15)
    {
      v106 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSMirrorEntry recordID](v8, "recordID"));
      v107 = (void *)objc_claimAutoreleasedReturnValue([v106 zoneID]);
      v108 = (void *)objc_claimAutoreleasedReturnValue([v107 zoneName]);
      v109 = sub_1000AA6AC(@"ckks", v108);
      v110 = (os_log_s *)objc_claimAutoreleasedReturnValue(v109);

      if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
      {
        v111 = (CKKSMirrorEntry *)objc_claimAutoreleasedReturnValue(-[CKKSIncomingQueueEntry uuid](v93, "uuid"));
        *(_DWORD *)buf = 138412546;
        v147 = v111;
        v148 = 2112;
        v149 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v110,  OS_LOG_TYPE_ERROR,  "Couldn't load OQE sibling for %@: %@",  buf,  0x16u);
      }
    }

    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v112 = v105;
    v113 = [v112 countByEnumeratingWithState:&v134 objects:v144 count:16];
    if (v113)
    {
      v114 = v113;
      v129 = v93;
      v115 = *(void *)v135;
      while (2)
      {
        for (i = 0LL; i != v114; i = (char *)i + 1)
        {
          if (*(void *)v135 != v115) {
            objc_enumerationMutation(v112);
          }
          v117 = *(CKKSMirrorEntry **)(*((void *)&v134 + 1) + 8LL * (void)i);
          v133 = 0LL;
          -[CKKSSQLDatabaseObject deleteFromDatabase:](v117, "deleteFromDatabase:", &v133);
          v118 = v133;
          if (v118)
          {
            v121 = v118;
            v122 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSMirrorEntry recordID](v8, "recordID"));
            v123 = (void *)objc_claimAutoreleasedReturnValue([v122 zoneID]);
            v124 = (void *)objc_claimAutoreleasedReturnValue([v123 zoneName]);
            v125 = sub_1000AA6AC(@"ckks", v124);
            oslog = (os_log_s *)objc_claimAutoreleasedReturnValue(v125);

            if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
            {
              v126 = (CKKSMirrorEntry *)objc_claimAutoreleasedReturnValue(-[CKKSIncomingQueueEntry uuid](v129, "uuid"));
              *(_DWORD *)buf = 138412802;
              v147 = v117;
              v148 = 2112;
              v149 = v126;
              v150 = 2112;
              v151 = v121;
              _os_log_impl( (void *)&_mh_execute_header,  oslog,  OS_LOG_TYPE_ERROR,  "Couldn't delete OQE sibling(%@) for %@: %@",  buf,  0x20u);
            }

            v100 = 0LL;
            if (a6) {
              *a6 = v121;
            }

            __int128 v24 = 0;
            v93 = v129;
            goto LABEL_83;
          }
        }

        v114 = [v112 countByEnumeratingWithState:&v134 objects:v144 count:16];
        if (v114) {
          continue;
        }
        break;
      }

      __int128 v24 = 1;
      v93 = v129;
    }

    else
    {
      __int128 v24 = 1;
    }

    v100 = 0LL;
LABEL_83:

    v119 = v130;
  }

LABEL_85:
  return v24;
}

    return v5;
  }

  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
  io_object_t v3 = sub_1000AA6AC(@"ckksincoming", v2);
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "CKKSIncomingQueueOperation cancelled, quitting",  buf,  2u);
  }

  int v5 = 0LL;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
  return v5;
}

    if (v15)
    {
      int v21 = sub_10010D0A8();
      size_t v22 = sub_1000E7958((uint64_t)ValueAtIndex, v15, v21, v11);
      if (v21) {
        CFRelease(v21);
      }
      if (!v22)
      {
        LOBYTE(v20) = 0;
        goto LABEL_40;
      }
    }

    uint64_t v20 = sub_1000E7958((uint64_t)ValueAtIndex, v17, v32, v11);
    if (!v20) {
      goto LABEL_40;
    }
    if (v16)
    {
      uint64_t v20 = sub_1000E7958((uint64_t)ValueAtIndex, v16, kCFBooleanFalse, v11);
      if (!v20) {
        goto LABEL_40;
      }
    }

    cf = 0LL;
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 0x40000000LL;
    v37[2] = sub_1000EBBC4;
    v37[3] = &unk_100285F88;
    v37[4] = ValueAtIndex;
    v38 = 0;
    uint64_t v25 = sub_1000EA124((__CFError *)cf);
    __int16 v26 = (__CFString *)cf;
    if (!v25)
    {
      if (cf)
      {
        CFMutableDictionaryRef Mutable = v31;
        __int16 v8 = v33;
        if (*v11)
        {
          if (CFErrorGetCode((CFErrorRef)*v11) != -25330) {
            goto LABEL_55;
          }
          __int128 v27 = *v11;
          if (*v11)
          {
            *int v11 = 0LL;
            CFRelease(v27);
LABEL_55:
            if (*v11)
            {
              CFRelease(v26);
              LOBYTE(v20) = 0;
              goto LABEL_41;
            }
          }
        }

        LOBYTE(v20) = 0;
        *int v11 = v26;
        goto LABEL_41;
      }

  return v28;
}

  __int16 v26 = -[NSString copyWithZone:](self->_optionsQualityOfService, "copyWithZone:", a3);
  __int128 v27 = (void *)v6[30];
  v6[30] = v26;

  __int16 v28 = self->_has;
  if ((*(_DWORD *)&v28 & 0x8000000) != 0)
  {
    *((_BYTE *)v6 + 276) = self->_optionsOutOfProcess;
    *((_DWORD *)v6 + 70) |= 0x8000000u;
    __int16 v28 = self->_has;
    if ((*(_DWORD *)&v28 & 0x10000000) == 0)
    {
LABEL_30:
      if ((*(_DWORD *)&v28 & 0x1000000) == 0) {
        goto LABEL_31;
      }
      goto LABEL_62;
    }
  }

  else if ((*(_DWORD *)&v28 & 0x10000000) == 0)
  {
    goto LABEL_30;
  }

  *((_BYTE *)v6 + 277) = self->_optionsOutOfProcessForceDiscretionary;
  *((_DWORD *)v6 + 70) |= 0x10000000u;
  __int16 v28 = self->_has;
  if ((*(_DWORD *)&v28 & 0x1000000) == 0)
  {
LABEL_31:
    if ((*(_DWORD *)&v28 & 0x2000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_63;
  }

    int v14 = 0;
    goto LABEL_29;
  }

  if ((*((_BYTE *)v4 + 84) & 1) != 0) {
    goto LABEL_28;
  }
LABEL_18:
  processName = self->_processName;
  if ((unint64_t)processName | *((void *)v4 + 2)
    && !-[NSString isEqual:](processName, "isEqual:"))
  {
    goto LABEL_28;
  }

  processVersion = self->_processVersion;
  if ((unint64_t)processVersion | *((void *)v4 + 4))
  {
  }

  processUuid = self->_processUuid;
  if ((unint64_t)processUuid | *((void *)v4 + 3))
  {
  }

  userDefaultTestName = self->_userDefaultTestName;
  if ((unint64_t)userDefaultTestName | *((void *)v4 + 9))
  {
  }

  internalTestConfigs = self->_internalTestConfigs;
  else {
    int v14 = 1;
  }
LABEL_29:

  return v14;
}

            CFRelease(v37);
            goto LABEL_29;
          }

          goto LABEL_27;
        }
}

LABEL_31:
  return v12;
}

  if (self->_oldPeerID)
  {
    objc_msgSend(v13, "setOldPeerID:");
    uint64_t v12 = v13;
  }
}

      v55 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSResultOperation error](self, "error"));
      v56 = v128;
      +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v128,  0LL,  v55);

      goto LABEL_35;
    }

    v40 = v142;
    if (!-[CKKSIncomingQueueOperation loadAndProcessEntries:withActionFilter:totalQueueEntries:]( self,  "loadAndProcessEntries:withActionFilter:totalQueueEntries:",  v38,  0LL,  &v141))
    {
      v53 = (void *)objc_claimAutoreleasedReturnValue([v38 zoneName]);
      v54 = sub_1000AA6AC(@"ckksincoming", v53);
      v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);

      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        v51 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSResultOperation error](self, "error"));
        *(_DWORD *)buf = 138412290;
        v153 = (unint64_t)v51;
        v52 = "Early-exiting from IncomingQueueOperation (after processing all incoming entries): %@";
LABEL_30:
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, v52, buf, 0xCu);
      }

      goto LABEL_31;
    }

    v41 = v141;
    if (-[CKKSIncomingQueueOperation successfulItemsProcessed](self, "successfulItemsProcessed")
      || -[CKKSIncomingQueueOperation errorItemsProcessed](self, "errorItemsProcessed"))
    {
      v42 = (void *)objc_claimAutoreleasedReturnValue([v38 zoneName]);
      v43 = sub_1000AA6AC(@"ckksincoming", v42);
      v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);

      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        v45 = -[CKKSIncomingQueueOperation successfulItemsProcessed](self, "successfulItemsProcessed");
        v46 = -[CKKSIncomingQueueOperation errorItemsProcessed](self, "errorItemsProcessed");
        *(_DWORD *)buf = 134218240;
        v153 = v45;
        v154 = 2048;
        v155 = v46;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "Processed %lu items in incoming queue (%lu errors)",  buf,  0x16u);
      }
    }

    if (!-[CKKSIncomingQueueOperation fixMismatchedViewItems:](self, "fixMismatchedViewItems:", v38)) {
      break;
    }
    v140[0] = _NSConcreteStackBlock;
    v35 += v40 + v41;
    v140[1] = 3221225472LL;
    v140[2] = sub_100064C30;
    v140[3] = &unk_1002904C8;
    v140[4] = v38;
    v140[5] = self;
    [v133 dispatchSyncWithSQLTransaction:v140];
    if (v34 == (id)++v37)
    {
      __int16 v32 = obj;
      v34 = [obj countByEnumeratingWithState:&v143 objects:v156 count:16];
      v29 = v128;
      if (!v34) {
        goto LABEL_24;
      }
      goto LABEL_9;
    }
  }

  v57 = (void *)objc_claimAutoreleasedReturnValue([v38 zoneName]);
  v58 = sub_1000AA6AC(@"ckksincoming", v57);
  v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);

  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "Early-exiting from IncomingQueueOperation due to failure fixing mismatched items",  buf,  2u);
  }

  v56 = v128;
  +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v128,  1LL,  0LL);
LABEL_35:
  v60 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSResultOperation error](self, "error"));
  v61 = v130;
  +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v130,  0LL,  v60);
  v62 = obj;

  v63 = obj;
LABEL_72:
}

  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472LL;
  v33[2] = sub_1000D225C;
  v33[3] = &unk_100285AA8;
  v34 = a2;
  v33[4] = a1;
  v33[5] = cf;
  CFSetApplyFunction(Mutable, (CFSetApplierFunction)sub_1000CF5B8, v33);
  Count = CFSetGetCount(Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return Count != 0;
}

    if (v22 || v23)
    {
      if (v22) {
        __int16 v28 = v13;
      }
      else {
        __int16 v28 = v20;
      }
      __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v28, "UUIDString"));
      if (((v27 != 0LL) & ~v15) != 0)
      {
        if (qword_1002DEB70 != -1) {
          dispatch_once(&qword_1002DEB70, &stru_10028EFA8);
        }
        if (byte_1002DEB68)
        {
          v57 = a3;
          v58 = a4;
          v59 = v20;
          v60 = v13;
          v62 = self;
          __int16 v32 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSViewManager accountsAdapter](self, "accountsAdapter"));
          int v33 = (void *)objc_claimAutoreleasedReturnValue( [v32 inflateAllTPSpecificUsers:@"com.apple.security.keychain" octagonContextID:@"defaultContext"]);

          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
          __int16 v30 = v33;
          v34 = [v30 countByEnumeratingWithState:&v63 objects:v67 count:16];
          if (!v34)
          {
LABEL_51:

LABEL_60:
            v54 = sub_1000AA6AC(@"handleKeychainEventDbConnection", 0LL);
            v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
            uint64_t v20 = v59;
            if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_ERROR,  "did not find an active account for the persona",  buf,  2u);
            }

            unsigned int v13 = v60;
            goto LABEL_63;
          }

          v35 = v34;
          v36 = *(void *)v64;
LABEL_45:
          v37 = 0LL;
          while (1)
          {
            if (*(void *)v64 != v36) {
              objc_enumerationMutation(v30);
            }
            v38 = *(void **)(*((void *)&v63 + 1) + 8 * v37);
            v39 = (void *)objc_claimAutoreleasedReturnValue([v38 personaUniqueString]);
            v40 = [v39 isEqualToString:v27];

            if ((v40 & 1) != 0) {
              break;
            }
            if (v35 == (id)++v37)
            {
              v35 = [v30 countByEnumeratingWithState:&v63 objects:v67 count:16];
              if (v35) {
                goto LABEL_45;
              }
              goto LABEL_51;
            }
          }

          v46 = v38;

          if (!v46) {
            goto LABEL_60;
          }
          v47 = sub_1000AA6AC(@"handleKeychainEventDbConnection", 0LL);
          v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
          uint64_t v20 = v59;
          if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)v69 = v46;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "using tpspecific user: %@", buf, 0xCu);
          }

          v49 = (void *)objc_claimAutoreleasedReturnValue(+[OTManager manager](&OBJC_CLASS___OTManager, "manager"));
          v50 = (void *)objc_claimAutoreleasedReturnValue([v46 cloudkitContainerName]);
          v51 = (void *)objc_claimAutoreleasedReturnValue([v46 octagonContextID]);
          v52 = objc_claimAutoreleasedReturnValue([v49 ckksAccountSyncForContainer:v50 contextID:v51 possibleAccount:v46]);

          __int16 v30 = (id)v52;
          unsigned int v13 = v60;
          self = v62;
          a3 = v57;
          a4 = v58;
          if (v30) {
            goto LABEL_39;
          }
        }

        goto LABEL_58;
      }
    }

    else
    {
      __int128 v27 = 0LL;
    }

    v29 = (void *)objc_claimAutoreleasedReturnValue(+[OTManager manager](&OBJC_CLASS___OTManager, "manager"));
    __int16 v30 = (id)objc_claimAutoreleasedReturnValue( [v29 ckksAccountSyncForContainer:@"com.apple.security.keychain" contextID:@"defaultContext" possibleAccount:0]);

    if (v30)
    {
LABEL_39:
      int v31 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSViewManager globalRateLimiter](self, "globalRateLimiter"));
      [v30 handleKeychainEventDbConnection:a3 source:a4 added:a5 deleted:a6 rateLimiter:v31];

LABEL_63:
LABEL_68:

      goto LABEL_69;
    }

  return v9;
}

    Count = 0LL;
    __int128 v24 = 0LL;
    goto LABEL_10;
  }

  __int128 v27 = CFArrayGetCount(Mutable) - (v24 + Count);
LABEL_15:
  v40[0] = kSecurityRTCFieldNumberOfTLKsFetched;
  int v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", Count));
  v41[0] = v31;
  v40[1] = kSecurityRTCFieldNumberOfPCSItemsFetched;
  __int16 v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v24));
  v41[1] = v32;
  v40[2] = kSecurityRTCFieldNumberOfBluetoothMigrationItemsFetched;
  int v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v27));
  v41[2] = v33;
  v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v41,  v40,  3LL));

  -[AAFAnalyticsEventSecurity addMetrics:](v20, "addMetrics:", v34);
  +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v20,  cf == 0LL);
  v13[2](v13, Mutable, cf);

  v35 = cf;
  if (cf)
  {
    cf = 0LL;
    CFRelease(v35);
  }
}

      if (*a1) {
        goto LABEL_32;
      }
LABEL_33:
      *a1 = v28;
      goto LABEL_14;
    }

    if (cf)
    {
      if (!a1)
      {
LABEL_32:
        CFRelease(v28);
        goto LABEL_14;
      }

      goto LABEL_31;
    }
  }

uint64_t LibCall_ACMContextDelete( void (*a1)(uint64_t, uint64_t, void, void *, uint64_t, void, void), uint64_t a2, void *a3, int a4)
{
  if (a1 && a3)
  {
    if (a4) {
      a1(a2, 2LL, 0LL, a3, 16LL, 0LL, 0LL);
    }
    goto LABEL_7;
  }

  if (a3)
  {
LABEL_7:
    acm_mem_free_info( "ACMHandleWithPayload",  a3,  0x14uLL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  172,  "LibCall_ACMContextDelete");
    acm_mem_free(a3, 0x14uLL);
    uint64_t v8 = 0LL;
    unsigned int v9 = 10;
    goto LABEL_8;
  }

  unsigned int v9 = 70;
  uint64_t v8 = 4294967293LL;
LABEL_8:
  return v8;
}

BOOL sub_100008E54(id a1, __OpaqueSecDbConnection *a2)
{
  uint64_t v2 = (os_log_s *)sub_10001267C("keychain");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Keychain initialized!", v4, 2u);
  }

  return 1;
}

void sub_100009248(_Unwind_Exception *a1)
{
}

void sub_100009420(_Unwind_Exception *a1)
{
}

void sub_100009578(_Unwind_Exception *exception_object)
{
}

void sub_100009784( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_1000097C8(uint64_t a1, void *a2, void *a3)
{
  id v15 = a2;
  id v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if ([v15 isEqualToString:@"allowed-runtime"]
      && (uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSNumber, v7), (objc_opt_isKindOfClass(v5, v8) & 1) != 0))
    {
      WeakRetained[4] = [v5 longValue];
    }

    else if ([v15 isEqualToString:@"reset-period"] {
           && (uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSNumber, v9), (objc_opt_isKindOfClass(v5, v10) & 1) != 0))
    }
    {
      WeakRetained[5] = [v5 longValue];
    }

    else if ([v15 isEqualToString:@"check-period"] {
           && (uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSNumber, v11), (objc_opt_isKindOfClass(v5, v12) & 1) != 0))
    }
    {
      WeakRetained[6] = [v5 longValue];
    }

    else if ([v15 isEqualToString:@"graceful-exit-time"] {
           && (uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSNumber, v13), (objc_opt_isKindOfClass(v5, v14) & 1) != 0))
    }
    {
      WeakRetained[8] = [v5 longValue];
    }

    else
    {
      [*(id *)(a1 + 32) addObject:v15];
    }
  }
}

void sub_100009930(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained runWatchdog];
    id WeakRetained = v2;
  }
}

void sub_100009960(id a1)
{
  unsigned int v1 = sub_10001267C("SecCritical");
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)io_object_t v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "SecWatchdog: watchdog has failed to exit securityd/secd gracefully - exiting ungracefully",  v3,  2u);
  }

  exit(1);
}

void sub_1000099C4(id a1)
{
  kern_return_t v1;
  uint64_t v2;
  mach_timebase_info info;
  info = (mach_timebase_info)0xAAAAAAAAAAAAAAAALL;
  unsigned int v1 = mach_timebase_info(&info);
  if (v1)
  {
    _os_assumes_log(v1);
    id v2 = 1LL;
  }

  else
  {
    id v2 = info.numer / info.denom;
  }

  qword_1002DE6E8 = v2;
}

void sub_100009AC0(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_1002DE6D0;
  qword_1002DE6D0 = (uint64_t)v1;
}

uint64_t start()
{
  zone = malloc_create_zone(0LL, 0);
  malloc_set_zone_name(zone, "ICU");
  LODWORD(cf) = 0;
  u_setMemoryFunctions(zone, &malloc_zone_malloc, &malloc_zone_realloc, &malloc_zone_free, &cf);
  if ((_DWORD)cf)
  {
    id v1 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v18) = (_DWORD)cf;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "Could not set up ICU malloc zone; err = %i",
        buf,
        8u);
    }
  }

  +[NSError _setFileNameLocalizationEnabled:](&OBJC_CLASS___NSError, "_setFileNameLocalizationEnabled:", 0LL);
  id v2 = (os_log_s *)sub_10001267C("keychain_handle");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "using normal handle", buf, 2u);
  }

  signal(15, (void (__cdecl *)(int))1);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(25LL, 0LL);
  qword_1002DE6F0 = (uint64_t)dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_signal,  0xFuLL,  0LL,  global_queue);
  dispatch_source_set_event_handler((dispatch_source_t)qword_1002DE6F0, &stru_100282A68);
  dispatch_activate((dispatch_object_t)qword_1002DE6F0);
  byte_1002DE9A0 = 1;
  byte_1002DEAF0 = 1;
  byte_1002DE958 = 1;
  if (qword_1002DE780 != -1) {
    dispatch_once(&qword_1002DE780, &stru_1002831F8);
  }
  gSecurityd = off_1002DCD28;
  qword_1002DCFD0 = (uint64_t)sub_100008E50;
  qword_1002DCFE0 = -[LocalSecuritydXPCServer initWithSecurityClient:fakeEntitlements:]( objc_alloc(&OBJC_CLASS___LocalSecuritydXPCServer),  "initWithSecurityClient:fakeEntitlements:",  SecSecurityClientGet(),  &__NSDictionary0__struct);
  qword_1002DCFD8 = (uint64_t)sub_10000D7C0;
  CFTypeRef cf = 0LL;
  if (!sub_100110ECC(0, 1, 0LL, (uint64_t)&cf, (uint64_t)&stru_1002829E0) || cf)
  {
    unsigned int v4 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      int v18 = (const char *)cf;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Couldn't bring up keychain: %@", buf, 0xCu);
    }

    CFTypeRef v5 = cf;
    if (cf)
    {
      CFTypeRef cf = 0LL;
      CFRelease(v5);
    }
  }

  id v6 = +[SecdWatchdog watchdog](&OBJC_CLASS___SecdWatchdog, "watchdog");
  mach_service = xpc_connection_create_mach_service("com.apple.securityd", 0LL, 1uLL);
  if (!mach_service)
  {
    id v15 = (os_log_s *)sub_10001267C("SecCritical");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      int v18 = "com.apple.securityd";
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "security failed to register xpc listener for %s, exiting",  buf,  0xCu);
    }

    abort();
  }

  uint64_t v8 = mach_service;
  xpc_connection_set_event_handler(mach_service, &stru_100282AA8);
  xpc_connection_resume(v8);
  xpc_activity_register("com.apple.securityd.daily", XPC_ACTIVITY_CHECK_IN, &stru_100282BA8);
  xpc_activity_register("com.apple.securityd.entropyhealth", XPC_ACTIVITY_CHECK_IN, &stru_100282BE8);
  xpc_activity_register("com.apple.securityd.prng", XPC_ACTIVITY_CHECK_IN, &stru_100282C28);
  xpc_activity_register("com.apple.securityd.kcsharing.resync", XPC_ACTIVITY_CHECK_IN, &stru_100282C68);
  if (qword_1002DE700 != -1) {
    dispatch_once(&qword_1002DE700, &stru_100282E58);
  }
  if (qword_1002DEEE8 != -1) {
    dispatch_once(&qword_1002DEEE8, &stru_100293D58);
  }
  if (qword_1002DE900 != -1) {
    dispatch_once(&qword_1002DE900, &stru_100284810);
  }
  if (qword_1002DEAF8 != -1) {
    dispatch_once(&qword_1002DEAF8, &stru_100286DB0);
  }
  if (qword_1002DE8C8 != -1) {
    dispatch_once(&qword_1002DE8C8, &stru_1002843E8);
  }
  uint64_t v9 = sub_10001267C("keychainitemupgrade");
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "performing KeychainItemUpgradeRequestServerInitialize",  buf,  2u);
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[KeychainItemUpgradeRequestServer server](&OBJC_CLASS___KeychainItemUpgradeRequestServer, "server"));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 controller]);
  [v12 triggerKeychainItemUpdateRPC:&stru_100290020];

  id v13 =  +[KCSharingStubXPCListenerDelegate sharedInstance]( &OBJC_CLASS___KCSharingStubXPCListenerDelegate,  "sharedInstance");
  CFRunLoopRun();
  return 0LL;
}

void sub_10000A008(id a1, _xpc_activity_s *a2)
{
  if (xpc_activity_get_state(a2) != 2) {
    return;
  }
  int v18 = 0LL;
  int v2 = open("/dev/random", 1);
  if (v2 == -1)
  {
    CFTypeRef v5 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *__error();
      *(_DWORD *)buf = 67109120;
      LODWORD(v20) = v7;
      id v6 = "failed to open /dev/random (%d)";
      goto LABEL_8;
    }
  }

  else
  {
    int v3 = sub_10000349C(-1, 13, 4u, 0LL, 0LL, &v18);
    if (!v3)
    {
      size_t __nbyte = 0LL;
      uint64_t v10 = (char *)sub_1000041F8((uint64_t *)v18, &__nbyte);
      size_t v11 = __nbyte;
      uint64_t v12 = ccec_cp_256();
      if (v11 > (((unint64_t)(cczp_bitlen(v12) + 7) >> 2) | 1))
      {
        id v13 = (os_log_s *)sub_10001267C("SecError");
        if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_10;
        }
        *(_DWORD *)buf = 134217984;
        size_t v20 = __nbyte;
        id v6 = "invalid pub key (%zu)";
        uint64_t v8 = v13;
        uint32_t v9 = 12;
        goto LABEL_9;
      }

      size_t v14 = __nbyte;
      if (!__nbyte) {
        goto LABEL_10;
      }
      while (1)
      {
        ssize_t v15 = write(v2, v10, v14);
        if (v15 == -1) {
          break;
        }
        v10 += v15;
        size_t v14 = __nbyte - v15;
        __nbyte -= v15;
        if (!__nbyte) {
          goto LABEL_10;
        }
      }

      CFTypeRef v5 = (os_log_s *)sub_10001267C("SecError");
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_10;
      }
      int v16 = *__error();
      *(_DWORD *)buf = 67109120;
      LODWORD(v20) = v16;
      id v6 = "failed to write /dev/random (%d)";
LABEL_8:
      uint64_t v8 = v5;
      uint32_t v9 = 8;
LABEL_9:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v6, buf, v9);
      goto LABEL_10;
    }

    int v4 = v3;
    CFTypeRef v5 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v20) = v4;
      id v6 = "failed to create refkey (%d)";
      goto LABEL_8;
    }
  }

void sub_10000A268(id a1, _xpc_activity_s *a2)
{
  if (xpc_activity_get_state(a2) == 2) {
    SecCoreAnalyticsSendKernEntropyAnalytics();
  }
}

void sub_10000A290(id a1, _xpc_activity_s *a2)
{
  if (xpc_activity_get_state(a2) == 2)
  {
    int v2 = objc_autoreleasePoolPush();
    int v3 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSViewManager manager](&OBJC_CLASS___CKKSViewManager, "manager"));
    [v3 xpc24HrNotification];

    objc_autoreleasePoolPop(v2);
    int v4 = objc_autoreleasePoolPush();
    CFTypeRef v5 = (void *)objc_claimAutoreleasedReturnValue(+[OTManager manager](&OBJC_CLASS___OTManager, "manager"));
    [v5 xpc24HrNotification];

    objc_autoreleasePoolPop(v4);
  }

void sub_10000A318(id a1, void *a2)
{
  if (xpc_get_type(a2) == (xpc_type_t)&_xpc_type_connection)
  {
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000LL;
    handler[2] = sub_10000A398;
    handler[3] = &unk_100282AC8;
    handler[4] = a2;
    xpc_connection_set_event_handler((xpc_connection_t)a2, handler);
    xpc_connection_resume((xpc_connection_t)a2);
  }

void sub_10000A398(uint64_t a1, xpc_object_t object)
{
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary) {
    sub_10000A3E4(*(_xpc_connection_s **)(a1 + 32), object);
  }
}

void sub_10000A3E4(_xpc_connection_s *a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  uint64_t v222 = 0LL;
  v223 = (CFTypeRef *)&v222;
  uint64_t v224 = 0x2000000000LL;
  uint64_t v225 = 0LL;
  uint64_t v221 = 0LL;
  __int128 v219 = 0u;
  __int128 v220 = 0u;
  __int128 v218 = 0u;
  DWORD1(v219) = xpc_connection_get_euid(a1);
  BYTE5(v220) = 0;
  if (type != (xpc_type_t)&_xpc_type_dictionary)
  {
    sub_1000194B4( 1LL,  @"com.apple.security.xpc",  0LL,  v223 + 3,  v5,  @"Messages expect to be xpc dictionary, got: %@",  object);
    id v6 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      CFTypeRef v7 = v223[3];
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = v218;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@: returning error: %@", buf, 0x16u);
    }

    xpc_object_t v8 = sub_10001C1DC((__CFError *)v223[3]);
    xpc_object_t reply_with_format = (xpc_object_t)xpc_create_reply_with_format(object, "{%string: %value}", "error", v8);
    CFDataRef v10 = 0LL;
LABEL_5:
    if (!reply_with_format) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  xpc_object_t reply_with_format = xpc_dictionary_create_reply(object);
  uint64_t uint64 = xpc_dictionary_get_uint64(object, "operation");
  *(_OWORD *)bytes = 0u;
  __int128 v217 = 0u;
  xpc_connection_get_audit_token(a1, bytes);
  CFDataRef v10 = CFDataCreate(kCFAllocatorDefault, bytes, 32LL);
  uid_t euid = xpc_connection_get_euid(a1);
  *(_OWORD *)buf = *(_OWORD *)bytes;
  *(_OWORD *)&buf[16] = v217;
  if ((sub_10000DA58((uint64_t)&v218, euid, buf) & 1) != 0)
  {
    ssize_t v15 = (os_log_s *)sub_10001267C("serverxpc");
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
    if (v16)
    {
      else {
        size_t v22 = off_100290950[uint64];
      }
      *(_DWORD *)buf = 138412802;
      *(void *)&uint8_t buf[4] = v218;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v22;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&buf[24] = uint64;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "XPC [%@] operation: %@ (%llu)",  buf,  0x20u);
    }

    switch(uint64)
    {
      case 0uLL:
        if (sub_10000CD60(0, (__SecTask *)v218, (__CFString **)v223 + 3))
        {
          uint64_t v23 = (const __CFDictionary *)sub_100157774(object, "query", (__CFString **)v223 + 3);
          if (v23)
          {
            CFMutableDictionaryRef Mutable = v23;
            if ((CFDictionaryGetValue(v23, kSecAttrDeriveSyncIDFromItemAttributes)
               || CFDictionaryGetValue(Mutable, kSecAttrPCSPlaintextServiceIdentifier)
               || CFDictionaryGetValue(Mutable, kSecAttrPCSPlaintextPublicKey)
               || CFDictionaryGetValue(Mutable, kSecAttrPCSPlaintextPublicIdentity))
              && !sub_10000CDF8( 0,  (__SecTask *)v218,  @"com.apple.private.ckks.plaintextfields",  (__CFString **)v223 + 3)
              || (CFDictionaryGetValue(Mutable, kSecDataInetExtraNotes)
               || CFDictionaryGetValue(Mutable, kSecDataInetExtraHistory)
               || CFDictionaryGetValue(Mutable, kSecDataInetExtraClientDefined0)
               || CFDictionaryGetValue(Mutable, kSecDataInetExtraClientDefined1)
               || CFDictionaryGetValue(Mutable, kSecDataInetExtraClientDefined2)
               || CFDictionaryGetValue(Mutable, kSecDataInetExtraClientDefined3))
              && !sub_10000CDF8( 0,  (__SecTask *)v218,  @"com.apple.private.keychain.inet_expansion_fields",  (__CFString **)v223 + 3))
            {
              *(void *)buf = 0LL;
              goto LABEL_371;
            }

            if (CFDictionaryGetValue(Mutable, kSecAttrSysBound))
            {
              BOOL v25 = sub_10000CDF8( 0,  (__SecTask *)v218,  @"com.apple.private.keychain.sysbound",  (__CFString **)v223 + 3);
              *(void *)buf = 0LL;
              if (!v25) {
                goto LABEL_371;
              }
            }

            else
            {
              *(void *)buf = 0LL;
            }

            if (sub_100113768(Mutable, (uint64_t)&v218, (uint64_t)buf, (__CFString **)v223 + 3))
            {
              __int16 v28 = *(const __CFString **)buf;
              if (*(void *)buf)
              {
                v29 = (__CFString **)(v223 + 3);
                __int16 v30 = reply_with_format;
                uint64_t v31 = 0LL;
                goto LABEL_56;
              }
            }

            goto LABEL_371;
          }
        }

        goto LABEL_424;
      case 1uLL:
        if (sub_10000CD60(0, (__SecTask *)v218, (__CFString **)v223 + 3))
        {
          __int16 v26 = (const __CFDictionary *)sub_100157774(object, "query", (__CFString **)v223 + 3);
          if (v26)
          {
            CFMutableDictionaryRef Mutable = v26;
            *(void *)buf = 0LL;
            if (sub_100112A08(v26, (uint64_t)&v218, (uint64_t *)buf, (__CFString **)v223 + 3))
            {
              __int16 v28 = *(const __CFString **)buf;
              if (*(void *)buf)
              {
                v29 = (__CFString **)(v223 + 3);
                __int16 v30 = reply_with_format;
                uint64_t v31 = 1LL;
LABEL_56:
                sub_100157064(v30, v28, v31, v29, v27);
                __int16 v32 = *(const __CFString **)buf;
                if (*(void *)buf)
                {
                  *(void *)buf = 0LL;
                  goto LABEL_241;
                }
              }
            }

            goto LABEL_371;
          }
        }

        goto LABEL_424;
      case 2uLL:
        if (sub_10000CD60(2u, (__SecTask *)v218, (__CFString **)v223 + 3))
        {
          int v33 = (const __CFDictionary *)sub_100157774(object, "query", (__CFString **)v223 + 3);
          if (v33)
          {
            v34 = v33;
            v35 = (const __CFDictionary *)sub_100157774(object, "attributesToUpdate", (__CFString **)v223 + 3);
            if (!v35) {
              goto LABEL_415;
            }
            v36 = v35;
            if ((!CFDictionaryGetValue(v34, kSecAttrDeriveSyncIDFromItemAttributes)
               && !CFDictionaryGetValue(v36, kSecAttrPCSPlaintextServiceIdentifier)
               && !CFDictionaryGetValue(v36, kSecAttrPCSPlaintextPublicKey)
               && !CFDictionaryGetValue(v36, kSecAttrPCSPlaintextPublicIdentity)
               || sub_10000CDF8( 2u,  (__SecTask *)v218,  @"com.apple.private.ckks.plaintextfields",  (__CFString **)v223 + 3))
              && (!CFDictionaryGetValue(v36, kSecDataInetExtraNotes)
               && !CFDictionaryGetValue(v36, kSecDataInetExtraHistory)
               && !CFDictionaryGetValue(v36, kSecDataInetExtraClientDefined0)
               && !CFDictionaryGetValue(v36, kSecDataInetExtraClientDefined1)
               && !CFDictionaryGetValue(v36, kSecDataInetExtraClientDefined2)
               && !CFDictionaryGetValue(v36, kSecDataInetExtraClientDefined3)
               || sub_10000CDF8( 2u,  (__SecTask *)v218,  @"com.apple.private.keychain.inet_expansion_fields",  (__CFString **)v223 + 3))
              && (!CFDictionaryGetValue(v34, kSecAttrSysBound)
               || sub_10000CDF8( 2u,  (__SecTask *)v218,  @"com.apple.private.keychain.sysbound",  (__CFString **)v223 + 3)))
            {
              BOOL v37 = sub_100114DB4(v34, v36, (uint64_t)&v218, (__CFString **)v223 + 3);
              xpc_dictionary_set_BOOL(reply_with_format, "status", v37);
            }

            goto LABEL_357;
          }
        }

        goto LABEL_424;
      case 3uLL:
        if (sub_10000CD60(0, (__SecTask *)v218, (__CFString **)v223 + 3))
        {
          v38 = (const __CFDictionary *)sub_100157774(object, "query", (__CFString **)v223 + 3);
          if (v38)
          {
            CFMutableDictionaryRef Mutable = v38;
            BOOL v39 = sub_1001155D0(v38, (uint64_t)&v218, (__CFString **)v223 + 3);
            goto LABEL_332;
          }
        }

        goto LABEL_424;
      case 7uLL:
        v40 = sub_10000D710((__SecTask *)v218);
        if (v40 && (v41 = v40, int v42 = CFEqual(v40, @"com.apple.purplebuddy"), CFRelease(v41), v42)
          || sub_10000CDF8( 7u,  (__SecTask *)v218,  @"com.apple.private.security.delete.all",  (__CFString **)v223 + 3))
        {
          char v43 = sub_100115DAC((uint64_t)(v223 + 3));
          goto LABEL_292;
        }

        BOOL v148 = 0;
        goto LABEL_293;
      case 9uLL:
        if (!sub_10000CDF8(9u, (__SecTask *)v218, @"restore-keychain", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        *(void *)buf = 0LL;
        CFTypeRef cf = 0LL;
        if (!sub_100157704(object, "keybag", buf, (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        if (sub_100157704(object, "password", &cf, (__CFString **)v223 + 3))
        {
          char v44 = xpc_dictionary_get_BOOL(object, "emcsbackup");
          v34 = *(const __CFDictionary **)buf;
          CFTypeRef v45 = cf;
          uint64_t v46 = sub_1001167E8((uint64_t)&v218, *(uint64_t *)buf, (uint64_t)cf, v44, (uint64_t *)v223 + 3);
          if (v46)
          {
            v47 = (const __CFData *)v46;
            int v48 = sub_100157330(object);
            if (v48 < 0)
            {
              sub_100157140(reply_with_format, "status", v47, (__CFString **)v223 + 3);
            }

            else
            {
              int v49 = v48;
              BOOL v50 = sub_10000CE8C(v48, v47);
              if (close(v49)) {
                BOOL v51 = 0;
              }
              else {
                BOOL v51 = v50;
              }
              if (!v51)
              {
                v52 = (__CFString **)(v223 + 3);
                v53 = __error();
                sub_1000194E0(-36, v52, @"Failed to write backup file: %d", *v53);
              }

              xpc_dictionary_set_BOOL(reply_with_format, "status", v51);
            }

            CFRelease(v47);
          }

          if (v45) {
            CFRelease(v45);
          }
        }

        else
        {
          v34 = *(const __CFDictionary **)buf;
        }

        goto LABEL_414;
      case 0xAuLL:
        if (!sub_10000CDF8(0xAu, (__SecTask *)v218, @"restore-keychain", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        *(void *)buf = 0LL;
        CFTypeRef cf = 0LL;
        int v54 = sub_100157330(object);
        int v55 = v54;
        if (v54 == -1) {
          CFDataRef v56 = sub_100157678(object, "backup", (__CFString **)v223 + 3);
        }
        else {
          CFDataRef v56 = sub_10000CEFC(v54, (const UInt8 **)buf, (CFIndex *)&cf);
        }
        CFDataRef v193 = v56;
        if (v56)
        {
          CFDataRef v194 = sub_100157678(object, "keybag", (__CFString **)v223 + 3);
          if (v194)
          {
            CFDataRef v195 = v194;
            CFDataRef theData = 0LL;
            if (sub_100157704(object, "password", &theData, (__CFString **)v223 + 3))
            {
              CFDataRef v196 = theData;
              char v197 = sub_100116DAC( (uint64_t)v193,  (uint64_t)&v218,  (uint64_t)v195,  (uint64_t)theData,  (__CFString **)v223 + 3);
              xpc_dictionary_set_BOOL(reply_with_format, "status", v197);
              if (v196) {
                CFRelease(v196);
              }
            }

            CFRelease(v195);
          }

          CFRelease(v193);
        }

        if (v55 == -1) {
          goto LABEL_402;
        }
        int v198 = v55;
        goto LABEL_401;
      case 0xBuLL:
        if (!sub_10000CDF8(0xBu, (__SecTask *)v218, @"restore-keychain", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        *(void *)buf = 0LL;
        if (!sub_100157808(object, buf, (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        CFDataRef v57 = sub_100157678(object, "keybag", (__CFString **)v223 + 3);
        if (!v57) {
          goto LABEL_132;
        }
        CFDataRef v58 = v57;
        CFTypeRef cf = 0LL;
        if (sub_100157704(object, "password", &cf, (__CFString **)v223 + 3))
        {
          CFTypeRef v59 = cf;
          v60 = (const __CFString *)sub_10011761C(*(const void **)buf, v58, cf, (__CFString **)v223 + 3);
          if (v60)
          {
            v62 = v60;
            sub_100157064(reply_with_format, v60, 0LL, (__CFString **)v223 + 3, v61);
            CFRelease(v62);
          }

          if (v59) {
            CFRelease(v59);
          }
        }

        CFDataRef v63 = v58;
        goto LABEL_131;
      case 0xCuLL:
        if (!sub_10000CDF8(0xCu, (__SecTask *)v218, @"restore-keychain", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        v64 = (const __CFDictionary *)sub_100157774(object, "backup", (__CFString **)v223 + 3);
        if (!v64) {
          goto LABEL_424;
        }
        v34 = v64;
        CFDataRef v65 = sub_100157678(object, "keybag", (__CFString **)v223 + 3);
        if (!v65) {
          goto LABEL_415;
        }
        CFDataRef v66 = v65;
        *(void *)buf = 0LL;
        if (sub_100157704(object, "password", buf, (__CFString **)v223 + 3))
        {
          v67 = *(const void **)buf;
          BOOL v68 = sub_100117E70(v34, v66, *(const void **)buf, (__CFString **)v223 + 3);
          xpc_dictionary_set_BOOL(reply_with_format, "status", v68);
          if (v67) {
            CFRelease(v67);
          }
        }

        v69 = v66;
        goto LABEL_358;
      case 0xDuLL:
        if (!sub_10000CDF8(0xDu, (__SecTask *)v218, @"restore-keychain", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        v70 = (const __CFString *)sub_1000FC19C(v223 + 3);
        if (!v70) {
          goto LABEL_424;
        }
        goto LABEL_161;
      case 0xEuLL:
        if (!sub_10000CDF8(0xEu, (__SecTask *)v218, @"restore-keychain", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        *(void *)buf = 0LL;
        BOOL v72 = sub_1001578FC(object, "cfstring", buf, (__CFString **)v223 + 3);
        CFMutableDictionaryRef Mutable = *(const __CFDictionary **)buf;
        if (!v72) {
          goto LABEL_370;
        }
        v73 = (const __CFString *)sub_1000FC270(*(uint64_t *)buf, v223 + 3);
        sub_1001571E8((uint64_t)reply_with_format, v73, (__CFString **)v223 + 3);
        if (!v73) {
          goto LABEL_370;
        }
        goto LABEL_368;
      case 0xFuLL:
        if (sub_10000CDF8(0xFu, (__SecTask *)v218, @"restore-keychain", (__CFString **)v223 + 3))
        {
          CFStringRef v74 = sub_100157870(object, "backup", (__CFString **)v223 + 3);
          if (v74)
          {
            CFStringRef v75 = v74;
            int v76 = sub_1000FBD6C((uint64_t)v74, v223 + 3);
            CFRelease(v75);
            xpc_dictionary_set_fd(reply_with_format, "status", v76);
            if (v76 != -1) {
              close(v76);
            }
          }

          else
          {
            xpc_dictionary_set_fd(reply_with_format, "status", -1);
          }
        }

        goto LABEL_424;
      case 0x10uLL:
        if (!sub_10000CDF8(0x10u, (__SecTask *)v218, @"restore-keychain", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        *(void *)buf = 0LL;
        if (!sub_100157704(object, "keybag", buf, (__CFString **)v223 + 3)) {
          goto LABEL_132;
        }
        CFTypeRef cf = 0LL;
        if (!sub_100157704(object, "data", &cf, (__CFString **)v223 + 3)) {
          goto LABEL_132;
        }
        CFStringRef v77 = sub_100157870(object, "backup", (__CFString **)v223 + 3);
        v78 = (const __CFData *)cf;
        if (v77)
        {
          CFStringRef v79 = v77;
          char v80 = sub_1000FBFF0((uint64_t)v77, *(uint64_t *)buf, (uint64_t)cf, v223 + 3);
          CFRelease(v79);
          xpc_dictionary_set_BOOL(reply_with_format, "status", v80);
        }

        if (!v78) {
          goto LABEL_132;
        }
        CFDataRef v63 = v78;
LABEL_131:
        CFRelease(v63);
LABEL_132:
        v81 = *(const void **)buf;
        if (!*(void *)buf) {
          goto LABEL_424;
        }
        goto LABEL_372;
      case 0x11uLL:
        if (!sub_10000CDF8(0x11u, (__SecTask *)v218, @"restore-keychain", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        CFStringRef v82 = sub_100157870(object, "backup", (__CFString **)v223 + 3);
        if (!v82) {
          goto LABEL_363;
        }
        CFStringRef v83 = v82;
        *(void *)buf = 0LL;
        if (sub_1001578FC(object, "digest", buf, (__CFString **)v223 + 3))
        {
          CFDataRef v84 = sub_100157678(object, "keybag", (__CFString **)v223 + 3);
          if (v84)
          {
            CFDataRef v85 = v84;
            CFDataRef v86 = sub_100157678(object, "password", (__CFString **)v223 + 3);
            if (v86)
            {
              CFDataRef v87 = v86;
              CFDataRef v88 = sub_100157678(object, "data", (__CFString **)v223 + 3);
              if (v88)
              {
                CFDataRef v89 = v88;
                char v90 = sub_1000FC420((int)v88, *(uint64_t *)buf, (uint64_t)v85, v87, (uint64_t)v88, v223 + 3);
                CFRelease(v89);
              }

              else
              {
                char v90 = 0;
              }

              CFRelease(v87);
            }

            else
            {
              char v90 = 0;
            }

            CFRelease(v85);
          }

          else
          {
            char v90 = 0;
          }

          if (*(void *)buf) {
            CFRelease(*(CFTypeRef *)buf);
          }
        }

        else
        {
          char v90 = 0;
        }

        goto LABEL_421;
      case 0x12uLL:
        if (!-[OTSOSActualAdapter sosEnabled]_0(v16, v17))
        {
          CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
          sub_100157064(reply_with_format, (const __CFString *)Mutable, 0LL, (__CFString **)v223 + 3, v190);
          goto LABEL_370;
        }

        v91 = (const __CFDictionary *)sub_100157774(object, "query", (__CFString **)v223 + 3);
        if (!v91) {
          goto LABEL_424;
        }
        CFMutableDictionaryRef Mutable = v91;
        v92 = (const __CFString *)sub_1001173B4((uint64_t)v91);
        sub_100157064(reply_with_format, v92, 0LL, (__CFString **)v223 + 3, v93);
        if (v92)
        {
LABEL_240:
          __int16 v32 = v92;
LABEL_241:
          CFRelease(v32);
        }

        goto LABEL_371;
      case 0x15uLL:
        *(void *)buf = 0LL;
        if (!sub_100157704(object, "publicPeerId", buf, (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        CFMutableDictionaryRef Mutable = *(const __CFDictionary **)buf;
        v94 = sub_10012CE44(*(const __CFData **)buf, (uint64_t)(v223 + 3));
        if (!v94) {
          goto LABEL_370;
        }
        v73 = (const __CFString *)v94;
        sub_100157140(reply_with_format, "status", v94, (__CFString **)v223 + 3);
        goto LABEL_368;
      case 0x16uLL:
        *(void *)buf = 0LL;
        CFDataRef theData = 0LL;
        CFTypeRef cf = 0LL;
        CFDataRef v213 = 0LL;
        BOOL value = 0;
        if (!sub_100157704(object, "otrsess", buf, (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        BOOL v95 = sub_100157704(object, "data", &cf, (__CFString **)v223 + 3);
        CFMutableDictionaryRef Mutable = *(const __CFDictionary **)buf;
        if (!v95) {
          goto LABEL_370;
        }
        v73 = (const __CFString *)cf;
        BOOL v96 = sub_10012D03C(*(uint64_t *)buf, (uint64_t)cf, &theData, &v213, &value);
        if (v96)
        {
          CFDataRef v97 = theData;
          sub_100157140(reply_with_format, "otrsess", theData, (__CFString **)v223 + 3);
          CFDataRef v98 = v213;
          sub_100157140(reply_with_format, "data", v213, (__CFString **)v223 + 3);
          xpc_dictionary_set_BOOL(reply_with_format, "otrrdy", value);
          if (v97)
          {
            CFDataRef theData = 0LL;
            CFRelease(v97);
          }

          if (v98)
          {
            CFDataRef v213 = 0LL;
            CFRelease(v98);
          }
        }

        v99 = reply_with_format;
        BOOL v100 = v96;
        goto LABEL_194;
      case 0x1CuLL:
        if (!sub_10000CDF8(0x1Cu, (__SecTask *)v218, @"keychain-sync-updates", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        unsigned int v101 = sub_1001CE48C((CFErrorRef *)v223 + 3);
        goto LABEL_229;
      case 0x1DuLL:
        char v102 = xpc_dictionary_get_BOOL(object, "force");
        char v43 = sub_100118470(v102, (uint64_t)&v218, (uint64_t)(v223 + 3));
        goto LABEL_292;
      case 0x1EuLL:
        sub_100157064(reply_with_format, (const __CFString *)kCFBooleanFalse, 0LL, (__CFString **)v223 + 3, v18);
        goto LABEL_424;
      case 0x1FuLL:
        v70 = (const __CFString *)sub_100120790();
        if (!v70) {
          goto LABEL_424;
        }
LABEL_161:
        CFMutableDictionaryRef Mutable = (const __CFDictionary *)v70;
        sub_100157064(reply_with_format, v70, 0LL, (__CFString **)v223 + 3, v71);
        goto LABEL_371;
      case 0x20uLL:
        v103 = (const __CFString *)sub_100157454(object, "query", (__CFString **)v223 + 3);
        if (!v103) {
          goto LABEL_299;
        }
        CFMutableDictionaryRef Mutable = (const __CFDictionary *)v103;
        sub_100120848(v103, (__CFString **)v223 + 3);
        goto LABEL_166;
      case 0x21uLL:
        v104 = (const __CFDictionary *)sub_100157454(object, "query", (__CFString **)v223 + 3);
        if (!v104) {
          goto LABEL_299;
        }
        CFMutableDictionaryRef Mutable = v104;
        sub_1001208E0((uint64_t)v104, (uint64_t)(v223 + 3));
LABEL_166:
        v105 = reply_with_format;
        BOOL v106 = 1;
        goto LABEL_334;
      case 0x22uLL:
        if (!sub_10000CDF8(0x22u, (__SecTask *)v218, @"keychain-sync-updates", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        char v43 = sub_1001CD600(v223 + 3);
        goto LABEL_292;
      case 0x23uLL:
      case 0x24uLL:
      case 0x25uLL:
      case 0x27uLL:
      case 0x28uLL:
      case 0x29uLL:
      case 0x2AuLL:
      case 0x2BuLL:
        rsize_t v19 = "error";
        size_t v20 = reply_with_format;
        int64_t v21 = -4LL;
        goto LABEL_25;
      case 0x2CuLL:
        if (!sub_10000CDF8(0x2Cu, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        v211[0] = _NSConcreteStackBlock;
        v211[1] = 0x40000000LL;
        v211[2] = sub_10000CFA4;
        v211[3] = &unk_100282AF0;
        v211[4] = &v222;
        v211[5] = reply_with_format;
        v107 = v211;
        goto LABEL_175;
      case 0x2DuLL:
        if (sub_10000CDF8(0x2Du, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3))
        {
          v210[0] = _NSConcreteStackBlock;
          v210[1] = 0x40000000LL;
          v210[2] = sub_10000D098;
          v210[3] = &unk_100282B18;
          v210[4] = &v222;
          v210[5] = reply_with_format;
          sub_10000D0DC(object, (uint64_t)v210);
        }

        goto LABEL_424;
      case 0x2EuLL:
        if (!sub_10000CDF8(0x2Eu, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        v209[0] = _NSConcreteStackBlock;
        v209[1] = 0x40000000LL;
        v209[2] = sub_10000D168;
        v209[3] = &unk_100282B40;
        v209[4] = &v222;
        v209[5] = reply_with_format;
        v107 = v209;
LABEL_175:
        sub_10000CFEC(object, (uint64_t)v107);
        goto LABEL_424;
      case 0x2FuLL:
        if (!sub_10000CDF8(0x2Fu, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        char v43 = sub_1001C6BBC(v223 + 3);
        goto LABEL_292;
      case 0x30uLL:
        if (!sub_10000CDF8(0x30u, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        v108 = v223 + 3;
        v109 = &stru_1002932A8;
        goto LABEL_247;
      case 0x31uLL:
        if (!sub_10000CDF8(0x31u, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        int64_t v21 = (int)sub_1001C6EE4(v223 + 3);
        goto LABEL_230;
      case 0x32uLL:
        if (!sub_10000CDF8(0x32u, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        char v43 = sub_1001C6FE8(v223 + 3);
        goto LABEL_292;
      case 0x33uLL:
        if (!sub_10000CDF8(0x33u, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        char v43 = sub_1001C7C78(v223 + 3);
        goto LABEL_292;
      case 0x34uLL:
        if (!sub_10000CDF8(0x34u, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        char v43 = sub_1001C8430(v223 + 3);
        goto LABEL_292;
      case 0x35uLL:
        if (!sub_10000CDF8(0x35u, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        char v43 = sub_1001C8A20(v223 + 3);
        goto LABEL_292;
      case 0x36uLL:
        if (sub_10000CDF8(0x36u, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3))
        {
          v208[0] = _NSConcreteStackBlock;
          v208[1] = 0x40000000LL;
          v208[2] = sub_10000D1B0;
          v208[3] = &unk_100282B68;
          v208[4] = &v222;
          v208[5] = reply_with_format;
          sub_10000D1F4(object, (uint64_t)v208);
        }

        goto LABEL_424;
      case 0x37uLL:
        if (!sub_10000CDF8(0x37u, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        v73 = (const __CFString *)sub_10000D268(object, "enabledViews");
        CFMutableDictionaryRef Mutable = (const __CFDictionary *)sub_10000D268(object, "disabledViews");
        BOOL v100 = sub_1001C46A8((uint64_t)v73, (uint64_t)Mutable);
        v99 = reply_with_format;
LABEL_194:
        xpc_dictionary_set_BOOL(v99, "status", v100);
        if (!v73) {
          goto LABEL_370;
        }
        goto LABEL_368;
      case 0x38uLL:
        if (!sub_10000CDF8(0x38u, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        char v43 = sub_1001C8F54(v223 + 3);
        goto LABEL_292;
      case 0x39uLL:
        if (!sub_10000CDF8(0x39u, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        v110 = v223 + 3;
        xpc_object_t v111 = xpc_dictionary_get_value(object, "peer-infos");
        CFMutableDictionaryRef Mutable = (const __CFDictionary *)CreateArrayOfPeerInfoWithXPCObject(v111, v110);
        BOOL v112 = sub_1001C9204((uint64_t)Mutable, v223 + 3);
        xpc_dictionary_set_BOOL(reply_with_format, "status", v112);
        if (!Mutable) {
          goto LABEL_424;
        }
        goto LABEL_371;
      case 0x3AuLL:
        if (!sub_10000CDF8(0x3Au, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        sub_1001C94B0();
        goto LABEL_299;
      case 0x3BuLL:
        if (!sub_10000CDF8(0x3Bu, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        char v43 = sub_1001C9660(v223 + 3);
        goto LABEL_292;
      case 0x3DuLL:
        if (!sub_10000CDF8(0x3Du, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        xpc_object_t v113 = xpc_dictionary_get_value(object, "peer-infos");
        uint64_t ArrayOfPeerInfoWithXPCObject = CreateArrayOfPeerInfoWithXPCObject(v113, v223 + 3);
        if (!ArrayOfPeerInfoWithXPCObject) {
          goto LABEL_347;
        }
        CFMutableDictionaryRef Mutable = (const __CFDictionary *)ArrayOfPeerInfoWithXPCObject;
        BOOL v39 = sub_1001CBA8C(ArrayOfPeerInfoWithXPCObject, v223 + 3);
        goto LABEL_332;
      case 0x3EuLL:
        if (!sub_10000CDF8(0x3Eu, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        xpc_object_t v115 = xpc_dictionary_get_value(object, "peer-infos");
        uint64_t v116 = CreateArrayOfPeerInfoWithXPCObject(v115, v223 + 3);
        if (!v116) {
          goto LABEL_347;
        }
        CFMutableDictionaryRef Mutable = (const __CFDictionary *)v116;
        BOOL v39 = sub_1001CBDE8(v116, v223 + 3);
        goto LABEL_332;
      case 0x3FuLL:
        if (!sub_10000CDF8(0x3Fu, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        v117 = (const void *)sub_1001C9BF8(v223 + 3);
        goto LABEL_235;
      case 0x40uLL:
        if (!sub_10000CDF8(0x40u, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        v117 = (const void *)sub_1001CA0CC(v223 + 3);
        goto LABEL_235;
      case 0x41uLL:
        if (!sub_10000CDF8(0x41u, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        char v43 = sub_1001CA498(v223 + 3);
        goto LABEL_292;
      case 0x42uLL:
        if (!sub_10000CDF8(0x42u, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        v117 = (const void *)sub_1001CA7E0(v223 + 3);
        goto LABEL_235;
      case 0x43uLL:
        if (!sub_10000CDF8(0x43u, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        v117 = (const void *)sub_1001CC148(v223 + 3);
        goto LABEL_235;
      case 0x44uLL:
        if (!sub_10000CDF8(0x44u, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        v117 = (const void *)sub_1001CC254(v223 + 3);
        goto LABEL_235;
      case 0x45uLL:
        if (sub_10000CDF8(0x45u, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3))
        {
          v118 = (const void *)sub_1001C9F40(v223 + 3);
          sub_10000D3C0(reply_with_format, v118);
        }

        goto LABEL_424;
      case 0x46uLL:
        if (!sub_10000CDF8(0x46u, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        unsigned int v101 = sub_1001CD440(v223 + 3);
        goto LABEL_229;
      case 0x47uLL:
        if (!sub_10000CDF8(0x47u, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        int int64 = xpc_dictionary_get_int64(object, "reason");
        *(void *)buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = sub_1001CD5A8;
        *(void *)&buf[24] = &unk_100293498;
        int v227 = int64;
        unsigned int v101 = sub_1001C44A8(v223 + 3, buf);
LABEL_229:
        int64_t v21 = v101;
LABEL_230:
        rsize_t v19 = "status";
        size_t v20 = reply_with_format;
LABEL_25:
        xpc_dictionary_set_int64(v20, v19, v21);
        goto LABEL_424;
      case 0x48uLL:
        if (!sub_10000CDF8(0x48u, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        v117 = (const void *)sub_1001CA938(v223 + 3);
        goto LABEL_235;
      case 0x49uLL:
        if (!sub_10000CDF8(0x49u, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        v117 = (const void *)sub_1001CAA44(v223 + 3);
LABEL_235:
        sub_10000D35C(reply_with_format, v117, (uint64_t)(v223 + 3));
        goto LABEL_424;
      case 0x4AuLL:
        if (!sub_10000CDF8(0x4Au, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        v120 = (const __CFString *)sub_1001CADD8(v223 + 3);
        if (!v120) {
          goto LABEL_424;
        }
        CFMutableDictionaryRef Mutable = (const __CFDictionary *)v120;
        v124 = sub_100019F48(v120, v223 + 3, v121, v122, v123);
        if (!v124) {
          goto LABEL_371;
        }
        v92 = (const __CFString *)v124;
        BytePtr = CFDataGetBytePtr(v124);
        size_t Length = CFDataGetLength((CFDataRef)v92);
        xpc_dictionary_set_data(reply_with_format, "status", BytePtr, Length);
        goto LABEL_240;
      case 0x4BuLL:
        if (!sub_10000CDF8(0x4Bu, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        uint64_t v127 = sub_1001CC6B8(v223 + 3);
        if (!v127) {
          goto LABEL_424;
        }
        goto LABEL_260;
      case 0x4CuLL:
        if (!sub_10000CDF8(0x4Cu, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        v108 = v223 + 3;
        v109 = &stru_100293318;
LABEL_247:
        char v43 = sub_1001C44A8(v108, v109);
        goto LABEL_292;
      case 0x4DuLL:
        if (!sub_10000CDF8(0x4Du, (__SecTask *)v218, @"restore-keychain", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        CFDataRef v128 = sub_100157678(object, "newPublicBackupKey", (__CFString **)v223 + 3);
        if (!v128) {
          goto LABEL_424;
        }
        CFMutableDictionaryRef Mutable = v128;
        uint64_t v129 = sub_1001CCA10((uint64_t)v128, v223 + 3);
        if (!v129) {
          goto LABEL_371;
        }
        v130 = (const void *)v129;
        v92 = (const __CFString *)SOSPeerInfoCopyEncodedData(v129, kCFAllocatorDefault, v223 + 3);
        CFRelease(v130);
        if (!v92) {
          goto LABEL_371;
        }
        v131 = (void *)_CFXPCCreateXPCObjectFromCFObject(v92);
        xpc_dictionary_set_value(reply_with_format, "status", v131);
        xpc_release(v131);
        goto LABEL_240;
      case 0x4EuLL:
        if (!sub_10000CDF8(0x4Eu, (__SecTask *)v218, @"restore-keychain", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        v34 = sub_100157678(object, "keybag", (__CFString **)v223 + 3);
        char v132 = xpc_dictionary_get_BOOL(object, "includeV0");
        if (!v34) {
          goto LABEL_347;
        }
        BOOL v133 = sub_1001CCEFC((uint64_t)v34, v132, v223 + 3);
        goto LABEL_270;
      case 0x4FuLL:
        if (!sub_10000CDF8(0x4Fu, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        char v43 = sub_1001CAE78(v223 + 3);
        goto LABEL_292;
      case 0x51uLL:
        if (!sub_10000CDF8( 0x51u,  (__SecTask *)v218,  @"com.apple.private.keychain.circle.join",  (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        uint64_t v127 = sub_1001CEE70(v223 + 3);
        if (!v127) {
          goto LABEL_424;
        }
LABEL_260:
        v134 = (const void *)v127;
        CFMutableDictionaryRef Mutable = (const __CFDictionary *)SOSPeerInfoCopyEncodedData(v127, kCFAllocatorDefault, v223 + 3);
        CFRelease(v134);
        if (!Mutable) {
          goto LABEL_424;
        }
        goto LABEL_288;
      case 0x52uLL:
        if (!sub_10000CDF8( 0x52u,  (__SecTask *)v218,  @"com.apple.private.keychain.circle.join",  (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        CFDataRef v135 = sub_10000D41C(object, (uint64_t)(v223 + 3));
        if (!v135) {
          goto LABEL_424;
        }
        CFMutableDictionaryRef Mutable = v135;
        uint64_t v136 = SOSPeerInfoCreateFromData(kCFAllocatorDefault, v223 + 3, v135);
        if (!v136) {
          goto LABEL_371;
        }
        v92 = (const __CFString *)v136;
        uint64_t v137 = sub_1001CF234(v136, v223 + 3);
        if (v137)
        {
          v138 = (const void *)v137;
          v139 = (void *)_CFXPCCreateXPCObjectFromCFObject(v137);
          xpc_dictionary_set_value(reply_with_format, "status", v139);
          xpc_release(v139);
          CFRelease(v138);
        }

        goto LABEL_240;
      case 0x53uLL:
        if (!sub_10000CDF8( 0x53u,  (__SecTask *)v218,  @"com.apple.private.keychain.circle.join",  (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        v34 = sub_10000D41C(object, (uint64_t)(v223 + 3));
        int v140 = xpc_dictionary_get_uint64(object, "version");
        if (!v34) {
          goto LABEL_424;
        }
        BOOL v133 = sub_1001D057C((uint64_t)v34, v140, v223 + 3);
LABEL_270:
        xpc_dictionary_set_BOOL(reply_with_format, "status", v133);
        goto LABEL_415;
      case 0x54uLL:
        if (!sub_10000CDF8(0x54u, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        char v43 = sub_1001CF1B0(v223 + 3);
        goto LABEL_292;
      case 0x55uLL:
        if (!sub_10000CDF8(0x55u, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        char v43 = sub_1001C7B38(v223 + 3);
        goto LABEL_292;
      case 0x57uLL:
        if (!sub_10000CDF8(0x57u, (__SecTask *)v218, @"restore-keychain", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        CFDataRef v141 = sub_100157678(object, "RecoveryPublicKey", (__CFString **)v223 + 3);
        if (!v141) {
          goto LABEL_424;
        }
        CFMutableDictionaryRef Mutable = v141;
        buf[0] = 0;
        CFDataRef v142 = CFDataCreate(kCFAllocatorDefault, buf, 1LL);
        if (CFEqual(Mutable, v142))
        {
          CFRelease(Mutable);
          CFMutableDictionaryRef Mutable = 0LL;
        }

        if (v142) {
          CFRelease(v142);
        }
        char v143 = sub_1001D0F7C((uint64_t)Mutable, v223 + 3);
        xpc_dictionary_set_BOOL(reply_with_format, "status", v143);
        goto LABEL_370;
      case 0x58uLL:
        if (!sub_10000CDF8(0x58u, (__SecTask *)v218, @"restore-keychain", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        uint64_t v144 = SOSCCCopyRecoveryPublicKey(v223 + 3);
        if (!v144) {
          goto LABEL_424;
        }
        goto LABEL_287;
      case 0x59uLL:
        if (!sub_10000CDF8( 0x59u,  (__SecTask *)v218,  @"com.apple.private.keychain.circle.join",  (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        uint64_t v145 = xpc_dictionary_get_uint64(object, "flags");
        uint64_t v144 = sub_1001CF58C(v145, v223 + 3);
        if (!v144) {
          goto LABEL_424;
        }
LABEL_287:
        CFMutableDictionaryRef Mutable = (const __CFDictionary *)v144;
LABEL_288:
        v146 = (void *)_CFXPCCreateXPCObjectFromCFObject(Mutable);
        xpc_dictionary_set_value(reply_with_format, "status", v146);
        xpc_release(v146);
        goto LABEL_371;
      case 0x5AuLL:
        BOOL v147 = xpc_dictionary_get_BOOL(object, "sosCompatibilityMode");
        char v43 = sub_1001D221C(v147, v223 + 3);
        goto LABEL_292;
      case 0x5BuLL:
        char v43 = sub_1001D2B28(v223 + 3);
        goto LABEL_292;
      case 0x5CuLL:
        char v43 = sub_1001D2A60(v16, v17);
LABEL_292:
        BOOL v148 = v43;
LABEL_293:
        v149 = reply_with_format;
        goto LABEL_423;
      case 0x5DuLL:
        if (!sub_10000CDF8(0x5Du, (__SecTask *)v218, @"keychain-cloud-circle", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        sub_1001D3188(v223 + 3);
        goto LABEL_299;
      case 0x5EuLL:
        if (*((void *)&v219 + 1))
        {
          v150 = CFDataGetBytePtr(*((CFDataRef *)&v219 + 1));
          size_t v151 = CFDataGetLength(*((CFDataRef *)&v219 + 1));
          xpc_dictionary_set_data(reply_with_format, "musr", v150, v151);
        }

        xpc_dictionary_set_BOOL(reply_with_format, "system-keychain", v219);
        xpc_dictionary_set_BOOL(reply_with_format, "network-extension", SBYTE1(v219));
        goto LABEL_299;
      case 0x5FuLL:
        v152 = (__SecTask *)v218;
        v153 = (__CFString **)(v223 + 3);
        v154 = @"com.apple.private.syncbubble-keychain";
        unsigned int v155 = 95;
        goto LABEL_346;
      case 0x60uLL:
        v152 = (__SecTask *)v218;
        v153 = (__CFString **)(v223 + 3);
        v154 = @"com.apple.private.migrate-musr-system-keychain";
        unsigned int v155 = 96;
        goto LABEL_346;
      case 0x61uLL:
        v152 = (__SecTask *)v218;
        v153 = (__CFString **)(v223 + 3);
        v154 = @"com.apple.private.migrate-musr-system-keychain";
        unsigned int v155 = 97;
        goto LABEL_346;
      case 0x62uLL:
        if (!sub_10000CD60(0x62u, (__SecTask *)v218, (__CFString **)v223 + 3)
          || !sub_10000CDF8( 0x62u,  (__SecTask *)v218,  @"com.apple.private.keychain.allow-update-tokens",  (__CFString **)v223 + 3))
        {
          goto LABEL_424;
        }

        CFStringRef v156 = sub_100157870(object, "cfstring", (__CFString **)v223 + 3);
        v157 = (const __CFString *)sub_1001575E4(object, "cfarray", (__CFString **)v223 + 3);
        CFMutableDictionaryRef Mutable = (const __CFDictionary *)sub_1001575E4(object, "query", (__CFString **)v223 + 3);
        if (v156)
        {
          char v158 = sub_1001159F4((uint64_t)v156, (uint64_t)v157, (uint64_t)Mutable, (uint64_t)&v218, (__CFString **)v223 + 3);
          xpc_dictionary_set_BOOL(reply_with_format, "status", v158);
          CFRelease(v156);
        }

        if (!v157) {
          goto LABEL_370;
        }
        v159 = v157;
        goto LABEL_369;
      case 0x63uLL:
        v152 = (__SecTask *)v218;
        v153 = (__CFString **)(v223 + 3);
        v154 = @"com.apple.private.migrate-musr-system-keychain";
        unsigned int v155 = 99;
        goto LABEL_346;
      case 0x67uLL:
        if (sub_10000CDF8( 0x67u,  (__SecTask *)v218,  @"com.apple.private.uninstall.deletion",  (__CFString **)v223 + 3)
          && (v160 = (const __CFString *)sub_1001575E4(object, "accessGroups", (__CFString **)v223 + 3)) != 0LL)
        {
          CFStringRef v83 = v160;
          char v90 = sub_1001162EC(v160, (uint64_t)&v218, v223 + 3);
LABEL_421:
          CFRelease(v83);
        }

        else
        {
LABEL_363:
          char v90 = 0;
        }

        v149 = reply_with_format;
        BOOL v148 = v90;
        goto LABEL_423;
      case 0x68uLL:
        if (!sub_10000CDF8(0x68u, (__SecTask *)v218, @"restore-keychain", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        *(void *)buf = 0LL;
        CFTypeRef cf = 0LL;
        int v161 = sub_100157330(object);
        if (v161 == -1) {
          goto LABEL_424;
        }
        int v162 = v161;
        v163 = sub_10000CEFC(v161, (const UInt8 **)buf, (CFIndex *)&cf);
        if (v163)
        {
          v164 = v163;
          v34 = (const __CFDictionary *)sub_1001172D8(v163, (CFErrorRef *)v223 + 3);
          if (v34) {
            sub_1001571E8((uint64_t)reply_with_format, (const __CFString *)v34, (__CFString **)v223 + 3);
          }
          CFRelease(v164);
          close(v162);
          if (*(void *)buf) {
            munmap(*(void **)buf, (size_t)cf);
          }
LABEL_414:
          if (v34)
          {
LABEL_415:
            v81 = v34;
            goto LABEL_372;
          }
        }

        else
        {
          int v198 = v162;
LABEL_401:
          close(v198);
LABEL_402:
          if (*(void *)buf) {
            munmap(*(void **)buf, (size_t)cf);
          }
        }

        goto LABEL_424;
      case 0x69uLL:
        v165 = (const __CFDictionary *)sub_1001575E4(object, "cfarray", (__CFString **)v223 + 3);
        if (!v165) {
          goto LABEL_424;
        }
        CFMutableDictionaryRef Mutable = v165;
        CFBooleanRef v166 = (CFBooleanRef)sub_1001D0B10((uint64_t)v165, v223 + 3);
        if (!v166) {
          goto LABEL_371;
        }
        BOOL v106 = v166 != kCFBooleanFalse;
        goto LABEL_333;
      case 0x6AuLL:
        if (!sub_10000CDF8(0x6Au, (__SecTask *)v218, @"keychain-sync-updates", (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        v73 = (const __CFString *)sub_100157384(object, "cfset", (__CFString **)v223 + 3);
        v167 = (const __CFDictionary *)sub_100157384(object, "cfset2", (__CFString **)v223 + 3);
        CFMutableDictionaryRef Mutable = v167;
        if (v73 && v167)
        {
          v168 = (const __CFString *)sub_1001CD8DC((uint64_t)v73, (uint64_t)v167, (uint64_t)(v223 + 3));
          if (v168)
          {
            v170 = v168;
            sub_100157064(reply_with_format, v168, 0LL, (__CFString **)v223 + 3, v169);
            CFRelease(v170);
          }
        }

        else if (!v73)
        {
          goto LABEL_370;
        }

LABEL_368:
        v159 = v73;
LABEL_369:
        CFRelease(v159);
LABEL_370:
        if (!Mutable) {
          goto LABEL_424;
        }
LABEL_371:
        v81 = Mutable;
        goto LABEL_372;
      case 0x6BuLL:
        uint64_t v171 = sub_10000D498(object, v223 + 3);
        if (!v171) {
          goto LABEL_424;
        }
        CFMutableDictionaryRef Mutable = (const __CFDictionary *)v171;
        BOOL v39 = sub_1001D1BEC(v171, v223 + 3);
        goto LABEL_332;
      case 0x6CuLL:
        uint64_t v172 = sub_10000D498(object, v223 + 3);
        if (!v172) {
          goto LABEL_424;
        }
        CFMutableDictionaryRef Mutable = (const __CFDictionary *)v172;
        BOOL v39 = sub_1001D1F38(v172, v223 + 3);
LABEL_332:
        BOOL v106 = v39;
LABEL_333:
        v105 = reply_with_format;
LABEL_334:
        xpc_dictionary_set_BOOL(v105, "status", v106);
        goto LABEL_371;
      case 0x6DuLL:
        if (!sub_10000CDF8( 0x6Du,  (__SecTask *)v218,  @"com.apple.private.keychain.certificates",  (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        CFDataRef v173 = sub_100157678(object, "normIssuer", (__CFString **)v223 + 3);
        v174 = sub_1001575E4(object, "accessGroups", (__CFString **)v223 + 3);
        v176 = v174;
        if (v173 && v174)
        {
          uint64_t v177 = sub_100118E98(v173, (uint64_t)v174, (__CFString **)v223 + 3);
        }

        else
        {
          uint64_t v177 = 0LL;
          v192 = 0LL;
          if (!v173) {
            goto LABEL_375;
          }
        }

        CFRelease(v173);
        v192 = (const __CFString *)v177;
LABEL_375:
        if (v176) {
          CFRelease(v176);
        }
        if (v192)
        {
          sub_100157064(reply_with_format, v192, 0LL, (__CFString **)v223 + 3, v175);
          v81 = v192;
LABEL_372:
          CFRelease(v81);
        }

        goto LABEL_424;
      case 0x6EuLL:
        if (!sub_10000CDF8( 0x6Eu,  (__SecTask *)v218,  @"com.apple.private.keychain.certificates",  (__CFString **)v223 + 3))
        {
          BOOL v191 = 0;
          goto LABEL_385;
        }

        CFDataRef v178 = sub_100157678(object, "normIssuer", (__CFString **)v223 + 3);
        CFDataRef v179 = sub_100157678(object, "serialNum", (__CFString **)v223 + 3);
        v180 = sub_1001575E4(object, "accessGroups", (__CFString **)v223 + 3);
        v181 = v180;
        if (v178 && v179 && v180)
        {
          BOOL v182 = sub_100118FDC(v178, v179, (uint64_t)v180, (__CFString **)v223 + 3);
        }

        else
        {
          BOOL v182 = 0;
          BOOL v191 = 0;
          if (!v178) {
            goto LABEL_381;
          }
        }

        CFRelease(v178);
        BOOL v191 = v182;
LABEL_381:
        if (v179) {
          CFRelease(v179);
        }
        if (v181) {
          CFRelease(v181);
        }
LABEL_385:
        v149 = reply_with_format;
        BOOL v148 = v191;
        goto LABEL_423;
      case 0x6FuLL:
        v152 = (__SecTask *)v218;
        v153 = (__CFString **)(v223 + 3);
        v154 = @"com.apple.private.keychain.backuptableops";
        unsigned int v155 = 111;
        goto LABEL_346;
      case 0x70uLL:
        v152 = (__SecTask *)v218;
        v153 = (__CFString **)(v223 + 3);
        v154 = @"com.apple.private.keychain.backuptableops";
        unsigned int v155 = 112;
LABEL_346:
        if (sub_10000CDF8(v155, v152, v154, v153)) {
          goto LABEL_347;
        }
        goto LABEL_424;
      case 0x72uLL:
        if (!sub_10000CDF8( 0x72u,  (__SecTask *)v218,  @"com.apple.private.keychain.keychaincontrol",  (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        v183 = (void *)sub_10005ED04();
        if (v183)
        {
          v184 = v183;
          xpc_dictionary_set_value(reply_with_format, "endpoint", v183);
          xpc_dictionary_set_BOOL(reply_with_format, "status", 1);
          xpc_release(v184);
        }

        else
        {
LABEL_347:
          v149 = reply_with_format;
          BOOL v148 = 0;
LABEL_423:
          xpc_dictionary_set_BOOL(v149, "status", v148);
        }

LABEL_424:
        CFTypeRef v199 = v223[3];
        if (!v199)
        {
          xpc_object_t v8 = 0LL;
          goto LABEL_5;
        }

        v200 = (__CFError *)v223[3];
        if (!v200 || CFErrorGetCode((CFErrorRef)v223[3]) != 2) {
          goto LABEL_434;
        }
        CFErrorDomain Domain = CFErrorGetDomain(v200);
        if (Domain && kSOSErrorDomain)
        {
          if (CFEqual(Domain, kSOSErrorDomain)) {
            goto LABEL_446;
          }
        }

        else if (Domain == (CFErrorDomain)kSOSErrorDomain)
        {
          goto LABEL_446;
        }

LABEL_434:
        if (SecErrorGetOSStatus(v223[3]) == -25330)
        {
          v202 = (os_log_s *)sub_10001267C("SecWarning");
          if (!os_log_type_enabled(v202, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_446;
          }
          else {
            v203 = off_100290950[uint64];
          }
          CFTypeRef v205 = v223[3];
          *(_DWORD *)buf = 138412802;
          *(void *)&uint8_t buf[4] = v218;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v203;
          *(_WORD *)&buf[22] = 2112;
          *(void *)&buf[24] = v205;
          v206 = "Authentication is needed %@ %@ %@";
        }

        else
        {
          v202 = (os_log_s *)sub_10001267C("SecError");
          if (!os_log_type_enabled(v202, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_446;
          }
          else {
            v204 = off_100290950[uint64];
          }
          CFTypeRef v207 = v223[3];
          *(_DWORD *)buf = 138412802;
          *(void *)&uint8_t buf[4] = v218;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v204;
          *(_WORD *)&buf[22] = 2112;
          *(void *)&buf[24] = v207;
          v206 = "%@ %@ %@";
        }

        _os_log_impl((void *)&_mh_execute_header, v202, OS_LOG_TYPE_DEFAULT, v206, buf, 0x20u);
LABEL_446:
        xpc_object_t v8 = sub_10001C1DC((__CFError *)v223[3]);
        if (!reply_with_format) {
          goto LABEL_5;
        }
        xpc_dictionary_set_value(reply_with_format, "error", v8);
        break;
      case 0x83uLL:
        if (!sub_10000CD60(0x83u, (__SecTask *)v218, (__CFString **)v223 + 3)) {
          goto LABEL_424;
        }
        if (!BYTE1(v221)) {
          goto LABEL_424;
        }
        v185 = (const __CFDictionary *)sub_100157774(object, "query", (__CFString **)v223 + 3);
        if (!v185) {
          goto LABEL_424;
        }
        v34 = v185;
        CFStringRef v186 = sub_100157870(object, "sharingGroup", (__CFString **)v223 + 3);
        if (v186)
        {
          v36 = (const __CFDictionary *)v186;
          v187 = (const __CFString *)sub_100113D5C(v34, v186, (uint64_t)&v218, (__CFString **)v223 + 3);
          if (v187)
          {
            v189 = v187;
            sub_100157064(reply_with_format, v187, 0LL, (__CFString **)v223 + 3, v188);
            CFRelease(v189);
          }

LABEL_357:
          v69 = v36;
LABEL_358:
          CFRelease(v69);
        }

        goto LABEL_415;
      case 0x84uLL:
        if (!sub_10000CD60(0x84u, (__SecTask *)v218, (__CFString **)v223 + 3)
          || !sub_10000CDF8( 0x84u,  (__SecTask *)v218,  @"com.apple.private.keychain.allow-delete-on-sign-out",  (__CFString **)v223 + 3)
          || !sub_100114858((uint64_t)&v218, (uint64_t)(v223 + 3)))
        {
          goto LABEL_424;
        }

LABEL_299:
        v149 = reply_with_format;
        BOOL v148 = 1;
        goto LABEL_423;
      default:
        goto LABEL_424;
    }

BOOL sub_10000CD60(unsigned int a1, __SecTask *a2, __CFString **a3)
{
  BOOL v6 = sub_10000D754(a2, @"com.apple.private.keychain.deny");
  if (v6)
  {
    if (a1 > 0x87) {
      CFTypeRef v7 = @"Unknown xpc operation";
    }
    else {
      CFTypeRef v7 = off_100290950[a1];
    }
    sub_1000194E0(-25291, a3, @"%@: %@ has entitlement %@", v7, a2, @"com.apple.private.keychain.deny");
  }

  return !v6;
}

BOOL sub_10000CDF8(unsigned int a1, __SecTask *a2, const __CFString *a3, __CFString **a4)
{
  BOOL v8 = sub_10000D754(a2, a3);
  if (!v8)
  {
    if (a1 > 0x87) {
      uint32_t v9 = @"Unknown xpc operation";
    }
    else {
      uint32_t v9 = off_100290950[a1];
    }
    sub_1000194E0(-34018, a4, @"%@: %@ lacks entitlement %@", v9, a2, a3);
  }

  return v8;
}

BOOL sub_10000CE8C(int a1, CFDataRef theData)
{
  size_t Length = CFDataGetLength(theData);
  BytePtr = CFDataGetBytePtr(theData);
  do
  {
    size_t v6 = Length;
    if (!Length) {
      break;
    }
    ssize_t v7 = write(a1, BytePtr, Length);
    Length -= v7;
    BytePtr += v7;
  }

  while (v7 > 0);
  return v6 == 0;
}

CFDataRef sub_10000CEFC(int a1, const UInt8 **a2, CFIndex *a3)
{
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v10.st_blksize = v6;
  *(timespec *)v10.st_qspare = v6;
  v10.st_birthtimespec = v6;
  *(timespec *)&v10.off_t st_size = v6;
  v10.st_mtimespec = v6;
  v10.st_ctimespec = v6;
  *(timespec *)&v10.st_uid = v6;
  v10.st_atimespec = v6;
  *(timespec *)&v10.st_dev = v6;
  if (fstat(a1, &v10) < 0) {
    return 0LL;
  }
  off_t st_size = v10.st_size;
  *a3 = v10.st_size;
  BOOL v8 = (const UInt8 *)mmap(0LL, st_size, 1, 1, a1, 0LL);
  *a2 = v8;
  if (v8 == (const UInt8 *)-1LL) {
    return 0LL;
  }
  else {
    return CFDataCreateWithBytesNoCopy(0LL, v8, *a3, kCFAllocatorNull);
  }
}

void sub_10000CFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(void **)(a1 + 40);
  char v5 = sub_1001C4FF8(a2, a3, a4, *(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  xpc_dictionary_set_BOOL(v4, "status", v5);
}

void sub_10000CFEC(void *a1, uint64_t a2)
{
  int v4 = sub_10000D52C(a1, "userlabel");
  char v5 = sub_10000D564(a1);
  timespec v6 = sub_10000D52C(a1, "dsid");
  if (v4 && v5)
  {
    (*(void (**)(uint64_t, const char *, const UInt8 *, const char *))(a2 + 16))(a2, v4, v5, v6);
  }

  else if (!v4)
  {
    goto LABEL_6;
  }

  CFRelease(v4);
LABEL_6:
  if (v5) {
    CFRelease(v5);
  }
  if (v6) {
    CFRelease(v6);
  }
}

void sub_10000D098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(void **)(a1 + 40);
  char v4 = sub_1001C6174(a2, a3, 0LL, (uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
  xpc_dictionary_set_BOOL(v3, "status", v4);
}

void sub_10000D0DC(void *a1, uint64_t a2)
{
  char v4 = sub_10000D52C(a1, "userlabel");
  char v5 = sub_10000D564(a1);
  timespec v6 = v5;
  if (v4) {
    BOOL v7 = v5 == 0LL;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    if (!v4)
    {
      if (!v5) {
        return;
      }
      goto LABEL_8;
    }
  }

  else
  {
    (*(void (**)(uint64_t, const char *, const UInt8 *))(a2 + 16))(a2, v4, v5);
  }

  CFRelease(v4);
  if (v6) {
LABEL_8:
  }
    CFRelease(v6);
}

void sub_10000D168(uint64_t a1, uint64_t a2, uint64_t a3, os_signpost_id_t a4)
{
  char v4 = *(void **)(a1 + 40);
  char v5 = sub_1001C6174(a2, a3, a4, (uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
  xpc_dictionary_set_BOOL(v4, "status", v5);
}

void sub_10000D1B0(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = *(void **)(a1 + 40);
  int64_t v4 = (int)sub_1001C4254(a2, a3, (CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
  xpc_dictionary_set_int64(v3, "status", v4);
}

void sub_10000D1F4(void *a1, uint64_t a2)
{
  int64_t v4 = sub_10000D52C(a1, "viewname");
  int64_t int64 = xpc_dictionary_get_int64(a1, "viewactioncode");
  if (v4)
  {
    (*(void (**)(uint64_t, const char *, int64_t))(a2 + 16))(a2, v4, int64);
    CFRelease(v4);
  }

void *sub_10000D268(void *a1, const char *a2)
{
  CFTypeRef v9 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(a1, a2);
  int v3 = value;
  if (!value) {
    return v3;
  }
  CFTypeRef cf = 0LL;
  if (xpc_get_type(value) != (xpc_type_t)&_xpc_type_data)
  {
    sub_1000194B4(1LL, @"com.apple.security.xpc", 0LL, &v9, v4, @"xpcSetDER not data, got %@", v3);
LABEL_6:
    int v3 = 0LL;
    goto LABEL_8;
  }

  bytes_ptr = (char *)xpc_data_get_bytes_ptr(v3);
  size_t length = xpc_data_get_length(v3);
  if ((char *)sub_10001B064(kCFAllocatorDefault, &cf, &v9, (uint64_t)bytes_ptr, (uint64_t)&bytes_ptr[length]) != &bytes_ptr[length])
  {
    sub_1000194E0(-26275, (__CFString **)&v9, @"trailing garbage at end of SecAccessControl data");
    if (cf) {
      CFRelease(cf);
    }
    goto LABEL_6;
  }

  int v3 = (void *)cf;
LABEL_8:
  CFTypeRef v7 = v9;
  if (v9)
  {
    CFTypeRef v9 = 0LL;
    CFRelease(v7);
  }

  return v3;
}

void sub_10000D35C(void *a1, const void *a2, uint64_t a3)
{
  if (a2)
  {
    XPCObjectWithArrayOfPeerInfo = (void *)CreateXPCObjectWithArrayOfPeerInfo(a2, a3);
    if (XPCObjectWithArrayOfPeerInfo)
    {
      timespec v6 = XPCObjectWithArrayOfPeerInfo;
      xpc_dictionary_set_value(a1, "status", XPCObjectWithArrayOfPeerInfo);
      xpc_release(v6);
    }

    CFRelease(a2);
  }

void sub_10000D3C0(void *a1, const void *a2)
{
  if (a2)
  {
    uint64_t v4 = (void *)_CFXPCCreateXPCObjectFromCFObject(a2);
    xpc_dictionary_set_value(a1, "status", v4);
    xpc_release(v4);
    CFRelease(a2);
  }

CFDataRef sub_10000D41C(void *a1, uint64_t a2)
{
  size_t length = 0LL;
  data = (const UInt8 *)xpc_dictionary_get_data(a1, "data", &length);
  if (!data)
  {
    char v5 = @"missing CFDataRef info";
LABEL_6:
    SOSCreateError(1034LL, v5, 0LL, a2);
    return 0LL;
  }

  CFDataRef result = CFDataCreate(0LL, data, length);
  if (!result)
  {
    char v5 = @"could not allocate CFDataRef info";
    goto LABEL_6;
  }

  return result;
}

uint64_t sub_10000D498(void *a1, CFTypeRef *a2)
{
  size_t length = 0LL;
  data = (char *)xpc_dictionary_get_data(a1, "peer-info", &length);
  char v5 = data;
  sub_100019570(data != 0LL, a2, @"No data for key %s", "peer-info");
  if (data) {
    return SOSPeerInfoCreateFromDER(kCFAllocatorDefault, a2, &v5, &data[length]);
  }
  else {
    return 0LL;
  }
}

const char *sub_10000D52C(void *a1, const char *a2)
{
  CFDataRef result = xpc_dictionary_get_string(a1, a2);
  if (result) {
    return (const char *)CFStringCreateWithCString(kCFAllocatorDefault, result, 0x8000100u);
  }
  return result;
}

const UInt8 *sub_10000D564(void *a1)
{
  size_t length = 0LL;
  CFDataRef result = (const UInt8 *)xpc_dictionary_get_data(a1, "password", &length);
  if (result) {
    return (const UInt8 *)CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, result, length, kCFAllocatorNull);
  }
  return result;
}

void sub_10000D5B8(id a1)
{
  id v1 = (os_log_s *)sub_10001267C("signal");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "SIGTERM, exiting when clean ✌️", v2, 2u);
  }

  xpc_transaction_exit_clean();
}

const void *sub_10000D620(__SecTask *a1, const __CFString *a2)
{
  CFTypeRef v2 = SecTaskCopyValueForEntitlement(a1, a2, 0LL);
  int v3 = v2;
  if (v2)
  {
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 != CFStringGetTypeID())
    {
      CFRelease(v3);
      return 0LL;
    }
  }

  return v3;
}

const void *sub_10000D670(__SecTask *a1, const __CFString *a2)
{
  CFTypeRef v2 = SecTaskCopyValueForEntitlement(a1, a2, 0LL);
  int v3 = v2;
  if (v2)
  {
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 != CFArrayGetTypeID())
    {
LABEL_8:
      CFRelease(v3);
      return 0LL;
    }

    CFIndex Count = CFArrayGetCount((CFArrayRef)v3);
    if (Count >= 1)
    {
      CFIndex v6 = Count;
      CFIndex v7 = 0LL;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v3, v7);
        CFTypeID v9 = CFGetTypeID(ValueAtIndex);
        if (v9 != CFStringGetTypeID()) {
          break;
        }
        if (v6 == ++v7) {
          return v3;
        }
      }

      goto LABEL_8;
    }
  }

  return v3;
}

const void *sub_10000D710(__SecTask *a1)
{
  CFDataRef result = sub_10000D620(a1, @"application-identifier");
  if (!result) {
    return sub_10000D620(a1, @"com.apple.application-identifier");
  }
  return result;
}

BOOL sub_10000D754(__SecTask *a1, const __CFString *a2)
{
  CFTypeRef v2 = SecTaskCopyValueForEntitlement(a1, a2, 0LL);
  if (!v2) {
    return 0LL;
  }
  int v3 = v2;
  CFTypeID TypeID = CFBooleanGetTypeID();
  BOOL v5 = TypeID == CFGetTypeID(v3) && CFBooleanGetValue((CFBooleanRef)v3) != 0;
  CFRelease(v3);
  return v5;
}

uint64_t sub_10000D7C0(uint64_t a1)
{
  if (a1)
  {
    CFTypeRef v2 = objc_autoreleasePoolPush();
    if (!*(_BYTE *)(a1 + 48))
    {
      int v3 = *(const void **)(a1 + 24);
      if (v3)
      {
        *(void *)(a1 + 24) = 0LL;
        CFRelease(v3);
      }
    }

    CFTypeID v4 = (void *)objc_claimAutoreleasedReturnValue(+[UMUserManager sharedManager](&OBJC_CLASS___UMUserManager, "sharedManager"));
    BOOL v5 = (void *)objc_claimAutoreleasedReturnValue([v4 currentPersona]);

    if (v5 && [v5 userPersonaType] == (id)6)
    {
      CFIndex v6 = sub_10001267C("serverxpc");
      CFIndex v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v5 userPersonaNickName]);
        *(_DWORD *)buf = 134218242;
        uint64_t v21 = a1;
        __int16 v22 = 2112;
        uint64_t v23 = v18;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "securityd client(%p): persona user %@",  buf,  0x16u);
      }

      BOOL v8 = sub_10001267C("serverxpc");
      CFTypeID v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        stat v10 = (void *)objc_claimAutoreleasedReturnValue([v5 userPersonaUniqueString]);
        *(_DWORD *)buf = 134218242;
        uint64_t v21 = a1;
        __int16 v22 = 2112;
        uint64_t v23 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "securityd client(%p): persona uuid %@",  buf,  0x16u);
      }

      id v11 = objc_claimAutoreleasedReturnValue( objc_msgSend( v5, "userPersonaUniqueString", 0xAAAAAAAAAAAAAAAALL, 0xAAAAAAAAAAAAAAAALL));
      int v12 = uuid_parse((const char *)[v11 UTF8String], (unsigned __int8 *)&v19);

      if (v12)
      {
        id v13 = sub_10001267C("serverxpc");
        size_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          ssize_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 userPersonaUniqueString]);
          *(_DWORD *)buf = 134218242;
          uint64_t v21 = a1;
          __int16 v22 = 2112;
          uint64_t v23 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "securityd client(%p):  uuid %@ didn't parse setting to null",  buf,  0x16u);
        }

        uint64_t v16 = 0LL;
        *(void *)(a1 + 24) = 0LL;
        goto LABEL_18;
      }

      *(void *)(a1 + 24) = CFDataCreate(0LL, (const UInt8 *)&v19, 16LL);
    }

    uint64_t v16 = 1LL;
LABEL_18:

    objc_autoreleasePoolPop(v2);
    return v16;
  }

  return 0LL;
}

uint64_t sub_10000DA58(uint64_t a1, int a2, _OWORD *a3)
{
  if (a1)
  {
    CFIndex v6 = objc_autoreleasePoolPush();
    *(_DWORD *)(a1 + 20) = a2;
    *(void *)(a1 + 24) = 0LL;
    sub_10000D7C0(a1);
    __int128 v7 = a3[1];
    *(_OWORD *)token.val = *a3;
    *(_OWORD *)&token.val[4] = v7;
    BOOL v8 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &token);
    *(void *)a1 = v8;
    BOOL v9 = sub_10000D754(v8, @"com.apple.developer.on-demand-install-capable");
    stat v10 = (const __CFArray *)sub_10000D670(v8, @"keychain-access-groups");
    id v11 = (const __CFArray *)sub_10000D670(v8, @"com.apple.security.application-groups");
    int v12 = sub_10000D710(v8);
    id v13 = (const __CFArray *)sub_10000D670(v8, @"com.apple.developer.associated-application-identifier");
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    if (v10)
    {
      v64.size_t length = CFArrayGetCount(v10);
      v64.location = 0LL;
      CFArrayAppendArray(Mutable, v10, v64);
    }

    if (v13)
    {
      v65.size_t length = CFArrayGetCount(v13);
      v65.location = 0LL;
      CFArrayAppendArray(Mutable, v13, v65);
    }

    if (v12) {
      CFArrayAppendValue(Mutable, v12);
    }
    if (v11)
    {
      if (v9)
      {
        ssize_t v15 = (os_log_s *)sub_10001267C("entitlements");
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          token.val[0] = 138412290;
          *(void *)&token.val[1] = @"com.apple.security.application-groups";
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Ignoring %@ because client is API-restricted",  (uint8_t *)&token,  0xCu);
        }
      }

      else
      {
        v66.size_t length = CFArrayGetCount(v11);
        v66.location = 0LL;
        CFArrayAppendArray(Mutable, v11, v66);
      }
    }

    v61.size_t length = CFArrayGetCount(Mutable);
    v61.location = 0LL;
    CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(Mutable, v61, kSecAttrAccessGroupToken);
    if (FirstIndexOfValue != -1)
    {
      CFIndex v18 = FirstIndexOfValue;
      if (!_os_feature_enabled_impl("CryptoTokenKit", "UseTokens"))
      {
        v34 = (os_log_s *)sub_10001267C("SecWarning");
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(token.val[0]) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Keychain access group com.apple.token ignored, feature not available",  (uint8_t *)&token,  2u);
        }

        CFArrayRemoveValueAtIndex(Mutable, v18);
        if (!v13)
        {
LABEL_19:
          if (v12) {
            CFRelease(v12);
          }
          if (v10) {
            CFRelease(v10);
          }
          if (v11) {
            CFRelease(v11);
          }
          *(void *)(a1 + 8) = Mutable;
          *(void *)(a1 + 40) = sub_10000D710(*(__SecTask **)a1);
          BOOL v19 = sub_10000D754(*(__SecTask **)a1, @"com.apple.developer.on-demand-install-capable");
          *(_BYTE *)(a1 + 37) = v19;
          if (v19)
          {
            size_t v20 = sub_10001267C("serverxpc");
            uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
            {
              LOWORD(token.val[0]) = 0;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "securityd client: app clip (API restricted)",  (uint8_t *)&token,  2u);
            }
          }

          *(_BYTE *)(a1 + 49) = sub_10000D754(*(__SecTask **)a1, @"com.apple.private.keychain.kcsharing.client");
          uint64_t v16 = 1LL;
          *(_BYTE *)(a1 + 16) = 1;
          *(_BYTE *)(a1 + 17) = sub_10000D754( *(__SecTask **)a1,  @"com.apple.developer.networking.networkextension");
          *(_BYTE *)(a1 + 18) = sub_10000D754(*(__SecTask **)a1, @"com.apple.networkextension.keychain");
          __int16 v22 = *(const __CFArray **)(a1 + 8);
          if (!v22) {
            goto LABEL_76;
          }
          v62.size_t length = CFArrayGetCount(v22);
          v62.location = 0LL;
          if (!CFArrayContainsValue(*(CFArrayRef *)(a1 + 8), v62, @"*")) {
            goto LABEL_76;
          }
          uint64_t v23 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
          BOOL v25 = *(__SecTask **)a1;
          if (*(void *)a1)
          {
            uint64_t CodeSignStatus = SecTaskGetCodeSignStatus(*(SecTaskRef *)a1);
            int v28 = CodeSignStatus;
            if ((CodeSignStatus & 0xC000001) == 0x4000001)
            {
LABEL_35:
              CFStringRef v29 = SecTaskCopySigningIdentifier(v25, 0LL);
              CFStringRef v30 = v29;
              if (!v23)
              {
                uint64_t v46 = sub_10001267C("serverxpc");
                v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
                if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
                {
                  LODWORD(buf) = 138412290;
                  *(void *)((char *)&buf + 4) = v30;
                  _os_log_debug_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEBUG,  "Client %@ is valid platform binary",  (uint8_t *)&buf,  0xCu);
                }

                if (v30) {
                  CFRelease(v30);
                }
                goto LABEL_75;
              }

              if (v29)
              {
                *(void *)&__int128 buf = 0LL;
                *((void *)&buf + 1) = &buf;
                uint64_t v59 = 0x2020000000LL;
                char v60 = 0;
                *(void *)token.val = _NSConcreteStackBlock;
                *(void *)&token.val[2] = 3221225472LL;
                *(void *)&token.val[4] = sub_10000E244;
                *(void *)&token.val[6] = &unk_100292A88;
                p___int128 buf = &buf;
                CFStringRef v57 = v29;
                uint64_t v31 = &token;
                v63.size_t length = CFArrayGetCount(v23);
                v63.location = 0LL;
                CFArrayApplyFunction(v23, v63, (CFArrayApplierFunction)sub_10000E284, v31);

                if (*(_BYTE *)(*((void *)&buf + 1) + 24LL))
                {
                  __int16 v32 = sub_10001267C("serverxpc");
                  int v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
                  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
                  {
                    int v53 = 138412290;
                    CFStringRef v54 = v30;
                    _os_log_debug_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "client %@ is eligible platform binary",  (uint8_t *)&v53,  0xCu);
                  }
                }

                else
                {
                  BOOL v50 = sub_10001267C("SecError");
                  int v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
                  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
                  {
                    int v53 = 138412290;
                    CFStringRef v54 = v30;
                    _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "serverxpc: client %@ is not eligible",  (uint8_t *)&v53,  0xCu);
                  }
                }

                CFRelease(v30);
                BOOL v51 = *(_BYTE *)(*((void *)&buf + 1) + 24LL) == 0;
                _Block_object_dispose(&buf, 8);
                CFRelease(v23);
                if (!v51)
                {
LABEL_75:
                  uint64_t v16 = 1LL;
LABEL_76:
                  objc_autoreleasePoolPop(v6);
                  return v16;
                }

LABEL_56:
                int v42 = *(__SecTask **)a1;
                if (*(void *)a1)
                {
                  *(void *)a1 = 0LL;
                  CFRelease(v42);
                }

                char v43 = *(const void **)(a1 + 8);
                if (v43)
                {
                  *(void *)(a1 + 8) = 0LL;
                  CFRelease(v43);
                }

                char v44 = *(const void **)(a1 + 24);
                if (v44)
                {
                  *(void *)(a1 + 24) = 0LL;
                  CFRelease(v44);
                }

                CFTypeRef v45 = *(const void **)(a1 + 40);
                if (v45)
                {
                  *(void *)(a1 + 40) = 0LL;
                  CFRelease(v45);
                }

                uint64_t v16 = 0LL;
                goto LABEL_76;
              }

              int v48 = sub_10001267C("SecError");
              int v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
              if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(buf) = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "serverxpc: client has no codesign identifier",  (uint8_t *)&buf,  2u);
              }

LABEL_55:
              CFRelease(v23);
              goto LABEL_56;
            }

            if (SecIsInternalRelease(CodeSignStatus, v27))
            {
              if ((v28 & 0x1C000000) == 0x14000000) {
                goto LABEL_35;
              }
              v40 = sub_10001267C("SecError");
              v36 = (void *)objc_claimAutoreleasedReturnValue(v40);
              if (!os_log_type_enabled((os_log_t)v36, OS_LOG_TYPE_DEFAULT))
              {
LABEL_54:

                if (!v23) {
                  goto LABEL_56;
                }
                goto LABEL_55;
              }

              LODWORD(buf) = 67109120;
              DWORD1(buf) = v28;
              BOOL v37 = "serverxpc: client is not a platform binary: 0x%08x";
            }

            else
            {
              v41 = sub_10001267C("SecError");
              v36 = (void *)objc_claimAutoreleasedReturnValue(v41);
              if (!os_log_type_enabled((os_log_t)v36, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_54;
              }
              LODWORD(buf) = 67109120;
              DWORD1(buf) = v28;
              BOOL v37 = "serverxpc: client is not a platform binary: 0x%08x";
            }

            v38 = (os_log_s *)v36;
            uint32_t v39 = 8;
          }

          else
          {
            v35 = sub_10001267C("SecError");
            v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
            if (!os_log_type_enabled((os_log_t)v36, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_54;
            }
            LOWORD(buf) = 0;
            BOOL v37 = "serverxpc: Client task is null, cannot verify platformness";
            v38 = (os_log_s *)v36;
            uint32_t v39 = 2;
          }

          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, v37, (uint8_t *)&buf, v39);
          goto LABEL_54;
        }

    uint64_t v16 = 0LL;
    goto LABEL_57;
  }

  uint64_t v21 = CFDateCompare(v10, v11, 0LL);
  uint64_t v16 = (uint64_t)a2;
  if (v21 == kCFCompareLessThan) {
    goto LABEL_57;
  }
  if (v21)
  {
    uint64_t v16 = 0LL;
    if (v21 == kCFCompareGreaterThan) {
      uint64_t v16 = (uint64_t)v8;
    }
    goto LABEL_57;
  }

  __int16 v22 = sub_1000E6D50(v8[2], 7LL, (__CFString **)cf);
  uint64_t v23 = (const __CFData *)sub_1000E705C(v8, v22, (__CFString **)cf);
  uint64_t v24 = sub_1000E6D50(a2[2], 7LL, (__CFString **)cf);
  BOOL v25 = (const __CFData *)sub_1000E705C(a2, v24, (__CFString **)cf);
  __int16 v26 = v25;
  if (!v23 || !v25)
  {
    if (SecErrorGetOSStatus(*(void *)cf) == -26275)
    {
      if (v23) {
        size_t v14 = v8;
      }
      else {
        size_t v14 = 0LL;
      }
      ssize_t v15 = v26 == 0LL;
LABEL_17:
      if (v15) {
        uint64_t v16 = (uint64_t)v14;
      }
      else {
        uint64_t v16 = (uint64_t)a2;
      }
      goto LABEL_57;
    }

    goto LABEL_56;
  }

  size_t Length = CFDataGetLength(v23);
  int v28 = CFDataGetLength(v26);
  CFStringRef v29 = v28;
  if (Length < 0 || v28 < 0)
  {
    uint64_t v16 = (uint64_t)a2;
    if (Length > v28) {
      goto LABEL_57;
    }
    v34 = Length < v28;
  }

  else
  {
    if (Length >= v28) {
      CFStringRef v30 = v28;
    }
    else {
      CFStringRef v30 = Length;
    }
    BytePtr = CFDataGetBytePtr(v23);
    __int16 v32 = CFDataGetBytePtr(v26);
    int v33 = memcmp(BytePtr, v32, v30);
    uint64_t v16 = (uint64_t)a2;
    if (v33 > 0) {
      goto LABEL_57;
    }
    if (!v33)
    {
      uint64_t v16 = (uint64_t)a2;
      if (Length > v29) {
        goto LABEL_57;
      }
    }

    v34 = v33 == 0;
    if (Length >= v29) {
      v34 = 0;
    }
    if (v33 < 0) {
      v34 = 1;
    }
  }

  uint64_t v16 = (uint64_t)v8;
  if (!v34) {
    uint64_t v16 = (uint64_t)a2;
  }
LABEL_57:
  v35 = *(const void **)cf;
  if (!*(void *)cf) {
    goto LABEL_61;
  }
  if (v16 | v49)
  {
    *(void *)CFTypeRef cf = 0LL;
    CFRelease(v35);
LABEL_61:
    if (!v16) {
      goto LABEL_72;
    }
    v36 = *(void *)(v16 + 16);
    BOOL v37 = *(uint64_t **)(v36 + 16);
    if (v37)
    {
      v38 = (uint64_t **)(v36 + 24);
      do
      {
        if (*v37 && CFEqual((CFTypeRef)*v37, @"persistref")) {
          sub_1000E8B80(v16, v8, v37);
        }
        uint32_t v39 = *v38++;
        BOOL v37 = v39;
      }

      while (v39);
    }

    CFRetain((CFTypeRef)v16);
    CFRetain((CFTypeRef)v16);
    *a3 = v16;
    if (a2 && CFEqual((CFTypeRef)v16, a2))
    {
      v40 = (os_log_s *)sub_10001267C("insert");
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CFTypeRef cf = 138477827;
        *(void *)&cf[4] = a2;
        v41 = "Conflict resolver chose my (local) item: %{private}@";
LABEL_85:
        int v48 = v40;
        goto LABEL_86;
      }
    }

    else
    {
      CFTypeRef v45 = *(const void **)(a1 + 32);
      if (v45 && CFEqual((CFTypeRef)v16, v45))
      {
        uint64_t v46 = (os_log_s *)sub_10001267C("insert");
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          v47 = *(void *)(a1 + 32);
          *(_DWORD *)CFTypeRef cf = 138477827;
          *(void *)&cf[4] = v47;
          v41 = "Conflict resolver chose item from the backup: %{private}@";
          int v48 = v46;
LABEL_86:
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, v41, cf, 0xCu);
        }
      }

      else
      {
        v40 = (os_log_s *)sub_10001267C("insert");
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CFTypeRef cf = 138477827;
          *(void *)&cf[4] = v16;
          v41 = "Conflict resolver created a new item; return it to our caller: %{private}@";
          goto LABEL_85;
        }
      }
    }

    CFRelease((CFTypeRef)v16);
    return;
  }

  int v49 = *(void *)cf;
LABEL_72:
  int v42 = (os_log_s *)sub_10001267C("SecError");
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CFTypeRef cf = 138412290;
    *(void *)&cf[4] = v49;
    _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "insert: failed to created a merged item: %@",  cf,  0xCu);
  }

  char v43 = (os_log_s *)sub_10001267C("insert");
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CFTypeRef cf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "failed to create a merged item so we will choose the item from the backup",  cf,  2u);
  }

  char v44 = *(const void **)(a1 + 32);
  if (v44) {
    CFRetain(v44);
  }
  *a3 = (uint64_t)v44;
}

  v6[12] = self->_timestampRequestStart;
  *((_DWORD *)v6 + 70) |= 0x800u;
  BOOL v25 = self->_has;
  if ((*(_WORD *)&v25 & 0x400) == 0)
  {
LABEL_25:
    if ((*(_WORD *)&v25 & 0x2000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }

  if (v5[30])
  {
    -[SECC2MPNetworkEvent setOptionsQualityOfService:](self, "setOptionsQualityOfService:");
    BOOL v5 = v13;
  }

  id v11 = *((_DWORD *)v5 + 70);
  if ((v11 & 0x8000000) != 0)
  {
    self->_optionsOutOfProcess = *((_BYTE *)v5 + 276);
    *(_DWORD *)&self->_has |= 0x8000000u;
    id v11 = *((_DWORD *)v5 + 70);
    if ((v11 & 0x10000000) == 0)
    {
LABEL_60:
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_61;
      }
      goto LABEL_88;
    }
  }

  else if ((v11 & 0x10000000) == 0)
  {
    goto LABEL_60;
  }

  self->_optionsOutOfProcessForceDiscretionary = *((_BYTE *)v5 + 277);
  *(_DWORD *)&self->_has |= 0x10000000u;
  id v11 = *((_DWORD *)v5 + 70);
  if ((v11 & 0x1000000) == 0)
  {
LABEL_61:
    if ((v11 & 0x2000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_89;
  }

        return 1LL;
      }
    }

    CFRelease(v30);
    goto LABEL_41;
  }

  if (a4) {
    *a4 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kSOSErrorDomain,  9LL,  0LL));
  }
  return -1;
}

LABEL_18:
        CFRelease(v13);
        goto LABEL_19;
      }

      CFArrayRemoveValueAtIndex(Mutable, v18);
      CFArrayAppendValue(Mutable, kSecAttrAccessGroupToken);
    }

    if (!v13) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  return 0LL;
}

  int v28 = (id)objc_claimAutoreleasedReturnValue( -[CKKSRateLimiter consumeTokenFromBucket:type:at:]( self,  "consumeTokenFromBucket:type:at:",  @"All",  0LL,  v10));
  uint64_t v27 = v28 != 0LL;
  CFStringRef v29 = (void *)objc_claimAutoreleasedReturnValue([v9 accessgroup]);
  CFStringRef v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"G:%@", v29));
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( -[CKKSRateLimiter consumeTokenFromBucket:type:at:]( self,  "consumeTokenFromBucket:type:at:",  v30,  1LL,  v10));

  if (v31)
  {
    if (v28)
    {
      __int16 v32 = objc_claimAutoreleasedReturnValue([v28 laterDate:v31]);

      int v28 = (id)v32;
    }

    else
    {
      int v28 = v31;
    }

    int v33 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v10,  "dateByAddingTimeInterval:",  (double)(2 * -[CKKSRateLimiter rate:](self, "rate:", 1))));
    [v31 timeIntervalSinceDate:v33];
    if (v34 >= 0.0) {
      uint64_t v27 = 3;
    }
    else {
      uint64_t v27 = 2;
    }
  }

  v35 = (void *)objc_claimAutoreleasedReturnValue([v9 uuid]);
  v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"U:%@", v35));
  BOOL v37 = (void *)objc_claimAutoreleasedReturnValue( -[CKKSRateLimiter consumeTokenFromBucket:type:at:]( self,  "consumeTokenFromBucket:type:at:",  v36,  2LL,  v10));

  if (v37)
  {
    if (v28)
    {
      v38 = objc_claimAutoreleasedReturnValue([v28 laterDate:v37]);

      uint64_t v27 = 4;
      int v28 = (id)v38;
    }

    else
    {
      int v28 = v37;
      uint64_t v27 = 4;
    }
  }

  uint32_t v39 = v28;
  *int v42 = v39;

LABEL_31:
  return v27;
}

      if (v12 == (id)++v14)
      {
        int v12 = [v10 countByEnumeratingWithState:&v30 objects:v37 count:16];
        if (v12) {
          goto LABEL_8;
        }
        goto LABEL_20;
      }
    }

    uint64_t v16 = [v15 hasSerializedPrerecord];
    uint64_t v17 = sub_10001267C("escrowrequest");
    CFIndex v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if (!v16)
    {
      if (v19)
      {
        __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([v15 uuid]);
        *(_DWORD *)__int128 buf = 138412290;
        v36 = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Escrow request %@ is pending a passcode",  buf,  0xCu);
      }

      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v15 uuid]);
      int v3 = v29;
      (*((void (**)(id, void *, void))v29 + 2))(v29, v27, 0LL);

      goto LABEL_29;
    }

    if (!v19) {
      goto LABEL_18;
    }
    size_t v20 = (void *)objc_claimAutoreleasedReturnValue([v15 uuid]);
    *(_DWORD *)__int128 buf = 138412290;
    v36 = v20;
    uint64_t v21 = v18;
    __int16 v22 = "Escrow request %@ already has a prerecord; no passcode needed";
    goto LABEL_17;
  }

    id v11 = 1LL;
    goto LABEL_19;
  }

  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v7 domain]);
  if (([v9 isEqualToString:NSOSStatusErrorDomain] & 1) == 0)
  {

LABEL_16:
    uint64_t v16 = sub_10001267C("SecError");
    int v12 = (id)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v24 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v12,  OS_LOG_TYPE_DEFAULT,  "escrowrequest: failed to load requests: %@",  buf,  0xCu);
    }

    goto LABEL_18;
  }

  stat v10 = [v8 code];

  if (v10 != (id)-25300LL) {
    goto LABEL_16;
  }
  id v11 = 0LL;
LABEL_20:
  v5[2](v5, v11, 0LL);
}

    goto LABEL_19;
  }

  uint64_t v17 = 0;
LABEL_23:

  return v17;
}

    uint64_t v24 = 0;
    goto LABEL_21;
  }

  id v13 = sub_10001267C("octagon-ckks");
  size_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    ssize_t v15 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext ckks](self, "ckks"));
    *(_DWORD *)__int128 buf = 138412290;
    __int16 v32 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Resetting CKKS(%@) peer providers", buf, 0xCu);
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext sosAdapter](self, "sosAdapter"));
  uint64_t v17 = [v16 sosEnabled];

  CFIndex v18 = objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext octagonAdapter](self, "octagonAdapter"));
  BOOL v19 = (void *)v18;
  if (v17)
  {
    v30[0] = v18;
    size_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext sosAdapter](self, "sosAdapter"));
    v30[1] = v20;
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v30, 2LL));
  }

  else
  {
    CFStringRef v29 = v18;
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v29, 1LL));
  }

  BOOL v25 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext ckks](self, "ckks"));
  __int16 v26 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext suggestTLKUploadNotifier](self, "suggestTLKUploadNotifier"));
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext requestPolicyCheckNotifier](self, "requestPolicyCheckNotifier"));
  [v25 beginTrustedOperation:v21 suggestTLKUpload:v26 requestPolicyCheck:v27];

  uint64_t v24 = 1;
LABEL_21:

  return v24;
}

  v41 = a6;
  uint64_t v21 = sub_10001267C("coder");
  __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 138412290;
    char v44 = v9;
    _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "New coder for id %@.", buf, 0xCu);
  }

  uint64_t v23 = v9;

  uint64_t v24 = CFGetAllocator(v10);
  BOOL v25 = sub_1001A96C8();
  Instance = _CFRuntimeCreateInstance(kCFAllocatorDefault, v25, 48LL, 0LL);
  *(void *)(Instance + 16) = 0LL;
  *(void *)(Instance + 24) = 0LL;
  *(_BYTE *)(Instance + 32) = 0;
  *(void *)(Instance + 40) = 0LL;
  *(void *)(Instance + 48) = 0LL;
  *(_BYTE *)(Instance + 56) = 0;
  CFTypeRef cf = 0LL;
  if (!v10 || !v11)
  {
    __int16 v32 = (os_log_s *)sub_10001267C("coder");
    int v33 = v23;
    a6 = v41;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "NULL Coder requested, no transport security",  buf,  2u);
    }

    goto LABEL_33;
  }

  uint64_t v27 = (const void *)SOSFullPeerInfoCopyDeviceKey(v11, &cf);
  if (!v27)
  {
    CFStringRef v29 = 0LL;
    CFStringRef v30 = 0LL;
    int v28 = 0LL;
LABEL_42:
    int v33 = v23;
    goto LABEL_43;
  }

  int v28 = (const void *)SecOTRFullIdentityCreateFromSecKeyRefSOS(v24, v27, &cf);
  if (!v28)
  {
    CFStringRef v29 = 0LL;
LABEL_40:
    CFStringRef v30 = 0LL;
    goto LABEL_42;
  }

  CFRelease(v27);
  CFStringRef v29 = (const void *)SOSPeerInfoCopyPubKey(v10, &cf);
  if (!v29)
  {
    uint64_t v27 = 0LL;
    goto LABEL_40;
  }

  CFStringRef v30 = (const void *)SecOTRPublicIdentityCreateFromSecKeyRef(v24, v29, &cf);
  if (!v30)
  {
    uint64_t v27 = 0LL;
    goto LABEL_42;
  }

  if (kCFBooleanTrue == kCFBooleanFalse) {
    uint64_t v31 = SecOTRSessionCreateFromIDAndFlags(v24, v28, v30, 2LL);
  }
  else {
    uint64_t v31 = SecOTRSessionCreateFromID(v24, v28, v30);
  }
  *(void *)(Instance + 24) = v31;
  int v33 = v23;
  if (v31)
  {
    *(_BYTE *)(Instance + 32) = 0;
    *(void *)(Instance + 40) = 0LL;
    CFRelease(v29);
    CFRelease(v28);
    CFRelease(v30);
    a6 = v41;
LABEL_33:
    v34 = *(void *)ccsha1_di();
    CFMutableDictionaryRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, 0LL);
    CFDataSetLength(Mutable, v34);
    *(void *)(Instance + 48) = Mutable;
    *(_BYTE *)(Instance + 56) = 0;
    sub_1001A9A98(Instance, 0LL);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v8 + 96), v33, (const void *)Instance);
    CFRelease((CFTypeRef)Instance);
    size_t v20 = 1;
    *(_BYTE *)(v8 + 105) = 1;
    goto LABEL_34;
  }

  uint64_t v27 = 0LL;
LABEL_43:
  v36 = (os_log_s *)sub_10001267C("SecError");
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v37 = (const __CFString *)cf;
    if (!cf) {
      BOOL v37 = @"No local error in SOSCoderCreate";
    }
    *(_DWORD *)__int128 buf = 138412290;
    char v44 = v37;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Coder create failed: %@\n", buf, 0xCu);
  }

  v38 = (os_log_s *)sub_10001267C("SecError");
  a6 = v41;
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    char v44 = 0LL;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Coder create failed: %@\n", buf, 0xCu);
  }

  if (v28) {
    CFRelease(v28);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (v27) {
    CFRelease(v27);
  }
  CFRelease((CFTypeRef)Instance);
  uint32_t v39 = sub_10001267C("SecError");
  v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412546;
    char v44 = v33;
    CFTypeRef v45 = 2112;
    uint64_t v46 = 0LL;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Failed to create coder for %@: %@", buf, 0x16u);
  }

  size_t v20 = 0;
LABEL_34:
  *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = v20;
  *a6 = *(_BYTE *)(a1[5] + 105LL);
}

LABEL_19:
  CFIndex v18 = v10;
LABEL_24:

  return v18;
}

      BOOL v25 = *v11++;
      __int128 v7 = v25;
    }

    while (v25);
  }

  if (a5)
  {
    ++*((_DWORD *)v30 + 6);
    (*(void (**)(uint64_t, sqlite3_stmt *))(a5 + 16))(a5, a2);
  }

  __int16 v26 = *((unsigned __int8 *)v34 + 24);
  _Block_object_dispose(&v29, 8);
  _Block_object_dispose(&v33, 8);
  return v26;
}

      id v11 = *v5++;
      CFTypeID v4 = v11;
    }

    while (v11);
  }

  if (v3) {
    CFRelease(v3);
  }
}

      sub_1001AAED8((uint64_t)v18, (uint64_t)v21, (uint64_t *)&v57, &cfa, (CFTypeRef *)a4);
      uint64_t v24 = v57;
      goto LABEL_27;
    }
  }

  BOOL v9 = v26;
  BOOL v8 = v27;
  id v11 = v25;
LABEL_19:

LABEL_20:
}

  if (v51) {
    free(v51);
  }
  if (v54) {
    sub_100003440(&v54);
  }
  if (*(void *)v48) {
    sub_100004708(*(void **)v48, __n);
  }
  if (v53) {
    sub_100003848((uint64_t *)&v53);
  }
  if (theData) {
    CFRelease(theData);
  }
  if ((int)v37 > -536870161)
  {
    if ((int)v37 > -536362975)
    {
      if ((_DWORD)v37 != -536362974)
      {
        if (!(_DWORD)v37) {
          return 1LL;
        }
        goto LABEL_56;
      }

      char v44 = (uint64_t)v21;
      CFTypeRef v45 = v19;
      int v42 = 3758604322LL;
      char v43 = a1;
      v38 = @"ks_crypt_diversify: %x failed to '%@' item (class %d, bag: %d) Persona doesn't exist, so drop the item.";
LABEL_54:
      v41 = -26275;
      return sub_1000194E0(v41, v24, v38, v42, v43, v44, v45);
    }

    if ((_DWORD)v37 == -536870160)
    {
      char v44 = (uint64_t)v21;
      CFTypeRef v45 = v19;
      int v42 = 3758097136LL;
      char v43 = a1;
      v38 = @"ks_crypt_diversify: %x failed to '%@' item (class %d, bag: %d) No key available for class.";
LABEL_57:
      v41 = -25291;
      return sub_1000194E0(v41, v24, v38, v42, v43, v44, v45);
    }

    if ((_DWORD)v37 != -536362989)
    {
LABEL_56:
      char v44 = (uint64_t)v21;
      CFTypeRef v45 = v19;
      int v42 = v37;
      char v43 = a1;
      v38 = @"ks_crypt_diversify: %x failed to '%@' item (class %d, bag: %d)";
      goto LABEL_57;
    }

    __int128 v7 = 0;
    goto LABEL_19;
  }

  if ((*((_BYTE *)v4 + 36) & 2) != 0) {
    goto LABEL_18;
  }
LABEL_14:
  __int128 v7 = (*((_BYTE *)v4 + 36) & 1) == 0;
  if ((*(_BYTE *)&self->_has & 1) != 0)
  {
    if ((*((_BYTE *)v4 + 36) & 1) == 0 || self->_operationGroupIndex != *((_DWORD *)v4 + 2)) {
      goto LABEL_18;
    }
    __int128 v7 = 1;
  }

          if (*a7)
          {
            +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v24,  0LL);
            if (!v37)
            {
LABEL_29:
              if (v39) {
                CFRelease(v39);
              }
              size_t v14 = v50;
              if (GenSignatureWithPeerAdded) {
                CFRelease(GenSignatureWithPeerAdded);
              }
              if (!v33)
              {
LABEL_35:
                if (!a7) {
                  goto LABEL_8;
                }
LABEL_43:
                if (v25) {
                  goto LABEL_8;
                }
                uint64_t v46 = sub_10001267C("circleOps");
                __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
                if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                {
                  v47 = *a7;
                  *(_DWORD *)__int128 buf = 138412290;
                  v52 = v47;
                  _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Failed to make circle joining piggyback blob as sponsor %@",  buf,  0xCu);
                }

                goto LABEL_7;
              }
}
  }

void sub_10000E220( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10000E244(uint64_t a1, CFTypeRef cf1)
{
  uint64_t result = CFEqual(cf1, *(CFTypeRef *)(a1 + 40));
  if ((_DWORD)result) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  }
  return result;
}

uint64_t sub_10000E284(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

LABEL_15:
  uint32_t v39 = 0LL;
  uint64_t v16 = [v8 mutableCopy];
  uint64_t v17 = objc_alloc(&OBJC_CLASS___SecOSTransactionHolder);
  CFIndex v18 = (void *)os_transaction_create("com.apple.securityd.SecItemAddAndNotifyOnSync-callback");
  BOOL v19 = -[SecOSTransactionHolder init:](v17, "init:", v18);

  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472LL;
  v36[2] = sub_1000115B8;
  v36[3] = &unk_100282CB8;
  BOOL v37 = v9;
  size_t v20 = v19;
  v38 = v20;
  uint64_t v21 = objc_retainBlock(v36);
  [v16 setObject:v21 forKeyedSubscript:@"f_ckkscallback"];

  v35 = 0LL;
  *(_OWORD *)int v33 = 0u;
  v34 = 0u;
  __int16 v32 = 0u;
  if (qword_1002DEB70 != -1) {
    dispatch_once(&qword_1002DEB70, &stru_10028EFA8);
  }
  p_client = &self->_client;
  if (byte_1002DEB68)
  {
    SecSecurityFixUpClientWithPersona(p_client, &v32);
  }

  else
  {
    uint64_t v24 = *(_OWORD *)&self->_client.allowSystemKeychain;
    __int16 v32 = *(_OWORD *)&p_client->task;
    *(_OWORD *)int v33 = v24;
    v34 = *(_OWORD *)&self->_client.keybag;
    v35 = *(void *)&self->_client.isMusrOverridden;
  }

  sub_100113768((const __CFDictionary *)v16, (uint64_t)&v32, (uint64_t)&v39, (__CFString **)&cf);
  if (v39)
  {
    BOOL v25 = CFGetTypeID(v39);
    if (v25 == CFDictionaryGetTypeID())
    {
      ((void (*)(void *, CFTypeRef, void, CFTypeRef))v11[2])(v11, v39, 0LL, cf);
    }

    else
    {
      CFStringRef v29 = CFGetTypeID(v39);
      if (v29 == CFArrayGetTypeID()) {
        ((void (*)(void *, void, CFTypeRef, CFTypeRef))v11[2])(v11, 0LL, v39, cf);
      }
      else {
        ((void (*)(void *, void, void, void))v11[2])(v11, 0LL, 0LL, 0LL);
      }
    }
  }

  else
  {
    ((void (*)(void *, void, void, CFTypeRef))v11[2])(v11, 0LL, 0LL, cf);
  }

  __int16 v26 = v39;
  if (v39)
  {
    uint32_t v39 = 0LL;
    CFRelease(v26);
  }

  uint64_t v27 = cf;
  if (cf)
  {
    CFTypeRef cf = 0LL;
    CFRelease(v27);
  }

  if (qword_1002DEB70 != -1) {
    dispatch_once(&qword_1002DEB70, &stru_10028EFA8);
  }
  if (byte_1002DEB68)
  {
    int v28 = v33[1];
    if (v33[1])
    {
      v33[1] = 0LL;
      CFRelease(v28);
    }
  }

LABEL_23:
}
}

  uint64_t v17 = sub_10001267C("ckkscurrent");
  ssize_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
LABEL_16:
    uint64_t v16 = v22;
    goto LABEL_17;
  }

  *(_DWORD *)__int128 buf = 138412546;
  uint64_t v16 = v22;
  CFStringRef v29 = v22;
  CFStringRef v30 = 2112;
  uint64_t v31 = v23;
  _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Found current item for (%@: %@)", buf, 0x16u);
LABEL_17:

  ((void (*)(void *, CFTypeRef, CFTypeRef))v20[2])(v20, v24, cf);
  CFIndex v18 = v24;
  if (v24)
  {
    uint64_t v24 = 0LL;
    CFRelease(v18);
  }

  BOOL v19 = cf;
  if (cf)
  {
    CFTypeRef cf = 0LL;
    CFRelease(v19);
  }
}

    v6[2](v6, 0LL, 0LL);
    goto LABEL_16;
  }

  uint64_t v16 = sub_10001267C("escrowrequest");
  uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    __int16 v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "fetched prerecord for uuid %@", buf, 0xCu);
  }

  CFIndex v18 = (void *)objc_claimAutoreleasedReturnValue([v7 serializedPrerecord]);
  ((void (**)(id, void *, id))v6)[2](v6, v18, 0LL);

LABEL_16:
}

  v34 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"pcspublicidentity"]);
  if (!v34)
  {
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSItem plaintextPCSPublicIdentity](self, "plaintextPCSPublicIdentity"));
    if (!v24) {
      goto LABEL_19;
    }
  }

  v35 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"pcspublicidentity"]);
  v36 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSItem plaintextPCSPublicIdentity](self, "plaintextPCSPublicIdentity"));
  BOOL v37 = [v35 isEqual:v36];

  if (!v34)
  {

    if ((v37 & 1) != 0) {
      goto LABEL_19;
    }
LABEL_37:
    int v48 = sub_1000AA6AC(@"ckksitem", 0LL);
    v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)BOOL v50 = 0;
      v41 = "SecCKRecordPCSPublicIdentity does not match";
      goto LABEL_39;
    }

        goto LABEL_21;
      }

      if ([v13 hasSerializedPrerecord])
      {
        BOOL v25 = v13;

        if (v25) {
          goto LABEL_34;
        }
        goto LABEL_32;
      }

  return v13;
}
}
  }

      v9 &= v34;
      v7 |= v33;
      v8 |= v13;
    }

    CFIndex v6 = [obj countByEnumeratingWithState:&v35 objects:v41 count:16];
  }

  while (v6);

  if (!(v7 & 1 | ((v9 & 1) == 0) | v8 & 1))
  {
    uint64_t v27 = 1;
    goto LABEL_23;
  }

  __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSResultOperation error](v30, "error"));
  uint64_t v23 = v22 == 0LL;

  if (v23)
  {
    uint32_t v39 = NSLocalizedDescriptionKey;
    BOOL v5 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Operation (%@) cancelled",  v28));
    v40 = v5;
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v40,  &v39,  1LL));
    BOOL v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"CKKSResultOperationError",  2LL,  v24));
    -[CKKSResultOperation setError:](v30, "setError:", v25);

LABEL_22:
    goto LABEL_23;
  }

  uint64_t v27 = 0;
LABEL_23:

  objc_sync_exit(v30);
  return v27;
}

        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) viewState]);
        int v28 = (void *)objc_claimAutoreleasedReturnValue([v27 notifyViewChangedScheduler]);
        [v28 trigger];
      }

      BOOL v5 = [v2 countByEnumeratingWithState:&v32 objects:v40 count:16];
    }

    while (v5);
  }

  return 1LL;
}

    ssize_t v15 = 0LL;
    goto LABEL_16;
  }

  if (![v7 isEqualToString:@"perform_ring_update"])
  {
    if ([v7 isEqualToString:@"perform_backup"])
    {
      size_t v14 = objc_claimAutoreleasedReturnValue(-[SOSAccount performBackup](self, "performBackup"));
      goto LABEL_12;
    }

    goto LABEL_15;
  }

  size_t v14 = objc_claimAutoreleasedReturnValue(-[SOSAccount performRingUpdate](self, "performRingUpdate"));
LABEL_12:
  ssize_t v15 = (void *)v14;
LABEL_16:

  return v15;
}

  return v16;
}

LABEL_14:
}

  if (self->_syncingPolicy) {
    objc_msgSend(v13, "setSyncingPolicy:");
  }
  if (self->_voucher) {
    objc_msgSend(v13, "setVoucher:");
  }
  if (self->_voucherSignature) {
    objc_msgSend(v13, "setVoucherSignature:");
  }
  if (-[OTAccountMetadataClassC tlkSharesForVouchedIdentitysCount](self, "tlkSharesForVouchedIdentitysCount"))
  {
    [v13 clearTlkSharesForVouchedIdentitys];
    __int128 v7 = -[OTAccountMetadataClassC tlkSharesForVouchedIdentitysCount](self, "tlkSharesForVouchedIdentitysCount");
    if (v7)
    {
      BOOL v8 = v7;
      for (i = 0LL; i != v8; ++i)
      {
        stat v10 = (void *)objc_claimAutoreleasedReturnValue( -[OTAccountMetadataClassC tlkSharesForVouchedIdentityAtIndex:]( self,  "tlkSharesForVouchedIdentityAtIndex:",  i));
        [v13 addTlkSharesForVouchedIdentity:v10];
      }
    }
  }

  if (self->_secureElementIdentity) {
    objc_msgSend(v13, "setSecureElementIdentity:");
  }
  id v11 = (__int16)self->_has;
  int v12 = v13;
  if ((v11 & 0x80) != 0)
  {
    *((_BYTE *)v13 + 120) = self->_isInheritedAccount;
    *((_WORD *)v13 + 62) |= 0x80u;
    id v11 = (__int16)self->_has;
    if ((v11 & 0x100) == 0)
    {
LABEL_28:
      if ((v11 & 0x200) == 0) {
        goto LABEL_29;
      }
      goto LABEL_40;
    }
  }

  else if ((*(_WORD *)&self->_has & 0x100) == 0)
  {
    goto LABEL_28;
  }

  *((_BYTE *)v13 + 121) = self->_warmedEscrowCache;
  *((_WORD *)v13 + 62) |= 0x100u;
  id v11 = (__int16)self->_has;
  if ((v11 & 0x200) == 0)
  {
LABEL_29:
    if ((v11 & 0x20) == 0) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }

  __int128 v7 = 0LL;
LABEL_15:
  BOOL v8 = (unint64_t)-[NSData hash](self->_syncingPolicy, "hash");
  BOOL v9 = (unint64_t)-[NSData hash](self->_voucher, "hash");
  stat v10 = (unint64_t)-[NSData hash](self->_voucherSignature, "hash");
  id v11 = (unint64_t)-[NSMutableArray hash](self->_tlkSharesForVouchedIdentitys, "hash");
  int v12 = (unint64_t)-[NSData hash](self->_secureElementIdentity, "hash");
  id v13 = (__int16)self->_has;
  if ((v13 & 0x80) != 0)
  {
    size_t v14 = 2654435761LL * self->_isInheritedAccount;
    if ((*(_WORD *)&self->_has & 0x100) != 0)
    {
LABEL_17:
      ssize_t v15 = 2654435761LL * self->_warmedEscrowCache;
      if ((*(_WORD *)&self->_has & 0x200) != 0) {
        goto LABEL_18;
      }
LABEL_22:
      uint64_t v16 = 0LL;
      if ((v13 & 0x20) != 0) {
        goto LABEL_19;
      }
LABEL_23:
      uint64_t v17 = 0LL;
      return v22 ^ v23 ^ v21 ^ v20 ^ v19 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ -[NSString hash](self->_oldPeerID, "hash");
    }
  }

  else
  {
    size_t v14 = 0LL;
    if ((*(_WORD *)&self->_has & 0x100) != 0) {
      goto LABEL_17;
    }
  }

  ssize_t v15 = 0LL;
  if ((*(_WORD *)&self->_has & 0x200) == 0) {
    goto LABEL_22;
  }
LABEL_18:
  uint64_t v16 = 2654435761LL * self->_warnedTooManyPeers;
  if ((v13 & 0x20) == 0) {
    goto LABEL_23;
  }
LABEL_19:
  uint64_t v17 = 2654435761LL * self->_sendingMetricsPermitted;
  return v22 ^ v23 ^ v21 ^ v20 ^ v19 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ -[NSString hash](self->_oldPeerID, "hash");
}

  if (*((void *)v4 + 10)) {
    -[OTAccountMetadataClassC setSyncingPolicy:](self, "setSyncingPolicy:");
  }
  if (*((void *)v4 + 13)) {
    -[OTAccountMetadataClassC setVoucher:](self, "setVoucher:");
  }
  if (*((void *)v4 + 14)) {
    -[OTAccountMetadataClassC setVoucherSignature:](self, "setVoucherSignature:");
  }
  ssize_t v15 = 0u;
  uint64_t v16 = 0u;
  id v13 = 0u;
  size_t v14 = 0u;
  __int128 v7 = *((id *)v4 + 11);
  BOOL v8 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v8)
  {
    BOOL v9 = v8;
    stat v10 = *(void *)v14;
    do
    {
      for (i = 0LL; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v14 != v10) {
          objc_enumerationMutation(v7);
        }
        -[OTAccountMetadataClassC addTlkSharesForVouchedIdentity:]( self,  "addTlkSharesForVouchedIdentity:",  *(void *)(*((void *)&v13 + 1) + 8LL * (void)i),  (void)v13);
      }

      BOOL v9 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v9);
  }

  if (*((void *)v4 + 8)) {
    -[OTAccountMetadataClassC setSecureElementIdentity:](self, "setSecureElementIdentity:");
  }
  int v12 = *((_WORD *)v4 + 62);
  if ((v12 & 0x80) != 0)
  {
    self->_isInheritedAccount = *((_BYTE *)v4 + 120);
    *(_WORD *)&self->_has |= 0x80u;
    int v12 = *((_WORD *)v4 + 62);
    if ((v12 & 0x100) == 0)
    {
LABEL_31:
      if ((v12 & 0x200) == 0) {
        goto LABEL_32;
      }
      goto LABEL_43;
    }
  }

  else if ((*((_WORD *)v4 + 62) & 0x100) == 0)
  {
    goto LABEL_31;
  }

  self->_warmedEscrowCache = *((_BYTE *)v4 + 121);
  *(_WORD *)&self->_has |= 0x100u;
  int v12 = *((_WORD *)v4 + 62);
  if ((v12 & 0x200) == 0)
  {
LABEL_32:
    if ((v12 & 0x20) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }

  uint64_t v17 = 1LL;
LABEL_16:

  return v17;
}

      goto LABEL_15;
    }

    CFIndex v18 = objc_claimAutoreleasedReturnValue(-[CKKSZoneStateEntry encodedChangeToken](self, "encodedChangeToken"));
    int v48 = v13;
    if (v18 || (char v43 = (void *)objc_claimAutoreleasedReturnValue([v9 encodedChangeToken])) != 0)
    {
      BOOL v19 = (void *)v18;
      size_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSZoneStateEntry encodedChangeToken](self, "encodedChangeToken"));
      CFTypeRef v45 = (void *)objc_claimAutoreleasedReturnValue([v9 encodedChangeToken]);
      uint64_t v46 = v20;
      if (!objc_msgSend(v20, "isEqual:"))
      {
        size_t v14 = 0;
        uint64_t v21 = v19;
        goto LABEL_54;
      }

      char v44 = 1;
    }

    else
    {
      BOOL v19 = 0LL;
      char v43 = 0LL;
      char v44 = 0;
    }

    __int16 v22 = -[CKKSZoneStateEntry moreRecordsInCloudKit](self, "moreRecordsInCloudKit");
    if (v22 != [v9 moreRecordsInCloudKit])
    {
      size_t v14 = 0;
      uint64_t v21 = v19;
      if (!v44) {
        goto LABEL_55;
      }
      goto LABEL_54;
    }

    uint64_t v21 = v19;
    v47 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSZoneStateEntry lastFetchTime](self, "lastFetchTime"));
    if (v47 || (BOOL v37 = (void *)objc_claimAutoreleasedReturnValue([v9 lastFetchTime])) != 0)
    {
      BOOL v19 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSZoneStateEntry lastFetchTime](self, "lastFetchTime"));
      v41 = (void *)objc_claimAutoreleasedReturnValue([v9 lastFetchTime]);
      int v42 = v19;
      if (!objc_msgSend(v19, "isEqualToDate:"))
      {
        size_t v14 = 0;
        goto LABEL_50;
      }

      v40 = 1;
    }

    else
    {
      BOOL v37 = 0LL;
      v40 = 0;
    }

    uint32_t v39 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSZoneStateEntry rateLimiter](self, "rateLimiter"));
    if (v39 || (v34 = (void *)objc_claimAutoreleasedReturnValue([v9 rateLimiter])) != 0)
    {
      uint64_t v23 = objc_claimAutoreleasedReturnValue(-[CKKSZoneStateEntry rateLimiter](self, "rateLimiter"));
      uint64_t v24 = objc_claimAutoreleasedReturnValue([v9 rateLimiter]);
      v38 = (void *)v23;
      BOOL v25 = (void *)v23;
      BOOL v19 = (void *)v24;
      if (![v25 isEqual:v24])
      {
        size_t v14 = 0;
        goto LABEL_47;
      }

      v36 = v21;
      v35 = 1;
    }

    else
    {
      v36 = v21;
      v34 = 0LL;
      v35 = 0;
    }

    __int16 v26 = -[CKKSZoneStateEntry lastFixup](self, "lastFixup");
    if (v26 != [v9 lastFixup])
    {
      size_t v14 = 0;
      uint64_t v21 = v36;
      if (!v35) {
        goto LABEL_48;
      }
      goto LABEL_47;
    }

    uint64_t v27 = objc_claimAutoreleasedReturnValue(-[CKKSZoneStateEntry lastLocalKeychainScanTime](self, "lastLocalKeychainScanTime"));
    if (v27 || (CFStringRef v30 = objc_claimAutoreleasedReturnValue([v9 lastLocalKeychainScanTime])) != 0)
    {
      __int16 v32 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSZoneStateEntry lastLocalKeychainScanTime](self, "lastLocalKeychainScanTime", v30));
      int v33 = (void *)v27;
      int v28 = (void *)objc_claimAutoreleasedReturnValue([v9 lastLocalKeychainScanTime]);
      size_t v14 = [v32 isEqualToDate:v28];

      if (v33)
      {

        uint64_t v21 = v36;
        goto LABEL_64;
      }

      uint64_t v21 = v36;
      CFStringRef v29 = v31;
    }

    else
    {
      CFStringRef v29 = 0LL;
      size_t v14 = 1;
      uint64_t v21 = v36;
    }

LABEL_64:
    if ((v35 & 1) == 0)
    {
LABEL_48:
      if (v39)
      {

        if (!v40) {
          goto LABEL_51;
        }
      }

      else
      {

        if ((v40 & 1) == 0)
        {
LABEL_51:
          if (!v47) {

          }
          if ((v44 & 1) == 0)
          {
LABEL_55:
            if (!v21) {

            }
            if ((v48 & 1) == 0) {
              goto LABEL_15;
            }
            goto LABEL_14;
          }

          continue;
        }

        size_t v14 = objc_claimAutoreleasedReturnValue([v10 currentTLKPointer]);
        if (v14)
        {
          ssize_t v15 = (void *)v14;
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v10 tlk]);

          if (!v16)
          {
            uint64_t v17 = sub_10001267C("octagon-ckks");
            CFIndex v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138412290;
              uint64_t v31 = v10;
              _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Key set %@ has no TLK; scheduling for reset",
                buf,
                0xCu);
            }

            id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue([v10 zoneID]);
            BOOL v19 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s zoneName](v13, "zoneName"));
            [v25 addObject:v19];

            goto LABEL_14;
          }
        }
      }

      __int128 v7 = [v5 countByEnumeratingWithState:&v26 objects:v32 count:16];
    }

    while (v7);
  }

  if ([v25 count])
  {
    -[OTResetCKKSZonesLackingTLKsOperation resetViews:](v24, "resetViews:", v25);
  }

  else
  {
    size_t v20 = sub_10001267C("octagon-ckks");
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "No CKKS views need resetting", buf, 2u);
    }

    __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(-[OTResetCKKSZonesLackingTLKsOperation intendedState](v24, "intendedState"));
    -[OTResetCKKSZonesLackingTLKsOperation setNextState:](v24, "setNextState:", v22);

    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(-[OTResetCKKSZonesLackingTLKsOperation finishedOp](v24, "finishedOp"));
    -[CKKSGroupOperation runBeforeGroupFinished:](v24, "runBeforeGroupFinished:", v23);
  }
}
    }

    ssize_t v15 = [v13 countByEnumeratingWithState:&v29 objects:v33 count:16];
    if (v15) {
      continue;
    }
    break;
  }

      size_t v20 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"ck-sign-in",  @"initializing"));
      goto LABEL_34;
    }

    __int16 v32 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
    [v32 setStateForAllViews:@"loggedout"];

    goto LABEL_27;
  }

  if ([v8 isEqualToString:@"wait_for_ck_account_status"])
  {
    if (([v9 _onqueueContains:@"ck_account_logged_in"] & 1) != 0
      || (id)-[CKKSKeychainView accountStatus](self, "accountStatus") == (id)1)
    {
      [v9 _onqueueRemoveFlag:@"ck_account_logged_in"];
      BOOL v25 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView zoneName](self, "zoneName"));
      __int16 v26 = sub_1000AA6AC(@"ckkskey", v25);
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);

      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "CloudKit account now present", buf, 2u);
      }

      goto LABEL_14;
    }

    if ([v9 _onqueueContains:@"ck_account_logged_out"])
    {
      [v9 _onqueueRemoveFlag:@"ck_account_logged_out"];
      v34 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView zoneName](self, "zoneName"));
      v35 = sub_1000AA6AC(@"ckkskey", v34);
      CFStringRef v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);

      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "No account available", buf, 2u);
      }

  if (!v7) {
    goto LABEL_17;
  }
  return (NSDate *)v7;
}
    }

    size_t v20 = 0;
    CFStringRef v30 = [obj countByEnumeratingWithState:&v33 objects:v41 count:16];
    if (v30) {
      continue;
    }
    break;
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

    CFRelease(v5);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if (v6) {
    CFRelease(v6);
  }
}
  }
}

    goto LABEL_19;
  }

  int v12 = (const void *)v11;
  if (sub_100199444( a2,  (uint64_t)[*(id *)(a1 + 32) fullPeerInfo],  v11,  (CFTypeRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)))
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
  }

  else
  {
    BOOL v19 = sub_10001267C("SecError");
    size_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
      *(_DWORD *)__int128 buf = 138412290;
      CFStringRef v30 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "SetRecoveryKey failed at SOSRingSetRecoveryKeyBag #2: %@",  buf,  0xCu);
    }
  }

  CFRelease(v12);
LABEL_19:
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
  {
    __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) trust]);
    uint64_t v23 = sub_1001ABB98(a2, (uint64_t)[v22 fullPeerInfo], *(void *)(*(void *)(a1 + 40) + 8) + 24);

    if ((v23 & 1) == 0)
    {
      uint64_t v24 = sub_10001267C("SecError");
      BOOL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v26 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
        *(_DWORD *)__int128 buf = 138412290;
        CFStringRef v30 = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "SetRecoveryKey failed at SOSRingGenerationSign: %@",  buf,  0xCu);
      }

      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
    }
  }

  if (a2) {
    CFRetain(a2);
  }
  return a2;
}

  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  BOOL v19 = _OctagonSignpostLogSystem(Nanoseconds);
  size_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  uint64_t v21 = v20;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v20))
  {
    *(_DWORD *)__int128 buf = 67240192;
    LODWORD(v32) = v17;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v21,  OS_SIGNPOST_INTERVAL_END,  v4,  "SOSCCProcessSyncWithAllPeers",  " SOSSignpostNameSOSCCProcessSyncWithAllPeers=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCProcessS yncWithAllPeers}d ",  buf,  8u);
  }

  uint64_t v23 = _OctagonSignpostLogSystem(v22);
  uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 134218496;
    __int16 v32 = v4;
    int v33 = 2048;
    v34 = (double)Nanoseconds / 1000000000.0;
    v35 = 1026;
    v36 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs: SOSCCProcessSyncWithAllPeers  SOSSignpostNameSOSCCProcessSyncWithAllPeers=%{public,signpost.teleme try:number1,name=SOSSignpostNameSOSCCProcessSyncWithAllPeers}d ",  buf,  0x1Cu);
  }

  return v17;
}

LABEL_12:
}

    CFIndex v6 = 0;
  }
}
      }

      BOOL v9 = [obj countByEnumeratingWithState:&v40 objects:v45 count:16];
    }

    while (v9);
  }

  objc_destroyWeak(&location);
}

  return v32;
}

  int v12 = 1;
LABEL_15:

  return v12;
}
}

  *(_BYTE *)(a3 + 49) = 0;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = sub_1000D3A8C( *(void *)(a1 + 64),  a3,  1,  (uint64_t)&v20 + 1,  (uint64_t)&v20,  *(CFTypeRef **)(a1 + 56));
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    id v13 = *(void **)(a1 + 56);
    if (v13)
    {
      if (SecErrorGetOSStatus(*v13) == -25308)
      {
        if (qword_1002DECF0 != -1) {
          dispatch_once(&qword_1002DECF0, &stru_100291200);
        }
        size_t v14 = (id)qword_1002DED00;
        objc_sync_enter(v14);
        ssize_t v15 = [(id)qword_1002DECF8 operationCount];
        uint64_t v16 = sub_10001267C("engine");
        uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
        CFIndex v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
        if (v15)
        {
          if (v18)
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "SOSEnsureBackup: Backup already scheduled for next unlock",  buf,  2u);
          }
        }

        else
        {
          if (v18)
          {
            *(_WORD *)uint64_t v21 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "SOSEnsureBackup: Scheduling a backup for next unlock",  v21,  2u);
          }

          uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSBlockOperation blockOperationWithBlock:]( &OBJC_CLASS___NSBlockOperation,  "blockOperationWithBlock:",  &stru_100291220));
          BOOL v19 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1002DED00 unlockDependency]);
          -[os_log_s addNullableDependency:](v17, "addNullableDependency:", v19);

          [(id)qword_1002DECF8 addOperation:v17];
        }

        objc_sync_exit(v14);
      }
    }
  }

  if (v12) {
    CFRelease(v12);
  }
  if (!v8) {
    CFRelease(v6);
  }
}

  return v12;
}

    CFTypeID v4 = 0;
    goto LABEL_13;
  }

    off_1002DE618();
    int v12 = sub_1000EC42C( (void **)a2,  (void **)a2,  *v11,  0LL,  *(unsigned __int8 *)(*(void *)(a1 + 56) + 154LL),  (__CFString **)&err);
LABEL_13:
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v12;
  }

  if (!err) {
    goto LABEL_52;
  }
  Code = CFErrorGetCode(err);
  if (Code <= -25309)
  {
    if (Code <= -26276)
    {
      if (Code != -536870186 && Code != -536870184) {
        goto LABEL_36;
      }
LABEL_34:
      **(_BYTE **)(a1 + 64) = 1;
      uint64_t v17 = (os_log_s *)sub_10001267C("upgr");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = err;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Bailing in phase 2 because AKS is unavailable: %@",  buf,  0xCu);
      }

      goto LABEL_36;
    }

    if (Code == -26275)
    {
      *(void *)__int128 buf = 0LL;
      off_1002DE618();
      sub_1000ECAF0((CFStringRef **)a2, *v23, kCFBooleanFalse, 0, (CFTypeRef *)buf);
      uint64_t v24 = *(const void **)buf;
      if (*(void *)buf)
      {
        *(void *)__int128 buf = 0LL;
        CFRelease(v24);
      }
    }

    else if (Code != -25330)
    {
      goto LABEL_36;
    }

    goto LABEL_46;
  }

  if (Code > -25292)
  {
    if (Code == -25291) {
      goto LABEL_34;
    }
    if (Code == 19)
    {
      CFErrorDomain Domain = CFErrorGetDomain(err);
      if (!CFEqual(@"com.apple.utilities.sqlite3", Domain))
      {
        __int16 v26 = (os_log_s *)sub_10001267C("SecError");
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138478083;
          *(void *)&uint8_t buf[4] = a2;
          CFStringRef v29 = 2112;
          CFStringRef v30 = err;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Received SQLITE_CONSTRAINT with wrong error domain. Huh? Item: %{private}@, error: %@",  buf,  0x16u);
        }

        goto LABEL_50;
      }

      size_t v14 = (os_log_s *)sub_10001267C("upgr");
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_46;
      }
      *(_DWORD *)__int128 buf = 138477827;
      *(void *)&uint8_t buf[4] = a2;
      ssize_t v15 = "Received SQLITE_CONSTRAINT -- ignoring: %{private}@";
      goto LABEL_33;
    }

  return v11;
}

  altDSID = self->_altDSID;
  if (altDSID) {
    [v4 setObject:altDSID forKey:@"altDSID"];
  }
  if ((*(_BYTE *)&self->_has & 4) != 0)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_triggerRequestTime));
    [v4 setObject:v11 forKey:@"triggerRequestTime"];
  }

  serializedReason = self->_serializedReason;
  if (serializedReason) {
    [v4 setObject:serializedReason forKey:@"serializedReason"];
  }
  return v4;
}

  altDSID = self->_altDSID;
  if (altDSID)
  {
    PBDataWriterWriteStringField(v10, altDSID, 8LL);
    CFTypeID v4 = v10;
  }

  if ((*(_BYTE *)&self->_has & 4) != 0)
  {
    PBDataWriterWriteUint64Field(v10, self->_triggerRequestTime, 9LL);
    CFTypeID v4 = v10;
  }

  serializedReason = self->_serializedReason;
  if (serializedReason)
  {
    PBDataWriterWriteDataField(v10, serializedReason, 10LL);
    CFTypeID v4 = v10;
  }
}

  if (self->_altDSID)
  {
    objc_msgSend(v6, "setAltDSID:");
    CFTypeID v4 = v6;
  }

  if ((*(_BYTE *)&self->_has & 4) != 0)
  {
    *((void *)v4 + 3) = self->_triggerRequestTime;
    *((_BYTE *)v4 + 76) |= 4u;
  }

  if (self->_serializedReason)
  {
    objc_msgSend(v6, "setSerializedReason:");
    CFTypeID v4 = v6;
  }
}

  BOOL v9 = 0LL;
LABEL_13:
  stat v10 = -[NSString hash](self->_altDSID, "hash");
  if ((*(_BYTE *)&self->_has & 4) != 0) {
    id v11 = 2654435761u * self->_triggerRequestTime;
  }
  else {
    id v11 = 0LL;
  }
  return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ (unint64_t)-[NSData hash]( self->_serializedReason,  "hash");
}

  if (*((void *)v4 + 5))
  {
    -[SecEscrowPendingRecord setAltDSID:](self, "setAltDSID:");
    CFTypeID v4 = v6;
  }

  if ((*((_BYTE *)v4 + 76) & 4) != 0)
  {
    self->_triggerRequestTime = *((void *)v4 + 3);
    *(_BYTE *)&self->_has |= 4u;
  }

  if (*((void *)v4 + 7))
  {
    -[SecEscrowPendingRecord setSerializedReason:](self, "setSerializedReason:");
    CFTypeID v4 = v6;
  }
}
}

      uint64_t v16 = (const __CFData *)(*(uint64_t (**)(const void *, CFTypeRef *))(v11 + 112))(v13, &cf);
LABEL_13:
      uint64_t v17 = v16 != 0LL;
      if (v14)
      {
        CFIndex v18 = sub_1001A566C(a2, v16, (__CFString **)&cf);
        BOOL v19 = v33;
        goto LABEL_20;
      }

  if (a4 && *a4)
  {
    uint64_t v16 = sub_10001267C("recovery");
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      CFIndex v18 = *a4;
      uint64_t v21 = 138412290;
      __int16 v22 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Error in SOSRecoveryKeyBagCreateForAccount - %@",  (uint8_t *)&v21,  0xCu);
    }
  }

  if (v5) {
    CFRelease(v5);
  }
  return v14;
}

  id v13 = sub_10001267C("account");
  size_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t result = 138412290;
    *(void *)&result[4] = cf;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Failed to load account: %@", result, 0xCu);
  }

  ssize_t v15 = sub_10001267C("SecError");
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t result = 138412290;
    *(void *)&result[4] = cf;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Failed to load account: %@", result, 0xCu);
  }

  id v11 = 0LL;
LABEL_17:
  uint64_t v17 = cf;
  if (cf)
  {
    CFTypeRef cf = 0LL;
    CFRelease(v17);
  }

  return v11;
}

LABEL_24:
    goto LABEL_25;
  }

  sub_1000194E0( -25291,  (__CFString **)&cf,  @"secItemFetchCurrentItemOutOfBand: %@ does not have entitlement %@",  self->_client.task,  @"com.apple.private.ckks.currentitempointers_read");
LABEL_9:
  ((void (*)(void *, void, CFTypeRef))v10[2])(v10, 0LL, cf);
  id v13 = cf;
  if (cf)
  {
    CFTypeRef cf = 0LL;
    CFRelease(v13);
  }

  sub_1000194B4(-1LL, @"com.apple.security.cfder.error", 0LL, a2, v32, @"Invalid datetime character");
  v47 = NAN;
  if (!v34) {
    return 0LL;
  }
LABEL_25:
  if (v34 != (unsigned __int8 *)v5)
  {
    sub_1000194B4( -1LL,  @"com.apple.security.cfder.error",  0LL,  a2,  v32,  @"trailing garbage at end of datetime");
    return 0LL;
  }

  int v49 = (v13 + 10 * v64);
  BOOL v50 = (v19 + 10 * v16);
  BOOL v51 = (v25 + 10 * v22);
  v85[0] = 0;
  if ((sub_10001402C( a3,  (v65 + 10 * v66),  v49,  v50,  v51,  (v33 + 10 * v28),  v85,  (__CFString **)a2) & 1) != 0)
  {
    v81 = 0LL;
    CFStringRef v82 = &v81;
    CFStringRef v83 = 0x2000000000LL;
    CFDataRef v84 = 0;
    CFStringRef v77 = 0;
    v78 = (double *)((char *)&v76 + 4);
    CFStringRef v79 = 0x2000000000LL;
    char v80 = 0LL;
    v70[0] = _NSConcreteStackBlock;
    v70[1] = 0x40000000LL;
    v70[2] = sub_100014140;
    v70[3] = &unk_100283190;
    v70[4] = &v81;
    v70[5] = (char *)&v76 + 4;
    uint64_t v71 = a3;
    BOOL v72 = v65 + 10 * v66;
    v73 = v49;
    CFStringRef v74 = v50;
    CFStringRef v75 = v51;
    int v76 = (v33 + 10 * v28);
    sub_100013204((uint64_t)v70);
    if (*((_BYTE *)v82 + 24))
    {
      int v53 = v78[3] - v47;
    }

    else
    {
      sub_1000194B4( -1LL,  @"com.apple.security.cfder.error",  0LL,  a2,  v52,  @"Failed to encode date from components");
      int v53 = NAN;
    }

    _Block_object_dispose((char *)&v76 + 4, 8);
    _Block_object_dispose(&v81, 8);
    *a1 = v53;
    *a1 = v36 + v53;
  }

  else
  {
    BOOL v5 = 0LL;
    *a1 = NAN;
  }

  return v5;
}

    (*((void (**)(id, void, void *))v3 + 2))(v3, 0LL, v6);
    goto LABEL_30;
  }

  if (!v4) {
    goto LABEL_24;
  }
  int v28 = v4;
  CFStringRef v29 = v3;
  __int16 v32 = 0u;
  int v33 = 0u;
  CFStringRef v30 = 0u;
  uint64_t v31 = 0u;
  stat v10 = v4;
  id v11 = [v10 countByEnumeratingWithState:&v30 objects:v37 count:16];
  if (v11)
  {
    int v12 = v11;
    id v13 = *(void *)v31;
LABEL_8:
    size_t v14 = 0LL;
    while (1)
    {
      if (*(void *)v31 != v13) {
        objc_enumerationMutation(v10);
      }
      ssize_t v15 = *(void **)(*((void *)&v30 + 1) + 8 * v14);
      uint64_t v23 = sub_10001267C("escrowrequest");
      CFIndex v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        size_t v20 = (void *)objc_claimAutoreleasedReturnValue([v15 uuid]);
        *(_DWORD *)__int128 buf = 138412290;
        v36 = v20;
        uint64_t v21 = v18;
        __int16 v22 = "Escrow request %@ doesn't yet have a certificate cached";
LABEL_17:
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, v22, buf, 0xCu);
      }

  ssize_t v15 = v139;
  if (a8) {
    *a8 = v31;
  }

  CFTypeRef v45 = 0LL;
  v36 = v140;
LABEL_27:

  return v45;
}

            v103 = 0LL;
          }

          else
          {
            v103 = 0LL;
LABEL_26:
          }

          uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
          int v28 = (void *)objc_claimAutoreleasedReturnValue([v27 zoneName]);
          CFStringRef v29 = sub_1000AA6AC(@"ckkszone", v28);
          CFStringRef v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);

          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
            *(_DWORD *)__int128 buf = 138412546;
            *(void *)v119 = v31;
            *(_WORD *)&v119[8] = 2112;
            *(void *)&v119[10] = v103;
            _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "Failed to create '%@' with error %@",  buf,  0x16u);
          }

LABEL_30:
          __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
          int v33 = (void *)objc_claimAutoreleasedReturnValue([v32 zoneName]);
          v34 = (void *)objc_claimAutoreleasedReturnValue([@"zone:" stringByAppendingString:v33]);

          v108 = 0u;
          v109 = 0u;
          BOOL v106 = 0u;
          v107 = 0u;
          v35 = v101[6];
          v36 = [v35 countByEnumeratingWithState:&v106 objects:v122 count:16];
          if (v36)
          {
            BOOL v37 = v36;
            v38 = *(void *)v107;
LABEL_32:
            uint32_t v39 = 0LL;
            while (1)
            {
              if (*(void *)v107 != v38) {
                objc_enumerationMutation(v35);
              }
              v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v106 + 1) + 8 * v39) subscriptionID]);
              v41 = [v40 isEqual:v34];

              if ((v41 & 1) != 0) {
                break;
              }
              if (v37 == (id)++v39)
              {
                BOOL v37 = [v35 countByEnumeratingWithState:&v106 objects:v122 count:16];
                if (v37) {
                  goto LABEL_32;
                }
                goto LABEL_38;
              }
            }

            int v42 = v101[7];
            if (!v42) {
              goto LABEL_61;
            }
            char v43 = 1;
LABEL_42:
            char v44 = (void *)objc_claimAutoreleasedReturnValue([v42 domain]);
            CFTypeRef v45 = [v101[7] code];

            if (v45 != (id)2)
            {
              if (v43) {
                goto LABEL_61;
              }
              goto LABEL_54;
            }

            uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v101[7] userInfo]);
            v47 = (void *)objc_claimAutoreleasedReturnValue([v46 objectForKeyedSubscript:CKPartialErrorsByItemIDKey]);
            char v44 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForKeyedSubscript:v34]);

            int v48 = (void *)objc_claimAutoreleasedReturnValue([v44 userInfo]);
            int v49 = (void *)objc_claimAutoreleasedReturnValue([v48 objectForKeyedSubscript:NSUnderlyingErrorKey]);

            if (!v44) {
              goto LABEL_59;
            }
            BOOL v50 = (void *)objc_claimAutoreleasedReturnValue([v44 domain]);
            if ([v50 isEqualToString:CKErrorDomain]
              && [v44 code] == (id)15
              && v49)
            {
              BOOL v51 = (void *)objc_claimAutoreleasedReturnValue([v49 domain]);
              if ([v51 isEqualToString:CKErrorDomain])
              {
                v52 = [v49 code];

                if (v52 == (id)2032)
                {
                  int v53 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
                  CFStringRef v54 = (void *)objc_claimAutoreleasedReturnValue([v53 zoneName]);
                  int v55 = sub_1000AA6AC(@"ckks", v54);
                  CFDataRef v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);

                  if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)__int128 buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_ERROR,  "zone subscription error appears to say that the zone subscription exists; this is okay!",
                      buf,
                      2u);
                  }

LABEL_61:
                  CFRange v64 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
                  CFRange v65 = (void *)objc_claimAutoreleasedReturnValue([v64 zoneName]);
                  CFRange v66 = sub_1000AA6AC(@"ckkszone", v65);
                  char v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);

                  if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
                  {
                    BOOL v96 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
                    *(_DWORD *)__int128 buf = 138412290;
                    *(void *)v119 = v96;
                    _os_log_debug_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEBUG,  "Successfully subscribed '%@'",  buf,  0xCu);
                  }

                  CFRange v62 = 1LL;
LABEL_64:

                  v67 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
                  BOOL v68 = (void *)objc_claimAutoreleasedReturnValue([v67 zoneName]);
                  v69 = sub_1000AA6AC(@"ckkszone", v68);
                  v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);

                  if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v71 = v101[7];
                    *(_DWORD *)__int128 buf = 67109890;
                    *(_DWORD *)v119 = v104;
                    *(_WORD *)&v119[4] = 2112;
                    *(void *)&v119[6] = v103;
                    *(_WORD *)&v119[14] = 1024;
                    *(_DWORD *)&v119[16] = v62;
                    v120 = 2112;
                    uint64_t v121 = v71;
                    _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "Zone setup progress: created:%d %@ subscribed:%d %@",  buf,  0x22u);
                  }

                  BOOL v72 = (void *)objc_claimAutoreleasedReturnValue([v101[4] deps]);
                  v73 = (void *)objc_claimAutoreleasedReturnValue([v72 contextID]);
                  CFStringRef v74 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
                  CFStringRef v75 = (void *)objc_claimAutoreleasedReturnValue([v74 zoneName]);
                  int v76 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSZoneStateEntry contextID:zoneName:]( &OBJC_CLASS___CKKSZoneStateEntry,  "contextID:zoneName:",  v73,  v75));

                  id v1 = v101;
                  [v76 setCkzonecreated:v104];
                  [v76 setCkzonesubscribed:v62];
                  CFStringRef v77 = v101[7];
                  if (v77)
                  {
                    v78 = (void *)objc_claimAutoreleasedReturnValue([v77 domain]);
                    CFStringRef v79 = [v101[7] code];

                    if (v79 == (id)2)
                    {
                      char v80 = (void *)objc_claimAutoreleasedReturnValue([v101[7] userInfo]);
                      v81 = (void *)objc_claimAutoreleasedReturnValue([v80 objectForKeyedSubscript:CKPartialErrorsByItemIDKey]);
                      CFStringRef v82 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
                      v78 = (void *)objc_claimAutoreleasedReturnValue([v81 objectForKeyedSubscript:v82]);

                      if (v78)
                      {
                        CFStringRef v83 = (void *)objc_claimAutoreleasedReturnValue([v78 domain]);
                        if ([v83 isEqualToString:CKErrorDomain])
                        {
                          CFDataRef v84 = [v78 code];

                          if (v84 == (id)26)
                          {
                            CFDataRef v85 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
                            CFDataRef v86 = (void *)objc_claimAutoreleasedReturnValue([v85 zoneName]);
                            CFDataRef v87 = sub_1000AA6AC(@"ckks", v86);
                            CFDataRef v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);

                            if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
                            {
                              CFDataRef v89 = v101[7];
                              *(_DWORD *)__int128 buf = 138412290;
                              *(void *)v119 = v89;
                              _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_ERROR,  "zone subscription error appears to say the zone doesn't exist, fixing status: %@",  buf,  0xCu);
                            }

                            [v76 setCkzonecreated:0];
                          }
                        }

                        else
                        {
                        }
                      }

LABEL_36:
  int v42 = sub_1000AA6AC(@"ckksscan", 0LL);
  BOOL v25 = (id)objc_claimAutoreleasedReturnValue(v42);
  __int128 v7 = v84;
  if (os_log_type_enabled((os_log_t)v25, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v93 = (__CFString *)v11;
    _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)v25,  OS_LOG_TYPE_DEBUG,  "Scanned item is for view %@, skipping",  buf,  0xCu);
  }

    -[OTCuttlefishContext rpcTrustStatusCachedStatus:reply:](self, "rpcTrustStatusCachedStatus:reply:", v10, v7);
    goto LABEL_31;
  }

  if (v19 == 3)
  {
    size_t v20 = sub_10001267C("octagon");
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "No cloudkit account present",  (uint8_t *)&buf,  2u);
    }

    (*((void (**)(id, uint64_t, void, void, void, void, void))v7 + 2))( v7,  4LL,  0LL,  0LL,  0LL,  0LL,  0LL);
    goto LABEL_31;
  }

  if ([v10 isInheritedAccount])
  {
    BOOL v25 = sub_10001267C("octagon");
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      uint64_t v24 = "Inherited account -- should circuit to cached trust value";
      goto LABEL_23;
    }

    goto LABEL_24;
  }

  __int16 v26 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext errorIfNoCKAccount:](self, "errorIfNoCKAccount:", 0LL));
  if (v26)
  {
    uint64_t v27 = sub_10001267C("octagon");
    int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "No cloudkit account present: %@",  (uint8_t *)&buf,  0xCu);
    }

    (*((void (**)(id, uint64_t, void, void, void, void, void *))v7 + 2))( v7,  4LL,  0LL,  0LL,  0LL,  0LL,  v26);
  }

  else
  {
    *(void *)&__int128 buf = 0LL;
    *((void *)&buf + 1) = &buf;
    CFRange v65 = 0x3032000000LL;
    CFRange v66 = sub_1000BFAF8;
    v67 = sub_1000BFB08;
    BOOL v68 = 0LL;
    BOOL v51 = 0LL;
    v52 = &v51;
    int v53 = 0x3032000000LL;
    CFStringRef v54 = sub_1000BFAF8;
    int v55 = sub_1000BFB08;
    CFDataRef v56 = 0LL;
    v47 = 0LL;
    int v48 = &v47;
    int v49 = 0x2020000000LL;
    BOOL v50 = 0;
    char v43 = 0LL;
    char v44 = &v43;
    CFTypeRef v45 = 0x2020000000LL;
    uint64_t v46 = -1LL;
    uint32_t v39 = 0LL;
    v40 = &v39;
    v41 = 0x2020000000LL;
    int v42 = 0;
    CFStringRef v29 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext cuttlefishXPCWrapper](self, "cuttlefishXPCWrapper"));
    CFStringRef v30 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext activeAccount](self, "activeAccount"));
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_1000C1B8C;
    v31[3] = &unk_100285318;
    v34 = &v47;
    v35 = &v51;
    v36 = &v39;
    BOOL v37 = &v58;
    p___int128 buf = &buf;
    v31[4] = self;
    __int16 v32 = v10;
    v38 = &v43;
    [v29 trustStatusWithSpecificUser:v30 reply:v31];

    (*((void (**)(id, uint64_t, void, uint64_t, void, void, id))v7 + 2))( v7,  v44[3],  *(void *)(*((void *)&buf + 1) + 40LL),  v52[5],  *((unsigned __int8 *)v48 + 24),  *((unsigned __int8 *)v40 + 24),  v59[5]);
    _Block_object_dispose(&v39, 8);
    _Block_object_dispose(&v43, 8);
    _Block_object_dispose(&v47, 8);
    _Block_object_dispose(&v51, 8);

    _Block_object_dispose(&buf, 8);
  }

LABEL_31:
  _Block_object_dispose(&v58, 8);
}

    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    return;
  }

  BOOL v8 = Value;
  BOOL v9 = CFGetTypeID(Value);
  if (v9 != CFDataGetTypeID())
  {
    uint64_t v27 = sub_10001267C("coder");
    uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412546;
      *(void *)&uint8_t buf[4] = cf;
      v47 = 2112;
      int v48 = 0LL;
      __int16 v26 = "coder for %@ was not cf data: %@";
      goto LABEL_23;
    }

    goto LABEL_24;
  }

  cfa = 0LL;
  stat v10 = sub_1001A96C8();
  Instance = _CFRuntimeCreateInstance(kCFAllocatorDefault, v10, 48LL, 0LL);
  *(void *)(Instance + 40) = 0LL;
  *(void *)(Instance + 16) = 0LL;
  *(void *)(Instance + 24) = 0LL;
  *(_BYTE *)(Instance + 32) = 0;
  *(void *)(Instance + 4_Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(Instance + 56) = 0;
  BytePtr = CFDataGetBytePtr(v8);
  size_t Length = CFDataGetLength(v8);
  size_t v14 = (uint64_t)&BytePtr[Length];
  char v43 = 0LL;
  *(void *)__int128 buf = 0xAAAAAAAAAAAAAAAALL;
  if (!ccder_decode_tag(buf, BytePtr, &BytePtr[Length])) {
    goto LABEL_26;
  }
  if (*(void *)buf == 4LL)
  {
    int v33 = sub_10001A6E4(kCFAllocatorDefault, &v43, &cfa, (uint64_t)BytePtr, v14);
    *(_BYTE *)(Instance + 32) = 0;
    goto LABEL_38;
  }

  if (*(void *)buf != 0x2000000000000010LL) {
    goto LABEL_26;
  }
  CFTypeRef v45 = 0LL;
  ssize_t v15 = ccder_decode_sequence_tl(&v45, BytePtr, v14);
  char v44 = 0xAAAAAAAAAAAAAAAALL;
  if (!ccder_decode_tag(&v44, v15, v14)) {
    goto LABEL_26;
  }
  if (v44 != 4)
  {
    if (v44 == 2 && ccder_decode_uint64(0LL, v15, v45))
    {
      *(void *)__int128 buf = 0LL;
      uint64_t v16 = ccder_decode_sequence_tl(buf, BytePtr, v14);
      if (*(void *)buf == v14)
      {
        CFTypeRef v45 = 0xAAAAAAAAAAAAAAAALL;
        CFIndex v18 = ccder_decode_uint64(&v45, v16, v14);
        if (v45 == 3)
        {
          BOOL v19 = sub_10001A6E4(kCFAllocatorDefault, &v43, &cfa, v18, *(uint64_t *)buf);
          size_t v20 = sub_100018C70((BOOL *)(Instance + 32), (uint64_t)v19, *(uint64_t *)buf);
          uint64_t v21 = sub_100018C70((BOOL *)(Instance + 56), v20, *(uint64_t *)buf);
          __int16 v22 = (uint64_t)sub_10001A6E4(kCFAllocatorDefault, (CFDataRef *)(Instance + 48), &cfa, v21, *(uint64_t *)buf);
          goto LABEL_36;
        }

        int v28 = @"Unsupported Sequence Version: %lld";
        goto LABEL_27;
      }

              __int16 v26 = cf;
              if (cf)
              {
                CFTypeRef cf = 0LL;
                CFRelease(v26);
              }
            }

            uint64_t v24 = (CFTypeRef)v12;
          }

          else
          {
            uint64_t v23 = (os_log_s *)sub_10001267C("ImportInitialSyncItems");
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)__int128 buf = 138412290;
              *(void *)&uint8_t buf[4] = cf;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "Item creation failed with: %@",  buf,  0xCu);
            }

            uint64_t v24 = cf;
            if (!cf) {
              continue;
            }
            CFTypeRef cf = 0LL;
          }

          CFRelease(v24);
          continue;
        }

        __int16 v22 = (os_log_s *)sub_10001267C("ImportInitialSyncItems");
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 138412290;
          *(void *)&uint8_t buf[4] = v9;
          BOOL v19 = v22;
          size_t v20 = "Item with unknown class: %@";
          uint64_t v21 = 12;
          goto LABEL_18;
        }
      }

      else
      {
        CFIndex v18 = (os_log_s *)sub_10001267C("ImportInitialSyncItems");
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)__int128 buf = 0;
          BOOL v19 = v18;
          size_t v20 = "Item w/o class";
          uint64_t v21 = 2;
LABEL_18:
          _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, v20, buf, v21);
        }
      }
    }
  }

  return 1LL;
}

    goto LABEL_25;
  }

  BOOL v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v8 zoneName]);
  stat v10 = sub_1000AA6AC(@"ckkskey", v9);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);

  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 138412290;
    CFRange v65 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "couldn't fetch list of remote keys: %@",  buf,  0xCu);
  }

  [*(id *)(a1 + 32) setError:v6];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 0;
  int v12 = *(void **)(a1 + 48);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  [v12 populateUnderlyingErrorsStartingWithRootError:v13];

  [*(id *)(a1 + 40) setViewKeyHierarchyState:@"error"];
  size_t v14 = 0LL;
LABEL_29:

  return v14;
}

  return v22;
}

  ssize_t v15 = v8;
LABEL_25:
  BOOL v8 = 0LL;
LABEL_5:
  if (theDict) {
    CFRelease(theDict);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v8;
}

  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v12 trust]);
  BOOL v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "circle_transport"));
  __int16 v26 = [v24 updateCircleFromRemote:v25 newCircle:v21 err:&err];

  CFRelease(v21);
  uint64_t v27 = err;
  if ((v26 & 1) != 0)
  {
LABEL_46:
    if (v27)
    {
      err = 0LL;
      CFRelease(v27);
    }

    goto LABEL_48;
  }

  if (err)
  {
    if (CFErrorGetCode(err) == 5)
    {
      CFErrorDomain Domain = CFErrorGetDomain(v27);
      if (Domain && kSOSErrorDomain)
      {
        if (!CFEqual(Domain, kSOSErrorDomain)) {
          goto LABEL_54;
        }
LABEL_51:
        v40 = sub_10001267C("SecError");
        v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v46 = cf;
          _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Incompatible circle found, abandoning membership: %@",  buf,  0xCu);
        }

        goto LABEL_54;
      }

      if (Domain == (CFErrorDomain)kSOSErrorDomain) {
        goto LABEL_51;
      }
    }

  return v15;
}

LABEL_25:
}

  *((_DWORD *)v5 + _Block_object_dispose(va, 8) = self->_attemptedJoin;
  *((_WORD *)v5 + 62) |= 4u;
  if ((*(_WORD *)&self->_has & 8) != 0)
  {
LABEL_9:
    *((_DWORD *)v5 + 9) = self->_cdpState;
    *((_WORD *)v5 + 62) |= 8u;
  }
}

  networkEvent = self->_networkEvent;
  size_t v14 = v5[8];
  if (networkEvent)
  {
    if (!v14) {
      goto LABEL_34;
    }
    -[SECC2MPNetworkEvent mergeFrom:](networkEvent, "mergeFrom:");
  }

  else
  {
    if (!v14) {
      goto LABEL_34;
    }
    -[SECC2MPMetric setNetworkEvent:](self, "setNetworkEvent:");
  }

  BOOL v5 = v17;
LABEL_34:
  genericEvent = self->_genericEvent;
  uint64_t v16 = v5[6];
  if (genericEvent)
  {
    if (v16)
    {
      -[SECC2MPGenericEvent mergeFrom:](genericEvent, "mergeFrom:");
LABEL_39:
      BOOL v5 = v17;
    }
  }

  else if (v16)
  {
    -[SECC2MPMetric setGenericEvent:](self, "setGenericEvent:");
    goto LABEL_39;
  }
}

      BOOL v51 = -1431655766;
      CFStringRef v54 = -1431655766;
      context = v27;
      CFTypeRef cf = 0LL;
      BOOL v50 = a3;
      v52 = a4;
      int v53 = a5;
      int v55 = a2;
      CFStringRef v57 = -1431655766;
      CFDataRef v56 = a7;
      v35 = (os_log_s *)sub_10001267C("SecWarning");
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        CFIndex Count = CFDictionaryGetCount(a6);
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = Count;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "Restoring backup items '%ld'",  (uint8_t *)&buf,  0xCu);
      }

      CFDictionaryApplyFunction(a6, (CFDictionaryApplierFunction)sub_10010B424, &context);
      if (v18)
      {
        BOOL v50 = -1;
        v52 = 0LL;
        CFDataRef v56 = 1;
        v38 = (os_log_s *)sub_10001267C("SecWarning");
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          uint32_t v39 = CFDictionaryGetCount(v18);
          LODWORD(buf) = 134217984;
          *(void *)((char *)&buf + 4) = v39;
          _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Restoring sysbound items '%ld'",  (uint8_t *)&buf,  0xCu);
        }

        CFDictionaryApplyFunction(v18, (CFDictionaryApplierFunction)sub_10010B424, &context);
      }

      v40 = cf;
      uint64_t v17 = cf == 0LL;
      if (cf)
      {
        if (v16)
        {
          if (*v16)
          {
            CFRelease(*v16);
            v40 = cf;
          }

          *uint64_t v16 = v40;
        }

        else
        {
          CFRelease(cf);
        }
      }

      if (sub_100098648((uint64_t)v40, v37))
      {
        v41 = v19;
        int v42 = sub_1000AA6AC(@"reset", 0LL);
        char v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "Local keychain was reset; performing local resync",
            (uint8_t *)&buf,
            2u);
        }

        char v44 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSViewManager manager](&OBJC_CLASS___CKKSViewManager, "manager"));
        [v44 rpcResyncLocal:0 reply:&stru_100284A88];

        BOOL v19 = v41;
      }

      if (!v18) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }

    *(void *)&__int128 buf = 0LL;
    *((void *)&buf + 1) = &buf;
    CFRange v62 = 0x2000000000LL;
    v63[0] = 0LL;
    v58[0] = _NSConcreteStackBlock;
    v58[1] = 0x40000000LL;
    v58[2] = sub_10010B388;
    v58[3] = &unk_100287200;
    v58[4] = &buf;
    v58[5] = v47;
    if (sub_100105354((uint64_t)v47, 2LL, v63, (uint64_t)v58))
    {
      int v28 = (os_log_s *)sub_10001267C("restore");
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v59 = 0;
        CFStringRef v29 = "Successfully deleted nonsyncable items";
        CFStringRef v30 = v28;
        uint64_t v31 = 2;
LABEL_21:
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v29, v59, v31);
      }
    }

    else
    {
      __int16 v32 = (os_log_s *)sub_10001267C("SecError");
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        int v33 = *(void *)(*((void *)&buf + 1) + 24LL);
        *(_DWORD *)uint64_t v59 = 138412290;
        char v60 = v33;
        CFStringRef v29 = "Unable to delete nonsyncable items prior to keychain restore: %@";
        CFStringRef v30 = v32;
        uint64_t v31 = 12;
        goto LABEL_21;
      }
    }

    v34 = *(const void **)(*((void *)&buf + 1) + 24LL);
    if (v34)
    {
      *(void *)(*((void *)&buf + 1) + 24LL) = 0LL;
      CFRelease(v34);
    }

    _Block_object_dispose(&buf, 8);
    uint64_t v27 = v47;
    goto LABEL_25;
  }

  sub_1000194E0(-26275, a9, @"Keybag UUID (%@) mismatch with backup (%@)", v19, v21);
  uint64_t v17 = 1LL;
  if (v18) {
    goto LABEL_42;
  }
LABEL_43:
  if (v19) {
    CFRelease(v19);
  }
  return v17;
}

  int v42 = 0LL;
LABEL_32:

  return v42;
}

      CFStringRef v30 = objc_alloc(&OBJC_CLASS___CKKSLocalResetOperation);
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
      CFIndex v18 = -[CKKSLocalResetOperation initWithDependencies:intendedState:errorState:]( v30,  "initWithDependencies:intendedState:errorState:",  v31,  @"loggedout",  @"error");

      goto LABEL_35;
    }

  networkFatalError = self->_networkFatalError;
  if (networkFatalError)
  {
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[SECC2MPError dictionaryRepresentation](networkFatalError, "dictionaryRepresentation"));
    [v3 setObject:v16 forKey:@"network_fatal_error"];
  }

  if ((*(_BYTE *)&self->_has & 4) != 0)
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_networkStatusCode));
    [v3 setObject:v17 forKey:@"network_status_code"];
  }

  networkRequestUri = self->_networkRequestUri;
  if (networkRequestUri) {
    [v3 setObject:networkRequestUri forKey:@"network_request_uri"];
  }
  BOOL v19 = self->_has;
  if ((*(_BYTE *)&v19 & 0x20) != 0)
  {
    BOOL v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_timestampC2Init));
    [v3 setObject:v37 forKey:@"timestamp_c2_init"];

    BOOL v19 = self->_has;
    if ((*(_BYTE *)&v19 & 0x80) == 0)
    {
LABEL_33:
      if ((*(_BYTE *)&v19 & 0x40) == 0) {
        goto LABEL_34;
      }
      goto LABEL_72;
    }
  }

  else if ((*(_BYTE *)&v19 & 0x80) == 0)
  {
    goto LABEL_33;
  }

  v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_timestampC2Start));
  [v3 setObject:v38 forKey:@"timestamp_c2_start"];

  BOOL v19 = self->_has;
  if ((*(_BYTE *)&v19 & 0x40) == 0)
  {
LABEL_34:
    if ((*(_WORD *)&v19 & 0x200) == 0) {
      goto LABEL_35;
    }
    goto LABEL_73;
  }

  if (self->_networkFatalError)
  {
    objc_msgSend(v10, "setNetworkFatalError:");
    CFTypeID v4 = v10;
  }

  if ((*(_BYTE *)&self->_has & 4) != 0)
  {
    v4[3] = self->_networkStatusCode;
    *((_DWORD *)v4 + 70) |= 4u;
  }

  if (self->_networkRequestUri)
  {
    objc_msgSend(v10, "setNetworkRequestUri:");
    CFTypeID v4 = v10;
  }

  __int128 v7 = self->_has;
  if ((*(_BYTE *)&v7 & 0x20) != 0)
  {
    v4[6] = self->_timestampC2Init;
    *((_DWORD *)v4 + 70) |= 0x20u;
    __int128 v7 = self->_has;
    if ((*(_BYTE *)&v7 & 0x80) == 0)
    {
LABEL_33:
      if ((*(_BYTE *)&v7 & 0x40) == 0) {
        goto LABEL_34;
      }
      goto LABEL_72;
    }
  }

  else if ((*(_BYTE *)&v7 & 0x80) == 0)
  {
    goto LABEL_33;
  }

  v4[8] = self->_timestampC2Start;
  *((_DWORD *)v4 + 70) |= 0x80u;
  __int128 v7 = self->_has;
  if ((*(_BYTE *)&v7 & 0x40) == 0)
  {
LABEL_34:
    if ((*(_WORD *)&v7 & 0x200) == 0) {
      goto LABEL_35;
    }
    goto LABEL_73;
  }

  networkFatalError = self->_networkFatalError;
  BOOL v9 = v5[20];
  if (networkFatalError)
  {
    if (!v9) {
      goto LABEL_39;
    }
    -[SECC2MPError mergeFrom:](networkFatalError, "mergeFrom:");
  }

  else
  {
    if (!v9) {
      goto LABEL_39;
    }
    -[SECC2MPNetworkEvent setNetworkFatalError:](self, "setNetworkFatalError:");
  }

  BOOL v5 = v13;
LABEL_39:
  if ((v5[35] & 4) != 0)
  {
    self->_networkStatusCode = v5[3];
    *(_DWORD *)&self->_has |= 4u;
  }

  if (v5[27])
  {
    -[SECC2MPNetworkEvent setNetworkRequestUri:](self, "setNetworkRequestUri:");
    BOOL v5 = v13;
  }

  stat v10 = *((_DWORD *)v5 + 70);
  if ((v10 & 0x20) != 0)
  {
    self->_timestampC2Init = v5[6];
    *(_DWORD *)&self->_has |= 0x20u;
    stat v10 = *((_DWORD *)v5 + 70);
    if ((v10 & 0x80) == 0)
    {
LABEL_45:
      if ((v10 & 0x40) == 0) {
        goto LABEL_46;
      }
      goto LABEL_76;
    }
  }

  else if ((v10 & 0x80) == 0)
  {
    goto LABEL_45;
  }

  self->_timestampC2Start = v5[8];
  *(_DWORD *)&self->_has |= 0x80u;
  stat v10 = *((_DWORD *)v5 + 70);
  if ((v10 & 0x40) == 0)
  {
LABEL_46:
    if ((v10 & 0x200) == 0) {
      goto LABEL_47;
    }
    goto LABEL_77;
  }

          size_t v20 = 1;
          if (!MutableCopy)
          {
LABEL_27:
            if (a5) {
              CFRelease(a5);
            }
            if (v13) {
              CFRelease(v13);
            }
            goto LABEL_31;
          }

LABEL_21:
}

LABEL_22:
  return v20;
}

  return v28;
}

      if (v10 == (id)++v12)
      {
        stat v10 = [v9 countByEnumeratingWithState:&v49 objects:v54 count:16];
        if (v10) {
          goto LABEL_8;
        }
        goto LABEL_23;
      }
    }

    size_t v14 = sub_10001267C("escrowrequest");
    ssize_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v13;
      uint64_t v16 = v15;
      uint64_t v17 = "Skipping completed escrow request (%@)";
      goto LABEL_14;
    }

    goto LABEL_15;
  }

        if (a1)
        {
          CFRetain(a1);
          if (a2 && !*a2) {
            *a2 = a1;
          }
          else {
            CFRelease(a1);
          }
        }

        return 1LL;
      case -25291LL:
        id v11 = (os_log_s *)sub_10001267C("upgr-phase3");
        int v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0LL;
        if (!v12) {
          return result;
        }
        uint64_t v16 = 138412290;
        uint64_t v17 = a1;
        BOOL v8 = "AKS is unavailable: %@";
        break;
      default:
        goto LABEL_25;
    }

    BOOL v9 = v11;
    stat v10 = 12;
    goto LABEL_17;
  }

  if (Code == -536870186 || Code == -536870184)
  {
    id v13 = (os_log_s *)sub_10001267C("upgr-phase3");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = 138412290;
      uint64_t v17 = a1;
      size_t v14 = "AKS is not ready/timing out: %@";
LABEL_20:
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v16, 0xCu);
      goto LABEL_21;
    }

    goto LABEL_21;
  }

  if (Code != -26275)
  {
LABEL_25:
    if (!a1) {
      return 0LL;
    }
    CFRetain(a1);
    if (!a2 || *a2)
    {
      CFRelease(a1);
      return 0LL;
    }

    uint64_t result = 0LL;
    *a2 = a1;
    return result;
  }

  BOOL v5 = (os_log_s *)sub_10001267C("upgr-phase3");
  CFIndex v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v6)
  {
    LOWORD(v16) = 0;
    BOOL v8 = "failed to decode keychain item";
    BOOL v9 = v5;
    stat v10 = 2;
LABEL_17:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v16, v10);
    return 0LL;
  }

  return result;
}

  if (v10)
  {
    CFRelease(v10);
    id v11 = v33;
  }

  BOOL v25 = *((unsigned __int8 *)v11 + 24);
  _Block_object_dispose(&v32, 8);
  return v25;
}
}

  v36 = 0LL;
LABEL_22:
  v35 = -[SECC2MPError hash](self->_networkFatalError, "hash");
  if ((*(_BYTE *)&self->_has & 4) != 0) {
    v34 = 2654435761u * self->_networkStatusCode;
  }
  else {
    v34 = 0LL;
  }
  int v33 = -[NSString hash](self->_networkRequestUri, "hash");
  BOOL v5 = self->_has;
  if ((*(_BYTE *)&v5 & 0x20) != 0)
  {
    __int16 v32 = 2654435761u * self->_timestampC2Init;
    if ((*(_BYTE *)&v5 & 0x80) != 0)
    {
LABEL_27:
      uint64_t v31 = 2654435761u * self->_timestampC2Start;
      if ((*(_BYTE *)&v5 & 0x40) != 0) {
        goto LABEL_28;
      }
      goto LABEL_40;
    }
  }

  else
  {
    __int16 v32 = 0LL;
    if ((*(_BYTE *)&v5 & 0x80) != 0) {
      goto LABEL_27;
    }
  }

  uint64_t v31 = 0LL;
  if ((*(_BYTE *)&v5 & 0x40) != 0)
  {
LABEL_28:
    CFStringRef v30 = 2654435761u * self->_timestampC2Now;
    if ((*(_WORD *)&v5 & 0x200) != 0) {
      goto LABEL_29;
    }
    goto LABEL_41;
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", self->_uploadCompleted));
  [v4 setObject:v16 forKey:@"uploadCompleted"];

  if ((*(_BYTE *)&self->_has & 8) != 0)
  {
LABEL_11:
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_uploadRetries));
    [v4 setObject:v9 forKey:@"uploadRetries"];
  }

  PBDataWriterWriteBOOLField(v10, self->_uploadCompleted, 6LL);
  CFTypeID v4 = v10;
  if ((*(_BYTE *)&self->_has & 8) != 0)
  {
LABEL_11:
    PBDataWriterWriteUint64Field(v10, self->_uploadRetries, 7LL);
    CFTypeID v4 = v10;
  }

  *((_BYTE *)v4 + 73) = self->_uploadCompleted;
  *((_BYTE *)v4 + 76) |= 0x20u;
  if ((*(_BYTE *)&self->_has & 8) != 0)
  {
LABEL_11:
    *((void *)v4 + 4) = self->_uploadRetries;
    *((_BYTE *)v4 + 76) |= 8u;
  }

  self->_uploadCompleted = *((_BYTE *)v4 + 73);
  *(_BYTE *)&self->_has |= 0x20u;
  if ((*((_BYTE *)v4 + 76) & 8) != 0)
  {
LABEL_11:
    self->_uploadRetries = *((void *)v4 + 4);
    *(_BYTE *)&self->_has |= 8u;
  }

    CFRelease(v3);
    goto LABEL_22;
  }

  stat v10 = sub_10001267C("backupkey");
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)size_t v20 = 138412290;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "account backup key isn't valid: %@", v20, 0xCu);
  }

  sub_1001959EC(v1, 0LL, 0LL);
LABEL_20:
  if (v3) {
    goto LABEL_21;
  }
LABEL_22:
}

        sub_1001A9ECC(a3, (__int128 *)v9);
        CFIndex v6 = a1[1];
        __int128 v7 = sub_1001AA2E8(*a1, v6, v7);
        goto LABEL_23;
      }

      sub_1001A9ECC(a3, (__int128 *)v9);
      CFIndex v6 = a1[1];
      __int128 v7 = sub_1001AA2E8(*a1, v6, v7);
      BOOL v8 = sub_1001AA2E8(*(void *)a2, *(void *)(a2 + 8), v8);
LABEL_23:
      if (v7 >= v6 || v8 >= *(void *)(a2 + 8)) {
        goto LABEL_27;
      }
    }
  }

  __int128 v7 = 0LL;
  BOOL v8 = 0LL;
LABEL_27:
  sub_1001AA278((unint64_t)a3, v6 - v7, *a1 + 20 * v7);
  return sub_1001AA278((unint64_t)a3, *(void *)(a2 + 8) - v8, *(void *)a2 + 20 * v8);
}

      stat v10 = sub_1001AA2E8(v12, v7, v10);
    }

    while (v10 < v7);
  }

  uint64_t v21 = sub_1001AB230((uint64_t)v23, a3);
  free(v23[0]);
  return v21;
}

  ssize_t v15 = 0;
  uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 8LL);
  if (v11)
  {
    uint64_t v17 = *(_DWORD *)(v16 + 24);
    if (v17)
    {
      ssize_t v15 = 6;
      if (v11 != 6)
      {
        if (v17 == 7 || v11 == 7) {
          BOOL v19 = 7;
        }
        else {
          BOOL v19 = *(_DWORD *)(v16 + 24);
        }
        if (v17 == 6) {
          ssize_t v15 = 6;
        }
        else {
          ssize_t v15 = v19;
        }
      }
    }
  }

  *(_DWORD *)(v16 + 24) = v15;
}

    goto LABEL_14;
  }

  CFDataRef v141 = CFGetTypeID(v21);
  CFTypeID TypeID = SOSCircleGetTypeID();
  if (v141 == TypeID)
  {
    v139 = 0LL;
  }

  else
  {
    v139 = (__OpaqueSOSCircle *)SOSCircleCreate(kCFAllocatorDefault, Name, 0LL);
    CFTypeRef cf = v139;
  }

  BOOL v25 = v13;
  __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([v25 trust]);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 retirees]);
  *(void *)__int128 buf = _NSConcreteStackBlock;
  *(void *)&buf[8] = 3221225472LL;
  *(void *)&buf[16] = sub_100190E50;
  char v158 = (const char *)&unk_1002917C0;
  *(void *)&v159 = v27;
  *((void *)&v159 + 1) = v25;
  v160 = a3;
  int v28 = v25;
  CFStringRef v29 = v27;
  SOSCircleForEachRetiredPeer(a3, buf);

  char v143 = v28;
  uint64_t v144 = (__OpaqueSOSCircle *)SOSCircleCopyCircle(0LL, a3, a6);
  CFStringRef v30 = [v143 peerInfo];
  if (v30) {
    HasApplicant = SOSCircleHasApplicant(v144, v30, 0LL);
  }
  else {
    HasApplicant = 0;
  }
  __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([v143 trust]);
  int v33 = (const __CFSet *)objc_claimAutoreleasedReturnValue([v32 retirees]);
  v34 = v33;
  if (v144)
  {
    BOOL v147 = 0LL;
    BOOL v148 = (uint64_t)&v147;
    v149 = 0x2020000000LL;
    LOBYTE(v150) = 0;
    if (v33)
    {
      *(void *)__int128 buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = sub_100190F90;
      char v158 = (const char *)&unk_100292A88;
      *(void *)&v159 = &v147;
      *((void *)&v159 + 1) = v144;
      CFSetApplyFunction(v33, (CFSetApplierFunction)sub_10018D314, buf);
      if (*(_BYTE *)(v148 + 24))
      {
        if (!SOSCircleCountPeers(v144))
        {
          v35 = sub_100199708(v143, (uint64_t)a6);
          if (HasApplicant)
          {
            v36 = v35;
            if (!v35) {
              goto LABEL_44;
            }
            BOOL v37 = sub_10001267C("resetToOffering");
            v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v153 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Reset to offering with last retirement and me as applicant",  v153,  2u);
            }

            if (SOSCircleResetToOffering(v144, v36, [v143 fullPeerInfo], a6)
              && (uint32_t v39 = (void *)objc_claimAutoreleasedReturnValue([v143 trust]),
                  v40 = [v39 addiCloudIdentity:v144 key:v36 err:a6],
                  v39,
                  (v40 & 1) != 0))
            {
              [v143 setNotifyBackupOnExit:1];
            }

            else
            {
LABEL_44:
              CFRelease(v144);
              uint64_t v144 = 0LL;
            }
          }

          else
          {
            v41 = sub_10001267C("circleOps");
            int v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
            if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v153 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Reset to empty with last retirement",  v153,  2u);
            }

            SOSCircleResetToEmpty(v144, 0LL);
          }
        }
      }
    }

    _Block_object_dispose(&v147, 8);
  }

  else
  {
    uint64_t v144 = 0LL;
  }

  if (!v144) {
    goto LABEL_14;
  }
  v138 = -[SOSAccountTrust fullPeerInfo](self, "fullPeerInfo");
  cf2 = (CFTypeRef)SOSFullPeerInfoGetPeerInfo(v138);
  PeerID = SOSPeerInfoGetPeerID(cf2);
  char v44 = @"No Peer";
  if (PeerID) {
    char v44 = (const __CFString *)PeerID;
  }
  CFDataRef v135 = v44;
  if (cf2) {
    v7 |= SOSCircleUpdatePeerInfo(v144, cf2);
  }
  if (SOSCircleVerify(cf, [v143 accountKey], 0))
  {
    CFTypeRef v45 = (const char *)[v143 accountKey];
LABEL_56:
    uint64_t v46 = v45;
    goto LABEL_58;
  }

  if ([v143 previousAccountKey]
    && SOSCircleVerify(cf, [v143 previousAccountKey], 0))
  {
    CFTypeRef v45 = (const char *)[v143 previousAccountKey];
    goto LABEL_56;
  }

  uint64_t v46 = 0LL;
LABEL_58:
  int v48 = v141 == TypeID && v46 != 0LL;
  int v49 = SOSCircleConcordanceTrust(cf, v144, v46, [v143 accountKey], cf2, a6);
  BOOL v50 = @"Trusted";
  BOOL v51 = 1;
  v52 = 1;
  switch(v49)
  {
    case 0:
      goto LABEL_82;
    case 1:
      if (v48) {
        BOOL v51 = 3;
      }
      else {
        BOOL v51 = 4;
      }
      BOOL v50 = @"Generation Old";
      goto LABEL_81;
    case 2:
      if (v48) {
        BOOL v51 = 3;
      }
      else {
        BOOL v51 = 0;
      }
      BOOL v50 = @"No User Signature";
      goto LABEL_81;
    case 3:
      v130 = sub_10001267C("SecError");
      v131 = (os_log_s *)objc_claimAutoreleasedReturnValue(v130);
      if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v131,  OS_LOG_TYPE_DEFAULT,  "##### No User Public Key Available, this shouldn't ever happen!!!",  buf,  2u);
      }

      abort();
    case 4:
      BOOL v50 = @"No trusted peer left";
      v52 = 4;
      BOOL v51 = 2;
      goto LABEL_82;
    case 5:
    case 6:
      if (v48) {
        BOOL v51 = 3;
      }
      else {
        BOOL v51 = 0;
      }
      BOOL v50 = @"Bad Signature";
      goto LABEL_81;
    case 7:
      int v53 = sub_10001267C("signing");
      CFStringRef v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "##### No trusted peer signature found, accepting hoping for concordance later",  buf,  2u);
      }

      BOOL v51 = 0;
      BOOL v50 = @"No trusted peer signature";
LABEL_81:
      v52 = 1;
LABEL_82:
      v134 = v52;
      uint64_t v137 = v50;
      int v55 = sub_10001267C("signing");
      CFDataRef v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v57 = off_100292E70[v51];
        *(_DWORD *)__int128 buf = 136315906;
        *(void *)&uint8_t buf[4] = v57;
        CFDataRef v58 = "trusted";
        *(_WORD *)&buf[12] = 2112;
        if (!v48) {
          CFDataRef v58 = "untrusted";
        }
        *(void *)&buf[14] = v137;
        *(_WORD *)&buf[22] = 2080;
        char v158 = v58;
        LOWORD(v159) = 2112;
        *(void *)((char *)&v159 + 2) = v135;
        _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "Decided on action [%s] based on concordance state [%@] and [%s] circle.  My PeerID is %@",  buf,  0x2Au);
      }

      break;
    default:
      char v132 = sub_10001267C("SecError");
      BOOL v133 = (os_log_s *)objc_claimAutoreleasedReturnValue(v132);
      if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v133,  OS_LOG_TYPE_DEFAULT,  "##### Bad Error Return from ConcordanceTrust",  buf,  2u);
      }

      abort();
  }

  LOBYTE(v1_Block_object_dispose(va, 8) = 1;
  uint64_t v136 = 0LL;
  switch(v51)
  {
    case 0:
      goto LABEL_119;
    case 1:
      if (!cf2 || !SOSCircleHasPeer(v144, cf2, 0LL))
      {
        CFStringRef v75 = sub_10001267C("signing");
        int v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEFAULT,  "Not countersigning, not in new circle",  buf,  2u);
        }

        CFStringRef v77 = (void *)objc_claimAutoreleasedReturnValue([v143 trust]);
        [v77 resetRingDictionary];

        goto LABEL_118;
      }

      if (SOSCircleVerifyPeerSigned(v144, cf2, 0LL))
      {
        uint64_t v59 = sub_10001267C("signing");
        char v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "Already concur with the new circle",  buf,  2u);
        }

        goto LABEL_118;
      }

      BOOL v147 = 0LL;
      if (v138 && SOSCircleConcordanceSign(v144, v138, &v147))
      {
        unsigned int v101 = sub_10001267C("signing");
        char v102 = (os_log_s *)objc_claimAutoreleasedReturnValue(v101);
        if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEFAULT, "Concurred with new circle", buf, 2u);
        }

        uint64_t v136 = v144;
      }

      else
      {
        v104 = sub_10001267C("SecError");
        char v102 = (os_log_s *)objc_claimAutoreleasedReturnValue(v104);
        if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          *(void *)&uint8_t buf[4] = v147;
          _os_log_impl( (void *)&_mh_execute_header,  v102,  OS_LOG_TYPE_DEFAULT,  "Failed to concurrence sign, error: %@",  buf,  0xCu);
        }

        uint64_t v136 = 0LL;
        LOBYTE(v1_Block_object_dispose(va, 8) = 0;
      }

      if (v147) {
        CFRelease(v147);
      }
      goto LABEL_119;
    case 2:
      if (cf2 && SOSCircleHasPeer(cf, cf2, 0LL))
      {
        CFRange v61 = sub_10001267C("account");
        CFRange v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          *(void *)&uint8_t buf[4] = cf2;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "Leaving circle with peer %@", buf, 0xCu);
        }

        debugDumpCircle(@"oldCircle", cf);
        debugDumpCircle(@"newCircle", v144);
        debugDumpCircle(@"prospective_circle", a3);
        CFRange v63 = sub_10001267C("account");
        CFRange v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        {
          CFRange v65 = [v143 accountKey];
          CFRange v66 = [v143 previousAccountKey];
          *(_DWORD *)__int128 buf = 138412802;
          *(void *)&uint8_t buf[4] = v65;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v66;
          *(_WORD *)&buf[22] = 2112;
          char v158 = v46;
          _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "Key state: accountKey %@, previousAccountKey %@, old_circle_key %@",  buf,  0x20u);
        }

        CFIndex v18 = sub_100191060(v143, (uint64_t)v144, (CFTypeRef *)a6);
        if (v18)
        {
          v67 = sub_10001267C("circleOps");
          BOOL v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
          if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "Leaving circle by newcircle state",  buf,  2u);
          }

          uint64_t v136 = v144;
        }

        else
        {
          v103 = sub_10001267C("signing");
          BOOL v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v103);
          if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "Can't leave circle, but dumping identities",  buf,  2u);
          }

          uint64_t v136 = 0LL;
        }

        -[SOSAccountTrust setDepartureCode:](self, "setDepartureCode:", v134);
        cf2 = 0LL;
      }

      else
      {
        v73 = sub_10001267C("signing");
        CFStringRef v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEFAULT,  "We are not in this circle, but we need to update account with it",  buf,  2u);
        }

        debugDumpCircle(@"oldCircle", cf);
        debugDumpCircle(@"newCircle", v144);
        debugDumpCircle(@"prospective_circle", a3);
LABEL_118:
        uint64_t v136 = 0LL;
      }

void sub_1000100A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
}

void sub_1000102C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000105C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

BOOL sub_100010AB4(id a1, __OpaqueSecDbConnection *a2)
{
  return 1;
}

BOOL sub_100010ABC(uint64_t a1, uint64_t a2)
{
  int v3 = (CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  uint64_t v4 = sqlite3_wal_checkpoint_v2(*(sqlite3 **)(a2 + 64), 0LL, 1, 0LL, 0LL);
  return sub_1000154A8(a2, v4, v3, @"wal_checkpoint(FULL)");
}

BOOL sub_100010B10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  BOOL v5 = (os_log_s *)sub_10001267C("SecWarning");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 v7 = 138412546;
    *(void *)&v7[4] = v3;
    *(_WORD *)&v7[12] = 1024;
    *(_DWORD *)&v7[14] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "SecServerDeleteAllForUser for user: %@ keepU %{BOOL}d",  v7,  0x12u);
  }

  *(void *)__int128 v7 = _NSConcreteStackBlock;
  *(void *)&v7[8] = 0x40000000LL;
  *(void *)&v7[16] = sub_1001093A8;
  BOOL v8 = &unk_100287088;
  uint64_t v9 = a2;
  uint64_t v10 = v3;
  char v12 = 0;
  uint64_t v11 = v4 + 24;
  return sub_100105354(a2, 2LL, (CFTypeRef *)(v4 + 24), (uint64_t)v7);
}

BOOL sub_100010C18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v3 = (__CFString **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  CFTypeRef cf = 0LL;
  unint64_t v10 = 0xAAAAAAAA00000000LL;
  __int128 v7 = *(_OWORD *)(a1 + 48);
  uint64_t v8 = a2;
  uint64_t v4 = v7;
  *(void *)(v7 + 104) = -1LL;
  sub_1000F7B40(kSecAttrTombstone, kCFBooleanFalse, v4);
  BOOL v5 = sub_100107624((uint64_t)sub_100107D70, (uint64_t)&v7, v3);
  if (v5)
  {
    *(void *)(v2 + 24) = cf;
  }

  else if (cf)
  {
    CFRelease(cf);
  }

  return v5;
}

void sub_100010CBC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  uint64_t v6 = CKXPCSuitableError(a3);
  id v7 = (id)objc_claimAutoreleasedReturnValue(v6);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v7);
}

void sub_100010D20(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  uint64_t v6 = CKXPCSuitableError(a3);
  id v7 = (id)objc_claimAutoreleasedReturnValue(v6);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v7);
}

void sub_100010D84(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v9 = sub_10001267C("ckkscurrent");
    unint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = a1[4];
      int v14 = 138412546;
      uint64_t v15 = v11;
      __int16 v16 = 2112;
      uint64_t v17 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "CKKS didn't find a PCS Identity for (%@): %@",  (uint8_t *)&v14,  0x16u);
    }

    uint64_t v8 = *(void (**)(void))(a1[5] + 16LL);
  }

  else
  {
    uint64_t v8 = *(void (**)(void))(a1[5] + 16LL);
  }

  v8();
  if (qword_1002DEB70 != -1) {
    dispatch_once(&qword_1002DEB70, &stru_10028EFA8);
  }
  if (byte_1002DEB68)
  {
    char v12 = (void *)a1[6];
    id v13 = (const void *)v12[3];
    if (v13)
    {
      v12[3] = 0LL;
      CFRelease(v13);
      char v12 = (void *)a1[6];
    }

    free(v12);
  }
}

void sub_100010EE4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  uint64_t v6 = CKXPCSuitableError(a3);
  id v7 = (id)objc_claimAutoreleasedReturnValue(v6);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v7);
}

void sub_100010F48(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v9 = sub_10001267C("ckkscurrent");
    unint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = a1[4];
      int v14 = 138412546;
      uint64_t v15 = v11;
      __int16 v16 = 2112;
      uint64_t v17 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "CKKS didn't find a current item for (%@): %@",  (uint8_t *)&v14,  0x16u);
    }

    uint64_t v8 = *(void (**)(void))(a1[5] + 16LL);
  }

  else
  {
    uint64_t v8 = *(void (**)(void))(a1[5] + 16LL);
  }

  v8();
  if (qword_1002DEB70 != -1) {
    dispatch_once(&qword_1002DEB70, &stru_10028EFA8);
  }
  if (byte_1002DEB68)
  {
    char v12 = (void *)a1[6];
    id v13 = (const void *)v12[3];
    if (v13)
    {
      v12[3] = 0LL;
      CFRelease(v13);
      char v12 = (void *)a1[6];
    }

    free(v12);
  }
}

void sub_1000110A8(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = a3;
  id v8 = a2;
  uint64_t v9 = CKXPCSuitableError(a4);
  id v10 = (id)objc_claimAutoreleasedReturnValue(v9);
  (*(void (**)(uint64_t, id, id, id))(v6 + 16))(v6, v8, v7, v10);
}

void sub_100011120(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_10001267C("ckkscurrent");
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = v8;
  if (!v5 || v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = *(void *)(a1 + 40);
      CFIndex v18 = (void *)objc_claimAutoreleasedReturnValue([v5 uuid]);
      *(_DWORD *)__int128 buf = 138413058;
      uint64_t v29 = v16;
      __int16 v30 = 2112;
      uint64_t v31 = v17;
      __int16 v32 = 2112;
      int v33 = v18;
      __int16 v34 = 2112;
      id v35 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "CKKS didn't find a current item for (%@,%@): %@ %@",  buf,  0x2Au);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    if (qword_1002DEB70 != -1) {
      dispatch_once(&qword_1002DEB70, &stru_10028EFA8);
    }
    if (byte_1002DEB68)
    {
      BOOL v19 = *(void **)(a1 + 64);
      size_t v20 = (const void *)v19[3];
      if (v20)
      {
        v19[3] = 0LL;
        CFRelease(v20);
        BOOL v19 = *(void **)(a1 + 64);
      }

      free(v19);
    }
  }

  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v21 = *(void *)(a1 + 32);
      uint64_t v22 = *(void *)(a1 + 40);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v5 uuid]);
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v29 = v21;
      __int16 v30 = 2112;
      uint64_t v31 = v22;
      __int16 v32 = 2112;
      int v33 = v23;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "CKKS believes current item UUID for (%@,%@) is %@. Looking up persistent ref...",  buf,  0x20u);
    }

    id v10 = *(void **)(a1 + 48);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v5 uuid]);
    char v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@,%@",  *(void *)(a1 + 32),  *(void *)(a1 + 40)));
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_1000113D4;
    v24[3] = &unk_100282D08;
    uint64_t v13 = *(void *)(a1 + 64);
    id v26 = *(id *)(a1 + 56);
    id v14 = v5;
    uint64_t v15 = *(void *)(a1 + 64);
    id v25 = v14;
    uint64_t v27 = v15;
    [v10 findItemPersistentRefByUUID:v11 extraLoggingString:v12 client:v13 complete:v24];
  }
}

void sub_1000113D4(void *a1, void *a2, void *a3)
{
  id v6 = (void *)a1[4];
  uint64_t v5 = a1[5];
  id v7 = a3;
  id v8 = a2;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 modificationDate]);
  (*(void (**)(uint64_t, id, void *, id))(v5 + 16))(v5, v8, v9, v7);

  if (qword_1002DEB70 != -1) {
    dispatch_once(&qword_1002DEB70, &stru_10028EFA8);
  }
  if (byte_1002DEB68)
  {
    id v10 = (void *)a1[6];
    uint64_t v11 = (const void *)v10[3];
    if (v11)
    {
      v10[3] = 0LL;
      CFRelease(v11);
      id v10 = (void *)a1[6];
    }

    free(v10);
  }

void sub_1000114B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = CKXPCSuitableError(a2);
  id v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v4);
}

void sub_1000114F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = CKXPCSuitableError(a2);
  id v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v4);
}

void sub_100011540(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = a3;
  id v8 = a2;
  uint64_t v9 = CKXPCSuitableError(a4);
  id v10 = (id)objc_claimAutoreleasedReturnValue(v9);
  (*(void (**)(uint64_t, id, id, id))(v6 + 16))(v6, v8, v7, v10);
}

id sub_1000115B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = CKXPCSuitableError(a3);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  [v5 callCallback:a2 error:v7];

  return [*(id *)(a1 + 40) setTransaction:0];
}

void sub_100011B58(id a1)
{
  id v1 = objc_autoreleasePoolPush();
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___SecuritydXPCServerListener);
  uint64_t v3 = (void *)qword_1002DE6F8;
  qword_1002DE6F8 = (uint64_t)v2;

  objc_autoreleasePoolPop(v1);
}

void sub_100011B98(id a1)
{
  qword_1002DE720 = (uint64_t)dispatch_queue_create("security scope control", &_dispatch_queue_attr_concurrent);
}

uint64_t sub_100011BC4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void sub_100011BD8(uint64_t a1)
{
  id v1 = (const __CFArray *)qword_1002DE708;
  context[0] = _NSConcreteStackBlock;
  context[1] = 0x40000000LL;
  context[2] = sub_100011C58;
  context[3] = &unk_100282E98;
  context[4] = *(void *)(a1 + 32);
  v3.size_t length = CFArrayGetCount((CFArrayRef)qword_1002DE708);
  v3.location = 0LL;
  CFArrayApplyFunction(v1, v3, (CFArrayApplierFunction)sub_100011BC4, context);
}

void sub_100011C58(uint64_t a1, CFTypeRef cf)
{
  if (!cf) {
    goto LABEL_8;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFSetGetTypeID())
  {
    CFTypeID v6 = CFGetTypeID(cf);
    if (v6 == CFDictionaryGetTypeID())
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      context[0] = _NSConcreteStackBlock;
      context[1] = 0x40000000LL;
      context[2] = sub_100011E18;
      context[3] = &unk_100282E78;
      context[4] = Mutable;
      CFDictionaryApplyFunction((CFDictionaryRef)cf, (CFDictionaryApplierFunction)sub_100011E94, context);
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), Mutable);
      return;
    }

CFMutableArrayRef sub_100011D8C(const __CFSet *a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  context[0] = _NSConcreteStackBlock;
  context[1] = 0x40000000LL;
  context[2] = sub_100011EAC;
  context[3] = &unk_100282F58;
  context[4] = Mutable;
  CFSetApplyFunction(a1, (CFSetApplierFunction)sub_100011BC4, context);
  return Mutable;
}

void sub_100011E18(uint64_t a1, const void *a2, CFTypeRef cf)
{
  if (cf)
  {
    CFTypeID v6 = CFGetTypeID(cf);
    if (v6 == CFSetGetTypeID())
    {
      CFMutableArrayRef v7 = sub_100011D8C((const __CFSet *)cf);
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, v7);
      if (v7) {
        CFRelease(v7);
      }
    }
  }

uint64_t sub_100011E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

void sub_100011EAC(uint64_t a1, const void *a2)
{
}

void sub_100011EB4(const __CFDictionary *a1, int a2)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  context[0] = _NSConcreteStackBlock;
  context[1] = 0x40000000LL;
  context[2] = sub_100011F78;
  context[3] = &unk_100282ED8;
  context[4] = Mutable;
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)sub_100011E94, context);
  if (CFDictionaryGetCount(Mutable) >= 1) {
    sub_100012168(a2, (uint64_t)Mutable);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_100011F78(uint64_t a1, const __CFNumber *cf, const __CFString *a3)
{
  CFNumberRef v4 = cf;
  if (cf)
  {
    CFTypeID v6 = CFGetTypeID(cf);
    if (v6 == CFStringGetTypeID())
    {
      if (CFEqual(v4, @"Emergency"))
      {
        int v7 = 0;
LABEL_22:
        int valuePtr = v7;
        CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
        goto LABEL_23;
      }

      if (CFEqual(v4, @"Alert"))
      {
        int v7 = 1;
        goto LABEL_22;
      }

      if (CFEqual(v4, @"Critical"))
      {
        int v7 = 2;
        goto LABEL_22;
      }

      if (CFEqual(v4, @"Error"))
      {
        int v7 = 3;
        goto LABEL_22;
      }

      if (CFEqual(v4, @"Warning"))
      {
        int v7 = 4;
        goto LABEL_22;
      }

      if (CFEqual(v4, @"Notice"))
      {
        int v7 = 5;
        goto LABEL_22;
      }

      if (CFEqual(v4, @"Info"))
      {
        int v7 = 6;
        goto LABEL_22;
      }

      if (CFEqual(v4, @"Debug"))
      {
        int v7 = 7;
        goto LABEL_22;
      }
    }

    else
    {
      CFTypeID v8 = CFGetTypeID(v4);
      if (v8 == CFNumberGetTypeID())
      {
        CFRetain(v4);
        if (a3) {
          goto LABEL_24;
        }
        goto LABEL_29;
      }
    }

    CFNumberRef v4 = 0LL;
    if (a3) {
      goto LABEL_24;
    }
LABEL_29:
    if (!v4) {
      return;
    }
    goto LABEL_30;
  }

LABEL_23:
  if (!a3) {
    goto LABEL_29;
  }
LABEL_24:
  CFTypeID v9 = CFGetTypeID(a3);
  if (v9 != CFStringGetTypeID()) {
    goto LABEL_29;
  }
  id v10 = sub_1000122E0(a3);
  uint64_t v11 = v10;
  if (v4 && v10)
  {
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 32), v4, v10);
    CFRelease(v4);
    CFNumberRef v4 = v11;
LABEL_30:
    CFRelease(v4);
    return;
  }

  if (v4) {
    CFRelease(v4);
  }
  CFNumberRef v4 = v11;
  if (v11) {
    goto LABEL_30;
  }
}

      [v23 startOctagonStateMachine];
      BOOL v37 = objc_alloc(&OBJC_CLASS___OTMetricsSessionData);
      v38 = (void *)objc_claimAutoreleasedReturnValue([v17 flowID]);
      uint32_t v39 = (void *)objc_claimAutoreleasedReturnValue([v17 deviceSessionID]);
      v40 = -[OTMetricsSessionData initWithFlowID:deviceSessionID:](v37, "initWithFlowID:deviceSessionID:", v38, v39);
      [v23 setSessionMetrics:v40];

      v41 = _OctagonSignpostLogSystem([v23 setShouldSendMetricsForOctagon:1]);
      int v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
      char v43 = _OctagonSignpostCreate();
      CFTypeRef v45 = v44;

      v47 = _OctagonSignpostLogSystem(v46);
      int v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
      int v49 = v48;
      if (v43 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v48))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v49,  OS_SIGNPOST_INTERVAL_BEGIN,  v43,  "PairingChannelAcceptorVoucher",  " enableTelemetry=YES ",  buf,  2u);
      }

      BOOL v51 = _OctagonSignpostLogSystem(v50);
      v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 134217984;
        *(void *)&uint8_t buf[4] = v43;
        _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "BEGIN [%lld]: PairingChannelAcceptorVoucher  enableTelemetry=YES ",  buf,  0xCu);
      }

      *(void *)__int128 buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      LOBYTE(v71) = 0;
      v63[0] = _NSConcreteStackBlock;
      v63[1] = 3221225472LL;
      v63[2] = sub_10004E328;
      v63[3] = &unk_100283FC8;
      CFRange v66 = buf;
      CFRange v64 = v23;
      v67 = v43;
      BOOL v68 = v45;
      CFRange v65 = v22;
      [v64 rpcVoucherWithConfiguration:v18 permanentInfo:v19 permanentInfoSig:v20 stableInfo:v61 stableInfoSig:v62 reply:v63];

      _Block_object_dispose(buf, 8);
      id v25 = 0LL;
      goto LABEL_32;
    }

    int v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    CFDataRef v56 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "NSString *getKCPairingIntent_Capability_LimitedPeer(void)"));
    objc_msgSend( v55,  "handleFailureInFunction:file:lineNumber:description:",  v56,  @"OTManager.m",  112,  @"%s",  dlerror());

LABEL_36:
    __break(1u);
  }

  id v35 = sub_10001267C("octagon");
  v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412546;
    *(void *)&uint8_t buf[4] = v17;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v25;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Rejecting a rpcVoucher RPC for arguments (%@): %@",  buf,  0x16u);
  }

  (*((void (**)(id, void, void, void *))v22 + 2))(v22, 0LL, 0LL, v25);
LABEL_33:
}

  if (a5)
  {
    id v14 = v14;
    *a5 = v14;
  }

  return v36;
}

  return v40;
}

  BOOL v37 = (void *)objc_claimAutoreleasedReturnValue([v346 currentTLKPointer]);
  v38 = v37 == 0LL;

  if (v38)
  {
    uint32_t v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    v40 = (void *)objc_claimAutoreleasedReturnValue([v39 zoneName]);
    v41 = sub_1000AA6AC(@"ckksheal", v40);
    int v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);

    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "No current TLK pointer?", buf, 2u);
    }

    char v43 = objc_alloc(&OBJC_CLASS___CKKSCurrentKeyPointer);
    char v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contextID]);
    CFTypeRef v45 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    uint64_t v46 = -[CKKSCurrentKeyPointer initForClass:contextID:currentKeyUUID:zoneID:encodedCKRecord:]( v43,  "initForClass:contextID:currentKeyUUID:zoneID:encodedCKRecord:",  @"tlk",  v44,  0LL,  v45,  0LL);
    [v346 setCurrentTLKPointer:v46];
  }

  v47 = (void *)objc_claimAutoreleasedReturnValue([v346 currentClassAPointer]);
  int v48 = v47 == 0LL;

  if (v48)
  {
    int v49 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    BOOL v50 = (void *)objc_claimAutoreleasedReturnValue([v49 zoneName]);
    BOOL v51 = sub_1000AA6AC(@"ckksheal", v50);
    v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);

    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "No current ClassA pointer?", buf, 2u);
    }

    int v53 = objc_alloc(&OBJC_CLASS___CKKSCurrentKeyPointer);
    CFStringRef v54 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contextID]);
    int v55 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    CFDataRef v56 = -[CKKSCurrentKeyPointer initForClass:contextID:currentKeyUUID:zoneID:encodedCKRecord:]( v53,  "initForClass:contextID:currentKeyUUID:zoneID:encodedCKRecord:",  @"classA",  v54,  0LL,  v55,  0LL);
    [v346 setCurrentClassAPointer:v56];
  }

  CFStringRef v57 = (void *)objc_claimAutoreleasedReturnValue([v346 currentClassCPointer]);
  CFDataRef v58 = v57 == 0LL;

  if (v58)
  {
    uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    char v60 = (void *)objc_claimAutoreleasedReturnValue([v59 zoneName]);
    CFRange v61 = sub_1000AA6AC(@"ckksheal", v60);
    CFRange v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);

    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "No current ClassC pointer?", buf, 2u);
    }

    CFRange v63 = objc_alloc(&OBJC_CLASS___CKKSCurrentKeyPointer);
    CFRange v64 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contextID]);
    CFRange v65 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    CFRange v66 = -[CKKSCurrentKeyPointer initForClass:contextID:currentKeyUUID:zoneID:encodedCKRecord:]( v63,  "initForClass:contextID:currentKeyUUID:zoneID:encodedCKRecord:",  @"classC",  v64,  0LL,  v65,  0LL);
    [v346 setCurrentClassCPointer:v66];
  }

  v67 = (void *)objc_claimAutoreleasedReturnValue([v346 currentTLKPointer]);
  BOOL v68 = (void *)objc_claimAutoreleasedReturnValue([v67 currentKeyUUID]);
  if (!v68) {
    goto LABEL_62;
  }
  v69 = (void *)objc_claimAutoreleasedReturnValue([v346 currentClassAPointer]);
  v70 = (void *)objc_claimAutoreleasedReturnValue([v69 currentKeyUUID]);
  if (!v70)
  {
LABEL_61:

LABEL_62:
    goto LABEL_63;
  }

  uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue([v346 currentClassCPointer]);
  BOOL v72 = (void *)objc_claimAutoreleasedReturnValue([v71 currentKeyUUID]);
  if (!v72)
  {
LABEL_60:

    goto LABEL_61;
  }

  v73 = (void *)objc_claimAutoreleasedReturnValue([v346 tlk]);
  if (!v73)
  {
LABEL_59:

    goto LABEL_60;
  }

  CFStringRef v74 = (void *)objc_claimAutoreleasedReturnValue([v346 classA]);
  if (!v74)
  {
LABEL_58:

    goto LABEL_59;
  }

  obj = (id)objc_claimAutoreleasedReturnValue([v346 classC]);
  if (!obj)
  {

    goto LABEL_58;
  }

  to = (id *)objc_claimAutoreleasedReturnValue([v346 classA]);
  v334 = (void *)objc_claimAutoreleasedReturnValue([to parentKeyUUID]);
  v337 = (void *)objc_claimAutoreleasedReturnValue([v346 tlk]);
  v332 = (void *)objc_claimAutoreleasedReturnValue([v337 uuid]);
  if ([v334 isEqualToString:v332])
  {
    v329 = (id)objc_claimAutoreleasedReturnValue([v346 classC]);
    v326 = (void *)objc_claimAutoreleasedReturnValue([v329 parentKeyUUID]);
    CFStringRef v75 = (void *)objc_claimAutoreleasedReturnValue([v346 tlk]);
    int v76 = (void *)objc_claimAutoreleasedReturnValue([v75 uuid]);
    froma = [v326 isEqualToString:v76];

    CFStringRef v77 = froma ^ 1;
  }

  else
  {
    CFStringRef v77 = 1;
  }

  if ((v77 & 1) == 0)
  {
    CFStringRef v156 = (void *)objc_claimAutoreleasedReturnValue([v346 tlk]);
    v348 = 0LL;
    v157 = [v156 validTLK:&v348];
    char v90 = v348;

    if ((v157 & 1) == 0)
    {
      uint64_t v169 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:underlying:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:underlying:",  @"CKKSErrorDomain",  34LL,  @"Invalid TLK from CloudKit (during heal)",  v90));
      v170 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
      uint64_t v171 = (void *)objc_claimAutoreleasedReturnValue([v170 zoneName]);
      uint64_t v172 = sub_1000AA6AC(@"ckkskey", v171);
      CFDataRef v173 = (os_log_s *)objc_claimAutoreleasedReturnValue(v172);

      if (os_log_type_enabled(v173, OS_LOG_TYPE_ERROR))
      {
        v174 = (void *)objc_claimAutoreleasedReturnValue([v346 tlk]);
        *(_DWORD *)__int128 buf = 138412546;
        *(void *)&uint8_t buf[4] = v174;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v169;
        _os_log_impl( (void *)&_mh_execute_header,  v173,  OS_LOG_TYPE_ERROR,  "CKKS claims %@ is not a valid TLK: %@",  buf,  0x16u);
      }

      [*(id *)(a1 + 32) setViewKeyHierarchyState:@"error"];
      [*(id *)(a1 + 48) populateUnderlyingErrorsStartingWithRootError:v90];
      *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 0;

      goto LABEL_56;
    }

    char v158 = (void *)objc_claimAutoreleasedReturnValue([v346 tlk]);
    v159 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contextID]);
    v160 = *(void *)(a1 + 56);
    v347 = v90;
    int v161 = [v158 tlkMaterialPresentOrRecoverableViaTLKShareForContextID:v159 forTrustStates:v160 error:&v347];
    int v162 = v347;

    if ((v161 & 1) != 0)
    {
      v163 = *(void **)(a1 + 40);
      v164 = (void *)objc_claimAutoreleasedReturnValue([v346 tlk]);
      LOBYTE(v163) = [v163 ensureKeyPresent:v164 viewState:*(void *)(a1 + 32)];

      v165 = *(void **)(a1 + 40);
      CFBooleanRef v166 = (void *)objc_claimAutoreleasedReturnValue([v346 classA]);
      LOBYTE(v165) = [v165 ensureKeyPresent:v166 viewState:*(void *)(a1 + 32)];

      if ((v165 & 1) == 0
        || (v167 = *(void **)(a1 + 40),
            v168 = (void *)objc_claimAutoreleasedReturnValue([v346 classC]),
            LOBYTE(v167) = [v167 ensureKeyPresent:v168 viewState:*(void *)(a1 + 32)],  v168,  (v167 & 1) == 0))
      {
LABEL_135:
        v91 = 0LL;
        *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 0;
LABEL_141:
        char v90 = v162;
        goto LABEL_115;
      }

      [*(id *)(a1 + 32) setViewKeyHierarchyState:@"ready"];
    }

    else
    {
      v181 = a1;
      if (v162
        && (BOOL v182 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]),
            v183 = (void *)objc_claimAutoreleasedReturnValue([v182 lockStateTracker]),
            v184 = [v183 isLockedError:v162],
            v183,
            v182,
            v181 = a1,
            v184))
      {
        v185 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
        CFStringRef v186 = (void *)objc_claimAutoreleasedReturnValue([v185 zoneName]);
        v187 = sub_1000AA6AC(@"ckkskey", v186);
        uint64_t v188 = (os_log_s *)objc_claimAutoreleasedReturnValue(v187);

        if (os_log_type_enabled(v188, OS_LOG_TYPE_DEFAULT))
        {
          v189 = (void *)objc_claimAutoreleasedReturnValue([v346 tlk]);
          *(_DWORD *)__int128 buf = 138412290;
          *(void *)&uint8_t buf[4] = v189;
          _os_log_impl( (void *)&_mh_execute_header,  v188,  OS_LOG_TYPE_DEFAULT,  "Received a TLK(%@), but keybag appears to be locked. Entering a waiting state.",  buf,  0xCu);
        }

        uint64_t v190 = off_100290DF0;
      }

      else
      {
        BOOL v191 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v181 + 32) zoneID]);
        v192 = (void *)objc_claimAutoreleasedReturnValue([v191 zoneName]);
        CFDataRef v193 = sub_1000AA6AC(@"ckkskey", v192);
        uint64_t v188 = (os_log_s *)objc_claimAutoreleasedReturnValue(v193);

        if (os_log_type_enabled(v188, OS_LOG_TYPE_DEFAULT))
        {
          CFDataRef v194 = (void *)objc_claimAutoreleasedReturnValue([v346 tlk]);
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = v194;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v162;
          _os_log_impl( (void *)&_mh_execute_header,  v188,  OS_LOG_TYPE_DEFAULT,  "Received a TLK(%@) which we don't have in the local keychain: %@",  buf,  0x16u);
        }

        uint64_t v190 = &off_100290DF8;
      }

      [*(id *)(a1 + 32) setViewKeyHierarchyState:*v190];
      [*(id *)(a1 + 48) populateUnderlyingErrorsStartingWithRootError:v162];
      *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 0;
    }

    v91 = 1LL;
    goto LABEL_141;
  }

  return (char)v6;
}

LABEL_32:
  id v26 = (void *)objc_claimAutoreleasedReturnValue([0 uuid]);
  uint64_t v27 = v26 == 0LL;

  if (v27)
  {
    v40 = sub_10001267C("escrowrequest");
    v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "No pending escrow request has a prerecord",  buf,  2u);
    }

    -[EscrowRequestPerformEscrowEnrollOperation setNextState:](self, "setNextState:", @"nothing_to_do");
  }

  else
  {
    id v25 = 0LL;
LABEL_34:
    int v28 = sub_10001267C("escrowrequest");
    uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v30 = (void *)objc_claimAutoreleasedReturnValue([v25 uuid]);
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "escrow request have pre-record uploading: %@",  buf,  0xCu);
    }

    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSResultOperation named:withBlock:]( &OBJC_CLASS___CKKSResultOperation,  "named:withBlock:",  @"cdp-finish",  &stru_100284BE8));
    -[CKKSGroupOperation dependOnBeforeGroupFinished:](self, "dependOnBeforeGroupFinished:", v31);
    __int16 v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v32 timeIntervalSince1970];
    [v25 setLastEscrowAttemptTime:(unint64_t)(v33 * 1000.0)];

    objc_msgSend(v25, "setUploadRetries:", (char *)objc_msgSend(v25, "uploadRetries") + 1);
    int v48 = 0LL;
    [v25 saveToKeychain:&v48];
    __int16 v34 = v48;
    if (v34)
    {
      id v35 = sub_10001267C("SecError");
      v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = 0LL;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "escrowrequest: unable to save last escrow time: %@",  buf,  0xCu);
      }
    }

    *(void *)__int128 buf = 0xAAAAAAAAAAAAAAAALL;
    objc_initWeak((id *)buf, self);
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472LL;
    v43[2] = sub_10009B834;
    v43[3] = &unk_100284C10;
    objc_copyWeak(&v47, (id *)buf);
    BOOL v37 = v25;
    char v44 = v37;
    v38 = v34;
    CFTypeRef v45 = v38;
    uint32_t v39 = v31;
    uint64_t v46 = v39;
    +[EscrowRequestPerformEscrowEnrollOperation cdpUploadPrerecord:secretType:reply:]( &OBJC_CLASS___EscrowRequestPerformEscrowEnrollOperation,  "cdpUploadPrerecord:secretType:reply:",  v37,  3LL,  v43);

    objc_destroyWeak(&v47);
    objc_destroyWeak((id *)buf);
  }

        CFRelease(v12);
        CFTypeID v9 = v24;
        goto LABEL_24;
      }

      if (!v12)
      {
        CFRetain(v15);
        CFTypeID v9 = v15;
LABEL_27:
        CFRelease(v15);
        return v9;
      }

      Protection = (const __CFData *)SecAccessControlGetProtection(v12);
      BOOL v19 = (const void *)SecAccessControlGetProtection(v15);
      size_t v20 = v19;
      if (!Protection || !v19 || !CFEqual(Protection, v19))
      {
        uint64_t v21 = sub_10001267C("SecError");
        uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          id v26 = 138412546;
          uint64_t v27 = Protection;
          int v28 = 2112;
          uint64_t v29 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "SecDbItemCopyAccessControl accc %@ != pdmn %@, setting pdmn to accc value",  (uint8_t *)&v26,  0x16u);
        }

        sub_10001BB24(@"Corrupted item on decrypt accc != pdmn", 0x53C00002u);
        uint64_t v23 = (void *)sub_1000E6D50(a1[2], 14LL, a2);
        if (!sub_1000E7958((uint64_t)a1, v23, Protection, a2))
        {
          uint64_t v24 = 0LL;
          goto LABEL_23;
        }
      }

  if (v7) {
    CFRelease(v7);
  }
}

  return v28;
}

    id v26 = 0;
    goto LABEL_27;
  }

  if (v8)
  {
    if (!-[CKKSKeychainView waitForPolicy:error:](self, "waitForPolicy:error:", 5000000000LL, a7))
    {
      uint64_t v24 = sub_1000AA6AC(@"ckks", 0LL);
      id v25 = (id)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled((os_log_t)v25, OS_LOG_TYPE_ERROR))
      {
        __int16 v32 = 138412290;
        int v33 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v25,  OS_LOG_TYPE_ERROR,  "Haven't yet received a policy; failing %@",
          (uint8_t *)&v32,
          0xCu);
      }

      goto LABEL_23;
    }
  }

  else if (!-[CKKSKeychainView waitForPolicy:error:](self, "waitForPolicy:error:", 500000000LL, 0LL))
  {
    __int16 v30 = sub_1000AA6AC(@"ckks", 0LL);
    id v25 = (id)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled((os_log_t)v25, OS_LOG_TYPE_ERROR))
    {
      __int16 v32 = 138412290;
      int v33 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v25,  OS_LOG_TYPE_ERROR,  "Haven't yet received a policy; expect failure later doing %@",
        (uint8_t *)&v32,
        0xCu);
    }

    id v26 = 1;
    goto LABEL_27;
  }

  id v26 = 1;
LABEL_28:

  return v26;
}

          uint64_t v22 = 0LL;
          goto LABEL_24;
        }
      }

      else
      {
      }

      int v28 = sub_10001267C("SecError");
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        v38[0] = v23;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "SecDbKeychainItemV7: Unable to create key from retrieved data: %@",  buf,  0xCu);
      }

      if (a8) {
        goto LABEL_18;
      }
      goto LABEL_23;
    }
  }

            v17[0] = _NSConcreteStackBlock;
            v17[1] = 3221225472LL;
            v17[2] = sub_1001A1084;
            v17[3] = &unk_100292250;
            v17[4] = a2;
            v17[5] = v19;
            uint64_t v15 = v17;
            goto LABEL_14;
          }
        }

        else
        {
          char v12 = 0LL;
        }

        id v14 = 0LL;
        goto LABEL_23;
      }
    }
  }

    BOOL v19 = *(&off_100292C80 + v14);
LABEL_25:
    size_t v20 = sub_10001267C("sosauthkit");
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412802;
      int v28 = (unint64_t)v11;
      uint64_t v29 = 2048;
      __int16 v30 = v14;
      uint64_t v31 = 2112;
      __int16 v32 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Security level for altDSID %@ is %lu.  Account type: %@",  buf,  0x20u);
    }

    uint64_t v22 = sub_10001267C("sosauthkit");
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = "isn't";
      if (v9) {
        uint64_t v24 = "is";
      }
      *(_DWORD *)__int128 buf = 136315138;
      int v28 = (unint64_t)v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Account %s CDP Capable", buf, 0xCu);
    }

LABEL_32:
    goto LABEL_33;
  }

  id v10 = sub_10001267C("sosauthkit");
  CFRange v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "ACAccount not available", buf, 2u);
  }

  LOBYTE(v9) = 0;
LABEL_33:

  return v9;
}

void sub_100012168(int a1, uint64_t a2)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 0x40000000LL;
  v2[2] = sub_1000121EC;
  v2[3] = &unk_100282F98;
  int v3 = a1;
  v2[4] = a2;
  if (qword_1002DE728 != -1) {
    dispatch_once(&qword_1002DE728, &stru_100282F38);
  }
  dispatch_barrier_sync((dispatch_queue_t)qword_1002DE720, v2);
}

void sub_1000121EC(uint64_t a1)
{
  CFMutableArrayRef Mutable = (__CFArray *)qword_1002DE708;
  if (qword_1002DE708)
  {
    CFNullRef v3 = kCFNull;
  }

  else
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 4LL, &kCFTypeArrayCallBacks);
    CFNullRef v3 = kCFNull;
    int v4 = 5;
    do
    {
      CFArrayAppendValue(Mutable, kCFNull);
      --v4;
    }

    while (v4);
    qword_1002DE708 = (uint64_t)Mutable;
  }

  CFArraySetValueAtIndex(Mutable, *(int *)(a1 + 40), *(const void **)(a1 + 32));
  CFMutableArrayRef v5 = (const __CFArray *)qword_1002DE708;
  v8.size_t length = CFArrayGetCount((CFArrayRef)qword_1002DE708);
  v8.location = 0LL;
  CFIndex CountOfValue = CFArrayGetCountOfValue(v5, v8, v3);
  if (CountOfValue == CFArrayGetCount(v5))
  {
    int v7 = (const void *)qword_1002DE708;
    if (qword_1002DE708)
    {
      qword_1002DE708 = 0LL;
      CFRelease(v7);
    }
  }

__CFSet *sub_1000122E0(const __CFString *a1)
{
  CFMutableArrayRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
  int HasPrefix = CFStringHasPrefix(a1, @"-");
  if (HasPrefix)
  {
    CFIndex Length = CFStringGetLength(@"-");
    v11.size_t length = CFStringGetLength(a1) - 1;
    v11.location = Length;
    CFStringRef v5 = CFStringCreateWithSubstring(kCFAllocatorDefault, a1, v11);
    a1 = v5;
  }

  else
  {
    CFStringRef v5 = 0LL;
  }

  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(kCFAllocatorDefault, a1, @",");
  int v7 = ArrayBySeparatingStrings;
  if (ArrayBySeparatingStrings)
  {
    context[0] = _NSConcreteStackBlock;
    context[1] = 0x40000000LL;
    context[2] = sub_100012470;
    context[3] = &unk_100282F78;
    context[4] = Mutable;
    v10.size_t length = CFArrayGetCount(ArrayBySeparatingStrings);
    v10.location = 0LL;
    CFArrayApplyFunction(v7, v10, (CFArrayApplierFunction)sub_100011BC4, context);
  }

  CFSetRemoveValue(Mutable, @"none");
  CFSetRemoveValue(Mutable, &stru_100294B48);
  if (CFSetContainsValue(Mutable, @"all"))
  {
    CFSetRemoveAllValues(Mutable);
    if (HasPrefix) {
      goto LABEL_11;
    }
  }

  else if (!HasPrefix)
  {
    goto LABEL_11;
  }

  CFSetSetValue(Mutable, @"-");
LABEL_11:
  if (v7) {
    CFRelease(v7);
  }
  if (v5) {
    CFRelease(v5);
  }
  return Mutable;
}

void sub_100012470(uint64_t a1, const __CFString *cf)
{
  if (cf)
  {
    CFTypeID v4 = CFGetTypeID(cf);
    if (v4 == CFStringGetTypeID())
    {
      MutableCopy = CFStringCreateMutableCopy(kCFAllocatorDefault, 0LL, cf);
      CFStringTrimWhitespace(MutableCopy);
      CFSetSetValue(*(CFMutableSetRef *)(a1 + 32), MutableCopy);
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
    }
  }

void sub_1000124F8(const __CFString *a1, int a2)
{
  CFNullRef v3 = sub_1000122E0(a1);
  sub_100012168(a2, (uint64_t)v3);
  if (v3) {
    CFRelease(v3);
  }
}

const void *sub_10001253C(const __CFString *a1)
{
  if (a1) {
    id v1 = a1;
  }
  else {
    id v1 = @"logging";
  }
  os_unfair_lock_lock_with_options(&unk_1002DE710, 0x10000LL);
  CFMutableArrayRef Mutable = (const __CFDictionary *)qword_1002DE718;
  if (!qword_1002DE718)
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, &kCFCopyStringDictionaryKeyCallBacks, 0LL);
    qword_1002DE718 = (uint64_t)Mutable;
  }

  Value = CFDictionaryGetValue(Mutable, v1);
  if (!Value)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 0x40000000LL;
    v5[2] = sub_100012640;
    v5[3] = &unk_100282EF8;
    v5[4] = v1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 0x40000000LL;
    void v6[2] = sub_1000134E4;
    v6[3] = &unk_100283030;
    v6[4] = v5;
    sub_10001337C(v1, (uint64_t)v6);
    Value = CFDictionaryGetValue((CFDictionaryRef)qword_1002DE718, v1);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1002DE710);
  return Value;
}

void sub_100012640(uint64_t a1, const char *a2)
{
  uint64_t v2 = (__CFDictionary *)qword_1002DE718;
  CFNullRef v3 = *(const void **)(a1 + 32);
  os_log_t v4 = os_log_create("com.apple.securityd", a2);
  CFDictionaryAddValue(v2, v3, v4);
}

const void *sub_10001267C(const char *a1)
{
  if (!a1) {
    return sub_10001253C(0LL);
  }
  uint64_t v2 = CFStringCreateWithCString(kCFAllocatorDefault, a1, 0x600u);
  CFNullRef v3 = sub_10001253C(v2);
  if (v2) {
    CFRelease(v2);
  }
  return v3;
}

unint64_t sub_1000126F8( const __CFAllocator *a1, CFMutableDictionaryRef *a2, CFTypeRef *a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    unint64_t v21 = 0LL;
    unint64_t v9 = ccder_decode_constructed_tl(0x2000000000000011LL, &v21, a4, a5);
    if (v9)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (Mutable)
      {
        unint64_t v12 = v21;
        if (v9 >= v21)
        {
          unint64_t v19 = v9;
          if (v9 != v21)
          {
LABEL_26:
            CFRelease(Mutable);
            return v19;
          }
        }

        else
        {
          while (1)
          {
            uint64_t v24 = 0LL;
            uint64_t v13 = (const UInt8 *)ccder_decode_constructed_tl(0x2000000000000010LL, &v24, v9, v12);
            if (!v13)
            {
              sub_1000194B4( -1LL,  @"com.apple.security.cfder.error",  0LL,  a3,  v14,  @"Unknown data encoding, expected CCDER_CONSTRUCTED_SEQUENCE");
              goto LABEL_24;
            }

            xpc_object_t value = 0LL;
            key = 0LL;
            uint64_t v15 = sub_100019634(a1, (CFBooleanRef *)&key, a3, v13, v24);
            uint64_t v16 = sub_100019634(a1, (CFBooleanRef *)&value, a3, v15, v24);
            uint64_t v17 = key;
            if (!v16) {
              break;
            }
            unint64_t v9 = (unint64_t)v16;
            CFIndex v18 = value;
            CFDictionaryAddValue(Mutable, key, value);
            if (v17) {
              CFRelease(v17);
            }
            if (v18) {
              CFRelease(v18);
            }
            unint64_t v12 = v21;
            if (v9 >= v21) {
              goto LABEL_25;
            }
          }

          if (key) {
            CFRelease(key);
          }
          if (value) {
            CFRelease(value);
          }
LABEL_24:
          unint64_t v9 = 0LL;
          unint64_t v12 = v21;
LABEL_25:
          unint64_t v19 = v9;
          unint64_t v9 = v12;
          if (v19 != v12) {
            goto LABEL_26;
          }
        }

        goto LABEL_18;
      }

      sub_1000194B4(-3LL, @"com.apple.security.cfder.error", 0LL, a3, v10, @"Failed to create dictionary");
      unint64_t v9 = 0LL;
      if (!v21) {
LABEL_18:
      }
        *a2 = Mutable;
    }

    else
    {
      sub_1000194B4( -1LL,  @"com.apple.security.cfder.error",  0LL,  a3,  v8,  @"Unknown data encoding, expected CCDER_CONSTRUCTED_SET");
    }
  }

  else
  {
    sub_1000194B4(-6LL, @"com.apple.security.cfder.error", 0LL, a3, a5, @"null input");
    return 0LL;
  }

  return v9;
}

uint64_t sub_100012920(const __CFDictionary *a1, uint64_t a2)
{
  __int128 v3 = xmmword_100204FD0;
  LOBYTE(v3) = 1;
  uint64_t v4 = a2;
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)sub_100012980, &v3);
  if ((_BYTE)v3) {
    return ccder_sizeof(0x2000000000000011LL, *((void *)&v3 + 1));
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100012980(uint64_t result, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_BYTE *)a3)
  {
    uint64_t result = sub_1000129C4((const __CFString *)result, a2, *(CFTypeRef **)(a3 + 16), a4, a5);
    if (result) {
      *(void *)(a3 + 8) += result;
    }
    else {
      *(_BYTE *)a3 = 0;
    }
  }

  return result;
}

uint64_t sub_1000129C4(const __CFString *a1, const __CFString *a2, CFTypeRef *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = sub_100019A68(a1, a3, (uint64_t)a3, a4, a5);
  if (v7)
  {
    uint64_t v11 = v7;
    uint64_t v12 = sub_100019A68(a2, a3, v8, v9, v10);
    if (v12) {
      return ccder_sizeof(0x2000000000000010LL, v12 + v11);
    }
  }

  sub_1000194B4(-6LL, @"com.apple.security.cfder.error", 0LL, a3, v10, @"null input");
  return 0LL;
}

uint64_t sub_100012A4C(const __CFDictionary *a1, CFTypeRef *a2, char a3, uint64_t a4, uint64_t a5)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  v19[0] = 0xAAAAAAAAAAAAAA01LL;
  v19[1] = a2;
  BYTE1(v19[0]) = a3;
  v19[2] = Mutable;
  v19[3] = 0LL;
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)sub_100012BC0, v19);
  if (!LOBYTE(v19[0]))
  {
    if (Mutable) {
      CFRelease(Mutable);
    }
    return 0LL;
  }

  v20.size_t length = CFArrayGetCount(Mutable);
  v20.location = 0LL;
  CFArraySortValues(Mutable, v20, (CFComparatorFunction)sub_100012D00, 0LL);
  CFIndex Count = CFArrayGetCount(Mutable);
  uint64_t v12 = a5;
  if (Count >= 1)
  {
    unint64_t v13 = Count + 1;
    uint64_t v12 = a5;
    do
    {
      ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(Mutable, v13 - 2);
      CFIndex Length = CFDataGetLength(ValueAtIndex);
      BytePtr = CFDataGetBytePtr(ValueAtIndex);
      uint64_t v12 = ccder_encode_body(Length, BytePtr, a4, v12);
      --v13;
    }

    while (v13 > 1);
  }

  if (Mutable) {
    CFRelease(Mutable);
  }
  uint64_t result = ccder_encode_constructed_tl(0x2000000000000011LL, a5, a4, v12);
  if (!result)
  {
    sub_1000194B4(-7LL, @"com.apple.security.cfder.error", 0LL, a2, v18, @"ccder failed to encode");
    return 0LL;
  }

  return result;
}

void sub_100012BC0(const __CFString *a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_BYTE *)a3)
  {
    CFIndex v8 = sub_1000129C4(a1, a2, *(CFTypeRef **)(a3 + 8), a4, a5);
    if (!v8)
    {
      *(_BYTE *)a3 = 0;
      return;
    }

    CFIndex v9 = v8;
    CFMutableArrayRef Mutable = CFDataCreateMutable(*(CFAllocatorRef *)(a3 + 24), v8);
    CFDataSetLength(Mutable, v9);
    MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
    unint64_t v12 = (unint64_t)&MutableBytePtr[v9];
    unint64_t v13 = *(CFTypeRef **)(a3 + 8);
    uint64_t v14 = *(unsigned __int8 *)(a3 + 1);
    unint64_t v15 = sub_100019C44(a2, v13, v14, MutableBytePtr, v12);
    uint64_t v16 = sub_100019C44(a1, v13, v14, MutableBytePtr, v15);
    uint64_t v17 = ccder_encode_constructed_tl(0x2000000000000010LL, v12, MutableBytePtr, v16);
    if (v17)
    {
      v19.size_t length = v17 - (void)MutableBytePtr;
      v19.location = 0LL;
      CFDataDeleteBytes(Mutable, v19);
      CFArrayAppendValue(*(CFMutableArrayRef *)(a3 + 16), Mutable);
      if (!Mutable) {
        return;
      }
    }

    else
    {
      sub_1000194B4(-7LL, @"com.apple.security.cfder.error", 0LL, v13, v18, @"ccder failed to encode");
      *(_BYTE *)a3 = 0;
      if (!Mutable) {
        return;
      }
    }

    CFRelease(Mutable);
  }

uint64_t sub_100012D00(const __CFData *a1, const __CFData *a2)
{
  CFIndex Length = CFDataGetLength(a1);
  CFIndex v5 = CFDataGetLength(a2);
  unint64_t v6 = v5;
  if (Length < 0 || v5 < 0)
  {
    if (Length >= v5) {
      uint64_t v12 = 0LL;
    }
    else {
      uint64_t v12 = -1LL;
    }
    if (Length <= v5) {
      return v12;
    }
    else {
      return 1LL;
    }
  }

  else
  {
    if (Length >= v5) {
      size_t v7 = v5;
    }
    else {
      size_t v7 = Length;
    }
    BytePtr = CFDataGetBytePtr(a1);
    CFIndex v9 = CFDataGetBytePtr(a2);
    int v10 = memcmp(BytePtr, v9, v7);
    if (v10 <= 0 && (v10 || Length <= v6))
    {
      LODWORD(v13) = v10 == 0;
      if (Length >= v6) {
        LODWORD(v13) = 0;
      }
      if (v10 < 0) {
        uint64_t v13 = 1LL;
      }
      else {
        uint64_t v13 = v13;
      }
      return v13 << 63 >> 63;
    }

    else
    {
      return 1LL;
    }
  }

uint64_t sub_100012DC4()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_100012E40;
  block[3] = &unk_100282FB8;
  block[4] = &qword_1002DE738;
  if (qword_1002DE730 != -1) {
    dispatch_once(&qword_1002DE730, block);
  }
  return qword_1002DE738;
}

CFDictionaryRef sub_100012E40(uint64_t a1)
{
  values = kCFBooleanTrue;
  keys = @"debug";
  CFDictionaryRef result = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)&keys,  (const void **)&values,  1LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  **(void **)(a1 + 32) = result;
  return result;
}

void sub_100012EDC(const __CFArray *a1, CFStringRef theString, const __CFString *a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = &v10;
    uint64_t v12 = 0x2000000000LL;
    CFMutableStringRef MutableCopy = (CFMutableStringRef)0xAAAAAAAAAAAAAAAALL;
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(kCFAllocatorDefault, 0LL, theString);
    v9[0] = 0LL;
    v9[1] = v9;
    _OWORD v9[2] = 0x2000000000LL;
    v9[3] = &stru_100294B48;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 0x40000000LL;
    v8[2] = sub_100013038;
    v8[3] = &unk_1002830C0;
    v8[4] = &v10;
    v8[5] = v9;
    v14.size_t length = CFArrayGetCount(a1);
    v14.location = 0LL;
    CFArrayApplyFunction(a1, v14, (CFArrayApplierFunction)sub_100013098, v8);
    CFStringAppend((CFMutableStringRef)v11[3], a3);
    (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a4, v11[3]);
    size_t v7 = (const void *)v11[3];
    if (v7)
    {
      v11[3] = 0LL;
      CFRelease(v7);
    }

    _Block_object_dispose(v9, 8);
    _Block_object_dispose(&v10, 8);
  }

  else
  {
    (*(void (**)(uint64_t, const __CFString *))(a4 + 16))(a4, @"null");
  }

void sub_100013038(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = @", ";
}

uint64_t sub_100013098(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void sub_1000130AC(const __CFSet *a1, uint64_t a2)
{
  if (a1)
  {
    CFIndex Count = CFSetGetCount(a1);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, Count, &kCFTypeArrayCallBacks);
    CFSetApplyFunction(a1, (CFSetApplierFunction)sub_100013180, Mutable);
    v6.size_t length = CFArrayGetCount(Mutable);
    v6.location = 0LL;
    CFArraySortValues(Mutable, v6, (CFComparatorFunction)&_CFStringCompare, 0LL);
    sub_100012EDC(Mutable, @"{("), @"}", a2);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }

  else
  {
    (*(void (**)(uint64_t, const __CFString *))(a2 + 16))(a2, @"null");
  }

void sub_100013180(const __CFString *a1, __CFArray *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 == CFStringGetTypeID())
  {
    CFIndex v5 = a2;
    CFRange v6 = a1;
  }

  else
  {
    CFStringRef v7 = CFCopyDescription(a1);
    if (v7)
    {
      CFStringRef v8 = v7;
      CFArrayAppendValue(a2, v7);
      CFRelease(v8);
      return;
    }

    CFRange v6 = @"null";
    CFIndex v5 = a2;
  }

  CFArrayAppendValue(v5, v6);
}

void sub_100013204(uint64_t a1)
{
  if (qword_1002DE760 != -1) {
    dispatch_once(&qword_1002DE760, &stru_100283100);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_100013290;
  block[3] = &unk_100282FE0;
  block[4] = a1;
  dispatch_sync((dispatch_queue_t)qword_1002DE768, block);
}

uint64_t sub_100013290(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1002DE770 != -1) {
    dispatch_once(&qword_1002DE770, &stru_100283140);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(v1, qword_1002DE778);
}

void sub_1000132E4(id a1)
{
  qword_1002DE778 = (uint64_t)CFCalendarCreateWithIdentifier(kCFAllocatorDefault, kCFGregorianCalendar);
  uint64_t v1 = CFTimeZoneCreateWithTimeIntervalFromGMT(kCFAllocatorDefault, 0.0);
  CFCalendarSetTimeZone((CFCalendarRef)qword_1002DE778, v1);
  if (v1) {
    CFRelease(v1);
  }
}

void sub_100013354(id a1)
{
  qword_1002DE768 = (uint64_t)dispatch_queue_create("ZuluCalendar", 0LL);
}

void sub_10001337C(const __CFString *a1, uint64_t a2)
{
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    CFIndex v5 = CStringPtr;
    size_t v6 = strlen(CStringPtr);
    (*(void (**)(uint64_t, const char *, size_t))(a2 + 16))(a2, v5, v6);
  }

  else
  {
    CFIndex usedBufLen = 0LL;
    CFIndex Length = CFStringGetLength(a1);
    v10.location = 0LL;
    v10.size_t length = Length;
    CFStringGetBytes(a1, v10, 0x8000100u, 0, 0, 0LL, 0LL, &usedBufLen);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 0x40000000LL;
    v8[2] = sub_100013470;
    v8[3] = &unk_100283008;
    void v8[6] = 0LL;
    v8[7] = Length;
    v8[8] = usedBufLen;
    v8[4] = a2;
    v8[5] = a1;
    sub_10001C090(usedBufLen + 1, (uint64_t)v8);
  }

uint64_t sub_100013470(uint64_t result, int a2, UInt8 *buffer)
{
  if (buffer)
  {
    uint64_t v4 = result;
    CFIndex v5 = *(const __CFString **)(result + 40);
    CFRange v8 = *(CFRange *)(v4 + 48);
    CFIndex v6 = *(void *)(v4 + 64);
    CFIndex usedBufLen = 0xAAAAAAAAAAAAAAAALL;
    CFStringGetBytes(v5, v8, 0x8000100u, 0, 0, buffer, v6, &usedBufLen);
    buffer[usedBufLen] = 0;
    return (*(uint64_t (**)(void))(*(void *)(v4 + 32) + 16LL))();
  }

  return result;
}

uint64_t sub_1000134E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

CFStringRef sub_1000134F0(const __CFString *a1, const __CFCharacterSet *a2)
{
  CFIndex Length = CFStringGetLength(a1);
  CFStringRef theString = a1;
  uint64_t v37 = 0LL;
  CFIndex v38 = Length;
  CharactersPtr = CFStringGetCharactersPtr(a1);
  CStringPtr = 0LL;
  id v35 = CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
  }
  CFIndex v39 = 0LL;
  CFIndex v40 = 0LL;
  v36 = CStringPtr;
  if (Length < 1) {
    return &stru_100294B48;
  }
  uint64_t v7 = 0LL;
  CFIndex v8 = 0LL;
  *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[6] = v9;
  v33[7] = v9;
  v33[4] = v9;
  v33[5] = v9;
  v33[2] = v9;
  v33[3] = v9;
  uint64_t v10 = 64LL;
  uint64_t v11 = &stru_100294B48;
  v33[0] = v9;
  v33[1] = v9;
  while (1)
  {
    uint64_t v12 = (unint64_t)v8 >= 4 ? 4LL : v8;
    CFIndex v13 = v38;
    if (v38 <= v8)
    {
      UniChar v14 = 0;
    }

    else if (v35)
    {
      UniChar v14 = v35[v8 + v37];
    }

    else if (v36)
    {
      UniChar v14 = v36[v37 + v8];
    }

    else
    {
      CFIndex v15 = v39;
      if (v40 <= v8 || v39 > v8)
      {
        uint64_t v17 = v12 + v7;
        uint64_t v18 = v10 - v12;
        CFIndex v19 = v8 - v12;
        CFIndex v20 = v19 + 64;
        if (v19 + 64 >= v38) {
          CFIndex v20 = v38;
        }
        CFIndex v39 = v19;
        CFIndex v40 = v20;
        if (v38 >= v18) {
          CFIndex v13 = v18;
        }
        v41.size_t length = v13 + v17;
        v41.location = v19 + v37;
        CFStringGetCharacters(theString, v41, (UniChar *)v33);
        CFIndex v15 = v39;
      }

      UniChar v14 = *((_WORD *)v33 + v8 - v15);
    }

    if (!CFCharacterSetIsCharacterMember(a2, v14)) {
      break;
    }
    ++v8;
    --v7;
    ++v10;
    if (Length == v8) {
      return v11;
    }
  }

  CFIndex v21 = -Length;
  CFIndex v22 = Length + 64;
  uint64_t v23 = 1LL;
  while (1)
  {
    uint64_t v24 = (unint64_t)Length >= 5 ? 5LL : Length;
    if (Length < 2) {
      break;
    }
    CFIndex v25 = v38;
    if (v38 >= Length)
    {
      if (v35)
      {
        UniChar v26 = v35[Length - 1 + v37];
      }

      else if (v36)
      {
        UniChar v26 = v36[v37 - 1 + Length];
      }

      else
      {
        if (v40 < Length || (CFIndex v27 = v39, v39 >= Length))
        {
          uint64_t v28 = v24 + v21;
          CFIndex v29 = v22 - v24;
          CFIndex v30 = Length - v24;
          CFIndex v31 = v30 + 64;
          if (v30 + 64 >= v38) {
            CFIndex v31 = v38;
          }
          CFIndex v39 = v30;
          CFIndex v40 = v31;
          if (v38 >= v29) {
            CFIndex v25 = v29;
          }
          v42.size_t length = v25 + v28;
          v42.location = v30 + v37;
          CFStringGetCharacters(theString, v42, (UniChar *)v33);
          CFIndex v27 = v39;
        }

        UniChar v26 = *((_WORD *)&v33[-1] + Length - v27 + 7);
      }
    }

    else
    {
      UniChar v26 = 0;
    }

    ++v21;
    --v22;
    --Length;
    if (!CFCharacterSetIsCharacterMember(a2, v26))
    {
      uint64_t v23 = Length + 1;
      break;
    }
  }

  v43.size_t length = v23 - v8;
  v43.location = v8;
  return CFStringCreateWithSubstring(0LL, a1, v43);
}

void sub_10001379C(uint64_t a1)
{
  uint64_t v2 = CFLocaleCopyCurrent();
  **(void **)(a1 + 32) = CFDateFormatterCreate( kCFAllocatorDefault,  v2,  kCFDateFormatterNoStyle,  kCFDateFormatterNoStyle);
  CFDateFormatterSetFormat(**(CFDateFormatterRef **)(a1 + 32), @"yyyy-MM-dd HH:mm");
  if (v2) {
    CFRelease(v2);
  }
}

dispatch_queue_t sub_10001380C(uint64_t a1)
{
  dispatch_queue_t result = dispatch_queue_create("Date Formatting", 0LL);
  **(void **)(a1 + 32) = result;
  return result;
}

void sub_100013840(uint64_t a1, double a2)
{
  uint64_t v5 = 0LL;
  CFIndex v6 = &v5;
  uint64_t v7 = 0x2000000000LL;
  uint64_t v8 = 0LL;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000LL;
  void v4[2] = sub_10001396C;
  v4[3] = &unk_100283098;
  v4[4] = &v5;
  *(double *)&v4[5] = a2;
  block = _NSConcreteStackBlock;
  uint64_t v10 = 0x40000000LL;
  uint64_t v11 = sub_10001380C;
  uint64_t v12 = &unk_100283070;
  CFIndex v13 = &qword_1002DE758;
  if (qword_1002DE750 != -1) {
    dispatch_once(&qword_1002DE750, &block);
  }
  block = _NSConcreteStackBlock;
  uint64_t v10 = 0x40000000LL;
  uint64_t v11 = sub_1000139A8;
  uint64_t v12 = &unk_100283168;
  CFIndex v13 = v4;
  dispatch_sync((dispatch_queue_t)qword_1002DE758, &block);
  (*(void (**)(uint64_t, uint64_t))(a1 + 16))(a1, v6[3]);
  __int128 v3 = (const void *)v6[3];
  if (v3)
  {
    v6[3] = 0LL;
    CFRelease(v3);
  }

  _Block_object_dispose(&v5, 8);
}

CFStringRef sub_10001396C(uint64_t a1, __CFDateFormatter *a2)
{
  CFStringRef result = CFDateFormatterCreateStringWithAbsoluteTime(kCFAllocatorDefault, a2, *(CFAbsoluteTime *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1000139A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10001379C;
  block[3] = &unk_100283050;
  block[4] = &qword_1002DE748;
  if (qword_1002DE740 != -1) {
    dispatch_once(&qword_1002DE740, block);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(v1, qword_1002DE748);
}

unint64_t sub_100013A38(double *a1, CFTypeRef *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  *(void *)CFIndex v19 = a3;
  int v8 = sub_100013AEC((unsigned __int8 **)v19, a4, a2, a4, a5);
  int v11 = sub_100013AEC((unsigned __int8 **)v19, a4, a2, v9, v10) + 10 * v8;
  int v14 = sub_100013AEC((unsigned __int8 **)v19, a4, a2, v12, v13);
  int v17 = sub_100013AEC((unsigned __int8 **)v19, a4, a2, v15, v16);
  return sub_100013B90(a1, a2, v17 + 10 * v14 + 100 * v11, *(unsigned __int8 **)v19, a4);
}

uint64_t sub_100013AEC(unsigned __int8 **a1, unint64_t a2, CFTypeRef *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *a1;
  if (*a1)
  {
    if ((unint64_t)v7 >= a2)
    {
      sub_1000194B4(-1LL, @"com.apple.security.cfder.error", 0LL, a3, a5, @"Unexpected end of datetime");
      *a1 = 0LL;
    }

    else
    {
      int v9 = *v7;
      int v8 = v9;
      *a1 = v7 + 1;
    }
  }

  sub_1000194B4(-1LL, @"com.apple.security.cfder.error", 0LL, a3, a5, @"Not a decimal digit");
  *a1 = 0LL;
  return 0xFFFFFFFFLL;
}

unint64_t sub_100013B90( double *a1, CFTypeRef *a2, unsigned int a3, unsigned __int8 *a4, unint64_t a5)
{
  unint64_t v5 = a5;
  v69 = a4;
  int v66 = sub_100013AEC(&v69, a5, a2, (uint64_t)a4, a5);
  int v65 = sub_100013AEC(&v69, v5, a2, v7, v8);
  int v64 = sub_100013AEC(&v69, v5, a2, v9, v10);
  int v13 = sub_100013AEC(&v69, v5, a2, v11, v12);
  int v16 = sub_100013AEC(&v69, v5, a2, v14, v15);
  int v19 = sub_100013AEC(&v69, v5, a2, v17, v18);
  int v22 = sub_100013AEC(&v69, v5, a2, v20, v21);
  int v25 = sub_100013AEC(&v69, v5, a2, v23, v24);
  int v28 = sub_100013AEC(&v69, v5, a2, v26, v27);
  int v33 = sub_100013AEC(&v69, v5, a2, v29, v30);
  __int16 v34 = 0LL;
  id v35 = v69;
  double v36 = NAN;
  if (v69 && (unint64_t)v69 < v5)
  {
    int v37 = *v69;
    if (v37 == 46)
    {
      CFIndex v38 = v69 + 1;
      if ((unint64_t)(v69 + 1) < v5)
      {
        int v37 = *v38;
        if ((v37 - 58) < 0xFFFFFFF6)
        {
          CFIndex v39 = @"fraction without digits";
LABEL_14:
          CFIndex v41 = -1LL;
LABEL_23:
          sub_1000194B4(v41, @"com.apple.security.cfder.error", 0LL, a2, v32, v39);
          __int16 v34 = 0LL;
          goto LABEL_24;
        }

        uint64_t v42 = 0LL;
        uint64_t v43 = v5 - (void)v69 - 2;
        unint64_t v44 = 1LL;
        while (v43)
        {
          int v45 = v37;
          if (v44 < 0x1999999999999999LL)
          {
            v44 *= 10LL;
            uint64_t v42 = (v37 - 48) + 10 * v42;
          }

          int v46 = *++v38;
          int v37 = v46;
          --v43;
          if ((v46 - 58) < 0xFFFFFFF6)
          {
            if (v45 == 48)
            {
              CFIndex v39 = @"fraction ends in 0";
              goto LABEL_14;
            }

            double v36 = (double)(unint64_t)v42 / (double)v44;
            id v35 = v38;
            goto LABEL_8;
          }
        }
      }

      CFIndex v39 = @"overflow";
      CFIndex v41 = -8LL;
      goto LABEL_23;
    }

    double v36 = 0.0;
LABEL_8:
    if ((unint64_t)v35 < v5)
    {
      __int16 v34 = v35 + 1;
      v69 = v35 + 1;
      switch(v37)
      {
        case 'Z':
          double v47 = 0.0;
          goto LABEL_25;
        case '-':
          int v40 = -60;
          break;
        case '+':
          int v40 = 60;
          break;
        default:
          goto LABEL_24;
      }

      int v63 = v40;
      int v54 = sub_100013AEC(&v69, v5, a2, v31, v32);
      int v62 = sub_100013AEC(&v69, v5, a2, v55, v56) + 10 * v54;
      int v59 = sub_100013AEC(&v69, v5, a2, v57, v58);
      double v47 = (double)(int)((sub_100013AEC(&v69, v5, a2, v60, v61) + 10 * v59 + 60 * v62) * v63);
      __int16 v34 = v69;
      if (!v69) {
        return 0LL;
      }
      goto LABEL_25;
    }

    CFIndex v39 = @"Unexpected end of datetime";
    goto LABEL_14;
  }

uint64_t sub_10001402C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, __CFString **a8)
{
  if ((a1 & 3) != 0)
  {
    BOOL v8 = 0LL;
  }

  else
  {
    HIDWORD(v9) = -1030792151 * a1 + 85899344;
    LODWORD(v9) = HIDWORD(v9);
    if ((v9 >> 2) <= 0x28F5C28)
    {
      HIDWORD(v10) = -1030792151 * a1 + 85899344;
      LODWORD(v10) = HIDWORD(v10);
      BOOL v8 = (v10 >> 4) < 0xA3D70B;
    }

    else
    {
      BOOL v8 = 1LL;
    }
  }

  if (a7) {
    *a7 = v8;
  }
  if ((int)a6 <= 61
    && (int)a5 <= 59
    && (int)a4 <= 23
    && (a2 - 13) >= 0xFFFFFFF4
    && (a3 - 32) >= 0xFFFFFFE1
    && ((_DWORD)a2 != 2 || (v8 | 0x1C) >= a3)
    && ((_DWORD)a2 == 2 || dword_1002054C8[a2] - dword_1002054C8[(a2 - 1)] >= (int)a3))
  {
    return 1LL;
  }

  sub_1000194E0(-1, a8, @"Invalid date: %i, %i, %i, %i, %i, %i, %i", a1, a2, a3, a4, a5, a6, v8);
  return 0LL;
}

uint64_t sub_100014140(uint64_t a1, CFCalendarRef calendar)
{
  uint64_t result = CFCalendarComposeAbsoluteTime( calendar,  (CFAbsoluteTime *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL),  "yMdHms",  *(unsigned int *)(a1 + 48),  *(unsigned int *)(a1 + 52),  *(unsigned int *)(a1 + 56),  *(unsigned int *)(a1 + 60),  *(unsigned int *)(a1 + 64),  *(unsigned int *)(a1 + 68));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (_DWORD)result != 0;
  return result;
}

unint64_t sub_1000141B0( const __CFAllocator *a1, CFDateRef *a2, CFTypeRef *a3, uint64_t a4, uint64_t a5)
{
  *(void *)uint64_t v15 = a5;
  uint64_t v8 = ccder_decode_constructed_tl(24LL, v15, a4, a5);
  CFAbsoluteTime at = 0.0;
  unint64_t v10 = sub_100013A38(&at, a3, v8, *(unint64_t *)v15, v9);
  if (v10)
  {
    CFDateRef v11 = CFDateCreate(a1, at);
    *a2 = v11;
    if (!v11)
    {
      sub_1000194B4(-3LL, @"com.apple.security.cfder.error", 0LL, a3, v12, @"Failed to create date");
      return 0LL;
    }
  }

  return v10;
}

uint64_t sub_100014258()
{
  int v5 = -1431655766;
  int v6 = -1431655766;
  unint64_t v4 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v0 = __dtoa(0LL, 0LL, &v6, &v5, &v4);
  int64_t v1 = v4 - v0;
  __freedtoa();
  int64_t v2 = v1 - v6;
  if (v1 < v6) {
    int64_t v2 = 0LL;
  }
  if (v2) {
    return v2 + 16;
  }
  else {
    return 15LL;
  }
}

unint64_t sub_1000142C8(CFTypeRef *a1, int a2, uint64_t a3, unint64_t a4, double a5)
{
  uint64_t v47 = 0LL;
  uint64_t v48 = 0LL;
  uint64_t v46 = 0LL;
  CFErrorRef err = 0LL;
  p_CFErrorRef err = &err;
  uint64_t v51 = 0x2000000000LL;
  char v52 = -86;
  *(void *)__int128 buf = _NSConcreteStackBlock;
  *(void *)&buf[8] = 0x40000000LL;
  *(void *)&buf[16] = sub_1000148E8;
  uint64_t v56 = &unk_1002831B8;
  uint64_t v57 = &err;
  double v58 = a5;
  int v59 = (char *)&v48 + 4;
  uint64_t v60 = &v48;
  uint64_t v61 = (char *)&v47 + 4;
  int v62 = &v47;
  int v63 = (char *)&v46 + 4;
  int v64 = &v46;
  sub_100013204((uint64_t)buf);
  if (*((_BYTE *)p_err + 24))
  {
    _Block_object_dispose(&err, 8);
  }

  else
  {
    sub_1000194B4(-1LL, @"com.apple.security.cfder.error", 0LL, a1, v10, @"Failed to encode date.");
    int v11 = *((unsigned __int8 *)p_err + 24);
    _Block_object_dispose(&err, 8);
    if (!v11)
    {
      int v37 = (os_log_s *)sub_10001267C("SecError");
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        if (a1) {
          CFTypeRef v38 = *a1;
        }
        else {
          CFTypeRef v38 = 0LL;
        }
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = v38;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "der: unable to encode date: %@", buf, 0xCu);
      }

      return 0LL;
    }
  }

  CFErrorRef err = 0LL;
  if ((sub_10001402C( HIDWORD(v48),  v48,  HIDWORD(v47),  v47,  HIDWORD(v46),  v46,  0LL,  (__CFString **)&err) & 1) == 0)
  {
    uint64_t v12 = (__CFString *)CFErrorCopyDescription(err);
    sub_10001BB24(v12, 0x53C00002u);
    if (v12) {
      CFRelease(v12);
    }
    int v13 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = "continuing";
      if (a2) {
        uint64_t v14 = "setting default value";
      }
      *(_DWORD *)__int128 buf = 138412546;
      *(void *)&uint8_t buf[4] = err;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "der: invalid date: %@; %s", buf, 0x16u);
    }

    CFErrorRef v15 = err;
    if (err)
    {
      CFErrorRef err = 0LL;
      CFRelease(v15);
    }

    if (a2)
    {
      uint64_t v48 = 0x7D100000001LL;
      HIDWORD(v47) = 1;
      HIDWORD(v46) = 1;
    }
  }

  if (a3 + 1 <= a4)
  {
    *(_BYTE *)(a4 - 1) = 90;
    unint64_t v16 = a4 - 1;
  }

  else
  {
    unint64_t v16 = 0LL;
  }

  int v18 = v48;
  int v17 = HIDWORD(v48);
  int v19 = HIDWORD(v47);
  int v45 = v47;
  int v20 = v46;
  int v21 = HIDWORD(v46);
  int v53 = -1431655766;
  int v54 = -1431655766;
  *(void *)__int128 buf = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v22 = __dtoa(0LL, 0LL, &v54, &v53, buf);
  uint64_t v23 = v22;
  int v24 = v54;
  uint64_t v25 = *(void *)buf;
  if (a5 < 0.0)
  {
    unint64_t v26 = v22 + (v54 & ~(v54 >> 31));
    if (v26 < *(void *)buf)
    {
      uint64_t v27 = (_BYTE *)(*(void *)buf - 1LL);
    }

    int v24 = v54;
    uint64_t v25 = *(void *)buf;
  }

  uint64_t v29 = v25 - v22;
  if (v25 - v23 > v24)
  {
    if ((v24 & 0x80000000) == 0)
    {
      unint64_t v16 = ccder_encode_body(v29 - v24, v23 + v24, a3, v16);
LABEL_31:
      if (a3 + 1 <= v16) {
        *(_BYTE *)--unint64_t v16 = 46;
      }
      else {
        unint64_t v16 = 0LL;
      }
      goto LABEL_38;
    }

    int v44 = v19;
    uint64_t v30 = a1;
    int v31 = v18;
    int v32 = v17;
    uint64_t v33 = ccder_encode_body(v29, v23, a3, v16);
    size_t v34 = -(uint64_t)v54;
    id v35 = (void *)ccder_encode_body_nocopy(v34, a3, v33);
    unint64_t v16 = (unint64_t)v35;
    if (v35)
    {
      if (a5 >= 0.0) {
        int v36 = 48;
      }
      else {
        int v36 = 57;
      }
      memset(v35, v36, v34);
      int v17 = v32;
      int v18 = v31;
      a1 = v30;
      int v19 = v44;
      goto LABEL_31;
    }

    int v17 = v32;
    int v18 = v31;
    a1 = v30;
    int v19 = v44;
  }

LABEL_38:
  __freedtoa(v23);
  if (v16)
  {
    unint64_t v40 = a3 + 2;
    if (a3 + 2 <= v16)
    {
      *(_BYTE *)(v16 - 2) = v20 / 10 + 48;
      *(_BYTE *)(v16 - 1) = v20 % 10 + 48;
      if (v40 <= v16 - 2)
      {
        *(_BYTE *)(v16 - 4) = v21 / 10 + 48;
        *(_BYTE *)(v16 - 3) = v21 % 10 + 48;
        if (v40 <= v16 - 4)
        {
          *(_BYTE *)(v16 - 6) = v45 / 10 + 48;
          *(_BYTE *)(v16 - 5) = v45 % 10 + 48;
          if (v40 <= v16 - 6)
          {
            *(_BYTE *)(v16 - _Block_object_dispose(va, 8) = v19 / 10 + 48;
            *(_BYTE *)(v16 - 7) = v19 % 10 + 48;
            if (v40 <= v16 - 8)
            {
              *(_BYTE *)(v16 - 10) = v18 / 10 + 48;
              *(_BYTE *)(v16 - 9) = v18 % 10 + 48;
              if (v40 <= v16 - 10)
              {
                unsigned int v41 = (((103 * (v17 % 100)) >> 15) & 1) + ((103 * (v17 % 100)) >> 10);
                *(_BYTE *)(v16 - 12) = v41 + 48;
                *(_BYTE *)(v16 - 11) = v17 % 100 - 10 * v41 + 48;
                if (v40 <= v16 - 12)
                {
                  *(_BYTE *)(v16 - 14) = v17 / 1000 + 48;
                  unint64_t v42 = v16 - 14;
                  *(_BYTE *)(v42 + 1) = v17 / 100 % 10 + 48;
                  return v42;
                }
              }
            }
          }
        }
      }
    }
  }

  sub_1000194B4(-7LL, @"com.apple.security.cfder.error", 0LL, a1, v39, @"ccder failed to encode");
  return 0LL;
}

          unint64_t v42 = v101[7];
          if (v42)
          {
            uint64_t v43 = 0;
            goto LABEL_42;
          }

          goto LABEL_54;
        }

      if (Count == ++v19) {
        goto LABEL_49;
      }
    }
  }

  int v20 = 0;
LABEL_49:
  CFTypeRef cf = 0LL;
  p_CFTypeRef cf = &cf;
  int v44 = 0x2020000000LL;
  int v45 = 1;
  *(void *)__int128 buf = _NSConcreteStackBlock;
  *(void *)&buf[8] = 3221225472LL;
  *(void *)&buf[16] = sub_1000D124C;
  uint64_t v47 = (const char *)&unk_100292DF0;
  *(void *)uint64_t v48 = &cf;
  *(void *)&v48[8] = v39;
  *(void *)&v48[16] = a6;
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)sub_1000CDB84, buf);
  int v31 = *((unsigned __int8 *)p_cf + 24);
  int v17 = *((_BYTE *)p_cf + 24) != 0;
  _Block_object_dispose(&cf, 8);
  int v32 = theSet;
  if (qword_1002DE9D0 != -1) {
    dispatch_once(&qword_1002DE9D0, &stru_100285AC8);
  }
  if (qword_1002DE9D8 && CFSetGetCount(v32))
  {
    CFRetain(v32);
    *(void *)__int128 buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = sub_1000D1894;
    uint64_t v47 = (const char *)&unk_1002935A8;
    *(void *)uint64_t v48 = v32;
    dispatch_async((dispatch_queue_t)qword_1002DE9D8, buf);
  }

  if (theDict) {
    CFRelease(theDict);
  }
  if (theSet) {
    CFRelease(theSet);
  }
  if (a3 == 1 && v31)
  {
    uint64_t v33 = sub_10001267C("engine");
    size_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    id v35 = v34;
    if (((a4 != 0) & (v20 ^ 1)) == 0)
    {
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "saving engine state", buf, 2u);
      }

      int v17 = sub_1000CDB9C(a1, a2, a6);
      if ((a4 & 0xFFFFFFFFFFFFFFFDLL) == 1)
      {
        int v36 = *(void *)(a1 + 80);
        *(void *)__int128 buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = sub_1001C3D44;
        uint64_t v47 = (const char *)&unk_1002935A8;
        *(void *)uint64_t v48 = v36;
        _os_activity_initiate( (void *)&_mh_execute_header,  "CloudCircle RequestSyncWithPeersList",  OS_ACTIVITY_FLAG_DEFAULT,  buf);
      }

      return v17;
    }

    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "Not saving engine state, nothing changed.",  buf,  2u);
    }

    return 1LL;
  }

  return v17;
}

  if (!cf) {
    goto LABEL_67;
  }
  OSStatus = SecErrorGetOSStatus(cf);
  if (OSStatus <= -25331)
  {
    if (OSStatus != -536870186 && OSStatus != -536870184)
    {
      uint64_t v25 = -26275;
      goto LABEL_50;
    }

    uint64_t v30 = @"App clips are not permitted to make items synchronizable";
    goto LABEL_39;
  }

  sub_1000194E0(-34018, a4, @"Client explicitly specifies access group %@ but is only entitled for %@", v13, v9);
  CFRelease(v9);
  return 0LL;
}

          goto LABEL_39;
        }
      }

      int v45 = (void *)objc_claimAutoreleasedReturnValue([v39 storedCKRecord]);
      uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v45 modificationDate]);
      uint64_t v47 = [v46 compare:v116];

      if (v47 == (id)-1LL)
      {
        uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView zoneName](self, "zoneName"));
        char v52 = sub_1000AA6AC(@"ckkskey", v51);
        int v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);

        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          CFDataRef v142 = (os_log_s *)v39;
          _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "Trusted device state (%@) is too old; ignoring",
            buf,
            0xCu);
        }

        goto LABEL_38;
      }

        int v21 = 0LL;
        goto LABEL_6;
      }

      uint64_t v14 = v22;
      size_t v34 = v24;
    }

    else
    {
      uint64_t v23 = 0LL;
      size_t v34 = 0LL;
    }

    id v35 = (void *)objc_claimAutoreleasedReturnValue([v7 keyclass]);
    int v36 = [v35 isEqualToString:@"tlk"];

    if (!v36)
    {
      uint64_t v23 = 0LL;
      uint64_t v22 = v14;
      goto LABEL_22;
    }

    v70[0] = kSecClass;
    v70[1] = kSecUseDataProtectionKeychain;
    v71[0] = kSecClassInternetPassword;
    v71[1] = &__kCFBooleanTrue;
    v71[2] = @"com.apple.security.ckks";
    v70[2] = kSecAttrAccessGroup;
    v70[3] = kSecAttrDescription;
    int v63 = (void *)objc_claimAutoreleasedReturnValue([v7 keyclass]);
    int v37 = (void *)objc_claimAutoreleasedReturnValue([v63 stringByAppendingString:@"-nonsync"]);
    v71[3] = v37;
    v70[4] = kSecAttrServer;
    CFTypeRef v38 = (void *)objc_claimAutoreleasedReturnValue([v7 zoneID]);
    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v38 zoneName]);
    v71[4] = v39;
    v70[5] = kSecAttrAccount;
    int v64 = v16;
    unint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v7 uuid]);
    v71[5] = v40;
    v71[6] = &__kCFBooleanTrue;
    void v70[6] = kSecReturnAttributes;
    v70[7] = kSecReturnData;
    v70[8] = kSecAttrSynchronizable;
    v71[7] = &__kCFBooleanTrue;
    v71[8] = &__kCFBooleanFalse;
    unsigned int v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v71,  v70,  9LL));
    uint64_t v22 = [v41 mutableCopy];

    int v65 = 0LL;
    int v24 = (id *)objc_claimAutoreleasedReturnValue([v64 queryKeyMaterialInKeychain:v22 error:&v65]);
    uint64_t v23 = v65;

    if (v23)
    {
      if ([v23 code] == (id)-25300)
      {
        size_t v34 = v24;
LABEL_22:
        if (v61)
        {
          int v45 = v34;
          if (v19) {
            uint64_t v46 = (uint64_t)[v19 code];
          }
          else {
            uint64_t v46 = -50LL;
          }
          double v58 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"Couldn't load %@ from keychain: %d",  v7,  [v19 code]));
          *uint64_t v61 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:underlying:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:underlying:",  @"securityd",  v46,  v58,  v19));

          size_t v34 = v45;
        }

        int v20 = v34;
        int v21 = v20;
        goto LABEL_5;
      }

      if (v61)
      {
        uint64_t v51 = v61;
        char v52 = [v23 code];
        v68[0] = NSLocalizedDescriptionKey;
        int v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"Couldn't load %@ from keychain: %d",  v7,  [v23 code]));
        v68[1] = NSUnderlyingErrorKey;
        v69[0] = v53;
        v69[1] = v23;
        int v54 = v69;
        uint64_t v55 = v68;
        goto LABEL_37;
      }

      goto LABEL_38;
    }

    uint64_t v56 = sub_1000AA6AC(@"ckkskey", 0LL);
    uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v7 uuid]);
      *(_DWORD *)__int128 buf = 138412290;
      int v75 = v49;
      uint64_t v50 = "loaded a stashed TLK (%@)";
      goto LABEL_31;
    }

    goto LABEL_32;
  }

  int v21 = a5;
  if (a5)
  {
    unint64_t v42 = [v19 code];
    v78[0] = NSLocalizedDescriptionKey;
    uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"Couldn't load %@ from keychain: %d",  v7,  [v19 code]));
    v78[1] = NSUnderlyingErrorKey;
    v79[0] = v43;
    v79[1] = v19;
    int v44 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v79,  v78,  2LL));
    os_log_s *v21 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"securityd",  v42,  v44));

    int v21 = 0LL;
  }

  int v24 = 0LL;
  uint64_t v22 = v14;
  uint64_t v23 = v19;
LABEL_6:

  return v21;
}

uint64_t sub_1000148E8(uint64_t a1, CFCalendarRef calendar)
{
  uint64_t result = CFCalendarDecomposeAbsoluteTime( calendar,  *(CFAbsoluteTime *)(a1 + 40),  "yMdHms",  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (_DWORD)result != 0;
  return result;
}

void sub_100014948()
{
}

void sub_100014958(int a1, CFTypeRef *a2, CFStringRef format, ...)
{
  if (a2)
  {
    unint64_t v4 = (__CFString *)*a2;
    *a2 = 0LL;
    sub_100019148(a1, @"com.apple.utilities.sqlite3", v4, a2, format, va);
  }

BOOL sub_1000149A0(uint64_t a1, sqlite3 *a2, CFTypeRef *a3, CFStringRef format, ...)
{
  if ((_DWORD)a1 && a3)
  {
    CFStringRef v7 = CFStringCreateWithFormatAndArguments(kCFAllocatorDefault, 0LL, format, va);
    if ((_DWORD)a1 == 14)
    {
      uint64_t v8 = sqlite3_system_errno(a2);
      uint64_t v9 = (void *)CFStringCreateWithFormat(0LL, 0LL, @"%d", v8);
    }

    else
    {
      uint64_t v9 = (void *)CFRetain(&stru_100294B48);
    }

    uint64_t v10 = v9;
    uint64_t v11 = sqlite3_extended_errcode(a2);
    uint64_t v12 = sqlite3_errmsg(a2);
    if ((_DWORD)v11 == (_DWORD)a1) {
      sub_100014958(a1, a3, @"%@: [%d]%@ %s", v7, a1, v10, v12, v14, va);
    }
    else {
      sub_100014958(a1, a3, @"%@: [%d->%d]%@ %s", v7, a1, v11, v10, v12, va);
    }
    if (v7) {
      CFRelease(v7);
    }
    if (v10) {
      CFRelease(v10);
    }
  }

  return (_DWORD)a1 == 0;
}

BOOL sub_100014AC0(uint64_t a1, sqlite3_stmt *a2, CFTypeRef *a3, CFStringRef format, ...)
{
  if ((_DWORD)a1 && a3)
  {
    CFStringRef v7 = CFStringCreateWithFormatAndArguments(kCFAllocatorDefault, 0LL, format, va);
    uint64_t v8 = sqlite3_db_handle(a2);
    uint64_t v9 = sqlite3_sql(a2);
    uint64_t v10 = sqlite3_extended_errcode(v8);
    uint64_t v11 = sqlite3_errmsg(v8);
    if ((_DWORD)v10 == (_DWORD)a1) {
      sub_100014958(a1, a3, @"%@: [%d] %s sql: %s", v7, a1, v11, v9, v13, va);
    }
    else {
      sub_100014958(a1, a3, @"%@: [%d->%d] %s sql: %s", v7, a1, v10, v11, v9, va);
    }
    if (v7) {
      CFRelease(v7);
    }
  }

  return (_DWORD)a1 == 0;
}

void sub_100014BB0(id a1)
{
  int v1 = sqlite3_config(16, nullsub_23, 0LL);
  if (v1)
  {
    int v2 = v1;
    __int128 v3 = (os_log_s *)sub_10001267C("SecWarning");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      int v5 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Could not set up sqlite global error logging to syslog: %d",  buf,  8u);
    }
  }

uint64_t sub_100014C6C(uint64_t a1)
{
  uint64_t result = _CFRuntimeRegisterClass(&unk_100283218);
  **(void **)(a1 + 32) = result;
  return result;
}

void sub_100014C9C(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 16) = 0LL;
    CFRelease(v2);
  }

  __int128 v3 = *(dispatch_queue_s **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_100014E04;
  block[3] = &unk_1002834B8;
  block[4] = a1;
  dispatch_sync(v3, block);
  unint64_t v4 = *(dispatch_object_s **)(a1 + 24);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(a1 + 24) = 0LL;
  }

  int v5 = *(dispatch_object_s **)(a1 + 32);
  if (v5)
  {
    dispatch_release(v5);
    *(void *)(a1 + 32) = 0LL;
  }

  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 56));
  int v6 = *(dispatch_object_s **)(a1 + 120);
  if (v6)
  {
    dispatch_release(v6);
    *(void *)(a1 + 120) = 0LL;
  }

  CFStringRef v7 = *(const void **)(a1 + 136);
  if (v7)
  {
    _Block_release(v7);
    *(void *)(a1 + 136) = 0LL;
  }

  uint64_t v8 = *(const void **)(a1 + 152);
  if (v8)
  {
    *(void *)(a1 + 152) = 0LL;
    CFRelease(v8);
  }

CFStringRef sub_100014D70(uint64_t a1)
{
  return CFStringCreateWithFormat( kCFAllocatorDefault,  0LL,  @"<SecDb path:%@ connections: %@>",  *(void *)(a1 + 16),  *(void *)(a1 + 48));
}

CFStringRef sub_100014DB4(uint64_t a1)
{
  return CFStringCreateWithFormat( kCFAllocatorDefault,  0LL,  @"<SecDb path:%@ connections: %@>",  *(void *)(a1 + 16),  *(void *)(a1 + 48));
}

void sub_100014E04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  __int128 v3 = *(const void **)(v2 + 40);
  if (v3)
  {
    *(void *)(v2 + 40) = 0LL;
    CFRelease(v3);
    uint64_t v2 = *(void *)(a1 + 32);
  }

  unint64_t v4 = *(const void **)(v2 + 48);
  if (v4)
  {
    *(void *)(v2 + 4_Block_object_dispose(va, 8) = 0LL;
    CFRelease(v4);
  }

dispatch_queue_t sub_100014E50(uint64_t a1, char *label)
{
  dispatch_queue_t result = dispatch_queue_create(label, 0LL);
  *(void *)(*(void *)(a1 + 32) + 24LL) = result;
  return result;
}

dispatch_queue_t sub_100014E80(uint64_t a1, char *label)
{
  dispatch_queue_t result = dispatch_queue_create(label, &_dispatch_queue_attr_concurrent);
  *(void *)(*(void *)(a1 + 32) + 32LL) = result;
  return result;
}

void sub_100014EB8(uint64_t a1, const void *a2)
{
  unint64_t v4 = (os_unfair_lock_s *)(a1 + 148);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 148));
  int v5 = _Block_copy(a2);
  CFMutableArrayRef Mutable = *(__CFArray **)(a1 + 152);
  if (!Mutable)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    *(void *)(a1 + 152) = Mutable;
  }

  CFArrayAppendValue(Mutable, v5);
  _Block_release(v5);
  os_unfair_lock_unlock(v4);
}

uint64_t sub_100014F28(uint64_t a1, const __CFString *cf, CFTypeRef *a3)
{
  unint64_t v4 = cf;
  CFRetain(cf);
  if (!v4) {
    return 1LL;
  }
  LOBYTE(v6) = 1;
  do
  {
    CFStringRef v9 = 0LL;
    if ((v6 & 1) != 0)
    {
      int v6 = sub_100015014(a1, v4, &v9, a3);
      if (v6)
      {
        do
          int v7 = sub_100015138(a1, v6, (int)a3);
        while (v7 == 1);
        int v6 = (sqlite3_stmt *)((v7 != 0) & sub_100015290(v6, a3));
      }
    }

    else
    {
      sub_100014958(1, a3, @"Error with unexecuted sql remaining %@", v4);
      int v6 = 0LL;
    }

    CFRelease(v4);
    unint64_t v4 = v9;
  }

  while (v9);
  return (uint64_t)v6;
}

sqlite3_stmt *sub_100015014(uint64_t a1, const __CFString *a2, CFStringRef *a3, CFTypeRef *a4)
{
  v12.location = 0LL;
  v12.size_t length = 0LL;
  uint64_t v14 = 0LL;
  CFErrorRef v15 = &v14;
  uint64_t v16 = 0x2000000000LL;
  uint64_t v17 = 0LL;
  if (a2)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 0x40000000LL;
    void v13[2] = sub_100015FA4;
    v13[3] = &unk_100283630;
    v13[4] = &v14;
    _OWORD v13[5] = a1;
    v13[6] = a4;
    v13[7] = &v12;
    sub_10001337C(a2, (uint64_t)v13);
    int v7 = (sqlite3_stmt *)v15[3];
  }

  else
  {
    int v7 = 0LL;
  }

  _Block_object_dispose(&v14, 8);
  if (v12.length >= 1)
  {
    uint64_t v8 = CFGetAllocator(a2);
    CFStringRef v9 = CFStringCreateWithSubstring(v8, a2, v12);
    CFStringRef v10 = v9;
    if (a3)
    {
      *a3 = v9;
    }

    else
    {
      sub_100014958(2, a4, @"prepare_v2: %@ unused sql: %@", a2, v9);
      if (v10) {
        CFRelease(v10);
      }
      sub_100015290(v7, a4);
      return 0LL;
    }
  }

  return v7;
}

uint64_t sub_100015138(uint64_t a1, sqlite3_stmt *pStmt, int a3)
{
  int v6 = 0;
  while (1)
  {
    if (*(_BYTE *)(a1 + 24) && !sqlite3_stmt_readonly(pStmt))
    {
      int v7 = (os_log_s *)sub_10001267C("SecError");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = sqlite3_sql(pStmt);
        *(_DWORD *)__int128 buf = 136315138;
        uint64_t v13 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "_SecDbStep: SecDbConnection is readonly but we're about to write: %s",  buf,  0xCu);
      }
    }

    int v9 = sqlite3_step(pStmt);
    if (v9 == 100) {
      return 1LL;
    }
    if (v9 == 101) {
      break;
    }
    char v10 = sub_1000152F4(a1, v9, (int)@"step", v6++, a3);
    if ((v10 & 1) == 0) {
      return 0LL;
    }
  }

  sqlite3_reset(pStmt);
  return 2LL;
}

BOOL sub_100015290(sqlite3_stmt *a1, CFTypeRef *a2)
{
  unint64_t v4 = sqlite3_db_handle(a1);
  uint64_t v5 = sqlite3_finalize(a1);
  return !(_DWORD)v5 || sub_1000149A0(v5, v4, a2, @"finalize: %p", a1);
}

BOOL sub_1000152F4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, CFTypeRef *a5)
{
  if (a4 > 4)
  {
    int v10 = 250;
    int v11 = 250 * a4 - 820;
  }

  else
  {
    int v10 = dword_1002054FC[a4];
    int v11 = dword_100205510[a4];
  }

  CFRange v12 = (os_log_s *)sub_10001267C("#SecDB");
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
  if (v11 > 299999)
  {
    if (v13)
    {
      *(_DWORD *)__int128 buf = 67109120;
      int v16 = v11;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "sqlite busy/locked: too long: %d ms, giving up",  buf,  8u);
    }

    return sub_1000154A8(a1, a2, a5, @"%@", a3);
  }

  if (v13)
  {
    *(_DWORD *)__int128 buf = 67109632;
    int v16 = a2;
    __int16 v17 = 1024;
    int v18 = a4;
    __int16 v19 = 1024;
    int v20 = v11;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "sqlite busy/locked: %d ntries: %d totaltimeout: %d",  buf,  0x14u);
  }

  j__sqlite3_sleep(v10);
  return 1LL;
}

BOOL sub_1000154A8(uint64_t a1, uint64_t a2, CFTypeRef *a3, CFStringRef format, ...)
{
  if (!(_DWORD)a2 || (_DWORD)a2 == 101) {
    return !(_DWORD)a2 || (_DWORD)a2 == 101;
  }
  if (a3)
  {
    va_copy((va_list)buf, va);
    CFStringRef v7 = CFStringCreateWithFormatAndArguments(kCFAllocatorDefault, 0LL, format, va);
    sub_1000149A0(a2, *(sqlite3 **)(a1 + 64), a3, @"%@", v7);
    CFRelease(v7);
  }

  *(_BYTE *)(a1 + 48) |= (_DWORD)a2 == 10;
  if (*(_BYTE *)(a1 + 40))
  {
    uint64_t v8 = (__CFString *)CFStringCreateWithFormat( kCFAllocatorDefault,  0LL,  @"SQL DB %@ is corrupted already. Corruption error was: %d (previously %d)",  format,  *(void *)(*(void *)(a1 + 16) + 16LL),  a2,  *(unsigned int *)(a1 + 44));
    int v9 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&buf, 0xCu);
    }

    if (CFEqual(*(CFTypeRef *)(*(void *)(a1 + 16) + 16LL), @"/Library/Keychains/keychain-2.db"))
    {
      unsigned int v10 = 1405092101;
    }

    else if (CFEqual(*(CFTypeRef *)(*(void *)(a1 + 16) + 16LL), @"/Library/Keychains/ocspcache.sqlite3"))
    {
      unsigned int v10 = 1405092357;
    }

    else if (CFEqual(*(CFTypeRef *)(*(void *)(a1 + 16) + 16LL), @"/Library/Keychains/TrustStore.sqlite3"))
    {
      unsigned int v10 = 1405092613;
    }

    else if (CFEqual(*(CFTypeRef *)(*(void *)(a1 + 16) + 16LL), @"/Library/Keychains/caissuercache.sqlite3"))
    {
      unsigned int v10 = 1405092869;
    }

    else
    {
      unsigned int v10 = 1405091845;
    }

    sub_10001BB24(v8, v10);
    if (v8) {
      CFRelease(v8);
    }
    if ((_DWORD)a2 == 26 || (_DWORD)a2 == 11)
    {
      int v31 = (os_log_s *)sub_10001267C("SecError");
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        char v28 = "SecDbConnectionCheckCode detected corruption twice: going to handle corrupt DB";
        uint64_t v29 = v31;
        uint32_t v30 = 2;
        goto LABEL_49;
      }

      goto LABEL_50;
    }

    return !(_DWORD)a2 || (_DWORD)a2 == 101;
  }

  BOOL v11 = (_DWORD)a2 == 11;
  if ((_DWORD)a2 == 26) {
    BOOL v11 = 1;
  }
  *(_BYTE *)(a1 + 40) = v11;
  if ((_DWORD)a2 != 26 && (_DWORD)a2 != 11) {
    return !(_DWORD)a2 || (_DWORD)a2 == 101;
  }
  *(_DWORD *)(a1 + 44) = a2;
  uint64_t v42 = 0LL;
  uint64_t v43 = &v42;
  uint64_t v44 = 0x2000000000LL;
  char v45 = 0;
  uint64_t v38 = 0LL;
  uint64_t v39 = &v38;
  uint64_t v40 = 0x2000000000LL;
  char v41 = 0;
  uint64_t v34 = 0LL;
  id v35 = &v34;
  uint64_t v36 = 0x2000000000LL;
  uint64_t v37 = 0LL;
  *(void *)&__int128 buf = _NSConcreteStackBlock;
  *((void *)&buf + 1) = 0x40000000LL;
  uint64_t v49 = sub_100015B04;
  uint64_t v50 = &unk_100283558;
  uint64_t v51 = &v34;
  char v52 = &v38;
  int v53 = &v42;
  uint64_t v54 = a1;
  sub_100015B70(a1, @"PRAGMA integrity_check", &v37, &buf);
  if (!*((_BYTE *)v43 + 24))
  {
    CFRange v12 = (__CFError *)v35[3];
    if (!v12)
    {
      *((_BYTE *)v39 + 24) = 1;
      __int16 v19 = (os_log_s *)sub_10001267C("#SecDB");
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_26;
      }
      *(_WORD *)uint64_t v46 = 0;
      int v16 = "#SecDB warning: failed to run integrity check due to corruption";
      __int16 v17 = v19;
      uint32_t v18 = 2;
      goto LABEL_58;
    }

    CFIndex Code = CFErrorGetCode(v12);
    if (Code == 26 || Code == 11) {
      *((_BYTE *)v39 + 24) = 1;
    }
    uint64_t v14 = (os_log_s *)sub_10001267C("#SecDB");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = v35[3];
      *(_DWORD *)uint64_t v46 = 138543362;
      uint64_t v47 = v15;
      int v16 = "#SecDB warning error %{public}@ when running integrity check";
      __int16 v17 = v14;
      uint32_t v18 = 12;
LABEL_58:
      _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, v16, v46, v18);
    }
  }

LABEL_26:
  if (*((_BYTE *)v39 + 24))
  {
    int v20 = *((unsigned __int8 *)v43 + 24);
    int v21 = (os_log_s *)sub_10001267C("SecError");
    BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if (v20)
    {
      if (v22)
      {
        *(_WORD *)uint64_t v46 = 0;
        uint64_t v23 = "SecDBCheckCorrupted ran integrity_check, and that didn't return ok";
LABEL_32:
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, v23, v46, 2u);
      }
    }

    else if (v22)
    {
      *(_WORD *)uint64_t v46 = 0;
      uint64_t v23 = "SecDBCheckCorrupted failed to run integrity check";
      goto LABEL_32;
    }
  }

  int v24 = (const void *)v35[3];
  if (v24)
  {
    v35[3] = 0LL;
    CFRelease(v24);
  }

  int v25 = *((unsigned __int8 *)v39 + 24);
  _Block_object_dispose(&v34, 8);
  _Block_object_dispose(&v38, 8);
  _Block_object_dispose(&v42, 8);
  *(_BYTE *)(a1 + 40) = v25;
  unint64_t v26 = (os_log_s *)sub_10001267C("SecError");
  BOOL v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
  if (v25)
  {
    if (v27)
    {
      LODWORD(buf) = 67109120;
      DWORD1(buf) = a2;
      char v28 = "operation returned code: %d integrity check=fail";
      uint64_t v29 = v26;
      uint32_t v30 = 8;
LABEL_49:
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, v28, (uint8_t *)&buf, v30);
    }

LABEL_27:
  return v14;
}

    uint64_t v34 = 1;
    goto LABEL_27;
  }

  uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v6 recordType]);
  uint64_t v40 = [v39 isEqual:@"tlkshare"];

  if (v40)
  {
    char v41 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOperationDependencies contextID](self, "contextID"));
    uint64_t v57 = 0LL;
    +[CKKSTLKShareRecord intransactionRecordChanged:contextID:resync:error:]( &OBJC_CLASS___CKKSTLKShareRecord,  "intransactionRecordChanged:contextID:resync:error:",  v6,  v41,  v4,  &v57);
    BOOL v27 = (os_log_s *)v57;

    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOperationDependencies flagHandler](self, "flagHandler"));
    [v23 _onqueueHandleFlag:@"key_process_requested"];
    goto LABEL_12;
  }

  uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v6 recordType]);
  uint64_t v43 = [v42 isEqualToString:@"currentkey"];

  if (v43)
  {
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOperationDependencies contextID](self, "contextID"));
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOperationDependencies flagHandler](self, "flagHandler"));
    uint64_t v56 = 0LL;
    +[CKKSCurrentKeyPointer intransactionRecordChanged:contextID:resync:flagHandler:error:]( &OBJC_CLASS___CKKSCurrentKeyPointer,  "intransactionRecordChanged:contextID:resync:flagHandler:error:",  v6,  v23,  v4,  v37,  &v56);
    uint64_t v38 = v56;
    goto LABEL_23;
  }

  uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v6 recordType]);
  char v45 = [v44 isEqualToString:@"manifest"];

  if ((v45 & 1) != 0) {
    goto LABEL_26;
  }
  uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v6 recordType]);
  uint64_t v47 = [v46 isEqualToString:@"manifest_leaf"];

  if ((v47 & 1) != 0) {
    goto LABEL_26;
  }
  uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v6 recordType]);
  uint64_t v50 = [v49 isEqualToString:@"devicestate"];

  if (v50)
  {
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOperationDependencies contextID](self, "contextID"));
    uint64_t v55 = 0LL;
    +[CKKSDeviceStateEntry intransactionRecordChanged:contextID:resync:error:]( &OBJC_CLASS___CKKSDeviceStateEntry,  "intransactionRecordChanged:contextID:resync:error:",  v6,  v23,  v4,  &v55);
    int v24 = v55;
    goto LABEL_11;
  }

  uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v6 recordID]);
  char v52 = (void *)objc_claimAutoreleasedReturnValue([v51 zoneID]);
  int v53 = (void *)objc_claimAutoreleasedReturnValue([v52 zoneName]);
  uint64_t v54 = sub_1000AA6AC(@"ckksfetch", v53);
  BOOL v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);

  if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
    goto LABEL_16;
  }
  int v32 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6 recordType]);
  *(_DWORD *)__int128 buf = 138412546;
  int v62 = v32;
  int v63 = 2112;
  int v64 = (os_log_s *)v6;
  _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "unknown record type: %@ %@", buf, 0x16u);
LABEL_15:

LABEL_16:
  uint64_t v34 = 0;
LABEL_27:

  objc_autoreleasePoolPop(v7);
  return v34;
}

    char v28 = @"Unsupported SOS Coder DER";
LABEL_27:
    SOSErrorCreate(1029LL, &cfa, 0LL, v28);
LABEL_28:
    uint64_t v29 = (const void *)Instance;
    goto LABEL_29;
  }

  *(void *)__int128 buf = 0LL;
  uint64_t v34 = ccder_decode_sequence_tl(buf, BytePtr, v14);
  if (*(void *)buf != v14) {
    goto LABEL_54;
  }
  id v35 = sub_10001A6E4(kCFAllocatorDefault, &v43, &cfa, v34, v14);
  BOOL v22 = sub_100018C70((BOOL *)(Instance + 32), (uint64_t)v35, *(uint64_t *)buf);
LABEL_36:
  uint64_t v33 = (const UInt8 *)v22;
  if (v22 != *(void *)buf) {
    uint64_t v33 = sub_10001A6E4(kCFAllocatorDefault, (CFDataRef *)(Instance + 40), &cfa, v22, *(uint64_t *)buf);
  }
LABEL_38:
  uint64_t v36 = v43;
  if (!v33 || (uint64_t v37 = SecOTRSessionCreateFromData(0LL, v43), (*(void *)(Instance + 24) = v37) == 0LL))
  {
    CFRelease((CFTypeRef)Instance);
    if (!v36) {
      goto LABEL_30;
    }
    uint64_t v29 = v36;
LABEL_29:
    CFRelease(v29);
LABEL_30:
    uint32_t v30 = sub_10001267C("coder");
    int v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412546;
      *(void *)&uint8_t buf[4] = cf;
      uint64_t v47 = 2112;
      uint64_t v48 = (const __CFString *)cfa;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Coder for '%@' failed to create: %@",  buf,  0x16u);
    }

    Instance = 0LL;
    int v32 = 1;
    goto LABEL_47;
  }

  if (!*(void *)(Instance + 48))
  {
    uint64_t v38 = *(void *)ccsha1_di();
    CFMutableArrayRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, 0LL);
    CFDataSetLength(Mutable, v38);
    *(void *)(Instance + 4_Block_object_dispose(va, 8) = Mutable;
  }

  if (v36)
  {
    CFRelease(v36);
    int v32 = 0;
  }

  else
  {
    int v32 = Instance == 0;
  }

  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 48) + 96LL), cf, (const void *)Instance);
  uint64_t v40 = sub_10001267C("coder");
  int v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412546;
    *(void *)&uint8_t buf[4] = Instance;
    uint64_t v47 = 2112;
    uint64_t v48 = cf;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "adding coder: %@ for peerid: %@", buf, 0x16u);
  }

      unint64_t v26 = *v15++;
      uint64_t v14 = v26;
    }

    while (v26);
  }

  if (a4) {
    (*(void (**)(uint64_t, __CFString *, char *))(a4 + 16))(a4, Mutable, &v31);
  }
  return Mutable;
}

  if (Mutable) {
    CFRelease(Mutable);
  }
  _Block_object_dispose(&v18, 8);
  return v10;
}

  CFStringAppend(a1, @";"));
  int v16 = (uint64_t *)a2[2];
  if (v16)
  {
    __int16 v17 = 3LL;
    do
    {
      if ((~*((_DWORD *)v16 + 4) & 6LL) == 0)
      {
        uint32_t v18 = *((_DWORD *)v16 + 2);
        __int16 v19 = *a2;
        int v20 = *v16;
        if (v18 == 11) {
          CFStringAppendFormat(a1, 0LL, @"CREATE INDEX %@%@0 ON %@(%@) WHERE %@=0;", v19, v20, v19, v20, v20);
        }
        else {
          CFStringAppendFormat(a1, 0LL, @"CREATE INDEX %@%@ ON %@(%@);", v19, v20, *a2, v20, v21);
        }
      }

      int v16 = (uint64_t *)a2[v17++];
    }

    while (v16);
  }

    sub_1000194E0(-25291, a7, @"aks_ref_key: %x failed to '%s' item (class %d, bag: %d)", a1, v16, a4, a3);
    return;
  }

  if ((int)a1 > -536363000)
  {
    if ((_DWORD)a1 == -536362999 || (_DWORD)a1 == -536362989) {
      goto LABEL_19;
    }
    goto LABEL_26;
  }

  if ((_DWORD)a1 == -536870160)
  {
    sub_1000194E0( -25291,  a7,  @"ks_crypt: %x failed to '%@' item (class %d, bag: %d) No key available for class.",  3758097136LL,  cf1,  a4,  a3);
    return;
  }

  if ((_DWORD)a1 != -536363000) {
    goto LABEL_26;
  }
LABEL_20:
  if ((_DWORD)a1 == -536870194 && a6)
  {
    BytePtr = (UInt8 *)CFDataGetBytePtr(a6);
    CFIndex Length = CFDataGetLength(a6);
    __int16 v19 = ACMContextCreateWithExternalForm(BytePtr, Length);
    if (v19)
    {
      int v20 = v19;
      ACMContextRemovePassphraseCredentialsByPurposeAndScope(v19, 0, 1);
      ACMContextDelete(v20, 0);
    }
  }

  sub_10011FC80((CFErrorRef *)a7, a5);
}

            char v28 = 0;
            goto LABEL_28;
          }

          if (![v20 count]) {
            break;
          }
          uint64_t v44 = 0u;
          char v45 = 0u;
          uint64_t v42 = 0u;
          uint64_t v43 = 0u;
          int v20 = v20;
          BOOL v22 = [v20 countByEnumeratingWithState:&v42 objects:v55 count:16];
          if (v22)
          {
            uint64_t v23 = v22;
            int v24 = *(void *)v43;
            while (2)
            {
              for (i = 0LL; i != v23; i = (char *)i + 1)
              {
                if (*(void *)v43 != v24) {
                  objc_enumerationMutation(v20);
                }
                unint64_t v26 = *(void **)(*((void *)&v42 + 1) + 8LL * (void)i);
                char v41 = 0LL;
                [v26 intransactionMoveToState:@"new" viewState:v13 error:&v41];
                BOOL v27 = v41;
                if (v27)
                {
                  int v21 = v27;
                  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView zoneName](v15, "zoneName"));
                  uint32_t v30 = sub_1000AA6AC(@"ckks", v29);
                  int v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);

                  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)__int128 buf = 138412546;
                    char v52 = v26;
                    int v53 = 2112;
                    uint64_t v54 = v21;
                    _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "Error fixing up inflight OQE(%@): %@",  buf,  0x16u);
                  }

                  CFStringRef v7 = v40;
                  if (v39) {
                    *uint64_t v39 = v21;
                  }

                  goto LABEL_26;
                }
              }

              uint64_t v23 = [v20 countByEnumeratingWithState:&v42 objects:v55 count:16];
              if (v23) {
                continue;
              }
              break;
            }
          }

          p_superclass = (__objc2_class **)(&OBJC_CLASS___CKKSProcessReceivedKeysOperation + 8);
          BOOL v11 = v19;
          unint64_t v4 = v15;
        }

        CFRange v12 = v38 + 1;
        CFStringRef v7 = v40;
        int v9 = v36;
        p_superclass = (__objc2_class **)(&OBJC_CLASS___CKKSProcessReceivedKeysOperation + 8);
        BOOL v11 = v19;
        unint64_t v4 = v15;
        if ((id)(v38 + 1) != v37) {
          continue;
        }
        break;
      }

      uint64_t v8 = [v40 countByEnumeratingWithState:&v47 objects:v56 count:16];
      char v28 = 1;
    }

    while (v8);
  }

  else
  {
    char v28 = 1;
  }

          CFRelease(MutableCopy);
          goto LABEL_27;
        }

        int v32 = sub_10001267C("viewChange");
        uint32_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
        if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_48;
        }
        *(_WORD *)__int128 buf = 0;
        int v31 = "Bad view change (disable) with kSOSViewKeychainV0";
      }

      else
      {
        uint64_t v29 = sub_10001267C("viewChange");
        uint32_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
        if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
LABEL_48:

          goto LABEL_49;
        }

        *(_WORD *)__int128 buf = 0;
        int v31 = "Bad view change (enable) with kSOSViewKeychainV0";
      }

      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v31, buf, 2u);
      goto LABEL_48;
    }

    char v28 = sub_10001267C("views");
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      int v24 = "Couldn't copy PeerInfoRef";
      goto LABEL_41;
    }

LABEL_50:
    sub_1000159F0(a1, a2, a3);
    return !(_DWORD)a2 || (_DWORD)a2 == 101;
  }

  if (v27)
  {
    LODWORD(buf) = 67109120;
    DWORD1(buf) = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "operation returned code: %d: integrity check=pass",  (uint8_t *)&buf,  8u);
  }

  return !(_DWORD)a2 || (_DWORD)a2 == 101;
}

      goto LABEL_51;
    }

  uint64_t v83 = 0u;
  char v84 = 0u;
  uint64_t v81 = 0u;
  CFStringRef v82 = 0u;
  obja = (id)objc_claimAutoreleasedReturnValue([v7 allKeys]);
  uint64_t v79 = [obja countByEnumeratingWithState:&v81 objects:v99 count:16];
  if (!v79) {
    goto LABEL_78;
  }
  int v77 = *(void *)v82;
  int v73 = CKUnderlyingErrorDomain;
  while (2)
  {
    char v45 = 0LL;
    while (2)
    {
      if (*(void *)v82 != v77) {
        objc_enumerationMutation(obja);
      }
      uint64_t v46 = *(void **)(*((void *)&v81 + 1) + 8LL * (void)v45);
      uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:v46]);
      uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v47 userInfo]);
      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v48 objectForKeyedSubscript:NSUnderlyingErrorKey]);

      uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v49 userInfo]);
      uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v50 objectForKeyedSubscript:NSUnderlyingErrorKey]);

      char v52 = (void *)objc_claimAutoreleasedReturnValue([v46 zoneID]);
      int v53 = (void *)objc_claimAutoreleasedReturnValue([v52 zoneName]);
      uint64_t v54 = sub_1000AA6AC(@"ckks", v53);
      uint64_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);

      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412802;
        v94 = v47;
        BOOL v95 = 2112;
        BOOL v96 = v49;
        CFDataRef v97 = 2112;
        CFDataRef v98 = v51;
        _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "Examining 'write failed' error: %@ %@ %@",  buf,  0x20u);
      }

      uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v47 domain]);
      if (![v56 isEqualToString:CKErrorDomain]
        || [v47 code] != (id)15
        || !v49)
      {
        goto LABEL_68;
      }

      uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue([v49 domain]);
      if (![v57 isEqualToString:v73] || objc_msgSend(v49, "code") != (id)6000 || !v51)
      {

        goto LABEL_68;
      }

      double v58 = (void *)objc_claimAutoreleasedReturnValue([v51 domain]);
      v70 = [v58 isEqualToString:@"CloudkitKeychainService"];

      if (v70)
      {
        if ([v51 code] == (id)9)
        {
          int v59 = (void *)objc_claimAutoreleasedReturnValue([v46 zoneID]);
          uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([v59 zoneName]);
          uint64_t v61 = sub_1000AA6AC(@"ckks", v60);
          uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(v61);

          if (os_log_type_enabled((os_log_t)v56, OS_LOG_TYPE_ERROR))
          {
LABEL_73:
            *(_DWORD *)__int128 buf = 138412546;
            v94 = v51;
            BOOL v95 = 2112;
            BOOL v96 = v46;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v56,  OS_LOG_TYPE_ERROR,  "CKKS Server extension has told us about %@ for record %@; requesting refetch and reprocess of key hierarchy",
              buf,
              0x16u);
          }

  _Block_object_dispose(&v35, 8);
  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(&v43, 8);
  _Block_object_dispose(&v47, 8);
  _Block_object_dispose(&v51, 8);
  return v4;
}

  BOOL v27 = 1;
LABEL_51:
  if (*(void *)(a2[1] + 8))
  {
    char v28 = (os_log_s *)sub_10001267C("SecWarning");
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v29 = *(void *)*a2;
      uint32_t v30 = *(void **)(a2[1] + 8);
      *(_DWORD *)__int128 buf = 138478339;
      *(void *)&uint8_t buf[4] = v18;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v29;
      *(_WORD *)&buf[22] = 2112;
      int v63 = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Failed to import an item (%{private}@) of class '%@': %@ - ignoring error.",  buf,  0x20u);
    }

    int v31 = a2[1];
    int v32 = *(const void **)(v31 + 8);
    if (v32)
    {
      *(void *)(v31 + _Block_object_dispose(va, 8) = 0LL;
      CFRelease(v32);
    }
  }

  else
  {
    uint64_t v33 = (os_log_s *)sub_10001267C("import");
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138477827;
      *(void *)&uint8_t buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "imported item: %{private}@", buf, 0xCu);
    }
  }

  if ((v27 & 1) == 0) {
    CFRelease(v18);
  }
}

  v6[7] = self->_timestampC2Now;
  *((_DWORD *)v6 + 70) |= 0x40u;
  int v25 = self->_has;
  if ((*(_WORD *)&v25 & 0x200) == 0)
  {
LABEL_19:
    if ((*(_WORD *)&v25 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }
}

    uint64_t v40 = sub_10001267C("SecError");
    char v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
    uint64_t v42 = os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
    uint64_t v43 = v53;
    if (v42)
    {
      if (v53) {
        uint64_t v43 = *v53;
      }
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v43;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "No full_key: %@:", (uint8_t *)&buf, 0xCu);
    }

    if (v23)
    {
      CFRelease(v54);
      if (!v24)
      {
LABEL_59:
        uint64_t v39 = v52;
        if (!v25)
        {
LABEL_61:
          if (v16) {
            CFRelease(v16);
          }

          goto LABEL_64;
        }

uint64_t sub_1000159F0(uint64_t a1, uint64_t __errnum, CFTypeRef *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (*(_BYTE *)(v3 + 163))
  {
    BOOL v11 = *(const __CFString **)(v3 + 16);
    *(void *)__int128 buf = _NSConcreteStackBlock;
    uint64_t v14 = 0x40000000LL;
    uint64_t v15 = sub_1000134E4;
    int v16 = &unk_100283030;
    __int16 v17 = &stru_100283608;
    sub_10001337C(v11, (uint64_t)buf);
    CFRange v12 = (os_log_s *)sub_10001267C("SecWarning");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "SecDbHandleCorrupt: killing self so that successor might cleanly delete corrupt db",  buf,  2u);
    }

    sub_100014948();
  }

  CFIndex v7 = (int)__errnum;
  uint64_t v8 = strerror(__errnum);
  sub_1000194B4( v7,  kCFErrorDomainPOSIX,  0LL,  a3,  v9,  @"SecDbHandleCorrupt not allowed to repair, handled error: [%d] %s",  __errnum,  v8);
  *(_BYTE *)(a1 + 40) = 0;
  return 0LL;
}

uint64_t sub_100015B04(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = (CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  v5[2] = sub_100015BD4;
  v5[3] = &unk_100283530;
  CFIndex v7 = a2;
  __int128 v6 = *(_OWORD *)(a1 + 40);
  return sub_100015CD8(v2, a2, v3, (uint64_t)v5);
}

sqlite3_stmt *sub_100015B70(uint64_t a1, const __CFString *a2, CFTypeRef *a3, uint64_t a4)
{
  dispatch_queue_t result = sub_100015014(a1, a2, 0LL, a3);
  if (result)
  {
    CFIndex v7 = result;
    (*(void (**)(uint64_t, sqlite3_stmt *))(a4 + 16))(a4, result);
    return (sqlite3_stmt *)sub_100015290(v7, a3);
  }

  return result;
}

void sub_100015BD4(uint64_t a1)
{
  uint64_t v2 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 48), 0);
  uint64_t v3 = v2;
  if (!v2 || strncasecmp((const char *)v2, "ok", 3uLL))
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    unint64_t v4 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "NULL";
      if (v3) {
        uint64_t v5 = (const char *)v3;
      }
      int v6 = 136315138;
      CFIndex v7 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "SecDBCheckCorrupted integrity_check returned %s",  (uint8_t *)&v6,  0xCu);
    }
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
}

uint64_t sub_100015CD8(uint64_t a1, sqlite3_stmt *pStmt, CFTypeRef *a3, uint64_t a4)
{
  while (1)
  {
    while (1)
    {
      uint64_t result = sub_100015138(a1, pStmt, (int)a3);
      if ((_DWORD)result == 1) {
        break;
      }
      if (!(_DWORD)result) {
        return result;
      }
      if ((_DWORD)result == 2) {
        return 1LL;
      }
    }

    if (!a4) {
      break;
    }
    uint64_t v16 = 0LL;
    __int16 v17 = &v16;
    uint64_t v18 = 0x2000000000LL;
    char v19 = 0;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 0x40000000LL;
    CFRange v12 = sub_100015E08;
    BOOL v13 = &unk_100283330;
    uint64_t v14 = a4;
    uint64_t v15 = &v16;
    uint64_t v9 = v11;
    unsigned int v10 = objc_autoreleasePoolPush();
    v12((uint64_t)v9);
    objc_autoreleasePoolPop(v10);

    LODWORD(v9) = *((unsigned __int8 *)v17 + 24);
    _Block_object_dispose(&v16, 8);
    if ((_DWORD)v9) {
      return 1LL;
    }
  }

  sub_100014958(1, a3, @"SecDbStep SQLITE_ROW returned without a row handler");
  return 0LL;
}

uint64_t sub_100015E08(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
}

void sub_100015E20(id a1, const char *a2)
{
  if (!stat(__b, &v7))
  {
    uint64_t v3 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)uint64_t v9 = __b;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "SecDbHandleCorrupt: Tried to write corruption marker %s but one already exists",  buf,  0xCu);
    }
  }

  unint64_t v4 = fopen(__b, "w");
  if (v4)
  {
    fclose(v4);
  }

  else
  {
    uint64_t v5 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *__error();
      *(_DWORD *)__int128 buf = 67109378;
      *(_DWORD *)uint64_t v9 = v6;
      *(_WORD *)&void v9[4] = 2082;
      *(void *)&v9[6] = __b;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "SecDbHandleCorrupt: Unable (%{darwin.errno}d) to create corruption marker %{public}s",  buf,  0x12u);
    }
  }

uint64_t sub_100015FA4(void *a1, char *zSql, unint64_t nByte)
{
  uint64_t v15 = 0LL;
  uint64_t v7 = a1[5];
  int v6 = (CFTypeRef *)a1[6];
  uint64_t v8 = *(sqlite3 **)(v7 + 64);
  if (nByte >> 31)
  {
    uint64_t result = sub_1000149A0(18LL, *(sqlite3 **)(v7 + 64), v6, @"prepare_v2: sql bigger than INT_MAX");
LABEL_3:
    unsigned int v10 = 0LL;
  }

  else
  {
    for (int i = 0; ; ++i)
    {
      ppStmt = 0LL;
      uint64_t result = sqlite3_prepare_v2(v8, zSql, nByte, &ppStmt, (const char **)&v15);
      if (!(_DWORD)result) {
        break;
      }
      uint64_t result = sub_1000152F4(v7, result, (uint64_t)@"preparev2", i, v6);
      if ((result & 1) == 0) {
        goto LABEL_3;
      }
    }

    unsigned int v10 = ppStmt;
  }

  *(void *)(*(void *)(a1[4] + 8LL) + 24LL) = v10;
  CFRange v12 = (void *)a1[7];
  if (v12)
  {
    uint64_t v13 = v15 - zSql;
    if (v15 > zSql && v15 < &zSql[nByte])
    {
      *CFRange v12 = v13;
      v12[1] = nByte - v13;
    }
  }

  return result;
}

uint64_t sub_1000160A0(uint64_t a1, const __CFString *a2)
{
  uint64_t v19 = 0LL;
  int v20 = &v19;
  uint64_t v21 = 0x2000000000LL;
  char v22 = 1;
  uint64_t v15 = 0LL;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2000000000LL;
  int v18 = -1;
  uint64_t v11 = 0LL;
  CFRange v12 = &v11;
  uint64_t v13 = 0x2000000000LL;
  CFTypeRef v14 = 0LL;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 0x40000000LL;
  v10[2] = sub_100016234;
  v10[3] = &unk_100283308;
  v10[4] = &v19;
  v10[5] = &v11;
  v10[6] = &v15;
  v10[7] = a1;
  char v3 = sub_1000162BC(a1, a2, &v14, (uint64_t)v10);
  if (*((_BYTE *)v20 + 24)) {
    char v4 = v3;
  }
  else {
    char v4 = 0;
  }
  *((_BYTE *)v20 + 24) = v4;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = v12[3];
      *(_DWORD *)__int128 buf = 138412546;
      int v24 = a2;
      __int16 v25 = 2112;
      uint64_t v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "SecDBGetInteger [%@] failed: %@", buf, 0x16u);
    }
  }

  uint64_t v7 = (const void *)v12[3];
  if (v7)
  {
    v12[3] = 0LL;
    CFRelease(v7);
  }

  uint64_t v8 = *((unsigned int *)v16 + 6);
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  return v8;
}

uint64_t sub_100016234(void *a1, sqlite3_stmt *a2)
{
  uint64_t v3 = a1[6];
  uint64_t v4 = *(void *)(a1[5] + 8LL);
  v10[0] = _NSConcreteStackBlock;
  v10[2] = sub_1000163B4;
  v10[3] = &unk_1002832E0;
  uint64_t v5 = a1[7];
  v10[1] = 0x40000000LL;
  v10[4] = v3;
  v10[5] = a2;
  char v6 = sub_100015CD8(v5, a2, (CFTypeRef *)(v4 + 24), (uint64_t)v10);
  uint64_t v7 = *(void *)(a1[4] + 8LL);
  if (*(_BYTE *)(v7 + 24)) {
    char v8 = v6;
  }
  else {
    char v8 = 0;
  }
  *(_BYTE *)(v7 + 24) = v8;
  return 1LL;
}

unint64_t sub_1000162BC(uint64_t a1, const __CFString *cf, CFTypeRef *a3, uint64_t a4)
{
  char v6 = cf;
  CFRetain(cf);
  unint64_t v8 = 1LL;
  if (v6)
  {
    do
    {
      CFStringRef v11 = 0LL;
      if ((v8 & 1) != 0)
      {
        unint64_t v8 = (unint64_t)sub_100015014(a1, v6, &v11, a3);
        if (v8)
        {
          if (a4) {
            int v9 = (*(uint64_t (**)(uint64_t, unint64_t))(a4 + 16))(a4, v8);
          }
          else {
            int v9 = sub_1000194E0(-50, (__CFString **)a3, @"SecDbWithSQL perform block missing");
          }
          unint64_t v8 = v9 & sub_100015290((sqlite3_stmt *)v8, a3);
        }
      }

      else
      {
        sub_100014958(1, a3, @"Error with unexecuted sql remaining %@", v6);
        unint64_t v8 = 0LL;
      }

      CFRelease(v6);
      char v6 = v11;
    }

    while (v11);
  }

  return v8;
}

uint64_t sub_1000163B4(uint64_t a1, _BYTE *a2)
{
  uint64_t result = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 40), 0);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  *a2 = 1;
  return result;
}

BOOL sub_1000163F4(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  char v12 = 1;
  if (*(_BYTE *)(a1 + 25))
  {
    (*(void (**)(uint64_t, char *))(a4 + 16))(a4, &v12);
    if (!v12)
    {
      uint64_t v5 = (os_log_s *)sub_10001267C("#SecDB");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "#SecDB nested transaction asked to not be committed",  buf,  2u);
      }
    }

    BOOL v6 = 1;
  }

  else
  {
    int v9 = @"BEGIN EXCLUSIVE";
    switch(a2)
    {
      case 2LL:
        goto LABEL_11;
      case 3LL:
        int v9 = @"BEGIN";
        goto LABEL_11;
      case 4LL:
        *(void *)(a1 + 32) = 0LL;
        goto LABEL_11;
      case 5LL:
        *(void *)(a1 + 32) = 3LL;
LABEL_11:
        if (sqlite3_get_autocommit(*(sqlite3 **)(a1 + 64)) && (sub_100014F28(a1, v9, a3) & 1) == 0) {
          goto LABEL_15;
        }
        *(_BYTE *)(a1 + 25) = 1;
        (*(void (**)(uint64_t, char *))(a4 + 16))(a4, &v12);
        uint64_t v25 = 0LL;
        uint64_t v26 = &v25;
        uint64_t v27 = 0x2000000000LL;
        char v28 = 1;
        v23[0] = 0LL;
        v23[1] = v23;
        v23[2] = 0x2000000000LL;
        char v24 = 0;
        *(void *)__int128 buf = _NSConcreteStackBlock;
        uint64_t v15 = 0x40000000LL;
        uint64_t v16 = sub_100016634;
        uint64_t v17 = &unk_1002834E0;
        char v22 = v12;
        int v18 = v23;
        uint64_t v19 = &v25;
        uint64_t v20 = a1;
        uint64_t v21 = a3;
        if (*(_BYTE *)(a1 + 24))
        {
          sub_100016634((uint64_t)buf);
        }

        else
        {
          unsigned int v10 = *(dispatch_queue_s **)(*(void *)(a1 + 16) + 32LL);
          block[0] = _NSConcreteStackBlock;
          block[1] = 0x40000000LL;
          block[2] = sub_10001687C;
          block[3] = &unk_100283508;
          block[4] = buf;
          dispatch_barrier_sync(v10, block);
        }

        BOOL v6 = *((_BYTE *)v26 + 24) != 0;
        _Block_object_dispose(v23, 8);
        _Block_object_dispose(&v25, 8);
        break;
      default:
        sub_100014958(1, a3, @"invalid transaction type %d", a2);
LABEL_15:
        BOOL v6 = 0;
        break;
    }
  }

  return v12 && v6;
}

void sub_100016634(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 48);
  if (v2)
  {
    if (!*(_BYTE *)(v3 + 24))
    {
      sub_100016888(v3, 1LL);
      uint64_t v3 = *(void *)(a1 + 48);
    }

    char v4 = sub_100014F28(v3, @"END", *(CFTypeRef **)(a1 + 56));
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v4;
  }

  else
  {
    char v5 = sub_100014F28(v3, @"ROLLBACK", *(CFTypeRef **)(a1 + 56));
    char v4 = 0;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v5;
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v4;
  uint64_t v6 = *(void *)(a1 + 48);
  *(_BYTE *)(v6 + 25) = 0;
  if (!*(_BYTE *)(v6 + 24))
  {
    sub_100016888(v6, 2LL * *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
    uint64_t v6 = *(void *)(a1 + 48);
  }

  *(void *)(v6 + 32) = 1LL;
  if (*(_BYTE *)(a1 + 64))
  {
    if (*(_BYTE *)(*(void *)(v6 + 16) + 165LL))
    {
      if (!*(_BYTE *)(v6 + 24))
      {
        int v7 = sub_1000160A0(v6, @"pragma page_count");
        if (v7 >= 1)
        {
          int v8 = v7;
          int v9 = sub_1000160A0(v6, @"pragma freelist_count");
          if ((v9 & 0x80000000) == 0)
          {
            LODWORD(v10) = v9;
            double v11 = (double)(v8 - (uint64_t)v9) / (double)v8;
            if (v9 >> 13 || v11 <= 0.85)
            {
              if (v11 >= 0.4) {
                uint64_t v10 = (uint64_t)((double)v9 * 0.2);
              }
              sql = 0LL;
              asprintf(&sql, "pragma incremental_vacuum(%d)", v10);
              if (sql)
              {
                errmsg = 0LL;
                int v12 = sqlite3_exec(*(sqlite3 **)(v6 + 64), sql, 0LL, 0LL, &errmsg);
                if (v12)
                {
                  int v13 = v12;
                  CFTypeRef v14 = (os_log_s *)sub_10001267C("SecError");
                  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)__int128 buf = 67109378;
                    int v18 = v13;
                    __int16 v19 = 2082;
                    uint64_t v20 = errmsg;
                    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "incremental_vacuum failed with: (%d) %{public}s",  buf,  0x12u);
                  }
                }

                sqlite3_free(errmsg);
                free(sql);
              }
            }
          }
        }
      }
    }
  }

uint64_t sub_10001687C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100016888(uint64_t a1, uint64_t a2)
{
  char v4 = *(const void **)(a1 + 72);
  if (CFArrayGetCount((CFArrayRef)v4))
  {
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = (os_unfair_lock_s *)(v5 + 148);
    os_unfair_lock_lock((os_unfair_lock_t)(v5 + 148));
    int v7 = *(const __CFArray **)(v5 + 152);
    if (v7)
    {
      Copy = CFArrayCreateCopy(kCFAllocatorDefault, v7);
      os_unfair_lock_unlock(v6);
      if (Copy)
      {
        *(void *)(a1 + 72) = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
        context[0] = _NSConcreteStackBlock;
        context[1] = 0x40000000LL;
        context[2] = sub_1000169AC;
        context[3] = &unk_100283650;
        context[4] = a1;
        void context[5] = a2;
        context[6] = v4;
        v10.size_t length = CFArrayGetCount(Copy);
        v10.location = 0LL;
        CFArrayApplyFunction(Copy, v10, (CFArrayApplierFunction)sub_1000169C8, context);
        if (v4) {
          CFRelease(v4);
        }
        CFRelease(Copy);
      }
    }

    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 148));
    }
  }

uint64_t sub_1000169AC(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void, void))(a2 + 16))( a2,  a1[4],  a1[5],  *(void *)(a1[4] + 32LL),  a1[6]);
}

uint64_t sub_1000169C8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

BOOL sub_1000169DC(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  if (a2) {
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 120), 0xFFFFFFFFFFFFFFFFLL);
  }
  else {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
  }
  uint64_t v36 = 0LL;
  uint64_t v37 = &v36;
  uint64_t v38 = 0x2000000000LL;
  uint64_t v39 = 0LL;
  uint64_t v32 = 0LL;
  uint64_t v33 = &v32;
  uint64_t v34 = 0x2000000000LL;
  char v35 = 1;
  uint64_t v28 = 0LL;
  uint64_t v29 = &v28;
  uint64_t v30 = 0x2000000000LL;
  char v31 = 0;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 0x40000000LL;
  char v24 = sub_100016C2C;
  uint64_t v25 = &unk_100283358;
  uint64_t v26 = &v36;
  uint64_t v27 = a3;
  int v8 = *(dispatch_queue_s **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_100016C5C;
  block[3] = &unk_100283380;
  block[8] = a1;
  block[9] = a3;
  block[10] = a4;
  char v22 = a2;
  block[6] = &v28;
  block[7] = &v36;
  block[4] = v23;
  void block[5] = &v32;
  dispatch_sync(v8, block);
  int v9 = v37;
  if (*((_BYTE *)v33 + 24))
  {
    if (!v37[3])
    {
      char v20 = 0;
      uint64_t v10 = sub_100017140(a1, a2);
      int v11 = ((uint64_t (*)(void *, uint64_t))v24)(v23, v10);
      int v9 = v37;
      if (v11)
      {
        char v12 = sub_100017238(v37[3], (uint64_t)&v20, a4);
        int v9 = v37;
        if ((v12 & 1) == 0)
        {
          int v13 = (const void *)v37[3];
          if (v13)
          {
            v37[3] = 0LL;
            CFRelease(v13);
            int v9 = v37;
          }
        }
      }
    }
  }

  uint64_t v14 = v9[3];
  if (v14 && !*((_BYTE *)v29 + 24) && *(void *)(*(void *)(v14 + 16) + 136LL) && !*(_BYTE *)(v14 + 24))
  {
    uint64_t v16 = *(dispatch_queue_s **)(a1 + 24);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 0x40000000LL;
    int v19[2] = sub_1000172F8;
    v19[3] = &unk_1002833A8;
    void v19[4] = &v36;
    v19[5] = a1;
    v19[6] = a4;
    dispatch_sync(v16, v19);
    int v9 = v37;
  }

  if (a3) {
    *a3 = v9[3];
  }
  uint64_t v15 = v9[3];
  if (!v15)
  {
    if (a2) {
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 120));
    }
    else {
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 56));
    }
    CFRelease((CFTypeRef)a1);
    uint64_t v15 = v37[3];
  }

  BOOL v17 = v15 != 0;
  _Block_object_dispose(&v28, 8);
  _Block_object_dispose(&v32, 8);
  _Block_object_dispose(&v36, 8);
  return v17;
}

BOOL sub_100016C2C(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2;
  int v2 = *(void **)(a1 + 40);
  if (v2) {
    void *v2 = a2;
  }
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) != 0LL;
}

void sub_100016C5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (*(_BYTE *)(v2 + 128)) {
    goto LABEL_22;
  }
  char v4 = *(uint64_t **)(a1 + 72);
  uint64_t v3 = *(CFTypeRef **)(a1 + 80);
  uint64_t v5 = *(const __CFString **)(v2 + 16);
  CFTypeRef v33 = 0LL;
  uint64_t v34 = &v33;
  uint64_t v35 = 0x2000000000LL;
  char v36 = 1;
  cf[0] = _NSConcreteStackBlock;
  cf[1] = (CFTypeRef)0x40000000;
  cf[2] = sub_100017B70;
  cf[3] = &unk_100283580;
  cf[4] = &v33;
  *(void *)&__int128 buf = _NSConcreteStackBlock;
  *((void *)&buf + 1) = 0x40000000LL;
  uint64_t v38 = sub_1000134E4;
  uint64_t v39 = &unk_100283030;
  uint64_t v40 = cf;
  sub_10001337C(v5, (uint64_t)&buf);
  int v6 = *((unsigned __int8 *)v34 + 24);
  _Block_object_dispose(&v33, 8);
  if (v6)
  {
    unsigned __int8 v31 = 0;
    uint64_t v7 = sub_100017140(v2, 0);
    if (v7)
    {
      uint64_t v8 = v7;
      cf[0] = 0LL;
      if ((sub_100017238(v7, (uint64_t)&v31, (uint64_t)cf) & 1) != 0)
      {
        CFTypeRef v9 = cf[0];
        if (cf[0])
        {
          cf[0] = 0LL;
          CFRelease(v9);
        }

        if (v4) {
          uint64_t *v4 = v8;
        }
        uint64_t v10 = (os_log_s *)sub_10001267C("#SecDB");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf) = 0;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "#SecDB starting maintenance",  (uint8_t *)&buf,  2u);
        }

        if (*(_BYTE *)(v8 + 40)) {
          goto LABEL_12;
        }
        uint64_t v26 = *(void *)(v8 + 16);
        uint64_t v27 = *(void *)(v26 + 136);
        if (v27)
        {
          CFTypeRef v33 = 0LL;
          *(_BYTE *)(v26 + 144) = 0;
          int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, CFTypeRef *))(v27 + 16))( v27,  v26,  v8,  v31,  v26 + 144,  &v33);
          *(_BYTE *)(v2 + 12_Block_object_dispose(va, 8) = v11;
          if ((v11 & 1) == 0)
          {
            uint64_t v28 = (os_log_s *)sub_10001267C("SecError");
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf) = 138412290;
              *(void *)((char *)&buf + 4) = v33;
              _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "opened block failed: %@",  (uint8_t *)&buf,  0xCu);
            }
          }

          if (!v3 || *(_BYTE *)(v8 + 40) || *v3)
          {
            if (v33)
            {
              uint64_t v29 = (os_log_s *)sub_10001267C("SecError");
              if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(buf) = 138412290;
                *(void *)((char *)&buf + 4) = v33;
                _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "opened block failed: error (%@) is being released and lost",  (uint8_t *)&buf,  0xCu);
              }

              CFTypeRef v30 = v33;
              if (v33)
              {
                CFTypeRef v33 = 0LL;
                CFRelease(v30);
              }
            }
          }

          else
          {
            CFTypeRef *v3 = v33;
          }

          if (*(_BYTE *)(v8 + 40)) {
LABEL_12:
          }
            int v11 = sub_1000159F0(v8, 0LL, v3);
        }

        else
        {
          int v11 = 0;
        }

        char v12 = (os_log_s *)sub_10001267C("#SecDB");
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf) = 0;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "#SecDB ending maintenance",  (uint8_t *)&buf,  2u);
          if (!v11)
          {
LABEL_16:
            CFRelease((CFTypeRef)v8);
            if (v4) {
              uint64_t *v4 = 0LL;
            }
            goto LABEL_20;
          }
        }

        else if (!v11)
        {
          goto LABEL_16;
        }

        CFArrayAppendValue(*(CFMutableArrayRef *)(v2 + 40), (const void *)v8);
        goto LABEL_16;
      }

      uint64_t v21 = (os_log_s *)sub_10001267C("SecError");
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(CFTypeRef *)((char *)&buf + 4) = cf[0];
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Unable to create database: %@",  (uint8_t *)&buf,  0xCu);
      }

      if (cf[0])
      {
        CFErrorDomain Domain = CFErrorGetDomain((CFErrorRef)cf[0]);
        if (CFEqual(Domain, @"com.apple.utilities.sqlite3"))
        {
          int Code = CFErrorGetCode((CFErrorRef)cf[0]);
          BOOL v25 = Code == 11 || Code == 26;
          *(_BYTE *)(v8 + 40) = v25;
        }
      }

      LOBYTE(v11) = 0;
      if (!v3 || *(_BYTE *)(v8 + 40)) {
        goto LABEL_20;
      }
      if (!*v3)
      {
        LOBYTE(v11) = 0;
        CFTypeRef *v3 = cf[0];
        goto LABEL_20;
      }
    }
  }

  else
  {
    CFIndex v13 = *__error();
    uint64_t v14 = __error();
    sub_1000194B4( v13,  kCFErrorDomainPOSIX,  0LL,  v3,  v15,  @"Unable to process corruption marker: %{darwin.errno}d",  *v14);
  }

  LOBYTE(v11) = 0;
LABEL_20:
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v11;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v11;
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
    return;
  }
  uint64_t v2 = *(void *)(a1 + 64);
LABEL_22:
  uint64_t v16 = 48LL;
  if (!*(_BYTE *)(a1 + 88)) {
    uint64_t v16 = 40LL;
  }
  BOOL v17 = *(const __CFArray **)(v2 + v16);
  if (CFArrayGetCount(v17) && !*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
  {
    uint64_t v18 = *(void *)(a1 + 32);
    ValueAtIndex = CFArrayGetValueAtIndex(v17, 0LL);
    if ((*(unsigned int (**)(uint64_t, const void *))(v18 + 16))(v18, ValueAtIndex))
    {
      char v20 = *(const void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
      if (v20) {
        CFRetain(v20);
      }
    }

    CFArrayRemoveValueAtIndex(v17, 0LL);
  }

uint64_t sub_100017140(uint64_t a1, char a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_100017908;
  block[3] = &unk_100283498;
  block[4] = &qword_1002DE7A0;
  if (qword_1002DE798 != -1) {
    dispatch_once(&qword_1002DE798, block);
  }
  uint64_t Instance = _CFRuntimeCreateInstance(kCFAllocatorDefault, qword_1002DE7A0, 64LL, 0LL);
  uint64_t v5 = Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = a1;
    *(_BYTE *)(Instance + 24) = a2;
    *(_BYTE *)(Instance + 25) = 0;
    *(void *)(Instance + 32) = 2LL;
    *(_BYTE *)(Instance + 40) = 0;
    *(_DWORD *)(Instance + 44) = 0;
    *(_BYTE *)(Instance + 4_Block_object_dispose(va, 8) = 0;
    *(void *)(Instance + 56) = 0LL;
    *(void *)(Instance + 64) = 0LL;
    *(void *)(Instance + 72) = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  }

  return v5;
}

uint64_t sub_100017238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000LL;
  char v10 = 1;
  uint64_t v3 = *(const __CFString **)(*(void *)(a1 + 16) + 16LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  void v6[2] = sub_1000173A0;
  v6[3] = &unk_1002835A8;
  v6[4] = &v7;
  void v6[5] = a1;
  v6[6] = a2;
  v6[7] = a3;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 0x40000000LL;
  void v11[2] = sub_1000134E4;
  v11[3] = &unk_100283030;
  v11[4] = v6;
  sub_10001337C(v3, (uint64_t)v11);
  uint64_t v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1000172F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) + 16LL);
  if (*(_BYTE *)(v1 + 144))
  {
    *(_BYTE *)(v1 + 144) = 0;
    if (((*(uint64_t (**)(void))(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)
                                                       + 16LL)
                                           + 136LL)
                               + 16LL))() & 1) == 0)
    {
      uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
      uint64_t v4 = *(_BYTE **)(v3 + 24);
      if (!v4[40]
        || (sub_1000159F0((uint64_t)v4, 0LL, *(CFTypeRef **)(a1 + 48)) & 1) == 0
        && (v3 = *(void *)(*(void *)(a1 + 32) + 8LL), (uint64_t v4 = *(_BYTE **)(v3 + 24)) != 0LL))
      {
        *(void *)(v3 + 24) = 0LL;
        CFRelease(v4);
      }
    }
  }

void sub_1000173A0(uint64_t a1, char *filename)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (*(_BYTE *)(*(void *)(v4 + 16) + 162LL))
  {
    if (*(_BYTE *)(v4 + 24)) {
      uint64_t v5 = 4194305LL;
    }
    else {
      uint64_t v5 = 4194306LL;
    }
  }

  else
  {
    uint64_t v5 = 4194305LL;
  }

  if (*(void *)(a1 + 48)) {
    BOOL v6 = sub_1000175C0(v4, filename, v5, 0LL);
  }
  else {
    BOOL v6 = 0;
  }
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v6;
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
  if (!*(_BYTE *)(v7 + 24))
  {
    *(_BYTE *)(v7 + 24) = 1;
    if (*(void *)(a1 + 48))
    {
      uint64_t v8 = dirname(filename);
      if (v8)
      {
        uint64_t v9 = v8;
        unsigned int v10 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 40) + 16LL) + 160LL);
        uint64_t v11 = mkpath_np(v8, (v10 >> 2) & 0x49 | v10);
        if ((_DWORD)v11 && (_DWORD)v11 != 17)
        {
          uint64_t v13 = v11;
          CFIndex v14 = (int)v11;
          uint64_t v15 = *(CFTypeRef **)(a1 + 56);
          uint64_t v16 = strerror(v11);
          sub_1000194B4(v14, kCFErrorDomainPOSIX, 0LL, v15, v17, @"mkpath_np %s: [%d] %s", v9, v13, v16);
          *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
        }
      }
    }

    uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 8LL);
    if (*(_BYTE *)(v18 + 24))
    {
      BOOL v19 = sub_1000175C0(*(void *)(a1 + 40), filename, 4194310LL, *(CFTypeRef **)(a1 + 56));
      uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 8LL);
    }

    else
    {
      BOOL v19 = 0;
    }

    *(_BYTE *)(v18 + 24) = v19;
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
    {
      chmod(filename, *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 16LL) + 160LL));
      char v20 = *(_BYTE **)(a1 + 48);
      if (v20) {
        _BYTE *v20 = 1;
      }
    }
  }

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    if (qword_1002DE7A8 != -1) {
      dispatch_once(&qword_1002DE7A8, &stru_1002835E8);
    }
    if (dword_1002DE7B0) {
      sqlite3_trace_v2( *(sqlite3 **)(*(void *)(a1 + 40) + 64LL),  dword_1002DE7B0,  (int (__cdecl *)(unsigned int, void *, void *, void *))sub_100017744,  *(void **)(a1 + 40));
    }
  }

BOOL sub_1000175C0(uint64_t a1, char *filename, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  int v9 = *(unsigned __int8 *)(v8 + 164);
  int v10 = *(unsigned __int8 *)(v8 + 165);
  ppDb = 0LL;
  uint64_t v11 = sqlite3_open_v2(filename, &ppDb, a3, 0LL);
  if ((_DWORD)v11)
  {
    if (ppDb)
    {
      sub_1000149A0(v11, ppDb, a4, @"open_v2 %s 0x%X", filename, a3);
      sqlite3_close(ppDb);
      ppDb = 0LL;
    }

    else
    {
      sub_100014958(v11, a4, @"open_v2 %s 0x%X", filename, a3);
    }

    goto LABEL_16;
  }

  if ((a3 & 2) == 0) {
    goto LABEL_16;
  }
  if (v10)
  {
    ppStmt = 0LL;
    if (!sqlite3_prepare_v2(ppDb, "PRAGMA auto_vacuum", -1, &ppStmt, 0LL))
    {
      if (sqlite3_step(ppStmt) == 100)
      {
        int v12 = sqlite3_column_int(ppStmt, 0);
        sqlite3_finalize(ppStmt);
        if (v12 == 2) {
          goto LABEL_13;
        }
      }

      else
      {
        sqlite3_finalize(ppStmt);
      }
    }

    sqlite3_exec(ppDb, "PRAGMA auto_vacuum = incremental", 0LL, 0LL, 0LL);
    sqlite3_exec(ppDb, "VACUUM", 0LL, 0LL, 0LL);
  }

LABEL_13:
  if (v9) {
    sqlite3_exec(ppDb, "PRAGMA journal_mode = WAL", 0LL, 0LL, 0LL);
  }
  sqlite3_busy_timeout(ppDb, 5000);
LABEL_16:
  uint64_t v13 = ppDb;
  *(void *)(a1 + 64) = ppDb;
  return v13 != 0LL;
}

  return v6;
}
}

  return v9;
}

    goto LABEL_14;
  }

  if (![*(id *)(a1 + 40) processNewCurrentItemPointers:v4 viewState:*(void *)(a1 + 32)])
  {
    uint64_t v17 = 0LL;
    goto LABEL_16;
  }

  if ([v4 count])
  {
    CFIndex v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneName]);
    uint64_t v15 = sub_1000AA6AC(@"ckksincoming", v14);
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);

    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = [v4 count];
      *(_DWORD *)__int128 buf = 134217984;
      uint64_t v21 = v16;
      int v10 = "Processed %lu items in CIP queue";
      uint64_t v11 = v9;
      int v12 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_12;
    }

    goto LABEL_13;
  }

  CFIndex v14 = 0;
LABEL_14:

  return v14;
}

  networkEvent = self->_networkEvent;
  if (networkEvent)
  {
    PBDataWriterWriteSubmessage(v11, networkEvent, 200LL);
    uint64_t v4 = v11;
  }

  genericEvent = self->_genericEvent;
  if (genericEvent)
  {
    PBDataWriterWriteSubmessage(v11, genericEvent, 201LL);
    uint64_t v4 = v11;
  }
}

  if (self->_networkEvent)
  {
    objc_msgSend(v6, "setNetworkEvent:");
    uint64_t v4 = v6;
  }

  if (self->_genericEvent)
  {
    objc_msgSend(v6, "setGenericEvent:");
    uint64_t v4 = v6;
  }
}

  name = self->_name;
  if (name) {
    [v3 setObject:name forKey:@"name"];
  }
  has = (char)self->_has;
  if ((has & 2) != 0)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_timestampStart));
    [v3 setObject:v8 forKey:@"timestamp_start"];

    has = (char)self->_has;
  }

  if ((has & 1) != 0)
  {
    int v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_timestampEnd));
    [v3 setObject:v9 forKey:@"timestamp_end"];
  }

  if (-[NSMutableArray count](self->_metrics, "count"))
  {
    int v10 = -[NSMutableArray initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableArray),  "initWithCapacity:",  -[NSMutableArray count](self->_metrics, "count"));
    uint64_t v18 = 0u;
    BOOL v19 = 0u;
    char v20 = 0u;
    uint64_t v21 = 0u;
    uint64_t v11 = self->_metrics;
    int v12 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v11,  "countByEnumeratingWithState:objects:count:",  &v18,  v22,  16LL);
    if (v12)
    {
      uint64_t v13 = v12;
      CFIndex v14 = *(void *)v19;
      do
      {
        for (int i = 0LL; i != v13; int i = (char *)i + 1)
        {
          if (*(void *)v19 != v14) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v18 + 1) + 8 * (void)i) dictionaryRepresentation]);
          -[NSMutableArray addObject:](v10, "addObject:", v16);
        }

        uint64_t v13 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v11,  "countByEnumeratingWithState:objects:count:",  &v18,  v22,  16LL);
      }

      while (v13);
    }

    [v3 setObject:v10 forKey:@"metric"];
  }

  return v3;
}

        char v22 = (void (*)(void *, id, void))v4[2];
        uint64_t v23 = v4;
        char v24 = 0LL;
        goto LABEL_25;
      }
    }

    BOOL v25 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext ckks](self, "ckks"));
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 syncingPolicy]);

    if (!v26)
    {
      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472LL;
      v37[2] = sub_1000C12FC;
      v37[3] = &unk_100285D40;
      v37[4] = self;
      uint64_t v38 = v4;
      -[OTCuttlefishContext rpcRefetchCKKSPolicy:](self, "rpcRefetchCKKSPolicy:", v37);

      goto LABEL_26;
    }

    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext ckks](self, "ckks"));
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 syncingPolicy]);
    uint64_t v29 = [v28 syncUserControllableViewsAsBoolean];

    CFTypeRef v30 = sub_10001267C("octagon-ckks");
    unsigned __int8 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      if ((_DWORD)v29) {
        uint64_t v32 = @"enabled";
      }
      else {
        uint64_t v32 = @"disabled";
      }
      CFTypeRef v33 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext ckks](self, "ckks"));
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v33 syncingPolicy]);
      uint64_t v35 = [v34 syncUserControllableViews];
      if (v35 >= 4) {
        char v36 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  v35));
      }
      else {
        char v36 = off_1002855A0[v35];
      }
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v40 = v32;
      char v41 = 2112;
      uint64_t v42 = v36;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Returning user-controllable status as %@ (%@)",  buf,  0x16u);
    }

    char v22 = (void (*)(void *, id, void))v4[2];
    uint64_t v23 = v4;
    char v24 = v29;
LABEL_25:
    v22(v23, v24, 0LL);
    goto LABEL_26;
  }

  BOOL v6 = sub_10001267C("octagon");
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v40 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "No cloudkit account present: %@", buf, 0xCu);
  }

  ((void (*)(void *, void, __CFString *))v4[2])(v4, 0LL, v5);
LABEL_26:
}
}

  CFStringAppend(Mutable, @" FROM ");
  CFStringAppend(Mutable, *(CFStringRef *)*a1);
  unsigned __int8 v31 = 1;
  CFIndex v14 = (const void **)*((void *)*a1 + 2);
  if (v14)
  {
    uint64_t v15 = (const void ***)((char *)*a1 + 24);
    do
    {
      if ((*(unsigned int (**)(uint64_t, const void **))(a3 + 16))(a3, v14))
      {
        Value = (const __CFArray *)CFDictionaryGetValue(a1[1], *v14);
        if (!Value || (v17 = Value, uint64_t v18 = CFGetTypeID(Value), v18 != CFArrayGetTypeID()))
        {
          char v24 = (const __CFString *)*v14;
          BOOL v25 = Mutable;
LABEL_25:
          sub_1000E9558(v25, v24, &v31);
          goto LABEL_26;
        }

        CFIndex Count = CFArrayGetCount(v17);
        char v20 = Count - 1;
        if (Count >= 1)
        {
          uint64_t v21 = Count;
          ValueAtIndex = (CFNullRef)CFArrayGetValueAtIndex(v17, 0LL);
          if (ValueAtIndex && kCFNull)
          {
            if (!CFEqual(ValueAtIndex, kCFNull)) {
              goto LABEL_29;
            }
          }

          else if (ValueAtIndex != kCFNull)
          {
LABEL_29:
            uint64_t v27 = (const __CFString *)*v14;
            if (v21 != 1)
            {
              sub_1000E950C(Mutable, &v31);
              CFStringAppend(Mutable, v27);
              CFStringAppend(Mutable, @" IN (");
              uint64_t v28 = Mutable;
              uint64_t v29 = v21;
LABEL_33:
              sub_1000E9598(v28, v29);
              goto LABEL_26;
            }

            BOOL v25 = Mutable;
            char v24 = (const __CFString *)*v14;
            goto LABEL_25;
          }

          uint64_t v23 = (const __CFString *)*v14;
          sub_1000E950C(Mutable, &v31);
          CFStringAppend(Mutable, v23);
          if (v20 != 1)
          {
            CFStringAppend(Mutable, @" NOT IN (");
            uint64_t v28 = Mutable;
            uint64_t v29 = v20;
            goto LABEL_33;
          }

          CFStringAppend(Mutable, @"!=?");
        }
      }

      uint64_t v16 = CFGetAllocator(a1);
      uint64_t v17 = SecAccessControlCreate(v16, a2);
      uint64_t v15 = (const void *)v17;
      if (!v17 || !SecAccessControlSetProtection(v17, v10, a2))
      {
        char v24 = 0LL;
        int v9 = 0LL;
        if (!v12)
        {
LABEL_24:
          if (!v15) {
            return v9;
          }
          goto LABEL_27;
        }

    sub_1000F7B40(cf, a2, (uint64_t)a3);
    return;
  }

  CFIndex Length = CFStringGetLength(cf);
  if (Length == 4) {
    goto LABEL_13;
  }
  if (Length < 2)
  {
    sub_1000194E0(-50, v3, @"applier: key %@ invalid length", cf);
  }

  else
  {
    CharacterAtIndex = CFStringGetCharacterAtIndex(cf, 0LL);
    switch(CharacterAtIndex)
    {
      case 'm':
        sub_1000F8BE0(cf, a2, (uint64_t)a3);
        break;
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 't':
        goto LABEL_19;
      case 'r':
        sub_1000F90B8(cf, a2, (uint64_t)a3);
        break;
      case 'u':
        sub_1000F91F0(cf, (const __CFString *)a2, (uint64_t)a3);
        break;
      case 'v':
        sub_1000F9490(cf, a2, a3);
        break;
      default:
        if (CharacterAtIndex != 102)
        {
          if (CharacterAtIndex == 99) {
            sub_1000F8B58(cf, a2, (uint64_t)a3);
          }
          else {
LABEL_19:
          }
            sub_1000194E0(-50, v3, @"applier: key %@ invalid", cf);
        }

        break;
    }
  }

        uint64_t v8 = CFUUIDCreate(0LL);
        sub_1000E8AF8((uint64_t)a1, kSecAttrUUID, v8, a3);
        if (!v8) {
          return;
        }
        goto LABEL_14;
      }
    }

    CFRelease(v7);
    goto LABEL_11;
  }

  char v24 = (os_log_s *)sub_10001267C("item");
  if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    if (!v12) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  BOOL v25 = **v4;
  *(_DWORD *)__int128 buf = 134218242;
  uint64_t v27 = v5;
  uint64_t v28 = 2112;
  uint64_t v29 = v25;
  _os_log_debug_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "rowid %lu in %@ failed to create pref/digest",  buf,  0x16u);
  if (v12) {
LABEL_15:
  }
    CFRelease(v13);
LABEL_16:
  if (v6)
  {
    CFRelease(v6);
    if (!v14) {
      return;
    }
    goto LABEL_18;
  }

  if (v14) {
LABEL_18:
  }
    CFRelease(UUIDBasedPersistentRef);
}

  sub_1000F7914(a1, a2, a3);
}

  uint64_t v21 = -[SECC2MPError copyWithZone:](self->_networkFatalError, "copyWithZone:", a3);
  char v22 = (void *)v6[20];
  v6[20] = v21;

  if ((*(_BYTE *)&self->_has & 4) != 0)
  {
    v6[3] = self->_networkStatusCode;
    *((_DWORD *)v6 + 70) |= 4u;
  }

  uint64_t v23 = -[NSString copyWithZone:](self->_networkRequestUri, "copyWithZone:", a3);
  char v24 = (void *)v6[27];
  v6[27] = v23;

  BOOL v25 = self->_has;
  if ((*(_BYTE *)&v25 & 0x20) != 0)
  {
    v6[6] = self->_timestampC2Init;
    *((_DWORD *)v6 + 70) |= 0x20u;
    BOOL v25 = self->_has;
    if ((*(_BYTE *)&v25 & 0x80) == 0)
    {
LABEL_17:
      if ((*(_BYTE *)&v25 & 0x40) == 0) {
        goto LABEL_18;
      }
      goto LABEL_50;
    }
  }

  else if ((*(_BYTE *)&v25 & 0x80) == 0)
  {
    goto LABEL_17;
  }

  void v6[8] = self->_timestampC2Start;
  *((_DWORD *)v6 + 70) |= 0x80u;
  BOOL v25 = self->_has;
  if ((*(_BYTE *)&v25 & 0x40) == 0)
  {
LABEL_18:
    if ((*(_WORD *)&v25 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }
    }
  }

  return v18;
}

  *((_BYTE *)v5 + 73) = self->_uploadCompleted;
  *((_BYTE *)v5 + 76) |= 0x20u;
  if ((*(_BYTE *)&self->_has & 8) != 0)
  {
LABEL_7:
    void v5[4] = self->_uploadRetries;
    *((_BYTE *)v5 + 76) |= 8u;
  }

    int v10 = 0LL;
    goto LABEL_14;
  }

  int v9 = (void *)objc_claimAutoreleasedReturnValue([v4 peerID]);

  if (!v9)
  {
    if (a3)
    {
      uint64_t v8 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:",  @"otcuttlefish",  0LL,  @"No existing ego peer ID"));
      goto LABEL_12;
    }

    goto LABEL_13;
  }

  int v10 = (void *)objc_claimAutoreleasedReturnValue([v4 peerID]);
LABEL_14:

  return v10;
}

  char v20 = cfa;
  if (cfa)
  {
    cfa = 0LL;
    CFRelease(v20);
  }

  return v18;
}

    CFIndex v14 = 0;
    goto LABEL_14;
  }

  if (!*((_BYTE *)v27 + 24)) {
    goto LABEL_13;
  }
  int v10 = sub_10001267C("circleChange");
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Enabling User Visible Views to match OT Settings",  v16,  2u);
  }

  int v12 = UserVisibleSet;
  UserVisibleSet = 0LL;
LABEL_12:

  CFIndex v14 = -[SOSAccountTrustClassic updateViewSets:enabled:disabled:]( self,  "updateViewSets:enabled:disabled:",  v8,  v12,  UserVisibleSet);
LABEL_14:
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&v26, 8);

  return v14;
}

    int v10 = 1LL;
    goto LABEL_20;
  }

  SOSCreateError(1024LL, @"alloc failed", 0LL, a2);
LABEL_16:
  if (a2 && *a2) {
    CFStringAppendFormat(Mutable, 0LL, @" %@", *a2);
  }
  int v10 = 3LL;
LABEL_20:
  uint64_t v11 = (os_log_s *)sub_10001267C("coder");
  if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    if (!v7) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }

  uint64_t v13 = SecOTRPacketTypeString(v7);
  CFIndex v14 = *(void *)(a1 + 24);
  uint64_t v15 = off_100292720[v10];
  *(_DWORD *)__int128 buf = 138413314;
  uint64_t v18 = v6;
  BOOL v19 = 2080;
  char v20 = v13;
  uint64_t v21 = 2112;
  char v22 = Mutable;
  uint64_t v23 = 2112;
  char v24 = v14;
  BOOL v25 = 2080;
  uint64_t v26 = v15;
  _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%@ %s %@ %@ returned %s", buf, 0x34u);
  if (v7) {
LABEL_22:
  }
    CFRelease(v7);
LABEL_23:
  if (v6) {
    CFRelease(v6);
  }
  CFRelease(Mutable);
  return v10;
}

uint64_t sub_100017744()
{
  return 0LL;
}

void sub_10001774C(id a1)
{
  uint64_t v1 = (os_log_s *)sub_10001267C("#SecDB");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    v2[0] = 67109120;
    v2[1] = dword_1002DE7B0;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEBUG,  "sqlDb: sql trace mask: 0x%08x",  (uint8_t *)v2,  8u);
  }

uint64_t sub_100017830()
{
  if (!csr_check(16LL))
  {
    uint64_t v1 = (const __CFBoolean *)CFPreferencesCopyValue( @"SQLProfile",  @"com.apple.security",  kCFPreferencesAnyUser,  kCFPreferencesAnyHost);
    if (v1)
    {
      uint64_t v2 = v1;
      CFTypeID v3 = CFGetTypeID(v1);
      if (v3 == CFBooleanGetTypeID())
      {
        BOOL v4 = CFBooleanGetValue(v2) == 0;
      }

      else
      {
        CFTypeID v5 = CFGetTypeID(v2);
        if (v5 != CFNumberGetTypeID())
        {
          uint64_t v0 = 0LL;
LABEL_12:
          CFRelease(v2);
          return v0;
        }

        int valuePtr = 0;
        CFNumberGetValue(v2, kCFNumberSInt32Type, &valuePtr);
        BOOL v4 = valuePtr == 0;
      }

      uint64_t v0 = !v4;
      goto LABEL_12;
    }
  }

  return 0LL;
}

uint64_t sub_100017908(uint64_t a1)
{
  uint64_t result = _CFRuntimeRegisterClass(&unk_100283438);
  **(void **)(a1 + 32) = result;
  return result;
}

void sub_100017938(uint64_t a1)
{
  uint64_t v2 = *(sqlite3 **)(a1 + 64);
  if (v2 && (int v3 = sqlite3_close(v2)) != 0)
  {
    int v10 = v3;
    BOOL v6 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 16LL);
      uint64_t v8 = sqlite3_errmsg(*(sqlite3 **)(a1 + 64));
      *(_DWORD *)__int128 buf = 67109634;
      int v12 = v10;
      __int16 v13 = 2112;
      uint64_t v14 = v7;
      __int16 v15 = 2080;
      uint64_t v16 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "failed to close database connection (%d) for %@: %s",  buf,  0x1Cu);
    }

    uint64_t v9 = _os_assert_log(0LL);
    _os_crash(v9);
    __break(1u);
  }

  else
  {
    *(void *)(a1 + 16) = 0LL;
    BOOL v4 = *(const void **)(a1 + 72);
    if (v4)
    {
      *(void *)(a1 + 72) = 0LL;
      CFRelease(v4);
    }

    CFTypeID v5 = *(const void **)(a1 + 56);
    if (v5)
    {
      *(void *)(a1 + 56) = 0LL;
      CFRelease(v5);
    }
  }

CFStringRef sub_100017A7C(uint64_t a1)
{
  uint64_t v1 = "ro";
  if (!*(_BYTE *)(a1 + 24)) {
    uint64_t v1 = "rw";
  }
  if (*(void *)(a1 + 64)) {
    uint64_t v2 = "open";
  }
  else {
    uint64_t v2 = "closed";
  }
  return CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"<SecDbConnection %s %s>", v1, v2);
}

CFStringRef sub_100017AF0(uint64_t a1)
{
  uint64_t v2 = "ro";
  if (!*(_BYTE *)(a1 + 24)) {
    uint64_t v2 = "rw";
  }
  if (*(void *)(a1 + 64)) {
    int v3 = "open";
  }
  else {
    int v3 = "closed";
  }
  return CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"<SecDbConnection %s %s>", v2, v3);
}

void sub_100017B70(uint64_t a1, const char *a2)
{
  if (!stat(__b, &v18))
  {
    uint64_t v9 = (os_log_s *)sub_10001267C("SecWarning");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)char v20 = __b;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "SecDbSecDbProcessCorruptionMarker: found corruption marker %s",  buf,  0xCu);
    }

    if (remove(__b))
    {
      int v10 = (os_log_s *)sub_10001267C("SecError");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *__error();
        *(_DWORD *)__int128 buf = 67109120;
        *(_DWORD *)char v20 = v11;
        int v12 = "SecDbSecDbProcessCorruptionMarker: Unable (%{darwin.errno}d) to delete corruption marker";
        __int16 v13 = v10;
        uint32_t v14 = 8;
LABEL_10:
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, buf, v14);
      }
    }

    else
    {
      if (!remove(a2) || *__error() == 2)
      {
        __int16 v15 = (os_log_s *)sub_10001267C("SecWarning");
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)char v20 = a2;
        BOOL v6 = "SecDbSecDbProcessCorruptionMarker: deleted corrupt db %{public}s";
        uint64_t v7 = v15;
        uint32_t v8 = 12;
        goto LABEL_16;
      }

      uint64_t v16 = (os_log_s *)sub_10001267C("SecError");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = *__error();
        *(_DWORD *)__int128 buf = 67109378;
        *(_DWORD *)char v20 = v17;
        *(_WORD *)&v20[4] = 2082;
        *(void *)&v20[6] = a2;
        int v12 = "SecDbSecDbProcessCorruptionMarker: Unable (%{darwin.errno}d) to delete db %{public}s";
        __int16 v13 = v16;
        uint32_t v14 = 18;
        goto LABEL_10;
      }
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
    return;
  }

  if (*__error() != 2)
  {
    BOOL v4 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *__error();
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)char v20 = v5;
      BOOL v6 = "SecDbSecDbProcessCorruptionMarker: Unable to check for corruption marker: %{darwin.errno}d";
      uint64_t v7 = v4;
      uint32_t v8 = 8;
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, buf, v8);
    }
  }

void sub_100017E28(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    int v3 = *(unsigned __int8 *)(a1 + 24);
    BOOL v4 = *(dispatch_queue_s **)(v2 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = sub_100017F1C;
    block[3] = &unk_1002833C8;
    block[4] = a1;
    void block[5] = v2;
    char v7 = v3;
    dispatch_sync(v4, block);
    if (v3) {
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 120));
    }
    else {
      pthread_mutex_unlock((pthread_mutex_t *)(v2 + 56));
    }
    CFRelease((CFTypeRef)a1);
    CFRelease((CFTypeRef)v2);
  }

  else
  {
    int v5 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "SecDbConnectionRelease called with NULL dbconn",  buf,  2u);
    }
  }

void sub_100017F1C(uint64_t a1)
{
  if (!*(_BYTE *)(*(void *)(a1 + 32) + 48LL))
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(*(void *)(a1 + 40) + 48LL));
    CFIndex v4 = CFArrayGetCount(*(CFArrayRef *)(*(void *)(a1 + 40) + 40LL)) + Count;
    uint64_t v5 = 48LL;
    if (!*(_BYTE *)(a1 + 48)) {
      uint64_t v5 = 40LL;
    }
    BOOL v6 = *(const __CFArray **)(*(void *)(a1 + 40) + v5);
    unint64_t v7 = CFArrayGetCount(v6);
    if (*(_BYTE *)(a1 + 48)) {
      unint64_t v8 = 5LL;
    }
    else {
      unint64_t v8 = 1LL;
    }
    CFIndex v9 = *(unsigned __int8 *)(*(void *)(a1 + 40) + 166LL);
    if (v7 < v8 && v4 < v9)
    {
      CFArrayAppendValue(v6, *(const void **)(a1 + 32));
      return;
    }

    if (v9 < 6)
    {
      uint64_t v16 = (os_log_s *)sub_10001267C("dbconn");
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v17 = "ro";
      if (!*(_BYTE *)(a1 + 48)) {
        int v17 = "rw";
      }
      int v18 = *(unsigned __int8 *)(*(void *)(a1 + 40) + 166LL);
      int v19 = 136315394;
      char v20 = v17;
      __int16 v21 = 1024;
      int v22 = v18;
      __int16 v13 = "releasing %s connection rather than storing in size %d cache";
      uint32_t v14 = v16;
      uint32_t v15 = 18;
    }

    else
    {
      int v11 = (os_log_s *)sub_10001267C("SecError");
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      if (*(_BYTE *)(a1 + 48)) {
        int v12 = "ro";
      }
      else {
        int v12 = "rw";
      }
      int v19 = 136315138;
      char v20 = v12;
      __int16 v13 = "dbconn: did not expect to run out of room in the %s cache when releasing connection";
      uint32_t v14 = v11;
      uint32_t v15 = 12;
    }

    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v19, v15);
    return;
  }

  uint64_t v2 = (os_log_s *)sub_10001267C("SecWarning");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v19) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "SecDbConnectionRelease: IO failure reported in connection, throwing away currently idle caches",  (uint8_t *)&v19,  2u);
  }

  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(*(void *)(a1 + 40) + 40LL));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(*(void *)(a1 + 40) + 48LL));
}

uint64_t sub_100018170(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

BOOL sub_10001817C(sqlite3_stmt *a1, uint64_t a2, const void *a3, unint64_t a4, CFTypeRef *a5)
{
  if (a4 >> 31) {
    return sub_100014AC0(18LL, a1, a5, @"bind_blob[%d]: blob bigger than INT_MAX", a2);
  }
  uint64_t v9 = sqlite3_bind_blob(a1, a2, a3, a4, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  return sub_100014AC0(v9, a1, a5, @"bind_blob[%d]", a2);
}

BOOL sub_1000181F4(sqlite3_stmt *a1, uint64_t a2, CFTypeRef *a3, double a4)
{
  uint64_t v7 = sqlite3_bind_double(a1, a2, a4);
  return sub_100014AC0(v7, a1, a3, @"bind_double[%d]", a2);
}

BOOL sub_100018244(sqlite3_stmt *a1, uint64_t a2, int a3, CFTypeRef *a4)
{
  uint64_t v7 = sqlite3_bind_int(a1, a2, a3);
  return sub_100014AC0(v7, a1, a4, @"bind_int[%d]", a2);
}

BOOL sub_100018294(sqlite3_stmt *a1, uint64_t a2, sqlite3_int64 a3, CFTypeRef *a4)
{
  uint64_t v7 = sqlite3_bind_int64(a1, a2, a3);
  return sub_100014AC0(v7, a1, a4, @"bind_int64[%d]", a2);
}

uint64_t sub_1000182E4(sqlite3_stmt *a1, uint64_t a2, const __CFString *cf, CFTypeRef *a4)
{
  CFIndex v4 = &v26;
  uint64_t v26 = 0LL;
  uint64_t v27 = &v26;
  uint64_t v28 = 0x2000000000LL;
  char v29 = 0;
  if (!cf) {
    goto LABEL_4;
  }
  CFTypeID v9 = CFGetTypeID(cf);
  if (v9 == CFNullGetTypeID())
  {
    CFIndex v4 = v27;
LABEL_4:
    *((_BYTE *)v4 + 24) = 1;
    goto LABEL_5;
  }

  if (v9 == CFStringGetTypeID())
  {
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 0x40000000LL;
    v24[2] = sub_100018598;
    v24[3] = &unk_100283418;
    void v24[4] = &v26;
    v24[5] = a1;
    int v25 = a2;
    v24[6] = a4;
    sub_10001337C(cf, (uint64_t)v24);
    goto LABEL_5;
  }

  if (v9 == CFDataGetTypeID())
  {
    CFIndex Length = CFDataGetLength((CFDataRef)cf);
    if (Length)
    {
      unint64_t v13 = Length;
      BytePtr = CFDataGetBytePtr((CFDataRef)cf);
      BOOL v15 = sub_10001817C(a1, a2, BytePtr, v13, a4);
    }

    else
    {
      uint64_t v19 = sqlite3_bind_text(a1, a2, "", 0, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
      BOOL v15 = sub_100014AC0(v19, a1, a4, @"bind_text[%d]", a2);
    }

    goto LABEL_16;
  }

  if (v9 == CFDateGetTypeID())
  {
    double AbsoluteTime = CFDateGetAbsoluteTime((CFDateRef)cf);
    uint64_t v17 = sqlite3_bind_double(a1, a2, AbsoluteTime);
    BOOL v15 = sub_100014AC0(v17, a1, a4, @"bind_double[%d]", a2);
LABEL_16:
    *((_BYTE *)v27 + 24) = v15;
    goto LABEL_5;
  }

  if (v9 == CFBooleanGetTypeID())
  {
    int Value = CFBooleanGetValue((CFBooleanRef)cf);
    BOOL v15 = sub_100018244(a1, a2, Value, a4);
    goto LABEL_16;
  }

  if (v9 == CFNumberGetTypeID())
  {
    if (CFNumberIsFloatType((CFNumberRef)cf))
    {
      double valuePtr = NAN;
      int v20 = CFNumberGetValue((CFNumberRef)cf, kCFNumberDoubleType, &valuePtr);
      BOOL v21 = sub_1000181F4(a1, a2, a4, valuePtr);
    }

    else
    {
      double valuePtr = -3.72066208e-103;
      int v20 = CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr);
      if (!v20) {
        goto LABEL_26;
      }
      BOOL v21 = sub_100018294(a1, a2, *(sqlite3_int64 *)&valuePtr, a4);
    }

    *((_BYTE *)v27 + 24) = v21;
LABEL_26:
    if (!v20)
    {
      sub_100014958(2, a4, @"bind CFNumberGetValue failed for %@", cf);
      *((_BYTE *)v27 + 24) = 0;
    }

    goto LABEL_5;
  }

  if (a4)
  {
    CFStringRef v22 = CFCopyTypeIDDescription(v9);
    sub_100014958(20, a4, @"bind unsupported type %@", v22);
    if (v22) {
      CFRelease(v22);
    }
  }

BOOL sub_100018598(uint64_t a1, char *a2, unint64_t a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 56);
  BOOL v6 = *(sqlite3_stmt **)(a1 + 40);
  uint64_t v5 = *(CFTypeRef **)(a1 + 48);
  if (a3 >> 31)
  {
    BOOL result = sub_100014AC0(18LL, v6, v5, @"bind_text[%d]: text bigger than INT_MAX", *(unsigned int *)(a1 + 56));
  }

  else
  {
    uint64_t v8 = sqlite3_bind_text(*(sqlite3_stmt **)(a1 + 40), v4, a2, a3, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    BOOL result = sub_100014AC0(v8, v6, v5, @"bind_text[%d]", v4);
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_100018624(uint64_t a1, sqlite3_stmt *pStmt, CFTypeRef *a3, uint64_t a4)
{
  for (uint64_t i = 0LL; ; uint64_t i = (i + 1))
  {
    if (*(_BYTE *)(a1 + 24) && !sqlite3_stmt_readonly(pStmt))
    {
      CFTypeID v9 = (os_log_s *)sub_10001267C("SecError");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = sqlite3_sql(pStmt);
        *(_DWORD *)__int128 buf = 136315138;
        BOOL v15 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "SecDbForEach: SecDbConnection is readonly but we're about to write: %s",  buf,  0xCu);
      }
    }

    uint64_t v11 = sqlite3_step(pStmt);
    if ((_DWORD)v11 != 100) {
      break;
    }
    if (a4)
    {
    }

    else
    {
      int v12 = sqlite3_sql(pStmt);
      sub_100014958(100, a3, @"step[%d]: %s returned SQLITE_ROW with NULL row block", i, v12);
    }
  }

  if ((_DWORD)v11 == 101) {
    return 1LL;
  }
  sub_1000154A8(a1, v11, a3, @"SecDbForEach step[%d]", i);
  return 0LL;
}

void sub_1000187AC(uint64_t a1, uint64_t a2, CFArrayRef a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = (os_unfair_lock_s *)(v6 + 148);
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 148));
  uint64_t v8 = *(void *)(v6 + 152);
  os_unfair_lock_unlock(v7);
  if (!v8) {
    return;
  }
  if (a2 && a3)
  {
    *(void *)&__int128 v12 = a2;
    *((void *)&v12 + 1) = a3;
    CFTypeID v9 = kCFAllocatorDefault;
    CFIndex v10 = 2LL;
  }

  else
  {
    if (!a2)
    {
      if (!a3) {
        return;
      }
      CFRetain(a3);
      goto LABEL_8;
    }

    *(void *)&__int128 v12 = a2;
    CFTypeID v9 = kCFAllocatorDefault;
    CFIndex v10 = 1LL;
  }

  a3 = CFArrayCreate(v9, (const void **)&v12, v10, &kCFTypeArrayCallBacks);
  if (!a3) {
    return;
  }
LABEL_8:
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 72), a3);
  CFRelease(a3);
  if (!*(_BYTE *)(a1 + 25))
  {
    uint64_t v11 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v12) = 138412290;
      *(void *)((char *)&v12 + 4) = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "db %@ changed outside txn",  (uint8_t *)&v12,  0xCu);
    }

    sub_100016888(a1, 2LL);
  }

BOOL sub_10001891C()
{
  uint64_t v0 = @"SecItem";
  BOOL v1 = sub_100018980() && off_1002DE7B8(77LL, @"SecItem") != 0;

  return v1;
}

BOOL sub_100018980()
{
  if (qword_1002DE7D0 != -1) {
    dispatch_once(&qword_1002DE7D0, &stru_100283670);
  }
  dispatch_source_merge_data((dispatch_source_t)qword_1002DE7D8, 1uLL);
  return qword_1002DE7E0 != 0;
}

void sub_1000189D8(id a1)
{
  dispatch_source_t v1 = sub_10001A100("PowerLog enabled", 86400LL);
  uint64_t v2 = (void *)qword_1002DE7D8;
  qword_1002DE7D8 = (uint64_t)v1;

  int v3 = (dispatch_object_s *)qword_1002DE7D8;
  context = dispatch_get_context((dispatch_object_t)qword_1002DE7D8);
  context[2] = _Block_copy(&stru_100283690);
  dispatch_activate(v3);
  uint64_t v5 = sub_10001267C("PLsetup");
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CFIndex v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Setting up PowerLog", v10, 2u);
  }

  uint64_t v7 = CFURLCreateWithFileSystemPath( kCFAllocatorDefault,  @"/System/Library/PrivateFrameworks/PowerLog.framework",  kCFURLPOSIXPathStyle,  1u);
  if (v7)
  {
    uint64_t v8 = v7;
    qword_1002DE7E0 = (uint64_t)CFBundleCreate(kCFAllocatorDefault, v7);
    CFRelease(v8);
    if (qword_1002DE7E0)
    {
      off_1002DE7B8 = (uint64_t (*)(void, void))CFBundleGetFunctionPointerForName( (CFBundleRef)qword_1002DE7E0,  @"PLShouldLogRegisteredEvent");
      off_1002DE7C0 = (uint64_t (*)(void, void, void, void))CFBundleGetFunctionPointerForName( (CFBundleRef)qword_1002DE7E0,  @"PLLogRegisteredEvent");
      FunctionPointerForName = CFBundleGetFunctionPointerForName( (CFBundleRef)qword_1002DE7E0,  @"PLLogTimeSensitiveRegisteredEvent");
      qword_1002DE7C8 = (uint64_t)FunctionPointerForName;
      if (!off_1002DE7B8 || !off_1002DE7C0 || !FunctionPointerForName)
      {
        CFRelease((CFTypeRef)qword_1002DE7E0);
        qword_1002DE7E0 = 0LL;
      }
    }
  }

void sub_100018B4C(id a1)
{
  dispatch_source_t v1 = sub_10001267C("PLsetup");
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (qword_1002DE7E0) {
      int v3 = "enabled";
    }
    else {
      int v3 = "fault";
    }
    int v4 = 136315138;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PowerLog %s", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100018C10(void *a1, void *a2)
{
  id v4 = a1;
  id v3 = a2;
  if (sub_100018980()) {
    off_1002DE7C0(77LL, v4, v3, 0LL);
  }
}

uint64_t sub_100018C70(BOOL *a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = 0LL;
  uint64_t result = ccder_decode_tl(1LL, &v7, a2, a3);
  if (result)
  {
    uint64_t v6 = (_BYTE *)result;
    uint64_t result = 0LL;
    if (a3 - (uint64_t)v6 >= 1 && v7 == 1)
    {
      if (a1) {
        *a1 = *v6 != 0;
      }
      return (uint64_t)(v6 + 1);
    }
  }

  return result;
}

char *sub_100018CF8(const __CFAllocator *a1, CFNumberRef *a2, CFTypeRef *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v30 = 0LL;
  CFTypeID v9 = (unsigned __int8 *)ccder_decode_tl(2LL, &v30, a4, a5);
  if (v9 && (uint64_t v11 = (char *)v9, a5 - (uint64_t)v9 >= (uint64_t)v30))
  {
    if (v30 < 9)
    {
      int8x8_t v29 = 0LL;
      if (v30)
      {
        int8x8_t v13 = 0LL;
        uint32_t v14 = v9;
        do
        {
          unsigned int v15 = *v14++;
          int8x8_t v13 = (int8x8_t)(v15 | (*(void *)&v13 << 8));
          int8x8_t v29 = v13;
        }

        while (v14 < &v9[v30]);
        if ((char)*v9 < 0)
        {
          if (v30 != 8)
          {
            if (8 - v30 <= 1) {
              uint64_t v16 = 1LL;
            }
            else {
              uint64_t v16 = 8 - v30;
            }
            unint64_t v17 = (v16 - 1) & 0xFFFFFFFFFFFFFFFELL;
            uint64_t v18 = v16 - 1;
            unint64_t v19 = (v16 + 1) & 0xFFFFFFFFFFFFFFFELL;
            int8x16_t v20 = (int8x16_t)(unint64_t)v13;
            int64x2_t v21 = (int64x2_t)xmmword_100204FE0;
            int64x2_t v22 = vdupq_n_s64(0x40uLL);
            v23.i64[0] = 255LL;
            v23.i64[1] = 255LL;
            int64x2_t v24 = vdupq_n_s64(2uLL);
            do
            {
              int8x16_t v25 = v20;
              int8x16_t v20 = vorrq_s8(v20, (int8x16_t)vshlq_u64(v23, (uint64x2_t)vsubq_s64(v22, vshlq_n_s64(v21, 3uLL))));
              int64x2_t v21 = vaddq_s64(v21, v24);
              v19 -= 2LL;
            }

            while (v19);
            int8x16_t v26 = vbslq_s8( (int8x16_t)vcgtq_u64( (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v17), (int8x16_t)xmmword_100204FF0),  (uint64x2_t)vdupq_lane_s64(v18, 0)),  v25,  v20);
            int8x8_t v13 = vorr_s8(*(int8x8_t *)v26.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
          }

          int8x8_t v29 = v13;
        }
      }

      CFNumberRef v27 = CFNumberCreate(a1, kCFNumberLongLongType, &v29);
      *a2 = v27;
      if (v27) {
        return &v11[v30];
      }
      sub_1000194B4( -3LL,  @"com.apple.security.cfder.error",  0LL,  a3,  v28,  @"Number allocation failed",  *(void *)&v29);
    }

    else
    {
      sub_1000194B4( -4LL,  @"com.apple.security.cfder.error",  0LL,  a3,  v10,  @"Number too large",  *(void *)&v29);
    }
  }

  else
  {
    sub_1000194B4( -1LL,  @"com.apple.security.cfder.error",  0LL,  a3,  v10,  @"Unknown number encoding",  *(void *)&v29);
  }

  return 0LL;
}

uint64_t sub_100018EB4(const __CFNumber *a1, CFTypeRef *a2)
{
  uint64_t valuePtr = 0xAAAAAAAAAAAAAAAALL;
  if (CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr))
  {
    unint64_t v4 = HIBYTE(valuePtr);
    if ((HIBYTE(valuePtr) + 1) > 1u)
    {
      uint64_t v10 = 8LL;
    }

    else
    {
      uint64_t v5 = 9LL;
      uint64_t v6 = 48LL;
      uint64_t v7 = 1LL;
      while ((unint64_t)(v5 - 2) >= 2)
      {
        uint64_t v8 = valuePtr >> v6;
        --v5;
        v6 -= 8LL;
        if ((_DWORD)v4 != v8)
        {
          uint64_t v7 = v5 - 1;
          goto LABEL_10;
        }
      }

      uint64_t v5 = 2LL;
LABEL_10:
      else {
        uint64_t v10 = v7;
      }
    }

    return ccder_sizeof(2LL, v10);
  }

  else
  {
    sub_1000194B4(-4LL, @"com.apple.security.cfder.error", 0LL, a2, v3, @"Unable to get number from data");
    return 0LL;
  }

uint64_t sub_100018F90(const __CFNumber *a1, CFTypeRef *a2, uint64_t a3, uint64_t a4)
{
  uint64_t valuePtr = 0xAAAAAAAAAAAAAAAALL;
  if (!CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr))
  {
    sub_1000194B4(-4LL, @"com.apple.security.cfder.error", 0LL, a2, v7, @"Unable to get number from data");
    return 0LL;
  }

  uint64_t v8 = valuePtr;
  unint64_t v9 = HIBYTE(valuePtr);
  if ((HIBYTE(valuePtr) + 1) > 1u)
  {
    unint64_t v14 = 8LL;
    if (!a4) {
      goto LABEL_22;
    }
  }

  else
  {
    uint64_t v10 = 9LL;
    uint64_t v11 = 48LL;
    uint64_t v12 = 1LL;
    while ((unint64_t)(v10 - 2) >= 2)
    {
      uint64_t v13 = valuePtr >> v11;
      --v10;
      v11 -= 8LL;
      if ((_DWORD)v9 != v13)
      {
        uint64_t v12 = v10 - 1;
        goto LABEL_11;
      }
    }

    uint64_t v10 = 2LL;
LABEL_11:
    else {
      unint64_t v14 = v12;
    }
    if (!a4) {
      goto LABEL_22;
    }
  }

  if (a4 - a3 < (uint64_t)v14)
  {
LABEL_22:
    sub_1000194B4(-3LL, @"com.apple.security.cfder.error", 0LL, a2, v7, @"Unknown size");
    return 0LL;
  }

  if (v14 <= 1) {
    uint64_t v15 = 1LL;
  }
  else {
    uint64_t v15 = v14;
  }
  do
  {
    *(_BYTE *)--a4 = v8;
    v8 >>= 8;
    --v15;
  }

  while (v15);
  uint64_t valuePtr = v8;
  uint64_t result = ccder_encode_tl(2LL, v14, a3, a4);
  if (!result)
  {
    sub_1000194B4(-7LL, @"com.apple.security.cfder.error", 0LL, a2, v17, @"ccder failed to encode");
    return 0LL;
  }

  return result;
}

BOOL sub_1000190E4(int a1, CFTypeRef *a2, CFStringRef format, ...)
{
  if (a1 && a2)
  {
    uint64_t v5 = (__CFString *)*a2;
    *a2 = 0LL;
    sub_100019148(a1, kCFErrorDomainMach, v5, a2, format, va);
  }

  return a1 == 0;
}

void sub_100019148( CFIndex a1, const __CFString *a2, __CFString *cf, CFTypeRef *a4, CFStringRef format, va_list arguments)
{
  if (!a4) {
    return;
  }
  if (*a4)
  {
    if (cf)
    {
      if (*a4 != cf) {
        CFRelease(cf);
      }
    }

    return;
  }

  uint64_t v10 = CFStringCreateWithFormatAndArguments(0LL, 0LL, format, arguments);
  uint64_t v28 = 0LL;
  if (!cf) {
    goto LABEL_28;
  }
  uint64_t v11 = CFErrorCopyUserInfo((CFErrorRef)cf);
  int Value = (const __CFString *)CFDictionaryGetValue(v11, kCFErrorDescriptionKey);
  if (Value)
  {
    BOOL v13 = CFStringCompare(v10, Value, 0LL) == kCFCompareEqualTo;
    if (!v11) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  BOOL v13 = 0;
  if (v11) {
LABEL_9:
  }
    CFRelease(v11);
LABEL_10:
  CFIndex Code = CFErrorGetCode((CFErrorRef)cf);
  CFErrorDomain Domain = CFErrorGetDomain((CFErrorRef)cf);
  CFComparisonResult v16 = CFStringCompare(a2, Domain, 0LL);
  BOOL v18 = Code == a1 && v16 == kCFCompareEqualTo && v13;
  unint64_t v19 = cf;
  if (v18) {
    goto LABEL_17;
  }
  int64x2_t v21 = CFErrorCopyUserInfo((CFErrorRef)cf);
  if (v21)
  {
    int64x2_t v22 = v21;
    uint64x2_t v23 = (const void *)kSOSCountKey;
    if (CFDictionaryContainsKey(v21, kSOSCountKey) == 1)
    {
      int64x2_t v24 = (const __CFNumber *)CFDictionaryGetValue(v22, v23);
      if (v24)
      {
        uint64_t valuePtr = 0LL;
        CFNumberGetValue(v24, kCFNumberLongType, &valuePtr);
        if (valuePtr > 199)
        {
          CFRelease(v22);
          unint64_t v19 = cf;
LABEL_17:
          CFRetain(v19);
          *a4 = cf;
          CFRelease(cf);
          if (!v10) {
            return;
          }
          int8x16_t v20 = v10;
          goto LABEL_42;
        }

        uint64_t v28 = valuePtr + 1;
      }
    }

    CFRelease(v22);
  }

BOOL sub_1000193E4( int a1, CFTypeRef *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a1)
  {
    if (a2)
    {
      CFIndex v12 = *__error();
      BOOL v13 = (__CFString *)*a2;
      *a2 = 0LL;
      CFStringRef v14 = CFStringCreateWithFormatAndArguments(kCFAllocatorDefault, 0LL, a3, &a9);
      uint64_t v15 = strerror(v12);
      sub_1000194B4(v12, kCFErrorDomainPOSIX, v13, a2, v16, @"%@: [%d] %s", v14, v12, v15, &a9);
      if (v14) {
        CFRelease(v14);
      }
    }
  }

  return a1 == 0;
}

void sub_1000194B4( CFIndex a1, const __CFString *a2, __CFString *a3, CFTypeRef *a4, uint64_t a5, CFStringRef format, ...)
{
}

BOOL sub_1000194E0(int a1, __CFString **a2, CFStringRef format, ...)
{
  if (a1)
  {
    CFTypeRef cf = 0LL;
    if (a2)
    {
      sub_100019148(a1, kCFErrorDomainOSStatus, *a2, &cf, format, va);
      *a2 = (__CFString *)cf;
    }

    else
    {
      sub_100019148(a1, kCFErrorDomainOSStatus, 0LL, &cf, format, va);
      CFTypeRef v5 = cf;
      if (cf)
      {
        CFTypeRef cf = 0LL;
        CFRelease(v5);
      }
    }
  }

  return a1 == 0;
}

uint64_t sub_100019570(uint64_t a1, CFTypeRef *a2, CFStringRef format, ...)
{
  if (a2 && (a1 & 1) == 0)
  {
    CFTypeRef v5 = (__CFString *)*a2;
    *a2 = 0LL;
    sub_100019148(-50LL, kCFErrorDomainOSStatus, v5, a2, format, va);
  }

  return a1;
}

BOOL sub_1000195D0(uint64_t a1, CFTypeRef *a2, CFStringRef format, ...)
{
  if (!a1 && a2)
  {
    CFTypeRef v5 = (__CFString *)*a2;
    *a2 = 0LL;
    sub_100019148(-108LL, kCFErrorDomainOSStatus, v5, a2, format, va);
  }

  return a1 != 0;
}

unsigned __int8 *sub_100019634( const __CFAllocator *a1, CFBooleanRef *a2, CFTypeRef *a3, const UInt8 *a4, uint64_t a5)
{
  if (!a4)
  {
    sub_1000194B4(-6LL, @"com.apple.security.cfder.error", 0LL, a3, a5, @"null input");
    return 0LL;
  }

  uint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  if (!ccder_decode_tag(&v32, a4, a5))
  {
    CFIndex v12 = @"invalid tag";
    goto LABEL_8;
  }

  if (v32 <= 17)
  {
    switch(v32)
    {
      case 1LL:
        return sub_10001A63C(a2, a3, (uint64_t)a4, a5);
      case 2LL:
        return (unsigned __int8 *)sub_100018CF8(a1, a2, a3, (uint64_t)a4, a5);
      case 3LL:
      case 6LL:
      case 7LL:
      case 8LL:
      case 9LL:
      case 10LL:
      case 11LL:
        goto LABEL_28;
      case 4LL:
        return (unsigned __int8 *)sub_10001A6E4(a1, a2, a3, (uint64_t)a4, a5);
      case 5LL:
        return (unsigned __int8 *)sub_10001AF8C(a2, a3, (uint64_t)a4, a5);
      case 12LL:
        return (unsigned __int8 *)sub_10001A3C4(a1, (CFStringRef *)a2, a3, (uint64_t)a4, a5);
      default:
        if (v32 != 0xC000000000000011LL) {
          goto LABEL_28;
        }
        unint64_t v11 = sub_10001B064(a1, (CFTypeRef *)a2, a3, (uint64_t)a4, a5);
        break;
    }

    return (unsigned __int8 *)v11;
  }

  if (v32 > 0x200000000000000FLL)
  {
    if (v32 == 0x2000000000000010LL) {
      return (unsigned __int8 *)sub_10001A18C(a1, a2, a3, (uint64_t)a4, a5);
    }
    if (v32 == 0x2000000000000011LL) {
      return (unsigned __int8 *)sub_1000126F8((int)a1, (int)a2, (int)a3);
    }
    if (v32 != 0x6000000000000010LL) {
      goto LABEL_28;
    }
    CFIndex numBytes = 0LL;
    uint64_t v15 = ccder_decode_tl(0x6000000000000010LL, &numBytes, a4, a5);
    if (v15)
    {
      uint64_t v16 = v15;
      if (a5 - v15 >= numBytes)
      {
        CFDataRef v29 = CFDataCreate(a1, a4, v15 + numBytes - (void)a4);
        *a2 = v29;
        if (v29) {
          return (unsigned __int8 *)(v16 + numBytes);
        }
        CFIndex v12 = @"Failed to create CoreEntitlements data";
        goto LABEL_50;
      }
    }

    CFIndex v12 = @"Unknown CoreEntitlements encoding";
    goto LABEL_8;
  }

  if (v32 == 18)
  {
    CFIndex numBytes = 0LL;
    uint64_t v17 = (const UInt8 *)ccder_decode_tl(18LL, &numBytes, a4, a5);
    if (v17)
    {
      BOOL v18 = v17;
      if (a5 - (uint64_t)v17 >= numBytes)
      {
        CFStringRef v30 = CFStringCreateWithBytes(a1, v17, numBytes, 0x8000100u, 0);
        *a2 = (CFBooleanRef)v30;
        if (v30) {
          return (unsigned __int8 *)&v18[numBytes];
        }
        CFIndex v12 = @"Numeric string allocation failed";
        goto LABEL_50;
      }
    }

    CFIndex v12 = @"Unknown numeric string encoding";
LABEL_8:
    CFIndex v13 = -1LL;
LABEL_9:
    sub_1000194B4(v13, @"com.apple.security.cfder.error", 0LL, a3, v10, v12);
    return 0LL;
  }

  if (v32 != 23)
  {
    if (v32 == 24) {
      return (unsigned __int8 *)sub_1000141B0(a1, a2, a3, (uint64_t)a4, a5);
    }
LABEL_28:
    sub_1000194B4(-2LL, @"com.apple.security.cfder.error", 0LL, a3, v10, @"Unsupported DER Type");
    return 0LL;
  }

  *(void *)uint64_t v34 = a5;
  CFIndex v19 = ccder_decode_constructed_tl(23LL, v34, a4, a5);
  CFAbsoluteTime at = 0.0;
  unint64_t v20 = *(void *)v34;
  CFIndex numBytes = v19;
  int v23 = sub_100013AEC((unsigned __int8 **)&numBytes, *(unint64_t *)v34, a3, v21, v22);
  signed int v27 = sub_100013AEC((unsigned __int8 **)&numBytes, v20, a3, v24, v25) + 10 * v23;
  if (v27 > 49)
  {
    if (v27 > 0x45)
    {
      v27 += 1900;
    }

    else
    {
      sub_1000194B4( -1LL,  @"com.apple.security.cfder.error",  0LL,  a3,  v26,  @"Invalid universal time year between 50 and 70");
      CFIndex numBytes = 0LL;
    }
  }

  else
  {
    v27 += 2000;
  }

  unint64_t v14 = sub_100013B90(&at, a3, v27, (unsigned __int8 *)numBytes, v20);
  if (v14)
  {
    CFDateRef v31 = CFDateCreate(a1, at);
    *a2 = v31;
    if (!v31)
    {
      CFIndex v12 = @"Failed to create utc date";
LABEL_50:
      CFIndex v13 = -3LL;
      goto LABEL_9;
    }
  }

  return (unsigned __int8 *)v14;
}

uint64_t sub_100019A68(const __CFString *a1, CFTypeRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1)
  {
    sub_1000194B4(-5LL, @"com.apple.security.cfder.error", 0LL, a2, a5, @"Null CFType");
    return 0LL;
  }

  CFTypeID v7 = CFGetTypeID(a1);
  if (CFArrayGetTypeID() == v7)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)a1);
    if (Count < 1)
    {
      uint64_t v9 = 0LL;
    }

    else
    {
      uint64_t v9 = 0LL;
      unint64_t v10 = Count + 1;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1, v10 - 2);
        v9 += sub_100019A68(ValueAtIndex, a2);
        --v10;
      }

      while (v10 > 1);
    }

    uint64_t v13 = 0x2000000000000010LL;
    uint64_t v14 = v9;
    return ccder_sizeof(v13, v14);
  }

  if (CFBooleanGetTypeID() == v7)
  {
    uint64_t v13 = 1LL;
    uint64_t v14 = 1LL;
    return ccder_sizeof(v13, v14);
  }

  if (CFDataGetTypeID() == v7)
  {
    CFIndex Length = CFDataGetLength((CFDataRef)a1);
    return ccder_sizeof_raw_octet_string(Length);
  }

  if (CFDateGetTypeID() == v7)
  {
    CFDateGetAbsoluteTime((CFDateRef)a1);
    uint64_t v14 = sub_100014258();
    uint64_t v13 = 24LL;
    return ccder_sizeof(v13, v14);
  }

  if (CFDictionaryGetTypeID() == v7) {
    return sub_100012920(a1, a2);
  }
  if (CFSetGetTypeID() == v7) {
    return sub_10001B1DC((const __CFSet *)a1, (uint64_t)a2);
  }
  if (CFStringGetTypeID() == v7) {
    return sub_10001A4B8(a1);
  }
  if (CFNumberGetTypeID() != v7)
  {
    if (CFNullGetTypeID() == v7)
    {
      uint64_t v13 = 5LL;
      uint64_t v14 = 0LL;
      return ccder_sizeof(v13, v14);
    }

    sub_1000194B4(-5LL, @"com.apple.security.cfder.error", 0LL, a2, v16, @"Unsupported CFType");
    return 0LL;
  }

  return sub_100018EB4((const __CFNumber *)a1, a2);
}

uint64_t sub_100019C44(const __CFString *a1, CFTypeRef *a2, uint64_t a3, UInt8 *a4, unint64_t a5)
{
  if (!a1)
  {
    sub_1000194B4(-5LL, @"com.apple.security.cfder.error", 0LL, a2, a5, @"Null CFType");
    return 0LL;
  }

  CFTypeID v10 = CFGetTypeID(a1);
  if (CFArrayGetTypeID() == v10)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)a1);
    uint64_t v12 = a5;
    if (Count >= 1)
    {
      unint64_t v13 = Count + 1;
      uint64_t v12 = a5;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1, v13 - 2);
        uint64_t v12 = sub_100019C44(ValueAtIndex, a2, a3, a4, v12);
        --v13;
      }

      while (v13 > 1);
    }

    uint64_t v15 = 0x2000000000000010LL;
    unint64_t v16 = a5;
    uint64_t v17 = a4;
    unint64_t v18 = v12;
    goto LABEL_7;
  }

  if (CFBooleanGetTypeID() == v10)
  {
    Boolean Value = CFBooleanGetValue((CFBooleanRef)a1);
    uint64_t v22 = ccder_encode_body(1LL, &Value, a4, a5);
    uint64_t v19 = ccder_encode_tl(1LL, 1LL, a4, v22);
LABEL_12:
    uint64_t v21 = v19;
    if (!v19) {
      sub_1000194B4(-7LL, @"com.apple.security.cfder.error", 0LL, a2, v20, @"ccder failed to encode");
    }
    return v21;
  }

  if (CFDataGetTypeID() == v10) {
    return sub_10001A7CC((const __CFData *)a1, a2, (uint64_t)a4, a5);
  }
  if (CFDateGetTypeID() == v10)
  {
    double AbsoluteTime = CFDateGetAbsoluteTime((CFDateRef)a1);
    unint64_t v18 = sub_1000142C8(a2, a3, (uint64_t)a4, a5, AbsoluteTime);
    uint64_t v15 = 24LL;
    unint64_t v16 = a5;
    uint64_t v17 = a4;
LABEL_7:
    uint64_t v19 = ccder_encode_constructed_tl(v15, v16, v17, v18);
    goto LABEL_12;
  }

  if (CFDictionaryGetTypeID() == v10) {
    return sub_100012A4C(a1, a2, a3, a4, a5);
  }
  if (CFSetGetTypeID() == v10) {
    return sub_10001B280((const __CFSet *)a1, a2, a3, (uint64_t)a4, a5);
  }
  if (CFStringGetTypeID() == v10) {
    return sub_10001A534(a1, a2, a4, a5, v25);
  }
  if (CFNumberGetTypeID() == v10) {
    return sub_100018F90((const __CFNumber *)a1, a2, (uint64_t)a4, a5);
  }
  if (CFNullGetTypeID() != v10)
  {
    sub_1000194B4(-5LL, @"com.apple.security.cfder.error", 0LL, a2, v26, @"Unsupported CFType");
    return 0LL;
  }

  return sub_10001B008(a2, (uint64_t)a4, a5);
}

__CFData *sub_100019F48(const __CFString *a1, CFTypeRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFIndex v7 = sub_100019A68(a1, a2, a3, a4, a5);
  CFMutableArrayRef Mutable = CFDataCreateMutable(0LL, v7);
  CFDataSetLength(Mutable, v7);
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  if (!sub_100019C44(a1, a2, 0LL, MutableBytePtr, (unint64_t)&MutableBytePtr[v7]) && Mutable)
  {
    CFRelease(Mutable);
    return 0LL;
  }

  return Mutable;
}

CFTypeRef sub_100019FC8(const __CFAllocator *a1, CFDataRef theData, CFTypeRef *a3)
{
  CFTypeRef cf = 0LL;
  BytePtr = CFDataGetBytePtr(theData);
  CFIndex Length = CFDataGetLength(theData);
  uint64_t v8 = (unsigned __int8 *)&BytePtr[Length];
  uint64_t v9 = sub_100019634(a1, (CFBooleanRef *)&cf, a3, BytePtr, (uint64_t)&BytePtr[Length]);
  if (!v9 || v9 == v8) {
    return cf;
  }
  sub_1000194B4(-1LL, @"com.apple.security.cfder.error", 0LL, a3, v10, @"trailing garbage after plist item");
  CFTypeRef result = cf;
  if (cf)
  {
    CFRelease(cf);
    return 0LL;
  }

  return result;
}

void sub_10001A074(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  dispatch_suspend(*(dispatch_object_t *)(a1 + 8));
  dispatch_time_t v3 = dispatch_time(0LL, 1000000000LL * *(void *)(a1 + 24));
  dispatch_after_f(v3, *(dispatch_queue_t *)a1, *(void **)(a1 + 8), (dispatch_function_t)&_dispatch_resume);
}

void sub_10001A0CC(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2) {
    _Block_release(v2);
  }
  free((void *)a1);
}

dispatch_source_t sub_10001A100(const char *a1, uint64_t a2)
{
  dispatch_time_t v3 = dispatch_queue_create(a1, 0LL);
  dispatch_source_t v4 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_data_add, 0LL, 0LL, v3);
  CFTypeRef v5 = malloc(0x20uLL);
  void *v5 = v3;
  v5[1] = v4;
  v5[2] = 0LL;
  v5[3] = a2;
  dispatch_set_context(v4, v5);
  dispatch_source_set_event_handler_f(v4, (dispatch_function_t)sub_10001A074);
  dispatch_set_finalizer_f(v4, (dispatch_function_t)sub_10001A0CC);
  return v4;
}

unint64_t sub_10001A18C( const __CFAllocator *a1, CFMutableArrayRef *a2, CFTypeRef *a3, uint64_t a4, uint64_t a5)
{
  if (!a4)
  {
    sub_1000194B4(-6LL, @"com.apple.security.cfder.error", 0LL, a3, a5, @"null input");
    return 0LL;
  }

  int v9 = (int)a1;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0LL, &kCFTypeArrayCallBacks);
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v11 = ccder_decode_sequence_tl(&v18, a4, a5);
  if (!v11)
  {
    sub_1000194B4(-1LL, @"com.apple.security.cfder.error", 0LL, a3, v12, @"tag/length decode failed");
LABEL_11:
    if (Mutable) {
      CFRelease(Mutable);
    }
    return 0LL;
  }

  unint64_t v13 = v11;
  while (v13 < v18)
  {
    xpc_object_t value = 0LL;
    uint64_t v14 = sub_100019634(v9, (int)&value, (int)a3);
    if (!v14) {
      goto LABEL_11;
    }
    unint64_t v13 = v14;
    uint64_t v15 = value;
    CFArrayAppendValue(Mutable, value);
    if (v15) {
      CFRelease(v15);
    }
  }

  *a2 = Mutable;
  return v13;
}

__CFData *sub_10001A2B4(const __CFAllocator *a1, CFIndex *a2, uint64_t a3, uint64_t a4)
{
  CFMutableArrayRef Mutable = CFDataCreateMutable(a1, *a2);
  CFDataSetLength(Mutable, *a2);
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  ccdigest(a2, a3, a4, MutableBytePtr);
  return Mutable;
}

__CFData *sub_10001A314(const __CFData *a1)
{
  CFIndex Length = CFDataGetLength(a1);
  dispatch_time_t v3 = CFGetAllocator(a1);
  BytePtr = CFDataGetBytePtr(a1);
  CFTypeRef v5 = (CFIndex *)ccsha1_di();
  return sub_10001A2B4(v3, v5, Length, (uint64_t)BytePtr);
}

__CFData *sub_10001A36C(const __CFData *a1)
{
  CFIndex Length = CFDataGetLength(a1);
  dispatch_time_t v3 = CFGetAllocator(a1);
  BytePtr = CFDataGetBytePtr(a1);
  CFTypeRef v5 = (CFIndex *)ccsha256_di(BytePtr);
  return sub_10001A2B4(v3, v5, Length, (uint64_t)BytePtr);
}

const UInt8 *sub_10001A3C4(const __CFAllocator *a1, CFStringRef *a2, CFTypeRef *a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    CFIndex numBytes = 0LL;
    int v9 = (const UInt8 *)ccder_decode_tl(12LL, &numBytes, a4, a5);
    if (v9 && (uint64_t v11 = v9, a5 - (uint64_t)v9 >= numBytes))
    {
      CFStringRef v13 = CFStringCreateWithBytes(a1, v9, numBytes, 0x8000100u, 0);
      *a2 = v13;
      if (v13) {
        return &v11[numBytes];
      }
      sub_1000194B4(-3LL, @"com.apple.security.cfder.error", 0LL, a3, v14, @"String allocation failed");
    }

    else
    {
      sub_1000194B4(-1LL, @"com.apple.security.cfder.error", 0LL, a3, v10, @"Unknown string encoding");
    }
  }

  else
  {
    sub_1000194B4(-6LL, @"com.apple.security.cfder.error", 0LL, a3, a5, @"null input");
  }

  return 0LL;
}

uint64_t sub_10001A4B8(const __CFString *a1)
{
  CFIndex Length = CFStringGetLength(a1);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  CFIndex usedBufLen = 0LL;
  v7.location = 0LL;
  v7.size_t length = Length;
  if (CFStringGetBytes(a1, v7, 0x8000100u, 0, 0, 0LL, MaximumSizeForEncoding, &usedBufLen) == Length) {
    CFIndex v4 = usedBufLen;
  }
  else {
    CFIndex v4 = 0LL;
  }
  return ccder_sizeof(12LL, v4);
}

uint64_t sub_10001A534(const __CFString *a1, CFTypeRef *a2, UInt8 *a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    CFIndex Length = CFStringGetLength(a1);
    CFIndex usedBufLen = 0LL;
    v16.location = 0LL;
    v16.size_t length = Length;
    if (CFStringGetBytes(a1, v16, 0x8000100u, 0, 0, a3, a4 - (void)a3, &usedBufLen) == Length)
    {
      CFIndex v11 = usedBufLen;
      uint64_t v12 = ccder_encode_body(usedBufLen, a3, a3, a4);
      uint64_t result = ccder_encode_tl(12LL, v11, a3, v12);
      if (result) {
        return result;
      }
      sub_1000194B4(-7LL, @"com.apple.security.cfder.error", 0LL, a2, v14, @"ccder failed to encode");
    }

    else
    {
      sub_1000194B4(-5LL, @"com.apple.security.cfder.error", 0LL, a2, v10, @"String extraction failed");
    }
  }

  else
  {
    sub_1000194B4(-6LL, @"com.apple.security.cfder.error", 0LL, a2, a5, @"null input");
  }

  return 0LL;
}

unsigned __int8 *sub_10001A63C(CFBooleanRef *a1, CFTypeRef *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = 0LL;
  CFRange v7 = (unsigned __int8 *)ccder_decode_tl(1LL, &v13, a3, a4);
  if (v7 && (a4 - (uint64_t)v7 >= 1 ? (BOOL v9 = v13 == 1) : (BOOL v9 = 0), v9))
  {
    int v11 = *v7;
    uint64_t result = v7 + 1;
    if (v11) {
      uint64_t v12 = &kCFBooleanTrue;
    }
    else {
      uint64_t v12 = &kCFBooleanFalse;
    }
    *a1 = *v12;
  }

  else
  {
    sub_1000194B4(-1LL, @"com.apple.security.cfder.error", 0LL, a2, v8, @"Unknown BOOLean encoding");
    return 0LL;
  }

  return result;
}

const UInt8 *sub_10001A6E4(const __CFAllocator *a1, CFDataRef *a2, CFTypeRef *a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    CFIndex length = 0LL;
    BOOL v9 = (const UInt8 *)ccder_decode_tl(4LL, &length, a4, a5);
    if (v9 && (int v11 = v9, a5 - (uint64_t)v9 >= length))
    {
      CFDataRef v13 = CFDataCreate(a1, v9, length);
      *a2 = v13;
      if (v13) {
        return &v11[length];
      }
      sub_1000194B4(-3LL, @"com.apple.security.cfder.error", 0LL, a3, v14, @"Failed to create data");
    }

    else
    {
      sub_1000194B4(-1LL, @"com.apple.security.cfder.error", 0LL, a3, v10, @"Unknown data encoding");
    }
  }

  else
  {
    sub_1000194B4(-6LL, @"com.apple.security.cfder.error", 0LL, a3, a5, @"null input");
  }

  return 0LL;
}

uint64_t sub_10001A7CC(const __CFData *a1, CFTypeRef *a2, uint64_t a3, uint64_t a4)
{
  CFIndex Length = CFDataGetLength(a1);
  BytePtr = CFDataGetBytePtr(a1);
  uint64_t v10 = ccder_encode_body(Length, BytePtr, a3, a4);
  uint64_t v12 = ccder_encode_tl(4LL, Length, a3, v10);
  if (!v12) {
    sub_1000194B4(-7LL, @"com.apple.security.cfder.error", 0LL, a2, v11, @"ccder failed to encode");
  }
  return v12;
}

void sub_10001A9CC(uint64_t a1, void *a2)
{
  id v9 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSString, v3);
  if ((objc_opt_isKindOfClass(v9, v4) & 1) != 0) {
    id v5 = v9;
  }
  else {
    id v5 = (id)objc_claimAutoreleasedReturnValue([v9 description]);
  }
  uint64_t v6 = v5;
  unint64_t v7 = *(void *)(a1 + 40);
  if (v7 && v7 < (unint64_t)[v5 length])
  {
    uint64_t v8 = objc_claimAutoreleasedReturnValue([v6 substringToIndex:*(void *)(a1 + 40)]);

    uint64_t v6 = (void *)v8;
  }

  [*(id *)(a1 + 32) insertObject:v6 atIndex:0];
}

void sub_10001AB34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10001AB4C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  id result = [*(id *)(a1 + 32) containsObject:a2];
  if ((result & 1) == 0)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    *a3 = 1;
  }

  return result;
}

void sub_10001ACA0(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a2 stringByAppendingString:@":"]);
  [v5 addObject:v7];

  uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSArray, v8);
  char isKindOfClass = objc_opt_isKindOfClass(v6, v9);
  uint64_t v11 = *(void **)(a1 + 32);
  if ((isKindOfClass & 1) != 0) {
    uint64_t v12 = objc_claimAutoreleasedReturnValue([v6 componentsJoinedByString:@" "]);
  }
  else {
    uint64_t v12 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@", v6));
  }
  id v13 = (id)v12;

  [v11 addObject:v13];
}

uint64_t sub_10001AF8C(CFNullRef *a1, CFTypeRef *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 0LL;
  uint64_t result = ccder_decode_tl(5LL, &v8, a3, a4);
  if (!result || v8)
  {
    sub_1000194B4(-1LL, @"com.apple.security.cfder.error", 0LL, a2, v7, @"Unknown null encoding");
    return 0LL;
  }

  else
  {
    *a1 = kCFNull;
  }

  return result;
}

uint64_t sub_10001B008(CFTypeRef *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = ccder_encode_tl(5LL, 0LL, a2, a3);
  if (!v5) {
    sub_1000194B4(-7LL, @"com.apple.security.cfder.error", 0LL, a1, v4, @"ccder failed to encode");
  }
  return v5;
}

unint64_t sub_10001B064( const __CFAllocator *a1, CFTypeRef *a2, CFTypeRef *a3, uint64_t a4, uint64_t a5)
{
  if (!a4)
  {
    sub_1000194B4(-6LL, @"com.apple.security.cfder.error", 0LL, a3, a5, @"null input");
    return 0LL;
  }

  unint64_t v16 = 0LL;
  unint64_t v9 = ccder_decode_constructed_tl(0xC000000000000011LL, &v16, a4, a5);
  if (!v9)
  {
    sub_1000194B4( -1LL,  @"com.apple.security.cfder.error",  0LL,  a3,  v8,  @"Unknown data encoding, expected CCDER_CONSTRUCTED_CFSET");
    return v9;
  }

  CFMutableArrayRef Mutable = CFSetCreateMutable(a1, 0LL, &kCFTypeSetCallBacks);
  if (Mutable)
  {
    BOOL v12 = v9 == v16;
    if (v9 < v16)
    {
      do
      {
        xpc_object_t value = 0LL;
        unint64_t v9 = sub_100019634((int)a1, (int)&value, (int)a3);
        id v13 = value;
        if (v9) {
          CFSetAddValue(Mutable, value);
        }
        if (v13) {
          CFRelease(v13);
        }
      }

      while (v9 && v9 < v16);
      BOOL v12 = v9 == v16;
    }

    if (!v12)
    {
      CFRelease(Mutable);
      return v9;
    }
  }

  else
  {
    sub_1000194B4(-3LL, @"com.apple.security.cfder.error", 0LL, a3, v10, @"Failed to create set");
    unint64_t v9 = 0LL;
    if (v16) {
      return v9;
    }
  }

  if (*a2) {
    CFRelease(*a2);
  }
  *a2 = Mutable;
  return v9;
}

uint64_t sub_10001B1DC(const __CFSet *a1, uint64_t a2)
{
  __int128 v3 = xmmword_100204FD0;
  LOBYTE(v3) = 1;
  uint64_t v4 = a2;
  CFSetApplyFunction(a1, (CFSetApplierFunction)sub_10001B23C, &v3);
  if ((_BYTE)v3) {
    return ccder_sizeof(0xC000000000000011LL, *((void *)&v3 + 1));
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10001B23C(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)a2)
  {
    uint64_t result = sub_100019A68(result, *(void *)(a2 + 16));
    if (result) {
      *(void *)(a2 + 8) += result;
    }
    else {
      *(_BYTE *)a2 = 0;
    }
  }

  return result;
}

uint64_t sub_10001B280(const __CFSet *a1, CFTypeRef *a2, char a3, uint64_t a4, uint64_t a5)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  v19[0] = 0xAAAAAAAAAAAAAA01LL;
  v19[1] = a2;
  BYTE1(v19[0]) = a3;
  int v19[2] = Mutable;
  v19[3] = 0LL;
  CFSetApplyFunction(a1, (CFSetApplierFunction)sub_10001B3F4, v19);
  if (!LOBYTE(v19[0]))
  {
    if (Mutable) {
      CFRelease(Mutable);
    }
    return 0LL;
  }

  v20.CFIndex length = CFArrayGetCount(Mutable);
  v20.location = 0LL;
  CFArraySortValues(Mutable, v20, (CFComparatorFunction)sub_10001B4C8, 0LL);
  CFIndex Count = CFArrayGetCount(Mutable);
  uint64_t v12 = a5;
  if (Count >= 1)
  {
    unint64_t v13 = Count + 1;
    uint64_t v12 = a5;
    do
    {
      ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(Mutable, v13 - 2);
      CFIndex Length = CFDataGetLength(ValueAtIndex);
      BytePtr = CFDataGetBytePtr(ValueAtIndex);
      uint64_t v12 = ccder_encode_body(Length, BytePtr, a4, v12);
      --v13;
    }

    while (v13 > 1);
  }

  if (Mutable) {
    CFRelease(Mutable);
  }
  uint64_t result = ccder_encode_constructed_tl(0xC000000000000011LL, a5, a4, v12);
  if (!result)
  {
    sub_1000194B4(-7LL, @"com.apple.security.cfder.error", 0LL, a2, v18, @"ccder failed to encode");
    return 0LL;
  }

  return result;
}

void sub_10001B3F4(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_BYTE *)a2)
  {
    CFIndex v7 = sub_100019A68(a1, *(CFTypeRef **)(a2 + 8), a3, a4, a5);
    if (!v7)
    {
      *(_BYTE *)a2 = 0;
      return;
    }

    CFIndex v8 = v7;
    CFMutableArrayRef Mutable = CFDataCreateMutable(*(CFAllocatorRef *)(a2 + 24), v7);
    CFDataSetLength(Mutable, v8);
    MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
    uint64_t v11 = sub_100019C44(a1, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 1), MutableBytePtr, &MutableBytePtr[v8]);
    if (v11)
    {
      v12.CFIndex length = v11 - (void)MutableBytePtr;
      v12.location = 0LL;
      CFDataDeleteBytes(Mutable, v12);
      CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 16), Mutable);
      if (!Mutable) {
        return;
      }
    }

    else
    {
      *(_BYTE *)a2 = 0;
      if (!Mutable) {
        return;
      }
    }

    CFRelease(Mutable);
  }

uint64_t sub_10001B4C8(const __CFData *a1, const __CFData *a2)
{
  CFIndex Length = CFDataGetLength(a1);
  CFIndex v5 = CFDataGetLength(a2);
  unint64_t v6 = v5;
  if (Length < 0 || v5 < 0)
  {
    if (Length >= v5) {
      uint64_t v12 = 0LL;
    }
    else {
      uint64_t v12 = -1LL;
    }
    if (Length <= v5) {
      return v12;
    }
    else {
      return 1LL;
    }
  }

  else
  {
    if (Length >= v5) {
      size_t v7 = v5;
    }
    else {
      size_t v7 = Length;
    }
    BytePtr = CFDataGetBytePtr(a1);
    unint64_t v9 = CFDataGetBytePtr(a2);
    int v10 = memcmp(BytePtr, v9, v7);
    if (v10 <= 0 && (v10 || Length <= v6))
    {
      LODWORD(v13) = v10 == 0;
      if (Length >= v6) {
        LODWORD(v13) = 0;
      }
      if (v10 < 0) {
        uint64_t v13 = 1LL;
      }
      else {
        uint64_t v13 = v13;
      }
      return v13 << 63 >> 63;
    }

    else
    {
      return 1LL;
    }
  }

uint64_t sub_10001B58C()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10001B608;
  block[3] = &unk_100283728;
  block[4] = &qword_1002DE7F0;
  if (qword_1002DE7E8 != -1) {
    dispatch_once(&qword_1002DE7E8, block);
  }
  return qword_1002DE7F0;
}

dispatch_queue_t sub_10001B608(uint64_t a1)
{
  dispatch_queue_t result = dispatch_queue_create("AKS Lock Assertion Queue", 0LL);
  **(void **)(a1 + 32) = result;
  return result;
}

BOOL sub_10001B63C(int a1, CFTypeRef *a2)
{
  uint64_t v9 = 0LL;
  int v10 = &v9;
  uint64_t v11 = 0x2000000000LL;
  int v12 = 0;
  uint64_t v4 = (dispatch_queue_s *)sub_10001B58C();
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10001B6F4;
  block[3] = &unk_100283750;
  block[4] = &v9;
  void block[5] = 60LL;
  int v8 = a1;
  dispatch_sync(v4, block);
  BOOL v5 = sub_1000190E4(*((_DWORD *)v10 + 6), a2, @"Kern return error");
  _Block_object_dispose(&v9, 8);
  return v5;
}

uint64_t sub_10001B6F4(uint64_t result)
{
  uint64_t v1 = result;
  if (!dword_1002DE7F8)
  {
    uint64_t v2 = (os_log_s *)sub_10001267C("lockassertions");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(v1 + 40);
      int v4 = 134217984;
      uint64_t v5 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Requesting lock assertion for %lld seconds",  (uint8_t *)&v4,  0xCu);
    }

    dispatch_queue_t result = sub_100005F30(*(_DWORD *)(v1 + 48), 0, *(void *)(v1 + 40));
    *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8LL) + 24LL) = result;
  }

  if (!*(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8LL) + 24LL)) {
    ++dword_1002DE7F8;
  }
  return result;
}

BOOL sub_10001B7E4(int a1, CFTypeRef *a2)
{
  uint64_t v9 = 0LL;
  int v10 = &v9;
  uint64_t v11 = 0x2000000000LL;
  int v12 = 0;
  int v4 = (dispatch_queue_s *)sub_10001B58C();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000LL;
  v7[2] = sub_10001B898;
  v7[3] = &unk_100283778;
  v7[4] = &v9;
  int v8 = a1;
  dispatch_sync(v4, v7);
  BOOL v5 = sub_1000190E4(*((_DWORD *)v10 + 6), a2, @"Kern return error");
  _Block_object_dispose(&v9, 8);
  return v5;
}

uint64_t sub_10001B898(uint64_t result)
{
  int v1 = dword_1002DE7F8;
  if (dword_1002DE7F8)
  {
    --dword_1002DE7F8;
    if (v1 == 1)
    {
      uint64_t v2 = result;
      uint64_t v3 = (os_log_s *)sub_10001267C("lockassertions");
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v4 = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Dropping lock assertion", v4, 2u);
      }

      dispatch_queue_t result = sub_100006010(*(_DWORD *)(v2 + 40), 0);
      *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8LL) + 24LL) = result;
    }
  }

  return result;
}

BOOL sub_10001B930(int a1, CFTypeRef *a2, uint64_t a3)
{
  BOOL result = sub_10001B63C(a1, a2);
  if (result)
  {
    (*(void (**)(uint64_t))(a3 + 16))(a3);
    return sub_10001B7E4(a1, a2);
  }

  return result;
}

CFURLRef sub_10001B988(uint64_t a1)
{
  uint64_t v2 = CFURLCreateWithFileSystemPath(0LL, @"/", kCFURLPOSIXPathStyle, 1u);
  if (a1) {
    Copy = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"%@/%@", @"Library/Keychains", a1);
  }
  else {
    Copy = CFStringCreateCopy(kCFAllocatorDefault, @"Library/Keychains");
  }
  int v4 = Copy;
  if (v2 && Copy)
  {
    CFURLRef v5 = CFURLCreateCopyAppendingPathComponent(kCFAllocatorDefault, v2, Copy, a1 == 0);
    CFRelease(v4);
LABEL_10:
    CFRelease(v2);
    return v5;
  }

  if (Copy) {
    CFRelease(Copy);
  }
  CFURLRef v5 = 0LL;
  if (v2) {
    goto LABEL_10;
  }
  return v5;
}

void sub_10001BA68(uint64_t a1, uint64_t a2)
{
  CFURLRef v4 = sub_10001B988(a1);
  if (v4)
  {
    CFURLRef v5 = v4;
    memset(__b, 170, sizeof(__b));
    CFURLGetFileSystemRepresentation(v5, 0, __b, 1024LL);
    (*(void (**)(uint64_t, UInt8 *))(a2 + 16))(a2, __b);
    CFRelease(v5);
  }

void sub_10001BB24(void *a1, unsigned int a2)
{
  CFURLRef v4 = sub_10001267C("SecError");
  CFURLRef v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412546;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Simulating crash, reason: %@, code=%08x",  buf,  0x12u);
  }

  int v6 = dword_1002DD0E8;
  if (dword_1002DD0E8 != -1) {
    goto LABEL_4;
  }
  if (!qword_1002DE800)
  {
    *(_OWORD *)__int128 buf = off_100283798;
    *(void *)&uint8_t buf[16] = 0LL;
    qword_1002DE800 = _sl_dlopen(buf, 0LL);
  }

  if (!qword_1002DE800)
  {
    int v6 = dword_1002DD0E8;
LABEL_4:
    dword_1002DD0E8 = v6 + 1;
    return;
  }

  uint64_t v7 = getpid();
  id v8 = a1;
  *(void *)__int128 buf = 0LL;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x2020000000LL;
  uint64_t v9 = off_1002DE808;
  uint64_t v14 = off_1002DE808;
  if (!off_1002DE808)
  {
    int v10 = sub_10001BD50();
    uint64_t v9 = dlsym(v10, "SimulateCrash");
    *(void *)(*(void *)&buf[8] + 24LL) = v9;
    off_1002DE808 = v9;
  }

  _Block_object_dispose(buf, 8);
  if (!v9)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    int v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "BOOL soft_SimulateCrash(pid_t, mach_exception_data_type_t, NSString *__strong)"));
    objc_msgSend( v11,  "handleFailureInFunction:file:lineNumber:description:",  v12,  @"simulate_crash.m",  22,  @"%s",  dlerror());

    __break(1u);
  }

  ((void (*)(uint64_t, void, id))v9)(v7, a2, v8);
}

void sub_10001BD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void *sub_10001BD50()
{
  CFURLRef v4 = 0LL;
  if (!qword_1002DE800)
  {
    __int128 v5 = off_100283798;
    uint64_t v6 = 0LL;
    qword_1002DE800 = _sl_dlopen(&v5, &v4);
  }

  uint64_t v0 = (void *)qword_1002DE800;
  if (!qword_1002DE800)
  {
    uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *CrashReporterSupportLibrary(void)"));
    objc_msgSend( v0,  "handleFailureInFunction:file:lineNumber:description:",  v3,  @"simulate_crash.m",  18,  @"%s",  v4);

    __break(1u);
    goto LABEL_7;
  }

  int v1 = v4;
  if (v4) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void sub_10001BE54(void *a1, unsigned int a2)
{
  CFURLRef v4 = sub_10001267C("SecError");
  __int128 v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412546;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "stackshot report, reason: %@, code=%08x",  buf,  0x12u);
  }

  if (dword_1002DD0E8 == -1) {
    goto LABEL_7;
  }
  if (!qword_1002DE800)
  {
    *(_OWORD *)__int128 buf = off_100283798;
    *(void *)&uint8_t buf[16] = 0LL;
    qword_1002DE800 = _sl_dlopen(buf, 0LL);
  }

  if (!qword_1002DE800)
  {
LABEL_7:
    if (!qword_1002DE800)
    {
      *(_OWORD *)__int128 buf = off_100283798;
      *(void *)&uint8_t buf[16] = 0LL;
      qword_1002DE800 = _sl_dlopen(buf, 0LL);
    }

    if (qword_1002DE800)
    {
      id v6 = a1;
      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x2020000000LL;
      uint64_t v7 = off_1002DE810;
      int v12 = off_1002DE810;
      if (!off_1002DE810)
      {
        id v8 = sub_10001BD50();
        uint64_t v7 = dlsym(v8, "WriteStackshotReport");
        *(void *)(*(void *)&buf[8] + 24LL) = v7;
        off_1002DE810 = v7;
      }

      _Block_object_dispose(buf, 8);
      if (!v7)
      {
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
        int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "BOOL soft_WriteStackshotReport(NSString *__strong, mach_exception_data_type_t)"));
        objc_msgSend( v9,  "handleFailureInFunction:file:lineNumber:description:",  v10,  @"simulate_crash.m",  25,  @"%s",  dlerror());

        __break(1u);
      }

      ((void (*)(id, void))v7)(v6, a2);
    }
  }

void sub_10001C070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10001C090(size_t __size, uint64_t a2)
{
  if (__size)
  {
    if (__size > 0x800)
    {
      CFURLRef v4 = malloc(__size);
      (*(void (**)(uint64_t, size_t, void *))(a2 + 16))(a2, __size, v4);
      if (v4) {
        free(v4);
      }
    }

    else
    {
      __chkstk_darwin();
      memset((char *)&v5 - ((__size + 15) & 0xFFFFFFFFFFFFFFF0LL), 170, __size);
      (*(void (**)(uint64_t, size_t, char *))(a2 + 16))( a2,  __size,  (char *)&v5 - ((__size + 15) & 0xFFFFFFFFFFFFFFF0LL));
    }
  }

  else
  {
    (*(void (**)(uint64_t, void, void))(a2 + 16))(a2, 0LL, 0LL);
  }

xpc_object_t sub_10001C1DC(__CFError *a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
  CFErrorDomain Domain = CFErrorGetDomain(a1);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 0x40000000LL;
  int v15[2] = sub_10001C314;
  v15[3] = &unk_1002837B0;
  v15[4] = v2;
  v15[5] = "domain";
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 0x40000000LL;
  void v16[2] = sub_1000134E4;
  v16[3] = &unk_100283030;
  v16[4] = v15;
  sub_10001337C(Domain, (uint64_t)v16);
  int64_t Code = CFErrorGetCode(a1);
  xpc_dictionary_set_int64(v2, "code", Code);
  uint64_t v5 = (const __CFString *)CFErrorCopyUserInfo(a1);
  size_t v9 = sub_100019A68(v5, 0LL, v6, v7, v8);
  if (v9)
  {
    size_t v10 = v9;
    uint64_t v11 = (UInt8 *)malloc(v9);
    unint64_t v12 = (unint64_t)&v11[v10];
    uint64_t v13 = (const void *)sub_100019C44(v5, 0LL, 0LL, v11, v12);
    if (v13) {
      xpc_dictionary_set_data(v2, "userinfo", v13, v12 - (void)v13);
    }
    free(v11);
  }

  CFRelease(v5);
  return v2;
}

void sub_10001C314(uint64_t a1, char *string)
{
}

void sub_10001C3FC(id a1)
{
  int v1 = objc_alloc(&OBJC_CLASS___KeychainItemUpgradeRequestServer);
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[CKKSLockStateTracker globalTracker](&OBJC_CLASS___CKKSLockStateTracker, "globalTracker"));
  xpc_object_t v2 = -[KeychainItemUpgradeRequestServer initWithLockStateTracker:](v1, "initWithLockStateTracker:", v4);
  uint64_t v3 = (void *)qword_1002DE818;
  qword_1002DE818 = (uint64_t)v2;
}

void sub_10001C5E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001C750( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001C8BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001CA40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001CBAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001CD18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001CE9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001D0BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001D278( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

void sub_10001D3E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001D670(_Unwind_Exception *a1)
{
}

void sub_10001D7DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001D960( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001DAE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001DC50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001DDBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001E088(_Unwind_Exception *a1)
{
}

void sub_10001E234( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001E460( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
}

void sub_10001E5E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001E7A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001E93C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001EAC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001EC6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001EE04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001EF9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001F1AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
}

void sub_10001F330( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001F4DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001F714(_Unwind_Exception *a1)
{
}

void sub_10001F898( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001FA30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001FBD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001FD3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10001FEC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10002004C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000201B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100020364( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100020530( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000206B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100020838( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000209F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100020B64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100020CDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100020E48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100020FFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100021180( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000212F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000215C4(_Unwind_Exception *a1)
{
}

void sub_10002175C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000218C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100021A34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100021BA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100021DEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100021F58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000220C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100022248( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000223CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100022554( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100022590(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper performCKServerUnreadableDataRemovalWithSpecificUser:isGuitarfish:internalAccount:dem"
            "oAccount:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper performCKServerUnreadableDataRemovalWithSpecificUser:isGuitarfish:internalAccount:dem"
            "oAccount:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100022744(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchPCSIdentityByPublicKeyWithSpecificUser:pcsservices:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchPCSIdentityByPublicKeyWithSpecificUser:pcsservices:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100022900(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchCurrentItemWithSpecificUser:items:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchCurrentItemWithSpecificUser:items:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100022ABC(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper octagonContainsDistrustedRecoveryKeysWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper octagonContainsDistrustedRecoveryKeysWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100022C74(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchTrustedPeerCountWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchTrustedPeerCountWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100022E2C(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper preflightRecoverOctagonUsingRecoveryKey:recoveryKey:salt:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper preflightRecoverOctagonUsingRecoveryKey:recoveryKey:salt:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100022FE4(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper performATOPRVActionsWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper performATOPRVActionsWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100023198(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper removeRecoveryKey:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper removeRecoveryKey:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100023350(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper isRecoveryKeySet:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper isRecoveryKeySet:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100023508(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper recoverTLKSharesForInheritorWithSpecificUser:crk:tlkShares:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper recoverTLKSharesForInheritorWithSpecificUser:crk:tlkShares:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_1000236C4(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      *(_DWORD *)__int128 buf = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper prepareInheritancePeerWithSpecificUser:epoch:machineID:bottleSalt:bottleID:modelID:de"
            "viceName:serialNumber:osVersion:policyVersion:policySecrets:syncUserControllableViews:secureElementIdentity:"
            "signingPrivKeyPersistentRef:encPrivKeyPersistentRef:crk:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  buf,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper prepareInheritancePeerWithSpecificUser:epoch:machineID:bottleSalt:bottleID:modelID:de"
            "viceName:serialNumber:osVersion:policyVersion:policySecrets:syncUserControllableViews:secureElementIdentity:"
            "signingPrivKeyPersistentRef:encPrivKeyPersistentRef:crk:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  buf,  0x16u);
    }

    (*(void (**)(void, void))(a1[5] + 16LL))(a1[5], 0LL);
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100023894(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchAccountSettingsWithSpecificUser:forceFetch:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchAccountSettingsWithSpecificUser:forceFetch:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100023A4C(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchRecoverableTLKSharesWithSpecificUser:peerID:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchRecoverableTLKSharesWithSpecificUser:peerID:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100023C04(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper resetAccountCDPContentsWithSpecificUser:idmsTargetContext:idmsCuttlefishPassword:noti"
            "fyIdMS:internalAccount:demoAccount:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper resetAccountCDPContentsWithSpecificUser:idmsTargetContext:idmsCuttlefishPassword:noti"
            "fyIdMS:internalAccount:demoAccount:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100023DB8(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper removeEscrowCacheWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper removeEscrowCacheWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100023F6C(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchViableEscrowRecordsWithSpecificUser:source:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchViableEscrowRecordsWithSpecificUser:source:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100024124(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper getSupportAppInfoWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper getSupportAppInfoWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_1000242DC(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper requestHealthCheckWithSpecificUser:requiresEscrowCheck:repair:knownFederations:flowID"
            ":deviceSessionID:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper requestHealthCheckWithSpecificUser:requiresEscrowCheck:repair:knownFederations:flowID"
            ":deviceSessionID:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100024494(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper findCustodianRecoveryKeyWithSpecificUser:uuid:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper findCustodianRecoveryKeyWithSpecificUser:uuid:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_10002464C(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper removeCustodianRecoveryKeyWithSpecificUser:uuid:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper removeCustodianRecoveryKeyWithSpecificUser:uuid:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100024800(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper createCustodianRecoveryKeyWithSpecificUser:recoveryKey:salt:ckksKeys:uuid:kind:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper createCustodianRecoveryKeyWithSpecificUser:recoveryKey:salt:ckksKeys:uuid:kind:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_1000249BC(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper setRecoveryKeyWithSpecificUser:recoveryKey:salt:ckksKeys:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper setRecoveryKeyWithSpecificUser:recoveryKey:salt:ckksKeys:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100024B74(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchTrustStateWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchTrustStateWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100024D30(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchCurrentPolicyWithSpecificUser:modelIDOverride:isInheritedAccount:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchCurrentPolicyWithSpecificUser:modelIDOverride:isInheritedAccount:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100024EEC(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchPolicyDocumentsWithSpecificUser:versions:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchPolicyDocumentsWithSpecificUser:versions:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_1000250A4(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchEscrowContentsWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchEscrowContentsWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100025264(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchViableBottlesWithSpecificUser:source:flowID:deviceSessionID:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchViableBottlesWithSpecificUser:source:flowID:deviceSessionID:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100025420(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper updateTLKsWithSpecificUser:ckksKeys:tlkShares:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper updateTLKsWithSpecificUser:ckksKeys:tlkShares:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_1000255D8(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper setPreapprovedKeysWithSpecificUser:preapprovedKeys:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper setPreapprovedKeysWithSpecificUser:preapprovedKeys:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100025790(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper updateWithSpecificUser:forceRefetch:deviceName:serialNumber:osVersion:policyVersion:p"
            "olicySecrets:syncUserControllableViews:secureElementIdentity:walrusSetting:webAccess:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper updateWithSpecificUser:forceRefetch:deviceName:serialNumber:osVersion:policyVersion:p"
            "olicySecrets:syncUserControllableViews:secureElementIdentity:walrusSetting:webAccess:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_10002594C(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper attemptPreapprovedJoinWithSpecificUser:ckksKeys:tlkShares:preapprovedKeys:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper attemptPreapprovedJoinWithSpecificUser:ckksKeys:tlkShares:preapprovedKeys:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100025B0C(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper preflightPreapprovedJoinWithSpecificUser:preapprovedKeys:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper preflightPreapprovedJoinWithSpecificUser:preapprovedKeys:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100025CC4(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper joinWithSpecificUser:voucherData:voucherSig:ckksKeys:tlkShares:preapprovedKeys:flowID"
            ":deviceSessionID:canSendMetrics:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper joinWithSpecificUser:voucherData:voucherSig:ckksKeys:tlkShares:preapprovedKeys:flowID"
            ":deviceSessionID:canSendMetrics:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100025E84(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper vouchWithRerollWithSpecificUser:oldPeerID:tlkShares:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper vouchWithRerollWithSpecificUser:oldPeerID:tlkShares:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100026048(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper vouchWithCustodianRecoveryKeyWithSpecificUser:crk:tlkShares:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper vouchWithCustodianRecoveryKeyWithSpecificUser:crk:tlkShares:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_10002620C(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper vouchWithRecoveryKeyWithSpecificUser:recoveryKey:salt:tlkShares:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper vouchWithRecoveryKeyWithSpecificUser:recoveryKey:salt:tlkShares:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_1000263D0(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper preflightVouchWithCustodianRecoveryKeyWithSpecificUser:crk:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper preflightVouchWithCustodianRecoveryKeyWithSpecificUser:crk:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_10002658C(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper preflightVouchWithRecoveryKeyWithSpecificUser:recoveryKey:salt:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper preflightVouchWithRecoveryKeyWithSpecificUser:recoveryKey:salt:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100026748(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper vouchWithBottleWithSpecificUser:bottleID:entropy:bottleSalt:tlkShares:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper vouchWithBottleWithSpecificUser:bottleID:entropy:bottleSalt:tlkShares:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_10002690C(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper preflightVouchWithBottleWithSpecificUser:bottleID:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper preflightVouchWithBottleWithSpecificUser:bottleID:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100026ACC(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper vouchWithSpecificUser:peerID:permanentInfo:permanentInfoSig:stableInfo:stableInfoSig:"
            "ckksKeys:flowID:deviceSessionID:canSendMetrics:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper vouchWithSpecificUser:peerID:permanentInfo:permanentInfoSig:stableInfo:stableInfoSig:"
            "ckksKeys:flowID:deviceSessionID:canSendMetrics:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100026C88(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper establishWithSpecificUser:ckksKeys:tlkShares:preapprovedKeys:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper establishWithSpecificUser:ckksKeys:tlkShares:preapprovedKeys:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100026E48(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper prepareWithSpecificUser:epoch:machineID:bottleSalt:bottleID:modelID:deviceName:serial"
            "Number:osVersion:policyVersion:policySecrets:syncUserControllableViews:secureElementIdentity:setting:signing"
            "PrivKeyPersistentRef:encPrivKeyPersistentRef:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper prepareWithSpecificUser:epoch:machineID:bottleSalt:bottleID:modelID:deviceName:serial"
            "Number:osVersion:policyVersion:policySecrets:syncUserControllableViews:secureElementIdentity:setting:signing"
            "PrivKeyPersistentRef:encPrivKeyPersistentRef:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100027014(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchEgoEpochWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchEgoEpochWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_1000271CC(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchAllowedMachineIDsWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper fetchAllowedMachineIDsWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100027384(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper handleRemovedMachineIDsDueToUnknownReasonsWithSpecificUser:machineIDs:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper handleRemovedMachineIDsDueToUnknownReasonsWithSpecificUser:machineIDs:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100027538(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper handleEvictedMachineIDsWithSpecificUser:machineIDs:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper handleEvictedMachineIDsWithSpecificUser:machineIDs:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_1000276EC(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper markTrustedDeviceListFetchFailed:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper markTrustedDeviceListFetchFailed:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_1000278A0(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper setAllowedMachineIDsWithSpecificUser:allowedMachineIDs:userInitiatedRemovals:evictedR"
            "emovals:unknownReasonRemovals:honorIDMSListChanges:version:flowID:deviceSessionID:canSendMetrics:altDSID:tru"
            "stedDeviceHash:deletedDeviceHash:trustedDevicesUpdateTimestamp:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper setAllowedMachineIDsWithSpecificUser:allowedMachineIDs:userInitiatedRemovals:evictedR"
            "emovals:unknownReasonRemovals:honorIDMSListChanges:version:flowID:deviceSessionID:canSendMetrics:altDSID:tru"
            "stedDeviceHash:deletedDeviceHash:trustedDevicesUpdateTimestamp:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100027A58(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper localResetWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper localResetWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100027C0C(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper resetWithSpecificUser:resetReason:idmsTargetContext:idmsCuttlefishPassword:notifyIdMS"
            ":internalAccount:demoAccount:isGuitarfish:accountType:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper resetWithSpecificUser:resetReason:idmsTargetContext:idmsCuttlefishPassword:notifyIdMS"
            ":internalAccount:demoAccount:isGuitarfish:accountType:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100027DC0(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper trustStatusWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper trustStatusWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100027F78(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper distrustPeerIDsWithSpecificUser:peerIDs:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper distrustPeerIDsWithSpecificUser:peerIDs:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_10002812C(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper departByDistrustingSelfWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper departByDistrustingSelfWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_1000282E0(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper trustedDeviceNamesByPeerIDWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper trustedDeviceNamesByPeerIDWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100028498(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper octagonPeerIDGivenBottleIDWithSpecificUser:bottleID:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper octagonPeerIDGivenBottleIDWithSpecificUser:bottleID:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100028650(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper honorIDMSListChangesForSpecificUser:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper honorIDMSListChangesForSpecificUser:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100028808(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[6] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper dumpWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper dumpWithSpecificUser:reply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  ++*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_1000289C0(void *a1, void *a2)
{
  id v4 = a2;
  if (*(int *)(*(void *)(a1[5] + 8LL) + 24LL) <= 4
    && objc_msgSend((id)objc_opt_class(a1[4], v3), "retryable:", v4))
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL);
      int v10 = 136315650;
      uint64_t v11 = "-[CuttlefishXPCWrapper pingWithReply:]_block_invoke";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = v7;
      WORD2(v13[0]) = 2112;
      *(void *)((char *)v13 + 6) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "retrying cuttlefish XPC %s, (%d, %@)",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = sub_10001267C("SecError");
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CuttlefishXPCWrapper pingWithReply:]_block_invoke";
      __int16 v12 = 2112;
      v13[0] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Can't talk with TrustedPeersHelper %s: %@",  (uint8_t *)&v10,  0x16u);
    }
  }

  ++*(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL);
}

void sub_100028F10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_10002902C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v8 && !v9)
  {
    uint64_t v11 = sub_10001267C("octagon-ckks");
    __int16 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v8 viewList]);
      *(_DWORD *)__int128 buf = 138412546;
      id v43 = v8;
      __int16 v44 = 2112;
      char v45 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Received syncing policy %@ with view list: %@",  buf,  0x16u);
    }

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 stateHolder]);
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472LL;
    v40[2] = sub_1000294A4;
    v40[3] = &unk_100291520;
    id v16 = v8;
    id v41 = v16;
    id v39 = 0LL;
    [v15 persistAccountChanges:v40 error:&v39];
    id v17 = v39;

    if (v17)
    {
      uint64_t v18 = sub_10001267C("SecError");
      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v43 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "octagon: failed to save policy+views: %@",  buf,  0xCu);
      }

      [WeakRetained setError:v17];
    }

    else
    {
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v34 ckks]);
      [v35 setCurrentSyncingPolicy:v16];

      char v36 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      id v37 = [v36 notifierClass];
      [v37 post:OTUserControllableViewStatusChanged];

      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
      [WeakRetained setNextState:v38];
    }

LABEL_21:
    goto LABEL_22;
  }

  CFRange v20 = sub_10001267C("SecError");
  uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v43 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "octagon-ckks: setting user-controllable views status errored: %@",  buf,  0xCu);
  }

  [WeakRetained setError:v9];
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  int v23 = (void *)objc_claimAutoreleasedReturnValue([v22 lockStateTracker]);
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
  unsigned int v25 = [v23 isLockedError:v24];

  if (v25)
  {
    uint64_t v26 = sub_10001267C("octagon-ckks");
    signed int v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
      *(_DWORD *)__int128 buf = 138412290;
      id v43 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Updating user-controllable view status failed because of lock state, will retry once unlocked: %@",  buf,  0xCu);
    }

    CFDataRef v29 = -[OctagonPendingFlag initWithFlag:conditions:]( objc_alloc(&OBJC_CLASS___OctagonPendingFlag),  "initWithFlag:conditions:",  @"attempt_ucv_upgrade",  1LL);
    CFStringRef v30 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    CFDateRef v31 = (void *)objc_claimAutoreleasedReturnValue([v30 flagHandler]);
    [v31 handlePendingFlag:v29];
  }

  if (((unint64_t)[v7 peerStatus] & 0x24) != 0)
  {
    uint64_t v32 = sub_10001267C("octagon-ckks");
    CFTypeRef v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Updating user-controllable view status failed because our self peer is excluded or missing",  buf,  2u);
    }

    id v17 = (id)objc_claimAutoreleasedReturnValue([WeakRetained peerMissingState]);
    [WeakRetained setNextState:v17];
    goto LABEL_21;
  }

LABEL_22:
}

  attemptedJoin = self->_attemptedJoin;
  if (attemptedJoin >= 3) {
    id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_attemptedJoin));
  }
  else {
    id v16 = *(&off_100283898 + attemptedJoin);
  }
  [v4 setObject:v16 forKey:@"attemptedJoin"];

  if ((*(_WORD *)&self->_has & 8) != 0)
  {
LABEL_26:
    cdpState = self->_cdpState;
    if (cdpState >= 3) {
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_cdpState));
    }
    else {
      uint64_t v18 = *(&off_1002838B0 + cdpState);
    }
    [v4 setObject:v18 forKey:@"cdpState"];
  }

  signed int v27 = -[NSString copyWithZone:](self->_oldPeerID, "copyWithZone:", a3, (void)v30);
  uint64_t v28 = (void *)v5[6];
  v5[6] = v27;

  return v5;
}

    uint64_t v22 = sub_10001267C("octagon-sos");
    int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109378;
      CFDataRef v29 = v12;
      CFStringRef v30 = 2112;
      CFDateRef v31 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Error fetching circle status: %d, error:%@",  buf,  0x12u);
    }

    -[CKKSResultOperation setError:](self, "setError:", v9);
    goto LABEL_25;
  }

  -[CKKSResultOperation setError:](self, "setError:", v6);
  id v9 = (id)objc_claimAutoreleasedReturnValue(-[OTJoinSOSAfterCKKSFetchOperation finishedOp](self, "finishedOp"));
  -[CKKSGroupOperation runBeforeGroupFinished:](self, "runBeforeGroupFinished:", v9);
LABEL_27:
}

  CFStringRef v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate distantPast](&OBJC_CLASS___NSDate, "distantPast"));
  CFDateRef v31 = (void *)objc_claimAutoreleasedReturnValue(-[RateLimiter groups](self, "groups"));
  uint64_t v32 = [v31 count];

  if (!v32) {
    goto LABEL_35;
  }
  CFTypeRef v33 = 0LL;
  uint64_t v14 = 0LL;
  do
  {
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(-[RateLimiter config](self, "config"));
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKeyedSubscript:@"groups"]);
    char v36 = (void *)objc_claimAutoreleasedReturnValue([v35 objectAtIndexedSubscript:v33]);

    id v37 = (void *)objc_claimAutoreleasedReturnValue([v36 objectForKeyedSubscript:@"property"]);
    if (v33)
    {
      uint64_t v38 = objc_claimAutoreleasedReturnValue(-[RateLimiter getPropertyValue:object:](self, "getPropertyValue:object:", v37, v10));

      id v37 = (void *)v38;
    }

    if (v37)
    {
      id v39 = (void *)objc_claimAutoreleasedReturnValue(-[RateLimiter groups](self, "groups"));
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v39 objectAtIndexedSubscript:v33]);
      id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue( -[RateLimiter consumeTokenFromBucket:config:name:at:]( self,  "consumeTokenFromBucket:config:name:at:",  v40,  v36,  v37,  v60));

      if (v41)
      {
        uint64_t v42 = objc_claimAutoreleasedReturnValue([v30 laterDate:v41]);

        id v43 = (void *)objc_claimAutoreleasedReturnValue([v36 objectForKeyedSubscript:@"badness"]);
        __int16 v44 = [v43 intValue];

        if (v14 <= v44) {
          uint64_t v14 = v44;
        }
        CFStringRef v30 = (void *)v42;
      }
    }

    else
    {
      char v45 = sub_1000AA6AC(@"ratelimiter", 0LL);
      id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        int v59 = v14;
        uint64_t v46 = v30;
        uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(-[RateLimiter config](self, "config"));
        uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForKeyedSubscript:@"general"]);
        uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v48 objectForKeyedSubscript:@"name"]);
        uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v36 objectForKeyedSubscript:@"property"]);
        *(_DWORD *)__int128 buf = 138412546;
        int v62 = v49;
        int v63 = 2112;
        int v64 = v50;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_ERROR,  "RateLimiter[%@]: Got nil instead of property named %@",  buf,  0x16u);

        int v10 = v57;
        CFStringRef v30 = v46;
        uint64_t v14 = v59;
      }
    }

    ++v33;
    uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(-[RateLimiter groups](self, "groups"));
    char v52 = [v51 count];
  }

  while (v33 < (unint64_t)v52);
  int v53 = v30;
  if (!v14)
  {
LABEL_35:
    uint64_t v14 = 0LL;
    int v53 = 0LL;
  }

  *uint64_t v56 = v53;
  -[RateLimiter setLastJudgment:](self, "setLastJudgment:", v60);

  uint64_t v11 = v55;
LABEL_37:

  return v14;
}

      CFRetain(v12);
      uint64_t v24 = v12;
      goto LABEL_23;
    }

    return 0LL;
  }

  __int16 v12 = 0LL;
  id v9 = 0LL;
  if (!CFEqual(v10, kCFNull)) {
    goto LABEL_13;
  }
  return v9;
}

      if (v12 == ++v13) {
        goto LABEL_26;
      }
    }

    CFRelease(cf);
LABEL_21:
    if (v10) {
      goto LABEL_25;
    }
    goto LABEL_22;
  }

      uint64_t v19 = *v18++;
      uint64_t v13 = v19;
    }

    while (v19);
    if (!v17)
    {
      __int16 v12 = (void *)ValueAtIndex[2];
      CFMutableArrayRef Mutable = v31;
      id v8 = v33;
      goto LABEL_38;
    }

    sub_1000E985C((uint64_t)ValueAtIndex, v11);
    if (v14)
    {
LABEL_27:
      CFRange v20 = sub_1000E7958((uint64_t)ValueAtIndex, v14, 0LL, v11);
      if (v20) {
        goto LABEL_28;
      }
      goto LABEL_40;
    }

  return v20;
}
}

id sub_1000294A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setTPSyncingPolicy:*(void *)(a1 + 32)];
  return v3;
}

LABEL_30:
  syncingPolicy = self->_syncingPolicy;
  if (syncingPolicy) {
    [v4 setObject:syncingPolicy forKey:@"syncingPolicy"];
  }
  voucher = self->_voucher;
  if (voucher) {
    [v4 setObject:voucher forKey:@"voucher"];
  }
  voucherSignature = self->_voucherSignature;
  if (voucherSignature) {
    [v4 setObject:voucherSignature forKey:@"voucherSignature"];
  }
  tlkSharesForVouchedIdentitys = self->_tlkSharesForVouchedIdentitys;
  if (tlkSharesForVouchedIdentitys) {
    [v4 setObject:tlkSharesForVouchedIdentitys forKey:@"tlkSharesForVouchedIdentity"];
  }
  secureElementIdentity = self->_secureElementIdentity;
  if (secureElementIdentity) {
    [v4 setObject:secureElementIdentity forKey:@"secureElementIdentity"];
  }
  uint64_t v24 = (__int16)self->_has;
  if ((v24 & 0x80) != 0)
  {
    unsigned int v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", self->_isInheritedAccount));
    [v4 setObject:v25 forKey:@"isInheritedAccount"];

    uint64_t v24 = (__int16)self->_has;
    if ((v24 & 0x100) == 0)
    {
LABEL_42:
      if ((v24 & 0x200) == 0) {
        goto LABEL_43;
      }
LABEL_47:
      signed int v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", self->_warnedTooManyPeers));
      [v4 setObject:v27 forKey:@"warnedTooManyPeers"];

      if ((*(_WORD *)&self->_has & 0x20) == 0) {
        goto LABEL_52;
      }
LABEL_48:
      sendingMetricsPermitted = self->_sendingMetricsPermitted;
      if (sendingMetricsPermitted >= 3) {
        CFDataRef v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_sendingMetricsPermitted));
      }
      else {
        CFDataRef v29 = *(&off_1002838C8 + sendingMetricsPermitted);
      }
      [v4 setObject:v29 forKey:@"sendingMetricsPermitted"];

      goto LABEL_52;
    }
  }

  else if ((*(_WORD *)&self->_has & 0x100) == 0)
  {
    goto LABEL_42;
  }

  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", self->_warmedEscrowCache));
  [v4 setObject:v26 forKey:@"warmedEscrowCache"];

  uint64_t v24 = (__int16)self->_has;
  if ((v24 & 0x200) != 0) {
    goto LABEL_47;
  }
LABEL_43:
  if ((v24 & 0x20) != 0) {
    goto LABEL_48;
  }
LABEL_52:
  oldPeerID = self->_oldPeerID;
  if (oldPeerID) {
    [v4 setObject:oldPeerID forKey:@"oldPeerID"];
  }
  return v4;
}

  _Block_object_dispose(&v48, 8);

  _Block_object_dispose(&v54, 8);
}

    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, v37, buf, 0xCu);
    goto LABEL_31;
  }

  uint64_t v24 = 0LL;
  if ((v12 & 8) == 0) {
    goto LABEL_10;
  }
LABEL_11:
  uint64_t v28 = sub_10010C560((uint64_t)@"genp", &qword_1002DEB28, (uint64_t)&unk_1002DEB20);
  if ((sub_10011865C( (uint64_t)Mutable,  0,  (const __CFBoolean *)@"com.apple.nanoregistry.migration",  0LL,  v28,  (__CFString **)&cf) & 1) == 0)
  {
    char v36 = (os_log_s *)sub_10001267C("SecError");
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_31;
    }
    *(_DWORD *)__int128 buf = 138412290;
    id v43 = cf;
    id v37 = "failed to collect com.apple.nanoregistry.migration-genp item: %@";
    goto LABEL_30;
  }

  CFDataRef v29 = sub_10010C560((uint64_t)@"genp", &qword_1002DEB28, (uint64_t)&unk_1002DEB20);
  if ((sub_10011865C( (uint64_t)Mutable,  0,  (const __CFBoolean *)@"com.apple.nanoregistry.migration2",  0LL,  v29,  (__CFString **)&cf) & 1) == 0)
  {
    char v36 = (os_log_s *)sub_10001267C("SecError");
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_31;
    }
    *(_DWORD *)__int128 buf = 138412290;
    id v43 = cf;
    id v37 = "failed to collect com.apple.nanoregistry.migration2-genp item: %@";
    goto LABEL_30;
  }

  CFStringRef v30 = sub_10010C560((uint64_t)@"genp", &qword_1002DEB28, (uint64_t)&unk_1002DEB20);
  if ((sub_10011865C( (uint64_t)Mutable,  0,  (const __CFBoolean *)@"com.apple.bluetooth",  (const __CFBoolean *)@"BluetoothLESync",  v30,  (__CFString **)&cf) & 1) == 0)
  {
    char v36 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v43 = cf;
      id v37 = "failed to collect com.apple.bluetooth-genp item: %@";
      goto LABEL_30;
    }

              v5 += 20;
            }
          }

          id v8 = v4 + 20;
          id v7 = v4 + 20;
LABEL_33:
          if ((unint64_t)v7 < v6)
          {
            id v17 = v4 - v7;
            uint64_t v18 = v17 + 20;
            if (v8 != v7) {
              memmove(v8, v7, v17 + 20);
            }
            v8 += v18;
          }

          a1[1] = (char *)((v8 - *a1) / 0x14uLL);
        }
      }
    }
  }

  uint64_t v18 = key;
  if (key)
  {
    key = 0LL;
    CFRelease(v18);
  }

  uint64_t v19 = v30;
  if (v30)
  {
    CFStringRef v30 = 0LL;
    CFRelease(v19);
  }

  CFRange v20 = v29;
  if (v29)
  {
    CFDataRef v29 = 0LL;
    CFRelease(v20);
  }

  uint64_t v21 = cfa;
  if (cfa)
  {
    cfa = 0LL;
    CFRelease(v21);
  }

  uint64_t v22 = v31;
  if (v31)
  {
    CFDateRef v31 = 0LL;
    CFRelease(v22);
  }

  int v23 = v28;
  if (v28)
  {
    uint64_t v28 = 0LL;
    CFRelease(v23);
  }

  uint64_t v24 = *(void **)(a1 + 88);
  if (v24 && *v24)
  {
    unsigned int v25 = sub_10001267C("SecError");
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      signed int v27 = **(void **)(a1 + 88);
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v35 = cf;
      char v36 = 2112;
      id v37 = a3;
      uint64_t v38 = 2112;
      id v39 = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Peer message processing error for: %@ -> %@ (%@)",  buf,  0x20u);
    }
  }

LABEL_39:
  PBDataWriterWriteInt32Field(v5, self->_attemptedJoin, 7LL);
  if ((*(_WORD *)&self->_has & 8) != 0) {
LABEL_13:
  }
    PBDataWriterWriteInt32Field(v5, self->_cdpState, 8LL);
LABEL_14:
  syncingPolicy = self->_syncingPolicy;
  if (syncingPolicy) {
    PBDataWriterWriteDataField(v5, syncingPolicy, 11LL);
  }
  voucher = self->_voucher;
  if (voucher) {
    PBDataWriterWriteDataField(v5, voucher, 12LL);
  }
  voucherSignature = self->_voucherSignature;
  if (voucherSignature) {
    PBDataWriterWriteDataField(v5, voucherSignature, 13LL);
  }
  int v23 = 0u;
  uint64_t v24 = 0u;
  uint64_t v21 = 0u;
  uint64_t v22 = 0u;
  uint64_t v13 = self->_tlkSharesForVouchedIdentitys;
  uint64_t v14 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v13,  "countByEnumeratingWithState:objects:count:",  &v21,  v25,  16LL);
  if (v14)
  {
    uint64_t v15 = v14;
    id v16 = *(void *)v22;
    do
    {
      for (uint64_t i = 0LL; i != v15; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v16) {
          objc_enumerationMutation(v13);
        }
        PBDataWriterWriteDataField(v5, *(void *)(*((void *)&v21 + 1) + 8LL * (void)i), 14LL);
      }

      uint64_t v15 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v13,  "countByEnumeratingWithState:objects:count:",  &v21,  v25,  16LL);
    }

    while (v15);
  }

  secureElementIdentity = self->_secureElementIdentity;
  if (secureElementIdentity) {
    PBDataWriterWriteDataField(v5, secureElementIdentity, 15LL);
  }
  uint64_t v19 = (__int16)self->_has;
  if ((v19 & 0x80) != 0)
  {
    PBDataWriterWriteBOOLField(v5, self->_isInheritedAccount, 18LL);
    uint64_t v19 = (__int16)self->_has;
    if ((v19 & 0x100) == 0)
    {
LABEL_31:
      if ((v19 & 0x200) == 0) {
        goto LABEL_32;
      }
      goto LABEL_43;
    }
  }

  else if ((*(_WORD *)&self->_has & 0x100) == 0)
  {
    goto LABEL_31;
  }

  PBDataWriterWriteBOOLField(v5, self->_warmedEscrowCache, 19LL);
  uint64_t v19 = (__int16)self->_has;
  if ((v19 & 0x200) == 0)
  {
LABEL_32:
    if ((v19 & 0x20) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }

  self->_attemptedJoin = *((_DWORD *)v4 + 8);
  *(_WORD *)&self->_has |= 4u;
  if ((*((_WORD *)v4 + 62) & 8) != 0)
  {
LABEL_13:
    self->_cdpState = *((_DWORD *)v4 + 9);
    *(_WORD *)&self->_has |= 8u;
  }

  if (*(void *)(a2 + 224))
  {
    if (*(__CFString ***)a2 == &off_10028B168
      || (uint64_t v24 = *(__CFString ***)a2,
          v24 == (__CFString **)sub_10010C560((uint64_t)@"cert", &qword_1002DEB48, (uint64_t)&unk_1002DEB40)))
    {
      if (!v10)
      {
        int v10 = sub_1001124D4(*(__CFString ***)a2, theDict);
        if (!v10) {
          return 0LL;
        }
      }

      unsigned int v25 = CFBooleanGetValue(*(CFBooleanRef *)(a2 + 224));
      values[0] = v10;
      if (v25)
      {
        uint64_t v26 = CFArrayCreate(0LL, (const void **)values, 1LL, &kCFTypeArrayCallBacks);
        trust = 0LL;
        BasicX509 = SecPolicyCreateBasicX509();
        CFDataRef v29 = BasicX509
           && !SecTrustCreateWithCertificates(v26, BasicX509, &trust)
           && (BOOL result = -1431655766, !SecTrustEvaluate(trust, &result))
           && (result == kSecTrustResultUnspecified || result == kSecTrustResultProceed);
        if (trust) {
          CFRelease(trust);
        }
        if (BasicX509) {
          CFRelease(BasicX509);
        }
        if (v26) {
          CFRelease(v26);
        }
        if (!v29) {
          goto LABEL_108;
        }
      }
    }
  }

  if (*(void *)(a2 + 216))
  {
    if (*(__CFString ***)a2 == &off_10028B168
      || (CFStringRef v30 = *(__CFString ***)a2,
          v30 == (__CFString **)sub_10010C560((uint64_t)@"cert", &qword_1002DEB48, (uint64_t)&unk_1002DEB40)))
    {
      if (v10 || (int v10 = sub_1001124D4(*(__CFString ***)a2, theDict)) != 0LL)
      {
        CFDateRef v31 = *(const __CFString **)(a2 + 216);
        if (v31)
        {
          uint64_t v32 = CFGetTypeID(*(CFTypeRef *)(a2 + 216));
          if (v32 == CFStringGetTypeID())
          {
            values[0] = 0LL;
            if (!SecCertificateCopyEmailAddresses(v10, (CFArrayRef *)values))
            {
              if (values[0])
              {
                CFIndex Count = CFArrayGetCount((CFArrayRef)values[0]);
                if (Count >= 1)
                {
                  uint64_t v34 = Count;
                  uint64_t v35 = 0LL;
                  char v36 = 1;
                  do
                  {
                    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)values[0], v35);
                    if (ValueAtIndex && CFStringCompare(v31, ValueAtIndex, 1uLL) == kCFCompareEqualTo) {
                      break;
                    }
                    char v36 = ++v35 < v34;
                  }

                  while (v34 != v35);
                  if (values[0])
                  {
                    CFRelease(values[0]);
                    if (v36) {
                      goto LABEL_77;
                    }
                  }

                  else if (v36)
                  {
                    goto LABEL_77;
                  }

                  HasSuffix = 0LL;
LABEL_80:
                  if (!v10) {
                    return HasSuffix;
                  }
                  goto LABEL_109;
                }

                if (values[0]) {
                  CFRelease(values[0]);
                }
              }
            }
          }
        }
}
}

  CFTypeRef cf = 0LL;
  if (!sub_1001A93D0(v4, (uint64_t)@"unsynced", (uint64_t)v7, &cf))
  {
    uint64_t v21 = sub_10001267C("initial-sync");
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412546;
      *(void *)&uint8_t buf[4] = cf;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Failure saving new unsynced value: %@ value: %@",  buf,  0x16u);
    }
  }

  int v23 = cf;
  if (cf)
  {
    CFTypeRef cf = 0LL;
    CFRelease(v23);
  }

  if (v7) {
    CFRelease(v7);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v8) {
    CFRelease(v8);
  }
}

LABEL_43:
  PBDataWriterWriteBOOLField(v5, self->_warnedTooManyPeers, 20LL);
  if ((*(_WORD *)&self->_has & 0x20) != 0) {
LABEL_33:
  }
    PBDataWriterWriteInt32Field(v5, self->_sendingMetricsPermitted, 22LL);
LABEL_34:
  oldPeerID = self->_oldPeerID;
  if (oldPeerID) {
    PBDataWriterWriteStringField(v5, oldPeerID, 23LL);
  }
}

  self->_warnedTooManyPeers = *((_BYTE *)v4 + 122);
  *(_WORD *)&self->_has |= 0x200u;
  if ((*((_WORD *)v4 + 62) & 0x20) != 0)
  {
LABEL_33:
    self->_sendingMetricsPermitted = *((_DWORD *)v4 + 18);
    *(_WORD *)&self->_has |= 0x20u;
  }

  char v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "accountStateTracker", v60));
  [v52 setCDPCapableiCloudAccountStatus:1];

  int v53 = sub_10001267C("octagon-ckks");
  uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "Initializing CKKS views", buf, 2u);
  }

  uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained cuttlefishXPCWrapper]);
  uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained activeAccount]);
  uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deviceAdapter]);
  double v58 = (void *)objc_claimAutoreleasedReturnValue([v57 modelID]);
  v61[0] = _NSConcreteStackBlock;
  v61[1] = 3221225472LL;
  v61[2] = sub_1000C7A64;
  v61[3] = &unk_100285060;
  v61[4] = WeakRetained;
  objc_msgSend( v55,  "fetchCurrentPolicyWithSpecificUser:modelIDOverride:isInheritedAccount:reply:",  v56,  v58,  objc_msgSend(v6, "isInheritedAccount"),  v61);

  int v59 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained ckks]);
  [v59 beginCloudKitOperation];

  __int16 v12 = @"WaitingForCloudKitAccount";
LABEL_20:
  [v3 setNextState:v12];
}

  uint64_t v34 = (const void *)v54[3];
  if (v34) {
    CFRelease(v34);
  }
  uint64_t v35 = cf;
  if (cf)
  {
    CFTypeRef cf = 0LL;
    CFRelease(v35);
  }

  char v36 = v43;
  if (v43)
  {
    id v43 = 0LL;
    CFRelease(v36);
  }

  id v37 = *((unsigned __int8 *)v58 + 24);
  _Block_object_dispose(&v45, 8);
  _Block_object_dispose(&v49, 8);
  _Block_object_dispose(&v53, 8);
  unsigned int v25 = v37 != 0;
LABEL_50:
  _Block_object_dispose(&v57, 8);
  return v25;
}

    uint64_t v13 = 0;
    goto LABEL_44;
  }

  signed int v27 = 0LL;
  if ((*(_WORD *)&v5 & 0x8000) != 0)
  {
LABEL_32:
    uint64_t v26 = 2654435761u * self->_timestampTcpEnd;
    if ((*(_WORD *)&v5 & 0x4000) != 0) {
      goto LABEL_33;
    }
    goto LABEL_45;
  }

    uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
    [WeakRetained setNextState:v51];

    CFRange v20 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
    [WeakRetained runBeforeGroupFinished:v20];
    goto LABEL_44;
  }

  CFDataRef v29 = v28;
  if (v10)
  {
    char v52 = [v10 value];
    CFStringRef v30 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained settings]);
    CFDateRef v31 = v9;
    uint64_t v32 = v10;
    CFTypeRef v33 = v6;
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v30 webAccess]);
    uint64_t v35 = [v34 enabled];

    uint64_t v6 = v33;
    int v10 = v32;
    id v9 = v31;

    if (v52 == v35)
    {
      if (!v20) {
        goto LABEL_43;
      }
      goto LABEL_25;
    }
  }

  else
  {
  }

  int v53 = v9;
  id v37 = v10;
  uint64_t v38 = sub_10001267C("SecError");
  id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained settings]);
    id v41 = (void *)objc_claimAutoreleasedReturnValue([v40 webAccess]);
    uint64_t v42 = v6;
    else {
      id v43 = @"OFF";
    }
    __int16 v44 = [v37 value];
    *(_DWORD *)__int128 buf = 138412802;
    if (v44) {
      char v45 = @"ON";
    }
    else {
      char v45 = @"OFF";
    }
    uint64_t v55 = v43;
    uint64_t v6 = v42;
    uint64_t v56 = 2112;
    uint64_t v57 = v45;
    double v58 = 2112;
    int v59 = v42;
    _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "octagon: Error setting web access: Intended value: %@, final value: %@, error: %@",  buf,  0x20u);
  }

  uint64_t v46 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:underlying:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:underlying:",  @"com.apple.security.octagon",  52LL,  @"Failed to set web access setting",  v6));
  char v36 = (void *)v46;
  if (!v20 || !v46)
  {
    int v10 = v37;
    if (v20)
    {
      id v9 = v53;
      goto LABEL_40;
    }

    id v9 = v53;
    if (v46)
    {
      [WeakRetained setError:v46];
      uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
      [WeakRetained runBeforeGroupFinished:v50];

      CFRange v20 = v36;
      goto LABEL_44;
    }

    goto LABEL_43;
  }

  uint64_t v47 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:underlying:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:underlying:",  @"com.apple.security.octagon",  51LL,  @"Failed to set walrus setting",  v46));

  [WeakRetained setError:v47];
  uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
  [WeakRetained runBeforeGroupFinished:v48];

  CFRange v20 = (void *)v47;
  int v10 = v37;
  id v9 = v53;
LABEL_44:
}

LABEL_36:
  *((_DWORD *)v4 + _Block_object_dispose((const void *)(v1 - 136), 8) = self->_attemptedJoin;
  *((_WORD *)v4 + 62) |= 4u;
  if ((*(_WORD *)&self->_has & 8) != 0)
  {
LABEL_13:
    *((_DWORD *)v4 + 9) = self->_cdpState;
    *((_WORD *)v4 + 62) |= 8u;
  }

            -[OctagonStateMachine _onqueuePokeStateMachine](self, "_onqueuePokeStateMachine");
            goto LABEL_38;
          }

          if ((v45 & 1) != 0) {
            goto LABEL_36;
          }
LABEL_37:
          int v10 = 0LL;
          goto LABEL_38;
        }

        goto LABEL_4;
      }
    }

    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(-[OctagonStateMachine name](self, "name"));
    uint64_t v22 = sub_10001253C((const __CFString *)+[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  v21,  @"pending-flag"));
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v22);

    if (os_log_type_enabled((os_log_t)v19, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = (void *)objc_claimAutoreleasedReturnValue([v13 flag]);
      *(_DWORD *)__int128 buf = 138412290;
      int v53 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v19,  OS_LOG_TYPE_DEFAULT,  "Delay has ended for pending flag %@",  buf,  0xCu);
    }

    goto LABEL_14;
  }

    uint64_t v18 = err;
    if (err)
    {
      CFRetain(err);
      uint64_t v19 = *(CFErrorRef **)(a1 + 48);
      if (v19 && !*v19) {
        *uint64_t v19 = v18;
      }
      else {
        CFRelease(v18);
      }
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v18 == 0LL;
    goto LABEL_50;
  }

  if (Code != -25308)
  {
    if (Code == -25299)
    {
      uint64_t v14 = (os_log_s *)sub_10001267C("upgr");
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
LABEL_46:
        uint64_t v22 = *(void *)(*(void *)(a1 + 40) + 8LL);
        goto LABEL_47;
      }

      *(_DWORD *)__int128 buf = 138477827;
      *(void *)&uint8_t buf[4] = a2;
      uint64_t v15 = "Ignoring duplicate item: %{private}@";
LABEL_33:
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v15, buf, 0xCu);
      goto LABEL_46;
    }

    goto LABEL_36;
  }

  LKAReportKeychainUpgradeOutcomeWithError(*(unsigned int *)(a1 + 72), *(unsigned int *)(a1 + 76), 2LL, 0LL);
  **(_BYTE **)(a1 + 64) = 1;
  *a3 = 1;
  uint64_t v22 = *(void *)(*(void *)(a1 + 40) + 8LL);
LABEL_47:
  *(_BYTE *)(v22 + 24) = 1;
LABEL_50:
  if (err) {
    CFRelease(err);
  }
LABEL_52:
  unsigned int v25 = *a3 || *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) == 0;
  *a3 = v25;
}

  if (*(void *)(a2 + 208))
  {
    if (*(__CFString ***)a2 == &off_10028B168
      || (int v23 = *(__CFString ***)a2,
          v23 == (__CFString **)sub_10010C560((uint64_t)@"cert", &qword_1002DEB48, (uint64_t)&unk_1002DEB40)))
    {
      if (!v10)
      {
        int v10 = sub_1001124D4(*(__CFString ***)a2, theDict);
        if (!v10) {
          return 0LL;
        }
      }

      uint64_t v40 = *(const __CFDate **)(a2 + 208);
      if (!v40) {
        goto LABEL_108;
      }
      double AbsoluteTime = CFDateGetAbsoluteTime(v40);
      uint64_t v42 = SecCertificateNotValidBefore(v10);
      SecCertificateNotValidAfter(v10);
      if (v42 == 0.0 || v43 == 0.0 || v42 == v43)
      {
        __int16 v44 = (os_log_s *)sub_10001267C("FilterWithDate");
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_108;
        }
        LOWORD(values[0]) = 0;
        char v45 = "certificate cannot operate";
      }

      else if (AbsoluteTime >= v42)
      {
        if (AbsoluteTime <= v43) {
          goto LABEL_39;
        }
        __int16 v44 = (os_log_s *)sub_10001267C("FilterWithDate");
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_108;
        }
        LOWORD(values[0]) = 0;
        char v45 = "certificate expired";
      }

      else
      {
        __int16 v44 = (os_log_s *)sub_10001267C("FilterWithDate");
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_108;
        }
        LOWORD(values[0]) = 0;
        char v45 = "certificate is not valid yet";
      }

      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, v45, (uint8_t *)values, 2u);
      goto LABEL_108;
    }
  }

      LOBYTE(v2syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 1;
LABEL_40:
      CFMutableArrayRef Mutable = v31;
      id v8 = v33;
      goto LABEL_41;
    }

    CFMutableArrayRef Mutable = v31;
    id v8 = v33;
    if (cf)
    {
      CFTypeRef cf = 0LL;
      CFRelease(v26);
    }

    LOBYTE(v2syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = sub_1000194E0(-25299, v11, @"Item is already shared with this group", v29);
LABEL_41:
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v20;
    if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
      goto LABEL_64;
    }
    int v23 = sub_100105888( (uint64_t)ValueAtIndex,  *(_DWORD *)(a1 + 96),  (__CFString **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
    if (v23)
    {
      uint64_t v24 = v23;
      if (!CFEqual(v23, kCFNull)) {
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL), v24);
      }
      CFRelease(v24);
      ++v8;
      continue;
    }

    break;
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
LABEL_64:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) != 0;
}

  if (!v148)
  {
    SOSCreateError(2LL, @"No device public key to work with", 0LL, v149);
    goto LABEL_270;
  }

  if (!v146)
  {
    SOSCreateError(1LL, @"No device private key to work with", 0LL, v149);
    goto LABEL_270;
  }

  if (!a4->var1 || !a4->var2 || !a4->var3 || !a4->var4)
  {
    SOSCreateError(5LL, @"You give rings a bad name", 0LL, v149);
    goto LABEL_270;
  }

  if (!-[SOSAccountTrustClassic checkForRings:](self, "checkForRings:", v149))
  {
LABEL_270:
    uint64_t Instance = 0LL;
    uint64_t v19 = 0;
    goto LABEL_230;
  }

  if (v15 != 1)
  {
    uint64_t Instance = 0LL;
    if (v23)
    {
      uint64_t v136 = 0LL;
      goto LABEL_54;
    }

LABEL_40:
  *((_BYTE *)v13 + 122) = self->_warnedTooManyPeers;
  *((_WORD *)v13 + 62) |= 0x200u;
  if ((*(_WORD *)&self->_has & 0x20) != 0)
  {
LABEL_30:
    *((_DWORD *)v13 + 1_Block_object_dispose((const void *)(v1 - 136), 8) = self->_sendingMetricsPermitted;
    *((_WORD *)v13 + 62) |= 0x20u;
  }

      signed int v27 = (char *)v27 + 1;
    }

    while (v25 != v27);
    unsigned int v25 = [v23 countByEnumeratingWithState:&v56 objects:v61 count:16];
    if (v25) {
      continue;
    }
    break;
  }

LABEL_41:
    uint64_t v38 = 0;
    goto LABEL_42;
  }

  if ((v37 & 1) == 0) {
    goto LABEL_37;
  }
LABEL_19:
  uint64_t v38 = 1;
LABEL_42:

  return v38;
}

        continue;
      }

      uint64_t v22 = [obj countByEnumeratingWithState:&v51 objects:v56 count:16];
      if (!v22)
      {
LABEL_43:

        id v9 = v48;
        int v10 = v45;
        goto LABEL_46;
      }
    }
  }

  uint64_t v18 = sub_1000AA6AC(@"ckks", 0LL);
  uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    CFRange v20 = (__CFString *)objc_claimAutoreleasedReturnValue([v15 error]);
    *(_DWORD *)__int128 buf = 138412290;
    double v58 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Error getting keyset: %@", buf, 0xCu);
  }

  uint64_t v46 = 0LL;
  if (a4) {
    *a4 = (id)objc_claimAutoreleasedReturnValue([v15 error]);
  }
LABEL_46:

LABEL_47:
  return v46;
}

      uint64_t v47 = v44;
      goto LABEL_41;
    }

    uint64_t v48 = (void *)*((void *)v164 + 5);
    if (!v48)
    {
      uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
      double v58 = (void *)objc_claimAutoreleasedReturnValue([v57 zoneName]);
      int v59 = sub_1000AA6AC(@"ckks", v58);
      __int16 v44 = (void *)objc_claimAutoreleasedReturnValue(v59);

      if (!os_log_type_enabled((os_log_t)v44, OS_LOG_TYPE_ERROR)) {
        goto LABEL_40;
      }
      uint64_t v60 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      *(_DWORD *)uint64_t v169 = 138412290;
      v170 = v60;
      uint64_t v61 = "Decided that no operation needs to occur for %@";
LABEL_39:
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v44, OS_LOG_TYPE_ERROR, v61, v169, 0xCu);
      goto LABEL_40;
    }

    uint64_t v49 = *(void **)(a1 + 48);
    if (v49)
    {
      uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      uint64_t v144 = 0LL;
      uint64_t v51 = [v49 judge:v48 at:v50 limitTime:&v144];
      char v52 = v144;

      if (v52)
      {
        [*((id *)v164 + 5) setWaitUntil:v52];
        v177[0] = @"ratelimit";
        int v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v51));
        v177[1] = @"accessgroup";
        v178[0] = v53;
        uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([*((id *)v164 + 5) accessgroup]);
        v178[1] = v54;
        uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v178,  v177,  2LL));
        sub_100018C10(@"CKKSSyncing", v55);
      }

      uint64_t v48 = (void *)*((void *)v164 + 5);
      uint64_t v34 = a1;
      id v37 = *(void *)(*(void *)(a1 + 56) + 8LL);
      uint64_t v56 = *(void **)(v37 + 40);
    }

    else
    {
      uint64_t v56 = 0LL;
    }

    int v62 = *(void *)(v34 + 88);
    obj = v56;
    objc_msgSend(v48, "saveToDatabaseWithConnection:error:", v62, &obj, v128);
    objc_storeStrong((id *)(v37 + 40), obj);
    int v63 = *(void **)(a1 + 32);
    if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL))
    {
      int v64 = (void *)objc_claimAutoreleasedReturnValue([v63 zoneID]);
      int v65 = (void *)objc_claimAutoreleasedReturnValue([v64 zoneName]);
      int v66 = sub_1000AA6AC(@"ckks", v65);
      __int16 v44 = (void *)objc_claimAutoreleasedReturnValue(v66);

      if (!os_log_type_enabled((os_log_t)v44, OS_LOG_TYPE_ERROR)) {
        goto LABEL_40;
      }
      v67 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      *(_DWORD *)uint64_t v169 = 138412290;
      v170 = v67;
      uint64_t v61 = "Couldn't save outgoing queue entry to database: %@";
      goto LABEL_39;
    }

    v70 = (void *)objc_claimAutoreleasedReturnValue([v63 zoneID]);
    unsigned int v71 = (void *)objc_claimAutoreleasedReturnValue([v70 zoneName]);
    int v72 = sub_1000AA6AC(@"ckks", v71);
    int v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);

    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
    {
      int v74 = (void *)*((void *)v164 + 5);
      *(_DWORD *)uint64_t v169 = 138412290;
      v170 = v74;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "Saved %@ to outgoing queue", v169, 0xCu);
    }

    int v75 = (void *)objc_claimAutoreleasedReturnValue([*((id *)v164 + 5) uuid]);
    v176[0] = @"reencrypt";
    v176[1] = @"error";
    uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v176, 2LL));
    int v77 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) operationDependencies]);
    v78 = (void *)objc_claimAutoreleasedReturnValue([v77 contextID]);
    uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    uint64_t v80 = *(void *)(*(void *)(a1 + 56) + 8LL);
    CFDataRef v142 = *(id *)(v80 + 40);
    uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSOutgoingQueueEntry allWithUUID:states:contextID:zoneID:error:]( &OBJC_CLASS___CKKSOutgoingQueueEntry,  "allWithUUID:states:contextID:zoneID:error:",  v75,  v76,  v78,  v79,  &v142));
    objc_storeStrong((id *)(v80 + 40), v142);

    if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL))
    {
      CFStringRef v82 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
      uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue([v82 zoneName]);
      char v84 = sub_1000AA6AC(@"ckks", v83);
      CFDataRef v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);

      if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
      {
        CFDataRef v86 = (void *)*((void *)v164 + 5);
        CFDataRef v87 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
        *(_DWORD *)uint64_t v169 = 138412546;
        v170 = v86;
        uint64_t v171 = 2112;
        uint64_t v172 = v87;
        _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_ERROR,  "Couldn't load OQE siblings for %@: %@",  v169,  0x16u);
      }
    }

    int v140 = 0u;
    CFDataRef v141 = 0u;
    v138 = 0u;
    v139 = 0u;
    BOOL v133 = v81;
    CFDataRef v88 = [v133 countByEnumeratingWithState:&v138 objects:v175 count:16];
    if (v88)
    {
      CFDataRef v89 = *(void *)v139;
      do
      {
        for (uint64_t i = 0LL; i != v88; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v139 != v89) {
            objc_enumerationMutation(v133);
          }
          v91 = *(void **)(*((void *)&v138 + 1) + 8LL * (void)i);
          uint64_t v137 = 0LL;
          [v91 deleteFromDatabase:&v137];
          v92 = v137;
          if (v92)
          {
            uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
            v94 = (void *)objc_claimAutoreleasedReturnValue([v93 zoneName]);
            BOOL v95 = sub_1000AA6AC(@"ckks", v94);
            BOOL v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);

            if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
            {
              CFDataRef v97 = (void *)objc_claimAutoreleasedReturnValue([*((id *)v164 + 5) uuid]);
              *(_DWORD *)uint64_t v169 = 138412802;
              v170 = v91;
              uint64_t v171 = 2112;
              uint64_t v172 = v97;
              CFDataRef v173 = 2112;
              v174 = v92;
              _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_ERROR,  "Couldn't delete OQE sibling(%@) for %@: %@",  v169,  0x20u);
            }
          }
        }

        CFDataRef v88 = [v133 countByEnumeratingWithState:&v138 objects:v175 count:16];
      }

      while (v88);
    }

    CFDataRef v98 = (void *)objc_claimAutoreleasedReturnValue([*((id *)v164 + 5) uuid]);
    v99 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) operationDependencies]);
    BOOL v100 = (void *)objc_claimAutoreleasedReturnValue([v99 contextID]);
    unsigned int v101 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    uint64_t v136 = 0LL;
    char v102 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSIncomingQueueEntry tryFromDatabase:contextID:zoneID:error:]( &OBJC_CLASS___CKKSIncomingQueueEntry,  "tryFromDatabase:contextID:zoneID:error:",  v98,  v100,  v101,  &v136));
    v103 = v136;

    if (v103)
    {
      v104 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
      v105 = (void *)objc_claimAutoreleasedReturnValue([v104 zoneName]);
      BOOL v106 = sub_1000AA6AC(@"ckks", v105);
      v107 = (os_log_s *)objc_claimAutoreleasedReturnValue(v106);

      if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
      {
        v108 = (void *)objc_claimAutoreleasedReturnValue([*((id *)v164 + 5) uuid]);
        v109 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
        *(_DWORD *)uint64_t v169 = 138412546;
        v170 = v108;
        uint64_t v171 = 2112;
        uint64_t v172 = v109;
        _os_log_impl( (void *)&_mh_execute_header,  v107,  OS_LOG_TYPE_ERROR,  "Couldn't find IQE matching %@: %@",  v169,  0x16u);
      }
    }

    else
    {
      if (!v102)
      {
        v103 = 0LL;
LABEL_76:
        v125 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSViewManager manager](&OBJC_CLASS___CKKSViewManager, "manager"));
        v126 = (void *)objc_claimAutoreleasedReturnValue([*((id *)v164 + 5) uuid]);
        uint64_t v127 = [v125 peekCallbackForUUID:v126];

        [*(id *)(a1 + 40) _onqueueProcessOutgoingQueue:v128 priorityRush:v127];
        uint64_t v47 = v133;
        goto LABEL_41;
      }

      CFDataRef v135 = 0LL;
      [v102 deleteFromDatabase:&v135];
      v103 = v135;
      xpc_object_t v115 = *(void **)(a1 + 32);
      if (v103)
      {
        uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue([v115 zoneID]);
        v117 = (void *)objc_claimAutoreleasedReturnValue([v116 zoneName]);
        v118 = sub_1000AA6AC(@"ckks", v117);
        v107 = (os_log_s *)objc_claimAutoreleasedReturnValue(v118);

        if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
        {
          v119 = (void *)objc_claimAutoreleasedReturnValue([*((id *)v164 + 5) uuid]);
          v120 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
          *(_DWORD *)uint64_t v169 = 138412546;
          v170 = v119;
          uint64_t v171 = 2112;
          uint64_t v172 = v120;
          _os_log_impl( (void *)&_mh_execute_header,  v107,  OS_LOG_TYPE_ERROR,  "Couldn't delete IQE matching %@: %@",  v169,  0x16u);
        }
      }

      else
      {
        uint64_t v121 = (void *)objc_claimAutoreleasedReturnValue([v115 zoneID]);
        uint64_t v122 = (void *)objc_claimAutoreleasedReturnValue([v121 zoneName]);
        uint64_t v123 = sub_1000AA6AC(@"ckks", v122);
        v107 = (os_log_s *)objc_claimAutoreleasedReturnValue(v123);

        if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
        {
          v124 = (void *)objc_claimAutoreleasedReturnValue([*((id *)v164 + 5) uuid]);
          *(_DWORD *)uint64_t v169 = 138412290;
          v170 = v124;
          _os_log_impl( (void *)&_mh_execute_header,  v107,  OS_LOG_TYPE_DEFAULT,  "Deleted IQE matching changed item %@",  v169,  0xCu);
        }

        v103 = 0LL;
      }
    }

    goto LABEL_76;
  }

  xpc_object_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) stateMachine]);
  [v2 _onqueueHandleFlag:@"dropped_items"];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 zoneName]);
  uint64_t v5 = sub_1000AA6AC(@"ckks", v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Dropping sync item modification due to CK account state; will scan to find changes later",
      buf,
      2u);
  }

  id v7 = *(const void **)(a1 + 64);
  if (!v7) {
    id v7 = *(const void **)(a1 + 72);
  }
  id v8 = sub_1000E705C(v7, (uint64_t)&off_1002905E8, 0LL);
  uint64_t v129 = (CKKSMemoryKeyCache *)objc_claimAutoreleasedReturnValue(v8);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSViewManager manager](&OBJC_CLASS___CKKSViewManager, "manager"));
  int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 claimCallbackForUUID:v129]);

  if (v10) {
    +[CKKSViewManager callSyncCallbackWithErrorNoAccount:]( &OBJC_CLASS___CKKSViewManager,  "callSyncCallbackWithErrorNoAccount:",  v10);
  }

LABEL_44:
  return 1LL;
}

  CFStringRef v30 = 0LL;
  if ((*(_WORD *)&v5 & 0x200) != 0)
  {
LABEL_29:
    CFDataRef v29 = 2654435761u * self->_timestampDnsStart;
    if ((*(_WORD *)&v5 & 0x100) != 0) {
      goto LABEL_30;
    }
    goto LABEL_42;
  }

LABEL_78:
    uint64_t v18 = 0;
    goto LABEL_79;
  }

  if ((*((_WORD *)v4 + 62) & 0x200) != 0) {
    goto LABEL_78;
  }
LABEL_71:
  if ((v15 & 0x20) != 0)
  {
    if ((v16 & 0x20) == 0 || self->_sendingMetricsPermitted != *((_DWORD *)v4 + 18)) {
      goto LABEL_78;
    }
  }

  else if ((v16 & 0x20) != 0)
  {
    goto LABEL_78;
  }

  oldPeerID = self->_oldPeerID;
  else {
    uint64_t v18 = 1;
  }
LABEL_79:

  return v18;
}
                    }
                  }

                  v105 = 0LL;
                  [v76 saveToDatabase:&v105];
                  char v90 = v105;
                  if (v90)
                  {
                    v91 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
                    v92 = (void *)objc_claimAutoreleasedReturnValue([v91 zoneName]);
                    uint64_t v93 = sub_1000AA6AC(@"ckks", v92);
                    v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);

                    if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
                    {
                      BOOL v95 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
                      *(_DWORD *)__int128 buf = 138412546;
                      *(void *)v119 = v95;
                      *(_WORD *)&v119[8] = 2112;
                      *(void *)&v119[10] = v90;
                      _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_ERROR,  "couldn't save zone creation status for %@: %@",  buf,  0x16u);
                    }
                  }

                  objc_msgSend( v101[4],  "setAllZoneCreationsSucceeded:",  v104 & objc_msgSend(v101[4], "allZoneCreationsSucceeded"));
                  objc_msgSend( v101[4],  "setAllZoneSubscriptionsSucceeded:",  v62 & objc_msgSend(v101[4], "allZoneSubscriptionsSucceeded"));

                  uint64_t v6 = v99;
                  goto LABEL_84;
                }

  uint64_t v19 = 0;
LABEL_79:
  uint64_t v5 = v69;
LABEL_24:

  return v19;
}

  char v45 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_timestampRequestStart));
  [v3 setObject:v45 forKey:@"timestamp_request_start"];

  uint64_t v19 = self->_has;
  if ((*(_WORD *)&v19 & 0x400) == 0)
  {
LABEL_41:
    if ((*(_WORD *)&v19 & 0x2000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_80;
  }

  PBDataWriterWriteUint64Field(v20, self->_timestampRequestStart, 209LL);
  uint64_t v14 = self->_has;
  if ((*(_WORD *)&v14 & 0x400) == 0)
  {
LABEL_41:
    if ((*(_WORD *)&v14 & 0x2000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_80;
  }

  v4[12] = self->_timestampRequestStart;
  *((_DWORD *)v4 + 70) |= 0x800u;
  id v7 = self->_has;
  if ((*(_WORD *)&v7 & 0x400) == 0)
  {
LABEL_41:
    if ((*(_WORD *)&v7 & 0x2000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_80;
  }

  self->_timestampDnsEnd = v5[9];
  *(_DWORD *)&self->_has |= 0x100u;
  int v10 = *((_DWORD *)v5 + 70);
  if ((v10 & 0x10000) == 0)
  {
LABEL_49:
    if ((v10 & 0x8000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_80;
  }

LABEL_34:
  if (*((void *)v4 + 6)) {
    -[OTAccountMetadataClassC setOldPeerID:](self, "setOldPeerID:");
  }
}

  if ((has & 1) != 0)
  {
    if ((v10 & 1) == 0 || self->_reportClientOperationFrequency != *((void *)v4 + 1)) {
      goto LABEL_43;
    }
  }

  else if ((v10 & 1) != 0)
  {
    goto LABEL_43;
  }

  uint64_t v13 = (v10 & 2) == 0;
  if ((has & 2) != 0)
  {
    if ((v10 & 2) == 0 || self->_reportClientOperationFrequencyBase != *((void *)v4 + 2)) {
      goto LABEL_43;
    }
    uint64_t v13 = 1;
  }

  self->_networkResponseBodyBytesReceived = v5[2];
  *(_DWORD *)&self->_has |= 2u;
  if ((v5[35] & 0x40000) != 0)
  {
LABEL_24:
    self->_networkPreviousAttemptCFIndex Count = *((_DWORD *)v5 + 46);
    *(_DWORD *)&self->_has |= 0x40000u;
  }

              CFRelease(v33);
              goto LABEL_35;
            }

        uint64_t v42 = theArray;
        id v43 = *(id *)(a1 + 32);
        __int16 v44 = sub_1001BE790((uint64_t)a2);
        char v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
        *(void *)&__int128 buf = _NSConcreteStackBlock;
        *((void *)&buf + 1) = 3221225472LL;
        int v74 = sub_1001BEDE8;
        int v75 = &unk_1002930F0;
        uint64_t v76 = v45;
        int v77 = v43;
        v78 = a2;
        uint64_t v46 = v45;
        uint64_t v47 = v43;
        -[__CFArray enumerateObjectsUsingBlock:](v42, "enumerateObjectsUsingBlock:", &buf);

        uint64_t v48 = *(void *)(*(void *)(a1 + 48) + 8LL);
        if (*(_BYTE *)(v48 + 24))
        {
          uint64_t v49 = [*(id *)(a1 + 32) SOSTransportMessageSendMessage:*(void *)(a1 + 32) id:*(void *)(a1 + 56) messageToSend:v19 err:*(void *)(a1 + 64)];
          uint64_t v48 = *(void *)(*(void *)(a1 + 48) + 8LL);
        }

        else
        {
          uint64_t v49 = 0;
        }

        *(_BYTE *)(v48 + 24) = v49;
        int v53 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
        uint64_t v54 = v13;

        [*(id *)(a1 + 32) SOSTransportMessageUpdateLastMessageSentTimetstamp:*(void *)(a1 + 40) peer:a2];
LABEL_43:

        CFRelease(v19);
        goto LABEL_44;
      }
    }

    else
    {
      dispatch_once(&qword_1002DEE78, &stru_100293080);
      if (v22) {
        goto LABEL_16;
      }
    }

    *((_BYTE *)v68 + 24) = 1;
    goto LABEL_25;
  }

  if (v60) {
    goto LABEL_34;
  }
  CFDateRef v31 = sub_10001267C("transport");
  uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    CFTypeRef v33 = *(void *)(a1 + 56);
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v33;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "no message to send to peer: %@",  (uint8_t *)&buf,  0xCu);
  }

LABEL_44:
  uint64_t v56 = theArray;
  if (theArray)
  {
    theArray = 0LL;
    CFRelease(v56);
  }

  *a6 = *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
}

void sub_10002D794(_Unwind_Exception *a1)
{
}

void sub_10002D944(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  BOOL v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  int v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  __int128 v89 = 0u;
  __int128 v90 = 0u;
  __int128 v91 = 0u;
  __int128 v92 = 0u;
  id obj = *(id *)(a1 + 32);
  v70 = WeakRetained;
  id v66 = [obj countByEnumeratingWithState:&v89 objects:v100 count:16];
  if (v66)
  {
    uint64_t v65 = *(void *)v90;
    do
    {
      for (uint64_t i = 0LL; i != v66; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v90 != v65) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void **)(*((void *)&v89 + 1) + 8LL * (void)i);
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 error]);

        int v72 = v5;
        if (!v6)
        {
          __int128 v87 = 0u;
          __int128 v88 = 0u;
          __int128 v85 = 0u;
          __int128 v86 = 0u;
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 keysets]);
          id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 allKeys]);

          id v69 = v16;
          id v73 = [v16 countByEnumeratingWithState:&v85 objects:v99 count:16];
          if (!v73) {
            goto LABEL_51;
          }
          int v63 = i;
          uint64_t v71 = *(void *)v86;
          while (1)
          {
            uint64_t v17 = 0LL;
            do
            {
              if (*(void *)v86 != v71) {
                objc_enumerationMutation(v69);
              }
              uint64_t v74 = v17;
              uint64_t v18 = *(void *)(*((void *)&v85 + 1) + 8 * v17);
              uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v5 keysets]);
              CFRange v20 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:v18]);

              uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained viewFilter]);
              if (!v21)
              {
LABEL_29:
                id v80 = 0LL;
                uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v20 asKeychainBackedSet:&v80]);
                uint64_t v34 = (os_log_s *)v80;
                if (v35)
                {
                  char v36 = sub_10001267C("octagon-ckks");
                  id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
                  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)__int128 buf = 138412290;
                    *(void *)v94 = v20;
                    _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Have proposed keys: %@",  buf,  0xCu);
                  }

                  uint64_t v38 = v68;
                  id v39 = v35;
                  goto LABEL_37;
                }

                if (v20)
                {
                  uint64_t v40 = sub_10001267C("octagon-ckks");
                  id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
                  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)__int128 buf = 138412546;
                    *(void *)v94 = v20;
                    *(_WORD *)&v94[8] = 2112;
                    BOOL v95 = v34;
                    _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Unable to convert proposed keys: %@ %@",  buf,  0x16u);
                  }

                  uint64_t v38 = v67;
                  id v39 = v20;
LABEL_37:
                  [v38 addObject:v39];
                }

                __int128 v78 = 0u;
                __int128 v79 = 0u;
                __int128 v76 = 0u;
                __int128 v77 = 0u;
                uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v20 pendingTLKShares]);
                id v43 = [v42 countByEnumeratingWithState:&v76 objects:v97 count:16];
                if (v43)
                {
                  id v44 = v43;
                  uint64_t v45 = *(void *)v77;
                  do
                  {
                    for (j = 0LL; j != v44; j = (char *)j + 1)
                    {
                      if (*(void *)v77 != v45) {
                        objc_enumerationMutation(v42);
                      }
                      [v3 addObject:v47];
                    }

                    id v44 = [v42 countByEnumeratingWithState:&v76 objects:v97 count:16];
                  }

                  while (v44);
                }

                uint64_t v48 = sub_10001267C("octagon-ckks");
                uint64_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
                if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v20 pendingTLKShares]);
                  unsigned int v51 = [v50 count];
                  *(_DWORD *)__int128 buf = 67109120;
                  *(_DWORD *)v94 = v51;
                  _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "Have %u pending tlk shares",  buf,  8u);
                }

                goto LABEL_48;
              }

              __int128 v83 = 0u;
              __int128 v84 = 0u;
              __int128 v81 = 0u;
              __int128 v82 = 0u;
              id v75 = (id)objc_claimAutoreleasedReturnValue([WeakRetained viewFilter]);
              id v22 = [v75 countByEnumeratingWithState:&v81 objects:v98 count:16];
              if (v22)
              {
                id v23 = v22;
                uint64_t v24 = *(void *)v82;
                while (2)
                {
                  for (k = 0LL; k != v23; k = (char *)k + 1)
                  {
                    if (*(void *)v82 != v24) {
                      objc_enumerationMutation(v75);
                    }
                    uint64_t v26 = *(void **)(*((void *)&v81 + 1) + 8LL * (void)k);
                    signed int v27 = v20;
                    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v20 zoneID]);
                    CFDataRef v29 = (void *)objc_claimAutoreleasedReturnValue([v28 zoneName]);
                    CFStringRef v30 = (void *)objc_claimAutoreleasedReturnValue([v26 zoneID]);
                    CFDateRef v31 = (void *)objc_claimAutoreleasedReturnValue([v30 zoneName]);
                    unsigned __int8 v32 = [v29 isEqualToString:v31];

                    if ((v32 & 1) != 0)
                    {

                      CFRange v20 = v27;
                      goto LABEL_29;
                    }

                    CFRange v20 = v27;
                  }

                  id v23 = [v75 countByEnumeratingWithState:&v81 objects:v98 count:16];
                  if (v23) {
                    continue;
                  }
                  break;
                }
              }

              CFTypeRef v33 = sub_10001267C("octagon-ckks");
              uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
              if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 138412290;
                *(void *)v94 = v20;
                _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Skipping keys: %@", buf, 0xCu);
              }

LABEL_48:
              id WeakRetained = v70;
              uint64_t v17 = v74 + 1;
              uint64_t v5 = v72;
            }

            while ((id)(v74 + 1) != v73);
            id v73 = [v69 countByEnumeratingWithState:&v85 objects:v99 count:16];
            if (!v73)
            {
              uint64_t i = v63;
LABEL_51:
              uint64_t v11 = v69;
LABEL_53:

              goto LABEL_54;
            }
          }
        }

        id v7 = sub_10001267C("octagon-ckks");
        id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 intendedZoneIDs]);
          int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5 error]);
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)v94 = v9;
          *(_WORD *)&v94[8] = 2112;
          BOOL v95 = v10;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "No keys for %@: %@", buf, 0x16u);
        }

        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v5 error]);
        __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 domain]);
        if (([v12 isEqualToString:@"CKKSResultOperationError"] & 1) == 0)
        {

          goto LABEL_53;
        }

        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v5 error]);
        id v14 = [v13 code];

        if (v14 == (id)3)
        {
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v5 intendedZoneIDs]);
          [v62 unionSet:v11];
          goto LABEL_53;
        }

          return;
        }

        int v62 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
        int v63 = (void *)objc_claimAutoreleasedReturnValue([v62 zoneName]);
        int v64 = sub_1000AA6AC(@"ckksincoming", v63);
        uint64_t v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);

        if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412803;
          __int128 v91 = v9;
          __int128 v92 = 2112;
          uint64_t v93 = Value;
          v94 = 2113;
          BOOL v95 = (const __CFString *)a2;
          _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEFAULT,  "UUID of olditem (%@) is higher than UUID of incoming item (%@), issuing deletion of olditem: %{private}@",  buf,  0x20u);
        }

        id v66 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) deps]);
        v67 = (void *)objc_claimAutoreleasedReturnValue([v66 contextID]);
        BOOL v68 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
        id v69 = *(void *)(a1 + 56);
        v70 = *(void *)(*(void *)(a1 + 72) + 8LL);
        __int128 v84 = *(id *)(v70 + 40);
        CFTypeRef v33 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSOutgoingQueueEntry withItem:action:contextID:zoneID:keyCache:error:]( &OBJC_CLASS___CKKSOutgoingQueueEntry,  "withItem:action:contextID:zoneID:keyCache:error:",  a2,  @"delete",  v67,  v68,  v69,  &v84));
        objc_storeStrong((id *)(v70 + 40), v84);

        uint64_t v71 = *(void *)(*(void *)(a1 + 72) + 8LL);
        __int128 v83 = *(id *)(v71 + 40);
        [v33 saveToDatabase:&v83];
        objc_storeStrong((id *)(v71 + 40), v83);
        [*(id *)(a1 + 48) setNewOutgoingEntries:1];
      }

      goto LABEL_34;
    }

    unsigned int v51 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    char v52 = (void *)objc_claimAutoreleasedReturnValue([v51 zoneName]);
    int v53 = sub_1000AA6AC(@"ckksincoming", v52);
    uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);

    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v55 = *(const void **)(a1 + 96);
      *(_DWORD *)__int128 buf = 138477827;
      __int128 v91 = v55;
      _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "Primary key conflict; dropping CK item (arriving from wrong view) %{private}@",
        buf,
        0xCu);
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v45 zoneName]);
    uint64_t v47 = sub_1000AA6AC(@"ckksincoming", v46);
    uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);

    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uuid]);
      *(_DWORD *)__int128 buf = 138412290;
      __int128 v91 = v49;
      _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "Replacing item (it doesn't have a UUID) for %@",  buf,  0xCu);
    }

    if (a3)
    {
      uint64_t v50 = *(const void **)(a1 + 96);
      if (v50) {
        CFRetain(v50);
      }
      *a3 = (uint64_t)v50;
    }
  }

      id v4 = 0LL;
      v237 = 1;
LABEL_64:

LABEL_65:
      objc_autoreleasePoolPop(context);
    }

    v253 = [obj countByEnumeratingWithState:&v293 objects:v311 count:16];
  }

  while (v253);

  if ((v237 & 1) != 0)
  {
    v130 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    v131 = (void *)objc_claimAutoreleasedReturnValue([v130 zoneName]);
    char v132 = sub_1000AA6AC(@"ckksoutgoing", v131);
    BOOL v133 = (os_log_s *)objc_claimAutoreleasedReturnValue(v132);

    if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_DEFAULT, "An item needs reencryption!", buf, 2u);
    }

    id obj = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
    v134 = (void *)objc_claimAutoreleasedReturnValue([obj flagHandler]);
    [v134 _onqueueHandleFlag:@"item_reencryption_needed"];

    CFDataRef v135 = 1LL;
LABEL_72:
  }

  else
  {
    CFDataRef v135 = 0LL;
  }

  if (-[NSMutableDictionary count](v255, "count") || -[NSMutableArray count](v240, "count"))
  {
    objc_msgSend(*(id *)(a1 + 40), "setItemsProcessed:", -[NSMutableDictionary count](v255, "count"));
    uint64_t v136 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    uint64_t v137 = (void *)objc_claimAutoreleasedReturnValue([v136 zoneName]);
    v138 = sub_1000AA6AC(@"ckksoutgoing", v137);
    v139 = (os_log_s *)objc_claimAutoreleasedReturnValue(v138);

    if (os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v244;
      _os_log_debug_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_DEBUG, "Current keys to update: %@", buf, 0xCu);
    }

    v283 = 0u;
    v284 = 0u;
    v281 = 0u;
    v282 = 0u;
    int v140 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allValues](v244, "allValues"));
    CFDataRef v141 = [v140 countByEnumeratingWithState:&v281 objects:v304 count:16];
    if (v141)
    {
      CFDataRef v142 = *(void *)v282;
      do
      {
        for (j = 0LL; j != v141; j = (char *)j + 1)
        {
          if (*(void *)v282 != v142) {
            objc_enumerationMutation(v140);
          }
          uint64_t v144 = *(void **)(*((void *)&v281 + 1) + 8LL * (void)j);
          uint64_t v145 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
          v146 = (void *)objc_claimAutoreleasedReturnValue([v144 CKRecordWithZoneID:v145]);

          BOOL v147 = (void *)objc_claimAutoreleasedReturnValue([v146 recordID]);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v255, "setObject:forKeyedSubscript:", v146, v147);
        }

        CFDataRef v141 = [v140 countByEnumeratingWithState:&v281 objects:v304 count:16];
      }

      while (v141);
    }

    BOOL v148 = *(void *)(a1 + 32);
    v149 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
    v150 = (void *)objc_claimAutoreleasedReturnValue([v149 accountStateTracker]);
    size_t v151 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
    v152 = (void *)objc_claimAutoreleasedReturnValue([v151 lockStateTracker]);
    v280 = 0LL;
    v243 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSDeviceStateEntry intransactionCreateDeviceStateForView:accountTracker:lockStateTracker:error:]( &OBJC_CLASS___CKKSDeviceStateEntry,  "intransactionCreateDeviceStateForView:accountTracker:lockStateTracker:error:",  v148,  v150,  v152,  &v280));
    obja = v280;

    v153 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    v241 = (void *)objc_claimAutoreleasedReturnValue([v243 CKRecordWithZoneID:v153]);

    if (obja)
    {
      v154 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
      unsigned int v155 = (void *)objc_claimAutoreleasedReturnValue([v154 zoneName]);
      CFStringRef v156 = sub_1000AA6AC(@"ckksoutgoing", v155);
      v157 = (os_log_s *)objc_claimAutoreleasedReturnValue(v156);

      if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = obja;
        char v158 = "Can't make current device state: %@";
        v159 = v157;
        v160 = 12;
        goto LABEL_88;
      }
    }

    else
    {
      int v161 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
      int v162 = (void *)objc_claimAutoreleasedReturnValue([v161 zoneName]);
      v163 = sub_1000AA6AC(@"ckksoutgoing", v162);
      v157 = (os_log_s *)objc_claimAutoreleasedReturnValue(v163);

      if (v241)
      {
        if (os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          *(void *)&uint8_t buf[4] = v243;
          _os_log_impl((void *)&_mh_execute_header, v157, OS_LOG_TYPE_DEFAULT, "Updating device state: %@", buf, 0xCu);
        }

        v157 = (os_log_s *)objc_claimAutoreleasedReturnValue([v241 recordID]);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v255, "setObject:forKeyedSubscript:", v241, v157);
      }

      else if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__int128 buf = 0;
        char v158 = "Can't make current device state cloudkit record, but no reason why";
        v159 = v157;
        v160 = 2;
LABEL_88:
        _os_log_impl((void *)&_mh_execute_header, v159, OS_LOG_TYPE_ERROR, v158, buf, v160);
      }
    }

    CFDataRef v178 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    CFDataRef v179 = (void *)objc_claimAutoreleasedReturnValue([v178 zoneName]);
    v180 = sub_1000AA6AC(@"ckksoutgoing", v179);
    v181 = (os_log_s *)objc_claimAutoreleasedReturnValue(v180);

    if (os_log_type_enabled(v181, OS_LOG_TYPE_DEBUG))
    {
      v231 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
      *(_DWORD *)__int128 buf = 138412546;
      *(void *)&uint8_t buf[4] = v255;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v231;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v181,  OS_LOG_TYPE_DEBUG,  "Saving records %@ to CloudKit zone %@",  buf,  0x16u);
    }

    BOOL v182 = objc_alloc(&OBJC_CLASS___AAFAnalyticsEventSecurity);
    v302[0] = kSecurityRTCFieldNeedsReencryption;
    v183 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v135));
    v303[0] = v183;
    v302[1] = v234;
    v184 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  (unint64_t)v235 > 0x63));
    v303[1] = v184;
    v185 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v303,  v302,  2LL));
    CFStringRef v186 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
    v187 = (void *)objc_claimAutoreleasedReturnValue([v186 activeAccount]);
    uint64_t v188 = (void *)objc_claimAutoreleasedReturnValue([v187 altDSID]);
    v189 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
    uint64_t v190 = [v189 sendMetric];
    v239 = -[AAFAnalyticsEventSecurity initWithCKKSMetrics:altDSID:eventName:testsAreEnabled:category:sendMetric:]( v182,  "initWithCKKSMetrics:altDSID:eventName:testsAreEnabled:category:sendMetric:",  v185,  v188,  kSecurityRTCEventNameUploadOQEsToCK,  0LL,  kSecurityRTCEventCategoryAccountDataAccessRecovery,  v190);

    v252 = objc_alloc_init(&OBJC_CLASS___NSBlockOperation);
    -[NSBlockOperation setName:](v252, "setName:", @"modifyRecordsComplete");
    [*(id *)(a1 + 40) dependOnBeforeGroupFinished:v252];
    BOOL v191 = objc_alloc(&OBJC_CLASS___CKModifyRecordsOperation);
    v192 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allValues](v255, "allValues"));
    v254 = -[CKModifyRecordsOperation initWithRecordsToSave:recordIDsToDelete:]( v191,  "initWithRecordsToSave:recordIDsToDelete:",  v192,  v240);

    -[CKModifyRecordsOperation setAtomic:](v254, "setAtomic:", 1LL);
    -[CKModifyRecordsOperation linearDependencies:](v254, "linearDependencies:", *(void *)(a1 + 56));
    CFDataRef v193 = (void *)objc_claimAutoreleasedReturnValue(-[CKModifyRecordsOperation configuration](v254, "configuration"));
    [v193 setIsCloudKitSupportOperation:1];

    -[CKModifyRecordsOperation setSavePolicy:](v254, "setSavePolicy:", 0LL);
    CFDataRef v194 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
    CFDataRef v195 = (void *)objc_claimAutoreleasedReturnValue([v194 currentOutgoingQueueOperationGroup]);
    -[CKModifyRecordsOperation setGroup:](v254, "setGroup:", v195);

    CFDataRef v196 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    char v197 = (void *)objc_claimAutoreleasedReturnValue([v196 zoneName]);
    int v198 = sub_1000AA6AC(@"ckksoutgoing", v197);
    CFTypeRef v199 = (os_log_s *)objc_claimAutoreleasedReturnValue(v198);

    if (os_log_type_enabled(v199, OS_LOG_TYPE_DEFAULT))
    {
      v200 = -[CKModifyRecordsOperation qualityOfService](v254, "qualityOfService");
      v201 = (void *)objc_claimAutoreleasedReturnValue(-[CKModifyRecordsOperation group](v254, "group"));
      *(_DWORD *)__int128 buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v200;
      *(_WORD *)&uint8_t buf[8] = 2112;
      *(void *)&buf[10] = v201;
      _os_log_impl((void *)&_mh_execute_header, v199, OS_LOG_TYPE_DEFAULT, "QoS: %d; operation group is %@", buf, 0x12u);
    }

    v202 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    v203 = (void *)objc_claimAutoreleasedReturnValue([v202 zoneName]);
    v204 = sub_1000AA6AC(@"ckksoutgoing", v203);
    CFTypeRef v205 = (os_log_s *)objc_claimAutoreleasedReturnValue(v204);

    if (os_log_type_enabled(v205, OS_LOG_TYPE_DEFAULT))
    {
      v206 = -[NSMutableDictionary count](v255, "count");
      CFTypeRef v207 = -[NSMutableArray count](v240, "count");
      *(_DWORD *)__int128 buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v206;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v207;
      _os_log_impl( (void *)&_mh_execute_header,  v205,  OS_LOG_TYPE_DEFAULT,  "Beginning upload for %d records, deleting %d records",  buf,  0xEu);
    }

    v278 = 0u;
    v279 = 0u;
    v276 = 0u;
    v277 = 0u;
    v208 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allKeys](v255, "allKeys"));
    v209 = [v208 countByEnumeratingWithState:&v276 objects:v301 count:16];
    if (v209)
    {
      v210 = *(void *)v277;
      do
      {
        for (k = 0LL; k != v209; k = (char *)k + 1)
        {
          if (*(void *)v277 != v210) {
            objc_enumerationMutation(v208);
          }
          v212 = *(void **)(*((void *)&v276 + 1) + 8LL * (void)k);
          CFDataRef v213 = (void *)objc_claimAutoreleasedReturnValue([v212 zoneID]);
          v214 = (void *)objc_claimAutoreleasedReturnValue([v213 zoneName]);
          v215 = sub_1000AA6AC(@"ckksoutgoing", v214);
          v216 = (os_log_s *)objc_claimAutoreleasedReturnValue(v215);

          if (os_log_type_enabled(v216, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 138412290;
            *(void *)&uint8_t buf[4] = v212;
            _os_log_debug_impl((void *)&_mh_execute_header, v216, OS_LOG_TYPE_DEBUG, "Record to save: %@", buf, 0xCu);
          }
        }

        v209 = [v208 countByEnumeratingWithState:&v276 objects:v301 count:16];
      }

      while (v209);
    }

    v274 = 0u;
    v275 = 0u;
    v272 = 0u;
    v273 = 0u;
    __int128 v217 = v240;
    __int128 v218 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v217,  "countByEnumeratingWithState:objects:count:",  &v272,  v300,  16LL);
    if (v218)
    {
      __int128 v219 = *(void *)v273;
      do
      {
        for (m = 0LL; m != v218; m = (char *)m + 1)
        {
          if (*(void *)v273 != v219) {
            objc_enumerationMutation(v217);
          }
          uint64_t v221 = *(void **)(*((void *)&v272 + 1) + 8LL * (void)m);
          uint64_t v222 = (void *)objc_claimAutoreleasedReturnValue([v221 zoneID]);
          v223 = (void *)objc_claimAutoreleasedReturnValue([v222 zoneName]);
          uint64_t v224 = sub_1000AA6AC(@"ckksoutgoing", v223);
          uint64_t v225 = (os_log_s *)objc_claimAutoreleasedReturnValue(v224);

          if (os_log_type_enabled(v225, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 138412290;
            *(void *)&uint8_t buf[4] = v221;
            _os_log_debug_impl((void *)&_mh_execute_header, v225, OS_LOG_TYPE_DEBUG, "Record to delete: %@", buf, 0xCu);
          }
        }

        __int128 v218 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v217,  "countByEnumeratingWithState:objects:count:",  &v272,  v300,  16LL);
      }

      while (v218);
    }

    *(void *)__int128 buf = 0LL;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x2020000000LL;
    LODWORD(v30_Block_object_dispose((const void *)(v1 - 136), 8) = 0;
    v270[0] = 0LL;
    v270[1] = v270;
    v270[2] = 0x2020000000LL;
    v271 = 0;
    v269[0] = _NSConcreteStackBlock;
    v269[1] = 3221225472LL;
    v269[2] = sub_10006A6B0;
    v269[3] = &unk_100284328;
    v269[4] = buf;
    v269[5] = v270;
    -[CKModifyRecordsOperation setPerRecordSaveBlock:](v254, "setPerRecordSaveBlock:", v269);
    v258[0] = _NSConcreteStackBlock;
    v258[1] = 3221225472LL;
    v258[2] = sub_10006A8B0;
    v258[3] = &unk_100284350;
    objc_copyWeak(&v267, (id *)(a1 + 64));
    v258[4] = *(void *)(a1 + 32);
    v268 = (unint64_t)v235 > 0x63;
    v259 = v255;
    v260 = v217;
    v261 = v247;
    v226 = v252;
    v262 = v226;
    int v227 = v239;
    v263 = v227;
    v264 = *(id *)(a1 + 48);
    v265 = v270;
    v266 = buf;
    -[CKModifyRecordsOperation setModifyRecordsCompletionBlock:](v254, "setModifyRecordsCompletionBlock:", v258);
    [*(id *)(a1 + 40) dependOnBeforeGroupFinished:v254];
    v228 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
    v229 = (void *)objc_claimAutoreleasedReturnValue([v228 ckdatabase]);
    [v229 addOperation:v254];

    objc_destroyWeak(&v267);
    _Block_object_dispose(v270, 8);
    _Block_object_dispose(buf, 8);
  }

  else
  {
    v164 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    v165 = (void *)objc_claimAutoreleasedReturnValue([v164 zoneName]);
    CFBooleanRef v166 = sub_1000AA6AC(@"ckksoutgoing", v165);
    v167 = (os_log_s *)objc_claimAutoreleasedReturnValue(v166);

    if (os_log_type_enabled(v167, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v167,  OS_LOG_TYPE_DEBUG,  "Nothing in outgoing queue to process",  buf,  2u);
    }

    v168 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
    uint64_t v169 = (void *)objc_claimAutoreleasedReturnValue([v168 currentOutgoingQueueOperationGroup]);

    if (v169)
    {
      v170 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
      uint64_t v171 = (void *)objc_claimAutoreleasedReturnValue([v170 zoneName]);
      uint64_t v172 = sub_1000AA6AC(@"ckksoutgoing", v171);
      CFDataRef v173 = (os_log_s *)objc_claimAutoreleasedReturnValue(v172);

      if (os_log_type_enabled(v173, OS_LOG_TYPE_DEBUG))
      {
        v232 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
        v233 = (void *)objc_claimAutoreleasedReturnValue([v232 currentOutgoingQueueOperationGroup]);
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = v233;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v173,  OS_LOG_TYPE_DEBUG,  "End of operation group: %@",  buf,  0xCu);
      }

      v174 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
      [v174 setCurrentOutgoingQueueOperationGroup:0];
    }

    uint64_t v175 = *(void **)(a1 + 48);
    v305[0] = kSecurityRTCFieldItemsToAdd;
    v305[1] = kSecurityRTCFieldItemsToDelete;
    v306[0] = &off_1002AD320;
    v306[1] = &off_1002AD320;
    v305[2] = kSecurityRTCFieldItemsToModify;
    v305[3] = kSecurityRTCFieldErrorItemsProcessed;
    v306[2] = &off_1002AD320;
    v306[3] = &off_1002AD320;
    v305[4] = kSecurityRTCFieldSuccessfulItemsProcessed;
    v306[4] = &off_1002AD320;
    v176 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v306,  v305,  5LL));
    [v175 addMetrics:v176];

    +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  *(void *)(a1 + 48),  1LL,  0LL);
    uint64_t v177 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) intendedState]);
    [*(id *)(a1 + 40) setNextState:v177];
  }

  uint64_t v24 = 1LL;
LABEL_128:

LABEL_129:
  return v24;
}

    goto LABEL_49;
  }

  id v14 = 0;
LABEL_38:

  return v14;
}

    uint64_t v11 = 0;
    goto LABEL_49;
  }

  uint64_t v26 = err;
  if (err)
  {
    CFErrorRef err = 0LL;
    CFRelease(v26);
  }

  if (v5) {
    CFRelease(v5);
  }
  signed int v27 = err;
  if (err)
  {
    CFErrorRef err = 0LL;
    CFRelease(v27);
  }

  uint64_t v28 = (__SecKey *)SOSFullPeerInfoCopyOctagonEncryptionKey(-[SOSAccountTrust fullPeerInfo](self, "fullPeerInfo"), &err);
  if (err && !-[SOSAccountTrustClassic isLockedError:](self, "isLockedError:"))
  {
    CFDataRef v29 = sub_10001267C("SecError");
    CFStringRef v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      int v62 = err;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "circleChange: Error fetching Octagon encryption key: %@",  buf,  0xCu);
    }
  }

  if (!v28)
  {
    if (!err) {
      goto LABEL_95;
    }
    uint64_t v35 = CFErrorGetDomain(err);
    if (v35 && kCFErrorDomainOSStatus)
    {
      if (!CFEqual(v35, kCFErrorDomainOSStatus))
      {
LABEL_72:
        char v36 = CFErrorGetDomain(err);
        if (kCFErrorDomainOSStatus && v36)
        {
          if (!CFEqual(v36, kCFErrorDomainOSStatus))
          {
LABEL_78:
            id v37 = CFErrorGetDomain(err);
            if (kCFErrorDomainOSStatus && v37)
            {
              if (!CFEqual(v37, kCFErrorDomainOSStatus)) {
                goto LABEL_95;
              }
            }

            else if (v37 != kCFErrorDomainOSStatus)
            {
              goto LABEL_95;
            }

            if (CFErrorGetCode(err) == -50) {
              goto LABEL_90;
            }
LABEL_95:
            if (!-[SOSAccountTrustClassic isLockedError:](self, "isLockedError:", err))
            {
              uint64_t v50 = sub_10001267C("SecError");
              unsigned int v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
              if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 138412290;
                int v62 = err;
                _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "error is too scary, not creating new Octagon encryption key: %@",  buf,  0xCu);
              }

              char v52 = (void *)objc_claimAutoreleasedReturnValue(+[SOSAnalytics logger](&OBJC_CLASS___SOSAnalytics, "logger"));
              [v52 logResultForEvent:@"SOSCheckOctagonEncryptionKey" hardFailure:1 result:err];
            }

            uint64_t v28 = 0LL;
            goto LABEL_111;
          }
        }

        else if (v36 != kCFErrorDomainOSStatus)
        {
          goto LABEL_78;
        }

        if (CFErrorGetCode(err) != -26275) {
          goto LABEL_78;
        }
LABEL_90:
        uint64_t v42 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Octagon Peer Encryption ID for %@",  SOSCircleGetName(-[SOSAccountTrust trustedCircle](self, "trustedCircle")));
        id v43 = objc_claimAutoreleasedReturnValue(v42);

        CFTypeRef cf = 0LL;
        id v44 = -[SOSAccountTrustClassic randomPermanentFullECKey:name:error:]( self,  "randomPermanentFullECKey:name:error:",  384LL,  v43,  &cf);
        uint64_t v28 = v44;
        if (cf || !v44)
        {
          int v53 = sub_10001267C("SecError");
          uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412290;
            int v62 = (void *)cf;
            _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "circleChange: Error creating Octagon encryption key: %@",  buf,  0xCu);
          }

          goto LABEL_108;
        }

        SOSFullPeerInfoUpdateOctagonEncryptionKey(-[SOSAccountTrust fullPeerInfo](self, "fullPeerInfo"), v44, &cf);
        if (cf)
        {
          uint64_t v45 = sub_10001267C("SecError");
          uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412290;
            int v62 = (void *)cf;
            uint64_t v47 = "circleChange: Error upgrading Octagon encryption key: %@";
            uint64_t v48 = v46;
            uint64_t v49 = 12;
LABEL_106:
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, v47, buf, v49);
          }
        }

        else
        {
          unsigned int v55 = sub_10001267C("circleChange");
          uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            uint64_t v47 = "Successfully created new Octagon encryption key";
            uint64_t v48 = v46;
            uint64_t v49 = 2;
            goto LABEL_106;
          }
        }

        uint64_t v19 = 1;
LABEL_108:

        uint64_t v56 = cf;
        if (cf)
        {
          CFTypeRef cf = 0LL;
          CFRelease(v56);
        }

        id v16 = (void *)v43;
        goto LABEL_111;
      }
    }

    else if (v35 != kCFErrorDomainOSStatus)
    {
      goto LABEL_72;
    }

    if (CFErrorGetCode(err) == -25300) {
      goto LABEL_90;
    }
    goto LABEL_72;
  }

  CFDateRef v31 = sub_10001267C("circleChange");
  unsigned __int8 v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Already have Octagon encryption key", buf, 2u);
  }

  cachedOctagonEncryptionKey = self->super._cachedOctagonEncryptionKey;
  if (cachedOctagonEncryptionKey)
  {
    self->super._cachedOctagonEncryptionKey = 0LL;
    CFRelease(cachedOctagonEncryptionKey);
  }

  uint64_t v34 = SecKeyCopyPublicKey(v28);
  self->super._cachedOctagonEncryptionKey = v34;
  sub_1001D3FF8((uint64_t)v34, kSOSInternalAccessGroup);
LABEL_111:
  unsigned int v57 = err;
  if (err)
  {
    CFErrorRef err = 0LL;
    CFRelease(v57);
  }

  if (v28) {
    CFRelease(v28);
  }
  if (v19)
  {
    v58[0] = _NSConcreteStackBlock;
    v58[1] = 3221225472LL;
    v58[2] = sub_1001DA464;
    v58[3] = &unk_100293E88;
    v58[4] = self;
    -[SOSAccountTrustClassic modifyCircle:err:action:](self, "modifyCircle:err:action:", v4, 0LL, v58);
  }

LABEL_118:
}

LABEL_54:
        ;
      }

      id v66 = [obj countByEnumeratingWithState:&v89 objects:v100 count:16];
    }

    while (v66);
  }

  [WeakRetained setViewKeySets:v68];
  [WeakRetained setIncompleteKeySets:v67];
  [WeakRetained setPendingTLKShares:v3];
  [WeakRetained setZonesTimedOutWithoutKeysets:v62];
  char v52 = sub_10001267C("octagon-ckks");
  int v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained viewKeySets]);
    unsigned int v55 = [v54 count];
    uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained incompleteKeySets]);
    unsigned int v57 = [v56 count];
    double v58 = (void *)objc_claimAutoreleasedReturnValue([v70 pendingTLKShares]);
    unsigned int v59 = [v58 count];
    uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([v70 zonesTimedOutWithoutKeysets]);
    unsigned int v61 = [v60 count];
    *(_DWORD *)__int128 buf = 67109888;
    *(_DWORD *)v94 = v55;
    *(_WORD *)&v94[4] = 1024;
    *(_DWORD *)&v94[6] = v57;
    id WeakRetained = v70;
    LOWORD(v95) = 1024;
    *(_DWORD *)((char *)&v95 + 2) = v59;
    HIWORD(v95) = 1024;
    unsigned int v96 = v61;
    _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "Fetched %d key sets, %d broken key sets, %d pendingTLKShares, and %d views timing out",  buf,  0x1Au);
  }
}

          goto LABEL_55;
        }
      }

      sub_1000194B4(1029LL, @"com.apple.security.cfder.error", 0LL, &cfa, v17, @"Extra data in SOS coder");
      goto LABEL_28;
    }

    uint64_t v5 = 0LL;
LABEL_55:
    CFRelease(v11);
    return v5;
  }

  return 1LL;
}

  v6[16] = self->_timestampTcpEnd;
  *((_DWORD *)v6 + 70) |= 0x8000u;
  unsigned int v25 = self->_has;
  if ((*(_WORD *)&v25 & 0x4000) == 0)
  {
LABEL_23:
    if ((*(_WORD *)&v25 & 0x800) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }

  uint64_t v38 = sub_1001D4F80();
  uint64_t Instance = _CFRuntimeCreateInstance(0LL, v38, 32LL, 0LL);
  *(void *)(Instance + 16) = CFDictionaryCreateMutableCopy(0LL, 0LL, a4->var1);
  *(void *)(Instance + 24) = CFDictionaryCreateMutableCopy(0LL, 0LL, a4->var2);
  *(void *)(Instance + 32) = CFDictionaryCreateMutableCopy(0LL, 0LL, a4->var3);
  *(void *)(Instance + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = CFDictionaryCreateMutableCopy(0LL, 0LL, a4->var4);
  id v39 = v150;
  if (v150)
  {
    uint64_t v137 = !sub_1001D65E8((uint64_t)v150, v148, 0LL);
  }

  else
  {
    CFRetain((CFTypeRef)Instance);
    uint64_t v137 = 1;
    id v39 = (__OpaqueSOSRing *)Instance;
  }

  sub_1001994C8(v39);
  sub_1001994C8((void *)Instance);
  v150 = v39;
  uint64_t v40 = sub_1001D5AEC(v39);
  id v41 = sub_1001D5AEC((void *)Instance);
  if (v40 > 5) {
    goto LABEL_90;
  }
  uint64_t v42 = v40;
  if ((unint64_t)v40 - 5 > 0xFFFFFFFFFFFFFFFCLL
    || v41 > 5
    || (unint64_t)v41 - 5 > 0xFFFFFFFFFFFFFFFCLL
    || v40 != v41)
  {
    goto LABEL_90;
  }

  id v43 = sub_10001267C("ring");
  id v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v45 = (uint64_t)*off_100292810[v42];
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v45;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "concordance trust (%s)", buf, 0xCu);
  }

  uint64_t v46 = sub_10001267C("ring");
  uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    *(void *)&uint8_t buf[4] = v150;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "    knownRing: %@", buf, 0xCu);
  }

  uint64_t v48 = sub_10001267C("ring");
  uint64_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    *(void *)&uint8_t buf[4] = Instance;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, " proposedRing: %@", buf, 0xCu);
  }

  uint64_t v50 = (const void *)SOSCopyIDOfKeyWithLength(a6, 8LL, 0LL);
  unsigned int v51 = (const void *)SOSCopyIDOfKeyWithLength(a6, 8LL, 0LL);
  if (cf1)
  {
    if (CFStringGetLength(cf1) > 8)
    {
      v164.location = 0LL;
      v164.CFIndex length = 8LL;
      char v52 = CFStringCreateWithSubstring(kCFAllocatorDefault, cf1, v164);
    }

    else
    {
      char v52 = CFStringCreateCopy(kCFAllocatorDefault, cf1);
    }

    int v53 = v52;
  }

  else
  {
    int v53 = 0LL;
  }

  uint64_t v54 = sub_10001267C("ring");
  unsigned int v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412802;
    *(void *)&uint8_t buf[4] = v50;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v51;
    *(_WORD *)&buf[22] = 2112;
    v160 = (const char *)v53;
    _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "knownkey: %@ userkey: %@ myPeerID: %@",  buf,  0x20u);
  }

  if (v50) {
    CFRelease(v50);
  }
  if (v51) {
    CFRelease(v51);
  }
  if (v53) {
    CFRelease(v53);
  }
  uint64_t v56 = off_100292810[v42][10];
  if (v56)
  {
    unsigned int v57 = @"Trusted";
    double v58 = 1;
    switch(((unsigned int (*)(__OpaqueSOSFullPeerInfo *, CFTypeRef, __OpaqueSOSRing *, uint64_t, __SecKey *, __SecKey *, const __CFString *, uint64_t *))v56)( v20,  v141,  v150,  Instance,  a6,  a6,  cf1,  v149))
    {
      case 0u:
        break;
      case 1u:
        if (v137) {
          double v58 = 5;
        }
        else {
          double v58 = 3;
        }
        unsigned int v57 = @"Generation Old";
        break;
      case 2u:
        if (v137) {
          double v58 = 0;
        }
        else {
          double v58 = 3;
        }
        unsigned int v57 = @"No User Signature";
        break;
      case 3u:
        char v132 = sub_10001267C("SecError");
        BOOL v133 = (os_log_s *)objc_claimAutoreleasedReturnValue(v132);
        if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v133,  OS_LOG_TYPE_DEFAULT,  "##### No User Public Key Available, this shouldn't ever happen!!!",  buf,  2u);
        }

        unsigned int v57 = @"No User Public Key Available";
        goto LABEL_93;
      case 4u:
        unsigned int v57 = @"No trusted peer left";
        goto LABEL_266;
      case 5u:
      case 6u:
        if (v137) {
          double v58 = 0;
        }
        else {
          double v58 = 3;
        }
        unsigned int v57 = @"Bad Signature";
        break;
      case 7u:
        v134 = sub_10001267C("signing");
        CFDataRef v135 = (os_log_s *)objc_claimAutoreleasedReturnValue(v134);
        if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v135,  OS_LOG_TYPE_DEFAULT,  "##### No trusted peer signature found, accepting hoping for concordance later",  buf,  2u);
        }

        double v58 = 0;
        unsigned int v57 = @"No trusted peer signature";
        break;
      case 9u:
        if (v137) {
          double v58 = 5;
        }
        else {
          double v58 = 3;
        }
        unsigned int v57 = @"Invalid Ring Membership";
        break;
      case 0xAu:
        unsigned int v57 = @"Incorrect membership for me";
        double v58 = 4;
        break;
      case 0xBu:
        unsigned int v57 = @"This peer shouldn't be in this ring since it isn't in view";
LABEL_266:
        double v58 = 2;
        break;
      default:
        goto LABEL_90;
    }
  }

  else
  {
LABEL_90:
    unsigned int v59 = sub_10001267C("SecError");
    uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "##### Bad Error Return from ConcordanceTrust",  buf,  2u);
    }

    unsigned int v57 = @"Bad Error Return from ConcordanceTrust";
LABEL_93:
    double v58 = 5;
  }

  unsigned int v61 = sub_10001267C("ring");
  int v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
  {
    int v63 = off_100292430[v58];
    *(_DWORD *)__int128 buf = 136315650;
    *(void *)&uint8_t buf[4] = v63;
    if (v137) {
      int v64 = "untrusted";
    }
    else {
      int v64 = "trusted";
    }
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v57;
    *(_WORD *)&buf[22] = 2080;
    v160 = v64;
    _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "Decided on action [%s] based on concordance state [%@] and [%s] ring.",  buf,  0x20u);
  }

  if (v58 == 5) {
    goto LABEL_57;
  }
  if (v58 == 2)
  {
    id v75 = 0LL;
LABEL_135:
    __int128 v82 = v145;
    goto LABEL_161;
  }

  uint64_t v65 = sub_1001D5DE0(Instance);
  if (!CFSetGetCount(v65))
  {
    v67 = sub_10001267C("ring");
    BOOL v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "changing state to accept - we have a reset ring",  buf,  2u);
    }

    double v58 = 0;
    if (!v65) {
      goto LABEL_112;
    }
LABEL_111:
    CFRelease(v65);
    goto LABEL_112;
  }

  id v66 = -[SOSAccountTrust trustedCircle](self, "trustedCircle");
  if (v15 == 1)
  {
    v154[0] = _NSConcreteStackBlock;
    v154[1] = 3221225472LL;
    v154[2] = sub_1001A50B0;
    v154[3] = &unk_100292FD0;
    v154[4] = cf;
    v154[5] = v144;
    SOSCircleForEachBackupCapablePeerForView(v66, a6, v136, v154);
  }

  else
  {
    v153[0] = _NSConcreteStackBlock;
    v153[1] = 3221225472LL;
    v153[2] = sub_1001A50F8;
    v153[3] = &unk_100292FD0;
    v153[4] = cf;
    v153[5] = v144;
    SOSCircleForEachValidSyncingPeer(v66, a6, v153);
  }

  if (CFEqual(cf, v65))
  {
    if (!v65) {
      goto LABEL_112;
    }
    goto LABEL_111;
  }

  __int128 v83 = sub_10001267C("ring");
  __int128 v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEFAULT,  "mismatch between filteredPeerIDs and ringPeerIDSet, fixing ring and gensigning",  buf,  2u);
  }

  __int128 v85 = sub_10001267C("ring");
  __int128 v86 = (os_log_s *)objc_claimAutoreleasedReturnValue(v85);
  if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    *(void *)&uint8_t buf[4] = cf;
    _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "filteredPeerIDs %@", buf, 0xCu);
  }

  __int128 v87 = sub_10001267C("ring");
  __int128 v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);
  if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    *(void *)&uint8_t buf[4] = v65;
    _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "  ringPeerIDSet %@", buf, 0xCu);
  }

  sub_1001D5D24(Instance, cf);
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(Instance + 32));
  double v58 = 1;
  if (v65) {
    goto LABEL_111;
  }
LABEL_112:
  if (v58 != 1)
  {
    id v75 = 0LL;
    goto LABEL_159;
  }

  id v69 = CFSetGetCount(cf) > 0 && v15 == 1;
  if (!v69 || !SOSPeerInfoHasBackupKey(v140))
  {
    id v75 = 0LL;
    goto LABEL_128;
  }

  v70 = sub_1001AC124(kCFAllocatorDefault, v152, 0LL);
  uint64_t v71 = (const void *)sub_1001ABF60((void *)Instance);
  if (!v71)
  {
    int v72 = sub_10001267C("ring");
    id v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "Backup ring contains no BSKB", buf, 2u);
    }
  }

  if ((SOSBSKBAllPeersBackupKeysAreInKeyBag(v71, v144) & 1) == 0)
  {
    xpc_object_t v111 = sub_10001267C("ring");
    BOOL v112 = (os_log_s *)objc_claimAutoreleasedReturnValue(v111);
    if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEFAULT, "BSKB is missing some backup keys", buf, 2u);
    }

    if ((SOSBSKBHasThisRecoveryKey(v71, v70) & 1) != 0) {
      goto LABEL_196;
    }
    goto LABEL_193;
  }

  if ((SOSBSKBHasThisRecoveryKey(v71, v70) & 1) == 0)
  {
LABEL_193:
    xpc_object_t v113 = sub_10001267C("ring");
    v114 = (os_log_s *)objc_claimAutoreleasedReturnValue(v113);
    if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEFAULT, "BSKB is missing recovery key", buf, 2u);
    }

    goto LABEL_196;
  }

  if (v71)
  {
    uint64_t v74 = 0;
    id v75 = 0LL;
    goto LABEL_211;
  }

    signed int v27 = err;
  }

  uint64_t v42 = sub_10001267C("SecError");
  id v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412802;
    uint64_t v46 = cf;
    uint64_t v47 = 2112;
    uint64_t v48 = a3;
    uint64_t v49 = 2112;
    uint64_t v50 = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "Error handling circle message %@ (%@): %@",  buf,  0x20u);
  }

  if (v27) {
    CFRelease(v27);
  }
}

void sub_10002E3F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10002E4E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = sub_10001267C("octagon");
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v7)
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 containerName]);
      int v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 contextID]);
      *(_DWORD *)__int128 buf = 138412802;
      id v21 = v9;
      __int16 v22 = 2112;
      id v23 = v11;
      __int16 v24 = 2112;
      id v25 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Unable to reset local cuttlefish for (%@,%@): %@",  buf,  0x20u);
    }

    [WeakRetained setError:v3];
  }

  else
  {
    if (v7)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Successfully reset local cuttlefish", buf, 2u);
    }

    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 stateHolder]);
    id v19 = 0LL;
    [v13 persistAccountChanges:&stru_1002838E0 error:&v19];
    id v14 = v19;

    uint64_t v15 = sub_10001267C("octagon");
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (v14)
    {
      if (v17)
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v21 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Error resetting local account state: %@",  buf,  0xCu);
      }
    }

    else
    {
      if (v17)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Successfully reset local account state",  buf,  2u);
      }

      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
      [WeakRetained setNextState:v16];
    }
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
  [WeakRetained runBeforeGroupFinished:v18];
}

OTAccountMetadataClassC *__cdecl sub_10002E770(id a1, OTAccountMetadataClassC *a2)
{
  uint64_t v2 = a2;
  -[OTAccountMetadataClassC setTrustState:](v2, "setTrustState:", 0LL);
  -[OTAccountMetadataClassC setPeerID:](v2, "setPeerID:", 0LL);
  -[OTAccountMetadataClassC setSyncingPolicy:](v2, "setSyncingPolicy:", 0LL);
  -[OTAccountMetadataClassC setVoucher:](v2, "setVoucher:", 0LL);
  -[OTAccountMetadataClassC setVoucherSignature:](v2, "setVoucherSignature:", 0LL);
  -[OTAccountMetadataClassC setTlkSharesForVouchedIdentitys:](v2, "setTlkSharesForVouchedIdentitys:", 0LL);
  -[OTAccountMetadataClassC setIsInheritedAccount:](v2, "setIsInheritedAccount:", 0LL);
  -[OTAccountMetadataClassC setWarmedEscrowCache:](v2, "setWarmedEscrowCache:", 0LL);
  -[OTAccountMetadataClassC setWarnedTooManyPeers:](v2, "setWarnedTooManyPeers:", 0LL);
  return v2;
}

void sub_10002F0CC(id a1)
{
  v3[0] = @"ready";
  v3[1] = @"error";
  v4[0] = &off_1002ACE28;
  v4[1] = &off_1002ACE40;
  v3[2] = @"initializing";
  v3[3] = @"initialized";
  void v4[2] = &off_1002ACE58;
  v4[3] = &off_1002ACE70;
  v3[4] = @"fetchcomplete";
  v3[5] = @"unhealthy";
  v4[4] = &off_1002ACE88;
  v4[5] = &off_1002ACEA0;
  v3[6] = @"needrefetch";
  v3[7] = @"fetching";
  void v4[6] = &off_1002ACEB8;
  v4[7] = &off_1002ACED0;
  v3[8] = @"resetzone";
  v3[9] = @"resetlocal";
  v4[8] = &off_1002ACEE8;
  v4[9] = &off_1002ACF00;
  v3[10] = @"loggedout";
  v3[11] = @"zonecreationfailed";
  v4[10] = &off_1002ACF18;
  v4[11] = &off_1002ACF30;
  v3[12] = @"waitfortrust";
  v3[13] = @"process_key_hierarchy";
  v4[12] = &off_1002ACF48;
  v4[13] = &off_1002ACF60;
  v3[14] = @"check_zone_hierarchies";
  v3[15] = @"become_ready";
  v4[14] = &off_1002ACF78;
  v4[15] = &off_1002ACF90;
  uint8_t v3[16] = @"lose_trust";
  v3[17] = @"tlkmissing";
  uint8_t v4[16] = &off_1002ACFA8;
  v4[17] = &off_1002ACFC0;
  v3[18] = @"wait_for_ck_account_status";
  v3[19] = @"begin_fetch";
  v4[18] = &off_1002ACFD8;
  v4[19] = &off_1002ACFF0;
  v3[20] = @"fixup_fetch_cip";
  v3[21] = @"fixup_fetch_tlkshares";
  v4[20] = &off_1002AD008;
  v4[21] = &off_1002AD020;
  v3[22] = @"fixup_local_reload";
  v3[23] = @"fixup_resave_cdse";
  v4[22] = &off_1002AD038;
  v4[23] = &off_1002AD050;
  v3[24] = @"fixup_delete_tombstones";
  v3[25] = @"heal_tlk_shares";
  v4[24] = &off_1002AD068;
  v4[25] = &off_1002AD080;
  v3[26] = @"healtlksharesfailed";
  v3[27] = @"provide_key_hieararchy";
  v4[26] = &off_1002AD098;
  v4[27] = &off_1002AD0B0;
  v3[28] = @"provide_key_hieararchy_untrusted";
  v3[29] = @"process_incoming_queue";
  v4[28] = &off_1002AD0C8;
  v4[29] = &off_1002AD0E0;
  v3[30] = @"class_a_incoming_items_remaining";
  v3[31] = @"scan_local_items";
  v4[30] = &off_1002AD0F8;
  v4[31] = &off_1002AD110;
  v3[32] = @"reencrypt_outgoing_items";
  v3[33] = @"process_outgoing_queue";
  v4[32] = &off_1002AD128;
  v4[33] = &off_1002AD140;
  v3[34] = @"process_outgoing_queue_failed";
  v3[35] = @"handle_all_views";
  v4[34] = &off_1002AD158;
  v4[35] = &off_1002AD170;
  v3[36] = @"zone_creation_failed_due_to_network_error";
  v3[37] = @"zone_deletion_failed_due_to_network_error";
  v4[36] = &off_1002AD188;
  v4[37] = &off_1002AD1A0;
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  38LL));
  uint64_t v2 = (void *)qword_1002DE828;
  qword_1002DE828 = v1;
}

void sub_10002F454(id a1)
{
  v4[0] = @"fetch_requested";
  v4[1] = @"key_process_requested";
  void v4[2] = @"trusted_peers_changed";
  v4[3] = @"dropped_items";
  v4[4] = @"ck_account_logged_in";
  v4[5] = @"ck_account_logged_out";
  void v4[6] = @"ck_zone_missing";
  v4[7] = @"ck_change_token_expired";
  v4[8] = @"process_incoming_queue";
  v4[9] = @"process_outgoing_queue";
  v4[10] = @"item_reencryption_needed";
  v4[11] = @"trusted_operation_begin";
  v4[12] = @"trusted_operation_end";
  v4[13] = @"device_unlocked";
  v4[14] = @"fetch_complete";
  v4[15] = @"24_hr_notification";
  uint8_t v4[16] = @"key_set";
  v4[17] = @"check_queues";
  v4[18] = @"policy_fresh";
  v4[19] = @"oqo_token";
  v4[20] = @"new_priority_views";
  v4[21] = @"zone_creation";
  v4[22] = @"zone_deletion";
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v4, 23LL));
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v1));
  id v3 = (void *)qword_1002DE838;
  qword_1002DE838 = v2;
}

void sub_100030014( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000300F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000301C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000302AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100030390( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000304F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000308F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_100030D60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100030EBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100031044( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100031208(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_100031218(uint64_t a1)
{
}

void sub_100031220(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) fromDatabaseRow:a2]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v4 memoizeOriginalSelfWhereClause]);
  [v2 addObject:v3];
}

void sub_10003127C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) fromDatabaseRow:a2]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v4 memoizeOriginalSelfWhereClause]);
  [v2 addObject:v3];
}

void sub_1000312D8(uint64_t a1, uint64_t a2)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) fromDatabaseRow:a2]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v6 memoizeOriginalSelfWhereClause]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v3;
}

BOOL sub_100031330(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0LL;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100031458;
  v8[3] = &unk_100283BB0;
  id v9 = *(id *)(a1 + 32);
  BOOL v3 = sub_100105354(a2, 5LL, &cf, (uint64_t)v8);
  if (cf)
  {
    id v4 = sub_1000AA6AC(@"ckkssql", 0LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      CFTypeRef v12 = cf;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "error performing database transaction, major problems ahead: %@",  buf,  0xCu);
    }

    CFTypeRef v6 = cf;
    if (cf)
    {
      CFTypeRef cf = 0LL;
      CFRelease(v6);
    }
  }

  return v3;
}

BOOL sub_100031458()
{
  uint64_t v1 = v0;
  *uint64_t v0 = 1;
  off_1002DE5D0();
  BOOL v3 = v2;
  _BYTE *v2 = v4;
  int v6 = (*(uint64_t (**)(void))(*(void *)(v5 + 32) + 16LL))();
  _BYTE *v3 = 0;
  *uint64_t v1 = 0;
  return v6 == 1;
}

uint64_t sub_1000314C4(uint64_t a1, uint64_t a2)
{
  char v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) quotedString:*(void *)(a1 + 32)]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) quotedString:*(void *)(a1 + 40)]);
  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  id v7 = *(id *)(a1 + 48);
  id v8 = [v7 countByEnumeratingWithState:&v30 objects:v34 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v31;
    do
    {
      uint64_t v11 = 0LL;
      do
      {
        if (*(void *)v31 != v10) {
          objc_enumerationMutation(v7);
        }
        CFTypeRef v12 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 80) quotedString:*(void *)(*((void *)&v30 + 1) + 8 * (void)v11)]);
        [v6 addObject:v12];

        uint64_t v11 = (char *)v11 + 1;
      }

      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v30 objects:v34 count:16];
    }

    while (v9);
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "componentsJoinedByString:", @", "));
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 stringByAppendingFormat:@", %@", v4]);

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSSQLDatabaseObject makeWhereClause:]( &OBJC_CLASS___CKKSSQLDatabaseObject,  "makeWhereClause:",  *(void *)(a1 + 56)));
  id v16 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"SELECT %@ FROM %@%@",  v14,  v5,  v15);
  uint64_t v17 = *(void *)(a1 + 80);
  uint64_t v18 = *(void *)(*(void *)(a1 + 72) + 8LL);
  v23[0] = _NSConcreteStackBlock;
  void v23[2] = sub_100031740;
  void v23[3] = &unk_100283B38;
  id v19 = (CFTypeRef *)(v18 + 24);
  v23[1] = 3221225472LL;
  uint64_t v28 = v17;
  id v20 = *(id *)(a1 + 56);
  uint64_t v21 = *(void *)(a1 + 72);
  id v24 = v20;
  uint64_t v27 = v21;
  uint64_t v29 = a2;
  id v25 = *(id *)(a1 + 48);
  id v26 = *(id *)(a1 + 64);
  sub_100015B70(a2, v16, v19, (uint64_t)v23);

  return 1LL;
}

void sub_100031740(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = (CFTypeRef *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100031808;
  v6[3] = &unk_100283B10;
  id v7 = *(id *)(a1 + 40);
  id v9 = a2;
  id v8 = *(id *)(a1 + 48);
  sub_100015CD8(v4, a2, v5, (uint64_t)v6);
}

void sub_100031808(void *a1)
{
  v5[0] = 0LL;
  v5[1] = v5;
  v5[2] = 0x3032000000LL;
  v5[3] = sub_100031208;
  void v5[4] = sub_100031218;
  int v6 = (NSMutableDictionary *)0xAAAAAAAAAAAAAAAALL;
  int v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v2 = (void *)a1[4];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1000318EC;
  v4[3] = &unk_100283AE8;
  uint64_t v3 = a1[6];
  v4[4] = v5;
  v4[5] = v3;
  [v2 enumerateObjectsUsingBlock:v4];
  (*(void (**)(void))(a1[5] + 16LL))();
  _Block_object_dispose(v5, 8);
}

void sub_1000318D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000318EC(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = *(sqlite3_stmt **)(a1 + 40);
  id v6 = a2;
  id v7 = sqlite3_column_text(v5, a3);
  id v8 = objc_alloc(&OBJC_CLASS___CKKSSQLResult);
  if (v7) {
    uint64_t v9 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v7));
  }
  else {
    uint64_t v9 = 0LL;
  }
  id v11 = (id)v9;
  id v10 = -[CKKSSQLResult init:](v8, "init:", v9);
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v10 forKeyedSubscript:v6];

  if (v7) {
}
  }

uint64_t sub_1000319BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "componentsJoinedByString:", @", "));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSSQLDatabaseObject makeWhereClause:]( &OBJC_CLASS___CKKSSQLDatabaseObject,  "makeWhereClause:",  *(void *)(a1 + 40)));
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSSQLDatabaseObject groupByClause:]( &OBJC_CLASS___CKKSSQLDatabaseObject,  "groupByClause:",  *(void *)(a1 + 48)));
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSSQLDatabaseObject orderByClause:]( &OBJC_CLASS___CKKSSQLDatabaseObject,  "orderByClause:",  *(void *)(a1 + 56)));
  else {
    id v8 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @" LIMIT %lu",  *(void *)(a1 + 88)));
  }
  uint64_t v9 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"SELECT %@ FROM %@%@%@%@%@;",
         v4,
         *(void *)(a1 + 64),
         v5,
         v6,
         v7,
         v8);
  id v10 = (CFTypeRef *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_100031B74;
  v14[3] = &unk_100283B38;
  uint64_t v19 = *(void *)(a1 + 96);
  id v11 = *(id *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 80);
  id v15 = v11;
  uint64_t v18 = v12;
  uint64_t v20 = a2;
  id v16 = *(id *)(a1 + 32);
  id v17 = *(id *)(a1 + 72);
  sub_100015B70(a2, v9, v10, (uint64_t)v14);

  return 1LL;
}

void sub_100031B74(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = (CFTypeRef *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100031C3C;
  v6[3] = &unk_100283B10;
  id v7 = *(id *)(a1 + 40);
  uint64_t v9 = a2;
  id v8 = *(id *)(a1 + 48);
  sub_100015CD8(v4, a2, v5, (uint64_t)v6);
}

void sub_100031C3C(void *a1)
{
  v5[0] = 0LL;
  v5[1] = v5;
  v5[2] = 0x3032000000LL;
  v5[3] = sub_100031208;
  void v5[4] = sub_100031218;
  id v6 = (NSMutableDictionary *)0xAAAAAAAAAAAAAAAALL;
  id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v2 = (void *)a1[4];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_100031D20;
  v4[3] = &unk_100283AE8;
  uint64_t v3 = a1[6];
  v4[4] = v5;
  v4[5] = v3;
  [v2 enumerateObjectsUsingBlock:v4];
  (*(void (**)(void))(a1[5] + 16LL))();
  _Block_object_dispose(v5, 8);
}

void sub_100031D08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100031D20(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = *(sqlite3_stmt **)(a1 + 40);
  id v6 = a2;
  id v7 = sqlite3_column_text(v5, a3);
  id v8 = objc_alloc(&OBJC_CLASS___CKKSSQLResult);
  if (v7) {
    uint64_t v9 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v7));
  }
  else {
    uint64_t v9 = 0LL;
  }
  id v11 = (id)v9;
  id v10 = -[CKKSSQLResult init:](v8, "init:", v9);
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v10 forKeyedSubscript:v6];

  if (v7) {
}
  }

uint64_t sub_100031DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSSQLDatabaseObject makeWhereClause:]( &OBJC_CLASS___CKKSSQLDatabaseObject,  "makeWhereClause:",  *(void *)(a1 + 32)));
  uint64_t v5 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"DELETE FROM %@%@;",
         *(void *)(a1 + 40),
         v4);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
  v12[0] = _NSConcreteStackBlock;
  int v12[2] = sub_100031EDC;
  v12[3] = &unk_100283A98;
  id v8 = (CFTypeRef *)(v7 + 24);
  v12[1] = 3221225472LL;
  uint64_t v15 = v6;
  id v9 = *(id *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 48);
  id v13 = v9;
  uint64_t v14 = v10;
  uint64_t v16 = a2;
  sub_100015B70(a2, v5, v8, (uint64_t)v12);

  return 1LL;
}

uint64_t sub_100031EDC(uint64_t a1, sqlite3_stmt *a2)
{
  return sub_100015CD8( *(void *)(a1 + 56),  a2,  (CFTypeRef *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL),  (uint64_t)&stru_100283A70);
}

void sub_100031F34(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v3]);
  uint64_t v6 = objc_opt_class(v4, v5);
  if (v6 == objc_opt_class(&OBJC_CLASS___CKKSSQLWhereValue, v7))
  {

    goto LABEL_15;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v3]);
  uint64_t v10 = objc_opt_class(v8, v9);
  uint64_t v12 = objc_opt_class(&OBJC_CLASS___CKKSSQLWhereNullOrValue, v11);

  if (v10 == v12)
  {
LABEL_15:
    id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v3]);
    __int128 v32 = *(sqlite3_stmt **)(a1 + 48);
    uint64_t v33 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    uint64_t v34 = (__CFString *)objc_claimAutoreleasedReturnValue([v26 value]);
    sub_1000182E4(v32, v33, v34, *(CFTypeRef **)(a1 + 56));

    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
LABEL_16:

    goto LABEL_17;
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v3]);
  uint64_t v15 = objc_opt_class(v13, v14);
  uint64_t v17 = objc_opt_class(&OBJC_CLASS___CKKSSQLWhereColumn, v16);

  if (v15 != v17)
  {
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v3]);
    uint64_t v20 = objc_opt_class(v18, v19);
    uint64_t v22 = objc_opt_class(&OBJC_CLASS___NSNull, v21);

    if (v20 != v22)
    {
      id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v3]);
      unsigned int v25 = objc_msgSend(v23, "isMemberOfClass:", objc_opt_class(CKKSSQLWhereIn, v24));

      if (!v25)
      {
        uint64_t v35 = *(sqlite3_stmt **)(a1 + 48);
        uint64_t v36 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
        id v37 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v3]);
        sub_1000182E4(v35, v36, v37, *(CFTypeRef **)(a1 + 56));

        ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
        goto LABEL_17;
      }

      id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v3]);
      __int128 v38 = 0u;
      __int128 v39 = 0u;
      __int128 v40 = 0u;
      __int128 v41 = 0u;
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "values", 0));
      id v28 = [v27 countByEnumeratingWithState:&v38 objects:v42 count:16];
      if (v28)
      {
        id v29 = v28;
        uint64_t v30 = *(void *)v39;
        do
        {
          __int128 v31 = 0LL;
          do
          {
            if (*(void *)v39 != v30) {
              objc_enumerationMutation(v27);
            }
            sub_1000182E4( *(sqlite3_stmt **)(a1 + 48),  *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL),  *(const __CFString **)(*((void *)&v38 + 1) + 8LL * (void)v31),  *(CFTypeRef **)(a1 + 56));
            ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
            __int128 v31 = (char *)v31 + 1;
          }

          while (v29 != v31);
          id v29 = [v27 countByEnumeratingWithState:&v38 objects:v42 count:16];
        }

        while (v29);
      }

      goto LABEL_16;
    }
  }

LABEL_17:
}
}

    uint64_t v18 = 1;
LABEL_23:
  }

  else
  {
    uint64_t v18 = 0;
  }

LABEL_25:
  return v18;
}

  unsigned int v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
  id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 contextID]);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
  v399 = 0LL;
  id v28 = +[CKKSIncomingQueueEntry allIQEsHaveValidUnwrappingKeysInContextID:zoneID:error:]( &OBJC_CLASS___CKKSIncomingQueueEntry,  "allIQEsHaveValidUnwrappingKeysInContextID:zoneID:error:",  v26,  v27,  &v399);
  v341 = v399;

  if (v341)
  {
    id v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v29 zoneName]);
    __int128 v31 = sub_1000AA6AC(@"ckksheal", v30);
    __int128 v32 = (void *)objc_claimAutoreleasedReturnValue(v31);

    if (!os_log_type_enabled((os_log_t)v32, OS_LOG_TYPE_ERROR))
    {
LABEL_21:

      goto LABEL_23;
    }

    *(_DWORD *)__int128 buf = 138412290;
    *(void *)&uint8_t buf[4] = v341;
    uint64_t v33 = "Unable to determine if all IQEs have parent keys: %@";
    uint64_t v34 = (os_log_s *)v32;
    uint64_t v35 = OS_LOG_TYPE_ERROR;
    uint64_t v36 = 12;
LABEL_20:
    _os_log_impl((void *)&_mh_execute_header, v34, v35, v33, buf, v36);
    goto LABEL_21;
  }

  if ((v28 & 1) == 0)
  {
    __int128 v78 = [*(id *)(a1 + 40) allowFullRefetchResult];
    __int128 v79 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    id v80 = (void *)objc_claimAutoreleasedReturnValue([v79 zoneName]);
    __int128 v81 = sub_1000AA6AC(@"ckksheal", v80);
    __int128 v32 = (void *)objc_claimAutoreleasedReturnValue(v81);

    __int128 v82 = os_log_type_enabled((os_log_t)v32, OS_LOG_TYPE_DEFAULT);
    if (v78)
    {
      if (v82)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v32,  OS_LOG_TYPE_DEFAULT,  "We have some item that encrypts to a non-existent key. This is exceptional; requesting full refetch",
          buf,
          2u);
      }

      __int128 v83 = *(void **)(a1 + 48);
      v420 = kSecurityRTCFieldFullRefetchNeeded;
      v421 = &__kCFBooleanTrue;
      __int128 v84 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v421,  &v420,  1LL));
      [v83 addMetrics:v84];

      [*(id *)(a1 + 32) setViewKeyHierarchyState:@"needrefetch"];
      v341 = 0LL;
      goto LABEL_55;
    }

    if (!v82) {
      goto LABEL_21;
    }
    *(_WORD *)__int128 buf = 0;
    uint64_t v33 = "We have some item that encrypts to a non-existent key, but we cannot request a refetch! Possible inifinite-loop ahead";
    uint64_t v34 = (os_log_s *)v32;
    uint64_t v35 = OS_LOG_TYPE_DEFAULT;
    uint64_t v36 = 2;
    goto LABEL_20;
  }

  a6 = v55;

LABEL_18:
  uint64_t v15 = -[CKKSCKRecordHolder initWithCKRecord:contextID:]( objc_alloc(&OBJC_CLASS___CKKSCurrentItemPointer),  "initWithCKRecord:contextID:",  v9,  v10);
  [(id)v15 setState:@"remote"];
  uint64_t v56 = 0LL;
  uint64_t v45 = [(id)v15 saveToDatabase:&v56];
  uint64_t v46 = v56;
  if (v45) {
    uint64_t v47 = v46 == 0LL;
  }
  else {
    uint64_t v47 = 0;
  }
  if (v47)
  {
    uint64_t v22 = 0LL;
LABEL_27:
    int v53 = 1;
    goto LABEL_29;
  }

  uint64_t v22 = v46;
  uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v9 recordID]);
  uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v48 zoneID]);
  uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v49 zoneName]);
  unsigned int v51 = sub_1000AA6AC(@"currentitem", v50);
  char v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);

  if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 138412802;
    uint64_t v60 = v15;
    unsigned int v61 = 2112;
    int v62 = (uint64_t)v22;
    int v63 = 2112;
    int v64 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_ERROR,  "Couldn't save current item pointer to database: %@: %@ %@",  buf,  0x20u);
  }

  if (a6)
  {
    uint64_t v22 = v22;
    int v53 = 0;
    *a6 = v22;
  }

  else
  {
    int v53 = 0;
  }
}

  uint64_t v15 = *(CFTypeRef *)(a1 + 24);
  if (v15 != a2)
  {
    if (!a2 || (CFRetain(a2), (uint64_t v15 = *(CFTypeRef *)(a1 + 24)) != 0LL)) {
      CFRelease(v15);
    }
    *(void *)(a1 + 24) = a2;
  }

  uint64_t v16 = *(const void **)(a1 + 96);
  if (v16) {
    CFRelease(v16);
  }
  *(void *)(a1 + 96) = Mutable;
  sub_1000CF5CC(a1, a3, a4, MutableCopy);
  uint64_t v17 = sub_10001267C("engine");
  uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = MutableCopy;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&buf, 0xCu);
  }

  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
}

  if (Mutable)
  {
    CFRelease(Mutable);
    return 0LL;
  }

  return Mutable;
}

    LOBYTE(v33) = 1;
LABEL_18:
    uint64_t v35 = sub_1000194E0(-50, (__CFString **)a9, @"ks_encrypt_data: invalid plain text");
    goto LABEL_19;
  }

  if (!a4) {
    goto LABEL_17;
  }
  __int128 v83 = v23;
  a4 = sub_100019F48((const __CFString *)a4, a9, v19, v20, v21);
  if (!a4) {
    goto LABEL_17;
  }
LABEL_12:
  CFDataRef theData = a1;
  __int128 v31 = CFGetTypeID(a4);
  CFTypeID TypeID = CFDataGetTypeID();
  LOBYTE(v33) = 0;
  if (!a2 || v31 != TypeID) {
    goto LABEL_18;
  }
  CFIndex Length = CFDataGetLength(a4);
  __int128 v88 = 16LL;
  __int128 v87 = 0;
  if (SecRandomCopyBytes(kSecRandomDefault, 0x20uLL, bytes))
  {
    uint64_t v35 = sub_1000194E0(-108, (__CFString **)a9, @"ks_encrypt_data: SecRandomCopyBytes failed");
    LOBYTE(v33) = 0;
LABEL_19:
    uint64_t v36 = 0LL;
    goto LABEL_20;
  }

  Protection = (const void *)SecAccessControlGetProtection(a2);
  __int128 v40 = sub_1000F1BF8(Protection, (__CFString **)a9);
  if (!(_DWORD)v40)
  {
    LOBYTE(v33) = 0;
    uint64_t v36 = 0LL;
LABEL_74:
    uint64_t v35 = 1LL;
    goto LABEL_20;
  }

  id v80 = Length;
  if (v22)
  {
    __int128 v79 = v40;
    __int128 v41 = (const void *)SecAccessControlGetConstraints(a2);
    uint64_t v42 = CFDictionaryCreateMutableCopy(0LL, 0LL, a5);
    CFDictionarySetValue(v42, @"acl", v41);
    uint64_t v36 = sub_100019F48((const __CFString *)v42, 0LL, v43, v44, v45);
    if (v42) {
      CFRelease(v42);
    }
    v94 = 0LL;
    BOOL v95 = 0LL;
    __int128 v92 = 0LL;
    uint64_t v93 = 0LL;
    uint64_t v46 = (const void *)SecAccessControlCopyData(a2);
    __int128 v91 = 0LL;
    if (a3 && (SecAccessControlIsBound(a2) & 1) != 0)
    {
      BytePtr = CFDataGetBytePtr(v36);
      uint64_t v47 = CFDataGetLength(v36);
      uint64_t v48 = CFDataGetBytePtr(a3);
      uint64_t v49 = CFDataGetLength(a3);
      sub_100003008(0LL, 0LL, (uint64_t)BytePtr, v47, (uint64_t)v48, v49, &v95, &v93);
      uint64_t v50 = sub_10000349C((int)theData, v79, 0, (uint64_t)v95, v93, &v91);
      if ((_DWORD)v50
        || (uint64_t v50 = sub_1000036C8((uint64_t)v91, (uint64_t)v95, v93, (uint64_t)bytes, 32LL, &v94, (size_t *)&v92), (_DWORD)v50))
      {
        sub_10011FEEC(v50, @"oe", (uint64_t)theData, v79, (uint64_t)v46, a3, (__CFString **)a9);
      }

      else
      {
        __int128 v90 = 0xAAAAAAAAAAAAAAAALL;
        unsigned int v51 = (const UInt8 *)sub_1000046C8((uint64_t *)v91, &v90);
        if (v51)
        {
          if (sub_10011F44C((UInt8 *)v94, v92, v51, v90, Mutable))
          {
            char v52 = 1;
LABEL_45:
            if (v91) {
              sub_100003848((uint64_t *)&v91);
            }
            if (v95) {
              free(v95);
            }
            if (v94) {
              free(v94);
            }
            if (v46) {
              CFRelease(v46);
            }
            if ((v52 & 1) != 0)
            {
              int v53 = CFDataGetLength(Mutable);
              uint64_t v54 = (const __CFString *)SecAccessControlGetProtection(a2);
              double v58 = sub_100019A68(v54, 0LL, v55, v56, v57);
              uint64_t v33 = CFDataCreateMutable(0LL, 0LL);
              CFDataSetLength(v33, v58);
              MutableBytePtr = CFDataGetMutableBytePtr(v33);
              uint64_t v60 = CFDataGetMutableBytePtr(v33);
              if (sub_100019C44(v54, 0LL, 0LL, MutableBytePtr, (unint64_t)&v60[v58]))
              {
                if (v33)
                {
                  theDataa = v33;
                  unsigned int v61 = CFDataGetLength(v33);
                  int v62 = v61 + 28LL;
                  CFIndex Length = v80;
                  goto LABEL_59;
                }
              }

              else
              {
                CFRelease(v33);
                LOBYTE(v33) = 0;
              }

              goto LABEL_74;
            }

            LOBYTE(v33) = 0;
LABEL_84:
            uint64_t v35 = 0LL;
LABEL_20:
            memset_s(bytes, 0x20uLL, 0, 0x20uLL);
            id v37 = 0LL;
            if (!Mutable) {
              goto LABEL_22;
            }
            goto LABEL_21;
          }

          sub_1000194E0( -26275,  (__CFString **)a9,  @"ks_crypt_acl: %x failed to '%s' item (class %d, bag: %d) Item can't be encrypted due to merge failed, so drop the item.",  0LL,  "encrypt",  v79,  theData);
        }

        else
        {
          sub_1000194E0( -26275,  (__CFString **)a9,  @"ks_crypt_acl: %x failed to '%s' item (class %d, bag: %d) Item can't be encrypted due to invalid key data, so drop the item.",  0LL,  "encrypt",  v79,  theData);
        }
      }
    }

    else
    {
      SecAccessControlIsBound(a2);
      sub_10011FC80((CFErrorRef *)a9, (uint64_t)v46);
    }

    char v52 = 0;
    goto LABEL_45;
  }

  if (!sub_10011F87C(@"oe", (uint64_t)theData, 0LL, v40, 0x20u, bytes, &v87, Mutable, a8, (__CFString **)a9))
  {
    LOBYTE(v33) = 0;
    uint64_t v36 = 0LL;
    goto LABEL_84;
  }

  int v53 = CFDataGetLength(Mutable);
  uint64_t v36 = 0LL;
  unsigned int v61 = 0;
  theDataa = 0LL;
  int v62 = 28LL;
LABEL_59:
  int v63 = v62 + Length + v53;
  int v64 = CFDataCreateMutable(0LL, v63);
  id v37 = v64;
  if (!v64)
  {
    uint64_t v35 = 1LL;
    goto LABEL_70;
  }

  uint64_t v65 = v53;
  CFDataSetLength(v64, v63);
  id v66 = CFDataGetMutableBytePtr(v37);
  v67 = v83 | 0x80000000;
  if (!a7) {
    v67 = v83;
  }
  *(_DWORD *)id v66 = v67;
  if (v22)
  {
    *((_DWORD *)v66 + 1) = v61;
    BOOL v68 = v66 + 8;
    v97.CFIndex length = v61;
    v97.location = 0LL;
    CFDataGetBytes(theDataa, v97, v66 + 8);
    id v69 = &v68[v61];
  }

  else
  {
    *((_DWORD *)v66 + 1) = v87;
    id v69 = v66 + 8;
  }

  *(_DWORD *)id v69 = v53;
  v70 = v69 + 4;
  if (a7)
  {
    uint64_t v71 = CFDataGetMutableBytePtr(v37);
    __int128 v85 = v70 - v71;
    int v72 = &unk_100205524;
    id v73 = 12LL;
  }

  else
  {
    uint64_t v71 = 0LL;
    __int128 v85 = 0LL;
    int v72 = 0LL;
    id v73 = 0LL;
  }

  uint64_t v74 = CFDataGetBytePtr(Mutable);
  memcpy(v70, v74, v65);
  id v75 = CFDataGetBytePtr(a4);
  __int128 v76 = CCCryptorGCM(0LL, 0LL, bytes, 32LL, v72, v73, v71, v85, v75, v80, &v70[v65], &v70[v65 + v80], &v88);
  if ((_DWORD)v76)
  {
    uint64_t v35 = sub_1000194E0(-26276, (__CFString **)a9, @"ks_encrypt_data: CCCryptorGCM failed: %d", v76);
LABEL_70:
    __int128 v77 = theDataa;
    goto LABEL_76;
  }

  __int128 v77 = theDataa;
  uint64_t v35 = v88 == 16
     || sub_1000194E0( -26276,  (__CFString **)a9,  @"ks_encrypt_data: CCCryptorGCM expected: 16 got: %ld byte tag",  v88);
LABEL_76:
  memset_s(bytes, 0x20uLL, 0, 0x20uLL);
  if (v77) {
    CFRelease(v77);
  }
  LOBYTE(v33) = 0;
  if (Mutable) {
LABEL_21:
  }
    CFRelease(Mutable);
LABEL_22:
  if (v35)
  {
    *__int128 v86 = v37;
  }

  else if (v37)
  {
    CFRelease(v37);
  }

  if (v36) {
    CFRelease(v36);
  }
  return v35;
}

  uint64_t v12 = sub_1000E714C(a2, 1, (__CFString **)&cf);
  id v13 = *(void *)(*(void *)(a1 + 40) + 8LL);
  if (*(_BYTE *)(v13 + 24)) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = 0;
  }
  *(_BYTE *)(v13 + 24) = v14;
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
    goto LABEL_38;
  }
  uint64_t v15 = (void *)sub_1000E6D50(*(void **)(a2 + 16), 7LL, *(__CFString ***)(a1 + 56));
  uint64_t v16 = sub_1000E7958(a2, v15, kCFNull, *(__CFString ***)(a1 + 56));
  uint64_t v17 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v18 = *(_BYTE *)(v17 + 24) ? v16 : 0;
  *(_BYTE *)(v17 + 24) = v18;
  if ((v18 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_25:
  uint64_t v19 = (const __CFString *)sub_1000E7EC0((void *)a2, kSecAttrAccessGroup);
  if (v19) {
    uint64_t v20 = kSecAttrAccessGroupToken == 0LL;
  }
  else {
    uint64_t v20 = 1;
  }
  if (v20)
  {
    if (v19 != kSecAttrAccessGroupToken) {
      goto LABEL_34;
    }
  }

  else if (!CFEqual(v19, kSecAttrAccessGroupToken))
  {
LABEL_34:
    uint64_t v22 = *(void *)(a1 + 64);
    *(void *)__int128 buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 0x40000000LL;
    *(void *)&uint8_t buf[16] = sub_1000EBBC4;
    uint64_t v35 = &unk_100285F88;
    uint64_t v36 = a2;
    id v37 = 0;
    if ((sub_1000EA178(a2, v22, (__CFString **)&cf, (uint64_t)buf) & 1) == 0)
    {
      id v23 = (os_log_s *)sub_10001267C("SecError");
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138478083;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = cf;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "item: %{private}@ insert during upgrade: %@",  buf,  0x16u);
      }

      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    }

    goto LABEL_38;
  }

  if (sub_1000E7EC0((void *)a2, kSecAttrTokenID)) {
    goto LABEL_34;
  }
  id v26 = (os_log_s *)sub_10001267C("upgr");
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138477827;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "dropping item during schema upgrade due to agrp=com.apple.token: %{private}@",  buf,  0xCu);
  }

          goto LABEL_18;
        }

  uint64_t v18 = error;
  if (error)
  {
    error = 0LL;
    CFRelease(v18);
  }

    if (!v3) {
      return;
    }
  }

  CFRelease(v3);
}

void sub_100032234(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  id v5 = a2;
  if (v4) {
    uint64_t v6 = @", ";
  }
  else {
    uint64_t v6 = @" ORDER BY ";
  }
  [v3 appendFormat:v6];
  [*(id *)(a1 + 32) appendFormat:@"%@", v5];

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
}

void sub_1000322BC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  id v5 = a2;
  if (v4) {
    uint64_t v6 = @", ";
  }
  else {
    uint64_t v6 = @" GROUP BY ";
  }
  [v3 appendFormat:v6];
  [*(id *)(a1 + 32) appendFormat:@"%@", v5];

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
}

void sub_100032344(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
    uint64_t v7 = @" AND ";
  }
  else {
    uint64_t v7 = @" WHERE ";
  }
  [*(id *)(a1 + 32) appendFormat:v7];
  uint64_t v9 = objc_opt_class(v6, v8);
  if (v9 == objc_opt_class(&OBJC_CLASS___CKKSSQLWhereValue, v10))
  {
    uint64_t v19 = *(void **)(a1 + 32);
    uint64_t v20 = (char *)[v6 sqlOp];
    else {
      uint64_t v21 = off_100283C20[(void)(v20 - 2)];
    }
    __int128 v38 = v5;
    __int128 v40 = v21;
    id v26 = @"%@%@(?)";
    goto LABEL_32;
  }

  uint64_t v12 = objc_opt_class(v6, v11);
  if (v12 == objc_opt_class(&OBJC_CLASS___CKKSSQLWhereColumn, v13))
  {
    id v22 = v6;
    id v23 = *(void **)(a1 + 32);
    unint64_t v24 = (unint64_t)[v22 sqlOp] - 2;
    if (v24 > 2) {
      unsigned int v25 = @"=";
    }
    else {
      unsigned int v25 = off_100283C20[v24];
    }
    id v36 = [v22 columnName];
    id v37 = @"parentKeyUUID";
    if (v36 == (id)1) {
      id v37 = @"uuid";
    }
    [v23 appendFormat:@"%@%@%@", v5, v25, v37];
LABEL_29:

    goto LABEL_33;
  }

  uint64_t v15 = objc_opt_class(v6, v14);
  if (v15 == objc_opt_class(&OBJC_CLASS___CKKSSQLWhereNullOrValue, v16))
  {
    uint64_t v19 = *(void **)(a1 + 32);
    uint64_t v27 = (char *)[v6 sqlOp];
    else {
      id v28 = off_100283C20[(void)(v27 - 2)];
    }
    __int128 v41 = v5;
    uint64_t v42 = v28;
    __int128 v38 = v5;
    __int128 v40 = v5;
    id v26 = @"(%@ is NULL OR (%@ IS NOT NULL AND %@%@(?)))";
LABEL_32:
    objc_msgSend(v19, "appendFormat:", v26, v38, v40, v41, v42);
    goto LABEL_33;
  }

  if (!objc_msgSend(v6, "isMemberOfClass:", objc_opt_class(NSNull, v17)))
  {
    if (!objc_msgSend(v6, "isMemberOfClass:", objc_opt_class(CKKSSQLWhereIn, v18)))
    {
      [*(id *)(a1 + 32) appendFormat:@"%@=(?)", v5, v39, v41, v42];
      goto LABEL_33;
    }

    id v22 = v6;
    id v29 = (void *)objc_claimAutoreleasedReturnValue([v22 values]);
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [v29 count]));

    __int128 v45 = 0u;
    __int128 v46 = 0u;
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v22 values]);
    __int128 v32 = (char *)[v31 countByEnumeratingWithState:&v43 objects:v47 count:16];
    if (v32)
    {
      uint64_t v33 = v32;
      uint64_t v34 = *(void *)v44;
      while (1)
      {
        if (*(void *)v44 != v34) {
          objc_enumerationMutation(v31);
        }
        [v30 addObject:@"?"];
        if (!--v33)
        {
          uint64_t v33 = (char *)[v31 countByEnumeratingWithState:&v43 objects:v47 count:16];
          if (!v33) {
            break;
          }
        }
      }
    }

    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "componentsJoinedByString:", @", "));
    [*(id *)(a1 + 32) appendFormat:@"%@ IN (%@)", v5, v35];

    goto LABEL_29;
  }

  [*(id *)(a1 + 32) appendFormat:@"%@ is NULL", v5, v39, v41, v42];
LABEL_33:
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
}

uint64_t sub_1000326C4(uint64_t a1, uint64_t a2)
{
  int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allKeys]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "componentsJoinedByString:", @", "));

  id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allKeys]);
  id v8 = [v7 count];

  if (v8)
  {
    unint64_t v9 = 0LL;
    do
    {
      if (v9) {
        uint64_t v10 = @",?";
      }
      else {
        uint64_t v10 = @"?";
      }
      -[NSMutableString appendString:](v6, "appendString:", v10);
      ++v9;
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allKeys]);
      id v12 = [v11 count];
    }

    while (v9 < (unint64_t)v12);
  }

  uint64_t v13 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"INSERT OR REPLACE into %@ (%@) VALUES (%@);",
          *(void *)(a1 + 40),
          v5,
          v6);
  uint64_t v14 = (CFTypeRef *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_100032850;
  v18[3] = &unk_1002839B0;
  id v15 = *(id *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 48);
  id v19 = v15;
  uint64_t v20 = v16;
  uint64_t v21 = a2;
  sub_100015B70(a2, v13, v14, (uint64_t)v18);

  return 1LL;
}

void sub_100032850(uint64_t a1, sqlite3_stmt *a2)
{
  int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allKeys]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100032900;
  v7[3] = &unk_100283948;
  uint64_t v10 = a2;
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v8 = v5;
  uint64_t v9 = v6;
  [v4 enumerateObjectsUsingBlock:v7];

  sub_100015CD8( *(void *)(a1 + 48),  a2,  (CFTypeRef *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL),  (uint64_t)&stru_100283988);
}

void sub_100032900(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = *(sqlite3_stmt **)(a1 + 48);
  uint64_t v5 = (a3 + 1);
  uint64_t v6 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:a2]);
  sub_1000182E4(v4, v5, v6, (CFTypeRef *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
}

BOOL sub_100033BDC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if ([a2 hasPrefix:@"G:"])
  {
    [*(id *)(a1 + 32) timeIntervalSinceDate:v5];
    BOOL v7 = v6 > 0.0;
  }

  else
  {
    BOOL v7 = 0LL;
  }

  return v7;
}

BOOL sub_100033C44(uint64_t a1)
{
  return v2 > (double)*(int *)(a1 + 40);
}

LABEL_42:
  uint64_t v13 = 0LL;
  uint64_t v20 = 0LL;
  id v19 = v54;
LABEL_50:

LABEL_7:
  return v13;
}

  double v6 = cf;
  if (cf)
  {
    CFTypeRef cf = 0LL;
    CFRelease(v6);
  }

  id v28 = 0LL;
  if ((*(_DWORD *)&v5 & 0x10000) != 0)
  {
LABEL_31:
    uint64_t v27 = 2654435761u * self->_timestampTcpStart;
    if ((*(_WORD *)&v5 & 0x8000) != 0) {
      goto LABEL_32;
    }
    goto LABEL_44;
  }

        unsigned int v25 = 0LL;
        if (!a7) {
          goto LABEL_8;
        }
        goto LABEL_43;
      }

      if (a7) {
        __int128 v41 = *a7;
      }
      else {
        __int128 v41 = 0LL;
      }
      SOSCreateError(1028LL, @"No applicant provided", v41, a7);
    }

    unint64_t v24 = 0LL;
    goto LABEL_42;
  }

  uint64_t v20 = v19;
  uint64_t v21 = sub_10001267C("circleOps");
  id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    id v23 = SOSCCGetStatusDescription(v20);
    *(_DWORD *)__int128 buf = 138412290;
    char v52 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Invalid circle status: %@ to accept piggyback as sponsor (SOSAccountCopyCircleJoiningBlob)",  buf,  0xCu);
  }

  unint64_t v24 = 0LL;
LABEL_7:

  unsigned int v25 = 0LL;
LABEL_8:

  return v25;
}

    uint64_t v13 = 0LL;
    goto LABEL_49;
  }

  id v26 = sub_10001267C("views");
  uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "No work to do", buf, 2u);
  }

  uint64_t v20 = 0;
LABEL_31:

  return v20;
}

    sub_1001A9ECC(a4, (__int128 *)v12);
LABEL_43:
    if (!v14) {
      goto LABEL_48;
    }
LABEL_44:
    id v5 = a2;
    if (v30)
    {
      double v6 = a1;
      unsigned int v25 = a1[1];
      uint64_t v9 = sub_1001AA2E8(*a1, v25, v9);
    }

    else
    {
      id v8 = sub_1001AA2E8(*(void *)a3, *(void *)(a3 + 8), v8);
      double v6 = a1;
      unsigned int v25 = a1[1];
    }
  }

  while (v9 < v25);
LABEL_52:
  sub_1001AA4E4(v7, v5, v9, v6, a4);
  return sub_1001AA4E4(v7, v5, v8, (uint64_t *)a3, a4);
}

void sub_100034E8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = sub_10001267C("escrowrequest");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v6 = [*(id *)(a1 + 32) numberOfRecordsUploaded];
    v7[0] = 67109378;
    v7[1] = v6;
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Uploaded %d records with error %@",  (uint8_t *)v7,  0x12u);
  }

  (*(void (**)(void, id, id))(*(void *)(a1 + 40) + 16))( *(void *)(a1 + 40),  [*(id *)(a1 + 32) numberOfRecordsUploaded],  v3);
}

void sub_1000350F8(_Unwind_Exception *a1)
{
}

void sub_100035418(uint64_t a1, uint64_t a2, void *a3)
{
  int v4 = sub_10001267C("octagon");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v7 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Notified that the device name has changed",  v7,  2u);
  }

  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([a3 deviceNameUpdateListeners]);
  [v6 iterateListeners:&stru_100283CA0];
}

void sub_1000354A8(id a1, OTDeviceInformationNameUpdateListener *a2)
{
}

void sub_1000354B0(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithCString:encoding:]( &OBJC_CLASS___NSString,  "stringWithCString:encoding:",  __b.machine,  4LL));
  double v2 = (void *)qword_1002DE848;
  qword_1002DE848 = v1;
}

void sub_100035B6C(_Unwind_Exception *a1)
{
}

void sub_100035F8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000360C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10003635C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100036CD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22)
{
}

uint64_t sub_100037020(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_100037030(uint64_t a1)
{
}

void sub_100037038(uint64_t a1)
{
  uint64_t v2 = objc_alloc(&OBJC_CLASS___CKKSCondition);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) octagonInformationInitialized]);
  id v4 = -[CKKSCondition initToChain:](v2, "initToChain:", v3);
  [*(id *)(a1 + 32) setOctagonInformationInitialized:v4];

  uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) octagonInformationInitialized]);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  BOOL v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v5;
}

void sub_1000370BC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v9 = a3;
  id v10 = a6;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10003719C;
  block[3] = &unk_100283D18;
  id v17 = v10;
  id v18 = WeakRetained;
  uint64_t v12 = *(void *)(a1 + 32);
  id v19 = v9;
  uint64_t v20 = v12;
  uint64_t v21 = a2;
  id v13 = v9;
  id v14 = v10;
  dispatch_sync(v11, block);
}

id sub_10003719C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = sub_1000AA6AC(@"ckksaccount", 0LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void **)(a1 + 32);
      int v14 = 138412290;
      id v15 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "error getting octagon status: %@",  (uint8_t *)&v14,  0xCu);
    }

    BOOL v7 = objc_alloc(&OBJC_CLASS___OTCliqueStatusWrapper);
    uint64_t v8 = -1LL;
  }

  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = OTCliqueStatusToString(*(void *)(a1 + 64));
      id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      uint64_t v11 = *(void *)(a1 + 48);
      int v14 = 138412546;
      id v15 = v10;
      __int16 v16 = 2112;
      uint64_t v17 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Caching octagon status as (%@, %@)",  (uint8_t *)&v14,  0x16u);
    }

    BOOL v7 = objc_alloc(&OBJC_CLASS___OTCliqueStatusWrapper);
    uint64_t v8 = *(void *)(a1 + 64);
  }

  uint64_t v12 = -[OTCliqueStatusWrapper initWithStatus:](v7, "initWithStatus:", v8);
  [*(id *)(a1 + 40) setOctagonStatus:v12];

  [*(id *)(a1 + 40) setOctagonPeerID:*(void *)(a1 + 48)];
  return [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) fulfill];
}

void sub_100037438(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ckChangeListeners]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 keyEnumerator]);

  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 nextObject]);
  if (v4)
  {
    uint64_t v6 = (dispatch_queue_s *)v4;
    *(void *)&__int128 v5 = 138412290LL;
    __int128 v13 = v5;
    do
    {
      BOOL v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ckChangeListeners", v13));
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:v6]);

      id v9 = sub_1000AA6AC(@"ckksaccountblock", 0LL);
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)location = v13;
        *(void *)&location[4] = v8;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Starting blocking for listener %@",  location,  0xCu);
      }

      *(void *)location = 0xAAAAAAAAAAAAAAAALL;
      objc_initWeak((id *)location, v8);
      uint64_t v11 = *(dispatch_group_s **)(a1 + 40);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100037610;
      block[3] = &unk_100291A38;
      objc_copyWeak(&v15, (id *)location);
      dispatch_group_async(v11, v6, block);
      objc_destroyWeak(&v15);
      objc_destroyWeak((id *)location);

      uint64_t v12 = objc_claimAutoreleasedReturnValue([v3 nextObject]);
      uint64_t v6 = (dispatch_queue_s *)v12;
    }

    while (v12);
  }
}

void sub_100037610(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = sub_1000AA6AC(@"ckksaccountblock", 0LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 138412290;
    id v5 = WeakRetained;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "Done blocking for listener %@",  (uint8_t *)&v4,  0xCu);
  }
}

void sub_1000376CC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) currentCKAccountInfo]);
  [WeakRetained cloudkitAccountStateChange:v2 to:v3];
}

uint64_t sub_100037724(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10003772C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  BOOL v7 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v9 = WeakRetained;
  if (WeakRetained)
  {
    id v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100037870;
    block[3] = &unk_100291A60;
    objc_copyWeak(&v16, v7);
    id v14 = v5;
    id v15 = v6;
    dispatch_async(v10, block);

    objc_destroyWeak(&v16);
  }

  else
  {
    id v11 = sub_1000AA6AC(@"ckks-sos", 0LL);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "Received fetchCirclePeerID callback with null AccountStateTracker",  buf,  2u);
    }
  }
}

void sub_100037870(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = objc_claimAutoreleasedReturnValue([WeakRetained currentCircleStatus]);
  if (v3
    && (int v4 = (void *)v3,
        id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained currentCircleStatus]),
        unsigned int v6 = [v5 status],
        v5,
        v4,
        !v6))
  {
    id v9 = sub_1000AA6AC(@"ckks-sos", 0LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      int v14 = 138412546;
      uint64_t v15 = v11;
      __int16 v16 = 2112;
      uint64_t v17 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Circle peerID is: %@ %@",  (uint8_t *)&v14,  0x16u);
    }

    [WeakRetained setAccountCirclePeerID:*(void *)(a1 + 32)];
    [WeakRetained setAccountCirclePeerIDError:*(void *)(a1 + 40)];
    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained accountCirclePeerIDInitialized]);
    [v13 fulfill];
  }

  else
  {
    id v7 = sub_1000AA6AC(@"ckks-sos", 0LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v14) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Out of circle but still received a fetchCirclePeerID callback",  (uint8_t *)&v14,  2u);
    }

    [WeakRetained setAccountCirclePeerID:0];
    [WeakRetained setAccountCirclePeerIDError:0];
  }
}

uint64_t sub_100037A1C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentCircleStatus]);
  if (!v2
    || (uint64_t v3 = (void *)v2,
        int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentCircleStatus]),
        unsigned __int8 v5 = [v4 isEqual:*(void *)(a1 + 40)],
        v4,
        v3,
        (v5 & 1) == 0))
  {
    id v6 = sub_1000AA6AC(@"ckks-sos", 0LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      int v12 = 138412290;
      uint64_t v13 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "moving to circle status: %@",  (uint8_t *)&v12,  0xCu);
    }

    [*(id *)(a1 + 32) setCurrentCircleStatus:*(void *)(a1 + 40)];
    if (![*(id *)(a1 + 40) status])
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
      id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v9 setDateProperty:v10 forKey:@"lastInCircle"];
    }

    [*(id *)(a1 + 32) _onqueueUpdateCirclePeerID:*(void *)(a1 + 40)];
  }

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_100037B78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v9 = WeakRetained;
  if (WeakRetained)
  {
    id v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100037CBC;
    block[3] = &unk_100291A60;
    objc_copyWeak(&v16, v7);
    id v14 = v5;
    id v15 = v6;
    dispatch_async(v10, block);

    objc_destroyWeak(&v16);
  }

  else
  {
    id v11 = sub_1000AA6AC(@"ckksaccount", 0LL);
    int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "Received fetchCurrentDeviceIDWithCompletionHandler callback with null AccountStateTracker",  buf,  2u);
    }
  }
}

void sub_100037CBC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained currentCKAccountInfo]);
  id v4 = [v3 accountStatus];

  id v5 = sub_1000AA6AC(@"ckksaccount", 0LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = v6;
  if (v4 == (id)1)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained container]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 options]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 accountOverrideInfo]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 altDSID]);
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(a1 + 40);
      int v15 = 138412802;
      id v16 = v11;
      __int16 v17 = 2112;
      uint64_t v18 = v12;
      __int16 v19 = 2112;
      uint64_t v20 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "CloudKit deviceID is(altDSID: %@): %@ %@",  (uint8_t *)&v15,  0x20u);
    }

    [WeakRetained setCkdeviceID:*(void *)(a1 + 32)];
    [WeakRetained setCkdeviceIDError:*(void *)(a1 + 40)];
    id v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained ckdeviceIDInitialized]);
    [v14 fulfill];
  }

  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v15) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Logged back out but still received a fetchCurrentDeviceIDWithCompletionHandler callback",  (uint8_t *)&v15,  2u);
    }

    [WeakRetained setCkdeviceID:0];
    [WeakRetained setCkdeviceIDError:0];
  }
}

void sub_100037E90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v8 = WeakRetained;
  if (v6)
  {
    id v9 = sub_1000AA6AC(@"ckksaccount", 0LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 container]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 options]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 accountOverrideInfo]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 altDSID]);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v21 = v14;
      __int16 v22 = 2112;
      id v23 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "error getting account info(altDSID: %@): %@",  buf,  0x16u);
    }

    int v15 = (void *)objc_claimAutoreleasedReturnValue([v8 fetchCKAccountStatusScheduler]);
    [v15 trigger];

    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  }

  else
  {
    id v16 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100038074;
    block[3] = &unk_100290578;
    void block[4] = v8;
    id v18 = v5;
    id v19 = *(id *)(a1 + 32);
    dispatch_sync(v16, block);
  }
}

id sub_100038074(uint64_t a1)
{
  id v2 = sub_1000AA6AC(@"ckksaccount", 0LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) container]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 options]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 accountOverrideInfo]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 altDSID]);
    uint64_t v8 = *(void *)(a1 + 40);
    int v10 = 138412546;
    id v11 = v7;
    __int16 v12 = 2112;
    uint64_t v13 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "received CK Account info(altDSID: %@): %@",  (uint8_t *)&v10,  0x16u);
  }

  return [*(id *)(a1 + 32) _onqueueUpdateAccountState:*(void *)(a1 + 40) deliveredSemaphore:*(void *)(a1 + 48)];
}

void sub_10003819C(id *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] ckChangeListeners]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectEnumerator]);

  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 nextObject]);
  if (v4)
  {
    id v5 = (id)v4;
    char v6 = 0;
    do
    {
      v6 |= v5 == a1[5];
      uint64_t v7 = objc_claimAutoreleasedReturnValue([v3 nextObject]);

      id v5 = (id)v7;
    }

    while (v7);
  }

  else
  {
    char v6 = 0;
  }

  if (a1[5] && (v6 & 1) == 0)
  {
    id v8 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString, "stringWithFormat:", @"ck-account-state-%@", a1[5]));
    id v9 = (const char *)[v8 UTF8String];
    dispatch_queue_attr_t v10 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    id v11 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v10);
    dispatch_queue_t v12 = dispatch_queue_create(v9, v11);

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([a1[4] ckChangeListeners]);
    [v13 setObject:a1[5] forKey:v12];

    id v14 = sub_1000AA6AC(@"ckksaccount-ck", 0LL);
    int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      id v23 = a1[5];
      *(_DWORD *)__int128 buf = 138412290;
      id v29 = v23;
      _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "adding a new listener: %@", buf, 0xCu);
    }

    if ([a1[4] firstCKAccountFetch])
    {
      id v16 = sub_1000AA6AC(@"ckksaccount-ck", 0LL);
      __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        id v24 = a1[5];
        unsigned int v25 = (void *)objc_claimAutoreleasedReturnValue([a1[4] currentCKAccountInfo]);
        *(_DWORD *)__int128 buf = 138412546;
        id v29 = v24;
        __int16 v30 = 2112;
        __int128 v31 = v25;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "notifying new listener %@ of current state %@",  buf,  0x16u);
      }

      dispatch_group_t v18 = dispatch_group_create();
      if (v18)
      {
        id v19 = v18;
        [a1[4] _onqueueDeliverCurrentCloudKitState:a1[5] listenerQueue:v12 oldStatus:0 group:v18];
        uint64_t v20 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1[4] queue]);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_1000384DC;
        block[3] = &unk_1002927F0;
        id v27 = a1[6];
        dispatch_group_notify(v19, v20, block);

LABEL_20:
        goto LABEL_21;
      }

      id v21 = sub_1000AA6AC(@"ckksaccount-ck", 0LL);
      __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Unable to get dispatch group.", buf, 2u);
      }
    }

    dispatch_semaphore_signal((dispatch_semaphore_t)a1[6]);
    goto LABEL_20;
  }

  dispatch_semaphore_signal((dispatch_semaphore_t)a1[6]);
LABEL_21:
}

uint64_t sub_1000384DC(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000384E4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v1 = [WeakRetained notifyCircleChange:0];
}

void sub_10003851C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v1 = objc_autoreleasePoolPush();
    [WeakRetained performInitialDispatches];
    objc_autoreleasePoolPop(v1);
  }
}

void sub_100038568(uint64_t a1)
{
  id v2 = sub_1000AA6AC(@"ckksaccount", 0LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)char v6 = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Retrying CK account state fetch", v6, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = [WeakRetained notifyCKAccountStatusChange:0];
}

void sub_1000389F0(uint64_t a1)
{
  CFTypeRef v5 = 0LL;
  id v2 = (void *)sub_1001CC59C(&v5);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (void *)v5;
  (*(void (**)(void))(v3 + 16))();
}

void sub_100038BF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100038D00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100038FC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_1000390D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

LABEL_27:
}
}

    goto LABEL_52;
  }

  if ([v8 isEqualToString:@"provide_key_hieararchy"])
  {
    __int128 v89 = objc_alloc(&OBJC_CLASS___CKKSNewTLKOperation);
    __int128 v90 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
    __int128 v91 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView lastNewTLKOperation](self, "lastNewTLKOperation"));
    __int128 v92 = (void *)objc_claimAutoreleasedReturnValue([v91 keysets]);
    uint64_t v93 = @"become_ready";
LABEL_99:
    dispatch_group_t v18 = -[CKKSNewTLKOperation initWithDependencies:rollTLKIfPresent:preexistingPendingKeySets:intendedState:errorState:]( v89,  "initWithDependencies:rollTLKIfPresent:preexistingPendingKeySets:intendedState:errorState:",  v90,  0LL,  v92,  v93,  @"error");

    -[CKKSKeychainView setLastNewTLKOperation:](self, "setLastNewTLKOperation:", v18);
    goto LABEL_35;
  }

  if ([v8 isEqualToString:@"provide_key_hieararchy_untrusted"])
  {
    __int128 v89 = objc_alloc(&OBJC_CLASS___CKKSNewTLKOperation);
    __int128 v90 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
    __int128 v91 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView lastNewTLKOperation](self, "lastNewTLKOperation"));
    __int128 v92 = (void *)objc_claimAutoreleasedReturnValue([v91 keysets]);
    uint64_t v93 = @"waitfortrust";
    goto LABEL_99;
  }

  if ([v8 isEqualToString:@"handle_all_views"])
  {
    *(void *)__int128 buf = 0xAAAAAAAAAAAAAAAALL;
    objc_initWeak((id *)buf, self);
    v238[0] = _NSConcreteStackBlock;
    v238[1] = 3221225472LL;
    v238[2] = sub_100155C34;
    v238[3] = &unk_100291A88;
    objc_copyWeak(&v239, (id *)buf);
    dispatch_group_t v18 = (CKKSLocalResetOperation *)objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:intending:errorState:withBlockTakingSelf:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:intending:errorState:withBlockTakingSelf:",  @"handle-all-views",  @"initializing",  @"initializing",  v238));
    objc_destroyWeak(&v239);
    objc_destroyWeak((id *)buf);
    goto LABEL_35;
  }

  if ([v8 isEqualToString:@"become_ready"])
  {
    uint64_t v20 = objc_claimAutoreleasedReturnValue(-[CKKSKeychainView becomeReadyOperation:](self, "becomeReadyOperation:", @"ready"));
    goto LABEL_34;
  }

  if ([v8 isEqualToString:@"ready"])
  {
    [v9 _onqueueRemoveFlag:@"trusted_operation_begin"];
    if ([v9 _onqueueContains:@"device_unlocked"])
    {
      [v9 _onqueueRemoveFlag:@"device_unlocked"];
      uint64_t v20 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"key-state-after-unlock",  @"initialized"));
      goto LABEL_34;
    }

    if (-[CKKSKeychainView keyStateFullRefetchRequested](self, "keyStateFullRefetchRequested"))
    {
      BOOL v112 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView zoneName](self, "zoneName"));
      xpc_object_t v113 = sub_1000AA6AC(@"ckkskey", v112);
      v114 = (os_log_s *)objc_claimAutoreleasedReturnValue(v113);

      if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = -[CKKSKeychainView keyStateFullRefetchRequested](self, "keyStateFullRefetchRequested");
        _os_log_impl( (void *)&_mh_execute_header,  v114,  OS_LOG_TYPE_DEFAULT,  "Kicking off a full key refetch based on request:%d",  buf,  8u);
      }

      xpc_object_t v115 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
      [v115 setStateForActiveZones:@"fetching"];

      uint64_t v20 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"full-refetch",  @"needrefetch"));
      goto LABEL_34;
    }

    if (![v9 _onqueueContains:@"fetch_requested"])
    {
      if ([v9 _onqueueContains:@"key_process_requested"])
      {
        [v9 _onqueueRemoveFlag:@"key_process_requested"];
        uint64_t v121 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView zoneName](self, "zoneName"));
        uint64_t v122 = sub_1000AA6AC(@"ckkskey", v121);
        uint64_t v123 = (os_log_s *)objc_claimAutoreleasedReturnValue(v122);

        if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v123,  OS_LOG_TYPE_DEFAULT,  "Kicking off a key reprocess based on request",  buf,  2u);
        }

        v124 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
        [v124 setStateForActiveCKKSManagedViews:@"process_key_hierarchy"];

        uint64_t v20 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"key-process",  @"process_key_hierarchy"));
        goto LABEL_34;
      }

      if ([v9 _onqueueContains:@"key_set"])
      {
        [v9 _onqueueRemoveFlag:@"key_set"];
        uint64_t v20 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"provide-key-set",  @"provide_key_hieararchy"));
        goto LABEL_34;
      }

      if ((id)-[CKKSKeychainView trustStatus](self, "trustStatus") != (id)1)
      {
        uint64_t v137 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView zoneName](self, "zoneName"));
        v138 = sub_1000AA6AC(@"ckkskey", v137);
        v139 = (os_log_s *)objc_claimAutoreleasedReturnValue(v138);

        if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v139,  OS_LOG_TYPE_DEFAULT,  "In ready, but there's no trust; going into waitfortrust",
            buf,
            2u);
        }

        uint64_t v20 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"trust-gone",  @"lose_trust"));
        goto LABEL_34;
      }

      if ([v9 _onqueueContains:@"trusted_peers_changed"])
      {
        [v9 _onqueueRemoveFlag:@"trusted_peers_changed"];
        BOOL v133 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView zoneName](self, "zoneName"));
        v134 = sub_1000AA6AC(@"ckkskey", v133);
        CFDataRef v135 = (os_log_s *)objc_claimAutoreleasedReturnValue(v134);

        if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v135,  OS_LOG_TYPE_DEFAULT,  "Received a nudge that the trusted peers set might have changed! Reprocessing.",  buf,  2u);
        }

        uint64_t v136 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
        [v136 setStateForActiveCKKSManagedViews:@"process_key_hierarchy"];

        uint64_t v20 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"trusted-peers-changed",  @"process_key_hierarchy"));
        goto LABEL_34;
      }

      if ([v9 _onqueueContains:@"check_queues"])
      {
        [v9 _onqueueRemoveFlag:@"check_queues"];
        uint64_t v20 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"check-queues",  @"become_ready"));
        goto LABEL_34;
      }

      if ([v9 _onqueueContains:@"24_hr_notification"])
      {
        [v9 _onqueueRemoveFlag:@"24_hr_notification"];
        uint64_t v20 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"24-hr-check",  @"initialized"));
        goto LABEL_34;
      }

      if ([v9 _onqueueContains:@"item_reencryption_needed"])
      {
        [v9 _onqueueRemoveFlag:@"item_reencryption_needed"];
        uint64_t v20 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"reencrypt",  @"reencrypt_outgoing_items"));
        goto LABEL_34;
      }

      if ([v9 _onqueueContains:@"process_incoming_queue"])
      {
        [v9 _onqueueRemoveFlag:@"process_incoming_queue"];
        uint64_t v20 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"process-incoming",  @"process_incoming_queue"));
        goto LABEL_34;
      }

      if ([v9 _onqueueContains:@"dropped_items"])
      {
        [v9 _onqueueRemoveFlag:@"dropped_items"];
        BOOL v191 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView zoneName](self, "zoneName"));
        v192 = sub_1000AA6AC(@"ckkskey", v191);
        CFDataRef v193 = (os_log_s *)objc_claimAutoreleasedReturnValue(v192);

        if (os_log_type_enabled(v193, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v193,  OS_LOG_TYPE_DEFAULT,  "Launching a scan operation to find dropped items",  buf,  2u);
        }

        uint64_t v20 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"scan",  @"scan_local_items"));
        goto LABEL_34;
      }

      if ([v9 _onqueueContains:@"process_outgoing_queue"])
      {
        if ([v9 _onqueueContains:@"oqo_token"])
        {
          [v9 _onqueueRemoveFlag:@"process_outgoing_queue"];
          [v9 _onqueueRemoveFlag:@"oqo_token"];
          uint64_t v20 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"oqo",  @"process_outgoing_queue"));
          goto LABEL_34;
        }

        int v198 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView outgoingQueueOperationScheduler](self, "outgoingQueueOperationScheduler"));
        [v198 trigger];
      }

      v236 = 0u;
      v237 = 0u;
      v234 = 0u;
      v235 = 0u;
      CFTypeRef v199 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
      v200 = (void *)objc_claimAutoreleasedReturnValue([v199 views]);

      v201 = [v200 countByEnumeratingWithState:&v234 objects:v245 count:16];
      if (v201)
      {
        v202 = *(void *)v235;
        do
        {
          for (uint64_t i = 0LL; i != v201; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v235 != v202) {
              objc_enumerationMutation(v200);
            }
            [*(id *)(*((void *)&v234 + 1) + 8 * (void)i) launchComplete];
          }

          v201 = [v200 countByEnumeratingWithState:&v234 objects:v245 count:16];
        }

        while (v201);
      }

      v204 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
      CFTypeRef v205 = (void *)objc_claimAutoreleasedReturnValue([v204 overallLaunch]);
      [v205 launch];

      v206 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
      CFTypeRef v207 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
      v208 = (void *)objc_claimAutoreleasedReturnValue([v207 overallLaunch]);
      [v206 noteLaunchSequence:v208];

      goto LABEL_52;
    }

    [v9 _onqueueRemoveFlag:@"fetch_requested"];
    uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView zoneName](self, "zoneName"));
    v117 = sub_1000AA6AC(@"ckkskey", v116);
    v118 = (os_log_s *)objc_claimAutoreleasedReturnValue(v117);

    if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v118,  OS_LOG_TYPE_DEFAULT,  "Kicking off a key refetch based on request",  buf,  2u);
    }

LABEL_38:
  uint64_t v48 = sub_1000AA6AC(@"ckks", 0LL);
  uint64_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412547;
    *(void *)&uint8_t buf[4] = v92;
    *(_WORD *)&buf[12] = 2113;
    *(void *)&buf[14] = v89;
    _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "No CKKS view for %@, skipping: %{private}@",  buf,  0x16u);
  }

  uint64_t v50 = sub_1000E705C(v89, (uint64_t)&off_1002905E8, 0LL);
  unsigned int v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
  char v52 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSViewManager manager](&OBJC_CLASS___CKKSViewManager, "manager"));
  int v53 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue([v52 claimCallbackForUUID:v51]);

  if (v53)
  {
    xpc_object_t v113 = NSLocalizedDescriptionKey;
    uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"No syncing view for '%@'",  v92));
    v114 = v54;
    unsigned int v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v114,  &v113,  1LL));
    uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"CKKSErrorDomain",  11LL,  v55));
    ((void (**)(void, void, void *))v53)[2](v53, 0LL, v56);
  }

LABEL_101:
LABEL_102:

LABEL_103:
  _Block_object_dispose(&v102, 8);
LABEL_104:
  dispatch_queue_t v12 = 0LL;
LABEL_105:
}

  if (!*(void *)buf)
  {
LABEL_30:
    LODWORD(v14) = 0;
    goto LABEL_31;
  }

  if (v29)
  {
    CFRelease(*(CFTypeRef *)buf);
    goto LABEL_30;
  }

  LODWORD(v14) = 0;
  id v29 = *(CFTypeRef *)buf;
LABEL_31:

  id v24 = sub_10001267C("account-sync");
  unsigned int v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    id v26 = "failed";
    if ((_DWORD)v14) {
      id v26 = "succeeded";
    }
    *(_DWORD *)__int128 buf = 136315394;
    *(void *)&uint8_t buf[4] = v26;
    __int128 v32 = 2112;
    uint64_t v33 = v29;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "KVS sync %s. (%@)", buf, 0x16u);
  }

  if (Mutable) {
    CFRelease(Mutable);
  }
  if (!v29)
  {

    if ((_DWORD)v14) {
      goto LABEL_44;
    }
LABEL_10:
    int v15 = sub_10001267C("account-sync");
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    *(_DWORD *)__int128 buf = 138412546;
    *(void *)&uint8_t buf[4] = v2;
    __int128 v32 = 2112;
    uint64_t v33 = cfa;
    __int16 v17 = "failed to sync with peer: %@ error: %@";
    dispatch_group_t v18 = v16;
    id v19 = 22;
    goto LABEL_12;
  }

  if (cfa) {
    CFRelease(v29);
  }
  else {
    cfa = v29;
  }

LABEL_44:
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 40), v2);
  id v27 = sub_10001267C("account-sync");
  id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    *(void *)&uint8_t buf[4] = v2;
    __int16 v17 = "synced with peer: %@";
    dispatch_group_t v18 = v16;
    id v19 = 12;
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
  }

NSDictionary *__cdecl sub_10003A488(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 datePropertyForKey:@"ERSPending"]);

  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  +[CKKSAnalytics fuzzyDaysSinceDate:](&OBJC_CLASS___CKKSAnalytics, "fuzzyDaysSinceDate:", v3)));
    [v1 setObject:v4 forKeyedSubscript:@"ERSPending"];
  }

  return (NSDictionary *)v1;
}

uint64_t sub_10003A534(uint64_t a1, char a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_10003A548(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_10003A558(uint64_t a1)
{
}

void sub_10003A560(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v5;
  id v11 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
  dispatch_queue_attr_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v6;
}

void sub_10003A5D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v5;
  id v11 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
  dispatch_queue_attr_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v6;
}

void sub_10003A648(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10003A6E0(id a1)
{
  id v1 = objc_alloc(&OBJC_CLASS___EscrowRequestServer);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSLockStateTracker globalTracker](&OBJC_CLASS___CKKSLockStateTracker, "globalTracker"));
  uint64_t v3 = -[EscrowRequestServer initWithLockStateTracker:](v1, "initWithLockStateTracker:", v2);
  id v4 = (void *)qword_1002DE858;
  qword_1002DE858 = (uint64_t)v3;

  [(id)qword_1002DE858 setupAnalytics];
}

void sub_10003A98C(id a1, NSError *a2)
{
  id v2 = a2;
  uint64_t v3 = sub_10001267C("octagon");
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      int v9 = 138412290;
      dispatch_queue_attr_t v10 = v2;
      id v6 = "Created TTR with error: %@";
      uint64_t v7 = v4;
      uint32_t v8 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v9, v8);
    }
  }

  else if (v5)
  {
    LOWORD(v9) = 0;
    id v6 = "Created TTR successfully";
    uint64_t v7 = v4;
    uint32_t v8 = 2;
    goto LABEL_6;
  }
}

void sub_10003AD8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = sub_1000AA6AC(@"ckks-cuttlefish", 0LL);
    uint32_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "error fetching tlk shares: %@", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    int v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    id v19 = v5;
    id v10 = v5;
    id v11 = [v10 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v21;
      do
      {
        for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v21 != v13) {
            objc_enumerationMutation(v10);
          }
          int v15 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
          id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 recordType]);
          unsigned int v17 = [v16 isEqual:@"tlkshare"];

          if (v17)
          {
            dispatch_group_t v18 = -[CKKSCKRecordHolder initWithCKRecord:contextID:]( objc_alloc(&OBJC_CLASS___CKKSTLKShareRecord),  "initWithCKRecord:contextID:",  v15,  *(void *)(a1 + 32));
            [v9 addObject:v18];
          }
        }

        id v12 = [v10 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }

      while (v12);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    id v6 = 0LL;
    id v5 = v19;
  }
}

void sub_10003AFA4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = sub_1000AA6AC(@"ckks-cuttlefish", 0LL);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  id v12 = v11;
  if (v9)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v14 = 138412290;
      id v15 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "error fetching pcs identity: %@",  (uint8_t *)&v14,  0xCu);
    }
  }

  else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void **)(a1 + 32);
    int v14 = 138412290;
    id v15 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "fetched pcs identities for the following services: %@",  (uint8_t *)&v14,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10003B108(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = sub_1000AA6AC(@"ckks-cuttlefish", 0LL);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  id v12 = v11;
  if (v9)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v14 = 138412290;
      id v15 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "error fetching current item: %@",  (uint8_t *)&v14,  0xCu);
    }
  }

  else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void **)(a1 + 32);
    int v14 = 138412290;
    id v15 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "fetched current items for CIPs: %@",  (uint8_t *)&v14,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10003B810( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10003B930( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10003BA50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10003BD68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10003BE54(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_10003BE64(uint64_t a1)
{
}

void sub_10003BE6C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue( +[CKKSPeerProviderState createFromProvider:]( &OBJC_CLASS___CKKSPeerProviderState,  "createFromProvider:",  *(void *)(a1 + 32)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v2;
}

void sub_10003BEAC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerChangeListeners]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10003BF20;
  v3[3] = &unk_1002845D8;
  v3[4] = *(void *)(a1 + 32);
  [v2 iterateListeners:v3];
}

id sub_10003BF20(uint64_t a1, void *a2)
{
  return [a2 trustedPeerSetChanged:*(void *)(a1 + 32)];
}

void sub_10003BF2C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerChangeListeners]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10003BFA0;
  v3[3] = &unk_1002845D8;
  v3[4] = *(void *)(a1 + 32);
  [v2 iterateListeners:v3];
}

id sub_10003BFA0(uint64_t a1, void *a2)
{
  return [a2 selfPeerChanged:*(void *)(a1 + 32)];
}

void sub_10003BFAC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerChangeListeners]);
  [v2 registerListener:*(void *)(a1 + 40)];
}

void sub_10003BFEC(uint64_t a1)
{
  uint64_t v9 = 0LL;
  id v10 = &v9;
  uint64_t v11 = 0x3032000000LL;
  id v12 = sub_10003BE54;
  uint64_t v13 = sub_10003BE64;
  id v14 = 0LL;
  id location = (id)0xAAAAAAAAAAAAAAAALL;
  objc_initWeak(&location, *(id *)(a1 + 32));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cuttlefishXPCWrapper]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) specificUser]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10003C150;
  v6[3] = &unk_100283E60;
  objc_copyWeak(&v7, &location);
  uint64_t v4 = *(void *)(a1 + 40);
  void v6[4] = &v9;
  void v6[5] = v4;
  [v2 fetchTrustStateWithSpecificUser:v3 reply:v6];

  if (*(void *)(a1 + 48))
  {
    id v5 = (void *)v10[5];
    if (v5) {
      **(void **)(a1 + 4_Block_object_dispose(va, 8) = v5;
    }
  }

  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);
  _Block_object_dispose(&v9, 8);
}

void sub_10003C120( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
}

void sub_10003C150(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (v7)
  {
    uint64_t v9 = sub_10001267C("octagon");
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained specificUser]);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v42 = v11;
      __int16 v43 = 2112;
      id v44 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Unable to fetch trusted peers for (%@): %@",  buf,  0x16u);
    }

    uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v13 = v7;
    id v14 = *(id *)(v12 + 40);
    *(void *)(v12 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v13;
  }

  else
  {
    uint64_t v15 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8LL);
    unsigned int v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v15;

    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    id v14 = v6;
    id v18 = [v14 countByEnumeratingWithState:&v36 objects:v40 count:16];
    if (v18)
    {
      id v19 = v18;
      id v32 = WeakRetained;
      uint64_t v33 = 0LL;
      id v34 = v6;
      id obj = v14;
      uint64_t v20 = *(void *)v37;
      do
      {
        for (uint64_t i = 0LL; i != v19; uint64_t i = (char *)i + 1)
        {
          uint64_t v22 = a1;
          if (*(void *)v37 != v20) {
            objc_enumerationMutation(obj);
          }
          __int128 v23 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)i);
          id v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "signingSPKI", v32, v33, v34));
          unsigned int v25 = (void *)objc_claimAutoreleasedReturnValue( +[_SFECPublicKey keyWithSubjectPublicKeyInfo:]( &OBJC_CLASS____SFECPublicKey,  "keyWithSubjectPublicKeyInfo:",  v24));

          id v26 = (void *)objc_claimAutoreleasedReturnValue([v23 encryptionSPKI]);
          id v27 = (void *)objc_claimAutoreleasedReturnValue( +[_SFECPublicKey keyWithSubjectPublicKeyInfo:]( &OBJC_CLASS____SFECPublicKey,  "keyWithSubjectPublicKeyInfo:",  v26));

          id v28 = objc_alloc(&OBJC_CLASS___CKKSActualPeer);
          id v29 = (void *)objc_claimAutoreleasedReturnValue([v23 peerID]);
          __int16 v30 = (void *)objc_claimAutoreleasedReturnValue([v23 viewList]);
          __int128 v31 = -[CKKSActualPeer initWithPeerID:encryptionPublicKey:signingPublicKey:viewList:]( v28,  "initWithPeerID:encryptionPublicKey:signingPublicKey:viewList:",  v29,  v27,  v25,  v30);

          a1 = v22;
          [*(id *)(*(void *)(*(void *)(v22 + 40) + 8) + 40) addObject:v31];
        }

        id v14 = obj;
        id v19 = [obj countByEnumeratingWithState:&v36 objects:v40 count:16];
      }

      while (v19);
      id v7 = v33;
      id v6 = v34;
      id WeakRetained = v32;
    }
  }
}

void sub_10003C418(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerID]);

  if (v2)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 peerID]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"signing-key %@",  v4));
    id v25 = 0LL;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 fetchIdentity:v5 error:&v25]);
    id v7 = v25;

    if (v6) {
      BOOL v8 = v7 == 0LL;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8)
    {
      uint64_t v11 = *(void **)(a1 + 32);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 peerID]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"encryption-key %@",  v12));
      id v24 = 0LL;
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v11 fetchIdentity:v13 error:&v24]);
      id v7 = v24;

      if (!v14 || v7)
      {
        if (*(void *)(a1 + 48)) {
          **(void **)(a1 + 4_Block_object_dispose(va, 8) = v7;
        }
      }

      else
      {
        uint64_t v15 = objc_alloc(&OBJC_CLASS___OctagonSelfPeer);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerID]);
        unsigned int v17 = -[OctagonSelfPeer initWithPeerID:signingIdentity:encryptionIdentity:]( v15,  "initWithPeerID:signingIdentity:encryptionIdentity:",  v16,  v6,  v14);

        id v18 = objc_alloc(&OBJC_CLASS___CKKSSelves);
        id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
        uint64_t v20 = -[CKKSSelves initWithCurrent:allSelves:](v18, "initWithCurrent:allSelves:", v17, v19);
        uint64_t v21 = *(void *)(*(void *)(a1 + 40) + 8LL);
        uint64_t v22 = *(void **)(v21 + 40);
        *(void *)(v21 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v20;
      }
    }

    else if (*(void *)(a1 + 48))
    {
      id v7 = v7;
      **(void **)(a1 + 4_Block_object_dispose(va, 8) = v7;
    }
  }

  else
  {
    uint64_t v9 = sub_10001267C("octagon-ckks");
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "No peer ID; therefore no identity", buf, 2u);
    }

    if (*(void *)(a1 + 48)) {
      **(void **)(a1 + 4_Block_object_dispose(va, 8) = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:",  @"com.apple.security.octagon",  5LL,  @"no peer ID present"));
    }
  }

void sub_10003C6A8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[_SFKeychainManager defaultOverCommitManager]( &OBJC_CLASS____SFKeychainManager,  "defaultOverCommitManager"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 identityForIdentifier:*(void *)(a1 + 32)]);
  uint64_t v4 = (char *)[v3 resultType];
  if ((unint64_t)(v4 - 1) >= 2)
  {
    if (!v4)
    {
      uint64_t v11 = objc_claimAutoreleasedReturnValue([v3 value]);
      uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8LL);
      id v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v11;
    }

    id v10 = 0LL;
  }

  else
  {
    id v5 = sub_10001267C("octagon-ckks");
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      BOOL v8 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      int v14 = 138412546;
      uint64_t v15 = v7;
      __int16 v16 = 2112;
      unsigned int v17 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Unable to fetch identity '%@' from keychain: %@",  (uint8_t *)&v14,  0x16u);
    }

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    id v10 = v9;
    if (*(void *)(a1 + 48) && v9)
    {
      id v10 = v9;
      **(void **)(a1 + 4_Block_object_dispose(va, 8) = v10;
    }
  }
}

void sub_10003D290( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id location)
{
}

void sub_10003D5B0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v6)
  {
    BOOL v8 = sub_10001267C("SecError");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 138412290;
      id v14 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon-health: error: %@",  (uint8_t *)&v13,  0xCu);
    }

    [WeakRetained setError:v6];
    id v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
    [WeakRetained runBeforeGroupFinished:v10];
  }

  else
  {
    uint64_t v11 = sub_10001267C("octagon-health");
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 138412290;
      id v14 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "cuttlefish came back with these suggestions: %@",  (uint8_t *)&v13,  0xCu);
    }

    [WeakRetained handleRepairSuggestions:v5];
  }
}

void sub_10003E484(_Unwind_Exception *a1)
{
}

void sub_10003E75C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_10003ED68(_Unwind_Exception *a1)
{
}

void sub_10003F6A0(_Unwind_Exception *a1)
{
}

void sub_100040730( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, __int128 buf)
{
  if (a2 == 1)
  {
    id v35 = objc_begin_catch(a1);
    __int128 v36 = sub_10001267C("SecError");
    __int128 v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "TrustedPeersHelperSetupProtocol failed, continuing, but you might crash later: %@",  (uint8_t *)&buf,  0xCu);
    }

    objc_exception_throw(v35);
    __break(1u);
    JUMPOUT(0x1000407E0LL);
  }

  _Unwind_Resume(a1);
}

void sub_100040CB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100040FD4(_Unwind_Exception *a1)
{
}

LABEL_35:
  return v15;
}

    id v34 = 0LL;
  }

  if (!v41)
  {
LABEL_38:
    uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString zoneID](v8, "zoneID"));
    unsigned int v55 = (void *)objc_claimAutoreleasedReturnValue([v54 zoneName]);
    uint64_t v56 = sub_1000AA6AC(@"ckks", v55);
    id v19 = (id)objc_claimAutoreleasedReturnValue(v56);

    if (os_log_type_enabled((os_log_t)v19, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 138412546;
      v70 = v8;
      uint64_t v71 = 2112;
      int v72 = v16;
      _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)v19,  OS_LOG_TYPE_DEBUG,  "CKKSMirrorEntry was deleted: %@ %@",  buf,  0x16u);
    }

    id v24 = 0LL;
    id v29 = 1;
    goto LABEL_41;
  }

  id v29 = 0;
  id v24 = 0LL;
LABEL_42:

  return v29;
}

          id v27 = (char *)v27 + 1;
        }

        while (v23 != v27);
        __int128 v23 = [v21 countByEnumeratingWithState:&v52 objects:v64 count:16];
      }

      while (v23);
    }

    id v5 = v46;
    uint64_t v4 = v47;
  }

  objc_autoreleasePoolPop(v5);

  return v6;
}

  return v18;
}

  id v29 = -[NSString copyWithZone:](self->_optionsSourceApplicationBundleIdentifier, "copyWithZone:", a3);
  __int16 v30 = (void *)v6[31];
  v6[31] = v29;

  __int128 v31 = -[NSString copyWithZone:](self->_optionsSourceApplicationSecondaryIdentifier, "copyWithZone:", a3);
  id v32 = (void *)v6[32];
  v6[32] = v31;

  uint64_t v33 = self->_has;
  if ((*(_DWORD *)&v33 & 0x4000000) != 0)
  {
    *((_BYTE *)v6 + 275) = self->_optionsAppleIdContext;
    *((_DWORD *)v6 + 70) |= 0x4000000u;
    uint64_t v33 = self->_has;
  }

  if ((*(_DWORD *)&v33 & 0x20000000) != 0)
  {
    *((_BYTE *)v6 + 27_Block_object_dispose((const void *)(v1 - 136), 8) = self->_optionsTlsPinningRequired;
    *((_DWORD *)v6 + 70) |= 0x20000000u;
  }

  return v6;
}

  id v24 = dword_1002DEE98;
  if (v24 == 2) {
    goto LABEL_36;
  }
LABEL_43:
  __int16 v30 = objc_msgSend((id)objc_opt_class(CKKSAnalytics, a2), "logger");
  __int128 v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
  [v31 logSuccessForEventNamed:@"SOSDeferralEventCompatibilityModeDisabled"];

  return 0LL;
}
}

LABEL_16:
    unsigned int v17 = 0LL;
    goto LABEL_17;
  }

  __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 ckks]);

  if (!v16)
  {
    if (a6)
    {
      id v18 = @"ckks does not exist";
      id v19 = 61LL;
      goto LABEL_10;
    }

    __int128 v23 = sub_10001267C("ckkspersona");
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      id v25 = 138412290;
      id v26 = v12;
      uint64_t v22 = "ckksForClientRPC: no CKKSKeychainView found for persona %@";
      goto LABEL_15;
    }

    goto LABEL_16;
  }

  unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue([v15 ckks]);
LABEL_17:

  return v17;
}

    if (a8)
    {
      __int128 v36 = v36;
      id v27 = 0LL;
      __int128 v45 = 0LL;
      *a8 = v36;
      goto LABEL_27;
    }

    id v27 = 0LL;
    goto LABEL_19;
  }

  id v24 = sub_1000E6EA4(a3, 0x10000LL, 0LL, &v147);
  if (!v24)
  {
    int64_t Code = CFErrorGetCode((CFErrorRef)v147);
    uint64_t v42 = v147;
    __int128 v36 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:underlying:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:underlying:",  @"CKKSErrorDomain",  Code,  @"Couldn't create object plist",  v147));

    __int16 v43 = (void *)objc_claimAutoreleasedReturnValue([v16 zoneName]);
    id v44 = sub_1000AA6AC(@"ckksitem", v43);
    __int128 v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);

    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412547;
      v149 = (SecDbItem *)v36;
      v150 = 2113;
      size_t v151 = a3;
      __int128 v40 = "no plist: %@ %{private}@";
      goto LABEL_15;
    }

    goto LABEL_16;
  }

  id v25 = v24;
  -[__CFDictionary setObject:forKeyedSubscript:](v24, "setObject:forKeyedSubscript:", 0LL, kSecAttrMultiUser);
  int v140 = (__CFString *)v25;
  -[__CFDictionary setObject:forKey:](v25, "setObject:forKey:", a3->var1->var0, kSecClass);
  id v26 = (SecDbItem *)sub_1000E705C(a3, (uint64_t)&off_1002905E8, &v147);
  id v27 = v26;
  v139 = v15;
  if (v26)
  {
    CFRetain(v26);
    id v29 = v147;
    if (!v147)
    {
      __int16 v30 = objc_opt_class(&OBJC_CLASS___NSNull, v28);
      if ((objc_opt_isKindOfClass(v27, v30) & 1) != 0)
      {
        __int128 v31 = (SecDbItem *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:underlying:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:underlying:",  @"CKKSErrorDomain",  15LL,  @"UUID not found in object",  0LL));
        id v32 = (void *)objc_claimAutoreleasedReturnValue([v16 zoneName]);
        uint64_t v33 = sub_1000AA6AC(@"ckksitem", v32);
        id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);

        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 138412547;
          v149 = v31;
          v150 = 2113;
          size_t v151 = a3;
          id v35 = "couldn't fetch UUID: %@ %{private}@";
LABEL_23:
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, v35, buf, 0x16u);
          goto LABEL_24;
        }

        goto LABEL_24;
      }

      uint64_t v49 = (__CFString *)sub_1000E705C(a3, (uint64_t)&off_100290598, &v147);
      __int128 v36 = v49;
      if (v49)
      {
        CFRetain(v49);
        unsigned int v51 = (__CFError *)v147;
        if (!v147)
        {
          char v52 = objc_opt_class(&OBJC_CLASS___NSNull, v50);
          if ((objc_opt_isKindOfClass(v36, v52) & 1) != 0)
          {
            int v53 = (void *)objc_claimAutoreleasedReturnValue([v16 zoneName]);
            uint64_t v54 = sub_1000AA6AC(@"ckksitem", v53);
            unsigned int v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);

            if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = 138477827;
              v149 = a3;
              _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_ERROR,  "couldn't fetch accessgroup: %{private}@",  buf,  0xCu);
            }

            __int128 v36 = @"no-group";
            uint64_t v15 = v139;
          }

          uint64_t v137 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSMirrorEntry tryFromDatabase:contextID:zoneID:error:]( &OBJC_CLASS___CKKSMirrorEntry,  "tryFromDatabase:contextID:zoneID:error:",  v27,  v15,  v16,  a8));
          uint64_t v136 = v141;
          uint64_t v145 = 0LL;
          uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSOutgoingQueueEntry tryFromDatabase:state:contextID:zoneID:error:]( &OBJC_CLASS___CKKSOutgoingQueueEntry,  "tryFromDatabase:state:contextID:zoneID:error:",  v27,  @"new",  v15,  v16,  &v145));
          unsigned int v57 = (os_log_s *)v145;
          CFDataRef v135 = v56;
          if (v56)
          {
            v126 = v57;
            double v58 = (void *)objc_claimAutoreleasedReturnValue([v56 action]);
            unsigned int v59 = [v58 isEqual:@"add"];

            uint64_t v60 = v136;
            unsigned int v61 = v136;
            if (v59)
            {
              if (-[__CFString isEqual:](v136, "isEqual:", @"modify"))
              {
                int v62 = @"add";

                unsigned int v61 = @"add";
              }

              else
              {
                int v72 = -[__CFString isEqual:](v136, "isEqual:", @"delete");
                unsigned int v61 = v136;
                if (v72)
                {
                  unsigned int v61 = v136;
                  if (!v137)
                  {
                    [v135 deleteFromDatabase:a8];
                    goto LABEL_76;
                  }
                }
              }
            }

            uint64_t v136 = (__CFString *)v61;
            id v73 = v60;
            uint64_t v71 = (os_log_t)objc_claimAutoreleasedReturnValue([v135 action]);
            if (-[os_log_s isEqual:](v71, "isEqual:", @"delete"))
            {
              uint64_t v74 = -[__CFString isEqual:](v73, "isEqual:", @"add");

              if (!v74)
              {
                id v75 = v136;
LABEL_56:
                if (!v137)
                {
                  uint64_t v136 = v75;
                  v124 = 0LL;
                  goto LABEL_80;
                }

                goto LABEL_57;
              }

              id v75 = @"modify";
              __int128 v76 = @"modify";
              uint64_t v71 = (os_log_t)v136;
LABEL_55:

              goto LABEL_56;
            }
          }

          else
          {
            if (!v57)
            {
              if (!v137)
              {
                if (-[__CFString isEqualToString:](v136, "isEqualToString:", @"delete"))
                {
                  uint64_t v144 = 0LL;
                  v131 = (SecDbItem *)objc_claimAutoreleasedReturnValue( +[CKKSOutgoingQueueEntry tryFromDatabase:contextID:zoneID:error:]( &OBJC_CLASS___CKKSOutgoingQueueEntry,  "tryFromDatabase:contextID:zoneID:error:",  v27,  v15,  v16,  &v144));
                  v126 = (os_log_t)v144;
                  if (v126)
                  {
                    __int128 v84 = (void *)objc_claimAutoreleasedReturnValue([v16 zoneName]);
                    __int128 v85 = sub_1000AA6AC(@"ckksitem", v84);
                    __int128 v86 = (os_log_s *)objc_claimAutoreleasedReturnValue(v85);

                    log = v86;
                    if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)__int128 buf = 138412290;
                      v149 = (SecDbItem *)v126;
                      _os_log_impl( (void *)&_mh_execute_header,  v86,  OS_LOG_TYPE_ERROR,  "Unable to fetch an existing OQE (any state) due to error: %@",  buf,  0xCu);
                    }

                    __int128 v83 = 0LL;
                    goto LABEL_78;
                  }

                  if (v131)
                  {
                    v126 = 0LL;
                    __int128 v83 = 0LL;
                    goto LABEL_79;
                  }

                  xpc_object_t v113 = (void *)objc_claimAutoreleasedReturnValue([v16 zoneName]);
                  v114 = sub_1000AA6AC(@"ckksitem", v113);
                  xpc_object_t v115 = (os_log_s *)objc_claimAutoreleasedReturnValue(v114);

                  v126 = v115;
                  if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)__int128 buf = 138412290;
                    v149 = v27;
                    _os_log_impl( (void *)&_mh_execute_header,  v115,  OS_LOG_TYPE_ERROR,  "Asked to delete a record for which we don't have a CKME or any OQE, ignoring: %@",  buf,  0xCu);
                  }

                  goto LABEL_76;
                }

                v124 = 0LL;
                v126 = 0LL;
LABEL_80:
                __int128 v91 = kSecAttrPCSPlaintextServiceIdentifier;
                uint64_t v129 = (void *)objc_claimAutoreleasedReturnValue( -[__CFString objectForKeyedSubscript:]( v140,  "objectForKeyedSubscript:",  kSecAttrPCSPlaintextServiceIdentifier));
                -[__CFString setObject:forKeyedSubscript:](v140, "setObject:forKeyedSubscript:", 0LL, v91);
                __int128 v92 = kSecAttrPCSPlaintextPublicKey;
                loga = (os_log_t)objc_claimAutoreleasedReturnValue( -[__CFString objectForKeyedSubscript:]( v140,  "objectForKeyedSubscript:",  kSecAttrPCSPlaintextPublicKey));
                -[__CFString setObject:forKeyedSubscript:](v140, "setObject:forKeyedSubscript:", 0LL, v92);
                uint64_t v93 = kSecAttrPCSPlaintextPublicIdentity;
                char v132 = (void *)objc_claimAutoreleasedReturnValue( -[__CFString objectForKeyedSubscript:]( v140,  "objectForKeyedSubscript:",  kSecAttrPCSPlaintextPublicIdentity));
                -[__CFString setObject:forKeyedSubscript:](v140, "setObject:forKeyedSubscript:", 0LL, v93);
                v94 = objc_alloc(&OBJC_CLASS___CKKSItem);
                BOOL v95 = (void *)objc_claimAutoreleasedReturnValue([v21 uuid]);
                unsigned int v96 = -[CKKSItem initWithUUID:parentKeyUUID:contextID:zoneID:encodedCKRecord:encItem:wrappedkey:generationCount:encver:plaintextPCSServiceIdentifier:plaintextPCSPublicKey:plaintextPCSPublicIdentity:]( v94,  "initWithUUID:parentKeyUUID:contextID:zoneID:encodedCKRecord:encItem:wrappedkey:generationCount:e ncver:plaintextPCSServiceIdentifier:plaintextPCSPublicKey:plaintextPCSPublicIdentity:",  v27,  v95,  v139,  v16,  0LL,  0LL,  0LL,  v124,  2LL,  v129,  loga,  v132);

                uint64_t v123 = v96;
                if (!v96)
                {
                  v125 = (SecDbItem *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:underlying:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:underlying:",  @"CKKSErrorDomain",  16LL,  @"Couldn't create an item",  0LL));
                  v104 = (void *)objc_claimAutoreleasedReturnValue([v16 zoneName]);
                  v105 = sub_1000AA6AC(@"ckksitem", v104);
                  BOOL v106 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);

                  if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)__int128 buf = 138412547;
                    v149 = v125;
                    v150 = 2113;
                    size_t v151 = a3;
                    _os_log_impl( (void *)&_mh_execute_header,  v106,  OS_LOG_TYPE_ERROR,  "couldn't create an item: %@ %{private}@",  buf,  0x16u);
                  }

                  uint64_t v15 = v139;
                  __int128 v45 = 0LL;
                  if (a8)
                  {
                    v125 = v125;
                    *a8 = v125;
                  }

                  __int128 v90 = v140;
                  goto LABEL_102;
                }

                uint64_t v121 = (void *)objc_claimAutoreleasedReturnValue([v137 item]);
                CFDataRef v142 = 0LL;
                CFDataRef v97 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSItemEncrypter encryptCKKSItem:dataDictionary:updatingCKKSItem:parentkey:keyCache:error:]( &OBJC_CLASS___CKKSItemEncrypter,  "encryptCKKSItem:dataDictionary:updatingCKKSItem:parentkey:keyCache:error:",  v96,  v140,  v121,  v21,  v17,  &v142));
                CFDataRef v98 = (SecDbItem *)v142;

                uint64_t v122 = v97;
                v125 = v98;
                if (!v97 || v98)
                {
                  v119 = (SecDbItem *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:underlying:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:underlying:",  @"CKKSErrorDomain",  -[SecDbItem code](v98, "code"),  @"Couldn't encrypt item",  v98));
                  v107 = (void *)objc_claimAutoreleasedReturnValue([v16 zoneName]);
                  v108 = sub_1000AA6AC(@"ckksitem", v107);
                  v109 = (os_log_s *)objc_claimAutoreleasedReturnValue(v108);

                  v110 = v109;
                  xpc_object_t v111 = os_log_type_enabled(v109, OS_LOG_TYPE_ERROR);
                  uint64_t v15 = v139;
                  if (v111)
                  {
                    *(_DWORD *)__int128 buf = 138412547;
                    v149 = v119;
                    v150 = 2113;
                    size_t v151 = a3;
                    _os_log_impl( (void *)&_mh_execute_header,  v110,  OS_LOG_TYPE_ERROR,  "couldn't encrypt item: %@ %{private}@",  buf,  0x16u);
                  }

                  if (a8) {
                    *a8 = v119;
                  }

                  __int128 v45 = 0LL;
                  __int128 v90 = v140;
                }

                else
                {
                  v99 = (void *)objc_claimAutoreleasedReturnValue([v97 encitem]);
                  BOOL v100 = (SecDbItem *)[v99 length];

                  v117 = v100;
                  unsigned int v101 = (unint64_t)v100 >= 0x100000;
                  uint64_t v15 = v139;
                  if (!v101)
                  {
                    BOOL v112 = v122;
                    __int128 v45 = -[CKKSOutgoingQueueEntry initWithCKKSItem:action:state:waitUntil:accessGroup:]( objc_alloc(&OBJC_CLASS___CKKSOutgoingQueueEntry),  "initWithCKKSItem:action:state:waitUntil:accessGroup:",  v122,  v136,  @"new",  0LL,  v36);
                    __int128 v90 = v140;
LABEL_100:

LABEL_102:
                    goto LABEL_103;
                  }

                  v118 = (SecDbItem *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:",  @"CKKSErrorDomain",  65LL,  @"Object size too large"));
                  char v102 = (void *)objc_claimAutoreleasedReturnValue([v16 zoneName]);
                  v103 = sub_1000AA6AC(@"ckksitem", v102);
                  oslog = (os_log_s *)objc_claimAutoreleasedReturnValue(v103);

                  if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)__int128 buf = 134218499;
                    v149 = v117;
                    v150 = 2112;
                    size_t v151 = v118;
                    v152 = 2113;
                    v153 = a3;
                    _os_log_impl( (void *)&_mh_execute_header,  oslog,  OS_LOG_TYPE_ERROR,  "Object Size (%lu bytes) too large: %@ %{private}@",  buf,  0x20u);
                  }

                  __int128 v90 = v140;
                  if (a8) {
                    *a8 = v118;
                  }

                  __int128 v45 = 0LL;
                }

                BOOL v112 = v122;
                goto LABEL_100;
              }

              v126 = 0LL;
              id v75 = v136;
LABEL_57:
              __int128 v77 = (void *)objc_claimAutoreleasedReturnValue([v137 item]);
              v124 = [v77 generationCount];

              uint64_t v136 = v75;
              if (!v135 && -[__CFString isEqualToString:](v75, "isEqualToString:", @"modify"))
              {
                v130 = (void *)objc_claimAutoreleasedReturnValue([v137 item]);
                char v143 = 0LL;
                __int128 v78 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSItemEncrypter decryptItemToDictionary:keyCache:error:]( &OBJC_CLASS___CKKSItemEncrypter,  "decryptItemToDictionary:keyCache:error:",  v130,  v17,  &v143));
                __int128 v79 = (SecDbItem *)v143;
                log = (os_log_t)[v78 mutableCopy];

                CFDataRef v128 = -[__CFString mutableCopy](v140, "mutableCopy");
                v131 = v79;
                if (v79)
                {
                  id v80 = (void *)objc_claimAutoreleasedReturnValue([v16 zoneName]);
                  __int128 v81 = sub_1000AA6AC(@"ckksitem", v80);
                  __int128 v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);

                  if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)__int128 buf = 138412290;
                    v149 = v131;
                    _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_ERROR,  "Unable to decrypt current CKME: %@",  buf,  0xCu);
                  }

                  __int128 v83 = v124;
                  goto LABEL_77;
                }

                -[os_log_s setObject:forKeyedSubscript:](log, "setObject:forKeyedSubscript:", 0LL);
                v120 = kSecAttrSHA1;
                -[os_log_s setObject:forKeyedSubscript:](log, "setObject:forKeyedSubscript:", 0LL);
                [v128 setObject:0 forKeyedSubscript:kSecAttrModificationDate];
                [v128 setObject:0 forKeyedSubscript:v120];
                __int128 v83 = v124;
                if (!-[os_log_s isEqualToDictionary:](log, "isEqualToDictionary:", v128))
                {
LABEL_77:

LABEL_78:
LABEL_79:
                  v124 = v83;

                  goto LABEL_80;
                }

                __int128 v87 = (void *)objc_claimAutoreleasedReturnValue([v16 zoneName]);
                __int128 v88 = sub_1000AA6AC(@"ckksitem", v87);
                __int128 v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);

                if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)__int128 buf = 138412290;
                  v149 = v27;
                  _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_DEFAULT,  "Update to item only changes mdat; skipping %@",
                    buf,
                    0xCu);
                }

LABEL_76:
                __int128 v45 = 0LL;
                uint64_t v15 = v139;
                __int128 v90 = v140;
LABEL_103:

                goto LABEL_27;
              }

              goto LABEL_80;
            }

            uint64_t v127 = v57;
            BOOL v68 = (void *)objc_claimAutoreleasedReturnValue([v16 zoneName]);
            id v69 = sub_1000AA6AC(@"ckksitem", v68);
            v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);

            if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = 138412290;
              v149 = (SecDbItem *)v127;
              _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_ERROR,  "Unable to fetch an existing OQE due to error: %@",  buf,  0xCu);
            }

            uint64_t v71 = v127;
            v126 = 0LL;
          }

          id v75 = v136;
          goto LABEL_55;
        }
      }

      else
      {
        unsigned int v51 = (__CFError *)v147;
      }

      int v63 = CFErrorGetCode(v51);
      int v64 = v147;
      v138 = (SecDbItem *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:underlying:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:underlying:",  @"CKKSErrorDomain",  v63,  @"accessgroup not found in object",  v147));

      uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue([v16 zoneName]);
      id v66 = sub_1000AA6AC(@"ckksitem", v65);
      v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);

      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412547;
        v149 = v138;
        v150 = 2113;
        size_t v151 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_ERROR,  "couldn't fetch access group from item: %@ %{private}@",  buf,  0x16u);
      }

      uint64_t v15 = v139;
      if (a8) {
        *a8 = v138;
      }

LABEL_19:
      __int128 v45 = 0LL;
      goto LABEL_27;
    }
  }

  else
  {
    id v29 = v147;
  }

  __int128 v31 = (SecDbItem *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:underlying:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:underlying:",  @"CKKSErrorDomain",  15LL,  @"No UUID for item",  v29));

  __int128 v46 = (void *)objc_claimAutoreleasedReturnValue([v16 zoneName]);
  uint64_t v47 = sub_1000AA6AC(@"ckksitem", v46);
  id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);

  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 138412547;
    v149 = v31;
    v150 = 2113;
    size_t v151 = a3;
    id v35 = "No UUID for item: %@ %{private}@";
    goto LABEL_23;
  }

  uint64_t v7 = 0LL;
  int v13 = 0LL;
  id v14 = 0LL;
  BOOL v8 = 1;
  if (v5)
  {
LABEL_17:
    id v14 = -[_SFECPublicKey initWithSecKey:](objc_alloc(&OBJC_CLASS____SFECPublicKey), "initWithSecKey:", v5);
    if ((v8 & 1) != 0)
    {
      int v13 = 0LL;
      BOOL v8 = 1;
    }

    else
    {
      int v13 = -[_SFECPublicKey initWithSecKey:](objc_alloc(&OBJC_CLASS____SFECPublicKey), "initWithSecKey:", v7);
      BOOL v8 = 0;
    }
  }

  uint64_t v15 = objc_alloc(&OBJC_CLASS___CKKSSOSPeer);
  __int16 v16 = (void *)objc_claimAutoreleasedReturnValue(+[OTSOSActualAdapter sosCKKSViewList](&OBJC_CLASS___OTSOSActualAdapter, "sosCKKSViewList"));
  unsigned int v17 = -[CKKSSOSPeer initWithSOSPeerID:encryptionPublicKey:signingPublicKey:viewList:]( v15,  "initWithSOSPeerID:encryptionPublicKey:signingPublicKey:viewList:",  PeerID,  v13,  v14,  v16);

  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v17];
  if (v5) {
    CFRelease(v5);
  }
  if ((v8 & 1) == 0) {
    CFRelease(v7);
  }
  id v18 = err;
  if (err)
  {
    CFErrorRef err = 0LL;
    CFRelease(v18);
  }
}
      }

      id v5 = [obj countByEnumeratingWithState:&v42 objects:v48 count:16];
    }

    while (v5);
  }

  id v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  id v35 = (void *)objc_claimAutoreleasedReturnValue([v34 overallLaunch]);
  [v35 addEvent:@"scan-local-items"];

  return 1LL;
}

      id v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:",  @"com.apple.security.octagon",  73LL,  @"Device is not in Octagon yet to set account settings"));
      v7[2](v7, v24);
LABEL_17:

      goto LABEL_18;
    }

    uint64_t v21 = sub_10001267C("octagon-settings");
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      __int128 v40 = v6;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Setting account settings %@", buf, 0xCu);
    }

    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext mergedAccountSettings:](self, "mergedAccountSettings:", v6));
    -[OTCuttlefishContext setAccountSettings:](self, "setAccountSettings:", v23);

    id v24 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext stateMachine](self, "stateMachine"));
    id v25 = (void *)objc_claimAutoreleasedReturnValue(+[OTStates OctagonReadyStates](&OBJC_CLASS___OTStates, "OctagonReadyStates"));
    __int128 v37 = @"SetAccountSettings";
    id v35 = @"BecomeReady";
    id v26 = (void *)objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionPathStep success]( &OBJC_CLASS___OctagonStateTransitionPathStep,  "success",  @"Ready"));
    id v34 = v26;
    id v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v34,  &v33,  1LL));
    __int128 v36 = v27;
    id v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v36,  &v35,  1LL));
    __int128 v38 = v28;
    id v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v38,  &v37,  1LL));
    __int16 v30 = (void *)objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionPath pathFromDictionary:]( &OBJC_CLASS___OctagonStateTransitionPath,  "pathFromDictionary:",  v29));
    __int128 v31 =  [v24 doWatchedStateMachineRPC:@"octagon-set-account-settings" sourceStates:v25 path:v30 reply:v7];

    goto LABEL_17;
  }

  uint64_t v9 = sub_10001267C("octagon");
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    __int128 v40 = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "No cloudkit account present: %@", buf, 0xCu);
  }

  v7[2](v7, v8);
LABEL_18:
}

    __int16 v30 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
    goto LABEL_55;
  }

  if ((v21 & 1) == 0)
  {
    __int128 v45 = sub_10001267C("octagon");
    id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "No iOS peers in account; not posting CFU",
        buf,
        2u);
    }

    goto LABEL_16;
  }

  __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sosAdapter]);
  id v32 = [v31 sosEnabled];

  if (v32)
  {
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained accountMetadataStore]);
    unsigned int v61 = 0LL;
    id v34 = (void *)objc_claimAutoreleasedReturnValue([v33 loadOrCreateAccountMetadata:&v61]);
    id v35 = (os_log_s *)v61;

    __int128 v36 = v34;
    if (!v34 || v35)
    {
      uint64_t v48 = sub_10001267C("SecError");
      __int128 v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        int v64 = v35;
        _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "octagon: failed to retrieve joining attempt information: %@",  buf,  0xCu);
      }

      goto LABEL_50;
    }

    if ([v34 attemptedJoin] == 2)
    {
LABEL_51:

      goto LABEL_52;
    }

    double v58 = v34;
    __int128 v37 = sub_10001267C("octagon");
    __int128 v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "SOS is enabled and we haven't attempted to join; checking with SOS",
        buf,
        2u);
    }

    __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sosAdapter]);
    uint64_t v60 = 0LL;
    uint64_t v54 = [v39 circleStatus:&v60];
    __int128 v40 = (os_log_s *)v60;

    if (v40)
    {
      __int128 v41 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s domain](v40, "domain"));
      if ([v41 isEqualToString:kSOSErrorDomain])
      {
        loga = (os_log_t)-[os_log_s code](v40, "code");

        if (loga == (os_log_t)4)
        {
          uint64_t v42 = sub_10001267C("octagon");
          __int16 v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
          id v44 = v58;
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "SOS is not ready, not posting CFU until it becomes so",  buf,  2u);
          }

          goto LABEL_60;
        }
      }

      else
      {
      }

      int v53 = sub_10001267C("octagon");
      log = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
      __int128 v36 = v58;
      if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        int v64 = v40;
        _os_log_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEFAULT,  "SOS is in an unknown error state, posting CFU: %@",  buf,  0xCu);
      }
    }

    else
    {
      uint64_t v49 = sub_10001267C("octagon");
      log = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
      uint64_t v50 = os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT);
      if (!v54)
      {
        if (v50)
        {
          *(_WORD *)__int128 buf = 0;
          __int16 v43 = log;
          _os_log_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEFAULT,  "SOS is InCircle, not posting CFU",  buf,  2u);
        }

        else
        {
          __int16 v43 = log;
        }

        id v44 = v58;
LABEL_60:

        (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
        goto LABEL_56;
      }

      if (v50)
      {
        unsigned int v51 = (os_log_s *)SOSCCGetStatusDescription(v54);
        *(_DWORD *)__int128 buf = 138412290;
        int v64 = v51;
        unsigned int v55 = v51;
        _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "SOS is %@, posting CFU", buf, 0xCu);

        char v52 = log;
        __int128 v36 = v58;
LABEL_49:

LABEL_50:
        goto LABEL_51;
      }

      __int128 v36 = v58;
    }

    char v52 = log;
    goto LABEL_49;
  }

    goto LABEL_17;
  }

  __int128 v23 = -[CKKSKey matchesCKRecord:](v16, "matchesCKRecord:", v10);
  id v24 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKey recordID](v10, "recordID"));
  id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 zoneID]);
  id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 zoneName]);
  id v27 = sub_1000AA6AC(@"ckksresync", v26);
  id v28 = (CKKSKey *)objc_claimAutoreleasedReturnValue(v27);

  if ((v23 & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v74 = v16;
      id v75 = 2112;
      __int128 v76 = v10;
      id v35 = "BUG: Local sync key doesn't match resynced CloudKit record(s): %@ %@";
      __int128 v36 = (os_log_s *)v28;
      __int128 v37 = 22;
      goto LABEL_15;
    }

    goto LABEL_16;
  }

  if (os_log_type_enabled((os_log_t)v28, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v74 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v28,  OS_LOG_TYPE_DEFAULT,  "Already know about this sync key, skipping update: %@",  buf,  0xCu);
  }

  id v29 = 1;
  __int16 v30 = v68;
LABEL_38:

  return v29;
}

    id v29 = 0;
    goto LABEL_17;
  }

  uint64_t v11 = (void *)v10;
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSPeerProviderState currentSelfPeersError](self, "currentSelfPeersError"));

  if (v12) {
    goto LABEL_10;
  }
  int v13 = objc_claimAutoreleasedReturnValue(-[CKKSPeerProviderState currentTrustedPeers](self, "currentTrustedPeers"));
  if (v13)
  {
    id v14 = (void *)v13;
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSPeerProviderState currentTrustedPeersError](self, "currentTrustedPeersError"));

    if (!v15)
    {
      char v102 = 0u;
      v103 = 0u;
      BOOL v100 = 0u;
      unsigned int v101 = 0u;
      __int128 v31 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSPeerProviderState currentSelfPeers](self, "currentSelfPeers"));
      id v32 = (void *)objc_claimAutoreleasedReturnValue([v31 allSelves]);

      id obj = v32;
      __int16 v16 = v85;
      __int128 v77 = [v32 countByEnumeratingWithState:&v100 objects:v114 count:16];
      uint64_t v21 = 0LL;
      if (v77)
      {
        __int128 v78 = *(void *)v101;
        __int128 v81 = v8;
        __int128 v76 = a5;
        __int128 v86 = self;
        do
        {
          context = v21;
          uint64_t v33 = 0LL;
          do
          {
            if (*(void *)v101 != v78) {
              objc_enumerationMutation(obj);
            }
            __int128 v79 = (char *)v33;
            id v34 = *(void **)(*((void *)&v100 + 1) + 8LL * (void)v33);
            __int128 v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
            unsigned int v96 = 0u;
            CFDataRef v97 = 0u;
            CFDataRef v98 = 0u;
            v99 = 0u;
            id v35 = v81;
            __int128 v36 = [v35 countByEnumeratingWithState:&v96 objects:v113 count:16];
            if (v36)
            {
              __int128 v37 = v36;
              __int128 v38 = *(void *)v97;
              do
              {
                for (uint64_t i = 0LL; i != v37; uint64_t i = (char *)i + 1)
                {
                  if (*(void *)v97 != v38) {
                    objc_enumerationMutation(v35);
                  }
                  __int128 v40 = *(void **)(*((void *)&v96 + 1) + 8LL * (void)i);
                  __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([v40 share]);
                  uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v41 receiverPeerID]);
                  __int16 v43 = (void *)objc_claimAutoreleasedReturnValue([v34 peerID]);
                  id v44 = [v42 isEqualToString:v43];

                  if (v44) {
                    [v89 addObject:v40];
                  }
                }

                __int128 v37 = [v35 countByEnumeratingWithState:&v96 objects:v113 count:16];
              }

              while (v37);
            }

            __int128 v45 = v89;
            if ([v89 count])
            {
              v94 = 0u;
              BOOL v95 = 0u;
              __int128 v92 = 0u;
              uint64_t v93 = 0u;
              __int128 v46 = v89;
              __int16 v16 = v85;
              uint64_t v47 = v86;
              __int128 v84 = [v46 countByEnumeratingWithState:&v92 objects:v112 count:16];
              if (v84)
              {
                __int128 v83 = *(void *)v93;
                uint64_t v48 = context;
                while (2)
                {
                  for (j = 0LL; j != v84; j = (char *)j + 1)
                  {
                    uint64_t v50 = v48;
                    if (*(void *)v93 != v83) {
                      objc_enumerationMutation(v46);
                    }
                    unsigned int v51 = *(void **)(*((void *)&v92 + 1) + 8LL * (void)j);
                    contexta = objc_autoreleasePoolPush();
                    char v52 = (void *)objc_claimAutoreleasedReturnValue([v85 zoneName]);
                    int v53 = sub_1000AA6AC(@"ckksshare", v52);
                    uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);

                    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)__int128 buf = 138412546;
                      v105 = v51;
                      BOOL v106 = 2112;
                      v107 = v34;
                      _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "Checking possible TLK share %@ as %@",  buf,  0x16u);
                    }

                    unsigned int v55 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSPeerProviderState currentTrustedPeers](v47, "currentTrustedPeers"));
                    __int128 v91 = 0LL;
                    uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v51 recoverTLK:v34 trustedPeers:v55 error:&v91]);
                    unsigned int v57 = v91;

                    if (v56) {
                      double v58 = v57 == 0LL;
                    }
                    else {
                      double v58 = 0;
                    }
                    if (v58)
                    {
                      __int128 v82 = v50;
                      id v66 = v46;
                      v67 = (void *)objc_claimAutoreleasedReturnValue([v56 aessivkey]);
                      __int128 v90 = 0LL;
                      BOOL v68 = [v85 trySelfWrappedKeyCandidate:v67 error:&v90];
                      unsigned int v57 = v90;

                      id v69 = (void *)objc_claimAutoreleasedReturnValue([v85 zoneName]);
                      v70 = sub_1000AA6AC(@"ckksshare", v69);
                      int v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);

                      if (v68 && !v57)
                      {
                        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)__int128 buf = 138412802;
                          v105 = v51;
                          BOOL v106 = 2112;
                          v107 = v85;
                          v108 = 2112;
                          v109 = v34;
                          _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "TLKShare(%@) unlocked TLK(%@) as %@",  buf,  0x20u);
                        }

                        objc_autoreleasePoolPop(contexta);
                        id v29 = 1;
                        uint64_t v21 = v82;
                        BOOL v8 = v81;
                        goto LABEL_66;
                      }

                      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
                      {
                        uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSPeerProviderState currentSelfPeers](v86, "currentSelfPeers"));
                        int v72 = (void *)objc_claimAutoreleasedReturnValue([v71 currentSelf]);
                        *(_DWORD *)__int128 buf = 138413058;
                        v105 = v51;
                        BOOL v106 = 2112;
                        v107 = v85;
                        v108 = 2112;
                        v109 = v72;
                        v110 = 2112;
                        xpc_object_t v111 = v57;
                        _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_ERROR,  "Unwrapped TLKShare(%@) does not unwrap proposed TLK(%@) as %@: %@",  buf,  0x2Au);
                      }

                      __int128 v46 = v66;
                      uint64_t v50 = v82;
                    }

                    else
                    {
                      unsigned int v59 = (void *)objc_claimAutoreleasedReturnValue([v85 zoneName]);
                      uint64_t v60 = sub_1000AA6AC(@"ckksshare", v59);
                      unsigned int v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);

                      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)__int128 buf = 138412802;
                        v105 = v51;
                        BOOL v106 = 2112;
                        v107 = v34;
                        v108 = 2112;
                        v109 = v57;
                        _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_ERROR,  "Unable to unwrap TLKShare(%@) as %@: %@",  buf,  0x20u);
                      }

                      int v62 = (void *)objc_claimAutoreleasedReturnValue([v85 zoneName]);
                      int v63 = sub_1000AA6AC(@"ckksshare", v62);
                      int v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);

                      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
                      {
                        uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSPeerProviderState currentTrustedPeers](v86, "currentTrustedPeers"));
                        *(_DWORD *)__int128 buf = 138412290;
                        v105 = v65;
                        _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_ERROR,  "Current trust set: %@",  buf,  0xCu);
                      }
                    }

                    uint64_t v48 = v57;
                    objc_autoreleasePoolPop(contexta);
                    uint64_t v47 = v86;
                  }

                  __int128 v84 = [v46 countByEnumeratingWithState:&v92 objects:v112 count:16];
                  if (v84) {
                    continue;
                  }
                  break;
                }

                context = v48;
                id v73 = v79;
                __int128 v45 = v89;
              }

              else
              {
                id v73 = v79;
              }
            }

            else
            {
              __int16 v16 = v85;
              uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue([v85 zoneName]);
              id v75 = sub_1000AA6AC(@"ckksshare", v74);
              __int128 v46 = (id)objc_claimAutoreleasedReturnValue(v75);

              id v73 = v79;
              if (os_log_type_enabled((os_log_t)v46, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 138412546;
                v105 = v34;
                BOOL v106 = 2112;
                v107 = v85;
                _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v46,  OS_LOG_TYPE_DEFAULT,  "No CKKSTLKShares to %@ for %@",  buf,  0x16u);
              }
            }

            uint64_t v33 = v73 + 1;
            a5 = v76;
            BOOL v8 = v81;
          }

          while (v33 != v77);
          __int128 v77 = [obj countByEnumeratingWithState:&v100 objects:v114 count:16];
          uint64_t v21 = context;
        }

        while (v77);
      }

      if (a5)
      {
        id obj = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"No trusted TLKShares for %@",  v16));
        id v29 = 0;
        *a5 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:underlying:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:underlying:",  @"CKKSErrorDomain",  35LL));
LABEL_66:
      }

      else
      {
        id v29 = 0;
      }

      goto LABEL_15;
    }
  }

  __int16 v16 = v85;
  unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue([v85 zoneName]);
  id v18 = sub_1000AA6AC(@"ckksshare", v17);
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);

  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSPeerProviderState currentTrustedPeersError](self, "currentTrustedPeersError"));
    *(_DWORD *)__int128 buf = 138412290;
    v105 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Don't have trusted peers: %@", buf, 0xCu);
  }

  if (!a5) {
    goto LABEL_16;
  }
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSPeerProviderState currentTrustedPeersError](self, "currentTrustedPeersError"));
  uint64_t v22 = @"No trusted peers";
  __int128 v23 = 24LL;
LABEL_14:
  id v29 = 0;
  *a5 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:underlying:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:underlying:",  @"CKKSErrorDomain",  v23,  v22,  v21));
LABEL_15:

LABEL_17:
  return v29;
}

        __int128 v23 = 0LL;
        goto LABEL_174;
      }

      sub_100014958( 11,  (CFTypeRef *)(*(void *)(*(void *)(v4 + 40) + 8LL) + 24LL),  @"Half migrated but obsolete DB found: found 0x%x(0x%x) but 0x%x is needed",  (unsigned __int16)v6,  HIWORD(v6),  v10);
      *(_BYTE *)(*(void *)(*(void *)(v4 + 32) + 8LL) + 24LL) = 0;
      id v19 = v159;
      uint64_t v20 = *(unsigned int *)(v4 + 84);
      uint64_t v21 = 5LL;
LABEL_14:
      uint64_t v22 = 0LL;
    }

    else
    {
      *(_BYTE *)(*(void *)(*(void *)(v4 + 32) + 8LL) + 24LL) = sub_100105418( *(void *)(v4 + 56),  v7,  0LL,  1,  *(void *)(*(void *)(v4 + 40) + 8LL) + 24LL);
      sub_10010FB08(*(void *)(v4 + 56));
      id v19 = v159;
      uint64_t v20 = *(unsigned int *)(v4 + 84);
      uint64_t v22 = *(void *)(*(void *)(*(void *)(v4 + 40) + 8LL) + 24LL);
      uint64_t v21 = 4LL;
    }

    LKAReportKeychainUpgradeOutcomeWithError(v19, v20, v21, v22);
    goto LABEL_16;
  }

  v131 = *(void *)(*(void *)(v4 + 40) + 8LL);
  char v132 = *(const void **)(v131 + 24);
  if (v132)
  {
    *(void *)(v131 + 24) = 0LL;
    CFRelease(v132);
  }

  __int128 v23 = 0LL;
  *(_BYTE *)(*(void *)(*(void *)(v4 + 32) + 8LL) + 24LL) = 1;
LABEL_174:
  if (!*(_BYTE *)(*(void *)(*(void *)(v4 + 32) + 8LL) + 24LL))
  {
    v126 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v127 = *(void *)(*(void *)(*(void *)(v4 + 40) + 8LL) + 24LL);
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v127;
      _os_log_impl( (void *)&_mh_execute_header,  v126,  OS_LOG_TYPE_DEFAULT,  "upgrade: SecDB upgrade failed: %@",  buf,  0xCu);
    }
  }

  if (v23) {
    CFRelease(v23);
  }
  *a2 = *(_BYTE *)(*(void *)(*(void *)(v4 + 32) + 8LL) + 24LL);
}

  id v14 = cf;
  if (cf)
  {
    CFTypeRef cf = 0LL;
    CFRelease(v14);
  }

        if (!v16) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }
    }

    else
    {
      uint64_t v56 = 0LL;
      id v19 = 0;
    }

    *(_DWORD *)&v101[8] = 1;
    *(_DWORD *)&v101[12] = 1;
    *(_DWORD *)unsigned int v101 = 1;
    *(_DWORD *)&v101[4] = 1;
    uint64_t v11 = 1;
    uint64_t v12 = 1;
    int v13 = 1;
    id v14 = 1;
    uint64_t v15 = 1;
    unsigned int v17 = 1;
    uint64_t v20 = 1;
    goto LABEL_142;
  }

  uint64_t v20 = 0;
LABEL_78:

  return v20;
}
}

  if (SOSCircleHasApplicant( -[SOSAccountTrust trustedCircle](self, "trustedCircle"),  -[SOSAccountTrust peerInfo](self, "peerInfo"),  a5)) {
    uint64_t v9 = 5;
  }
  else {
    uint64_t v9 = 1;
  }
LABEL_19:

  return v9;
}

  if (v10) {
    CFRelease(v10);
  }
  return 1LL;
}

      uint64_t v21 = *(uint64_t (**(const void *, uint64_t, CFTypeRef *))(*(void *)(a1 + 48)
                                                                                                  + 144LL))( v13,  v29,  &cf);
      if (v21)
      {
        uint64_t v22 = v21;
        id v18 = sub_1001A5740(a2, v21, (__CFString **)&cf);
        CFRelease(v22);
      }

      else
      {
        id v18 = 0;
      }

      id v19 = v31;
LABEL_20:
      BytePtr = (__int128 *)CFDataGetBytePtr(v16);
      sub_1001A9ECC((char **)v19, BytePtr);
      *((_BYTE *)v19 + 24) = 1;
      if (v17 && v18) {
        goto LABEL_25;
      }
      id v24 = sub_10001267C("SecError");
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412546;
        *(void *)&uint8_t buf[4] = v10;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = cf;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "bad change %@: %@", buf, 0x16u);
      }

      if (v17) {
LABEL_25:
      }
        CFRelease(v16);
      if (cf) {
        CFRelease(cf);
      }
      ++v8;
    }

    while (v7 != v8);
  }

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    memset(buf, 0, sizeof(buf));
    sub_1001AA048((char **)v33);
    sub_1001AA048((char **)v31);
    id v26 = sub_1001AFDF0(*(void *)(a1 + 56));
    id v27 = (uint64_t *)sub_1001AAE7C((uint64_t)v26);
    sub_1001AA664(v27, (unint64_t *)v33, (uint64_t)v31, (char **)buf);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    id v28 = (const void *)sub_1001AB230((uint64_t)buf, *(CFTypeRef **)(a1 + 64));
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v28 != 0LL;
    sub_1001AFD74((__CFArray **)(*(void *)(a1 + 56) + 80LL), v28);
    if (v28) {
      CFRelease(v28);
    }
    free(*(void **)buf);
  }

  free(v33[0]);
  free(v31[0]);
  if (*(_BYTE *)(*(void *)(a1 + 56) + 49LL)) {
    sub_1001A57DC(a2, 799LL, *(__CFString ***)(a1 + 64));
  }
}

  id v19 = sub_10001267C("SecError");
  uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(context.version) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Didn't get machine gestalt! This is going to be ugly.",  (uint8_t *)&context,  2u);
  }

  id v28 = sub_1001C262C(0LL, v21, v22, v23, v24, v25, v26, v27);
  id v29 = objc_claimAutoreleasedReturnValue(v28);
  __int16 v30 = (void *)qword_1002DEEC0;
  qword_1002DEEC0 = v29;

  sub_100190FF0((void *)qword_1002DEEC0, &stru_100293818);
  SOSCloudKeychainSetItemsChangedBlock(&stru_100293858);
LABEL_19:
  [(id)qword_1002DEEC0 setSaveBlock:&stru_1002938C0];
  SOSCloudKeychainRequestEnsurePeerRegistration(v2, 0LL);

  __int128 v31 = dispatch_get_global_queue(0LL, 0LL);
  id v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
  os_state_add_handler(v32, &stru_100293170);

  uint64_t v33 = [(id)qword_1002DEEC0 ghostBustSchedule];
  objc_msgSend((id)qword_1002DEEC0, "setSosCompatibilityMode:", -[OTSOSActualAdapter sosEnabled]_0((uint64_t)v33, v34));
  objc_storeStrong((id *)&qword_1002DEEB0, (id)qword_1002DEEC0);
}

  sub_100199990(v29);
  sub_1001A93D0(v29, (uint64_t)@"AccountName", v4, 0LL);
LABEL_17:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v15 = sub_10001267C("circleop");
  __int16 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Setting account.key_interests_need_updating to true in SOSAccountAssertUserCredentials",  buf,  2u);
  }

  objc_msgSend(v29, "setKey_interests_need_updating:", 1);
  unsigned int v17 = [v29 accountKeyIsTrusted];

  *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = v17;
}

void sub_1000439A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100043D24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_10004404C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100044778( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_100044E84(_Unwind_Exception *a1)
{
}

void sub_10004B2B0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 stopWithEvent:@"OctagonEventReroll" result:v4];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004B308(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if (v5 || (a2 & 1) == 0)
  {
    uint64_t v11 = sub_10001267C("SecError");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v5;
      BOOL v8 = "octagon-remove-recovery-key: failed to remove recovery key: %@";
      uint64_t v9 = v7;
      uint32_t v10 = 12;
      goto LABEL_7;
    }
  }

  else
  {
    id v6 = sub_10001267C("octagon-remove-recovery-key");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12) = 0;
      BOOL v8 = "removed recovery key";
      uint64_t v9 = v7;
      uint32_t v10 = 2;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v12, v10);
    }
  }

  (*(void (**)(void, id))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32), v5);
}

void sub_10004B428(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = sub_10001267C("SecError");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "octagon-recover-with-recovery-key: failed to join with recovery key: %@",  (uint8_t *)&v7,  0xCu);
    }
  }

  else
  {
    id v6 = sub_10001267C("octagon-recover-with-recovery-key");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "successfully joined with recovery key",  (uint8_t *)&v7,  2u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004B554(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = sub_10001267C("SecError");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "octagon-reset-account-cdp-contents: error resetting account cdp contents: %@",  (uint8_t *)&v7,  0xCu);
    }
  }

  else
  {
    id v6 = sub_10001267C("octagon-reset-account-cdp-contents");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "successfully reset account cdp contents",  (uint8_t *)&v7,  2u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004B680(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = sub_10001267C("SecError");
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "octagon-user-controllable-views: error fetching status: %@",  (uint8_t *)&v12,  0xCu);
    }

    id v8 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  else
  {
    uint64_t v9 = sub_10001267C("octagon-user-controllable-views");
    uint32_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = @"paused";
      if (a2) {
        uint64_t v11 = @"enabled";
      }
      int v12 = 138412290;
      id v13 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "successfully fetched status as: %@",  (uint8_t *)&v12,  0xCu);
    }

    id v8 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  v8();
}

void sub_10004B7DC(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = sub_10001267C("SecError");
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "octagon-user-controllable-views: error setting status: %@",  (uint8_t *)&v12,  0xCu);
    }

    id v8 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  else
  {
    uint64_t v9 = sub_10001267C("octagon-user-controllable-views");
    uint32_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = @"paused";
      if (a2) {
        uint64_t v11 = @"enabled";
      }
      int v12 = 138412290;
      id v13 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "successfully set status to: %@",  (uint8_t *)&v12,  0xCu);
    }

    id v8 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  v8();
}

void sub_10004B938(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = sub_10001267C("SecError");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "octagon-remove-escrow-cache: error invalidating escrow cache: %@",  (uint8_t *)&v7,  0xCu);
    }
  }

  else
  {
    id v6 = sub_10001267C("octagon-remove-escrow-caches");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "successfully invalidated escrow cache",  (uint8_t *)&v7,  2u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004BA64(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int v7 = sub_10001267C("SecError");
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      id v11 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "octagon-fetch-escrow-records: error fetching records: %@",  (uint8_t *)&v10,  0xCu);
    }
  }

  else
  {
    uint64_t v9 = sub_10001267C("octagon-fetch-escrow-records");
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v1syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "successfully fetched records",  (uint8_t *)&v10,  2u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004BBA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_10001267C("octagon-ckks");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = @"no error";
    if (v3) {
      id v6 = v3;
    }
    int v7 = 138412290;
    id v8 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "refetch-ckks-policy result: %@",  (uint8_t *)&v7,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10004BC84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10004BC90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004BC9C(id a1, TrustedPeersHelperHealthCheckResult *a2, NSError *a3)
{
  id v3 = a3;
  if (v3)
  {
    id v4 = sub_10001267C("SecError");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      id v11 = v3;
      id v6 = "octagon: error attempting to check octagon health: %@";
      int v7 = v5;
      uint32_t v8 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v10, v8);
    }
  }

  else
  {
    uint64_t v9 = sub_10001267C("octagon");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v1syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0;
      id v6 = "health check success";
      int v7 = v5;
      uint32_t v8 = 2;
      goto LABEL_6;
    }
  }
}

void sub_10004BD98(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  [v5 stopWithEvent:@"OctagonActivityRecreateInheritanceKey" result:v6];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004BE0C(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  [v5 stopWithEvent:@"OctagonEventRecreateInheritanceKey" result:v6];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004BE80(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a3;
  [v4 stopWithEvent:@"OctagonEventCheckInheritanceKey" result:v5];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004BEE8(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 stopWithEvent:@"OctagonEventRemoveInheritanceKey" result:v4];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004BF40(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = sub_10001267C("SecError");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      id v11 = v3;
      id v6 = "octagon, preflight join with inheritance key failed: %@";
      id v7 = v5;
      uint32_t v8 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v10, v8);
    }
  }

  else
  {
    uint64_t v9 = sub_10001267C("octagon-inheritance");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v1syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0;
      id v6 = "preflight join with inheritance key succeeded";
      id v7 = v5;
      uint32_t v8 = 2;
      goto LABEL_6;
    }
  }

  [*(id *)(a1 + 32) stopWithEvent:@"OctagonEventPreflightInheritanceKey" result:v3];
  (*(void (**)(void, id))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), v3);
}

void sub_10004C06C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = sub_10001267C("SecError");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      id v11 = v3;
      id v6 = "octagon, join with inheritance key failed: %@";
      id v7 = v5;
      uint32_t v8 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v10, v8);
    }
  }

  else
  {
    uint64_t v9 = sub_10001267C("octagon-inheritance");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v1syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0;
      id v6 = "join with inheritance key succeeded";
      id v7 = v5;
      uint32_t v8 = 2;
      goto LABEL_6;
    }
  }

  [*(id *)(a1 + 32) stopWithEvent:@"OctagonEventJoinInheritanceKey" result:v3];
  (*(void (**)(void, id))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), v3);
}

void sub_10004C198(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 stopWithEvent:@"OctagonEventStoreInheritanceKey" result:v4];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004C1F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  [v5 stopWithEvent:@"OctagonEventGenerateInheritanceKey" result:v6];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004C264(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  [v5 stopWithEvent:@"OctagonEventCreateInheritanceKey" result:v6];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004C2D8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a3;
  [v4 stopWithEvent:@"OctagonEventCheckCustodianRecoveryKey" result:v5];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004C340(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 stopWithEvent:@"OctagonEventRemoveCustodianRecoveryKey" result:v4];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004C398(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = sub_10001267C("SecError");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      id v11 = v3;
      id v6 = "octagon, preflight join with custodian recovery key failed: %@";
      id v7 = v5;
      uint32_t v8 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v10, v8);
    }
  }

  else
  {
    uint64_t v9 = sub_10001267C("octagon");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v1syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0;
      id v6 = "preflight join with custodian recovery key succeeded";
      id v7 = v5;
      uint32_t v8 = 2;
      goto LABEL_6;
    }
  }

  [*(id *)(a1 + 32) stopWithEvent:@"OctagonEventPreflightCustodianRecoveryKey" result:v3];
  (*(void (**)(void, id))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), v3);
}

void sub_10004C4C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = sub_10001267C("SecError");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      id v11 = v3;
      id v6 = "octagon, join with custodian recovery key failed: %@";
      id v7 = v5;
      uint32_t v8 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v10, v8);
    }
  }

  else
  {
    uint64_t v9 = sub_10001267C("octagon");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v1syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0;
      id v6 = "join with custodian recovery key succeeded";
      id v7 = v5;
      uint32_t v8 = 2;
      goto LABEL_6;
    }
  }

  [*(id *)(a1 + 32) stopWithEvent:@"OctagonEventJoinCustodianRecoveryKey" result:v3];
  (*(void (**)(void, id))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), v3);
}

void sub_10004C5F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  [v5 stopWithEvent:@"OctagonEventCreateCustodianRecoveryKey2" result:v6];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004C664(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!v3)
  {
    id v19 = sub_10001267C("octagon");
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "join with recovery key succeeded", buf, 2u);
    }

    [*(id *)(a1 + 40) stopWithEvent:@"OctagonEventJoinRecoveryKey" result:0];
    uint64_t v21 = *(void (**)(void))(*(void *)(a1 + 72) + 16LL);
    goto LABEL_19;
  }

  if ([v3 code] != (id)34 && objc_msgSend(v4, "code") != (id)32
    || (id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 domain]),
        unsigned int v6 = [v5 isEqualToString:@"com.apple.security.trustedpeers.container"],
        v5,
        !v6))
  {
    uint64_t v15 = sub_10001267C("SecError");
    __int16 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v29 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "octagon, join with recovery key failed: %@",  buf,  0xCu);
    }

    unsigned int v17 = *(void **)(a1 + 40);
    id v18 = @"OctagonEventJoinRecoveryKeyFailed";
    goto LABEL_18;
  }

  unsigned __int8 v7 = [*(id *)(a1 + 32) isFullPeer];
  uint32_t v8 = sub_10001267C("SecError");
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if ((v7 & 1) == 0)
  {
    if (v10)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: recovery key is not enrolled in octagon, and current device can't set recovery keys",  buf,  2u);
    }

    unsigned int v17 = *(void **)(a1 + 40);
    id v18 = @"OctagonEventJoinRecoveryKeyCircleResetFailed";
LABEL_18:
    [v17 stopWithEvent:v18 result:v4];
    uint64_t v21 = *(void (**)(void))(*(void *)(a1 + 72) + 16LL);
LABEL_19:
    v21();
    goto LABEL_20;
  }

  if (v10)
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon, recovery key is not enrolled in octagon, resetting octagon circle",  buf,  2u);
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "loggerClass"), "logger"));
  [v11 logResultForEvent:@"OctagonEventJoinRecoveryKeyCircleReset" hardFailure:0 result:v4];

  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_10004C978;
  v22[3] = &unk_100284038;
  int v12 = *(void **)(a1 + 48);
  id v23 = *(id *)(a1 + 40);
  id v13 = *(id *)(a1 + 72);
  uint64_t v14 = *(void *)(a1 + 32);
  id v27 = v13;
  uint64_t v24 = v14;
  id v25 = *(id *)(a1 + 56);
  id v26 = *(id *)(a1 + 64);
  [v12 rpcResetAndEstablish:5 idmsTargetContext:0 idmsCuttlefishPassword:0 notifyIdMS:0 accountSettings:0 isGuitarfish:0 reply:v22];

LABEL_20:
}

void sub_10004C978(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = sub_10001267C("SecError");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "octagon, failed to reset octagon", buf, 2u);
    }

    [*(id *)(a1 + 32) stopWithEvent:@"OctagonEventJoinRecoveryKeyCircleResetFailed" result:v3];
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    unsigned int v6 = sub_10001267C("octagon");
    unsigned __int8 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "attempting enrolling recovery key", buf, 2u);
    }

    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 56);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_10004CAE8;
    v11[3] = &unk_100285D40;
    BOOL v10 = *(void **)(a1 + 40);
    id v12 = *(id *)(a1 + 32);
    id v13 = *(id *)(a1 + 64);
    [v10 createRecoveryKey:v8 recoveryKey:v9 reply:v11];
  }
}

void sub_10004CAE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = sub_10001267C("SecError");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412290;
      id v10 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "octagon, failed to enroll new recovery key: %@",  (uint8_t *)&v9,  0xCu);
    }

    [*(id *)(a1 + 32) stopWithEvent:@"OctagonEventJoinRecoveryKeyEnrollFailed" result:v3];
    unsigned int v6 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  else
  {
    unsigned __int8 v7 = sub_10001267C("octagon");
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "successfully enrolled recovery key",  (uint8_t *)&v9,  2u);
    }

    [*(id *)(a1 + 32) stopWithEvent:@"OctagonEventRecoveryKey" result:0];
    unsigned int v6 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  v6();
}

void sub_10004CC3C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 stopWithEvent:@"OctagonEventRecoveryKey" result:v4];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004CC94(id a1)
{
  v3[0] = OTCliqueCDPContextTypeNone;
  v3[1] = OTCliqueCDPContextTypeSignIn;
  v3[2] = OTCliqueCDPContextTypeRepair;
  v3[3] = OTCliqueCDPContextTypeFinishPasscodeChange;
  v3[4] = OTCliqueCDPContextTypeUpdatePasscode;
  void v3[5] = OTCliqueCDPContextTypeConfirmPasscodeCyrus;
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v3, 6LL));
  uint64_t v2 = (void *)qword_1002DE870;
  qword_1002DE870 = v1;
}

id sub_10004CD54(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue( [WeakRetained contextForContainerName:@"com.apple.security.keychain" contextID:@"defaultContext"]);
  uint64_t v1 = sub_10001267C("octagon-analytics");
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412546;
    *(void *)&uint8_t buf[4] = @"com.apple.security.keychain";
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = @"defaultContext";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Reporting analytics for container: %@, context: %@",  buf,  0x16u);
  }

  id v120 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sosAdapter]);
  id v139 = 0LL;
  id v4 = [v3 circleStatus:&v139];
  id v114 = v139;

  if (v114)
  {
    id v5 = sub_10001267C("octagon-analytics");
    unsigned int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v114;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Error fetching SOS status: %@", buf, 0xCu);
    }
  }

  unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v4));
  [v120 setObject:v7 forKeyedSubscript:@"OASOSStatus"];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  BOOL v112 = (void *)objc_claimAutoreleasedReturnValue([v8 datePropertyForKey:@"OctagonEventUpgradePreflightPreapprovedJoin"]);

  int v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  +[CKKSAnalytics fuzzyDaysSinceDate:](&OBJC_CLASS___CKKSAnalytics, "fuzzyDaysSinceDate:", v112)));
  [v120 setObject:v9 forKeyedSubscript:@"OALastPPJ"];

  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[OTStates OctagonStateMap](&OBJC_CLASS___OTStates, "OctagonStateMap"));
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v116 stateMachine]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 currentState]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v12]);
  [v120 setObject:v13 forKeyedSubscript:@"OASMState"];

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v116 accountMetadataStore]);
  id v138 = 0LL;
  v117 = (void *)objc_claimAutoreleasedReturnValue([v14 loadOrCreateAccountMetadata:&v138]);
  id v113 = v138;

  if (v117 && !v113) {
    goto LABEL_12;
  }
  uint64_t v15 = sub_10001267C("octagon-analytics");
  __int16 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    *(void *)&uint8_t buf[4] = v113;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Error fetching Octagon metadata: %@",  buf,  0xCu);
  }

  if (v117)
  {
LABEL_12:
    unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [v117 icloudAccountState]));
    [v120 setObject:v17 forKeyedSubscript:@"OAiC"];

    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v117 cdpState]));
    [v120 setObject:v18 forKeyedSubscript:@"OACDPStatus"];

    id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [v117 trustState]));
    [v120 setObject:v19 forKeyedSubscript:@"OATrust"];
  }

  else
  {
    [v120 setObject:0 forKeyedSubscript:@"OAiC"];
    [v120 setObject:0 forKeyedSubscript:@"OACDPStatus"];
    [v120 setObject:0 forKeyedSubscript:@"OATrust"];
  }

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v117 getTPSyncingPolicy]);
  xpc_object_t v111 = v20;
  if (v20)
  {
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v20 syncUserControllableViewsAsBoolean]));
    [v120 setObject:v21 forKeyedSubscript:@"OAUserViewsSyncing"];
  }

  else
  {
    [v120 setObject:0 forKeyedSubscript:@"OAUserViewsSyncing"];
  }

  v110 = (void *)objc_claimAutoreleasedReturnValue([v116 currentMemoizedLastHealthCheck]);
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  +[CKKSAnalytics fuzzyDaysSinceDate:](&OBJC_CLASS___CKKSAnalytics, "fuzzyDaysSinceDate:", v110)));
  [v120 setObject:v22 forKeyedSubscript:@"OAHealthCheck"];

  id v23 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  v109 = (void *)objc_claimAutoreleasedReturnValue([v23 datePropertyForKey:@"OALastKSR"]);

  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  +[CKKSAnalytics fuzzyDaysSinceDate:](&OBJC_CLASS___CKKSAnalytics, "fuzzyDaysSinceDate:", v109)));
  [v120 setObject:v24 forKeyedSubscript:@"OALastKSR"];

  if (v117 && [v117 icloudAccountState] == 2)
  {
    id v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [v117 attemptedJoin]));
    [v120 setObject:v25 forKeyedSubscript:@"OAAttemptedJoin"];

    id v26 = (void *)objc_claimAutoreleasedReturnValue([v116 authKitAdapter]);
    id v137 = 0LL;
    id v27 = (void *)objc_claimAutoreleasedReturnValue( [v26 machineID:0 flowID:0 deviceSessionID:0 canSendMetrics:0 error:&v137]);
    id v28 = v137;

    if (v28)
    {
      id v29 = sub_10001267C("octagon-analytics");
      __int16 v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = v113;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Error fetching machine ID: %@", buf, 0xCu);
      }
    }

    __int128 v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v27 != 0LL));
    [v120 setObject:v31 forKeyedSubscript:@"OAMIDPresent"];

    if (v27)
    {
      id v136 = 0LL;
      id v32 = [v116 machineIDOnMemoizedList:v27 error:&v136];
      id v33 = v136;
      if (v33)
      {
        id v34 = sub_10001267C("octagon-analytics");
        id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          *(void *)&uint8_t buf[4] = v33;
          _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "Error fetching 'mid on list': %@",  buf,  0xCu);
        }
      }

      else
      {
        id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v32));
        [v120 setObject:v35 forKeyedSubscript:@"OAMIDOnList"];
      }

      id v135 = 0LL;
      __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v116 egoPeerStatus:&v135]);
      id v37 = v135;
      id obj = v37;
      if (!v36 || v37)
      {
        v67 = sub_10001267C("octagon-analytics");
        id v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
        if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          *(void *)&uint8_t buf[4] = obj;
          _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "Error fetching how many peers have our MID: %@",  buf,  0xCu);
        }
      }

      else
      {
        __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([v36 peerCountsByMachineID]);
        uint64_t v39 = objc_claimAutoreleasedReturnValue([v38 objectForKeyedSubscript:v27]);
        __int128 v40 = (void *)v39;
        __int128 v41 = &off_1002AD2F0;
        if (v39) {
          __int128 v41 = (_UNKNOWN **)v39;
        }
        v107 = v41;

        uint64_t v42 = sub_10001267C("octagon-metrics");
        __int16 v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = v27;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v107;
          _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "Number of peers with machineID (%@): %@",  buf,  0x16u);
        }

        [v120 setObject:v107 forKeyedSubscript:@"OAPeersWithMID"];
        id v44 = (void *)objc_claimAutoreleasedReturnValue([v36 egoPeerMachineID]);
        __int128 v45 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v27 isEqualToString:v44]));
        [v120 setObject:v45 forKeyedSubscript:@"OAMIDMatchesCurrentMID"];

        __int128 v46 = sub_10001267C("octagon-metrics");
        uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v120 objectForKeyedSubscript:@"OAMIDMatchesCurrentMID"]);
          uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v36 egoPeerMachineID]);
          *(_DWORD *)__int128 buf = 138412802;
          *(void *)&uint8_t buf[4] = v48;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v27;
          *(_WORD *)&buf[22] = 2112;
          BOOL v148 = v49;
          _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "MID match (current vs Octagon peer): %@, %@, %@",  buf,  0x20u);
        }

        __int128 v133 = 0u;
        __int128 v134 = 0u;
        __int128 v131 = 0u;
        __int128 v132 = 0u;
        uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v36 peerCountsByMachineID]);
        unsigned int v51 = (void *)objc_claimAutoreleasedReturnValue([v50 allValues]);

        uint64_t v52 = 0LL;
        id v53 = [v51 countByEnumeratingWithState:&v131 objects:v146 count:16];
        if (v53)
        {
          uint64_t v54 = *(void *)v132;
          do
          {
            for (uint64_t i = 0LL; i != v53; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v132 != v54) {
                objc_enumerationMutation(v51);
              }
              v52 += (uint64_t)[*(id *)(*((void *)&v131 + 1) + 8 * (void)i) longValue];
            }

            id v53 = [v51 countByEnumeratingWithState:&v131 objects:v146 count:16];
          }

          while (v53);
        }

        __int128 v129 = 0u;
        __int128 v130 = 0u;
        __int128 v127 = 0u;
        __int128 v128 = 0u;
        uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v36 viablePeerCountsByModelID]);
        unsigned int v57 = (void *)objc_claimAutoreleasedReturnValue([v56 allValues]);

        uint64_t v58 = 0LL;
        id v59 = [v57 countByEnumeratingWithState:&v127 objects:v145 count:16];
        if (v59)
        {
          uint64_t v60 = *(void *)v128;
          do
          {
            for (j = 0LL; j != v59; j = (char *)j + 1)
            {
              if (*(void *)v128 != v60) {
                objc_enumerationMutation(v57);
              }
              v58 += (uint64_t)[*(id *)(*((void *)&v127 + 1) + 8 * (void)j) longValue];
            }

            id v59 = [v57 countByEnumeratingWithState:&v127 objects:v145 count:16];
          }

          while (v59);
        }

        int v62 = sub_10001267C("octagon-metrics");
        int v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 134218240;
          *(void *)&uint8_t buf[4] = v52;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v58;
          _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "Peers: %zu, viable peers %zu",  buf,  0x16u);
        }

        int v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", v52));
        [v120 setObject:v64 forKeyedSubscript:@"OAnPeers"];

        uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", v58));
        [v120 setObject:v65 forKeyedSubscript:@"OAnViablePeers"];

        id v66 = v107;
      }
    }
  }

  BOOL v68 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  v108 = (void *)objc_claimAutoreleasedReturnValue([v68 datePropertyForKey:@"OALastCFU"]);

  id v69 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  +[CKKSAnalytics fuzzyDaysSinceDate:](&OBJC_CLASS___CKKSAnalytics, "fuzzyDaysSinceDate:", v108)));
  [v120 setObject:v69 forKeyedSubscript:@"OALastCFU"];

  __int128 v125 = 0u;
  __int128 v126 = 0u;
  __int128 v123 = 0u;
  __int128 v124 = 0u;
  id obja = (id)objc_claimAutoreleasedReturnValue([WeakRetained cdpContextTypes]);
  id v70 = [obja countByEnumeratingWithState:&v123 objects:v144 count:16];
  if (v70)
  {
    uint64_t v71 = *(void *)v124;
    do
    {
      for (k = 0LL; k != v70; k = (char *)k + 1)
      {
        if (*(void *)v124 != v71) {
          objc_enumerationMutation(obja);
        }
        uint64_t v73 = *(void *)(*((void *)&v123 + 1) + 8LL * (void)k);
        uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@%@",  @"OACDPStateRun",  v73));
        id v75 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@%@Tries",  @"OACDPStateRun",  v73));
        __int128 v76 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
        __int128 v77 = (void *)objc_claimAutoreleasedReturnValue([v76 datePropertyForKey:v74]);

        if (v77)
        {
          __int128 v78 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  +[CKKSAnalytics fuzzyDaysSinceDate:]( &OBJC_CLASS___CKKSAnalytics,  "fuzzyDaysSinceDate:",  v77)));
          [v120 setObject:v78 forKeyedSubscript:v74];

          __int128 v79 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
          id v80 = (void *)objc_claimAutoreleasedReturnValue([v79 numberPropertyForKey:v75]);
          [v120 setObject:v80 forKeyedSubscript:v75];
        }
      }

      id v70 = [obja countByEnumeratingWithState:&v123 objects:v144 count:16];
    }

    while (v70);
  }

  id v122 = v114;
  __int128 v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(objc_msgSend(WeakRetained, "escrowRequestClass"), "request:", &v122));
  id v82 = v122;

  if (v81)
  {
    id v121 = v82;
    id v83 = [v81 pendingEscrowUpload:&v121];
    id v84 = v121;

    __int128 v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v83));
    [v120 setObject:v85 forKeyedSubscript:@"OAPrerecordPending"];

    if (!v84) {
      goto LABEL_74;
    }
    __int128 v86 = sub_10001267C("octagon-analytics");
    __int128 v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v84;
      _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_DEFAULT,  "Error fetching pendingEscrowUpload status: %@",  buf,  0xCu);
    }
  }

  else
  {
    __int128 v88 = sub_10001267C("octagon-analytics");
    __int128 v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v82;
      _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_DEFAULT,  "Error fetching escrowRequestClass: %@",  buf,  0xCu);
    }

    id v84 = v82;
  }

LABEL_74:
  __int128 v89 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore defaultStore](&OBJC_CLASS___ACAccountStore, "defaultStore"));
  __int128 v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "aa_primaryAppleAccount"));
  __int128 v91 = v90;
  if (v90)
  {
    uint64_t v92 = ACAccountDataclassKeyValue;
    uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v90 isProvisionedForDataclass:ACAccountDataclassKeyValue]));
    [v120 setObject:v93 forKeyedSubscript:@"OADCKVSProvisioned"];

    v94 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v91 isEnabledForDataclass:v92]));
    [v120 setObject:v94 forKeyedSubscript:@"OADCKVSEnabled"];

    uint64_t v95 = ACAccountDataclassKeychainSync;
    unsigned int v96 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v91 isProvisionedForDataclass:ACAccountDataclassKeychainSync]));
    [v120 setObject:v96 forKeyedSubscript:@"OADCKCSProvisioned"];

    CFDataRef v97 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v91 isEnabledForDataclass:v95]));
    [v120 setObject:v97 forKeyedSubscript:@"OADCKCSEnabled"];

    uint64_t v98 = ACAccountDataclassCKDatabaseService;
    v99 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v91 isProvisionedForDataclass:ACAccountDataclassCKDatabaseService]));
    [v120 setObject:v99 forKeyedSubscript:@"OADCCKProvisioned"];

    BOOL v100 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v91 isEnabledForDataclass:v98]));
    [v120 setObject:v100 forKeyedSubscript:@"OADCCKEnabled"];

    unsigned int v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v91, "aa_altDSID"));
    if (v101)
    {
      uint64_t v140 = 0LL;
      CFDataRef v141 = &v140;
      uint64_t v142 = 0x2050000000LL;
      char v102 = (void *)qword_1002DE898;
      uint64_t v143 = qword_1002DE898;
      if (!qword_1002DE898)
      {
        *(void *)__int128 buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3221225472LL;
        *(void *)&uint8_t buf[16] = sub_10004E030;
        BOOL v148 = &unk_100292300;
        v149 = &v140;
        sub_10004E030((uint64_t)buf);
        char v102 = (void *)v141[3];
      }

      id v103 = v102;
      _Block_object_dispose(&v140, 8);
      v104 = (void *)objc_claimAutoreleasedReturnValue([v103 getAcceptedTermsForAltDSID:v101 withError:0]);
      v105 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v104 != 0LL));
      [v120 setObject:v105 forKeyedSubscript:@"OASecureBackupTermsAccepted"];
    }
  }

  return v120;
}

void sub_10004DFAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

id sub_10004DFCC(uint64_t a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) contextForContainerName:@"com.apple.security.keychain" contextID:@"defaultContext"]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 followupHandler]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 sfaStatus]);

  return v3;
}

Class sub_10004E030(uint64_t a1)
{
  unsigned int v6 = 0LL;
  if (!qword_1002DE8A0)
  {
    __int128 v7 = off_100284150;
    uint64_t v8 = 0LL;
    qword_1002DE8A0 = _sl_dlopen(&v7, &v6);
  }

  if (!qword_1002DE8A0)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *CloudServicesLibrary(void)"));
    objc_msgSend( v3,  "handleFailureInFunction:file:lineNumber:description:",  v4,  @"OTManager.m",  118,  @"%s",  v6);

    goto LABEL_10;
  }

  if (v6) {
    free(v6);
  }
  Class result = objc_getClass("SecureBackup");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "Class getSecureBackupClass(void)_block_invoke"));
    objc_msgSend( v3,  "handleFailureInFunction:file:lineNumber:description:",  v5,  @"OTManager.m",  119,  @"Unable to find class %s",  "SecureBackup");

LABEL_10:
    __break(1u);
  }

  qword_1002DE898 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

void sub_10004E1CC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 stopWithEvent:@"OctagonEventBottledPeerRestore" result:v4];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void *sub_10004E224()
{
  id v4 = 0LL;
  if (!qword_1002DE880)
  {
    __int128 v5 = off_100284138;
    uint64_t v6 = 0LL;
    qword_1002DE880 = _sl_dlopen(&v5, &v4);
  }

  uint64_t v0 = (void *)qword_1002DE880;
  if (!qword_1002DE880)
  {
    uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *KeychainCircleLibrary(void)"));
    objc_msgSend( v0,  "handleFailureInFunction:file:lineNumber:description:",  v3,  @"OTManager.m",  110,  @"%s",  v4);

    __break(1u);
    goto LABEL_7;
  }

  uint64_t v1 = v4;
  if (v4) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void sub_10004E328(void *a1, void *a2, void *a3, void *a4)
{
  if (!a4) {
    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
  }
  __int128 v7 = (void *)a1[4];
  id v8 = a4;
  id v9 = a3;
  id v10 = a2;
  [v7 setSessionMetrics:0];
  unint64_t Nanoseconds = _OctagonSignpostGetNanoseconds(a1[7], a1[8]);
  uint64_t v12 = _OctagonSignpostLogSystem(Nanoseconds);
  id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  uint64_t v14 = v13;
  os_signpost_id_t v15 = a1[7];
  if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
  {
    int v16 = *(unsigned __int8 *)(*(void *)(a1[6] + 8LL) + 24LL);
    int v21 = 67240192;
    LODWORD(v22) = v16;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v14,  OS_SIGNPOST_INTERVAL_END,  v15,  "PairingChannelAcceptorVoucher",  " OctagonSignpostNamePairingChannelAcceptorVoucher=%{public,signpost.telemetry:number1,name=OctagonSignpostNamePair ingChannelAcceptorVoucher}d ",  (uint8_t *)&v21,  8u);
  }

  uint64_t v18 = _OctagonSignpostLogSystem(v17);
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = 134218496;
    int v20 = *(unsigned __int8 *)(*(void *)(a1[6] + 8LL) + 24LL);
    uint64_t v22 = a1[7];
    __int16 v23 = 2048;
    double v24 = (double)Nanoseconds / 1000000000.0;
    __int16 v25 = 1026;
    int v26 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs: PairingChannelAcceptorVoucher  OctagonSignpostNamePairingChannelAcceptorVoucher=%{public,signpost. telemetry:number1,name=OctagonSignpostNamePairingChannelAcceptorVoucher}d ",  (uint8_t *)&v21,  0x1Cu);
  }

  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_10004E500(void *a1, uint64_t a2, void *a3)
{
  if (!a3) {
    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
  }
  id v4 = (void *)a1[4];
  id v5 = a3;
  [v4 setSessionMetrics:0];
  unint64_t Nanoseconds = _OctagonSignpostGetNanoseconds(a1[7], a1[8]);
  uint64_t v7 = _OctagonSignpostLogSystem(Nanoseconds);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  os_signpost_id_t v10 = a1[7];
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    int v11 = *(unsigned __int8 *)(*(void *)(a1[6] + 8LL) + 24LL);
    int v16 = 67240192;
    LODWORD(v17) = v11;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_INTERVAL_END,  v10,  "PairingChannelAcceptorEpoch",  " OctagonSignpostNamePairingChannelAcceptorEpoch=%{public,signpost.telemetry:number1,name=OctagonSignpostNamePairin gChannelAcceptorEpoch}d ",  (uint8_t *)&v16,  8u);
  }

  uint64_t v13 = _OctagonSignpostLogSystem(v12);
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 134218496;
    int v15 = *(unsigned __int8 *)(*(void *)(a1[6] + 8LL) + 24LL);
    uint64_t v17 = a1[7];
    __int16 v18 = 2048;
    double v19 = (double)Nanoseconds / 1000000000.0;
    __int16 v20 = 1026;
    int v21 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs: PairingChannelAcceptorEpoch  OctagonSignpostNamePairingChannelAcceptorEpoch=%{public,signpost.tele metry:number1,name=OctagonSignpostNamePairingChannelAcceptorEpoch}d ",  (uint8_t *)&v16,  0x1Cu);
  }

  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_10004E6B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    [*(id *)(a1 + 32) clearPairingUUID];
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
  }

  [*(id *)(a1 + 32) setSessionMetrics:0];
  unint64_t Nanoseconds = _OctagonSignpostGetNanoseconds(*(void *)(a1 + 56), *(void *)(a1 + 64));
  uint64_t v5 = _OctagonSignpostLogSystem(Nanoseconds);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = v6;
  os_signpost_id_t v8 = *(void *)(a1 + 56);
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    int v9 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    int v14 = 67240192;
    LODWORD(v15) = v9;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v7,  OS_SIGNPOST_INTERVAL_END,  v8,  "PairingChannelInitiatorJoinOctagon",  " OctagonSignpostNamePairingChannelInitiatorJoinOctagon=%{public,signpost.telemetry:number1,name=OctagonSignpostNam ePairingChannelInitiatorJoinOctagon}d ",  (uint8_t *)&v14,  8u);
  }

  uint64_t v11 = _OctagonSignpostLogSystem(v10);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 134218496;
    int v13 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    uint64_t v15 = *(void *)(a1 + 56);
    __int16 v16 = 2048;
    double v17 = (double)Nanoseconds / 1000000000.0;
    __int16 v18 = 1026;
    int v19 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs: PairingChannelInitiatorJoinOctagon  OctagonSignpostNamePairingChannelInitiatorJoinOctagon=%{public ,signpost.telemetry:number1,name=OctagonSignpostNamePairingChannelInitiatorJoinOctagon}d ",  (uint8_t *)&v14,  0x1Cu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004E85C(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  if (!a7) {
    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
  }
  int v13 = (void *)a1[4];
  id v14 = a7;
  id v15 = a6;
  id v16 = a5;
  id v17 = a4;
  id v18 = a3;
  id v19 = a2;
  [v13 setSessionMetrics:0];
  unint64_t Nanoseconds = _OctagonSignpostGetNanoseconds(a1[7], a1[8]);
  uint64_t v21 = _OctagonSignpostLogSystem(Nanoseconds);
  uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  __int16 v23 = v22;
  os_signpost_id_t v24 = a1[7];
  if (v24 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v22))
  {
    int v25 = *(unsigned __int8 *)(*(void *)(a1[6] + 8LL) + 24LL);
    int v30 = 67240192;
    LODWORD(v31) = v25;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v23,  OS_SIGNPOST_INTERVAL_END,  v24,  "PairingChannelInitiatorPrepare",  " OctagonSignpostNamePairingChannelInitiatorPrepare=%{public,signpost.telemetry:number1,name=OctagonSignpostNamePai ringChannelInitiatorPrepare}d ",  (uint8_t *)&v30,  8u);
  }

  uint64_t v27 = _OctagonSignpostLogSystem(v26);
  id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    int v30 = 134218496;
    int v29 = *(unsigned __int8 *)(*(void *)(a1[6] + 8LL) + 24LL);
    uint64_t v31 = a1[7];
    __int16 v32 = 2048;
    double v33 = (double)Nanoseconds / 1000000000.0;
    __int16 v34 = 1026;
    int v35 = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "END [%lld] %fs: PairingChannelInitiatorPrepare  OctagonSignpostNamePairingChannelInitiatorPrepare=%{public,signpos t.telemetry:number1,name=OctagonSignpostNamePairingChannelInitiatorPrepare}d ",  (uint8_t *)&v30,  0x1Cu);
  }

  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_10004EA78(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  int v9 = *(void **)(a1 + 32);
  id v10 = a5;
  id v11 = a4;
  id v12 = a3;
  id v13 = a2;
  [v9 stopWithEvent:@"OctagonEventFetchEscrowContents" result:v10];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004EB1C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = *(void **)(a1 + 32);
  id v8 = a4;
  id v9 = a3;
  id v10 = a2;
  [v7 stopWithEvent:@"OctagonEventFetchAllBottles" result:v8];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004EBAC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 stopWithEvent:@"OctagonEventRemoveFriendsInClique" result:v4];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004EC04(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 stopWithEvent:@"OctagonEventLeaveClique" result:v4];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004EC5C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 stopWithEvent:@"OctagonEventEstablish" result:v4];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_10004ECB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004ECC0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 stopWithEvent:@"OctagonEventResetAndEstablish" result:v4];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_10004ED18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004ED28(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v12 = a3;
  id v13 = a7;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a4, "allValues", 0));
  id v15 = [v14 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = 0LL;
    uint64_t v18 = *(void *)v23;
    do
    {
      for (uint64_t i = 0LL; i != v16; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v23 != v18) {
          objc_enumerationMutation(v14);
        }
        v17 += (uint64_t)[*(id *)(*((void *)&v22 + 1) + 8 * (void)i) longValue];
      }

      id v16 = [v14 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }

    while (v16);
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  uint64_t v20 = *(void *)(a1 + 32);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", v17));
  (*(void (**)(uint64_t, uint64_t, id, void *, uint64_t, id))(v20 + 16))(v20, a2, v12, v21, a5, v13);
}

void sub_10004EEA4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  uint64_t v6 = CKXPCSuitableError(a3);
  id v7 = (id)objc_claimAutoreleasedReturnValue(v6);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v7);
}

void sub_10004EF08(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contexts]);
  [v1 removeAllObjects];
}

uint64_t sub_10004EF38(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_10004EF48(uint64_t a1)
{
}

void sub_10004EF50(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 40);
  uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  *(void *)(a1 + 32),  *(void *)(a1 + 40)));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) contexts]);
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v52]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 120) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v4;

  if (!*(void *)(*(void *)(*(void *)(a1 + 120) + 8LL) + 40LL) && *(_BYTE *)(a1 + 128))
  {
    id v7 = objc_alloc(&OBJC_CLASS___CKKSCuttlefishAdapter);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) cuttlefishXPCConnection]);
    id v9 = -[CKKSCuttlefishAdapter initWithConnection:](v7, "initWithConnection:", v8);

    id v10 = *(void **)(a1 + 56);
    if (v10)
    {
      uint64_t v11 = objc_claimAutoreleasedReturnValue([v10 makeCKContainer]);
      id v12 = objc_alloc(&OBJC_CLASS___CKKSAccountStateTracker);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) cloudKitClassDependencies]);
      id v14 = -[CKKSAccountStateTracker init:nsnotificationCenterClass:]( v12,  "init:nsnotificationCenterClass:",  v11,  [v13 nsnotificationCenterClass]);
    }

    else
    {
      id v14 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) accountStateTracker]);
      uint64_t v11 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) cloudKitContainer]);
    }

    unsigned int v51 = v9;
    if (qword_1002DEB70 != -1) {
      dispatch_once(&qword_1002DEB70, &stru_10028EFA8);
    }
    uint64_t v49 = (void *)v11;
    uint64_t v50 = v14;
    if (byte_1002DEB68
      || [*(id *)(a1 + 32) isEqualToString:@"com.apple.security.keychain"]
      && [*v2 isEqualToString:@"defaultContext"])
    {
      unsigned int v15 = [*(id *)(a1 + 40) isEqualToString:@"defaultContext"];
      id v16 = (id *)off_1002904A8;
      if (!v15) {
        id v16 = (id *)(a1 + 40);
      }
      id v17 = *v16;
      uint64_t v47 = objc_alloc(&OBJC_CLASS___CKKSKeychainView);
      uint64_t v18 = *(void *)(a1 + 56);
      id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) lockStateTracker]);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) reachabilityTracker]);
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) savedTLKNotifier]);
      __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) cloudKitClassDependencies]);
      __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) personaAdapter]);
      uint64_t v39 = -[CKKSKeychainView initWithContainer:contextID:activeAccount:accountTracker:lockStateTracker:reachabilityTracker:savedTLKNotifier:cloudKitClassDependencies:personaAdapter:accountsAdapter:cuttlefishAdapter:]( v47,  "initWithContainer:contextID:activeAccount:accountTracker:lockStateTracker:reachabilityTracker:savedTLKNoti fier:cloudKitClassDependencies:personaAdapter:accountsAdapter:cuttlefishAdapter:",  v11,  v17,  v18,  v14,  v19,  v20,  v21,  v22,  v23,  *(void *)(a1 + 64),  v51);
    }

    else
    {
      uint64_t v39 = 0LL;
    }

    __int128 v24 = objc_alloc(&OBJC_CLASS___OTCuttlefishContext);
    uint64_t v46 = *(void *)(a1 + 32);
    uint64_t v48 = v24;
    uint64_t v45 = *(void *)(a1 + 40);
    uint64_t v44 = *(void *)(a1 + 56);
    __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) cuttlefishXPCConnection]);
    uint64_t v42 = *(void *)(a1 + 64);
    uint64_t v43 = *(void *)(a1 + 72);
    uint64_t v41 = *(void *)(a1 + 80);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) personaAdapter]);
    __int128 v40 = *(_OWORD *)(a1 + 88);
    uint64_t v27 = *(void *)(a1 + 104);
    id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) reachabilityTracker]);
    uint64_t v29 = *(void *)(a1 + 112);
    id v30 = [*(id *)(a1 + 48) apsConnectionClass];
    id v31 = [*(id *)(a1 + 48) escrowRequestClass];
    id v32 = [*(id *)(a1 + 48) notifierClass];
    double v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) cdpd]);
    __int16 v34 = -[OTCuttlefishContext initWithContainerName:contextID:activeAccount:cuttlefish:ckksAccountSync:sosAdapter:accountsAdapter:authKitAdapter:personaAdapter:tooManyPeersAdapter:tapToRadarAdapter:lockStateTracker:reachabilityTracker:accountStateTracker:deviceInformationAdapter:apsConnectionClass:escrowRequestClass:notifierClass:cdpd:]( v48,  "initWithContainerName:contextID:activeAccount:cuttlefish:ckksAccountSync:sosAdapter:accountsAdapter:authKitA dapter:personaAdapter:tooManyPeersAdapter:tapToRadarAdapter:lockStateTracker:reachabilityTracker:accountStat eTracker:deviceInformationAdapter:apsConnectionClass:escrowRequestClass:notifierClass:cdpd:",  v46,  v45,  v44,  v25,  v39,  v43,  v42,  v41,  v26,  v40,  v27,  v28,  v50,  v29,  v30,  v31,  v32,  v33);
    uint64_t v35 = *(void *)(*(void *)(a1 + 120) + 8LL);
    __int128 v36 = *(void **)(v35 + 40);
    *(void *)(v35 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v34;

    uint64_t v37 = *(void *)(*(void *)(*(void *)(a1 + 120) + 8LL) + 40LL);
    __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) contexts]);
    [v38 setObject:v37 forKeyedSubscript:v52];
  }
}

void sub_10004F360(uint64_t a1)
{
  uint64_t v1 = a1;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contexts]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 allValues]);

  id obj = v3;
  id v4 = [v3 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v24;
    do
    {
      id v7 = 0LL;
      id v19 = v5;
      do
      {
        if (*(void *)v24 != v6) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)v7);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 ckks]);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 container]);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 40) container]);
        if ([v10 isEqual:v11])
        {
          id v18 = v8;
          __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v8 ckks]);
          id v12 = (void *)objc_claimAutoreleasedReturnValue([v22 operationDependencies]);
          id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 contextID]);
          uint64_t v14 = v1;
          unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 40) operationDependencies]);
          uint64_t v16 = v6;
          id v17 = (void *)objc_claimAutoreleasedReturnValue([v15 contextID]);
          unsigned int v21 = [v13 isEqualToString:v17];

          uint64_t v6 = v16;
          uint64_t v1 = v14;
          id v5 = v19;

          if (v21)
          {
            objc_storeStrong((id *)(*(void *)(*(void *)(v1 + 48) + 8LL) + 40LL), v18);
            goto LABEL_12;
          }
        }

        else
        {
        }

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
    }

    while (v5);
  }

void sub_10004F578(uint64_t a1)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  *(void *)(a1 + 32),  *(void *)(a1 + 40)));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) contexts]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v7]);

  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 stateMachine]);
    [v4 haltOperation];

    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 ckks]);
    [v5 halt];
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) contexts]);
  [v6 setObject:0 forKeyedSubscript:v7];
}

void sub_10004F648(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contexts]);
  uint64_t v2 = objc_claimAutoreleasedReturnValue([v5 allValues]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v2;
}

void sub_10004F69C(uint64_t a1)
{
  uint64_t v2 = sub_10001267C("octagon");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "circle changed notification called, checking trust state",  v6,  2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = objc_alloc_init(&OBJC_CLASS___OTControlArguments);
  [WeakRetained moveToCheckTrustedStateForArguments:v5];
}

void sub_10004F73C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained viewManager]);
  [v1 notifyNewTLKsInKeychain];
}

void sub_10004F780(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained viewManager]);
  [v1 notifyNewTLKsInKeychain];
}

void sub_10004F914(_Unwind_Exception *a1)
{
}

void sub_10004FA80(id a1)
{
  uint64_t v1 = objc_autoreleasePoolPush();
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___KCSharingStubXPCListenerDelegate);
  uint64_t v3 = (void *)qword_1002DE8B0;
  qword_1002DE8B0 = (uint64_t)v2;

  objc_autoreleasePoolPop(v1);
}

void sub_10004FD84( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_100050480( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10005053C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100050E1C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) fillInError])
  {
    uint64_t v2 = *(void **)(a1 + 32);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 internalSuccesses]);
    [v2 allSuccessful:v3];
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 80LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 32) + 81LL) = 1;
}

uint64_t sub_100050E98(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 81LL) = 1;
  return result;
}

uint64_t sub_100050EB0(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 80LL) = 1;
  return result;
}

uint64_t sub_100050EC8(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 81LL);
  return result;
}

uint64_t sub_100050EE4(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 80LL);
  return result;
}

void sub_100050F00(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    if ([WeakRetained allDependentsSuccessful])
    {
      [v2 groupStart];
    }

    else
    {
      id v5 = sub_1000AA6AC(@"ckksgroup", 0LL);
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        id v7 = (void *)objc_claimAutoreleasedReturnValue([v2 error]);
        int v8 = 138412290;
        id v9 = v7;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Not running due to some failed dependent: %@",  (uint8_t *)&v8,  0xCu);
      }

      [v2 cancel];
    }
  }

  else
  {
    id v3 = sub_1000AA6AC(@"ckks", 0LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v_Block_object_dispose(va, 8) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "received callback for released object",  (uint8_t *)&v8,  2u);
    }
  }
}

void sub_100051050(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained completeOperation];
  }

  else
  {
    id v3 = sub_1000AA6AC(@"ckks", 0LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "received callback for released object", v5, 2u);
    }
  }
}

void sub_1000512AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000512CC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

LABEL_11:
  id v30 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"pcspublickey"]);
  if (v30
    || (__int128 v24 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSItem plaintextPCSPublicKey](self, "plaintextPCSPublicKey"))) != 0LL)
  {
    id v31 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"pcspublickey"]);
    id v32 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSItem plaintextPCSPublicKey](self, "plaintextPCSPublicKey"));
    double v33 = [v31 isEqual:v32];

    if (v30)
    {

      if ((v33 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {

      if ((v33 & 1) != 0) {
        goto LABEL_15;
      }
    }

    uint64_t v47 = sub_1000AA6AC(@"ckksitem", 0LL);
    __int128 v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
    if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_40;
    }
    *(_WORD *)uint64_t v50 = 0;
    uint64_t v41 = "SecCKRecordPCSPublicKey does not match";
LABEL_39:
    _os_log_debug_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, v41, v50, 2u);
    goto LABEL_40;
  }

  return v6;
}

    id v13 = 1;
    goto LABEL_12;
  }

  unsigned int v15 = 0LL;
  id v7 = [v4 pendingEscrowUpload:&v15];
  uint64_t v6 = v15;
  int v8 = sub_10001267C("octagon-health");
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  id v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (!v10) {
      goto LABEL_9;
    }
    *(_DWORD *)__int128 buf = 138412290;
    id v18 = v6;
    uint64_t v11 = "Failed to check escrow prerecord status: %@";
    goto LABEL_8;
  }

  if (!v7)
  {
    if (v10)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "no pending prerecords, posting CFU", buf, 2u);
    }

    uint64_t v6 = 0LL;
    goto LABEL_11;
  }

  if (v10)
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "prerecord is pending, NOT posting CFU", buf, 2u);
  }

  id v13 = 0;
  uint64_t v6 = 0LL;
LABEL_12:

  return v13;
}
}

  *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

  *a2 = (CFErrorRef)cf;
}

        int v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      uint64_t v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v6);
  }

  [v5 addObject:self];
  objc_sync_exit(v5);
}

  return (char)v7;
}

LABEL_19:
      __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v4 zoneName]);
      uint64_t v27 = sub_1000AA6AC(@"ckksfetch", v26);
      id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);

      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Not participating in fetch: zone is not active",  buf,  2u);
      }

      __int128 v25 = 0LL;
    }

    else
    {
      __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v4 zoneName]);
      __int128 v24 = sub_1000AA6AC(@"ckksfetch", v23);
      __int128 v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);

      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Not participating in fetch: zone not created yet",  buf,  2u);
      }
    }

    __int128 v22 = 0;
LABEL_23:

    goto LABEL_24;
  }

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView zoneName](self, "zoneName"));
  unsigned int v21 = sub_1000AA6AC(@"ckksfetch", v20);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v21);

  if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v9,  OS_LOG_TYPE_DEFAULT,  "Not participating in fetch: not logged in",  buf,  2u);
  }

  __int128 v22 = 0;
LABEL_24:

  return v22;
}
}

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) priorityViewsProcessed]);
  unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue([v14 result]);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 error]);

  if (v16)
  {
    id v17 = sub_1000AA6AC(@"ckksrpc", 0LL);
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "priorityViewsProcessed already ran and hit an error, re-setting up priority views watcher",  buf,  2u);
    }

    [*(id *)(a1 + 32) onqueueCreatePriorityViewsProcessedWatcher];
  }

  id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) priorityViewsProcessed]);
  uint64_t v20 = objc_claimAutoreleasedReturnValue([v19 result]);
  unsigned int v21 = *(void *)(*(void *)(a1 + 40) + 8LL);
  __int128 v22 = *(void **)(v21 + 40);
  *(void *)(v21 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v20;

  __int128 v23 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  __int128 v24 = sub_1000AA6AC(@"ckksrpc", 0LL);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  __int128 v25 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v23)
  {
    if (v25)
    {
      __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) priorityViewsProcessed]);
      *(_DWORD *)__int128 buf = 138412290;
      double v33 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "waitForPriorityViews pending on %@",  buf,  0xCu);
    }
  }

  else
  {
    if (v25)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Returning success for waitForPriorityViews",  buf,  2u);
    }

    uint64_t v27 = objc_claimAutoreleasedReturnValue( +[CKKSResultOperation named:withBlock:]( &OBJC_CLASS___CKKSResultOperation,  "named:withBlock:",  @"waitForPriority-succeed",  &stru_1002907F0));
    id v28 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v29 = *(void **)(v28 + 40);
    *(void *)(v28 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v27;

    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationQueue]);
    -[os_log_s addOperation:](v9, "addOperation:", *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
  }

      id v13 = 0;
      goto LABEL_12;
    }

  id v12 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(-[CKKSZoneChangeFetcher queue](self, "queue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10017E2F0;
  block[3] = &unk_1002912B8;
  id v13 = v4;
  uint64_t v20 = v13;
  unsigned int v21 = self;
  __int128 v22 = &v27;
  dispatch_sync(v12, block);

  if (*((_BYTE *)v28 + 24))
  {
    uint64_t v14 = sub_1000AA6AC(@"ckksfetch", 0LL);
    unsigned int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v18 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Skipping fetching size no zone is ready",  v18,  2u);
    }

    uint64_t v16 = 0LL;
  }

  else
  {
    unsigned int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", @"apns"));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( -[CKKSZoneChangeFetcher requestSuccessfulFetchForManyReasons:]( self,  "requestSuccessfulFetchForManyReasons:",  v15));
  }

  _Block_object_dispose(&v27, 8);
  return v16;
}

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v6;
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) != 0LL;
}

LABEL_41:
    goto LABEL_42;
  }

  uint64_t v20 = objc_alloc(&OBJC_CLASS___CKKSIncomingQueueEntry);
  unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString item](v16, "item"));
  __int128 v22 = -[CKKSIncomingQueueEntry initWithCKKSItem:action:state:]( v20,  "initWithCKKSItem:action:state:",  v21,  @"delete",  @"new");

  v67 = 0LL;
  -[CKKSSQLDatabaseObject saveToDatabase:](v22, "saveToDatabase:", &v67);
  __int128 v23 = (__CFString *)v67;
  if (v23)
  {
    __int128 v24 = v23;
    __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString zoneID](v8, "zoneID"));
    __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v25 zoneName]);
    uint64_t v27 = sub_1000AA6AC(@"ckks", v26);
    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);

    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v70 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "Couldn't save incoming queue entry: %@",  buf,  0xCu);
    }

    if (a6) {
      *a6 = v24;
    }

    uint64_t v29 = 0;
    goto LABEL_41;
  }

  id v59 = v22;
  id v30 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSIncomingQueueEntry uuid](v22, "uuid"));
  v76[0] = @"new";
  v76[1] = @"reencrypt";
  v76[2] = @"error";
  id v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v76, 3LL));
  id v32 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString zoneID](v8, "zoneID"));
  id v66 = 0LL;
  double v33 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSOutgoingQueueEntry allWithUUID:states:contextID:zoneID:error:]( &OBJC_CLASS___CKKSOutgoingQueueEntry,  "allWithUUID:states:contextID:zoneID:error:",  v30,  v31,  v9,  v32,  &v66));
  __int16 v34 = (__CFString *)v66;

  if (v34)
  {
    uint64_t v35 = v33;
    __int128 v36 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString zoneID](v8, "zoneID"));
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v36 zoneName]);
    __int128 v38 = sub_1000AA6AC(@"ckks", v37);
    uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);

    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      __int128 v40 = (__CFString *)objc_claimAutoreleasedReturnValue(-[CKKSIncomingQueueEntry uuid](v59, "uuid"));
      *(_DWORD *)__int128 buf = 138412546;
      id v70 = v40;
      uint64_t v71 = 2112;
      int v72 = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_ERROR,  "Couldn't load OQE sibling for %@: %@",  buf,  0x16u);
    }

    if (a6) {
      *a6 = v34;
    }
    uint64_t v41 = 1;
    double v33 = v35;
  }

  else
  {
    int v64 = 0u;
    uint64_t v65 = 0u;
    int v62 = 0u;
    int v63 = 0u;
    id obj = v33;
    uint64_t v42 = [obj countByEnumeratingWithState:&v62 objects:v75 count:16];
    if (v42)
    {
      uint64_t v43 = v42;
      uint64_t v58 = v33;
      uint64_t v44 = *(void *)v63;
      while (2)
      {
        for (uint64_t i = 0LL; i != v43; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v63 != v44) {
            objc_enumerationMutation(obj);
          }
          uint64_t v46 = *(__CFString **)(*((void *)&v62 + 1) + 8LL * (void)i);
          unsigned int v61 = 0LL;
          -[__CFString deleteFromDatabase:](v46, "deleteFromDatabase:", &v61);
          uint64_t v47 = v61;
          if (v47)
          {
            uint64_t v48 = v47;
            uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString zoneID](v8, "zoneID"));
            uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v49 zoneName]);
            unsigned int v51 = sub_1000AA6AC(@"ckks", v50);
            uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);

            if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
            {
              id v53 = (__CFString *)objc_claimAutoreleasedReturnValue(-[CKKSIncomingQueueEntry uuid](v59, "uuid"));
              *(_DWORD *)__int128 buf = 138412802;
              id v70 = v46;
              uint64_t v71 = 2112;
              int v72 = v53;
              uint64_t v73 = 2112;
              uint64_t v74 = v48;
              _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_ERROR,  "Couldn't delete OQE sibling(%@) for %@: %@",  buf,  0x20u);
            }

            double v33 = v58;
            if (a6) {
              *a6 = v48;
            }

            uint64_t v41 = 1;
            goto LABEL_35;
          }
        }

        uint64_t v43 = [obj countByEnumeratingWithState:&v62 objects:v75 count:16];
        if (v43) {
          continue;
        }
        break;
      }

      uint64_t v41 = 0;
      double v33 = v58;
    }

    else
    {
      uint64_t v41 = 0;
    }

  if (a9) {
    *a9 = CFRetain(v18);
  }
  if (!v38)
  {
    id v32 = 1LL;
    goto LABEL_25;
  }

  void *v38 = v44;
  uint64_t v44 = 0LL;
  id v32 = 1LL;
  if (v17) {
LABEL_28:
  }
    CFRelease(v17);
LABEL_29:
  if (theData) {
    CFRelease(theData);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v32;
}

      double v33 = *(_DWORD *)(v24 + 192);
      if (v33)
      {
        if (!*(_BYTE *)(a3 + 16))
        {
          id v30 = @"client doesn't have entitlement for system keychain";
          goto LABEL_56;
        }

        if (v33 == 2 && sub_100113658(a2))
        {
          id v30 = @"Can't update a system keychain (always) item with synchronizable";
LABEL_61:
          id v32 = -50;
LABEL_62:
          if (sub_1000194E0(v32, a4, v30))
          {
LABEL_63:
            v42[0] = _NSConcreteStackBlock;
            v42[1] = 0x40000000LL;
            v42[2] = sub_1001152E0;
            v42[3] = &unk_10028F608;
            v42[4] = a4;
            v42[5] = v24;
            v42[6] = a2;
            v42[7] = v9;
            uint64_t v35 = sub_100110ECC(1, 1, 0LL, (uint64_t)a4, (uint64_t)v42);
LABEL_70:
            id v28 = sub_1000F8254(v24, v35, (CFErrorRef *)a4);
            goto LABEL_71;
          }

  uint64_t v29 = 0LL;
  if ((*(_WORD *)&v5 & 0x100) != 0)
  {
LABEL_30:
    id v28 = 2654435761u * self->_timestampDnsEnd;
    if ((*(_DWORD *)&v5 & 0x10000) != 0) {
      goto LABEL_31;
    }
    goto LABEL_43;
  }

  if ((has & 4) != 0)
  {
    if ((v7 & 4) == 0 || self->_triggerRequestTime != *((void *)v4 + 3)) {
      goto LABEL_48;
    }
  }

  else if ((v7 & 4) != 0)
  {
    goto LABEL_48;
  }

  serializedReason = self->_serializedReason;
  else {
    uint64_t v11 = 1;
  }
LABEL_49:

  return v11;
}

LABEL_42:
    if (*((_BYTE *)v62 + 24)) {
      CFSetAddValue(v24, kSOSViewKeychainV0);
    }
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472LL;
    v38[2] = sub_1001A0E1C;
    v38[3] = &unk_1002931B8;
    v38[4] = v8;
    sub_1000130AC(v24, (uint64_t)v38);
    uint64_t v11 = sub_1001ADE20(v8, (uint64_t)v24, 0LL);
    if (v24) {
      CFRelease(v24);
    }

    _Block_object_dispose(&v61, 8);
  }

void sub_1000552C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
}

void sub_100055510( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_100055758( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100055A38(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_100055A48(uint64_t a1)
{
}

void sub_100055A50(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  id v4 = (id)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:@"parentKeyUUID"]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v4 asString]);
  [v2 addObject:v3];
}

void sub_100055AB4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  id v4 = (id)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:@"UUID"]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v4 asString]);
  [v2 addObject:v3];
}

void sub_100055B18(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  id v4 = (id)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:@"UUID"]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v4 asString]);
  [v2 addObject:v3];
}

void sub_10005732C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, id location)
{
}

uint64_t sub_100057498(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_1000574A8(uint64_t a1)
{
}

void sub_1000574B0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v7)
  {
    id v9 = sub_1000AA6AC(@"ckkszonemodifier", 0LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v29 = v7;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Zone modification failed: %@", buf, 0xCu);
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    [v11 inspectErrorForRetryAfter:v7];

    id v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 reachabilityTracker]);
    unsigned int v14 = [v13 isNetworkError:v7];

    if (v14)
    {
      id v15 = sub_1000AA6AC(@"ckkszonemodifier", 0LL);
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Waiting for reachability before issuing zone deletion",  buf,  2u);
      }

      [WeakRetained setNetworkError:1];
    }
  }

  id v17 = sub_1000AA6AC(@"ckkszonemodifier", 0LL);
  id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "deleted zones: %@", buf, 0xCu);
  }

  id v19 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 databaseProvider]);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  v24[2] = sub_10005785C;
  v24[3] = &unk_100290230;
  uint64_t v21 = *(void *)(a1 + 32);
  void v24[4] = WeakRetained;
  id v25 = v6;
  id v26 = v7;
  uint64_t v27 = v21;
  id v22 = v7;
  id v23 = v6;
  [v20 dispatchSyncWithSQLTransaction:v24];
}

void sub_100057734(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = sub_1000AA6AC(@"ckkszonemodifier", 0LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Finished deleting zones", buf, 2u);
  }

  if ([WeakRetained networkError])
  {
    [WeakRetained setNextState:@"zone_deletion_failed_due_to_network_error"];
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);

    if (!v4)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
      [WeakRetained setNextState:v5];

      id v6 = sub_1000AA6AC(@"ckkszonemodifier", 0LL);
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "no fatal errors discovered!", v8, 2u);
      }
    }
  }
}

uint64_t sub_10005785C(uint64_t a1)
{
  uint64_t v1 = a1;
  __int128 v81 = 0u;
  __int128 v82 = 0u;
  __int128 v83 = 0u;
  __int128 v84 = 0u;
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 views]);

  id v68 = [v3 countByEnumeratingWithState:&v81 objects:v91 count:16];
  if (v68)
  {
    uint64_t v4 = *(void *)v82;
    uint64_t v70 = v1;
    uint64_t v65 = *(void *)v82;
    id v66 = v3;
    do
    {
      for (uint64_t i = 0LL; i != v68; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v82 != v4) {
          objc_enumerationMutation(v3);
        }
        id v6 = *(void **)(*((void *)&v81 + 1) + 8LL * (void)i);
        __int128 v77 = 0u;
        __int128 v78 = 0u;
        __int128 v79 = 0u;
        __int128 v80 = 0u;
        id v7 = *(id *)(*(void *)(*(void *)(v1 + 56) + 8LL) + 40LL);
        id v8 = [v7 countByEnumeratingWithState:&v77 objects:v90 count:16];
        if (!v8) {
          goto LABEL_56;
        }
        id v9 = v8;
        id v69 = i;
        uint64_t v10 = *(void *)v78;
LABEL_8:
        uint64_t v11 = 0LL;
        while (1)
        {
          if (*(void *)v78 != v10) {
            objc_enumerationMutation(v7);
          }
          id v12 = *(void **)(*((void *)&v77 + 1) + 8 * v11);
          id v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "zoneID", v65, v66));
          unsigned __int8 v14 = [v12 isEqual:v13];

          if ((v14 & 1) != 0) {
            break;
          }
          if (v9 == (id)++v11)
          {
            id v9 = [v7 countByEnumeratingWithState:&v77 objects:v90 count:16];
            if (!v9)
            {
              uint64_t v1 = v70;
              uint64_t i = v69;
              goto LABEL_56;
            }

            goto LABEL_8;
          }
        }

        id v15 = v12;

        uint64_t v1 = v70;
        uint64_t i = v69;
        if (v15)
        {
          uint64_t v16 = *(void **)(v70 + 40);
          id v17 = (void *)objc_claimAutoreleasedReturnValue([v6 zoneID]);
          LOBYTE(v16) = [v16 containsObject:v17];

          if ((v16 & 1) == 0)
          {
            id v18 = *(void **)(v70 + 48);
            if (v18)
            {
              id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 userInfo]);
              id v71 = (id)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:CKPartialErrorsByItemIDKey]);

              uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v70 + 48) domain]);
              if ([v20 isEqualToString:CKErrorDomain]
                && [*(id *)(v70 + 48) code] == (id)2)
              {

                if (v71)
                {
                  id v67 = v15;
                  __int128 v75 = 0u;
                  __int128 v76 = 0u;
                  __int128 v73 = 0u;
                  __int128 v74 = 0u;
                  uint64_t v21 = v71;
                  id v22 = (void *)objc_claimAutoreleasedReturnValue([v71 allKeys]);
                  id v23 = [v22 countByEnumeratingWithState:&v73 objects:v89 count:16];
                  if (!v23) {
                    goto LABEL_39;
                  }
                  id v24 = v23;
                  uint64_t v25 = *(void *)v74;
                  while (1)
                  {
                    for (j = 0LL; j != v24; j = (char *)j + 1)
                    {
                      if (*(void *)v74 != v25) {
                        objc_enumerationMutation(v22);
                      }
                      uint64_t v27 = *(void **)(*((void *)&v73 + 1) + 8LL * (void)j);
                      id v28 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:v27]);
                      id v29 = v28;
                      if (!v28) {
                        goto LABEL_31;
                      }
                      id v30 = (void *)objc_claimAutoreleasedReturnValue([v28 domain]);
                      if (([v30 isEqualToString:CKErrorDomain] & 1) == 0)
                      {

LABEL_31:
                        [*(id *)(v1 + 32) setError:*(void *)(v1 + 48)];
                        goto LABEL_37;
                      }

                      if ([v29 code] == (id)26)
                      {
                      }

                      else
                      {
                        id v31 = [v29 code];

                        BOOL v32 = v31 == (id)28;
                        uint64_t v21 = v71;
                        if (!v32) {
                          goto LABEL_31;
                        }
                      }

                      double v33 = (void *)objc_claimAutoreleasedReturnValue([v6 zoneID]);
                      __int16 v34 = (void *)objc_claimAutoreleasedReturnValue([v33 zoneName]);
                      id v35 = sub_1000AA6AC(@"ckkszone", v34);
                      __int128 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);

                      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)__int128 buf = 138412546;
                        __int128 v86 = v27;
                        __int16 v87 = 2112;
                        id v88 = v29;
                        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Attempted to delete zone %@, but it's already missing. This is okay: %@",  buf,  0x16u);
                      }

                      uint64_t v1 = v70;
                      uint64_t v21 = v71;
LABEL_37:
                    }

                    id v24 = [v22 countByEnumeratingWithState:&v73 objects:v89 count:16];
                    if (!v24)
                    {
LABEL_39:

                      uint64_t v4 = v65;
                      id v3 = v66;
                      uint64_t i = v69;
                      id v15 = v67;
                      goto LABEL_42;
                    }
                  }
                }
              }

              else
              {
              }

              [*(id *)(v70 + 32) setError:*(void *)(v70 + 48)];
LABEL_42:
              uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v6 zoneID]);
              __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([v37 zoneName]);
              id v39 = sub_1000AA6AC(@"ckkszone", v38);
              __int128 v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);

              uint64_t v1 = v70;
              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v6 zoneID]);
                uint64_t v42 = *(void **)(v70 + 48);
                *(_DWORD *)__int128 buf = 138412546;
                __int128 v86 = v41;
                __int16 v87 = 2112;
                id v88 = v42;
                _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "deletion of record zone %@ completed with error: %@",  buf,  0x16u);
              }

              uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v70 + 32) error]);
              if (v43)
              {
                uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v6 zoneID]);
                uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v44 zoneName]);
                id v46 = sub_1000AA6AC(@"ckkszone", v45);
                uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);

                if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)__int128 buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "we hit a fatal error!!!", buf, 2u);
                }

LABEL_55:
                uint64_t v1 = v70;
                id v7 = v15;
LABEL_56:

                continue;
              }
            }
          }

          uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v6 zoneID]);
          uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v48 zoneName]);
          id v50 = sub_1000AA6AC(@"ckkszone", v49);
          unsigned int v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);

          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([v6 zoneID]);
            *(_DWORD *)__int128 buf = 138412290;
            __int128 v86 = v52;
            _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "deletion of record zone %@ completed successfully",  buf,  0xCu);
          }

          id v53 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 32) deps]);
          uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v53 contextID]);
          unsigned int v55 = (void *)objc_claimAutoreleasedReturnValue([v6 zoneID]);
          uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v55 zoneName]);
          uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[CKKSZoneStateEntry contextID:zoneName:]( &OBJC_CLASS___CKKSZoneStateEntry,  "contextID:zoneName:",  v54,  v56));

          -[os_log_s setCkzonecreated:](v47, "setCkzonecreated:", 0LL);
          -[os_log_s setCkzonesubscribed:](v47, "setCkzonesubscribed:", 0LL);
          id v72 = 0LL;
          -[os_log_s saveToDatabase:](v47, "saveToDatabase:", &v72);
          id v71 = v72;
          if (v71)
          {
            unsigned int v57 = (void *)objc_claimAutoreleasedReturnValue([v6 zoneID]);
            uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v57 zoneName]);
            id v59 = sub_1000AA6AC(@"ckks", v58);
            uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);

            if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
            {
              unsigned int v61 = (void *)objc_claimAutoreleasedReturnValue([v6 zoneID]);
              *(_DWORD *)__int128 buf = 138412546;
              __int128 v86 = v61;
              __int16 v87 = 2112;
              id v88 = v71;
              _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_ERROR,  "couldn't save zone deletion status for %@: %@",  buf,  0x16u);
            }
          }

          else
          {
            id v71 = 0LL;
          }

          goto LABEL_55;
        }
      }

      id v68 = [v3 countByEnumeratingWithState:&v81 objects:v91 count:16];
    }

    while (v68);
  }

  int v62 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 32) operationQueue]);
  int v63 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 32) setResultStateOperation]);
  [v62 addOperation:v63];

  return 1LL;
}

  v6[15] = self->_timestampSslStart;
  *((_DWORD *)v6 + 70) |= 0x4000u;
  uint64_t v25 = self->_has;
  if ((*(_WORD *)&v25 & 0x800) == 0)
  {
LABEL_24:
    if ((*(_WORD *)&v25 & 0x400) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }

void sub_100058A94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id location, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_100058B7C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v8 = sub_10001267C("octagon-cdp-status");
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v10)
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v38 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Unable to talk with TPH; leaving CDP status as 'unknown': %@",
        buf,
        0xCu);
    }

    [WeakRetained setError:v6];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 reachabilityTracker]);
    unsigned int v13 = [v12 isNetworkError:v6];

    if (v13)
    {
      unsigned __int8 v14 = -[OctagonPendingFlag initWithFlag:conditions:delayInSeconds:]( objc_alloc(&OBJC_CLASS___OctagonPendingFlag),  "initWithFlag:conditions:delayInSeconds:",  @"pending_network_availablility",  2LL,  0.2);
      id v15 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 flagHandler]);
      [v16 handlePendingFlag:v14];
    }

    goto LABEL_23;
  }

  if (v10)
  {
    *(_DWORD *)__int128 buf = 67109120;
    LODWORD(v3_Block_object_dispose(va, 8) = [v5 numberOfPeersInOctagon];
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Octagon reports %d peers", buf, 8u);
  }

  if ([v5 numberOfPeersInOctagon])
  {
    uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 8LL);
    int v18 = 2;
LABEL_22:
    *(_DWORD *)(v17 + 24) = v18;
    goto LABEL_23;
  }

  id v19 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 sosAdapter]);
  unsigned int v21 = [v20 sosEnabled];

  id v22 = sub_10001267C("octagon-cdp-status");
  id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
  if (!v21)
  {
    if (v24)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "No SOS. CDP bit is off.", buf, 2u);
    }

    uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 8LL);
    int v18 = 1;
    goto LABEL_22;
  }

  if (v24)
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Requesting SOS status...", buf, 2u);
  }

  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 sosAdapter]);
  id v36 = 0LL;
  unsigned int v27 = [v26 circleStatus:&v36];
  id v28 = v36;

  if (v28 || v27 == -1)
  {
    __int16 v34 = sub_10001267C("octagon-cdp-status");
    id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v38 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "Error fetching circle status. Leaving CDP status as 'unknown': %@",  buf,  0xCu);
    }
  }

  else
  {
    id v29 = sub_10001267C("octagon-cdp-status");
    id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    BOOL v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
    if (v27 == 3)
    {
      if (v31)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "SOS reports circle absent. Setting CDP to 'disabled'",  buf,  2u);
      }

      uint64_t v32 = *(void *)(*(void *)(a1 + 32) + 8LL);
      int v33 = 1;
    }

    else
    {
      if (v31)
      {
        *(_DWORD *)__int128 buf = 67109120;
        LODWORD(v3_Block_object_dispose(va, 8) = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "SOS reports some existing circle (%d). Setting CDP to 'enabled'",  buf,  8u);
      }

      uint64_t v32 = *(void *)(*(void *)(a1 + 32) + 8LL);
      int v33 = 2;
    }

    *(_DWORD *)(v32 + 24) = v33;
  }

LABEL_23:
}

id sub_100058F84(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [v3 cdpState];
  id v5 = sub_10001267C("octagon-cdp-status");
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v4 == 2)
  {
    if (v7)
    {
      uint64_t v8 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      if (v8 >= 3) {
        id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)));
      }
      else {
        id v9 = *(&off_1002841F8 + v8);
      }
      *(_DWORD *)__int128 buf = 138412290;
      id v15 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "CDP bit is enabled on-disk, not modifying (would have been %@)",  buf,  0xCu);
    }

    id v12 = 0LL;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 2;
  }

  else
  {
    if (v7)
    {
      uint64_t v10 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      if (v10 >= 3) {
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)));
      }
      else {
        uint64_t v11 = *(&off_1002841F8 + v10);
      }
      *(_DWORD *)__int128 buf = 138412290;
      id v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Writing CDP bit as %@", buf, 0xCu);
    }

    [v3 setCdpState:*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];
    id v12 = v3;
  }

  return v12;
}

LABEL_32:
        unsigned __int8 v14 = 0LL;
        goto LABEL_33;
      }

      -[CKKSOutgoingQueueEntry setState:](self, "setState:", v8);
      uint64_t v43 = v27;
      -[CKKSSQLDatabaseObject saveToDatabase:](self, "saveToDatabase:", &v43);
      unsigned __int8 v14 = v43;

      if (v14)
      {
        BOOL v31 = (void *)objc_claimAutoreleasedReturnValue([v9 zoneName]);
        uint64_t v32 = sub_1000AA6AC(@"ckks", v31);
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v32);

        if (os_log_type_enabled((os_log_t)v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 138412802;
          uint64_t v48 = self;
          uint64_t v49 = 2112;
          id v50 = v8;
          unsigned int v51 = 2112;
          uint64_t v52 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v17,  OS_LOG_TYPE_ERROR,  "Couldn't save %@ as %@: %@",  buf,  0x20u);
        }

        id v12 = 0LL;
        goto LABEL_18;
      }

      id v12 = 0LL;
      goto LABEL_32;
    }
  }

  else
  {
  }

  -[CKKSOutgoingQueueEntry setState:](self, "setState:", v8);
  uint64_t v42 = 0LL;
  -[CKKSSQLDatabaseObject saveToDatabase:](self, "saveToDatabase:", &v42);
  unsigned __int8 v14 = (CKKSOutgoingQueueEntry *)v42;
  if (!v14) {
    goto LABEL_33;
  }
  int v33 = (void *)objc_claimAutoreleasedReturnValue([v9 zoneName]);
  __int16 v34 = sub_1000AA6AC(@"ckks", v33);
  id v12 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue(v34);

  if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 138412802;
    uint64_t v48 = self;
    uint64_t v49 = 2112;
    id v50 = v8;
    unsigned int v51 = 2112;
    uint64_t v52 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v12,  OS_LOG_TYPE_ERROR,  "Couldn't save %@ as %@: %@",  buf,  0x20u);
  }

        if (a4) {
          *a4 = 1;
        }
        uint64_t v20 = v24;
        unsigned int v21 = v20;
        id v23 = 0LL;
        goto LABEL_5;
      }

      id v23 = v33;
      if ([v33 code] != (id)-25300)
      {
        if (v61)
        {
          unsigned int v51 = v61;
          uint64_t v52 = [v23 code];
          v72[0] = NSLocalizedDescriptionKey;
          id v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"Couldn't load %@ from keychain: %d",  v7,  [v23 code]));
          v72[1] = NSUnderlyingErrorKey;
          v73[0] = v53;
          v73[1] = v23;
          uint64_t v54 = v73;
          unsigned int v55 = v72;
LABEL_37:
          unsigned int v57 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v54,  v55,  2LL));
          *unsigned int v51 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"securityd",  v52,  v57));
        }

    CFRelease(v18);
    goto LABEL_33;
  }

  if (v5 != 2)
  {
    if (!v7)
    {
      uint64_t v8 = 0LL;
      CFMutableStringRef MutableCopy = 0LL;
      goto LABEL_39;
    }

    id v12 = sub_10001267C("initial-sync");
    unsigned int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "not in circle nor applying: clearing pending",  buf,  2u);
    }

    uint64_t v8 = 0LL;
    CFMutableStringRef MutableCopy = 0LL;
LABEL_14:

    CFRelease(v7);
    BOOL v7 = 0LL;
    goto LABEL_39;
  }

  uint64_t v8 = 0LL;
  CFMutableStringRef MutableCopy = 0LL;
LABEL_36:
  if (v7)
  {
    uint64_t v20 = CFGetTypeID(v7);
    if (v20 == CFSetGetTypeID() && !CFSetGetCount(v7))
    {
      BOOL v24 = sub_10001267C("initial-sync");
      unsigned int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Empty set, using NULL instead", buf, 2u);
      }

      goto LABEL_14;
    }
  }

void sub_10005C88C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_10005C8B4(uint64_t a1, void *a2)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:@"count(*)"]);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v3 asNSInteger];
}

void sub_10005C904(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v8 = (id)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"count(rowid)"]);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v8 asNSNumberInteger]);
  id v5 = *(void **)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"state"]);

  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v6 asString]);
  [v5 setObject:v4 forKeyedSubscript:v7];
}

void sub_10005D978( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_10005DF00(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v8 = (id)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"count(rowid)"]);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v8 asNSNumberInteger]);
  id v5 = *(void **)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"parentKeyUUID"]);

  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v6 asString]);
  [v5 setObject:v4 forKeyedSubscript:v7];
}

void sub_10005DFA4(uint64_t a1, void *a2)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:@"count(*)"]);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v3 asNSInteger];
}

void sub_10005DFF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v8 = (id)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"count(rowid)"]);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v8 asNSNumberInteger]);
  id v5 = *(void **)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"state"]);

  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v6 asString]);
  [v5 setObject:v4 forKeyedSubscript:v7];
}

void sub_10005EABC(uint64_t a1, const __CFArray *a2, void *a3)
{
  id v4 = a3;
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSArray, v5);
  if ((objc_opt_isKindOfClass(a2, v6) & 1) != 0)
  {
    CFIndex Count = CFArrayGetCount(a2);
    NSLog(@"scanning %d %@", Count, v4);
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    id obj = a2;
    id v8 = -[__CFArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v17,  v23,  16LL);
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v18;
      do
      {
        uint64_t v11 = 0LL;
        do
        {
          if (*(void *)v18 != v10) {
            objc_enumerationMutation(obj);
          }
          uint64_t v12 = *(void *)(*((void *)&v17 + 1) + 8LL * (void)v11);
          v21[0] = kSecClass;
          v21[1] = kSecValuePersistentRef;
          v22[0] = v4;
          v22[1] = v12;
          void v21[2] = kSecReturnAttributes;
          v21[3] = kSecUseDataProtectionKeychain;
          v22[2] = &__kCFBooleanTrue;
          v22[3] = &__kCFBooleanTrue;
          unsigned int v13 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v22,  v21,  4LL));
          CFTypeRef result = 0LL;
          if (SecItemCopyMatching(v13, &result) && *(_DWORD *)(a1 + 40) != -25308) {
            [*(id *)(a1 + 32) addObject:v13];
          }

          uint64_t v11 = (char *)v11 + 1;
        }

        while (v9 != v11);
        id v9 = -[__CFArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v17,  v23,  16LL);
      }

      while (v9);
    }
  }
}

void sub_10005ECD8(id a1)
{
  id v1 = -[SFKeychainControlManager _init](objc_alloc(&OBJC_CLASS___SFKeychainControlManager), "_init");
  id v2 = (void *)qword_1002DE8B8;
  qword_1002DE8B8 = (uint64_t)v1;
}

uint64_t sub_10005ED04()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[SFKeychainControlManager sharedManager](&OBJC_CLASS___SFKeychainControlManager, "sharedManager"));
  uint64_t v1 = objc_claimAutoreleasedReturnValue([v0 xpcControlEndpoint]);

  return v1;
}

LABEL_47:
        -[CKKSIncomingQueueOperation setErrorItemsProcessed:]( self,  "setErrorItemsProcessed:",  (char *)-[CKKSIncomingQueueOperation errorItemsProcessed](self, "errorItemsProcessed") + 1);
LABEL_48:

        objc_autoreleasePoolPop(context);
        id v9 = (char *)v9 + 1;
      }

      while (v116 != v9);
      BOOL v106 = [obj countByEnumeratingWithState:&v124 objects:v136 count:16];
      uint64_t v116 = v106;
    }

    while (v106);
  }

  if (-[NSMutableArray count](v110, "count") || v109)
  {
    v107 = (void *)objc_claimAutoreleasedReturnValue([v6 notifyViewChangedScheduler]);
    [v107 trigger];
  }

  return 1;
}

  __int16 v87 = 0;
LABEL_48:

  _Block_object_dispose(buf, 8);
  _Block_object_dispose(&v126, 8);
  _Block_object_dispose(&v130, 8);
LABEL_52:
  _Block_object_dispose(&v141, 8);

  _Block_object_dispose(&v147, 8);
  return v87;
}

    goto LABEL_48;
  }

  unsigned __int8 v14 = 0;
LABEL_19:

  return v14;
}

  uint64_t v41 = cfa;
  if (cfa)
  {
    cfa = 0LL;
    CFRelease(v41);
  }

  if (!v32) {
    CFRelease((CFTypeRef)Instance);
  }
}

      uint64_t v16 = 0;
      goto LABEL_48;
    }
  }

  __int128 v20 = 1;
  return v20 & 1;
}

  id v23 = 0LL;
  if ((*(_WORD *)&v5 & 0x2000) == 0) {
    goto LABEL_48;
  }
LABEL_36:
  id v22 = 2654435761u * self->_timestampResponseStart;
  if ((*(_WORD *)&v5 & 0x1000) != 0)
  {
LABEL_37:
    unsigned int v21 = 2654435761u * self->_timestampResponseEnd;
    goto LABEL_50;
  }

    CFTypeRef result = PBReaderSkipValueWithTag(a2);
    if (!(_DWORD)result) {
      return result;
    }
    goto LABEL_45;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000618A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
}

void sub_100061C9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_100062F1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, char a49)
{
}

void sub_1000636C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

BOOL sub_100063900(uint64_t a1, uint64_t a2)
{
  return sub_100108830(a2, *(void *)(a1 + 40), 0LL, (CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
}

uint64_t sub_10006391C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_10006392C(uint64_t a1)
{
}

uint64_t sub_100063934(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v5 = (__CFString **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  int v15[2] = sub_100063A58;
  v15[3] = &unk_1002842B0;
  id v16 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 104);
  char v24 = *(_BYTE *)(a1 + 112);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v23 = v7;
  uint64_t v20 = v8;
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void **)(a1 + 56);
  id v17 = v6;
  uint64_t v18 = v9;
  id v19 = v10;
  __int128 v21 = *(_OWORD *)(a1 + 80);
  uint64_t v22 = *(void *)(a1 + 96);
  if ((sub_1000EA178(v4, a2, v5, (uint64_t)v15) & 1) == 0)
  {
    if (!sub_1000EA124(*(__CFError **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL)))
    {
      uint64_t v13 = 0LL;
      goto LABEL_7;
    }

    uint64_t v11 = *(void *)(*(void *)(a1 + 64) + 8LL);
    uint64_t v12 = *(const void **)(v11 + 24);
    if (v12)
    {
      *(void *)(v11 + 24) = 0LL;
      CFRelease(v12);
    }
  }

  uint64_t v13 = 1LL;
LABEL_7:

  return v13;
}

void sub_100063A58(uint64_t a1, CFDictionaryRef *a2, uint64_t *a3)
{
  uint64_t v98 = SecCoreAnalyticsValue;
  v99 = &off_1002AD308;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v99,  &v98,  1LL));
  +[SecCoreAnalytics sendEvent:event:]( &OBJC_CLASS___SecCoreAnalytics,  "sendEvent:event:",  @"com.apple.security.ckks.pkconflict",  v6);

  uint64_t v7 = (const void *)kSecAttrUUID;
  if (CFDictionaryContainsKey(a2[6], kSecAttrUUID))
  {
    if (*(_BYTE *)(a1 + 104))
    {
      Boolean Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 96) + 48LL), v7);
      uint64_t v9 = (const __CFString *)CFDictionaryGetValue(a2[6], v7);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) deps]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 contextID]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
      id v89 = 0LL;
      uint64_t v13 = objc_claimAutoreleasedReturnValue( +[CKKSMirrorEntry tryFromDatabase:contextID:zoneID:error:]( &OBJC_CLASS___CKKSMirrorEntry,  "tryFromDatabase:contextID:zoneID:error:",  v9,  v11,  v12,  &v89));
      unint64_t v14 = (unint64_t)v89;

      if (v14)
      {
        id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 zoneName]);
        id v17 = sub_1000AA6AC(@"ckksincoming", v16);
        uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);

        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412546;
          CFTypeRef v91 = a2;
          __int16 v92 = 2112;
          uint64_t v93 = (const __CFString *)v14;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Unable to fetch ckme for old item %@: %@",  buf,  0x16u);
        }
      }

      CFComparisonResult v19 = CFStringCompare(Value, v9, 0LL);
      __int128 v80 = (void *)v13;
      __int128 v81 = (void *)v14;
      BOOL v20 = (v13 | v14) != 0;
      __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 zoneName]);
      id v23 = sub_1000AA6AC(@"ckksincoming", v22);
      char v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);

      BOOL v25 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      if (v19 == kCFCompareGreaterThan && v20)
      {
        if (v25)
        {
          id v26 = *(const __CFString **)(a1 + 96);
          *(_DWORD *)__int128 buf = 138413059;
          CFTypeRef v91 = Value;
          __int16 v92 = 2113;
          uint64_t v93 = v26;
          __int16 v94 = 2112;
          uint64_t v95 = v9;
          __int16 v96 = 2113;
          CFDataRef v97 = a2;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Primary key conflict; deleting incoming CK item (%@)%{private}@in favor of old item (%@)%{private}@",
            buf,
            0x2Au);
        }

        uint64_t v27 = *(void *)(a1 + 96);
        id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) deps]);
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 contextID]);
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
        uint64_t v31 = *(void *)(a1 + 56);
        uint64_t v32 = *(void *)(*(void *)(a1 + 72) + 8LL);
        id obj = *(id *)(v32 + 40);
        int v33 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSOutgoingQueueEntry withItem:action:contextID:zoneID:keyCache:error:]( &OBJC_CLASS___CKKSOutgoingQueueEntry,  "withItem:action:contextID:zoneID:keyCache:error:",  v27,  @"delete",  v29,  v30,  v31,  &obj));
        objc_storeStrong((id *)(v32 + 40), obj);

        uint64_t v34 = *(void *)(*(void *)(a1 + 72) + 8LL);
        id v87 = *(id *)(v34 + 40);
        [v33 saveToDatabase:&v87];
        objc_storeStrong((id *)(v34 + 40), v87);
        [*(id *)(a1 + 48) setNewOutgoingEntries:1];
        uint64_t v35 = *(void *)(*(void *)(a1 + 80) + 8LL);
        id v36 = *(void **)(v35 + 40);
        *(void *)(v35 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;

        uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) deps]);
        id v38 = (void *)objc_claimAutoreleasedReturnValue([v37 contextID]);
        id v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
        uint64_t v40 = *(void *)(a1 + 56);
        uint64_t v41 = *(void *)(*(void *)(a1 + 72) + 8LL);
        id v86 = *(id *)(v41 + 40);
        uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSOutgoingQueueEntry withItem:action:contextID:zoneID:keyCache:error:]( &OBJC_CLASS___CKKSOutgoingQueueEntry,  "withItem:action:contextID:zoneID:keyCache:error:",  a2,  @"add",  v38,  v39,  v40,  &v86));
        objc_storeStrong((id *)(v41 + 40), v86);

        uint64_t v43 = *(void *)(*(void *)(a1 + 72) + 8LL);
        id v85 = *(id *)(v43 + 40);
        [v42 saveToDatabase:&v85];
        objc_storeStrong((id *)(v43 + 40), v85);
        *(_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL) = 1;

        uint64_t v44 = v80;
      }

      else
      {
        uint64_t v44 = v80;
        if (v25)
        {
          uint64_t v56 = &stru_100294B48;
          if (!v80) {
            uint64_t v56 = @"non-onboarded";
          }
          *(_DWORD *)__int128 buf = 138412290;
          CFTypeRef v91 = v56;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Primary key conflict; replacing %@ with CK item",
            buf,
            0xCu);
        }

        if (a3)
        {
          uint64_t v57 = *(void *)(a1 + 96);
          if (v57) {
            CFRetain(*(CFTypeRef *)(a1 + 96));
          }
          *a3 = v57;
          uint64_t v58 = CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 96) + 48LL), kSecAttrModificationDate);
          uint64_t v59 = objc_claimAutoreleasedReturnValue(v58);
          uint64_t v60 = *(void *)(*(void *)(a1 + 80) + 8LL);
          unsigned int v61 = *(void **)(v60 + 40);
          *(void *)(v60 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v59;
        }

        if (v19 == kCFCompareEqualTo)
        {
LABEL_34:
          id v72 = sub_1000E7EC0(a2, kSecAttrPersistentReference);
          __int128 v73 = (const __CFData *)objc_claimAutoreleasedReturnValue(v72);
          __int128 v74 = v73;
          if (a3)
          {
            if (*a3)
            {
LABEL_36:
              if (v74)
              {
                if (-[__CFData length](v74, "length") == (id)16)
                {
                  CFTypeRef cf = 0LL;
                  sub_1000E96B4(*a3, v74, (__CFString **)&cf);
                  if (cf)
                  {
                    __int128 v75 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
                    __int128 v76 = (void *)objc_claimAutoreleasedReturnValue([v75 zoneName]);
                    id v77 = sub_1000AA6AC(@"ckksincoming", v76);
                    __int128 v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);

                    if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)__int128 buf = 138412290;
                      CFTypeRef v91 = cf;
                      _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEFAULT,  "error setting uuid persistent ref: %@",  buf,  0xCu);
                    }

                    CFTypeRef v79 = cf;
                    if (cf)
                    {
                      CFTypeRef cf = 0LL;
                      CFRelease(v79);
                    }
                  }
                }
              }

              goto LABEL_48;
            }

            if (v73 && -[__CFData length](v73, "length") == (id)16)
            {
              if (*a3) {
                goto LABEL_36;
              }
            }

            else
            {
              objc_msgSend( *(id *)(a1 + 48),  "_onqueueGenerateNewUUIDPersistentRefOnSecItem:viewState:",  a2,  *(void *)(a1 + 32),  v80,  v81);
              CFRetain(a2);
              *a3 = (uint64_t)a2;
            }
          }

uint64_t sub_10006437C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 contextID]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
  id v38 = 0LL;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSIncomingQueueEntry fetch:startingAtUUID:state:action:contextID:zoneID:error:]( &OBJC_CLASS___CKKSIncomingQueueEntry,  "fetch:startingAtUUID:state:action:contextID:zoneID:error:",  50LL,  v2,  @"mismatched_view",  0LL,  v4,  v5,  &v38));
  id v7 = v38;

  if (!v7)
  {
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v6 count];
    id v12 = [v6 count];
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
    id v14 = sub_1000AA6AC(@"ckksincoming", v13);
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);

    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      if (v16)
      {
        id v17 = [v6 count];
        *(_DWORD *)__int128 buf = 134217984;
        id v41 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Inspecting %lu mismatched items",  buf,  0xCu);
      }

      *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) += [v6 count];
      if (([*(id *)(a1 + 32) intransaction:*(void *)(a1 + 40) processQueueEntries:v6] & 1) == 0)
      {
        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
        id v32 = sub_1000AA6AC(@"ckksincoming", v31);
        int v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);

        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "processQueueEntries didn't complete successfully",  buf,  2u);
        }

        goto LABEL_5;
      }

      __int128 v36 = 0u;
      __int128 v37 = 0u;
      __int128 v34 = 0u;
      __int128 v35 = 0u;
      id v15 = v6;
      id v18 = -[os_log_s countByEnumeratingWithState:objects:count:]( v15,  "countByEnumeratingWithState:objects:count:",  &v34,  v39,  16LL);
      if (v18)
      {
        id v19 = v18;
        uint64_t v20 = *(void *)v35;
        do
        {
          for (uint64_t i = 0LL; i != v19; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v35 != v20) {
              objc_enumerationMutation(v15);
            }
            uint64_t v22 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)i);
            id v23 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
            char v24 = (void *)objc_claimAutoreleasedReturnValue([v22 uuid]);
            if ([v23 compare:v24] == (id)1)
            {
              uint64_t v25 = *(void *)(*(void *)(a1 + 48) + 8LL);
              id v26 = *(id *)(v25 + 40);
              uint64_t v27 = *(void **)(v25 + 40);
              *(void *)(v25 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v26;
            }

            else
            {
              uint64_t v28 = objc_claimAutoreleasedReturnValue([v22 uuid]);
              uint64_t v29 = *(void *)(*(void *)(a1 + 48) + 8LL);
              uint64_t v27 = *(void **)(v29 + 40);
              *(void *)(v29 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v28;
            }
          }

          id v19 = -[os_log_s countByEnumeratingWithState:objects:count:]( v15,  "countByEnumeratingWithState:objects:count:",  &v34,  v39,  16LL);
        }

        while (v19);
      }
    }

    else if (v16)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "No mismatched view items", buf, 2u);
    }

    uint64_t v11 = 1LL;
    goto LABEL_24;
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
  id v9 = sub_1000AA6AC(@"ckksincoming", v8);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Cannot fetch mismatched view items", buf, 2u);
  }

  [*(id *)(a1 + 32) setError:v7];
LABEL_5:
  uint64_t v11 = 0LL;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
LABEL_24:

  return v11;
}

uint64_t sub_100064778(uint64_t a1)
{
  if (![*(id *)(a1 + 32) isCancelled])
  {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 contextID]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
    id v42 = 0LL;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSIncomingQueueEntry fetch:startingAtUUID:state:action:contextID:zoneID:error:]( &OBJC_CLASS___CKKSIncomingQueueEntry,  "fetch:startingAtUUID:state:action:contextID:zoneID:error:",  50LL,  v6,  @"new",  v7,  v9,  v10,  &v42));
    id v12 = v42;

    if (v12)
    {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
      id v14 = sub_1000AA6AC(@"ckksincoming", v13);
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);

      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v45 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "Error fetching incoming queue records: %@",  buf,  0xCu);
      }

      [*(id *)(a1 + 32) setError:v12];
      uint64_t v5 = 0LL;
    }

    else
    {
      *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = [v11 count];
      *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) += [v11 count];
      if ([v11 count])
      {
        BOOL v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
        id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 zoneName]);
        +[CKKSPowerCollection CKKSPowerEvent:zone:count:]( CKKSPowerCollection,  "CKKSPowerEvent:zone:count:",  @"processIncomingQueue",  v17,  [v11 count]);

        if (([*(id *)(a1 + 32) intransaction:*(void *)(a1 + 40) processQueueEntries:v11] & 1) == 0)
        {
          int v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
          id v34 = sub_1000AA6AC(@"ckksincoming", v33);
          __int128 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);

          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "processQueueEntries didn't complete successfully",  buf,  2u);
          }

          uint64_t v5 = 0LL;
          *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
          goto LABEL_28;
        }

        __int128 v40 = 0u;
        __int128 v41 = 0u;
        __int128 v38 = 0u;
        __int128 v39 = 0u;
        id v18 = v11;
        id v19 = [v18 countByEnumeratingWithState:&v38 objects:v43 count:16];
        if (v19)
        {
          id v20 = v19;
          uint64_t v21 = *(void *)v39;
          do
          {
            for (uint64_t i = 0LL; i != v20; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v39 != v21) {
                objc_enumerationMutation(v18);
              }
              id v23 = *(void **)(*((void *)&v38 + 1) + 8LL * (void)i);
              char v24 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
              uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v23 uuid]);
              if ([v24 compare:v25] == (id)1)
              {
                uint64_t v26 = *(void *)(*(void *)(a1 + 64) + 8LL);
                id v27 = *(id *)(v26 + 40);
                uint64_t v28 = *(void **)(v26 + 40);
                *(void *)(v26 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v27;
              }

              else
              {
                uint64_t v29 = objc_claimAutoreleasedReturnValue([v23 uuid]);
                uint64_t v30 = *(void *)(*(void *)(a1 + 64) + 8LL);
                uint64_t v28 = *(void **)(v30 + 40);
                *(void *)(v30 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v29;
              }
            }

            id v20 = [v18 countByEnumeratingWithState:&v38 objects:v43 count:16];
          }

          while (v20);
        }
      }

      else
      {
        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
        id v32 = sub_1000AA6AC(@"ckksincoming", v31);
        id v18 = (id)objc_claimAutoreleasedReturnValue(v32);

        if (os_log_type_enabled((os_log_t)v18, OS_LOG_TYPE_DEBUG))
        {
          __int128 v37 = *(void **)(a1 + 48);
          *(_DWORD *)__int128 buf = 138412290;
          id v45 = v37;
          _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)v18,  OS_LOG_TYPE_DEBUG,  "Nothing in incoming queue to process (filter: %@)",  buf,  0xCu);
        }
      }

      uint64_t v5 = 1LL;
    }

uint64_t sub_100064C30(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contextID]);
  id v19 = 0LL;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSCurrentItemPointer remoteItemPointers:contextID:error:]( &OBJC_CLASS___CKKSCurrentItemPointer,  "remoteItemPointers:contextID:error:",  v2,  v3,  &v19));
  id v5 = v19;

  if (v5) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v4 == 0LL;
  }
  if (v6)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneName]);
    id v8 = sub_1000AA6AC(@"ckksincoming", v7);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);

    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v21 = v5;
      uint64_t v10 = "Could not load remote item pointers: %@";
      uint64_t v11 = v9;
      os_log_type_t v12 = OS_LOG_TYPE_ERROR;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v11, v12, v10, buf, 0xCu);
    }

void sub_100065498( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, id location)
{
}

uint64_t sub_100066B88(uint64_t a1)
{
  uint64_t v1 = a1;
  if (!*(void *)(a1 + 32))
  {
    __int128 v238 = 0u;
    __int128 v239 = 0u;
    __int128 v236 = 0u;
    __int128 v237 = 0u;
    id v21 = *(id *)(a1 + 80);
    id v22 = [v21 countByEnumeratingWithState:&v236 objects:v250 count:16];
    if (v22)
    {
      id v23 = v22;
      uint64_t v24 = *(void *)v237;
      do
      {
        for (uint64_t i = 0LL; i != v23; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v237 != v24) {
            objc_enumerationMutation(v21);
          }
          uint64_t v26 = *(void **)(*((void *)&v236 + 1) + 8LL * (void)i);
          id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 zoneName]);
          id v29 = sub_1000AA6AC(@"ckksoutgoing", v28);
          uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);

          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v26 recordName]);
            *(_DWORD *)__int128 buf = 138412290;
            *(void *)v252 = v31;
            _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Record deletion successful for %@",  buf,  0xCu);
          }
        }

        id v23 = [v21 countByEnumeratingWithState:&v236 objects:v250 count:16];
      }

      while (v23);
    }

    id v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
    int v33 = (void *)objc_claimAutoreleasedReturnValue([v32 zoneName]);
    id v34 = sub_1000AA6AC(@"ckksoutgoing", v33);
    __int128 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);

    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v36 = [*(id *)(a1 + 88) count];
      unsigned int v37 = [*(id *)(a1 + 80) count];
      *(_DWORD *)__int128 buf = 67109376;
      *(_DWORD *)v252 = v36;
      *(_WORD *)&v252[4] = 1024;
      *(_DWORD *)&v252[6] = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "Completed processing outgoing queue (%d modifications, %d deletions)",  buf,  0xEu);
    }

    CFDataRef v213 = objc_alloc_init(&OBJC_CLASS___CKKSPowerCollection);
    __int128 v38 = objc_alloc(&OBJC_CLASS___AAFAnalyticsEventSecurity);
    uint64_t v248 = kSecurityRTCFieldTotalCKRecords;
    __int128 v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 88) count]));
    v249 = v39;
    __int128 v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v249,  &v248,  1LL));
    __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) deps]);
    id v42 = (void *)objc_claimAutoreleasedReturnValue([v41 activeAccount]);
    uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v42 altDSID]);
    uint64_t v44 = kSecurityRTCEventNameSaveCKMirrorEntries;
    uint64_t v45 = kSecurityRTCEventCategoryAccountDataAccessRecovery;
    id v46 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) deps]);
    v203 = -[AAFAnalyticsEventSecurity initWithCKKSMetrics:altDSID:eventName:testsAreEnabled:category:sendMetric:]( v38,  "initWithCKKSMetrics:altDSID:eventName:testsAreEnabled:category:sendMetric:",  v40,  v43,  v44,  0,  v45,  [v46 sendMetric]);

    id v47 = (id *)a1;
    __int128 v234 = 0u;
    __int128 v235 = 0u;
    __int128 v232 = 0u;
    __int128 v233 = 0u;
    id obj = *(id *)(a1 + 88);
    id v208 = [obj countByEnumeratingWithState:&v232 objects:v247 count:16];
    id v48 = 0LL;
    uint64_t v49 = 0LL;
    if (!v208)
    {
LABEL_51:
      v216 = v49;

      __int128 v225 = 0u;
      __int128 v226 = 0u;
      __int128 v223 = 0u;
      __int128 v224 = 0u;
      id obja = v47[10];
      id v212 = [obja countByEnumeratingWithState:&v223 objects:v246 count:16];
      id v111 = 0LL;
      if (v212)
      {
        uint64_t v209 = *(void *)v224;
        do
        {
          for (j = 0LL; j != v212; j = (char *)j + 1)
          {
            if (*(void *)v224 != v209) {
              objc_enumerationMutation(obja);
            }
            id v113 = *(void **)(*((void *)&v223 + 1) + 8LL * (void)j);
            id v114 = (void *)objc_claimAutoreleasedReturnValue([v113 recordName]);
            xpc_object_t v115 = (void *)objc_claimAutoreleasedReturnValue([v47[7] deps]);
            uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue([v115 contextID]);
            v117 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
            id v222 = v111;
            v118 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSOutgoingQueueEntry fromDatabase:state:contextID:zoneID:error:]( &OBJC_CLASS___CKKSOutgoingQueueEntry,  "fromDatabase:state:contextID:zoneID:error:",  v114,  @"inflight",  v116,  v117,  &v222));
            id v119 = v222;

            id v120 = (id *)a1;
            uint64_t v121 = *(void *)(a1 + 40);
            id v221 = v119;
            [v118 intransactionMoveToState:@"deleted" viewState:v121 error:&v221];
            id v122 = v221;

            if (v122)
            {
              __int128 v123 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
              __int128 v124 = (void *)objc_claimAutoreleasedReturnValue([v123 zoneName]);
              id v125 = sub_1000AA6AC(@"ckksoutgoing", v124);
              __int128 v126 = (os_log_s *)objc_claimAutoreleasedReturnValue(v125);

              if (os_log_type_enabled(v126, OS_LOG_TYPE_ERROR))
              {
                __int128 v127 = (void *)objc_claimAutoreleasedReturnValue([v113 recordName]);
                *(_DWORD *)__int128 buf = 138412546;
                *(void *)v252 = v127;
                *(_WORD *)&v252[8] = 2112;
                id v253 = v122;
                _os_log_impl( (void *)&_mh_execute_header,  v126,  OS_LOG_TYPE_ERROR,  "Couldn't delete %@ from outgoingqueue: %@",  buf,  0x16u);
              }

              id v128 = v122;
              id v120 = (id *)a1;
              [*(id *)(a1 + 56) setError:v128];
              v216 = v128;
            }

            __int128 v129 = (void *)objc_claimAutoreleasedReturnValue([v113 recordName]);
            __int128 v130 = (void *)objc_claimAutoreleasedReturnValue([v120[7] deps]);
            __int128 v131 = (void *)objc_claimAutoreleasedReturnValue([v130 contextID]);
            __int128 v132 = (void *)objc_claimAutoreleasedReturnValue([v120[5] zoneID]);
            id v220 = 0LL;
            __int128 v133 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSMirrorEntry tryFromDatabase:contextID:zoneID:error:]( &OBJC_CLASS___CKKSMirrorEntry,  "tryFromDatabase:contextID:zoneID:error:",  v129,  v131,  v132,  &v220));
            id v134 = v220;

            id v219 = v134;
            [v133 deleteFromDatabase:&v219];
            id v111 = v219;

            if (v111)
            {
              id v135 = (void *)objc_claimAutoreleasedReturnValue([v120[5] zoneID]);
              id v136 = (void *)objc_claimAutoreleasedReturnValue([v135 zoneName]);
              id v137 = sub_1000AA6AC(@"ckksoutgoing", v136);
              id v138 = (os_log_s *)objc_claimAutoreleasedReturnValue(v137);

              if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR))
              {
                id v139 = (void *)objc_claimAutoreleasedReturnValue([v113 recordName]);
                *(_DWORD *)__int128 buf = 138412546;
                *(void *)v252 = v139;
                *(_WORD *)&v252[8] = 2112;
                id v253 = v111;
                _os_log_impl( (void *)&_mh_execute_header,  v138,  OS_LOG_TYPE_ERROR,  "Couldn't delete %@ from ckmirror: %@",  buf,  0x16u);
              }

              id v140 = v111;
              id v47 = (id *)a1;
              [*(id *)(a1 + 56) setError:v140];
              v216 = v140;
            }

            else
            {
              id v47 = v120;
            }

            -[CKKSPowerCollection deletedOQE:](v213, "deletedOQE:", v118);
          }

          id v212 = [obja countByEnumeratingWithState:&v223 objects:v246 count:16];
        }

        while (v212);
      }

      CFDataRef v141 = (void *)objc_claimAutoreleasedReturnValue([v47[7] error]);
      uint64_t v142 = (void *)objc_claimAutoreleasedReturnValue([v47[7] error]);
      +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v203,  v141 == 0LL,  v142);

      -[CKKSPowerCollection commit](v213, "commit");
      uint64_t v143 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) deps]);
      uint64_t v144 = (void *)objc_claimAutoreleasedReturnValue([v143 overallLaunch]);
      [v144 addEvent:@"process-outgoing-queue-complete"];

      if (v216)
      {
        uint64_t v145 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
        v146 = (void *)objc_claimAutoreleasedReturnValue([v145 zoneName]);
        id v147 = sub_1000AA6AC(@"ckksoutgoing", v146);
        BOOL v148 = (os_log_s *)objc_claimAutoreleasedReturnValue(v147);

        if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR))
        {
          v149 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) error]);
          *(_DWORD *)__int128 buf = 138412290;
          *(void *)v252 = v149;
          _os_log_impl( (void *)&_mh_execute_header,  v148,  OS_LOG_TYPE_ERROR,  "Operation failed; rolling back: %@",
            buf,
            0xCu);
        }

        v150 = *(void **)(a1 + 48);
        size_t v151 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) error]);
        v152 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
        v153 = (void *)objc_claimAutoreleasedReturnValue([v152 zoneName]);
        [v150 logRecoverableError:v151 forEvent:@"CKKSEventProcessOutgoingQueue" zoneName:v153 withAttributes:0];

        uint64_t v154 = 0LL;
      }

      else
      {
        v164 = *(void **)(a1 + 48);
        size_t v151 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
        v152 = (void *)objc_claimAutoreleasedReturnValue([v151 zoneName]);
        [v164 logSuccessForEvent:@"CKKSEventProcessOutgoingQueue" zoneName:v152];
        uint64_t v154 = 1LL;
      }

      return v154;
    }

    uint64_t v207 = *(void *)v233;
LABEL_22:
    uint64_t v50 = 0LL;
    while (1)
    {
      if (*(void *)v233 != v207) {
        objc_enumerationMutation(obj);
      }
      unsigned int v51 = *(void **)(*((void *)&v232 + 1) + 8 * v50);
      uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([v51 recordType]);
      unsigned int v53 = [v52 isEqualToString:@"item"];

      if (v53)
      {
        v215 = v49;
        v211 = v51;
        uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v51 recordID]);
        unsigned int v55 = (void *)objc_claimAutoreleasedReturnValue([v54 recordName]);
        uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v47[7] deps]);
        uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue([v56 contextID]);
        uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v47[5] zoneID]);
        id v231 = v48;
        uint64_t v59 = (CKKSCurrentKeyPointer *)objc_claimAutoreleasedReturnValue( +[CKKSOutgoingQueueEntry fromDatabase:state:contextID:zoneID:error:]( &OBJC_CLASS___CKKSOutgoingQueueEntry,  "fromDatabase:state:contextID:zoneID:error:",  v55,  @"inflight",  v57,  v58,  &v231));
        uint64_t v60 = v47;
        id v61 = v231;

        int v62 = v59;
        id v63 = v60[5];
        id v230 = v61;
        -[CKKSCurrentKeyPointer intransactionMoveToState:viewState:error:]( v59,  "intransactionMoveToState:viewState:error:",  @"deleted",  v63,  &v230);
        id v64 = v230;

        if (v64)
        {
          uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue([v60[5] zoneID]);
          id v66 = (void *)objc_claimAutoreleasedReturnValue([v65 zoneName]);
          id v67 = sub_1000AA6AC(@"ckksoutgoing", v66);
          id v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);

          id v47 = v60;
          if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          {
            uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue([v211 recordID]);
            uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue([v69 recordName]);
            *(_DWORD *)__int128 buf = 138412546;
            *(void *)v252 = v70;
            *(_WORD *)&v252[8] = 2112;
            id v253 = v64;
            _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_ERROR,  "Couldn't update %@ in outgoingqueue: %@",  buf,  0x16u);
          }

          id v71 = v64;
          [v60[7] setError:v71];
          uint64_t v49 = v71;
        }

        else
        {
          id v47 = v60;
          uint64_t v49 = v215;
        }

        __int16 v96 = objc_alloc(&OBJC_CLASS___CKKSMirrorEntry);
        CFDataRef v97 = (void *)objc_claimAutoreleasedReturnValue([v47[7] deps]);
        uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue([v97 contextID]);
        v99 = -[CKKSMirrorEntry initWithCKRecord:contextID:](v96, "initWithCKRecord:contextID:", v211, v98);

        id v229 = 0LL;
        -[CKKSSQLDatabaseObject saveToDatabase:](v99, "saveToDatabase:", &v229);
        id v48 = v229;
        if (v48)
        {
          BOOL v100 = (void *)objc_claimAutoreleasedReturnValue([v47[5] zoneID]);
          unsigned int v101 = (void *)objc_claimAutoreleasedReturnValue([v100 zoneName]);
          id v102 = sub_1000AA6AC(@"ckksoutgoing", v101);
          id v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);

          if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
          {
            v104 = (void *)objc_claimAutoreleasedReturnValue([v211 recordID]);
            v105 = (void *)objc_claimAutoreleasedReturnValue([v104 recordName]);
            *(_DWORD *)__int128 buf = 138412546;
            *(void *)v252 = v105;
            *(_WORD *)&v252[8] = 2112;
            id v253 = v48;
            _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_ERROR,  "Couldn't save %@ to ckmirror: %@",  buf,  0x16u);
          }

          id v106 = v48;
          [v47[7] setError:v106];
          uint64_t v49 = v106;
          int v62 = v59;
        }

        -[CKKSPowerCollection storedOQE:](v213, "storedOQE:", v62);

        goto LABEL_49;
      }

      id v72 = (void *)objc_claimAutoreleasedReturnValue([v51 recordType]);
      unsigned int v73 = [v72 isEqualToString:@"currentkey"];

      if (v73)
      {
        __int128 v74 = objc_alloc(&OBJC_CLASS___CKKSCurrentKeyPointer);
        __int128 v75 = (void *)objc_claimAutoreleasedReturnValue([v47[7] deps]);
        __int128 v76 = (void *)objc_claimAutoreleasedReturnValue([v75 contextID]);
        id v77 = v51;
        int v62 = -[CKKSCKRecordHolder initWithCKRecord:contextID:](v74, "initWithCKRecord:contextID:", v51, v76);

        id v228 = v48;
        -[CKKSSQLDatabaseObject saveToDatabase:](v62, "saveToDatabase:", &v228);
        id v78 = v228;

        if (!v78) {
          goto LABEL_46;
        }
        CFTypeRef v79 = (void *)objc_claimAutoreleasedReturnValue([v47[5] zoneID]);
        __int128 v80 = (void *)objc_claimAutoreleasedReturnValue([v79 zoneName]);
        id v81 = sub_1000AA6AC(@"ckksoutgoing", v80);
        __int128 v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);

        if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
        {
          id v83 = (void *)objc_claimAutoreleasedReturnValue([v77 recordID]);
          id v84 = (void *)objc_claimAutoreleasedReturnValue([v83 recordName]);
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)v252 = v84;
          *(_WORD *)&v252[8] = 2112;
          id v253 = v78;
          id v85 = v82;
          id v86 = "Couldn't save %@ to currentkey: %@";
LABEL_38:
          _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_ERROR, v86, buf, 0x16u);
        }
      }

      else
      {
        id v87 = (void *)objc_claimAutoreleasedReturnValue([v51 recordType]);
        unsigned int v88 = [v87 isEqualToString:@"devicestate"];

        if (!v88)
        {
          v107 = v51;
          v108 = (void *)objc_claimAutoreleasedReturnValue([v47[5] zoneID]);
          v109 = (void *)objc_claimAutoreleasedReturnValue([v108 zoneName]);
          id v110 = sub_1000AA6AC(@"ckksoutgoing", v109);
          int v62 = (CKKSCurrentKeyPointer *)objc_claimAutoreleasedReturnValue(v110);

          if (os_log_type_enabled((os_log_t)v62, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 138412290;
            *(void *)v252 = v107;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v62,  OS_LOG_TYPE_ERROR,  "unknown record type in results: %@",  buf,  0xCu);
          }

          goto LABEL_49;
        }

        id v89 = objc_alloc(&OBJC_CLASS___CKKSDeviceStateEntry);
        __int128 v90 = (void *)objc_claimAutoreleasedReturnValue([v47[7] deps]);
        CFTypeRef v91 = (void *)objc_claimAutoreleasedReturnValue([v90 contextID]);
        __int16 v92 = v51;
        int v62 = -[CKKSCKRecordHolder initWithCKRecord:contextID:](v89, "initWithCKRecord:contextID:", v51, v91);

        id v227 = v48;
        -[CKKSSQLDatabaseObject saveToDatabase:](v62, "saveToDatabase:", &v227);
        id v78 = v227;

        if (!v78)
        {
LABEL_46:
          id v48 = 0LL;
          goto LABEL_49;
        }

        uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue([v47[5] zoneID]);
        __int16 v94 = (void *)objc_claimAutoreleasedReturnValue([v93 zoneName]);
        id v95 = sub_1000AA6AC(@"ckksoutgoing", v94);
        __int128 v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);

        if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
        {
          id v83 = (void *)objc_claimAutoreleasedReturnValue([v92 recordID]);
          id v84 = (void *)objc_claimAutoreleasedReturnValue([v83 recordName]);
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)v252 = v84;
          *(_WORD *)&v252[8] = 2112;
          id v253 = v78;
          id v85 = v82;
          id v86 = "Couldn't save %@ to ckdevicestate: %@";
          goto LABEL_38;
        }
      }

      id v48 = v78;
      [v47[7] setError:v48];
      uint64_t v49 = v48;
LABEL_49:

      if (v208 == (id)++v50)
      {
        id v208 = [obj countByEnumeratingWithState:&v232 objects:v247 count:16];
        if (!v208) {
          goto LABEL_51;
        }
        goto LABEL_22;
      }
    }
  }

  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 zoneName]);
  id v4 = sub_1000AA6AC(@"ckksoutgoing", v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);

  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(v1 + 32);
    *(_DWORD *)__int128 buf = 138412290;
    *(void *)v252 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "error processing outgoing queue: %@", buf, 0xCu);
  }

  uint64_t v7 = *(void **)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 32);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 40) zoneID]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 zoneName]);
  [v7 logRecoverableError:v8 forEvent:@"CKKSEventProcessOutgoingQueue" zoneName:v10 withAttributes:0];

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 56) deps]);
  [v11 intransactionCKWriteFailed:*(void *)(v1 + 32) attemptedRecordsChanged:*(void *)(v1 + 64)];

  os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 32) domain]);
  if ([v12 isEqualToString:CKErrorDomain])
  {
    id v13 = [*(id *)(v1 + 32) code];

    if (v13 == (id)2)
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 32) userInfo]);
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:CKPartialErrorsByItemIDKey]);

      if ([*(id *)(v1 + 56) intransactionIsErrorBadEtagOnKeyPointersOnly:*(void *)(v1 + 32)])
      {
        id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 40) zoneID]);
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 zoneName]);
        id v18 = sub_1000AA6AC(@"ckksoutgoing", v17);
        id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);

        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          id v20 = "Error is simply due to current key pointers changing; marking all records as 'needs reencrypt'";
LABEL_84:
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v20, buf, 2u);
          goto LABEL_85;
        }

        goto LABEL_85;
      }

      if ([*(id *)(v1 + 56) _onqueueIsErrorMissingSyncKey:*(void *)(v1 + 32)])
      {
        v165 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 40) zoneID]);
        CFBooleanRef v166 = (void *)objc_claimAutoreleasedReturnValue([v165 zoneName]);
        id v167 = sub_1000AA6AC(@"ckksoutgoing", v166);
        id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v167);

        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          id v20 = "Error is due to the key records missing. Marking all as 'needs reencrypt'";
          goto LABEL_84;
        }

LABEL_85:
        v168 = *(void **)(v1 + 56);
        uint64_t v169 = (void *)objc_claimAutoreleasedReturnValue([v15 allKeys]);
        [v168 _onqueueModifyAllRecords:v169 as:@"reencrypt" viewState:*(void *)(v1 + 40)];

        goto LABEL_86;
      }

      __int128 v244 = 0u;
      __int128 v245 = 0u;
      __int128 v242 = 0u;
      __int128 v243 = 0u;
      id v162 = v15;
      id v217 = [v162 countByEnumeratingWithState:&v242 objects:v254 count:16];
      if (!v217) {
        goto LABEL_87;
      }
      id objb = v15;
      char v210 = 0;
      uint64_t v214 = *(void *)v243;
LABEL_92:
      uint64_t v172 = 0LL;
      while (1)
      {
        if (*(void *)v243 != v214) {
          objc_enumerationMutation(v162);
        }
        CFDataRef v173 = *(void **)(*((void *)&v242 + 1) + 8 * v172);
        v174 = (void *)objc_claimAutoreleasedReturnValue([v162 objectForKeyedSubscript:v173]);
        uint64_t v175 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 40) zoneID]);
        v176 = (void *)objc_claimAutoreleasedReturnValue([v175 zoneName]);
        id v177 = sub_1000AA6AC(@"ckksoutgoing", v176);
        CFDataRef v178 = (os_log_s *)objc_claimAutoreleasedReturnValue(v177);

        if (os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)v252 = v173;
          *(_WORD *)&v252[8] = 2112;
          id v253 = v174;
          _os_log_impl((void *)&_mh_execute_header, v178, OS_LOG_TYPE_DEFAULT, "failed record: %@ %@", buf, 0x16u);
        }

        CFDataRef v179 = (void *)objc_claimAutoreleasedReturnValue([v174 domain]);
        id v180 = [v174 code];

        if (v180 != (id)14) {
          goto LABEL_102;
        }
        v181 = (void *)objc_claimAutoreleasedReturnValue([v173 recordName]);
        if ([v181 isEqualToString:@"classA"])
        {
        }

        else
        {
          v201 = (void *)objc_claimAutoreleasedReturnValue([v173 recordName]);
          unsigned __int8 v202 = [v201 isEqualToString:@"classC"];

          if ((v202 & 1) == 0) {
            goto LABEL_114;
          }
        }

        char v210 = 1;
LABEL_118:

        if (v217 == (id)++v172)
        {
          id v217 = [v162 countByEnumeratingWithState:&v242 objects:v254 count:16];
          if (!v217)
          {

            id v15 = objb;
            if ((v210 & 1) == 0) {
              goto LABEL_88;
            }
LABEL_86:
            id v162 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 56) deps]);
            v170 = (void *)objc_claimAutoreleasedReturnValue([v162 flagHandler]);
            [v170 _onqueueHandleFlag:@"item_reencryption_needed"];

LABEL_87:
            id v162 = v15;
            goto LABEL_88;
          }

          goto LABEL_92;
        }
      }

LABEL_102:
      BOOL v182 = (void *)objc_claimAutoreleasedReturnValue([v174 domain]);
      if ([v182 isEqualToString:CKErrorDomain])
      {
        id v183 = [v174 code];

        if (v183 == (id)22)
        {
          if ([*(id *)(v1 + 72) containsObject:v173])
          {
            v184 = (void *)objc_claimAutoreleasedReturnValue([v173 recordName]);
            v185 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 56) deps]);
            CFStringRef v186 = (void *)objc_claimAutoreleasedReturnValue([v185 contextID]);
            v187 = (void *)objc_claimAutoreleasedReturnValue([v173 zoneID]);
            id v241 = 0LL;
            uint64_t v188 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSOutgoingQueueEntry tryFromDatabase:state:contextID:zoneID:error:]( &OBJC_CLASS___CKKSOutgoingQueueEntry,  "tryFromDatabase:state:contextID:zoneID:error:",  v184,  @"inflight",  v186,  v187,  &v241));
            id v189 = v241;

            uint64_t v1 = a1;
            uint64_t v190 = v188;
            uint64_t v191 = *(void *)(a1 + 40);
            id v240 = v189;
            [v188 intransactionMoveToState:@"new" viewState:v191 error:&v240];
            id v192 = v240;

            if (v192)
            {
              CFDataRef v193 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
              CFDataRef v194 = (void *)objc_claimAutoreleasedReturnValue([v193 zoneName]);
              id v195 = sub_1000AA6AC(@"ckksoutgoing", v194);
              CFDataRef v196 = (os_log_s *)objc_claimAutoreleasedReturnValue(v195);

              if (os_log_type_enabled(v196, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__int128 buf = 138412290;
                *(void *)v252 = v192;
                _os_log_impl( (void *)&_mh_execute_header,  v196,  OS_LOG_TYPE_ERROR,  "Couldn't clean up outgoing queue entry: %@",  buf,  0xCu);
              }

              uint64_t v1 = a1;
            }
          }

          goto LABEL_118;
        }
      }

      else
      {
      }

      char v197 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 40) zoneID]);
      int v198 = (void *)objc_claimAutoreleasedReturnValue([v197 zoneName]);
      id v199 = sub_1000AA6AC(@"ckksoutgoing", v198);
      v200 = (os_log_s *)objc_claimAutoreleasedReturnValue(v199);

      if (os_log_type_enabled(v200, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412546;
        *(void *)v252 = v173;
        *(_WORD *)&v252[8] = 2112;
        id v253 = v174;
        _os_log_impl((void *)&_mh_execute_header, v200, OS_LOG_TYPE_ERROR, "Unknown error on row: %@ %@", buf, 0x16u);
      }

      uint64_t v1 = a1;
LABEL_114:
      if ([*(id *)(v1 + 72) containsObject:v173]) {
        [*(id *)(v1 + 56) _onqueueModifyRecordAsError:v173 recordError:v174 viewState:*(void *)(v1 + 40)];
      }
      goto LABEL_118;
    }
  }

  else
  {
  }

  unsigned int v155 = [*(id *)(v1 + 32) isCKInternalServerHTTPError];
  CFStringRef v156 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 40) zoneID]);
  v157 = (void *)objc_claimAutoreleasedReturnValue([v156 zoneName]);
  id v158 = sub_1000AA6AC(@"ckks", v157);
  v159 = (os_log_s *)objc_claimAutoreleasedReturnValue(v158);

  BOOL v160 = os_log_type_enabled(v159, OS_LOG_TYPE_DEFAULT);
  if (v155)
  {
    if (v160)
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)v252 = 1800;
      _os_log_impl( (void *)&_mh_execute_header,  v159,  OS_LOG_TYPE_DEFAULT,  "CloudKit is presumably down; scheduling upload after %d seconds",
        buf,
        8u);
    }

    int v161 = *(void **)(v1 + 56);
    id v162 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 72) allObjects]);
    [v161 _onqueueSaveRecordsWithDelay:v162 viewState:*(void *)(v1 + 40)];
  }

  else
  {
    if (v160)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v159,  OS_LOG_TYPE_DEFAULT,  "Error is scary: putting all inflight OQEs back into state 'new'",  buf,  2u);
    }

    v163 = *(void **)(v1 + 56);
    id v162 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 72) allObjects]);
    [v163 _onqueueModifyAllRecords:v162 as:@"new" viewState:*(void *)(v1 + 40)];
  }

  id v32 = 1;
  uint64_t v24 = v112;
LABEL_86:
  __int128 v76 = v109;
  __int128 v75 = v110;
  id v77 = v108;

LABEL_58:
  return v32;
}

  unsigned int v51 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  self->_optionsAllowPowerNapScheduling));
  [v3 setObject:v51 forKey:@"options_allow_power_nap_scheduling"];

  id v22 = self->_has;
  if ((*(_DWORD *)&v22 & 0x200000) == 0)
  {
LABEL_51:
    if ((*(_DWORD *)&v22 & 0x400000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }

  PBDataWriterWriteBOOLField(v20, self->_optionsAllowPowerNapScheduling, 305LL);
  id v16 = self->_has;
  if ((*(_DWORD *)&v16 & 0x200000) == 0)
  {
LABEL_51:
    if ((*(_DWORD *)&v16 & 0x400000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }

  *((_BYTE *)v4 + 274) = self->_optionsAllowPowerNapScheduling;
  *((_DWORD *)v4 + 70) |= 0x2000000u;
  uint64_t v8 = self->_has;
  if ((*(_DWORD *)&v8 & 0x200000) == 0)
  {
LABEL_51:
    if ((*(_DWORD *)&v8 & 0x400000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }

LABEL_88:
  [*(id *)(v1 + 56) setError:*(void *)(v1 + 32)];
  return 1LL;
}

  LOBYTE(v33) = *((_BYTE *)a3 + OBJC_IVAR___PBDataReader__error) == 0;
  return v33;
}

  self->_optionsAllowExpensiveAccess = *((_BYTE *)v5 + 273);
  *(_DWORD *)&self->_has |= 0x1000000u;
  uint64_t v11 = *((_DWORD *)v5 + 70);
  if ((v11 & 0x2000000) == 0)
  {
LABEL_62:
    if ((v11 & 0x200000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_90;
  }

uint64_t sub_100068430(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 contextID]);
  id v299 = 0LL;
  __int128 v236 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSOutgoingQueueOperation ontransactionFetchEntries:contextID:error:]( &OBJC_CLASS___CKKSOutgoingQueueOperation,  "ontransactionFetchEntries:contextID:error:",  v1,  v3,  &v299));
  id v4 = v299;

  if (!v236 || v4)
  {
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 zoneName]);
    id v27 = sub_1000AA6AC(@"ckksoutgoing", v26);
    uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);

    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "Error fetching outgoing queue records: %@",  buf,  0xCu);
    }

    [*(id *)(a1 + 40) setError:v4];
    +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  *(void *)(a1 + 48),  0LL,  v4);
    uint64_t v24 = 0LL;
    goto LABEL_129;
  }

  id v235 = [v236 count];
  id v5 = *(void **)(a1 + 48);
  v312[0] = kSecurityRTCFieldNumKeychainItems;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v236 count]));
  v313[0] = v6;
  uint64_t v234 = kSecurityRTCFieldIsFullUpload;
  v312[1] = kSecurityRTCFieldIsFullUpload;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", (unint64_t)v235 > 0x63));
  v313[1] = v7;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v313,  v312,  2LL));
  [v5 addMetrics:v8];

  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 zoneName]);
  +[CKKSPowerCollection CKKSPowerEvent:zone:count:]( CKKSPowerCollection,  "CKKSPowerEvent:zone:count:",  @"processOutgoingQueue",  v10,  [v236 count]);

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
  os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 zoneName]);
  id v13 = sub_1000AA6AC(@"ckksoutgoing", v12);
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);

  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 138412290;
    *(void *)&uint8_t buf[4] = v236;
    _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "processing outgoing queue: %@", buf, 0xCu);
  }

  v255 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  v247 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  v246 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v240 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contextID]);
  id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
  id v298 = 0LL;
  uint64_t v248 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSCurrentKeyPointer fromDatabase:contextID:zoneID:error:]( &OBJC_CLASS___CKKSCurrentKeyPointer,  "fromDatabase:contextID:zoneID:error:",  @"classA",  v15,  v16,  &v298));
  id v17 = v298;

  id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contextID]);
  id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
  id v297 = v17;
  __int128 v245 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSCurrentKeyPointer fromDatabase:contextID:zoneID:error:]( &OBJC_CLASS___CKKSCurrentKeyPointer,  "fromDatabase:contextID:zoneID:error:",  @"classC",  v18,  v19,  &v297));
  id v4 = v297;

  __int128 v244 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if (v4)
  {
    id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 zoneName]);
    id v22 = sub_1000AA6AC(@"ckksoutgoing", v21);
    id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);

    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "Couldn't load current class keys: %@",  buf,  0xCu);
    }

    [*(id *)(a1 + 40) setError:v4];
    +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  *(void *)(a1 + 48),  0LL,  v4);
    uint64_t v24 = 0LL;
    goto LABEL_128;
  }

  __int128 v295 = 0u;
  __int128 v296 = 0u;
  __int128 v293 = 0u;
  __int128 v294 = 0u;
  id obj = v236;
  id v253 = [obj countByEnumeratingWithState:&v293 objects:v311 count:16];
  if (!v253)
  {
    id v4 = 0LL;
    uint64_t v135 = 0LL;
    goto LABEL_72;
  }

  char v237 = 0;
  id v4 = 0LL;
  uint64_t v251 = *(void *)v294;
  do
  {
    for (uint64_t i = 0LL; i != v253; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v294 != v251) {
        objc_enumerationMutation(obj);
      }
      uint64_t v30 = *(void **)(*((void *)&v293 + 1) + 8LL * (void)i);
      context = objc_autoreleasePoolPush();
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v30 uuid]);
      id v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
      int v33 = (void *)objc_claimAutoreleasedReturnValue([v32 contextID]);
      id v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
      id v292 = v4;
      __int128 v35 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSOutgoingQueueEntry tryFromDatabase:state:contextID:zoneID:error:]( &OBJC_CLASS___CKKSOutgoingQueueEntry,  "tryFromDatabase:state:contextID:zoneID:error:",  v31,  @"inflight",  v33,  v34,  &v292));
      id v36 = v292;

      if (!v36 && v35)
      {
        id v4 = 0LL;
        goto LABEL_65;
      }

      unsigned int v37 = (void *)objc_claimAutoreleasedReturnValue([v30 action]);
      unsigned __int8 v38 = [v37 isEqualToString:@"delete"];

      if ((v38 & 1) == 0)
      {
        __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([v30 item]);
        __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([v39 parentKeyUUID]);
        __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([v248 currentKeyUUID]);
        unsigned int v42 = [v40 isEqualToString:v41];

        if (v42)
        {
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v244,  "setObject:forKeyedSubscript:",  v248,  @"classA");
        }

        else
        {
          uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v30 item]);
          uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v43 parentKeyUUID]);
          uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v245 currentKeyUUID]);
          unsigned int v46 = [v44 isEqualToString:v45];

          if (!v46)
          {
            id v95 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
            __int16 v96 = (void *)objc_claimAutoreleasedReturnValue([v95 zoneName]);
            id v97 = sub_1000AA6AC(@"ckksoutgoing", v96);
            uint64_t v98 = (os_log_s *)objc_claimAutoreleasedReturnValue(v97);

            if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
            {
              v99 = (void *)objc_claimAutoreleasedReturnValue([v30 item]);
              BOOL v100 = (void *)objc_claimAutoreleasedReturnValue([v99 parentKeyUUID]);
              *(_DWORD *)__int128 buf = 138413058;
              *(void *)&uint8_t buf[4] = v30;
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v100;
              *(_WORD *)&buf[22] = 2112;
              v308 = v248;
              __int16 v309 = 2112;
              v310 = v245;
              _os_log_impl( (void *)&_mh_execute_header,  v98,  OS_LOG_TYPE_DEFAULT,  "Item's encryption key (%@ %@) is neither %@ or %@",  buf,  0x2Au);
            }

            uint64_t v101 = *(void *)(a1 + 32);
            id v291 = v36;
            [v30 intransactionMoveToState:@"reencrypt" viewState:v101 error:&v291];
            unsigned int v51 = (CKRecordID *)v291;

            if (!v51)
            {
              id v4 = 0LL;
              char v237 = 1;
              goto LABEL_65;
            }

            id v102 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
            id v103 = (void *)objc_claimAutoreleasedReturnValue([v102 zoneName]);
            id v104 = sub_1000AA6AC(@"ckksoutgoing", v103);
            v105 = (os_log_s *)objc_claimAutoreleasedReturnValue(v104);

            if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = 138412290;
              *(void *)&uint8_t buf[4] = v51;
              _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_ERROR,  "couldn't save oqe to database: %@",  buf,  0xCu);
            }

            [*(id *)(a1 + 40) setError:v51];
            goto LABEL_48;
          }

          -[NSMutableDictionary setObject:forKeyedSubscript:]( v244,  "setObject:forKeyedSubscript:",  v245,  @"classC");
        }
      }

      id v47 = (void *)objc_claimAutoreleasedReturnValue([v30 action]);
      unsigned int v48 = [v47 isEqualToString:@"add"];

      if (v48)
      {
        uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v30 item]);
        uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
        unsigned int v51 = (CKRecordID *)objc_claimAutoreleasedReturnValue([v49 CKRecordWithZoneID:v50]);

        uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecordID recordID](v51, "recordID"));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v255, "setObject:forKeyedSubscript:", v51, v52);

        unsigned int v53 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecordID recordID](v51, "recordID"));
        -[NSMutableSet addObject:](v247, "addObject:", v53);

        -[NSMutableSet addObject:](v246, "addObject:", v30);
        uint64_t v54 = *(void *)(a1 + 32);
        id v290 = v36;
        [v30 intransactionMoveToState:@"inflight" viewState:v54 error:&v290];
        id v4 = v290;

        if (v4)
        {
          unsigned int v55 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
          uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v55 zoneName]);
          id v57 = sub_1000AA6AC(@"ckksoutgoing", v56);
          uint64_t v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);

          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 138412290;
            *(void *)&uint8_t buf[4] = v4;
            _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_ERROR,  "couldn't save state for CKKSOutgoingQueueEntry: %@",  buf,  0xCu);
          }

          [*(id *)(a1 + 40) setError:v4];
        }

        goto LABEL_64;
      }

      uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v30 action]);
      unsigned int v60 = [v59 isEqualToString:@"delete"];

      if (v60)
      {
        id v61 = objc_alloc(&OBJC_CLASS___CKRecordID);
        int v62 = (void *)objc_claimAutoreleasedReturnValue([v30 item]);
        id v63 = (void *)objc_claimAutoreleasedReturnValue([v62 uuid]);
        id v64 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
        unsigned int v51 = -[CKRecordID initWithRecordName:zoneID:](v61, "initWithRecordName:zoneID:", v63, v64);

        -[NSMutableArray addObject:](v240, "addObject:", v51);
        -[NSMutableSet addObject:](v247, "addObject:", v51);
        -[NSMutableSet addObject:](v246, "addObject:", v30);
        uint64_t v65 = *(void *)(a1 + 32);
        id v289 = v36;
        [v30 intransactionMoveToState:@"inflight" viewState:v65 error:&v289];
        id v4 = v289;

        if (v4)
        {
          id v66 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
          id v67 = (void *)objc_claimAutoreleasedReturnValue([v66 zoneName]);
          id v68 = sub_1000AA6AC(@"ckksoutgoing", v67);
          uint64_t v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);

          if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 138412290;
            *(void *)&uint8_t buf[4] = v4;
            _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_ERROR,  "couldn't save state for CKKSOutgoingQueueEntry: %@",  buf,  0xCu);
          }
        }

        goto LABEL_64;
      }

      uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue([v30 action]);
      unsigned int v71 = [v70 isEqualToString:@"modify"];

      if (!v71)
      {
        id v4 = v36;
        goto LABEL_65;
      }

      id v72 = (void *)objc_claimAutoreleasedReturnValue([v30 item]);
      unsigned int v73 = (void *)objc_claimAutoreleasedReturnValue([v72 uuid]);
      __int128 v74 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
      __int128 v75 = (void *)objc_claimAutoreleasedReturnValue([v74 contextID]);
      __int128 v76 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
      id v288 = v36;
      unsigned int v51 = (CKRecordID *)objc_claimAutoreleasedReturnValue( +[CKKSMirrorEntry tryFromDatabase:contextID:zoneID:error:]( &OBJC_CLASS___CKKSMirrorEntry,  "tryFromDatabase:contextID:zoneID:error:",  v73,  v75,  v76,  &v288));
      id v242 = v288;

      if (!v51)
      {
        id v106 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
        v107 = (void *)objc_claimAutoreleasedReturnValue([v106 zoneName]);
        id v108 = sub_1000AA6AC(@"ckksoutgoing", v107);
        v109 = (os_log_s *)objc_claimAutoreleasedReturnValue(v108);

        if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
        {
          id v110 = (void *)objc_claimAutoreleasedReturnValue([v30 item]);
          id v111 = (void *)objc_claimAutoreleasedReturnValue([v110 uuid]);
          *(_DWORD *)__int128 buf = 138412290;
          *(void *)&uint8_t buf[4] = v111;
          _os_log_impl( (void *)&_mh_execute_header,  v109,  OS_LOG_TYPE_ERROR,  "update to a record that doesn't exist? %@",  buf,  0xCu);
        }

        BOOL v112 = (void *)objc_claimAutoreleasedReturnValue([v30 item]);
        id v113 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
        id v87 = (id)objc_claimAutoreleasedReturnValue([v112 CKRecordWithZoneID:v113]);

        id v114 = (void *)objc_claimAutoreleasedReturnValue([v87 recordID]);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v255, "setObject:forKeyedSubscript:", v87, v114);

        xpc_object_t v115 = (void *)objc_claimAutoreleasedReturnValue([v87 recordID]);
        -[NSMutableSet addObject:](v247, "addObject:", v115);

        -[NSMutableSet addObject:](v246, "addObject:", v30);
        uint64_t v116 = *(void *)(a1 + 32);
        id v287 = v242;
        [v30 intransactionMoveToState:@"inflight" viewState:v116 error:&v287];
        id v4 = v287;

        if (v4)
        {
          v117 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
          v118 = (void *)objc_claimAutoreleasedReturnValue([v117 zoneName]);
          id v119 = sub_1000AA6AC(@"ckksoutgoing", v118);
          id v120 = (os_log_s *)objc_claimAutoreleasedReturnValue(v119);

          if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 138412290;
            *(void *)&uint8_t buf[4] = v4;
            _os_log_impl( (void *)&_mh_execute_header,  v120,  OS_LOG_TYPE_ERROR,  "couldn't save state for CKKSOutgoingQueueEntry: %@",  buf,  0xCu);
          }

          [*(id *)(a1 + 40) setError:v4];
        }

        goto LABEL_63;
      }

      __int128 v238 = (void *)objc_claimAutoreleasedReturnValue([v30 item]);
      id v77 = (void *)objc_claimAutoreleasedReturnValue([v238 storedCKRecord]);
      id v78 = (void *)objc_claimAutoreleasedReturnValue([v77 recordChangeTag]);
      CFTypeRef v79 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecordID item](v51, "item"));
      __int128 v80 = (void *)objc_claimAutoreleasedReturnValue([v79 storedCKRecord]);
      id v81 = (void *)objc_claimAutoreleasedReturnValue([v80 recordChangeTag]);
      unsigned __int8 v82 = [v78 isEqual:v81];

      if ((v82 & 1) != 0)
      {
        id v83 = (void *)objc_claimAutoreleasedReturnValue([v30 item]);
        id v84 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecordID item](v51, "item"));
        id v85 = (void *)objc_claimAutoreleasedReturnValue([v84 storedCKRecord]);
        id v86 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
        id v87 = (id)objc_claimAutoreleasedReturnValue([v83 updateCKRecord:v85 zoneID:v86]);

        unsigned int v88 = (void *)objc_claimAutoreleasedReturnValue([v87 recordID]);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v255, "setObject:forKeyedSubscript:", v87, v88);

        id v89 = (void *)objc_claimAutoreleasedReturnValue([v87 recordID]);
        -[NSMutableSet addObject:](v247, "addObject:", v89);

        -[NSMutableSet addObject:](v246, "addObject:", v30);
        uint64_t v90 = *(void *)(a1 + 32);
        id v285 = v242;
        [v30 intransactionMoveToState:@"inflight" viewState:v90 error:&v285];
        id v4 = v285;

        if (v4)
        {
          CFTypeRef v91 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
          __int16 v92 = (void *)objc_claimAutoreleasedReturnValue([v91 zoneName]);
          id v93 = sub_1000AA6AC(@"ckksoutgoing", v92);
          __int16 v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);

          if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 138412290;
            *(void *)&uint8_t buf[4] = v4;
            _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_ERROR,  "couldn't save state for CKKSOutgoingQueueEntry: %@",  buf,  0xCu);
          }
        }

LABEL_63:
        goto LABEL_64;
      }

      uint64_t v121 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
      id v122 = (void *)objc_claimAutoreleasedReturnValue([v121 zoneName]);
      id v123 = sub_1000AA6AC(@"ckksoutgoing", v122);
      __int128 v124 = (os_log_s *)objc_claimAutoreleasedReturnValue(v123);

      if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v124,  OS_LOG_TYPE_DEFAULT,  "Record (%@)'s change tag doesn't match ckmirror's change tag, reencrypting",  buf,  0xCu);
      }

      uint64_t v125 = *(void *)(a1 + 32);
      id v286 = v242;
      [v30 intransactionMoveToState:@"reencrypt" viewState:v125 error:&v286];
      id v87 = v286;

      if (v87)
      {
        __int128 v126 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
        __int128 v127 = (void *)objc_claimAutoreleasedReturnValue([v126 zoneName]);
        id v128 = sub_1000AA6AC(@"ckksoutgoing", v127);
        __int128 v129 = (os_log_s *)objc_claimAutoreleasedReturnValue(v128);

        if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 138412290;
          *(void *)&uint8_t buf[4] = v87;
          _os_log_impl( (void *)&_mh_execute_header,  v129,  OS_LOG_TYPE_ERROR,  "couldn't save oqe to database: %@",  buf,  0xCu);
        }

        [*(id *)(a1 + 40) setError:v87];
        id v4 = 0LL;
        char v237 = 1;
        goto LABEL_63;
      }

  __int16 v92 = objc_alloc(&OBJC_CLASS___AAFAnalyticsEventSecurity);
  id v93 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
  __int16 v94 = (void *)objc_claimAutoreleasedReturnValue([v93 activeAccount]);
  id v95 = (void *)objc_claimAutoreleasedReturnValue([v94 altDSID]);
  __int16 v96 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
  [v96 sendMetric];
  v327 = kSecurityRTCEventCategoryAccountDataAccessRecovery;
  v338 = -[AAFAnalyticsEventSecurity initWithCKKSMetrics:altDSID:eventName:testsAreEnabled:category:sendMetric:]( v92,  "initWithCKKSMetrics:altDSID:eventName:testsAreEnabled:category:sendMetric:",  &__NSDictionary0__struct,  v95,  kSecurityRTCEventNameHealBrokenRecords,  0LL);

  id v97 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contextID]);
  uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
  v398 = 0LL;
  v99 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSKey allKeysForContextID:zoneID:error:]( &OBJC_CLASS___CKKSKey,  "allKeysForContextID:zoneID:error:",  v97,  v98,  &v398));
  uint64_t v90 = v398;

  v333 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  v396 = 0u;
  v397 = 0u;
  v394 = 0u;
  v395 = 0u;
  id obja = v99;
  BOOL v100 = [obja countByEnumeratingWithState:&v394 objects:v419 count:16];
  if (!v100)
  {

LABEL_110:
    size_t v151 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    v152 = (void *)objc_claimAutoreleasedReturnValue([v151 zoneName]);
    v153 = sub_1000AA6AC(@"ckksheal", v152);
    uint64_t v154 = (os_log_s *)objc_claimAutoreleasedReturnValue(v153);

    if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v154,  OS_LOG_TYPE_ERROR,  "No possible TLK found. Waiting for creation.",  buf,  2u);
    }

    [*(id *)(a1 + 32) setViewKeyHierarchyState:@"waitfortlkcreation"];
    +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v338,  0LL,  0LL);
    uint64_t v101 = 0LL;
    goto LABEL_113;
  }

  uint64_t v101 = 0LL;
  id v102 = *(void *)v395;
  do
  {
    id v103 = 0LL;
    id v104 = v90;
    do
    {
      if (*(void *)v395 != v102) {
        objc_enumerationMutation(obja);
      }
      v105 = *(void **)(*((void *)&v394 + 1) + 8LL * (void)v103);
      v393 = v104;
      id v106 = (void *)objc_claimAutoreleasedReturnValue([v105 topKeyInAnyState:&v393]);
      uint64_t v90 = v393;

      if (v101)
      {
        v107 = (void *)objc_claimAutoreleasedReturnValue([v101 uuid]);
        id v108 = (void *)objc_claimAutoreleasedReturnValue([v106 uuid]);
        v109 = [v107 isEqualToString:v108];

        if ((v109 & 1) == 0)
        {
          uint64_t v142 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
          uint64_t v143 = (void *)objc_claimAutoreleasedReturnValue([v142 zoneName]);
          uint64_t v144 = sub_1000AA6AC(@"ckksheal", v143);
          uint64_t v145 = (os_log_s *)objc_claimAutoreleasedReturnValue(v144);

          if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v145,  OS_LOG_TYPE_ERROR,  "key hierarchy has split: there's two top keys. Currently we don't handle this situation.",  buf,  2u);
          }

          id v147 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Key hierarchy has split: %@ and %@ are roots",  v101,  v106));
          uint64_t v148 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:",  @"CKKSErrorDomain",  32LL,  v147));
          v149 = *(void **)(a1 + 40);
          v343 = (id *)(a1 + 40);
          [v149 setError:v148];

          [*v343 setNextState:@"error"];
          v150 = (void *)objc_claimAutoreleasedReturnValue([*v343 error]);
          +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v338,  0LL,  v150);

          goto LABEL_113;
        }
      }

      else
      {
        uint64_t v101 = v106;
      }

      id v103 = (char *)v103 + 1;
      id v104 = v90;
    }

    while (v100 != v103);
    BOOL v100 = [obja countByEnumeratingWithState:&v394 objects:v419 count:16];
  }

  while (v100);

  if (!v101) {
    goto LABEL_110;
  }
  v392 = v90;
  id v110 = [v101 validTLK:&v392];
  id v111 = v392;

  BOOL v112 = *(void **)(a1 + 32);
  if ((v110 & 1) == 0)
  {
    uint64_t v175 = (void *)objc_claimAutoreleasedReturnValue([v112 zoneID]);
    v176 = (void *)objc_claimAutoreleasedReturnValue([v175 zoneName]);
    id v177 = sub_1000AA6AC(@"ckkskey", v176);
    CFDataRef v178 = (os_log_s *)objc_claimAutoreleasedReturnValue(v177);

    if (os_log_type_enabled(v178, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412546;
      *(void *)&uint8_t buf[4] = v101;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v111;
      _os_log_impl( (void *)&_mh_execute_header,  v178,  OS_LOG_TYPE_ERROR,  "CKKS claims %@ is not a valid TLK: %@",  buf,  0x16u);
    }

    CFDataRef v179 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:underlying:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:underlying:",  @"CKKSErrorDomain",  34LL,  @"Invalid TLK from CloudKit (during heal)",  v111));
    [*(id *)(a1 + 40) setError:v179];

    [*(id *)(a1 + 32) setViewKeyHierarchyState:@"error"];
    id v180 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
    +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v338,  0LL,  v180);

    CFTypeRef v91 = 1LL;
    uint64_t v90 = v111;
    goto LABEL_114;
  }

  id v113 = (void *)objc_claimAutoreleasedReturnValue([v112 contextID]);
  id v114 = *(void *)(a1 + 56);
  v391 = v111;
  xpc_object_t v115 = [v101 tlkMaterialPresentOrRecoverableViaTLKShareForContextID:v113 forTrustStates:v114 error:&v391];
  uint64_t v90 = v391;

  if ((v115 & 1) == 0)
  {
    if (v90
      && (id v195 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]),
          CFDataRef v196 = (void *)objc_claimAutoreleasedReturnValue([v195 lockStateTracker]),
          char v197 = [v196 isLockedError:v90],
          v196,
          v195,
          v197))
    {
      id v198 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
      id v199 = (void *)objc_claimAutoreleasedReturnValue([v198 zoneName]);
      unsigned int v200 = sub_1000AA6AC(@"ckkskey", v199);
      v201 = (os_log_s *)objc_claimAutoreleasedReturnValue(v200);

      if (os_log_type_enabled(v201, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = v101;
        _os_log_impl( (void *)&_mh_execute_header,  v201,  OS_LOG_TYPE_DEFAULT,  "Received a TLK(%@), but keybag appears to be locked. Entering a waiting state.",  buf,  0xCu);
      }

      v417 = kSecurityRTCFieldIsLocked;
      v418 = &__kCFBooleanTrue;
      unsigned __int8 v202 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v418,  &v417,  1LL));
      -[AAFAnalyticsEventSecurity addMetrics:](v338, "addMetrics:", v202);
      v203 = off_100290DF0;
    }

    else
    {
      id v204 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
      CFTypeRef v205 = (void *)objc_claimAutoreleasedReturnValue([v204 zoneName]);
      unsigned int v206 = sub_1000AA6AC(@"ckkskey", v205);
      unsigned __int8 v202 = (os_log_s *)objc_claimAutoreleasedReturnValue(v206);

      if (os_log_type_enabled(v202, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412546;
        *(void *)&uint8_t buf[4] = v101;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v90;
        _os_log_impl( (void *)&_mh_execute_header,  v202,  OS_LOG_TYPE_DEFAULT,  "Received a TLK(%@) which we don't have in the local keychain: %@",  buf,  0x16u);
      }

      v203 = &off_100290DF8;
    }

    [*(id *)(a1 + 32) setViewKeyHierarchyState:*v203];
    +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v338,  0LL,  v90);
LABEL_113:
    CFTypeRef v91 = 1LL;
    goto LABEL_114;
  }

  uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue([v346 currentTLKPointer]);
  v117 = (void *)objc_claimAutoreleasedReturnValue([v116 currentKeyUUID]);
  v118 = (void *)objc_claimAutoreleasedReturnValue([v101 uuid]);
  v317 = [v117 isEqualToString:v118];

  if ((v317 & 1) == 0)
  {
    [v346 setTlk:v101];
    id v119 = (void *)objc_claimAutoreleasedReturnValue([v101 uuid]);
    id v120 = (void *)objc_claimAutoreleasedReturnValue([v346 currentTLKPointer]);
    [v120 setCurrentKeyUUID:v119];
  }

  v389 = 0u;
  v390 = 0u;
  v387 = 0u;
  v388 = 0u;
  v330 = obja;
  toa = (id *)[v330 countByEnumeratingWithState:&v387 objects:v416 count:16];
  if (!toa)
  {
    v323 = 0;
    from = 0;
    goto LABEL_152;
  }

  v323 = 0;
  from = 0;
  v335 = *(void *)v388;
  do
  {
    for (uint64_t i = 0LL; i != toa; uint64_t i = (id *)((char *)i + 1))
    {
      if (*(void *)v388 != v335) {
        objc_enumerationMutation(v330);
      }
      id v122 = *(void **)(*((void *)&v387 + 1) + 8LL * (void)i);
      id v123 = (void *)objc_claimAutoreleasedReturnValue([v122 parentKeyUUID]);
      __int128 v124 = (void *)objc_claimAutoreleasedReturnValue([v101 uuid]);
      uint64_t v125 = [v123 isEqualToString:v124];

      if (v125)
      {
        __int128 v126 = (void *)objc_claimAutoreleasedReturnValue([v122 keyclass]);
        __int128 v127 = (void *)objc_claimAutoreleasedReturnValue([v346 currentClassAPointer]);
        id v128 = (void *)objc_claimAutoreleasedReturnValue([v127 currentKeyUUID]);
        if (v128)
        {
          __int128 v129 = (void *)objc_claimAutoreleasedReturnValue([v346 classA]);
          __int128 v130 = (void *)objc_claimAutoreleasedReturnValue([v129 parentKeyUUID]);
          __int128 v131 = (void *)objc_claimAutoreleasedReturnValue([v101 uuid]);
          if ([v130 isEqualToString:v131])
          {
            id v132 = (void *)objc_claimAutoreleasedReturnValue([v346 classA]);
            v320 = v132 == 0LL;

            if (v320)
            {
LABEL_92:
              [v346 setClassA:v122];
              __int128 v126 = (void *)objc_claimAutoreleasedReturnValue([v122 uuid]);
              __int128 v133 = (void *)objc_claimAutoreleasedReturnValue([v346 currentClassAPointer]);
              [v133 setCurrentKeyUUID:v126];

              from = 1;
LABEL_93:
            }

            id v134 = (void *)objc_claimAutoreleasedReturnValue([v122 keyclass]);
            uint64_t v135 = (void *)objc_claimAutoreleasedReturnValue([v346 currentClassCPointer]);
            id v136 = (void *)objc_claimAutoreleasedReturnValue([v135 currentKeyUUID]);
            if (v136)
            {
              id v137 = (void *)objc_claimAutoreleasedReturnValue([v346 classC]);
              id v138 = (void *)objc_claimAutoreleasedReturnValue([v137 parentKeyUUID]);
              id v139 = (void *)objc_claimAutoreleasedReturnValue([v101 uuid]);
              if ([v138 isEqualToString:v139])
              {
                id v140 = (void *)objc_claimAutoreleasedReturnValue([v346 classC]);
                v321 = v140 == 0LL;

                if (!v321) {
                  continue;
                }
LABEL_101:
                [v346 setClassC:v122];
                id v134 = (void *)objc_claimAutoreleasedReturnValue([v122 uuid]);
                id v141 = (void *)objc_claimAutoreleasedReturnValue([v346 currentClassCPointer]);
                [v141 setCurrentKeyUUID:v134];

                v323 = 1;
LABEL_102:

                continue;
              }
            }

            goto LABEL_101;
          }
        }

        goto LABEL_92;
      }
    }

    toa = (id *)[v330 countByEnumeratingWithState:&v387 objects:v416 count:16];
  }

  while (toa);
LABEL_152:

  unsigned int v207 = (void *)objc_claimAutoreleasedReturnValue([v346 currentClassAPointer]);
  id v208 = (void *)objc_claimAutoreleasedReturnValue([v207 currentKeyUUID]);
  id v209 = v208 == 0LL;

  if (!v209)
  {
    v322 = 0LL;
    goto LABEL_154;
  }

  v386 = v90;
  v322 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSKey randomKeyWrappedByParent:keyclass:error:]( &OBJC_CLASS___CKKSKey,  "randomKeyWrappedByParent:keyclass:error:",  v101,  @"classA",  &v386));
  __int128 v238 = v386;

  v385 = v238;
  [v322 saveKeyMaterialToKeychain:&v385];
  uint64_t v90 = v385;

  if (v90)
  {
    __int128 v239 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
    id v240 = (void *)objc_claimAutoreleasedReturnValue([v239 lockStateTracker]);
    id v241 = [v240 isLockedError:v90];

    id v242 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    __int128 v243 = (void *)objc_claimAutoreleasedReturnValue([v242 zoneName]);
    __int128 v244 = sub_1000AA6AC(@"ckksheal", v243);
    __int128 v245 = (os_log_s *)objc_claimAutoreleasedReturnValue(v244);

    if (v241)
    {
      if (os_log_type_enabled(v245, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v245,  OS_LOG_TYPE_DEFAULT,  "Couldn't create a new class A key, but keybag appears to be locked. Entering waitforunlock.",  buf,  2u);
      }

      [*(id *)(a1 + 32) setViewKeyHierarchyState:@"waitforunlock"];
      v414 = kSecurityRTCFieldIsLocked;
      v415 = &__kCFBooleanTrue;
      v246 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v415,  &v414,  1LL));
      -[AAFAnalyticsEventSecurity addMetrics:](v338, "addMetrics:", v246);

      +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v338,  0LL,  v90);
    }

    else
    {
      if (os_log_type_enabled(v245, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = v90;
        _os_log_impl( (void *)&_mh_execute_header,  v245,  OS_LOG_TYPE_ERROR,  "couldn't create new classA key: %@",  buf,  0xCu);
      }

      [*(id *)(a1 + 32) setViewKeyHierarchyState:@"error"];
      +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v338,  0LL,  v90);
    }

    goto LABEL_113;
  }

  [v346 setClassA:v322];
  v312 = (void *)objc_claimAutoreleasedReturnValue([v322 uuid]);
  v313 = (void *)objc_claimAutoreleasedReturnValue([v346 currentClassAPointer]);
  [v313 setCurrentKeyUUID:v312];

  uint64_t v90 = 0LL;
  from = 1;
LABEL_154:
  uint64_t v210 = (void *)objc_claimAutoreleasedReturnValue([v346 currentClassCPointer]);
  v211 = (void *)objc_claimAutoreleasedReturnValue([v210 currentKeyUUID]);
  id v212 = v211 == 0LL;

  if (v212)
  {
    v384 = v90;
    v319 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSKey randomKeyWrappedByParent:keyclass:error:]( &OBJC_CLASS___CKKSKey,  "randomKeyWrappedByParent:keyclass:error:",  v101,  @"classC",  &v384));
    v247 = v384;

    v383 = v247;
    [v319 saveKeyMaterialToKeychain:&v383];
    uint64_t v90 = v383;

    if (v90)
    {
      uint64_t v248 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
      v249 = (void *)objc_claimAutoreleasedReturnValue([v248 lockStateTracker]);
      v250 = [v249 isLockedError:v90];

      uint64_t v251 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
      v252 = (void *)objc_claimAutoreleasedReturnValue([v251 zoneName]);
      id v253 = sub_1000AA6AC(@"ckksheal", v252);
      v254 = (os_log_s *)objc_claimAutoreleasedReturnValue(v253);

      if (v250)
      {
        if (os_log_type_enabled(v254, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v254,  OS_LOG_TYPE_DEFAULT,  "Couldn't create a new class C key, but keybag appears to be locked. Entering waitforunlock.",  buf,  2u);
        }

        v412 = kSecurityRTCFieldIsLocked;
        v413 = &__kCFBooleanTrue;
        v255 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v413,  &v412,  1LL));
        -[AAFAnalyticsEventSecurity addMetrics:](v338, "addMetrics:", v255);

        +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v338,  0LL,  v90);
        [*(id *)(a1 + 32) setViewKeyHierarchyState:@"waitforunlock"];
      }

      else
      {
        if (os_log_type_enabled(v254, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 138412290;
          *(void *)&uint8_t buf[4] = v90;
          _os_log_impl( (void *)&_mh_execute_header,  v254,  OS_LOG_TYPE_ERROR,  "couldn't create new class C key: %@",  buf,  0xCu);
        }

        [*(id *)(a1 + 32) setViewKeyHierarchyState:@"error"];
        +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v338,  0LL,  v90);
      }

      goto LABEL_113;
    }

    [v346 setClassC:v319];
    v314 = (void *)objc_claimAutoreleasedReturnValue([v319 uuid]);
    v315 = (void *)objc_claimAutoreleasedReturnValue([v346 currentClassCPointer]);
    [v315 setCurrentKeyUUID:v314];

    uint64_t v90 = 0LL;
    v323 = 1;
  }

  else
  {
    v319 = 0LL;
  }

  CFDataRef v213 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
  uint64_t v214 = (void *)objc_claimAutoreleasedReturnValue([v213 zoneName]);
  id v215 = sub_1000AA6AC(@"ckksheal", v214);
  v216 = (os_log_s *)objc_claimAutoreleasedReturnValue(v215);

  if (os_log_type_enabled(v216, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    *(void *)&uint8_t buf[4] = v346;
    _os_log_impl( (void *)&_mh_execute_header,  v216,  OS_LOG_TYPE_DEFAULT,  "Attempting to move to new key hierarchy: %@",  buf,  0xCu);
  }

  if (v322)
  {
    id v217 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    id v218 = (void *)objc_claimAutoreleasedReturnValue([v322 CKRecordWithZoneID:v217]);
    -[NSMutableArray addObject:](v333, "addObject:", v218);
  }

  uint64_t v219 = a1;
  if (v319)
  {
    id v220 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    id v221 = (void *)objc_claimAutoreleasedReturnValue([v319 CKRecordWithZoneID:v220]);
    -[NSMutableArray addObject:](v333, "addObject:", v221);

    uint64_t v219 = a1;
  }

  if ((v317 & 1) == 0)
  {
    id v222 = (void *)objc_claimAutoreleasedReturnValue([v346 currentTLKPointer]);
    __int128 v223 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    id v224 = (void *)objc_claimAutoreleasedReturnValue([v222 CKRecordWithZoneID:v223]);
    -[NSMutableArray addObject:](v333, "addObject:", v224);

    uint64_t v219 = a1;
  }

  if ((from & 1) != 0)
  {
    __int128 v225 = (void *)objc_claimAutoreleasedReturnValue([v346 currentClassAPointer]);
    __int128 v226 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    id v227 = (void *)objc_claimAutoreleasedReturnValue([v225 CKRecordWithZoneID:v226]);
    -[NSMutableArray addObject:](v333, "addObject:", v227);

    uint64_t v219 = a1;
  }

  if ((v323 & 1) != 0)
  {
    id v228 = (void *)objc_claimAutoreleasedReturnValue([v346 currentClassCPointer]);
    id v229 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    id v230 = (void *)objc_claimAutoreleasedReturnValue([v228 CKRecordWithZoneID:v229]);
    -[NSMutableArray addObject:](v333, "addObject:", v230);

    uint64_t v219 = a1;
  }

  id v231 = *(void *)(v219 + 56);
  v382 = v90;
  v316 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSHealTLKSharesOperation createMissingKeyShares:trustStates:databaseProvider:error:]( &OBJC_CLASS___CKKSHealTLKSharesOperation,  "createMissingKeyShares:trustStates:databaseProvider:error:",  v346,  v231,  0LL,  &v382));
  v318 = v382;

  v410 = kSecurityRTCFieldNewTLKShares;
  __int128 v232 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v316 count]));
  v411 = v232;
  __int128 v233 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v411,  &v410,  1LL));
  -[AAFAnalyticsEventSecurity addMetrics:](v338, "addMetrics:", v233);

  if (v318)
  {
    uint64_t v234 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    id v235 = (void *)objc_claimAutoreleasedReturnValue([v234 zoneName]);
    __int128 v236 = sub_1000AA6AC(@"ckksshare", v235);
    char v237 = (os_log_s *)objc_claimAutoreleasedReturnValue(v236);

    if (os_log_type_enabled(v237, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v318;
      _os_log_impl( (void *)&_mh_execute_header,  v237,  OS_LOG_TYPE_ERROR,  "Unable to create TLK shares for new tlk: %@",  buf,  0xCu);
    }

    +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v338,  0LL,  v318);
    CFTypeRef v91 = 0LL;
  }

  else
  {
    +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v338,  1LL,  0LL);
    v380 = 0u;
    v381 = 0u;
    v378 = 0u;
    v379 = 0u;
    v256 = v316;
    v257 = [v256 countByEnumeratingWithState:&v378 objects:v409 count:16];
    if (v257)
    {
      v258 = *(void *)v379;
      do
      {
        for (j = 0LL; j != v257; j = (char *)j + 1)
        {
          if (*(void *)v379 != v258) {
            objc_enumerationMutation(v256);
          }
          v260 = *(void **)(*((void *)&v378 + 1) + 8LL * (void)j);
          v261 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
          v262 = (void *)objc_claimAutoreleasedReturnValue([v260 CKRecordWithZoneID:v261]);

          -[NSMutableArray addObject:](v333, "addObject:", v262);
        }

        v257 = [v256 countByEnumeratingWithState:&v378 objects:v409 count:16];
      }

      while (v257);
    }

    *(void *)__int128 buf = 0LL;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x2020000000LL;
    v408 = 1;
    v263 = objc_alloc(&OBJC_CLASS___AAFAnalyticsEventSecurity);
    v405[0] = kSecurityRTCFieldTotalCKRecords;
    id v264 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  -[NSMutableArray count](v333, "count")));
    v265 = kSecurityRTCFieldIsPrioritized;
    v405[1] = kSecurityRTCFieldIsPrioritized;
    v406[0] = v264;
    v406[1] = &__kCFBooleanFalse;
    v266 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v406,  v405,  2LL));
    id v267 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
    BOOL v268 = (void *)objc_claimAutoreleasedReturnValue([v267 activeAccount]);
    v269 = (void *)objc_claimAutoreleasedReturnValue([v268 altDSID]);
    v270 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
    int v271 = [v270 sendMetric];
    v328 = -[AAFAnalyticsEventSecurity initWithCKKSMetrics:altDSID:eventName:testsAreEnabled:category:sendMetric:]( v263,  "initWithCKKSMetrics:altDSID:eventName:testsAreEnabled:category:sendMetric:",  v266,  v269,  kSecurityRTCEventNameUploadHealedTLKShares,  0LL,  v327,  v271);

    v403 = v265;
    v404 = &__kCFBooleanTrue;
    __int128 v272 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v404,  &v403,  1LL));
    -[AAFAnalyticsEventSecurity addMetrics:](v328, "addMetrics:", v272);

    __int128 v273 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    __int128 v274 = (void *)objc_claimAutoreleasedReturnValue([v273 zoneName]);
    __int128 v275 = sub_1000AA6AC(@"ckksheal", v274);
    __int128 v276 = (os_log_s *)objc_claimAutoreleasedReturnValue(v275);

    if (os_log_type_enabled(v276, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v401 = 138412290;
      v402 = v333;
      _os_log_impl((void *)&_mh_execute_header, v276, OS_LOG_TYPE_DEFAULT, "Saving new records %@", v401, 0xCu);
    }

    __int128 v277 = 0LL;
    for (k = a1; ; k = a1)
    {
      __int128 v279 = 1000LL * (void)v277;
      v331 = v277;
      id v280 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(k + 32) zoneName]);
      __int128 v281 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"heal-cloudkit-modify-operation-finished-%@",  v280));
      v371[0] = _NSConcreteStackBlock;
      v371[1] = 3221225472LL;
      v371[2] = sub_10007E8AC;
      v371[3] = &unk_100290618;
      __int128 v282 = v333;
      v372 = v282;
      v377 = v279;
      v336 = v328;
      v373 = v336;
      v375 = buf;
      __int128 v283 = *(id *)(k + 48);
      __int128 v284 = *(void *)(k + 64);
      v374 = v283;
      v376 = v284;
      id v285 = (void *)objc_claimAutoreleasedReturnValue( +[NSBlockOperation named:withBlock:]( &OBJC_CLASS___NSBlockOperation,  "named:withBlock:",  v281,  v371));

      [*(id *)(a1 + 40) dependOnBeforeGroupFinished:v285];
      id v286 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      id v287 = (char *)-[NSMutableArray count](v282, "count");
      else {
        id v288 = (uint64_t)&v287[-v279];
      }
      id v289 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray subarrayWithRange:](v282, "subarrayWithRange:", v279, v288));
      v369 = 0u;
      v370 = 0u;
      v367 = 0u;
      v368 = 0u;
      id v290 = v289;
      id v291 = [v290 countByEnumeratingWithState:&v367 objects:v400 count:16];
      if (v291)
      {
        id v292 = *(void *)v368;
        do
        {
          for (m = 0LL; m != v291; m = (char *)m + 1)
          {
            if (*(void *)v368 != v292) {
              objc_enumerationMutation(v290);
            }
            __int128 v294 = *(void **)(*((void *)&v367 + 1) + 8LL * (void)m);
            __int128 v295 = (void *)objc_claimAutoreleasedReturnValue([v294 recordID]);
            -[NSMutableDictionary setObject:forKeyedSubscript:](v286, "setObject:forKeyedSubscript:", v294, v295);
          }

          id v291 = [v290 countByEnumeratingWithState:&v367 objects:v400 count:16];
        }

        while (v291);
      }

      __int128 v296 = -[CKModifyRecordsOperation initWithRecordsToSave:recordIDsToDelete:]( objc_alloc(&OBJC_CLASS___CKModifyRecordsOperation),  "initWithRecordsToSave:recordIDsToDelete:",  v290,  0LL);
      -[CKModifyRecordsOperation setAtomic:](v296, "setAtomic:", 1LL);
      -[CKModifyRecordsOperation setLongLived:](v296, "setLongLived:", 0LL);
      id v297 = (void *)objc_claimAutoreleasedReturnValue(-[CKModifyRecordsOperation configuration](v296, "configuration"));
      [v297 setIsCloudKitSupportOperation:1];

      -[CKModifyRecordsOperation setQualityOfService:](v296, "setQualityOfService:", 25LL);
      id v298 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
      id v299 = (void *)objc_claimAutoreleasedReturnValue([v298 ckoperationGroup]);
      -[CKModifyRecordsOperation setGroup:](v296, "setGroup:", v299);

      v300 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
      v301 = (void *)objc_claimAutoreleasedReturnValue([v300 zoneName]);
      v302 = sub_1000AA6AC(@"ckksheal", v301);
      v303 = (os_log_s *)objc_claimAutoreleasedReturnValue(v302);

      if (os_log_type_enabled(v303, OS_LOG_TYPE_DEFAULT))
      {
        v304 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
        v305 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v304 ckoperationGroup]);
        *(_DWORD *)v401 = 138412290;
        v402 = v305;
        _os_log_impl((void *)&_mh_execute_header, v303, OS_LOG_TYPE_DEFAULT, "Operation group is %@", v401, 0xCu);
      }

      v363[0] = _NSConcreteStackBlock;
      v363[1] = 3221225472LL;
      v363[2] = sub_10007E924;
      v363[3] = &unk_100284600;
      v364 = *(id *)(a1 + 32);
      v365 = buf;
      v366 = *(void *)(a1 + 64);
      -[CKModifyRecordsOperation setPerRecordSaveBlock:](v296, "setPerRecordSaveBlock:", v363);
      v349[0] = _NSConcreteStackBlock;
      v349[1] = 3221225472LL;
      v349[2] = sub_10007EAE4;
      v349[3] = &unk_100284650;
      objc_copyWeak(&v362, (id *)(a1 + 80));
      v350 = *(id *)(a1 + 32);
      v351 = v101;
      v352 = v322;
      v353 = v319;
      v354 = v346;
      v355 = v256;
      v306 = v338;
      v307 = *(void *)(a1 + 64);
      v356 = v306;
      v360 = v307;
      v361 = buf;
      v357 = v336;
      v308 = v286;
      v358 = v308;
      __int16 v309 = v285;
      v359 = v309;
      -[CKModifyRecordsOperation setModifyRecordsCompletionBlock:](v296, "setModifyRecordsCompletionBlock:", v349);
      v310 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) setResultStateOperation]);
      [v310 addDependency:v309];

      v311 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) ckOperations]);
      -[CKModifyRecordsOperation linearDependencies:](v296, "linearDependencies:", v311);

      [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) addObject:v296];
      objc_destroyWeak(&v362);

      __int128 v277 = v331 + 1;
    }

    _Block_object_dispose(buf, 8);
    CFTypeRef v91 = 1LL;
  }

  uint64_t v90 = v318;
LABEL_114:

LABEL_115:
  return v91;
}

    if (!v4) {
      return;
    }
    uint64_t v8 = (CFTypeRef)v4;
    goto LABEL_65;
  }

  id v29 = 0LL;
  id v21 = sub_1000EC42C( a2,  a2,  *(void *)(a1 + 64),  0LL,  *(unsigned __int8 *)(*(void *)(a1 + 72) + 154LL),  (__CFString **)&v29);
  id v22 = v29;
  id v23 = (os_log_s *)sub_10001267C("upgr-phase3");
  uint64_t v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
  if (v21 && !v22)
  {
    if (v24)
    {
      *(_DWORD *)__int128 buf = 138478083;
      int v33 = (uint64_t)a2;
      id v34 = 1024;
      *(_DWORD *)__int128 v35 = 1;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "updated item %{private}@: %d", buf, 0x12u);
    }

    goto LABEL_61;
  }

  if (v24)
  {
    *(_DWORD *)__int128 buf = 138478339;
    int v33 = (uint64_t)a2;
    id v34 = 1024;
    *(_DWORD *)__int128 v35 = v21;
    *(_WORD *)&v35[4] = 2112;
    *(void *)&v35[6] = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "phase3: failed to update item %{private}@: %d, error: %@",  buf,  0x1Cu);
  }

  if (!v29) {
    goto LABEL_61;
  }
  if (!sub_10010D940((__CFError *)v29, *(__CFError ***)(a1 + 48)))
  {
    uint64_t v26 = v29;
    if (!v29) {
      goto LABEL_61;
    }
    id v29 = 0LL;
LABEL_60:
    CFRelease(v26);
LABEL_61:
    uint64_t v28 = cf;
    if (cf)
    {
      CFTypeRef cf = 0LL;
      CFRelease(v28);
    }

    goto LABEL_63;
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  **(_BYTE **)(a1 + 56) = 1;
  if (qword_1002DEBA0) {
    CFRelease((CFTypeRef)qword_1002DEBA0);
  }
  qword_1002DEBA0 = v4;
  uint64_t v8 = v29;
  if (v29)
  {
    id v29 = 0LL;
    goto LABEL_65;
  }

  *((_BYTE *)v6 + 274) = self->_optionsAllowPowerNapScheduling;
  *((_DWORD *)v6 + 70) |= 0x2000000u;
  uint64_t v28 = self->_has;
  if ((*(_DWORD *)&v28 & 0x200000) == 0)
  {
LABEL_33:
    if ((*(_DWORD *)&v28 & 0x400000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }

void sub_10006A664( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

void sub_10006A6B0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 zoneID]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneName]);
    id v12 = sub_1000AA6AC(@"ckksoutgoing", v11);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);

    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v19 = 138412546;
      id v20 = v9;
      __int16 v21 = 2112;
      id v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "error on row: %@ %@", (uint8_t *)&v19, 0x16u);
    }
  }

  else
  {
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v7 zoneID]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 zoneName]);
    id v16 = sub_1000AA6AC(@"ckksoutgoing", v15);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);

    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v7 recordName]);
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v8 recordChangeTag]);
      int v19 = 138412546;
      id v20 = v17;
      __int16 v21 = 2112;
      id v22 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Record upload successful for %@ (%@)",  (uint8_t *)&v19,  0x16u);
    }
  }
}

void sub_10006A8B0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = (id *)(a1 + 104);
  id v25 = a4;
  id v8 = a3;
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v7);
  [WeakRetained modifyRecordsCompleted:*(void *)(a1 + 32) fullUpload:*(unsigned __int8 *)(a1 + 112) recordsToSave:*(void *)(a1 + 40) recordIDsToDelete:*(void *)(a1 + 48) recordIDsModified:*(void *)(a1 + 56) modifyComplete:*(void *)(a1 + 64) savedRecords:v9 dele tedRecordIDs:v8 ckerror:v25];

  uint64_t v10 = *(void **)(a1 + 72);
  uint64_t v11 = kSecurityRTCFieldItemsToAdd;
  v29[0] = kSecurityRTCFieldItemsToAdd;
  id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 40) count]));
  v30[0] = v12;
  uint64_t v13 = kSecurityRTCFieldItemsToDelete;
  v29[1] = kSecurityRTCFieldItemsToDelete;
  id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 48) count]));
  v30[1] = v14;
  uint64_t v15 = kSecurityRTCFieldItemsToModify;
  v29[2] = kSecurityRTCFieldItemsToModify;
  id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 56) count]));
  v30[2] = v16;
  id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v30,  v29,  3LL));
  [v10 addMetrics:v17];

  +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  *(void *)(a1 + 72),  v25 == 0LL,  v25);
  uint64_t v24 = *(void **)(a1 + 80);
  v27[0] = v11;
  id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 40) count]));
  v28[0] = v18;
  v27[1] = v13;
  int v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 48) count]));
  v28[1] = v19;
  v27[2] = v15;
  id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 56) count]));
  v28[2] = v20;
  v27[3] = kSecurityRTCFieldErrorItemsProcessed;
  __int16 v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL)));
  v28[3] = v21;
  v27[4] = kSecurityRTCFieldSuccessfulItemsProcessed;
  id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 24LL)));
  v28[4] = v22;
  id v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v28,  v27,  5LL));
  [v24 addMetrics:v23];

  +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  *(void *)(a1 + 80),  v25 == 0LL,  v25);
}

void sub_10006B58C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10006B6B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10006B848( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_10006BA64(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v17 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v17 logResultForEvent:@"OctagonEventVoucherWithBottle" hardFailure:1 result:v15];

  if (v15)
  {
    id v18 = sub_10001267C("SecError");
    int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v38 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "octagon: Error preparing voucher using bottle: %@",  buf,  0xCu);
    }

    [WeakRetained setError:v15];
LABEL_16:
    id v25 = (id)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
    [WeakRetained runBeforeGroupFinished:v25];
    goto LABEL_17;
  }

  id v20 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v20 recordRecoveredTLKMetrics:*(void *)(a1 + 32) tlkRecoveryResults:v14 uniqueTLKsRecoveredEvent:@"OABottledUniqueTLKsRecoveredCount" totalSharesRecoveredEvent:@"OABottledTotalTLKSharesRecoveredCount" totalRecoverableTLKS haresEvent:@"OABottledTotalTLKSharesCount" totalRecoverableTLKsEvent:@"OABottledUniqueTLKsWithSharesCount" totalViewsWithSharesEvent:@"OABottledTLKUniqueViewCount"];

  [WeakRetained setVoucher:v11];
  [WeakRetained setVoucherSig:v12];
  if (![WeakRetained saveVoucher])
  {
LABEL_13:
    id v29 = sub_10001267C("octagon");
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412546;
      id v38 = v11;
      __int16 v39 = 2112;
      id v40 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Successfully vouched with a bottle: %@, %@",  buf,  0x16u);
    }

    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
    [WeakRetained setNextState:v31];

    goto LABEL_16;
  }

  __int16 v21 = sub_10001267C("octagon");
  id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Saving voucher for later use...", buf, 2u);
  }

  id v23 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 stateHolder]);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472LL;
  v33[2] = sub_10006BE60;
  v33[3] = &unk_1002855F0;
  id v34 = v11;
  id v35 = v12;
  id v36 = v13;
  id v32 = 0LL;
  [v24 persistAccountChanges:v33 error:&v32];
  id v25 = v32;

  if (!v25)
  {

    goto LABEL_13;
  }

  uint64_t v26 = sub_10001267C("octagon");
  id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v38 = v25;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "unable to save voucher: %@", buf, 0xCu);
  }

  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
  [WeakRetained runBeforeGroupFinished:v28];

LABEL_17:
}

id sub_10006BE60(void *a1, void *a2)
{
  id v3 = a2;
  [v3 setVoucher:a1[4]];
  [v3 setVoucherSignature:a1[5]];
  [v3 setTLKSharesPairedWithVoucher:a1[6]];
  return v3;
}

void sub_10006BEA8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = WeakRetained;
  if (v6)
  {
    id v9 = sub_10001267C("SecError");
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v33 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "octagon: Error fetching TLKShares to recover: %@",  buf,  0xCu);
    }

    [v8 setError:v6];
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 finishedOp]);
    [v8 runBeforeGroupFinished:v11];
  }

  else
  {
    uint64_t v26 = WeakRetained;
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    id v25 = v5;
    id v12 = v5;
    id v13 = [v12 countByEnumeratingWithState:&v27 objects:v31 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v28;
      do
      {
        for (uint64_t i = 0LL; i != v14; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v28 != v15) {
            objc_enumerationMutation(v12);
          }
          id v17 = *(void **)(*((void *)&v27 + 1) + 8LL * (void)i);
          id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 recordType]);
          unsigned int v19 = [v18 isEqual:@"tlkshare"];

          if (v19)
          {
            id v20 = objc_alloc(&OBJC_CLASS___CKKSTLKShareRecord);
            __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v26 deps]);
            id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 contextID]);
            id v23 = -[CKKSCKRecordHolder initWithCKRecord:contextID:](v20, "initWithCKRecord:contextID:", v17, v22);

            uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSTLKShareRecord share](v23, "share"));
            [v11 addObject:v24];
          }
        }

        id v14 = [v12 countByEnumeratingWithState:&v27 objects:v31 count:16];
      }

      while (v14);
    }

    id v8 = v26;
    [v26 proceedWithFilteredTLKShares:v11];
    id v6 = 0LL;
    id v5 = v25;
  }
}

void sub_10006C120(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v13 logResultForEvent:@"OctagonEventPreflightVouchWithBottle" hardFailure:1 result:v11];

  if (!v9 || v11)
  {
    unsigned int v19 = sub_10001267C("SecError");
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      int v22 = 138412290;
      id v23 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "octagon: Error preflighting voucher using bottle: %@",  (uint8_t *)&v22,  0xCu);
    }

    [WeakRetained setError:v11];
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
    [WeakRetained runBeforeGroupFinished:v21];
  }

  else
  {
    id v14 = sub_10001267C("octagon");
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained bottleID]);
      int v22 = 138412546;
      id v23 = v16;
      __int16 v24 = 2112;
      id v25 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Bottle %@ is for peerID %@",  (uint8_t *)&v22,  0x16u);
    }

    id v17 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 ckks]);
    [v18 setCurrentSyncingPolicy:v10];

    [WeakRetained proceedWithPeerID:v9 refetchWasNeeded:a4];
  }
}

void sub_10006C63C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10006CA7C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained proceedAfterFetch];
}

LABEL_29:
      goto LABEL_30;
    }

  return v53;
}
}

      ++v11;
    }

    while (v10 != v11);
  }

  return 1;
}

      if (sub_1000D1950((uint64_t)v39, 1, v22))
      {
        id v20 = 1;
      }

      else
      {
        uint64_t v26 = CFGetTypeID(v22);
        if (v26 != CFDataGetTypeID() && sub_1000E9A9C((void **)v22))
        {
          __int128 v27 = (CFBooleanRef)sub_1000E705C(v22, (uint64_t)&off_1002875E0, 0LL);
          if (v27 && kCFBooleanTrue)
          {
            if (!CFEqual(v27, kCFBooleanTrue)) {
              goto LABEL_41;
            }
          }

          else if (v27 != kCFBooleanTrue)
          {
LABEL_41:
            CFTypeRef cf = 0LL;
            if (!sub_1000EC0F4((CFStringRef **)v22, a2, &cf, (uint64_t)&stru_100285FF0))
            {
              __int128 v28 = sub_10001267C("SecError");
              __int128 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
              if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 138478083;
                *(void *)&uint8_t buf[4] = v22;
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = cf;
                _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "failed to delete tombstone %{private}@ that no one cares about: %@",  buf,  0x16u);
              }

              __int128 v30 = cf;
              if (cf)
              {
                CFTypeRef cf = 0LL;
                CFRelease(v30);
              }
            }
          }
        }
      }

    if (v67)
    {
      id v17 = v17;
      __int128 v29 = 0;
      void *v67 = v17;
    }

    else
    {
      __int128 v29 = 0;
    }

    goto LABEL_38;
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKey recordID](v10, "recordID"));
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 recordName]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKey recordID](v10, "recordID"));
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 zoneID]);
  id v72 = 0LL;
  id v16 = (CKKSKey *)objc_claimAutoreleasedReturnValue( +[CKKSKey tryFromDatabaseAnyState:contextID:zoneID:error:]( &OBJC_CLASS___CKKSKey,  "tryFromDatabaseAnyState:contextID:zoneID:error:",  v13,  v11,  v15,  &v72));
  id v17 = (CKKSKey *)v72;

  if (v17)
  {
    id v18 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKey recordID](v10, "recordID"));
    unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue([v18 zoneID]);
    id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 zoneName]);
    __int16 v21 = sub_1000AA6AC(@"ckksresync", v20);
    int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);

    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      __int128 v74 = v17;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "error loading key: %@", buf, 0xCu);
    }
  }

  if (!v16)
  {
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKey recordID](v10, "recordID"));
    id v32 = (void *)objc_claimAutoreleasedReturnValue([v31 zoneID]);
    id v33 = (void *)objc_claimAutoreleasedReturnValue([v32 zoneName]);
    id v34 = sub_1000AA6AC(@"ckksresync", v33);
    __int128 v28 = (CKKSKey *)objc_claimAutoreleasedReturnValue(v34);

    if (os_log_type_enabled((os_log_t)v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      __int128 v74 = v10;
      id v35 = "BUG: No sync key matching resynced CloudKit record: %@";
      id v36 = (os_log_s *)v28;
      unsigned int v37 = 12;
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, v35, buf, v37);
    }

    int v22 = *(const void **)&v51[24];
    if (*(void *)&v51[24])
    {
      *(void *)&v51[24] = 0LL;
      CFRelease(v22);
    }

    if (++v10 == 4)
    {
      id v23 = v32;
      goto LABEL_52;
    }
  }

  if (CFErrorGetCode(err) == -25300)
  {
    id v20 = (os_log_s *)sub_10001267C("item");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v21 = **(void **)&v36[0];
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "exporting class '%@' complete (no items)",  buf,  0xCu);
    }

    CFRelease(err);
    goto LABEL_29;
  }

  __int128 v27 = (os_log_s *)sub_10001267C("SecError");
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v28 = **(void **)&v36[0];
    *(_DWORD *)__int128 buf = 138412546;
    *(void *)&uint8_t buf[4] = v28;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = err;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "exporting class '%@' failed: %@", buf, 0x16u);
  }

  if (a4)
  {
    if (*a4) {
      CFRelease(*a4);
    }
    *a4 = (__CFString *)err;
  }

  else
  {
    CFRelease(err);
  }

  CFRelease(theDict);
  __int128 v29 = *(const void **)&v51[24];
  id v23 = v32;
  if (*(void *)&v51[24])
  {
    *(void *)&v51[24] = 0LL;
    CFRelease(v29);
  }

  unsigned int v60 = 0u;
  id v61 = 0u;
  uint64_t v58 = 0u;
  uint64_t v59 = 0u;
  __int128 v30 = *(id *)(a1 + 56);
  uint64_t v31 = [v30 countByEnumeratingWithState:&v58 objects:v66 count:16];
  if (v31)
  {
    id v32 = v31;
    id v33 = *(void *)v59;
    do
    {
      for (j = 0LL; j != v32; j = (char *)j + 1)
      {
        if (*(void *)v59 != v33) {
          objc_enumerationMutation(v30);
        }
        id v35 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 56) objectForKeyedSubscript:*(void *)(*((void *)&v58 + 1) + 8 * (void)j)]);
        id v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
        unsigned int v37 = (void *)objc_claimAutoreleasedReturnValue([v36 zoneName]);
        id v38 = sub_1000AA6AC(@"ckksfixup", v37);
        __int16 v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);

        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v68 = v35;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Recieved record %@", buf, 0xCu);
        }

        id v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) deps]);
        [v40 intransactionCKRecordChanged:v35 resync:1];
      }

      id v32 = [v30 countByEnumeratingWithState:&v58 objects:v66 count:16];
    }

    while (v32);
  }

  __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) error]);
  if (!v41)
  {
    unsigned int v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) deps]);
    uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v42 contextID]);
    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v44 zoneName]);
    id v57 = 0LL;
    unsigned int v46 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSZoneStateEntry fromDatabase:zoneName:error:]( &OBJC_CLASS___CKKSZoneStateEntry,  "fromDatabase:zoneName:error:",  v43,  v45,  &v57));
    id v47 = v57;

    [v46 setLastFixup:1];
    uint64_t v56 = v47;
    [v46 saveToDatabase:&v56];
    unsigned int v48 = v56;

    uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
    uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v49 zoneName]);
    unsigned int v51 = sub_1000AA6AC(@"ckksfixup", v50);
    uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);

    if (v48)
    {
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412546;
        id v68 = v46;
        uint64_t v69 = 2112;
        uint64_t v70 = v48;
        _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_ERROR,  "Couldn't save CKKSZoneStateEntry(%@): %@",  buf,  0x16u);
      }
    }

    else
    {
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Updated zone fixup state to CKKSFixupRefetchCurrentItemPointers",  buf,  2u);
      }

      uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) intendedState]);
      [*(id *)(a1 + 48) setNextState:v52];
    }
  }

  [*(id *)(a1 + 48) runBeforeGroupFinished:*(void *)(a1 + 64)];
  return 1LL;
}

  return v14;
}

BOOL sub_10006F3CC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0LL;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0LL;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0LL;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 101)
      {
        uint64_t String = PBReaderReadString(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(String);
        id v14 = *(SECC2MPGenericEventMetricValue **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x4F0], 8) = v13;
LABEL_23:

        goto LABEL_25;
      }

      if ((PBReaderSkipValueWithTag(a2) & 1) == 0) {
        return 0LL;
      }
LABEL_25:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }

    id v14 = objc_alloc_init(&OBJC_CLASS___SECC2MPGenericEventMetricValue);
    objc_storeStrong((id *)(a1 + 16), v14);
    v16[0] = 0xAAAAAAAAAAAAAAAALL;
    v16[1] = 0xAAAAAAAAAAAAAAAALL;
    if (!PBReaderPlaceMark(a2, v16) || (sub_100072AD4((uint64_t)v14, a2) & 1) == 0)
    {

      return 0LL;
    }

    PBReaderRecallMark(a2, v16);
    goto LABEL_23;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100070D70(id a1)
{
  uint64_t v1 = objc_autoreleasePoolPush();
  uint64_t v2 = objc_opt_new(&OBJC_CLASS___EscrowRequestXPCServer);
  id v3 = (void *)qword_1002DE8D0;
  qword_1002DE8D0 = (uint64_t)v2;

  char v4 = -[NSXPCListener initWithMachServiceName:]( objc_alloc(&OBJC_CLASS___NSXPCListener),  "initWithMachServiceName:",  @"com.apple.security.escrow-update");
  unsigned int v5 = (void *)qword_1002DE8D8;
  qword_1002DE8D8 = (uint64_t)v4;

  [(id)qword_1002DE8D8 setDelegate:qword_1002DE8D0];
  [(id)qword_1002DE8D8 resume];
  objc_autoreleasePoolPop(v1);
}

void sub_100071404( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, id a26)
{
}

void sub_10007172C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id *location)
{
}

void sub_1000718A0(uint64_t a1, int a2, void *a3)
{
  unsigned int v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if ([WeakRetained logForUpgrade])
  {
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
    [v7 logResultForEvent:@"OctagonEventUpgradeSetAllowList" hardFailure:1 result:v5];
  }

  char v8 = sub_10001267C("octagon-authkit");
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v10)
    {
      int v16 = 138412290;
      id v17 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Unable to save machineID allow-list: %@",  (uint8_t *)&v16,  0xCu);
    }

    [WeakRetained setError:v5];
  }

  else
  {
    if (v10)
    {
      id v11 = @"no";
      uint64_t v12 = *(void *)(a1 + 32);
      if (a2) {
        id v11 = @"some";
      }
      int v16 = 138412546;
      id v17 = v11;
      __int16 v18 = 2112;
      uint64_t v19 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Successfully saved machineID allow-list (%@ change), version = %@",  (uint8_t *)&v16,  0x16u);
    }

    if (a2) {
      uint64_t v13 = objc_claimAutoreleasedReturnValue([WeakRetained stateIfListUpdates]);
    }
    else {
      uint64_t v13 = objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
    }
    id v14 = (void *)v13;
    [WeakRetained setNextState:v13];
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
  [WeakRetained runBeforeGroupFinished:v15];
}

void sub_100071A74(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);

  if (v3)
  {
    char v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained retryFlag]);

    if (!v4)
    {
      uint64_t v19 = sub_10001267C("SecError");
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v25) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "octagon-authkit: Received an error updating the trusted device list operation, but no retry flag present.",  (uint8_t *)&v25,  2u);
      }

      uint64_t v21 = *(void *)(a1 + 32);
      uint64_t v15 = (OctagonPendingFlag *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
      +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v21,  0LL,  v15);
      goto LABEL_19;
    }

    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 lockStateTracker]);
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
    unsigned int v8 = [v6 isLockedError:v7];

    id v9 = sub_10001267C("octagon-authkit");
    BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      if (v11)
      {
        uint64_t v12 = (OctagonPendingFlag *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
        int v25 = 138412290;
        uint64_t v26 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Setting the allowed device list failed due to lock state: %@",  (uint8_t *)&v25,  0xCu);
      }

      [WeakRetained setNextState:@"WaitForUnlock"];
      uint64_t v13 = objc_alloc(&OBJC_CLASS___OctagonPendingFlag);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained retryFlag]);
      uint64_t v15 = -[OctagonPendingFlag initWithFlag:conditions:](v13, "initWithFlag:conditions:", v14, 1LL);

      if (!v15) {
        goto LABEL_18;
      }
      int v16 = sub_10001267C("octagon-authkit");
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        int v25 = 138412290;
        uint64_t v26 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Machine ID list error is not fatal: requesting retry: %@",  (uint8_t *)&v25,  0xCu);
      }

      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      __int16 v18 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s flagHandler](v10, "flagHandler"));
      [v18 handlePendingFlag:v15];
    }

    else
    {
      if (v11)
      {
        uint64_t v22 = (OctagonPendingFlag *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
        int v25 = 138412290;
        uint64_t v26 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Error is currently unknown, will not retry: %@",  (uint8_t *)&v25,  0xCu);
      }

      uint64_t v15 = 0LL;
    }

LABEL_18:
    uint64_t v23 = *(void *)(a1 + 32);
    __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
    +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v23,  0LL,  v24);

LABEL_19:
    goto LABEL_20;
  }

  +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  *(void *)(a1 + 32),  1LL,  0LL);
LABEL_20:
}

void sub_100071DC0( uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  id v17 = a2;
  id v53 = a3;
  id v18 = a4;
  id v19 = a5;
  id v20 = a6;
  id v21 = a7;
  id v22 = a8;
  id v23 = a9;
  id v24 = a10;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v26 = WeakRetained;
  if (v24)
  {
    id v50 = v21;
    id v51 = v23;
    id v49 = v22;
    id v27 = v17;
    __int128 v28 = sub_10001267C("SecError");
    __int128 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v56 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "octagon-authkit: Unable to fetch machine ID list: %@",  buf,  0xCu);
    }

    id v30 = v20;
    id v31 = v19;
    id v32 = v18;

    if ([v26 logForUpgrade])
    {
      id v33 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
      [v33 logRecoverableError:v24 forEvent:@"OctagonEventUpgradeFetchDeviceIDs" withAttributes:0];
    }

    [v26 setError:v24];
    id v34 = (void *)objc_claimAutoreleasedReturnValue([v26 deps]);
    id v35 = (void *)objc_claimAutoreleasedReturnValue([v34 cuttlefishXPCWrapper]);
    id v36 = (void *)objc_claimAutoreleasedReturnValue([v26 deps]);
    unsigned int v37 = (void *)objc_claimAutoreleasedReturnValue([v36 activeAccount]);
    v54[0] = _NSConcreteStackBlock;
    v54[1] = 3221225472LL;
    v54[2] = sub_10007216C;
    v54[3] = &unk_100284FC8;
    v54[4] = v26;
    [v35 markTrustedDeviceListFetchFailed:v37 reply:v54];

    id v18 = v32;
    id v19 = v31;
    id v17 = v27;
    id v20 = v30;
    id v22 = v49;
    id v21 = v50;
    id v23 = v51;
    id v38 = v53;
  }

  else if (v17)
  {
    if ([WeakRetained logForUpgrade])
    {
      id v52 = v23;
      id v39 = v20;
      id v40 = v17;
      id v41 = v19;
      id v42 = v18;
      uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
      [v43 logSuccessForEventNamed:@"OctagonEventUpgradeFetchDeviceIDs"];

      id v18 = v42;
      id v19 = v41;
      id v17 = v40;
      id v20 = v39;
      id v23 = v52;
    }

    LOBYTE(v4_Block_object_dispose(&STACK[0x4F0], 8) = *(_BYTE *)(a1 + 40);
    id v38 = v53;
    [v26 afterAuthKitFetch:v17 userInitiatedRemovals:v53 evictedRemovals:v18 unknownReasonRemovals:v19 trustedDeviceHash:v21 deletedDeviceHash:v22  trustedDevicesUpdateTimestamp:v23 accountIsDemo:v48 version:v20];
  }

  else
  {
    uint64_t v44 = sub_10001267C("SecError");
    uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "octagon-authkit: empty machine id list",  buf,  2u);
    }

    if ([v26 logForUpgrade])
    {
      unsigned int v46 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
      [v46 logRecoverableError:0 forEvent:@"OctagonEventUpgradeFetchDeviceIDs" withAttributes:0];
    }

    [v26 setError:0];
    id v47 = (void *)objc_claimAutoreleasedReturnValue([v26 finishedOp]);
    [v26 runBeforeGroupFinished:v47];

    id v38 = v53;
  }
}

void sub_10007216C(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = sub_10001267C("octagon-authkit");
  unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      int v9 = 138412290;
      id v10 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Unable to mark machineID list as out of date: %@",  (uint8_t *)&v9,  0xCu);
    }

    [*(id *)(a1 + 32) setError:v3];
  }

  else
  {
    if (v6)
    {
      LOWORD(v9) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Successfully marked machineID list as out of date",  (uint8_t *)&v9,  2u);
    }
  }

  unint64_t v7 = *(void **)(a1 + 32);
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 finishedOp]);
  [v7 runBeforeGroupFinished:v8];
}

uint64_t sub_100072AD4(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0LL;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v13 = v6 >> 3;
    if ((int)(v6 >> 3) > 102)
    {
      if ((_DWORD)v13 == 103)
      {
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0LL;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (1)
        {
          uint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v24 = v23 + 1;
          if (v23 == -1 || v24 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v25 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0) {
            goto LABEL_39;
          }
          v20 += 7;
          BOOL v10 = v21++ >= 9;
          if (v10)
          {
            uint64_t v22 = 0LL;
            goto LABEL_41;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_39:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v22 = 0LL;
        }
LABEL_41:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x4F0], 8) = v22;
      }

      else
      {
        if ((_DWORD)v13 != 201)
        {
LABEL_36:
          uint64_t result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result) {
            return result;
          }
          continue;
        }

        int v16 = objc_alloc_init(&OBJC_CLASS___SECC2MPError);
        objc_storeStrong((id *)(a1 + 24), v16);
        v27[0] = 0xAAAAAAAAAAAAAAAALL;
        v27[1] = 0xAAAAAAAAAAAAAAAALL;
        if (!PBReaderPlaceMark(a2, v27) || (sub_10011ECE0((uint64_t)v16, a2) & 1) == 0)
        {

          return 0LL;
        }

        PBReaderRecallMark(a2, v27);
      }
    }

    else if ((_DWORD)v13 == 101)
    {
      uint64_t String = PBReaderReadString(a2);
      uint64_t v18 = objc_claimAutoreleasedReturnValue(String);
      id v19 = *(void **)(a1 + 32);
      *(void *)(a1 + 32) = v18;
    }

    else
    {
      if ((_DWORD)v13 != 102) {
        goto LABEL_36;
      }
      *(_BYTE *)(a1 + 40) |= 2u;
      unint64_t v14 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v14 <= 0xFFFFFFFFFFFFFFF7LL && v14 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
      {
        uint64_t v15 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 8;
      }

      else
      {
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        uint64_t v15 = 0LL;
      }

      *(void *)(a1 + 16) = v15;
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL sub_100074EC0(uint64_t a1)
{
  return v2 > (double)*(int *)(a1 + 40);
}

void sub_100074EF4(id a1)
{
  dispatch_source_t v1 = sub_10001A100("ratelimiterdisabledlogevent", 60LL);
  double v2 = (void *)qword_1002DE8E8;
  qword_1002DE8E8 = (uint64_t)v1;

  id v3 = (dispatch_object_s *)qword_1002DE8E8;
  context = dispatch_get_context((dispatch_object_t)qword_1002DE8E8);
  context[2] = _Block_copy(&stru_100284478);
  dispatch_activate(v3);
}

void sub_100074F50(id a1)
{
  id v1 = sub_1000AA6AC(@"ratelimit", 0LL);
  double v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Rate limiting disabled, returning automatic all-clear",  v3,  2u);
  }
}

void sub_1000756F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id location, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
}

uint64_t sub_100075924(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_100075934(uint64_t a1)
{
}

void sub_10007593C(uint64_t a1)
{
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  double v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 views]);

  id obj = v3;
  id v27 = [v3 countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (v27)
  {
    uint64_t v26 = *(void *)v30;
    do
    {
      char v4 = 0LL;
      do
      {
        if (*(void *)v30 != v26) {
          objc_enumerationMutation(obj);
        }
        unsigned int v5 = *(void **)(*((void *)&v29 + 1) + 8LL * (void)v4);
        unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 contextID]);
        unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
        char v9 = (void *)objc_claimAutoreleasedReturnValue([v8 zoneName]);
        BOOL v10 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSZoneStateEntry contextID:zoneName:]( &OBJC_CLASS___CKKSZoneStateEntry,  "contextID:zoneName:",  v7,  v9));

        if ([v10 ckzonecreated] && objc_msgSend(v10, "ckzonesubscribed"))
        {
          int v11 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 zoneName]);
          id v13 = sub_1000AA6AC(@"ckkskey", v12);
          unint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);

          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "Zone is already created and subscribed",  buf,  2u);
          }

          [v5 setViewKeyHierarchyState:@"initialized"];
        }

        else
        {
          uint64_t v15 = objc_alloc(&OBJC_CLASS___CKRecordZone);
          int v16 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
          id v17 = -[CKRecordZone initWithZoneID:](v15, "initWithZoneID:", v16);

          [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v17];
          uint64_t v18 = objc_alloc(&OBJC_CLASS___CKRecordZoneSubscription);
          id v19 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecordZone zoneID](v17, "zoneID"));
          char v20 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecordZone zoneID](v17, "zoneID"));
          unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue([v20 zoneName]);
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([@"zone:" stringByAppendingString:v21]);
          uint64_t v23 = -[CKRecordZoneSubscription initWithZoneID:subscriptionID:]( v18,  "initWithZoneID:subscriptionID:",  v19,  v22);

          [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObject:v23];
          [v5 setViewKeyHierarchyState:@"initializing"];
          unint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v5 launch]);
          [v24 addEvent:@"zone-create"];
        }

        char v4 = (char *)v4 + 1;
      }

      while (v27 != v4);
      id v27 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
    }

    while (v27);
  }
}

void sub_100075C84(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (v9)
  {
    id v11 = sub_1000AA6AC(@"ckkszonemodifier", 0LL);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v42 = v9;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Zone modification failed: %@", buf, 0xCu);
    }

    id v13 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    [v13 inspectErrorForRetryAfter:v9];

    unint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 reachabilityTracker]);
    unsigned int v16 = [v15 isNetworkError:v9];

    if (v16)
    {
      id v17 = sub_1000AA6AC(@"ckkszonemodifier", 0LL);
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Waiting for reachability before issuing zone creation",  buf,  2u);
      }

      [WeakRetained setNetworkError:1];
    }
  }

  id v19 = sub_1000AA6AC(@"ckkszonemodifier", 0LL);
  char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v42 = v7;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "created zones: %@", buf, 0xCu);
  }

  [WeakRetained setZoneModificationError:v9];
  unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained zoneModificationError]);

  if (v21)
  {
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained setResultStateOperation]);
    [v22 addOperation:v23];
  }

  else
  {
    id v24 = sub_1000AA6AC(@"ckkszonemodifier", 0LL);
    char v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
      *(_DWORD *)__int128 buf = 138412290;
      id v42 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Attempting to subscribe to zones %@",  buf,  0xCu);
    }

    id v27 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([v27 cloudKitClassDependencies]);
    id v29 = objc_msgSend( objc_msgSend(objc_msgSend(v28, "modifySubscriptionsOperationClass"), "alloc"),  "initWithSubscriptionsToSave:subscriptionIDsToDelete:",  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40),  0);
    uint64_t v30 = *(void *)(*(void *)(a1 + 40) + 8LL);
    __int128 v31 = *(void **)(v30 + 40);
    *(void *)(v30 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v29;

    __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) configuration]);
    [v32 setIsCloudKitSupportOperation:1];

    id v33 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v34 = (void *)objc_claimAutoreleasedReturnValue([v33 ckdatabase]);
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setDatabase:v34];

    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setName:@"zone-subscription-operation"];
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setQualityOfService:25];
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472LL;
    v37[2] = sub_1000762D8;
    v37[3] = &unk_1002844C8;
    objc_copyWeak(&v40, (id *)(a1 + 56));
    uint64_t v39 = *(void *)(a1 + 48);
    id v38 = v7;
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setModifySubscriptionsCompletionBlock:v37];
    id v35 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v36 = (void *)objc_claimAutoreleasedReturnValue([v35 ckdatabase]);
    [v36 addOperation:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];

    objc_destroyWeak(&v40);
  }
}

void sub_1000760E8(_Unwind_Exception *a1)
{
}

void sub_100076108(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = sub_1000AA6AC(@"ckkszonemodifier", 0LL);
  char v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v11 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Finished creating & subscribing to zones",  v11,  2u);
  }

  if ([WeakRetained networkError])
  {
    [WeakRetained setNextState:@"zone_creation_failed_due_to_network_error"];
    uint64_t v5 = objc_claimAutoreleasedReturnValue([WeakRetained zoneModificationError]);
    if (v5)
    {
      unint64_t v6 = (void *)v5;
      [WeakRetained setError:v5];
    }

    else
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained zoneSubscriptionError]);
      [WeakRetained setError:v8];

      unint64_t v6 = 0LL;
    }
  }

  else if ([WeakRetained allZoneCreationsSucceeded] {
         && ([WeakRetained allZoneSubscriptionsSucceeded] & 1) != 0)
  }
  {
    +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  *(void *)(a1 + 32),  1LL,  0LL);
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
    [WeakRetained setNextState:v6];
  }

  else
  {
    [WeakRetained setNextState:@"zonecreationfailed"];
    id v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained zoneModificationError]);
    if (v7)
    {
      [WeakRetained setError:v7];
    }

    else
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained zoneSubscriptionError]);
      [WeakRetained setError:v9];
    }

    uint64_t v10 = *(void *)(a1 + 32);
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
    +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v10,  0LL,  v6);
  }
}

void sub_1000762D8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained setZoneSubscriptionError:v7];
  if (v7)
  {
    id v9 = sub_1000AA6AC(@"ckkszonemodifier", 0LL);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v33 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Couldn't create cloudkit zone subscription; keychain syncing is severely degraded: %@",
        buf,
        0xCu);
    }

    id v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    [v11 inspectErrorForRetryAfter:v7];

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 reachabilityTracker]);
    unsigned int v14 = [v13 isNetworkError:v7];

    if (v14)
    {
      id v15 = sub_1000AA6AC(@"ckkszonemodifier", 0LL);
      unsigned int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Waiting for reachability before issuing zone subscription",  buf,  2u);
      }

      [WeakRetained setNetworkError:1];
    }
  }

  id v17 = sub_1000AA6AC(@"ckkszonemodifier", 0LL);
  uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v33 = v6;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Successfully subscribed to %@", buf, 0xCu);
  }

  id v19 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  char v20 = (void *)objc_claimAutoreleasedReturnValue([v19 databaseProvider]);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  void v27[2] = sub_1000765AC;
  v27[3] = &unk_1002902F8;
  uint64_t v22 = *(void **)(a1 + 32);
  uint64_t v21 = *(void *)(a1 + 40);
  v27[4] = WeakRetained;
  uint64_t v31 = v21;
  id v28 = v22;
  id v29 = v6;
  id v30 = v7;
  id v23 = v7;
  id v24 = v6;
  [v20 dispatchSyncWithSQLTransaction:v27];

  char v25 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained setResultStateOperation]);
  [v25 addOperation:v26];
}

uint64_t sub_1000765AC(id *a1)
{
  id v1 = a1;
  __int128 v114 = 0u;
  __int128 v115 = 0u;
  __int128 v116 = 0u;
  __int128 v117 = 0u;
  double v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] deps]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 views]);

  id obj = v3;
  id v102 = [v3 countByEnumeratingWithState:&v114 objects:v124 count:16];
  if (v102)
  {
    uint64_t v100 = *(void *)v115;
    uint64_t v101 = v1;
    do
    {
      for (uint64_t i = 0LL; i != v102; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v115 != v100) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void **)(*((void *)&v114 + 1) + 8LL * (void)i);
        __int128 v110 = 0u;
        __int128 v111 = 0u;
        __int128 v112 = 0u;
        __int128 v113 = 0u;
        id v6 = *(id *)(*((void *)v1[8] + 1) + 40LL);
        id v7 = [v6 countByEnumeratingWithState:&v110 objects:v123 count:16];
        if (v7)
        {
          id v8 = v7;
          uint64_t v9 = *(void *)v111;
LABEL_8:
          uint64_t v10 = 0LL;
          while (1)
          {
            if (*(void *)v111 != v9) {
              objc_enumerationMutation(v6);
            }
            id v11 = *(void **)(*((void *)&v110 + 1) + 8 * v10);
            uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 zoneID]);
            id v13 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
            unsigned __int8 v14 = [v12 isEqual:v13];

            if ((v14 & 1) != 0) {
              break;
            }
            if (v8 == (id)++v10)
            {
              id v8 = [v6 countByEnumeratingWithState:&v110 objects:v123 count:16];
              if (v8) {
                goto LABEL_8;
              }
              id v1 = v101;
              goto LABEL_84;
            }
          }

          id v15 = v11;

          id v1 = v101;
          if (!v15) {
            continue;
          }
          unsigned int v104 = [v101[5] containsObject:v15];
          id v99 = v15;
          if (v104)
          {
            unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
            id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 zoneName]);
            id v18 = sub_1000AA6AC(@"ckkszone", v17);
            id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);

            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
            {
              id v63 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
              *(_DWORD *)__int128 buf = 138412290;
              *(void *)id v119 = v63;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "Successfully created '%@'",  buf,  0xCu);
            }

            [v5 armReadyNotification];
            id v103 = 0LL;
            goto LABEL_30;
          }

          uint64_t v20 = objc_claimAutoreleasedReturnValue([v101[4] zoneModificationError]);
          if (!v20) {
            goto LABEL_24;
          }
          uint64_t v21 = (void *)v20;
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v101[4] zoneModificationError]);
          id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 domain]);
          if ([v23 isEqualToString:CKErrorDomain])
          {
            id v24 = (void *)objc_claimAutoreleasedReturnValue([v101[4] zoneModificationError]);
            id v25 = [v24 code];

            if (v25 == (id)2)
            {
              uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v101[4] zoneModificationError]);
              uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 userInfo]);
              id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 objectForKeyedSubscript:CKPartialErrorsByItemIDKey]);
              uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
              id v103 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:v26]);

              goto LABEL_26;
            }

LABEL_59:
LABEL_60:
                if ((v43 & 1) != 0) {
                  goto LABEL_61;
                }
LABEL_54:
                id v57 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
                uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v57 zoneName]);
                id v59 = sub_1000AA6AC(@"ckkszone", v58);
                unsigned int v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);

                if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
                {
                  id v61 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
                  *(_DWORD *)__int128 buf = 138412290;
                  *(void *)id v119 = v61;
                  _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_ERROR,  "Failed to subscribe to '%@'",  buf,  0xCu);
                }

                uint64_t v62 = 0LL;
                goto LABEL_64;
              }
            }

            goto LABEL_59;
          }

                      id v158 = 1;
                      __int16 v96 = 4;
                    }

                    else
                    {

                      __int16 v96 = 0;
                    }
                  }

                  else
                  {
                    id v97 = (void *)objc_claimAutoreleasedReturnValue([v169 tlk]);
                    uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue([v97 zoneName]);
                    id v99 = sub_1000AA6AC(@"ckksshare", v98);
                    id v72 = (void *)objc_claimAutoreleasedReturnValue(v99);

                    if (os_log_type_enabled((os_log_t)v72, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)uint64_t v191 = 138412546;
                      id v192 = v71;
                      CFDataRef v193 = 2112;
                      CFDataRef v194 = v61;
                      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v72,  OS_LOG_TYPE_DEFAULT,  "Existing TLKShare's signature doesn't verify with current peer set: %@ %@",  v191,  0x16u);
                    }

                    __int16 v96 = 5;
                  }

                  goto LABEL_61;
                }

                break;
              }

              __int16 v96 = 5;
              goto LABEL_62;
            }

            id v34 = (void *)objc_claimAutoreleasedReturnValue([v169 tlk]);
            id v35 = (void *)objc_claimAutoreleasedReturnValue([v34 zoneName]);
            id v36 = sub_1000AA6AC(@"ckksshare", v35);
            id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);

            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = 138412290;
              *(void *)&uint8_t buf[4] = v170;
              _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "Peer (%@) is not supposed to have view, skipping",  buf,  0xCu);
            }

LABEL_82:
            id v29 = v164 + 1;
          }

          while ((id)(v164 + 1) != v163);
          id v163 = [obj countByEnumeratingWithState:&v187 objects:v202 count:16];
        }

        while (v163);
      }

      if ([v156 count])
      {
        id v122 = (void *)objc_claimAutoreleasedReturnValue([v169 tlk]);
        id v123 = (void *)objc_claimAutoreleasedReturnValue([v122 zoneName]);
        __int128 v124 = sub_1000AA6AC(@"ckksshare", v123);
        uint64_t v125 = (os_log_s *)objc_claimAutoreleasedReturnValue(v124);

        if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
        {
          __int128 v126 = [v156 count];
          *(_DWORD *)__int128 buf = 134218242;
          *(void *)&uint8_t buf[4] = v126;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v156;
          _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_DEFAULT,  "Missing TLK shares for %lu peers: %@",  buf,  0x16u);
        }

        __int128 v127 = (void *)objc_claimAutoreleasedReturnValue([v169 tlk]);
        id v128 = (void *)objc_claimAutoreleasedReturnValue([v127 zoneName]);
        __int128 v129 = sub_1000AA6AC(@"ckksshare", v128);
        __int128 v130 = (os_log_s *)objc_claimAutoreleasedReturnValue(v129);

        if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
        {
          __int128 v131 = objc_claimAutoreleasedReturnValue([v166 currentSelfPeersError]);
          id v132 = (void *)v131;
          if (v131) {
            __int128 v133 = (const __CFString *)v131;
          }
          else {
            __int128 v133 = @"no error";
          }
          id v134 = (void *)objc_claimAutoreleasedReturnValue([v166 currentSelfPeers]);
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = v133;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v134;
          _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_DEFAULT, "Self peers are (%@) %@", buf, 0x16u);
        }

        uint64_t v135 = (void *)objc_claimAutoreleasedReturnValue([v169 tlk]);
        id v136 = (void *)objc_claimAutoreleasedReturnValue([v135 zoneName]);
        id v137 = sub_1000AA6AC(@"ckksshare", v136);
        id v138 = (os_log_s *)objc_claimAutoreleasedReturnValue(v137);

        if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
        {
          id v139 = objc_claimAutoreleasedReturnValue([v166 currentTrustedPeersError]);
          id v140 = (void *)v139;
          if (v139) {
            id v141 = (const __CFString *)v139;
          }
          else {
            id v141 = @"no error";
          }
          uint64_t v142 = (void *)objc_claimAutoreleasedReturnValue([v166 currentTrustedPeers]);
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = v141;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v142;
          _os_log_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_DEFAULT, "Trusted peers are (%@) %@", buf, 0x16u);
        }
      }

      uint64_t v143 = v156;
      uint64_t v22 = v156;
    }

    else
    {
      uint64_t v144 = (void *)objc_claimAutoreleasedReturnValue([v169 tlk]);
      uint64_t v145 = (void *)objc_claimAutoreleasedReturnValue([v144 zoneName]);
      v146 = sub_1000AA6AC(@"ckksshare", v145);
      id v147 = (os_log_s *)objc_claimAutoreleasedReturnValue(v146);

      if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
      {
        uint64_t v148 = (void *)objc_claimAutoreleasedReturnValue([v166 currentSelfPeers]);
        v149 = (void *)objc_claimAutoreleasedReturnValue([v148 currentSelf]);
        v150 = (void *)objc_claimAutoreleasedReturnValue([v149 peerID]);
        size_t v151 = (void *)objc_claimAutoreleasedReturnValue([v166 currentTrustedPeerIDs]);
        *(_DWORD *)__int128 buf = 138412546;
        *(void *)&uint8_t buf[4] = v150;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v151;
        _os_log_impl( (void *)&_mh_execute_header,  v147,  OS_LOG_TYPE_ERROR,  "current self peer (%@) is not in the set of trusted peers: %@",  buf,  0x16u);
      }

      if (a6)
      {
        v152 = (void *)objc_claimAutoreleasedReturnValue([v166 currentSelfPeers]);
        v153 = (void *)objc_claimAutoreleasedReturnValue([v152 currentSelf]);
        uint64_t v154 = (void *)objc_claimAutoreleasedReturnValue([v153 peerID]);
        unsigned int v155 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"current self peer (%@) is not in the set of trusted peers",  v154));
        *a6 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:",  @"CKKSErrorDomain",  52LL,  v155));
      }

      uint64_t v22 = 0LL;
      uint64_t v143 = v156;
    }

    goto LABEL_13;
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([v169 tlk]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 zoneName]);
  id v13 = sub_1000AA6AC(@"ckksshare", v12);
  unsigned __int8 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);

  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v166 currentTrustedPeersError]);
    *(_DWORD *)__int128 buf = 138412290;
    *(void *)&uint8_t buf[4] = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Couldn't find missing shares because trusted peers aren't available: %@",  buf,  0xCu);
  }

  if (a6) {
    *a6 = (id)objc_claimAutoreleasedReturnValue([v166 currentTrustedPeersError]);
  }
LABEL_12:
  uint64_t v22 = (id)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
LABEL_13:

  return v22;
}

  uint64_t v9 = 0LL;
  if ((*(_DWORD *)&v6 & 0x2000000) != 0)
  {
LABEL_54:
    uint64_t v10 = 2654435761LL * self->_optionsAllowPowerNapScheduling;
    if ((*(_DWORD *)&v6 & 0x200000) != 0) {
      goto LABEL_55;
    }
LABEL_61:
    id v11 = 0LL;
    if ((*(_DWORD *)&v6 & 0x400000) != 0) {
      goto LABEL_56;
    }
    goto LABEL_62;
  }

LABEL_84:
      }

      id v102 = [obj countByEnumeratingWithState:&v114 objects:v124 count:16];
    }

    while (v102);
  }

  return 1LL;
}

  id v50 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  self->_optionsAllowExpensiveAccess));
  [v3 setObject:v50 forKey:@"options_allow_expensive_access"];

  uint64_t v22 = self->_has;
  if ((*(_DWORD *)&v22 & 0x2000000) == 0)
  {
LABEL_50:
    if ((*(_DWORD *)&v22 & 0x200000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_86;
  }

  PBDataWriterWriteBOOLField(v20, self->_optionsAllowExpensiveAccess, 304LL);
  unsigned int v16 = self->_has;
  if ((*(_DWORD *)&v16 & 0x2000000) == 0)
  {
LABEL_50:
    if ((*(_DWORD *)&v16 & 0x200000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_86;
  }

  *((_BYTE *)v4 + 273) = self->_optionsAllowExpensiveAccess;
  *((_DWORD *)v4 + 70) |= 0x1000000u;
  id v8 = self->_has;
  if ((*(_DWORD *)&v8 & 0x2000000) == 0)
  {
LABEL_50:
    if ((*(_DWORD *)&v8 & 0x200000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_86;
  }

  self->_timestampResponseStart = v5[14];
  *(_DWORD *)&self->_has |= 0x2000u;
  if ((v5[35] & 0x1000) != 0)
  {
LABEL_55:
    self->_timestampResponseEnd = v5[13];
    *(_DWORD *)&self->_has |= 0x1000u;
  }

void sub_1000778E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
}

void sub_100077B98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100078080( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45, uint64_t a46, uint64_t a47, uint64_t a48, char a49)
{
}

void sub_100078674( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

void sub_100078AF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100078E78(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_100078E88(uint64_t a1)
{
}

void sub_100078E90(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  id v14 = 0LL;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 fetchSelfPeers:&v14]);
  id v4 = v14;
  uint64_t v5 = *(void **)(a1 + 32);
  id v13 = 0LL;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 fetchTrustedPeers:&v13]);
  id v7 = v13;
  uint64_t v8 = objc_alloc(&OBJC_CLASS___CKKSPeerProviderState);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) providerID]);
  uint64_t v10 = -[CKKSPeerProviderState initWithPeerProviderID:essential:selfPeers:selfPeersError:trustedPeers:trustedPeersError:]( v8,  "initWithPeerProviderID:essential:selfPeers:selfPeersError:trustedPeers:trustedPeersError:",  v9,  [*(id *)(a1 + 32) essential],  v3,  v4,  v6,  v7);
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v10;
}

id sub_100078F84(uint64_t a1, void *a2)
{
  return [a2 trustedPeerSetChanged:*(void *)(a1 + 32)];
}

id sub_100078F90(uint64_t a1, void *a2)
{
  return [a2 selfPeerChanged:*(void *)(a1 + 32)];
}

void sub_100078F9C(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v4 = sub_10001267C("SecError");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      uint64_t v11 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "octagon-sos: failed to update Octagon keys in SOS:%@",  (uint8_t *)&v10,  0xCu);
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v7 = a2;
    uint64_t v8 = *(os_log_s **)(v6 + 40);
    *(void *)(v6 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v7;
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    uint64_t v9 = sub_10001267C("octagon-sos");
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v1syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "successfully updated Octagon keys in SOS!",  (uint8_t *)&v10,  2u);
    }
  }

  CFRelease(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL));
  CFRelease(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL));
  CFRelease(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL));
  CFRelease(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL));
  CFRelease(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL));
  CFRelease(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 24LL));
  CFRelease(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL));
  CFRelease(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 112) + 8LL) + 24LL));
}

void sub_100079168(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v4 = sub_10001267C("SecError");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      uint64_t v11 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "octagon-preload-keys: failed to preload Octagon keys in SOS:%@",  (uint8_t *)&v10,  0xCu);
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v7 = a2;
    uint64_t v8 = *(os_log_s **)(v6 + 40);
    *(void *)(v6 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v7;
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    uint64_t v9 = sub_10001267C("octagon-preload-keys");
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v1syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "successfully preloaded Octagon keys in SOS!",  (uint8_t *)&v10,  2u);
    }
  }

  CFRelease(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL));
  CFRelease(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL));
  CFRelease(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL));
  CFRelease(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL));
  CFRelease(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL));
  CFRelease(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 24LL));
}

void sub_100079314(uint64_t a1, CFSetRef theSet, void *a3)
{
  if (a3)
  {
    uint64_t v6 = sub_10001267C("SecError");
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v13 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "octagon-sos: Error fetching trusted peers: %@",  buf,  0xCu);
    }

    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v10 = *(void *)(v8 + 40);
    uint64_t v9 = (id *)(v8 + 40);
    if (v10) {
      objc_storeStrong(v9, a3);
    }
  }

  context[0] = _NSConcreteStackBlock;
  context[1] = 3221225472LL;
  context[2] = sub_100079430;
  context[3] = &unk_100291CB8;
  context[4] = *(void *)(a1 + 40);
  CFSetApplyFunction(theSet, (CFSetApplierFunction)sub_1000796DC, context);
}

void sub_100079430(uint64_t a1, uint64_t a2)
{
  CFErrorRef err = 0LL;
  if (!a2) {
    return;
  }
  uint64_t PeerID = SOSPeerInfoGetPeerID(a2);
  uint64_t v5 = (const void *)SOSPeerInfoCopyOctagonSigningPublicKey(a2, &err);
  if (v5)
  {
    uint64_t v6 = SOSPeerInfoCopyOctagonEncryptionPublicKey(a2, &err);
    if (v6)
    {
      id v7 = (const void *)v6;
      char v8 = 0;
      goto LABEL_17;
    }
  }

  if (!err) {
    goto LABEL_14;
  }
  CFErrorDomain Domain = CFErrorGetDomain(err);
  if (Domain && kCFErrorDomainOSStatus)
  {
    if (!CFEqual(Domain, kCFErrorDomainOSStatus))
    {
LABEL_14:
      uint64_t v12 = sub_10001267C("SecError");
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v21 = a2;
        __int16 v22 = 2112;
        CFErrorRef v23 = err;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "octagon-sos: error fetching octagon keys for peer: %@ %@",  buf,  0x16u);
      }

      goto LABEL_16;
    }
  }

  else if (Domain != kCFErrorDomainOSStatus)
  {
    goto LABEL_14;
  }

  if (CFErrorGetCode(err) != -50) {
    goto LABEL_14;
  }
  uint64_t v10 = sub_10001267C("octagon-sos");
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v21 = PeerID;
    __int16 v22 = 2112;
    CFErrorRef v23 = err;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Peer(%@) doesn't have Octagon keys, but this is expected: %@",  buf,  0x16u);
  }

uint64_t sub_1000796DC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void sub_1000796F0(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    uint64_t v5 = *(void *)(a1[4] + 8LL);
    id v6 = a4;
    id v7 = *(void **)(v5 + 40);
    *(void *)(v5 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v6;
  }

  else
  {
    if (a2 && a3)
    {
      uint64_t v9 = -[_SFECKeyPair initWithSecKey:](objc_alloc(&OBJC_CLASS____SFECKeyPair), "initWithSecKey:", a3);
      uint64_t v10 = *(void *)(a1[5] + 8LL);
      uint64_t v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v9;

      uint64_t v12 = -[_SFECKeyPair initWithSecKey:](objc_alloc(&OBJC_CLASS____SFECKeyPair), "initWithSecKey:", a2);
      uint64_t v13 = a1[6];
    }

    else
    {
      uint64_t v12 = (_SFECKeyPair *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:",  @"CKKSErrorDomain",  24LL,  @"Not all SOS peer keys available, but no error returned"));
      uint64_t v13 = a1[4];
    }

    uint64_t v14 = *(void *)(v13 + 8);
    id v7 = *(void **)(v14 + 40);
    *(void *)(v14 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v12;
  }
}

id sub_1000797B4(uint64_t a1)
{
  double v2 = sub_10001267C("octagon-sos");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Received a notification that the SOS Octagon peer set changed",  v5,  2u);
  }

  return [*(id *)(a1 + 32) sendTrustedPeerSetChangedUpdate];
}

void sub_10007986C(id a1)
{
  uint64_t v1 = SOSViewCopyViewSet(6LL);
  double v2 = (void *)qword_1002DE8F0;
  qword_1002DE8F0 = v1;
}

void sub_10007A378(_Unwind_Exception *a1)
{
}

void sub_10007A768( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_10007A8D0(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v14 logResultForEvent:@"OctagonEventEstablishIdentity" hardFailure:1 result:v12];

  if (v12)
  {
    id v15 = sub_10001267C("SecError");
    unsigned int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v39 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "octagon: Error calling establish: %@",  buf,  0xCu);
    }

    if ([v12 isCuttlefishError:1033])
    {
      id v17 = sub_10001267C("octagon-ckks");
      CFErrorRef v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        id v19 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained ckksConflictState]);
        *(_DWORD *)__int128 buf = 138412290;
        id v39 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "A CKKS key hierarchy is out of date; moving to '%@'",
          buf,
          0xCu);
      }

      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained ckksConflictState]);
      [WeakRetained setNextState:v20];
    }

    else
    {
      [WeakRetained setError:v12];
    }

    id v25 = (id)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
    [WeakRetained runBeforeGroupFinished:v25];
  }

  else
  {
    [WeakRetained setPeerID:v9];
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationDependencies]);
    __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v21 stateHolder]);
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472LL;
    v35[2] = sub_10007AC90;
    v35[3] = &unk_1002864C0;
    id v36 = v9;
    id v23 = v11;
    id v37 = v23;
    id v34 = 0LL;
    unsigned int v24 = [v22 persistAccountChanges:v35 error:&v34];
    id v25 = v34;

    if (!v24 || v25)
    {
      id v27 = sub_10001267C("octagon");
      id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v39 = v25;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Couldn't persist results: %@", buf, 0xCu);
      }

      [WeakRetained setError:v25];
    }

    else
    {
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
      [WeakRetained setNextState:v26];
    }

    id v29 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationDependencies]);
    id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 ckks]);
    [v30 setCurrentSyncingPolicy:v23];

    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationDependencies]);
    __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v31 ckks]);
    [v32 receiveTLKUploadRecords:v10];

    id v33 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
    [WeakRetained runBeforeGroupFinished:v33];
  }
}

id sub_10007AC90(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setTrustState:2];
  [v3 setPeerID:*(void *)(a1 + 32)];
  [v3 setTPSyncingPolicy:*(void *)(a1 + 40)];
  return v3;
}

void sub_10007ACD8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  double v2 = sub_10001267C("octagon");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue([WeakRetained error]);
    uint64_t v5 = (void *)v4;
    id v6 = @"no error";
    if (v4) {
      id v6 = (const __CFString *)v4;
    }
    int v7 = 138412290;
    char v8 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Finishing an establish operation with %@",  (uint8_t *)&v7,  0xCu);
  }
}

void sub_10007ADB8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  double v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) viewKeySets]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pendingTLKShares]);
  [WeakRetained proceedWithKeys:v2 pendingTLKShares:v3];
}

void sub_10007B23C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, id a28)
{
}

void sub_10007B60C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, id location)
{
}

uint64_t sub_10007BBEC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_10007BBFC(uint64_t a1)
{
}

uint64_t sub_10007BC04(uint64_t a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
  double v2 = (void *)objc_claimAutoreleasedReturnValue([v1 zoneName]);
  id v3 = sub_1000AA6AC(@"ckksheal", v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412290;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Attempting to heal %@", buf, 0xCu);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contextID]);
  v346 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSCurrentKeySet loadForZone:contextID:]( &OBJC_CLASS___CKKSCurrentKeySet,  "loadForZone:contextID:",  v6,  v7));

  char v8 = (void *)objc_claimAutoreleasedReturnValue([v346 error]);
  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v346 error]);
    [*(id *)(a1 + 40) setError:v9];

    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneName]);
    id v12 = sub_1000AA6AC(@"ckksheal", v11);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);

    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v346 error]);
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "couldn't load current key set, attempting to proceed: %@",  buf,  0xCu);
    }
  }

  else
  {
    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue([v15 zoneName]);
    id v17 = sub_1000AA6AC(@"ckksheal", v16);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);

    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v346;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Key set is %@", buf, 0xCu);
    }
  }

  CFErrorRef v18 = (void *)objc_claimAutoreleasedReturnValue([v346 currentTLKPointer]);
  if (!v18) {
    goto LABEL_17;
  }
  id v19 = (void *)objc_claimAutoreleasedReturnValue([v346 currentClassAPointer]);
  if (!v19)
  {
LABEL_16:

    goto LABEL_17;
  }

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v346 currentClassCPointer]);
  if (!v20)
  {

    goto LABEL_16;
  }

  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v346 tlk]);
  if (v21)
  {
    __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v346 classA]);
    if (v22)
    {
      id v23 = (void *)objc_claimAutoreleasedReturnValue([v346 classC]);
      BOOL v24 = v23 == 0LL;

      if (!v24) {
        goto LABEL_17;
      }
      goto LABEL_51;
    }
  }

LABEL_51:
  if ([*(id *)(a1 + 40) allowFullRefetchResult])
  {
    id v85 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    id v86 = (void *)objc_claimAutoreleasedReturnValue([v85 zoneName]);
    id v87 = sub_1000AA6AC(@"ckksheal", v86);
    unsigned int v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);

    if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEFAULT,  "Have current key pointers, but no keys. This is exceptional; requesting full refetch",
        buf,
        2u);
    }

    [*(id *)(a1 + 32) setViewKeyHierarchyState:@"needrefetch"];
    id v89 = *(void **)(a1 + 48);
    uint64_t v422 = kSecurityRTCFieldFullRefetchNeeded;
    v423 = &__kCFBooleanTrue;
    id v341 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v423,  &v422,  1LL));
    [v89 addMetrics:v341];
LABEL_55:
    id v90 = 0LL;
LABEL_56:
    uint64_t v91 = 1LL;
    goto LABEL_115;
  }

void sub_10007E83C(_Unwind_Exception *a1)
{
}

char *sub_10007E8AC(uint64_t a1)
{
  uint64_t result = (char *)[*(id *)(a1 + 32) count];
  if ((unint64_t)&result[-*(void *)(a1 + 72)] <= 0x3E8)
  {
    +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  *(void *)(a1 + 40),  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL),  0LL);
    return (char *)+[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  *(void *)(a1 + 48),  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL),  0LL);
  }

  return result;
}

void sub_10007E924(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  if (v7)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
    char v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 zoneName]);
    id v10 = sub_1000AA6AC(@"ckksheal", v9);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);

    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v16 = 138412546;
      id v17 = v7;
      __int16 v18 = 2112;
      id v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "error on row: %@ %@", (uint8_t *)&v16, 0x16u);
    }
  }

  else
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 zoneName]);
    id v14 = sub_1000AA6AC(@"ckksheal", v13);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v6 recordName]);
      int v16 = 138412290;
      id v17 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Successfully completed upload for %@",  (uint8_t *)&v16,  0xCu);
    }
  }
}

void sub_10007EAE4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 128));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 zoneName]);
  id v11 = sub_1000AA6AC(@"ckksheal", v10);
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);

  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v36 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Completed Key Heal CloudKit operation with error: %@",  buf,  0xCu);
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 databaseProvider]);
  __int16 v18 = _NSConcreteStackBlock;
  uint64_t v19 = 3221225472LL;
  uint64_t v20 = sub_10007ED54;
  uint64_t v21 = &unk_100284628;
  id v22 = v7;
  id v23 = *(id *)(a1 + 32);
  id v24 = v6;
  id v25 = *(id *)(a1 + 40);
  id v26 = *(id *)(a1 + 48);
  id v27 = *(id *)(a1 + 56);
  id v28 = *(id *)(a1 + 64);
  id v29 = *(id *)(a1 + 72);
  id v30 = *(id *)(a1 + 80);
  id v31 = WeakRetained;
  __int128 v34 = *(_OWORD *)(a1 + 112);
  id v32 = *(id *)(a1 + 88);
  id v33 = *(id *)(a1 + 96);
  id v15 = v6;
  id v16 = v7;
  [v14 dispatchSyncWithSQLTransaction:&v18];

  id v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue", v18, v19, v20, v21));
  [v17 addOperation:*(void *)(a1 + 104)];
}

uint64_t sub_10007ED54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  if (v2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneName]);
    [v3 logUnrecoverableError:v4 forEvent:@"CKKSEventProcessHealKeyHierarchy" zoneName:v6 withAttributes:0];

    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
    char v8 = (void *)objc_claimAutoreleasedReturnValue([v7 zoneName]);
    id v9 = sub_1000AA6AC(@"ckksheal", v8);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);

    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      id v11 = *(void **)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412290;
      id v77 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "couldn't save new key hierarchy to CloudKit: %@",  buf,  0xCu);
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 136) + 8LL) + 24LL) = 0;
    [*(id *)(a1 + 112) populateUnderlyingErrorsStartingWithRootError:*(void *)(a1 + 32)];
    *(_BYTE *)(*(void *)(*(void *)(a1 + 128) + 8LL) + 24LL) = 0;
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 104) deps]);
    [v12 intransactionCKWriteFailed:*(void *)(a1 + 32) attemptedRecordsChanged:*(void *)(a1 + 120)];

    uint64_t v13 = *(void **)(a1 + 104);
    uint64_t v14 = 1LL;
    [v13 setCloudkitWriteFailures:1];
    return v14;
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
  id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 zoneName]);
  [v3 logSuccessForEvent:@"CKKSEventProcessHealKeyHierarchy" zoneName:v16];

  __int128 v74 = 0u;
  __int128 v75 = 0u;
  __int128 v73 = 0u;
  __int128 v72 = 0u;
  id v17 = *(id *)(a1 + 48);
  id v18 = [v17 countByEnumeratingWithState:&v72 objects:v79 count:16];
  if (!v18) {
    goto LABEL_27;
  }
  id v19 = v18;
  uint64_t v20 = *(void *)v73;
  do
  {
    uint64_t v21 = 0LL;
    do
    {
      if (*(void *)v73 != v20) {
        objc_enumerationMutation(v17);
      }
      uint64_t v22 = *(void *)(*((void *)&v72 + 1) + 8LL * (void)v21);
      if ([*(id *)(a1 + 56) matchesCKRecord:v22])
      {
        id v23 = *(void **)(a1 + 56);
LABEL_16:
        [v23 setStoredCKRecord:v22];
        goto LABEL_17;
      }

      if ([*(id *)(a1 + 64) matchesCKRecord:v22])
      {
        id v23 = *(void **)(a1 + 64);
        goto LABEL_16;
      }

      if ([*(id *)(a1 + 72) matchesCKRecord:v22])
      {
        id v23 = *(void **)(a1 + 72);
        goto LABEL_16;
      }

      id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) currentTLKPointer]);
      unsigned int v25 = [v24 matchesCKRecord:v22];

      id v26 = *(void **)(a1 + 80);
      if (v25)
      {
        id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 currentTLKPointer]);
      }

      else
      {
        id v28 = (void *)objc_claimAutoreleasedReturnValue([v26 currentClassAPointer]);
        unsigned int v29 = [v28 matchesCKRecord:v22];

        id v30 = *(void **)(a1 + 80);
        if (v29)
        {
          id v27 = (void *)objc_claimAutoreleasedReturnValue([v30 currentClassAPointer]);
        }

        else
        {
          id v31 = (void *)objc_claimAutoreleasedReturnValue([v30 currentClassCPointer]);
          unsigned int v32 = [v31 matchesCKRecord:v22];

          if (!v32) {
            goto LABEL_17;
          }
          id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) currentClassCPointer]);
        }
      }

      id v33 = v27;
      [v27 setStoredCKRecord:v22];

LABEL_17:
      uint64_t v21 = (char *)v21 + 1;
    }

    while (v19 != v21);
    id v34 = [v17 countByEnumeratingWithState:&v72 objects:v79 count:16];
    id v19 = v34;
  }

  while (v34);
LABEL_27:

  os_log_type_t v35 = *(void **)(a1 + 56);
  id v71 = 0LL;
  [v35 saveToDatabaseAsOnlyCurrentKeyForClassAndState:&v71];
  id v36 = v71;
  id v37 = *(void **)(a1 + 64);
  id v70 = v36;
  [v37 saveToDatabaseAsOnlyCurrentKeyForClassAndState:&v70];
  id v38 = v70;

  id v39 = *(void **)(a1 + 72);
  id v69 = v38;
  [v39 saveToDatabaseAsOnlyCurrentKeyForClassAndState:&v69];
  id v40 = v69;

  id v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) currentTLKPointer]);
  id v68 = v40;
  [v41 saveToDatabase:&v68];
  id v42 = v68;

  int v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) currentClassAPointer]);
  id v67 = v42;
  [v43 saveToDatabase:&v67];
  id v44 = v67;

  id v45 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) currentClassCPointer]);
  id v66 = v44;
  [v45 saveToDatabase:&v66];
  id v46 = v66;

  __int128 v64 = 0u;
  __int128 v65 = 0u;
  __int128 v62 = 0u;
  __int128 v63 = 0u;
  id v47 = *(id *)(a1 + 88);
  id v48 = [v47 countByEnumeratingWithState:&v62 objects:v78 count:16];
  if (v48)
  {
    id v49 = v48;
    uint64_t v50 = *(void *)v63;
    do
    {
      id v51 = 0LL;
      id v52 = v46;
      do
      {
        if (*(void *)v63 != v50) {
          objc_enumerationMutation(v47);
        }
        id v53 = *(void **)(*((void *)&v62 + 1) + 8LL * (void)v51);
        id v61 = v52;
        [v53 saveToDatabase:&v61];
        id v46 = v61;

        id v51 = (char *)v51 + 1;
        id v52 = v46;
      }

      while (v49 != v51);
      id v49 = [v47 countByEnumeratingWithState:&v62 objects:v78 count:16];
    }

    while (v49);
  }

  uint64_t v54 = *(void **)(a1 + 40);
  if (v46)
  {
    id v55 = (void *)objc_claimAutoreleasedReturnValue([v54 zoneID]);
    id v56 = (void *)objc_claimAutoreleasedReturnValue([v55 zoneName]);
    id v57 = sub_1000AA6AC(@"ckksheal", v56);
    BOOL v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);

    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v77 = v46;
      _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_ERROR,  "couldn't save new key hierarchy to database; this is very bad: %@",
        buf,
        0xCu);
    }

    [*(id *)(a1 + 96) populateUnderlyingErrorsStartingWithRootError:v46];
    [*(id *)(a1 + 40) setViewKeyHierarchyState:@"error"];
    *(_BYTE *)(*(void *)(*(void *)(a1 + 128) + 8LL) + 24LL) = 0;

    return 0LL;
  }

  else
  {
    [v54 setViewKeyHierarchyState:@"process_key_hierarchy"];
    uint64_t v59 = *(void **)(a1 + 104);
    uint64_t v14 = 1LL;
    [v59 setNewCloudKitRecordsWritten:1];
  }

  return v14;
}

void sub_10007F338(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ([WeakRetained cloudkitWriteFailures])
  {
    id v2 = sub_1000AA6AC(@"ckksheal", 0LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Due to write failures, we'll try to fetch the current state",  buf,  2u);
    }

    uint64_t v4 = @"begin_fetch";
  }

  else
  {
    if (![WeakRetained newCloudKitRecordsWritten])
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
      [WeakRetained setNextState:v7];

      goto LABEL_11;
    }

    id v5 = sub_1000AA6AC(@"ckksheal", 0LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Some records were written! Process them",  v8,  2u);
    }

    uint64_t v4 = @"process_key_hierarchy";
  }

  [WeakRetained setNextState:v4];
LABEL_11:
}

void sub_1000807B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_10008129C(uint64_t a1, void *a2)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:@"count(*)"]);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v3 asNSInteger];
}

LABEL_74:
          id v66 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOperationDependencies currentFetchReasons](self, "currentFetchReasons"));
          [v66 addObject:@"keyhierarchy"];

          id v67 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOperationDependencies currentFetchReasons](self, "currentFetchReasons"));
          [v67 addObject:@"conflict"];

          id v56 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOperationDependencies flagHandler](self, "flagHandler"));
          [v56 _onqueueHandleFlag:@"fetch_requested"];
        }

        else
        {
          id v71 = [v51 code];
          __int128 v62 = (void *)objc_claimAutoreleasedReturnValue([v46 zoneID]);
          __int128 v63 = (void *)objc_claimAutoreleasedReturnValue([v62 zoneName]);
          __int128 v64 = sub_1000AA6AC(@"ckks", v63);
          id v56 = (void *)objc_claimAutoreleasedReturnValue(v64);

          __int128 v65 = os_log_type_enabled((os_log_t)v56, OS_LOG_TYPE_ERROR);
          if (v71 == (id)2)
          {
            if (v65) {
              goto LABEL_73;
            }
            goto LABEL_74;
          }

          if (v65)
          {
            *(_DWORD *)__int128 buf = 138412546;
            __int16 v94 = v51;
            id v95 = 2112;
            __int16 v96 = v46;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v56,  OS_LOG_TYPE_ERROR,  "CKKS Server extension has told us about %@ for record %@, but we don't currently handle this error",  buf,  0x16u);
          }
        }

    *a1 = Mutable;
    return (unsigned __int8 *)v5;
  }

  sub_1000194B4(-3LL, @"com.apple.security.cfder.error", 0LL, a2, v12, @"Failed to create dictionary");
  id v5 = 0LL;
  if (!v31) {
    goto LABEL_74;
  }
  return (unsigned __int8 *)v5;
}

  id v47 = v64;
  id v48 = (const void *)v64[3];
  a1 = v59;
  a5 = v60;
  if (v48)
  {
    if (!a6 || (*a6 = CFRetain(v48), v47 = v64, (id v48 = (const void *)v64[3]) != 0LL))
    {
      v47[3] = 0LL;
      CFRelease(v48);
    }
  }

  id v49 = *((unsigned __int8 *)v68 + 24);
  _Block_object_dispose(&v63, 8);
  _Block_object_dispose(&v67, 8);
  _Block_object_dispose(&v71, 8);
  if (v49)
  {
    uint64_t v50 = 1LL;
    goto LABEL_87;
  }

  id v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_timestampDnsEnd));
  [v3 setObject:v41 forKey:@"timestamp_dns_end"];

  id v19 = self->_has;
  if ((*(_DWORD *)&v19 & 0x10000) == 0)
  {
LABEL_37:
    if ((*(_WORD *)&v19 & 0x8000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_76;
  }

  PBDataWriterWriteUint64Field(v20, self->_timestampDnsEnd, 205LL);
  uint64_t v14 = self->_has;
  if ((*(_DWORD *)&v14 & 0x10000) == 0)
  {
LABEL_37:
    if ((*(_WORD *)&v14 & 0x8000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_76;
  }

  v4[9] = self->_timestampDnsEnd;
  *((_DWORD *)v4 + 70) |= 0x100u;
  id v7 = self->_has;
  if ((*(_DWORD *)&v7 & 0x10000) == 0)
  {
LABEL_37:
    if ((*(_WORD *)&v7 & 0x8000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_76;
  }

LABEL_68:
      }

      id v45 = (char *)v45 + 1;
      id v7 = v80;
      if (v79 != v45) {
        continue;
      }
      break;
    }

    id v68 = [obja countByEnumeratingWithState:&v81 objects:v99 count:16];
    id v79 = v68;
    if (v68) {
      continue;
    }
    break;
  }

    id v16 = v27;
    goto LABEL_69;
  }

  id v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](&OBJC_CLASS___NSMutableData, "dataWithLength:", 32LL));
  id v48 = v88;
  if (+[SecAKSObjCWrappers aksDecryptWithKeybag:keyclass:ciphertext:outKeyclass:plaintext:personaId:personaIdLength:error:]( &OBJC_CLASS___SecAKSObjCWrappers,  "aksDecryptWithKeybag:keyclass:ciphertext:outKeyclass:plaintext:personaId:personaIdLength:error:",  self->_keybag,  self->_keyclass,  v88,  &self->_keyclass,  v47,  v26,  v22,  v15))
  {
    id v49 = objc_alloc(&OBJC_CLASS____SFAESKey);
    uint64_t v50 = [(id)objc_opt_class(self) keySpecifier];
    id v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
    id v34 = [v49 initWithData:v47 specifier:v51 error:v15];
  }

  else
  {
    id v34 = 0LL;
  }

LABEL_70:
  return v34;
}

        CFRelease(v8);
        goto LABEL_69;
      }

      values = _NSConcreteStackBlock;
      id v34 = 0x40000000LL;
      os_log_type_t v35 = sub_1001133FC;
      id v36 = &unk_10028FB18;
      id v37 = (uint64_t *)v18;
      id v38 = a3;
      id v39 = v8;
      id v40 = (CFDataRef)a4;
      unsigned int v25 = sub_100110ECC(0, 1, 0LL, (uint64_t)a4, (uint64_t)&values);
    }

  id v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_networkResponseBodyBytesReceived));
  [v3 setObject:v36 forKey:@"network_response_body_bytes_received"];

  if ((*(_DWORD *)&self->_has & 0x40000) != 0)
  {
LABEL_24:
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_networkPreviousAttemptCount));
    [v3 setObject:v14 forKey:@"network_previous_attempt_count"];
  }

  PBDataWriterWriteUint64Field(v20, self->_networkResponseBodyBytesReceived, 111LL);
  if ((*(_DWORD *)&self->_has & 0x40000) != 0) {
LABEL_24:
  }
    PBDataWriterWriteUint32Field(v20, self->_networkPreviousAttemptCount, 112LL);
LABEL_25:
  networkFatalError = self->_networkFatalError;
  if (networkFatalError) {
    PBDataWriterWriteSubmessage(v20, networkFatalError, 113LL);
  }
  if ((*(_BYTE *)&self->_has & 4) != 0) {
    PBDataWriterWriteUint64Field(v20, self->_networkStatusCode, 114LL);
  }
  networkRequestUruint64_t i = self->_networkRequestUri;
  if (networkRequestUri) {
    PBDataWriterWriteStringField(v20, networkRequestUri, 115LL);
  }
  uint64_t v14 = self->_has;
  if ((*(_BYTE *)&v14 & 0x20) != 0)
  {
    PBDataWriterWriteUint64Field(v20, self->_timestampC2Init, 201LL);
    uint64_t v14 = self->_has;
    if ((*(_BYTE *)&v14 & 0x80) == 0)
    {
LABEL_33:
      if ((*(_BYTE *)&v14 & 0x40) == 0) {
        goto LABEL_34;
      }
      goto LABEL_72;
    }
  }

  else if ((*(_BYTE *)&v14 & 0x80) == 0)
  {
    goto LABEL_33;
  }

  PBDataWriterWriteUint64Field(v20, self->_timestampC2Start, 202LL);
  uint64_t v14 = self->_has;
  if ((*(_BYTE *)&v14 & 0x40) == 0)
  {
LABEL_34:
    if ((*(_WORD *)&v14 & 0x200) == 0) {
      goto LABEL_35;
    }
    goto LABEL_73;
  }

  void v4[2] = self->_networkResponseBodyBytesReceived;
  *((_DWORD *)v4 + 70) |= 2u;
  if ((*(_DWORD *)&self->_has & 0x40000) != 0)
  {
LABEL_24:
    *((_DWORD *)v4 + 46) = self->_networkPreviousAttemptCount;
    *((_DWORD *)v4 + 70) |= 0x40000u;
  }

  id v66 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](self, "account"));
  id v67 = objc_msgSend(v66, "circle_rings_retirements_need_attention");

  if (v67)
  {
    id v68 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](self, "account"));
    objc_msgSend(v68, "setCircle_rings_retirements_need_attention:", 0);

    id v69 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](self, "account"));
    [v69 triggerRingUpdate];

    id v28 = 1;
  }

  id v70 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](self, "account"));
  id v71 = objc_msgSend(v70, "need_backup_peers_created_after_backup_key_set");

  if (v71)
  {
    __int128 v72 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](self, "account"));
    objc_msgSend(v72, "setNeed_backup_peers_created_after_backup_key_set:", 0);

    id v28 = 1;
  }

  __int128 v73 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](self, "account"));
  if ([v73 peerInfo])
  {
    __int128 v74 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](self, "account"));
    __int128 v75 = (const void *)SOSPeerInfoCopyEnabledViews([v74 peerInfo]);
  }

  else
  {
    __int128 v75 = 0LL;
  }

  __int128 v76 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction initialViews](self, "initialViews"));
  id v77 = v76;
  if (v76) {
    unsigned int v78 = [v76 isEqual:v75];
  }
  else {
    unsigned int v78 = v75 == 0LL;
  }
  id v79 = v78 ^ 1;

  if (v75) {
    CFRelease(v75);
  }
  if ((v28 | v79) == 1)
  {
    __int128 v80 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](self, "account"));
    sub_1001A0098(v80);
  }

  id v81 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](self, "account"));
  if (objc_msgSend(v81, "key_interests_need_updating"))
  {
    BOOL v82 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](self, "account"));
    id v83 = [v82 consolidateKeyInterest];

    if ((v83 & 1) != 0) {
      goto LABEL_86;
    }
    id v81 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](self, "account"));
    sub_1001B50DC(v81);
  }

LABEL_86:
  id v84 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](self, "account"));
  objc_msgSend(v84, "setEngine_peer_state_needs_repair:", 0);

  id v85 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](self, "account"));
  [v85 flattenToSaveBlock];

  id v86 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](self, "account"));
  id v87 = [v86 isInCircle:0];

  if ((v6 & v87 & v4) == 1)
  {
    unsigned int v88 = self->_account;
    id v89 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccount settings](v88, "settings"));
    id v90 = (void *)objc_claimAutoreleasedReturnValue([v89 objectForKey:@"lastKVSCleanup"]);

    uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v91 timeIntervalSinceDate:v90];
    if (v92 >= 259200.0) {
      sub_100192BC8(v88, 0LL);
    }
  }

  id v93 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](self, "account"));
  __int16 v94 = [v93 peerInfo];

  if (v94) {
    id v95 = (const __CFSet *)SOSPeerInfoCopyEnabledViews(v94);
  }
  else {
    id v95 = 0LL;
  }
  if (!-[SOSAccountTransaction quiet](self, "quiet"))
  {
    v176[0] = _NSConcreteStackBlock;
    v176[1] = 3221225472LL;
    v176[2] = sub_10019F59C;
    v176[3] = &unk_1002920F0;
    v176[4] = self;
    sub_1000130AC(v95, (uint64_t)v176);
  }

  __int16 v96 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction initialKeyParameters](self, "initialKeyParameters"));
  id v97 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](self, "account"));
  uint64_t v98 = objc_claimAutoreleasedReturnValue([v97 accountKeyDerivationParameters]);
  id v99 = (void *)v98;
  if (v96) {
    id v100 = [v96 isEqual:v98];
  }
  else {
    id v100 = v98 == 0;
  }

  uint64_t v175 = v95;
  if (-[SOSAccountTransaction initialTrusted](self, "initialTrusted")
    && ((!-[SOSAccountTransaction initialInCircle](self, "initialInCircle") | v100 | v87 ^ 1) & 1) == 0)
  {
    id v101 = v24;
    id v103 = v100;
    unsigned int v104 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](self, "account"));
    uint64_t v102 = [v104 accountKeyIsTrusted];

    id v100 = v103;
  }

  else
  {
    id v101 = v24;
    uint64_t v102 = 0;
  }

  if (v87 == -[SOSAccountTransaction initialInCircle](self, "initialInCircle"))
  {
    __int128 v108 = v100;
    if (v87)
    {
      unsigned __int8 v109 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction initialViews](self, "initialViews"));
      if (v109)
      {
        unsigned __int8 v110 = v109;
        id v111 = [v109 isEqual:v175];

        if ((v111 & 1) != 0) {
          goto LABEL_109;
        }
      }

      else if (!v175)
      {
        goto LABEL_109;
      }

      dword_1002DED98 = 0;
      v168 = sub_10001267C("secdNotify");
      __int128 v106 = (os_log_s *)objc_claimAutoreleasedReturnValue(v168);
      if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v106,  OS_LOG_TYPE_DEFAULT,  "Notified clients of kSOSCCViewMembershipChangedNotification for viewchange(only)",  (uint8_t *)&buf,  2u);
      }

      __int128 v107 = 1;
      id v100 = v108;
      goto LABEL_114;
    }

void sub_100084A9C(_Unwind_Exception *a1)
{
}

uint64_t sub_100084B70(id *a1)
{
  unsigned int v2 = [a1[4] isCancelled];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a1[5] zoneName]);
  id v4 = sub_1000AA6AC(@"ckksresync", v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);

  if (v2)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "CKKSSynchronizeOperation cancelled, quitting",  buf,  2u);
    }

    uint64_t v6 = 0LL;
  }

  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v31 = [a1[4] restartCount];
      *(_DWORD *)__int128 buf = 67109120;
      unsigned int v38 = v31;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Beginning local resynchronize (attempt %u)",  buf,  8u);
    }

    uint64_t v32 = objc_claimAutoreleasedReturnValue( +[CKOperationGroup CKKSGroupWithName:]( &OBJC_CLASS___CKOperationGroup,  "CKKSGroupWithName:",  @"ckks-resync-local"));
    id v7 = objc_alloc(&OBJC_CLASS___CKKSOutgoingQueueOperation);
    char v8 = (void *)objc_claimAutoreleasedReturnValue([a1[5] operationDependencies]);
    id v9 = -[CKKSOutgoingQueueOperation initWithDependencies:intending:ckErrorState:errorState:]( v7,  "initWithDependencies:intending:ckErrorState:errorState:",  v8,  @"ready",  @"process_outgoing_queue_failed",  @"error");

    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"resync-step%u-outgoing",  5 * [a1[4] restartCount] + 1));
    -[CKKSGroupOperation setName:](v9, "setName:", v10);

    [a1[4] runBeforeGroupFinished:v9];
    id v11 = objc_alloc(&OBJC_CLASS___CKKSIncomingQueueOperation);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([a1[5] operationDependencies]);
    uint64_t v13 = -[CKKSIncomingQueueOperation initWithDependencies:intending:pendingClassAItemsRemainingState:errorState:handleMismatchedViewItems:]( v11,  "initWithDependencies:intending:pendingClassAItemsRemainingState:errorState:handleMismatchedViewItems:",  v12,  @"ready",  @"ready",  @"unhealthy",  0LL);

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"resync-step%u-incoming",  5 * [a1[4] restartCount] + 2));
    -[CKKSIncomingQueueOperation setName:](v13, "setName:", v14);

    -[CKKSResultOperation addSuccessDependency:](v13, "addSuccessDependency:", v9);
    [a1[4] runBeforeGroupFinished:v13];
    id v15 = objc_alloc(&OBJC_CLASS___CKKSReloadAllItemsOperation);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([a1[5] operationDependencies]);
    id v17 = -[CKKSReloadAllItemsOperation initWithOperationDependencies:](v15, "initWithOperationDependencies:", v16);

    id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"resync-step%u-reload",  5 * [a1[4] restartCount] + 3));
    -[CKKSReloadAllItemsOperation setName:](v17, "setName:", v18);

    [a1[4] runBeforeGroupFinished:v17];
    id v19 = objc_alloc(&OBJC_CLASS___CKKSIncomingQueueOperation);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([a1[5] operationDependencies]);
    uint64_t v21 = -[CKKSIncomingQueueOperation initWithDependencies:intending:pendingClassAItemsRemainingState:errorState:handleMismatchedViewItems:]( v19,  "initWithDependencies:intending:pendingClassAItemsRemainingState:errorState:handleMismatchedViewItems:",  v20,  @"ready",  @"ready",  @"unhealthy",  0LL);

    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"resync-step%u-incoming-again",  5 * [a1[4] restartCount] + 4));
    -[CKKSIncomingQueueOperation setName:](v21, "setName:", v22);

    -[CKKSResultOperation addSuccessDependency:](v21, "addSuccessDependency:", v17);
    [a1[4] runBeforeGroupFinished:v21];
    id v23 = objc_alloc(&OBJC_CLASS___CKKSScanLocalItemsOperation);
    id v24 = (void *)objc_claimAutoreleasedReturnValue([a1[5] operationDependencies]);
    unsigned int v25 = -[CKKSScanLocalItemsOperation initWithDependencies:intending:errorState:ckoperationGroup:]( v23,  "initWithDependencies:intending:errorState:ckoperationGroup:",  v24,  @"ready",  @"error",  v32);

    id v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"resync-step%u-scan",  5 * [a1[4] restartCount] + 5));
    -[CKKSScanLocalItemsOperation setName:](v25, "setName:", v26);

    -[CKKSResultOperation addSuccessDependency:](v25, "addSuccessDependency:", v21);
    [a1[4] runBeforeGroupFinished:v25];
    id v27 = objc_alloc_init(&OBJC_CLASS___CKKSResultOperation);
    id v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"resync-step%u-consider-restart",  5 * [a1[4] restartCount] + 6));
    -[CKKSResultOperation setName:](v27, "setName:", v28);

    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472LL;
    v33[2] = sub_100085104;
    v33[3] = &unk_100291A60;
    objc_copyWeak(&v36, a1 + 6);
    id v34 = a1[5];
    unsigned int v29 = v25;
    os_log_type_t v35 = v29;
    -[CKKSResultOperation addExecutionBlock:](v27, "addExecutionBlock:", v33);
    -[CKKSResultOperation addSuccessDependency:](v27, "addSuccessDependency:", v29);
    [a1[4] runBeforeGroupFinished:v27];

    objc_destroyWeak(&v36);
    uint64_t v6 = 1LL;
    id v5 = (os_log_s *)v32;
  }

  return v6;
}

void sub_1000850E4(_Unwind_Exception *a1)
{
}

void sub_100085104(id *a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    id v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] operationDependencies]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 activeManagedViews]);

    id v6 = [v5 countByEnumeratingWithState:&v29 objects:v37 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v30;
      do
      {
        for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v30 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v29 + 1) + 8 * (void)i) zoneID]);
          [v3 addObject:v10];
        }

        id v7 = [v5 countByEnumeratingWithState:&v29 objects:v37 count:16];
      }

      while (v7);
    }

    id v11 = (void *)objc_claimAutoreleasedReturnValue([a1[4] operationDependencies]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 contextID]);
    id v28 = 0LL;
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSSQLDatabaseObject allUUIDsWithContextID:inZones:error:]( &OBJC_CLASS___CKKSIncomingQueueEntry,  "allUUIDsWithContextID:inZones:error:",  v12,  v3,  &v28));
    uint64_t v14 = (os_log_s *)v28;

    if (v14)
    {
      id v15 = (void *)objc_claimAutoreleasedReturnValue([a1[4] zoneName]);
      id v16 = sub_1000AA6AC(@"ckksresync", v15);
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);

      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v36 = v14;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Couldn't fetch IQEs: %@", buf, 0xCu);
      }
    }

    if ([a1[5] recordsFound] || objc_msgSend(v13, "count"))
    {
      if ((int)[WeakRetained restartCount] < 3)
      {
        objc_msgSend(WeakRetained, "setRestartCount:", objc_msgSend(WeakRetained, "restartCount") + 1);
        unsigned int v25 = (void *)objc_claimAutoreleasedReturnValue([a1[4] zoneName]);
        id v26 = sub_1000AA6AC(@"ckksresync", v25);
        id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);

        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "restarting synchronization operation due to new local items",  buf,  2u);
        }

        [WeakRetained groupStart];
      }

      else
      {
        id v18 = (void *)objc_claimAutoreleasedReturnValue([a1[4] zoneName]);
        id v19 = sub_1000AA6AC(@"ckksresync", v18);
        uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);

        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "restarted synchronization too often; Failing",
            buf,
            2u);
        }

        NSErrorUserInfoKey v33 = NSLocalizedDescriptionKey;
        id v34 = @"resynchronization restarted too many times; churn in database?";
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v34,  &v33,  1LL));
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"securityd",  2LL,  v21));
        [WeakRetained setError:v22];
      }
    }
  }

  else
  {
    id v23 = (void *)objc_claimAutoreleasedReturnValue([a1[4] zoneName]);
    id v24 = sub_1000AA6AC(@"ckksresync", v23);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);

    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "received callback for released object",  buf,  2u);
    }
  }
}

uint64_t sub_100085788(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 contextID]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
  id v32 = 0LL;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSSQLDatabaseObject allWithContextID:zoneID:error:]( &OBJC_CLASS___CKKSMirrorEntry,  "allWithContextID:zoneID:error:",  v3,  v4,  &v32));
  id v6 = v32;

  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 zoneName]);
    id v9 = sub_1000AA6AC(@"ckksresync", v8);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);

    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v35 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Couldn't fetch mirror items: %@", buf, 0xCu);
    }

    [*(id *)(a1 + 32) setError:v6];
    uint64_t v11 = 0LL;
  }

  else
  {
    id v26 = 0LL;
    id v27 = v5;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    id v12 = v5;
    id v13 = [v12 countByEnumeratingWithState:&v28 objects:v33 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v29;
      do
      {
        for (uint64_t i = 0LL; i != v14; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v29 != v15) {
            objc_enumerationMutation(v12);
          }
          id v17 = *(void **)(*((void *)&v28 + 1) + 8LL * (void)i);
          id v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "item", v26, v27));
          id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v18 CKRecordWithZoneID:v19]);

          if (v20)
          {
            uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
            [v21 intransactionCKRecordChanged:v20 resync:1];
          }

          else
          {
            uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
            id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 zoneName]);
            id v24 = sub_1000AA6AC(@"ckksresync", v23);
            uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v24);

            if (os_log_type_enabled((os_log_t)v21, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = 138412290;
              id v35 = v17;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v21,  OS_LOG_TYPE_ERROR,  "Couldn't make CKRecord for item: %@",  buf,  0xCu);
            }
          }
        }

        id v14 = [v12 countByEnumeratingWithState:&v28 objects:v33 count:16];
      }

      while (v14);
    }

    uint64_t v11 = 1LL;
    id v6 = v26;
    id v5 = v27;
  }

  return v11;
}

void sub_1000865CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id *location)
{
}

uint64_t sub_100086890(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_1000868A0(uint64_t a1)
{
}

id sub_1000868A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 parsedSecureElementIdentity]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v4;

  [v3 setAttemptedJoin:2];
  return v3;
}

void sub_1000868F8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  id v15 = a2;
  id v16 = a3;
  id v17 = a4;
  id v18 = a5;
  id v19 = a6;
  id v20 = a7;
  id v21 = a8;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v23 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v23 logResultForEvent:@"OctagonEventPrepareIdentity" hardFailure:1 result:v21];

  uint64_t v50 = v18;
  if (v21)
  {
    id v24 = sub_10001267C("SecError");
    unsigned int v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v56 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "octagon: Error preparing identity: %@",  buf,  0xCu);
    }

    [WeakRetained setError:v21];
    id v26 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
    [WeakRetained runBeforeGroupFinished:v26];

    uint64_t v27 = *(void *)(a1 + 32);
    id v28 = (id)objc_claimAutoreleasedReturnValue([WeakRetained error]);
    +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v27,  0LL,  v28);
  }

  else
  {
    __int128 v29 = sub_10001267C("octagon");
    __int128 v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412802;
      id v56 = v15;
      __int16 v57 = 2112;
      id v58 = v16;
      __int16 v59 = 2112;
      id v60 = v17;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Prepared: %@ %@ %@", buf, 0x20u);
    }

    [WeakRetained setPeerID:v15];
    id v49 = v16;
    [WeakRetained setPermanentInfo:v16];
    id v48 = v17;
    [WeakRetained setPermanentInfoSig:v17];
    [WeakRetained setStableInfo:v18];
    id v47 = v19;
    [WeakRetained setStableInfoSig:v19];
    __int128 v31 = sub_10001267C("octagon-ckks");
    id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      NSErrorUserInfoKey v33 = (void *)objc_claimAutoreleasedReturnValue([v20 viewList]);
      *(_DWORD *)__int128 buf = 138412546;
      id v56 = v20;
      __int16 v57 = 2112;
      id v58 = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "New syncing policy: %@ views: %@",  buf,  0x16u);
    }

    id v34 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v35 = (void *)objc_claimAutoreleasedReturnValue([v34 stateHolder]);
    v52[0] = _NSConcreteStackBlock;
    v52[1] = 3221225472LL;
    v52[2] = sub_100086DEC;
    v52[3] = &unk_1002864C0;
    id v53 = v15;
    id v36 = v20;
    id v54 = v36;
    id v51 = 0LL;
    unsigned int v37 = [v35 persistAccountChanges:v52 error:&v51];
    id v28 = v51;

    if (!v37 || v28)
    {
      id v42 = sub_10001267C("octagon");
      int v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v56 = v28;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Couldn't persist metadata: %@", buf, 0xCu);
      }

      [WeakRetained setError:v28];
      id v44 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
      [WeakRetained runBeforeGroupFinished:v44];

      uint64_t v45 = *(void *)(a1 + 32);
      id v46 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
      +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v45,  0LL,  v46);
    }

    else
    {
      unsigned int v38 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      id v39 = (void *)objc_claimAutoreleasedReturnValue([v38 ckks]);
      [v39 setCurrentSyncingPolicy:v36];

      id v40 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
      [WeakRetained setNextState:v40];

      id v41 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
      [WeakRetained runBeforeGroupFinished:v41];

      +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  *(void *)(a1 + 32),  1LL,  0LL);
    }

    id v19 = v47;

    id v17 = v48;
    id v16 = v49;
  }
}

id sub_100086DEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setPeerID:*(void *)(a1 + 32)];
  [v3 setTPSyncingPolicy:*(void *)(a1 + 40)];
  return v3;
}

void sub_100087150( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_1000872B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 stateHolder]);
  id v17 = 0LL;
  [v9 persistAccountChanges:&stru_100284758 error:&v17];
  id v10 = v17;

  if (v10)
  {
    id v11 = v10;
  }

  else
  {
    if (!v6)
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
      [WeakRetained setNextState:v16];

      id v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained accountSettings]);
      id v13 = v12;
      id v14 = v5;
      goto LABEL_6;
    }

    id v11 = v6;
  }

  [WeakRetained setError:v11];
  id v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained accountSettings]);
  id v13 = v12;
  id v14 = 0LL;
LABEL_6:
  [v12 setAccountSettings:v14];

  id v15 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
  [WeakRetained runBeforeGroupFinished:v15];
}

OTAccountMetadataClassC *__cdecl sub_1000873E8(id a1, OTAccountMetadataClassC *a2)
{
  unsigned int v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[OTAccountMetadataClassC peerID](v2, "peerID"));
  -[OTAccountMetadataClassC setOldPeerID:](v2, "setOldPeerID:", v3);

  return v2;
}

void sub_100087588(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = sub_10001267C("octagon");
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = a1[4];
      uint64_t v10 = a1[5];
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v24 = v9;
      __int16 v25 = 2112;
      uint64_t v26 = v10;
      __int16 v27 = 2112;
      id v28 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Unable to fetch account settings for (%@,%@): %@",  buf,  0x20u);
    }

    (*(void (**)(void))(a1[6] + 16LL))();
  }

  else if (v5 && [v5 count])
  {
    id v11 = objc_alloc_init(&OBJC_CLASS___OTAccountSettings);
    id v12 = objc_alloc_init(&OBJC_CLASS___OTWalrus);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"walrus"]);

    if (v13)
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"walrus"]);
      objc_msgSend(v12, "setEnabled:", objc_msgSend(v14, "value"));
    }

    -[OTAccountSettings setWalrus:](v11, "setWalrus:", v12);
    id v15 = objc_alloc_init(&OBJC_CLASS___OTWebAccess);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"webAccess"]);

    if (v16)
    {
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"webAccess"]);
      objc_msgSend(v15, "setEnabled:", objc_msgSend(v17, "value"));
    }

    -[OTAccountSettings setWebAccess:](v11, "setWebAccess:", v15);
    (*(void (**)(void))(a1[6] + 16LL))();
  }

  else
  {
    uint64_t v18 = a1[6];
    NSErrorUserInfoKey v21 = NSLocalizedDescriptionKey;
    uint64_t v22 = @"No account settings have been set";
    id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v22,  &v21,  1LL));
    id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.security.octagon",  53LL,  v19));
    (*(void (**)(uint64_t, void, void *))(v18 + 16))(v18, 0LL, v20);
  }
}

void sub_10008782C(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  if (v7)
  {
    uint64_t v8 = sub_10001267C("octagon");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = a1[4];
      uint64_t v11 = a1[5];
      int v19 = 138412802;
      uint64_t v20 = v10;
      __int16 v21 = 2112;
      uint64_t v22 = v11;
      __int16 v23 = 2112;
      id v24 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Unable to fetch account settings for (%@,%@): %@",  (uint8_t *)&v19,  0x20u);
    }

    (*(void (**)(void))(a1[6] + 16LL))();
  }

  else
  {
    id v12 = objc_alloc_init(&OBJC_CLASS___OTAccountSettings);
    id v13 = objc_alloc_init(&OBJC_CLASS___OTWalrus);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v6 walrus]);
    if (v14)
    {
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v6 walrus]);
      objc_msgSend(v13, "setEnabled:", objc_msgSend(v15, "value"));
    }

    else
    {
      [v13 setEnabled:0];
    }

    -[OTAccountSettings setWalrus:](v12, "setWalrus:", v13);
    id v16 = objc_alloc_init(&OBJC_CLASS___OTWebAccess);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v6 webAccess]);
    if (v17)
    {
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v6 webAccess]);
      objc_msgSend(v16, "setEnabled:", objc_msgSend(v18, "value"));
    }

    else
    {
      [v16 setEnabled:1];
    }

    -[OTAccountSettings setWebAccess:](v12, "setWebAccess:", v16);
    (*(void (**)(void))(a1[6] + 16LL))();
  }
}

void sub_100087B88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10008808C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_10008809C(uint64_t a1)
{
}

void sub_1000880A4(uint64_t a1)
{
  v30[0] = kSecClass;
  v30[1] = kSecAttrAccessible;
  v31[0] = kSecClassInternetPassword;
  v31[1] = kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
  v30[2] = kSecUseDataProtectionKeychain;
  void v30[3] = kSecAttrAccessGroup;
  v31[2] = &__kCFBooleanTrue;
  v31[3] = @"com.apple.security.octagon";
  v30[4] = kSecAttrDescription;
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Octagon Account State (%@,%@)",  *(void *)(a1 + 32),  *(void *)(a1 + 40)));
  v31[4] = v2;
  v30[5] = kSecAttrServer;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"octagon-%@",  *(void *)(a1 + 32)));
  v31[5] = v3;
  v30[6] = kSecAttrAccount;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"octagon-%@",  *(void *)(a1 + 32)));
  v31[6] = v4;
  v30[7] = kSecAttrPath;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"octagon-%@",  *(void *)(a1 + 40)));
  v31[7] = v5;
  v31[8] = &__kCFBooleanTrue;
  v30[8] = kSecAttrIsInvisible;
  v30[9] = kSecValueData;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) data]);
  v31[9] = v6;
  v31[10] = &__kCFBooleanFalse;
  v30[10] = kSecAttrSynchronizable;
  v30[11] = kSecAttrSysBound;
  v31[11] = &off_1002AD338;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v31,  v30,  12LL));
  uint64_t v8 = (const __CFDictionary *)[v7 mutableCopy];

  CFTypeRef result = 0LL;
  uint64_t v9 = SecItemAdd(v8, &result);
  if ((_DWORD)v9)
  {
    if ((_DWORD)v9 == -25299)
    {
      uint64_t v10 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary objectForKeyedSubscript:](v8, "objectForKeyedSubscript:", kSecClass));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v11, kSecClass);

      id v12 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary objectForKeyedSubscript:](v8, "objectForKeyedSubscript:", kSecAttrSynchronizable));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v12,  kSecAttrSynchronizable);

      id v13 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary objectForKeyedSubscript:](v8, "objectForKeyedSubscript:", kSecAttrSyncViewHint));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v13,  kSecAttrSyncViewHint);

      id v14 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary objectForKeyedSubscript:](v8, "objectForKeyedSubscript:", kSecAttrAccessGroup));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v14, kSecAttrAccessGroup);

      id v15 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary objectForKeyedSubscript:](v8, "objectForKeyedSubscript:", kSecAttrAccount));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v15, kSecAttrAccount);

      id v16 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary objectForKeyedSubscript:](v8, "objectForKeyedSubscript:", kSecAttrServer));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v16, kSecAttrServer);

      id v17 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary objectForKeyedSubscript:](v8, "objectForKeyedSubscript:", kSecAttrPath));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v17, kSecAttrPath);

      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( -[__CFDictionary objectForKeyedSubscript:]( v8,  "objectForKeyedSubscript:",  kSecUseDataProtectionKeychain));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v18,  kSecUseDataProtectionKeychain);

      id v19 = -[__CFDictionary mutableCopy](v8, "mutableCopy");
      [v19 setObject:0 forKeyedSubscript:kSecClass];
      uint64_t v20 = SecItemUpdate((CFDictionaryRef)v10, (CFDictionaryRef)v19);
      if ((_DWORD)v20)
      {
        uint64_t v21 = (int)v20;
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"SecItemUpdate: %d",  v20));
        uint64_t v23 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:",  NSOSStatusErrorDomain,  v21,  v22));
        uint64_t v24 = *(void *)(*(void *)(a1 + 56) + 8LL);
        __int16 v25 = *(void **)(v24 + 40);
        *(void *)(v24 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v23;
      }
    }

    else
    {
      uint64_t v26 = (int)v9;
      uint64_t v10 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"SecItemUpdate: %d",  v9));
      uint64_t v27 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:",  NSOSStatusErrorDomain,  v26,  v10));
      uint64_t v28 = *(void *)(*(void *)(a1 + 56) + 8LL);
      id v19 = *(id *)(v28 + 40);
      *(void *)(v28 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v27;
    }
  }
}

void sub_10008877C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_100088940( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100088964(void *a1)
{
  v49[0] = kSecClass;
  v49[1] = kSecUseDataProtectionKeychain;
  v50[0] = kSecClassInternetPassword;
  v50[1] = &__kCFBooleanTrue;
  v50[2] = @"com.apple.security.octagon";
  v49[2] = kSecAttrAccessGroup;
  v49[3] = kSecAttrServer;
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"octagon-%@", a1[4]));
  v50[3] = v2;
  v49[4] = kSecAttrAccount;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"octagon-%@", a1[4]));
  v50[4] = v3;
  v49[5] = kSecAttrPath;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"octagon-%@", a1[5]));
  v50[5] = v4;
  v50[6] = &__kCFBooleanFalse;
  v49[6] = kSecAttrSynchronizable;
  v49[7] = kSecReturnAttributes;
  v49[8] = kSecReturnData;
  v50[7] = &__kCFBooleanTrue;
  v50[8] = &__kCFBooleanTrue;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v50,  v49,  9LL));
  id v6 = (const __CFDictionary *)[v5 mutableCopy];

  CFTypeRef result = 0LL;
  uint64_t v7 = SecItemCopyMatching(v6, &result);
  uint64_t v8 = (void *)result;
  if ((_DWORD)v7)
  {
    uint64_t v9 = v7;
    if (result)
    {
      CFTypeRef result = 0LL;
      CFRelease(v8);
    }

    uint64_t v10 = (int)v9;
    NSErrorUserInfoKey v47 = NSLocalizedDescriptionKey;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"SecItemCopyMatching: %d",  v9));
    id v48 = v8;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v48,  &v47,  1LL));
    uint64_t v12 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v10,  v11));
    uint64_t v13 = *(void *)(a1[8] + 8LL);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v12;

    goto LABEL_14;
  }

  uint64_t v15 = objc_alloc(&OBJC_CLASS___OTAccountMetadataClassC);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:kSecValueData]);
  uint64_t v17 = -[OTAccountMetadataClassC initWithData:](v15, "initWithData:", v16);
  uint64_t v18 = *(void *)(a1[9] + 8LL);
  id v19 = *(void **)(v18 + 40);
  *(void *)(v18 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v17;

  if (!*(void *)(*(void *)(a1[9] + 8LL) + 40LL))
  {
    uint64_t v31 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:",  @"com.apple.security.octagon",  10LL,  @"couldn't deserialize account state"));
    uint64_t v32 = *(void *)(a1[8] + 8LL);
    NSErrorUserInfoKey v33 = *(void **)(v32 + 40);
    *(void *)(v32 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v31;

    uint64_t v34 = a1[4];
    uint64_t v35 = a1[5];
    uint64_t v36 = a1[6];
    uint64_t v37 = a1[7];
    id v43 = 0LL;
    unsigned int v38 = +[OTAccountMetadataClassC deleteFromKeychainForContainer:contextID:personaAdapter:personaUniqueString:error:]( &OBJC_CLASS___OTAccountMetadataClassC,  "deleteFromKeychainForContainer:contextID:personaAdapter:personaUniqueString:error:",  v34,  v35,  v36,  v37,  &v43);
    id v39 = v43;
    uint64_t v11 = v39;
    if (!v38 || v39)
    {
      id v40 = sub_10001267C("octagon");
      id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v46 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "failed to reset account metadata in keychain, %@",  buf,  0xCu);
      }
    }

    goto LABEL_14;
  }

  uint64_t v20 = objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:kSecAttrSysBound]);
  if (!v20
    || (uint64_t v21 = (void *)v20,
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:kSecAttrAccessible]),
        unsigned __int8 v23 = [v22 isEqualToString:kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly],
        v22,
        v21,
        (v23 & 1) == 0))
  {
    uint64_t v24 = *(void **)(*(void *)(a1[9] + 8LL) + 40LL);
    uint64_t v25 = a1[4];
    uint64_t v26 = a1[5];
    uint64_t v27 = a1[6];
    uint64_t v28 = a1[7];
    uint64_t v29 = *(void *)(a1[8] + 8LL);
    id v42 = *(id *)(v29 + 40);
    [v24 saveToKeychainForContainer:v25 contextID:v26 personaAdapter:v27 personaUniqueString:v28 error:&v42];
    id v30 = v42;
    uint64_t v11 = *(void **)(v29 + 40);
    *(void *)(v29 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v30;
LABEL_14:
  }
}

void sub_100088DB0(void *a1)
{
  v8[0] = kSecClassInternetPassword;
  v8[1] = &__kCFBooleanTrue;
  v8[2] = @"com.apple.security.octagon";
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"octagon-%@",  a1[4],  kSecClass,  kSecUseDataProtectionKeychain,  kSecAttrAccessGroup,  kSecAttrServer));
  v8[3] = v2;
  void v7[4] = kSecAttrAccount;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"octagon-%@", a1[4]));
  void v8[4] = v3;
  void v7[5] = kSecAttrPath;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"octagon-%@", a1[5]));
  v7[6] = kSecAttrSynchronizable;
  v8[5] = v4;
  void v8[6] = &__kCFBooleanFalse;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v8,  v7,  7LL));
  id v6 = (const __CFDictionary *)[v5 mutableCopy];

  *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL) = SecItemDelete(v6);
}

OTAccountMetadataClassC *__cdecl sub_10008B900(id a1, OTAccountMetadataClassC *a2)
{
  unsigned int v2 = a2;
  -[OTAccountMetadataClassC setCdpState:](v2, "setCdpState:", 2LL);
  return v2;
}

LABEL_67:
      PBReaderRecallMark(a3, &v36);
LABEL_87:
      if (*(void *)((char *)a3 + OBJC_IVAR___PBDataReader__pos) >= *(void *)((char *)a3
                                                                                + OBJC_IVAR___PBDataReader__length))
        goto LABEL_88;
    }

    switch((int)v13)
    {
      case 1:
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = 0LL;
        *(_BYTE *)&self->_has |= 8u;
        while (2)
        {
          uint64_t v17 = *(void *)((char *)a3 + OBJC_IVAR___PBDataReader__pos);
          if (v17 == -1LL || v17 >= *(void *)((char *)a3 + OBJC_IVAR___PBDataReader__length))
          {
            *((_BYTE *)a3 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            uint64_t v18 = *(_BYTE *)(*(void *)((char *)a3 + OBJC_IVAR___PBDataReader__bytes) + v17);
            *(void *)((char *)a3 + OBJC_IVAR___PBDataReader__pos) = v17 + 1;
            v16 |= (unint64_t)(v18 & 0x7F) << v14;
            if (v18 < 0)
            {
              v14 += 7;
              uint64_t v10 = v15++ >= 9;
              if (v10)
              {
                LODWORD(v16) = 0;
                goto LABEL_73;
              }

              continue;
            }
          }

          break;
        }

        if (*((_BYTE *)a3 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v16) = 0;
        }
LABEL_73:
        self->_metricType = v16;
        goto LABEL_87;
      case 2:
        uint64_t v24 = objc_alloc_init(&OBJC_CLASS___SECC2MPDeviceInfo);
        objc_storeStrong((id *)&self->_deviceInfo, v24);
        uint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
        uint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
        goto LABEL_67;
      case 3:
        uint64_t v24 = objc_alloc_init(&OBJC_CLASS___SECC2MPCloudKitInfo);
        objc_storeStrong((id *)&self->_cloudkitInfo, v24);
        uint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
        uint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
        goto LABEL_67;
      case 4:
        uint64_t v24 = objc_alloc_init(&OBJC_CLASS___SECC2MPServerInfo);
        objc_storeStrong((id *)&self->_serverInfo, v24);
        uint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
        uint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
        goto LABEL_67;
      default:
        if ((_DWORD)v13 != 100) {
          goto LABEL_68;
        }
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v21 = 0LL;
        *(_BYTE *)&self->_has |= 4u;
        break;
    }

    while (1)
    {
      uint64_t v27 = *(void *)((char *)a3 + OBJC_IVAR___PBDataReader__pos);
      uint64_t v28 = *(_BYTE *)(*(void *)((char *)a3 + OBJC_IVAR___PBDataReader__bytes) + v27);
      *(void *)((char *)a3 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
      v21 |= (unint64_t)(v28 & 0x7F) << v25;
      if ((v28 & 0x80) == 0) {
        goto LABEL_79;
      }
      v25 += 7;
      uint64_t v10 = v26++ >= 9;
      if (v10)
      {
        uint64_t v21 = 0LL;
        goto LABEL_81;
      }
    }

    *((_BYTE *)a3 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_79:
    if (*((_BYTE *)a3 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v21 = 0LL;
    }
LABEL_81:
    uint64_t v34 = 24LL;
LABEL_86:
    *(void *)&self->PBCodable_opaque[v34] = v21;
    goto LABEL_87;
  }

LABEL_68:
LABEL_69:
}

              goto LABEL_68;
            }

            uint64_t v21 = 0;
            unsigned __int8 v23 = 1;
            uint64_t v22 = 1;
            self = v61;
          }

          if (!a5) {
            goto LABEL_31;
          }
LABEL_30:
          if (v21 == v15) {
            goto LABEL_31;
          }
          id v41 = sub_1000AA6AC(@"handleKeychainEventDbConnection", 0LL);
          id v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 67109376;
            *(_DWORD *)id v69 = v15;
            *(_WORD *)&v69[4] = 1024;
            *(_DWORD *)&v69[6] = v21;
            id v43 = "added's SingleUserKeychainUUID is different from deleted's. added's musr:%d, deleted's musr: %d";
            id v44 = v42;
            uint64_t v45 = 14;
LABEL_66:
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, v43, buf, v45);
            goto LABEL_67;
          }

          goto LABEL_67;
        }

        uint64_t v21 = 0;
      }

      else
      {
        if (qword_1002DEA70 != -1) {
          dispatch_once(&qword_1002DEA70, &stru_100286568);
        }
        uint64_t v21 = [v17 isEqualToData:qword_1002DEA78];
      }

      unsigned __int8 v23 = 0;
      uint64_t v20 = 0LL;
      uint64_t v22 = v13 != 0LL;
      if (a5) {
        goto LABEL_30;
      }
    }

    else
    {
      uint64_t v20 = 0LL;
      unsigned __int8 v23 = 0;
      uint64_t v22 = v13 != 0LL;
    }

      id v87 = (void *)objc_claimAutoreleasedReturnValue([v65 zoneID]);
      unsigned int v88 = (void *)objc_claimAutoreleasedReturnValue([v87 zoneName]);
      id v89 = sub_1000AA6AC(@"ckkskey", v88);
      id v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);

      if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue([v65 zoneID]);
        *(_DWORD *)__int128 buf = 138412290;
        unsigned int v125 = v91;
        _os_log_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_DEFAULT,  "No existing key hierarchy for %@. Check if there's one in CloudKit...",  buf,  0xCu);
      }

      __int128 v63 = 1LL;
LABEL_70:
    }

    __int128 v62 = [v102 countByEnumeratingWithState:&v105 objects:v122 count:16];
  }

  while (v62);
LABEL_74:

  if (((v63 | v101) & 1) != 0)
  {
    uint64_t v45 = 0LL;
    uint64_t v15 = v100;
    __int16 v92 = v99;
    if ((v101 & 1) != 0)
    {
      id v93 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v104 + 32) operationDependencies]);
      __int16 v94 = (void *)objc_claimAutoreleasedReturnValue([v93 currentFetchReasons]);
      [v94 addObject:@"more-coming"];
    }

    if ((v63 & 1) != 0)
    {
      id v95 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v104 + 32) operationDependencies]);
      __int16 v96 = (void *)objc_claimAutoreleasedReturnValue([v95 currentFetchReasons]);
      [v96 addObject:@"periodic"];
    }

    id v97 = off_1002904B0;
  }

  else
  {
    id v97 = &off_1002904B8;
    uint64_t v45 = 0LL;
    uint64_t v15 = v100;
    __int16 v92 = v99;
  }

  [*(id *)(v104 + 40) setNextState:*v97];

LABEL_82:
LABEL_83:

  return 1LL;
}

  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_networkResponseHeaderSize));
  [v3 setObject:v35 forKey:@"network_response_header_size"];

  uint64_t v13 = self->_has;
  if ((*(_BYTE *)&v13 & 2) == 0)
  {
LABEL_23:
    if ((*(_DWORD *)&v13 & 0x40000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

  PBDataWriterWriteUint32Field(v20, self->_networkResponseHeaderSize, 110LL);
  uint64_t v11 = self->_has;
  if ((*(_BYTE *)&v11 & 2) == 0)
  {
LABEL_23:
    if ((*(_DWORD *)&v11 & 0x40000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

  *((_DWORD *)v4 + 56) = self->_networkResponseHeaderSize;
  *((_DWORD *)v4 + 70) |= 0x100000u;
  id v6 = self->_has;
  if ((*(_BYTE *)&v6 & 2) == 0)
  {
LABEL_23:
    if ((*(_DWORD *)&v6 & 0x40000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

void sub_10008D1B0(id a1)
{
  uint64_t v1 = objc_autoreleasePoolPush();
  unsigned int v2 = objc_opt_new(&OBJC_CLASS___CKKSControlServer);
  id v3 = (void *)qword_1002DE908;
  qword_1002DE908 = (uint64_t)v2;

  uint64_t v4 = -[NSXPCListener initWithMachServiceName:]( objc_alloc(&OBJC_CLASS___NSXPCListener),  "initWithMachServiceName:",  @"com.apple.securityd.ckks");
  id v5 = (void *)qword_1002DE910;
  qword_1002DE910 = (uint64_t)v4;

  [(id)qword_1002DE910 setDelegate:qword_1002DE908];
  [(id)qword_1002DE910 resume];
  objc_autoreleasePoolPop(v1);
}

void sub_10008D80C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, id location)
{
}

uint64_t sub_10008D8F0(uint64_t a1)
{
  unsigned int v2 = (id *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 accountStateTracker]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*v2 deps]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 lockStateTracker]);
  id v51 = 0LL;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSDeviceStateEntry intransactionCreateDeviceStateForView:accountTracker:lockStateTracker:error:]( &OBJC_CLASS___CKKSDeviceStateEntry,  "intransactionCreateDeviceStateForView:accountTracker:lockStateTracker:error:",  v3,  v5,  v7,  &v51));
  id v9 = v51;

  if (v9 || !v8)
  {
    unsigned __int8 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 zoneName]);
    id v25 = sub_1000AA6AC(@"ckksdevice", v24);
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);

    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v56 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "Error creating device state entry; quitting: %@",
        buf,
        0xCu);
    }

    [*(id *)(a1 + 40) setError:v9];
    goto LABEL_15;
  }

  if ([*(id *)(a1 + 40) rateLimit])
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 storedCKRecord]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 modificationDate]);

    id v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    uint64_t v12 = objc_alloc_init(&OBJC_CLASS___NSDateComponents);
    else {
      uint64_t v14 = -72LL;
    }
    -[NSDateComponents setHour:](v12, "setHour:", v14);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar"));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 dateByAddingComponents:v12 toDate:v46 options:0]);

    if (v11 && [v11 compare:v16] != (id)-1)
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 zoneName]);
      id v19 = sub_1000AA6AC(@"ckksdevice", v18);
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);

      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v56 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Last update is within 3 days (%@); rate-limiting this operation",
          buf,
          0xCu);
      }

      NSErrorUserInfoKey v53 = NSLocalizedDescriptionKey;
      id v54 = @"Rate-limited the CKKSUpdateDeviceStateOperation";
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v54,  &v53,  1LL));
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"CKKSErrorDomain",  60LL,  v21));
      [*(id *)(a1 + 40) setError:v22];

LABEL_15:
      uint64_t v27 = 0LL;
      goto LABEL_22;
    }

    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 zoneName]);
    id v30 = sub_1000AA6AC(@"ckksdevice", v29);
    uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);

    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412546;
      id v56 = v11;
      __int16 v57 = 2112;
      id v58 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Not rate-limiting: last updated %@ vs %@",  buf,  0x16u);
    }
  }

  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
  NSErrorUserInfoKey v33 = (void *)objc_claimAutoreleasedReturnValue([v32 zoneName]);
  id v34 = sub_1000AA6AC(@"ckksdevice", v33);
  uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);

  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v56 = v8;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Saving new device state %@", buf, 0xCu);
  }

  uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
  uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v8 CKRecordWithZoneID:v36]);
  id v52 = v37;
  unsigned int v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v52, 1LL));

  id v39 = objc_alloc_init(&OBJC_CLASS___NSBlockOperation);
  -[NSBlockOperation setName:](v39, "setName:", @"updateDeviceState-modifyRecordsComplete");
  [*(id *)(a1 + 40) dependOnBeforeGroupFinished:v39];
  id v40 = -[CKModifyRecordsOperation initWithRecordsToSave:recordIDsToDelete:]( objc_alloc(&OBJC_CLASS___CKModifyRecordsOperation),  "initWithRecordsToSave:recordIDsToDelete:",  v38,  0LL);
  -[CKModifyRecordsOperation setAtomic:](v40, "setAtomic:", 1LL);
  -[CKModifyRecordsOperation setQualityOfService:](v40, "setQualityOfService:", 17LL);
  -[CKModifyRecordsOperation setSavePolicy:](v40, "setSavePolicy:", 2LL);
  id v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) group]);
  -[CKModifyRecordsOperation setGroup:](v40, "setGroup:", v41);

  v50[0] = _NSConcreteStackBlock;
  v50[1] = 3221225472LL;
  v50[2] = sub_10008DF80;
  v50[3] = &unk_100290EB8;
  v50[4] = *(void *)(a1 + 32);
  -[CKModifyRecordsOperation setPerRecordSaveBlock:](v40, "setPerRecordSaveBlock:", v50);
  v47[0] = _NSConcreteStackBlock;
  v47[1] = 3221225472LL;
  v47[2] = sub_10008E104;
  v47[3] = &unk_100284838;
  objc_copyWeak(&v49, (id *)(a1 + 56));
  v47[4] = *(void *)(a1 + 32);
  id v42 = v39;
  id v48 = v42;
  -[CKModifyRecordsOperation setModifyRecordsCompletionBlock:](v40, "setModifyRecordsCompletionBlock:", v47);
  -[CKModifyRecordsOperation linearDependencies:](v40, "linearDependencies:", *(void *)(a1 + 48));
  [*(id *)(a1 + 40) dependOnBeforeGroupFinished:v40];
  id v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
  id v44 = (void *)objc_claimAutoreleasedReturnValue([v43 ckdatabase]);
  [v44 addOperation:v40];

  objc_destroyWeak(&v49);
  uint64_t v27 = 1LL;
LABEL_22:

  return v27;
}

void sub_10008DF60(_Unwind_Exception *a1)
{
}

void sub_10008DF80(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneName]);
  id v12 = sub_1000AA6AC(@"ckksdevice", v11);
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);

  if (v9)
  {
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v15 = 138412546;
      id v16 = v9;
      __int16 v17 = 2112;
      id v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "error on row: %@ %@", (uint8_t *)&v15, 0x16u);
    }
  }

  else if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v7 recordName]);
    int v15 = 138412546;
    id v16 = v14;
    __int16 v17 = 2112;
    id v18 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Device state record upload successful for %@: %@",  (uint8_t *)&v15,  0x16u);
  }
}

void sub_10008E104(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v11 = WeakRetained;
  if (v9)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 zoneName]);
    id v14 = sub_1000AA6AC(@"ckksdevice", v13);
    int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);

    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "CloudKit returned an error: %@",  (uint8_t *)&buf,  0xCu);
    }

    [v11 setError:v9];
    [v11 runBeforeGroupFinished:*(void *)(a1 + 40)];
  }

  else
  {
    *(void *)&__int128 buf = 0LL;
    *((void *)&buf + 1) = &buf;
    uint64_t v27 = 0x3032000000LL;
    uint64_t v28 = sub_10008E340;
    uint64_t v29 = sub_10008E350;
    id v30 = 0LL;
    id v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 databaseProvider]);
    id v18 = _NSConcreteStackBlock;
    uint64_t v19 = 3221225472LL;
    uint64_t v20 = sub_10008E358;
    uint64_t v21 = &unk_100290230;
    id v22 = v7;
    unsigned __int8 v23 = v11;
    uint64_t v24 = *(void *)(a1 + 32);
    p___int128 buf = &buf;
    [v17 dispatchSyncWithSQLTransaction:&v18];

    objc_msgSend(v11, "setError:", *(void *)(*((void *)&buf + 1) + 40), v18, v19, v20, v21);
    [v11 runBeforeGroupFinished:*(void *)(a1 + 40)];

    _Block_object_dispose(&buf, 8);
  }
}

void sub_10008E320( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10008E340(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_10008E350(uint64_t a1)
{
}

uint64_t sub_10008E358(uint64_t a1)
{
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v24 objects:v32 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v25;
    *(void *)&__int128 v4 = 138412546LL;
    __int128 v22 = v4;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v25 != v6) {
          objc_enumerationMutation(v2);
        }
        id v8 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)i);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "recordType", v22));
        unsigned int v10 = [v9 isEqualToString:@"devicestate"];

        if (v10)
        {
          uint64_t v11 = objc_alloc(&OBJC_CLASS___CKKSDeviceStateEntry);
          id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 contextID]);
          id v14 = -[CKKSCKRecordHolder initWithCKRecord:contextID:](v11, "initWithCKRecord:contextID:", v8, v13);

          uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8LL);
          id obj = *(id *)(v15 + 40);
          -[CKKSSQLDatabaseObject saveToDatabase:](v14, "saveToDatabase:", &obj);
          objc_storeStrong((id *)(v15 + 40), obj);
          if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL))
          {
            id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) zoneID]);
            __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 zoneName]);
            id v18 = sub_1000AA6AC(@"ckksdevice", v17);
            uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);

            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
              *(_DWORD *)__int128 buf = v22;
              uint64_t v29 = v14;
              __int16 v30 = 2112;
              uint64_t v31 = v20;
              _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "Couldn't save new device state(%@) to database: %@",  buf,  0x16u);
            }
          }
        }
      }

      id v5 = [v2 countByEnumeratingWithState:&v24 objects:v32 count:16];
    }

    while (v5);
  }

  return 1LL;
}

void sub_10008F210(_Unwind_Exception *a1)
{
}

void sub_10008F4F0(_Unwind_Exception *a1)
{
}

void sub_10008F8AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_10008FAF4(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) timer]);
  if (v2)
  {
    id v3 = (void *)v2;
    __int128 v4 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) timer]);
    uint64_t v5 = dispatch_source_testcancel(v4);

    if (!v5)
    {
      uint64_t v6 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) timer]);
      dispatch_source_cancel(v6);
    }
  }

void sub_10008FB84(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _onqueueTimerTick];
}

void sub_10008FBB0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setLiveRequest:1];
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained liveRequestReceived]);
  [v1 fulfill];

  [WeakRetained _onqueueTrigger:0 maximumDelay:-1];
}

void sub_10008FC10(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setLiveRequest:1];
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained liveRequestReceived]);
  [v2 fulfill];

  if (*(void *)(a1 + 40) == -1LL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 40);
  }
  objc_msgSend(WeakRetained, "_onqueueTrigger:maximumDelay:", v3);
}

id sub_10008FC78(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueueTrigger:*(void *)(a1 + 40) maximumDelay:-1];
}

id sub_10008FC8C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    double v3 = (double)*(unint64_t *)(a1 + 48) / (double)v2;
  }
  else {
    double v3 = 1.0;
  }
  [*(id *)(a1 + 32) setBackoff:v3];
  return [*(id *)(a1 + 32) setMaximumDelay:*(void *)(a1 + 48)];
}

void sub_100090DF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_100090FB0(uint64_t a1, void *a2)
{
  double v3 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:@"pcsk"]);
  id v4 = (id)objc_claimAutoreleasedReturnValue([v3 asBase64DecodedData]);
}

uint64_t sub_10009101C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_10009102C(uint64_t a1)
{
}

void sub_100091034(uint64_t a1, void *a2)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:@"count(rowid)"]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v6 asNSNumberInteger]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v3;
}

void sub_100091090(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v8 = (id)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"count(rowid)"]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v8 asNSNumberInteger]);
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"ckzone"]);

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 asString]);
  [v5 setObject:v4 forKeyedSubscript:v7];
}

void sub_100091134(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v8 = (id)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"count(rowid)"]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v8 asNSNumberInteger]);
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"parentKeyUUID"]);

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 asString]);
  [v5 setObject:v4 forKeyedSubscript:v7];
}

void sub_1000916D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_100091950(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueueSetFlag:*(void *)(a1 + 40)];
}

uint64_t sub_10009195C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_10009196C(uint64_t a1)
{
}

void sub_100091974(uint64_t a1)
{
  unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) flags]);
  unsigned int v3 = [v2 containsObject:*(void *)(a1 + 40)];

  if (v3)
  {
    id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) flagConditions]);
    uint64_t v4 = objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:*(void *)(a1 + 40)]);
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v4;
  }

void sub_100091D78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_100091EE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100092064(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v8 logResultForEvent:@"OctagonEventSetRecoveryKey" hardFailure:1 result:v6];

  if (v6)
  {
    id v9 = sub_10001267C("SecError");
    unsigned int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 138412290;
      id v21 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "octagon: Error setting recovery key: %@",  (uint8_t *)&v20,  0xCu);
    }

    [WeakRetained setError:v6];
  }

  else
  {
    uint64_t v11 = sub_10001267C("octagon");
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v2syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "successfully set recovery key",  (uint8_t *)&v20,  2u);
    }

    uint64_t v13 = sub_10001267C("octagon-ckks");
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 ckks]);
      int v20 = 138412290;
      id v21 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Providing setRecoveryKey() records to %@",  (uint8_t *)&v20,  0xCu);
    }

    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 ckks]);
    [v18 receiveTLKUploadRecords:v5];
  }

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
  [WeakRetained runBeforeGroupFinished:v19];
}

void sub_10009229C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) viewKeySets]);
  [WeakRetained proceedWithKeys:v2 salt:*(void *)(a1 + 40)];
}

void sub_10009267C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_1000928EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_1000929F0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v11 logResultForEvent:@"OctagonEventCreateCustodianRecoveryKeyTPH" hardFailure:1 result:v9];

  if (v9)
  {
    id v12 = sub_10001267C("SecError");
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v40 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "octagon: Error create custodian recovery key: %@",  buf,  0xCu);
    }

    [WeakRetained setError:v9];
    id v14 = (NSUUID *)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
    [WeakRetained runBeforeGroupFinished:v14];
    goto LABEL_19;
  }

  uint64_t v15 = sub_10001267C("octagon");
  id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "successfully created custodian recovery key",  buf,  2u);
  }

  __int16 v17 = objc_alloc(&OBJC_CLASS___NSUUID);
  id v18 = (void *)objc_claimAutoreleasedReturnValue([v8 uuid]);
  uint64_t v19 = -[NSUUID initWithUUIDString:](v17, "initWithUUIDString:", v18);

  if (!v19)
  {
    uint64_t v31 = sub_10001267C("SecError");
    uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      NSErrorUserInfoKey v33 = (NSUUID *)objc_claimAutoreleasedReturnValue([v8 uuid]);
      *(_DWORD *)__int128 buf = 138412290;
      id v40 = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "octagon: failed to parse UUID from TPH: %@",  buf,  0xCu);
    }

    id v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:",  @"com.apple.security.octagon",  54LL,  @"Failed to parse UUID from TPH"));
    [WeakRetained setError:v34];

    id v14 = (NSUUID *)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
    [WeakRetained runBeforeGroupFinished:v14];
    goto LABEL_18;
  }

  int v20 = objc_alloc(&OBJC_CLASS___OTCustodianRecoveryKey);
  uint64_t v21 = *(void *)(a1 + 32);
  id v38 = 0LL;
  __int128 v22 = -[OTCustodianRecoveryKey initWithUUID:recoveryString:error:]( v20,  "initWithUUID:recoveryString:error:",  v19,  v21,  &v38);
  id v14 = (NSUUID *)v38;
  [WeakRetained setCrk:v22];

  unsigned __int8 v23 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained crk]);
  if (!v23)
  {
    uint64_t v35 = sub_10001267C("SecError");
    uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v40 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "octagon: failed to create crk: %@",  buf,  0xCu);
    }

    [WeakRetained setError:v14];
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
    [WeakRetained runBeforeGroupFinished:v37];

LABEL_18:
    id v14 = v19;
    goto LABEL_19;
  }

  __int128 v24 = sub_10001267C("octagon-ckks");
  __int128 v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    __int128 v27 = (NSUUID *)objc_claimAutoreleasedReturnValue([v26 ckks]);
    *(_DWORD *)__int128 buf = 138412290;
    id v40 = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Providing createCustodianRecoveryKey() records to %@",  buf,  0xCu);
  }

  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 ckks]);
  [v29 receiveTLKUploadRecords:v7];

  __int16 v30 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
  [WeakRetained runBeforeGroupFinished:v30];

LABEL_19:
}

void sub_100092E50(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) viewKeySets]);
  [WeakRetained proceedWithKeys:v2 salt:*(void *)(a1 + 40)];
}

void sub_1000930E0(_Unwind_Exception *a1)
{
}

void sub_1000933B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_1000934B8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v9 logResultForEvent:@"OctagonEventCreateCustodianRecoveryKeyTPH" hardFailure:1 result:v7];

  if (v7)
  {
    unsigned int v10 = sub_10001267C("SecError");
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 138412290;
      id v22 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "octagon: Error create inheritance key: %@",  (uint8_t *)&v21,  0xCu);
    }

    [WeakRetained setError:v7];
  }

  else
  {
    id v12 = sub_10001267C("octagon");
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v21) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "successfully created inheritance key",  (uint8_t *)&v21,  2u);
    }

    id v14 = sub_10001267C("octagon-ckks");
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 ckks]);
      int v21 = 138412290;
      id v22 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Providing createCustodianRecoveryKey() records to %@",  (uint8_t *)&v21,  0xCu);
    }

    id v18 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 ckks]);
    [v19 receiveTLKUploadRecords:v6];
  }

  int v20 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
  [WeakRetained runBeforeGroupFinished:v20];
}

void sub_1000936F0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) viewKeySets]);
  [WeakRetained proceedWithKeys:v2 salt:*(void *)(a1 + 40)];
}

void sub_100093954(_Unwind_Exception *a1)
{
}

void sub_100093AFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_100093BC8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v9 logResultForEvent:@"OctagonEventCreateCustodianRecoveryKeyTPH" hardFailure:1 result:v7];

  if (v7)
  {
    unsigned int v10 = sub_10001267C("SecError");
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 138412290;
      id v22 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "octagon: Error store inheritance key: %@",  (uint8_t *)&v21,  0xCu);
    }

    [WeakRetained setError:v7];
  }

  else
  {
    id v12 = sub_10001267C("octagon");
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v21) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "successfully stored inheritance key",  (uint8_t *)&v21,  2u);
    }

    id v14 = sub_10001267C("octagon-ckks");
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 ckks]);
      int v21 = 138412290;
      id v22 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Providing storeCustodianRecoveryKey() records to %@",  (uint8_t *)&v21,  0xCu);
    }

    id v18 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 ckks]);
    [v19 receiveTLKUploadRecords:v6];
  }

  int v20 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
  [WeakRetained runBeforeGroupFinished:v20];
}

void sub_100093E00(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) viewKeySets]);
  [WeakRetained proceedWithKeys:v2];
}

void sub_1000940B8(_Unwind_Exception *a1)
{
}

void sub_1000943A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_1000944D8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v9 logResultForEvent:@"OctagonEventCreateCustodianRecoveryKeyTPH" hardFailure:1 result:v7];

  if (v7)
  {
    unsigned int v10 = sub_10001267C("SecError");
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 138412290;
      id v22 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "octagon: Error recreatint inheritance key: %@",  (uint8_t *)&v21,  0xCu);
    }

    [WeakRetained setError:v7];
  }

  else
  {
    id v12 = sub_10001267C("octagon");
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v21) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "successfully recreated inheritance key",  (uint8_t *)&v21,  2u);
    }

    id v14 = sub_10001267C("octagon-ckks");
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 ckks]);
      int v21 = 138412290;
      id v22 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Providing createCustodianRecoveryKey() records to %@",  (uint8_t *)&v21,  0xCu);
    }

    id v18 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 ckks]);
    [v19 receiveTLKUploadRecords:v6];
  }

  int v20 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
  [WeakRetained runBeforeGroupFinished:v20];
}

void sub_100094710(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) viewKeySets]);
  [WeakRetained proceedWithKeys:v2 salt:*(void *)(a1 + 40)];
}

void sub_1000949F8(_Unwind_Exception *a1)
{
}

void sub_100094CF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_100094E90(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v9 logResultForEvent:@"OctagonEventCreateCustodianRecoveryKeyTPH" hardFailure:1 result:v7];

  if (v7)
  {
    unsigned int v10 = sub_10001267C("SecError");
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 138412290;
      id v22 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "octagon: Error creating inheritance w/claimtoken+wrappingkey key: %@",  (uint8_t *)&v21,  0xCu);
    }

    [WeakRetained setError:v7];
  }

  else
  {
    id v12 = sub_10001267C("octagon");
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v21) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "successfully created inheritance key w/claimtoken+wrappingkey",  (uint8_t *)&v21,  2u);
    }

    id v14 = sub_10001267C("octagon-ckks");
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 ckks]);
      int v21 = 138412290;
      id v22 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Providing createCustodianRecoveryKey() records to %@",  (uint8_t *)&v21,  0xCu);
    }

    id v18 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 ckks]);
    [v19 receiveTLKUploadRecords:v6];
  }

  int v20 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
  [WeakRetained runBeforeGroupFinished:v20];
}

void sub_1000950C8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) viewKeySets]);
  [WeakRetained proceedWithKeys:v2 salt:*(void *)(a1 + 40)];
}

uint64_t sub_1000979CC(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((int)(v6 >> 3) <= 200)
    {
      if ((_DWORD)v12 == 1)
      {
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0LL;
        *(_BYTE *)(a1 + 44) |= 4u;
        while (1)
        {
          unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v29 == -1LL || v29 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v30 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
          v28 |= (unint64_t)(v30 & 0x7F) << v26;
          if ((v30 & 0x80) == 0) {
            goto LABEL_60;
          }
          v26 += 7;
          BOOL v9 = v27++ >= 9;
          if (v9)
          {
            LODWORD(v2_Block_object_dispose(va, 8) = 0;
            goto LABEL_62;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_60:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v2_Block_object_dispose(va, 8) = 0;
        }
LABEL_62:
        *(_DWORD *)(a1 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v28;
      }

      else
      {
        if ((_DWORD)v12 != 101)
        {
LABEL_48:
          uint64_t result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result) {
            return result;
          }
          continue;
        }

        uint64_t String = PBReaderReadString(a2);
        uint64_t v15 = objc_claimAutoreleasedReturnValue(String);
        id v16 = *(void **)(a1 + 32);
        *(void *)(a1 + 32) = v15;
      }
    }

    else
    {
      if ((_DWORD)v12 == 201)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0LL;
        *(_BYTE *)(a1 + 44) |= 2u;
        while (1)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
          v19 |= (unint64_t)(v21 & 0x7F) << v17;
          if ((v21 & 0x80) == 0) {
            goto LABEL_51;
          }
          v17 += 7;
          BOOL v9 = v18++ >= 9;
          if (v9)
          {
            uint64_t v19 = 0LL;
            goto LABEL_53;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v19 = 0LL;
        }
LABEL_53:
        uint64_t v32 = 16LL;
        goto LABEL_58;
      }

      if ((_DWORD)v12 == 202)
      {
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v19 = 0LL;
        *(_BYTE *)(a1 + 44) |= 1u;
        while (1)
        {
          unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1LL || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v25 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
          v19 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_55;
          }
          v22 += 7;
          BOOL v9 = v23++ >= 9;
          if (v9)
          {
            uint64_t v19 = 0LL;
            goto LABEL_57;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_55:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v19 = 0LL;
        }
LABEL_57:
        uint64_t v32 = 8LL;
LABEL_58:
        *(void *)(a1 + v32) = v19;
        continue;
      }

      if ((_DWORD)v12 != 301) {
        goto LABEL_48;
      }
      uint64_t v13 = objc_alloc_init(&OBJC_CLASS___SECC2MPGenericEventMetric);
      [(id)a1 addMetric:v13];
      v33[0] = 0xAAAAAAAAAAAAAAAALL;
      v33[1] = 0xAAAAAAAAAAAAAAAALL;
      if (!PBReaderPlaceMark(a2, v33) || !sub_10006F3CC((uint64_t)v13, a2))
      {

        return 0LL;
      }

      PBReaderRecallMark(a2, v33);
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_100097F3C()
{
  if (qword_1002DE920 != -1) {
    dispatch_once(&qword_1002DE920, &stru_100284968);
  }
  return (id)qword_1002DE918;
}

void sub_100097F7C(id a1)
{
  v3[0] = @"ready";
  v3[1] = @"error";
  v4[0] = &off_1002AD350;
  v4[1] = &off_1002AD368;
  v3[2] = @"initializing";
  v3[3] = @"initialized";
  void v4[2] = &off_1002AD380;
  v4[3] = &off_1002AD398;
  v3[4] = @"fetchcomplete";
  void v3[5] = @"waitfortlk";
  v4[4] = &off_1002AD3B0;
  v4[5] = &off_1002AD3C8;
  void v3[6] = @"waitforunlock";
  v3[7] = @"unhealthy";
  void v4[6] = &off_1002AD3E0;
  v4[7] = &off_1002AD3F8;
  v3[8] = @"badcurrentpointers";
  v3[9] = @"newtlksfailed";
  v4[8] = &off_1002AD410;
  v4[9] = &off_1002AD428;
  v3[10] = @"needrefetch";
  v3[11] = @"healtlkshares";
  v4[10] = &off_1002AD440;
  v4[11] = &off_1002AD458;
  v3[12] = @"healtlksharesfailed";
  v3[13] = @"readypendingunlock";
  v4[12] = &off_1002AD470;
  v4[13] = &off_1002AD488;
  v3[14] = @"fetching";
  v3[15] = @"resetzone";
  v4[14] = &off_1002AD4A0;
  v4[15] = &off_1002AD4B8;
  uint8_t v3[16] = @"resetlocal";
  v3[17] = @"loggedout";
  uint8_t v4[16] = &off_1002AD4D0;
  v4[17] = &off_1002AD4E8;
  v3[18] = @"zonecreationfailed";
  v3[19] = @"waitfortrust";
  v4[18] = &off_1002AD500;
  v4[19] = &off_1002AD518;
  v3[20] = @"waitfortlkupload";
  v3[21] = @"waitfortlkcreation";
  v4[20] = &off_1002AD530;
  v4[21] = &off_1002AD548;
  v3[22] = @"process_key_hierarchy";
  v3[23] = @"become_ready";
  v4[22] = &off_1002AD560;
  void v4[23] = &off_1002AD578;
  v3[24] = @"lose_trust";
  v3[25] = @"tlkmissing";
  v4[24] = &off_1002AD590;
  v4[25] = &off_1002AD5A8;
  v3[26] = @"wait_for_ck_account_status";
  v3[27] = @"begin_fetch";
  v4[26] = &off_1002AD5C0;
  v4[27] = &off_1002AD5D8;
  v3[28] = @"fixup_fetch_cip";
  v3[29] = @"fixup_fetch_tlkshares";
  v4[28] = &off_1002AD5F0;
  v4[29] = &off_1002AD608;
  v3[30] = @"fixup_local_reload";
  v3[31] = @"fixup_resave_cdse";
  v4[30] = &off_1002AD620;
  v4[31] = &off_1002AD638;
  v3[32] = @"fixup_delete_tombstones";
  v3[33] = @"check_tlk_shares";
  v4[32] = &off_1002AD650;
  v4[33] = &off_1002AD668;
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  34LL));
  uint64_t v2 = (void *)qword_1002DE918;
  qword_1002DE918 = v1;
}

void sub_1000982A4(id a1)
{
  id v1 = sub_100097F3C();
  id v6 = (id)objc_claimAutoreleasedReturnValue(v1);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v6 allKeys]);
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([v6 allValues]);
  uint64_t v4 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:",  v2,  v3));
  unsigned int v5 = (void *)qword_1002DE928;
  qword_1002DE928 = v4;
}

__CFString *sub_10009832C(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    if (qword_1002DE930 != -1) {
      dispatch_once(&qword_1002DE930, &stru_100284988);
    }
    id v2 = (id)qword_1002DE928;
    unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v1]);

    if (v3)
    {
      uint64_t v4 = v3;
    }

    else
    {
      uint64_t v4 = @"error";
      id v6 = @"error";
    }
  }

  else
  {
    uint64_t v4 = @"error";
    unsigned int v5 = @"error";
  }

  return v4;
}

void sub_1000983DC(id a1)
{
  v4[0] = @"loggedout";
  v4[1] = @"resetzone";
  void v4[2] = @"resetlocal";
  v4[3] = @"initializing";
  v4[4] = @"initialized";
  v4[5] = @"zonecreationfailed";
  void v4[6] = @"ready";
  v4[7] = @"fetching";
  v4[8] = @"process_key_hierarchy";
  v4[9] = @"needrefetch";
  v4[10] = @"tlkmissing";
  v4[11] = @"waitfortlk";
  v4[12] = @"waitfortlkcreation";
  v4[13] = @"waitforunlock";
  v4[14] = @"waitfortrust";
  v4[15] = @"unhealthy";
  uint8_t v4[16] = @"newtlksfailed";
  v4[17] = @"error";
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v4, 18LL));
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v1));
  unsigned int v3 = (void *)qword_1002DE938;
  qword_1002DE938 = v2;
}

id sub_100098524()
{
  if (qword_1002DE950 != -1) {
    dispatch_once(&qword_1002DE950, &stru_1002849C8);
  }
  return (id)qword_1002DE948;
}

void sub_100098564(id a1)
{
  v4[0] = @"ready";
  v4[1] = @"waitfortrust";
  void v4[2] = @"waitfortlk";
  v4[3] = @"waitfortlkcreation";
  v4[4] = @"waitforunlock";
  v4[5] = @"error";
  void v4[6] = @"loggedout";
  v4[7] = @"halted";
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v4, 8LL));
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v1));
  unsigned int v3 = (void *)qword_1002DE948;
  qword_1002DE948 = v2;
}

uint64_t sub_100098648(uint64_t a1, uint64_t a2)
{
  if (objc_opt_class(&OBJC_CLASS___CKDatabase, a2)) {
    return byte_1002DE958;
  }
  id v3 = sub_1000AA6AC(@"ckks", 0LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "CloudKit.framework appears to not be linked. Cannot enable CKKS (on pain of crash).",  v5,  2u);
  }

  return 0LL;
}

void sub_1000986D8(id a1)
{
  id v1 = -[NSUserDefaults initWithSuiteName:]( objc_alloc(&OBJC_CLASS___NSUserDefaults),  "initWithSuiteName:",  @"com.apple.security.ckks");
  BOOL v9 = @"reduce-rate-limiting";
  uint64_t v2 = &__kCFBooleanTrue;
  if (!byte_1002DE968) {
    uint64_t v2 = &__kCFBooleanFalse;
  }
  int v10 = v2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v10,  &v9,  1LL));
  -[NSUserDefaults registerDefaults:](v1, "registerDefaults:", v3);

  byte_1002DE968 = -[NSUserDefaults BOOLForKey:](v1, "BOOLForKey:", @"reduce-rate-limiting");
  id v4 = sub_1000AA6AC(@"ratelimit", 0LL);
  unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1002DE968) {
      id v6 = @"on";
    }
    else {
      id v6 = @"off";
    }
    int v7 = 138412290;
    char v8 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "reduce-rate-limiting is %@",  (uint8_t *)&v7,  0xCu);
  }
}

void sub_100098834(id a1)
{
  id v1 = +[OctagonAPSReceiver receiverForNamedDelegatePort:apsConnectionClass:]( &OBJC_CLASS___OctagonAPSReceiver,  "receiverForNamedDelegatePort:apsConnectionClass:",  @"com.apple.securityd.aps",  objc_opt_class(&OBJC_CLASS___APSConnection));
  id v2 = (id)objc_claimAutoreleasedReturnValue(v1);
  [v2 registerForEnvironment:APSEnvironmentProduction];
}

void sub_100098898(id a1, __OpaqueSecDbConnection *a2, unint64_t a3, unint64_t a4, __CFArray *a5)
{
  if (a3)
  {
    if (a4 == 4)
    {
      id v8 = sub_1000AA6AC(@"ckks", 0LL);
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v10[0]) = 0;
        int v7 = "Ignoring kSecDbKCSharingTransaction notification";
        goto LABEL_11;
      }

void sub_1000989B8(uint64_t a1, const void *a2)
{
  id v4 = objc_autoreleasePoolPush();
  CFTypeID v5 = CFGetTypeID(a2);
  if (v5 == CFArrayGetTypeID())
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)a2);
    if (Count == 2)
    {
      unint64_t ValueAtIndex = (unint64_t)CFArrayGetValueAtIndex((CFArrayRef)a2, 0LL);
      unint64_t v8 = (unint64_t)CFArrayGetValueAtIndex((CFArrayRef)a2, 1LL);
    }

    else
    {
      if (Count == 1) {
        unint64_t ValueAtIndex = (unint64_t)CFArrayGetValueAtIndex((CFArrayRef)a2, 0LL);
      }
      else {
        unint64_t ValueAtIndex = 0LL;
      }
      unint64_t v8 = 0LL;
    }
  }

  else
  {
    unint64_t ValueAtIndex = 0LL;
    unint64_t v8 = (unint64_t)a2;
  }

  objc_autoreleasePoolPop(v4);
  if (v8 | ValueAtIndex)
  {
    BOOL v9 = objc_autoreleasePoolPush();
    int v10 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSViewManager manager](&OBJC_CLASS___CKKSViewManager, "manager"));
    [v10 handleKeychainEventDbConnection:*(void *)(a1 + 32) source:*(void *)(a1 + 40) added:v8 deleted:ValueAtIndex];

    objc_autoreleasePoolPop(v9);
  }

  else
  {
    id v11 = sub_1000AA6AC(@"ckks", 0LL);
    unint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = 138412290;
      id v14 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "SecDbEvent gave us garbage: %@",  (uint8_t *)&v13,  0xCu);
    }
  }

uint64_t sub_100098B70(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void sub_100098B84(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100098C2C;
  v6[3] = &unk_1002852A0;
  id v7 = a2;
  id v3 = v7;
  id v4 = objc_retainBlock(v6);
  CFTypeID v5 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSViewManager manager](&OBJC_CLASS___CKKSViewManager, "manager"));
  [v5 registerSyncStatusCallback:a1 callback:v4];
}

uint64_t sub_100098C2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100098C38(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = sub_1000AA6AC(@"reset", 0LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      int v9 = 138412290;
      int v10 = v2;
      id v6 = "Local keychain reset resync finished with an error: %@";
      id v7 = v4;
      uint32_t v8 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v9, v8);
    }
  }

  else if (v5)
  {
    LOWORD(v9) = 0;
    id v6 = "Local keychain reset resync finished successfully";
    id v7 = v4;
    uint32_t v8 = 2;
    goto LABEL_6;
  }
}

void sub_1000994D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, id location)
{
}

void sub_1000995F4(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 rpcProcessIncomingQueue:0 errorOnClassAFailure:0]);
  [v3 dependOnBeforeGroupFinished:v4];
}

void sub_10009964C(id *a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    if ([a1[5] recordsFound])
    {
      if ((int)[WeakRetained restartCount] < 3)
      {
        objc_msgSend(WeakRetained, "setRestartCount:", objc_msgSend(WeakRetained, "restartCount") + 1);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([a1[4] zoneName]);
        id v12 = sub_1000AA6AC(@"ckksresync", v11);
        int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);

        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)id v14 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "restarting synchronization operation due to new local items",  v14,  2u);
        }

        [WeakRetained groupStart];
      }

      else
      {
        id v3 = (void *)objc_claimAutoreleasedReturnValue([a1[4] zoneName]);
        id v4 = sub_1000AA6AC(@"ckksresync", v3);
        BOOL v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);

        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)id v14 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "restarted synchronization too often; Failing",
            v14,
            2u);
        }

        NSErrorUserInfoKey v15 = NSLocalizedDescriptionKey;
        id v16 = @"resynchronization restarted too many times; churn in database?";
        id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v16,  &v15,  1LL));
        id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"securityd",  2LL,  v6));
        [WeakRetained setError:v7];
      }
    }
  }

  else
  {
    uint32_t v8 = (void *)objc_claimAutoreleasedReturnValue([a1[4] zoneName]);
    id v9 = sub_1000AA6AC(@"ckksresync", v8);
    int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);

    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v14 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "received callback for released object",  v14,  2u);
    }
  }
}

id sub_100099D50(uint64_t a1, uint64_t a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100099DD0;
  v6[3] = &unk_100284B28;
  id v3 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v4 = [v3 dispatchSyncWithConnection:a2 readWriteTxion:0 block:v6];

  return v4;
}

uint64_t sub_100099DD0(uint64_t a1)
{
  return 1LL;
}

id sub_100099DF0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) dispatchSyncWithConnection:a2 readWriteTxion:1 block:*(void *)(a1 + 40)];
}

BOOL sub_100099E04(uint64_t a1)
{
  uint64_t v13 = 0LL;
  id v14 = &v13;
  uint64_t v15 = 0x2020000000LL;
  char v16 = 0;
  off_1002DE5B8();
  id v3 = v2;
  _BYTE *v2 = 1;
  if (*(_BYTE *)(a1 + 48))
  {
    off_1002DE5D0();
    _BYTE *v4 = v5;
  }

  id v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100099F40;
  v10[3] = &unk_100284AB0;
  id v12 = &v13;
  id v11 = *(id *)(a1 + 40);
  dispatch_sync(v6, v10);

  if (*(_BYTE *)(a1 + 48))
  {
    off_1002DE5D0();
    _BYTE *v7 = 0;
  }

  _BYTE *v3 = 0;
  BOOL v8 = *((unsigned __int8 *)v14 + 24) == 1;

  _Block_object_dispose(&v13, 8);
  return v8;
}

void sub_100099F28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100099F40(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_10009A1D0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keysets]);

  if (!v2)
  {
    [*(id *)(a1 + 32) setKeysets:*(void *)(a1 + 40)];
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) startDependency]);

    if (v3)
    {
      char v5 = objc_alloc_init(&OBJC_CLASS___NSOperationQueue);
      id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) startDependency]);
      -[NSOperationQueue addOperation:](v5, "addOperation:", v4);

      [*(id *)(a1 + 32) setStartDependency:0];
    }
  }

uint64_t sub_10009AD94(uint64_t a1)
{
  uint64_t result = _CFRuntimeRegisterClass(&unk_100284B68);
  **(void **)(a1 + 32) = result;
  return result;
}

void sub_10009ADC4(void *a1)
{
  id v2 = (const void *)a1[2];
  if (v2) {
    CFRelease(v2);
  }
  id v3 = (const void *)a1[3];
  if (v3) {
    CFRelease(v3);
  }
  id v4 = (const void *)a1[4];
  if (v4) {
    CFRelease(v4);
  }
}

CFStringRef sub_10009AE0C(uint64_t a1, const __CFDictionary *a2)
{
  char v5 = *(const __CFString **)(a1 + 16);
  id v4 = *(const __CFArray **)(a1 + 24);
  if (v5) {
    id v6 = v5;
  }
  else {
    id v6 = @"NonConcrete";
  }
  CFIndex Count = CFArrayGetCount(v4);
  CFIndex v8 = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  return CFStringCreateWithFormat(kCFAllocatorDefault, a2, @"<ChangeTracker %@ children %ld/%ld>", v6, Count, v8);
}

CFStringRef sub_10009AE90(uint64_t a1)
{
  id v2 = (const __CFDictionary *)sub_100012DC4();
  return sub_10009AE0C(a1, v2);
}

LABEL_45:
}

          CFTypeRef cf = 0LL;
          -[OTSOSActualAdapter sosEnabled]_0((uint64_t)v32, v33);
          id v40 = (*(uint64_t (**)(const __CFArray *, CFTypeRef *))(*(void *)(v67 + 16) + 112LL))(v34, &cf);
          if (!v40)
          {
            id v44 = (os_log_s *)sub_10001267C("SecError");
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 v74 = 138412546;
              __int128 v75 = v34;
              __int128 v76 = 2112;
              id v77 = cf;
              _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "change %@ SOSObjectCopyDigest: %@",  v74,  0x16u);
            }

            id v43 = cf;
            if (!cf) {
              continue;
            }
            CFTypeRef cf = 0LL;
            goto LABEL_57;
          }

          id v38 = (const void *)v40;
          id v39 = (const __CFData *)v40;
LABEL_47:
          if (CFDataGetLength(v39) == 20)
          {
            BytePtr = (__int128 *)CFDataGetBytePtr(v39);
            sub_1001A9ECC(v36, BytePtr);
            *((_BYTE *)v36 + 24) = 1;
          }

          else
          {
            id v42 = (os_log_s *)sub_10001267C("SecError");
            if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 v74 = 138412546;
              __int128 v75 = v34;
              __int128 v76 = 2112;
              id v77 = v39;
              _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "change %@ bad length digest: %@",  v74,  0x16u);
            }
          }

          if (!v38) {
            continue;
          }
          id v43 = v38;
LABEL_57:
          CFRelease(v43);
        }
      }

      uint64_t v45 = (const void *)sub_1001AB230((uint64_t)buf, v64);
      if (v45)
      {
        id v46 = (const void *)sub_1001AB230((uint64_t)v69, v64);
        NSErrorUserInfoKey v47 = v46 != 0LL;
      }

      else
      {
        id v46 = 0LL;
        NSErrorUserInfoKey v47 = 0;
      }

      free(v69[0]);
      v69[0] = 0LL;
      v69[1] = 0LL;
      BYTE8(v7syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0;
      *(void *)&id v70 = 0LL;
      free(*(void **)buf);
      id v48 = 0;
      if (v47)
      {
        id v49 = *(void *)(v62 + 16);
        if (v49)
        {
          uint64_t v50 = sub_1001AB278(v49, (uint64_t)v45, (uint64_t)v46, v64);
          if (v50)
          {
            id v51 = v50;
            id v52 = *(const void **)(v62 + 16);
            if (v52) {
              CFRelease(v52);
            }
            *(void *)(v62 + 16) = v51;
          }
        }

        NSErrorUserInfoKey v53 = *(const __CFArray **)(v62 + 32);
        if (v53 && (id v54 = CFArrayGetCount(v53), v54 >= 1))
        {
          id v55 = v54;
          id v56 = 0LL;
          LOBYTE(v4_Block_object_dispose(va, 8) = 1;
          do
          {
            __int16 v57 = (uint64_t (**)(const void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *, const void *, CFTypeRef *))CFArrayGetValueAtIndex(*(CFArrayRef *)(v62 + 32), v56);
            if ((_BYTE)v48) {
              id v48 = v57[2](v57, v62, v67, v8, v66, v65, v45, v46, v64);
            }
            else {
              id v48 = 0;
            }
            ++v56;
          }

          while (v55 != v56);
        }

        else
        {
          id v48 = 1;
        }
      }

      if (v45) {
        CFRelease(v45);
      }
      id v58 = v8;
      char v25 = v65;
      unint64_t v24 = v66;
      if (v46) {
        CFRelease(v46);
      }
    }

    else
    {
      id v48 = 1;
      id v58 = v8;
    }

    uint64_t result = *(void *)(v62 + 24);
    if (result)
    {
      uint64_t result = CFArrayGetCount((CFArrayRef)result);
      if (result >= 1)
      {
        __int16 v59 = result;
        for (uint64_t k = 0LL; k != v59; ++k)
        {
          uint64_t result = (uint64_t)CFArrayGetValueAtIndex(*(CFArrayRef *)(v62 + 24), k);
          if ((_BYTE)v48)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CFArrayRef, CFTypeRef *))(result + 16))( result,  v62,  v67,  v58,  v24,  v25,  theArray,  v64);
            id v48 = result;
          }

          else
          {
            id v48 = 0;
          }
        }
      }
    }

    uint64_t v28 = v48 != 0;
    id v3 = v63;
  }

  else
  {
    uint64_t v28 = 1;
  }

  id v61 = *(void *)(*(void *)(v3 + 32) + 8LL);
  if (!*(_BYTE *)(v61 + 24)) {
    uint64_t v28 = 0;
  }
  *(_BYTE *)(v61 + 24) = v28;
  return result;
}

          if (v75)
          {
            id v97 = 0LL;
            CFRelease(v75);
          }

          id v34 = 0LL;
          goto LABEL_66;
        }

        id v61 = v83;
        if (!v91)
        {
          sub_1000194E0( -26275,  &v97,  @"SecDbKeychainItemV7: failed to decrypt item, Item can't be decrypted due to failed decode der, so drop the item.");
          goto LABEL_49;
        }

        id v89 = 0LL;
        sub_100019634(0LL, &v89, (CFTypeRef *)&v97, (const UInt8 *)v91, (uint64_t)v91 + v90);
        __int128 v62 = v89;
        __int128 v63 = objc_opt_class(&OBJC_CLASS___NSData);
        if ((objc_opt_isKindOfClass(v62, v63) & 1) != 0)
        {
          __int128 v64 = v44;
          __int128 v65 = objc_alloc(&OBJC_CLASS____SFAESKey);
          id v66 = [(id)objc_opt_class(v85) keySpecifier];
          id v67 = (void *)objc_claimAutoreleasedReturnValue(v66);
          id v68 = [v65 initWithData:v62 specifier:v67 error:v83];

          if (v62) {
            CFRelease(v62);
          }
          if (!v25 || (id v69 = sub_100003C4C(*(uint64_t *)buf, (uint64_t)v94, v93), !(_DWORD)v69))
          {
            id v79 = v97;
            char v17 = v86;
            if (v83)
            {
              *id v83 = v97;
              id v97 = 0LL;
            }

            else if (v97)
            {
              id v97 = 0LL;
              CFRelease(v79);
            }

            sub_100003848((uint64_t *)buf);
            free(v94);
            __int16 v94 = 0LL;
            free(v91);
            uint64_t v91 = 0LL;
            sub_100003440(&v92);
            id v68 = v68;
            id v34 = v68;
            goto LABEL_65;
          }

          id v70 = v69;
          id v71 = (const void *)SecAccessControlCopyData(v81);
          sub_10011FEEC(v70, @"odel", 0LL, 0LL, (uint64_t)v71, (const __CFData *)v54, &v97);
          char v17 = v86;
          if (v71) {
            CFRelease(v71);
          }
          sub_100003848((uint64_t *)buf);
          free(v94);
          __int16 v94 = 0LL;
          free(v91);
          uint64_t v91 = 0LL;
          sub_100003440(&v92);
          __int128 v72 = v97;
          if (v83)
          {
            __int128 v73 = v97;
LABEL_55:
            id v34 = 0LL;
            *id v83 = v73;
            id v97 = 0LL;
LABEL_65:

            id v44 = v64;
            goto LABEL_66;
          }

          if (v97)
          {
            id v97 = 0LL;
            CFRelease(v72);
          }
        }

        else
        {
          sub_1000194E0( -26275,  &v97,  @"SecDbKeychainItemV7: failed to decrypt item, Item can't be decrypted due to failed decode der, so drop the item.");
          char v17 = v86;
          if (v62) {
            CFRelease(v62);
          }
          sub_100003848((uint64_t *)buf);
          free(v94);
          __int16 v94 = 0LL;
          free(v91);
          uint64_t v91 = 0LL;
          sub_100003440(&v92);
          unsigned int v78 = v97;
          __int128 v64 = v44;
          if (v83)
          {
            __int128 v73 = v97;
            id v68 = 0LL;
            goto LABEL_55;
          }

          if (v97)
          {
            id v97 = 0LL;
            CFRelease(v78);
          }

          id v68 = 0LL;
        }

        id v34 = 0LL;
        goto LABEL_65;
      }

      sub_100003848((uint64_t *)buf);
      id v34 = 0LL;
    }

  *((_DWORD *)v6 + 56) = self->_networkResponseHeaderSize;
  *((_DWORD *)v6 + 70) |= 0x100000u;
  unint64_t v20 = self->_has;
  if ((*(_BYTE *)&v20 & 2) == 0)
  {
LABEL_11:
    if ((*(_DWORD *)&v20 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  char v25 = 0LL;
  if ((*(_WORD *)&v5 & 0x800) != 0)
  {
LABEL_34:
    unint64_t v24 = 2654435761u * self->_timestampRequestStart;
    if ((*(_WORD *)&v5 & 0x400) != 0) {
      goto LABEL_35;
    }
    goto LABEL_47;
  }

      char v17 = 0LL;
      goto LABEL_44;
    }

    uint64_t v31 = sub_10001267C("resetToOffering");
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Resetting circle to offering since we are new and it doesn't verify with current userKey",  buf,  2u);
    }
  }

  else
  {
    id v14 = sub_10001267C("resetToOffering");
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Resetting circle to offering because it's empty and we're joining",  buf,  2u);
    }
  }

  char v16 = (void *)objc_claimAutoreleasedReturnValue([v6 trust]);
  char v17 = (uint64_t)[v16 resetCircleToOffering:v5 userKey:v9 err:a3];

LABEL_44:
  return v17;
}

void sub_10009B730(_Unwind_Exception *a1)
{
}

void sub_10009B834(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if ([WeakRetained checkFatalError:v5])
  {
    id v7 = sub_10001267C("SecError");
    CFIndex v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
      *(_DWORD *)__int128 buf = 138412546;
      id v30 = v9;
      __int16 v31 = 2112;
      id v32 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "escrowrequest: fatal error for record: %@, dropping: %@",  buf,  0x16u);
    }

    int v10 = *(void **)(a1 + 32);
    id v28 = 0LL;
    [v10 deleteFromKeychain:&v28];
    id v11 = v28;
    if (*(void *)(a1 + 40))
    {
      id v12 = sub_10001267C("SecError");
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v30 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "escrowrequest: unable to delete last escrow time: %@",  buf,  0xCu);
      }
    }

    [WeakRetained setError:v5];
LABEL_20:
    unsigned int v23 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
    [v23 addOperation:*(void *)(a1 + 48)];

    goto LABEL_24;
  }

  if (!v5 && (a2 & 1) != 0)
  {
    [WeakRetained setNumberOfRecordsUploaded:1];
    id v14 = sub_10001267C("SecError");
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      char v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
      *(_DWORD *)__int128 buf = 138412290;
      id v30 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "escrowrequest: prerecord %@ upload succeeded",  buf,  0xCu);
    }

    [*(id *)(a1 + 32) setUploadCompleted:1];
    char v17 = *(void **)(a1 + 32);
    id v27 = 0LL;
    [v17 saveToKeychain:&v27];
    id v11 = v27;
    if (v11)
    {
      unsigned int v18 = sub_10001267C("SecError");
      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v30 = 0LL;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "escrowrequest: unable to save last escrow time: %@",  buf,  0xCu);
      }

      unint64_t v20 = sub_10001267C("SecError");
      char v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        char v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
        *(_DWORD *)__int128 buf = 138412290;
        id v30 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "escrowrequest: unable to save completion of prerecord %@ in keychain",  buf,  0xCu);
      }
    }

    [WeakRetained setNextState:@"nothing_to_do"];
    goto LABEL_20;
  }

  unint64_t v24 = sub_10001267C("SecError");
  char v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    char v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
    *(_DWORD *)__int128 buf = 138412546;
    id v30 = v26;
    __int16 v31 = 2112;
    id v32 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "escrowrequest: prerecord %@ upload failed: %@",  buf,  0x16u);
  }

  [WeakRetained setError:v5];
  id v11 = (id)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
  [v11 addOperation:*(void *)(a1 + 48)];
LABEL_24:
}

uint64_t sub_10009BD08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10009C864( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10009E390(uint64_t a1)
{
  uint64_t v75 = 0LL;
  __int128 v76 = &v75;
  uint64_t v77 = 0x3032000000LL;
  unsigned int v78 = sub_10009F058;
  id v79 = sub_10009F068;
  id v80 = 0LL;
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 contextID]);
  uint64_t v5 = *(void *)(a1 + 48);
  id v74 = 0LL;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSSQLDatabaseObject allUUIDsWithContextID:inZones:error:]( &OBJC_CLASS___CKKSMirrorEntry,  "allUUIDsWithContextID:inZones:error:",  v4,  v5,  &v74));
  id v62 = v74;
  [v2 unionSet:v6];

  if (v62)
  {
    id v7 = sub_1000AA6AC(@"ckksscan", 0LL);
    CFIndex v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v62;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Unable to load CKMirrorEntries: %@",  (uint8_t *)&buf,  0xCu);
    }
  }

  *(void *)&__int128 buf = 0LL;
  *((void *)&buf + 1) = &buf;
  uint64_t v94 = 0x3032000000LL;
  id v95 = sub_10009F058;
  __int16 v96 = sub_10009F068;
  id v97 = (CKKSMemoryKeyCache *)0xAAAAAAAAAAAAAAAALL;
  id v97 = objc_alloc_init(&OBJC_CLASS___CKKSMemoryKeyCache);
  id v9 = objc_alloc(&OBJC_CLASS___AAFAnalyticsEventSecurity);
  int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 activeAccount]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 altDSID]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
  id v14 = [v13 sendMetric];
  __int128 v63 = -[AAFAnalyticsEventSecurity initWithCKKSMetrics:altDSID:eventName:testsAreEnabled:category:sendMetric:]( v9,  "initWithCKKSMetrics:altDSID:eventName:testsAreEnabled:category:sendMetric:",  &__NSDictionary0__struct,  v12,  kSecurityRTCEventNameQuerySyncableItems,  0LL,  kSecurityRTCEventCategoryAccountDataAccessRecovery,  v14);

  uint64_t v15 = &off_1002898F8;
  uint64_t v16 = kSecAttrTombstone;
  char v17 = off_10028BA88;
  do
  {
    if (*((_BYTE *)v15 + 8))
    {
      unsigned int v18 = *v15;
      v91[0] = kSecClass;
      v91[1] = kSecReturnRef;
      v92[0] = v18;
      v92[1] = &__kCFBooleanTrue;
      v92[2] = &__kCFBooleanTrue;
      v91[2] = kSecAttrSynchronizable;
      v91[3] = v16;
      v92[3] = &__kCFBooleanFalse;
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v92,  v91,  4LL));
      id v20 = [v19 mutableCopy];

      char v21 = *(void **)(a1 + 40);
      char v22 = (void *)objc_claimAutoreleasedReturnValue([v21 deps]);
      unsigned int v23 = (void *)objc_claimAutoreleasedReturnValue([v22 views]);
      unint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v21 queryPredicatesForViewMapping:v23]);

      [v20 addEntriesFromDictionary:v24];
      id v25 = sub_1000AA6AC(@"ckksscan", 0LL);
      char v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) name]);
        *(_DWORD *)id v85 = 138412802;
        id v86 = v18;
        __int16 v87 = 2112;
        unsigned int v88 = v27;
        __int16 v89 = 2112;
        id v90 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Scanning all synchronizable %@ items(%@) for: %@",  v85,  0x20u);
      }

      id v28 = *(void **)(a1 + 40);
      unint64_t v29 = (id *)(v76 + 5);
      id obj = (id)v76[5];
      v66[0] = _NSConcreteStackBlock;
      v66[1] = 3221225472LL;
      v66[2] = sub_10009F070;
      v66[3] = &unk_100284D28;
      v66[4] = v28;
      id v30 = v18;
      id v67 = v30;
      id v71 = &v75;
      id v68 = *(id *)(a1 + 56);
      id v69 = *(id *)(a1 + 32);
      p___int128 buf = &buf;
      id v70 = *(id *)(a1 + 64);
      [v28 executeQuery:v20 readWrite:0 error:&obj block:v66];
      objc_storeStrong(v29, obj);
    }

    __int16 v31 = *v17++;
    uint64_t v15 = v31;
  }

  while (v31);
  if (![*(id *)(a1 + 32) count]) {
    goto LABEL_22;
  }
  id v32 = sub_1000AA6AC(@"ckksscan", 0LL);
  NSErrorUserInfoKey v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    id v34 = (__CFString *)[*(id *)(a1 + 32) count];
    *(_DWORD *)id v85 = 134217984;
    id v86 = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "keychain missing %lu items from mirror, proceeding with queue scanning",  v85,  0xCu);
  }

  uint64_t v35 = *(void **)(a1 + 32);
  uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
  uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v36 contextID]);
  uint64_t v38 = *(void *)(a1 + 48);
  id v39 = (id *)(v76 + 5);
  id v65 = (id)v76[5];
  id v40 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSSQLDatabaseObject allUUIDsWithContextID:inZones:error:]( &OBJC_CLASS___CKKSIncomingQueueEntry,  "allUUIDsWithContextID:inZones:error:",  v37,  v38,  &v65));
  objc_storeStrong(v39, v65);
  [v35 minusSet:v40];

  if (v76[5])
  {
    id v41 = sub_1000AA6AC(@"ckksscan", 0LL);
    id v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      id v43 = (__CFString *)v76[5];
      *(_DWORD *)id v85 = 138412290;
      id v86 = v43;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_ERROR,  "unable to inspect incoming queue: %@",  v85,  0xCu);
    }

    [*(id *)(a1 + 40) setError:v76[5]];
    id v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
    +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v63,  0LL,  v44);
    goto LABEL_23;
  }

  uint64_t v45 = *(void **)(a1 + 32);
  id v46 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
  NSErrorUserInfoKey v47 = (void *)objc_claimAutoreleasedReturnValue([v46 contextID]);
  uint64_t v48 = *(void *)(a1 + 48);
  id v49 = (id *)(v76 + 5);
  id v64 = (id)v76[5];
  uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSSQLDatabaseObject allUUIDsWithContextID:inZones:error:]( &OBJC_CLASS___CKKSOutgoingQueueEntry,  "allUUIDsWithContextID:inZones:error:",  v47,  v48,  &v64));
  objc_storeStrong(v49, v64);
  [v45 minusSet:v50];

  if (!v76[5])
  {
LABEL_22:
    id v54 = *(void **)(a1 + 72);
    v83[0] = kSecurityRTCFieldItemsScanned;
    id v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 40) processedItems]));
    v84[0] = v55;
    uint64_t v56 = kSecurityRTCFieldNewItemsScanned;
    v83[1] = kSecurityRTCFieldNewItemsScanned;
    __int16 v57 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( NSNumber,  "numberWithUnsignedLong:",  [*(id *)(a1 + 40) recordsFound]));
    v84[1] = v57;
    id v58 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v84,  v83,  2LL));
    [v54 addMetrics:v58];

    uint64_t v81 = v56;
    __int16 v59 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( NSNumber,  "numberWithUnsignedLong:",  [*(id *)(a1 + 40) recordsFound]));
    BOOL v82 = v59;
    id v60 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v82,  &v81,  1LL));
    -[AAFAnalyticsEventSecurity addMetrics:](v63, "addMetrics:", v60);

    id v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
    id v61 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
    +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v63,  v44 != 0LL,  v61);

    goto LABEL_23;
  }

  id v51 = sub_1000AA6AC(@"ckksscan", 0LL);
  id v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
  if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
  {
    NSErrorUserInfoKey v53 = (__CFString *)v76[5];
    *(_DWORD *)id v85 = 138412290;
    id v86 = v53;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "unable to inspect outgoing queue: %@", v85, 0xCu);
  }

  [*(id *)(a1 + 40) setError:v76[5]];
  id v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v63,  0LL,  v44);
LABEL_23:

  _Block_object_dispose(&buf, 8);
  _Block_object_dispose(&v75, 8);
}

void sub_10009EC68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

uint64_t sub_10009ECB4(uint64_t a1)
{
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  id v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 activeManagedViews]);

  id obj = v2;
  id v3 = [v2 countByEnumeratingWithState:&v42 objects:v48 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v43;
    id v7 = @"ready";
    CFIndex v8 = @"ckksscan";
    *(void *)&__int128 v4 = 138412290LL;
    __int128 v37 = v4;
    uint64_t v38 = *(void *)v43;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v43 != v6) {
          objc_enumerationMutation(obj);
        }
        int v10 = *(void **)(*((void *)&v42 + 1) + 8LL * (void)i);
        id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "viewKeyHierarchyState", v37));
        unsigned __int8 v12 = [v11 isEqualToString:v7];

        if ((v12 & 1) != 0)
        {
          uint64_t v13 = v7;
          id v14 = (void *)objc_claimAutoreleasedReturnValue([v10 launch]);
          [v14 addEvent:@"scan-local-items"];

          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 contextID]);
          char v17 = v8;
          unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneID]);
          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 zoneName]);
          id v20 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSZoneStateEntry contextID:zoneName:]( &OBJC_CLASS___CKKSZoneStateEntry,  "contextID:zoneName:",  v16,  v19));

          CFIndex v8 = v17;
          char v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
          [v20 setLastLocalKeychainScanTime:v21];

          id v41 = 0LL;
          [v20 saveToDatabase:&v41];
          id v22 = v41;
          unsigned int v23 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneID]);
          unint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 zoneName]);
          id v25 = sub_1000AA6AC(v17, v24);
          char v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);

          if (v22)
          {
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = v37;
              id v47 = v22;
              id v27 = v26;
              os_log_type_t v28 = OS_LOG_TYPE_ERROR;
              unint64_t v29 = "Unable to save 'scanned' bit: %@";
              uint32_t v30 = 12;
              goto LABEL_14;
            }
          }

          else if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            id v27 = v26;
            os_log_type_t v28 = OS_LOG_TYPE_DEFAULT;
            unint64_t v29 = "Saved scanned status.";
            uint32_t v30 = 2;
LABEL_14:
            _os_log_impl((void *)&_mh_execute_header, v27, v28, v29, buf, v30);
          }

          id v7 = v13;
          uint64_t v6 = v38;
          goto LABEL_16;
        }

        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneID]);
        id v32 = (void *)objc_claimAutoreleasedReturnValue([v31 zoneName]);
        id v33 = sub_1000AA6AC(v8, v32);
        id v20 = (void *)objc_claimAutoreleasedReturnValue(v33);

        if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v20,  OS_LOG_TYPE_DEFAULT,  "View wasn't ready for scan",  buf,  2u);
        }

uint64_t sub_10009F058(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_10009F068(uint64_t a1)
{
}

void sub_10009F070(uint64_t a1, __CFString *a2)
{
  id v4 = sub_1000AA6AC(@"ckksscan", 0LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138477827;
    id v93 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "scanning item: %{private}@", buf, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "setProcessedItems:", (char *)objc_msgSend(*(id *)(a1 + 32), "processedItems") + 1);
  if (sub_1000E9A9C(a2))
  {
    id v6 = sub_1000AA6AC(@"ckksscan", 0LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 138477827;
      id v93 = a2;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Skipping tombstone %{private}@",  buf,  0xCu);
    }

    goto LABEL_69;
  }

  CFIndex v8 = sub_1000E7EC0(a2, kSecAttrAccessible);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if ((-[os_log_s isEqualToString:](v7, "isEqualToString:", kSecAttrAccessibleWhenUnlocked) & 1) == 0
    && (-[os_log_s isEqualToString:](v7, "isEqualToString:", kSecAttrAccessibleAfterFirstUnlock) & 1) == 0
    && (-[os_log_s isEqualToString:](v7, "isEqualToString:", kSecAttrAccessibleAlwaysPrivate) & 1) == 0)
  {
    id v43 = sub_1000AA6AC(@"ckksscan", 0LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_68;
    }
    *(_DWORD *)__int128 buf = 138412290;
    id v93 = (__CFString *)v7;
    unint64_t v24 = "skipping sync of device-bound(%@) item";
    goto LABEL_40;
  }

  if (qword_1002DEB70 != -1) {
    dispatch_once(&qword_1002DEB70, &stru_10028EFA8);
  }
  if (!byte_1002DEB68 && !sub_1000E9A18(a2))
  {
    id v23 = sub_1000AA6AC(@"ckksscan", 0LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_68;
    }
    *(_DWORD *)__int128 buf = 138477827;
    id v93 = a2;
    unint64_t v24 = "Ignoring syncable keychain item for non-primary account: %{private}@";
LABEL_40:
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v24, buf, 0xCu);
    goto LABEL_68;
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSKey isItemKeyForKeychainView:](&OBJC_CLASS___CKKSKey, "isItemKeyForKeychainView:", a2));

  if (v9)
  {
    id v10 = sub_1000AA6AC(@"ckksscan", 0LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Scanned item is a CKKS internal key, skipping",  buf,  2u);
    }

    goto LABEL_68;
  }

  id v84 = v7;
  unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue([v12 viewNameForItem:a2]);

  __int128 v90 = 0u;
  __int128 v91 = 0u;
  __int128 v88 = 0u;
  __int128 v89 = 0u;
  uint64_t v83 = a1;
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 activeManagedViews]);

  id v15 = [v14 countByEnumeratingWithState:&v88 objects:v96 count:16];
  if (!v15) {
    goto LABEL_24;
  }
  id v16 = v15;
  uint64_t v17 = *(void *)v89;
  while (2)
  {
    for (uint64_t i = 0LL; i != v16; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v89 != v17) {
        objc_enumerationMutation(v14);
      }
      uint64_t v19 = *(void **)(*((void *)&v88 + 1) + 8LL * (void)i);
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 zoneID]);
      char v21 = (void *)objc_claimAutoreleasedReturnValue([v20 zoneName]);
      unsigned __int8 v22 = [v21 isEqualToString:v11];

      if ((v22 & 1) != 0)
      {
        id v25 = v19;

        if (!v25) {
          goto LABEL_36;
        }
        __int16 v87 = 0LL;
        char v26 = sub_1000E705C(a2, (uint64_t)&off_1002905E8, &v87);
        id v27 = (__CFString *)CFRetain(v26);
        id v7 = v84;
        if (!v27
          || (os_log_type_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null")),
              unsigned int v29 = -[__CFString isEqual:](v27, "isEqual:", v28),
              v28,
              v29))
        {
          uint32_t v30 = (void *)objc_claimAutoreleasedReturnValue([v25 zoneID]);
          uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v30 zoneName]);
          id v32 = sub_1000AA6AC(@"ckksscan", v31);
          id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);

          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138478083;
            id v93 = a2;
            __int16 v94 = 2112;
            id v95 = v87;
            _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "making new UUID for item %{private}@: %@",  buf,  0x16u);
          }

          id v34 = sub_1000E6EA4(a2, 1LL, 0LL, &v87);
          id v35 = -[__CFDictionary mutableCopy](v34, "mutableCopy");

          [v35 setObject:*(void *)(v83 + 40) forKeyedSubscript:kSecClass];
          if (SecErrorGetOSStatus(v87))
          {
            uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v25 zoneID]);
            __int128 v37 = (void *)objc_claimAutoreleasedReturnValue([v36 zoneName]);
            id v38 = sub_1000AA6AC(@"ckksscan", v37);
            id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);

            if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = 138412290;
              id v93 = v87;
              _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_ERROR,  "couldn't copy UUID-less item's primary key: %@",  buf,  0xCu);
            }

            uint64_t v40 = *(void *)(*(void *)(v83 + 72) + 8LL);
            id v41 = *(void **)(v40 + 40);
            *(void *)(v40 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v87;

            [*(id *)(v83 + 32) setError:*(void *)(*(void *)(*(void *)(v83 + 72) + 8) + 40)];
          }

          else
          {
            id v62 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v83 + 48) objectForKeyedSubscript:v25]);
            if (!v62)
            {
              id v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
              [*(id *)(v83 + 48) setObject:v62 forKeyedSubscript:v25];
            }

            [v62 addObject:v35];
          }

          goto LABEL_66;
        }

        uint64_t v44 = v83;
        __int128 v45 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v83 + 32) deps]);
        id v46 = (void *)objc_claimAutoreleasedReturnValue([v45 contextID]);
        uint64_t v47 = objc_claimAutoreleasedReturnValue([v25 zoneID]);
        uint64_t v48 = v27;
        id v49 = (void *)v47;
        uint64_t v50 = *(void *)(*(void *)(v83 + 72) + 8LL);
        id obj = *(id *)(v50 + 40);
        id v51 = v48;
        uint64_t v52 = objc_claimAutoreleasedReturnValue( +[CKKSMirrorEntry tryFromDatabase:contextID:zoneID:error:]( &OBJC_CLASS___CKKSMirrorEntry,  "tryFromDatabase:contextID:zoneID:error:"));
        NSErrorUserInfoKey v53 = (id *)(v50 + 40);
        id v54 = (void *)v52;
        objc_storeStrong(v53, obj);

        if (v54)
        {
          id v55 = v54;
          id v27 = v51;
          [*(id *)(v83 + 56) removeObject:v51];
          uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v25 zoneID]);
          __int16 v57 = (void *)objc_claimAutoreleasedReturnValue([v56 zoneName]);
          id v58 = sub_1000AA6AC(@"ckksscan", v57);
          __int16 v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);

          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 138412290;
            id v93 = v51;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEBUG,  "Existing mirror entry with UUID %@",  buf,  0xCu);
          }

          id v60 = *(void **)(v83 + 32);
          id v61 = (void *)objc_claimAutoreleasedReturnValue([v55 item]);
          LOBYTE(v6syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = [v60 areEquivalent:a2 ckksItem:v61 keyCache:*(void *)(*(void *)(*(void *)(v83 + 80) + 8) + 40)];

          if ((v60 & 1) != 0)
          {
            id v35 = v55;
LABEL_66:

            goto LABEL_67;
          }

          uint64_t v44 = v83;
          __int128 v63 = (void *)objc_claimAutoreleasedReturnValue([v25 zoneID]);
          id v64 = (void *)objc_claimAutoreleasedReturnValue([v63 zoneName]);
          id v65 = sub_1000AA6AC(@"ckksscan", v64);
          id v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);

          if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412290;
            id v93 = v51;
            _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "Existing mirror entry with UUID %@ does not match local item",  buf,  0xCu);
          }

          id v54 = v55;
        }

        id v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v44 + 32), "deps", v54));
        uint64_t v68 = v44;
        id v69 = (void *)objc_claimAutoreleasedReturnValue([v67 contextID]);
        id v70 = (void *)objc_claimAutoreleasedReturnValue([v25 zoneID]);
        uint64_t v71 = *(void *)(*(void *)(v68 + 72) + 8LL);
        id v85 = *(id *)(v71 + 40);
        __int128 v72 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSOutgoingQueueEntry tryFromDatabase:contextID:zoneID:error:]( &OBJC_CLASS___CKKSOutgoingQueueEntry,  "tryFromDatabase:contextID:zoneID:error:",  v51,  v69,  v70,  &v85));
        objc_storeStrong((id *)(v71 + 40), v85);

        __int128 v73 = (void *)objc_claimAutoreleasedReturnValue([v25 zoneID]);
        id v74 = (void *)objc_claimAutoreleasedReturnValue([v73 zoneName]);
        id v75 = sub_1000AA6AC(@"ckksscan", v74);
        __int128 v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);

        BOOL v77 = os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT);
        id v27 = v51;
        if (v72)
        {
          if (v77)
          {
            *(_DWORD *)__int128 buf = 138412290;
            id v93 = v51;
            _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEFAULT,  "Existing outgoing queue entry with UUID %@",  buf,  0xCu);
          }

          unsigned int v78 = (void *)objc_claimAutoreleasedReturnValue([v72 state]);
          unsigned int v79 = [v78 isEqualToString:@"new"];

          id v35 = v82;
          if (!v79) {
            goto LABEL_65;
          }
          id v80 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v83 + 32) viewsWithNewCKKSEntries]);
          [v80 addObject:v25];
        }

        else
        {
          if (v77)
          {
            *(_DWORD *)__int128 buf = 138412290;
            id v93 = v51;
            _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEFAULT,  "Item(%@) is new; will attempt to add to CKKS",
              buf,
              0xCu);
          }

          objc_msgSend( *(id *)(v83 + 32),  "setRecordsFound:",  (char *)objc_msgSend(*(id *)(v83 + 32), "recordsFound") + 1);
          id v80 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v83 + 64) objectForKeyedSubscript:v25]);
          if (!v80)
          {
            id v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
            [*(id *)(v83 + 64) setObject:v80 forKeyedSubscript:v25];
          }

          uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue([v80 objectForKeyedSubscript:*(void *)(v83 + 40)]);
          if (!v81)
          {
            uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
            [v80 setObject:v81 forKeyedSubscript:*(void *)(v83 + 40)];
          }

          [v81 addObject:v51];

          id v35 = v82;
        }

LABEL_65:
        goto LABEL_66;
      }
    }

    id v16 = [v14 countByEnumeratingWithState:&v88 objects:v96 count:16];
    if (v16) {
      continue;
    }
    break;
  }

uint64_t sub_10009FB80(uint64_t a1)
{
  id v2 = sub_1000AA6AC(@"ckksscan", 0LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = [*(id *)(a1 + 32) count];
    id v5 = *(void **)(a1 + 32);
    *(_DWORD *)__int128 buf = 134218242;
    id v48 = v4;
    __int16 v49 = 2112;
    id v50 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "BUG: keychain missing %lu items from mirror and/or queues: %@",  buf,  0x16u);
  }

  objc_msgSend(*(id *)(a1 + 40), "setMissingLocalItemsFound:", objc_msgSend(*(id *)(a1 + 32), "count"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 32) count]));
  [v6 logMetric:v7 withName:@"CKKSEventMissingLocalItemsFound"];

  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  id obj = *(id *)(a1 + 32);
  id v35 = [obj countByEnumeratingWithState:&v41 objects:v46 count:16];
  id v9 = 0LL;
  if (v35)
  {
    uint64_t v10 = *(void *)v42;
    p_superclass = &OBJC_CLASS___CKKSProcessReceivedKeysOperation.superclass;
    *(void *)&__int128 v8 = 138412546LL;
    __int128 v31 = v8;
    uint64_t v32 = *(void *)v42;
    do
    {
      unsigned __int8 v12 = 0LL;
      uint64_t v13 = v9;
      do
      {
        if (*(void *)v42 != v10) {
          objc_enumerationMutation(obj);
        }
        id v14 = *(void **)(*((void *)&v41 + 1) + 8LL * (void)v12);
        id v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deps", v31));
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 contextID]);
        id v40 = v13;
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([p_superclass + 94 allWithUUID:v14 contextID:v16 error:&v40]);
        id v9 = v40;

        if (v17) {
          BOOL v18 = v9 == 0LL;
        }
        else {
          BOOL v18 = 0;
        }
        if (v18)
        {
          id v34 = v9;
          __int128 v38 = 0u;
          __int128 v39 = 0u;
          __int128 v36 = 0u;
          __int128 v37 = 0u;
          id v21 = v17;
          id v22 = [v21 countByEnumeratingWithState:&v36 objects:v45 count:16];
          if (v22)
          {
            id v23 = v22;
            uint64_t v24 = *(void *)v37;
            do
            {
              id v25 = 0LL;
              do
              {
                if (*(void *)v37 != v24) {
                  objc_enumerationMutation(v21);
                }
                char v26 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)v25);
                id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deps]);
                os_log_type_t v28 = (void *)objc_claimAutoreleasedReturnValue([v26 item]);
                unsigned int v29 = (void *)objc_claimAutoreleasedReturnValue([v28 storedCKRecord]);
                [v27 intransactionCKRecordChanged:v29 resync:1];

                id v25 = (char *)v25 + 1;
              }

              while (v23 != v25);
              id v23 = [v21 countByEnumeratingWithState:&v36 objects:v45 count:16];
            }

            while (v23);
          }

          uint64_t v10 = v32;
          p_superclass = (__objc2_class **)(&OBJC_CLASS___CKKSProcessReceivedKeysOperation + 8);
          id v9 = v34;
        }

        else
        {
          id v19 = sub_1000AA6AC(@"ckksscan", 0LL);
          id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = v31;
            id v48 = v14;
            __int16 v49 = 2112;
            id v50 = v9;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "BUG: error fetching previously-extant CKME (uuid: %@) from database: %@",  buf,  0x16u);
          }

          [*(id *)(a1 + 40) setError:v9];
        }

        unsigned __int8 v12 = (char *)v12 + 1;
        uint64_t v13 = v9;
      }

      while (v12 != v35);
      id v35 = [obj countByEnumeratingWithState:&v41 objects:v46 count:16];
    }

    while (v35);
  }

  return 1LL;
}

uint64_t sub_10009FF44(id *a1)
{
  uint64_t v35 = 0LL;
  __int128 v36 = &v35;
  uint64_t v37 = 0x3032000000LL;
  __int128 v38 = sub_10009F058;
  __int128 v39 = sub_10009F068;
  id v40 = 0LL;
  v33[0] = 0LL;
  v33[1] = v33;
  void v33[2] = 0x3032000000LL;
  v33[3] = sub_10009F058;
  void v33[4] = sub_10009F068;
  id v34 = (CKKSMemoryKeyCache *)0xAAAAAAAAAAAAAAAALL;
  id v34 = objc_alloc_init(&OBJC_CLASS___CKKSMemoryKeyCache);
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  id obj = a1[4];
  id v2 = [obj countByEnumeratingWithState:&v29 objects:v46 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v30;
    while (2)
    {
      for (uint64_t i = 0LL; i != v2; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v30 != v3) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void *)(*((void *)&v29 + 1) + 8LL * (void)i);
        id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[5] zoneID]);
        id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 zoneName]);
        id v8 = sub_1000AA6AC(@"ckksscan", v7);
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);

        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Found item with no uuid: %@",  (uint8_t *)&buf,  0xCu);
        }

        *(void *)&__int128 buf = 0LL;
        *((void *)&buf + 1) = &buf;
        uint64_t v44 = 0x2020000000LL;
        uint64_t v45 = 0LL;
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472LL;
        void v23[2] = sub_1000A033C;
        void v23[3] = &unk_100284D00;
        void v23[4] = v5;
        p___int128 buf = &buf;
        id v10 = a1[5];
        id v11 = a1[6];
        id v24 = v10;
        id v25 = v11;
        id v27 = &v35;
        os_log_type_t v28 = v33;
        int v12 = sub_100110ECC(1, 1, 0LL, (uint64_t)&v45, (uint64_t)v23);
        if ((v12 & 1) != 0)
        {
          uint64_t v13 = *(const void **)(*((void *)&buf + 1) + 24LL);
          if (v13)
          {
            *(void *)(*((void *)&buf + 1) + 24LL) = 0LL;
            CFRelease(v13);
          }
        }

        else
        {
          id v14 = (void *)objc_claimAutoreleasedReturnValue([a1[5] zoneID]);
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 zoneName]);
          id v16 = sub_1000AA6AC(@"ckksscan", v15);
          uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);

          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            uint64_t v18 = *(void *)(*((void *)&buf + 1) + 24LL);
            *(_DWORD *)__int128 v41 = 138412290;
            uint64_t v42 = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "couldn't execute query: %@", v41, 0xCu);
          }

          id v19 = (void *)v36[5];
          v36[5] = *(void *)(*((void *)&buf + 1) + 24LL);

          [a1[6] setError:v36[5]];
        }

        _Block_object_dispose(&buf, 8);
        if (!v12)
        {
          uint64_t v20 = 0LL;
          goto LABEL_19;
        }
      }

      id v2 = [obj countByEnumeratingWithState:&v29 objects:v46 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }

  uint64_t v20 = 1LL;
LABEL_19:

  _Block_object_dispose(v33, 8);
  _Block_object_dispose(&v35, 8);

  return v20;
}

void sub_1000A02E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
}

uint64_t sub_1000A033C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000F8790( *(const __CFDictionary **)(a1 + 32),  0LL,  -1LL,  0LL,  (__CFString **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL));
  if (v4
    && (v5 = *(void *)(*(void *)(a1 + 56) + 8LL), v7 = *(void *)(v5 + 24), id v6 = (__CFString **)(v5 + 24), !v7))
  {
    uint64_t v15 = v4;
    *(void *)&__int128 buf = 0LL;
    *((void *)&buf + 1) = &buf;
    uint64_t v29 = 0x2020000000LL;
    char v30 = 1;
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    void v21[2] = sub_1000A0560;
    v21[3] = &unk_100284CD8;
    id v22 = *(id *)(a1 + 40);
    __int128 v16 = *(_OWORD *)(a1 + 64);
    __int128 v23 = *(_OWORD *)(a1 + 48);
    uint64_t v26 = a2;
    uint64_t v27 = v15;
    __int128 v24 = v16;
    p___int128 buf = &buf;
    BOOL v17 = sub_100105F8C(v15, 0LL, a2, v6, (uint64_t)v21);
    if (*(_BYTE *)(*((void *)&buf + 1) + 24LL)) {
      int v18 = v17;
    }
    else {
      int v18 = 0;
    }
    *(_BYTE *)(*((void *)&buf + 1) + 24LL) = v18;
    char v19 = sub_1000F8254(v15, v18, (CFErrorRef *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL));
    if (*(_BYTE *)(*((void *)&buf + 1) + 24LL)) {
      char v20 = v19;
    }
    else {
      char v20 = 0;
    }
    *(_BYTE *)(*((void *)&buf + 1) + 24LL) = v20;

    _Block_object_dispose(&buf, 8);
    return 1LL;
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 zoneName]);
    id v10 = sub_1000AA6AC(@"ckksscan", v9);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);

    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "couldn't create query: %@",  (uint8_t *)&buf,  0xCu);
    }

    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t result = *(void *)(v13 + 24);
    if (result)
    {
      *(void *)(v13 + 24) = 0LL;
      CFRelease((CFTypeRef)result);
      return 0LL;
    }
  }

  return result;
}

void sub_1000A0560(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 UUIDString]);

  uint64_t v42 = kSecAttrUUID;
  __int128 v43 = v5;
  id v6 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v43,  &v42,  1LL));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 zoneName]);
  id v9 = sub_1000AA6AC(@"ckksscan", v8);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412547;
    __int128 v39 = v5;
    __int16 v40 = 2113;
    uint64_t v41 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Assigning new UUID %@ for item %{private}@",  buf,  0x16u);
  }

  id v11 = sub_1000E9350(a2, v6, (__CFString **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL));
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(a1 + 48);
    id v14 = (CFTypeRef *)(*(void *)(v13 + 8) + 24LL);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472LL;
    v36[2] = sub_1000A08E0;
    v36[3] = &unk_100284CB0;
    v36[5] = a2;
    v36[6] = v11;
    __int128 v37 = *(_OWORD *)(a1 + 80);
    v36[4] = v13;
    BOOL v15 = sub_100105354(v37, 5LL, v14, (uint64_t)v36);
    if (v15)
    {
      uint64_t v17 = *(void *)(a1 + 32);
      __int128 v16 = *(void **)(a1 + 40);
      uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
      uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8LL);
      id v35 = *(id *)(v19 + 40);
      [v16 onboardItemToCKKS:v12 viewState:v17 keyCache:v18 error:&v35];
      id v20 = v35;
      id v21 = *(os_log_s **)(v19 + 40);
      *(void *)(v19 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v20;
    }

    else
    {
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
      char v30 = (void *)objc_claimAutoreleasedReturnValue([v29 zoneName]);
      id v31 = sub_1000AA6AC(@"ckksscan", v30);
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);

      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v32 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
        *(_DWORD *)__int128 buf = 138412290;
        __int128 v39 = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Unable to update item with new UUID: %@",  buf,  0xCu);
      }
    }

    uint64_t v33 = *(void *)(*(void *)(a1 + 72) + 8LL);
    if (*(_BYTE *)(v33 + 24)) {
      BOOL v34 = v15;
    }
    else {
      BOOL v34 = 0;
    }
    *(_BYTE *)(v33 + 24) = v34;
  }

  else
  {
    id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v22 zoneName]);
    id v24 = sub_1000AA6AC(@"ckksscan", v23);
    id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);

    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
      *(_DWORD *)__int128 buf = 138412290;
      __int128 v39 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Unable to copy item with new UUID: %@",  buf,  0xCu);
    }

    uint64_t v27 = *(void *)(*(void *)(a1 + 56) + 8LL);
    os_log_type_t v28 = *(void **)(v27 + 40);
    *(void *)(v27 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);

    [*(id *)(a1 + 40) setError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  }
}

uint64_t sub_1000A08E0(uint64_t a1)
{
  return sub_1000EC42C( *(void ***)(a1 + 40),  *(void ***)(a1 + 48),  *(void *)(a1 + 56),  kCFBooleanFalse,  *(unsigned __int8 *)(*(void *)(a1 + 64) + 154LL),  (__CFString **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
}

uint64_t sub_1000A090C(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___CKKSMemoryKeyCache);
  v37[0] = kSecClass;
  v37[1] = kSecReturnRef;
  uint64_t v3 = *(void *)(a1 + 40);
  v38[0] = *(void *)(a1 + 32);
  v38[1] = &__kCFBooleanTrue;
  v37[2] = kSecAttrSynchronizable;
  v37[3] = kSecAttrTombstone;
  v38[2] = &__kCFBooleanTrue;
  v38[3] = &__kCFBooleanFalse;
  v38[4] = v3;
  void v37[4] = kSecAttrUUID;
  v37[5] = kSecAttrMultiUser;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) deps]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 keychainMusrForCurrentAccount]);
  v38[5] = v5;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v38,  v37,  6LL));

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) zoneID]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 zoneName]);
  id v9 = sub_1000AA6AC(@"ckksscan", v8);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 138412546;
    *(void *)&uint8_t buf[4] = v11;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Onboarding %@ %@", buf, 0x16u);
  }

  *(void *)__int128 buf = 0LL;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3032000000LL;
  BOOL v34 = sub_10009F058;
  id v35 = sub_10009F068;
  id v36 = 0LL;
  id obj = 0LL;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  void v23[2] = sub_1000A0C8C;
  void v23[3] = &unk_100284C88;
  uint64_t v13 = *(void **)(a1 + 56);
  id v24 = *(id *)(a1 + 48);
  id v25 = v13;
  id v14 = v2;
  uint64_t v26 = v14;
  uint64_t v27 = buf;
  [v24 executeQuery:v6 readWrite:1 error:&obj block:v23];
  objc_storeStrong(&v36, obj);
  if (*(void *)(*(void *)&buf[8] + 40LL))
  {
    BOOL v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) zoneID]);
    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 zoneName]);
    id v17 = sub_1000AA6AC(@"ckksscan", v16);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);

    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)(a1 + 40);
      uint64_t v20 = *(void *)(*(void *)&buf[8] + 40LL);
      *(_DWORD *)uint64_t v29 = 138412546;
      uint64_t v30 = v19;
      __int16 v31 = 2112;
      uint64_t v32 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "Need to upload %@, but can't save to database: %@",  v29,  0x16u);
    }

    [*(id *)(a1 + 48) setError:*(void *)(*(void *)&buf[8] + 40)];
    uint64_t v21 = 0LL;
  }

  else
  {
    uint64_t v21 = 1LL;
  }

  _Block_object_dispose(buf, 8);
  return v21;
}

void sub_1000A0C68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_1000A0C8C(void *a1, uint64_t a2)
{
  uint64_t v3 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = *(void *)(a1[7] + 8LL);
  id obj = *(id *)(v5 + 40);
  [v3 onboardItemToCKKS:a2 viewState:v2 keyCache:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

BOOL sub_1000A0CDC(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[6];
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = (__CFString **)(*(void *)(a1[5] + 8LL) + 24LL);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000A0D74;
  v8[3] = &unk_100284C38;
  id v9 = v4;
  BOOL v6 = sub_100105F8C(v3, 0LL, a2, v5, (uint64_t)v8);

  return v6;
}

uint64_t sub_1000A0D74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000A1430(_Unwind_Exception *a1)
{
}

void sub_1000A15EC(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v14 = WeakRetained;
  if (!v12)
  {
    [WeakRetained setPeerID:v9];
    id v22 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
    [v22 logSuccessForEventNamed:@"OctagonEventJoinWithVoucher"];

    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v14 deps]);
    id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 ckks]);
    [v24 setCurrentSyncingPolicy:v11];

    id v25 = (void *)objc_claimAutoreleasedReturnValue([v14 deps]);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 stateHolder]);
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472LL;
    v39[2] = sub_1000A1A64;
    v39[3] = &unk_1002864C0;
    id v40 = v9;
    id v41 = v11;
    id v38 = 0LL;
    unsigned int v27 = [v26 persistAccountChanges:v39 error:&v38];
    id v21 = v38;

    if (!v27 || v21)
    {
      uint64_t v33 = sub_10001267C("octagon");
      BOOL v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v43 = v21;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Couldn't persist results: %@", buf, 0xCu);
      }

      [v14 setError:v21];
    }

    else
    {
      os_log_type_t v28 = sub_10001267C("SecError");
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "octagon: join successful", buf, 2u);
      }

      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v14 intendedState]);
      [v14 setNextState:v30];
    }

    id v35 = (void *)objc_claimAutoreleasedReturnValue([v14 deps]);
    id v36 = (void *)objc_claimAutoreleasedReturnValue([v35 ckks]);
    [v36 receiveTLKUploadRecords:v10];

    goto LABEL_22;
  }

  BOOL v15 = sub_10001267C("SecError");
  __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v43 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "octagon: Error joining with voucher: %@",  buf,  0xCu);
  }

  id v17 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v17 logRecoverableError:v12 forEvent:@"OctagonEventJoinWithVoucher" withAttributes:0];

  if ([v12 isCuttlefishError:1033])
  {
    uint64_t v18 = sub_10001267C("octagon-ckks");
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v14 ckksConflictState]);
      *(_DWORD *)__int128 buf = 138412290;
      id v43 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "A CKKS key hierarchy is out of date; going to state '%@'",
        buf,
        0xCu);
    }

    id v21 = (id)objc_claimAutoreleasedReturnValue([v14 ckksConflictState]);
    [v14 setNextState:v21];
LABEL_22:

    goto LABEL_23;
  }

  if ([v12 isCuttlefishError:1007])
  {
    __int16 v31 = sub_10001267C("octagon");
    uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "requesting cuttlefish health check", buf, 2u);
    }

    [v14 setNextState:@"CuttlefishTrustCheck"];
  }

  [v14 setError:v12];
LABEL_23:
  __int128 v37 = (void *)objc_claimAutoreleasedReturnValue([v14 finishedOp]);
  [v14 runBeforeGroupFinished:v37];
}

id sub_1000A1A64(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setTrustState:2];
  [v3 setPeerID:*(void *)(a1 + 32)];
  [v3 setVoucher:0];
  [v3 setVoucherSignature:0];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 tlkSharesForVouchedIdentitys]);
  [v4 removeAllObjects];

  [v3 setTPSyncingPolicy:*(void *)(a1 + 40)];
  return v3;
}

uint64_t sub_1000A2B04(uint64_t a1)
{
  return 1LL;
}

void sub_1000A3D44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,id location)
{
}

void sub_1000A4500(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
  unsigned int v8 = [v7 isEqual:*(void *)(a1 + 32)];

  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneName]);
    id v10 = sub_1000AA6AC(@"ckksfetch", v9);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      int v12 = 138412546;
      id v13 = v5;
      __int16 v14 = 2112;
      id v15 = v6;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Sorting record modification %@: %@",  (uint8_t *)&v12,  0x16u);
    }

    [*(id *)(a1 + 40) addObject:v6];
  }
}

void sub_1000A4630(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
  unsigned int v8 = [v7 isEqual:*(void *)(a1 + 32)];

  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneName]);
    id v10 = sub_1000AA6AC(@"ckksfetch", v9);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      int v12 = 138412546;
      id v13 = v5;
      __int16 v14 = 2112;
      id v15 = v6;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Sorting record deletion %@: %@",  (uint8_t *)&v12,  0x16u);
    }

    [*(id *)(a1 + 40) addObject:v6];
  }
}

void sub_1000A4760(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = sub_1000AA6AC(@"ckksfetch", 0LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v3 recordType]);
    int v12 = 138412546;
    id v13 = v11;
    __int16 v14 = 2112;
    id v15 = v3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "CloudKit notification: record changed(%@): %@",  (uint8_t *)&v12,  0x16u);
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained modifications]);
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v3 recordID]);
  [v7 setObject:v3 forKeyedSubscript:v8];

  id v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deletions]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 recordID]);
  [v9 removeObjectForKey:v10];

  objc_msgSend(WeakRetained, "setFetchedItems:", (char *)objc_msgSend(WeakRetained, "fetchedItems") + 1);
}

void sub_1000A48D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = sub_1000AA6AC(@"ckksfetch", 0LL);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    int v13 = 138412546;
    id v14 = v6;
    __int16 v15 = 2112;
    id v16 = v5;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "CloudKit notification: deleted record(%@): %@",  (uint8_t *)&v13,  0x16u);
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained modifications]);
  [v10 removeObjectForKey:v5];

  id v11 = -[CKKSCloudKitDeletion initWithRecordID:recordType:]( objc_alloc(&OBJC_CLASS___CKKSCloudKitDeletion),  "initWithRecordID:recordType:",  v5,  v6);
  int v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deletions]);
  [v12 setObject:v11 forKeyedSubscript:v5];

  objc_msgSend(WeakRetained, "setFetchedItems:", (char *)objc_msgSend(WeakRetained, "fetchedItems") + 1);
}

void sub_1000A4A3C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v11 = sub_1000AA6AC(@"ckksfetch", 0LL);
  int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    int v14 = 138412802;
    id v15 = v7;
    __int16 v16 = 2112;
    id v17 = v8;
    __int16 v18 = 2112;
    id v19 = v9;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "Received a new server change token (via block) for %@: %@ %@",  (uint8_t *)&v14,  0x20u);
  }

  int v13 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained changeTokens]);
  [v13 setObject:v8 forKeyedSubscript:v7];
}

void sub_1000A4B6C(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a6;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v16 = sub_1000AA6AC(@"ckksfetch", 0LL);
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    int v31 = 138412802;
    id v32 = v11;
    __int16 v33 = 2112;
    id v34 = v12;
    __int16 v35 = 2112;
    v36[0] = v13;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "Received a new server change token for %@: %@ %@",  (uint8_t *)&v31,  0x20u);
  }

  __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained changeTokens]);
  [v18 setObject:v12 forKeyedSubscript:v11];

  id v19 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained allClientOptions]);
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:v11]);
  [v20 setPreviousServerChangeToken:v12];

  objc_msgSend( WeakRetained,  "setMoreComing:",  objc_msgSend(WeakRetained, "moreComing") | a5);
  id v21 = *(void **)(a1 + 32);
  uint64_t v37 = kSecurityRTCFieldFullFetch;
  id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [WeakRetained moreComing]));
  id v38 = v22;
  __int128 v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v38,  &v37,  1LL));
  [v21 addMetrics:v23];

  if ((_DWORD)a5)
  {
    id v24 = sub_1000AA6AC(@"ckksfetch", 0LL);
    id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained changeTokens]);
      unsigned int v27 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKeyedSubscript:v11]);
      int v31 = 138412546;
      id v32 = v11;
      __int16 v33 = 2112;
      id v34 = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "more changes pending for %@, will start a new fetch at change token %@",  (uint8_t *)&v31,  0x16u);
    }
  }

  os_log_type_t v28 = (void *)objc_claimAutoreleasedReturnValue([v11 zoneName]);
  id v29 = sub_1000AA6AC(@"ckksfetch", v28);
  uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);

  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
  {
    int v31 = 138413058;
    id v32 = v12;
    __int16 v33 = 2112;
    id v34 = v13;
    __int16 v35 = 1024;
    LODWORD(v36[0]) = a5;
    WORD2(v36[0]) = 2112;
    *(void *)((char *)v36 + 6) = v14;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "Record zone fetch complete: changeToken=%@ clientChangeTokenData=%@ moreComing=%{BOOL}d error=%@",  (uint8_t *)&v31,  0x26u);
  }

  [WeakRetained sendChangesToClient:v11 moreComing:a5];
}

void sub_1000A4EB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    id v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained modifications]);
    objc_msgSend( WeakRetained,  "setTotalModifications:",  (char *)objc_msgSend(v6, "count") + (void)objc_msgSend(WeakRetained, "totalModifications"));

    id v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deletions]);
    objc_msgSend( WeakRetained,  "setTotalDeletions:",  (char *)objc_msgSend(v7, "count") + (void)objc_msgSend(WeakRetained, "totalDeletions"));

    id v8 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained modifications]);
    [v8 removeAllObjects];

    id v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deletions]);
    [v9 removeAllObjects];

    if ([WeakRetained moreComing])
    {
      if (!v3
        || +[CKKSReachabilityTracker isNetworkFailureError:]( &OBJC_CLASS___CKKSReachabilityTracker,  "isNetworkFailureError:",  v3))
      {
        id v10 = sub_1000AA6AC(@"ckksfetch", 0LL);
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v130 = v3;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Must issue another fetch (with potential error %@)",  buf,  0xCu);
        }

        [WeakRetained setMoreComing:0];
        +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  *(void *)(a1 + 32),  0LL,  v3);
        [WeakRetained performFetch];
        goto LABEL_61;
      }
    }

    else if (!v3)
    {
      id v13 = &off_1002AD698;
      goto LABEL_13;
    }

    [WeakRetained setError:v3];
    id v13 = &off_1002AD680;
LABEL_13:
    __int16 v92 = v13;
    id v14 = sub_1000AA6AC(@"ckksfetcher", 0LL);
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v130 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Record zone changes fetch complete: error=%@",  buf,  0xCu);
    }

    uint64_t v90 = a1;

    +[CKKSPowerCollection CKKSPowerEvent:count:]( CKKSPowerCollection,  "CKKSPowerEvent:count:",  @"fetchAllChanges",  [WeakRetained fetchedItems]);
    __int128 v120 = 0u;
    __int128 v121 = 0u;
    __int128 v118 = 0u;
    __int128 v119 = 0u;
    id v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained modifications]);
    id v17 = [v16 countByEnumeratingWithState:&v118 objects:v128 count:16];
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = *(void *)v119;
      do
      {
        for (uint64_t i = 0LL; i != v18; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v119 != v19) {
            objc_enumerationMutation(v16);
          }
          id v21 = *(void **)(*((void *)&v118 + 1) + 8LL * (void)i);
          id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 zoneID]);
          __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:v22]);

          if (v23) {
            id v24 = (char *)[v23 unsignedLongValue];
          }
          else {
            id v24 = 0LL;
          }
          id v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  v24 + 1));
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v21 zoneID]);
          [v5 setObject:v25 forKeyedSubscript:v26];
        }

        id v18 = [v16 countByEnumeratingWithState:&v118 objects:v128 count:16];
      }

      while (v18);
    }

    __int128 v116 = 0u;
    __int128 v117 = 0u;
    __int128 v114 = 0u;
    __int128 v115 = 0u;
    unsigned int v27 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deletions]);
    id v28 = [v27 countByEnumeratingWithState:&v114 objects:v127 count:16];
    if (v28)
    {
      id v29 = v28;
      uint64_t v30 = *(void *)v115;
      do
      {
        for (j = 0LL; j != v29; j = (char *)j + 1)
        {
          if (*(void *)v115 != v30) {
            objc_enumerationMutation(v27);
          }
          id v32 = *(void **)(*((void *)&v114 + 1) + 8LL * (void)j);
          __int16 v33 = (void *)objc_claimAutoreleasedReturnValue([v32 zoneID]);
          id v34 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:v33]);

          if (v34) {
            __int16 v35 = (char *)[v34 unsignedLongValue];
          }
          else {
            __int16 v35 = 0LL;
          }
          id v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  v35 + 1));
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v32 zoneID]);
          [v5 setObject:v36 forKeyedSubscript:v37];
        }

        id v29 = [v27 countByEnumeratingWithState:&v114 objects:v127 count:16];
      }

      while (v29);
    }

    __int128 v112 = 0u;
    __int128 v113 = 0u;
    __int128 v110 = 0u;
    __int128 v111 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue([WeakRetained apnsPushes]);
    id v38 = [obj countByEnumeratingWithState:&v110 objects:v126 count:16];
    if (v38)
    {
      id v39 = v38;
      uint64_t v40 = *(void *)v111;
      id v95 = v5;
      id v96 = v3;
      uint64_t v91 = *(void *)v111;
      do
      {
        id v41 = 0LL;
        id v93 = v39;
        do
        {
          if (*(void *)v111 != v40) {
            objc_enumerationMutation(obj);
          }
          uint64_t v42 = *(void **)(*((void *)&v110 + 1) + 8LL * (void)v41);
          if ([v42 ckksPushTracingEnabled])
          {
            id v43 = sub_1000AA6AC(@"ckksfetch", 0LL);
            uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138412290;
              id v130 = v42;
              _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "Submitting post-fetch CKEventMetric due to notification %@",  buf,  0xCu);
            }

            id v45 = [[CKEventMetric alloc] initWithEventName:@"APNSPushMetrics"];
            [v45 setIsPushTriggerFired:1];
            id v46 = (void *)objc_claimAutoreleasedReturnValue([v42 ckksPushTracingUUID]);
            [v45 setObject:v46 forKeyedSubscript:@"push_token_uuid"];

            uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v42 ckksPushReceivedDate]);
            [v45 setObject:v47 forKeyedSubscript:@"push_received_date"];

            [v45 setObject:@"CKKS Push" forKeyedSubscript:@"push_event_name"];
            [v45 setObject:v92 forKeyedSubscript:@"fetch_error"];
            id v48 = (void *)objc_claimAutoreleasedReturnValue([v3 domain]);
            [v45 setObject:v48 forKeyedSubscript:@"fetch_error_domain"];

            __int16 v49 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLong:]( NSNumber,  "numberWithLong:",  [v3 code]));
            [v45 setObject:v49 forKeyedSubscript:@"fetch_error_code"];

            id v50 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( NSNumber,  "numberWithUnsignedLong:",  [WeakRetained totalModifications]));
            [v45 setObject:v50 forKeyedSubscript:@"total_modifications"];

            id v51 = WeakRetained;
            uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( NSNumber,  "numberWithUnsignedLong:",  [WeakRetained totalDeletions]));
            [v45 setObject:v52 forKeyedSubscript:@"total_deletions"];

            __int128 v108 = 0u;
            __int128 v109 = 0u;
            __int128 v106 = 0u;
            __int128 v107 = 0u;
            id v53 = v95;
            id v54 = [v53 countByEnumeratingWithState:&v106 objects:v125 count:16];
            if (v54)
            {
              id v55 = v54;
              uint64_t v56 = *(void *)v107;
              do
              {
                for (uint64_t k = 0LL; k != v55; uint64_t k = (char *)k + 1)
                {
                  if (*(void *)v107 != v56) {
                    objc_enumerationMutation(v53);
                  }
                  id v58 = *(void **)(*((void *)&v106 + 1) + 8LL * (void)k);
                  __int16 v59 = (void *)objc_claimAutoreleasedReturnValue([v53 objectForKeyedSubscript:v58]);
                  id v60 = (void *)objc_claimAutoreleasedReturnValue([v58 zoneName]);
                  [v45 setObject:v59 forKeyedSubscript:v60];
                }

                id v55 = [v53 countByEnumeratingWithState:&v106 objects:v125 count:16];
              }

              while (v55);
            }

            id v61 = -[SecEventMetric initWithEventName:]( objc_alloc(&OBJC_CLASS___SecEventMetric),  "initWithEventName:",  @"APNSPushMetrics");
            id v62 = (void *)objc_claimAutoreleasedReturnValue([v42 ckksPushTracingUUID]);
            -[SecEventMetric setObject:forKeyedSubscript:]( v61,  "setObject:forKeyedSubscript:",  v62,  @"push_token_uuid");

            __int128 v63 = (void *)objc_claimAutoreleasedReturnValue([v42 ckksPushReceivedDate]);
            -[SecEventMetric setObject:forKeyedSubscript:]( v61,  "setObject:forKeyedSubscript:",  v63,  @"push_received_date");

            -[SecEventMetric setObject:forKeyedSubscript:]( v61,  "setObject:forKeyedSubscript:",  @"CKKS Push-webtunnel",  @"push_event_name");
            -[SecEventMetric setObject:forKeyedSubscript:]( v61,  "setObject:forKeyedSubscript:",  v96,  @"fetch_error");
            id v64 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( NSNumber,  "numberWithUnsignedLong:",  [v51 totalModifications]));
            -[SecEventMetric setObject:forKeyedSubscript:]( v61,  "setObject:forKeyedSubscript:",  v64,  @"total_modifications");

            id v65 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( NSNumber,  "numberWithUnsignedLong:",  [v51 totalDeletions]));
            -[SecEventMetric setObject:forKeyedSubscript:]( v61,  "setObject:forKeyedSubscript:",  v65,  @"total_deletions");

            __int128 v104 = 0u;
            __int128 v105 = 0u;
            __int128 v102 = 0u;
            __int128 v103 = 0u;
            id v66 = v53;
            id v67 = [v66 countByEnumeratingWithState:&v102 objects:v124 count:16];
            if (v67)
            {
              id v68 = v67;
              uint64_t v69 = *(void *)v103;
              do
              {
                for (m = 0LL; m != v68; m = (char *)m + 1)
                {
                  if (*(void *)v103 != v69) {
                    objc_enumerationMutation(v66);
                  }
                  uint64_t v71 = *(void **)(*((void *)&v102 + 1) + 8LL * (void)m);
                  __int128 v72 = (void *)objc_claimAutoreleasedReturnValue([v66 objectForKeyedSubscript:v71]);
                  __int128 v73 = (void *)objc_claimAutoreleasedReturnValue([v71 zoneName]);
                  -[SecEventMetric setObject:forKeyedSubscript:](v61, "setObject:forKeyedSubscript:", v72, v73);
                }

                id v68 = [v66 countByEnumeratingWithState:&v102 objects:v124 count:16];
              }

              while (v68);
            }

            id WeakRetained = v51;
            id v74 = (void *)objc_claimAutoreleasedReturnValue([v51 container]);
            id v75 = (void *)objc_claimAutoreleasedReturnValue([v51 fetchRecordZoneChangesOperation]);
            v97[0] = _NSConcreteStackBlock;
            v97[1] = 3221225472LL;
            v97[2] = sub_1000A5B14;
            v97[3] = &unk_100290840;
            id v98 = v45;
            id v99 = v75;
            id v100 = v74;
            id v101 = v61;
            __int128 v76 = v61;
            id v77 = v74;
            id v78 = v75;
            id v79 = v45;
            id v80 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSResultOperation named:withBlock:]( &OBJC_CLASS___CKKSResultOperation,  "named:withBlock:",  @"submit-metric",  v97));
            uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue([v51 fetchCompletedOperation]);
            [v80 addSuccessDependency:v81];

            BOOL v82 = (void *)objc_claimAutoreleasedReturnValue([v51 operationQueue]);
            [v82 addOperation:v80];

            id v5 = v95;
            id v3 = v96;
            id v39 = v93;
            uint64_t v40 = v91;
          }

          id v41 = (char *)v41 + 1;
        }

        while (v41 != v39);
        id v39 = [obj countByEnumeratingWithState:&v110 objects:v126 count:16];
      }

      while (v39);
    }

    uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained fetchCompletedOperation]);
    [WeakRetained runBeforeGroupFinished:v83];

    [WeakRetained setClientMap:&__NSDictionary0__struct];
    id v84 = *(void **)(v90 + 32);
    v122[0] = kSecurityRTCFieldNumKeychainItems;
    id v85 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [WeakRetained fetchedItems]));
    v123[0] = v85;
    v122[1] = kSecurityRTCFieldTotalCKRecords;
    id v86 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( NSNumber,  "numberWithUnsignedLong:",  (char *)[WeakRetained totalDeletions]
                    + (void)[WeakRetained totalModifications]));
    v123[1] = v86;
    __int16 v87 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v123,  v122,  2LL));
    [v84 addMetrics:v87];

    uint64_t v88 = *(void *)(v90 + 32);
    __int128 v89 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
    +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v88,  1LL,  v89);

    goto LABEL_61;
  }

  id v12 = sub_1000AA6AC(@"ckksfetch", 0LL);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v5,  OS_LOG_TYPE_ERROR,  "received callback for released object",  buf,  2u);
  }

LABEL_61:
}

            CFRelease(v9);
            goto LABEL_62;
          }

          v39[0] = _NSConcreteStackBlock;
          v39[1] = 0x40000000LL;
          v39[2] = sub_100113CCC;
          v39[3] = &unk_10028F4D0;
          void v39[4] = a4;
          v39[5] = v13;
          v39[6] = a3;
          id v38 = sub_100110ECC(1, 1, 0LL, (uint64_t)a4, (uint64_t)v39);
LABEL_59:
          __int16 v35 = v38;
          goto LABEL_60;
        }

        id v34 = @"can't add shared item without Keychain Sharing client entitlement";
LABEL_57:
        id v36 = -34018;
        goto LABEL_58;
      }

      CFRelease(v9);
    }

    return sub_1000194E0( -34018,  a4,  @"Client has neither %@ entitlements",  @"application-identifier nor keychain-access-groups");
  }

  return 0LL;
}

void sub_1000A5B14(uint64_t a1)
{
  if (([*(id *)(a1 + 32) associateWithCompletedOperation:*(void *)(a1 + 40)] & 1) == 0)
  {
    id v2 = sub_1000AA6AC(@"ckksfetch", 0LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v5 = *(void *)(a1 + 40);
      int v10 = 138412546;
      uint64_t v11 = v4;
      __int16 v12 = 2112;
      uint64_t v13 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Couldn't associate metric with operation: %@ %@",  (uint8_t *)&v10,  0x16u);
    }
  }

  [*(id *)(a1 + 48) submitEventMetric:*(void *)(a1 + 32)];
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[SecMetrics managerObject](&OBJC_CLASS___SecMetrics, "managerObject"));
  [v6 submitEvent:*(void *)(a1 + 56)];

  id v7 = sub_1000AA6AC(@"ckksfetch", 0LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = 138412290;
    uint64_t v11 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Metric submitted: %@", (uint8_t *)&v10, 0xCu);
  }
}

id sub_1000A7474(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) completed];
  return result;
}

void sub_1000A7850(_Unwind_Exception *a1)
{
}

void sub_1000A7E68(uint64_t a1)
{
  id v2 = sub_10001267C("octagon-ckks");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Successfully reset %@", (uint8_t *)&v5, 0xCu);
  }
}

void sub_1000A7F14(id a1, NSError *a2)
{
  id v2 = sub_10001267C("octagon-ckks");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CKKS view reset complete", v4, 2u);
  }
}

void sub_1000A7F80(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = sub_10001267C("octagon");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue([WeakRetained error]);
    int v5 = (void *)v4;
    uint64_t v6 = @"no error";
    if (v4) {
      uint64_t v6 = (const __CFString *)v4;
    }
    int v7 = 138412290;
    id v8 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Finishing resetting CKKS missing TLKs operation with %@",  (uint8_t *)&v7,  0xCu);
  }
}

void sub_1000A8060(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) viewKeySets]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) incompleteKeySets]);
  [WeakRetained proceedWithKeys:v2 incompleteKeySets:v3];
}

void sub_1000A82B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000A8384(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v5 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v5 logResultForEvent:@"OctagonEventRemoveCustodianRecoveryKeyTPH" hardFailure:1 result:v3];

  if (v3)
  {
    uint64_t v6 = sub_10001267C("SecError");
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138412290;
      id v12 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "octagon: Error removing custodian recovery key: %@",  (uint8_t *)&v11,  0xCu);
    }

    [WeakRetained setError:v3];
  }

  else
  {
    id v8 = sub_10001267C("octagon");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "successfully removed custodian recovery key",  (uint8_t *)&v11,  2u);
    }
  }

  int v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
  [WeakRetained runBeforeGroupFinished:v10];
}

void sub_1000A86E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000A87EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v8 logResultForEvent:@"OctagonEventCheckCustodianRecoveryKeyTPH" hardFailure:1 result:v6];

  if (v6)
  {
    uint64_t v9 = sub_10001267C("SecError");
    int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 138412290;
      id v16 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "octagon: Error finding custodian recovery key: %@",  (uint8_t *)&v15,  0xCu);
    }

    [WeakRetained setError:v6];
    int v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
    [WeakRetained runBeforeGroupFinished:v11];
  }

  else
  {
    id v12 = sub_10001267C("octagon");
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v15) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "successfully found custodian recovery key",  (uint8_t *)&v15,  2u);
    }

    id v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
    [WeakRetained runBeforeGroupFinished:v14];

    [WeakRetained setCrk:v5];
  }
}

void sub_1000A8F2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id *location)
{
}

void sub_1000A90EC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);

  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained retryFlag]);

    if (!v3)
    {
      __int128 v23 = sub_10001267C("SecError");
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v24) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon: Received an error updating TPH, but no retry flag present.",  (uint8_t *)&v24,  2u);
      }

      goto LABEL_16;
    }

    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 lockStateTracker]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
    unsigned int v7 = [v5 isLockedError:v6];

    id v8 = sub_10001267C("octagon");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (v10)
      {
        int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
        int v24 = 138412290;
        id v25 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Updating trust state failed because locked, retry once unlocked: %@",  (uint8_t *)&v24,  0xCu);
      }

      [WeakRetained setNextState:@"WaitForUnlock"];
      id v12 = objc_alloc(&OBJC_CLASS___OctagonPendingFlag);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained retryFlag]);
      uint64_t v9 = -[OctagonPendingFlag initWithFlag:conditions:](v12, "initWithFlag:conditions:", v13, 1LL);

      if (!v9)
      {
        id v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
        [v14 retryInterval];
        double v16 = v15;

        id v17 = objc_alloc(&OBJC_CLASS___OctagonPendingFlag);
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained retryFlag]);
        uint64_t v9 = -[OctagonPendingFlag initWithFlag:delayInSeconds:](v17, "initWithFlag:delayInSeconds:", v18, v16);
      }

      uint64_t v19 = sub_10001267C("octagon");
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        int v24 = 138412290;
        id v25 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Updating trust state not fatal: requesting retry: %@",  (uint8_t *)&v24,  0xCu);
      }

      id v21 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 flagHandler]);
      [v22 handlePendingFlag:v9];
    }

    else
    {
      if (!v10)
      {
LABEL_16:

        goto LABEL_17;
      }

      id v21 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
      int v24 = 138412290;
      id v25 = (os_log_s *)v21;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Error is currently unknown, aborting: %@",  (uint8_t *)&v24,  0xCu);
    }

    goto LABEL_16;
  }

void sub_1000A9400(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!v7 || v9)
  {
    __int128 v23 = sub_10001267C("SecError");
    int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v72 = v9;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "octagon: update errored: %@", buf, 0xCu);
    }

    [WeakRetained setError:v9];
    id v25 = sub_10001267C("octagon-ckks");
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Cuttlefish reports we no longer exist.",  buf,  2u);
    }

    unsigned int v27 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained determineCDPState]);
    if (v27)
    {
      uint64_t v28 = objc_claimAutoreleasedReturnValue([WeakRetained determineCDPState]);
    }

    else
    {
      if (!*(_BYTE *)(a1 + 40)
        || (id v54 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained peerUnknownState]),
            v54,
            !v54))
      {
        [WeakRetained setNextState:@"BecomeUntrusted"];
        goto LABEL_54;
      }

      uint64_t v28 = objc_claimAutoreleasedReturnValue([WeakRetained peerUnknownState]);
    }

    id v29 = (void *)v28;
    [WeakRetained setNextState:v28];

LABEL_54:
    id v17 = (id)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
    [WeakRetained runBeforeGroupFinished:v17];
    goto LABEL_55;
  }

  int v11 = sub_10001267C("octagon");
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412546;
    id v72 = v7;
    __int16 v73 = 2112;
    id v74 = v8;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "update complete: %@, %@", buf, 0x16u);
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 stateHolder]);
  v69[0] = _NSConcreteStackBlock;
  v69[1] = 3221225472LL;
  v69[2] = sub_1000A9C9C;
  v69[3] = &unk_100291520;
  double v15 = v8;
  id v70 = v15;
  id v68 = 0LL;
  unsigned int v16 = [v14 persistAccountChanges:v69 error:&v68];
  id v17 = v68;

  if (!v16 || v17)
  {
    uint64_t v30 = sub_10001267C("SecError");
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v72 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "octagon: Unable to save new syncing state: %@",  buf,  0xCu);
    }
  }

  else
  {
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 ckks]);
    unsigned int v20 = [v19 setCurrentSyncingPolicy:v15 policyIsFresh:1];

    if (!v20) {
      goto LABEL_20;
    }
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v22 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s flagHandler](v21, "flagHandler"));
    [v22 handleFlag:@"ckks_views_changed"];
  }

LABEL_20:
  if ([v7 identityIsPreapproved])
  {
    int v31 = sub_10001267C("octagon-sos");
    id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Self peer is now preapproved!", buf, 2u);
    }

    __int16 v33 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v34 = (void *)objc_claimAutoreleasedReturnValue([v33 flagHandler]);
    [v34 handleFlag:@"preapproved"];
  }

  if ([v7 memberChanges])
  {
    __int16 v35 = sub_10001267C("octagon");
    id v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Member list changed", buf, 2u);
    }

    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v38 = (void *)objc_claimAutoreleasedReturnValue([v37 octagonAdapter]);
    [v38 sendTrustedPeerSetChangedUpdate];
  }

  if ([v7 unknownMachineIDsPresent])
  {
    id v39 = sub_10001267C("octagon-authkit");
    uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "Unknown machine IDs are present; requesting fetch",
        buf,
        2u);
    }

    id v41 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v41 flagHandler]);
    [v42 handleFlag:@"attempt_machine_id_list"];
  }

  if (([v7 peerStatus] & 4) != 0)
  {
    uint64_t v44 = sub_10001267C("octagon");
    id v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      id v46 = (void *)objc_claimAutoreleasedReturnValue([v7 peerID]);
      *(_DWORD *)__int128 buf = 138412290;
      id v72 = v46;
      uint64_t v47 = "Self peer (%@) is excluded; moving to untrusted";
      id v48 = v45;
      uint32_t v49 = 12;
LABEL_37:
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, v47, buf, v49);
    }
  }

  else
  {
    if (([v7 peerStatus] & 0x20) == 0)
    {
      uint64_t v43 = objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
LABEL_51:
      id v60 = (void *)v43;
      [WeakRetained setNextState:v43];

      goto LABEL_52;
    }

    if ([v7 identityIsPreapproved])
    {
      id v51 = sub_10001267C("octagon");
      uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        id v53 = (void *)objc_claimAutoreleasedReturnValue([v7 peerID]);
        *(_DWORD *)__int128 buf = 138412290;
        id v72 = v53;
        _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Self peer (%@) is excluded but is preapproved, moving to sosuprade",  buf,  0xCu);
      }

      id v50 = @"AttemptSOSUpgrade";
      goto LABEL_39;
    }

    id v55 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained determineCDPState]);

    if (v55)
    {
      uint64_t v56 = sub_10001267C("octagon");
      __int16 v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      {
        id v58 = (void *)objc_claimAutoreleasedReturnValue([v7 peerID]);
        __int16 v59 = (__CFString *)objc_claimAutoreleasedReturnValue([WeakRetained determineCDPState]);
        *(_DWORD *)__int128 buf = 138412546;
        id v72 = v58;
        __int16 v73 = 2112;
        id v74 = v59;
        _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "Self peer (%@) is unknown, but still figuring out cdp state; moving to '%@''",
          buf,
          0x16u);
      }

      uint64_t v43 = objc_claimAutoreleasedReturnValue([WeakRetained determineCDPState]);
      goto LABEL_51;
    }

    if (*(_BYTE *)(a1 + 40))
    {
      id v62 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained peerUnknownState]);

      if (v62)
      {
        __int128 v63 = sub_10001267C("octagon");
        id v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        {
          id v65 = (void *)objc_claimAutoreleasedReturnValue([v7 peerID]);
          id v66 = (__CFString *)objc_claimAutoreleasedReturnValue([WeakRetained peerUnknownState]);
          *(_DWORD *)__int128 buf = 138412546;
          id v72 = v65;
          __int16 v73 = 2112;
          id v74 = v66;
          _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "Self peer (%@) is unknown and has attempted a join; moving to '%@''",
            buf,
            0x16u);
        }

        uint64_t v43 = objc_claimAutoreleasedReturnValue([WeakRetained peerUnknownState]);
        goto LABEL_51;
      }
    }

    id v67 = sub_10001267C("octagon");
    id v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      id v46 = (void *)objc_claimAutoreleasedReturnValue([v7 peerID]);
      *(_DWORD *)__int128 buf = 138412546;
      id v72 = v46;
      __int16 v73 = 2112;
      id v74 = @"BecomeUntrusted";
      uint64_t v47 = "Self peer (%@) is unknown and never attempted a join; moving to '%@''";
      id v48 = v45;
      uint32_t v49 = 22;
      goto LABEL_37;
    }
  }

  id v50 = @"BecomeUntrusted";
LABEL_39:
  [WeakRetained setNextState:v50];
LABEL_52:
  id v61 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
  [WeakRetained runBeforeGroupFinished:v61];

LABEL_55:
}

id sub_1000A9C9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setTPSyncingPolicy:*(void *)(a1 + 32)];
  return v3;
}

void sub_1000AA168( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id v22 = v21;
  objc_destroyWeak(v22);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000AA2B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);

  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
    unsigned int v4 = [v3 isRetryable];

    if (v4)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
      [v5 retryInterval];
      double v7 = v6;

      id v8 = sub_10001267C("octagon-sos");
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
        int v15 = 134218242;
        double v16 = v7;
        __int16 v17 = 2112;
        uint64_t v18 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "SOS update preapproval error is not fatal: requesting retry in %0.2fs: %@",  (uint8_t *)&v15,  0x16u);
      }

      int v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 flagHandler]);
      uint64_t v13 = -[OctagonPendingFlag initWithFlag:delayInSeconds:]( objc_alloc(&OBJC_CLASS___OctagonPendingFlag),  "initWithFlag:delayInSeconds:",  @"attempt_sos_update_preapprovals",  v7);
      [v12 handlePendingFlag:v13];
    }

    else
    {
      id v14 = sub_10001267C("octagon-sos");
      int v11 = (void *)objc_claimAutoreleasedReturnValue(v14);
      if (!os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_DEFAULT))
      {
LABEL_9:

        goto LABEL_10;
      }

      id v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
      int v15 = 138412290;
      double v16 = *(double *)&v12;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v11,  OS_LOG_TYPE_DEFAULT,  "SOS update preapproval error is: %@, not retrying",  (uint8_t *)&v15,  0xCu);
    }

    goto LABEL_9;
  }

void sub_1000AA4A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v6)
  {
    id v8 = sub_10001267C("SecError");
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = 138412290;
      id v19 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon-sos: unable to update preapproved keys: %@",  (uint8_t *)&v18,  0xCu);
    }

    [WeakRetained setError:v6];
  }

  else
  {
    BOOL v10 = sub_10001267C("octagon-sos");
    int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v1_Block_object_dispose(va, 8) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Updated SOS preapproved keys",  (uint8_t *)&v18,  2u);
    }

    if ([v5 memberChanges])
    {
      id v12 = sub_10001267C("octagon");
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v1_Block_object_dispose(va, 8) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Member list changed", (uint8_t *)&v18, 2u);
      }

      id v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      int v15 = (void *)objc_claimAutoreleasedReturnValue([v14 octagonAdapter]);
      [v15 sendTrustedPeerSetChangedUpdate];
    }

    double v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
    [WeakRetained setNextState:v16];
  }

  __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
  [WeakRetained runBeforeGroupFinished:v17];
}

id sub_1000AA6AC(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v15 = 0LL;
  double v16 = &v15;
  uint64_t v17 = 0x3032000000LL;
  int v18 = sub_1000AA7E4;
  id v19 = sub_1000AA7F4;
  id v5 = &_os_log_disabled;
  id v20 = &_os_log_disabled;
  if (qword_1002DE990 != -1) {
    dispatch_once(&qword_1002DE990, &stru_100284F80);
  }
  id v6 = (dispatch_queue_s *)qword_1002DE988;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000AA7FC;
  block[3] = &unk_1002912B8;
  id v12 = v4;
  id v13 = v3;
  id v14 = &v15;
  id v7 = v3;
  id v8 = v4;
  dispatch_sync(v6, block);
  id v9 = (id)v16[5];

  _Block_object_dispose(&v15, 8);
  return v9;
}

uint64_t sub_1000AA7E4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_1000AA7F4(uint64_t a1)
{
}

void sub_1000AA7FC(void *a1)
{
  if (!qword_1002DE998)
  {
    uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    id v3 = (void *)qword_1002DE998;
    qword_1002DE998 = v2;
  }

  id v4 = (void *)a1[5];
  if (a1[4]) {
    id v5 = (id)objc_claimAutoreleasedReturnValue([v4 stringByAppendingFormat:@"-%@", a1[4]]);
  }
  else {
    id v5 = v4;
  }
  id v13 = v5;
  uint64_t v6 = objc_claimAutoreleasedReturnValue([(id)qword_1002DE998 objectForKeyedSubscript:v5]);
  uint64_t v7 = *(void *)(a1[6] + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v6;

  if (!*(void *)(*(void *)(a1[6] + 8LL) + 40LL))
  {
    id v9 = v13;
    os_log_t v10 = os_log_create("com.apple.security.ckks", (const char *)[v9 cStringUsingEncoding:4]);
    uint64_t v11 = *(void *)(a1[6] + 8LL);
    id v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v10;

    [(id)qword_1002DE998 setObject:*(void *)(*(void *)(a1[6] + 8) + 40) forKeyedSubscript:v9];
  }
}

void sub_1000AA904(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("ckks-logger", v4);
  id v3 = (void *)qword_1002DE988;
  qword_1002DE988 = (uint64_t)v2;
}

void sub_1000AAD5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000AAE88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000AAFF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000AB1CC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v17 logResultForEvent:@"OctagonEventVoucherWithRecoveryKey" hardFailure:1 result:v15];

  if (v15)
  {
    int v18 = sub_10001267C("SecError");
    id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v38 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "octagon: Error preparing voucher using recovery key: %@",  buf,  0xCu);
    }

    [WeakRetained setError:v15];
LABEL_16:
    id v25 = (id)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
    [WeakRetained runBeforeGroupFinished:v25];
    goto LABEL_17;
  }

  id v20 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v20 recordRecoveredTLKMetrics:*(void *)(a1 + 32) tlkRecoveryResults:v14 uniqueTLKsRecoveredEvent:@"OARKUniqueTLKsRecoveredCount" totalSharesRecoveredEvent:@"OARKTotalTLKSharesRecoveredCount" totalRecoverableTLKS haresEvent:@"OARKTotalTLKSharesCount" totalRecoverableTLKsEvent:@"OARKUniqueTLKsWithSharesCount" totalViewsWithSharesEvent:@"OARKTLKUniqueViewCount"];

  [WeakRetained setVoucher:v11];
  [WeakRetained setVoucherSig:v12];
  if (![WeakRetained saveVoucher])
  {
LABEL_13:
    id v29 = sub_10001267C("octagon");
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412546;
      id v38 = v11;
      __int16 v39 = 2112;
      id v40 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Successfully vouched with a recovery key: %@, %@",  buf,  0x16u);
    }

    int v31 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
    [WeakRetained setNextState:v31];

    goto LABEL_16;
  }

  id v21 = sub_10001267C("octagon");
  id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Saving voucher for later use...", buf, 2u);
  }

  __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  int v24 = (void *)objc_claimAutoreleasedReturnValue([v23 stateHolder]);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472LL;
  void v33[2] = sub_1000AB5C8;
  v33[3] = &unk_1002855F0;
  id v34 = v11;
  id v35 = v12;
  id v36 = v13;
  id v32 = 0LL;
  [v24 persistAccountChanges:v33 error:&v32];
  id v25 = v32;

  if (!v25)
  {

    goto LABEL_13;
  }

  uint64_t v26 = sub_10001267C("octagon");
  unsigned int v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v38 = v25;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "unable to save voucher: %@", buf, 0xCu);
  }

  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
  [WeakRetained runBeforeGroupFinished:v28];

LABEL_17:
}

id sub_1000AB5C8(void *a1, void *a2)
{
  id v3 = a2;
  [v3 setVoucher:a1[4]];
  [v3 setVoucherSignature:a1[5]];
  [v3 setTLKSharesPairedWithVoucher:a1[6]];
  return v3;
}

void sub_1000AB610(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = WeakRetained;
  if (v6)
  {
    id v9 = sub_10001267C("SecError");
    os_log_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v33 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "octagon: Error fetching TLKShares to recover: %@",  buf,  0xCu);
    }

    [v8 setError:v6];
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 finishOp]);
    [v8 runBeforeGroupFinished:v11];
  }

  else
  {
    uint64_t v26 = WeakRetained;
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    id v25 = v5;
    id v12 = v5;
    id v13 = [v12 countByEnumeratingWithState:&v27 objects:v31 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v28;
      do
      {
        for (uint64_t i = 0LL; i != v14; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v28 != v15) {
            objc_enumerationMutation(v12);
          }
          uint64_t v17 = *(void **)(*((void *)&v27 + 1) + 8LL * (void)i);
          int v18 = (void *)objc_claimAutoreleasedReturnValue([v17 recordType]);
          unsigned int v19 = [v18 isEqual:@"tlkshare"];

          if (v19)
          {
            id v20 = objc_alloc(&OBJC_CLASS___CKKSTLKShareRecord);
            id v21 = (void *)objc_claimAutoreleasedReturnValue([v26 deps]);
            id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 contextID]);
            __int128 v23 = -[CKKSCKRecordHolder initWithCKRecord:contextID:](v20, "initWithCKRecord:contextID:", v17, v22);

            int v24 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSTLKShareRecord share](v23, "share"));
            [v11 addObject:v24];
          }
        }

        id v14 = [v12 countByEnumeratingWithState:&v27 objects:v31 count:16];
      }

      while (v14);
    }

    id v8 = v26;
    [v26 proceedWithFilteredTLKShares:v11];
    id v6 = 0LL;
    id v5 = v25;
  }
}

void sub_1000AB888(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v11 logResultForEvent:@"OctagonEventPreflightVouchWithRecoveryKey" hardFailure:1 result:v9];

  if (!v7 || v9)
  {
    double v16 = sub_10001267C("SecError");
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 138412290;
      id v20 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "octagon: Error preflighting voucher using recovery key: %@",  (uint8_t *)&v19,  0xCu);
    }

    [WeakRetained setError:v9];
    int v18 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
    [WeakRetained runBeforeGroupFinished:v18];
  }

  else
  {
    id v12 = sub_10001267C("octagon");
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 138412290;
      id v20 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Recovery key ID %@ looks good to go",  (uint8_t *)&v19,  0xCu);
    }

    id v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 ckks]);
    [v15 setCurrentSyncingPolicy:v8];

    [WeakRetained proceedWithRecoveryKeyID:v7];
  }
}

void sub_1000ABE50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000ABFB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000AC1B4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v17 logResultForEvent:@"OctagonEventVoucherWithReroll" hardFailure:1 result:v15];

  if (v15)
  {
    int v18 = sub_10001267C("SecError");
    int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v38 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "octagon: Error preparing voucher using reroll: %@",  buf,  0xCu);
    }

    [WeakRetained setError:v15];
LABEL_16:
    id v25 = (id)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
    [WeakRetained runBeforeGroupFinished:v25];
    goto LABEL_17;
  }

  id v20 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v20 recordRecoveredTLKMetrics:*(void *)(a1 + 32) tlkRecoveryResults:v14 uniqueTLKsRecoveredEvent:@"OARKUniqueTLKsRecoveredCount" totalSharesRecoveredEvent:@"OARKTotalTLKSharesRecoveredCount" totalRecoverableTLKS haresEvent:@"OARKTotalTLKSharesCount" totalRecoverableTLKsEvent:@"OARKUniqueTLKsWithSharesCount" totalViewsWithSharesEvent:@"OARKTLKUniqueViewCount"];

  [WeakRetained setVoucher:v11];
  [WeakRetained setVoucherSig:v12];
  if (![WeakRetained saveVoucher])
  {
LABEL_13:
    __int128 v29 = sub_10001267C("octagon");
    __int128 v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412546;
      id v38 = v11;
      __int16 v39 = 2112;
      id v40 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Successfully vouched with a reroll: %@, %@",  buf,  0x16u);
    }

    int v31 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
    [WeakRetained setNextState:v31];

    goto LABEL_16;
  }

  id v21 = sub_10001267C("octagon");
  id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Saving voucher for later use...", buf, 2u);
  }

  __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  int v24 = (void *)objc_claimAutoreleasedReturnValue([v23 stateHolder]);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472LL;
  void v33[2] = sub_1000AC5B0;
  v33[3] = &unk_1002855F0;
  id v34 = v11;
  id v35 = v12;
  id v36 = v13;
  id v32 = 0LL;
  [v24 persistAccountChanges:v33 error:&v32];
  id v25 = v32;

  if (!v25)
  {

    goto LABEL_13;
  }

  uint64_t v26 = sub_10001267C("octagon");
  __int128 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v38 = v25;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "unable to save voucher: %@", buf, 0xCu);
  }

  __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
  [WeakRetained runBeforeGroupFinished:v28];

LABEL_17:
}

id sub_1000AC5B0(void *a1, void *a2)
{
  id v3 = a2;
  [v3 setVoucher:a1[4]];
  [v3 setVoucherSignature:a1[5]];
  [v3 setTLKSharesPairedWithVoucher:a1[6]];
  return v3;
}

void sub_1000AC5F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v6)
  {
    id v7 = sub_10001267C("SecError");
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v31 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "octagon: Error fetching TLKShares to recover: %@",  buf,  0xCu);
    }
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array", v6));
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  id v10 = v5;
  id v11 = [v10 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v26;
    do
    {
      for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v26 != v13) {
          objc_enumerationMutation(v10);
        }
        id v15 = *(void **)(*((void *)&v25 + 1) + 8LL * (void)i);
        double v16 = (void *)objc_claimAutoreleasedReturnValue([v15 recordType]);
        unsigned int v17 = [v16 isEqual:@"tlkshare"];

        if (v17)
        {
          int v18 = objc_alloc(&OBJC_CLASS___CKKSTLKShareRecord);
          int v19 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
          id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 contextID]);
          id v21 = -[CKKSCKRecordHolder initWithCKRecord:contextID:](v18, "initWithCKRecord:contextID:", v15, v20);

          id v22 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSTLKShareRecord share](v21, "share"));
          [v9 addObject:v22];
        }
      }

      id v12 = [v10 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }

    while (v12);
  }

  [WeakRetained proceedWithFilteredTLKShares:v9];
}

void sub_1000AD074(_Unwind_Exception *a1)
{
}

LABEL_101:
        id v15 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"attempt-sos-upgrade",  @"AttemptSOSUpgrade"));
        goto LABEL_7;
      }

      if (v65)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "We are untrusted, but this platform doesn't support SOS.",  buf,  2u);
      }
    }

    if ([v9 _onqueueContains:@"attempt_sos_consistency"])
    {
      [v9 _onqueueRemoveFlag:@"attempt_sos_consistency"];
      id v66 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext sosAdapter](self, "sosAdapter"));
      id v67 = [v66 sosEnabled];

      id v68 = sub_10001267C("octagon");
      id v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
      uint64_t v69 = os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT);
      if (v67)
      {
        if (v69)
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "Attempting SOS upgrade again (due to a consistency notification)",  buf,  2u);
        }

        goto LABEL_101;
      }

      if (v69)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "Someone would like us to check SOS consistency, but this platform doesn't support SOS.",  buf,  2u);
      }
    }

    if ([v9 _onqueueContains:@"recd_push"])
    {
      [v9 _onqueueRemoveFlag:@"recd_push"];
      id v70 = sub_10001267C("octagon");
      uint64_t v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEFAULT,  "Updating TPH (while untrusted) due to push",  buf,  2u);
      }

      id v15 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"untrusted-update",  @"UntrustedUpdated"));
      goto LABEL_7;
    }

    if ([v9 _onqueueContains:@"cdp_enabled"])
    {
      id v72 = sub_10001267C("octagon");
      __int16 v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
      if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "Removing 'CDP enabled' flag", buf, 2u);
      }

      [v9 _onqueueRemoveFlag:@"cdp_enabled"];
    }

    if ([v9 _onqueueContains:@"check_trust_state"])
    {
      id v74 = sub_10001267C("octagon");
      id v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
      if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "Checking trust state", buf, 2u);
      }

      [v9 _onqueueRemoveFlag:@"check_trust_state"];
      id v15 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"check-trust-state",  @"CheckTrustState"));
      goto LABEL_7;
    }
  }

  if ([v8 isEqualToString:@"UntrustedUpdated"])
  {
    __int128 v76 = objc_alloc(&OBJC_CLASS___OTUpdateTPHOperation);
    id v77 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTUpdateTPHOperation initWithDependencies:intendedState:peerUnknownState:determineCDPState:errorState:forceRefetch:retryFlag:]( v76,  "initWithDependencies:intendedState:peerUnknownState:determineCDPState:errorState:forceRefetch:retryFlag:",  v77,  @"Untrusted",  @"PeerMissingFromServer",  0LL,  @"Untrusted",  0LL,  @"recd_push");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"DetermineiCloudAccountState"])
  {
    id v78 = sub_10001267C("octagon");
    id v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
    if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "Determine iCloud account status", buf, 2u);
    }

    id v80 = objc_alloc(&OBJC_CLASS___OTDetermineCDPCapableAccountStatusOperation);
    uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTDetermineCDPCapableAccountStatusOperation initWithDependencies:stateIfCDPCapable:stateIfNotCDPCapable:stateIfNoAccount:errorState:]( v80,  "initWithDependencies:stateIfCDPCapable:stateIfNotCDPCapable:stateIfNoAccount:errorState:",  v81,  @"Initializing",  @"WaitForCDPCapableSecurityLevel",  @"NoAccount",  @"Error");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"CuttlefishReset"])
  {
    BOOL v82 = sub_10001267C("octagon");
    uint64_t v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(v82);
    if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "Resetting cuttlefish", buf, 2u);
    }

    v269 = objc_alloc(&OBJC_CLASS___OTResetOperation);
    id v271 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext containerName](self, "containerName"));
    id v84 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext contextID](self, "contextID"));
    resetReason = self->_resetReason;
    isGuitarfish = self->_isGuitarfish;
    accountType = self->_accountType;
    uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    __int128 v89 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext cuttlefishXPCWrapper](self, "cuttlefishXPCWrapper"));
    LOBYTE(v265) = isGuitarfish;
    double v16 = -[OTResetOperation init:contextID:reason:idmsTargetContext:idmsCuttlefishPassword:notifyIdMS:isGuitarfish:accountType:intendedState:dependencies:errorState:cuttlefishXPCWrapper:]( v269,  "init:contextID:reason:idmsTargetContext:idmsCuttlefishPassword:notifyIdMS:isGuitarfish:accountType:intendedS tate:dependencies:errorState:cuttlefishXPCWrapper:",  v271,  v84,  resetReason,  0LL,  0LL,  0LL,  v265,  accountType,  @"CKKSResetAfterOctagonReset",  v88,  @"Error",  v89);

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"CKKSResetAfterOctagonReset"])
  {
    uint64_t v90 = objc_alloc(&OBJC_CLASS___OTLocalCKKSResetOperation);
    uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTLocalCKKSResetOperation initWithDependencies:intendedState:errorState:]( v90,  "initWithDependencies:intendedState:errorState:",  v91,  @"LocalReset",  @"BecomeUntrusted");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"LocalReset"])
  {
    __int16 v92 = sub_10001267C("octagon");
    id v93 = (os_log_s *)objc_claimAutoreleasedReturnValue(v92);
    if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "Attempting local-reset", buf, 2u);
    }

    __int16 v94 = objc_alloc(&OBJC_CLASS___OTLocalResetOperation);
    id v95 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTLocalResetOperation initWithDependencies:intendedState:errorState:]( v94,  "initWithDependencies:intendedState:errorState:",  v95,  @"LocalResetClearLocalContextState",  @"Initializing");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"LocalResetClearLocalContextState"])
  {
    -[OTCuttlefishContext clearContextState](self, "clearContextState");
    id v15 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"move-to-initializing",  @"Initializing"));
    goto LABEL_7;
  }

  if ([v8 isEqualToString:@"NoAccountDoReset"])
  {
    id v96 = sub_10001267C("octagon");
    id v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v96);
    if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_DEFAULT,  "Attempting local-reset as part of signout",  buf,  2u);
    }

    -[OTCuttlefishContext clearContextState](self, "clearContextState");
    id v98 = objc_alloc(&OBJC_CLASS___OTLocalResetOperation);
    id v99 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTLocalResetOperation initWithDependencies:intendedState:errorState:]( v98,  "initWithDependencies:intendedState:errorState:",  v99,  @"NoAccount",  @"NoAccount");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"PeerMissingFromServer"])
  {
    -[OTCuttlefishContext clearContextState](self, "clearContextState");
    id v100 = objc_alloc(&OBJC_CLASS___OTLocalResetOperation);
    id v101 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTLocalResetOperation initWithDependencies:intendedState:errorState:]( v100,  "initWithDependencies:intendedState:errorState:",  v101,  @"BecomeUntrusted",  @"BecomeUntrusted");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"EnsureConsistency"])
  {
    __int128 v102 = sub_10001267C("octagon");
    __int128 v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
    if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEFAULT,  "Ensuring consistency of things that might've changed",  buf,  2u);
    }

    __int128 v104 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext sosAdapter](self, "sosAdapter"));
    __int128 v105 = [v104 sosEnabled];

    if (v105)
    {
      __int128 v106 = objc_alloc(&OBJC_CLASS___OTEnsureOctagonKeyConsistency);
      __int128 v107 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
      double v16 = -[OTEnsureOctagonKeyConsistency initWithDependencies:intendedState:errorState:]( v106,  "initWithDependencies:intendedState:errorState:",  v107,  @"EnsureUpdatePreapprovals",  @"BecomeReady");

      goto LABEL_8;
    }

    id v15 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"no-consistency-checks",  @"BecomeReady"));
    goto LABEL_7;
  }

  if ([v8 isEqualToString:@"BottlePreloadOctagonKeysInSOS"])
  {
    __int128 v108 = sub_10001267C("octagon");
    __int128 v109 = (os_log_s *)objc_claimAutoreleasedReturnValue(v108);
    if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v109,  OS_LOG_TYPE_DEFAULT,  "Preloading Octagon Keys on the SOS Account",  buf,  2u);
    }

    __int128 v110 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext sosAdapter](self, "sosAdapter"));
    __int128 v111 = [v110 sosEnabled];

    if (!v111)
    {
      id v15 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"no-preload-octagon-key",  @"SetAccountSettings"));
      goto LABEL_7;
    }

    __int128 v112 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext custodianRecoveryKey](self, "custodianRecoveryKey"));
    if (v112)
    {
      __int128 v113 = @"JoinSOSAfterCKKSFetch";
      __int128 v114 = @"JoinSOSAfterCKKSFetch";
    }

    else
    {
      __int128 v127 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext recoveryKey](self, "recoveryKey"));
      id v128 = @"JoinSOSAfterCKKSFetch";
      if (!v127) {
        id v128 = @"SetAccountSettings";
      }
      __int128 v113 = v128;
    }

    __int128 v129 = objc_alloc(&OBJC_CLASS___OTPreloadOctagonKeysOperation);
    id v130 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTPreloadOctagonKeysOperation initWithDependencies:intendedState:errorState:]( v129,  "initWithDependencies:intendedState:errorState:",  v130,  v113,  v113);

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"EnsureUpdatePreapprovals"])
  {
    __int128 v115 = sub_10001267C("octagon");
    __int128 v116 = (os_log_s *)objc_claimAutoreleasedReturnValue(v115);
    if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v116,  OS_LOG_TYPE_DEFAULT,  "SOS is enabled; ensuring preapprovals are correct",
        buf,
        2u);
    }

    __int128 v117 = objc_alloc(&OBJC_CLASS___OTSOSUpdatePreapprovalsOperation);
    __int128 v118 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTSOSUpdatePreapprovalsOperation initWithDependencies:intendedState:sosNotPresentState:errorState:]( v117,  "initWithDependencies:intendedState:sosNotPresentState:errorState:",  v118,  @"BecomeReady",  @"BecomeReady",  @"BecomeReady");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"AttemptSOSUpgradeDetermineCDPState"])
  {
    __int128 v119 = objc_alloc(&OBJC_CLASS___OTDetermineCDPBitStatusOperation);
    __int128 v120 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTDetermineCDPBitStatusOperation initWithDependencies:intendedState:errorState:]( v119,  "initWithDependencies:intendedState:errorState:",  v120,  @"AttemptSOSUpgrade",  @"WaitForCDP");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"AttemptSOSUpgrade"])
  {
    __int128 v121 = sub_10001267C("octagon");
    id v122 = (os_log_s *)objc_claimAutoreleasedReturnValue(v121);
    if (os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEFAULT, "Investigating SOS status", buf, 2u);
    }

    id v123 = objc_alloc(&OBJC_CLASS___OTSOSUpgradeOperation);
    __int128 v124 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    unsigned int v125 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext prepareInformation](self, "prepareInformation"));
    __int128 v126 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext policyOverride](self, "policyOverride"));
    double v16 = -[OTSOSUpgradeOperation initWithDependencies:intendedState:ckksConflictState:errorState:deviceInfo:policyOverride:]( v123,  "initWithDependencies:intendedState:ckksConflictState:errorState:deviceInfo:policyOverride:",  v124,  @"BecomeReady",  @"SOSUpgradeCKKSReset",  @"BecomeUntrusted",  v125,  v126);

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"SOSUpgradeCKKSReset"])
  {
    __int128 v131 = objc_alloc(&OBJC_CLASS___OTLocalCKKSResetOperation);
    id v132 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTLocalCKKSResetOperation initWithDependencies:intendedState:errorState:]( v131,  "initWithDependencies:intendedState:errorState:",  v132,  @"SOSUpgradeAfterCKKSReset",  @"BecomeUntrusted");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"SOSUpgradeAfterCKKSReset"])
  {
    __int128 v133 = objc_alloc(&OBJC_CLASS___OTSOSUpgradeOperation);
    id v134 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    uint64_t v135 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext prepareInformation](self, "prepareInformation"));
    id v136 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext policyOverride](self, "policyOverride"));
    double v16 = -[OTSOSUpgradeOperation initWithDependencies:intendedState:ckksConflictState:errorState:deviceInfo:policyOverride:]( v133,  "initWithDependencies:intendedState:ckksConflictState:errorState:deviceInfo:policyOverride:",  v134,  @"BecomeReady",  @"BecomeUntrusted",  @"BecomeUntrusted",  v135,  v136);

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"OctagonStateStashAccountSettingsForRecoveryKey"])
  {
    id v137 = objc_alloc(&OBJC_CLASS___OTStashAccountSettingsOperation);
    id v138 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTStashAccountSettingsOperation initWithDependencies:intendedState:errorState:accountSettings:accountWide:forceFetch:]( v137,  "initWithDependencies:intendedState:errorState:accountSettings:accountWide:forceFetch:",  v138,  @"CreateIdentityForRecoveryKey",  @"CreateIdentityForRecoveryKey",  self,  1LL,  1LL);

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"CreateIdentityForRecoveryKey"])
  {
    id v139 = objc_alloc(&OBJC_CLASS___OTPrepareOperation);
    id v140 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    id v141 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext prepareInformation](self, "prepareInformation"));
    uint64_t v142 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext policyOverride](self, "policyOverride"));
    uint64_t v143 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext accountSettings](self, "accountSettings"));
    double v16 = -[OTPrepareOperation initWithDependencies:intendedState:errorState:deviceInfo:policyOverride:accountSettings:epoch:]( v139,  "initWithDependencies:intendedState:errorState:deviceInfo:policyOverride:accountSettings:epoch:",  v140,  @"VouchWithRecoveryKey",  @"BecomeUntrusted",  v141,  v142,  v143,  1LL);

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"CreateIdentityForCustodianRecoveryKey"])
  {
    id v144 = objc_alloc(&OBJC_CLASS___OTPrepareOperation);
    uint64_t v145 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    v146 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext prepareInformation](self, "prepareInformation"));
    id v147 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext policyOverride](self, "policyOverride"));
    uint64_t v148 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext accountSettings](self, "accountSettings"));
    double v16 = -[OTPrepareOperation initWithDependencies:intendedState:errorState:deviceInfo:policyOverride:accountSettings:epoch:]( v144,  "initWithDependencies:intendedState:errorState:deviceInfo:policyOverride:accountSettings:epoch:",  v145,  @"VouchWithCustodianRecoveryKey",  @"BecomeUntrusted",  v146,  v147,  v148,  1LL);

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"BottleJoinCreateIdentity"])
  {
    v149 = objc_alloc(&OBJC_CLASS___OTPrepareOperation);
    v150 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    size_t v151 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext prepareInformation](self, "prepareInformation"));
    v152 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext policyOverride](self, "policyOverride"));
    id v153 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext accountSettings](self, "accountSettings"));
    double v16 = -[OTPrepareOperation initWithDependencies:intendedState:errorState:deviceInfo:policyOverride:accountSettings:epoch:]( v149,  "initWithDependencies:intendedState:errorState:deviceInfo:policyOverride:accountSettings:epoch:",  v150,  @"BottleJoinVouchWithBottle",  @"BecomeUntrusted",  v151,  v152,  v153,  1LL);

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"BottleJoinVouchWithBottle"])
  {
    uint64_t v154 = objc_alloc(&OBJC_CLASS___OTVouchWithBottleOperation);
    unsigned int v155 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    LOBYTE(v265) = 1;
    double v16 = -[OTVouchWithBottleOperation initWithDependencies:intendedState:errorState:bottleID:entropy:bottleSalt:saveVoucher:]( v154,  "initWithDependencies:intendedState:errorState:bottleID:entropy:bottleSalt:saveVoucher:",  v155,  @"InitiatorSetCDPBit",  @"BecomeUntrusted",  self->_bottleID,  self->_entropy,  self->_bottleSalt,  v265);

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"VouchWithRecoveryKey"])
  {
    id v156 = objc_alloc(&OBJC_CLASS___OTVouchWithRecoveryKeyOperation);
    unsigned __int8 v157 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    id v158 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext recoveryKey](self, "recoveryKey"));
    double v16 = -[OTVouchWithRecoveryKeyOperation initWithDependencies:intendedState:errorState:recoveryKey:saveVoucher:]( v156,  "initWithDependencies:intendedState:errorState:recoveryKey:saveVoucher:",  v157,  @"InitiatorSetCDPBit",  @"BecomeUntrusted",  v158,  1LL);

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"VouchWithCustodianRecoveryKey"])
  {
    v159 = objc_alloc(&OBJC_CLASS___OTVouchWithCustodianRecoveryKeyOperation);
    uint64_t v160 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    unsigned __int8 v161 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext custodianRecoveryKey](self, "custodianRecoveryKey"));
    double v16 = -[OTVouchWithCustodianRecoveryKeyOperation initWithDependencies:intendedState:errorState:custodianRecoveryKey:saveVoucher:]( v159,  "initWithDependencies:intendedState:errorState:custodianRecoveryKey:saveVoucher:",  v160,  @"InitiatorSetCDPBit",  @"BecomeUntrusted",  v161,  1LL);

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"PrepareAndRecoverTLKSharesForInheritancePeer"])
  {
    id v162 = objc_alloc(&OBJC_CLASS___OTPrepareAndRecoverTLKSharesForInheritancePeerOperation);
    id v163 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    v164 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext inheritanceKey](self, "inheritanceKey"));
    v165 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext prepareInformation](self, "prepareInformation"));
    id v166 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext policyOverride](self, "policyOverride"));
    LOBYTE(v265) = 1;
    double v16 = -[OTPrepareAndRecoverTLKSharesForInheritancePeerOperation initWithDependencies:intendedState:errorState:ik:deviceInfo:policyOverride:isInheritedAccount:epoch:]( v162,  "initWithDependencies:intendedState:errorState:ik:deviceInfo:policyOverride:isInheritedAccount:epoch:",  v163,  @"BecomeInherited",  @"Error",  v164,  v165,  v166,  v265,  1LL);

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"JoinSOSAfterCKKSFetch"])
  {
    id v167 = objc_alloc(&OBJC_CLASS___OTJoinSOSAfterCKKSFetchOperation);
    v168 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTJoinSOSAfterCKKSFetchOperation initWithDependencies:intendedState:errorState:]( v167,  "initWithDependencies:intendedState:errorState:",  v168,  @"SetAccountSettings",  @"SetAccountSettings");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"InitiatorSetCDPBit"])
  {
    uint64_t v169 = objc_alloc(&OBJC_CLASS___OTSetCDPBitOperation);
    v170 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTSetCDPBitOperation initWithDependencies:intendedState:errorState:]( v169,  "initWithDependencies:intendedState:errorState:",  v170,  @"InitiatorUpdateDeviceList",  @"DetermineCDPState");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"InitiatorUpdateDeviceList"])
  {
    uint64_t v171 = objc_alloc(&OBJC_CLASS___OTUpdateTrustedDeviceListOperation);
    id v172 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTUpdateTrustedDeviceListOperation initWithDependencies:intendedState:listUpdatesState:errorState:retryFlag:]( v171,  "initWithDependencies:intendedState:listUpdatesState:errorState:retryFlag:",  v172,  @"InitiatorJoin",  @"InitiatorJoin",  @"BecomeUntrusted",  0LL);

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"InitiatorJoin"])
  {
    CFDataRef v173 = objc_alloc(&OBJC_CLASS___OTJoinWithVoucherOperation);
    v174 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTJoinWithVoucherOperation initWithDependencies:intendedState:ckksConflictState:errorState:]( v173,  "initWithDependencies:intendedState:ckksConflictState:errorState:",  v174,  @"BottlePreloadOctagonKeysInSOS",  @"InitiatorJoinCKKSReset",  @"BecomeUntrusted");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"InitiatorJoinCKKSReset"])
  {
    uint64_t v175 = objc_alloc(&OBJC_CLASS___OTLocalCKKSResetOperation);
    v176 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTLocalCKKSResetOperation initWithDependencies:intendedState:errorState:]( v175,  "initWithDependencies:intendedState:errorState:",  v176,  @"InitiatorJoinAfterCKKSReset",  @"BecomeUntrusted");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"InitiatorJoinAfterCKKSReset"])
  {
    id v177 = objc_alloc(&OBJC_CLASS___OTJoinWithVoucherOperation);
    CFDataRef v178 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTJoinWithVoucherOperation initWithDependencies:intendedState:ckksConflictState:errorState:]( v177,  "initWithDependencies:intendedState:ckksConflictState:errorState:",  v178,  @"BottlePreloadOctagonKeysInSOS",  @"BecomeUntrusted",  @"BecomeUntrusted");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"ResetBecomeUntrusted"])
  {
    id v15 = objc_claimAutoreleasedReturnValue( -[OTCuttlefishContext becomeUntrustedOperation:]( self,  "becomeUntrustedOperation:",  @"ResetAnyMissingTLKCKKSViews"));
    goto LABEL_7;
  }

  if ([v8 isEqualToString:@"ResetAndEstablish"])
  {
    v270 = objc_alloc(&OBJC_CLASS___OTResetOperation);
    __int128 v272 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext containerName](self, "containerName"));
    CFDataRef v179 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext contextID](self, "contextID"));
    idmsTargetContext = self->_idmsTargetContext;
    BOOL v268 = self->_resetReason;
    idmsCuttlefishPassword = self->_idmsCuttlefishPassword;
    notifyIdMS = self->_notifyIdMS;
    uint64_t v181 = self->_isGuitarfish;
    BOOL v182 = self->_accountType;
    id v183 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    unsigned int v184 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext cuttlefishXPCWrapper](self, "cuttlefishXPCWrapper"));
    LOBYTE(v265) = v181;
    double v16 = -[OTResetOperation init:contextID:reason:idmsTargetContext:idmsCuttlefishPassword:notifyIdMS:isGuitarfish:accountType:intendedState:dependencies:errorState:cuttlefishXPCWrapper:]( v270,  "init:contextID:reason:idmsTargetContext:idmsCuttlefishPassword:notifyIdMS:isGuitarfish:accountType:intendedS tate:dependencies:errorState:cuttlefishXPCWrapper:",  v272,  v179,  v268,  idmsTargetContext,  idmsCuttlefishPassword,  notifyIdMS,  v265,  v182,  @"EstablishEnableCDPBit",  v183,  @"Error",  v184);

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"ResetAnyMissingTLKCKKSViews"])
  {
    v185 = objc_alloc(&OBJC_CLASS___OTResetCKKSZonesLackingTLKsOperation);
    CFStringRef v186 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTResetCKKSZonesLackingTLKsOperation initWithDependencies:intendedState:errorState:]( v185,  "initWithDependencies:intendedState:errorState:",  v186,  @"ResetAndEstablish",  @"Error");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"EstablishEnableCDPBit"])
  {
    id v187 = objc_alloc(&OBJC_CLASS___OTSetCDPBitOperation);
    uint64_t v188 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTSetCDPBitOperation initWithDependencies:intendedState:errorState:]( v187,  "initWithDependencies:intendedState:errorState:",  v188,  @"ReEnactDeviceList",  @"Error");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"ReEnactDeviceList"])
  {
    id v189 = objc_alloc(&OBJC_CLASS___OTUpdateTrustedDeviceListOperation);
    id v190 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTUpdateTrustedDeviceListOperation initWithDependencies:intendedState:listUpdatesState:errorState:retryFlag:]( v189,  "initWithDependencies:intendedState:listUpdatesState:errorState:retryFlag:",  v190,  @"ReEnactPrepare",  @"ReEnactPrepare",  @"BecomeUntrusted",  0LL);

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"ReEnactPrepare"])
  {
    uint64_t v191 = objc_alloc(&OBJC_CLASS___OTPrepareOperation);
    id v192 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    id v193 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext prepareInformation](self, "prepareInformation"));
    CFDataRef v194 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext policyOverride](self, "policyOverride"));
    id v195 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext accountSettings](self, "accountSettings"));
    double v16 = -[OTPrepareOperation initWithDependencies:intendedState:errorState:deviceInfo:policyOverride:accountSettings:epoch:]( v191,  "initWithDependencies:intendedState:errorState:deviceInfo:policyOverride:accountSettings:epoch:",  v192,  @"ResetAndEstablishClearLocalContextState",  @"Error",  v193,  v194,  v195,  0LL);

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"ResetAndEstablishClearLocalContextState"])
  {
    CFDataRef v196 = sub_10001267C("octagon");
    unsigned int v197 = (os_log_s *)objc_claimAutoreleasedReturnValue(v196);
    if (os_log_type_enabled(v197, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v197, OS_LOG_TYPE_DEFAULT, "clear cuttlefish context state", buf, 2u);
    }

    -[OTCuttlefishContext clearContextState](self, "clearContextState");
    id v15 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"moving-to-re-enact-ready-to-establish",  @"ReEnactReadyToEstablish"));
    goto LABEL_7;
  }

  if ([v8 isEqualToString:@"ReEnactReadyToEstablish"])
  {
    id v198 = objc_alloc(&OBJC_CLASS___OTEstablishOperation);
    id v199 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTEstablishOperation initWithDependencies:intendedState:ckksConflictState:errorState:]( v198,  "initWithDependencies:intendedState:ckksConflictState:errorState:",  v199,  @"EscrowTriggerUpdate",  @"EstablishCKKSReset",  @"BecomeUntrusted");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"EstablishCKKSReset"])
  {
    id v200 = objc_alloc(&OBJC_CLASS___OTLocalCKKSResetOperation);
    v201 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTLocalCKKSResetOperation initWithDependencies:intendedState:errorState:]( v200,  "initWithDependencies:intendedState:errorState:",  v201,  @"EstablishAfterCKKSReset",  @"BecomeUntrusted");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"EstablishAfterCKKSReset"])
  {
    unsigned __int8 v202 = objc_alloc(&OBJC_CLASS___OTEstablishOperation);
    v203 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTEstablishOperation initWithDependencies:intendedState:ckksConflictState:errorState:]( v202,  "initWithDependencies:intendedState:ckksConflictState:errorState:",  v203,  @"EscrowTriggerUpdate",  @"BecomeUntrusted",  @"BecomeUntrusted");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"EscrowTriggerUpdate"])
  {
    id v204 = objc_alloc(&OBJC_CLASS___OTTriggerEscrowUpdateOperation);
    CFTypeRef v205 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTTriggerEscrowUpdateOperation initWithDependencies:intendedState:errorState:]( v204,  "initWithDependencies:intendedState:errorState:",  v205,  @"BecomeReady",  @"Error");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"HealthCheckLeaveClique"])
  {
    id v206 = objc_alloc(&OBJC_CLASS___OTLeaveCliqueOperation);
    unsigned int v207 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTLeaveCliqueOperation initWithDependencies:intendedState:errorState:]( v206,  "initWithDependencies:intendedState:errorState:",  v207,  @"BecomeUntrusted",  @"BecomeUntrusted");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"WaitForClassCUnlock"])
  {
    if ([v9 _onqueueContains:@"unlocked"])
    {
      [v9 _onqueueRemoveFlag:@"unlocked"];
      id v208 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@",  @"initializing-after-initial-unlock"));
      double v16 = (OTPrepareOperation *)objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  v208,  @"Initializing"));

      goto LABEL_8;
    }

    goto LABEL_242;
  }

  if ([v8 isEqualToString:@"WaitForUnlock"])
  {
    if ([v9 _onqueueContains:@"unlocked"])
    {
      [v9 _onqueueRemoveFlag:@"unlocked"];
      BOOL v209 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@",  @"initializing-after-unlock"));
      double v16 = (OTPrepareOperation *)objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  v209,  @"Initializing"));

      goto LABEL_8;
    }

LABEL_242:
    uint64_t v210 = -[OctagonPendingFlag initWithFlag:conditions:]( objc_alloc(&OBJC_CLASS___OctagonPendingFlag),  "initWithFlag:conditions:",  @"unlocked",  1LL);
    [v10 _onqueueHandlePendingFlagLater:v210];

    goto LABEL_31;
  }

  if ([v8 isEqualToString:@"UpdateSOSPreapprovals"])
  {
    v211 = sub_10001267C("octagon");
    BOOL v212 = (os_log_s *)objc_claimAutoreleasedReturnValue(v211);
    if (os_log_type_enabled(v212, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v212, OS_LOG_TYPE_DEFAULT, "Updating SOS preapprovals", buf, 2u);
    }

    CFDataRef v213 = objc_alloc(&OBJC_CLASS___OTSOSUpdatePreapprovalsOperation);
    uint64_t v214 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTSOSUpdatePreapprovalsOperation initWithDependencies:intendedState:sosNotPresentState:errorState:]( v213,  "initWithDependencies:intendedState:sosNotPresentState:errorState:",  v214,  @"Ready",  @"Ready",  @"Ready");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"AssistCKKSTLKUpload"])
  {
    id v215 = objc_alloc(&OBJC_CLASS___OTUploadNewCKKSTLKsOperation);
    v216 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTUploadNewCKKSTLKsOperation initWithDependencies:intendedState:ckksConflictState:peerMissingState:errorState:]( v215,  "initWithDependencies:intendedState:ckksConflictState:peerMissingState:errorState:",  v216,  @"Ready",  @"AssistCKKSTLKUploadCKKSReset",  @"ReadyUpdated",  @"Ready");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"AssistCKKSTLKUploadCKKSReset"])
  {
    id v217 = objc_alloc(&OBJC_CLASS___OTLocalCKKSResetOperation);
    id v218 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTLocalCKKSResetOperation initWithDependencies:intendedState:errorState:]( v217,  "initWithDependencies:intendedState:errorState:",  v218,  @"AssistCKKSTLKUploadAfterCKKSReset",  @"BecomeReady");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"AssistCKKSTLKUploadAfterCKKSReset"])
  {
    uint64_t v219 = objc_alloc(&OBJC_CLASS___OTUploadNewCKKSTLKsOperation);
    id v220 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTUploadNewCKKSTLKsOperation initWithDependencies:intendedState:ckksConflictState:peerMissingState:errorState:]( v219,  "initWithDependencies:intendedState:ckksConflictState:peerMissingState:errorState:",  v220,  @"Ready",  @"Ready",  @"ReadyUpdated",  @"Ready");

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"OctagonStateStashAccountSettingsForReroll"])
  {
    id v221 = objc_alloc(&OBJC_CLASS___OTStashAccountSettingsOperation);
    id v222 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTStashAccountSettingsOperation initWithDependencies:intendedState:errorState:accountSettings:accountWide:forceFetch:]( v221,  "initWithDependencies:intendedState:errorState:accountSettings:accountWide:forceFetch:",  v222,  @"OctagonStateCreateIdentityForReroll",  @"OctagonStateCreateIdentityForReroll",  self,  1LL,  1LL);

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"OctagonStateCreateIdentityForReroll"])
  {
    __int128 v223 = objc_alloc(&OBJC_CLASS___OTPrepareOperation);
    id v224 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    __int128 v225 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext prepareInformation](self, "prepareInformation"));
    __int128 v226 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext policyOverride](self, "policyOverride"));
    id v227 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext accountSettings](self, "accountSettings"));
    double v16 = -[OTPrepareOperation initWithDependencies:intendedState:errorState:deviceInfo:policyOverride:accountSettings:epoch:]( v223,  "initWithDependencies:intendedState:errorState:deviceInfo:policyOverride:accountSettings:epoch:",  v224,  @"OctagonStateVouchWithReroll",  @"BecomeUntrusted",  v225,  v226,  v227,  1LL);

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"OctagonStateVouchWithReroll"])
  {
    id v228 = objc_alloc(&OBJC_CLASS___OTVouchWithRerollOperation);
    id v229 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTVouchWithRerollOperation initWithDependencies:intendedState:errorState:saveVoucher:]( v228,  "initWithDependencies:intendedState:errorState:saveVoucher:",  v229,  @"InitiatorSetCDPBit",  @"BecomeUntrusted",  1LL);

    goto LABEL_8;
  }

  if ([v8 isEqualToString:@"BecomeInherited"])
  {
    id v15 = objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext becomeInheritedOperation](self, "becomeInheritedOperation"));
    goto LABEL_7;
  }

  if (![v8 isEqualToString:@"Ready"])
  {
    if ([v8 isEqualToString:@"ReadyUpdated"])
    {
      char v237 = objc_alloc(&OBJC_CLASS___OTUpdateTPHOperation);
      id v238 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
      double v16 = -[OTUpdateTPHOperation initWithDependencies:intendedState:peerUnknownState:determineCDPState:errorState:forceRefetch:retryFlag:]( v237,  "initWithDependencies:intendedState:peerUnknownState:determineCDPState:errorState:forceRefetch:retryFlag:",  v238,  @"Ready",  @"PeerMissingFromServer",  0LL,  @"Ready",  0LL,  @"recd_push");

      goto LABEL_8;
    }

    [v8 isEqualToString:@"Error"];
    goto LABEL_31;
  }

  if ([v9 _onqueueContains:@"recd_push"])
  {
    [v9 _onqueueRemoveFlag:@"recd_push"];
    id v235 = sub_10001267C("octagon");
    id v236 = (os_log_s *)objc_claimAutoreleasedReturnValue(v235);
    if (os_log_type_enabled(v236, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v236,  OS_LOG_TYPE_DEFAULT,  "Updating TPH (while ready) due to push",  buf,  2u);
    }

    id v15 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"octagon-update",  @"ReadyUpdated"));
    goto LABEL_7;
  }

  if ([v9 _onqueueContains:@"tlk_upload_needed"])
  {
    [v9 _onqueueRemoveFlag:@"tlk_upload_needed"];
    id v15 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"ckks-assist",  @"AssistCKKSTLKUpload"));
    goto LABEL_7;
  }

  if ([v9 _onqueueContains:@"attempt_machine_id_list"])
  {
    [v9 _onqueueRemoveFlag:@"attempt_machine_id_list"];
    __int128 v239 = sub_10001267C("octagon");
    id v240 = (os_log_s *)objc_claimAutoreleasedReturnValue(v239);
    if (os_log_type_enabled(v240, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v240,  OS_LOG_TYPE_DEFAULT,  "Received an suggestion to update the machine ID list (while ready); updating trusted device list",
        buf,
        2u);
    }

    unsigned int v241 = objc_alloc(&OBJC_CLASS___OTUpdateTrustedDeviceListOperation);
    id v242 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext operationDependencies](self, "operationDependencies"));
    double v16 = -[OTUpdateTrustedDeviceListOperation initWithDependencies:intendedState:listUpdatesState:errorState:retryFlag:]( v241,  "initWithDependencies:intendedState:listUpdatesState:errorState:retryFlag:",  v242,  @"Ready",  @"ReadyUpdated",  @"Ready",  @"attempt_machine_id_list");

    goto LABEL_8;
  }

  if ([v9 _onqueueContains:@"attempt_sos_update_preapprovals"])
  {
    [v9 _onqueueRemoveFlag:@"attempt_sos_update_preapprovals"];
    __int128 v243 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext sosAdapter](self, "sosAdapter"));
    id v244 = [v243 sosEnabled];

    __int128 v245 = sub_10001267C("octagon");
    v246 = (os_log_s *)objc_claimAutoreleasedReturnValue(v245);
    id v247 = os_log_type_enabled(v246, OS_LOG_TYPE_DEFAULT);
    if (v244)
    {
      if (v247)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v246,  OS_LOG_TYPE_DEFAULT,  "Attempt SOS Update preapprovals again!",  buf,  2u);
      }

      id v15 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"attempt-sos-update-preapproval",  @"UpdateSOSPreapprovals"));
      goto LABEL_7;
    }

    if (v247)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v246,  OS_LOG_TYPE_DEFAULT,  "We are untrusted, but this platform doesn't support SOS.",  buf,  2u);
    }
  }

  if ([v9 _onqueueContains:@"attempt_sos_consistency"])
  {
    [v9 _onqueueRemoveFlag:@"attempt_sos_consistency"];
    uint64_t v248 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext sosAdapter](self, "sosAdapter"));
    v249 = [v248 sosEnabled];

    unsigned int v250 = sub_10001267C("octagon");
    uint64_t v251 = (os_log_s *)objc_claimAutoreleasedReturnValue(v250);
    v252 = os_log_type_enabled(v251, OS_LOG_TYPE_DEFAULT);
    if (v249)
    {
      if (v252)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v251,  OS_LOG_TYPE_DEFAULT,  "Attempting SOS consistency checks",  buf,  2u);
      }

      id v15 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"attempt-sos-update-preapproval",  @"EnsureConsistency"));
      goto LABEL_7;
    }

    if (v252)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v251,  OS_LOG_TYPE_DEFAULT,  "Someone would like us to check SOS consistency, but this platform doesn't support SOS.",  buf,  2u);
    }
  }

  if ([v9 _onqueueContains:@"attempt_ucv_upgrade"])
  {
    [v9 _onqueueRemoveFlag:@"attempt_ucv_upgrade"];
    id v253 = sub_10001267C("octagon");
    v254 = (os_log_s *)objc_claimAutoreleasedReturnValue(v253);
    if (os_log_type_enabled(v254, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v254,  OS_LOG_TYPE_DEFAULT,  "Attempting user-view control upgrade",  buf,  2u);
    }

    id v15 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"attempt-user-view-upgrade",  @"SetUserControllableViewsToPeerConsensus"));
    goto LABEL_7;
  }

  if ([v9 _onqueueContains:@"policy_check_needed"])
  {
    [v9 _onqueueRemoveFlag:@"policy_check_needed"];
    v255 = sub_10001267C("octagon");
    id v256 = (os_log_s *)objc_claimAutoreleasedReturnValue(v255);
    if (os_log_type_enabled(v256, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v256, OS_LOG_TYPE_DEFAULT, "Updating CKKS policy", buf, 2u);
    }

    id v15 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"ckks-policy-update",  @"ReadyUpdated"));
    goto LABEL_7;
  }

  if ([v9 _onqueueContains:@"ckks_views_changed"])
  {
    [v9 _onqueueRemoveFlag:@"ckks_views_changed"];
    id v15 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"ckks-update-trust",  @"BecomeReady"));
    goto LABEL_7;
  }

  if ([v9 _onqueueContains:@"se_id_changed"])
  {
    [v9 _onqueueRemoveFlag:@"se_id_changed"];
    id v15 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"octagon-set-secureelement",  @"ReadyUpdated"));
    goto LABEL_7;
  }

  if ([v9 _onqueueContains:@"account_available"])
  {
    id v257 = sub_10001267C("octagon");
    uint64_t v258 = (os_log_s *)objc_claimAutoreleasedReturnValue(v257);
    if (os_log_type_enabled(v258, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v258,  OS_LOG_TYPE_DEFAULT,  "Removing 'account is available' flag",  buf,  2u);
    }

    [v9 _onqueueRemoveFlag:@"account_available"];
  }

  if ([v9 _onqueueContains:@"idms_level"])
  {
    v259 = sub_10001267C("octagon");
    v260 = (os_log_s *)objc_claimAutoreleasedReturnValue(v259);
    if (os_log_type_enabled(v260, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v260,  OS_LOG_TYPE_DEFAULT,  "Removing 'IDMS level changed' flag",  buf,  2u);
    }

    [v9 _onqueueRemoveFlag:@"idms_level"];
  }

  if ([v9 _onqueueContains:@"cdp_enabled"])
  {
    v261 = sub_10001267C("octagon");
    v262 = (os_log_s *)objc_claimAutoreleasedReturnValue(v261);
    if (os_log_type_enabled(v262, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v262, OS_LOG_TYPE_DEFAULT, "Removing 'CDP enabled' flag", buf, 2u);
    }

    [v9 _onqueueRemoveFlag:@"cdp_enabled"];
  }

  if (![v9 _onqueueContains:@"check_on_rtc_metrics"])
  {
LABEL_263:
    id v230 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
    uint64_t v231 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v230 setDateProperty:v231 forKey:@"OALastKSR"];

    __int128 v232 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext launchSequence](self, "launchSequence"));
    [v232 launch];

    __int128 v233 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
    uint64_t v234 = (void *)objc_claimAutoreleasedReturnValue(-[OTCuttlefishContext launchSequence](self, "launchSequence"));
    [v233 noteLaunchSequence:v234];

    goto LABEL_31;
  }

  v263 = sub_10001267C("octagon-metrics");
  id v264 = (os_log_s *)objc_claimAutoreleasedReturnValue(v263);
  if (os_log_type_enabled(v264, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v264, OS_LOG_TYPE_DEFAULT, "Checking metrics", buf, 2u);
  }

  [v9 _onqueueRemoveFlag:@"check_on_rtc_metrics"];
  *(void *)__int128 buf = 0xAAAAAAAAAAAAAAAALL;
  objc_initWeak((id *)buf, self);
  v273[0] = _NSConcreteStackBlock;
  v273[1] = 3221225472LL;
  v273[2] = sub_1000C7BAC;
  v273[3] = &unk_100291A88;
  objc_copyWeak(&v274, (id *)buf);
  double v16 = (OTPrepareOperation *)objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:intending:errorState:withBlockTakingSelf:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:intending:errorState:withBlockTakingSelf:",  @"check-on-metrics",  @"Ready",  @"Ready",  v273));
  objc_destroyWeak(&v274);
  objc_destroyWeak((id *)buf);
LABEL_8:

  return v16;
}

void sub_1000B3028(_Unwind_Exception *a1)
{
}

void sub_1000B32D0(_Unwind_Exception *a1)
{
}

void sub_1000B3444(_Unwind_Exception *a1)
{
}

void sub_1000B36C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000B3828( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000B3990( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1000B3C4C(_Unwind_Exception *a1)
{
}

void sub_1000B3D40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000B3E18(_Unwind_Exception *a1)
{
}

void sub_1000B3EF0(_Unwind_Exception *a1)
{
}

void sub_1000B4830( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, id location)
{
}

void sub_1000B5420( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000B57F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_1000B5F58(_Unwind_Exception *a1)
{
}

void sub_1000B89FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1000BA7F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34)
{
}

void sub_1000BBE94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_1000BE1A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id location)
{
}

void sub_1000BEA04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000BEB7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000BED90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000BF9CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = sub_10001267C("SecError");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "octagon: failed to reset cdp account contents: %@",  (uint8_t *)&v7,  0xCu);
    }
  }

  else
  {
    id v6 = sub_10001267C("octagon");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "successfully reset cdp account contents",  (uint8_t *)&v7,  2u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000BFAF8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_1000BFB08(uint64_t a1)
{
}

void sub_1000BFB10(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    id v8 = sub_10001267C("octagon-metrics");
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138412290;
      id v12 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Unable to fetch trust status: %@",  (uint8_t *)&v11,  0xCu);
    }

    uint64_t v10 = a1 + 32;
  }

  else
  {
    uint64_t v10 = a1 + 40;
    a3 = a2;
  }

  objc_storeStrong((id *)(*(void *)(*(void *)v10 + 8LL) + 40LL), a3);
}

void sub_1000BFC10(uint64_t a1, void *a2, void *a3)
{
  id v6 = a3;
  if (v6)
  {
    id v7 = sub_10001267C("octagon");
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412290;
      id v10 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Unable to get honorIDMSListChanges: %@",  (uint8_t *)&v9,  0xCu);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a3);
  }

  else if ([a2 isEqualToString:@"YES"])
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }
}

void sub_1000BFD14(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = sub_10001267C("octagon-metrics");
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 138412290;
      id v15 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Failed to fetch allowed machineIDs: %@",  (uint8_t *)&v14,  0xCu);
    }

    uint64_t v8 = *(void *)(a1[5] + 8LL);
    id v9 = v5;
    id v10 = *(os_log_s **)(v8 + 40);
    *(void *)(v8 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v9;
  }

  else
  {
    int v11 = sub_10001267C("octagon-metrics");
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = (void *)a1[4];
      int v13 = *(unsigned __int8 *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v14 = 138412546;
      id v15 = v12;
      __int16 v16 = 1024;
      int v17 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "MID (%@) on list: %{BOOL}d",  (uint8_t *)&v14,  0x12u);
    }
  }
}

void sub_1000BFE84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 40));
  *(_WORD *)(WeakRetained + 57) = 0;
  WeakRetained[59] = 0;
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    id v5 = sub_10001267C("octagon-health");
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *((void *)WeakRetained + 8);
      int v9 = 138412290;
      uint64_t v10 = v8;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "results=%@", (uint8_t *)&v9, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
    id v7 = (void *)*((void *)WeakRetained + 8);
    *((void *)WeakRetained + _Block_object_dispose((const void *)(v7 - 64), 8) = 0LL;
  }
}

uint64_t sub_1000BFF9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000BFFA8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = sub_10001267C("SecError");
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v18 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "octagon-tlk-recoverability: failed assessing tlk recoverability using the octagon identity, error: %@",  buf,  0xCu);
    }

LABEL_4:
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
    goto LABEL_13;
  }

  if (v5 && [v5 count])
  {
    int v9 = sub_10001267C("octagon-tlk-recoverability");
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v18 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "found views using octagon peer matching record! views: %@",  buf,  0xCu);
    }

    goto LABEL_4;
  }

  uint64_t v10 = sub_10001267C("SecError");
  int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "octagon-tlk-recoverability: failed to find views",  buf,  2u);
  }

  uint64_t v12 = *(void *)(a1 + 32);
  NSErrorUserInfoKey v15 = NSLocalizedDescriptionKey;
  __int16 v16 = @"Record cannot recover any views";
  int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v16,  &v15,  1LL));
  int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.security.octagon",  58LL,  v13));
  (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0LL, v14);

LABEL_13:
}

void sub_1000C01E0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t v10 = sub_10001267C("SecError");
    int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v31 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "octagon-tlk-recoverability: fetching bottles failed: %@",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    id v12 = [[OTEscrowRecord alloc] initWithData:*(void *)(a1 + 32)];
    int v13 = (void *)objc_claimAutoreleasedReturnValue([v12 escrowInformationMetadata]);
    int v14 = (void *)objc_claimAutoreleasedReturnValue([v13 bottleId]);

    if (([v7 containsObject:v14] & 1) != 0
      || ([v8 containsObject:v14] & 1) != 0)
    {
      NSErrorUserInfoKey v15 = *(void **)(a1 + 40);
      __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v12 escrowInformationMetadata]);
      int v17 = (void *)objc_claimAutoreleasedReturnValue([v16 bottleId]);
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472LL;
      v24[2] = sub_1000C04A4;
      v24[3] = &unk_100285478;
      id v25 = v12;
      id v18 = *(id *)(a1 + 48);
      uint64_t v26 = *(void *)(a1 + 40);
      id v27 = v18;
      [v15 octagonPeerIDGivenBottleID:v17 reply:v24];

      int v19 = v25;
    }

    else
    {
      id v20 = sub_10001267C("octagon-tlk-recoverability");
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "record's bottleID is not valid in cuttlefish",  buf,  2u);
      }

      uint64_t v22 = *(void *)(a1 + 48);
      NSErrorUserInfoKey v28 = NSLocalizedDescriptionKey;
      __int128 v29 = @"Record's bottleID is not valid in cuttlefish";
      int v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v29,  &v28,  1LL));
      __int128 v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.security.octagon",  58LL,  v19));
      (*(void (**)(uint64_t, void, void *))(v22 + 16))(v22, 0LL, v23);
    }
  }
}

void sub_1000C04A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) ckks]);
    id v14 = 0LL;
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 viewsForPeerID:v5 error:&v14]);
    id v9 = v14;

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    uint64_t v10 = sub_10001267C("octagon-tlk-recoverability");
    int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v16 = v12;
      __int16 v17 = 2112;
      id v18 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Octagon peerID not trusted for record %@: %@",  buf,  0x16u);
    }

    uint64_t v13 = *(void *)(a1 + 48);
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:underlying:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:underlying:",  @"com.apple.security.octagon",  58LL,  @"Octagon peerID not trusted for record",  v6));
    (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v8);
  }
}

void sub_1000C0628(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    id v5 = sub_10001267C("octagon");
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138412290;
      id v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Unable to find bottleID: %@",  (uint8_t *)&v8,  0xCu);
    }

    id v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  else
  {
    id v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  v7();
}

void sub_1000C0714(id *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] error]);

  if (!v2)
  {
    uint64_t v22 = sub_10001267C("octagon-ckks");
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Done waiting for CKKS Priority view download",  buf,  2u);
    }

    goto LABEL_16;
  }

  id v3 = sub_10001267C("SecError");
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([a1[4] error]);
    *(_DWORD *)__int128 buf = 138412290;
    id v33 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "octagon-ckks: Done waiting for CKKS Priority view download with error: %@",  buf,  0xCu);
  }

  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue([a1[4] error]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s domain](v6, "domain"));
  if (([v7 isEqualToString:@"CKKSErrorDomain"] & 1) == 0)
  {

LABEL_16:
    goto LABEL_17;
  }

  int v8 = (void *)objc_claimAutoreleasedReturnValue([a1[4] error]);
  id v9 = [v8 code];

  if (v9 != (id)52)
  {
LABEL_17:
    __int128 v23 = (void (**)(id, id))a1[6];
    id v14 = (id)objc_claimAutoreleasedReturnValue([a1[4] error]);
    v23[2](v23, v14);
    goto LABEL_18;
  }

  uint64_t v10 = sub_10001267C("SecError");
  int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "octagon-ckks: Retrying wait for CKKS Priority view download",  buf,  2u);
  }

  id v12 = a1[5];
  id v31 = 0LL;
  unsigned __int8 v13 = [v12 recheckCKKSTrustStatus:&v31];
  id v14 = v31;
  if ((v13 & 1) == 0)
  {
    NSErrorUserInfoKey v15 = sub_10001267C("SecError");
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v33 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "octagon-ckks: Unable to retry CKKS Priority view download: %@",  buf,  0xCu);
    }
  }

  __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([a1[5] ckks]);
  id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 rpcWaitForPriorityViewProcessing]);

  int v24 = _NSConcreteStackBlock;
  uint64_t v25 = 3221225472LL;
  uint64_t v26 = sub_1000C0A70;
  id v27 = &unk_100290668;
  id v28 = v18;
  id v29 = a1[4];
  id v30 = a1[6];
  id v19 = v18;
  id v20 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSResultOperation named:withBlock:]( &OBJC_CLASS___CKKSResultOperation,  "named:withBlock:",  @"wait-for-sync-reply",  &v24));
  objc_msgSend(v20, "addDependency:", v19, v24, v25, v26, v27);
  id v21 = (void *)objc_claimAutoreleasedReturnValue([a1[5] operationQueue]);
  [v21 addOperation:v20];

LABEL_18:
}

void sub_1000C0A70(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

  if (v2)
  {
    id v3 = sub_10001267C("SecError");
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
      int v9 = 138412290;
      uint64_t v10 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "octagon-ckks: Done waiting for CKKS Priority view download retry with error: %@",  (uint8_t *)&v9,  0xCu);
    }
  }

  else
  {
    id v6 = sub_10001267C("octagon-ckks");
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Done waiting for CKKS Priority view download retry",  (uint8_t *)&v9,  2u);
    }
  }

  uint64_t v7 = *(void *)(a1 + 48);
  int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
}

void sub_1000C0BC0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = sub_10001267C("SecError");
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      id v11 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "octagon-settings: Failed fetching account settings: %@",  (uint8_t *)&v10,  0xCu);
    }
  }

  else
  {
    int v9 = sub_10001267C("octagon-settings");
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      id v11 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Succeeded fetching account settings: %@",  (uint8_t *)&v10,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000C0D10(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = sub_10001267C("SecError");
  int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v9)
    {
      int v10 = 138412290;
      id v11 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "octagon-settings: Failed fetching account settings: %@",  (uint8_t *)&v10,  0xCu);
    }
  }

  else if (v9)
  {
    int v10 = 138412290;
    id v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "octagon-settings: Succeeded fetching account settings: %@",  (uint8_t *)&v10,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000C0E44(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v44 = a2;
  id v7 = a3;
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  int v10 = WeakRetained;
  if (v8)
  {
    id v11 = sub_10001267C("octagon");
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int8 v13 = (void *)objc_claimAutoreleasedReturnValue([v10 containerName]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v10 contextID]);
      *(_DWORD *)__int128 buf = 138412802;
      id v51 = v13;
      __int16 v52 = 2112;
      id v53 = v14;
      __int16 v54 = 2112;
      id v55 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Unable to fetch trusted peers for (%@,%@): %@",  buf,  0x20u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    uint64_t v42 = WeakRetained;
    id v15 = objc_alloc_init(&OBJC_CLASS___OTCurrentSecureElementIdentities);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    [v15 setTrustedPeerSecureElementIdentities:v16];

    __int128 v47 = 0u;
    __int128 v48 = 0u;
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    id v43 = v7;
    id v17 = v7;
    id v18 = [v17 countByEnumeratingWithState:&v45 objects:v49 count:16];
    if (v18)
    {
      id v19 = v18;
      uint64_t v20 = *(void *)v46;
      do
      {
        for (uint64_t i = 0LL; i != v19; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v46 != v20) {
            objc_enumerationMutation(v17);
          }
          uint64_t v22 = *(void **)(*((void *)&v45 + 1) + 8LL * (void)i);
          __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v22 secureElementIdentity]);

          if (v23)
          {
            id v24 = objc_alloc_init(&OBJC_CLASS___OTSecureElementPeerIdentity);
            uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v22 secureElementIdentity]);
            uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 peerIdentifier]);
            [v24 setPeerIdentifier:v26];

            id v27 = (void *)objc_claimAutoreleasedReturnValue([v22 secureElementIdentity]);
            id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 peerData]);
            [v24 setPeerData:v28];

            id v29 = (void *)objc_claimAutoreleasedReturnValue([v22 peerID]);
            id v30 = (void *)objc_claimAutoreleasedReturnValue([v44 peerID]);
            unsigned int v31 = [v29 isEqualToString:v30];

            if (v31)
            {
              [v15 setLocalPeerIdentity:v24];
            }

            else
            {
              id v32 = (void *)objc_claimAutoreleasedReturnValue([v15 trustedPeerSecureElementIdentities]);
              [v32 addObject:v24];
            }
          }
        }

        id v19 = [v17 countByEnumeratingWithState:&v45 objects:v49 count:16];
      }

      while (v19);
    }

    id v8 = 0LL;
    int v10 = v42;
    if (*(void *)(a1 + 32))
    {
      id v33 = objc_alloc_init(&OBJC_CLASS___OTSecureElementPeerIdentity);
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerIdentifier]);
      [v33 setPeerIdentifier:v34];

      id v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerData]);
      [v33 setPeerData:v35];

      id v36 = (void *)objc_claimAutoreleasedReturnValue([v15 localPeerIdentity]);
      unsigned __int8 v37 = [v36 isEqual:v33];

      if ((v37 & 1) == 0)
      {
        id v38 = sub_10001267C("octagon");
        __int16 v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          id v40 = (void *)objc_claimAutoreleasedReturnValue([v42 containerName]);
          id v41 = (void *)objc_claimAutoreleasedReturnValue([v42 contextID]);
          *(_DWORD *)__int128 buf = 138412802;
          id v51 = v40;
          __int16 v52 = 2112;
          id v53 = v41;
          __int16 v54 = 2112;
          id v55 = v33;
          _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "Returning pending identity for (%@,%@): %@",  buf,  0x20u);
        }

        [v15 setPendingLocalPeerIdentity:v33];
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();

    id v7 = v43;
  }
}

OTAccountMetadataClassC *__cdecl sub_1000C12A0(id a1, OTAccountMetadataClassC *a2)
{
  uint64_t v2 = a2;
  -[OTAccountMetadataClassC setSecureElementIdentity:](v2, "setSecureElementIdentity:", 0LL);
  return v2;
}

id sub_1000C12CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setOctagonSecureElementIdentity:*(void *)(a1 + 32)];
  return v3;
}

void sub_1000C12FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = sub_10001267C("octagon-ckks");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v24 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Failed to fetch policy: %@", buf, 0xCu);
    }

    id v6 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
LABEL_18:
    v6();
    goto LABEL_19;
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ckks]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 syncingPolicy]);

  if (v8)
  {
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ckks]);
    int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 syncingPolicy]);
    unsigned int v11 = [v10 syncUserControllableViewsAsBoolean];

    id v12 = sub_10001267C("octagon-ckks");
    unsigned __int8 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      if (v11) {
        id v14 = @"enabled";
      }
      else {
        id v14 = @"disabled";
      }
      id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ckks]);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 syncingPolicy]);
      id v17 = [v16 syncUserControllableViews];
      if (v17 >= 4) {
        id v18 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  v17));
      }
      else {
        id v18 = off_1002855A0[v17];
      }
      *(_DWORD *)__int128 buf = 138412546;
      id v24 = v14;
      __int16 v25 = 2112;
      uint64_t v26 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Returning user-controllable status as %@ (%@)",  buf,  0x16u);
    }

    id v6 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
    goto LABEL_18;
  }

  id v19 = sub_10001267C("octagon-ckks");
  uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Policy missing even after a refetch?", buf, 2u);
  }

  uint64_t v21 = *(void *)(a1 + 40);
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:",  @"com.apple.security.octagon",  49LL,  @"Sync policy is missing even after refetching"));
  (*(void (**)(uint64_t, void, void *))(v21 + 16))(v21, 0LL, v22);

LABEL_19:
}

void sub_1000C15C0(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (v12)
  {
    unsigned __int8 v13 = sub_10001267C("SecError");
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 138412290;
      id v17 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "octagon: error fetching escrow contents: %@",  (uint8_t *)&v16,  0xCu);
    }
  }

  else
  {
    id v15 = sub_10001267C("octagon");
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 138412290;
      id v17 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "fetched escrow contents for bottle: %@",  (uint8_t *)&v16,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000C1748(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = sub_10001267C("SecError");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "octagon: failed to remove escrow cache: %@",  (uint8_t *)&v7,  0xCu);
    }
  }

  else
  {
    id v6 = sub_10001267C("octagon");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "successfully removed escrow cache",  (uint8_t *)&v7,  2u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000C1874(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int v7 = sub_10001267C("SecError");
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      id v11 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "octagon: error fetching all viable escrow records: %@",  (uint8_t *)&v10,  0xCu);
    }
  }

  else
  {
    id v9 = sub_10001267C("octagon");
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      id v11 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "fetched escrow records: %@",  (uint8_t *)&v10,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000C19C4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    int v10 = sub_10001267C("SecError");
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 138412290;
      id v16 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "octagon: error fetching all viable bottles: %@",  (uint8_t *)&v15,  0xCu);
    }
  }

  else
  {
    id v12 = sub_10001267C("octagon");
    unsigned __int8 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 138412290;
      id v16 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "fetched viable bottles: %@",  (uint8_t *)&v15,  0xCu);
    }

    id v14 = sub_10001267C("octagon");
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 138412290;
      id v16 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "fetched partially viable bottles: %@",  (uint8_t *)&v15,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000C1B8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v5 egoStatus];
  uint64_t v8 = objc_claimAutoreleasedReturnValue([v5 egoPeerID]);
  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
  int v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v8;

  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v5 isExcluded];
  uint64_t v11 = objc_claimAutoreleasedReturnValue([v5 viablePeerCountsByModelID]);
  uint64_t v12 = *(void *)(*(void *)(a1 + 64) + 8LL);
  unsigned __int8 v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v11;

  *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = [v5 isLocked];
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL), a3);
  id v14 = sub_10001267C("octagon");
  int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v16)
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v32 = v6;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "error fetching trust status: %@", buf, 0xCu);
    }

    goto LABEL_26;
  }

  if (v16)
  {
    uint64_t v17 = TPPeerStatusToString(v7);
    id v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    *(_DWORD *)__int128 buf = 138412290;
    id v32 = v18;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "trust status: %@", buf, 0xCu);
  }

  [*(id *)(a1 + 32) popTooManyPeersDialogWithEgoPeerStatus:v5 accountMeta:*(void *)(a1 + 40)];
  if ((v7 & 4) != 0)
  {
LABEL_15:
    uint64_t v19 = 1LL;
    goto LABEL_16;
  }

  if ((v7 & 0x5B) == 0)
  {
    if ((v7 & 0x80) == 0)
    {
      if ((v7 & 0x20) == 0)
      {
        uint64_t v20 = sub_10001267C("octagon");
        uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "TPPeerStatus is empty", buf, 2u);
        }
      }

      uint64_t v19 = 3LL;
      goto LABEL_16;
    }

    goto LABEL_15;
  }

  uint64_t v19 = 0LL;
LABEL_16:
  *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL) = v19;
  uint64_t v22 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL);
  if (v22) {
    uint64_t v23 = v22 == 1;
  }
  else {
    uint64_t v23 = 2LL;
  }
  id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountMetadataStore]);
  id v30 = 0LL;
  unsigned int v25 = [v24 persistNewTrustState:v23 error:&v30];
  int v15 = (os_log_s *)v30;

  if (!v25 || v15)
  {
    id v29 = sub_10001267C("SecError");
    id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v32 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "octagon: unable to persist clique trust state: %@",  buf,  0xCu);
    }
  }

  else
  {
    uint64_t v26 = sub_10001267C("octagon");
    id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      id v28 = off_100285588[v23];
      *(_DWORD *)__int128 buf = 138412290;
      id v32 = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "updated account trust state: %@", buf, 0xCu);
    }
  }

LABEL_26:
}

void sub_1000C1EEC(uint64_t a1)
{
  uint64_t v2 = sub_10001267C("otrpc");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    int v8 = 138412290;
    uint64_t v9 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Returning an inheritance key call: %@",  (uint8_t *)&v8,  0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ik]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, void *))(v5 + 16))(v5, v6, v7);
}

void sub_1000C1FEC(uint64_t a1)
{
  uint64_t v2 = sub_10001267C("otrpc");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    int v8 = 138412290;
    uint64_t v9 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Returning an inheritance key call: %@",  (uint8_t *)&v8,  0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ik]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, void *))(v5 + 16))(v5, v6, v7);
}

void sub_1000C20EC(uint64_t a1)
{
  id v3 = sub_10001267C("otrpc");
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) crk]);
    dispatch_queue_attr_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    int v10 = 138412546;
    uint64_t v11 = v5;
    __int16 v12 = 2112;
    unsigned __int8 v13 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Returning a check inheritance key call: %@, %@",  (uint8_t *)&v10,  0x16u);
  }

  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) crk]);
  if (v7)
  {
    dispatch_queue_attr_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) crk]);
    BOOL v8 = [v1 kind] == 2;
  }

  else
  {
    BOOL v8 = 0LL;
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, BOOL, void *))(v6 + 16))(v6, v8, v9);

  if (v7) {
}
  }

void sub_1000C2244(uint64_t a1)
{
  uint64_t v2 = sub_10001267C("otrpc");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    int v7 = 138412290;
    BOOL v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Returning remove inheritance key call: %@",  (uint8_t *)&v7,  0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
}

void sub_1000C232C(uint64_t a1)
{
  uint64_t v2 = sub_10001267C("otrpc");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    int v7 = 138412290;
    BOOL v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Returning an inheritance key call: %@",  (uint8_t *)&v7,  0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
}

void sub_1000C2414(uint64_t a1)
{
  uint64_t v2 = sub_10001267C("otrpc");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    int v8 = 138412290;
    uint64_t v9 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Returning an inheritance key call: %@",  (uint8_t *)&v8,  0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ik]);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, void *))(v5 + 16))(v5, v6, v7);
}

void sub_1000C2514(uint64_t a1)
{
  id v3 = sub_10001267C("otrpc");
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) crk]);
    dispatch_queue_attr_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    int v10 = 138412546;
    uint64_t v11 = v5;
    __int16 v12 = 2112;
    unsigned __int8 v13 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Returning a check custodian recovery key call: %@, %@",  (uint8_t *)&v10,  0x16u);
  }

  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) crk]);
  if (v7)
  {
    dispatch_queue_attr_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) crk]);
    BOOL v8 = [v1 kind] == 1;
  }

  else
  {
    BOOL v8 = 0LL;
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, BOOL, void *))(v6 + 16))(v6, v8, v9);

  if (v7) {
}
  }

void sub_1000C266C(uint64_t a1)
{
  uint64_t v2 = sub_10001267C("otrpc");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    int v7 = 138412290;
    BOOL v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Returning a remove custodian recovery key call: %@",  (uint8_t *)&v7,  0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
}

void sub_1000C2754(uint64_t a1)
{
  uint64_t v2 = sub_10001267C("otrpc");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    int v8 = 138412290;
    uint64_t v9 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Returning a create custodian recovery key call: %@",  (uint8_t *)&v8,  0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) crk]);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, void *))(v5 + 16))(v5, v6, v7);
}

uint64_t sub_1000C2854(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000C2860(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000C286C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000C2878(uint64_t a1)
{
  uint64_t v2 = sub_10001267C("otrpc");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    int v7 = 138412290;
    int v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Returning a set recovery key call: %@",  (uint8_t *)&v7,  0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
}

void sub_1000C2960(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    uint64_t v5 = sub_10001267C("octagon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138412290;
      id v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Unable to fetch names by peerID: %@",  (uint8_t *)&v8,  0xCu);
    }

    int v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  else
  {
    int v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  v7();
}

void sub_1000C2A4C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = sub_10001267C("octagon");
  int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Finished dump for status RPC", v10, 2u);
  }

  if (v6)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", v6));
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v9 forKeyedSubscript:@"contextDumpError"];
  }

  else
  {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v5 forKeyedSubscript:@"contextDump"];
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1000C2B54(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setVoucher:*(void *)(a1 + 32)];
  [v3 setVoucherSignature:*(void *)(a1 + 40)];
  return v3;
}

void sub_1000C2B90(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = sub_10001267C("SecError");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "octagon failed to join: %@",  (uint8_t *)&v7,  0xCu);
    }
  }

  else
  {
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ckks]);
    id v6 = -[os_log_s rpcFetchBecause:](v5, "rpcFetchBecause:", @"octagon-pairing-complete");
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000C2C88(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = sub_10001267C("SecError");
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      unsigned __int8 v13 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "octagon-preflight-rk: error checking recovery key correctness: %@",  (uint8_t *)&v12,  0xCu);
    }

    id v8 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  else
  {
    id v9 = sub_10001267C("octagon-preflight-rk");
    int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = @"incorrect";
      if (a2) {
        uint64_t v11 = @"correct";
      }
      int v12 = 138412290;
      unsigned __int8 v13 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "recovery key is %@", (uint8_t *)&v12, 0xCu);
    }

    id v8 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  v8();
}

void sub_1000C2DE4(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (!v4)
  {
    id v3 = [*(id *)(a1 + 32) notifierClass];
    [v3 post:OTJoinedViaBottle];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000C2E44(uint64_t a1)
{
  uint64_t v2 = sub_10001267C("otrpc");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerID]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    int v13 = 138412546;
    id v14 = v4;
    __int16 v15 = 2112;
    BOOL v16 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Returning a prepare call: %@  %@",  (uint8_t *)&v13,  0x16u);
  }

  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerID]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) permanentInfo]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) permanentInfoSig]);
  int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stableInfo]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stableInfoSig]);
  int v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, void *, void *, void *, void *, void *))(v6 + 16))( v6,  v7,  v8,  v9,  v10,  v11,  v12);
}

void sub_1000C2FD4(uint64_t a1)
{
  uint64_t v2 = sub_10001267C("otrpc");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) voucher]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) voucherSig]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    int v11 = 138412802;
    int v12 = v4;
    __int16 v13 = 2112;
    id v14 = v5;
    __int16 v15 = 2112;
    BOOL v16 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Returning a voucher call: %@, %@, %@",  (uint8_t *)&v11,  0x20u);
  }

  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) voucher]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) voucherSig]);
  int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, void *, void *))(v7 + 16))(v7, v8, v9, v10);
}

void sub_1000C3130(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  id v3 = sub_10001267C("otrpc");
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    int v10 = 138412290;
    int v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Returning a updateTDL: %@",  (uint8_t *)&v10,  0xCu);
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 56);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, void, void, void *))(v7 + 16))(v7, 0LL, 0LL, v8);
  }

  else
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
    [v9 addOperation:*(void *)(a1 + 40)];

    id v8 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained stateMachine]);
    [v8 handleExternalRequest:*(void *)(a1 + 48) startTimeout:120000000000];
  }
}

void sub_1000C3290(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    uint64_t v6 = sub_10001267C("SecError");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v5;
      id v8 = "rpc-epoch: failed to fetch epoch! error: %@";
      id v9 = v7;
      uint32_t v10 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v12, v10);
    }
  }

  else
  {
    int v11 = sub_10001267C("rpc-epoch");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12) = 0;
      id v8 = "fetched epoch";
      id v9 = v7;
      uint32_t v10 = 2;
      goto LABEL_6;
    }
  }

  (*(void (**)(void, uint64_t))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32), a2);
}

void sub_1000C33B0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitAccountInfo]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v2 != 0LL;

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitAccountInfo]);
  if (v3)
  {
    id v5 = v3;
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitAccountInfo]);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v4 accountStatus] == (id)1;

    id v3 = v5;
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
  }
}

void sub_1000C344C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitAccountInfo]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v2 != 0LL;

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitAccountInfo]);
  if (v3)
  {
    id v5 = v3;
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitAccountInfo]);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v4 accountStatus] == (id)1;

    id v3 = v5;
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
  }
}

void sub_1000C34E8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  dispatch_queue_attr_t v1 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained stateMachine]);
  [v1 handleFlag:@"attempt_sos_consistency"];
}

OTAccountMetadataClassC *__cdecl sub_1000C3534(id a1, OTAccountMetadataClassC *a2)
{
  uint64_t v2 = a2;
  -[OTAccountMetadataClassC setWarnedTooManyPeers:](v2, "setWarnedTooManyPeers:", 1LL);
  return v2;
}

void sub_1000C3560(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = sub_10001267C("octagon-count-trusted-peers");
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v9)
    {
      int v15 = 138412290;
      id v16 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "totalTrustedPeers errored: %@",  (uint8_t *)&v15,  0xCu);
    }

    uint64_t v10 = a1 + 32;
    int v11 = v6;
  }

  else
  {
    if (v9)
    {
      int v15 = 138412290;
      id v16 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "totalTrustedPeers succeeded, total count: %@",  (uint8_t *)&v15,  0xCu);
    }

    uint64_t v10 = a1 + 40;
    int v11 = v5;
  }

  uint64_t v12 = *(void *)(*(void *)v10 + 8LL);
  id v13 = v11;
  id v14 = *(void **)(v12 + 40);
  *(void *)(v12 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v13;
}

void sub_1000C3698(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v2 = sub_10001267C("octagon-push-ratelimited");
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained contextID]);
      int v7 = 138412290;
      id v8 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "notifying container of change for context: %@",  (uint8_t *)&v7,  0xCu);
    }

    id v5 = -[OctagonPendingFlag initWithFlag:conditions:]( objc_alloc(&OBJC_CLASS___OctagonPendingFlag),  "initWithFlag:conditions:",  @"recd_push",  1LL);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained stateMachine]);
    [v6 handlePendingFlag:v5];
  }
}

void sub_1000C37AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained contextID]);
  unsigned int v6 = [v5 isEqualToString:@"defaultContext"];

  if (v6)
  {
    int v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained accountStateTracker]);
    [v7 triggerOctagonStatusFetch];
  }

  uint64_t v74 = 0LL;
  id v75 = &v74;
  uint64_t v76 = 0x3032000000LL;
  id v77 = sub_1000BFAF8;
  id v78 = sub_1000BFB08;
  id v79 = 0LL;
  uint64_t v68 = 0LL;
  uint64_t v69 = &v68;
  uint64_t v70 = 0x3032000000LL;
  uint64_t v71 = sub_1000BFAF8;
  id v72 = sub_1000BFB08;
  id v73 = 0LL;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained accountMetadataStore]);
  id v66 = 0LL;
  v67[0] = _NSConcreteStackBlock;
  v67[1] = 3221225472LL;
  v67[2] = sub_1000C407C;
  v67[3] = &unk_1002851E0;
  v67[4] = &v74;
  v67[5] = &v68;
  [v8 persistAccountChanges:v67 error:&v66];
  id v9 = v66;

  if (!v75[5] || v9)
  {
    uint64_t v17 = sub_10001267C("SecError");
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "octagon-ckks: No peer ID to pass to CKKS. Syncing will be disabled.",  buf,  2u);
    }

    goto LABEL_41;
  }

  uint64_t v10 = (void *)v69[5];
  if (v10)
  {
    if ([v10 syncUserControllableViews])
    {
      int v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sosAdapter]);
      unsigned int v12 = [v11 sosEnabled];

      if (!v12)
      {
LABEL_21:
        uint64_t v23 = sub_10001267C("octagon-ckks");
        id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v25 = (void *)v69[5];
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 viewList]);
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v83 = (os_log_s *)v25;
          __int16 v84 = 2112;
          id v85 = v26;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Initializing CKKS views with policy %@: %@",  buf,  0x16u);
        }

        id v27 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained ckks]);
        [v27 setCurrentSyncingPolicy:v69[5]];

        id v28 = objc_alloc(&OBJC_CLASS___OctagonCKKSPeerAdapter);
        uint64_t v29 = v75[5];
        id v30 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained activeAccount]);
        unsigned int v31 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained personaAdapter]);
        id v32 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained cuttlefishXPCWrapper]);
        id v18 = -[OctagonCKKSPeerAdapter initWithPeerID:specificUser:personaAdapter:cuttlefishXPC:]( v28,  "initWithPeerID:specificUser:personaAdapter:cuttlefishXPC:",  v29,  v30,  v31,  v32);

        id v64 = 0LL;
        id v33 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s fetchSelfPeers:](v18, "fetchSelfPeers:", &v64));
        id v34 = v64;
        id v35 = v34;
        if (!v33 || v34)
        {
          __int128 v45 = sub_10001267C("SecError");
          __int128 v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412546;
            uint64_t v83 = v18;
            __int16 v84 = 2112;
            id v85 = v35;
            _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "octagon-ckks: Unable to fetch self peers for %@: %@",  buf,  0x16u);
          }

          __int128 v47 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained lockStateTracker]);
          unsigned int v48 = [v47 isLockedError:v35];

          uint32_t v49 = sub_10001267C("octagon-ckks");
          id v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
          BOOL v51 = os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT);
          if (v48)
          {
            if (v51)
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "Waiting for device unlock to proceed",  buf,  2u);
            }

            __int16 v52 = &off_100290150;
          }

          else
          {
            if (v51)
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "Error is scary; becoming untrusted",
                buf,
                2u);
            }

            __int16 v52 = &off_1002903A8;
          }

          [v3 setNextState:*v52];
          goto LABEL_51;
        }

        [WeakRetained setOctagonAdapter:v18];
        id v36 = sub_10001267C("octagon-ckks");
        unsigned __int8 v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          id v38 = (os_log_s *)objc_claimAutoreleasedReturnValue([WeakRetained ckks]);
          __int16 v39 = (void *)v75[5];
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v83 = v38;
          __int16 v84 = 2112;
          id v85 = v39;
          _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Informing CKKS %@ of trusted operation with self peer %@",  buf,  0x16u);
        }

        id v40 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sosAdapter]);
        unsigned int v41 = [v40 sosEnabled];

        if (v41)
        {
          uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained octagonAdapter]);
          v81[0] = v42;
          id v43 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sosAdapter]);
          v81[1] = v43;
          id v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v81, 2LL));
        }

        else
        {
          uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained octagonAdapter]);
          id v80 = v42;
          id v44 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v80,  1LL));
        }

        id v53 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained ckks]);
        __int16 v54 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained suggestTLKUploadNotifier]);
        id v55 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained requestPolicyCheckNotifier]);
        [v53 beginTrustedOperation:v44 suggestTLKUpload:v54 requestPolicyCheck:v55];

LABEL_41:
        uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v3 intendedState]);
        [v3 setNextState:v56];

        [WeakRetained setShouldSendMetricsForOctagon:2];
        id v63 = 0LL;
        unsigned int v57 = [WeakRetained fetchSendingMetricsPermitted:&v63];
        id v58 = (os_log_s *)v63;
        if (v58) {
          unsigned int v59 = 0;
        }
        else {
          unsigned int v59 = v57;
        }
        if (v59 == 1)
        {
          id v60 = sub_10001267C("octagon-metrics");
          id v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
          if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "triggered metrics check", buf, 2u);
          }

          id v35 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained checkMetricsTrigger]);
          [v35 trigger];
          id v18 = 0LL;
        }

        else
        {
          id v18 = v58;
          if (!v58)
          {
LABEL_52:

            goto LABEL_53;
          }

          id v62 = sub_10001267C("SecError");
          id v35 = (void *)objc_claimAutoreleasedReturnValue(v62);
          if (os_log_type_enabled((os_log_t)v35, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412290;
            uint64_t v83 = v18;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v35,  OS_LOG_TYPE_DEFAULT,  "octagon-metrics, failed to fetch metrics setting: %@",  buf,  0xCu);
          }
        }

LABEL_51:
        goto LABEL_52;
      }

      id v13 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sosAdapter]);
      id v65 = 0LL;
      [v13 updateCKKS4AllStatus:1 error:&v65];
      id v14 = (os_log_s *)v65;

      if (v14)
      {
        int v15 = sub_10001267C("octagon-ckks");
        id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v83 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Unable to enable the CKKS4All status in SOS: %@",  buf,  0xCu);
        }
      }
    }

    else
    {
      uint64_t v21 = sub_10001267C("octagon-ckks");
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Memoized CKKS policy has no opinion of user-controllable view status",  buf,  2u);
      }

      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue([WeakRetained upgradeUserControllableViewsRateLimiter]);
      -[os_log_s trigger](v14, "trigger");
    }

    goto LABEL_21;
  }

  uint64_t v19 = sub_10001267C("SecError");
  uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "octagon-ckks: No memoized CKKS policy, re-fetching",  buf,  2u);
  }

  [v3 setNextState:@"RefetchCKKSPolicy"];
LABEL_53:
  _Block_object_dispose(&v68, 8);

  _Block_object_dispose(&v74, 8);
}

  theDict = 0LL;
LABEL_52:
  id v30 = (const void *)cf;
  if ((void)cf)
  {
    *(void *)&CFTypeRef cf = 0LL;
    CFRelease(v30);
  }

  if (v23) {
    CFRelease(v23);
  }
  return theDict;
}

  id v27 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v28 = 1;
LABEL_65:
  *(_BYTE *)(v27 + 24) = v28;
  if (cf) {
    CFRelease(cf);
  }
LABEL_67:
  *a3 = *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) ^ 1;
}

    id v44 = (uint64_t)v21;
    __int128 v45 = v19;
    uint64_t v42 = v37;
    id v43 = a1;
    id v38 = @"ks_crypt_diversify: %x failed to '%@' item (class %d, bag: %d) Item can't be decrypted on this device, ever, so drop the item.";
    goto LABEL_54;
  }

  if ((_DWORD)v37 == -536870212) {
    goto LABEL_51;
  }
  if ((_DWORD)v37 != -536870207 && (_DWORD)v37 != -536870174) {
    goto LABEL_56;
  }
  __int16 v39 = (_DWORD)v21 == 10 || (_DWORD)v21 == 7;
  id v40 = "";
  if (v39) {
    id v40 = " (hibernation?)";
  }
  return sub_1000194E0( -25308,  v24,  @"ks_crypt_diversify: %x failed to '%@' item (class %d, bag: %d) Access to item attempted while keychain is locked%s.",  v37,  a1,  v21,  v19,  v40);
}

  v6[10] = self->_timestampDnsStart;
  *((_DWORD *)v6 + 70) |= 0x200u;
  unsigned int v25 = self->_has;
  if ((*(_WORD *)&v25 & 0x100) == 0)
  {
LABEL_20:
    if ((*(_DWORD *)&v25 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }

void sub_1000C4034( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
}

id sub_1000C407C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 peerID]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
  unsigned int v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v4;

  unsigned int v7 = [v3 hasSyncingPolicy];
  if (v7) {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 getTPSyncingPolicy]);
  }
  else {
    id v8 = 0LL;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v8);
  if (v7) {

  }
  if ([v3 attemptedJoin] == 2)
  {
    id v9 = 0LL;
  }

  else
  {
    [v3 setAttemptedJoin:2];
    id v9 = v3;
  }

  return v9;
}

void sub_1000C413C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v54 = 0LL;
  id v55 = &v54;
  uint64_t v56 = 0x3032000000LL;
  unsigned int v57 = sub_1000BFAF8;
  id v58 = sub_1000BFB08;
  id v59 = 0LL;
  uint64_t v48 = 0LL;
  uint32_t v49 = &v48;
  uint64_t v50 = 0x3032000000LL;
  BOOL v51 = sub_1000BFAF8;
  __int16 v52 = sub_1000BFB08;
  id v53 = 0LL;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained accountMetadataStore]);
  id v46 = 0LL;
  v47[0] = _NSConcreteStackBlock;
  v47[1] = 3221225472LL;
  v47[2] = sub_1000C47DC;
  v47[3] = &unk_1002851E0;
  v47[4] = &v54;
  void v47[5] = &v48;
  [v5 persistAccountChanges:v47 error:&v46];
  id v6 = v46;

  if (!v55[5] || v6)
  {
    id v30 = sub_10001267C("SecError");
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "octagon-ckks: No peer ID to pass to CKKS. Syncing will be disabled.",  buf,  2u);
    }

    goto LABEL_29;
  }

  if (v49[5])
  {
    unsigned int v7 = sub_10001267C("octagon-ckks");
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = (void *)v49[5];
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 viewList]);
      *(_DWORD *)__int128 buf = 138412546;
      id v63 = (os_log_s *)v9;
      __int16 v64 = 2112;
      id v65 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Initializing CKKS views with policy %@: %@",  buf,  0x16u);
    }

    int v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained ckks]);
    [v11 setCurrentSyncingPolicy:v49[5]];

    unsigned int v12 = objc_alloc(&OBJC_CLASS___OctagonCKKSPeerAdapter);
    uint64_t v13 = v55[5];
    id v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained activeAccount]);
    int v15 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained personaAdapter]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained cuttlefishXPCWrapper]);
    uint64_t v17 = -[OctagonCKKSPeerAdapter initWithPeerID:specificUser:personaAdapter:cuttlefishXPC:]( v12,  "initWithPeerID:specificUser:personaAdapter:cuttlefishXPC:",  v13,  v14,  v15,  v16);

    id v45 = 0LL;
    id v18 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s fetchSelfPeers:](v17, "fetchSelfPeers:", &v45));
    id v19 = v45;
    uint64_t v20 = v19;
    if (v18 && !v19)
    {
      [WeakRetained setOctagonAdapter:v17];
      uint64_t v21 = sub_10001267C("octagon-ckks");
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue([WeakRetained ckks]);
        id v24 = (void *)v55[5];
        *(_DWORD *)__int128 buf = 138412546;
        id v63 = v23;
        __int16 v64 = 2112;
        id v65 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Informing CKKS %@ of trusted operation with self peer %@",  buf,  0x16u);
      }

      unsigned int v25 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sosAdapter]);
      unsigned int v26 = [v25 sosEnabled];

      if (v26)
      {
        id v27 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained octagonAdapter]);
        v61[0] = v27;
        id v28 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sosAdapter]);
        v61[1] = v28;
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v61, 2LL));
      }

      else
      {
        id v27 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained octagonAdapter]);
        id v60 = v27;
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v60, 1LL));
      }

      [WeakRetained setSuggestTLKUploadNotifier:0];
      [WeakRetained setRequestPolicyCheckNotifier:0];
      unsigned int v41 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained ckks]);
      uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained suggestTLKUploadNotifier]);
      id v43 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained requestPolicyCheckNotifier]);
      [v41 beginTrustedOperation:v29 suggestTLKUpload:v42 requestPolicyCheck:v43];

LABEL_29:
      [WeakRetained notifyTrustChanged:2];
      id v44 = (void *)objc_claimAutoreleasedReturnValue([v3 intendedState]);
      [v3 setNextState:v44];

      [WeakRetained setShouldSendMetricsForOctagon:2];
      goto LABEL_30;
    }

    id v33 = sub_10001267C("SecError");
    id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412546;
      id v63 = v17;
      __int16 v64 = 2112;
      id v65 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "octagon-ckks: Unable to fetch self peers for %@: %@",  buf,  0x16u);
    }

    id v35 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained lockStateTracker]);
    unsigned int v36 = [v35 isLockedError:v20];

    unsigned __int8 v37 = sub_10001267C("octagon-ckks");
    id v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
    BOOL v39 = os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
    if (v36)
    {
      if (v39)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Waiting for device unlock to proceed",  buf,  2u);
      }

      id v40 = &off_100290150;
    }

    else
    {
      if (v39)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Error is scary; becoming untrusted",
          buf,
          2u);
      }

      id v40 = &off_1002903A8;
    }

    [v3 setNextState:*v40];
  }

  else
  {
    unsigned int v31 = sub_10001267C("SecError");
    id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "octagon-ckks: No memoized CKKS policy, re-fetching",  buf,  2u);
    }

    [v3 setNextState:@"RefetchCKKSPolicy"];
  }

void sub_1000C479C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id sub_1000C47DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 peerID]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v4;

  unsigned int v7 = [v3 hasSyncingPolicy];
  if (v7) {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 getTPSyncingPolicy]);
  }
  else {
    id v8 = 0LL;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v8);
  if (v7) {

  }
  return v3;
}

void sub_1000C486C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained contextID]);
  unsigned int v6 = [v5 isEqualToString:@"defaultContext"];

  if (v6)
  {
    unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained accountStateTracker]);
    [v7 triggerOctagonStatusFetch];
  }

  uint64_t v28 = 0LL;
  uint64_t v29 = &v28;
  uint64_t v30 = 0x2020000000LL;
  char v31 = 0;
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  void v27[2] = sub_1000C4C50;
  v27[3] = &unk_100285120;
  v27[4] = &v28;
  [WeakRetained checkTrustStatusAndPostRepairCFUIfNecessary:v27];
  if (*((_BYTE *)v29 + 24))
  {
    id v8 = sub_10001267C("octagon");
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "device is locked, state moving to wait for unlock",  buf,  2u);
    }

    [v3 setNextState:@"WaitForUnlock"];
    id v10 = 0LL;
  }

  else
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained accountMetadataStore]);
    id v26 = 0LL;
    [v11 persistAccountChanges:&stru_1002851B8 error:&v26];
    id v10 = v26;

    [WeakRetained setMetricsStateToActive];
    if (v10)
    {
      unsigned int v12 = sub_10001267C("octagon");
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v33 = v10;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Unable to set trust state: %@", buf, 0xCu);
      }

      [v3 setNextState:@"Error"];
    }

    else
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v3 intendedState]);
      [v3 setNextState:v14];
    }

    uint64_t v15 = sub_10001267C("octagon-ckks");
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained ckks]);
      *(_DWORD *)__int128 buf = 138412290;
      id v33 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Informing %@ of new untrusted status",  buf,  0xCu);
    }

    id v18 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained ckks]);
    [v18 endTrustedOperation];

    id v19 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sosAdapter]);
    unsigned int v20 = [v19 sosEnabled];

    if (v20)
    {
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sosAdapter]);
      id v25 = 0LL;
      [v21 updateCKKS4AllStatus:0 error:&v25];
      id v22 = v25;

      if (v22)
      {
        uint64_t v23 = sub_10001267C("octagon-ckks");
        id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v33 = v22;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Unable to disable the CKKS4All status in SOS: %@",  buf,  0xCu);
        }
      }
    }

    if (([WeakRetained initialBecomeUntrustedPosted] & 1) == 0)
    {
      [WeakRetained notifyTrustChanged:1];
      [WeakRetained setInitialBecomeUntrustedPosted:1];
    }

    [WeakRetained setOctagonAdapter:0];
  }

  _Block_object_dispose(&v28, 8);
}

void sub_1000C4C28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000C4C50(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5, void *a6)
{
  id v10 = a6;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v11 logResultForEvent:@"OctagonEventCheckTrustForCFU" hardFailure:0 result:v10];

  if (!v10)
  {
    if ((a5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }

  if ([v10 code] != (id)-25308)
  {
    unsigned int v20 = sub_10001267C("SecError");
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    int v21 = 138412290;
    id v22 = v10;
    uint64_t v17 = "octagon: hit an error checking trust state or posting a cfu: %@";
    id v18 = v13;
    uint32_t v19 = 12;
    goto LABEL_12;
  }

  if ((a5 & 1) != 0 || [v10 code] == (id)-25308)
  {
LABEL_8:
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a5;
    uint64_t v16 = sub_10001267C("SecError");
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    LOWORD(v21) = 0;
    uint64_t v17 = "octagon: device is locked, not posting cfu";
    id v18 = v13;
    uint32_t v19 = 2;
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v21, v19);
    goto LABEL_13;
  }

OTAccountMetadataClassC *__cdecl sub_1000C4E4C(id a1, OTAccountMetadataClassC *a2)
{
  uint64_t v2 = a2;
  -[OTAccountMetadataClassC setTrustState:](v2, "setTrustState:", 1LL);
  -[OTAccountMetadataClassC setSendingMetricsPermitted:](v2, "setSendingMetricsPermitted:", 1LL);
  return v2;
}

void sub_1000C4E84(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5, int a6, void *a7)
{
  id v13 = a3;
  id v14 = a4;
  id v15 = a7;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v17 = sub_10001267C("octagon");
  id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = OTCliqueStatusToString(a2);
    unsigned int v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    *(_DWORD *)__int128 buf = 138413314;
    __int16 v64 = v20;
    __int16 v65 = 2112;
    id v66 = v13;
    __int16 v67 = 2112;
    id v68 = v14;
    __int16 v69 = 1024;
    int v70 = a5;
    __int16 v71 = 2112;
    id v72 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "clique status: %@, egoPeerID: %@, peerCountByModelID: %@, isExcluded: %d error: %@",  buf,  0x30u);
  }

  unsigned __int8 v21 = [WeakRetained checkForPhonePeerPresence:v14];
  if (a2 == -1 && [v15 code] == (id)-25300)
  {
    id v22 = sub_10001267C("SecError");
    __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "octagon: Lost our identity keys!", buf, 2u);
    }

    if ((v21 & 1) != 0)
    {
      int v24 = sub_10001267C("SecError");
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "octagon: Posting CFU", buf, 2u);
      }

      id v62 = 0LL;
      [WeakRetained postRepairCFU:&v62];
      id v26 = v62;
      id v27 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
      goto LABEL_58;
    }

    id v46 = sub_10001267C("octagon");
    __int128 v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "No iOS peers in account; not posting CFU",
        buf,
        2u);
    }

    uint64_t v30 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
    goto LABEL_55;
  }

  if (v15 && [v15 code] != (id)-25308)
  {
    uint64_t v30 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
    goto LABEL_55;
  }

  if (a6)
  {
    uint64_t v28 = sub_10001267C("octagon");
    uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "device is locked; not posting CFU", buf, 2u);
    }

LABEL_52:
  if ((a2 & 0xFFFFFFFFFFFFFFFDLL) == 1 || a5)
  {
    id v59 = 0LL;
    [WeakRetained postRepairCFU:&v59];
    id v26 = v59;
    id v27 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
LABEL_58:
    v27();

    goto LABEL_56;
  }

  uint64_t v30 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
LABEL_55:
  v30();
LABEL_56:
}

            uint64_t v16 = 0;
LABEL_53:
            id v40 = sub_1000E8D5C(a1, (uint64_t)cf, 0LL);
            if (theDict) {
              CFRelease(theDict);
            }
            if (cf) {
              CFRelease(cf);
            }
            if (a2) {
              unsigned int v41 = 2;
            }
            else {
              unsigned int v41 = 6;
            }
            unsigned int v20 = v40 & v16;
            if ((v40 & v16) == 0) {
              unsigned int v41 = 1;
            }
            *(_DWORD *)(a1 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v41;
            return v20 & 1;
          }

          uint64_t v17 = CFGetTypeID(v14);
          if (v17 != CFStringGetTypeID()) {
            goto LABEL_19;
          }
          id v18 = *(void *)(a1 + 16);
          if (v18 == sub_10010C560((uint64_t)@"genp", &qword_1002DEB28, (uint64_t)&unk_1002DEB20)
            && CFEqual(v14, kSecAttrAccessibleAlwaysPrivate))
          {
            __int16 v23 = (const void *)sub_1000E7EC0(a1, kSecAttrService);
            if (!v23) {
              goto LABEL_19;
            }
            int v24 = v23;
            id v25 = CFGetTypeID(v23);
            if (v25 != CFStringGetTypeID() || !CFEqual(v12, @"apple")) {
              goto LABEL_19;
            }
            if (CFEqual(v24, @"AirPort"))
            {
LABEL_30:
              id v26 = &kSecAttrAccessibleAfterFirstUnlock;
LABEL_34:
              id v27 = (const __CFData *)*v26;
              uint64_t v28 = a1;
              uint64_t v29 = kSecAttrAccessible;
LABEL_35:
              id v22 = sub_1000E8AF8(v28, v29, v27, a3);
              goto LABEL_24;
            }

            if (!CFEqual(v24, @"com.apple.airplay.password"))
            {
              if (CFEqual(v24, @"YouTube"))
              {
                if (sub_1000E8AF8( a1,  kSecAttrAccessible,  (const __CFData *)kSecAttrAccessibleWhenUnlocked,  a3))
                {
                  id v27 = (const __CFData *)@"com.apple.youtube.credentials";
                  uint64_t v28 = a1;
                  uint64_t v29 = kSecAttrAccessGroup;
                  goto LABEL_35;
                }

                goto LABEL_47;
              }

              id v43 = (const void *)sub_1000E7EC0(a1, kSecAttrDescription);
              if (v43)
              {
                id v44 = v43;
                id v45 = CFGetTypeID(v43);
                if (v45 == CFStringGetTypeID()
                  && (CFEqual(v44, @"IPSec Shared Secret") || CFEqual(v44, @"PPP Password")))
                {
                  goto LABEL_30;
                }
              }

  id v38 = *((unsigned __int8 *)v46 + 24);
  _Block_object_dispose(&v41, 8);
  _Block_object_dispose(&v45, 8);
  return v38;
}

    uint64_t v29 = (os_log_s *)sub_10001267C("upgr");
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = cf;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Bailing in phase 1 because AKS is unavailable: %@",  buf,  0xCu);
    }

    goto LABEL_54;
  }

  if (OSStatus > -25300)
  {
    if (OSStatus != -25291)
    {
      id v25 = -25299;
LABEL_50:
      if (OSStatus == v25) {
        goto LABEL_51;
      }
LABEL_54:
      uint64_t v30 = cf;
      if (cf)
      {
        CFRetain(cf);
        char v31 = *(void **)(a1 + 56);
        if (v31 && !*v31) {
          *char v31 = v30;
        }
        else {
          CFRelease(v30);
        }
      }

      id v27 = *(void *)(*(void *)(a1 + 40) + 8LL);
      if (v30) {
        unsigned int v32 = 1;
      }
      else {
        unsigned int v32 = *(_BYTE *)(v27 + 24) == 0;
      }
      uint64_t v28 = !v32;
      goto LABEL_65;
    }

    goto LABEL_52;
  }

  if (OSStatus != -25330)
  {
    id v25 = -25308;
    goto LABEL_50;
  }

    id v18 = 0LL;
    goto LABEL_35;
  }

  if ([v8 isEqual:@"initializing"])
  {
    if ((id)-[CKKSKeychainView accountStatus](self, "accountStatus") == (id)3)
    {
      id v27 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView zoneName](self, "zoneName"));
      uint64_t v28 = sub_1000AA6AC(@"ckkskey", v27);
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);

      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "CloudKit account is missing. Departing!",  buf,  2u);
      }

      goto LABEL_25;
    }

    unsigned int v36 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
    [v36 operateOnAllViews];

    unsigned __int8 v37 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
    [v37 setStateForAllViews:@"initializing"];

    id v38 = objc_alloc(&OBJC_CLASS___CKKSCreateCKZoneOperation);
    BOOL v39 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
    id v18 = -[CKKSCreateCKZoneOperation initWithDependencies:intendedState:errorState:]( v38,  "initWithDependencies:intendedState:errorState:",  v39,  @"initialized",  @"zonecreationfailed");

    id v40 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
    unsigned int v41 = (void *)objc_claimAutoreleasedReturnValue([v40 cloudkitRetryAfter]);
    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v41 operationDependency]);
    -[CKKSLocalResetOperation addNullableDependency:](v18, "addNullableDependency:", v42);

    id v43 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
    id v44 = (void *)objc_claimAutoreleasedReturnValue([v43 cloudkitRetryAfter]);
    goto LABEL_41;
  }

  if ([v8 isEqualToString:@"initialized"])
  {
    if ([v9 _onqueueContains:@"new_priority_views"]
      && (id)-[CKKSKeychainView trustStatus](self, "trustStatus") == (id)1)
    {
      [v9 _onqueueRemoveFlag:@"new_priority_views"];
      -[CKKSKeychainView _onqueuePrioritizePriorityViews](self, "_onqueuePrioritizePriorityViews");
    }

    unsigned int v20 = objc_claimAutoreleasedReturnValue(-[CKKSKeychainView performInitializedOperation](self, "performInitializedOperation"));
    goto LABEL_34;
  }

  if ([v8 isEqualToString:@"error"])
  {
    if (![v9 _onqueueContains:@"ck_account_logged_in"])
    {
      __int16 v52 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView zoneName](self, "zoneName"));
      id v53 = sub_1000AA6AC(@"ckkskey", v52);
      unsigned int v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);

      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "Staying in error state %@", buf, 0xCu);
      }

      goto LABEL_52;
    }

    [v9 _onqueueRemoveFlag:@"ck_account_logged_in"];
    id v46 = objc_alloc(&OBJC_CLASS___CKKSLocalResetOperation);
    id v43 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
    __int128 v47 = @"initializing";
    uint64_t v48 = @"error";
    goto LABEL_46;
  }

  if ([v8 isEqualToString:@"fixup_fetch_cip"])
  {
    uint32_t v49 = objc_alloc(&OBJC_CLASS___CKKSFixupRefetchAllCurrentItemPointers);
    BOOL v50 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
    BOOL v51 = objc_claimAutoreleasedReturnValue(+[CKOperationGroup CKKSGroupWithName:](&OBJC_CLASS___CKOperationGroup, "CKKSGroupWithName:", @"fixup"));
LABEL_55:
    id v55 = (void *)v51;
    uint64_t v56 = -[CKKSFixupRefetchAllCurrentItemPointers initWithOperationDependencies:ckoperationGroup:]( v49,  "initWithOperationDependencies:ckoperationGroup:",  v50,  v51);
LABEL_56:
    id v18 = (CKKSLocalResetOperation *)v56;

LABEL_57:
    -[CKKSKeychainView setLastFixupOperation:](self, "setLastFixupOperation:", v18);
    goto LABEL_35;
  }

  if ([v8 isEqualToString:@"fixup_fetch_tlkshares"])
  {
    uint32_t v49 = objc_alloc(&OBJC_CLASS___CKKSFixupFetchAllTLKShares);
    BOOL v50 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
    BOOL v51 = objc_claimAutoreleasedReturnValue(+[CKOperationGroup CKKSGroupWithName:](&OBJC_CLASS___CKOperationGroup, "CKKSGroupWithName:", @"fixup"));
    goto LABEL_55;
  }

  if ([v8 isEqualToString:@"fixup_local_reload"])
  {
    unsigned int v57 = objc_alloc(&OBJC_CLASS___CKKSFixupLocalReloadOperation);
    BOOL v50 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
    id v55 = (void *)objc_claimAutoreleasedReturnValue( +[CKOperationGroup CKKSGroupWithName:]( &OBJC_CLASS___CKOperationGroup,  "CKKSGroupWithName:",  @"fixup"));
    id v58 = @"fixup_resave_cdse";
    id v59 = v57;
    id v60 = v50;
    id v61 = 3LL;
LABEL_60:
    uint64_t v56 = -[CKKSFixupLocalReloadOperation initWithOperationDependencies:fixupNumber:ckoperationGroup:entering:]( v59,  "initWithOperationDependencies:fixupNumber:ckoperationGroup:entering:",  v60,  v61,  v55,  v58);
    goto LABEL_56;
  }

  if ([v8 isEqualToString:@"fixup_resave_cdse"])
  {
    id v62 = objc_alloc(&OBJC_CLASS___CKKSFixupResaveDeviceStateEntriesOperation);
    BOOL v50 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
    id v18 = -[CKKSFixupResaveDeviceStateEntriesOperation initWithOperationDependencies:]( v62,  "initWithOperationDependencies:",  v50);
    goto LABEL_57;
  }

  if ([v8 isEqualToString:@"fixup_delete_tombstones"])
  {
    id v63 = objc_alloc(&OBJC_CLASS___CKKSFixupLocalReloadOperation);
    BOOL v50 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
    id v55 = (void *)objc_claimAutoreleasedReturnValue( +[CKOperationGroup CKKSGroupWithName:]( &OBJC_CLASS___CKOperationGroup,  "CKKSGroupWithName:",  @"fixup"));
    id v58 = @"initialized";
    id v59 = v63;
    id v60 = v50;
    id v61 = 5LL;
    goto LABEL_60;
  }

  if ([v8 isEqualToString:@"resetzone"])
  {
    __int16 v64 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView zoneName](self, "zoneName"));
    __int16 v65 = sub_1000AA6AC(@"ckkskey", v64);
    id v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);

    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v67 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
      id v68 = (void *)objc_claimAutoreleasedReturnValue([v67 views]);
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v68;
      _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "Deleting the CloudKit Zones for %@",  buf,  0xCu);
    }

    __int16 v69 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
    [v69 setStateForActiveZones:@"resetzone"];

    int v70 = objc_alloc(&OBJC_CLASS___CKKSDeleteCKZoneOperation);
    __int16 v71 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
    id v18 = -[CKKSDeleteCKZoneOperation initWithDependencies:intendedState:errorState:]( v70,  "initWithDependencies:intendedState:errorState:",  v71,  @"resetlocal",  @"resetzone");

    goto LABEL_35;
  }

  if ([v8 isEqualToString:@"zone_deletion_failed_due_to_network_error"])
  {
    if ([v9 _onqueueContains:@"zone_deletion"])
    {
      [v9 _onqueueRemoveFlag:@"zone_deletion"];
      unsigned int v20 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"recover-from-zone-deletion-network-failure",  @"resetzone"));
      goto LABEL_34;
    }

    id v80 = -[OctagonPendingFlag initWithFlag:conditions:delayInSeconds:]( objc_alloc(&OBJC_CLASS___OctagonPendingFlag),  "initWithFlag:conditions:delayInSeconds:",  @"zone_deletion",  2LL,  0.2);
    uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView stateMachine](self, "stateMachine"));
    goto LABEL_77;
  }

  if ([v8 isEqualToString:@"resetlocal"])
  {
    id v72 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView zoneName](self, "zoneName"));
    id v73 = sub_1000AA6AC(@"ckkskey", v72);
    uint64_t v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);

    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
    {
      id v75 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
      uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue([v75 views]);
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v76;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "Resetting local data for %@", buf, 0xCu);
    }

    -[CKKSKeychainView setLastNewTLKOperation:](self, "setLastNewTLKOperation:", 0LL);
    id v77 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
    [v77 setStateForActiveZones:@"initializing"];

    id v78 = objc_alloc(&OBJC_CLASS___CKKSLocalResetOperation);
    id v79 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
    id v18 = -[CKKSLocalResetOperation initWithDependencies:intendedState:errorState:]( v78,  "initWithDependencies:intendedState:errorState:",  v79,  @"initializing",  @"error");

    goto LABEL_35;
  }

  if ([v8 isEqualToString:@"zonecreationfailed"])
  {
    id v18 = (CKKSLocalResetOperation *)objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"recover-from-cloudkit-failure",  @"initializing"));
    uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
    __int16 v84 = (void *)objc_claimAutoreleasedReturnValue([v83 cloudkitRetryAfter]);
    id v85 = (void *)objc_claimAutoreleasedReturnValue([v84 operationDependency]);
    -[CKKSLocalResetOperation addNullableDependency:](v18, "addNullableDependency:", v85);

    id v43 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView operationDependencies](self, "operationDependencies"));
    id v44 = (void *)objc_claimAutoreleasedReturnValue([v43 cloudkitRetryAfter]);
LABEL_41:
    id v45 = v44;
    [v44 trigger];

LABEL_42:
    goto LABEL_35;
  }

  if ([v8 isEqualToString:@"zone_creation_failed_due_to_network_error"])
  {
    if ([v9 _onqueueContains:@"zone_creation"])
    {
      [v9 _onqueueRemoveFlag:@"zone_creation"];
      unsigned int v20 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"recover-from-zone-creation-network-failure",  @"initializing"));
      goto LABEL_34;
    }

    id v80 = -[OctagonPendingFlag initWithFlag:conditions:delayInSeconds:]( objc_alloc(&OBJC_CLASS___OctagonPendingFlag),  "initWithFlag:conditions:delayInSeconds:",  @"zone_creation",  2LL,  0.2);
    uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView stateMachine](self, "stateMachine"));
LABEL_77:
    BOOL v82 = v81;
    [v81 _onqueueHandlePendingFlagLater:v80];

    goto LABEL_52;
  }

  if ([v8 isEqualToString:@"lose_trust"])
  {
    if ([v9 _onqueueContains:@"trusted_operation_begin"])
    {
      [v9 _onqueueRemoveFlag:@"trusted_operation_begin"];
      unsigned int v20 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"begin-trusted-operation",  @"initialized"));
    }

    else
    {
      unsigned int v20 = objc_claimAutoreleasedReturnValue(-[CKKSKeychainView loseTrustOperation:](self, "loseTrustOperation:", @"waitfortrust"));
    }

    goto LABEL_34;
  }

  if ([v8 isEqualToString:@"waitfortrust"])
  {
    if ((id)-[CKKSKeychainView trustStatus](self, "trustStatus") == (id)1)
    {
      id v86 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKeychainView zoneName](self, "zoneName"));
      __int16 v87 = sub_1000AA6AC(@"ckkskey", v86);
      uint64_t v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);

      if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEFAULT,  "Beginning trusted state machine operation",  buf,  2u);
      }

      unsigned int v20 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"begin-trusted-operation",  @"initialized"));
      goto LABEL_34;
    }

    if ([v9 _onqueueContains:@"fetch_requested"])
    {
      [v9 _onqueueRemoveFlag:@"fetch_requested"];
      unsigned int v20 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"fetch-requested",  @"begin_fetch"));
      goto LABEL_34;
    }

    if ([v9 _onqueueContains:@"key_process_requested"])
    {
      [v9 _onqueueRemoveFlag:@"key_process_requested"];
      unsigned int v20 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"begin-trusted-operation",  @"process_key_hierarchy"));
      goto LABEL_34;
    }

    if ([v9 _onqueueContains:@"key_set"])
    {
      [v9 _onqueueRemoveFlag:@"key_set"];
      unsigned int v20 = objc_claimAutoreleasedReturnValue( +[OctagonStateTransitionOperation named:entering:]( &OBJC_CLASS___OctagonStateTransitionOperation,  "named:entering:",  @"provide-key-set",  @"provide_key_hieararchy_untrusted"));
      goto LABEL_34;
    }

  v6[9] = self->_timestampDnsEnd;
  *((_DWORD *)v6 + 70) |= 0x100u;
  id v25 = self->_has;
  if ((*(_DWORD *)&v25 & 0x10000) == 0)
  {
LABEL_21:
    if ((*(_WORD *)&v25 & 0x8000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }

void sub_1000C563C(uint64_t a1, void *a2, void *a3, uint64_t a4, int a5, int a6, void *a7)
{
  id v12 = a3;
  id v13 = a7;
  id v14 = sub_10001267C("octagon-health");
  id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 134218754;
    id v44 = a2;
    __int16 v45 = 2112;
    id v46 = v12;
    __int16 v47 = 1024;
    int v48 = a5;
    __int16 v49 = 2112;
    id v50 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "repairAccountIfTrustedByTPHWithIntendedState status: %ld, peerID: %@, isExcluded: %d error: %@",  buf,  0x26u);
  }

  if (v13)
  {
    uint64_t v16 = sub_10001267C("octagon-health");
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v44 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "got an error from tph, returning to become_ready state: %@",  buf,  0xCu);
    }

    uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v19 = @"BecomeReady";
LABEL_25:
    id v35 = v19;
    id v26 = *(id *)(v18 + 40);
    *(void *)(v18 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v19;
LABEL_26:

    goto LABEL_27;
  }

  if (a6)
  {
    unsigned int v20 = sub_10001267C("octagon-health");
    unsigned __int8 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "device is locked", buf, 2u);
    }

    uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v19 = @"WaitForUnlock";
    goto LABEL_25;
  }

  if (!a2 && v12)
  {
    id v22 = sub_10001267C("octagon-health");
    __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v44 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "TPH believes we're trusted, accepting ego peerID as %@",  buf,  0xCu);
    }

    int v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountMetadataStore]);
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472LL;
    v41[2] = sub_1000C5A48;
    v41[3] = &unk_100291520;
    id v42 = v12;
    id v40 = 0LL;
    unsigned int v25 = [v24 persistAccountChanges:v41 error:&v40];
    id v26 = v40;

    if (!v25 || v26)
    {
      unsigned int v36 = sub_10001267C("SecError");
      unsigned __int8 v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v44 = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "octagon-health: couldn't persist results: %@",  buf,  0xCu);
      }

      uint64_t v38 = *(void *)(*(void *)(a1 + 48) + 8LL);
      BOOL v39 = @"Error";
      unsigned int v32 = *(void **)(v38 + 40);
      *(void *)(v38 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = @"Error";
    }

    else
    {
      id v27 = sub_10001267C("octagon-health");
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "added trusted identity to account metadata",  buf,  2u);
      }

      uint64_t v29 = *(void **)(a1 + 40);
      uint64_t v30 = *(void *)(*(void *)(a1 + 48) + 8LL);
      id v31 = v29;
      unsigned int v32 = *(void **)(v30 + 40);
      *(void *)(v30 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v31;
    }

    goto LABEL_26;
  }

  if (a2 && v12)
  {
    id v33 = sub_10001267C("octagon-health");
    id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "TPH believes we're not trusted, requesting CFU post",  buf,  2u);
    }

    uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v19 = @"PostRepairCFU";
    goto LABEL_25;
  }

id sub_1000C5A48(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setTrustState:2];
  [v3 setPeerID:*(void *)(a1 + 32)];
  return v3;
}

void sub_1000C5A84(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained accountMetadataStore]);
  id v25 = 0LL;
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 loadOrCreateAccountMetadata:&v25]);
  id v8 = v25;

  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained lockStateTracker]);
    unsigned int v10 = [v9 isLockedError:v8];

    if (v10)
    {
      uint64_t v11 = sub_10001267C("octagon");
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Device is locked! pending initialization on unlock",  buf,  2u);
      }

      [v3 setNextState:@"WaitForClassCUnlock"];
      goto LABEL_15;
    }

    goto LABEL_7;
  }

  if (!v7)
  {
LABEL_7:
    id v13 = sub_10001267C("octagon");
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v27 = v8;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Error loading account data: %@", buf, 0xCu);
    }

    [v3 setNextState:@"NoAccount"];
  }

  if ([v7 isInheritedAccount])
  {
    [v3 setNextState:@"BecomeInherited"];
  }

  else
  {
    id v15 = sub_10001267C("octagon");
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "iCloud sign in occurred. Attempting to register with APS...",  buf,  2u);
    }

    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained containerName]);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[CKContainer containerWithIdentifier:](&OBJC_CLASS___CKContainer, "containerWithIdentifier:", v17));

    unsigned int v20 = _NSConcreteStackBlock;
    uint64_t v21 = 3221225472LL;
    id v22 = sub_1000C5D6C;
    __int16 v23 = &unk_100285148;
    objc_copyWeak(&v24, v4);
    [v18 serverPreferredPushEnvironmentWithCompletionHandler:&v20];
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "intendedState", v20, v21, v22, v23));
    [v3 setNextState:v19];

    objc_destroyWeak(&v24);
  }

void sub_1000C5D4C(_Unwind_Exception *a1)
{
}

void sub_1000C5D6C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained)
  {
    uint64_t v11 = sub_10001267C("SecError");
    unsigned int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_12;
    }
    LOWORD(v16) = 0;
    id v12 = "octagonpush: received callback for released object";
    id v13 = v10;
    uint32_t v14 = 2;
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v16, v14);
    goto LABEL_12;
  }

  if (!v5 || v6)
  {
    id v15 = sub_10001267C("SecError");
    unsigned int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_12;
    }
    int v16 = 138412546;
    id v17 = v5;
    __int16 v18 = 2112;
    id v19 = v6;
    id v12 = "octagonpush: Received error fetching preferred push environment (%@): %@";
    id v13 = v10;
    uint32_t v14 = 22;
    goto LABEL_11;
  }

  id v8 = sub_10001267C("octagonpush");
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 138412290;
    id v17 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Registering for environment '%@'",  (uint8_t *)&v16,  0xCu);
  }

  unsigned int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue([WeakRetained apsReceiver]);
  -[os_log_s registerForEnvironment:](v10, "registerForEnvironment:", v5);
LABEL_12:
}

void sub_1000C5F1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v7 = 0LL;
  id v8 = &v7;
  uint64_t v9 = 0x2020000000LL;
  char v10 = 0;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000C5FEC;
  v6[3] = &unk_100285120;
  void v6[4] = &v7;
  [v4 checkTrustStatusAndPostRepairCFUIfNecessary:v6];
  if (*((_BYTE *)v8 + 24)) {
    id v5 = @"WaitForUnlock";
  }
  else {
    id v5 = @"Untrusted";
  }
  [v3 setNextState:v5];
  _Block_object_dispose(&v7, 8);
}

void sub_1000C5FD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000C5FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6)
{
  id v8 = a6;
  if (!v8)
  {
    if (a5)
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a5;
      uint32_t v14 = sub_10001267C("octagon-health");
      char v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_11;
      }
      LOWORD(v16) = 0;
      uint64_t v11 = "device is locked, not posting cfu";
    }

    else
    {
      id v15 = sub_10001267C("octagon-health");
      char v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_11;
      }
      LOWORD(v16) = 0;
      uint64_t v11 = "posted repair cfu via state machine";
    }

    id v12 = v10;
    uint32_t v13 = 2;
    goto LABEL_10;
  }

  uint64_t v9 = sub_10001267C("SecError");
  char v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 138412290;
    id v17 = v8;
    uint64_t v11 = "ocagon-health: failed to post repair cfu via state machine: %@";
    id v12 = v10;
    uint32_t v13 = 12;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v16, v13);
  }

void sub_1000C6140(uint64_t a1)
{
  char from = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v2 = sub_10001267C("octagon-health");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v54 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) results]);
    unsigned int v49 = [v54 postRepairCFU];
    id v53 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) results]);
    unsigned int v48 = [v53 postEscrowCFU];
    __int16 v52 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) results]);
    unsigned int v4 = [v52 resetOctagon];
    BOOL v51 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) results]);
    unsigned int v5 = [v51 leaveTrust];
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) results]);
    unsigned int v7 = [v6 reroll];
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) results]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 moveRequest]);
    char v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) results]);
    *(_DWORD *)__int128 buf = 67110658;
    *(_DWORD *)__int16 v64 = v49;
    *(_WORD *)&v64[4] = 1024;
    *(_DWORD *)&v64[6] = v48;
    __int16 v65 = 1024;
    unsigned int v66 = v4;
    __int16 v67 = 1024;
    unsigned int v68 = v5;
    __int16 v69 = 1024;
    unsigned int v70 = v7;
    __int16 v71 = 1024;
    BOOL v72 = v9 != 0LL;
    __int16 v73 = 2112;
    uint64_t v74 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Returning from cuttlefish trust check call: postRepairCFU(%d), postEscrowCFU(%d), resetOctagon(%d), leaveTrust(%d) , reroll(%d), moveRequest(%d), results=%@",  buf,  0x30u);
  }

  uint64_t v11 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) results]);
  id v12 = (void *)WeakRetained[8];
  WeakRetained[8] = v11;

  uint32_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) results]);
  unsigned int v14 = [v13 postRepairCFU];

  if (v14)
  {
    id v15 = sub_10001267C("octagon-health");
    int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Posting Repair CFU", buf, 2u);
    }

    id v62 = 0LL;
    [WeakRetained postRepairCFU:&v62];
    id v17 = v62;
    if (v17) {
      [*(id *)(a1 + 32) setError:v17];
    }
  }

  __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) results]);
  unsigned int v19 = [v18 postEscrowCFU];

  if (v19)
  {
    id v61 = 0LL;
    unsigned int v20 = [WeakRetained shouldPostConfirmPasscodeCFU:&v61];
    id v21 = v61;
    if (v21)
    {
      id v22 = sub_10001267C("SecError");
      __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)__int16 v64 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "octagon-health, hit an error evaluating prerecord status: %@",  buf,  0xCu);
      }

      [*(id *)(a1 + 32) setError:v21];
    }

    id v24 = sub_10001267C("octagon-health");
    id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    BOOL v26 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
    if (v20)
    {
      if (v26)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Posting Escrow CFU", buf, 2u);
      }

      id v60 = 0LL;
      unsigned __int8 v27 = [WeakRetained postConfirmPasscodeCFU:&v60];
      id v25 = (os_log_s *)v60;
      if ((v27 & 1) == 0) {
        [*(id *)(a1 + 32) setError:v25];
      }
    }

    else if (v26)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Not posting confirm passcode CFU, already pending a prerecord upload",  buf,  2u);
    }
  }

  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) results]);
  unsigned int v29 = [v28 leaveTrust];

  if (v29)
  {
    uint64_t v30 = sub_10001267C("octagon-health");
    id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Leaving Octagon and SOS trust", buf, 2u);
    }

    id v59 = 0LL;
    unsigned __int8 v32 = [WeakRetained leaveTrust:&v59];
    id v33 = v59;
    if ((v32 & 1) == 0) {
      [*(id *)(a1 + 32) setError:v33];
    }
  }

  id v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) results]);
  unsigned int v35 = [v34 reroll];

  if (v35)
  {
    v57[0] = _NSConcreteStackBlock;
    v57[1] = 3221225472LL;
    v57[2] = sub_1000C67E0;
    v57[3] = &unk_1002850F8;
    objc_copyWeak(&v58, from);
    unsigned int v36 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSResultOperation named:withBlockTakingSelf:]( &OBJC_CLASS___CKKSResultOperation,  "named:withBlockTakingSelf:",  @"reroll",  v57));
    [*(id *)(a1 + 32) addDependency:v36];
    unsigned __int8 v37 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
    [v37 addOperation:v36];

    objc_destroyWeak(&v58);
  }

  uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) results]);
  BOOL v39 = (void *)objc_claimAutoreleasedReturnValue([v38 moveRequest]);

  if (v39)
  {
    id v40 = sub_10001267C("octagon-health");
    unsigned int v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      id v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) results]);
      id v43 = (void *)objc_claimAutoreleasedReturnValue([v42 moveRequest]);
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)__int16 v64 = v43;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Received escrow move request: %@", buf, 0xCu);
    }

    id v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) results]);
    __int16 v45 = (void *)objc_claimAutoreleasedReturnValue([v44 moveRequest]);
    id v56 = 0LL;
    unsigned __int8 v46 = [WeakRetained processMoveRequest:v45 error:&v56];
    id v47 = v56;

    if ((v46 & 1) == 0) {
      [*(id *)(a1 + 32) setError:v47];
    }
  }
}

void sub_1000C67C0(_Unwind_Exception *a1)
{
}

void sub_1000C67E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v5 = sub_10001267C("octagon-health");
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Rerolling Octagon PeerID", buf, 2u);
  }

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000C68C0;
  v8[3] = &unk_100284FC8;
  id v9 = v3;
  id v7 = v3;
  [WeakRetained rerollWithReply:v8];
}

void sub_1000C68C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    unsigned int v4 = sub_10001267C("SecError");
    unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      id v7 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "octagon-health: reroll failed: %@",  (uint8_t *)&v6,  0xCu);
    }

    [*(id *)(a1 + 32) setError:v3];
  }
}

void sub_1000C698C(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000C6A08;
  v6[3] = &unk_1002850D0;
  id v7 = v3;
  id v5 = v3;
  [v4 checkTrustStatusAndPostRepairCFUIfNecessary:v6];
}

void sub_1000C6A08(uint64_t a1, uint64_t a2, int a3, char a4, int a5, void *a6)
{
  id v11 = a6;
  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v12 logResultForEvent:@"OctagonEventTPHHealthCheckStatus" hardFailure:0 result:v11];

  if (v11)
  {
    uint32_t v13 = sub_10001267C("SecError");
    unsigned int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v22 = 138412290;
      id v23 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "octagon-health: hit an error asking TPH for trust status: %@",  (uint8_t *)&v22,  0xCu);
    }

    [*(id *)(a1 + 32) setError:v11];
    id v15 = *(void **)(a1 + 32);
    int v16 = @"Error";
LABEL_5:
    [v15 setNextState:v16];
    goto LABEL_6;
  }

  if (!a5)
  {
    if ((a4 & 1) != 0)
    {
      unsigned int v19 = sub_10001267C("octagon-health");
      unsigned int v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      if (a2)
      {
        if (v21)
        {
          int v22 = 67109120;
          LODWORD(v23) = a3;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "TPH says we have an identity but we are not in Octagon, posted CFU: %d",  (uint8_t *)&v22,  8u);
        }

        id v15 = *(void **)(a1 + 32);
        int v16 = @"PostRepairCFU";
      }

      else
      {
        if (v21)
        {
          LOWORD(v22) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "TPH says we're trusted and in",  (uint8_t *)&v22,  2u);
        }

        id v15 = *(void **)(a1 + 32);
        int v16 = @"CuttlefishTrustCheck";
      }
    }

    else
    {
      id v15 = *(void **)(a1 + 32);
      int v16 = @"Untrusted";
    }

    goto LABEL_5;
  }

  [*(id *)(a1 + 32) setNextState:@"WaitForUnlock"];
  id v17 = sub_10001267C("octagon-health");
  __int16 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v22) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "TPH says device is locked!",  (uint8_t *)&v22,  2u);
  }

LABEL_6:
}

void sub_1000C6C54(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountMetadataStore]);
  id v17 = 0LL;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 loadOrCreateAccountMetadata:&v17]);
  id v6 = v17;

  uint64_t v7 = objc_claimAutoreleasedReturnValue([v5 peerID]);
  if (v7 && (v8 = (void *)v7, unsigned int v9 = [v5 trustState], v8, v9 == 2))
  {
    char v10 = sub_10001267C("octagon-health");
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v5 peerID]);
      *(_DWORD *)__int128 buf = 138412290;
      unsigned int v19 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "peer is trusted: %@", buf, 0xCu);
    }

    [v3 setNextState:@"TPHTrustCheck"];
  }

  else
  {
    uint32_t v13 = sub_10001267C("octagon-health");
    unsigned int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "trustStateAsString:", objc_msgSend(v5, "trustState")));
      *(_DWORD *)__int128 buf = 138412290;
      unsigned int v19 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "trust state (%@). checking in with TPH",  buf,  0xCu);
    }

    int v16 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) repairAccountIfTrustedByTPHWithIntendedState:@"TPHTrustCheck"]);
    [v3 setNextState:v16];
  }
}

void sub_1000C6E48(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained accountMetadataStore]);
  id v15 = 0LL;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 loadOrCreateAccountMetadata:&v15]);
  id v7 = v15;

  if (v7)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained lockStateTracker]);
    unsigned int v9 = [v8 isLockedError:v7];

    if (v9)
    {
      char v10 = sub_10001267C("octagon");
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Device is locked! pending initialization on unlock",  buf,  2u);
      }

      id v12 = &off_100290390;
      goto LABEL_11;
    }
  }

  else if (v6)
  {
    id v12 = (__CFString **)(a1 + 32);
    goto LABEL_11;
  }

  uint32_t v13 = sub_10001267C("octagon");
  unsigned int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Error loading account data: %@", buf, 0xCu);
  }

  id v12 = &off_100290148;
LABEL_11:
  [v3 setNextState:*v12];
}

void sub_1000C6FF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = sub_10001267C("octagon");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = *(void **)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412290;
    id v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Account now unavailable: %@", buf, 0xCu);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountMetadataStore]);
  id v16 = 0LL;
  [v7 persistAccountChanges:&stru_100285080 error:&v16];
  id v8 = v16;

  if (v8)
  {
    unsigned int v9 = sub_10001267C("SecError");
    char v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v18 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "octagon: unable to persist new account availability: %@",  buf,  0xCu);
    }
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountStateTracker]);
  [v11 setCDPCapableiCloudAccountStatus:3];

  id v12 = sub_10001267C("octagon-ckks");
  uint32_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ckks]);
    *(_DWORD *)__int128 buf = 138412290;
    id v18 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Informing %@ of new untrusted status (due to account disappearance)",  buf,  0xCu);
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ckks]);
  [v15 endTrustedOperation];

  [v3 setError:v8];
}

OTAccountMetadataClassC *__cdecl sub_1000C71FC(id a1, OTAccountMetadataClassC *a2)
{
  uint64_t v2 = a2;
  -[OTAccountMetadataClassC setIcloudAccountState:](v2, "setIcloudAccountState:", 1LL);
  -[OTAccountMetadataClassC setAltDSID:](v2, "setAltDSID:", 0LL);
  -[OTAccountMetadataClassC setTrustState:](v2, "setTrustState:", 0LL);
  -[OTAccountMetadataClassC setCdpState:](v2, "setCdpState:", 0LL);
  -[OTAccountMetadataClassC setSecureElementIdentity:](v2, "setSecureElementIdentity:", 0LL);
  return v2;
}

void sub_1000C7258(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained accountMetadataStore]);
  id v63 = 0LL;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 loadOrCreateAccountMetadata:&v63]);
  id v7 = v63;

  if (v7)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained lockStateTracker]);
    unsigned int v9 = [v8 isLockedError:v7];

    if (v9)
    {
      char v10 = sub_10001267C("octagon");
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Device is locked! pending initialization on unlock",  buf,  2u);
      }

      id v12 = @"WaitForClassCUnlock";
      goto LABEL_20;
    }

    goto LABEL_16;
  }

  if (!v6)
  {
LABEL_16:
    unsigned int v29 = sub_10001267C("octagon");
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v65 = v7;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Error loading account data: %@", buf, 0xCu);
    }

    [WeakRetained setMetricsStateToActive];
LABEL_19:
    id v12 = @"NoAccount";
    goto LABEL_20;
  }

  if ([v6 icloudAccountState] != 2)
  {
    if ([v6 icloudAccountState] == 1
      && (id v31 = (void *)objc_claimAutoreleasedReturnValue([v6 altDSID]), v31, v31))
    {
      unsigned __int8 v32 = sub_10001267C("octagon");
      id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "An iCloud account exists, but doesn't appear to be CDP Capable. Let's check!",  buf,  2u);
      }
    }

    else
    {
      if ([v6 icloudAccountState] == 1)
      {
        id v34 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained accountStateTracker]);
        [v34 setCDPCapableiCloudAccountStatus:3];

        unsigned int v35 = sub_10001267C("octagon");
        unsigned int v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "No iCloud account available.", buf, 2u);
        }

        objc_msgSend(WeakRetained, "setMetricsToState:", objc_msgSend(v6, "sendingMetricsPermitted"));
        goto LABEL_19;
      }

      unsigned __int8 v37 = sub_10001267C("octagon");
      id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "icloudAccountStateAsString:", objc_msgSend(v6, "icloudAccountState")));
        *(_DWORD *)__int128 buf = 138412290;
        id v65 = v38;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Unknown account state (%@). Determining...",  buf,  0xCu);
      }
    }

    objc_msgSend(WeakRetained, "setMetricsToState:", objc_msgSend(v6, "sendingMetricsPermitted"));
    id v12 = @"DetermineiCloudAccountState";
    goto LABEL_20;
  }

  uint32_t v13 = sub_10001267C("octagon");
  unsigned int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "An CDP Capable iCloud account exists; waiting for CloudKit to confirm",
      buf,
      2u);
  }

  objc_msgSend(WeakRetained, "setMetricsToState:", objc_msgSend(v6, "sendingMetricsPermitted"));
  id v15 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained activeAccount]);

  if (!v15)
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained accountsAdapter]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained personaAdapter]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained containerName]);
    unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained contextID]);
    id v62 = 0LL;
    unsigned int v20 = (void *)objc_claimAutoreleasedReturnValue( [v16 findAccountForCurrentThread:v17 optionalAltDSID:0 cloudkitContainerName:v18 octagonContextID:v19 error:&v62]);
    id v21 = v62;
    [WeakRetained setActiveAccount:v20];

    int v22 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained activeAccount]);
    if (!v22 || v21)
    {
      BOOL v39 = sub_10001267C("SecError");
      unsigned __int8 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_35;
      }
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained contextID]);
      *(_DWORD *)__int128 buf = 138412546;
      id v65 = v28;
      __int16 v66 = 2112;
      id v67 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "octagon-account: unable to determine active account for context(%@). Issues ahead: %@",  buf,  0x16u);
    }

    else
    {
      id v23 = sub_10001267C("octagon-account");
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        id v25 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained contextID]);
        BOOL v26 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained activeAccount]);
        *(_DWORD *)__int128 buf = 138412546;
        id v65 = v25;
        __int16 v66 = 2112;
        id v67 = v26;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Found a new account (%@): %@", buf, 0x16u);
      }

      unsigned __int8 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue([WeakRetained accountMetadataStore]);
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained activeAccount]);
      -[os_log_s changeActiveAccount:](v27, "changeActiveAccount:", v28);
    }

LABEL_35:
    id v60 = v21;

    id v40 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained activeAccount]);
    uint64_t v41 = objc_claimAutoreleasedReturnValue([v40 altDSID]);
    if (v41)
    {
      id v42 = (void *)v41;
      id v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "activeAccount", v21));
      id v44 = (void *)objc_claimAutoreleasedReturnValue([v43 altDSID]);
      __int16 v45 = (void *)objc_claimAutoreleasedReturnValue([v6 altDSID]);
      unsigned __int8 v46 = [v44 isEqualToString:v45];

      if ((v46 & 1) != 0)
      {
LABEL_42:

        goto LABEL_43;
      }
    }

    else
    {
    }

    id v47 = sub_10001267C("SecError");
    unsigned int v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v49 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained activeAccount]);
      id v50 = (void *)objc_claimAutoreleasedReturnValue([v49 altDSID]);
      BOOL v51 = (void *)objc_claimAutoreleasedReturnValue([v6 altDSID]);
      *(_DWORD *)__int128 buf = 138412546;
      id v65 = v50;
      __int16 v66 = 2112;
      id v67 = v51;
      _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "octagon-account: discovered altDSID (%@) does not match persisted altDSID (%@)",  buf,  0x16u);
    }

    goto LABEL_42;
  }

void sub_1000C7A64(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = v7;
  if (!v6 || v7)
  {
    id v12 = sub_10001267C("SecError");
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 138412290;
      id v14 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "octagon-ckks: Unable to fetch initial syncing policy. THIS MIGHT CAUSE SYNCING FAILURES LATER: %@",  (uint8_t *)&v13,  0xCu);
    }
  }

  else
  {
    unsigned int v9 = sub_10001267C("octagon-ckks");
    char v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 138412290;
      id v14 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Fetched initial syncing policy: %@",  (uint8_t *)&v13,  0xCu);
    }

    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ckks]);
    -[os_log_s setCurrentSyncingPolicy:](v11, "setCurrentSyncingPolicy:", v6);
  }
}

void sub_1000C7BAC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v21 = 0LL;
  unsigned int v2 = [WeakRetained fetchSendingMetricsPermitted:&v21];
  id v3 = (__CFString *)v21;
  if (!v3)
  {
    id v7 = sub_10001267C("octagon-metrics");
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v9 = @"Not Permitted";
      if (v2) {
        unsigned int v9 = @"Permitted";
      }
      *(_DWORD *)__int128 buf = 138412290;
      id v23 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "current metrics setting set to: %@",  buf,  0xCu);
    }

    if (!v2) {
      goto LABEL_18;
    }
    id v20 = 0LL;
    unsigned int v10 = [WeakRetained persistSendingMetricsPermitted:0 error:&v20];
    id v11 = (__CFString *)v20;
    id v12 = v11;
    if (!v10 || v11)
    {
      id v18 = sub_10001267C("SecError");
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v23 = v12;
        id v15 = "octagon-metrics: failed to persist metrics setting: %@";
        id v16 = v14;
        uint32_t v17 = 12;
        goto LABEL_16;
      }
    }

    else
    {
      int v13 = sub_10001267C("octagon-metrics");
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        id v15 = "persisted metrics setting set to not permitted";
        id v16 = v14;
        uint32_t v17 = 2;
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
      }
    }

LABEL_18:
    unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained checkMetricsTrigger]);
    [v19 cancel];

    [WeakRetained setCheckMetricsTrigger:0];
    goto LABEL_19;
  }

  unsigned int v4 = sub_10001267C("SecError");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v23 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "octagon-metrics: failed to fetch account metadata: %@",  buf,  0xCu);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained checkMetricsTrigger]);
  [v6 trigger];

LABEL_19:
}

void sub_1000C7E10(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    unsigned int v4 = sub_10001267C("SecError");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138412290;
      id v9 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "localReset returned an error: %@",  (uint8_t *)&v8,  0xCu);
    }
  }

  else
  {
    id v6 = sub_10001267C("octagon");
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v_Block_object_dispose(va, 8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "localReset succeeded", (uint8_t *)&v8, 2u);
    }

    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) pairingUUID]);
    [*(id *)(a1 + 32) setPairingUUID:v5];
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_1000C7F44(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    unsigned int v4 = sub_10001267C("SecError");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      id v11 = v3;
      id v6 = "octagon-perform-ckserver-unreadable-data-removal: failed with error: %@";
      id v7 = v5;
      uint32_t v8 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v10, v8);
    }
  }

  else
  {
    id v9 = sub_10001267C("octagon-perform-ckserver-unreadable-data-removal");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v1syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0;
      id v6 = "succeeded!";
      id v7 = v5;
      uint32_t v8 = 2;
      goto LABEL_6;
    }
  }

  (*(void (**)(void, id))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32), v3);
}

OTAccountMetadataClassC *__cdecl sub_1000C805C(id a1, OTAccountMetadataClassC *a2)
{
  unsigned int v2 = a2;
  -[OTAccountMetadataClassC setCdpState:](v2, "setCdpState:", 2LL);
  return v2;
}

id sub_1000C8088(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setAltDSID:*(void *)(a1 + 32)];
  return v3;
}

void sub_1000C80B8(uint64_t a1)
{
  unsigned int v2 = sub_10001267C("octagon");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = *(AAFAnalyticsEventSecurity **)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412290;
    id v34 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Told of a new CK account status: %@", buf, 0xCu);
  }

  [*(id *)(a1 + 40) setCloudKitAccountInfo:*(void *)(a1 + 32)];
  if ([*(id *)(a1 + 32) accountStatus] == (id)1)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) activeAccount]);

    if (!v5)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sessionMetrics]);
      id v9 = objc_alloc(&OBJC_CLASS___AAFAnalyticsEventSecurity);
      int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) activeAccount]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 altDSID]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v7 flowID]);
      int v13 = (void *)objc_claimAutoreleasedReturnValue([v7 deviceSessionID]);
      uint64_t v14 = kSecurityRTCEventNameCloudKitAccountAvailability;
      LOBYTE(v31) = objc_msgSend( *(id *)(a1 + 40),  "canSendMetricsUsingAccountState:",  objc_msgSend(*(id *)(a1 + 40), "shouldSendMetricsForOctagon"));
      uint32_t v8 = -[AAFAnalyticsEventSecurity initWithKeychainCircleMetrics:altDSID:flowID:deviceSessionID:eventName:testsAreEnabled:canSendMetrics:category:]( v9,  "initWithKeychainCircleMetrics:altDSID:flowID:deviceSessionID:eventName:testsAreEnabled:canSendMetrics:category:",  0LL,  v11,  v12,  v13,  v14,  0LL,  v31,  kSecurityRTCEventCategoryAccountDataAccessRecovery);

      id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountsAdapter]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) personaAdapter]);
      uint32_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) containerName]);
      id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) contextID]);
      id v32 = 0LL;
      unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue( [v15 findAccountForCurrentThread:v16 optionalAltDSID:0 cloudkitContainerName:v17 octagonContextID:v18 error:&v32]);
      id v20 = v32;
      [*(id *)(a1 + 40) setActiveAccount:v19];

      id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) activeAccount]);
      int v22 = sub_10001267C("octagon-account");
      id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
      if (v21)
      {
        if (v24)
        {
          id v25 = (AAFAnalyticsEventSecurity *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) contextID]);
          BOOL v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) activeAccount]);
          *(_DWORD *)__int128 buf = 138412546;
          id v34 = v25;
          __int16 v35 = 2112;
          id v36 = v26;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Found a new account (%@): %@",  buf,  0x16u);
        }

        id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountMetadataStore]);
        unsigned __int8 v27 = (AAFAnalyticsEventSecurity *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) activeAccount]);
        -[os_log_s changeActiveAccount:](v23, "changeActiveAccount:", v27);
      }

      else
      {
        if (!v24)
        {
LABEL_14:

          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) activeAccount]);
          +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v8,  v28 != 0LL,  v20);

          goto LABEL_15;
        }

        unsigned __int8 v27 = (AAFAnalyticsEventSecurity *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) contextID]);
        *(_DWORD *)__int128 buf = 138412546;
        id v34 = v27;
        __int16 v35 = 2112;
        id v36 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Unable to find a current account (context %@): %@",  buf,  0x16u);
      }

      goto LABEL_14;
    }
  }

  id v6 = sub_10001267C("octagon-account");
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_DEFAULT))
  {
    uint32_t v8 = (AAFAnalyticsEventSecurity *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) contextID]);
    *(_DWORD *)__int128 buf = 138412290;
    id v34 = v8;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v7, OS_LOG_TYPE_DEFAULT, "skipping account fetch %@", buf, 0xCu);
LABEL_15:
  }

  unsigned int v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) stateMachine]);
  [v29 _onqueuePokeStateMachine];

  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) cloudKitAccountStateKnown]);
  [v30 fulfill];
}

id sub_1000C8518(uint64_t a1, uint64_t a2)
{
  return +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  *(void *)(a1 + 32),  a2 == 0,  a2);
}

void sub_1000C8538(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v2 = sub_10001267C("octagon-ckks");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Adding flag for CKKS TLK upload", v5, 2u);
  }

  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained stateMachine]);
  [v4 handleFlag:@"tlk_upload_needed"];
}

void sub_1000C85D4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v2 = sub_10001267C("octagon-ckks");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Adding flag for CKKS policy check", v5, 2u);
  }

  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained stateMachine]);
  [v4 handleFlag:@"policy_check_needed"];
}

void sub_1000C8670(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  dispatch_queue_attr_t v1 = -[OctagonPendingFlag initWithFlag:conditions:]( objc_alloc(&OBJC_CLASS___OctagonPendingFlag),  "initWithFlag:conditions:",  @"attempt_ucv_upgrade",  3LL);
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained stateMachine]);
  [v2 handlePendingFlag:v1];
}

void sub_1000C86E0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v2 = sub_10001267C("octagon-metrics");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Added check-on-metrics flag to the state machine",  v5,  2u);
  }

  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained stateMachine]);
  [v4 handleFlag:@"check_on_rtc_metrics"];
}

__CFString *sub_1000C8C68(uint64_t a1)
{
  if (!a1)
  {
    id v6 = @"none";
    return v6;
  }

  uint64_t v1 = a1;
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  id v3 = v2;
  if ((v1 & 1) == 0)
  {
    if ((v1 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_10:
    [v3 addObject:@"network"];
    v1 &= ~2uLL;
    if (!v1) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  [v2 addObject:@"unlock"];
  v1 &= ~1uLL;
  if ((v1 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if (v1)
  {
LABEL_5:
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Conditions<0x%x>",  v1));
    [v3 addObject:v4];
  }

BOOL sub_1000C91B0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0LL;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0LL;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0LL;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 101)
      {
        uint64_t String = PBReaderReadString(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v14 = 8LL;
LABEL_21:
        id v16 = *(void **)(a1 + v14);
        *(void *)(a1 + v14) = v13;

        goto LABEL_23;
      }

      if ((PBReaderSkipValueWithTag(a2) & 1) == 0) {
        return 0LL;
      }
LABEL_23:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }

    uint64_t v15 = PBReaderReadString(a2);
    uint64_t v13 = objc_claimAutoreleasedReturnValue(v15);
    uint64_t v14 = 16LL;
    goto LABEL_21;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000C95E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000C9738(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v9 logResultForEvent:@"OctagonEventPreflightVouchWithCustodianRecoveryKey" hardFailure:1 result:v7];

  if (!v6 || v7)
  {
    uint64_t v13 = sub_10001267C("SecError");
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 138412290;
      id v17 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "octagon: Error preflighting voucher using custodian recovery key: %@",  (uint8_t *)&v16,  0xCu);
    }

    [WeakRetained setError:v7];
  }

  else
  {
    int v10 = sub_10001267C("octagon");
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 138412290;
      id v17 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Preflight Custodian Recovery key ID %@ looks good to go",  (uint8_t *)&v16,  0xCu);
    }

    id v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
    [WeakRetained setNextState:v12];
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
  [WeakRetained runBeforeGroupFinished:v15];
}

void sub_1000C9D98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000C9EC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000CA01C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000CA220(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v17 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v17 logResultForEvent:@"OctagonEventVoucherWithCustodianRecoveryKey" hardFailure:1 result:v15];

  if (v15)
  {
    id v18 = sub_10001267C("SecError");
    unsigned int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v38 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "octagon: Error preparing voucher using custodian recovery key: %@",  buf,  0xCu);
    }

    [WeakRetained setError:v15];
LABEL_16:
    id v25 = (id)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
    [WeakRetained runBeforeGroupFinished:v25];
    goto LABEL_17;
  }

  id v20 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v20 recordRecoveredTLKMetrics:*(void *)(a1 + 32) tlkRecoveryResults:v14 uniqueTLKsRecoveredEvent:@"OACustodianUniqueTLKsRecoveredCount" totalSharesRecoveredEvent:@"OACustodianTotalTLKSharesRecoveredCount" totalRecoverableTLKS haresEvent:@"OACustodianTotalTLKSharesCount" totalRecoverableTLKsEvent:@"OACustodianUniqueTLKsWithSharesCount" totalViewsWithSharesEvent:@"OACustodianTLKUniqueViewCount"];

  [WeakRetained setVoucher:v11];
  [WeakRetained setVoucherSig:v12];
  if (![WeakRetained saveVoucher])
  {
LABEL_13:
    unsigned int v29 = sub_10001267C("octagon");
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412546;
      id v38 = v11;
      __int16 v39 = 2112;
      id v40 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Successfully vouched with a custodian recovery key: %@, %@",  buf,  0x16u);
    }

    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
    [WeakRetained setNextState:v31];

    goto LABEL_16;
  }

  id v21 = sub_10001267C("octagon");
  int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Saving voucher for later use...", buf, 2u);
  }

  id v23 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  BOOL v24 = (void *)objc_claimAutoreleasedReturnValue([v23 stateHolder]);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472LL;
  void v33[2] = sub_1000CA61C;
  v33[3] = &unk_1002855F0;
  id v34 = v11;
  id v35 = v12;
  id v36 = v13;
  id v32 = 0LL;
  [v24 persistAccountChanges:v33 error:&v32];
  id v25 = v32;

  if (!v25)
  {

    goto LABEL_13;
  }

  BOOL v26 = sub_10001267C("octagon");
  unsigned __int8 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v38 = v25;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "unable to save voucher: %@", buf, 0xCu);
  }

  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
  [WeakRetained runBeforeGroupFinished:v28];

LABEL_17:
}

id sub_1000CA61C(void *a1, void *a2)
{
  id v3 = a2;
  [v3 setVoucher:a1[4]];
  [v3 setVoucherSignature:a1[5]];
  [v3 setTLKSharesPairedWithVoucher:a1[6]];
  return v3;
}

void sub_1000CA664(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  char v8 = WeakRetained;
  if (v6)
  {
    id v9 = sub_10001267C("SecError");
    int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v33 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "octagon: Error fetching TLKShares to recover: %@",  buf,  0xCu);
    }

    [v8 setError:v6];
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 finishOp]);
    [v8 runBeforeGroupFinished:v11];
  }

  else
  {
    BOOL v26 = WeakRetained;
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    id v25 = v5;
    id v12 = v5;
    id v13 = [v12 countByEnumeratingWithState:&v27 objects:v31 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v28;
      do
      {
        for (uint64_t i = 0LL; i != v14; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v28 != v15) {
            objc_enumerationMutation(v12);
          }
          id v17 = *(void **)(*((void *)&v27 + 1) + 8LL * (void)i);
          id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 recordType]);
          unsigned int v19 = [v18 isEqual:@"tlkshare"];

          if (v19)
          {
            id v20 = objc_alloc(&OBJC_CLASS___CKKSTLKShareRecord);
            id v21 = (void *)objc_claimAutoreleasedReturnValue([v26 deps]);
            int v22 = (void *)objc_claimAutoreleasedReturnValue([v21 contextID]);
            id v23 = -[CKKSCKRecordHolder initWithCKRecord:contextID:](v20, "initWithCKRecord:contextID:", v17, v22);

            BOOL v24 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSTLKShareRecord share](v23, "share"));
            [v11 addObject:v24];
          }
        }

        id v14 = [v12 countByEnumeratingWithState:&v27 objects:v31 count:16];
      }

      while (v14);
    }

    char v8 = v26;
    [v26 proceedWithFilteredTLKShares:v11];
    id v6 = 0LL;
    id v5 = v25;
  }
}

void sub_1000CA8DC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v11 logResultForEvent:@"OctagonEventPreflightVouchWithCustodianRecoveryKey" hardFailure:1 result:v9];

  if (!v7 || v9)
  {
    int v16 = sub_10001267C("SecError");
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 138412290;
      id v20 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "octagon: Error preflighting voucher using custodian recovery key: %@",  (uint8_t *)&v19,  0xCu);
    }

    [WeakRetained setError:v9];
    id v18 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
    [WeakRetained runBeforeGroupFinished:v18];
  }

  else
  {
    id v12 = sub_10001267C("octagon");
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 138412290;
      id v20 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Custodian Recovery key ID %@ looks good to go",  (uint8_t *)&v19,  0xCu);
    }

    id v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 ckks]);
    [v15 setCurrentSyncingPolicy:v8];

    [WeakRetained proceedWithRecoveryKeyID:v7];
  }
}

void sub_1000CB198( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id *location)
{
}

void sub_1000CB30C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000CB5FC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v11 logResultForEvent:@"OctagonEventVoucherWithInheritanceKey" hardFailure:1 result:v9];

  if (v9)
  {
    id v12 = sub_10001267C("SecError");
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v28 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "octagon-inheritor: Error recovering tlkshares: %@",  buf,  0xCu);
    }

    [WeakRetained setError:v9];
    id v14 = (id)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
    [WeakRetained runBeforeGroupFinished:v14];
  }

  else
  {
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
    [v15 recordRecoveredTLKMetrics:*(void *)(a1 + 32) tlkRecoveryResults:v8 uniqueTLKsRecoveredEvent:@"OAInheritanceUniqueTLKsRecoveredCount" totalSharesRecoveredEvent:@"OAInheritanceTotalTLKSharesRecoveredCount" totalRecoverableTL KSharesEvent:@"OAInheritanceTotalTLKSharesCount" totalRecoverableTLKsEvent:@"OAInheritanceUniqueTLKsWithSharesCount" totalViewsWithSharesEvent:@"OAInheritanceTLKUniqueViewCount"];

    int v16 = sub_10001267C("octagon-inheritor");
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Saving tlkshares for later use...", buf, 2u);
    }

    id v18 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    int v19 = (void *)objc_claimAutoreleasedReturnValue([v18 stateHolder]);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_1000CB93C;
    v25[3] = &unk_100291520;
    id v26 = v7;
    id v24 = 0LL;
    [v19 persistAccountChanges:v25 error:&v24];
    id v14 = v24;

    uint64_t v20 = sub_10001267C("octagon-inheritor");
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if (v14)
    {
      if (v22)
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v28 = v14;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "unable to save shares: %@", buf, 0xCu);
      }
    }

    else
    {
      if (v22)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Successfully recovered shares", buf, 2u);
      }

      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
      [WeakRetained setNextState:v21];
    }

    id v23 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
    [WeakRetained runBeforeGroupFinished:v23];
  }
}

id sub_1000CB93C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setTLKSharesPairedWithVoucher:*(void *)(a1 + 32)];
  return v3;
}

uint64_t sub_1000CB96C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_1000CB97C(uint64_t a1)
{
}

id sub_1000CB984(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 parsedSecureElementIdentity]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v4;

  return v3;
}

void sub_1000CB9C8( uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, uint64_t a8, void *a9, void *a10)
{
  id v16 = a2;
  id v17 = a3;
  id v18 = a4;
  id v19 = a5;
  id v20 = a6;
  id v63 = a7;
  id v21 = a9;
  id v22 = a10;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v24 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v24 logResultForEvent:@"OctagonEventPrepareIdentity" hardFailure:1 result:v22];

  if (v22)
  {
    id v25 = sub_10001267C("SecError");
    id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v76 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "octagon-inheritor: Error preparing inheritor identity: %@",  buf,  0xCu);
    }

    [WeakRetained setError:v22];
    id v27 = (id)objc_claimAutoreleasedReturnValue([WeakRetained finishOp]);
    [WeakRetained runBeforeGroupFinished:v27];
    id v28 = WeakRetained;
    __int128 v29 = v63;
  }

  else
  {
    __int128 v30 = sub_10001267C("octagon-inheritor");
    uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412802;
      id v76 = v16;
      __int16 v77 = 2112;
      id v78 = v17;
      __int16 v79 = 2112;
      id v80 = v18;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Prepared: %@ %@ %@", buf, 0x20u);
    }

    [WeakRetained setPeerID:v16];
    id v62 = v17;
    [WeakRetained setPermanentInfo:v17];
    id v61 = v18;
    [WeakRetained setPermanentInfoSig:v18];
    id v60 = v19;
    [WeakRetained setStableInfo:v19];
    id v65 = WeakRetained;
    id v59 = v20;
    [WeakRetained setStableInfoSig:v20];
    id v32 = sub_10001267C("octagon-inheritor");
    id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      id v34 = (void *)objc_claimAutoreleasedReturnValue([v63 viewList]);
      *(_DWORD *)__int128 buf = 138412546;
      id v76 = v63;
      __int16 v77 = 2112;
      id v78 = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "New syncing policy: %@ views: %@",  buf,  0x16u);
    }

    __int16 v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    __int128 v70 = 0u;
    __int128 v71 = 0u;
    __int128 v72 = 0u;
    __int128 v73 = 0u;
    id v58 = v21;
    id v35 = v21;
    id v36 = [v35 countByEnumeratingWithState:&v70 objects:v74 count:16];
    if (v36)
    {
      id v37 = v36;
      uint64_t v38 = *(void *)v71;
      do
      {
        for (uint64_t i = 0LL; i != v37; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v71 != v38) {
            objc_enumerationMutation(v35);
          }
          id v40 = *(void **)(*((void *)&v70 + 1) + 8LL * (void)i);
          uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v40 recordType]);
          unsigned int v42 = [v41 isEqual:@"tlkshare"];

          if (v42)
          {
            id v43 = objc_alloc(&OBJC_CLASS___CKKSTLKShareRecord);
            id v44 = (void *)objc_claimAutoreleasedReturnValue([v65 deps]);
            __int16 v45 = (void *)objc_claimAutoreleasedReturnValue([v44 contextID]);
            unsigned __int8 v46 = -[CKKSCKRecordHolder initWithCKRecord:contextID:](v43, "initWithCKRecord:contextID:", v40, v45);

            id v47 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSTLKShareRecord share](v46, "share"));
            [v64 addObject:v47];
          }
        }

        id v37 = [v35 countByEnumeratingWithState:&v70 objects:v74 count:16];
      }

      while (v37);
    }

    unsigned int v48 = (void *)objc_claimAutoreleasedReturnValue([v65 deps]);
    unsigned int v49 = (void *)objc_claimAutoreleasedReturnValue([v48 stateHolder]);
    v67[0] = _NSConcreteStackBlock;
    v67[1] = 3221225472LL;
    v67[2] = sub_1000CBFA0;
    v67[3] = &unk_1002864C0;
    id v68 = v16;
    __int128 v29 = v63;
    id v50 = v63;
    id v69 = v50;
    id v66 = 0LL;
    unsigned int v51 = [v49 persistAccountChanges:v67 error:&v66];
    id v27 = v66;

    if (!v51 || v27)
    {
      id v55 = sub_10001267C("octagon-inheritor");
      id v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v76 = v27;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "Couldn't persist metadata: %@", buf, 0xCu);
      }

      [v65 setError:v27];
      unsigned int v57 = (void *)objc_claimAutoreleasedReturnValue([v65 finishOp]);
      [v65 runBeforeGroupFinished:v57];

      id v18 = v61;
      id v17 = v62;
      id v20 = v59;
      id v19 = v60;
      id v21 = v58;
      unsigned int v54 = v64;
    }

    else
    {
      __int16 v52 = (void *)objc_claimAutoreleasedReturnValue([v65 deps]);
      id v53 = (void *)objc_claimAutoreleasedReturnValue([v52 ckks]);
      [v53 setCurrentSyncingPolicy:v50];

      unsigned int v54 = v64;
      [v65 proceedWithFilteredTLKShares:v64];
      id v18 = v61;
      id v17 = v62;
      id v20 = v59;
      id v19 = v60;
      id v21 = v58;
    }

    id v22 = 0LL;
    id v28 = v65;
  }
}

id sub_1000CBFA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setPeerID:*(void *)(a1 + 32)];
  [v3 setTrustState:2];
  [v3 setIsInheritedAccount:1];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 tlkSharesForVouchedIdentitys]);
  [v4 removeAllObjects];

  [v3 setTPSyncingPolicy:*(void *)(a1 + 40)];
  return v3;
}

CFMutableDictionaryRef sub_1000CC530(uint64_t a1)
{
  **(void **)(a1 + 32) = _CFRuntimeRegisterClass(&unk_1002856B0);
  dispatch_queue_t v1 = dispatch_queue_create("SOSEngine queue", 0LL);
  unsigned int v2 = (void *)qword_1002DE9B8;
  qword_1002DE9B8 = (uint64_t)v1;

  CFMutableDictionaryRef result = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  qword_1002DE9C0 = (uint64_t)result;
  return result;
}

CFStringRef sub_1000CC5AC(void *a1, const __CFDictionary *a2)
{
  uint64_t v4 = (const __CFArray *)a1[10];
  if (v4) {
    CFStringRef v5 = CFStringCreateByCombiningStrings(kCFAllocatorDefault, v4, @" ");
  }
  else {
    CFStringRef v5 = &stru_100294B48;
  }
  uint64_t v6 = a1[3];
  id v7 = (const __CFDictionary *)a1[6];
  if (v7) {
    CFIndex Count = CFDictionaryGetCount(v7);
  }
  else {
    CFIndex Count = 0LL;
  }
  id v9 = (const __CFDictionary *)a1[7];
  if (v9) {
    id v9 = (const __CFDictionary *)CFDictionaryGetCount(v9);
  }
  CFStringRef v10 = CFStringCreateWithFormat( kCFAllocatorDefault,  a2,  @"<Engine %@ peers %@ MC[%d] PS[%d]>",  v6,  v5,  Count,  v9);
  if (v5) {
    CFRelease(v5);
  }
  return v10;
}

CFStringRef sub_1000CC670(void *a1)
{
  return sub_1000CC5AC(a1, 0LL);
}

const void *sub_1000CC678(uint64_t a1, const void *a2)
{
  uint64_t v4 = 0LL;
  if (a2)
  {
    CFStringRef v5 = *(const __CFDictionary **)(a1 + 48);
    if (v5)
    {
      Boolean Value = CFDictionaryGetValue(v5, a2);
      uint64_t v4 = Value;
      if (Value)
      {
        CFTypeID v7 = CFGetTypeID(Value);
        if (v7 != sub_1001AA920())
        {
          id v8 = sub_10001267C("SecError");
          id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            int v11 = 138412290;
            id v12 = a2;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "dropping corrupt manifest for %@ from cache",  (uint8_t *)&v11,  0xCu);
          }

          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), a2);
          return 0LL;
        }
      }
    }
  }

  return v4;
}

const void *sub_1000CC780(uint64_t a1, const __CFDictionary *a2, const void *a3)
{
  Boolean Value = CFDictionaryGetValue(a2, a3);
  if (!Value || (v7 = Value, CFTypeID v8 = CFGetTypeID(Value), v8 != CFDataGetTypeID())) {
    CFTypeID v7 = 0LL;
  }
  id v9 = sub_1000CC678(a1, v7);
  CFStringRef v10 = v9;
  if (v9) {
    CFRetain(v9);
  }
  return v10;
}

CFMutableArrayRef sub_1000CC808(uint64_t a1, const __CFDictionary *a2, const void *a3, __CFArray *Mutable)
{
  if (!-[OTSOSActualAdapter sosEnabled]_0(a1, (uint64_t)a2))
  {
    SOSCCSetSOSDisabledError(Mutable);
    return 0LL;
  }

  Boolean Value = (const __CFArray *)CFDictionaryGetValue(a2, a3);
  if (Value)
  {
    id v9 = Value;
    CFTypeID v10 = CFGetTypeID(Value);
    if (v10 == CFArrayGetTypeID())
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
      CFIndex Count = CFArrayGetCount(v9);
      if (Count >= 1)
      {
        CFIndex v12 = Count;
        for (CFIndex i = 0LL; i != v12; ++i)
        {
          unint64_t ValueAtIndex = CFArrayGetValueAtIndex(v9, i);
          uint64_t v15 = sub_1000CC678(a1, ValueAtIndex);
          if (v15) {
            CFArrayAppendValue(Mutable, v15);
          }
        }
      }

      return Mutable;
    }

    if (!Mutable) {
      return Mutable;
    }
    sub_1000194E0(-50, (__CFString **)Mutable, @"object %@ is not an array", v9);
    return 0LL;
  }

  return CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
}

void sub_1000CC948(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v8 = a1[5];
  id v9 = (const __CFString *)a1[6];
  uint64_t v11 = a1[7];
  CFTypeID v10 = (const void *)a1[8];
  if (!a3) {
    goto LABEL_18;
  }
  CFTypeRef cf = 0LL;
  uint64_t PeerInfo = SOSFullPeerInfoGetPeerInfo(v11);
  id v14 = (const void *)SOSPeerInfoCopyPubKey(PeerInfo, &cf);
  if (!v14)
  {
    uint64_t v15 = 0LL;
    goto LABEL_36;
  }

  uint64_t v15 = (const void *)SOSPeerInfoCopyPubKey(v10, &cf);
  if (!v15)
  {
LABEL_36:
    char v16 = 0;
    goto LABEL_5;
  }

  char v16 = SecOTRSIsForKeys(*(void *)(a3 + 24), v14, v15);
LABEL_5:
  if (cf)
  {
    id v17 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      id v18 = (const __CFString *)cf;
      if (!cf) {
        id v18 = @"No local error in SOSCoderCreate";
      }
      *(_DWORD *)__int128 buf = 138412290;
      id v44 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "SOSCoderIsFor failed: %@\n", buf, 0xCu);
    }
  }

  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  CFTypeRef v19 = cf;
  if (cf)
  {
    CFTypeRef cf = 0LL;
    CFRelease(v19);
  }

  if ((v16 & 1) != 0)
  {
    char v20 = 1;
    goto LABEL_34;
  }

uint64_t sub_1000CCE88(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  if (-[OTSOSActualAdapter sosEnabled]_0((uint64_t)v7, v8))
  {
    uint64_t v18 = 0LL;
    CFTypeRef v19 = &v18;
    uint64_t v20 = 0x2020000000LL;
    char v21 = 1;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    int v12[2] = sub_1000CCF8C;
    v12[3] = &unk_1002858F8;
    uint64_t v16 = a2;
    uint64_t v17 = a3;
    id v14 = &v18;
    uint64_t v15 = a1;
    id v13 = v7;
    unsigned int v9 = sub_1000CD270(a1, a3, v12);
    if (*((_BYTE *)v19 + 24)) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    *((_BYTE *)v19 + 24) = v10;

    _Block_object_dispose(&v18, 8);
  }

  else
  {
    SOSCCSetSOSDisabledError(a3);
    uint64_t v10 = 0LL;
  }

  return v10;
}

void sub_1000CCF74(_Unwind_Exception *a1)
{
}

void sub_1000CCF8C(uint64_t a1)
{
  unsigned int v2 = sub_1000CD3A0(*(void *)(a1 + 48), *(const void **)(a1 + 56), *(__CFArray **)(a1 + 64));
  if (v2)
  {
    id v3 = v2;
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v4 = *(const void **)(a1 + 56);
    uint64_t v6 = *(CFTypeRef **)(a1 + 64);
    if (!*(_BYTE *)(v5 + 104))
    {
      uint64_t v19 = 0LL;
      uint64_t v20 = &v19;
      uint64_t v21 = 0x2020000000LL;
      char v22 = 0;
      id v7 = (const __CFData *)(*(uint64_t (**)(void))(*(void *)(v5 + 16) + 40LL))();
      uint64_t v8 = v7;
      if (v7)
      {
        CFTypeRef v9 = sub_1000CD4D8(v7, v6);
        if (v9)
        {
          uint64_t v10 = *(const __CFDictionary **)(v5 + 56);
          context[0] = _NSConcreteStackBlock;
          context[1] = 3221225472LL;
          context[2] = sub_1000CD5AC;
          context[3] = &unk_100292DF0;
          void context[5] = v9;
          context[6] = v5;
          context[4] = &v19;
          CFDictionaryApplyFunction(v10, (CFDictionaryApplierFunction)sub_1000CDB84, context);
          uint64_t v11 = sub_10001267C("coder");
          CFIndex v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            int v13 = *((unsigned __int8 *)v20 + 24);
            *(_DWORD *)__int128 buf = 67109120;
            int v24 = v13;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Will force peer registration: %{BOOL}d",  buf,  8u);
          }

          if (*((_BYTE *)v20 + 24))
          {
            dispatch_queue_global_t global_queue = dispatch_get_global_queue(-32768LL, 0LL);
            uint64_t v15 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
            dispatch_async(v15, &stru_100285BF8);
          }

          *(_BYTE *)(v5 + 104) = 1;
        }

        CFRelease(v8);
        if (v9) {
          CFRelease(v9);
        }
      }

      _Block_object_dispose(&v19, 8);
      *(_BYTE *)(v5 + 104) = 1;
    }

    Boolean Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 96), v4);
    if (!Value || (CFTypeID v17 = CFGetTypeID(Value), v17 != sub_1001A96C8())) {
      SOSErrorCreate(1032LL, v6, 0LL, @"No coder for peer: %@");
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32));
    CFRelease(v3);
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = SOSErrorCreate( 1032LL,  *(void *)(a1 + 64),  0LL,  @"Engine has no peer for %@");
  }

void sub_1000CD248( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1000CD270(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 16);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_1000CD310;
  v11[3] = &unk_100285B38;
  id v12 = v5;
  uint64_t v13 = a1;
  id v7 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void *))(v6 + 64);
  id v8 = v5;
  uint64_t v9 = v7(v6, a2, 0LL, 1LL, v11);

  return v9;
}

void sub_1000CD310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000CD38C;
  block[3] = &unk_100285B10;
  uint64_t v5 = *(void *)(a1 + 40);
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = a2;
  uint64_t v9 = a3;
  dispatch_sync(*(dispatch_queue_t *)(v5 + 112), block);
}

uint64_t sub_1000CD38C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[4] + 16LL))(a1[4], a1[5], a1[6]);
}

void *sub_1000CD3A0(uint64_t a1, const void *a2, __CFArray *a3)
{
  Boolean Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), a2);
  if (Value) {
    return sub_1000CE668(a1, a2, Value, a3);
  }
  uint64_t v8 = sub_10001267C("SecError");
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 56);
    *(_DWORD *)__int128 buf = 138412802;
    id v12 = a2;
    __int16 v13 = 2112;
    uint64_t v14 = v10;
    __int16 v15 = 2112;
    uint64_t v16 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "peer: %@ not found, peerMap: %@, engine: %@",  buf,  0x20u);
  }

  SOSErrorCreate(1032LL, a3, 0LL, @"peer: %@ not found");
  return 0LL;
}

CFTypeRef sub_1000CD4D8(const __CFData *a1, CFTypeRef *a2)
{
  if (!-[OTSOSActualAdapter sosEnabled]_0((uint64_t)a1, (uint64_t)a2))
  {
    SOSCCSetSOSDisabledError(a2);
    return 0LL;
  }

  CFTypeRef cf = 0LL;
  if (a1)
  {
    BytePtr = CFDataGetBytePtr(a1);
    CFIndex Length = CFDataGetLength(a1);
    uint64_t v6 = &BytePtr[Length];
    unint64_t v7 = sub_1000126F8( kCFAllocatorDefault,  (CFMutableDictionaryRef *)&cf,  a2,  (uint64_t)BytePtr,  (uint64_t)&BytePtr[Length]);
    if (v7) {
      BOOL v8 = v7 == (void)v6;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      char v10 = SOSErrorCreate(1029LL, a2, 0LL, @"trailing %td bytes at end of state");
      if ((v10 & 1) != 0) {
        return cf;
      }
      goto LABEL_12;
    }

    if (!v7)
    {
LABEL_12:
      CFTypeRef v11 = cf;
      if (cf)
      {
        CFTypeRef cf = 0LL;
        CFRelease(v11);
      }
    }
  }

  return cf;
}

void sub_1000CD5AC(uint64_t a1, const __CFString *cf)
{
  if (cf)
  {
    CFTypeID v4 = CFGetTypeID(cf);
    if (v4 == CFStringGetTypeID())
    {
      if (CFStringHasSuffix(cf, @"-tomb"))
      {
        uint64_t v5 = sub_10001267C("coder");
        uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          *(void *)&uint8_t buf[4] = cf;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Skipping coder check for peer: %@",  buf,  0xCu);
        }

        return;
      }
    }
  }

  Boolean Value = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), cf);
  if (!Value)
  {
    id v23 = sub_10001267C("coder");
    int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = *(const __CFString **)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412546;
      *(void *)&uint8_t buf[4] = cf;
      __int16 v47 = 2112;
      unsigned int v48 = v25;
      id v26 = "didn't find coder for peer: %@ engine dictionary: %@";
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v26, buf, 0x16u);
    }

uint64_t sub_1000CDB84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

uint64_t sub_1000CDB9C(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  if (!*(void *)(a1 + 16)) {
    return 1LL;
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  unint64_t v7 = Mutable;
  BOOL v8 = *(const void **)(a1 + 24);
  if (v8) {
    CFDictionarySetValue(Mutable, @"id", v8);
  }
  CFTypeID v9 = *(const void **)(a1 + 80);
  if (v9) {
    CFDictionarySetValue(v7, @"peerIDs", v9);
  }
  uint64_t v10 = *(const void **)(a1 + 88);
  if (v10) {
    CFDictionarySetValue(v7, @"traceDate", v10);
  }
  *(void *)uint64_t valuePtr = 2LL;
  CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, valuePtr);
  CFDictionarySetValue(v7, @"engine-stateVersion", v11);
  if (v11) {
    CFRelease(v11);
  }
  if (v7)
  {
    unsigned int v12 = sub_1000CE0A4( a1,  a2,  (uint64_t)@"engine-state-v2",  kSecAttrAccessibleAlwaysPrivate,  (const __CFString *)v7,  a3);
    CFRelease(v7);
  }

  else
  {
    unsigned int v12 = 0;
  }

  uint64_t v14 = (const __CFString *)CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  uint64_t v15 = *(const __CFDictionary **)(a1 + 56);
  *(void *)uint64_t valuePtr = _NSConcreteStackBlock;
  *(void *)&valuePtr[8] = 3221225472LL;
  *(void *)&valuePtr[16] = sub_1000CE124;
  unsigned int v42 = &unk_100293110;
  uint64_t v43 = (uint64_t)v14;
  CFDictionaryApplyFunction(v15, (CFDictionaryApplierFunction)sub_1000CDB84, valuePtr);
  if (v14)
  {
    unsigned int v16 = sub_1000CE0A4( a1,  a2,  (uint64_t)@"engine-peer-states",  kSecAttrAccessibleAlwaysPrivate,  v14,  a3);
    CFRelease(v14);
  }

  else
  {
    unsigned int v16 = 0;
  }

  uint64_t v17 = (const __CFString *)CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  *(void *)uint64_t valuePtr = _NSConcreteStackBlock;
  *(void *)&valuePtr[8] = 3221225472LL;
  *(void *)&valuePtr[16] = sub_1000CE25C;
  unsigned int v42 = &unk_100285988;
  uint64_t v43 = (uint64_t)v17;
  sub_1000CE2B4(a1, valuePtr);
  if (v17)
  {
    unsigned int v18 = sub_1000CE0A4( a1,  a2,  (uint64_t)@"engine-manifest-cache",  kSecAttrAccessibleAlwaysPrivate,  v17,  a3);
    CFRelease(v17);
  }

  else
  {
    unsigned int v18 = 0;
  }

  if (*(_BYTE *)(a1 + 105))
  {
    CFTypeRef cf = 0LL;
    uint64_t v19 = (const __CFString *)CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    uint64_t v20 = *(const __CFDictionary **)(a1 + 56);
    *(void *)uint64_t valuePtr = _NSConcreteStackBlock;
    *(void *)&valuePtr[8] = 3221225472LL;
    *(void *)&valuePtr[16] = sub_1000CE334;
    unsigned int v42 = &unk_1002863B0;
    uint64_t v43 = a1;
    unint64_t v44 = v19;
    CFDictionaryApplyFunction(v20, (CFDictionaryApplierFunction)sub_1000CDB84, valuePtr);
    int v24 = sub_100019F48(v19, &cf, v21, v22, v23);
    if (v19) {
      CFRelease(v19);
    }
    if (v24 && (*(unsigned int (**)(void))(*(void *)(a1 + 16) + 96LL))())
    {
      *(_BYTE *)(a1 + 105) = 0;
      uint64_t v25 = sub_10001267C("coder");
      id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v39 = *(void *)(a1 + 96);
        *(_DWORD *)uint64_t valuePtr = 138412290;
        *(void *)&valuePtr[4] = v39;
        _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "saved coders: %@", valuePtr, 0xCu);
      }

      int v27 = 1;
    }

    else
    {
      if (a3)
      {
        CFTypeRef v28 = cf;
        CFTypeRef cf = 0LL;
        if (*a3) {
          CFRelease(*a3);
        }
        *a3 = v28;
      }

      __int128 v29 = sub_10001267C("coder");
      __int128 v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v31 = *(void *)(a1 + 96);
        *(_DWORD *)uint64_t valuePtr = 138412546;
        *(void *)&valuePtr[4] = v31;
        *(_WORD *)&valuePtr[12] = 2112;
        *(void *)&valuePtr[14] = cf;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "failed to save coders: %@ (%@)",  valuePtr,  0x16u);
      }

      int v27 = 0;
      int v32 = 0;
      if (!v24) {
        goto LABEL_36;
      }
    }

    CFRelease(v24);
    int v32 = v27;
LABEL_36:
    if (cf) {
      CFRelease(cf);
    }
    goto LABEL_39;
  }

  int v32 = 1;
LABEL_39:
  id v33 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFDataRef v36 = (const __CFString *)v33;
  uint64_t v37 = *(const void **)(a1 + 24);
  if (v37) {
    CFDictionarySetValue(v33, @"id", v37);
  }
  CFIndex v38 = sub_100019F48(v36, 0LL, (uint64_t)v37, v34, v35);
  if (v36) {
    CFRelease(v36);
  }
  if (v38)
  {
    (*(void (**)(void))(*(void *)(a1 + 16) + 96LL))();
    CFRelease(v38);
  }

  return v12 & v16 & v18 & v32;
}

__CFData *sub_1000CE0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFString *a5, CFTypeRef *a6)
{
  CFMutableDictionaryRef result = sub_100019F48(a5, a6, a3, a4, (uint64_t)a5);
  if (result)
  {
    BOOL v8 = result;
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 96LL))();
    CFRelease(v8);
    return (__CFData *)v9;
  }

  return result;
}

void sub_1000CE124(uint64_t a1, const void *a2, __CFDictionary *cf)
{
  if (!cf) {
    return;
  }
  id v3 = cf;
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 != sub_1001AE23C())
  {
    CFRetain(v3);
    goto LABEL_9;
  }

  id v3 = sub_1001AF160((uint64_t)v3);
  if (v3)
  {
LABEL_9:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, v3);
    CFRelease(v3);
    return;
  }

  unint64_t v7 = sub_10001267C("engine");
  BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412546;
    uint64_t v10 = a2;
    __int16 v11 = 2112;
    uint64_t v12 = 0LL;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%@ failed to encode peer: %@",  (uint8_t *)&v9,  0x16u);
  }
}

void sub_1000CE25C(uint64_t a1, uint64_t a2)
{
  id v3 = *(__CFDictionary **)(a1 + 32);
  sub_1001B0090(v3, *(__CFData **)(a2 + 56));
  sub_1001B0090(v3, *(__CFData **)(a2 + 64));
  sub_1001B0090(v3, *(__CFData **)(a2 + 72));
  sub_1001B00DC(v3, *(CFTypeRef *)(a2 + 88));
  sub_1001B00DC(v3, *(CFTypeRef *)(a2 + 80));
}

void sub_1000CE2B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = a1;
  id v6 = objc_retainBlock(v3);
  Copy = CFDictionaryCreateCopy(0LL, *(CFDictionaryRef *)(a1 + 56));
  CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)sub_1000CE610, &v5);
  CFRelease(Copy);
}

void sub_1000CE320( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_1000CE334(uint64_t a1, const void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  Boolean Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v4 + 96), a2);
  if (!Value) {
    return;
  }
  uint64_t v6 = (uint64_t)Value;
  CFTypeID v7 = CFGetTypeID(Value);
  if (v7 != sub_1001A96C8()) {
    return;
  }
  id v33 = 0LL;
  BOOL v8 = sub_1001A99D8(v6, (uint64_t)&v33);
  if (v8)
  {
    int v9 = v8;
    CFIndex Length = CFDataGetLength(v8);
    uint64_t v11 = ccder_sizeof_raw_octet_string(Length);
    uint64_t v12 = ccder_sizeof(1LL, 1LL);
    __int16 v13 = *(const __CFData **)(v6 + 40);
    if (v13)
    {
      CFIndex v14 = CFDataGetLength(v13);
      __int16 v13 = (const __CFData *)ccder_sizeof_raw_octet_string(v14);
    }

    if (v11) {
      BOOL v15 = v12 == 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (v15)
    {
LABEL_11:
      CFRelease(v9);
      goto LABEL_19;
    }

    CFIndex v16 = ccder_sizeof(0x2000000000000010LL, (char *)v13 + v12 + v11);
    CFRelease(v9);
    if (v16)
    {
      CFMutableArrayRef Mutable = CFDataCreateMutable(0LL, v16);
      if (Mutable)
      {
        int v9 = Mutable;
        CFDataSetLength(Mutable, v16);
        MutableBytePtr = CFDataGetMutableBytePtr(v9);
        CFMutableDataRef v19 = sub_1001A99D8(v6, (uint64_t)&v33);
        if (v19)
        {
          uint64_t v20 = v19;
          uint64_t v21 = (uint64_t)&MutableBytePtr[v16];
          uint8_t v22 = *(_BYTE *)(v6 + 32);
          uint64_t v23 = *(const __CFData **)(v6 + 40);
          uint64_t v24 = v21;
          if (v23) {
            uint64_t v24 = sub_10001A7CC(v23, (CFTypeRef *)&v33, (uint64_t)MutableBytePtr, v21);
          }
          buf[0] = v22;
          uint64_t v25 = ccder_encode_body(1LL, buf, MutableBytePtr, v24);
          uint64_t v26 = ccder_encode_tl(1LL, 1LL, MutableBytePtr, v25);
          uint64_t v27 = sub_10001A7CC(v20, (CFTypeRef *)&v33, (uint64_t)MutableBytePtr, v26);
          uint64_t v28 = ccder_encode_constructed_tl(0x2000000000000010LL, v21, MutableBytePtr, v27);
          CFRelease(v20);
          if (v28)
          {
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a2, v9);
LABEL_24:
            CFRelease(v9);
            return;
          }
        }

        goto LABEL_11;
      }
    }
  }

void sub_1000CE610(const void *a1, CFTypeRef cf, uint64_t *a3)
{
  uint64_t v4 = sub_1000CE668(*a3, a1, cf, 0LL);
  if (v4)
  {
    uint64_t v5 = v4;
    (*(void (**)(void))(a3[1] + 16))();
    CFRelease(v5);
  }

void *sub_1000CE668(uint64_t a1, const void *a2, CFTypeRef cf, __CFArray *a4)
{
  if (cf)
  {
    CFTypeID v8 = CFGetTypeID(cf);
    if (v8 == sub_1001AE23C()) {
      return CFRetain(cf);
    }
  }

  uint64_t v10 = *(const __CFArray **)(a1 + 80);
  if (v10
    && (v22.CFIndex length = CFArrayGetCount(*(CFArrayRef *)(a1 + 80)), v22.location = 0LL, CFArrayContainsValue(v10, v22, a2)))
  {
    CFTypeRef cfa = 0LL;
    uint64_t v11 = sub_1001AFC78(a1, a2, (const __CFDictionary *)cf, (__CFArray *)&cfa);
    if (v11) {
      goto LABEL_12;
    }
    uint64_t v12 = sub_10001267C("SecError");
    __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v17 = a2;
      __int16 v18 = 2112;
      CFTypeRef v19 = cfa;
      __int16 v20 = 2112;
      CFTypeRef v21 = cf;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "error inflating peer: %@: %@ from state: %@",  buf,  0x20u);
    }

    CFTypeRef v14 = cfa;
    if (cfa)
    {
      CFTypeRef cfa = 0LL;
      CFRelease(v14);
    }

    uint64_t v11 = sub_1001AFC78(a1, a2, 0LL, a4);
    if (v11) {
LABEL_12:
    }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), a2, v11);
  }

  else
  {
    SOSErrorCreate(1032LL, a4, 0LL, @"peer: %@ is untrusted inflating not allowed");
    return 0LL;
  }

  return v11;
}

void sub_1000CE840(id a1)
{
  CFTypeRef cf = 0LL;
  if (!sub_1001CD600(&cf))
  {
    uint64_t v1 = sub_10001267C("coder");
    unsigned int v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      CFTypeRef v6 = cf;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "SOSCCProcessEnsurePeerRegistration failed with: %@",  buf,  0xCu);
    }
  }

  CFTypeRef v3 = cf;
  if (cf)
  {
    CFTypeRef cf = 0LL;
    CFRelease(v3);
  }

uint64_t sub_1000CE908(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0LL;
  uint64_t v5 = (const __CFData *)(*(uint64_t (**)(void))(*(void *)(a1 + 16) + 40LL))();
  CFTypeRef v6 = v5;
  if (v5)
  {
    CFTypeID v7 = (const __CFDictionary *)sub_1000CD4D8(v5, &cf);
    CFTypeID v8 = (const __CFData *)(*(uint64_t (**)(void))(*(void *)(a1 + 16) + 40LL))();
    CFTypeRef v9 = sub_1000CD4D8(v8, &cf);
    if (v8) {
      CFRelease(v8);
    }
    uint64_t v10 = (const __CFData *)(*(uint64_t (**)(void))(*(void *)(a1 + 16) + 40LL))();
    CFTypeRef v11 = sub_1000CD4D8(v10, &cf);
    if (v10) {
      CFRelease(v10);
    }
  }

  else
  {
    uint64_t v12 = (const __CFData *)(*(uint64_t (**)(void))(*(void *)(a1 + 16) + 40LL))();
    if (v12)
    {
      __int16 v13 = v12;
      CFTypeRef v14 = (const __CFDictionary *)sub_1000CD4D8(v12, &cf);
      CFTypeID v7 = v14;
      if (v14)
      {
        Boolean Value = CFDictionaryGetValue(v14, @"manifestCache");
        CFTypeRef v9 = Value;
        if (Value)
        {
          CFTypeID v16 = CFGetTypeID(Value);
          if (v16 == CFDictionaryGetTypeID()) {
            CFRetain(v9);
          }
          else {
            CFTypeRef v9 = 0LL;
          }
        }

        uint64_t v17 = CFDictionaryGetValue(v7, @"peerState");
        CFTypeRef v11 = v17;
        if (v17)
        {
          CFTypeID v18 = CFGetTypeID(v17);
          if (v18 == CFDictionaryGetTypeID()) {
            CFRetain(v11);
          }
          else {
            CFTypeRef v11 = 0LL;
          }
        }
      }

      else
      {
        CFTypeRef v11 = 0LL;
        CFTypeRef v9 = 0LL;
      }

      CFRelease(v13);
    }

    else
    {
      CFTypeRef v11 = 0LL;
      CFTypeRef v9 = 0LL;
      CFTypeID v7 = 0LL;
    }

    CFTypeRef v19 = sub_10001267C("coder");
    __int16 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Migrating from v0 engine state; dropping coders and forcing re-negotiation",
        (uint8_t *)&buf,
        2u);
    }

    _os_activity_initiate( (void *)&_mh_execute_header,  "CloudCircle EnsurePeerRegistration",  OS_ACTIVITY_FLAG_DEFAULT,  &stru_1002935E8);
    uint64_t v21 = *(void *)(a1 + 80);
    if (v21)
    {
      *(void *)&__int128 buf = _NSConcreteStackBlock;
      *((void *)&buf + 1) = 3221225472LL;
      uint64_t v46 = sub_1001C3D44;
      __int16 v47 = &unk_1002935A8;
      uint64_t v48 = v21;
      _os_activity_initiate( (void *)&_mh_execute_header,  "CloudCircle RequestSyncWithPeersList",  OS_ACTIVITY_FLAG_DEFAULT,  &buf);
    }
  }

  if (v7)
  {
    CFRange v22 = CFDictionaryGetValue(v7, @"id");
    if (v22 && (v23 = v22, CFTypeID v24 = CFGetTypeID(v22), v24 == CFStringGetTypeID()))
    {
      if (*(const void **)(a1 + 24) != v23)
      {
        CFRetain(v23);
        uint64_t v25 = *(const void **)(a1 + 24);
        if (!v25) {
          goto LABEL_32;
        }
        goto LABEL_31;
      }
    }

    else
    {
      uint64_t v25 = *(const void **)(a1 + 24);
      if (v25)
      {
        uint64_t v23 = 0LL;
LABEL_31:
        CFRelease(v25);
LABEL_32:
        *(void *)(a1 + 24) = v23;
      }
    }

    uint64_t v26 = CFDictionaryGetValue(v7, @"peerIDs");
    if (v26 && (uint64_t v27 = v26, v28 = CFGetTypeID(v26), v28 == CFArrayGetTypeID()))
    {
      if (*(const void **)(a1 + 80) != v27)
      {
        CFRetain(v27);
        __int128 v29 = *(const void **)(a1 + 80);
        if (!v29) {
          goto LABEL_41;
        }
        goto LABEL_40;
      }
    }

    else
    {
      __int128 v29 = *(const void **)(a1 + 80);
      if (v29)
      {
        uint64_t v27 = 0LL;
LABEL_40:
        CFRelease(v29);
LABEL_41:
        *(void *)(a1 + 8syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v27;
      }
    }

    __int128 v30 = CFDictionaryGetValue(v7, @"traceDate");
    if (v30 && (uint64_t v31 = v30, v32 = CFGetTypeID(v30), v32 == CFDateGetTypeID()))
    {
      if (*(const void **)(a1 + 88) != v31)
      {
        CFRetain(v31);
        id v33 = *(const void **)(a1 + 88);
        if (!v33) {
          goto LABEL_50;
        }
        goto LABEL_49;
      }
    }

    else
    {
      id v33 = *(const void **)(a1 + 88);
      if (v33)
      {
        uint64_t v31 = 0LL;
LABEL_49:
        CFRelease(v33);
LABEL_50:
        *(void *)(a1 + 8_Block_object_dispose(va, 8) = v31;
      }
    }

    uint64_t v34 = sub_10001267C("engine");
    uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = a1;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&buf, 0xCu);
    }
  }

  __int16 v36 = *(const void **)(a1 + 48);
  if (v36)
  {
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
    CFRelease(v36);
  }

  if (v9)
  {
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    *(void *)&__int128 buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472LL;
    uint64_t v46 = sub_1000CEF14;
    __int16 v47 = &unk_100293110;
    uint64_t v48 = a1;
    CFDictionaryApplyFunction((CFDictionaryRef)v9, (CFDictionaryApplierFunction)sub_1000CDB84, &buf);
  }

  if (v11)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
    CFIndex v38 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
    CFTypeID v39 = CFGetTypeID(v11);
    if (v39 == CFDictionaryGetTypeID())
    {
      *(void *)&__int128 buf = _NSConcreteStackBlock;
      *((void *)&buf + 1) = 3221225472LL;
      uint64_t v46 = sub_1000CEF98;
      __int16 v47 = &unk_100293110;
      uint64_t v48 = a1;
      CFDictionaryApplyFunction((CFDictionaryRef)v11, (CFDictionaryApplierFunction)sub_1000CDB84, &buf);
    }

    sub_1000CF17C(a1, (uint64_t)v38, (uint64_t)Mutable);
    sub_1000CF278(a1, *(CFTypeRef *)(a1 + 24), v38, Mutable);
    if (v38) {
      CFRelease(v38);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
  }

  if (v11) {
    BOOL v40 = v7 == 0LL;
  }
  else {
    BOOL v40 = 1;
  }
  uint64_t v41 = !v40;
  if (v6) {
    CFRelease(v6);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v11 && (CFRelease(v11), (_DWORD)v41))
  {
    CFTypeRef v42 = cf;
  }

  else
  {
    CFTypeRef v42 = cf;
    if (a3)
    {
      *a3 = cf;
      return v41;
    }
  }

  if (v42)
  {
    CFTypeRef cf = 0LL;
    CFRelease(v42);
  }

  return v41;
}

void sub_1000CEF14(uint64_t a1, const void *a2, CFTypeRef cf)
{
  if (cf)
  {
    CFTypeID v6 = CFGetTypeID(cf);
    if (v6 == CFDataGetTypeID())
    {
      CFTypeID v7 = (const void *)sub_1001AAD88((const __CFData *)cf, 0LL);
      if (v7)
      {
        CFTypeID v8 = v7;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 32) + 48LL), a2, v7);
        CFRelease(v8);
      }
    }
  }

void sub_1000CEF98(uint64_t a1, const void *a2, const __CFData *a3)
{
  Boolean Value = CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 32) + 56LL), a2);
  if (Value && (v7 = (uint64_t)Value, CFTypeID v8 = CFGetTypeID(Value), v8 == sub_1001AE23C()))
  {
    CFTypeRef cf = 0LL;
    if (!sub_1001AF984(v7, *(void *)(a1 + 32), a3, (__CFArray *)&cf))
    {
      CFIndex Length = CFDataGetLength(a3);
      CFMutableArrayRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 2 * Length);
      BytePtr = CFDataGetBytePtr(a3);
      CFIndex v12 = CFDataGetLength(a3);
      if (v12 >= 1)
      {
        CFIndex v13 = v12;
        do
        {
          unsigned int v14 = *BytePtr++;
          CFStringAppendFormat(Mutable, 0LL, @"%02X", v14);
          --v13;
        }

        while (v13);
      }

      BOOL v15 = sub_10001267C("SecError");
      CFTypeID v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412802;
        __int16 v20 = a2;
        __int16 v21 = 2112;
        CFTypeRef v22 = cf;
        __int16 v23 = 2112;
        CFTypeID v24 = Mutable;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "peer: %@: bad state: %@ in engine state: %@",  buf,  0x20u);
      }

      if (Mutable) {
        CFRelease(Mutable);
      }
      CFTypeRef v17 = cf;
      if (cf)
      {
        CFTypeRef cf = 0LL;
        CFRelease(v17);
      }
    }
  }

  else
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 32) + 56LL), a2, a3);
  }

void sub_1000CF17C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeID v6 = *(const __CFArray **)(a1 + 80);
  if (v6)
  {
    unint64_t Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 80));
    if (Count >> 61)
    {
      CFTypeID v6 = 0LL;
    }

    else
    {
      CFIndex v8 = Count;
      CFTypeRef v9 = (const void **)malloc(8 * Count);
      v13.id location = 0LL;
      v13.CFIndex length = v8;
      CFArrayGetValues(v6, v13, v9);
      uint64_t v10 = CFGetAllocator(v6);
      CFTypeID v6 = CFSetCreate(v10, v9, v8, &kCFTypeSetCallBacks);
      free(v9);
    }
  }

  CFTypeRef v11 = *(const __CFDictionary **)(a1 + 56);
  context[0] = _NSConcreteStackBlock;
  context[1] = 3221225472LL;
  context[2] = sub_1000D07B4;
  context[3] = &unk_1002859A8;
  context[4] = v6;
  void context[5] = a2;
  context[6] = a3;
  CFDictionaryApplyFunction(v11, (CFDictionaryApplierFunction)sub_1000CDB84, context);
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1000CF278(uint64_t a1, CFTypeRef a2, const __CFArray *a3, const __CFArray *a4)
{
  __int16 v21 = 0LL;
  CFTypeRef v22 = 0LL;
  uint64_t v20 = 0LL;
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(kCFAllocatorDefault, 0LL, @"me");
  if (a2) {
    a2 = sub_1001ADF60(a2, &v21, &v20, &v22);
  }
  if (MutableCopy)
  {
    *(void *)&__int128 buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472LL;
    CFTypeID v24 = sub_1000CF520;
    uint64_t v25 = &unk_100292250;
    uint64_t v26 = MutableCopy;
    CFTypeRef v27 = a2;
    sub_1000130AC(v21, (uint64_t)&buf);
  }

  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (*(_BYTE *)(a1 + 104))
  {
    CFTypeRef v10 = *(CFTypeRef *)(a1 + 24);
    if (a2 && v10)
    {
      if (!CFEqual(a2, v10)) {
        goto LABEL_16;
      }
    }

    else if (a2 != v10)
    {
LABEL_16:
      *(_BYTE *)(a1 + 105) = 1;
      goto LABEL_17;
    }

    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    int v19[2] = sub_1000CF554;
    v19[3] = &unk_100292FB0;
    void v19[4] = a1;
    v19[5] = Mutable;
    CFTypeRef v11 = objc_retainBlock(v19);
    CFIndex v12 = v11;
    if (a3)
    {
      CFRange v13 = v11;
      v28.CFIndex length = CFArrayGetCount(a3);
      v28.id location = 0LL;
      CFArrayApplyFunction(a3, v28, (CFArrayApplierFunction)sub_1000CF5B8, v13);
    }

    if (a4)
    {
      id v14 = v12;
      v29.CFIndex length = CFArrayGetCount(a4);
      v29.id location = 0LL;
      CFArrayApplyFunction(a4, v29, (CFArrayApplierFunction)sub_1000CF5B8, v14);
    }

    goto LABEL_16;
  }

void sub_1000CF520(uint64_t a1, uint64_t a2)
{
}

void sub_1000CF554(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3 = sub_1001ADF60(cf, 0LL, 0LL, 0LL);
  if (v3)
  {
    uint64_t v4 = v3;
    Boolean Value = CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 32) + 96LL), v3);
    if (Value) {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v4, Value);
    }
  }

uint64_t sub_1000CF5B8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void sub_1000CF5CC(uint64_t a1, const __CFArray *a2, const __CFArray *a3, __CFString *a4)
{
  theArray = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  theDict = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (*(void *)(a1 + 24))
  {
    uint64_t v7 = (const void *)kSOSViewKeychainV0_tomb;
    Boolean Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), kSOSViewKeychainV0_tomb);
    if (Value && (CFTypeID v16 = Value, v17 = CFGetTypeID(Value), v17 == sub_1001AE23C()))
    {
      CFTypeID v18 = (const void *)*((void *)v16 + 14);
      if (v18) {
        CFRetain(*((CFTypeRef *)v16 + 14));
      }
    }

    else
    {
      CFTypeRef cf = 0LL;
      CFTypeRef v19 = sub_1000CFD80( kCFAllocatorDefault,  v9,  v10,  v11,  v12,  v13,  v14,  v15,  (void *)kSecAttrAccessGroup,  (uint64_t)@"com.apple.sbd");
      CFTypeID v18 = (const void *)(*(uint64_t (**)(void))(*(void *)(a1 + 16) + 48LL))();
      if (v19) {
        CFRelease(v19);
      }
      if (!v18)
      {
        uint64_t v20 = sub_10001267C("engine");
        __int16 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = cf;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "No keybag found for v0 backup peer: %@",  (uint8_t *)&buf,  0xCu);
        }
      }
    }

    V0BackupViewSet = (void *)SOSViewsGetV0BackupViewSet();
    sub_1000CFE00(a1, v7, V0BackupViewSet, v18, Mutable, theDict);
    if (v18) {
      CFRelease(v18);
    }
    __int16 v23 = *(const __CFDictionary **)(a1 + 64);
    V0BackupBagViewSet = (void *)SOSViewsGetV0BackupBagViewSet();
    uint64_t v25 = sub_1000CFF48(v23, Mutable, V0BackupBagViewSet);
    CFArrayAppendValue(v25[3], &stru_100285A08);
  }

  if (a2 && CFArrayGetCount(a2))
  {
    if (a4) {
      CFStringAppend(a4, @" trusted");
    }
    CFIndex Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      for (CFIndex i = 0LL; i != Count; ++i)
      {
        unint64_t ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
        CFSetRef v65 = 0LL;
        CFTypeRef cf = 0LL;
        CFRange v29 = (void *)sub_1001ADF60(ValueAtIndex, &cf, &v65, 0LL);
        CFArrayAppendValue(theArray, v29);
        if (a4)
        {
          *(void *)&__int128 buf = _NSConcreteStackBlock;
          *((void *)&buf + 1) = 3221225472LL;
          __int128 v71 = sub_1000CF520;
          __int128 v72 = &unk_100292250;
          p_isa = (CFTypeRef *)&a4->isa;
          CFTypeRef v74 = v29;
          sub_1000130AC((const __CFSet *)cf, (uint64_t)&buf);
        }

        V0ViewSet = (void *)cf;
        if (!cf)
        {
          V0ViewSet = (void *)SOSViewsGetV0ViewSet();
          CFTypeRef cf = V0ViewSet;
        }

        if (v65)
        {
          sub_1000CFE00(a1, v29, V0ViewSet, v65, Mutable, theDict);
        }

        else
        {
          uint64_t v31 = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), v29);
          CFDictionaryRef v37 = sub_1001AE104(v31, V0ViewSet, 0LL, v32, v33, v34, v35, v36);
          if (v37)
          {
            CFIndex v38 = sub_1000CFF48(*(const __CFDictionary **)(a1 + 64), Mutable, V0ViewSet);
            CFTypeID v39 = CFGetTypeID(v37);
            if (v39 == CFDictionaryGetTypeID())
            {
              *(void *)&__int128 buf = _NSConcreteStackBlock;
              BOOL v40 = sub_1000D00E0;
              uint64_t v41 = (CFTypeRef *)v29;
            }

            else
            {
              *(void *)&__int128 buf = _NSConcreteStackBlock;
              BOOL v40 = sub_1000D00B4;
              uint64_t v41 = (CFTypeRef *)v37;
            }

            *((void *)&buf + 1) = 3221225472LL;
            __int128 v71 = v40;
            __int128 v72 = &unk_100285A28;
            p_isa = v41;
            CFTypeRef v42 = objc_retainBlock(&buf);
            uint64_t v43 = objc_retainBlock(v42);
            CFArrayAppendValue(v38[4], v43);
            CFDictionarySetValue(theDict, v29, v37);
            CFRelease(v37);
          }
        }
      }
    }
  }

  if (a3 && CFArrayGetCount(a3))
  {
    if (a4) {
      CFStringAppend(a4, @" untrusted");
    }
    CFIndex v44 = CFArrayGetCount(a3);
    if (v44 >= 1)
    {
      for (CFIndex j = 0LL; j != v44; ++j)
      {
        uint64_t v46 = CFArrayGetValueAtIndex(a3, j);
        CFSetRef v65 = 0LL;
        CFTypeRef v47 = sub_1001ADF60(v46, &v65, 0LL, 0LL);
        if (a4)
        {
          *(void *)&__int128 buf = _NSConcreteStackBlock;
          *((void *)&buf + 1) = 3221225472LL;
          __int128 v71 = sub_1000CF520;
          __int128 v72 = &unk_100292250;
          p_isa = (CFTypeRef *)&a4->isa;
          CFTypeRef v74 = v47;
          sub_1000130AC(v65, (uint64_t)&buf);
        }

        if (v65)
        {
          CFSetRef v48 = 0LL;
        }

        else
        {
          CFSetRef v48 = CFSetCreate(kCFAllocatorDefault, 0LL, 0LL, &kCFTypeSetCallBacks);
          CFSetRef v65 = v48;
        }

        CFMutableStringRef MutableCopy = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), v47);
        id v50 = v65;
        if (!v65) {
          sub_10001BB24(@"Execution has encountered an unexpected state", 0x53C0000Eu);
        }
        if (MutableCopy)
        {
          CFTypeID v51 = CFGetTypeID(MutableCopy);
          if (v51 == sub_1001AE23C())
          {
            sub_1001AE2B8((uint64_t)MutableCopy, v50);
            CFMutableStringRef MutableCopy = sub_1001AF160((uint64_t)MutableCopy);
          }

          else
          {
            CFTypeID v52 = CFGetTypeID(MutableCopy);
            if (v52 == CFDictionaryGetTypeID())
            {
              id v53 = CFDictionaryGetValue((CFDictionaryRef)MutableCopy, @"views");
              CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, (CFDictionaryRef)MutableCopy);
              CFDictionarySetValue((CFMutableDictionaryRef)MutableCopy, @"views", v50);
              if (v53)
              {
                CFTypeRef cf = 0LL;
                p_CFTypeRef cf = &cf;
                uint64_t v68 = 0x2020000000LL;
                char v69 = 1;
                *(void *)&__int128 buf = _NSConcreteStackBlock;
                *((void *)&buf + 1) = 3221225472LL;
                __int128 v71 = sub_1001AED6C;
                __int128 v72 = &unk_100292A88;
                p_isa = &cf;
                CFTypeRef v74 = v53;
                CFSetApplyFunction(v50, (CFSetApplierFunction)sub_1001AEDA0, &buf);
                int v54 = *((unsigned __int8 *)p_cf + 24);
                _Block_object_dispose(&cf, 8);
                if (!v54) {
                  CFDictionarySetValue((CFMutableDictionaryRef)MutableCopy, @"has-been-in-sync", kCFBooleanFalse);
                }
              }
            }

            else
            {
              CFMutableStringRef MutableCopy = 0LL;
            }
          }
        }

        if (v48) {
          CFRelease(v48);
        }
        if (MutableCopy)
        {
          CFDictionarySetValue(theDict, v47, MutableCopy);
          CFRelease(MutableCopy);
        }
      }
    }
  }

  id v55 = *(const void **)(a1 + 80);
  if (v55) {
    CFRelease(v55);
  }
  *(void *)(a1 + 8syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = theArray;
  id v56 = *(const void **)(a1 + 56);
  if (v56) {
    CFRelease(v56);
  }
  *(void *)(a1 + 56) = theDict;
  unsigned int v57 = *(const void **)(a1 + 64);
  if (v57) {
    CFRelease(v57);
  }
  *(void *)(a1 + 64) = Mutable;
  CFMutableDictionaryRef v58 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  id v59 = *(const __CFDictionary **)(a1 + 64);
  *(void *)&__int128 buf = _NSConcreteStackBlock;
  *((void *)&buf + 1) = 3221225472LL;
  __int128 v71 = sub_1000D0214;
  __int128 v72 = &unk_100293110;
  p_isa = (CFTypeRef *)v58;
  CFDictionaryApplyFunction(v59, (CFDictionaryApplierFunction)sub_1000CDB84, &buf);
  id v60 = *(const void **)(a1 + 72);
  if (v60) {
    CFRelease(v60);
  }
  *(void *)(a1 + 72) = v58;
}

void sub_1000CFD60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

__CFDictionary *sub_1000CFD80( const __CFAllocator *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *key, uint64_t a10)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  int v14 = (const void **)&a10;
  int v11 = key;
  if (key)
  {
    do
    {
      CFDictionarySetValue(Mutable, v11, *v14);
      int v12 = v14 + 1;
      v14 += 2;
      int v11 = *v12;
    }

    while (*v12);
  }

  return Mutable;
}

void sub_1000CFE00( uint64_t a1, const void *a2, void *a3, const void *a4, const __CFDictionary *a5, __CFDictionary *a6)
{
  Boolean Value = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), a2);
  CFDictionaryRef v18 = sub_1001AE104(Value, a3, a4, v13, v14, v15, v16, v17);
  if (v18)
  {
    CFTypeRef v19 = v18;
    CFTypeID v20 = CFGetTypeID(v18);
    if (v20 == CFDictionaryGetTypeID())
    {
      __int16 v21 = sub_1001AFC78(a1, a2, v19, 0LL);
      CFRelease(v19);
      if (!Value) {
        sub_1001AE554((uint64_t)v21);
      }
    }

    else
    {
      __int16 v21 = v19;
    }

    CFDictionarySetValue(a6, a2, v21);
    CFRelease(v21);
    if (a4)
    {
      CFTypeRef v22 = sub_1000CFF48(*(const __CFDictionary **)(a1 + 64), a5, a3);
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472LL;
      v25[2] = sub_1000D05DC;
      v25[3] = &unk_1002859C8;
      void v25[4] = v21;
      __int16 v23 = objc_retainBlock(v25);
      id v24 = [v23 copy];
      CFArrayAppendValue(v22[3], v24);
    }
  }

CFMutableArrayRef *sub_1000CFF48(const __CFDictionary *a1, CFDictionaryRef theDict, void *key)
{
  Boolean Value = (CFMutableArrayRef *)CFDictionaryGetValue(theDict, key);
  if (!Value)
  {
    uint64_t v7 = (CFMutableArrayRef *)CFDictionaryGetValue(a1, key);
    if (v7)
    {
      Boolean Value = v7;
      CFArrayRemoveAllValues(v7[3]);
      CFArrayRemoveAllValues(Value[4]);
      CFIndex v8 = theDict;
      int v9 = key;
      int v10 = Value;
    }

    else
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 0x40000000LL;
      block[2] = sub_10009AD94;
      block[3] = &unk_100284BC8;
      void block[4] = &qword_1002DE980;
      if (qword_1002DE978 != -1) {
        dispatch_once(&qword_1002DE978, block);
      }
      Boolean Value = (CFMutableArrayRef *)_CFRuntimeCreateInstance(kCFAllocatorDefault, qword_1002DE980, 24LL, 0LL);
      if (Value)
      {
        Value[3] = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
        Value[4] = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
        CFDictionarySetValue(theDict, key, Value);
        CFRelease(Value);
        return Value;
      }

      CFIndex v8 = theDict;
      int v9 = key;
      int v10 = 0LL;
    }

    CFDictionarySetValue(v8, v9, v10);
  }

  return Value;
}

uint64_t sub_1000D00B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, CFDataRef *a8, CFTypeRef *a9)
{
  return 1LL;
}

BOOL sub_1000D00E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, CFDataRef *a8, CFTypeRef *a9)
{
  CFTypeID v20 = 0LL;
  int v13 = sub_1000CD3A0(a3, *(const void **)(a1 + 32), (__CFArray *)&v20);
  BOOL v14 = v13 != 0LL;
  if (v13)
  {
    int v15 = v13;
    sub_1001B015C(v13, a5, a7, a8, a9);
  }

  else
  {
    int v16 = sub_10001267C("SecError");
    int v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v22 = v18;
      __int16 v23 = 2112;
      id v24 = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%@: peer failed to inflate: %@", buf, 0x16u);
    }

    int v15 = v20;
    if (!v20) {
      return 0LL;
    }
  }

  CFRelease(v15);
  return v14;
}

void sub_1000D0214(uint64_t a1, CFSetRef theSet, uint64_t a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1000D0278;
  v3[3] = &unk_100292FB0;
  v3[4] = *(void *)(a1 + 32);
  void v3[5] = a3;
  CFSetApplyFunction(theSet, (CFSetApplierFunction)sub_1000CF5B8, v3);
}

void sub_1000D0278(uint64_t a1, const void *a2)
{
  xpc_object_t value = 0LL;
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value))
  {
    if (value)
    {
      CFTypeID v4 = CFGetTypeID(value);
      CFTypeID TypeID = CFSetGetTypeID();
      CFTypeID v6 = value;
      if (v4 == TypeID)
      {
        CFSetAddValue((CFMutableSetRef)value, *(const void **)(a1 + 40));
        return;
      }
    }

    else
    {
      CFTypeID v6 = 0LL;
    }

    if (!CFEqual(*(CFTypeRef *)(a1 + 40), v6))
    {
      CFMutableDictionaryRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
      CFSetAddValue(Mutable, value);
      CFSetAddValue(Mutable, *(const void **)(a1 + 40));
      CFDictionaryReplaceValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, Mutable);
      CFRelease(Mutable);
    }
  }

  else
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, *(const void **)(a1 + 40));
  }

BOOL sub_1000D035C( id a1, __OpaqueSOSChangeTracker *a2, __OpaqueSOSEngine *a3, __OpaqueSOSTransaction *a4, unint64_t a5, unint64_t a6, __CFArray *a7, __CFError **a8)
{
  CFIndex Count = CFArrayGetCount(a7);
  if (Count >= 1)
  {
    CFIndex v10 = Count;
    CFIndex v11 = 0LL;
    uint64_t v26 = (const void *)kSOSViewKeychainV0_tomb;
    do
    {
      unint64_t ValueAtIndex = CFArrayGetValueAtIndex(a7, v11);
      CFTypeID v13 = CFGetTypeID(ValueAtIndex);
      if (v13 == CFArrayGetTypeID())
      {
        if (CFArrayGetCount((CFArrayRef)ValueAtIndex) != 1) {
          sub_10001BB24(@"Execution has encountered an unexpected state", 0x53C0000Eu);
        }
        BOOL v14 = CFArrayGetValueAtIndex((CFArrayRef)ValueAtIndex, 0LL);
        unint64_t ValueAtIndex = 0LL;
        if (!v14)
        {
LABEL_10:
          int v16 = 0LL;
          goto LABEL_11;
        }
      }

      else
      {
        BOOL v14 = ValueAtIndex;
        if (!ValueAtIndex) {
          goto LABEL_10;
        }
      }

      CFTypeID v15 = CFGetTypeID(v14);
      if (v15 == CFDataGetTypeID()) {
        goto LABEL_29;
      }
      int v16 = v14;
LABEL_11:
      int v17 = sub_1000E7EC0(v16, kSecAttrService);
      if (v17 && CFEqual(v17, @"SecureBackupService"))
      {
        uint64_t v18 = (const __CFString *)sub_1000E7EC0(v14, kSecAttrAccessible);
        if (v18 && kSecAttrAccessibleWhenUnlocked)
        {
          if (CFEqual(v18, kSecAttrAccessibleWhenUnlocked)) {
            goto LABEL_18;
          }
        }

        else if (v18 == kSecAttrAccessibleWhenUnlocked)
        {
LABEL_18:
          CFTypeRef v19 = sub_1000E7EC0(v14, kSecAttrAccount);
          if (v19 && CFEqual(v19, @"SecureBackupPublicKeybag"))
          {
            CFTypeID v20 = sub_1000CD3A0((uint64_t)a3, v26, 0LL);
            if (ValueAtIndex) {
              __int16 v21 = sub_1000E705C(ValueAtIndex, (uint64_t)&off_100287568, 0LL);
            }
            else {
              __int16 v21 = 0LL;
            }
            uint64_t v22 = v20[14];
            sub_1001AE3AC((uint64_t)v20, v21);
            if (!v22) {
              sub_1001AE554((uint64_t)v20);
            }
            CFRelease(v20);
            CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
            id v24 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
            sub_1000CF17C((uint64_t)a3, (uint64_t)v24, (uint64_t)Mutable);
            sub_1000CF5CC((uint64_t)a3, v24, Mutable, 0LL);
            if (v24) {
              CFRelease(v24);
            }
            if (Mutable) {
              CFRelease(Mutable);
            }
          }
        }
      }

BOOL sub_1000D05DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, CFTypeRef *a8)
{
  uint64_t v11 = *(void *)(a1 + 32);
  if (-[OTSOSActualAdapter sosEnabled]_0(a1, a2)) {
    uint64_t v12 = *(void *)(a3 + 16);
  }
  else {
    uint64_t v12 = 0LL;
  }
  uint64_t v19 = 0LL;
  CFTypeID v20 = &v19;
  uint64_t v21 = 0x2020000000LL;
  char v22 = 1;
  if (*(_BYTE *)(v11 + 48) && (sub_1001AE92C(v11, a8) & 1) == 0)
  {
    *((_BYTE *)v20 + 24) = 0;
LABEL_12:
    uint64_t v24 = *(void *)(v11 + 16);
    int v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v24, 1LL));
    activity_block[0] = _NSConcreteStackBlock;
    activity_block[1] = 3221225472LL;
    activity_block[2] = sub_1001CE908;
    activity_block[3] = &unk_1002935A8;
    activity_void block[4] = v16;
    _os_activity_initiate( (void *)&_mh_execute_header,  "CloudCircle SOSCCRequestSyncWithBackupPeerList",  OS_ACTIVITY_FLAG_DEFAULT,  activity_block);

    BOOL v15 = *((_BYTE *)v20 + 24) != 0;
    goto LABEL_13;
  }

  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_1001B044C;
  v18[3] = &unk_100292A60;
  void v18[4] = &v19;
  v18[5] = a7;
  v18[6] = v12;
  v18[7] = v11;
  v18[8] = a8;
  BOOL v13 = sub_1001AF718(v11, a8, v18);
  if (*((_BYTE *)v20 + 24)) {
    BOOL v14 = v13;
  }
  else {
    BOOL v14 = 0;
  }
  *((_BYTE *)v20 + 24) = v14;
  if (!v14) {
    goto LABEL_12;
  }
  BOOL v15 = 1LL;
LABEL_13:
  _Block_object_dispose(&v19, 8);
  return v15;
}

void sub_1000D0790( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void sub_1000D07B4(const __CFSet **a1, const __CFDictionary *cf1, uint64_t *cf)
{
  if (cf)
  {
    CFTypeID v6 = CFGetTypeID(cf);
    if (v6 == sub_1001AE23C())
    {
      uint64_t v7 = cf[3];
      CFIndex v8 = (const void *)cf[14];
      int v9 = cf1;
LABEL_10:
      CFDictionaryRef v10 = sub_1001ADE20(v9, v7, (uint64_t)v8);
      goto LABEL_11;
    }
  }

  if (!cf1 || !kSOSViewKeychainV0_tomb)
  {
    if ((const __CFDictionary *)kSOSViewKeychainV0_tomb == cf1) {
      goto LABEL_7;
    }
LABEL_9:
    Boolean Value = CFDictionaryGetValue((CFDictionaryRef)cf, @"views");
    CFIndex v8 = CFDictionaryGetValue((CFDictionaryRef)cf, @"keybag");
    int v9 = cf1;
    uint64_t v7 = (uint64_t)Value;
    goto LABEL_10;
  }

  if (!CFEqual(cf1, kSOSViewKeychainV0_tomb)) {
    goto LABEL_9;
  }
LABEL_7:
  CFDictionaryRef v10 = 0LL;
LABEL_11:
  uint64_t v12 = a1[4];
  if (v12 && CFSetContainsValue(v12, cf1)) {
    goto LABEL_16;
  }
  if (!cf1 || !kSOSViewKeychainV0_tomb)
  {
    if ((const __CFDictionary *)kSOSViewKeychainV0_tomb == cf1) {
      goto LABEL_16;
    }
LABEL_19:
    CFArrayAppendValue(a1[6], cf1);
    if (!v10) {
      return;
    }
    goto LABEL_20;
  }

  if (!CFEqual(cf1, kSOSViewKeychainV0_tomb)) {
    goto LABEL_19;
  }
LABEL_16:
  if (!v10) {
    return;
  }
  CFArrayAppendValue(a1[5], v10);
LABEL_20:
  CFRelease(v10);
}

CFTypeRef sub_1000D08EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (-[OTSOSActualAdapter sosEnabled]_0(a1, a2)) {
    return sub_1000D0948(a1, *(const void **)(a2 + 24), a3);
  }
  SOSCCSetSOSDisabledError(a3);
  return 0LL;
}

CFTypeRef sub_1000D0948(uint64_t a1, const void *a2, uint64_t a3)
{
  Boolean Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
  if (Value)
  {
    CFTypeID v6 = Value;
    CFRetain(Value);
    uint64_t v7 = (const void *)v6[2];
    if (v7)
    {
      CFTypeRef v8 = CFRetain(v7);
      if (v8)
      {
LABEL_12:
        CFRelease(v6);
        return v8;
      }
    }

    else
    {
      SOSErrorCreate(1042LL, 0LL, 0LL, @"ChangeTracker is not concrete");
    }

    CFTypeRef v8 = (CFTypeRef)(*(uint64_t (**)(void))(*(void *)(a1 + 16) + 24LL))();
    CFTypeRef v9 = (CFTypeRef)v6[2];
    if (v9 != v8)
    {
      if (!v8 || (CFRetain(v8), (CFTypeRef v9 = (CFTypeRef)v6[2]) != 0LL)) {
        CFRelease(v9);
      }
      void v6[2] = v8;
    }

    goto LABEL_12;
  }

  SOSErrorCreate(1032LL, a3, 0LL, @"no change tracker for view set %@");
  return 0LL;
}

void sub_1000D0A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(dispatch_queue_s **)(v6 + 112);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000D0A98;
  block[3] = &unk_100285A48;
  void block[4] = v6;
  void block[5] = a3;
  void block[6] = a4;
  block[7] = a5;
  block[8] = a6;
  dispatch_sync(v7, block);
}

void sub_1000D0A98(uint64_t a1, uint64_t a2)
{
  if (-[OTSOSActualAdapter sosEnabled]_0(a1, a2))
  {
    CFTypeRef cf = 0LL;
    if ((sub_1000D0BC4( *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(const __CFArray **)(a1 + 64),  &cf) & 1) == 0)
    {
      CFTypeRef v3 = sub_10001267C("SecError");
      CFTypeID v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        CFTypeRef v9 = cf;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "updateChanged failed: %@", buf, 0xCu);
      }
    }

    if (cf) {
      CFRelease(cf);
    }
  }

  else
  {
    uint64_t v5 = sub_10001267C("engine");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SOS disabled for this platform", buf, 2u);
    }
  }

uint64_t sub_1000D0BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFArray *a5, CFTypeRef *a6)
{
  if (!-[OTSOSActualAdapter sosEnabled]_0(a1, a2))
  {
    SOSCCSetSOSDisabledError(a6);
    return 0LL;
  }

  uint64_t v11 = sub_10001267C("engine");
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a1 + 24);
    BOOL v14 = "did-rollback";
    if (a3 == 2) {
      BOOL v14 = "did-commit";
    }
    if (a3 == 1) {
      BOOL v15 = "will-commit";
    }
    else {
      BOOL v15 = v14;
    }
    if (a4)
    {
      if (a4 == 3)
      {
        int v16 = "ckks";
      }

      else if (a4 == 1)
      {
        int v16 = "api";
      }

      else
      {
        int v16 = "unknown";
      }
    }

    else
    {
      int v16 = "sos";
    }

    *(_DWORD *)__int128 buf = 138413570;
    *(void *)&uint8_t buf[4] = v13;
    *(_WORD *)&_BYTE buf[12] = 2080;
    *(void *)&buf[14] = v15;
    *(_WORD *)&buf[22] = 2080;
    CFTypeRef v47 = v16;
    *(_WORD *)CFSetRef v48 = 2048;
    *(void *)&v48[2] = CFArrayGetCount(a5);
    *(_WORD *)&v48[10] = 2112;
    *(void *)&v48[12] = a2;
    *(_WORD *)&v48[20] = 2048;
    *(void *)&v48[22] = a2;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%@: %s %s %ld changes, txn=%@, %p", buf, 0x3Eu);
  }

  if ((unint64_t)(a3 - 1) >= 2)
  {
    if (!a3) {
      return sub_1000CE908(a1, a2, a6);
    }
    return 1LL;
  }

  v39[0] = a1;
  v39[1] = a2;
  v39[2] = a3;
  v39[3] = a4;
  CFDictionaryRef theDict = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFSetRef theSet = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
  CFIndex Count = CFArrayGetCount(a5);
  if (Count >= 1)
  {
    CFIndex v19 = 0LL;
    int v20 = 0;
    while (1)
    {
      unint64_t ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(a5, v19);
      char v22 = ValueAtIndex;
      if (!ValueAtIndex) {
        goto LABEL_38;
      }
      CFTypeID v23 = CFGetTypeID(ValueAtIndex);
      if (v23 == CFArrayGetTypeID())
      {
        CFIndex v24 = CFArrayGetCount(v22);
        if (v24 == 1)
        {
          uint64_t v25 = CFArrayGetValueAtIndex(v22, 0LL);
          char v22 = 0LL;
          if (v25) {
            goto LABEL_28;
          }
        }

        else
        {
          if (v24 != 2)
          {
            sub_1000194E0(-50, (__CFString **)a6, 0LL, @"invalid entry in changes array: %@", v22);
            goto LABEL_38;
          }

          uint64_t v25 = CFArrayGetValueAtIndex(v22, 0LL);
          char v22 = (const __CFArray *)CFArrayGetValueAtIndex(v22, 1LL);
          if (v25)
          {
LABEL_28:
            v20 |= sub_1000D1950((uint64_t)v39, 0, v25);
            if (!v22) {
              goto LABEL_38;
            }
            goto LABEL_29;
          }
        }

        if (!v22) {
          goto LABEL_38;
        }
      }

void sub_1000D122C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_1000D124C(uint64_t result, uint64_t a2, CFArrayRef theArray)
{
  uint64_t v3 = result;
  if (theArray
    && (uint64_t v6 = *(uint64_t **)(result + 40),
        uint64_t v7 = *(CFTypeRef **)(result + 48),
        uint64_t v8 = v6[1],
        uint64_t v67 = *v6,
        uint64_t v10 = v6[2],
        uint64_t v9 = v6[3],
        (CFMutableDictionaryRef result = CFArrayGetCount(theArray)) != 0))
  {
    uint64_t v65 = v10;
    uint64_t v66 = v9;
    __int16 v64 = v7;
    uint64_t v62 = a2;
    uint64_t v63 = v3;
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(kCFAllocatorDefault, 0LL, @"(");
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      CFIndex v13 = Count;
      for (CFIndex i = 0LL; i != v13; ++i)
      {
        unint64_t ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        CFTypeID v16 = CFGetTypeID(ValueAtIndex);
        CFTypeID TypeID = CFArrayGetTypeID();
        if (v16 == TypeID) {
          unint64_t ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)ValueAtIndex, 0LL);
        }
        if (ValueAtIndex)
        {
          CFTypeID v18 = CFGetTypeID(ValueAtIndex);
          BOOL v19 = v18 == CFDataGetTypeID();
          int v20 = @"a";
          if (v16 == TypeID)
          {
            int v20 = @"d";
            uint64_t v21 = @"D";
          }

          else
          {
            uint64_t v21 = @"A";
          }

          if (v19) {
            char v22 = v20;
          }
          else {
            char v22 = v21;
          }
        }

        else if (v16 == TypeID)
        {
          char v22 = @"D";
        }

        else
        {
          char v22 = @"A";
        }

        CFStringAppend(MutableCopy, v22);
        CFRelease(v22);
      }
    }

    CFStringAppend(MutableCopy, @""));
    CFTypeID v23 = (os_log_s *)sub_10001267C("tracker");
    uint64_t v25 = v65;
    uint64_t v24 = v66;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      CFTypeID v26 = "did-rollback";
      if (v65 == 2) {
        CFTypeID v26 = "did-commit";
      }
      if (v65 == 1) {
        CFTypeID v26 = "will-commit";
      }
      if (v66)
      {
        if (v66 == 3)
        {
          CFBooleanRef v27 = "ckks";
        }

        else
        {
          CFBooleanRef v27 = "unknown";
          if (v66 == 1) {
            CFBooleanRef v27 = "api";
          }
        }
      }

      else
      {
        CFBooleanRef v27 = "sos";
      }

      *(_DWORD *)__int128 buf = 138413058;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&_BYTE buf[12] = 2080;
      *(void *)&buf[14] = v26;
      *(_WORD *)&buf[22] = 2080;
      *(void *)&_BYTE buf[24] = v27;
      __int16 v72 = 2112;
      __int128 v73 = MutableCopy;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%@ %s %s changes: %@", buf, 0x2Au);
    }

    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
    if (*(void *)(a2 + 16) || *(void *)(a2 + 32))
    {
      memset(buf, 0, sizeof(buf));
      *(_OWORD *)char v69 = 0u;
      __int128 v70 = 0u;
      CFIndex v29 = CFArrayGetCount(theArray);
      if (v29 >= 1)
      {
        CFIndex v30 = v29;
        for (CFIndex j = 0LL; v30 != j; ++j)
        {
          CFSetRef v32 = (const __CFArray *)CFArrayGetValueAtIndex(theArray, j);
          int v34 = v32;
          if (v32)
          {
            CFTypeID v35 = CFGetTypeID(v32);
            if (v35 == CFArrayGetTypeID())
            {
              CFSetRef v32 = (const __CFArray *)CFArrayGetValueAtIndex(v34, 0LL);
              int v34 = v32;
              uint64_t v36 = (char **)buf;
              if (!v32) {
                goto LABEL_45;
              }
            }

            else
            {
              uint64_t v36 = (char **)v69;
            }

            CFTypeID v37 = CFGetTypeID(v34);
            CFSetRef v32 = (const __CFArray *)CFDataGetTypeID();
            if ((const __CFArray *)v37 == v32)
            {
              CFIndex v38 = 0LL;
              CFTypeID v39 = v34;
              goto LABEL_47;
            }
          }

          else
          {
            uint64_t v36 = (char **)v69;
          }

void sub_1000D1894(uint64_t a1)
{
  unsigned int v2 = *(const __CFSet **)(a1 + 32);
  if (qword_1002DE9C8)
  {
    context[0] = _NSConcreteStackBlock;
    context[1] = 3221225472LL;
    context[2] = sub_1000D23A8;
    context[3] = &unk_100293EA8;
    context[4] = qword_1002DE9C8;
    CFSetApplyFunction(v2, (CFSetApplierFunction)sub_1000CF5B8, context);
  }

  else
  {
    qword_1002DE9C8 = (uint64_t)CFSetCreateMutableCopy(0LL, 0LL, v2);
    dispatch_time_t v3 = dispatch_time(0LL, 1000000000LL);
    dispatch_after(v3, (dispatch_queue_t)qword_1002DE9D8, &stru_100285AE8);
  }

  CFRelease(*(CFTypeRef *)(a1 + 32));
}

BOOL sub_1000D1950(uint64_t a1, char a2, void *cf)
{
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 == CFDataGetTypeID())
  {
    uint64_t v7 = *(const __CFDictionary **)(*(void *)a1 + 64LL);
    context[0] = _NSConcreteStackBlock;
    context[1] = 3221225472LL;
    context[2] = sub_1000D2138;
    context[3] = &unk_100285A88;
    char v41 = a2;
    context[4] = a1;
    void context[5] = cf;
    CFDictionaryApplyFunction(v7, (CFDictionaryApplierFunction)sub_1000CDB84, context);
    CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(*(void *)a1 + 64LL));
    return Count != 0;
  }

  CFMutableDictionaryRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472LL;
  uint64_t v36 = sub_1000D214C;
  CFTypeID v37 = &unk_100292250;
  uint64_t v38 = a1;
  CFTypeID v39 = Mutable;
  uint64_t v10 = v35;
  CFTypeID v11 = CFGetTypeID(cf);
  if (v11 == CFDictionaryGetTypeID())
  {
    Boolean Value = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, kSecAttrTombstone);
    if (Value)
    {
      int v13 = CFBooleanGetValue(Value);
      v36((uint64_t)v10, (const __CFString *)kSOSViewKeychainV0);
      if (v13) {
        goto LABEL_31;
      }
    }

    else
    {
      v36((uint64_t)v10, (const __CFString *)kSOSViewKeychainV0);
    }

    uint64_t v21 = (const __CFString **)&kSOSViewKeychainV0_tomb;
    goto LABEL_30;
  }

  BOOL valuePtr = 0;
  *(void *)__int128 buf = 0LL;
  uint64_t v14 = sub_1000E6D50((void *)cf[2], 11LL, (__CFString **)buf);
  if (!sub_1000E98A4(cf, v14, &valuePtr, (__CFString **)buf)) {
    BOOL valuePtr = SecErrorGetOSStatus(*(void *)buf) == -26275;
  }
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
  if (!valuePtr) {
    goto LABEL_31;
  }
  uint64_t v15 = cf[2];
  CFTypeID v16 = sub_1000E7EC0(cf, kSecAttrAccessible);
  if (v15 != sub_10010C560((uint64_t)@"genp", &qword_1002DEB28, (uint64_t)&unk_1002DEB20)
    && v15 != sub_10010C560((uint64_t)@"inet", &qword_1002DEB38, (uint64_t)&unk_1002DEB30)
    && v15 != sub_10010C560((uint64_t)@"keys", &qword_1002DEB58, (uint64_t)&unk_1002DEB50)
    && v15 != sub_10010C560((uint64_t)@"cert", &qword_1002DEB48, (uint64_t)&unk_1002DEB40))
  {
    goto LABEL_31;
  }

  if (!v16) {
    goto LABEL_31;
  }
  CFTypeID v17 = CFGetTypeID(v16);
  if (v17 != CFStringGetTypeID()
    || !CFEqual(v16, kSecAttrAccessibleWhenUnlocked)
    && !CFEqual(v16, kSecAttrAccessibleAfterFirstUnlock)
    && !CFEqual(v16, kSecAttrAccessibleAlwaysPrivate)
    && !CFEqual(v16, kSecAttrAccessibleWhenUnlockedThisDeviceOnly)
    && !CFEqual(v16, kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly)
    && !CFEqual(v16, kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate))
  {
    goto LABEL_31;
  }

  CFTypeID v18 = (const __CFNumber *)sub_1000E7EC0(cf, kSecAttrTombstone);
  BOOL valuePtr = 0;
  BOOL v32 = v18
     && (BOOL v19 = v18, v20 = CFGetTypeID(v18), v20 == CFNumberGetTypeID())
     && CFNumberGetValue(v19, kCFNumberCharType, &valuePtr)
     && valuePtr;
  CFTypeID v23 = (const __CFString *)sub_1000E7EC0(cf, kSecAttrSyncViewHint);
  uint64_t v24 = v23;
  if (v23)
  {
    CFTypeID v25 = CFGetTypeID(v23);
    if (v25 != CFStringGetTypeID()) {
      uint64_t v24 = 0LL;
    }
  }

  if (!sub_1000E9A18(cf))
  {
    BOOL v28 = sub_10001267C("item");
    CFIndex v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138477827;
      *(void *)&uint8_t buf[4] = cf;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Skipping non-primary item %{private}@",  buf,  0xCu);
    }

    goto LABEL_31;
  }

  if (v24)
  {
    v36((uint64_t)v10, v24);
    if (!v32)
    {
      CFStringRef v26 = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"%@-tomb", v24);
      if (v26)
      {
        CFStringRef v27 = v26;
        v36((uint64_t)v10, v26);
        CFRelease(v27);
      }
    }

    goto LABEL_31;
  }

  if (v15 == sub_10010C560((uint64_t)@"cert", &qword_1002DEB48, (uint64_t)&unk_1002DEB40))
  {
    v36((uint64_t)v10, (const __CFString *)kSOSViewOtherSyncable);
    if (v32) {
      goto LABEL_31;
    }
    goto LABEL_64;
  }

  if (!sub_1000E7EC0(cf, kSecAttrTokenID))
  {
    v36((uint64_t)v10, (const __CFString *)kSOSViewKeychainV0);
    if (!v32) {
      v36((uint64_t)v10, (const __CFString *)kSOSViewKeychainV0_tomb);
    }
  }

  CFIndex v30 = sub_1000E7EC0(cf, kSecAttrAccessGroup);
  if (v15 != sub_10010C560((uint64_t)@"keys", &qword_1002DEB58, (uint64_t)&unk_1002DEB50))
  {
    if (v30)
    {
LABEL_53:
      if (CFEqual(v30, @"com.apple.cfnetwork"))
      {
        v36((uint64_t)v10, (const __CFString *)kSOSViewAutofillPasswords);
        if (!v32)
        {
          uint64_t v21 = (const __CFString **)&kSOSViewAutofillPasswords_tomb;
LABEL_30:
          v36((uint64_t)v10, *v21);
          goto LABEL_31;
        }

        goto LABEL_31;
      }

      if (CFEqual(v30, @"com.apple.safari.credit-cards"))
      {
        v36((uint64_t)v10, (const __CFString *)kSOSViewSafariCreditCards);
        if (!v32)
        {
          uint64_t v21 = (const __CFString **)&kSOSViewSafariCreditCards_tomb;
          goto LABEL_30;
        }

        goto LABEL_31;
      }

      if (v15 == sub_10010C560((uint64_t)@"genp", &qword_1002DEB28, (uint64_t)&unk_1002DEB20))
      {
        if (CFEqual(v30, @"apple"))
        {
          int v31 = sub_1000E7EC0(cf, kSecAttrService);
          if (v31)
          {
            if (CFEqual(v31, @"AirPort"))
            {
              v36((uint64_t)v10, (const __CFString *)kSOSViewWiFi);
              if (!v32)
              {
                uint64_t v21 = (const __CFString **)&kSOSViewWiFi_tomb;
                goto LABEL_30;
              }

              goto LABEL_31;
            }
          }
        }

        if (CFEqual(v30, @"com.apple.sbd"))
        {
          v36((uint64_t)v10, (const __CFString *)kSOSViewBackupBagV0);
          if (!v32)
          {
            uint64_t v21 = (const __CFString **)&kSOSViewBackupBagV0_tomb;
            goto LABEL_30;
          }

          goto LABEL_31;
        }
      }

      goto LABEL_63;
    }

LABEL_62:
    sub_10010C560((uint64_t)@"genp", &qword_1002DEB28, (uint64_t)&unk_1002DEB20);
LABEL_63:
    v36((uint64_t)v10, (const __CFString *)kSOSViewOtherSyncable);
    if (v32) {
      goto LABEL_31;
    }
LABEL_64:
    uint64_t v21 = (const __CFString **)&kSOSViewOtherSyncable_tomb;
    goto LABEL_30;
  }

  if (!v30) {
    goto LABEL_62;
  }
  if (!CFEqual(v30, @"com.apple.security.sos")) {
    goto LABEL_53;
  }
  v36((uint64_t)v10, (const __CFString *)kSOSViewiCloudIdentity);
  if (!v32)
  {
    uint64_t v21 = (const __CFString **)&kSOSViewiCloudIdentity_tomb;
    goto LABEL_30;
  }

  __int128 v73 = sub_10001267C("octagon-account");
  CFTypeRef v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
  id v75 = v74;
  if (v17)
  {
    uint64_t v12 = v82;
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)__int16 v94 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEFAULT,  "Unable to find Apple account matching persona %@",  buf,  0xCu);
    }
  }

  else
  {
    uint64_t v12 = v82;
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEBUG,  "Unable to find Apple account matching primary persona (nil)",  buf,  2u);
    }
  }

  if (v81 && !*v81)
  {
    uint64_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"No AppleAccount exists matching persona '%@' and altDSID '%@'",  v17,  v13));
    CFTypeID v39 = 0LL;
    void *v81 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:",  @"com.apple.security.octagon",  59LL,  v67));
    goto LABEL_59;
  }

  CFTypeID v39 = 0LL;
LABEL_60:

LABEL_61:
  return v39;
}

            if (v41 & v39 & (v42 ^ 1) | v44) {
              uint64_t v61 = v41 & v39 & (v42 ^ 1);
            }
            else {
              uint64_t v61 = v47 & ~v88;
            }
            if ((v41 & 1) == 0)
            {
              uint64_t v63 = v39 ^ 1;
              if (v40) {
                uint64_t v63 = 1;
              }
              if (!v63) {
                uint64_t v40 = a5;
              }
              if (!v43)
              {
                uint64_t v62 = 0;
                v61 |= v63 ^ 1;
                v45 &= v63;
                goto LABEL_79;
              }

  *((_BYTE *)v6 + 273) = self->_optionsAllowExpensiveAccess;
  *((_DWORD *)v6 + 70) |= 0x1000000u;
  BOOL v28 = self->_has;
  if ((*(_DWORD *)&v28 & 0x2000000) == 0)
  {
LABEL_32:
    if ((*(_DWORD *)&v28 & 0x200000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_64;
  }

  uint64_t v12 = 0LL;
LABEL_63:
  int v13 = -[NSString hash](self->_optionsSourceApplicationBundleIdentifier, "hash", v19);
  uint64_t v14 = -[NSString hash](self->_optionsSourceApplicationSecondaryIdentifier, "hash");
  uint64_t v15 = self->_has;
  if ((*(_DWORD *)&v15 & 0x4000000) != 0)
  {
    CFTypeID v16 = 2654435761LL * self->_optionsAppleIdContext;
    if ((*(_DWORD *)&v15 & 0x20000000) != 0) {
      goto LABEL_65;
    }
LABEL_67:
    CFTypeID v17 = 0LL;
    return v49 ^ v50 ^ v48 ^ v47 ^ v46 ^ v45 ^ v44 ^ v43 ^ v42 ^ v41 ^ v40 ^ v39 ^ v38 ^ v37 ^ v36 ^ v35 ^ v34 ^ v33 ^ v32 ^ v31 ^ v30 ^ v29 ^ v28 ^ v27 ^ v26 ^ v25 ^ v24 ^ v23 ^ v22 ^ v21 ^ v20 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v16 ^ v17;
  }

  CFTypeID v16 = 0LL;
  if ((*(_DWORD *)&v15 & 0x20000000) == 0) {
    goto LABEL_67;
  }
LABEL_65:
  CFTypeID v17 = 2654435761LL * self->_optionsTlsPinningRequired;
  return v49 ^ v50 ^ v48 ^ v47 ^ v46 ^ v45 ^ v44 ^ v43 ^ v42 ^ v41 ^ v40 ^ v39 ^ v38 ^ v37 ^ v36 ^ v35 ^ v34 ^ v33 ^ v32 ^ v31 ^ v30 ^ v29 ^ v28 ^ v27 ^ v26 ^ v25 ^ v24 ^ v23 ^ v22 ^ v21 ^ v20 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v16 ^ v17;
}

  return v10;
}

void sub_1000D2138(uint64_t a1, uint64_t a2, const void *a3)
{
}

void sub_1000D214C(uint64_t a1, const __CFString *a2)
{
  Boolean Value = (const __CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(**(void **)(a1 + 32) + 72LL), a2);
  if (Value)
  {
    uint64_t v5 = Value;
    CFTypeID v6 = CFGetTypeID(Value);
    if (v6 == CFSetGetTypeID())
    {
      context[0] = _NSConcreteStackBlock;
      context[1] = 3221225472LL;
      context[2] = sub_1000D23A0;
      context[3] = &unk_100293EA8;
      context[4] = *(void *)(a1 + 40);
      CFSetApplyFunction(v5, (CFSetApplierFunction)sub_1000CF5B8, context);
    }

    else
    {
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 40), v5);
    }
  }

  uint64_t v7 = *(void *)(a1 + 32);
  if (!a2 || (CFTypeID v8 = CFGetTypeID(a2), v8 != CFStringGetTypeID())) {
    sub_10001BB24(@"Execution has encountered an unexpected state", 0x53C0000Eu);
  }
  if (CFStringHasPrefix(a2, @"PCS-")) {
    uint64_t v9 = @"PCS";
  }
  else {
    uint64_t v9 = a2;
  }
  CFSetSetValue(*(CFMutableSetRef *)(v7 + 40), v9);
}

void sub_1000D225C(uint64_t a1, const void *a2)
{
}

void sub_1000D226C(uint64_t a1, const void *a2, int a3, const void *a4)
{
  Boolean Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), a2);
  if (!Value)
  {
    Boolean Value = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, Value);
    if (Value) {
      CFRelease(Value);
    }
  }

  if (a3)
  {
    CFArrayAppendValue((CFMutableArrayRef)Value, a4);
  }

  else
  {
    uint64_t v10 = a4;
    CFArrayRef v9 = CFArrayCreate(kCFAllocatorDefault, &v10, 1LL, &kCFTypeArrayCallBacks);
    CFArrayAppendValue((CFMutableArrayRef)Value, v9);
    if (v9) {
      CFRelease(v9);
    }
  }

void sub_1000D23A0(uint64_t a1, const void *a2)
{
}

void sub_1000D23A8(uint64_t a1, const void *a2)
{
}

void sub_1000D23B0(id a1)
{
  uint64_t v1 = (const __CFSet *)qword_1002DE9C8;
  context[0] = _NSConcreteStackBlock;
  context[1] = 3221225472LL;
  context[2] = sub_1000D242C;
  context[3] = &unk_100293EA8;
  context[4] = CFNotificationCenterGetDarwinNotifyCenter();
  CFSetApplyFunction(v1, (CFSetApplierFunction)sub_1000CF5B8, context);
  CFRelease((CFTypeRef)qword_1002DE9C8);
  qword_1002DE9C8 = 0LL;
}

void sub_1000D242C(uint64_t a1, uint64_t a2)
{
  CFTypeID v4 = sub_10001267C("view");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v9 = a2;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Sending view notification for view %@",  buf,  0xCu);
  }

  CFTypeID v6 = CFStringCreateWithFormat(0LL, 0LL, @"com.apple.security.view-change.%@", a2);
  if (v6)
  {
    uint64_t v7 = v6;
    CFNotificationCenterPostNotificationWithOptions(*(CFNotificationCenterRef *)(a1 + 32), v6, 0LL, 0LL, 0LL);
    CFRelease(v7);
  }

void sub_1000D2524(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("ViewNotificationQueue", 0LL);
  unsigned int v2 = (void *)qword_1002DE9D8;
  qword_1002DE9D8 = (uint64_t)v1;
}

void sub_1000D2550(uint64_t a1, const void *a2, _BYTE *a3)
{
  CFTypeID v6 = (const __CFData *)(*(uint64_t (**)(const void *, void))(*(void *)(*(void *)(a1 + 56) + 16LL)
                                                                         + 112LL))( a2,  *(void *)(a1 + 64));
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8LL);
    BytePtr = (__int128 *)CFDataGetBytePtr(v6);
    sub_1001A9ECC((char **)(v8 + 32), BytePtr);
    *(_BYTE *)(v8 + 56) = 1;
    CFTypeRef cf1 = 0LL;
    uint64_t v10 = (*(uint64_t (**)(void, const void *, CFTypeRef *, void))(*(void *)(*(void *)(a1 + 56) + 16LL)
                                                                               + 88LL))( *(void *)(a1 + 88),  a2,  &cf1,  *(void *)(a1 + 64));
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8LL);
    if (v10) {
      BOOL v13 = *(_BYTE *)(v12 + 24) == 0;
    }
    else {
      BOOL v13 = 1;
    }
    char v14 = !v13;
    *(_BYTE *)(v12 + 24) = v14;
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
    {
      if ((v10 & 0xFFFFFFFFFFFFFFFELL) == 2)
      {
        **(_BYTE **)(a1 + 96) = 1;
      }

      else
      {
        if (!CFEqual(cf1, a2))
        {
          uint64_t v23 = *(void *)(*(void *)(a1 + 48) + 8LL);
          uint64_t v24 = (__int128 *)CFDataGetBytePtr(v7);
          sub_1001A9ECC((char **)(v23 + 32), v24);
          *(_BYTE *)(v23 + 56) = 1;
        }

        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 104), cf1);
      }
    }

    else
    {
      *a3 = 1;
      **(_BYTE **)(a1 + 72) = 0;
      BOOL v19 = sub_10001267C("SecError");
      CFTypeID v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = *(void *)(*(void *)(a1 + 80) + 16LL);
        char v22 = *(void **)(a1 + 64);
        if (v22) {
          char v22 = (void *)*v22;
        }
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v36 = v21;
        __int16 v37 = 2112;
        uint64_t v38 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%@ SOSDataSourceMergeObject failed %@ rolling back changes",  buf,  0x16u);
      }
    }

    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
    {
      if (*(_BYTE *)(a1 + 112))
      {
        uint64_t v25 = (*(uint64_t (**)(const void *, void))(*(void *)(*(void *)(a1 + 56) + 16LL) + 120LL))( a2,  0LL);
        if (v25)
        {
          CFStringRef v26 = (const __CFDate *)v25;
          double Current = CFAbsoluteTimeGetCurrent();
          CFAbsoluteTime AbsoluteTime = CFDateGetAbsoluteTime(v26);
          int64_t v29 = (uint64_t)(Current - AbsoluteTime);
          if (AbsoluteTime <= Current) {
            int64_t v29 = 0LL;
          }
          if (v11 == 1) {
            CFIndex v30 = @"com.apple.security.secureobjectsync.itemtime.known";
          }
          else {
            CFIndex v30 = @"com.apple.security.secureobjectsync.itemtime.new";
          }
          uint64_t v31 = 1LL;
          if (v29 >= 101)
          {
            unint64_t v32 = v29;
            do
            {
              int64_t v29 = v32 / 0xA;
              v31 *= 10LL;
              BOOL v33 = v32 > 0x3F1;
              v32 /= 0xAuLL;
            }

            while (v33);
          }

          SecCoreAnalyticsSendValue(v30, v31 * v29);
          CFRelease(v26);
        }
      }
    }

    if (cf1) {
      CFRelease(cf1);
    }
    CFRelease(v7);
  }

  else
  {
    *a3 = 1;
    **(_BYTE **)(a1 + 72) = 0;
    uint64_t v15 = sub_10001267C("SecError");
    CFTypeID v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(*(void *)(a1 + 80) + 16LL);
      CFTypeID v18 = *(void **)(a1 + 64);
      if (v18) {
        CFTypeID v18 = (void *)*v18;
      }
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v36 = v17;
      __int16 v37 = 2112;
      uint64_t v38 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%@ peer sent bad object: %@, rolling back changes",  buf,  0x16u);
    }
  }

void sub_1000D2894(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (-[OTSOSActualAdapter sosEnabled]_0((uint64_t)v4, v3))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000D291C;
    block[3] = &unk_100285740;
    uint64_t v7 = a1;
    id v6 = v4;
    dispatch_sync(*(dispatch_queue_t *)(a1 + 112), block);
  }
}

void sub_1000D291C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) copy];
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(void **)(v3 + 136);
  *(void *)(v3 + 136) = v2;
}

void sub_1000D294C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (-[OTSOSActualAdapter sosEnabled]_0((uint64_t)v4, v3))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000D29D4;
    block[3] = &unk_100285790;
    uint64_t v7 = a1;
    id v6 = v4;
    dispatch_sync(*(dispatch_queue_t *)(a1 + 112), block);
  }
}

void sub_1000D29D4(uint64_t a1)
{
}

void sub_1000D29E0(void *a1)
{
  id v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1000D2A2C(uint64_t a1, CFDataRef theData, const void *a3, _BYTE *a4)
{
  CFTypeRef cf = 0LL;
  if (!a3)
  {
    BytePtr = CFDataGetBytePtr(theData);
    char v41 = sub_10001267C("SecError");
    CFTypeRef v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v43 = *(void *)(*(void *)(a1 + 64) + 24LL);
      uint64_t v44 = *(void *)(*(void *)(a1 + 72) + 16LL);
      int v45 = *BytePtr;
      int v46 = BytePtr[1];
      int v47 = BytePtr[2];
      int v48 = BytePtr[3];
      uint64_t v49 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      *(_DWORD *)__int128 buf = 138413826;
      *(void *)&uint8_t buf[4] = v43;
      __int16 v109 = 2112;
      uint64_t v110 = v44;
      __int16 v111 = 1024;
      int v112 = v45;
      __int16 v113 = 1024;
      int v114 = v46;
      __int16 v115 = 1024;
      int v116 = v47;
      __int16 v117 = 1024;
      int v118 = v48;
      __int16 v119 = 2112;
      *(void *)__int128 v120 = v49;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "%@:%@ object %02X%02X%02X%02X dropping from manifest: not found in datasource: %@",  buf,  0x38u);
    }

    uint64_t v50 = *(__CFArray **)(a1 + 80);
    *(void *)__int128 buf = theData;
    CFArrayRef v51 = CFArrayCreate(kCFAllocatorDefault, (const void **)buf, 1LL, &kCFTypeArrayCallBacks);
    CFArrayAppendValue(v50, v51);
    if (v51) {
      CFRelease(v51);
    }
    BOOL v13 = 0LL;
    goto LABEL_51;
  }

  uint64_t v8 = (const __CFString *)(*(uint64_t (**)(const void *, CFTypeRef *))(*(void *)(*(void *)(a1 + 64) + 16LL)
                                                                                + 136LL))( a3,  &cf);
  if (!v8)
  {
    BOOL v13 = 0LL;
    goto LABEL_22;
  }

  uint64_t v12 = v8;
  BOOL v13 = sub_100019F48(v8, &cf, v9, v10, v11);
  CFRelease(v12);
  if (!v13
    || (char v14 = (const __CFData *)(*(uint64_t (**)(const void *, CFTypeRef *))(*(void *)(*(void *)(a1 + 64)
                                                                                                 + 16LL)
                                                                                     + 112LL))( a3,  &cf)) == 0LL)
  {
LABEL_22:
    int OSStatus = SecErrorGetOSStatus(cf);
    id v53 = CFDataGetBytePtr(theData);
    CFIndex v54 = sub_10001267C("engine");
    CFIndex v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
    BOOL v56 = os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT);
    if (OSStatus == -26275)
    {
      if (v56)
      {
        uint64_t v57 = *(void *)(*(void *)(a1 + 64) + 24LL);
        uint64_t v58 = *(void *)(*(void *)(a1 + 72) + 16LL);
        int v59 = *v53;
        int v60 = v53[1];
        int v61 = v53[2];
        int v62 = v53[3];
        *(_DWORD *)__int128 buf = 138413826;
        *(void *)&uint8_t buf[4] = v57;
        __int16 v109 = 2112;
        uint64_t v110 = v58;
        __int16 v111 = 1024;
        int v112 = v59;
        __int16 v113 = 1024;
        int v114 = v60;
        __int16 v115 = 1024;
        int v116 = v61;
        __int16 v117 = 1024;
        int v118 = v62;
        __int16 v119 = 2112;
        *(void *)__int128 v120 = cf;
        _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "%@:%@ object %02X%02X%02X%02X dropping from manifest: %@",  buf,  0x38u);
      }

      uint64_t v63 = *(__CFArray **)(a1 + 80);
      *(void *)__int128 buf = theData;
      CFArrayRef v64 = CFArrayCreate(kCFAllocatorDefault, (const void **)buf, 1LL, &kCFTypeArrayCallBacks);
      CFArrayAppendValue(v63, v64);
      if (v64) {
        CFRelease(v64);
      }
      CFTypeRef v65 = cf;
    }

    else
    {
      if (v56)
      {
        uint64_t v66 = *(void *)(*(void *)(a1 + 64) + 24LL);
        uint64_t v67 = *(void *)(*(void *)(a1 + 72) + 16LL);
        int v68 = *v53;
        int v69 = v53[1];
        int v70 = v53[2];
        int v71 = v53[3];
        *(_DWORD *)__int128 buf = 138413826;
        *(void *)&uint8_t buf[4] = v66;
        __int16 v109 = 2112;
        uint64_t v110 = v67;
        __int16 v111 = 1024;
        int v112 = v68;
        __int16 v113 = 1024;
        int v114 = v69;
        __int16 v115 = 1024;
        int v116 = v70;
        __int16 v117 = 1024;
        int v118 = v71;
        __int16 v119 = 2112;
        *(void *)__int128 v120 = cf;
        _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "%@:%@ object %02X%02X%02X%02X in SOSDataSourceForEachObject: %@",  buf,  0x38u);
      }

      *a4 = 1;
      if (cf)
      {
        __int16 v72 = *(CFTypeRef **)(a1 + 88);
        if (v72 && !*v72) {
          *__int16 v72 = cf;
        }
        else {
          CFRelease(cf);
        }
      }

      uint64_t v92 = *(void *)(*(void *)(a1 + 40) + 8LL);
      CFTypeRef v65 = *(CFTypeRef *)(v92 + 24);
      if (!v65) {
        goto LABEL_51;
      }
      *(void *)(v92 + 24) = 0LL;
    }

    CFRelease(v65);
LABEL_51:
    uint64_t v15 = 0LL;
    goto LABEL_52;
  }

  uint64_t v15 = v14;
  if (!CFEqual(theData, v14))
  {
    CFTypeID v16 = CFDataGetBytePtr(theData);
    uint64_t v17 = CFDataGetBytePtr(v15);
    CFTypeID v18 = sub_10001267C("engine");
    BOOL v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *(void *)(*(void *)(a1 + 64) + 24LL);
      uint64_t v21 = *(void *)(*(void *)(a1 + 72) + 16LL);
      int v22 = *v16;
      int v23 = v16[1];
      int v24 = v16[2];
      int v25 = v16[3];
      int v26 = *v17;
      int v27 = v17[1];
      int v28 = v17[2];
      int v29 = v17[3];
      *(_DWORD *)__int128 buf = 138414594;
      *(void *)&uint8_t buf[4] = v20;
      __int16 v109 = 2112;
      uint64_t v110 = v21;
      __int16 v111 = 1024;
      int v112 = v22;
      __int16 v113 = 1024;
      int v114 = v23;
      __int16 v115 = 1024;
      int v116 = v24;
      __int16 v117 = 1024;
      int v118 = v25;
      __int16 v119 = 1024;
      *(_DWORD *)__int128 v120 = v26;
      *(_WORD *)&v120[4] = 1024;
      *(_DWORD *)&v120[6] = v27;
      LOWORD(v121) = 1024;
      *(_DWORD *)((char *)&v121 + 2) = v28;
      HIWORD(v121) = 1024;
      int v122 = v29;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "%@:%@ object %02X%02X%02X%02X is really %02X%02X%02X%02X dropping from local manifest",  buf,  0x46u);
    }

    CFIndex v30 = *(__CFArray **)(a1 + 80);
    *(void *)__int128 buf = theData;
    CFArrayRef v31 = CFArrayCreate(kCFAllocatorDefault, (const void **)buf, 1LL, &kCFTypeArrayCallBacks);
    CFArrayAppendValue(v30, v31);
    if (v31) {
      CFRelease(v31);
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 80), a3);
  }

  CFIndex Length = CFDataGetLength(v13);
  BOOL v33 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  char v34 = CFDataGetBytePtr(v13);
  CFIndex v35 = CFDataGetLength(v13);
  uint64_t v36 = &v34[v35];
  uint64_t v107 = 0LL;
  *(void *)__int128 buf = 0LL;
  uint64_t v37 = ccder_decode_tag(buf, v34, &v34[v35]);
  if (!v37)
  {
LABEL_35:
    CFIndex v105 = Length;
    __int128 v73 = CFDataGetBytePtr(v15);
    CFIndex v74 = CFDataGetLength(v13);
    CFMutableDictionaryRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 2 * v74);
    __int16 v76 = CFDataGetBytePtr(v13);
    CFIndex v77 = CFDataGetLength(v13);
    if (v77 >= 1)
    {
      CFIndex v78 = v77;
      do
      {
        unsigned int v79 = *v76++;
        CFStringAppendFormat(Mutable, 0LL, @"%02X", v79);
        --v78;
      }

      while (v78);
    }

    id v80 = sub_10001267C("engine");
    uint64_t v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v82 = *(void *)(*(void *)(a1 + 64) + 24LL);
      uint64_t v83 = *(void *)(*(void *)(a1 + 72) + 16LL);
      int v84 = *v73;
      int v85 = v73[1];
      int v86 = v73[2];
      int v87 = v73[3];
      *(_DWORD *)__int128 buf = 138414082;
      *(void *)&uint8_t buf[4] = v82;
      __int16 v109 = 2112;
      uint64_t v110 = v83;
      __int16 v111 = 1024;
      int v112 = v84;
      __int16 v113 = 1024;
      int v114 = v85;
      __int16 v115 = 1024;
      int v116 = v86;
      __int16 v117 = 1024;
      int v118 = v87;
      __int16 v119 = 2112;
      *(void *)__int128 v120 = Mutable;
      *(_WORD *)&v120[8] = 2112;
      CFTypeRef v121 = cf;
      _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEFAULT,  "%@:%@ object %02X%02X%02X%02X der: %@ dropping from manifest: %@",  buf,  0x42u);
    }

    CFIndex Length = v105;
    if (Mutable) {
      CFRelease(Mutable);
    }
    uint64_t v88 = *(void *)(*(void *)(a1 + 40) + 8LL);
    __int128 v89 = *(const void **)(v88 + 24);
    if (v89)
    {
      *(void *)(v88 + 24) = 0LL;
      CFRelease(v89);
    }

    uint64_t v90 = *(__CFArray **)(a1 + 80);
    *(void *)__int128 buf = v15;
    CFArrayRef v91 = CFArrayCreate(kCFAllocatorDefault, (const void **)buf, 1LL, &kCFTypeArrayCallBacks);
    CFArrayAppendValue(v90, v91);
    if (!v91) {
      goto LABEL_73;
    }
    goto LABEL_72;
  }

  if (*(void *)buf)
  {
    uint64_t v38 = ccder_decode_len(&v107, v37, v36);
    if (v38)
    {
      if (v36 == (const UInt8 *)(v38 + v107)) {
        goto LABEL_64;
      }
      CFTypeID v39 = @"Object has %td trailing unused bytes";
    }

    else
    {
      CFTypeID v39 = @"Object with tag %lu has no valid DER length";
    }
  }

  else
  {
    CFTypeID v39 = @"Object has EOL tag";
  }

  if ((SOSErrorCreate(1035LL, &cf, 0LL, v39) & 1) == 0) {
    goto LABEL_35;
  }
LABEL_64:
  id v95 = (__CFArray *)v33[10];
  if (v95
    || (v96 = CFGetAllocator(v33), id v95 = CFArrayCreateMutable(v96, 0LL, &kCFTypeArrayCallBacks), (v33[10] = v95) != 0LL))
  {
    CFArrayAppendValue(v95, v13);
  }

  uint64_t v97 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v98 = (__int128 *)CFDataGetBytePtr(v15);
  sub_1001A9ECC((char **)(v97 + 32), v98);
  *(_BYTE *)(v97 + 56) = 1;
  if (!**(void **)(a1 + 96)) {
    **(void **)(a1 + 96) = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  }
  uint64_t v99 = (*(uint64_t (**)(const void *, CFTypeRef *))(*(void *)(*(void *)(a1 + 64) + 16LL) + 136LL))( a3,  &cf);
  if (!v99) {
    goto LABEL_73;
  }
  CFArrayRef v91 = (CFArrayRef)v99;
  id v100 = **(const __CFArray ***)(a1 + 96);
  CFIndex Count = CFArrayGetCount(v100);
  Boolean Value = CFDictionaryGetValue(v91, kSecAttrAccessGroup);
  v123.id location = 0LL;
  v123.CFIndex length = Count;
  if (!CFArrayContainsValue(v100, v123, Value))
  {
    __int128 v103 = **(__CFArray ***)(a1 + 96);
    __int128 v104 = CFDictionaryGetValue(v91, kSecAttrAccessGroup);
    CFArrayAppendValue(v103, v104);
  }

LABEL_72:
  CFRelease(v91);
LABEL_73:
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) += Length;
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) >= 0xFA01uLL) {
    *a4 = 1;
  }
LABEL_52:
  id v93 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v93)
  {
    __int16 v94 = *(void **)(a1 + 88);
    if (v94 && !*v94) {
      void *v94 = v93;
    }
    else {
      CFRelease(v93);
    }
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
  if (v13) {
    CFRelease(v13);
  }
  if (v15) {
    CFRelease(v15);
  }
}

      id v98 = (void *)objc_claimAutoreleasedReturnValue([v10 octagonInformationInitialized]);
      if ([v98 wait:500000000])
      {
        uint64_t v99 = (void *)objc_claimAutoreleasedReturnValue([v10 octagonPeerID]);

        if (v99)
        {
LABEL_77:
          __int128 v102 = (void *)objc_claimAutoreleasedReturnValue( +[NSCalendar calendarWithIdentifier:]( &OBJC_CLASS___NSCalendar,  "calendarWithIdentifier:",  NSCalendarIdentifierISO8601));
          __int128 v103 = (void *)objc_claimAutoreleasedReturnValue( +[NSTimeZone timeZoneWithAbbreviation:]( &OBJC_CLASS___NSTimeZone,  "timeZoneWithAbbreviation:",  @"UTC"));
          [v102 setTimeZone:v103];

          __int128 v104 = objc_claimAutoreleasedReturnValue([v128 lastUnlockTime]);
          __int16 v119 = v102;
          if (v104)
          {
            CFIndex v105 = (void *)v104;
            unsigned int v125 = (void *)objc_claimAutoreleasedReturnValue([v102 startOfDayForDate:v104]);
          }

          else
          {
            unsigned int v125 = 0LL;
          }

          __int16 v117 = objc_alloc(&OBJC_CLASS___CKKSDeviceStateEntry);
          __int128 v124 = (void *)objc_claimAutoreleasedReturnValue([v9 contextID]);
          __int128 v106 = -[OTDeviceInformationActualAdapter osVersion]_0();
          CFRange v123 = (void *)objc_claimAutoreleasedReturnValue(v106);
          int v116 = (void *)objc_claimAutoreleasedReturnValue([v10 octagonPeerID]);
          int v122 = (void *)objc_claimAutoreleasedReturnValue([v10 octagonStatus]);
          CFTypeRef v121 = (void *)objc_claimAutoreleasedReturnValue([v10 accountCirclePeerID]);
          int v118 = (void *)objc_claimAutoreleasedReturnValue([v10 currentCircleStatus]);
          __int16 v115 = [v118 status];
          int v114 = (void *)objc_claimAutoreleasedReturnValue([v9 viewKeyHierarchyState]);
          __int16 v113 = (void *)objc_claimAutoreleasedReturnValue([v55 uuid]);
          int v112 = (void *)objc_claimAutoreleasedReturnValue([v131 uuid]);
          id v130 = v87;
          uint64_t v107 = (void *)objc_claimAutoreleasedReturnValue([v87 uuid]);
          __int128 v108 = (void *)objc_claimAutoreleasedReturnValue([v9 zoneID]);
          __int16 v109 = (void *)objc_claimAutoreleasedReturnValue([v133 encodedCKRecord]);
          LODWORD(v111) = v115;
          CFTypeID v16 = v132;
          int v22 = -[CKKSDeviceStateEntry initForDevice:contextID:osVersion:lastUnlockTime:octagonPeerID:octagonStatus:circlePeerID:circleStatus:keyState:currentTLKUUID:currentClassAUUID:currentClassCUUID:zoneID:encodedCKRecord:]( v117,  "initForDevice:contextID:osVersion:lastUnlockTime:octagonPeerID:octagonStatus:circlePeerID:circleStatus :keyState:currentTLKUUID:currentClassAUUID:currentClassCUUID:zoneID:encodedCKRecord:",  v132,  v124,  v123,  v125,  v116,  v122,  v121,  v111,  v114,  v113,  v112,  v107,  v108,  v109);

          uint64_t v57 = v133;
          uint64_t v11 = v128;
LABEL_81:

LABEL_82:
          goto LABEL_83;
        }

        id v100 = (void *)objc_claimAutoreleasedReturnValue([v9 zoneName]);
        id v101 = sub_1000AA6AC(@"ckksdevice", v100);
        id v98 = (void *)objc_claimAutoreleasedReturnValue(v101);

        if (os_log_type_enabled((os_log_t)v98, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v98,  OS_LOG_TYPE_ERROR,  "No octagon peer ID available",  buf,  2u);
        }
      }

      goto LABEL_77;
    }
  }

  int v23 = (void *)objc_claimAutoreleasedReturnValue([v9 zoneName]);
  int v24 = sub_1000AA6AC(@"ckksdevice", v23);
  int v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);

  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    int v26 = (void *)objc_claimAutoreleasedReturnValue([v10 currentCKAccountInfo]);
    int v27 = @"available";
    if (v13 == (id)3) {
      int v27 = @"no account";
    }
    if (!v13) {
      int v27 = @"unknown";
    }
    int v28 = v27;
    *(_DWORD *)__int128 buf = 138412546;
    v149 = v26;
    v150 = 2112;
    size_t v151 = v28;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "No iCloud account active: %@ cdp capable account:%@",  buf,  0x16u);
  }

  v146 = NSLocalizedDescriptionKey;
  int v29 = (void *)objc_claimAutoreleasedReturnValue([v10 currentCKAccountInfo]);
  CFIndex v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"No active CDP Capable iCloud account: %@",  v29));
  id v147 = v30;
  CFArrayRef v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v147,  &v146,  1LL));
  CFTypeID v18 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"securityd",  -67671LL,  v31));

  if (a6)
  {
    CFTypeID v18 = v18;
    int v22 = 0LL;
    *a6 = v18;
  }

  else
  {
    int v22 = 0LL;
  }

  CFTypeID v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_timestampC2Now));
  [v3 setObject:v39 forKey:@"timestamp_c2_now"];

  BOOL v19 = self->_has;
  if ((*(_WORD *)&v19 & 0x200) == 0)
  {
LABEL_35:
    if ((*(_WORD *)&v19 & 0x100) == 0) {
      goto LABEL_36;
    }
    goto LABEL_74;
  }

  PBDataWriterWriteUint64Field(v20, self->_timestampC2Now, 203LL);
  char v14 = self->_has;
  if ((*(_WORD *)&v14 & 0x200) == 0)
  {
LABEL_35:
    if ((*(_WORD *)&v14 & 0x100) == 0) {
      goto LABEL_36;
    }
    goto LABEL_74;
  }

  v4[7] = self->_timestampC2Now;
  *((_DWORD *)v4 + 70) |= 0x40u;
  uint64_t v7 = self->_has;
  if ((*(_WORD *)&v7 & 0x200) == 0)
  {
LABEL_35:
    if ((*(_WORD *)&v7 & 0x100) == 0) {
      goto LABEL_36;
    }
    goto LABEL_74;
  }

void sub_1000D3348(uint64_t a1, char a2)
{
  id v4 = (dispatch_queue_s *)*((void *)[*(id *)(a1 + 32) engine] + 14);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000D33D4;
  v5[3] = &unk_100290408;
  char v7 = a2;
  id v6 = *(id *)(a1 + 32);
  dispatch_async(v4, v5);
}

void sub_1000D33D4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
  {
    *((_BYTE *)[*(id *)(a1 + 32) peer] + 4_Block_object_dispose(va, 8) = 0;
    if (![*(id *)(a1 + 32) confirmed] && !objc_msgSend(*(id *)(a1 + 32), "proposed"))
    {
      *((_BYTE *)[*(id *)(a1 + 32) peer] + 49) = 1;
      id v2 = sub_10001267C("engine");
      uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = *((void *)[*(id *)(a1 + 32) engine] + 3);
        uint64_t v5 = *((void *)[*(id *)(a1 + 32) peer] + 2);
        id v6 = [*(id *)(a1 + 32) local];
        int v17 = 138412802;
        uint64_t v18 = v4;
        __int16 v19 = 2112;
        uint64_t v20 = v5;
        __int16 v21 = 2112;
        id v22 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%@:%@ sendObjects=true L:%@",  (uint8_t *)&v17,  0x20u);
      }
    }

    sub_1001AFE7C((CFArrayRef *)[*(id *)(a1 + 32) peer] + 11, objc_msgSend(*(id *)(a1 + 32), "local"));
    sub_1001AFE7C((CFArrayRef *)[*(id *)(a1 + 32) peer] + 10, objc_msgSend(*(id *)(a1 + 32), "proposed"));
    char v7 = sub_10001267C("engine");
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *((void *)[*(id *)(a1 + 32) engine] + 3);
      uint64_t v10 = *((void *)[*(id *)(a1 + 32) peer] + 2);
      id v11 = [*(id *)(a1 + 32) message];
      int v17 = 138412802;
      uint64_t v18 = v9;
      __int16 v19 = 2112;
      uint64_t v20 = v10;
      __int16 v21 = 2112;
      id v22 = v11;
      uint64_t v12 = "send %@:%@ %@";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v17, 0x20u);
    }
  }

  else
  {
    BOOL v13 = sub_10001267C("SecError");
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *((void *)[*(id *)(a1 + 32) engine] + 3);
      uint64_t v15 = *((void *)[*(id *)(a1 + 32) peer] + 2);
      id v16 = [*(id *)(a1 + 32) message];
      int v17 = 138412802;
      uint64_t v18 = v14;
      __int16 v19 = 2112;
      uint64_t v20 = v15;
      __int16 v21 = 2112;
      id v22 = v16;
      uint64_t v12 = "%@:%@ failed to send %@";
      goto LABEL_11;
    }
  }
}

CFMutableSetRef sub_1000D3638(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if (-[OTSOSActualAdapter sosEnabled]_0(a1, a2))
  {
    v12[0] = 0LL;
    v12[1] = v12;
    int v12[2] = 0x2020000000LL;
    char v13 = 0;
    CFMutableSetRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1000D3754;
    v10[3] = &unk_100285830;
    char v11 = a3;
    void v10[4] = v12;
    v10[5] = a2;
    void v10[6] = a1;
    v10[7] = Mutable;
    if ((sub_1000CD270(a1, a4, v10) & 1) == 0 && Mutable)
    {
      CFRelease(Mutable);
      CFMutableSetRef Mutable = 0LL;
    }

    _Block_object_dispose(v12, 8);
  }

  else
  {
    SOSCCSetSOSDisabledError(a4);
    return 0LL;
  }

  return Mutable;
}

void sub_1000D3734( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1000D3754(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = 0LL;
  char v13 = &v12;
  uint64_t v14 = 0x2020000000LL;
  char v15 = 0;
  context[0] = _NSConcreteStackBlock;
  context[1] = 3221225472LL;
  context[2] = sub_1000D38C8;
  context[3] = &unk_100285808;
  char v11 = *(_BYTE *)(a1 + 64);
  uint64_t v4 = *(const __CFSet **)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 32);
  context[4] = &v12;
  void context[5] = v5;
  __int128 v10 = *(_OWORD *)(a1 + 48);
  CFSetApplyFunction(v4, (CFSetApplierFunction)sub_1000CF5B8, context);
  if (*((_BYTE *)v13 + 24))
  {
    CFTypeRef v8 = 0LL;
    if ((sub_1000CDB9C(*(void *)(a1 + 48), a2, &v8) & 1) == 0)
    {
      id v6 = sub_10001267C("engine-save");
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        CFTypeRef v17 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to save engine: %@", buf, 0xCu);
      }
    }
  }

  _Block_object_dispose(&v12, 8);
}

void sub_1000D38A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void sub_1000D38C8(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v2 = cf;
  CFTypeRef cfa = 0LL;
  if (!cf)
  {
    sub_1000194E0(-50, (__CFString **)&cfa, @"object %@ is not a string", 0LL);
LABEL_9:
    uint64_t v5 = 0LL;
    BOOL v6 = 0;
    goto LABEL_10;
  }

  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFStringGetTypeID())
  {
    sub_1000194E0(-50, (__CFString **)&cfa, @"object %@ is not a string", v2);
    CFTypeRef v2 = 0LL;
    goto LABEL_9;
  }

  uint64_t v5 = (const __CFDictionary *)sub_1000CD3A0(*(void *)(a1 + 48), v2, (__CFArray *)&cfa);
  if (sub_1001AF49C(v5))
  {
    if (*(_BYTE *)(a1 + 64)) {
      *((_BYTE *)v5 + 4_Block_object_dispose(va, 8) = 1;
    }
    BOOL v6 = sub_1000D3A8C( *(void *)(a1 + 48),  (uint64_t)v5,  0,  *(void *)(*(void *)(a1 + 32) + 8LL) + 24LL,  *(void *)(*(void *)(a1 + 40) + 8LL) + 24LL,  &cfa);
  }

  else
  {
    BOOL v6 = 1;
  }

BOOL sub_1000D3A8C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, CFTypeRef *a6)
{
  CFTypeRef v12 = &v57;
  uint64_t v57 = 0LL;
  uint64_t v58 = &v57;
  uint64_t v59 = 0x2020000000LL;
  char v60 = -86;
  if (*(_BYTE *)(a2 + 48))
  {
    char v13 = sub_1001AE92C(a2, a6);
    CFTypeRef v12 = v58;
  }

  else
  {
    char v13 = 1;
  }

  char v60 = v13;
  if (!*((_BYTE *)v12 + 24))
  {
    BOOL v25 = 0LL;
    goto LABEL_50;
  }

  if (!*(void *)(a2 + 112))
  {
    BOOL v25 = 1LL;
    goto LABEL_50;
  }

  uint64_t v53 = 0LL;
  CFIndex v54 = &v53;
  uint64_t v55 = 0x2020000000LL;
  CFTypeRef v56 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  CFTypeRef v56 = sub_1000D08EC(a1, a2, (uint64_t)a6);
  uint64_t v49 = 0LL;
  uint64_t v50 = &v49;
  uint64_t v51 = 0x2020000000LL;
  CFTypeID v52 = (const void *)0xAAAAAAAAAAAAAAAALL;
  CFTypeID v52 = sub_1001AFDF0(a2);
  uint64_t v45 = 0LL;
  int v46 = &v45;
  uint64_t v47 = 0x2020000000LL;
  char v48 = 1;
  CFTypeRef v43 = 0LL;
  CFTypeRef cf = 0LL;
  uint64_t v14 = *(void *)(a2 + 16);
  char v15 = sub_1001AAED8(v50[3], v54[3], (uint64_t *)&v43, &cf, a6);
  if (*((_BYTE *)v58 + 24)) {
    char v16 = v15;
  }
  else {
    char v16 = 0;
  }
  *((_BYTE *)v58 + 24) = v16;
  CFTypeRef v17 = sub_10001267C("engine");
  uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    int v39 = a3;
    uint64_t v19 = v14;
    uint64_t v40 = a4;
    uint64_t v41 = a5;
    uint64_t v20 = *(const char **)(a1 + 24);
    if (v54[3]) {
      __int16 v21 = "L";
    }
    else {
      __int16 v21 = "l";
    }
    if (v50[3]) {
      id v22 = "P";
    }
    else {
      id v22 = "0";
    }
    if (cf) {
      int v23 = "O";
    }
    else {
      int v23 = "0";
    }
    if (cf) {
      unint64_t v24 = CFDataGetLength(*((CFDataRef *)cf + 3)) / 0x14uLL;
    }
    else {
      unint64_t v24 = 0LL;
    }
    unint64_t v26 = (unint64_t)v43;
    if (v43) {
      unint64_t v26 = CFDataGetLength(*((CFDataRef *)v43 + 3)) / 0x14uLL;
    }
    *(_DWORD *)__int128 buf = 138413826;
    int v62 = v20;
    __int16 v63 = 2112;
    uint64_t v64 = v19;
    __int16 v65 = 2080;
    uint64_t v66 = v21;
    __int16 v67 = 2080;
    int v68 = v22;
    uint64_t v14 = v19;
    __int16 v69 = 2080;
    int v70 = v23;
    __int16 v71 = 2048;
    unint64_t v72 = v24;
    __int16 v73 = 2048;
    unint64_t v74 = v26;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%@:%@: Send state for peer [%s%s%s] O: %zu, M: %zu",  buf,  0x48u);
    a4 = v40;
    a5 = v41;
    a3 = v39;
  }

  if ((!v43 || (unint64_t)CFDataGetLength(*((CFDataRef *)v43 + 3)) <= 0x13)
    && (!cf || (unint64_t)CFDataGetLength(*((CFDataRef *)cf + 3)) <= 0x13))
  {
    if (!a3)
    {
      CFArrayRef v31 = sub_10001267C("engine");
      unint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v33 = *(const char **)(a1 + 24);
        *(_DWORD *)__int128 buf = 138412546;
        int v62 = v33;
        __int16 v63 = 2112;
        uint64_t v64 = a2;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "%@:%@ backup still done", buf, 0x16u);
      }

      goto LABEL_43;
    }

    *((_BYTE *)v46 + 24) = 0;
  }

  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472LL;
  v42[2] = sub_1000D3FD0;
  v42[3] = &unk_100285BB0;
  v42[8] = v43;
  v42[9] = a1;
  v42[10] = v14;
  v42[11] = a6;
  v42[4] = &v57;
  v42[5] = &v53;
  v42[12] = cf;
  v42[13] = a2;
  v42[6] = &v49;
  v42[7] = &v45;
  v42[14] = a4;
  v42[15] = a5;
  BOOL v27 = sub_1001AF718(a2, a6, v42);
  if (*((_BYTE *)v58 + 24)) {
    BOOL v28 = v27;
  }
  else {
    BOOL v28 = 0;
  }
  *((_BYTE *)v58 + 24) = v28;
  if (*((_BYTE *)v46 + 24))
  {
    int v29 = sub_10001267C("backup");
    CFIndex v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      int v62 = "writing changes to backup";
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "posting notification to CloudServices: %s",  buf,  0xCu);
    }

    notify_post("com.apple.security.itembackup");
  }

void sub_1000D3F70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39)
{
}

void sub_1000D3FD0(uint64_t a1, FILE *a2, int a3)
{
  uint64_t v60 = 0LL;
  int v61 = &v60;
  uint64_t v62 = 0x4010000000LL;
  __int16 v63 = "";
  __int128 v64 = 0u;
  __int128 v65 = 0u;
  uint64_t v54 = 0LL;
  uint64_t v55 = &v54;
  uint64_t v56 = 0x4010000000LL;
  uint64_t v57 = "";
  __int128 v58 = 0u;
  __int128 v59 = 0u;
  uint64_t v6 = *(void *)(a1 + 64);
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 3221225472LL;
  v51[2] = sub_1000D46C4;
  v51[3] = &unk_100285B60;
  __int128 v52 = *(_OWORD *)(a1 + 72);
  uint64_t v53 = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 32);
  v51[4] = &v60;
  v51[5] = v7;
  v51[6] = a2;
  sub_1001AACD0(v6, (uint64_t)v51);
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    uint64_t v8 = *(void *)(a1 + 96);
    if (v8)
    {
      if ((unint64_t)CFDataGetLength(*(CFDataRef *)(v8 + 24)) >= 0x14)
      {
        CFMutableSetRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
        uint64_t v10 = *(void *)(a1 + 88);
        cf[1] = _NSConcreteStackBlock;
        cf[2] = (CFTypeRef)3221225472LL;
        __int128 v11 = *(_OWORD *)(a1 + 72);
        uint64_t v12 = *(void *)(*(void *)(a1 + 72) + 16LL);
        cf[3] = sub_1000D47B0;
        cf[4] = &unk_100285B88;
        __int128 v47 = v11;
        int v50 = a3;
        char v48 = Mutable;
        uint64_t v49 = v10;
        CFTypeRef cf[5] = *(CFTypeRef *)(a1 + 32);
        cf[6] = &v54;
        cf[7] = a2;
        char v13 = (*(uint64_t (**)(void))(v12 + 32))();
        uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 8LL);
        if (*(_BYTE *)(v14 + 24)) {
          char v15 = v13;
        }
        else {
          char v15 = 0;
        }
        *(_BYTE *)(v14 + 24) = v15;
        if (CFArrayGetCount(Mutable))
        {
          cf[0] = 0LL;
          if ((sub_1000D0BC4(*(void *)(a1 + 72), 0LL, 2LL, 0LL, Mutable, cf) & 1) == 0)
          {
            char v16 = sub_10001267C("SecError");
            CFTypeRef v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138412546;
              __int16 v67 = Mutable;
              __int16 v68 = 2112;
              CFTypeRef v69 = cf[0];
              _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "SOSEngineUpdateChanges_locked: %@ failed: %@",  buf,  0x16u);
            }
          }

          if (cf[0]) {
            CFRelease(cf[0]);
          }
          uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8LL);
          CFTypeRef v19 = sub_1000D08EC(*(void *)(a1 + 72), *(void *)(a1 + 104), *(void *)(a1 + 88));
          uint64_t v20 = *(const void **)(v18 + 24);
          if (v20) {
            CFRelease(v20);
          }
          *(void *)(v18 + 24) = v19;
          *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = sub_1001AFDF0(*(void *)(a1 + 104));
        }

        if (Mutable) {
          CFRelease(Mutable);
        }
      }
    }
  }

  if (v55[5] || (unint64_t v24 = v61, *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) && v61[5])
  {
    **(_BYTE **)(a1 + 112) = 1;
    __int16 v21 = (const void *)sub_1001AB230((uint64_t)(v61 + 4), *(CFTypeRef **)(a1 + 88));
    id v22 = (const void *)sub_1001AB230((uint64_t)(v55 + 4), *(CFTypeRef **)(a1 + 88));
    int v23 = (const void *)sub_1001AB278( *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL),  (uint64_t)v21,  (uint64_t)v22,  *(CFTypeRef **)(a1 + 88));
    if (v21) {
      CFRelease(v21);
    }
    if (v22) {
      CFRelease(v22);
    }
    sub_1001AFD74((__CFArray **)(*(void *)(a1 + 104) + 80LL), v23);
    if (v23) {
      CFRelease(v23);
    }
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = sub_1001AFDF0(*(void *)(a1 + 104));
    unint64_t v24 = v61;
  }

  free((void *)v24[4]);
  void v24[4] = 0LL;
  void v24[5] = 0LL;
  *((_BYTE *)v24 + 56) = 0;
  v24[6] = 0LL;
  BOOL v25 = v55;
  free((void *)v55[4]);
  void v25[4] = 0LL;
  void v25[5] = 0LL;
  *((_BYTE *)v25 + 56) = 0;
  v25[6] = 0LL;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    unint64_t v26 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    BOOL v27 = *(const void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    if (v26 && v27)
    {
      if (CFEqual(v26, v27)) {
        goto LABEL_31;
      }
    }

    else if (v26 == v27)
    {
LABEL_31:
      cf[0] = 0LL;
      if (sub_1001A57DC(a2, 899LL, (__CFString **)cf))
      {
        *(_BYTE *)(*(void *)(a1 + 104) + 49LL) = 1;
        **(_BYTE **)(a1 + 112) = 1;
        BOOL v28 = sub_10001267C("backup");
        int v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          CFIndex v30 = *(const void **)(a1 + 80);
          CFArrayRef v31 = *(const __CFArray **)(*(void *)(a1 + 72) + 24LL);
          if (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL)) {
            unint64_t v32 = " notifying sbd";
          }
          else {
            unint64_t v32 = "";
          }
          *(_DWORD *)__int128 buf = 138412802;
          __int16 v67 = v31;
          __int16 v68 = 2112;
          CFTypeRef v69 = v30;
          __int16 v70 = 2080;
          CFTypeRef v71 = v32;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%@:%@ backup done%s", buf, 0x20u);
        }
      }

      else
      {
        uint64_t v39 = sub_10001267C("SecWarning");
        uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v41 = *(const void **)(a1 + 80);
          CFTypeRef v42 = *(const __CFArray **)(*(void *)(a1 + 72) + 24LL);
          *(_DWORD *)__int128 buf = 138412802;
          __int16 v67 = v42;
          __int16 v68 = 2112;
          CFTypeRef v69 = v41;
          __int16 v70 = 2112;
          CFTypeRef v71 = cf[0];
          _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "%@:%@ in SOSBackupPeerWriteCompleteMarker: %@",  buf,  0x20u);
        }

        *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
        **(_BYTE **)(a1 + 12syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 1;
        if (cf[0])
        {
          CFTypeRef v43 = *(CFTypeRef **)(a1 + 88);
          if (v43 && !*v43) {
            *CFTypeRef v43 = cf[0];
          }
          else {
            CFRelease(cf[0]);
          }
        }
      }

      goto LABEL_59;
    }
  }

  BOOL v33 = sub_10001267C("backup");
  char v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    CFTypeRef v35 = *(const void **)(a1 + 80);
    CFTypeRef v36 = *(const __CFArray **)(*(void *)(a1 + 72) + 24LL);
    uint64_t v37 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    if (v37) {
      unint64_t v38 = CFDataGetLength(*(CFDataRef *)(v37 + 24)) / 0x14uLL;
    }
    else {
      unint64_t v38 = 0LL;
    }
    unint64_t v44 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    if (v44) {
      unint64_t v44 = CFDataGetLength(*(CFDataRef *)(v44 + 24)) / 0x14uLL;
    }
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL)) {
      uint64_t v45 = " notifying sbd";
    }
    else {
      uint64_t v45 = "";
    }
    *(_DWORD *)__int128 buf = 138413314;
    __int16 v67 = v36;
    __int16 v68 = 2112;
    CFTypeRef v69 = v35;
    __int16 v70 = 2048;
    CFTypeRef v71 = (CFTypeRef)v38;
    __int16 v72 = 2048;
    unint64_t v73 = v44;
    __int16 v74 = 2080;
    id v75 = v45;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "%@:%@ backup incomplete [%zu/%zu]%s",  buf,  0x34u);
  }

  **(_BYTE **)(a1 + 12syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 1;
LABEL_59:
  _Block_object_dispose(&v54, 8);
  _Block_object_dispose(&v60, 8);
}

void sub_1000D4670( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

void sub_1000D46C4(uint64_t a1, const __CFData *a2, _BYTE *a3)
{
  CFTypeRef cf = 0LL;
  if (ftello(*(FILE **)(a1 + 48)) < 64001)
  {
    if (sub_1001A566C(*(FILE **)(a1 + 48), a2, (__CFString **)&cf))
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
      BytePtr = (__int128 *)CFDataGetBytePtr(a2);
      sub_1001A9ECC((char **)(v6 + 32), BytePtr);
      *(_BYTE *)(v6 + 56) = 1;
    }

    else
    {
      sub_1000D4AEC( *(void *)(a1 + 56),  *(void *)(a1 + 64),  a2,  0LL,  (uint64_t)"in SOSPeerWriteDelete",  (const __CFString *)cf);
      if (cf)
      {
        uint64_t v8 = *(CFTypeRef **)(a1 + 72);
        if (v8 && !*v8) {
          *uint64_t v8 = cf;
        }
        else {
          CFRelease(cf);
        }
      }

      *a3 = 1;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    }
  }

  else
  {
    *a3 = 1;
  }

void sub_1000D47B0(uint64_t a1, const __CFData *a2, const void *a3, _BYTE *a4)
{
  CFTypeRef cf = 0LL;
  if (ftello(*(FILE **)(a1 + 48)) >= 64001)
  {
    *a4 = 1;
    return;
  }

  uint64_t v8 = *(void *)(a1 + 56);
  if (!a3)
  {
    sub_1000D4AEC(v8, *(void *)(a1 + 64), a2, 0LL, (uint64_t)"dropping from manifest: not found in datasource", 0LL);
    __int16 v21 = *(__CFArray **)(a1 + 72);
    values = a2;
    CFArrayRef v9 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1LL, &kCFTypeArrayCallBacks);
    CFArrayAppendValue(v21, v9);
    if (!v9) {
      return;
    }
    goto LABEL_29;
  }

  CFArrayRef v9 = (CFArrayRef)(*(uint64_t (**)(const void *, void, CFTypeRef *))(*(void *)(v8 + 16) + 144LL))( a3,  *(int *)(a1 + 88),  &cf);
  if (v9)
  {
    uint64_t v10 = (const __CFData *)(*(uint64_t (**)(const void *, CFTypeRef *))(*(void *)(*(void *)(a1 + 56)
                                                                                             + 16LL)
                                                                                 + 112LL))( a3,  &cf);
    if (v10)
    {
      __int128 v11 = v10;
      if (!CFEqual(a2, v10))
      {
        sub_1000D4AEC(*(void *)(a1 + 56), *(void *)(a1 + 64), a2, v11, (uint64_t)"", 0LL);
        uint64_t v12 = *(__CFArray **)(a1 + 72);
        values = a2;
        CFArrayRef v13 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1LL, &kCFTypeArrayCallBacks);
        CFArrayAppendValue(v12, v13);
        if (v13) {
          CFRelease(v13);
        }
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 72), a3);
      }

      if (sub_1001A5740(*(FILE **)(a1 + 48), v9, (__CFString **)&cf))
      {
        uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 8LL);
        BytePtr = (__int128 *)CFDataGetBytePtr(v11);
        sub_1001A9ECC((char **)(v14 + 32), BytePtr);
        *(_BYTE *)(v14 + 56) = 1;
      }

      else
      {
        sub_1000D4AEC( *(void *)(a1 + 56),  *(void *)(a1 + 64),  a2,  0LL,  (uint64_t)"in SOSPeerWriteAdd",  (const __CFString *)cf);
        *a4 = 1;
        if (cf)
        {
          int v23 = *(CFTypeRef **)(a1 + 80);
          if (v23 && !*v23) {
            CFTypeRef *v23 = cf;
          }
          else {
            CFRelease(cf);
          }
        }

        *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
      }

      CFRelease(v9);
      unint64_t v24 = v11;
      goto LABEL_33;
    }
  }

  int OSStatus = SecErrorGetOSStatus(cf);
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 64);
  if (OSStatus == -26275)
  {
    sub_1000D4AEC(v17, v18, a2, 0LL, (uint64_t)"dropping from manifest", (const __CFString *)cf);
    CFTypeRef v19 = *(__CFArray **)(a1 + 72);
    values = a2;
    CFArrayRef v20 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1LL, &kCFTypeArrayCallBacks);
    CFArrayAppendValue(v19, v20);
    if (v20) {
      CFRelease(v20);
    }
    CFRelease(cf);
    if (!v9) {
      return;
    }
LABEL_29:
    unint64_t v24 = v9;
LABEL_33:
    CFRelease(v24);
    return;
  }

  sub_1000D4AEC(v17, v18, a2, 0LL, (uint64_t)"in SOSDataSourceForEachObject", (const __CFString *)cf);
  *a4 = 1;
  if (cf)
  {
    id v22 = *(CFTypeRef **)(a1 + 80);
    if (v22 && !*v22) {
      *id v22 = cf;
    }
    else {
      CFRelease(cf);
    }
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
  if (v9) {
    goto LABEL_29;
  }
}

void sub_1000D4AEC( uint64_t a1, uint64_t a2, CFDataRef theData, const __CFData *a4, uint64_t a5, const __CFString *a6)
{
  BytePtr = CFDataGetBytePtr(theData);
  if (a4)
  {
    uint64_t v12 = CFDataGetBytePtr(a4);
    CFArrayRef v13 = sub_10001267C("SecWarning");
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 24);
      int v16 = *BytePtr;
      int v17 = BytePtr[1];
      int v18 = BytePtr[2];
      int v19 = BytePtr[3];
      int v20 = *v12;
      int v21 = v12[1];
      int v22 = v12[2];
      int v23 = v12[3];
      int v34 = 138414594;
      uint64_t v35 = v15;
      __int16 v36 = 2112;
      uint64_t v37 = a2;
      __int16 v38 = 1024;
      int v39 = v16;
      __int16 v40 = 1024;
      int v41 = v17;
      __int16 v42 = 1024;
      int v43 = v18;
      __int16 v44 = 1024;
      int v45 = v19;
      __int16 v46 = 1024;
      *(_DWORD *)__int128 v47 = v20;
      *(_WORD *)&v47[4] = 1024;
      *(_DWORD *)&void v47[6] = v21;
      LOWORD(v4_Block_object_dispose((const void *)(v33 - 208), 8) = 1024;
      *(_DWORD *)((char *)&v48 + 2) = v22;
      HIWORD(v4_Block_object_dispose((const void *)(v33 - 208), 8) = 1024;
      int v49 = v23;
      unint64_t v24 = "%@:%@ object %02X%02X%02X%02X is really %02X%02X%02X%02X dropping from local manifest";
      BOOL v25 = v14;
      uint32_t v26 = 70;
LABEL_8:
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, v24, (uint8_t *)&v34, v26);
    }
  }

  else
  {
    BOOL v27 = sub_10001267C("SecWarning");
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v28 = *(void *)(a1 + 24);
      int v29 = *BytePtr;
      int v30 = BytePtr[1];
      int v31 = BytePtr[2];
      unint64_t v32 = &stru_100294B48;
      int v33 = BytePtr[3];
      if (a6) {
        unint64_t v32 = a6;
      }
      int v34 = 138414082;
      uint64_t v35 = v28;
      __int16 v36 = 2112;
      uint64_t v37 = a2;
      __int16 v38 = 1024;
      int v39 = v29;
      __int16 v40 = 1024;
      int v41 = v30;
      __int16 v42 = 1024;
      int v43 = v31;
      __int16 v44 = 1024;
      int v45 = v33;
      __int16 v46 = 2080;
      *(void *)__int128 v47 = a5;
      *(_WORD *)&v47[8] = 2112;
      char v48 = v32;
      unint64_t v24 = "%@:%@ object %02X%02X%02X%02X %s: %@";
      BOOL v25 = v14;
      uint32_t v26 = 66;
      goto LABEL_8;
    }
  }
}

void sub_1000D4D00(uint64_t a1)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (*(void *)(v2 + 24))
    {
      if (CFArrayGetCount(*(CFArrayRef *)(v2 + 80)))
      {
        uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 80LL);
        activity_block[0] = _NSConcreteStackBlock;
        activity_block[1] = 3221225472LL;
        activity_block[2] = sub_1001C3D44;
        activity_block[3] = &unk_1002935A8;
        activity_void block[4] = v3;
        _os_activity_initiate( (void *)&_mh_execute_header,  "CloudCircle RequestSyncWithPeersList",  OS_ACTIVITY_FLAG_DEFAULT,  activity_block);
      }
    }
  }

uint64_t sub_1000D4DC0(void *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result = sub_1000CDB9C(a1[6], a2, (CFTypeRef *)(*(void *)(a1[5] + 8LL) + 24LL));
  *a3 = result;
  *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = result;
  return result;
}

CFTypeRef sub_1000D4E04(void *a1)
{
  uint64_t v2 = a1[5];
  V0ViewSet = (const void *)SOSViewsGetV0ViewSet();
  CFTypeRef result = sub_1000D0948(v2, V0ViewSet, a1[6]);
  *(void *)(*(void *)(a1[4] + 8LL) + 24LL) = result;
  return result;
}

void sub_1000D4E44(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 16);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  _OWORD v9[2] = sub_1000D4ED8;
  v9[3] = &unk_100285BD8;
  id v10 = v5;
  uint64_t v11 = a1;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, void, void *))(v6 + 80);
  id v8 = v5;
  v7(v6, a2, 0LL, v9);
}

void sub_1000D4ED8(uint64_t a1, uint64_t a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1000D4F44;
  v4[3] = &unk_100285740;
  uint64_t v3 = *(void *)(a1 + 40);
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = a2;
  dispatch_sync(*(dispatch_queue_t *)(v3 + 112), v4);
}

uint64_t sub_1000D4F44(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(a1 + 40));
}

uint64_t sub_1000D4F54(uint64_t a1)
{
  uint64_t result = sub_1000D0BC4( *(void *)(a1 + 40),  0LL,  2LL,  *(void *)(a1 + 48),  *(const __CFArray **)(a1 + 56),  *(CFTypeRef **)(a1 + 64));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

BOOL sub_1000D4F94(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  if (-[OTSOSActualAdapter sosEnabled]_0((uint64_t)v7, v8))
  {
    uint64_t v17 = 0LL;
    int v18 = &v17;
    uint64_t v19 = 0x2020000000LL;
    char v20 = 1;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_1000D509C;
    v11[3] = &unk_1002858D0;
    uint64_t v14 = a1;
    uint64_t v15 = a2;
    uint64_t v16 = a3;
    id v12 = v7;
    CFArrayRef v13 = &v17;
    sub_1000D4E44(a1, a3, v11);
    BOOL v9 = *((_BYTE *)v18 + 24) != 0;

    _Block_object_dispose(&v17, 8);
  }

  else
  {
    SOSCCSetSOSDisabledError(a3);
    BOOL v9 = 0LL;
  }

  return v9;
}

void sub_1000D5084( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1000D509C(uint64_t a1)
{
  uint64_t v2 = sub_1000CD3A0(*(void *)(a1 + 48), *(const void **)(a1 + 56), *(__CFArray **)(a1 + 64));
  if (v2)
  {
    uint64_t v3 = v2;
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
    CFRelease(v3);
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
  }

void sub_1000D510C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v20 = 0;
  id v5 = *(const __CFData **)(a3 + 112);
  if (v5)
  {
    uint64_t v6 = sub_10001A314(v5);
    id v7 = *(__CFData **)(a1 + 40);
    BOOL v8 = v6 == 0LL;
    if (v6) {
      BOOL v9 = v7 == 0LL;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      int v10 = CFEqual(v7, v6);
      BOOL v8 = 0;
      uint64_t v11 = v6;
      if (v10) {
        goto LABEL_7;
      }
LABEL_11:
      id v12 = 0LL;
      *(_BYTE *)(a3 + 4_Block_object_dispose(va, 8) = 1;
      uint64_t v6 = v11;
      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
    id v7 = *(__CFData **)(a1 + 40);
    BOOL v8 = 1;
  }

  uint64_t v11 = v6;
  uint64_t v6 = v7;
  if (v7 != v11) {
    goto LABEL_11;
  }
LABEL_7:
  id v12 = (const void *)sub_1001AAD88(*(const __CFData **)(a1 + 48), *(CFTypeRef **)(a1 + 56));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v12 != 0LL;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    sub_1001AFE34(a3, v12);
    sub_1001AFD74((__CFArray **)(a3 + 80), v12);
  }

void sub_1000D5394(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D53AC(uint64_t a1, uint64_t a2)
{
  if (-[OTSOSActualAdapter sosEnabled]_0(a1, a2))
  {
    uint64_t v8 = 0LL;
    BOOL v9 = &v8;
    uint64_t v10 = 0x2020000000LL;
    CFMutableArrayRef Mutable = (CFMutableArrayRef)0xAAAAAAAAAAAAAAAALL;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    _DWORD v7[2] = sub_1000D54BC;
    v7[3] = &unk_100285948;
    void v7[4] = &v8;
    CFTypeID v4 = v7;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000D54D0;
    block[3] = &unk_100285740;
    id v13 = v4;
    uint64_t v14 = a1;
    dispatch_sync(*(dispatch_queue_t *)(a1 + 112), block);

    uint64_t v5 = v9[3];
    _Block_object_dispose(&v8, 8);
  }

  else
  {
    SOSCCSetSOSDisabledError(a2);
    return 0LL;
  }

  return v5;
}

void sub_1000D54BC(uint64_t a1, uint64_t a2)
{
}

void sub_1000D54D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = *(id *)(a1 + 32);
  uint64_t v4 = v1;
  id v5 = objc_retainBlock(v2);
  Copy = CFDictionaryCreateCopy(0LL, *(CFDictionaryRef *)(v1 + 56));
  CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)sub_1000D5550, &v4);
  CFRelease(Copy);
}

void sub_1000D553C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_1000D5550(const void *a1, const void *a2, uint64_t *a3)
{
  if (sub_1001AF49C((const __CFDictionary *)a2))
  {
    uint64_t v6 = sub_1000CE668(*a3, a1, a2, 0LL);
    if (v6)
    {
      id v7 = v6;
      (*(void (**)(void))(a3[1] + 16))();
      CFRelease(v7);
    }
  }

void *sub_1000D55C8(void *result, uint64_t a2)
{
  id v2 = result;
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3) {
    uint64_t result = CFRetain(*(CFTypeRef *)(a2 + 16));
  }
  *(void *)(*(void *)(v2[4] + 8LL) + 24LL) = v3;
  return result;
}

void sub_1000D5600(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v1 = *(const void **)(a1 + 48);
  id v3 = *(id *)(a1 + 32);
  uint64_t v7 = v2;
  id v8 = objc_retainBlock(v3);
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  Copy = CFDictionaryCreateCopy(0LL, *(CFDictionaryRef *)(v2 + 56));
  Boolean Value = CFDictionaryGetValue(Copy, v1);
  if (Value)
  {
    CFDictionaryAddValue(Mutable, v1, Value);
    CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)sub_1000D5550, &v7);
  }

  CFRelease(Copy);
  CFRelease(Mutable);
}

void sub_1000D56D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000D56F4(uint64_t a1, uint64_t a2)
{
  if (-[OTSOSActualAdapter sosEnabled]_0(a1, a2))
  {
    uint64_t v7 = 0LL;
    id v8 = &v7;
    uint64_t v9 = 0x2020000000LL;
    uint64_t v10 = 0LL;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    void v6[2] = sub_1000D57C0;
    v6[3] = &unk_1002858A8;
    void v6[4] = &v7;
    void v6[5] = a1;
    void v6[6] = a2;
    sub_1000D4E44(a1, a2, v6);
    uint64_t v4 = v8[3];
    _Block_object_dispose(&v7, 8);
  }

  else
  {
    SOSCCSetSOSDisabledError(a2);
    return 0LL;
  }

  return v4;
}

void sub_1000D57A8(_Unwind_Exception *a1)
{
}

void sub_1000D57C0(uint64_t a1)
{
  __int128 v4 = *(_OWORD *)(a1 + 40);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  id v3 = *(const __CFDictionary **)(v4 + 64);
  context[0] = _NSConcreteStackBlock;
  context[1] = 3221225472LL;
  context[2] = sub_1000D58AC;
  context[3] = &unk_1002859A8;
  __int128 v7 = v4;
  CFMutableArrayRef v8 = Mutable;
  CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)sub_1000CDB84, context);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000D5914;
  v5[3] = &unk_100285C18;
  void v5[4] = v4;
  void v5[5] = Mutable;
  sub_1000CE2B4(v4, v5);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = Mutable;
}

void sub_1000D58AC(uint64_t a1, const void *a2)
{
  __int128 v4 = (CFDataRef *)sub_1000D0948(*(void *)(a1 + 32), a2, *(void *)(a1 + 40));
  sub_1000D5998(*(__CFArray **)(a1 + 48), 0LL, v4, a2);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1000D5914(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(const __CFDictionary **)(*(void *)(a1 + 32) + 96LL);
  if (v4)
  {
    Boolean Value = (const __CFString *)CFDictionaryGetValue(v4, *(const void **)(a2 + 16));
    if (!Value)
    {
      CFStringRef v6 = 0LL;
      goto LABEL_6;
    }
  }

  else
  {
    Boolean Value = @"Coders not loaded.";
  }

  CFStringRef v6 = CFCopyDescription(Value);
LABEL_6:
  sub_1000D5998(*(__CFArray **)(a1 + 40), *(void *)(a2 + 16), *(CFDataRef **)(a2 + 72), *(const void **)(a2 + 24));
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1000D5998(__CFArray *a1, uint64_t a2, CFDataRef *a3, const void *a4)
{
  CFMutableArrayRef v8 = kCFAllocatorDefault;
  if (a3) {
    unint64_t v9 = CFDataGetLength(a3[3]) / 0x14uLL;
  }
  else {
    unint64_t v9 = 0LL;
  }
  unint64_t valuePtr = v9;
  CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
  sub_1001AABD0((__CFData *)a3);
  key = (void *)kSOSCCEngineStatePeerIDKey;
  if (a4)
  {
    CFGetTypeID(a4);
    CFSetGetTypeID();
    CFMutableArrayRef v8 = kCFAllocatorDefault;
  }

  uint64_t v19 = sub_1000D5B04(v8, v11, v12, v13, v14, v15, v16, v17, key, a2);
  if (v10) {
    CFRelease(v10);
  }
  CFArrayAppendValue(a1, v19);
  if (v19) {
    CFRelease(v19);
  }
}

__CFDictionary *sub_1000D5B04( const __CFAllocator *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *key, uint64_t a10)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(a1, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  int v15 = (const void **)&a10;
  int v11 = key;
  if (key)
  {
    do
    {
      int v12 = v15;
      int v16 = v15 + 1;
      if (*v12) {
        CFDictionarySetValue(Mutable, v11, *v12);
      }
      int v13 = v16;
      int v15 = v16 + 1;
      int v11 = *v13;
    }

    while (*v13);
  }

  return Mutable;
}

void sub_1000D5B88(id a1, __CFString *a2)
{
  id v3 = sub_10001267C("engineLogState");
  __int128 v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    CFStringRef v6 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&v5, 0xCu);
  }
}

void sub_1000DA60C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_1000DB3B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v11 = (id)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"count(rowid)"]);
  __int128 v4 = (void *)objc_claimAutoreleasedReturnValue([v11 asNSNumberInteger]);
  int v5 = *(void **)(a1 + 32);
  CFStringRef v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"state"]);
  __int128 v7 = (void *)objc_claimAutoreleasedReturnValue([v6 asString]);
  CFMutableArrayRef v8 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"keyclass"]);

  unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 asString]);
  CFNumberRef v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@-%@", v7, v9));
  [v5 setObject:v4 forKeyedSubscript:v10];
}

uint64_t sub_1000DB4C0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_1000DB4D0(uint64_t a1)
{
}

void sub_1000DB4D8(uint64_t a1, void *a2)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:@"count(rowid)"]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v6 asNSNumberInteger]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  int v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v3;
}

void sub_1000DBBA4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, id a32)
{
}

void sub_1000DC024(_Unwind_Exception *a1)
{
}

void sub_1000DC190(_Unwind_Exception *a1)
{
}

void sub_1000DC244(_Unwind_Exception *a1)
{
}

void sub_1000DC2C8(_Unwind_Exception *a1)
{
}

void sub_1000DC510( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

LABEL_58:
    uint64_t v53 = sub_1000AA6AC(@"handleKeychainEventDbConnection", 0LL);
    int v30 = (id)objc_claimAutoreleasedReturnValue(v53);
    if (os_log_type_enabled((os_log_t)v30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v30,  OS_LOG_TYPE_ERROR,  "ckks view is nil! returning.",  buf,  2u);
    }

    goto LABEL_63;
  }

  int v14 = sub_1000AA6AC(@"handleKeychainEventDbConnection", 0LL);
  int v13 = (NSUUID *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v13,  OS_LOG_TYPE_ERROR,  "both added and deleted SecDbItemRefs are nil, returning",  buf,  2u);
  }

  v6[14] = self->_timestampResponseStart;
  *((_DWORD *)v6 + 70) |= 0x2000u;
  if ((*(_DWORD *)&self->_has & 0x1000) != 0)
  {
LABEL_27:
    v6[13] = self->_timestampResponseEnd;
    *((_DWORD *)v6 + 70) |= 0x1000u;
  }

LABEL_69:
}

          uint64_t v35 = 0;
          goto LABEL_70;
        }
      }

      if (*(void *)(v24 + 88))
      {
        int v30 = @"use item list not supported";
        goto LABEL_61;
      }

      int v34 = *(_DWORD *)(v24 + 48);
      if ((v34 & 1) != 0)
      {
        int v30 = @"return data not supported by update";
        goto LABEL_61;
      }

      if ((v34 & 2) != 0)
      {
        int v30 = @"return attributes not supported by update";
        goto LABEL_61;
      }

      if ((v34 & 4) != 0)
      {
        int v30 = @"return ref not supported by update";
        goto LABEL_61;
      }

      if ((v34 & 8) != 0)
      {
        int v30 = @"return persistent ref not supported by update";
        goto LABEL_61;
      }

      if (!*(_BYTE *)(v24 + 116) || !CFDictionaryContainsKey(*(CFDictionaryRef *)(v24 + 8), kSecAttrSharingGroup))
      {
        __int16 v36 = (const __CFString *)CFDictionaryGetValue(a2, kSecAttrAccessGroup);
        if (!v36) {
          goto LABEL_63;
        }
        uint64_t v37 = v36;
        if ((sub_10010DD28((const __CFArray *)v9, v36, a3) & 1) != 0) {
          goto LABEL_63;
        }
        __int16 v38 = (os_log_s *)sub_10001267C("SecError");
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          __int16 v44 = v37;
          _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Cannot update keychain item to access group %@",  buf,  0xCu);
        }

        if (sub_1000194E0( -34018,  a4,  @"Client explicitly specifies access group %@ but is only entitled for %@",  v37,  v9,  v39,  ValueAtIndex,  v41))
        {
          goto LABEL_63;
        }

        goto LABEL_69;
      }

      int v30 = @"can't update shared items without Keychain Sharing client entitlement";
LABEL_56:
      unint64_t v32 = -34018;
      goto LABEL_62;
    }

void sub_1000DE694( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000DEA64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000DF238( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
}

void sub_1000DF698( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
}

void sub_1000E0F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sanitizeErrorDomain:a2]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_1000E0FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sanitizeErrorDomain:a2]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_1000E0FFC(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  unint64_t v9 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  id v10 = a4;
  id v11 = a3;
  id v12 = a2;
  id v13 = (id)objc_claimAutoreleasedReturnValue([v9 sanitizeErrorDomain:a5]);
  (*(void (**)(uint64_t, id, id, id, id))(v8 + 16))(v8, v12, v11, v10, v13);
}

void sub_1000E1094(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sanitizeErrorDomain:a2]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

id sub_1000E10DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setObject:a3 forKeyedSubscript:a2];
}

void sub_1000E10E8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained allDependentsSuccessful];
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
  uint64_t v4 = CKXPCSuitableError(v3);
  int v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v5);
}

void sub_1000E1160(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained allDependentsSuccessful];
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
  uint64_t v4 = CKXPCSuitableError(v3);
  int v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v5);
}

void sub_1000E11DC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = sub_1000AA6AC(@"ckks", 0LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
    int v10 = 138412290;
    id v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Ending rsync-local rpc with %@",  (uint8_t *)&v10,  0xCu);
  }

  uint64_t v6 = *(void *)(a1 + 32);
  __int128 v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
  uint64_t v8 = CKXPCSuitableError(v7);
  unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v9);
}

void sub_1000E12EC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = sub_1000AA6AC(@"ckks", 0LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
    int v10 = 138412290;
    id v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Ending rsync-CloudKit rpc with %@",  (uint8_t *)&v10,  0xCu);
  }

  uint64_t v6 = *(void *)(a1 + 32);
  __int128 v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
  uint64_t v8 = CKXPCSuitableError(v7);
  unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v9);
}

void sub_1000E13FC(id a1, SOSAccountTransaction *a2)
{
  CFTypeRef cf = 0LL;
  CFMutableSetRef v2 = sub_100198588(a2, (uint64_t)&cf);
  if (cf)
  {
    id v3 = sub_1000AA6AC(@"backup", 0LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      CFTypeRef v10 = cf;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Couldn't process sync with backup peers: %@",  buf,  0xCu);
    }
  }

  else
  {
    id v5 = sub_1000AA6AC(@"ckksbackup", 0LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "telling CloudServices about TLK arrival",  buf,  2u);
    }

    notify_post("com.apple.security.itembackup");
  }

  CFTypeRef v7 = cf;
  if (cf)
  {
    CFTypeRef cf = 0LL;
    CFRelease(v7);
  }
}

uint64_t sub_1000E1538(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_1000E1548(uint64_t a1)
{
}

void sub_1000E1550(uint64_t a1)
{
  id v10 = 0LL;
  CFMutableSetRef v2 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSZoneStateEntry tryFromDatabase:zoneName:error:]( &OBJC_CLASS___CKKSZoneStateEntry,  "tryFromDatabase:zoneName:error:",  &stru_100294B48,  @"all",  &v10));
  id v3 = v10;
  if (v3)
  {
    id v4 = sub_1000AA6AC(@"manager", 0LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v12 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  " couldn't load global zone state: %@",  buf,  0xCu);
    }
  }

  else
  {
    CFTypeRef v7 = (void *)objc_claimAutoreleasedReturnValue([v2 rateLimiter]);

    if (v7)
    {
      uint64_t v6 = (CKKSRateLimiter *)objc_claimAutoreleasedReturnValue([v2 rateLimiter]);
      goto LABEL_8;
    }
  }

  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___CKKSRateLimiter);
LABEL_8:
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8LL);
  unint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v6;
}

void sub_1000E1690(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("CKKS global zone state", v4);
  id v3 = (void *)qword_1002DE9E8;
  qword_1002DE9E8 = (uint64_t)v2;
}

id sub_1000E16E0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  dispatch_queue_t v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sosPeerAdapter]);
    id v33 = 0LL;
    unsigned int v4 = [v3 circleStatus:&v33];
    id v5 = v33;

    if (v5)
    {
      id v6 = sub_1000AA6AC(@"manager", 0LL);
      CFTypeRef v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v37 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  " couldn't fetch sos status for SF report: %@",  buf,  0xCu);
      }
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    if (!v4)
    {
      unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
      id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v9 setDateProperty:v10 forKey:@"lastInCircle"];
    }

    id v26 = v5;
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v4 == 0));
    [v8 setObject:v11 forKeyedSubscript:@"inCircle"];

    uint64_t v28 = v2;
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v2 accountTracker]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 currentCKAccountInfo]);
    unsigned __int8 v14 = [v13 hasValidCredentials];

    if ((v14 & 1) == 0)
    {
      int v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL, v5));
      [v8 setObject:v15 forKeyedSubscript:@"validCredentials"];
    }

    v35[0] = @"lastUnlock";
    v35[1] = @"lastInCircle";
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v35,  2LL,  v26));
    id v17 = [v16 countByEnumeratingWithState:&v29 objects:v34 count:16];
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = *(void *)v30;
      do
      {
        for (CFIndex i = 0LL; i != v18; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v30 != v19) {
            objc_enumerationMutation(v16);
          }
          uint64_t v21 = *(void *)(*((void *)&v29 + 1) + 8LL * (void)i);
          int v22 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
          int v23 = (void *)objc_claimAutoreleasedReturnValue([v22 datePropertyForKey:v21]);

          unint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  +[CKKSAnalytics fuzzyDaysSinceDate:]( &OBJC_CLASS___CKKSAnalytics,  "fuzzyDaysSinceDate:",  v23)));
          [v8 setObject:v24 forKeyedSubscript:v21];
        }

        id v18 = [v16 countByEnumeratingWithState:&v29 objects:v34 count:16];
      }

      while (v18);
    }

    dispatch_queue_t v2 = v28;
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  return v8;
}

id sub_1000E1A10(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) viewStateForName:*(void *)(a1 + 40)]);
    if (!v4)
    {
LABEL_39:

      goto LABEL_40;
    }

    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 zoneName]);
    uint64_t v7 = objc_claimAutoreleasedReturnValue([v5 dateOfLastSuccessForEvent:@"CKKSEventProcessIncomingQueueClassA" zoneName:v6]);

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
    unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 zoneName]);
    uint64_t v10 = objc_claimAutoreleasedReturnValue([v8 dateOfLastSuccessForEvent:@"CKKSEventProcessIncomingQueueClassC" zoneName:v9]);

    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v4 zoneName]);
    uint64_t v13 = objc_claimAutoreleasedReturnValue([v11 datePropertyForKey:@"lastKSR" zoneName:v12]);

    uint64_t v81 = (void *)v7;
    id v14 = +[CKKSAnalytics fuzzyDaysSinceDate:](&OBJC_CLASS___CKKSAnalytics, "fuzzyDaysSinceDate:", v7);
    id v80 = (void *)v10;
    id v15 = +[CKKSAnalytics fuzzyDaysSinceDate:](&OBJC_CLASS___CKKSAnalytics, "fuzzyDaysSinceDate:", v10);
    unsigned int v79 = (void *)v13;
    id v16 = +[CKKSAnalytics fuzzyDaysSinceDate:](&OBJC_CLASS___CKKSAnalytics, "fuzzyDaysSinceDate:", v13);
    unint64_t v76 = (unint64_t)v14;
    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v14));
    id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-daysSinceClassASync",  *(void *)(a1 + 40)));
    [v3 setValue:v17 forKey:v18];

    unint64_t v77 = (unint64_t)v15;
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v15));
    __int16 v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-daysSinceClassCSync",  *(void *)(a1 + 40)));
    [v3 setValue:v19 forKey:v20];

    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v16));
    int v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-daysSinceLastKeystateReady",  *(void *)(a1 + 40)));
    [v3 setValue:v21 forKey:v22];

    int v23 = (void *)objc_claimAutoreleasedReturnValue([v4 contextID]);
    unint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v4 zoneID]);
    id v89 = 0LL;
    uint64_t v25 = objc_claimAutoreleasedReturnValue( +[CKKSMirrorEntry countsWithContextID:zoneID:error:]( &OBJC_CLASS___CKKSMirrorEntry,  "countsWithContextID:zoneID:error:",  v23,  v24,  &v89));
    id v26 = v89;

    int v85 = v26;
    if (v26 || !v25)
    {
      id v32 = sub_1000AA6AC(@"manager", 0LL);
      __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(v32);
      if (!os_log_type_enabled((os_log_t)v30, OS_LOG_TYPE_ERROR))
      {
LABEL_12:

        id v33 = (void *)objc_claimAutoreleasedReturnValue([v4 contextID]);
        int v34 = (void *)objc_claimAutoreleasedReturnValue([v4 zoneID]);
        id v88 = 0LL;
        uint64_t v35 = objc_claimAutoreleasedReturnValue( +[CKKSTLKShareRecord countsWithContextID:zoneID:error:]( &OBJC_CLASS___CKKSTLKShareRecord,  "countsWithContextID:zoneID:error:",  v33,  v34,  &v88));
        id v36 = v88;

        int v84 = v36;
        int v86 = (void *)v35;
        if (v36 || !v35)
        {
          id v42 = sub_1000AA6AC(@"manager", 0LL);
          __int16 v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
          if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
            goto LABEL_20;
          }
          int v41 = (void *)objc_claimAutoreleasedReturnValue([v4 zoneID]);
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v91 = (uint64_t)v41;
          __int16 v92 = 2112;
          id v93 = v36;
          _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "couldn't fetch CKKSTLKShare counts for %@: %@",  buf,  0x16u);
        }

        else
        {
          id v37 = (void *)objc_claimAutoreleasedReturnValue([v4 zoneName]);
          id v38 = sub_1000AA6AC(@"metrics", v37);
          int v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);

          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412290;
            uint64_t v91 = (uint64_t)v86;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "View has %@ tlkshares", buf, 0xCu);
          }

          __int16 v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics fuzzyNumber:](&OBJC_CLASS___CKKSAnalytics, "fuzzyNumber:", v86));
          int v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  *(void *)(a1 + 40),  @"numTLKShares"));
          [v3 setObject:v40 forKeyedSubscript:v41];
        }

LABEL_20:
        int v43 = (void *)objc_claimAutoreleasedReturnValue([v4 contextID]);
        __int16 v44 = (void *)objc_claimAutoreleasedReturnValue([v4 zoneID]);
        id v87 = 0LL;
        int v45 = (void *)objc_claimAutoreleasedReturnValue( +[CKKSKey countsWithContextID:zoneID:error:]( &OBJC_CLASS___CKKSKey,  "countsWithContextID:zoneID:error:",  v43,  v44,  &v87));
        id v46 = v87;

        uint64_t v83 = v46;
        CFIndex v78 = (void *)v25;
        if (v46 || !v45)
        {
          id v52 = sub_1000AA6AC(@"manager", 0LL);
          int v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v4 zoneID]);
            *(_DWORD *)__int128 buf = 138412546;
            uint64_t v91 = (uint64_t)v53;
            __int16 v92 = 2112;
            id v93 = v83;
            _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_ERROR,  "couldn't fetch CKKSKey counts for %@: %@",  buf,  0x16u);
          }

          uint64_t v51 = v3;
        }

        else
        {
          __int128 v47 = (void *)objc_claimAutoreleasedReturnValue([v4 zoneName]);
          id v48 = sub_1000AA6AC(@"metrics", v47);
          int v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);

          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412290;
            uint64_t v91 = (uint64_t)v45;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "View has %@ sync keys", buf, 0xCu);
          }

          int v50 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  *(void *)(a1 + 40),  @"numSyncKeys"));
          [v3 setObject:v45 forKeyedSubscript:v50];
          uint64_t v51 = v3;
        }

        uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v4 viewKeyHierarchyState]);
        id v55 = [v54 isEqualToString:@"ready"];

        uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastIncomingQueueOperation]);
        uint64_t v82 = v4;
        uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue([v56 error]);

        __int128 v58 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastOutgoingQueueOperation]);
        id v75 = (void *)objc_claimAutoreleasedReturnValue([v58 error]);

        __int16 v74 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  *(void *)(a1 + 40),  @"TLKs"));
        uint64_t v59 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  *(void *)(a1 + 40),  @"inSyncA"));
        unint64_t v73 = (void *)v59;
        uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  *(void *)(a1 + 40),  @"inSyncC"));
        CFTypeRef v71 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  *(void *)(a1 + 40),  @"IQNOE"));
        __int16 v72 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  *(void *)(a1 + 40),  @"OQNOE"));
        int v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v55));
        [v51 setObject:v61 forKeyedSubscript:v74];

        if (v76 < 7) {
          unsigned int v62 = v55;
        }
        else {
          unsigned int v62 = 0;
        }
        __int16 v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v76 < 7));
        [v51 setObject:v63 forKeyedSubscript:v59];

        if (v77 >= 7) {
          unsigned int v62 = 0;
        }
        __int128 v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v77 < 7));
        [v51 setObject:v64 forKeyedSubscript:v60];

        unsigned int v4 = v82;
        if (v57) {
          unsigned int v62 = 0;
        }
        __int128 v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v57 == 0LL));
        [v51 setObject:v65 forKeyedSubscript:v71];

        if (v75) {
          uint64_t v66 = 0LL;
        }
        else {
          uint64_t v66 = v62;
        }
        __int16 v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v75 == 0LL));
        [v51 setObject:v67 forKeyedSubscript:v72];

        __int16 v68 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  *(void *)(a1 + 40),  @"inSync"));
        CFTypeRef v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v66));
        [v51 setObject:v69 forKeyedSubscript:v68];

        id v3 = v51;
        goto LABEL_39;
      }

      __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v4 zoneID]);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v91 = (uint64_t)v31;
      __int16 v92 = 2112;
      id v93 = v85;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v30,  OS_LOG_TYPE_ERROR,  "couldn't fetch CKMirror counts for %@: %@",  buf,  0x16u);
    }

    else
    {
      BOOL v27 = (void *)objc_claimAutoreleasedReturnValue([v4 zoneName]);
      id v28 = sub_1000AA6AC(@"metrics", v27);
      __int128 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);

      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v91 = v25;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "View has %@ item ckrecords", buf, 0xCu);
      }

      __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics fuzzyNumber:](&OBJC_CLASS___CKKSAnalytics, "fuzzyNumber:", v25));
      __int128 v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  *(void *)(a1 + 40),  @"numItems"));
      [v3 setObject:v30 forKeyedSubscript:v31];
    }

    goto LABEL_12;
  }

  id v3 = 0LL;
LABEL_40:

  return v3;
}

void sub_1000E24E8(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[OTManager manager](&OBJC_CLASS___OTManager, "manager"));
  id v2 = objc_alloc_init(&OBJC_CLASS___OTControlArguments);
  unsigned __int8 v3 = [v4 waitForReady:v2 wait:2000000000];

  if ((v3 & 1) == 0) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
  }
}

void sub_1000E2940( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000E2A2C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v9 logResultForEvent:@"OctagonEventFetchViews" hardFailure:1 result:v7];

  if (v7)
  {
    uint64_t v10 = sub_10001267C("SecError");
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v28 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "octagon: failed to retrieve policy+views: %@",  buf,  0xCu);
    }

    [WeakRetained setError:v7];
  }

  else
  {
    id v12 = sub_10001267C("octagon-ckks");
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v6 viewList]);
      *(_DWORD *)__int128 buf = 138412546;
      id v28 = v6;
      __int16 v29 = 2112;
      __int128 v30 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Received syncing policy %@ with view list: %@",  buf,  0x16u);
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 stateHolder]);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_1000E2D10;
    v25[3] = &unk_100291520;
    id v17 = v6;
    id v26 = v17;
    id v24 = 0LL;
    [v16 persistAccountChanges:v25 error:&v24];
    id v18 = v24;

    if (v18)
    {
      uint64_t v19 = sub_10001267C("SecError");
      __int16 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v28 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "octagon: failed to save policy+views: %@",  buf,  0xCu);
      }

      [WeakRetained setError:v18];
    }

    else
    {
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      int v22 = (void *)objc_claimAutoreleasedReturnValue([v21 ckks]);
      [v22 setCurrentSyncingPolicy:v17];

      int v23 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
      [WeakRetained setNextState:v23];
    }
  }
}

id sub_1000E2D10(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setTPSyncingPolicy:*(void *)(a1 + 32)];
  return v3;
}

id sub_1000E59BC(CFDataRef theData)
{
  dispatch_queue_attr_t v1 = (void *)sub_100019FC8(0LL, theData, 0LL);
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v1, v2) & 1) != 0) {
    id v3 = v1;
  }
  else {
    id v3 = 0LL;
  }
  id v4 = v3;

  return v4;
}

void sub_1000E5B40(uint64_t a1)
{
  id v2 = objc_alloc(&OBJC_CLASS____SFAuthenticatedEncryptionOperation);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keySpecifier]);
  id v3 = [v2 initWithKeySpecifier:v5];
  id v4 = (void *)qword_1002DEA18;
  qword_1002DEA18 = (uint64_t)v3;
}

void sub_1000E5BA4(uint64_t a1)
{
  id v2 = objc_alloc(&OBJC_CLASS____SFAuthenticatedEncryptionOperation);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keySpecifier]);
  id v3 = [v2 initWithKeySpecifier:v5];
  id v4 = (void *)qword_1002DEA08;
  qword_1002DEA08 = (uint64_t)v3;
}

void sub_1000E5C08(id a1)
{
  id v1 = [[_SFAESKeySpecifier alloc] initWithBitSize:2];
  id v2 = (void *)qword_1002DE9F8;
  qword_1002DE9F8 = (uint64_t)v1;
}

void sub_1000E5DEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000E5F10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000E625C(_Unwind_Exception *a1)
{
}

id sub_1000E6478(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueueSetNetworkReachability:*(unsigned __int8 *)(a1 + 40)];
}

void sub_1000E6488(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v1 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000E6580;
  block[3] = &unk_1002927F0;
  void block[4] = WeakRetained;
  dispatch_sync(v1, block);
}

void sub_1000E6508(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    id v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained timer]);

    id WeakRetained = v4;
    if (v2)
    {
      uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
      [v3 noteEvent:@"CKKSEventReachabilityTimerExpired"];

      [v4 _onQueueRunReachabilityDependency];
      id WeakRetained = v4;
    }
  }
}

void sub_1000E6580(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) haveNetwork];
  id v3 = sub_1000AA6AC(@"network", 0LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      LOWORD(v6) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Network available", (uint8_t *)&v6, 2u);
    }
  }

  else
  {
    if (v5)
    {
      int v6 = 134217984;
      uint64_t v7 = 0x4028000000000000LL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Network still not available, retrying after waiting %2.1f hours",  (uint8_t *)&v6,  0xCu);
    }

    [*(id *)(a1 + 32) _onQueueResetReachabilityDependency];
  }

id sub_1000E6684(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) haveNetwork];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

id sub_1000E66B4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onQueueResetReachabilityDependency];
}

void sub_1000E66BC(uint64_t a1, void *a2)
{
  unsigned int v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  nw_path_status_t status = nw_path_get_status(v3);

  id v6 = sub_1000AA6AC(@"ckksnetwork", 0LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = @"unavailable";
    if (status == nw_path_status_satisfied) {
      uint64_t v8 = @"available";
    }
    int v9 = 138412290;
    uint64_t v10 = v8;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "nw_path update: network is %@",  (uint8_t *)&v9,  0xCu);
  }

  [WeakRetained _onqueueSetNetworkReachability:status == nw_path_status_satisfied];
}

LABEL_3:
  id v4 = 1;
LABEL_13:

  return v4;
}

CFStringRef sub_1000E693C(const __CFString *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 == CFStringGetTypeID()) {
    return CFStringCreateCopy(0LL, a1);
  }
  if (v2 == CFDataGetTypeID()) {
    return CFStringCreateFromExternalRepresentation(0LL, (CFDataRef)a1, 0x8000100u);
  }
  if (v2 == CFUUIDGetTypeID()) {
    return CFUUIDCreateString(0LL, (CFUUIDRef)a1);
  }
  return 0LL;
}

CFDataRef sub_1000E69CC(const __CFString *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 == CFDataGetTypeID()) {
    return CFDataCreateCopy(0LL, (CFDataRef)a1);
  }
  if (v2 == CFStringGetTypeID()) {
    return CFStringCreateExternalRepresentation(0LL, a1, 0x8000100u, 0);
  }
  if (v2 != CFNumberGetTypeID()) {
    return 0LL;
  }
  int valuePtr = -1431655766;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt32Type, &valuePtr);
  return CFDataCreate(0LL, (const UInt8 *)&valuePtr, 4LL);
}

CFDataRef sub_1000E6A88(const void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 == CFDataGetTypeID())
  {
    if ((CFDataGetLength((CFDataRef)a1) & 0xFFFFFFFFFFFFFFEFLL) == 0) {
      return CFDataCreateCopy(0LL, (CFDataRef)a1);
    }
  }

  else
  {
    if (v2 == CFNullGetTypeID()) {
      return CFDataCreate(0LL, 0LL, 0LL);
    }
    if (v2 == CFUUIDGetTypeID())
    {
      CFUUIDBytes v4 = CFUUIDGetUUIDBytes((CFUUIDRef)a1);
      return CFDataCreate(0LL, &v4.byte0, 16LL);
    }
  }

  return 0LL;
}

CFStringRef sub_1000E6B40(const __CFData *a1)
{
  id v1 = a1;
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 == CFDataGetTypeID()) {
    return (CFStringRef)CFDataCreateCopy(0LL, v1);
  }
  if (v2 == CFStringGetTypeID()) {
    return CFStringCreateCopy(0LL, (CFStringRef)v1);
  }
  if (v2 != CFNumberGetTypeID()) {
    return 0LL;
  }
  CFRetain(v1);
  return (CFStringRef)v1;
}

CFDataRef sub_1000E6BC4(const void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 != CFDataGetTypeID() || CFDataGetLength((CFDataRef)a1) != 20) {
    return 0LL;
  }
  id v3 = CFGetAllocator(a1);
  return CFDataCreateCopy(v3, (CFDataRef)a1);
}

CFNumberRef sub_1000E6C20(const __CFBoolean *a1)
{
  id v1 = a1;
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 != CFNumberGetTypeID())
  {
    if (v2 == CFBooleanGetTypeID())
    {
      HIDWORD(valuePtr) = CFBooleanGetValue(v1);
      p_uint64_t valuePtr = (char *)&valuePtr + 4;
    }

    else
    {
      if (v2 != CFStringGetTypeID()) {
        return 0LL;
      }
      LODWORD(valuePtr) = CFStringGetIntValue((CFStringRef)v1);
      CFStringRef v4 = CFStringCreateWithFormat(0LL, 0LL, @"%ld", (int)valuePtr, valuePtr);
      int v5 = CFEqual(v4, v1);
      CFRelease(v4);
      if (!v5) {
        return (CFNumberRef)CFStringCreateCopy(0LL, (CFStringRef)v1);
      }
      p_uint64_t valuePtr = (char *)&valuePtr;
    }

    return CFNumberCreate(0LL, kCFNumberSInt32Type, p_valuePtr);
  }

  CFRetain(v1);
  return v1;
}

const void *sub_1000E6D0C(const void *a1)
{
  id v1 = a1;
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 != CFDateGetTypeID()) {
    return 0LL;
  }
  CFRetain(v1);
  return v1;
}

uint64_t sub_1000E6D50(void *a1, uint64_t a2, __CFString **a3)
{
  uint64_t v3 = a1[2];
  if (!v3) {
    goto LABEL_7;
  }
  uint64_t v4 = 0LL;
  int v5 = a1 + 3;
  do
  {
    if (*(_DWORD *)(v3 + 8) == (_DWORD)a2) {
      uint64_t v4 = v3;
    }
    uint64_t v6 = *v5++;
    uint64_t v3 = v6;
  }

  while (v6);
  if (!v4)
  {
LABEL_7:
    sub_1000194E0(-26276, a3, @"Can't find attribute of kind %d in class %@", a2, *a1);
    return 0LL;
  }

  return v4;
}

CFDataRef sub_1000E6DB8(uint64_t a1, __CFString **a2)
{
  CFNumberRef v2 = (CFNumberRef)&stru_100294B48;
  switch(*(_DWORD *)(a1 + 8))
  {
    case 0:
    case 1:
    case 0x10:
      return CFDataCreate(kCFAllocatorDefault, 0LL, 0LL);
    case 2:
    case 0xE:
    case 0xF:
      goto LABEL_8;
    case 3:
    case 0xB:
    case 0xC:
      int valuePtr = 0;
      CFNumberRef v2 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
      goto LABEL_8;
    case 4:
      int v5 = kCFAllocatorDefault;
      double Current = 0.0;
      goto LABEL_6;
    case 5:
    case 6:
      double Current = CFAbsoluteTimeGetCurrent();
      int v5 = kCFAllocatorDefault;
LABEL_6:
      CFDataRef result = CFDateCreate(v5, Current);
      break;
    default:
      sub_1000194E0(-26276, a2, @"attr %@ has no default value", *(void *)a1);
      CFNumberRef v2 = 0LL;
LABEL_8:
      CFDataRef result = v2;
      break;
  }

  return result;
}

__CFDictionary *sub_1000E6EA4(void *a1, uint64_t a2, uint64_t a3, __CFString **a4)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  uint64_t v9 = a1[2];
  uint64_t v10 = *(void **)(v9 + 16);
  if (!v10) {
    return Mutable;
  }
  for (CFIndex i = (void *)(v9 + 24); ; ++i)
  {
    uint64_t v12 = v10[2];
    if ((a2 & ~v12) == 0)
    {
      if ((v12 & a3) != 0) {
        return Mutable;
      }
      uint64_t v13 = sub_1000E705C(a1, (uint64_t)v10, a4);
      if (!v13) {
        goto LABEL_17;
      }
      id v14 = v13;
      if (!CFEqual(kCFNull, v13))
      {
        CFDictionarySetValue(Mutable, (const void *)*v10, v14);
        goto LABEL_10;
      }

      if ((*((_BYTE *)v10 + 17) & 0x10) != 0) {
        break;
      }
    }

const void *sub_1000E705C(const void *a1, uint64_t a2, __CFString **a3)
{
  if (!a2) {
    return 0LL;
  }
  unint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = (void *)sub_1000E7738((uint64_t)a1, (const void **)a2);
  if (v7) {
    return v7;
  }
  CFDataRef v8 = sub_1000E7824(a1, a2);
  if (!v8) {
    return 0LL;
  }
  CFDataRef v9 = v8;
  uint64_t v7 = kCFNull;
  if (CFEqual(kCFNull, v8))
  {
    CFRelease(v9);
    return v7;
  }

  sub_1000E7958((uint64_t)a1, (void *)a2, v9, a3);
  CFRelease(v9);
  return sub_1000E7738((uint64_t)a1, (const void **)a2);
}

BOOL sub_1000E714C(uint64_t a1, int a2, __CFString **a3)
{
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 6) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if (v3 == 1 || v4 != 0)
  {
    CFDataRef v9 = (const void **)sub_1000E6D50(*(void **)(a1 + 16), 9LL, a3);
    if (v9)
    {
      uint64_t v10 = (const __CFData *)sub_1000E7738(a1, v9);
      if (!v10) {
        return sub_1000194E0(-26276, a3, @"state= encrypted but edata is NULL");
      }
      *(_DWORD *)(a1 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 3;
      CFTypeRef cf = 0LL;
      CFDictionaryRef theDict = 0LL;
      unsigned int v46 = 0;
      if (!sub_1000F212C( *(unsigned int *)(a1 + 28),  *(void *)(a1 + 32),  *(char **)(a1 + 64),  &cf,  *(const __CFData **)(a1 + 56),  v10,  *(void *)(a1 + 16),  *(const __CFString **)(a1 + 72),  (const void **)&theDict,  &v46,  a2,  0LL,  a3)) {
        goto LABEL_52;
      }
      if (v46 > 1)
      {
        if (theDict)
        {
          int v22 = sub_1000E8A80(a1, theDict, a3);
LABEL_24:
          BOOL v16 = v22;
          goto LABEL_48;
        }
      }

      else
      {
        Boolean Value = (const __CFData *)CFDictionaryGetValue(theDict, @"v_Data");
        if (sub_1000E8AF8(a1, @"v_Data", Value, a3))
        {
          uint64_t v12 = (const void *)sub_1000E7EC0(a1, kSecAttrAccessGroup);
          uint64_t v13 = sub_1000E7EC0(a1, kSecAttrAccessible);
          if (!v12) {
            goto LABEL_19;
          }
          id v14 = (const void *)v13;
          CFTypeID v15 = CFGetTypeID(v12);
          BOOL v16 = 1;
          if (v15 != CFStringGetTypeID() || !v14)
          {
LABEL_48:
            int v34 = sub_1000F3C78((void **)a1, a3);
            if (v34)
            {
              uint64_t v35 = v34;
              Protection = (const void *)SecAccessControlGetProtection(v34);
              id v37 = (const void *)SecAccessControlGetProtection(cf);
              if (!CFEqual(Protection, v37))
              {
                uint64_t v38 = SecAccessControlGetProtection(v35);
                uint64_t v39 = SecAccessControlGetProtection(cf);
                BOOL v16 = sub_1000194E0( -26275,  a3,  @"ACL protection doesn't match the one in blob (%@ : %@)",  v38,  v39);
              }

              CFRelease(v35);
              goto LABEL_53;
            }

const void *sub_1000E7738(uint64_t a1, const void **a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 48);
    if (a2 && v2) {
      return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), *a2);
    }
    int v4 = (os_log_s *)sub_10001267C("SecError");
    BOOL v7 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v2)
    {
      if (v7)
      {
        __int16 v8 = 0;
        int v5 = "secitem: desc is nil!";
        unint64_t v6 = (uint8_t *)&v8;
        goto LABEL_12;
      }
    }

    else if (v7)
    {
      *(_WORD *)__int128 buf = 0;
      int v5 = "secitem: item->attributes is nil!";
      unint64_t v6 = buf;
      goto LABEL_12;
    }
  }

  else
  {
    int v4 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v10 = 0;
      int v5 = "secitem: item is nil!";
      unint64_t v6 = (uint8_t *)&v10;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v5, v6, 2u);
    }
  }

  return 0LL;
}

CFDataRef sub_1000E7824(const void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(a2 + 24);
  if (v2) {
    return (CFDataRef)v2();
  }
  int v4 = 0LL;
  int v5 = *(_DWORD *)(a2 + 8);
  switch(v5)
  {
    case 0:
    case 2:
    case 14:
    case 15:
      uint64_t v6 = *(void *)(a2 + 16);
      if ((v6 & 0x1000) == 0) {
        goto LABEL_13;
      }
      if ((v6 & 0x400) != 0)
      {
        int v4 = @"0";
        goto LABEL_19;
      }

      if (v5 && (v6 & 0x800) != 0)
      {
        int v4 = &stru_100294B48;
        goto LABEL_19;
      }

      goto LABEL_13;
    case 1:
      uint64_t v6 = *(void *)(a2 + 16);
LABEL_13:
      if ((~(_WORD)v6 & 0x1800) == 0) {
        goto LABEL_14;
      }
      goto LABEL_18;
    case 3:
    case 11:
    case 12:
      if ((*(_BYTE *)(a2 + 17) & 0x10) == 0) {
        goto LABEL_18;
      }
      int valuePtr = 0;
      BOOL v7 = CFGetAllocator(a1);
      int v4 = (const __CFString *)CFNumberCreate(v7, kCFNumberSInt32Type, &valuePtr);
      goto LABEL_19;
    case 4:
      if ((~*(_DWORD *)(a2 + 16) & 0x1400LL) != 0) {
        goto LABEL_18;
      }
      __int16 v10 = kCFAllocatorDefault;
      double Current = 0.0;
      return CFDateCreate(v10, Current);
    case 5:
    case 6:
      CFAllocatorRef v8 = CFGetAllocator(a1);
      double Current = CFAbsoluteTimeGetCurrent();
      __int16 v10 = v8;
      return CFDateCreate(v10, Current);
    case 8:
    case 13:
LABEL_18:
      int v4 = (const __CFString *)kCFNull;
      goto LABEL_19;
    case 16:
LABEL_14:
      id v11 = CFGetAllocator(a1);
      return CFDataCreate(v11, 0LL, 0LL);
    default:
LABEL_19:
      CFDataRef result = (CFDataRef)v4;
      break;
  }

  return result;
}

uint64_t sub_1000E7958(uint64_t a1, void *a2, const __CFData *a3, __CFString **a4)
{
  if (!a2) {
    return 0LL;
  }
  if (a3) {
    BOOL v7 = a3;
  }
  else {
    BOOL v7 = kCFNull;
  }
  CFAllocatorRef v8 = (uint64_t (*)(uint64_t, void *, const __CFData *, __CFString **))a2[4];
  if (v8) {
    return v8(a1, a2, v7, a4);
  }
  if ((a2[2] & 0x2080) == 0 || (uint64_t result = sub_1000E714C(a1, 1LL, a4), (_DWORD)result))
  {
    switch(*((_DWORD *)a2 + 2))
    {
      case 0:
      case 0xF:
        __int16 v10 = (const __CFData *)sub_1000E6B40(v7);
        goto LABEL_22;
      case 1:
      case 0xA:
        __int16 v10 = sub_1000E69CC((const __CFString *)v7);
        goto LABEL_22;
      case 2:
      case 0xE:
        __int16 v10 = (const __CFData *)sub_1000E693C((const __CFString *)v7);
        goto LABEL_22;
      case 3:
      case 8:
      case 0xB:
      case 0xC:
        __int16 v10 = sub_1000E6C20(v7);
        goto LABEL_22;
      case 4:
      case 5:
      case 6:
        __int16 v10 = (const __CFData *)sub_1000E6D0C(v7);
        goto LABEL_22;
      case 7:
        __int16 v10 = sub_1000E6BC4(v7);
        goto LABEL_22;
      case 9:
        CFDataRef v11 = sub_1000E69CC((const __CFString *)v7);
        if (v11)
        {
          CFDataRef v12 = v11;
          if (*(_DWORD *)(a1 + 40) == 4) {
            int v13 = 2;
          }
          else {
            int v13 = 1;
          }
          *(_DWORD *)(a1 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v13;
LABEL_23:
          Boolean Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), (const void *)*a2);
          if (Value)
          {
            int v16 = CFEqual(Value, v12);
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)*a2, v12);
            CFRelease(v12);
            if (!v16) {
              goto LABEL_34;
            }
            return 1LL;
          }

          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)*a2, v12);
          CFRelease(v12);
LABEL_34:
          uint64_t v19 = a2[2];
          if ((v19 & 0x100) != 0)
          {
            uint64_t v20 = sub_1000E6D50(*(void **)(a1 + 16), 7LL, 0LL);
            sub_1000E7958(a1, v20, kCFNull, 0LL);
            uint64_t v19 = a2[2];
          }

          if ((v19 & 1) != 0)
          {
            uint64_t v21 = sub_1000E6D50(*(void **)(a1 + 16), 10LL, 0LL);
            sub_1000E7958(a1, v21, kCFNull, 0LL);
            uint64_t v19 = a2[2];
          }

          if ((v19 & 0x2080) != 0)
          {
            int v22 = *(_DWORD *)(a1 + 40);
            if (v22 == 2 || v22 == 6 && (v19 & 0x20) == 0)
            {
              uint64_t v23 = sub_1000E6D50(*(void **)(a1 + 16), 9LL, 0LL);
              sub_1000E7958(a1, v23, kCFNull, 0LL);
              uint64_t v19 = a2[2];
            }
          }

          if ((v19 & 8) == 0) {
            return 1LL;
          }
          id v24 = *(__CFDictionary **)(a1 + 48);
          CFTypeID v25 = (const void *)sub_1000E7CA8(a2);
          id v26 = v24;
          goto LABEL_46;
        }

        if (!v7 || CFEqual(kCFNull, v7))
        {
          *(_DWORD *)(a1 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0;
LABEL_30:
          if (!v7) {
            goto LABEL_32;
          }
        }

        if (CFEqual(kCFNull, v7))
        {
LABEL_32:
          CFTypeID v17 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), (const void *)*a2);
          if (!v17)
          {
            id v26 = *(__CFDictionary **)(a1 + 48);
            CFTypeID v25 = (const void *)*a2;
LABEL_46:
            CFDictionaryRemoveValue(v26, v25);
            return 1LL;
          }

          int v18 = CFEqual(v17, kCFNull);
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)*a2);
          if (v18) {
            return 1LL;
          }
          goto LABEL_34;
        }

        sub_1000194E0(-50, a4, @"attribute %@: value: %@ failed to convert", *a2, v7);
        break;
      case 0xD:
        id v14 = (const __CFData *)sub_1000E7C6C(v7);
        if (!v14) {
          goto LABEL_30;
        }
        CFDataRef v12 = v14;
        CFRetain(v14);
        goto LABEL_23;
      case 0x10:
        __int16 v10 = sub_1000E6A88(v7);
LABEL_22:
        CFDataRef v12 = v10;
        if (v10) {
          goto LABEL_23;
        }
        goto LABEL_30;
      default:
        goto LABEL_30;
    }

    return 0LL;
  }

  return result;
}

const void *sub_1000E7C6C(const void *a1)
{
  if (!a1) {
    return 0LL;
  }
  id v1 = a1;
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 != CFBooleanGetTypeID()) {
    return 0LL;
  }
  return v1;
}

uint64_t sub_1000E7CA8(_BYTE *a1)
{
  if ((a1[16] & 8) == 0) {
    return *(void *)a1;
  }
  if (qword_1002DEA38 != -1) {
    dispatch_once(&qword_1002DEA38, &stru_1002862D0);
  }
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000LL;
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000LL;
  void v4[2] = sub_1000E7D78;
  v4[3] = &unk_1002862F8;
  void v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync((dispatch_queue_t)qword_1002DEA48, v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1000E7D78(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = CFDictionaryGetValue( (CFDictionaryRef)qword_1002DEA40,  **(const void ***)(a1 + 40));
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = CFStringCreateWithFormat( 0LL,  0LL,  @"#%@",  **(void **)(a1 + 40));
    CFDictionarySetValue( (CFMutableDictionaryRef)qword_1002DEA40,  **(const void ***)(a1 + 40),  *(const void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
    CFRelease(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
  }

void sub_1000E7E2C(id a1)
{
  qword_1002DEA48 = (uint64_t)dispatch_queue_create("secd-hash-name", 0LL);
  qword_1002DEA40 = (uint64_t)CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
}

void sub_1000E7E78(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3 = *(CFTypeRef *)(a1 + 56);
  if (v3 != cf)
  {
    if (!cf || (CFRetain(cf), (CFTypeRef v3 = *(CFTypeRef *)(a1 + 56)) != 0LL)) {
      CFRelease(v3);
    }
    *(void *)(a1 + 56) = cf;
  }

const void *sub_1000E7EC0(void *a1, CFTypeRef cf2)
{
  if (!a1 || !cf2 || (v4 = (const __CFDictionary *)a1[6]) == 0LL || (uint64_t result = CFDictionaryGetValue(v4, cf2)) == 0LL)
  {
    uint64_t v6 = a1[2];
    uint64_t v7 = *(CFTypeRef **)(v6 + 16);
    if (v7)
    {
      unint64_t v8 = (CFTypeRef **)(v6 + 24);
      while (!CFEqual(*v7, cf2))
      {
        CFDataRef v9 = *v8++;
        uint64_t v7 = v9;
        if (!v9) {
          return 0LL;
        }
      }

      return sub_1000E705C(a1, (uint64_t)v7, 0LL);
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000E7F4C(uint64_t a1)
{
  uint64_t result = _CFRuntimeRegisterClass(&unk_100285DF8);
  **(void **)(a1 + 32) = result;
  return result;
}

void sub_1000E7F7C(void *a1)
{
  uint64_t v2 = (const void *)a1[6];
  if (v2) {
    CFRelease(v2);
  }
  CFTypeRef v3 = (const void *)a1[7];
  if (v3) {
    CFRelease(v3);
  }
  int v4 = (const void *)a1[9];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[8];
  if (v5) {
    CFRelease(v5);
  }
}

uint64_t sub_1000E7FD0(void **a1, void **a2)
{
  CFTypeRef v3 = a1;
  if (a1)
  {
    uint64_t v4 = sub_1000E6D50(a1[2], 7LL, 0LL);
    CFTypeRef v3 = sub_1000E705C(v3, v4, 0LL);
  }

  if (a2)
  {
    uint64_t v5 = sub_1000E6D50(a2[2], 7LL, 0LL);
    uint64_t v6 = sub_1000E705C(a2, v5, 0LL);
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  return CFEqual(v3, v6);
}

uint64_t sub_1000E804C(void **a1)
{
  uint64_t v2 = sub_1000E6D50(a1[2], 7LL, 0LL);
  CFTypeRef v3 = (const __CFData *)sub_1000E705C(a1, v2, 0LL);
  return *(int *)CFDataGetBytePtr(v3);
}

__CFString *sub_1000E8090(void **a1, CFTypeRef cf)
{
  if (cf
    && (CFTypeID v4 = CFGetTypeID(cf), v4 == CFDictionaryGetTypeID())
    && CFDictionaryContainsKey((CFDictionaryRef)cf, @"debug"))
  {
    uint64_t v5 = CFGetAllocator(a1);
    CFMutableArrayRef Mutable = CFStringCreateMutable(v5, 0LL);
    CFStringAppendFormat(Mutable, 0LL, @"<%@", *a1[2]);
    uint64_t v7 = a1[2];
    uint64_t v8 = v7[2];
    if (v8)
    {
      CFDataRef v9 = v7 + 3;
      do
      {
        if ((*(_BYTE *)(v8 + 16) & 1) != 0) {
          sub_1000E8770(a1, (CFStringRef *)v8, Mutable);
        }
        uint64_t v10 = *v9++;
        uint64_t v8 = v10;
      }

      while (v10);
    }

    CFStringAppend(Mutable, @", |otherAttr");
    CFDataRef v11 = a1[2];
    CFDataRef v12 = (CFStringRef *)v11[2];
    if (v12)
    {
      int v13 = (CFStringRef **)(v11 + 3);
      do
      {
        if (*v12 && CFEqual(@"tomb", *v12)) {
          sub_1000E8770(a1, v12, Mutable);
        }
        id v14 = *v13++;
        CFDataRef v12 = v14;
      }

      while (v14);
      CFTypeID v15 = a1[2];
      uint64_t v16 = v15[2];
      if (v16)
      {
        CFTypeID v17 = v15 + 3;
        do
        {
          if ((*(_BYTE *)(v16 + 16) & 1) == 0 && (!*(void *)v16 || !CFEqual(@"tomb", *(CFTypeRef *)v16))) {
            sub_1000E8770(a1, (CFStringRef *)v16, Mutable);
          }
          uint64_t v18 = *v17++;
          uint64_t v16 = v18;
        }

        while (v18);
      }
    }

    CFStringAppend(Mutable, @">");
  }

  else
  {
    int v87 = 0;
    __int16 valuePtr = 0;
    uint64_t v85 = 0LL;
    __int128 v88 = 0u;
    __int128 v89 = 0u;
    uint64_t v19 = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
    uint64_t v20 = a1[2];
    uint64_t v23 = v20[2];
    uint64_t v21 = v20 + 2;
    uint64_t v22 = v23;
    id v24 = &v88;
    if (v23)
    {
      int v84 = 0LL;
      uint64_t v82 = 0LL;
      CFTypeID v25 = 0LL;
      CFTypeRef v79 = (CFTypeRef)kSecAttrMultiUser;
      BytePtr = (const UInt8 *)&v87;
      id v26 = (const UInt8 *)&v87;
      do
      {
        switch(*(_DWORD *)(v22 + 8))
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 9:
            if ((*(_BYTE *)(v22 + 16) & 0x30) != 0)
            {
              BOOL v27 = sub_1000E705C(a1, v22, 0LL);
              if (v27)
              {
                uint64_t v28 = v27;
                if (!CFEqual(v27, kCFNull))
                {
                  CFTypeID v29 = CFGetTypeID(v28);
                  if (v29 != CFStringGetTypeID() || !CFEqual(*(CFTypeRef *)v22, kSecAttrAccessGroup))
                  {
                    CFStringAppend(v19, @",");
                    goto LABEL_70;
                  }

                  uint64_t v82 = v28;
                }
              }
            }

            break;
          case 6:
            __int128 v30 = (const __CFDate *)sub_1000E705C(a1, v22, 0LL);
            if (v30)
            {
              __int128 v31 = v30;
              CFTypeID v32 = CFGetTypeID(v30);
              if (v32 == CFDateGetTypeID())
              {
                double AbsoluteTime = CFDateGetAbsoluteTime(v31);
                id v24 = (__int128 *)sub_1000142C8(0LL, 0, (uint64_t)v24, (unint64_t)&v89 + 15, AbsoluteTime);
              }
            }

            break;
          case 7:
            int v34 = (const __CFData *)sub_1000E705C(a1, v22, 0LL);
            if (v34)
            {
              uint64_t v35 = v34;
              CFTypeID v36 = CFGetTypeID(v34);
              if (v36 == CFDataGetTypeID() && CFDataGetLength(v35) >= 4) {
                BytePtr = CFDataGetBytePtr(v35);
              }
            }

            break;
          case 8:
            unsigned int v46 = (const __CFNumber *)sub_1000E705C(a1, v22, 0LL);
            if (v46)
            {
              __int128 v47 = v46;
              CFTypeID v48 = CFGetTypeID(v46);
              if (v48 == CFNumberGetTypeID())
              {
                p___int16 valuePtr = (char *)&v85;
                int v49 = v47;
                CFNumberType v50 = kCFNumberSInt64Type;
                goto LABEL_56;
              }
            }

            break;
          case 0xA:
            uint64_t v51 = (const __CFData *)sub_1000E705C(a1, v22, 0LL);
            if (v51)
            {
              id v52 = v51;
              CFTypeID v53 = CFGetTypeID(v51);
              if (v53 == CFDataGetTypeID()) {
                id v26 = CFDataGetBytePtr(v52);
              }
            }

            break;
          case 0xB:
            uint64_t v54 = (const __CFNumber *)sub_1000E705C(a1, v22, 0LL);
            if (v54)
            {
              uint64_t v38 = v54;
              CFTypeID v55 = CFGetTypeID(v54);
              if (v55 == CFNumberGetTypeID())
              {
                p___int16 valuePtr = (char *)&valuePtr + 1;
                goto LABEL_55;
              }
            }

            break;
          case 0xC:
            id v37 = (const __CFNumber *)sub_1000E705C(a1, v22, 0LL);
            if (v37)
            {
              uint64_t v38 = v37;
              CFTypeID v39 = CFGetTypeID(v37);
              if (v39 == CFNumberGetTypeID())
              {
                p___int16 valuePtr = (char *)&valuePtr;
LABEL_55:
                int v49 = v38;
                CFNumberType v50 = kCFNumberCharType;
LABEL_56:
                CFNumberGetValue(v49, v50, p_valuePtr);
              }
            }

            break;
          case 0xD:
            int v41 = sub_1000E705C(a1, v22, 0LL);
            if (v41)
            {
              CFTypeID v42 = v41;
              CFTypeID v43 = CFGetTypeID(v41);
              BOOL v44 = v43 != CFBooleanGetTypeID();
              CFTypeID v45 = v84;
              if (!v44) {
                CFTypeID v45 = v42;
              }
              int v84 = v45;
            }

            break;
          case 0xE:
            uint64_t v56 = sub_1000E705C(a1, v22, 0LL);
            if (v56)
            {
              uint64_t v57 = v56;
              CFTypeID v58 = CFGetTypeID(v56);
              if (v58 == CFStringGetTypeID()) {
                CFTypeID v25 = v57;
              }
            }

            break;
          case 0x10:
            uint64_t v59 = sub_1000E705C(a1, v22, 0LL);
            if (v59)
            {
              uint64_t v60 = v59;
              if (CFEqual(*(CFTypeRef *)v22, v79))
              {
                CFTypeID v61 = CFGetTypeID(v60);
                if (v61 == CFDataGetTypeID())
                {
                  CFStringAppend(v19, @",");
                  if (CFDataGetLength((CFDataRef)v60))
                  {
                    unsigned int v62 = CFDataGetBytePtr((CFDataRef)v60);
                    CFIndex Length = CFDataGetLength((CFDataRef)v60);
                    if (Length >= 1)
                    {
                      CFIndex v64 = Length;
                      do
                      {
                        unsigned int v65 = *v62++;
                        CFStringAppendFormat(v19, 0LL, @"%02X", v65);
                        --v64;
                      }

                      while (v64);
                    }
                  }

                  else
                  {
LABEL_70:
                    CFStringAppend(v19, *(CFStringRef *)v22);
                  }
                }
              }
            }

            break;
          default:
            break;
        }

        uint64_t v66 = v21[1];
        ++v21;
        uint64_t v22 = v66;
      }

      while (v66);
    }

    else
    {
      CFTypeID v25 = 0LL;
      uint64_t v82 = 0LL;
      int v84 = 0LL;
      id v26 = (const UInt8 *)&v87;
      BytePtr = (const UInt8 *)&v87;
    }

    uint64_t v83 = v25;
    id v80 = v19;
    __int16 v67 = CFGetAllocator(a1);
    if ((_BYTE)valuePtr) {
      __int16 v68 = "T";
    }
    else {
      __int16 v68 = "O";
    }
    uint64_t v69 = *a1[2];
    uint64_t v70 = *v26;
    uint64_t v71 = v26[1];
    uint64_t v72 = v26[2];
    uint64_t v73 = v26[3];
    if (HIBYTE(valuePtr)) {
      __int16 v74 = "S";
    }
    else {
      __int16 v74 = "L";
    }
    uint64_t v75 = v85;
    if (v84)
    {
      int v76 = CFEqual(v84, kCFBooleanFalse);
      unint64_t v77 = "F,";
      if (!v76) {
        unint64_t v77 = "T,";
      }
    }

    else
    {
      unint64_t v77 = "";
    }

    CFMutableArrayRef Mutable = (__CFString *)CFStringCreateWithFormat( v67,  0LL,  @"%s,%@,%02X%02X%02X%02X,%s,%@,%@,%lld%@,%s,%s%02X%02X%02X%02X",  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v83,  v82,  v75,  v80,  v24,  v77,  *BytePtr,  BytePtr[1],  BytePtr[2],  BytePtr[3]);
    if (v80) {
      CFRelease(v80);
    }
  }

  return Mutable;
}

__CFString *sub_1000E8748(void **a1)
{
  uint64_t v2 = (const void *)sub_100012DC4();
  return sub_1000E8090(a1, v2);
}

void sub_1000E8770(const void *a1, CFStringRef *a2, __CFString *a3)
{
  if (!CFEqual(@"data", *a2) && !CFEqual(@"v_pk", *a2))
  {
    uint64_t v6 = (const __CFNull *)sub_1000E705C(a1, (uint64_t)a2, 0LL);
    if (v6)
    {
      uint64_t v7 = v6;
      if (v6 != kCFNull)
      {
        CFStringAppend(a3, @",");
        CFStringAppend(a3, *a2);
        CFStringAppend(a3, @"=");
        if (CFEqual(@"data", *a2))
        {
          BytePtr = CFDataGetBytePtr(v7);
          CFIndex Length = CFDataGetLength(v7);
          if ((Length & 0x8000000000000000LL) == 0)
          {
            unint64_t v10 = Length;
            CFStringAppendFormat(a3, 0LL, @"%04lx:", Length);
            if (v10 > 8)
            {
              uint64_t v14 = 0LL;
              CNCRC(60LL, BytePtr + 8, v10 - 8, &v14);
              for (uint64_t i = 0LL; i != 8; ++i)
                CFStringAppendFormat(a3, 0LL, @"%02X", BytePtr[i]);
              CFStringAppendFormat(a3, 0LL, @"...|%08llx", v14);
            }

            else
            {
              for (; v10; --v10)
              {
                unsigned int v11 = *BytePtr++;
                CFStringAppendFormat(a3, 0LL, @"%02X", v11);
              }
            }
          }
        }

        else if (CFEqual(@"v_Data", *a2))
        {
          CFStringAppend(a3, @"<?>");
        }

        else
        {
          CFTypeID v13 = CFGetTypeID(v7);
          if (v13 == CFDataGetTypeID()) {
            sub_1000E8980(a3, v7);
          }
          else {
            CFStringAppendFormat(a3, 0LL, @"%@", v7);
          }
        }
      }
    }
  }

void sub_1000E8980(__CFString *a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  CFIndex Length = CFDataGetLength(theData);
  if (Length >= 1)
  {
    CFIndex v6 = Length;
    do
    {
      unsigned int v7 = *BytePtr++;
      CFStringAppendFormat(a1, 0LL, @"%02X", v7);
      --v6;
    }

    while (v6);
  }

BOOL sub_1000E89F8(uint64_t a1, int a2, __CFString **a3)
{
  BOOL v5 = sub_1000E714C(a1, 1, a3);
  if (v5 && *(_DWORD *)(a1 + 28) != a2)
  {
    *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = a2;
    *(void *)(a1 + 32) = 0LL;
    if (*(_DWORD *)(a1 + 40) == 2)
    {
      CFIndex v6 = (void *)sub_1000E6D50(*(void **)(a1 + 16), 9LL, 0LL);
      sub_1000E7958(a1, v6, kCFNull, 0LL);
    }
  }

  return v5;
}

uint64_t sub_1000E8A80(uint64_t a1, CFDictionaryRef theDict, __CFString **a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  CFTypeID v4 = *(const void ***)(v3 + 16);
  if (!v4) {
    return 1LL;
  }
  for (uint64_t i = (const void ***)(v3 + 24); ; ++i)
  {
    Boolean Value = (const __CFData *)CFDictionaryGetValue(theDict, *v4);
    if (Value)
    {
      uint64_t result = sub_1000E7958(a1, v4, Value, a3);
      if (!(_DWORD)result) {
        break;
      }
    }

    unsigned int v11 = *i;
    CFTypeID v4 = v11;
    if (!v11) {
      return 1LL;
    }
  }

  return result;
}

uint64_t sub_1000E8AF8(uint64_t a1, CFTypeRef cf2, const __CFData *a3, __CFString **a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  BOOL v5 = *(CFTypeRef **)(v4 + 16);
  if (!v5) {
    return 0LL;
  }
  unint64_t v10 = (CFTypeRef **)(v4 + 24);
  while (!CFEqual(*v5, cf2))
  {
    unsigned int v11 = *v10++;
    BOOL v5 = v11;
    if (!v11) {
      return 0LL;
    }
  }

  return sub_1000E7958(a1, v5, a3, a4);
}

void sub_1000E8B80(uint64_t a1, const void *a2, uint64_t *a3)
{
  CFTypeRef cf = 0LL;
  BOOL v5 = (const __CFData *)sub_1000E705C(a2, (uint64_t)a3, (__CFString **)&cf);
  if (cf)
  {
    CFIndex v6 = (os_log_s *)sub_10001267C("secitem");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_5;
    }
    uint64_t v7 = *a3;
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v16 = v7;
    __int16 v17 = 2112;
    CFTypeRef v18 = cf;
    uint64_t v8 = "Merging: unable to get attribute (%@) : %@";
    goto LABEL_4;
  }

  unint64_t v10 = v5;
  if (v5 && (!kCFNull || !CFEqual(v5, kCFNull)))
  {
    unsigned int v11 = (os_log_s *)sub_10001267C("secitem");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = *a3;
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v16 = v13;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Preserving existing data for %@",  buf,  0xCu);
    }

    sub_1000E7958(a1, a3, v10, (__CFString **)&cf);
    if (cf)
    {
      CFIndex v6 = (os_log_s *)sub_10001267C("secitem");
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
LABEL_5:
        CFTypeRef v9 = cf;
        if (cf)
        {
          CFTypeRef cf = 0LL;
          CFRelease(v9);
        }

        return;
      }

      uint64_t v12 = *a3;
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v16 = v12;
      __int16 v17 = 2112;
      CFTypeRef v18 = cf;
      uint64_t v8 = "Unable to set attribute (%@) : %@";
LABEL_4:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v8, buf, 0x16u);
      goto LABEL_5;
    }
  }

uint64_t sub_1000E8D5C(uint64_t a1, uint64_t a2, __CFString **a3)
{
  if (*(_DWORD *)(a1 + 40) == 2)
  {
    CFIndex v6 = (void *)sub_1000E6D50(*(void **)(a1 + 16), 9LL, a3);
    uint64_t result = sub_1000E7958(a1, v6, kCFNull, a3);
    if (!a2) {
      return result;
    }
  }

  else
  {
    uint64_t result = 1LL;
    if (!a2) {
      return result;
    }
  }

  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0;
    uint64_t v8 = (const __CFData *)SecAccessControlCopyData(a2);
    CFTypeRef v9 = (void *)sub_1000E6D50(*(void **)(a1 + 16), 15LL, a3);
    uint64_t v10 = sub_1000E7958(a1, v9, v8, a3);
    CFRelease(v8);
    return v10;
  }

  return result;
}

const void *sub_1000E8E18(uint64_t a1, const __CFDictionary *a2, int a3, __CFString **a4)
{
  uint64_t v6 = sub_1000E8E84(kCFAllocatorDefault, a1, a3, 0LL);
  uint64_t v7 = (const void *)v6;
  if (v6 && (sub_1000E8A80(v6, a2, a4) & 1) == 0)
  {
    CFRelease(v7);
    return 0LL;
  }

  return v7;
}

uint64_t sub_1000E8E84(const __CFAllocator *a1, uint64_t a2, int a3, uint64_t a4)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000E7F4C;
  block[3] = &unk_100285E58;
  void block[4] = &qword_1002DEA30;
  if (qword_1002DEA28 != -1) {
    dispatch_once(&qword_1002DEA28, block);
  }
  uint64_t Instance = _CFRuntimeCreateInstance(a1, qword_1002DEA30, 64LL, 0LL);
  *(void *)(Instance + 16) = a2;
  *(void *)(Instance + 4_Block_object_dispose(va, 8) = CFDictionaryCreateMutable( a1,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  *(_DWORD *)(Instance + 2_Block_object_dispose(va, 8) = a3;
  *(void *)(Instance + 32) = a4;
  *(_DWORD *)(Instance + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0;
  *(void *)(Instance + 64) = @"od";
  return Instance;
}

CFNumberRef sub_1000E8F80(const __CFAllocator *a1, sqlite3_stmt *a2, int iCol)
{
  sqlite3_int64 v4 = sqlite3_column_int64(a2, iCol);
  sqlite3_int64 valuePtr = v4;
  if (v4 == (int)v4)
  {
    int v9 = v4;
    p_sqlite3_int64 valuePtr = (sqlite3_int64 *)&v9;
    uint64_t v6 = a1;
    CFNumberType v7 = kCFNumberSInt32Type;
  }

  else
  {
    p_sqlite3_int64 valuePtr = &valuePtr;
    uint64_t v6 = a1;
    CFNumberType v7 = kCFNumberSInt64Type;
  }

  return CFNumberCreate(v6, v7, p_valuePtr);
}

CFStringRef sub_1000E8FE0(const __CFAllocator *a1, sqlite3_stmt *a2, int iCol, __int16 a4)
{
  uint64_t v6 = sqlite3_column_text(a2, iCol);
  if (v6)
  {
    CFNumberType v7 = v6;
    size_t v8 = strlen((const char *)v6);
    if (v8) {
      return CFStringCreateWithBytes(a1, v7, v8, 0x8000100u, 0);
    }
  }

  if ((a4 & 0x800) != 0) {
    return &stru_100294B48;
  }
  if ((a4 & 0x400) != 0) {
    return @"0";
  }
  return (CFStringRef)kCFNull;
}

CFDataRef sub_1000E9078(const __CFAllocator *a1, sqlite3_stmt *a2, int iCol)
{
  uint64_t v6 = (const UInt8 *)sqlite3_column_blob(a2, iCol);
  CFIndex v7 = sqlite3_column_bytes(a2, iCol);
  return CFDataCreate(a1, v6, v7);
}

uint64_t sub_1000E90CC(const __CFAllocator *a1, void *a2, sqlite3_stmt *a3, int a4, uint64_t a5)
{
  uint64_t v9 = sub_1000E8E84(a1, (uint64_t)a2, a4, 0LL);
  uint64_t v10 = a2[2];
  if (v10)
  {
    int v11 = 0;
    uint64_t v12 = 3LL;
    do
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t))(a5 + 16))(a5, v10))
      {
        switch(*(_DWORD *)(v10 + 8))
        {
          case 0:
          case 3:
            CFNullRef v15 = kCFNull;
            switch(sqlite3_column_type(a3, v11))
            {
              case 1:
                goto LABEL_8;
              case 2:
                double valuePtr = sqlite3_column_double(a3, v11);
                uint64_t v16 = a1;
                CFNumberType v17 = kCFNumberDoubleType;
                goto LABEL_12;
              case 3:
                goto LABEL_9;
              case 4:
                goto LABEL_5;
              case 5:
                goto LABEL_14;
              default:
                goto LABEL_21;
            }

          case 1:
          case 7:
          case 9:
          case 0xA:
          case 0x10:
LABEL_5:
            uint64_t v13 = sub_1000E9078(a1, a3, v11);
            goto LABEL_13;
          case 2:
          case 0xE:
LABEL_9:
            uint64_t v13 = (const __CFNull *)sub_1000E8FE0(a1, a3, v11, *(void *)(v10 + 16));
            goto LABEL_13;
          case 4:
          case 5:
          case 6:
            double v14 = sqlite3_column_double(a3, v11);
            uint64_t v13 = CFDateCreate(a1, v14);
            goto LABEL_13;
          case 8:
            double valuePtr = COERCE_DOUBLE(sqlite3_column_int64(a3, v11));
            uint64_t v16 = a1;
            CFNumberType v17 = kCFNumberSInt64Type;
LABEL_12:
            uint64_t v13 = CFNumberCreate(v16, v17, &valuePtr);
            goto LABEL_13;
          case 0xB:
          case 0xC:
LABEL_8:
            uint64_t v13 = sub_1000E8F80(a1, a3, v11);
LABEL_13:
            CFNullRef v15 = v13;
LABEL_14:
            if (!v15) {
              goto LABEL_21;
            }
            ++v11;
            CFTypeRef v18 = *(__CFDictionary **)(v9 + 48);
            uint64_t v19 = (const void *)sub_1000E7CA8((_BYTE *)v10);
            CFDictionarySetValue(v18, v19, v15);
            CFRelease(v15);
            break;
          default:
LABEL_21:
            if (v9)
            {
              CFRelease((CFTypeRef)v9);
              return 0LL;
            }

            return v9;
        }
      }

      uint64_t v20 = (const void **)sub_1000E6D50(a2, 9LL, 0LL);
      if (v20 && CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 48), *v20)) {
        *(_DWORD *)(v9 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 1;
      }
      uint64_t v10 = a2[v12++];
    }

    while (v10);
  }

  return v9;
}

const void *sub_1000E92D4( const __CFAllocator *a1, void *a2, const __CFData *a3, int a4, uint64_t a5, __CFString **a6)
{
  uint64_t v9 = (const void *)sub_1000E8E84(a1, (uint64_t)a2, a4, a5);
  uint64_t v10 = (void *)sub_1000E6D50(a2, 9LL, a6);
  if (v10 && (sub_1000E7958((uint64_t)v9, v10, a3, a6) & 1) == 0 && v9)
  {
    CFRelease(v9);
    return 0LL;
  }

  return v9;
}

const void *sub_1000E9350(uint64_t a1, const __CFDictionary *a2, __CFString **a3)
{
  uint64_t v6 = CFGetAllocator((CFTypeRef)a1);
  CFIndex v7 = (const void *)sub_1000E8E84(v6, *(void *)(a1 + 16), *(_DWORD *)(a1 + 28), *(void *)(a1 + 32));
  sub_1000E7E78((uint64_t)v7, *(CFTypeRef *)(a1 + 56));
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9) {
    return v7;
  }
  for (uint64_t i = (uint64_t *)(v8 + 24); ; ++i)
  {
    unsigned int v11 = *(_DWORD *)(v9 + 8);
    BOOL v12 = v11 > 0xA;
    int v13 = (1 << v11) & 0x6C0;
    if (!v12 && v13 != 0) {
      goto LABEL_7;
    }
    xpc_object_t value = 0LL;
    uint64_t v16 = (void *)sub_1000E705C((const void *)a1, v9, a3);
    xpc_object_t value = v16;
    if (!v16) {
      goto LABEL_15;
    }
LABEL_14:
LABEL_7:
    uint64_t v15 = *i;
    uint64_t v9 = v15;
    if (!v15) {
      return v7;
    }
  }

  uint64_t v16 = value;
  if (value) {
    goto LABEL_14;
  }
  sub_1000194E0(-50, a3, @"NULL value in dictionary");
  uint64_t v16 = value;
  if (value) {
    goto LABEL_14;
  }
LABEL_15:
  if (v7) {
    CFRelease(v7);
  }
  return 0LL;
}

__CFString ***sub_1000E9480(__CFString ***result)
{
  if (result)
  {
    id v1 = result;
    uint64_t v2 = sub_10010520C(result[2], kSecAttrAccessGroup, 0LL);
    uint64_t result = (__CFString ***)sub_1000E705C(v1, (uint64_t)v2, 0LL);
    if (result)
    {
      uint64_t v3 = (const __CFString *)result;
      CFTypeID v4 = CFGetTypeID(result);
      if (v4 == CFStringGetTypeID()) {
        return (__CFString ***)(CFStringCompare(v3, kSOSInternalAccessGroup, 0LL) == kCFCompareEqualTo);
      }
      else {
        return 0LL;
      }
    }
  }

  return result;
}

void sub_1000E950C(__CFString *a1, _BYTE *a2)
{
  if (a2 && *a2)
  {
    CFStringAppend(a1, @" WHERE ");
    *a2 = 0;
  }

  else
  {
    CFStringAppend(a1, @" AND ");
  }

void sub_1000E9558(__CFString *a1, const __CFString *a2, _BYTE *a3)
{
  CFStringAppend(a1, @"=?");
}

void sub_1000E9598(CFMutableStringRef theString, uint64_t a2)
{
  if (a2 >= 1)
  {
    unint64_t v3 = a2 + 1;
    char v4 = 1;
    do
    {
      if ((v4 & 1) == 0) {
        CFStringAppend(theString, @",");
      }
      CFStringAppend(theString, @"?");
      char v4 = 0;
      --v3;
    }

    while (v3 > 1);
  }

  CFStringAppend(theString, @""));
}

const void *sub_1000E9614(void **a1, __CFString **a2)
{
  uint64_t v4 = sub_1000E6D50(a1[2], 16LL, a2);
  if (!v4) {
    return 0LL;
  }
  BOOL v5 = sub_1000E705C(a1, v4, a2);
  uint64_t v6 = v5;
  if (v5)
  {
    CFTypeID v7 = CFGetTypeID(v5);
    if (v7 != CFDataGetTypeID()) {
      sub_100014958(1, (CFTypeRef *)a2, @"persistent ref %@ is not a data", v6);
    }
  }

  else
  {
    sub_100014958(1, (CFTypeRef *)a2, @"persistent ref %@ is not a data", 0LL);
  }

  return v6;
}

uint64_t sub_1000E96B4(uint64_t a1, const __CFData *a2, __CFString **a3)
{
  uint64_t v6 = (void *)sub_1000E6D50(*(void **)(a1 + 16), 16LL, a3);
  if (a2 && v6) {
    return sub_1000E7958(a1, v6, a2, a3);
  }
  else {
    return 1LL;
  }
}

uint64_t sub_1000E9718(void **a1, __CFString **a2)
{
  uint64_t valuePtr = 0LL;
  uint64_t v4 = sub_1000E6D50(a1[2], 8LL, a2);
  if (v4)
  {
    BOOL v5 = (const __CFNumber *)sub_1000E705C(a1, v4, a2);
    uint64_t v6 = v5;
    if (!v5
      || (CFTypeID v7 = CFGetTypeID(v5), v7 != CFNumberGetTypeID())
      || !CFNumberGetValue(v6, kCFNumberSInt64Type, &valuePtr))
    {
      sub_100014958(1, (CFTypeRef *)a2, @"rowid %@ is not a 64 bit number", v6);
    }
  }

  return valuePtr;
}

uint64_t sub_1000E97C0(void **a1, uint64_t a2, __CFString **a3)
{
  uint64_t v6 = sub_1000E6D50(a1[2], 8LL, a3);
  if (!v6) {
    return 1LL;
  }
  CFTypeID v7 = (void *)v6;
  uint64_t valuePtr = a2;
  uint64_t v8 = CFGetAllocator(a1);
  uint64_t v9 = CFNumberCreate(v8, kCFNumberSInt64Type, &valuePtr);
  if (!v9) {
    return 0LL;
  }
  uint64_t v10 = v9;
  uint64_t v11 = sub_1000E7958((uint64_t)a1, v7, v9, a3);
  CFRelease(v10);
  return v11;
}

void sub_1000E985C(uint64_t a1, __CFString **a2)
{
  unint64_t v3 = (const void **)sub_1000E6D50(*(void **)(a1 + 16), 8LL, a2);
  if (v3) {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), *v3);
  }
}

BOOL sub_1000E98A4(const void *a1, uint64_t a2, BOOL *a3, __CFString **a4)
{
  BOOL v5 = (const __CFNumber *)sub_1000E705C(a1, a2, a4);
  uint64_t v6 = v5;
  if (v5)
  {
    char valuePtr = -86;
    CFTypeID v7 = CFGetTypeID(v5);
    BOOL v8 = v7 == CFNumberGetTypeID() && CFNumberGetValue(v6, kCFNumberCharType, &valuePtr) && valuePtr == 1;
    *a3 = v8;
  }

  return v6 != 0LL;
}

uint64_t sub_1000E9934(void **a1)
{
  char v4 = -86;
  uint64_t v2 = sub_1000E6D50(a1[2], 11LL, 0LL);
  LODWORD(result) = sub_1000E98A4(a1, v2, (BOOL *)&v4, 0LL);
  if (v4) {
    return result;
  }
  else {
    return 0LL;
  }
}

const void *sub_1000E9990(void *a1)
{
  uint64_t result = sub_1000E7EC0(a1, kSecAttrSharingGroup);
  if (result)
  {
    CFTypeID v2 = CFGetTypeID(result);
    return (const void *)(v2 == CFStringGetTypeID());
  }

  return result;
}

uint64_t sub_1000E99D0(uint64_t a1, __CFString **a2)
{
  char v4 = (void *)sub_1000E6D50(*(void **)(a1 + 16), 11LL, a2);
  return sub_1000E7958(a1, v4, kCFBooleanTrue, a2);
}

BOOL sub_1000E9A18(const void *a1)
{
  id v1 = sub_1000E705C(a1, (uint64_t)&off_10028F460, 0LL);
  if (!v1) {
    return 1LL;
  }
  CFTypeID v2 = v1;
  if (qword_1002DEA70 != -1) {
    dispatch_once(&qword_1002DEA70, &stru_100286568);
  }
  return qword_1002DEA78 && CFEqual(v2, (CFTypeRef)qword_1002DEA78) != 0;
}

uint64_t sub_1000E9A9C(void **a1)
{
  char v4 = -86;
  uint64_t v2 = sub_1000E6D50(a1[2], 12LL, 0LL);
  LODWORD(result) = sub_1000E98A4(a1, v2, (BOOL *)&v4, 0LL);
  if (v4) {
    return result;
  }
  else {
    return 0LL;
  }
}

__CFData *sub_1000E9AF8(CFMutableDictionaryRef *a1, _BYTE *a2, __CFString **a3)
{
  uint64_t v6 = (const void *)sub_1000E7CA8(a2);
  if ((~*((_DWORD *)a2 + 4) & 0xALL) != 0 || (Boolean Value = (__CFData *)CFDictionaryGetValue(a1[6], v6)) == 0LL)
  {
    uint64_t v9 = (const __CFNull *)sub_1000E705C(a1, (uint64_t)a2, a3);
    if (v9)
    {
      BOOL v8 = sub_1000E9BB8((uint64_t)a2, v9, a3);
      if (v8 && (a2[16] & 8) != 0) {
        CFDictionarySetValue(a1[6], v6, v8);
      }
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    BOOL v8 = Value;
    CFRetain(Value);
  }

  return v8;
}

__CFData *sub_1000E9BB8(uint64_t a1, const __CFNull *a2, __CFString **a3)
{
  if (a2) {
    CFNullRef v5 = a2;
  }
  else {
    CFNullRef v5 = kCFNull;
  }
  if (CFEqual(v5, kCFNull) && (*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    uint64_t v6 = (const __CFString *)sub_1000E6DB8(a1, a3);
    if (!v6) {
      return 0LL;
    }
  }

  else
  {
    uint64_t v6 = (const __CFString *)CFRetain(v5);
  }

  if ((*(_BYTE *)(a1 + 16) & 8) == 0 || CFEqual(v6, kCFNull)) {
    return (__CFData *)v6;
  }
  uint64_t v9 = sub_1000E69CC(v6);
  if (v9)
  {
    uint64_t v10 = (const __CFString *)v9;
    CFTypeID v7 = sub_10001A314(v9);
    if (v6) {
      CFRelease(v6);
    }
    uint64_t v6 = v10;
  }

  else
  {
    sub_1000194E0(-26276, a3, @"failed to get attribute %@ data", *(void *)a1);
    CFTypeID v7 = 0LL;
    if (!v6) {
      return v7;
    }
  }

  CFRelease(v6);
  return v7;
}

const void *sub_1000E9CBC(void **a1, __CFString **a2)
{
  uint64_t v4 = sub_1000E6D50(a1[2], 7LL, a2);
  return sub_1000E705C(a1, v4, a2);
}

BOOL sub_1000E9CF8(CFStringRef **a1, uint64_t a2, __CFString **a3)
{
  uint64_t v6 = CFGetAllocator(a1);
  CFMutableStringRef Mutable = CFStringCreateMutable(v6, 0LL);
  CFStringAppend(Mutable, @"INSERT INTO ");
  CFStringAppend(Mutable, *a1[2]);
  CFStringAppend(Mutable, @"(");
  BOOL v8 = a1[2];
  CFStringRef v9 = v8[2];
  if (v9)
  {
    uint64_t v10 = 0LL;
    int v11 = 0;
    BOOL v12 = v8 + 3;
    do
    {
      if (((uint64_t)v9->data & 2) != 0)
      {
        isa = (const __CFString *)v9->isa;
        if (v11) {
          CFStringAppend(Mutable, @",");
        }
        ++v10;
        CFStringAppend(Mutable, isa);
        int v11 = 1;
      }

      double v14 = *v12++;
      CFStringRef v9 = v14;
    }

    while (v14);
    CFStringAppend(Mutable, @"VALUES(?"));
    if (v10 >= 2)
    {
      unint64_t v15 = v10 + 1;
      do
      {
        CFStringAppend(Mutable, @",?");
        --v15;
      }

      while (v15 > 2);
    }
  }

  else
  {
    CFStringAppend(Mutable, @"VALUES(?"));
  }

  CFStringAppend(Mutable, @""));
  uint64_t v24 = 0LL;
  CFTypeID v25 = &v24;
  uint64_t v26 = 0x2000000000LL;
  BOOL v27 = Mutable != 0LL;
  if (!Mutable) {
    goto LABEL_33;
  }
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 0x40000000LL;
  void v23[2] = sub_1000EA010;
  void v23[3] = &unk_100285EC0;
  v23[6] = a1;
  v23[7] = a3;
  void v23[4] = &stru_100285E98;
  void v23[5] = &v24;
  v23[8] = a2;
  unsigned __int8 v17 = sub_100015B70(a2, Mutable, (CFTypeRef *)a3, (uint64_t)v23);
  unsigned __int8 v18 = *((_BYTE *)v25 + 24) ? v17 : 0;
  *((_BYTE *)v25 + 24) = v18;
  CFRelease(Mutable);
  if (*((_BYTE *)v25 + 24))
  {
    uint64_t v19 = (os_log_s *)sub_10001267C("item");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138477827;
      CFTypeID v29 = a1;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "inserted %{private}@", buf, 0xCu);
    }

    sub_1000187AC(a2, 0LL, (CFArrayRef)a1);
  }

  else
  {
LABEL_33:
    if ((sub_1000E9480((__CFString ***)a1) & 1) == 0)
    {
      uint64_t v20 = (os_log_s *)sub_10001267C("item");
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        if (a3) {
          uint64_t v21 = *a3;
        }
        else {
          uint64_t v21 = 0LL;
        }
        *(_DWORD *)__int128 buf = 138478083;
        CFTypeID v29 = a1;
        __int16 v30 = 2112;
        __int128 v31 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "insert failed for item %{private}@ with %@",  buf,  0x16u);
      }
    }
  }

  BOOL v16 = *((_BYTE *)v25 + 24) != 0;
  _Block_object_dispose(&v24, 8);
  return v16;
}

CFStringRef sub_1000EA010(void *a1, sqlite3_stmt *pStmt)
{
  uint64_t v5 = a1[6];
  uint64_t v4 = (__CFString **)a1[7];
  uint64_t v6 = *(void *)(v5 + 16);
  CFTypeID v7 = *(_BYTE **)(v6 + 16);
  if (v7)
  {
    LODWORD(v_Block_object_dispose(va, 8) = 0;
    uint64_t v9 = a1[4];
    uint64_t v10 = (void *)(v6 + 24);
    while (1)
    {
      if ((*(unsigned int (**)(uint64_t, _BYTE *))(v9 + 16))(v9, v7))
      {
        uint64_t result = (const __CFString *)sub_1000E9AF8((CFMutableDictionaryRef *)v5, v7, v4);
        if (!result) {
          goto LABEL_11;
        }
        BOOL v12 = result;
        uint64_t v8 = (v8 + 1);
        int v13 = sub_1000182E4(pStmt, v8, result, (CFTypeRef *)v4);
        CFRelease(v12);
        if (!v13) {
          break;
        }
      }

      double v14 = (_BYTE *)*v10++;
      CFTypeID v7 = v14;
      if (!v14)
      {
        uint64_t v4 = (__CFString **)a1[7];
        goto LABEL_8;
      }
    }

    uint64_t result = 0LL;
  }

  else
  {
LABEL_8:
    uint64_t result = (const __CFString *)sub_100015CD8(a1[8], pStmt, (CFTypeRef *)v4, 0LL);
    if ((_DWORD)result)
    {
      unint64_t v15 = (__CFString **)a1[7];
      BOOL v16 = (void **)a1[6];
      sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1[8] + 64LL));
      uint64_t result = (const __CFString *)sub_1000E97C0(v16, insert_rowid, v15);
    }
  }

BOOL sub_1000EA118(id a1, const SecDbAttr *a2)
{
  return (LOBYTE(a2->var2) >> 1) & 1;
}

__CFError *sub_1000EA124(__CFError *result)
{
  if (result)
  {
    id v1 = result;
    if (CFErrorGetCode(result) == 19)
    {
      CFErrorDomain Domain = CFErrorGetDomain(v1);
      return (__CFError *)(CFEqual(@"com.apple.utilities.sqlite3", Domain) != 0);
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000EA178(uint64_t a1, uint64_t a2, __CFString **a3, uint64_t a4)
{
  uint64_t v27 = 0LL;
  uint64_t v28 = &v27;
  uint64_t v29 = 0x2000000000LL;
  __int16 v30 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2000000000LL;
  char v26 = -86;
  char v26 = sub_1000E9CF8((CFStringRef **)a1, a2, &v30);
  if (!*((_BYTE *)v24 + 24))
  {
    BOOL v12 = (__CFError *)v28[3];
    if (v12)
    {
      if (CFErrorGetCode(v12) == 19)
      {
        CFErrorDomain Domain = CFErrorGetDomain((CFErrorRef)v28[3]);
        if (CFEqual(@"com.apple.utilities.sqlite3", Domain))
        {
          double v14 = (CFDictionaryRef *)sub_1000EA3A4((void *)a1, a3);
          if (v14)
          {
            unint64_t v15 = v14;
            BOOL v16 = *(const __CFDictionary **)(a1 + 56);
            CFDictionaryRef v17 = v14[18];
            if (v17 != v16)
            {
              if (!v16 || (CFRetain(*(CFTypeRef *)(a1 + 56)), (CFDictionaryRef v17 = v15[18]) != 0LL)) {
                CFRelease(v17);
              }
              v15[18] = v16;
            }

            v22[0] = _NSConcreteStackBlock;
            v22[1] = 0x40000000LL;
            v22[2] = sub_1000EA42C;
            v22[3] = &unk_100285F68;
            void v22[4] = a4;
            v22[5] = &v23;
            v22[6] = &v27;
            v22[7] = a3;
            v22[8] = a1;
            v22[9] = a2;
            sub_1000EA68C(v15, a2, (CFTypeRef *)a3, 0LL, &stru_100285F00, 0LL, 0LL, (uint64_t)v22);
            sub_1000E7E78(a1, v15[18]);
            char v18 = sub_1000F8150((const void **)v15, (CFErrorRef *)a3);
            if (*((_BYTE *)v24 + 24)) {
              char v19 = v18;
            }
            else {
              char v19 = 0;
            }
            *((_BYTE *)v24 + 24) = v19;
          }
        }
      }
    }
  }

  int v8 = *((unsigned __int8 *)v24 + 24);
  uint64_t v9 = (__CFString *)v28[3];
  if (a3 && v9)
  {
    if (*a3)
    {
      if (CFErrorGetCode((CFErrorRef)*a3) != -25330) {
        goto LABEL_10;
      }
      uint64_t v10 = *a3;
      if (*a3)
      {
        *a3 = 0LL;
        CFRelease(v10);
LABEL_10:
        if (*a3) {
          goto LABEL_11;
        }
      }
    }

    unsigned int v11 = 0;
    *a3 = v9;
    goto LABEL_27;
  }

  if (v9)
  {
    if (!a3)
    {
LABEL_11:
      CFRelease(v9);
      unsigned int v11 = 0;
      goto LABEL_27;
    }

    goto LABEL_10;
  }

  unsigned int v11 = 1;
LABEL_27:
  if (v8) {
    uint64_t v20 = v11;
  }
  else {
    uint64_t v20 = 0LL;
  }
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  return v20;
}

void *sub_1000EA3A4(void *a1, __CFString **a2)
{
  uint64_t v4 = sub_1000E6EA4(a1, 1LL, 0LL, a2);
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v4;
  uint64_t v6 = sub_1000F82CC(a1[2], 0LL, 0LL, 0LL, a2);
  CFTypeID v7 = v6;
  if (v6)
  {
    int v8 = (const void *)v6[1];
    if (v8) {
      CFRelease(v8);
    }
    v7[1] = v5;
  }

  else
  {
    CFRelease(v5);
  }

  return v7;
}

void sub_1000EA42C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v19 = 0;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = sub_1000EAF18( (__CFString *)a2,  &v19,  *(CFErrorRef **)(a1 + 56));
  CFTypeRef cf = 0LL;
  int v4 = v19;
  if (!v19)
  {
    if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
      return;
    }
    uint64_t v15 = *(void *)(a1 + 32);
    if (!v15) {
      return;
    }
    (*(void (**)(uint64_t, uint64_t, CFTypeRef *))(v15 + 16))(v15, a2, &cf);
    if (!cf) {
      return;
    }
LABEL_8:
    uint64_t v10 = (const void **)sub_1000E6D50(*(void **)(a2 + 16), 8LL, *(__CFString ***)(a1 + 56));
    unsigned int v11 = (const __CFData *)sub_1000E7738(a2, v10);
    if (v11)
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = sub_1000E7958( (uint64_t)cf,  v10,  v11,  (__CFString **)(*(void *)(*(void *)(a1 + 48)
                                                                                               + 8LL)
                                                                                   + 24LL));
      uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8LL);
      int v13 = *(unsigned __int8 *)(v12 + 24);
      if (!v4 && *(_BYTE *)(v12 + 24))
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = sub_1000EB5A8( (void **)cf,  (const void *)a2,  *(__CFString ***)(a1 + 56));
        uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8LL);
        int v13 = *(unsigned __int8 *)(v12 + 24);
      }

      if (!v13)
      {
        BOOL v14 = 0;
LABEL_21:
        *(_BYTE *)(v12 + 24) = v14;
        CFRelease(cf);
        if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
        {
          uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8LL);
          CFDictionaryRef v17 = *(const void **)(v16 + 24);
          if (v17)
          {
            *(void *)(v16 + 24) = 0LL;
            CFRelease(v17);
          }
        }

        return;
      }

      BOOL v14 = sub_1000EB604( (__CFString ***)a2,  (CFStringRef **)cf,  *(void *)(a1 + 72),  (CFTypeRef *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL),  (uint64_t)&stru_100285F40);
    }

    else
    {
      BOOL v14 = sub_1000194E0( -26276,  (__CFString **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL),  @"no rowid for %@",  a2);
    }

    uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8LL);
    goto LABEL_21;
  }

  uint64_t v5 = (os_log_s *)sub_10001267C("item");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 64);
    *(_DWORD *)__int128 buf = 138478083;
    uint64_t v21 = a2;
    __int16 v22 = 2113;
    uint64_t v23 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "replacing corrupted item %{private}@ with %{private}@",  buf,  0x16u);
  }

  CFTypeID v7 = *(const void **)(a1 + 64);
  CFTypeRef cf = v7;
  CFRetain(v7);
  int v8 = *(const void ***)(a1 + 56);
  if (v8)
  {
    uint64_t v9 = *v8;
    if (*v8)
    {
      *int v8 = 0LL;
      CFRelease(v9);
    }
  }

  if (v7) {
    goto LABEL_8;
  }
}

BOOL sub_1000EA68C( CFDictionaryRef *a1, uint64_t a2, CFTypeRef *a3, Block_layout *a4, Block_layout *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v22 = 0LL;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x2000000000LL;
  char v25 = 1;
  if (a4) {
    int v13 = a4;
  }
  else {
    int v13 = &stru_100286200;
  }
  if (a5) {
    BOOL v14 = a5;
  }
  else {
    BOOL v14 = &stru_100286240;
  }
  uint64_t v15 = sub_1000EA7D0(a1, (uint64_t)v13, (uint64_t)v14, a6);
  if (v15)
  {
    uint64_t v16 = v15;
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 0x40000000LL;
    void v21[2] = sub_1000EAA70;
    v21[3] = &unk_100286290;
    v21[8] = &v22;
    v21[9] = a1;
    void v21[4] = v14;
    v21[5] = a7;
    v21[10] = a3;
    v21[11] = a2;
    v21[6] = v13;
    v21[7] = a8;
    unsigned __int8 v17 = sub_100015B70(a2, v15, a3, (uint64_t)v21);
    if (*((_BYTE *)v23 + 24)) {
      unsigned __int8 v18 = v17;
    }
    else {
      unsigned __int8 v18 = 0;
    }
    *((_BYTE *)v23 + 24) = v18;
    CFRelease(v16);
    BOOL v19 = *((_BYTE *)v23 + 24) != 0;
  }

  else
  {
    BOOL v19 = 0LL;
    *((_BYTE *)v23 + 24) = 0;
  }

  _Block_object_dispose(&v22, 8);
  return v19;
}

__CFString *sub_1000EA7D0(CFDictionaryRef *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
  CFStringAppend(Mutable, @"SELECT ");
  uint64_t v9 = (const __CFString **)*((void *)*a1 + 2);
  if (!v9)
  {
    if (((_BYTE)a1[6] & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  int v10 = 0;
  unsigned int v11 = (const __CFString ***)((char *)*a1 + 24);
  do
  {
    if ((*(unsigned int (**)(uint64_t, const __CFString **))(a2 + 16))(a2, v9))
    {
      uint64_t v12 = *v9;
      if (v10) {
        CFStringAppend(Mutable, @",");
      }
      CFStringAppend(Mutable, v12);
      int v10 = 1;
    }

    int v13 = *v11++;
    uint64_t v9 = v13;
  }

  while (v13);
  if (((_BYTE)a1[6] & 8) != 0)
  {
    if (v10) {
      CFStringAppend(Mutable, @",");
    }
LABEL_12:
    CFStringAppend(Mutable, @"persistref");
  }

uint64_t sub_1000EAA70(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1000EAB08( *(CFDictionaryRef **)(a1 + 72),  a2,  *(__CFString ***)(a1 + 80),  *(void *)(a1 + 32),  *(void *)(a1 + 40));
  if ((_DWORD)result)
  {
    uint64_t v6 = *(CFTypeRef **)(a1 + 80);
    uint64_t v5 = *(void *)(a1 + 88);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 0x40000000LL;
    _DWORD v7[2] = sub_1000EAD50;
    v7[3] = &unk_100286268;
    uint64_t v9 = *(void *)(a1 + 72);
    int v10 = a2;
    unsigned int v11 = v6;
    __int128 v8 = *(_OWORD *)(a1 + 48);
    uint64_t result = sub_100015CD8(v5, a2, v6, (uint64_t)v7);
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1000EAB08(CFDictionaryRef *a1, sqlite3_stmt *a2, __CFString **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = 0LL;
  int v34 = &v33;
  uint64_t v35 = 0x2000000000LL;
  char v36 = 1;
  uint64_t v29 = 0LL;
  __int16 v30 = &v29;
  uint64_t v31 = 0x2000000000LL;
  int v32 = 0;
  CFTypeID v7 = (const void **)*((void *)*a1 + 2);
  if (v7)
  {
    unsigned int v11 = (const void ***)((char *)*a1 + 24);
    do
    {
      if ((*(unsigned int (**)(uint64_t, const void **))(a4 + 16))(a4, v7))
      {
        Boolean Value = (const __CFArray *)CFDictionaryGetValue(a1[1], *v7);
        if (!Value)
        {
          int v18 = *((_DWORD *)v30 + 6);
          *((_DWORD *)v30 + 6) = v18 + 1;
          uint64_t v19 = (uint64_t)a1;
          uint64_t v20 = a2;
          uint64_t v21 = (uint64_t)v7;
          uint64_t v22 = 0LL;
          goto LABEL_12;
        }

        int v13 = Value;
        CFTypeID v14 = CFGetTypeID(Value);
        if (v14 != CFArrayGetTypeID())
        {
          int v18 = *((_DWORD *)v30 + 6);
          *((_DWORD *)v30 + 6) = v18 + 1;
          uint64_t v19 = (uint64_t)a1;
          uint64_t v20 = a2;
          uint64_t v21 = (uint64_t)v7;
          uint64_t v22 = v13;
LABEL_12:
          int v23 = sub_1000EAE5C(v19, v20, v18, v21, v22, a3);
          *((_BYTE *)v34 + 24) = v23;
          if (!v23) {
            break;
          }
          goto LABEL_18;
        }

        uint64_t Count = CFArrayGetCount(v13);
        if (Count < 1)
        {
          v24.id location = 0LL;
        }

        else
        {
          CFNullRef ValueAtIndex = (CFNullRef)CFArrayGetValueAtIndex(v13, 0LL);
          if (ValueAtIndex && kCFNull) {
            BOOL v17 = CFEqual(ValueAtIndex, kCFNull) != 0;
          }
          else {
            BOOL v17 = ValueAtIndex == kCFNull;
          }
          Count -= v17;
          v24.id location = v17;
        }

        context[0] = _NSConcreteStackBlock;
        context[1] = 0x40000000LL;
        context[2] = sub_1000EADF8;
        context[3] = &unk_1002861C0;
        void context[6] = a1;
        void context[7] = a2;
        void context[4] = &v33;
        void context[5] = &v29;
        context[8] = v7;
        context[9] = a3;
        v24.CFIndex length = Count;
        CFArrayApplyFunction(v13, v24, (CFArrayApplierFunction)sub_1000EAE48, context);
        if (!*((_BYTE *)v34 + 24)) {
          break;
        }
      }

void sub_1000EAD50(uint64_t a1)
{
  uint64_t v2 = sub_1000E90CC( kCFAllocatorDefault,  **(void ***)(a1 + 48),  *(sqlite3_stmt **)(a1 + 56),  *(_DWORD *)(*(void *)(a1 + 48) + 120LL),  *(void *)(a1 + 32));
  if (v2)
  {
    unint64_t v3 = (void *)v2;
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = *(const void **)(v4 + 144);
    uint64_t v6 = *(const void **)(v2 + 56);
    if (v6 != v5)
    {
      v3[7] = v5;
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    CFRelease(v3);
  }

uint64_t sub_1000EADF8(uint64_t a1, const __CFNull *a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  int v5 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  uint64_t result = sub_1000EAE5C(v3, *(sqlite3_stmt **)(a1 + 56), v5, *(void *)(a1 + 64), a2, *(__CFString ***)(a1 + 72));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1000EAE48(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t sub_1000EAE5C(uint64_t a1, sqlite3_stmt *a2, int a3, uint64_t a4, const __CFNull *a5, __CFString **a6)
{
  if (*(_DWORD *)(a4 + 8) == 8) {
    uint64_t v9 = (const __CFString *)CFNumberCreate(0LL, kCFNumberSInt64Type, (const void *)(a1 + 72));
  }
  else {
    uint64_t v9 = (const __CFString *)sub_1000E9BB8(a4, a5, a6);
  }
  int v10 = v9;
  if (!v9) {
    return 0LL;
  }
  uint64_t v11 = sub_1000182E4(a2, (a3 + 1), v9, (CFTypeRef *)a6);
  CFRelease(v10);
  return v11;
}

BOOL sub_1000EAEEC(id a1, const SecDbAttr *a2)
{
  return 0;
}

BOOL sub_1000EAEF4(id a1, const SecDbAttr *a2)
{
  int var1 = a2->var1;
  return (var1 - 7) < 3 || var1 == 16;
}

BOOL sub_1000EAF0C(id a1, const SecDbAttr *a2)
{
  return a2->var2 & 1;
}

uint64_t sub_1000EAF18(__CFString *a1, _BYTE *a2, CFErrorRef *a3)
{
  CFTypeRef cf = 0LL;
  uint64_t v6 = (const void **)sub_1000E6D50((void *)a1->data, 7LL, (__CFString **)&cf);
  CFTypeID v7 = (const __CFData *)sub_1000E705C(a1, (uint64_t)v6, (__CFString **)&cf);
  __int128 v8 = v7;
  if (v7) {
    CFRetain(v7);
  }
  CFTypeRef v9 = cf;
  if (!cf)
  {
    if (sub_1000E714C((uint64_t)a1, 1, (__CFString **)&cf))
    {
LABEL_16:
      int v18 = 0;
      goto LABEL_24;
    }

    CFTypeRef v9 = cf;
  }

  uint64_t v10 = sub_1000E6D50((void *)a1->data, 15LL, (__CFString **)&cf);
  uint64_t v11 = sub_1000E705C(a1, v10, (__CFString **)&cf);
  if (!v11) {
    goto LABEL_18;
  }
  uint64_t v12 = v11;
  CFTypeID v13 = CFGetTypeID(v11);
  if (v13 != CFDataGetTypeID()) {
    goto LABEL_18;
  }
  CFAllocatorRef v14 = CFGetAllocator(a1);
  uint64_t v15 = SecAccessControlCreateFromData(v14, v12, &cf);
  if (!v15) {
    goto LABEL_18;
  }
  Protection = (const __CFString *)SecAccessControlGetProtection(v15);
  if (!Protection || !kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly)
  {
    if (Protection == kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly) {
      goto LABEL_13;
    }
LABEL_18:
    uint64_t v19 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412547;
      CFTypeRef v56 = cf;
      __int16 v57 = 2113;
      CFTypeRef v58 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "error %@ reading item %{private}@ (corrupted)",  buf,  0x16u);
    }

    sub_10001BB24(@"Corrupted item found in keychain", 0x53C00002u);
    int v18 = 0;
    goto LABEL_21;
  }

  if (!CFEqual(Protection, kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly)) {
    goto LABEL_18;
  }
LABEL_13:
  BOOL v17 = (os_log_s *)sub_10001267C("SecWarning");
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138478083;
    CFTypeRef v56 = a1;
    __int16 v57 = 2112;
    CFTypeRef v58 = cf;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "cannot decrypt item %{private}@, item is irrecoverably lost with older passcode (error %@)",  buf,  0x16u);
  }

  int v18 = 1;
LABEL_21:
  CFTypeRef v20 = cf;
  if (cf)
  {
    CFTypeRef cf = 0LL;
    CFRelease(v20);
  }

  *a2 = 1;
LABEL_24:
  CFDataRef v21 = sub_1000E7824(a1, (uint64_t)v6);
  uint64_t v22 = v21;
  if (v8 && v21 && !CFEqual(v8, v21))
  {
    int v52 = v18;
    CFTypeID v53 = a2;
    CFIndex Length = CFDataGetLength(v8);
    CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 2 * Length);
    BytePtr = CFDataGetBytePtr(v8);
    CFIndex v26 = CFDataGetLength(v8);
    if (v26 >= 1)
    {
      CFIndex v27 = v26;
      do
      {
        unsigned int v28 = *BytePtr++;
        CFStringAppendFormat(Mutable, 0LL, @"%02X", v28);
        --v27;
      }

      while (v27);
    }

    CFIndex v29 = CFDataGetLength(v22);
    __int16 v30 = CFStringCreateMutable(kCFAllocatorDefault, 2 * v29);
    uint64_t v31 = CFDataGetBytePtr(v22);
    CFIndex v32 = CFDataGetLength(v22);
    if (v32 >= 1)
    {
      CFIndex v33 = v32;
      do
      {
        unsigned int v34 = *v31++;
        CFStringAppendFormat(v30, 0LL, @"%02X", v34);
        --v33;
      }

      while (v33);
    }

    uint64_t v35 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      char v36 = *v6;
      *(_DWORD *)__int128 buf = 138413059;
      CFTypeRef v56 = v36;
      __int16 v57 = 2112;
      CFTypeRef v58 = Mutable;
      __int16 v59 = 2112;
      uint64_t v60 = v30;
      __int16 v61 = 2113;
      unsigned int v62 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "error %@ %@ != %@ item %{private}@ (corrupted)",  buf,  0x2Au);
    }

    int v18 = v52;
    if (Mutable) {
      CFRelease(Mutable);
    }
    a2 = v53;
    if (v30) {
      CFRelease(v30);
    }
    _BYTE *v53 = 1;
  }

  if (!cf)
  {
    data = a1->data;
    uint64_t v41 = *((void *)data + 2);
    if (v41)
    {
      CFTypeID v42 = (uint64_t *)(data + 24);
      do
      {
        if ((*(_WORD *)(v41 + 16) & 0x2080) != 0)
        {
          CFTypeID v43 = sub_1000E705C(a1, v41, (__CFString **)&cf);
          if (!v43)
          {
            if (SecErrorGetOSStatus(cf) == -26275)
            {
              if (v18)
              {
                CFTypeID v45 = (os_log_s *)sub_10001267C("SecWarning");
                if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
                {
                  unsigned int v46 = *(const void **)v41;
                  *(_DWORD *)__int128 buf = 138412803;
                  CFTypeRef v56 = v46;
                  __int16 v57 = 2112;
                  CFTypeRef v58 = cf;
                  __int16 v59 = 2113;
                  uint64_t v60 = a1;
                  _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "attribute %@: %@ item %{private}@ (item lost with older passcode)",  buf,  0x20u);
                }
              }

              else
              {
                int v49 = (os_log_s *)sub_10001267C("SecError");
                if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
                {
                  CFNumberType v50 = *(const void **)v41;
                  *(_DWORD *)__int128 buf = 138412803;
                  CFTypeRef v56 = v50;
                  __int16 v57 = 2112;
                  CFTypeRef v58 = cf;
                  __int16 v59 = 2113;
                  uint64_t v60 = a1;
                  _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "error attribute %@: %@ item %{private}@ (corrupted)",  buf,  0x20u);
                }

                sub_10001BB24(@"Corrupted item found in keychain", 0x53C00002u);
              }

              *a2 = 1;
              CFTypeRef v51 = cf;
              if (cf)
              {
                CFTypeRef cf = 0LL;
                CFRelease(v51);
              }
            }

            break;
          }

          if (CFEqual(kCFNull, v43) && (*(_BYTE *)(v41 + 17) & 0x10) != 0)
          {
            __int128 v47 = (os_log_s *)sub_10001267C("SecError");
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
            {
              CFTypeID v48 = *(const void **)v41;
              *(_DWORD *)__int128 buf = 138412547;
              CFTypeRef v56 = v48;
              __int16 v57 = 2113;
              CFTypeRef v58 = a1;
              _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "error attribute %@ has NULL value in item %{private}@ (corrupted)",  buf,  0x16u);
            }

            sub_10001BB24(@"Corrupted item (attr NULL) found in keychain", 0x53C00002u);
            *a2 = 1;
            break;
          }
        }

        uint64_t v44 = *v42++;
        uint64_t v41 = v44;
      }

      while (v44);
    }
  }

  if (v22) {
    CFRelease(v22);
  }
  if (v8) {
    CFRelease(v8);
  }
  id v37 = (__CFError *)cf;
  if (a3 && cf)
  {
    if (*a3)
    {
      if (CFErrorGetCode(*a3) != -25330) {
        goto LABEL_53;
      }
      CFErrorRef v38 = *a3;
      if (*a3)
      {
        *a3 = 0LL;
        CFRelease(v38);
LABEL_53:
        if (*a3) {
          goto LABEL_54;
        }
      }
    }

    uint64_t result = 0LL;
    *a3 = v37;
    return result;
  }

  if (cf)
  {
    if (!a3)
    {
LABEL_54:
      CFRelease(v37);
      return 0LL;
    }

    goto LABEL_53;
  }

  return 1LL;
}

void *sub_1000EB5A8(void **a1, const void *a2, __CFString **a3)
{
  uint64_t result = (void *)sub_1000E6D50(a1[2], 6LL, a3);
  if (result) {
    return (void *)sub_1000EBAF4(a1, a2, result, a3);
  }
  return result;
}

BOOL sub_1000EB604(__CFString ***a1, CFStringRef **a2, uint64_t a3, CFTypeRef *a4, uint64_t a5)
{
  uint64_t v10 = (const __CFData *)sub_1000E7EC0(a1, kSecAttrPersistentReference);
  if (!v10 || CFDataGetLength(v10) != 16)
  {
    uint64_t v11 = CFUUIDCreate(kCFAllocatorDefault);
    CFUUIDBytes bytes = CFUUIDGetUUIDBytes(v11);
    uint64_t v12 = CFDataCreate(kCFAllocatorDefault, &bytes.byte0, 16LL);
    *(void *)CFTypeRef cf = 0LL;
    sub_1000E96B4((uint64_t)a2, v12, (__CFString **)cf);
    if (v11) {
      CFRelease(v11);
    }
    if (v12) {
      CFRelease(v12);
    }
    CFTypeID v13 = *(const void **)cf;
    if (*(void *)cf)
    {
      *(void *)CFTypeRef cf = 0LL;
      CFRelease(v13);
    }
  }

  CFAllocatorRef v14 = CFGetAllocator(a2);
  CFMutableStringRef Mutable = CFStringCreateMutable(v14, 0LL);
  CFStringAppend(Mutable, @"UPDATE ");
  CFStringAppend(Mutable, *a2[2]);
  CFStringAppend(Mutable, @" SET ");
  uint64_t v16 = a2[2];
  CFStringRef v17 = v16[2];
  if (v17)
  {
    int v18 = 0;
    uint64_t v19 = v16 + 3;
    do
    {
      if (((uint64_t)v17->data & 2) != 0)
      {
        isa = (const __CFString *)v17->isa;
        if (v18) {
          CFStringAppend(Mutable, @",");
        }
        CFStringAppend(Mutable, isa);
        CFStringAppend(Mutable, @"=?");
        int v18 = 1;
      }

      CFDataRef v21 = *v19++;
      CFStringRef v17 = v21;
    }

    while (v21);
  }

  bytes.byte0 = 1;
  uint64_t v22 = a1[2];
  int v23 = (const __CFString **)v22[2];
  if (v23)
  {
    CFRange v24 = (const __CFString ***)(v22 + 3);
    do
    {
      char v25 = *v24++;
      int v23 = v25;
    }

    while (v25);
  }

  *(void *)&bytes.byte0 = 0LL;
  *(void *)&bytes.byte8 = &bytes;
  uint64_t v34 = 0x2000000000LL;
  BOOL v35 = Mutable != 0LL;
  if (!Mutable) {
    goto LABEL_32;
  }
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 0x40000000LL;
  v32[2] = sub_1000EB98C;
  v32[3] = &unk_100285FB0;
  v32[6] = a1;
  v32[7] = a2;
  v32[4] = a5;
  v32[5] = &bytes;
  v32[8] = a4;
  v32[9] = a3;
  unsigned __int8 v26 = sub_100015B70(a3, Mutable, a4, (uint64_t)v32);
  unsigned __int8 v27 = *(_BYTE *)(*(void *)&bytes.byte8 + 24LL) ? v26 : 0;
  *(_BYTE *)(*(void *)&bytes.byte8 + 24LL) = v27;
  CFRelease(Mutable);
  if (*(_BYTE *)(*(void *)&bytes.byte8 + 24LL))
  {
    if ((sub_1000E9480(a1) & 1) == 0)
    {
      unsigned int v28 = (os_log_s *)sub_10001267C("item");
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CFTypeRef cf = 138478083;
        *(void *)&cf[4] = a1;
        __int16 v37 = 2112;
        uint64_t v38 = a3;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "replaced %{private}@ in %@", cf, 0x16u);
      }

      CFIndex v29 = (os_log_s *)sub_10001267C("item");
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CFTypeRef cf = 138478083;
        *(void *)&cf[4] = a2;
        __int16 v37 = 2112;
        uint64_t v38 = a3;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "    with %{private}@ in %@", cf, 0x16u);
      }
    }

    sub_1000187AC(a3, (uint64_t)a1, (CFArrayRef)a2);
    BOOL v30 = *(_BYTE *)(*(void *)&bytes.byte8 + 24LL) != 0;
  }

  else
  {
LABEL_32:
    BOOL v30 = 0LL;
  }

  _Block_object_dispose(&bytes, 8);
  return v30;
}

CFStringRef sub_1000EB98C(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(__CFString ***)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(v5 + 16);
  CFTypeRef v9 = *(_BYTE **)(v8 + 16);
  if (v9)
  {
    LODWORD(v1syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0;
    uint64_t v11 = (void *)(v8 + 24);
    while (1)
    {
      if ((v9[16] & 2) != 0)
      {
        uint64_t v12 = sub_1000E9AF8((CFMutableDictionaryRef *)v5, v9, v6);
        if (!v12) {
          goto LABEL_10;
        }
        uint64_t v10 = (v10 + 1);
        int v13 = sub_1000182E4(a2, v10, (const __CFString *)v12, (CFTypeRef *)v6);
        CFRelease(v12);
        if (!v13) {
          break;
        }
      }

      CFAllocatorRef v14 = (_BYTE *)*v11++;
      CFTypeRef v9 = v14;
      if (!v14) {
        goto LABEL_9;
      }
    }

    LODWORD(v12) = 0;
  }

  else
  {
    LODWORD(v1syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0;
LABEL_9:
    LODWORD(v12) = 1;
  }

BOOL sub_1000EBAE4(id a1, const SecDbAttr *a2)
{
  return a2->var1 == 8;
}

uint64_t sub_1000EBAF4(const void *a1, const void *a2, void *a3, __CFString **a4)
{
  uint64_t result = (uint64_t)sub_1000E705C(a2, (uint64_t)a3, a4);
  if (result)
  {
    uint64_t v8 = (const __CFDate *)result;
    uint64_t result = (uint64_t)sub_1000E705C(a1, (uint64_t)a3, a4);
    if (result)
    {
      uint64_t result = CFDateCompare((CFDateRef)result, v8, 0LL);
      if (result != 1)
      {
        CFAbsoluteTime AbsoluteTime = CFDateGetAbsoluteTime(v8);
        uint64_t v10 = CFDateCreate(kCFAllocatorDefault, AbsoluteTime + 0.001);
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = sub_1000E7958((uint64_t)a1, a3, v10, a4);
          CFRelease(v11);
          return v12;
        }

        else
        {
          return 1LL;
        }
      }
    }
  }

  return result;
}

void sub_1000EBBC4(uint64_t a1, void **a2, uint64_t *a3)
{
  if (sub_1000E9A9C(a2))
  {
    uint64_t v6 = *(const void **)(a1 + 32);
    if (v6)
    {
      CFRetain(v6);
      uint64_t v7 = *(void *)(a1 + 32);
    }

    else
    {
      uint64_t v7 = 0LL;
    }

    *a3 = v7;
    if (!*(_BYTE *)(a1 + 40))
    {
      uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 16LL);
      int v18 = *(uint64_t **)(v17 + 16);
      if (v18)
      {
        uint64_t v19 = (uint64_t **)(v17 + 24);
        do
        {
          if (CFEqual((CFTypeRef)*v18, @"UUID") || CFEqual((CFTypeRef)*v18, @"persistref")) {
            sub_1000E8B80(*(void *)(a1 + 32), a2, v18);
          }
          CFTypeRef v20 = *v19++;
          int v18 = v20;
        }

        while (v20);
      }
    }

    return;
  }

  if (!a3 || !*(_BYTE *)(a1 + 41) || *a3) {
    return;
  }
  unint64_t v49 = 0LL;
  *(void *)CFTypeRef cf = 0LL;
  uint64_t v8 = *(__CFString ****)(a1 + 32);
  CFTypeRef v9 = sub_10010520C(v8[2], kSecAttrModificationDate, (__CFString **)&v49);
  uint64_t v10 = (const __CFDate *)sub_1000E705C(v8, (uint64_t)v9, (__CFString **)cf);
  uint64_t v11 = (const __CFDate *)sub_1000E705C(a2, (uint64_t)v9, (__CFString **)cf);
  uint64_t v12 = v11;
  if (v10) {
    BOOL v13 = v11 == 0LL;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    if (SecErrorGetOSStatus(*(void *)cf) == -26275)
    {
      if (v10) {
        CFAllocatorRef v14 = v8;
      }
      else {
        CFAllocatorRef v14 = 0LL;
      }
      BOOL v15 = v12 == 0LL;
      goto LABEL_17;
    }

BOOL sub_1000EC0F4(CFStringRef **a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8 = CFGetAllocator(a1);
  CFMutableStringRef Mutable = CFStringCreateMutable(v8, 0LL);
  CFStringAppend(Mutable, @"DELETE FROM ");
  CFStringAppend(Mutable, *a1[2]);
  LOBYTE(v19) = 1;
  uint64_t v10 = a1[2];
  uint64_t v11 = (const __CFString **)v10[2];
  if (v11)
  {
    uint64_t v12 = (const __CFString ***)(v10 + 3);
    do
    {
      BOOL v13 = *v12++;
      uint64_t v11 = v13;
    }

    while (v13);
  }

  uint64_t v19 = 0LL;
  CFTypeRef v20 = &v19;
  uint64_t v21 = 0x2000000000LL;
  BOOL v22 = Mutable != 0LL;
  if (Mutable)
  {
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 0x40000000LL;
    v18[2] = sub_1000EC260;
    v18[3] = &unk_100286320;
    v18[6] = a1;
    v18[7] = a3;
    void v18[4] = a4;
    v18[5] = &v19;
    v18[8] = a2;
    unsigned __int8 v14 = sub_100015B70(a2, Mutable, a3, (uint64_t)v18);
    if (*((_BYTE *)v20 + 24)) {
      unsigned __int8 v15 = v14;
    }
    else {
      unsigned __int8 v15 = 0;
    }
    *((_BYTE *)v20 + 24) = v15;
    CFRelease(Mutable);
    BOOL v16 = *((_BYTE *)v20 + 24) != 0;
  }

  else
  {
    BOOL v16 = 0LL;
  }

  _Block_object_dispose(&v19, 8);
  return v16;
}

CFStringRef sub_1000EC260(void *a1, sqlite3_stmt *pStmt)
{
  uint64_t v5 = a1[6];
  uint64_t v4 = (__CFString **)a1[7];
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = *(_BYTE **)(v6 + 16);
  if (v7)
  {
    LODWORD(v_Block_object_dispose(va, 8) = 0;
    uint64_t v9 = a1[4];
    uint64_t v10 = (void *)(v6 + 24);
    while (1)
    {
      if ((*(unsigned int (**)(uint64_t, _BYTE *))(v9 + 16))(v9, v7))
      {
        uint64_t result = (const __CFString *)sub_1000E9AF8((CFMutableDictionaryRef *)v5, v7, v4);
        if (!result) {
          goto LABEL_9;
        }
        uint64_t v12 = result;
        uint64_t v8 = (v8 + 1);
        int v13 = sub_1000182E4(pStmt, v8, result, (CFTypeRef *)v4);
        CFRelease(v12);
        if (!v13) {
          break;
        }
      }

      unsigned __int8 v14 = (_BYTE *)*v10++;
      uint64_t v7 = v14;
      if (!v14)
      {
        uint64_t v4 = (__CFString **)a1[7];
        goto LABEL_8;
      }
    }

    uint64_t result = 0LL;
  }

  else
  {
LABEL_8:
    uint64_t result = (const __CFString *)sub_100015CD8(a1[8], pStmt, (CFTypeRef *)v4, 0LL);
  }

BOOL sub_1000EC344(id a1, const SecDbAttr *a2)
{
  return a2->var1 == 8;
}

BOOL sub_1000EC354(CFStringRef **a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  BOOL v6 = sub_1000EC0F4(a1, a2, a3, a4);
  if (v6)
  {
    uint64_t v7 = (os_log_s *)sub_10001267C("item");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138478083;
      uint64_t v10 = a1;
      __int16 v11 = 2112;
      uint64_t v12 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "deleted %{private}@ from %@",  (uint8_t *)&v9,  0x16u);
    }

    sub_1000187AC(a2, (uint64_t)a1, 0LL);
  }

  return v6;
}

uint64_t sub_1000EC42C(void **a1, void **a2, uint64_t a3, CFBooleanRef a4, int a5, __CFString **a6)
{
  uint64_t v45 = 0LL;
  unsigned int v46 = &v45;
  uint64_t v47 = 0x2000000000LL;
  char v48 = 1;
  uint64_t v41 = 0LL;
  CFTypeID v42 = (CFTypeRef *)&v41;
  uint64_t v43 = 0x2000000000LL;
  uint64_t v44 = 0LL;
  uint64_t v12 = sub_1000E6D50(a1[2], 10LL, a6);
  int v13 = sub_1000E705C(a1, v12, a6);
  uint64_t v14 = sub_1000E6D50(a2[2], 10LL, a6);
  uint64_t v15 = (uint64_t)sub_1000E705C(a2, v14, a6);
  if (v13) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  char v17 = !v16;
  *((_BYTE *)v46 + 24) = v17;
  if (!v16)
  {
    uint64_t v15 = CFEqual(v13, (CFTypeRef)v15);
    if ((_DWORD)v15)
    {
      unsigned __int8 v18 = sub_1000EB5A8(a2, a1, a6);
      *((_BYTE *)v46 + 24) = v18;
      char v19 = 1;
      goto LABEL_18;
    }
  }

  CFBooleanRef v20 = kCFBooleanFalse;
  if (a4 && kCFBooleanFalse)
  {
    uint64_t v15 = CFEqual(a4, kCFBooleanFalse);
    if (!(_DWORD)v15)
    {
LABEL_15:
    }
  }

  else if (kCFBooleanFalse != a4)
  {
    goto LABEL_15;
  }

  char v19 = 0;
LABEL_18:
  uint64_t v21 = v46;
  if (*((_BYTE *)v46 + 24))
  {
    BOOL v22 = sub_1000EB604((__CFString ***)a1, (CFStringRef **)a2, a3, v42 + 3, (uint64_t)&stru_100286030);
    uint64_t v21 = v46;
  }

  else
  {
    BOOL v22 = 0;
  }

  *((_BYTE *)v21 + 24) = v22;
  int v23 = (__CFError *)v42[3];
  if (v23)
  {
    if (CFErrorGetCode(v23) == 19)
    {
      CFErrorDomain Domain = CFErrorGetDomain((CFErrorRef)v42[3]);
      if (CFEqual(@"com.apple.utilities.sqlite3", Domain))
      {
        char v25 = (CFDictionaryRef *)sub_1000EA3A4(a2, a6);
        *((_BYTE *)v46 + 24) = v25 != 0LL;
        if (v25)
        {
          unsigned __int8 v26 = (const void **)v25;
          v40[0] = _NSConcreteStackBlock;
          v40[1] = 0x40000000LL;
          v40[2] = sub_1000EC7D0;
          v40[3] = &unk_100286118;
          v40[6] = a6;
          v40[7] = a2;
          v40[8] = a1;
          v40[9] = a3;
          void v40[4] = &v45;
          v40[5] = &v41;
          BOOL v27 = sub_1000EA68C(v25, a3, (CFTypeRef *)a6, 0LL, &stru_100286070, 0LL, 0LL, (uint64_t)v40);
          if (*((_BYTE *)v46 + 24)) {
            BOOL v28 = v27;
          }
          else {
            BOOL v28 = 0;
          }
          *((_BYTE *)v46 + 24) = v28;
          char v29 = sub_1000F8150(v26, (CFErrorRef *)a6);
          if (*((_BYTE *)v46 + 24)) {
            char v30 = v29;
          }
          else {
            char v30 = 0;
          }
          *((_BYTE *)v46 + 24) = v30;
        }
      }
    }

    uint64_t v31 = v42;
    CFIndex v32 = (__CFString *)v42[3];
    uint64_t v21 = v46;
    if (v32)
    {
      *((_BYTE *)v46 + 24) = 0;
      if (a6 && !*a6)
      {
        *a6 = v32;
        v31[3] = 0LL;
      }

      else
      {
        CFRelease(v32);
        uint64_t v21 = v46;
      }
    }
  }

  if (*((_BYTE *)v21 + 24)) {
    char v33 = v19;
  }
  else {
    char v33 = 1;
  }
  if ((v33 & 1) == 0)
  {
    if (a4 && kCFBooleanFalse)
    {
      if (CFEqual(a4, kCFBooleanFalse)) {
        goto LABEL_52;
      }
    }

    else if (kCFBooleanFalse == a4)
    {
      goto LABEL_52;
    }

    BOOL v34 = (CFStringRef **)sub_1000EC914((uint64_t)a1, a4, 0, a6);
    *((_BYTE *)v46 + 24) = v34 != 0LL;
    if (v34)
    {
      BOOL v35 = v34;
      uint64_t v36 = CFUUIDCreate(kCFAllocatorDefault);
      int v37 = sub_1000E8AF8((uint64_t)v35, kSecAttrPersistentReference, v36, a6);
      if (v37)
      {
        sub_1000E985C((uint64_t)v35, a6);
        LOBYTE(v37) = sub_1000E9CF8(v35, a3, a6);
      }

      *((_BYTE *)v46 + 24) = v37;
      if (v36) {
        CFRelease(v36);
      }
      CFRelease(v35);
    }
  }

void sub_1000EC7D0(uint64_t a1, __CFString *a2)
{
  unsigned __int8 v13 = 0;
  char v4 = sub_1000EAF18(a2, &v13, *(CFErrorRef **)(a1 + 48));
  int v5 = 0;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v4;
  int v6 = v13;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    BOOL v7 = v13 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    if (sub_1000E9A9C(a2))
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = sub_1000EB5A8( *(void ***)(a1 + 56),  a2,  *(__CFString ***)(a1 + 48));
      int v5 = 1;
    }

    else
    {
      int v5 = 0;
    }
  }

  if (v6) {
    int v5 = 1;
  }
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    BOOL v8 = v5 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = sub_1000EC354( *(CFStringRef ***)(a1 + 64),  *(void *)(a1 + 72),  *(CFTypeRef **)(a1 + 48),  (uint64_t)&stru_1002860B0);
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8LL);
    if (*(_BYTE *)(v9 + 24))
    {
      BOOL v10 = sub_1000EB604( (__CFString ***)a2,  *(CFStringRef ***)(a1 + 56),  *(void *)(a1 + 72),  *(CFTypeRef **)(a1 + 48),  (uint64_t)&stru_1002860F0);
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8LL);
    }

    else
    {
      BOOL v10 = 0;
    }

    *(_BYTE *)(v9 + 24) = v10;
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v12 = *(const void **)(v11 + 24);
    if (v12)
    {
      *(void *)(v11 + 24) = 0LL;
      CFRelease(v12);
    }
  }

const void *sub_1000EC914(uint64_t a1, const __CFData *a2, int a3, __CFString **a4)
{
  BOOL v8 = CFGetAllocator((CFTypeRef)a1);
  uint64_t v9 = (const void *)sub_1000E8E84(v8, *(void *)(a1 + 16), *(_DWORD *)(a1 + 28), *(void *)(a1 + 32));
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(v10 + 16);
  if (!v11) {
    return v9;
  }
  for (uint64_t i = (uint64_t *)(v10 + 24); ; ++i)
  {
    unsigned int v13 = *(_DWORD *)(v11 + 8);
    if (v13 == 12)
    {
      uint64_t v14 = (uint64_t)v9;
      uint64_t v15 = (void *)v11;
      BOOL v16 = kCFBooleanTrue;
LABEL_13:
      if ((sub_1000E7958(v14, v15, v16, a4) & 1) == 0) {
        break;
      }
      goto LABEL_14;
    }

    uint64_t v17 = *(void *)(v11 + 16);
    if ((v17 & 1) != 0 || (v13 <= 0xE ? (BOOL v18 = ((1 << v13) & 0x4120) == 0) : (BOOL v18 = 1), !v18 || (v17 & 0x2000) != 0))
    {
      char v19 = (const __CFData *)sub_1000E705C((const void *)a1, v11, a4);
      if (!v19) {
        break;
      }
      CFBooleanRef v20 = v19;
      if (CFEqual(kCFNull, v19)) {
        goto LABEL_14;
      }
      uint64_t v14 = (uint64_t)v9;
      uint64_t v15 = (void *)v11;
      BOOL v16 = v20;
      goto LABEL_13;
    }

    if (v13 != 6)
    {
      if (a2 && v13 == 13) {
        sub_1000E7958((uint64_t)v9, (void *)v11, a2, a4);
      }
      goto LABEL_14;
    }

    if (a3) {
      sub_1000E8B80((uint64_t)v9, (const void *)a1, (uint64_t *)v11);
    }
LABEL_14:
    uint64_t v21 = *i;
    uint64_t v11 = v21;
    if (!v21) {
      return v9;
    }
  }

  if (v9)
  {
    CFRelease(v9);
    return 0LL;
  }

  return v9;
}

BOOL sub_1000ECAB4(id a1, const SecDbAttr *a2)
{
  return a2->var2 & 1;
}

BOOL sub_1000ECAC0(id a1, const SecDbAttr *a2)
{
  return a2->var1 == 8;
}

BOOL sub_1000ECAD0(id a1, const SecDbAttr *a2)
{
  return a2->var1 == 8;
}

BOOL sub_1000ECAE0(id a1, const SecDbAttr *a2)
{
  return a2->var1 == 8;
}

CFStringRef **sub_1000ECAF0(CFStringRef **a1, uint64_t a2, CFBooleanRef cf1, int a4, CFTypeRef *a5)
{
  if (cf1 && kCFBooleanFalse)
  {
    if (CFEqual(cf1, kCFBooleanFalse)) {
      return (CFStringRef **)sub_1000EC354(a1, a2, a5, (uint64_t)&stru_100286198);
    }
  }

  else if (kCFBooleanFalse == cf1)
  {
    return (CFStringRef **)sub_1000EC354(a1, a2, a5, (uint64_t)&stru_100286198);
  }

  uint64_t result = (CFStringRef **)sub_1000EC914((uint64_t)a1, cf1, a4, (__CFString **)a5);
  if (result)
  {
    uint64_t v11 = result;
    BOOL v12 = sub_1000EB604((__CFString ***)a1, result, a2, a5, (uint64_t)&stru_100286158);
    CFRelease(v11);
    return (CFStringRef **)v12;
  }

  return result;
}

BOOL sub_1000ECBC4(id a1, const SecDbAttr *a2)
{
  return a2->var1 == 8;
}

BOOL sub_1000ECBD4(id a1, const SecDbAttr *a2)
{
  return a2->var1 == 8;
}

void sub_1000ED0F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id location)
{
}

void sub_1000ED1FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000EDCBC(_Unwind_Exception *a1)
{
}

void sub_1000EE140( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000EE2B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000EE8DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id location)
{
}

void sub_1000EF074( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000EF5B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000EF898( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
}

void sub_1000F0010(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 name]);
  int v6 = sub_10001253C((const __CFString *)+[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  v5,  @"state-rpc"));
  BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) result]);
    uint64_t v10 = objc_claimAutoreleasedReturnValue([v9 error]);
    uint64_t v11 = (void *)v10;
    BOOL v12 = @"no error";
    if (v10) {
      BOOL v12 = (const __CFString *)v10;
    }
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v19 = v8;
    __int16 v20 = 2112;
    uint64_t v21 = v12;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Returning '%@' result: %@", buf, 0x16u);
  }

  uint64_t v13 = *(void *)(a1 + 56);
  if (v13)
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) result]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 error]);
    (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v15);
  }

  BOOL v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) result]);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 error]);
  [v4 setError:v17];
}

void sub_1000F01B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained name]);
  id v4 = sub_10001253C((const __CFString *)+[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  v3,  @"state-rpc"));
  int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
    uint64_t v8 = (void *)v7;
    uint64_t v9 = @"no error";
    if (v7) {
      uint64_t v9 = (const __CFString *)v7;
    }
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v13 = v6;
    __int16 v14 = 2112;
    uint64_t v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Returning '%@' result: %@", buf, 0x16u);
  }

  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v11);
}

void sub_1000F0304(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained currentState]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained timeoutErrorForState:v3]);
  [v2 onqueueHandleStartTimeout:v4];
}

id sub_1000F0378(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueueRegisterMultiStateArrivalWatcher:*(void *)(a1 + 40) startTimeout:*(void *)(a1 + 48)];
}

void sub_1000F0388(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateMachineWatchers]);
  [v2 addObject:*(void *)(a1 + 40)];

  [*(id *)(a1 + 32) _onqueuePokeStateMachine];
  if ((unint64_t)(*(void *)(a1 + 48) + 1LL) >= 2)
  {
    id location = (id)0xAAAAAAAAAAAAAAAALL;
    objc_initWeak(&location, *(id *)(a1 + 32));
    dispatch_time_t v3 = dispatch_time(0LL, *(void *)(a1 + 48));
    id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000F04A8;
    block[3] = &unk_100290FC8;
    objc_copyWeak(&v7, &location);
    id v6 = *(id *)(a1 + 40);
    dispatch_after(v3, v4, block);

    objc_destroyWeak(&v7);
    objc_destroyWeak(&location);
  }

void sub_1000F0494(_Unwind_Exception *a1)
{
}

void sub_1000F04A8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v2 = *(void **)(a1 + 32);
  dispatch_time_t v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained currentState]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained timeoutErrorForState:v3]);
  [v2 onqueueHandleStartTimeout:v4];
}

void sub_1000F051C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateMachineRequests]);
  [v2 addObject:*(void *)(a1 + 40)];

  [*(id *)(a1 + 32) _onqueuePokeStateMachine];
  if ((unint64_t)(*(void *)(a1 + 48) + 1LL) >= 2)
  {
    id location = (id)0xAAAAAAAAAAAAAAAALL;
    objc_initWeak(&location, *(id *)(a1 + 32));
    dispatch_time_t v3 = dispatch_time(0LL, *(void *)(a1 + 48));
    id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000F063C;
    block[3] = &unk_100290FC8;
    objc_copyWeak(&v7, &location);
    id v6 = *(id *)(a1 + 40);
    dispatch_after(v3, v4, block);

    objc_destroyWeak(&v7);
    objc_destroyWeak(&location);
  }

void sub_1000F0628(_Unwind_Exception *a1)
{
}

void sub_1000F063C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v2 = *(void **)(a1 + 32);
  dispatch_time_t v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained currentState]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained timeoutErrorForState:v3]);
  [v2 onqueueHandleStartTimeout:v4];
}

id sub_1000F06B0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) holdStateMachineOperation]);

  if (v2)
  {
    dispatch_time_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationQueue]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) holdStateMachineOperation]);
    [v3 addOperation:v4];

    [*(id *)(a1 + 32) setHoldStateMachineOperation:0];
  }

  [*(id *)(a1 + 32) setHalted:1];
  [*(id *)(a1 + 32) setAllowPendingFlags:0];
  return [*(id *)(a1 + 32) _onqueuePokeStateMachine];
}

void sub_1000F0748(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) holdStateMachineOperation]);

  if (v2)
  {
    dispatch_time_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationQueue]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) holdStateMachineOperation]);
    [v3 addOperation:v4];

    [*(id *)(a1 + 32) setHoldStateMachineOperation:0];
  }

void sub_1000F07D0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nextStateMachineCycleOperation]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v2 == 0LL;
}

id sub_1000F080C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
  dispatch_time_t v3 = sub_10001253C((const __CFString *)+[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  v2,  @"test"));
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Releasing state machine test pause from %@",  buf,  0xCu);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) testHoldStates]);
  [v6 removeObject:*(void *)(a1 + 40)];

  return [*(id *)(a1 + 32) _onqueuePokeStateMachine];
}

void sub_1000F0918(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) testHoldStates]);
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_1000F0958(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    id v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000F0B34;
    block[3] = &unk_1002927F0;
    void block[4] = v3;
    dispatch_sync(v2, block);

    id WeakRetained = v3;
  }
}

void sub_1000F09DC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    id v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000F0A60;
    block[3] = &unk_1002927F0;
    void block[4] = v3;
    dispatch_sync(v2, block);

    id WeakRetained = v3;
  }
}

id sub_1000F0A60(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
  id v3 = sub_10001253C((const __CFString *)+[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  v2,  @"pending-flag"));
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Network is reachable", buf, 2u);
  }

  objc_msgSend( *(id *)(a1 + 32),  "setConditionChecksInFlight:",  (unint64_t)objc_msgSend(*(id *)(a1 + 32), "conditionChecksInFlight") & 0xFFFFFFFFFFFFFFFDLL);
  [*(id *)(a1 + 32) _onqueueRecheckConditions];
  return [*(id *)(a1 + 32) _onqueueSendAnyPendingFlags];
}

id sub_1000F0B34(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
  id v3 = sub_10001253C((const __CFString *)+[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  v2,  @"pending-flag"));
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Unlock occurred", buf, 2u);
  }

  objc_msgSend( *(id *)(a1 + 32),  "setConditionChecksInFlight:",  (unint64_t)objc_msgSend(*(id *)(a1 + 32), "conditionChecksInFlight") & 0xFFFFFFFFFFFFFFFELL);
  [*(id *)(a1 + 32) _onqueueRecheckConditions];
  return [*(id *)(a1 + 32) _onqueueSendAnyPendingFlags];
}

uint64_t sub_1000F0C08(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_1000F0C18(uint64_t a1)
{
}

void sub_1000F0C20(uint64_t a1)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pendingFlags", 0));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 allKeys]);

  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v12 + 1) + 8LL * (void)v7);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pendingFlags]);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v8]);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 description]);
        [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v11 forKeyedSubscript:v8];

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v5);
  }
}

id sub_1000F0D80(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAllowPendingFlags:0];
}

void sub_1000F0D8C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000F0E0C;
  block[3] = &unk_1002927F0;
  void block[4] = WeakRetained;
  dispatch_sync(v1, block);
}

id sub_1000F0E0C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
  id v3 = sub_10001253C((const __CFString *)+[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  v2,  @"pending-flag"));
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Finished waiting for operation", buf, 2u);
  }

  return [*(id *)(a1 + 32) _onqueueSendAnyPendingFlags];
}

id sub_1000F0EC0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueueHandlePendingFlag:*(void *)(a1 + 40)];
}

id sub_1000F0ECC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueueHandlePendingFlag:*(void *)(a1 + 40)];
}

id sub_1000F0ED8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueueHandleFlag:*(void *)(a1 + 40)];
}

id sub_1000F0EE4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueuePokeStateMachine];
}

void sub_1000F0EEC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000F0F84;
  block[3] = &unk_100290788;
  void block[4] = WeakRetained;
  id v5 = *(id *)(a1 + 32);
  dispatch_sync(v2, block);
}

id sub_1000F0F84(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
  id v3 = sub_10001253C((const __CFString *)+[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  v2,  @"state"));
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) nextState]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) intendedState]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentFlags]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 contentsAsString]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pendingFlagsString]);
    uint64_t v10 = *(void **)(a1 + 40);
    uint64_t v11 = objc_claimAutoreleasedReturnValue([v10 error]);
    __int128 v12 = (void *)v11;
    *(_DWORD *)__int128 buf = 138413570;
    __int128 v13 = @"(no error)";
    uint64_t v38 = v5;
    if (v11) {
      __int128 v13 = (const __CFString *)v11;
    }
    __int16 v39 = 2112;
    int v40 = v6;
    __int16 v41 = 2112;
    CFTypeID v42 = v8;
    __int16 v43 = 2112;
    uint64_t v44 = v9;
    __int16 v45 = 2112;
    unsigned int v46 = v10;
    __int16 v47 = 2112;
    char v48 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Finishing state transition attempt (ending in %@, intended: %@, f:[%@], p:[%@]): %@ %@",  buf,  0x3Eu);
  }

  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateMachineWatchers]);
  id v15 = [v14 countByEnumeratingWithState:&v32 objects:v36 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v33;
    do
    {
      for (uint64_t i = 0LL; i != v16; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v33 != v17) {
          objc_enumerationMutation(v14);
        }
        uint64_t v19 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)i);
        __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
        uint64_t v21 = sub_10001253C((const __CFString *)+[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  v20,  @"state"));
        BOOL v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);

        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v38 = v19;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "notifying watcher: %@", buf, 0xCu);
        }

        [v19 onqueueHandleTransition:*(void *)(a1 + 40)];
      }

      id v16 = [v14 countByEnumeratingWithState:&v32 objects:v36 count:16];
    }

    while (v16);
  }

  int v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateMachineWatchers]);
  uint64_t v24 = (char *)[v23 count];

  if ((uint64_t)(v24 - 1) >= 0)
  {
    do
    {
      --v24;
      char v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateMachineWatchers]);
      unsigned __int8 v26 = (void *)objc_claimAutoreleasedReturnValue([v25 objectAtIndexedSubscript:v24]);
      BOOL v27 = (void *)objc_claimAutoreleasedReturnValue([v26 result]);
      unsigned int v28 = [v27 isFinished];

      if (v28)
      {
        char v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateMachineWatchers]);
        [v29 removeObjectAtIndex:v24];
      }
    }

    while ((uint64_t)v24 > 0);
  }

  char v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) nextState]);
  [*(id *)(a1 + 32) setCurrentState:v30];

  [*(id *)(a1 + 32) setNextStateMachineCycleOperation:0];
  return [*(id *)(a1 + 32) _onqueueStartNextStateMachineOperation:1];
}

void sub_1000F1334(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mutableStateConditions]);
  id v2 = [v5 copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = v2;
}

void sub_1000F1384(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000F1410;
  block[3] = &unk_1002927F0;
  id v5 = WeakRetained;
  id v3 = WeakRetained;
  dispatch_sync(v2, block);
}

id sub_1000F1410(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueueSendAnyPendingFlags];
}

BOOL sub_1000F141C( const __CFData *a1, uint64_t a2, const __CFData *a3, __CFData *a4, const __CFDictionary *a5, __CFData **a6, int a7, char a8, CFTypeRef *a9)
{
  *(void *)&__int128 v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  bytes[0] = v16;
  bytes[1] = v16;
  CFMutableStringRef Mutable = CFDataCreateMutable(0LL, 0LL);
  CFDataSetLength(Mutable, 72LL);
  uint64_t Constraints = SecAccessControlGetConstraints(a2);
  uint64_t v22 = Constraints;
  else {
    int v23 = 3;
  }
  int v86 = a6;
  if (!Constraints)
  {
    uint64_t v24 = a3;
    char v25 = a1;
    unsigned int v83 = v23;
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, a4);
    BOOL v27 = MutableCopy;
    if (a5)
    {
      context[0] = _NSConcreteStackBlock;
      context[1] = 3221225472LL;
      context[2] = sub_1000F1BD8;
      context[3] = &unk_100293110;
      void context[4] = MutableCopy;
      CFDictionaryApplyFunction(a5, (CFDictionaryApplierFunction)sub_1000F1BE0, context);
    }

    if (v27)
    {
      CFDictionaryRemoveValue(v27, kSecAttrAccessControl);
      a4 = sub_100019F48((const __CFString *)v27, a9, v28, v29, v30);
      CFRelease(v27);
      a1 = v25;
      a3 = v24;
      uint64_t v22 = 0LL;
      if (a4) {
        goto LABEL_12;
      }
    }

    else
    {
      a4 = 0LL;
    }

void sub_1000F1BD8(uint64_t a1, const void *a2, const void *a3)
{
}

uint64_t sub_1000F1BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

uint64_t sub_1000F1BF8(const void *a1, __CFString **a2)
{
  if (!a1)
  {
    sub_1000194E0(-50, a2, @"accessible attribute %@ not a string", 0LL);
    return 0LL;
  }

  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFStringGetTypeID())
  {
    sub_1000194E0(-50, a2, @"accessible attribute %@ not a string", a1);
    return 0LL;
  }

  if (CFEqual(a1, kSecAttrAccessibleWhenUnlocked)) {
    return 6LL;
  }
  if (CFEqual(a1, kSecAttrAccessibleAfterFirstUnlock)) {
    return 7LL;
  }
  if (CFEqual(a1, kSecAttrAccessibleAlwaysPrivate)) {
    return 8LL;
  }
  if (CFEqual(a1, kSecAttrAccessibleWhenUnlockedThisDeviceOnly)) {
    return 9LL;
  }
  if (CFEqual(a1, kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly)) {
    return 10LL;
  }
  if (CFEqual(a1, kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate)) {
    return 11LL;
  }
  if (!CFEqual(a1, kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly))
  {
    sub_1000194E0(-50, a2, @"accessible attribute %@ unknown", a1);
    return 0LL;
  }

  return 12LL;
}

BOOL sub_1000F1D54( const __CFData *a1, uint64_t a2, const __CFData *a3, CFDictionaryRef theDict, const __CFDictionary *a5, const __CFDictionary *a6, __CFData **a7, int a8, char a9, CFTypeRef *a10)
{
  if ((_DWORD)a1 || a9)
  {
    if ((a9 & 1) == 0)
    {
      if (qword_1002DEA50 != -1) {
        dispatch_once(&qword_1002DEA50, &stru_1002863D0);
      }
      dispatch_source_merge_data((dispatch_source_t)qword_1002DEA58, 1uLL);
    }

    CFIndex Count = CFDictionaryGetCount(theDict);
    CFIndex v23 = CFDictionaryGetCount(a5);
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, v23 + Count, a5);
    context[0] = _NSConcreteStackBlock;
    context[1] = 3221225472LL;
    context[2] = sub_1000F205C;
    context[3] = &unk_100293110;
    void context[4] = MutableCopy;
    CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)sub_1000F1BE0, context);
    BOOL v25 = sub_1000F141C(a1, a2, a3, MutableCopy, a6, a7, a8, a9, a10);
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
  }

  else
  {
    Protection = (const void *)SecAccessControlGetProtection(a2);
    uint64_t v19 = sub_1000F1BF8(Protection, (__CFString **)a10);
    if ((_DWORD)v19)
    {
      uint64_t v20 = v19;
      __int16 v39 = a7;
      uint64_t v40 = objc_autoreleasePoolPush();
      if (a5) {
        id v21 = -[__CFDictionary mutableCopy](a5, "mutableCopy");
      }
      else {
        id v21 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      }
      unsigned __int8 v26 = v21;
      [v21 addEntriesFromDictionary:a6];
      BOOL v27 = (void *)SecAccessControlCopyData(a2);
      [v26 setObject:v27 forKeyedSubscript:@"SecAccessControl"];

      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 UUIDString]);

      uint64_t v30 = -[SecDbKeychainItemV7 initWithSecretAttributes:metadataAttributes:tamperCheck:keyclass:]( objc_alloc(&OBJC_CLASS___SecDbKeychainItemV7),  "initWithSecretAttributes:metadataAttributes:tamperCheck:keyclass:",  theDict,  v26,  v29,  v20);
      id v41 = 0LL;
      CFTypeID v31 = (void *)objc_claimAutoreleasedReturnValue( -[SecDbKeychainItemV7 encryptedBlobWithKeybag:accessControl:acmContext:error:]( v30,  "encryptedBlobWithKeybag:accessControl:acmContext:error:",  0LL,  a2,  a3,  &v41));
      id v32 = v41;
      __int128 v33 = v32;
      BOOL v25 = v31 != 0LL;
      if (v31)
      {
        id v34 = objc_claimAutoreleasedReturnValue( +[NSMutableData dataWithLength:]( NSMutableData, "dataWithLength:", (char *)[v31 length] + 4));
        *(_DWORD *)[v34 mutableBytes] = 8;
        id v35 = v34;
        uint64_t v36 = (char *)[v35 mutableBytes] + 4;
        id v37 = v31;
        memcpy(v36, [v37 bytes], (size_t)objc_msgSend(v37, "length"));
        *__int16 v39 = (__CFData *)v35;
      }

      else if (a10)
      {
        *a10 = v32;
      }

      objc_autoreleasePoolPop(v40);
    }

    else
    {
      return 0LL;
    }
  }

  return v25;
}

void sub_1000F205C(uint64_t a1, const void *a2, const void *a3)
{
}

void sub_1000F2064(id a1)
{
  dispatch_source_t v1 = sub_10001A100("non-device keybag", 2LL);
  id v2 = (void *)qword_1002DEA58;
  qword_1002DEA58 = (uint64_t)v1;

  id v3 = (dispatch_object_s *)qword_1002DEA58;
  context = dispatch_get_context((dispatch_object_t)qword_1002DEA58);
  context[2] = _Block_copy(&stru_1002863F0);
  dispatch_activate(v3);
}

void sub_1000F20C0(id a1)
{
  dispatch_source_t v1 = sub_10001267C("SecWarning");
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "ks_encrypt_data: called with non-device keybag - call should be rerouted to ks_encrypt_data_legacy",  v3,  2u);
  }
}

uint64_t sub_1000F212C( uint64_t a1, uint64_t a2, char *a3, void *a4, const __CFData *a5, const __CFData *a6, uint64_t a7, const __CFString *a8, const void **a9, unsigned int *a10, char a11, _DWORD *a12, __CFString **a13)
{
  __int16 v117 = a8;
  int v116 = a5;
  CFTypeRef v121 = a4;
  int v118 = a3;
  BOOL v18 = a9;
  uint64_t v17 = a10;
  CFMutableStringRef Mutable = CFDataCreateMutable(0LL, 32LL);
  CFDataSetLength(Mutable, 32LL);
  if (a9) {
    *a9 = 0LL;
  }
  if (a10) {
    *a10 = 0;
  }
  id v130 = 0LL;
  __int128 v131 = 0LL;
  uint64_t v129 = 0LL;
  unint64_t Length = CFDataGetLength(a6);
  BytePtr = CFDataGetBytePtr(a6);
  if (Length <= 3)
  {
    uint64_t v22 = sub_1000194E0(-26275, a13, @"ks_decrypt_data: Check for underflow (length)");
    CFIndex v23 = 0LL;
    uint64_t v24 = 0LL;
    CFTypeRef v122 = 0LL;
    BOOL v25 = 0LL;
    unsigned int v26 = 0;
    goto LABEL_83;
  }

  BOOL v27 = BytePtr;
  __int128 v120 = a13;
  __int16 v115 = a9;
  int v114 = a10;
  uint64_t v28 = (unsigned int *)(BytePtr + 4);
  int v29 = *(_DWORD *)BytePtr;
  unsigned int v30 = *(_DWORD *)BytePtr & 0x7FFFFFFF;
  else {
    CFTypeID v31 = 0LL;
  }
  if (v29 < 0) {
    uint64_t v32 = 12LL;
  }
  else {
    uint64_t v32 = 0LL;
  }
  unint64_t v33 = Length - 4;
  uint64_t v119 = *(_DWORD *)BytePtr & 0x7FFFFFFF;
  if (v30 >= 7)
  {
    dataOutAvailable = (char *)objc_autoreleasePoolPush();
    id v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v28, v33));
    id v128 = 0LL;
    id v35 = -[SecDbKeychainItemV7 initWithData:decryptionKeybag:error:]( objc_alloc(&OBJC_CLASS___SecDbKeychainItemV7),  "initWithData:decryptionKeybag:error:",  v34,  a1,  &v128);
    id v36 = v128;
    if (a12) {
      *a12 = -[SecDbKeychainItemV7 keyclass](v35, "keyclass");
    }
    id v127 = v36;
    id v37 = (void *)objc_claimAutoreleasedReturnValue(-[SecDbKeychainItemV7 metadataAttributesWithError:](v35, "metadataAttributesWithError:", &v127));
    id v38 = v127;

    id v39 = [v37 mutableCopy];
    unsigned int v40 = 0;
    uint64_t v24 = 0LL;
    BOOL v18 = v115;
    id v41 = 0LL;
    if (!v39 || v38) {
      goto LABEL_78;
    }
    CFTypeID v42 = (void *)objc_claimAutoreleasedReturnValue([v39 objectForKeyedSubscript:@"SecAccessControl"]);
    id v41 = (const void *)SecAccessControlCreateFromData(0LL, v42, v120);
    [v39 removeObjectForKey:@"SecAccessControl"];
    if (CFEqual(@"odel", v118))
    {
      id v126 = 0LL;
      unsigned int v40 = -[SecDbKeychainItemV7 deleteWithAcmContext:accessControl:callerAccessGroups:keyDiversify:error:]( v35,  "deleteWithAcmContext:accessControl:callerAccessGroups:keyDiversify:error:",  v116,  v41,  v117,  (_DWORD)v119 != 7,  &v126);
      id v38 = v126;
      if (!v40)
      {
LABEL_62:
        uint64_t v24 = 0LL;
LABEL_77:

LABEL_78:
        CFTypeRef v122 = v41;
        if (v120 && !v40) {
          void *v120 = (__CFString *)v38;
        }

        objc_autoreleasePoolPop(dataOutAvailable);
        CFIndex v23 = 0LL;
        BOOL v25 = 0LL;
        uint64_t v22 = v40 != 0;
        uint64_t v17 = v114;
        goto LABEL_82;
      }
    }

    else if ((a11 & 1) != 0 || SecAccessControlGetConstraints(v41))
    {
      id v125 = 0LL;
      uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue( -[SecDbKeychainItemV7 secretAttributesWithAcmContext:accessControl:callerAccessGroups:keyDiversify:error:]( v35,  "secretAttributesWithAcmContext:accessControl:callerAccessGroups:keyDiversify:error:",  v116,  v41,  v117,  (_DWORD)v119 != 7,  &v125));
      id v57 = v125;
      id v38 = v57;
      if (v56)
      {
        if (a11) {
          [v39 addEntriesFromDictionary:v56];
        }
        unsigned int v40 = 1;
      }

      else
      {
        id v64 = [v57 code];
        unsigned int v40 = 0;
        if ((_DWORD)v119 == 8 && v64 == (id)-26275LL)
        {
          size_t v65 = sub_10001267C("SecError");
          uint64_t v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
          if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = 8;
            _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "ks_decrypt_data failed to decrypt secretdata: version %u mismatch with content",  buf,  8u);
          }

          unsigned int v40 = 0;
        }
      }

      BOOL v18 = v115;
      if (!v40) {
        goto LABEL_62;
      }
    }

    else
    {
      id v38 = 0LL;
    }

    uint64_t v24 = (__CFDictionary *)v39;
    unsigned int v40 = 1;
    goto LABEL_77;
  }

  if (v30 - 4 > 2)
  {
    if (v33 <= 3)
    {
      uint64_t v43 = @"ks_decrypt_data: Check for underflow (keyclass)";
      goto LABEL_28;
    }

    unsigned int v112 = *v28;
    unsigned int v47 = (v112 & 0x1F) - 6;
    if (v47 <= 6 && (uint64_t v48 = *(void *)*(&off_100286410 + v47)) != 0)
    {
      LODWORD(dataOutAvailable) = v30 - 4;
      uint64_t v110 = v32;
      __int16 v111 = v31;
      int v49 = (const void *)SecAccessControlCreate(kCFAllocatorDefault, v120);
      if (v49)
      {
        CFTypeRef v122 = v49;
        if ((SecAccessControlSetProtection(v49, v48, v120) & 1) != 0)
        {
          uint64_t v22 = (uint64_t)(v27 + 8);
          unint64_t v45 = Length - 8;
          uint64_t v17 = v114;
          goto LABEL_38;
        }

        BOOL v83 = sub_1000194E0(-26275, v120, @"ks_decrypt_data: SecAccessControlSetProtection failed");
LABEL_117:
        uint64_t v22 = v83;
        CFIndex v23 = 0LL;
        uint64_t v24 = 0LL;
        goto LABEL_30;
      }

      uint64_t v43 = @"ks_decrypt_data: SecAccessControlCreate failed";
    }

    else
    {
      uint64_t v43 = @"ks_decrypt_data: invalid keyclass detected";
    }

    unsigned int v46 = v120;
    goto LABEL_29;
  }

  if (v33 <= 3)
  {
    uint64_t v43 = @"ks_decrypt_data: Check for underflow (prot_length)";
LABEL_28:
    unsigned int v46 = v120;
LABEL_29:
    uint64_t v22 = sub_1000194E0(-26275, v46, v43);
    CFIndex v23 = 0LL;
    uint64_t v24 = 0LL;
    CFTypeRef v122 = 0LL;
LABEL_30:
    BOOL v25 = 0LL;
LABEL_31:
    uint64_t v17 = v114;
LABEL_32:
    BOOL v18 = v115;
LABEL_82:
    unsigned int v26 = v119;
    goto LABEL_83;
  }

  unint64_t v44 = *v28;
  unint64_t v45 = Length - 8 - v44;
  if (Length - 8 < v44)
  {
    uint64_t v43 = @"ks_decrypt_data: Check for underflow (prot)";
    goto LABEL_28;
  }

  LODWORD(dataOutAvailable) = v30 - 4;
  uint64_t v110 = v32;
  __int16 v111 = v31;
  CFIndex v58 = &BytePtr[v44 + 8];
  *(void *)__int128 buf = 0LL;
  sub_100019634(0LL, (CFBooleanRef *)buf, 0LL, BytePtr + 8, (uint64_t)v58);
  CFIndex v23 = *(__CFData **)buf;
  uint64_t v17 = v114;
  if (!*(void *)buf)
  {
    uint64_t v22 = sub_1000194E0(-26275, v120, @"ks_decrypt_data: invalid ACL");
    uint64_t v24 = 0LL;
    CFTypeRef v122 = 0LL;
LABEL_115:
    BOOL v25 = 0LL;
    goto LABEL_32;
  }

  uint64_t v109 = (uint64_t)v58;
  uint64_t v59 = SecAccessControlCreate(0LL, 0LL);
  if (!v59)
  {
    CFIndex v23 = 0LL;
    uint64_t v24 = 0LL;
    CFTypeRef v122 = 0LL;
    BOOL v25 = 0LL;
    uint64_t v22 = 1LL;
    goto LABEL_31;
  }

  uint64_t v60 = (const void *)v59;
  char v61 = SecAccessControlSetProtection(v59, v23, 0LL);
  CFRelease(v23);
  CFTypeRef v122 = v60;
  if ((v61 & 1) == 0)
  {
    sub_1000194E0(-26275, v120, @"ks_decrypt_data: invalid ACL");
    CFIndex v23 = 0LL;
    uint64_t v24 = 0LL;
    BOOL v25 = 0LL;
    goto LABEL_74;
  }

  Protection = (const void *)SecAccessControlGetProtection(v60);
  unsigned int v63 = sub_1000F1BF8(Protection, v120);
  if (!v63)
  {
    BOOL v83 = sub_1000194E0(-26275, v120, @"ks_decrypt_data: invalid ACL");
    goto LABEL_117;
  }

  unsigned int v112 = v63;
  uint64_t v17 = v114;
  uint64_t v22 = v109;
LABEL_38:
  unsigned int v53 = dataOutAvailable;
  uint64_t v124 = 0LL;
  if ((v119 - 2) >= 5)
  {
    if (!(_DWORD)v119)
    {
      unint64_t v67 = CFDataGetLength(Mutable) + 8;
      unint64_t v70 = v45 - v67;
      if (v45 >= v67)
      {
        uint64_t v71 = v120;
LABEL_119:
        if (v70 > 0xF)
        {
          if ((v70 & 0xF) == 0)
          {
            dataOutAvailable = (char *)v70;
            uint64_t v109 = v22;
            LODWORD(v22) = 1;
            goto LABEL_126;
          }

          uint64_t v55 = @"ks_decrypt_data: invalid length on CBC data";
        }

        else
        {
          uint64_t v55 = @"ks_decrypt_data: Check for underflow (CBC check)";
        }

        uint64_t v82 = v71;
        goto LABEL_114;
      }

LABEL_112:
      uint64_t v55 = @"ks_decrypt_data: Check for underflow (wrapped_key/taglen)";
      goto LABEL_113;
    }

    uint64_t v54 = 0LL;
    if ((_DWORD)v119 != 1)
    {
      uint64_t v22 = sub_1000194E0(-26275, v120, @"ks_decrypt_data: invalid version %d", v119);
      CFIndex v23 = 0LL;
      uint64_t v24 = 0LL;
      BOOL v25 = 0LL;
      unsigned int v26 = 0;
      goto LABEL_140;
    }
  }

  else
  {
    uint64_t v54 = 16LL;
    uint64_t v124 = 16LL;
  }

  if (v45 <= 3)
  {
    uint64_t v55 = @"ks_decrypt_data: Check for underflow (wrapped_key_size)";
LABEL_113:
    uint64_t v82 = v120;
LABEL_114:
    uint64_t v22 = sub_1000194E0(-26275, v82, v55);
    CFIndex v23 = 0LL;
    uint64_t v24 = 0LL;
    goto LABEL_115;
  }

  unsigned int v68 = *(_DWORD *)v22;
  v22 += 4LL;
  unint64_t v67 = v68;
  unint64_t v69 = v54 + v68;
  unint64_t v70 = v45 - 4 - v69;
  if (v45 - 4 < v69) {
    goto LABEL_112;
  }
  uint64_t v71 = v120;
  uint64_t v109 = v22;
  dataOutAvailable = (char *)v70;
  if (v53 > 2)
  {
    LODWORD(v22) = 0;
LABEL_126:
    int v84 = v118;
    int v118 = (char *)v67;
    CFIndex v23 = 0LL;
    if (!sub_10011F87C(v84, a1, a2, v112, v67, (const void *)v109, 0LL, Mutable, 0, v71))
    {
      uint64_t v22 = 0LL;
      uint64_t v24 = 0LL;
      BOOL v25 = 0LL;
      goto LABEL_32;
    }

    unsigned int v26 = v119;
    goto LABEL_132;
  }

  if (v117)
  {
    unint64_t v72 = v67;
    uint64_t v73 = sub_1000F3038(v117, (CFTypeRef *)v120, v50, v51, v52);
    unint64_t v67 = v72;
    CFIndex v23 = v73;
    __int16 v74 = v118;
    if (!v73)
    {
      uint64_t v24 = 0LL;
      BOOL v25 = 0LL;
      uint64_t v22 = 0LL;
      goto LABEL_32;
    }
  }

  else
  {
    CFIndex v23 = 0LL;
    __int16 v74 = v118;
  }

  uint64_t v85 = a1;
  int v118 = (char *)v67;
  unsigned int v26 = v119;
  if (!sub_1000F30D0( v85,  a7,  (const UInt8 *)v109,  v67,  (uint64_t)v122,  v119,  &v131,  &v129,  (CFTypeRef *)&v130,  v120))
  {
    uint64_t v24 = 0LL;
    BOOL v25 = 0LL;
    uint64_t v22 = 0LL;
    goto LABEL_140;
  }

  if (CFEqual(v74, @"od"))
  {
    uint64_t v22 = 0LL;
    if ((sub_10012013C(v129, v130, Mutable, v116, v23, (uint64_t)v122, v120) & 1) != 0)
    {
LABEL_132:
      if (v29 < 0)
      {
        int v87 = CFDataGetBytePtr(a6);
        int v86 = (char *)(v109 - (void)v87);
      }

      else
      {
        int v86 = 0LL;
        int v87 = 0LL;
      }

      uint64_t v88 = dataOutAvailable;
      __int128 v89 = CFDataCreateMutable(0LL, (CFIndex)dataOutAvailable);
      BOOL v25 = v89;
      if (v89)
      {
        CFIndex v90 = &v118[v109];
        CFDataSetLength(v89, (CFIndex)dataOutAvailable);
        if (v124)
        {
          __int16 v117 = (const __CFString *)&v108;
          __chkstk_darwin(v91);
          uint64_t v93 = (char *)&v108 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          memset(v93, 170, v92);
          __int16 v94 = CFDataGetBytePtr(Mutable);
          int v118 = v86;
          id v95 = v90;
          id v96 = v94;
          CFIndex v97 = CFDataGetLength(Mutable);
          MutableBytePtr = CFDataGetMutableBytePtr(v25);
          uint64_t v99 = CCCryptorGCM(1LL, 0LL, v96, v97, v111, v110, v87, v118, v95, v88, MutableBytePtr, v93, &v124);
          if ((_DWORD)v99)
          {
            uint64_t v22 = sub_1000194E0(-26275, v120, @"ks_decrypt_data: CCCryptorGCM failed: %d", v99);
            uint64_t v17 = v114;
            BOOL v18 = v115;
            unsigned int v26 = v119;
LABEL_153:
            uint64_t v24 = 0LL;
            goto LABEL_83;
          }

          BOOL v18 = v115;
          unsigned int v26 = v119;
          if (v124 != 16)
          {
            uint64_t v22 = sub_1000194E0( -26276,  v120,  @"ks_decrypt_data: CCCryptorGCM expected: 16 got: %ld byte tag",  v124);
            uint64_t v17 = v114;
            goto LABEL_153;
          }

          if (timingsafe_bcmp(v93, &dataOutAvailable[(void)v95], 0x10uLL))
          {
            uint64_t v22 = sub_1000194E0( -26275,  v120,  @"ks_decrypt_data: CCCryptorGCM computed tag not same as tag in blob");
            uint64_t v17 = v114;
            goto LABEL_153;
          }
        }

        else
        {
          *(void *)__int128 buf = 0xAAAAAAAAAAAAAAAALL;
          id v100 = CFDataGetBytePtr(Mutable);
          size_t v101 = CFDataGetLength(Mutable);
          dataOut = CFDataGetMutableBytePtr(v25);
          uint64_t v103 = CCCrypt( 1u,  0,  1u,  v100,  v101,  0LL,  v90,  (size_t)dataOutAvailable,  dataOut,  (size_t)dataOutAvailable,  (size_t *)buf);
          BOOL v18 = v115;
          if ((_DWORD)v103)
          {
            uint64_t v22 = sub_1000194E0(-26275, v120, @"ks_decrypt_data: CCCrypt failed: %d", v103);
            uint64_t v24 = 0LL;
            uint64_t v17 = v114;
            goto LABEL_83;
          }

          CFDataSetLength(v25, *(CFIndex *)buf);
        }

        uint64_t v17 = v114;
        if ((_DWORD)v22)
        {
          uint64_t v24 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          CFDictionaryAddValue(v24, @"v_Data", v25);
        }

        else
        {
          if (v26 == 2) {
            __int128 v104 = (__CFDictionary *)sub_1000F346C(v25, (CFErrorRef *)v120);
          }
          else {
            __int128 v104 = (__CFDictionary *)sub_1000F34A4(v25, (CFTypeRef *)v120);
          }
          uint64_t v24 = v104;
        }

        if (v24)
        {
          uint64_t v22 = 1LL;
          if (v26 >= 4 && v131)
          {
            context[0] = _NSConcreteStackBlock;
            context[1] = 3221225472LL;
            context[2] = sub_1000F35A4;
            context[3] = &unk_100293110;
            void context[4] = v24;
            CFDictionaryApplyFunction(v131, (CFDictionaryApplierFunction)sub_1000F1BE0, context);
          }

          goto LABEL_83;
        }

        CFIndex v105 = sub_10001267C("SecError");
        __int128 v106 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
        if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v107 = (__CFString *)v120;
          if (v120) {
            uint64_t v107 = *v120;
          }
          *(_DWORD *)__int128 buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = v119;
          __int16 v133 = 2112;
          id v134 = v107;
          _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEFAULT, "decode v%d failed: %@", buf, 0x12u);
        }

        uint64_t v24 = 0LL;
LABEL_74:
        uint64_t v22 = 0LL;
        goto LABEL_31;
      }

      uint64_t v22 = sub_1000194E0(-26275, v120, @"ks_decrypt_data: failed to allocate data for plain text");
      uint64_t v24 = 0LL;
LABEL_140:
      BOOL v18 = v115;
      goto LABEL_83;
    }

LABEL_155:
    uint64_t v24 = 0LL;
    BOOL v25 = 0LL;
    goto LABEL_140;
  }

  if (!CFEqual(v74, @"odel"))
  {
    uint64_t v22 = sub_1000194E0(-26276, v120, @"ks_decrypt_data: invalid operation");
    goto LABEL_155;
  }

  BOOL v18 = v115;
  if (sub_100120398(v129, v116, v23, (uint64_t)v122, (CFErrorRef *)v120))
  {
    uint64_t v24 = v131;
    if (v131) {
      CFRetain(v131);
    }
    BOOL v25 = 0LL;
    uint64_t v22 = 1LL;
  }

  else
  {
    uint64_t v24 = 0LL;
    BOOL v25 = 0LL;
    uint64_t v22 = 0LL;
  }

LABEL_83:
  uint64_t v75 = CFDataGetMutableBytePtr(Mutable);
  rsize_t v76 = CFDataGetLength(Mutable);
  rsize_t v77 = CFDataGetLength(Mutable);
  memset_s(v75, v76, 0, v77);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v121)
  {
    *CFTypeRef v121 = v122;
  }

  else if (v122)
  {
    CFRelease(v122);
  }

  if ((_DWORD)v22)
  {
    if (v18)
    {
      CFIndex v78 = *v18;
      if (*v18 != v24)
      {
        if (!v24 || (CFRetain(v24), (CFIndex v78 = *v18) != 0LL)) {
          CFRelease(v78);
        }
        *BOOL v18 = v24;
      }
    }

    if (v17) {
      *uint64_t v17 = v26;
    }
  }

  if (v24) {
    CFRelease(v24);
  }
  uint64_t v79 = v131;
  if (v131)
  {
    __int128 v131 = 0LL;
    CFRelease(v79);
  }

  if (v23) {
    CFRelease(v23);
  }
  CFIndex v80 = v130;
  if (v130)
  {
    id v130 = 0LL;
    CFRelease(v80);
  }

  if (v129) {
    sub_100003848(&v129);
  }
  return v22;
}

  CFIndex v58 = cf;
  if (cf)
  {
    CFTypeRef cf = 0LL;
    CFRelease(v58);
  }

  uint64_t v59 = theDict;
  if (theDict)
  {
    CFDictionaryRef theDict = 0LL;
    CFRelease(v59);
  }

  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

  return v22;
}

  self->_timestampRequestEnd = v5[11];
  *(_DWORD *)&self->_has |= 0x400u;
  uint64_t v10 = *((_DWORD *)v5 + 70);
  if ((v10 & 0x2000) == 0)
  {
LABEL_54:
    if ((v10 & 0x1000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }

__CFData *sub_1000F3038(const __CFString *a1, CFTypeRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFIndex v7 = sub_100019A68(a1, a2, a3, a4, a5);
  CFMutableStringRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, 0LL);
  CFDataSetLength(Mutable, v7);
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  uint64_t v10 = CFDataGetMutableBytePtr(Mutable);
  if (!sub_100019C44(a1, a2, 0LL, MutableBytePtr, (unint64_t)&v10[v7]))
  {
    CFRelease(Mutable);
    return 0LL;
  }

  return Mutable;
}

uint64_t sub_1000F30D0( uint64_t a1, uint64_t a2, const UInt8 *a3, CFIndex a4, uint64_t a5, unsigned int a6, __CFDictionary **a7, void *a8, CFTypeRef *a9, __CFString **a10)
{
  uint64_t v44 = 0LL;
  CFBooleanRef v45 = 0LL;
  CFTypeID v42 = 0LL;
  CFDataRef theData = 0LL;
  sub_100019634(0LL, &v45, 0LL, a3, (uint64_t)&a3[a4]);
  CFBooleanRef v17 = v45;
  if (!v45)
  {
    CFDataRef v18 = 0LL;
    CFMutableDictionaryRef MutableCopy = 0LL;
    sub_1000194E0(-26275, a10, @"kc_attribs_key_encrypted_data_from_blob: failed to decode 'blob data'");
    goto LABEL_52;
  }

  if ((sub_10011F7C4(v45, (CFTypeRef *)&v42, (CFTypeRef *)&theData) & 1) != 0)
  {
    CFDataRef v18 = v42;
  }

  else
  {
    CFDataRef v18 = CFDataCreate(kCFAllocatorDefault, a3, a4);
    CFTypeID v42 = v18;
    CFDataRef theData = (CFDataRef)CFRetain(v18);
  }

  if (!v18)
  {
    CFMutableDictionaryRef MutableCopy = 0LL;
    sub_1000194E0(-26275, a10, @"kc_attribs_key_encrypted_data_from_blob: failed to decode 'encrypted data'");
    goto LABEL_52;
  }

  uint64_t v19 = theData;
  if (!theData)
  {
    CFMutableDictionaryRef MutableCopy = 0LL;
    sub_1000194E0(-26275, a10, @"kc_attribs_key_encrypted_data_from_blob: failed to decode 'key data'");
    goto LABEL_52;
  }

  uint64_t v41 = 0LL;
  BytePtr = CFDataGetBytePtr(theData);
  size_t Length = CFDataGetLength(v19);
  uint64_t v22 = sub_1000038F8(a1, BytePtr, Length, &v44);
  if ((_DWORD)v22)
  {
    if ((_DWORD)v22 == -536870206) {
      sub_1000194E0( -26275,  a10,  @"aks_ref_key: failed to create ref key with blob because bad data (bag: %d)",  a1);
    }
    else {
      sub_1000194E0(-26275, a10, @"aks_ref_key: failed to create ref key with blob: %x (bag: %d)", v22, a1);
    }
    goto LABEL_24;
  }

  uint64_t v37 = a5;
  id v38 = a8;
  CFIndex v23 = (const UInt8 *)sub_1000046D4(v44, &v41);
  if (!v23)
  {
LABEL_24:
    uint64_t v32 = 0LL;
    CFMutableDictionaryRef MutableCopy = 0LL;
    goto LABEL_25;
  }

  CFDictionaryRef theDict = 0LL;
  sub_100019634(0LL, &theDict, 0LL, v23, (uint64_t)&v23[v41]);
  uint64_t v24 = theDict;
  if (!theDict)
  {
    CFMutableDictionaryRef MutableCopy = 0LL;
    sub_1000194E0( -26275,  a10,  @"kc_attribs_key_encrypted_data_from_blob: failed to decode 'encrypted data dictionary'");
    goto LABEL_52;
  }

  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, theDict);
  uint64_t v26 = *(void *)(a2 + 16);
  if (v26)
  {
    BOOL v27 = (uint64_t *)(a2 + 24);
    do
    {
      if ((*(_BYTE *)(v26 + 17) & 0x20) != 0)
      {
        CFDictionaryRemoveValue(MutableCopy, *(const void **)v26);
        Boolean Value = CFDictionaryGetValue(v24, *(const void **)v26);
        if (Value)
        {
          int v29 = Value;
          CFMutableStringRef Mutable = *a7;
          if (!*a7)
          {
            CFMutableStringRef Mutable = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
            *a7 = Mutable;
          }

          CFDictionaryAddValue(Mutable, *(const void **)v26, v29);
        }
      }

      uint64_t v31 = *v27++;
      uint64_t v26 = v31;
    }

    while (v31);
  }

  CFRelease(v24);
  if (MutableCopy)
  {
    if (a6 == 4)
    {
      SecAccessControlSetConstraints(v37, MutableCopy);
LABEL_39:
      goto LABEL_41;
    }

    id v34 = CFDictionaryGetValue(MutableCopy, @"acl");
    if (v34)
    {
      id v35 = v34;
      CFTypeID v36 = CFGetTypeID(v34);
      if (v36 == CFDictionaryGetTypeID())
      {
        SecAccessControlSetConstraints(v37, v35);
        if (a6 > 5) {
          goto LABEL_41;
        }
        goto LABEL_39;
      }
    }

    sub_1000194E0(-26275, a10, @"kc_attribs_key_encrypted_data_from_blob: acl missing");
LABEL_52:
    uint64_t v32 = 0LL;
LABEL_25:
    if (v44) {
      sub_100003848(&v44);
    }
    if (v17) {
      goto LABEL_28;
    }
    goto LABEL_29;
  }

CFTypeRef sub_1000F346C(CFDataRef data, CFErrorRef *error)
{
  CFPropertyListRef v3 = CFPropertyListCreateWithData(0LL, data, 1uLL, 0LL, error);
  return sub_1000F3AD8(v3, (__CFString **)error);
}

CFTypeRef sub_1000F34A4(const __CFData *a1, CFTypeRef *a2)
{
  CFTypeRef cf = 0LL;
  BytePtr = CFDataGetBytePtr(a1);
  CFIndex Length = CFDataGetLength(a1);
  uint64_t v6 = (uint64_t)&BytePtr[Length];
  CFIndex v7 = sub_100019634(0LL, (CFBooleanRef *)&cf, a2, BytePtr, (uint64_t)&BytePtr[Length]);
  if (a2 && !v7)
  {
    CFErrorDomain Domain = CFErrorGetDomain((CFErrorRef)*a2);
    if (!Domain || !CFEqual(Domain, @"com.apple.security.cfder.error") || CFErrorGetCode((CFErrorRef)*a2) != -1) {
      return sub_1000F3AD8(cf, (__CFString **)a2);
    }
    CFTypeRef v11 = *a2;
    if (*a2)
    {
      *a2 = 0LL;
      CFRelease(v11);
    }

    CFIndex v7 = sub_1000F35AC((CFBooleanRef *)&cf, a2, (unint64_t)BytePtr, v6, v10);
  }

  if (v7)
  {
    if (v7 != (unsigned __int8 *)v6)
    {
      sub_1000194B4(-26275LL, kCFErrorDomainOSStatus, 0LL, a2, v8, @"trailing garbage at end of decrypted item");
      CFTypeRef v12 = cf;
      if (cf)
      {
        CFTypeRef cf = 0LL;
        CFRelease(v12);
      }
    }
  }

  return sub_1000F3AD8(cf, (__CFString **)a2);
}

void sub_1000F35A4(uint64_t a1, const void *a2, const void *a3)
{
}

unsigned __int8 *sub_1000F35AC(CFBooleanRef *a1, CFTypeRef *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a3;
  if (!a3)
  {
    CFTypeRef v11 = @"Null DER";
LABEL_7:
    sub_1000194B4(-1LL, @"com.apple.security.cfder.error", 0LL, a2, a5, v11);
    return (unsigned __int8 *)v5;
  }

  uint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  if (!ccder_decode_tag(&v30, a3, a4))
  {
    sub_1000194B4(-1LL, @"com.apple.security.cfder.error", 0LL, a2, v9, @"Unknown data encoding");
    return 0LL;
  }

  if (v30 <= 23)
  {
    switch(v30)
    {
      case 1LL:
        return sub_10001A63C(a1, a2, v5, a4);
      case 2LL:
        return (unsigned __int8 *)sub_100018CF8(0LL, a1, a2, v5, a4);
      case 3LL:
      case 6LL:
      case 7LL:
      case 8LL:
      case 9LL:
      case 10LL:
      case 11LL:
        goto LABEL_37;
      case 4LL:
        return (unsigned __int8 *)sub_10001A6E4(0LL, a1, a2, v5, a4);
      case 5LL:
        return (unsigned __int8 *)sub_10001AF8C(a1, a2, v5, a4);
      case 12LL:
        return (unsigned __int8 *)sub_10001A3C4(0LL, (CFStringRef *)a1, a2, v5, a4);
      default:
        if (v30 != 0xC000000000000011LL) {
          goto LABEL_37;
        }
        unint64_t v34 = 0LL;
        unint64_t v5 = ccder_decode_constructed_tl(0xC000000000000011LL, &v34, v5, a4);
        if (!v5)
        {
          CFTypeRef v11 = @"Unknown data encoding, expected CCDER_CONSTRUCTED_CFSET";
          goto LABEL_7;
        }

        CFMutableStringRef Mutable = CFSetCreateMutable(0LL, 0LL, &kCFTypeSetCallBacks);
        if (Mutable)
        {
          BOOL v22 = v5 == v34;
          if (v5 < v34)
          {
            do
            {
              key = 0LL;
              unint64_t v5 = sub_1000F35AC(&key, a2, v5);
              CFIndex v23 = key;
              if (v5) {
                CFSetAddValue(Mutable, key);
              }
              if (v23) {
                CFRelease(v23);
              }
            }

            while (v5 && v5 < v34);
            BOOL v22 = v5 == v34;
          }

          if (!v22)
          {
            CFRelease(Mutable);
            return (unsigned __int8 *)v5;
          }
        }

        else
        {
          sub_1000194B4(-3LL, @"com.apple.security.cfder.error", 0LL, a2, v21, @"Failed to create set");
          unint64_t v5 = 0LL;
          if (v34) {
            return (unsigned __int8 *)v5;
          }
        }

        if (*a1) {
          CFRelease(*a1);
        }
        break;
    }

    goto LABEL_74;
  }

  if (v30 == 24)
  {
    unint64_t v5 = sub_1000141B0(0LL, a1, a2, v5, a4);
    if (!v5) {
      return (unsigned __int8 *)sub_1000F3B68(a1, (CFErrorRef *)a2, a4);
    }
    return (unsigned __int8 *)v5;
  }

  if (v30 == 0x2000000000000010LL)
  {
    BOOL v25 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    unint64_t v34 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v26 = ccder_decode_sequence_tl(&v34, v5, a4);
    unint64_t v5 = v26;
    if (v26 && v26 < v34)
    {
      while (1)
      {
        key = 0LL;
        uint64_t v27 = sub_1000F35AC(&key, a2, v5);
        if (!v27) {
          break;
        }
        unint64_t v5 = v27;
        uint64_t v28 = key;
        CFArrayAppendValue(v25, key);
        if (v28) {
          CFRelease(v28);
        }
        if (v5 >= v34) {
          goto LABEL_54;
        }
      }
    }

    else if (v26)
    {
LABEL_54:
      *a1 = v25;
      return (unsigned __int8 *)v5;
    }

    if (v25) {
      CFRelease(v25);
    }
    return 0LL;
  }

  if (v30 != 0x2000000000000011LL)
  {
LABEL_37:
    sub_1000194B4(-2LL, @"com.apple.security.cfder.error", 0LL, a2, v9, @"Unsupported DER Type");
    return 0LL;
  }

  unint64_t v31 = 0LL;
  unint64_t v5 = ccder_decode_constructed_tl(0x2000000000000011LL, &v31, v5, a4);
  if (!v5)
  {
    CFTypeRef v11 = @"Unknown data encoding, expected CCDER_CONSTRUCTED_SET";
    goto LABEL_7;
  }

  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    unint64_t v14 = v31;
    if (v5 < v31)
    {
      while (1)
      {
        unint64_t v34 = 0LL;
        uint64_t v15 = ccder_decode_constructed_tl(0x2000000000000010LL, &v34, v5, v14);
        if (!v15)
        {
          sub_1000194B4( -1LL,  @"com.apple.security.cfder.error",  0LL,  a2,  v16,  @"Unknown data encoding, expected CCDER_CONSTRUCTED_SEQUENCE");
          goto LABEL_71;
        }

        xpc_object_t value = 0LL;
        key = 0LL;
        uint64_t v17 = sub_1000F35AC(&key, a2, v15);
        uint64_t v18 = sub_1000F35AC(&value, a2, v17);
        uint64_t v19 = key;
        if (!v18) {
          break;
        }
        unint64_t v5 = v18;
        uint64_t v20 = value;
        CFDictionaryAddValue(Mutable, key, value);
        if (v19) {
          CFRelease(v19);
        }
        if (v20) {
          CFRelease(v20);
        }
        unint64_t v14 = v31;
        if (v5 >= v31) {
          goto LABEL_72;
        }
      }

      if (key) {
        CFRelease(key);
      }
      if (value) {
        CFRelease(value);
      }
LABEL_71:
      unint64_t v5 = 0LL;
      unint64_t v14 = v31;
LABEL_72:
      unint64_t v29 = v5;
      unint64_t v5 = v14;
      if (v29 == v14) {
        goto LABEL_74;
      }
      goto LABEL_73;
    }

    unint64_t v29 = v5;
    if (v5 != v31)
    {
LABEL_73:
      CFRelease(Mutable);
      return (unsigned __int8 *)v29;
    }

CFTypeRef sub_1000F3AD8(CFTypeRef cf, __CFString **a2)
{
  CFTypeRef v2 = cf;
  if (cf)
  {
    CFTypeID v4 = CFGetTypeID(cf);
    if (v4 != CFDictionaryGetTypeID())
    {
      CFTypeID v5 = CFGetTypeID(v2);
      CFStringRef v6 = CFCopyTypeIDDescription(v5);
      sub_1000194E0(-26275, a2, @"plist is a %@, expecting a dictionary", v6);
      if (v6) {
        CFRelease(v6);
      }
      CFRelease(v2);
      return 0LL;
    }
  }

  return v2;
}

uint64_t sub_1000F3B68(CFDateRef *a1, CFErrorRef *a2, uint64_t a3)
{
  CFErrorDomain Domain = CFErrorGetDomain(*a2);
  if (!Domain || !CFEqual(Domain, @"com.apple.security.cfder.error") || CFErrorGetCode(*a2) != -1) {
    return 0LL;
  }
  CFAbsoluteTime at = 0.0;
  uint64_t v8 = CFCalendarCreateWithIdentifier(0LL, kCFGregorianCalendar);
  uint64_t v9 = CFTimeZoneCreateWithTimeIntervalFromGMT(0LL, 0.0);
  CFCalendarSetTimeZone(v8, v9);
  CFCalendarComposeAbsoluteTime(v8, &at, "yMd", 2001LL, 3LL, 24LL);
  if (v9) {
    CFRelease(v9);
  }
  if (v8) {
    CFRelease(v8);
  }
  CFDateRef v10 = CFDateCreate(0LL, at);
  *a1 = v10;
  if (!v10) {
    return 0LL;
  }
  CFErrorRef v11 = *a2;
  if (*a2)
  {
    *a2 = 0LL;
    CFRelease(v11);
  }

  return a3;
}

const void *sub_1000F3C78(void **a1, __CFString **a2)
{
  uint64_t v4 = sub_1000E6D50(a1[2], 15LL, a2);
  CFTypeID v5 = (const void *)sub_1000E705C(a1, v4, a2);
  uint64_t v6 = sub_1000E6D50(a1[2], 14LL, a2);
  uint64_t v7 = sub_1000E705C(a1, v6, a2);
  if (v5) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    return 0LL;
  }
  CFDateRef v10 = (const void *)v7;
  if (!CFEqual(v5, kCFNull))
  {
    CFAllocatorRef v13 = CFGetAllocator(a1);
    uint64_t v14 = SecAccessControlCreateFromData(v13, v5, a2);
    if (v14)
    {
      uint64_t v12 = (const void *)v14;
      if (CFEqual(v10, kCFNull))
      {
        uint64_t v15 = 0LL;
        goto LABEL_22;
      }

void sub_1000F3EFC(uint64_t a1, CFDictionaryRef theDict, __CFString **a3)
{
  Boolean Value = CFDictionaryGetValue(theDict, kSecValuePersistentRef);
  if (Value)
  {
    uint64_t v7 = Value;
    CFDataRef theData = 0LL;
    CFTypeRef cf2 = 0LL;
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
    if ((_SecItemParsePersistentRef(Value, &cf2, &v12, &theData, 0LL) & 1) != 0)
    {
      int v8 = CFEqual(**(CFTypeRef **)(a1 + 16), cf2);
      CFDataRef v9 = theData;
      if (v8)
      {
        if (theData)
        {
          if (CFDataGetLength(theData) == 16) {
            sub_1000E96B4(a1, theData, a3);
          }
          CFDataRef v10 = theData;
          if (theData)
          {
            CFDataRef theData = 0LL;
            CFRelease(v10);
          }
        }
      }

      else
      {
        if (theData)
        {
          CFDataRef theData = 0LL;
          CFRelease(v9);
        }

        sub_1000194E0(-26275, a3, @"v_PersistentRef has unexpected class %@", cf2);
      }
    }

    else
    {
      CFDataRef v11 = theData;
      if (theData)
      {
        CFDataRef theData = 0LL;
        CFRelease(v11);
      }

      sub_1000194E0(-26275, a3, @"v_PersistentRef %@ failed to decode", v7);
    }
  }

  else
  {
    sub_1000194E0(-26275, a3, @"No v_PersistentRef in backup dictionary %@", theDict);
  }

__CFDictionary *sub_1000F4018(void *a1, uint64_t a2, __CFString **a3)
{
  return sub_1000F4020(a1, 1LL, a3);
}

__CFDictionary *sub_1000F4020(void *a1, uint64_t a2, __CFString **a3)
{
  uint64_t result = sub_1000F4058(a1, a2, a3);
  if (result)
  {
    uint64_t v4 = result;
    CFTypeID v5 = sub_10001A314(result);
    CFRelease(v4);
    return v5;
  }

  return result;
}

__CFDictionary *sub_1000F4058(void *a1, uint64_t a2, __CFString **a3)
{
  uint64_t result = sub_1000E6EA4(a1, a2, 0LL, a3);
  if (result)
  {
    int v8 = result;
    CFDataRef v9 = sub_100019F48((const __CFString *)result, (CFTypeRef *)a3, v5, v6, v7);
    CFRelease(v8);
    return v9;
  }

  return result;
}

__CFDictionary *sub_1000F40A0(void *a1, uint64_t a2, __CFString **a3)
{
  return sub_1000F4020(a1, 256LL, a3);
}

__CFData *sub_1000F40A8(uint64_t a1, uint64_t a2, __CFString **a3)
{
  uint64_t v24 = 0LL;
  uint64_t v5 = sub_1000E6EA4((void *)a1, 32LL, 0LL, a3);
  uint64_t v6 = sub_1000E6EA4((void *)a1, 128LL, 0LL, a3);
  uint64_t v7 = sub_1000E6EA4((void *)a1, 0x2000LL, 0LL, a3);
  int v8 = v7;
  if (v5 && v6 && v7)
  {
    CFDataRef v9 = sub_1000F3C78((void **)a1, a3);
    CFDataRef v10 = sub_1000F4020((void *)a1, 256LL, a3);
    CFDataRef v11 = v10;
    if (v9 && v10)
    {
      CFDictionarySetValue(v8, kSecAttrSHA1, v10);
      context[0] = _NSConcreteStackBlock;
      context[1] = 3221225472LL;
      context[2] = sub_1000F43FC;
      context[3] = &unk_1002863B0;
      void context[4] = v6;
      void context[5] = v8;
      CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)sub_1000F1BE0, context);
      if (sub_1000F1D54( (const __CFData *)*(unsigned int *)(a1 + 28),  (uint64_t)v9,  *(const __CFData **)(a1 + 56),  v5,  v6,  v8,  &v24,  1,  0,  (CFTypeRef *)a3))
      {
        *(_DWORD *)(a1 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 4;
LABEL_36:
        CFRelease(v9);
        goto LABEL_37;
      }

      if (a3 && *a3 && CFErrorGetCode((CFErrorRef)*a3) == -25330)
      {
        CFErrorDomain Domain = CFErrorGetDomain((CFErrorRef)*a3);
        if (Domain && kCFErrorDomainOSStatus)
        {
          if (CFEqual(Domain, kCFErrorDomainOSStatus)) {
            goto LABEL_36;
          }
        }

        else if (Domain == kCFErrorDomainOSStatus)
        {
          goto LABEL_36;
        }
      }

      CFAllocatorRef v16 = sub_10001267C("SecCritical");
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        if (a3) {
          uint64_t v18 = *a3;
        }
        else {
          uint64_t v18 = &stru_100294B48;
        }
        *(_DWORD *)__int128 buf = 138412290;
        int v26 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "ks_encrypt_data (db): failed: %@",  buf,  0xCu);
      }

      goto LABEL_36;
    }

    if (v10) {
LABEL_37:
    }
      CFRelease(v11);
  }

  else
  {
    if (!v5 && !v6 && !v7) {
      return v24;
    }
    if (dword_1002DD0E8 == -1)
    {
      unint64_t v12 = sub_10001267C("SecEmergency");
      CFAllocatorRef v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      {
        uint64_t v19 = @"missing";
        if (v5) {
          uint64_t v20 = @"present";
        }
        else {
          uint64_t v20 = @"missing";
        }
        if (v6) {
          uint64_t v21 = @"present";
        }
        else {
          uint64_t v21 = @"missing";
        }
        if (v8) {
          uint64_t v19 = @"present";
        }
        if (a3) {
          BOOL v22 = *a3;
        }
        else {
          BOOL v22 = @"no error pointer";
        }
        *(_DWORD *)__int128 buf = 138413058;
        int v26 = v20;
        __int16 v27 = 2112;
        __int16 v28 = v21;
        __int16 v29 = 2112;
        uint64_t v30 = v19;
        __int16 v31 = 2112;
        uint64_t v32 = v22;
        _os_log_fault_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "SecDbKeychainItemCopyEncryptedData: not all plists are present: secretStuff: %@, attributes: %@, auth_attributes: %@ : %@",  buf,  0x2Au);
      }
    }

    if (!v5)
    {
      if (!v6) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }

  CFRelease(v5);
  if (v6) {
LABEL_16:
  }
    CFRelease(v6);
LABEL_17:
  if (v8) {
    CFRelease(v8);
  }
  return v24;
}

void sub_1000F43FC(uint64_t a1, const void *a2)
{
}

CFDateRef sub_1000F442C(int a1, uint64_t a2, __CFString **a3)
{
  int v3 = *(_DWORD *)(a2 + 8);
  if ((v3 - 5) < 2)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    uint64_t v5 = kCFAllocatorDefault;
    return CFDateCreate(v5, Current);
  }

  if (v3 == 4)
  {
    uint64_t v5 = kCFAllocatorDefault;
    double Current = 0.0;
    return CFDateCreate(v5, Current);
  }

  sub_1000194E0(-26276, a3, @"attr %@ has no default value", *(void *)a2);
  return 0LL;
}

void sub_1000F460C(_Unwind_Exception *a1)
{
}

void sub_1000F4790(_Unwind_Exception *a1)
{
}

void sub_1000F4920( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
}

void sub_1000F4994(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000F5BC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id *a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, id *location)
{
}

void sub_1000F5D4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000F5EEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000F648C(_Unwind_Exception *a1)
{
}

void sub_1000F669C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000F68B4(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v14 logResultForEvent:@"OctagonEventUpgradePreapprovedJoin" hardFailure:1 result:v12];

  if (v12)
  {
    uint64_t v15 = sub_10001267C("SecError");
    CFAllocatorRef v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v43 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "octagon-sos: attemptPreapprovedJoin failed: %@",  buf,  0xCu);
    }

    if ([v12 isCuttlefishError:1033])
    {
      uint64_t v17 = sub_10001267C("octagon-ckks");
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "A CKKS key hierarchy is out of date; requesting reset",
          buf,
          2u);
      }

      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained ckksConflictState]);
      [WeakRetained setNextState:v19];
    }

    else
    {
      [WeakRetained setError:v12];
      [WeakRetained setNextState:@"BecomeUntrusted"];
    }

    id v27 = (id)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
    [WeakRetained runBeforeGroupFinished:v27];
  }

  else
  {
    [WeakRetained requestSilentEscrowUpdate];
    uint64_t v20 = sub_10001267C("SecError");
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "octagon-sos: attemptPreapprovedJoin succeded",  buf,  2u);
    }

    BOOL v22 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    CFIndex v23 = (void *)objc_claimAutoreleasedReturnValue([v22 ckks]);
    [v23 setCurrentSyncingPolicy:v11];

    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    BOOL v25 = (void *)objc_claimAutoreleasedReturnValue([v24 stateHolder]);
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472LL;
    v39[2] = sub_1000F6D34;
    v39[3] = &unk_1002864C0;
    id v40 = v9;
    id v41 = v11;
    id v38 = 0LL;
    unsigned int v26 = [v25 persistAccountChanges:v39 error:&v38];
    id v27 = v38;

    if (!v26 || v27)
    {
      id v35 = sub_10001267C("octagon-sos");
      CFTypeID v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v43 = v27;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Couldn't persist results: %@", buf, 0xCu);
      }

      [WeakRetained setError:v27];
      [WeakRetained setNextState:@"Error"];
    }

    else
    {
      __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
      [WeakRetained setNextState:v28];

      __int16 v29 = sub_10001267C("octagon-ckks");
      uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v31 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v31 ckks]);
        *(_DWORD *)__int128 buf = 138412290;
        id v43 = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Providing ck records (from sos upgrade) to %@",  buf,  0xCu);
      }

      unint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      unint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v33 ckks]);
      [v34 receiveTLKUploadRecords:v10];
    }

    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
    [WeakRetained runBeforeGroupFinished:v37];
  }
}

id sub_1000F6D34(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setTrustState:2];
  [v3 setPeerID:*(void *)(a1 + 32)];
  [v3 setTPSyncingPolicy:*(void *)(a1 + 40)];
  return v3;
}

void sub_1000F6D7C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) viewKeySets]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pendingTLKShares]);
  [WeakRetained proceedWithKeys:v2 pendingTLKShares:v3];
}

void sub_1000F6DE8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained afterUpdate];
}

void sub_1000F6E14(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v7 logResultForEvent:@"OctagonEventUpgradePreflightPreapprovedJoin" hardFailure:1 result:v5];

  if (v5)
  {
    int v8 = sub_10001267C("SecError");
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 138412290;
      id v15 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "octagon-sos: preflightPreapprovedJoin failed: %@",  (uint8_t *)&v14,  0xCu);
    }

    [WeakRetained setError:v5];
LABEL_12:
    [WeakRetained setNextState:@"BecomeUntrusted"];
    CFAllocatorRef v13 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
    [WeakRetained runBeforeGroupFinished:v13];

    goto LABEL_13;
  }

  id v10 = sub_10001267C("octagon-sos");
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if ((a2 & 1) == 0)
  {
    if (v12)
    {
      LOWORD(v14) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "TPH believes a preapprovedJoin will fail; aborting.",
        (uint8_t *)&v14,
        2u);
    }

    goto LABEL_12;
  }

  if (v12)
  {
    LOWORD(v14) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "TPH believes a preapprovedJoin might succeed; continuing.",
      (uint8_t *)&v14,
      2u);
  }

  [WeakRetained afterPreflight];
LABEL_13:
}

void sub_1000F6FE0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);

  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
    unsigned int v4 = [v3 isRetryable];

    if (v4)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
      [v5 retryInterval];
      double v7 = v6;

      int v8 = sub_10001267C("octagon-sos");
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
        int v17 = 134218242;
        double v18 = v7;
        __int16 v19 = 2112;
        uint64_t v20 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "SOS upgrade error is not fatal: requesting retry in %0.2fs: %@",  (uint8_t *)&v17,  0x16u);
      }

      id v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      BOOL v12 = (void *)objc_claimAutoreleasedReturnValue([v11 flagHandler]);
      CFAllocatorRef v13 = -[OctagonPendingFlag initWithFlag:delayInSeconds:]( objc_alloc(&OBJC_CLASS___OctagonPendingFlag),  "initWithFlag:delayInSeconds:",  @"attempt_sos_upgrade",  v7);
      [v12 handlePendingFlag:v13];
    }

    else
    {
      id v15 = sub_10001267C("octagon-sos");
      id v11 = (void *)objc_claimAutoreleasedReturnValue(v15);
      if (!os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_DEFAULT))
      {
LABEL_10:

        int v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained eventS]);
        CFAllocatorRef v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
        +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v14,  0LL,  v16);

        goto LABEL_11;
      }

      BOOL v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
      int v17 = 138412290;
      double v18 = *(double *)&v12;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v11,  OS_LOG_TYPE_DEFAULT,  "SOS upgrade error is: %@; not retrying",
        (uint8_t *)&v17,
        0xCu);
    }

    goto LABEL_10;
  }

  int v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained eventS]);
  +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v14,  1LL,  0LL);
LABEL_11:
}

void sub_1000F7244(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  id v13 = a2;
  id v14 = a3;
  id v15 = a4;
  id v16 = a7;
  id v17 = a8;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v19 logResultForEvent:@"OctagonEventUpgradePrepare" hardFailure:1 result:v17];

  if (v17)
  {
    uint64_t v20 = sub_10001267C("SecError");
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v39 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "octagon-sos: Error preparing identity: %@",  buf,  0xCu);
    }

    [WeakRetained setError:v17];
    [WeakRetained handlePrepareErrors:v17 nextExpectedState:@"BecomeUntrusted"];
    id v22 = (id)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
    [WeakRetained runBeforeGroupFinished:v22];
  }

  else
  {
    CFIndex v23 = sub_10001267C("octagon-sos");
    uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412802;
      id v39 = v13;
      __int16 v40 = 2112;
      id v41 = v14;
      __int16 v42 = 2112;
      id v43 = v15;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Prepared: %@ %@ %@", buf, 0x20u);
    }

    id v34 = v13;

    BOOL v25 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    unsigned int v26 = (void *)objc_claimAutoreleasedReturnValue([v25 stateHolder]);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472LL;
    void v36[2] = sub_1000F75B0;
    v36[3] = &unk_100291520;
    id v27 = v16;
    id v37 = v27;
    id v35 = 0LL;
    unsigned int v28 = [v26 persistAccountChanges:v36 error:&v35];
    id v22 = v35;

    if (!v28 || v22)
    {
      __int16 v31 = sub_10001267C("SecError");
      uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v39 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "octagon-ckks: Error persisting new views and policy: %@",  buf,  0xCu);
      }

      [WeakRetained setError:v22];
      [WeakRetained handlePrepareErrors:v22 nextExpectedState:@"BecomeUntrusted"];
      unint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
      [WeakRetained runBeforeGroupFinished:v33];
    }

    else
    {
      __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v29 ckks]);
      [v30 setCurrentSyncingPolicy:v27];

      [WeakRetained afterPrepare];
    }

    id v13 = v34;
  }
}

id sub_1000F75B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setTPSyncingPolicy:*(void *)(a1 + 32)];
  return v3;
}

OTAccountMetadataClassC *__cdecl sub_1000F75E0(id a1, OTAccountMetadataClassC *a2)
{
  uint64_t v2 = a2;
  -[OTAccountMetadataClassC setAttemptedJoin:](v2, "setAttemptedJoin:", 2LL);
  -[OTAccountMetadataClassC setCdpState:](v2, "setCdpState:", 2LL);
  return v2;
}

void sub_1000F7618(id a1)
{
  qword_1002DEA68 = (uint64_t)CFDataCreateWithBytesNoCopy(0LL, byte_100205530, 16LL, kCFAllocatorNull);
}

void sub_1000F7650(id a1)
{
  qword_1002DEA78 = (uint64_t)CFDataCreateWithBytesNoCopy(0LL, 0LL, 0LL, kCFAllocatorNull);
}

BOOL sub_1000F7684(CFTypeRef cf1)
{
  if (qword_1002DEA70 != -1) {
    dispatch_once(&qword_1002DEA70, &stru_100286568);
  }
  return CFEqual(cf1, (CFTypeRef)qword_1002DEA78) != 0;
}

void sub_1000F76E0(id a1)
{
  qword_1002DEA88 = (uint64_t)CFDataCreateWithBytesNoCopy(0LL, byte_100205541, 16LL, kCFAllocatorNull);
}

BOOL sub_1000F7718(CFTypeRef cf1)
{
  if (qword_1002DEA80 != -1) {
    dispatch_once(&qword_1002DEA80, &stru_1002865A8);
  }
  return CFEqual(cf1, (CFTypeRef)qword_1002DEA88) != 0;
}

CFDataRef sub_1000F7774(const __CFData *result)
{
  if (result)
  {
    dispatch_source_t v1 = result;
    if (CFDataGetLength(result) == 16)
    {
      BytePtr = CFDataGetBytePtr(v1);
      return (const __CFData *)(*(void *)BytePtr != 0xAC4C81CC5CAE23F6LL
                             || *((void *)BytePtr + 1) != 0x1135313F01F0D48ALL);
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

__CFString **sub_1000F77E0(const void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 != CFStringGetTypeID()) {
    return 0LL;
  }
  if (CFEqual(a1, kSecClassGenericPassword))
  {
    id v3 = @"genp";
    unsigned int v4 = &qword_1002DEB28;
    id v5 = &unk_1002DEB20;
    return (__CFString **)sub_10010C560((uint64_t)v3, v4, (uint64_t)v5);
  }

  if (CFEqual(a1, kSecClassInternetPassword))
  {
    id v3 = @"inet";
    unsigned int v4 = &qword_1002DEB38;
    id v5 = &unk_1002DEB30;
    return (__CFString **)sub_10010C560((uint64_t)v3, v4, (uint64_t)v5);
  }

  if (CFEqual(a1, kSecClassCertificate))
  {
    id v3 = @"cert";
    unsigned int v4 = &qword_1002DEB48;
    id v5 = &unk_1002DEB40;
    return (__CFString **)sub_10010C560((uint64_t)v3, v4, (uint64_t)v5);
  }

  if (CFEqual(a1, kSecClassKey))
  {
    id v3 = @"keys";
    unsigned int v4 = &qword_1002DEB58;
    id v5 = &unk_1002DEB50;
    return (__CFString **)sub_10010C560((uint64_t)v3, v4, (uint64_t)v5);
  }

  if (CFEqual(a1, kSecClassIdentity)) {
    return &off_10028B168;
  }
  else {
    return 0LL;
  }
}

void sub_1000F7914(void *a1, const __CFData *a2, uint64_t a3)
{
  if (!CFEqual((CFTypeRef)*a1, kSecAttrSynchronizable)
    || (*(_BYTE *)(a3 + 112) = 1, !CFEqual(a2, kSecAttrSynchronizableAny)))
  {
    switch(*((_DWORD *)a1 + 2))
    {
      case 0:
      case 0xF:
        double v6 = (__CFString *)sub_1000E6B40(a2);
        goto LABEL_11;
      case 1:
        double v6 = (__CFString *)sub_1000E69CC((const __CFString *)a2);
        goto LABEL_11;
      case 2:
      case 0xE:
        double v6 = (__CFString *)sub_1000E693C((const __CFString *)a2);
        goto LABEL_11;
      case 3:
      case 0xB:
      case 0xC:
        double v6 = (__CFString *)sub_1000E6C20(a2);
        goto LABEL_11;
      case 4:
      case 5:
      case 6:
        double v6 = (__CFString *)sub_1000E6D0C(a2);
        goto LABEL_11;
      case 7:
        double v6 = (__CFString *)sub_1000E6BC4(a2);
        goto LABEL_11;
      case 0x10:
        double v6 = (__CFString *)sub_1000E6A88(a2);
LABEL_11:
        CFMutableStringRef Mutable = v6;
        if (!v6) {
          goto LABEL_21;
        }
        int v8 = *(__CFDictionary **)(a3 + 8);
        if (v8)
        {
          if (*((_DWORD *)a1 + 2) != 7) {
            CFDictionarySetValue(v8, (const void *)*a1, Mutable);
          }
        }

        if ((a1[2] & 8) == 0) {
          goto LABEL_18;
        }
        id v9 = sub_1000E69CC(Mutable);
        CFRelease(Mutable);
        if (v9)
        {
          CFMutableStringRef Mutable = (__CFString *)CFDataCreateMutable(0LL, 20LL);
          CFDataSetLength((CFMutableDataRef)Mutable, 20LL);
          BytePtr = CFDataGetBytePtr(v9);
          uint64_t Length = CFDataGetLength(v9);
          MutableBytePtr = CFDataGetMutableBytePtr((CFMutableDataRef)Mutable);
          CCDigest(8LL, BytePtr, Length, MutableBytePtr);
          CFRelease(v9);
LABEL_18:
          if (*((_DWORD *)a1 + 2) == 15)
          {
            if (!Mutable) {
              return;
            }
LABEL_25:
            CFRelease(Mutable);
            return;
          }

          uint64_t v13 = *(void *)(a3 + 32);
          if (v13 + 1 < *(void *)(a3 + 248))
          {
            id v14 = (const void *)*a1;
            *(void *)(a3 + 32) = v13 + 1;
            uint64_t v15 = a3 + 16 * v13;
            *(void *)(v15 + 256) = v14;
            *(void *)(v15 + 264) = Mutable;
            return;
          }

          sub_1000194E0(-26276, (__CFString **)(a3 + 40), @"q_pairs overflow");
          if (Mutable) {
            goto LABEL_25;
          }
        }

        else
        {
          sub_1000194E0(-26276, (__CFString **)(a3 + 40), @"failed to get attribute %@ data", *a1);
        }

        break;
      default:
LABEL_21:
        sub_1000194E0(-50, (__CFString **)(a3 + 40), @"attribute %@: value: %@ failed to convert", *a1, a2);
        return;
    }
  }

void sub_1000F7B40(const void *a1, const __CFBoolean *a2, uint64_t a3)
{
  if (CFEqual(a1, kSecAttrDeriveSyncIDFromItemAttributes))
  {
    *(_BYTE *)(a3 + 154) = CFBooleanGetValue(a2) != 0;
  }

  else if (CFEqual(a1, @"persistref"))
  {
    if (a2) {
      CFRetain(a2);
    }
    *(void *)(a3 + 8syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = a2;
  }

  else
  {
    double v6 = sub_10010520C(*(__CFString ***)a3, a1, (__CFString **)(a3 + 40));
    if (v6)
    {
      double v7 = v6;
      sub_1000F7914(v6, a2, a3);
      int v8 = *((_DWORD *)v7 + 2);
      if (v8 == 15)
      {
        Boolean Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 8), *v7);
        if (Value)
        {
          id v10 = (const void *)SecAccessControlCreateFromData(kCFAllocatorDefault, Value, a3 + 40);
          if (v10)
          {
            id v11 = v10;
            sub_1000F7CA0(a3, v10);
            CFRelease(v11);
          }
        }

        int v8 = *((_DWORD *)v7 + 2);
      }

      if (v8 == 14)
      {
        uint64_t v12 = SecAccessControlCreate(kCFAllocatorDefault, a3 + 40);
        if (v12)
        {
          uint64_t v13 = (const void *)v12;
          id v14 = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 8), *v7);
          CFRelease(v13);
        }
      }
    }
  }

void sub_1000F7CA0(uint64_t a1, CFTypeRef cf)
{
  id v3 = *(const void **)(a1 + 136);
  if (!v3)
  {
    CFTypeRef v4 = CFRetain(cf);
    *(void *)(a1 + 136) = v4;
    Protection = (const void *)SecAccessControlGetProtection(v4);
    if (Protection)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 8), kSecAttrAccessible, Protection);
      return;
    }

    double v6 = (__CFString **)(a1 + 40);
    double v7 = @"kSecAccessControl missing protection";
    goto LABEL_8;
  }

  if (!CFEqual(v3, cf))
  {
    double v6 = (__CFString **)(a1 + 40);
    double v7 = @"conflicting kSecAccess and kSecAccessControl attributes";
LABEL_8:
    sub_1000194E0(-50, v6, v7);
  }

void sub_1000F7D2C(const void *a1, const __CFData *a2, uint64_t a3)
{
  id v5 = sub_10010520C(*(__CFString ***)a3, a1, (__CFString **)(a3 + 40));
  if (v5)
  {
    double v6 = v5;
    Boolean Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 8), *v5);
    if (Value)
    {
      int v8 = Value;
      CFTypeID v9 = CFGetTypeID(Value);
      if (v9 == CFArrayGetTypeID())
      {
        CFMutableStringRef Mutable = (__CFArray *)CFRetain(v8);
      }

      else
      {
        CFMutableStringRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
        CFArrayAppendValue(Mutable, v8);
      }

      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a3 + 8), *v6);
      if (Mutable) {
        goto LABEL_9;
      }
    }

    else
    {
      CFMutableStringRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
      if (Mutable)
      {
LABEL_9:
        sub_1000F7914(v6, a2, a3);
        id v11 = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 8), *v6);
        CFArrayAppendValue(Mutable, v11);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 8), *v6, Mutable);
        CFRelease(Mutable);
      }
    }
  }

void sub_1000F7E54(const void *a1, const __CFData *a2, uint64_t a3)
{
  id v5 = sub_10010520C(*(__CFString ***)a3, a1, (__CFString **)(a3 + 40));
  if (v5)
  {
    double v6 = v5;
    Boolean Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 8), *v5);
    if (Value)
    {
      int v8 = Value;
      CFTypeID v9 = CFGetTypeID(Value);
      if (v9 == CFArrayGetTypeID())
      {
        CFMutableStringRef Mutable = (__CFArray *)CFRetain(v8);
      }

      else
      {
        id v11 = (os_log_s *)sub_10001267C("SecError");
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = *v6;
          int v14 = 138412546;
          uint64_t v15 = v12;
          __int16 v16 = 2112;
          id v17 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "negating %@ = %@ in query",  (uint8_t *)&v14,  0x16u);
        }

        CFMutableStringRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
        CFArrayAppendValue(Mutable, kCFNull);
        CFArrayAppendValue(Mutable, v8);
      }

      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a3 + 8), *v6);
      if (Mutable) {
        goto LABEL_11;
      }
    }

    else
    {
      CFMutableStringRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
      CFArrayAppendValue(Mutable, kCFNull);
      if (Mutable)
      {
LABEL_11:
        sub_1000F7914(v6, a2, a3);
        uint64_t v13 = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 8), *v6);
        CFArrayAppendValue(Mutable, v13);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 8), *v6, Mutable);
        CFRelease(Mutable);
      }
    }
  }

void sub_1000F8028(uint64_t *a1, CFTypeRef cf1)
{
  if (!a1[17])
  {
    if (CFEqual(cf1, @"com.apple.apsd"))
    {
      id v3 = (const __CFBoolean **)&kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
    }

    else
    {
      uint64_t v4 = *a1;
      uint64_t v5 = sub_10010C560((uint64_t)@"cert", &qword_1002DEB48, (uint64_t)&unk_1002DEB40);
      id v3 = (const __CFBoolean **)&kSecAttrAccessibleWhenUnlocked;
      if (v4 == v5) {
        id v3 = (const __CFBoolean **)&kSecAttrAccessibleAlwaysPrivate;
      }
    }

    sub_1000F7B40(kSecAttrAccessible, *v3, (uint64_t)a1);
  }

uint64_t sub_1000F80C8(uint64_t a1, CFErrorRef *a2)
{
  id v3 = *(__CFError **)(a1 + 40);
  *(void *)(a1 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  if (a2 && v3)
  {
    if (*a2)
    {
      if (CFErrorGetCode(*a2) != -25330) {
        goto LABEL_9;
      }
      CFErrorRef v4 = *a2;
      if (*a2)
      {
        *a2 = 0LL;
        CFRelease(v4);
LABEL_9:
        if (*a2) {
          goto LABEL_10;
        }
      }
    }

    uint64_t result = 0LL;
    *a2 = v3;
    return result;
  }

  if (v3)
  {
    if (!a2)
    {
LABEL_10:
      CFRelease(v3);
      return 0LL;
    }

    goto LABEL_9;
  }

  return 1LL;
}

uint64_t sub_1000F8150(const void **a1, CFErrorRef *a2)
{
  uint64_t v3 = sub_1000F80C8((uint64_t)a1, a2);
  uint64_t v4 = (uint64_t)a1[4];
  if (v4 >= 1)
  {
    uint64_t v5 = a1 + 33;
    do
    {
      double v7 = *v5;
      v5 += 2;
      double v6 = v7;
      if (v7) {
        CFRelease(v6);
      }
      --v4;
    }

    while (v4);
  }

  int v8 = a1[1];
  if (v8) {
    CFRelease(v8);
  }
  CFTypeID v9 = a1[16];
  if (v9) {
    CFRelease(v9);
  }
  id v10 = a1[21];
  if (v10) {
    CFRelease(v10);
  }
  id v11 = a1[22];
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = a1[17];
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v13 = a1[18];
  if (v13) {
    CFRelease(v13);
  }
  int v14 = a1[23];
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v15 = a1[25];
  if (v15) {
    CFRelease(v15);
  }
  __int16 v16 = a1[26];
  if (v16) {
    CFRelease(v16);
  }
  id v17 = a1[28];
  if (v17) {
    CFRelease(v17);
  }
  double v18 = a1[29];
  if (v18) {
    CFRelease(v18);
  }
  __int16 v19 = a1[10];
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = a1[30];
  if (v20) {
    CFRelease(v20);
  }
  uint64_t v21 = a1[27];
  if (v21) {
    CFRelease(v21);
  }
  free(a1);
  return v3;
}

uint64_t sub_1000F8254(uint64_t a1, int a2, CFErrorRef *a3)
{
  if (a2 && !*(void *)(a1 + 40))
  {
    if (*(_BYTE *)(a1 + 114) || *(_BYTE *)(a1 + 113) && !sub_1000F7684(*(CFTypeRef *)(a1 + 128))) {
      sub_10010C930();
    }
    if (*(_BYTE *)(a1 + 115)) {
      sub_10010C8E0();
    }
  }

  return sub_1000F8150((const void **)a1, a3) & a2;
}

void *sub_1000F82CC(uint64_t a1, const void *a2, CFDictionaryRef theDict, uint64_t a4, __CFString **a5)
{
  if (!a1)
  {
    if (a5 && !*a5) {
      sub_1000194E0(-50, a5, @"Missing class");
    }
    return 0LL;
  }

  int v8 = a2;
  if (!a2)
  {
    if (qword_1002DEA70 != -1) {
      dispatch_once(&qword_1002DEA70, &stru_100286568);
    }
    int v8 = (const void *)qword_1002DEA78;
  }

  if (!*(void *)(a1 + 16)) {
    goto LABEL_10;
  }
  uint64_t v10 = 0LL;
  while (*(void *)(a1 + 24 + 8 * v10++))
    ;
  if (!v10)
  {
LABEL_10:
    uint64_t v12 = sub_10010C560((uint64_t)@"cert", &qword_1002DEB48, (uint64_t)&unk_1002DEB40);
    if (*(void *)(v12 + 16))
    {
      uint64_t v13 = 0LL;
      do
        uint64_t v14 = v13 + 1;
      while (*(void *)(v12 + 24 + 8 * v13++));
    }

    else
    {
      uint64_t v14 = 0LL;
    }

    uint64_t v16 = sub_10010C560((uint64_t)@"keys", &qword_1002DEB58, (uint64_t)&unk_1002DEB50);
    if (*(void *)(v16 + 16))
    {
      uint64_t v17 = 0LL;
      do
        uint64_t v18 = v17 + 1;
      while (*(void *)(v16 + 24 + 8 * v17++));
    }

    else
    {
      uint64_t v18 = 0LL;
    }

    uint64_t v10 = v18 + v14;
  }

  if (theDict)
  {
    v10 += CFDictionaryGetCount(theDict);
    uint64_t v20 = *(const void ***)(a1 + 16);
    if (v20)
    {
      uint64_t v21 = (const void ***)(a1 + 24);
      do
      {
        v10 -= CFDictionaryContainsKey(theDict, *v20) != 0;
        id v22 = *v21++;
        uint64_t v20 = v22;
      }

      while (v22);
    }
  }

  if (v10 >= 129)
  {
    if (a5 && !*a5)
    {
      CFIndex v23 = (os_log_s *)sub_10001267C("SecError");
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        int v28 = 134218240;
        uint64_t v29 = v10;
        __int16 v30 = 1024;
        int v31 = 128;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "key_count: %ld, QUERY_KEY_LIMIT: %d",  (uint8_t *)&v28,  0x12u);
      }

      sub_1000194E0(-50, a5, @"Past query key limit");
    }

    return 0LL;
  }

  unsigned int v26 = calloc(1uLL, 16 * v10 + 256);
  if (!v26)
  {
    if (a5 && !*a5) {
      sub_1000194E0(-108, a5, @"Out of memory");
    }
    return 0LL;
  }

  uint64_t v24 = v26;
  v26[31] = v10;
  v26[16] = CFRetain(v8);
  *((_BYTE *)v24 + 154) = 0;
  *((_DWORD *)v24 + 3syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0;
  void *v24 = a1;
  v24[2] = v10;
  v24[3] = v10;
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v24[1] = Mutable;
  if (a4)
  {
    if (*(_BYTE *)(a4 + 37)) {
      CFDictionaryAddValue(Mutable, @"clip", kCFBooleanTrue);
    }
    *((_BYTE *)v24 + 116) = *(_BYTE *)(a4 + 49) ^ 1;
  }

  return v24;
}

void sub_1000F85B4(CFTypeRef cf, const void *a2, uint64_t a3)
{
  uint64_t v3 = (__CFString **)(a3 + 40);
  if (!*(void *)(a3 + 40))
  {
    if (cf)
    {
      CFTypeID v7 = CFGetTypeID(cf);
      if (v7 == CFStringGetTypeID())
      {
        if (a2)
        {
          if (CFEqual(cf, @"musr"))
          {
            int v8 = (os_log_s *)sub_10001267C("item");
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "update_applier: refusing to update musr",  buf,  2u);
            }
          }

          else if (CFEqual(cf, kSecValueData))
          {
            sub_1000F8704(a2, a3);
          }

          else
          {
            sub_1000F7B40(cf, (const __CFBoolean *)a2, a3);
          }
        }

        else
        {
          sub_1000194E0(-50, v3, @"update_applier: key %@ has NULL value", cf);
        }

        return;
      }

      CFTypeRef v9 = cf;
    }

    else
    {
      CFTypeRef v9 = 0LL;
    }

    sub_1000194E0(-50, v3, @"update_applier: unknown key type %@", v9);
  }

void sub_1000F8704(const void *a1, uint64_t a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 == CFDataGetTypeID())
  {
    *(void *)(a2 + 56) = a1;
    uint64_t v5 = *(__CFDictionary **)(a2 + 8);
    if (v5) {
      CFDictionarySetValue(v5, kSecValueData, a1);
    }
  }

  else
  {
    sub_1000194E0(-50, (__CFString **)(a2 + 40), @"set_data: value %@ is not type data", a1);
  }

uint64_t sub_1000F8790(const __CFDictionary *a1, const void *a2, uint64_t a3, uint64_t a4, __CFString **a5)
{
  uint64_t v20 = 0LL;
  Boolean Value = CFDictionaryGetValue(a1, kSecClass);
  if (Value && (id v11 = Value, v12 = CFGetTypeID(Value), v12 == CFStringGetTypeID()))
  {
    uint64_t v20 = v11;
  }

  else
  {
    uint64_t v13 = CFDictionaryGetValue(a1, kSecValuePersistentRef);
    if (!v13
      || (v14 = v13, CFTypeID v15 = CFGetTypeID(v13), v15 != CFDataGetTypeID())
      || (_SecItemParsePersistentRef(v14, &v20, 0LL, 0LL, 0LL), (id v11 = v20) == 0LL))
    {
LABEL_10:
      sub_1000194E0(-50, a5, @"query missing class name");
      goto LABEL_11;
    }
  }

  uint64_t v16 = sub_1000F77E0(v11);
  if (v16) {
    goto LABEL_12;
  }
  if (!v20) {
    goto LABEL_10;
  }
  sub_1000194E0(-25306, a5, @"can't find class named: %@", v20);
LABEL_11:
  uint64_t v16 = 0LL;
LABEL_12:
  uint64_t v17 = sub_1000F82CC((uint64_t)v16, a2, a1, a4, a5);
  uint64_t v18 = (uint64_t)v17;
  if (v17)
  {
    v17[13] = a3;
    CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)sub_1000F8940, v17);
    if ((sub_1000F80C8(v18, (CFErrorRef *)a5) & 1) != 0)
    {
      if (!*(_BYTE *)(v18 + 112) && !*(void *)(v18 + 72) && !*(void *)(v18 + 80) && !*(void *)(v18 + 232)) {
        sub_1000F7B40(kSecAttrSynchronizable, kCFBooleanFalse, v18);
      }
    }

    else
    {
      sub_1000F8150((const void **)v18, (CFErrorRef *)a5);
      return 0LL;
    }
  }

  return v18;
}

void sub_1000F8940(const __CFString *cf, const __CFBoolean *a2, __CFString **a3)
{
  uint64_t v3 = a3 + 5;
  if (a3[5]) {
    return;
  }
  if (!cf)
  {
    sub_1000194E0(-50, a3 + 5, @"applier: NULL key");
    return;
  }

  if (!a2)
  {
    sub_1000194E0(-50, v3, @"applier: key %@ has NULL value", cf);
    return;
  }

  CFTypeID v7 = CFGetTypeID(cf);
  if (v7 != CFStringGetTypeID())
  {
    if (v7 != CFNumberGetTypeID())
    {
      sub_1000194E0(-50, v3, @"applier: key %@ neither string nor number", cf);
      return;
    }

void *sub_1000F8B58(const void *a1, const void *a2, uint64_t a3)
{
  if (CFEqual(a1, kSecClass)) {
    return sub_1000F96B4((void *)a3, a2, (__CFString **)(a3 + 40));
  }
  else {
    return (void *)sub_1000194E0(-50, (__CFString **)(a3 + 40), @"add_class: key %@ is not %@", a1, kSecClass);
  }
}

void sub_1000F8BE0(CFTypeRef cf2, const void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16) - 1LL;
  *(void *)(a3 + 16) = v6;
  uint64_t v7 = a3 + 16 * v6;
  *(void *)(v7 + 256) = cf2;
  *(void *)(v7 + 264) = a2;
  if (!CFEqual(kSecMatchLimit, cf2))
  {
    if (CFEqual(kSecMatchIssuers, cf2))
    {
      CFTypeID v9 = CFGetTypeID(a2);
      if (v9 == CFArrayGetTypeID())
      {
        CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
        if (!Mutable) {
          return;
        }
        id v11 = Mutable;
        CFIndex Count = CFArrayGetCount((CFArrayRef)a2);
        if (Count >= 1)
        {
          CFIndex v13 = Count;
          for (CFIndex i = 0LL; i != v13; ++i)
          {
            CFNullRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, i);
            CFTypeID TypeID = CFDataGetTypeID();
            if (TypeID == CFGetTypeID(ValueAtIndex))
            {
              uint64_t v17 = (const void *)SecDistinguishedNameCopyNormalizedContent(ValueAtIndex);
              if (v17)
              {
                uint64_t v18 = v17;
                CFArrayAppendValue(v11, v17);
                CFRelease(v18);
              }
            }
          }
        }

        if (CFArrayGetCount(v11) >= 1)
        {
          *(void *)(a3 + 176) = v11;
          return;
        }

        goto LABEL_25;
      }
    }

    if (CFEqual(kSecMatchPolicy, cf2))
    {
      CFTypeID v20 = CFGetTypeID(a2);
      if (v20 == CFArrayGetTypeID())
      {
        uint64_t v21 = _CFXPCCreateXPCObjectFromCFObject(a2);
        if (v21)
        {
          id v22 = (void *)v21;
          id v11 = (__CFArray *)SecPolicyXPCArrayCopyArray(v21, a3 + 40);
          xpc_release(v22);
          if (!v11) {
            return;
          }
          if (CFArrayGetCount(v11) == 1)
          {
            CFIndex v23 = CFArrayGetValueAtIndex(v11, 0LL);
            CFTypeID v24 = CFGetTypeID(v23);
            if (v24 == SecPolicyGetTypeID())
            {
              BOOL v25 = CFArrayGetValueAtIndex(v11, 0LL);
              sub_1000F9758(a3, v25);
LABEL_25:
              unsigned int v26 = v11;
LABEL_32:
              CFRelease(v26);
              return;
            }
          }

          CFRelease(v11);
          int v31 = @"unsupported array of policies";
        }

        else
        {
          int v31 = @"unsupported kSecMatchPolicy object in query";
        }

        __int16 v30 = (__CFString **)(a3 + 40);
      }

      else
      {
        __int16 v30 = (__CFString **)(a3 + 40);
        int v31 = @"unsupported value for kSecMatchPolicy attribute";
      }
    }

    else if (CFEqual(kSecMatchValidOnDate, cf2))
    {
      CFTypeID v27 = CFGetTypeID(a2);
      if (v27 == CFNullGetTypeID())
      {
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        CFDateRef v29 = CFDateCreate(kCFAllocatorDefault, Current);
        sub_1000F97A0(a3, v29);
        unsigned int v26 = v29;
        goto LABEL_32;
      }

      CFTypeID v33 = CFGetTypeID(a2);
      if (v33 == CFDateGetTypeID())
      {
        sub_1000F97A0(a3, a2);
        return;
      }

      __int16 v30 = (__CFString **)(a3 + 40);
      int v31 = @"unsupported value for kSecMatchValidOnDate attribute";
    }

    else if (CFEqual(kSecMatchTrustedOnly, cf2))
    {
      CFTypeID v32 = CFGetTypeID(a2);
      if (v32 == CFBooleanGetTypeID())
      {
        sub_1000F97E8(a3, a2);
        return;
      }

      __int16 v30 = (__CFString **)(a3 + 40);
      int v31 = @"unsupported value for kSecMatchTrustedOnly attribute";
    }

    else if (CFEqual(kSecMatchHostOrSubdomainOfHost, cf2))
    {
      CFTypeID v34 = CFGetTypeID(a2);
      if (v34 == CFStringGetTypeID())
      {
        sub_1000F982C(a3, a2);
        return;
      }

      __int16 v30 = (__CFString **)(a3 + 40);
      int v31 = @"unsupported value for kSecMatchHostOrSubdomainOfHost attribute";
    }

    else
    {
      if (!CFEqual(kSecMatchEmailAddressIfPresent, cf2)) {
        return;
      }
      CFTypeID v35 = CFGetTypeID(a2);
      if (v35 == CFStringGetTypeID())
      {
        sub_1000F9870(a3, a2);
        return;
      }

      __int16 v30 = (__CFString **)(a3 + 40);
      int v31 = @"unsupported value for kSecMatchEmailAddressIfPresent attribute";
    }

    sub_1000194E0(-50, v30, v31);
    return;
  }

  CFTypeID v8 = CFGetTypeID(a2);
  if (v8 != CFNumberGetTypeID())
  {
    if (CFEqual(kSecMatchLimitAll, a2))
    {
      uint64_t v19 = -1LL;
    }

    else
    {
      if (!CFEqual(kSecMatchLimitOne, a2))
      {
        sub_1000194E0(-50, (__CFString **)(a3 + 40), @"unsupported match limit %@", a2);
        return;
      }

      uint64_t v19 = 1LL;
    }

    *(void *)(a3 + 104) = v19;
    return;
  }

uint64_t sub_1000F90B8(const void *a1, CFTypeRef cf, uint64_t a3)
{
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 != CFBooleanGetTypeID()) {
    return sub_1000194E0(-50, (__CFString **)(a3 + 40), @"add_return: value %@ is not CFBoolean", cf);
  }
  int v7 = CFEqual(cf, kCFBooleanTrue);
  uint64_t result = CFEqual(a1, kSecReturnData);
  if ((_DWORD)result)
  {
    int v9 = 1;
  }

  else
  {
    uint64_t result = CFEqual(a1, kSecReturnAttributes);
    if ((_DWORD)result)
    {
      int v9 = 2;
    }

    else
    {
      uint64_t result = CFEqual(a1, kSecReturnRef);
      if ((_DWORD)result)
      {
        int v9 = 4;
      }

      else
      {
        uint64_t result = CFEqual(a1, kSecReturnPersistentRef);
        if (!(_DWORD)result) {
          return sub_1000194E0(-50, (__CFString **)(a3 + 40), @"add_return: unknown key %@", a1);
        }
        int v9 = 8;
      }
    }
  }

  int v10 = *(_DWORD *)(a3 + 48);
  if ((v10 & v9) != 0 && !v7)
  {
    int v11 = v10 ^ v9;
LABEL_17:
    *(_DWORD *)(a3 + 4_Block_object_dispose(va, 8) = v11;
    return result;
  }

  if ((v10 & v9) == 0 && v7)
  {
    int v11 = v10 | v9;
    goto LABEL_17;
  }

  return result;
}

void sub_1000F91F0(const void *a1, const __CFString *a2, uint64_t a3)
{
  if (CFEqual(a1, @"u_ItemList"))
  {
    *(void *)(a3 + 8_Block_object_dispose(va, 8) = a2;
  }

  else if (CFEqual(a1, kSecUseTombstones))
  {
    CFTypeID v6 = CFGetTypeID(a2);
    if (v6 == CFBooleanGetTypeID())
    {
      *(void *)(a3 + 96) = a2;
      return;
    }

    CFTypeID v9 = CFGetTypeID(a2);
    if (v9 == CFNumberGetTypeID())
    {
      SInt32 Value = CFBooleanGetValue((CFBooleanRef)a2);
    }

    else
    {
      CFTypeID v11 = CFGetTypeID(a2);
      if (v11 != CFStringGetTypeID())
      {
        sub_1000194E0( -50,  (__CFString **)(a3 + 40),  @"add_use: value %@ for key %@ is neither CFBoolean nor CFNumber",  a2,  a1);
        return;
      }

      SInt32 Value = CFStringGetIntValue(a2);
    }

    CFTypeID v12 = &kCFBooleanTrue;
    if (!Value) {
      CFTypeID v12 = &kCFBooleanFalse;
    }
    *(CFBooleanRef *)(a3 + 96) = *v12;
  }

  else if (CFEqual(a1, kSecUseCredentialReference))
  {
    CFTypeID v7 = CFGetTypeID(a2);
    if (v7 == CFDataGetTypeID())
    {
      if (*(const __CFString **)(a3 + 144) != a2)
      {
        CFRetain(a2);
        CFTypeID v8 = *(const void **)(a3 + 144);
        if (v8) {
          CFRelease(v8);
        }
        *(void *)(a3 + 144) = a2;
      }
    }

    else
    {
      sub_1000194E0(-50, (__CFString **)(a3 + 40), @"add_use: value %@ for key %@ is not CFData", a2, a1);
    }
  }

  else if (CFEqual(a1, kSecUseAuthenticationUI))
  {
    CFTypeID v13 = CFGetTypeID(a2);
    if (v13 == CFStringGetTypeID())
    {
      if (kSecUseAuthenticationUISkip) {
        BOOL v14 = CFEqual(kSecUseAuthenticationUISkip, a2) != 0;
      }
      else {
        BOOL v14 = 0;
      }
      *(_BYTE *)(a3 + 152) = v14;
    }

    else
    {
      sub_1000194E0(-50, (__CFString **)(a3 + 40), @"add_use: value %@ for key %@ is not CFString", a2, a1);
    }
  }

  else if (CFEqual(a1, kSecUseSystemKeychain))
  {
    *(_DWORD *)(a3 + 12syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0;
  }

  else if (CFEqual(a1, kSecUseUserIndependentKeychain) {
         && (CFEqual(a2, kCFBooleanTrue)
  }
          || (CFTypeID v15 = CFGetTypeID(a2), v15 == CFNumberGetTypeID()) && CFBooleanGetValue((CFBooleanRef)a2)
          || (CFTypeID v16 = CFGetTypeID(a2), v16 == CFStringGetTypeID()) && CFStringGetIntValue(a2)))
  {
    *(_DWORD *)(a3 + 12syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0;
    *(_DWORD *)(a3 + 192) = 2;
  }

  else
  {
    sub_1000194E0(-50, (__CFString **)(a3 + 40), @"add_use: unknown key %@", a1);
  }

void sub_1000F9490(const void *a1, const void *a2, __CFString **a3)
{
  if (CFEqual(a1, kSecValueData))
  {
    sub_1000F8704(a2, (uint64_t)a3);
  }

  else if (CFEqual(a1, kSecValuePersistentRef))
  {
    CFDictionaryRef theDict = 0LL;
    CFTypeRef cf = 0LL;
    CFDataRef theData = 0LL;
    if (_SecItemParsePersistentRef(a2, &cf, a3 + 9, &theData, &theDict))
    {
      sub_1000F96B4(a3, cf, a3 + 5);
      CFTypeID v6 = theDict;
      if (theDict)
      {
        SInt32 Value = (const __CFBoolean *)CFDictionaryGetValue(theDict, kSecAttrTokenID);
        sub_1000F7B40(kSecAttrTokenID, Value, (uint64_t)a3);
        CFTypeID v8 = (__CFString *)CFDictionaryGetValue(v6, kSecAttrTokenOID);
        CFTypeID v9 = a3[29];
        if (v9 != v8)
        {
          if (!v8 || (CFRetain(v8), (CFTypeID v9 = a3[29]) != 0LL)) {
            CFRelease(v9);
          }
          a3[29] = v8;
        }
      }

      if (theData)
      {
        if (CFDataGetLength(theData) == 16)
        {
          CFDataRef v10 = theData;
          if (theData)
          {
            CFTypeID v11 = CFGetTypeID(theData);
            if (v11 == CFDataGetTypeID())
            {
              CFRetain(v10);
              a3[10] = (__CFString *)v10;
              if (a3[1])
              {
                UUIDBasedPersistentRef = (const void *)_SecItemCreateUUIDBasedPersistentRef((*a3)->isa, v10, 0LL);
                CFDictionarySetValue((CFMutableDictionaryRef)a3[1], kSecValuePersistentRef, UUIDBasedPersistentRef);
                if (UUIDBasedPersistentRef) {
                  CFRelease(UUIDBasedPersistentRef);
                }
              }
            }

            else
            {
              sub_1000194E0(-50, a3 + 5, @"set_uuid_persistent_ref: value %@ is not type data", v10);
            }
          }

          else
          {
            sub_1000194E0(-50, a3 + 5, @"set_uuid_persistent_ref: value %@ is not type data", 0LL);
          }
        }

        CFDataRef v13 = theData;
        if (theData)
        {
          CFDataRef theData = 0LL;
          CFRelease(v13);
        }
      }

      CFDictionaryRef v14 = theDict;
      if (theDict)
      {
        CFDictionaryRef theDict = 0LL;
        CFRelease(v14);
      }
    }

    else
    {
      sub_1000194E0(-50, a3 + 5, @"add_value: value %@ is not a valid persitent ref", a2);
    }
  }

  else
  {
    sub_1000194E0(-50, a3 + 5, @"add_value: unknown key %@", a1);
  }

void *sub_1000F96B4(void *result, CFTypeRef cf, __CFString **a3)
{
  if (cf
    && (v5 = result, CFTypeID v6 = CFGetTypeID(cf), result = (void *)CFStringGetTypeID(), (void *)v6 == result)
    && (uint64_t result = sub_1000F77E0(cf)) != 0LL
    && (!*v5 || (void *)*v5 == result))
  {
    void *v5 = result;
  }

  else if (a3 && !*a3)
  {
    if (cf) {
      int v7 = -25306;
    }
    else {
      int v7 = -50;
    }
    return (void *)sub_1000194E0(v7, a3, @"can find class named: %@", cf);
  }

  return result;
}

void sub_1000F9758(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3 = *(CFTypeRef *)(a1 + 200);
  if (v3 != cf)
  {
    if (!cf || (CFRetain(cf), (CFTypeRef v3 = *(CFTypeRef *)(a1 + 200)) != 0LL)) {
      CFRelease(v3);
    }
    *(void *)(a1 + 20syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = cf;
  }

void sub_1000F97A0(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3 = *(CFTypeRef *)(a1 + 208);
  if (v3 != cf)
  {
    if (!cf || (CFRetain(cf), (CFTypeRef v3 = *(CFTypeRef *)(a1 + 208)) != 0LL)) {
      CFRelease(v3);
    }
    *(void *)(a1 + 20_Block_object_dispose(va, 8) = cf;
  }

void sub_1000F97E8(uint64_t a1, CFTypeRef cf)
{
  if (*(CFTypeRef *)(a1 + 224) != cf)
  {
    CFRetain(cf);
    CFTypeID v4 = *(const void **)(a1 + 224);
    if (v4) {
      CFRelease(v4);
    }
    *(void *)(a1 + 224) = cf;
  }

void sub_1000F982C(uint64_t a1, CFTypeRef cf)
{
  if (*(CFTypeRef *)(a1 + 240) != cf)
  {
    CFRetain(cf);
    CFTypeID v4 = *(const void **)(a1 + 240);
    if (v4) {
      CFRelease(v4);
    }
    *(void *)(a1 + 24syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = cf;
  }

void sub_1000F9870(uint64_t a1, CFTypeRef cf)
{
  if (*(CFTypeRef *)(a1 + 216) != cf)
  {
    CFRetain(cf);
    CFTypeID v4 = *(const void **)(a1 + 216);
    if (v4) {
      CFRelease(v4);
    }
    *(void *)(a1 + 216) = cf;
  }

void sub_1000F98B4(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3 = *(CFTypeRef *)(a1 + 184);
  if (v3 != cf)
  {
    if (!cf || (CFRetain(cf), (CFTypeRef v3 = *(CFTypeRef *)(a1 + 184)) != 0LL)) {
      CFRelease(v3);
    }
    *(void *)(a1 + 184) = cf;
  }

void sub_1000F9A74( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000F9D80(_Unwind_Exception *a1)
{
}

void sub_1000FA2E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000FA374(_Unwind_Exception *a1)
{
}

void sub_1000FA750( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id obj)
{
}

void sub_1000FA924(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ([WeakRetained timeoutCanOccur])
  {
    dispatch_source_t v1 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _onqueueTimeoutError]);
    [WeakRetained setError:v1];

    [WeakRetained setTimeoutCanOccur:0];
    [WeakRetained cancel];
  }
}

BOOL sub_1000FA990(id a1, id a2, unint64_t a3, BOOL *a4)
{
  return objc_msgSend(a2, "isFinished", a3, a4) ^ 1;
}

id sub_1000FA9AC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isCancelled];
  return result;
}

void sub_1000FA9E8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  CFTypeRef v3 = WeakRetained;
  if (WeakRetained)
  {
    CFTypeID v4 = (void (**)(void))objc_claimAutoreleasedReturnValue([WeakRetained finishingBlock]);
    v4[2]();

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 completionHandlerDidRunCondition]);
    [v5 fulfill];

    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    CFTypeID v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dependencies", 0));
    id v7 = [v6 countByEnumeratingWithState:&v13 objects:v18 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v14;
      do
      {
        for (CFIndex i = 0LL; i != v8; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v14 != v9) {
            objc_enumerationMutation(v6);
          }
          [v3 removeDependency:*(void *)(*((void *)&v13 + 1) + 8 * (void)i)];
        }

        id v8 = [v6 countByEnumeratingWithState:&v13 objects:v18 count:16];
      }

      while (v8);
    }
  }

  else
  {
    id v11 = sub_1000AA6AC(@"resultoperation", 0LL);
    CFTypeID v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "completion handler called on deallocated operation instance",  buf,  2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_1000FAB90(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  dispatch_source_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", 0.0));
  [WeakRetained setFinishDate:v1];
}

void sub_1000FAD68(_Unwind_Exception *a1)
{
}

void sub_1000FAD88(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000FBD6C(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v6 = 0LL;
  id v7 = &v6;
  uint64_t v8 = 0x2000000000LL;
  int v9 = -1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  v5[2] = sub_1000FBE20;
  v5[3] = &unk_100286638;
  void v5[5] = a1;
  void v5[6] = a2;
  void v5[4] = &v6;
  unsigned __int8 v2 = sub_1000FBE80(a2, (uint64_t)v5);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  if ((v2 & 1) == 0 && (v3 & 0x80000000) == 0)
  {
    close(*((_DWORD *)v7 + 6));
    uint64_t v3 = 0xFFFFFFFFLL;
    *((_DWORD *)v7 + 6) = -1;
  }

  _Block_object_dispose(&v6, 8);
  return v3;
}

BOOL sub_1000FBE20(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000LL;
  _DWORD v7[2] = sub_1000FBF34;
  v7[3] = &unk_100286610;
  void v7[4] = a1[4];
  void v7[5] = v5;
  return sub_1000D4F94(a3, v4, v5, v7);
}

void *sub_1000FBE80(CFTypeRef *a1, uint64_t a2)
{
  uint64_t v4 = sub_1001110DC(0LL);
  uint64_t v5 = sub_100101A94(v4);
  sub_100019570(v5 != 0, a1, @"No datasource");
  if (!v5) {
    return 0LL;
  }
  id result = (void *)(*(uint64_t (**)(uint64_t, const CFStringRef, CFTypeRef *))(v5 + 8))( v5,  kSecAttrAccessibleWhenUnlocked,  a1);
  if (result)
  {
    id v7 = result;
    uint64_t v8 = *result;
    if (*result) {
      (*(void (**)(uint64_t, void *, uint64_t))(a2 + 16))(a2, result, v8);
    }
    LODWORD(result) = ((uint64_t (*)(void *, CFTypeRef *))v7[9])(v7, a1);
    if (v8) {
      return (void *)result;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

void sub_1000FBF34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(CFTypeRef **)(a1 + 40);
  uint64_t v7 = 0LL;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000LL;
  int v10 = -1;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1001AF4F4;
  v6[3] = &unk_100292A10;
  void v6[4] = &v7;
  void v6[5] = v4;
  sub_1001AE804(a3, v4, v6);
  int v5 = *((_DWORD *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v5;
}

void sub_1000FBFD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000FBFF0(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000LL;
  char v11 = 1;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000LL;
  _DWORD v7[2] = sub_1000FC094;
  v7[3] = &unk_100286660;
  void v7[4] = &v8;
  void v7[5] = a1;
  void v7[6] = a2;
  void v7[7] = a3;
  v7[8] = a4;
  unsigned int v4 = sub_1000FBE80(a4, (uint64_t)v7);
  if (*((_BYTE *)v9 + 24)) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0LL;
  }
  *((_BYTE *)v9 + 24) = v5;
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1000FC094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  __int128 v9 = *(_OWORD *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 64);
  if (-[OTSOSActualAdapter sosEnabled]_0(a1, a2))
  {
    uint64_t v14 = 0LL;
    __int128 v15 = &v14;
    uint64_t v16 = 0x2020000000LL;
    char v17 = 1;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1000D510C;
    v10[3] = &unk_100285920;
    void v10[4] = &v14;
    __int128 v11 = v9;
    uint64_t v12 = v6;
    uint64_t v13 = a3;
    BOOL v7 = sub_1000D4F94(a3, v5, v6, v10);
    if (*((_BYTE *)v15 + 24)) {
      BOOL v8 = v7;
    }
    else {
      BOOL v8 = 0;
    }
    *((_BYTE *)v15 + 24) = v8;
    _Block_object_dispose(&v14, 8);
  }

  else
  {
    SOSCCSetSOSDisabledError(v6);
    BOOL v8 = 0;
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v8;
}

void sub_1000FC184(_Unwind_Exception *a1)
{
}

uint64_t sub_1000FC19C(CFTypeRef *a1)
{
  uint64_t v7 = 0LL;
  BOOL v8 = &v7;
  uint64_t v9 = 0x2000000000LL;
  uint64_t v10 = 0LL;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  void v6[2] = sub_1000FC23C;
  v6[3] = &unk_100286688;
  void v6[4] = &v7;
  void v6[5] = a1;
  unsigned __int8 v1 = sub_1000FBE80(a1, (uint64_t)v6);
  unsigned __int8 v2 = v8;
  if ((v1 & 1) == 0)
  {
    uint64_t v3 = (const void *)v8[3];
    if (v3)
    {
      v8[3] = 0LL;
      CFRelease(v3);
      unsigned __int8 v2 = v8;
    }
  }

  uint64_t v4 = v2[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t sub_1000FC23C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1000D53AC(a3, *(void *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1000FC270(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000LL;
  uint64_t v11 = 0LL;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000LL;
  _DWORD v7[2] = sub_1000FC31C;
  v7[3] = &unk_1002866B0;
  void v7[4] = &v8;
  void v7[5] = a1;
  void v7[6] = a2;
  unsigned __int8 v2 = sub_1000FBE80(a2, (uint64_t)v7);
  uint64_t v3 = v9;
  if ((v2 & 1) == 0)
  {
    uint64_t v4 = (const void *)v9[3];
    if (v4)
    {
      v9[3] = 0LL;
      CFRelease(v4);
      uint64_t v3 = v9;
    }
  }

  uint64_t v5 = v3[3];
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1000FC31C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1[5];
  uint64_t v5 = a1[6];
  if (-[OTSOSActualAdapter sosEnabled]_0((uint64_t)a1, a2))
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = &v10;
    uint64_t v12 = 0x2020000000LL;
    uint64_t v13 = &stru_100294B48;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    _OWORD v9[2] = sub_1000D55C8;
    v9[3] = &unk_100285948;
    void v9[4] = &v10;
    uint64_t v7 = v9;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000D5600;
    block[3] = &unk_100285B10;
    uint64_t v16 = a3;
    uint64_t v17 = v6;
    id v15 = v7;
    dispatch_sync(*(dispatch_queue_t *)(a3 + 112), block);

    uint64_t v8 = v11[3];
    _Block_object_dispose(&v10, 8);
  }

  else
  {
    SOSCCSetSOSDisabledError(v5);
    uint64_t v8 = 0LL;
  }

  *(void *)(*(void *)(a1[4] + 8LL) + 24LL) = v8;
}

uint64_t sub_1000FC420(int a1, uint64_t a2, uint64_t a3, CFTypeRef cf, uint64_t a5, CFTypeRef *a6)
{
  uint64_t v24 = 0LL;
  BOOL v25 = &v24;
  uint64_t v26 = 0x2000000000LL;
  char v27 = 0;
  if (cf && (CFTypeID v11 = CFGetTypeID(cf), v11 == CFDataGetTypeID()))
  {
    uint64_t v12 = SOSBackupSliceKeyBagCreateFromData(kCFAllocatorDefault, a3, a6);
    if (v12)
    {
      uint64_t v13 = (const void *)v12;
      if (a2)
      {
        int v14 = SOSBSKBLoadAndUnlockWithPeerIDAndSecret();
      }

      else if (SOSBSKBIsDirect())
      {
        int v14 = SOSBSKBLoadAndUnlockWithDirectSecret(v13, cf, a6);
      }

      else
      {
        int v14 = SOSBSKBLoadAndUnlockWithWrappingSecret(v13, cf, a6);
      }

      int v15 = v14;
      if (v14 != -1)
      {
        *((_BYTE *)v25 + 24) = 1;
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 0x40000000LL;
        v22[2] = sub_1000FC5D0;
        v22[3] = &unk_100286720;
        void v22[4] = &v24;
        v22[5] = a6;
        v22[6] = a5;
        int v23 = v14;
        unsigned __int8 v16 = sub_1000FBE80(a6, (uint64_t)v22);
        if (*((_BYTE *)v25 + 24)) {
          unsigned __int8 v17 = v16;
        }
        else {
          unsigned __int8 v17 = 0;
        }
        *((_BYTE *)v25 + 24) = v17;
        BOOL v18 = sub_100120750(v15, a6);
        if (*((_BYTE *)v25 + 24)) {
          BOOL v19 = v18;
        }
        else {
          BOOL v19 = 0;
        }
        *((_BYTE *)v25 + 24) = v19;
      }

      CFRelease(v13);
    }
  }

  else if (a6)
  {
    sub_1000194E0(-50, (__CFString **)a6, @"object %@ is not a data", cf);
  }

  uint64_t v20 = *((unsigned __int8 *)v25 + 24);
  _Block_object_dispose(&v24, 8);
  return v20;
}

uint64_t sub_1000FC5D0(uint64_t a1, uint64_t a2)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000LL;
  _DWORD v7[2] = sub_1000FC674;
  v7[3] = &unk_1002866F8;
  void v7[4] = *(void *)(a1 + 32);
  void v7[5] = a2;
  int v9 = *(_DWORD *)(a1 + 56);
  int8x16_t v3 = *(int8x16_t *)(a1 + 40);
  int8x16_t v8 = vextq_s8(v3, v3, 8uLL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, void *))(a2 + 64))( a2,  v3.i64[0],  0LL,  0LL,  v7);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
  if (*(_BYTE *)(v5 + 24)) {
    char v6 = result;
  }
  else {
    char v6 = 0;
  }
  *(_BYTE *)(v5 + 24) = v6;
  return result;
}

void sub_1000FC674(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 64);
  uint64_t v12 = _NSConcreteStackBlock;
  uint64_t v13 = 0x40000000LL;
  int v14 = sub_1000FC804;
  int v15 = &unk_1002866D0;
  uint64_t v4 = *(const __CFData **)(a1 + 48);
  uint64_t v5 = *(CFTypeRef **)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = a2;
  BOOL v18 = v5;
  uint64_t v21 = 0LL;
  id v22 = &v21;
  uint64_t v23 = 0x2000000000LL;
  char v24 = 1;
  char v6 = (const __CFDictionary *)sub_100019FC8(kCFAllocatorDefault, v4, v5);
  uint64_t v7 = v6;
  if (v6)
  {
    CFTypeID v8 = CFGetTypeID(v6);
    if (v8 == CFDictionaryGetTypeID())
    {
      *((_BYTE *)v22 + 24) = 1;
      context[0] = _NSConcreteStackBlock;
      context[1] = 0x40000000LL;
      context[2] = sub_1000FC848;
      context[3] = &unk_100286748;
      int v20 = v3;
      void context[4] = &v12;
      void context[5] = &v21;
      void context[6] = v5;
      CFDictionaryApplyFunction(v7, (CFDictionaryApplierFunction)sub_1000FC9E0, context);
LABEL_7:
      CFRelease(v7);
      BOOL v9 = *((_BYTE *)v22 + 24) != 0;
      goto LABEL_9;
    }
  }

  if (v5) {
    sub_1000194E0(-50, (__CFString **)v5, @"object %@ is not a dictionary", v7, v12, v13, v14, v15, v16, v17, v18);
  }
  *((_BYTE *)v22 + 24) = 0;
  if (v7) {
    goto LABEL_7;
  }
  BOOL v9 = 0;
LABEL_9:
  _Block_object_dispose(&v21, 8);
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8LL);
  if (*(_BYTE *)(v10 + 24)) {
    BOOL v11 = v9;
  }
  else {
    BOOL v11 = 0;
  }
  *(_BYTE *)(v10 + 24) = v11;
}

void sub_1000FC804(void *a1, uint64_t a2)
{
  CFTypeRef cf = 0LL;
  if ((*(uint64_t (**)(void, uint64_t, CFTypeRef *, void))(a1[4] + 88LL))(a1[5], a2, &cf, a1[6]))
  {
    if (cf) {
      CFRelease(cf);
    }
  }

void sub_1000FC848(uint64_t a1, CFTypeRef cf, const void *a3)
{
  uint64_t v5 = *(__CFString ***)(a1 + 48);
  if (!cf || (CFTypeID v7 = CFGetTypeID(cf), v7 != CFStringGetTypeID()))
  {
    if (v5) {
      sub_1000194E0(-50, v5, @"object %@ is not a string", cf);
    }
    goto LABEL_15;
  }

  CFTypeID v8 = sub_1000F77E0(cf);
  BOOL v9 = *(__CFString ***)(a1 + 48);
  if (!v8)
  {
    BOOL v18 = sub_1000194E0(-26275, v9, @"bad class %@ in backup", cf);
    uint64_t v19 = *(void *)(*(void *)(a1 + 40) + 8LL);
    if (*(_BYTE *)(v19 + 24)) {
      BOOL v20 = v18;
    }
    else {
      BOOL v20 = 0;
    }
    *(_BYTE *)(v19 + 24) = v20;
    return;
  }

  if (!a3 || (v10 = v8, CFTypeID v11 = CFGetTypeID(a3), v11 != CFArrayGetTypeID()))
  {
    if (v9) {
      sub_1000194E0(-50, v9, @"object %@ is not an array", a3);
    }
LABEL_15:
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    return;
  }

  CFIndex Count = CFArrayGetCount((CFArrayRef)a3);
  if (Count >= 1)
  {
    CFIndex v13 = Count;
    for (CFIndex i = 0LL; i != v13; ++i)
    {
      CFNullRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex((CFArrayRef)a3, i);
      uint64_t v16 = sub_1000E92D4(kCFAllocatorDefault, v10, ValueAtIndex, *(_DWORD *)(a1 + 56), 0LL, *(__CFString ***)(a1 + 48));
      if (v16)
      {
        uint64_t v17 = v16;
        (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
        CFRelease(v17);
      }

      else
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
      }
    }
  }

uint64_t sub_1000FC9E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

void sub_1000FD7E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

uint64_t sub_1000FD9E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
  return result;
}

void sub_1000FD9F8(uint64_t a1)
{
}

void sub_1000FDA00(uint64_t a1, int a2, int a3, int a4, uint64_t a5, void *a6)
{
  id v12 = a6;
  CFIndex v13 = sub_10001267C("octagon");
  int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v15[0] = 67109632;
    v15[1] = a2;
    __int16 v16 = 1024;
    int v17 = a3;
    __int16 v18 = 1024;
    int v19 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "fetch ramp records returned with featureAllowed: %d,\n featurePromoted: %d,\n featureVisible: %d,\n",  (uint8_t *)v15,  0x14u);
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a2;
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = a5;
  if (v12) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), a6);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000FDB2C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  CFTypeID v7 = sub_10001267C("octagon");
  CFTypeID v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412546;
    id v30 = v5;
    __int16 v31 = 2112;
    id v32 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Fetch operation records %@ fetchError %@",  buf,  0x16u);
  }

  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:*(void *)(a1 + 32)]);
  uint64_t v10 = v9;
  if (v9)
  {
    CFTypeID v11 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"FeatureAllowed"]);
    unsigned int v12 = [v11 BOOLValue];

    CFIndex v13 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:@"FeaturePromoted"]);
    unsigned int v14 = [v13 BOOLValue];

    int v15 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:@"FeatureVisible"]);
    unsigned int v16 = [v15 BOOLValue];

    int v17 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:@"RetryAfter"]);
    id v18 = [v17 integerValue];

    int v19 = sub_10001267C("octagon");
    BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = &__kCFBooleanFalse;
      if (v12) {
        id v22 = &__kCFBooleanTrue;
      }
      else {
        id v22 = &__kCFBooleanFalse;
      }
      if (v14) {
        uint64_t v23 = &__kCFBooleanTrue;
      }
      else {
        uint64_t v23 = &__kCFBooleanFalse;
      }
      *(_DWORD *)__int128 buf = 138413058;
      if (v16) {
        uint64_t v21 = &__kCFBooleanTrue;
      }
      id v30 = v22;
      __int16 v31 = 2112;
      id v32 = v23;
      __int16 v33 = 2112;
      CFTypeID v34 = v21;
      __int16 v35 = 2048;
      id v36 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Fetch ramp state - featureAllowed %@, featurePromoted: %@, featureVisible: %@, retryAfter: %ld",  buf,  0x2Au);
    }
  }

  else
  {
    char v24 = sub_10001267C("SecError");
    BOOL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "octagon: Couldn't find CKRecord for ramp. Defaulting to not ramped in",  buf,  2u);
    }

    NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
    int v28 = @" Couldn't find CKRecord for ramp. Defaulting to not ramped in";
    BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v28,  &v27,  1LL));
    uint64_t v26 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.security.octagon",  26LL,  v20));

    id v6 = (id)v26;
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000FE0A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000FE190(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (!v3)
  {
    unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    CFIndex v13 = (void *)objc_claimAutoreleasedReturnValue([v12 stateHolder]);
    id v24 = 0LL;
    unsigned int v14 = [v13 persistNewTrustState:1 error:&v24];
    uint64_t v10 = (os_log_s *)v24;

    if (!v14 || v10)
    {
      uint64_t v21 = sub_10001267C("SecError");
      id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v26 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "octagon: unable to persist clique departure: %@",  buf,  0xCu);
      }

      [v5 setError:v10];
      goto LABEL_17;
    }

    int v15 = sub_10001267C("octagon");
    unsigned int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Successfully departed clique", buf, 2u);
    }

    int v17 = (void *)objc_claimAutoreleasedReturnValue([v5 intendedState]);
    [v5 setNextState:v17];
    goto LABEL_13;
  }

  [WeakRetained setError:v3];
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 deps]);
  CFTypeID v7 = (void *)objc_claimAutoreleasedReturnValue([v6 lockStateTracker]);
  unsigned int v8 = [v7 isLockedError:v3];

  BOOL v9 = sub_10001267C("octagon");
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (!v8)
  {
    if (!v11)
    {
LABEL_17:

      goto LABEL_18;
    }

    int v17 = (void *)objc_claimAutoreleasedReturnValue([v5 deps]);
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue([v17 containerName]);
    int v19 = (void *)objc_claimAutoreleasedReturnValue([v5 deps]);
    BOOL v20 = (void *)objc_claimAutoreleasedReturnValue([v19 contextID]);
    *(_DWORD *)__int128 buf = 138412802;
    uint64_t v26 = v18;
    __int16 v27 = 2112;
    int v28 = v20;
    __int16 v29 = 2112;
    id v30 = v3;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Unable to depart for (%@,%@): %@", buf, 0x20u);

LABEL_13:
    goto LABEL_17;
  }

  if (v11)
  {
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v26 = (os_log_s *)v3;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Departing failed due to lock state: %@",  buf,  0xCu);
  }

  [v5 setNextState:@"WaitForUnlock"];
LABEL_18:
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v5 finishedOp]);
  [v5 runBeforeGroupFinished:v23];
}

uint64_t sub_1000FE494(uint64_t a1, uint64_t a2, uint64_t a3, __CFString **a4)
{
  uint64_t v4 = 0LL;
  uint64_t v51 = 0LL;
  uint64_t v52 = &v51;
  uint64_t v53 = 0x2000000000LL;
  uint64_t v54 = 0LL;
  uint64_t v47 = 0LL;
  uint64_t v48 = &v47;
  uint64_t v49 = 0x2000000000LL;
  uint64_t v50 = 0LL;
  uint64_t v43 = 0LL;
  uint64_t v44 = &v43;
  uint64_t v45 = 0x2000000000LL;
  uint64_t v46 = 0LL;
  uint64_t v35 = 0LL;
  id v36 = &v35;
  uint64_t v39 = 0LL;
  __int16 v40 = (__CFString **)&v39;
  uint64_t v41 = 0x2000000000LL;
  __int16 v42 = 0LL;
  uint64_t v37 = 0x2000000000LL;
  char v38 = 0;
  if (a1 && a2)
  {
    BOOL v9 = sub_1000E89F8(a2, 0, &v42);
    uint64_t v10 = (os_log_s *)sub_10001267C("ds");
    BOOL v11 = v10;
    if (v9)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 138477827;
        uint64_t v56 = a2;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "setting UUID persistent ref on peersitem: %{private}@",  buf,  0xCu);
      }

      unsigned int v12 = CFUUIDCreate(kCFAllocatorDefault);
      CFUUIDBytes bytes = CFUUIDGetUUIDBytes(v12);
      CFIndex v13 = CFDataCreate(kCFAllocatorDefault, &bytes.byte0, 16LL);
      if (v12) {
        CFRelease(v12);
      }
      CFTypeRef cf = 0LL;
      sub_1000E96B4(a2, v13, (__CFString **)&cf);
      if (cf)
      {
        unsigned int v14 = (os_log_s *)sub_10001267C("ds");
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138478083;
          uint64_t v56 = a2;
          __int16 v57 = 2112;
          CFTypeRef v58 = cf;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "failed to set persistent ref on item %{private}@, error: %@",  buf,  0x16u);
        }

        CFTypeRef v15 = cf;
        if (cf)
        {
          CFTypeRef cf = 0LL;
          CFRelease(v15);
        }
      }

      if (v13) {
        CFRelease(v13);
      }
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 0x40000000LL;
      v32[2] = sub_1000FE9B0;
      v32[3] = &unk_1002867C0;
      v32[4] = &v35;
      v32[5] = &v47;
      v32[6] = &v39;
      v32[7] = &v51;
      v32[9] = a2;
      void v32[10] = a3;
      v32[8] = &v43;
      if (sub_1000EA178(a2, a1, v40 + 3, (uint64_t)v32) && !*((_BYTE *)v36 + 24))
      {
        id v24 = (os_log_s *)sub_10001267C("ds");
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138477827;
          uint64_t v56 = a2;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Insert succeeded for: %{private}@",  buf,  0xCu);
        }

        v52[3] = 2LL;
        if (v40[3])
        {
          BOOL v25 = (os_log_s *)sub_10001267C("ds");
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v26 = v40[3];
            *(_DWORD *)__int128 buf = 138412290;
            uint64_t v56 = (uint64_t)v26;
            _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "kSOSMergeFailure => kSOSMergePeersObject, %@",  buf,  0xCu);
          }

          __int16 v27 = v40[3];
          if (v27) {
            CFRelease(v27);
          }
        }
      }

      unsigned int v16 = (__CFError *)v40[3];
      if (v16 && (sub_1000EA124(v16) & 1) == 0)
      {
        int v17 = (os_log_s *)sub_10001267C("ds");
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v18 = v52[3];
          int v19 = v40[3];
          *(_DWORD *)__int128 buf = 134218242;
          uint64_t v56 = v18;
          __int16 v57 = 2112;
          CFTypeRef v58 = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "dsMergeObject failed: mr=%ld, %@",  buf,  0x16u);
        }

        if (!v52[3])
        {
          BOOL v20 = v40;
          uint64_t v21 = v40[3];
          if (v21)
          {
            if (a4 && !*a4)
            {
              *a4 = v21;
            }

            else
            {
              CFRelease(v21);
              BOOL v20 = v40;
            }
          }

          v20[3] = 0LL;
        }
      }

      int v28 = (const void *)v48[3];
      if (v28) {
        CFRelease(v28);
      }
      __int16 v29 = (const void *)v44[3];
      if (v29) {
        CFRelease(v29);
      }
      id v30 = v40[3];
      if (v30) {
        CFRelease(v30);
      }
      uint64_t v4 = v52[3];
    }

    else
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        id v22 = v40[3];
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v56 = (uint64_t)v22;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "kSOSMergeFailure => SecDbItemSetKeybag: %@",  buf,  0xCu);
      }

      uint64_t v23 = v40[3];
      if (v23)
      {
        if (a4 && !*a4)
        {
          uint64_t v4 = 0LL;
          *a4 = v23;
          goto LABEL_50;
        }

        CFRelease(v23);
      }

      uint64_t v4 = 0LL;
    }
  }

void sub_1000FE9B0(uint64_t a1, __CFString ***a2, void *a3)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  id v6 = *(__CFString ****)(a1 + 72);
  CFTypeID v7 = (__CFString **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  *(void *)CFTypeRef cf = 0LL;
  unsigned int v8 = sub_10010520C(v6[2], kSecAttrModificationDate, v7);
  BOOL v9 = (const __CFDate *)sub_1000E705C(v6, (uint64_t)v8, (__CFString **)cf);
  uint64_t v10 = (const __CFDate *)sub_1000E705C(a2, (uint64_t)v8, (__CFString **)cf);
  BOOL v11 = v10;
  if (v9) {
    BOOL v12 = v10 == 0LL;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12) {
    goto LABEL_6;
  }
  CFComparisonResult v15 = CFDateCompare(v9, v10, 0LL);
  unsigned int v14 = a2;
  if (v15 == kCFCompareLessThan) {
    goto LABEL_40;
  }
  if (v15)
  {
    unsigned int v14 = 0LL;
    if (v15 == kCFCompareGreaterThan) {
      unsigned int v14 = v6;
    }
    goto LABEL_40;
  }

  uint64_t v16 = sub_1000E6D50(v6[2], 7LL, (__CFString **)cf);
  BOOL v9 = (const __CFDate *)sub_1000E705C(v6, v16, (__CFString **)cf);
  uint64_t v17 = sub_1000E6D50(a2[2], 7LL, (__CFString **)cf);
  uint64_t v18 = (const __CFData *)sub_1000E705C(a2, v17, (__CFString **)cf);
  BOOL v11 = v18;
  if (!v9 || v18 == 0LL)
  {
LABEL_6:
    if (SecErrorGetOSStatus(*(void *)cf) == -26275)
    {
      if (v9) {
        CFIndex v13 = v6;
      }
      else {
        CFIndex v13 = 0LL;
      }
      if (v11) {
        unsigned int v14 = a2;
      }
      else {
        unsigned int v14 = v13;
      }
    }

    else
    {
      unsigned int v14 = 0LL;
    }

    goto LABEL_40;
  }

  CFIndex Length = CFDataGetLength(v9);
  CFIndex v21 = CFDataGetLength(v11);
  unint64_t v22 = v21;
  if (Length < 0 || v21 < 0)
  {
    unsigned int v14 = a2;
    if (Length > v21) {
      goto LABEL_40;
    }
    BOOL v28 = Length < v21;
  }

  else
  {
    if (Length >= v21) {
      size_t v23 = v21;
    }
    else {
      size_t v23 = Length;
    }
    BytePtr = CFDataGetBytePtr(v9);
    BOOL v25 = CFDataGetBytePtr(v11);
    int v26 = memcmp(BytePtr, v25, v23);
    unsigned int v14 = a2;
    if (v26 > 0) {
      goto LABEL_40;
    }
    BOOL v27 = !v26 && Length > v22;
    unsigned int v14 = a2;
    if (v27) {
      goto LABEL_40;
    }
    BOOL v28 = v26 == 0;
    if (Length >= v22) {
      BOOL v28 = 0;
    }
    if (v26 < 0) {
      BOOL v28 = 1;
    }
  }

  unsigned int v14 = v6;
  if (!v28) {
    unsigned int v14 = a2;
  }
LABEL_40:
  if (!*(void *)cf)
  {
LABEL_44:
    if (v14 && a2 && v14 != a2)
    {
      __int16 v29 = v14[2];
      id v30 = (uint64_t *)v29[2];
      if (!v30) {
        goto LABEL_62;
      }
      __int16 v31 = (uint64_t **)(v29 + 3);
      do
      {
        if (*v30)
        {
          if (CFEqual((CFTypeRef)*v30, @"UUID")) {
            sub_1000E8B80((uint64_t)v14, a2, v30);
          }
          if (*v30 && CFEqual((CFTypeRef)*v30, @"persistref")) {
            sub_1000E8B80((uint64_t)v14, a2, v30);
          }
        }

        id v32 = *v31++;
        id v30 = v32;
      }

      while (v32);
      __int16 v33 = v14[2];
      CFTypeID v34 = v33[2];
      if (!v34)
      {
LABEL_62:
        CFRetain(v14);
        goto LABEL_63;
      }

      uint64_t v35 = v33 + 3;
      do
      {
        if ((BYTE2(v34->data) & 2) != 0) {
          sub_1000E8B80((uint64_t)v14, a2, (uint64_t *)v34);
        }
        id v36 = *v35++;
        CFTypeID v34 = v36;
      }

      while (v36);
    }

    if (!v14) {
      goto LABEL_63;
    }
    goto LABEL_62;
  }

  if (v14 || *v7)
  {
    CFRelease(*(CFTypeRef *)cf);
    goto LABEL_44;
  }

  void *v7 = *(__CFString **)cf;
LABEL_63:
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v14;
  uint64_t v37 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  if (v37)
  {
    if (*(void *)(a1 + 80))
    {
      **(void **)(a1 + 8syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = CFRetain(v37);
      uint64_t v37 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    }

    if (CFEqual(v37, a2))
    {
      if ((sub_1000E9480(a2) & 1) == 0)
      {
        char v38 = (os_log_s *)sub_10001267C("ds");
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CFTypeRef cf = 138477827;
          *(void *)&cf[4] = a2;
          _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Conflict resolver chose my (local) item: %{private}@",  cf,  0xCu);
        }
      }

      uint64_t v39 = 1LL;
    }

    else
    {
      uint64_t v40 = *(void *)(*(void *)(a1 + 64) + 8LL);
      uint64_t v41 = *(__CFString ****)(v40 + 24);
      if (v41 != a2)
      {
        if (!a2 || (CFRetain(a2), (uint64_t v41 = *(__CFString ****)(v40 + 24)) != 0LL)) {
          CFRelease(v41);
        }
        *(void *)(v40 + 24) = a2;
      }

      uint64_t v42 = *(void *)(*(void *)(a1 + 40) + 8LL);
      uint64_t v43 = *(void *)(v42 + 24);
      if (v43) {
        CFRetain(*(CFTypeRef *)(v42 + 24));
      }
      *a3 = v43;
      if (CFEqual(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL), *(CFTypeRef *)(a1 + 72)))
      {
        if ((sub_1000E9480(*(__CFString ****)(a1 + 72)) & 1) == 0)
        {
          uint64_t v44 = (os_log_s *)sub_10001267C("ds");
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v45 = *(void *)(a1 + 72);
            *(_DWORD *)CFTypeRef cf = 138477827;
            *(void *)&cf[4] = v45;
            _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "Conflict resolver chose peers item: %{private}@",  cf,  0xCu);
          }
        }

        uint64_t v39 = 2LL;
      }

      else
      {
        if ((sub_1000E9480(*(__CFString ****)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) & 1) == 0)
        {
          uint64_t v46 = (os_log_s *)sub_10001267C("ds");
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v47 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
            *(_DWORD *)CFTypeRef cf = 138477827;
            *(void *)&cf[4] = v47;
            _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "Conflict resolver created a new item; return it to our caller: %{private}@",
              cf,
              0xCu);
          }
        }

        uint64_t v39 = 3LL;
      }
    }
  }

  else
  {
    uint64_t v39 = 0LL;
  }

  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = v39;
}

uint64_t sub_1000FEED0(uint64_t a1)
{
  return *(void *)(a1 + 160);
}

void sub_1000FEED8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 152);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000LL;
  v3[2] = sub_100101A74;
  v3[3] = &unk_100286878;
  v3[4] = a2;
  void v3[5] = a1;
  sub_100014EB8(v2, v3);
}

CFTypeRef sub_1000FEF30(uint64_t a1, const __CFSet *a2, CFTypeRef *a3)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, 0LL);
  uint64_t v18 = 0LL;
  int v19 = &v18;
  uint64_t v20 = 0x2000000000LL;
  char v21 = 1;
  context[0] = _NSConcreteStackBlock;
  context[1] = 0x40000000LL;
  context[2] = sub_100100DE8;
  context[3] = &unk_1002868A0;
  void context[4] = &v18;
  void context[5] = a1;
  void context[6] = Mutable;
  void context[7] = a3;
  CFSetApplyFunction(a2, (CFSetApplierFunction)sub_100101318, context);
  if (*((_BYTE *)v19 + 24))
  {
    CFTypeRef cf = 0LL;
    p_CFTypeRef cf = &cf;
    uint64_t v28 = 0x2000000000LL;
    uint64_t v29 = 0LL;
    uint64_t v22 = 0LL;
    size_t v23 = &v22;
    uint64_t v24 = 0x2000000000LL;
    uint64_t v25 = 0LL;
    uint64_t v7 = *(void *)(a1 + 152);
    *(void *)&__int128 buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 0x40000000LL;
    __int16 v31 = sub_10010132C;
    id v32 = &unk_100286990;
    CFTypeID v34 = &cf;
    uint64_t v35 = Mutable;
    __int16 v33 = &v22;
    if ((sub_100110ECC(0LL, 1LL, v7, a3, &buf) & 1) == 0)
    {
      CFTypeRef v8 = p_cf[3];
      if (v8) {
        CFRelease(v8);
      }
    }

    BOOL v9 = (const void *)v23[3];
    if (v9)
    {
      if (a3 && !*a3) {
        *a3 = v9;
      }
      else {
        CFRelease(v9);
      }
    }

    CFTypeRef v10 = p_cf[3];
    _Block_object_dispose(&v22, 8);
    _Block_object_dispose(&cf, 8);
  }

  else
  {
    CFTypeRef v10 = 0LL;
  }

  CFIndex Count = CFArrayGetCount(Mutable);
  if (Count >= 1)
  {
    CFIndex v12 = Count;
    CFIndex v13 = 0LL;
    while (1)
    {
      CFNullRef ValueAtIndex = (const void **)CFArrayGetValueAtIndex(Mutable, v13);
      CFTypeRef cf = 0LL;
      if ((sub_1000F8150(ValueAtIndex, (CFErrorRef *)&cf) & 1) != 0) {
        goto LABEL_22;
      }
      CFComparisonResult v15 = (os_log_s *)sub_10001267C("SecError");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = cf;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "query_destroy failed: %@",  (uint8_t *)&buf,  0xCu);
      }

      if (!cf) {
        goto LABEL_21;
      }
      if (!a3 || *a3) {
        break;
      }
      *a3 = cf;
      if (v10)
      {
LABEL_25:
        CFRelease(v10);
        CFTypeRef v10 = 0LL;
      }

uint64_t sub_1000FF1F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __CFString **a5)
{
  CFStringRef v10 = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"SOSDataSource-%@", *(void *)(a1 + 160));
  uint64_t v18 = sub_1000CFD80( kCFAllocatorDefault,  v11,  v12,  v13,  v14,  v15,  v16,  v17,  (void *)kSecAttrAccessGroup,  kSOSInternalAccessGroup);
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v28 = 0LL;
  uint64_t v29 = &v28;
  uint64_t v30 = 0x2000000000LL;
  uint64_t v31 = 0LL;
  uint64_t v19 = sub_10010C560((uint64_t)@"genp", &qword_1002DEB28, (uint64_t)&unk_1002DEB20);
  uint64_t v20 = (const void **)sub_1000F82CC(v19, 0LL, v18, 0LL, a5);
  if (v20)
  {
    char v21 = v20;
    uint64_t v22 = v20[1];
    if (v22) {
      CFRelease(v22);
    }
    v21[1] = v18;
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 0x40000000LL;
    void v27[2] = sub_100100C40;
    v27[3] = &unk_100286A90;
    v27[6] = a5;
    v27[7] = v18;
    v27[8] = a2;
    v27[9] = a3;
    v27[4] = &v28;
    void v27[5] = v21;
    if (a4) {
      sub_100100C40((uint64_t)v27, a4);
    }
    else {
      sub_100110ECC(0LL, 1LL, *(void *)(a1 + 152), a5, v27);
    }
    sub_1000F8150(v21, (CFErrorRef *)a5);
  }

  else if (v18)
  {
    CFRelease(v18);
  }

  if (!v29[3])
  {
    size_t v23 = (os_log_s *)sub_10001267C("ds");
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      if (a5) {
        uint64_t v24 = *a5;
      }
      else {
        uint64_t v24 = 0LL;
      }
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v33 = a2;
      __int16 v34 = 2112;
      uint64_t v35 = a3;
      __int16 v36 = 2112;
      uint64_t v37 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "failed to load %@@%@ state: %@", buf, 0x20u);
    }
  }

  uint64_t v25 = v29[3];
  _Block_object_dispose(&v28, 8);
  return v25;
}

uint64_t sub_1000FF498(uint64_t a1, CFDictionaryRef theDict, __CFString **a3)
{
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, theDict);
  uint64_t v17 = 0LL;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2000000000LL;
  uint64_t v20 = 0LL;
  uint64_t v7 = sub_10010C560((uint64_t)@"genp", &qword_1002DEB28, (uint64_t)&unk_1002DEB20);
  CFTypeRef v8 = (const void **)sub_1000F82CC(v7, 0LL, MutableCopy, 0LL, a3);
  if (v8)
  {
    BOOL v9 = v8;
    CFStringRef v10 = v8[1];
    if (v10) {
      CFRelease(v10);
    }
    v9[1] = MutableCopy;
    uint64_t v11 = *(void *)(a1 + 152);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 0x40000000LL;
    void v16[2] = sub_100100AA8;
    v16[3] = &unk_100286B00;
    v16[6] = a3;
    v16[7] = MutableCopy;
    v16[8] = theDict;
    v16[4] = &v17;
    void v16[5] = v9;
    sub_100110ECC(0LL, 1LL, v11, a3, v16);
    sub_1000F8150(v9, (CFErrorRef *)a3);
  }

  else if (MutableCopy)
  {
    CFRelease(MutableCopy);
  }

  if (!v18[3])
  {
    int v12 = (os_log_s *)sub_10001267C("ds");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (a3) {
        int v13 = *a3;
      }
      else {
        int v13 = 0LL;
      }
      *(_DWORD *)__int128 buf = 138412546;
      CFDictionaryRef v22 = theDict;
      __int16 v23 = 2112;
      uint64_t v24 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "failed to load item %@: %@", buf, 0x16u);
    }
  }

  uint64_t v14 = v18[3];
  _Block_object_dispose(&v17, 8);
  return v14;
}

uint64_t sub_1000FF67C(uint64_t a1, uint64_t a2, uint64_t a3, __CFString **a4, uint64_t a5)
{
  uint64_t v19 = 0LL;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2000000000LL;
  char v22 = 1;
  CFStringRef v10 = (void *)sub_10010C560((uint64_t)@"genp", &qword_1002DEB28, (uint64_t)&unk_1002DEB20);
  uint64_t v11 = sub_1000E6D50(v10, 7LL, a4);
  if (v11)
  {
    memset(v25, 0, sizeof(v25));
    memset(v24, 0, sizeof(v24));
    memset(v23, 0, sizeof(v23));
    v18[0] = 0LL;
    v18[1] = v18;
    v18[2] = 0x2000000000LL;
    v18[3] = v25;
    v17[0] = 0LL;
    v17[1] = v17;
    v17[2] = 0x2000000000LL;
    v17[3] = v24;
    v16[0] = 0LL;
    v16[1] = v16;
    void v16[2] = 0x2000000000LL;
    v16[3] = v23;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 0x40000000LL;
    _DWORD v15[2] = sub_10010050C;
    v15[3] = &unk_100286BF8;
    v15[8] = v18;
    v15[9] = v17;
    void v15[4] = &stru_100286B40;
    v15[5] = &stru_100286B80;
    v15[10] = v16;
    v15[11] = a4;
    v15[12] = a3;
    v15[13] = v11;
    void v15[6] = a5;
    v15[7] = &v19;
    if (a2)
    {
      sub_10010050C((uint64_t)v15, a2);
      uint64_t v12 = *((_BYTE *)v20 + 24) != 0;
    }

    else
    {
      unsigned int v13 = sub_100110ECC(0LL, 1LL, *(void *)(a1 + 152), a4, v15);
      if (*((_BYTE *)v20 + 24)) {
        uint64_t v12 = v13;
      }
      else {
        uint64_t v12 = 0LL;
      }
      *((_BYTE *)v20 + 24) = v12;
    }

    _Block_object_dispose(v16, 8);
    _Block_object_dispose(v17, 8);
    _Block_object_dispose(v18, 8);
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  _Block_object_dispose(&v19, 8);
  return v12;
}

uint64_t sub_1000FF86C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 152);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000LL;
  _DWORD v7[2] = sub_1001003D8;
  v7[3] = &unk_100286C70;
  void v7[5] = a3;
  void v7[6] = a2;
  char v8 = a4;
  void v7[4] = a5;
  return sub_100110ECC(1LL, 1LL, v5, a2, v7);
}

uint64_t sub_1000FF8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 152);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  void v6[2] = sub_100100344;
  v6[3] = &unk_100286CC0;
  void v6[4] = a4;
  return sub_100110ECC(0LL, 1LL, v4, a2, v6);
}

uint64_t sub_1000FF940()
{
  return 1LL;
}

BOOL sub_1000FF948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __CFString **a6)
{
  CFStringRef v10 = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"SOSDataSource-%@", *(void *)(a1 + 160));
  uint64_t v18 = sub_1000CFD80( kCFAllocatorDefault,  v11,  v12,  v13,  v14,  v15,  v16,  v17,  (void *)kSecAttrAccessGroup,  kSOSInternalAccessGroup);
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v19 = sub_10010C560((uint64_t)@"genp", &qword_1002DEB28, (uint64_t)&unk_1002DEB20);
  uint64_t v20 = sub_1000E8E18(v19, v18, 0, a6);
  uint64_t v21 = sub_1000FE494(a2, (uint64_t)v20, 0LL, a6);
  if (!v21)
  {
    char v22 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      if (a6) {
        __int16 v23 = *a6;
      }
      else {
        __int16 v23 = 0LL;
      }
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v26 = a3;
      __int16 v27 = 2112;
      uint64_t v28 = a4;
      __int16 v29 = 2112;
      uint64_t v30 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "failed to save %@@%@ state: %@", buf, 0x20u);
    }
  }

  if (v20) {
    CFRelease(v20);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v21 != 0;
}

BOOL sub_1000FFB60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __CFString **a5)
{
  CFStringRef v7 = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"SOSDataSource-%@", *(void *)(a1 + 160));
  int v15 = sub_1000CFD80( kCFAllocatorDefault,  v8,  v9,  v10,  v11,  v12,  v13,  v14,  (void *)kSecAttrAccessGroup,  kSOSInternalAccessGroup);
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v16 = sub_10010C560((uint64_t)@"genp", &qword_1002DEB28, (uint64_t)&unk_1002DEB20);
  int v17 = (CFStringRef **)sub_1000E8E18(v16, v15, 0, a5);
  BOOL v18 = sub_1000EC0F4(v17, a4, (CFTypeRef *)a5, (uint64_t)&stru_100285FF0);
  if (v15) {
    CFRelease(v15);
  }
  if (v17) {
    CFRelease(v17);
  }
  return v18;
}

BOOL sub_1000FFCB4(uint64_t a1, int a2, CFDictionaryRef theDict, __CFString **a4)
{
  SInt32 Value = CFDictionaryGetValue(theDict, @"class");
  int v9 = (const __CFData *)CFDictionaryGetValue(theDict, @"data");
  if (Value) {
    BOOL v10 = v9 == 0LL;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return sub_1000194E0(-26275, a4, @"no class or data in object");
  }
  int v12 = v9;
  int v13 = sub_1000F77E0(Value);
  if (!v13) {
    return sub_1000194E0(-26275, a4, @"no such class %@; update kc_class_with_name ", Value);
  }
  int v14 = sub_1000E92D4(kCFAllocatorDefault, v13, v12, a2, 0LL, a4);
  if (!v14) {
    return 0LL;
  }
  int v15 = v14;
  BOOL v16 = sub_1000FE494(a1, (uint64_t)v14, 0LL, a4) != 0;
  CFRelease(v15);
  return v16;
}

const void *sub_1000FFDD4(void **a1, __CFString **a2)
{
  uint64_t v4 = sub_1000E6D50(a1[2], 7LL, a2);
  uint64_t v5 = sub_1000E705C(a1, v4, a2);
  id v6 = v5;
  if (v5) {
    CFRetain(v5);
  }
  return v6;
}

const void *sub_1000FFE28(void **a1)
{
  uint64_t v2 = sub_1000E6D50(a1[2], 6LL, 0LL);
  if (!v2) {
    return 0LL;
  }
  id v3 = sub_1000E705C(a1, v2, 0LL);
  uint64_t v4 = v3;
  if (v3) {
    CFRetain(v3);
  }
  return v4;
}

const void *sub_1000FFE84(const __CFDictionary *a1, __CFString **a2)
{
  SInt32 Value = CFDictionaryGetValue(a1, kSecClass);
  if (Value)
  {
    uint64_t v5 = Value;
    id v6 = sub_1000F77E0(Value);
    if (v6) {
      return sub_1000E8E18((uint64_t)v6, a1, 0, a2);
    }
    sub_1000194E0(-25306, a2, @"can find class named: %@", v5);
  }

  else
  {
    sub_1000194E0(-50, a2, @"query missing %@ attribute", kSecClass);
  }

  return 0LL;
}

__CFDictionary *sub_1000FFF28(uint64_t a1, __CFString **a2)
{
  uint64_t v4 = sub_1000E6EA4((void *)a1, 32LL, 0x20000LL, a2);
  uint64_t v5 = sub_1000E6EA4((void *)a1, 128LL, 0x20000LL, a2);
  id v6 = sub_1000E6EA4((void *)a1, 0x2000LL, 0x20000LL, a2);
  CFStringRef v7 = v6;
  if (v5)
  {
    if (v6)
    {
      context[0] = _NSConcreteStackBlock;
      context[1] = 0x40000000LL;
      context[2] = sub_10010031C;
      context[3] = &unk_100286CE0;
      void context[4] = v5;
      CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)sub_100100324, context);
    }

    if (v4)
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 0x40000000LL;
      _OWORD v9[2] = sub_10010033C;
      v9[3] = &unk_100286D00;
      void v9[4] = v5;
      CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)sub_100100324, v9);
    }

    CFDictionaryAddValue(v5, kSecClass, **(const void ***)(a1 + 16));
  }

  if (v4) {
    CFRelease(v4);
  }
  if (v7) {
    CFRelease(v7);
  }
  return v5;
}

CFDictionaryRef sub_100100064(uint64_t a1, const __CFData *a2, __CFString **a3)
{
  uint64_t v6 = sub_1000E6D50(*(void **)(a1 + 16), 7LL, a3);
  values[0] = (void *)sub_1000E705C((const void *)a1, v6, a3);
  if (!values[0]) {
    return 0LL;
  }
  uint64_t v20 = 0LL;
  CFStringRef v7 = sub_1000E6EA4((void *)a1, 128LL, 0LL, a3);
  int v8 = sub_1000E6EA4((void *)a1, 0x2000LL, 0LL, a3);
  int v9 = v8;
  if (v7 && v8)
  {
    BOOL v10 = sub_1000F3C78((void **)a1, a3);
    if (v10)
    {
      int v11 = v10;
      if (sub_1000F141C(a2, (uint64_t)v10, *(const __CFData **)(a1 + 56), v7, v9, &v20, 0, 0, (CFTypeRef *)a3))
      {
        *(_DWORD *)(a1 + 4syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 4;
      }

      else
      {
        int v15 = (os_log_s *)sub_10001267C("SecCritical");
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          if (a3) {
            BOOL v16 = *a3;
          }
          else {
            BOOL v16 = &stru_100294B48;
          }
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v24 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "ks_encrypt_data (db): failed: %@",  buf,  0xCu);
        }
      }

      CFRelease(v11);
    }

    goto LABEL_23;
  }

  if (dword_1002DD0E8 != -1
    || (int v12 = (os_log_s *)sub_10001267C("SecEmergency"), !os_log_type_enabled(v12, OS_LOG_TYPE_FAULT)))
  {
    if (v7) {
      goto LABEL_23;
    }
LABEL_11:
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  int v17 = @"missing";
  if (v7) {
    BOOL v18 = @"present";
  }
  else {
    BOOL v18 = @"missing";
  }
  if (v9) {
    int v17 = @"present";
  }
  if (a3) {
    uint64_t v19 = *a3;
  }
  else {
    uint64_t v19 = @"no error pointer";
  }
  *(_DWORD *)__int128 buf = 138412802;
  uint64_t v24 = v18;
  __int16 v25 = 2112;
  uint64_t v26 = v17;
  __int16 v27 = 2112;
  uint64_t v28 = v19;
  _os_log_fault_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "SecDbItemCopyEncryptedDataToBackup: not all plists are present: attributes: %@, auth_attributes: %@ : %@",  buf,  0x20u);
  if (!v7) {
    goto LABEL_11;
  }
LABEL_23:
  CFRelease(v7);
  if (v9) {
LABEL_12:
  }
    CFRelease(v9);
LABEL_13:
  CFTypeRef cf = v20;
  if (!v20) {
    return 0LL;
  }
  values[1] = **(void ***)(a1 + 16);
  CFDictionaryRef v13 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)&off_1002DDC30,  (const void **)values,  3LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFRelease(cf);
  return v13;
}

void sub_10010031C(uint64_t a1, const void *a2, const void *a3)
{
}

uint64_t sub_100100324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

void sub_10010033C(uint64_t a1, const void *a2, const void *a3)
{
}

uint64_t sub_100100344(uint64_t a1, uint64_t a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000LL;
  void v4[2] = sub_1001003C8;
  v4[3] = &unk_100286C98;
  void v4[4] = *(void *)(a1 + 32);
  v4[5] = a2;
  uint64_t v2 = *(dispatch_queue_s **)(*(void *)(a2 + 16) + 32LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_100018170;
  block[3] = &unk_1002833F0;
  void block[4] = v4;
  dispatch_sync(v2, block);
  return 1LL;
}

uint64_t sub_1001003C8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(a1 + 40));
}

BOOL sub_1001003D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 40) == 1LL) {
    uint64_t v4 = 2LL;
  }
  else {
    uint64_t v4 = 4LL;
  }
  v7[0] = _NSConcreteStackBlock;
  _DWORD v7[2] = sub_100100450;
  v7[3] = &unk_100286C48;
  uint64_t v5 = *(CFTypeRef **)(a1 + 48);
  v7[1] = 0x40000000LL;
  char v8 = *(_BYTE *)(a1 + 56);
  void v7[4] = v3;
  void v7[5] = a2;
  return sub_1000163F4(a2, v4, v5, (uint64_t)v7);
}

void sub_100100450(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 48))
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 0x40000000LL;
    void v4[2] = sub_1001004F8;
    v4[3] = &unk_100286C20;
    uint64_t v2 = *(void *)(a1 + 40);
    void v4[4] = *(void *)(a1 + 32);
    v4[5] = v2;
    void v4[6] = a2;
    uint64_t v3 = *(dispatch_queue_s **)(*(void *)(v2 + 16) + 32LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = sub_100018170;
    block[3] = &unk_1002833F0;
    void block[4] = v4;
    dispatch_sync(v3, block);
  }

  else
  {
    (*(void (**)(void, void, uint64_t))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2);
  }

uint64_t sub_1001004F8(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[4] + 16LL))(a1[4], a1[5], a1[6]);
}

uint64_t sub_10010050C(uint64_t a1, uint64_t a2)
{
  for (unint64_t i = 0LL; i != 32; i += 8LL)
  {
    char v5 = *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
    if (v5)
    {
      if (qword_1002DEAC8 != -1) {
        dispatch_once(&qword_1002DEAC8, &stru_100286920);
      }
      uint64_t v6 = sub_1000F82CC(qword_1002DEAD0[i / 8], 0LL, 0LL, 0LL, *(__CFString ***)(a1 + 88));
      *(void *)(*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) + i) = v6;
      if (v6
        && (CFStringRef v7 = sub_1000EA7D0( *(CFDictionaryRef **)(*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) + i),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  0LL),  (*(void *)(*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) + i) = v7) != 0LL))
      {
        char v8 = sub_100015014( a2,  *(const __CFString **)(*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) + i),  0LL,  *(CFTypeRef **)(a1 + 88));
        *(void *)(*(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) + i) = v8;
        char v5 = v8 != 0LL;
      }

      else
      {
        char v5 = 0;
      }
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = v5;
  }

  uint64_t v9 = *(void *)(a1 + 56);
  if (*(_BYTE *)(*(void *)(v9 + 8) + 24LL))
  {
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 0x40000000LL;
    _OWORD v24[2] = sub_10010075C;
    v24[3] = &unk_100286BD0;
    uint64_t v10 = *(void *)(a1 + 80);
    uint64_t v11 = *(void *)(a1 + 88);
    uint64_t v28 = *(void *)(a1 + 64);
    uint64_t v29 = v10;
    uint64_t v12 = *(void *)(a1 + 96);
    uint64_t v30 = *(void *)(a1 + 104);
    uint64_t v31 = v11;
    uint64_t v32 = a2;
    int8x16_t v25 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
    uint64_t v26 = *(void *)(a1 + 48);
    uint64_t v27 = v9;
    sub_1001AACD0(v12, (uint64_t)v24);
  }

  for (uint64_t j = 0LL; j != 32; j += 8LL)
  {
    int v14 = *(sqlite3_stmt **)(*(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) + j);
    if (v14) {
      BOOL v15 = sub_100015290(v14, *(CFTypeRef **)(a1 + 88));
    }
    else {
      BOOL v15 = 1;
    }
    uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8LL);
    if (*(_BYTE *)(v16 + 24)) {
      BOOL v17 = v15;
    }
    else {
      BOOL v17 = 0;
    }
    *(_BYTE *)(v16 + 24) = v17;
    BOOL v18 = *(const void **)(*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) + j);
    if (v18) {
      CFRelease(v18);
    }
    uint64_t v19 = *(const void ***)(*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) + j);
    if (v19)
    {
      char v20 = sub_1000F8150(v19, *(CFErrorRef **)(a1 + 88));
      uint64_t v21 = *(void *)(*(void *)(a1 + 56) + 8LL);
      if (*(_BYTE *)(v21 + 24)) {
        char v22 = v20;
      }
      else {
        char v22 = 0;
      }
      *(_BYTE *)(v21 + 24) = v22;
    }
  }

  return 1LL;
}

void sub_10010075C(uint64_t a1, void *value)
{
  uint64_t v22 = 0LL;
  __int16 v23 = &v22;
  uint64_t v24 = 0x2000000000LL;
  uint64_t v25 = 0LL;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
  {
    unint64_t v4 = 0LL;
    do
    {
      if (v23[3]) {
        BOOL v5 = 1;
      }
      else {
        BOOL v5 = v4 >= 4;
      }
      if (v5) {
        break;
      }
      CFDictionarySetValue( *(CFMutableDictionaryRef *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) + 8 * v4)
                                  + 8LL),
        **(const void ***)(a1 + 80),
        value);
      *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = sub_1000EAB08( *(CFDictionaryRef **)(*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL)
                                                                                         + 8 * v4),
                                                                     *(sqlite3_stmt **)(*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL)
                                                                                                  + 24LL)
                                                                                      + 8 * v4),
                                                                     *(__CFString ***)(a1 + 88),
                                                                     *(void *)(a1 + 32),
                                                                     0LL);
      if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL)) {
        break;
      }
      uint64_t v7 = *(void *)(a1 + 64);
      uint64_t v6 = *(void *)(a1 + 72);
      char v8 = *(sqlite3_stmt **)(*(void *)(*(void *)(v6 + 8) + 24LL) + 8 * v4);
      uint64_t v10 = *(CFTypeRef **)(a1 + 88);
      uint64_t v9 = *(void *)(a1 + 96);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 0x40000000LL;
      void v21[2] = sub_100100980;
      v21[3] = &unk_100286BA8;
      v21[6] = v7;
      v21[7] = v6;
      v21[8] = v4;
      v21[9] = v10;
      void v21[4] = *(void *)(a1 + 40);
      v21[5] = &v22;
      char v11 = sub_100015CD8(v9, v8, v10, (uint64_t)v21);
      uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8LL);
      char v13 = *(_BYTE *)(v12 + 24) ? v11 : 0;
      *(_BYTE *)(v12 + 24) = v13;
      if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL)) {
        break;
      }
      int v14 = *(sqlite3_stmt **)(*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) + 8 * v4);
      BOOL v15 = *(CFTypeRef **)(a1 + 88);
      uint64_t v16 = sqlite3_reset(v14);
      BOOL v17 = sub_100014AC0(v16, v14, v15, @"reset");
      uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8LL);
      BOOL v19 = *(_BYTE *)(v18 + 24) && v17;
      *(_BYTE *)(v18 + 24) = v19;
      ++v4;
    }

    while (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL));
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  char v20 = (const void *)v23[3];
  if (v20) {
    CFRelease(v20);
  }
  _Block_object_dispose(&v22, 8);
}

uint64_t sub_100100980(uint64_t *a1)
{
  uint64_t result = sub_1000E90CC( kCFAllocatorDefault,  **(void ***)(*(void *)(*(void *)(a1[6] + 8) + 24LL) + 8 * a1[8]),  *(sqlite3_stmt **)(*(void *)(*(void *)(a1[7] + 8) + 24LL) + 8 * a1[8]),  0,  a1[4]);
  *(void *)(*(void *)(a1[5] + 8) + 24LL) = result;
  return result;
}

void sub_1001009E4(id a1)
{
  qword_1002DEAD0[0] = sub_10010C560((uint64_t)@"genp", &qword_1002DEB28, (uint64_t)&unk_1002DEB20);
  qword_1002DEAD8 = sub_10010C560((uint64_t)@"inet", &qword_1002DEB38, (uint64_t)&unk_1002DEB30);
  qword_1002DEAE0 = sub_10010C560((uint64_t)@"keys", &qword_1002DEB58, (uint64_t)&unk_1002DEB50);
  qword_1002DEAE8 = sub_10010C560((uint64_t)@"cert", &qword_1002DEB48, (uint64_t)&unk_1002DEB40);
}

BOOL sub_100100A84(id a1, const SecDbAttr *a2)
{
  return a2->var1 == 7;
}

BOOL sub_100100A94(id a1, const SecDbAttr *a2)
{
  return (a2->var1 & 0xFFFFFFFE) == 8;
}

BOOL sub_100100AA8(void *a1, uint64_t a2)
{
  v7.isa = _NSConcreteStackBlock;
  *(void *)&v7.flags = 0x40000000LL;
  v7.invoke = (void (*)(void *, ...))sub_100100B3C;
  v7.descriptor = (Block_descriptor_1 *)&unk_100286AB0;
  uint64_t v2 = (CFTypeRef *)a1[6];
  uint64_t v8 = a1[7];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  void v6[2] = sub_100100B60;
  v6[3] = &unk_100286AD8;
  uint64_t v3 = a1[8];
  unint64_t v4 = (CFDictionaryRef *)a1[5];
  void v6[4] = a1[4];
  void v6[5] = v3;
  void v6[6] = v2;
  return sub_1000EA68C(v4, a2, v2, 0LL, &v7, 0LL, 0LL, (uint64_t)v6);
}

BOOL sub_100100B3C(uint64_t a1, const void **a2)
{
  return CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 32), *a2) != 0;
}

const void *sub_100100B60(uint64_t a1, const void *a2)
{
  unint64_t v4 = (os_log_s *)sub_10001267C("ds");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v8 = 138412290;
    uint64_t v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "found item for keys %@", (uint8_t *)&v8, 0xCu);
  }

  uint64_t result = sub_1000E705C(a2, (uint64_t)&off_100287568, *(__CFString ***)(a1 + 48));
  Block_layout v7 = result;
  if (result) {
    uint64_t result = CFRetain(result);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v7;
  return result;
}

BOOL sub_100100C40(uint64_t a1, uint64_t a2)
{
  v8.isa = _NSConcreteStackBlock;
  *(void *)&v8.flags = 0x40000000LL;
  v8.invoke = (void (*)(void *, ...))sub_100100CD8;
  v8.descriptor = (Block_descriptor_1 *)&unk_100286A40;
  uint64_t v2 = *(CFTypeRef **)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  v5[2] = sub_100100CFC;
  v5[3] = &unk_100286A68;
  __int128 v6 = *(_OWORD *)(a1 + 64);
  uint64_t v3 = *(CFDictionaryRef **)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  Block_layout v7 = v2;
  return sub_1000EA68C(v3, a2, v2, 0LL, &v8, 0LL, 0LL, (uint64_t)v5);
}

BOOL sub_100100CD8(uint64_t a1, const void **a2)
{
  return CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 32), *a2) != 0;
}

const void *sub_100100CFC(uint64_t a1, const void *a2)
{
  unint64_t v4 = (os_log_s *)sub_10001267C("ds");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    int v9 = 138412546;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "found item for key %@@%@",  (uint8_t *)&v9,  0x16u);
  }

  uint64_t result = sub_1000E705C(a2, (uint64_t)&off_100287568, *(__CFString ***)(a1 + 56));
  Block_layout v8 = result;
  if (result) {
    uint64_t result = CFRetain(result);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v8;
  return result;
}

void sub_100100DE8(uint64_t a1, CFStringRef theString)
{
  unint64_t v4 = *(__CFArray **)(a1 + 48);
  uint64_t v3 = *(__CFString ***)(a1 + 56);
  int HasSuffix = CFStringHasSuffix(theString, @"-tomb");
  if (HasSuffix)
  {
    v25.CFIndex length = CFStringGetLength(theString) - 5;
    v25.id location = 0LL;
    uint64_t v6 = (void *)CFStringCreateWithSubstring(kCFAllocatorDefault, theString, v25);
  }

  else
  {
    uint64_t v6 = (void *)CFRetain(theString);
  }

  Block_layout v7 = v6;
  if ((SOSViewInSOSSystem() & 1) == 0) {
    goto LABEL_23;
  }
  if (CFEqual(v7, kSOSViewKeychainV0))
  {
    for (uint64_t i = 0LL; i != 3; ++i)
    {
      if (qword_1002DEAA8 != -1) {
        dispatch_once(&qword_1002DEAA8, &stru_1002868E0);
      }
      sub_1001017A8(v4, qword_1002DEAB0[i], HasSuffix != 0, 0, 0LL, v3);
    }

    goto LABEL_23;
  }

  if (CFEqual(v7, kSOSViewWiFi))
  {
    uint64_t v9 = sub_10010C560((uint64_t)@"genp", &qword_1002DEB28, (uint64_t)&unk_1002DEB20);
    uint64_t v10 = sub_1001019A0(v4, v9, HasSuffix != 0, (const __CFBoolean *)@"apple", v3);
    if (v10) {
      sub_1000F7B40(kSecAttrService, (const __CFBoolean *)@"AirPort", (uint64_t)v10);
    }
    goto LABEL_23;
  }

  if (CFEqual(v7, kSOSViewAutofillPasswords))
  {
    BOOL v11 = HasSuffix != 0;
    uint64_t v12 = sub_10010C560((uint64_t)@"inet", &qword_1002DEB38, (uint64_t)&unk_1002DEB30);
    char v13 = @"com.apple.cfnetwork";
LABEL_22:
    sub_1001019A0(v4, v12, v11, (const __CFBoolean *)v13, v3);
    goto LABEL_23;
  }

  if (CFEqual(v7, kSOSViewSafariCreditCards))
  {
    BOOL v11 = HasSuffix != 0;
    uint64_t v12 = sub_10010C560((uint64_t)@"genp", &qword_1002DEB28, (uint64_t)&unk_1002DEB20);
    char v13 = @"com.apple.safari.credit-cards";
    goto LABEL_22;
  }

  if (CFEqual(v7, kSOSViewiCloudIdentity))
  {
    BOOL v11 = HasSuffix != 0;
    uint64_t v12 = sub_10010C560((uint64_t)@"keys", &qword_1002DEB58, (uint64_t)&unk_1002DEB50);
    char v13 = @"com.apple.security.sos";
    goto LABEL_22;
  }

  if (CFEqual(v7, kSOSViewBackupBagV0))
  {
    BOOL v11 = HasSuffix != 0;
    uint64_t v12 = sub_10010C560((uint64_t)@"genp", &qword_1002DEB28, (uint64_t)&unk_1002DEB20);
    char v13 = @"com.apple.sbd";
    goto LABEL_22;
  }

  if (CFEqual(v7, kSOSViewOtherSyncable))
  {
    BOOL v14 = HasSuffix != 0;
    uint64_t v15 = sub_10010C560((uint64_t)@"cert", &qword_1002DEB48, (uint64_t)&unk_1002DEB40);
    sub_1001017A8(v4, v15, v14, 1, 0LL, v3);
    uint64_t v16 = sub_10010C560((uint64_t)@"genp", &qword_1002DEB28, (uint64_t)&unk_1002DEB20);
    BOOL v17 = sub_1001019A0(v4, v16, v14, (const __CFBoolean *)@"apple", v3);
    sub_1000F7E54(kSecAttrService, (const __CFData *)@"AirPort", (uint64_t)v17);
    uint64_t v18 = sub_10010C560((uint64_t)@"genp", &qword_1002DEB28, (uint64_t)&unk_1002DEB20);
    BOOL v19 = sub_1001017A8(v4, v18, v14, 1, 0LL, v3);
    sub_1000F7E54(kSecAttrAccessGroup, (const __CFData *)@"apple", (uint64_t)v19);
    sub_1000F7E54(kSecAttrAccessGroup, (const __CFData *)@"com.apple.safari.credit-cards", (uint64_t)v19);
    sub_1000F7E54(kSecAttrAccessGroup, (const __CFData *)@"com.apple.sbd", (uint64_t)v19);
    uint64_t v20 = sub_10010C560((uint64_t)@"inet", &qword_1002DEB38, (uint64_t)&unk_1002DEB30);
    uint64_t v21 = sub_1001017A8(v4, v20, v14, 1, 0LL, v3);
    sub_1000F7E54(kSecAttrAccessGroup, (const __CFData *)@"com.apple.cfnetwork", (uint64_t)v21);
    uint64_t v22 = sub_10010C560((uint64_t)@"keys", &qword_1002DEB58, (uint64_t)&unk_1002DEB50);
    __int16 v23 = sub_1001017A8(v4, v22, v14, 1, 0LL, v3);
    sub_1000F7E54(kSecAttrAccessGroup, (const __CFData *)@"com.apple.security.sos", (uint64_t)v23);
  }

  else
  {
    for (uint64_t j = 0LL; j != 4; ++j)
    {
      if (qword_1002DEAC8 != -1) {
        dispatch_once(&qword_1002DEAC8, &stru_100286920);
      }
      sub_1001017A8(v4, qword_1002DEAD0[j], HasSuffix != 0, 1, (const __CFData *)v7, v3);
    }
  }

uint64_t sub_100101318(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

BOOL sub_10010132C(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = 0LL;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x3800000000LL;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 48));
  if (Count < 1)
  {
    BOOL v6 = 1;
LABEL_11:
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = sub_1001AB230( (uint64_t)(v22 + 3),  (CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 8LL)
                                                                                + 24LL));
  }

  else
  {
    CFIndex v5 = Count;
    BOOL v6 = 0;
    CFIndex v7 = 0LL;
    while (1)
    {
      CFNullRef ValueAtIndex = (CFDictionaryRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), v7);
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8LL);
      v20[1] = 0x40000000LL;
      v20[2] = sub_1001015D8;
      v20[3] = &unk_100286940;
      v20[4] = ValueAtIndex;
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 0x40000000LL;
      int v19[2] = sub_100101600;
      v19[3] = &unk_100286968;
      void v19[4] = &v21;
      v20[0] = _NSConcreteStackBlock;
      uint64_t v26 = 0LL;
      uint64_t v27 = &v26;
      uint64_t v28 = 0x2000000000LL;
      char v29 = 1;
      uint64_t v10 = sub_1000EA7D0(ValueAtIndex, (uint64_t)&stru_1002869D0, (uint64_t)v20, 0LL);
      if (!v10) {
        break;
      }
      BOOL v11 = v10;
      *(void *)&__int128 buf = _NSConcreteStackBlock;
      *((void *)&buf + 1) = 0x40000000LL;
      uint64_t v31 = sub_1001016F8;
      uint64_t v32 = &unk_100286A20;
      uint64_t v37 = ValueAtIndex;
      uint64_t v38 = v9 + 24;
      uint64_t v33 = v20;
      uint64_t v34 = 0LL;
      uint64_t v39 = a2;
      uint64_t v35 = v19;
      __int16 v36 = &v26;
      unsigned __int8 v12 = sub_100015B70(a2, v10, (CFTypeRef *)(v9 + 24), (uint64_t)&buf);
      if (*((_BYTE *)v27 + 24)) {
        unsigned __int8 v13 = v12;
      }
      else {
        unsigned __int8 v13 = 0;
      }
      *((_BYTE *)v27 + 24) = v13;
      CFRelease(v11);
      int v14 = *((unsigned __int8 *)v27 + 24);
      _Block_object_dispose(&v26, 8);
      if (!v14) {
        goto LABEL_13;
      }
      BOOL v6 = ++v7 >= v5;
      if (v5 == v7) {
        goto LABEL_11;
      }
    }

    *((_BYTE *)v27 + 24) = 0;
    _Block_object_dispose(&v26, 8);
LABEL_13:
    uint64_t v15 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "SecDbItemSelectSHA1 failed: %@",  (uint8_t *)&buf,  0xCu);
    }
  }

  BOOL v17 = v22;
  free((void *)v22[3]);
  v17[3] = 0LL;
  void v17[4] = 0LL;
  *((_BYTE *)v17 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0;
  v17[5] = 0LL;
  _Block_object_dispose(&v21, 8);
  return v6;
}

BOOL sub_1001015D8(uint64_t a1, const void **a2)
{
  return CFDictionaryContainsKey(*(CFDictionaryRef *)(*(void *)(a1 + 32) + 8LL), *a2) != 0;
}

void sub_100101600(uint64_t a1, sqlite3_stmt *a2)
{
  unint64_t v4 = (__int128 *)sqlite3_column_blob(a2, 0);
  int v5 = sqlite3_column_bytes(a2, 0);
  if (v5 == 20)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
    sub_1001A9ECC((char **)(v6 + 24), v4);
    *(_BYTE *)(v6 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 1;
  }

  else
  {
    int v7 = v5;
    Block_layout v8 = (os_log_s *)sub_10001267C("SecError");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 134217984;
      uint64_t v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "digest %zu bytes", (uint8_t *)&v9, 0xCu);
    }
  }

uint64_t sub_1001016F8(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1000EAB08( *(CFDictionaryRef **)(a1 + 64),  a2,  *(__CFString ***)(a1 + 72),  *(void *)(a1 + 32),  *(void *)(a1 + 40));
  if ((_DWORD)result)
  {
    uint64_t v6 = *(CFTypeRef **)(a1 + 72);
    uint64_t v5 = *(void *)(a1 + 80);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 0x40000000LL;
    _DWORD v7[2] = sub_100101784;
    v7[3] = &unk_1002869F8;
    void v7[4] = *(void *)(a1 + 48);
    void v7[5] = a2;
    uint64_t result = sub_100015CD8(v5, a2, v6, (uint64_t)v7);
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_100101784(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2);
}

BOOL sub_100101798(id a1, const SecDbAttr *a2)
{
  return a2->var1 == 7;
}

__CFString **sub_1001017A8(__CFArray *a1, uint64_t a2, int a3, BOOL a4, const __CFData *a5, __CFString **a6)
{
  BOOL v11 = (__CFString **)sub_1000F82CC(a2, 0LL, 0LL, 0LL, a6);
  unsigned __int8 v12 = v11;
  if (v11)
  {
    *((_DWORD *)v11 + 12) = 3;
    v11[13] = (__CFString *)-1LL;
    *((_DWORD *)v11 + 3syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0;
    sub_1000F7B40(kSecAttrSynchronizable, kCFBooleanTrue, (uint64_t)v11);
    sub_1000F7D2C(kSecAttrAccessible, (const __CFData *)kSecAttrAccessibleWhenUnlocked, (uint64_t)v12);
    sub_1000F7D2C(kSecAttrAccessible, (const __CFData *)kSecAttrAccessibleAfterFirstUnlock, (uint64_t)v12);
    sub_1000F7D2C(kSecAttrAccessible, kSecAttrAccessibleAlwaysPrivate, (uint64_t)v12);
    sub_1000F7D2C(kSecAttrAccessible, (const __CFData *)kSecAttrAccessibleWhenUnlockedThisDeviceOnly, (uint64_t)v12);
    sub_1000F7D2C(kSecAttrAccessible, (const __CFData *)kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly, (uint64_t)v12);
    sub_1000F7D2C(kSecAttrAccessible, kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate, (uint64_t)v12);
    if (a3) {
      sub_1000F7B40(kSecAttrTombstone, kCFBooleanFalse, (uint64_t)v12);
    }
    CFArrayAppendValue(a1, v12);
    unsigned __int8 v13 = *(__CFString ***)(a2 + 16);
    if (v13)
    {
      int v14 = (__CFString ***)(a2 + 24);
      do
      {
        BOOL v15 = v13 != &off_1002905C0;
        if (v13 == &off_1002875B8) {
          BOOL v15 = a4;
        }
        if (!v15)
        {
          if (a5 && v13 == &off_1002905C0)
          {
            sub_1000F7914(&off_1002905C0, a5, (uint64_t)v12);
          }

          else
          {
            uint64_t v16 = sub_1000E6DB8((uint64_t)v13, v12 + 5);
            if (v16)
            {
              BOOL v17 = v16;
              sub_1000F7914(v13, v16, (uint64_t)v12);
              CFRelease(v17);
            }
          }
        }

        uint64_t v18 = *v14++;
        unsigned __int8 v13 = v18;
      }

      while (v18);
    }
  }

  return v12;
}

__CFString **sub_1001019A0(__CFArray *a1, uint64_t a2, int a3, const __CFBoolean *a4, __CFString **a5)
{
  uint64_t v6 = sub_1001017A8(a1, a2, a3, 1, 0LL, a5);
  int v7 = v6;
  if (a4 && v6) {
    sub_1000F7B40(kSecAttrAccessGroup, a4, (uint64_t)v6);
  }
  return v7;
}

void sub_1001019F4(id a1)
{
  qword_1002DEAB0[0] = sub_10010C560((uint64_t)@"genp", &qword_1002DEB28, (uint64_t)&unk_1002DEB20);
  qword_1002DEAB8 = sub_10010C560((uint64_t)@"inet", &qword_1002DEB38, (uint64_t)&unk_1002DEB30);
  qword_1002DEAC0 = sub_10010C560((uint64_t)@"keys", &qword_1002DEB58, (uint64_t)&unk_1002DEB50);
}

uint64_t sub_100101A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3,  a4,  a5);
}

uint64_t sub_100101A94(uint64_t a1)
{
  if (qword_1002DEAA0 != -1) {
    dispatch_once(&qword_1002DEAA0, &stru_100286800);
  }
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000LL;
  uint64_t v8 = 0LL;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000LL;
  void v4[2] = sub_100101B50;
  v4[3] = &unk_100286828;
  void v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync((dispatch_queue_t)qword_1002DEA90, v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_100101B50(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    uint64_t v2 = *(const void **)(v1 + 16);
    if (v2)
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = CFDictionaryGetValue( (CFDictionaryRef)qword_1002DEA98,  *(const void **)(v1 + 16));
      if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
      {
        unint64_t v4 = *(const void **)(a1 + 40);
        uint64_t v5 = calloc(1uLL, 0x30uLL);
        void *v5 = sub_100101D64;
        v5[1] = sub_100101D74;
        v5[2] = nullsub_24;
        v5[3] = CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeDictionaryKeyCallBacks, 0LL);
        void v5[4] = dispatch_queue_create("dsf queue", 0LL);
        if (v4) {
          CFRetain(v4);
        }
        void v5[5] = v4;
        uint64_t v6 = (const void *)((uint64_t (*)(void *))*v5)(v5);
        CFTypeRef cf = 0LL;
        uint64_t v7 = ((uint64_t (*)(void *, const void *, CFTypeRef *))v5[1])(v5, v6, &cf);
        if (!v7)
        {
          uint64_t v8 = (os_log_s *)sub_10001267C("SecError");
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412546;
            unsigned __int8 v13 = v6;
            __int16 v14 = 2112;
            CFTypeRef v15 = cf;
            _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "create_datasource %@ failed %@",  buf,  0x16u);
          }
        }

        CFTypeRef v9 = cf;
        if (cf)
        {
          CFTypeRef cf = 0LL;
          CFRelease(v9);
        }

        if (v7) {
          (*(void (**)(uint64_t, CFTypeRef *))(v7 + 72))(v7, &cf);
        }
        CFTypeRef v10 = cf;
        if (cf)
        {
          CFTypeRef cf = 0LL;
          CFRelease(v10);
        }

        if (v6) {
          CFRelease(v6);
        }
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v5;
        CFDictionaryAddValue( (CFMutableDictionaryRef)qword_1002DEA98,  v2,  *(const void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
      }
    }
  }

CFStringRef sub_100101D64()
{
  return kSecAttrAccessibleWhenUnlocked;
}

uint64_t sub_100101D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000LL;
  uint64_t v10 = 0LL;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  void v6[2] = sub_100101E0C;
  v6[3] = &unk_100286D28;
  void v6[4] = &v7;
  void v6[5] = a1;
  void v6[6] = a2;
  void v6[7] = a3;
  dispatch_sync(v3, v6);
  uint64_t v4 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_100101E0C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = CFDictionaryGetValue( *(CFDictionaryRef *)(*(void *)(a1 + 40) + 24LL),  *(const void **)(a1 + 48));
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    uint64_t v2 = *(const void **)(*(void *)(a1 + 40) + 40LL);
    if (v2)
    {
      uint64_t v4 = *(const void **)(a1 + 48);
      uint64_t v3 = *(void *)(a1 + 56);
      uint64_t v5 = calloc(1uLL, 0xA8uLL);
      v5[1] = sub_1000FEED0;
      v5[2] = sub_1000FEED8;
      void v5[5] = sub_1000FF1F4;
      void v5[6] = sub_1000FF498;
      v5[3] = sub_1000FEF30;
      void v5[4] = sub_1000FF67C;
      v5[9] = sub_1000FF940;
      v5[10] = sub_1000FF8DC;
      v5[11] = sub_1000FE494;
      v5[12] = sub_1000FF948;
      void v5[7] = sub_1000FFB60;
      v5[8] = sub_1000FF86C;
      v5[13] = sub_1000FFCB4;
      v5[14] = sub_1000FFDD4;
      v5[15] = sub_1000FFE28;
      uint8_t v5[16] = sub_1000FFE84;
      v5[17] = sub_1000FFF28;
      v5[18] = sub_100100064;
      CFTypeRef v6 = CFRetain(v2);
      v5[19] = v2;
      if (v4) {
        CFTypeRef v6 = CFRetain(v4);
      }
      v5[20] = v4;
      if (-[OTSOSActualAdapter sosEnabled]_0((uint64_t)v6, v7))
      {
        *(void *)&__int128 buf = _NSConcreteStackBlock;
        *((void *)&buf + 1) = 3221225472LL;
        char v29 = sub_1000CC530;
        uint64_t v30 = &unk_1002935A8;
        uint64_t v31 = &qword_1002DE9B0;
        if (qword_1002DE9A8 != -1) {
          dispatch_once(&qword_1002DE9A8, &buf);
        }
        uint64_t Instance = _CFRuntimeCreateInstance(kCFAllocatorDefault, qword_1002DE9B0, 136LL, 0LL);
        *(void *)(Instance + 16) = v5;
        dispatch_queue_t v9 = dispatch_queue_create("engine", 0LL);
        uint64_t v10 = *(void **)(Instance + 112);
        *(void *)(Instance + 112) = v9;

        *(void *)(Instance + 56) = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
        *(void *)(Instance + 64) = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
        *(void *)(Instance + 72) = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
        BOOL v11 = *(void **)(Instance + 136);
        *(void *)(Instance + 136) = 0LL;

        *(void *)(Instance + 96) = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
        *(_WORD *)(Instance + 104) = 0;
        CFTypeRef cf = 0LL;
        if ((sub_1000CE908(Instance, 0LL, &cf) & 1) == 0)
        {
          unsigned __int8 v12 = sub_10001267C("SecWarning");
          unsigned __int8 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf) = 138412290;
            *(void *)((char *)&buf + 4) = cf;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "engine failed load state starting with nothing %@",  (uint8_t *)&buf,  0xCu);
          }

          CFTypeRef v14 = cf;
          if (cf)
          {
            CFTypeRef cf = 0LL;
            CFRelease(v14);
          }

          CFTypeRef v15 = sub_10001267C("engine");
          uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v17 = (*(uint64_t (**)(void))(*(void *)(Instance + 16) + 8LL))();
            LODWORD(buf) = 138412290;
            *(void *)((char *)&buf + 4) = v17;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "new engine for datasource named %@",  (uint8_t *)&buf,  0xCu);
          }

          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          BOOL v19 = *(const void **)(Instance + 56);
          if (v19) {
            CFRelease(v19);
          }
          *(void *)(Instance + 56) = Mutable;
          CFMutableDictionaryRef v20 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          uint64_t v21 = *(const void **)(Instance + 64);
          if (v21) {
            CFRelease(v21);
          }
          *(void *)(Instance + 64) = v20;
          CFMutableDictionaryRef v22 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          uint64_t v23 = *(const void **)(Instance + 72);
          if (v23) {
            CFRelease(v23);
          }
          *(void *)(Instance + 72) = v22;
          __int128 v24 = *(const void **)(Instance + 48);
          if (v24)
          {
            *(void *)(Instance + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
            CFRelease(v24);
          }

          __int128 v25 = *(const void **)(Instance + 80);
          if (v25)
          {
            *(void *)(Instance + 8syslog(5, "SecCopyURLForFileInParameterizedKeychainDirectory: forceUserScope:%d", 0) = 0LL;
            CFRelease(v25);
          }

          sub_1000CF278(Instance, 0LL, 0LL, 0LL);
        }

        uint64_t v26 = *(void *)(Instance + 16);
        *(void *)&__int128 buf = _NSConcreteStackBlock;
        *((void *)&buf + 1) = 3221225472LL;
        char v29 = sub_1000D0A38;
        uint64_t v30 = &unk_100285A68;
        uint64_t v31 = (uint64_t *)Instance;
        (*(void (**)(void))(v26 + 16))();
        void *v5 = Instance;
      }

      else
      {
        SOSCCSetSOSDisabledError(v3);
        free(v5);
        uint64_t v5 = 0LL;
      }

      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v5;
      CFDictionarySetValue( *(CFMutableDictionaryRef *)(*(void *)(a1 + 40) + 24LL),  *(const void **)(a1 + 48),  *(const void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
    }
  }

void sub_100102310(id a1)
{
  qword_1002DEA90 = (uint64_t)dispatch_queue_create("dataSourceFactory queue", 0LL);
  qword_1002DEA98 = (uint64_t)CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeDictionaryKeyCallBacks, 0LL);
}

uint64_t sub_100102360(const __CFDictionary *a1, CFTypeRef *a2)
{
  uint64_t v3 = &v8;
  uint64_t v8 = 0LL;
  dispatch_queue_t v9 = &v8;
  uint64_t v10 = 0x3800000000LL;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  if (a1)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 0x40000000LL;
    _DWORD v7[2] = sub_100102420;
    v7[3] = &unk_100286850;
    void v7[4] = &v8;
    CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)sub_100100324, v7);
    uint64_t v3 = v9;
  }

  uint64_t v4 = sub_1001AB230((uint64_t)(v3 + 3), a2);
  uint64_t v5 = v9;
  free((void *)v9[3]);
  v5[3] = 0LL;
  void v5[4] = 0LL;
  *((_BYTE *)v5 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0;
  void v5[5] = 0LL;
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_100102420(uint64_t a1, int a2, CFTypeRef cf)
{
  if (cf)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == CFDictionaryGetTypeID())
    {
      SInt32 Value = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, @"hash");
      if (Value)
      {
        uint64_t v7 = Value;
        CFTypeID v8 = CFGetTypeID(Value);
        if (v8 == CFDataGetTypeID() && CFDataGetLength(v7) == 20)
        {
          uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8LL);
          BytePtr = (__int128 *)CFDataGetBytePtr(v7);
          sub_1001A9ECC((char **)(v9 + 24), BytePtr);
          *(_BYTE *)(v9 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 1;
        }
      }
    }
  }

void sub_10010314C(id a1, OTAuthKitAdapterNotifier *a2)
{
}

void sub_100103154(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
    [v7 logUnrecoverableError:v6 forEvent:@"OctagonEventAuthKitDeviceList" withAttributes:0];

    CFTypeID v8 = objc_alloc(&OBJC_CLASS___AAFAnalyticsEventSecurity);
    LOBYTE(v56) = 1;
    uint64_t v9 = -[AAFAnalyticsEventSecurity initWithKeychainCircleMetrics:altDSID:flowID:deviceSessionID:eventName:testsAreEnabled:canSendMetrics:category:]( v8,  "initWithKeychainCircleMetrics:altDSID:flowID:deviceSessionID:eventName:testsAreEnabled:canSendMetrics:category:",  &__NSDictionary0__struct,  a1[4],  a1[5],  a1[6],  kSecurityRTCEventNameTrustedDeviceListFailure,  0LL,  v56,  kSecurityRTCEventCategoryAccountDataAccessRecovery);
    +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:]( &OBJC_CLASS___SecurityAnalyticsReporterRTC,  "sendMetricWithEvent:success:error:",  v9,  0LL,  v6);
    uint64_t v10 = sub_10001267C("authkit");
    __int128 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v12 = (void *)a1[4];
      *(_DWORD *)__int128 buf = 138412546;
      id v73 = v12;
      __int16 v74 = 2112;
      id v75 = v6;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "received no device list(%@): %@", buf, 0x16u);
    }

    (*(void (**)(void, void))(a1[7] + 16LL))(a1[7], 0LL);
    goto LABEL_5;
  }

  char v61 = a1;
  if (!v5)
  {
    uint64_t v9 = (AAFAnalyticsEventSecurity *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:",  @"com.apple.security.octagon",  68LL,  @"bad response from AuthKit"));
    (*(void (**)(void, void))(a1[7] + 16LL))(a1[7], 0LL);
    uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
    [v52 logUnrecoverableError:v9 forEvent:@"OctagonEventAuthKitDeviceList" withAttributes:0];

LABEL_5:
    goto LABEL_47;
  }

  unsigned int v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  uint64_t v58 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue([v5 deviceListVersion]);
  __int128 v68 = 0u;
  __int128 v69 = 0u;
  __int128 v70 = 0u;
  __int128 v71 = 0u;
  __int16 v57 = v5;
  unsigned __int8 v13 = (void *)objc_claimAutoreleasedReturnValue([v5 deviceList]);
  id v14 = [v13 countByEnumeratingWithState:&v68 objects:v81 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v69;
    do
    {
      for (uint64_t i = 0LL; i != v15; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v69 != v16) {
          objc_enumerationMutation(v13);
        }
        uint64_t v18 = *(void **)(*((void *)&v68 + 1) + 8LL * (void)i);
        BOOL v19 = (void *)objc_claimAutoreleasedReturnValue([v18 machineId]);
        [v63 addObject:v19];

        CFMutableDictionaryRef v20 = sub_10001267C("authkit");
        uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          CFMutableDictionaryRef v22 = (void *)v61[4];
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v18 machineId]);
          *(_DWORD *)__int128 buf = 138412802;
          id v73 = v22;
          __int16 v74 = 2112;
          id v75 = v62;
          __int16 v76 = 2112;
          rsize_t v77 = v23;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Current machine ID on list for (%@) version %@: %@",  buf,  0x20u);
        }
      }

      id v15 = [v13 countByEnumeratingWithState:&v68 objects:v81 count:16];
    }

    while (v15);
  }

  __int128 v66 = 0u;
  __int128 v67 = 0u;
  __int128 v64 = 0u;
  __int128 v65 = 0u;
  __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v5 deletedDeviceList]);
  id v25 = [v24 countByEnumeratingWithState:&v64 objects:v80 count:16];
  uint64_t v26 = v61;
  uint64_t v27 = (void *)v58;
  if (v25)
  {
    id v28 = v25;
    uint64_t v29 = *(void *)v65;
    do
    {
      for (uint64_t j = 0LL; j != v28; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v65 != v29) {
          objc_enumerationMutation(v24);
        }
        uint64_t v31 = *(void **)(*((void *)&v64 + 1) + 8LL * (void)j);
        id v32 = [v31 removalReason];
        if (!v32)
        {
          uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v31 machineId]);
          [v60 addObject:v43];

          uint64_t v44 = sub_10001267C("authkit");
          uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
          if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_34;
          }
          uint64_t v45 = (void *)v26[4];
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v31 machineId]);
          *(_DWORD *)__int128 buf = 138412802;
          id v73 = v45;
          __int16 v74 = 2112;
          id v75 = v62;
          __int16 v76 = 2112;
          rsize_t v77 = v37;
          uint64_t v38 = v35;
          uint64_t v39 = "Device evicted for unknown reason for (%@) version %@: %@";
          goto LABEL_30;
        }

        if (v32 == (id)2)
        {
          uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v31 machineId]);
          [v59 addObject:v40];

          uint64_t v41 = sub_10001267C("authkit");
          uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
          if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_34;
          }
          uint64_t v42 = (void *)v26[4];
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v31 machineId]);
          *(_DWORD *)__int128 buf = 138412802;
          id v73 = v42;
          __int16 v74 = 2112;
          id v75 = v62;
          __int16 v76 = 2112;
          rsize_t v77 = v37;
          uint64_t v38 = v35;
          uint64_t v39 = "Device evicted due to limit for (%@) version %@: %@";
          goto LABEL_30;
        }

        if (v32 == (id)1)
        {
          uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v31 machineId]);
          [v27 addObject:v33];

          uint64_t v34 = sub_10001267C("authkit");
          uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
          if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_34;
          }
          __int16 v36 = (void *)v26[4];
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v31 machineId]);
          *(_DWORD *)__int128 buf = 138412802;
          id v73 = v36;
          __int16 v74 = 2112;
          id v75 = v62;
          __int16 v76 = 2112;
          rsize_t v77 = v37;
          uint64_t v38 = v35;
          uint64_t v39 = "User initiated removed machine ID for (%@) version %@: %@";
LABEL_30:
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, v39, buf, 0x20u);

          goto LABEL_34;
        }

        uint64_t v46 = sub_10001267C("SecError");
        uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          id v48 = [v31 removalReason];
          uint64_t v49 = (void *)v61[4];
          uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v31 machineId]);
          *(_DWORD *)__int128 buf = 134218754;
          id v73 = v48;
          uint64_t v27 = (void *)v58;
          __int16 v74 = 2112;
          id v75 = v49;
          uint64_t v26 = v61;
          __int16 v76 = 2112;
          rsize_t v77 = v62;
          __int16 v78 = 2112;
          uint64_t v79 = v50;
          _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "authkit: super shrug here. Device is in the deletedDeviceList but has an undefined removal reason (%ld) for (%@) version %@: %@",  buf,  0x2Au);
        }

        uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue([v31 machineId]);
        [v60 addObject:v35];
LABEL_34:
      }

      id v28 = [v24 countByEnumeratingWithState:&v64 objects:v80 count:16];
    }

    while (v28);
  }

  id v5 = v57;
  if ((objc_opt_respondsToSelector(v57, "trustedDeviceHash") & 1) != 0) {
    uint64_t v51 = (__CFString *)objc_claimAutoreleasedReturnValue([v57 trustedDeviceHash]);
  }
  else {
    uint64_t v51 = &stru_100294B48;
  }
  if ((objc_opt_respondsToSelector(v57, "deletedDeviceHash") & 1) != 0) {
    uint64_t v53 = (__CFString *)objc_claimAutoreleasedReturnValue([v57 deletedDeviceHash]);
  }
  else {
    uint64_t v53 = &stru_100294B48;
  }
  if ((objc_opt_respondsToSelector(v57, "trustedDevicesUpdateTimestamp") & 1) != 0) {
    uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v57 trustedDevicesUpdateTimestamp]);
  }
  else {
    uint64_t v54 = 0LL;
  }
  (*(void (**)(void, void *))(v26[7] + 16LL))(v26[7], v63);
  uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](&OBJC_CLASS___CKKSAnalytics, "logger"));
  [v55 logSuccessForEventNamed:@"OctagonEventAuthKitDeviceList"];

  id v6 = 0LL;
LABEL_47:
}