const char *sub_100002C3C(int a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  Swift::String v7;
  const char *result;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  uint64_t v13;
  v5 = 0x6F727245204C5153LL;
  if (a3)
  {
    v5 = a2;
    v6 = a3;
  }

  else
  {
    v6 = 0xE900000000000072LL;
  }

  v13 = v5;
  swift_bridgeObjectRetain(v6);
  v7._countAndFlagsBits = 8250LL;
  v7._object = (void *)0xE200000000000000LL;
  String.append(_:)(v7);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v6);
  result = sqlite3_errstr(a1);
  if (result)
  {
    v9 = String.init(cString:)(result);
    v11 = v10;
    swift_bridgeObjectRetain(v6);
    v12._countAndFlagsBits = v9;
    v12._object = v11;
    String.append(_:)(v12);
    sub_100006AF0();
    swift_bridgeObjectRelease(v11);
    return (const char *)v13;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100002D14()
{
  return sub_100002D10(*v0, *((void *)v0 + 1), *((void *)v0 + 2));
}

const char *sub_100002D2C()
{
  return sub_100002C3C(*(_DWORD *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t sub_100002D48(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100002D80 + 4 * byte_100068FB0[a1]))( 0xD00000000000001ALL,  0x800000010006D540LL);
}

void sub_100002D80()
{
}

uint64_t sub_100002DA0()
{
  return 0x6465736F6C63LL;
}

uint64_t sub_100002DB4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100002DEC + 4 * byte_100068FB4[a1]))( 0xD00000000000001ALL,  0x800000010006D540LL);
}

void sub_100002DEC()
{
}

uint64_t sub_100002E0C()
{
  return 0x6465736F6C63LL;
}

BOOL sub_100002E20(char a1, char a2)
{
  return a1 == a2;
}

void sub_100002E30(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int sub_100002E54(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL sub_100002E98(char *a1, char *a2)
{
  return sub_100002E20(*a1, *a2);
}

Swift::Int sub_100002EA4()
{
  return sub_100002E54(*v0);
}

void sub_100002EAC(uint64_t a1)
{
}

Swift::Int sub_100002EB4(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100002EF4()
{
  return sub_100002DB4(*v0);
}

uint64_t sub_100002EFC()
{
  return sub_100002D48(*v0);
}

uint64_t sub_100002F04()
{
  uint64_t v1 = sub_100006C8C();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_100006B74();
  type metadata accessor for SQLiteDB.Location(0LL);
  sub_100006B54();
  __chkstk_darwin(v3);
  sub_100006B64();
  uint64_t v6 = v5 - v4;
  sub_100005FAC(v0, v5 - v4);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v0, v6, v1);
  uint64_t v7 = URL.path.getter(v8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  return v7;
}

uint64_t sub_100002FF0(uint64_t a1)
{
  uint64_t v2 = v1;
  *(_BYTE *)(v2 + 24) = 0;
  v20 = 0LL;
  uint64_t v4 = sub_100002F04();
  uint64_t v6 = v5;
  uint64_t v7 = String.utf8CString.getter(v4, v5);
  swift_bridgeObjectRelease(v6);
  int v8 = sqlite3_open_v2((const char *)(v7 + 32), &v20, 32774, 0LL);
  swift_release(v7);
  v9 = v20;
  if (!v20 || v8)
  {
    unint64_t v10 = sub_1000047F8();
    uint64_t v11 = swift_allocError(&unk_100082340, v10, 0LL, 0LL);
    *(_DWORD *)uint64_t v12 = v8;
    *(void *)(v12 + 8) = 0xD000000000000017LL;
    *(void *)(v12 + 16) = 0x800000010006D4C0LL;
    swift_willThrow(v11, v12, v13, v14, v15, v16, v17, v18);
    sub_100005FF0(a1, type metadata accessor for SQLiteDB.Location);
    swift_deallocPartialClassInstance(v2);
  }

  else
  {
    sub_100005FF0(a1, type metadata accessor for SQLiteDB.Location);
    *(void *)(v2 + 16) = v9;
  }

  return v2;
}

uint64_t sub_100003134()
{
  if ((*(_BYTE *)(v0 + 24) & 1) == 0)
  {
    *(_BYTE *)(v0 + 24) = 1;
    return sqlite3_close_v2(*(sqlite3 **)(v0 + 16));
  }

  return result;
}

uint64_t sub_100003150()
{
  return swift_deallocClassInstance(v0, 25LL, 7LL);
}

void sub_100003170()
{
  uint64_t v1 = sqlite3_expanded_sql(*(sqlite3_stmt **)(v0 + 16));
  if (v1)
  {
    uint64_t v2 = v1;
    String.init(cString:)(v1);
    sqlite3_free(v2);
  }

  sub_100006C40();
}

uint64_t sub_1000031C0()
{
  uint64_t v1 = v0;
  int v2 = sqlite3_step(*(sqlite3_stmt **)(v0 + 16));
  if (v2 == 101)
  {
    *(_BYTE *)(v0 + 24) = 1;
    return 0LL;
  }

  else
  {
    int v3 = v2;
    if (v2 == 100)
    {
      sub_100006BF4();
    }

    else
    {
      HIDWORD(v10[1]) = -335544320;
      _StringGuts.grow(_:)(38LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      strcpy((char *)v10, "Statement ((");
      sub_100003170();
      String.append(_:)(v4);
      sub_100006BFC();
      v5._object = (void *)0x800000010006D3A0LL;
      v5._countAndFlagsBits = 0xD000000000000018LL;
      String.append(_:)(v5);
      uint64_t v6 = v10[0];
      uint64_t v1 = v10[1];
      unint64_t v7 = sub_1000047F8();
      sub_100006A70((uint64_t)&unk_100082340, v7);
      *(_DWORD *)uint64_t v8 = v3;
      *(void *)(v8 + 8) = v6;
      *(void *)(v8 + 16) = v1;
      sub_100006AA4();
    }
  }

  return v1;
}

uint64_t sub_1000032C8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v59 = type metadata accessor for EventValue(0LL);
  sub_100006B54();
  __chkstk_darwin(v7);
  sub_100006B64();
  unint64_t v10 = (uint64_t *)(v9 - v8);
  uint64_t v11 = type metadata accessor for String.Encoding(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_100006B64();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = sub_1000031C0();
  if (!v4)
  {
    uint64_t v18 = v16;
    uint64_t v55 = v15;
    uint64_t v56 = v12;
    uint64_t v57 = v11;
    while (1)
    {
      if (!v18) {
        return swift_bridgeObjectRelease(a3);
      }
      v19 = *(sqlite3_stmt **)(v18 + 16);
      swift_retain(v18);
      if (!sqlite3_column_text(v19, 1)) {
        break;
      }
      uint64_t v20 = a2;
      uint64_t v21 = String.init(cString:)();
      uint64_t v23 = v22;
      sub_100006B3C();
      sqlite3_int64 v24 = sqlite3_column_int64(*(sqlite3_stmt **)(v18 + 16), 0);
      uint64_t v25 = a3;
      __n128 v26 = swift_bridgeObjectRetain(a3);
      static String.Encoding.utf8.getter(v26);
      String.data(using:allowLossyConversion:)(v55, 0LL, v21, v23);
      unint64_t v28 = v27;
      sub_100006BBC();
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
      if (v28 >> 60 == 15)
      {
        sub_100006CAC();
        unint64_t v43 = sub_1000048AC();
        sub_100006A70((uint64_t)&unk_100084300, v43);
        sub_100006AA4();
        goto LABEL_18;
      }

      v29 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      id v60 = 0LL;
      id v31 = [v29 JSONObjectWithData:isa options:0 error:&v60];

      id v32 = v60;
      if (!v31)
      {
        v44 = v32;
        sub_100006CAC();
        _convertNSErrorToError(_:)(v44);

        swift_willThrow(v45, v46, v47, v48, v49, v50, v51, v52);
        sub_100006AF8();
        goto LABEL_18;
      }

      _bridgeAnyObjectToAny(_:)(v31);
      swift_unknownObjectRelease(v31);
      sub_100031198((uint64_t)v61, v10);
      if (swift_getEnumCaseMultiPayload(v10, v59) != 7)
      {
        uint64_t v53 = sub_100006CAC();
        sub_100006C94(v53, type metadata accessor for EventValue);
        unint64_t v54 = sub_1000048AC();
        sub_100006A70((uint64_t)&unk_100084300, v54);
        sub_100006AA4();
        sub_100006AF8();
        sub_100005F54(v61);
LABEL_18:
        uint64_t v42 = v25;
LABEL_19:
        swift_bridgeObjectRelease(v42);
        return sub_100006B3C();
      }

      sub_100005F54(v61);
      sub_100006AF8();
      uint64_t v33 = *v10;
      uint64_t v34 = *a4;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
      *a4 = v34;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000052A4();
        uint64_t v34 = v38;
        *a4 = v38;
      }

      unint64_t v36 = *(void *)(v34 + 16);
      if (v36 >= *(void *)(v34 + 24) >> 1)
      {
        sub_1000052A4();
        uint64_t v34 = v39;
        *a4 = v39;
      }

      *(void *)(v34 + 16) = v36 + 1;
      v37 = (void *)(v34 + 32 * v36);
      v37[4] = v24;
      v37[5] = v20;
      a2 = v20;
      a3 = v25;
      v37[6] = v25;
      v37[7] = v33;
      sub_100006B3C();
      uint64_t v18 = sub_1000031C0();
    }

    sub_100006B3C();
    unint64_t v40 = sub_100004870();
    sub_100006A70((uint64_t)&type metadata for DiskCacheError, v40);
    _BYTE *v41 = 0;
    sub_100006AA4();
    uint64_t v42 = a3;
    goto LABEL_19;
  }

  return swift_bridgeObjectRelease(a3);
}

uint64_t (*sub_1000036D0(uint64_t a1))(uint64_t)
{
  return sub_100003708(a1, (uint64_t (*)(uint64_t))sub_1000038DC);
}

uint64_t (*sub_1000036EC(uint64_t a1))(uint64_t)
{
  return sub_100003708(a1, sub_100003954);
}

uint64_t (*sub_100003708(uint64_t a1, uint64_t (*a2)(uint64_t)))(uint64_t)
{
  uint64_t v5 = sub_1000031C0();
  if (!v2)
  {
    if (v5)
    {
      a2 = (uint64_t (*)(uint64_t))a2(v5);
      uint64_t v6 = sub_100006B8C();
      sub_100006BEC(v6);
      if (v3)
      {
        do
        {
          a2 = (uint64_t (*)(uint64_t))sub_100006B8C();
          swift_release(a2);
        }

        while (a2);
        unint64_t v10 = sub_100004834();
        sub_100006A70((uint64_t)&unk_1000822C8, v10);
        *uint64_t v11 = 1;
        sub_100006AA4();
        sub_100006AE8();
      }

      else
      {
        sub_100006AE8();
      }
    }

    else
    {
      unint64_t v7 = sub_100004834();
      sub_100006A70((uint64_t)&unk_1000822C8, v7);
      *uint64_t v8 = 0;
      sub_100006AA4();
    }
  }

  return a2;
}

uint64_t sub_1000037F0@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1000031C0();
  if (!v1)
  {
    if (result)
    {
      sub_10002BD50(result, a1);
      uint64_t v5 = sub_100006B8C();
      sub_100006BEC(v5);
      if (v2)
      {
        while (1)
        {
          uint64_t v8 = sub_100006B8C();
          sub_100006BEC(v8);
        }
      }

      return sub_100006AE8();
    }

    else
    {
      unint64_t v6 = sub_100004834();
      sub_100006A70((uint64_t)&unk_1000822C8, v6);
      *unint64_t v7 = 0;
      return sub_100006AA4();
    }
  }

  return result;
}

void sub_1000038DC(uint64_t a1)
{
  if (sqlite3_column_count(*(sqlite3_stmt **)(a1 + 16)) == 1)
  {
    uint64_t v2 = swift_retain(a1);
    sub_100004450(v2, 0LL);
  }

  else
  {
    unint64_t v3 = sub_100004834();
    uint64_t v4 = swift_allocError(&unk_1000822C8, v3, 0LL, 0LL);
    *uint64_t v5 = 2;
    swift_willThrow(v4, v5, v6, v7, v8, v9, v10, v11);
  }
}

sqlite3_int64 sub_100003954(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt **)(a1 + 16);
  if (sqlite3_column_count(v1) == 1) {
    return sqlite3_column_int64(v1, 0);
  }
  unint64_t v3 = sub_100004834();
  uint64_t v4 = swift_allocError(&unk_1000822C8, v3, 0LL, 0LL);
  *uint64_t v5 = 2;
  return swift_willThrow(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1000039C8(uint64_t a1)
{
  uint64_t v3 = v1;
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v19 = a1 + 32;
  swift_bridgeObjectRetain(a1);
  unint64_t v5 = 0LL;
  while (1)
  {
    if (v5 == v4)
    {
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      unint64_t v5 = v4;
      __int128 v13 = 0u;
    }

    else
    {
      if (v5 >= v4) {
        goto LABEL_11;
      }
      sub_100005E8C(v19 + 40 * v5, (uint64_t)v12);
      *(void *)&__int128 v13 = v5;
      sub_100005ED0(v12, (uint64_t)&v13 + 8);
      ++v5;
    }

    sub_100005EE8((uint64_t)&v13, (uint64_t)&v16);
    if (!v18)
    {
LABEL_9:
      swift_bridgeObjectRelease(a1);
      return;
    }

    uint64_t v6 = v16;
    sub_100005ED0(&v17, (uint64_t)&v13);
    BOOL v7 = __OFADD__(v6, 1LL);
    uint64_t v8 = v6 + 1;
    if (v7) {
      break;
    }
    uint64_t v9 = *((void *)&v14 + 1);
    uint64_t v10 = v15;
    sub_100005F30(&v13, *((uint64_t *)&v14 + 1));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 8))(v3, v8, v9, v10);
    sub_100005F54(&v13);
    if (v2) {
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
}

uint64_t sub_100003B10()
{
  return swift_deallocClassInstance(v0, 25LL, 7LL);
}

uint64_t sub_100003B34(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(v2 + 112) + 24LL) & 1) != 0)
  {
    unint64_t v3 = sub_100004834();
    sub_100006A70((uint64_t)&unk_1000822C8, v3);
    *unint64_t v4 = 3;
  }

  else
  {
    __int128 v15 = 0LL;
    uint64_t v5 = String.utf8CString.getter(a1, a2);
    swift_retain(v2);
    uint64_t v6 = sub_100006BF4();
    int v7 = sub_100004000(v6, v2, v5, &v15);
    sub_100006AE8();
    uint64_t v8 = v15;
    if (v15 && !v7)
    {
      uint64_t v9 = type metadata accessor for SQLiteDB.Statement();
      uint64_t result = sub_100006BE0(v9);
      *(_BYTE *)(result + 24) = 0;
      *(void *)(result + 16) = v8;
      return result;
    }

    unint64_t v11 = sub_1000047F8();
    uint64_t v12 = sub_100006A70((uint64_t)&unk_100082340, v11);
    sub_100006C14(v12, v13);
    *(void *)(v14 + 8) = 0xD00000000000001BLL;
    *(void *)(v14 + 16) = 0x800000010006D260LL;
  }

  return sub_100006AA4();
}

sqlite3_int64 sub_100003C50()
{
  return sqlite3_changes64(*(sqlite3 **)(*(void *)(*(void *)(v0 + 16) + 112LL) + 16LL));
}

void sub_100003C60()
{
  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
  {
    unint64_t v2 = sub_1000047F8();
    sub_100006A70((uint64_t)&unk_100082340, v2);
    *unint64_t v3 = 1;
    sub_100006A7C((uint64_t)v3, 0xD00000000000001DLL);
  }

  else
  {
    uint64_t v4 = sub_100006C6C();
    sub_100003CDC(v4, v5);
    if (!v1) {
      *(_BYTE *)(v0 + 24) = 1;
    }
  }

  sub_100006C34();
}

void sub_100003CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 112);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
  {
    unint64_t v4 = sub_100004834();
    uint64_t v5 = sub_100006A70((uint64_t)&unk_1000822C8, v4);
    *(_BYTE *)uint64_t v6 = 3;
LABEL_5:
    swift_willThrow(v5, v6, v7, v8, v9, v10, v11, v12);
    goto LABEL_6;
  }

  __int128 v13 = *(sqlite3 **)(v3 + 16);
  uint64_t v14 = String.utf8CString.getter(a1, a2);
  LODWORD(v13) = sub_100006B04(v13, (const char *)(v14 + 32));
  sub_100006AE8();
  if ((_DWORD)v13)
  {
    unint64_t v15 = sub_1000047F8();
    uint64_t v16 = sub_100006A70((uint64_t)&unk_100082340, v15);
    sub_100006C14(v16, v17);
    *(void *)(v6 + 8) = 0LL;
    *(void *)(v6 + 16) = 0LL;
    goto LABEL_5;
  }

LABEL_6:
  sub_100006C34();
}

  sub_10004D130();
  sub_10001AB88();
  sub_10001AB08();
  sub_10001AB28();
  sub_10001AB38();
  sub_10001AAF0();
  sub_10001ABA8();
  sub_10001AB60();
  sub_10001AB90();
  return sub_10001A94C(*(uint64_t (**)(void))(v0 + 8));
}

  sub_10004D130();
  sub_10001AB88();
  sub_10001AB08();
  sub_10001AB28();
  sub_10001AB38();
  sub_10001AAF0();
  sub_10001ABA8();
  sub_10001AB60();
  sub_10001AB90();
  return sub_10001A94C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100003D74()
{
  return swift_deallocClassInstance(v0, 25LL, 7LL);
}

uint64_t sub_100003D98(uint64_t a1)
{
  uint64_t v5 = type metadata accessor for SQLiteDB.DBHandle();
  sub_100006BE0(v5);
  uint64_t v6 = sub_100002FF0(v1);
  if (!v2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(sqlite3 **)(v6 + 16);
    int v9 = sub_100006B04(v8, "PRAGMA journal_mode=WAL;");
    if (v9)
    {
      int v10 = v9;
      unint64_t v11 = sub_1000047F8();
      uint64_t v12 = sub_100006A70((uint64_t)&unk_100082340, v11);
      *(_DWORD *)uint64_t v13 = v10;
      unint64_t v20 = 0xD000000000000014LL;
      uint64_t v21 = "Failed to enable WAL";
    }

    else
    {
      uint64_t v22 = sub_100006B04(v8, "PRAGMA foreign_keys=ON;");
      if (!(_DWORD)v22)
      {
        sub_100006C94(v22, type metadata accessor for SQLiteDB.Location);
        *(void *)(v1 + 112) = v7;
        return v1;
      }

      int v23 = v22;
      unint64_t v20 = 0xD000000000000013LL;
      unint64_t v24 = sub_1000047F8();
      uint64_t v12 = sub_100006A70((uint64_t)&unk_100082340, v24);
      *(_DWORD *)uint64_t v13 = v23;
      uint64_t v21 = "Failed to enable FK";
    }

    *(void *)(v13 + 8) = v20;
    *(void *)(v13 + 16) = (unint64_t)(v21 - 32) | 0x8000000000000000LL;
    swift_willThrow(v12, v13, v14, v15, v16, v17, v18, v19);
    sub_100006CA4();
  }

  uint64_t v25 = swift_defaultActor_destroy(v1);
  sub_100006C94(v25, type metadata accessor for SQLiteDB.Location);
  swift_deallocPartialClassInstance(v1);
  return v1;
}

uint64_t sub_100003F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_7;
  }

  int v6 = a3;
  if (a3 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v5 = a4;
  unint64_t v8 = *(void *)(a4 + 16);
  if (v8 >> 31)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v4 = a2;
  uint64_t v7 = a1;
  int v9 = *(sqlite3_stmt **)(a2 + 16);
  if (qword_100089FB0 != -1) {
LABEL_9:
  }
    swift_once(&qword_100089FB0, sub_1000047E8);
  uint64_t v10 = sqlite3_bind_text(v9, v6, (const char *)(v7 + 32), v8, (void (__cdecl *)(void *))qword_100089FB8);
  swift_release(v5);
  swift_release(v4);
  return v10;
}

uint64_t sub_100004000(uint64_t result, uint64_t a2, uint64_t a3, sqlite3_stmt **a4)
{
  unint64_t v5 = *(void *)(a3 + 16);
  if (v5 >> 31)
  {
    __break(1u);
  }

  else
  {
    uint64_t v7 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a2 + 112) + 16LL), (const char *)(result + 32), v5, a4, 0LL);
    swift_release(a3);
    swift_release(a2);
    return v7;
  }

  return result;
}

uint64_t sub_100004070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = sub_100006C0C(a1, a2);
  if (v7) {
    return sub_100006BFC();
  }
  uint64_t v14 = v12;
  sub_10002B428(v12, a4, a5, a6, a7, &v15);
  sub_100006BFC();
  swift_release(v14);
  return v15;
}

void *sub_100004104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100004118(a1, a2, a3, a4, a5);
}

void *sub_100004118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (v6)
  {
    swift_release(a5);
  }

  else
  {
    uint64_t v9 = sub_10000534C(&qword_10008A568);
    uint64_t inited = swift_initStackObject(v9, v12);
    *(_OWORD *)(inited + 16) = xmmword_100069580;
    *(void *)(inited + 56) = &type metadata for Int;
    *(void *)(inited + 64) = &off_100082138;
    *(void *)(inited + 32) = a4;
    sub_1000039C8(inited);
    swift_setDeallocating(inited);
    sub_10002C378();
    unint64_t v5 = sub_100006CBC();
    sub_100006AE8();
    sub_100006BB4();
  }

  return v5;
}

void *sub_100004208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (v7)
  {
    sub_100006AE8();
    sub_100006BBC();
  }

  else
  {
    uint64_t v11 = sub_10000534C(&qword_10008A568);
    uint64_t inited = swift_initStackObject(v11, &v14);
    *(_OWORD *)(inited + 16) = xmmword_100069590;
    *(void *)(inited + 56) = &type metadata for String;
    *(void *)(inited + 64) = &off_100082198;
    *(void *)(inited + 32) = a4;
    *(void *)(inited + 40) = a5;
    *(void *)(inited + 96) = &type metadata for Int;
    *(void *)(inited + 104) = &off_100082138;
    *(void *)(inited + 72) = a6;
    swift_bridgeObjectRetain();
    sub_1000039C8(inited);
    swift_setDeallocating(inited);
    sub_10002C378();
    uint64_t v6 = sub_100006CBC();
    sub_100006AE8();
    sub_100006BBC();
    sub_100006CA4();
  }

  return v6;
}

uint64_t sub_100004338(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for SQLiteDB.Transaction();
  uint64_t inited = swift_initStackObject(v5, &v10);
  *(_BYTE *)(inited + 24) = 0;
  *(void *)(inited + 16) = a1;
  swift_retain(a1);
  sub_100003CDC(0xD000000000000011LL, 0x800000010006D240LL);
  if (!v2)
  {
    sub_10002B610(inited, a2);
    if ((*(_BYTE *)(inited + 24) & 1) == 0)
    {
      uint64_t v8 = sub_100006C6C();
      sub_100003CDC(v8, v9);
    }
  }

  sub_100006BB4();
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_10000440C()
{
  return swift_defaultActor_deallocate(v0);
}

void sub_100004430()
{
}

void sub_100004438()
{
}

void sub_100004450(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if (a2 <= 0x7FFFFFFF)
  {
    sqlite3_column_int(*(sqlite3_stmt **)(a1 + 16), a2);
    sub_100006C04();
    sub_100006B44();
    return;
  }

  __break(1u);
}

void sub_10000449C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (a3 > 0x7FFFFFFF)
  {
LABEL_12:
    __break(1u);
    return;
  }

  if (sqlite3_bind_int(*(sqlite3_stmt **)(a1 + 16), a2, a3))
  {
    unint64_t v4 = sub_100006CB4();
    uint64_t v5 = sub_100006A70((uint64_t)&unk_100082340, v4);
    sub_100006C14(v5, v6);
    sub_100006A7C(v7, 0xD000000000000012LL);
  }

  sub_100006B44();
}

void sub_100004524(uint64_t a1, uint64_t a2)
{
}

void sub_10000453C(uint64_t a1, uint64_t a2, sqlite3_int64 a3)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (a2 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    return;
  }

  if (sqlite3_bind_int64(*(sqlite3_stmt **)(a1 + 16), a2, a3))
  {
    unint64_t v3 = sub_100006CB4();
    uint64_t v4 = sub_100006A70((uint64_t)&unk_100082340, v3);
    sub_100006C14(v4, v5);
    sub_100006A7C(v6, 0xD000000000000014LL);
  }

  sub_100006B44();
}

void sub_1000045B0(uint64_t a1, uint64_t a2)
{
}

void sub_1000045C8(uint64_t a1, uint64_t a2, double a3)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (a2 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    return;
  }

  if (sqlite3_bind_double(*(sqlite3_stmt **)(a1 + 16), a2, a3))
  {
    unint64_t v3 = sub_100006CB4();
    uint64_t v4 = sub_100006A70((uint64_t)&unk_100082340, v3);
    sub_100006C20(v4, v5);
    sub_100006A7C(v6, v7);
  }

  sub_100006B44();
}

void sub_100004634(uint64_t a1, uint64_t a2)
{
}

void sub_10000464C(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (a2 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    return;
  }

  uint64_t v2 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 16), a2);
  if (v2) {
    String.init(cString:)(v2, v3, v4, v5, v6, v7);
  }
  sub_100006C04();
  sub_100006C40();
}

uint64_t sub_1000046BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = String.utf8CString.getter(a3, a4);
  sub_100006BF4();
  uint64_t v7 = swift_retain(v6);
  LODWORD(a2) = sub_100003F28(v7, a1, a2, v6);
  uint64_t result = sub_100006BB4();
  if ((_DWORD)a2)
  {
    unint64_t v9 = sub_1000047F8();
    uint64_t v10 = sub_100006A70((uint64_t)&unk_100082340, v9);
    sub_100006C20(v10, v11);
    return sub_100006A7C(v12, v13);
  }

  return result;
}

uint64_t sub_100004750(uint64_t a1, uint64_t a2)
{
  return sub_1000046BC(a1, a2, *v2, v2[1]);
}

uint64_t type metadata accessor for SQLiteDB()
{
  return objc_opt_self(&OBJC_CLASS____TtC13rtcreportingd8SQLiteDB);
}

uint64_t type metadata accessor for SQLiteDB.DBHandle()
{
  return objc_opt_self(&OBJC_CLASS____TtCC13rtcreportingd8SQLiteDBP33_C8B85249553736E44DE752D9368DC8428DBHandle);
}

uint64_t type metadata accessor for SQLiteDB.Statement()
{
  return objc_opt_self(&OBJC_CLASS____TtCC13rtcreportingd8SQLiteDB9Statement);
}

uint64_t type metadata accessor for SQLiteDB.Transaction()
{
  return objc_opt_self(&OBJC_CLASS____TtCC13rtcreportingd8SQLiteDB11Transaction);
}

void sub_1000047E8()
{
  qword_100089FB8 = -1LL;
}

unint64_t sub_1000047F8()
{
  unint64_t result = qword_10008A530;
  if (!qword_10008A530)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069534, &unk_100082340);
    atomic_store(result, (unint64_t *)&qword_10008A530);
  }

  return result;
}

unint64_t sub_100004834()
{
  unint64_t result = qword_10008A538;
  if (!qword_10008A538)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000694F4, &unk_1000822C8);
    atomic_store(result, (unint64_t *)&qword_10008A538);
  }

  return result;
}

unint64_t sub_100004870()
{
  unint64_t result = qword_10008A540;
  if (!qword_10008A540)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006AB88, &type metadata for DiskCacheError);
    atomic_store(result, (unint64_t *)&qword_10008A540);
  }

  return result;
}

unint64_t sub_1000048AC()
{
  unint64_t result = qword_10008B910;
  if (!qword_10008B910)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006AF78, &unk_100084300);
    atomic_store(result, (unint64_t *)&qword_10008B910);
  }

  return result;
}

uint64_t sub_1000048E8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100069320, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_100004924(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100069320, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_10000496C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100069320, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

void sub_1000049C4()
{
}

uint64_t sub_1000049E8(uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v5 = v8;
  if (v8)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return result;
}

uint64_t sub_100004A60(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return v4 & 1;
}

NSString sub_100004ADC@<X0>(void *a1@<X8>)
{
  NSString result = sub_100004B00();
  *a1 = result;
  return result;
}

NSString sub_100004B00()
{
  uint64_t v1 = v0;
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  return v2;
}

void sub_100004B34()
{
}

void sub_100004B54(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v5 = v4;
  a2(v3);
  swift_bridgeObjectRelease(v5);
  sub_100006B44();
}

uint64_t sub_100004B88(uint64_t a1)
{
  return sub_100004B90(a1, *v1);
}

uint64_t sub_100004B90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100004BD0(uint64_t a1)
{
  return sub_100063560(a1, *v1);
}

uint64_t sub_100004BD8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100069320, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

void sub_100004C24(uint64_t *a1, uint64_t *a2)
{
}

uint64_t sub_100004C30(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100004C44(result, a2);
  }
  return result;
}

uint64_t sub_100004C44(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100004C88@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100004CCC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100004CF4(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_1000069B0( &qword_10008A6B8,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_1000693C0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

void sub_100004D78()
{
}

void sub_100004D94()
{
}

void sub_100004DB0(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_100006AD8();
    if (v8 != v9)
    {
      sub_100006B30();
      if (v8)
      {
        __break(1u);
        return;
      }

      sub_100006AC8();
    }
  }

  sub_100006BC4();
  if (v5)
  {
    uint64_t v10 = sub_10000534C(&qword_10008A698);
    uint64_t v11 = (char *)sub_100006B14(v10, v5 + 32);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v4;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  if ((a1 & 1) != 0)
  {
    sub_100056540((char *)(a4 + 32), v4, v11 + 32);
    sub_100006AAC();
  }

  else
  {
    uint64_t v13 = sub_100006B94();
    sub_100005680(v13, v14, v15, v16);
  }

void sub_100004E60(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_100006AD8();
    if (v8 != v9)
    {
      sub_100006B30();
      if (v8)
      {
        __break(1u);
        return;
      }

      sub_100006AC8();
    }
  }

  sub_100006BC4();
  if (v5)
  {
    uint64_t v10 = sub_10000534C(&qword_10008A5B0);
    uint64_t v11 = (char *)sub_100006B14(v10, 40 * v5 + 32);
    size_t v12 = j__malloc_size(v11);
    sub_100006C4C(v12);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  if ((a1 & 1) != 0)
  {
    sub_1000565A0((char *)(a4 + 32), v4, v11 + 32);
    sub_100006AAC();
  }

  else
  {
    uint64_t v13 = sub_100006B94();
    sub_10000576C(v13, v14, v15, v16);
  }

  sub_100006AB8();
}

uint64_t sub_100004F0C()
{
  return sub_100004F44();
}

uint64_t sub_100004F28()
{
  return sub_100004F44();
}

uint64_t sub_100004F44()
{
  if ((v6 & 1) != 0)
  {
    sub_100006AD8();
    if (v10 != v11)
    {
      sub_100006B30();
      if (v10)
      {
        __break(1u);
LABEL_23:
        sub_100006A90();
        __n128 v26 = "Division by zero";
        uint64_t v27 = 16LL;
LABEL_25:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v26,  v27,  2LL,  "Swift/IntegerTypes.swift",  24LL);
        __break(1u);
        return result;
      }

      sub_100006AC8();
    }
  }

  else
  {
    uint64_t v9 = v5;
  }

  uint64_t v12 = *(void *)(v0 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (!v13)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }

  uint64_t v14 = sub_100006B4C(v4, v5, v6, v7, v8);
  uint64_t v15 = *(void *)(v1(0LL) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v19 = (void *)swift_allocObject(v14, v18 + v16 * v13, v17 | 7);
  size_t v20 = j__malloc_size(v19);
  if (!v16) {
    goto LABEL_23;
  }
  if (v20 - v18 == 0x8000000000000000LL && v16 == -1)
  {
    sub_100006A90();
    __n128 v26 = "Division results in an overflow";
    uint64_t v27 = 31LL;
    goto LABEL_25;
  }

  v19[2] = v12;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_18:
  uint64_t v22 = *(unsigned __int8 *)(*(void *)(v1(0LL) - 8) + 80LL);
  uint64_t v23 = (v22 + 32) & ~v22;
  unint64_t v24 = (unint64_t)v19 + v23;
  if ((v3 & 1) != 0)
  {
    v2(v0 + v23, v12, v24);
    sub_100006AAC();
  }

  else
  {
    sub_100005B8C(0LL, v12, v24, v0, v1);
  }

  return (uint64_t)v19;
}

void sub_1000050E0()
{
}

void sub_1000050FC()
{
  if ((v4 & 1) != 0)
  {
    sub_100006AD8();
    if (v8 != v9)
    {
      sub_100006B30();
      if (v8)
      {
        __break(1u);
        return;
      }

      sub_100006AC8();
    }
  }

  else
  {
    uint64_t v7 = v3;
  }

  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    uint64_t v12 = sub_100006B4C(v2, v3, v4, v5, v6);
    uint64_t v13 = (void *)sub_100006B14(v12, 16 * v11 + 32);
    size_t v2 = j__malloc_size(v13);
    v13[2] = v10;
    v13[3] = 2 * ((uint64_t)(v2 - 32) / 16);
  }

  else
  {
    uint64_t v13 = &_swiftEmptyArrayStorage;
  }

  if ((v1 & 1) != 0)
  {
    sub_100006C80();
    sub_100006AAC();
  }

  else
  {
    sub_100006BA4(v2, v3, (uint64_t)(v13 + 4));
  }

  sub_100006AB8();
}

void sub_1000051A4(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_100006AD8();
    if (v8 != v9)
    {
      sub_100006B30();
      if (v8)
      {
        __break(1u);
        return;
      }

      sub_100006AC8();
    }
  }

  sub_100006BC4();
  if (v5)
  {
    uint64_t v10 = sub_10000534C(&qword_10008A598);
    uint64_t v11 = (char *)sub_100006B14(v10, 24 * v5 + 32);
    size_t v12 = j__malloc_size(v11);
    sub_100006C4C(v12);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  if ((a1 & 1) != 0)
  {
    sub_100056770((char *)(a4 + 32), v4, v11 + 32);
    sub_100006AAC();
  }

  else
  {
    uint64_t v13 = sub_100006B94();
    sub_10000599C(v13, v14, v15, v16);
  }

  sub_100006AB8();
}

void sub_100005250()
{
}

uint64_t sub_10000526C()
{
  return sub_100004F44();
}

uint64_t sub_100005288()
{
  return sub_100004F44();
}

void sub_1000052A4()
{
  if ((v4 & 1) != 0)
  {
    sub_100006AD8();
    if (v8 != v9)
    {
      sub_100006B30();
      if (v8)
      {
        __break(1u);
        return;
      }

      sub_100006AC8();
    }
  }

  else
  {
    uint64_t v7 = v3;
  }

  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    uint64_t v12 = sub_100006B4C(v2, v3, v4, v5, v6);
    uint64_t v13 = (void *)sub_100006B14(v12, 32 * v11 + 32);
    size_t v2 = j__malloc_size(v13);
    v13[2] = v10;
    v13[3] = 2 * ((uint64_t)(v2 - 32) / 32);
  }

  else
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
  }

  if ((v1 & 1) != 0)
  {
    sub_100006C80();
    sub_100006AAC();
  }

  else
  {
    sub_100006BA4(v2, v3, (uint64_t)(v13 + 4));
  }

  sub_100006AB8();
}

uint64_t sub_10000534C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

void sub_10000538C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1000053A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1000053B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, char *))
{
  char v8 = a1;
  if ((a3 & 1) != 0)
  {
    sub_100006AD8();
    if (v10 != v11)
    {
      sub_100006B30();
      if (v10)
      {
        __break(1u);
        return;
      }

      sub_100006AC8();
    }
  }

  else
  {
    uint64_t v9 = a2;
  }

  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (v13)
  {
    uint64_t v14 = sub_100006B4C(a1, a2, a3, a4, a5);
    unint64_t v15 = (char *)sub_100006B14(v14, 8 * v13 + 32);
    size_t v16 = j__malloc_size(v15);
    *((void *)v15 + 2) = v12;
    *((void *)v15 + 3) = 2 * ((uint64_t)(v16 - 32) / 8);
  }

  else
  {
    unint64_t v15 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v17 = v15 + 32;
  if ((v8 & 1) != 0)
  {
    a6(a4 + 32, v12, v17);
    sub_100006AAC();
  }

  else
  {
    sub_100005D7C(0LL, v12, v17, a4);
  }

  sub_100006AB8();
}

uint64_t sub_100005478(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 16 * a1 + 32;
  unint64_t v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10000556C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 16 * a1 + 32;
  unint64_t v8 = a3 + 16 * v4;
  if (v7 >= v8 || v7 + 16 * v4 <= a3)
  {
    sub_10000534C(&qword_10008A6A8);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100005680(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if ((v4 & 0x8000000000000000LL) != 0)
  {
LABEL_9:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = (char *)(a4 + a1 + 32);
  unint64_t v7 = &__dst[v4];
  if (v6 >= &__dst[v4] || &v6[v4] <= __dst)
  {
    memcpy(__dst, v6, v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10000576C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 40 * a1 + 32;
  unint64_t v8 = a3 + 40 * v4;
  if (v7 >= v8 || v7 + 40 * v4 <= a3)
  {
    sub_10000534C(&qword_10008A5B8);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100005888(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 16 * a1 + 32;
  unint64_t v8 = a3 + 16 * v4;
  if (v7 >= v8 || v7 + 16 * v4 <= a3)
  {
    sub_10000534C(&qword_10008A588);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10000599C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 24 * a1 + 32;
  unint64_t v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100005A98(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 32 * a1 + 32;
  unint64_t v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100005B8C( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    sub_100006A90();
    size_t v20 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v21 = 51LL;
    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(a5(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    sub_100006AF0();
    return v14;
  }

  sub_100006A90();
  size_t v20 = "UnsafeMutablePointer.initialize overlapping range";
  uint64_t v21 = 49LL;
LABEL_11:
  uint64_t result = sub_100006C60( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)v20,  v21,  v18,  (uint64_t)"Swift/UnsafePointer.swift",  v19,  v22,  v23,  v24);
  __break(1u);
  return result;
}

uint64_t sub_100005C88(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 32 * a1 + 32;
  unint64_t v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100005D7C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    sub_100006A90();
    uint64_t v11 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v12 = 51LL;
    goto LABEL_11;
  }

  uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
  unint64_t v6 = &__dst[8 * v4];
  if (v5 >= v6 || &v5[8 * v4] <= __dst)
  {
    memcpy(__dst, v5, 8 * v4);
    sub_100006AF0();
    return v6;
  }

  sub_100006A90();
  uint64_t v11 = "UnsafeMutablePointer.initialize overlapping range";
  uint64_t v12 = 49LL;
LABEL_11:
  uint64_t result = (char *)sub_100006C60( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)v11,  v12,  v9,  (uint64_t)"Swift/UnsafePointer.swift",  v10,  v13,  v14,  v15);
  __break(1u);
  return result;
}

uint64_t sub_100005E4C(uint64_t a1)
{
  uint64_t v2 = sub_10000534C(&qword_10008A590);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100005E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100005ED0(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100005EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000534C((uint64_t *)&unk_10008A5C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void *sub_100005F30(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t sub_100005F54(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t type metadata accessor for SQLiteDB.Location(uint64_t a1)
{
  uint64_t result = qword_10008A640;
  if (!qword_10008A640) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SQLiteDB.Location);
  }
  return result;
}

uint64_t sub_100005FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SQLiteDB.Location(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_100005FF0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  sub_100006B44();
}

uint64_t _s10RTCUtility9XPCObjectOwet_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t *sub_100006034(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v8);
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)a2, 1LL, v7))
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)a1, 0LL, 1LL, v7);
    }
  }

  return a1;
}

uint64_t _s10RTCUtility9XPCObjectOwst_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_1000060F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t result = _s10RTCUtility9XPCObjectOwet_0(a1, 1LL, v2);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  }
  return result;
}

void *sub_100006150(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)a2, 1LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  return a1;
}

void *sub_1000061E4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  int v7 = _s10RTCUtility9XPCObjectOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s10RTCUtility9XPCObjectOwet_0((uint64_t)a2, 1LL, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v6);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  _s10RTCUtility9XPCObjectOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  return a1;
}

void *sub_1000062C8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)a2, 1LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  }

  return a1;
}

void *sub_10000635C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  int v7 = _s10RTCUtility9XPCObjectOwet_0((uint64_t)a1, 1LL, v6);
  int v8 = _s10RTCUtility9XPCObjectOwet_0((uint64_t)a2, 1LL, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v6);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  _s10RTCUtility9XPCObjectOwst_0((uint64_t)a1, 0LL, 1LL, v6);
  return a1;
}

uint64_t sub_100006440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000644C);
}

uint64_t sub_10000644C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006C8C();
  unsigned int v5 = _s10RTCUtility9XPCObjectOwet_0(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000648C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100006498);
}

uint64_t sub_100006498(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = sub_100006C8C();
  return _s10RTCUtility9XPCObjectOwst_0(a1, v5, a3, v6);
}

uint64_t sub_1000064DC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  return _s10RTCUtility9XPCObjectOwet_0(a1, 1LL, v2);
}

uint64_t sub_100006510(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  return _s10RTCUtility9XPCObjectOwst_0(a1, a2, 1LL, v4);
}

uint64_t sub_100006548(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256LL, *(void *)(result - 8) + 64LL, 1LL);
    return 0LL;
  }

  return result;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void sub_1000065D8(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

_BYTE *initializeBufferWithCopyOfBuffer for Storebag._StorebagRoot.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for StorebagSectionCondition.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  __break(1u);
  return result;
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  if (((v9 >> 4) & 1) == 0)
  {
LABEL_8:
    uint64_t v10 = v95;
    if (((v9 >> 7) & 1) != 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v5 = v6 - 8;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x18;
  int v5 = v6 - 24;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

    sub_100041EAC();
  }

  int v24 = v23 + 3;
  if (v24 >= v49)
  {
LABEL_23:
    sub_100006BB4();
    v44 = v46;
    sub_100041DE8();
    *(void *)(v44 + 16) = v14;
    goto LABEL_24;
  }

  if (*(void *)(v48 + 8 * v24))
  {
    uint64_t v19 = v24;
    goto LABEL_17;
  }

  while (1)
  {
    uint64_t v19 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v19 >= v49) {
      goto LABEL_23;
    }
    ++v24;
    if (*(void *)(v48 + 8 * v19)) {
      goto LABEL_17;
    }
  }

  __break(1u);
  return result;
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v5 = v6 - 10;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_1000066B4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100006700 + 4 * byte_100068FBD[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100006734 + 4 * byte_100068FB8[v4]))();
}

uint64_t sub_100006734(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000673C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100006744LL);
  }
  return result;
}

uint64_t sub_100006750(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100006758LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10000675C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100006764(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100006770(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100006778(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

void type metadata accessor for DBError()
{
}

uint64_t destroy for SessionHierarchyItem(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

void sub_100006798(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  sub_100006B44();
}

uint64_t sub_1000067C8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v3);
  return a1;
}

__n128 initializeWithTake for SessionHierarchyItem(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_100006824(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_10000685C(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 16);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_1000068B0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }

  return result;
}

void type metadata accessor for SQLError()
{
}

unint64_t sub_10000691C()
{
  unint64_t result = qword_10008A668;
  if (!qword_10008A668)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000692BC, &unk_1000822C8);
    atomic_store(result, (unint64_t *)&qword_10008A668);
  }

  return result;
}

void sub_100006958()
{
}

void sub_100006984()
{
}

void sub_1000069B0(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = a2(255LL);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  sub_100006B44();
}

void sub_1000069EC()
{
}

void sub_100006A18()
{
}

void sub_100006A44()
{
}

uint64_t sub_100006A70(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0LL, 0LL);
}

uint64_t sub_100006A7C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = (v2 - 32) | 0x8000000000000000LL;
  return swift_willThrow();
}

  ;
}

uint64_t sub_100006AA4()
{
  return swift_willThrow();
}

uint64_t sub_100006AAC()
{
  *(void *)(v0 + 16) = 0LL;
  return swift_bridgeObjectRelease(v0);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100006AE8()
{
  return swift_release(v0);
}

uint64_t sub_100006AF0()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100006AF8()
{
  return sub_100004C30(v1, v0);
}

uint64_t sub_100006B04(sqlite3 *a1, const char *a2)
{
  return sqlite3_exec(a1, a2, 0LL, 0LL, 0LL);
}

uint64_t sub_100006B14(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7LL);
}

  ;
}

  ;
}

uint64_t sub_100006B3C()
{
  return swift_release(v0);
}

  ;
}

uint64_t sub_100006B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_10000534C(a5);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100006B8C()
{
  return sub_1000031C0();
}

uint64_t sub_100006B94()
{
  return 0LL;
}

uint64_t sub_100006BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return v4(0LL, v5, a3, v3);
}

uint64_t sub_100006BB4()
{
  return swift_release(v0);
}

uint64_t sub_100006BBC()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

  ;
}

uint64_t sub_100006BE0(uint64_t a1)
{
  return swift_allocObject(a1, 25LL, 7LL);
}

uint64_t sub_100006BEC(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_100006BF4()
{
  return swift_retain(v0);
}

uint64_t sub_100006BFC()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100006C04()
{
  return swift_release(v0);
}

uint64_t sub_100006C0C(uint64_t a1, uint64_t a2)
{
  return sub_100003B34(a1, a2);
}

void sub_100006C14(uint64_t a1, _DWORD *a2)
{
  *a2 = v2;
}

void sub_100006C20(uint64_t a1, _DWORD *a2)
{
  *a2 = v2;
}

  ;
}

  ;
}

uint64_t sub_100006C4C(uint64_t result)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * ((result - 32) / v3);
  return result;
}

uint64_t sub_100006C60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2LL, a7, 25LL, a9, a10, a11);
}

uint64_t sub_100006C6C()
{
  return 0x54494D4D4F43LL;
}

uint64_t sub_100006C80()
{
  return v1(v0 + 32, v2);
}

uint64_t sub_100006C8C()
{
  return type metadata accessor for URL(0LL);
}

void sub_100006C94(uint64_t a1, uint64_t (*a2)(void))
{
}

  ;
}

uint64_t sub_100006CA4()
{
  return swift_release(v0);
}

uint64_t sub_100006CAC()
{
  return swift_bridgeObjectRelease(v0);
}

unint64_t sub_100006CB4()
{
  return sub_1000047F8();
}

void *sub_100006CBC()
{
  return sub_10002AC48();
}

uint64_t initializeBufferWithCopyOfBuffer for ClientIdentity(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for AllEventFieldProvider(void *a1)
{
  return swift_bridgeObjectRelease(a1[11]);
}

uint64_t initializeWithCopy for AllEventFieldProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  ((void (*)(void))swift_bridgeObjectRetain)();
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

void *assignWithCopy for AllEventFieldProvider(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v4 = a2[3];
  uint64_t v5 = a1[3];
  a1[3] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[4] = a2[4];
  uint64_t v6 = a2[5];
  uint64_t v7 = a1[5];
  a1[5] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[6] = a2[6];
  uint64_t v8 = a2[7];
  uint64_t v9 = a1[7];
  a1[7] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[8] = a2[8];
  uint64_t v10 = a2[9];
  uint64_t v11 = a1[9];
  a1[9] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[10] = a2[10];
  uint64_t v12 = a2[11];
  uint64_t v13 = a1[11];
  a1[11] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

void *initializeWithTake for AllEventFieldProvider(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t assignWithTake for AllEventFieldProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 88);
  uint64_t v13 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for AllEventFieldProvider(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 96))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AllEventFieldProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0LL;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 96) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AllEventFieldProvider()
{
  return &type metadata for AllEventFieldProvider;
}

uint64_t destroy for HTTPHeaderFieldProvider(void *a1)
{
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t initializeWithCopy for HTTPHeaderFieldProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v5;
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for HTTPHeaderFieldProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

void *initializeWithTake for HTTPHeaderFieldProvider(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for HTTPHeaderFieldProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 72);
  uint64_t v10 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPHeaderFieldProvider(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPHeaderFieldProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for HTTPHeaderFieldProvider()
{
  return &type metadata for HTTPHeaderFieldProvider;
}

void sub_10000724C()
{
  uint64_t v1 = sub_10000534C(&qword_10008A800);
  __chkstk_darwin(v1);
  uint64_t v3 = (uint64_t *)((char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v4 = sub_10000534C(&qword_10008A808);
  uint64_t v5 = sub_10000534C(&qword_10008A810);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 72);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 32) & ~v8;
  uint64_t v10 = swift_allocObject(v4, v9 + 4 * v7, v8 | 7);
  *(_OWORD *)(v10 + 16) = xmmword_1000695A0;
  uint64_t v11 = (void *)(v10 + v9);
  uint64_t v12 = (_OWORD *)(v10 + v9 + *(int *)(v5 + 48));
  *uint64_t v11 = 0xD000000000000011LL;
  v11[1] = 0x800000010006D5A0LL;
  __int128 v13 = *(_OWORD *)(v0 + 24);
  __int128 v31 = *(_OWORD *)(v0 + 8);
  __int128 v32 = v13;
  __int128 v33 = *(_OWORD *)(v0 + 40);
  __int128 v36 = v13;
  *uint64_t v12 = v13;
  uint64_t v14 = sub_1000083F4();
  sub_100008324((uint64_t)v12, v14);
  sub_1000083E8((uint64_t)v11 + v7);
  sub_100008380(v15);
  __int128 v35 = v33;
  *size_t v16 = v33;
  sub_100008324((uint64_t)v16, v14);
  sub_1000083E8((uint64_t)v11 + 2 * v7);
  sub_100008380(v17);
  *uint64_t v18 = *(void *)v0;
  swift_storeEnumTagMultiPayload(v18, v14, 1LL);
  uint64_t v19 = (__n128 *)sub_1000083E8((uint64_t)v11 + 3 * v7);
  sub_1000083C0(v19, v20);
  sub_100008324(v21, v14);
  sub_1000080FC((uint64_t)&v36);
  sub_1000080FC((uint64_t)&v35);
  sub_1000080FC((uint64_t)v34);
  uint64_t v30 = Dictionary.init(dictionaryLiteral:)(v10, &type metadata for String, v14, &protocol witness table for String);
  if ((*(_BYTE *)(v0 + 56) & 1) != 0)
  {
    uint64_t v22 = *(void *)(v0 + 64);
    uint64_t v23 = *(void *)(v0 + 72);
    *uint64_t v3 = v22;
    v3[1] = v23;
    sub_100008324((uint64_t)v3, v14);
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v3, 0LL, 1LL, v14);
    sub_1000083B0();
    sub_1000307B8( (uint64_t)v3,  0xD000000000000010LL,  0x800000010006D600LL,  v24,  v25,  v26,  v27,  v28,  v29,  v30,  v31,  *((uint64_t *)&v31 + 1),  v32,  *((uint64_t *)&v32 + 1),  v33,  *((uint64_t *)&v33 + 1),  v34[0],  v34[1],  v35,  *((uint64_t *)&v35 + 1));
  }

  sub_100008348();
}

uint64_t sub_100007480()
{
  uint64_t v0 = 960051513LL;
  id v1 = [(id)objc_opt_self(NSBundle) mainBundle];
  uint64_t v2 = sub_100008238(v1);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_10004F4C4(0x656C646E75424643LL, 0xEF6E6F6973726556LL, v2, &v6);
    swift_bridgeObjectRelease(v3);
    if (v7)
    {
    }

    else
    {
      sub_1000082AC((uint64_t)&v6);
    }
  }

  return v0;
}

void sub_100007550(uint64_t *a1@<X8>)
{
  id v2 = (id)MobileGestalt_get_current_device();
  if (!v2)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v3 = v2;
  id v4 = (id)MobileGestalt_copy_deviceName_obj();
  if (!v4)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v8 = v7;

  id v9 = (id)MobileGestalt_copy_marketingProductName_obj(v3);
  if (!v9)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v10 = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v13 = v12;

  id v14 = (id)MobileGestalt_copy_productType_obj(v3);
  if (!v14)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  int v15 = v14;
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  uint64_t v18 = v17;

  id v19 = (id)MobileGestalt_copy_productVersion_obj(v3);
  if (!v19)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  size_t v20 = v19;
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  uint64_t v42 = v22;
  uint64_t v43 = v21;

  id v23 = (id)MobileGestalt_copy_supplementalBuildVersion_obj(v3);
  if (!v23)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v24 = v23;
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  uint64_t v38 = v26;
  uint64_t v39 = v25;

  if (qword_10008A080 != -1) {
    swift_once(&qword_10008A080, sub_10004D6A0);
  }
  uint64_t v40 = v18;
  uint64_t v41 = v16;
  uint64_t v27 = v13;
  uint64_t v28 = v11;
  if (byte_1000933D8 != 1)
  {
    uint64_t v31 = v8;
    uint64_t v32 = 0LL;
    unint64_t v34 = 0xE000000000000000LL;
    goto LABEL_13;
  }

  id v29 = (id)MobileGestalt_copy_serialNumber_obj(v3);
  if (v29)
  {
    uint64_t v30 = v29;
    uint64_t v31 = v8;
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    unint64_t v34 = v33;

LABEL_13:
    uint64_t v35 = sub_100007480();
    uint64_t v37 = v36;

    *a1 = v6;
    a1[1] = v31;
    a1[2] = v28;
    a1[3] = v27;
    a1[4] = v41;
    a1[5] = v40;
    a1[6] = v43;
    a1[7] = v42;
    a1[8] = v39;
    a1[9] = v38;
    a1[10] = v35;
    a1[11] = v37;
    a1[12] = v32;
    a1[13] = v34;
    return;
  }

LABEL_20:
  __break(1u);
}

  uint64_t v38 = 0LL;
  uint64_t v39 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v35._object = (void *)0x800000010006D820LL;
  v35._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v35);
  _print_unlocked<A, B>(_:_:)( &v41,  &v38,  &unk_100082AD8,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v36._countAndFlagsBits = 39LL;
  v36._object = (void *)0xE100000000000000LL;
  String.append(_:)(v36);
  unint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v38,  v39,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

  uint64_t v56 = 0LL;
  uint64_t v57 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v46._object = (void *)0x800000010006D820LL;
  v46._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v46);
  _print_unlocked<A, B>(_:_:)( &v58,  &v56,  &type metadata for String,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v47._countAndFlagsBits = 39LL;
  v47._object = (void *)0xE100000000000000LL;
  String.append(_:)(v47);
  unint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v56,  v57,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  swift_bridgeObjectRelease(v11);
  if (((v9 >> 9) & 1) != 0)
  {
LABEL_11:
    sub_100006BBC();
    uint64_t v13 = v100;
    if (((v9 >> 10) & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }

    uint64_t v7 = (v12 - 1) & v12;
  }

  uint64_t v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release(v2);
    return v18;
  }

  uint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    uint64_t v3 = v13;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    uint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }

      uint64_t v40 = (v49 - 1) & v49;
      v106 = v50;
      uint64_t v47 = __clz(__rbit64(v49)) + (v50 << 6);
LABEL_21:
      uint64_t v52 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v47);
      unint64_t v54 = *v52;
      uint64_t v53 = v52[1];
      uint64_t v55 = v32[2];
      v107 = v54;
      if (v55)
      {
        sub_1000100D0(v53);
        uint64_t v56 = sub_100041BBC(v54);
        uint64_t v45 = v105;
        if ((v57 & 1) != 0)
        {
          sub_10001FD14(v32[7] + *(void *)(v43 + 72) * v56, (uint64_t)v105);
          v58 = (uint64_t)v45;
          uint64_t v59 = 0LL;
        }

        else
        {
          v58 = (uint64_t)v105;
          uint64_t v59 = 1LL;
        }

        _s10RTCUtility9XPCObjectOwst_0(v58, v59, 1LL, v42);
        sub_100006BFC();
        v44 = (uint64_t)v104;
      }

      else
      {
        sub_100041D78((uint64_t)v45);
        sub_10001015C();
      }

      if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v45, 1LL, v42) == 1)
      {
        sub_10001531C((uint64_t)v45, &qword_10008A800);
      }

      else
      {
        if (!swift_getEnumCaseMultiPayload(v45, v42))
        {
          v84[0] = v6;
          v76 = *v45;
          v77 = v45[1];
          v78 = v91;
          static String.Encoding.utf8.getter(v60);
          String.data(using:allowLossyConversion:)(v78, 0LL, v76, v77);
          v80 = v79;
          swift_bridgeObjectRelease(v77);
          (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v78, v86);
          if (v80 >> 60 == 15) {
            v81 = 0xC000000000000000LL;
          }
          else {
            v81 = v80;
          }
          sub_1000069B0( (unint64_t *)&unk_10008C560,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
          dispatch thunk of HashFunction.init()(v94, v82);
          __asm { BR              X9 }
        }

        sub_10001FDE4((uint64_t)v45);
      }

      v61 = v107;
      if (v32[2])
      {
        sub_10001015C();
        v62 = sub_100041BBC(v61);
        if ((v63 & 1) != 0)
        {
          v44 = (uint64_t)v104;
          v62 = sub_100041E44(v32[7] + *(void *)(v43 + 72) * v62);
          v64 = 0LL;
        }

        else
        {
          v64 = 1LL;
          v44 = (uint64_t)v104;
        }

        sub_100041D18(v62, v64);
        sub_100006BFC();
        if (_s10RTCUtility9XPCObjectOwet_0(v44, 1LL, v42) != 1)
        {
          sub_10001531C(v44, &qword_10008A800);
          sub_10001A9B8();
          v65 = sub_100041BBC(v61);
          v67 = v66;
          v68 = sub_10001A9B0();
          if ((v67 & 1) != 0)
          {
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v32);
            v108 = v32;
            v70 = v6;
            v71 = v32[3];
            sub_10000534C((uint64_t *)&unk_10008B920);
            v72 = v87;
            v73 = v71;
            uint64_t v6 = v70;
            _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v73);
            v74 = v72;
            uint64_t v32 = v108;
            sub_100041C88(v108[6] + 16 * v65);
            sub_10001FDA0(v32[7] + *(void *)(v99 + 72) * v65, v72);
            uint64_t v42 = v100;
            _NativeDictionary._delete(at:)(v65, v32);
            v68 = sub_1000370C0();
            v75 = 0LL;
          }

          else
          {
            v75 = 1LL;
            uint64_t v42 = v100;
            v74 = v87;
          }

          sub_100041D18(v68, v75);
          sub_10001531C(v74, &qword_10008A800);
          sub_100006BFC();
          uint64_t v43 = v99;
          v44 = (uint64_t)v104;
          uint64_t v41 = v106;
          goto LABEL_5;
        }
      }

      else
      {
        sub_100041D78(v44);
      }

      sub_100006BFC();
      sub_10001531C(v44, &qword_10008A800);
      uint64_t v45 = v105;
      uint64_t v41 = v106;
      if (v40) {
        goto LABEL_6;
      }
    }

    sub_100041EAC();
    unint64_t v33 = v36 + (v30 << 6);
LABEL_21:
    uint64_t v37 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v33);
    uint64_t v39 = *v37;
    uint64_t v38 = v37[1];
    uint64_t v40 = v23[2];
    sub_1000083B8();
    if (v40 && (uint64_t v41 = sub_100041B00(), (v42 & 1) != 0))
    {
      sub_100041F38(v23[7] + *(void *)(v31 + 72) * v41);
      uint64_t v43 = sub_100041DC8();
      _s10RTCUtility9XPCObjectOwst_0(v43, v44, v45, v28);
      sub_100006AF0();
      sub_10001531C(v14, &qword_10008A800);
    }

    else
    {
      uint64_t v46 = sub_100041DB8();
      _s10RTCUtility9XPCObjectOwst_0(v46, v47, v48, v28);
      sub_10001531C(v14, &qword_10008A800);
      sub_10001FD14(v72, v73);
      v70 = sub_1000370D8();
      uint64_t v49 = sub_100041B00();
      uint64_t v51 = v23[2];
      uint64_t v52 = (v50 & 1) == 0;
      uint64_t v53 = v51 + v52;
      if (__OFADD__(v51, v52)) {
        goto LABEL_37;
      }
      unint64_t v54 = v49;
      uint64_t v31 = v50;
      sub_10000534C((uint64_t *)&unk_10008B920);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v70, v53))
      {
        uint64_t v55 = sub_100041B00();
        if ((v31 & 1) != (v56 & 1)) {
          goto LABEL_39;
        }
        unint64_t v54 = v55;
      }

      if ((v31 & 1) != 0)
      {
        uint64_t v57 = sub_100041E00();
        sub_100041784(v57, v58);
      }

      else
      {
        v23[(v54 >> 6) + 8] |= 1LL << v54;
        uint64_t v59 = (void *)(v23[6] + 16 * v54);
        *uint64_t v59 = v39;
        v59[1] = v38;
        id v60 = sub_100041E00();
        sub_10001FDA0(v60, v61);
        v62 = v23[2];
        v63 = __OFADD__(v62, 1LL);
        v64 = v62 + 1;
        if (v63) {
          goto LABEL_38;
        }
        v23[2] = v64;
        sub_1000083B8();
      }

      sub_100006AF0();
      sub_1000370C0();
      uint64_t v28 = v67;
      uint64_t v8 = v68;
    }
  }

  uint64_t v35 = v34 + 3;
  if (v35 >= v75)
  {
LABEL_33:
    swift_release(v8);
    sub_10001FDE4(v72);
    v65 = v69;
    sub_1000083B0();
    sub_1000083D4();
    *(void *)(v65 + 16) = v23;
    sub_10000FFD8();
    goto LABEL_34;
  }

  if (*(void *)(v74 + 8 * v35))
  {
    uint64_t v30 = v35;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v30 = v35 + 1;
    if (__OFADD__(v35, 1LL)) {
      break;
    }
    if (v30 >= v75) {
      goto LABEL_33;
    }
    ++v35;
    if (*(void *)(v74 + 8 * v30)) {
      goto LABEL_20;
    }
  }

    uint64_t v6 = (v11 - 1) & v11;
  }

  uint64_t v12 = v10 + 4;
  if (v12 >= v7) {
    return swift_release(v1);
  }
  uint64_t v11 = *(void *)(v3 + 8 * v12);
  if (v11)
  {
    id v2 = v12;
    goto LABEL_20;
  }

  while (1)
  {
    id v2 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v2 >= v7) {
      return swift_release(v1);
    }
    uint64_t v11 = *(void *)(v3 + 8 * v2);
    ++v12;
    if (v11) {
      goto LABEL_20;
    }
  }

      uint64_t v12 = (v18 - 1) & v18;
    }
  }

  sub_100010254();
  *id v2 = v6;
}

    uint64_t v11 = (v17 - 1) & v17;
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v12)
  {
LABEL_32:
    sub_100010254();
    id v2 = v26;
    goto LABEL_34;
  }

  uint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
    uint64_t v7 = v18;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v7 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_32;
    }
    uint64_t v17 = *(void *)(v8 + 8 * v7);
    ++v18;
    if (v17) {
      goto LABEL_20;
    }
  }

void *sub_100007744()
{
  return memcpy(&qword_10008A790, v1, 0x70uLL);
}

uint64_t sub_100007778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 80) = a3;
  *(void *)(v4 + 88) = a4;
  *(void *)(v4 + 64) = a1;
  *(void *)(v4 + 72) = a2;
  *(_OWORD *)(v4 + 96) = *(_OWORD *)a2;
  *(void *)(v4 + 112) = *(void *)(a2 + 16);
  *(_OWORD *)(v4 + 120) = *(_OWORD *)(a2 + 24);
  *(void *)(v4 + 136) = *(void *)(a2 + 40);
  uint64_t v5 = type metadata accessor for Date(0LL);
  *(void *)(v4 + 144) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v4 + 152) = v6;
  *(void *)(v4 + 160) = sub_100008360(v6);
  uint64_t v7 = type metadata accessor for TimeZone(0LL);
  *(void *)(v4 + 168) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v4 + 176) = v8;
  *(void *)(v4 + 184) = sub_100008360(v8);
  return swift_task_switch(sub_10000780C, 0LL, 0LL);
}

uint64_t sub_10000780C()
{
  uint64_t v1 = *(void *)(v0 + 88);
  id v2 = *(_OWORD **)(v0 + 72);
  *(_OWORD *)(v0 + 16) = *v2;
  *(_OWORD *)(v0 + 32) = v2[1];
  *(_OWORD *)(v0 + 48) = v2[2];
  sub_1000080FC(v0 + 16);
  sub_1000080FC(v0 + 32);
  sub_1000080FC(v0 + 48);
  uint64_t v3 = qword_10008A080;
  swift_bridgeObjectRetain(v1);
  if (v3 != -1) {
    swift_once(&qword_10008A080, sub_10004D6A0);
  }
  if (byte_1000933D8 == 1)
  {
    if (qword_10008A098 != -1) {
      swift_once(&qword_10008A098, sub_10004D7A8);
    }
    uint64_t v4 = 5LL;
    if (!byte_1000933E9) {
      uint64_t v4 = 1LL;
    }
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  *(void *)(v0 + 192) = v4;
  uint64_t v6 = *(void *)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v8 = *(void *)(v0 + 160);
  uint64_t v7 = *(void *)(v0 + 168);
  uint64_t v9 = *(void *)(v0 + 144);
  uint64_t v10 = *(void *)(v0 + 152);
  uint64_t v11 = static TimeZone.current.getter();
  Date.init()(v11);
  *(void *)(v0 + 200) = TimeZone.secondsFromGMT(for:)(v8);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v13 = qword_1000933C8;
  *(void *)(v0 + 208) = qword_1000933C8;
  if (v13)
  {
    uint64_t v14 = dword_10008B824;
    swift_retain(v13);
    int v15 = (void *)swift_task_alloc(v14);
    *(void *)(v0 + 216) = v15;
    *int v15 = v0;
    v15[1] = sub_100007998;
    return sub_10002FD00(*(void *)(v0 + 72));
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100007998(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v8 = *(void *)(*v3 + 208);
  uint64_t v7 = *(void *)(*v3 + 216);
  *(void *)(*v3 + 224) = v2;
  swift_task_dealloc(v7);
  swift_release(v8);
  if (v2)
  {
    sub_1000082EC(v6 + 16);
    sub_1000082EC(v6 + 32);
    sub_1000082EC(v6 + 48);
    sub_1000083D4();
    uint64_t v9 = sub_100007B70;
  }

  else
  {
    *(void *)(v6 + 232) = a2;
    *(void *)(v6 + 240) = a1;
    uint64_t v9 = sub_100007A48;
  }

  return swift_task_switch(v9, 0LL, 0LL);
}

uint64_t sub_100007A48()
{
  uint64_t v1 = *(void *)(v0 + 232);
  __int128 v12 = *(_OWORD *)(v0 + 192);
  uint64_t v9 = *(void *)(v0 + 184);
  uint64_t v10 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v14 = *(void *)(v0 + 128);
  uint64_t v15 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v13 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v11 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 64);
  sub_1000083B8();
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v3);
  sub_1000083B0();
  sub_1000082EC(v0 + 16);
  sub_1000082EC(v0 + 32);
  sub_1000082EC(v0 + 48);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v4);
  sub_1000083D4();
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  *(_OWORD *)uint64_t v6 = v12;
  *(void *)(v6 + 16) = v8;
  *(void *)(v6 + 24) = v5;
  *(void *)(v6 + 32) = v15;
  *(void *)(v6 + 40) = v1;
  *(void *)(v6 + 48) = v11;
  *(void *)(v6 + 56) = v4;
  *(void *)(v6 + 64) = v13;
  *(void *)(v6 + 72) = v3;
  *(void *)(v6 + 80) = v14;
  *(void *)(v6 + 88) = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100007B70()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 104);
  swift_bridgeObjectRelease(*(void *)(v0 + 88));
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  sub_1000083D4();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100007BEC()
{
  uint64_t v2 = sub_10000534C(&qword_10008A800);
  __chkstk_darwin(v2);
  uint64_t v55 = (void **)((char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000534C(&qword_10008A808);
  uint64_t v4 = sub_10000534C(&qword_10008A810);
  sub_10000839C();
  uint64_t v7 = v6 & ~v5;
  uint64_t v8 = sub_1000083DC(v7 - v1 + 16 * v1, v5);
  *(_OWORD *)(v8 + 16) = xmmword_1000695B0;
  uint64_t v57 = v8;
  uint64_t v9 = (void *)(v8 + v7);
  uint64_t v10 = (_OWORD *)(v8 + v7 + *(int *)(v4 + 48));
  void *v9 = 0x7265646E65735FLL;
  v9[1] = 0xE700000000000000LL;
  __int128 v11 = *(_OWORD *)(v0 + 64);
  __int128 v61 = *(_OWORD *)(v0 + 48);
  __int128 v62 = v11;
  __int128 v63 = *(_OWORD *)(v0 + 80);
  __int128 v66 = v61;
  *uint64_t v10 = v61;
  uint64_t v12 = sub_1000083F4();
  sub_100008318((uint64_t)v10);
  uint64_t v13 = (__n128 *)sub_10000833C((uint64_t)v9 + v1);
  sub_1000083C0(v13, v14);
  sub_100008318(v15);
  uint64_t v16 = (char *)v9 + 2 * v1;
  uint64_t v17 = &v16[*(int *)(v4 + 48)];
  strcpy(v16, "_serviceName");
  v16[13] = 0;
  *((_WORD *)v16 + 7) = -5120;
  __int128 v64 = v63;
  *(_OWORD *)uint64_t v17 = v63;
  sub_100008318((uint64_t)v17);
  uint64_t v18 = (void *)((char *)v9 + 3 * v1);
  id v19 = (_OWORD *)((char *)v18 + *(int *)(v4 + 48));
  *uint64_t v18 = 0x6E6F69737365735FLL;
  v18[1] = 0xEA00000000004449LL;
  __int128 v60 = *(_OWORD *)(v0 + 16);
  _OWORD *v19 = v60;
  sub_100008318((uint64_t)v19);
  size_t v20 = (void *)sub_10000833C((uint64_t)v9 + 4 * v1);
  *uint64_t v21 = 0x616E7265746E695FLL;
  v21[1] = 0xE90000000000006CLL;
  sub_100008370(v20, *(void *)v0);
  uint64_t v22 = (void *)sub_10000833C((uint64_t)v9 + 5 * v1);
  *id v23 = 0x6E6F7A656D69745FLL;
  v23[1] = 0xEF74657366664F65LL;
  sub_100008370(v22, *(void *)(v0 + 8));
  uint64_t v24 = (_OWORD *)sub_10000832C(6LL);
  *uint64_t v25 = 0x6449746E65696C63LL;
  v25[1] = 0xE800000000000000LL;
  __int128 v59 = *(_OWORD *)(v0 + 32);
  *uint64_t v24 = v59;
  sub_100008318((uint64_t)v24);
  uint64_t v26 = (char *)&v9[v1] - v1;
  uint64_t v27 = &v26[*(int *)(v4 + 48)];
  strcpy(v26, "_productFamily");
  v26[15] = -18;
  sub_1000080FC((uint64_t)&v66);
  sub_1000080FC((uint64_t)v65);
  sub_1000080FC((uint64_t)&v64);
  sub_1000080FC((uint64_t)&v60);
  sub_1000080FC((uint64_t)&v59);
  if (qword_100089FC0 != -1) {
    swift_once(&qword_100089FC0, sub_100007744);
  }
  uint64_t v28 = *(void *)algn_10008A798;
  uint64_t v56 = *(void *)algn_10008A798;
  *(void *)uint64_t v27 = qword_10008A790;
  *((void *)v27 + 1) = v28;
  sub_100008318((uint64_t)v27);
  id v29 = &v9[v1];
  uint64_t v30 = (void *)((char *)v29 + *(int *)(v4 + 48));
  void *v29 = 0x656D614E736F5FLL;
  v29[1] = 0xE700000000000000LL;
  uint64_t v31 = unk_10008A7A8;
  *uint64_t v30 = qword_10008A7A0;
  v30[1] = v31;
  sub_100008318((uint64_t)v30);
  uint64_t v32 = (void *)sub_10000833C((uint64_t)v9 + 9 * v1);
  strcpy(v33, "_productModel");
  *((_WORD *)v33 + 7) = -4864;
  uint64_t v34 = unk_10008A7B8;
  *uint64_t v32 = qword_10008A7B0;
  v32[1] = v34;
  sub_100008318((uint64_t)v32);
  uint64_t v35 = (void *)sub_10000832C(10LL);
  *uint64_t v36 = 0x6973726556736F5FLL;
  v36[1] = 0xEA00000000006E6FLL;
  uint64_t v37 = unk_10008A7C8;
  *uint64_t v35 = qword_10008A7C0;
  v35[1] = v37;
  sub_100008318((uint64_t)v35);
  uint64_t v38 = (void *)sub_10000832C(11LL);
  *uint64_t v39 = 0x646C6975625FLL;
  v39[1] = 0xE600000000000000LL;
  uint64_t v40 = unk_10008A7D8;
  *uint64_t v38 = qword_10008A7D0;
  v38[1] = v40;
  sub_100008318((uint64_t)v38);
  uint64_t v41 = (void *)sub_10000832C(12LL);
  *uint64_t v42 = 0x5674726F7065725FLL;
  v42[1] = 0xEB00000000737265LL;
  uint64_t v43 = unk_10008A7E8;
  void *v41 = qword_10008A7E0;
  v41[1] = v43;
  sub_100008318((uint64_t)v41);
  v44 = (void *)((char *)v9 + 13 * v1);
  uint64_t v45 = (BOOL *)v44 + *(int *)(v4 + 48);
  sub_100008380(v44);
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRetain(v31);
  sub_1000083B0();
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v43);
  *uint64_t v45 = sub_10004D618();
  sub_100008390((uint64_t)v45);
  uint64_t v46 = (void *)((char *)v9 + 14 * v1);
  uint64_t v47 = (char *)v46 + *(int *)(v4 + 48);
  *uint64_t v46 = 0xD000000000000016LL;
  v46[1] = 0x800000010006D580LL;
  *uint64_t v47 = 0;
  sub_100008390((uint64_t)v47);
  uint64_t v58 = Dictionary.init(dictionaryLiteral:)(v57, &type metadata for String, v12, &protocol witness table for String);
  if (qword_10008A080 != -1) {
    swift_once(&qword_10008A080, sub_10004D6A0);
  }
  if (byte_1000933D8 == 1)
  {
    uint64_t v48 = *(void *)algn_10008A7F8;
    uint64_t v49 = v55;
    *uint64_t v55 = qword_10008A7F0;
    v49[1] = v48;
    sub_100008318((uint64_t)v49);
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v49, 0LL, 1LL, v12);
    sub_1000083B8();
    sub_1000307B8( (uint64_t)v49,  0x754E6C6169726553LL,  0xE90000000000006DLL,  v50,  v51,  v52,  v53,  v54,  (uint64_t)v55,  v56,  v57,  v58,  v59,  *((uint64_t *)&v59 + 1),  v60,  *((uint64_t *)&v60 + 1),  v61,  *((uint64_t *)&v61 + 1),  v62,  *((uint64_t *)&v62 + 1));
  }

  sub_100008348();
}

uint64_t sub_1000080FC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100008124(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_10000534C(&qword_10008A810);
  sub_10000839C();
  uint64_t v10 = v9 & ~v8;
  uint64_t v11 = sub_1000083DC(v10 + 2 * v3, v8);
  *(_OWORD *)(v11 + 16) = xmmword_100069590;
  uint64_t v12 = (void *)(v11 + v10);
  uint64_t v13 = (void *)(v11 + v10 + *(int *)(v7 + 48));
  *uint64_t v12 = 0x67616265726F7453LL;
  v12[1] = 0xEF6E6F6973726556LL;
  *uint64_t v13 = a2;
  v13[1] = a3;
  uint64_t v14 = sub_1000083F4();
  sub_100008324((uint64_t)v13, v14);
  uint64_t v15 = (_BYTE *)sub_1000083E8((uint64_t)v12 + v3);
  *uint64_t v16 = 0xD000000000000013LL;
  v16[1] = 0x800000010006CD60LL;
  *uint64_t v15 = a1;
  swift_storeEnumTagMultiPayload(v15, v14, 4LL);
  sub_1000083B8();
  return Dictionary.init(dictionaryLiteral:)(v11, &type metadata for String, v14, &protocol witness table for String);
}

uint64_t sub_100008238(void *a1)
{
  id v2 = [a1 infoDictionary];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v2,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  return v3;
}

uint64_t sub_1000082AC(uint64_t a1)
{
  uint64_t v2 = sub_10000534C(&qword_10008A818);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000082EC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100008318(uint64_t a1)
{
  return swift_storeEnumTagMultiPayload(a1, v1, 0LL);
}

uint64_t sub_100008324(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 0LL);
}

uint64_t sub_10000832C@<X0>(uint64_t a1@<X8>)
{
  return v2 + v3 * a1 + *(int *)(v1 + 48);
}

uint64_t sub_10000833C@<X0>(uint64_t a1@<X8>)
{
  return a1 + *(int *)(v1 + 48);
}

  ;
}

uint64_t sub_100008360@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_100008370@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = a2;
  return swift_storeEnumTagMultiPayload(a1, v2, 1LL);
}

void sub_100008380(void *a1@<X8>)
{
  *a1 = v1;
  a1[1] = (v2 - 32) | 0x8000000000000000LL;
}

uint64_t sub_100008390(uint64_t a1)
{
  return swift_storeEnumTagMultiPayload(a1, v1, 4LL);
}

  ;
}

uint64_t sub_1000083B0()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000083B8()
{
  return swift_bridgeObjectRetain(v0);
}

__n128 sub_1000083C0@<Q0>(__n128 *a1@<X0>, void *a2@<X8>)
{
  *a2 = v2;
  a2[1] = v3;
  __n128 result = *(__n128 *)(v4 - 176);
  *(__n128 *)(v4 - 128) = result;
  *a1 = result;
  return result;
}

uint64_t sub_1000083D4()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000083DC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return swift_allocObject(v2, a1, a2 | 7);
}

uint64_t sub_1000083E8@<X0>(uint64_t a1@<X8>)
{
  return a1 + *(int *)(v1 + 48);
}

uint64_t sub_1000083F4()
{
  return type metadata accessor for EventValue(0LL);
}

uint64_t sub_1000083FC(unint64_t a1)
{
  if (a1 >= 4) {
    return 3LL;
  }
  else {
    return 0x2010003u >> (8 * a1);
  }
}

uint64_t sub_10000841C(unsigned __int8 a1)
{
  return a1 + 1LL;
}

uint64_t sub_100008428()
{
  return sub_1000308EC(*v0);
}

void sub_100008430(uint64_t a1)
{
}

uint64_t sub_100008438(uint64_t a1)
{
  return sub_100030E44(a1, *v1);
}

uint64_t sub_100008440@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000083FC(*a1);
  *a2 = result;
  return result;
}

void sub_100008468(uint64_t *a1@<X8>)
{
  *a1 = sub_10000841C(*v1);
  sub_100006B44();
}

void sub_10000848C(void *a1@<X8>)
{
  *a1 = &off_1000817D8;
}

uint64_t sub_10000849C()
{
  if (qword_10008A088 != -1) {
    swift_once(&qword_10008A088, sub_10004D6C4);
  }
  id v0 = (id)qword_1000933E0;
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 integerForKey:v1];

  if (!v2) {
    goto LABEL_10;
  }
  uint64_t v3 = sub_1000087A8((unint64_t)v2);
  if (v3 == 4)
  {
    if (qword_100089FC8 != -1) {
      swift_once(&qword_100089FC8, sub_100009054);
    }
    uint64_t v4 = sub_10001030C();
    uint64_t v5 = sub_10000D34C(v4, (uint64_t)qword_100093260);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)sub_1000100B0(12LL);
      *(_DWORD *)uint64_t v8 = 134349056;
      uint64_t v20 = (uint64_t)v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v8 + 4);
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "invalid environmentType override from defaults: %{public}ld",  v8,  0xCu);
      sub_100010010((uint64_t)v8);
    }

LABEL_10:
    if (qword_10008A080 != -1) {
      swift_once(&qword_10008A080, sub_10004D6A0);
    }
    if (byte_1000933D8) {
      return 1LL;
    }
    else {
      return 3LL;
    }
  }

  uint64_t v9 = v3;
  if (qword_100089FC8 != -1) {
    swift_once(&qword_100089FC8, sub_100009054);
  }
  uint64_t v10 = sub_10001030C();
  uint64_t v11 = sub_10000D34C(v10, (uint64_t)qword_100093260);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = sub_1000100B0(22LL);
    uint64_t v15 = sub_1000100B0(32LL);
    uint64_t v20 = v15;
    *(_DWORD *)uint64_t v14 = 136446466;
    LOBYTE(v19) = v9;
    uint64_t v16 = String.init<A>(describing:)(&v19, &unk_100082AD8);
    uint64_t v19 = sub_100019964(v16, v17, &v20);
    sub_1000103BC((uint64_t)&v19, (uint64_t)&v20);
    sub_100010278();
    *(_WORD *)(v14 + 12) = 2050;
    uint64_t v19 = (uint64_t)v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v14 + 14);
    sub_100010164( (void *)&_mh_execute_header,  v12,  v13,  "overriding environmentType to %{public}s (%{public}ld) from defaults");
    swift_arrayDestroy(v15, 1LL);
    sub_100010010(v15);
    sub_100010010(v14);
  }

  return v9;
}

uint64_t sub_1000087A8(unint64_t a1)
{
  if (a1 >= 5) {
    return 4LL;
  }
  else {
    return (0x302010004uLL >> (8 * a1));
  }
}

void sub_1000087CC(char a1)
{
  uint64_t v11 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v11);
  type metadata accessor for SHA256Digest(0LL);
  sub_100010054();
  __chkstk_darwin(v3);
  sub_100010040();
  sub_1000101F8();
  __chkstk_darwin(v4);
  sub_1000102F4();
  sub_10000534C(&qword_10008A840);
  sub_100010054();
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v9 = __chkstk_darwin(v8);
  __chkstk_darwin(v9);
  sub_100006C8C();
  sub_100010054();
  __chkstk_darwin(v10);
  sub_10001002C();
  __asm { BR              X10 }

void sub_100008990()
{
  if (sub_1000100A0(v3) == 1)
  {
    __break(1u);
    JUMPOUT(0x1000089C4LL);
  }

  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(v5 - 144) + 32LL))( *(void *)(v5 - 152),  v3,  v0);
  id v8 = (id)((uint64_t (*)(uint64_t))MobileGestalt_get_current_device)(v7);
  if (v8)
  {
    id v9 = v8;
    id v10 = (id)((uint64_t (*)(void))MobileGestalt_copy_marketingProductName_obj)();
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      uint64_t v14 = v13;

      ((void (*)(void))static String.Encoding.utf8.getter)();
      String.data(using:allowLossyConversion:)(v2, 0LL, v12, v14);
      unint64_t v16 = v15;
      sub_100006CAC();
      (*(void (**)(uint64_t, void))(v1 + 8))(v2, *(void *)(v5 - 128));
      if (v16 >> 60 != 15)
      {
        sub_10000E63C( (unint64_t *)&unk_10008C560,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256);
        ((void (*)(uint64_t, uint64_t))dispatch thunk of HashFunction.init())(v4, v17);
        uint64_t v18 = (char *)&loc_100008B6C + dword_100008EB4[v16 >> 62];
        *(void *)(v5 - 208) = v9;
        __asm { BR              X10 }
      }

LABEL_9:
      __break(1u);
      JUMPOUT(0x100008EA0LL);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  goto LABEL_9;
}

  if ((v2 & 0x8000000000000000LL) != 0 || (v2 & 0x4000000000000000LL) != 0)
  {
LABEL_16:
    swift_bridgeObjectRetain(v2);
    uint64_t v18 = (xpc_object_t *)sub_10001A3AC(v17);
    swift_bridgeObjectRelease(v2);
    sub_100015A2C(v18 + 4, (size_t)v18[2], (xpc_object_t **)&v19);
    swift_bridgeObjectRelease(v2);
    swift_release(v18);
    return (xpc_object_t *)v19;
  }

  unint64_t v15 = xpc_array_create( (xpc_object_t *)((v2 & 0xFFFFFFFFFFFFFF8LL) + 32),  *(void *)((v2 & 0xFFFFFFFFFFFFFF8LL) + 0x10));
  swift_bridgeObjectRelease(v2);
  return (xpc_object_t *)v15;
}

void *sub_100008EC4(void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *(void *)(a3 + 16);
  if (!v14) {
    return &_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(a3);
  uint64_t v5 = 0LL;
  uint64_t v6 = &_swiftEmptyArrayStorage;
  while (1)
  {
    char v18 = *(_BYTE *)(a3 + v5 + 32);
    a1(&v16, &v18);
    if (v3) {
      break;
    }
    uint64_t v7 = v17;
    if (v17)
    {
      char v8 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
      {
        sub_100004D94();
        uint64_t v6 = v11;
      }

      unint64_t v9 = v6[2];
      if (v9 >= v6[3] >> 1)
      {
        sub_100004D94();
        uint64_t v6 = v12;
      }

      v6[2] = v9 + 1;
      id v10 = (char *)&v6[2 * v9];
      v10[32] = v8;
      *((void *)v10 + 5) = v7;
    }

    if (v14 == ++v5)
    {
      swift_bridgeObjectRelease(a3);
      return v6;
    }
  }

  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(a3);
  return v6;
}

uint64_t sub_100009014(uint64_t a1)
{
  return sub_100035250(a1, *v1);
}

uint64_t sub_10000901C@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000087A8(*a1);
  *a2 = result;
  return result;
}

void sub_100009044(void *a1@<X8>)
{
  *a1 = &off_100081800;
}

uint64_t sub_100009054()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000D940(v0, qword_100093260);
  sub_10000D34C(v0, (uint64_t)qword_100093260);
  return Logger.init(subsystem:category:)( 0xD000000000000017LL,  0x800000010006D6D0LL,  0x67616265726F7473LL,  0xE800000000000000LL);
}

uint64_t sub_1000090C8()
{
  return 0LL;
}

uint64_t sub_1000090D4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100009108 + 4 * byte_100069670[a1]))( 0x6E6F6973726576LL,  0xE700000000000000LL);
}

uint64_t sub_100009108()
{
  return 0x6D706F6C65766564LL;
}

uint64_t sub_100009128()
{
  return 0x6E695F656C707061LL;
}

uint64_t sub_10000914C()
{
  return 1684366707LL;
}

uint64_t sub_10000915C()
{
  return 0x657361656C6572LL;
}

uint64_t sub_100009170()
{
  return 0x5F68736572666572LL;
}

uint64_t sub_100009194()
{
  return 0x765F646572616873LL;
}

uint64_t sub_1000091B8()
{
  return 7LL;
}

uint64_t sub_1000091C0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6E6F6973726576LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v5 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 4LL;
  }

  if (a1 == 0x5F68736572666572LL && a2 == 0xED0000656C637963LL)
  {
    unint64_t v9 = 0xED0000656C637963LL;
    goto LABEL_17;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5F68736572666572LL, 0xED0000656C637963LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
LABEL_17:
    swift_bridgeObjectRelease(v9);
    return 5LL;
  }

  if (a1 == 0x765F646572616873LL && a2 == 0xEC00000073656C61LL)
  {
    unint64_t v11 = 0xEC00000073656C61LL;
  }

  else
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x765F646572616873LL, 0xEC00000073656C61LL, a1, a2, 0LL) & 1) == 0) {
      __asm { BR              X8 }
    }

    unint64_t v11 = a2;
  }

  swift_bridgeObjectRelease(v11);
  return 6LL;
}

uint64_t sub_100009470()
{
  return sub_1000090D4(*v0);
}

uint64_t sub_100009478@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000091C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10000949C()
{
  return sub_1000090C8();
}

uint64_t sub_1000094B8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_1000091B8();
  *a1 = result;
  return result;
}

uint64_t sub_1000094DC(uint64_t a1)
{
  unint64_t v2 = sub_10000F7B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100009504(uint64_t a1)
{
  unint64_t v2 = sub_10000F7B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10000952C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000534C(&qword_10008A910);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100005F30(a1, v9);
  unint64_t v11 = sub_10000F7B0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for Storebag._StorebagRoot.CodingKeys,  &type metadata for Storebag._StorebagRoot.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100005F54(a1);
  }
  char v37 = 4;
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)(&v37, v5);
  uint64_t v15 = v14;
  char v36 = 5;
  swift_bridgeObjectRetain(v14);
  uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v36, v5);
  uint64_t v29 = v13;
  uint64_t v16 = sub_10000534C(&qword_10008A920);
  char v35 = 6;
  sub_10000F87C(&qword_10008A928, &qword_10008A920);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v16, &v35, v5, v16, v17);
  uint64_t v27 = v34;
  swift_bridgeObjectRetain(v34);
  uint64_t v18 = KeyedDecodingContainer.allKeys.getter(v5);
  uint64_t v19 = v18;
  if (*(void *)(v18 + 16))
  {
    v26[0] = a2;
    v26[1] = v5;
    v26[2] = v15;
    swift_bridgeObjectRetain(v18);
    unint64_t v33 = &_swiftEmptyArrayStorage;
    uint64_t v30 = v19;
    uint64_t v31 = v6;
    __asm { BR              X8 }
  }

  uint64_t v20 = swift_bridgeObjectRelease(v18);
  unint64_t v33 = v26;
  __chkstk_darwin(v20);
  v26[-2] = v8;
  uint64_t v21 = sub_100008EC4( (void (*)(uint64_t *__return_ptr, char *))sub_10000F828,  (uint64_t)&v26[-4],  (uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(&_swiftEmptyArrayStorage);
  sub_100009C58((uint64_t)v21, (uint64_t *)&unk_10008C5C0, (void (*)(uint64_t, uint64_t, void **))sub_10000DAF4);
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain(v23);
  sub_100005F54(a1);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = v27;
  swift_bridgeObjectRelease(v27);
  uint64_t result = swift_bridgeObjectRelease(v15);
  *(void *)a2 = v29;
  *(void *)(a2 + 8) = v15;
  char v25 = BYTE4(v28);
  *(_DWORD *)(a2 + 16) = v28;
  *(_BYTE *)(a2 + 20) = v25 & 1;
  *(void *)(a2 + 24) = v24;
  *(void *)(a2 + 32) = v23;
  return result;
}

uint64_t sub_100009B44@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  char v11 = *a1;
  uint64_t v5 = sub_10000534C(&qword_10008A910);
  unint64_t v6 = sub_10000F840();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v11, v5, &type metadata for Data, v6);
  if (v2)
  {
    swift_errorRelease(v2);
    uint64_t v7 = sub_10000534C(&qword_10008A948);
    char v11 = v4;
    sub_10000F87C(&qword_10008A950, &qword_10008A948);
    uint64_t result = KeyedDecodingContainer.decode<A>(_:forKey:)(v7, &v11, v5, v7, v8);
    uint64_t v10 = v12;
    *a2 = v4;
    a2[1] = v10;
  }

  else
  {
    uint64_t result = sub_100004C44(v12, v13);
    *a2 = 0LL;
    a2[1] = 0LL;
  }

  return result;
}

void sub_100009C44(uint64_t a1)
{
}

void sub_100009C58(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, void **))
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    sub_10000534C(a2);
    unint64_t v6 = (void *)static _DictionaryStorage.allocate(capacity:)(v5);
  }

  else
  {
    unint64_t v6 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v8 = v6;
  uint64_t v7 = swift_bridgeObjectRetain(a1);
  a3(v7, 1LL, &v8);
  sub_100006AF0();
  sub_100010234();
}

double sub_100009CF0@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    double result = *(double *)v6;
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }

  return result;
}

unint64_t sub_100009D34(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    if (a1) {
      return 0xD000000000000025LL;
    }
    else {
      return 0xD00000000000001DLL;
    }
  }

  else
  {
    _StringGuts.grow(_:)(19LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    String.append(_:)(v2);
    sub_100006AF0();
    return 0xD000000000000011LL;
  }

unint64_t sub_100009E04()
{
  return sub_100009D34(*(void *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t sub_100009E10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v9 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  uint64_t v10 = PropertyListDecoder.init()();
  uint64_t v44 = 100LL;
  unint64_t v11 = sub_10000E7BC();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:format:)( v39,  &type metadata for Storebag._StorebagRoot,  a1,  a2,  &v44,  &type metadata for Storebag._StorebagRoot,  v11);
  if (v4)
  {
    sub_1000101A0();
    return swift_release(v10);
  }

  else
  {
    uint64_t v37 = v39[1];
    uint64_t v38 = v39[0];
    int v13 = v40;
    uint64_t v14 = v41;
    uint64_t v15 = v42;
    uint64_t v34 = v43;
    sub_10004F510(a3, v43);
    if (!v16) {
      uint64_t v16 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &unk_100083900,  &protocol witness table for String);
    }
    uint64_t v24 = v16;
    if ((_DWORD)v14) {
      int v13 = 86400;
    }
    if (v15)
    {
      uint64_t v25 = sub_100010270();
      sub_1000103A8(v25, v26, v27, v28, v29, v30, v31, v32, v34, v37);
      sub_1000101A0();
      swift_bridgeObjectRelease(v35);
      uint64_t v33 = v15;
    }

    else
    {
      sub_1000103A8(v16, v17, v18, v19, v20, v21, v22, v23, v34, v37);
      uint64_t v15 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for StorebagSharedValue,  &protocol witness table for String);
      sub_1000101A0();
      uint64_t v33 = v36;
    }

    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v14);
    uint64_t result = swift_release(v10);
    *(void *)a4 = v24;
    *(_DWORD *)(a4 + 8) = v13;
    *(void *)(a4 + 16) = v38;
    *(void *)(a4 + 24) = v14;
    *(void *)(a4 + 32) = v15;
  }

  return result;
}

void sub_100009FB0(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  v362 = a2;
  uint64_t v366 = type metadata accessor for SessionConfiguration.Backend(0LL);
  sub_100010054();
  __chkstk_darwin(v5);
  sub_10001002C();
  v365 = v6;
  uint64_t v361 = type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
  sub_100010054();
  __chkstk_darwin(v7);
  sub_10001002C();
  v360 = v8;
  sub_10000534C(&qword_10008A840);
  sub_100010054();
  __chkstk_darwin(v9);
  sub_10001002C();
  uint64_t v374 = v10;
  uint64_t v377 = sub_100006C8C();
  uint64_t v364 = *(void *)(v377 - 8);
  sub_100010054();
  __chkstk_darwin(v11);
  sub_100010040();
  uint64_t v363 = v12;
  sub_1000101F8();
  __chkstk_darwin(v13);
  sub_1000102F4();
  uint64_t v367 = v14;
  uint64_t v15 = type metadata accessor for Locale(0LL);
  uint64_t v393 = *(void *)(v15 - 8);
  uint64_t v394 = v15;
  sub_100010054();
  __chkstk_darwin(v16);
  sub_100010040();
  uint64_t v376 = v17;
  sub_1000101F8();
  __chkstk_darwin(v18);
  sub_1000102F4();
  uint64_t v378 = v19;
  uint64_t v20 = sub_10001030C();
  uint64_t v397 = *(void *)(v20 - 8);
  sub_100010054();
  __chkstk_darwin(v21);
  sub_100010040();
  uint64_t v380 = v22;
  sub_1000101F8();
  __chkstk_darwin(v23);
  uint64_t v390 = (uint64_t)&v359 - v24;
  sub_1000101F8();
  __chkstk_darwin(v25);
  sub_1000102F4();
  uint64_t v370 = v26;
  uint64_t v27 = a1[4];
  sub_10001022C(a1);
  uint64_t v408 = sub_100010244(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 16));
  uint64_t v29 = v28;
  uint64_t v30 = a1[4];
  v379 = a1;
  sub_10001022C(a1);
  uint64_t v31 = (uint8_t *)sub_100010244(*(uint64_t (**)(uint64_t, uint64_t))(v30 + 24));
  v415 = (uint64_t *)v32;
  uint64_t v33 = *v2;
  uint64_t v34 = *(void *)(*v2 + 64);
  uint64_t v386 = *v2 + 64;
  uint64_t v35 = 1LL << *(_BYTE *)(v33 + 32);
  uint64_t v36 = -1LL;
  v430 = _swiftEmptyArrayStorage;
  if (v35 < 64) {
    uint64_t v36 = ~(-1LL << v35);
  }
  unint64_t v399 = v36 & v34;
  v429 = _swiftEmptyArrayStorage;
  int64_t v388 = (unint64_t)(v35 + 63) >> 6;
  v372 = &v419;
  v410 = &v431[2];
  v407 = &v431[27];
  v375 = &v431[28];
  uint64_t v381 = v33;
  swift_bridgeObjectRetain();
  int64_t v37 = 0LL;
  uint64_t v368 = 2LL;
  __int128 v373 = xmmword_100069660;
  __int128 v369 = xmmword_100069650;
  v371 = (char *)&type metadata for Any + 8;
  v389 = v2;
  uint64_t v406 = v20;
  uint64_t v409 = v29;
  v414 = v31;
LABEL_4:
  uint64_t v38 = v381;
LABEL_5:
  unint64_t v39 = v399;
  do
  {
    while (1)
    {
      if (v39)
      {
        unint64_t v40 = __clz(__rbit64(v39));
        v39 &= v39 - 1;
        unint64_t v41 = v40 | (v37 << 6);
      }

      else
      {
        int64_t v42 = v37 + 1;
        if (__OFADD__(v37, 1LL)) {
          goto LABEL_339;
        }
        if (v42 >= v388) {
          goto LABEL_333;
        }
        unint64_t v43 = *(void *)(v386 + 8 * v42);
        ++v37;
        if (!v43)
        {
          int64_t v37 = v42 + 1;
          if (v42 + 1 >= v388) {
            goto LABEL_333;
          }
          unint64_t v43 = *(void *)(v386 + 8 * v37);
          if (!v43)
          {
            int64_t v37 = v42 + 2;
            if (v42 + 2 >= v388) {
              goto LABEL_333;
            }
            unint64_t v43 = *(void *)(v386 + 8 * v37);
            if (!v43)
            {
              int64_t v44 = v42 + 3;
              if (v44 >= v388) {
                goto LABEL_333;
              }
              unint64_t v43 = *(void *)(v386 + 8 * v44);
              if (!v43)
              {
                while (1)
                {
                  int64_t v37 = v44 + 1;
                  if (__OFADD__(v44, 1LL)) {
                    goto LABEL_342;
                  }
                  if (v37 >= v388) {
                    break;
                  }
                  unint64_t v43 = *(void *)(v386 + 8 * v37);
                  ++v44;
                  if (v43) {
                    goto LABEL_21;
                  }
                }

LABEL_333:
                sub_100010278();
                sub_10001020C();
                sub_1000103A0();
                v354 = v430;
                v355 = v429;
                uint64_t v356 = v3[2];
                swift_bridgeObjectRetain();
                v357 = v362;
                void *v362 = v354;
                v357[1] = v355;
                *((_BYTE *)v357 + 16) = 0;
                v357[3] = v356;
                v357[4] = v358;
                *((_BYTE *)v357 + 40) = v368;
                return;
              }

              int64_t v37 = v44;
            }
          }
        }

LABEL_21:
        unint64_t v39 = (v43 - 1) & v43;
        unint64_t v41 = __clz(__rbit64(v43)) + (v37 << 6);
      }

      uint64_t v45 = *(void *)(v38 + 56) + 32 * v41;
      uint64_t v47 = *(void *)v45;
      uint64_t v46 = *(void *)(v45 + 8);
      uint64_t v413 = *(void *)(v45 + 16);
      int v48 = *(unsigned __int8 *)(v45 + 24);
      if (v48) {
        break;
      }
      v412 = *(os_log_s **)(v413 + 16);
      if (v412)
      {
        uint64_t v49 = (uint64_t *)(*(void *)(v38 + 48) + 16 * v41);
        uint64_t v50 = v49[1];
        uint64_t v395 = *v49;
        int64_t v396 = v37;
        uint64_t v51 = v413;
        uint64_t v411 = v413 + 32;
        uint64_t v398 = v50;
        unint64_t v399 = v39;
        swift_bridgeObjectRetain();
        uint64_t v401 = v46;
        uint64_t v402 = v47;
        sub_10000E7F8(v47, v46, v51, 0);
        sub_1000083B0();
        unint64_t v52 = 0LL;
        uint64_t v53 = v415;
        while (1)
        {
          if (v52 >= *(void *)(v413 + 16)) {
            goto LABEL_335;
          }
          memcpy(v431, (const void *)(v411 + 240 * v52), 0xE9uLL);
          sub_1000101C4((uint64_t)v431, (uint64_t)v435);
          sub_1000101C4((uint64_t)v435, (uint64_t)&v436);
          if (*((void *)&v436 + 1))
          {
            __int128 v420 = v436;
            sub_10001032C();
            sub_10001036C();
            sub_10000E944();
            uint64_t v54 = sub_1000101E0();
            uint64_t v57 = sub_100010170(v54, (uint64_t)&type metadata for String, v55, v56);
            uint64_t v58 = *(void *)(v57 + 16);
            if (!v58) {
              goto LABEL_36;
            }
            sub_100010300();
            BOOL v62 = v62 && v60 == v29;
            if (v62 || (sub_100010008(v59, v60, v61, v29) & 1) != 0) {
              goto LABEL_43;
            }
            if (v58 == 1) {
              goto LABEL_36;
            }
            sub_100010300();
            BOOL v66 = v62 && v64 == v29;
            if (v66 || (sub_100010008(v63, v64, v65, v29) & 1) != 0)
            {
LABEL_43:
              sub_10000FFD8();
            }

            else
            {
              if (v58 == 2)
              {
LABEL_36:
                sub_10000FFD8();
                sub_100010024();
                goto LABEL_205;
              }

              uint64_t v99 = v57 + 72;
              uint64_t v100 = 2LL;
              while (1)
              {
                uint64_t v101 = v100 + 1;
                if (__OFADD__(v100, 1LL)) {
                  goto LABEL_340;
                }
                sub_100010300();
                BOOL v105 = v62 && v103 == v29;
                if (v105 || (sub_100010008(v102, v103, v104, v29) & 1) != 0) {
                  break;
                }
                v99 += 16LL;
                ++v100;
                if (v101 == v58)
                {
                  sub_10000FFD8();
                  sub_100010024();
                  uint64_t v53 = v415;
                  goto LABEL_205;
                }
              }

              sub_10000FFD8();
              uint64_t v53 = v415;
            }
          }

          else
          {
            sub_10001036C();
          }

          sub_1000101C4((uint64_t)v410, (uint64_t)v434);
          sub_1000101C4((uint64_t)v434, (uint64_t)&v437);
          if (*((void *)&v437 + 1))
          {
            __int128 v420 = v437;
            sub_10001017C();
            uint64_t v67 = sub_1000101E0();
            v70 = (void *)sub_100010170(v67, (uint64_t)&type metadata for String, v68, v69);
            v71 = v70;
            uint64_t v72 = v70[2];
            if (!v72) {
              goto LABEL_36;
            }
            uint64_t v73 = v70[4];
            v74 = (void *)v70[5];
            sub_10001015C();
            LOBYTE(v73) = sub_10000C0D0(v73, v74, (uint64_t)v31, (uint64_t)v53);
            sub_100006BFC();
            if ((v73 & 1) == 0)
            {
              if (v72 == 1)
              {
LABEL_87:
                v96 = v71;
                goto LABEL_88;
              }

              uint64_t v53 = v71 + 7;
              uint64_t v97 = 1LL;
              while (1)
              {
                uint64_t v29 = v97 + 1;
                if (__OFADD__(v97, 1LL)) {
                  break;
                }
                uint64_t v98 = *(v53 - 1);
                sub_1000100D8();
                LOBYTE(v98) = sub_100010340(v98);
                sub_1000083D4();
                if ((v98 & 1) != 0) {
                  goto LABEL_47;
                }
                ++v97;
                v53 += 2;
                if (v29 == v72) {
                  goto LABEL_87;
                }
              }

              __break(1u);
LABEL_335:
              __break(1u);
LABEL_336:
              __break(1u);
LABEL_337:
              __break(1u);
              goto LABEL_338;
            }

          __break(1u);
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
      }
    }
  }

  uint64_t v13 = v100;
  if (((v9 >> 10) & 1) == 0)
  {
LABEL_12:
    if (((v9 >> 11) & 1) != 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }

    unint64_t v6 = (v12 - 1) & v12;
  }

  uint64_t v13 = v11 + 4;
  if (v13 >= v7)
  {
LABEL_24:
    swift_release(a1);
    return;
  }

  uint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
    uint64_t v8 = v13;
    goto LABEL_21;
  }

  while (1)
  {
    uint64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v8 >= v7) {
      goto LABEL_24;
    }
    uint64_t v12 = *(void *)(v3 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }

              uint64_t v29 = v33;
              goto LABEL_18;
            }
          }
        }
      }

  uint64_t v28 = *(void *)(v0 + 104);
  uint64_t v27 = *(void *)(v0 + 112);
  swift_release(v3);
  sub_10005B7D8();
  if (v27 == v28)
  {
    uint64_t v97 = *(void **)(v0 + 96);
    swift_bridgeObjectRelease(*(void *)(v0 + 88));

    sub_10005B6B0();
    sub_10001AB88();
    sub_10001AB08();
    sub_10005B63C(*(uint64_t (**)(void))(v0 + 8));
    return;
  }

  uint64_t v29 = *(void *)(v0 + 112) + 1LL;
  *(void *)(v0 + 112) = v29;
  uint64_t v30 = *(void *)(v0 + 88);
  if (v29 >= *(void *)(v30 + 16)) {
    goto LABEL_74;
  }
  uint64_t v31 = *(void *)(v30 + 24 * v29 + 48);
  uint64_t v32 = *(void *)(v31 + 16);
  uint64_t v33 = sub_100035A48();
  swift_bridgeObjectRetain();
  sub_1000083B8();
  *uint64_t v100 = Dictionary.init(minimumCapacity:)(v32, &type metadata for String, v33, &protocol witness table for String);
  uint64_t v34 = *(void *)(v31 + 64);
  uint64_t v101 = v31 + 64;
  uint64_t v103 = v31;
  uint64_t v35 = -1LL << *(_BYTE *)(v31 + 32);
  uint64_t v36 = sub_10000FFD8();
  uint64_t v104 = 0LL;
  if (-v35 < 64) {
    int64_t v44 = ~(-1LL << -(char)v35);
  }
  else {
    int64_t v44 = -1LL;
  }
  uint64_t v45 = v44 & v34;
  uint64_t v102 = (unint64_t)(63 - v35) >> 6;
  uint64_t v99 = v102 - 1;
  if ((v44 & v34) != 0)
  {
LABEL_27:
    v45 &= v45 - 1;
LABEL_28:
    uint64_t v46 = sub_10005B5D8(v36, v37, v38, v39, v40, v41, v42, v43, v98, v99, (uint64_t)v100, v101, v102, v103);
    sub_10005B710(v46);
    sub_10005B6BC();
    goto LABEL_48;
  }

  while (1)
  {
    if (__OFADD__(v104, 1LL)) {
      goto LABEL_72;
    }
    sub_10005B7E4();
    if (v48 != v21)
    {
      uint64_t v49 = *(void *)(v101 + 8 * v47);
      if (v49) {
        goto LABEL_33;
      }
      uint64_t v50 = v47 + 1;
      uint64_t v104 = v47;
      if (v47 + 1 < v102)
      {
        uint64_t v49 = *(void *)(v101 + 8 * v50);
        if (v49) {
          goto LABEL_36;
        }
        uint64_t v104 = v47 + 1;
        if (v47 + 2 < v102)
        {
          uint64_t v49 = *(void *)(v101 + 8 * (v47 + 2));
          if (v49)
          {
            v47 += 2LL;
            goto LABEL_33;
          }

          uint64_t v50 = v47 + 3;
          uint64_t v104 = v47 + 2;
          if (v47 + 3 < v102)
          {
            uint64_t v49 = *(void *)(v101 + 8 * v50);
            if (!v49)
            {
              while (!__OFADD__(v50, 1LL))
              {
                sub_10005B7E4();
                if (v48 == v21)
                {
                  uint64_t v104 = v99;
                  goto LABEL_47;
                }

                uint64_t v49 = *(void *)(v101 + 8 * v47);
                uint64_t v50 = v51 + 1;
                if (v49) {
                  goto LABEL_33;
                }
              }

              __break(1u);
              return;
            }

LABEL_47:
            sub_10000FFD8();
            sub_1000101CC();
          }

          sub_10000EB70((uint64_t)v407, (uint64_t)&v433, &qword_10008A888);
          sub_10000EB70((uint64_t)&v433, (uint64_t)&v439, &qword_10008A888);
          BOOL v77 = (v439 & 1) == 0 && v439 != 2;
          if ((DiagnosticLogSubmissionEnabled(v75) & 1) == 0 && !v77)
          {
            sub_1000103D8();
            swift_bridgeObjectRelease(v413);
            sub_100010024();
            if (qword_100089FC8 != -1) {
              swift_once(&qword_100089FC8, sub_100009054);
            }
            uint64_t v274 = sub_10000D34C(v406, (uint64_t)qword_100093260);
            sub_10001031C(v370, v274, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v397 + 16));
            v275 = (os_log_s *)sub_10000FFFC((uint64_t)&unk_100082768);
            *((void *)v275 + 2) = v408;
            *((void *)v275 + 3) = v29;
            v276 = v275;
            v405 = v275;
            uint64_t v277 = sub_10000FFFC((uint64_t)&unk_100082790);
            *(void *)(v277 + 16) = v31;
            *(void *)(v277 + 24) = v53;
            uint64_t v278 = v277;
            uint64_t v411 = v277;
            sub_1000100D0(v29);
            uint64_t v279 = sub_1000100D0((uint64_t)v53);
            v412 = (os_log_s *)Logger.logObject.getter(v279);
            LODWORD(v404) = static os_log_type_t.debug.getter();
            uint64_t v403 = sub_100006B14((uint64_t)&unk_1000827B8, 17LL);
            *(_BYTE *)(v403 + 16) = 34;
            uint64_t v400 = sub_100006B14((uint64_t)&unk_1000827E0, 17LL);
            *(_BYTE *)(v400 + 16) = 8;
            uint64_t v280 = sub_10000FFFC((uint64_t)&unk_100082808);
            *(void *)(v280 + 16) = sub_10000FFBC;
            *(void *)(v280 + 24) = v276;
            uint64_t v281 = sub_10000FFFC((uint64_t)&unk_100082830);
            *(void *)(v281 + 16) = sub_10000FF70;
            *(void *)(v281 + 24) = v280;
            uint64_t v282 = sub_100006B14((uint64_t)&unk_100082858, 17LL);
            *(_BYTE *)(v282 + 16) = 34;
            uint64_t v283 = sub_100006B14((uint64_t)&unk_100082880, 17LL);
            *(_BYTE *)(v283 + 16) = 8;
            v284 = (void *)sub_10000FFFC((uint64_t)&unk_1000828A8);
            v284[2] = sub_10000FFBC;
            v284[3] = v278;
            uint64_t v285 = sub_10000FFFC((uint64_t)&unk_1000828D0);
            *(void *)(v285 + 16) = sub_10000FF70;
            *(void *)(v285 + 24) = v284;
            uint64_t v286 = sub_10000534C(&qword_10008A870);
            uint64_t inited = swift_initStackObject(v286, &v417);
            *(_OWORD *)(inited + 16) = v369;
            uint64_t v288 = v403;
            *(void *)(inited + 32) = sub_10000FF78;
            *(void *)(inited + 40) = v288;
            uint64_t v289 = v400;
            *(void *)(inited + 48) = sub_10000FF78;
            *(void *)(inited + 56) = v289;
            *(void *)(inited + 64) = sub_10000FF74;
            *(void *)(inited + 72) = v281;
            *(void *)(inited + 80) = sub_10000FF78;
            *(void *)(inited + 88) = v282;
            *(void *)(inited + 96) = sub_10000FF78;
            *(void *)(inited + 104) = v283;
            *(void *)(inited + 112) = sub_10000FF74;
            *(void *)(inited + 120) = v285;
            swift_retain(v405);
            swift_retain(v280);
            swift_retain(v411);
            v392 = v284;
            sub_1000103E0();
            swift_retain(v288);
            sub_1000103C4();
            uint64_t v395 = v281;
            sub_1000103B4();
            sub_100010324();
            uint64_t v398 = v283;
            swift_retain(v283);
            sub_100010398();
            sub_100006BFC();
            int v290 = v404;
            if (os_log_type_enabled(v412, (os_log_type_t)v404))
            {
              uint64_t v291 = sub_1000100B0(22LL);
              LODWORD(v404) = v290;
              uint64_t v292 = v291;
              uint64_t v391 = sub_1000100B0(64LL);
              *(void *)&__int128 v420 = v391;
              *(_WORD *)uint64_t v292 = 514;
              *(_BYTE *)(v292 + 2) = 34;
              sub_100010254();
              *(_BYTE *)(v292 + 3) = 8;
              sub_100006B3C();
              uint64_t v29 = v409;
              sub_100010270();
              uint64_t v293 = sub_100019964(v408, v29, (uint64_t *)&v420);
              uint64_t v294 = sub_10001025C(v293);
              uint64_t v295 = (uint64_t)v372;
              sub_1000103BC(v294, (uint64_t)v372);
              sub_100010204();
              sub_1000101F0();
              swift_release(v395);
              sub_100010060(v29);
              *(_BYTE *)(v292 + 12) = 34;
              sub_10001020C();
              *(_BYTE *)(v292 + 13) = 8;
              swift_release(v398);
              uint64_t v296 = (uint64_t)v415;
              sub_1000100D8();
              uint64_t v31 = v414;
              uint64_t v297 = sub_100019964((uint64_t)v414, v296, (uint64_t *)&v420);
              uint64_t v298 = sub_10001025C(v297);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v298, v295, v292 + 14);
              sub_1000101D8();
              swift_release(v392);
              sub_100006CA4();
              sub_100010060(v296);
              v299 = v412;
              sub_100010164( (void *)&_mh_execute_header,  v412,  (os_log_type_t)v404,  "skipping %{public}s:%{public}s: dnu disabled");
              uint64_t v300 = v391;
              sub_10001038C();
              sub_100010010(v300);
              sub_100010010(v292);

              sub_100010190(v402, v401, v413);
              sub_10001013C();
              uint64_t v3 = v389;
LABEL_312:
              uint64_t v38 = v381;
              goto LABEL_313;
            }

            sub_1000103A0();
            sub_1000101D8();
            swift_release(v392);
            sub_100006CA4();
            swift_release(v398);
            sub_10001020C();
            uint64_t v29 = v409;
            sub_100010278();
            sub_100010204();
            sub_1000101F0();
            swift_release(v395);
            sub_100006B3C();
            sub_100010254();
            sub_100010190(v402, v401, v413);
            sub_10001013C();
            uint64_t v3 = v389;
LABEL_298:
            uint64_t v38 = v381;
            uint64_t v31 = v414;
            goto LABEL_313;
          }

          NSString v78 = String._bridgeToObjectiveC()();
          uint64_t v79 = MGCopyAnswer(v78, 0LL);

          if (!v79) {
            goto LABEL_346;
          }
          v80 = (void *)v431[13];
          type metadata accessor for CFString(0LL);
          v82 = (void *)swift_dynamicCastUnknownClassUnconditional(v79, v81, 0LL, 0LL, 0LL);
          uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
          v85 = v84;

          if (v80)
          {
            uint64_t v86 = v80[2];
            if (!v86) {
              goto LABEL_120;
            }
            uint64_t v87 = v80[4];
            uint64_t v88 = v80[5];
            BOOL v89 = v87 == v83 && v88 == (void)v85;
            if (!v89 && (sub_10000FFE0(v87, v88) & 1) == 0)
            {
              if (v86 == 1) {
                goto LABEL_120;
              }
              uint64_t v90 = v80[6];
              uint64_t v91 = v80[7];
              BOOL v92 = v90 == v83 && v91 == (void)v85;
              if (!v92 && (sub_10000FFE0(v90, v91) & 1) == 0)
              {
                if (v86 == 2) {
                  goto LABEL_120;
                }
                sub_10001015C();
                uint64_t v53 = v80 + 9;
                while (1)
                {
                  uint64_t v29 = 3LL;
                  if (__OFADD__(2LL, 1LL)) {
                    goto LABEL_341;
                  }
                  uint64_t v93 = v80[8];
                  uint64_t v94 = *v53;
                  BOOL v95 = v93 == v83 && v94 == (void)v85;
                  if (v95 || (sub_10000FFE0(v93, v94) & 1) != 0) {
                    break;
                  }
                  sub_100010280();
                  if (v62)
                  {
                    sub_10000FFD8();
                    v96 = v80;
LABEL_88:
                    swift_bridgeObjectRelease(v96);
LABEL_89:
                    sub_100010024();
                    goto LABEL_204;
                  }
                }

                sub_100006BFC();
                sub_1000101CC();
              }
            }
          }

          v106 = (void *)v431[12];
          if (v431[12])
          {
            uint64_t v107 = *(void *)(v431[12] + 16LL);
            if (v107)
            {
              uint64_t v108 = *(void *)(v431[12] + 32LL);
              uint64_t v109 = *(void *)(v431[12] + 40LL);
              BOOL v110 = v108 == v83 && v109 == (void)v85;
              if (!v110 && (sub_10000FFE0(v108, v109) & 1) == 0)
              {
                if (v107 == 1) {
                  goto LABEL_110;
                }
                uint64_t v122 = v106[6];
                uint64_t v123 = v106[7];
                BOOL v124 = v122 == v83 && v123 == (void)v85;
                if (!v124 && (sub_10000FFE0(v122, v123) & 1) == 0)
                {
                  if (v107 == 2) {
                    goto LABEL_110;
                  }
                  sub_10001015C();
                  uint64_t v53 = v106 + 9;
                  while (1)
                  {
                    uint64_t v29 = 3LL;
                    if (__OFADD__(2LL, 1LL)) {
                      goto LABEL_343;
                    }
                    uint64_t v125 = v106[8];
                    uint64_t v126 = *v53;
                    BOOL v127 = v125 == v83 && v126 == (void)v85;
                    if (v127 || (sub_10000FFE0(v125, v126) & 1) != 0) {
                      break;
                    }
                    sub_100010280();
                    if (v62)
                    {
                      sub_100006BFC();
                      sub_1000101CC();
                      goto LABEL_110;
                    }
                  }

                  sub_100006BFC();
                  sub_1000101CC();
                }
              }

    swift_release(v6);
    uint64_t v83 = v92;
    sub_10001A9B8();
    sub_1000083D4();
    *(void *)(v83 + 16) = v32;
    sub_10001A9B0();
  }

  sub_100015624();
}

    unint64_t v52 = sub_1000208B8();
    sub_10001ABBC(v52);
    uint64_t v45 = 0LL;
LABEL_48:
    sub_10005B778();
    uint64_t v53 = sub_1000208B8();
    uint64_t v54 = sub_10005B790(v53);
    if (v62)
    {
      sub_10005B784(v54, v55, v56, v57, v58, v59, v60, v61, v98, v99, (uint64_t)v100, v101, v102, v103);
      v84 = sub_10005B764();
      uint64_t v86 = 1LL << v85;
      if (v86 < 64) {
        uint64_t v87 = ~(-1LL << v86);
      }
      else {
        uint64_t v87 = -1LL;
      }
      Swift::String v2 = v87 & *(void *)(v84 + 64);
      swift_bridgeObjectRetain();
      uint64_t v1 = 0LL;
      if (v2)
      {
LABEL_3:
        uint64_t v4 = (v2 - 1) & v2;
        uint64_t v5 = __clz(__rbit64(v2)) | (v1 << 6);
        goto LABEL_4;
      }

      goto LABEL_8;
    }

    uint64_t v63 = v20;
    uint64_t v64 = *(uint64_t **)(v0 + 80);
    BOOL v66 = *v64;
    uint64_t v65 = v64[1];
    sub_10005B754((uint64_t)v64);
    sub_100032D80();
    uint64_t v68 = v67;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + 16));
    v70 = *(void *)(v0 + 16);
    *(void *)(v0 + 16) = 0x8000000000000000LL;
    *(void *)(v0 + 24) = v70;
    sub_100035588();
    sub_10003564C();
    if (v21) {
      break;
    }
    uint64_t v73 = v71;
    v74 = v72;
    sub_10000534C(&qword_10008B988);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v70))
    {
      uint64_t v75 = sub_100035588();
      if ((v74 & 1) != (v76 & 1))
      {
        sub_10005B658();
        return;
      }

      uint64_t v73 = v75;
    }

    BOOL v77 = *(void **)(v0 + 24);
    if ((v74 & 1) != 0)
    {
      NSString v78 = v77[7];

      *(void *)(v78 + 8 * v73) = v68;
    }

    else
    {
      v77[(v73 >> 6) + 8] |= 1LL << v73;
      uint64_t v79 = (void *)(v77[6] + 16 * v73);
      *uint64_t v79 = v66;
      v79[1] = v65;
      *(void *)(v77[7] + 8 * v73) = v68;
      v80 = v77[2];
      uint64_t v21 = __OFADD__(v80, 1LL);
      uint64_t v81 = v80 + 1;
      if (v21) {
        goto LABEL_71;
      }
      v77[2] = v81;
      swift_bridgeObjectRetain();
    }

    v82 = *(void *)(v0 + 64);
    uint64_t v83 = *(void *)(v0 + 16);
    *(void *)(v0 + 16) = v77;
    swift_bridgeObjectRelease(v83);
    swift_bridgeObjectRelease(v65);
    uint64_t v36 = sub_10001FDE4(v82);
    uint64_t v20 = v63;
    if (v45) {
      goto LABEL_27;
    }
  }

  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  swift_once(&qword_10008A0B0, sub_100059B84);
LABEL_5:
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_10000D34C(v9, (uint64_t)qword_100093408);
  uint64_t v10 = sub_10005B724();
  uint64_t v11 = (void *)Logger.logObject.getter(v10);
  uint64_t v12 = static os_log_type_t.default.getter();
  if (sub_10001AA2C(v12))
  {
    uint64_t v13 = (_DWORD *)sub_1000100B0(12LL);
    uint64_t v14 = sub_1000100B0(32LL);
    BOOL v105 = v14;
    *uint64_t v13 = 136446210;
    uint64_t v15 = sub_1000083B8();
    uint64_t v17 = sub_10005B7C0(v15, v16, &v105);
    sub_10005B744(v17);
    sub_10005B6E0((void *)&_mh_execute_header, v18, v19, "running TTR rule %{public}s");
    sub_10004F420();
    sub_100010010(v14);
    sub_100010010((uint64_t)v13);
  }

  else
  {
    sub_10005B7CC();
  }

  sub_10005B7B4();
  uint64_t v88 = (void *)sub_10005B7F0();
  sub_10005B690(v88, v89, v90, v91, v92, v93, v94, v95, v98, v99, (uint64_t)v100);
  v96 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 168) = v96;
  void *v96 = v0;
  v96[1] = sub_10005A450;
  sub_10005B608();
  sub_10005B674();
}

LABEL_120:
              v121 = v85;
LABEL_121:
              swift_bridgeObjectRelease(v121);
              sub_100010024();
              goto LABEL_205;
            }
          }

LABEL_110:
          sub_10000FFD8();
          v111 = (void *)v431[26];
          if (v431[26])
          {
            uint64_t v112 = sub_1000100D8();
            uint64_t v113 = v378;
            uint64_t v114 = static Locale.current.getter(v112);
            uint64_t v115 = Locale.regionCode.getter(v114);
            v85 = v116;
            (*(void (**)(uint64_t, uint64_t))(v393 + 8))(v113, v394);
            if (!v85)
            {
              v121 = v111;
              goto LABEL_121;
            }

            uint64_t v117 = v111[2];
            if (!v117) {
              goto LABEL_119;
            }
            uint64_t v118 = v111[4];
            uint64_t v119 = v111[5];
            BOOL v120 = v118 == v115 && v85 == (void *)v119;
            if (!v120 && (sub_10000FFF0(v118, v119, v115) & 1) == 0)
            {
              if (v117 == 1) {
                goto LABEL_119;
              }
              uint64_t v128 = v111[6];
              uint64_t v129 = v111[7];
              BOOL v130 = v128 == v115 && v85 == (void *)v129;
              if (!v130 && (sub_10000FFF0(v128, v129, v115) & 1) == 0)
              {
                if (v117 == 2)
                {
LABEL_119:
                  sub_1000083D4();
                  goto LABEL_120;
                }

                sub_1000100D8();
                uint64_t v53 = v111 + 9;
                while (1)
                {
                  uint64_t v29 = 3LL;
                  if (__OFADD__(2LL, 1LL)) {
                    goto LABEL_345;
                  }
                  uint64_t v131 = v111[8];
                  uint64_t v132 = *v53;
                  BOOL v133 = v131 == v115 && v85 == (void *)v132;
                  if (v133 || (sub_10000FFF0(v131, v132, v115) & 1) != 0) {
                    break;
                  }
                  sub_100010280();
                  if (v62)
                  {
                    sub_10000FFD8();
                    sub_100010060((uint64_t)v111);
                    goto LABEL_89;
                  }
                }

                sub_10000FFD8();
              }
            }

            sub_1000083D4();
            sub_10000FFD8();
          }

          sub_10000EB70((uint64_t)v375, (uint64_t)&v432, &qword_10008A890);
          uint64_t v134 = v376;
          uint64_t v136 = static Locale.current.getter(v135);
          uint64_t v137 = Locale.regionCode.getter(v136);
          uint64_t v139 = v138;
          (*(void (**)(uint64_t, uint64_t))(v393 + 8))(v134, v394);
          if (!v139) {
            goto LABEL_193;
          }
          sub_10000EB70((uint64_t)&v432, (uint64_t)&v440, &qword_10008A890);
          uint64_t v140 = v440;
          if (!v440 || (v404 = *(void **)(v440 + 16)) == 0LL)
          {
LABEL_192:
            sub_10000FFD8();
LABEL_193:
            if (LOBYTE(v431[7])) {
              double v145 = 1.0;
            }
            else {
              double v145 = *(double *)&v431[6];
            }
            goto LABEL_196;
          }

          sub_10000ECC4(&v432);
          unint64_t v141 = 0LL;
          v405 = (os_log_s *)(v140 + 32);
          uint64_t v403 = v140;
          while (1)
          {
            sub_10000DAD4(v141, 1, v140);
            v142 = (double *)((char *)v405 + 16 * v141);
            v143 = *(void **)v142;
            uint64_t v144 = *(void *)(*(void *)v142 + 16LL);
            if (v144) {
              break;
            }
LABEL_190:
            if ((void *)++v141 == v404)
            {
              sub_10000ECEC(&v432);
              goto LABEL_192;
            }
          }

          double v145 = v142[1];
          uint64_t v146 = v143[4];
          uint64_t v147 = v143[5];
          sub_100010198();
          if (v146 == v137 && v139 == v147) {
            goto LABEL_208;
          }
          char v149 = sub_10000FFE0(v146, v147);
          sub_1000100D0((uint64_t)v143);
          if ((v149 & 1) != 0) {
            goto LABEL_207;
          }
          if (v144 == 1) {
            goto LABEL_189;
          }
          uint64_t v150 = v143[6];
          uint64_t v151 = v143[7];
          BOOL v152 = v150 == v137 && v139 == v151;
          if (!v152 && (sub_10000FFE0(v150, v151) & 1) == 0) {
            break;
          }
LABEL_207:
          sub_100010060((uint64_t)v143);
LABEL_208:
          sub_10000ECEC(&v432);
          sub_10000FFD8();
          sub_100006CAC();
LABEL_196:
          uint64_t v162 = v379[3];
          uint64_t v163 = v379[4];
          sub_10001022C(v379);
          if ((*(double (**)(uint64_t, uint64_t))(v163 + 48))(v162, v163) >= v145)
          {
            sub_1000103D8();
            sub_100010024();
            sub_100010190(v402, v401, v413);
            sub_10000FFD8();
            uint64_t v3 = v389;
            uint64_t v29 = v409;
            goto LABEL_298;
          }

          int v164 = BYTE1(v431[25]);
          v165 = (void *)v431[20];
          uint64_t v166 = v431[21];
          unsigned __int8 v167 = v431[22];
          int v168 = BYTE1(v431[19]);
          v169 = (void *)v431[17];
          v170 = (void *)v431[16];
          uint64_t v171 = v374;
          uint64_t v403 = v431[4];
          v404 = (void *)v431[5];
          URL.init(string:)(v431[4]);
          if (_s10RTCUtility9XPCObjectOwet_0(v171, 1LL, v377) != 1)
          {
            swift_bridgeObjectRelease(v413);
            uint64_t v336 = v364;
            v412 = *(os_log_s **)(v364 + 32);
            ((void (*)(uint64_t, uint64_t, uint64_t))v412)(v367, v171, v377);
            if (v168 == 2) {
              uint64_t v337 = v368;
            }
            else {
              uint64_t v337 = v168 & 1;
            }
            uint64_t v368 = v337;
            sub_10000C224(v165, v166, v167);
            uint64_t v339 = v338;
            sub_10001031C(v363, v367, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v336 + 16));
            if (v164 == 2)
            {
              BOOL v340 = 0;
              uint64_t v341 = v401;
              uint64_t v342 = v395;
              if (!v169)
              {
                v343 = _swiftEmptyArrayStorage;
                v344 = _swiftEmptyArrayStorage;
LABEL_324:
                sub_100010198();
                uint64_t v345 = sub_100047A74((uint64_t)v344);
                if (v170) {
                  v343 = v170;
                }
                sub_1000101AC();
                uint64_t v346 = sub_100047A74((uint64_t)v343);
                sub_100010024();
                sub_10000EB70((uint64_t)&v433, (uint64_t)&v438, &qword_10008A888);
                BOOL v348 = (v438 & 1) == 0 && v438 != 2;
                uint64_t v350 = (uint64_t)v360;
                v349 = (int *)v361;
                uint64_t v351 = v398;
                uint64_t *v360 = v342;
                *(void *)(v350 + 8) = v351;
                *(double *)(v350 + 16) = v145;
                uint64_t v352 = v377;
                ((void (*)(uint64_t, uint64_t, uint64_t))v412)(v350 + v349[6], v363, v377);
                *(void *)(v350 + v349[7]) = v339;
                *(_BYTE *)(v350 + v349[8]) = v340;
                *(void *)(v350 + v349[9]) = v345;
                *(void *)(v350 + v349[10]) = v346;
                *(_BYTE *)(v350 + v349[11]) = v348;
                v353 = v365;
                sub_10000EC80(v350, (uint64_t)v365);
                swift_storeEnumTagMultiPayload(v353, v366, 0LL);
                sub_10003397C();
                sub_1000339F4(v430[2]);
                sub_100010380();
                sub_100010190(v402, v341, v413);
                sub_100005FF0(v350, type metadata accessor for SessionConfiguration.BackendHTTP);
                (*(void (**)(uint64_t, uint64_t))(v364 + 8))(v367, v352);
                uint64_t v3 = v389;
                uint64_t v29 = v409;
                uint64_t v31 = v414;
                int64_t v37 = v396;
                goto LABEL_4;
              }
            }

            else
            {
              BOOL v340 = (v164 & 1) == 0;
              uint64_t v341 = v401;
              if (!v169)
              {
                v343 = _swiftEmptyArrayStorage;
                v344 = _swiftEmptyArrayStorage;
                uint64_t v342 = v395;
                goto LABEL_324;
              }

              uint64_t v342 = v395;
            }

            v344 = v169;
            v343 = _swiftEmptyArrayStorage;
            goto LABEL_324;
          }

          sub_10000EB9C(v171);
          if (qword_100089FC8 != -1) {
            swift_once(&qword_100089FC8, sub_100009054);
          }
          uint64_t v172 = sub_10000D34C(v406, (uint64_t)qword_100093260);
          sub_10001031C(v390, v172, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v397 + 16));
          uint64_t v173 = sub_100006B14((uint64_t)&unk_1000828F8, 249LL);
          memcpy((void *)(v173 + 16), v431, 0xE9uLL);
          uint64_t v174 = sub_10001036C();
          v175 = (os_log_s *)Logger.logObject.getter(v174);
          uint64_t v31 = (uint8_t *)static os_log_type_t.error.getter();
          uint64_t v29 = sub_100006B14((uint64_t)&unk_100082920, 17LL);
          *(_BYTE *)(v29 + 16) = 32;
          uint64_t v176 = sub_100006B14((uint64_t)&unk_100082948, 17LL);
          *(_BYTE *)(v176 + 16) = 8;
          uint64_t v53 = (uint64_t *)sub_10000FFFC((uint64_t)&unk_100082970);
          v53[2] = (uint64_t)sub_10000EC70;
          v53[3] = v173;
          uint64_t v177 = sub_10000FFFC((uint64_t)&unk_100082998);
          *(void *)(v177 + 16) = sub_10000FF70;
          *(void *)(v177 + 24) = v53;
          uint64_t v178 = sub_10000534C(&qword_10008A870);
          uint64_t v179 = swift_initStackObject(v178, &v416);
          *(_OWORD *)(v179 + 16) = v373;
          *(void *)(v179 + 32) = sub_10000FF78;
          *(void *)(v179 + 40) = v29;
          *(void *)(v179 + 48) = sub_10000FF78;
          *(void *)(v179 + 56) = v176;
          *(void *)(v179 + 64) = sub_10000FF74;
          *(void *)(v179 + 72) = v177;
          sub_1000103E0();
          sub_100010398();
          sub_1000103B4();
          swift_retain(v176);
          sub_1000103C4();
          sub_10000FFD8();
          os_log_type_t v180 = v31;
          v405 = v175;
          if (os_log_type_enabled(v175, (os_log_type_t)v31))
          {
            uint64_t v31 = (uint8_t *)sub_1000100B0(12LL);
            uint64_t v400 = sub_1000100B0(32LL);
            *(void *)&__int128 v420 = v400;
            *(_WORD *)uint64_t v31 = 258;
            v31[2] = 32;
            sub_100010268();
            v31[3] = 8;
            sub_100006AE8();
            uint64_t v29 = (uint64_t)(v31 + 4);
            unint64_t v181 = (unint64_t)v404;
            sub_10001015C();
            uint64_t v182 = sub_100019964(v403, v181, (uint64_t *)&v420);
            uint64_t v183 = sub_10001025C(v182);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v183, v372, v31 + 4);
            swift_release(v173);
            sub_100006CA4();
            sub_100006B3C();
            sub_100006BFC();
            sub_100010024();
            v184 = v405;
            _os_log_impl((void *)&_mh_execute_header, v405, v180, "invalid URL %s", v31, 0xCu);
            uint64_t v185 = v400;
            swift_arrayDestroy(v400, 1LL);
            sub_100010010(v185);
            sub_100010010((uint64_t)v31);
          }

          else
          {
            swift_release(v173);
            sub_100006CA4();
            sub_100006B3C();
            sub_100006AE8();
            sub_100010268();
            sub_100010024();
          }

          (*(void (**)(uint64_t, uint64_t))(v397 + 8))(v390, v406);
LABEL_204:
          sub_1000101CC();
LABEL_205:
          if ((os_log_s *)++v52 == v412)
          {
            sub_1000103D8();
            sub_100010190(v402, v401, v413);
            sub_10000FFD8();
LABEL_267:
            uint64_t v3 = v389;
LABEL_268:
            uint64_t v38 = v381;
LABEL_313:
            int64_t v37 = v396;
            goto LABEL_5;
          }
        }

        if (v144 != 2)
        {
          uint64_t v153 = v143[8];
          uint64_t v154 = v143[9];
          BOOL v155 = v153 == v137 && v139 == v154;
          if (v155 || (sub_10000FFE0(v153, v154) & 1) != 0) {
            goto LABEL_207;
          }
          if (v144 != 3)
          {
            v156 = v143 + 11;
            uint64_t v157 = 3LL;
            while (1)
            {
              uint64_t v158 = v157 + 1;
              if (__OFADD__(v157, 1LL)) {
                break;
              }
              uint64_t v159 = *(v156 - 1);
              uint64_t v160 = *v156;
              BOOL v161 = v159 == v137 && v139 == v160;
              if (v161 || (sub_10000FFE0(v159, v160) & 1) != 0) {
                goto LABEL_207;
              }
              v156 += 2;
              ++v157;
              if (v158 == v144) {
                goto LABEL_189;
              }
            }

LABEL_338:
            __break(1u);
LABEL_339:
            __break(1u);
LABEL_340:
            __break(1u);
LABEL_341:
            __break(1u);
LABEL_342:
            __break(1u);
LABEL_343:
            __break(1u);
            goto LABEL_344;
          }
        }

LABEL_189:
        sub_100010060((uint64_t)v143);
        sub_100006CAC();
        uint64_t v140 = v403;
        goto LABEL_190;
      }
    }
  }

  while (v48 != 1);
  unint64_t v399 = v39;
  int64_t v396 = v37;
  sub_10000E7F8(v47, v46, v413, 1);
  uint64_t v186 = qword_10008A080;
  swift_bridgeObjectRetain();
  if (v186 != -1) {
    swift_once(&qword_10008A080, sub_10004D6A0);
  }
  if (byte_1000933D8 != 1 || (uint64_t v384 = *(void *)(v47 + 16)) == 0)
  {
    uint64_t v240 = v413;
    sub_10001001C(v47, v46, v413);
    sub_10001001C(v47, v46, v240);
    goto LABEL_268;
  }

  unint64_t v187 = 0LL;
  uint64_t v387 = v47 + 32;
  uint64_t v401 = v46;
  uint64_t v402 = v47;
  while (1)
  {
    if (v187 >= *(void *)(v47 + 16)) {
      goto LABEL_337;
    }
    uint64_t v400 = v187;
    unint64_t v188 = v387 + 112 * v187;
    uint64_t v189 = *(void *)(v188 + 8);
    uint64_t v395 = *(void *)(v188 + 16);
    uint64_t v190 = *(void *)(v188 + 24);
    double v191 = *(double *)(v188 + 32);
    int v383 = *(unsigned __int8 *)(v188 + 40);
    v193 = *(void **)(v188 + 48);
    v192 = *(os_log_s **)(v188 + 56);
    int v194 = *(unsigned __int8 *)(v188 + 64);
    uint64_t v196 = *(void *)(v188 + 72);
    v195 = *(os_log_s **)(v188 + 80);
    int v197 = *(unsigned __int8 *)(v188 + 88);
    LODWORD(v385) = *(unsigned __int8 *)(v188 + 89);
    uint64_t v198 = *(void *)(v188 + 104);
    v404 = *(void **)(v188 + 96);
    v405 = v195;
    uint64_t v411 = v196;
    v412 = v192;
    uint64_t v403 = v189;
    if (!v189)
    {
      sub_100010198();
      v392 = v193;
      sub_1000100E0();
      uint64_t v391 = v198;
      sub_100010270();
      uint64_t v209 = sub_100010290();
      uint64_t v210 = v380;
      uint64_t v208 = v406;
      uint64_t v29 = v409;
      if (!v190) {
        goto LABEL_270;
      }
      goto LABEL_229;
    }

    *(void *)&__int128 v420 = *(void *)v188;
    *((void *)&v420 + 1) = v189;
    sub_10001032C();
    sub_100010198();
    sub_1000083B0();
    sub_1000100E0();
    int v199 = v197;
    unint64_t v200 = sub_10000E944();
    sub_100010290();
    sub_100010270();
    uint64_t v201 = StringProtocol.components<A>(separatedBy:)( &v418,  &type metadata for String,  &type metadata for String,  v200,  v200);
    v202 = (void *)v201;
    uint64_t v203 = *(void *)(v201 + 16);
    if (v203) {
      break;
    }
    sub_100006CAC();
    sub_100010098();
    sub_10000FFD8();
    sub_10000E894((uint64_t)v193, (uint64_t)v412, v194);
    sub_10000E8AC(v411, (uint64_t)v405, v199);
    sub_100010278();
    uint64_t v3 = v389;
    uint64_t v211 = v401;
    uint64_t v47 = v402;
    uint64_t v29 = v409;
    uint64_t v212 = (uint64_t)v404;
    uint64_t v213 = v400;
LABEL_240:
    unint64_t v187 = v213 + 1;
    swift_bridgeObjectRelease(v212);
    if (v187 == v384)
    {
      uint64_t v317 = v413;
      sub_10001001C(v47, v211, v413);
      sub_10001001C(v47, v211, v317);
      uint64_t v38 = v381;
      uint64_t v31 = v414;
      goto LABEL_313;
    }
  }

  uint64_t v382 = v190;
  uint64_t v391 = v198;
  v392 = v193;
  LODWORD(v398) = v199;
  uint64_t v204 = *(void *)(v201 + 32);
  uint64_t v205 = v202[5];
  uint64_t v29 = v409;
  if (v204 == v408 && v205 == v409)
  {
    uint64_t v209 = sub_10000FFD8();
    uint64_t v208 = v406;
    goto LABEL_227;
  }

  char v207 = sub_100010008(v204, v205, v408, v409);
  uint64_t v208 = v406;
  if ((v207 & 1) != 0)
  {
    uint64_t v209 = sub_10000FFD8();
    uint64_t v29 = v409;
    goto LABEL_227;
  }

  if (v203 == 1)
  {
    sub_10000FFD8();
    uint64_t v29 = v409;
LABEL_244:
    v227 = v405;
    uint64_t v196 = v411;
LABEL_245:
    sub_100010120();
    sub_100010098();
    sub_10000E894((uint64_t)v392, (uint64_t)v412, v194);
    sub_10000E8AC(v196, (uint64_t)v227, v398);
    sub_1000102AC();
    uint64_t v3 = v389;
    uint64_t v211 = v401;
    uint64_t v47 = v402;
    uint64_t v212 = (uint64_t)v404;
LABEL_239:
    uint64_t v213 = v400;
    goto LABEL_240;
  }

  uint64_t v228 = v202[6];
  uint64_t v229 = v202[7];
  uint64_t v29 = v409;
  if (v228 == v408 && v229 == v409)
  {
    uint64_t v209 = sub_10000FFD8();
LABEL_227:
    int v197 = v398;
    uint64_t v196 = v411;
LABEL_228:
    uint64_t v190 = v382;
    uint64_t v210 = v380;
    if (!v382) {
      goto LABEL_270;
    }
LABEL_229:
    *(void *)&__int128 v420 = v395;
    *((void *)&v420 + 1) = v190;
    sub_10001017C();
    uint64_t v214 = sub_1000101E0();
    v217 = (void *)sub_100010170(v214, (uint64_t)&type metadata for String, v215, v216);
    uint64_t v218 = (uint64_t)v217;
    uint64_t v219 = v217[2];
    if (!v219)
    {
      sub_100006CAC();
      sub_10000FFD8();
      sub_100010098();
      sub_100010068();
      uint64_t v212 = v391;
      uint64_t v3 = v389;
LABEL_238:
      uint64_t v211 = v401;
      uint64_t v47 = v402;
      goto LABEL_239;
    }

    uint64_t v220 = v190;
    LODWORD(v395) = v194;
    LODWORD(v398) = v197;
    uint64_t v221 = v217[4];
    v222 = (void *)v217[5];
    sub_1000083B0();
    swift_bridgeObjectRetain();
    LOBYTE(v221) = sub_10000C0D0(v221, v222, (uint64_t)v414, (uint64_t)v415);
    swift_bridgeObjectRelease(v222);
    if ((v221 & 1) == 0)
    {
      if (v219 != 1)
      {
        uint64_t v223 = v218 + 56;
        uint64_t v224 = 1LL;
        do
        {
          uint64_t v225 = v224 + 1;
          if (__OFADD__(v224, 1LL)) {
            goto LABEL_336;
          }
          uint64_t v226 = *(void *)(v223 - 8);
          sub_1000100D8();
          LOBYTE(v226) = sub_100010340(v226);
          sub_1000083D4();
          if ((v226 & 1) != 0) {
            goto LABEL_269;
          }
          ++v224;
          v223 += 16LL;
        }

        while (v225 != v219);
      }

      sub_100010060(v218);
      swift_bridgeObjectRelease(v220);
      sub_100010098();
      sub_1000101B4();
      sub_1000102C0(v411);
      uint64_t v212 = v391;
      uint64_t v3 = v389;
      uint64_t v29 = v409;
      goto LABEL_238;
    }

LABEL_269:
    uint64_t v209 = sub_100010060(v218);
    uint64_t v208 = v406;
    uint64_t v210 = v380;
    uint64_t v29 = v409;
    int v197 = v398;
    uint64_t v196 = v411;
    int v194 = v395;
    uint64_t v190 = v220;
LABEL_270:
    uint64_t v241 = v210;
    uint64_t v382 = v190;
    BOOL v243 = (v385 & 1) == 0 && (_DWORD)v385 != 2;
    if ((DiagnosticLogSubmissionEnabled(v209) & 1) == 0 && !v243)
    {
      sub_10001001C(v402, v401, v413);
      sub_100010098();
      sub_100010120();
      sub_100010068();
      sub_1000102AC();
      uint64_t v244 = v397;
      uint64_t v246 = (uint64_t)v414;
      uint64_t v245 = (uint64_t)v415;
      if (qword_100089FC8 != -1) {
        swift_once(&qword_100089FC8, sub_100009054);
      }
      uint64_t v247 = sub_10000D34C(v208, (uint64_t)qword_100093260);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v244 + 16))(v241, v247, v208);
      v248 = (os_log_s *)sub_10000FFFC((uint64_t)&unk_1000825D8);
      *((void *)v248 + 2) = v408;
      *((void *)v248 + 3) = v29;
      uint64_t v249 = sub_10000FFFC((uint64_t)&unk_100082600);
      *(void *)(v249 + 16) = v246;
      *(void *)(v249 + 24) = v245;
      uint64_t v250 = v249;
      uint64_t v411 = v249;
      sub_1000100D0(v29);
      uint64_t v251 = sub_1000100D0(v245);
      v412 = (os_log_s *)Logger.logObject.getter(v251);
      LODWORD(v403) = static os_log_type_t.debug.getter();
      uint64_t v398 = sub_100006B14((uint64_t)&unk_100082628, 17LL);
      *(_BYTE *)(v398 + 16) = 34;
      uint64_t v395 = sub_100006B14((uint64_t)&unk_100082650, 17LL);
      *(_BYTE *)(v395 + 16) = 8;
      uint64_t v252 = sub_10000FFFC((uint64_t)&unk_100082678);
      *(void *)(v252 + 16) = sub_10000E8DC;
      *(void *)(v252 + 24) = v248;
      uint64_t v253 = sub_10000FFFC((uint64_t)&unk_1000826A0);
      *(void *)(v253 + 16) = sub_10000E918;
      *(void *)(v253 + 24) = v252;
      uint64_t v254 = sub_100006B14((uint64_t)&unk_1000826C8, 17LL);
      *(_BYTE *)(v254 + 16) = 34;
      uint64_t v255 = sub_100006B14((uint64_t)&unk_1000826F0, 17LL);
      *(_BYTE *)(v255 + 16) = 8;
      uint64_t v256 = sub_10000FFFC((uint64_t)&unk_100082718);
      *(void *)(v256 + 16) = sub_10000FFBC;
      *(void *)(v256 + 24) = v250;
      uint64_t v257 = sub_10000FFFC((uint64_t)&unk_100082740);
      *(void *)(v257 + 16) = sub_10000FF70;
      *(void *)(v257 + 24) = v256;
      uint64_t v258 = sub_10000534C(&qword_10008A870);
      uint64_t v259 = swift_initStackObject(v258, &v428);
      *(_OWORD *)(v259 + 16) = v369;
      uint64_t v260 = v398;
      *(void *)(v259 + 32) = sub_10000E8E8;
      *(void *)(v259 + 40) = v260;
      uint64_t v261 = v395;
      *(void *)(v259 + 48) = sub_10000FF78;
      *(void *)(v259 + 56) = v261;
      *(void *)(v259 + 64) = sub_10000E920;
      *(void *)(v259 + 72) = v253;
      *(void *)(v259 + 80) = sub_10000FF78;
      *(void *)(v259 + 88) = v254;
      *(void *)(v259 + 96) = sub_10000FF78;
      *(void *)(v259 + 104) = v255;
      *(void *)(v259 + 112) = sub_10000FF74;
      *(void *)(v259 + 120) = v257;
      v405 = v248;
      swift_retain(v248);
      v404 = (void *)v252;
      swift_retain(v252);
      swift_retain(v411);
      uint64_t v400 = v256;
      sub_1000103B4();
      sub_1000103E0();
      sub_1000103C4();
      sub_100010398();
      swift_retain(v254);
      sub_100010324();
      swift_retain(v257);
      sub_100006BFC();
      int v262 = v403;
      if (os_log_type_enabled(v412, (os_log_type_t)v403))
      {
        uint64_t v263 = sub_1000100B0(22LL);
        uint64_t v403 = sub_1000100B0(64LL);
        *(void *)&__int128 v420 = v403;
        *(_WORD *)uint64_t v263 = 514;
        LODWORD(v392) = v262;
        *(_BYTE *)(v263 + 2) = 34;
        sub_100010268();
        *(_BYTE *)(v263 + 3) = 8;
        sub_100006B3C();
        uint64_t v264 = v409;
        sub_1000101AC();
        uint64_t v265 = sub_100019964(v408, v264, (uint64_t *)&v420);
        uint64_t v266 = sub_10001025C(v265);
        uint64_t v267 = (uint64_t)v372;
        sub_1000103BC(v266, (uint64_t)v372);
        sub_100010204();
        swift_release(v404);
        sub_100006CA4();
        sub_100010060(v264);
        *(_BYTE *)(v263 + 12) = 34;
        sub_100010254();
        *(_BYTE *)(v263 + 13) = 8;
        sub_1000101F0();
        uint64_t v268 = (uint64_t)v415;
        sub_1000100D8();
        uint64_t v269 = (uint64_t)v414;
        uint64_t v270 = sub_100019964((uint64_t)v414, v268, (uint64_t *)&v420);
        uint64_t v271 = sub_10001025C(v270);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v271, v267, v263 + 14);
        sub_1000101D8();
        swift_release(v400);
        swift_release(v257);
        sub_100010060(v268);
        v272 = v412;
        sub_100010164( (void *)&_mh_execute_header,  v412,  (os_log_type_t)v392,  "skipping %{public}s:%{public}s: dnu disabled");
        uint64_t v273 = v403;
        sub_10001038C();
        sub_100010010(v273);
        sub_100010010(v263);

        sub_10001001C(v402, v401, v413);
        sub_100010128();
        uint64_t v3 = v389;
        uint64_t v29 = v264;
        uint64_t v38 = v381;
        uint64_t v31 = (uint8_t *)v269;
        goto LABEL_313;
      }

      sub_1000103A0();
      sub_1000101D8();
      swift_release(v400);
      swift_release(v257);
      sub_1000101F0();
      sub_100010254();
      uint64_t v313 = v409;
      sub_10000FFD8();
      sub_100010204();
      swift_release(v404);
      sub_100006CA4();
      sub_100006B3C();
      sub_100010268();
      sub_10001001C(v402, v401, v413);
      sub_100010128();
      uint64_t v3 = v389;
      uint64_t v29 = v313;
      goto LABEL_298;
    }

    LODWORD(v395) = v194;
    LODWORD(v398) = v197;
    if (v383) {
      double v191 = 1.0;
    }
    uint64_t v301 = v379[3];
    uint64_t v302 = v379[4];
    sub_10001022C(v379);
    double v303 = (*(double (**)(uint64_t, uint64_t))(v302 + 48))(v301, v302);
    uint64_t v31 = v414;
    if (v303 >= v191)
    {
      sub_100010098();
      sub_100010120();
      sub_1000101B4();
      sub_1000102C0(v196);
      sub_1000102AC();
      uint64_t v314 = v401;
      uint64_t v315 = v402;
      uint64_t v316 = v413;
      sub_10001001C(v402, v401, v413);
      sub_10001001C(v315, v314, v316);
      goto LABEL_267;
    }

    v304 = v392;
    uint64_t v3 = v389;
    sub_10000C224(v392, (uint64_t)v412, v395);
    uint64_t v387 = v305;
    if ((v398 & 1) != 0)
    {
      uint64_t v306 = v3[4];
      v307 = v405;
      sub_100010198();
      sub_10004F544(v196, (uint64_t)v307, v306);
      v309 = v308;
      unsigned __int8 v311 = v310;
      sub_10000E8AC(v196, (uint64_t)v307, 1);
      if (v311 == 255)
      {
LABEL_293:
        v312 = _swiftEmptyArrayStorage;
        v309 = _swiftEmptyArrayStorage;
LABEL_301:
        v392 = v304;
        int64_t v318 = v309[2];
        if (v318)
        {
          *(void *)&__int128 v420 = _swiftEmptyArrayStorage;
          sub_10000D980(v318);
          v385 = v309;
          v319 = v309 + 9;
          do
          {
            uint64_t v320 = *(v319 - 5);
            uint64_t v321 = *(v319 - 4);
            char v322 = *((_BYTE *)v319 - 24);
            uint64_t v323 = *(v319 - 1);
            uint64_t v400 = *(v319 - 2);
            uint64_t v324 = *v319;
            v319 += 6;
            sub_1000100D0(v321);
            sub_100010290();
            sub_1000101AC();
            sub_10000E4BC();
            v325 = *(char **)(v420 + 16);
            sub_10000E504(v325);
            *(void *)&__int128 v421 = v320;
            *((void *)&v421 + 1) = v321;
            uint64_t v422 = v320;
            uint64_t v423 = v321;
            char v424 = v322;
            uint64_t v425 = v400;
            uint64_t v426 = v323;
            uint64_t v427 = v324;
            sub_10000E52C((uint64_t)v325, &v421);
            --v318;
          }

          while (v318);
          swift_bridgeObjectRelease(v385);
          uint64_t v326 = v401;
          sub_10001001C(v402, v401, v413);
          v327 = (void *)v420;
          uint64_t v3 = v389;
          uint64_t v29 = v409;
          uint64_t v31 = v414;
          v312 = _swiftEmptyArrayStorage;
          uint64_t v328 = v411;
        }

        else
        {
          uint64_t v328 = v196;
          swift_bridgeObjectRelease(v309);
          uint64_t v326 = v401;
          sub_10001001C(v402, v401, v413);
          v327 = _swiftEmptyArrayStorage;
        }

        sub_100009C58((uint64_t)v327, &qword_10008A898, (void (*)(uint64_t, uint64_t, void **))sub_10000DDA8);
        uint64_t v400 = v329;
        if (v391) {
          v312 = (void *)v391;
        }
        sub_10001015C();
        uint64_t v330 = sub_100047A74((uint64_t)v312);
        v331 = v404;
        if (v404)
        {
          sub_1000101AC();
          sub_100010098();
          sub_100010120();
          sub_10000E894((uint64_t)v392, (uint64_t)v412, v395);
          sub_10000E8AC(v328, (uint64_t)v405, v398);
          sub_100006BFC();
          swift_bridgeObjectRelease(v331);
        }

        else
        {
          sub_100010098();
          sub_100010120();
          sub_10000E894((uint64_t)v392, (uint64_t)v412, v395);
          sub_10000E8AC(v328, (uint64_t)v405, v398);
          sub_100006BFC();
          swift_bridgeObjectRelease(0LL);
          v331 = _swiftEmptyArrayStorage;
        }

        uint64_t v332 = sub_100047A74((uint64_t)v331);
        v334 = v365;
        uint64_t v333 = v366;
        double *v365 = v191;
        uint64_t v335 = v400;
        *((void *)v334 + 1) = v387;
        *((void *)v334 + 2) = v335;
        *((void *)v334 + 3) = v330;
        *((void *)v334 + 4) = v332;
        swift_storeEnumTagMultiPayload(v334, v333, 1LL);
        sub_10003397C();
        sub_1000339F4(v429[2]);
        sub_100010380();
        sub_10001001C(v402, v326, v413);
        goto LABEL_312;
      }

      if (v311 != 1)
      {
        sub_10000E930((uint64_t)v309, v311);
        goto LABEL_293;
      }
    }

    else
    {
      sub_1000101AC();
      v309 = (void *)v196;
    }

    v312 = _swiftEmptyArrayStorage;
    goto LABEL_301;
  }

  char v231 = sub_100010008(v228, v229, v408, v409);
  uint64_t v196 = v411;
  if ((v231 & 1) != 0)
  {
    uint64_t v209 = sub_10000FFD8();
    int v197 = v398;
    goto LABEL_228;
  }

  if (v203 == 2)
  {
    v232 = v202;
    v227 = v405;
    swift_bridgeObjectRelease(v232);
    goto LABEL_245;
  }

  v233 = v202 + 9;
  uint64_t v234 = 2LL;
  while (1)
  {
    uint64_t v235 = v234 + 1;
    if (__OFADD__(v234, 1LL)) {
      break;
    }
    sub_100010300();
    BOOL v239 = v62 && v237 == v29;
    if (v239 || (sub_100010008(v236, v237, v238, v29) & 1) != 0)
    {
      uint64_t v209 = sub_10000FFD8();
      uint64_t v208 = v406;
      uint64_t v210 = v380;
      int v197 = v398;
      uint64_t v196 = v411;
      uint64_t v190 = v382;
      if (v382) {
        goto LABEL_229;
      }
      goto LABEL_270;
    }

    v233 += 2;
    ++v234;
    if (v235 == v203)
    {
      sub_10000FFD8();
      goto LABEL_244;
    }
  }

LABEL_344:
  __break(1u);
LABEL_345:
  __break(1u);
LABEL_346:
  __break(1u);
}

uint64_t sub_10000C0D0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  Swift::String_optional v13 = String.Iterator.next()();
  object = v13.value._object;
  uint64_t countAndFlagsBits = v13.value._countAndFlagsBits;
  if (v13.value._object)
  {
    uint64_t v14 = v13.value._countAndFlagsBits;
    uint64_t v15 = v13.value._object;
    while (1)
    {
      Swift::String_optional v16 = String.Iterator.next()();
      if (!v16.value._object) {
        break;
      }
      if (v14 == v16.value._countAndFlagsBits && v15 == v16.value._object)
      {
        sub_100006AF0();
        sub_10000FFD8();
      }

      else
      {
        char v18 = sub_10000FFF0(v14, (uint64_t)v15, v16.value._countAndFlagsBits);
        sub_100006AF0();
        uint64_t v19 = sub_10000FFD8();
        if ((v18 & 1) == 0)
        {
          sub_100010364(v19, v20, v21, v22, v23, v24, v25, v26, a3, a4);
          uint64_t v38 = a2;
          goto LABEL_16;
        }
      }

      Swift::String_optional v27 = String.Iterator.next()();
      object = v27.value._object;
      uint64_t countAndFlagsBits = v27.value._countAndFlagsBits;
      uint64_t v14 = v27.value._countAndFlagsBits;
      uint64_t v15 = v27.value._object;
      if (!v27.value._object) {
        goto LABEL_12;
      }
    }

    uint64_t v29 = sub_100006AF0();
    sub_100010364(v29, v30, v31, v32, v33, v34, v35, v36, a3, a4);
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

LABEL_12:
  sub_100010364(countAndFlagsBits, (uint64_t)object, v7, v8, v9, v10, v11, v12, a3, a4);
  uint64_t v28 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease(a2);
  if (!v28) {
    return 1LL;
  }
  uint64_t v38 = v28;
LABEL_16:
  swift_bridgeObjectRelease(v38);
  return 0LL;
}

    uint64_t v23 = (void *)*a3;
    *(void *)(*a3 + 8 * (v16 >> 6) + 64) |= 1LL << v16;
    uint64_t v24 = (uint64_t *)(v23[6] + 16 * v16);
    *uint64_t v24 = v11;
    v24[1] = v12;
    uint64_t v25 = v23[7] + 48 * v16;
    *(void *)uint64_t v25 = v44;
    *(void *)(v25 + 8) = v45;
    *(_BYTE *)(v25 + 16) = v7;
    *(void *)(v25 + 24) = v8;
    *(_OWORD *)(v25 + 32) = v48;
    uint64_t v26 = v23[2];
    Swift::String_optional v27 = __OFADD__(v26, 1LL);
    uint64_t v28 = v26 + 1;
    if (v27) {
      goto LABEL_22;
    }
    ++v6;
    v23[2] = v28;
    v5 += 64LL;
    a2 = 1;
    uint64_t v3 = v42;
    if (v43 == v6) {
      return swift_bridgeObjectRelease_n(v3, 2LL);
    }
  }

  sub_10005725C(v19, a2 & 1);
  uint64_t v21 = sub_100033A58(v11, v12);
  if ((v20 & 1) != (v22 & 1)) {
    goto LABEL_23;
  }
  Swift::String_optional v16 = v21;
  if ((v20 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_16:
  uint64_t v29 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0LL, 0LL);
  swift_willThrow(v29, v30, v31, v32, v33, v34, v35, v36);
  unint64_t v52 = v29;
  swift_errorRetain(v29);
  int64_t v37 = sub_10000534C(&qword_10008A8A8);
  if ((swift_dynamicCast(v37, &v52, v37, &type metadata for _MergeError, 0LL) & 1) == 0)
  {
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v45);
    swift_bridgeObjectRelease_n(v42, 2LL);
    return swift_errorRelease(v52);
  }

  sub_100015624();
}

uint64_t sub_10000C1F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  swift_bridgeObjectRetain(*(void *)(a1 + 40));
  return v1;
}

void sub_10000C224(void *a1, uint64_t a2, unsigned __int8 a3)
{
  int v7 = ~a3;
  uint64_t v8 = type metadata accessor for EventValue(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (!v7) {
    goto LABEL_8;
  }
  if ((a3 & 1) != 0)
  {
    uint64_t v12 = *(void *)(v3 + 32);
    sub_10000E888((uint64_t)a1, a2, 1);
    sub_10004F544((uint64_t)a1, a2, v12);
    uint64_t v14 = v13;
    unsigned __int8 v16 = v15;
    sub_10000E894((uint64_t)a1, a2, a3);
    if (v16 != 255)
    {
      if (!v16)
      {
        a1 = (void *)v14;
        goto LABEL_9;
      }

      sub_10000E930(v14, v16);
    }

LABEL_8:
    a1 = _swiftEmptyArrayStorage;
    goto LABEL_9;
  }

  sub_10000E888((uint64_t)a1, a2, 0);
LABEL_9:
  sub_100004E60(0, a1[2], 0, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v123 = v17;
  uint64_t v18 = a1[2];
  if (!v18)
  {
LABEL_67:
    swift_bridgeObjectRelease(a1);
    return;
  }

  unint64_t v19 = 0LL;
  uint64_t v20 = a1 + 4;
  unint64_t v103 = (unint64_t)"Duplicate values for key: '";
  unint64_t v102 = 0x800000010006D840LL;
  uint64_t v116 = v9;
  uint64_t v104 = v8;
  uint64_t v107 = a1;
  uint64_t v106 = v18;
  BOOL v105 = a1 + 4;
  while (v19 < a1[2])
  {
    uint64_t v21 = &v20[11 * v19];
    if (!v21[7])
    {
      unint64_t v115 = v19;
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      uint64_t v25 = v21[2];
      uint64_t v24 = v21[3];
      uint64_t v26 = v21[4];
      unint64_t v27 = v21[5];
      uint64_t v28 = v21[6];
      uint64_t v29 = v21[9];
      uint64_t v118 = v21[8];
      uint64_t v30 = v21[10];
      uint64_t v112 = *(void *)(v23 + 16);
      uint64_t v113 = v26;
      swift_bridgeObjectRetain();
      uint64_t v120 = v22;
      swift_bridgeObjectRetain();
      uint64_t v119 = v25;
      swift_bridgeObjectRetain();
      uint64_t v117 = v24;
      swift_bridgeObjectRetain();
      unint64_t v114 = v27;
      swift_bridgeObjectRetain();
      uint64_t v109 = v28;
      uint64_t v110 = v30;
      uint64_t v111 = v29;
      sub_10000ED14(v28, 0LL, v118, v29, v30);
      swift_bridgeObjectRetain();
      uint64_t v31 = Set.init(minimumCapacity:)(v112);
      uint64_t v122 = v31;
      uint64_t v32 = *(void *)(v23 + 16);
      if (v32)
      {
        uint64_t v33 = (uint64_t *)(v23 + 40);
        uint64_t v34 = v104;
        do
        {
          uint64_t v35 = *(v33 - 1);
          uint64_t v36 = *v33;
          swift_bridgeObjectRetain();
          sub_100042BE4(v121, v35, v36);
          swift_bridgeObjectRelease(v121[1]);
          v33 += 2;
          --v32;
        }

        while (v32);
        swift_bridgeObjectRelease(v23);
        uint64_t v108 = v122;
      }

      else
      {
        uint64_t v108 = v31;
        swift_bridgeObjectRelease(v23);
        uint64_t v34 = v104;
      }

      uint64_t v37 = v120;
      uint64_t v112 = v23;
      int64_t v38 = *(void *)(v120 + 16);
      if (v38)
      {
        v121[0] = (uint64_t)_swiftEmptyArrayStorage;
        swift_bridgeObjectRetain();
        sub_100057E64(0LL, v38, 0);
        unint64_t v39 = (void *)v121[0];
        unint64_t v40 = (uint64_t *)(v37 + 40);
        do
        {
          uint64_t v41 = *v40;
          *uint64_t v11 = *(v40 - 1);
          v11[1] = v41;
          swift_storeEnumTagMultiPayload(v11, v34, 0LL);
          v121[0] = (uint64_t)v39;
          unint64_t v42 = v39[2];
          unint64_t v43 = v39[3];
          swift_bridgeObjectRetain();
          if (v42 >= v43 >> 1)
          {
            sub_100057E64(v43 > 1, v42 + 1, 1);
            unint64_t v39 = (void *)v121[0];
          }

          v40 += 2;
          void v39[2] = v42 + 1;
          sub_10000EEB0( (uint64_t)v11,  (uint64_t)v39 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
          + *(void *)(v9 + 72) * v42,
            type metadata accessor for EventValue);
          --v38;
        }

        while (v38);
        swift_bridgeObjectRelease(v120);
      }

      else
      {
        unint64_t v39 = _swiftEmptyArrayStorage;
      }

      uint64_t v44 = v119;
      uint64_t v45 = *(void *)(v119 + 16);
      swift_bridgeObjectRetain();
      uint64_t v46 = Set.init(minimumCapacity:)(v45);
      uint64_t v47 = *(void *)(v44 + 16);
      if (v47)
      {
        uint64_t v48 = 0LL;
        uint64_t v49 = v44 + 32;
        do
        {
          uint64_t v50 = v46 + 56;
          while (1)
          {
            uint64_t v51 = *(void *)(v49 + 8 * v48++);
            uint64_t v52 = static Hasher._hash(seed:_:)(*(void *)(v46 + 40), v51);
            uint64_t v53 = -1LL << *(_BYTE *)(v46 + 32);
            unint64_t v54 = v52 & ~v53;
            if (((*(void *)(v50 + ((v54 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v54) & 1) == 0) {
              break;
            }
            uint64_t v55 = *(void *)(v46 + 48);
            if (*(void *)(v55 + 8 * v54) != v51)
            {
              uint64_t v56 = ~v53;
              do
              {
                unint64_t v54 = (v54 + 1) & v56;
                if (((*(void *)(v50 + ((v54 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v54) & 1) == 0) {
                  goto LABEL_35;
                }
              }

              while (*(void *)(v55 + 8 * v54) != v51);
            }

            if (v48 == v47) {
              goto LABEL_36;
            }
          }

LABEL_35:
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v46);
          v121[0] = v46;
          sub_100043D18(v51, v54, isUniquelyReferenced_nonNull_native);
          uint64_t v46 = v121[0];
          swift_bridgeObjectRelease(0x8000000000000000LL);
        }

        while (v48 != v47);
LABEL_36:
        uint64_t v44 = v119;
        swift_bridgeObjectRelease(v119);
        uint64_t v9 = v116;
      }

      else
      {
        swift_bridgeObjectRelease(v44);
      }

      uint64_t v58 = v117;
      uint64_t v59 = *(void *)(v117 + 16);
      swift_bridgeObjectRetain();
      uint64_t v60 = Set.init(minimumCapacity:)(v59);
      uint64_t v61 = *(void *)(v58 + 16);
      if (v61)
      {
        uint64_t v62 = v58;
        uint64_t v63 = 0LL;
        uint64_t v64 = v62 + 32;
        do
        {
          uint64_t v65 = v60 + 56;
          while (1)
          {
            uint64_t v66 = *(void *)(v64 + 8 * v63++);
            uint64_t v67 = static Hasher._hash(seed:_:)(*(void *)(v60 + 40), v66);
            uint64_t v68 = -1LL << *(_BYTE *)(v60 + 32);
            unint64_t v69 = v67 & ~v68;
            if (((*(void *)(v65 + ((v69 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v69) & 1) == 0) {
              break;
            }
            uint64_t v70 = *(void *)(v60 + 48);
            if (*(void *)(v70 + 8 * v69) != v66)
            {
              uint64_t v71 = ~v68;
              do
              {
                unint64_t v69 = (v69 + 1) & v71;
                if (((*(void *)(v65 + ((v69 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v69) & 1) == 0) {
                  goto LABEL_48;
                }
              }

              while (*(void *)(v70 + 8 * v69) != v66);
            }

            if (v63 == v61) {
              goto LABEL_49;
            }
          }

    uint64_t v22 = swift_bridgeObjectRelease(v14);
    sub_100021B84(v22);
    uint64_t v23 = sub_100020E38(v25);
    if (!v1) {
      uint64_t v10 = (void *)v23;
    }
    goto LABEL_38;
  }

  __break(1u);
  return result;
}

        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }

      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }

  swift_bridgeObjectRelease(v4);
  sub_10002F45C();
  if (v0)
  {
    sub_10002F66C();
    goto LABEL_5;
  }

  sub_10002F8C8();
  if (!v27 & v26)
  {
    if (v24[8]) {
      goto LABEL_14;
    }
    if (v25 < 0xC0) {
      goto LABEL_31;
    }
    if (v24[9]) {
      goto LABEL_14;
    }
    if (v25 < 0x100) {
      goto LABEL_31;
    }
    if (v24[10]) {
      goto LABEL_14;
    }
    if (v25 < 0x140) {
      goto LABEL_31;
    }
    if (v24[11])
    {
LABEL_14:
      sub_10002F684();
LABEL_5:
      sub_10002F934(v7);
      uint64_t v9 = qword_1000933C0;
      *(void *)(v1 + 624) = qword_1000933C0;
      if (v9)
      {
        sub_10002F4E8(*(void *)(v8 + 48));
        sub_100010324();
LABEL_17:
        sub_100026B34();
        sub_10002F56C(v29, v30, v31);
        return;
      }

      goto LABEL_34;
    }

    uint64_t v36 = v25 >> 6;
    uint64_t v37 = 12LL;
    while (v37 - 7 < v36)
    {
      if (v24[v37++]) {
        goto LABEL_14;
      }
    }
  }

LABEL_48:
          char v72 = swift_isUniquelyReferenced_nonNull_native(v60);
          v121[0] = v60;
          sub_100043D18(v66, v69, v72);
          uint64_t v60 = v121[0];
          swift_bridgeObjectRelease(0x8000000000000000LL);
        }

        while (v63 != v61);
LABEL_49:
        uint64_t v58 = v117;
        swift_bridgeObjectRelease(v117);
        uint64_t v9 = v116;
        uint64_t v44 = v119;
      }

      else
      {
        swift_bridgeObjectRelease(v58);
      }

      uint64_t v73 = v113;
      unint64_t v74 = v114;
      if (v113 == 0x776F6C6C61LL && v114 == 0xE500000000000000LL)
      {
        unint64_t v76 = 0xE500000000000000LL;
LABEL_58:
        swift_bridgeObjectRelease(v76);
        BOOL v77 = &unk_100085020;
        NSString v78 = &off_1000853B8;
        goto LABEL_59;
      }

      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x776F6C6C61LL, 0xE500000000000000LL, v113, v114, 0LL) & 1) != 0)
      {
        unint64_t v76 = v74;
        goto LABEL_58;
      }

      if (v73 == 0x65766F6D6572LL && v74 == 0xE600000000000000LL)
      {
        unint64_t v89 = 0xE600000000000000LL;
LABEL_75:
        swift_bridgeObjectRelease(v89);
        BOOL v77 = &unk_1000850A0;
        NSString v78 = (char **)&off_1000853D8;
        goto LABEL_59;
      }

      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65766F6D6572LL, 0xE600000000000000LL, v73, v74, 0LL) & 1) != 0)
      {
        unint64_t v89 = v74;
        goto LABEL_75;
      }

      if (v73 == 0x363532616873LL && v74 == 0xE600000000000000LL)
      {
        unint64_t v91 = 0xE600000000000000LL;
LABEL_83:
        swift_bridgeObjectRelease(v91);
        BOOL v77 = &unk_100085120;
        NSString v78 = (char **)&off_1000853F8;
        goto LABEL_59;
      }

      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x363532616873LL, 0xE600000000000000LL, v73, v74, 0LL) & 1) != 0)
      {
        unint64_t v91 = v74;
        goto LABEL_83;
      }

      if (v73 == 0x73696C6574696877LL && v74 == 0xEF7365756C615674LL)
      {
        unint64_t v93 = 0xEF7365756C615674LL;
LABEL_91:
        swift_bridgeObjectRelease(v93);
        BOOL v77 = &unk_1000851A0;
        NSString v78 = (char **)&off_100085418;
        goto LABEL_59;
      }

      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73696C6574696877LL, 0xEF7365756C615674LL, v73, v74, 0LL) & 1) != 0)
      {
        unint64_t v93 = v74;
        goto LABEL_91;
      }

      if (v73 == 0x73696C6B63616C62LL && v74 == 0xEF7365756C615674LL)
      {
        unint64_t v95 = 0xEF7365756C615674LL;
LABEL_99:
        swift_bridgeObjectRelease(v95);
        BOOL v77 = &unk_100085220;
        NSString v78 = (char **)&off_100085438;
        goto LABEL_59;
      }

      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73696C6B63616C62LL, 0xEF7365756C615674LL, v73, v74, 0LL) & 1) != 0)
      {
        unint64_t v95 = v74;
        goto LABEL_99;
      }

      if (v73 == 0xD000000000000018LL && v74 == v102)
      {
        unint64_t v96 = v103 | 0x8000000000000000LL;
        goto LABEL_105;
      }

      if ((_stringCompareWithSmolCheck(_:_:expecting:)( 0xD000000000000018LL,  v103 | 0x8000000000000000LL,  v73,  v74,  0LL) & 1) != 0)
      {
        unint64_t v96 = v74;
LABEL_105:
        swift_bridgeObjectRelease(v96);
        BOOL v77 = &unk_1000852A0;
        NSString v78 = (char **)&off_100085458;
LABEL_59:
        swift_bridgeObjectRelease(v58);
        swift_bridgeObjectRelease(v44);
        swift_bridgeObjectRelease(v120);
        swift_bridgeObjectRelease(v112);
        sub_10000ED64(v109, 0LL, v118, v111, v110);
LABEL_60:
        uint64_t v79 = (void (*)(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X2>, uint64_t@<X3>, uint64_t@<X8>))v78[1];
        v121[3] = (uint64_t)v77;
        v121[4] = (uint64_t)v78;
        v80 = sub_10000EDB4(v121);
        v79(v108, (uint64_t)v39, v46, v60, (uint64_t)v80);
        uint64_t v81 = v123;
        uint64_t v82 = swift_isUniquelyReferenced_nonNull_native(v123);
        if ((v82 & 1) == 0)
        {
          sub_100004E60(0, *(void *)(v81 + 16) + 1LL, 1, v81);
          uint64_t v81 = v82;
          uint64_t v123 = v82;
        }

        unint64_t v84 = *(void *)(v81 + 16);
        unint64_t v83 = *(void *)(v81 + 24);
        if (v84 >= v83 >> 1)
        {
          sub_100004E60(v83 > 1, v84 + 1, 1, v81);
          uint64_t v81 = v82;
          uint64_t v123 = v82;
        }

        __chkstk_darwin(v82);
        uint64_t v86 = (uint64_t *)((char *)&v101 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0LL));
        (*(void (**)(uint64_t *, uint64_t *))(v87 + 16))(v86, v80);
        sub_10000EDF0(v84, (uint64_t)v86, &v123, (uint64_t)v77, (uint64_t)v78);
        uint64_t v123 = v81;
        sub_100005F54(v121);
        uint64_t v9 = v116;
        goto LABEL_65;
      }

      if (v73 == 0x646E65707061LL && v74 == 0xE600000000000000LL)
      {
        unint64_t v98 = 0xE600000000000000LL;
      }

      else
      {
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646E65707061LL, 0xE600000000000000LL, v73, v74, 0LL) & 1) == 0)
        {
          if (v73 == 0x646E6570657270LL && v74 == 0xE700000000000000LL)
          {
            swift_bridgeObjectRelease(0xE700000000000000LL);
            BOOL v77 = &unk_1000853A0;
            NSString v78 = (char **)&off_100085498;
            goto LABEL_59;
          }

          char v100 = _stringCompareWithSmolCheck(_:_:expecting:)(0x646E6570657270LL, 0xE700000000000000LL, v73, v74, 0LL);
          swift_bridgeObjectRelease(v74);
          swift_bridgeObjectRelease(v58);
          swift_bridgeObjectRelease(v44);
          swift_bridgeObjectRelease(v120);
          swift_bridgeObjectRelease(v112);
          sub_10000ED64(v109, 0LL, v118, v111, v110);
          if ((v100 & 1) != 0)
          {
            BOOL v77 = &unk_1000853A0;
            NSString v78 = (char **)&off_100085498;
            goto LABEL_60;
          }

          swift_bridgeObjectRelease(v60);
          swift_bridgeObjectRelease(v46);
          swift_bridgeObjectRelease(v39);
          swift_bridgeObjectRelease(v108);
LABEL_65:
          a1 = v107;
          uint64_t v18 = v106;
          unint64_t v19 = v115;
          uint64_t v20 = v105;
          goto LABEL_66;
        }

        unint64_t v98 = v74;
      }

      swift_bridgeObjectRelease(v98);
      BOOL v77 = &unk_100085320;
      NSString v78 = (char **)&off_100085478;
      goto LABEL_59;
    }

LABEL_66:
    if (++v19 == v18) {
      goto LABEL_67;
    }
  }

  __break(1u);
}

uint64_t sub_10000CD6C(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t sub_10000CD9C()
{
  uint64_t result = sub_10000CDB8();
  qword_10008A828 = result;
  return result;
}

uint64_t sub_10000CDB8()
{
  uint64_t v0 = type metadata accessor for Data.Deallocator(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t size = 0LL;
  uint64_t v4 = _NSGetMachExecuteHeader();
  uint64_t v5 = getsectiondata(v4, "__TEXT", "__info_plist", &size);
  if (v5 && (unint64_t v6 = size) != 0)
  {
    if ((size & 0x8000000000000000LL) != 0) {
      __break(1u);
    }
    int v7 = v5;
    (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for Data.Deallocator.none(_:), v0);
    uint64_t v8 = Data.init(bytesNoCopy:count:deallocator:)(v7, v6, v3);
    unint64_t v10 = v9;
    uint64_t v11 = type metadata accessor for PropertyListDecoder(0LL);
    swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v12 = PropertyListDecoder.init()();
    uint64_t v45 = 100LL;
    uint64_t v13 = objc_autoreleasePoolPush();
    unint64_t v14 = sub_10000D8C0();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:format:)( v48,  &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot,  v8,  v10,  &v45,  &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot,  v14);
    objc_autoreleasePoolPop(v13);
    uint64_t v15 = v48[0];
    unint64_t v16 = v48[1];
    uint64_t v17 = sub_10000534C(&qword_10008A838);
    uint64_t inited = swift_initStackObject(v17, v47);
    *(_OWORD *)(inited + 16) = xmmword_100069590;
    *(void *)(inited + 32) = kSecAttrKeyType;
    *(void *)(inited + 40) = kSecAttrKeyTypeRSA;
    *(void *)(inited + 48) = kSecAttrKeyClass;
    *(void *)(inited + 56) = kSecAttrKeyClassPublic;
    unint64_t v19 = (id)kSecAttrKeyType;
    uint64_t v20 = (id)kSecAttrKeyTypeRSA;
    uint64_t v21 = (id)kSecAttrKeyClass;
    uint64_t v22 = (id)kSecAttrKeyClassPublic;
    sub_10000D8FC(v15, v16);
    type metadata accessor for CFString(0LL);
    uint64_t v24 = v23;
    sub_10000E63C(&qword_10008A670, (uint64_t (*)(uint64_t))type metadata accessor for CFString);
    uint64_t v26 = Dictionary.init(dictionaryLiteral:)(inited, v24, v24, v25);
    Class isa = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
    sub_100004C44(v15, v16);
    uint64_t v28 = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v26);
    SecKeyRef v29 = SecKeyCreateWithData(isa, v28, 0LL);

    if (v29)
    {
      sub_100004C44(v15, v16);
      swift_release(v12);
      sub_100004C44(v8, v10);
      return (uint64_t)v29;
    }

    if (qword_100089FC8 != -1) {
      swift_once(&qword_100089FC8, sub_100009054);
    }
    uint64_t v38 = type metadata accessor for Logger(0LL);
    uint64_t v39 = sub_10000D34C(v38, (uint64_t)qword_100093260);
    unint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v41 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v40, v41))
    {
      unint64_t v42 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "unable to parse storebag key", v42, 2u);
      swift_slowDealloc(v42, -1LL, -1LL);
    }

    unint64_t v36 = 0xD00000000000001CLL;
    uint64_t v43 = 457LL;
    uint64_t v37 = "unable to parse storebag key";
  }

  else
  {
    if (qword_100089FC8 != -1) {
      swift_once(&qword_100089FC8, sub_100009054);
    }
    uint64_t v31 = type metadata accessor for Logger(0LL);
    uint64_t v32 = sub_10000D34C(v31, (uint64_t)qword_100093260);
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "unable to load Info.plist section", v35, 2u);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    unint64_t v36 = 0xD000000000000021LL;
    uint64_t v43 = 441LL;
    uint64_t v37 = "unable to load Info.plist section";
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v36,  (unint64_t)(v37 - 32) | 0x8000000000000000LL,  "rtcreportingd/Storebag.swift",  28LL,  2LL,  v43,  0);
  __break(1u);
  return result;
}

uint64_t sub_10000D34C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

BOOL sub_10000D364(Swift::String a1)
{
  v1._rawValue = &off_100081A48;
  return sub_10000D4C8(a1, v1);
}

uint64_t sub_10000D384()
{
  return 0x726F706552435452LL;
}

void *sub_10000D3A4(void *a1)
{
  uint64_t v3 = sub_10000534C(&qword_10008A8F8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  unint64_t v9 = sub_100005F30(a1, v7);
  unint64_t v10 = sub_10000F738();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot.CodingKeys,  &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    sub_100005F54(a1);
  }

  else
  {
    unint64_t v11 = sub_10000F774();
    KeyedDecodingContainer.decode<A>(_:forKey:)( &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting,  v12,  v3,  &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting,  v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    unint64_t v9 = v14;
    sub_100005F54(a1);
  }

  return v9;
}

BOOL sub_10000D4C8(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  sub_100006AF0();
  return v5 != 0;
}

BOOL sub_10000D504(Swift::String a1)
{
  v1._rawValue = &off_100081A80;
  return sub_10000D4C8(a1, v1);
}

uint64_t sub_10000D524()
{
  return 1LL;
}

unint64_t sub_10000D52C()
{
  return 0xD000000000000011LL;
}

void *sub_10000D548(void *a1)
{
  uint64_t v3 = sub_10000534C(&qword_10008A988);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  unint64_t v9 = sub_100005F30(a1, v7);
  unint64_t v10 = sub_10000FD80();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting.CodingKeys,  &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    sub_100005F54(a1);
  }

  else
  {
    unint64_t v11 = sub_10000F840();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, v12, v3, &type metadata for Data, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    unint64_t v9 = v14;
    sub_100005F54(a1);
  }

  return v9;
}

BOOL sub_10000D67C@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_100081A48;
  BOOL result = sub_10000D4C8(*a1, v3);
  *a2 = result;
  return result;
}

void sub_10000D6B4(uint64_t *a1@<X8>)
{
  *a1 = sub_10000D384();
  a1[1] = v2;
  sub_100006B44();
}

BOOL sub_10000D6D8@<W0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  BOOL result = sub_10000D364(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10000D700(uint64_t a1)
{
  unint64_t v2 = sub_10000F738();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000D728(uint64_t a1)
{
  unint64_t v2 = sub_10000F738();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10000D750@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  BOOL result = sub_10000D3A4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

BOOL sub_10000D784@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_100081A80;
  BOOL result = sub_10000D4C8(*a1, v3);
  *a2 = result;
  return result;
}

void sub_10000D7BC(unint64_t *a1@<X8>)
{
  *a1 = sub_10000D52C();
  a1[1] = v2;
  sub_100006B44();
}

BOOL sub_10000D7E0@<W0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  BOOL result = sub_10000D504(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10000D808()
{
  return sub_1000090C8();
}

uint64_t sub_10000D820@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_10000D524();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10000D848(uint64_t a1)
{
  unint64_t v2 = sub_10000FD80();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000D870(uint64_t a1)
{
  unint64_t v2 = sub_10000FD80();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10000D898@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10000D548(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

unint64_t sub_10000D8C0()
{
  unint64_t result = qword_10008A830;
  if (!qword_10008A830)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069984, &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot);
    atomic_store(result, (unint64_t *)&qword_10008A830);
  }

  return result;
}

uint64_t sub_10000D8FC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t *sub_10000D940(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

char *sub_10000D980(int64_t a1)
{
  uint64_t v3 = *v1;
  unint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  void *v1 = v3;
  if (!(_DWORD)result || a1 > *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v3 + 16) <= a1) {
      int64_t v5 = a1;
    }
    else {
      int64_t v5 = *(void *)(v3 + 16);
    }
    return sub_100057E90(result, v5, 0);
  }

  return result;
}

void sub_10000D9E4(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_100010214();
    sub_1000100B8( (uint64_t)"Fatal error",  v3,  v4,  (uint64_t)"Can't construct Array with count < 0",  v5,  v6,  (uint64_t)"Swift/Array.swift");
    __break(1u);
  }

  else
  {
    if (a1)
    {
      uint64_t v2 = sub_100006C8C();
      *(void *)(static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v2) + 16) = a1;
    }

    sub_100006C8C();
    sub_100010358();
  }

void sub_10000DA6C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  *(void *)(v5 + 16) = a1 + 1;
  uint64_t v6 = type metadata accessor for SessionConfiguration.Backend(0LL);
  sub_10000EEB0( a2,  v5 + ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL))
  + *(void *)(*(void *)(v6 - 8) + 72LL) * a1,
    type metadata accessor for SessionConfiguration.Backend);
}

unint64_t sub_10000DAD4(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (*(void *)(a3 + 16) > result)
    {
      return result;
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_10000DAF4(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease(a1);
  }
  uint64_t v37 = swift_bridgeObjectRetain(a1);
  for (i = (void *)(v37 + 40); ; i += 2)
  {
    unsigned __int8 v8 = *((_BYTE *)i - 8);
    uint64_t v9 = *i;
    unsigned __int8 v41 = v8;
    unint64_t v10 = (void *)*a3;
    unint64_t v11 = sub_100033AB0(v8, v6);
    uint64_t v13 = v10[2];
    BOOL v14 = (v12 & 1) == 0;
    uint64_t v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&unk_100082AD8);
      __break(1u);
      goto LABEL_20;
    }

    unint64_t v16 = v11;
    char v17 = v12;
    uint64_t v18 = v10[3];
    swift_bridgeObjectRetain(v9);
    if (v18 < v15) {
      break;
    }
    if ((a2 & 1) != 0)
    {
      if ((v17 & 1) != 0) {
        goto LABEL_14;
      }
    }

    else
    {
      sub_10000534C(&qword_10008A938);
      _NativeDictionary.copy()();
      if ((v17 & 1) != 0) {
        goto LABEL_14;
      }
    }

LABEL_10:
    uint64_t v21 = (void *)*a3;
    *(void *)(*a3 + 8 * (v16 >> 6) + 64) |= 1LL << v16;
    *(_BYTE *)(v21[6] + v16) = v8;
    *(void *)(v21[7] + 8 * v16) = v9;
    uint64_t v22 = v21[2];
    BOOL v23 = __OFADD__(v22, 1LL);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_18;
    }
    v21[2] = v24;
    a2 = 1;
    if (!--v3) {
      return swift_bridgeObjectRelease_n(v37, 2LL);
    }
  }

  sub_100057010(v15, a2 & 1);
  unint64_t v20 = sub_100033AB0(v8, v19);
  if ((v17 & 1) != (v6 & 1)) {
    goto LABEL_19;
  }
  unint64_t v16 = v20;
  if ((v17 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v25 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0LL, 0LL);
  swift_willThrow(v25, v26, v27, v28, v29, v30, v31, v32);
  uint64_t v40 = v25;
  swift_errorRetain(v25);
  uint64_t v33 = sub_10000534C(&qword_10008A8A8);
  if ((swift_dynamicCast(v33, &v40, v33, &type metadata for _MergeError, 0LL) & 1) == 0)
  {
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease_n(v37, 2LL);
    return swift_errorRelease(v40);
  }

    uint64_t v29 = (void *)*v55;
    *(void *)(*v55 + 8 * (v22 >> 6) + 64) |= 1LL << v22;
    uint64_t v30 = (uint64_t *)(v29[6] + 16 * v22);
    *uint64_t v30 = v17;
    v30[1] = v18;
    unsigned __int8 v8 = v52;
    unint64_t v16 = v19;
    sub_10000EEB0((uint64_t)v52, v29[7] + *(void *)(v54 + 72) * v22, v19);
    uint64_t v31 = v29[2];
    uint64_t v32 = __OFADD__(v31, 1LL);
    uint64_t v33 = v31 + 1;
    if (v32) {
      goto LABEL_18;
    }
    v29[2] = v33;
    uint64_t v13 = v51;
    v15 += v50;
    a2 = 1;
    if (!--v14) {
      return swift_bridgeObjectRelease_n(v49, 2LL);
    }
  }

  sub_100057518(v25, a2 & 1);
  uint64_t v27 = sub_100033A58(v17, v18);
  if ((v26 & 1) != (v28 & 1)) {
    goto LABEL_19;
  }
  uint64_t v22 = v27;
  if ((v26 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  os_log_type_t v34 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0LL, 0LL);
  swift_willThrow(v34, v35, v36, v37, v38, v39, v40, v41);
  uint64_t v60 = v34;
  swift_errorRetain(v34);
  unint64_t v42 = sub_10000534C(&qword_10008A8A8);
  if ((swift_dynamicCast(v42, &v60, v42, &type metadata for _MergeError, 0LL) & 1) == 0)
  {
    uint64_t v43 = v49;
    swift_bridgeObjectRelease(v49);
    sub_100005FF0((uint64_t)v52, type metadata accessor for CachedSession);
    uint64_t v44 = v59;
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v44);
    return swift_errorRelease(v60);
  }

  __break(1u);
  return result;
}

  sub_10001015C();
LABEL_12:
  sub_10000FFD8();
  return a3;
}

    uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  sub_100008348();
}

uint64_t sub_10000DDA8(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v43 = v4;
  if (!v4) {
    return swift_bridgeObjectRelease_n(v3, 2LL);
  }
  uint64_t v5 = 0LL;
  unint64_t v6 = 0LL;
  uint64_t v42 = v3;
  while (1)
  {
    if (v6 >= *(void *)(v3 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_24;
    }

    __int128 v48 = *(_OWORD *)(v3 + v5 + 80);
    char v7 = *(_BYTE *)(v3 + v5 + 64);
    uint64_t v8 = *(void *)(v3 + v5 + 72);
    uint64_t v10 = *(void *)(v3 + v5 + 48);
    uint64_t v9 = *(void *)(v3 + v5 + 56);
    uint64_t v11 = *(void *)(v3 + v5 + 32);
    uint64_t v12 = *(void *)(v3 + v5 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v12) {
      return swift_bridgeObjectRelease_n(v3, 2LL);
    }
    uint64_t v44 = v10;
    uint64_t v45 = v9;
    uint64_t v41 = v13;
    v51[0] = v11;
    v51[1] = v12;
    BOOL v14 = (void *)*a3;
    unint64_t v16 = sub_100033A58(v11, v12);
    uint64_t v17 = v14[2];
    BOOL v18 = (v15 & 1) == 0;
    uint64_t v19 = v17 + v18;
    if (__OFADD__(v17, v18)) {
      goto LABEL_21;
    }
    char v20 = v15;
    if (v14[3] < v19) {
      break;
    }
    if ((a2 & 1) != 0)
    {
      if ((v15 & 1) != 0) {
        goto LABEL_16;
      }
    }

    else
    {
      sub_10000534C(&qword_10008A8A0);
      _NativeDictionary.copy()();
      if ((v20 & 1) != 0) {
        goto LABEL_16;
      }
    }

LABEL_24:
  uint64_t v49 = 0LL;
  unint64_t v50 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v39._object = (void *)0x800000010006D820LL;
  v39._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v39);
  _print_unlocked<A, B>(_:_:)( v51,  &v49,  &type metadata for String,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v40._uint64_t countAndFlagsBits = 39LL;
  v40._object = (void *)0xE100000000000000LL;
  String.append(_:)(v40);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v49,  v50,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

      uint64_t v26 = sub_1000208B8();
      sub_10003E41C((uint64_t)v7, v27, v28, v26);
      uint64_t v17 = 0LL;
    }

    uint64_t v24 = *(void *)(v36 + 8 * v25);
    if (v24)
    {
LABEL_13:
      BOOL v23 = v25;
LABEL_10:
      uint64_t v17 = (v24 - 1) & v24;
      uint64_t v19 = __clz(__rbit64(v24)) + (v23 << 6);
      uint64_t v13 = v23;
      continue;
    }

    break;
  }

  while (1)
  {
    BOOL v23 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v23 >= v37)
    {
      uint64_t v13 = v35;
      goto LABEL_24;
    }

    uint64_t v24 = *(void *)(v36 + 8 * v23);
    ++v25;
    if (v24) {
      goto LABEL_10;
    }
  }

  uint64_t v45 = v16;
  _s10RTCUtility9XPCObjectOwst_0((uint64_t)v11, 1LL, 1LL, v3);
  uint64_t v19 = 0LL;
LABEL_25:
  void *v1 = v12;
  v1[1] = v13;
  uint64_t v33 = v45;
  v1[2] = v15;
  v1[3] = v33;
  v1[4] = v19;
  uint64_t v34 = (void (*)(uint64_t))v1[5];
  sub_100058D2C((uint64_t)v11, (uint64_t)v9, &qword_10008B028);
  uint64_t v35 = 1LL;
  if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v9, 1LL, v3) != 1)
  {
    uint64_t v36 = (uint64_t)v9;
    uint64_t v37 = (uint64_t)v41;
    sub_100058D2C(v36, (uint64_t)v41, (uint64_t *)&unk_10008B960);
    v34(v37);
    sub_100035228(v37, (uint64_t *)&unk_10008B960);
    uint64_t v35 = 0LL;
  }

  uint64_t v38 = sub_10000534C(&qword_10008A810);
  return _s10RTCUtility9XPCObjectOwst_0(a1, v35, 1LL, v38);
}

uint64_t sub_10000E108(uint64_t a1, char a2, void *a3)
{
  uint64_t v55 = a3;
  uint64_t v6 = type metadata accessor for CachedSession(0LL);
  uint64_t v54 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10000534C(&qword_10008A8B8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v13 = (uint64_t *)((char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14) {
    return swift_bridgeObjectRelease(a1);
  }
  uint64_t v48 = v3;
  uint64_t v49 = a1;
  uint64_t v53 = (uint64_t)v13 + *(int *)(v10 + 48);
  uint64_t v15 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  uint64_t v50 = *(void *)(v11 + 72);
  swift_bridgeObjectRetain();
  unint64_t v16 = type metadata accessor for CachedSession;
  uint64_t v51 = v13;
  uint64_t v52 = v8;
  while (1)
  {
    sub_10000EE68(v15, (uint64_t)v13);
    uint64_t v18 = v13[1];
    uint64_t v58 = *v13;
    uint64_t v17 = v58;
    uint64_t v59 = v18;
    uint64_t v19 = v16;
    sub_10000EEB0(v53, (uint64_t)v8, v16);
    char v20 = (void *)*v55;
    unint64_t v22 = sub_100033A58(v17, v18);
    uint64_t v23 = v20[2];
    BOOL v24 = (v21 & 1) == 0;
    uint64_t v25 = v23 + v24;
    if (__OFADD__(v23, v24))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_20;
    }

    char v26 = v21;
    if (v20[3] < v25) {
      break;
    }
    if ((a2 & 1) != 0)
    {
      if ((v21 & 1) != 0) {
        goto LABEL_14;
      }
    }

    else
    {
      sub_10000534C((uint64_t *)&unk_10008B990);
      _NativeDictionary.copy()();
      if ((v26 & 1) != 0) {
        goto LABEL_14;
      }
    }

char *sub_10000E4BC()
{
  uint64_t v1 = *v0;
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native(*v0);
  void *v0 = v1;
  return result;
}

char *sub_10000E504(char *result)
{
  unint64_t v2 = *(void *)(*(void *)v1 + 24LL);
  return result;
}

__n128 sub_10000E52C(uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *((void *)a2 + 3);
  char v6 = *((_BYTE *)a2 + 32);
  uint64_t v7 = *((void *)a2 + 5);
  uint64_t v8 = *v2;
  *(void *)(v8 + 16) = a1 + 1;
  uint64_t v9 = v8 + (a1 << 6);
  *(_OWORD *)(v9 + 32) = v3;
  *(void *)(v9 + 48) = v4;
  *(void *)(v9 + 56) = v5;
  *(_BYTE *)(v9 + 64) = v6;
  *(void *)(v9 + 72) = v7;
  __n128 result = (__n128)a2[3];
  *(__n128 *)(v9 + 80) = result;
  return result;
}

uint64_t sub_10000E568(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v5 += a1 - result;
  }

  BOOL v6 = __OFSUB__(a2, a1);
  uint64_t v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v8 = __DataStorage._length.getter();
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = v5 + v9;
  if (v5) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v12 = sub_100010314();
  sub_10000E63C((unint64_t *)&unk_10008C560, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v5, v11, v12, v13);
}

uint64_t sub_10000E628(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10000D8FC(result, a2);
  }
  return result;
}

void sub_10000E63C(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v3 = a2(255LL);
    atomic_store(sub_1000102DC(v3), a1);
  }

  sub_100006B44();
}

uint64_t sub_10000E670(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_10000E6B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1;
  __int16 v8 = a2;
  char v9 = BYTE2(a2);
  char v10 = BYTE3(a2);
  char v11 = BYTE4(a2);
  uint64_t v3 = (char *)&v7 + a3;
  char v12 = BYTE5(a2);
  uint64_t v4 = sub_100010314();
  sub_10000E63C((unint64_t *)&unk_10008C560, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256);
  return dispatch thunk of HashFunction.update(bufferPointer:)(&v7, v3, v4, v5);
}

unint64_t sub_10000E7BC()
{
  unint64_t result = qword_10008A868;
  if (!qword_10008A868)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006994C, &type metadata for Storebag._StorebagRoot);
    atomic_store(result, (unint64_t *)&qword_10008A868);
  }

  return result;
}

uint64_t sub_10000E7F8(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != 1)
  {
    if (a4) {
      return result;
    }
    swift_bridgeObjectRetain(a2);
    unint64_t result = a3;
  }

  return swift_bridgeObjectRetain(result);
}

uint64_t sub_10000E834(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != 1)
  {
    if (a4) {
      return result;
    }
    swift_bridgeObjectRelease(a2);
    unint64_t result = a3;
  }

  return swift_bridgeObjectRelease(result);
}

uint64_t sub_10000E870(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_10000E888(result, a2, a3 & 1);
  }
  return result;
}

uint64_t sub_10000E888(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    a1 = a2;
  }
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_10000E894(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_10000E8AC(result, a2, a3 & 1);
  }
  return result;
}

uint64_t sub_10000E8AC(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    a1 = a2;
  }
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_10000E8B8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10000E8DC()
{
  return sub_10000CD6C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

_BYTE **sub_10000E8E8(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  return sub_10001A0C8(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_10000E8F4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10000E918()
{
  return sub_1000198D8(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10000E920(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000198F8(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_10000E930(uint64_t result, char a2)
{
  if (a2 != -1) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

unint64_t sub_10000E944()
{
  unint64_t result = qword_10008A878;
  if (!qword_10008A878)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10008A878);
  }

  return result;
}

uint64_t sub_10000E980(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 160);
  unsigned __int8 v2 = *(_BYTE *)(a1 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000E870(v5, v4, v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10000EA70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 104);
  uint64_t v7 = *(void *)(a1 + 120);
  uint64_t v8 = *(void *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 136);
  uint64_t v12 = *(void *)(a1 + 168);
  uint64_t v13 = *(void *)(a1 + 160);
  uint64_t v14 = *(void *)(a1 + 192);
  uint64_t v15 = *(void *)(a1 + 208);
  uint64_t v16 = *(void *)(a1 + 224);
  unsigned __int8 v10 = *(_BYTE *)(a1 + 176);
  swift_bridgeObjectRelease(*(void *)(a1 + 40));
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  sub_10000E894(v13, v12, v10);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

void sub_10000EB70(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_10000534C(a3);
  sub_100010108(v3);
  sub_100006B44();
}

uint64_t sub_10000EB9C(uint64_t a1)
{
  uint64_t v2 = sub_10000534C(&qword_10008A840);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10000EBDC()
{
  int v1 = *(unsigned __int8 *)(v0 + 192);
  if (v1 != 255) {
    sub_10000E8AC(*(void *)(v0 + 176), *(void *)(v0 + 184), v1 & 1);
  }
  swift_bridgeObjectRelease(*(void *)(v0 + 208));
  swift_bridgeObjectRelease(*(void *)(v0 + 224));
  swift_bridgeObjectRelease(*(void *)(v0 + 240));
  return swift_deallocObject(v0, 249LL, 7LL);
}

uint64_t sub_10000EC70()
{
  return sub_10000C1F8(v0 + 16);
}

uint64_t sub_10000EC80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void *sub_10000ECC4(void *a1)
{
  return a1;
}

void *sub_10000ECEC(void *a1)
{
  return a1;
}

uint64_t sub_10000ED14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    return swift_bridgeObjectRetain(a4);
  }

  return result;
}

uint64_t sub_10000ED64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a5);
  }

  return result;
}

void *sub_10000EDB4(void *a1)
{
  int v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t sub_10000EDF0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v9 = sub_10000EDB4(&v12);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32LL))(v9, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return sub_100005ED0(&v12, v10 + 40 * a1 + 32);
}

uint64_t sub_10000EE68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000534C(&qword_10008A8B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_10000EEB0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3(0LL);
  sub_100010108(v3);
  sub_100006B44();
}

uint64_t destroy for Storebag._StorebagRoot(void *a1)
{
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t initializeWithCopy for Storebag._StorebagRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for Storebag._StorebagRoot(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  int v6 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v7);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

__n128 initializeWithTake for Storebag._StorebagRoot(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Storebag._StorebagRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  swift_bridgeObjectRelease(*(void *)(a1 + 24));
  uint64_t v6 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Storebag._StorebagRoot(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Storebag._StorebagRoot(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Storebag._StorebagRoot()
{
  return &type metadata for Storebag._StorebagRoot;
}

void type metadata accessor for StorebagKeyInfoPlistProvider()
{
}

uint64_t sub_10000F108(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10000F154 + 4 * byte_100069687[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10000F188 + 4 * byte_100069682[v4]))();
}

uint64_t sub_10000F188(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000F190(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10000F198LL);
  }
  return result;
}

uint64_t sub_10000F1A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10000F1ACLL);
  }
  *(_BYTE *)__n128 result = a2 + 3;
  return result;
}

uint64_t sub_10000F1B0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000F1B8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for StorebagEnvironment()
{
}

__n128 initializeWithTake for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for StorebagKeyInfoPlistProvider._InfoPlistRoot()
{
  return &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot;
}

uint64_t initializeWithTake for StorebagSharedValue(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t sub_10000F20C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000F22C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = 0LL;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_10000F25C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000F278(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    char v2 = 1;
  }

  else
  {
    char v2 = 0;
  }

  *(_BYTE *)(result + 8) = v2;
  return result;
}

void type metadata accessor for Storebag.Error()
{
}

uint64_t sub_10000F2A4(void *a1)
{
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t sub_10000F2D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = a2[4];
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *sub_10000F330(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t *sub_10000F3B4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  a1[2] = a2[2];
  swift_bridgeObjectRelease(a1[3]);
  uint64_t v5 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t sub_10000F410(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10000F450(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for Storebag()
{
}

uint64_t getEnumTagSinglePayload for BackendHTTP.POSTData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }

uint64_t sub_10000F52C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10000F578 + 4 * byte_100069691[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10000F5AC + 4 * byte_10006968C[v4]))();
}

uint64_t sub_10000F5AC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000F5B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10000F5BCLL);
  }
  return result;
}

uint64_t sub_10000F5C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10000F5D0LL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_10000F5D4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000F5DC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for StorebagExpedite()
{
}

void sub_10000F5F4()
{
}

unint64_t sub_10000F624()
{
  unint64_t result = qword_10008A8D0;
  if (!qword_10008A8D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069804, &unk_100082D00);
    atomic_store(result, (unint64_t *)&qword_10008A8D0);
  }

  return result;
}

unint64_t sub_10000F664()
{
  unint64_t result = qword_10008A8D8;
  if (!qword_10008A8D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000699AC, &unk_100082BE8);
    atomic_store(result, (unint64_t *)&qword_10008A8D8);
  }

  return result;
}

void sub_10000F6A0()
{
}

void sub_10000F6CC(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_1000102E8(0LL, a2);
    atomic_store(sub_1000102DC(v3), a1);
  }

  sub_100006B44();
}

unint64_t sub_10000F6FC()
{
  unint64_t result = qword_10008A8F0;
  if (!qword_10008A8F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069924, &unk_100082AD8);
    atomic_store(result, (unint64_t *)&qword_10008A8F0);
  }

  return result;
}

unint64_t sub_10000F738()
{
  unint64_t result = qword_10008A900;
  if (!qword_10008A900)
  {
    unint64_t result = swift_getWitnessTable( &unk_100069BD0,  &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008A900);
  }

  return result;
}

unint64_t sub_10000F774()
{
  unint64_t result = qword_10008A908;
  if (!qword_10008A908)
  {
    unint64_t result = swift_getWitnessTable( &unk_100069BA8,  &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting);
    atomic_store(result, (unint64_t *)&qword_10008A908);
  }

  return result;
}

unint64_t sub_10000F7B0()
{
  unint64_t result = qword_10008A918;
  if (!qword_10008A918)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069B58, &type metadata for Storebag._StorebagRoot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008A918);
  }

  return result;
}

unint64_t sub_10000F7EC()
{
  unint64_t result = qword_10008A930;
  if (!qword_10008A930)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B914, &type metadata for StorebagSharedValue);
    atomic_store(result, (unint64_t *)&qword_10008A930);
  }

  return result;
}

uint64_t sub_10000F828@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  return sub_100009B44(a1, a2);
}

unint64_t sub_10000F840()
{
  unint64_t result = qword_10008A940;
  if (!qword_10008A940)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10008A940);
  }

  return result;
}

void sub_10000F87C(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v4 = sub_1000102E8(0LL, a2);
    v2();
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v4), a1);
  }

  sub_100010234();
}

unint64_t sub_10000F8D4()
{
  unint64_t result = qword_10008A958;
  if (!qword_10008A958)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006A588, &unk_100083900);
    atomic_store(result, (unint64_t *)&qword_10008A958);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for Storebag._StorebagRoot.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA)
  {
    unsigned int v6 = *a1;
    if (v6 >= 4) {
      unsigned int v7 = v6 - 3;
    }
    else {
      unsigned int v7 = 0;
    }
    if (v7 >= 4) {
      return v7 - 3;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    unsigned int v2 = a2 + 6;
    if (a2 + 6 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_10000F960 + 4 * byte_100069696[v4]))();
  }

uint64_t storeEnumTagSinglePayload for Storebag._StorebagRoot.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 6;
  if (a3 + 6 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    LODWORD(v5) = v4;
  }
  else {
    LODWORD(v5) = 0;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_10000FA0C + 4 * byte_1000696A0[v5]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10000FA40 + 4 * byte_10006969B[v5]))();
}

uint64_t sub_10000FA40(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000FA48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10000FA50LL);
  }
  return result;
}

uint64_t sub_10000FA5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10000FA64LL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_10000FA68(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000FA70(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000FA7C(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 4) {
    return v1 - 3;
  }
  else {
    return 0LL;
  }
}

_BYTE *sub_10000FA90(_BYTE *result, int a2)
{
  if (a2) {
    *unint64_t result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for Storebag._StorebagRoot.CodingKeys()
{
  return &type metadata for Storebag._StorebagRoot.CodingKeys;
}

uint64_t sub_10000FABC()
{
  return 0LL;
}

ValueMetadata *type metadata accessor for StorebagKeyInfoPlistProvider._InfoPlistRoot.CodingKeys()
{
  return &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot.CodingKeys;
}

uint64_t *initializeBufferWithCopyOfBuffer for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting( uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_10000D8FC(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting(uint64_t a1)
{
  return sub_100004C44(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *_s13rtcreportingd28StorebagKeyInfoPlistProviderV22_InfoPlistRTCReportingVwca_0( uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_10000D8FC(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_100004C44(v5, v6);
  return a1;
}

uint64_t *assignWithTake for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100004C44(v3, v4);
  return a1;
}

uint64_t _s13rtcreportingd28StorebagKeyInfoPlistProviderV22_InfoPlistRTCReportingVwet_0( uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    {
      unsigned int v2 = *(_DWORD *)a1 + 12;
    }

    else
    {
      unsigned int v2 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
      if (v2 >= 0xC) {
        unsigned int v2 = -1;
      }
    }
  }

  else
  {
    unsigned int v2 = -1;
  }

  return v2 + 1;
}

uint64_t _s13rtcreportingd28StorebagKeyInfoPlistProviderV22_InfoPlistRTCReportingVwst_0( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)unint64_t result = a2 - 13;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting()
{
  return &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting;
}

unint64_t sub_10000FC44()
{
  unint64_t result = qword_10008A960;
  if (!qword_10008A960)
  {
    unint64_t result = swift_getWitnessTable( &unk_100069AE0,  &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008A960);
  }

  return result;
}

unint64_t sub_10000FC84()
{
  unint64_t result = qword_10008A968;
  if (!qword_10008A968)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069B08, &type metadata for Storebag._StorebagRoot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008A968);
  }

  return result;
}

unint64_t sub_10000FCC4()
{
  unint64_t result = qword_10008A970;
  if (!qword_10008A970)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069B30, &type metadata for Storebag._StorebagRoot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008A970);
  }

  return result;
}

unint64_t sub_10000FD04()
{
  unint64_t result = qword_10008A978;
  if (!qword_10008A978)
  {
    unint64_t result = swift_getWitnessTable( &unk_100069A18,  &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008A978);
  }

  return result;
}

unint64_t sub_10000FD44()
{
  unint64_t result = qword_10008A980;
  if (!qword_10008A980)
  {
    unint64_t result = swift_getWitnessTable( &unk_100069A40,  &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRoot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008A980);
  }

  return result;
}

unint64_t sub_10000FD80()
{
  unint64_t result = qword_10008A990;
  if (!qword_10008A990)
  {
    unint64_t result = swift_getWitnessTable( &unk_100069D10,  &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008A990);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for BackendGroup.Error(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t _s13rtcreportingd28StorebagKeyInfoPlistProviderV14_InfoPlistRootV10CodingKeysOwst_0( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10000FE4C + 4 * byte_1000696A5[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10000FE6C + 4 * byte_1000696AA[v4]))();
  }
}

_BYTE *sub_10000FE4C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10000FE6C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10000FE74(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10000FE7C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10000FE84(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10000FE8C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting.CodingKeys()
{
  return &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting.CodingKeys;
}

unint64_t sub_10000FEAC()
{
  unint64_t result = qword_10008A998;
  if (!qword_10008A998)
  {
    unint64_t result = swift_getWitnessTable( &unk_100069CE8,  &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008A998);
  }

  return result;
}

unint64_t sub_10000FEEC()
{
  unint64_t result = qword_10008A9A0;
  if (!qword_10008A9A0)
  {
    unint64_t result = swift_getWitnessTable( &unk_100069C20,  &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008A9A0);
  }

  return result;
}

unint64_t sub_10000FF2C()
{
  unint64_t result = qword_10008A9A8;
  if (!qword_10008A9A8)
  {
    unint64_t result = swift_getWitnessTable( &unk_100069C48,  &type metadata for StorebagKeyInfoPlistProvider._InfoPlistRTCReporting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008A9A8);
  }

  return result;
}

uint64_t sub_10000FFC8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_10000FFD8()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10000FFE0(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_10000FFF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0LL);
}

uint64_t sub_10000FFFC(uint64_t a1)
{
  return swift_allocObject(a1, 32LL, 7LL);
}

uint64_t sub_100010008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
}

uint64_t sub_100010010(uint64_t a1)
{
  return swift_slowDealloc(a1, -1LL, -1LL);
}

uint64_t sub_10001001C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000E834(a1, a2, a3, 1);
}

uint64_t sub_100010024()
{
  return sub_10000EA70(v0 + 936);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100010060(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2LL);
}

uint64_t sub_100010068()
{
  return swift_bridgeObjectRelease(v0[48]);
}

uint64_t sub_100010098()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 376));
}

uint64_t sub_1000100A0(uint64_t a1)
{
  return _s10RTCUtility9XPCObjectOwet_0(a1, 1LL, *(void *)(v1 - 136));
}

uint64_t sub_1000100B0(uint64_t a1)
{
  return swift_slowAlloc(a1, -1LL);
}

uint64_t sub_1000100B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 36LL, 2LL, a7, 17LL);
}

uint64_t sub_1000100D0(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2LL);
}

uint64_t sub_1000100D8()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000100E0()
{
  return sub_10000E888(v3, v2, v1);
}

uint64_t sub_100010108(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32LL))(v1, v2, a1);
}

uint64_t sub_100010120()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 208));
}

uint64_t sub_100010128()
{
  return (*(uint64_t (**)(void, void))(v0[41] + 8LL))(v0[24], v0[50]);
}

uint64_t sub_10001013C()
{
  return (*(uint64_t (**)(void, void))(v0[41] + 8LL))(v0[13], v0[50]);
}

uint64_t sub_100010150()
{
  return sub_100004C30(v0, v1);
}

uint64_t sub_10001015C()
{
  return swift_bridgeObjectRetain(v0);
}

void sub_100010164(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_100010170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return StringProtocol.components<A>(separatedBy:)(a1, a2, a2, a4, a4);
}

unint64_t sub_10001017C()
{
  *(void *)(v0 + 688) = 44LL;
  *(void *)(v0 + 696) = 0xE100000000000000LL;
  return sub_10000E944();
}

uint64_t sub_100010190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000E834(a1, a2, a3, 0);
}

uint64_t sub_100010198()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000101A0()
{
  return sub_100004C44(v1, v0);
}

uint64_t sub_1000101AC()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000101B4()
{
  return sub_10000E894(*(void *)(v0 + 288), *(void *)(v0 + 448), *(_DWORD *)(v0 + 312));
}

void sub_1000101C4(uint64_t a1, uint64_t a2)
{
}

  ;
}

uint64_t sub_1000101D8()
{
  return swift_release(*(void *)(v0 + 440));
}

uint64_t sub_1000101E0()
{
  return v0 + 688;
}

uint64_t sub_1000101F0()
{
  return swift_release(v0);
}

  ;
}

uint64_t sub_100010204()
{
  return swift_release(*(void *)(v0 + 392));
}

uint64_t sub_10001020C()
{
  return swift_release(v0);
}

  ;
}

void *sub_10001022C(void *a1)
{
  return sub_100005F30(a1, v1);
}

  ;
}

uint64_t sub_100010244@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_100010254()
{
  return swift_release(v0);
}

uint64_t sub_10001025C(uint64_t a1)
{
  *(void *)(v1 + 688) = a1;
  return v1 + 688;
}

uint64_t sub_100010268()
{
  return swift_release(v0);
}

uint64_t sub_100010270()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100010278()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t sub_100010290()
{
  return swift_bridgeObjectRetain(v0);
}

unint64_t sub_100010298()
{
  return 0xD00000000000002FLL;
}

uint64_t sub_1000102AC()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 280));
}

uint64_t sub_1000102B4(uint64_t a1)
{
  return _s10RTCUtility9XPCObjectOwet_0(a1, 1LL, v1);
}

uint64_t sub_1000102C0(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(v1 + 384));
}

uint64_t sub_1000102DC(uint64_t a1)
{
  return swift_getWitnessTable(v1, a1);
}

uint64_t sub_1000102E8(uint64_t a1, uint64_t *a2)
{
  return sub_10000E670(a2);
}

  ;
}

  ;
}

uint64_t sub_10001030C()
{
  return type metadata accessor for Logger(0LL);
}

uint64_t sub_100010314()
{
  return type metadata accessor for SHA256(0LL);
}

uint64_t sub_10001031C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_100010324()
{
  return swift_retain(v0);
}

void sub_10001032C()
{
  *(void *)(v0 + 688) = 44LL;
  *(void *)(v0 + 696) = 0xE100000000000000LL;
}

uint64_t sub_100010340(uint64_t a1)
{
  return sub_10000C0D0(a1, v2, *(void *)(v1 + 464), *(void *)(v1 + 472));
}

uint64_t sub_10001034C(uint64_t a1, uint64_t a2)
{
  return sub_10000E568(a1, a2);
}

  ;
}

uint64_t sub_100010364( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_bridgeObjectRelease(a10);
}

uint64_t sub_10001036C()
{
  return sub_10000E980(v0 + 936);
}

void sub_100010374()
{
}

void sub_100010380()
{
}

uint64_t sub_10001038C()
{
  return swift_arrayDestroy(v0, 2LL);
}

uint64_t sub_100010398()
{
  return swift_retain(v0);
}

uint64_t sub_1000103A0()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 472));
}

uint64_t sub_1000103A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_bridgeObjectRetain(a10);
}

uint64_t sub_1000103B4()
{
  return swift_retain(v0);
}

uint64_t sub_1000103BC(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_1000103C4()
{
  return swift_retain(v0);
}

uint64_t sub_1000103CC()
{
  return URL.init(string:)(0xD000000000000024LL);
}

uint64_t sub_1000103D8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 336));
}

uint64_t sub_1000103E0()
{
  return swift_retain(v0);
}

void sub_1000103E8(uint64_t a1, const char *a2)
{
  uint64_t v6 = type metadata accessor for CocoaError(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = sub_1000156AC();
  uint64_t v9 = type metadata accessor for Logger(v8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10001563C();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v3, a1, v6);
  __int128 v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v20 = v9;
    uint64_t v14 = (uint8_t *)sub_1000156F0();
    uint64_t v19 = a2;
    uint64_t v15 = sub_1000157DC();
    uint64_t v22 = v15;
    *(_DWORD *)uint64_t v14 = 136446210;
    sub_1000069B0( (unint64_t *)&unk_10008AAC0,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError,  (uint64_t)&protocol conformance descriptor for CocoaError);
    uint64_t v17 = Error.localizedDescription.getter(v6, v16);
    uint64_t v21 = sub_1000157BC(v17, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v14 + 4);
    swift_bridgeObjectRelease(v3);
    sub_100015740();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v19, v14, 0xCu);
    swift_arrayDestroy(v15, 1LL);
    sub_100010010(v15);
    sub_100010010((uint64_t)v14);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v20);
  }

  else
  {
    sub_100015740();

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v9);
  }

  sub_100008348();
}

void sub_1000105A4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10001563C();
  swift_errorRetain(a1);
  uint64_t v5 = swift_errorRetain(a1);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v13 = v3;
    uint64_t v8 = (uint8_t *)sub_1000156F0();
    uint64_t v9 = sub_1000157DC();
    uint64_t v17 = v9;
    *(_DWORD *)uint64_t v8 = 136446210;
    swift_getErrorValue(a1, v16, v15);
    uint64_t v10 = v15[0];
    uint64_t v11 = Error.localizedDescription.getter(v15[1], v15[2]);
    uint64_t v14 = sub_1000157BC(v11, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, v15, v8 + 4);
    swift_bridgeObjectRelease(v10);
    sub_100015768();
    sub_100015768();
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "unable to access transparency log (UNKNOWN): %{public}s",  v8,  0xCu);
    swift_arrayDestroy(v9, 1LL);
    sub_100010010(v9);
    sub_100010010((uint64_t)v8);

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v13);
  }

  else
  {
    sub_100015768();
    sub_100015768();

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  }

  sub_100008348();
}

unint64_t sub_100010724()
{
  return sub_100015698();
}

void sub_100010730()
{
}

void sub_100010750()
{
}

unint64_t sub_10001076C()
{
  return 0xD000000000000018LL;
}

uint64_t sub_100010788()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000D940(v0, qword_100093278);
  sub_10000D34C(v0, (uint64_t)qword_100093278);
  return Logger.init(subsystem:category:)( 0xD000000000000017LL,  0x800000010006D6D0LL,  0x726170736E617274LL,  0xEC00000079636E65LL);
}

id sub_100010804@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000534C(&qword_10008AB30);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v59 - v10;
  unint64_t v12 = NSHomeDirectory();
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v15 = v14;

  URL.init(fileURLWithPath:isDirectory:)(v13, v15, 1LL);
  uint64_t v16 = v15;
  uint64_t v17 = a1;
  swift_bridgeObjectRelease(v16);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000019LL, 0x800000010006D9C0LL, 1LL);
  unint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v62 = v5;
  uint64_t v60 = v18;
  v18((uint64_t)v11, v5);
  uint64_t v19 = sub_10000534C(&qword_10008AB38);
  uint64_t inited = swift_initStackObject(v19, v65);
  *(_OWORD *)(inited + 16) = xmmword_100069580;
  *(void *)(inited + 32) = NSURLIsDirectoryKey;
  uint64_t v21 = NSURLIsDirectoryKey;
  sub_100063888(inited);
  uint64_t v23 = v22;
  uint64_t v24 = v61;
  URL.resourceValues(forKeys:)();
  if (v24)
  {
    swift_errorRelease(v24);
    swift_bridgeObjectRelease(v23);
    uint64_t v25 = type metadata accessor for URLResourceValues(0LL);
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v4, 1LL, 1LL, v25);
  }

  else
  {
    swift_bridgeObjectRelease(v23);
    uint64_t v26 = type metadata accessor for URLResourceValues(0LL);
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v4, 0LL, 1LL, v26);
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v4, 1LL, v26) != 1)
    {
      char v58 = URLResourceValues.isDirectory.getter();
      id result = (id)(*(uint64_t (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8LL))(v4, v26);
      uint64_t v27 = v62;
      if ((v58 & 1) != 0) {
        return result;
      }
      goto LABEL_5;
    }
  }

  sub_10001531C((uint64_t)v4, &qword_10008AB30);
  uint64_t v27 = v62;
LABEL_5:
  if (qword_100089FD8 != -1) {
    swift_once(&qword_100089FD8, sub_100010788);
  }
  uint64_t v28 = type metadata accessor for Logger(0LL);
  sub_10000D34C(v28, (uint64_t)qword_100093278);
  uint64_t v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v27);
  uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
  os_log_type_t v31 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v30, v31))
  {
    BOOL v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v33 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v61 = a1;
    uint64_t v34 = v33;
    id v64 = v33;
    *(_DWORD *)BOOL v32 = 136446210;
    uint64_t v35 = URL.path.getter();
    unint64_t v37 = v36;
    uint64_t v63 = sub_100019964(v35, v36, (uint64_t *)&v64);
    uint64_t v27 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v32 + 4);
    swift_bridgeObjectRelease(v37);
    uint64_t v38 = v9;
    uint64_t v39 = v60;
    v60((uint64_t)v38, v27);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "creating log directory at %{public}s", v32, 0xCu);
    swift_arrayDestroy(v34, 1LL);
    uint64_t v40 = v34;
    uint64_t v17 = v61;
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  else
  {
    uint64_t v41 = v9;
    uint64_t v39 = v60;
    v60((uint64_t)v41, v27);
  }

  id v42 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL._bridgeToObjectiveC()(v43);
  uint64_t v45 = v44;
  id v64 = 0LL;
  unsigned int v46 = [v42 createDirectoryAtURL:v44 withIntermediateDirectories:1 attributes:0 error:&v64];

  id v47 = v64;
  if (v46) {
    return v64;
  }
  id v49 = v64;
  _convertNSErrorToError(_:)(v47);

  swift_willThrow(v50, v51, v52, v53, v54, v55, v56, v57);
  return (id)v39(v17, v27);
}

void sub_100010CA8(uint64_t a1@<X8>)
{
  uint64_t v184 = a1;
  uint64_t v1 = sub_10000534C(&qword_10008AB40);
  __chkstk_darwin(v1);
  os_log_type_t v180 = (char *)&v176 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v195 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v193 = *(void *)(v195 - 8);
  __chkstk_darwin(v195);
  uint64_t v182 = (char *)&v176 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v181 = type metadata accessor for Date(0LL);
  uint64_t v178 = *(void *)(v181 - 8);
  uint64_t v4 = __chkstk_darwin(v181);
  uint64_t v177 = (char *)&v176 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v179 = (char *)&v176 - v6;
  uint64_t v7 = sub_10000534C(&qword_10008A840);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v183 = (uint64_t)&v176 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v185 = (uint64_t)&v176 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  int v194 = (char *)&v176 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v176 - v14;
  uint64_t v192 = type metadata accessor for URL(0LL);
  uint64_t v200 = *(void *)(v192 - 8);
  uint64_t v16 = __chkstk_darwin(v192);
  int v199 = (char *)&v176 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v176 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v176 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (char *)&v176 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v176 - v28;
  __chkstk_darwin(v27);
  os_log_type_t v31 = (char *)&v176 - v30;
  BOOL v32 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v33 = [v32 defaultManager];
  uint64_t v34 = v198;
  sub_100010804((uint64_t)v31);
  uint64_t v198 = v34;
  if (v34)
  {

    return;
  }

  double v191 = v29;
  v190.n128_u64[0] = (unint64_t)v26;
  uint64_t v196 = v23;
  id v186 = v32;
  uint64_t v176 = v20;
  URL._bridgeToObjectiveC()(&v205);
  unint64_t v36 = v35;
  unint64_t v37 = (char *)v200;
  uint64_t v38 = v192;
  int v197 = *(void (**)(char *, uint64_t))(v200 + 8);
  v197(v31, v192);
  v205._clients = 0LL;
  uint64_t v39 = (char *)sub_1000151AC((uint64_t)v36, (uint64_t)_swiftEmptyArrayStorage, 0LL, (uint64_t)&v205._clients, v33);

  uint64_t v40 = v205._clients;
  if (!v39)
  {
    uint64_t v68 = v40;
    _convertNSErrorToError(_:)(v40);

    swift_willThrow(v69, v70, v71, v72, v73, v74, v75, v76);
    return;
  }

  uint64_t v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v39, v38);

  v206 = _swiftEmptyArrayStorage;
  uint64_t v42 = v41;
  uint64_t v43 = v38;
  uint64_t v44 = v199;
  uint64_t v189 = *(char **)(v41 + 16);
  if (v189)
  {
    uint64_t v45 = 0LL;
    unint64_t v187 = (void *)0x800000010006D9A0LL;
    uint64_t v188 = v41;
    while ((unint64_t)v45 < *(void *)(v42 + 16))
    {
      uint64_t v39 = (char *)((v37[80] + 32LL) & ~(unint64_t)v37[80]);
      uint64_t v46 = *((void *)v37 + 9);
      (*((void (**)(char *, char *, uint64_t))v37 + 2))(v15, &v39[v42 + v46 * (void)v45], v43);
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)v15, 0LL, 1LL, v43);
      id v47 = (uint64_t (*)(char *))*((void *)v37 + 4);
      uint64_t v48 = v15;
      uint64_t v49 = v43;
      uint64_t v50 = v191;
      uint64_t v51 = v48;
      uint64_t v52 = v47(v191);
      uint64_t v53 = URL.lastPathComponent.getter(v52);
      uint64_t v55 = v54;
      char v56 = sub_10000C0D0(0xD000000000000018LL, v187, v53, v54);
      swift_bridgeObjectRelease(v55);
      if ((v56 & 1) != 0)
      {
        ((void (*)(unint64_t, char *, uint64_t))v47)(v190.n128_u64[0], v50, v49);
        uint64_t v57 = v206;
        if ((swift_isUniquelyReferenced_nonNull_native(v206) & 1) == 0)
        {
          sub_100057EAC(0LL, v57[2] + 1LL, 1);
          uint64_t v57 = v206;
        }

        uint64_t v15 = v51;
        unint64_t v59 = v57[2];
        unint64_t v58 = v57[3];
        if (v59 >= v58 >> 1)
        {
          sub_100057EAC(v58 > 1, v59 + 1, 1);
          uint64_t v57 = v206;
        }

        v57[2] = v59 + 1;
        uint64_t v60 = &v39[(void)v57 + v59 * v46];
        uint64_t v43 = v192;
        ((void (*)(char *, unint64_t, uint64_t))v47)(v60, v190.n128_u64[0], v192);
        v206 = v57;
      }

      else
      {
        v197(v50, v49);
        uint64_t v43 = v49;
        uint64_t v15 = v51;
      }

      ++v45;
      uint64_t v44 = v199;
      unint64_t v37 = (char *)v200;
      uint64_t v42 = v188;
      if (v189 == v45) {
        goto LABEL_16;
      }
    }

    __break(1u);
    goto LABEL_57;
  }

LABEL_16:
  _s10RTCUtility9XPCObjectOwst_0((uint64_t)v15, 1LL, 1LL, v43);
LABEL_17:
  swift_bridgeObjectRelease(v42);
  sub_10001531C((uint64_t)v15, &qword_10008A840);
  v205._clients = v206;
  uint64_t v61 = v198;
  sub_100011C84((uint64_t *)&v205._clients);
  uint64_t v198 = v61;
  clients = v205._clients;
  uint64_t v188 = sub_100011D08(1LL, (uint64_t)v205._clients);
  double v191 = v65;
  if (v63 != v64 >> 1)
  {
    uint64_t v77 = v63;
    unint64_t v37 = (char *)(v64 >> 1);
    __n128 v78 = swift_bridgeObjectRetain(clients);
    v78.n128_u64[0] = 136446210LL;
    __n128 v190 = v78;
    uint64_t v189 = (char *)&type metadata for Any + 8;
    id v79 = v186;
    p_ivars = &DiskCache.ivars;
    uint64_t v66 = v195;
    while (v77 < (uint64_t)v37)
    {
      uint64_t v81 = v200;
      uint64_t v39 = v194;
      (*(void (**)(char *, char *, uint64_t))(v200 + 16))(v194, &v191[*(void *)(v200 + 72) * v77], v43);
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)v39, 0LL, 1LL, v43);
      if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v39, 1LL, v43) == 1)
      {
        uint64_t v67 = v193;
        goto LABEL_35;
      }

      uint64_t v82 = *(void (**)(char *, char *, uint64_t))(v81 + 32);
      unint64_t v83 = v196;
      v82(v196, v39, v43);
      id v84 = objc_msgSend(v79, (SEL)p_ivars[436]);
      URL._bridgeToObjectiveC()(v85);
      uint64_t v87 = v86;
      v206 = 0LL;
      unsigned int v88 = [v84 removeItemAtURL:v86 error:&v206];

      unint64_t v89 = v206;
      if (v88)
      {
        uint64_t v90 = v206;
        v197(v83, v43);
        id v79 = v186;
        p_ivars = (__objc2_ivar_list **)(&DiskCache + 48);
        uint64_t v66 = v195;
        uint64_t v67 = v193;
      }

      else
      {
        unint64_t v91 = v206;
        uint64_t v92 = _convertNSErrorToError(_:)(v89);

        swift_willThrow(v93, v94, v95, v96, v97, v98, v99, v100);
        if (qword_100089FD8 != -1) {
          swift_once(&qword_100089FD8, sub_100010788);
        }
        uint64_t v198 = 0LL;
        uint64_t v101 = type metadata accessor for Logger(0LL);
        sub_10000D34C(v101, (uint64_t)qword_100093278);
        swift_errorRetain(v92);
        uint64_t v102 = swift_errorRetain(v92);
        uint64_t v39 = (char *)Logger.logObject.getter(v102);
        os_log_type_t v103 = static os_log_type_t.error.getter();
        BOOL v104 = os_log_type_enabled((os_log_t)v39, v103);
        uint64_t v67 = v193;
        if (v104)
        {
          uint64_t v105 = swift_slowAlloc(12LL, -1LL);
          uint64_t v106 = (void *)swift_slowAlloc(32LL, -1LL);
          v206 = v106;
          *(_DWORD *)uint64_t v105 = v190.n128_u32[0];
          swift_getErrorValue(v92, v202, v201);
          uint64_t v107 = Error.localizedDescription.getter(v201[1], v201[2]);
          unint64_t v109 = v108;
          *(void *)(v105 + 4) = sub_100019964(v107, v108, (uint64_t *)&v206);
          swift_bridgeObjectRelease(v109);
          swift_errorRelease(v92);
          swift_errorRelease(v92);
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v39,  v103,  "failed to erase old log: %{public}s",  (uint8_t *)v105,  0xCu);
          swift_arrayDestroy(v106, 1LL);
          uint64_t v110 = v106;
          uint64_t v44 = v199;
          swift_slowDealloc(v110, -1LL, -1LL);
          uint64_t v111 = v105;
          uint64_t v43 = v192;
          swift_slowDealloc(v111, -1LL, -1LL);
        }

        else
        {

          swift_errorRelease(v92);
          swift_errorRelease(v92);
        }

        swift_errorRelease(v92);
        v197(v196, v43);
        id v79 = v186;
        p_ivars = (__objc2_ivar_list **)(&DiskCache + 48);
        uint64_t v66 = v195;
      }
    }

  a2 = a1;
LABEL_22:
  uint64_t v29 = v26 - a4;
  if (v19 != -1 || v29 != 0x8000000000000000LL)
  {
    sub_100056764(a4, v29 / v19, a2);
    return 1LL;
  }

      swift_release_n(a2, 2LL);
      return 0LL;
    }
  }

  uint64_t v8 = *(void *)(a2 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_deniedCategories);
  if (!*(void *)(v8 + 16)) {
    return 1LL;
  }
  sub_100059AE8(v5, v8);
  if ((v9 & 1) == 0) {
    return 1LL;
  }
  if (qword_100089FE8 != -1) {
    swift_once(&qword_100089FE8, sub_10001D628);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_10000D34C(v10, (uint64_t)qword_100093290);
  uint64_t v11 = swift_retain_n(a2, 2LL);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  uint64_t v13 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v12, v13)) {
    goto LABEL_16;
  }
  uint64_t v14 = swift_slowAlloc(22LL, -1LL);
  uint64_t v25 = swift_slowAlloc(32LL, -1LL);
  uint64_t v26 = v5;
  uint64_t v28 = v25;
  *(_DWORD *)uint64_t v14 = 134218242;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v14 + 4);
  *(_WORD *)(v14 + 12) = 2082;
  swift_retain(a2);
  uint64_t v15 = sub_10001F3DC();
  uint64_t v17 = v16;
  swift_release(a2);
  uint64_t v26 = sub_100019964(v15, v17, &v28);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v14 + 14);
  swift_release_n(a2, 2LL);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = "removing event with category %ld from submission to %{public}s due to denylist";
LABEL_15:
  _os_log_impl((void *)&_mh_execute_header, v12, v13, v18, (uint8_t *)v14, 0x16u);
  swift_arrayDestroy(v25, 1LL);
  swift_slowDealloc(v25, -1LL, -1LL);
  swift_slowDealloc(v14, -1LL, -1LL);

  return 0LL;
}

    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (v4 < 0) {
    uint64_t v5 = *v2;
  }
  else {
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v4);
  uint64_t v6 = swift_retain(a1);
  uint64_t v7 = __CocoaSet.contains(_:)(v6, v5);
  swift_release(a1);
  if ((v7 & 1) == 0) {
    goto LABEL_16;
  }
  uint64_t v8 = sub_1000450C0(v5);
  uint64_t v9 = v4;
LABEL_15:
  swift_bridgeObjectRelease(v9);
  return v8;
}

      swift_release_n(a2, 2LL);
      return 0LL;
    }
  }

  uint64_t v8 = *(void *)(a2 + 120);
  if (!*(void *)(v8 + 16)) {
    return 1LL;
  }
  sub_100059AE8(v5, v8);
  if ((v9 & 1) == 0) {
    return 1LL;
  }
  if (qword_10008A0B0 != -1) {
    swift_once(&qword_10008A0B0, sub_100059B84);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_10000D34C(v10, (uint64_t)qword_100093408);
  uint64_t v11 = swift_retain_n(a2, 2LL);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  uint64_t v13 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v12, v13)) {
    goto LABEL_16;
  }
  uint64_t v14 = swift_slowAlloc(22LL, -1LL);
  uint64_t v25 = swift_slowAlloc(32LL, -1LL);
  uint64_t v26 = v5;
  uint64_t v28 = v25;
  *(_DWORD *)uint64_t v14 = 134218242;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v14 + 4);
  *(_WORD *)(v14 + 12) = 2082;
  swift_retain(a2);
  uint64_t v15 = sub_10005B2FC();
  uint64_t v17 = v16;
  swift_release(a2);
  uint64_t v26 = sub_100019964(v15, v17, &v28);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v14 + 14);
  swift_release_n(a2, 2LL);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = "removing event with category %ld from submission to %{public}s due to denylist";
LABEL_15:
  _os_log_impl((void *)&_mh_execute_header, v12, v13, v18, (uint8_t *)v14, 0x16u);
  swift_arrayDestroy(v25, 1LL);
  swift_slowDealloc(v25, -1LL, -1LL);
  swift_slowDealloc(v14, -1LL, -1LL);

  return 0LL;
}

LABEL_57:
    __break(1u);
    goto LABEL_58;
  }

  swift_bridgeObjectRetain(clients);
  uint64_t v66 = v195;
  uint64_t v67 = v193;
LABEL_19:
  _s10RTCUtility9XPCObjectOwst_0((uint64_t)v194, 1LL, 1LL, v43);
LABEL_35:
  swift_unknownObjectRelease(v188);
  uint64_t v112 = v205._clients;
  uint64_t v113 = v185;
  sub_100021B90((uint64_t)v205._clients, v185);
  swift_bridgeObjectRelease(v112);
  uint64_t v114 = v183;
  sub_10001528C(v113, v183);
  int v115 = _s10RTCUtility9XPCObjectOwet_0(v114, 1LL, v43);
  uint64_t v116 = v184;
  if (v115 == 1)
  {
    uint64_t v117 = &qword_10008A840;
    uint64_t v118 = v114;
LABEL_37:
    sub_10001531C(v118, v117);
LABEL_38:
    sub_1000152D4(v185, v116);
    return;
  }

  uint64_t v119 = v176;
  (*(void (**)(char *, uint64_t, uint64_t))(v200 + 32))(v176, v114, v43);
  uint64_t v120 = sub_10000534C(&qword_10008AB38);
  uint64_t inited = swift_initStackObject(v120, &v205._reserved);
  *(_OWORD *)(inited + 16) = xmmword_100069580;
  *(void *)(inited + 32) = NSURLCreationDateKey;
  uint64_t v122 = NSURLCreationDateKey;
  sub_100063888(inited);
  uint64_t v124 = v123;
  uint64_t v125 = v182;
  uint64_t v126 = v198;
  URL.resourceValues(forKeys:)();
  uint64_t v198 = v126;
  if (v126)
  {
    swift_bridgeObjectRelease(v124);
    v197(v119, v43);
    sub_10001531C(v185, &qword_10008A840);
    return;
  }

  uint64_t v127 = swift_bridgeObjectRelease(v124);
  uint64_t v128 = (uint64_t)v180;
  URLResourceValues.creationDate.getter(v127);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v125, v66);
  uint64_t v129 = v181;
  if (_s10RTCUtility9XPCObjectOwet_0(v128, 1LL, v181) == 1)
  {
    v197(v176, v43);
    uint64_t v117 = &qword_10008AB40;
    uint64_t v118 = v128;
    goto LABEL_37;
  }

  uint64_t v130 = v116;
  uint64_t v131 = v178;
  uint64_t v132 = v179;
  uint64_t v133 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v178 + 32))(v179, v128, v129);
  uint64_t v134 = v177;
  static Date.now.getter(v133);
  double v135 = Date.distance(to:)(v134);
  uint64_t v39 = *(char **)(v131 + 8);
  ((void (*)(char *, uint64_t))v39)(v134, v129);
  unint64_t v37 = v176;
  if (v135 <= 604800.0)
  {
    ((void (*)(char *, uint64_t))v39)(v132, v129);
    v197(v37, v43);
    uint64_t v116 = v130;
    goto LABEL_38;
  }

  if (qword_100089FD8 != -1) {
LABEL_58:
  }
    swift_once(&qword_100089FD8, sub_100010788);
  uint64_t v136 = type metadata accessor for Logger(0LL);
  uint64_t v137 = sub_10000D34C(v136, (uint64_t)qword_100093278);
  uint64_t v138 = (*(uint64_t (**)(char *, char *, uint64_t))(v200 + 16))(v44, v37, v43);
  uint64_t v200 = v137;
  uint64_t v139 = (os_log_s *)Logger.logObject.getter(v138);
  os_log_type_t v140 = static os_log_type_t.info.getter();
  unint64_t v141 = &unk_100069000;
  if (os_log_type_enabled(v139, v140))
  {
    v142 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v143 = (void *)swift_slowAlloc(32LL, -1LL);
    v206 = v143;
    *(_DWORD *)v142 = 136446210;
    uint64_t v144 = URL.lastPathComponent.getter(v143);
    unint64_t v146 = v145;
    uint64_t v203 = sub_100019964(v144, v145, (uint64_t *)&v206);
    uint64_t v43 = v192;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, &v204, v142 + 4);
    swift_bridgeObjectRelease(v146);
    unint64_t v141 = (void *)&unk_100069000;
    v197(v44, v43);
    _os_log_impl((void *)&_mh_execute_header, v139, v140, "aging out log file: %{public}s", v142, 0xCu);
    swift_arrayDestroy(v143, 1LL);
    swift_slowDealloc(v143, -1LL, -1LL);
    uint64_t v147 = v142;
    unint64_t v37 = v176;
    swift_slowDealloc(v147, -1LL, -1LL);
  }

  else
  {
    v197(v44, v43);
  }

  id v148 = [v186 defaultManager];
  URL._bridgeToObjectiveC()(v149);
  uint64_t v151 = v150;
  v206 = 0LL;
  BOOL v152 = v37;
  unsigned int v153 = [v148 removeItemAtURL:v150 error:&v206];

  uint64_t v154 = v206;
  if (v153)
  {
    BOOL v155 = v206;
    ((void (*)(char *, uint64_t))v39)(v179, v181);
    v156 = v152;
  }

  else
  {
    uint64_t v157 = v206;
    uint64_t v158 = _convertNSErrorToError(_:)(v154);

    swift_willThrow(v159, v160, v161, v162, v163, v164, v165, v166);
    uint64_t v198 = 0LL;
    swift_errorRetain(v158);
    uint64_t v167 = swift_errorRetain(v158);
    int v168 = (os_log_s *)Logger.logObject.getter(v167);
    os_log_type_t v169 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v168, v169))
    {
      v170 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v171 = (void (*)(char *, uint64_t))v39;
      uint64_t v172 = (void *)swift_slowAlloc(32LL, -1LL);
      v206 = v172;
      *(_DWORD *)v170 = v141[429];
      swift_getErrorValue(v158, &v205._baseURL, &v204);
      uint64_t v173 = Error.localizedDescription.getter(v205.super.isa, v205._urlString);
      unint64_t v175 = v174;
      uint64_t v203 = sub_100019964(v173, v174, (uint64_t *)&v206);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, &v204, v170 + 4);
      swift_bridgeObjectRelease(v175);
      swift_errorRelease(v158);
      swift_errorRelease(v158);
      _os_log_impl((void *)&_mh_execute_header, v168, v169, "failed to erase old log: %{public}s", v170, 0xCu);
      swift_arrayDestroy(v172, 1LL);
      swift_slowDealloc(v172, -1LL, -1LL);
      swift_slowDealloc(v170, -1LL, -1LL);

      swift_errorRelease(v158);
      v171(v179, v181);
    }

    else
    {

      swift_errorRelease(v158);
      swift_errorRelease(v158);
      swift_errorRelease(v158);
      ((void (*)(char *, uint64_t))v39)(v179, v181);
    }

    v156 = v176;
    uint64_t v43 = v192;
  }

  v197(v156, v43);
  sub_10001531C(v185, &qword_10008A840);
  _s10RTCUtility9XPCObjectOwst_0(v184, 1LL, 1LL, v43);
}

void sub_100011C84(uint64_t *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for URL(0LL) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v3 = sub_100028584();
  }
  uint64_t v4 = *(void *)(v3 + 16);
  v5[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_100013D4C(v5);
  *a1 = v3;
}

uint64_t sub_100011D08(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v3 = *(void *)(a2 + 16);
  id result = sub_100015354(0LL, (v3 - result) & ~((uint64_t)(v3 - result) >> 63), v3);
  if ((v4 & 1) != 0) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = result;
  }
  if ((v5 & 0x8000000000000000LL) != 0) {
    goto LABEL_9;
  }
  if (v3 >= v5)
  {
    type metadata accessor for URL(0LL);
    return a2;
  }

void sub_100011D98(uint64_t a1@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v21 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  char v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 = [objc_allocWithZone(NSDateFormatter) init];
  sub_10001523C(0xD000000000000013LL, 0x800000010006D980LL, v9);
  static Date.now.getter(v10);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  id v12 = [v9 stringFromDate:isa];

  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v15 = v14;

  sub_100010804((uint64_t)v4);
  if (v1)
  {
    swift_bridgeObjectRelease(v15);
  }

  else
  {
    unint64_t v22 = 0LL;
    unint64_t v23 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(30LL);
    swift_bridgeObjectRelease(v23);
    unint64_t v22 = 0xD000000000000018LL;
    unint64_t v23 = 0x800000010006D9A0LL;
    v16._uint64_t countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(v15);
    v17._uint64_t countAndFlagsBits = 1954051118LL;
    v17._object = (void *)0xE400000000000000LL;
    String.append(_:)(v17);
    unint64_t v18 = v23;
    uint64_t v19 = v24;
    URL.appendingPathComponent(_:)(v22, v23);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v21);
    Data.write(to:options:)(v19, 0LL, 0LL, 0xC000000000000000LL);
  }
}

uint64_t sub_100011FD4()
{
  *(void *)(v1 + 16) = v0;
  swift_defaultActor_initialize(v0);
  *(_BYTE *)(v0 + 112) = 2;
  *(void *)(v0 + 128) = 0LL;
  *(void *)(v0 + 120) = [(id)objc_opt_self(NSFileHandle) fileHandleWithNullDevice];
  return swift_task_switch(sub_100012044, v0, 0LL);
}

uint64_t sub_100012044()
{
  if (!v0) {
    return (*(uint64_t (**)(void))(v1 + 8))(*(void *)(v1 + 16));
  }
  swift_release(*(void *)(v1 + 16));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_1000120A4()
{
  uint64_t v62 = v3;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v53 - v5;
  uint64_t v7 = type metadata accessor for CocoaError(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100010040();
  uint64_t v60 = v9;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v61 = (char *)&v53 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v53 - v14;
  __chkstk_darwin(v13);
  Swift::String v17 = (char *)&v53 - v16;
  sub_100012448();
  if (v0)
  {
    uint64_t v65 = v0;
    swift_errorRetain(v0);
    uint64_t v18 = sub_10000534C(&qword_10008A8A8);
    if (swift_dynamicCast(v17, &v65, v18, v7, 0LL))
    {
      uint64_t v58 = v8;
      uint64_t v19 = sub_100015700();
      uint64_t v55 = v20;
      v20(v19);
      sub_1000069B0( &qword_10008AAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError,  (uint64_t)&protocol conformance descriptor for CocoaError);
      uint64_t v59 = v7;
      uint64_t v57 = v21;
      uint64_t v22 = _BridgedStoredNSError.code.getter(v7, v21);
      uint64_t v23 = v62;
      static CocoaError.fileWriteNoPermission.getter(v22);
      sub_1000069B0( &qword_10008AAB8,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError.Code,  (uint64_t)&protocol conformance descriptor for CocoaError.Code);
      uint64_t v25 = v24;
      sub_10001566C(v1);
      uint64_t v56 = v25;
      sub_10001566C(v1);
      uint64_t v26 = v63;
      uint64_t v27 = v64;
      sub_100015664(v23);
      sub_100015664((uint64_t)v6);
      if (v27 == v26)
      {
        uint64_t v28 = sub_100015784();
        sub_100015770(v28, "unable to access transparency log (PERM): %{public}s");
        sub_1000157C8();
        sub_10001568C();
        uint64_t v29 = v59;
        uint64_t v30 = *(void (**)(char *, uint64_t))(v58 + 8);
        v30(v15, v59);
        v30(v17, v29);
LABEL_9:
        swift_errorRelease(v65);
        goto LABEL_12;
      }

      uint64_t v54 = *(void (**)(char *, uint64_t))(v58 + 8);
      v54(v15, v59);
      os_log_type_t v31 = v61;
      uint64_t v32 = sub_100015700();
      v55(v32);
      uint64_t v33 = sub_1000156DC();
      static CocoaError.fileWriteOutOfSpace.getter(v33);
      sub_10001566C(v1);
      sub_10001566C(v1);
      uint64_t v35 = v63;
      uint64_t v34 = v64;
      sub_100015664(v23);
      sub_100015664((uint64_t)v6);
      if (v34 == v35)
      {
        uint64_t v36 = sub_100015784();
        sub_100015770(v36, "unable to write transparency log (OOS): %{public}s");
        sub_1000157C8();
        sub_10001568C();
        uint64_t v37 = v59;
        uint64_t v38 = v54;
        v54(v31, v59);
        v38(v17, v37);
        goto LABEL_9;
      }

      v54(v31, v59);
      uint64_t v39 = sub_100015700();
      v40(v39);
      uint64_t v41 = sub_1000156DC();
      static CocoaError.fileWriteUnknown.getter(v41);
      sub_10001566C(v1);
      sub_10001566C(v1);
      uint64_t v43 = v63;
      uint64_t v42 = v64;
      sub_100015664(v23);
      sub_100015664((uint64_t)v6);
      if (v42 == v43)
      {
        uint64_t v44 = sub_100015784();
        sub_100015770(v44, "unable to access storebag cache (WRITE-UNKNOWN): %{public}s");
        sub_1000157C8();
        sub_10001568C();
        sub_100015710();
        goto LABEL_9;
      }

      sub_100015710();
    }

    swift_errorRelease(v65);
    sub_1000105A4(v0);
    swift_willThrow(v45, v46, v47, v48, v49, v50, v51, v52);
  }

void sub_100012448()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v110 = *(void *)(v1 - 8);
  uint64_t v111 = v1;
  __chkstk_darwin(v1);
  unint64_t v109 = (char *)&v100 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v107 = *(void *)(v3 - 8);
  uint64_t v108 = v3;
  __chkstk_darwin(v3);
  uint64_t v106 = (char *)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OS_dispatch_source.FileSystemEvent(0LL);
  uint64_t v104 = *(void *)(v5 - 8);
  uint64_t v105 = v5;
  __chkstk_darwin(v5);
  os_log_type_t v103 = (char *)&v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10000534C(&qword_10008A840);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v114 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v114 - 8);
  uint64_t v11 = __chkstk_darwin(v114);
  uint64_t v101 = (char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v100 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v113 = (uint64_t)&v100 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v102 = (char *)&v100 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v100 - v21;
  __chkstk_darwin(v20);
  uint64_t v112 = (char *)&v100 - v23;
  uint64_t v116 = v0;
  uint64_t v24 = *(void **)(v0 + 120);
  uint64_t v25 = (void *)objc_opt_self(&OBJC_CLASS___NSFileHandle);
  id v26 = v24;
  id v27 = [v25 fileHandleWithNullDevice];
  sub_100013BB4(0LL, (unint64_t *)&qword_10008AAD0, &OBJC_CLASS___NSFileHandle_ptr);
  char v28 = static NSObject.== infix(_:_:)(v26, v27);

  if ((v28 & 1) == 0)
  {
    if (qword_100089FD8 != -1) {
      swift_once(&qword_100089FD8, sub_100010788);
    }
    uint64_t v29 = type metadata accessor for Logger(0LL);
    uint64_t v30 = sub_10000D34C(v29, (uint64_t)qword_100093278);
    os_log_type_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "witnessed log vanish - refeshing", v33, 2u);
      swift_slowDealloc(v33, -1LL, -1LL);
    }
  }

  uint64_t v34 = v116;
  uint64_t v35 = *(void *)(v116 + 128);
  if (v35)
  {
    swift_getObjectType(*(void *)(v116 + 128));
    swift_unknownObjectRetain(v35);
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease(v35);
    uint64_t v36 = *(void *)(v34 + 128);
    *(void *)(v34 + 128) = 0LL;
    swift_unknownObjectRelease(v36);
  }

  uint64_t v37 = v115;
  sub_100010CA8((uint64_t)v9);
  if (!v37)
  {
    uint64_t v115 = v10;
    uint64_t v38 = v114;
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v9, 1LL, v114) == 1)
    {
      sub_10001531C((uint64_t)v9, &qword_10008A840);
      sub_100011D98(v113);
      uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v115 + 16);
      uint64_t v41 = v113;
      uint64_t v40 = v114;
      v39(v15, v113, v114);
      id v42 = sub_10001CF64((uint64_t)v15);
      uint64_t v50 = *(void **)(v34 + 120);
      *(void *)(v34 + 120) = v42;

      if (qword_100089FD8 != -1) {
        swift_once(&qword_100089FD8, sub_100010788);
      }
      uint64_t v51 = type metadata accessor for Logger(0LL);
      sub_10000D34C(v51, (uint64_t)qword_100093278);
      uint64_t v52 = v101;
      uint64_t v53 = ((uint64_t (*)(char *, uint64_t, uint64_t))v39)(v101, v41, v40);
      uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
      os_log_type_t v55 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v112 = (char *)swift_slowAlloc(32LL, -1LL);
        aBlock[0] = (uint64_t)v112;
        *(_DWORD *)uint64_t v56 = 136446210;
        uint64_t v57 = URL.path.getter();
        unint64_t v59 = v58;
        uint64_t v119 = sub_100019964(v57, v58, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v56 + 4);
        swift_bridgeObjectRelease(v59);
        uint64_t v60 = *(void (**)(char *, uint64_t))(v115 + 8);
        v60(v52, v40);
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "created new log file at %{public}s", v56, 0xCu);
        uint64_t v61 = v112;
        swift_arrayDestroy(v112, 1LL);
        swift_slowDealloc(v61, -1LL, -1LL);
        uint64_t v62 = v56;
        uint64_t v34 = v116;
        swift_slowDealloc(v62, -1LL, -1LL);

        uint64_t v63 = v113;
      }

      else
      {

        uint64_t v60 = *(void (**)(char *, uint64_t))(v115 + 8);
        v60(v52, v40);
        uint64_t v63 = v41;
      }

      uint64_t v75 = v40;
    }

    else
    {
      uint64_t v43 = v115;
      uint64_t v44 = v112;
      (*(void (**)(void))(v115 + 32))();
      uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
      v45(v22, v44, v38);
      id v46 = sub_10001CF64((uint64_t)v22);
      uint64_t v47 = *(void **)(v34 + 120);
      *(void *)(v34 + 120) = v46;

      id v48 = *(id *)(v34 + 120);
      NSFileHandle.seekToEnd()();
      if (v49)
      {
        (*(void (**)(char *, uint64_t))(v115 + 8))(v44, v38);

        return;
      }

      if (qword_100089FD8 != -1) {
        swift_once(&qword_100089FD8, sub_100010788);
      }
      uint64_t v64 = type metadata accessor for Logger(0LL);
      sub_10000D34C(v64, (uint64_t)qword_100093278);
      uint64_t v65 = v102;
      uint64_t v66 = ((uint64_t (*)(char *, char *, uint64_t))v45)(v102, v44, v38);
      uint64_t v67 = (uint64_t)v44;
      uint64_t v68 = (os_log_s *)Logger.logObject.getter(v66);
      os_log_type_t v69 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v68, v69))
      {
        uint64_t v70 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v71 = swift_slowAlloc(32LL, -1LL);
        aBlock[0] = v71;
        *(_DWORD *)uint64_t v70 = 136446210;
        uint64_t v72 = URL.path.getter();
        unint64_t v74 = v73;
        uint64_t v119 = sub_100019964(v72, v73, aBlock);
        uint64_t v34 = v116;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v70 + 4);
        swift_bridgeObjectRelease(v74);
        uint64_t v60 = *(void (**)(char *, uint64_t))(v115 + 8);
        v60(v102, v38);
        _os_log_impl((void *)&_mh_execute_header, v68, v69, "opened log file at %{public}s", v70, 0xCu);
        swift_arrayDestroy(v71, 1LL);
        swift_slowDealloc(v71, -1LL, -1LL);
        swift_slowDealloc(v70, -1LL, -1LL);

        uint64_t v63 = (uint64_t)v112;
      }

      else
      {

        uint64_t v60 = *(void (**)(char *, uint64_t))(v115 + 8);
        v60(v65, v38);
        uint64_t v63 = v67;
      }

      uint64_t v75 = v38;
    }

    v60((char *)v63, v75);
    uint64_t v77 = v104;
    uint64_t v76 = v105;
    sub_100013BB4(0LL, &qword_10008AAD8, &OBJC_CLASS___OS_dispatch_source_ptr);
    id v78 = [*(id *)(v34 + 120) fileDescriptor];
    uint64_t v79 = sub_10000534C(&qword_10008AAE0);
    uint64_t v80 = swift_allocObject( v79,  ((*(unsigned __int8 *)(v77 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80))
          + 2LL * *(void *)(v77 + 72),
            *(unsigned __int8 *)(v77 + 80) | 7LL);
    *(_OWORD *)(v80 + 16) = xmmword_100069590;
    uint64_t v81 = static OS_dispatch_source.FileSystemEvent.rename.getter();
    static OS_dispatch_source.FileSystemEvent.delete.getter(v81);
    aBlock[0] = v80;
    sub_1000069B0( &qword_10008AAE8,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.FileSystemEvent,  (uint64_t)&protocol conformance descriptor for OS_dispatch_source.FileSystemEvent);
    uint64_t v83 = v82;
    uint64_t v84 = sub_10000534C(&qword_10008AAF0);
    sub_100013C30(&qword_10008AAF8, &qword_10008AAF0);
    uint64_t v85 = v103;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v84, v86, v76, v83);
    id v87 = v78;
    uint64_t v88 = v116;
    uint64_t v89 = static OS_dispatch_source.makeFileSystemObjectSource(fileDescriptor:eventMask:queue:)(v87, v85, 0LL);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v85, v76);
    uint64_t v90 = *(void *)(v88 + 128);
    *(void *)(v88 + 128) = v89;
    swift_unknownObjectRelease(v90);
    uint64_t v91 = *(void *)(v88 + 128);
    if (v91)
    {
      uint64_t ObjectType = swift_getObjectType(*(void *)(v88 + 128));
      uint64_t v93 = swift_allocObject(&unk_100083098, 24LL, 7LL);
      swift_weakInit(v93 + 16, v88);
      aBlock[4] = (uint64_t)sub_100013C10;
      uint64_t v118 = v93;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_100012FB4;
      aBlock[3] = (uint64_t)&unk_1000830B0;
      uint64_t v94 = v88;
      uint64_t v95 = _Block_copy(aBlock);
      swift_retain(v93);
      uint64_t v96 = swift_unknownObjectRetain(v91);
      uint64_t v97 = v106;
      static DispatchQoS.unspecified.getter(v96);
      uint64_t v98 = v109;
      sub_100012FE0();
      OS_dispatch_source.setEventHandler(qos:flags:handler:)(v97, v98, v95, ObjectType);
      _Block_release(v95);
      swift_unknownObjectRelease(v91);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v98, v111);
      (*(void (**)(char *, uint64_t))(v107 + 8))(v97, v108);
      swift_release(v118);
      swift_release(v93);
      uint64_t v99 = *(void *)(v94 + 128);
      if (v99)
      {
        swift_getObjectType(*(void *)(v94 + 128));
        swift_unknownObjectRetain(v99);
        OS_dispatch_source.resume()();
        swift_unknownObjectRelease(v99);
        return;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

uint64_t sub_100012E84(uint64_t a1)
{
  uint64_t v2 = sub_10000534C((uint64_t *)&unk_10008C4A0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a1 += 16LL;
  swift_beginAccess(a1, v11, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = type metadata accessor for TaskPriority(0LL);
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v4, 1LL, 1LL, v7);
    uint64_t v8 = (void *)swift_allocObject(&unk_1000830E8, 40LL, 7LL);
    v8[2] = 0LL;
    v8[3] = 0LL;
    v8[4] = v6;
    uint64_t v9 = sub_10004FDF8((uint64_t)v4, (uint64_t)&unk_10008AB28, (uint64_t)v8);
    return swift_release(v9);
  }

  return result;
}

uint64_t sub_100012F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return swift_task_switch(sub_100012F70, a4, 0LL);
}

uint64_t sub_100012F70()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100012FB4(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_100012FE0()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = _swiftEmptyArrayStorage;
  sub_1000069B0( &qword_10008AB00,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v2 = v1;
  uint64_t v3 = sub_10000534C(&qword_10008AB08);
  sub_100013C30((unint64_t *)&unk_10008AB10, &qword_10008AB08);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v6, v3, v4, v0, v2);
}

void sub_10001308C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v57 = a3;
  uint64_t v58 = a4;
  v59._uint64_t countAndFlagsBits = a1;
  v59._object = a2;
  type metadata accessor for String.Encoding(0LL);
  sub_1000157A0();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_100015750();
  uint64_t v61 = 0LL;
  uint64_t v62 = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(27LL);
  swift_bridgeObjectRelease(v62);
  uint64_t v10 = sub_1000156C8();
  uint64_t v11 = Date.description.getter(v10);
  uint64_t v13 = v12;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v4, v8);
  v14._uint64_t countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v13);
  sub_100015730();
  String.append(_:)(v59);
  v15._object = (void *)0x800000010006D960LL;
  v15._uint64_t countAndFlagsBits = 0xD000000000000013LL;
  String.append(_:)(v15);
  uint64_t v16 = v61;
  uint64_t v17 = v62;
  static String.Encoding.utf8.getter(v18);
  uint64_t v19 = String.data(using:allowLossyConversion:)(v7, 0LL, v16, v17);
  unint64_t v21 = v20;
  swift_bridgeObjectRelease(v17);
  sub_100015778();
  if (v21 >> 60 == 15)
  {
    unint64_t v22 = sub_100013B00();
    uint64_t v23 = sub_100006A70((uint64_t)&type metadata for TransparencyLog.WriteError, v22);
    swift_willThrow(v23, v24, v25, v26, v27, v28, v29, v30);
LABEL_10:
    sub_100015624();
    return;
  }

  uint64_t v61 = (void *)v19;
  uint64_t v62 = (void *)v21;
  v31.n128_f64[0] = Data.append(_:)(v57, v58);
  static String.Encoding.utf8.getter(v31);
  uint64_t v32 = sub_100015720((uint64_t)v7);
  unint64_t v34 = v33;
  sub_100015778();
  if (v34 >> 60 != 15)
  {
    Data.append(_:)(v32, v34);
    sub_100004C30(v32, v34);
    uint64_t v35 = v56;
    uint64_t v36 = *(void **)(v56 + 120);
    uint64_t v38 = (uint64_t)v61;
    unint64_t v37 = (unint64_t)v62;
    v60[0] = v61;
    v60[1] = v62;
    id v39 = v36;
    sub_10000D8FC(v38, v37);
    unint64_t v40 = sub_100013B78();
    uint64_t v41 = v55[1];
    NSFileHandle.write<A>(contentsOf:)(v60, &type metadata for Data, v40);
    if (v41)
    {

      sub_100015674();
    }

    else
    {
      sub_100015674();

      id v42 = *(void **)(v35 + 120);
      v60[0] = 0LL;
      unsigned __int8 v43 = [v42 synchronizeAndReturnError:v60];
      id v44 = v60[0];
      if ((v43 & 1) != 0)
      {
        id v45 = v60[0];
      }

      else
      {
        id v46 = v60[0];
        _convertNSErrorToError(_:)(v44);

        swift_willThrow(v47, v48, v49, v50, v51, v52, v53, v54);
      }
    }

    sub_100015674();
    goto LABEL_10;
  }

  __break(1u);
}

void sub_100013330(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  v83._uint64_t countAndFlagsBits = a1;
  v83._object = a2;
  uint64_t v82 = type metadata accessor for JSONEncoder.OutputFormatting(0LL);
  uint64_t v10 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v81 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v84 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v84);
  uint64_t v12 = sub_1000156AC();
  uint64_t v13 = type metadata accessor for Date(v12);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_100015750();
  if (qword_10008A080 != -1) {
    swift_once(&qword_10008A080, sub_10004D6A0);
  }
  if (byte_1000933D8 != 1) {
    goto LABEL_15;
  }
  if (qword_10008A090 != -1) {
    swift_once(&qword_10008A090, sub_10004D718);
  }
  if (byte_1000933E8 != 1) {
    goto LABEL_15;
  }
  uint64_t v78 = v6;
  uint64_t v79 = a5;
  uint64_t v80 = v7;
  uint64_t v86 = 0LL;
  id v87 = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(25LL);
  swift_bridgeObjectRelease(v87);
  uint64_t v15 = sub_1000156C8();
  uint64_t v16 = Date.description.getter(v15);
  __n128 v18 = v17;
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v5, v13);
  v19._uint64_t countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v18);
  sub_100015730();
  String.append(_:)(v83);
  v20._object = (void *)0x800000010006D940LL;
  v20._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v20);
  unint64_t v21 = v86;
  unint64_t v22 = v87;
  static String.Encoding.utf8.getter(v23);
  uint64_t v24 = String.data(using:allowLossyConversion:)(v8, 0LL, v21, v22);
  unint64_t v26 = v25;
  swift_bridgeObjectRelease(v22);
  sub_10001578C();
  if (v26 >> 60 == 15)
  {
    unint64_t v27 = sub_100013B00();
    uint64_t v28 = sub_100006A70((uint64_t)&type metadata for TransparencyLog.WriteError, v27);
    swift_willThrow(v28, v29, v30, v31, v32, v33, v34, v35);
LABEL_15:
    sub_100015624();
    return;
  }

  uint64_t v36 = v24;
  uint64_t v86 = (void *)v24;
  id v87 = (void *)v26;
  uint64_t v37 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
  uint64_t v38 = (void *)JSONEncoder.init()();
  uint64_t v39 = sub_10000534C(&qword_10008AA70);
  unint64_t v40 = (_OWORD *)swift_allocObject( v39,  ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
                  + *(void *)(v10 + 72),
                    *(unsigned __int8 *)(v10 + 80) | 7LL);
  v40[1] = xmmword_100069580;
  static JSONEncoder.OutputFormatting.prettyPrinted.getter();
  v85[0] = v40;
  sub_1000069B0( &qword_10008AA78,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONEncoder.OutputFormatting,  (uint64_t)&protocol conformance descriptor for JSONEncoder.OutputFormatting);
  uint64_t v42 = v41;
  uint64_t v43 = sub_10000534C(&qword_10008AA80);
  sub_100013C30((unint64_t *)&qword_10008AA88, &qword_10008AA80);
  id v44 = v81;
  dispatch thunk of SetAlgebra.init<A>(_:)(v85, v43, v45, v82, v42);
  dispatch thunk of JSONEncoder.outputFormatting.setter(v44);
  id v46 = v79;
  v85[0] = v79;
  unint64_t v47 = sub_100013B3C();
  swift_bridgeObjectRetain();
  unint64_t v48 = v47;
  uint64_t v49 = v80;
  uint64_t v50 = dispatch thunk of JSONEncoder.encode<A>(_:)(v85, &type metadata for TransparencyLog.JustEvents, v48);
  if (v49)
  {
    swift_bridgeObjectRelease(v46);
    swift_release(v38);
    sub_100004C30(v36, v26);
    goto LABEL_15;
  }

  uint64_t v52 = v50;
  uint64_t v53 = v51;
  v83._object = v38;
  swift_bridgeObjectRelease(v46);
  v54.n128_f64[0] = Data.append(_:)(v52, v53);
  static String.Encoding.utf8.getter(v54);
  uint64_t v55 = sub_100015720(v8);
  unint64_t v57 = v56;
  sub_10001578C();
  if (v57 >> 60 != 15)
  {
    Data.append(_:)(v55, v57);
    sub_100004C30(v55, v57);
    uint64_t v58 = v78;
    Swift::String v59 = *(void **)(v78 + 120);
    uint64_t v61 = (uint64_t)v86;
    unint64_t v60 = (unint64_t)v87;
    v85[0] = v86;
    v85[1] = v87;
    id v62 = v59;
    sub_10000D8FC(v61, v60);
    unint64_t v63 = sub_100013B78();
    NSFileHandle.write<A>(contentsOf:)(v85, &type metadata for Data, v63);
    sub_100015658();

    uint64_t v64 = *(void **)(v58 + 120);
    v85[0] = 0LL;
    unsigned int v65 = [v64 synchronizeAndReturnError:v85];
    id v66 = v85[0];
    if (v65)
    {
      id v67 = v85[0];
      sub_100015658();
      sub_100015680();
      sub_100015798();
    }

    else
    {
      id v68 = v85[0];
      _convertNSErrorToError(_:)(v66);

      swift_willThrow(v69, v70, v71, v72, v73, v74, v75, v76);
      sub_100015680();
      sub_100015798();
      sub_100015658();
    }

    goto LABEL_15;
  }

  __break(1u);
}

uint64_t sub_1000137EC()
{
  swift_unknownObjectRelease(*(void *)(v0 + 128));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100013818()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for TransparencyLog()
{
  return objc_opt_self(&OBJC_CLASS____TtC13rtcreportingd15TransparencyLog);
}

uint64_t sub_100013850()
{
  return v0;
}

uint64_t sub_10001385C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x73746E657665LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73746E657665LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

void sub_1000138D8()
{
}

uint64_t sub_10001390C()
{
  return 0x73746E657665LL;
}

uint64_t sub_100013920(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000534C(&qword_10008AB58);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100005F30(a1, v8);
  unint64_t v10 = sub_100015408();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for TransparencyLog.JustEvents.CodingKeys,  &type metadata for TransparencyLog.JustEvents.CodingKeys,  v10,  v8,  v9);
  uint64_t v13 = a2;
  sub_10000534C((uint64_t *)&unk_10008B930);
  sub_100015444();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v13);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100013A24()
{
  return sub_100013850();
}

void sub_100013A3C(uint64_t a1)
{
}

uint64_t sub_100013A70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10001385C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100013A98(uint64_t a1)
{
  unint64_t v2 = sub_100015408();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100013AC0(uint64_t a1)
{
  unint64_t v2 = sub_100015408();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100013AE8(void *a1)
{
  return sub_100013920(a1, *v1);
}

unint64_t sub_100013B00()
{
  unint64_t result = qword_10008AA68;
  if (!qword_10008AA68)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069F08, &type metadata for TransparencyLog.WriteError);
    atomic_store(result, (unint64_t *)&qword_10008AA68);
  }

  return result;
}

unint64_t sub_100013B3C()
{
  unint64_t result = qword_10008AA90;
  if (!qword_10008AA90)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069EE0, &type metadata for TransparencyLog.JustEvents);
    atomic_store(result, (unint64_t *)&qword_10008AA90);
  }

  return result;
}

unint64_t sub_100013B78()
{
  unint64_t result = qword_10008AA98;
  if (!qword_10008AA98)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, &qword_10008AA98);
  }

  return result;
}

uint64_t sub_100013BB4(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_100013BEC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100013C10()
{
  return sub_100012E84(v0);
}

uint64_t sub_100013C18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100013C28(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_100013C30(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_10000E670(a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for [A], v3), a1);
  }

  sub_100006B44();
}

uint64_t sub_100013C6C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100013C98(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_10008AB24);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100013D04;
  return sub_100012F58(a1, v4, v5, v6);
}

uint64_t sub_100013D04()
{
  uint64_t v4 = *v0;
  uint64_t v1 = *(void *)(v4 + 16);
  uint64_t v2 = *v0;
  uint64_t v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_100013D4C(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v185 = *(void **)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  os_log_type_t v169 = (char *)&v160 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v181 = (char *)&v160 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v160 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v160 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v173 = (char *)&v160 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v172 = (char *)&v160 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v166 = (char *)&v160 - v20;
  __chkstk_darwin(v19);
  uint64_t v165 = (char *)&v160 - v21;
  uint64_t v184 = a1;
  Swift::Int v22 = a1[1];
  Swift::Int v23 = _minimumMergeRunLength(_:)(v22);
  if (v23 >= v22)
  {
    if ((v22 & 0x8000000000000000LL) == 0)
    {
      if (v22) {
        sub_1000148B0(0LL, v22, 1LL, v184);
      }
      return;
    }

    goto LABEL_158;
  }

  Swift::Int v24 = v23;
  sub_10000D9E4(v22 / 2);
  uint64_t v162 = v25;
  uint64_t v163 = v22;
  unint64_t v171 = v26;
  if (v22 <= 0)
  {
LABEL_122:
    uint64_t v28 = (char *)_swiftEmptyArrayStorage;
    unint64_t v100 = _swiftEmptyArrayStorage[2];
LABEL_123:
    if (v100 < 2)
    {
LABEL_134:
      swift_bridgeObjectRelease(v28);
      if (v163 >= -1) {
        goto LABEL_135;
      }
      goto LABEL_162;
    }

    uint64_t v151 = *v184;
    unint64_t v152 = v171;
    while (1)
    {
      unint64_t v153 = v100 - 2;
      if (v100 < 2) {
        break;
      }
      if (!v151) {
        goto LABEL_166;
      }
      uint64_t v144 = v28;
      uint64_t v154 = v28 + 32;
      uint64_t v155 = *(void *)&v28[16 * v153 + 32];
      uint64_t v156 = *(void *)&v28[16 * v100 + 24];
      sub_100014B84( v151 + v185[9] * v155,  v151 + v185[9] * *(void *)&v154[16 * v100 - 16],  v151 + v185[9] * v156,  v152);
      if (v2) {
        goto LABEL_120;
      }
      if (v156 < v155) {
        goto LABEL_153;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v144) & 1) == 0) {
        uint64_t v144 = sub_100015198((uint64_t)v144);
      }
      if (v153 >= *((void *)v144 + 2)) {
        goto LABEL_154;
      }
      uint64_t v157 = &v144[16 * v153 + 32];
      *(void *)uint64_t v157 = v155;
      *((void *)v157 + 1) = v156;
      unint64_t v158 = *((void *)v144 + 2);
      if (v100 > v158) {
        goto LABEL_155;
      }
      uint64_t v28 = v144;
      memmove(&v144[16 * v100 + 16], &v144[16 * v100 + 32], 16 * (v158 - v100));
      *((void *)v144 + 2) = v158 - 1;
      unint64_t v100 = v158 - 1;
      if (v158 <= 2) {
        goto LABEL_134;
      }
    }

LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
    return;
  }

  Swift::Int v161 = v24;
  uint64_t v176 = v11;
  uint64_t v179 = v4;
  unint64_t v27 = 0LL;
  uint64_t v28 = (char *)_swiftEmptyArrayStorage;
  uint64_t v29 = v22;
  uint64_t v167 = v14;
  while (1)
  {
    uint64_t v30 = (uint64_t)v27;
    uint64_t v31 = v27 + 1;
    v170 = v27;
    if ((uint64_t)(v27 + 1) >= v29)
    {
      uint64_t v44 = (uint64_t)(v27 + 1);
      uint64_t v45 = v179;
    }

    else
    {
      uint64_t v182 = v29;
      uint64_t v164 = v28;
      uint64_t v32 = *v184;
      uint64_t v33 = v185[9];
      uint64_t v34 = (void (*)(char *, uint64_t, uint64_t))v185[2];
      uint64_t v35 = v179;
      v34(v165, *v184 + v33 * (void)v31, v179);
      uint64_t v177 = v32;
      uint64_t v183 = v33;
      uint64_t v36 = ((uint64_t (*)(char *, uint64_t, uint64_t))v34)(v166, v32 + v33 * v30, v35);
      uint64_t v37 = URL.lastPathComponent.getter(v36);
      uint64_t v39 = v38;
      uint64_t v40 = URL.lastPathComponent.getter(v37);
      if (v37 == v40 && v39 == v41)
      {
        LODWORD(v180) = 0;
        uint64_t v43 = v39;
      }

      else
      {
        uint64_t v43 = v41;
        LODWORD(v180) = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v39, v40, v41, 1LL);
      }

      swift_bridgeObjectRelease(v39);
      swift_bridgeObjectRelease(v43);
      id v46 = (void (*)(char *, uint64_t))v185[1];
      uint64_t v45 = v179;
      v46(v166, v179);
      v46(v165, v45);
      uint64_t v30 = (uint64_t)v170;
      uint64_t v44 = (uint64_t)(v170 + 2);
      if ((uint64_t)(v170 + 2) < v182)
      {
        uint64_t v174 = v2;
        uint64_t v178 = v183 * (void)v31;
        uint64_t v47 = v177;
        uint64_t v48 = v183 * v44;
        while (1)
        {
          uint64_t v49 = v44;
          v34(v172, v47 + v48, v45);
          uint64_t v50 = ((uint64_t (*)(char *, uint64_t, uint64_t))v34)(v173, v47 + v178, v45);
          uint64_t v51 = URL.lastPathComponent.getter(v50);
          uint64_t v53 = v52;
          uint64_t v54 = URL.lastPathComponent.getter(v51);
          if (v51 == v54 && v53 == v55)
          {
            int v58 = 0;
            uint64_t v57 = v53;
          }

          else
          {
            uint64_t v57 = v55;
            int v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v51, v53, v54, v55, 1LL);
          }

          swift_bridgeObjectRelease(v53);
          swift_bridgeObjectRelease(v57);
          uint64_t v45 = v179;
          v46(v173, v179);
          v46(v172, v45);
          ++v44;
          v47 += v183;
          if (v49 + 1 >= v182)
          {
            uint64_t v29 = v182;
            uint64_t v44 = v182;
            uint64_t v2 = v174;
            uint64_t v14 = v167;
            uint64_t v30 = (uint64_t)v170;
            goto LABEL_25;
          }
        }

        uint64_t v2 = v174;
        uint64_t v14 = v167;
        uint64_t v30 = (uint64_t)v170;
      }

      uint64_t v29 = v182;
LABEL_25:
      uint64_t v28 = v164;
      if ((v180 & 1) != 0)
      {
        if (v44 < v30) {
          goto LABEL_159;
        }
        if (v30 < v44)
        {
          uint64_t v174 = v2;
          uint64_t v59 = 0LL;
          uint64_t v60 = v183 * (v44 - 1);
          uint64_t v61 = v30;
          uint64_t v62 = v44 * v183;
          uint64_t v63 = v61;
          uint64_t v64 = v61 * v183;
          do
          {
            if (v63 != v44 + v59 - 1)
            {
              uint64_t v65 = v177;
              if (!v177) {
                goto LABEL_165;
              }
              unint64_t v66 = v177 + v64;
              uint64_t v178 = v177 + v60;
              uint64_t v45 = v179;
              os_log_type_t v180 = (char *)v185[4];
              ((void (*)(char *, uint64_t, uint64_t))v180)(v169, v177 + v64, v179);
              if (v64 < v60 || v66 >= v65 + v62)
              {
                uint64_t v68 = v65 + v64;
                uint64_t v69 = v178;
                swift_arrayInitWithTakeFrontToBack(v68, v178, 1LL, v45);
              }

              else
              {
                uint64_t v69 = v178;
                if (v64 != v60) {
                  swift_arrayInitWithTakeBackToFront(v66);
                }
              }

              ((void (*)(uint64_t, char *, uint64_t))v180)(v69, v169, v45);
              uint64_t v14 = v167;
            }

            ++v63;
            --v59;
            v60 -= v183;
            v62 -= v183;
            v64 += v183;
          }

          while (v63 < v44 + v59);
          uint64_t v28 = v164;
          uint64_t v2 = v174;
          uint64_t v30 = (uint64_t)v170;
          uint64_t v29 = v182;
        }
      }
    }

    if (v44 < v29)
    {
      if (__OFSUB__(v44, v30)) {
        goto LABEL_157;
      }
      if (v44 - v30 < v161)
      {
        if (__OFADD__(v30, v161)) {
          goto LABEL_160;
        }
        if (v30 + v161 >= v29) {
          uint64_t v70 = v29;
        }
        else {
          uint64_t v70 = v30 + v161;
        }
        if (v70 < v30) {
          goto LABEL_161;
        }
        if (v44 != v70)
        {
          uint64_t v164 = v28;
          uint64_t v71 = v185[9];
          uint64_t v72 = (uint64_t (*)(char *, uint64_t, uint64_t))v185[2];
          uint64_t v174 = v2;
          unint64_t v175 = v72;
          uint64_t v73 = v71 * (v44 - 1);
          uint64_t v177 = v71;
          uint64_t v183 = v44 * v71;
          uint64_t v168 = v70;
          do
          {
            uint64_t v74 = 0LL;
            os_log_type_t v180 = (char *)v44;
            uint64_t v178 = v73;
            while (1)
            {
              uint64_t v182 = v30;
              uint64_t v75 = *v184;
              uint64_t v76 = v175;
              v175(v14, v183 + v74 + *v184, v45);
              uint64_t v77 = v73 + v74 + v75;
              uint64_t v78 = v14;
              uint64_t v79 = v176;
              uint64_t v80 = v76(v176, v77, v45);
              uint64_t v81 = v45;
              uint64_t v82 = URL.lastPathComponent.getter(v80);
              uint64_t v84 = v83;
              uint64_t v85 = URL.lastPathComponent.getter(v82);
              if (v82 == v85 && v84 == v86)
              {
                swift_bridgeObjectRelease_n(v84, 2LL);
                uint64_t v97 = (void (*)(char *, uint64_t))v185[1];
                v97(v79, v45);
                v97(v78, v45);
                uint64_t v14 = v78;
                goto LABEL_63;
              }

              uint64_t v88 = v86;
              char v89 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v84, v85, v86, 1LL);
              swift_bridgeObjectRelease(v84);
              swift_bridgeObjectRelease(v88);
              uint64_t v90 = (void (*)(char *, uint64_t))v185[1];
              v90(v79, v81);
              v90(v78, v81);
              uint64_t v14 = v78;
              if ((v89 & 1) == 0) {
                break;
              }
              uint64_t v91 = *v184;
              uint64_t v73 = v178;
              if (!*v184) {
                goto LABEL_163;
              }
              uint64_t v92 = v91 + v183 + v74;
              uint64_t v93 = (char *)(v91 + v178 + v74);
              uint64_t v94 = (void (*)(char *, uint64_t, uint64_t))v185[4];
              uint64_t v95 = v179;
              v94(v181, v92, v179);
              swift_arrayInitWithTakeFrontToBack(v92, v93, 1LL, v95);
              v94(v93, (uint64_t)v181, v95);
              v74 -= v177;
              uint64_t v30 = v182 + 1;
              uint64_t v96 = v180;
              uint64_t v45 = v95;
            }

            uint64_t v45 = v81;
LABEL_63:
            uint64_t v96 = v180;
            uint64_t v73 = v178;
LABEL_64:
            uint64_t v44 = (uint64_t)(v96 + 1);
            v73 += v177;
            v183 += v177;
            uint64_t v30 = (uint64_t)v170;
          }

          while (v44 != v168);
          uint64_t v44 = v168;
          uint64_t v2 = v174;
          uint64_t v28 = v164;
        }
      }
    }

    if (v44 < v30) {
      goto LABEL_156;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0) {
      uint64_t v28 = sub_1000150A4(0LL, *((void *)v28 + 2) + 1LL, 1, v28);
    }
    unint64_t v99 = *((void *)v28 + 2);
    unint64_t v98 = *((void *)v28 + 3);
    unint64_t v100 = v99 + 1;
    uint64_t v174 = v2;
    os_log_type_t v180 = (char *)v44;
    if (v99 >= v98 >> 1) {
      uint64_t v28 = sub_1000150A4((char *)(v98 > 1), v99 + 1, 1, v28);
    }
    *((void *)v28 + 2) = v100;
    uint64_t v101 = v28 + 32;
    uint64_t v102 = &v28[16 * v99 + 32];
    os_log_type_t v103 = v180;
    *(void *)uint64_t v102 = v30;
    *((void *)v102 + 1) = v103;
    if (v99) {
      break;
    }
    unint64_t v100 = 1LL;
LABEL_114:
    uint64_t v29 = v184[1];
    unint64_t v27 = v180;
    uint64_t v2 = v174;
  }

  while (1)
  {
    unint64_t v104 = v100 - 1;
    if (v100 >= 4)
    {
      unint64_t v109 = &v101[16 * v100];
      uint64_t v110 = *((void *)v109 - 8);
      uint64_t v111 = *((void *)v109 - 7);
      BOOL v115 = __OFSUB__(v111, v110);
      uint64_t v112 = v111 - v110;
      if (v115) {
        goto LABEL_141;
      }
      uint64_t v114 = *((void *)v109 - 6);
      uint64_t v113 = *((void *)v109 - 5);
      BOOL v115 = __OFSUB__(v113, v114);
      uint64_t v107 = v113 - v114;
      char v108 = v115;
      if (v115) {
        goto LABEL_142;
      }
      unint64_t v116 = v100 - 2;
      uint64_t v117 = &v101[16 * v100 - 32];
      uint64_t v119 = *(void *)v117;
      uint64_t v118 = *((void *)v117 + 1);
      BOOL v115 = __OFSUB__(v118, v119);
      uint64_t v120 = v118 - v119;
      if (v115) {
        goto LABEL_143;
      }
      BOOL v115 = __OFADD__(v107, v120);
      uint64_t v121 = v107 + v120;
      if (v115) {
        goto LABEL_145;
      }
      if (v121 >= v112)
      {
        uint64_t v139 = &v101[16 * v104];
        uint64_t v141 = *(void *)v139;
        uint64_t v140 = *((void *)v139 + 1);
        BOOL v115 = __OFSUB__(v140, v141);
        uint64_t v142 = v140 - v141;
        if (v115) {
          goto LABEL_151;
        }
        BOOL v132 = v107 < v142;
        goto LABEL_103;
      }
    }

    else
    {
      if (v100 != 3)
      {
        uint64_t v133 = *((void *)v28 + 4);
        uint64_t v134 = *((void *)v28 + 5);
        BOOL v115 = __OFSUB__(v134, v133);
        uint64_t v126 = v134 - v133;
        char v127 = v115;
        goto LABEL_97;
      }

      uint64_t v106 = *((void *)v28 + 4);
      uint64_t v105 = *((void *)v28 + 5);
      BOOL v115 = __OFSUB__(v105, v106);
      uint64_t v107 = v105 - v106;
      char v108 = v115;
    }

    if ((v108 & 1) != 0) {
      goto LABEL_144;
    }
    unint64_t v116 = v100 - 2;
    uint64_t v122 = &v101[16 * v100 - 32];
    uint64_t v124 = *(void *)v122;
    uint64_t v123 = *((void *)v122 + 1);
    BOOL v125 = __OFSUB__(v123, v124);
    uint64_t v126 = v123 - v124;
    char v127 = v125;
    if (v125) {
      goto LABEL_146;
    }
    uint64_t v128 = &v101[16 * v104];
    uint64_t v130 = *(void *)v128;
    uint64_t v129 = *((void *)v128 + 1);
    BOOL v115 = __OFSUB__(v129, v130);
    uint64_t v131 = v129 - v130;
    if (v115) {
      goto LABEL_148;
    }
    if (__OFADD__(v126, v131)) {
      goto LABEL_150;
    }
    if (v126 + v131 >= v107)
    {
      BOOL v132 = v107 < v131;
LABEL_103:
      if (v132) {
        unint64_t v104 = v116;
      }
      goto LABEL_105;
    }

LABEL_97:
    if ((v127 & 1) != 0) {
      goto LABEL_147;
    }
    double v135 = &v101[16 * v104];
    uint64_t v137 = *(void *)v135;
    uint64_t v136 = *((void *)v135 + 1);
    BOOL v115 = __OFSUB__(v136, v137);
    uint64_t v138 = v136 - v137;
    if (v115) {
      goto LABEL_149;
    }
    if (v138 < v126) {
      goto LABEL_114;
    }
LABEL_105:
    unint64_t v143 = v104 - 1;
    if (v104 - 1 >= v100)
    {
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }

    if (!*v184) {
      goto LABEL_164;
    }
    uint64_t v144 = v28;
    unint64_t v145 = &v101[16 * v143];
    uint64_t v146 = *(void *)v145;
    uint64_t v147 = &v101[16 * v104];
    uint64_t v148 = *((void *)v147 + 1);
    uint64_t v149 = v174;
    sub_100014B84(*v184 + v185[9] * *(void *)v145, *v184 + v185[9] * *(void *)v147, *v184 + v185[9] * v148, v171);
    uint64_t v174 = v149;
    if (v149) {
      break;
    }
    if (v148 < v146) {
      goto LABEL_138;
    }
    if (v104 > *((void *)v144 + 2)) {
      goto LABEL_139;
    }
    *(void *)unint64_t v145 = v146;
    *(void *)&v101[16 * v143 + 8] = v148;
    unint64_t v150 = *((void *)v144 + 2);
    if (v104 >= v150) {
      goto LABEL_140;
    }
    uint64_t v28 = v144;
    unint64_t v100 = v150 - 1;
    memmove(&v101[16 * v104], v147 + 16, 16 * (v150 - 1 - v104));
    *((void *)v144 + 2) = v150 - 1;
    if (v150 <= 2) {
      goto LABEL_114;
    }
  }

  uint64_t v2 = v174;
LABEL_120:
  swift_bridgeObjectRelease(v144);
  if (v163 < -1)
  {
    __break(1u);
    goto LABEL_122;
  }

LABEL_135:
  uint64_t v159 = v162;
  *(void *)(v162 + swift_weakDestroy(v0 + 16) = 0LL;
  swift_bridgeObjectRelease(v159);
}

uint64_t sub_1000148B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v45 = a4;
  uint64_t v38 = a1;
  uint64_t v41 = type metadata accessor for URL(0LL);
  id v46 = *(void **)(v41 - 8);
  uint64_t v6 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v43 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v36 - v12;
  uint64_t v42 = a3;
  uint64_t v37 = a2;
  if (a3 != a2)
  {
    uint64_t v14 = v46[9];
    uint64_t v39 = (uint64_t (*)(char *, uint64_t, uint64_t))v46[2];
    uint64_t v40 = v14;
    uint64_t v48 = v14 * (v42 - 1);
    uint64_t v47 = v14 * v42;
    while (2)
    {
      uint64_t v15 = 0LL;
      uint64_t v16 = v38;
      uint64_t v17 = v41;
      while (1)
      {
        uint64_t v18 = *v45;
        uint64_t v44 = v47 + v15;
        uint64_t v19 = v39;
        v39(v13, v47 + v15 + v18, v17);
        uint64_t v20 = v19(v10, v48 + v15 + v18, v17);
        uint64_t v21 = URL.lastPathComponent.getter(v20);
        Swift::Int v22 = v10;
        uint64_t v24 = v23;
        uint64_t v25 = URL.lastPathComponent.getter(v21);
        if (v21 == v25 && v24 == v26) {
          break;
        }
        uint64_t v28 = v26;
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v24, v25, v26, 1LL);
        swift_bridgeObjectRelease(v24);
        swift_bridgeObjectRelease(v28);
        uint64_t v30 = (void (*)(char *, uint64_t))v46[1];
        v30(v22, v17);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v30)(v13, v17);
        uint64_t v10 = v22;
        if ((v29 & 1) != 0)
        {
          uint64_t v31 = *v45;
          if (!*v45)
          {
            __break(1u);
            return result;
          }

          uint64_t v32 = v31 + v47 + v15;
          uint64_t v33 = v31 + v48 + v15;
          uint64_t v34 = (void (*)(char *, uint64_t, uint64_t))v46[4];
          uint64_t v17 = v41;
          v34(v43, v32, v41);
          swift_arrayInitWithTakeFrontToBack(v32, v33, 1LL, v17);
          uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v34)(v33, v43, v17);
          v15 -= v40;
          ++v16;
          uint64_t v10 = v22;
          if (v42 != v16) {
            continue;
          }
        }

        goto LABEL_13;
      }

      swift_bridgeObjectRelease_n(v24, 2LL);
      uint64_t v35 = (void (*)(char *, uint64_t))v46[1];
      v35(v22, v17);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v35)(v13, v17);
      uint64_t v10 = v22;
LABEL_13:
      v48 += v40;
      v47 += v40;
      if (++v42 != v37) {
        continue;
      }
      break;
    }
  }

  return result;
}

uint64_t sub_100014B84(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v82 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v81 = (uint64_t (*)(uint64_t, unint64_t, uint64_t))((char *)&v74 - v12);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t result = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v74 - v16;
  uint64_t v83 = v18;
  uint64_t v19 = *(void *)(v18 + 72);
  if (!v19)
  {
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }

  int64_t v20 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000LL && v19 == -1) {
    goto LABEL_91;
  }
  int64_t v22 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000LL && v19 == -1) {
    goto LABEL_92;
  }
  uint64_t v79 = v15;
  uint64_t v80 = v19;
  uint64_t v24 = v20 / v19;
  uint64_t v25 = v22 / v19;
  if (v20 / v19 >= v22 / v19)
  {
    uint64_t result = sub_100056764(a2, v22 / v19, a4);
    unint64_t v26 = a4 + v25 * v19;
    if (v25 * v19 < 1 || a1 >= a2) {
      goto LABEL_22;
    }
    uint64_t v79 = -v19;
    uint64_t v52 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v83 + 16);
    unint64_t v75 = a4;
    uint64_t v76 = v52;
    unint64_t v77 = a1;
    while (1)
    {
      unint64_t v53 = a3;
      unint64_t v84 = v26;
      uint64_t v54 = v79;
      unint64_t v78 = v26 + v79;
      uint64_t v55 = v76;
      ((void (*)(uint64_t (*)(uint64_t, unint64_t, uint64_t)))v76)(v81);
      unint64_t v56 = a2 + v54;
      unint64_t v57 = a2 + v54;
      uint64_t v58 = v8;
      uint64_t v59 = v55(v82, v57, v8);
      uint64_t v60 = URL.lastPathComponent.getter(v59);
      uint64_t v62 = v61;
      uint64_t v64 = URL.lastPathComponent.getter(v60);
      if (v60 == v64 && v62 == v63)
      {
        char v67 = 0;
        uint64_t v66 = v62;
      }

      else
      {
        uint64_t v66 = v63;
        char v67 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v62, v64, v63, 1LL);
      }

      swift_bridgeObjectRelease(v62);
      swift_bridgeObjectRelease(v66);
      a3 = v53 + v79;
      uint64_t v68 = *(void (**)(char *, uint64_t))(v83 + 8);
      uint64_t v8 = v58;
      v68(v82, v58);
      uint64_t result = ((uint64_t (*)(uint64_t (*)(uint64_t, unint64_t, uint64_t), uint64_t))v68)( v81,  v58);
      unint64_t v69 = v77;
      if ((v67 & 1) != 0)
      {
        BOOL v70 = v53 < a2 || a3 >= a2;
        uint64_t v19 = v80;
        if (v70)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack(a3, v56, 1LL, v8);
        }

        else if (v53 != a2)
        {
          uint64_t result = swift_arrayInitWithTakeBackToFront(a3);
        }

        a2 = v56;
        a4 = v75;
        unint64_t v26 = v84;
        goto LABEL_84;
      }

      BOOL v71 = v53 < v84 || a3 >= v84;
      uint64_t v19 = v80;
      if (v71)
      {
        unint64_t v72 = v78;
        uint64_t result = swift_arrayInitWithTakeFrontToBack(a3, v78, 1LL, v8);
      }

      else
      {
        if (v53 == v84)
        {
          unint64_t v26 = v78;
          goto LABEL_83;
        }

        unint64_t v72 = v78;
        uint64_t result = swift_arrayInitWithTakeBackToFront(a3);
      }

      unint64_t v26 = v72;
LABEL_83:
      a4 = v75;
LABEL_84:
      if (v26 <= a4 || a2 <= v69) {
        goto LABEL_22;
      }
    }
  }

  uint64_t result = sub_100056764(a1, v20 / v19, a4);
  unint64_t v26 = a4 + v24 * v19;
  if (v24 * v19 >= 1 && a2 < a3)
  {
    uint64_t v81 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v83 + 16);
    uint64_t v82 = v17;
    uint64_t v31 = v79;
    unint64_t v84 = a4 + v24 * v19;
    unint64_t v78 = a3;
    while (1)
    {
      uint64_t v32 = v81;
      v81((uint64_t)v17, a2, v8);
      uint64_t v33 = v32(v31, a4, v8);
      uint64_t v34 = v8;
      uint64_t v35 = URL.lastPathComponent.getter(v33);
      uint64_t v37 = v36;
      uint64_t v38 = URL.lastPathComponent.getter(v35);
      if (v35 == v38 && v37 == v39) {
        break;
      }
      uint64_t v41 = v39;
      char v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v37, v38, v39, 1LL);
      uint64_t v43 = v31;
      char v44 = v42;
      swift_bridgeObjectRelease(v37);
      swift_bridgeObjectRelease(v41);
      uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
      v45(v43, v34);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v45)(v17, v34);
      uint64_t v8 = v34;
      if ((v44 & 1) == 0) {
        goto LABEL_39;
      }
      uint64_t v19 = v80;
      unint64_t v46 = a2 + v80;
      BOOL v47 = a1 < a2 || a1 >= v46;
      unint64_t v48 = v78;
      if (!v47)
      {
        uint64_t v31 = v79;
        if (a1 != a2) {
          uint64_t result = swift_arrayInitWithTakeBackToFront(a1);
        }
        unint64_t v26 = v84;
        goto LABEL_49;
      }

      uint64_t result = swift_arrayInitWithTakeFrontToBack(a1, a2, 1LL, v8);
LABEL_48:
      unint64_t v26 = v84;
      uint64_t v31 = v79;
LABEL_49:
      a1 += v19;
      BOOL v51 = a4 >= v26 || v46 >= v48;
      a2 = v46;
      if (v51) {
        goto LABEL_16;
      }
    }

    swift_bridgeObjectRelease_n(v37, 2LL);
    uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
    v49(v31, v34);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v49)(v17, v34);
    uint64_t v8 = v34;
LABEL_39:
    uint64_t v19 = v80;
    BOOL v50 = a1 < a4 || a1 >= a4 + v80;
    unint64_t v48 = v78;
    if (v50)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack(a1, a4, 1LL, v8);
    }

    else if (a1 != a4)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront(a1);
    }

    unint64_t v46 = a2;
    a4 += v19;
    goto LABEL_48;
  }

LABEL_93:
  __break(1u);
  return result;
}

char *sub_1000150A4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000534C(&qword_10008AB48);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || &v14[16 * v8] <= v13) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 16 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100015198(uint64_t a1)
{
  return sub_1000150A4(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

id sub_1000151AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  id v11 = [a5 contentsOfDirectoryAtURL:a1 includingPropertiesForKeys:isa options:a3 error:a4];

  return v11;
}

void sub_10001523C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [a3 setDateFormat:v5];
}

uint64_t sub_10001528C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000534C(&qword_10008A840);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000152D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000534C(&qword_10008A840);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_10001531C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000534C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  sub_100006B44();
}

uint64_t sub_100015354(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }

  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2) {
      return 0LL;
    }
  }

  else if ((v3 & 0x8000000000000000LL) == 0 && v3 < (unint64_t)a2)
  {
    return 0LL;
  }

  BOOL v5 = __OFADD__(result, a2);
  result += a2;
  if (v5) {
    goto LABEL_14;
  }
  return result;
}

ValueMetadata *type metadata accessor for TransparencyLog.JustEvents()
{
  return &type metadata for TransparencyLog.JustEvents;
}

ValueMetadata *type metadata accessor for TransparencyLog.WriteError()
{
  return &type metadata for TransparencyLog.WriteError;
}

unint64_t sub_1000153CC()
{
  unint64_t result = qword_10008AB50;
  if (!qword_10008AB50)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069EB8, &type metadata for TransparencyLog.WriteError);
    atomic_store(result, (unint64_t *)&qword_10008AB50);
  }

  return result;
}

unint64_t sub_100015408()
{
  unint64_t result = qword_10008AB60;
  if (!qword_10008AB60)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006A00C, &type metadata for TransparencyLog.JustEvents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008AB60);
  }

  return result;
}

unint64_t sub_100015444()
{
  unint64_t result = qword_10008AB70;
  if (!qword_10008AB70)
  {
    uint64_t v1 = sub_10000E670((uint64_t *)&unk_10008B930);
    sub_1000069B0((unint64_t *)&qword_10008AB78, type metadata accessor for EventValue, (uint64_t)&unk_10006ADB0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10008AB70);
  }

  return result;
}

uint64_t _s13rtcreportingd15TransparencyLogC10WriteErrorOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100015508 + 4 * byte_100069D80[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100015528 + 4 * byte_100069D85[v4]))();
  }
}

_BYTE *sub_100015508(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100015528(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100015530(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100015538(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100015540(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100015548(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TransparencyLog.JustEvents.CodingKeys()
{
  return &type metadata for TransparencyLog.JustEvents.CodingKeys;
}

unint64_t sub_100015568()
{
  unint64_t result = qword_10008AB80;
  if (!qword_10008AB80)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069FE4, &type metadata for TransparencyLog.JustEvents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008AB80);
  }

  return result;
}

unint64_t sub_1000155A8()
{
  unint64_t result = qword_10008AB88;
  if (!qword_10008AB88)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069F54, &type metadata for TransparencyLog.JustEvents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008AB88);
  }

  return result;
}

unint64_t sub_1000155E8()
{
  unint64_t result = qword_10008AB90;
  if (!qword_10008AB90)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069F7C, &type metadata for TransparencyLog.JustEvents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008AB90);
  }

  return result;
}

  ;
}

uint64_t sub_10001563C()
{
  return Logger.init()();
}

uint64_t sub_100015658()
{
  return sub_100004C44(v1, v0);
}

uint64_t sub_100015664(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_10001566C(uint64_t a1)
{
  return dispatch thunk of RawRepresentable.rawValue.getter(a1, v1);
}

uint64_t sub_100015674()
{
  return sub_100004C44(v1, v0);
}

uint64_t sub_100015680()
{
  return sub_100004C44(v0, v1);
}

uint64_t sub_10001568C()
{
  return swift_willThrow();
}

unint64_t sub_100015698()
{
  return 0xD000000000000018LL;
}

uint64_t sub_1000156AC()
{
  return 0LL;
}

uint64_t sub_1000156C8()
{
  *(void *)(v0 - 104) = 40LL;
  *(void *)(v0 - 96) = 0xE100000000000000LL;
  return static Date.now.getter();
}

uint64_t sub_1000156DC()
{
  return _BridgedStoredNSError.code.getter(v0, *(void *)(v1 - 144));
}

uint64_t sub_1000156F0()
{
  return swift_slowAlloc(12LL, -1LL);
}

uint64_t sub_100015700()
{
  return v0;
}

uint64_t sub_100015710()
{
  return (*(uint64_t (**)(uint64_t, void))(v1 - 168))(v0, *(void *)(v1 - 128));
}

uint64_t sub_100015720(uint64_t a1)
{
  return String.data(using:allowLossyConversion:)(a1, 0LL, 10LL, 0xE100000000000000LL);
}

void sub_100015730()
{
  v0._uint64_t countAndFlagsBits = 5972009LL;
  v0._object = (void *)0xE300000000000000LL;
  String.append(_:)(v0);
}

uint64_t sub_100015740()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

  ;
}

uint64_t sub_100015768()
{
  return swift_errorRelease(v0);
}

void sub_100015770(uint64_t a1, const char *a2)
{
}

uint64_t sub_100015778()
{
  return v0(v2, v1);
}

uint64_t sub_100015784()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10001578C()
{
  return v0(v1, *(void *)(v2 - 128));
}

uint64_t sub_100015798()
{
  return swift_release(*(void *)(v0 - 136));
}

  ;
}

void sub_1000157B4()
{
}

uint64_t sub_1000157BC(uint64_t a1, unint64_t a2)
{
  return sub_100019964(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t sub_1000157C8()
{
  return CocoaError._nsError.getter();
}

  ;
}

uint64_t sub_1000157DC()
{
  return swift_slowAlloc(32LL, -1LL);
}

void sub_1000157E8()
{
}

uint64_t sub_1000157F4()
{
  __int128 v9 = *v0;
  uint64_t v8 = v9;
  sub_1000080FC((uint64_t)&v9);
  sub_10001ACB8();
  uint64_t v1 = *((void *)v0 + 2);
  uint64_t v2 = (void *)*((void *)v0 + 3);
  sub_10001015C();
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  sub_10001ACB8();
  uint64_t v5 = *((void *)v0 + 4);
  uint64_t v4 = (void *)*((void *)v0 + 5);
  swift_bridgeObjectRetain(v4);
  v6._uint64_t countAndFlagsBits = v5;
  v6._object = v4;
  String.append(_:)(v6);
  sub_100006AF0();
  return v8;
}

xpc_object_t *sub_100015880(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v2 = (unint64_t)_swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v19 = (xpc_object_t **)_swiftEmptyArrayStorage;
    unint64_t v2 = (unint64_t)&v19;
    specialized ContiguousArray.reserveCapacity(_:)(v1);
    int64_t v4 = sub_10001A6C0(a1);
    int v6 = v5;
    char v8 = v7 & 1;
    while ((v4 & 0x8000000000000000LL) == 0 && v4 < 1LL << *(_BYTE *)(a1 + 32))
    {
      if (*(_DWORD *)(a1 + 36) != v6) {
        goto LABEL_15;
      }
      xpc_object_t v9 = xpc_int64_create(*(void *)(*(void *)(a1 + 48) + 8 * v4));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v10 = v19[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
      uint64_t v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v9);
      unint64_t v2 = (unint64_t)&v19;
      specialized ContiguousArray._endMutation()(v11);
      int64_t v12 = sub_10001A5DC(v4, v6, v8 & 1, a1);
      int64_t v4 = v12;
      int v6 = v13;
      char v8 = v14 & 1;
      if (!--v1)
      {
        sub_10001A740(v12, v13, v14 & 1);
        unint64_t v2 = (unint64_t)v19;
        goto LABEL_9;
      }
    }

    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

xpc_object_t *sub_100015A2C@<X0>(xpc_object_t *result@<X0>, size_t a2@<X1>, xpc_object_t **a3@<X8>)
{
  if (result)
  {
    unint64_t result = (xpc_object_t *)xpc_array_create(result, a2);
    *a3 = result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100015A60()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000D940(v0, qword_10008ABA0);
  sub_10000D34C(v0, (uint64_t)qword_10008ABA0);
  return Logger.init(subsystem:category:)( 0xD000000000000017LL,  0x800000010006D6D0LL,  0x746E65696C63LL,  0xE600000000000000LL);
}

uint64_t sub_100015AD0()
{
  unint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  *(void *)(v1 + 32) = v3;
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 24) = v5;
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v60 = *(void *)(v7 - 8);
  uint64_t v61 = v7;
  uint64_t v8 = sub_100008360(v60);
  *(void *)(v1 + 48) = v8;
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v58 = *(void *)(v9 - 8);
  uint64_t v59 = v9;
  uint64_t v10 = sub_100008360(v58);
  *(void *)(v1 + 56) = v10;
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  uint64_t v12 = sub_100008360(*(void *)(v11 - 8));
  *(void *)(v1 + 64) = v12;
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v14 = sub_100008360(*(void *)(v13 - 8));
  *(void *)(v1 + 72) = v14;
  swift_defaultActor_initialize(v2);
  v2[14] = 0LL;
  uint64_t v15 = type metadata accessor for Session(0LL);
  uint64_t v16 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v15,  &protocol witness table for String);
  v2[18] = v6;
  v2[19] = v16;
  swift_retain(v6);
  *(void *)(v1 + 80) = XPCIncomingConnection.auditToken.getter(v4);
  *(_DWORD *)(v1 + 88) = v17;
  *(_DWORD *)(v1 + 92) = v18;
  *(_DWORD *)(v1 + 96) = v19;
  *(_DWORD *)(v1 + 100) = v20;
  *(_DWORD *)(v1 + 104) = v21;
  *(_DWORD *)(v1 + 108) = v22;
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(4096LL, 1LL, v23);
  if ((isStackAllocationSafe & 1) != 0)
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v25 = sub_10001AC18(&v54, (uint64_t)&v55);
    if (v6)
    {
      swift_willThrow(v25, v26, v27, v28, v29, v30, v31, v32);
      sub_10001AAA8();
      return swift_errorRelease(v33);
    }

    unint64_t v39 = v62;
    unint64_t v40 = v63;
  }

  else
  {
    uint64_t v35 = (_BYTE *)sub_1000100B0(4096LL);
    sub_10001AC18(v35, (uint64_t)(v35 + 4096));
    if (v6)
    {
      swift_errorRelease(v6);
      sub_10001AAA8();
      return swift_slowDealloc(v36, v37, v38);
    }

    sub_100010010((uint64_t)v35);
    unint64_t v39 = v62;
    unint64_t v40 = v63;
  }

  v2[16] = v39;
  v2[17] = v40;
  unint64_t v57 = sub_10001A788();
  unint64_t v62 = 0LL;
  unint64_t v63 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(26LL);
  swift_bridgeObjectRelease(v63);
  unint64_t v62 = 0xD000000000000018LL;
  unint64_t v63 = 0x800000010006DCF0LL;
  uint64_t v42 = v2[16];
  uint64_t v41 = (void *)v2[17];
  sub_1000100D8();
  v43._uint64_t countAndFlagsBits = v42;
  v43._object = v41;
  String.append(_:)(v43);
  uint64_t v44 = sub_1000083D4();
  unint64_t v55 = v63;
  unint64_t v56 = v62;
  static DispatchQoS.background.getter(v44);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
  uint64_t v45 = sub_10001A7C4( (unint64_t *)&qword_10008ACF8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v46 = sub_10000534C(&qword_10008AD00);
  unint64_t v47 = sub_10001A804();
  dispatch thunk of SetAlgebra.init<A>(_:)(v1 + 16, v46, v47, v11, v45);
  (*(void (**)(uint64_t, void, uint64_t))(v58 + 104))( v10,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v59);
  uint64_t v49 = v60;
  uint64_t v48 = v61;
  (*(void (**)(uint64_t, void, uint64_t))(v60 + 104))( v8,  enum case for DispatchQoS.QoSClass.background(_:),  v61);
  uint64_t v50 = static OS_dispatch_queue.global(qos:)(v8);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v8, v48);
  v2[15] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v56, v55, v14, v12, v10, v50);
  sub_10001AC0C();
  sub_10001AAA8();
  return swift_task_switch(v51, v52, v53);
}

uint64_t sub_100015E68( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = (_xpc_connection_s *)v12[4];
  uint64_t v14 = v12[5];
  uint64_t v15 = v12[3];
  uint64_t v16 = *(void **)(v14 + 120);
  uint64_t v17 = type metadata accessor for XPCConnection();
  sub_100006B14(v17, 48LL);
  id v18 = v16;
  sub_10001AAE0(v14);
  id v19 = v18;
  int v20 = XPCConnection.init(conn:targetQ:delegate:)(v13, v19, v14, (uint64_t)&off_1000833E0);
  swift_release(v15);
  sub_100006B3C();

  uint64_t v21 = *(void *)(v14 + 112);
  *(void *)(v14 + 112) = v20;
  swift_release(v21);
  sub_10001AAF0();
  sub_10001AB38();
  sub_10001AB28();
  sub_10001AB08();
  sub_10001AAA8();
  return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
}

uint64_t sub_100015F54@<X0>( _BYTE *buffer@<X0>, audit_token_t *audittoken@<X2>, uint64_t a3@<X1>, uint64_t *a4@<X8>)
{
  *buffer = 0;
  if (!buffer)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (a3 - (uint64_t)buffer >= (uint64_t)&_mh_execute_header)
  {
LABEL_9:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL);
    __break(1u);
    return result;
  }

  uint64_t result = proc_pidpath_audittoken(audittoken, buffer, a3 - (_DWORD)buffer);
  if ((int)result < 1)
  {
    unint64_t v14 = 0xE700000000000000LL;
    uint64_t v12 = 0x6E776F6E6B6E75LL;
  }

  else
  {
    uint64_t v12 = String.init(cString:)(buffer, v7, v8, v9, v10, v11);
    unint64_t v14 = v13;
    v27[0] = 47LL;
    v27[1] = 0xE100000000000000LL;
    __chkstk_darwin(v12);
    uint64_t v26 = v27;
    swift_bridgeObjectRetain();
    unint64_t v15 = sub_10001A4DC(sub_10001A870, (uint64_t)v25, v12, v14);
    char v17 = v16;
    uint64_t result = swift_bridgeObjectRelease(v14);
    if ((v17 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      unint64_t v18 = String.index(after:)(v15, v12, v14);
      swift_bridgeObjectRelease(v14);
      unint64_t v19 = sub_10001610C(v18, v12, v14);
      uint64_t v21 = v20;
      uint64_t v12 = static String._fromSubstring(_:)(v19, v22, v23, v20);
      unint64_t v14 = v24;
      uint64_t result = swift_bridgeObjectRelease(v21);
    }
  }

  *a4 = v12;
  a4[1] = v14;
  return result;
}

unint64_t sub_10001610C(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v4 < result >> 14)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = String.subscript.getter();
    swift_bridgeObjectRelease(a3);
    return v5;
  }

  return result;
}

BOOL sub_1000161AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10001A7C4( &qword_10008AC88,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_10006A12C);
  uint64_t v4 = Identifiable<>.id.getter(v2, v3);
  return v4 == Identifiable<>.id.getter(v2, v3);
}

void sub_100016228(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = sub_10001A7C4( &qword_10008AC88,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_10006A12C);
  Swift::UInt v5 = Identifiable<>.id.getter(v3, v4);
  Hasher._combine(_:)(v5);
}

void sub_100016280()
{
  uint64_t v1 = v0;
  sub_10000534C((uint64_t *)&unk_10008C4A0);
  sub_100006B54();
  __chkstk_darwin(v2);
  sub_100006B64();
  uint64_t v5 = v4 - v3;
  sub_10000534C(&qword_10008BFA0);
  sub_100006B54();
  __chkstk_darwin(v6);
  sub_100006B64();
  uint64_t v9 = (uint64_t *)(v8 - v7);
  uint64_t v10 = sub_10001AB30();
  uint64_t v11 = XPCMessage.init(fromXPC:)(v10);
  if (v11)
  {
    unint64_t v13 = (void *)v11;
    char v14 = v12;
    swift_unknownObjectRetain(v11);
    unint64_t v15 = (uint64_t *)MessageKeys.sessionID.unsafeMutableAddressor();
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    sub_10001AC84();
    RTCXPCDictionary.subscript.getter(v16, v17, v13, (uint64_t)v9);
    sub_10001AB20();
    sub_10001ABA0();
    uint64_t v18 = sub_10001AD20();
    uint64_t v19 = sub_10001AD30((uint64_t)v9);
    if ((_DWORD)v19 == 1)
    {
      sub_10001AD68(v19, &qword_10008BFA0);
    }

    else if (swift_getEnumCaseMultiPayload(v9, v18) == 8)
    {
      uint64_t v30 = v9[1];
      if (v14 != 1)
      {
        uint64_t v34 = *v9;
        uint64_t v35 = sub_10001AC74();
        sub_10001ABBC(v35);
        uint64_t v32 = sub_100006B14((uint64_t)&unk_100083430, 65LL);
        *(void *)(v32 + swift_weakDestroy(v0 + 16) = 0LL;
        *(void *)(v32 + 24) = 0LL;
        *(void *)(v32 + 32) = v1;
        *(void *)(v32 + 40) = v34;
        *(void *)(v32 + 48) = v30;
        *(void *)(v32 + 56) = v13;
        *(_BYTE *)(v32 + 64) = v14;
        sub_10001AB30();
        sub_10001AA24();
        uint64_t v33 = &unk_10008ACA8;
        goto LABEL_14;
      }

      sub_100006CAC();
    }

    else
    {
      sub_10001AD60();
    }

    uint64_t v31 = sub_10001AC74();
    sub_10001ABBC(v31);
    uint64_t v32 = sub_100006B14((uint64_t)&unk_100083408, 49LL);
    *(void *)(v32 + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(v32 + 24) = 0LL;
    *(void *)(v32 + 32) = v1;
    *(void *)(v32 + 40) = v13;
    *(_BYTE *)(v32 + 48) = v14;
    sub_10001AB30();
    sub_10001AA24();
    uint64_t v33 = &unk_10008AC98;
LABEL_14:
    sub_100016914(v5, (uint64_t)v33, v32);
    sub_10001AB20();
    sub_100006C04();
    return;
  }

  if (qword_100089FE0 != -1) {
    swift_once(&qword_100089FE0, sub_100015A60);
  }
  uint64_t v20 = sub_10001030C();
  uint64_t v21 = (void *)sub_10000D34C(v20, (uint64_t)qword_10008ABA0);
  uint64_t v22 = sub_10001AA24();
  Logger.logObject.getter(v22);
  os_log_type_t v23 = sub_10001AB78();
  if (sub_10001AAF8(v23))
  {
    unint64_t v24 = (_DWORD *)sub_1000100B0(12LL);
    uint64_t v25 = sub_1000100B0(32LL);
    uint64_t v37 = v25;
    *unint64_t v24 = 136446210;
    uint64_t v26 = *(void *)(v1 + 128);
    sub_10001A9B8();
    uint64_t v36 = sub_10001AAE8(v26, v27, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v24 + 1);
    sub_100006C04();
    sub_10001A9B0();
    sub_10001AA54((void *)&_mh_execute_header, v28, v29, "received invalid XPC message from %{public}s");
    sub_10001AA68(v25);
    sub_100010010(v25);
    sub_100010010((uint64_t)v24);
  }

  else
  {

    swift_release(v1);
  }

uint64_t sub_100016568( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  unint64_t v13 = (void *)swift_task_alloc(dword_10008ACB4);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v13;
  *unint64_t v13 = v8;
  v13[1] = sub_10001A92C;
  return sub_1000165E4(a5, a6, a7, a8);
}

uint64_t sub_1000165E4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v5 + 96) = a4;
  *(void *)(v5 + 48) = a3;
  *(void *)(v5 + 56) = v4;
  *(void *)(v5 + 32) = a1;
  *(void *)(v5 + 40) = a2;
  uint64_t v8 = (void *)swift_task_alloc(dword_10008ACBC);
  *(void *)(v5 + 64) = v8;
  *uint64_t v8 = v5;
  v8[1] = sub_10001664C;
  return sub_100018C88(a1, a2);
}

uint64_t sub_10001664C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 64LL);
  *(void *)(*(void *)v1 + 72LL) = a1;
  sub_10001ACD0(v2);
  return sub_10001A9C0();
}

void sub_10001669C()
{
  uint64_t v21 = v1;
  uint64_t v22 = v2;
  uint64_t v20 = v0;
  if (*(void *)(v0 + 72))
  {
    uint64_t v3 = *(void *)(*(void *)(v0 + 56) + 112LL);
    *(void *)(v0 + 80) = v3;
    if (v3)
    {
      uint64_t v4 = dword_10008C494;
      sub_10001AA24();
      uint64_t v5 = (void *)swift_task_alloc(v4);
      *(void *)(v0 + 88) = v5;
      *uint64_t v5 = v0;
      v5[1] = sub_1000168AC;
      sub_10004FF18(v3, *(void *)(v0 + 48), *(_BYTE *)(v0 + 96));
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    if (qword_100089FE0 != -1) {
      swift_once(&qword_100089FE0, sub_100015A60);
    }
    uint64_t v6 = *(os_log_s **)(v0 + 56);
    uint64_t v7 = *(void *)(v0 + 40);
    uint64_t v8 = sub_10001030C();
    sub_10000D34C(v8, (uint64_t)qword_10008ABA0);
    sub_1000100D0(v7);
    sub_10001AAE0((uint64_t)v6);
    sub_10001ACE4();
    os_log_type_t v9 = sub_10001AB78();
    BOOL v10 = sub_10001AB10(v9);
    uint64_t v11 = *(void *)(v0 + 56);
    uint64_t v12 = *(void *)(v0 + 40);
    if (v10)
    {
      uint64_t v17 = *(void *)(v0 + 32);
      uint64_t v13 = sub_1000100B0(22LL);
      uint64_t v18 = sub_1000100B0(64LL);
      v19[0] = v18;
      *(_DWORD *)uint64_t v13 = 136446466;
      sub_10001A9B8();
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = sub_10001AAE8(v17, v14, v19);
      sub_1000103BC(v0 + 16, v0 + 24);
      sub_10001AA78(v12);
      *(_WORD *)(v13 + 12) = 2082;
      uint64_t v15 = *(void *)(v11 + 128);
      unint64_t v16 = *(void *)(v11 + 136);
      sub_100010290();
      *(void *)(v0 + 24) = sub_100019964(v15, v16, v19);
      sub_1000103BC(v0 + 24, v0 + 32);
      sub_10001ABFC();
      sub_10001A98C(v11);
      sub_10001AA00( (void *)&_mh_execute_header,  v6,  (os_log_type_t)v7,  "invalid session id %{public}s from %{public}s",  (uint8_t *)v13);
      sub_10001A9F8(v18);
      sub_100010010(v18);
      sub_100010010(v13);
    }

    else
    {
      sub_100010060(*(void *)(v0 + 40));
      sub_10001A98C(v11);
    }

    sub_10001A94C(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_1000168AC()
{
  return sub_10001A974();
}

uint64_t sub_1000168EC()
{
  return sub_10001ABB0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100016914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10001AC74();
  if (_s10RTCUtility9XPCObjectOwet_0(a1, 1LL, v6) == 1)
  {
    sub_10001A294(a1, (uint64_t *)&unk_10008C4A0);
    uint64_t v7 = 7168LL;
  }

  else
  {
    unsigned __int8 v8 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v7 = v8 | 0x1C00LL;
  }

  uint64_t v9 = *(void *)(a3 + 16);
  if (v9)
  {
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v9);
    uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType);
    uint64_t v13 = v12;
    swift_unknownObjectRelease(v9);
  }

  else
  {
    uint64_t v11 = 0LL;
    uint64_t v13 = 0LL;
  }

  uint64_t v14 = sub_100006B14((uint64_t)&unk_100083458, 32LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v17[0] = 0LL;
    v17[1] = 0LL;
    uint64_t v15 = v17;
    v17[2] = v11;
    v17[3] = v13;
  }

  else
  {
    uint64_t v15 = 0LL;
  }

  return swift_task_create(v7, v15, (char *)&type metadata for () + 8, &unk_10008ACC8, v14);
}

uint64_t sub_100016A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v9 = (void *)swift_task_alloc(dword_10008ACD4);
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = v9;
  void *v9 = v6;
  v9[1] = sub_10001A92C;
  return sub_100016AB4(a5, a6);
}

uint64_t sub_100016AB4(uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 457) = a2;
  *(void *)(v3 + 240) = a1;
  *(void *)(v3 + 248) = v2;
  unint64_t v4 = (*(void *)(*(void *)(sub_10000534C(&qword_10008BFA0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v3 + 256) = swift_task_alloc(v4);
  *(void *)(v3 + 264) = swift_task_alloc(v4);
  *(void *)(v3 + 272) = swift_task_alloc(v4);
  *(void *)(v3 + 280) = swift_task_alloc(v4);
  *(void *)(v3 + 288) = swift_task_alloc(v4);
  *(void *)(v3 + 296) = swift_task_alloc(v4);
  *(void *)(v3 + 304) = swift_task_alloc(v4);
  *(void *)(v3 + 312) = swift_task_alloc(v4);
  *(void *)(v3 + 320) = swift_task_alloc(v4);
  *(void *)(v3 + 328) = swift_task_alloc(v4);
  *(void *)(v3 + 336) = swift_task_alloc(v4);
  return swift_task_switch(sub_100016B90, v2, 0LL);
}

uint64_t sub_100016B90()
{
  uint64_t v2 = (uint8_t *)(v1 + 104);
  uint64_t v3 = (uint8_t *)(v1 + 136);
  if (*(_BYTE *)(v1 + 457) == 1)
  {
    uint64_t v11 = *(void *)(v1 + 256);
    uint64_t v12 = *(void **)(v1 + 240);
    uint64_t v13 = (uint64_t *)MessageKeys.sessionID.unsafeMutableAddressor();
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    sub_10001AC84();
    RTCXPCDictionary.subscript.getter(v14, v15, v12, v11);
    sub_10001ABA0();
    uint64_t v16 = sub_10001AD20();
    int v17 = sub_10001AD30(v11);
    uint64_t v18 = *(void *)(v1 + 256);
    if (v17 == 1)
    {
      sub_10001A294(*(void *)(v1 + 256), &qword_10008BFA0);
    }

    else
    {
      if (swift_getEnumCaseMultiPayload(*(void *)(v1 + 256), v16) == 8)
      {
        uint64_t v37 = (uint8_t *)(v1 + 120);
        unint64_t v39 = *(uint64_t **)v18;
        uint64_t v38 = *(void *)(v18 + 8);
        sub_10001ABF4(*(void *)(v1 + 248) + 152LL, v1 + 64, 33LL);
        sub_100033D70();
        uint64_t v41 = v40;
        *(void *)(v1 + 440) = v40;
        swift_endAccess(v1 + 64);
        if (v41)
        {
          if (qword_100089FE0 != -1) {
            swift_once(&qword_100089FE0, sub_100015A60);
          }
          uint64_t v42 = *(os_log_s **)(v1 + 248);
          uint64_t v43 = sub_10001030C();
          sub_10000D34C(v43, (uint64_t)qword_10008ABA0);
          sub_10001AAE0((uint64_t)v42);
          sub_100010198();
          sub_10001ACC8();
          os_log_type_t v44 = sub_10001AB70();
          BOOL v45 = os_log_type_enabled(v42, v44);
          uint64_t v46 = *(void *)(v1 + 248);
          if (v45)
          {
            uint64_t v47 = sub_1000100B0(22LL);
            uint64_t v131 = sub_1000100B0(64LL);
            uint64_t v135 = v131;
            *(_DWORD *)uint64_t v47 = 136446466;
            sub_100010198();
            *(void *)uint64_t v37 = sub_10001AD10((uint64_t)v39, v48, &v135);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128, v47 + 4);
            sub_10001AA78(v38);
            *(_WORD *)(v47 + 12) = 2082;
            uint64_t v49 = *(void *)(v46 + 128);
            sub_1000100D8();
            *(void *)(v1 + 128) = sub_10001AC04(v49, v50, &v135);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v47 + 14);
            sub_1000083D4();
            sub_10001A98C(v46);
            sub_10001AA00( (void *)&_mh_execute_header,  v42,  v44,  "session end requested for %{public}s by %{public}s",  (uint8_t *)v47);
            sub_10001A9F8(v131);
            sub_100010010(v131);
            sub_100010010(v47);
          }

          else
          {
            sub_100010060(v38);
            sub_10001A98C(v46);
          }

          uint64_t v86 = (void *)swift_task_alloc(dword_10008C534);
          *(void *)(v1 + 448) = v86;
          *uint64_t v86 = v1;
          v86[1] = sub_100018604;
          return sub_100050800(1);
        }

        if (qword_100089FE0 != -1) {
          swift_once(&qword_100089FE0, sub_100015A60);
        }
        uint64_t v80 = *(os_log_s **)(v1 + 248);
        uint64_t v81 = sub_10001030C();
        uint64_t v0 = sub_10000D34C(v81, (uint64_t)qword_10008ABA0);
        sub_10001AAE0((uint64_t)v80);
        sub_100010198();
        sub_10001ACE4();
        os_log_type_t v82 = sub_10001AB78();
        BOOL v83 = sub_10001AA2C(v82);
        uint64_t v84 = *(void *)(v1 + 248);
        if (v83)
        {
          uint64_t v37 = (uint8_t *)sub_1000100B0(22LL);
          uint64_t v132 = sub_1000100B0(64LL);
          uint64_t v135 = v132;
          *(_DWORD *)uint64_t v37 = 136446466;
          uint64_t v0 = (uint64_t)(v37 + 4);
          sub_100010198();
          *(void *)uint64_t v2 = sub_10001AD10((uint64_t)v39, v85, &v135);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, v1 + 112, v37 + 4);
          sub_10001AA78(v38);
          sub_10001AC8C();
          uint64_t v38 = *(void *)(v84 + 128);
          unint64_t v39 = *(uint64_t **)(v84 + 136);
          sub_100010270();
          *(void *)(v1 + 112) = sub_100019964(v38, (unint64_t)v39, &v135);
          sub_10001AA80(v1 + 112, v1 + 120);
          sub_100010278();
          sub_10001A98C(v84);
          sub_10001AA00( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEFAULT,  "attempt to close non-existing session %{public}s from %{public}s",  v37);
          uint64_t v2 = (uint8_t *)v132;
          sub_10001A9F8(v132);
          sub_100010010(v132);
          sub_100010010((uint64_t)v37);
        }

        else
        {
          sub_100010060(v38);
          sub_10001A98C(v84);
        }

        if (!sub_10001AB68()) {
          goto LABEL_40;
        }
        sub_10001AC60();
        if (!v68)
        {
          __break(1u);
          goto LABEL_56;
        }

LABEL_39:
        sub_10001ABEC(*(_xpc_connection_s **)(v68 + 16));
        sub_10001AB80();
        goto LABEL_40;
      }

      sub_10001A1A4(v18);
    }

    if (qword_100089FE0 != -1) {
      swift_once(&qword_100089FE0, sub_100015A60);
    }
    uint64_t v61 = *(os_log_s **)(v1 + 248);
    uint64_t v62 = sub_10001030C();
    uint64_t v2 = (uint8_t *)sub_10000D34C(v62, (uint64_t)qword_10008ABA0);
    sub_100010324();
    sub_10001ACC8();
    os_log_type_t v63 = sub_10001AB78();
    BOOL v64 = sub_10001AA3C(v63);
    uint64_t v65 = *(void **)(v1 + 248);
    if (v64)
    {
      uint64_t v132 = v1 + 88;
      uint64_t v2 = (uint8_t *)sub_1000100B0(12LL);
      uint64_t v66 = sub_1000100B0(32LL);
      uint64_t v135 = v66;
      *(_DWORD *)uint64_t v2 = 136446210;
      uint64_t v130 = (uint64_t)(v2 + 4);
      uint64_t v0 = v65[16];
      unint64_t v67 = v65[17];
      sub_100010270();
      *(void *)(v1 + 88) = sub_100019964(v0, v67, &v135);
      sub_10001AD28(v1 + 88, v1 + 96, (uint64_t)(v2 + 4));
      sub_100010278();
      sub_100006B3C();
      sub_10001AA70( (void *)&_mh_execute_header,  v61,  (os_log_type_t)v12,  "missing required value in end session from %{public}s",  v2);
      sub_10001AA68(v66);
      sub_100010010(v66);
      sub_100010010((uint64_t)v2);
    }

    else
    {
      sub_100006B3C();
    }

    if (!sub_10001AB68()) {
      goto LABEL_40;
    }
    sub_10001AC60();
    if (!v68)
    {
      __break(1u);
LABEL_98:
      swift_once(&qword_10008A080, sub_10004D6A0);
      goto LABEL_84;
    }

    goto LABEL_39;
  }

  if (*(_BYTE *)(v1 + 457))
  {
    if (qword_100089FE0 != -1) {
      swift_once(&qword_100089FE0, sub_100015A60);
    }
    uint64_t v20 = *(void *)(v1 + 240);
    uint64_t v19 = *(void **)(v1 + 248);
    uint64_t v21 = sub_10001030C();
    os_log_type_t v22 = sub_10000D34C(v21, (uint64_t)qword_10008ABA0);
    sub_10001AAE0((uint64_t)v19);
    swift_unknownObjectRetain_n(v20, 2LL);
    sub_10001AD58();
    os_log_type_t v23 = sub_10001AB78();
    BOOL v24 = sub_10001AA3C(v23);
    uint64_t v25 = *(void *)(v1 + 248);
    if (!v24)
    {
      swift_unknownObjectRelease_n(*(void *)(v1 + 240), 2LL);
      sub_10001A98C(v25);
LABEL_30:

LABEL_40:
      uint64_t v69 = sub_10001A994();
      uint64_t v133 = v70;
      swift_task_dealloc(v69);
      sub_10001AB88();
      sub_10001AB08();
      sub_10001AB28();
      sub_10001AB38();
      sub_10001AAF0();
      sub_10001ABA8();
      sub_10001AB60();
      sub_10001AB90();
      sub_10001AB98();
      swift_task_dealloc(v133);
      return (*(uint64_t (**)(void))(v1 + 8))();
    }

    char v26 = *(_BYTE *)(v1 + 457);
    uint64_t v129 = *(void *)(v1 + 240);
    uint64_t v27 = sub_1000100B0(22LL);
    uint64_t v28 = sub_1000100B0(64LL);
    uint64_t v135 = v28;
    *(_DWORD *)uint64_t v27 = 136315394;
    *(_BYTE *)(v1 + 456) = v26;
    uint64_t v29 = String.init<A>(describing:)(v1 + 456, &type metadata for XPCMessage.MessageType);
    *(void *)(v1 + 176) = sub_100019964(v29, v30, &v135);
    sub_10001AA80(v1 + 176, v1 + 184);
    sub_10001A9B0();
    swift_unknownObjectRelease_n(v129, 2LL);
    *(_WORD *)(v27 + 12) = 2082;
    uint64_t v31 = *(void *)(v25 + 128);
    sub_10001A9B8();
    *(void *)(v1 + 96) = sub_10001AAE8(v31, v32, &v135);
    sub_10001AA80(v1 + 96, v1 + 104);
    sub_10001A9B0();
    sub_10001A98C(v25);
    sub_10001AA00( (void *)&_mh_execute_header,  (os_log_s *)v19,  v22,  "invalid client message %s from %{public}s",  (uint8_t *)v27);
    sub_10001A9F8(v28);
    sub_100010010(v28);
    uint64_t v33 = v27;
LABEL_28:
    sub_100010010(v33);
    goto LABEL_30;
  }

  uint64_t v4 = *(void *)(v1 + 336);
  uint64_t v5 = *(void **)(v1 + 240);
  uint64_t v6 = (uint64_t *)MessageKeys.clientName.unsafeMutableAddressor();
  uint64_t v0 = *v6;
  uint64_t v7 = v6[1];
  sub_100010198();
  RTCXPCDictionary.subscript.getter(v0, v7, v5, v4);
  sub_100006CAC();
  sub_10001AD20();
  int v8 = sub_10001A968(v4);
  uint64_t v9 = *(uint64_t **)(v1 + 336);
  if (v8 == 1)
  {
    uint64_t v10 = *(void *)(v1 + 336);
LABEL_5:
    sub_10001A294(v10, &qword_10008BFA0);
LABEL_24:
    if (qword_100089FE0 != -1) {
      swift_once(&qword_100089FE0, sub_100015A60);
    }
    uint64_t v19 = *(void **)(v1 + 248);
    uint64_t v52 = sub_10001030C();
    sub_10000D34C(v52, (uint64_t)qword_10008ABA0);
    sub_100010324();
    sub_10001ACC8();
    os_log_type_t v53 = sub_10001AB78();
    BOOL v54 = sub_10001AC28(v53);
    uint64_t v55 = *(void *)(v1 + 248);
    if (!v54)
    {
      sub_100006B3C();
      goto LABEL_30;
    }

    unint64_t v56 = (uint8_t *)sub_1000100B0(12LL);
    uint64_t v57 = sub_1000100B0(32LL);
    uint64_t v135 = v57;
    *(_DWORD *)unint64_t v56 = 136446210;
    uint64_t v58 = v3;
    uint64_t v60 = *(void *)(v55 + 128);
    unint64_t v59 = *(void *)(v55 + 136);
    swift_bridgeObjectRetain(v59);
    *(void *)(v1 + 136) = sub_100019964(v60, v59, &v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v58, v1 + 144, v56 + 4);
    sub_100006BBC();
    sub_100006B3C();
    sub_10001AA70( (void *)&_mh_execute_header,  (os_log_s *)v19,  (os_log_type_t)v0,  "missing required values in create session from %{public}s",  v56);
    sub_10001AA68(v57);
    sub_100010010(v57);
    uint64_t v33 = (uint64_t)v56;
    goto LABEL_28;
  }

  if (sub_10001AA4C(*(void *)(v1 + 336)) != 8)
  {
    uint64_t v51 = (uint64_t)v9;
LABEL_23:
    sub_10001A1A4(v51);
    goto LABEL_24;
  }

  uint64_t v34 = *(void *)(v1 + 328);
  uint64_t v0 = *v9;
  uint64_t v2 = (uint8_t *)v9[1];
  *(void *)(v1 + 344) = v2;
  MessageKeys.serviceName.unsafeMutableAddressor();
  sub_10001A9B8();
  sub_10001A9E8(v34);
  sub_10001A9B0();
  int v35 = sub_10001A968(v34);
  uint64_t v36 = *(uint64_t **)(v1 + 328);
  if (v35 == 1)
  {
    sub_100006AF0();
    uint64_t v10 = (uint64_t)v36;
    goto LABEL_5;
  }

  if (sub_10001AA4C(*(void *)(v1 + 328)) != 8)
  {
    sub_100006AF0();
    uint64_t v51 = (uint64_t)v36;
    goto LABEL_23;
  }

  uint64_t v37 = (uint8_t *)(v1 + 136);
  uint64_t v72 = *(void *)(v1 + 320);
  uint64_t v73 = *(void **)(v1 + 240);
  uint64_t v74 = *v36;
  uint64_t v38 = v36[1];
  uint64_t v132 = v74;
  *(void *)(v1 + 352) = v38;
  unint64_t v75 = (uint64_t *)MessageKeys.clientType.unsafeMutableAddressor();
  uint64_t v77 = *v75;
  uint64_t v76 = v75[1];
  sub_10001AC84();
  RTCXPCDictionary.subscript.getter(v77, v76, v73, v72);
  sub_10001ABA0();
  int v78 = sub_10001A968(v72);
  unint64_t v39 = *(uint64_t **)(v1 + 320);
  if (v78 == 1)
  {
    sub_100006CAC();
    sub_100006AF0();
    uint64_t v79 = (uint64_t)v39;
LABEL_44:
    sub_10001A294(v79, &qword_10008BFA0);
LABEL_61:
    uint64_t v3 = v37;
    goto LABEL_24;
  }

LABEL_56:
  if (sub_10001AA4C((uint64_t)v39) != 8)
  {
    sub_100006CAC();
    sub_100006AF0();
    uint64_t v95 = (uint64_t)v39;
LABEL_60:
    sub_10001A1A4(v95);
    goto LABEL_61;
  }

  uint64_t v87 = *(void *)(v1 + 312);
  uint64_t v88 = *(void **)(v1 + 240);
  uint64_t v128 = *v39;
  uint64_t v130 = v38;
  uint64_t v89 = v39[1];
  *(void *)(v1 + 360) = v89;
  uint64_t v90 = (uint64_t *)MessageKeys.realtime.unsafeMutableAddressor();
  uint64_t v92 = *v90;
  uint64_t v91 = v90[1];
  sub_100010270();
  RTCXPCDictionary.subscript.getter(v92, v91, v88, v87);
  sub_100010278();
  int v93 = sub_10001A968(v87);
  uint64_t v94 = *(char **)(v1 + 312);
  if (v93 == 1)
  {
    swift_bridgeObjectRelease(v130);
    sub_100006AF0();
    sub_100006CAC();
    uint64_t v79 = (uint64_t)v94;
    goto LABEL_44;
  }

  uint64_t v127 = v89;
  if (sub_10001AA4C((uint64_t)v94) != 2)
  {
    swift_bridgeObjectRelease(v130);
    sub_100006AF0();
    swift_bridgeObjectRelease(v89);
    uint64_t v95 = (uint64_t)v94;
    goto LABEL_60;
  }

  uint64_t v96 = *(void *)(v1 + 304);
  char v134 = *v94;
  MessageKeys.hierarchyToken.unsafeMutableAddressor();
  sub_10001A9B8();
  sub_10001A9E8(v96);
  sub_10001A9B0();
  uint64_t v97 = sub_10001A968(v96);
  uint64_t v98 = *(void *)(v1 + 304);
  if ((_DWORD)v97 != 1)
  {
    if (sub_10001AA4C(*(void *)(v1 + 304)) == 8)
    {
      uint64_t v99 = *(void *)(v1 + 296);
      unint64_t v100 = *(void **)(v1 + 240);
      uint64_t v101 = *(void *)(v98 + 8);
      uint64_t v102 = (uint64_t *)MessageKeys.hierarchyLevel.unsafeMutableAddressor();
      uint64_t v103 = *v102;
      uint64_t v104 = v102[1];
      sub_10001A9B8();
      RTCXPCDictionary.subscript.getter(v103, v104, v100, v99);
      sub_10001A9B0();
      if (sub_10001A968(v99) == 1)
      {
        uint64_t v97 = sub_10001ABFC();
        goto LABEL_64;
      }

      sub_10001ABFC();
    }

    sub_10001AD60();
    goto LABEL_72;
  }

        if ((swift_isUniquelyReferenced_nonNull_native(v78) & 1) != 0)
        {
          uint64_t v10 = v31;
          unint64_t v56 = v78;
        }

        else
        {
          sub_100041CC8();
          uint64_t v10 = v31;
        }

        int v17 = v84;
        uint64_t v57 = v56[2];
        if (v57 >= v56[3] >> 1) {
          sub_100004D78();
        }
        v56[2] = v57 + 1;
        int v78 = v56;
        uint64_t v58 = &v56[2 * v57];
        v58[4] = v34;
        v58[5] = v33;
      }
    }

    sub_10001A9B8();
    goto LABEL_56;
  }

LABEL_64:
  sub_10001AD68(v97, &qword_10008BFA0);
LABEL_72:
  uint64_t v101 = 0LL;
LABEL_73:
  uint64_t v126 = v101;
  *(void *)(v1 + 368) = v101;
  uint64_t v105 = *(void *)(v1 + 288);
  MessageKeys.samplingUUID.unsafeMutableAddressor();
  sub_10001A9B8();
  sub_10001A9E8(v105);
  sub_10001A9B0();
  uint64_t v106 = sub_10001A968(v105);
  uint64_t v107 = *(void *)(v1 + 288);
  if ((_DWORD)v106 == 1)
  {
    sub_10001AD68(v106, &qword_10008BFA0);
  }

  else
  {
    if (sub_10001AA4C(*(void *)(v1 + 288)) == 8)
    {
      uint64_t v108 = *(void *)(v107 + 8);
      goto LABEL_79;
    }

    sub_10001AD60();
  }

  uint64_t v108 = 0LL;
LABEL_79:
  *(void *)(v1 + 376) = v108;
  uint64_t v109 = *(void *)(v1 + 280);
  MessageKeys.eager.unsafeMutableAddressor();
  sub_10001A9B8();
  sub_10001A9E8(v109);
  sub_10001A9B0();
  uint64_t v110 = *(void *)(v1 + 272);
  sub_10001A364(*(void *)(v1 + 280), v110);
  if (sub_10001AA4C(v110) != 2)
  {
    sub_10001A1A4(*(void *)(v1 + 272));
LABEL_87:
    uint64_t v65 = (void *)v1;
    sub_10001A294(*(void *)(v1 + 280), &qword_10008BFA0);
    if ((v134 & 1) == 0) {
      goto LABEL_89;
    }
LABEL_88:
    char v112 = 1;
    goto LABEL_90;
  }

  uint64_t v65 = (void *)v1;
  int v111 = **(unsigned __int8 **)(v1 + 272);
  sub_10001A294(*(void *)(v1 + 280), &qword_10008BFA0);
  if ((v134 & 1) != 0) {
    goto LABEL_88;
  }
  if (!v111)
  {
LABEL_89:
    char v112 = 0;
    goto LABEL_90;
  }

  if (qword_10008A080 != -1) {
    goto LABEL_98;
  }
LABEL_84:
  if ((byte_1000933D8 & 1) == 0) {
    goto LABEL_89;
  }
  char v112 = 2;
LABEL_90:
  uint64_t v113 = v65;
  uint64_t v114 = v65[33];
  BOOL v115 = (void *)v113[30];
  unint64_t v116 = (uint64_t *)MessageKeys.overrideSampling.unsafeMutableAddressor();
  uint64_t v117 = *v116;
  uint64_t v118 = v116[1];
  sub_100010290();
  RTCXPCDictionary.subscript.getter(v117, v118, v115, v114);
  sub_10001ABFC();
  int v119 = sub_10001A968(v114);
  uint64_t v120 = v113;
  uint64_t v121 = v113[33];
  if (v119 == 1)
  {
    sub_10001A294(v113[33], &qword_10008BFA0);
  }

  else if (sub_10001AA4C(v113[33]) != 5)
  {
    sub_10001A1A4(v121);
  }

  if (*(void *)(v113[31] + 112LL))
  {
    sub_100010324();
    int v122 = XPCConnection.remoteUID.getter();
    sub_10001020C();
    uint64_t v123 = qword_1000933C0;
    v113[48] = qword_1000933C0;
    if (v123)
    {
      uint64_t v124 = dword_10008B144;
      sub_100010324();
      BOOL v125 = (void *)swift_task_alloc(v124);
      v120[49] = v125;
      *BOOL v125 = v120;
      v125[1] = sub_1000179C4;
      return sub_100022C3C(v122, v112, v128, v127, v0, (uint64_t)v2, v132, v130);
    }
  }

  else
  {
    sub_100006CAC();
    swift_bridgeObjectRelease(v126);
    __break(1u);
  }

  sub_100006CAC();
  uint64_t result = swift_bridgeObjectRelease(v126);
  __break(1u);
  return result;
}

uint64_t sub_1000179C4(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 392);
  *(void *)(v3 + 400) = a1;
  *(void *)(v3 + 408) = v1;
  sub_10001ACD0(v4);
  sub_100006BBC();
  sub_1000083D4();
  sub_100010278();
  sub_10001A9B0();
  sub_10001ABA0();
  sub_100006CA4();
  sub_10001AC0C();
  return sub_10001A974();
}

void sub_100017A68()
{
  uint64_t v21 = v2;
  uint64_t v22 = v3;
  uint64_t v20 = v0;
  uint64_t v4 = *(void *)(v0 + 400);
  if (v4)
  {
    sub_100010324();
    swift_task_switch(sub_100017C54, v4, 0LL);
    return;
  }

  xpc_object_t v5 = sub_10001AB68();
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = v5;
  if (qword_100089FE0 != -1) {
    swift_once(&qword_100089FE0, sub_100015A60);
  }
  uint64_t v7 = *(os_log_s **)(v0 + 248);
  uint64_t v8 = sub_10001030C();
  sub_10000D34C(v8, (uint64_t)qword_10008ABA0);
  sub_100010324();
  sub_10001ACE4();
  os_log_type_t v9 = sub_10001AB70();
  BOOL v10 = sub_10001AA3C(v9);
  uint64_t v11 = *(void *)(v0 + 248);
  if (v10)
  {
    uint64_t v18 = v0 + 168;
    uint64_t v12 = (uint8_t *)sub_1000100B0(12LL);
    uint64_t v13 = sub_1000100B0(32LL);
    uint64_t v19 = v13;
    *(_DWORD *)uint64_t v12 = 136446210;
    uint64_t v14 = *(void *)(v11 + 128);
    unint64_t v15 = *(void *)(v11 + 136);
    sub_100010290();
    *(void *)(v0 + 168) = sub_100019964(v14, v15, &v19);
    sub_10001AD28(v0 + 168, v0 + 176, (uint64_t)(v12 + 4));
    sub_10001ABFC();
    sub_100006CA4();
    sub_10001AA70((void *)&_mh_execute_header, v7, v1, "notifying %{public}s that session is disabled", v12);
    sub_10001AA68(v13);
    sub_100010010(v13);
    sub_100010010((uint64_t)v12);
  }

  else
  {
    sub_100006CA4();
  }

  uint64_t v16 = *(void *)(v0 + 248);
  xpc_dictionary_set_BOOL(v6, "disabled", 1);
  uint64_t v17 = *(void *)(v16 + 112);
  if (v17)
  {
    xpc_connection_send_message(*(xpc_connection_t *)(v17 + 16), v6);
    swift_unknownObjectRelease(v6);
LABEL_11:
    sub_10001AA88();
    sub_10001AB88();
    sub_10001AB08();
    sub_10001AB28();
    sub_10001AB38();
    sub_10001AAF0();
    sub_10001ABA8();
    sub_10001AB60();
    sub_10001AB90();
    sub_10001AB98();
    swift_task_dealloc(v18);
    sub_10001A94C(*(uint64_t (**)(void))(v0 + 8));
    return;
  }

  __break(1u);
}

uint64_t sub_100017C54()
{
  *(_BYTE *)(v0 + 458) = sub_100050754() & 1;
  sub_10001AC0C();
  return sub_10001A974();
}

uint64_t sub_100017C94()
{
  uint64_t v1 = v0 + 232;
  uint64_t v2 = &unk_100069000;
  if ((*(_BYTE *)(v0 + 458) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + 400);
    uint64_t v4 = *(void *)(v3 + 112);
    uint64_t v5 = *(void *)(v3 + 120);
    sub_10001ABF4(*(void *)(v0 + 248) + 152LL, v0 + 40, 33LL);
    swift_retain(v3);
    sub_100010198();
    sub_100033F1C(v3, v4, v5);
    swift_endAccess(v0 + 40);
    sub_100006CAC();
    if (qword_100089FE0 != -1) {
      swift_once(&qword_100089FE0, sub_100015A60);
    }
    uint64_t v6 = *(os_log_s **)(v0 + 400);
    uint64_t v7 = *(void *)(v0 + 248);
    uint64_t v8 = sub_10001030C();
    sub_10000D34C(v8, (uint64_t)qword_10008ABA0);
    sub_100010324();
    swift_retain(v7);
    sub_10001AC38();
    os_log_type_t v9 = sub_10001AB70();
    BOOL v10 = sub_10001AA3C(v9);
    uint64_t v11 = *(void *)(v0 + 248);
    if (v10)
    {
      uint64_t v12 = sub_1000100B0(22LL);
      uint64_t v47 = sub_1000100B0(64LL);
      uint64_t v13 = v47;
      *(_DWORD *)uint64_t v12 = 136446466;
      uint64_t v14 = *(void *)(v3 + 112);
      sub_1000100D8();
      *(void *)(v0 + 232) = sub_10001AC04(v14, v15, &v47);
      sub_10001AA80(v0 + 232, v0 + 240);
      sub_1000083D4();
      sub_10001AC7C();
      *(_WORD *)(v12 + 12) = 2082;
      uint64_t v16 = *(void *)(v11 + 128);
      sub_10001A9B8();
      *(void *)(v0 + 152) = sub_10001AAE8(v16, v17, &v47);
      uint64_t v2 = (void *)&unk_100069000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v12 + 14);
      sub_10001A9B0();
      sub_100006B3C();
      sub_10001AA00( (void *)&_mh_execute_header,  v6,  (os_log_type_t)v7,  "new session %{public}s started for %{public}s",  (uint8_t *)v12);
      sub_10001A9F8(v13);
      uint64_t v18 = v13;
      uint64_t v1 = v0 + 232;
      sub_100010010(v18);
      sub_100010010(v12);
    }

    else
    {
      sub_100006B3C();

      sub_10001AC7C();
    }
  }

  xpc_object_t v19 = sub_10001AB68();
  *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = v19;
  if (!v19)
  {
    sub_10001A98C(*(void *)(v0 + 400));
LABEL_18:
    uint64_t v41 = sub_10001A994();
    uint64_t v46 = v42;
    swift_task_dealloc(v41);
    sub_10001AB88();
    sub_10001AB08();
    sub_10001AB28();
    sub_10001AB38();
    sub_10001AAF0();
    sub_10001ABA8();
    sub_10001AB60();
    sub_10001AB90();
    sub_10001AB98();
    swift_task_dealloc(v46);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v20 = v19;
  uint64_t v21 = v2;
  char v22 = *(_BYTE *)(v0 + 458);
  uint64_t v23 = *(void *)(v0 + 400);
  uint64_t v24 = String.utf8CString.getter(*(void *)(v23 + 112), *(void *)(v23 + 120));
  xpc_dictionary_set_string(v20, "genID", (const char *)(v24 + 32));
  sub_10001020C();
  if ((v22 & 1) == 0) {
    return swift_task_switch(sub_10001812C, *(void *)(v0 + 400), 0LL);
  }
  if (qword_100089FE0 != -1) {
    swift_once(&qword_100089FE0, sub_100015A60);
  }
  uint64_t v25 = *(os_log_s **)(v0 + 400);
  uint64_t v26 = *(void *)(v0 + 248);
  uint64_t v27 = sub_10001030C();
  sub_10000D34C(v27, (uint64_t)qword_10008ABA0);
  sub_100010324();
  sub_10001AA24();
  sub_10001AD58();
  os_log_type_t v28 = sub_10001AB70();
  BOOL v29 = sub_10001AB10(v28);
  uint64_t v30 = *(void *)(v0 + 400);
  uint64_t v31 = *(void *)(v0 + 248);
  if (v29)
  {
    uint64_t v32 = sub_1000100B0(22LL);
    uint64_t v44 = sub_1000100B0(64LL);
    *(_DWORD *)uint64_t v32 = v21[199];
    uint64_t v45 = v1;
    uint64_t v47 = v44;
    uint64_t v43 = v30;
    uint64_t v34 = *(void *)(v31 + 128);
    unint64_t v33 = *(void *)(v31 + 136);
    swift_bridgeObjectRetain(v33);
    *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = sub_100019964(v34, v33, &v47);
    sub_1000103BC(v0 + 216, v0 + 224);
    sub_100006BBC();
    sub_10001AC7C();
    *(_WORD *)(v32 + 12) = 2082;
    uint64_t v35 = *(void *)(v23 + 112);
    unint64_t v36 = *(void *)(v23 + 120);
    sub_10001AC84();
    *(void *)(v0 + 224) = sub_100019964(v35, v36, &v47);
    sub_10001AA80(v0 + 224, v45);
    sub_10001ABA0();
    swift_release(v43);
    sub_10001AA00( (void *)&_mh_execute_header,  v25,  (os_log_type_t)v26,  "notifying %{public}s that session %{public}s is disabled",  (uint8_t *)v32);
    sub_10001A9F8(v44);
    sub_100010010(v44);
    sub_100010010(v32);
  }

  else
  {
    sub_10001AC7C();

    swift_release(v30);
  }

  xpc_dictionary_set_BOOL(v20, "disabled", 1);
  sub_10001AC60();
  if (v38)
  {
    uint64_t v39 = *(void *)(v0 + 400);
    uint64_t v40 = (_xpc_connection_s *)sub_10001AB30();
    sub_10001ABEC(v40);
    sub_10001A98C(v39);
    sub_10001AB20();
    sub_10001AB80();
    goto LABEL_18;
  }

  uint64_t result = swift_release(*(void *)(v0 + 400));
  __break(1u);
  return result;
}

uint64_t sub_10001812C()
{
  *(void *)(v0 + 424) = sub_100050774();
  *(void *)(v0 + 432) = v1;
  sub_10001AC0C();
  return sub_10001A974();
}

uint64_t sub_100018168()
{
  uint64_t v50 = v0 + 200;
  uint64_t v1 = *(void *)(v0 + 424);
  uint64_t v2 = &unk_100069000;
  if (*(void *)(v1 + 16))
  {
    uint64_t v3 = *(void **)(v0 + 416);
    uint64_t v4 = sub_100015880(v1);
    xpc_dictionary_set_value(v3, "allowed", v4);
    sub_10001AB20();
    if (qword_100089FE0 != -1) {
      swift_once(&qword_100089FE0, sub_100015A60);
    }
    uint64_t v6 = *(void *)(v0 + 424);
    uint64_t v5 = *(void *)(v0 + 432);
    uint64_t v7 = *(void *)(v0 + 400);
    uint64_t v8 = sub_10001030C();
    sub_10000D34C(v8, (uint64_t)qword_10008ABA0);
    sub_10001AAE0(v7);
    sub_1000100D0(v6);
    sub_1000100D0(v5);
    os_log_type_t v9 = (os_log_s *)sub_10001AC38();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    BOOL v11 = sub_10001AC28(v10);
    uint64_t v13 = *(void *)(v0 + 424);
    uint64_t v12 = *(void *)(v0 + 432);
    uint64_t v14 = *(void *)(v0 + 400);
    if (v11)
    {
      uint64_t v15 = (uint8_t *)sub_1000100B0(22LL);
      uint64_t v49 = sub_1000100B0(64LL);
      uint64_t v52 = v49;
      *(_DWORD *)uint64_t v15 = 136446466;
      uint64_t v16 = *(void *)(v14 + 112);
      sub_100010198();
      *(void *)(v0 + 200) = sub_10001AD10(v16, v17, &v52);
      sub_10001AA80(v50, v0 + 208);
      sub_100006CAC();
      sub_10001A98C(v14);
      sub_10001AC8C();
      uint64_t v18 = sub_100010270();
      uint64_t v19 = Set.description.getter(v18, &type metadata for Int, &protocol witness table for Int);
      uint64_t v21 = v20;
      sub_100010278();
      *(void *)(v0 + 208) = sub_10001AAE8(v19, v22, &v52);
      sub_10001AA80(v0 + 208, v0 + 216);
      swift_bridgeObjectRelease(v21);
      sub_100010060(v13);
      sub_100010060(v12);
      sub_10001AA00( (void *)&_mh_execute_header,  v9,  (os_log_type_t)v6,  "new session %{public}s allowlisting events: %{public}s",  v15);
      sub_10001A9F8(v49);
      uint64_t v2 = (void *)&unk_100069000;
      sub_100010010(v49);
      sub_100010010((uint64_t)v15);
    }

    else
    {
      sub_100010060(*(void *)(v0 + 424));
      sub_100010060(v12);

      sub_10001A98C(v14);
    }
  }

  if (*(void *)(*(void *)(v0 + 432) + 16LL))
  {
    uint64_t v23 = *(void **)(v0 + 416);
    uint64_t v24 = sub_100015880(*(void *)(v0 + 432));
    xpc_dictionary_set_value(v23, "denied", v24);
    sub_10001AB80();
    if (qword_100089FE0 != -1) {
      swift_once(&qword_100089FE0, sub_100015A60);
    }
    uint64_t v25 = *(void *)(v0 + 424);
    uint64_t v26 = *(void *)(v0 + 432);
    uint64_t v27 = *(void *)(v0 + 400);
    uint64_t v28 = sub_10001030C();
    sub_10000D34C(v28, (uint64_t)qword_10008ABA0);
    sub_10001AAE0(v27);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    BOOL v29 = (os_log_s *)sub_10001AD58();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    BOOL v31 = sub_10001AB10(v30);
    uint64_t v32 = *(void *)(v0 + 432);
    uint64_t v33 = *(void *)(v0 + 400);
    if (v31)
    {
      uint64_t v47 = *(void *)(v0 + 424);
      uint64_t v34 = (uint8_t *)swift_slowAlloc(22LL, -1LL);
      uint64_t v48 = sub_1000100B0(64LL);
      uint64_t v52 = v48;
      *(_DWORD *)uint64_t v34 = v2[199];
      uint64_t v35 = *(void *)(v33 + 112);
      sub_1000100D8();
      *(void *)(v0 + 184) = sub_10001AC04(v35, v36, &v52);
      sub_1000103BC(v0 + 184, v0 + 192);
      sub_1000083D4();
      sub_10001A98C(v33);
      sub_10001AC8C();
      uint64_t v37 = sub_100010198();
      uint64_t v38 = Set.description.getter(v37, &type metadata for Int, &protocol witness table for Int);
      unint64_t v40 = v39;
      sub_100006CAC();
      *(void *)(v0 + 192) = sub_100019964(v38, v40, &v52);
      sub_10001AA80(v0 + 192, v50);
      sub_10001ABA0();
      sub_100010060(v47);
      sub_100010060(v32);
      sub_10001AA00( (void *)&_mh_execute_header,  v29,  (os_log_type_t)v25,  "new session %{public}s denylisting events: %{public}s",  v34);
      sub_10001A9F8(v48);
      sub_100010010(v48);
      sub_100010010((uint64_t)v34);
    }

    else
    {
      sub_100010060(*(void *)(v0 + 424));
      sub_100010060(v32);

      sub_10001A98C(v33);
    }
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 424));
    sub_10000FFD8();
  }

  sub_10001AC60();
  if (v41)
  {
    uint64_t v42 = *(void *)(v0 + 400);
    uint64_t v43 = (_xpc_connection_s *)sub_10001AB30();
    sub_10001ABEC(v43);
    sub_10001A98C(v42);
    sub_10001AB20();
    sub_10001AB80();
    uint64_t v44 = sub_10001A994();
    uint64_t v51 = v45;
    swift_task_dealloc(v44);
    sub_10001AB88();
    sub_10001AB08();
    sub_10001AB28();
    sub_10001AB38();
    sub_10001AAF0();
    sub_10001ABA8();
    sub_10001AB60();
    sub_10001AB90();
    sub_10001AB98();
    swift_task_dealloc(v51);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t result = swift_release(*(void *)(v0 + 400));
    __break(1u);
  }

  return result;
}

uint64_t sub_100018604()
{
  return sub_10001A9C0();
}

void sub_100018640()
{
  if (!sub_10001AB68())
  {
    swift_release(*(void *)(v0 + 440));
    goto LABEL_5;
  }

  sub_10001AC60();
  if (v1)
  {
    uint64_t v2 = (_xpc_connection_s *)sub_10001AB30();
    sub_10001ABEC(v2);
    sub_100006C04();
    sub_10001AB20();
    sub_10001AB80();
LABEL_5:
    uint64_t v3 = sub_10001A994();
    uint64_t v5 = v4;
    swift_task_dealloc(v3);
    sub_10001AB88();
    sub_10001AB08();
    sub_10001AB28();
    sub_10001AB38();
    sub_10001AAF0();
    sub_10001ABA8();
    sub_10001AB60();
    sub_10001AB90();
    sub_10001AB98();
    swift_task_dealloc(v5);
    sub_10001A930(*(uint64_t (**)(void))(v0 + 8));
    return;
  }

  __break(1u);
}

void sub_1000186DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v23;
  a22 = v24;
  a20 = v22;
  if (qword_100089FE0 != -1) {
    swift_once(&qword_100089FE0, sub_100015A60);
  }
  uint64_t v25 = *(void *)(v22 + 408);
  uint64_t v26 = sub_10001030C();
  sub_10000D34C(v26, (uint64_t)qword_10008ABA0);
  swift_errorRetain(v25);
  swift_errorRetain(v25);
  uint64_t v27 = (os_log_s *)sub_10001ACC8();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  uint64_t v30 = *(void *)(v22 + 408);
  if (v29)
  {
    a10 = v22 + 160;
    BOOL v31 = (uint8_t *)sub_1000100B0(12LL);
    uint64_t v32 = sub_1000100B0(32LL);
    a11 = v32;
    *(_DWORD *)BOOL v31 = 136446210;
    swift_getErrorValue(v30, v22 + 144, v22 + 16);
    uint64_t v33 = Error.localizedDescription.getter(*(void *)(v22 + 24), *(void *)(v22 + 32));
    *(void *)(v22 + 160) = sub_100019964(v33, v34, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v22 + 160, v22 + 168, v31 + 4);
    sub_10000FFD8();
    sub_10001AC6C();
    sub_10001AC6C();
    sub_10001AA70((void *)&_mh_execute_header, v27, v28, "failed initializing session: %{public}s", v31);
    sub_10001AA68(v32);
    sub_100010010(v32);
    sub_100010010((uint64_t)v31);
  }

  else
  {
    sub_10001AC6C();
    sub_10001AC6C();
  }

  xpc_object_t v35 = sub_10001AB68();
  if (!v35)
  {
    swift_errorRelease(*(void *)(v22 + 408));
    goto LABEL_10;
  }

  uint64_t v36 = *(void *)(v22 + 248);
  xpc_dictionary_set_string(v35, "error", "init failed");
  if (*(void *)(v36 + 112))
  {
    uint64_t v37 = *(void *)(v22 + 408);
    uint64_t v38 = (_xpc_connection_s *)sub_10001AB30();
    sub_10001ABEC(v38);
    swift_errorRelease(v37);
    sub_10001AB20();
    sub_10001AB80();
LABEL_10:
    sub_10001AA88();
    sub_10001AB88();
    sub_10001AB08();
    sub_10001AB28();
    sub_10001AB38();
    sub_10001AAF0();
    sub_10001ABA8();
    sub_10001AB60();
    sub_10001AB90();
    sub_10001AB98();
    swift_task_dealloc(a10);
    sub_10001A94C(*(uint64_t (**)(void))(v22 + 8));
    return;
  }

  __break(1u);
}

void sub_1000188E4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = XPC_ERROR_CONNECTION_INVALID.getter();
  uint64_t v6 = swift_unknownObjectRelease(v5);
  if ((void *)v5 == a1)
  {
    if (qword_100089FE0 != -1) {
      swift_once(&qword_100089FE0, sub_100015A60);
    }
    uint64_t v18 = sub_10001030C();
    uint64_t v19 = (void *)sub_10000D34C(v18, (uint64_t)qword_10008ABA0);
    uint64_t v20 = sub_10001AA24();
    Logger.logObject.getter(v20);
    os_log_type_t v21 = sub_10001AD00();
    if (sub_10001AAF8(v21))
    {
      uint64_t v22 = (_DWORD *)sub_1000100B0(12LL);
      uint64_t v23 = sub_1000100B0(32LL);
      uint64_t v55 = v23;
      *uint64_t v22 = 136446210;
      uint64_t v24 = *(void *)(v3 + 128);
      sub_10001A9B8();
      uint64_t v26 = sub_10001AAE8(v24, v25, &v55);
      sub_10001AAC4(v26, v27, v28, v29, v30, v31, v32, v33, v54, v55);
      sub_100006C04();
      sub_10001A9B0();
      sub_10001AA54((void *)&_mh_execute_header, v34, v35, "XPC client %{public}s closed connection");
      sub_10001AA68(v23);
      sub_100010010(v23);
      sub_100010010((uint64_t)v22);
    }

    else
    {

      sub_100006C04();
    }

    sub_10001ACD8();
  }

  else
  {
    uint64_t v7 = XPC_ERROR_CONNECTION_INTERRUPTED.getter(v6);
    swift_unknownObjectRelease(v7);
    if ((void *)v7 == a1)
    {
      if (qword_100089FE0 != -1) {
        swift_once(&qword_100089FE0, sub_100015A60);
      }
      uint64_t v36 = sub_10001030C();
      uint64_t v37 = (void *)sub_10000D34C(v36, (uint64_t)qword_10008ABA0);
      uint64_t v38 = sub_10001AA24();
      Logger.logObject.getter(v38);
      os_log_type_t v39 = sub_10001AD00();
      if (sub_10001AAF8(v39))
      {
        unint64_t v40 = (_DWORD *)sub_1000100B0(12LL);
        uint64_t v41 = sub_1000100B0(32LL);
        uint64_t v55 = v41;
        *unint64_t v40 = 136446210;
        uint64_t v42 = *(void *)(v3 + 128);
        sub_10001A9B8();
        uint64_t v44 = sub_10001AAE8(v42, v43, &v55);
        sub_10001AAC4(v44, v45, v46, v47, v48, v49, v50, v51, v54, v55);
        sub_100006C04();
        sub_10001A9B0();
        sub_10001AA54((void *)&_mh_execute_header, v52, v53, "XPC client %{public}s interrupted connection");
        sub_10001AA68(v41);
        sub_100010010(v41);
        sub_100010010((uint64_t)v40);
      }

      else
      {

        swift_release(v3);
      }
    }

    else
    {
      uint64_t v8 = xpc_copy_description(a1);
      uint64_t v9 = String.init(cString:)(v8);
      unint64_t v11 = v10;
      if (qword_100089FE0 != -1) {
        swift_once(&qword_100089FE0, sub_100015A60);
      }
      uint64_t v12 = sub_10001030C();
      uint64_t v13 = (os_log_s *)sub_10000D34C(v12, (uint64_t)qword_10008ABA0);
      uint64_t v14 = sub_10001015C();
      Logger.logObject.getter(v14);
      os_log_type_t v15 = sub_10001AD00();
      if (sub_10001AA2C(v15))
      {
        uint64_t v16 = (uint8_t *)sub_1000100B0(12LL);
        uint64_t v17 = sub_1000100B0(32LL);
        uint64_t v55 = v17;
        *(_DWORD *)uint64_t v16 = 136315138;
        sub_10001015C();
        uint64_t v54 = sub_100019964(v9, v11, &v55);
        sub_10001AD28((uint64_t)&v54, (uint64_t)&v55, (uint64_t)(v16 + 4));
        sub_10001AA78(v11);
        sub_10001AA70((void *)&_mh_execute_header, v13, v2, "XPC connection triggered error: %s", v16);
        sub_10001AA68(v17);
        sub_100010010(v17);
        sub_100010010((uint64_t)v16);
      }

      else
      {

        sub_100010060(v11);
      }

      sub_10001ACD8();
      free(v8);
    }
  }

uint64_t sub_100018C88(uint64_t a1, uint64_t a2)
{
  void v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  return swift_task_switch(sub_100018CA4, v2, 0LL);
}

uint64_t sub_100018CA4()
{
  uint64_t v1 = *(void *)(v0 + 80);
  sub_10001ABF4(v1 + 152, v0 + 16, 32LL);
  uint64_t v2 = *(void *)(v1 + 152);
  if (*(void *)(v2 + 16))
  {
    uint64_t v4 = *(void *)(v0 + 64);
    uint64_t v3 = *(void *)(v0 + 72);
    sub_1000100D8();
    unint64_t v5 = sub_100033A58(v4, v3);
    if ((v6 & 1) != 0)
    {
      uint64_t v7 = *(void *)(*(void *)(v2 + 56) + 8 * v5);
      sub_10001AD3C();
      sub_100010324();
      sub_10001AD18();
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
    }

    sub_10001AD18();
  }

  uint64_t result = sub_10001AD3C();
  uint64_t v9 = qword_1000933C0;
  *(void *)(v0 + 88) = qword_1000933C0;
  if (v9)
  {
    if (*(void *)(*(void *)(v0 + 80) + 112LL))
    {
      sub_10001AA24();
      sub_100010324();
      int v10 = XPCConnection.remoteUID.getter();
      sub_10001020C();
      unint64_t v11 = (void *)swift_task_alloc(dword_10008B154);
      *(void *)(v0 + 96) = v11;
      *unint64_t v11 = v0;
      v11[1] = sub_100018DAC;
      return sub_100024A58(*(void *)(v0 + 64), *(void *)(v0 + 72), v10);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_100018DAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 96LL);
  *(void *)(*(void *)v1 + 104LL) = a1;
  sub_10001ACD0(v2);
  sub_10001020C();
  sub_10001AC0C();
  return sub_10001A974();
}

uint64_t sub_100018E04()
{
  uint64_t v1 = *(void *)(v0 + 104);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 72);
    uint64_t v3 = *(void *)(v0 + 64);
    sub_10001ABF4(*(void *)(v0 + 80) + 152LL, v0 + 40, 33LL);
    sub_1000100D8();
    uint64_t v4 = sub_100010324();
    sub_100033F1C(v4, v3, v2);
    sub_10001AD3C();
    uint64_t v1 = *(void *)(v0 + 104);
    sub_10001AD18();
  }

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t *sub_100018E8C()
{
  uint64_t v1 = *v0;
  sub_10000534C((uint64_t *)&unk_10008C4A0);
  sub_100006B54();
  __chkstk_darwin(v2);
  sub_100006B64();
  uint64_t v5 = v4 - v3;
  sub_10001ABF4((uint64_t)(v0 + 19), (uint64_t)v13, 0LL);
  uint64_t v6 = v0[19];
  uint64_t v8 = v0[16];
  uint64_t v7 = v0[17];
  uint64_t v9 = sub_10001AC74();
  _s10RTCUtility9XPCObjectOwst_0(v5, 1LL, 1LL, v9);
  int v10 = (void *)sub_100006B14((uint64_t)&unk_100083480, 64LL);
  void v10[2] = 0LL;
  v10[3] = 0LL;
  v10[4] = v6;
  v10[5] = v8;
  v10[6] = v7;
  v10[7] = v1;
  sub_1000100D8();
  sub_10001015C();
  uint64_t v11 = sub_100016914(v5, (uint64_t)&unk_10008AD18, (uint64_t)v10);
  swift_release(v11);
  swift_release(v0[14]);

  swift_bridgeObjectRelease(v0[17]);
  swift_release(v0[18]);
  swift_bridgeObjectRelease(v0[19]);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100018F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  _OWORD v6[2] = a4;
  return swift_task_switch(sub_100018FB0, 0LL, 0LL);
}

#error "1000190B8: call analysis failed (funcsize=144)"
uint64_t sub_100019208()
{
  uint64_t v0;
  sub_10001AC50();
  sub_10001A97C(*(void *)(v0 + 64));
  return sub_10001A9C0();
}

#error "10001931C: call analysis failed (funcsize=141)"
uint64_t sub_10001948C()
{
  uint64_t v0;
  sub_100018E8C();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for Client()
{
  return objc_opt_self(&OBJC_CLASS____TtC13rtcreportingd6Client);
}

uint64_t destroy for ClientIdentity(void *a1)
{
  return swift_bridgeObjectRelease(a1[5]);
}

void *initializeWithCopy for ClientIdentity(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for ClientIdentity(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for ClientIdentity(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for ClientIdentity(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClientIdentity(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClientIdentity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ClientIdentity()
{
  return &type metadata for ClientIdentity;
}

void sub_1000196D8()
{
  uint64_t v1 = sub_10001A7C4( &qword_10008AC88,  v0,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_10006A12C);
  Swift::UInt v2 = sub_10001AD70(v1);
  Hasher._combine(_:)(v2);
  Hasher._finalize()();
  sub_1000157D0();
}

uint64_t sub_100019730@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

void sub_100019758()
{
}

void sub_100019778(uint64_t a1, uint64_t a2)
{
}

void sub_100019798(uint64_t a1)
{
  uint64_t v2 = sub_10001A7C4( &qword_10008AC88,  v1,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_10006A12C);
  Swift::UInt v3 = sub_10001AD70(v2);
  Hasher._combine(_:)(v3);
  Hasher._finalize()();
  sub_1000157D0();
}

BOOL sub_1000197F8(uint64_t *a1, uint64_t *a2)
{
  return sub_1000161AC(*a1, *a2);
}

uint64_t sub_100019804(uint64_t a1, uint64_t a2)
{
  return sub_10001A7C4( &qword_10008AC80,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_10006A0B4);
}

void *sub_100019830()
{
  return &protocol witness table for ObjectIdentifier;
}

uint64_t sub_10001983C(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000198A0;
  return v6(a1);
}

uint64_t sub_1000198A0()
{
  return sub_10001ABB0(v0[1]);
}

uint64_t sub_1000198D8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000198F8(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  uint64_t v8 = sub_100019964(v6, v7, a3);
  uint64_t v9 = *a1;
  uint64_t v10 = *a1 + 8;
  uint64_t v12 = v8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v9);
  uint64_t result = sub_10000FFD8();
  *a1 = v10;
  return result;
}

uint64_t sub_100019964(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100019A30(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10001A74C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10001A74C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    sub_1000100D8();
  }

  sub_100005F54(v12);
  return v7;
}

void *sub_100019A30(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_100019B84((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
      uint64_t result = 0LL;
      *a1 = __dst;
      return result;
    }

    goto LABEL_11;
  }

  if ((a6 & 0x1000000000000000LL) != 0)
  {
LABEL_11:
    uint64_t result = sub_100019C48(a5, a6);
    *a1 = v12;
    return result;
  }

  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }

  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL);
      __break(1u);
      return result;
    }
  }

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return (void *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

void *sub_100019B84(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory with negative count",  60LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1170LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1173LL,  0);
  }

  __break(1u);
  return result;
}

void *sub_100019C48(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_100019CDC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_100019EB0(0LL, v2[2] + 1LL, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100019EB0((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_100019CDC(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v4 = String.UTF8View._foreignCount()();
    if (v4) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }

  if ((a2 & 0x2000000000000000LL) != 0) {
    Swift::Int v4 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  uint64_t v5 = sub_100019E4C(v4, 0LL);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  2,  71LL,  0);
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v6 = v5;
  uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    uint64_t v9 = "Insufficient space allocated to copy string contents";
    uint64_t v10 = "Swift/StringUTF8View.swift";
    uint64_t v11 = 52LL;
    uint64_t v12 = 26LL;
    goto LABEL_15;
  }

  if (v7 == v4) {
    return v6;
  }
  uint64_t v9 = "invalid Collection: less than 'count' elements in collection";
  uint64_t v10 = "Swift/ContiguousArrayBuffer.swift";
  uint64_t v11 = 60LL;
  uint64_t v12 = 33LL;
LABEL_15:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v9, v11, 2LL, v10, v12);
  __break(1u);
  return result;
}

void *sub_100019E4C(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_10000534C(&qword_10008ACE0);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  uint64_t v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

char *sub_100019EB0(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000534C(&qword_10008ACE0);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10001A048(v14, v8, v13);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_100019F84(v14, v8, v13);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_100019F84(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

char *sub_10001A048(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000LL) != 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }

  return __src;
}

_BYTE **sub_10001A0C8(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  char v4 = *result;
  *char v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t sub_10001A0D8()
{
  return swift_deallocObject(v0, 49LL, 7LL);
}

uint64_t sub_10001A108()
{
  char v2 = *(_BYTE *)(v0 + 48);
  unint64_t v3 = (void *)swift_task_alloc(dword_10008AC94);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  uint64_t v4 = sub_10001AB40(v3);
  return sub_100016A50(v4, v5, v6, v7, v8, v2);
}

uint64_t sub_10001A170()
{
  return sub_10001ABB0(v0[1]);
}

uint64_t sub_10001A1A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for XPCObject(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10001A1E0()
{
  return swift_deallocObject(v0, 65LL, 7LL);
}

uint64_t sub_10001A218()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  char v4 = *(_BYTE *)(v0 + 64);
  uint64_t v5 = (void *)swift_task_alloc(dword_10008ACA4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  uint64_t v6 = sub_10001AB40(v5);
  return sub_100016568(v6, v7, v8, v9, v10, v2, v3, v4);
}

uint64_t sub_10001A294(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000534C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_10001A2D0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10001A2F4(uint64_t a1)
{
  char v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_10008ACC4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10001A170;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10008ACC0 + dword_10008ACC0))(a1, v4);
}

uint64_t sub_10001A364(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000534C(&qword_10008BFA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void *sub_10001A3AC(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v4 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v3 = sub_10000534C(&qword_10008ACD8);
      uint64_t v4 = (void *)swift_allocObject(v3, 8 * v2 + 32, 7LL);
      size_t v5 = j__malloc_size(v4);
      v4[2] = v2;
      v4[3] = (2 * ((uint64_t)(v5 - 32) / 8)) | 1;
    }

    __n128 v6 = swift_bridgeObjectRetain(v1);
    uint64_t v7 = specialized _ArrayBuffer._copyContents(initializing:)(v4 + 4, v2, v1, v6);
    uint64_t v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_8:
    if (v1 < 0) {
      uint64_t v9 = v1;
    }
    else {
      uint64_t v9 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    __n128 v10 = swift_bridgeObjectRetain(v1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v9, v10);
    swift_bridgeObjectRelease(v1);
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }

  return v4;
}

uint64_t sub_10001A49C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL) & 1;
  }
}

unint64_t sub_10001A4DC( uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0LL;
  }
  uint64_t v9 = 7LL;
  if (((a4 >> 60) & ((a3 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v9 = 11LL;
  }
  unint64_t v10 = v9 | (v5 << 16);
  while (1)
  {
    unint64_t v10 = String.index(before:)(v10, a3, a4);
    uint64_t v11 = String.subscript.getter(v10, a3, a4);
    uint64_t v13 = v12;
    v17[0] = v11;
    v17[1] = v12;
    char v14 = a1(v17);
    if (v4) {
      break;
    }
    char v15 = v14;
    swift_bridgeObjectRelease(v13);
    if ((v15 & 1) != 0) {
      return v10;
    }
    if (v10 < 0x4000) {
      return 0LL;
    }
  }

  swift_bridgeObjectRelease(v13);
  return v10;
}

int64_t sub_10001A5DC(int64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1LL << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  unint64_t v8 = v7 & (-2LL << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
  }
  unint64_t v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    unint64_t v10 = *(void *)(v6 + 8 * v9);
    if (v10) {
      return __clz(__rbit64(v10)) + (v9 << 6);
    }
    unint64_t v11 = (unint64_t)(result + 63) >> 6;
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      unint64_t v10 = *(void *)(v6 + 8 * v9);
      if (v10) {
        return __clz(__rbit64(v10)) + (v9 << 6);
      }
      while (v5 + 3 < v11)
      {
        unint64_t v10 = *(void *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }

  return result;
}

uint64_t sub_10001A6C0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  uint64_t v2 = 64LL;
  for (uint64_t i = 9LL; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64LL;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_10001A740(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_10001A74C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_10001A788()
{
  unint64_t result = qword_10008ACF0;
  if (!qword_10008ACF0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10008ACF0);
  }

  return result;
}

uint64_t sub_10001A7C4(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10001A804()
{
  unint64_t result = qword_10008AD08;
  if (!qword_10008AD08)
  {
    uint64_t v1 = sub_10000E670(&qword_10008AD00);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, &qword_10008AD08);
  }

  return result;
}

uint64_t sub_10001A848(uint64_t *a1, uint64_t *a2)
{
  return sub_10001A49C(*a1, a1[1], *a2, a2[1]) & 1;
}

uint64_t sub_10001A870(uint64_t *a1)
{
  return sub_10001A848(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t sub_10001A88C()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10001A8BC()
{
  __int128 v5 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc(dword_10008AD14);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10001A92C;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = v5;
  return swift_task_switch(sub_100018FB0, 0LL, 0LL);
}

uint64_t sub_10001A930(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10001A94C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10001A968(uint64_t a1)
{
  return _s10RTCUtility9XPCObjectOwet_0(a1, 1LL, v1);
}

uint64_t sub_10001A974()
{
  return swift_task_switch();
}

uint64_t sub_10001A97C(uint64_t a1)
{
  *(void *)(v2 - 8) = *v1;
  return swift_task_dealloc(a1);
}

uint64_t sub_10001A98C(uint64_t a1)
{
  return swift_release_n(a1, 2LL);
}

uint64_t sub_10001A994()
{
  return *(void *)(v0 + 336);
}

uint64_t sub_10001A9B0()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001A9B8()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001A9C0()
{
  return swift_task_switch();
}

uint64_t sub_10001A9CC(char a1)
{
  return sub_100050800(a1);
}

unsigned __int8 *sub_10001A9E8@<X0>(uint64_t a1@<X8>)
{
  return RTCXPCDictionary.subscript.getter(v2, v3, v1, a1);
}

uint64_t sub_10001A9F8(uint64_t a1)
{
  return swift_arrayDestroy(a1, 2LL);
}

void sub_10001AA00(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

uint64_t sub_10001AA24()
{
  return swift_retain(v0);
}

BOOL sub_10001AA2C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

BOOL sub_10001AA3C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10001AA4C(uint64_t a1)
{
  return swift_getEnumCaseMultiPayload(a1, v1);
}

void sub_10001AA54(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_10001AA68(uint64_t a1)
{
  return swift_arrayDestroy(a1, 1LL);
}

void sub_10001AA70(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_10001AA78(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3LL);
}

uint64_t sub_10001AA80(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_10001AA88()
{
  return swift_task_dealloc(*(void *)(v0 + 336));
}

  ;
}

uint64_t sub_10001AAC4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, &a10, v10);
}

uint64_t sub_10001AAE0(uint64_t a1)
{
  return swift_retain_n(a1, 2LL);
}

uint64_t sub_10001AAE8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100019964(a1, v3, a3);
}

uint64_t sub_10001AAF0()
{
  return swift_task_dealloc(v0);
}

BOOL sub_10001AAF8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10001AB08()
{
  return swift_task_dealloc(v0);
}

BOOL sub_10001AB10(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10001AB20()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_10001AB28()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10001AB30()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_10001AB38()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10001AB40(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10001AB60()
{
  return swift_task_dealloc(v0);
}

xpc_object_t sub_10001AB68()
{
  return xpc_dictionary_create_reply(*(xpc_object_t *)(v0 + 240));
}

uint64_t sub_10001AB70()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_10001AB78()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_10001AB80()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_10001AB88()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10001AB90()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10001AB98()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10001ABA0()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001ABA8()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10001ABB0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10001ABBC(uint64_t a1)
{
  return _s10RTCUtility9XPCObjectOwst_0(v1, 1LL, 1LL, a1);
}

uint64_t sub_10001ABD0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v4[5] = a2;
  v4[6] = v3;
  v4[7] = *(void *)(*(void *)(result + 56) + 8 * v2);
  return result;
}

void sub_10001ABEC(_xpc_connection_s *a1)
{
}

uint64_t sub_10001ABF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0LL);
}

uint64_t sub_10001ABFC()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001AC04(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100019964(a1, v3, a3);
}

  ;
}

uint64_t sub_10001AC18(_BYTE *a1, uint64_t a2)
{
  return sub_100015F54(a1, v2, a2, (uint64_t *)(v3 - 104));
}

BOOL sub_10001AC28(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10001AC38()
{
  return Logger.logObject.getter();
}

uint64_t sub_10001AC40( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100019964(v10, v9, &a9);
}

void sub_10001AC50()
{
  *(void *)(v1 - 8) = *v0;
}

  ;
}

uint64_t sub_10001AC6C()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10001AC74()
{
  return type metadata accessor for TaskPriority(0LL);
}

uint64_t sub_10001AC7C()
{
  return swift_release(v0);
}

uint64_t sub_10001AC84()
{
  return swift_bridgeObjectRetain(v0);
}

void sub_10001AC8C()
{
  *(_WORD *)(v0 + 12) = 2082;
}

  ;
}

void sub_10001ACB8()
{
  v0._uint64_t countAndFlagsBits = 58LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

uint64_t sub_10001ACC8()
{
  return Logger.logObject.getter();
}

uint64_t sub_10001ACD0@<X0>(uint64_t a1@<X8>)
{
  return swift_task_dealloc(a1);
}

uint64_t sub_10001ACD8()
{
  return sub_10005B7FC(v0);
}

uint64_t sub_10001ACE4()
{
  return Logger.logObject.getter();
}

  ;
}

uint64_t sub_10001AD00()
{
  return static os_log_type_t.info.getter();
}

uint64_t sub_10001AD08()
{
  return swift_unknownObjectRelease(*(void *)(v0 + 16));
}

uint64_t sub_10001AD10(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100019964(a1, v3, a3);
}

uint64_t sub_10001AD18()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 72));
}

uint64_t sub_10001AD20()
{
  return type metadata accessor for XPCObject(0LL);
}

uint64_t sub_10001AD28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3);
}

uint64_t sub_10001AD30(uint64_t a1)
{
  return _s10RTCUtility9XPCObjectOwet_0(a1, 1LL, v1);
}

uint64_t sub_10001AD3C()
{
  return swift_endAccess(v0);
}

uint64_t sub_10001AD44@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return 0LL;
}

uint64_t sub_10001AD58()
{
  return Logger.logObject.getter();
}

uint64_t sub_10001AD60()
{
  return sub_10001A1A4(v0);
}

uint64_t sub_10001AD68(uint64_t a1, uint64_t *a2)
{
  return sub_10001A294(v2, a2);
}

uint64_t sub_10001AD70(uint64_t a1)
{
  return Identifiable<>.id.getter(v1, a1);
}

uint64_t sub_10001AD7C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  uint64_t v7 = a3[4];
  uint64_t v8 = a3[5];
  if (v7 == a1 && v8 == a2) {
    return 1LL;
  }
  uint64_t result = sub_100010008(v7, v8, a1, a2);
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  unint64_t v11 = a3 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v13 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    uint64_t v14 = *(v11 - 1);
    uint64_t v15 = *v11;
    BOOL v16 = v14 == a1 && v15 == a2;
    if (v16 || (sub_100010008(v14, v15, a1, a2) & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v11 += 2;
    if (v13 == v3) {
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10001AE38(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10008A080 != -1) {
    swift_once(&qword_10008A080, sub_10004D6A0);
  }
  if (byte_1000933D8 == 1)
  {
    if (qword_10008A088 != -1) {
      swift_once(&qword_10008A088, sub_10004D6C4);
    }
    id v8 = (id)qword_1000933E0;
    NSString v9 = String._bridgeToObjectiveC()();
    id v10 = [v8 stringArrayForKey:v9];

    if (v10)
    {
      uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, &type metadata for String);

      int64_t v12 = *(void *)(v11 + 16);
      if (v12)
      {
        unint64_t v92 = a2;
        uint64_t v93 = v4;
        uint64_t v91 = a1;
        uint64_t v95 = _swiftEmptyArrayStorage;
        sub_100057ED8(0LL, v12, 0);
        uint64_t v13 = v95;
        uint64_t v14 = v11 + 40;
        do
        {
          Swift::String v15 = String.lowercased()();
          uint64_t v95 = v13;
          unint64_t v17 = v13[2];
          unint64_t v16 = v13[3];
          if (v17 >= v16 >> 1)
          {
            sub_100057ED8((char *)(v16 > 1), v17 + 1, 1);
            uint64_t v13 = v95;
          }

          v14 += 16LL;
          v13[2] = v17 + 1;
          *(Swift::String *)&v13[2 * v17 + 4] = v15;
          --v12;
        }

        while (v12);
        sub_100006CAC();
        a1 = v91;
        a2 = v92;
        uint64_t v4 = v93;
      }

      else
      {
        sub_100006CAC();
        uint64_t v13 = _swiftEmptyArrayStorage;
      }

      Swift::String v18 = String.lowercased()();
      char v19 = sub_10001AD7C(v18._countAndFlagsBits, (uint64_t)v18._object, v13);
      swift_bridgeObjectRelease(v13);
      uint64_t v20 = sub_100006CAC();
      if ((v19 & 1) == 0)
      {
        Logger.init()(v20);
        uint64_t v25 = swift_bridgeObjectRetain_n(a2, 2LL);
        uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
        os_log_type_t v27 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = (uint8_t *)sub_1000100B0(12LL);
          uint64_t v29 = (void *)swift_slowAlloc(32LL, -1LL);
          uint64_t v93 = v4;
          uint64_t v30 = a1;
          uint64_t v31 = (uint64_t)v29;
          uint64_t v95 = v29;
          *(_DWORD *)uint64_t v28 = 136446210;
          swift_bridgeObjectRetain(a2);
          uint64_t v94 = sub_100019964(v30, a2, (uint64_t *)&v95);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v28 + 4);
          swift_bridgeObjectRelease_n(a2, 3LL);
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "client %{public}s blocked by defaults", v28, 0xCu);
          swift_arrayDestroy(v31, 1LL);
          sub_100010010(v31);
          sub_100010010((uint64_t)v28);

          (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v93);
        }

        else
        {

          swift_bridgeObjectRelease_n(a2, 2LL);
          (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        }

        return 0LL;
      }
    }
  }

  uint64_t v21 = 0x74696B656D6167LL;
  BOOL v22 = a1 == 19271 && a2 == 0xE200000000000000LL;
  if (v22 || (sub_100010008(19271LL, 0xE200000000000000LL, a1, a2) & 1) != 0) {
    return v21;
  }
  BOOL v24 = a1 == 19779 && a2 == 0xE200000000000000LL;
  if (v24 || (sub_100010008(19779LL, 0xE200000000000000LL, a1, a2) & 1) != 0)
  {
LABEL_26:
    sub_10001CBF0();
    return v21;
  }

  BOOL v32 = a1 == 17238 && a2 == 0xE200000000000000LL;
  if (v32 || (sub_100010008(17238LL, 0xE200000000000000LL, a1, a2) & 1) != 0) {
    goto LABEL_36;
  }
  uint64_t v21 = 0x7674656C707061LL;
  BOOL v33 = a1 == 22100 && a2 == 0xE200000000000000LL;
  if (v33 || (sub_100010008(22100LL, 0xE200000000000000LL, a1, a2) & 1) != 0) {
    return v21;
  }
  uint64_t v21 = 0x617273656E757469LL;
  BOOL v34 = a1 == 21065 && a2 == 0xE200000000000000LL;
  if (v34 || (sub_100010008(21065LL, 0xE200000000000000LL, a1, a2) & 1) != 0) {
    return v21;
  }
  uint64_t v21 = 0x6974736567677573LL;
  BOOL v35 = a1 == 18259 && a2 == 0xE200000000000000LL;
  if (v35 || (sub_100010008(18259LL, 0xE200000000000000LL, a1, a2) & 1) != 0) {
    return v21;
  }
  if (a1 == 21580 && a2 == 0xE200000000000000LL) {
    goto LABEL_36;
  }
  uint64_t v21 = a2;
  if ((sub_10001CBAC(21580LL, 0xE200000000000000LL) & 1) != 0) {
    goto LABEL_36;
  }
  uint64_t v21 = 0x796C616E6178736FLL;
  BOOL v37 = a1 == 1096307535 && a2 == 0xE400000000000000LL;
  if (v37 || (sub_10001CBAC(1096307535LL, 0xE400000000000000LL) & 1) != 0) {
    return v21;
  }
  BOOL v38 = a1 == 0x4D41434B48LL && a2 == 0xE500000000000000LL;
  if (v38 || (sub_10001CBAC(0x4D41434B48LL, 0xE500000000000000LL) & 1) != 0) {
    goto LABEL_36;
  }
  BOOL v39 = a1 == 0x534C482D4D43LL && a2 == 0xE600000000000000LL;
  if (v39 || (sub_10001CBAC(0x534C482D4D43LL, 0xE600000000000000LL) & 1) != 0) {
    goto LABEL_26;
  }
  BOOL v40 = a1 == 0x53424152432D4D43LL && a2 == 0xE800000000000000LL;
  if (v40 || (sub_10001CBAC(0x53424152432D4D43LL, 0xE800000000000000LL) & 1) != 0) {
    return 0x6964656D65726F63LL;
  }
  uint64_t v21 = 1835364208LL;
  BOOL v41 = a1 == 0x53425550564544LL && a2 == 0xE700000000000000LL;
  if (v41 || (sub_10001CBAC(0x53425550564544LL, 0xE700000000000000LL) & 1) != 0) {
    return v21;
  }
  uint64_t v21 = 0x7061736F65646976LL;
  BOOL v42 = a1 == 0x534F45444956LL && a2 == 0xE600000000000000LL;
  if (v42 || (sub_10001CBAC(0x534F45444956LL, 0xE600000000000000LL) & 1) != 0) {
    return v21;
  }
  uint64_t v21 = 0x7361656C69626F6DLL;
  BOOL v43 = a1 == 0x54455353414C424DLL && a2 == 0xE800000000000000LL;
  if (v43 || (sub_10001CBAC(0x54455353414C424DLL, 0xE800000000000000LL) & 1) != 0) {
    return v21;
  }
  uint64_t v21 = 0x6964756165726F63LL;
  BOOL v44 = a1 == 16707 && a2 == 0xE200000000000000LL;
  if (v44 || (sub_10001CBAC(16707LL, 0xE200000000000000LL) & 1) != 0) {
    return v21;
  }
  if (a1 == 4282189 && a2 == 0xE300000000000000LL)
  {
LABEL_36:
    sub_10001CBD0();
    return v21;
  }

  sub_10001CBAC(4282189LL, 0xE300000000000000LL);
  sub_10001CBD0();
  if ((v46 & 1) == 0)
  {
    uint64_t v21 = 0x617261686173LL;
    BOOL v47 = a1 == 16979 && a2 == 0xE200000000000000LL;
    if (!v47 && (sub_10001CBAC(16979LL, 0xE200000000000000LL) & 1) == 0)
    {
      uint64_t v21 = 0x76697463616F7270LL;
      BOOL v48 = a1 == 20545 && a2 == 0xE200000000000000LL;
      if (!v48 && (sub_10001CBAC(20545LL, 0xE200000000000000LL) & 1) == 0)
      {
        uint64_t v21 = 0x7574696B616CLL;
        BOOL v49 = a1 == 19282 && a2 == 0xE200000000000000LL;
        if (!v49 && (sub_10001CBAC(19282LL, 0xE200000000000000LL) & 1) == 0)
        {
          uint64_t v21 = 0x73676E6977LL;
          BOOL v50 = a1 == 1280332353 && a2 == 0xE400000000000000LL;
          if (!v50 && (sub_10001CBAC(1280332353LL, 0xE400000000000000LL) & 1) == 0)
          {
            uint64_t v21 = 0x796F6C6C61LL;
            BOOL v51 = a1 == 5456969 && a2 == 0xE300000000000000LL;
            if (!v51 && (sub_10001CBAC(5456969LL, 0xE300000000000000LL) & 1) == 0)
            {
              uint64_t v21 = 0x656761726F7473LL;
              BOOL v52 = a1 == 1196577875 && a2 == 0xE400000000000000LL;
              if (!v52 && (sub_10001CBAC(1196577875LL, 0xE400000000000000LL) & 1) == 0)
              {
                BOOL v53 = a1 == 21844 && a2 == 0xE200000000000000LL;
                if (v53 || (sub_10001CBAC(21844LL, 0xE200000000000000LL) & 1) != 0) {
                  return 30068LL;
                }
                uint64_t v21 = 0x74656C706F7264LL;
                BOOL v54 = a1 == 22350 && a2 == 0xE200000000000000LL;
                if (!v54 && (sub_10001CBAC(22350LL, 0xE200000000000000LL) & 1) == 0)
                {
                  uint64_t v21 = 0x7473616365726F66LL;
                  BOOL v55 = a1 == 18755 && a2 == 0xE200000000000000LL;
                  if (!v55 && (sub_10001CBAC(18755LL, 0xE200000000000000LL) & 1) == 0)
                  {
                    uint64_t v21 = 1952542820LL;
                    BOOL v56 = a1 == 1413566532 && a2 == 0xE400000000000000LL;
                    if (!v56 && (sub_10001CBAC(1413566532LL, 0xE400000000000000LL) & 1) == 0)
                    {
                      BOOL v57 = a1 == 5524567 && a2 == 0xE300000000000000LL;
                      if (v57 || (sub_10001CBAC(5524567LL, 0xE300000000000000LL) & 1) != 0) {
                        goto LABEL_163;
                      }
                      uint64_t v21 = 0x697463656C666572LL;
                      BOOL v58 = a1 == 21074 && a2 == 0xE200000000000000LL;
                      if (v58 || (sub_10001CBAC(21074LL, 0xE200000000000000LL) & 1) != 0) {
                        return v21;
                      }
                      uint64_t v21 = 0x6461737361626D61LL;
                      BOOL v59 = a1 == 5264215 && a2 == 0xE300000000000000LL;
                      if (v59 || (sub_10001CBAC(5264215LL, 0xE300000000000000LL) & 1) != 0) {
                        return v21;
                      }
                      uint64_t v21 = 0x6C6572656D6F68LL;
                      BOOL v60 = a1 == 1279611464 && a2 == 0xE400000000000000LL;
                      if (v60 || (sub_10001CBAC(1279611464LL, 0xE400000000000000LL) & 1) != 0) {
                        return v21;
                      }
                      uint64_t v21 = 0x7369737361637472LL;
                      BOOL v61 = a1 == 0x6C6F6F74637472LL && a2 == 0xE700000000000000LL;
                      if (v61 || (sub_10001CBAC(0x6C6F6F74637472LL, 0xE700000000000000LL) & 1) != 0) {
                        return v21;
                      }
                      if (a1 == 0x4C444F2D4D43LL && a2 == 0xE600000000000000LL) {
                        goto LABEL_26;
                      }
                      sub_10001CBAC(0x4C444F2D4D43LL, 0xE600000000000000LL);
                      sub_10001CBF0();
                      if ((v63 & 1) == 0)
                      {
                        BOOL v64 = a1 == 16708 && a2 == 0xE200000000000000LL;
                        if (v64 || (sub_10001CBAC(16708LL, 0xE200000000000000LL) & 1) != 0) {
                          return 24931LL;
                        }
                        uint64_t v21 = 0x7375626D696ELL;
                        BOOL v65 = a1 == 4473923 && a2 == 0xE300000000000000LL;
                        if (!v65 && (sub_10001CBAC(4473923LL, 0xE300000000000000LL) & 1) == 0)
                        {
                          uint64_t v21 = 7630698LL;
                          BOOL v66 = a1 == 5461070 && a2 == 0xE300000000000000LL;
                          if (!v66 && (sub_10001CBAC(5461070LL, 0xE300000000000000LL) & 1) == 0)
                          {
                            uint64_t v21 = 1869636978LL;
                            BOOL v67 = a1 == 5657156 && a2 == 0xE300000000000000LL;
                            if (!v67 && (sub_10001CBAC(5657156LL, 0xE300000000000000LL) & 1) == 0)
                            {
                              uint64_t v21 = 0x6365736172656961LL;
                              BOOL v68 = a1 == 4407892 && a2 == 0xE300000000000000LL;
                              if (!v68 && (sub_10001CBAC(4407892LL, 0xE300000000000000LL) & 1) == 0)
                              {
                                uint64_t v21 = 0x6B726F7769LL;
                                if (a1 != 5850443 || a2 != 0xE300000000000000LL)
                                {
                                  char v70 = sub_10001CBBC(5850443LL, 0xE300000000000000LL, a1);
                                  BOOL v71 = a1 == 5457744 && a2 == 0xE300000000000000LL;
                                  BOOL v72 = v71;
                                  if ((v70 & 1) == 0 && !v72)
                                  {
                                    char v73 = sub_10001CBBC(5457744LL, 0xE300000000000000LL, a1);
                                    BOOL v74 = a1 == 5390926 && a2 == 0xE300000000000000LL;
                                    BOOL v75 = v74;
                                    if ((v73 & 1) == 0
                                      && !v75
                                      && (sub_10001CBAC(5390926LL, 0xE300000000000000LL) & 1) == 0)
                                    {
                                      uint64_t v21 = 1952804451LL;
                                      BOOL v76 = a1 == 5723214 && a2 == 0xE300000000000000LL;
                                      if (!v76 && (sub_10001CBAC(5723214LL, 0xE300000000000000LL) & 1) == 0)
                                      {
                                        uint64_t v21 = 1819110755LL;
                                        BOOL v77 = a1 == 0x4C4D2D4D43LL && a2 == 0xE500000000000000LL;
                                        if (!v77 && (sub_10001CBAC(0x4C4D2D4D43LL, 0xE500000000000000LL) & 1) == 0)
                                        {
                                          uint64_t v21 = 1802661751LL;
                                          BOOL v78 = a1 == 1263685463 && a2 == 0xE400000000000000LL;
                                          if (!v78 && (sub_10001CBAC(1263685463LL, 0xE400000000000000LL) & 1) == 0)
                                          {
                                            uint64_t v21 = 1700949871LL;
                                            BOOL v79 = a1 == 1161973583 && a2 == 0xE400000000000000LL;
                                            if (!v79 && (sub_10001CBAC(1161973583LL, 0xE400000000000000LL) & 1) == 0)
                                            {
                                              uint64_t v21 = 7368547LL;
                                              BOOL v80 = a1 == 5263171 && a2 == 0xE300000000000000LL;
                                              if (!v80 && (sub_10001CBAC(5263171LL, 0xE300000000000000LL) & 1) == 0)
                                              {
                                                BOOL v81 = a1 == 21062 && a2 == 0xE200000000000000LL;
                                                if (v81 || (sub_10001CBAC(21062LL, 0xE200000000000000LL) & 1) != 0) {
                                                  return 29286LL;
                                                }
                                                uint64_t v21 = 7037805LL;
                                                BOOL v82 = a1 == 4932429 && a2 == 0xE300000000000000LL;
                                                if (!v82 && (sub_10001CBAC(4932429LL, 0xE300000000000000LL) & 1) == 0)
                                                {
                                                  uint64_t v21 = 7499873LL;
                                                  BOOL v83 = a1 == 5394497 && a2 == 0xE300000000000000LL;
                                                  if (!v83 && (sub_10001CBAC(5394497LL, 0xE300000000000000LL) & 1) == 0)
                                                  {
                                                    uint64_t v21 = 1718644067LL;
                                                    BOOL v84 = a1 == 0x46502D4D43LL && a2 == 0xE500000000000000LL;
                                                    if (!v84
                                                      && (sub_10001CBAC(0x46502D4D43LL, 0xE500000000000000LL) & 1) == 0)
                                                    {
                                                      uint64_t v21 = 1885564259LL;
                                                      BOOL v85 = a1 == 0x5041432D4D43LL && a2 == 0xE600000000000000LL;
                                                      if (!v85
                                                        && (sub_10001CBAC(0x5041432D4D43LL, 0xE600000000000000LL) & 1) == 0)
                                                      {
                                                        if (a1 == 0x322D544C57LL && a2 == 0xE500000000000000LL)
                                                        {
LABEL_163:
                                                          sub_10001CC20();
                                                          return v21;
                                                        }

                                                        sub_10001CBAC(0x322D544C57LL, 0xE500000000000000LL);
                                                        sub_10001CC20();
                                                        if ((v87 & 1) != 0) {
                                                          return v21;
                                                        }
                                                        uint64_t v21 = 0x65736E61707865LL;
                                                        BOOL v88 = a1 == 1280329811 && a2 == 0xE400000000000000LL;
                                                        if (v88
                                                          || (sub_10001CBAC(1280329811LL, 0xE400000000000000LL) & 1) != 0)
                                                        {
                                                          return v21;
                                                        }

                                                        BOOL v89 = a1 == 5522771 && a2 == 0xE300000000000000LL;
                                                        if (v89
                                                          || (sub_10001CBAC(5522771LL, 0xE300000000000000LL) & 1) != 0)
                                                        {
                                                          return 1701863795LL;
                                                        }

                                                        return 0LL;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return v21;
}

uint64_t sub_10001BDBC()
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v0;
  return sub_10001CBC8((uint64_t)sub_10001BDD0, v0);
}

uint64_t sub_10001BDD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = sub_10001A7C4( &qword_10008AE10,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for StorebagCoordinator,  (uint64_t)&unk_10006A210);
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v2 + 24) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10001BE84;
  return withCheckedContinuation<A>(isolation:function:_:)( v2 + 32,  v3,  v4,  0xD000000000000013LL,  0x800000010006DDD0LL,  sub_10001CAA0,  *(void *)(v2 + 16),  &unk_100085650);
}

uint64_t sub_10001BE84()
{
  return sub_10001A9C0();
}

uint64_t sub_10001BEC4()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_10001BED0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v25 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v23 = *(void *)(v7 - 8);
  uint64_t v24 = v7;
  __chkstk_darwin(v7);
  NSString v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10000534C(&qword_10008AE18);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  v22[1] = *(void *)(a2 + 120);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v10);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 24) & ~v13;
  uint64_t v15 = swift_allocObject(&unk_100083558, v14 + v12, v13 | 7);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))( v15 + v14,  (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v10);
  aBlock[4] = sub_10001CB20;
  uint64_t v28 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100012FB4;
  aBlock[3] = &unk_100083570;
  unint64_t v16 = _Block_copy(aBlock);
  uint64_t v17 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v17);
  uint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_10001A7C4( &qword_10008AB00,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v19 = sub_10000534C(&qword_10008AB08);
  uint64_t v20 = sub_10001CB6C((unint64_t *)&unk_10008AB10, &qword_10008AB08);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v19, v20, v4, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v6, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v24);
  return swift_release(v28);
}

uint64_t sub_10001C134()
{
  uint64_t v0 = type metadata accessor for NWPath.Status(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = &v25[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v2);
  uint64_t v6 = &v25[-v5];
  uint64_t v7 = type metadata accessor for NWPath(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = &v25[-v13];
  uint64_t v15 = NWPathMonitor.currentPath.getter(v12);
  NWPath.status.getter(v15);
  (*(void (**)(_BYTE *, void, uint64_t))(v1 + 104))(v4, enum case for NWPath.Status.unsatisfied(_:), v0);
  char v16 = static NWPath.Status.== infix(_:_:)(v6, v4);
  uint64_t v17 = *(void (**)(_BYTE *, uint64_t))(v1 + 8);
  v17(v4, v0);
  v17(v6, v0);
  uint64_t v18 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v11, v14, v7);
  if ((v16 & 1) != 0)
  {
    uint64_t v19 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
    v19(v11, v7);
LABEL_4:
    char v26 = 0;
    uint64_t v22 = sub_10000534C(&qword_10008AE18);
    uint64_t v23 = &v26;
    goto LABEL_5;
  }

  char v20 = NWPath.isConstrained.getter(v18);
  uint64_t v19 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  uint64_t v21 = ((uint64_t (*)(_BYTE *, uint64_t))v19)(v11, v7);
  if ((v20 & 1) != 0) {
    goto LABEL_4;
  }
  if ((NWPath.isExpensive.getter(v21) & 1) != 0)
  {
    char v27 = 1;
    uint64_t v22 = sub_10000534C(&qword_10008AE18);
    uint64_t v23 = &v27;
  }

  else
  {
    char v28 = 2;
    uint64_t v22 = sub_10000534C(&qword_10008AE18);
    uint64_t v23 = &v28;
  }

LABEL_5:
  CheckedContinuation.resume(returning:)(v23, v22);
  return ((uint64_t (*)(_BYTE *, uint64_t))v19)(v14, v7);
}

  v10[4] = v17;
  if ((v18 & 1) != 0) {
    uint64_t v21 = *(void *)(*(void *)(*v5 + 56) + 8 * v17);
  }
  else {
    uint64_t v21 = 0LL;
  }
  *uint64_t v10 = v21;
  return sub_100026584;
}

uint64_t sub_10001C348(uint64_t a1, uint64_t a2)
{
  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  return sub_10001CBC8((uint64_t)sub_10001C360, v2);
}

uint64_t sub_10001C360()
{
  uint64_t v1 = *(void **)(v0 + 144);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_100005F30(v1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  unint64_t v6 = v5;
  uint64_t v7 = sub_10001AE38(v4, v5);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease(v6);
  *(void *)(v0 + 160) = v9;
  if (v9)
  {
    uint64_t v10 = (void *)swift_task_alloc(dword_10008C91C);
    *(void *)(v0 + 168) = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_10001C450;
    return sub_100060B28(v0 + 64, v7, v9);
  }

  else
  {
    uint64_t v12 = *(void *)(v0 + 136);
    *(void *)uint64_t v12 = _swiftEmptyArrayStorage;
    *(void *)(v12 + 8) = _swiftEmptyArrayStorage;
    *(_BYTE *)(v12 + swift_weakDestroy(v0 + 16) = 0;
    *(void *)(v12 + 24) = 1701736302LL;
    *(void *)(v12 + 32) = 0xE400000000000000LL;
    *(_BYTE *)(v12 + 40) = 2;
    return sub_10001CC0C(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_10001C450()
{
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 160);
  uint64_t v3 = *(void *)(*v1 + 168);
  uint64_t v5 = *v1;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v0) {
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  else {
    return swift_task_switch(sub_10001C4CC, *(void *)(v2 + 152), 0LL);
  }
}

uint64_t sub_10001C4CC()
{
  *(void *)(v0 + 120) = *(void *)(v0 + 64);
  sub_10000ECEC((void *)(v0 + 120));
  *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 80);
  sub_1000082EC(v0 + 104);
  *(void *)(v0 + 128) = *(void *)(v0 + 96);
  sub_10000ECEC((void *)(v0 + 128));
  char v1 = *(_BYTE *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  char v4 = *(_BYTE *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 136);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)(v0 + 16);
  *(_BYTE *)(v5 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)(v5 + 24) = v2;
  *(void *)(v5 + 32) = v3;
  *(_BYTE *)(v5 + 40) = v1;
  return sub_10001CC0C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10001C55C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_10001CBC8((uint64_t)sub_10001C574, v2);
}

uint64_t sub_10001C574()
{
  uint64_t v1 = sub_10001AE38(*(void *)(v0 + 16), *(void *)(v0 + 24));
  *(void *)(v0 + 40) = v2;
  if (!v2) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  uint64_t v3 = *(void *)(v0 + 32);
  *(void *)(v0 + 48) = v1;
  *(void *)(v0 + 56) = *(void *)(v3 + 128);
  return sub_10001A9C0();
}

uint64_t sub_10001C5D0()
{
  uint64_t v1 = *(void *)(v0 + 40);
  sub_100062DA8();
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001C610()
{
  uint64_t v2 = v1;
  v1[3] = v0;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for StorebagCache.Location(0LL);
  uint64_t v25 = sub_100008360(*(void *)(v4 - 8));
  v2[4] = v25;
  uint64_t v5 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v23 = *(void *)(v5 - 8);
  uint64_t v24 = v5;
  uint64_t v6 = sub_100008360(v23);
  v2[5] = v6;
  uint64_t v22 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v20 = *(void *)(v22 - 8);
  uint64_t v19 = sub_100008360(v20);
  v2[6] = v19;
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  uint64_t v8 = sub_100008360(*(void *)(v7 - 8));
  v2[7] = v8;
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = sub_100008360(*(void *)(v9 - 8));
  v2[8] = v10;
  swift_defaultActor_initialize(v3);
  sub_10001A788();
  static DispatchQoS.background.getter();
  v2[2] = _swiftEmptyArrayStorage;
  uint64_t v11 = sub_10001A7C4( (unint64_t *)&qword_10008ACF8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v12 = sub_10000534C(&qword_10008AD00);
  uint64_t v13 = sub_10001CB6C(&qword_10008AD08, &qword_10008AD00);
  dispatch thunk of SetAlgebra.init<A>(_:)(v2 + 2, v12, v13, v7, v11);
  (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))( v19,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v22);
  (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))( v6,  enum case for DispatchQoS.QoSClass.background(_:),  v24);
  uint64_t v14 = static OS_dispatch_queue.global(qos:)(v6);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v6, v24);
  *(void *)(v21 + 120) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000022LL,  0x800000010006DDF0LL,  v10,  v8,  v19,  v14);
  uint64_t v15 = type metadata accessor for URL(0LL);
  _s10RTCUtility9XPCObjectOwst_0(v25, 1LL, 1LL, v15);
  uint64_t v16 = type metadata accessor for StorebagCache(0LL);
  sub_10001CC14(v16);
  uint64_t v17 = (void *)swift_task_alloc(dword_10008CB34);
  v2[9] = v17;
  *uint64_t v17 = v2;
  v17[1] = sub_10001C86C;
  return sub_100060570(v25);
}

uint64_t sub_10001C86C(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 24LL);
  sub_10001A97C(*(void *)(*(void *)v1 + 72LL));
  *(void *)(v3 + 128) = a1;
  uint64_t v4 = sub_10000534C(&qword_10008AE28);
  uint64_t v5 = type metadata accessor for NWInterface.InterfaceType(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 + 32) & ~v7;
  uint64_t v9 = swift_allocObject(v4, v8 + *(void *)(v6 + 72), v7 | 7);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_100069580;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))( v9 + v8,  enum case for NWInterface.InterfaceType.loopback(_:),  v5);
  uint64_t v10 = type metadata accessor for NWPathMonitor(0LL);
  sub_10001CC14(v10);
  *(void *)(v3 + 112) = NWPathMonitor.init(prohibitedInterfaceTypes:)(v9);
  return swift_task_switch(sub_10001C95C, v3, 0LL);
}

uint64_t sub_10001C95C()
{
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v7 = *(void *)(v5 + 112);
  uint64_t v8 = *(void **)(v5 + 120);
  swift_retain(v7);
  id v9 = v8;
  NWPathMonitor.start(queue:)();

  swift_release(v7);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 24));
}

uint64_t sub_10001C9F8()
{
  swift_release(*(void *)(v0 + 128));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10001CA2C()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for StorebagCoordinator()
{
  return objc_opt_self(&OBJC_CLASS____TtC13rtcreportingd19StorebagCoordinator);
}

uint64_t sub_10001CA64(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10001A7C4( &qword_10008AE10,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for StorebagCoordinator,  (uint64_t)&unk_10006A210);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10001CAA0(uint64_t a1)
{
  return sub_10001BED0(a1, v1);
}

uint64_t sub_10001CAA8()
{
  uint64_t v1 = sub_10000534C(&qword_10008AE18);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10001CB20()
{
  return sub_10001C134();
}

uint64_t sub_10001CB54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001CB64(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10001CB6C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_10000E670(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10001CBAC(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v2, v3, 0LL);
}

uint64_t sub_10001CBBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0LL);
}

uint64_t sub_10001CBC8(uint64_t a1, uint64_t a2)
{
  return swift_task_switch(a1, a2, 0LL);
}

  ;
}

  ;
}

uint64_t sub_10001CC0C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10001CC14(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

  ;
}

void *sub_10001CC34(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = a2;
  int64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    sub_100057F20(0LL, v5, 0);
    uint64_t v7 = _swiftEmptyArrayStorage;
    uint64_t v8 = (uint64_t *)(a1 + 48);
    while (1)
    {
      int64_t v24 = v5;
      id v9 = v7;
      uint64_t v10 = *(v8 - 2);
      uint64_t v11 = *(v8 - 1);
      uint64_t v12 = *v8;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v12);
      uint64_t v13 = v4;
      uint64_t v7 = v4;
      uint64_t v14 = sub_10001DA88(v10, v11, v12);
      if (v3) {
        break;
      }
      uint64_t v17 = v14;
      uint64_t v18 = v15;
      uint64_t v19 = v16;
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v11);
      uint64_t v7 = v9;
      unint64_t v21 = v9[2];
      unint64_t v20 = v9[3];
      if (v21 >= v20 >> 1)
      {
        sub_100057F20((char *)(v20 > 1), v21 + 1, 1);
        uint64_t v7 = v9;
      }

      v7[2] = v21 + 1;
      uint64_t v22 = &v7[3 * v21];
      v22[4] = v17;
      v22[5] = v18;
      v22[6] = v19;
      v8 += 3;
      uint64_t v3 = 0LL;
      int64_t v5 = v24 - 1;
      uint64_t v4 = v13;
      if (v24 == 1)
      {
        swift_release(v13);
        return v7;
      }
    }

    swift_release(v4);
    swift_release(v9);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v11);
  }

  else
  {
    swift_release(a2);
    return _swiftEmptyArrayStorage;
  }

  return v7;
}

uint64_t sub_10001CDC0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    unint64_t v5 = 0LL;
    uint64_t v6 = (_OWORD *)(result + 40);
    uint64_t v7 = _swiftEmptyArrayStorage;
    while (v5 < *(void *)(v3 + 16))
    {
      uint64_t v8 = *((void *)v6 - 1);
      __int128 v15 = *v6;
      uint64_t v16 = v8;
      __int128 v17 = v15;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(*((void *)&v15 + 1));
      char v9 = sub_10001F060(&v16, a2);
      if (v2)
      {
        swift_release(a2);
        swift_release(v7);
        swift_bridgeObjectRelease(v3);
        swift_bridgeObjectRelease(*((void *)&v15 + 1));
        uint64_t v13 = v15;
        goto LABEL_17;
      }

      if ((v9 & 1) != 0)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native(v7);
        uint64_t v18 = v7;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_100057F20(0LL, v7[2] + 1LL, 1);
          uint64_t v7 = v18;
        }

        unint64_t v11 = v7[2];
        unint64_t v10 = v7[3];
        if (v11 >= v10 >> 1)
        {
          uint64_t result = (uint64_t)sub_100057F20((char *)(v10 > 1), v11 + 1, 1);
          uint64_t v7 = v18;
        }

        v7[2] = v11 + 1;
        uint64_t v12 = &v7[3 * v11];
        v12[4] = v8;
        *(_OWORD *)(v12 + 5) = v15;
      }

      else
      {
        swift_bridgeObjectRelease(*((void *)&v15 + 1));
        uint64_t result = swift_bridgeObjectRelease(v15);
      }

      ++v5;
      uint64_t v6 = (_OWORD *)((char *)v6 + 24);
      if (v4 == v5) {
        goto LABEL_15;
      }
    }

    __break(1u);
  }

  else
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
LABEL_15:
    swift_release(a2);
    uint64_t v13 = v3;
LABEL_17:
    swift_bridgeObjectRelease(v13);
    return (uint64_t)v7;
  }

  return result;
}

id sub_10001CF64(uint64_t a1)
{
  uint64_t v2 = v1;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  unint64_t v5 = v4;
  id v14 = 0LL;
  id v6 = [(id)swift_getObjCClassFromMetadata(v2) fileHandleForWritingToURL:v4 error:&v14];

  id v7 = v14;
  if (v6)
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    char v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
    id v10 = v7;
    v9(a1, v8);
  }

  else
  {
    id v11 = v14;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow();
    uint64_t v12 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(a1, v12);
  }

  return v6;
}

uint64_t sub_10001D078(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to NSURLSession.data(for:delegate:)[1]);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10001D0CC;
  return NSURLSession.data(for:delegate:)(a1, 0LL);
}

uint64_t sub_10001D0CC(uint64_t a1, uint64_t a2, void *a3)
{
  if (!v3)
  {
    sub_10002093C();
  }

  return sub_10001CC0C(*(uint64_t (**)(void))(v4 + 8));
}

uint64_t sub_10001D114(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_10008B044);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100020734;
  return sub_10001D078(a1);
}

uint64_t sub_10001D164(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100006C8C();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v6);
  id v10 = &v23[-v9];
  strcpy((char *)v24, "/tmp/rtc_mock");
  HIWORD(v24[1]) = -4864;
  if ((a1 & 1) != 0) {
    uint64_t v11 = 0x6D69746C6165725FLL;
  }
  else {
    uint64_t v11 = 0LL;
  }
  if ((a1 & 1) != 0) {
    unint64_t v12 = 0xE900000000000065LL;
  }
  else {
    unint64_t v12 = 0xE000000000000000LL;
  }
  unint64_t v13 = v12;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease(v12);
  URL.init(fileURLWithPath:)(v24[0], v24[1]);
  sub_10000FFD8();
  Swift::Bool v14 = URL.checkResourceIsReachable()();
  if (v15)
  {
    swift_errorRelease(v15);
  }

  else if (v14)
  {
    goto LABEL_11;
  }

  id v16 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL.path.getter();
  NSString v17 = String._bridgeToObjectiveC()();
  sub_10000FFD8();
  [v16 createFileAtPath:v17 contents:0 attributes:0];

LABEL_11:
  sub_10001F740();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(v8, v10, v4);
  id v18 = sub_10001CF64((uint64_t)v8);
  NSFileHandle.seekToEnd()();
  if (v19)
  {
    uint64_t result = swift_unexpectedError(v19, "rtcreportingd/BackendHTTP.swift", 31LL, 1LL, 28LL);
    __break(1u);
  }

  else
  {
    uint64_t v20 = sub_10000534C(&qword_10008B018);
    uint64_t v21 = swift_allocObject(v20, 28LL, 7LL);
    *(_DWORD *)(v21 + 24) = 0;
    *(void *)(v21 + swift_weakDestroy(v0 + 16) = v18;
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
    *(void *)(v2 + swift_weakDestroy(v0 + 16) = v21;
    return v2;
  }

  return result;
}

uint64_t sub_10001D3A4(uint64_t a1)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch(sub_10001D3BC, 0LL, 0LL);
}

uint64_t sub_10001D3BC()
{
  uint64_t v1 = URLRequest.httpBody.getter();
  if (v2 >> 60 != 15)
  {
    uint64_t v3 = v1;
    unint64_t v4 = v2;
    uint64_t v5 = *(os_unfair_lock_s **)(*(void *)(v0 + 24) + 16LL);
    uint64_t v6 = swift_task_alloc(32LL);
    *(void *)(v6 + swift_weakDestroy(v0 + 16) = v3;
    *(void *)(v6 + 24) = v4;
    uint64_t v7 = (uint64_t)&v5[4];
    v5 += 6;
    os_unfair_lock_lock(v5);
    sub_10001D470(v7, *(void *)(v6 + 16), *(void *)(v6 + 24));
    os_unfair_lock_unlock(v5);
    uint64_t v8 = sub_100020AA0();
    sub_100004C30(v8, v9);
    sub_10001AB38();
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001D470(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for String.Encoding(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = a2;
  unint64_t v17 = a3;
  unint64_t v10 = sub_100013B78();
  uint64_t result = NSFileHandle.write<A>(contentsOf:)(&v16, &type metadata for Data, v10);
  if (!v3)
  {
    static String.Encoding.utf8.getter(v12);
    uint64_t v13 = String.data(using:allowLossyConversion:)(v9, 0LL, 10LL, 0xE100000000000000LL);
    unint64_t v15 = v14;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if (v15 >> 60 == 15)
    {
      __break(1u);
    }

    else
    {
      uint64_t v16 = v13;
      unint64_t v17 = v15;
      NSFileHandle.write<A>(contentsOf:)(&v16, &type metadata for Data, v10);
      return sub_100004C30(v13, v15);
    }
  }

  return result;
}

uint64_t sub_10001D594()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for MockHTTPSending()
{
  return objc_opt_self(&OBJC_CLASS____TtC13rtcreportingd15MockHTTPSending);
}

uint64_t sub_10001D5D8(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_10008B014);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100020734;
  return sub_10001D3A4(a1);
}

uint64_t sub_10001D628()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000D940(v0, qword_100093290);
  sub_10000D34C(v0, (uint64_t)qword_100093290);
  return Logger.init(subsystem:category:)( 0xD000000000000017LL,  0x800000010006D6D0LL,  0x2D646E656B636162LL,  0xEC00000070747468LL);
}

uint64_t sub_10001D6A4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x656D695474736F70LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D695474736F70LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6449746E65696C63LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v8 = 0xE800000000000000LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449746E65696C63LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x73746E657665LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 2LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73746E657665LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_10001D7F0()
{
  return 3LL;
}

uint64_t sub_10001D7F8(char a1)
{
  if (!a1) {
    return 0x656D695474736F70LL;
  }
  if (a1 == 1) {
    return 0x6449746E65696C63LL;
  }
  return 0x73746E657665LL;
}

uint64_t sub_10001D84C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v18 = a3;
  uint64_t v10 = sub_10000534C(&qword_10008B048);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  sub_100005F30(a1, v14);
  unint64_t v16 = sub_1000204C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for BackendHTTP.POSTData.CodingKeys,  &type metadata for BackendHTTP.POSTData.CodingKeys,  v16,  v14,  v15);
  char v22 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v22, v10, a5);
  if (!v5)
  {
    char v21 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a2, v18, &v21, v10);
    uint64_t v20 = a4;
    char v19 = 2;
    sub_10000534C(&qword_10008B058);
    sub_100020504();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_10001D9C8()
{
  return sub_10001D7F8(*v0);
}

uint64_t sub_10001D9D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10001D6A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10001D9F4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_10001D7F0();
  *a1 = result;
  return result;
}

uint64_t sub_10001DA18(uint64_t a1)
{
  unint64_t v2 = sub_1000204C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001DA40(uint64_t a1)
{
  unint64_t v2 = sub_1000204C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001DA68(void *a1)
{
  return sub_10001D84C(a1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24), *(double *)v1);
}

uint64_t sub_10001DA88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = a3;
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_filters);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = v5 + 32;
    swift_bridgeObjectRetain(a2);
    sub_1000100D8();
    swift_bridgeObjectRetain(v5);
    while (1)
    {
      sub_100005E8C(v7, (uint64_t)v11);
      uint64_t v8 = v12;
      uint64_t v9 = v13;
      sub_100005F30(v11, v12);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16))(&v14, v8, v9);
      if (v4) {
        break;
      }
      sub_100005F54(v11);
      v7 += 40LL;
      if (!--v6)
      {
        swift_bridgeObjectRelease(v5);
        return v14;
      }
    }

    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v16);
    sub_100005F54(v11);
  }

  else
  {
    uint64_t v7 = a1;
    swift_bridgeObjectRetain(a2);
    sub_1000100D8();
  }

  return v7;
}

uint64_t sub_10001DBA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_filters);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4) {
    return 0LL;
  }
  uint64_t v7 = v3 + 32;
  swift_bridgeObjectRetain(*(void *)(v2 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_filters));
  while (1)
  {
    sub_100005E8C(v7, (uint64_t)v11);
    uint64_t v8 = v12;
    uint64_t v9 = v13;
    sub_100005F30(v11, v12);
    sub_100005F54(v11);
    v7 += 40LL;
    if (!--v4)
    {
      sub_100006AF0();
      return 0LL;
    }
  }

  sub_100006AF0();
  sub_100005F54(v11);
  return 1LL;
}

uint64_t sub_10001DC74(uint64_t a1)
{
  v2[27] = a1;
  v2[28] = v1;
  v2[29] = *v1;
  uint64_t v3 = type metadata accessor for EventValue(0LL);
  v2[30] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[31] = v4;
  v2[32] = sub_100008360(v4);
  unint64_t v5 = (*(void *)(*(void *)(sub_10000534C(&qword_10008B028) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[33] = swift_task_alloc(v5);
  v2[34] = swift_task_alloc(v5);
  uint64_t v6 = sub_100006C8C();
  v2[35] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[36] = v7;
  v2[37] = sub_100008360(v7);
  uint64_t v8 = type metadata accessor for URLRequest(0LL);
  v2[38] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[39] = v9;
  v2[40] = sub_100008360(v9);
  uint64_t v10 = type metadata accessor for JSONEncoder.OutputFormatting(0LL);
  v2[41] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[42] = v11;
  v2[43] = sub_100008360(v11);
  return sub_100020908((uint64_t)sub_10001DD4C, (uint64_t)v1, 0LL);
}

uint64_t sub_10001DD4C()
{
  uint64_t v1 = sub_100020AA0();
  uint64_t v4 = sub_10001CC34(v1, v2);
  uint64_t v5 = *((void *)v0 + 28);
  sub_1000103E0();
  uint64_t v6 = sub_10001CDC0((uint64_t)v4, v5);
  if (!*(void *)(v6 + 16))
  {
    sub_100006AF0();
    sub_100020888();
    sub_10001AB88();
    sub_10001AB08();
    sub_10001AB28();
    sub_10001AB38();
    sub_10001AAF0();
    sub_100020850();
    __asm { BR              X0 }
  }

  if (qword_100089FE8 != -1) {
    swift_once(&qword_100089FE8, sub_10001D628);
  }
  uint64_t v7 = *((void *)v0 + 28);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  *((void *)v0 + 44) = sub_10000D34C(v8, (uint64_t)qword_100093290);
  swift_retain_n(v7, 2LL);
  swift_bridgeObjectRetain(v6);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v59 = *((void *)v0 + 35);
    uint64_t v12 = *((void *)v0 + 28);
    uint64_t v13 = sub_1000100B0(22LL);
    uint64_t v60 = sub_1000100B0(32LL);
    *(_DWORD *)uint64_t v13 = 134349314;
    v0[25] = *(double *)(v6 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 25, v0 + 26, v13 + 4);
    sub_100006AF0();
    *(_WORD *)(v13 + 12) = 2082;
    uint64_t v14 = sub_100020568( &qword_10008B020,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v59, v14);
    *((void *)v0 + 26) = sub_100020B08( v15,  v16,  v17,  v18,  v19,  v20,  v21,  v22,  v53,  v54,  v55,  (uint64_t)__dst,  (uint64_t)(v0 + 25));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 26, v0 + 27, v13 + 14);
    swift_release_n(v12, 2LL);
    sub_10000FFD8();
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "submitting %{public}ld events to %{public}s",  (uint8_t *)v13,  0x16u);
    swift_arrayDestroy(v60, 1LL);
    sub_100010010(v60);
    sub_100010010(v13);
  }

  else
  {
    uint64_t v23 = *((void *)v0 + 28);

    swift_release_n(v23, 2LL);
    sub_100006AF0();
  }

  int64_t v24 = v0 + 12;
  double v25 = sub_10001EFB8();
  if ((sub_10001DBA8(0x6449746E65696C63LL, 0xE800000000000000LL) & 1) != 0)
  {
    uint64_t v58 = 0LL;
    unint64_t v26 = 0xE000000000000000LL;
  }

  else
  {
    char v27 = (uint64_t *)(*((void *)v0 + 28) + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_clientID);
    unint64_t v26 = v27[1];
    uint64_t v58 = *v27;
    swift_bridgeObjectRetain(v26);
  }

  int64_t v28 = *(void *)(v6 + 16);
  if (v28)
  {
    unint64_t v57 = v26;
    sub_100057F3C(0, v28, 0);
    unint64_t v29 = _swiftEmptyArrayStorage[2];
    uint64_t v30 = 48LL;
    do
    {
      uint64_t v31 = *(void *)(v6 + v30);
      unint64_t v32 = _swiftEmptyArrayStorage[3];
      sub_1000100D8();
      if (v29 >= v32 >> 1) {
        sub_100057F3C(v32 > 1, v29 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v29 + 1;
      _swiftEmptyArrayStorage[v29 + 4] = v31;
      v30 += 24LL;
      ++v29;
      --v28;
    }

    while (v28);
    sub_100006AF0();
    unint64_t v26 = v57;
    int64_t v24 = v0 + 12;
  }

  else
  {
    sub_100006AF0();
  }

  uint64_t v33 = *((void *)v0 + 42);
  uint64_t v34 = *((void *)v0 + 43);
  uint64_t v35 = *((void *)v0 + 41);
  uint64_t v36 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  *((void *)v0 + 45) = JSONEncoder.init()();
  uint64_t v37 = sub_10000534C(&qword_10008AA70);
  uint64_t v38 = swift_allocObject( v37,  ((*(unsigned __int8 *)(v33 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))
        + *(void *)(v33 + 72),
          *(unsigned __int8 *)(v33 + 80) | 7LL);
  *(_OWORD *)(v38 + swift_weakDestroy(v0 + 16) = xmmword_100069580;
  static JSONEncoder.OutputFormatting.prettyPrinted.getter();
  *((void *)v0 + 23) = v38;
  uint64_t v39 = sub_100020568( &qword_10008AA78,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONEncoder.OutputFormatting,  (uint64_t)&protocol conformance descriptor for JSONEncoder.OutputFormatting);
  uint64_t v40 = sub_10000534C(&qword_10008AA80);
  unint64_t v41 = sub_10001FBD8();
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 23, v40, v41, v35, v39);
  dispatch thunk of JSONEncoder.outputFormatting.setter(v34);
  v0[12] = v25;
  *((void *)v0 + 13) = v58;
  *((void *)v0 + 14) = v26;
  *((void *)v0 + 15) = _swiftEmptyArrayStorage;
  unint64_t v42 = sub_10001FC1C();
  uint64_t v43 = dispatch thunk of JSONEncoder.encode<A>(_:)(v24, &type metadata for BackendHTTP.POSTData, v42);
  v0[46] = 0.0;
  *((void *)v0 + 47) = v43;
  *((void *)v0 + 48) = v44;
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  sub_100010278();
  if (qword_10008A090 != -1) {
    swift_once(&qword_10008A090, sub_10004D718);
  }
  if ((byte_1000933E8 & 1) != 0)
  {
    uint64_t v45 = *((void *)v0 + 48);
    sub_100020A58();
    sub_100020A04(v46);
    sub_1000208A0();
    __asm { BR              X10 }
  }

  uint64_t v47 = qword_1000933D0;
  *((void *)v0 + 49) = qword_1000933D0;
  if (!v47)
  {
    __break(1u);
    JUMPOUT(0x10001E810LL);
  }

  BOOL v48 = (double *)(*((void *)v0 + 28) + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_name);
  v0[50] = *v48;
  v0[51] = v48[1];
  swift_retain(v47);
  sub_100020850();
  return swift_task_switch(v49, v50, v51);
}

uint64_t sub_10001E820()
{
  uint64_t v1 = *(void *)(v0 + 368);
  sub_10001308C(*(void *)(v0 + 400), *(void **)(v0 + 408), *(void *)(v0 + 376), *(void *)(v0 + 384));
  *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = v1;
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 224);
    uint64_t v3 = sub_10001EEF4;
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 224);
    swift_release(*(void *)(v0 + 392));
    uint64_t v3 = sub_10001E890;
    uint64_t v2 = v4;
  }

  return swift_task_switch(v3, v2, 0LL);
}

void sub_10001E890()
{
  uint64_t v1 = *(void *)(v0 + 384);
  sub_100020A58();
  sub_100020A04(v2);
  sub_1000208A0();
  __asm { BR              X10 }

uint64_t sub_10001E914()
{
  uint64_t v6 = sub_100020814();
  sub_100020B1C(v6);
  sub_10001FE20(v0, v10, v11, v0, v1, (uint64_t)v48);
  sub_100020820();
  sub_10001AB38();
  if (v2)
  {
    sub_1000209DC();
    uint64_t v12 = sub_1000209DC();
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)sub_1000100B0(12LL);
      uint64_t v16 = sub_1000100B0(32LL);
      v48[0] = v16;
      *(_DWORD *)uint64_t v15 = 136446210;
      ((void (*)(uint64_t))swift_getErrorValue)(v5);
      uint64_t v17 = sub_100020AE8();
      *(void *)(v3 + 192) = sub_100019964(v17, v18, v48);
      ((void (*)(uint64_t, uint8_t *))UnsafeMutableRawBufferPointer.copyMemory(from:))(v3 + 200, v15 + 4);
      sub_10000FFD8();
      sub_100020738();
      sub_100020738();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "failed to compress payload: %{public}s", v15, 0xCu);
      sub_1000209E4();
      sub_100010010(v16);
      sub_100010010((uint64_t)v15);

      sub_100020738();
    }

    else
    {
      sub_100020738();
      sub_100020738();
      sub_100020738();
    }

    sub_100020A14();
    uint64_t v7 = 0xF000000000000000LL;
  }

  else
  {
    uint64_t v7 = v48[1];
    sub_100020B60();
    if (!v9 & v8)
    {
      sub_100020A14();
    }

    else
    {
      sub_100020AAC();
      sub_100020AA0();
    }
  }

  sub_100020A4C();
  sub_1000209F4();
  sub_100020B60();
  if (!(!v9 & v8)) {
    sub_1000207B4((uint64_t)"Content-Encoding");
  }
  sub_100020B78();
  uint64_t v46 = v19;
  uint64_t v20 = *(void *)(v3 + 224);
  sub_1000208F0(0xD000000000000010LL, 0x800000010006DF10LL);
  sub_1000207D4(0xD000000000000010LL, 0x800000010006DF10LL);
  *(void *)(v3 + 152) = sub_100020B98();
  uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  sub_100020740(v21, v22);
  sub_100006AF0();
  memcpy(v4, (const void *)(v20 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_extraHeaders), 0x50uLL);
  sub_10000724C();
  sub_100020AF4();
  uint64_t v44 = v23;
  sub_10002076C();
  uint64_t v45 = v24;
  uint64_t v42 = v24 - 1;
  uint64_t v43 = v25 + 104;
  while (1)
  {
    if (v5)
    {
      sub_100020A34();
LABEL_15:
      sub_100020A1C();
      *(void *)(v46 + 8) = v7;
      uint64_t v26 = sub_1000208B8();
      sub_10002096C(v26);
      sub_100020948();
      goto LABEL_25;
    }

    uint64_t v27 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
      __break(1u);
      JUMPOUT(0x10001EE30LL);
    }

    if (v27 < v45)
    {
      if (*(void *)(v44 + 8 * v27)) {
        goto LABEL_19;
      }
      if (v20 + 2 >= v45)
      {
        ++v20;
      }

      else
      {
        if (*(void *)(v44 + 8 * (v20 + 2))) {
          goto LABEL_19;
        }
        if (v20 + 3 >= v45)
        {
          v20 += 2LL;
        }

        else
        {
          if (*(void *)(v44 + 8 * (v20 + 3))) {
            goto LABEL_19;
          }
          if (v20 + 4 >= v45)
          {
            v20 += 3LL;
          }

          else
          {
            if (*(void *)(v44 + 8 * (v20 + 4)))
            {
LABEL_19:
              sub_100020980();
              goto LABEL_15;
            }

            while (v20 + 5 < v45)
            {
              if (*(void *)(v43 + 8 * v20++)) {
                goto LABEL_19;
              }
            }

            uint64_t v20 = v42;
          }
        }
      }
    }

    uint64_t v28 = sub_1000208B8();
    sub_100020AC4(v28);
LABEL_25:
    sub_100020A80();
    uint64_t v29 = sub_1000208B8();
    sub_100020B3C(v29);
    if (v9) {
      break;
    }
    sub_100020A6C();
    sub_100020914(v30);
    int v31 = sub_100020B8C();
    switch(v31)
    {
      case 0:
        uint64_t v34 = **(void **)(v3 + 256);
        goto LABEL_33;
      case 2:
        *(void *)(v3 + 160) = **(void **)(v3 + 256);
        unint64_t v32 = &type metadata for UInt64;
        uint64_t v33 = &protocol witness table for UInt64;
        goto LABEL_32;
      case 1:
        *(void *)(v3 + 168) = **(void **)(v3 + 256);
        unint64_t v32 = &type metadata for Int64;
        uint64_t v33 = &protocol witness table for Int64;
LABEL_32:
        uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter(v32, v33);
LABEL_33:
        sub_100020928(v34);
        sub_100006AF0();
        sub_100010278();
        break;
      default:
        uint64_t v35 = *(void *)(v3 + 256);
        sub_100006AF0();
        sub_10001FDE4(v35);
        break;
    }
  }

  sub_100020B6C();
  uint64_t v37 = sub_1000208C0(OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_target);
  uint64_t v47 = v38;
  uint64_t v39 = (void *)swift_task_alloc(v37);
  *(void *)(v3 + 440) = v39;
  uint64_t v40 = sub_1000209C0(v39, (uint64_t)sub_10001EE44);
  return v47(v40);
}

uint64_t sub_10001EE44()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 440);
  *(void *)(*v1 + 448) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10001EF64;
  }
  else {
    uint64_t v4 = sub_10001EEA0;
  }
  return sub_100020908((uint64_t)v4, *(void *)(v2 + 224), 0LL);
}

uint64_t sub_10001EEA0()
{
  return sub_10002079C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10001EEF4()
{
  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 360);
  swift_release(*(void *)(v0 + 392));
  sub_100020B14(v1);
  swift_release(v2);
  sub_100020870();
  sub_10001AB08();
  sub_10001AB28();
  sub_10001AB38();
  sub_10001AAF0();
  sub_10001ABA8();
  return sub_10001CC0C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10001EF64()
{
  return sub_10002079C(*(uint64_t (**)(void))(v0 + 8));
}

double sub_10001EFB8()
{
  uint64_t v0 = type metadata accessor for Date(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_10001DBA8(0x656D695474736F70LL, 0xE800000000000000LL);
  double result = 0.0;
  if ((v4 & 1) == 0)
  {
    static Date.now.getter(v4);
    getTimeIntervalSince1970(Date:)();
    uint64_t v7 = v6;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return (double)v7;
  }

  return result;
}

uint64_t sub_10001F060(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = sub_100030F84(*a1, a1[1], a1[2]);
  if ((v4 & 1) != 0) {
    return 1LL;
  }
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a2 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_allowedCategories);
  if (*(void *)(v6 + 16))
  {
    sub_100059AE8(v3, v6);
    if ((v7 & 1) == 0)
    {
      if (qword_100089FE8 != -1) {
        swift_once(&qword_100089FE8, sub_10001D628);
      }
      uint64_t v20 = type metadata accessor for Logger(0LL);
      sub_10000D34C(v20, (uint64_t)qword_100093290);
      uint64_t v21 = swift_retain_n(a2, 2LL);
      uint64_t v12 = (os_log_s *)Logger.logObject.getter(v21);
      os_log_type_t v13 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = swift_slowAlloc(22LL, -1LL);
        uint64_t v25 = swift_slowAlloc(32LL, -1LL);
        uint64_t v26 = v5;
        uint64_t v28 = v25;
        *(_DWORD *)uint64_t v14 = 134218242;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v14 + 4);
        *(_WORD *)(v14 + 12) = 2082;
        swift_retain(a2);
        uint64_t v22 = sub_10001F3DC();
        unint64_t v24 = v23;
        swift_release(a2);
        uint64_t v26 = sub_100019964(v22, v24, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v14 + 14);
        swift_release_n(a2, 2LL);
        swift_bridgeObjectRelease(v24);
        unint64_t v18 = "removing event with category %ld from submission to %{public}s due to allowlist";
        goto LABEL_15;
      }

uint64_t sub_10001F3DC()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_name);
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_name + 8);
  swift_bridgeObjectRetain(v2);
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._uint64_t countAndFlagsBits = 539828258LL;
  v4._object = (void *)0xE400000000000000LL;
  String.append(_:)(v4);
  uint64_t v5 = sub_100006C8C();
  uint64_t v6 = sub_100020568( &qword_10008B020,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v5, v6);
  String.append(_:)(v7);
  sub_100006AF0();
  v8._uint64_t countAndFlagsBits = 41LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  return 8744LL;
}

uint64_t sub_10001F4B8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_url;
  uint64_t v2 = sub_100006C8C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  sub_100005F54((void *)(v0 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_target));
  sub_100020B30(OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_clientID);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_extraHeaders + 32);
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_extraHeaders + 48);
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_extraHeaders + 72));
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  sub_100006AF0();
  sub_100020A8C(OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_filters);
  sub_100020B30(OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_name);
  sub_100020A8C(OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_allowedCategories);
  sub_100020A8C(OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_deniedCategories);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10001F590()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10001F5A8()
{
  return type metadata accessor for BackendHTTP(0LL);
}

uint64_t type metadata accessor for BackendHTTP(uint64_t a1)
{
  uint64_t result = qword_10008AF00;
  if (!qword_10008AF00) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BackendHTTP);
  }
  return result;
}

uint64_t sub_10001F5E8(uint64_t a1)
{
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(result - 8) + 64LL;
    v4[3] = &unk_10006A2F8;
    v4[4] = &unk_10006A310;
    v4[5] = &unk_10006A328;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[7] = &unk_10006A310;
    v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[10] = &unk_10006A340;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 11LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10001F6A8(uint64_t a1)
{
  unint64_t v3 = (void *)swift_task_alloc(dword_10008AF14);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_10001F6F4;
  return sub_10001DC74(a1);
}

uint64_t sub_10001F6F4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001F720()
{
  return sub_10001F3DC();
}

unint64_t sub_10001F740()
{
  unint64_t result = qword_10008AAD0;
  if (!qword_10008AAD0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSFileHandle);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10008AAD0);
  }

  return result;
}

uint64_t sub_10001F77C@<X0>( Bytef *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  os_log_type_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uLong v14 = a2 - (void)a1;
  if (a1) {
    uLong v15 = v14;
  }
  else {
    uLong v15 = 0LL;
  }
  memset(&strm.total_in, 0, 20);
  memset(&strm.total_out, 0, 52);
  strm.adler = 0LL;
  strm.reserved = 0LL;
  if ((v15 & 0x8000000000000000LL) != 0)
  {
    uint64_t v38 = "Negative value is not representable";
    uint64_t v39 = 35LL;
  }

  else
  {
    if (!HIDWORD(v15))
    {
      strm.avail_in = v15;
      if (a1)
      {
        strm.next_in = a1;
        int v16 = deflateInit2_(&strm, -1, 8, 31, 8, 0, "1.2.12", 112);
        if (v16)
        {
          int v17 = v16;
          unint64_t v18 = sub_10001FF10();
          uint64_t v19 = swift_allocError(&_s9ZLibErrorON, v18, 0LL, 0LL);
          int *v20 = v17;
          return swift_willThrow(v19, v20, v21, v22, v23, v24, v25, v26);
        }

        if ((deflateBound(&strm, v14) & 0x8000000000000000LL) != 0)
        {
          __break(1u);
        }

        else
        {
          uint64_t v41 = Data.init(count:)();
          unint64_t v42 = v28;
          sub_10001FF4C((uint64_t)&v41);
          if (v29 != 1)
          {
            int v33 = v29;
            uint64_t v34 = Logger.init()();
            uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
            os_log_type_t v36 = static os_log_type_t.fault.getter();
            if (os_log_type_enabled(v35, v36))
            {
              uint64_t v37 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
              *(_DWORD *)uint64_t v37 = 67240192;
              HIDWORD(v40) = v33;
              UnsafeMutableRawBufferPointer.copyMemory(from:)((char *)&v40 + 4, &v41, v37 + 4);
              _os_log_impl((void *)&_mh_execute_header, v35, v36, "zlib returned unexpected status %{public}d", v37, 8u);
              swift_slowDealloc(v37, -1LL, -1LL);
            }

            (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
            *(_OWORD *)a5 = xmmword_10006A250;
            sub_100004C44(v41, v42);
            return deflateEnd(&strm);
          }

          if ((strm.total_out & 0x8000000000000000LL) == 0)
          {
            Data._Representation.count.setter();
            uint64_t v30 = v41;
            unint64_t v31 = v42;
            uint64_t v32 = Data.count.getter(v41, v42);
            if (v32 >= Data.count.getter(a3, a4))
            {
              sub_100004C44(v30, v31);
              *(_OWORD *)a5 = xmmword_10006A250;
            }

            else
            {
              *(void *)a5 = v30;
              *(void *)(a5 + 8) = v31;
            }

            return deflateEnd(&strm);
          }
        }

        __break(1u);
      }

      __break(1u);
    }

    uint64_t v38 = "Not enough bits to represent the passed value";
    uint64_t v39 = 45LL;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v38,  v39,  2LL,  "Swift/Integers.swift",  20LL);
  __break(1u);
  return result;
}

uint64_t sub_10001FAD4@<X0>(z_streamp strm@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, _DWORD *a4@<X8>)
{
  if (a2) {
    uLong v5 = a3 - a2;
  }
  else {
    uLong v5 = 0LL;
  }
  if ((v5 & 0x8000000000000000LL) != 0) {
    goto LABEL_13;
  }
  uLong total_out = strm->total_out;
  BOOL v7 = v5 >= total_out;
  uLong v8 = v5 - total_out;
  if (v7)
  {
    if (HIDWORD(v8))
    {
      uint64_t v10 = "Not enough bits to represent the passed value";
      uint64_t v11 = 45LL;
      goto LABEL_15;
    }

    strm->avail_out = v8;
    if (!a2) {
      goto LABEL_12;
    }
    if ((total_out & 0x8000000000000000LL) == 0)
    {
      strm->next_out = (Bytef *)(a2 + total_out);
      uint64_t result = deflate(strm, 4);
      *a4 = result;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
LABEL_12:
  __break(1u);
LABEL_13:
  uint64_t v10 = "Negative value is not representable";
  uint64_t v11 = 35LL;
LABEL_15:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v10,  v11,  2LL,  "Swift/Integers.swift",  20LL);
  __break(1u);
  return result;
}

unint64_t sub_10001FBD8()
{
  unint64_t result = qword_10008AA88;
  if (!qword_10008AA88)
  {
    uint64_t v1 = sub_10000E670(&qword_10008AA80);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008AA88);
  }

  return result;
}

unint64_t sub_10001FC1C()
{
  unint64_t result = qword_10008B030;
  if (!qword_10008B030)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006A41C, &type metadata for BackendHTTP.POSTData);
    atomic_store(result, (unint64_t *)&qword_10008B030);
  }

  return result;
}

uint64_t sub_10001FC58@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = (Bytef *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v11 += a1 - result;
  }

  BOOL v12 = __OFSUB__(a2, a1);
  uint64_t v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v14 = __DataStorage._length.getter();
  if (v14 >= v13) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  int v16 = &v11[v15];
  if (v11) {
    uint64_t v17 = (uint64_t)v16;
  }
  else {
    uint64_t v17 = 0LL;
  }
  sub_10001F77C(v11, v17, a3, a4, a5);
  return sub_100004C44(a3, a4);
}

uint64_t sub_10001FD14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventValue(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001FD58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000534C(&qword_10008B028);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001FDA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventValue(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001FDE4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EventValue(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10001FE20@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9 = a1;
  __int16 v10 = a2;
  char v11 = BYTE2(a2);
  char v12 = BYTE3(a2);
  char v13 = BYTE4(a2);
  char v14 = BYTE5(a2);
  sub_10001F77C((Bytef *)&v9, (uint64_t)&v9 + a3, a4, a5, a6);
  return sub_100004C44(a4, a5);
}

unint64_t sub_10001FF10()
{
  unint64_t result = qword_10008B038;
  if (!qword_10008B038)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006A3DC, &_s9ZLibErrorON);
    atomic_store(result, &qword_10008B038);
  }

  return result;
}

void sub_10001FF4C(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_10001FFA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = v3;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  unsigned __int8 v8 = BYTE4(a1);
  unsigned __int8 v9 = BYTE5(a1);
  unsigned __int8 v10 = BYTE6(a1);
  uint64_t result = sub_10002027C((uint64_t)&v6, BYTE6(a1), v2);
  unint64_t v5 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  void *v1 = v6;
  v1[1] = v5;
  return result;
}

uint64_t sub_1000201DC(uint64_t a1, uint64_t a2, uint64_t a3, z_stream *a4)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v9 = result;
  uint64_t result = __DataStorage._offset.getter();
  uint64_t v10 = a1 - result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }

  BOOL v11 = __OFSUB__(a2, a1);
  uint64_t v12 = a2 - a1;
  if (v11)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v13 = __DataStorage._length.getter();
  if (v13 >= v12) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v13;
  }
  uint64_t result = sub_10001FAD4(a4, v9 + v10, v9 + v10 + v14, &v15);
  if (!v4) {
    return v15;
  }
  return result;
}

uint64_t sub_10002027C(uint64_t a1, uint64_t a2, z_stream *a3)
{
  uint64_t result = sub_10001FAD4(a3, a1, a1 + a2, &v5);
  if (!v3) {
    return v5;
  }
  return result;
}

_DWORD *_s9ZLibErrorOwCP(_DWORD *result, _DWORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t _s9ZLibErrorOwet(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _s9ZLibErrorOwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 4) = v3;
  return result;
}

ValueMetadata *_s9ZLibErrorOMa()
{
  return &_s9ZLibErrorON;
}

uint64_t destroy for BackendHTTP.POSTData(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

uint64_t initializeWithCopy for BackendHTTP.POSTData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for BackendHTTP.POSTData(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = a2[2];
  uint64_t v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for BackendHTTP.POSTData(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for BackendHTTP.POSTData(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  a1[1] = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(a1[2]);
  uint64_t v4 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for BackendHTTP.POSTData(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BackendHTTP.POSTData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + swift_weakDestroy(v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BackendHTTP.POSTData()
{
  return &type metadata for BackendHTTP.POSTData;
}

unint64_t sub_1000204C8()
{
  unint64_t result = qword_10008B050;
  if (!qword_10008B050)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006A508, &type metadata for BackendHTTP.POSTData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008B050);
  }

  return result;
}

unint64_t sub_100020504()
{
  unint64_t result = qword_10008B060;
  if (!qword_10008B060)
  {
    uint64_t v1 = sub_10000E670(&qword_10008B058);
    sub_100015444();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008B060);
  }

  return result;
}

uint64_t sub_100020568(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for BackendHTTP.POSTData.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000205F4 + 4 * byte_10006A275[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100020628 + 4 * byte_10006A270[v4]))();
}

uint64_t sub_100020628(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100020630(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100020638LL);
  }
  return result;
}

uint64_t sub_100020644(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10002064CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100020650(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100020658(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BackendHTTP.POSTData.CodingKeys()
{
  return &type metadata for BackendHTTP.POSTData.CodingKeys;
}

unint64_t sub_100020678()
{
  unint64_t result = qword_10008B068;
  if (!qword_10008B068)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006A4E0, &type metadata for BackendHTTP.POSTData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008B068);
  }

  return result;
}

unint64_t sub_1000206B8()
{
  unint64_t result = qword_10008B070;
  if (!qword_10008B070)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006A450, &type metadata for BackendHTTP.POSTData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008B070);
  }

  return result;
}

unint64_t sub_1000206F8()
{
  unint64_t result = qword_10008B078;
  if (!qword_10008B078)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006A478, &type metadata for BackendHTTP.POSTData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008B078);
  }

  return result;
}

uint64_t sub_100020738()
{
  return swift_errorRelease(v0);
}

void sub_100020740(uint64_t a1, uint64_t a2)
{
  v2._uint64_t countAndFlagsBits = 0x2D746E65746E6F43LL;
  v2._object = (void *)0xEE006874676E654CLL;
  URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)&a1, v2);
}

  ;
}

uint64_t sub_10002079C(uint64_t (*a1)(void))
{
  return a1();
}

void sub_1000207B4(uint64_t a1@<X8>)
{
  v1._object = (void *)((a1 - 32) | 0x8000000000000000LL);
  v2.value._uint64_t countAndFlagsBits = 1885960807LL;
  v2.value._object = (void *)0xE400000000000000LL;
  v1._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  URLRequest.setValue(_:forHTTPHeaderField:)(v2, v1);
}

void sub_1000207D4(uint64_t a1, uint64_t a2)
{
  v2._uint64_t countAndFlagsBits = 0x2D746E65746E6F43LL;
  v2._object = (void *)0xEC00000065707954LL;
  URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)&a1, v2);
}

uint64_t sub_1000207F4()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - 8) = *v0;
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v1 - 8) = *v0;
  return swift_task_dealloc(v3);
}

uint64_t sub_100020814()
{
  return swift_task_alloc(32LL);
}

uint64_t sub_100020820()
{
  return sub_100004C44(*(void *)(v0 + 376), *(void *)(v0 + 384));
}

uint64_t sub_10002082C()
{
  return sub_10000D8FC(v0, v1);
}

uint64_t sub_100020838()
{
  return swift_release(*(void *)(v0 + 360));
}

  ;
}

uint64_t sub_100020870()
{
  return swift_task_dealloc(*(void *)(v0 + 344));
}

uint64_t sub_100020888()
{
  return swift_task_dealloc(*(void *)(v0 + 344));
}

uint64_t sub_1000208A0()
{
  return URLRequest.init(url:cachePolicy:timeoutInterval:)(v0, 0LL, 60.0);
}

uint64_t sub_1000208B8()
{
  return sub_10000534C(v0);
}

uint64_t sub_1000208C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + a1 + 32);
  sub_100005F30((void *)(v1 + a1), *(void *)(v1 + a1 + 24));
  return *(unsigned int *)(*(void *)(v2 + 8) + 4LL);
}

void sub_1000208F0(uint64_t a1, uint64_t a2)
{
  v2._uint64_t countAndFlagsBits = 0x747065636341LL;
  v2._object = (void *)0xE600000000000000LL;
  URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)&a1, v2);
}

uint64_t sub_100020908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_100020914@<X0>(uint64_t a1@<X8>)
{
  return sub_10001FDA0(a1 + *(int *)(v1 + 48), v2);
}

void sub_100020928(uint64_t a1)
{
  uint64_t v4 = v3;
  v5._uint64_t countAndFlagsBits = v2;
  v5._object = v1;
  URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)&a1, v5);
}

uint64_t sub_10002093C()
{
  return sub_100004C44(v1, v0);
}

double sub_100020948()
{
  *(void *)&double result = swift_bridgeObjectRetain(v0).n128_u64[0];
  return result;
}

uint64_t sub_10002096C(uint64_t a1)
{
  return sub_10001FD14(v2, v1 + *(int *)(a1 + 48));
}

  ;
}

uint64_t sub_10002099C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
}

uint64_t sub_1000209C0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 320);
}

uint64_t sub_1000209DC()
{
  return swift_errorRetain(v0);
}

uint64_t sub_1000209E4()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_1000209F4()
{
  return URLRequest.httpMethod.setter(1414745936LL, 0xE400000000000000LL);
}

uint64_t sub_100020A04@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 16))(v3, v1 + v2);
}

uint64_t sub_100020A14()
{
  return sub_10000D8FC(*(void *)(v0 + 376), *(void *)(v0 + 384));
}

void sub_100020A1C()
{
  **(void **)(v1 + 264) = *(void *)(*(void *)(v2 + 48) + 16 * v0);
}

  ;
}

uint64_t sub_100020A4C()
{
  *(void *)(v2 + 424) = v1;
  *(void *)(v2 + 432) = v0;
  return URLRequest.httpBody.setter();
}

  ;
}

  ;
}

uint64_t sub_100020A80()
{
  return sub_10001FD58(*(void *)(v0 + 264), *(void *)(v0 + 272));
}

uint64_t sub_100020A8C@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(v1 + a1));
}

uint64_t sub_100020A94()
{
  return sub_10000D8FC(v0, v1);
}

uint64_t sub_100020AA0()
{
  return v0;
}

uint64_t sub_100020AAC()
{
  return sub_10000D8FC(v1, v0);
}

uint64_t sub_100020AB8()
{
  return sub_10000D8FC(v0, v1);
}

uint64_t sub_100020AC4(uint64_t a1)
{
  return _s10RTCUtility9XPCObjectOwst_0(v1, 1LL, 1LL, a1);
}

uint64_t sub_100020AE8()
{
  return Error.localizedDescription.getter(*(void *)(v0 + 136), *(void *)(v0 + 144));
}

  ;
}

uint64_t sub_100020B08( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  return sub_100019964(a1, a2, (uint64_t *)va);
}

uint64_t sub_100020B14(uint64_t a1)
{
  return sub_100004C44(a1, v1);
}

uint64_t sub_100020B1C(uint64_t result)
{
  *(void *)(result + swift_weakDestroy(v0 + 16) = v1;
  *(void *)(result + 24) = v2;
  return result;
}

uint64_t sub_100020B30@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(v1 + a1 + 8));
}

uint64_t sub_100020B3C(uint64_t a1)
{
  return _s10RTCUtility9XPCObjectOwet_0(v1, 1LL, a1);
}

  ;
}

uint64_t sub_100020B6C()
{
  return swift_release(v0);
}

  ;
}

uint64_t sub_100020B8C()
{
  return swift_getEnumCaseMultiPayload(v0, v1);
}

uint64_t sub_100020B98()
{
  return Data.count.getter(v1, v0);
}

uint64_t sub_100020BA4(uint64_t a1)
{
  return sub_10000E834(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_100020BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  sub_10000E7F8(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t sub_100020C14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  sub_10000E7F8(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  char v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_10000E834(v7, v8, v9, v10);
  return a1;
}

__n128 sub_100020C80(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100020C94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  char v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_10000E834(v5, v7, v6, v8);
  return a1;
}

uint64_t sub_100020CE0(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100020D20(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 24) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100020D68(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_100020D80(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 2;
  if (a2 >= 2)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    LOBYTE(a2) = 2;
    *(void *)__n128 result = v2;
  }

  *(_BYTE *)(result + 24) = a2;
  return result;
}

void type metadata accessor for StorebagSectionBackend()
{
}

void sub_100020DA8()
{
}

uint64_t sub_100020DC4()
{
  return 0x73746E65696C63LL;
}

void sub_100020DDC(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100020DE8(uint64_t a1)
{
  unint64_t v2 = sub_1000215F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100020E10(uint64_t a1)
{
  unint64_t v2 = sub_1000215F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100020E38(void *a1)
{
  uint64_t v3 = sub_10000534C(&qword_10008B080);
  __chkstk_darwin(v3);
  sub_100021B44();
  uint64_t v4 = a1[4];
  sub_100005F30(a1, a1[3]);
  unint64_t v5 = sub_1000215F4();
  sub_100021B6C((uint64_t)&unk_100083A20, (uint64_t)&unk_100083A20, v5);
  if (v1)
  {
    sub_100021B2C();
    return v4;
  }

  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100005F30(a1, v6);
  uint64_t v8 = dispatch thunk of Decoder.codingPath.getter(v6, v7);
  sub_100021C80(v8, (uint64_t)v16);
  uint64_t result = sub_10000FFD8();
  uint64_t v10 = v17;
  if (v17)
  {
    uint64_t v11 = v18;
    sub_100005F30(v16, v17);
    uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter(v10, v11);
    swift_bridgeObjectRetain(v12);
    sub_100005F54(v16);
    uint64_t v13 = sub_10000534C(&qword_10008B090);
    uint64_t v14 = sub_1000216A8(&qword_10008B098, &qword_10008B090, (void (*)(void))sub_100021630);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v13, v15, v3, v13, v14);
    sub_100021B34();
    swift_bridgeObjectRetain(v16[0]);
    sub_100021B2C();
    sub_10000FFD8();
    sub_10001ABA0();
    return v4;
  }

  __break(1u);
  return result;
}

void sub_100020FF8()
{
}

uint64_t sub_10002101C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x73746E65696C63LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73746E65696C63LL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

void sub_1000210A0()
{
}

uint64_t sub_1000210D0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100020E38(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

void sub_1000210FC(uint64_t a1)
{
}

uint64_t sub_100021128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result = sub_10002101C(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_100021154(uint64_t a1)
{
  unint64_t v2 = sub_10002166C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002117C(uint64_t a1)
{
  unint64_t v2 = sub_10002166C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1000211A4(void *a1)
{
  uint64_t v4 = sub_10000534C(&qword_10008B0A8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100021B44();
  uint64_t v6 = sub_100005F30(a1, a1[3]);
  unint64_t v7 = sub_10002166C();
  sub_100021B6C((uint64_t)&unk_100083990, (uint64_t)&unk_100083990, v7);
  if (v1)
  {
    sub_100005F54(a1);
  }

  else
  {
    uint64_t v8 = sub_10000534C(&qword_10008B0B8);
    uint64_t v9 = sub_1000216A8(&qword_10008B0C0, &qword_10008B0B8, (void (*)(void))sub_10002170C);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v8, v10, v4, v8, v9);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
    uint64_t v6 = v12;
    sub_100005F54(a1);
  }

  return v6;
}

void *sub_1000212D0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1000211A4(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000212F8(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  sub_100005F30(a1, v2);
  uint64_t v4 = dispatch thunk of Decoder.codingPath.getter(v2, v3);
  sub_100021C80(v4, (uint64_t)v25);
  uint64_t result = sub_10000FFD8();
  uint64_t v6 = v26;
  if (v26)
  {
    uint64_t v7 = v27;
    sub_100005F30(v25, v26);
    uint64_t v8 = dispatch thunk of CodingKey.stringValue.getter(v6, v7);
    uint64_t v10 = v9;
    sub_100005F54(v25);
    if (v8 == 0x6F7A6E6F67LL && v10 == (void *)0xE500000000000000LL)
    {
      unint64_t v14 = 0xE500000000000000LL;
    }

    else
    {
      if ((sub_100021B1C(0x6F7A6E6F67LL, 0xE500000000000000LL) & 1) != 0)
      {
LABEL_12:
        unint64_t v14 = (unint64_t)v10;
        goto LABEL_35;
      }

      if (v8 == 0x6B6E756C7073LL && v10 == (void *)0xE600000000000000LL)
      {
        unint64_t v14 = 0xE600000000000000LL;
      }

      else
      {
        uint64_t v13 = sub_100021B5C();
        if ((sub_100021B1C(v13, 0xE600000000000000LL) & 1) != 0) {
          goto LABEL_12;
        }
        if (v8 == 0x685F6B6E756C7073LL && v10 == (void *)0xEE00646F70656D6FLL)
        {
          unint64_t v14 = 0xEE00646F70656D6FLL;
        }

        else
        {
          uint64_t v16 = sub_100021B5C();
          if ((sub_100021B1C(v16 & 0xFFFFFFFFFFFFLL | 0x685F000000000000LL, 0xEE00646F70656D6FLL) & 1) != 0) {
            goto LABEL_12;
          }
          if (v8 != 0x615F6B6E756C7073LL || v10 != (void *)0xEA00000000007674LL)
          {
            uint64_t v18 = sub_100021B5C();
            if ((sub_100021B1C(v18 & 0xFFFFFFFFFFFFLL | 0x615F000000000000LL, 0xEA00000000007674LL) & 1) == 0)
            {
              if (v8 == 0xD000000000000012LL)
              {
                unint64_t v14 = 0x800000010006DF80LL;
                if (v10 == (void *)0x800000010006DF80LL) {
                  goto LABEL_35;
                }
              }

              if ((sub_100021B1C(0xD000000000000012LL, 0x800000010006DF80LL) & 1) == 0)
              {
                if (v8 == 0x6C61636F6CLL && v10 == (void *)0xE500000000000000LL)
                {
                  uint64_t v21 = swift_bridgeObjectRelease(0xE500000000000000LL);
                }

                else
                {
                  char v20 = sub_100021B1C(0x6C61636F6CLL, 0xE500000000000000LL);
                  uint64_t v21 = sub_10000FFD8();
                  if ((v20 & 1) == 0)
                  {
                    uint64_t v10 = 0LL;
LABEL_38:
                    sub_100021B2C();
                    return (uint64_t)v10;
                  }
                }

                sub_100021B84(v21);
                uint64_t v24 = sub_1000211A4(v25);
                if (!v1) {
                  uint64_t v10 = v24;
                }
                goto LABEL_38;
              }
            }

            goto LABEL_12;
          }

          unint64_t v14 = 0xEA00000000007674LL;
        }
      }
    }

uint64_t sub_1000215C4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000212F8(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + swift_weakDestroy(v0 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7;
  }

  return result;
}

unint64_t sub_1000215F4()
{
  unint64_t result = qword_10008B088;
  if (!qword_10008B088)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006A80C, &unk_100083A20);
    atomic_store(result, (unint64_t *)&qword_10008B088);
  }

  return result;
}

unint64_t sub_100021630()
{
  unint64_t result = qword_10008B0A0;
  if (!qword_10008B0A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B574, &unk_1000849B0);
    atomic_store(result, (unint64_t *)&qword_10008B0A0);
  }

  return result;
}

unint64_t sub_10002166C()
{
  unint64_t result = qword_10008B0B0;
  if (!qword_10008B0B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006A7BC, &unk_100083990);
    atomic_store(result, (unint64_t *)&qword_10008B0B0);
  }

  return result;
}

uint64_t sub_1000216A8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_10000E670(a2);
    a3();
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10002170C()
{
  unint64_t result = qword_10008B0C8;
  if (!qword_10008B0C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B54C, &unk_100084918);
    atomic_store(result, (unint64_t *)&qword_10008B0C8);
  }

  return result;
}

void type metadata accessor for StorebagSectionBackendTTR.CodingKeys()
{
}

uint64_t sub_100021758(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100021798 + 4 * byte_10006A560[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000217B8 + 4 * byte_10006A565[v4]))();
  }
}

_BYTE *sub_100021798(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000217B8(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000217C0(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000217C8(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000217D0(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000217D8(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void type metadata accessor for StorebagSectionBackendHTTP.CodingKeys()
{
}

void type metadata accessor for StorebagSectionBackendTTR()
{
}

uint64_t sub_100021800(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

void *sub_100021828(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *sub_100021864(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *sub_1000218C8(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_10002190C(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(_s10RTCUtility9XPCObjectOwst_0(v1, 0LL, 1LL, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(_s10RTCUtility9XPCObjectOwst_0(v1, 0LL, 1LL, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(_s10RTCUtility9XPCObjectOwst_0(v1, 0LL, 1LL, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10002194C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for StorebagSectionBackendHTTP()
{
}

unint64_t sub_10002199C()
{
  unint64_t result = qword_10008B0D0;
  if (!qword_10008B0D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006A6DC, &unk_100083A20);
    atomic_store(result, (unint64_t *)&qword_10008B0D0);
  }

  return result;
}

unint64_t sub_1000219DC()
{
  unint64_t result = qword_10008B0D8;
  if (!qword_10008B0D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006A794, &unk_100083990);
    atomic_store(result, (unint64_t *)&qword_10008B0D8);
  }

  return result;
}

unint64_t sub_100021A1C()
{
  unint64_t result = qword_10008B0E0;
  if (!qword_10008B0E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006A704, &unk_100083990);
    atomic_store(result, (unint64_t *)&qword_10008B0E0);
  }

  return result;
}

unint64_t sub_100021A5C()
{
  unint64_t result = qword_10008B0E8;
  if (!qword_10008B0E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006A72C, &unk_100083990);
    atomic_store(result, (unint64_t *)&qword_10008B0E8);
  }

  return result;
}

unint64_t sub_100021A9C()
{
  unint64_t result = qword_10008B0F0;
  if (!qword_10008B0F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006A64C, &unk_100083A20);
    atomic_store(result, (unint64_t *)&qword_10008B0F0);
  }

  return result;
}

unint64_t sub_100021ADC()
{
  unint64_t result = qword_10008B0F8;
  if (!qword_10008B0F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006A674, &unk_100083A20);
    atomic_store(result, (unint64_t *)&qword_10008B0F8);
  }

  return result;
}

uint64_t sub_100021B1C(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_100021B2C()
{
  return sub_100005F54(v0);
}

uint64_t sub_100021B34()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

  ;
}

uint64_t sub_100021B5C()
{
  return 0x6B6E756C7073LL;
}

uint64_t sub_100021B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a2, a3, v3, v4);
}

void sub_100021B78()
{
}

uint64_t sub_100021B84(uint64_t a1, ...)
{
  return sub_100005E8C(v1, (uint64_t)va);
}

uint64_t sub_100021B90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = v3 - 1;
    uint64_t v6 = type metadata accessor for URL(0LL);
    sub_100026C3C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a2, a1 + v7 + *(void *)(v8 + 72) * v5, v6);
    uint64_t v9 = a2;
    uint64_t v10 = 0LL;
    uint64_t v11 = v6;
  }

  else
  {
    uint64_t v11 = type metadata accessor for URL(0LL);
    uint64_t v9 = a2;
    uint64_t v10 = 1LL;
  }

  return _s10RTCUtility9XPCObjectOwst_0(v9, v10, 1LL, v11);
}

uint64_t sub_100021C20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = (uint64_t *)(a1 + 32 * v1);
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v2[3]);
  return v3;
}

double sub_100021C80@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100005E8C(a1 + 40 * v2 - 8, a2);
  }

  else
  {
    *(void *)(a2 + 32) = 0LL;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = 0u;
  }

  return result;
}

uint64_t sub_100021CAC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000D940(v0, qword_10008B100);
  sub_10000D34C(v0, (uint64_t)qword_10008B100);
  return Logger.init(subsystem:category:)( 0xD000000000000017LL,  0x800000010006D6D0LL,  0xD000000000000013LL,  0x800000010006E0C0LL);
}

uint64_t (*sub_100021D2C(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_100021D68(char a1)
{
  *(void *)(v2 + 128) = v1;
  *(_BYTE *)(v2 + 264) = a1;
  *(void *)(v2 + 136) = *(void *)v1;
  uint64_t v3 = sub_10000534C(&qword_10008A8B8);
  *(void *)(v2 + 144) = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  *(void *)(v2 + 152) = v4;
  *(void *)(v2 + 160) = sub_100008360(v4);
  uint64_t v5 = swift_defaultActor_initialize(v1);
  *(void *)(v1 + 120) = sub_100026AEC(v5, v6, (uint64_t)&type metadata for Int64);
  *(_WORD *)(v1 + 128) = 0;
  *(void *)(v1 + 136) = &_swiftEmptySetSingleton;
  uint64_t v7 = sub_10000534C(&qword_10008B330);
  *(void *)(v1 + 144) = sub_100026AEC(v7, v8, v7);
  *(void *)(v1 + 152) = 0LL;
  uint64_t v9 = sub_100026D30();
  *(void *)(v2 + 168) = v9;
  *(void *)(v1 + 168) = sub_100026AEC(v9, v10, v9);
  uint64_t v11 = type metadata accessor for StorebagCoordinator();
  swift_allocObject(v11, 136LL, 15LL);
  uint64_t v12 = (void *)swift_task_alloc(dword_10008AE24);
  *(void *)(v2 + 176) = v12;
  sub_100026CA8(v12, (uint64_t)sub_100021E64);
  return sub_10001C610();
}

uint64_t sub_100021E64(uint64_t a1)
{
  uint64_t v3 = *(void *)(v2 + 128);
  sub_10001A97C(*(void *)(v2 + 176));
  *(void *)(v3 + 112) = a1;
  uint64_t v4 = type metadata accessor for SubmitEagerEventsActivity();
  uint64_t v5 = sub_10001A7C4( &qword_10008BF60,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for SubmitEagerEventsActivity,  (uint64_t)&unk_10006AC0C);
  uint64_t v6 = type metadata accessor for XPCActivity();
  swift_allocObject(v6, 137LL, 15LL);
  *(void *)(v3 + 160) = sub_10003DEF8(v4, v5);
  sub_10001AC0C();
  return sub_100026A04(v7, v8, v9);
}

void sub_100021F04()
{
  if ((*(_BYTE *)(v0 + 264) & 1) != 0)
  {
    swift_task_dealloc(*(void *)(v0 + 160));
    (*(void (**)(void))(v0 + 8))(*(void *)(v0 + 128));
  }

  else
  {
    uint64_t v1 = qword_1000933B0;
    *(void *)(v0 + 184) = qword_1000933B0;
    if (v1)
    {
      sub_100010324();
      uint64_t v2 = (void *)sub_100026B60();
      *(void *)(v0 + 192) = v2;
      sub_100026CA8(v2, (uint64_t)sub_100021F88);
      sub_100028ADC(50LL);
    }

    else
    {
      __break(1u);
    }
  }

void sub_100021F88()
{
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v5 = (void *)*v1;
  uint64_t v7 = *(void *)(*v1 + 184);
  uint64_t v6 = *(void *)(*v1 + 192);
  uint64_t v8 = *v1;
  *(void *)(*v1 + 200) = v4;
  swift_task_dealloc(v6);
  uint64_t v9 = swift_release(v7);
  if (v2)
  {
    if (qword_100089FF0 != -1) {
      swift_once(&qword_100089FF0, sub_100021CAC);
    }
    uint64_t v10 = sub_10001030C();
    sub_100026A28(v10, (uint64_t)qword_10008B100);
    uint64_t v11 = sub_100026A40();
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.fault.getter();
    if (sub_100026C00(v12))
    {
      uint64_t v50 = v8;
      unint64_t v14 = (uint8_t *)sub_1000100B0(12LL);
      uint64_t v53 = sub_1000100B0(32LL);
      *(_DWORD *)unint64_t v14 = 136446210;
      sub_100026AC4(v2, (uint64_t)(v5 + 14));
      uint64_t v15 = sub_100026CB4();
      v5[15] = sub_100026A5C(v15, v16, v17, v18);
      sub_100026BAC((uint64_t)(v5 + 15), (uint64_t)(v5 + 16));
      sub_10000FFD8();
      sub_1000269C8();
      sub_1000269C8();
      sub_10001AA70((void *)&_mh_execute_header, v12, v13, "failed to load abandoned sessions: %{public}s", v14);
      sub_10001AA68(v53);
      sub_100010010(v53);
      uint64_t v19 = (uint64_t)v14;
      uint64_t v8 = v50;
      sub_100010010(v19);

      sub_1000269C8();
    }

    else
    {
      sub_1000269C8();
      sub_1000269C8();
      sub_1000269C8();
    }
  }

  else
  {
    int64_t v20 = v4[2];
    v5[26] = v20;
    if (v20)
    {
      if (v20 == 50)
      {
        if (qword_100089FF0 != -1) {
          swift_once(&qword_100089FF0, sub_100021CAC);
        }
        uint64_t v21 = sub_10001030C();
        sub_100026A88(v21, (uint64_t)qword_10008B100);
        os_log_type_t v22 = sub_10001AB78();
        if (sub_10001AAF8(v22))
        {
          uint64_t v23 = (_WORD *)sub_1000100B0(2LL);
          *uint64_t v23 = 0;
          sub_100026B80((void *)&_mh_execute_header, v24, v25, "too many abandoned sessions - dropping all sessions");
          sub_100010010((uint64_t)v23);
        }

        uint64_t v26 = qword_1000933B0;
        v5[27] = qword_1000933B0;
        if (v26)
        {
          sub_100010324();
          uint64_t v27 = (void *)sub_100026CE4();
          v5[28] = v27;
          *uint64_t v27 = v8;
          v27[1] = sub_100022354;
          sub_100026AFC();
          sub_100028B70();
          return;
        }

        goto LABEL_25;
      }

      uint64_t v28 = v5[25];
      uint64_t v51 = v8;
      uint64_t v52 = v5[20];
      uint64_t v30 = v5[18];
      uint64_t v29 = v5[19];
      sub_100026D18(v9, v20);
      uint64_t v31 = 0LL;
      sub_100026C3C();
      uint64_t v33 = v28 + v32;
      uint64_t v35 = *(void *)(v34 + 72);
      do
      {
        os_log_type_t v36 = (void *)v5[20];
        uint64_t v37 = (uint64_t)v36 + *(int *)(v30 + 48);
        sub_1000261D4(v33, v37);
        uint64_t v38 = *(void *)(v37 + 56);
        *os_log_type_t v36 = *(void *)(v37 + 48);
        *(void *)(v52 + 8) = v38;
        unint64_t v40 = _swiftEmptyArrayStorage[2];
        unint64_t v39 = _swiftEmptyArrayStorage[3];
        swift_bridgeObjectRetain();
        if (v40 >= v39 >> 1) {
          sub_100057F84(v39 > 1, v40 + 1, 1);
        }
        uint64_t v41 = v5[26];
        uint64_t v42 = v5[20];
        ++v31;
        _swiftEmptyArrayStorage[2] = v40 + 1;
        sub_1000268F8( v42,  (uint64_t)_swiftEmptyArrayStorage + ((*(unsigned __int8 *)(v29 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))
        + *(void *)(v29 + 72) * v40);
        v33 += v35;
      }

      while (v31 != v41);
      sub_100026CDC();
      uint64_t v8 = v51;
    }

    else
    {
      sub_10000FFD8();
    }

    uint64_t v43 = (uint64_t *)(v5[16] + 168LL);
    sub_100009C44((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v45 = v44;
    sub_10001ABF4((uint64_t)v43, (uint64_t)(v5 + 11), 1LL);
    uint64_t v46 = *v43;
    *uint64_t v43 = v45;
    swift_bridgeObjectRelease(v46);
  }

  uint64_t v47 = qword_1000933B0;
  v5[29] = qword_1000933B0;
  if (v47)
  {
    sub_100010324();
    BOOL v48 = (void *)sub_100026CE4();
    v5[30] = v48;
    *BOOL v48 = v8;
    v48[1] = sub_10002264C;
    sub_100026AFC();
    sub_100028C44(v49);
    return;
  }

  __break(1u);
LABEL_25:
  __break(1u);
}

void sub_100022354()
{
  uint64_t v3 = (void *)*v1;
  uint64_t v42 = v3;
  sub_100026CF8(v3[28], &v42);
  if (v0)
  {
    sub_100026CDC();
    sub_10001020C();
    if (qword_100089FF0 != -1) {
      swift_once(&qword_100089FF0, sub_100021CAC);
    }
    uint64_t v4 = sub_10001030C();
    sub_100026A28(v4, (uint64_t)qword_10008B100);
    uint64_t v5 = sub_100026A40();
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    if (sub_100026C00(v6))
    {
      uint64_t v38 = v2;
      uint64_t v8 = (uint8_t *)sub_1000100B0(12LL);
      uint64_t v9 = sub_1000100B0(32LL);
      uint64_t v41 = (void *)v9;
      *(_DWORD *)uint64_t v8 = 136446210;
      sub_100026AC4(v0, (uint64_t)(v3 + 14));
      uint64_t v10 = sub_100026CB4();
      v3[15] = sub_100019964(v10, v11, (uint64_t *)&v41);
      sub_100026BAC((uint64_t)(v3 + 15), (uint64_t)(v3 + 16));
      sub_10000FFD8();
      sub_1000269C8();
      sub_1000269C8();
      sub_10001AA70((void *)&_mh_execute_header, v6, v7, "failed to load abandoned sessions: %{public}s", v8);
      sub_10001AA68(v9);
      sub_100010010(v9);
      uint64_t v12 = (uint64_t)v8;
      uint64_t v2 = v38;
      sub_100010010(v12);

      sub_1000269C8();
    }

    else
    {
      sub_1000269C8();
      sub_1000269C8();
      sub_1000269C8();
    }
  }

  else
  {
    uint64_t v39 = v2;
    uint64_t v13 = sub_10001020C();
    uint64_t v15 = v3[25];
    int64_t v14 = v3[26];
    uint64_t v40 = v3[20];
    uint64_t v17 = v3[18];
    uint64_t v16 = v3[19];
    uint64_t v41 = _swiftEmptyArrayStorage;
    sub_100026D18(v13, v14);
    uint64_t v18 = 0LL;
    uint64_t v19 = _swiftEmptyArrayStorage;
    sub_100026C3C();
    uint64_t v21 = v15 + v20;
    uint64_t v23 = *(void *)(v22 + 72);
    do
    {
      uint64_t v24 = (void *)v3[20];
      uint64_t v25 = (uint64_t)v24 + *(int *)(v17 + 48);
      sub_1000261D4(v21, v25);
      uint64_t v26 = *(void *)(v25 + 56);
      *uint64_t v24 = *(void *)(v25 + 48);
      *(void *)(v40 + 8) = v26;
      uint64_t v41 = v19;
      unint64_t v27 = v19[2];
      unint64_t v28 = v19[3];
      swift_bridgeObjectRetain();
      if (v27 >= v28 >> 1)
      {
        sub_100057F84(v28 > 1, v27 + 1, 1);
        uint64_t v19 = v41;
      }

      uint64_t v29 = v3[26];
      uint64_t v30 = v3[20];
      ++v18;
      v19[2] = v27 + 1;
      sub_1000268F8( v30,  (uint64_t)v19 + ((*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))
      + *(void *)(v16 + 72) * v27);
      v21 += v23;
    }

    while (v18 != v29);
    sub_100026CDC();
    uint64_t v31 = v3[16];
    sub_100009C44((uint64_t)v19);
    uint64_t v33 = v32;
    sub_10001ABF4(v31 + 168, (uint64_t)(v3 + 11), 1LL);
    uint64_t v34 = *(void *)(v31 + 168);
    *(void *)(v31 + 168) = v33;
    swift_bridgeObjectRelease(v34);
    uint64_t v2 = v39;
  }

  uint64_t v35 = qword_1000933B0;
  v3[29] = qword_1000933B0;
  if (v35)
  {
    sub_100010324();
    os_log_type_t v36 = (void *)sub_100026CE4();
    v3[30] = v36;
    *os_log_type_t v36 = v2;
    v36[1] = sub_10002264C;
    sub_100026B18();
    sub_100028C44(v37);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10002264C()
{
  uint64_t v5 = v2[29];
  if (v1)
  {
    swift_errorRelease(v1);
    swift_release(v5);
  }

  else
  {
    swift_release(v2[29]);
    uint64_t v6 = *(void **)(v0 + 16);
    sub_100006AF0();
    if (v6)
    {
      if (qword_100089FF0 != -1) {
        swift_once(&qword_100089FF0, sub_100021CAC);
      }
      uint64_t v7 = sub_10001030C();
      sub_100026A88(v7, (uint64_t)qword_10008B100);
      os_log_type_t v8 = sub_10001AB70();
      if (sub_10001AAF8(v8))
      {
        uint64_t v9 = (_WORD *)sub_1000100B0(2LL);
        _WORD *v9 = 0;
        sub_100026B80((void *)&_mh_execute_header, v10, v11, "found eager events, starting activity");
        sub_100010010((uint64_t)v9);
      }

      byte_10008B730 = 0;
    }
  }

  uint64_t v12 = (void *)swift_task_alloc(dword_10008B15C);
  v2[31] = v12;
  *uint64_t v12 = v3;
  v12[1] = sub_100022754;
  return sub_100024F2C();
}

uint64_t sub_100022754()
{
  uint64_t v1 = *(void *)(v0 + 128);
  sub_100026B94(v2);
  swift_task_dealloc(v3);
  *(void *)(v0 + 256) = *(void *)(v1 + 160);
  sub_100010324();
  sub_100026B34();
  return sub_100020908(v4, v5, v6);
}

uint64_t sub_10002279C()
{
  __int128 v7 = *(_OWORD *)(v0 + 128);
  sub_100026D04();
  sub_10001020C();
  id v1 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  uint64_t v2 = MCEffectiveSettingsChangedNotification;
  uint64_t v3 = swift_allocObject(&unk_100083CA8, 32LL, 7LL);
  *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = v7;
  *(void *)(v0 + 48) = sub_1000268D8;
  *(void *)(v0 + 56) = v3;
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = _NSConcreteStackBlock;
  *(void *)(v0 + 24) = 1107296256LL;
  *(void *)(v0 + 32) = sub_100022A90;
  *(void *)(v0 + 40) = &unk_100083CC0;
  uint64_t v4 = _Block_copy((const void *)(v0 + 16));
  swift_retain(v7);
  sub_100006BB4();
  id v5 = [v1 addObserverForName:v2 object:0 queue:0 usingBlock:v4];
  _Block_release(v4);

  swift_unknownObjectRelease(v5);
  swift_task_dealloc(*(void *)(v0 + 160));
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 128));
}

uint64_t sub_1000228D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10000534C((uint64_t *)&unk_10008C4A0);
  __chkstk_darwin(v3);
  id v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100089FF0 != -1) {
    swift_once(&qword_100089FF0, sub_100021CAC);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_10000D34C(v6, (uint64_t)qword_10008B100);
  os_log_type_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "received notification for MC effective settings change", v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  _s10RTCUtility9XPCObjectOwst_0((uint64_t)v5, 1LL, 1LL, v11);
  uint64_t v12 = (void *)swift_allocObject(&unk_100083CF8, 40LL, 7LL);
  __int128 v12[2] = 0LL;
  void v12[3] = 0LL;
  v12[4] = a2;
  swift_retain(a2);
  uint64_t v13 = sub_100016914((uint64_t)v5, (uint64_t)&unk_10008B348, (uint64_t)v12);
  return swift_release(v13);
}

uint64_t sub_100022A48()
{
  id v1 = (void *)swift_task_alloc(dword_10008B15C);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10001A92C;
  return sub_100024F2C();
}

uint64_t sub_100022A90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Notification(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_log_type_t v9 = *(void (**)(char *))(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100022B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + 144);
  uint64_t v8 = *(void *)(v7 + 16);
  sub_1000100D8();
  sub_10001015C();
  if (v8 && (unint64_t v9 = sub_100033A58(a1, a2), (v10 & 1) != 0))
  {
    uint64_t v11 = *(void **)(*(void *)(v7 + 56) + 8 * v9);
    sub_1000083B0();
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  sub_1000083D4();
  swift_bridgeObjectRelease(v7);
  uint64_t v12 = v11[2];
  if (!v12)
  {
LABEL_11:
    a3 = 0LL;
    goto LABEL_12;
  }

  if (v11[4] != a3)
  {
    uint64_t v13 = v11 + 5;
    while (--v12)
    {
      uint64_t v14 = v13[2];
      v13 += 3;
      if (v14 == a3) {
        goto LABEL_10;
      }
    }

    goto LABEL_11;
  }

uint64_t sub_100022C3C( int a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 248) = v18;
  *(void *)(v9 + 256) = v8;
  *(_BYTE *)(v9 + 310) = v19;
  *(void *)(v9 + 240) = v17;
  *(_OWORD *)(v9 + 208) = v15;
  *(_OWORD *)(v9 + 224) = v16;
  *(void *)(v9 + 192) = a7;
  *(void *)(v9 + 200) = a8;
  *(void *)(v9 + 176) = a5;
  *(void *)(v9 + 184) = a6;
  *(void *)(v9 + 160) = a3;
  *(void *)(v9 + 168) = a4;
  *(_BYTE *)(v9 + 309) = a2;
  *(_DWORD *)(v9 + 304) = a1;
  uint64_t v10 = sub_10000534C(&qword_10008C540);
  *(void *)(v9 + 264) = sub_100008360(*(void *)(v10 - 8));
  sub_100026B34();
  return swift_task_switch(v11, v12, v13);
}

void sub_100022CB4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, char a18, uint64_t a19)
{
  uint64_t v12 = *(void *)(v11 + 160);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v12;
  uint64_t v13 = *(void **)(v11 + 224);
  uint64_t v14 = *(void *)(v11 + 192);
  uint64_t v15 = *(void *)(v11 + 200);
  uint64_t v16 = *(void *)(v11 + 176);
  uint64_t v17 = *(void *)(v11 + 184);
  unint64_t v18 = *(void *)(v11 + 168);
  *(void *)(v11 + 24) = v18;
  *(void *)(v11 + 32) = v16;
  *(void *)(v11 + 40) = v17;
  *(void *)(v11 + 48) = v14;
  *(void *)(v11 + 56) = v15;
  if (!v13)
  {
    sub_100010270();
    sub_10001AC84();
    sub_1000101AC();
    uint64_t v38 = 0LL;
    goto LABEL_28;
  }

  uint64_t v19 = *(void *)(v11 + 208);
  uint64_t v54 = 0LL;
  unint64_t v55 = 0xE000000000000000LL;
  if (v19 < 0)
  {
LABEL_32:
    __break(1u);
    return;
  }

  if (v19)
  {
    swift_bridgeObjectRetain(v18);
    sub_10001AC84();
    sub_1000101AC();
    uint64_t v20 = 0LL;
    p_ivars = &DiskCache.ivars;
    unint64_t v57 = (char *)&type metadata for Any + 8;
    do
    {
      if (v20 == v19)
      {
        __break(1u);
        goto LABEL_32;
      }

      uint64_t v22 = *(os_log_s **)(v11 + 256);
      sub_100022B34(*(void *)(v11 + 216), (uint64_t)v13, v20);
      if (v24)
      {
        uint64_t v25 = v23;
        unint64_t v26 = (unint64_t)v24;
        uint64_t v27 = v54 & 0xFFFFFFFFFFFFLL;
        if ((v55 & 0x2000000000000000LL) != 0) {
          uint64_t v27 = HIBYTE(v55) & 0xF;
        }
        if (v27)
        {
          v56._uint64_t countAndFlagsBits = 46LL;
          v56._object = (void *)0xE100000000000000LL;
          v28._uint64_t countAndFlagsBits = v23;
          v28._object = v24;
          String.append(_:)(v28);
          sub_10001ABA0();
          String.append(_:)(v56);
          sub_10001ABA0();
        }

        else
        {
          swift_bridgeObjectRelease(v55);
          uint64_t v54 = v25;
          unint64_t v55 = v26;
        }
      }

      else
      {
        if (p_ivars[510] != (__objc2_ivar_list *)-1LL) {
          swift_once(&qword_100089FF0, sub_100021CAC);
        }
        uint64_t v29 = sub_10001030C();
        sub_10000D34C(v29, (uint64_t)qword_10008B100);
        uint64_t v30 = sub_100026C4C();
        Logger.logObject.getter(v30);
        os_log_type_t v31 = sub_10001AB78();
        if (os_log_type_enabled(v22, v31))
        {
          uint64_t v33 = *(void *)(v11 + 208);
          uint64_t v32 = *(void *)(v11 + 216);
          uint64_t v34 = sub_1000100B0(22LL);
          uint64_t v35 = p_ivars;
          uint64_t v36 = sub_1000100B0(32LL);
          v56._uint64_t countAndFlagsBits = v36;
          *(_DWORD *)uint64_t v34 = 136315394;
          sub_1000100D8();
          *(void *)(v34 + 4) = sub_100019964(v32, (unint64_t)v13, &v56._countAndFlagsBits);
          sub_10001AA78((uint64_t)v13);
          *(_WORD *)(v34 + 12) = 2048;
          sub_1000083D4();
          *(void *)(v34 + 14) = v33;
          sub_1000083D4();
          _os_log_impl((void *)&_mh_execute_header, v22, v31, "gap in hierarchy: %s level %ld", (uint8_t *)v34, 0x16u);
          swift_arrayDestroy(v36, 1LL);
          uint64_t v37 = v36;
          p_ivars = v35;
          sub_100010010(v37);
          sub_100010010(v34);
        }

        else
        {

          sub_100026CEC();
        }
      }

      ++v20;
      uint64_t v19 = *(void *)(v11 + 208);
    }

    while (v20 != v19);
    uint64_t v38 = v54;
    uint64_t v13 = (void *)v55;
    if (!v54) {
      goto LABEL_22;
    }
  }

  else
  {
    swift_bridgeObjectRetain(v18);
    sub_10001AC84();
    sub_1000101AC();
    uint64_t v38 = 0LL;
    uint64_t v13 = (void *)0xE000000000000000LL;
LABEL_22:
    if (v13 == (void *)0xE000000000000000LL)
    {
      unint64_t v39 = 0xE000000000000000LL;
LABEL_26:
      swift_bridgeObjectRelease(v39);
      uint64_t v38 = 0LL;
      uint64_t v13 = 0LL;
      goto LABEL_27;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v38, v13, 0LL, 0xE000000000000000LL, 0LL) & 1) != 0)
  {
    unint64_t v39 = (unint64_t)v13;
    goto LABEL_26;
  }

LABEL_27:
  uint64_t v12 = *(void *)(v11 + 160);
  unint64_t v18 = *(void *)(v11 + 168);
LABEL_28:
  if ((sub_1000239F0(v12, v18) & 1) != 0)
  {
    uint64_t v41 = *(void *)(v11 + 256);
    uint64_t v40 = *(void *)(v11 + 264);
    uint64_t v42 = sub_100026D30();
    _s10RTCUtility9XPCObjectOwst_0(v40, 1LL, 1LL, v42);
    uint64_t v43 = type metadata accessor for Session(0LL);
    sub_10001CC14(v43);
    uint64_t v44 = dword_10008C53C;
    swift_retain(v41);
    sub_10001AC84();
    uint64_t v45 = (void *)swift_task_alloc(v44);
    *(void *)(v11 + 272) = v45;
    *uint64_t v45 = v11;
    v45[1] = sub_1000230A4;
    sub_100051D10( *(_DWORD *)(v11 + 304),  *(void *)(v11 + 256),  (_OWORD *)(v11 + 16),  *(_BYTE *)(v11 + 309),  v38,  v13,  *(void *)(v11 + 232),  *(void *)(v11 + 240),  v46,  v47,  v48,  v49,  v50,  v51,  v52,  v53,  a17,  a18,  a19);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v11 + 200));
    sub_10000FFD8();
    sub_100006AF0();
    sub_1000083D4();
    sub_100026BE8();
    (*(void (**)(void))(v11 + 8))(0LL);
  }

  __break(1u);
}

uint64_t sub_1000230A4()
{
  uint64_t v2 = v0[34];
  v0[35] = v3;
  v0[36] = v1;
  swift_task_dealloc(v2);
  if (v1) {
    uint64_t v4 = sub_100023578;
  }
  else {
    uint64_t v4 = sub_100023100;
  }
  return sub_100020908((uint64_t)v4, v0[32], 0LL);
}

uint64_t sub_100023100()
{
  return sub_10001A9C0();
}

uint64_t sub_100023130()
{
  *(_BYTE *)(v0 + 311) = sub_100050754() & 1;
  sub_10001AC0C();
  return sub_100020908(v1, v2, v3);
}

uint64_t sub_10002316C()
{
  if (*(_BYTE *)(v1 + 311) == 1) {
    sub_100023D2C(*(void *)(v1 + 160), *(void *)(v1 + 168), 1);
  }
  uint64_t v3 = *(void *)(v1 + 224);
  if (v3)
  {
    uint64_t v2 = (_BYTE *)(v1 + 112);
    uint64_t v4 = *(void *)(v1 + 280);
    uint64_t v5 = *(void *)(v1 + 288);
    uint64_t v6 = *(void *)(v4 + 112);
    unint64_t v7 = *(void *)(v4 + 120);
    *(void *)(v1 + 136) = 46LL;
    *(void *)(v1 + 144) = 0xE100000000000000LL;
    uint64_t v8 = swift_task_alloc(32LL);
    *(void *)(v8 + swift_weakDestroy(v0 + 16) = v1 + 136;
    sub_1000100D0(v7);
    sub_1000083B8();
    uint64_t v9 = sub_100025BC8(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10001A870, v8, v6, v7);
    sub_10001ABA0();
    swift_task_dealloc(v8);
    sub_100021C20(v9);
    sub_100026CC0();
    swift_bridgeObjectRelease(v9);
    if (!v5)
    {
      Substring.init(_:)(0LL, 0xE000000000000000LL);
      sub_100026CC0();
    }

    uint64_t v10 = *(void *)(v1 + 256);
    uint64_t v11 = *(void *)(v1 + 216);
    uint64_t v57 = static String._fromSubstring(_:)(v6, v7, v8, v5);
    uint64_t v13 = v12;
    sub_1000083D4();
    uint64_t v0 = (uint64_t **)(v10 + 144);
    sub_100026B34();
    sub_10001ABF4(v14, v15, v16);
    uint64_t v17 = *(void *)(v10 + 144);
    sub_1000083B8();
    sub_1000083B0();
    sub_10004F680(v11, v3, v17);
    uint64_t v19 = v18;
    sub_100006AF0();
    sub_10000FFD8();
    swift_bridgeObjectRelease(v19);
    if (!v19)
    {
      uint64_t v20 = *(void *)(v1 + 216);
      sub_10001ABF4(v10 + 144, v1 + 64, 33LL);
      sub_1000083B8();
      sub_100033F28((uint64_t)_swiftEmptyArrayStorage, v20, v3);
      swift_endAccess(v1 + 64);
      sub_100006AF0();
    }

    uint64_t v21 = *(void *)(v1 + 216);
    sub_10001ABF4(v10 + 144, v1 + 112, 33LL);
    sub_1000083B8();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
    uint64_t v58 = *v0;
    uint64_t v23 = v58;
    uint64_t *v0 = (uint64_t *)0x8000000000000000LL;
    sub_1000083B8();
    unint64_t v24 = sub_100026CD4(v21);
    uint64_t v26 = v23[2];
    BOOL v27 = (v25 & 1) == 0;
    Swift::Int v28 = v26 + v27;
    if (__OFADD__(v26, v27))
    {
      __break(1u);
    }

    else
    {
      uint64_t v8 = v24;
      char v29 = v25;
      sub_10000534C(&qword_10008B9A0);
      uint64_t v23 = (uint64_t *)&v58;
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v28))
      {
        uint64_t v23 = v58;
        unint64_t v30 = sub_100026CD4(*(void *)(v1 + 216));
        if ((v29 & 1) != (v31 & 1))
        {
          sub_100026B18();
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v32);
        }

        uint64_t v8 = v30;
      }

      if ((v29 & 1) != 0)
      {
        uint64_t v23 = *(uint64_t **)(v58[7] + 8 * v8);
        if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) != 0)
        {
LABEL_15:
          unint64_t v35 = v23[2];
          unint64_t v34 = v23[3];
          if (v35 >= v34 >> 1)
          {
            sub_100026D0C(v34 > 1, v35 + 1);
            uint64_t v23 = v56;
          }

          uint64_t v37 = *(void *)(v1 + 208);
          uint64_t v36 = *(void *)(v1 + 216);
          v23[2] = v35 + 1;
          uint64_t v38 = &v23[3 * v35];
          v38[4] = v37;
          v38[5] = v57;
          v38[6] = v13;
          uint64_t v59 = v23;
          sub_1000265E8((uint64_t *)&v59, 1, (uint64_t *)&v58, v8, v36, v3);
          sub_100006AF0();
          sub_10000FFD8();
          uint64_t *v0 = v58;
          sub_100006AF0();
          swift_endAccess(v1 + 112);
          sub_100006AF0();
          goto LABEL_18;
        }

LABEL_30:
        sub_100026D0C(0, v23[2] + 1);
        uint64_t v23 = v55;
        goto LABEL_15;
      }
    }

    __break(1u);
    goto LABEL_30;
  }

  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

  sub_100010254();
  uint64_t v6 = v52;
LABEL_32:
  if ((v56 & 1) != 0)
  {
    sub_100059294();
    if (v47 != v48)
    {
      *char v25 = -1LL << v46;
    }

    else
    {
      uint64_t v49 = sub_1000594C0();
      sub_1000577F4(v49, v50, v25);
    }

    v11[2] = 0LL;
  }

LABEL_18:
  uint64_t v39 = *(void *)(v1 + 280);
  uint64_t v40 = (void *)*(unsigned __int8 *)(v39 + 240);
  swift_release(v39);
  if ((_DWORD)v40 != 2) {
    goto LABEL_27;
  }
  uint64_t v41 = *(void *)(v1 + 256);
  uint64_t v42 = *(void *)(v41 + 152);
  if (v42 || (uint64_t v2 = &unk_10008B000, byte_10008B730 != 1))
  {
    BOOL v52 = __OFADD__(v42, 1LL);
    uint64_t v53 = v42 + 1;
    if (v52)
    {
      __break(1u);
      goto LABEL_32;
    }

    *(void *)(v41 + 152) = v53;
LABEL_27:
    sub_100026BE8();
    sub_100026B18();
    __asm { BR              X1 }
  }

  if (qword_100089FF0 != -1) {
LABEL_32:
  }
    swift_once(&qword_100089FF0, sub_100021CAC);
  uint64_t v43 = sub_10001030C();
  sub_100026A88(v43, (uint64_t)qword_10008B100);
  os_log_type_t v44 = sub_10001AD00();
  if (sub_10001AB10(v44))
  {
    uint64_t v45 = (_WORD *)sub_1000100B0(2LL);
    sub_100026D24(v45);
    sub_100026A48((void *)&_mh_execute_header, v46, v47, "registering eager submit activity");
    sub_100010010((uint64_t)v0);
  }

  uint64_t v48 = *(void *)(v1 + 256);

  v2[1840] = 0;
  *(void *)(v1 + 296) = *(void *)(v48 + 160);
  sub_100026B18();
  return swift_task_switch(v49, v50, v51);
}

    sub_100010060(a2);
    goto LABEL_19;
  }

  BOOL v65 = a3;
  uint64_t v17 = v14 - 1;
  if (__OFSUB__(v14, 1LL))
  {
    __break(1u);
  }

  else
  {
    --*((_WORD *)v4 + 64);
    if (qword_100089FF0 == -1) {
      goto LABEL_4;
    }
  }

  swift_once(&qword_100089FF0, sub_100021CAC);
LABEL_4:
  uint64_t v18 = sub_10001030C();
  uint64_t v19 = (os_log_s *)sub_10000D34C(v18, (uint64_t)qword_10008B100);
  sub_1000100D0(a2);
  uint64_t v20 = sub_100026BA0();
  uint64_t v21 = v19;
  Logger.logObject.getter(v20);
  uint64_t v22 = sub_100026BE0();
  uint64_t v23 = sub_100026C08(v22);
  BOOL v66 = a1;
  char v63 = v8;
  BOOL v64 = v11;
  if (v23)
  {
    unint64_t v24 = sub_1000100B0(26LL);
    char v25 = sub_1000100B0(32LL);
    uint64_t v62 = v19;
    uint64_t v26 = v25;
    v70[0] = v25;
    *(_DWORD *)unint64_t v24 = 136446722;
    sub_1000083B8();
    BOOL v67 = sub_100019964(a1, a2, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v24 + 4);
    sub_10001AA78(a2);
    *(_WORD *)(v24 + 12) = 2050;
    BOOL v67 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v24 + 14);
    *(_WORD *)(v24 + 22) = 512;
    BOOL v27 = *((_WORD *)v4 + 64);
    sub_100006BB4();
    LOWORD(v67) = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, (char *)&v67 + 2, v24 + 24);
    sub_100006BB4();
    _os_log_impl( (void *)&_mh_execute_header,  v21,  v16,  "session config finished for %{public}s with %{public}lld uses remaining. Total Active Sessions: %hu",  (uint8_t *)v24,  0x1Au);
    sub_10001AA68(v26);
    Swift::Int v28 = v26;
    uint64_t v19 = v62;
    sub_100010010(v28);
    sub_100010010(v24);
  }

  else
  {
    swift_release_n(v4, 2LL);
    sub_100010060(a2);
  }

  if (v17 > 0)
  {
    sub_10001ABF4(v12, (uint64_t)v70, 33LL);
    sub_1000083B8();
    sub_100033F10(v17, v66, a2);
    swift_endAccess(v70);
    sub_100006AF0();
    return;
  }

  sub_10001ABF4(v12, (uint64_t)v70, 33LL);
  uint64_t v36 = v66;
  sub_100033C58(v66, a2);
  swift_endAccess(v70);
  if ((v65 & 1) != 0)
  {
    sub_10001ABF4((uint64_t)(v4 + 17), (uint64_t)v70, 0LL);
    uint64_t v37 = v4[17];
    sub_1000083B0();
    sub_1000599F0(v36, a2, v37);
    uint64_t v39 = v38;
    sub_10000FFD8();
    uint64_t v40 = sub_1000100D0(a2);
    unint64_t v30 = v19;
    Logger.logObject.getter(v40);
    uint64_t v41 = sub_100026BE0();
    uint64_t v42 = os_log_type_enabled(v19, v41);
    if ((v39 & 1) != 0)
    {
      if (v42)
      {
        uint64_t v33 = (uint8_t *)sub_1000100B0(12LL);
        uint64_t v43 = sub_1000100B0(32LL);
        BOOL v67 = v43;
        *(_DWORD *)uint64_t v33 = 136446210;
        sub_1000083B8();
        os_log_type_t v44 = sub_100026BF0();
        uint64_t v45 = sub_100026C94(v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v45, v46, v33 + 4);
        sub_10001AA78(a2);
        sub_10001AA70((void *)&_mh_execute_header, v30, v41, "not evicting %{public}s: already running", v33);
        sub_10001AA68(v43);
        unint64_t v35 = v43;
        goto LABEL_10;
      }

      goto LABEL_18;
    }

    if (v42)
    {
      uint64_t v19 = (os_log_s *)sub_1000100B0(12LL);
      uint64_t v53 = sub_1000100B0(32LL);
      BOOL v67 = v53;
      *(_DWORD *)uint64_t v19 = 136446210;
      sub_1000083B8();
      uint64_t v54 = sub_100026BF0();
      unint64_t v55 = sub_100026C94(v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v55, v56, (char *)v19 + 4);
      sub_10001AA78(a2);
      sub_10001AA70((void *)&_mh_execute_header, v30, v41, "starting eviction timer for %{public}s", (uint8_t *)v19);
      sub_10001AA68(v53);
      sub_100010010(v53);
      sub_100010010((uint64_t)v19);
    }

    else
    {
      sub_100010060(a2);
    }

    sub_10001ABF4((uint64_t)(v4 + 17), (uint64_t)&v67, 33LL);
    sub_1000083B8();
    sub_100042BE4(v69, v36, a2);
    swift_endAccess(&v67);
    swift_bridgeObjectRelease(v69[1]);
    uint64_t v57 = type metadata accessor for TaskPriority(0LL);
    sub_100026B48(v57);
    uint64_t v59 = sub_10001A7C4( &qword_10008B308,  v58,  (uint64_t (*)(uint64_t))type metadata accessor for SessionCoordinator,  (uint64_t)&unk_10006A8E8);
    uint64_t v60 = (void *)sub_100026C70((uint64_t)&unk_100083C30);
    id v60[2] = v4;
    v60[3] = v59;
    v60[4] = v4;
    v60[5] = v36;
    BOOL v61 = v63;
    v60[6] = a2;
    v60[7] = v61;
    sub_100026BA0();
    sub_1000083B8();
    BOOL v52 = sub_10004FDF8((uint64_t)v19, (uint64_t)&unk_10008B320, (uint64_t)v60);
  }

  else
  {
    uint64_t v47 = type metadata accessor for TaskPriority(0LL);
    sub_100026B48(v47);
    uint64_t v49 = sub_10001A7C4( &qword_10008B308,  v48,  (uint64_t (*)(uint64_t))type metadata accessor for SessionCoordinator,  (uint64_t)&unk_10006A8E8);
    uint64_t v50 = (void *)sub_100026C70((uint64_t)&unk_100083C08);
    v50[2] = v4;
    v50[3] = v49;
    v50[4] = v36;
    v50[5] = a2;
    uint64_t v51 = v63;
    v50[6] = v4;
    v50[7] = v51;
    sub_100026BA0();
    sub_1000083B8();
    BOOL v52 = sub_100016914((uint64_t)v19, (uint64_t)&unk_10008B310, (uint64_t)v50);
  }

  swift_release(v52);
}

  swift_release(v8);
  uint64_t v12 = qword_1000933C0;
  *(void *)(v0 + 648) = qword_1000933C0;
  if (v12)
  {
    sub_100010324();
    sub_100006AF0();
    uint64_t v13 = (void *)swift_task_alloc(dword_10008B14C);
    *(void *)(v0 + 656) = v13;
    sub_100026CA8(v13, (uint64_t)sub_10002E300);
    sub_100023750();
    return;
  }

  sub_10003A610();
  uint64_t v10 = v95;
  if (((v9 >> 7) & 1) != 0)
  {
LABEL_9:
    sub_10003A618();
    uint64_t v11 = v103;
    uint64_t v12 = v97;
    if (((v9 >> 8) & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

    uint64_t v8 = (v13 - 1) & v13;
  }

  uint64_t v14 = v12 + 3;
  if (v14 >= v25) {
    return v3;
  }
  uint64_t v13 = *(void *)(v24 + 8 * v14);
  if (v13)
  {
    uint64_t v4 = v14;
    goto LABEL_18;
  }

  while (1)
  {
    uint64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v4 >= v25) {
      return v3;
    }
    uint64_t v13 = *(void *)(v24 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }

      sub_1000593AC();
      uint64_t v14 = v21 & v20;
    }
  }

  sub_100010254();
LABEL_39:
  *uint64_t v4 = v9;
}

  __break(1u);
}

uint64_t sub_100023578()
{
  uint64_t v1 = *(void *)(v0 + 288);
  *(void *)(v0 + 152) = v1;
  swift_errorRetain(v1);
  uint64_t v2 = sub_10000534C(&qword_10008A8A8);
  if (swift_dynamicCast(v0 + 308, v0 + 152, v2, &unk_100085B30, 0LL) && *(_BYTE *)(v0 + 308) == 1)
  {
    swift_errorRelease(*(void *)(v0 + 288));
    swift_errorRelease(*(void *)(v0 + 152));
    sub_100026BE8();
    return (*(uint64_t (**)(void))(v0 + 8))(0LL);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 152));
    sub_10001AB88();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100023630()
{
  return sub_100020908(v0, v1, v2);
}

uint64_t sub_100023664()
{
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v1 + 152);
  BOOL v3 = __OFADD__(v2, 1LL);
  uint64_t v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v1 + 152) = v4;
    uint64_t v5 = *(void *)(v0 + 280);
    sub_100026BE8();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
  }

  return result;
}

void (*sub_1000236B4(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_100026390(v6, a2, a3);
  return sub_100023720;
}

void sub_100023720(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40LL))(*a1, 0LL);
  sub_10000FFD8();
  sub_100026BC4(v1);
}

uint64_t sub_100023750()
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v0;
  return sub_10001CBC8((uint64_t)sub_100023764, v0);
}

uint64_t sub_100023764()
{
  if (*(uint64_t *)(*(void *)(v2 + 16) + 152LL) <= 0)
  {
    if (qword_100089FF0 != -1) {
      swift_once(&qword_100089FF0, sub_100021CAC);
    }
    uint64_t v11 = sub_10001030C();
    sub_100026A88(v11, (uint64_t)qword_10008B100);
    os_log_type_t v12 = sub_10001AD00();
    if (sub_10001AB10(v12))
    {
      uint64_t v13 = (_WORD *)sub_1000100B0(2LL);
      sub_100026D24(v13);
      sub_100026A48((void *)&_mh_execute_header, v14, v15, "dropping eager submit activity");
      sub_100010010(v1);
    }

    byte_10008B730 = 1;
    return (*(uint64_t (**)(void))(v2 + 8))();
  }

  else
  {
    if (qword_100089FF0 != -1) {
      swift_once(&qword_100089FF0, sub_100021CAC);
    }
    uint64_t v3 = sub_10001030C();
    sub_100026A88(v3, (uint64_t)qword_10008B100);
    os_log_type_t v4 = sub_10001AD00();
    if (sub_10001AB10(v4))
    {
      uint64_t v5 = (_WORD *)sub_1000100B0(2LL);
      sub_100026D24(v5);
      sub_100026A48((void *)&_mh_execute_header, v6, v7, "re-registering eager submit activity");
      sub_100010010(v1);
    }

    uint64_t v8 = *(void *)(v2 + 16);

    uint64_t v9 = *(void *)(v8 + 160);
    *(void *)(v2 + 24) = v9;
    return sub_100026A04((uint64_t)sub_1000238A8, v9, 0LL);
  }

uint64_t sub_1000238A8()
{
  return sub_10001ABB0(*(uint64_t (**)(void))(v0 + 8));
}

char *sub_1000238D0(char *result)
{
  uint64_t v2 = v1;
  uint64_t v3 = (uint64_t)result;
  uint64_t v4 = *(void *)&result[OBJC_IVAR____TtC13rtcreportingd7Session_hierarchyID + 8];
  if (v4)
  {
    uint64_t v5 = *(void *)&result[OBJC_IVAR____TtC13rtcreportingd7Session_hierarchyID];
    sub_1000101AC();
    uint64_t v6 = sub_100021D2C((uint64_t)v17);
    uint64_t v8 = sub_1000236B4(v16, v5, v4);
    if (*v7)
    {
      uint64_t v9 = v7;
      swift_retain(v3);
      uint64_t result = (char *)sub_1000266A8(v9, v3);
      uint64_t v10 = *(void *)(*v9 + 16);
      sub_1000285C0(result, v10);
    }

    ((void (*)(void *, void))v8)(v16, 0LL);
    sub_100006BBC();
    uint64_t result = (char *)((uint64_t (*)(_BYTE *, void))v6)(v17, 0LL);
  }

  if (*(_BYTE *)(v3 + 240) != 2)
  {
LABEL_9:
    uint64_t v14 = *(void *)(v3 + 192);
    unint64_t v15 = *(void *)(v3 + 200);
    sub_1000100D8();
    sub_100023D2C(v14, v15, 1);
    return (char *)sub_1000083D4();
  }

  uint64_t v11 = *(void *)(v2 + 152);
  BOOL v12 = __OFSUB__(v11, 1LL);
  uint64_t v13 = v11 - 1;
  if (!v12)
  {
    *(void *)(v2 + 152) = v13;
    goto LABEL_9;
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000239F0(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = (uint64_t *)(v2 + 120);
  sub_10001ABF4(v2 + 120, (uint64_t)v52, 33LL);
  sub_1000100D8();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + 120));
  uint64_t v9 = *(void *)(v2 + 120);
  uint64_t v51 = v9;
  *(void *)(v4 + 120) = 0x8000000000000000LL;
  unint64_t v10 = sub_100026BCC();
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v11 & 1) == 0;
  Swift::Int v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_22;
  }

  unint64_t v15 = v10;
  char v16 = v11;
  sub_10000534C(&qword_10008B328);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v14))
  {
LABEL_5:
    uint64_t v19 = *v7;
    *uint64_t v7 = v51;
    swift_bridgeObjectRelease(v19);
    uint64_t v20 = *v7;
    if ((v16 & 1) == 0)
    {
      sub_10003451C(v15, a1, a2, 0LL, *v7);
      sub_1000100D8();
    }

    uint64_t v21 = *(void *)(v20 + 56);
    uint64_t v22 = *(void *)(v21 + 8 * v15);
    BOOL v23 = __OFADD__(v22, 1LL);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      *(void *)(v21 + 8 * v15) = v24;
      swift_endAccess(v52);
      sub_1000083D4();
      int v25 = *(unsigned __int16 *)(v4 + 128);
      int v26 = (unsigned __int16)(v25 + 1);
      BOOL v3 = v26 != v25 + 1;
      if (v26 == v25 + 1) {
        LOWORD(v25) = v25 + 1;
      }
      *(_WORD *)(v4 + 128) = v25;
      if (qword_100089FF0 == -1)
      {
LABEL_11:
        uint64_t v27 = sub_10001030C();
        sub_10000D34C(v27, (uint64_t)qword_10008B100);
        sub_100026C4C();
        uint64_t v28 = swift_retain_n(v4, 4LL);
        char v29 = (void *)Logger.logObject.getter(v28);
        os_log_type_t v30 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled((os_log_t)v29, v30))
        {

          sub_100026CEC();
          swift_release_n(v4, 4LL);
          return !v3;
        }

        uint64_t v31 = sub_1000100B0(26LL);
        uint64_t v32 = sub_1000100B0(32LL);
        v52[0] = v32;
        *(_DWORD *)uint64_t v31 = 136446722;
        sub_1000100D8();
        uint64_t v33 = sub_100019964(a1, a2, v52);
        sub_100026C7C(v33, (uint64_t)v52, v34, v31 + 12, v35, v36, v37, v38, v33);
        sub_10001AA78(a2);
        *(_WORD *)(v31 + 12) = 2048;
        uint64_t v39 = *v7;
        if (*(void *)(*v7 + 16))
        {
          sub_1000100D8();
          sub_1000083B0();
          unint64_t v40 = sub_100026BCC();
          if ((v41 & 1) != 0)
          {
            uint64_t v42 = *(void *)(*(void *)(v39 + 56) + 8 * v40);
            sub_100006C04();
            sub_100010060(a2);
            sub_10000FFD8();
LABEL_19:
            uint64_t v51 = v42;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v31 + 14);
            sub_1000083D4();
            sub_100006C04();
            *(_WORD *)(v31 + 22) = 512;
            __int16 v43 = *(_WORD *)(v4 + 128);
            uint64_t v44 = sub_100006C04();
            LOWORD(v51) = v43;
            sub_100026C7C(v44, (uint64_t)&v51 + 2, v45, v31 + 26, v46, v47, v48, v49, v51);
            sub_100006C04();
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v29,  v30,  "registered use for session config for %{public}s, now %lld uses. Total Active Sessions: %hu",  (uint8_t *)v31,  0x1Au);
            sub_10001AA68(v32);
            sub_100010010(v32);
            sub_100010010(v31);

            return !v3;
          }

          sub_100006C04();
          sub_100010060(a2);
          sub_10000FFD8();
        }

        else
        {
          sub_1000083D4();
          sub_100006C04();
        }

        uint64_t v42 = 0LL;
        goto LABEL_19;
      }

LABEL_23:
      swift_once(&qword_100089FF0, sub_100021CAC);
      goto LABEL_11;
    }

  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  __break(1u);
}

  __break(1u);
}

  Swift::Int v14 = v93;
  if (((v9 >> 15) & 1) == 0) {
    goto LABEL_25;
  }
LABEL_24:
  sub_10000E894(v12, v10, v14);
LABEL_25:
  sub_100015624();
}

      uint64_t v9 = (v17 - 1) & v17;
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

      unint64_t v10 = (v18 - 1) & v18;
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

    unint64_t v10 = (v17 - 1) & v17;
  }

  char v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_35:
    uint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_37;
  }

  unint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
    BOOL v13 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    BOOL v13 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

    unint64_t v10 = (v17 - 1) & v17;
  }

  char v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_35:
    uint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_37;
  }

  unint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
    BOOL v13 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    BOOL v13 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

    unint64_t v10 = (v16 - 1) & v16;
    Swift::Int v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    char v18 = *(void *)(*(void *)(v4 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)(v9[5], v18);
    uint64_t v19 = -1LL << *((_BYTE *)v9 + 32);
    uint64_t v20 = result & ~v19;
    uint64_t v21 = v20 >> 6;
    if (((-1LL << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) == 0)
    {
      BOOL v23 = 0;
      uint64_t v24 = (unint64_t)(63 - v19) >> 6;
      while (++v21 != v24 || (v23 & 1) == 0)
      {
        int v25 = v21 == v24;
        if (v21 == v24) {
          uint64_t v21 = 0LL;
        }
        v23 |= v25;
        int v26 = *(void *)(v12 + 8 * v21);
        if (v26 != -1)
        {
          uint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    uint64_t v22 = __clz(__rbit64((-1LL << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    *(void *)(v9[6] + 8 * v22) = v18;
    ++v9[2];
    if (__OFSUB__(v5--, 1LL)) {
      goto LABEL_38;
    }
    if (!v5) {
      goto LABEL_35;
    }
  }

  unint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_35;
  }
  char v16 = a1[v17];
  if (v16)
  {
    char v11 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    char v11 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_35;
    }
    char v16 = a1[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

          uint64_t v9 = (v15 - 1) & v15;
          BOOL v13 = __clz(__rbit64(v15)) + (v16 << 6);
          uint64_t v4 = v16;
        }

        char v18 = *(void *)(*(void *)(a1 + 48) + 8 * v13);
        uint64_t v19 = static Hasher._hash(seed:_:)(*(void *)(v2 + 40), v18);
        uint64_t v20 = -1LL << *(_BYTE *)(v2 + 32);
        uint64_t v21 = v19 & ~v20;
      }

      while (((*(void *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) == 0);
      uint64_t v22 = *(void *)(v2 + 48);
      if (*(void *)(v22 + 8 * v21) == v18) {
        break;
      }
      while (1)
      {
        uint64_t v21 = (v21 + 1) & ~v20;
        if (((*(void *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) == 0) {
          break;
        }
        if (*(void *)(v22 + 8 * v21) == v18) {
          goto LABEL_28;
        }
      }
    }

LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  unint64_t v17 = sub_100026BCC();
  if ((v16 & 1) == (v18 & 1))
  {
    unint64_t v15 = v17;
    goto LABEL_5;
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  swift_bridgeObjectRelease(v13);
  if (((v9 >> 11) & 1) != 0)
  {
LABEL_13:
    sub_100006BFC();
    Swift::Int v14 = v93;
    if (((v9 >> 15) & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

  uint64_t v24 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  int v25 = (void *)(*(void *)(v24 + 48) + 16 * a3);
  *int v25 = a1;
  v25[1] = a2;
  int v26 = *(void *)(v24 + 16);
  uint64_t v27 = __OFADD__(v26, 1LL);
  uint64_t v28 = v26 + 1;
  if (v27) {
    __break(1u);
  }
  else {
    *(void *)(v24 + swift_weakDestroy(v0 + 16) = v28;
  }
}

void sub_100023D2C(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  uint64_t v9 = sub_10000534C((uint64_t *)&unk_10008C4A0);
  __chkstk_darwin(v9);
  char v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (uint64_t)(v3 + 15);
  sub_10001ABF4((uint64_t)(v3 + 15), (uint64_t)v71, 0LL);
  uint64_t v13 = v3[15];
  sub_1000083B8();
  sub_10001015C();
  uint64_t v14 = sub_10004F640(a1, a2, v13);
  os_log_type_t v16 = v15;
  swift_bridgeObjectRelease(v13);
  sub_100006AF0();
  if ((v16 & 1) != 0)
  {
    if (qword_100089FF0 != -1) {
      swift_once(&qword_100089FF0, sub_100021CAC);
    }
    uint64_t v29 = sub_10001030C();
    os_log_type_t v30 = (os_log_s *)sub_10000D34C(v29, (uint64_t)qword_10008B100);
    uint64_t v31 = sub_1000100D0(a2);
    Logger.logObject.getter(v31);
    os_log_type_t v32 = sub_10001AB78();
    if (os_log_type_enabled(v30, v32))
    {
      uint64_t v33 = (uint8_t *)sub_1000100B0(12LL);
      uint64_t v34 = sub_1000100B0(32LL);
      v70[0] = v34;
      *(_DWORD *)uint64_t v33 = 136446210;
      sub_1000083B8();
      uint64_t v67 = sub_100019964(a1, a2, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v33 + 4);
      sub_10001AA78(a2);
      sub_10001AA70( (void *)&_mh_execute_header,  v30,  v32,  "session config finished with no use count for %{public}s",  v33);
      sub_10001AA68(v34);
      uint64_t v35 = v34;
LABEL_10:
      sub_100010010(v35);
      sub_100010010((uint64_t)v33);
LABEL_19:

      return;
    }

uint64_t sub_1000243E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[14] = a5;
  v6[15] = a6;
  v6[13] = a4;
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
  v6[16] = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_100024440;
  return static Task<>.sleep(nanoseconds:)(10000000000LL);
}

uint64_t sub_100024440()
{
  uint64_t v3 = *(void *)(v2 + 128);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 136) = v0;
  swift_task_dealloc(v3);
  sub_10001AC0C();
  return sub_100020908(v5, v6, v7);
}

uint64_t sub_100024494( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, os_log_s *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22)
{
  a21 = v24;
  a22 = v25;
  a20 = v22;
  uint64_t v26 = (uint64_t)(v22 + 12);
  if (qword_100089FF0 != -1) {
    swift_once(&qword_100089FF0, sub_100021CAC);
  }
  uint64_t v27 = v22[15];
  uint64_t v28 = sub_10001030C();
  uint64_t v29 = (os_log_s *)sub_10000D34C(v28, (uint64_t)qword_10008B100);
  uint64_t v30 = sub_1000100D0(v27);
  Logger.logObject.getter(v30);
  os_log_type_t v31 = sub_100026BE0();
  BOOL v32 = sub_100026C08(v31);
  unint64_t v33 = v22[15];
  if (v32)
  {
    a10 = v29;
    uint64_t v34 = v22[14];
    a9 = v22 + 5;
    uint64_t v35 = (uint8_t *)sub_1000100B0(12LL);
    uint64_t v36 = sub_1000100B0(32LL);
    a11 = v36;
    *(_DWORD *)uint64_t v35 = 136446210;
    sub_100010270();
    uint64_t v37 = v34;
    uint64_t v26 = (uint64_t)(v22 + 12);
    v22[12] = sub_100019964(v37, v33, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v22 + 12, v22 + 13, v35 + 4);
    sub_10001AA78(v33);
    sub_10001AA70((void *)&_mh_execute_header, v29, v23, "eviction timer fired: %{public}s", v35);
    sub_10001AA68(v36);
    sub_100010010(v36);
    sub_100010010((uint64_t)v35);
  }

  else
  {
    sub_100010060(v22[15]);
  }

  uint64_t v38 = v22[13];
  sub_10001AC0C();
  sub_10001ABF4(v39, v40, v41);
  uint64_t v42 = *(void *)(v38 + 120);
  if (*(void *)(v42 + 16))
  {
    uint64_t v43 = v22[14];
    sub_1000083B8();
    sub_1000083B0();
    unint64_t v44 = sub_100026CD4(v43);
    if ((v45 & 1) != 0)
    {
      uint64_t v46 = *(void *)(*(void *)(v42 + 56) + 8 * v44);
      sub_10000FFD8();
      sub_100006BBC();
      if (v46)
      {
        sub_10001ABF4(v22[13] + 136LL, (uint64_t)(v22 + 8), 33LL);
        sub_100026ADC();
        sub_100026BB8();
        sub_10000FFD8();
        sub_100026AFC();
        return v47(v47, v48, v49, v50, v51, v52, v53, v54, a9, a10, a11, a12, a13, a14);
      }
    }

    else
    {
      sub_10000FFD8();
      sub_100006BBC();
    }
  }

  uint64_t v56 = sub_1000100D0(v22[15]);
  uint64_t v57 = v29;
  Logger.logObject.getter(v56);
  os_log_type_t v58 = sub_100026BE0();
  BOOL v59 = sub_100026C00(v57);
  unint64_t v60 = v22[15];
  if (v59)
  {
    uint64_t v61 = v22[14];
    uint64_t v62 = (uint8_t *)sub_1000100B0(12LL);
    uint64_t v63 = sub_1000100B0(32LL);
    a11 = v63;
    *(_DWORD *)uint64_t v62 = 136446210;
    swift_bridgeObjectRetain(v60);
    v22[11] = sub_100019964(v61, v60, &a11);
    sub_100026BAC((uint64_t)(v22 + 11), v26);
    sub_10001AA78(v60);
    sub_10001AA70((void *)&_mh_execute_header, v57, v58, "requesting eviction for %{public}s", v62);
    sub_10001AA68(v63);
    sub_100010010(v63);
    sub_100010010((uint64_t)v62);
  }

  else
  {
    sub_100010060(v22[15]);
  }

  BOOL v64 = (void *)swift_task_alloc(dword_10008AD5C);
  v22[18] = v64;
  *BOOL v64 = v22;
  v64[1] = sub_1000247B4;
  return sub_100026A9C(v22[14], v22[15]);
}

uint64_t sub_1000247B4()
{
  return sub_10001A9C0();
}

uint64_t sub_1000247EC()
{
  return sub_100026ACC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100024840()
{
  return sub_100026ACC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100024894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  return swift_task_switch(sub_1000248B0, a6, 0LL);
}

uint64_t sub_1000248B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22)
{
  a21 = v23;
  a22 = v24;
  a20 = v22;
  if (qword_100089FF0 != -1) {
    swift_once(&qword_100089FF0, sub_100021CAC);
  }
  uint64_t v25 = v22[4];
  uint64_t v26 = sub_10001030C();
  uint64_t v27 = (os_log_s *)sub_10000D34C(v26, (uint64_t)qword_10008B100);
  uint64_t v28 = sub_1000100D0(v25);
  Logger.logObject.getter(v28);
  os_log_type_t v29 = sub_100026BE0();
  BOOL v30 = sub_10001AB10(v29);
  unint64_t v31 = v22[4];
  if (v30)
  {
    uint64_t v32 = v22[3];
    unint64_t v33 = (uint8_t *)sub_1000100B0(12LL);
    uint64_t v34 = sub_1000100B0(32LL);
    a11 = v34;
    *(_DWORD *)unint64_t v33 = 136446210;
    sub_1000101AC();
    void v22[2] = sub_100019964(v32, v31, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v22 + 2, v22 + 3, v33 + 4);
    sub_10001AA78(v31);
    sub_10001AA70( (void *)&_mh_execute_header,  v27,  (os_log_type_t)v27,  "requesting immediate eviction for %{public}s",  v33);
    sub_10001AA68(v34);
    sub_100010010(v34);
    sub_100010010((uint64_t)v33);
  }

  else
  {
    sub_100010060(v22[4]);
  }

  uint64_t v35 = (void *)swift_task_alloc(dword_10008AD5C);
  v22[6] = v35;
  *uint64_t v35 = v22;
  v35[1] = sub_100024A2C;
  return sub_100026A9C(v22[3], v22[4]);
}

uint64_t sub_100024A2C()
{
  return sub_10001ABB0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100024A58(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(v4 + 136) = a2;
  *(void *)(v4 + 144) = v3;
  *(_DWORD *)(v4 + 208) = a3;
  *(void *)(v4 + 128) = a1;
  sub_10000534C(&qword_10008C540);
  *(void *)(v4 + 152) = sub_100026B60();
  *(void *)(v4 + 160) = sub_100026B60();
  uint64_t v5 = sub_100026D30();
  *(void *)(v4 + 168) = v5;
  *(void *)(v4 + 176) = sub_100008360(*(void *)(v5 - 8));
  sub_100026B34();
  return sub_100020908(v6, v7, v8);
}

uint64_t sub_100024ACC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, char a18, uint64_t a19)
{
  uint64_t v13 = *(void *)(v11 + 160);
  uint64_t v12 = *(void *)(v11 + 168);
  sub_10001ABF4(*(void *)(v11 + 144) + 168LL, v11 + 64, 33LL);
  sub_100033D5C(v13);
  swift_endAccess(v11 + 64);
  if (_s10RTCUtility9XPCObjectOwet_0(v13, 1LL, v12) == 1)
  {
    sub_100026114(*(void *)(v11 + 160));
  }

  else
  {
    uint64_t v14 = *(uint64_t **)(v11 + 176);
    sub_100026154(*(void *)(v11 + 160), (uint64_t)v14);
    uint64_t v16 = *v14;
    unint64_t v15 = v14[1];
    sub_1000083B8();
    char v17 = sub_1000239F0(v16, v15);
    sub_100006AF0();
    uint64_t v18 = *(void *)(v11 + 176);
    if ((v17 & 1) != 0)
    {
      uint64_t v19 = *(void *)(v11 + 168);
      uint64_t v21 = *(void *)(v11 + 144);
      uint64_t v20 = *(void *)(v11 + 152);
      uint64_t v22 = *(void *)(v18 + 16);
      uint64_t v23 = *(void *)(v18 + 24);
      uint64_t v24 = *(void *)(v18 + 32);
      uint64_t v25 = *(void *)(v18 + 40);
      *(void *)(v11 + swift_weakDestroy(v0 + 16) = v16;
      *(void *)(v11 + 24) = v15;
      *(void *)(v11 + 32) = v22;
      *(void *)(v11 + 40) = v23;
      *(void *)(v11 + 48) = v24;
      *(void *)(v11 + 56) = v25;
      char v26 = *(_BYTE *)(v18 + 72);
      sub_1000261D4(v18, v20);
      _s10RTCUtility9XPCObjectOwst_0(v20, 0LL, 1LL, v19);
      uint64_t v27 = type metadata accessor for Session(0LL);
      sub_10001CC14(v27);
      uint64_t v28 = dword_10008C53C;
      sub_1000083B8();
      swift_retain(v21);
      sub_100010270();
      swift_bridgeObjectRetain(v25);
      os_log_type_t v29 = (void *)swift_task_alloc(v28);
      *(void *)(v11 + 184) = v29;
      void *v29 = v11;
      v29[1] = sub_100024CA8;
      return sub_100051D10( *(_DWORD *)(v11 + 208),  *(void *)(v11 + 144),  (_OWORD *)(v11 + 16),  v26,  0LL,  0LL,  0LL,  0LL,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v37,  a17,  a18,  a19);
    }

    sub_100026198(v18);
  }

  sub_100026C88();
  sub_10001AB88();
  sub_10001AB08();
  return (*(uint64_t (**)(void))(v11 + 8))(0LL);
}

uint64_t sub_100024CA8()
{
  v2[24] = v1;
  swift_task_dealloc(v4);
  uint64_t v5 = v2[18];
  if (v1)
  {
    uint64_t v6 = sub_100024D58;
  }

  else
  {
    v2[25] = v0;
    uint64_t v6 = sub_100024D00;
  }

  return sub_100026A04((uint64_t)v6, v5, 0LL);
}

uint64_t sub_100024D00()
{
  uint64_t v1 = *(void *)(v0 + 200);
  sub_100026198(*(void *)(v0 + 176));
  uint64_t v2 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 176));
  sub_10001AB08();
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_100024D58( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unint64_t v15 = (uint64_t *)v14[22];
  uint64_t v16 = *v15;
  unint64_t v17 = v15[1];
  sub_1000100D8();
  sub_100023D2C(v16, v17, 0);
  sub_1000083D4();
  if (qword_100089FF0 != -1) {
    swift_once(&qword_100089FF0, sub_100021CAC);
  }
  uint64_t v18 = v14[24];
  uint64_t v19 = sub_10001030C();
  sub_10000D34C(v19, (uint64_t)qword_10008B100);
  swift_errorRetain(v18);
  uint64_t v20 = swift_errorRetain(v18);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.fault.getter();
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v24 = v14[24];
  uint64_t v25 = v14[22];
  if (v23)
  {
    a10 = v14[22];
    a9 = v14 + 15;
    char v26 = (uint8_t *)sub_1000100B0(12LL);
    a11 = sub_1000100B0(32LL);
    *(_DWORD *)char v26 = 136446210;
    sub_100026AC4(v24, (uint64_t)(v14 + 14));
    uint64_t v27 = Error.localizedDescription.getter(v14[12], v14[13]);
    v14[15] = sub_100026A5C(v27, v28, v29, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v14 + 15, v14 + 16, v26 + 4);
    sub_10000FFD8();
    sub_100026B40();
    sub_100026B40();
    sub_10001AA70((void *)&_mh_execute_header, v21, v22, "failed to rehydrate session: %{public}s", v26);
    sub_10001AA68(a11);
    sub_100010010(a11);
    sub_100010010((uint64_t)v26);

    sub_100026B40();
    uint64_t v31 = a10;
  }

  else
  {

    sub_100026B40();
    sub_100026B40();
    sub_100026B40();
    uint64_t v31 = v25;
  }

  sub_100026198(v31);
  sub_100026C88();
  sub_10001AB88();
  sub_10001AB08();
  sub_100026AFC();
  return v33(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_100024F2C()
{
  *(void *)(v1 + 56) = v0;
  return sub_10001CBC8((uint64_t)sub_100024F40, v0);
}

void sub_100024F40()
{
  uint64_t v1 = qword_1000933B0;
  *(void *)(v0 + 64) = qword_1000933B0;
  if (v1)
  {
    sub_100010324();
    uint64_t v2 = (void *)sub_100026B60();
    *(void *)(v0 + 72) = v2;
    sub_100026CA8(v2, (uint64_t)sub_100024F98);
    sub_100028CD8();
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100024F98()
{
  uint64_t v2 = *(void *)(v0 + 72);
  *(_BYTE *)(v0 + 192) = v3;
  *(void *)(v0 + 80) = v1;
  swift_task_dealloc(v2);
  if (v1)
  {
    uint64_t v4 = *(void *)(v0 + 56);
    uint64_t v5 = (void (*)(uint64_t))sub_100025460;
  }

  else
  {
    uint64_t v6 = *(void *)(v0 + 56);
    swift_release(*(void *)(v0 + 64));
    uint64_t v5 = sub_100025004;
    uint64_t v4 = v6;
  }

  return sub_100020908((uint64_t)v5, v4, 0LL);
}

void sub_100025004(uint64_t a1)
{
  int v4 = *(unsigned __int8 *)(v3 + 192);
  if (v4 == 2)
  {
    if (qword_100089FF0 != -1) {
      swift_once(&qword_100089FF0, sub_100021CAC);
    }
    uint64_t v5 = sub_10001030C();
    sub_100026A88(v5, (uint64_t)qword_10008B100);
    os_log_type_t v6 = sub_10001AB70();
    if (sub_10001AB10(v6))
    {
      uint64_t v7 = (_WORD *)sub_1000100B0(2LL);
      sub_100026D24(v7);
      sub_100026A48((void *)&_mh_execute_header, v8, v9, "resetting clientIDs due to missing lastDNU setting");
      sub_100010010(v2);
    }

    uint64_t v10 = qword_1000933B0;
    *(void *)(v3 + 136) = qword_1000933B0;
    if (v10)
    {
      sub_100010324();
      uint64_t v11 = (void *)sub_100026B60();
      *(void *)(v3 + 144) = v11;
      uint64_t v12 = sub_100025348;
LABEL_15:
      sub_100026CA8(v11, (uint64_t)v12);
      sub_100028E3C();
      return;
    }

    __break(1u);
  }

  else
  {
    int v13 = v4 & 1;
    if (v13 == DiagnosticLogSubmissionEnabled(a1))
    {
      (*(void (**)(void))(v3 + 8))();
      return;
    }

    if (qword_100089FF0 != -1) {
      swift_once(&qword_100089FF0, sub_100021CAC);
    }
    uint64_t v14 = sub_10001030C();
    sub_100026A88(v14, (uint64_t)qword_10008B100);
    os_log_type_t v15 = sub_10001AB70();
    if (sub_100026C00((os_log_s *)v1))
    {
      uint64_t v16 = sub_1000100B0(14LL);
      *(_DWORD *)uint64_t v16 = 67240448;
      *(_DWORD *)(v3 + 184) = v13;
      uint64_t v17 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 + 184, v3 + 188, v16 + 4);
      *(_WORD *)(v16 + 8) = 1026;
      *(_DWORD *)(v3 + 188) = DiagnosticLogSubmissionEnabled(v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 + 188, v3 + 192, v16 + 10);
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v1,  v15,  "DNU status changed (%{BOOL,public}d -> %{BOOL,public}d), resetting clientIDs",  (uint8_t *)v16,  0xEu);
      sub_100010010(v16);
    }

    uint64_t v18 = qword_1000933B0;
    *(void *)(v3 + 88) = qword_1000933B0;
    if (v18)
    {
      sub_100010324();
      uint64_t v11 = (void *)sub_100026B60();
      *(void *)(v3 + 96) = v11;
      uint64_t v12 = sub_100025230;
      goto LABEL_15;
    }
  }

  __break(1u);
}

uint64_t sub_100025230()
{
  v0[13] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    uint64_t v4 = v0[7];
    uint64_t v5 = (void (*)())sub_100025580;
  }

  else
  {
    uint64_t v6 = v0[7];
    swift_release(v0[11]);
    uint64_t v5 = sub_100025290;
    uint64_t v4 = v6;
  }

  return sub_100020908((uint64_t)v5, v4, 0LL);
}

void sub_100025290()
{
  uint64_t v1 = qword_1000933B0;
  *(void *)(v0 + 112) = qword_1000933B0;
  if (v1)
  {
    uint64_t v2 = sub_100010324();
    char v3 = DiagnosticLogSubmissionEnabled(v2);
    uint64_t v4 = (void *)swift_task_alloc(dword_10008B6DC);
    *(void *)(v0 + 120) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1000252F0;
    sub_100026B68(v3);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1000252F0()
{
  v0[16] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return sub_100020908((uint64_t)sub_1000256A0, v0[7], 0LL);
  }
  swift_release(v0[14]);
  return sub_100026B74(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100025348()
{
  v0[19] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    uint64_t v4 = v0[7];
    uint64_t v5 = (void (*)())sub_1000257C0;
  }

  else
  {
    uint64_t v6 = v0[7];
    swift_release(v0[17]);
    uint64_t v5 = sub_1000253A8;
    uint64_t v4 = v6;
  }

  return sub_100020908((uint64_t)v5, v4, 0LL);
}

void sub_1000253A8()
{
  uint64_t v1 = qword_1000933B0;
  *(void *)(v0 + 160) = qword_1000933B0;
  if (v1)
  {
    uint64_t v2 = sub_100010324();
    char v3 = DiagnosticLogSubmissionEnabled(v2);
    uint64_t v4 = (void *)swift_task_alloc(dword_10008B6DC);
    *(void *)(v0 + 168) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100025408;
    sub_100026B68(v3);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100025408()
{
  v0[22] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return sub_100020908((uint64_t)sub_1000258E0, v0[7], 0LL);
  }
  swift_release(v0[20]);
  return sub_100026B74(*(uint64_t (**)(void))(v2 + 8));
}

#error "1000254F8: call analysis failed (funcsize=67)"
#error "100025618: call analysis failed (funcsize=67)"
#error "100025738: call analysis failed (funcsize=67)"
#error "100025858: call analysis failed (funcsize=67)"
#error "100025978: call analysis failed (funcsize=67)"
void *sub_100025A00()
{
  void *v0;
  swift_release(v0[14]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[17]);
  swift_bridgeObjectRelease(v0[18]);
  swift_release(v0[20]);
  swift_bridgeObjectRelease(v0[21]);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100025A4C()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for SessionCoordinator()
{
  return objc_opt_self(&OBJC_CLASS____TtC13rtcreportingd18SessionCoordinator);
}

uint64_t initializeBufferWithCopyOfBuffer for SessionHierarchyItem(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

void *assignWithCopy for SessionHierarchyItem(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v3 = a2[2];
  uint64_t v4 = a1[2];
  a1[2] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for SessionHierarchyItem(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SessionHierarchyItem(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(_s10RTCUtility9XPCObjectOwst_0(v1, 0LL, 1LL, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(_s10RTCUtility9XPCObjectOwst_0(v1, 0LL, 1LL, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(_s10RTCUtility9XPCObjectOwst_0(v1, 0LL, 1LL, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SessionHierarchyItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + swift_weakDestroy(v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SessionHierarchyItem()
{
  return &type metadata for SessionHierarchyItem;
}

uint64_t sub_100025BC8( uint64_t a1, unsigned __int8 a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v60[3] = a4;
  if (a1 < 0)
  {
    char v45 = "Must take zero or more splits";
    uint64_t v46 = "Swift/Collection.swift";
    uint64_t v47 = 29LL;
    uint64_t v48 = 22LL;
    goto LABEL_42;
  }

  uint64_t v10 = swift_allocObject(&unk_100083C58, 24LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
  uint64_t v52 = v10 + 16;
  uint64_t v57 = swift_allocObject(&unk_100083C80, 24LL, 7LL);
  *(void *)(v57 + swift_weakDestroy(v0 + 16) = 15LL;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000LL) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000LL) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v33 = 7LL;
    if (((a6 >> 60) & ((a5 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v33 = 11LL;
    }
    sub_100026010(v33 | (v11 << 16), v57, a2 & 1, v10);
    swift_bridgeObjectRelease(a6);
    uint64_t v14 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain(v14);
    swift_release(v10);
    uint64_t v34 = v57;
LABEL_38:
    swift_release(v34);
    return (uint64_t)v14;
  }

  uint64_t v50 = v10;
  uint64_t v51 = a1;
  uint64_t v13 = 7LL;
  if (((a6 >> 60) & ((a5 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v13 = 11LL;
  }
  uint64_t v49 = v13 | (v12 << 16);
  unint64_t v58 = 4 * v12;
  uint64_t v14 = _swiftEmptyArrayStorage;
  unint64_t v15 = 15LL;
  unint64_t v16 = 15LL;
  unint64_t v17 = 15LL;
  while (1)
  {
    uint64_t v18 = String.subscript.getter(v15, a5, a6);
    uint64_t v20 = v19;
    v60[0] = v18;
    v60[1] = v19;
    char v21 = a3(v60);
    if (v6)
    {
      swift_release(v50);
      swift_release(v57);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(a6);
      return (uint64_t)v14;
    }

    char v22 = v21;
    swift_bridgeObjectRelease(v20);
    if ((v22 & 1) == 0)
    {
      unint64_t v15 = String.index(after:)(v15, a5, a6);
      goto LABEL_23;
    }

    int v23 = (v16 >> 14 == v15 >> 14) & a2;
    if (v23 != 1)
    {
      if (v15 >> 14 < v16 >> 14) {
        goto LABEL_40;
      }
      uint64_t v24 = String.subscript.getter(v16, v15, a5, a6);
      uint64_t v53 = v26;
      uint64_t v54 = v25;
      uint64_t v55 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      {
        sub_100005250();
        uint64_t v14 = v31;
      }

      unint64_t v28 = v14[2];
      if (v28 >= v14[3] >> 1)
      {
        sub_100005250();
        uint64_t v14 = v32;
      }

      v14[2] = v28 + 1;
      uint64_t v29 = &v14[4 * v28];
      v29[4] = v24;
      v29[5] = v55;
      v29[6] = v54;
      v29[7] = v53;
      *(void *)uint64_t v52 = v14;
    }

    uint64_t v30 = String.index(after:)(v15, a5, a6);
    unint64_t v15 = v30;
    *(void *)(v57 + swift_weakDestroy(v0 + 16) = v30;
    if ((v23 & 1) == 0 && v14[2] == v51) {
      break;
    }
    unint64_t v16 = v30;
    unint64_t v17 = v30;
LABEL_23:
    if (v58 == v15 >> 14) {
      goto LABEL_32;
    }
  }

  unint64_t v17 = v30;
  unint64_t v16 = v30;
LABEL_32:
  if (v58 == v16 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(a6);
LABEL_37:
    swift_bridgeObjectRetain(v14);
    swift_release(v50);
    uint64_t v34 = v57;
    goto LABEL_38;
  }

  if (v58 >= v17 >> 14)
  {
    uint64_t v35 = String.subscript.getter(v17, v49, a5, a6);
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    swift_bridgeObjectRelease(a6);
    sub_100033988();
    uint64_t v42 = *(void *)(*(void *)v52 + 16LL);
    sub_100033A00(v42);
    uint64_t v14 = *(void **)v52;
    v14[2] = v42 + 1;
    uint64_t v43 = &v14[4 * v42];
    v43[4] = v35;
    v43[5] = v37;
    v43[6] = v39;
    v43[7] = v41;
    *(void *)uint64_t v52 = v14;
    goto LABEL_37;
  }

LABEL_40:
  char v45 = "Range requires lowerBound <= upperBound";
  uint64_t v46 = "Swift/Range.swift";
  uint64_t v47 = 39LL;
  uint64_t v48 = 17LL;
LABEL_42:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v45, v47, 2LL, v46, v48);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_100026010(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    sub_100033988();
    uint64_t v14 = *(void *)(*(void *)(a4 + 16) + 16LL);
    sub_100033A00(v14);
    uint64_t v15 = *(void *)(a4 + 16);
    *(void *)(v15 + swift_weakDestroy(v0 + 16) = v14 + 1;
    unint64_t v16 = (void *)(v15 + 32 * v14);
    void v16[4] = v7;
    v16[5] = v9;
    v16[6] = v11;
    v16[7] = v13;
    return v5 ^ 1u;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/Range.swift",  17LL);
  __break(1u);
  return result;
}

uint64_t sub_100026114(uint64_t a1)
{
  uint64_t v2 = sub_10000534C(&qword_10008C540);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100026154(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CachedSession(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100026198(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CachedSession(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000261D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CachedSession(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100026218()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100026248()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  int v5 = (void *)swift_task_alloc(dword_10008B304);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  *int v5 = v1;
  v5[1] = sub_10001A170;
  v5[4] = v3;
  v5[5] = v4;
  v5[3] = v2;
  sub_100026B34();
  return sub_100026A04(v6, v7, v8);
}

uint64_t sub_1000262A8()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1000262D8()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  int v5 = (void *)swift_task_alloc(dword_10008B31C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  uint64_t v6 = sub_100026C24(v5);
  return sub_1000243E4(v6, v7, v8, v2, v3, v4);
}

uint64_t sub_100026354()
{
  return v0[1]();
}

void (*sub_100026390(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  v7[9] = sub_1000265BC(v7);
  v7[10] = sub_10002646C(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_100026420;
}

void sub_100026420(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72LL);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 80LL))(*(void *)a1 + 32LL, 0LL);
  sub_10000FFD8();
  v2(v1, 0LL);
  free(v1);
}

void (*sub_10002646C(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  int v5 = v4;
  uint64_t v10 = malloc(0x30uLL);
  *a1 = v10;
  void v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  uint64_t v11 = *v5;
  unint64_t v12 = sub_100033A58(a2, a3);
  *((_BYTE *)v10 + 40) = v13 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v13 & 1) == 0;
  Swift::Int v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v17 = v12;
  char v18 = v13;
  sub_10000534C(&qword_10008B9A0);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v16))
  {
    unint64_t v19 = sub_100033A58(a2, a3);
    if ((v18 & 1) == (v20 & 1))
    {
      unint64_t v17 = v19;
      goto LABEL_5;
    }

void sub_100026584(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_1000265E8(*a1, *((_BYTE *)*a1 + 40), (uint64_t *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2]);
  swift_bridgeObjectRelease(*v1);
  sub_100026BC4(v1);
}

uint64_t (*sub_1000265BC(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  void *v1 = 0x8000000000000000LL;
  return sub_1000265DC;
}

uint64_t sub_1000265DC(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

double sub_1000265E8(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *a1;
  if (*a1)
  {
    if ((a2 & 1) != 0)
    {
      *(void *)(*(void *)(*a3 + 56) + 8 * a4) = v8;
    }

    else
    {
      sub_10003451C(a4, a5, a6, v8, *a3);
      swift_bridgeObjectRetain(a6);
    }
  }

  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy(*(void *)(*a3 + 48) + 16 * a4, 1LL);
    uint64_t v9 = *a3;
    sub_10000534C(&qword_10008B330);
    _NativeDictionary._delete(at:)(a4, v9);
  }

  *(void *)&double result = swift_bridgeObjectRetain(v8).n128_u64[0];
  return result;
}

uint64_t sub_1000266A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 16);
  if (!v4)
  {
    unint64_t v6 = 0LL;
LABEL_29:
    swift_release(a2);
    return v6;
  }

  uint64_t v5 = 0LL;
  unint64_t v6 = 0LL;
  uint64_t v7 = *(void *)(a2 + 112);
  uint64_t v8 = *(void *)(a2 + 120);
  while (1)
  {
    uint64_t result = *(void *)(v3 + v5 + 40);
    uint64_t v10 = *(void *)(v3 + v5 + 48);
    if (result == v7 && v10 == v8) {
      break;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v7, v8, 0LL);
    if ((result & 1) != 0) {
      break;
    }
    ++v6;
    v5 += 24LL;
    if (v4 == v6)
    {
      unint64_t v6 = *(void *)(v3 + 16);
      goto LABEL_29;
    }
  }

  unint64_t v12 = v6 + 1;
  if (!__OFADD__(v6, 1LL))
  {
    unint64_t v13 = *(void *)(v3 + 16);
    while (v12 != v13)
    {
      if (v12 >= v13)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }

      uint64_t v14 = (void *)(v3 + v5);
      uint64_t result = *(void *)(v3 + v5 + 64);
      uint64_t v15 = *(void *)(v3 + v5 + 72);
      uint64_t v16 = *(void *)(a2 + 112);
      uint64_t v17 = *(void *)(a2 + 120);
      if (result != v16 || v15 != v17)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v15, v16, v17, 0LL);
        if ((result & 1) == 0)
        {
          if (v12 != v6)
          {
            if (v6 >= v13) {
              goto LABEL_32;
            }
            unint64_t v19 = (uint64_t *)(v3 + 32 + 24 * v6);
            uint64_t v20 = v19[2];
            uint64_t v30 = v19[1];
            uint64_t v31 = *v19;
            uint64_t v21 = v14[7];
            uint64_t v22 = v14[8];
            uint64_t v23 = v14[9];
            swift_bridgeObjectRetain(v20);
            swift_bridgeObjectRetain(v23);
            if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
            {
              sub_100028598(v3);
              uint64_t v3 = v29;
            }

            uint64_t v24 = (void *)(v3 + 24 * v6);
            uint64_t v25 = v24[6];
            v24[4] = v21;
            v24[5] = v22;
            v24[6] = v23;
            uint64_t result = swift_bridgeObjectRelease(v25);
            if (v12 >= *(void *)(v3 + 16)) {
              goto LABEL_33;
            }
            uint64_t v26 = (void *)(v3 + v5);
            uint64_t v27 = *(void *)(v3 + v5 + 72);
            v26[7] = v31;
            v26[8] = v30;
            v26[9] = v20;
            uint64_t result = swift_bridgeObjectRelease(v27);
            *a1 = v3;
          }

          if (__OFADD__(v6++, 1LL)) {
            goto LABEL_31;
          }
        }
      }

      ++v12;
      unint64_t v13 = *(void *)(v3 + 16);
      v5 += 24LL;
    }

    goto LABEL_29;
  }

LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_100026880()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000268A4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000268B4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000268D8(uint64_t a1)
{
  return sub_1000228D8(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000268E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000268F0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000268F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000534C(&qword_10008A8B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100026940()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100026968()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10008B344);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  sub_100026C24(v1);
  return sub_100022A48();
}

uint64_t sub_1000269C8()
{
  return swift_errorRelease(v0);
}

uint64_t sub_1000269D0(float a1)
{
  *uint64_t v3 = a1;
  return swift_getErrorValue(v1, v4, v2);
}

uint64_t sub_1000269EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v10 + 48) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a10, v10 + 56, v11);
}

uint64_t sub_100026A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

void sub_100026A14(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_100026A28(uint64_t a1, uint64_t a2)
{
  return swift_errorRetain(v2);
}

uint64_t sub_100026A40()
{
  return swift_errorRetain(v0);
}

void sub_100026A48(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_100026A5C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  return sub_100019964(a1, a2, (uint64_t *)va);
}

BOOL sub_100026A68(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_100026A78()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_100026A88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_10000D34C(a1, a2);
  return Logger.logObject.getter(v2);
}

uint64_t sub_100026A9C(uint64_t a1, uint64_t a2)
{
  return sub_10001C55C(a1, a2);
}

uint64_t sub_100026AB8()
{
  return Error.localizedDescription.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100026AC4(uint64_t a1, uint64_t a2)
{
  return swift_getErrorValue(a1, a2, v2);
}

uint64_t sub_100026ACC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100026ADC()
{
  return sub_100044DF0(v1, v0);
}

uint64_t sub_100026AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Dictionary.init(dictionaryLiteral:)(v3, v4, a3, v5);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100026B40()
{
  return swift_errorRelease(v0);
}

uint64_t sub_100026B48(uint64_t a1)
{
  return _s10RTCUtility9XPCObjectOwst_0(*(void *)(v1 - 192), 1LL, 1LL, a1);
}

uint64_t sub_100026B60()
{
  return swift_task_alloc(v0);
}

uint64_t sub_100026B68(char a1)
{
  return sub_100028F10(a1);
}

uint64_t sub_100026B74(uint64_t (*a1)(void))
{
  return a1();
}

void sub_100026B80(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void sub_100026B94(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100026BA0()
{
  return swift_retain_n(v0, 2LL);
}

uint64_t sub_100026BAC(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_100026BB8()
{
  return swift_endAccess(v0);
}

void sub_100026BC4(void *a1)
{
}

unint64_t sub_100026BCC()
{
  return sub_100033A58(v1, v0);
}

uint64_t sub_100026BD8()
{
  return static os_log_type_t.fault.getter();
}

uint64_t sub_100026BE0()
{
  return static os_log_type_t.debug.getter();
}

uint64_t sub_100026BE8()
{
  return swift_task_dealloc(*(void *)(v0 + 264));
}

uint64_t sub_100026BF0()
{
  return sub_100019964(v1, v0, (uint64_t *)(v2 - 168));
}

BOOL sub_100026C00(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

BOOL sub_100026C08(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

uint64_t sub_100026C24(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

  ;
}

uint64_t sub_100026C4C()
{
  return swift_bridgeObjectRetain_n(v0, 4LL);
}

void sub_100026C5C()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_100026C70(uint64_t a1)
{
  return swift_allocObject(a1, 64LL, 7LL);
}

uint64_t sub_100026C7C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, a2, v9);
}

uint64_t sub_100026C88()
{
  return swift_task_dealloc(*(void *)(v0 + 176));
}

uint64_t sub_100026C94(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return v1 - 144;
}

void *sub_100026CA8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *uint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_100026CB4()
{
  return Error.localizedDescription.getter(*(void *)(v0 + 72), *(void *)(v0 + 80));
}

  ;
}

unint64_t sub_100026CD4(uint64_t a1)
{
  return sub_100033A58(a1, v1);
}

uint64_t sub_100026CDC()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 200));
}

uint64_t sub_100026CE4()
{
  return swift_task_alloc(v0);
}

uint64_t sub_100026CEC()
{
  return swift_bridgeObjectRelease_n(v0, 4LL);
}

uint64_t sub_100026CF8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *v2;
  return swift_task_dealloc(a1);
}

void sub_100026D04()
{
}

void sub_100026D0C(char a1, uint64_t a2)
{
}

size_t sub_100026D18(uint64_t a1, int64_t a2)
{
  return sub_100057F84(0LL, a2, 0);
}

_WORD *sub_100026D24(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_100026D30()
{
  return type metadata accessor for CachedSession(0LL);
}

uint64_t sub_100026D38()
{
  uint64_t v0 = sub_10000534C(&qword_10008B410);
  uint64_t v1 = sub_10000534C(&qword_10008B418);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = swift_allocObject(v0, v5 + 13 * v3, v4 | 7);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_10006A910;
  uint64_t v7 = v6 + v5;
  uint64_t v8 = (_BYTE *)(v6 + v5 + *(int *)(v1 + 48));
  *(void *)(v6 + sub_10000E870(v4, *(void *)(v0 + 448), v5) = XPC_ACTIVITY_REPEATING;
  *uint64_t v8 = 1;
  uint64_t v9 = type metadata accessor for XPCObject(0LL);
  swift_storeEnumTagMultiPayload(v8, v9, 2LL);
  uint64_t v10 = (void *)(v7 + v3 + *(int *)(v1 + 48));
  *(void *)(v7 + sub_10000E894(v0[36], v0[56], v3) = XPC_ACTIVITY_DELAY;
  *uint64_t v10 = 86400LL;
  swift_storeEnumTagMultiPayload(v10, v9, 3LL);
  uint64_t v11 = (const char **)(v7 + 2 * v3);
  unint64_t v12 = (const char **)((char *)v11 + *(int *)(v1 + 48));
  *uint64_t v11 = XPC_ACTIVITY_GRACE_PERIOD;
  *unint64_t v12 = 43200LL;
  swift_storeEnumTagMultiPayload(v12, v9, 3LL);
  unint64_t v13 = (const char **)(v7 + 3 * v3);
  uint64_t v14 = (const char **)((char *)v13 + *(int *)(v1 + 48));
  *unint64_t v13 = XPC_ACTIVITY_PRIORITY;
  *uint64_t v14 = String.init(cString:)(XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  v14[1] = v15;
  swift_storeEnumTagMultiPayload(v14, v9, 8LL);
  uint64_t v16 = (const char **)(v7 + 4 * v3);
  uint64_t v17 = (char *)v16 + *(int *)(v1 + 48);
  *uint64_t v16 = XPC_ACTIVITY_ALLOW_BATTERY;
  *uint64_t v17 = 0;
  uint64_t result = swift_storeEnumTagMultiPayload(v17, v9, 2LL);
  if (!XPC_ACTIVITY_POWER_NAP)
  {
    __break(1u);
    goto LABEL_11;
  }

  unint64_t v19 = (void *)(v7 + 5 * v3);
  uint64_t v20 = (char *)v19 + *(int *)(v1 + 48);
  void *v19 = XPC_ACTIVITY_POWER_NAP;
  _BYTE *v20 = 1;
  uint64_t result = swift_storeEnumTagMultiPayload(v20, v9, 2LL);
  if (!XPC_ACTIVITY_RANDOM_INITIAL_DELAY)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v21 = (void *)(v7 + 6 * v3);
  uint64_t v22 = (void *)((char *)v21 + *(int *)(v1 + 48));
  *uint64_t v21 = XPC_ACTIVITY_RANDOM_INITIAL_DELAY;
  *uint64_t v22 = 43200LL;
  uint64_t result = swift_storeEnumTagMultiPayload(v22, v9, 4LL);
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v23 = (void *)(v7 - v3 + 8 * v3);
  uint64_t v24 = (char *)v23 + *(int *)(v1 + 48);
  *uint64_t v23 = XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY;
  *uint64_t v24 = 1;
  uint64_t result = swift_storeEnumTagMultiPayload(v24, v9, 2LL);
  if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v25 = (void *)(v7 + 8 * v3);
  uint64_t v26 = (char *)v25 + *(int *)(v1 + 48);
  *uint64_t v25 = XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY;
  *uint64_t v26 = 1;
  uint64_t result = swift_storeEnumTagMultiPayload(v26, v9, 2LL);
  if (!XPC_ACTIVITY_NETWORK_DOWNLOAD_SIZE)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v27 = (void *)(v7 + 9 * v3);
  unint64_t v28 = (void *)((char *)v27 + *(int *)(v1 + 48));
  *uint64_t v27 = XPC_ACTIVITY_NETWORK_DOWNLOAD_SIZE;
  *unint64_t v28 = 0x100000LL;
  uint64_t result = swift_storeEnumTagMultiPayload(v28, v9, 4LL);
  if (!XPC_ACTIVITY_EXPECTED_DURATION)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v29 = (void *)(v7 + 10 * v3);
  uint64_t v30 = (void *)((char *)v29 + *(int *)(v1 + 48));
  void *v29 = XPC_ACTIVITY_EXPECTED_DURATION;
  *uint64_t v30 = XPC_ACTIVITY_INTERVAL_1_MIN;
  uint64_t result = swift_storeEnumTagMultiPayload(v30, v9, 3LL);
  if (!XPC_ACTIVITY_GROUP_NAME)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v31 = (void *)(v7 + 11 * v3);
  uint64_t v32 = (void *)((char *)v31 + *(int *)(v1 + 48));
  *uint64_t v31 = XPC_ACTIVITY_GROUP_NAME;
  *uint64_t v32 = 0xD00000000000001DLL;
  v32[1] = 0x800000010006E1E0LL;
  uint64_t result = swift_storeEnumTagMultiPayload(v32, v9, 8LL);
  if (XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT)
  {
    uint64_t v33 = (void *)(v7 + 12 * v3);
    uint64_t v34 = (void *)((char *)v33 + *(int *)(v1 + 48));
    *uint64_t v33 = XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT;
    *uint64_t v34 = 1LL;
    swift_storeEnumTagMultiPayload(v34, v9, 4LL);
    uint64_t v35 = sub_10000534C(&qword_10008B420);
    unint64_t v36 = sub_100027258();
    uint64_t result = Dictionary.init(dictionaryLiteral:)(v6, v35, v9, v36);
    qword_1000932F0 = result;
    return result;
  }

uint64_t *sub_1000270F4()
{
  if (qword_100089FF8 != -1) {
    swift_once(&qword_100089FF8, sub_100026D38);
  }
  return &qword_1000932F0;
}

uint64_t sub_100027134()
{
  return sub_10002729C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100027140()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for RefreshStorebagsActivity()
{
  return objc_opt_self(&OBJC_CLASS____TtC13rtcreportingd24RefreshStorebagsActivity);
}

uint64_t sub_10002717C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10008B37C);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100013D04;
  return sub_100027134();
}

double sub_1000271C0()
{
  *(void *)&double result = swift_bridgeObjectRetain(qword_1000932F0).n128_u64[0];
  return result;
}

unint64_t sub_1000271DC()
{
  return 0xD000000000000011LL;
}

unint64_t sub_1000271F8(uint64_t a1)
{
  unint64_t result = sub_10002721C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10002721C()
{
  unint64_t result = qword_10008B408;
  if (!qword_10008B408)
  {
    uint64_t refreshed = type metadata accessor for RefreshStorebagsActivity();
    unint64_t result = swift_getWitnessTable(&unk_10006A958, refreshed);
    atomic_store(result, (unint64_t *)&qword_10008B408);
  }

  return result;
}

unint64_t sub_100027258()
{
  unint64_t result = qword_10008B428;
  if (!qword_10008B428)
  {
    uint64_t v1 = sub_10000E670(&qword_10008B420);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UnsafePointer<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10008B428);
  }

  return result;
}

uint64_t sub_10002729C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000272A4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000D940(v0, qword_10008B430);
  sub_10000D34C(v0, (uint64_t)qword_10008B430);
  return Logger.init(subsystem:category:)( 0xD000000000000017LL,  0x800000010006D6D0LL,  0x2D646E656B636162LL,  0xED000070756F7267LL);
}

Swift::Int sub_100027324()
{
  return Hasher._finalize()();
}

Swift::Int sub_100027368(uint64_t a1)
{
  return Hasher._finalize()();
}

char *sub_1000273A4(uint64_t a1)
{
  unint64_t result = (char *)sub_100028414(v1 + 112, a1);
  uint64_t v4 = *(void *)(*(void *)(v1 + 112) + 16LL);
  if (v4 < (uint64_t)result)
  {
    __break(1u);
  }

  else
  {
    sub_1000286C4(result, v4);
    return (char *)swift_endAccess(v5);
  }

  return result;
}

uint64_t sub_10002742C(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  v2[7] = *v1;
  return swift_task_switch(sub_10002744C, v1, 0LL);
}

uint64_t sub_10002744C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 48);
  sub_1000288D0(a1, v1 + 16);
  if (*(void *)(*(void *)(v2 + 112) + 16LL))
  {
    uint64_t v4 = *(void *)(v1 + 48);
    uint64_t v5 = *(void *)(v1 + 56);
    uint64_t v6 = *(void *)(v1 + 40);
    sub_10001A7C4( &qword_10008B538,  v3,  (uint64_t (*)(uint64_t))type metadata accessor for BackendGroup,  (uint64_t)&unk_10006A9C0);
    uint64_t v7 = (void *)swift_task_alloc(48LL);
    *(void *)(v1 + 64) = v7;
    v7[2] = v4;
    v7[3] = v6;
    v7[4] = v5;
    uint64_t v8 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
    *(void *)(v1 + 72) = v8;
    *uint64_t v8 = v1;
    v8[1] = sub_10002756C;
    return withTaskGroup<A, B>(of:returning:isolation:body:)();
  }

  else
  {
    unint64_t v10 = sub_1000281A0();
    uint64_t v11 = swift_allocError(&type metadata for BackendGroup.Error, v10, 0LL, 0LL);
    swift_willThrow(v11, v12, v13, v14, v15, v16, v17, v18);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

uint64_t sub_10002756C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  sub_10001A97C(*(void *)(*(void *)v0 + 72LL));
  sub_10001AB88();
  return swift_task_switch(sub_1000275BC, v1, 0LL);
}

uint64_t sub_1000275BC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000275C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[14] = a4;
  v5[15] = a5;
  v5[12] = a2;
  v5[13] = a3;
  unint64_t v7 = (*(void *)(*(void *)(sub_10000534C((uint64_t *)&unk_10008C4A0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[16] = swift_task_alloc(v7);
  v5[17] = swift_task_alloc(v7);
  return swift_task_switch(sub_10002763C, a3, 0LL);
}

uint64_t sub_10002763C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 104);
  sub_1000288D0(a1, v1 + 48);
  uint64_t v4 = *(void *)(v2 + 112);
  uint64_t v36 = *(void *)(v4 + 16);
  if (v36)
  {
    uint64_t v5 = type metadata accessor for TaskPriority(0LL);
    swift_bridgeObjectRetain(v4);
    uint64_t v6 = 0LL;
    uint64_t v35 = v5;
    uint64_t v34 = v4;
    do
    {
      uint64_t v8 = *(void *)(v1 + 128);
      uint64_t v7 = *(void *)(v1 + 136);
      uint64_t v10 = *(void *)(v1 + 112);
      uint64_t v9 = *(void *)(v1 + 120);
      uint64_t v11 = *(void *)(v1 + 104);
      __int128 v37 = *(_OWORD *)(v4 + 16 * v6 + 32);
      _s10RTCUtility9XPCObjectOwst_0(v7, 1LL, 1LL, v5);
      uint64_t v12 = swift_allocObject(&unk_100083DA0, 72LL, 7LL);
      *(void *)(v12 + swift_weakDestroy(v0 + 16) = 0LL;
      uint64_t v13 = (void *)(v12 + 16);
      *(void *)(v12 + 24) = 0LL;
      *(_OWORD *)(v12 + 32) = v37;
      *(void *)(v12 + 48) = v10;
      *(void *)(v12 + 56) = v11;
      *(void *)(v12 + 64) = v9;
      sub_100028338(v7, v8);
      uint64_t v14 = v5;
      int v15 = _s10RTCUtility9XPCObjectOwet_0(v8, 1LL, v5);
      swift_unknownObjectRetain_n(v37, 2LL);
      swift_bridgeObjectRetain(v10);
      uint64_t v16 = swift_retain(v11);
      if (v15 == 1)
      {
        sub_10001A294(*(void *)(v1 + 128), (uint64_t *)&unk_10008C4A0);
        uint64_t v17 = 0LL;
      }

      else
      {
        unsigned __int8 v18 = TaskPriority.rawValue.getter(v16);
        sub_10002890C(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8LL));
        uint64_t v17 = v18;
      }

      uint64_t v19 = *v13;
      if (*v13)
      {
        uint64_t ObjectType = swift_getObjectType(*v13);
        swift_unknownObjectRetain(v19);
        uint64_t v21 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType);
        uint64_t v23 = v22;
        swift_unknownObjectRelease(v19);
      }

      else
      {
        uint64_t v21 = 0LL;
        uint64_t v23 = 0LL;
      }

      uint64_t v4 = v34;
      uint64_t v24 = **(void **)(v1 + 96);
      uint64_t v25 = swift_allocObject(&unk_100083DC8, 32LL, 7LL);
      *(void *)(v25 + swift_weakDestroy(v0 + 16) = &unk_10008B568;
      *(void *)(v25 + 24) = v12;
      uint64_t v26 = v23 | v21;
      if (v23 | v21)
      {
        uint64_t v26 = v1 + 16;
        *(void *)(v1 + swift_weakDestroy(v0 + 16) = 0LL;
        *(void *)(v1 + 24) = 0LL;
        *(void *)(v1 + 32) = v21;
        *(void *)(v1 + 40) = v23;
      }

      ++v6;
      uint64_t v27 = *(void *)(v1 + 136);
      *(void *)(v1 + 72) = 1LL;
      *(void *)(v1 + 80) = v26;
      *(void *)(v1 + 88) = v24;
      uint64_t v28 = swift_task_create(v17 | 0x3100, v1 + 72, (char *)&type metadata for () + 8, &unk_10008B570, v25);
      swift_unknownObjectRelease(v37);
      swift_release(v28);
      sub_10001A294(v27, (uint64_t *)&unk_10008C4A0);
      uint64_t v5 = v35;
    }

    while (v36 != v6);
    swift_bridgeObjectRelease(v34);
  }

  uint64_t v29 = *(void *)(v1 + 104);
  uint64_t v30 = sub_10001A7C4( &qword_10008B538,  v3,  (uint64_t (*)(uint64_t))type metadata accessor for BackendGroup,  (uint64_t)&unk_10006A9C0);
  uint64_t v31 = (void *)swift_task_alloc(async function pointer to TaskGroup.awaitAllRemainingTasks(isolation:)[1]);
  *(void *)(v1 + 144) = v31;
  uint64_t v32 = sub_10000534C(&qword_10008B578);
  *uint64_t v31 = v1;
  v31[1] = sub_10002791C;
  return TaskGroup.awaitAllRemainingTasks(isolation:)(v29, v30, v32);
}

uint64_t sub_10002791C()
{
  return v0[1]();
}

uint64_t sub_100027964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[15] = a5;
  v7[16] = a7;
  v7[14] = a4;
  uint64_t v11 = sub_10000534C(&qword_10008B580);
  v7[17] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for CocoaError(0LL);
  v7[18] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v7[19] = v13;
  v7[20] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for URLError.Code(0LL);
  v7[21] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v7[22] = v15;
  unint64_t v16 = (*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[23] = swift_task_alloc(v16);
  v7[24] = swift_task_alloc(v16);
  uint64_t v17 = sub_10000534C(&qword_10008B588);
  v7[25] = swift_task_alloc((*(void *)(*(void *)(v17 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for URLError(0LL);
  v7[26] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v7[27] = v19;
  v7[28] = swift_task_alloc((*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t ObjectType = swift_getObjectType(a4);
  uint64_t v21 = *(int **)(a5 + 24);
  uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v21 + *v21);
  uint64_t v22 = (void *)swift_task_alloc(v21[1]);
  v7[29] = v22;
  *uint64_t v22 = v7;
  v22[1] = sub_100027AC4;
  return v24(a6, ObjectType, a5);
}

uint64_t sub_100027AC4()
{
  uint64_t v2 = *(void *)(*v1 + 232);
  uint64_t v3 = *v1;
  *(void *)(v3 + 240) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_100027BEC, 0LL, 0LL);
  }
  swift_task_dealloc(*(void *)(v3 + 224));
  sub_10001AB88();
  sub_10001AB08();
  sub_10001AB28();
  sub_10001AB38();
  sub_10001AAF0();
  return sub_1000288A4(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_100027B64()
{
  return swift_task_switch(sub_100027BA4, 0LL, 0LL);
}

uint64_t sub_100027BA4()
{
  return sub_1000288A4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100027BEC()
{
  uint64_t v1 = *(void *)(v0 + 240);
  *(void *)(v0 + 80) = v1;
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 144);
  swift_errorRetain(v1);
  uint64_t v4 = sub_10000534C(&qword_10008A8A8);
  uint64_t v5 = swift_dynamicCast(v2, v0 + 80, v4, v3, 6LL);
  if ((v5 & 1) != 0)
  {
    uint64_t v9 = *(void *)(v0 + 152);
    uint64_t v8 = *(void *)(v0 + 160);
    uint64_t v11 = *(void *)(v0 + 136);
    uint64_t v10 = *(void *)(v0 + 144);
    _s10RTCUtility9XPCObjectOwst_0(v11, 0LL, 1LL, v10);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v8, v11, v10);
    LOBYTE(v11) = CocoaError.isCoderError.getter(v12);
    sub_10002890C(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
    if ((v11 & 1) != 0) {
      goto LABEL_7;
    }
  }

  else
  {
    uint64_t v13 = *(void *)(v0 + 136);
    sub_1000288E8(v5, v6, v7, *(void *)(v0 + 144));
    sub_10001A294(v13, &qword_10008B580);
  }

  uint64_t v14 = *(void *)(v0 + 240);
  uint64_t v16 = *(void *)(v0 + 200);
  uint64_t v15 = *(void *)(v0 + 208);
  *(void *)(v0 + 56) = v14;
  swift_errorRetain(v14);
  uint64_t v17 = swift_dynamicCast(v16, v0 + 56, v4, v15, 6LL);
  if ((v17 & 1) != 0)
  {
    uint64_t v20 = *(void *)(v0 + 216);
    uint64_t v21 = *(void *)(v0 + 224);
    uint64_t v51 = v20;
    uint64_t v22 = *(void *)(v0 + 200);
    uint64_t v23 = *(void *)(v0 + 208);
    uint64_t v25 = *(void *)(v0 + 184);
    uint64_t v24 = *(void *)(v0 + 192);
    uint64_t v26 = *(void *)(v0 + 168);
    uint64_t v52 = *(void *)(v0 + 176);
    _s10RTCUtility9XPCObjectOwst_0(v22, 0LL, 1LL, v23);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v21, v22, v23);
    uint64_t v27 = sub_10001A7C4( &qword_10008B590,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for URLError,  (uint64_t)&protocol conformance descriptor for URLError);
    uint64_t v28 = _BridgedStoredNSError.code.getter(v23, v27);
    static URLError.Code.cancelled.getter(v28);
    sub_10001A7C4( &qword_10008B598,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for URLError.Code,  (uint64_t)&protocol conformance descriptor for URLError.Code);
    sub_100028900();
    sub_100028900();
    uint64_t v30 = *(void *)(v0 + 96);
    uint64_t v29 = *(void *)(v0 + 104);
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
    v31(v25, v26);
    v31(v24, v26);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v21, v23);
    if (v30 == v29)
    {
LABEL_7:
      swift_errorRelease(*(void *)(v0 + 240));
      sub_1000288B8();
      sub_10001AB88();
      sub_10001AB08();
      sub_10001AB28();
      sub_10001AB38();
      sub_10001AAF0();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

  else
  {
    uint64_t v33 = *(void *)(v0 + 200);
    sub_1000288E8(v17, v18, v19, *(void *)(v0 + 208));
    sub_10001A294(v33, &qword_10008B588);
  }

  if (qword_10008A000 != -1) {
    swift_once(&qword_10008A000, sub_1000272A4);
  }
  uint64_t v34 = *(void *)(v0 + 240);
  uint64_t v35 = type metadata accessor for Logger(0LL);
  sub_10000D34C(v35, (uint64_t)qword_10008B430);
  swift_errorRetain(v34);
  sub_1000288F8();
  swift_errorRetain(v34);
  uint64_t v36 = sub_1000288F8();
  __int128 v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.error.getter();
  BOOL v39 = os_log_type_enabled(v37, v38);
  uint64_t v40 = *(void *)(v0 + 240);
  if (v39)
  {
    __int128 v50 = *(_OWORD *)(v0 + 112);
    uint64_t v41 = swift_slowAlloc(22LL, -1LL);
    uint64_t v42 = swift_slowAlloc(64LL, -1LL);
    uint64_t v53 = v42;
    *(_DWORD *)uint64_t v41 = 136446466;
    *(_OWORD *)(v0 + 40) = v50;
    sub_1000288F8();
    uint64_t v43 = sub_10000534C(&qword_10008A588);
    uint64_t v44 = String.init<A>(describing:)(v0 + 40, v43);
    unint64_t v46 = v45;
    *(void *)(v0 + 64) = sub_100019964(v44, v45, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v41 + 4);
    swift_unknownObjectRelease_n(v50, 2LL);
    swift_bridgeObjectRelease(v46);
    *(_WORD *)(v41 + 12) = 2082;
    swift_getErrorValue(v40, v0 + 72, v0 + 16);
    uint64_t v47 = Error.localizedDescription.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
    unint64_t v49 = v48;
    *(void *)(v0 + 88) = sub_100019964(v47, v48, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v41 + 14);
    swift_bridgeObjectRelease(v49);
    sub_1000288E0();
    sub_1000288E0();
    _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "disabling backend '%{public}s' which returned error: %{public}s",  (uint8_t *)v41,  0x16u);
    swift_arrayDestroy(v42, 2LL);
    sub_100010010(v42);
    sub_100010010(v41);
  }

  else
  {
    swift_unknownObjectRelease_n(*(void *)(v0 + 112), 2LL);
    sub_1000288E0();
    sub_1000288E0();
  }

  return swift_task_switch(sub_100027B64, *(void *)(v0 + 128), 0LL);
}

uint64_t sub_100028070()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for BackendGroup()
{
  return objc_opt_self(&OBJC_CLASS____TtC13rtcreportingd12BackendGroup);
}

uint64_t sub_1000280B4(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_10008B474);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100028100;
  return sub_10002742C(a1);
}

uint64_t sub_100028100()
{
  return sub_10001ABB0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100028124(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc(dword_10008B544);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v9;
  void *v9 = v3;
  v9[1] = sub_10001F6F4;
  return sub_1000275C8(a1, a2, v6, v7, v8);
}

unint64_t sub_1000281A0()
{
  unint64_t result = qword_10008B550;
  if (!qword_10008B550)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006AA58, &type metadata for BackendGroup.Error);
    atomic_store(result, &qword_10008B550);
  }

  return result;
}

uint64_t sub_1000281DC(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100028240;
  return v6(a1);
}

uint64_t sub_100028240()
{
  return sub_10001ABB0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100028268()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_1000282A4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc(dword_10008B55C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_100020734;
  return sub_100027964(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100028338(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000534C((uint64_t *)&unk_10008C4A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100028380()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000283A4(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_10008B564);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100028100;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10008B560 + dword_10008B560))(a1, v4);
}

uint64_t sub_100028414(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)result;
  unint64_t v4 = *(void *)(*(void *)result + 16LL);
  if (!v4)
  {
    unint64_t v7 = 0LL;
LABEL_7:
    swift_unknownObjectRelease(a2);
    return v7;
  }

  uint64_t v5 = (void *)result;
  uint64_t v6 = 0LL;
  unint64_t v7 = 0LL;
  while (*(void *)(v3 + v6 + 32) != a2)
  {
    ++v7;
    v6 += 16LL;
    if (v4 == v7)
    {
      unint64_t v7 = *(void *)(*(void *)result + 16LL);
      goto LABEL_7;
    }
  }

  unint64_t v8 = v7 + 1;
  if (!__OFADD__(v7, 1LL))
  {
    while (v8 != v4)
    {
      if (v8 >= v4)
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }

      uint64_t v9 = *(void *)(v3 + v6 + 48);
      if (v9 != a2)
      {
        if (v8 != v7)
        {
          if (v7 >= v4) {
            goto LABEL_23;
          }
          uint64_t v10 = *(void *)(v3 + v6 + 56);
          __int128 v16 = *(_OWORD *)(v3 + 32 + 16 * v7);
          swift_unknownObjectRetain(*(void *)(v3 + 32 + 16 * v7));
          swift_unknownObjectRetain(v9);
          if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
          {
            sub_1000285AC();
            uint64_t v3 = v15;
          }

          uint64_t v11 = v3 + 16 * v7;
          uint64_t v12 = *(void *)(v11 + 32);
          *(void *)(v11 + 32) = v9;
          *(void *)(v11 + 40) = v10;
          unint64_t result = swift_unknownObjectRelease(v12);
          if (v8 >= *(void *)(v3 + 16)) {
            goto LABEL_24;
          }
          uint64_t v13 = *(void *)(v3 + v6 + 48);
          *(_OWORD *)(v3 + v6 + 48) = v16;
          unint64_t result = swift_unknownObjectRelease(v13);
          *uint64_t v5 = v3;
        }

        if (__OFADD__(v7++, 1LL)) {
          goto LABEL_22;
        }
        unint64_t v4 = *(void *)(v3 + 16);
      }

      ++v8;
      v6 += 16LL;
    }

    goto LABEL_7;
  }

LABEL_25:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    uint64_t v13 = (v18 - 1) & v18;
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v18 - 1) & v18;
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  uint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    uint64_t v10 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    uint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v18 - 1) & v18;
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_100028584()
{
  return sub_100004F28();
}

void sub_100028598(uint64_t a1)
{
}

void sub_1000285AC()
{
}

char *sub_1000285C0(char *result, uint64_t a2)
{
  if (((unint64_t)result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v6 = result;
  uint64_t v7 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  unint64_t v8 = &result[-a2];
  if (__OFSUB__(0LL, v7))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      uint64_t v11 = (uint64_t)&v8[v5];
    }
    else {
      uint64_t v11 = v5;
    }
    sub_1000051A4(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    uint64_t v4 = v12;
  }

  uint64_t v13 = (char *)(v4 + 32 + 24LL * (void)v6);
  unint64_t result = (char *)swift_arrayDestroy(v13, v7);
  if (!v7) {
    goto LABEL_16;
  }
  uint64_t v14 = *(void *)(v4 + 16);
  if (__OFSUB__(v14, a2)) {
    goto LABEL_22;
  }
  unint64_t result = sub_100056770((char *)(v4 + 32 + 24 * a2), v14 - a2, v13);
  uint64_t v15 = *(void *)(v4 + 16);
  BOOL v16 = __OFADD__(v15, v8);
  uint64_t v17 = v15 - v7;
  if (!v16)
  {
    *(void *)(v4 + swift_weakDestroy(v0 + 16) = v17;
LABEL_16:
    *uint64_t v2 = v4;
    return result;
  }

char *sub_1000286C4(char *result, uint64_t a2)
{
  if (((unint64_t)result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16LL);
  if (v5 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v6 = result;
  uint64_t v7 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  unint64_t v8 = &result[-a2];
  if (__OFSUB__(0LL, v7))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (__OFADD__(v5, v8))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (!swift_isUniquelyReferenced_nonNull_native(*v2) || v5 - v7 > *(void *)(v4 + 24) >> 1)
  {
    sub_1000050E0();
    uint64_t v4 = v9;
  }

  uint64_t v10 = (char *)(v4 + 32 + 16LL * (void)v6);
  sub_10000534C(&qword_10008A588);
  unint64_t result = (char *)swift_arrayDestroy(v10, v7);
  if (!v7) {
    goto LABEL_13;
  }
  uint64_t v11 = *(void *)(v4 + 16);
  if (__OFSUB__(v11, a2)) {
    goto LABEL_19;
  }
  unint64_t result = sub_1000564E8((char *)(v4 + 32 + 16 * a2), v11 - a2, v10);
  uint64_t v12 = *(void *)(v4 + 16);
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 - v7;
  if (!v13)
  {
    *(void *)(v4 + swift_weakDestroy(v0 + 16) = v14;
LABEL_13:
    *uint64_t v2 = v4;
    return result;
  }

uint64_t storeEnumTagSinglePayload for BackendGroup.Error(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(sub_100026CF8(v2[30], v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100028808 + 4 * byte_10006A980[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100028828 + 4 * byte_10006A985[v4]))();
  }
}

_BYTE *sub_100028808(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100028828(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100028830(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100028838(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100028840(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100028848(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BackendGroup.Error()
{
  return &type metadata for BackendGroup.Error;
}

unint64_t sub_100028868()
{
  unint64_t result = qword_10008B5A0;
  if (!qword_10008B5A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006AA30, &type metadata for BackendGroup.Error);
    atomic_store(result, (unint64_t *)&qword_10008B5A0);
  }

  return result;
}

uint64_t sub_1000288A4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000288B8()
{
  return swift_task_dealloc(*(void *)(v0 + 224));
}

uint64_t sub_1000288D0(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(v2 + 112, a2, 0LL, 0LL);
}

uint64_t sub_1000288E0()
{
  return swift_errorRelease(v0);
}

uint64_t sub_1000288E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s10RTCUtility9XPCObjectOwst_0(v4, 1LL, 1LL, a4);
}

uint64_t sub_1000288F8()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_100028900()
{
  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_10002890C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_100028918(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (*(_BYTE *)(v3 + 24) == 1)
  {
    unint64_t v5 = sub_1000047F8();
    uint64_t v6 = swift_allocError(&unk_100082340, v5, 0LL, 0LL);
    *(_DWORD *)uint64_t v7 = 1;
    *(void *)(v7 + 8) = 0xD00000000000001DLL;
    *(void *)(v7 + swift_weakDestroy(v0 + 16) = 0x800000010006D380LL;
    return swift_willThrow(v6, v7, v8, v9, v10, v11, v12, v13);
  }

  else
  {
    uint64_t result = sub_100003B34(a1, a2);
    if (!v4)
    {
      uint64_t v16 = result;
      a3();
      return swift_release(v16);
    }
  }

  return result;
}

uint64_t sub_1000289DC(void (*a1)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v4 = type metadata accessor for SQLiteDB.Transaction();
  uint64_t v5 = swift_allocObject(v4, 25LL, 7LL);
  *(_BYTE *)(v5 + 24) = 0;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v1;
  swift_retain(v1);
  sub_100003CDC(0xD000000000000011LL, 0x800000010006D240LL);
  if (v2) {
    return swift_release(v5);
  }
  a1(&v7, v5);
  if ((*(_BYTE *)(v5 + 24) & 1) == 0) {
    sub_100003CDC(0x54494D4D4F43LL, 0xE600000000000000LL);
  }
  swift_release(v5);
  return v7;
}

uint64_t sub_100028ADC(uint64_t a1)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_10001CBC8((uint64_t)sub_100028AF0, v1);
}

uint64_t sub_100028AF0()
{
  return sub_10001A9C0();
}

uint64_t sub_100028B1C()
{
  unint64_t v1 = sub_10002C8B8(163LL);
  uint64_t v6 = sub_100004104(v1, v2, v3, v4, v5);
  return sub_10002C748((uint64_t)v6, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100028B70()
{
  *(void *)(v1 + 56) = v0;
  return sub_10001CBC8((uint64_t)sub_100028B84, v0);
}

uint64_t sub_100028B84()
{
  uint64_t v1 = *(void *)(v0[7] + 112LL);
  v0[8] = v1;
  void v0[9] = 0LL;
  return sub_10001CBC8((uint64_t)sub_100028B9C, v1);
}

uint64_t sub_100028B9C()
{
  uint64_t v3 = sub_10002C8A8();
  uint64_t v4 = sub_10002C8D4(v3);
  sub_10002C83C(v4);
  sub_10002C7EC((uint64_t)"BEGIN TRANSACTION");
  if (v1)
  {
    sub_100006C04();
    uint64_t v5 = (uint64_t (*)(void))sub_10002C79C();
    return sub_10002C770(v5);
  }

  sub_10002AFDC(v0, v2 + 6);
  if ((*(_BYTE *)(v0 + 24) & 1) == 0) {
    sub_10002C7C8();
  }
  sub_100006C04();
  if (v2[6] != 5)
  {
    uint64_t v5 = (uint64_t (*)(void))sub_10002C7E0();
    return sub_10002C770(v5);
  }

  void v2[9] = 0LL;
  return sub_10002C788((uint64_t)sub_100028B9C, v2[8], 0LL);
}

uint64_t sub_100028C44(uint64_t a1)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_10001CBC8((uint64_t)sub_100028C58, v1);
}

uint64_t sub_100028C58()
{
  return sub_10001A9C0();
}

uint64_t sub_100028C84()
{
  unint64_t v1 = sub_10002C8B8(155LL);
  uint64_t v6 = sub_100004104(v1, v2, v3, v4, v5);
  return sub_10002C748((uint64_t)v6, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100028CD8()
{
  *(void *)(v1 + 24) = v0;
  uint64_t v2 = (void *)swift_task_alloc(dword_10008B6FC);
  *(void *)(v1 + 32) = v2;
  uint64_t v3 = sub_10002C7A8(v2, (uint64_t)sub_100028D1C);
  return sub_10002A030(v3, v4);
}

uint64_t sub_100028D1C(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = v7;
  sub_100026B94(&v7);
  *(void *)(v4 + 40) = v1;
  swift_task_dealloc(v5);
  if (v1) {
    return sub_10002C73C((uint64_t)sub_100028D94, *(void *)(v4 + 24), 0LL);
  }
  else {
    return ((uint64_t (*)(BOOL))v2[1])(a1 != 0);
  }
}

uint64_t sub_100028D94()
{
  uint64_t v1 = *(void *)(v0 + 40);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  swift_errorRetain(v1);
  uint64_t v2 = sub_10000534C(&qword_10008A8A8);
  if (!swift_dynamicCast(v0 + 48, v0 + 16, v2, &unk_1000822C8, 0LL) || *(_BYTE *)(v0 + 48))
  {
    swift_errorRelease(*(void *)(v0 + 16));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 40));
    swift_errorRelease(*(void *)(v0 + 16));
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(2LL);
  }

uint64_t sub_100028E3C()
{
  *(void *)(v1 + 56) = v0;
  return sub_10001CBC8((uint64_t)sub_100028E50, v0);
}

uint64_t sub_100028E50()
{
  uint64_t v1 = *(void *)(v0[7] + 112LL);
  v0[8] = v1;
  void v0[9] = 0LL;
  return sub_10001CBC8((uint64_t)sub_100028E68, v1);
}

uint64_t sub_100028E68()
{
  uint64_t v3 = sub_10002C8A8();
  uint64_t v4 = sub_10002C8D4(v3);
  sub_10002C83C(v4);
  sub_10002C7EC((uint64_t)"BEGIN TRANSACTION");
  if (v1)
  {
    sub_100006C04();
    uint64_t v5 = (uint64_t (*)(void))sub_10002C79C();
    return sub_10002C770(v5);
  }

  sub_10002C1C0(v0, v2 + 6);
  if ((*(_BYTE *)(v0 + 24) & 1) == 0) {
    sub_10002C7C8();
  }
  sub_100006C04();
  if (v2[6] != 50)
  {
    uint64_t v5 = (uint64_t (*)(void))sub_10002C7E0();
    return sub_10002C770(v5);
  }

  void v2[9] = 0LL;
  return sub_10002C788((uint64_t)sub_100028E68, v2[8], 0LL);
}

uint64_t sub_100028F10(char a1)
{
  uint64_t v2 = a1 & 1;
  uint64_t v3 = (void *)swift_task_alloc(dword_10008B6E4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  uint64_t v4 = sub_10002C7A8(v3, (uint64_t)sub_100028F58);
  return sub_10002A208(v4, v5, v2);
}

uint64_t sub_100028F58()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return sub_10001ABB0(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100028F98@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v54 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v5 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v53 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10000534C(&qword_10008AB30);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v50 - v15;
  if ((a1 & 1) == 0)
  {
    uint64_t v50 = a2;
    uint64_t v51 = v5;
    id v52 = [(id)objc_opt_self(NSFileManager) defaultManager];
    uint64_t v17 = NSHomeDirectory();
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v20 = v19;

    URL.init(fileURLWithPath:isDirectory:)(v18, v20, 1LL);
    swift_bridgeObjectRelease(v20);
    sub_100006BD4();
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000032LL, v21, 1LL);
    sub_10002C8E4((uint64_t)v14);
    uint64_t v22 = sub_10000534C(&qword_10008AB38);
    uint64_t inited = swift_initStackObject(v22, v56);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100069580;
    *(void *)(inited + 32) = NSURLIsDirectoryKey;
    uint64_t v24 = NSURLIsDirectoryKey;
    sub_100063888(inited);
    uint64_t v26 = v25;
    URL.resourceValues(forKeys:)();
    if (v2)
    {
      swift_errorRelease(v2);
      swift_bridgeObjectRelease(v26);
      sub_10002C888((uint64_t)v9, 1LL);
    }

    else
    {
      swift_bridgeObjectRelease(v26);
      sub_10002C888((uint64_t)v9, 0LL);
      uint64_t v29 = _s10RTCUtility9XPCObjectOwet_0((uint64_t)v9, 1LL, v11);
      if ((_DWORD)v29 != 1)
      {
        char v48 = URLResourceValues.isDirectory.getter(v29);
        (*(void (**)(char *, uint64_t))(v51 + 8))(v9, v11);
        uint64_t v30 = v52;
        if ((v48 & 1) != 0)
        {
LABEL_11:
          uint64_t v49 = v50;
          URL.appendingPathComponent(_:isDirectory:)(0x62642E6568636163LL, 0xE800000000000000LL, 0LL);

          sub_10002C8E4((uint64_t)v16);
          uint64_t v27 = v49;
          uint64_t v28 = 0LL;
          return _s10RTCUtility9XPCObjectOwst_0(v27, v28, 1LL, v10);
        }

LABEL_7:
        URL._bridgeToObjectiveC()(v31);
        uint64_t v33 = v32;
        id v55 = 0LL;
        unsigned int v34 = [v30 createDirectoryAtURL:v32 withIntermediateDirectories:1 attributes:0 error:&v55];

        id v35 = v55;
        if (!v34)
        {
          id v38 = v55;
          _convertNSErrorToError(_:)(v35);

          swift_willThrow(v39, v40, v41, v42, v43, v44, v45, v46);
          return sub_10002C8E4((uint64_t)v16);
        }

        id v36 = v55;
        __int128 v37 = v53;
        URLResourceValues.init()(v36);
        URLResourceValues.isExcludedFromBackup.setter(1LL);
        URL.setResourceValues(_:)(v37);
        sub_10002C864();
        goto LABEL_11;
      }
    }

    uint64_t v30 = v52;
    sub_10002C4D8((uint64_t)v9);
    goto LABEL_7;
  }

  uint64_t v27 = a2;
  uint64_t v28 = 1LL;
  return _s10RTCUtility9XPCObjectOwst_0(v27, v28, 1LL, v10);
}

BOOL sub_10002935C(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_10002936C(uint64_t a1, char a2)
{
}

Swift::Int sub_100029390(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_1000293D4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10002935C(*a1, *a2);
}

Swift::Int sub_1000293E0()
{
  return sub_100029390(*v0);
}

void sub_1000293E8(uint64_t a1)
{
}

uint64_t sub_1000293F0()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000D940(v0, qword_10008B5A8);
  sub_10000D34C(v0, (uint64_t)qword_10008B5A8);
  return Logger.init(subsystem:category:)( 0x726F706572637472LL,  0xED000064676E6974LL,  0x686361636B736964LL,  0xE900000000000065LL);
}

uint64_t sub_100029470()
{
  if (qword_10008A080 != -1) {
    swift_once(&qword_10008A080, sub_10004D6A0);
  }
  if (byte_1000933D8) {
    return 0x140000000LL;
  }
  else {
    return 3221225472LL;
  }
}

uint64_t sub_1000294C4(char a1)
{
  uint64_t v3 = v2;
  *(void *)(v2 + 88) = v1;
  uint64_t v4 = (void *)(v2 + 88);
  char v64 = a1 & 1;
  uint64_t v5 = sub_10000534C(&qword_10008AB30);
  uint64_t v62 = sub_10002C850(v5);
  v4[1] = v62;
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v4[2] = v8;
  type metadata accessor for SQLiteDB.Location(0LL);
  uint64_t v9 = sub_10002C8DC();
  v4[3] = v9;
  uint64_t v10 = sub_10002C8DC();
  v4[4] = v10;
  uint64_t v11 = sub_10002C8DC();
  v4[5] = v11;
  swift_defaultActor_initialize(v1);
  sub_100028F98(v64, v11);
  uint64_t v59 = (uint64_t)v4;
  uint64_t v12 = v3;
  uint64_t v60 = v8;
  uint64_t v61 = v1;
  sub_10002C518(v11, v10, type metadata accessor for SQLiteDB.Location);
  if (_s10RTCUtility9XPCObjectOwet_0(v10, 1LL, v6) == 1)
  {
    sub_10002C55C(v10, type metadata accessor for SQLiteDB.Location);
    uint64_t v13 = v1;
LABEL_6:
    uint64_t v20 = v9;
LABEL_7:
    sub_10002C518(v11, v20, type metadata accessor for SQLiteDB.Location);
    uint64_t v21 = type metadata accessor for SQLiteDB();
    swift_allocObject(v21, 120LL, 15LL);
    *(void *)(v13 + 112) = sub_100003D98(v20);
    uint64_t v23 = (void *)swift_task_alloc(dword_10008B71C);
    *(void *)(v3 + 136) = v23;
    *uint64_t v23 = v3;
    v23[1] = sub_100029AA0;
    uint64_t v24 = sub_10002C818();
    return sub_10002A11C(v24, v25);
  }

  uint64_t v57 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v8, v10, v6);
  uint64_t v14 = sub_10000534C(&qword_10008AB38);
  uint64_t v15 = sub_10002C8D4(v14);
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_100069580;
  *(void *)(v15 + 32) = NSURLFileSizeKey;
  uint64_t v16 = NSURLFileSizeKey;
  sub_100063888(v15);
  uint64_t v18 = v17;
  URL.resourceValues(forKeys:)();
  uint64_t v13 = v61;
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = type metadata accessor for URLResourceValues(0LL);
  _s10RTCUtility9XPCObjectOwst_0(v62, 0LL, 1LL, v19);
  if (_s10RTCUtility9XPCObjectOwet_0(v62, 1LL, v19) == 1)
  {
    sub_10002C4D8(v62);
LABEL_5:
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v57);
    goto LABEL_6;
  }

  uint64_t v58 = URLResourceValues.fileSize.getter();
  char v28 = v27;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8LL))(v62, v19);
  if ((v28 & 1) != 0 || sub_100029470() >= v58) {
    goto LABEL_5;
  }
  uint64_t v63 = (uint64_t *)(v59 - 16);
  if (qword_10008A0A0 != -1) {
    swift_once(&qword_10008A0A0, sub_10004D880);
  }
  if ((byte_1000933EA & 1) != 0)
  {
    if (qword_10008A008 != -1) {
      swift_once(&qword_10008A008, sub_1000293F0);
    }
    uint64_t v29 = sub_10001030C();
    uint64_t v30 = (os_log_s *)sub_100026A88(v29, (uint64_t)qword_10008B5A8);
    os_log_type_t v31 = static os_log_type_t.error.getter();
    uint64_t v20 = v9;
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = sub_1000100B0(22LL);
      *(_DWORD *)uint64_t v32 = 134349312;
      *uint64_t v63 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v63, v59 - 8, v32 + 4);
      *(_WORD *)(v32 + 12) = 2050;
      *(void *)(v59 - 8) = sub_100029470();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v59 - 8, v59, v32 + 14);
      sub_10001AA00( (void *)&_mh_execute_header,  v30,  v31,  "cache size %{public}ld exceeded maximum %{public}ld - cache delete overridden",  (uint8_t *)v32);
      sub_100010010(v32);
    }

    sub_10002C878(v33, v34, v35, v36, v37, v38, v39, v40, v57, v58, v59, v60);
    goto LABEL_7;
  }

  if (qword_10008A008 != -1) {
    swift_once(&qword_10008A008, sub_1000293F0);
  }
  uint64_t v41 = sub_10001030C();
  uint64_t v42 = (os_log_s *)sub_100026A88(v41, (uint64_t)qword_10008B5A8);
  os_log_type_t v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = sub_1000100B0(22LL);
    *(_DWORD *)uint64_t v44 = 134349312;
    *(void *)(v59 - 32) = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v59 - 32, v59 - 24, v44 + 4);
    *(_WORD *)(v44 + 12) = 2050;
    *(void *)(v59 - 24) = sub_100029470();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v59 - 24, v63, v44 + 14);
    sub_10001AA00( (void *)&_mh_execute_header,  v42,  v43,  "cache size %{public}ld exceeded maximum %{public}ld - deleting cache",  (uint8_t *)v44);
    uint64_t v45 = v44;
    uint64_t v3 = v12;
    sub_100010010(v45);
  }

  unint64_t v46 = sub_100004870();
  uint64_t v47 = sub_100006A70((uint64_t)&type metadata for DiskCacheError, v46);
  uint64_t v49 = sub_10002C804(v47, v48);
  sub_10002C878(v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60);
  sub_10002C55C(v11, type metadata accessor for SQLiteDB.Location);
  swift_defaultActor_destroy(v61);
  swift_deallocPartialClassInstance(v61);
  uint64_t v22 = *(void *)(v3 + 104);
  swift_task_dealloc(*(void *)(v3 + 128));
  sub_10001AB88();
  sub_10001AB08();
  swift_task_dealloc(v22);
  sub_10001AB38();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100029AA0(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = v7;
  sub_100026B94(&v7);
  *(void *)(v4 + 144) = v1;
  swift_task_dealloc(v5);
  if (!v1) {
    *(void *)(v4 + 152) = a1;
  }
  return sub_10001A974();
}

uint64_t sub_100029B10()
{
  uint64_t v1 = *(void *)(v0 + 152);
  if (v1 > 5)
  {
    sub_10002C55C(*(void *)(v0 + 128), type metadata accessor for SQLiteDB.Location);
    sub_10001AB88();
    sub_10001AB08();
    sub_10001AB28();
    sub_10001AB38();
    sub_10001AAF0();
    return sub_10002C77C(*(void *)(v0 + 88), *(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    uint64_t v2 = (void *)swift_task_alloc(dword_10008B724);
    *(void *)(v0 + 160) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100029C18;
    return sub_100029D64(v1);
  }

uint64_t sub_100029BC4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10008B724);
  *(void *)(v0 + 160) = v1;
  void *v1 = v0;
  v1[1] = sub_100029C18;
  return sub_100029D64(0LL);
}

uint64_t sub_100029C18()
{
  uint64_t v6 = *(void **)v1;
  uint64_t v2 = v6;
  sub_100026B94(&v6);
  v2[21] = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2[11] + 112LL);
    v2[22] = v4;
    swift_retain(v4);
    sub_100026B34();
    return sub_10001A974();
  }

  else
  {
    sub_10002C55C(v2[16], type metadata accessor for SQLiteDB.Location);
    sub_10001AB88();
    sub_10001AB08();
    sub_10001AB28();
    sub_10001AB38();
    sub_10001AAF0();
    return (*(uint64_t (**)(void))(v1 + 8))(v2[11]);
  }

uint64_t sub_100029CDC()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 88);
  sub_100003134();
  uint64_t v3 = sub_100006C04();
  swift_willThrow(v3, v4, v5, v6, v7, v8, v9, v10);
  swift_release(v2);
  sub_10002C55C(v1, type metadata accessor for SQLiteDB.Location);
  swift_task_dealloc(*(void *)(v0 + 128));
  sub_10001AB08();
  sub_10001AB28();
  sub_10001AB38();
  sub_10001AAF0();
  return sub_10002C770(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100029D64(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return swift_task_switch(sub_100029D7C, v1, 0LL);
}

uint64_t sub_100029D7C()
{
  if (*(void *)(v1 + 24))
  {
    if (qword_10008A008 != -1) {
      swift_once(&qword_10008A008, sub_1000293F0);
    }
    uint64_t v2 = sub_10001030C();
    uint64_t v3 = (os_log_s *)sub_100026A88(v2, (uint64_t)qword_10008B5A8);
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (sub_10001AB10(v4))
    {
      uint64_t v5 = (uint8_t *)sub_1000100B0(2LL);
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  v0,  "unsupported prior database version - deleting disk cache",  v5,  2u);
      sub_100010010((uint64_t)v5);
    }

    unint64_t v6 = sub_100004870();
    uint64_t v7 = sub_100006A70((uint64_t)&type metadata for DiskCacheError, v6);
    sub_10002C804(v7, v8);
    return sub_10002C764(*(uint64_t (**)(void))(v1 + 8));
  }

  else
  {
    uint64_t v10 = *(void *)(*(void *)(v1 + 32) + 112LL);
    *(void *)(v1 + 40) = v10;
    return sub_10002C73C((uint64_t)sub_100029E70, v10, 0LL);
  }

uint64_t sub_100029E70()
{
  unint64_t v2 = sub_10002C8B8(1174LL);
  sub_100003CDC(v2, v3);
  if (v0)
  {
    os_log_type_t v4 = (uint64_t (*)(void))sub_10002C79C();
    return sub_10002C764(v4);
  }

  else
  {
    unint64_t v6 = (void *)swift_task_alloc(dword_10008B6E4);
    *(void *)(v1 + 48) = v6;
    *unint64_t v6 = v1;
    v6[1] = sub_100029EF4;
    uint64_t v7 = sub_10002C818();
    return sub_10002A208(v7, v8, 6LL);
  }

uint64_t sub_100029EF4()
{
  uint64_t v4 = *v1;
  sub_100026B94(&v4);
  swift_task_dealloc(v2);
  if (v0) {
    return sub_100026B74((uint64_t (*)(void))v1[1]);
  }
  else {
    return sub_10001A974();
  }
}

uint64_t sub_100029F4C()
{
  if (qword_10008A008 != -1) {
    swift_once(&qword_10008A008, sub_1000293F0);
  }
  uint64_t v2 = sub_10001030C();
  uint64_t v3 = (os_log_s *)sub_100026A88(v2, (uint64_t)qword_10008B5A8);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (sub_10001AB10(v4))
  {
    uint64_t v5 = (uint8_t *)sub_1000100B0(12LL);
    *(_DWORD *)uint64_t v5 = 134217984;
    *(void *)(v1 + swift_weakDestroy(v0 + 16) = 6LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v5 + 4);
    _os_log_impl((void *)&_mh_execute_header, v3, v0, "initialized disk cache with version %lld", v5, 0xCu);
    sub_100010010((uint64_t)v5);
  }

  unint64_t v6 = (uint64_t (*)(void))sub_10002C7E0();
  return sub_10002C770(v6);
}

uint64_t sub_10002A030(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(sub_10002A04C, v2, 0LL);
}

uint64_t sub_10002A04C()
{
  return sub_10001A9C0();
}

uint64_t sub_10002A078()
{
  uint64_t v2 = sub_10002C758(37LL, 0x800000010006E840LL);
  if (v0)
  {
    swift_bridgeObjectRelease(*(void *)(v1 + 24));
    uint64_t v5 = (uint64_t (*)(void))sub_10002C79C();
    return sub_10002C770(v5);
  }

  else
  {
    uint64_t v3 = *(void *)(v1 + 24);
    uint64_t v4 = sub_10002A3C0(v2, *(void *)(v1 + 16), v3, (uint64_t (*)(uint64_t))sub_1000036D0);
    sub_10001020C();
    swift_bridgeObjectRelease(v3);
    return sub_10002C77C(v4, *(uint64_t (**)(void))(v1 + 8));
  }

uint64_t sub_10002A11C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(sub_10002A138, v2, 0LL);
}

uint64_t sub_10002A138()
{
  return sub_10001A9C0();
}

uint64_t sub_10002A164()
{
  uint64_t v2 = sub_10002C758(37LL, 0x800000010006E840LL);
  if (v0)
  {
    swift_bridgeObjectRelease(*(void *)(v1 + 24));
    uint64_t v5 = (uint64_t (*)(void))sub_10002C79C();
    return sub_10002C770(v5);
  }

  else
  {
    uint64_t v3 = *(void *)(v1 + 24);
    uint64_t v4 = sub_10002A3C0(v2, *(void *)(v1 + 16), v3, (uint64_t (*)(uint64_t))sub_1000036EC);
    sub_10001020C();
    swift_bridgeObjectRelease(v3);
    return sub_10002C77C(v4, *(uint64_t (**)(void))(v1 + 8));
  }

uint64_t sub_10002A208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_10002A224, v3, 0LL);
}

uint64_t sub_10002A224()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + 112LL);
  *(void *)(v0 + 48) = v1;
  return sub_10001CBC8((uint64_t)sub_10002A23C, v1);
}

uint64_t sub_10002A23C()
{
  uint64_t v3 = sub_10002C758(96LL, v2);
  if (v0)
  {
    v1[7] = v0;
    uint64_t v4 = v1[5];
    uint64_t v5 = sub_10002A2B8;
  }

  else
  {
    sub_10002A2C4(v3, v1[2], v1[3], v1[4]);
    sub_10001020C();
    uint64_t v4 = v1[5];
    uint64_t v5 = sub_10002C738;
  }

  return sub_10002C73C((uint64_t)v5, v4, 0LL);
}

uint64_t sub_10002A2B8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002A2C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000534C(&qword_10008A568);
  uint64_t inited = swift_initStackObject(v8, &v12);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100069590;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = &off_100082198;
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 40) = a3;
  *(void *)(inited + 96) = &type metadata for Int64;
  *(void *)(inited + 104) = &off_100082158;
  *(void *)(inited + 72) = a4;
  swift_bridgeObjectRetain(a3);
  sub_1000039C8(inited);
  if (v4)
  {
    swift_setDeallocating(inited);
    return sub_10002C378();
  }

  else
  {
    swift_setDeallocating(inited);
    sub_10002C378();
    do
    {
      uint64_t v11 = sub_1000031C0();
      uint64_t result = swift_release(v11);
    }

    while (v11);
  }

  return result;
}

uint64_t sub_10002A3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v9 = sub_10000534C(&qword_10008A568);
  uint64_t inited = swift_initStackObject(v9, v12);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100069580;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = &off_100082198;
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 40) = a3;
  swift_bridgeObjectRetain(a3);
  sub_1000039C8(inited);
  swift_setDeallocating(inited);
  if (v4) {
    return sub_10002C378();
  }
  sub_10002C378();
  return a4(a1);
}

uint64_t sub_10002A498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = type metadata accessor for String.Encoding(0LL);
  void v4[9] = sub_10002C850(v5);
  sub_100026B34();
  return sub_10001A9C0();
}

uint64_t sub_10002A4D8()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  uint64_t v3 = JSONEncoder.init()();
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  *(void *)(v0 + 80) = v3;
  swift_bridgeObjectRetain(v1);
  uint64_t v4 = sub_10000534C((uint64_t *)&unk_10008B930);
  unint64_t v5 = sub_100015444();
  uint64_t v6 = dispatch thunk of JSONEncoder.encode<A>(_:)(v0 + 16, v4, v5);
  unint64_t v8 = v7;
  *(void *)(v0 + 88) = 0LL;
  *(void *)(v0 + 96) = v6;
  *(void *)(v0 + 104) = v7;
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  if (sub_10002C8EC() <= 0x400000)
  {
    uint64_t v14 = *(void *)(v0 + 72);
    static String.Encoding.utf8.getter();
    uint64_t result = String.init(data:encoding:)(v6, v8, v14);
    *(void *)(v0 + 112) = result;
    *(void *)(v0 + 120) = v16;
    if (v16)
    {
      uint64_t v17 = *(void *)(*(void *)(v0 + 64) + 112LL);
      *(void *)(v0 + 128) = v17;
      return swift_task_switch(sub_10002A748, v17, 0LL);
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    if (qword_10008A008 != -1) {
      swift_once(&qword_10008A008, sub_1000293F0);
    }
    uint64_t v9 = sub_10001030C();
    sub_10000D34C(v9, (uint64_t)qword_10008B5A8);
    uint64_t v10 = sub_10000D8FC(v6, v8);
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = sub_1000100B0(22LL);
      *(_DWORD *)uint64_t v13 = 134349312;
      *(void *)(v0 + 24) = sub_10002C8EC();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v13 + 4);
      sub_100015674();
      *(_WORD *)(v13 + 12) = 2050;
      *(void *)(v0 + 32) = 0x400000LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v13 + 14);
      sub_10001AA00( (void *)&_mh_execute_header,  v11,  v12,  "event too large: (%{public}ld > %{public}lld",  (uint8_t *)v13);
      sub_100010010(v13);
    }

    else
    {
      sub_100015674();
    }

    unint64_t v18 = sub_100004870();
    uint64_t v19 = sub_100006A70((uint64_t)&type metadata for DiskCacheError, v18);
    _BYTE *v20 = 0;
    swift_willThrow(v19, v20, v21, v22, v23, v24, v25, v26);
    sub_100015674();
    sub_100006C04();
    swift_task_dealloc(*(void *)(v0 + 72));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  return result;
}

uint64_t sub_10002A748()
{
  uint64_t v1 = v0[11];
  sub_100006BD4();
  uint64_t v3 = sub_100003B34(0xD00000000000003BLL, v2);
  if (v1)
  {
    v0[17] = v1;
    uint64_t v8 = v0[8];
    unint64_t v7 = sub_10002A818;
  }

  else
  {
    sub_10002A860(v3, v0[5], v0[6], v0[7], v0[14], v0[15]);
    uint64_t v5 = v0[15];
    uint64_t v6 = v0[8];
    sub_10001020C();
    swift_bridgeObjectRelease(v5);
    unint64_t v7 = sub_10002A7E4;
    uint64_t v8 = v6;
  }

  return sub_10002C73C((uint64_t)v7, v8, 0LL);
}

uint64_t sub_10002A7E4()
{
  uint64_t v1 = (uint64_t (*)(void))sub_10002C7E0();
  return sub_100026B74(v1);
}

uint64_t sub_10002A818()
{
  uint64_t v1 = *(void *)(v0 + 120);
  sub_100004C44(*(void *)(v0 + 96), *(void *)(v0 + 104));
  sub_100006C04();
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(*(void *)(v0 + 72));
  return sub_100026B74(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10002A860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_10000534C(&qword_10008A568);
  uint64_t inited = swift_initStackObject(v11, &v15);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100069590;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = &off_100082198;
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 40) = a3;
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 104) = &off_100082198;
  *(void *)(inited + 72) = a5;
  *(void *)(inited + 80) = a6;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a6);
  sub_1000039C8(inited);
  if (v6)
  {
    swift_setDeallocating(inited);
    return sub_10002C378();
  }

  else
  {
    swift_setDeallocating(inited);
    sub_10002C378();
    do
    {
      uint64_t v14 = sub_1000031C0();
      uint64_t result = swift_release(v14);
    }

    while (v14);
  }

  return result;
}

uint64_t sub_10002A960(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 56) = a3;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a1;
  return sub_10001CBC8((uint64_t)sub_10002A97C, v3);
}

uint64_t sub_10002A97C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 112LL);
  *(void *)(v0 + 40) = v1;
  return sub_10001CBC8((uint64_t)sub_10002A994, v1);
}

uint64_t sub_10002A994()
{
  uint64_t v3 = sub_10002C758(66LL, v2);
  if (v0)
  {
    *(void *)(v1 + 48) = v0;
    uint64_t v4 = *(void *)(v1 + 32);
    uint64_t v5 = sub_10002AA14;
  }

  else
  {
    sub_10002AA20(v3, *(_BYTE *)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24));
    sub_10001020C();
    uint64_t v4 = *(void *)(v1 + 32);
    uint64_t v5 = sub_10002AA10;
  }

  return sub_10002C73C((uint64_t)v5, v4, 0LL);
}

uint64_t sub_10002AA14()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002AA20(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000534C(&qword_10008A568);
  uint64_t inited = swift_initStackObject(v8, &v12);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100069590;
  *(void *)(inited + 56) = &type metadata for Int64;
  *(void *)(inited + 64) = &off_100082158;
  *(void *)(inited + 32) = a2 & 1;
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 104) = &off_100082198;
  *(void *)(inited + 72) = a3;
  *(void *)(inited + 80) = a4;
  swift_bridgeObjectRetain(a4);
  sub_1000039C8(inited);
  if (v4)
  {
    swift_setDeallocating(inited);
    return sub_10002C378();
  }

  else
  {
    swift_setDeallocating(inited);
    sub_10002C378();
    do
    {
      uint64_t v11 = sub_1000031C0();
      uint64_t result = swift_release(v11);
    }

    while (v11);
  }

  return result;
}

uint64_t sub_10002AB20(uint64_t a1, uint64_t a2)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  return sub_10001CBC8((uint64_t)sub_10002AB38, v2);
}

uint64_t sub_10002AB38()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 104) + 112LL);
  *(void *)(v0 + 112) = v1;
  return sub_10001CBC8((uint64_t)sub_10002AB50, v1);
}

uint64_t sub_10002AB50()
{
  if (v0)
  {
    uint64_t v9 = (uint64_t (*)(void))sub_10002C79C();
  }

  else
  {
    uint64_t v4 = v1[11];
    uint64_t v3 = v1[12];
    uint64_t v5 = sub_10000534C(&qword_10008A568);
    uint64_t v6 = sub_10002C8D4(v5);
    *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_100069580;
    *(void *)(v6 + 56) = &type metadata for String;
    *(void *)(v6 + 64) = &off_100082198;
    *(void *)(v6 + 32) = v4;
    *(void *)(v6 + 40) = v3;
    swift_bridgeObjectRetain(v3);
    sub_1000039C8(v6);
    swift_setDeallocating(v6);
    sub_10002C378();
    do
    {
      uint64_t v8 = sub_1000031C0();
      uint64_t v7 = v8;
      swift_release(v8);
    }

    while (v7);
    sub_100006C04();
    uint64_t v9 = (uint64_t (*)(void))v1[1];
  }

  return v9();
}

void *sub_10002AC48()
{
  uint64_t v12 = _swiftEmptyArrayStorage;
  uint64_t v1 = sub_1000031C0();
  if (v0) {
    return (void *)sub_100010364(v1, v2, v3, v4, v5, v6, v7, v8, v11, (uint64_t)v12);
  }
  for (uint64_t i = v1; i; uint64_t i = sub_1000031C0())
  {
    sub_10002ACD4(i, (uint64_t *)&v12);
    swift_release(i);
  }

  return v12;
}

uint64_t sub_10002ACD4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for CachedSession(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = swift_retain(a1);
  sub_10000464C(v8, 0LL);
  if (!v10) {
    goto LABEL_13;
  }
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  uint64_t v13 = swift_retain(a1);
  sub_10000464C(v13, 2LL);
  if (!v15)
  {
LABEL_12:
    swift_bridgeObjectRelease(v12);
LABEL_13:
    unint64_t v35 = sub_100004870();
    uint64_t v36 = swift_allocError(&type metadata for DiskCacheError, v35, 0LL, 0LL);
    _BYTE *v37 = 0;
    return swift_willThrow(v36, v37, v38, v39, v40, v41, v42, v43);
  }

  uint64_t v16 = v15;
  uint64_t v48 = v14;
  uint64_t v49 = v11;
  uint64_t v17 = swift_retain(a1);
  sub_10000464C(v17, 3LL);
  if (!v19)
  {
    uint64_t v34 = v12;
    uint64_t v12 = v16;
LABEL_11:
    swift_bridgeObjectRelease(v34);
    goto LABEL_12;
  }

  uint64_t v20 = v19;
  uint64_t v47 = v18;
  uint64_t v21 = swift_retain(a1);
  sub_10000464C(v21, 4LL);
  if (!v23)
  {
    swift_bridgeObjectRelease(v12);
    uint64_t v34 = v16;
    uint64_t v12 = v20;
    goto LABEL_11;
  }

  uint64_t v24 = *(sqlite3_stmt **)(a1 + 16);
  uint64_t v45 = v23;
  uint64_t v46 = v22;
  sqlite3_int64 v44 = sqlite3_column_int64(v24, 1);
  double v25 = sqlite3_column_double(v24, 5);
  sqlite3_int64 v26 = sqlite3_column_int64(v24, 6);
  int v27 = sub_1000310F0(v44);
  else {
    int v28 = v27;
  }
  LODWORD(v44) = v28;
  Date.init(timeIntervalSince1970:)((double)v26);
  *(void *)uint64_t v7 = v48;
  *((void *)v7 + 1) = v16;
  *((void *)v7 + 2) = v47;
  *((void *)v7 + 3) = v20;
  uint64_t v29 = v45;
  *((void *)v7 + 4) = v46;
  *((void *)v7 + 5) = v29;
  *((void *)v7 + 6) = v49;
  *((void *)v7 + 7) = v12;
  *((double *)v7 + 8) = v25;
  v7[72] = v44;
  uint64_t v30 = &v7[*(int *)(v4 + 36)];
  *(_DWORD *)uint64_t v30 = 0;
  v30[4] = 1;
  sub_100033994();
  uint64_t v31 = *(void *)(*a2 + 16);
  sub_100033A0C(v31);
  uint64_t v32 = *a2;
  *(void *)(v32 + swift_weakDestroy(v0 + 16) = v31 + 1;
  sub_10002C518( (uint64_t)v7,  v32 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
  + *(void *)(v5 + 72) * v31,
    type metadata accessor for CachedSession);
  return sub_10002C55C((uint64_t)v7, type metadata accessor for CachedSession);
}

uint64_t sub_10002AF20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_10001CBC8((uint64_t)sub_10002AF38, v3);
}

uint64_t sub_10002AF38()
{
  uint64_t v1 = *(void *)(v0 + 40);
  *(void *)(v0 + 48) = *(void *)(v1 + 112);
  swift_bridgeObjectRetain();
  swift_retain(v1);
  return sub_10001A974();
}

uint64_t sub_10002AF84()
{
  unint64_t v1 = sub_10002C8B8(154LL);
  uint64_t v7 = sub_100004208(v1, v2, v3, v4, v5, v6);
  return sub_10002C748((uint64_t)v7, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10002AFDC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(_BYTE *)(a1 + 24) == 1)
  {
    unint64_t v4 = sub_1000047F8();
    uint64_t v5 = swift_allocError(&unk_100082340, v4, 0LL, 0LL);
    *(_DWORD *)uint64_t v6 = 1;
    *(void *)(v6 + 8) = 0xD00000000000001DLL;
    *(void *)(v6 + swift_weakDestroy(v0 + 16) = 0x800000010006D380LL;
    return swift_willThrow(v5, v6, v7, v8, v9, v10, v11, v12);
  }

  else
  {
    uint64_t result = sub_100003B34(0xD000000000000040LL, 0x800000010006E870LL);
    if (!v2)
    {
      uint64_t v14 = result;
      do
      {
        uint64_t v15 = sub_1000031C0();
        swift_release(v15);
      }

      while (v15);
      swift_release(v14);
      uint64_t result = sub_100003C50();
      *a2 = result;
    }
  }

  return result;
}

uint64_t sub_10002B0D0(uint64_t a1)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_10001CBC8((uint64_t)sub_10002B0E4, v1);
}

uint64_t sub_10002B0E4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 112LL);
  *(void *)(v0 + 32) = v1;
  return sub_10001CBC8((uint64_t)sub_10002B0FC, v1);
}

uint64_t sub_10002B0FC()
{
  if (v0)
  {
    uint64_t v3 = (uint64_t (*)(void))sub_10002C79C();
    return v3();
  }

  else
  {
    sub_10002B174(*(void *)(v1 + 16), &v5);
    sub_10001020C();
    return sub_10002C748(v5, *(uint64_t (**)(void))(v1 + 8));
  }

uint64_t sub_10002B174@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v5 = sub_10000534C(&qword_10008A568);
  uint64_t inited = swift_initStackObject(v5, v33);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100069580;
  *(void *)(inited + 56) = &type metadata for Int;
  *(void *)(inited + 64) = &off_100082138;
  *(void *)(inited + 32) = a1;
  sub_1000039C8(inited);
  if (v2)
  {
    swift_setDeallocating(inited);
    return sub_10002C378();
  }

  else
  {
    swift_setDeallocating(inited);
    sub_10002C378();
    uint64_t result = sub_1000031C0();
    uint64_t v8 = result;
    uint64_t v9 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (!v8)
      {
        *a2 = v9;
        return result;
      }

      uint64_t v10 = *(sqlite3_stmt **)(v8 + 16);
      swift_retain(v8);
      uint64_t v11 = sqlite3_column_text(v10, 0);
      if (!v11) {
        break;
      }
      uint64_t v17 = String.init(cString:)(v11, v12, v13, v14, v15, v16);
      uint64_t v19 = v18;
      swift_release(v8);
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      {
        sub_100004D78();
        uint64_t v9 = v22;
      }

      unint64_t v20 = v9[2];
      if (v20 >= v9[3] >> 1)
      {
        sub_100004D78();
        uint64_t v9 = v23;
      }

      v9[2] = v20 + 1;
      uint64_t v21 = &v9[2 * v20];
      v21[4] = v17;
      v21[5] = v19;
      swift_release(v8);
      uint64_t result = sub_1000031C0();
      uint64_t v8 = result;
    }

    swift_release(v8);
    unint64_t v24 = sub_100004870();
    uint64_t v25 = swift_allocError(&type metadata for DiskCacheError, v24, 0LL, 0LL);
    *sqlite3_int64 v26 = 0;
    swift_willThrow(v25, v26, v27, v28, v29, v30, v31, v32);
    swift_bridgeObjectRelease(v9);
    return swift_release(v8);
  }

uint64_t sub_10002B378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  uint64_t v5[2] = a1;
  return sub_10001CBC8((uint64_t)sub_10002B394, v4);
}

uint64_t sub_10002B394()
{
  uint64_t v1 = v0[3];
  v0[7] = *(void *)(v0[6] + 112LL);
  swift_bridgeObjectRetain(v1);
  sub_100026B34();
  return sub_10001A9C0();
}

uint64_t sub_10002B3D0()
{
  unint64_t v1 = sub_10002C8B8(242LL);
  uint64_t v8 = sub_100004070(v1, v2, v3, v4, v5, v6, v7);
  return sub_10002C748(v8, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10002B428@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v13 = sub_10000534C(&qword_10008A568);
  uint64_t inited = swift_initStackObject(v13, v17);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100069660;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = &off_100082198;
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 40) = a3;
  *(void *)(inited + 96) = &type metadata for Int64;
  *(void *)(inited + 104) = &off_100082158;
  *(void *)(inited + 72) = a4;
  *(void *)(inited + 136) = &type metadata for Int64;
  *(void *)(inited + 144) = &off_100082158;
  *(void *)(inited + 112) = a5;
  swift_bridgeObjectRetain(a3);
  sub_1000039C8(inited);
  swift_setDeallocating(inited);
  if (v6) {
    return sub_10002C378();
  }
  sub_10002C378();
  uint64_t v16 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a3);
  sub_1000032C8(a1, a2, a3, &v16);
  uint64_t result = (uint64_t)v16;
  *a6 = v16;
  return result;
}

uint64_t sub_10002B560(uint64_t a1)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_10001CBC8((uint64_t)sub_10002B574, v1);
}

uint64_t sub_10002B574()
{
  uint64_t v1 = v0[2];
  v0[4] = *(void *)(v0[3] + 112LL);
  swift_bridgeObjectRetain(v1);
  sub_100026B34();
  return sub_10001A9C0();
}

uint64_t sub_10002B5AC()
{
  v0[5] = 0LL;
  return sub_10002C73C((uint64_t)sub_10002AA10, v0[3], 0LL);
}

uint64_t sub_10002B604()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10002B610(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v41 = *(void *)(a2 + 16);
  if (v41)
  {
    uint64_t v5 = a2 + 32;
    swift_bridgeObjectRetain(a2);
    uint64_t v6 = 0LL;
    sub_100006BD4();
    while (*(_BYTE *)(a1 + 24) != 1)
    {
      uint64_t v8 = *(void *)(v5 + 8 * v6);
      uint64_t v9 = v7;
      uint64_t v10 = sub_100003B34(0xD000000000000027LL, v7);
      if (v3) {
        goto LABEL_11;
      }
      uint64_t v18 = v10;
      uint64_t v19 = sub_10000534C(&qword_10008A568);
      uint64_t inited = swift_initStackObject(v19, v40);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100069580;
      *(void *)(inited + 56) = &type metadata for Int64;
      *(void *)(inited + 64) = &off_100082158;
      *(void *)(inited + 32) = v8;
      sub_1000039C8(inited);
      ++v6;
      swift_setDeallocating(inited);
      sub_10002C378();
      do
      {
        uint64_t v21 = sub_1000031C0();
        swift_release(v21);
      }

      while (v21);
      uint64_t v22 = swift_release(v18);
      uint64_t v7 = v9;
      if (v6 == v41)
      {
        sub_100010364(v22, v9, v23, v24, v25, v26, v27, v28, v38, a2);
        goto LABEL_9;
      }
    }

    unint64_t v29 = sub_1000047F8();
    uint64_t v30 = sub_100006A70((uint64_t)&unk_100082340, v29);
    *(_DWORD *)uint64_t v31 = 1;
    *(void *)(v31 + 8) = 0xD00000000000001DLL;
    *(void *)(v31 + swift_weakDestroy(v0 + 16) = 0x800000010006D380LL;
    uint64_t v10 = swift_willThrow(v30, v31, v32, v33, v34, v35, v36, v37);
LABEL_11:
    sub_100010364(v10, v11, v12, v13, v14, v15, v16, v17, v38, a2);
  }

  else
  {
LABEL_9:
    sub_100003C60();
  }

uint64_t sub_10002B7F0(uint64_t a1)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_10001CBC8((uint64_t)sub_10002B804, v1);
}

uint64_t sub_10002B804()
{
  uint64_t v1 = v0[2];
  v0[4] = *(void *)(v0[3] + 112LL);
  v0[5] = 0LL;
  uint64_t v2 = swift_task_alloc(32LL);
  v0[6] = v2;
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v1;
  sub_100026B34();
  return sub_10001A974();
}

uint64_t sub_10002B84C()
{
  uint64_t v1 = v0[5];
  v0[7] = sub_1000289DC((void (*)(uint64_t *__return_ptr, uint64_t))sub_10002C408);
  v0[8] = v1;
  if (v1)
  {
    uint64_t v2 = v0[3];
    uint64_t v3 = sub_10002B91C;
  }

  else
  {
    uint64_t v4 = v0[3];
    swift_task_dealloc(v0[6]);
    uint64_t v3 = sub_10002B8B8;
    uint64_t v2 = v4;
  }

  return sub_10002C73C((uint64_t)v3, v2, 0LL);
}

uint64_t sub_10002B8B8()
{
  if (v0[7] == 50LL)
  {
    v0[5] = v0[8];
    uint64_t v1 = v0[2];
    uint64_t v2 = swift_task_alloc(32LL);
    v0[6] = v2;
    *(void *)(v2 + swift_weakDestroy(v0 + 16) = v1;
    sub_100026B34();
    return sub_10001A974();
  }

  else
  {
    uint64_t v4 = (uint64_t (*)(void))sub_10002C7E0();
    return sub_100026B74(v4);
  }

uint64_t sub_10002B91C()
{
  return sub_10001ABB0(*(uint64_t (**)(void))(v0 + 8));
}

sqlite3_int64 sub_10002B948@<X0>(uint64_t a1@<X1>, sqlite3_int64 *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_100083EF0, v9 + v7, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))( v10 + v9,  (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v5);
  sub_100028918(0xD00000000000003CLL, 0x800000010006E550LL, (void (*)(void))sub_10002C480);
  sqlite3_int64 result = swift_release(v10);
  if (!v2)
  {
    sqlite3_int64 result = sub_100003C50();
    *a2 = result;
  }

  return result;
}

uint64_t sub_10002BA60()
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_10000534C(&qword_10008A568);
  uint64_t inited = swift_initStackObject(v3, v7);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100069580;
  *(void *)(inited + 56) = &type metadata for Int64;
  *(void *)(inited + 64) = &off_100082158;
  *(void *)(inited + 32) = v2;
  sub_1000039C8(inited);
  if (v0)
  {
    swift_setDeallocating(inited);
    return sub_10002C378();
  }

  else
  {
    swift_setDeallocating(inited);
    sub_10002C378();
    do
    {
      uint64_t v6 = sub_1000031C0();
      uint64_t result = swift_release(v6);
    }

    while (v6);
  }

  return result;
}

uint64_t sub_10002BB30(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_10001CBC8((uint64_t)sub_10002BB48, v2);
}

uint64_t sub_10002BB48()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 112LL);
  *(void *)(v0 + 40) = v1;
  return sub_10001CBC8((uint64_t)sub_10002BB60, v1);
}

uint64_t sub_10002BB60()
{
  if (v0)
  {
    uint64_t v3 = (uint64_t (*)(void))sub_10002C79C();
  }

  else
  {
    sub_10002BBC0(*(__int128 **)(v1 + 24), *(void **)(v1 + 16));
    sub_10001020C();
    uint64_t v3 = (uint64_t (*)(void))sub_10002C7E0();
  }

  return sub_10002C764(v3);
}

uint64_t sub_10002BBC0@<X0>(__int128 *a1@<X1>, void *a2@<X8>)
{
  uint64_t v5 = sub_10000534C(&qword_10008A568);
  uint64_t inited = swift_initStackObject(v5, v11);
  __int128 v8 = a1[1];
  __int128 v14 = *a1;
  __int128 v7 = v14;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = &off_100082198;
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100069660;
  *(_OWORD *)(inited + 32) = v7;
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 104) = &off_100082198;
  *(_OWORD *)(inited + 72) = v8;
  __int128 v12 = a1[2];
  __int128 v9 = v12;
  __int128 v13 = v8;
  *(void *)(inited + 136) = &type metadata for String;
  *(void *)(inited + 144) = &off_100082198;
  *(_OWORD *)(inited + 112) = v9;
  sub_1000080FC((uint64_t)&v14);
  sub_1000080FC((uint64_t)&v13);
  sub_1000080FC((uint64_t)&v12);
  sub_1000039C8(inited);
  swift_setDeallocating(inited);
  if (v2) {
    return sub_10002C378();
  }
  sub_10002C378();
  return sub_1000037F0(a2);
}

uint64_t sub_10002BD50@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = swift_retain(a1);
  sub_10000464C(v4, 0LL);
  if (v6)
  {
    uint64_t v7 = v5;
    uint64_t v8 = v6;
    sqlite3_int64 v9 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 16), 1);
    uint64_t v10 = sub_10000534C(&qword_10008B6C8);
    *a2 = v7;
    a2[1] = v8;
    Date.init(timeIntervalSince1970:)((double)v9);
    return _s10RTCUtility9XPCObjectOwst_0((uint64_t)a2, 0LL, 1LL, v10);
  }

  else
  {
    unint64_t v12 = sub_100004870();
    uint64_t v13 = sub_100006A70((uint64_t)&type metadata for DiskCacheError, v12);
    *__int128 v14 = 0;
    return swift_willThrow(v13, v14, v15, v16, v17, v18, v19, v20);
  }

uint64_t sub_10002BE10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  uint64_t v5[2] = a1;
  return sub_10001CBC8((uint64_t)sub_10002BE2C, v4);
}

uint64_t sub_10002BE2C()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = *(void *)(v0[6] + 112LL);
  v0[7] = v2;
  if (v1) {
    uint64_t v3 = sub_10002BE58;
  }
  else {
    uint64_t v3 = sub_10002BEDC;
  }
  return sub_10001CBC8((uint64_t)v3, v2);
}

uint64_t sub_10002BE58()
{
  uint64_t v3 = sub_10002C758(197LL, v2);
  if (v0)
  {
    *(void *)(v1 + 64) = v0;
    uint64_t v4 = *(void *)(v1 + 48);
    uint64_t v5 = sub_10002BED4;
  }

  else
  {
    sub_10002BF5C(v3, *(void *)(v1 + 40), *(__int128 **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
    sub_10001020C();
    uint64_t v4 = *(void *)(v1 + 48);
    uint64_t v5 = sub_10002AA10;
  }

  return sub_10002C73C((uint64_t)v5, v4, 0LL);
}

uint64_t sub_10002BED4()
{
  return sub_10002C834();
}

uint64_t sub_10002BEDC()
{
  uint64_t v3 = sub_10002C758(76LL, v2);
  if (v0)
  {
    *(void *)(v1 + 72) = v0;
    uint64_t v4 = *(void *)(v1 + 48);
    uint64_t v5 = sub_10002BF54;
  }

  else
  {
    sub_10002C0B4(v3, *(__int128 **)(v1 + 16));
    sub_10001020C();
    uint64_t v4 = *(void *)(v1 + 48);
    uint64_t v5 = sub_10002C738;
  }

  return sub_10002C73C((uint64_t)v5, v4, 0LL);
}

uint64_t sub_10002BF54()
{
  return sub_10002C834();
}

uint64_t sub_10002BF5C(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = v9;
  uint64_t v11 = sub_10000534C(&qword_10008A568);
  uint64_t inited = swift_initStackObject(v11, v18);
  __int128 v14 = a3[1];
  __int128 v21 = *a3;
  __int128 v13 = v21;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = &off_100082198;
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10006AAA0;
  *(_OWORD *)(inited + 32) = v13;
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 104) = &off_100082198;
  *(_OWORD *)(inited + 72) = v14;
  __int128 v19 = a3[2];
  __int128 v15 = v19;
  __int128 v20 = v14;
  *(void *)(inited + 136) = &type metadata for String;
  *(void *)(inited + 144) = &off_100082198;
  *(_OWORD *)(inited + 112) = v15;
  *(void *)(inited + 176) = &type metadata for String;
  *(void *)(inited + 184) = &off_100082198;
  *(void *)(inited + 152) = a4;
  *(void *)(inited + 160) = a5;
  *(void *)(inited + 2swift_weakDestroy(v0 + 16) = &type metadata for Int64;
  *(void *)(inited + 224) = &off_100082158;
  *(void *)(inited + 192) = v10;
  sub_1000080FC((uint64_t)&v21);
  sub_1000080FC((uint64_t)&v20);
  sub_1000080FC((uint64_t)&v19);
  swift_bridgeObjectRetain(a5);
  sub_1000039C8(inited);
  if (v5)
  {
    swift_setDeallocating(inited);
    return sub_10002C378();
  }

  else
  {
    swift_setDeallocating(inited);
    sub_10002C378();
    do
    {
      uint64_t v17 = sub_1000031C0();
      uint64_t result = swift_release(v17);
    }

    while (v17);
  }

  return result;
}

uint64_t sub_10002C0B4(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = sub_10000534C(&qword_10008A568);
  uint64_t inited = swift_initStackObject(v4, v11);
  __int128 v7 = a2[1];
  __int128 v14 = *a2;
  __int128 v6 = v14;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = &off_100082198;
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100069660;
  *(_OWORD *)(inited + 32) = v6;
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 104) = &off_100082198;
  *(_OWORD *)(inited + 72) = v7;
  __int128 v12 = a2[2];
  __int128 v8 = v12;
  __int128 v13 = v7;
  *(void *)(inited + 136) = &type metadata for String;
  *(void *)(inited + 144) = &off_100082198;
  *(_OWORD *)(inited + 112) = v8;
  sub_1000080FC((uint64_t)&v14);
  sub_1000080FC((uint64_t)&v13);
  sub_1000080FC((uint64_t)&v12);
  sub_1000039C8(inited);
  if (v2)
  {
    swift_setDeallocating(inited);
    return sub_10002C378();
  }

  else
  {
    swift_setDeallocating(inited);
    sub_10002C378();
    do
    {
      uint64_t v10 = sub_1000031C0();
      uint64_t result = swift_release(v10);
    }

    while (v10);
  }

  return result;
}

uint64_t sub_10002C1C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(_BYTE *)(a1 + 24) == 1)
  {
    unint64_t v4 = sub_1000047F8();
    uint64_t v5 = swift_allocError(&unk_100082340, v4, 0LL, 0LL);
    *(_DWORD *)uint64_t v6 = 1;
    *(void *)(v6 + 8) = 0xD00000000000001DLL;
    *(void *)(v6 + swift_weakDestroy(v0 + 16) = 0x800000010006D380LL;
    return swift_willThrow(v5, v6, v7, v8, v9, v10, v11, v12);
  }

  else
  {
    uint64_t result = sub_100003B34(0xD00000000000001DLL, 0x800000010006E820LL);
    if (!v2)
    {
      uint64_t v14 = result;
      do
      {
        uint64_t v15 = sub_1000031C0();
        swift_release(v15);
      }

      while (v15);
      swift_release(v14);
      uint64_t result = sub_100003C50();
      *a2 = result;
    }
  }

  return result;
}

uint64_t sub_10002C2B8()
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v0;
  return sub_10001CBC8((uint64_t)sub_10002C2CC, v0);
}

uint64_t sub_10002C2CC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 112LL);
  *(void *)(v0 + 24) = v1;
  return sub_10001CBC8((uint64_t)sub_10002C2E4, v1);
}

uint64_t sub_10002C2E4()
{
  do
  {
    uint64_t v0 = sub_1000031C0();
    swift_release(v0);
  }

  while (v0);
  sub_10001020C();
  uint64_t v1 = (uint64_t (*)(void))sub_10002C7E0();
  return sub_10002C764(v1);
}

uint64_t type metadata accessor for DiskCache()
{
  return objc_opt_self(&OBJC_CLASS____TtC13rtcreportingd9DiskCache);
}

uint64_t sub_10002C378()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_10000534C(&qword_10008B670);
  swift_arrayDestroy(v0 + 32, v1);
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

unint64_t sub_10002C3C8()
{
  unint64_t result = qword_10008AB78;
  if (!qword_10008AB78)
  {
    uint64_t v1 = type metadata accessor for EventValue(255LL);
    unint64_t result = swift_getWitnessTable(&unk_10006ADB0, v1);
    atomic_store(result, (unint64_t *)&qword_10008AB78);
  }

  return result;
}

sqlite3_int64 sub_10002C408@<X0>(sqlite3_int64 *a1@<X8>)
{
  return sub_10002B948(*(void *)(v1 + 16), a1);
}

uint64_t sub_10002C420()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10002C480()
{
  return sub_10002BA60();
}

uint64_t sub_10002C4D8(uint64_t a1)
{
  uint64_t v2 = sub_10000534C(&qword_10008AB30);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10002C518(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002C55C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for DiskCacheError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for DiskCacheError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_100026CF8(v2[30], v4) = 1;
  }
  else {
    LODWORD(sub_100026CF8(v2[30], v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10002C66C + 4 * byte_10006AAC5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10002C6A0 + 4 * byte_10006AAC0[v4]))();
}

uint64_t sub_10002C6A0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002C6A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10002C6B0LL);
  }
  return result;
}

uint64_t sub_10002C6BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10002C6C4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10002C6C8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002C6D0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10002C6DC(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DiskCacheError()
{
  return &type metadata for DiskCacheError;
}

unint64_t sub_10002C6FC()
{
  unint64_t result = qword_10008B728;
  if (!qword_10008B728)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006AB60, &type metadata for DiskCacheError);
    atomic_store(result, (unint64_t *)&qword_10008B728);
  }

  return result;
}

uint64_t sub_10002C73C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10002C748(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10002C758(uint64_t a1, uint64_t a2)
{
  return sub_100003B34(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a2);
}

uint64_t sub_10002C764(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10002C770(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10002C77C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10002C788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10002C79C()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_10002C7A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return 0x554E447473616CLL;
}

void sub_10002C7C8()
{
}

uint64_t sub_10002C7E0()
{
  return *(void *)(v0 + 8);
}

void sub_10002C7EC(uint64_t a1@<X8>)
{
}

uint64_t sub_10002C804(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
  return swift_willThrow();
}

uint64_t sub_10002C818()
{
  return 0x6E6F6973726576LL;
}

uint64_t sub_10002C834()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002C83C(uint64_t a1)
{
  *(_BYTE *)(a1 + 24) = 0;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v1;
  return swift_retain(v1);
}

uint64_t sub_10002C850(uint64_t a1)
{
  return swift_task_alloc((*(void *)(*(void *)(a1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_10002C864()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 168) + 8LL))(v0, v1);
}

uint64_t sub_10002C878( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a12, a9);
}

uint64_t sub_10002C888(uint64_t a1, uint64_t a2)
{
  return _s10RTCUtility9XPCObjectOwst_0(a1, a2, 1LL, *(void *)(v2 - 144));
}

uint64_t sub_10002C898()
{
  uint64_t v1 = v0[3];
  v0[5] = *(void *)(v0[4] + 112LL);
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_10002C8A8()
{
  return type metadata accessor for SQLiteDB.Transaction();
}

unint64_t sub_10002C8B8(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
}

uint64_t sub_10002C8C4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  *(void *)(v0 + 32) = *(void *)(v1 + 112);
  return swift_retain(v1);
}

uint64_t sub_10002C8D4(uint64_t a1)
{
  return swift_initStackObject(a1, v1);
}

uint64_t sub_10002C8DC()
{
  return swift_task_alloc(v0);
}

uint64_t sub_10002C8E4(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_10002C8EC()
{
  return Data.count.getter(v1, v0);
}

uint64_t sub_10002C8F8()
{
  if ((byte_10008B730 & 1) != 0)
  {
    uint64_t v0 = sub_10000534C(&qword_10008B420);
    uint64_t v1 = type metadata accessor for XPCObject(0LL);
    unint64_t v2 = sub_100027258();
    int v3 = _swiftEmptyArrayStorage;
    uint64_t v4 = v0;
    uint64_t v5 = v1;
    return Dictionary.init(dictionaryLiteral:)(v3, v4, v5, v2);
  }

  uint64_t v6 = sub_10000534C(&qword_10008B410);
  uint64_t v7 = sub_10000534C(&qword_10008B418);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 32) & ~v10;
  uint64_t v12 = swift_allocObject(v6, v11 + 12 * v9, v10 | 7);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_10006ABD0;
  uint64_t v13 = v12 + v11;
  uint64_t v14 = (void *)(v12 + v11 + *(int *)(v7 + 48));
  *(void *)(v12 + v11) = XPC_ACTIVITY_DELAY;
  *uint64_t v14 = 300LL;
  uint64_t v15 = type metadata accessor for XPCObject(0LL);
  sub_10002F80C((uint64_t)v14);
  uint64_t v16 = (void *)(v13 + v9 + *(int *)(v7 + 48));
  *(void *)(v13 + v9) = XPC_ACTIVITY_GRACE_PERIOD;
  *uint64_t v16 = 120LL;
  sub_10002F80C((uint64_t)v16);
  uint64_t v17 = (const char **)(v13 + 2 * v9);
  uint64_t v18 = (const char **)((char *)v17 + *(int *)(v7 + 48));
  *uint64_t v17 = XPC_ACTIVITY_PRIORITY;
  *uint64_t v18 = String.init(cString:)(XPC_ACTIVITY_PRIORITY_UTILITY);
  v18[1] = v19;
  sub_10002F940((uint64_t)v18);
  __int128 v20 = (const char **)(v13 + 3 * v9);
  __int128 v21 = (char *)v20 + *(int *)(v7 + 48);
  _BYTE *v20 = XPC_ACTIVITY_ALLOW_BATTERY;
  *__int128 v21 = 0;
  uint64_t result = sub_10002F720((uint64_t)v21);
  if (!XPC_ACTIVITY_POWER_NAP)
  {
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v23 = sub_10002F538(XPC_ACTIVITY_POWER_NAP);
  *uint64_t v23 = 1;
  uint64_t result = sub_10002F720((uint64_t)v23);
  if (!XPC_ACTIVITY_RANDOM_INITIAL_DELAY)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v24 = sub_10002F538(XPC_ACTIVITY_RANDOM_INITIAL_DELAY);
  uint64_t result = sub_10002F6F8(v24, 60LL);
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v25 = sub_10002F538(XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY);
  *uint64_t v25 = 1;
  uint64_t result = sub_10002F720((uint64_t)v25);
  if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v26 = sub_10002F538(XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY);
  *uint64_t v26 = 1;
  uint64_t result = sub_10002F720((uint64_t)v26);
  if (!XPC_ACTIVITY_NETWORK_UPLOAD_SIZE)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v27 = sub_10002F538(XPC_ACTIVITY_NETWORK_UPLOAD_SIZE);
  uint64_t result = sub_10002F6F8(v27, 5242880LL);
  if (!XPC_ACTIVITY_EXPECTED_DURATION)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v28 = sub_10002F538(XPC_ACTIVITY_EXPECTED_DURATION);
  *(void *)uint64_t v28 = XPC_ACTIVITY_INTERVAL_1_MIN;
  uint64_t result = sub_10002F80C((uint64_t)v28);
  if (!XPC_ACTIVITY_GROUP_NAME)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  unint64_t v29 = sub_10002F538(XPC_ACTIVITY_GROUP_NAME);
  *(void *)unint64_t v29 = 0xD00000000000001DLL;
  *((void *)v29 + 1) = 0x800000010006E1E0LL;
  uint64_t result = sub_10002F940((uint64_t)v29);
  if (XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT)
  {
    uint64_t v30 = sub_10002F538(XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT);
    sub_10002F6F8(v30, 1LL);
    uint64_t v31 = sub_10000534C(&qword_10008B420);
    unint64_t v2 = sub_100027258();
    int v3 = (void *)v12;
    uint64_t v4 = v31;
    uint64_t v5 = v15;
    return Dictionary.init(dictionaryLiteral:)(v3, v4, v5, v2);
  }

uint64_t sub_10002CC04()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000D940(v0, qword_1000932F8);
  sub_10000D34C(v0, (uint64_t)qword_1000932F8);
  return Logger.init(subsystem:category:)( 0xD000000000000017LL,  0x800000010006D6D0LL,  0x652D74696D627573LL,  0xEC00000072656761LL);
}

uint64_t sub_10002CC80()
{
  v1[30] = v0;
  v1[31] = *(void *)(type metadata accessor for CachedSession(0LL) - 8);
  v1[32] = sub_100026B60();
  v1[33] = sub_100026B60();
  v1[34] = sub_100026B60();
  v1[35] = sub_100026B60();
  v1[36] = sub_100026B60();
  v1[37] = sub_100026B60();
  v1[38] = sub_100026B60();
  v1[39] = sub_100026B60();
  v1[40] = sub_100026B60();
  v1[41] = sub_100026B60();
  sub_100026B34();
  return sub_100020908(v2, v3, v4);
}

void sub_10002CD18()
{
  if (qword_10008A010 != -1) {
    swift_once(&qword_10008A010, sub_10002CC04);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000D34C(v1, (uint64_t)qword_1000932F8);
  v0[42] = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)sub_1000100B0(2LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "starting eager submission activity", v5, 2u);
    sub_100010010((uint64_t)v5);
  }

  v0[23] = &_swiftEmptySetSingleton;
  if (qword_1000933B0)
  {
    v0[43] = qword_1000933B0;
    sub_100010324();
    uint64_t v6 = (void *)sub_100026B60();
    v0[44] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_10002CE28;
    sub_10002F710(50LL);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10002CE28()
{
  v0[45] = v2;
  v0[46] = v1;
  sub_10001ACD0(v3);
  if (v1)
  {
    uint64_t v4 = v0[30];
    uint64_t v5 = (void (*)())sub_10002E3E8;
  }

  else
  {
    uint64_t v6 = v0[30];
    swift_release(v0[43]);
    uint64_t v5 = sub_10002CE88;
    uint64_t v4 = v6;
  }

  return sub_100020908((uint64_t)v5, v4, 0LL);
}

void sub_10002CE88()
{
  uint64_t v4 = *(void *)(v1 + 360);
  uint64_t v5 = *(void *)(v4 + 16);
  *(void *)(v1 + 376) = v5;
  if (v5)
  {
    char v6 = static Task<>.isCancelled.getter();
    uint64_t v4 = *(void *)(v1 + 360);
    if ((v6 & 1) == 0)
    {
      uint64_t v10 = *(void *)(v1 + 248);
      int v11 = *(_DWORD *)(v10 + 80);
      *(_DWORD *)(v1 + 664) = v11;
      *(void *)(v1 + 384) = 0LL;
      uint64_t v12 = *(void *)(v4 + 16);
      swift_bridgeObjectRetain(v4);
      if (v12)
      {
        unint64_t v14 = (v11 + 32LL) & ~(unint64_t)v11;
        uint64_t v15 = *(void *)(v1 + 328);
        *(void *)(v1 + 392) = *(void *)(v10 + 72);
        sub_1000261D4(v13 + v14, v15);
        sub_10002F40C();
        sub_1000083B8();
        sub_10002F4B8();
        sub_10002F548();
        sub_100006AF0();
        if ((v2 & 1) != 0)
        {
          uint64_t v16 = sub_10002F520();
          Logger.logObject.getter(v16);
          os_log_type_t v17 = sub_10001AB70();
          if (sub_10001AC28(v17))
          {
            uint64_t v18 = sub_1000100B0(12LL);
            sub_1000100B0(32LL);
            sub_10002F988();
            uint64_t v19 = sub_10002F4A8(4.8751e-34);
            uint64_t v21 = sub_10002F4DC(v19, v20, &v41);
            sub_10002F514(v21);
            sub_10002F490();
            sub_10002F448((void *)&_mh_execute_header, v22, v23, "sending events for session: %{public}s");
            sub_10002F52C();
            sub_100010010(v3);
            sub_100010010(v18);
          }

          else
          {
            sub_10002F490();
          }

          uint64_t v32 = qword_1000933C8;
          *(void *)(v1 + 424) = qword_1000933C8;
          if (v32)
          {
            sub_100010324();
            uint64_t v33 = (void *)sub_100026B60();
            *(void *)(v1 + 432) = v33;
            uint64_t v34 = sub_10002F554(v33, (uint64_t)sub_10002D2B0);
            sub_10002F64C(v34, v35);
            return;
          }

          goto LABEL_36;
        }

        sub_1000083B8();
        sub_10002F498();
        sub_10002F708();
        uint64_t v28 = qword_1000933C0;
        *(void *)(v1 + 4swift_weakDestroy(v0 + 16) = qword_1000933C0;
        if (v28)
        {
          sub_1000083B8();
          sub_100010324();
          goto LABEL_17;
        }

LABEL_31:
  swift_release(v24);
  uint64_t v39 = qword_1000933C0;
  *(void *)(v1 + 648) = qword_1000933C0;
  if (v39)
  {
    sub_100010324();
    sub_100006AF0();
    uint64_t v40 = (void *)swift_task_alloc(dword_10008B14C);
    *(void *)(v1 + 656) = v40;
    sub_100026CA8(v40, (uint64_t)sub_10002E300);
    sub_10002F578();
    return;
  }

  __break(1u);
  return result;
}

LABEL_37:
  __break(1u);
}

  __break(1u);
}

  sub_100010254();
  *char v6 = v14;
}

uint64_t sub_10002D16C()
{
  uint64_t v1 = v0[30];
  sub_1000239F0(v0[50], v0[51]);
  sub_100006AF0();
  sub_10001020C();
  return sub_100026A04((uint64_t)sub_10002D1B8, v1, 0LL);
}

void sub_10002D1B8()
{
  uint64_t v3 = sub_10002F520();
  Logger.logObject.getter(v3);
  os_log_type_t v4 = sub_10001AB70();
  if (sub_10001AC28(v4))
  {
    uint64_t v5 = sub_1000100B0(12LL);
    sub_1000100B0(32LL);
    sub_10002F988();
    uint64_t v6 = sub_10002F4A8(4.8751e-34);
    uint64_t v8 = sub_10002F4DC(v6, v7, &v15);
    sub_10002F514(v8);
    sub_10002F490();
    sub_10002F448((void *)&_mh_execute_header, v9, v10, "sending events for session: %{public}s");
    sub_10002F52C();
    sub_100010010(v2);
    sub_100010010(v5);
  }

  else
  {
    sub_10002F490();
  }

  uint64_t v11 = qword_1000933C8;
  *(void *)(v1 + 424) = qword_1000933C8;
  if (v11)
  {
    sub_100010324();
    uint64_t v12 = (void *)sub_100026B60();
    *(void *)(v1 + 432) = v12;
    uint64_t v13 = sub_10002F554(v12, (uint64_t)sub_10002D2B0);
    sub_10002F64C(v13, v14);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10002D2B0()
{
  v0[55] = v2;
  v0[56] = v3;
  v0[57] = v1;
  sub_10001ACD0(v4);
  if (v1)
  {
    uint64_t v5 = v0[30];
    uint64_t v6 = sub_10002E5F8;
  }

  else
  {
    uint64_t v7 = v0[30];
    swift_release(v0[53]);
    uint64_t v6 = sub_10002D314;
    uint64_t v5 = v7;
  }

  return sub_100020908((uint64_t)v6, v5, 0LL);
}

void sub_10002D314()
{
  if (v0[55])
  {
    if (qword_1000933B0)
    {
      sub_10002F918();
      sub_100010324();
      sub_1000100D8();
      uint64_t v1 = (void *)sub_10002F664();
      v0[60] = v1;
      sub_10002F82C(v1, (uint64_t)sub_10002D770);
      sub_10002F69C();
      sub_10002B378(v2, v3, v4, v5);
      return;
    }

    goto LABEL_21;
  }

  uint64_t v6 = v0[41];
  uint64_t v7 = v0[37];
  uint64_t v9 = v0[35];
  uint64_t v8 = v0[36];
  sub_1000261D4(v6, v0[38]);
  sub_1000261D4(v6, v7);
  sub_1000261D4(v6, v8);
  uint64_t v10 = sub_1000261D4(v6, v9);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.error.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  unint64_t v14 = (os_log_s *)v0[41];
  uint64_t v15 = v0[38];
  uint64_t v16 = v0[36];
  if (v13)
  {
    uint64_t v8 = sub_1000100B0(42LL);
    uint64_t v71 = sub_1000100B0(128LL);
    *(_DWORD *)uint64_t v8 = 136446978;
    BOOL v72 = v14;
    uint64_t v73 = v71;
    log = v11;
    uint64_t v18 = *(void *)(v15 + 48);
    unint64_t v17 = *(void *)(v15 + 56);
    sub_1000083B8();
    v0[16] = sub_100019964(v18, v17, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v8 + 4);
    sub_100006AF0();
    sub_10002F96C();
    *(_WORD *)(v8 + 12) = 2082;
    uint64_t v19 = sub_1000100D8();
    v0[17] = sub_10002F72C(v19, v20, v21, v22, v23, v24, v25, v26);
    sub_10002F974((uint64_t)(v0 + 17), (uint64_t)(v0 + 18));
    sub_1000083D4();
    sub_10002F898();
    *(_WORD *)(v8 + 22) = 2082;
    uint64_t v27 = sub_1000100D8();
    v0[18] = sub_10002F72C(v27, v28, v29, v30, v31, v32, v33, v34);
    sub_10002F974((uint64_t)(v0 + 18), (uint64_t)(v0 + 19));
    sub_1000083D4();
    sub_100026198(v16);
    *(_WORD *)(v8 + 32) = 2082;
    uint64_t v35 = sub_1000100D8();
    v0[19] = sub_10002F72C(v35, v36, v37, v38, v39, v40, v41, v42);
    sub_10002F974((uint64_t)(v0 + 19), (uint64_t)(v0 + 20));
    sub_1000083D4();
    sub_10002F910();
    unint64_t v14 = log;
    _os_log_impl( (void *)&_mh_execute_header,  log,  v12,  "no backend available for session %{public}s - %{public}s:%{public}s:%{public}s",  (uint8_t *)v8,  0x2Au);
    swift_arrayDestroy(v71, 4LL);
    sub_100010010(v71);
    sub_100010010(v8);

    uint64_t v43 = (uint64_t)v72;
  }

  else
  {

    sub_10002F910();
    sub_100026198(v16);
    sub_10002F898();
    sub_10002F96C();
    uint64_t v43 = (uint64_t)v14;
  }

  sub_100026198(v43);
  sub_10002F5E8();
  if (v45)
  {
    sub_10002F6D4();
    sub_10002F428();
    uint64_t v46 = qword_1000933B0;
    v0[72] = qword_1000933B0;
    if (v46)
    {
      sub_10002F790();
      sub_100010324();
      uint64_t v47 = (void *)sub_10002F664();
      v0[73] = v47;
      sub_10002F4C8(v47, (uint64_t)sub_10002DFBC);
      sub_10002F69C();
      sub_10002AB20(v48, v49);
      return;
    }

    goto LABEL_22;
  }

  sub_10002F500(v44);
  if (v50)
  {
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  sub_10002F3E0(v51);
  sub_10002F40C();
  sub_1000083B8();
  sub_10002F4B8();
  sub_10002F548();
  sub_100006AF0();
  if ((v8 & 1) != 0)
  {
    uint64_t v52 = sub_10002F520();
    Logger.logObject.getter(v52);
    os_log_type_t v53 = sub_10001AB70();
    BOOL v54 = sub_10001AC28(v53);
    uint64_t v55 = v0[40];
    if (v54)
    {
      uint64_t v56 = (_DWORD *)sub_1000100B0(12LL);
      uint64_t v57 = sub_1000100B0(32LL);
      uint64_t v73 = v57;
      *uint64_t v56 = 136446210;
      swift_bridgeObjectRetain(*(void *)(v55 + 56));
      uint64_t v60 = sub_10002F4DC(v58, v59, &v73);
      sub_10002F514(v60);
      sub_10002F490();
      sub_10002F448((void *)&_mh_execute_header, v61, v62, "sending events for session: %{public}s");
      sub_10002F52C();
      sub_100010010(v57);
      sub_100010010((uint64_t)v56);
    }

    else
    {
      sub_10002F490();
    }

    uint64_t v67 = qword_1000933C8;
    v0[53] = qword_1000933C8;
    if (v67)
    {
      sub_100010324();
      BOOL v68 = (void *)sub_100026B60();
      v0[54] = v68;
      sub_10002F958(v68, (uint64_t)sub_10002D2B0);
      sub_10002F69C();
      __asm { BR              X1 }
    }

    goto LABEL_24;
  }

  sub_1000083B8();
  sub_10002F498();
  sub_10002F708();
  uint64_t v63 = qword_1000933C0;
  v0[52] = qword_1000933C0;
  if (v63)
  {
    sub_1000083B8();
    sub_100010324();
    sub_100026B34();
    sub_10002F69C();
    swift_task_switch(v64, v65, v66);
    return;
  }

uint64_t sub_10002D770()
{
  v0[61] = v2;
  v0[62] = v1;
  sub_10001ACD0(v3);
  if (v1)
  {
    uint64_t v4 = v0[30];
    uint64_t v5 = sub_10002E8A0;
  }

  else
  {
    sub_10002F92C(v0[59]);
    sub_10001020C();
    uint64_t v5 = sub_10002D7D0;
    uint64_t v4 = (uint64_t)v0;
  }

  return sub_100020908((uint64_t)v5, v4, 0LL);
}

void sub_10002D7D0()
{
  uint64_t v3 = v1[61];
  uint64_t v4 = v1[41];
  if (*(void *)(v3 + 16))
  {
    uint64_t v5 = (os_log_s *)v1[42];
    sub_1000261D4(v4, v1[39]);
    uint64_t v6 = swift_bridgeObjectRetain_n(v3, 4LL);
    Logger.logObject.getter(v6);
    os_log_type_t v7 = sub_10001AB70();
    if (sub_10001AC28(v7))
    {
      log = v5;
      uint64_t v8 = v1[61];
      uint64_t v9 = v1[39];
      uint64_t v10 = sub_1000100B0(42LL);
      uint64_t v62 = sub_1000100B0(96LL);
      v64[0] = v62;
      *(_DWORD *)uint64_t v10 = 134349826;
      v1[26] = *(void *)(v3 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 26, v1 + 27, v10 + 4);
      *(_WORD *)(v10 + 12) = 2080;
      uint64_t v11 = *(void *)(v9 + 48);
      unint64_t v12 = *(void *)(v9 + 56);
      swift_bridgeObjectRetain(v12);
      v1[27] = sub_100019964(v11, v12, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 27, v1 + 28, v10 + 14);
      sub_100010278();
      sub_10002F96C();
      *(_WORD *)(v10 + 22) = 2082;
      BOOL v13 = sub_100047794(v8, 0x646F6874656D5FLL, 0xE700000000000000LL);
      uint64_t v14 = sub_100047A90((uint64_t)v13);
      uint64_t v15 = Set.description.getter(v14, &type metadata for Int64, &protocol witness table for Int64);
      unint64_t v17 = v16;
      swift_bridgeObjectRelease(v14);
      v1[28] = sub_100019964(v15, v17, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 28, v1 + 29, v10 + 24);
      sub_100010278();
      sub_10002F97C();
      *(_WORD *)(v10 + 32) = 2082;
      uint64_t v18 = sub_100047794(v8, 0x7375746174735FLL, 0xE700000000000000LL);
      uint64_t v19 = sub_100047A90((uint64_t)v18);
      Set.description.getter(v19, &type metadata for Int64, &protocol witness table for Int64);
      uint64_t v20 = sub_1000083D4();
      v1[29] = sub_10002F4DC(v20, v21, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 29, v1 + 30, v10 + 34);
      sub_100010278();
      sub_10002F97C();
      uint64_t v5 = log;
      _os_log_impl( (void *)&_mh_execute_header,  log,  v0,  "sending %{public}ld events for session %s with categories [%{public}s] types [%{public}s]",  (uint8_t *)v10,  0x2Au);
      swift_arrayDestroy(v62, 3LL);
      sub_100010010(v62);
      sub_100010010(v10);
    }

    else
    {
      uint64_t v29 = v1[61];
      sub_100026198(v1[39]);
      swift_bridgeObjectRelease_n(v29, 4LL);
    }

    int64_t v30 = *(void *)(v3 + 16);
    v1[63] = v30;
    uint64_t v31 = _swiftEmptyArrayStorage;
    if (v30)
    {
      uint64_t v32 = v1 + 20;
      uint64_t v33 = v1[61];
      v1[20] = _swiftEmptyArrayStorage;
      sub_100057F20(0LL, v30, 0);
      uint64_t v31 = (void *)v1[20];
      uint64_t v34 = (_OWORD *)(v33 + 48);
      do
      {
        uint64_t v35 = *((void *)v34 - 1);
        *(_OWORD *)type = *v34;
        __int128 v36 = *v34;
        *uint64_t v32 = v31;
        unint64_t v37 = v31[2];
        unint64_t v38 = v31[3];
        swift_bridgeObjectRetain(v36);
        swift_bridgeObjectRetain(*(void *)&type[8]);
        if (v37 >= v38 >> 1)
        {
          sub_100057F20((char *)(v38 > 1), v37 + 1, 1);
          uint64_t v31 = (void *)*v32;
        }

        v31[2] = v37 + 1;
        uint64_t v39 = &v31[3 * v37];
        v39[4] = v35;
        *(_OWORD *)(v39 + 5) = *(_OWORD *)type;
        v34 += 2;
        --v30;
      }

      while (v30);
    }

    v1[64] = v31;
    uint64_t v40 = v1[56];
    swift_getObjectType(v1[55]);
    uint64_t v41 = (void *)swift_task_alloc(*(unsigned int *)(*(void *)(v40 + 24) + 4LL));
    v1[65] = v41;
    void *v41 = v1;
    v41[1] = sub_10002DD44;
    sub_10002F6DC();
    __asm { BR              X3 }
  }

  uint64_t v22 = (void *)v1[55];
  sub_100026198(v4);
  sub_100006AF0();
  sub_10001AB80();
  sub_10002F5E8();
  if (v24)
  {
    sub_10002F6D4();
    sub_10002F428();
    uint64_t v25 = qword_1000933B0;
    v1[72] = qword_1000933B0;
    if (v25)
    {
      sub_10002F790();
      sub_100010324();
      uint64_t v26 = (void *)sub_10002F664();
      v1[73] = v26;
      sub_10002F4C8(v26, (uint64_t)sub_10002DFBC);
      sub_10002F6DC();
      sub_10002AB20(v27, v28);
      return;
    }

    goto LABEL_25;
  }

  sub_10002F500(v23);
  if (v43)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  sub_10002F3E0(v44);
  sub_10002F40C();
  sub_1000083B8();
  sub_10002F4B8();
  sub_10002F548();
  sub_100006AF0();
  if ((v2 & 1) != 0)
  {
    uint64_t v45 = sub_10002F520();
    Logger.logObject.getter(v45);
    os_log_type_t v46 = sub_10001AB70();
    if (sub_10001AC28(v46))
    {
      uint64_t v47 = sub_1000100B0(12LL);
      uint64_t v48 = sub_1000100B0(32LL);
      v64[0] = v48;
      uint64_t v49 = sub_10002F4A8(4.8751e-34);
      uint64_t v51 = sub_10002F4DC(v49, v50, v64);
      sub_10002F514(v51);
      sub_10002F490();
      sub_10002F448((void *)&_mh_execute_header, v52, v53, "sending events for session: %{public}s");
      sub_10002F52C();
      sub_100010010(v48);
      sub_100010010(v47);
    }

    else
    {
      sub_10002F490();
    }

    uint64_t v58 = qword_1000933C8;
    v1[53] = qword_1000933C8;
    if (v58)
    {
      sub_100010324();
      uint64_t v59 = (void *)sub_100026B60();
      v1[54] = v59;
      sub_10002F958(v59, (uint64_t)sub_10002D2B0);
      sub_10002F6DC();
      __asm { BR              X1 }
    }

    goto LABEL_27;
  }

  sub_1000083B8();
  sub_10002F498();
  sub_10002F708();
  uint64_t v54 = qword_1000933C0;
  v1[52] = qword_1000933C0;
  if (v54)
  {
    sub_1000083B8();
    sub_100010324();
    sub_100026B34();
    sub_10002F6DC();
    swift_task_switch(v55, v56, v57);
    return;
  }

LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
}

  __break(1u);
}

uint64_t sub_10002DD44()
{
  uint64_t v3 = v0[65];
  *uint64_t v4 = *v2;
  v0[66] = v1;
  swift_task_dealloc(v3);
  uint64_t v5 = v0[64];
  if (v1)
  {
    sub_10002F92C(v5);
    sub_10000FFD8();
    uint64_t v6 = sub_10002EB58;
    uint64_t v7 = (uint64_t)v0;
  }

  else
  {
    uint64_t v8 = v0[30];
    swift_bridgeObjectRelease(v5);
    uint64_t v6 = sub_10002DDB4;
    uint64_t v7 = v8;
  }

  return sub_100020908((uint64_t)v6, v7, 0LL);
}

void sub_10002DDB4()
{
  uint64_t v1 = qword_1000933B0;
  v0[67] = qword_1000933B0;
  if (v1)
  {
    int64_t v2 = v0[63];
    uint64_t v3 = v0[61];
    if (v2)
    {
      uint64_t v4 = v0 + 25;
      v0[25] = _swiftEmptyArrayStorage;
      swift_retain(v1);
      sub_100057F68(0LL, v2, 0);
      uint64_t v5 = 0LL;
      uint64_t v6 = (void *)v0[25];
      uint64_t v7 = (uint64_t *)(v3 + 32);
      unint64_t v8 = v6[2];
      do
      {
        uint64_t v10 = *v7;
        v7 += 4;
        uint64_t v9 = v10;
        *uint64_t v4 = v6;
        unint64_t v11 = v6[3];
        if (v8 >= v11 >> 1)
        {
          sub_100057F68((char *)(v11 > 1), v8 + 1, 1);
          uint64_t v6 = (void *)*v4;
        }

        uint64_t v12 = v0[63];
        ++v5;
        _OWORD v6[2] = v8 + 1;
        v6[v8++ + 4] = v9;
      }

      while (v5 != v12);
      swift_bridgeObjectRelease(v0[61]);
    }

    else
    {
      swift_retain(v1);
      swift_bridgeObjectRelease(v3);
      uint64_t v6 = _swiftEmptyArrayStorage;
    }

    v0[68] = v6;
    BOOL v13 = (void *)swift_task_alloc(dword_10008B66C);
    v0[69] = v13;
    *BOOL v13 = v0;
    v13[1] = sub_10002DEF0;
    sub_10002B560((uint64_t)v6);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10002DEF0()
{
  uint64_t v3 = v0[69];
  *uint64_t v4 = *v2;
  v0[70] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    uint64_t v5 = v0[30];
    uint64_t v6 = sub_10002EE10;
  }

  else
  {
    sub_10002F92C(v0[68]);
    sub_10001020C();
    uint64_t v6 = sub_10002DF58;
    uint64_t v5 = (uint64_t)v0;
  }

  return sub_100020908((uint64_t)v6, v5, 0LL);
}

void sub_10002DF58()
{
  if (qword_1000933B0)
  {
    sub_10002F918();
    sub_100010324();
    sub_1000100D8();
    uint64_t v1 = (void *)sub_10002F664();
    *(void *)(v0 + 480) = v1;
    uint64_t v2 = sub_10002F82C(v1, (uint64_t)sub_10002D770);
    sub_10002B378(v2, v3, v4, v5);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10002DFBC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 584);
  *(void *)(*v1 + 592) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 576);
  if (v0)
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 360));
    swift_release(v4);
  }

  else
  {
    swift_release(*(void *)(v2 + 576));
  }

  sub_100026B34();
  return sub_100026A04(v5, v6, v7);
}

uint64_t sub_10002E03C()
{
  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 568) + 1LL;
  sub_100026198(*(void *)(v0 + 272));
  if (v2 == v1)
  {
    uint64_t result = sub_10002F6D4();
    if (qword_1000933B0)
    {
      *(void *)(v0 + 344) = qword_1000933B0;
      sub_100010324();
      uint64_t v4 = (void *)sub_100026B60();
      *(void *)(v0 + 352) = v4;
      *uint64_t v4 = v0;
      v4[1] = sub_10002CE28;
      return sub_10002F710(50LL);
    }

    __break(1u);
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 568) + 1LL;
    *(void *)(v0 + 568) = v5;
    uint64_t result = sub_1000261D4( *(void *)(v0 + 360)
             + ((*(unsigned __int8 *)(v0 + 664) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 664))
             + *(void *)(v0 + 392) * v5,
               *(void *)(v0 + 272));
    uint64_t v6 = qword_1000933B0;
    *(void *)(v0 + 576) = qword_1000933B0;
    if (v6)
    {
      sub_10002F790();
      sub_100010324();
      uint64_t v7 = (void *)sub_10002F664();
      *(void *)(v0 + 584) = v7;
      uint64_t v8 = sub_10002F4C8(v7, (uint64_t)sub_10002DFBC);
      return sub_10002AB20(v8, v9);
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10002E134()
{
  uint64_t v1 = v0[30];
  sub_100023D2C(v0[80], v0[79], 0);
  sub_100006AF0();
  sub_10001020C();
  return sub_100026A04((uint64_t)sub_10002E188, v1, 0LL);
}

void sub_10002E188()
{
  uint64_t v1 = *(void *)(v0 + 608);
  if (*(void *)(v0 + 616))
  {
LABEL_2:
    sub_10002F934(v1);
    uint64_t v2 = qword_1000933C0;
    *(void *)(v0 + 624) = qword_1000933C0;
    if (v2)
    {
      sub_10002F4E8(*(void *)(*(void *)(v0 + 600) + 48LL));
      sub_100010324();
      sub_100026B34();
      sub_100020908(v3, v4, v5);
      return;
    }

    goto LABEL_22;
  }

  uint64_t v6 = v1 + 1;
  if (__OFADD__(v1, 1LL))
  {
    __break(1u);
    goto LABEL_21;
  }

  unint64_t v7 = (1LL << *(_BYTE *)(v0 + 668)) + 63;
  uint64_t v8 = *(void *)(v0 + 600);
  if (v6 < (uint64_t)(v7 >> 6))
  {
    uint64_t v9 = v8 + 56;
    ++v1;
    if (*(void *)(v8 + 56 + 8 * v6)) {
      goto LABEL_2;
    }
    int64_t v10 = v7 >> 6;
    uint64_t v1 = v6 + 1;
    if (v6 + 1 < v10)
    {
      if (*(void *)(v9 + 8 * v1)) {
        goto LABEL_2;
      }
      uint64_t v1 = v6 + 2;
      if (v6 + 2 < v10)
      {
        if (*(void *)(v9 + 8 * v1)) {
          goto LABEL_2;
        }
        uint64_t v11 = v6 + 3;
        if (v11 < v10)
        {
          if (*(void *)(v9 + 8 * v11))
          {
            uint64_t v1 = v11;
            goto LABEL_2;
          }

          while (1)
          {
            uint64_t v1 = v11 + 1;
            if (__OFADD__(v11, 1LL)) {
              break;
            }
            if (v1 >= v10) {
              goto LABEL_18;
            }
            ++v11;
            if (*(void *)(v9 + 8 * v1)) {
              goto LABEL_2;
            }
          }

uint64_t sub_10002E300()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 240LL);
  sub_10001A97C(*(void *)(*(void *)v0 + 656LL));
  sub_10001020C();
  return sub_100020908((uint64_t)sub_10002E34C, v1, 0LL);
}

uint64_t sub_10002E34C()
{
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v5 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 296);
  uint64_t v7 = *(void *)(v0 + 272);
  uint64_t v6 = *(void *)(v0 + 280);
  uint64_t v9 = *(void *)(v0 + 256);
  uint64_t v8 = *(void *)(v0 + 264);
  swift_task_dealloc(*(void *)(v0 + 328));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

#error "10002E460: call analysis failed (funcsize=128)"
void sub_10002E5F8()
{
  void *v0;
  void *v1;
  void *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t (*v44)(void);
  uint64_t v45;
  uint64_t v46;
  swift_release(v2[53]);
  sub_10002F9B8();
  sub_100026A40();
  uint64_t v5 = sub_100026A40();
  Logger.logObject.getter(v5);
  uint64_t v6 = sub_10002F79C();
  if (sub_10002F584(v6))
  {
    uint64_t v45 = v2[41];
    uint64_t v7 = sub_1000100B0(22LL);
    uint64_t v8 = sub_1000100B0(64LL);
    os_log_type_t v46 = v8;
    uint64_t v9 = sub_10002F8B8(4.8752e-34);
    *(void *)(v7 + 4) = sub_10002F900(v9, v10, v2 + 14);
    sub_10000FFD8();
    sub_10002F898();
    uint64_t v11 = sub_10002F8E8();
    swift_getErrorValue(v11, v12, v13);
    uint64_t v14 = sub_10002F94C();
    *(void *)(v7 + 14) = sub_100026A5C(v14, v15, v16, v17);
    sub_10000FFD8();
    sub_1000269C8();
    sub_1000269C8();
    sub_10002F7E4((void *)&_mh_execute_header, v18, v19, "failed to process events for session %{public}s: %{public}s");
    sub_10002F848();
    sub_100010010(v8);
    sub_100010010(v7);

    sub_1000269C8();
    uint64_t v20 = v45;
  }

  else
  {
    sub_10002F9D0();
    sub_1000269C8();
    sub_1000269C8();
    sub_10002F490();
    sub_1000269C8();
    uint64_t v20 = (uint64_t)v0;
  }

  sub_100026198(v20);
  sub_10002F5E8();
  if (v22)
  {
    sub_10002F6D4();
    sub_10002F428();
    uint64_t v23 = qword_1000933B0;
    v2[72] = qword_1000933B0;
    if (v23)
    {
      sub_10002F790();
      sub_100010324();
      char v24 = (void *)sub_10002F664();
      v2[73] = v24;
      uint64_t v25 = sub_10002F4C8(v24, (uint64_t)sub_10002DFBC);
      sub_10002F630(v25, v26);
      return;
    }

    goto LABEL_18;
  }

  sub_10002F500(v21);
  if (v27)
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  sub_10002F3E0(v28);
  sub_10002F40C();
  sub_1000083B8();
  sub_10002F4B8();
  sub_10002F548();
  sub_100006AF0();
  if ((v3 & 1) == 0)
  {
    sub_1000083B8();
    sub_10002F498();
    sub_10002F708();
    unint64_t v37 = qword_1000933C0;
    v2[52] = qword_1000933C0;
    if (v37)
    {
      sub_1000083B8();
      sub_100010324();
      sub_100026B34();
      sub_10002F5F8(v38, v39, v40);
      return;
    }

    goto LABEL_19;
  }

  uint64_t v29 = sub_10002F520();
  Logger.logObject.getter(v29);
  int64_t v30 = sub_10001AB70();
  if (sub_10001AC28(v30))
  {
    uint64_t v31 = sub_1000100B0(12LL);
    sub_1000100B0(32LL);
    sub_10002F988();
    uint64_t v32 = sub_10002F4A8(4.8751e-34);
    uint64_t v34 = sub_10002F4DC(v32, v33, &v46);
    sub_10002F514(v34);
    sub_10002F490();
    sub_10002F448((void *)&_mh_execute_header, v35, v36, "sending events for session: %{public}s");
    sub_10002F52C();
    sub_100010010(v4);
    sub_100010010(v31);
  }

  else
  {
    sub_10002F490();
  }

  uint64_t v41 = qword_1000933C8;
  v2[53] = qword_1000933C8;
  if (v41)
  {
    sub_100010324();
    uint64_t v42 = (void *)sub_100026B60();
    v2[54] = v42;
    char v43 = sub_10002F554(v42, (uint64_t)sub_10002D2B0);
    sub_10002F614(v43, v44);
    return;
  }

void sub_10002E8A0()
{
  uint64_t v4 = (void *)v1[58];
  uint64_t v5 = v1[55];
  swift_bridgeObjectRelease(v1[59]);
  sub_10001020C();
  swift_unknownObjectRelease(v5);
  sub_10002F9B8();
  sub_100026A40();
  uint64_t v6 = sub_100026A40();
  Logger.logObject.getter(v6);
  os_log_type_t v7 = sub_10002F79C();
  if (sub_10002F584(v7))
  {
    uint64_t v46 = v1[41];
    uint64_t v8 = sub_1000100B0(22LL);
    uint64_t v9 = sub_1000100B0(64LL);
    uint64_t v47 = v9;
    uint64_t v10 = sub_10002F8B8(4.8752e-34);
    *(void *)(v8 + 4) = sub_10002F900(v10, v11, v1 + 14);
    sub_10000FFD8();
    sub_10002F898();
    uint64_t v12 = sub_10002F8E8();
    swift_getErrorValue(v12, v13, v14);
    uint64_t v15 = sub_10002F94C();
    *(void *)(v8 + 14) = sub_100026A5C(v15, v16, v17, v18);
    sub_10000FFD8();
    sub_1000269C8();
    sub_1000269C8();
    sub_10002F7E4((void *)&_mh_execute_header, v19, v20, "failed to process events for session %{public}s: %{public}s");
    sub_10002F848();
    sub_100010010(v9);
    sub_100010010(v8);

    sub_1000269C8();
    uint64_t v21 = v46;
  }

  else
  {
    sub_10002F9D0();
    sub_1000269C8();
    sub_1000269C8();
    sub_10002F490();
    sub_1000269C8();
    uint64_t v21 = (uint64_t)v4;
  }

  sub_100026198(v21);
  sub_10002F5E8();
  if (v23)
  {
    sub_10002F6D4();
    sub_10002F428();
    uint64_t v24 = qword_1000933B0;
    v1[72] = qword_1000933B0;
    if (v24)
    {
      sub_10002F790();
      sub_100010324();
      uint64_t v25 = (void *)sub_10002F664();
      v1[73] = v25;
      uint64_t v26 = sub_10002F4C8(v25, (uint64_t)sub_10002DFBC);
      sub_10002F630(v26, v27);
      return;
    }

    goto LABEL_18;
  }

  sub_10002F500(v22);
  if (v28)
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  sub_10002F3E0(v29);
  sub_10002F40C();
  sub_1000083B8();
  sub_10002F4B8();
  sub_10002F548();
  sub_100006AF0();
  if ((v2 & 1) == 0)
  {
    sub_1000083B8();
    sub_10002F498();
    sub_10002F708();
    uint64_t v38 = qword_1000933C0;
    v1[52] = qword_1000933C0;
    if (v38)
    {
      sub_1000083B8();
      sub_100010324();
      sub_100026B34();
      sub_10002F5F8(v39, v40, v41);
      return;
    }

    goto LABEL_19;
  }

  uint64_t v30 = sub_10002F520();
  Logger.logObject.getter(v30);
  os_log_type_t v31 = sub_10001AB70();
  if (sub_10001AC28(v31))
  {
    uint64_t v32 = sub_1000100B0(12LL);
    sub_1000100B0(32LL);
    sub_10002F988();
    uint64_t v33 = sub_10002F4A8(4.8751e-34);
    uint64_t v35 = sub_10002F4DC(v33, v34, &v47);
    sub_10002F514(v35);
    sub_10002F490();
    sub_10002F448((void *)&_mh_execute_header, v36, v37, "sending events for session: %{public}s");
    sub_10002F52C();
    sub_100010010(v3);
    sub_100010010(v32);
  }

  else
  {
    sub_10002F490();
  }

  uint64_t v42 = qword_1000933C8;
  v1[53] = qword_1000933C8;
  if (v42)
  {
    sub_100010324();
    char v43 = (void *)sub_100026B60();
    v1[54] = v43;
    uint64_t v44 = sub_10002F554(v43, (uint64_t)sub_10002D2B0);
    sub_10002F614(v44, v45);
    return;
  }

void sub_10002EB58()
{
  uint64_t v4 = sub_100026A40();
  Logger.logObject.getter(v4);
  os_log_type_t v5 = sub_10002F79C();
  if (sub_10002F868(v5))
  {
    uint64_t v64 = v2[55];
    uint64_t v65 = v2[41];
    uint64_t v3 = v2[32];
    uint64_t v6 = sub_1000100B0(22LL);
    uint64_t v66 = sub_1000100B0(64LL);
    uint64_t v7 = sub_10002F7D0(4.8752e-34);
    uint64_t v11 = sub_10002F858(v7, v8, v9, v10);
    sub_10002F6B8(v11);
    swift_bridgeObjectRelease(&type metadata for Any);
    uint64_t v12 = sub_10002F490();
    sub_10002F7A4(v12, v13, v14, v15, v16, v17, v18, v19, (uint64_t)(v2 + 2));
    uint64_t v20 = sub_100026AB8();
    uint64_t v26 = sub_10002F994(v20, v21, v22, v23, v24, v25);
    sub_10002F73C(v26);
    sub_10000FFD8();
    sub_1000269C8();
    sub_1000269C8();
    sub_10002F818((void *)&_mh_execute_header, v27, v28, "failed to send events for session %{public}s: %{public}s");
    sub_10002F7BC(v29, v30, v31, v32, v33, v34, v35, v36, v63, v66);
    sub_100010010((uint64_t)v0);
    sub_100010010(v6);

    swift_unknownObjectRelease(v64);
    sub_1000269C8();
    uint64_t v37 = v65;
  }

  else
  {
    sub_10002F878();
    sub_10001AB80();
    sub_1000269C8();
    sub_1000269C8();
    sub_10002F910();
    sub_1000269C8();
    uint64_t v37 = v3;
  }

  sub_100026198(v37);
  sub_10002F5E8();
  if (v39)
  {
    sub_10002F6D4();
    sub_10002F428();
    uint64_t v40 = qword_1000933B0;
    v2[72] = qword_1000933B0;
    if (v40)
    {
      sub_10002F790();
      sub_100010324();
      uint64_t v41 = (void *)sub_10002F664();
      v2[73] = v41;
      uint64_t v42 = sub_10002F4C8(v41, (uint64_t)sub_10002DFBC);
      sub_10002F5CC(v42, v43);
      return;
    }

    goto LABEL_18;
  }

  sub_10002F500(v38);
  if (v44)
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  sub_10002F3E0(v45);
  sub_10002F40C();
  sub_1000083B8();
  sub_10002F4B8();
  sub_10002F548();
  sub_100006AF0();
  if ((v3 & 1) == 0)
  {
    sub_1000083B8();
    sub_10002F498();
    sub_10002F708();
    uint64_t v55 = qword_1000933C0;
    v2[52] = qword_1000933C0;
    if (v55)
    {
      sub_1000083B8();
      sub_100010324();
      sub_100026B34();
      sub_10002F594(v56, v57, v58);
      return;
    }

    goto LABEL_19;
  }

  uint64_t v46 = sub_10002F520();
  Logger.logObject.getter(v46);
  os_log_type_t v47 = sub_10001AB70();
  if (sub_10001AC28(v47))
  {
    uint64_t v48 = sub_1000100B0(12LL);
    uint64_t v49 = sub_1000100B0(32LL);
    uint64_t v66 = v49;
    uint64_t v50 = sub_10002F4A8(4.8751e-34);
    uint64_t v52 = sub_10002F4DC(v50, v51, &v66);
    sub_10002F514(v52);
    sub_10002F490();
    sub_10002F448((void *)&_mh_execute_header, v53, v54, "sending events for session: %{public}s");
    sub_10002F52C();
    sub_100010010(v49);
    sub_100010010(v48);
  }

  else
  {
    sub_10002F490();
  }

  uint64_t v59 = qword_1000933C8;
  v2[53] = qword_1000933C8;
  if (v59)
  {
    sub_100010324();
    uint64_t v60 = (void *)sub_100026B60();
    v2[54] = v60;
    uint64_t v61 = sub_10002F8A0(v60, (uint64_t)sub_10002D2B0);
    sub_10002F5B0(v61, v62);
    return;
  }

void sub_10002EE10()
{
  uint64_t v3 = (void *)v1[67];
  swift_bridgeObjectRelease(v1[68]);
  sub_10001020C();
  sub_10002F9AC();
  sub_100026A40();
  uint64_t v4 = sub_100026A40();
  Logger.logObject.getter(v4);
  os_log_type_t v5 = sub_10002F79C();
  if (sub_10002F868(v5))
  {
    uint64_t v64 = v1[55];
    uint64_t v65 = v1[41];
    uint64_t v2 = v1[32];
    uint64_t v6 = sub_1000100B0(22LL);
    uint64_t v66 = sub_1000100B0(64LL);
    uint64_t v7 = sub_10002F7D0(4.8752e-34);
    uint64_t v11 = sub_10002F858(v7, v8, v9, v10);
    sub_10002F6B8(v11);
    swift_bridgeObjectRelease(&type metadata for Any);
    uint64_t v12 = sub_10002F490();
    sub_10002F7A4(v12, v13, v14, v15, v16, v17, v18, v19, (uint64_t)(v1 + 2));
    uint64_t v20 = sub_100026AB8();
    uint64_t v26 = sub_10002F994(v20, v21, v22, v23, v24, v25);
    sub_10002F73C(v26);
    sub_10000FFD8();
    sub_1000269C8();
    sub_1000269C8();
    sub_10002F818((void *)&_mh_execute_header, v27, v28, "failed to send events for session %{public}s: %{public}s");
    sub_10002F7BC(v29, v30, v31, v32, v33, v34, v35, v36, v63, v66);
    sub_100010010((uint64_t)v3);
    sub_100010010(v6);

    swift_unknownObjectRelease(v64);
    sub_1000269C8();
    uint64_t v37 = v65;
  }

  else
  {
    sub_10002F878();
    sub_10001AB80();
    sub_1000269C8();
    sub_1000269C8();
    sub_10002F910();
    sub_1000269C8();
    uint64_t v37 = v2;
  }

  sub_100026198(v37);
  sub_10002F5E8();
  if (v39)
  {
    sub_10002F6D4();
    sub_10002F428();
    uint64_t v40 = qword_1000933B0;
    v1[72] = qword_1000933B0;
    if (v40)
    {
      sub_10002F790();
      sub_100010324();
      uint64_t v41 = (void *)sub_10002F664();
      v1[73] = v41;
      uint64_t v42 = sub_10002F4C8(v41, (uint64_t)sub_10002DFBC);
      sub_10002F5CC(v42, v43);
      return;
    }

    goto LABEL_18;
  }

  sub_10002F500(v38);
  if (v44)
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  sub_10002F3E0(v45);
  sub_10002F40C();
  sub_1000083B8();
  sub_10002F4B8();
  sub_10002F548();
  sub_100006AF0();
  if ((v2 & 1) == 0)
  {
    sub_1000083B8();
    sub_10002F498();
    sub_10002F708();
    uint64_t v55 = qword_1000933C0;
    v1[52] = qword_1000933C0;
    if (v55)
    {
      sub_1000083B8();
      sub_100010324();
      sub_100026B34();
      sub_10002F594(v56, v57, v58);
      return;
    }

    goto LABEL_19;
  }

  uint64_t v46 = sub_10002F520();
  Logger.logObject.getter(v46);
  os_log_type_t v47 = sub_10001AB70();
  if (sub_10001AC28(v47))
  {
    uint64_t v48 = sub_1000100B0(12LL);
    uint64_t v49 = sub_1000100B0(32LL);
    uint64_t v66 = v49;
    uint64_t v50 = sub_10002F4A8(4.8751e-34);
    uint64_t v52 = sub_10002F4DC(v50, v51, &v66);
    sub_10002F514(v52);
    sub_10002F490();
    sub_10002F448((void *)&_mh_execute_header, v53, v54, "sending events for session: %{public}s");
    sub_10002F52C();
    sub_100010010(v49);
    sub_100010010(v48);
  }

  else
  {
    sub_10002F490();
  }

  uint64_t v59 = qword_1000933C8;
  v1[53] = qword_1000933C8;
  if (v59)
  {
    sub_100010324();
    uint64_t v60 = (void *)sub_100026B60();
    v1[54] = v60;
    uint64_t v61 = sub_10002F8A0(v60, (uint64_t)sub_10002D2B0);
    sub_10002F5B0(v61, v62);
    return;
  }

#error "10002F150: call analysis failed (funcsize=128)"
uint64_t type metadata accessor for SubmitEagerEventsActivity()
{
  return objc_opt_self(&OBJC_CLASS____TtC13rtcreportingd25SubmitEagerEventsActivity);
}

uint64_t sub_10002F308()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10008B764);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100026354;
  return sub_10002CC80();
}

uint64_t sub_10002F34C()
{
  return sub_10002C8F8();
}

uint64_t sub_10002F360()
{
  return 0x652D74696D627573LL;
}

unint64_t sub_10002F380(uint64_t a1)
{
  unint64_t result = sub_10002F3A4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10002F3A4()
{
  unint64_t result = qword_10008B7F0;
  if (!qword_10008B7F0)
  {
    uint64_t v1 = type metadata accessor for SubmitEagerEventsActivity();
    unint64_t result = swift_getWitnessTable(&unk_10006AC28, v1);
    atomic_store(result, (unint64_t *)&qword_10008B7F0);
  }

  return result;
}

uint64_t sub_10002F3E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 328);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 664) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 664));
  uint64_t v5 = *(void *)(*(void *)(v2 + 248) + 72LL);
  *(void *)(v2 + 392) = v5;
  return sub_1000261D4(v4 + v5 * a1, v3);
}

uint64_t sub_10002F40C()
{
  uint64_t v2 = v1[23];
  v1[50] = *v0;
  v1[51] = v0[1];
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10002F428()
{
  *(void *)(v0 + 568) = 0LL;
  return sub_1000261D4( *(void *)(v0 + 360)
         + ((*(unsigned __int8 *)(v0 + 664) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 664)),
           *(void *)(v0 + 272));
}

void sub_10002F448(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_10002F45C()
{
  uint64_t v1 = *(void *)(v0 + 184);
  *(void *)(v0 + 600) = v1;
  *(_BYTE *)(v0 + 668) = *(_BYTE *)(v1 + 32);
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_10002F490()
{
  return sub_100026198(v0);
}

uint64_t sub_10002F498()
{
  return sub_100042BE4(v1, v2, v0);
}

uint64_t sub_10002F4A8(float a1)
{
  float *v1 = a1;
  return swift_bridgeObjectRetain(*(void *)(v2 + 56));
}

void sub_10002F4B8()
{
}

uint64_t sub_10002F4C8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_10002F4DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100019964(v3, v4, a3);
}

uint64_t sub_10002F4E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (void *)(a1 + 16 * v1);
  uint64_t v4 = v3[1];
  *(void *)(v2 + 632) = v4;
  *(void *)(v2 + 640) = *v3;
  return swift_bridgeObjectRetain(v4);
}

void sub_10002F500(uint64_t a1@<X8>)
{
  *(void *)(v1 + 384) = a1;
}

uint64_t sub_10002F514(uint64_t a1)
{
  *(void *)(v1 + 4) = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10002F520()
{
  return sub_1000261D4(*(void *)(v0 + 328), *(void *)(v0 + 320));
}

uint64_t sub_10002F52C()
{
  return swift_arrayDestroy(v0, 1LL);
}

char *sub_10002F538@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = (char *)v1 + *(int *)(v2 + 48);
  void *v1 = a1;
  return result;
}

uint64_t sub_10002F548()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10002F554@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 328);
}

uint64_t sub_10002F56C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10002F578()
{
  return sub_100023750();
}

BOOL sub_10002F584(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10002F594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10002F5B0(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10002F5CC(uint64_t a1, uint64_t a2)
{
  return sub_10002AB20(a1, a2);
}

  ;
}

uint64_t sub_10002F5F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10002F614(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10002F630(uint64_t a1, uint64_t a2)
{
  return sub_10002AB20(a1, a2);
}

uint64_t sub_10002F64C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10002F664()
{
  return swift_task_alloc(v0);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10002F6B8(uint64_t a1)
{
  *(void *)(v1 + 168) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 168, v3, v2);
}

uint64_t sub_10002F6D4()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 360));
}

  ;
}

uint64_t sub_10002F6F8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = a2;
  return swift_storeEnumTagMultiPayload(a1, v2, 4LL);
}

uint64_t sub_10002F708()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 96));
}

uint64_t sub_10002F710(uint64_t a1)
{
  return sub_100028C44(a1);
}

uint64_t sub_10002F720(uint64_t a1)
{
  return swift_storeEnumTagMultiPayload(a1, v1, 2LL);
}

uint64_t sub_10002F72C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return sub_100019964(v8, v9, (uint64_t *)va);
}

uint64_t sub_10002F73C(uint64_t a1)
{
  *(void *)(v1 + 192) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 192, v1 + 200, v2 + 14);
}

uint64_t sub_10002F758(uint64_t a1)
{
  *(void *)(v1 + 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, v1 + 112, v2);
}

uint64_t sub_10002F774(float a1)
{
  *uint64_t v3 = a1;
  return swift_getErrorValue(v1, v2, v4);
}

  ;
}

uint64_t sub_10002F79C()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_10002F7A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(_WORD *)(v10 + 12) = 2082;
  return swift_getErrorValue(v9, v11, a9);
}

uint64_t sub_10002F7BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_arrayDestroy(a10, 2LL);
}

uint64_t sub_10002F7D0(float a1)
{
  *uint64_t v2 = a1;
  return swift_bridgeObjectRetain(*(void *)(v1 + 56));
}

void sub_10002F7E4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void sub_10002F7F8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_10002F80C(uint64_t a1)
{
  return swift_storeEnumTagMultiPayload(a1, v1, 3LL);
}

void sub_10002F818(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_10002F82C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_10002F848()
{
  return swift_arrayDestroy(v0, 2LL);
}

uint64_t sub_10002F858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  return sub_100019964(v4, v5, (uint64_t *)va);
}

BOOL sub_10002F868(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_10002F878()
{
}

void sub_10002F888()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_10002F898()
{
  return sub_100026198(v0);
}

uint64_t sub_10002F8A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 328);
}

uint64_t sub_10002F8B8(float a1)
{
  float *v1 = a1;
  return swift_bridgeObjectRetain(*(void *)(v2 + 56));
}

  ;
}

uint64_t sub_10002F8D8()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_10002F8E8()
{
  *(_WORD *)(v1 + 12) = 2082;
  return v0;
}

uint64_t sub_10002F900(uint64_t a1, uint64_t a2, ...)
{
  return sub_100019964(v3, v2, (uint64_t *)va);
}

uint64_t sub_10002F910()
{
  return sub_100026198(v0);
}

void sub_10002F918()
{
  v1[58] = v0;
  v1[59] = *(void *)(v1[41] + 56LL);
}

uint64_t sub_10002F92C(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

void sub_10002F934(uint64_t a1@<X8>)
{
  *(void *)(v2 + 6swift_weakDestroy(v0 + 16) = v1;
  *(void *)(v2 + 608) = a1;
}

uint64_t sub_10002F940(uint64_t a1)
{
  return swift_storeEnumTagMultiPayload(a1, v1, 8LL);
}

uint64_t sub_10002F94C()
{
  return Error.localizedDescription.getter(*(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_10002F958@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 328);
}

uint64_t sub_10002F96C()
{
  return sub_100026198(v0);
}

uint64_t sub_10002F974(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_10002F97C()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

  ;
}

uint64_t sub_10002F994(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return sub_100019964(a1, a2, (uint64_t *)va);
}

uint64_t sub_10002F9A0( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100019964(a1, a2, &a9);
}

uint64_t sub_10002F9AC()
{
  return sub_1000261D4(*(void *)(v0 + 328), *(void *)(v0 + 256));
}

uint64_t sub_10002F9B8()
{
  return sub_1000261D4(*(void *)(v0 + 328), *(void *)(v0 + 264));
}

uint64_t sub_10002F9C4()
{
  return Error.localizedDescription.getter(*(void *)(v0 + 72), *(void *)(v0 + 80));
}

void sub_10002F9D0()
{
}

uint64_t sub_10002F9DC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000D940(v0, qword_100093310);
  sub_10000D34C(v0, (uint64_t)qword_100093310);
  return Logger.init(subsystem:category:)( 0xD000000000000017LL,  0x800000010006D6D0LL,  0xD000000000000016LL,  0x800000010006EEE0LL);
}

uint64_t sub_10002FA5C()
{
  id v1 = [(id)objc_opt_self(NSURLSessionConfiguration) ephemeralSessionConfiguration];
  id v2 = sub_100030668((uint64_t)[v1 setAllowsCellularAccess:0], "setAllowsConstrainedNetworkAccess:");
  id v3 = sub_100030668((uint64_t)v2, "setAllowsExpensiveNetworkAccess:");
  id v4 = sub_10003067C((uint64_t)v3, "setHTTPCookieAcceptPolicy:");
  id v5 = sub_100030688((uint64_t)v4, "setHTTPCookieStorage:");
  sub_10003067C((uint64_t)v5, "setRequestCachePolicy:");
  id v6 = sub_100030688((uint64_t)[v1 setTimeoutIntervalForRequest:5.0], "setURLCache:");
  id v7 = sub_100030688((uint64_t)v6, "setURLCredentialStorage:");
  sub_100030668((uint64_t)v7, "setWaitsForConnectivity:");
  uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___NSURLSession);
  id v9 = [v8 sessionWithConfiguration:v1];
  *(void *)(v0 + 112) = v9;
  id v10 = sub_10003067C((uint64_t)v9, "setAllowsCellularAccess:");
  id v11 = sub_10003067C((uint64_t)v10, "setAllowsConstrainedNetworkAccess:");
  sub_10003067C((uint64_t)v11, "setAllowsExpensiveNetworkAccess:");
  id v12 = [v8 sessionWithConfiguration:v1];

  *(void *)(v0 + 120) = v12;
  return v0;
}

id sub_10002FBA8@<X0>(char a1@<W0>, void *a2@<X8>)
{
  if (qword_10008A080 != -1) {
    swift_once(&qword_10008A080, sub_10004D6A0);
  }
  if (byte_1000933D8 != 1) {
    goto LABEL_8;
  }
  if (qword_10008A088 != -1) {
    swift_once(&qword_10008A088, sub_10004D6C4);
  }
  id v5 = (id)qword_1000933E0;
  NSString v6 = String._bridgeToObjectiveC()();
  unsigned int v7 = [v5 BOOLForKey:v6];

  if (v7)
  {
    uint64_t v8 = type metadata accessor for MockHTTPSending();
    swift_allocObject(v8, 24LL, 7LL);
    id result = (id)sub_10001D164(a1 & 1);
    a2[3] = v8;
    a2[4] = &off_1000835E8;
    *a2 = result;
  }

  else
  {
LABEL_8:
    unint64_t v10 = sub_1000305C8();
    if ((a1 & 1) != 0) {
      id v11 = *(void **)(v2 + 120);
    }
    else {
      id v11 = *(void **)(v2 + 112);
    }
    a2[3] = v10;
    a2[4] = &off_1000835B8;
    *a2 = v11;
    return v11;
  }

  return result;
}

uint64_t sub_10002FD00(uint64_t a1)
{
  void v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[11] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[12] = v4;
  v2[13] = sub_100008360(v4);
  uint64_t v5 = sub_10000534C(&qword_10008A590);
  v2[14] = sub_100008360(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for Date(0LL);
  v2[15] = v6;
  v2[16] = *(void *)(v6 - 8);
  v2[17] = sub_100026B60();
  v2[18] = sub_100026B60();
  v2[19] = sub_100026B60();
  v2[20] = sub_100026B60();
  return sub_100020908((uint64_t)sub_10002FDA4, v1, 0LL);
}

void sub_10002FDA4()
{
  uint64_t v1 = qword_1000933B0;
  v0[21] = qword_1000933B0;
  if (v1)
  {
    swift_retain(v1);
    uint64_t v2 = (void *)sub_100026B60();
    v0[22] = (uint64_t)v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10002FE10;
    sub_10002BB30(v0[14], v0[9]);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10002FE10()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 176);
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 80);
    uint64_t v5 = sub_10003048C;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 80);
    swift_release(*(void *)(v2 + 168));
    uint64_t v5 = sub_10002FE7C;
    uint64_t v4 = v6;
  }

  return sub_100020908((uint64_t)v5, v4, 0LL);
}

uint64_t sub_10002FE7C()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = sub_10000534C(&qword_10008B6C8);
  if (_s10RTCUtility9XPCObjectOwet_0(v1, 1LL, v2) == 1)
  {
    uint64_t v3 = sub_100005E4C(v1);
    uint64_t v4 = UUID.init()(v3);
    uint64_t v5 = UUID.uuidString.getter(v4);
    uint64_t v7 = v6;
    *(void *)(v0 + 240) = v6;
    uint64_t result = sub_1000306B4();
    uint64_t v9 = qword_1000933B0;
    *(void *)(v0 + 248) = qword_1000933B0;
    if (v9)
    {
      uint64_t v10 = *(void *)(v0 + 152);
      uint64_t v11 = *(void *)(v0 + 128);
      uint64_t v12 = *(void *)(v0 + 120);
      *(void *)(v0 + 256) = v5;
      swift_retain(v9);
      swift_bridgeObjectRetain(v7);
      uint64_t v14 = static Date.now.getter(v13);
      Date.addingTimeInterval(_:)(v14, 86400.0);
      uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      *(void *)(v0 + 264) = v15;
      v15(v10, v12);
      uint64_t v16 = (void *)swift_task_alloc(dword_10008B6BC);
      *(void *)(v0 + 272) = v16;
      *uint64_t v16 = v0;
      v16[1] = sub_1000303B8;
      uint64_t v17 = *(void *)(v0 + 136);
      return sub_10002BE10(*(void *)(v0 + 72), v5, v7, v17);
    }

    __break(1u);
  }

  else
  {
    uint64_t v19 = *(void *)(v0 + 152);
    uint64_t v18 = *(void *)(v0 + 160);
    uint64_t v20 = *(void *)(v0 + 120);
    uint64_t v21 = *(void *)(v0 + 128);
    uint64_t v22 = *(void *)(v1 + 8);
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v18, v1 + *(int *)(v2 + 48), v20);
    static Date.now.getter(v23);
    char v24 = static Date.< infix(_:_:)(v19, v18);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    *(void *)(v0 + 192) = v25;
    v25(v19, v20);
    if ((v24 & 1) != 0)
    {
      v25(*(void *)(v0 + 160), *(void *)(v0 + 120));
      sub_100030694();
      sub_10001AB28();
      sub_10001AB38();
      sub_10001AAF0();
      sub_10001ABA8();
      sub_10001AB60();
      uint64_t v26 = sub_1000306C4();
      return v27(v26);
    }

    swift_bridgeObjectRelease(v22);
    if (qword_10008A018 != -1) {
      swift_once(&qword_10008A018, sub_10002F9DC);
    }
    uint64_t v28 = *(_OWORD **)(v0 + 72);
    uint64_t v29 = type metadata accessor for Logger(0LL);
    sub_10000D34C(v29, (uint64_t)qword_100093310);
    *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = *v28;
    *(_OWORD *)(v0 + 32) = v28[1];
    *(_OWORD *)(v0 + 48) = v28[2];
    sub_1000306E0();
    sub_1000306D8();
    sub_1000306E8();
    sub_1000306E0();
    sub_1000306D8();
    uint64_t v30 = sub_1000306E8();
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      log = v31;
      uint64_t v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v45 = swift_slowAlloc(32LL, -1LL);
      uint64_t v47 = v45;
      *(_DWORD *)uint64_t v33 = 136446210;
      sub_1000306E0();
      sub_1000306D8();
      sub_1000306E8();
      uint64_t v34 = sub_1000157F4();
      unint64_t v36 = v35;
      sub_100030660();
      sub_100030658();
      sub_100030674();
      *(void *)(v0 + 64) = sub_100019964(v34, v36, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v33 + 4);
      swift_bridgeObjectRelease(v36);
      sub_100030660();
      sub_100030658();
      sub_100030674();
      sub_100030660();
      sub_100030658();
      sub_100030674();
      uint64_t v31 = log;
      _os_log_impl((void *)&_mh_execute_header, log, v32, "CID expired for %{public}s, refreshing", v33, 0xCu);
      swift_arrayDestroy(v45, 1LL);
      sub_100010010(v45);
      sub_100010010((uint64_t)v33);
    }

    else
    {
      sub_100030660();
      sub_100030658();
      sub_100030674();
      sub_100030660();
      sub_100030658();
      sub_100030674();
    }

    uint64_t v37 = ((uint64_t (*)(void))UUID.init())();
    uint64_t v5 = UUID.uuidString.getter(v37);
    uint64_t v7 = v38;
    *(void *)(v0 + 200) = v5;
    *(void *)(v0 + 208) = v38;
    uint64_t result = sub_1000306B4();
    uint64_t v39 = qword_1000933B0;
    *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = qword_1000933B0;
    if (v39)
    {
      uint64_t v40 = *(void *)(v0 + 152);
      uint64_t v41 = *(void *)(v0 + 120);
      swift_retain(v39);
      swift_bridgeObjectRetain(v7);
      uint64_t v43 = static Date.now.getter(v42);
      Date.addingTimeInterval(_:)(v43, 86400.0);
      v25(v40, v41);
      char v44 = (void *)swift_task_alloc(dword_10008B6BC);
      *(void *)(v0 + 224) = v44;
      void *v44 = v0;
      v44[1] = sub_1000302C8;
      uint64_t v17 = *(void *)(v0 + 144);
      return sub_10002BE10(*(void *)(v0 + 72), v5, v7, v17);
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1000302C8()
{
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 216);
  uint64_t v3 = *(void *)(*v1 + 224);
  uint64_t v5 = *(void *)(*v1 + 208);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*v1 + 192);
  uint64_t v7 = *(void *)(*v1 + 144);
  uint64_t v8 = *(void *)(*v1 + 120);
  *(void *)(*v1 + 232) = v0;
  swift_task_dealloc(v3);
  v6(v7, v8);
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  if (v0)
  {
    uint64_t v9 = *(void *)(v2 + 80);
    swift_bridgeObjectRelease(*(void *)(v2 + 208));
    uint64_t v10 = sub_1000304D8;
    uint64_t v11 = v9;
  }

  else
  {
    uint64_t v11 = *(void *)(v2 + 80);
    uint64_t v10 = sub_10003036C;
  }

  return sub_100030618((uint64_t)v10, v11, 0LL);
}

uint64_t sub_10003036C()
{
  uint64_t v0 = sub_1000306C4();
  return sub_100030630(v0, v1, v2);
}

uint64_t sub_1000303B8()
{
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 264);
  uint64_t v2 = *(void *)(*v1 + 272);
  uint64_t v5 = *(void *)(*v1 + 240);
  uint64_t v4 = *(void *)(*v1 + 248);
  uint64_t v6 = *(void *)(*v1 + 136);
  uint64_t v7 = *(void *)(*v1 + 120);
  uint64_t v8 = *v1;
  *(void *)(v8 + 280) = v0;
  swift_task_dealloc(v2);
  v3(v6, v7);
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  if (v0)
  {
    uint64_t v9 = *(void *)(v8 + 80);
    swift_bridgeObjectRelease(*(void *)(v8 + 240));
    return sub_100030618((uint64_t)sub_100030520, v9, 0LL);
  }

  else
  {
    uint64_t v11 = *(void *)(v8 + 256);
    uint64_t v12 = *(void *)(v8 + 240);
    swift_task_dealloc(*(void *)(v8 + 160));
    sub_10001AB28();
    sub_10001AB38();
    sub_10001AAF0();
    sub_10001ABA8();
    sub_10001AB60();
    return sub_100030630(v11, v12, *(uint64_t (**)(void))(v8 + 8));
  }

uint64_t sub_10003048C()
{
  return sub_100030604(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000304D8()
{
  return sub_100030604(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100030520()
{
  return sub_100030604(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100030564()
{
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100030590()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for SubmissionCoordinator()
{
  return objc_opt_self(&OBJC_CLASS____TtC13rtcreportingd21SubmissionCoordinator);
}

unint64_t sub_1000305C8()
{
  unint64_t result = qword_10008B8E0;
  if (!qword_10008B8E0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSURLSession);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10008B8E0);
  }

  return result;
}

uint64_t sub_100030604(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100030618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_100030630(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_100030648()
{
  return swift_task_dealloc(*(void *)(v0 + 160));
}

uint64_t sub_100030658()
{
  return sub_1000082EC(v0);
}

uint64_t sub_100030660()
{
  return sub_1000082EC(v0);
}

id sub_100030668(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 0);
}

uint64_t sub_100030674()
{
  return sub_1000082EC(v0);
}

id sub_10003067C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 1);
}

id sub_100030688(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 0);
}

uint64_t sub_100030694()
{
  return swift_task_dealloc(*(void *)(v0 + 160));
}

uint64_t sub_1000306A4()
{
  return (*(uint64_t (**)(void, void))(v0 + 192))(*(void *)(v0 + 160), *(void *)(v0 + 120));
}

uint64_t sub_1000306B4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000306C4()
{
  return v0;
}

uint64_t sub_1000306D8()
{
  return sub_1000080FC(v0);
}

uint64_t sub_1000306E0()
{
  return sub_1000080FC(v0);
}

uint64_t sub_1000306E8()
{
  return sub_1000080FC(v0);
}

uint64_t sub_1000306F0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(sub_100026CF8(v2[30], v4) = 1;
  }
  else {
    LODWORD(sub_100026CF8(v2[30], v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10003073C + 4 * byte_10006ACB5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100030770 + 4 * byte_10006ACB0[v4]))();
}

uint64_t sub_100030770(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100030778(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100030780LL);
  }
  return result;
}

uint64_t sub_10003078C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100030794LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100030798(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000307A0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for SessionType()
{
}

void sub_1000307B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_1000307D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_1000307F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v21;
  a20 = v22;
  char v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  sub_10000534C(v27);
  sub_100006B54();
  __chkstk_darwin(v31);
  uint64_t v32 = sub_1000156AC();
  uint64_t v33 = v26(v32);
  __chkstk_darwin(v33);
  unint64_t v35 = (char *)&a9 - v34;
  if (_s10RTCUtility9XPCObjectOwet_0(v30, 1LL, v36) == 1)
  {
    sub_100035228(v30, v28);
    sub_100033B10(v24, v26, v20);
    sub_100006AF0();
    sub_100035228(v20, v28);
  }

  else
  {
    sub_10003499C(v30, (uint64_t)v35, v26);
    sub_100033E94();
    sub_100006AF0();
  }

  sub_100008348();
}

void sub_1000308F0(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_100035374(a1);
  sub_100035450(v1);
  sub_100035304();
  sub_1000157D0();
}

void sub_10003091C()
{
}

void sub_10003093C()
{
}

void sub_100030958(uint64_t a1)
{
}

void sub_10003098C(uint64_t a1)
{
  unsigned __int8 v1 = sub_100035374(a1);
  sub_1000355A0((uint64_t)v1);
  sub_100035304();
  sub_1000157D0();
}

void sub_1000309B4(uint64_t a1)
{
}

void sub_1000309C0(uint64_t a1)
{
}

void sub_1000309CC(uint64_t a1)
{
}

void sub_1000309D8(uint64_t a1)
{
}

void sub_1000309E4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = a2(a1);
  sub_100035344((uint64_t)v5, v4);
  sub_100006AF0();
  sub_100035304();
  sub_1000157D0();
}

void sub_100030A2C(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_100030A6C(uint64_t a1)
{
  return sub_1000352B0(0xE300000000000000LL);
}

uint64_t sub_100030AFC(uint64_t a1)
{
  return String.hash(into:)(a1, 0x726F706552435452LL, 0xEC000000676E6974LL);
}

uint64_t sub_100030B1C(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000011LL, 0x800000010006CD90LL);
}

uint64_t sub_100030B38(uint64_t a1)
{
  uint64_t v2 = sub_100037560();
  uint64_t v4 = v3;
  String.hash(into:)(a1, v2, v3);
  return sub_1000352B0(v4);
}

void sub_100030B74(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_100030BB0(uint64_t a1)
{
  return sub_1000352B0(0xE700000000000000LL);
}

void sub_100030C58(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_100030C90(uint64_t a1)
{
  return sub_1000352B0(0xE300000000000000LL);
}

void sub_100030D58(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_100030D90(uint64_t a1)
{
  return sub_1000352B0(0xE700000000000000LL);
}

void sub_100030DDC(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int sub_100030E04(uint64_t a1, unsigned __int8 a2)
{
  return Hasher._finalize()();
}

void sub_100030E48(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = a2;
  sub_1000353B8(a1, a2);
  sub_100035450(v2);
  sub_100035304();
  sub_1000157D0();
}

void sub_100030E74(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = sub_1000353B8(a1, a2);
  sub_1000355A0((uint64_t)v2);
  sub_100035304();
  sub_1000157D0();
}

void sub_100030E9C(uint64_t a1, uint64_t a2)
{
}

void sub_100030EA8(uint64_t a1, uint64_t a2)
{
}

void sub_100030EB4(uint64_t a1, uint64_t a2)
{
}

void sub_100030EC0(uint64_t a1)
{
}

void sub_100030EDC(uint64_t a1)
{
}

void sub_100030EFC(uint64_t a1, uint64_t a2)
{
}

void sub_100030F30(uint64_t a1, uint64_t a2)
{
}

void sub_100030F3C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = a3(a2);
  sub_100035344((uint64_t)v6, v5);
  sub_100006AF0();
  sub_100035304();
  sub_1000157D0();
}

uint64_t sub_100030F84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for EventValue(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100035354();
  uint64_t v9 = (uint64_t *)(v7 - v8);
  __chkstk_darwin(v10);
  sub_100035400();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v18 - v12;
  if (!*(void *)(a3 + 16)) {
    return 0LL;
  }
  unint64_t v14 = sub_100033A58(0x646F6874656D5FLL, 0xE700000000000000LL);
  if ((v15 & 1) == 0) {
    return 0LL;
  }
  sub_100034734(*(void *)(a3 + 56) + *(void *)(v6 + 72) * v14, v3, type metadata accessor for EventValue);
  sub_10003499C(v3, (uint64_t)v13, type metadata accessor for EventValue);
  sub_100034734((uint64_t)v13, (uint64_t)v9, type metadata accessor for EventValue);
  uint64_t result = swift_getEnumCaseMultiPayload(v9, v5);
  if ((_DWORD)result != 2)
  {
    if ((_DWORD)result == 1)
    {
      uint64_t v17 = *v9;
    }

    else
    {
      sub_1000353C0(result, type metadata accessor for EventValue);
      uint64_t v17 = 0LL;
    }

    goto LABEL_10;
  }

  uint64_t v17 = *v9;
  if ((*v9 & 0x8000000000000000LL) == 0)
  {
LABEL_10:
    sub_1000353C0(result, type metadata accessor for EventValue);
    return v17;
  }

  __break(1u);
  return result;
}

uint64_t XPCMessage.MessageType.rawValue.getter(uint64_t result)
{
  return result;
}

unint64_t sub_1000310F0(unint64_t result)
{
  if (result >= 3) {
    return 3LL;
  }
  return result;
}

Swift::Int sub_100031100(uint64_t a1)
{
  return sub_100030E04(a1, *v1);
}

unint64_t sub_100031108@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000310F0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100031130@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = XPCMessage.MessageType.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

unint64_t sub_10003115C()
{
  unint64_t result = qword_10008B8F0;
  if (!qword_10008B8F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006AD88, &unk_1000840F0);
    atomic_store(result, (unint64_t *)&qword_10008B8F0);
  }

  return result;
}

uint64_t sub_100031198@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v6 = v2;
  type metadata accessor for EventValue(0LL);
  sub_1000355EC();
  __chkstk_darwin(v9);
  sub_100035354();
  uint64_t v12 = v10 - v11;
  __chkstk_darwin(v13);
  sub_100035400();
  __chkstk_darwin(v14);
  uint64_t v109 = (char *)&v97 - v15;
  uint64_t v16 = sub_10001A74C(a1, (uint64_t)v116);
  if (sub_10003529C(v16, v17, v18, (uint64_t)&type metadata for String))
  {
    uint64_t v19 = v114;
    *a2 = (uint64_t)v113;
    a2[1] = (uint64_t)v19;
    uint64_t v20 = sub_10003530C();
    uint64_t v22 = 0LL;
    goto LABEL_17;
  }

  uint64_t v108 = v3;
  uint64_t v23 = sub_100013BB4(0LL, &qword_10008B8F8, &OBJC_CLASS___NSNumber_ptr);
  uint64_t v26 = sub_10003529C(v23, v24, v25, v23);
  if ((_DWORD)v26)
  {
    uint64_t v29 = v113;
    if (kCFBooleanTrue) {
      BOOL v30 = v113 == kCFBooleanTrue;
    }
    else {
      BOOL v30 = 0;
    }
    if (v30)
    {

      *(_BYTE *)a2 = 1;
      goto LABEL_16;
    }

    if (kCFBooleanFalse && v29 == kCFBooleanFalse)
    {
      *(_BYTE *)a2 = 0;
LABEL_16:
      uint64_t v20 = sub_10003530C();
      uint64_t v22 = 4LL;
      goto LABEL_17;
    }
  }

  uint64_t v31 = sub_10003529C(v26, v27, v28, (uint64_t)&type metadata for Int64);
  if ((_DWORD)v31)
  {
    *a2 = (uint64_t)v113;
    uint64_t v20 = sub_10003530C();
    uint64_t v22 = 1LL;
    goto LABEL_17;
  }

  uint64_t v34 = sub_10003529C(v31, v32, v33, (uint64_t)&type metadata for UInt64);
  if ((_DWORD)v34)
  {
    *a2 = (uint64_t)v113;
    uint64_t v20 = sub_10003530C();
    uint64_t v22 = 2LL;
    goto LABEL_17;
  }

  if (sub_10003529C(v34, v35, v36, (uint64_t)&type metadata for Double))
  {
    *a2 = (uint64_t)v113;
    uint64_t v20 = sub_10003530C();
    uint64_t v22 = 3LL;
    goto LABEL_17;
  }

  uint64_t v38 = sub_10000534C(&qword_10008B900);
  int v39 = swift_dynamicCast(&v117, v116, (char *)&type metadata for Any + 8, v38, 0LL);
  uint64_t v105 = v5;
  if (!v39)
  {
    uint64_t v80 = sub_10000534C(&qword_10008B908);
    if (!swift_dynamicCast(&v111, v116, (char *)&type metadata for Any + 8, v80, 0LL))
    {
      unint64_t v88 = sub_1000048AC();
      uint64_t v89 = swift_allocError(&unk_100084300, v88, 0LL, 0LL);
      swift_willThrow(v89, v90, v91, v92, v93, v94, v95, v96);
      return sub_100005F54(v116);
    }

    uint64_t v104 = a2;
    uint64_t v109 = v4;
    uint64_t v81 = v111;
    uint64_t v82 = sub_100005288();
    uint64_t v83 = *(void *)(v81 + 16);
    if (v83)
    {
      uint64_t v84 = v81 + 32;
      while (1)
      {
        sub_10001A74C(v84, (uint64_t)&v113);
        sub_100031198(&v113);
        if (v2) {
          break;
        }
        unint64_t v85 = *(void *)(v82 + 16);
        if (v85 >= *(void *)(v82 + 24) >> 1) {
          uint64_t v82 = sub_100005288();
        }
        *(void *)(v82 + swift_weakDestroy(v0 + 16) = v85 + 1;
        sub_100035528();
        sub_10003499C(v12, v82 + v86 + *(void *)(v87 + 72) * v85, type metadata accessor for EventValue);
        sub_100005F54(&v113);
        v84 += 32LL;
        if (!--v83) {
          goto LABEL_63;
        }
      }

      sub_100005F54(&v113);
      swift_bridgeObjectRelease(v82);
      sub_100006CAC();
      return sub_100005F54(v116);
    }

LABEL_63:
    sub_100006CAC();
    uint64_t v20 = (uint64_t)v104;
    *uint64_t v104 = v82;
    uint64_t v21 = v109;
    uint64_t v22 = 6LL;
LABEL_17:
    swift_storeEnumTagMultiPayload(v20, v21, v22);
    return sub_100005F54(v116);
  }

  uint64_t v40 = v117;
  uint64_t v41 = Dictionary.init(minimumCapacity:)( *(void *)(v117 + 16),  &type metadata for String,  v4,  &protocol witness table for String);
  int64_t v42 = 0LL;
  uint64_t v99 = v40 + 64;
  uint64_t v102 = v40;
  sub_100035328();
  unint64_t v45 = v44 & v43;
  uint64_t v101 = v112;
  uint64_t v103 = &v115;
  int64_t v100 = (unint64_t)(v46 + 63) >> 6;
  int64_t v98 = v100 - 1;
  uint64_t v104 = a2;
  if (!v45) {
    goto LABEL_25;
  }
LABEL_23:
  uint64_t v107 = (v45 - 1) & v45;
  unint64_t v47 = __clz(__rbit64(v45)) | (v42 << 6);
  while (2)
  {
    uint64_t v48 = *(void *)(v102 + 56);
    uint64_t v49 = (void *)(*(void *)(v102 + 48) + 16 * v47);
    uint64_t v50 = v49[1];
    *(void *)&__int128 v111 = *v49;
    *((void *)&v111 + 1) = v50;
    sub_10001A74C(v48 + 32 * v47, (uint64_t)v101);
    swift_bridgeObjectRetain(v50);
    while (1)
    {
      sub_1000347C4((uint64_t)&v111, (uint64_t)&v113, &qword_10008B918);
      uint64_t v56 = v114;
      if (!v114)
      {
        sub_100035610();
        *a2 = v41;
        uint64_t v20 = sub_10003530C();
        uint64_t v22 = 7LL;
        goto LABEL_17;
      }

      int64_t v106 = v42;
      CFBooleanRef v57 = v113;
      sub_100033FD8(v103, &v111);
      sub_100031198(&v111);
      if (v6)
      {
        swift_bridgeObjectRelease(v56);
        sub_100005F54(&v111);
        swift_bridgeObjectRelease(v41);
        sub_100035610();
        return sub_100005F54(v116);
      }

      uint64_t v58 = sub_1000355AC();
      sub_10003499C(v58, v59, type metadata accessor for EventValue);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v41);
      uint64_t v110 = v41;
      unint64_t v61 = sub_100035588();
      uint64_t v63 = *(void *)(v41 + 16);
      BOOL v64 = (v62 & 1) == 0;
      Swift::Int v65 = v63 + v64;
      if (__OFADD__(v63, v64))
      {
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }

      unint64_t v66 = v61;
      char v67 = v62;
      sub_10000534C((uint64_t *)&unk_10008B920);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v65))
      {
        unint64_t v68 = sub_100035588();
        if ((v67 & 1) != (v69 & 1)) {
          goto LABEL_73;
        }
        unint64_t v66 = v68;
      }

      uint64_t v41 = v110;
      if ((v67 & 1) != 0)
      {
        uint64_t v70 = sub_10003548C();
        sub_100034824(v70, v71, type metadata accessor for EventValue);
      }

      else
      {
        sub_100035558(v110 + 8 * (v66 >> 6));
        BOOL v72 = (CFBooleanRef *)(*(void *)(v41 + 48) + 16 * v66);
        *BOOL v72 = v57;
        v72[1] = v56;
        uint64_t v73 = sub_10003548C();
        sub_10003499C(v73, v74, type metadata accessor for EventValue);
        uint64_t v75 = *(void *)(v41 + 16);
        BOOL v76 = __OFADD__(v75, 1LL);
        uint64_t v77 = v75 + 1;
        if (v76) {
          goto LABEL_70;
        }
        *(void *)(v41 + swift_weakDestroy(v0 + 16) = v77;
        swift_bridgeObjectRetain(v56);
      }

      uint64_t v6 = 0LL;
      int64_t v42 = v106;
      swift_bridgeObjectRelease(v56);
      swift_bridgeObjectRelease(0x8000000000000000LL);
      sub_100005F54(&v111);
      a2 = v104;
      unint64_t v45 = v107;
      if (v107) {
        goto LABEL_23;
      }
LABEL_25:
      int64_t v51 = v42 + 1;
      if (__OFADD__(v42, 1LL)) {
        goto LABEL_71;
      }
      if (v51 < v100)
      {
        if (*(void *)(v99 + 8 * v51)) {
          goto LABEL_28;
        }
        v42 += 2LL;
        if (v51 + 1 >= v100)
        {
          int64_t v42 = v51;
          goto LABEL_33;
        }

        if (*(void *)(v99 + 8 * v42)) {
          goto LABEL_28;
        }
        if (v51 + 2 < v100) {
          break;
        }
      }

LABEL_33:
      uint64_t v107 = 0LL;
      memset(v112, 0, sizeof(v112));
      __int128 v111 = 0u;
    }

    if (*(void *)(v99 + 8 * (v51 + 2))) {
      goto LABEL_28;
    }
    int64_t v78 = v51 + 3;
    if (v51 + 3 >= v100)
    {
      int64_t v42 = v51 + 2;
      goto LABEL_33;
    }

    if (*(void *)(v99 + 8 * v78))
    {
LABEL_28:
      sub_100035518();
      uint64_t v107 = v53 & v52;
      unint64_t v47 = v55 + (v54 << 6);
      int64_t v42 = v54;
      continue;
    }

    break;
  }

  while (1)
  {
    int64_t v79 = v78 + 1;
    if (__OFADD__(v78, 1LL)) {
      break;
    }
    if (v79 >= v100)
    {
      int64_t v42 = v98;
      goto LABEL_33;
    }

    ++v78;
    if (*(void *)(v99 + 8 * v79)) {
      goto LABEL_28;
    }
  }

LABEL_72:
  __break(1u);
LABEL_73:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_1000318E0()
{
  uint64_t v25 = v0;
  uint64_t v26 = v1;
  uint64_t v2 = sub_10003563C();
  void v24[2] = *(void *)(v2 - 8);
  v24[3] = v2;
  sub_100010054();
  __chkstk_darwin(v3);
  uint64_t v5 = sub_1000353E0(v4, v24[0]);
  uint64_t v6 = type metadata accessor for EventValue(v5);
  sub_100006B54();
  __chkstk_darwin(v7);
  sub_100010040();
  v24[4] = v8;
  sub_1000101F8();
  __chkstk_darwin(v9);
  sub_1000354F0();
  __chkstk_darwin(v10);
  v24[5] = (uint64_t)v24 - v11;
  sub_1000101F8();
  __chkstk_darwin(v12);
  sub_100035400();
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v16 = __chkstk_darwin(v15);
  __chkstk_darwin(v16);
  sub_10000534C((uint64_t *)&unk_10008BA60);
  sub_100006B54();
  __chkstk_darwin(v17);
  sub_100006B64();
  uint64_t v20 = v19 - v18;
  uint64_t v22 = v19 - v18 + *(int *)(v21 + 48);
  sub_100034734(v25, v19 - v18, type metadata accessor for EventValue);
  sub_100034734(v26, v22, type metadata accessor for EventValue);
  uint64_t v23 = (char *)sub_100031A6C + 4 * byte_10006ACD6[swift_getEnumCaseMultiPayload(v20, v6)];
  __asm { BR              X10 }

uint64_t sub_100031A6C()
{
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  if (sub_1000352E4())
  {
    sub_100006BFC();
    sub_100035228(v0, (uint64_t *)&unk_10008BA60);
    goto LABEL_9;
  }

  uint64_t v5 = v1[1];
  if (v4 == *v1 && v3 == v5)
  {
    uint64_t v8 = swift_bridgeObjectRelease_n(v3, 2LL);
    goto LABEL_12;
  }

  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v3, *v1, v1[1], 0LL);
  swift_bridgeObjectRelease(v5);
  uint64_t v8 = sub_100006BFC();
  if ((v7 & 1) != 0)
  {
LABEL_12:
    sub_1000353C0(v8, type metadata accessor for EventValue);
    char v9 = 1;
    return v9 & 1;
  }

  sub_1000353C0(v8, type metadata accessor for EventValue);
LABEL_9:
  char v9 = 0;
  return v9 & 1;
}

void sub_100031D08()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for XPCObject(0LL);
  sub_100006B54();
  __chkstk_darwin(v5);
  sub_100006B64();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for EventValue(0LL);
  sub_100006B54();
  __chkstk_darwin(v10);
  sub_100006B64();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = sub_100035630();
  sub_100034734(v14, v15, type metadata accessor for XPCObject);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v4);
  switch((int)EnumCaseMultiPayload)
  {
    case 2:
      sub_10003534C(EnumCaseMultiPayload, type metadata accessor for XPCObject);
      *(_BYTE *)uint64_t v13 = *(_BYTE *)v8;
      uint64_t v17 = sub_1000352F8();
      uint64_t v19 = 4LL;
      goto LABEL_9;
    case 3:
    case 6:
      sub_10003534C(EnumCaseMultiPayload, type metadata accessor for XPCObject);
      *(void *)uint64_t v13 = *(void *)v8;
      uint64_t v17 = sub_1000352F8();
      uint64_t v19 = 1LL;
      goto LABEL_9;
    case 4:
      sub_10003534C(EnumCaseMultiPayload, type metadata accessor for XPCObject);
      *(void *)uint64_t v13 = *(void *)v8;
      uint64_t v17 = sub_1000352F8();
      uint64_t v19 = 2LL;
      goto LABEL_9;
    case 5:
      sub_10003534C(EnumCaseMultiPayload, type metadata accessor for XPCObject);
      *(void *)uint64_t v13 = *(void *)v8;
      uint64_t v17 = sub_1000352F8();
      uint64_t v19 = 3LL;
      goto LABEL_9;
    case 8:
      sub_10003534C(EnumCaseMultiPayload, type metadata accessor for XPCObject);
      uint64_t v20 = *(void *)(v8 + 8);
      *(void *)uint64_t v13 = *(void *)v8;
      *(void *)(v13 + 8) = v20;
      uint64_t v17 = sub_1000352F8();
      uint64_t v19 = 0LL;
      goto LABEL_9;
    case 9:
      sub_10003534C(EnumCaseMultiPayload, type metadata accessor for XPCObject);
      uint64_t v21 = sub_10003563C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32LL))(v13, v8, v21);
      uint64_t v17 = sub_1000352F8();
      uint64_t v19 = 5LL;
LABEL_9:
      swift_storeEnumTagMultiPayload(v17, v18, v19);
      break;
    case 11:
      uint64_t v26 = *(void **)v8;
      int64_t count = xpc_array_get_count(*(xpc_object_t *)v8);
      uint64_t v28 = _swiftEmptyArrayStorage;
      if (!swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage)
        || count > _swiftEmptyArrayStorage[3] >> 1)
      {
        uint64_t v28 = (void *)sub_100005288();
      }

      uint64_t v45 = (uint64_t)v28;
      uint64_t v29 = sub_100006B14((uint64_t)&unk_100084188, 24LL);
      *(void *)(v29 + swift_weakDestroy(v0 + 16) = &v45;
      uint64_t v30 = sub_100006B14((uint64_t)&unk_1000841B0, 32LL);
      *(void *)(v30 + swift_weakDestroy(v0 + 16) = sub_1000346FC;
      *(void *)(v30 + 24) = v29;
      uint64_t v31 = sub_1000355CC((uint64_t)sub_100032368);
      swift_retain(v30);
      swift_release(v30);
      xpc_array_apply(v26, v31);
      _Block_release(v31);
      uint64_t v32 = swift_unknownObjectRelease(v26);
      sub_10003534C(v32, type metadata accessor for XPCObject);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v30, "", 69LL, 95LL, 40LL, 1LL);
      swift_release(v30);
      if ((isEscapingClosureAtFileLocation & 1) != 0)
      {
        __break(1u);
LABEL_20:
        __break(1u);
        JUMPOUT(0x1000321D0LL);
      }

      *(void *)uint64_t v13 = v45;
      uint64_t v34 = sub_1000352F8();
      swift_storeEnumTagMultiPayload(v34, v35, 6LL);
      break;
    case 12:
      xpc_object_t v36 = *(xpc_object_t *)v8;
      uint64_t v45 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v9,  &protocol witness table for String);
      size_t v37 = xpc_dictionary_get_count(v36);
      sub_10000534C((uint64_t *)&unk_10008B930);
      Dictionary.reserveCapacity(_:)(v37);
      uint64_t v38 = sub_100006B14((uint64_t)&unk_100084110, 24LL);
      *(void *)(v38 + swift_weakDestroy(v0 + 16) = &v45;
      uint64_t v39 = sub_100006B14((uint64_t)&unk_100084138, 32LL);
      *(void *)(v39 + swift_weakDestroy(v0 + 16) = sub_1000346AC;
      *(void *)(v39 + 24) = v38;
      uint64_t v40 = sub_1000355CC((uint64_t)sub_100051B08);
      swift_unknownObjectRetain(v36);
      swift_retain(v39);
      swift_release(v39);
      xpc_dictionary_apply(v36, v40);
      _Block_release(v40);
      uint64_t v41 = swift_unknownObjectRelease_n(v36, 2LL);
      sub_10003534C(v41, type metadata accessor for XPCObject);
      char v42 = swift_isEscapingClosureAtFileLocation(v39, "", 69LL, 103LL, 49LL, 1LL);
      swift_release(v39);
      if ((v42 & 1) != 0) {
        goto LABEL_20;
      }
      *(void *)uint64_t v13 = v45;
      uint64_t v43 = sub_1000352F8();
      swift_storeEnumTagMultiPayload(v43, v44, 7LL);
      break;
    default:
      sub_10003561C(v1);
      sub_10003561C(v8);
      sub_100035594(v3, 1LL);
      goto LABEL_11;
  }

  sub_10003499C(v13, v3, type metadata accessor for EventValue);
  sub_100035594(v3, 0LL);
  uint64_t v22 = sub_100035630();
  sub_1000346E0(v22, v23);
  uint64_t v24 = sub_10003530C();
  sub_1000346E0(v24, v25);
LABEL_11:
  sub_100008348();
}

uint64_t sub_1000321FC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000534C(&qword_10008BFA0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10000534C(&qword_10008A800);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (void *)swift_unknownObjectRetain(a2);
  XPCObject.init(_:)(v11, (uint64_t)v7);
  uint64_t v12 = type metadata accessor for XPCObject(0LL);
  uint64_t result = _s10RTCUtility9XPCObjectOwet_0((uint64_t)v7, 1LL, v12);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    sub_100031D08(v7);
    uint64_t v14 = type metadata accessor for EventValue(0LL);
    uint64_t result = _s10RTCUtility9XPCObjectOwet_0((uint64_t)v10, 1LL, v14);
    if ((_DWORD)result != 1)
    {
      sub_1000339A0((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100005288);
      uint64_t v15 = *(void *)(*a3 + 16);
      sub_100033A18(v15, (uint64_t (*)(BOOL))sub_100005288);
      uint64_t v16 = *a3;
      *(void *)(v16 + swift_weakDestroy(v0 + 16) = v15 + 1;
      sub_10003499C( (uint64_t)v10,  v16 + ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL))
      + *(void *)(*(void *)(v14 - 8) + 72LL) * v15,
        type metadata accessor for EventValue);
      return 1LL;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_100032368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain(a3);
  char v6 = v5(a2, a3);
  swift_unknownObjectRelease(a3);
  return v6 & 1;
}

uint64_t sub_1000323B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000534C(&qword_10008BFA0);
  __chkstk_darwin(v4);
  char v6 = (char *)var50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10000534C(&qword_10008A800);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)var50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)var50 - v11;
  uint64_t v13 = type metadata accessor for EventValue(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)var50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = String.init(cString:)(a1);
  uint64_t v18 = v17;
  uint64_t v19 = (void *)swift_unknownObjectRetain(a2);
  XPCObject.init(_:)(v19, (uint64_t)v6);
  uint64_t v20 = type metadata accessor for XPCObject(0LL);
  uint64_t result = _s10RTCUtility9XPCObjectOwet_0((uint64_t)v6, 1LL, v20);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    sub_100031D08(v6);
    uint64_t result = _s10RTCUtility9XPCObjectOwet_0((uint64_t)v12, 1LL, v13);
    if ((_DWORD)result != 1)
    {
      sub_10003499C((uint64_t)v12, (uint64_t)v15, type metadata accessor for EventValue);
      sub_100034734((uint64_t)v15, (uint64_t)v10, type metadata accessor for EventValue);
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)v10, 0LL, 1LL, v13);
      sub_1000307F0( (uint64_t)v10,  v16,  v18,  (uint64_t)&qword_10008A800,  (uint64_t)type metadata accessor for EventValue,  (uint64_t)&unk_10008B920,  v22,  v23,  var50[0],  var50[1],  var50[2],  var50[3],  var50[4],  var50[5],  var50[6],  var50[7],  var50[8],  var50[9],  var50[10],  var50[11]);
      sub_100034760((uint64_t)v15, type metadata accessor for EventValue);
      return 1LL;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1000325A0()
{
  return dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
}

uint64_t sub_1000325DC()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_100032608@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = XPCIncomingConnection.init(conn:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10003262C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000325A0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100032650(uint64_t a1)
{
  unint64_t v2 = sub_100034788();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100032678(uint64_t a1)
{
  unint64_t v2 = sub_100034788();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000326A0()
{
  uint64_t v17 = sub_10000534C(&qword_10008B950);
  void v16[4] = *(void *)(v17 - 8);
  sub_100010054();
  __chkstk_darwin(v2);
  uint64_t v4 = sub_1000353E0(v3, v16[0]);
  v16[5] = *(void *)(type metadata accessor for UUID(v4) - 8);
  sub_100010054();
  __chkstk_darwin(v5);
  uint64_t v6 = sub_1000156AC();
  uint64_t v7 = type metadata accessor for EventValue(v6);
  v16[6] = *(void *)(v7 - 8);
  sub_100010054();
  __chkstk_darwin(v8);
  sub_100010040();
  v16[7] = v9;
  sub_1000101F8();
  __chkstk_darwin(v10);
  sub_1000354F0();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v16 - v12;
  sub_100034734(v18, (uint64_t)v16 - v12, v14);
  uint64_t v18 = v7;
  uint64_t v15 = (char *)&loc_1000327EC + dword_100032D24[swift_getEnumCaseMultiPayload(v13, v7)];
  __asm { BR              X10 }

uint64_t sub_1000327FC()
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  sub_100005F30(v0, v4);
  dispatch thunk of Encoder.singleValueContainer()(v4, v5);
  sub_1000347FC(v2 - 120, *(void *)(v2 - 96));
  uint64_t v6 = sub_1000355AC();
  ((void (*)(uint64_t))dispatch thunk of SingleValueEncodingContainer.encode(_:))(v6);
  swift_bridgeObjectRelease(v3);
  return sub_100005F54((void *)(v2 - 120));
}

void sub_100032D44()
{
}

unint64_t sub_100032D58()
{
  return sub_10003543C();
}

unint64_t sub_100032D64()
{
  return 0xD000000000000021LL;
}

void sub_100032D80()
{
  v15[7] = (char *)v15 - v3;
  sub_10003563C();
  sub_1000355EC();
  __chkstk_darwin(v4);
  uint64_t v5 = sub_1000156AC();
  uint64_t v6 = type metadata accessor for EventValue(v5);
  v15[6] = *(void *)(v6 - 8);
  sub_100010054();
  __chkstk_darwin(v7);
  sub_100035354();
  __chkstk_darwin(v8);
  v15[10] = (char *)v15 - v9;
  sub_1000101F8();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v15 - v11;
  sub_100034734(v0, (uint64_t)v15 - v11, v13);
  uint64_t v14 = (char *)&loc_100032E8C + *((int *)qword_100033430 + swift_getEnumCaseMultiPayload(v12, v6));
  __asm { BR              X10 }

NSString sub_100032E9C()
{
  uint64_t v1 = *(void *)(v0 + 8);
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  return v2;
}

uint64_t sub_100033450(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventValue(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }

    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_100034734(a1 + v12, (uint64_t)v10, type metadata accessor for EventValue);
        sub_100034734(a2 + v12, (uint64_t)v7, type metadata accessor for EventValue);
        char v15 = sub_1000318E0(v10, v7);
        sub_100034760((uint64_t)v7, type metadata accessor for EventValue);
        sub_100034760((uint64_t)v10, type metadata accessor for EventValue);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }

      while (v17);
    }
  }

  else
  {
    char v15 = 0;
  }

  return v15 & 1;
}

void sub_10003358C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventValue(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v47 = (uint64_t)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v41 - v8;
  uint64_t v10 = sub_10000534C(&qword_10008B028);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v11);
  char v15 = (uint64_t *)((char *)&v41 - v14);
  if (a1 == a2 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  int64_t v48 = 0LL;
  uint64_t v45 = a1;
  uint64_t v46 = v5;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v17 = a1 + 64;
  uint64_t v16 = v18;
  uint64_t v19 = 1LL << *(_BYTE *)(v17 - 32);
  uint64_t v20 = -1LL;
  if (v19 < 64) {
    uint64_t v20 = ~(-1LL << v19);
  }
  unint64_t v21 = v20 & v16;
  uint64_t v43 = v17;
  int64_t v44 = (unint64_t)(v19 + 63) >> 6;
  int64_t v42 = v44 - 1;
  while (1)
  {
    if (v21)
    {
      unint64_t v22 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v23 = v22 | (v48 << 6);
LABEL_8:
      uint64_t v24 = *(void *)(v45 + 56);
      uint64_t v25 = (void *)(*(void *)(v45 + 48) + 16 * v23);
      uint64_t v26 = v25[1];
      *uint64_t v13 = *v25;
      v13[1] = v26;
      uint64_t v27 = v24 + *(void *)(v5 + 72) * v23;
      uint64_t v28 = sub_10000534C((uint64_t *)&unk_10008B960);
      sub_100034734(v27, (uint64_t)v13 + *(int *)(v28 + 48), type metadata accessor for EventValue);
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)v13, 0LL, 1LL, v28);
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }

    int64_t v29 = v48 + 1;
    if (__OFADD__(v48, 1LL))
    {
      __break(1u);
      goto LABEL_38;
    }

    if (v29 < v44)
    {
      unint64_t v30 = *(void *)(v43 + 8 * v29);
      if (v30) {
        goto LABEL_12;
      }
      int64_t v31 = v48 + 2;
      ++v48;
      if (v29 + 1 < v44)
      {
        unint64_t v30 = *(void *)(v43 + 8 * v31);
        if (v30) {
          goto LABEL_15;
        }
        int64_t v48 = v29 + 1;
        if (v29 + 2 < v44)
        {
          unint64_t v30 = *(void *)(v43 + 8 * (v29 + 2));
          if (v30)
          {
            v29 += 2LL;
            goto LABEL_12;
          }

          int64_t v48 = v29 + 2;
          if (v29 + 3 < v44)
          {
            unint64_t v30 = *(void *)(v43 + 8 * (v29 + 3));
            if (v30)
            {
              v29 += 3LL;
              goto LABEL_12;
            }

            int64_t v31 = v29 + 4;
            int64_t v48 = v29 + 3;
            if (v29 + 4 < v44) {
              break;
            }
          }
        }
      }
    }

LABEL_29:
    uint64_t v32 = sub_10000534C((uint64_t *)&unk_10008B960);
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v13, 1LL, 1LL, v32);
    unint64_t v21 = 0LL;
LABEL_30:
    sub_1000347C4((uint64_t)v13, (uint64_t)v15, &qword_10008B028);
    uint64_t v33 = sub_10000534C((uint64_t *)&unk_10008B960);
    uint64_t v35 = *v15;
    uint64_t v34 = v15[1];
    sub_10003499C((uint64_t)v15 + *(int *)(v33 + 48), (uint64_t)v9, type metadata accessor for EventValue);
    unint64_t v36 = sub_100033A58(v35, v34);
    LOBYTE(v35) = v37;
    swift_bridgeObjectRelease(v34);
    if ((v35 & 1) == 0)
    {
      sub_100034760((uint64_t)v9, type metadata accessor for EventValue);
      return;
    }

    uint64_t v5 = v46;
    uint64_t v38 = *(void *)(a2 + 56) + *(void *)(v46 + 72) * v36;
    uint64_t v39 = v47;
    sub_100034734(v38, v47, type metadata accessor for EventValue);
    char v40 = sub_1000318E0(v39, v9);
    sub_100034760(v39, type metadata accessor for EventValue);
    sub_100034760((uint64_t)v9, type metadata accessor for EventValue);
    if ((v40 & 1) == 0) {
      return;
    }
  }

  unint64_t v30 = *(void *)(v43 + 8 * v31);
  if (v30)
  {
LABEL_15:
    int64_t v29 = v31;
LABEL_12:
    unint64_t v21 = (v30 - 1) & v30;
    unint64_t v23 = __clz(__rbit64(v30)) + (v29 << 6);
    int64_t v48 = v29;
    goto LABEL_8;
  }

  while (1)
  {
    int64_t v29 = v31 + 1;
    if (__OFADD__(v31, 1LL)) {
      break;
    }
    if (v29 >= v44)
    {
      int64_t v48 = v42;
      goto LABEL_29;
    }

    unint64_t v30 = *(void *)(v43 + 8 * v29);
    ++v31;
    if (v30) {
      goto LABEL_12;
    }
  }

LABEL_38:
  __break(1u);
}

uint64_t sub_10003397C()
{
  return sub_1000339A0((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100004F0C);
}

uint64_t sub_100033988()
{
  return sub_1000339A0((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100005250);
}

uint64_t sub_100033994()
{
  return sub_1000339A0((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10000526C);
}

uint64_t sub_1000339A0(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v1);
  uint64_t *v1 = v3;
  if (!(_DWORD)result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1LL, 1LL, v3);
    uint64_t *v1 = result;
  }

  return result;
}

uint64_t sub_1000339F4(uint64_t a1)
{
  return sub_100033A18(a1, (uint64_t (*)(BOOL))sub_100004F0C);
}

uint64_t sub_100033A00(uint64_t a1)
{
  return sub_100033A18(a1, (uint64_t (*)(BOOL))sub_100005250);
}

uint64_t sub_100033A0C(uint64_t a1)
{
  return sub_100033A18(a1, (uint64_t (*)(BOOL))sub_10000526C);
}

uint64_t sub_100033A18(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24LL);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    uint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }

  return result;
}

unint64_t sub_100033A58(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_1000352F8();
  return sub_1000345C0(v5, v6, v7);
}

unint64_t sub_100033AB0(unsigned __int8 a1, uint64_t a2)
{
  Swift::Int v4 = sub_100035304();
  return sub_100034850(a1, v4);
}

uint64_t sub_100033AFC@<X0>(uint64_t a1@<X8>)
{
  return sub_100033B10((uint64_t *)&unk_10008B970, type metadata accessor for CachedStorebag, a1);
}

uint64_t sub_100033B10@<X0>(uint64_t *a1@<X2>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3;
  uint64_t v8 = *v3;
  swift_bridgeObjectRetain(*v3);
  uint64_t v9 = sub_100035630();
  unint64_t v11 = sub_100033A58(v9, v10);
  char v13 = v12;
  swift_bridgeObjectRelease(v8);
  if ((v13 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
    uint64_t v24 = *v6;
    uint64_t v15 = *v6;
    *uint64_t v6 = 0x8000000000000000LL;
    Swift::Int v16 = *(void *)(v15 + 24);
    sub_10000534C(a1);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v16);
    swift_bridgeObjectRelease(*(void *)(*(void *)(v24 + 48) + 16 * v11 + 8));
    uint64_t v17 = *(void *)(v24 + 56);
    uint64_t v18 = a2(0LL);
    sub_10003499C(v17 + *(void *)(*(void *)(v18 - 8) + 72LL) * v11, a3, a2);
    uint64_t v19 = sub_100035630();
    _NativeDictionary._delete(at:)(v19, v20);
    uint64_t v21 = *v6;
    *uint64_t v6 = v24;
    swift_bridgeObjectRelease(v21);
    return _s10RTCUtility9XPCObjectOwst_0(a3, 0LL, 1LL, v18);
  }

  else
  {
    uint64_t v23 = a2(0LL);
    return _s10RTCUtility9XPCObjectOwst_0(a3, 1LL, 1LL, v23);
  }

uint64_t sub_100033C58(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_100033A58(a1, a2);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  char v9 = sub_1000355D8();
  uint64_t v17 = *v3;
  uint64_t v10 = *v3;
  *unint64_t v3 = 0x8000000000000000LL;
  Swift::Int v11 = *(void *)(v10 + 24);
  sub_10000534C(&qword_10008B328);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(v9, v11);
  swift_bridgeObjectRelease(*(void *)(*(void *)(v17 + 48) + 16 * v7 + 8));
  uint64_t v12 = *(void *)(*(void *)(v17 + 56) + 8 * v7);
  uint64_t v13 = sub_1000355AC();
  _NativeDictionary._delete(at:)(v13, v14);
  uint64_t v15 = *v3;
  *unint64_t v3 = v17;
  swift_bridgeObjectRelease(v15);
  return v12;
}

uint64_t sub_100033D5C@<X0>(uint64_t a1@<X8>)
{
  return sub_100033B10((uint64_t *)&unk_10008B990, type metadata accessor for CachedSession, a1);
}

void sub_100033D70()
{
  char v1 = v0;
  sub_100006BFC();
  if ((v1 & 1) != 0)
  {
    sub_1000355D8();
    sub_100035470();
    int v2 = sub_10000534C((uint64_t *)&unk_10008B940);
    BOOL v10 = sub_1000354A8(v2, v3, v4, v5, v6, v7, v8, v9, v18, v20);
    sub_100035414(v10, v11, v12, v13, v14, v15, v16, v17, v19, v21);
    type metadata accessor for Session(0LL);
    sub_100035624();
    sub_1000355E0();
  }

  sub_100035428();
}

void sub_100033DFC()
{
  char v1 = v0;
  sub_100006BFC();
  if ((v1 & 1) != 0)
  {
    sub_1000355D8();
    sub_100035470();
    int v2 = sub_10000534C(&qword_10008B988);
    BOOL v10 = sub_1000354A8(v2, v3, v4, v5, v6, v7, v8, v9, v19, v21);
    uint64_t v18 = sub_100035414(v10, v11, v12, v13, v14, v15, v16, v17, v20, v22);
    sub_100035644(v18, (unint64_t *)&qword_10008B980, &OBJC_CLASS___NSObject_ptr);
    sub_100035624();
    sub_1000355E0();
  }

  sub_100035428();
}

uint64_t sub_100033E94()
{
  uint64_t v1 = *v0;
  void *v0 = v3;
  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_100033F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100033F34(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000340F0);
}

uint64_t sub_100033F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100033F34(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000341FC);
}

uint64_t sub_100033F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100033F34(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_100034310);
}

uint64_t sub_100033F34(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *v4;
  *int v4 = v11;
  return swift_bridgeObjectRelease(v9);
}

uint64_t type metadata accessor for EventValue(uint64_t a1)
{
  uint64_t result = qword_10008BA18;
  if (!qword_10008BA18) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EventValue);
  }
  return result;
}

_OWORD *sub_100033FD8(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_100033FE8()
{
  __int128 v2 = v1;
  int v4 = v3;
  char v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  sub_100035548(v11, v9, v7);
  sub_10003564C();
  if (v15)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v13;
  char v17 = v14;
  sub_10000534C(v4);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(v6 & 1, (Swift::Int)v0)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_100033A58(v10, v8);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = (void *)*v0;
  if ((v17 & 1) != 0)
  {
    uint64_t v21 = v20[7];
    uint64_t v22 = v2(0LL);
    sub_100034824(v12, v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v16, v2);
    sub_100008348();
  }

  else
  {
    sub_100034534(v16, v10, v8, v12, v20, v2);
    swift_bridgeObjectRetain(v8);
  }

void sub_1000340F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v11 = sub_100033A58(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v11;
  char v17 = v12;
  sub_10000534C(&qword_10008B328);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_100033A58(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if ((v17 & 1) != 0)
  {
    *(void *)(*(void *)(v20 + 56) + 8 * vswift_weakDestroy(v0 + 16) = a1;
  }

  else
  {
    sub_10003451C(v16, a2, a3, a1, v20);
    swift_bridgeObjectRetain(a3);
  }

void sub_1000341FC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v11 = sub_100033A58(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v11;
  char v17 = v12;
  sub_10000534C((uint64_t *)&unk_10008B940);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_100033A58(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if ((v17 & 1) != 0)
  {
    uint64_t v21 = *(void *)(v20 + 56);
    swift_release(*(void *)(v21 + 8 * v16));
    *(void *)(v21 + 8 * vswift_weakDestroy(v0 + 16) = a1;
  }

  else
  {
    sub_10003451C(v16, a2, a3, a1, v20);
    swift_bridgeObjectRetain(a3);
  }

void sub_100034310(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v11 = sub_100033A58(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v11;
  char v17 = v12;
  sub_10000534C(&qword_10008B9A0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_100033A58(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if ((v17 & 1) != 0)
  {
    uint64_t v21 = *(void *)(v20 + 56);
    swift_bridgeObjectRelease(*(void *)(v21 + 8 * v16));
    *(void *)(v21 + 8 * vswift_weakDestroy(v0 + 16) = a1;
  }

  else
  {
    sub_10003451C(v16, a2, a3, a1, v20);
    swift_bridgeObjectRetain(a3);
  }

void sub_100034424(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (v11)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v12 = v9;
  char v13 = v10;
  sub_10000534C(&qword_10008B988);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, (Swift::Int)v4)) {
    goto LABEL_5;
  }
  uint64_t v14 = sub_1000352F8();
  unint64_t v16 = sub_100033A58(v14, v15);
  if ((v13 & 1) != (v17 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v12 = v16;
LABEL_5:
  uint64_t v18 = *v4;
  if ((v13 & 1) != 0)
  {
    uint64_t v19 = *(void *)(v18 + 56);

    *(void *)(v19 + 8 * v12) = a1;
  }

  else
  {
    sub_10003451C(v12, a2, a3, a1, v18);
    swift_bridgeObjectRetain();
  }

void sub_10003451C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (v7) {
    __break(1u);
  }
  else {
    sub_100035600(v5, v6);
  }
}

void sub_100034534( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(void))
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  char v10 = (void *)(a5[6] + 16 * a1);
  *char v10 = a2;
  v10[1] = a3;
  uint64_t v11 = a5[7];
  uint64_t v12 = a6(0LL);
  sub_10003499C(a4, v11 + *(void *)(*(void *)(v12 - 8) + 72LL) * a1, a6);
  uint64_t v13 = a5[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
  }

  else
  {
    a5[2] = v15;
    sub_100006AB8();
  }

unint64_t sub_1000345C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        BOOL v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

uint64_t sub_1000346A0()
{
  return sub_1000352F0(v0, 24LL);
}

uint64_t sub_1000346AC(uint64_t a1, uint64_t a2)
{
  return sub_1000323B8(a1, a2);
}

uint64_t sub_1000346B4()
{
  return sub_1000352F0(v0, 32LL);
}

uint64_t sub_1000346C0(uint64_t a1, uint64_t a2)
{
  return sub_100051AE4(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_1000346C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000346D8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000346E0(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_1000346F0()
{
  return sub_1000352F0(v0, 24LL);
}

uint64_t sub_1000346FC(uint64_t a1, uint64_t a2)
{
  return sub_1000321FC(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_100034704()
{
  return sub_1000352F0(v0, 32LL);
}

uint64_t sub_100034710()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

void sub_100034734(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_100035364(a1, a2, a3);
  sub_100035380(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_100006B44();
}

void sub_100034760(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0LL);
  sub_10003545C(v2);
  sub_100006B44();
}

unint64_t sub_100034788()
{
  unint64_t result = qword_10008B958;
  if (!qword_10008B958)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006AF28, &unk_100084258);
    atomic_store(result, (unint64_t *)&qword_10008B958);
  }

  return result;
}

void sub_1000347C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_10000534C(a3);
  sub_100035380(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_100006B44();
}

uint64_t sub_1000347FC(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

void sub_100034824(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_100035364(a1, a2, a3);
  sub_100035380(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 40LL));
  sub_100006B44();
}

unint64_t sub_100034850(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
      }
    }
  }

  return result;
}

void sub_1000348F0(uint64_t a1, char a2)
{
  uint64_t v5 = *v2;
  char isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *uint64_t v2 = v5;
  uint64_t v7 = 0LL;
  if ((isUniquelyReferenced_nonNull_bridgeObject & 1) != 0
    && (v5 & 0x8000000000000000LL) == 0
    && (v5 & 0x4000000000000000LL) == 0)
  {
    if (a1 <= *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_12;
    }
    uint64_t v7 = 1LL;
  }

  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    __n128 v11 = swift_bridgeObjectRetain(v5);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v10, v11);
    sub_100006AF0();
  }

  else
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v8 <= a1) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = v8;
  }
  *uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v9, a2 & 1, v5);
LABEL_12:
  sub_100006AB8();
}

void sub_10003499C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_100035364(a1, a2, a3);
  sub_100035380(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_100006B44();
}

void *sub_1000349C8(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_1000349F4(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *sub_1000349FC(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

void *sub_100034A3C(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_100034A6C(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(sub_10002C758(90LL, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_10002C758(90LL, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_10002C758(90LL, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100034AAC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for EventValue.CodingKeys()
{
}

void *sub_100034AF4(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = a2[2];
  uint64_t v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t sub_100034B60(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(*(void *)(a1 + 16));
  uint64_t v4 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = a2[1];
  swift_bridgeObjectRelease(v4);
  return a1;
}

void type metadata accessor for CachedEvent()
{
}

void type metadata accessor for BadCachedEvent()
{
}

void sub_100034BC0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  sub_1000083B0();
  sub_100006B44();
}

void type metadata accessor for Event()
{
}

uint64_t *sub_100034C00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v12);
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        swift_bridgeObjectRetain(v8);
        uint64_t v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 0LL;
        goto LABEL_9;
      case 5u:
        uint64_t v13 = type metadata accessor for UUID(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
        uint64_t v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 5LL;
        goto LABEL_9;
      case 6u:
        uint64_t v14 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v14);
        uint64_t v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 6LL;
        goto LABEL_9;
      case 7u:
        uint64_t v15 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v15);
        uint64_t v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 7LL;
LABEL_9:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

uint64_t sub_100034D24(uint64_t *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
      uint64_t v4 = a1[1];
      goto LABEL_4;
    case 5:
      uint64_t v5 = type metadata accessor for UUID(0LL);
      uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v5 - 8) + 8LL))(a1, v5);
      break;
    case 6:
    case 7:
      uint64_t v4 = *a1;
LABEL_4:
      uint64_t result = swift_bridgeObjectRelease(v4);
      break;
    default:
      return result;
  }

  return result;
}

void *sub_100034DA4(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain(v6);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 0LL;
      goto LABEL_7;
    case 5u:
      uint64_t v10 = type metadata accessor for UUID(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 5LL;
      goto LABEL_7;
    case 6u:
      uint64_t v11 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v11);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 6LL;
      goto LABEL_7;
    case 7u:
      uint64_t v12 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v12);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 7LL;
LABEL_7:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

void *sub_100034EA0(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100034760((uint64_t)a1, type metadata accessor for EventValue);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        *a1 = *a2;
        uint64_t v6 = a2[1];
        a1[1] = v6;
        swift_bridgeObjectRetain(v6);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 0LL;
        goto LABEL_8;
      case 5u:
        uint64_t v10 = type metadata accessor for UUID(0LL);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 5LL;
        goto LABEL_8;
      case 6u:
        uint64_t v11 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v11);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 6LL;
        goto LABEL_8;
      case 7u:
        uint64_t v12 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v12);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 7LL;
LABEL_8:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

void *sub_100034FBC(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 5)
  {
    uint64_t v6 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 5LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *sub_100035048(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100034760((uint64_t)a1, type metadata accessor for EventValue);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 5)
    {
      uint64_t v6 = type metadata accessor for UUID(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 5LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_1000350F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_100035108(uint64_t a1)
{
  v4[0] = &unk_10006AE10;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = &unk_10006AE28;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[5] = *(void *)(result - 8) + 64LL;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 8LL, v4);
    return 0LL;
  }

  return result;
}

unint64_t sub_1000351AC()
{
  unint64_t result = qword_10008BA50;
  if (!qword_10008BA50)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006AED8, &unk_100084258);
    atomic_store(result, (unint64_t *)&qword_10008BA50);
  }

  return result;
}

unint64_t sub_1000351EC()
{
  unint64_t result = qword_10008BA58;
  if (!qword_10008BA58)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006AF00, &unk_100084258);
    atomic_store(result, (unint64_t *)&qword_10008BA58);
  }

  return result;
}

void sub_100035228(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_10000534C(a2);
  sub_10003545C(v2);
  sub_100006B44();
}

unint64_t sub_100035260(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1LL << result;
  uint64_t v5 = (void *)(*(void *)(a5 + 48) + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(*(void *)(a5 + 56) + 8 * result) = a4;
  return result;
}

uint64_t sub_10003529C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v5 - 168, v5 - 120, v4, a4, 0LL);
}

uint64_t sub_1000352B0(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_1000352B8()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  sub_100005F30(v0, v1);
  return dispatch thunk of Encoder.singleValueContainer()(v1, v2);
}

uint64_t sub_1000352E4()
{
  return swift_getEnumCaseMultiPayload(v1, v0);
}

uint64_t sub_1000352F0(uint64_t a1, uint64_t a2)
{
  return swift_deallocObject(a1, a2, 7LL);
}

uint64_t sub_1000352F8()
{
  return v0;
}

Swift::Int sub_100035304()
{
  return Hasher._finalize()();
}

uint64_t sub_10003530C()
{
  return v0;
}

uint64_t sub_100035318()
{
  return sub_1000347FC(v0 - 120, *(void *)(v0 - 96));
}

  ;
}

uint64_t sub_100035344(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, v2);
}

void sub_10003534C(uint64_t a1, uint64_t (*a2)(void))
{
}

  ;
}

uint64_t sub_100035364(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3(0LL);
}

void *sub_100035374(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, 0LL);
}

uint64_t sub_100035380@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_10003538C()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  sub_100005F30(v0, v1);
  return dispatch thunk of Encoder.singleValueContainer()(v1, v2);
}

void *sub_1000353B8(uint64_t a1, uint64_t a2, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, a1);
}

void sub_1000353C0(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_1000353C8()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_1000353E0@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return 0LL;
}

  ;
}

uint64_t sub_100035414( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_bridgeObjectRelease(*(void *)(*(void *)(a10 + 48) + 16 * v10 + 8));
}

  ;
}

unint64_t sub_10003543C()
{
  return 0xD000000000000021LL;
}

void sub_100035450(uint64_t a1@<X8>)
{
}

uint64_t sub_10003545C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

void sub_100035470()
{
  void *v0 = 0x8000000000000000LL;
}

uint64_t sub_10003548C()
{
  return v0;
}

BOOL sub_1000354A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

void sub_1000354BC()
{
  void *v0 = 0x8000000000000000LL;
}

uint64_t sub_1000354D8()
{
  return v0;
}

  ;
}

  ;
}

  ;
}

  ;
}

unint64_t sub_100035538()
{
  return sub_100033A58(v1, v0);
}

unint64_t sub_100035548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100033A58(a2, a3);
}

void sub_100035558(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) |= 1LL << v1;
}

  ;
}

unint64_t sub_100035588()
{
  return sub_100033A58(v1, v0);
}

uint64_t sub_100035594(uint64_t a1, uint64_t a2)
{
  return _s10RTCUtility9XPCObjectOwst_0(a1, a2, 1LL, v2);
}

void sub_1000355A0(uint64_t a1, ...)
{
}

uint64_t sub_1000355AC()
{
  return v0;
}

  ;
}

void *sub_1000355CC@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 120) = a1;
  *(void *)(v2 - 112) = v1;
  return _Block_copy((const void *)(v2 - 136));
}

uint64_t sub_1000355D8()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_1000355E0()
{
  uint64_t v2 = *v0;
  uint64_t *v0 = v1;
  return swift_bridgeObjectRelease(v2);
}

  ;
}

void sub_100035600(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = a2;
}

uint64_t sub_100035608()
{
  return sub_10000534C(v0);
}

uint64_t sub_100035610()
{
  return swift_release(*(void *)(v0 - 296));
}

void sub_10003561C(uint64_t a1)
{
}

uint64_t sub_100035624()
{
  return _NativeDictionary._delete(at:)(v0, v1);
}

uint64_t sub_100035630()
{
  return v0;
}

uint64_t sub_10003563C()
{
  return type metadata accessor for UUID(0LL);
}

uint64_t sub_100035644(uint64_t a1, unint64_t *a2, void *a3)
{
  return sub_100013BB4(0LL, a2, a3);
}

  ;
}

unint64_t sub_100035660(Swift::String string)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100081AB8, v3);
  sub_1000371F0();
  if (v1 >= 4) {
    return 4LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000356A4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000356D0 + 4 * byte_10006AFC0[a1]))( 1701606770LL,  0xE400000000000000LL);
}

unint64_t sub_1000356D8()
{
  return 0xD000000000000012LL;
}

uint64_t sub_1000356F4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100035720 + 4 * byte_10006AFC4[a1]))( 1701606770LL,  0xE400000000000000LL);
}

unint64_t sub_100035728()
{
  return 0xD000000000000012LL;
}

void sub_100035744(char *a1)
{
}

void sub_100035750()
{
}

void sub_100035758(uint64_t a1)
{
}

void sub_100035760(uint64_t a1)
{
}

unint64_t sub_100035768@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100035660(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100035794@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000356A4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000357BC()
{
  return sub_1000356F4(*v0);
}

uint64_t sub_1000357C4@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000356A0(a1);
  *a2 = result;
  return result;
}

void sub_1000357E8(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1000357F4(uint64_t a1)
{
  unint64_t v2 = sub_1000368B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003581C(uint64_t a1)
{
  unint64_t v2 = sub_1000368B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

Class sub_100035844()
{
  unint64_t v1 = sub_100035A48();
  Dictionary.init(minimumCapacity:)(4LL, &type metadata for String, v1, &protocol witness table for String);
  sub_1000371FC();
  sub_1000370B4();
  uint64_t v2 = sub_1000370FC();
  sub_100034424(v2, 1701606770LL, 0xE400000000000000LL, v3);
  sub_1000370C0();
  [objc_allocWithZone(NSNumber) initWithChar:*(char *)(v0 + 16)];
  sub_1000370B4();
  uint64_t v4 = sub_1000370FC();
  sub_10003721C(v4, 0x6E6F6973726576LL, v5, v6);
  sub_1000370C0();
  String._bridgeToObjectiveC()();
  sub_1000370B4();
  uint64_t v7 = sub_1000370FC();
  sub_10003721C(v7, 0x63736A5F343662LL, v8, v9);
  uint64_t v10 = __dst[0];
  sub_1000370C0();
  uint64_t v11 = *(void *)(v0 + 40);
  uint64_t v23 = v11;
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)(v12);
    uint64_t v13 = (char *)(v11 + 32);
    do
    {
      memcpy(__dst, v13, sizeof(__dst));
      sub_10003660C(__dst);
      Class v14 = sub_100035A84();
      uint64_t v15 = sub_10003667C(__dst);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
      uint64_t v16 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
      uint64_t v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
      specialized ContiguousArray._endMutation()(v17);
      v13 += 88;
      --v12;
    }

    while (v12);
    sub_10000ECEC(&v23);
  }

  Class isa = sub_1000371E4().super.isa;
  sub_10000FFD8();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
  sub_1000371B0((uint64_t)isa, v20, 0x800000010006CDC0LL, isUniquelyReferenced_nonNull_native);
  sub_1000370C0();
  Class v21 = sub_1000371D8().super.isa;
  sub_10000FFD8();
  return v21;
}

unint64_t sub_100035A48()
{
  unint64_t result = qword_10008B980;
  if (!qword_10008B980)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSObject);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10008B980);
  }

  return result;
}

Class sub_100035A84()
{
  uint64_t v1 = v0;
  unint64_t v2 = sub_100035A48();
  Dictionary.init(minimumCapacity:)(2LL, &type metadata for String, v2, &protocol witness table for String);
  sub_1000371FC();
  sub_1000370B4();
  uint64_t v3 = sub_1000371BC();
  sub_10003721C(v3, 0x7972617262696CLL, v4, v5);
  sub_1000370C0();
  String._bridgeToObjectiveC()();
  sub_1000370B4();
  uint64_t v6 = sub_1000371BC();
  sub_100034424(v6, 7496054LL, 0xE300000000000000LL, v7);
  uint64_t v8 = v41[0];
  uint64_t v35 = v41[0];
  sub_1000370C0();
  sub_1000366EC(v1 + 32, (uint64_t)v38);
  sub_1000366EC((uint64_t)v38, (uint64_t)v39);
  if (v39[1])
  {
    String._bridgeToObjectiveC()();
    sub_1000370B4();
    v41[0] = v8;
    uint64_t v9 = sub_100037208();
    sub_100034424(v9, v10, v11, v12);
    uint64_t v35 = v41[0];
    sub_1000370C0();
  }

  else
  {
    sub_100033DFC();
  }

  sub_1000366EC(v1 + 48, (uint64_t)v37);
  sub_1000366EC((uint64_t)v37, (uint64_t)v40);
  if (v40[1])
  {
    String._bridgeToObjectiveC()();
    sub_1000370D8();
    v41[0] = v35;
    uint64_t v14 = sub_100037208();
    sub_1000371B0(v14, v15, v16, v17);
    uint64_t v35 = v41[0];
    sub_1000370C0();
  }

  else
  {
    sub_100033DFC();
  }

  uint64_t v19 = *(void *)(v1 + 64);
  if (v19)
  {
    v41[0] = _swiftEmptyArrayStorage;
    uint64_t v20 = *(void *)(v19 + 16);
    swift_bridgeObjectRetain();
    sub_1000348F0(v20, 0);
    ((void (*)(void))specialized Array._endMutation())();
    if (v20)
    {
      Class v21 = (uint64_t *)(v19 + 40);
      do
      {
        uint64_t v22 = *v21;
        swift_bridgeObjectRetain();
        NSString v23 = String._bridgeToObjectiveC()();
        uint64_t v24 = swift_bridgeObjectRelease(v22);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v24);
        unint64_t v26 = *(void *)((v41[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v25 = *(void *)((v41[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v26 >= v25 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1LL);
        }
        v21 += 2;
        uint64_t v27 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v23);
        specialized Array._endMutation()(v27);
        --v20;
      }

      while (v20);
    }

    swift_bridgeObjectRelease(v19);
    Class isa = sub_1000371E4().super.isa;
    sub_10000FFD8();
    char v29 = sub_1000370D8();
    v36[0] = v35;
    sub_100034424((uint64_t)isa, 0xD000000000000011LL, 0x800000010006CE20LL, v29);
    sub_1000370C0();
  }

  sub_1000366EC(v1 + 72, (uint64_t)v36);
  sub_1000366EC((uint64_t)v36, (uint64_t)v41);
  if (v41[1])
  {
    NSString v30 = String._bridgeToObjectiveC()();
    char v31 = sub_1000370D8();
    sub_100034424((uint64_t)v30, 0x69745F7261646172LL, 0xEB00000000656C74LL, v31);
    sub_1000370C0();
  }

  else
  {
    sub_100033DFC();
  }

  Class v33 = sub_1000371D8().super.isa;
  sub_10000FFD8();
  return v33;
}

void sub_100035E1C(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000534C(&qword_10008BA70);
  __chkstk_darwin(v5);
  sub_100037190();
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100005F30(a1, v6);
  unint64_t v8 = sub_1000368B4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1000845B0, &unk_1000845B0, v8, v6, v7);
  if (v2)
  {
    sub_100021B2C();
  }

  else
  {
    v21[1] = 0;
    uint64_t v9 = sub_1000370E0();
    uint64_t v11 = v10;
    v21[0] = 1;
    __n128 v12 = swift_bridgeObjectRetain(v10);
    char v19 = KeyedDecodingContainer.decode(_:forKey:)(v21, v5, v12);
    v20[1] = 2;
    uint64_t v16 = sub_1000370E0();
    uint64_t v14 = v13;
    uint64_t v17 = sub_10000534C(&qword_10008BA80);
    v20[0] = 3;
    unint64_t v15 = sub_1000368F0();
    sub_1000083B0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v20, v5, v17, v15);
    sub_1000370C8();
    sub_1000083B0();
    sub_100037140();
    swift_bridgeObjectRelease(v14);
    sub_100006CAC();
    *(void *)a2 = v9;
    *(void *)(a2 + 8) = v11;
    *(_BYTE *)(a2 + swift_weakDestroy(v0 + 16) = v19;
    *(void *)(a2 + 24) = v16;
    *(void *)(a2 + 32) = v14;
    *(void *)(a2 + 40) = v18;
  }

  sub_100015624();
}

unint64_t sub_100036004(Swift::String string)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100081B38, v3);
  sub_1000371F0();
  if (v1 >= 6) {
    return 6LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_100036048(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10003607C + 4 * byte_10006AFC8[a1]))( 0x7972617262696CLL,  0xE700000000000000LL);
}

void sub_100036080()
{
}

unint64_t sub_1000360B0()
{
  return sub_100037164();
}

uint64_t sub_1000360BC()
{
  return 0x69745F7261646172LL;
}

uint64_t sub_1000360DC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100036110 + 4 * byte_10006AFCE[a1]))( 0x7972617262696CLL,  0xE700000000000000LL);
}

void sub_100036114()
{
}

unint64_t sub_100036144()
{
  return sub_100037164();
}

uint64_t sub_100036150()
{
  return 0x69745F7261646172LL;
}

void sub_100036170(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v6 = sub_10000534C(&qword_10008BAB0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100037190();
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100005F30(a1, v8);
  unint64_t v10 = sub_100036DFC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1000846D0, &unk_1000846D0, v10, v8, v9);
  if (v2)
  {
    sub_100021B2C();
  }

  else
  {
    uint64_t v34[2] = 0;
    uint64_t v11 = sub_1000370E0();
    v34[1] = 1;
    sub_100037158(v11, v12);
    uint64_t v29 = v8;
    uint64_t v26 = sub_1000370E0();
    v34[0] = 2;
    sub_100037158(v26, v13);
    uint64_t v14 = sub_1000370EC((uint64_t)v34);
    uint64_t v27 = v15;
    uint64_t v28 = v8;
    uint64_t v25 = v14;
    char v33 = 3;
    sub_100037158(v14, v15);
    uint64_t v24 = sub_1000370EC((uint64_t)&v33);
    uint64_t v17 = v16;
    uint64_t v18 = sub_10000534C(&qword_10008A858);
    char v32 = 4;
    unint64_t v19 = sub_100036E38();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v18, &v32, v6, v18, v19);
    char v31 = 5;
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_1000370EC((uint64_t)&v31);
    uint64_t v22 = v21;
    uint64_t v23 = v20;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
    sub_1000083B0();
    sub_100037140();
    sub_100010278();
    sub_100006BBC();
    sub_100006CAC();
    swift_bridgeObjectRelease(v28);
    sub_100006BBC();
    *a2 = v11;
    a2[1] = v29;
    a2[2] = v26;
    a2[3] = v28;
    a2[4] = v25;
    a2[5] = v27;
    a2[6] = v24;
    a2[7] = v17;
    a2[8] = v30;
    a2[9] = v23;
    a2[10] = v22;
  }

  sub_100015624();
}

double sub_100036484@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }

  return result;
}

void sub_1000364C4(char *a1)
{
}

void sub_1000364D0()
{
}

void sub_1000364D8(uint64_t a1)
{
}

void sub_1000364E0(uint64_t a1)
{
}

unint64_t sub_1000364E8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100036004(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100036514@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100036048(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10003653C()
{
  return sub_1000360DC(*v0);
}

uint64_t sub_100036544@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100036044(a1);
  *a2 = result;
  return result;
}

void sub_100036568(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_100036574(uint64_t a1)
{
  unint64_t v2 = sub_100036DFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003659C(uint64_t a1)
{
  unint64_t v2 = sub_100036DFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000365C4(void *a1@<X0>, void *a2@<X8>)
{
  if (!v2) {
    memcpy(a2, __src, 0x58uLL);
  }
}

void *sub_10003660C(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[8];
  swift_bridgeObjectRetain(a1[10]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

void *sub_10003667C(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[10];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t sub_1000366EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000534C(&qword_10008A880);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100036734(void *a1)
{
  return swift_bridgeObjectRelease(a1[5]);
}

uint64_t sub_100036764(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t sub_1000367C0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_10003684C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(*(void *)(a1 + 32));
  uint64_t v6 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  return a1;
}

void type metadata accessor for StorebagSectionRule()
{
}

unint64_t sub_1000368B4()
{
  unint64_t result = qword_10008BA78;
  if (!qword_10008BA78)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B180, &unk_1000845B0);
    atomic_store(result, (unint64_t *)&qword_10008BA78);
  }

  return result;
}

unint64_t sub_1000368F0()
{
  unint64_t result = qword_10008BA88;
  if (!qword_10008BA88)
  {
    uint64_t v1 = sub_10000E670(&qword_10008BA80);
    sub_100036954();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008BA88);
  }

  return result;
}

unint64_t sub_100036954()
{
  unint64_t result = qword_10008BA90;
  if (!qword_10008BA90)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B158, &unk_100084628);
    atomic_store(result, (unint64_t *)&qword_10008BA90);
  }

  return result;
}

uint64_t sub_100036990(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(sub_100026CF8(v2[30], v4) = 1;
  }
  else {
    LODWORD(sub_100026CF8(v2[30], v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000369DC + 4 * byte_10006AFD9[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100036A10 + 4 * byte_10006AFD4[v4]))();
}

uint64_t sub_100036A10(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100036A18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100036A20LL);
  }
  return result;
}

uint64_t sub_100036A2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100036A34LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100036A38(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100036A40(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for StorebagSectionRule.CodingKeys()
{
}

uint64_t sub_100036A58(void *a1)
{
  return swift_bridgeObjectRelease(a1[10]);
}

void *sub_100036AA0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v8 = a2[8];
  uint64_t v7 = a2[9];
  a1[8] = v8;
  a1[9] = v7;
  uint64_t v9 = a2[10];
  a1[10] = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

void *sub_100036B2C(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a1[8];
  uint64_t v13 = a2[8];
  a1[8] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v12);
  a1[9] = a2[9];
  uint64_t v14 = a2[10];
  uint64_t v15 = a1[10];
  a1[10] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

void *sub_100036C10(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

void *sub_100036C18(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = a1[3];
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = a1[5];
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  a1[6] = *(void *)(a2 + 48);
  swift_bridgeObjectRelease(a1[7]);
  uint64_t v10 = a1[8];
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a2 + 80);
  uint64_t v12 = a1[10];
  a1[9] = *(void *)(a2 + 72);
  a1[10] = v11;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_100036C9C(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 88))
    {
      LODWORD(sub_10002C758(90LL, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_10002C758(90LL, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_10002C758(90LL, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100036CDC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 88) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for StorebagSectionRuleRequiredLibraries()
{
}

unint64_t sub_100036D40()
{
  unint64_t result = qword_10008BA98;
  if (!qword_10008BA98)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B130, &unk_1000845B0);
    atomic_store(result, (unint64_t *)&qword_10008BA98);
  }

  return result;
}

unint64_t sub_100036D80()
{
  unint64_t result = qword_10008BAA0;
  if (!qword_10008BAA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B068, &unk_1000845B0);
    atomic_store(result, (unint64_t *)&qword_10008BAA0);
  }

  return result;
}

unint64_t sub_100036DC0()
{
  unint64_t result = qword_10008BAA8;
  if (!qword_10008BAA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B090, &unk_1000845B0);
    atomic_store(result, (unint64_t *)&qword_10008BAA8);
  }

  return result;
}

unint64_t sub_100036DFC()
{
  unint64_t result = qword_10008BAB8;
  if (!qword_10008BAB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B2C0, &unk_1000846D0);
    atomic_store(result, (unint64_t *)&qword_10008BAB8);
  }

  return result;
}

unint64_t sub_100036E38()
{
  unint64_t result = qword_10008BAC0;
  if (!qword_10008BAC0)
  {
    uint64_t v1 = sub_10000E670(&qword_10008A858);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008BAC0);
  }

  return result;
}

uint64_t sub_100036E94(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }

uint64_t sub_100036F1C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(sub_100026CF8(v2[30], v4) = 1;
  }
  else {
    LODWORD(sub_100026CF8(v2[30], v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_100036F68 + 4 * byte_10006AFE3[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100036F9C + 4 * byte_10006AFDE[v4]))();
}

uint64_t sub_100036F9C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100036FA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100036FACLL);
  }
  return result;
}

uint64_t sub_100036FB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100036FC0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_100036FC4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100036FCC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for StorebagSectionRuleRequiredLibraries.CodingKeys()
{
}

unint64_t sub_100036FE8()
{
  unint64_t result = qword_10008BAC8;
  if (!qword_10008BAC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B298, &unk_1000846D0);
    atomic_store(result, (unint64_t *)&qword_10008BAC8);
  }

  return result;
}

unint64_t sub_100037028()
{
  unint64_t result = qword_10008BAD0;
  if (!qword_10008BAD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B1D0, &unk_1000846D0);
    atomic_store(result, (unint64_t *)&qword_10008BAD0);
  }

  return result;
}

unint64_t sub_100037068()
{
  unint64_t result = qword_10008BAD8;
  if (!qword_10008BAD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B1F8, &unk_1000846D0);
    atomic_store(result, (unint64_t *)&qword_10008BAD8);
  }

  return result;
}

uint64_t sub_1000370A4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_1000370B4()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_1000370C0()
{
  return swift_bridgeObjectRelease(0x8000000000000000LL);
}

uint64_t sub_1000370C8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000370D8()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_1000370E0()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_1000370EC(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

uint64_t sub_1000370FC()
{
  return v0;
}

uint64_t sub_100037110()
{
  return 0x6E6F6973726576LL;
}

uint64_t sub_100037128()
{
  return 0x63736A5F343662LL;
}

uint64_t sub_100037140()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100037158(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

unint64_t sub_100037164()
{
  return 0xD000000000000011LL;
}

uint64_t sub_100037178()
{
  return 7496054LL;
}

uint64_t sub_100037188()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 96));
}

  ;
}

uint64_t sub_1000371A8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 104));
}

void sub_1000371B0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_1000371BC()
{
  return v0;
}

uint64_t sub_1000371D0()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 112));
}

NSDictionary sub_1000371D8()
{
  return Dictionary._bridgeToObjectiveC()();
}

NSArray sub_1000371E4()
{
  return Array._bridgeToObjectiveC()();
}

uint64_t sub_1000371F0()
{
  return swift_bridgeObjectRelease(v0);
}

NSString sub_1000371FC()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_100037208()
{
  return v0;
}

void sub_10003721C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t *sub_100037224(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for StorebagSharedValue(void *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *sub_100037258(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  return a1;
}

uint64_t *sub_1000372A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  return a1;
}

uint64_t sub_1000372E0(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(sub_10002C758(90LL, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(sub_10002C758(90LL, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100037320(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for StorebagSectionPerCountrySampling()
{
}

void type metadata accessor for StorebagBool()
{
}

uint64_t sub_10003737C(void *a1)
{
  uint64_t v4 = sub_10003A77C();
  dispatch thunk of Decoder.singleValueContainer()(v4);
  if (!v2)
  {
    sub_100005F30(v22, v22[3]);
    uint64_t v5 = sub_10003A77C();
    char v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v5);
    if (!v6)
    {
      uint64_t v1 = 1LL;
      goto LABEL_10;
    }

    if (v6 == 1)
    {
      uint64_t v1 = 0LL;
LABEL_10:
      sub_100005F54(v22);
      sub_10003A754();
      return v1;
    }

    uint64_t v8 = type metadata accessor for DecodingError(0LL);
    swift_allocError(v8, &protocol witness table for DecodingError, 0LL, 0LL);
    uint64_t v10 = v9;
    sub_10000534C(&qword_10008BAF8);
    *uint64_t v10 = &unk_1000848A0;
    uint64_t v11 = a1[3];
    uint64_t v12 = a1[4];
    uint64_t v1 = (uint64_t)sub_100005F30(a1, v11);
    uint64_t v13 = dispatch thunk of Decoder.codingPath.getter(v11, v12);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v13,  0xD00000000000001BLL,  0x800000010006EF70LL,  0LL);
    uint64_t v14 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v8 - 8) + 104LL))( v10,  enum case for DecodingError.typeMismatch(_:),  v8);
    swift_willThrow(v14, v15, v16, v17, v18, v19, v20, v21);
    sub_100005F54(v22);
  }

  sub_10003A754();
  return v1;
}

void sub_1000374F4(uint64_t a1, char a2)
{
}

uint64_t sub_100037514(uint64_t a1, uint64_t a2)
{
  if (v2 >= 0x18) {
    return 24LL;
  }
  else {
    return v2;
  }
}

uint64_t sub_100037560()
{
  uint64_t v0 = sub_10003A6D8();
  return ((uint64_t (*)(uint64_t))((char *)sub_100037584 + 4 * byte_10006B310[v1]))(v0);
}

uint64_t sub_100037588()
{
  return 0x6C72755F74736F70LL;
}

unint64_t sub_1000375A0()
{
  return 0xD000000000000012LL;
}

uint64_t sub_10003774C()
{
  return 0x5F656C6261736964LL;
}

void sub_10003776C(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_10000534C(&qword_10008BB20);
  __chkstk_darwin(v5);
  sub_100006B64();
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100005F30(a1, v6);
  unint64_t v8 = sub_100039EFC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_100084BC0, &unk_100084BC0, v8, v6, v7);
  if (v2)
  {
    uint64_t v166 = v2;
    unsigned int v9 = 0;
  }

  else
  {
    int64_t v106 = a2;
    LOBYTE(v108) = 0;
    uint64_t v15 = sub_10003A64C((uint64_t)&v108);
    uint64_t v17 = v16;
    LOBYTE(v108) = 1;
    sub_10003A66C(v15, v16);
    uint64_t v91 = v17;
    uint64_t v18 = sub_10003A64C((uint64_t)&v108);
    LOBYTE(v108) = 2;
    uint64_t v20 = v19;
    sub_10003A66C(v18, v19);
    uint64_t v21 = sub_10003A6C8();
    uint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)(v21, v22);
    uint64_t v90 = v20;
    uint64_t v25 = v24;
    uint64_t v105 = v23;
    LOBYTE(v108) = 3;
    sub_10003A66C(v23, v24);
    uint64_t v26 = sub_10003A6C8();
    uint64_t v89 = v25;
    uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v26);
    uint64_t v104 = v18;
    char v165 = v28 & 1;
    LOBYTE(v108) = 4;
    char v81 = v28;
    uint64_t v83 = sub_10003A64C((uint64_t)&v108);
    uint64_t v84 = v27;
    LOBYTE(v108) = 5;
    uint64_t v30 = v29;
    sub_10003A66C(v83, v29);
    uint64_t v31 = sub_10003A6C8();
    uint64_t v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v31);
    uint64_t v88 = v30;
    LOBYTE(v18) = v33;
    uint64_t v80 = v32;
    char v163 = v33 & 1;
    LOBYTE(v107[0]) = 6;
    unint64_t v34 = sub_100039F38();
    sub_10003A734((uint64_t)&unk_1000848A0, (uint64_t)v107, v5, (uint64_t)&unk_1000848A0, v34);
    uint64_t v79 = v34;
    char v77 = v18;
    char v78 = v108;
    uint64_t v35 = sub_10003A75C();
    LOBYTE(v107[0]) = 7;
    uint64_t v36 = sub_10003A774((unint64_t *)&qword_10008BAC0);
    uint64_t v37 = sub_10003A790();
    sub_10003A734(v37, v38, v39, v35, v36);
    uint64_t v40 = v108;
    LOBYTE(v107[0]) = 8;
    swift_bridgeObjectRetain();
    uint64_t v41 = sub_10003A790();
    uint64_t v86 = v35;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v41, v42, v43, v35, v36);
    uint64_t v44 = v36;
    uint64_t v45 = v108;
    LOBYTE(v108) = 9;
    uint64_t v103 = v45;
    swift_bridgeObjectRetain();
    uint64_t v76 = sub_10003A64C((uint64_t)&v108);
    uint64_t v102 = v46;
    uint64_t v166 = 0LL;
    sub_10003A75C();
    LOBYTE(v107[0]) = 10;
    uint64_t v47 = sub_10003A774(&qword_10008BB40);
    swift_bridgeObjectRetain();
    uint64_t v48 = sub_10003A704();
    sub_10003A544(v48, v49, v50, v51, v47);
    uint64_t v166 = v47;
    if (!v47)
    {
      LOBYTE(v107[0]) = 11;
      uint64_t v101 = v108;
      swift_bridgeObjectRetain();
      uint64_t v52 = sub_10003A704();
      sub_10003A544(v52, v53, v54, v55, 0LL);
      uint64_t v166 = 0LL;
      uint64_t v56 = v108;
      LOBYTE(v108) = 12;
      uint64_t v99 = v56;
      swift_bridgeObjectRetain();
      uint64_t v57 = sub_10003A740();
      uint64_t v75 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v57);
      uint64_t v166 = 0LL;
      char v59 = v58;
      char v160 = v58 & 1;
      LOBYTE(v107[0]) = 13;
      sub_10003A524((uint64_t)&unk_1000848A0);
      uint64_t v166 = 0LL;
      char v74 = v108;
      LOBYTE(v107[0]) = 14;
      sub_10003A524((uint64_t)&unk_1000848A0);
      uint64_t v166 = 0LL;
      char v73 = v108;
      uint64_t v60 = sub_10000534C(&qword_10008BB00);
      LOBYTE(v107[0]) = 15;
      uint64_t v61 = sub_10003A0A4(&qword_10008BB48, &qword_10008BB00);
      sub_10003A544(v60, (uint64_t)v107, v5, v60, v61);
      uint64_t v166 = 0LL;
      uint64_t v62 = v108;
      LOBYTE(v108) = 16;
      uint64_t v96 = v109;
      uint64_t v98 = v62;
      unsigned __int8 v94 = v110;
      sub_10000E870(v62, v109, v110);
      uint64_t v63 = sub_10003A740();
      uint64_t v72 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v63, v64);
      uint64_t v92 = v65;
      uint64_t v166 = 0LL;
      LOBYTE(v107[0]) = 17;
      swift_bridgeObjectRetain();
      sub_10003A524((uint64_t)&unk_1000848A0);
      uint64_t v166 = 0LL;
      char v71 = v108;
      LOBYTE(v107[0]) = 18;
      sub_10003A524((uint64_t)&unk_1000848A0);
      uint64_t v166 = 0LL;
      char v70 = v108;
      LOBYTE(v107[0]) = 19;
      sub_10003A544(v86, (uint64_t)v107, v5, v86, v44);
      uint64_t v166 = 0LL;
      LOBYTE(v107[0]) = 20;
      uint64_t v87 = v108;
      swift_bridgeObjectRetain();
      sub_10003A524((uint64_t)&unk_1000848A0);
      uint64_t v166 = 0LL;
      char v66 = v108;
      LOBYTE(v107[0]) = 21;
      sub_10003A524((uint64_t)&unk_1000848A0);
      uint64_t v166 = 0LL;
      char v69 = v108;
      uint64_t v67 = sub_10000534C(&qword_10008BB50);
      LOBYTE(v107[0]) = 22;
      unint64_t v68 = sub_100039FC8();
      sub_10003A544(v67, (uint64_t)v107, v5, v67, v68);
      uint64_t v166 = 0LL;
      char v153 = 23;
      uint64_t v85 = v108;
      swift_bridgeObjectRetain();
      sub_10003A544((uint64_t)&unk_1000848A0, (uint64_t)&v153, v5, (uint64_t)&unk_1000848A0, v79);
      uint64_t v166 = 0LL;
      sub_10003A514();
      LOBYTE(v107[7]) = v81 & 1;
      LOBYTE(v107[11]) = v77 & 1;
      LOBYTE(v107[19]) = v59 & 1;
      char v82 = v154;
      v107[0] = v15;
      v107[1] = v91;
      v107[2] = v104;
      v107[3] = v90;
      v107[4] = v105;
      v107[5] = v89;
      v107[6] = v84;
      v107[8] = v83;
      v107[9] = v88;
      v107[10] = v80;
      BYTE1(v107[11]) = v78;
      v107[12] = v40;
      v107[13] = v103;
      v107[14] = v76;
      v107[15] = v102;
      v107[16] = v101;
      v107[17] = v99;
      v107[18] = v75;
      BYTE1(v107[19]) = v74;
      BYTE2(v107[19]) = v73;
      v107[20] = v98;
      v107[21] = v96;
      LOBYTE(v107[22]) = v94;
      v107[23] = v72;
      v107[24] = v92;
      LOBYTE(v107[25]) = v71;
      BYTE1(v107[25]) = v70;
      v107[26] = v87;
      LOBYTE(v107[27]) = v66;
      BYTE1(v107[27]) = v69;
      v107[28] = v85;
      LOBYTE(v107[29]) = v154;
      sub_10000E980((uint64_t)v107);
      sub_10001ABFC();
      sub_100010278();
      sub_100006BBC();
      sub_10000E894(v98, v96, v94);
      sub_100010278();
      swift_bridgeObjectRelease(v90);
      sub_100006BFC();
      sub_10001ABA0();
      swift_bridgeObjectRelease(v40);
      sub_10001ABFC();
      sub_10003A620();
      sub_10003A658();
      sub_100006BBC();
      sub_10003A6C0();
      uint64_t v108 = v15;
      uint64_t v109 = v91;
      uint64_t v110 = v104;
      uint64_t v111 = v90;
      uint64_t v112 = v105;
      uint64_t v113 = v89;
      uint64_t v114 = v84;
      char v115 = v165;
      *(_DWORD *)unint64_t v116 = *(_DWORD *)v164;
      *(_DWORD *)&v116[3] = *(_DWORD *)&v164[3];
      uint64_t v117 = v83;
      uint64_t v118 = v88;
      uint64_t v119 = v80;
      char v120 = v163;
      char v121 = v78;
      int v122 = v161;
      __int16 v123 = v162;
      uint64_t v124 = v40;
      uint64_t v125 = v103;
      uint64_t v126 = v76;
      uint64_t v127 = v102;
      uint64_t v128 = v101;
      uint64_t v129 = v99;
      uint64_t v130 = v75;
      char v131 = v160;
      char v132 = v74;
      char v133 = v73;
      char v135 = v159[11];
      int v134 = *(_DWORD *)&v159[7];
      uint64_t v136 = v98;
      uint64_t v137 = v96;
      unsigned __int8 v138 = v94;
      *(_DWORD *)&v139[3] = *(_DWORD *)&v159[3];
      *(_DWORD *)uint64_t v139 = *(_DWORD *)v159;
      uint64_t v140 = v72;
      uint64_t v141 = v92;
      char v142 = v71;
      char v143 = v70;
      __int16 v145 = v158;
      int v144 = v157;
      uint64_t v146 = v87;
      char v147 = v66;
      char v148 = v69;
      __int16 v150 = v156;
      int v149 = v155;
      uint64_t v151 = v85;
      char v152 = v82;
      sub_10000EA70((uint64_t)&v108);
      memcpy(v106, v107, 0xE9uLL);
      goto LABEL_25;
    }

    sub_10003A514();
    sub_10003A594();
    sub_10003A59C();
    sub_10003A5A4();
    sub_10003A610();
    sub_10003A618();
    sub_100010120();
    sub_10003A620();
    unsigned int v9 = 919;
  }

  sub_10003A6C0();
  if ((v9 & 1) != 0)
  {
    sub_10003A594();
    if (((v9 >> 1) & 1) == 0)
    {
LABEL_6:
      if (((v9 >> 2) & 1) != 0) {
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }

  else if ((v9 & 2) == 0)
  {
    goto LABEL_6;
  }

  sub_10003A59C();
  if (((v9 >> 2) & 1) != 0)
  {
LABEL_7:
    sub_10003A5A4();
    if (((v9 >> 4) & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

LABEL_19:
  uint64_t v11 = v103;
  uint64_t v12 = v97;
  if (((v9 >> 8) & 1) == 0)
  {
LABEL_10:
    if (((v9 >> 9) & 1) != 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }

  sub_10001531C((uint64_t)v17, &qword_10008A800);
  sub_100059AE8(v41, a7);
  return (v42 & 1) != 0;
}

        uint64_t v11 = (v17 - 1) & v17;
        uint64_t v15 = __clz(__rbit64(v17)) + (v7 << 6);
      }

      uint64_t v19 = *(void *)(*(void *)(a4 + 48) + 8 * v15);
      unint64_t result = static Hasher._hash(seed:_:)(*(void *)(a3 + 40), v19);
      uint64_t v20 = -1LL << *(_BYTE *)(a3 + 32);
      uint64_t v21 = result & ~v20;
      uint64_t v22 = v21 >> 6;
      uint64_t v23 = 1LL << v21;
      if (((1LL << v21) & *(void *)(v13 + 8 * (v21 >> 6))) != 0)
      {
        uint64_t v24 = *(void *)(a3 + 48);
        if (*(void *)(v24 + 8 * v21) != v19)
        {
          for (uint64_t i = v21 + 1; ; uint64_t i = v26 + 1)
          {
            uint64_t v26 = i & ~v20;
            if (((*(void *)(v13 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v26) & 1) == 0) {
              goto LABEL_6;
            }
            if (*(void *)(v24 + 8 * v26) == v19) {
              break;
            }
          }

          uint64_t v22 = v26 >> 6;
          uint64_t v23 = 1LL << v26;
        }

        v46[v22] |= v23;
        uint64_t v27 = __OFADD__(v6++, 1LL);
        if (v27) {
          break;
        }
      }
    }

    __break(1u);
  }

  char v28 = 0LL;
  uint64_t v29 = a3 + 56;
  uint64_t v30 = 1LL << *(_BYTE *)(a3 + 32);
  if (v30 < 64) {
    uint64_t v31 = ~(-1LL << v30);
  }
  else {
    uint64_t v31 = -1LL;
  }
  uint64_t v32 = v31 & *(void *)(a3 + 56);
  uint64_t v45 = (unint64_t)(v30 + 63) >> 6;
  char v33 = a4 + 56;
  while (v32)
  {
    unint64_t v34 = __clz(__rbit64(v32));
    v32 &= v32 - 1;
    uint64_t v35 = v34 | (v28 << 6);
LABEL_48:
    uint64_t v39 = *(void *)(*(void *)(a3 + 48) + 8 * v35);
    unint64_t result = static Hasher._hash(seed:_:)(*(void *)(a4 + 40), v39);
    uint64_t v40 = -1LL << *(_BYTE *)(a4 + 32);
    uint64_t v41 = result & ~v40;
    if (((*(void *)(v33 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v41) & 1) != 0)
    {
      uint64_t v42 = *(void *)(a4 + 48);
      if (*(void *)(v42 + 8 * v41) == v39)
      {
LABEL_53:
        *(unint64_t *)((char *)v46 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v35;
        uint64_t v27 = __OFADD__(v6++, 1LL);
        if (v27)
        {
          __break(1u);
          goto LABEL_56;
        }
      }

      else
      {
        uint64_t v43 = ~v40;
        while (1)
        {
          uint64_t v41 = (v41 + 1) & v43;
          if (((*(void *)(v33 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v41) & 1) == 0) {
            break;
          }
          if (*(void *)(v42 + 8 * v41) == v39) {
            goto LABEL_53;
          }
        }
      }
    }
  }

  uint64_t v36 = v28 + 1;
  if (__OFADD__(v28, 1LL)) {
    goto LABEL_58;
  }
  if (v36 >= v45) {
    goto LABEL_56;
  }
  uint64_t v37 = *(void *)(v29 + 8 * v36);
  ++v28;
  if (v37) {
    goto LABEL_47;
  }
  char v28 = v36 + 1;
  if (v36 + 1 >= v45) {
    goto LABEL_56;
  }
  uint64_t v37 = *(void *)(v29 + 8 * v28);
  if (v37)
  {
LABEL_47:
    uint64_t v32 = (v37 - 1) & v37;
    uint64_t v35 = __clz(__rbit64(v37)) + (v28 << 6);
    goto LABEL_48;
  }

  uint64_t v38 = v36 + 2;
  if (v38 >= v45) {
    goto LABEL_56;
  }
  uint64_t v37 = *(void *)(v29 + 8 * v38);
  if (v37)
  {
    char v28 = v38;
    goto LABEL_47;
  }

  while (1)
  {
    char v28 = v38 + 1;
    if (__OFADD__(v38, 1LL)) {
      break;
    }
    if (v28 >= v45) {
      goto LABEL_56;
    }
    uint64_t v37 = *(void *)(v29 + 8 * v28);
    ++v38;
    if (v37) {
      goto LABEL_47;
    }
  }

    unsigned __int8 v14 = (v20 - 1) & v20;
    uint64_t v15 = __clz(__rbit64(v20)) + (v16 << 6);
    uint64_t v12 = v16;
    goto LABEL_20;
  }

  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_10003839C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x7972746E756F63LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v5 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7972746E756F63LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6C6F687365726874LL && a2 == 0xE900000000000064LL)
  {
    swift_bridgeObjectRelease(0xE900000000000064LL);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C6F687365726874LL, 0xE900000000000064LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_100038494()
{
  return 2LL;
}

void sub_10003849C(char a1)
{
}

uint64_t sub_1000384D8(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x6C6F687365726874LL;
  }
  else {
    return 0x7972746E756F63LL;
  }
}

double sub_100038514(void *a1)
{
  uint64_t v4 = sub_10000534C(&qword_10008BAE8);
  __chkstk_darwin(v4);
  sub_100006B64();
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100005F30(a1, v5);
  unint64_t v7 = sub_100038FE4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for StorebagSectionPerCountrySampling.CodingKeys,  &type metadata for StorebagSectionPerCountrySampling.CodingKeys,  v7,  v5,  v6);
  if (v1)
  {
    sub_10003A754();
  }

  else
  {
    uint64_t v8 = sub_10003A75C();
    char v13 = 0;
    uint64_t v9 = sub_10003A774((unint64_t *)&qword_10008BAC0);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v8, &v13, v4, v8, v9);
    char v12 = 1;
    __n128 v11 = swift_bridgeObjectRetain();
    double v2 = KeyedDecodingContainer.decode(_:forKey:)(&v12, v4, v11);
    sub_10003A6F4();
    sub_100005F54(a1);
    sub_10001ABA0();
  }

  return v2;
}

unint64_t sub_100038698(Swift::String string)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100081E48, v3);
  sub_1000371F0();
  if (v1 >= 8) {
    return 8LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000386DC()
{
  uint64_t v0 = sub_10003A6D8();
  return ((uint64_t (*)(uint64_t))((char *)sub_100038700 + 4 * byte_10006B328[v1]))(v0);
}

unint64_t sub_100038704()
{
  return sub_10003A698();
}

uint64_t sub_100038720()
{
  return sub_10003A628();
}

uint64_t sub_100038730()
{
  uint64_t v0 = sub_10003A6D8();
  return ((uint64_t (*)(uint64_t))((char *)sub_100038754 + 4 * byte_10006B330[v1]))(v0);
}

unint64_t sub_100038758()
{
  return sub_10003A698();
}

uint64_t sub_100038774()
{
  return sub_10003A628();
}

void sub_100038784(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000534C(&qword_10008BB68);
  __chkstk_darwin(v5);
  sub_100006B64();
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100005F30(a1, v6);
  unint64_t v8 = sub_10003A068();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_100084B30, &unk_100084B30, v8, v6, v7);
  if (v2)
  {
    sub_10003A688();
  }

  else
  {
    uint64_t v9 = sub_10003A6AC();
    uint64_t v11 = v10;
    sub_10003A66C(v9, v10);
    uint64_t v36 = sub_10003A6AC();
    uint64_t v37 = v9;
    LOBYTE(v43) = 2;
    uint64_t v13 = v12;
    sub_10003A66C(v36, v12);
    uint64_t v42 = v13;
    uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v43);
    char v33 = v15;
    uint64_t v34 = v14;
    uint64_t v16 = sub_10000534C(&qword_10008BB00);
    char v47 = 3;
    sub_10003A0A4(&qword_10008BB48, &qword_10008BB00);
    uint64_t v17 = sub_10003A71C();
    sub_10003A660(v17, v18, v19, v16, v20);
    uint64_t v35 = v43;
    LOBYTE(vswift_weakDestroy(v0 + 16) = v45;
    uint64_t v39 = v44;
    uint64_t v40 = sub_10000534C(&qword_10008BB78);
    char v47 = 4;
    unsigned __int8 v32 = v16;
    sub_10000E870(v35, v39, v16);
    uint64_t v21 = sub_10003A0A4(&qword_10008BB80, &qword_10008BB78);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v40, &v47, v5, v40, v21);
    char v47 = 5;
    uint64_t v41 = v43;
    uint64_t v38 = v44;
    int v46 = v45;
    sub_10000E888(v43, v44, v45);
    unint64_t v22 = sub_100039F38();
    sub_10003A660((uint64_t)&unk_1000848A0, (uint64_t)&v47, v5, (uint64_t)&unk_1000848A0, v22);
    char v29 = v43;
    uint64_t v23 = sub_10000534C(&qword_10008BB38);
    char v47 = 6;
    sub_100039F74(&qword_10008BB40, &qword_10008BB38);
    uint64_t v24 = sub_10003A71C();
    uint64_t v30 = v25;
    sub_10003A660(v24, v26, v27, v23, v25);
    char v47 = 7;
    uint64_t v28 = v43;
    swift_bridgeObjectRetain();
    sub_10003A660(v23, (uint64_t)&v47, v5, v23, v30);
    sub_1000370C8();
    uint64_t v31 = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10000E870(v35, v39, v32);
    LOBYTE(v13) = v46;
    sub_10000E888(v41, v38, v46);
    swift_bridgeObjectRetain();
    sub_10000E8AC(v41, v38, v13);
    sub_10000E894(v35, v39, v32);
    sub_100006BBC();
    sub_10001ABFC();
    sub_10003A688();
    sub_10001ABFC();
    sub_100006BBC();
    sub_10000E894(v35, v39, v32);
    sub_10000E8AC(v41, v38, v13);
    sub_100010278();
    swift_bridgeObjectRelease(v28);
    *(void *)a2 = v37;
    *(void *)(a2 + 8) = v11;
    *(void *)(a2 + swift_weakDestroy(v0 + 16) = v36;
    *(void *)(a2 + 24) = v42;
    *(void *)(a2 + 32) = v34;
    *(_BYTE *)(a2 + 40) = v33 & 1;
    *(void *)(a2 + 48) = v35;
    *(void *)(a2 + 56) = v39;
    *(_BYTE *)(a2 + 64) = v32;
    *(void *)(a2 + 72) = v41;
    *(void *)(a2 + 80) = v38;
    *(_BYTE *)(a2 + 88) = v13;
    *(_BYTE *)(a2 + 89) = v29;
    *(void *)(a2 + 96) = v28;
    *(void *)(a2 + 104) = v31;
  }

  sub_100015624();
}

void sub_100038D04()
{
}

void sub_100038D1C(uint64_t a1)
{
}

uint64_t sub_100038D28@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10003737C(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

unint64_t sub_100038D58()
{
  unint64_t result = qword_10008BAE0;
  if (!qword_10008BAE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B414, &unk_1000848A0);
    atomic_store(result, (unint64_t *)&qword_10008BAE0);
  }

  return result;
}

void sub_100038D94()
{
}

void sub_100038DA0()
{
}

uint64_t sub_100038DA8(uint64_t a1)
{
  return sub_100030B38(a1);
}

void sub_100038DB0(uint64_t a1)
{
}

uint64_t sub_100038DB8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100037514(*a1, a1[1]);
  *a2 = result;
  return result;
}

void sub_100038DE4(uint64_t *a1@<X8>)
{
  *a1 = sub_100037560();
  a1[1] = v2;
  sub_100006B44();
}

uint64_t sub_100038E08()
{
  return sub_100037768(*v0);
}

uint64_t sub_100038E10@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_10003755C();
  *a1 = result;
  return result;
}

void sub_100038E34(_BYTE *a1@<X8>)
{
  *a1 = 24;
}

uint64_t sub_100038E40(uint64_t a1)
{
  unint64_t v2 = sub_100039EFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100038E68(uint64_t a1)
{
  unint64_t v2 = sub_100039EFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100038E90(void *a1@<X0>, void *a2@<X8>)
{
  if (!v2) {
    memcpy(a2, v4, 0xE9uLL);
  }
}

void sub_100038EE0(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(v2);
  Hasher._finalize()();
  sub_1000157D0();
}

uint64_t sub_100038F18()
{
  return sub_1000384D8(*v0);
}

uint64_t sub_100038F20@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10003839C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100038F44@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_100038494();
  *a1 = result;
  return result;
}

uint64_t sub_100038F68(uint64_t a1)
{
  unint64_t v2 = sub_100038FE4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100038F90(uint64_t a1)
{
  unint64_t v2 = sub_100038FE4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100038FB8(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v5 = sub_100038514(a1);
  if (!v2)
  {
    *(void *)a2 = v4;
    *(double *)(a2 + 8) = v5;
  }

unint64_t sub_100038FE4()
{
  unint64_t result = qword_10008BAF0;
  if (!qword_10008BAF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B59C, &type metadata for StorebagSectionPerCountrySampling.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008BAF0);
  }

  return result;
}

uint64_t sub_100039020(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 64);
  if (v2 != 255) {
    sub_10000E8AC(*(void *)(a1 + 48), *(void *)(a1 + 56), v2 & 1);
  }
  sub_10000E8AC(*(void *)(a1 + 72), *(void *)(a1 + 80), *(_BYTE *)(a1 + 88));
  swift_bridgeObjectRelease(*(void *)(a1 + 96));
  return swift_bridgeObjectRelease(*(void *)(a1 + 104));
}

uint64_t sub_10003907C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  int v6 = *(unsigned __int8 *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 == 255)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  }

  else
  {
    char v7 = v6 & 1;
    uint64_t v8 = *(void *)(a2 + 48);
    uint64_t v9 = *(void *)(a2 + 56);
    sub_10000E888(v8, v9, v7);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v9;
    *(_BYTE *)(a1 + 64) = v7;
  }

  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a2 + 80);
  char v12 = *(_BYTE *)(a2 + 88);
  sub_10000E888(v10, v11, v12);
  *(void *)(a1 + 72) = v10;
  *(void *)(a1 + 80) = v11;
  *(_BYTE *)(a1 + 88) = v12;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  uint64_t v13 = *(void *)(a2 + 96);
  uint64_t v14 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v13;
  *(void *)(a1 + 104) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100039160(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  char v7 = (__int128 *)(a1 + 48);
  uint64_t v8 = (__int128 *)(a2 + 48);
  int v9 = *(unsigned __int8 *)(a2 + 64);
  if (*(unsigned __int8 *)(a1 + 64) == 255)
  {
    if (v9 == 255)
    {
      __int128 v11 = *v8;
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *char v7 = v11;
    }

    else
    {
      char v18 = v9 & 1;
      uint64_t v19 = *(void *)(a2 + 48);
      uint64_t v20 = *(void *)(a2 + 56);
      sub_10000E888(v19, v20, v9 & 1);
      *(void *)(a1 + 48) = v19;
      *(void *)(a1 + 56) = v20;
      *(_BYTE *)(a1 + 64) = v18;
    }
  }

  else if (v9 == 255)
  {
    sub_1000392F0(a1 + 48);
    char v10 = *(_BYTE *)(a2 + 64);
    *char v7 = *v8;
    *(_BYTE *)(a1 + 64) = v10;
  }

  else
  {
    char v12 = v9 & 1;
    uint64_t v13 = *(void *)(a2 + 48);
    uint64_t v14 = *(void *)(a2 + 56);
    sub_10000E888(v13, v14, v9 & 1);
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v16 = *(void *)(a1 + 56);
    char v17 = *(_BYTE *)(a1 + 64);
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v14;
    *(_BYTE *)(a1 + 64) = v12;
    sub_10000E8AC(v15, v16, v17);
  }

  uint64_t v21 = *(void *)(a2 + 72);
  uint64_t v22 = *(void *)(a2 + 80);
  char v23 = *(_BYTE *)(a2 + 88);
  sub_10000E888(v21, v22, v23);
  uint64_t v24 = *(void *)(a1 + 72);
  uint64_t v25 = *(void *)(a1 + 80);
  char v26 = *(_BYTE *)(a1 + 88);
  *(void *)(a1 + 72) = v21;
  *(void *)(a1 + 80) = v22;
  *(_BYTE *)(a1 + 88) = v23;
  sub_10000E8AC(v24, v25, v26);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  uint64_t v27 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v27);
  uint64_t v28 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v28);
  return a1;
}

uint64_t sub_1000392F0(uint64_t a1)
{
  uint64_t v2 = sub_10000534C(&qword_10008BB00);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_100039330(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

uint64_t sub_100039338(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v8 = (_OWORD *)(a2 + 48);
  int v9 = *(unsigned __int8 *)(a1 + 64);
  if (v9 != 255)
  {
    int v10 = *(unsigned __int8 *)(a2 + 64);
    if (v10 != 255)
    {
      uint64_t v11 = *(void *)(a1 + 48);
      uint64_t v12 = *(void *)(a1 + 56);
      *(_OWORD *)(a1 + 48) = *v8;
      *(_BYTE *)(a1 + 64) = v10 & 1;
      sub_10000E8AC(v11, v12, v9 & 1);
      goto LABEL_6;
    }

    sub_1000392F0(a1 + 48);
  }

  *(_OWORD *)(a1 + 48) = *v8;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
LABEL_6:
  char v13 = *(_BYTE *)(a2 + 88);
  uint64_t v14 = *(void *)(a1 + 72);
  uint64_t v15 = *(void *)(a1 + 80);
  char v16 = *(_BYTE *)(a1 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = v13;
  sub_10000E8AC(v14, v15, v16);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  uint64_t v17 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t sub_100039430(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 112))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(sub_10000E894(v0[36], v0[56], v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100039484(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 104) = 0LL;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 112) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 112) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

void type metadata accessor for StorebagSectionClientTTR()
{
}

uint64_t sub_100039500(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 176);
  if (v2 != 255) {
    sub_10000E8AC(*(void *)(a1 + 160), *(void *)(a1 + 168), v2 & 1);
  }
  swift_bridgeObjectRelease(*(void *)(a1 + 192));
  swift_bridgeObjectRelease(*(void *)(a1 + 208));
  return swift_bridgeObjectRelease(*(void *)(a1 + 224));
}

uint64_t sub_100039590(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  uint64_t v10 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v10;
  uint64_t v11 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v11;
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
  int v16 = *(unsigned __int8 *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v16 == 255)
  {
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  }

  else
  {
    uint64_t v12 = *(void *)(a2 + 160);
    uint64_t v13 = *(void *)(a2 + 168);
    sub_10000E888(v12, v13, v16 & 1);
    *(void *)(a1 + 160) = v12;
    *(void *)(a1 + 168) = v13;
    *(_BYTE *)(a1 + 176) = v16 & 1;
  }

  uint64_t v14 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v14;
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_WORD *)(a1 + 2swift_weakDestroy(v0 + 16) = *(_WORD *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10003972C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 80) = v9;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  uint64_t v10 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  uint64_t v12 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v15;
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
  int v16 = (__int128 *)(a1 + 160);
  uint64_t v17 = (__int128 *)(a2 + 160);
  int v18 = *(unsigned __int8 *)(a2 + 176);
  if (*(unsigned __int8 *)(a1 + 176) == 255)
  {
    if (v18 == 255)
    {
      __int128 v20 = *v17;
      *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
      *int v16 = v20;
    }

    else
    {
      char v27 = v18 & 1;
      uint64_t v28 = *(void *)(a2 + 160);
      uint64_t v29 = *(void *)(a2 + 168);
      sub_10000E888(v28, v29, v18 & 1);
      *(void *)(a1 + 160) = v28;
      *(void *)(a1 + 168) = v29;
      *(_BYTE *)(a1 + 176) = v27;
    }
  }

  else if (v18 == 255)
  {
    sub_1000392F0(a1 + 160);
    char v19 = *(_BYTE *)(a2 + 176);
    *int v16 = *v17;
    *(_BYTE *)(a1 + 176) = v19;
  }

  else
  {
    char v21 = v18 & 1;
    uint64_t v22 = *(void *)(a2 + 160);
    uint64_t v23 = *(void *)(a2 + 168);
    sub_10000E888(v22, v23, v18 & 1);
    uint64_t v24 = *(void *)(a1 + 160);
    uint64_t v25 = *(void *)(a1 + 168);
    char v26 = *(_BYTE *)(a1 + 176);
    *(void *)(a1 + 160) = v22;
    *(void *)(a1 + 168) = v23;
    *(_BYTE *)(a1 + 176) = v21;
    sub_10000E8AC(v24, v25, v26);
  }

  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  uint64_t v30 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v30);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
  uint64_t v31 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v31);
  *(_BYTE *)(a1 + 2swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 216);
  *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
  uint64_t v32 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v32);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  return a1;
}

void *sub_1000399C8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xE9uLL);
}

uint64_t sub_1000399D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  uint64_t v12 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 120);
  uint64_t v15 = *(void *)(a1 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v14;
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease(v17);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_WORD *)(a1 + 153) = *(_WORD *)(a2 + 153);
  int v18 = (_OWORD *)(a2 + 160);
  int v19 = *(unsigned __int8 *)(a1 + 176);
  if (v19 != 255)
  {
    int v20 = *(unsigned __int8 *)(a2 + 176);
    if (v20 != 255)
    {
      uint64_t v21 = *(void *)(a1 + 160);
      uint64_t v22 = *(void *)(a1 + 168);
      *(_OWORD *)(a1 + 160) = *v18;
      *(_BYTE *)(a1 + 176) = v20 & 1;
      sub_10000E8AC(v21, v22, v19 & 1);
      goto LABEL_6;
    }

    sub_1000392F0(a1 + 160);
  }

  *(_OWORD *)(a1 + 160) = *v18;
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
LABEL_6:
  uint64_t v23 = *(void *)(a2 + 192);
  uint64_t v24 = *(void *)(a1 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v23;
  swift_bridgeObjectRelease(v24);
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  uint64_t v25 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRelease(v25);
  *(_WORD *)(a1 + 2swift_weakDestroy(v0 + 16) = *(_WORD *)(a2 + 216);
  uint64_t v26 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRelease(v26);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  return a1;
}

uint64_t sub_100039B64(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 233))
    {
      LODWORD(sub_10002C758(90LL, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 40);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_10002C758(90LL, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_10002C758(90LL, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100039BA4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 2swift_weakDestroy(v0 + 16) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 232) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 233) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 233) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for StorebagSectionClientHTTP()
{
}

uint64_t _s13rtcreportingd33StorebagSectionPerCountrySamplingV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_100026CF8(v2[30], v4) = 1;
  }
  else {
    LODWORD(sub_100026CF8(v2[30], v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100039C78 + 4 * byte_10006B33D[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100039CAC + 4 * byte_10006B338[v4]))();
}

uint64_t sub_100039CAC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100039CB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100039CBCLL);
  }
  return result;
}

uint64_t sub_100039CC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100039CD0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100039CD4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100039CDC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StorebagSectionPerCountrySampling.CodingKeys()
{
  return &type metadata for StorebagSectionPerCountrySampling.CodingKeys;
}

unint64_t sub_100039CFC()
{
  unint64_t result = qword_10008BB08;
  if (!qword_10008BB08)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B524, &type metadata for StorebagSectionPerCountrySampling.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008BB08);
  }

  return result;
}

void sub_100039D38(char *a1)
{
}

void sub_100039D44()
{
}

void sub_100039D4C(uint64_t a1)
{
}

void sub_100039D54(uint64_t a1)
{
}

unint64_t sub_100039D5C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100038698(*a1);
  *a2 = result;
  return result;
}

void sub_100039D88(uint64_t *a1@<X8>)
{
  *a1 = sub_1000386DC();
  a1[1] = v2;
  sub_100006B44();
}

uint64_t sub_100039DAC()
{
  return sub_100038730();
}

uint64_t sub_100039DB4@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000386D8(a1);
  *a2 = result;
  return result;
}

void sub_100039DD8(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_100039DE4(uint64_t a1)
{
  unint64_t v2 = sub_10003A068();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100039E0C(uint64_t a1)
{
  unint64_t v2 = sub_10003A068();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100039E34(void *a1@<X0>, void *a2@<X8>)
{
  if (!v2) {
    memcpy(a2, v4, 0x70uLL);
  }
}

unint64_t sub_100039E80()
{
  unint64_t result = qword_10008BB10;
  if (!qword_10008BB10)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B494, &type metadata for StorebagSectionPerCountrySampling.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008BB10);
  }

  return result;
}

unint64_t sub_100039EC0()
{
  unint64_t result = qword_10008BB18;
  if (!qword_10008BB18)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B4BC, &type metadata for StorebagSectionPerCountrySampling.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008BB18);
  }

  return result;
}

unint64_t sub_100039EFC()
{
  unint64_t result = qword_10008BB28;
  if (!qword_10008BB28)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B81C, &unk_100084BC0);
    atomic_store(result, (unint64_t *)&qword_10008BB28);
  }

  return result;
}

unint64_t sub_100039F38()
{
  unint64_t result = qword_10008BB30;
  if (!qword_10008BB30)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B3AC, &unk_1000848A0);
    atomic_store(result, (unint64_t *)&qword_10008BB30);
  }

  return result;
}

uint64_t sub_100039F74(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_10000E670(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100039FC8()
{
  unint64_t result = qword_10008BB58;
  if (!qword_10008BB58)
  {
    uint64_t v1 = sub_10000E670(&qword_10008BB50);
    sub_10003A02C();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008BB58);
  }

  return result;
}

unint64_t sub_10003A02C()
{
  unint64_t result = qword_10008BB60;
  if (!qword_10008BB60)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B43C, &unk_100084808);
    atomic_store(result, (unint64_t *)&qword_10008BB60);
  }

  return result;
}

unint64_t sub_10003A068()
{
  unint64_t result = qword_10008BB70;
  if (!qword_10008BB70)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B7CC, &unk_100084B30);
    atomic_store(result, (unint64_t *)&qword_10008BB70);
  }

  return result;
}

uint64_t sub_10003A0A4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_10000E670(a2);
    uint64_t result = swift_getWitnessTable(&unk_10006C594, v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10003A0E4(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 7) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }

uint64_t sub_10003A16C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(sub_100026CF8(v2[30], v4) = 1;
  }
  else {
    LODWORD(sub_100026CF8(v2[30], v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_10003A1B8 + 4 * byte_10006B347[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10003A1EC + 4 * byte_10006B342[v4]))();
}

uint64_t sub_10003A1EC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A1F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10003A1FCLL);
  }
  return result;
}

uint64_t sub_10003A208(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003A210LL);
  }
  *(_BYTE *)uint64_t result = a2 + 7;
  return result;
}

uint64_t sub_10003A214(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A21C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for StorebagSectionClientTTR.CodingKeys()
{
}

uint64_t sub_10003A234(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xE9)
  {
    if (a2 + 23 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 23) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 24;
    return (v5 + 1);
  }

uint64_t sub_10003A2BC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 23 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 23) >> 8 < 0xFF) {
    LODWORD(sub_100026CF8(v2[30], v4) = 1;
  }
  else {
    LODWORD(sub_100026CF8(v2[30], v4) = v3;
  }
  if (a3 >= 0xE9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xE8) {
    return ((uint64_t (*)(void))((char *)&loc_10003A308 + 4 * byte_10006B351[v4]))();
  }
  *a1 = a2 + 23;
  return ((uint64_t (*)(void))((char *)sub_10003A33C + 4 * byte_10006B34C[v4]))();
}

uint64_t sub_10003A33C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A344(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10003A34CLL);
  }
  return result;
}

uint64_t sub_10003A358(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003A360LL);
  }
  *(_BYTE *)uint64_t result = a2 + 23;
  return result;
}

uint64_t sub_10003A364(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A36C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for StorebagSectionClientHTTP.CodingKeys()
{
}

unint64_t sub_10003A388()
{
  unint64_t result = qword_10008BB88;
  if (!qword_10008BB88)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B6B4, &unk_100084BC0);
    atomic_store(result, (unint64_t *)&qword_10008BB88);
  }

  return result;
}

unint64_t sub_10003A3C8()
{
  unint64_t result = qword_10008BB90;
  if (!qword_10008BB90)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B7A4, &unk_100084B30);
    atomic_store(result, (unint64_t *)&qword_10008BB90);
  }

  return result;
}

unint64_t sub_10003A408()
{
  unint64_t result = qword_10008BB98;
  if (!qword_10008BB98)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B6DC, &unk_100084B30);
    atomic_store(result, (unint64_t *)&qword_10008BB98);
  }

  return result;
}

unint64_t sub_10003A448()
{
  unint64_t result = qword_10008BBA0;
  if (!qword_10008BBA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B704, &unk_100084B30);
    atomic_store(result, (unint64_t *)&qword_10008BBA0);
  }

  return result;
}

unint64_t sub_10003A488()
{
  unint64_t result = qword_10008BBA8;
  if (!qword_10008BBA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B5EC, &unk_100084BC0);
    atomic_store(result, (unint64_t *)&qword_10008BBA8);
  }

  return result;
}

unint64_t sub_10003A4C8()
{
  unint64_t result = qword_10008BBB0;
  if (!qword_10008BBB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B614, &unk_100084BC0);
    atomic_store(result, (unint64_t *)&qword_10008BBB0);
  }

  return result;
}

uint64_t sub_10003A514()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_10003A524(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, v1 + 248, v2, a1, *(void *)(v1 + 56));
}

uint64_t sub_10003A544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_10003A550()
{
  return 0x6C625F746E657665LL;
}

uint64_t sub_10003A574()
{
  return 0x656469727265766FLL;
}

uint64_t sub_10003A594()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 144));
}

uint64_t sub_10003A59C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 136));
}

uint64_t sub_10003A5A4()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 128));
}

uint64_t sub_10003A5AC()
{
  return 0x737265746C6966LL;
}

uint64_t sub_10003A5C4()
{
  return 0x65636976726573LL;
}

void sub_10003A5DC()
{
  v0[54] = 1;
  v0[60] = 1;
  v0[56] = 1;
}

uint64_t sub_10003A610()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 120));
}

uint64_t sub_10003A618()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 112));
}

uint64_t sub_10003A620()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 200));
}

uint64_t sub_10003A628()
{
  return 0x68775F746E657665LL;
}

uint64_t sub_10003A64C(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

uint64_t sub_10003A658()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 192));
}

uint64_t sub_10003A660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_10003A66C(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10003A674()
{
  return 0x73656C7572LL;
}

uint64_t sub_10003A688()
{
  return sub_100005F54(v0);
}

uint64_t sub_10003A690()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 184));
}

unint64_t sub_10003A698()
{
  return 0xD000000000000012LL;
}

uint64_t sub_10003A6AC()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v1 - 104, v0);
}

uint64_t sub_10003A6C0()
{
  return sub_100005F54(*(void **)(v0 + 232));
}

uint64_t sub_10003A6C8()
{
  return v0 + 488;
}

uint64_t sub_10003A6D8()
{
  return 0x746E65696C63LL;
}

uint64_t sub_10003A6F4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10003A704()
{
  return v0;
}

uint64_t sub_10003A71C()
{
  return v0;
}

uint64_t sub_10003A734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_10003A740()
{
  return v0 + 488;
}

uint64_t sub_10003A754()
{
  return sub_100005F54(v0);
}

uint64_t sub_10003A75C()
{
  return sub_10000534C(v0);
}

uint64_t sub_10003A764()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 152));
}

uint64_t sub_10003A76C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 104));
}

uint64_t sub_10003A774(unint64_t *a1)
{
  return sub_100039F74(a1, v1);
}

uint64_t sub_10003A77C()
{
  return v0;
}

uint64_t sub_10003A790()
{
  return v0;
}

uint64_t sub_10003A7A4()
{
  uint64_t v0 = sub_10000534C(&qword_10008B410);
  uint64_t v1 = sub_10000534C(&qword_10008B418);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = swift_allocObject(v0, v5 + 11 * v3, v4 | 7);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_10006B870;
  uint64_t v7 = v6 + v5;
  uint64_t v8 = (_BYTE *)(v6 + v5 + *(int *)(v1 + 48));
  *(void *)(v6 + sub_10000E870(v4, *(void *)(v0 + 448), v5) = XPC_ACTIVITY_REPEATING;
  *uint64_t v8 = 1;
  uint64_t v9 = type metadata accessor for XPCObject(0LL);
  swift_storeEnumTagMultiPayload(v8, v9, 2LL);
  uint64_t v10 = (void *)(v7 + v3 + *(int *)(v1 + 48));
  *(void *)(v7 + sub_10000E894(v0[36], v0[56], v3) = XPC_ACTIVITY_DELAY;
  *uint64_t v10 = 86400LL;
  swift_storeEnumTagMultiPayload(v10, v9, 3LL);
  uint64_t v11 = (const char **)(v7 + 2 * v3);
  uint64_t v12 = (const char **)((char *)v11 + *(int *)(v1 + 48));
  *uint64_t v11 = XPC_ACTIVITY_GRACE_PERIOD;
  *uint64_t v12 = 43200LL;
  swift_storeEnumTagMultiPayload(v12, v9, 3LL);
  uint64_t v13 = (const char **)(v7 + 3 * v3);
  uint64_t v14 = (const char **)((char *)v13 + *(int *)(v1 + 48));
  *uint64_t v13 = XPC_ACTIVITY_PRIORITY;
  *uint64_t v14 = String.init(cString:)(XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  v14[1] = v15;
  swift_storeEnumTagMultiPayload(v14, v9, 8LL);
  uint64_t v16 = (const char **)(v7 + 4 * v3);
  uint64_t v17 = (char *)v16 + *(int *)(v1 + 48);
  *uint64_t v16 = XPC_ACTIVITY_ALLOW_BATTERY;
  *uint64_t v17 = 0;
  uint64_t result = swift_storeEnumTagMultiPayload(v17, v9, 2LL);
  if (!XPC_ACTIVITY_POWER_NAP)
  {
    __break(1u);
    goto LABEL_9;
  }

  int v19 = (void *)(v7 + 5 * v3);
  int v20 = (char *)v19 + *(int *)(v1 + 48);
  void *v19 = XPC_ACTIVITY_POWER_NAP;
  _BYTE *v20 = 1;
  uint64_t result = swift_storeEnumTagMultiPayload(v20, v9, 2LL);
  if (!XPC_ACTIVITY_RANDOM_INITIAL_DELAY)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v21 = (void *)(v7 + 6 * v3);
  uint64_t v22 = (void *)((char *)v21 + *(int *)(v1 + 48));
  *uint64_t v21 = XPC_ACTIVITY_RANDOM_INITIAL_DELAY;
  *uint64_t v22 = 43200LL;
  uint64_t result = swift_storeEnumTagMultiPayload(v22, v9, 4LL);
  if (!XPC_ACTIVITY_EXPECTED_DURATION)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v23 = (void *)(v7 - v3 + 8 * v3);
  uint64_t v24 = (void *)((char *)v23 + *(int *)(v1 + 48));
  *uint64_t v23 = XPC_ACTIVITY_EXPECTED_DURATION;
  *uint64_t v24 = XPC_ACTIVITY_INTERVAL_1_MIN;
  uint64_t result = swift_storeEnumTagMultiPayload(v24, v9, 3LL);
  if (!XPC_ACTIVITY_GROUP_NAME)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v25 = (void *)(v7 + 8 * v3);
  uint64_t v26 = (void *)((char *)v25 + *(int *)(v1 + 48));
  *uint64_t v25 = XPC_ACTIVITY_GROUP_NAME;
  *uint64_t v26 = 0xD00000000000001DLL;
  v26[1] = 0x800000010006E1E0LL;
  uint64_t result = swift_storeEnumTagMultiPayload(v26, v9, 8LL);
  if (!XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  char v27 = (void *)(v7 + 9 * v3);
  uint64_t v28 = (void *)((char *)v27 + *(int *)(v1 + 48));
  *char v27 = XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT;
  *uint64_t v28 = 1LL;
  uint64_t result = swift_storeEnumTagMultiPayload(v28, v9, 4LL);
  if (XPC_ACTIVITY_DISK_INTENSIVE)
  {
    uint64_t v29 = (void *)(v7 + 10 * v3);
    uint64_t v30 = (char *)v29 + *(int *)(v1 + 48);
    void *v29 = XPC_ACTIVITY_DISK_INTENSIVE;
    *uint64_t v30 = 1;
    swift_storeEnumTagMultiPayload(v30, v9, 2LL);
    uint64_t v31 = sub_10000534C(&qword_10008B420);
    unint64_t v32 = sub_100027258();
    uint64_t result = Dictionary.init(dictionaryLiteral:)(v6, v31, v9, v32);
    qword_100093328 = result;
    return result;
  }

LABEL_13:
  __break(1u);
  return result;
}

uint64_t *sub_10003AAE8()
{
  if (qword_10008A020 != -1) {
    swift_once(&qword_10008A020, sub_10003A7A4);
  }
  return &qword_100093328;
}

uint64_t sub_10003AB28()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000D940(v0, qword_100093330);
  sub_10000D34C(v0, (uint64_t)qword_100093330);
  return Logger.init(subsystem:category:)( 0xD000000000000017LL,  0x800000010006D6D0LL,  0x6E61656C632D6264LL,  0xEA00000000007075LL);
}

uint64_t sub_10003ABA0()
{
  v1[7] = v0;
  uint64_t v2 = type metadata accessor for Date(0LL);
  v1[8] = v2;
  void v1[9] = *(void *)(v2 - 8);
  v1[10] = sub_100026B60();
  v1[11] = sub_100026B60();
  return sub_10001A974();
}

void sub_10003AC04()
{
  uint64_t v1 = qword_1000933B0;
  v0[12] = qword_1000933B0;
  if (v1)
  {
    uint64_t v2 = v0[10];
    uint64_t v3 = v0[8];
    uint64_t v4 = v0[9];
    uint64_t v5 = swift_retain(v1);
    uint64_t v6 = static Date.now.getter(v5);
    Date.addingTimeInterval(_:)(v6, -172800.0);
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v0[13] = v7;
    v7(v2, v3);
    uint64_t v8 = (void *)swift_task_alloc(dword_10008B6B4);
    v0[14] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_10003ACB8;
    sub_10002B7F0(v0[11]);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10003ACB8()
{
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)v1 + 104LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 112LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 88LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 96LL);
  uint64_t v6 = *(void *)(*(void *)v1 + 64LL);
  *(void *)(*(void *)v1 + 12Hasher.init(_seed:)(v2, 0LL) = v0;
  swift_task_dealloc(v2);
  v3(v5, v6);
  swift_release(v4);
  return sub_10001A974();
}

void sub_10003AD44()
{
  uint64_t v1 = qword_1000933B0;
  *(void *)(v0 + 128) = qword_1000933B0;
  if (v1)
  {
    swift_retain(v1);
    uint64_t v2 = (void *)sub_100026B60();
    *(void *)(v0 + 136) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10003ADA4;
    sub_10002C2B8();
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10003ADA4()
{
  uint64_t v2 = *(void *)(*v1 + 136);
  uint64_t v3 = *v1;
  *(void *)(v3 + 144) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return sub_10001A974();
  }
  swift_release(*(void *)(v3 + 128));
  swift_task_dealloc(*(void *)(v3 + 88));
  sub_10001AB88();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10003AE20()
{
  if (qword_10008A028 != -1) {
    swift_once(&qword_10008A028, sub_10003AB28);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_10000D34C(v2, (uint64_t)qword_100093330);
  sub_100026A40();
  uint64_t v4 = sub_100026A40();
  uint64_t v5 = (void *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  if (sub_100026A68(v6))
  {
    sub_10003B164();
    uint64_t v24 = sub_10003B184();
    sub_1000269D0(4.8751e-34);
    uint64_t v7 = sub_100026AB8();
    uint64_t v11 = sub_100026A5C(v7, v8, v9, v10);
    sub_1000269EC(v11, v12, v13, v14, v15, v16, v17, v18, v22, v23);
    swift_bridgeObjectRelease(v3);
    sub_1000269C8();
    sub_1000269C8();
    sub_100026A14((void *)&_mh_execute_header, v19, v20, "failed to delete outdated sessions: %{public}s");
    sub_10002F8D8();
    sub_100010010(v24);
    sub_100010010(v1);

    sub_1000269C8();
  }

  else
  {
    sub_1000269C8();
    sub_1000269C8();
    sub_1000269C8();
  }

  swift_task_dealloc(*(void *)(v0 + 88));
  sub_10001AB88();
  return sub_10001A94C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003AF40()
{
  if (qword_10008A028 != -1) {
    swift_once(&qword_10008A028, sub_10003AB28);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_10000D34C(v2, (uint64_t)qword_100093330);
  sub_100026A40();
  uint64_t v4 = sub_100026A40();
  uint64_t v5 = (void *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  if (sub_100026A68(v6))
  {
    sub_10003B164();
    uint64_t v24 = sub_10003B184();
    sub_1000269D0(4.8751e-34);
    uint64_t v7 = sub_100026AB8();
    uint64_t v11 = sub_100026A5C(v7, v8, v9, v10);
    sub_1000269EC(v11, v12, v13, v14, v15, v16, v17, v18, v22, v23);
    swift_bridgeObjectRelease(v3);
    sub_1000269C8();
    sub_1000269C8();
    sub_100026A14((void *)&_mh_execute_header, v19, v20, "failed to delete outdated sessions: %{public}s");
    sub_10002F8D8();
    sub_100010010(v24);
    sub_100010010(v1);

    sub_1000269C8();
  }

  else
  {
    sub_1000269C8();
    sub_1000269C8();
    sub_1000269C8();
  }

  swift_task_dealloc(*(void *)(v0 + 88));
  sub_10001AB88();
  return sub_10001A94C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t type metadata accessor for CacheCleanupActivity()
{
  return objc_opt_self(&OBJC_CLASS____TtC13rtcreportingd20CacheCleanupActivity);
}

uint64_t sub_10003B088()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10008BBE4);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100013D04;
  return sub_10003ABA0();
}

double sub_10003B0CC()
{
  *(void *)&double result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

uint64_t sub_10003B0E8()
{
  return 0x6E61656C632D6264LL;
}

unint64_t sub_10003B104(uint64_t a1)
{
  unint64_t result = sub_10003B128();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003B128()
{
  unint64_t result = qword_10008BC70;
  if (!qword_10008BC70)
  {
    uint64_t v1 = type metadata accessor for CacheCleanupActivity();
    unint64_t result = swift_getWitnessTable(&unk_10006B8C4, v1);
    atomic_store(result, (unint64_t *)&qword_10008BC70);
  }

  return result;
}

uint64_t sub_10003B164()
{
  return swift_slowAlloc(12LL, -1LL);
}

uint64_t sub_10003B184()
{
  return swift_slowAlloc(32LL, -1LL);
}

uint64_t initializeBufferWithCopyOfBuffer for StorebagSharedValue(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((_BYTE *)a2 + 8);
  *(void *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for StorebagSharedValue(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((_BYTE *)a2 + 8);
  uint64_t v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t *assignWithTake for StorebagSharedValue(uint64_t *a1, uint64_t *a2)
{
  char v3 = *((_BYTE *)a2 + 8);
  uint64_t v4 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for StorebagSharedValue(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StorebagSharedValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10003B2C4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_10003B2CC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for StorebagSharedValue()
{
  return &type metadata for StorebagSharedValue;
}

unint64_t sub_10003B2E4()
{
  return 0xD000000000000032LL;
}

unint64_t sub_10003B300()
{
  return 0xD000000000000032LL;
}

uint64_t sub_10003B31C(void *a1)
{
  uint64_t v4 = Array<A>.init(from:)(v19);
  if (v1)
  {
    uint64_t v5 = sub_10003B5F0();
    sub_10003B5F8(v5);
    unint64_t v6 = sub_10003B494();
    sub_10003B604(v6, &unk_100084510, v6);
    uint64_t v7 = sub_10003B5F0();
    uint64_t v8 = sub_10003B5F8(v7);
    sub_10003B604(v8, &type metadata for String, &protocol witness table for String);
    sub_10003B5F0();
    unint64_t v9 = sub_10003B4D0();
    uint64_t v10 = swift_allocError(&type metadata for StorebagSharedValue.Error, v9, 0LL, 0LL);
    swift_willThrow(v10, v11, v12, v13, v14, v15, v16, v17);
  }

  else
  {
    uint64_t v2 = v4;
  }

  sub_100005F54(a1);
  return v2;
}

uint64_t sub_10003B42C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10003B31C(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5;
  }

  return result;
}

unint64_t sub_10003B458()
{
  unint64_t result = qword_10008BC78;
  if (!qword_10008BC78)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006C5BC, &unk_100085FE0);
    atomic_store(result, (unint64_t *)&qword_10008BC78);
  }

  return result;
}

unint64_t sub_10003B494()
{
  unint64_t result = qword_10008BC80;
  if (!qword_10008BC80)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B004, &unk_100084510);
    atomic_store(result, (unint64_t *)&qword_10008BC80);
  }

  return result;
}

unint64_t sub_10003B4D0()
{
  unint64_t result = qword_10008BC88;
  if (!qword_10008BC88)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B9F4, &type metadata for StorebagSharedValue.Error);
    atomic_store(result, (unint64_t *)&qword_10008BC88);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for StorebagSharedValue.Error(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(sub_100026CF8(v2[30], v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10003B54C + 4 * byte_10006B8F0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10003B56C + 4 * byte_10006B8F5[v4]))();
  }
}

_BYTE *sub_10003B54C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10003B56C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10003B574(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10003B57C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10003B584(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10003B58C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for StorebagSharedValue.Error()
{
  return &type metadata for StorebagSharedValue.Error;
}

unint64_t sub_10003B5B0()
{
  unint64_t result = qword_10008BC90;
  if (!qword_10008BC90)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006B9CC, &type metadata for StorebagSharedValue.Error);
    atomic_store(result, (unint64_t *)&qword_10008BC90);
  }

  return result;
}

uint64_t sub_10003B5F0()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10003B5F8(uint64_t a1, ...)
{
  return sub_100005E8C(v1, (uint64_t)va);
}

uint64_t sub_10003B604(uint64_t a1, ...)
{
  return Array<A>.init(from:)(va);
}

uint64_t sub_10003B610()
{
  uint64_t v0 = sub_10000534C(&qword_10008B410);
  uint64_t v1 = sub_10000534C(&qword_10008B418);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = swift_allocObject(v0, v5 + 3 * v3, v4 | 7);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_100069660;
  uint64_t v7 = v6 + v5;
  uint64_t v8 = (void *)(v6 + v5 + *(int *)(v1 + 48));
  *(void *)(v6 + sub_10000E870(v4, *(void *)(v0 + 448), v5) = XPC_ACTIVITY_PRIORITY;
  *uint64_t v8 = String.init(cString:)(XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  v8[1] = v9;
  uint64_t v10 = type metadata accessor for XPCObject(0LL);
  uint64_t result = swift_storeEnumTagMultiPayload(v8, v10, 8LL);
  if (XPC_ACTIVITY_POWER_NAP)
  {
    uint64_t v12 = (_BYTE *)(v7 + v3 + *(int *)(v1 + 48));
    *(void *)(v7 + sub_10000E894(v0[36], v0[56], v3) = XPC_ACTIVITY_POWER_NAP;
    *uint64_t v12 = 1;
    uint64_t result = swift_storeEnumTagMultiPayload(v12, v10, 2LL);
    if (XPC_ACTIVITY_POST_INSTALL)
    {
      uint64_t v13 = (void *)(v7 + 2 * v3);
      uint64_t v14 = (char *)v13 + *(int *)(v1 + 48);
      *uint64_t v13 = XPC_ACTIVITY_POST_INSTALL;
      *uint64_t v14 = 1;
      swift_storeEnumTagMultiPayload(v14, v10, 2LL);
      uint64_t v15 = sub_10000534C(&qword_10008B420);
      unint64_t v16 = sub_100027258();
      uint64_t result = Dictionary.init(dictionaryLiteral:)(v6, v15, v10, v16);
      qword_100093348 = result;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t *sub_10003B778()
{
  if (qword_10008A030 != -1) {
    swift_once(&qword_10008A030, sub_10003B610);
  }
  return &qword_100093348;
}

uint64_t sub_10003B7B8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000D940(v0, qword_100093350);
  sub_10000D34C(v0, (uint64_t)qword_100093350);
  return Logger.init(subsystem:category:)( 0xD000000000000017LL,  0x800000010006D6D0LL,  0x736E692D74736F70LL,  0xEC0000006C6C6174LL);
}

void sub_10003B834()
{
  qword_100093368 = (uint64_t)&off_100081F28;
}

void sub_10003B848()
{
  qword_100093370 = v0;
}

void sub_10003B86C()
{
  qword_100093378 = (uint64_t)&off_100081FC8;
}

uint64_t sub_10003B880()
{
  uint64_t v2 = type metadata accessor for URL.DirectoryHint(0LL);
  v1[11] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[12] = v3;
  v1[13] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v1[14] = v4;
  v1[15] = *(void *)(v4 - 8);
  v1[16] = sub_100026B60();
  v1[17] = sub_100026B60();
  v1[18] = sub_100026B60();
  v1[19] = sub_100026B60();
  v1[20] = sub_100026B60();
  return swift_task_switch(sub_10003B958, v0, 0LL);
}

uint64_t sub_10003B958()
{
  id v140 = [(id)objc_opt_self(NSFileManager) defaultManager];
  if (qword_10008A040 != -1) {
    goto LABEL_84;
  }
LABEL_2:
  uint64_t v2 = *(void *)(qword_100093368 + 16);
  uint64_t v3 = &unk_100069000;
  char v148 = v0;
  if (v2)
  {
    char v135 = v0 + 2;
    int v149 = v0 + 5;
    unsigned __int8 v138 = v0 + 7;
    char v133 = v0 + 9;
    int v134 = v0 + 8;
    char v132 = v0 + 10;
    uint64_t v144 = v0[12];
    uint64_t v146 = v0[15];
    unsigned int v142 = enum case for URL.DirectoryHint.isDirectory(_:);
    char v131 = v0 + 11;
    swift_bridgeObjectRetain();
    uint64_t v130 = v4;
    uint64_t v5 = (void *)(v4 + 40);
    while (1)
    {
      uint64_t v151 = v5;
      uint64_t v153 = v2;
      uint64_t v6 = v0[19];
      uint64_t v8 = v0[13];
      uint64_t v7 = v0[14];
      uint64_t v9 = v0[11];
      uint64_t v10 = *(v5 - 1);
      uint64_t v11 = *v5;
      swift_bridgeObjectRetain();
      uint64_t v12 = NSHomeDirectory();
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      uint64_t v15 = v14;

      URL.init(fileURLWithPath:isDirectory:)(v13, v15, 1LL);
      sub_10001A9B0();
      v148[5] = v10;
      uint64_t v0 = v148;
      v148[6] = v11;
      (*(void (**)(uint64_t, void, uint64_t))(v144 + 104))(v8, v142, v9);
      unint64_t v16 = sub_10000E944();
      URL.appending<A>(path:directoryHint:)(v149, v8, &type metadata for String, v16);
      (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v8, v9);
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v146 + 8);
      v17(v6, v7);
      swift_bridgeObjectRelease(v11);
      Swift::Bool v18 = URL.checkResourceIsReachable()();
      if (v19)
      {
        swift_errorRelease(v19);
      }

      else if (v18)
      {
        if (qword_10008A038 != -1) {
          swift_once(&qword_10008A038, sub_10003B7B8);
        }
        uint64_t v20 = v148[20];
        uint64_t v21 = v148[18];
        uint64_t v22 = v148[14];
        uint64_t v23 = sub_10001030C();
        uint64_t v24 = sub_10000D34C(v23, (uint64_t)qword_100093350);
        uint64_t v139 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v146 + 16);
        uint64_t v25 = v139(v21, v20, v22);
        uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
        os_log_type_t v27 = static os_log_type_t.default.getter();
        BOOL v28 = os_log_type_enabled(v26, v27);
        uint64_t v1 = v148[14];
        if (v28)
        {
          uint64_t v29 = sub_1000100B0(12LL);
          uint64_t v30 = sub_1000100B0(32LL);
          v155[0] = v30;
          *(_DWORD *)uint64_t v29 = 136446210;
          uint64_t v31 = URL.path.getter();
          *(void *)(v29 + 4) = sub_10003C6E8(v31, v32);
          swift_bridgeObjectRelease(v24);
          sub_10003C734();
          sub_10001AA70((void *)&_mh_execute_header, v26, v27, "removing %{public}s", (uint8_t *)v29);
          swift_arrayDestroy(v30, 1LL);
          sub_100010010(v30);
          sub_100010010(v29);
        }

        else
        {
          sub_10003C734();
        }

        URL._bridgeToObjectiveC()(v48);
        uint64_t v50 = v49;
        v148[7] = 0LL;
        unsigned int v51 = [v140 removeItemAtURL:v49 error:v138];

        uint64_t v52 = (void *)v148[7];
        uint64_t v53 = v148[20];
        if (v51)
        {
          uint64_t v54 = v148[14];
          id v55 = v52;
          uint64_t v46 = v53;
          uint64_t v47 = v54;
        }

        else
        {
          uint64_t v56 = v148[16];
          uint64_t v57 = v148[14];
          id v58 = v52;
          uint64_t v59 = _convertNSErrorToError(_:)(v52);

          swift_willThrow(v60, v61, v62, v63, v64, v65, v66, v67);
          v139(v56, v53, v57);
          swift_errorRetain(v59);
          uint64_t v68 = swift_errorRetain(v59);
          char v69 = (os_log_s *)Logger.logObject.getter(v68);
          LOBYTE(sub_100030D58((uint64_t)va, v1) = static os_log_type_t.error.getter();
          BOOL v70 = os_log_type_enabled(v69, (os_log_type_t)v1);
          uint64_t v71 = v148[20];
          uint64_t v72 = v148[14];
          if (v70)
          {
            os_log_type_t type = v1;
            uint64_t v1 = sub_1000100B0(22LL);
            uint64_t v136 = sub_1000100B0(64LL);
            v155[0] = v136;
            *(_DWORD *)uint64_t v1 = 136446466;
            uint64_t v73 = URL.path.getter();
            v148[8] = sub_10003C6E8(v73, v74);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v134, v133, v1 + 4);
            sub_10001A9B0();
            sub_10003C740();
            *(_WORD *)(v1 + 12) = 2082;
            swift_getErrorValue(v59, v133, v135);
            uint64_t v75 = Error.localizedDescription.getter(v148[3], v148[4]);
            unint64_t v77 = v76;
            v148[10] = sub_100019964(v75, v76, v155);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v132, v131, v1 + 14);
            swift_bridgeObjectRelease(v77);
            sub_10003C6A8();
            sub_10003C6A8();
            _os_log_impl( (void *)&_mh_execute_header,  v69,  type,  "failed removing %{public}s: %{public}s",  (uint8_t *)v1,  0x16u);
            swift_arrayDestroy(v136, 2LL);
            sub_100010010(v136);
            sub_100010010(v1);
          }

          else
          {

            sub_10003C6A8();
            sub_10003C6A8();
            sub_10003C740();
          }

          sub_10003C6A8();
          uint64_t v46 = v71;
          uint64_t v47 = v72;
        }

        goto LABEL_17;
      }

      if (qword_10008A038 != -1) {
        swift_once(&qword_10008A038, sub_10003B7B8);
      }
      uint64_t v33 = v148[20];
      uint64_t v34 = v148[17];
      uint64_t v35 = v148[14];
      uint64_t v36 = sub_10001030C();
      sub_10000D34C(v36, (uint64_t)qword_100093350);
      uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v146 + 16))(v34, v33, v35);
      uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
      os_log_type_t v39 = static os_log_type_t.debug.getter();
      BOOL v40 = os_log_type_enabled(v38, v39);
      uint64_t v1 = v148[20];
      uint64_t v41 = v148[14];
      if (v40)
      {
        uint64_t v42 = sub_1000100B0(12LL);
        uint64_t v43 = sub_1000100B0(32LL);
        v155[0] = v43;
        *(_DWORD *)uint64_t v42 = 136446210;
        uint64_t v44 = URL.path.getter();
        *(void *)(v42 + 4) = sub_10003C6E8(v44, v45);
        sub_10001A9B0();
        sub_10003C728();
        sub_10001AA70((void *)&_mh_execute_header, v38, v39, "skipping %{public}s", (uint8_t *)v42);
        sub_10001AA68(v43);
        sub_100010010(v43);
        sub_100010010(v42);
      }

      else
      {

        sub_10003C728();
      }

      uint64_t v46 = v1;
      uint64_t v47 = v41;
LABEL_17:
      v17(v46, v47);
      uint64_t v5 = v151 + 2;
      uint64_t v2 = v153 - 1;
      if (v153 == 1)
      {
        swift_bridgeObjectRelease(v130);
        uint64_t v3 = (void *)&unk_100069000;
        break;
      }
    }
  }

  if (qword_10008A088 != -1) {
    swift_once(&qword_10008A088, sub_10004D6C4);
  }
  char v78 = (id *)&unk_100093000;
  id v79 = [(id)qword_1000933E0 dictionaryRepresentation];
  uint64_t v80 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v79,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  uint64_t v141 = v80 + 64;
  uint64_t v81 = -1LL;
  uint64_t v82 = -1LL << *(_BYTE *)(v80 + 32);
  if (-v82 < 64) {
    uint64_t v81 = ~(-1LL << -(char)v82);
  }
  unint64_t v83 = v81 & *(void *)(v80 + 64);
  int64_t v145 = (unint64_t)(63 - v82) >> 6;
  uint64_t v147 = v80;
  swift_bridgeObjectRetain();
  int64_t v84 = 0LL;
  int v154 = v3[429];
  if (v83)
  {
LABEL_31:
    uint64_t v150 = (v83 - 1) & v83;
    int64_t v152 = v84;
    unint64_t v85 = __clz(__rbit64(v83)) | (v84 << 6);
    goto LABEL_52;
  }

  while (1)
  {
    BOOL v86 = __OFADD__(v84, 1LL);
    int64_t v87 = v84 + 1;
    if (v86)
    {
      __break(1u);
LABEL_84:
      swift_once(&qword_10008A040, sub_10003B834);
      goto LABEL_2;
    }

    if (v87 >= v145) {
      goto LABEL_82;
    }
    unint64_t v88 = *(void *)(v141 + 8 * v87);
    if (!v88) {
      break;
    }
LABEL_51:
    uint64_t v150 = (v88 - 1) & v88;
    int64_t v152 = v87;
    unint64_t v85 = __clz(__rbit64(v88)) + (v87 << 6);
LABEL_52:
    uint64_t v91 = (uint64_t *)(*(void *)(v147 + 48) + 16 * v85);
    uint64_t v93 = *v91;
    uint64_t v92 = v91[1];
    uint64_t v94 = qword_10008A038;
    swift_bridgeObjectRetain();
    if (v94 != -1) {
      swift_once(&qword_10008A038, sub_10003B7B8);
    }
    uint64_t v95 = sub_10001030C();
    sub_10000D34C(v95, (uint64_t)qword_100093350);
    uint64_t v96 = sub_10003C6B0();
    uint64_t v97 = (os_log_s *)Logger.logObject.getter(v96);
    os_log_type_t v98 = static os_log_type_t.debug.getter();
    if (sub_10003C70C(v98))
    {
      uint64_t v99 = sub_1000100B0(12LL);
      uint64_t v100 = sub_1000100B0(32LL);
      v155[0] = v100;
      *(_DWORD *)uint64_t v99 = v154;
      swift_bridgeObjectRetain();
      *(void *)(v99 + 4) = sub_10003C698();
      sub_10003C6C8();
      sub_10001AA70((void *)&_mh_execute_header, v97, (os_log_type_t)v1, "default set: %{public}s", (uint8_t *)v99);
      sub_10001AA68(v100);
      sub_100010010(v100);
      sub_100010010(v99);
    }

    else
    {
      sub_10003C6BC();
    }

    if (qword_10008A048 != -1) {
      swift_once(&qword_10008A048, sub_10003B848);
    }
    sub_1000599F0(v93, v92, qword_100093370);
    if ((v101 & 1) != 0)
    {
      uint64_t v102 = sub_10003C6B0();
      uint64_t v103 = (os_log_s *)Logger.logObject.getter(v102);
      os_log_type_t v104 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v103, v104))
      {
        uint64_t v105 = sub_1000100B0(12LL);
        uint64_t v1 = sub_1000100B0(32LL);
        sub_10003C6D4(v1);
        *(void *)(v105 + 4) = sub_10003C698();
        sub_10003C6C8();
        sub_10001AA70((void *)&_mh_execute_header, v103, v104, "removing default %{public}s", (uint8_t *)v105);
        sub_10001AA68(v1);
        sub_100010010(v1);
        sub_100010010(v105);
      }

      else
      {
        sub_10003C6BC();
      }

      id v121 = v78[124];
      NSString v122 = sub_10003C71C();
      sub_10001A9B0();
      [v121 removeObjectForKey:v122];
    }

    else
    {
      if (qword_10008A050 != -1) {
        swift_once(&qword_10008A050, sub_10003B86C);
      }
      uint64_t v106 = *(void *)(qword_100093378 + 16);
      if (v106)
      {
        swift_bridgeObjectRetain();
        uint64_t v143 = v107;
        uint64_t v108 = (void **)(v107 + 40);
        do
        {
          uint64_t v109 = (uint64_t)*(v108 - 1);
          uint64_t v110 = *v108;
          swift_bridgeObjectRetain();
          v111._uint64_t countAndFlagsBits = v109;
          v111._object = v110;
          LOBYTE(v109) = String.hasPrefix(_:)(v111);
          swift_bridgeObjectRelease(v110);
          if ((v109 & 1) != 0)
          {
            uint64_t v112 = sub_10003C6B0();
            uint64_t v113 = (os_log_s *)Logger.logObject.getter(v112);
            os_log_type_t v114 = static os_log_type_t.default.getter();
            if (sub_10003C70C(v114))
            {
              uint64_t v115 = sub_1000100B0(12LL);
              unint64_t v116 = v78;
              uint64_t v117 = sub_1000100B0(32LL);
              sub_10003C6D4(v117);
              *(void *)(v115 + 4) = sub_10003C698();
              sub_10003C6C8();
              sub_10001AA70( (void *)&_mh_execute_header,  v113,  (os_log_type_t)v1,  "removing default %{public}s",  (uint8_t *)v115);
              sub_10001AA68(v117);
              uint64_t v118 = v117;
              char v78 = v116;
              sub_100010010(v118);
              sub_100010010(v115);
            }

            else
            {
              sub_10003C6BC();
            }

            id v119 = v78[124];
            NSString v120 = sub_10003C71C();
            [v119 removeObjectForKey:v120];
          }

          v108 += 2;
          --v106;
        }

        while (v106);
        swift_bridgeObjectRelease(v143);
        sub_10001A9B0();
        uint64_t v0 = v148;
      }

      else
      {
        sub_10001A9B0();
      }
    }

    unint64_t v83 = v150;
    int64_t v84 = v152;
    if (v150) {
      goto LABEL_31;
    }
  }

  sub_10003C700();
  if (v89 == v86) {
    goto LABEL_82;
  }
  sub_10003C6F4();
  if (v88) {
    goto LABEL_50;
  }
  sub_10003C700();
  if (v89 == v86) {
    goto LABEL_82;
  }
  sub_10003C6F4();
  if (v88) {
    goto LABEL_50;
  }
  sub_10003C700();
  if (v89 == v86) {
    goto LABEL_82;
  }
  sub_10003C6F4();
  if (v88) {
    goto LABEL_50;
  }
  sub_10003C700();
  if (v89 == v86) {
    goto LABEL_82;
  }
  sub_10003C6F4();
  if (v88) {
    goto LABEL_50;
  }
  sub_10003C700();
  if (v89 == v86) {
    goto LABEL_82;
  }
  sub_10003C6F4();
  if (v88)
  {
LABEL_50:
    int64_t v87 = v90;
    goto LABEL_51;
  }

  while (1)
  {
    int64_t v87 = v90 + 1;
    if (__OFADD__(v90, 1LL)) {
      __break(1u);
    }
    if (v87 >= v145) {
      break;
    }
    unint64_t v88 = *(void *)(v141 + 8 * v87);
    ++v90;
    if (v88) {
      goto LABEL_51;
    }
  }

LABEL_82:
  swift_release(v147);
  swift_bridgeObjectRelease(v147);
  uint64_t v123 = v0[19];
  uint64_t v124 = v0[20];
  uint64_t v126 = v0[17];
  uint64_t v125 = v0[18];
  uint64_t v127 = v0[16];
  uint64_t v128 = v0[13];

  swift_task_dealloc(v124);
  swift_task_dealloc(v123);
  swift_task_dealloc(v125);
  swift_task_dealloc(v126);
  swift_task_dealloc(v127);
  swift_task_dealloc(v128);
  return ((uint64_t (*)(void))v0[1])();
}

          swift_once(&qword_10008A0B0, sub_100059B84);
          goto LABEL_77;
        }

        v59[2] = v55;
        swift_bridgeObjectRetain();
      }

      uint64_t v63 = *(void *)(v0 + 64);
      uint64_t v64 = *(void *)(v0 + 16);
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = v59;
      swift_bridgeObjectRelease(v64);
      swift_bridgeObjectRelease(v48);
      Swift::Bool v18 = sub_10001FDE4(v63);
    }

    sub_10005B784(v37, v38, v39, v40, v41, v42, v43, v44, v103, v104, v105, v106, v107, v108);
    uint64_t v65 = sub_10005B764();
    uint64_t v67 = -1LL << v66;
    if (-(-1LL << v66) < 64) {
      uint64_t v68 = ~(-1LL << -(char)v67);
    }
    else {
      uint64_t v68 = -1LL;
    }
    char v69 = v68 & *(void *)(v65 + 64);
    swift_bridgeObjectRetain();
    if (v69)
    {
      id v79 = 0LL;
      unint64_t v76 = __clz(__rbit64(v69));
      unint64_t v77 = (v69 - 1) & v69;
      goto LABEL_76;
    }

    BOOL v70 = 63 - v67;
    uint64_t v12 = v104;
    if ((unint64_t)(63 - v67) > 0x7F)
    {
      id v55 = *(void *)(v53 + 72);
      if (v55)
      {
LABEL_68:
        id v79 = 1LL;
        goto LABEL_75;
      }

      if (v70 >= 0xC0)
      {
        id v55 = *(void *)(v53 + 80);
        if (v55) {
          goto LABEL_70;
        }
        if (v70 >= 0x100)
        {
          id v55 = *(void *)(v53 + 88);
          if (v55)
          {
            id v79 = 3LL;
            goto LABEL_75;
          }

          if (v70 >= 0x140)
          {
            id v55 = *(void *)(v53 + 96);
            if (v55)
            {
              id v79 = 4LL;
              goto LABEL_75;
            }

            uint64_t v71 = v70 >> 6;
            uint64_t v72 = 13LL;
            while (v72 - 8 < v71)
            {
              id v55 = *(void *)(v53 + 8 * v72++);
              if (v55)
              {
                id v79 = v72 - 9;
                goto LABEL_75;
              }
            }
          }
        }
      }
    }

    unint64_t v74 = *(void *)(v0 + 104);
    uint64_t v73 = *(void *)(v0 + 112);
    swift_release(v53);
    sub_10005B7D8();
    if (v73 == v74)
    {
      char v78 = *(void **)(v0 + 96);
      swift_bridgeObjectRelease(*(void *)(v0 + 88));

      goto LABEL_63;
    }

    uint64_t v13 = *(void *)(v0 + 112) + 1LL;
    *(void *)(v0 + 112) = v13;
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v11 = (void *)v105;
    if (v13 < *(void *)(v6 + 16)) {
      continue;
    }
    break;
  }

uint64_t type metadata accessor for PostInstallActivity()
{
  return objc_opt_self(&OBJC_CLASS____TtC13rtcreportingd19PostInstallActivity);
}

uint64_t sub_10003C5B8()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10008BCC4);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100013D04;
  return sub_10003B880();
}

double sub_10003C5FC()
{
  *(void *)&double result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

uint64_t sub_10003C618()
{
  return 0x74736E6974736F70LL;
}

unint64_t sub_10003C638(uint64_t a1)
{
  unint64_t result = sub_10003C65C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003C65C()
{
  unint64_t result = qword_10008BD50;
  if (!qword_10008BD50)
  {
    uint64_t v1 = type metadata accessor for PostInstallActivity();
    unint64_t result = swift_getWitnessTable(&unk_10006BA70, v1);
    atomic_store(result, (unint64_t *)&qword_10008BD50);
  }

  return result;
}

uint64_t sub_10003C698()
{
  return sub_100019964(v1, v0, (uint64_t *)(v2 - 96));
}

uint64_t sub_10003C6A8()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10003C6B0()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_10003C6BC()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_10003C6C8()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

uint64_t sub_10003C6D4(uint64_t a1)
{
  *(void *)(v3 - 96) = a1;
  _DWORD *v1 = *(_OWORD *)(v3 - 128);
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10003C6E8(uint64_t a1, unint64_t a2)
{
  return sub_100019964(a1, a2, (uint64_t *)(v2 - 96));
}

  ;
}

  ;
}

BOOL sub_10003C70C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

NSString sub_10003C71C()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10003C728()
{
  return v2(v0, v1);
}

uint64_t sub_10003C734()
{
  return v2(v0, v1);
}

uint64_t sub_10003C740()
{
  return v2(v0, v1);
}

uint64_t sub_10003C74C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v3 + 24) = a3;
  return swift_task_switch(sub_10003C764, 0LL, 0LL);
}

uint64_t sub_10003C764()
{
  uint64_t v1 = v0[2];
  if (type metadata accessor for SubmitEventsActivity() == v1)
  {
    uint64_t v3 = sub_10003E394();
    v0[4] = v3;
    sub_10001AA24();
    sub_10003E3DC();
    uint64_t v4 = sub_10003C8D4;
  }

  else if (type metadata accessor for RefreshStorebagsActivity() == v1)
  {
    uint64_t v3 = sub_10003E394();
    v0[5] = v3;
    sub_10001AA24();
    sub_10003E3DC();
    uint64_t v4 = sub_10003C91C;
  }

  else if (type metadata accessor for SubmitEagerEventsActivity() == v1)
  {
    uint64_t v3 = sub_10003E394();
    v0[6] = v3;
    sub_10001AA24();
    sub_10003E3DC();
    uint64_t v4 = sub_10003C964;
  }

  else if (type metadata accessor for CacheCleanupActivity() == v1)
  {
    uint64_t v3 = sub_10003E394();
    v0[7] = v3;
    sub_10001AA24();
    sub_10003E3DC();
    uint64_t v4 = sub_10003C9AC;
  }

  else
  {
    if (type metadata accessor for PostInstallActivity() != v1) {
      return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "rtcreportingd/XPCActivity.swift",  31LL,  2LL,  24LL,  0);
    }
    uint64_t v3 = sub_10003E394();
    v0[8] = v3;
    sub_10001AA24();
    sub_10003E3DC();
    uint64_t v4 = sub_10003C9F4;
  }

  return swift_task_switch(v4, v3, 0LL);
}

uint64_t sub_10003C8D4()
{
  uint64_t v2 = sub_10003E3B4( &qword_10008BF70,  v1,  (uint64_t (*)(uint64_t))type metadata accessor for SubmitEventsActivity,  (uint64_t)&unk_10006BE38);
  return sub_10003E388(*(void *)(v0 + 32), v2, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003C91C()
{
  uint64_t v2 = sub_10003E3B4( &qword_10008BF68,  v1,  (uint64_t (*)(uint64_t))type metadata accessor for RefreshStorebagsActivity,  (uint64_t)&unk_10006A93C);
  return sub_10003E388(*(void *)(v0 + 40), v2, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003C964()
{
  uint64_t v2 = sub_10003E3B4( &qword_10008BF60,  v1,  (uint64_t (*)(uint64_t))type metadata accessor for SubmitEagerEventsActivity,  (uint64_t)&unk_10006AC0C);
  return sub_10003E388(*(void *)(v0 + 48), v2, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003C9AC()
{
  uint64_t v2 = sub_10003E3B4( &qword_10008BF58,  v1,  (uint64_t (*)(uint64_t))type metadata accessor for CacheCleanupActivity,  (uint64_t)&unk_10006B8A8);
  return sub_10003E388(*(void *)(v0 + 56), v2, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003C9F4()
{
  uint64_t v2 = sub_10003E3B4( &qword_10008BF50,  v1,  (uint64_t (*)(uint64_t))type metadata accessor for PostInstallActivity,  (uint64_t)&unk_10006BA54);
  return sub_10003E388(*(void *)(v0 + 64), v2, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003CA3C(xpc_object_t criteria)
{
  uint64_t v2 = *(_xpc_activity_s **)(v1 + 16);
  if (!criteria) {
    criteria = xpc_dictionary_create_empty();
  }
  xpc_object_t v3 = criteria;
  xpc_activity_set_criteria(v2, criteria);
  return swift_unknownObjectRelease(v3);
}

uint64_t sub_10003CA74()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for XPCActivityHandle()
{
  return objc_opt_self(&OBJC_CLASS____TtC13rtcreportingd17XPCActivityHandle);
}

uint64_t sub_10003CAB4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000D940(v0, qword_10008BD60);
  sub_10000D34C(v0, (uint64_t)qword_10008BD60);
  return Logger.init(subsystem:category:)( 0xD000000000000017LL,  0x800000010006D6D0LL,  0x7974697669746361LL,  0xE800000000000000LL);
}

void sub_10003CB28(char a1)
{
  if (a1 != 2) {
    *(_BYTE *)(v1 + 136) = a1 & 1;
  }
  _StringGuts.grow(_:)(26LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  aBlock = (void **)0xD000000000000018LL;
  unint64_t v20 = 0x800000010006DCF0LL;
  uint64_t v2 = *(void *)(v1 + 112);
  uint64_t v3 = *(void *)(v1 + 120);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 32);
  v5._uint64_t countAndFlagsBits = v4(v2, v3);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  uint64_t v23 = sub_10003E378;
  uint64_t v24 = v1;
  aBlock = _NSConcreteStackBlock;
  unint64_t v20 = 1107296256LL;
  uint64_t v21 = sub_10003CD8C;
  uint64_t v22 = &unk_100084F80;
  uint64_t v7 = _Block_copy(&aBlock);
  uint64_t v8 = v24;
  sub_10001AA24();
  swift_release(v8);
  uint64_t v9 = String.utf8CString.getter(0xD000000000000018LL, 0x800000010006DCF0LL);
  swift_bridgeObjectRelease(0x800000010006DCF0LL);
  xpc_activity_register((const char *)(v9 + 32), XPC_ACTIVITY_CHECK_IN, v7);
  swift_release(v9);
  _Block_release(v7);
  if (qword_10008A058 != -1) {
    swift_once(&qword_10008A058, sub_10003CAB4);
  }
  uint64_t v10 = sub_10001030C();
  sub_10000D34C(v10, (uint64_t)qword_10008BD60);
  uint64_t v11 = sub_10003E3C4();
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (sub_10003E440(v13))
  {
    uint64_t v14 = (uint8_t *)sub_1000156F0();
    uint64_t v15 = sub_1000100B0(32LL);
    aBlock = (void **)v15;
    *(_DWORD *)uint64_t v14 = 136315138;
    uint64_t v16 = v4(v2, v3);
    uint64_t v18 = sub_100019964(v16, v17, (uint64_t *)&aBlock);
    sub_100026BAC((uint64_t)&v18, (uint64_t)&aBlock);
    sub_10000FFD8();
    sub_10003E3A8();
    sub_10001AA70((void *)&_mh_execute_header, v12, (os_log_type_t)v7, "registered: %s", v14);
    sub_10001AA68(v15);
    sub_100010010(v15);
    sub_100010010((uint64_t)v14);
  }

  else
  {
    sub_10003E3A8();
  }
}

uint64_t sub_10003CD8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_10003CDD4()
{
  uint64_t v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = type metadata accessor for XPCObject(0LL);
  uint64_t v38 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  sub_10003E428();
  sub_10000534C(&qword_10008BFA8);
  sub_100006B54();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v5);
  uint64_t v9 = (uint64_t *)((char *)&v34 - v8);
  uint64_t v10 = sub_10003E470();
  uint64_t v11 = *(void *)(v10 + 16);
  swift_bridgeObjectRelease(v10);
  if (!v11) {
    return 0LL;
  }
  xpc_object_t v41 = RTCXPCDictionary.init()();
  uint64_t result = sub_10003E470();
  int64_t v13 = 0LL;
  uint64_t v14 = *(void *)(result + 64);
  uint64_t v36 = result + 64;
  uint64_t v39 = result;
  uint64_t v15 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v37 = (unint64_t)(v15 + 63) >> 6;
  int64_t v35 = v37 - 1;
  if ((v16 & v14) == 0) {
    goto LABEL_7;
  }
LABEL_5:
  unint64_t v18 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v19 = v18 | (v13 << 6);
  while (2)
  {
    uint64_t v20 = *(void *)(v39 + 56);
    *uint64_t v7 = *(void *)(*(void *)(v39 + 48) + 8 * v19);
    uint64_t v21 = v20 + *(void *)(v38 + 72) * v19;
    uint64_t v22 = sub_1000208B8();
    sub_10003E2A8(v21, (uint64_t)v7 + *(int *)(v22 + 48));
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v7, 0LL, 1LL, v22);
    while (1)
    {
      sub_10003E2EC((uint64_t)v7, (uint64_t)v9);
      uint64_t v29 = sub_1000208B8();
      if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v9, 1LL, v29) == 1)
      {
        swift_release(v39);
        return (uint64_t)v41;
      }

      uint64_t v30 = *v9;
      sub_10003E334((uint64_t)v9 + *(int *)(v29 + 48), v0);
      uint64_t v31 = String.init(cString:)(v30);
      uint64_t v33 = v32;
      sub_10003E2A8(v0, (uint64_t)v3);
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)v3, 0LL, 1LL, v40);
      RTCXPCDictionary.subscript.setter((uint64_t)v3, v31, v33);
      uint64_t result = sub_10001A1A4(v0);
      if (v17) {
        goto LABEL_5;
      }
LABEL_7:
      int64_t v23 = v13 + 1;
      if (__OFADD__(v13, 1LL))
      {
        __break(1u);
        goto LABEL_31;
      }

      if (v23 < v37)
      {
        unint64_t v24 = *(void *)(v36 + 8 * v23);
        if (v24) {
          goto LABEL_10;
        }
        int64_t v25 = v13 + 2;
        ++v13;
        if (v23 + 1 < v37)
        {
          unint64_t v24 = *(void *)(v36 + 8 * v25);
          if (v24) {
            goto LABEL_13;
          }
          int64_t v13 = v23 + 1;
          if (v23 + 2 < v37)
          {
            unint64_t v24 = *(void *)(v36 + 8 * (v23 + 2));
            if (v24)
            {
              v23 += 2LL;
              goto LABEL_10;
            }

            int64_t v25 = v23 + 3;
            int64_t v13 = v23 + 2;
            if (v23 + 3 < v37) {
              break;
            }
          }
        }
      }

void sub_10003D130(uint64_t a1)
{
  uint64_t v5 = v1;
  sub_10000534C((uint64_t *)&unk_10008C4A0);
  sub_100006B54();
  __chkstk_darwin(v7);
  sub_10003E428();
  uint64_t v8 = type metadata accessor for XPCActivityHandle();
  uint64_t v9 = sub_100006B14(v8, 24LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = a1;
  uint64_t v10 = (_xpc_activity_s *)swift_unknownObjectRetain(a1);
  xpc_activity_state_t state = xpc_activity_get_state(v10);
  if (state == 2)
  {
    if (qword_10008A058 != -1) {
      swift_once(&qword_10008A058, sub_10003CAB4);
    }
    uint64_t v23 = sub_10001030C();
    sub_10000D34C(v23, (uint64_t)qword_10008BD60);
    uint64_t v24 = sub_10003E450();
    int64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (sub_10003E440(v26))
    {
      uint64_t v27 = (uint8_t *)sub_1000156F0();
      uint64_t v28 = sub_1000100B0(32LL);
      *(_DWORD *)uint64_t v27 = 136315138;
      xpc_activity_state_t v49 = v28;
      uint64_t v29 = sub_10003E3D0(*(void *)(v5 + 112), *(void *)(v5 + 120));
      uint64_t v31 = sub_1000157BC(v29, v30);
      uint64_t v32 = sub_10003E480(v31);
      sub_100026BAC(v32, v33);
      sub_10000FFD8();
      sub_10001A98C(v5);
      sub_10001AA70((void *)&_mh_execute_header, v25, v4, "run: %s", v27);
      sub_10001AA68(v28);
      sub_100010010(v28);
      sub_100010010((uint64_t)v27);
    }

    else
    {
      sub_10001A98C(v5);
    }

    uint64_t v42 = *(_xpc_activity_s **)(v9 + 16);
    if (!xpc_activity_should_defer(v42))
    {
      xpc_activity_set_state(v42, 4LL);
      uint64_t v44 = type metadata accessor for TaskPriority(0LL);
      sub_10003E41C(v2, v45, v46, v44);
      uint64_t v47 = (void *)sub_100006B14((uint64_t)&unk_100084F68, 48LL);
      v47[2] = 0LL;
      v47[3] = 0LL;
      v47[4] = v5;
      v47[5] = v9;
      swift_retain(v5);
      uint64_t v43 = sub_100016914(v2, (uint64_t)&unk_10008BF98, (uint64_t)v47);
      goto LABEL_26;
    }

    xpc_activity_set_state(v42, 3LL);
  }

  else if (state)
  {
    if (qword_10008A058 != -1) {
      swift_once(&qword_10008A058, sub_10003CAB4);
    }
    uint64_t v34 = sub_10001030C();
    sub_10000D34C(v34, (uint64_t)qword_10008BD60);
    uint64_t v35 = sub_10001AA24();
    uint64_t v48 = (void *)Logger.logObject.getter(v35);
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v48, v36))
    {
      sub_10003E3A8();

      return;
    }

    int64_t v37 = (uint8_t *)sub_1000100B0(12LL);
    *(_DWORD *)int64_t v37 = 134217984;
    xpc_activity_state_t v49 = xpc_activity_get_state(*(xpc_activity_t *)(v9 + 16));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v37 + 4);
    swift_release(v9);
    sub_10001AA70((void *)&_mh_execute_header, (os_log_s *)v48, v36, "unrecognized XPC activity state: %ld", v37);
    sub_100010010((uint64_t)v37);
  }

  else
  {
    if (qword_10008A058 != -1) {
      swift_once(&qword_10008A058, sub_10003CAB4);
    }
    uint64_t v12 = sub_10001030C();
    sub_10000D34C(v12, (uint64_t)qword_10008BD60);
    uint64_t v13 = sub_10003E450();
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (sub_10003E460(v15))
    {
      uint64_t v16 = (uint8_t *)sub_1000156F0();
      uint64_t v17 = sub_1000100B0(32LL);
      *(_DWORD *)uint64_t v16 = 136315138;
      xpc_activity_state_t v49 = v17;
      uint64_t v18 = sub_10003E3D0(*(void *)(v5 + 112), *(void *)(v5 + 120));
      uint64_t v20 = sub_1000157BC(v18, v19);
      uint64_t v21 = sub_10003E480(v20);
      sub_10003E4A0(v21, v22);
      sub_10000FFD8();
      sub_10001A98C(v5);
      sub_10001AA70((void *)&_mh_execute_header, v14, v3, "checkin: %s", v16);
      sub_10001AA68(v17);
      sub_100010010(v17);
      sub_100010010((uint64_t)v16);
    }

    else
    {
      sub_10001A98C(v5);
    }

    uint64_t v38 = sub_10003CDD4();
    if (v38)
    {
      uint64_t v39 = v38;
      xpc_object_t v40 = xpc_activity_copy_criteria(*(xpc_activity_t *)(v9 + 16));
      swift_unknownObjectRelease(v40);
      if (!v40)
      {
        xpc_object_t v41 = (void *)swift_unknownObjectRetain(v39);
        sub_10003CA3C(v41);
      }

      swift_unknownObjectRelease(v39);
    }
  }

  uint64_t v43 = v9;
LABEL_26:
  swift_release(v43);
}

uint64_t sub_10003D568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_10003D580, a4, 0LL);
}

uint64_t sub_10003D580()
{
  return sub_10001ABB0(*(uint64_t (**)(void))(v0 + 8));
}

void sub_10003D5A8()
{
  uint64_t v2 = v0[16];
  if (v2)
  {
    os_log_type_t v3 = v0;
    uint64_t v4 = qword_10008A058;
    swift_retain(v2);
    if (v4 != -1) {
      swift_once(&qword_10008A058, sub_10003CAB4);
    }
    uint64_t v5 = sub_10001030C();
    sub_10000D34C(v5, (uint64_t)qword_10008BD60);
    uint64_t v6 = sub_10003E3C4();
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (sub_10003E460(v8))
    {
      uint64_t v9 = (uint8_t *)sub_1000156F0();
      uint64_t v10 = sub_1000100B0(32LL);
      *(_DWORD *)uint64_t v9 = 136315138;
      uint64_t v15 = v10;
      uint64_t v11 = sub_10003E3D0(v3[14], v3[15]);
      uint64_t v14 = sub_100019964(v11, v12, &v15);
      sub_10003E4A0((uint64_t)&v14, (uint64_t)&v15);
      sub_10003E3A8();
      sub_10000FFD8();
      sub_10001AA70((void *)&_mh_execute_header, v7, v1, "cancel: %s", v9);
      sub_10001AA68(v10);
      sub_100010010(v10);
      sub_100010010((uint64_t)v9);
    }

    else
    {

      sub_10003E3A8();
    }

    sub_10000534C(&qword_10008A8A8);
    Task.cancel()();
    swift_release(v2);
    uint64_t v13 = v3[16];
    v3[16] = 0LL;
    swift_release(v13);
  }

void sub_10003D740(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  sub_10000534C((uint64_t *)&unk_10008C4A0);
  sub_100006B54();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(a1 + 16);
  if (*((_BYTE *)v2 + 136) == 1)
  {
    xpc_activity_set_state(*(xpc_activity_t *)(a1 + 16), 5LL);
    if (qword_10008A058 != -1) {
      swift_once(&qword_10008A058, sub_10003CAB4);
    }
    uint64_t v9 = sub_10001030C();
    sub_10000D34C(v9, (uint64_t)qword_10008BD60);
    uint64_t v10 = sub_10003E3C4();
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v11))
    {
      unint64_t v12 = (uint8_t *)sub_1000156F0();
      uint64_t v13 = sub_1000100B0(32LL);
      *(_DWORD *)unint64_t v12 = 136315138;
      aBlock[0] = v13;
      uint64_t v14 = sub_10003E3D0(v2[14], v2[15]);
      uint64_t v28 = sub_100019964(v14, v15, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, aBlock, v12 + 4);
      sub_10000FFD8();
      sub_10003E3A8();
      sub_10001AA70((void *)&_mh_execute_header, v27, v11, "disabled: skipping %s", v12);
      sub_10001AA68(v13);
      sub_100010010(v13);
      sub_100010010((uint64_t)v12);
    }

    else
    {
      sub_10003E3A8();
    }
  }

  else
  {
    aBlock[4] = (uint64_t)sub_10003DF78;
    unint64_t v30 = v2;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_10003CD8C;
    aBlock[3] = (uint64_t)&unk_100084EE0;
    uint64_t v16 = _Block_copy(aBlock);
    uint64_t v17 = v30;
    sub_10001AA24();
    swift_release(v17);
    uint64_t v18 = xpc_activity_add_eligibility_changed_handler(v8, v16);
    _Block_release(v16);
    uint64_t v19 = type metadata accessor for TaskPriority(0LL);
    sub_10003E41C((uint64_t)v7, v20, v21, v19);
    uint64_t v23 = sub_10001A7C4( &qword_10008BF38,  v22,  (uint64_t (*)(uint64_t))type metadata accessor for XPCActivity,  (uint64_t)&unk_10006BB14);
    uint64_t v24 = (void *)sub_100006B14((uint64_t)&unk_100084F18, 64LL);
    void v24[2] = v2;
    v24[3] = v23;
    v24[4] = v18;
    v24[5] = a1;
    uint64_t v24[6] = v2;
    v24[7] = v4;
    sub_10003E3C4();
    swift_retain(a1);
    uint64_t v25 = sub_10004FDF8((uint64_t)v7, (uint64_t)&unk_10008BF40, (uint64_t)v24);
    uint64_t v26 = v2[16];
    v2[16] = v25;
    swift_release(v26);
  }

uint64_t sub_10003D9F8(_xpc_activity_s *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000534C((uint64_t *)&unk_10008C4A0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = xpc_activity_should_defer(a1);
  if ((_DWORD)result)
  {
    uint64_t v8 = type metadata accessor for TaskPriority(0LL);
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v6, 1LL, 1LL, v8);
    uint64_t v9 = (void *)swift_allocObject(&unk_100084F40, 40LL, 7LL);
    v9[2] = 0LL;
    v9[3] = 0LL;
    v9[4] = a2;
    swift_retain(a2);
    uint64_t v10 = sub_100016914((uint64_t)v6, (uint64_t)&unk_10008BF80, (uint64_t)v9);
    return swift_release(v10);
  }

  return result;
}

uint64_t sub_10003DAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a4;
  return swift_task_switch(sub_10003DADC, a4, 0LL);
}

uint64_t sub_10003DADC()
{
  return sub_10001ABB0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003DB04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  return swift_task_switch(sub_10003DB20, a6, 0LL);
}

uint64_t sub_10003DB20()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v1 + 112);
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v4 = (void *)swift_task_alloc(dword_10008BF4C);
  *(void *)(v0 + 72) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10003DB78;
  return sub_10003C74C(v3, v2, *(void *)(v0 + 56));
}

uint64_t sub_10003DB78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = a2;
  uint64_t v4 = v3[9];
  v3[10] = a1;
  swift_task_dealloc(v4);
  return sub_10001A9C0();
}

uint64_t sub_10003DBD8()
{
  uint64_t v1 = v0[4];
  uint64_t ObjectType = swift_getObjectType(v0[10]);
  uint64_t v3 = *(int **)(v1 + 16);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)v3 + *v3);
  uint64_t v4 = (void *)swift_task_alloc(v3[1]);
  v0[11] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10003DC9C;
  return v6(ObjectType, v1);
}

uint64_t sub_10003DC9C()
{
  return sub_10001A9C0();
}

uint64_t sub_10003DCEC()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  swift_unknownObjectRelease(*(void *)(v0 + 80));
  sub_10003E494(v2, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10003DD3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    xpc_activity_remove_eligibility_changed_handler();
  }
  xpc_activity_set_state(*(xpc_activity_t *)(a2 + 16), 5LL);
  if (qword_10008A058 != -1) {
    swift_once(&qword_10008A058, sub_10003CAB4);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_10000D34C(v5, (uint64_t)qword_10008BD60);
  uint64_t v6 = swift_retain_n(a3, 2LL);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v15 = v10;
    uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(a3 + 120) + 32LL))();
    unint64_t v13 = v12;
    uint64_t v14 = sub_100019964(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v9 + 4);
    swift_release_n(a3, 2LL);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "done: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a3, 2LL);
  }

uint64_t sub_10003DEF8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a2;
  *(void *)(v2 + 128) = 0LL;
  *(_BYTE *)(v2 + 136) = 0;
  *(void *)(v2 + 112) = a1;
  return v2;
}

uint64_t sub_10003DF34()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for XPCActivity()
{
  return objc_opt_self(&OBJC_CLASS____TtC13rtcreportingd11XPCActivity);
}

uint64_t sub_10003DF78(_xpc_activity_s *a1)
{
  return sub_10003D9F8(a1, v1);
}

uint64_t sub_10003DF80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003DF90(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10003DF98()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10003DFC8()
{
  uint64_t v2 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v5 = (void *)swift_task_alloc(dword_10008BF34);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  uint64_t v6 = sub_10003E3EC(v5);
  return sub_10003DB04(v6, v7, v8, v9, v2, v4, v3);
}

uint64_t sub_10003E040()
{
  uint64_t v1 = sub_10000534C(&qword_10008ACD8);
  uint64_t v2 = sub_100006B14(v1, 56LL);
  *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = xmmword_10006BAA0;
  type metadata accessor for SubmitEventsActivity();
  sub_10003E3B4( &qword_10008BF70,  v3,  (uint64_t (*)(uint64_t))type metadata accessor for SubmitEventsActivity,  (uint64_t)&unk_10006BE38);
  uint64_t v4 = type metadata accessor for XPCActivity();
  sub_10003E3BC(v4, 137LL);
  sub_10003E408();
  *(void *)(v2 + 32) = v0;
  type metadata accessor for PostInstallActivity();
  sub_10003E3B4( &qword_10008BF50,  v5,  (uint64_t (*)(uint64_t))type metadata accessor for PostInstallActivity,  (uint64_t)&unk_10006BA54);
  sub_10003E3BC(v4, 137LL);
  sub_10003E408();
  *(void *)(v2 + 40) = v0;
  uint64_t v6 = type metadata accessor for CacheCleanupActivity();
  uint64_t v8 = sub_10003E3B4( &qword_10008BF58,  v7,  (uint64_t (*)(uint64_t))type metadata accessor for CacheCleanupActivity,  (uint64_t)&unk_10006B8A8);
  uint64_t v9 = sub_10003E3BC(v4, 137LL);
  uint64_t v10 = sub_10003DEF8(v6, v8);
  *(void *)(v2 + 48) = v9;
  uint64_t result = specialized Array._endMutation()(v10);
  qword_100093380 = v2;
  return result;
}

uint64_t sub_10003E180()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10003E1A8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_10008BF7C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10003E37C;
  return sub_10003DAC4(a1, v4, v5, v6);
}

uint64_t sub_10003E214()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10003E244()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc(dword_10008BF94);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  uint64_t v4 = sub_10003E3EC(v3);
  return sub_10003D568(v4, v5, v6, v7, v2);
}

uint64_t sub_10003E2A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for XPCObject(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003E2EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000534C(&qword_10008BFA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003E334(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for XPCObject(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003E388(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_10003E394()
{
  return swift_allocObject(v0, 112LL, 15LL);
}

uint64_t sub_10003E3A8()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_10003E3B4(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  return sub_10001A7C4(a1, 255LL, a3, a4);
}

uint64_t sub_10003E3BC(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 15LL);
}

uint64_t sub_10003E3C4()
{
  return swift_retain_n(v0, 2LL);
}

uint64_t sub_10003E3D0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_10003E3DC()
{
  return swift_defaultActor_initialize(v0);
}

uint64_t sub_10003E3E4()
{
  return swift_release(*(void *)(v0 + 24));
}

uint64_t sub_10003E3EC(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10003E408()
{
  return sub_10003DEF8(v0, v1);
}

uint64_t sub_10003E41C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s10RTCUtility9XPCObjectOwst_0(a1, 1LL, 1LL, a4);
}

  ;
}

BOOL sub_10003E440(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10003E450()
{
  return swift_retain_n(v0, 2LL);
}

BOOL sub_10003E460(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10003E470()
{
  return v0(v1, v2);
}

uint64_t sub_10003E480(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

void sub_10003E494(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10003E4A0(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_10003E4AC(void *a1)
{
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t *sub_10003E4EC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  uint64_t v7 = a2[4];
  a1[4] = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t *sub_10003E558(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[3];
  uint64_t v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a2[4];
  uint64_t v13 = a1[4];
  a1[4] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

void *sub_10003E5FC(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  uint64_t v5 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a1[4];
  a1[4] = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  return a1;
}

void type metadata accessor for EventAllowFilter()
{
}

void type metadata accessor for EventRemoveFilter()
{
}

void type metadata accessor for EventSHA256KeyFilter()
{
}

void type metadata accessor for EventAllowValuesFilter()
{
}

void type metadata accessor for EventDenyValuesFilter()
{
}

void type metadata accessor for EventInsertStringKeyFilter()
{
}

void type metadata accessor for EventAppendToKeyFilter()
{
}

void type metadata accessor for EventPrependToKeyFilter()
{
}

uint64_t sub_10003E6D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = (uint64_t *)(v11 - v12);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v43 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (uint64_t *)((char *)&v43 - v19);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v43 - v21;
  if (*(void *)(a6 + 16))
  {
    if (!*(void *)(a3 + 16)) {
      goto LABEL_8;
    }
    unint64_t v23 = sub_100033A58(0x646F6874656D5FLL, 0xE700000000000000LL);
    if ((v24 & 1) == 0) {
      goto LABEL_8;
    }
    unint64_t v25 = v23;
    uint64_t v26 = *(void *)(a3 + 56);
    uint64_t v27 = sub_1000083F4();
    sub_10001FD14(v26 + *(void *)(*(void *)(v27 - 8) + 72LL) * v25, (uint64_t)v22);
    uint64_t v28 = sub_100041DC8();
    _s10RTCUtility9XPCObjectOwst_0(v28, v29, v30, v27);
    sub_1000417C8((uint64_t)v22, (uint64_t)v20);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20, v27);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v32 = *v20;
    }

    else
    {
      if (EnumCaseMultiPayload != 2)
      {
        sub_10001FDE4((uint64_t)v20);
        goto LABEL_9;
      }

      uint64_t v32 = *v20;
      if (v32 < 0)
      {
        __break(1u);
LABEL_8:
        sub_1000083F4();
        uint64_t v33 = sub_100041DB8();
        _s10RTCUtility9XPCObjectOwst_0(v33, v34, v35, v36);
LABEL_9:
        uint64_t v37 = (uint64_t)v22;
LABEL_23:
        sub_10001531C(v37, &qword_10008A800);
        return 0LL;
      }
    }

    sub_10001531C((uint64_t)v22, &qword_10008A800);
    sub_100059AE8(v32, a6);
    if ((v38 & 1) == 0) {
      return 0LL;
    }
  }

  if (!*(void *)(a7 + 16)) {
    return 1LL;
  }
  sub_10004F59C(0x7375746174735FLL, 0xE700000000000000LL, a3, (uint64_t)v17);
  uint64_t v39 = sub_1000083F4();
  sub_1000417C8((uint64_t)v17, (uint64_t)v13);
  uint64_t result = swift_getEnumCaseMultiPayload(v13, v39);
  if ((_DWORD)result != 2)
  {
    if ((_DWORD)result == 1)
    {
      uint64_t v41 = *v13;
      goto LABEL_19;
    }

    sub_10001FDE4((uint64_t)v13);
LABEL_22:
    uint64_t v37 = (uint64_t)v17;
    goto LABEL_23;
  }

  uint64_t v41 = *v13;
  if (*v13 < 0)
  {
    __break(1u);
    return result;
  }

void sub_10003E944()
{
  qword_100093388 = v0;
}

uint64_t sub_10003E968@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (qword_10008A068 != -1) {
    swift_once(&qword_10008A068, sub_10003E944);
  }
  uint64_t v10 = qword_100093388;
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_1000101AC();
  uint64_t result = sub_10003E9F4(v11, v10);
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  a5[4] = result;
  return result;
}

uint64_t sub_10003E9F4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0LL;
  uint64_t v18 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v9 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain();
    sub_100042BE4(v17, v15, v16);
    uint64_t result = swift_bridgeObjectRelease(v17[1]);
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v11 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }

BOOL sub_10003EB74(uint64_t a1, uint64_t a2)
{
  return (v3 & 1) == 0;
}

void sub_10003EB94()
{
  uint64_t v3 = v2;
  sub_10000534C(&qword_10008A800);
  sub_100006B54();
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v7 = (char *)v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(v0 + 16);
  uint64_t v9 = *(void *)(v0 + 24);
  uint64_t v82 = v0;
  uint64_t v10 = *(void *)(v3 + 16);
  if ((sub_10003E6D8(v5, v11, v10, v12, v13, v8, v9) & 1) != 0)
  {
    v77[0] = v3;
    v77[1] = v1;
    uint64_t v14 = *(void *)(v10 + 64);
    id v79 = v7;
    uint64_t v80 = v10 + 64;
    uint64_t v15 = 1LL << *(_BYTE *)(v10 + 32);
    if (v15 < 64) {
      uint64_t v16 = ~(-1LL << v15);
    }
    else {
      uint64_t v16 = -1LL;
    }
    unint64_t v17 = v16 & v14;
    unint64_t v81 = (unint64_t)(v15 + 63) >> 6;
    sub_1000100D0(v10);
    uint64_t v18 = 0LL;
    char v78 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (v17)
      {
        unint64_t v19 = __clz(__rbit64(v17));
        uint64_t v20 = (v17 - 1) & v17;
        unint64_t v21 = v19 | (v18 << 6);
      }

      else
      {
        if (__OFADD__(v18, 1LL))
        {
          __break(1u);
LABEL_72:
          __break(1u);
          return;
        }

        sub_100041C7C();
        if (v22 == v23) {
          goto LABEL_62;
        }
        sub_100041C70();
        uint64_t v18 = v24;
        if (!v25)
        {
          uint64_t v18 = v24 + 1;
          sub_100041DAC();
          if (v22 == v23) {
            goto LABEL_62;
          }
          sub_100041DA0();
          if (!v25)
          {
            uint64_t v18 = v26 + 2;
            sub_100041DAC();
            if (v22 == v23) {
              goto LABEL_62;
            }
            sub_100041DA0();
            if (!v25)
            {
              uint64_t v18 = v27 + 3;
              sub_100041DAC();
              if (v22 == v23) {
                goto LABEL_62;
              }
              sub_100041DA0();
              if (!v25)
              {
                uint64_t v18 = v28 + 4;
                sub_100041DAC();
                if (v22 == v23) {
                  goto LABEL_62;
                }
                sub_100041DA0();
                if (!v25)
                {
                  sub_100041C7C();
                  if (v22 == v23)
                  {
LABEL_62:
                    swift_release(v10);
                    uint64_t v59 = v78;
                    uint64_t v60 = v78[2];
                    if (v60)
                    {
                      uint64_t v61 = v78 + 5;
                      do
                      {
                        uint64_t v62 = *(v61 - 1);
                        uint64_t v63 = *v61;
                        sub_10001015C();
                        swift_bridgeObjectRetain();
                        unint64_t v64 = sub_100033A58(v62, v63);
                        char v66 = v65;
                        swift_bridgeObjectRelease(v10);
                        if ((v66 & 1) != 0)
                        {
                          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
                          v83[0] = v10;
                          Swift::Int v68 = *(void *)(v10 + 24);
                          sub_10000534C((uint64_t *)&unk_10008B920);
                          _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v68);
                          uint64_t v10 = v83[0];
                          sub_100041C88(*(void *)(v83[0] + 48LL) + 16 * v64);
                          uint64_t v69 = *(void *)(v10 + 56);
                          uint64_t v70 = sub_1000083F4();
                          uint64_t v71 = v69 + *(void *)(*(void *)(v70 - 8) + 72LL) * v64;
                          uint64_t v72 = (uint64_t)v79;
                          sub_10001FDA0(v71, (uint64_t)v79);
                          _NativeDictionary._delete(at:)(v64, v10);
                          sub_1000370C0();
                          uint64_t v73 = v72;
                          uint64_t v74 = 0LL;
                          uint64_t v75 = v70;
                        }

                        else
                        {
                          uint64_t v75 = sub_1000083F4();
                          uint64_t v72 = (uint64_t)v79;
                          uint64_t v73 = (uint64_t)v79;
                          uint64_t v74 = 1LL;
                        }

                        _s10RTCUtility9XPCObjectOwst_0(v73, v74, 1LL, v75);
                        v61 += 2;
                        sub_10001531C(v72, &qword_10008A800);
                        sub_100006BFC();
                        --v60;
                      }

                      while (v60);
                      uint64_t v59 = v78;
                    }

                    swift_bridgeObjectRelease(v59);
                    uint64_t v76 = v77[0];
                    sub_100041DE8();
                    *(void *)(v76 + swift_weakDestroy(v0 + 16) = v10;
                    goto LABEL_70;
                  }

                  sub_100041C70();
                  if (!v25)
                  {
                    while (1)
                    {
                      uint64_t v18 = v29 + 1;
                      if (__OFADD__(v29, 1LL)) {
                        goto LABEL_72;
                      }
                      sub_100041DAC();
                      if (v22 == v23) {
                        goto LABEL_62;
                      }
                      sub_100041DA0();
                      uint64_t v29 = v30 + 1;
                      if (v25) {
                        goto LABEL_32;
                      }
                    }
                  }

                  uint64_t v18 = v29;
                }
              }
            }
          }
        }

LABEL_32:
        uint64_t v20 = (v25 - 1) & v25;
        unint64_t v21 = __clz(__rbit64(v25)) + (v18 << 6);
      }

      unint64_t v84 = v20;
      uint64_t v31 = v10;
      uint64_t v32 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v21);
      uint64_t v34 = *v32;
      uint64_t v33 = v32[1];
      uint64_t v35 = *(void *)(v82 + 32);
      if (!*(void *)(v35 + 16)) {
        break;
      }
      Hasher.init(_seed:)(v83, *(void *)(v35 + 40));
      sub_10001A9B8();
      String.hash(into:)(v83, v34, v33);
      Swift::Int v36 = Hasher._finalize()();
      uint64_t v37 = -1LL << *(_BYTE *)(v35 + 32);
      Swift::Int v38 = v36 & ~v37;
      uint64_t v39 = v35 + 56;
      sub_100041E30();
      if ((v40 & 1) == 0) {
        goto LABEL_56;
      }
      uint64_t v41 = *(void *)(v35 + 48);
      char v42 = (uint64_t *)(v41 + 16 * v38);
      uint64_t v43 = v42[1];
      BOOL v44 = *v42 == v34 && v43 == v33;
      if (v44 || (sub_100041BAC(*v42, v43) & 1) != 0)
      {
LABEL_46:
        sub_10001A9B0();
        uint64_t v10 = v31;
        unint64_t v17 = v84;
      }

      else
      {
        uint64_t v45 = ~v37;
        unint64_t v46 = (v38 + 1) & ~v37;
        if (((*(void *)(v39 + ((v46 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v46) & 1) != 0)
        {
          uint64_t v47 = (uint64_t *)(v41 + 16 * v46);
          uint64_t v48 = v47[1];
          BOOL v49 = *v47 == v34 && v48 == v33;
          if (v49 || (sub_100041BAC(*v47, v48) & 1) != 0) {
            goto LABEL_46;
          }
          for (unint64_t i = v46 + 1; ; unint64_t i = v51 + 1)
          {
            unint64_t v51 = i & v45;
            sub_100041E30();
            if ((v52 & 1) == 0) {
              break;
            }
            uint64_t v53 = (uint64_t *)(v41 + 16 * v51);
            uint64_t v54 = v53[1];
            BOOL v55 = *v53 == v34 && v54 == v33;
            if (v55 || (sub_100041BAC(*v53, v54) & 1) != 0) {
              goto LABEL_46;
            }
          }
        }

      uint64_t v35 = sub_1000208B8();
      sub_10001ABBC(v35);
      uint64_t v27 = 0LL;
LABEL_33:
      sub_10005B778();
      Swift::Int v36 = sub_1000208B8();
      uint64_t v37 = sub_10005B790(v36);
      if (v45) {
        break;
      }
      unint64_t v46 = *(uint64_t **)(v0 + 80);
      uint64_t v47 = *v46;
      uint64_t v48 = v46[1];
      sub_10005B754((uint64_t)v46);
      sub_100032D80();
      uint64_t v50 = v49;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + 16));
      char v52 = *(void *)(v0 + 16);
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0x8000000000000000LL;
      *(void *)(v0 + 24) = v52;
      sub_100041F9C();
      sub_10003564C();
      if (v31)
      {
        __break(1u);
        goto LABEL_68;
      }

      uint64_t v56 = v53;
      unint64_t v57 = v54;
      sub_10000534C(&qword_10008B988);
      uint64_t v53 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v52);
      if ((v53 & 1) != 0)
      {
        uint64_t v53 = sub_100041F9C();
        if ((v57 & 1) != (v58 & 1)) {
          return sub_10005B658();
        }
        uint64_t v56 = v53;
      }

      uint64_t v59 = *(void **)(v0 + 24);
      if ((v57 & 1) != 0)
      {
        uint64_t v60 = v59[7];

        *(void *)(v60 + 8 * v56) = v50;
      }

      else
      {
        v59[(v56 >> 6) + 8] |= 1LL << v56;
        uint64_t v61 = (void *)(v59[6] + 16 * v56);
        *uint64_t v61 = v47;
        v61[1] = v48;
        *(void *)(v59[7] + 8 * v56) = v50;
        uint64_t v62 = v59[2];
        uint64_t v31 = __OFADD__(v62, 1LL);
        BOOL v55 = v62 + 1;
        if (v31)
        {
          __break(1u);
LABEL_70:
          id v79 = 2LL;
LABEL_75:
          unint64_t v77 = (v55 - 1) & v55;
          uint64_t v76 = __clz(__rbit64(v55)) + (v79 << 6);
LABEL_76:
          *(void *)(v0 + 128) = v79;
          *(void *)(v0 + 136) = v77;
          *(void *)(v0 + 144) = *(void *)(*(void *)(v53 + 48) + 16 * v76 + 8);
          uint64_t v80 = *(void **)(*(void *)(v53 + 56) + 8 * v76);
          *(void *)(v0 + 152) = v80;
          unint64_t v81 = qword_10008A0B0;
          sub_1000083B8();
          uint64_t v82 = v80;
          if (v81 == -1)
          {
LABEL_77:
            unint64_t v83 = type metadata accessor for Logger(0LL);
            sub_10000D34C(v83, (uint64_t)qword_100093408);
            unint64_t v84 = sub_10005B724();
            unint64_t v85 = (void *)Logger.logObject.getter(v84);
            BOOL v86 = static os_log_type_t.default.getter();
            if (sub_10001AA2C(v86))
            {
              int64_t v87 = (_DWORD *)sub_1000100B0(12LL);
              unint64_t v88 = sub_1000100B0(32LL);
              uint64_t v110 = v88;
              *int64_t v87 = 136446210;
              char v89 = sub_1000083B8();
              uint64_t v91 = sub_10005B7C0(v89, v90, &v110);
              sub_10005B744(v91);
              sub_10005B6E0((void *)&_mh_execute_header, v92, v93, "running TTR rule %{public}s");
              sub_10004F420();
              sub_100010010(v88);
              sub_100010010((uint64_t)v87);
            }

            else
            {
              sub_10005B7CC();
            }

            sub_10005B7B4();
            uint64_t v94 = (void *)sub_10005B7F0();
            sub_10005B690(v94, v95, v96, v97, v98, v99, v100, v101, v103, v104, v105);
            uint64_t v102 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
            *(void *)(v0 + 168) = v102;
            *uint64_t v102 = v0;
            v102[1] = sub_10005A450;
            sub_10005B608();
            return sub_10005B674();
          }

LABEL_70:
  sub_100015624();
}

double sub_10003EFF8@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  double result = *(double *)v8;
  __int128 v7 = v8[1];
  *(_OWORD *)a5 = v8[0];
  *(_OWORD *)(a5 + swift_weakDestroy(v0 + 16) = v7;
  *(void *)(a5 + 32) = v9;
  return result;
}

void sub_10003F038()
{
}

void sub_10003F050()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  sub_10000534C(&qword_10008A800);
  sub_100006B54();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void **)(v9 + 16);
  if ((sub_10003E6D8(v11, v15, (uint64_t)v14, v16, v17, v5, v3) & 1) == 0)
  {
LABEL_24:
    sub_100015624();
    return;
  }

  uint64_t v46 = v9;
  uint64_t v47 = v0;
  uint64_t v48 = v7 + 56;
  sub_100041B84();
  uint64_t v49 = v18;
  sub_1000083B0();
  sub_1000101AC();
  uint64_t v19 = 0LL;
  uint64_t v20 = &qword_10008A800;
  if (!v1) {
    goto LABEL_4;
  }
LABEL_3:
  sub_100041E60();
  for (uint64_t i = v21 | (v19 << 6); ; uint64_t i = v25 + (v19 << 6))
  {
    uint64_t v26 = (uint64_t *)(*(void *)(v7 + 48) + 16 * i);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    sub_1000083B8();
    sub_1000083B0();
    unint64_t v29 = sub_100033A58(v28, v27);
    char v31 = v30;
    sub_10000FFD8();
    if ((v31 & 1) != 0)
    {
      char v32 = sub_1000370D8();
      uint64_t v50 = v19;
      uint64_t v33 = v13;
      uint64_t v34 = v7;
      uint64_t v35 = v20;
      Swift::Int v36 = v14[3];
      sub_10000534C((uint64_t *)&unk_10008B920);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(v32, v36);
      sub_100041C88(v14[6] + 16 * v29);
      uint64_t v37 = v14[7];
      uint64_t v38 = sub_1000083F4();
      uint64_t v39 = v37 + *(void *)(*(void *)(v38 - 8) + 72LL) * v29;
      uint64_t v20 = v35;
      uint64_t v7 = v34;
      uint64_t v13 = v33;
      uint64_t v19 = v50;
      sub_10001FDA0(v39, (uint64_t)v13);
      _NativeDictionary._delete(at:)(v29, v14);
      sub_1000370C0();
      uint64_t v40 = sub_100041DC8();
      uint64_t v43 = v38;
    }

    else
    {
      sub_1000083F4();
      uint64_t v40 = sub_100041DB8();
    }

    _s10RTCUtility9XPCObjectOwst_0(v40, v41, v42, v43);
    sub_10001531C((uint64_t)v13, v20);
    sub_100006AF0();
    if (v1) {
      goto LABEL_3;
    }
LABEL_4:
    uint64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v23 >= v49) {
      goto LABEL_23;
    }
    ++v19;
    if (!*(void *)(v48 + 8 * v23))
    {
      uint64_t v19 = v23 + 1;
      if (v23 + 1 >= v49) {
        goto LABEL_23;
      }
      if (!*(void *)(v48 + 8 * v19))
      {
        uint64_t v19 = v23 + 2;
        if (v23 + 2 >= v49) {
          goto LABEL_23;
        }
        if (!*(void *)(v48 + 8 * v19)) {
          break;
        }
      }
    }

uint64_t sub_10003F2E8@<X0>(uint64_t *a1@<X8>)
{
  return sub_100041740(XPCIncomingConnection.init(conn:), a1);
}

void sub_10003F2F4()
{
}

uint64_t sub_10003F310(uint64_t a1, uint64_t a2)
{
  return sub_10003F2E4(a1, a2, *v2);
}

void sub_10003F318()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v94 = type metadata accessor for SHA256(0LL);
  uint64_t v9 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  sub_10001002C();
  uint64_t v93 = v10;
  uint64_t v11 = type metadata accessor for String.Encoding(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_10001002C();
  uint64_t v91 = v13;
  uint64_t v14 = type metadata accessor for SHA256Digest(0LL);
  uint64_t v97 = *(void *)(v14 - 8);
  uint64_t v98 = v14;
  sub_100010054();
  __chkstk_darwin(v15);
  sub_100010040();
  uint64_t v90 = v16;
  sub_1000101F8();
  __chkstk_darwin(v17);
  sub_1000102F4();
  uint64_t v96 = v18;
  uint64_t v19 = sub_1000083F4();
  uint64_t v99 = *(void *)(v19 - 8);
  uint64_t v100 = v19;
  sub_100010054();
  __chkstk_darwin(v20);
  sub_100010040();
  uint64_t v95 = v21;
  sub_1000101F8();
  __chkstk_darwin(v22);
  sub_1000102F4();
  uint64_t v89 = v23;
  sub_10000534C(&qword_10008A800);
  sub_100006B54();
  __chkstk_darwin(v24);
  sub_100035354();
  uint64_t v27 = v25 - v26;
  __chkstk_darwin(v28);
  os_log_type_t v104 = (char *)v84 - v29;
  sub_1000101F8();
  __chkstk_darwin(v30);
  sub_1000102F4();
  uint64_t v105 = (uint64_t *)v31;
  uint64_t v92 = v8;
  char v32 = *(void **)(v8 + 16);
  if ((sub_10003E6D8(v33, v34, (uint64_t)v32, v35, v36, v4, v2) & 1) != 0)
  {
    uint64_t v88 = v0;
    uint64_t v85 = v12;
    uint64_t v86 = v11;
    v84[1] = v9;
    uint64_t v37 = *(void *)(v6 + 56);
    uint64_t v102 = v6 + 56;
    uint64_t v38 = 1LL << *(_BYTE *)(v6 + 32);
    uint64_t v39 = -1LL;
    if (v38 < 64) {
      uint64_t v39 = ~(-1LL << v38);
    }
    unint64_t v40 = v39 & v37;
    int64_t v103 = (unint64_t)(v38 + 63) >> 6;
    sub_10001A9B8();
    swift_bridgeObjectRetain();
    int64_t v41 = 0LL;
    __int128 v101 = xmmword_100069580;
    uint64_t v43 = v99;
    uint64_t v42 = v100;
    uint64_t v87 = v27;
    uint64_t v44 = (uint64_t)v104;
LABEL_5:
    uint64_t v45 = v105;
    if (v40)
    {
LABEL_6:
      unint64_t v46 = __clz(__rbit64(v40));
      v40 &= v40 - 1;
      int64_t v106 = v41;
      unint64_t v47 = v46 | (v41 << 6);
      goto LABEL_21;
    }

    while (1)
    {
      int64_t v48 = v41 + 1;
      if (__OFADD__(v41, 1LL))
      {
        __break(1u);
        JUMPOUT(0x10003FE78LL);
      }

      if (v48 >= v103) {
        break;
      }
      unint64_t v49 = *(void *)(v102 + 8 * v48);
      int64_t v50 = v41 + 1;
      if (!v49)
      {
        int64_t v50 = v41 + 2;
        if (v41 + 2 >= v103) {
          break;
        }
        unint64_t v49 = *(void *)(v102 + 8 * v50);
        if (!v49)
        {
          int64_t v50 = v41 + 3;
          if (v41 + 3 >= v103) {
            break;
          }
          unint64_t v49 = *(void *)(v102 + 8 * v50);
          if (!v49)
          {
            uint64_t v51 = v41 + 4;
            if (v41 + 4 >= v103) {
              break;
            }
            unint64_t v49 = *(void *)(v102 + 8 * v51);
            if (!v49)
            {
              while (1)
              {
                int64_t v50 = v51 + 1;
                if (__OFADD__(v51, 1LL))
                {
                  __break(1u);
                  JUMPOUT(0x10003FE84LL);
                }

                if (v50 >= v103) {
                  goto LABEL_47;
                }
                unint64_t v49 = *(void *)(v102 + 8 * v50);
                ++v51;
                if (v49) {
                  goto LABEL_20;
                }
              }
            }

            int64_t v50 = v41 + 4;
          }
        }
      }

uint64_t sub_10003FEC4@<X0>(uint64_t *a1@<X8>)
{
  return sub_100041740(j___s10RTCUtility21XPCIncomingConnectionV4connACSo13OS_xpc_object_p_tcfC, a1);
}

void sub_10003FED0()
{
}

void sub_10003FEEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v116 = sub_10000534C((uint64_t *)&unk_10008BA60);
  sub_100006B54();
  __chkstk_darwin(v32);
  sub_100041C90(v33, v103[0]);
  sub_10000534C(&qword_10008A800);
  sub_100006B54();
  __chkstk_darwin(v34);
  os_log_type_t v114 = (char *)v103 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000101F8();
  __chkstk_darwin(v36);
  sub_1000102F4();
  uint64_t v107 = v37;
  uint64_t v38 = sub_1000083F4();
  uint64_t v118 = *(void *)(v38 - 8);
  sub_100010054();
  __chkstk_darwin(v39);
  uint64_t v113 = (char *)v103 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000101F8();
  __chkstk_darwin(v41);
  uint64_t v112 = (char *)v103 - v42;
  sub_1000101F8();
  __chkstk_darwin(v43);
  Swift::String v111 = (char *)v103 - v44;
  sub_1000101F8();
  __chkstk_darwin(v45);
  uint64_t v110 = (char *)v103 - v46;
  sub_1000101F8();
  __chkstk_darwin(v47);
  sub_100041F60();
  __chkstk_darwin(v48);
  uint64_t v122 = (uint64_t)v103 - v49;
  sub_1000101F8();
  uint64_t v51 = __chkstk_darwin(v50);
  if ((sub_100041B38(v51, v52, v53, v54, v55, v56, v57, v58, v103[0]) & 1) == 0) {
    goto LABEL_69;
  }
  uint64_t v108 = v21;
  uint64_t v106 = v27;
  sub_100041A38((uint64_t)&a12);
  uint64_t v59 = 0LL;
  uint64_t v109 = _swiftEmptyArrayStorage;
  __n128 v60 = &qword_10008A800;
  uint64_t v61 = v107;
  uint64_t v123 = v29;
  while (v21)
  {
    sub_100041F88();
LABEL_21:
    sub_100041CAC();
    uint64_t v124 = v31;
    if (v68)
    {
      sub_1000100D0(v29);
      unint64_t v69 = sub_100041F9C();
      if ((v70 & 1) != 0)
      {
        uint64_t v71 = sub_100041F4C(v69);
        sub_100041E58(v71);
        uint64_t v72 = v61;
        uint64_t v73 = 0LL;
      }

      else
      {
        uint64_t v72 = v61;
        uint64_t v73 = 1LL;
      }

      _s10RTCUtility9XPCObjectOwst_0(v72, v73, 1LL, v38);
      sub_10001ABFC();
    }

    else
    {
      _s10RTCUtility9XPCObjectOwst_0(v61, 1LL, 1LL, v38);
      sub_100010290();
    }

    sub_100041BC8(v61);
    if (v81)
    {
      sub_10001ABFC();
      sub_10001531C(v61, v60);
      uint64_t v29 = v123;
    }

    else
    {
      sub_10001FDA0(v61, v117);
      uint64_t v74 = *(void *)(v106 + 16);
      if (v74)
      {
        sub_100041BEC(v106);
        uint64_t v115 = *(void *)(v20 + 72);
        while (2)
        {
          uint64_t v121 = v74;
          uint64_t v74 = (uint64_t)v21;
          uint64_t v75 = v59;
          uint64_t v76 = v60;
          uint64_t v77 = v122;
          sub_10001FD14(v31, v122);
          sub_100041D40();
          uint64_t v78 = v77;
          __n128 v60 = v76;
          uint64_t v59 = v75;
          uint64_t v21 = (uint64_t *)v74;
          sub_100041F38(v78);
          sub_100041E44(v117);
          switch(sub_100041DD8())
          {
            case 0u:
              unint64_t v79 = v108;
              sub_100041E58(a10);
              uint64_t v74 = v79[1];
              if (sub_100041A2C())
              {
                sub_100006AF0();
                goto LABEL_47;
              }

              uint64_t v104 = sub_100041DF0(*v79);
              uint64_t v83 = v82;
              uint64_t v105 = v82;
              sub_10000FFD8();
              uint64_t v127 = v104;
              uint64_t v128 = v83;
              uint64_t v84 = sub_100041F40();
              uint64_t v86 = v85;
              sub_100006AF0();
              v126[0] = v84;
              v126[1] = v86;
              unint64_t v87 = sub_10000E944();
              uint64_t v25 = sub_100041E4C((uint64_t)v126, (uint64_t)&type metadata for String, v88, v87);
              sub_100041BE4((uint64_t)&a15);
              sub_100006BFC();
              goto LABEL_49;
            case 1u:
              sub_100041F18();
              unint64_t v80 = v110;
              goto LABEL_39;
            case 2u:
              sub_100041F0C();
              unint64_t v80 = v111;
LABEL_39:
              BOOL v81 = *v80 == *(void *)v25;
              goto LABEL_42;
            case 3u:
              sub_100041EF4();
              sub_100041EC0();
LABEL_42:
              uint64_t v25 = v81;
              goto LABEL_49;
            case 4u:
              sub_100041F00();
              sub_100041D60();
LABEL_49:
              sub_10001FDE4(a10);
              sub_100041D58();
              if ((v25 & 1) == 0) {
                goto LABEL_50;
              }
              sub_100041BE4((uint64_t)&a16);
              sub_10001ABFC();
              uint64_t v61 = v107;
              goto LABEL_58;
            default:
LABEL_47:
              sub_10001531C(a10, (uint64_t *)&unk_10008BA60);
              sub_100041D58();
LABEL_50:
              sub_100041F24();
              if (!v81) {
                continue;
              }
              sub_100041BE4((uint64_t)&a16);
              uint64_t v61 = v107;
              break;
          }

          break;
        }
      }

      if ((swift_isUniquelyReferenced_nonNull_native(v109) & 1) == 0)
      {
        sub_100041CC8();
        uint64_t v109 = v93;
      }

      unint64_t v90 = v109[2];
      unint64_t v89 = v109[3];
      uint64_t v25 = v90 + 1;
      uint64_t v31 = v124;
      if (v90 >= v89 >> 1)
      {
        sub_100041F74(v89);
        sub_100004D78();
        uint64_t v109 = v94;
      }

      uint64_t v91 = v109;
      v109[2] = v25;
      uint64_t v92 = &v91[2 * v90];
      v92[4] = v31;
      v92[5] = v29;
LABEL_58:
      sub_10001FDE4(v117);
      uint64_t v29 = v123;
    }
  }

  if (__OFADD__(v59, 1LL))
  {
    __break(1u);
    goto LABEL_71;
  }

  sub_100041C7C();
  if (v62 == v63) {
    goto LABEL_60;
  }
  sub_100041C70();
  uint64_t v59 = v64;
  if (v65) {
    goto LABEL_20;
  }
  uint64_t v59 = v64 + 1;
  if (v64 + 1 >= v120) {
    goto LABEL_60;
  }
  if (*(void *)(v119 + 8 * v59)) {
    goto LABEL_20;
  }
  uint64_t v59 = v64 + 2;
  if (v64 + 2 >= v120) {
    goto LABEL_60;
  }
  if (*(void *)(v119 + 8 * v59))
  {
LABEL_20:
    sub_100041E98();
    goto LABEL_21;
  }

  sub_100041C7C();
  if (v62 != v63)
  {
    sub_100041C70();
    if (!v67)
    {
      while (1)
      {
        uint64_t v59 = v66 + 1;
        if (__OFADD__(v66, 1LL)) {
          break;
        }
        if (v59 >= v120) {
          goto LABEL_60;
        }
        ++v66;
        if (*(void *)(v119 + 8 * v59)) {
          goto LABEL_20;
        }
      }

LABEL_71:
      __break(1u);
      JUMPOUT(0x100040518LL);
    }

    uint64_t v59 = v66;
    goto LABEL_20;
  }

      __break(1u);
      JUMPOUT(0x100040B94LL);
    }

    uint64_t v59 = v64;
    goto LABEL_20;
  }

LABEL_60:
  sub_10001AC7C();
  uint64_t v95 = *(void *)(v125 + 16);
  uint64_t v96 = v109[2];
  if (v96)
  {
    sub_1000083B0();
    do
    {
      sub_100041E18();
      sub_1000083B0();
      unint64_t v97 = sub_100041E80();
      char v99 = v98;
      uint64_t v100 = sub_10000FFD8();
      if ((v99 & 1) != 0)
      {
        sub_1000370D8();
        uint64_t v127 = v95;
        sub_10000534C((uint64_t *)&unk_10008B920);
        sub_100041C04();
        sub_100041C5C();
        sub_100041C1C();
        _NativeDictionary._delete(at:)(v97, v95);
        uint64_t v100 = sub_1000370C0();
        uint64_t v101 = 0LL;
      }

      else
      {
        uint64_t v101 = 1LL;
      }

      sub_100041C34(v100, v101);
      swift_bridgeObjectRelease(0LL);
      --v96;
    }

    while (v96);
  }

  else
  {
    sub_1000083B0();
  }

  swift_bridgeObjectRelease(v109);
  uint64_t v102 = v125;
  sub_100041DE8();
  *(void *)(v102 + swift_weakDestroy(v0 + 16) = v95;
LABEL_69:
  sub_100015624();
}

  sub_10001AC7C();
  uint64_t v93 = *(void *)(v122 + 16);
  uint64_t v94 = v104[2];
  if (v94)
  {
    sub_1000083B0();
    do
    {
      sub_100041E18();
      sub_1000083B0();
      uint64_t v95 = sub_100041E80();
      unint64_t v97 = v96;
      char v98 = sub_10000FFD8();
      if ((v97 & 1) != 0)
      {
        sub_1000370D8();
        uint64_t v124 = v93;
        sub_10000534C((uint64_t *)&unk_10008B920);
        sub_100041C04();
        sub_100041C5C();
        sub_100041C1C();
        _NativeDictionary._delete(at:)(v95, v93);
        char v98 = sub_1000370C0();
        char v99 = 0LL;
      }

      else
      {
        char v99 = 1LL;
      }

      sub_100041C34(v98, v99);
      swift_bridgeObjectRelease(0LL);
      --v94;
    }

    while (v94);
  }

  else
  {
    sub_1000083B0();
  }

  sub_100041BE4((uint64_t)&a17);
  uint64_t v100 = v122;
  sub_100041DE8();
  *(void *)(v100 + swift_weakDestroy(v0 + 16) = v93;
LABEL_69:
  sub_100015624();
}

  __break(1u);
  return result;
}

#error "10004053C: call analysis failed (funcsize=7)"
void sub_100040548( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20)
{
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  void *v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void v123[2];
  uint64_t v124;
  uint64_t v125;
  sub_100041A7C();
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  uint64_t v105 = v26;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v113 = sub_10000534C((uint64_t *)&unk_10008BA60);
  sub_100006B54();
  __chkstk_darwin(v31);
  sub_100041C90(v32, v101);
  sub_10000534C(&qword_10008A800);
  sub_100006B54();
  __chkstk_darwin(v33);
  Swift::String v111 = (char *)&v101 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000101F8();
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v101 - v36;
  uint64_t v38 = sub_1000083F4();
  uint64_t v115 = *(void *)(v38 - 8);
  sub_100010054();
  __chkstk_darwin(v39);
  uint64_t v110 = (char *)&v101 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000101F8();
  __chkstk_darwin(v41);
  uint64_t v109 = (char *)&v101 - v42;
  sub_1000101F8();
  __chkstk_darwin(v43);
  uint64_t v108 = (char *)&v101 - v44;
  sub_1000101F8();
  __chkstk_darwin(v45);
  uint64_t v107 = (char *)&v101 - v46;
  sub_1000101F8();
  __chkstk_darwin(v47);
  sub_100041F60();
  __chkstk_darwin(v48);
  uint64_t v119 = (uint64_t)&v101 - v49;
  sub_1000101F8();
  uint64_t v51 = __chkstk_darwin(v50);
  if ((sub_100041B38(v51, v52, v53, v54, v55, v56, v57, v58, v101) & 1) == 0) {
    goto LABEL_69;
  }
  uint64_t v106 = v21;
  sub_100041A38((uint64_t)&a13);
  uint64_t v59 = 0LL;
  uint64_t v104 = _swiftEmptyArrayStorage;
  uint64_t v121 = v28;
  while (v21)
  {
    sub_100041F88();
LABEL_21:
    sub_100041CAC();
    uint64_t v120 = v30;
    if (v66)
    {
      sub_1000100D0(v28);
      uint64_t v67 = sub_100041F9C();
      if ((v68 & 1) != 0)
      {
        unint64_t v69 = sub_100041F4C(v67);
        sub_10001FD14(v69, (uint64_t)v37);
        char v70 = (uint64_t)v37;
        uint64_t v71 = 0LL;
      }

      else
      {
        char v70 = (uint64_t)v37;
        uint64_t v71 = 1LL;
      }

      _s10RTCUtility9XPCObjectOwst_0(v70, v71, 1LL, v38);
      sub_10001ABFC();
    }

    else
    {
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)v37, 1LL, 1LL, v38);
      sub_100010290();
    }

    sub_100041BC8((uint64_t)v37);
    if (v79)
    {
      sub_10001ABFC();
      sub_10001531C((uint64_t)v37, &qword_10008A800);
      uint64_t v28 = v121;
    }

    else
    {
      sub_10001FDA0((uint64_t)v37, v114);
      uint64_t v72 = *(void *)(v105 + 16);
      if (v72)
      {
        sub_100041BEC(v105);
        uint64_t v112 = *(void *)(v20 + 72);
        while (2)
        {
          uint64_t v118 = v72;
          uint64_t v72 = (uint64_t)v21;
          uint64_t v73 = v59;
          uint64_t v74 = v37;
          uint64_t v75 = v119;
          sub_10001FD14(v30, v119);
          sub_100041D40();
          uint64_t v76 = v75;
          uint64_t v37 = v74;
          uint64_t v59 = v73;
          uint64_t v21 = (uint64_t *)v72;
          sub_100041F38(v76);
          sub_100041E44(v114);
          switch(sub_100041DD8())
          {
            case 0u:
              uint64_t v77 = v106;
              sub_100041E58(a10);
              uint64_t v72 = v77[1];
              if (sub_100041A2C())
              {
                sub_100006AF0();
                goto LABEL_47;
              }

              uint64_t v102 = sub_100041DF0(*v77);
              BOOL v81 = v80;
              int64_t v103 = v80;
              sub_10000FFD8();
              uint64_t v124 = v102;
              uint64_t v125 = v81;
              uint64_t v82 = sub_100041F40();
              uint64_t v84 = v83;
              sub_100006AF0();
              v123[0] = v82;
              v123[1] = v84;
              uint64_t v85 = sub_10000E944();
              uint64_t v25 = sub_100041E4C((uint64_t)v123, (uint64_t)&type metadata for String, v86, v85);
              sub_100041BE4((uint64_t)&a16);
              sub_100006BFC();
              goto LABEL_49;
            case 1u:
              sub_100041F18();
              uint64_t v78 = v107;
              goto LABEL_39;
            case 2u:
              sub_100041F0C();
              uint64_t v78 = v108;
LABEL_39:
              unint64_t v79 = *v78 == *(void *)v25;
              goto LABEL_42;
            case 3u:
              sub_100041EF4();
              sub_100041EC0();
LABEL_42:
              uint64_t v25 = v79;
              goto LABEL_49;
            case 4u:
              sub_100041F00();
              sub_100041D60();
LABEL_49:
              sub_10001FDE4(a10);
              sub_100041D58();
              if ((v25 & 1) == 0) {
                goto LABEL_50;
              }
              sub_100041BE4((uint64_t)&a18);
              if ((swift_isUniquelyReferenced_nonNull_native(v104) & 1) == 0)
              {
                sub_100004D78();
                uint64_t v104 = v91;
              }

              uint64_t v88 = v104[2];
              unint64_t v87 = v104[3];
              uint64_t v25 = v88 + 1;
              uint64_t v30 = v120;
              if (v88 >= v87 >> 1)
              {
                sub_100041F74(v87);
                sub_100004D78();
                uint64_t v104 = v92;
              }

              unint64_t v89 = v104;
              v104[2] = v25;
              unint64_t v90 = &v89[2 * v88];
              v90[4] = v30;
              v90[5] = v28;
              goto LABEL_54;
            default:
LABEL_47:
              sub_10001531C(a10, (uint64_t *)&unk_10008BA60);
              sub_100041D58();
LABEL_50:
              sub_100041F24();
              if (!v79) {
                continue;
              }
              sub_100041BE4((uint64_t)&a18);
              break;
          }

          break;
        }
      }

      sub_10001ABFC();
LABEL_54:
      sub_10001FDE4(v114);
      uint64_t v28 = v121;
    }
  }

  if (__OFADD__(v59, 1LL))
  {
    __break(1u);
    goto LABEL_71;
  }

  sub_100041C7C();
  if (v60 == v61) {
    goto LABEL_60;
  }
  sub_100041C70();
  uint64_t v59 = v62;
  if (v63) {
    goto LABEL_20;
  }
  uint64_t v59 = v62 + 1;
  if (v62 + 1 >= v117) {
    goto LABEL_60;
  }
  if (*(void *)(v116 + 8 * v59)) {
    goto LABEL_20;
  }
  uint64_t v59 = v62 + 2;
  if (v62 + 2 >= v117) {
    goto LABEL_60;
  }
  if (*(void *)(v116 + 8 * v59))
  {
LABEL_20:
    sub_100041E98();
    goto LABEL_21;
  }

  sub_100041C7C();
  if (v60 != v61)
  {
    sub_100041C70();
    if (!v65)
    {
      while (1)
      {
        uint64_t v59 = v64 + 1;
        if (__OFADD__(v64, 1LL)) {
          break;
        }
        if (v59 >= v117) {
          goto LABEL_60;
        }
        ++v64;
        if (*(void *)(v116 + 8 * v59)) {
          goto LABEL_20;
        }
      }

#error "100040BB8: call analysis failed (funcsize=7)"
void sub_100040BC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  Swift::Int v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  sub_100041A7C();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  sub_10000534C(&qword_10008A800);
  sub_100006B54();
  __chkstk_darwin(v11);
  sub_100035354();
  uint64_t v14 = v12 - v13;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v66 - v16;
  uint64_t v18 = sub_1000083F4();
  uint64_t v71 = *(void *)(v18 - 8);
  sub_100010054();
  __chkstk_darwin(v19);
  sub_100010040();
  uint64_t v73 = v20;
  sub_1000101F8();
  __chkstk_darwin(v21);
  sub_1000102F4();
  uint64_t v72 = v22;
  unint64_t v69 = v10;
  uint64_t v23 = *(void **)(v10 + 16);
  sub_100040F74(v6, (uint64_t)v17);
  if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v17, 1LL, v18) == 1)
  {
    sub_10001531C((uint64_t)v17, &qword_10008A800);
LABEL_34:
    sub_100015624();
    return;
  }

  uint64_t v28 = v18;
  uint64_t v66 = v0;
  sub_10001FDA0((uint64_t)v17, v72);
  uint64_t v74 = v8 + 56;
  sub_100041B84();
  uint64_t v75 = v29;
  sub_1000083B0();
  sub_10001A9B8();
  uint64_t v30 = 0LL;
  uint64_t v31 = v71;
  uint64_t v67 = v18;
  uint64_t v68 = v8;
  while (1)
  {
    if (v18)
    {
      sub_100041E60();
      uint64_t v33 = v32 | (v30 << 6);
      goto LABEL_21;
    }

    uint64_t v34 = v30 + 1;
    if (__OFADD__(v30, 1LL))
    {
      __break(1u);
      goto LABEL_36;
    }

    if (v34 >= v75) {
      goto LABEL_33;
    }
    ++v30;
    if (!*(void *)(v74 + 8 * v34))
    {
      uint64_t v30 = v34 + 1;
      if (v34 + 1 >= v75) {
        goto LABEL_33;
      }
      if (!*(void *)(v74 + 8 * v30))
      {
        uint64_t v30 = v34 + 2;
        if (v34 + 2 >= v75) {
          goto LABEL_33;
        }
        if (!*(void *)(v74 + 8 * v30)) {
          break;
        }
      }
    }

LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

                    __break(1u);
                  }

                  uint64_t v16 = v4 + 5;
                }
              }
            }
          }

            uint64_t v47 = v50;
LABEL_33:
            uint64_t v45 = (v49 - 1) & v49;
            uint64_t v104 = v47;
            goto LABEL_28;
          }
        }
      }
    }

uint64_t sub_100040F74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for EventValue(0LL);
  uint64_t v6 = v5;
  if (v4)
  {
    uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL);
    sub_10001FD14(a1 + ((v7 + 32) & ~v7), a2);
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  return _s10RTCUtility9XPCObjectOwst_0(a2, v8, 1LL, v6);
}

void sub_100040FE4()
{
}

void sub_100041000()
{
  uint64_t v56 = v4;
  uint64_t v6 = v5;
  uint64_t v55 = *(void *)(sub_1000083F4() - 8);
  sub_100010054();
  __chkstk_darwin(v7);
  sub_100010040();
  uint64_t v54 = v8;
  sub_1000101F8();
  __chkstk_darwin(v9);
  uint64_t v53 = &v45[-v10];
  sub_1000101F8();
  __chkstk_darwin(v11);
  uint64_t v13 = (uint64_t *)&v45[-v12];
  sub_10000534C(&qword_10008A800);
  sub_100006B54();
  uint64_t v15 = __chkstk_darwin(v14);
  if ((sub_100041AD8(v15, v16, v17, v18, v19) & 1) == 0) {
    goto LABEL_39;
  }
  sub_100041E8C();
  sub_100041BC8((uint64_t)v0);
  if (v20)
  {
    sub_10001531C((uint64_t)v0, &qword_10008A800);
LABEL_39:
    sub_100015624();
    return;
  }

  if (sub_100041A2C())
  {
    sub_10001FDE4((uint64_t)v0);
    goto LABEL_39;
  }

  uint64_t v50 = v6;
  uint64_t v51 = v1;
  uint64_t v49 = *v0;
  uint64_t v52 = (void *)v0[1];
  uint64_t v22 = v56;
  uint64_t v57 = v56 + 56;
  sub_100041B0C();
  uint64_t v58 = v23;
  sub_100010290();
  sub_1000101AC();
  uint64_t v24 = 0LL;
  while (v2)
  {
    sub_100041D28();
LABEL_24:
    if (*(void *)(v3 + 16))
    {
      sub_1000083B8();
      unint64_t v27 = sub_100041AC8();
      if ((v28 & 1) != 0)
      {
        sub_100041CF0(v27, *(void *)(v3 + 56));
        if (sub_100041E74())
        {
          sub_100006AF0();
          sub_10001FDE4((uint64_t)v13);
          uint64_t v22 = v56;
        }

        else
        {
          uint64_t v29 = v13[1];
          uint64_t v59 = *v13;
          uint64_t v60 = v29;
          v30._uint64_t countAndFlagsBits = v49;
          v30._object = v52;
          String.append(_:)(v30);
          uint64_t v31 = (uint64_t)v53;
          sub_100041CDC(v59);
          sub_10001FDA0(v31, v54);
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
          uint64_t v61 = v3;
          unint64_t v47 = sub_100041AC8();
          uint64_t v32 = *(void *)(v3 + 16);
          int v48 = v33;
          BOOL v34 = (v33 & 1) == 0;
          Swift::Int v35 = v32 + v34;
          if (__OFADD__(v32, v34)) {
            goto LABEL_42;
          }
          sub_10000534C((uint64_t *)&unk_10008B920);
          Swift::Bool v36 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v35);
          unint64_t v37 = v47;
          if (v36)
          {
            unint64_t v38 = sub_100041B00();
            if ((v48 & 1) != (v39 & 1)) {
              goto LABEL_44;
            }
            unint64_t v37 = v38;
          }

          uint64_t v3 = v61;
          if ((v48 & 1) != 0)
          {
            sub_100041784(v54, *(void *)(v61 + 56) + v37 * v22);
          }

          else
          {
            sub_100041A94();
            sub_10001FDA0(v54, v40);
            uint64_t v41 = *(void *)(v61 + 16);
            BOOL v42 = __OFADD__(v41, 1LL);
            uint64_t v43 = v41 + 1;
            if (v42) {
              goto LABEL_43;
            }
            *(void *)(v61 + swift_weakDestroy(v0 + 16) = v43;
            sub_1000083B8();
          }

          uint64_t v22 = v56;
          sub_100006AF0();
          sub_1000370C0();
        }
      }

      else
      {
        sub_100006AF0();
      }
    }
  }

  uint64_t v25 = v24 + 1;
  if (__OFADD__(v24, 1LL))
  {
    __break(1u);
    goto LABEL_41;
  }

  if (v25 >= v58) {
    goto LABEL_38;
  }
  ++v24;
  if (*(void *)(v57 + 8 * v25)) {
    goto LABEL_23;
  }
  uint64_t v24 = v25 + 1;
  if (v25 + 1 >= v58) {
    goto LABEL_38;
  }
  if (*(void *)(v57 + 8 * v24)) {
    goto LABEL_23;
  }
  uint64_t v24 = v25 + 2;
  if (v25 + 2 >= v58) {
    goto LABEL_38;
  }
  if (*(void *)(v57 + 8 * v24))
  {
LABEL_23:
    sub_100041D88();
    goto LABEL_24;
  }

  uint64_t v26 = v25 + 3;
  if (v26 >= v58)
  {
LABEL_38:
    swift_bridgeObjectRelease(v52);
    sub_100006BB4();
    uint64_t v44 = v50;
    sub_100010290();
    sub_1000083D4();
    *(void *)(v44 + swift_weakDestroy(v0 + 16) = v3;
    sub_10001ABFC();
    goto LABEL_39;
  }

  if (*(void *)(v57 + 8 * v26))
  {
    uint64_t v24 = v26;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v24 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v24 >= v58) {
      goto LABEL_38;
    }
    ++v26;
    if (*(void *)(v57 + 8 * v24)) {
      goto LABEL_23;
    }
  }

LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10004136C()
{
}

void sub_100041388()
{
  uint64_t v57 = v4;
  uint64_t v6 = v5;
  uint64_t v56 = *(void *)(sub_1000083F4() - 8);
  sub_100010054();
  __chkstk_darwin(v7);
  sub_100010040();
  uint64_t v55 = v8;
  sub_1000101F8();
  __chkstk_darwin(v9);
  uint64_t v54 = &v46[-v10];
  sub_1000101F8();
  __chkstk_darwin(v11);
  uint64_t v13 = (uint64_t *)&v46[-v12];
  sub_10000534C(&qword_10008A800);
  sub_100006B54();
  uint64_t v15 = __chkstk_darwin(v14);
  if ((sub_100041AD8(v15, v16, v17, v18, v19) & 1) == 0) {
    goto LABEL_39;
  }
  sub_100041E8C();
  sub_100041BC8((uint64_t)v0);
  if (v20)
  {
    sub_10001531C((uint64_t)v0, &qword_10008A800);
LABEL_39:
    sub_100015624();
    return;
  }

  if (sub_100041A2C())
  {
    sub_10001FDE4((uint64_t)v0);
    goto LABEL_39;
  }

  uint64_t v51 = v6;
  uint64_t v52 = v1;
  uint64_t v50 = *v0;
  uint64_t v53 = v0[1];
  uint64_t v22 = v57;
  uint64_t v58 = v57 + 56;
  sub_100041B0C();
  uint64_t v62 = v23;
  sub_100010290();
  sub_1000101AC();
  uint64_t v24 = 0LL;
  while (v2)
  {
    sub_100041D28();
LABEL_24:
    if (*(void *)(v3 + 16))
    {
      sub_1000083B8();
      unint64_t v27 = sub_100041AC8();
      if ((v28 & 1) != 0)
      {
        sub_100041CF0(v27, *(void *)(v3 + 56));
        if (sub_100041E74())
        {
          sub_100006AF0();
          sub_10001FDE4((uint64_t)v13);
          uint64_t v22 = v57;
        }

        else
        {
          uint64_t v29 = *v13;
          uint64_t v49 = v13[1];
          v61[0] = v29;
          v61[1] = v49;
          uint64_t v59 = v50;
          uint64_t v60 = v53;
          __n128 v30 = swift_bridgeObjectRetain();
          uint64_t v59 = String.init<A>(_:)( &v59,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String,  v30);
          uint64_t v60 = v31;
          String.append<A>(contentsOf:)(v61, &type metadata for String, &protocol witness table for String);
          swift_bridgeObjectRelease(v49);
          uint64_t v32 = (uint64_t)v54;
          sub_100041CDC(v59);
          sub_10001FDA0(v32, v55);
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
          v61[0] = v3;
          unint64_t v48 = sub_100041AC8();
          uint64_t v33 = *(void *)(v3 + 16);
          LODWORD(v49) = v34;
          BOOL v35 = (v34 & 1) == 0;
          Swift::Int v36 = v33 + v35;
          if (__OFADD__(v33, v35)) {
            goto LABEL_42;
          }
          sub_10000534C((uint64_t *)&unk_10008B920);
          Swift::Bool v37 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v36);
          unint64_t v38 = v48;
          if (v37)
          {
            unint64_t v39 = sub_100041B00();
            if ((v49 & 1) != (v40 & 1)) {
              goto LABEL_44;
            }
            unint64_t v38 = v39;
          }

          uint64_t v3 = v61[0];
          if ((v49 & 1) != 0)
          {
            sub_100041784(v55, *(void *)(v61[0] + 56LL) + v38 * v22);
          }

          else
          {
            sub_100041A94();
            sub_10001FDA0(v55, v41);
            uint64_t v42 = *(void *)(v3 + 16);
            BOOL v43 = __OFADD__(v42, 1LL);
            uint64_t v44 = v42 + 1;
            if (v43) {
              goto LABEL_43;
            }
            *(void *)(v3 + swift_weakDestroy(v0 + 16) = v44;
            sub_1000083B8();
          }

          uint64_t v22 = v57;
          sub_100006AF0();
          sub_1000370C0();
        }
      }

      else
      {
        sub_100006AF0();
      }
    }
  }

  uint64_t v25 = v24 + 1;
  if (__OFADD__(v24, 1LL))
  {
    __break(1u);
    goto LABEL_41;
  }

  if (v25 >= v62) {
    goto LABEL_38;
  }
  ++v24;
  if (*(void *)(v58 + 8 * v25)) {
    goto LABEL_23;
  }
  uint64_t v24 = v25 + 1;
  if (v25 + 1 >= v62) {
    goto LABEL_38;
  }
  if (*(void *)(v58 + 8 * v24)) {
    goto LABEL_23;
  }
  uint64_t v24 = v25 + 2;
  if (v25 + 2 >= v62) {
    goto LABEL_38;
  }
  if (*(void *)(v58 + 8 * v24))
  {
LABEL_23:
    sub_100041D88();
    goto LABEL_24;
  }

  uint64_t v26 = v25 + 3;
  if (v26 >= v62)
  {
LABEL_38:
    swift_bridgeObjectRelease(v53);
    sub_100006BB4();
    uint64_t v45 = v51;
    sub_100010290();
    sub_1000083D4();
    *(void *)(v45 + swift_weakDestroy(v0 + 16) = v3;
    sub_10001ABFC();
    goto LABEL_39;
  }

  if (*(void *)(v58 + 8 * v26))
  {
    uint64_t v24 = v26;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v24 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v24 >= v62) {
      goto LABEL_38;
    }
    ++v26;
    if (*(void *)(v58 + 8 * v24)) {
      goto LABEL_23;
    }
  }

uint64_t sub_100041740@<X0>(uint64_t (*a1)(void)@<X6>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  return result;
}

void sub_100041768()
{
}

uint64_t sub_100041784(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventValue(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000417C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000534C(&qword_10008A800);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100041810()
{
  unint64_t result = qword_10008A860;
  if (!qword_10008A860)
  {
    uint64_t v1 = sub_10000E670(&qword_10008A858);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008A860);
  }

  return result;
}

uint64_t sub_100041854(void *a1)
{
  return swift_bridgeObjectRelease(a1[3]);
}

void sub_10004188C(void *a1, void *a2)
{
  uint64_t v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  uint64_t v3 = a2[3];
  a1[2] = a2[2];
  a1[3] = v3;
  swift_bridgeObjectRetain();
  sub_1000083B0();
  swift_bridgeObjectRetain();
  sub_10001015C();
  sub_100006C40();
}

void sub_1000418D0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  sub_1000083D4();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  sub_1000083D4();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  sub_1000083D4();
  uint64_t v4 = a2[3];
  uint64_t v5 = a1[3];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v5);
  sub_100006C40();
}

void sub_100041948(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  uint64_t v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease(v5);
  sub_100006B44();
}

uint64_t sub_100041998(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 32))
    {
      LODWORD(sub_10002C758(90LL, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(sub_10002C758(90LL, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_1000419D8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for EventFilterMatcher()
{
}

uint64_t sub_100041A2C()
{
  return swift_getEnumCaseMultiPayload(v0, v1);
}

uint64_t sub_100041A38@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 - 256) = v1;
  *(void *)(v3 - 176) = v2 + 56;
  *(void *)(v3 - 168) = (unint64_t)((1LL << *(_BYTE *)(v2 + 32)) + 63) >> 6;
  return swift_bridgeObjectRetain(v2);
}

  ;
}

void sub_100041A94()
{
  *(void *)(v3 + 8 * (v0 >> 6) + 64) |= 1LL << v0;
  uint64_t v4 = (void *)(*(void *)(v3 + 48) + 16 * v0);
  *uint64_t v4 = v2;
  v4[1] = v1;
}

unint64_t sub_100041AC8()
{
  return sub_100033A58(v1, v0);
}

uint64_t sub_100041AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10003E6D8(a1, a2, *(void *)(v7 + 16), a4, a5, v6, v5);
}

unint64_t sub_100041B00()
{
  return sub_100033A58(v1, v0);
}

  ;
}

uint64_t sub_100041B38( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v13 - 192) = (char *)&a9 - v9;
  *(void *)(v13 - 128) = v12;
  return sub_10003E6D8(a1, a2, *(void *)(v12 + 16), a4, a5, v11, v10);
}

uint64_t sub_100041B5C()
{
  return v0;
}

  ;
}

uint64_t sub_100041BAC(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

unint64_t sub_100041BBC(uint64_t a1)
{
  return sub_100033A58(a1, v1);
}

uint64_t sub_100041BC8(uint64_t a1)
{
  return _s10RTCUtility9XPCObjectOwet_0(a1, 1LL, v1);
}

uint64_t sub_100041BE4@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(a1 - 256));
}

uint64_t sub_100041BEC(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

BOOL sub_100041C04()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1, v0);
}

uint64_t sub_100041C1C()
{
  return sub_10001FDA0(*(void *)(v1 + 56) + *(void *)(*(void *)(v3 - 184) + 72LL) * v2, v0);
}

void sub_100041C34(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100041C5C()
{
  return swift_bridgeObjectRelease(*(void *)(*(void *)(*(void *)(v1 - 104) + 48LL) + 16 * v0 + 8));
}

  ;
}

  ;
}

uint64_t sub_100041C88@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void sub_100041C90(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 72) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

  ;
}

void sub_100041CC8()
{
}

uint64_t sub_100041CDC@<X0>(uint64_t a1@<X8>)
{
  *uint64_t v2 = a1;
  v2[1] = v1;
  return swift_storeEnumTagMultiPayload(v2, v3, 0LL);
}

uint64_t sub_100041CF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001FD14(a2 + *(void *)(v2 + 72) * a1, v3);
}

uint64_t sub_100041D00()
{
  return *(void *)(v0 - 256);
}

uint64_t sub_100041D18(uint64_t a1, uint64_t a2)
{
  return _s10RTCUtility9XPCObjectOwst_0(v3, a2, 1LL, v2);
}

  ;
}

  ;
}

uint64_t sub_100041D58()
{
  return sub_10001FDE4(*(void *)(v0 - 152));
}

  ;
}

uint64_t sub_100041D78(uint64_t a1)
{
  return _s10RTCUtility9XPCObjectOwst_0(a1, 1LL, 1LL, v1);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100041DB8()
{
  return v0;
}

uint64_t sub_100041DC8()
{
  return v0;
}

uint64_t sub_100041DD8()
{
  return swift_getEnumCaseMultiPayload(v1, v0);
}

uint64_t sub_100041DE8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 16));
}

uint64_t sub_100041DF0@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return String.lowercased()()._countAndFlagsBits;
}

uint64_t sub_100041E00()
{
  return *(void *)(v0 - 104);
}

uint64_t sub_100041E18()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_100041E24()
{
  return sub_100004C44(v1, v0);
}

  ;
}

uint64_t sub_100041E44(uint64_t a1)
{
  return sub_10001FD14(a1, v1);
}

uint64_t sub_100041E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return StringProtocol.contains<A>(_:)(a1, a2, a2, a4, a4);
}

uint64_t sub_100041E58(uint64_t a1)
{
  return sub_10001FD14(a1, v1);
}

  ;
}

uint64_t sub_100041E74()
{
  return swift_getEnumCaseMultiPayload(v1, v0);
}

unint64_t sub_100041E80()
{
  return sub_100033A58(v0, v1);
}

uint64_t sub_100041E8C()
{
  return sub_100040F74(v0, v1);
}

  ;
}

  ;
}

double sub_100041EC0()
{
  return **(double **)(v0 - 232);
}

  ;
}

void sub_100041EE8()
{
}

uint64_t sub_100041EF4()
{
  return sub_10001FD14(*(void *)(v0 - 72), *(void *)(v0 - 232));
}

uint64_t sub_100041F00()
{
  return sub_10001FD14(*(void *)(v0 - 72), *(void *)(v0 - 224));
}

uint64_t sub_100041F0C()
{
  return sub_10001FD14(*(void *)(v0 - 72), *(void *)(v0 - 240));
}

uint64_t sub_100041F18()
{
  return sub_10001FD14(*(void *)(v0 - 72), *(void *)(v0 - 248));
}

  ;
}

uint64_t sub_100041F38(uint64_t a1)
{
  return sub_10001FD14(a1, v1);
}

uint64_t sub_100041F40()
{
  return String.lowercased()()._countAndFlagsBits;
}

uint64_t sub_100041F4C(uint64_t a1)
{
  return *(void *)(v1 + 56) + *(void *)(*(void *)(v2 - 184) + 72LL) * a1;
}

  ;
}

BOOL sub_100041F74@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

  ;
}

unint64_t sub_100041F9C()
{
  return sub_100033A58(v0, v1);
}

uint64_t sub_100041FA8(void *a1)
{
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t sub_100041FD8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *((_BYTE *)a2 + 16);
  uint64_t v5 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *sub_100042034(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *((_BYTE *)a1 + swift_weakDestroy(v0 + 16) = *((_BYTE *)a2 + 16);
  a1[3] = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  return a1;
}

__n128 sub_1000420C0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  return result;
}

uint64_t sub_1000420D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t sub_100042130(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 41))
    {
      LODWORD(sub_10002C758(90LL, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(sub_10002C758(90LL, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100042170(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 41) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for SessionConfiguration()
{
}

Swift::Int sub_1000421C8(unsigned __int8 a1)
{
  return sub_100035304();
}

Swift::Int sub_100042208()
{
  return sub_1000421C8(*v0);
}

void *sub_100042210()
{
  uint64_t v86 = type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
  __chkstk_darwin(v86);
  uint64_t v85 = (char *)&v80 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v89 = type metadata accessor for SessionConfiguration.Backend(0LL);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v89 - 8);
  uint64_t v3 = __chkstk_darwin(v89);
  uint64_t v5 = (uint64_t *)((char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v88 = (uint64_t *)((char *)&v80 - v7);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (uint64_t)&v80 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  unint64_t v87 = (uint64_t *)((char *)&v80 - v12);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (uint64_t *)((char *)&v80 - v14);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v80 - v16;
  uint64_t v91 = *v0;
  uint64_t v18 = v91;
  uint64_t v19 = *(void *)(v91 + 16);
  char v20 = _swiftEmptyArrayStorage;
  uint64_t v84 = v5;
  BOOL v81 = v2;
  uint64_t v82 = v19;
  uint64_t v80 = v91;
  if (v19)
  {
    unint64_t v90 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v91);
    sub_100047568();
    uint64_t v21 = v2;
    uint64_t v22 = v18 + ((*((unsigned __int8 *)v2 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v2 + 80));
    uint64_t v83 = *((void *)v21 + 9);
    uint64_t v23 = v19;
    do
    {
      sub_100044C9C(v22, (uint64_t)v17);
      sub_100044C9C((uint64_t)v17, (uint64_t)v15);
      if (sub_10004769C((uint64_t)v15) == 1)
      {
        uint64_t v0 = (uint64_t *)v15[1];
        uint64_t v24 = v15[3];
        swift_bridgeObjectRelease(v15[4]);
        sub_100006CAC();
        sub_10000FFD8();
      }

      else
      {
        sub_1000475FC((uint64_t)v15);
        uint64_t v24 = *(uint64_t *)((char *)v0 + *(int *)(v86 + 36));
        sub_10001015C();
        sub_10002C55C((uint64_t)v0, type metadata accessor for SessionConfiguration.BackendHTTP);
      }

      sub_10002C55C((uint64_t)v17, type metadata accessor for SessionConfiguration.Backend);
      char v20 = v90;
      if ((swift_isUniquelyReferenced_nonNull_native(v90) & 1) == 0)
      {
        sub_10004757C(v20[2]);
        char v20 = v90;
      }

      unint64_t v26 = v20[2];
      unint64_t v25 = v20[3];
      if (v26 >= v25 >> 1)
      {
        sub_100047550(v25);
        char v20 = v90;
      }

      _BYTE v20[2] = v26 + 1;
      v20[v26 + 4] = v24;
      v22 += v83;
      --v23;
    }

    while (v23);
    sub_1000476E0();
    uint64_t v5 = v84;
    uint64_t v2 = v81;
    uint64_t v19 = v82;
  }

  unint64_t v90 = &_swiftEmptySetSingleton;
  uint64_t v27 = v20[2];
  if (v27)
  {
    swift_bridgeObjectRetain(v20);
    for (uint64_t i = 0LL; i != v27; ++i)
    {
      uint64_t v29 = v20[i + 4];
      swift_bridgeObjectRetain(v29);
      sub_1000429C8(v30);
    }

    sub_10001ABA0();
    uint64_t v19 = v82;
  }

  sub_10001ABA0();
  uint64_t v83 = (uint64_t)v90;
  uint64_t v31 = _swiftEmptyArrayStorage;
  if (v19)
  {
    unint64_t v90 = _swiftEmptyArrayStorage;
    uint64_t v32 = v80;
    sub_1000083B8();
    sub_100047568();
    uint64_t v33 = v32 + ((*((unsigned __int8 *)v2 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v2 + 80));
    uint64_t v34 = *((void *)v2 + 9);
    uint64_t v35 = v19;
    do
    {
      uint64_t v31 = v87;
      sub_100044C9C(v33, (uint64_t)v87);
      sub_100044C9C((uint64_t)v31, v10);
      if (sub_10004769C(v10) == 1)
      {
        uint64_t v31 = *(void **)(v10 + 8);
        uint64_t v36 = *(void *)(v10 + 24);
        swift_bridgeObjectRelease(*(void *)(v10 + 32));
        sub_100006CAC();
        sub_10000FFD8();
      }

      else
      {
        sub_1000475FC(v10);
        uint64_t v36 = *(void *)((char *)v31 + *(int *)(v86 + 36));
        sub_10001015C();
        sub_10002C55C((uint64_t)v31, type metadata accessor for SessionConfiguration.BackendHTTP);
      }

      sub_10002C55C((uint64_t)v87, type metadata accessor for SessionConfiguration.Backend);
      if ((sub_100047690() & 1) == 0)
      {
        sub_10004757C(v31[2]);
        uint64_t v31 = v90;
      }

      unint64_t v38 = v31[2];
      unint64_t v37 = v31[3];
      if (v38 >= v37 >> 1)
      {
        sub_100047550(v37);
        uint64_t v31 = v90;
      }

      v31[2] = v38 + 1;
      v31[v38 + 4] = v36;
      v33 += v34;
      --v35;
    }

    while (v35);
    sub_1000476E0();
    uint64_t v5 = v84;
    uint64_t v19 = v82;
  }

  uint64_t v39 = v31[2];
  if (v39)
  {
    swift_bridgeObjectRetain(v31);
    uint64_t v40 = 0LL;
    uint64_t v41 = &_swiftEmptySetSingleton;
    do
    {
      unsigned int v42 = v41[32] & 0x3F;
      sub_100047758();
      uint64_t isStackAllocationSafe = sub_1000083B8();
      if (v42 <= 0xD
        || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * v10, 8LL, v44),
            (isStackAllocationSafe & 1) != 0))
      {
        __chkstk_darwin(isStackAllocationSafe);
        uint64_t v45 = (char *)&v80 - ((8 * v10 + 15) & 0x3FFFFFFFFFFFFFF0LL);
        sub_100047650();
        uint64_t v46 = sub_1000475E4();
        if (v10)
        {
          uint64_t v71 = sub_10001ABFC();
LABEL_63:
          swift_willThrow(v71, v72, v73, v74, v75, v76, v77, v78);
          sub_1000476B8();
          __break(1u);
LABEL_64:
          sub_10001ABFC();
          sub_1000476B8();
          uint64_t v79 = (uint64_t)v45;
          goto LABEL_66;
        }

        unint64_t v47 = (_BYTE *)v46;
        sub_10001ABFC();
        uint64_t v41 = v47;
      }

      else
      {
        uint64_t v45 = (char *)swift_slowAlloc(8 * v10, -1LL);
        sub_100047650();
        uint64_t v48 = sub_1000475E4();
        if (v10) {
          goto LABEL_64;
        }
        uint64_t v49 = (_BYTE *)v48;
        sub_10001ABFC();
        sub_100010010((uint64_t)v45);
        uint64_t v41 = v49;
      }

      ++v40;
      sub_100006AF0();
    }

    while (v39 != v40);
    sub_10000FFD8();
    uint64_t v19 = v82;
  }

  else
  {
    uint64_t v41 = &_swiftEmptySetSingleton;
  }

  sub_10000FFD8();
  uint64_t v50 = _swiftEmptyArrayStorage;
  uint64_t v51 = v80;
  uint64_t v52 = v81;
  if (v19)
  {
    unint64_t v90 = _swiftEmptyArrayStorage;
    sub_1000083B8();
    sub_100047568();
    uint64_t v53 = v51 + ((*((unsigned __int8 *)v52 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v52 + 80));
    uint64_t v54 = *((void *)v52 + 9);
    uint64_t v52 = type metadata accessor for SessionConfiguration.Backend;
    do
    {
      uint64_t v55 = v19;
      uint64_t v50 = v88;
      sub_100044C9C(v53, (uint64_t)v88);
      sub_100044C9C((uint64_t)v50, (uint64_t)v5);
      if (sub_10004769C((uint64_t)v5) == 1)
      {
        uint64_t v50 = (void *)v5[1];
        uint64_t v56 = v5[4];
        swift_bridgeObjectRelease(v5[3]);
        sub_100006CAC();
        sub_10000FFD8();
      }

      else
      {
        sub_1000475FC((uint64_t)v5);
        uint64_t v56 = *(void *)((char *)v50 + *(int *)(v86 + 40));
        sub_10001015C();
        sub_10002C55C((uint64_t)v50, type metadata accessor for SessionConfiguration.BackendHTTP);
      }

      sub_10002C55C((uint64_t)v88, type metadata accessor for SessionConfiguration.Backend);
      if ((sub_100047690() & 1) == 0)
      {
        sub_10004757C(v50[2]);
        uint64_t v50 = v90;
      }

      unint64_t v58 = v50[2];
      unint64_t v57 = v50[3];
      if (v58 >= v57 >> 1)
      {
        sub_100047550(v57);
        uint64_t v50 = v90;
      }

      v50[2] = v58 + 1;
      v50[v58 + 4] = v56;
      v53 += v54;
      uint64_t v19 = v55 - 1;
      uint64_t v5 = v84;
    }

    while (v55 != 1);
    sub_1000476E0();
  }

  uint64_t v59 = v50[2];
  if (!v59)
  {
    uint64_t v61 = &_swiftEmptySetSingleton;
LABEL_60:
    sub_10000FFD8();
    return sub_100042B34((uint64_t)v41, v83, (uint64_t)v61);
  }

  swift_bridgeObjectRetain(v50);
  uint64_t v60 = 0LL;
  uint64_t v61 = &_swiftEmptySetSingleton;
  while (1)
  {
    uint64_t v45 = (char *)v50[v60 + 4];
    unsigned int v62 = v61[32] & 0x3F;
    sub_100047758();
    uint64_t v63 = sub_10001015C();
    if (v62 > 0xD)
    {
      uint64_t v63 = swift_stdlib_isStackAllocationSafe(8LL * (void)v52, 8LL, v64);
      if ((v63 & 1) == 0) {
        break;
      }
    }

    __chkstk_darwin(v63);
    sub_100047640();
    uint64_t v65 = sub_1000475CC();
    if (v52)
    {
      uint64_t v71 = sub_100006AF0();
      goto LABEL_63;
    }

    uint64_t v66 = (_BYTE *)v65;
    sub_100006AF0();
    uint64_t v61 = v66;
LABEL_57:
    ++v60;
    sub_100006BFC();
    if (v59 == v60)
    {
      sub_10000FFD8();
      goto LABEL_60;
    }
  }

  uint64_t v67 = swift_slowAlloc(8LL * (void)v52, -1LL);
  sub_100047640();
  uint64_t v68 = sub_1000475CC();
  if (!v52)
  {
    unint64_t v69 = (_BYTE *)v68;
    sub_100006AF0();
    sub_100010010(v67);
    uint64_t v61 = v69;
    goto LABEL_57;
  }

  sub_100006AF0();
  sub_1000476B8();
  uint64_t v79 = v67;
LABEL_66:
  __n128 result = (void *)sub_100010010(v79);
  __break(1u);
  return result;
}

uint64_t type metadata accessor for SessionConfiguration.BackendHTTP(uint64_t a1)
{
  return sub_100042998(a1, qword_10008C028, (uint64_t)&nominal type descriptor for SessionConfiguration.BackendHTTP);
}

uint64_t type metadata accessor for SessionConfiguration.Backend(uint64_t a1)
{
  return sub_100042998(a1, qword_10008C0E8, (uint64_t)&nominal type descriptor for SessionConfiguration.Backend);
}

uint64_t sub_100042998(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t sub_1000429C8(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0LL;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v8 | (v2 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v2 << 6))
  {
    uint64_t result = sub_100042D70( &v13,  *(void *)(*(void *)(v1 + 48) + 8 * i),  &qword_10008BFB8,  (uint64_t)&type metadata for Int);
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v10 >= v7) {
      return swift_release(v1);
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        return swift_release(v1);
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          return swift_release(v1);
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            return swift_release(v1);
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }

void *sub_100042B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  swift_bridgeObjectRelease(a1);
  if (v5)
  {
    sub_100042B94(a2, a3);
  }

  else
  {
    sub_100006AF0();
    sub_10000FFD8();
    return &_swiftEmptySetSingleton;
  }

  return (void *)a2;
}

void *sub_100042B94(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) > *(void *)(a2 + 16) >> 3) {
    return sub_100045F3C(a1, a2);
  }
  sub_100045DD8(a1);
  return (void *)a2;
}

uint64_t sub_100042BE4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  sub_1000353B8(*(void *)(*v3 + 40LL), a2);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v26, a2, a3);
  Swift::Int v8 = sub_100035304();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  sub_100047704();
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = *(void *)(v7 + 48);
    uint64_t v13 = (uint64_t *)(v12 + 16 * v10);
    uint64_t v14 = v13[1];
    BOOL v15 = *v13 == a2 && v14 == a3;
    if (v15 || (sub_100047670(*v13, v14) & 1) != 0)
    {
LABEL_7:
      sub_100006BFC();
      sub_10001ABA0();
      uint64_t v16 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v17 = v16[1];
      *a1 = *v16;
      a1[1] = v17;
      swift_bridgeObjectRetain(v17);
      return 0LL;
    }

    uint64_t v19 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v19;
      sub_100047704();
      if ((v20 & 1) == 0) {
        break;
      }
      uint64_t v21 = (uint64_t *)(v12 + 16 * v10);
      uint64_t v22 = v21[1];
      BOOL v23 = *v21 == a2 && v22 == a3;
      if (v23 || (sub_100047670(*v21, v22) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  sub_10001ABA0();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v26[0] = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  sub_10001015C();
  sub_100043B80(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v25 = *v3;
  *uint64_t v3 = v26[0];
  swift_bridgeObjectRelease(v25);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t sub_100042D48(uint64_t *a1, uint64_t a2)
{
  return sub_100042D70(a1, a2, &qword_10008BFB8, (uint64_t)&type metadata for Int);
}

uint64_t sub_100042D5C(uint64_t *a1, uint64_t a2)
{
  return sub_100042D70(a1, a2, &qword_10008BFC0, (uint64_t)&type metadata for Int64);
}

uint64_t sub_100042D70(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = v4;
  uint64_t v10 = *v4;
  uint64_t v11 = static Hasher._hash(seed:_:)(*(void *)(v10 + 40), a2);
  uint64_t v12 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    uint64_t v19 = *v7;
    *uint64_t v7 = 0x8000000000000000LL;
    sub_100043D2C(a2, v13, isUniquelyReferenced_nonNull_native, a3, a4);
    uint64_t v18 = *v7;
    *uint64_t v7 = v19;
    swift_bridgeObjectRelease(v18);
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v14 = *(void *)(v10 + 48);
  if (*(void *)(v14 + 8 * v13) != a2)
  {
    uint64_t v15 = ~v12;
    do
    {
      unint64_t v13 = (v13 + 1) & v15;
      if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(void *)(v14 + 8 * v13) != a2);
  }

  uint64_t result = 0LL;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100042E80(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_100047618();
    uint64_t v9 = __CocoaSet.member(for:)(v8, v7);
    sub_100010254();
    if (v9)
    {
      sub_100006BBC();
      sub_100010254();
      uint64_t v31 = v9;
      uint64_t v10 = sub_1000476E8();
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(v30, &v31, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
      *a1 = v30[0];
      swift_unknownObjectRelease(v9);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v24 = sub_1000430DC(v7, result + 1);
    v30[0] = v24;
    unint64_t v25 = *(void *)(v24 + 16);
    if (*(void *)(v24 + 24) <= v25)
    {
      uint64_t v27 = v25 + 1;
      sub_100047618();
      sub_1000437F4(v27);
      uint64_t v26 = v30[0];
    }

    else
    {
      uint64_t v26 = v24;
      sub_100047618();
    }

    sub_100043AC4(a2, v26);
    uint64_t v28 = *v3;
    *uint64_t v3 = v26;
    swift_bridgeObjectRelease(v28);
    *a1 = a2;
  }

  else
  {
    Hasher.init(_seed:)(v30, *(void *)(v6 + 40));
    sub_1000476E8();
    sub_100046518();
    swift_bridgeObjectRetain();
    Swift::UInt v11 = sub_1000475A0();
    Hasher._combine(_:)(v11);
    Swift::Int v12 = Hasher._finalize()();
    uint64_t v13 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    sub_1000476F0();
    if ((v15 & 1) != 0)
    {
      sub_100047660();
      uint64_t v16 = (uint64_t *)sub_100047680();
      sub_1000475A0();
      sub_10004772C();
      if (v16 == v30)
      {
LABEL_12:
        sub_100010254();
        sub_100006BBC();
        uint64_t v20 = *(void *)(*(void *)(*v2 + 48) + 8 * v14);
        *a1 = v20;
        swift_retain(v20);
        return 0LL;
      }

      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        sub_1000476F0();
        if ((v18 & 1) == 0) {
          break;
        }
        sub_100047660();
        uint64_t v19 = (uint64_t *)sub_100047680();
        sub_1000475A0();
        sub_10004772C();
        if (v19 == v30) {
          goto LABEL_12;
        }
      }
    }

    sub_100006BBC();
    char v22 = sub_1000355D8();
    v30[0] = *v2;
    *int64_t v2 = 0x8000000000000000LL;
    uint64_t v23 = sub_100047618();
    sub_100043E60(v23, v14, v22);
    sub_1000476D4(v30[0]);
    *a1 = a2;
  }

  return 1LL;
}

Swift::Int sub_1000430DC(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  sub_10000534C((uint64_t *)&unk_10008CB20);
  uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
  uint64_t v25 = v4;
  uint64_t v5 = __CocoaSet.makeIterator()(a1);
  uint64_t v6 = __CocoaSet.Iterator.next()();
  if (!v6)
  {
LABEL_16:
    swift_release(v5);
    return v4;
  }

  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for Client();
  while (1)
  {
    v23[0] = v7;
    swift_dynamicCast(&v24, v23, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
    uint64_t v4 = v25;
    unint64_t v9 = *(void *)(v25 + 16);
    if (*(void *)(v25 + 24) <= v9)
    {
      sub_1000437F4(v9 + 1);
      uint64_t v4 = v25;
    }

    uint64_t v10 = v24;
    Hasher.init(_seed:)(v23, *(void *)(v4 + 40));
    unint64_t v11 = sub_100046518();
    Swift::UInt v12 = Identifiable<>.id.getter(v8, v11);
    Hasher._combine(_:)(v12);
    Swift::Int result = Hasher._finalize()();
    uint64_t v14 = v4 + 56;
    uint64_t v15 = -1LL << *(_BYTE *)(v4 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v4 + 56 + 8 * (v16 >> 6))) == 0) {
      break;
    }
    unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v4 + 56 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_15:
    *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    *(void *)(*(void *)(v4 + 48) + 8 * v18) = v10;
    ++*(void *)(v4 + 16);
    uint64_t v7 = __CocoaSet.Iterator.next()();
    if (!v7) {
      goto LABEL_16;
    }
  }

  char v19 = 0;
  unint64_t v20 = (unint64_t)(63 - v15) >> 6;
  while (++v17 != v20 || (v19 & 1) == 0)
  {
    BOOL v21 = v17 == v20;
    if (v17 == v20) {
      unint64_t v17 = 0LL;
    }
    v19 |= v21;
    uint64_t v22 = *(void *)(v14 + 8 * v17);
    if (v22 != -1)
    {
      unint64_t v18 = __clz(__rbit64(~v22)) + (v17 << 6);
      goto LABEL_15;
    }
  }

  __break(1u);
  return result;
}

Swift::Int sub_1000432E0(uint64_t a1)
{
  int64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_10000534C(&qword_10008BFC8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v32 = v2;
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    if (!v9) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      char v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v20, v21);
      Swift::Int result = Hasher._finalize()();
      uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          BOOL v28 = v24 == v27;
          if (v24 == v27) {
            unint64_t v24 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v11 + 8 * v24);
          if (v29 != -1)
          {
            unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
      uint64_t v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
      *uint64_t v30 = v20;
      v30[1] = v21;
      ++*(void *)(v6 + 16);
      if (v9) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_41;
      }
      if (v16 >= v10) {
        goto LABEL_35;
      }
      unint64_t v17 = v33[v16];
      ++v13;
      if (!v17)
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v10) {
          goto LABEL_35;
        }
        unint64_t v17 = v33[v13];
        if (!v17)
        {
          int64_t v13 = v16 + 2;
          if (v16 + 2 >= v10) {
            goto LABEL_35;
          }
          unint64_t v17 = v33[v13];
          if (!v17)
          {
            int64_t v18 = v16 + 3;
            if (v18 >= v10)
            {
LABEL_35:
              swift_release(v3);
              int64_t v2 = v32;
              uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
              if (v31 > 63) {
                sub_1000577F4(0LL, (unint64_t)(v31 + 63) >> 6, v33);
              }
              else {
                *uint64_t v33 = -1LL << v31;
              }
              *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v17 = v33[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v13 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_42;
                }
                if (v13 >= v10) {
                  goto LABEL_35;
                }
                unint64_t v17 = v33[v13];
                ++v18;
                if (v17) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v13 = v18;
          }
        }
      }

void sub_1000435B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v4, v3, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    int64_t v7 = 0LL;
    unint64_t v9 = (uint64_t *)(v4 + 56);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v10 = 1LL << *(_BYTE *)(v4 + 32);
    uint64_t v27 = -1LL << v10;
    BOOL v28 = v2;
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & v8;
    uint64_t v29 = 1LL << *(_BYTE *)(v4 + 32);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = v5 + 56;
    if ((v11 & v8) == 0) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v15 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    for (unint64_t i = v15 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v7 << 6))
    {
      uint64_t v20 = *(void *)(*(void *)(v4 + 48) + 8 * i);
      unint64_t v21 = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), v20) & ~(-1LL << *(_BYTE *)(v6 + 32));
      if (((-1LL << v21) & ~*(void *)(v14 + 8 * (v21 >> 6))) == 0)
      {
        sub_10004776C();
        while (++v24 != v25 || (v23 & 1) == 0)
        {
          BOOL v26 = v24 == v25;
          if (v24 == v25) {
            uint64_t v24 = 0LL;
          }
          v23 |= v26;
          if (*(void *)(v14 + 8 * v24) != -1LL)
          {
            sub_100047718();
            goto LABEL_30;
          }
        }

        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return;
      }

      sub_100047780();
LABEL_30:
      *(void *)(v14 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
      *(void *)(*(void *)(v6 + 48) + 8 * v22) = v20;
      ++*(void *)(v6 + 16);
      if (v12) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v17 = v7 + 1;
      if (__OFADD__(v7, 1LL)) {
        goto LABEL_38;
      }
      if (v17 >= v13) {
        goto LABEL_32;
      }
      unint64_t v18 = v9[v17];
      ++v7;
      if (!v18)
      {
        int64_t v7 = v17 + 1;
        if (v17 + 1 >= v13) {
          goto LABEL_32;
        }
        unint64_t v18 = v9[v7];
        if (!v18)
        {
          int64_t v7 = v17 + 2;
          if (v17 + 2 >= v13) {
            goto LABEL_32;
          }
          unint64_t v18 = v9[v7];
          if (!v18)
          {
            int64_t v19 = v17 + 3;
            if (v19 >= v13)
            {
LABEL_32:
              if (v29 > 63) {
                sub_1000577F4(0LL, v13, (void *)(v4 + 56));
              }
              else {
                uint64_t *v9 = v27;
              }
              int64_t v2 = v28;
              *(void *)(v4 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v18 = v9[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v7 = v19 + 1;
                if (__OFADD__(v19, 1LL)) {
                  goto LABEL_39;
                }
                if (v7 >= v13) {
                  goto LABEL_32;
                }
                unint64_t v18 = v9[v7];
                ++v19;
                if (v18) {
                  goto LABEL_20;
                }
              }
            }

            int64_t v7 = v19;
          }
        }
      }

Swift::Int sub_1000437F4(uint64_t a1)
{
  int64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_10000534C((uint64_t *)&unk_10008CB20);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v33 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v14 = 0LL;
    if (!v10) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
    {
      uint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * i);
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      uint64_t v21 = type metadata accessor for Client();
      unint64_t v22 = sub_100046518();
      Swift::UInt v23 = Identifiable<>.id.getter(v21, v22);
      Hasher._combine(_:)(v23);
      Swift::Int result = Hasher._finalize()();
      uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v12 + 8 * (v25 >> 6))) == 0)
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v24) >> 6;
        while (++v26 != v29 || (v28 & 1) == 0)
        {
          BOOL v30 = v26 == v29;
          if (v26 == v29) {
            unint64_t v26 = 0LL;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v12 + 8 * v26);
          if (v31 != -1)
          {
            unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v27 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v12 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v27;
      *(void *)(*(void *)(v6 + 48) + 8 * v27) = v20;
      ++*(void *)(v6 + 16);
      if (v10) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v17 = v14 + 1;
      if (__OFADD__(v14, 1LL)) {
        goto LABEL_41;
      }
      if (v17 >= v11) {
        goto LABEL_35;
      }
      unint64_t v18 = v8[v17];
      ++v14;
      if (!v18)
      {
        int64_t v14 = v17 + 1;
        if (v17 + 1 >= v11) {
          goto LABEL_35;
        }
        unint64_t v18 = v8[v14];
        if (!v18)
        {
          int64_t v14 = v17 + 2;
          if (v17 + 2 >= v11) {
            goto LABEL_35;
          }
          unint64_t v18 = v8[v14];
          if (!v18)
          {
            int64_t v19 = v17 + 3;
            if (v19 >= v11)
            {
LABEL_35:
              swift_release(v3);
              int64_t v2 = v33;
              uint64_t v32 = 1LL << *(_BYTE *)(v3 + 32);
              if (v32 > 63) {
                sub_1000577F4(0LL, (unint64_t)(v32 + 63) >> 6, (void *)(v3 + 56));
              }
              else {
                *uint64_t v8 = -1LL << v32;
              }
              *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v18 = v8[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v14 = v19 + 1;
                if (__OFADD__(v19, 1LL)) {
                  goto LABEL_42;
                }
                if (v14 >= v11) {
                  goto LABEL_35;
                }
                unint64_t v18 = v8[v14];
                ++v19;
                if (v18) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v14 = v19;
          }
        }
      }

unint64_t sub_100043AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Client();
  unint64_t v5 = sub_100046518();
  Swift::UInt v6 = Identifiable<>.id.getter(v4, v5);
  Hasher._combine(_:)(v6);
  Swift::Int v7 = Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v7 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

void sub_100043B80(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  unint64_t v5 = v4;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_1000432E0(v11);
  }

  else
  {
    if (v10 > v9)
    {
      sub_10004404C();
      goto LABEL_22;
    }

    sub_100044524(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v29, *(void *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  Swift::Int v13 = Hasher._finalize()();
  uint64_t v14 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  uint64_t v15 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v16 = *(void *)(v12 + 48);
    int64_t v17 = (void *)(v16 + 16 * a3);
    uint64_t v18 = v17[1];
    BOOL v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(void *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v21 = (void *)(v16 + 16 * a3);
        uint64_t v22 = v21[1];
        BOOL v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0LL) & 1) != 0) {
          goto LABEL_21;
        }
      }
    }
  }

void sub_100043D18(uint64_t a1, unint64_t a2, char a3)
{
}

void sub_100043D2C(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000435B8(v11, a4);
  }

  else
  {
    if (v10 > v9)
    {
      sub_1000441FC(a4);
      goto LABEL_14;
    }

    sub_1000447CC(v11, a4);
  }

  uint64_t v12 = *v5;
  uint64_t v13 = static Hasher._hash(seed:_:)(*(void *)(*v5 + 40), a1);
  uint64_t v14 = -1LL << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    if (*(void *)(v15 + 8 * a2) == a1)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(a5);
      __break(1u);
    }

    else
    {
      uint64_t v16 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v15 + 8 * a2) == a1) {
          goto LABEL_13;
        }
      }
    }
  }

LABEL_14:
  uint64_t v17 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v17 + 48) + 8 * a2) = a1;
  uint64_t v18 = *(void *)(v17 + 16);
  BOOL v19 = __OFADD__(v18, 1LL);
  uint64_t v20 = v18 + 1;
  if (v19) {
    __break(1u);
  }
  else {
    *(void *)(v17 + swift_weakDestroy(v0 + 16) = v20;
  }
}

  uint64_t v21 = *v25;
  *(void *)(*v25 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v21 + 48) + 8 * a2) = v5;
  uint64_t v22 = *(void *)(v21 + 16);
  BOOL v23 = __OFADD__(v22, 1LL);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v21 + swift_weakDestroy(v0 + 16) = v24;
  }
  return result;
}

uint64_t sub_100043E60(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000437F4(v8);
  }

  else
  {
    if (v7 > v6)
    {
      unint64_t result = (uint64_t)sub_10004437C();
      goto LABEL_14;
    }

    sub_1000449E0(v8);
  }

  uint64_t v9 = *v3;
  Hasher.init(_seed:)(v26, *(void *)(*v3 + 40));
  uint64_t v10 = type metadata accessor for Client();
  unint64_t v11 = sub_100046518();
  Swift::UInt v12 = Identifiable<>.id.getter(v10, v11);
  Hasher._combine(_:)(v12);
  unint64_t result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v13;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v14 = *(void *)(*(void *)(v9 + 48) + 8 * a2);
    swift_retain(v14);
    uint64_t v15 = Identifiable<>.id.getter(v10, v11);
    uint64_t v16 = Identifiable<>.id.getter(v10, v11);
    unint64_t result = swift_release(v14);
    if (v15 == v16)
    {
LABEL_13:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
      __break(1u);
    }

    else
    {
      uint64_t v17 = ~v13;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        uint64_t v18 = *(void *)(*(void *)(v9 + 48) + 8 * a2);
        swift_retain(v18);
        uint64_t v19 = Identifiable<>.id.getter(v10, v11);
        uint64_t v20 = Identifiable<>.id.getter(v10, v11);
        unint64_t result = swift_release(v18);
        if (v19 == v20) {
          goto LABEL_13;
        }
      }
    }
  }

void sub_10004404C()
{
  uint64_t v1 = v0;
  sub_10000534C(&qword_10008BFC8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    uint64_t *v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1LL;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    *uint64_t v22 = *v20;
    v22[1] = v21;
    swift_bridgeObjectRetain(v21);
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }

void sub_1000441FC(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000534C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    sub_100010254();
    *uint64_t v2 = v5;
    sub_100006C40();
    return;
  }

  uint64_t v6 = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  if (!v13) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v10 << 6))
  {
    *(void *)(*(void *)(v5 + 48) + 8 * i) = *(void *)(*(void *)(v3 + 48) + 8 * i);
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }

void *sub_10004437C()
{
  uint64_t v1 = v0;
  sub_10000534C((uint64_t *)&unk_10008CB20);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1LL;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = *(void *)(*(void *)(v2 + 48) + 8 * i);
    *(void *)(*(void *)(v4 + 48) + 8 * i) = v20;
    unint64_t result = (void *)swift_retain(v20);
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }

Swift::Int sub_100044524(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_10000534C(&qword_10008BFC8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  if (!v10) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    int64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v21);
    String.hash(into:)(v33, v20, v21);
    Swift::Int result = Hasher._finalize()();
    uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v24);
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    BOOL v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
    *BOOL v30 = v20;
    v30[1] = v21;
    ++*(void *)(v6 + 16);
    if (v10) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_39;
    }
    if (v16 >= v32) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v32) {
        goto LABEL_35;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v16 + 2;
        if (v16 + 2 >= v32) {
          goto LABEL_35;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v13);
        if (!v17) {
          break;
        }
      }
    }

void sub_1000447CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v4, v3, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    sub_100010254();
LABEL_34:
    *uint64_t v2 = v6;
    return;
  }

  char v26 = v2;
  int64_t v7 = 0LL;
  uint64_t v8 = v4 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v4 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v4 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v5 + 56;
  if (!v11) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v14 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v7 << 6))
  {
    uint64_t v19 = *(void *)(*(void *)(v4 + 48) + 8 * i);
    unint64_t v20 = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), v19) & ~(-1LL << *(_BYTE *)(v6 + 32));
    if (((-1LL << v20) & ~*(void *)(v13 + 8 * (v20 >> 6))) == 0)
    {
      sub_10004776C();
      while (++v23 != v24 || (v22 & 1) == 0)
      {
        BOOL v25 = v23 == v24;
        if (v23 == v24) {
          uint64_t v23 = 0LL;
        }
        v22 |= v25;
        if (*(void *)(v13 + 8 * v23) != -1LL)
        {
          sub_100047718();
          goto LABEL_30;
        }
      }

      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }

    sub_100047780();
LABEL_30:
    *(void *)(v13 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
    *(void *)(*(void *)(v6 + 48) + 8 * v21) = v19;
    ++*(void *)(v6 + 16);
    if (v11) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v16 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      goto LABEL_36;
    }
    if (v16 >= v12) {
      goto LABEL_32;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v7;
    if (!v17)
    {
      int64_t v7 = v16 + 1;
      if (v16 + 1 >= v12) {
        goto LABEL_32;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v7);
      if (!v17)
      {
        int64_t v7 = v16 + 2;
        if (v16 + 2 >= v12) {
          goto LABEL_32;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v7);
        if (!v17) {
          break;
        }
      }
    }

Swift::Int sub_1000449E0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_10000534C((uint64_t *)&unk_10008CB20);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  if (!v10) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    uint64_t v19 = *(void *)(*(void *)(v3 + 48) + 8 * i);
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    uint64_t v20 = type metadata accessor for Client();
    unint64_t v21 = sub_100046518();
    swift_retain(v19);
    Swift::UInt v22 = Identifiable<>.id.getter(v20, v21);
    Hasher._combine(_:)(v22);
    Swift::Int result = Hasher._finalize()();
    uint64_t v23 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v11 + 8 * (v24 >> 6))) == 0)
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      while (++v25 != v28 || (v27 & 1) == 0)
      {
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v25);
        if (v30 != -1)
        {
          unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v26 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v11 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v26;
    *(void *)(*(void *)(v6 + 48) + 8 * v26) = v19;
    ++*(void *)(v6 + 16);
    if (v10) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_39;
    }
    if (v16 >= v32) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v32) {
        goto LABEL_35;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v16 + 2;
        if (v16 + 2 >= v32) {
          goto LABEL_35;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v13);
        if (!v17) {
          break;
        }
      }
    }

uint64_t sub_100044C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SessionConfiguration.Backend(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100044CE0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = static Hasher._hash(seed:_:)(*(void *)(*v2 + 40LL), a1);
  uint64_t v6 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(v4 + 48);
  if (*(void *)(v8 + 8 * v7) != a1)
  {
    uint64_t v9 = ~v6;
    do
    {
      unint64_t v7 = (v7 + 1) & v9;
      if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
        return 0LL;
      }
    }

    while (*(void *)(v8 + 8 * v7) != a1);
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v11 = *v2;
  uint64_t v15 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000441FC(&qword_10008BFB8);
    uint64_t v11 = v15;
  }

  uint64_t v12 = *(void *)(*(void *)(v11 + 48) + 8 * v7);
  sub_1000452CC(v7);
  uint64_t v13 = *v2;
  *uint64_t v2 = v15;
  swift_bridgeObjectRelease(v13);
  return v12;
}

uint64_t sub_100044DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  sub_1000353B8(*(void *)(*v2 + 40), a2);
  sub_10001015C();
  String.hash(into:)(v23, a1, a2);
  Swift::Int v6 = sub_100035304();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  sub_100047744();
  if ((v9 & 1) == 0)
  {
LABEL_18:
    sub_100006BFC();
    return 0LL;
  }

  uint64_t v10 = *(void *)(v5 + 48);
  uint64_t v11 = (uint64_t *)(v10 + 16 * v8);
  uint64_t v12 = v11[1];
  BOOL v13 = *v11 == a1 && v12 == a2;
  if (!v13 && (sub_100047620(*v11, v12) & 1) == 0)
  {
    uint64_t v17 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v17;
      sub_100047744();
      if ((v18 & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v19 = (uint64_t *)(v10 + 16 * v8);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == a1 && v20 == a2;
    }

    while (!v21 && (sub_100047620(*v19, v20) & 1) == 0);
  }

  sub_100006BFC();
  sub_1000355D8();
  sub_1000476C0();
  if (!v15)
  {
    sub_10004404C();
    uint64_t v14 = v23[0];
  }

  uint64_t v16 = *(void *)(*(void *)(v14 + 48) + 16 * v8);
  sub_100045444(v8);
  sub_1000476D4(v23[0]);
  return v16;
}

uint64_t sub_100044F20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  if ((*v2 & 0xC000000000000001LL) == 0)
  {
    sub_1000353B8(*(void *)(v4 + 40), a2);
    sub_1000476E8();
    sub_100046518();
    swift_bridgeObjectRetain(v4);
    Swift::UInt v10 = sub_100047590();
    Hasher._combine(_:)(v10);
    Swift::Int v11 = sub_100035304();
    uint64_t v12 = -1LL << *(_BYTE *)(v4 + 32);
    unint64_t v13 = v11 & ~v12;
    sub_1000476A4();
    if ((v14 & 1) != 0)
    {
      sub_100047608();
      int v15 = (void *)sub_100047630();
      sub_100047590();
      sub_100047738();
      if (v15 == v22)
      {
LABEL_12:
        swift_bridgeObjectRelease(v4);
        sub_1000355D8();
        sub_1000476C0();
        if (!v20)
        {
          sub_10004437C();
          uint64_t v19 = v22[0];
        }

        uint64_t v8 = *(void *)(*(void *)(v19 + 48) + 8 * v13);
        sub_1000455FC(v13);
        uint64_t v9 = *v2;
        *uint64_t v2 = v22[0];
        goto LABEL_15;
      }

      uint64_t v16 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v16;
        sub_1000476A4();
        if ((v17 & 1) == 0) {
          break;
        }
        sub_100047608();
        char v18 = (void *)sub_100047630();
        sub_100047590();
        sub_100047738();
        if (v18 == v22) {
          goto LABEL_12;
        }
      }
    }

uint64_t sub_1000450C0(uint64_t a1)
{
  uint64_t v3 = __CocoaSet.count.getter(a1);
  uint64_t v4 = swift_unknownObjectRetain(a1);
  Swift::Int v5 = sub_1000430DC(v4, v3);
  Swift::Int v23 = v5;
  Hasher.init(_seed:)(v22, *(void *)(v5 + 40));
  uint64_t v6 = type metadata accessor for Client();
  unint64_t v7 = sub_100046518();
  swift_retain(v5);
  Swift::UInt v8 = Identifiable<>.id.getter(v6, v7);
  Hasher._combine(_:)(v8);
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v11 = v9 & ~v10;
  if (((*(void *)(v5 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0)
  {
    uint64_t v12 = *(void *)(*(void *)(v5 + 48) + 8 * v11);
    swift_retain(v12);
    uint64_t v13 = Identifiable<>.id.getter(v6, v7);
    uint64_t v14 = Identifiable<>.id.getter(v6, v7);
    swift_release(v12);
    if (v13 == v14)
    {
LABEL_6:
      swift_release(v5);
      Swift::Int v5 = *(void *)(*(void *)(v5 + 48) + 8 * v11);
      sub_1000455FC(v11);
      uint64_t v19 = Identifiable<>.id.getter(v6, v7);
      if (v19 == Identifiable<>.id.getter(v6, v7))
      {
        *BOOL v21 = v23;
        return v5;
      }

      __break(1u);
    }

    else
    {
      uint64_t v15 = ~v10;
      while (1)
      {
        unint64_t v11 = (v11 + 1) & v15;
        if (((*(void *)(v5 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
          break;
        }
        uint64_t v16 = *(void *)(*(void *)(v5 + 48) + 8 * v11);
        swift_retain(v16);
        uint64_t v17 = Identifiable<>.id.getter(v6, v7);
        uint64_t v18 = Identifiable<>.id.getter(v6, v7);
        swift_release(v16);
        if (v17 == v18) {
          goto LABEL_6;
        }
      }
    }

    swift_release(v5);
    __break(1u);
  }

  uint64_t result = swift_release(v5);
  __break(1u);
  return result;
}

unint64_t sub_1000452CC(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(v3);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(v3 + 48);
        unint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t v12 = static Hasher._hash(seed:_:)(*(void *)(v3 + 40), *v11) & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_15:
            uint64_t v15 = (void *)(v10 + 8 * v2);
            BOOL v16 = v2 != v6 || v15 >= v11 + 1;
            int64_t v2 = v6;
            if (v16)
            {
              *uint64_t v15 = *v11;
              int64_t v2 = v6;
            }
          }
        }

        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_15;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v17 = *(void *)(v3 + 16);
  BOOL v18 = __OFSUB__(v17, 1LL);
  uint64_t v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + swift_weakDestroy(v0 + 16) = v19;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

unint64_t sub_100045444(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v24, *(void *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v24, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        Swift::Int v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v2 >= v14)
          {
LABEL_15:
            uint64_t v17 = *(void *)(v3 + 48);
            BOOL v18 = (_OWORD *)(v17 + 16 * v2);
            uint64_t v19 = (_OWORD *)(v17 + 16 * v6);
            BOOL v20 = v2 != v6 || v18 >= v19 + 1;
            int64_t v2 = v6;
            if (v20)
            {
              *BOOL v18 = *v19;
              int64_t v2 = v6;
            }
          }
        }

        else if (v14 >= v9 || v2 >= v14)
        {
          goto LABEL_15;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v21 = *(void *)(v3 + 16);
  BOOL v22 = __OFSUB__(v21, 1LL);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + swift_weakDestroy(v0 + 16) = v23;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

unint64_t sub_1000455FC(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)(v25, *(void *)(v3 + 40));
        uint64_t v11 = type metadata accessor for Client();
        unint64_t v12 = sub_100046518();
        swift_retain(v10);
        Swift::UInt v13 = Identifiable<>.id.getter(v11, v12);
        Hasher._combine(_:)(v13);
        Swift::Int v14 = Hasher._finalize()();
        swift_release(v10);
        Swift::Int v15 = v14 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v15 >= v9 && v2 >= v15)
          {
LABEL_15:
            uint64_t v18 = *(void *)(v3 + 48);
            uint64_t v19 = (void *)(v18 + 8 * v2);
            BOOL v20 = (void *)(v18 + 8 * v6);
            BOOL v21 = v2 != v6 || v19 >= v20 + 1;
            int64_t v2 = v6;
            if (v21)
            {
              void *v19 = *v20;
              int64_t v2 = v6;
            }
          }
        }

        else if (v15 >= v9 || v2 >= v15)
        {
          goto LABEL_15;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v22 = *(void *)(v3 + 16);
  BOOL v23 = __OFSUB__(v22, 1LL);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + swift_weakDestroy(v0 + 16) = v24;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

uint64_t sub_1000457D4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v46 = (unint64_t *)result;
  uint64_t v6 = 0LL;
  if (*(void *)(a4 + 16) < *(void *)(a3 + 16))
  {
    int64_t v7 = 0LL;
    uint64_t v8 = a4 + 56;
    uint64_t v9 = 1LL << *(_BYTE *)(a4 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(a4 + 56);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = a3 + 56;
    while (1)
    {
LABEL_6:
      if (v11)
      {
        unint64_t v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v15 = v14 | (v7 << 6);
      }

      else
      {
        int64_t v16 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
          __break(1u);
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }

        if (v16 >= v12) {
          goto LABEL_56;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v16);
        ++v7;
        if (!v17)
        {
          int64_t v7 = v16 + 1;
          if (v16 + 1 >= v12) {
            goto LABEL_56;
          }
          unint64_t v17 = *(void *)(v8 + 8 * v7);
          if (!v17)
          {
            int64_t v18 = v16 + 2;
            if (v18 >= v12)
            {
LABEL_56:
              swift_retain(a3);
              return sub_100045B9C(v46, a2, v6, a3);
            }

            unint64_t v17 = *(void *)(v8 + 8 * v18);
            if (!v17)
            {
              while (1)
              {
                int64_t v7 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  break;
                }
                if (v7 >= v12) {
                  goto LABEL_56;
                }
                unint64_t v17 = *(void *)(v8 + 8 * v7);
                ++v18;
                if (v17) {
                  goto LABEL_19;
                }
              }

LABEL_59:
              __break(1u);
              goto LABEL_60;
            }

            int64_t v7 = v18;
          }
        }

uint64_t sub_100045B58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100045B9C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v9 = &_swiftEmptySetSingleton;
LABEL_35:
    swift_release(v4);
    return (uint64_t)v9;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10000534C(&qword_10008BFB8);
  uint64_t result = static _SetStorage.allocate(capacity:)(v5);
  uint64_t v9 = (void *)result;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }

    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_35;
    }
    unint64_t v16 = a1[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_35;
      }
      unint64_t v16 = a1[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_35;
        }
        unint64_t v16 = a1[v11];
        if (!v16) {
          break;
        }
      }
    }

void sub_100045DD8(uint64_t a1)
{
  if (!*(void *)(*(void *)v1 + 16LL)) {
    return;
  }
  uint64_t v3 = a1 + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    sub_100044CE0(*(void *)(*(void *)(a1 + 48) + 8 * i));
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v11 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }

void *sub_100045F3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = 0LL;
    uint64_t v6 = a1 + 56;
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v7 = -1LL << *(_BYTE *)(a1 + 32);
    v34[0] = ~v7;
    if (-v7 < 64) {
      uint64_t v8 = ~(-1LL << -(char)v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & v5;
    int64_t v10 = (unint64_t)(63 - v7) >> 6;
    uint64_t v11 = a2 + 56;
    while (1)
    {
      do
      {
        if (v9)
        {
          unint64_t v12 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          unint64_t v13 = v12 | (v4 << 6);
        }

        else
        {
          int64_t v14 = v4 + 1;
          if (__OFADD__(v4, 1LL))
          {
            __break(1u);
            goto LABEL_36;
          }

          if (v14 >= v10) {
            goto LABEL_33;
          }
          unint64_t v15 = *(void *)(v6 + 8 * v14);
          int64_t v16 = v4 + 1;
          if (!v15)
          {
            int64_t v16 = v4 + 2;
            if (v4 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v15 = *(void *)(v6 + 8 * v16);
            if (!v15)
            {
              int64_t v16 = v4 + 3;
              if (v4 + 3 >= v10) {
                goto LABEL_33;
              }
              unint64_t v15 = *(void *)(v6 + 8 * v16);
              if (!v15)
              {
                int64_t v16 = v4 + 4;
                if (v4 + 4 >= v10) {
                  goto LABEL_33;
                }
                unint64_t v15 = *(void *)(v6 + 8 * v16);
                if (!v15)
                {
                  uint64_t v17 = v4 + 5;
                  if (v4 + 5 >= v10)
                  {
LABEL_33:
                    swift_bridgeObjectRetain(a1);
                    sub_100046510(v32);
                    return (void *)v2;
                  }

                  unint64_t v15 = *(void *)(v6 + 8 * v17);
                  if (!v15)
                  {
                    while (1)
                    {
                      int64_t v16 = v17 + 1;
                      if (__OFADD__(v17, 1LL)) {
                        break;
                      }
                      if (v16 >= v10) {
                        goto LABEL_33;
                      }
                      unint64_t v15 = *(void *)(v6 + 8 * v16);
                      ++v17;
                      if (v15) {
                        goto LABEL_23;
                      }
                    }

LABEL_28:
    v35[0] = a1;
    v35[1] = v6;
    v35[2] = v34[0];
    v35[3] = v4;
    v35[4] = v9;
    unint64_t v23 = (unint64_t)(63 - v20) >> 6;
    size_t v24 = 8 * v23;
    __n128 v26 = swift_bridgeObjectRetain(a1);
    if (v23 < 0x81
      || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v24, 8LL, v26), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      int64_t v28 = (char *)v34 - v27;
      memcpy((char *)v34 - v27, (const void *)(v2 + 56), v24);
      uint64_t v29 = sub_1000462D8((uint64_t)v28, v23, v2, v21, v35);
      swift_release(v2);
      sub_100046510(v35[0]);
      return (void *)v29;
    }

    else
    {
      uint64_t v30 = (void *)swift_slowAlloc(v24, -1LL);
      memcpy(v30, (const void *)(v2 + 56), v24);
      uint64_t v31 = sub_1000462D8((uint64_t)v30, v23, v2, v21, v35);
      swift_release(v2);
      sub_100046510(v35[0]);
      swift_slowDealloc(v30, -1LL, -1LL);
      return (void *)v31;
    }
  }

  else
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }

uint64_t sub_1000462D8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v8 = (unint64_t *)result;
  uint64_t v9 = *(void *)(a3 + 16);
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  uint64_t v10 = v9 - 1;
  uint64_t v11 = a3 + 56;
  while (1)
  {
    int64_t v12 = a5[3];
    unint64_t v13 = a5[4];
    if (!v13) {
      break;
    }
    uint64_t v14 = (v13 - 1) & v13;
    unint64_t v15 = __clz(__rbit64(v13)) | (v12 << 6);
LABEL_20:
    uint64_t v22 = *(void *)(*(void *)(*a5 + 48LL) + 8 * v15);
    a5[3] = v12;
    a5[4] = v14;
    uint64_t result = static Hasher._hash(seed:_:)(*(void *)(a3 + 40), v22);
    uint64_t v23 = -1LL << *(_BYTE *)(a3 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    uint64_t v26 = 1LL << v24;
    if (((1LL << v24) & *(void *)(v11 + 8 * (v24 >> 6))) != 0)
    {
      uint64_t v27 = *(void *)(a3 + 48);
      if (*(void *)(v27 + 8 * v24) == v22)
      {
LABEL_27:
        unint64_t v30 = v8[v25];
        v8[v25] = v30 & ~v26;
        if ((v26 & v30) != 0)
        {
          if (__OFSUB__(v10--, 1LL)) {
            goto LABEL_34;
          }
          if (!v10) {
            return (uint64_t)&_swiftEmptySetSingleton;
          }
        }
      }

      else
      {
        for (unint64_t i = v24 + 1; ; unint64_t i = v29 + 1)
        {
          unint64_t v29 = i & ~v23;
          if (((*(void *)(v11 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v29) & 1) == 0) {
            break;
          }
          if (*(void *)(v27 + 8 * v29) == v22)
          {
            unint64_t v25 = v29 >> 6;
            uint64_t v26 = 1LL << v29;
            goto LABEL_27;
          }
        }
      }
    }
  }

  int64_t v16 = v12 + 1;
  if (!__OFADD__(v12, 1LL))
  {
    int64_t v17 = (unint64_t)(a5[2] + 64LL) >> 6;
    int64_t v18 = a5[3];
    if (v16 >= v17) {
      goto LABEL_32;
    }
    uint64_t v19 = a5[1];
    unint64_t v20 = *(void *)(v19 + 8 * v16);
    if (!v20)
    {
      int64_t v18 = v12 + 1;
      if (v12 + 2 >= v17) {
        goto LABEL_32;
      }
      unint64_t v20 = *(void *)(v19 + 8 * (v12 + 2));
      if (v20)
      {
        int64_t v16 = v12 + 2;
      }

      else
      {
        int64_t v18 = v12 + 2;
        if (v12 + 3 >= v17) {
          goto LABEL_32;
        }
        unint64_t v20 = *(void *)(v19 + 8 * (v12 + 3));
        if (v20)
        {
          int64_t v16 = v12 + 3;
        }

        else
        {
          int64_t v16 = v12 + 4;
          int64_t v18 = v12 + 3;
          if (v12 + 4 >= v17) {
            goto LABEL_32;
          }
          unint64_t v20 = *(void *)(v19 + 8 * v16);
          if (!v20)
          {
            int64_t v21 = v12 + 5;
            while (v21 < v17)
            {
              unint64_t v20 = *(void *)(v19 + 8 * v21++);
              if (v20)
              {
                int64_t v16 = v21 - 1;
                goto LABEL_19;
              }
            }

            int64_t v18 = v17 - 1;
LABEL_32:
            a5[3] = v18;
            a5[4] = 0LL;
            swift_retain(a3);
            return sub_100045B9C(v8, a2, v10, a3);
          }
        }
      }
    }

uint64_t sub_100046510(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

unint64_t sub_100046518()
{
  unint64_t result = qword_10008AC88;
  if (!qword_10008AC88)
  {
    uint64_t v1 = type metadata accessor for Client();
    unint64_t result = swift_getWitnessTable(&unk_10006A12C, v1);
    atomic_store(result, &qword_10008AC88);
  }

  return result;
}

uint64_t sub_100046558(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(sub_10001531C(v2, v4) = 1;
  }
  else {
    LODWORD(sub_10001531C(v2, v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000465A4 + 4 * byte_10006BCF5[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000465D8 + 4 * asc_10006BCF0[v4]))();
}

uint64_t sub_1000465D8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000465E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000465E8LL);
  }
  return result;
}

uint64_t sub_1000465F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000465FCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100046600(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100046608(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for SessionConfiguration.Availability()
{
}

void *sub_100046620(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v20);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL(0LL);
    int64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    uint64_t v14 = a3[8];
    uint64_t v15 = *(void *)((char *)a2 + v13);
    *(void *)((char *)v4 + v13) = v15;
    *((_BYTE *)v4 + v14) = *((_BYTE *)a2 + v14);
    uint64_t v16 = a3[9];
    uint64_t v17 = a3[10];
    uint64_t v18 = *(void *)((char *)a2 + v16);
    *(void *)((char *)v4 + vswift_weakDestroy(v0 + 16) = v18;
    uint64_t v19 = *(void *)((char *)a2 + v17);
    *(void *)((char *)v4 + v17) = v19;
    *((_BYTE *)v4 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
  }

  return v4;
}

uint64_t sub_10004671C(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[7]));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[9]));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[10]));
}

void *sub_100046790(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = *(void *)((char *)a2 + v12);
  *(void *)((char *)a1 + v12) = v14;
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  uint64_t v15 = a3[9];
  uint64_t v16 = a3[10];
  uint64_t v17 = *(void *)((char *)a2 + v15);
  *(void *)((char *)a1 + v15) = v17;
  uint64_t v18 = *(void *)((char *)a2 + v16);
  *(void *)((char *)a1 + vswift_weakDestroy(v0 + 16) = v18;
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  return a1;
}

void *sub_100046860(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = *(void *)((char *)a2 + v12);
  uint64_t v14 = *(void *)((char *)a1 + v12);
  *(void *)((char *)a1 + v12) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  uint64_t v15 = a3[9];
  uint64_t v16 = *(void *)((char *)a2 + v15);
  uint64_t v17 = *(void *)((char *)a1 + v15);
  *(void *)((char *)a1 + v15) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = a3[10];
  uint64_t v19 = *(void *)((char *)a2 + v18);
  uint64_t v20 = *(void *)((char *)a1 + v18);
  *(void *)((char *)a1 + v18) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  return a1;
}

uint64_t sub_100046958(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  uint64_t v11 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  return a1;
}

void *sub_100046A00(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = *(void *)((char *)a1 + v12);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  uint64_t v15 = *(void *)((char *)a1 + v14);
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = a3[10];
  uint64_t v17 = *(void *)((char *)a1 + v16);
  *(void *)((char *)a1 + vswift_weakDestroy(v0 + 16) = *(void *)((char *)a2 + v16);
  swift_bridgeObjectRelease(v17);
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  return a1;
}

uint64_t sub_100046ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100046AD8);
}

uint64_t sub_100046AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(sub_10001531C(v2, v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    return _s10RTCUtility9XPCObjectOwet_0(a1 + *(int *)(a3 + 24), a2, v8);
  }

uint64_t sub_100046B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100046B58);
}

void sub_100046B58(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + 8) = (a2 - 1);
    sub_100006C40();
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    _s10RTCUtility9XPCObjectOwst_0(a1 + *(int *)(a4 + 24), a2, a2, v7);
  }

uint64_t sub_100046BBC(uint64_t a1)
{
  v4[0] = &unk_10006BD50;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(result - 8) + 64LL;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = &unk_10006BD68;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[7] = &unk_10006BD68;
    swift_initStructMetadata(a1, 256LL, 8LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *sub_100046C58(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (void *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v14);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = a2[2];
      a1[1] = a2[1];
      a1[2] = v8;
      uint64_t v10 = a2[3];
      uint64_t v9 = a2[4];
      a1[3] = v10;
      a1[4] = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v11 = a1;
      uint64_t v12 = a3;
      uint64_t v13 = 1LL;
    }

    else
    {
      uint64_t v15 = a2[2];
      a1[1] = a2[1];
      a1[2] = v15;
      uint64_t v16 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
      uint64_t v17 = v16[6];
      uint64_t v18 = (char *)a1 + v17;
      uint64_t v19 = (char *)a2 + v17;
      uint64_t v20 = type metadata accessor for URL(0LL);
      int64_t v21 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v20 - 8) + 16LL);
      __n128 v22 = swift_bridgeObjectRetain();
      v21(v18, v19, v20, v22);
      *(void *)((char *)a1 + v16[7]) = *(void *)((char *)a2 + v16[7]);
      *((_BYTE *)a1 + v16[8]) = *((_BYTE *)a2 + v16[8]);
      *(void *)((char *)a1 + v16[9]) = *(void *)((char *)a2 + v16[9]);
      *(void *)((char *)a1 + v16[10]) = *(void *)((char *)a2 + v16[10]);
      *((_BYTE *)a1 + v16[11]) = *((_BYTE *)a2 + v16[11]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v11 = a1;
      uint64_t v12 = a3;
      uint64_t v13 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v11, v12, v13);
  }

  return a1;
}

uint64_t sub_100046DD0(void *a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    swift_bridgeObjectRelease(a1[1]);
    swift_bridgeObjectRelease(a1[2]);
    swift_bridgeObjectRelease(a1[3]);
    unint64_t v3 = a1 + 4;
  }

  else
  {
    swift_bridgeObjectRelease(a1[1]);
    unint64_t v4 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
    int v5 = (char *)a1 + v4[6];
    uint64_t v6 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
    swift_bridgeObjectRelease(*(void *)((char *)a1 + v4[7]));
    swift_bridgeObjectRelease(*(void *)((char *)a1 + v4[9]));
    unint64_t v3 = (void *)((char *)a1 + v4[10]);
  }

  return swift_bridgeObjectRelease(*v3);
}

void *sub_100046E7C(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    uint64_t v8 = a2[4];
    a1[3] = a2[3];
    a1[4] = v8;
    swift_bridgeObjectRetain();
    uint64_t v9 = 1LL;
  }

  else
  {
    uint64_t v10 = a2[2];
    a1[1] = a2[1];
    a1[2] = v10;
    uint64_t v11 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
    uint64_t v12 = v11[6];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for URL(0LL);
    uint64_t v16 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v15 - 8) + 16LL);
    __n128 v17 = swift_bridgeObjectRetain();
    v16(v13, v14, v15, v17);
    uint64_t v9 = 0LL;
    *(void *)((char *)a1 + v11[7]) = *(void *)((char *)a2 + v11[7]);
    *((_BYTE *)a1 + v11[8]) = *((_BYTE *)a2 + v11[8]);
    *(void *)((char *)a1 + v11[9]) = *(void *)((char *)a2 + v11[9]);
    *(void *)((char *)a1 + v11[10]) = *(void *)((char *)a2 + v11[10]);
    *((_BYTE *)a1 + v11[11]) = *((_BYTE *)a2 + v11[11]);
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload(a1, a3, v9);
  return a1;
}

void *sub_100046FB0(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10002C55C((uint64_t)a1, type metadata accessor for SessionConfiguration.Backend);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    if (EnumCaseMultiPayload == 1)
    {
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      uint64_t v7 = 1LL;
    }

    else
    {
      uint64_t v8 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
      uint64_t v9 = v8[6];
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for URL(0LL);
      uint64_t v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v12 - 8) + 16LL);
      __n128 v14 = swift_bridgeObjectRetain();
      v13(v10, v11, v12, v14);
      uint64_t v7 = 0LL;
      *(void *)((char *)a1 + v8[7]) = *(void *)((char *)a2 + v8[7]);
      *((_BYTE *)a1 + v8[8]) = *((_BYTE *)a2 + v8[8]);
      *(void *)((char *)a1 + v8[9]) = *(void *)((char *)a2 + v8[9]);
      *(void *)((char *)a1 + v8[10]) = *(void *)((char *)a2 + v8[10]);
      *((_BYTE *)a1 + v8[11]) = *((_BYTE *)a2 + v8[11]);
    }

    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload(a1, a3, v7);
  }

  return a1;
}

void *sub_100047114(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v6 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
    uint64_t v7 = v6[6];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
    *(void *)((char *)a1 + v6[7]) = *(void *)((char *)a2 + v6[7]);
    *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
    *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
    *(void *)((char *)a1 + v6[10]) = *(void *)((char *)a2 + v6[10]);
    *((_BYTE *)a1 + v6[11]) = *((_BYTE *)a2 + v6[11]);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

void *sub_100047208(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10002C55C((uint64_t)a1, type metadata accessor for SessionConfiguration.Backend);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      uint64_t v6 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
      uint64_t v7 = v6[6];
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
      *(void *)((char *)a1 + v6[7]) = *(void *)((char *)a2 + v6[7]);
      *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
      *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
      *(void *)((char *)a1 + v6[10]) = *(void *)((char *)a2 + v6[10]);
      *((_BYTE *)a1 + v6[11]) = *((_BYTE *)a2 + v6[11]);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_100047314(uint64_t a1)
{
  uint64_t result = type metadata accessor for SessionConfiguration.BackendHTTP(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "(";
    swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v4);
    return 0LL;
  }

  return result;
}

unint64_t sub_100047384()
{
  unint64_t result = qword_10008C120;
  if (!qword_10008C120)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006BDE0, &unk_100085650);
    atomic_store(result, (unint64_t *)&qword_10008C120);
  }

  return result;
}

uint64_t sub_1000473C0(void *a1)
{
  return swift_bridgeObjectRelease(a1[4]);
}

void *sub_1000473F8(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  a1[2] = v4;
  a1[3] = v5;
  uint64_t v6 = a2[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

void *sub_100047454(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[4];
  uint64_t v11 = a1[4];
  a1[4] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

void *sub_1000474E8(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[3]);
  uint64_t v5 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  return a1;
}

void type metadata accessor for SessionConfiguration.BackendTTR()
{
}

void sub_100047550(unint64_t a1@<X8>)
{
}

void sub_100047568()
{
}

void sub_10004757C(uint64_t a1@<X8>)
{
}

uint64_t sub_100047590()
{
  return Identifiable<>.id.getter(v0, v1);
}

uint64_t sub_1000475A0()
{
  return Identifiable<>.id.getter(v0, v1);
}

uint64_t sub_1000475B0(uint64_t a1, uint64_t *a2)
{
  return sub_10000534C(a2);
}

uint64_t sub_1000475CC()
{
  return sub_1000457D4(v3, v1, v0, v2);
}

uint64_t sub_1000475E4()
{
  return sub_1000457D4(v2, v1, v3, v0);
}

uint64_t sub_1000475FC(uint64_t a1)
{
  return sub_100045B58(a1, *(void *)(v1 - 152));
}

uint64_t sub_100047608()
{
  return swift_retain(*(void *)(*(void *)(v0 + 48) + 8 * v1));
}

uint64_t sub_100047618()
{
  return swift_retain(v0);
}

uint64_t sub_100047620(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_100047630()
{
  return Identifiable<>.id.getter(v0, v1);
}

uint64_t sub_100047640()
{
  return sub_1000577F4(0LL, v0, v1);
}

uint64_t sub_100047650()
{
  return sub_1000577F4(0LL, v0, v1);
}

uint64_t sub_100047660()
{
  return swift_retain(*(void *)(*(void *)(v0 + 48) + 8 * v1));
}

uint64_t sub_100047670(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_100047680()
{
  return Identifiable<>.id.getter(v0, v1);
}

uint64_t sub_100047690()
{
  return swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 - 104));
}

uint64_t sub_10004769C(uint64_t a1)
{
  return swift_getEnumCaseMultiPayload(a1, *(void *)(v1 - 120));
}

  ;
}

uint64_t sub_1000476B8()
{
  return swift_errorRelease(v0);
}

void sub_1000476C0()
{
  void *v0 = 0x8000000000000000LL;
}

uint64_t sub_1000476D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t *v1 = a1;
  return swift_bridgeObjectRelease(v2);
}

void *sub_1000476E0()
{
  return sub_10000ECEC((void *)(v0 - 96));
}

uint64_t sub_1000476E8()
{
  return type metadata accessor for Client();
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10004772C()
{
  return swift_release(v0);
}

uint64_t sub_100047738()
{
  return swift_release(v0);
}

  ;
}

  ;
}

  ;
}

  ;
}

void *sub_100047794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (void *)((char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v8);
  uint64_t v39 = (uint64_t)v38 - v11;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12)
  {
    sub_100006BFC();
    return _swiftEmptyArrayStorage;
  }

  v38[1] = v3;
  sub_1000083B0();
  v38[0] = a1;
  uint64_t v13 = (uint64_t *)(a1 + 56);
  uint64_t v40 = _swiftEmptyArrayStorage;
  uint64_t v14 = v39;
  while (1)
  {
    uint64_t v16 = *(v13 - 1);
    uint64_t v15 = *v13;
    if (!*(void *)(*v13 + 16))
    {
      uint64_t v28 = sub_1000083F4();
      _s10RTCUtility9XPCObjectOwst_0(v14, 1LL, 1LL, v28);
      sub_100010290();
      sub_1000083B0();
      goto LABEL_19;
    }

    uint64_t v41 = *(v13 - 1);
    sub_100010290();
    sub_1000083B0();
    swift_bridgeObjectRetain(a3);
    unint64_t v17 = sub_100033A58(a2, a3);
    if ((v18 & 1) != 0)
    {
      unint64_t v19 = v17;
      uint64_t v20 = v10;
      uint64_t v21 = a3;
      uint64_t v22 = a2;
      uint64_t v23 = *(void *)(v15 + 56);
      uint64_t v24 = sub_1000083F4();
      uint64_t v25 = v23 + *(void *)(*(void *)(v24 - 8) + 72LL) * v19;
      a2 = v22;
      a3 = v21;
      uint64_t v10 = v20;
      uint64_t v14 = v39;
      sub_100034734(v25, v39, type metadata accessor for EventValue);
      uint64_t v26 = v14;
      uint64_t v27 = 0LL;
    }

    else
    {
      uint64_t v24 = sub_1000083F4();
      uint64_t v26 = v14;
      uint64_t v27 = 1LL;
    }

    _s10RTCUtility9XPCObjectOwst_0(v26, v27, 1LL, v24);
    sub_100006BFC();
    sub_1000083F4();
    int v29 = _s10RTCUtility9XPCObjectOwet_0(v14, 1LL, v24);
    uint64_t v16 = v41;
    if (v29 == 1) {
      goto LABEL_19;
    }
    sub_1000417C8(v14, (uint64_t)v10);
    unint64_t result = (void *)swift_getEnumCaseMultiPayload(v10, v24);
    if ((_DWORD)result == 2) {
      break;
    }
    if ((_DWORD)result == 1)
    {
      uint64_t v31 = *v10;
LABEL_13:
      sub_10004BC50(v14);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v16);
      uint64_t v32 = v40;
      if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0)
      {
        sub_10000538C(0LL, v32[2] + 1LL, 1LL, (uint64_t)v32);
        uint64_t v32 = v36;
      }

      unint64_t v34 = v32[2];
      unint64_t v33 = v32[3];
      uint64_t v40 = v32;
      if (v34 >= v33 >> 1)
      {
        sub_10000538C(v33 > 1, v34 + 1, 1LL, (uint64_t)v40);
        uint64_t v40 = v37;
      }

      unint64_t v35 = v40;
      void v40[2] = v34 + 1;
      v35[v34 + 4] = v31;
      uint64_t v14 = v39;
      goto LABEL_20;
    }

    sub_100005FF0((uint64_t)v10, type metadata accessor for EventValue);
LABEL_19:
    sub_10004BC50(v14);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v16);
LABEL_20:
    v13 += 4;
    if (!--v12)
    {
      sub_100006BFC();
      swift_bridgeObjectRelease(v38[0]);
      return v40;
    }
  }

  uint64_t v31 = *v10;
  if ((*v10 & 0x8000000000000000LL) == 0) {
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_100047A74(uint64_t a1)
{
  return sub_100047AAC( a1,  (uint64_t)&type metadata for Int,  (uint64_t)&protocol witness table for Int,  (void (*)(uint64_t *, uint64_t))sub_100042D48);
}

uint64_t sub_100047A90(uint64_t a1)
{
  return sub_100047AAC( a1,  (uint64_t)&type metadata for Int64,  (uint64_t)&protocol witness table for Int64,  (void (*)(uint64_t *, uint64_t))sub_100042D5C);
}

uint64_t sub_100047AAC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *, uint64_t))
{
  uint64_t v6 = Set.init(minimumCapacity:)(*(void *)(a1 + 16));
  uint64_t v13 = v6;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    for (uint64_t i = 0LL; i != v7; ++i)
    {
      uint64_t v9 = *(void *)(a1 + 8 * i + 32);
      a4(&v12, v9);
    }

    sub_100006AF0();
    return v13;
  }

  else
  {
    uint64_t v10 = v6;
    sub_100006AF0();
  }

  return v10;
}

uint64_t sub_100047B34(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 112) = a2;
  *(void *)(v4 + 12sub_100057EF4(0, v0, 0) = v3;
  *(_BYTE *)(v4 + 57) = a3;
  *(void *)(v4 + 104) = a1;
  sub_100026B34();
  return swift_task_switch(v5, v6, v7);
}

uint64_t sub_100047B58()
{
  uint64_t v1 = v0[14];
  v0[16] = *(void *)(v0[15] + 112LL);
  swift_retain(v1);
  sub_100026B34();
  return sub_10001A9C0();
}

uint64_t sub_100047B90()
{
  uint64_t v1 = sub_10004D5B0();
  uint64_t v3 = v2;
  sub_100006AF0();
  v0[17] = v3;
  if (v3)
  {
    uint64_t v4 = v0[16];
    v0[18] = v1;
    uint64_t v5 = *(void *)(v4 + 128);
    v0[19] = v5;
    uint64_t v6 = sub_100047C04;
  }

  else
  {
    sub_10004D538();
    uint64_t v6 = sub_100047CB4;
    uint64_t v5 = v1;
  }

  return sub_100026A04((uint64_t)v6, v5, 0LL);
}

uint64_t sub_100047C04()
{
  uint64_t v1 = *(void *)(v0 + 128);
  *(_BYTE *)(v0 + 58) = sub_100060A1C() & 1;
  sub_100006AF0();
  return sub_100026A04((uint64_t)sub_100047C50, v1, 0LL);
}

uint64_t sub_100047C50()
{
  if (*(_BYTE *)(v0 + 58) == 1)
  {
    sub_10004D538();
    sub_100026B34();
    return sub_10001A9C0();
  }

  else
  {
    uint64_t v2 = (void *)swift_task_alloc(dword_10008AD4C);
    *(void *)(v0 + 16sub_100057EF4(0, v0, 0) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100047D38;
    return sub_10004D354();
  }

uint64_t sub_100047CB4()
{
  uint64_t v1 = v0[14];
  v0[11] = sub_10004D55C();
  v0[12] = &off_100085968;
  v0[8] = v1;
  sub_10001AA24();
  uint64_t v2 = (void *)sub_10002F664();
  v0[21] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100047E84;
  return sub_10001C348((uint64_t)(v0 + 2), (uint64_t)(v0 + 8));
}

uint64_t sub_100047D38()
{
  *(_BYTE *)(v1 + 59) = v0;
  sub_10001ACD0(v2);
  sub_100026B34();
  return sub_10001A9C0();
}

uint64_t sub_100047D78()
{
  return sub_10001A9C0();
}

uint64_t sub_100047DA4()
{
  if (*(_BYTE *)(v0 + 59) == 3)
  {
    uint64_t v1 = *(void *)(v0 + 112);
LABEL_7:
    *(void *)(v0 + 88) = sub_10004D55C();
    *(void *)(v0 + 96) = &off_100085968;
    *(void *)(v0 + 64) = v1;
    sub_100010324();
    uint64_t v3 = (void *)sub_10002F664();
    *(void *)(v0 + 168) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100047E84;
    return sub_10004D27C(v0 + 16, v0 + 64);
  }

  uint64_t v1 = *(void *)(v0 + 112);
  if (*(_BYTE *)(v1 + 240) == 1 || *(_BYTE *)(v0 + 57) != 0) {
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(v0 + 104);
  *(void *)uint64_t v5 = _swiftEmptyArrayStorage;
  *(void *)(v5 + 8) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v5 + swift_weakDestroy(v0 + 16) = 1;
  *(void *)(v5 + 24) = 1701736302LL;
  *(void *)(v5 + 32) = 0xE400000000000000LL;
  *(_BYTE *)(v5 + 4sub_100057EF4(0, v0, 0) = 2;
  uint64_t v6 = (uint64_t (*)(void))sub_10002C7E0();
  return sub_10001CC0C(v6);
}

uint64_t sub_100047E84()
{
  *(void *)(v0 + 176) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return sub_100020908((uint64_t)sub_100047F04, *(void *)(v0 + 120), 0LL);
  }
  sub_100005F54((void *)(v0 + 64));
  char v6 = *(_BYTE *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v8 = *(void *)(v0 + 48);
  char v9 = *(_BYTE *)(v0 + 32);
  uint64_t v10 = *(void *)(v0 + 104);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)(v0 + 16);
  *(_BYTE *)(v10 + swift_weakDestroy(v0 + 16) = v9;
  *(void *)(v10 + 24) = v7;
  *(void *)(v10 + 32) = v8;
  *(_BYTE *)(v10 + 4sub_100057EF4(0, v0, 0) = v6;
  return sub_10001CC0C(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100047F04()
{
  return sub_10001ABB0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100047F30(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 112) = a2;
  *(void *)(v4 + 12sub_100057EF4(0, v0, 0) = v3;
  *(_BYTE *)(v4 + 57) = a3;
  *(void *)(v4 + 104) = a1;
  uint64_t v5 = type metadata accessor for CachedSession(0LL);
  *(void *)(v4 + 128) = v5;
  *(void *)(v4 + 136) = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100047F94, v3, 0LL);
}

uint64_t sub_100047F94()
{
  uint64_t v1 = *(void *)(v0[15] + 112LL);
  v0[18] = v1;
  uint64_t v2 = (void *)sub_10004D3D0((uint64_t)&unk_10008C230);
  v0[19] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100047FF4;
  return v4(v0[14], v1);
}

uint64_t sub_100047FF4()
{
  *(_BYTE *)(v1 + 58) = v0;
  sub_10001ACD0(v2);
  sub_100026B34();
  return sub_10001A9C0();
}

uint64_t sub_100048034()
{
  int v1 = *(unsigned __int8 *)(v0 + 58);
  sub_100034734(*(void *)(v0 + 112), *(void *)(v0 + 136), type metadata accessor for CachedSession);
  uint64_t v2 = *(void *)(v0 + 136);
  if (v1 == 3)
  {
    sub_100005FF0(v2, type metadata accessor for CachedSession);
LABEL_7:
    uint64_t v6 = *(void *)(v0 + 112);
    *(void *)(v0 + 88) = *(void *)(v0 + 128);
    *(void *)(v0 + 96) = &off_100085910;
    uint64_t v7 = sub_10000EDB4((void *)(v0 + 64));
    sub_100034734(v6, (uint64_t)v7, type metadata accessor for CachedSession);
    uint64_t v8 = (void *)swift_task_alloc(dword_10008AD54);
    *(void *)(v0 + 16sub_100057EF4(0, v0, 0) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_10004815C;
    return sub_10004D27C(v0 + 16, v0 + 64);
  }

  int v3 = *(unsigned __int8 *)(v0 + 57);
  int v4 = *(unsigned __int8 *)(v2 + 72);
  sub_100005FF0(v2, type metadata accessor for CachedSession);
  if (v4 == 1 || v3 != 0) {
    goto LABEL_7;
  }
  uint64_t v10 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 136));
  *(void *)uint64_t v10 = _swiftEmptyArrayStorage;
  *(void *)(v10 + 8) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v10 + swift_weakDestroy(v0 + 16) = 1;
  *(void *)(v10 + 24) = 1701736302LL;
  *(void *)(v10 + 32) = 0xE400000000000000LL;
  *(_BYTE *)(v10 + 4sub_100057EF4(0, v0, 0) = 2;
  uint64_t v11 = (uint64_t (*)(void))sub_10002C7E0();
  return sub_10001CC0C(v11);
}

uint64_t sub_10004815C()
{
  v0[21] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    uint64_t v4 = v0[15];
    uint64_t v5 = sub_100048228;
  }

  else
  {
    uint64_t v6 = v0[15];
    sub_100005F54(v0 + 8);
    uint64_t v5 = sub_1000481BC;
    uint64_t v4 = v6;
  }

  return sub_100020908((uint64_t)v5, v4, 0LL);
}

uint64_t sub_1000481BC()
{
  char v1 = *(_BYTE *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  char v4 = *(_BYTE *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 104);
  __int128 v8 = *(_OWORD *)(v0 + 16);
  swift_task_dealloc(*(void *)(v0 + 136));
  *(_OWORD *)uint64_t v5 = v8;
  *(_BYTE *)(v5 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)(v5 + 24) = v2;
  *(void *)(v5 + 32) = v3;
  *(_BYTE *)(v5 + 4sub_100057EF4(0, v0, 0) = v1;
  uint64_t v6 = (uint64_t (*)(void))sub_10002C7E0();
  return v6();
}

uint64_t sub_100048228()
{
  return sub_10001ABB0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004825C(uint64_t a1)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = v1;
  return swift_task_switch(sub_100048274, v1, 0LL);
}

void sub_100048274()
{
  uint64_t v1 = qword_1000933C0;
  v0[18] = qword_1000933C0;
  if (v1)
  {
    uint64_t v2 = unk_10008C21C;
    char v4 = (void (*)(uint64_t, uint64_t, char))((char *)&dword_10008C218 + dword_10008C218);
    sub_100010324();
    uint64_t v3 = (void *)swift_task_alloc(v2);
    v0[19] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100048304;
    v4((uint64_t)(v0 + 2), v0[16], 1);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100048304()
{
  uint64_t v7 = (void *)*v1;
  uint64_t v2 = v7;
  sub_100026B94(&v7);
  v2[20] = v0;
  swift_task_dealloc(v3);
  if (v0) {
    return sub_100026A04((uint64_t)sub_100048494, v2[17], 0LL);
  }
  swift_release(v2[18]);
  uint64_t v5 = (void *)sub_10004D3D0((uint64_t)&unk_10008C220);
  v2[21] = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000483A0;
  return v6(v2 + 2, v2[16]);
}

uint64_t sub_1000483A0(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *v3;
  uint64_t v6 = v11;
  sub_100026B94(&v11);
  swift_task_dealloc(v7);
  uint64_t v8 = *(void *)(v6 + 16);
  char v9 = (_OWORD *)(v6 + 40);
  if (v2)
  {
    *(void *)(v6 + 96) = v8;
    sub_10000ECEC((void *)(v6 + 96));
    *(void *)(v6 + 112) = *(void *)(v6 + 24);
    sub_10000ECEC((void *)(v6 + 112));
    *(_OWORD *)(v6 + 8sub_100057EF4(0, v0, 0) = *v9;
    sub_100030674();
    return ((uint64_t (*)(void))v3[1])();
  }

  else
  {
    *(void *)(v6 + 12sub_100057EF4(0, v0, 0) = v8;
    sub_10000ECEC((void *)(v6 + 120));
    *(void *)(v6 + 104) = *(void *)(v6 + 24);
    sub_10000ECEC((void *)(v6 + 104));
    *(_OWORD *)(v6 + 64) = *v9;
    sub_1000082EC(v6 + 64);
    return ((uint64_t (*)(uint64_t, uint64_t))v3[1])(a1, a2);
  }

uint64_t sub_100048494()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000484C8(uint64_t a1, uint64_t a2)
{
  v3[28] = a2;
  v3[29] = v2;
  v3[27] = a1;
  v3[30] = *(void *)(type metadata accessor for SessionConfiguration.Backend(0LL) - 8);
  v3[31] = sub_100026B60();
  v3[32] = sub_100026B60();
  sub_100026B34();
  return sub_100020908(v4, v5, v6);
}

uint64_t sub_100048524()
{
  *(void *)(v2 + 56) = v0;
  uint64_t v3 = *(void *)(v0 + 16);
  *(void *)(v2 + 64) = v3;
  if (v3 == 1)
  {
    uint64_t v8 = (_OWORD *)(v2 - 192);
    uint64_t v9 = *(void *)(v1 + 224);
    uint64_t v10 = *(unsigned __int8 *)(*(void *)(v1 + 240) + 80LL);
    sub_100034734( v0 + ((v10 + 32) & ~v10),  *(void *)(v1 + 256),  type metadata accessor for SessionConfiguration.Backend);
    __int128 v11 = *(_OWORD *)(v9 + 224);
    __int128 v12 = *(_OWORD *)(v9 + 192);
    v8[1] = *(_OWORD *)(v9 + 208);
    _OWORD v8[2] = v11;
    *uint64_t v8 = v12;
    sub_10004D4D8(*(__n128 *)(v9 + 192));
    swift_retain(v9);
    sub_1000306D8();
    sub_1000306E0();
    sub_10004D414();
    uint64_t v13 = (void *)swift_task_alloc(dword_10008B824);
    *(void *)(v1 + 28sub_100057EF4(0, v0, 0) = v13;
    uint64_t v14 = sub_10004D504(v13, (uint64_t)sub_1000486B4);
  }

  else
  {
    if (!v3)
    {
      sub_10004D540();
      sub_10001AB88();
      uint64_t v4 = sub_10004D5BC();
      return sub_10004D1BC(v4, v5, v6);
    }

    uint64_t v15 = (_OWORD *)(v2 - 144);
    uint64_t v16 = (_OWORD *)(v2 - 80);
    unint64_t v17 = (_OWORD *)(v2 - 64);
    char v18 = (_OWORD *)(v2 - 48);
    uint64_t v19 = *(void *)(v1 + 240);
    uint64_t v20 = *(_OWORD **)(v1 + 224);
    sub_10004D4B8();
    __int128 v21 = v20[14];
    __int128 v22 = v20[12];
    v15[1] = v20[13];
    v15[2] = v21;
    *uint64_t v15 = v22;
    *char v18 = v20[12];
    __int128 v23 = *(_OWORD *)(v1 + 96);
    *unint64_t v17 = *(_OWORD *)(v1 + 80);
    *uint64_t v16 = v23;
    int v24 = *(_DWORD *)(v19 + 80);
    *(_DWORD *)(v1 + 36sub_100057EF4(0, v0, 0) = v24;
    *(void *)(v1 + 312) = v25;
    *(void *)(v1 + 32sub_100057EF4(0, v0, 0) = 1LL;
    uint64_t v26 = *(void *)(v1 + 224);
    uint64_t v27 = *(void *)(v1 + 264) + ((v24 + 32LL) & ~(unint64_t)v24);
    sub_1000083B8();
    sub_10004D4B0(v27, v28, type metadata accessor for SessionConfiguration.Backend);
    swift_retain(v26);
    sub_10004D414();
    sub_1000306E0();
    sub_1000306D8();
    int v29 = (void *)swift_task_alloc(dword_10008B824);
    *(void *)(v1 + 328) = v29;
    sub_10004D33C(v29, (uint64_t)sub_1000487E0);
    uint64_t v14 = (uint64_t)v15;
  }

  return sub_10004D1A0(v14);
}

uint64_t sub_1000486B4()
{
  v3[36] = v0;
  swift_task_dealloc(v5);
  if (v0)
  {
    sub_100005FF0(v3[32], type metadata accessor for SessionConfiguration.Backend);
  }

  else
  {
    v3[37] = v2;
    v3[38] = v1;
  }

  sub_100030658();
  sub_100030674();
  sub_10004D22C();
  sub_100026B34();
  return sub_100030618(v6, v7, v8);
}

uint64_t sub_100048738()
{
  uint64_t v1 = v0[28];
  sub_10004C140(v1, v0[32], v0[38], v0[37], *(_BYTE *)(v1 + 240) == 1, v0[29]);
  uint64_t v2 = sub_10000FFD8();
  sub_10004D47C(v2, type metadata accessor for SessionConfiguration.Backend);
  swift_release(v1);
  sub_10004D540();
  sub_10001AB88();
  uint64_t v3 = sub_10004D5D0();
  return sub_10004D218(v3, v4, v5);
}

uint64_t sub_1000487AC()
{
  return sub_10004D26C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000487E0()
{
  v3[42] = v0;
  swift_task_dealloc(v5);
  if (v0)
  {
    uint64_t v6 = v3[29];
    sub_10004D40C();
    sub_100030674();
    sub_10004D22C();
    sub_10000ECEC(v3 + 26);
    sub_1000083D4();
    uint64_t v7 = sub_1000489C4;
    uint64_t v8 = v6;
  }

  else
  {
    uint64_t v9 = v3[29];
    v3[43] = v2;
    v3[44] = v1;
    sub_10004D40C();
    sub_100030674();
    sub_10004D22C();
    uint64_t v7 = sub_100048870;
    uint64_t v8 = v9;
  }

  return sub_100030618((uint64_t)v7, v8, 0LL);
}

void sub_100048870()
{
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = sub_10004D518();
  sub_10004C140(v3, v4, v5, v6, v7, v8);
  sub_10000FFD8();
  swift_release(v2);
  uint64_t v9 = *(void *)(v0 + 312);
  if (*(void *)(v1 + 16) >= *(void *)(v1 + 24) >> 1)
  {
    sub_10004D324();
    uint64_t v9 = v20;
  }

  uint64_t v10 = *(void *)(v0 + 320);
  uint64_t v11 = *(void *)(v0 + 272);
  uint64_t v12 = sub_10004D578();
  sub_100005FF0(v12, type metadata accessor for SessionConfiguration.Backend);
  if (v10 == v11)
  {
    sub_10000ECEC((void *)(v0 + 208));
    uint64_t v13 = type metadata accessor for BackendGroup();
    uint64_t v14 = sub_10003E3BC(v13, 120LL);
    swift_defaultActor_initialize(v14);
    *(void *)(v14 + 112) = v9;
    sub_10004D540();
    sub_10001AB88();
    sub_100030630(v14, (uint64_t)&off_100083D70, *(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 320);
    *(void *)(v0 + 312) = v9;
    *(void *)(v0 + 32sub_100057EF4(0, v0, 0) = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
      __break(1u);
    }

    else
    {
      uint64_t v16 = *(void *)(v0 + 224);
      uint64_t v17 = sub_10004D464(v15);
      sub_100034734(v17, v18, type metadata accessor for SessionConfiguration.Backend);
      swift_retain(v16);
      sub_1000306E0();
      sub_1000306D8();
      sub_1000080FC(v0 + 128);
      uint64_t v19 = (void *)swift_task_alloc(dword_10008B824);
      *(void *)(v0 + 328) = v19;
      sub_10004D33C(v19, (uint64_t)sub_1000487E0);
      sub_10004D1E8(v0 + 64);
    }
  }

uint64_t sub_1000489C4()
{
  return sub_10004D26C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100048A08(uint64_t a1, uint64_t a2)
{
  v3[28] = a2;
  v3[29] = v2;
  v3[27] = a1;
  uint64_t v4 = *(void *)(type metadata accessor for SessionConfiguration.Backend(0LL) - 8);
  v3[30] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[31] = swift_task_alloc(v5);
  v3[32] = swift_task_alloc(v5);
  unint64_t v6 = (*(void *)(*(void *)(type metadata accessor for CachedSession(0LL) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[33] = swift_task_alloc(v6);
  v3[34] = swift_task_alloc(v6);
  return swift_task_switch(sub_100048AA8, v2, 0LL);
}

uint64_t sub_100048AA8()
{
  *(void *)(v2 + 72) = v0;
  uint64_t v3 = *(void *)(v0 + 16);
  *(void *)(v2 + 8sub_100057EF4(0, v0, 0) = v3;
  if (v3 == 1)
  {
    uint64_t v8 = (__n128 *)(v2 - 192);
    uint64_t v9 = *(void *)(v1 + 240);
    uint64_t v10 = *(void *)(v1 + 224);
    sub_100034734(v10, *(void *)(v1 + 272), type metadata accessor for CachedSession);
    sub_10004D4B0( v0 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)),  v11,  type metadata accessor for SessionConfiguration.Backend);
    __n128 v12 = *(__n128 *)(v10 + 32);
    __n128 v13 = *(__n128 *)v10;
    v8[1] = *(__n128 *)(v10 + 16);
    _OWORD v8[2] = v12;
    *uint64_t v8 = v13;
    sub_10004D4D8(*(__n128 *)v10);
    sub_1000306D8();
    sub_1000306E0();
    sub_10004D414();
    uint64_t v14 = (void *)swift_task_alloc(dword_10008B824);
    *(void *)(v1 + 296) = v14;
    sub_10004D33C(v14, (uint64_t)sub_100048C60);
    return sub_10004D1A0((uint64_t)v8);
  }

  else if (v3)
  {
    uint64_t v15 = (_OWORD *)(v2 - 144);
    uint64_t v16 = (_OWORD *)(v2 - 80);
    uint64_t v17 = (_OWORD *)(v2 - 64);
    uint64_t v18 = (__int128 *)(v2 - 48);
    uint64_t v19 = *(void *)(v1 + 240);
    sub_10004D4B8();
    int v20 = *(_DWORD *)(v19 + 80);
    *(_DWORD *)(v1 + 376) = v20;
    *(void *)(v1 + 328) = v21;
    *(void *)(v1 + 336) = 1LL;
    uint64_t v22 = *(void *)(v1 + 248);
    __int128 v23 = *(__int128 **)(v1 + 224);
    uint64_t v24 = *(void *)(v1 + 280) + ((v20 + 32LL) & ~(unint64_t)v20);
    sub_1000083B8();
    sub_100034734(v24, v22, type metadata accessor for SessionConfiguration.Backend);
    sub_10004D4B0((uint64_t)v23, v25, type metadata accessor for CachedSession);
    __int128 v26 = v23[2];
    __int128 v27 = *v23;
    v15[1] = v23[1];
    v15[2] = v26;
    *uint64_t v15 = v27;
    *uint64_t v18 = *v23;
    __int128 v28 = *(_OWORD *)(v1 + 96);
    *uint64_t v17 = *(_OWORD *)(v1 + 80);
    *uint64_t v16 = v28;
    sub_10004D414();
    sub_1000306E0();
    sub_1000080FC((uint64_t)v16);
    int v29 = (void *)swift_task_alloc(dword_10008B824);
    *(void *)(v1 + 344) = v29;
    sub_10004D33C(v29, (uint64_t)sub_100048DB8);
    return sub_10004D1A0((uint64_t)v15);
  }

  else
  {
    sub_10004D4F8();
    sub_10001AB88();
    sub_10001AB08();
    sub_10001AB28();
    uint64_t v4 = sub_10004D5BC();
    return sub_10004D1BC(v4, v5, v6);
  }

uint64_t sub_100048C60()
{
  v3[38] = v0;
  swift_task_dealloc(v5);
  if (v0)
  {
    sub_100005FF0(v3[32], type metadata accessor for SessionConfiguration.Backend);
  }

  else
  {
    v3[39] = v2;
    v3[40] = v1;
  }

  sub_100030658();
  sub_100030674();
  sub_10004D22C();
  sub_100026B34();
  return sub_100030618(v6, v7, v8);
}

uint64_t sub_100048CE4()
{
  uint64_t v1 = v0[32];
  sub_10004C404(v0[34], v1, v0[40], v0[39], *(unsigned __int8 *)(v0[28] + 72LL) == 1, v0[29]);
  sub_10000FFD8();
  sub_100005FF0(v1, type metadata accessor for SessionConfiguration.Backend);
  sub_10004D47C(v2, type metadata accessor for CachedSession);
  sub_10004D4F8();
  sub_10001AB88();
  sub_10001AB08();
  sub_10001AB28();
  uint64_t v3 = sub_10004D5D0();
  return sub_10004D218(v3, v4, v5);
}

uint64_t sub_100048D6C()
{
  return sub_1000288A4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100048DB8()
{
  v3[44] = v0;
  swift_task_dealloc(v5);
  if (v0)
  {
    uint64_t v6 = v3[29];
    sub_10004D40C();
    sub_100030674();
    sub_10004D22C();
    sub_10000ECEC(v3 + 26);
    sub_1000083D4();
    uint64_t v7 = sub_100048FE8;
    uint64_t v8 = v6;
  }

  else
  {
    uint64_t v9 = v3[29];
    v3[45] = v2;
    v3[46] = v1;
    sub_10004D40C();
    sub_100030674();
    sub_10004D22C();
    uint64_t v7 = sub_100048E48;
    uint64_t v8 = v9;
  }

  return sub_100030618((uint64_t)v7, v8, 0LL);
}

void sub_100048E48()
{
  uint64_t v1 = *(void *)(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v3 = sub_10004D518();
  sub_10004C404(v3, v4, v5, v6, v7, v8);
  sub_10000FFD8();
  sub_100005FF0(v2, type metadata accessor for CachedSession);
  uint64_t v9 = *(void *)(v0 + 328);
  if (*(void *)(v1 + 16) >= *(void *)(v1 + 24) >> 1)
  {
    sub_10004D324();
    uint64_t v9 = v25;
  }

  uint64_t v10 = *(void *)(v0 + 336);
  uint64_t v11 = *(void *)(v0 + 288);
  uint64_t v12 = sub_10004D578();
  sub_100005FF0(v12, type metadata accessor for SessionConfiguration.Backend);
  if (v10 == v11)
  {
    sub_10000ECEC((void *)(v0 + 208));
    uint64_t v13 = type metadata accessor for BackendGroup();
    uint64_t v14 = sub_10003E3BC(v13, 120LL);
    swift_defaultActor_initialize(v14);
    *(void *)(v14 + 112) = v9;
    swift_task_dealloc(*(void *)(v0 + 272));
    sub_10001AB88();
    sub_10001AB28();
    sub_10001AB38();
    sub_100030630(v14, (uint64_t)&off_100083D70, *(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 336);
    *(void *)(v0 + 328) = v9;
    *(void *)(v0 + 336) = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
      __break(1u);
    }

    else
    {
      uint64_t v16 = *(void *)(v0 + 264);
      uint64_t v17 = *(__int128 **)(v0 + 224);
      uint64_t v18 = sub_10004D464(v15);
      sub_100034734(v18, v19, type metadata accessor for SessionConfiguration.Backend);
      sub_100034734((uint64_t)v17, v16, type metadata accessor for CachedSession);
      __int128 v20 = v17[2];
      __int128 v21 = *v17;
      *(_OWORD *)(v0 + 8sub_100057EF4(0, v0, 0) = v17[1];
      *(_OWORD *)(v0 + 96) = v20;
      *(_OWORD *)(v0 + 64) = v21;
      *(_OWORD *)(v0 + 16sub_100057EF4(0, v0, 0) = *v17;
      __int128 v22 = *(_OWORD *)(v0 + 96);
      *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 80);
      *(_OWORD *)(v0 + 128) = v22;
      sub_1000306E0();
      sub_1000306D8();
      sub_1000080FC(v0 + 128);
      __int128 v23 = (void *)swift_task_alloc(dword_10008B824);
      *(void *)(v0 + 344) = v23;
      uint64_t v24 = sub_10004D504(v23, (uint64_t)sub_100048DB8);
      sub_10004D1E8(v24);
    }
  }

uint64_t sub_100048FE8()
{
  return sub_1000288A4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100049044()
{
  uint64_t v0 = sub_10000534C(&qword_10008B410);
  uint64_t v1 = sub_10000534C(&qword_10008B418);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = swift_allocObject(v0, v5 + 13 * v3, v4 | 7);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_10006A910;
  uint64_t v7 = v6 + v5;
  uint64_t v8 = (_BYTE *)(v6 + v5 + *(int *)(v1 + 48));
  *(void *)(v6 + sub_10000E870(v4, *(void *)(v0 + 448), v5) = XPC_ACTIVITY_REPEATING;
  *uint64_t v8 = 1;
  uint64_t v9 = type metadata accessor for XPCObject(0LL);
  swift_storeEnumTagMultiPayload(v8, v9, 2LL);
  uint64_t v10 = (void *)(v7 + v3 + *(int *)(v1 + 48));
  *(void *)(v7 + sub_10000E894(v0[36], v0[56], v3) = XPC_ACTIVITY_DELAY;
  *uint64_t v10 = 86400LL;
  swift_storeEnumTagMultiPayload(v10, v9, 3LL);
  uint64_t v11 = (const char **)(v7 + 2 * v3);
  uint64_t v12 = (const char **)((char *)v11 + *(int *)(v1 + 48));
  *uint64_t v11 = XPC_ACTIVITY_GRACE_PERIOD;
  *uint64_t v12 = 3600LL;
  swift_storeEnumTagMultiPayload(v12, v9, 3LL);
  uint64_t v13 = (const char **)(v7 + 3 * v3);
  uint64_t v14 = (const char **)((char *)v13 + *(int *)(v1 + 48));
  *uint64_t v13 = XPC_ACTIVITY_PRIORITY;
  *uint64_t v14 = String.init(cString:)(XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  v14[1] = v15;
  swift_storeEnumTagMultiPayload(v14, v9, 8LL);
  uint64_t v16 = (const char **)(v7 + 4 * v3);
  uint64_t v17 = (char *)v16 + *(int *)(v1 + 48);
  *uint64_t v16 = XPC_ACTIVITY_ALLOW_BATTERY;
  *uint64_t v17 = 0;
  uint64_t result = swift_storeEnumTagMultiPayload(v17, v9, 2LL);
  if (!XPC_ACTIVITY_POWER_NAP)
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v19 = (void *)(v7 + 5 * v3);
  __int128 v20 = (char *)v19 + *(int *)(v1 + 48);
  void *v19 = XPC_ACTIVITY_POWER_NAP;
  _BYTE *v20 = 1;
  uint64_t result = swift_storeEnumTagMultiPayload(v20, v9, 2LL);
  if (!XPC_ACTIVITY_RANDOM_INITIAL_DELAY)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  __int128 v21 = (void *)(v7 + 6 * v3);
  __int128 v22 = (void *)((char *)v21 + *(int *)(v1 + 48));
  *__int128 v21 = XPC_ACTIVITY_RANDOM_INITIAL_DELAY;
  *__int128 v22 = 43200LL;
  uint64_t result = swift_storeEnumTagMultiPayload(v22, v9, 4LL);
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  __int128 v23 = (void *)(v7 - v3 + 8 * v3);
  uint64_t v24 = (char *)v23 + *(int *)(v1 + 48);
  *__int128 v23 = XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY;
  *uint64_t v24 = 1;
  uint64_t result = swift_storeEnumTagMultiPayload(v24, v9, 2LL);
  if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v25 = (void *)(v7 + 8 * v3);
  __int128 v26 = (char *)v25 + *(int *)(v1 + 48);
  *uint64_t v25 = XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY;
  *__int128 v26 = 1;
  uint64_t result = swift_storeEnumTagMultiPayload(v26, v9, 2LL);
  if (!XPC_ACTIVITY_NETWORK_UPLOAD_SIZE)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  __int128 v27 = (void *)(v7 + 9 * v3);
  __int128 v28 = (void *)((char *)v27 + *(int *)(v1 + 48));
  *__int128 v27 = XPC_ACTIVITY_NETWORK_UPLOAD_SIZE;
  *__int128 v28 = 5242880LL;
  uint64_t result = swift_storeEnumTagMultiPayload(v28, v9, 4LL);
  if (!XPC_ACTIVITY_EXPECTED_DURATION)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  int v29 = (void *)(v7 + 10 * v3);
  unint64_t v30 = (void *)((char *)v29 + *(int *)(v1 + 48));
  void *v29 = XPC_ACTIVITY_EXPECTED_DURATION;
  *unint64_t v30 = XPC_ACTIVITY_INTERVAL_5_MIN;
  uint64_t result = swift_storeEnumTagMultiPayload(v30, v9, 3LL);
  if (!XPC_ACTIVITY_GROUP_NAME)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v31 = (void *)(v7 + 11 * v3);
  uint64_t v32 = (void *)((char *)v31 + *(int *)(v1 + 48));
  *uint64_t v31 = XPC_ACTIVITY_GROUP_NAME;
  *uint64_t v32 = 0xD00000000000001DLL;
  v32[1] = 0x800000010006E1E0LL;
  uint64_t result = swift_storeEnumTagMultiPayload(v32, v9, 8LL);
  if (XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT)
  {
    unint64_t v33 = (void *)(v7 + 12 * v3);
    unint64_t v34 = (void *)((char *)v33 + *(int *)(v1 + 48));
    *unint64_t v33 = XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT;
    *unint64_t v34 = 1LL;
    swift_storeEnumTagMultiPayload(v34, v9, 4LL);
    uint64_t v35 = sub_10000534C(&qword_10008B420);
    unint64_t v36 = sub_100027258();
    uint64_t result = Dictionary.init(dictionaryLiteral:)(v6, v35, v9, v36);
    qword_100093390 = result;
    return result;
  }

uint64_t *sub_100049400()
{
  if (qword_10008A070 != -1) {
    swift_once(&qword_10008A070, sub_100049044);
  }
  return &qword_100093390;
}

uint64_t sub_100049440()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000D940(v0, qword_100093398);
  sub_10000D34C(v0, (uint64_t)qword_100093398);
  return Logger.init(subsystem:category:)( 0xD000000000000017LL,  0x800000010006D6D0LL,  0x74696D627573LL,  0xE600000000000000LL);
}

uint64_t sub_1000494B0(uint64_t a1)
{
  void v2[9] = a1;
  v2[10] = v1;
  type metadata accessor for CachedSession(0LL);
  v2[11] = sub_100026B60();
  v2[12] = sub_100026B60();
  sub_100026B34();
  return sub_100020908(v3, v4, v5);
}

void sub_100049504()
{
  uint64_t v20 = v1;
  uint64_t v21 = v2;
  uint64_t v19 = v0;
  if (qword_10008A078 != -1) {
    swift_once(&qword_10008A078, sub_100049440);
  }
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[12];
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = (os_log_s *)sub_10000D34C(v5, (uint64_t)qword_100093398);
  v0[13] = v6;
  sub_100034734(v3, v4, type metadata accessor for CachedSession);
  Logger.logObject.getter(v7);
  os_log_type_t v8 = sub_10001AB70();
  BOOL v9 = sub_10001AA3C(v8);
  uint64_t v10 = v0[12];
  if (v9)
  {
    uint64_t v11 = (uint8_t *)sub_1000100B0(12LL);
    uint64_t v12 = sub_1000100B0(32LL);
    uint64_t v18 = v12;
    *(_DWORD *)uint64_t v11 = 136446210;
    uint64_t v13 = sub_100010290();
    v0[8] = sub_10004D3C4(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v11 + 4);
    sub_10001ABFC();
    sub_100005FF0(v10, type metadata accessor for CachedSession);
    sub_10001AA70((void *)&_mh_execute_header, v6, (os_log_type_t)v6, "sending events for session: %{public}s", v11);
    sub_10001AA68(v12);
    sub_100010010(v12);
    sub_100010010((uint64_t)v11);
  }

  else
  {
    sub_100005FF0(v0[12], type metadata accessor for CachedSession);
  }

  uint64_t v15 = qword_1000933C8;
  v0[14] = qword_1000933C8;
  if (v15)
  {
    uint64_t v17 = (void (*)(uint64_t))((char *)&dword_10008C208 + dword_10008C208);
    sub_100010324();
    uint64_t v16 = (void *)sub_100026B60();
    v0[15] = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_1000496E4;
    v17(v0[9]);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1000496E4()
{
  v0[16] = v2;
  v0[17] = v3;
  v0[18] = v1;
  sub_10001ACD0(v4);
  if (v1)
  {
    uint64_t v5 = v0[10];
    uint64_t v6 = sub_100049F58;
  }

  else
  {
    uint64_t v7 = v0[10];
    swift_release(v0[14]);
    uint64_t v6 = sub_100049748;
    uint64_t v5 = v7;
  }

  return sub_100020908((uint64_t)v6, v5, 0LL);
}

void sub_100049748()
{
  if (*(void *)(v0 + 128))
  {
    if (qword_1000933B0)
    {
      *(void *)(v0 + 152) = qword_1000933B0;
      sub_100010324();
      uint64_t v1 = (void *)sub_10002F664();
      *(void *)(v0 + 16sub_100057EF4(0, v0, 0) = v1;
      uint64_t v2 = sub_10002F82C(v1, (uint64_t)sub_1000497F4);
      sub_10002B378(v2, v3, v4, v5);
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    unint64_t v6 = sub_10004BC14();
    sub_100006A70((uint64_t)&type metadata for SubmissionError, v6);
    *uint64_t v7 = 0LL;
    sub_100006AA4();
    sub_10004D610();
    sub_10001AB08();
    sub_10004D148(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_1000497F4()
{
  v0[21] = v2;
  v0[22] = v1;
  sub_10001ACD0(v3);
  if (v1)
  {
    uint64_t v4 = v0[10];
    uint64_t v5 = sub_100049F90;
  }

  else
  {
    uint64_t v6 = v0[10];
    swift_release(v0[19]);
    uint64_t v5 = sub_100049854;
    uint64_t v4 = v6;
  }

  return sub_100020908((uint64_t)v5, v4, 0LL);
}

uint64_t sub_100049854(uint64_t a1)
{
  uint64_t v2 = v1[21];
  if (!*(void *)(v2 + 16))
  {
    sub_100006AF0();
    sub_10001AB80();
    sub_10001AB28();
    sub_10001AB38();
    os_log_type_t v8 = (uint64_t (*)(void))sub_10002C7E0();
    return v8();
  }

  char v3 = static Task<>.isCancelled.getter(a1);
  uint64_t v4 = v1[21];
  if ((v3 & 1) != 0)
  {
    sub_1000083D4();
    unint64_t v5 = sub_10004BC14();
    uint64_t v6 = sub_100006A70((uint64_t)&type metadata for SubmissionError, v5);
    sub_10004D2D4(v6, v7);
    sub_10001AB80();
    sub_10004D5F0();
    sub_10001AB88();
    os_log_type_t v8 = (uint64_t (*)(void))v1[1];
    return v8();
  }

  sub_100034734(v1[9], v1[11], type metadata accessor for CachedSession);
  uint64_t v10 = swift_bridgeObjectRetain_n(v4, 4LL);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    loga = v11;
    uint64_t v13 = v1[21];
    uint64_t v14 = sub_1000100B0(42LL);
    uint64_t v43 = sub_1000100B0(96LL);
    v47[0] = v43;
    *(_DWORD *)uint64_t v14 = 134349826;
    v1[4] = *(void *)(v2 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 4, v1 + 5, v14 + 4);
    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain();
    v1[5] = sub_10004D4C4(v15, v16, v47);
    sub_10004D550((uint64_t)(v1 + 5));
    uint64_t v17 = sub_100010278();
    sub_10004D4D0(v17, type metadata accessor for CachedSession);
    *(_WORD *)(v14 + 22) = 2082;
    uint64_t v18 = sub_100047794(v13, 0x646F6874656D5FLL, 0xE700000000000000LL);
    uint64_t v19 = sub_100047AAC( (uint64_t)v18,  (uint64_t)&type metadata for Int64,  (uint64_t)&protocol witness table for Int64,  (void (*)(uint64_t *, uint64_t))sub_100042D5C);
    uint64_t v20 = Set.description.getter(v19, &type metadata for Int64, &protocol witness table for Int64);
    os_log_type_t type = v12;
    unint64_t v22 = v21;
    sub_100010278();
    v1[6] = sub_100019964(v20, v22, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 6, v1 + 7, v14 + 24);
    sub_10000FFD8();
    sub_100010060(v13);
    *(_WORD *)(v14 + 32) = 2082;
    __int128 v23 = sub_100047794(v13, 0x7375746174735FLL, 0xE700000000000000LL);
    uint64_t v24 = sub_100047AAC( (uint64_t)v23,  (uint64_t)&type metadata for Int64,  (uint64_t)&protocol witness table for Int64,  (void (*)(uint64_t *, uint64_t))sub_100042D5C);
    uint64_t v25 = Set.description.getter(v24, &type metadata for Int64, &protocol witness table for Int64);
    unint64_t v27 = v26;
    sub_1000083D4();
    v1[7] = sub_100019964(v25, v27, v47);
    sub_10002F974((uint64_t)(v1 + 7), (uint64_t)(v1 + 8));
    swift_bridgeObjectRelease(v27);
    sub_100010060(v13);
    _os_log_impl( (void *)&_mh_execute_header,  loga,  type,  "sending %{public}ld events for session %s with categories [%{public}s] types [%{public}s]",  (uint8_t *)v14,  0x2Au);
    swift_arrayDestroy(v43, 3LL);
    sub_100010010(v43);
    sub_100010010(v14);
  }

  else
  {
    uint64_t v28 = v1[21];
    sub_100005FF0(v1[11], type metadata accessor for CachedSession);
    swift_bridgeObjectRelease_n(v28, 4LL);
  }

  int64_t v29 = *(void *)(v2 + 16);
  v1[23] = v29;
  unint64_t v30 = _swiftEmptyArrayStorage;
  if (v29)
  {
    uint64_t v31 = v1 + 2;
    uint64_t v32 = v1[21];
    v1[2] = _swiftEmptyArrayStorage;
    sub_100057F20(0LL, v29, 0);
    unint64_t v30 = (void *)v1[2];
    unint64_t v33 = (_OWORD *)(v32 + 48);
    do
    {
      uint64_t v34 = *((void *)v33 - 1);
      *(_OWORD *)log = *v33;
      *uint64_t v31 = v30;
      unint64_t v35 = v30[2];
      unint64_t v36 = v30[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v35 >= v36 >> 1)
      {
        sub_100057F20((char *)(v36 > 1), v35 + 1, 1);
        unint64_t v30 = (void *)*v31;
      }

      v30[2] = v35 + 1;
      unint64_t v37 = &v30[3 * v35];
      v37[4] = v34;
      *(_OWORD *)(v37 + 5) = *(_OWORD *)log;
      v33 += 2;
      --v29;
    }

    while (v29);
  }

  v1[24] = v30;
  uint64_t v38 = v1[17];
  uint64_t ObjectType = swift_getObjectType(v1[16]);
  uint64_t v40 = *(int **)(v38 + 24);
  logb = (int *)((char *)v40 + *v40);
  uint64_t v41 = (void *)swift_task_alloc(v40[1]);
  v1[25] = v41;
  void *v41 = v1;
  v41[1] = sub_100049CEC;
  return ((uint64_t (*)(void *, uint64_t, uint64_t))logb)(v30, ObjectType, v38);
}

uint64_t sub_100049CEC()
{
  v0[26] = v1;
  swift_task_dealloc(v3);
  uint64_t v4 = v0[24];
  if (v1)
  {
    uint64_t v5 = v0[10];
    swift_bridgeObjectRelease(v4);
    sub_10000FFD8();
    uint64_t v6 = sub_100049FD0;
    uint64_t v7 = v5;
  }

  else
  {
    uint64_t v8 = v0[10];
    swift_bridgeObjectRelease(v4);
    uint64_t v6 = sub_100049D5C;
    uint64_t v7 = v8;
  }

  return sub_100020908((uint64_t)v6, v7, 0LL);
}

void sub_100049D5C()
{
  uint64_t v1 = qword_1000933B0;
  v0[27] = qword_1000933B0;
  if (v1)
  {
    int64_t v2 = v0[23];
    uint64_t v3 = v0[21];
    if (v2)
    {
      uint64_t v4 = v0 + 3;
      v0[3] = _swiftEmptyArrayStorage;
      sub_10001AA24();
      sub_100057F68(0LL, v2, 0);
      uint64_t v5 = 0LL;
      uint64_t v6 = (void *)v0[3];
      uint64_t v7 = (uint64_t *)(v3 + 32);
      unint64_t v8 = v6[2];
      do
      {
        uint64_t v10 = *v7;
        v7 += 4;
        uint64_t v9 = v10;
        *uint64_t v4 = v6;
        unint64_t v11 = v6[3];
        if (v8 >= v11 >> 1)
        {
          sub_100057F68((char *)(v11 > 1), v8 + 1, 1);
          uint64_t v6 = (void *)*v4;
        }

        uint64_t v12 = v0[23];
        ++v5;
        _OWORD v6[2] = v8 + 1;
        v6[v8++ + 4] = v9;
      }

      while (v5 != v12);
      swift_bridgeObjectRelease(v0[21]);
    }

    else
    {
      sub_10001AA24();
      sub_100006BBC();
      uint64_t v6 = _swiftEmptyArrayStorage;
    }

    v0[28] = v6;
    uint64_t v13 = (void *)swift_task_alloc(dword_10008B66C);
    v0[29] = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_100049E8C;
    sub_10002B560((uint64_t)v6);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100049E8C()
{
  v0[30] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    uint64_t v4 = v0[10];
    uint64_t v5 = sub_10004A05C;
  }

  else
  {
    uint64_t v6 = v0[28];
    uint64_t v7 = v0[10];
    swift_bridgeObjectRelease(v6);
    sub_10001020C();
    uint64_t v5 = sub_100049EF0;
    uint64_t v4 = v7;
  }

  return sub_100020908((uint64_t)v5, v4, 0LL);
}

void sub_100049EF0()
{
  if (qword_1000933B0)
  {
    *(void *)(v0 + 152) = qword_1000933B0;
    sub_100010324();
    uint64_t v1 = (void *)sub_10002F664();
    *(void *)(v0 + 16sub_100057EF4(0, v0, 0) = v1;
    uint64_t v2 = sub_10002F82C(v1, (uint64_t)sub_1000497F4);
    sub_10002B378(v2, v3, v4, v5);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100049F58()
{
  return sub_10001CC0C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100049F90()
{
  return sub_10001CC0C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100049FD0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 208);
  if ((static Task<>.isCancelled.getter(a1) & 1) != 0)
  {
    unint64_t v3 = sub_10004BC14();
    uint64_t v4 = sub_100006A70((uint64_t)&type metadata for SubmissionError, v3);
    sub_10004D2D4(v4, v5);
    sub_1000269C8();
  }

  else
  {
    unint64_t v6 = sub_10004BC14();
    sub_100006A70((uint64_t)&type metadata for SubmissionError, v6);
    *uint64_t v7 = v2;
    sub_100006AA4();
  }

  sub_10001AB80();
  sub_10004D5F0();
  sub_10001AB88();
  return sub_10004D148(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10004A05C()
{
  uint64_t v1 = sub_10001020C();
  uint64_t v2 = *(void *)(v0 + 240);
  if ((static Task<>.isCancelled.getter(v1) & 1) != 0)
  {
    unint64_t v3 = sub_10004BC14();
    uint64_t v4 = sub_100006A70((uint64_t)&type metadata for SubmissionError, v3);
    sub_10004D2D4(v4, v5);
    sub_1000269C8();
  }

  else
  {
    unint64_t v6 = sub_10004BC14();
    sub_100006A70((uint64_t)&type metadata for SubmissionError, v6);
    *uint64_t v7 = v2;
    sub_100006AA4();
  }

  sub_10001AB80();
  sub_10004D5F0();
  sub_10001AB88();
  return sub_10004D148(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004A0F4()
{
  v1[32] = v0;
  uint64_t v2 = sub_10000534C((uint64_t *)&unk_10008C4A0);
  v1[33] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v1[34] = *(void *)(type metadata accessor for CachedSession(0LL) - 8);
  v1[35] = sub_100026B60();
  v1[36] = sub_100026B60();
  v1[37] = sub_100026B60();
  v1[38] = sub_100026B60();
  v1[39] = sub_100026B60();
  v1[40] = sub_100026B60();
  v1[41] = sub_100026B60();
  v1[42] = sub_100026B60();
  sub_100026B34();
  return sub_100020908(v3, v4, v5);
}

uint64_t sub_10004A1A0()
{
  if (qword_10008A078 != -1) {
    swift_once(&qword_10008A078, sub_100049440);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000D34C(v1, (uint64_t)qword_100093398);
  *(void *)(v0 + 344) = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)sub_1000100B0(2LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "starting submission activity", v5, 2u);
    sub_100010010((uint64_t)v5);
  }

  uint64_t result = static Task<>.isCancelled.getter(v6);
  if ((result & 1) != 0)
  {
    uint64_t result = static Task<>.isCancelled.getter(result);
    if ((result & 1) != 0)
    {
      sub_10004D28C();
      sub_10004D130();
      sub_10001AB88();
      sub_10001AB08();
      sub_10001AB28();
      sub_10001AB38();
      sub_10001AAF0();
      sub_10001ABA8();
      sub_10001AB60();
      sub_10001AB90();
      return sub_10004D200(*(uint64_t (**)(void))(v0 + 8));
    }

    uint64_t v11 = qword_1000933B0;
    *(void *)(v0 + 536) = qword_1000933B0;
    if (v11)
    {
      sub_100010324();
      uint64_t v12 = (void *)sub_100026B60();
      *(void *)(v0 + 544) = v12;
      *uint64_t v12 = v0;
      v12[1] = sub_10004AC84;
      return sub_10002C2B8();
    }
  }

  else
  {
    uint64_t v8 = qword_1000933B0;
    *(void *)(v0 + 352) = qword_1000933B0;
    if (v8)
    {
      sub_100010324();
      uint64_t v9 = (void *)sub_100026B60();
      *(void *)(v0 + 36sub_100057EF4(0, v0, 0) = v9;
      uint64_t v10 = sub_10004D43C(v9, (uint64_t)sub_10004A34C);
      return sub_10002B0D0(v10);
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_10004A34C()
{
  v0[46] = v2;
  v0[47] = v1;
  sub_10001ACD0(v3);
  if (v1)
  {
    uint64_t v4 = v0[32];
    uint64_t v5 = sub_10004AD38;
  }

  else
  {
    uint64_t v6 = v0[32];
    swift_release(v0[44]);
    uint64_t v5 = (uint64_t (*)(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10004A3AC;
    uint64_t v4 = v6;
  }

  return sub_100020908((uint64_t)v5, v4, 0LL);
}

#error "10004A4D8: call analysis failed (funcsize=120)"
uint64_t sub_10004A5A0()
{
  void *v0;
  uint64_t v1;
  uint64_t v1 = v0[32];
  sub_1000239F0(v0[49], v0[50]);
  sub_10001020C();
  return sub_100020908((uint64_t)sub_10004A5E0, v1, 0LL);
}

void sub_10004A5E0()
{
  uint64_t v1 = qword_1000933B0;
  swift_bridgeObjectRetain();
  if (v1)
  {
    *(void *)(v0 + 424) = v1;
    sub_100010324();
    uint64_t v2 = (void *)sub_100026B60();
    *(void *)(v0 + 432) = v2;
    uint64_t v3 = sub_10004D234(v2, (uint64_t)sub_10004A638);
    sub_10004D15C(v3, v4, v5);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10004A638()
{
  uint64_t v2 = (void *)*v1;
  sub_10002F888();
  v2[55] = v3;
  v2[56] = v0;
  sub_10001ACD0(v4);
  if (v0)
  {
    uint64_t v5 = v2[46];
    uint64_t v6 = v2[32];
    swift_bridgeObjectRelease(v5);
    sub_10000FFD8();
    sub_100006C04();
    uint64_t v7 = sub_10004AE6C;
    uint64_t v8 = v6;
  }

  else
  {
    uint64_t v9 = v2[32];
    sub_100006C04();
    uint64_t v7 = sub_10004A6BC;
    uint64_t v8 = v9;
  }

  return sub_100026A04((uint64_t)v7, v8, 0LL);
}

uint64_t sub_10004A6BC(uint64_t a1)
{
  char v2 = static Task<>.isCancelled.getter(a1);
  uint64_t v3 = *(void *)(v1 + 440);
  if ((v2 & 1) != 0 || (uint64_t v4 = *(void *)(v3 + 16), (*(void *)(v1 + 456) = v4) == 0LL))
  {
    uint64_t result = swift_bridgeObjectRelease(v3);
    uint64_t v13 = qword_1000933C0;
    *(void *)(v1 + 528) = qword_1000933C0;
    if (v13)
    {
      sub_100010324();
      sub_100006AF0();
      sub_100026B34();
      return sub_100020908(v14, v15, v16);
    }

    __break(1u);
  }

  else
  {
    uint64_t v5 = *(void *)(v1 + 272);
    int v6 = *(_DWORD *)(v5 + 80);
    *(_DWORD *)(v1 + 56sub_100057EF4(0, v0, 0) = v6;
    *(void *)(v1 + 464) = *(void *)(v5 + 72);
    *(void *)(v1 + 472) = 0LL;
    sub_100034734( v3 + ((v6 + 32LL) & ~(unint64_t)v6),  *(void *)(v1 + 336),  type metadata accessor for CachedSession);
    if ((static Task<>.isCancelled.getter(v7) & 1) == 0)
    {
      uint64_t v17 = (void *)swift_task_alloc(dword_10008C154);
      *(void *)(v1 + 48sub_100057EF4(0, v0, 0) = v17;
      uint64_t v18 = sub_10004D424(v17, (uint64_t)sub_10004A7D8);
      return sub_10004D378(v18);
    }

    sub_100005FF0(*(void *)(v1 + 336), type metadata accessor for CachedSession);
    uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 440));
    if (qword_1000933B0)
    {
      *(void *)(v1 + 424) = qword_1000933B0;
      sub_100010324();
      uint64_t v9 = (void *)sub_100026B60();
      *(void *)(v1 + 432) = v9;
      uint64_t v10 = sub_10004D234(v9, (uint64_t)sub_10004A638);
      return sub_10004D15C(v10, v11, v12);
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10004A7D8()
{
  *(void *)(v0 + 488) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    uint64_t v4 = sub_10004AFCC;
  }
  else {
    uint64_t v4 = sub_10004A828;
  }
  return sub_100020908((uint64_t)v4, *(void *)(v0 + 256), 0LL);
}

void sub_10004A828()
{
  uint64_t v1 = qword_1000933B0;
  v0[62] = qword_1000933B0;
  if (v1)
  {
    v0[63] = *(void *)(v0[42] + 56LL);
    sub_100010324();
    swift_bridgeObjectRetain();
    char v2 = (void *)sub_10002F664();
    v0[64] = v2;
    uint64_t v3 = sub_10002F4C8(v2, (uint64_t)sub_10004A89C);
    sub_10002AB20(v3, v4);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10004A89C()
{
  uint64_t v13 = v2;
  uint64_t v14 = v3;
  uint64_t v12 = v1;
  uint64_t v12 = (void *)*v1;
  uint64_t v4 = v12;
  sub_100026B94(&v12);
  v4[65] = v0;
  swift_task_dealloc(v5);
  uint64_t v6 = v4[63];
  if (v0)
  {
    uint64_t v7 = v4[32];
    swift_bridgeObjectRelease(v6);
    sub_1000083D4();
    sub_10000FFD8();
    sub_100006BBC();
    sub_100006C04();
    uint64_t v8 = sub_10004B728;
    uint64_t v9 = v7;
  }

  else
  {
    uint64_t v10 = v4[32];
    swift_bridgeObjectRelease(v6);
    sub_100006C04();
    uint64_t v8 = sub_10004A940;
    uint64_t v9 = v10;
  }

  return swift_task_switch(v8, v9, 0LL);
}

uint64_t sub_10004A940()
{
  uint64_t v1 = *(void *)(v0 + 456);
  uint64_t v2 = *(void *)(v0 + 472) + 1LL;
  sub_100005FF0(*(void *)(v0 + 336), type metadata accessor for CachedSession);
  if (v2 != v1)
  {
    uint64_t v3 = *(void *)(v0 + 464);
    uint64_t v4 = *(void *)(v0 + 472) + 1LL;
    *(void *)(v0 + 472) = v4;
    sub_100034734( *(void *)(v0 + 440)
    + ((*(unsigned __int8 *)(v0 + 560) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 560))
    + v3 * v4,
      *(void *)(v0 + 336),
      type metadata accessor for CachedSession);
    if ((static Task<>.isCancelled.getter(v5) & 1) == 0)
    {
      uint64_t v11 = (void *)swift_task_alloc(dword_10008C154);
      *(void *)(v0 + 48sub_100057EF4(0, v0, 0) = v11;
      uint64_t v12 = sub_10004D424(v11, (uint64_t)sub_10004A7D8);
      return sub_10004D378(v12);
    }

    sub_100005FF0(*(void *)(v0 + 336), type metadata accessor for CachedSession);
  }

  uint64_t result = swift_bridgeObjectRelease(*(void *)(v0 + 440));
  if (qword_1000933B0)
  {
    *(void *)(v0 + 424) = qword_1000933B0;
    sub_100010324();
    uint64_t v7 = (void *)sub_100026B60();
    *(void *)(v0 + 432) = v7;
    uint64_t v8 = sub_10004D234(v7, (uint64_t)sub_10004A638);
    return sub_10004D15C(v8, v9, v10);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10004AA2C()
{
  uint64_t v1 = v0[32];
  sub_100023D2C(v0[49], v0[50], 0);
  sub_100006AF0();
  sub_10001020C();
  return sub_100026A04((uint64_t)sub_10004AA7C, v1, 0LL);
}

#error "10004ABB8: call analysis failed (funcsize=125)"
uint64_t sub_10004AC84()
{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  sub_100026A78();
  sub_100026B94(v2);
  v0[69] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    uint64_t v4 = v0[32];
    uint64_t v5 = (uint64_t (*)())sub_10004B898;
  }

  else
  {
    uint64_t v6 = v0[32];
    swift_release(v0[67]);
    uint64_t v5 = sub_10004ACE4;
    uint64_t v4 = v6;
  }

  return sub_100020908((uint64_t)v5, v4, 0LL);
}

uint64_t sub_10004ACE4()
{
  return sub_10004D200(*(uint64_t (**)(void))(v0 + 8));
}

#error "10004ADC8: call analysis failed (funcsize=75)"
uint64_t sub_10004AE6C()
{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  sub_10001AC9C();
  uint64_t v2 = *(void *)(v0 + 400);
  sub_10004D34C();
  uint64_t v3 = sub_10004D34C();
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v5 = static os_log_type_t.error.getter();
  if (sub_10003E440(v5))
  {
    uint64_t v17 = v2;
    uint64_t v6 = (uint8_t *)sub_1000100B0(12LL);
    uint64_t v18 = sub_1000100B0(32LL);
    sub_10004D2E4(4.8149e-34);
    uint64_t v7 = sub_10002F94C();
    uint64_t v11 = sub_100026A5C(v7, v8, v9, v10);
    sub_10004D294(v11);
    sub_10000FFD8();
    sub_100026B40();
    sub_100026B40();
    sub_10001AA70((void *)&_mh_execute_header, v4, v1, "error running submission: %s", v6);
    sub_10001AA68(v18);
    sub_100010010(v18);
    sub_100010010((uint64_t)v6);

    sub_100026B40();
    if (!v17) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  sub_100026B40();
  sub_100026B40();
  sub_100026B40();

  if (v2)
  {
LABEL_5:
    uint64_t v12 = sub_10004D604();
    sub_10001ABBC(v12);
    uint64_t v13 = (void *)sub_10004D5F8((uint64_t)&unk_100085768);
    uint64_t v14 = sub_10004D3B0(v13);
    uint64_t v15 = sub_10004D5A4(v14, (uint64_t)&unk_10008C200);
    swift_release(v15);
    sub_100006CAC();
  }

void sub_10004AFCC()
{
  uint64_t v1 = v0[61];
  v0[17] = v1;
  uint64_t v2 = v0 + 14;
  swift_errorRetain(v1);
  uint64_t v3 = sub_10000534C(&qword_10008A8A8);
  char v4 = swift_dynamicCast(v0 + 14, v0 + 17, v3, &type metadata for SubmissionError, 0LL);
  uint64_t v5 = (os_log_s *)v0[61];
  if ((v4 & 1) != 0)
  {
    sub_100026B40();
    unint64_t v6 = *v2;
    if (*v2)
    {
      if (v6 != 1)
      {
        sub_100034734(v0[42], v0[36], type metadata accessor for CachedSession);
        swift_errorRetain(v6);
        uint64_t v73 = swift_errorRetain(v6);
        Logger.logObject.getter(v73);
        os_log_type_t v74 = sub_10002F79C();
        if (sub_10004D3E4(v5))
        {
          uint64_t v75 = sub_1000100B0(22LL);
          uint64_t v97 = sub_1000100B0(64LL);
          *(_DWORD *)uint64_t v75 = 136446466;
          uint64_t v100 = v97;
          uint64_t v76 = sub_100010290();
          v0[19] = sub_10004D3C4(v76, v77, &v100);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 19, v0 + 20, v75 + 4);
          uint64_t v78 = sub_10001ABFC();
          sub_10004D264(v78, type metadata accessor for CachedSession);
          *(_WORD *)(v75 + 12) = 2082;
          swift_getErrorValue(v6, v0 + 20, v0 + 2);
          uint64_t v79 = Error.localizedDescription.getter(v0[3], v0[4]);
          v0[22] = sub_10004D4EC(v79, v80, v81, v82, v83, v84, v85, v86, v92, v93);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 22, v0 + 23, v75 + 14);
          sub_10000FFD8();
          sub_10004BC04(v6);
          sub_10004D41C();
          _os_log_impl( (void *)&_mh_execute_header,  v5,  v74,  "failed to send events for session %{public}s: %{public}s",  (uint8_t *)v75,  0x16u);
          sub_10004D598();
          sub_100010010(v97);
          sub_100010010(v75);

          sub_10004D41C();
        }

        else
        {
          unint64_t v87 = sub_10004D41C();
          sub_10004D264(v87, type metadata accessor for CachedSession);
          sub_10004BC04(v6);
          sub_10004D41C();
        }

        goto LABEL_18;
      }

      sub_100034734(v0[42], v0[41], type metadata accessor for CachedSession);
      uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
      os_log_type_t v9 = static os_log_type_t.error.getter();
      BOOL v10 = sub_10001AA3C(v9);
      if (!v10)
      {
        sub_10004D4D0(v10, type metadata accessor for CachedSession);
        goto LABEL_15;
      }

      uint64_t v11 = (uint8_t *)sub_1000100B0(12LL);
      uint64_t v12 = sub_1000100B0(32LL);
      uint64_t v100 = v12;
      *(_DWORD *)uint64_t v11 = 136446210;
      uint64_t v13 = sub_100010290();
      v0[27] = sub_10004D3C4(v13, v14, &v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 27, v0 + 28, v11 + 4);
      uint64_t v15 = sub_10001ABFC();
      sub_10004D4D0(v15, type metadata accessor for CachedSession);
      sub_10001AA70( (void *)&_mh_execute_header,  v8,  (os_log_type_t)((_BYTE)v0 - 104),  "submission activity cancelled while session %{public}s was in-flight; some events will not be sent",
        v11);
      sub_10001AA68(v12);
      sub_100010010(v12);
      uint64_t v16 = (uint64_t)v11;
    }

    else
    {
      char v99 = v0 + 23;
      uint64_t v37 = v0[42];
      uint64_t v38 = v0[39];
      uint64_t v40 = v0[37];
      uint64_t v39 = v0[38];
      sub_10004D4A8(v37, v0[40]);
      sub_10004D4A8(v37, v38);
      sub_10004D4A8(v37, v39);
      sub_10004D4A8(v37, v40);
      uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
      os_log_type_t v43 = static os_log_type_t.error.getter();
      BOOL v44 = os_log_type_enabled(v42, v43);
      uint64_t v46 = (uint64_t *)v0[39];
      uint64_t v45 = v0[40];
      uint64_t v47 = v0[37];
      uint64_t v48 = v0[38];
      if (!v44)
      {
        sub_10004D44C(v0[40]);
        sub_10004D44C((uint64_t)v46);
        sub_10004D44C(v48);
        sub_10004D44C(v47);

        goto LABEL_18;
      }

      uint64_t v94 = v0[37];
      uint64_t v49 = sub_1000100B0(42LL);
      uint64_t v96 = sub_1000100B0(128LL);
      uint64_t v100 = v96;
      *(_DWORD *)uint64_t v49 = 136446978;
      log = v42;
      uint64_t v51 = *(void *)(v45 + 48);
      unint64_t v50 = *(void *)(v45 + 56);
      swift_bridgeObjectRetain();
      *char v99 = sub_100019964(v51, v50, &v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v99, v0 + 24, v49 + 4);
      uint64_t v52 = sub_100006CAC();
      sub_10004D264(v52, type metadata accessor for CachedSession);
      *(_WORD *)(v49 + 12) = 2082;
      uint64_t v53 = *v46;
      unint64_t v54 = v46[1];
      swift_bridgeObjectRetain();
      v0[24] = sub_100019964(v53, v54, &v100);
      sub_10002F974((uint64_t)(v0 + 24), (uint64_t)(v0 + 25));
      swift_bridgeObjectRelease(v54);
      sub_10004D548((uint64_t)v46);
      *(_WORD *)(v49 + 22) = 2082;
      *(void *)&double v55 = swift_bridgeObjectRetain().n128_u64[0];
      v0[25] = sub_10004D484(v56, v57, v58, v59, v60, v61, v62, v63, v55);
      sub_10002F974((uint64_t)(v0 + 25), (uint64_t)(v0 + 26));
      sub_100006BBC();
      sub_10004D548(v48);
      *(_WORD *)(v49 + 32) = 2082;
      *(void *)&double v64 = swift_bridgeObjectRetain().n128_u64[0];
      v0[26] = sub_10004D484(v65, v66, v67, v68, v69, v70, v71, v72, v64);
      sub_10002F974((uint64_t)(v0 + 26), (uint64_t)(v0 + 27));
      sub_100006BBC();
      sub_10004D548(v94);
      uint64_t v8 = log;
      _os_log_impl( (void *)&_mh_execute_header,  log,  v43,  "no backend available for session %{public}s - %{public}s:%{public}s:%{public}s",  (uint8_t *)v49,  0x2Au);
      swift_arrayDestroy(v96, 4LL);
      sub_100010010(v96);
      uint64_t v16 = v49;
    }

    sub_100010010(v16);
LABEL_15:

LABEL_18:
    uint64_t v35 = v0[17];
    goto LABEL_19;
  }

  uint64_t v17 = v0[42];
  swift_errorRelease(v0[17]);
  sub_10004D4B0(v17, v18, type metadata accessor for CachedSession);
  sub_10004D34C();
  uint64_t v19 = sub_10004D34C();
  Logger.logObject.getter(v19);
  os_log_type_t v20 = sub_10002F79C();
  BOOL v21 = os_log_type_enabled(v5, v20);
  uint64_t v22 = v0[61];
  if (!v21)
  {
    uint64_t v36 = sub_10001AC6C();
    sub_10004D264(v36, type metadata accessor for CachedSession);
    sub_10001AC6C();
    sub_10001AC6C();

    goto LABEL_20;
  }

  uint64_t v23 = sub_1000100B0(22LL);
  uint64_t v98 = sub_1000100B0(64LL);
  uint64_t v100 = v98;
  *(_DWORD *)uint64_t v23 = 136446466;
  swift_bridgeObjectRetain();
  v0[15] = sub_10004D4C4(v24, v25, &v100);
  sub_10004D550((uint64_t)(v0 + 15));
  uint64_t v26 = sub_100010278();
  sub_10004D264(v26, type metadata accessor for CachedSession);
  *(_WORD *)(v23 + 12) = 2082;
  swift_getErrorValue(v22, v0 + 16, v0 + 11);
  uint64_t v27 = Error.localizedDescription.getter(v0[12], v0[13]);
  v0[18] = sub_10004D4EC(v27, v28, v29, v30, v31, v32, v33, v34, v92, v93);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v23 + 14);
  sub_10000FFD8();
  sub_10001AC6C();
  sub_10001AC6C();
  _os_log_impl( (void *)&_mh_execute_header,  v5,  v20,  "failed to process events for session %{public}s: %{public}s",  (uint8_t *)v23,  0x16u);
  sub_10004D598();
  sub_100010010(v98);
  sub_100010010(v23);

  uint64_t v35 = v22;
LABEL_19:
  swift_errorRelease(v35);
LABEL_20:
  uint64_t v88 = qword_1000933B0;
  v0[62] = qword_1000933B0;
  if (v88)
  {
    v0[63] = *(void *)(v0[42] + 56LL);
    sub_100010324();
    swift_bridgeObjectRetain();
    uint64_t v89 = (void *)sub_10002F664();
    v0[64] = v89;
    uint64_t v90 = sub_10002F4C8(v89, (uint64_t)sub_10004A89C);
    sub_10002AB20(v90, v91);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10004B728()
{
  uint64_t v2 = *(void *)(v0 + 400);
  sub_10004D34C();
  uint64_t v3 = sub_10004D34C();
  char v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (sub_10003E440(v5))
  {
    uint64_t v17 = v2;
    unint64_t v6 = (uint8_t *)sub_1000100B0(12LL);
    uint64_t v18 = sub_1000100B0(32LL);
    sub_10004D2E4(4.8149e-34);
    uint64_t v7 = sub_10002F94C();
    uint64_t v11 = sub_100026A5C(v7, v8, v9, v10);
    sub_10004D294(v11);
    sub_10000FFD8();
    sub_100026B40();
    sub_100026B40();
    sub_10001AA70((void *)&_mh_execute_header, v4, v1, "error running submission: %s", v6);
    sub_10001AA68(v18);
    sub_100010010(v18);
    sub_100010010((uint64_t)v6);

    sub_100026B40();
    if (!v17) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  sub_100026B40();
  sub_100026B40();
  sub_100026B40();

  if (v2)
  {
LABEL_5:
    uint64_t v12 = sub_10004D604();
    sub_10001ABBC(v12);
    uint64_t v13 = (void *)sub_10004D5F8((uint64_t)&unk_100085768);
    uint64_t v14 = sub_10004D3B0(v13);
    uint64_t v15 = sub_10004D5A4(v14, (uint64_t)&unk_10008C200);
    swift_release(v15);
    sub_100006CAC();
  }

#error "10004B938: call analysis failed (funcsize=81)"
uint64_t type metadata accessor for SubmitEventsActivity()
{
  return objc_opt_self(&OBJC_CLASS____TtC13rtcreportingd20SubmitEventsActivity);
}

uint64_t sub_10004BA04()
{
  os_log_type_t v1 = (void *)swift_task_alloc(dword_10008C15C);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10004D124;
  return sub_10004A0F4();
}

double sub_10004BA48()
{
  *(void *)&double result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

uint64_t sub_10004BA64()
{
  return 0x74696D627573LL;
}

unint64_t sub_10004BA78(uint64_t a1)
{
  unint64_t result = sub_10004BA9C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10004BA9C()
{
  unint64_t result = qword_10008C1F0;
  if (!qword_10008C1F0)
  {
    uint64_t v1 = type metadata accessor for SubmitEventsActivity();
    unint64_t result = swift_getWitnessTable(&unk_10006BE54, v1);
    atomic_store(result, &qword_10008C1F0);
  }

  return result;
}

uint64_t sub_10004BAD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_10004BAF0, 0LL, 0LL);
}

uint64_t sub_10004BAF0()
{
  uint64_t v1 = qword_1000933C0;
  *(void *)(v0 + 32) = qword_1000933C0;
  if (v1)
  {
    sub_100010324();
    sub_100026B34();
    return sub_10001A9C0();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10004BB30()
{
  return sub_10001ABB0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004BB64()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10004BB90()
{
  uint64_t v3 = v2;
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v7 = v0[4];
  uint64_t v6 = v0[5];
  unint64_t v8 = (void *)swift_task_alloc(dword_10008C1FC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v8;
  *unint64_t v8 = v1;
  v8[1] = sub_100028F58;
  return sub_10004BAD8(v3, v4, v5, v7, v6);
}

unint64_t sub_10004BC04(unint64_t result)
{
  if (result >= 2) {
    return swift_errorRelease(result);
  }
  return result;
}

unint64_t sub_10004BC14()
{
  unint64_t result = qword_10008C210;
  if (!qword_10008C210)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006BE8C, &type metadata for SubmissionError);
    atomic_store(result, (unint64_t *)&qword_10008C210);
  }

  return result;
}

uint64_t sub_10004BC50(uint64_t a1)
{
  uint64_t v2 = sub_10000534C(&qword_10008A800);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_10004BC90(uint64_t a1)
{
  unint64_t result = (void *)static _DictionaryStorage.copy(original:)(a1);
  uint64_t v3 = result;
  int64_t v4 = 0LL;
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v24 = a1 + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & v5;
  int64_t v25 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v9 = result + 8;
  if ((v7 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v10 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    uint64_t v18 = (__int128 *)(*(void *)(a1 + 56) + 48 * i);
    *(_OWORD *)uint64_t v26 = v18[1];
    *(_OWORD *)&v26[16] = v18[2];
    __int128 v27 = *v18;
    __int128 v28 = *(_OWORD *)&v26[8];
    uint64_t v29 = *(void *)&v26[24];
    swift_bridgeObjectRetain();
    sub_1000080FC((uint64_t)&v27);
    sub_1000080FC((uint64_t)&v28);
    sub_10000ECC4(&v29);
    Class v19 = sub_100035844();
    sub_1000082EC((uint64_t)&v27);
    sub_1000082EC((uint64_t)&v28);
    unint64_t result = sub_10000ECEC(&v29);
    *(void *)((char *)v9 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    os_log_type_t v20 = (void *)(v3[6] + 16 * i);
    void *v20 = v17;
    v20[1] = v16;
    *(void *)(v3[7] + 8 * i) = v19;
    uint64_t v21 = v3[2];
    BOOL v22 = __OFADD__(v21, 1LL);
    uint64_t v23 = v21 + 1;
    if (v22)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    v3[2] = v23;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      goto LABEL_24;
    }
    if (v12 >= v25) {
      return v3;
    }
    unint64_t v13 = *(void *)(v24 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v25) {
        return v3;
      }
      unint64_t v13 = *(void *)(v24 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v25) {
          return v3;
        }
        unint64_t v13 = *(void *)(v24 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }

uint64_t sub_10004BEE8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a2;
  uint64_t v5 = type metadata accessor for CachedSession(0LL);
  uint64_t v6 = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v2 + 24) = v6;
  sub_100034734(a1, v6, type metadata accessor for CachedSession);
  return swift_task_switch(sub_10004BF68, a2, 0LL);
}

uint64_t sub_10004BF68()
{
  uint64_t v1 = sub_10004D5B0();
  uint64_t v3 = v2;
  uint64_t v4 = sub_100006AF0();
  *(void *)(v0 + 32) = v3;
  if (v3)
  {
    uint64_t v5 = *(void *)(v0 + 16);
    *(void *)(v0 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v1;
    uint64_t v6 = *(void *)(v5 + 128);
    *(void *)(v0 + 48) = v6;
    return sub_100026A04((uint64_t)sub_10004BFF8, v6, 0LL);
  }

  else
  {
    sub_10004D264(v4, type metadata accessor for CachedSession);
    sub_10001AB88();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(3LL);
  }

uint64_t sub_10004BFF8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(_BYTE *)(v0 + 64) = sub_100060A1C() & 1;
  sub_100006AF0();
  return sub_100026A04((uint64_t)sub_10004C048, v1, 0LL);
}

uint64_t sub_10004C048(uint64_t a1)
{
  if ((*(_BYTE *)(v1 + 64) & 1) != 0)
  {
    sub_10004D264(a1, type metadata accessor for CachedSession);
    sub_10001AB88();
    return (*(uint64_t (**)(uint64_t))(v1 + 8))(3LL);
  }

  else
  {
    uint64_t v3 = (void *)swift_task_alloc(dword_10008AD4C);
    *(void *)(v1 + 56) = v3;
    *uint64_t v3 = v1;
    v3[1] = sub_10004C0BC;
    return sub_10004D354();
  }

uint64_t sub_10004C0BC()
{
  *(_BYTE *)(v1 + 65) = v0;
  sub_10001ACD0(v2);
  sub_100026B34();
  return sub_10001A9C0();
}

uint64_t sub_10004C0FC(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 *)(v1 + 65);
  sub_10004D264(a1, type metadata accessor for CachedSession);
  sub_10001AB88();
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v2);
}

uint64_t sub_10004C140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v41 = a3;
  type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
  sub_100006B54();
  uint64_t v12 = __chkstk_darwin(v11);
  int64_t v14 = (uint64_t *)((char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v40 - v15;
  uint64_t v17 = type metadata accessor for SessionConfiguration.Backend(0LL);
  sub_100006B54();
  __chkstk_darwin(v18);
  sub_100006B64();
  uint64_t v21 = v20 - v19;
  v43[3] = sub_10004D55C();
  v43[4] = &off_100085968;
  v43[0] = a1;
  sub_100034734(a2, v21, type metadata accessor for SessionConfiguration.Backend);
  if (swift_getEnumCaseMultiPayload(v21, v17) == 1)
  {
    __int128 v22 = *(_OWORD *)(v21 + 16);
    __int128 v44 = *(_OWORD *)v21;
    __int128 v45 = v22;
    uint64_t v46 = *(void *)(v21 + 32);
    sub_10004CEA0((uint64_t)v43, (uint64_t)v42);
    uint64_t v23 = type metadata accessor for BackendTTR();
    uint64_t v24 = (void *)sub_10003E3BC(v23, 168LL);
    uint64_t v25 = sub_1000347FC((uint64_t)v42, v42[3]);
    __chkstk_darwin(v25);
    sub_100006B64();
    __int128 v28 = (uint64_t *)(v27 - v26);
    (*(void (**)(uint64_t))(v29 + 16))(v27 - v26);
    uint64_t v30 = *v28;
    swift_retain(a1);
    uint64_t v31 = (uint64_t)sub_10004CCB0(&v44, v30, v24);
    sub_100005F54(v42);
  }

  else
  {
    sub_10003499C(v21, (uint64_t)v16, type metadata accessor for SessionConfiguration.BackendHTTP);
    sub_10004CEA0((uint64_t)v43, (uint64_t)&v44);
    sub_100034734((uint64_t)v16, (uint64_t)v14, type metadata accessor for SessionConfiguration.BackendHTTP);
    swift_retain(a1);
    sub_100010324();
    sub_1000083B8();
    sub_10002FBA8(a5 & 1, v42);
    uint64_t v32 = type metadata accessor for BackendHTTP(0LL);
    uint64_t v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    uint64_t v34 = sub_1000347FC((uint64_t)&v44, *((uint64_t *)&v45 + 1));
    __chkstk_darwin(v34);
    sub_100006B64();
    uint64_t v37 = (void **)(v36 - v35);
    (*(void (**)(uint64_t))(v38 + 16))(v36 - v35);
    uint64_t v31 = sub_10004C710(*v37, a6, v14, v41, a4, (uint64_t)v42, v33);
    sub_100005F54(&v44);
    sub_100005FF0((uint64_t)v16, type metadata accessor for SessionConfiguration.BackendHTTP);
  }

  sub_100005F54(v43);
  return v31;
}

uint64_t sub_10004C404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  int v37 = a5;
  uint64_t v38 = a3;
  uint64_t v10 = type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = &v36[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v11);
  uint64_t v15 = &v36[-v14];
  uint64_t v16 = type metadata accessor for SessionConfiguration.Backend(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = &v36[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  v40[3] = type metadata accessor for CachedSession(0LL);
  v40[4] = &off_100085910;
  uint64_t v19 = sub_10000EDB4(v40);
  sub_100034734(a1, (uint64_t)v19, type metadata accessor for CachedSession);
  sub_100034734(a2, (uint64_t)v18, type metadata accessor for SessionConfiguration.Backend);
  if (swift_getEnumCaseMultiPayload(v18, v16) == 1)
  {
    __int128 v20 = *((_OWORD *)v18 + 1);
    __int128 v41 = *(_OWORD *)v18;
    __int128 v42 = v20;
    uint64_t v43 = *((void *)v18 + 4);
    sub_10004CEA0((uint64_t)v40, (uint64_t)v39);
    uint64_t v21 = type metadata accessor for BackendTTR();
    __int128 v22 = (void *)swift_allocObject(v21, 168LL, 15LL);
    uint64_t v23 = sub_1000347FC((uint64_t)v39, v39[3]);
    __chkstk_darwin(v23);
    uint64_t v25 = &v36[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
    (*(void (**)(_BYTE *))(v26 + 16))(v25);
    uint64_t v27 = (uint64_t)sub_10004CD80(&v41, (uint64_t)v25, v22);
    sub_100005F54(v39);
  }

  else
  {
    sub_10003499C((uint64_t)v18, (uint64_t)v15, type metadata accessor for SessionConfiguration.BackendHTTP);
    sub_10004CEA0((uint64_t)v40, (uint64_t)&v41);
    sub_100034734((uint64_t)v15, (uint64_t)v13, type metadata accessor for SessionConfiguration.BackendHTTP);
    swift_retain(a6);
    uint64_t v28 = a4;
    swift_bridgeObjectRetain();
    sub_10002FBA8(v37 & 1, v39);
    uint64_t v29 = type metadata accessor for BackendHTTP(0LL);
    uint64_t v30 = swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    uint64_t v31 = sub_1000347FC((uint64_t)&v41, *((uint64_t *)&v42 + 1));
    __chkstk_darwin(v31);
    uint64_t v33 = &v36[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
    (*(void (**)(_BYTE *))(v34 + 16))(v33);
    uint64_t v27 = sub_10004C9B8((uint64_t)v33, a6, v13, v38, v28, v39, v30);
    sub_100005F54(&v41);
    sub_100005FF0((uint64_t)v15, type metadata accessor for SessionConfiguration.BackendHTTP);
  }

  sub_100005F54(v40);
  return v27;
}

uint64_t sub_10004C710(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_clientID);
  *uint64_t v14 = a4;
  v14[1] = a5;
  *(void *)(a7 + 112) = a2;
  uint64_t v15 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
  uint64_t v16 = (char *)a3 + v15[6];
  uint64_t v17 = a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_url;
  uint64_t v18 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 16LL))(v17, v16, v18);
  uint64_t v36 = (void *)a6;
  sub_10004CEA0(a6, a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_target);
  uint64_t v19 = a1[15];
  uint64_t v20 = a1[25];
  uint64_t v34 = a1[24];
  uint64_t v35 = a1[14];
  uint64_t v21 = a1[27];
  uint64_t v22 = a1[29];
  uint64_t v32 = a1[28];
  uint64_t v33 = a1[26];
  char v31 = *((_BYTE *)a3 + v15[8]);
  uint64_t v23 = qword_10008A080;
  swift_retain(a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v23 != -1) {
    swift_once(&qword_10008A080, sub_10004D6A0);
  }
  if (byte_1000933D8 == 1)
  {
    if (qword_10008A098 != -1) {
      swift_once(&qword_10008A098, sub_10004D7A8);
    }
    int v24 = byte_1000933E9;
    swift_release(a2);
    if (v24) {
      uint64_t v25 = 5LL;
    }
    else {
      uint64_t v25 = 1LL;
    }
  }

  else
  {
    swift_release(a2);
    uint64_t v25 = 0LL;
  }

  sub_100005F54(v36);
  uint64_t v26 = a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_extraHeaders;
  *(void *)uint64_t v26 = v25;
  *(void *)(v26 + 8) = v34;
  *(void *)(v26 + swift_weakDestroy(v0 + 16) = v20;
  *(void *)(v26 + 24) = v33;
  *(void *)(v26 + 32) = v21;
  *(void *)(v26 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v32;
  *(void *)(v26 + 48) = v22;
  *(_BYTE *)(v26 + 56) = v31;
  *(void *)(v26 + 64) = v35;
  *(void *)(v26 + 72) = v19;
  *(void *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_filters) = *(void *)((char *)a3 + v15[7]);
  uint64_t v27 = a3[1];
  uint64_t v28 = (void *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_name);
  *uint64_t v28 = *a3;
  v28[1] = v27;
  *(void *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_allowedCategories) = *(void *)((char *)a3 + v15[9]);
  *(void *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_deniedCategories) = *(void *)((char *)a3 + v15[10]);
  char v29 = *((_BYTE *)a3 + v15[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100005FF0((uint64_t)a3, type metadata accessor for SessionConfiguration.BackendHTTP);
  *(_BYTE *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_skipLogging) = v29;
  swift_release(a1);
  return a7;
}

uint64_t sub_10004C9B8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for CachedSession(0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (uint64_t *)((char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10003499C(a1, (uint64_t)v16, v17);
  swift_defaultActor_initialize(a7);
  uint64_t v18 = (void *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_clientID);
  *uint64_t v18 = a4;
  v18[1] = a5;
  *(void *)(a7 + 112) = a2;
  uint64_t v19 = (int *)type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
  uint64_t v20 = (char *)a3 + v19[6];
  uint64_t v21 = a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_url;
  uint64_t v22 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v22 - 8) + 16LL))(v21, v20, v22);
  __int128 v45 = a6;
  sub_10004CEA0((uint64_t)a6, a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_target);
  uint64_t v23 = v16[6];
  uint64_t v24 = v16[7];
  uint64_t v25 = v16[1];
  uint64_t v43 = *v16;
  uint64_t v44 = v23;
  uint64_t v26 = v16[2];
  uint64_t v27 = v16[3];
  uint64_t v28 = v16[5];
  uint64_t v41 = v16[4];
  uint64_t v42 = v26;
  HIDWORD(v4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = *((unsigned __int8 *)a3 + v19[8]);
  uint64_t v29 = qword_10008A080;
  swift_retain(a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v29 != -1) {
    swift_once(&qword_10008A080, sub_10004D6A0);
  }
  if (byte_1000933D8 == 1)
  {
    if (qword_10008A098 != -1) {
      swift_once(&qword_10008A098, sub_10004D7A8);
    }
    int v30 = byte_1000933E9;
    swift_release(a2);
    if (v30) {
      uint64_t v31 = 5LL;
    }
    else {
      uint64_t v31 = 1LL;
    }
  }

  else
  {
    swift_release(a2);
    uint64_t v31 = 0LL;
  }

  sub_100005F54(v45);
  uint64_t v32 = a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_extraHeaders;
  uint64_t v33 = v43;
  *(void *)uint64_t v32 = v31;
  *(void *)(v32 + 8) = v33;
  uint64_t v34 = v42;
  *(void *)(v32 + swift_weakDestroy(v0 + 16) = v25;
  *(void *)(v32 + 24) = v34;
  uint64_t v35 = v41;
  *(void *)(v32 + 32) = v27;
  *(void *)(v32 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v35;
  *(void *)(v32 + 48) = v28;
  *(_BYTE *)(v32 + 56) = BYTE4(v40);
  *(void *)(v32 + 64) = v44;
  *(void *)(v32 + 72) = v24;
  *(void *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_filters) = *(void *)((char *)a3 + v19[7]);
  uint64_t v36 = a3[1];
  int v37 = (void *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_name);
  void *v37 = *a3;
  v37[1] = v36;
  *(void *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_allowedCategories) = *(void *)((char *)a3 + v19[9]);
  *(void *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_deniedCategories) = *(void *)((char *)a3 + v19[10]);
  char v38 = *((_BYTE *)a3 + v19[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100005FF0((uint64_t)a3, type metadata accessor for SessionConfiguration.BackendHTTP);
  *(_BYTE *)(a7 + OBJC_IVAR____TtC13rtcreportingd11BackendHTTP_skipLogging) = v38;
  sub_100005FF0((uint64_t)v16, type metadata accessor for CachedSession);
  return a7;
}

void *sub_10004CCB0(void *a1, uint64_t a2, void *a3)
{
  uint64_t v7 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v15 = a1[4];
  uint64_t v8 = v15;
  uint64_t v16 = v6;
  a3[14] = v6;
  a3[15] = v8;
  uint64_t v14 = v7;
  sub_10000ECC4(&v16);
  sub_10000ECC4(&v15);
  uint64_t v9 = sub_10004BC90(v7);
  uint64_t v10 = a1[1];
  a3[18] = v9;
  a3[19] = v10;
  sub_10000ECEC(&v14);
  sub_10000ECEC(&v16);
  sub_10000ECEC(&v15);
  uint64_t v11 = *(void *)(a2 + 200);
  a3[16] = *(void *)(a2 + 192);
  a3[17] = v11;
  uint64_t v12 = qword_10008A080;
  swift_bridgeObjectRetain();
  if (v12 != -1) {
    swift_once(&qword_10008A080, sub_10004D6A0);
  }
  a3[20] = 0LL;
  swift_release(a2);
  return a3;
}

void *sub_10004CD80(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for CachedSession(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10003499C(a2, (uint64_t)v8, v9);
  swift_defaultActor_initialize(a3);
  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v20 = a1[4];
  uint64_t v12 = v20;
  uint64_t v21 = v10;
  a3[14] = v10;
  a3[15] = v12;
  uint64_t v19 = v11;
  sub_10000ECC4(&v21);
  sub_10000ECC4(&v20);
  uint64_t v13 = sub_10004BC90(v11);
  uint64_t v14 = a1[1];
  a3[18] = v13;
  a3[19] = v14;
  sub_10000ECEC(&v19);
  sub_10000ECEC(&v21);
  sub_10000ECEC(&v20);
  uint64_t v15 = v8[1];
  a3[16] = *v8;
  a3[17] = v15;
  uint64_t v16 = qword_10008A080;
  swift_bridgeObjectRetain();
  if (v16 != -1) {
    swift_once(&qword_10008A080, sub_10004D6A0);
  }
  a3[20] = 0LL;
  sub_100005FF0((uint64_t)v8, type metadata accessor for CachedSession);
  return a3;
}

void sub_10004CEA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_100006B44();
}

void *initializeBufferWithCopyOfBuffer for SubmissionError(void *a1, void *a2)
{
  uint64_t v3 = *a2;
  if (*a2 >= 0xFFFFFFFFuLL) {
    swift_errorRetain(*a2);
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for SubmissionError(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_errorRelease(result);
  }
  return result;
}

unint64_t *assignWithCopy for SubmissionError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF) {
      swift_errorRetain(*a2);
    }
    *a1 = v4;
  }

  else if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
    *a1 = *a2;
  }

  else
  {
    swift_errorRetain(*a2);
    unint64_t v5 = *a1;
    *a1 = v4;
    swift_errorRelease(v5);
  }

  return a1;
}

void *initializeWithTake for SubmissionError(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for SubmissionError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
LABEL_6:
    *a1 = v4;
    return a1;
  }

  *a1 = v4;
  swift_errorRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubmissionError(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for SubmissionError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }

  return result;
}

uint64_t sub_10004D0DC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (v1 + 1);
}

void *sub_10004D0F4(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }

  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }

  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for SubmissionError()
{
  return &type metadata for SubmissionError;
}

uint64_t sub_10004D130()
{
  return swift_task_dealloc(*(void *)(v0 + 336));
}

uint64_t sub_10004D148(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10004D15C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10002AF20(a1, a2, a3);
}

uint64_t sub_10004D168(uint64_t a1)
{
  return sub_10002B0D0(a1);
}

uint64_t sub_10004D184()
{
  return sub_10002C2B8();
}

uint64_t sub_10004D1A0(uint64_t a1)
{
  return sub_10002FD00(a1);
}

uint64_t sub_10004D1BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void sub_10004D1D8(void *a1, os_log_s *a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_10004D1E8(uint64_t a1)
{
  return sub_10002FD00(a1);
}

uint64_t sub_10004D200(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10004D218(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_10004D22C()
{
  return sub_1000082EC(v0);
}

uint64_t sub_10004D234@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 392);
}

  ;
}

void sub_10004D264(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_10004D26C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10004D27C(uint64_t a1, uint64_t a2)
{
  return sub_10001C348(a1, a2);
}

uint64_t sub_10004D28C()
{
  return swift_bridgeObjectRelease(0LL);
}

uint64_t sub_10004D294(uint64_t a1)
{
  *(void *)(v2 + 232) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 232, v2 + 240, v1);
}

void sub_10004D2B0()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_10004D2D4(uint64_t a1, void *a2)
{
  *a2 = 1LL;
  return swift_willThrow();
}

uint64_t sub_10004D2E4(float a1)
{
  *uint64_t v3 = a1;
  return swift_getErrorValue(v2, v1, v4);
}

void sub_10004D300()
{
  *(void *)(v1 - 8) = *v0;
}

void sub_10004D324()
{
}

void *sub_10004D33C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *unint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_10004D34C()
{
  return swift_errorRetain(v0);
}

uint64_t sub_10004D354()
{
  return sub_10001BDBC();
}

uint64_t sub_10004D360( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v10 + 248) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a10, v12, v11);
}

uint64_t sub_10004D378(uint64_t a1)
{
  return sub_1000494B0(a1);
}

uint64_t sub_10004D384@<X0>(uint64_t a1@<X8>)
{
  v3[50] = v1;
  v3[51] = a1;
  v3[49] = v2;
  return swift_bridgeObjectRetain_n(v1, 2LL);
}

uint64_t sub_10004D39C@<X0>(uint64_t a1@<X8>)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a1 + 8, v1);
}

uint64_t sub_10004D3B0(void *a1)
{
  a1[2] = 0LL;
  a1[3] = 0LL;
  a1[4] = v2;
  a1[5] = v1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_10004D3C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100019964(v3, v4, a3);
}

uint64_t sub_10004D3D0@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

BOOL sub_10004D3E4(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

void sub_10004D3EC()
{
  *(void *)(v1 - 8) = *v0;
}

void sub_10004D3FC()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_10004D40C()
{
  return sub_1000082EC(v0);
}

uint64_t sub_10004D414()
{
  return sub_1000080FC(v0);
}

unint64_t sub_10004D41C()
{
  return sub_10004BC04(v0);
}

uint64_t sub_10004D424@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 336);
}

uint64_t sub_10004D43C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return 50LL;
}

void sub_10004D44C(uint64_t a1)
{
}

uint64_t sub_10004D454(uint64_t a1, uint64_t a2, ...)
{
  return sub_100019964(v3, v2, (uint64_t *)va);
}

uint64_t sub_10004D464@<X0>(uint64_t a1@<X8>)
{
  return v2 + ((v1 + 32) & ~v1) + *(void *)(v3 + 72) * a1;
}

void sub_10004D47C(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_10004D484( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return sub_100019964(v8, v9, (uint64_t *)va);
}

  ;
}

void sub_10004D4A8(uint64_t a1, uint64_t a2)
{
}

void sub_10004D4B0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

void sub_10004D4B8()
{
}

uint64_t sub_10004D4C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100019964(v3, v4, a3);
}

void sub_10004D4D0(uint64_t a1, uint64_t (*a2)(void))
{
}

__n128 sub_10004D4D8(__n128 a1)
{
  __n128 *v1 = a1;
  __n128 result = *(__n128 *)(v2 + 32);
  __int128 v6 = *(_OWORD *)(v2 + 48);
  *uint64_t v3 = result;
  *unint64_t v4 = v6;
  return result;
}

uint64_t sub_10004D4EC( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return sub_100019964(a1, a2, (uint64_t *)va);
}

uint64_t sub_10004D4F8()
{
  return swift_task_dealloc(*(void *)(v0 + 272));
}

uint64_t sub_10004D504@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t sub_10004D518()
{
  return v0;
}

uint64_t sub_10004D52C()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

uint64_t sub_10004D538()
{
  return swift_release(*(void *)(v0 + 112));
}

uint64_t sub_10004D540()
{
  return swift_task_dealloc(*(void *)(v0 + 256));
}

void sub_10004D548(uint64_t a1)
{
}

uint64_t sub_10004D550(uint64_t a1)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v1, v2);
}

uint64_t sub_10004D55C()
{
  return type metadata accessor for Session(0LL);
}

void sub_10004D564()
{
  *(void *)(v0 + 208) = **(void **)(v0 + 216);
}

uint64_t sub_10004D578()
{
  uint64_t result = *(void *)(v3 + 248);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  uint64_t v7 = v1 + 16 * v5;
  *(void *)(v7 + 32) = v0;
  *(void *)(v7 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v2;
  return result;
}

uint64_t sub_10004D58C(uint64_t a1)
{
  return swift_getErrorValue(a1, v1, v2);
}

uint64_t sub_10004D598()
{
  return swift_arrayDestroy(v0, 2LL);
}

uint64_t sub_10004D5A4(uint64_t a1, uint64_t a2)
{
  return sub_100016914(v3, a2, v2);
}

uint64_t sub_10004D5B0()
{
  return sub_10001AE38(v1, v0);
}

uint64_t sub_10004D5BC()
{
  return 0LL;
}

uint64_t sub_10004D5D0()
{
  return v0;
}

uint64_t sub_10004D5E4()
{
  return swift_release(*(void *)(v0 + 224));
}

uint64_t sub_10004D5F0()
{
  return swift_task_dealloc(*(void *)(v0 + 96));
}

uint64_t sub_10004D5F8(uint64_t a1)
{
  return swift_allocObject(a1, 48LL, 7LL);
}

uint64_t sub_10004D604()
{
  return type metadata accessor for TaskPriority(0LL);
}

uint64_t sub_10004D610()
{
  return swift_task_dealloc(*(void *)(v0 + 96));
}

BOOL sub_10004D618()
{
  id v0 = [objc_allocWithZone(MCRestrictionManager) init];
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureAppAndAccessoryAnalyticsAllowed);
  if (sub_10004F194(v1, v2, v0) == 1)
  {

    return 1LL;
  }

  else
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureAppAnalyticsAllowed);
    unsigned int v6 = sub_10004F194(v4, v5, v0);

    return v6 == 1;
  }

uint64_t sub_10004D6A0()
{
  uint64_t result = os_variant_has_internal_diagnostics("com.apple.rtcreporting");
  byte_1000933D8 = result;
  return result;
}

id sub_10004D6C4()
{
  id v0 = objc_allocWithZone(&OBJC_CLASS___NSUserDefaults);
  id result = sub_10004F134(0xD000000000000016LL, 0x800000010006F150LL);
  if (result) {
    qword_1000933E0 = (uint64_t)result;
  }
  else {
    __break(1u);
  }
  return result;
}

void sub_10004D718()
{
  if (qword_10008A088 != -1) {
    swift_once(&qword_10008A088, sub_10004D6C4);
  }
  id v0 = (id)qword_1000933E0;
  NSString v1 = String._bridgeToObjectiveC()();
  unsigned __int8 v2 = sub_10004F454((uint64_t)v1, "BOOLForKey:");

  byte_1000933E8 = v2;
  sub_100006C40();
}

void sub_10004D7A8()
{
  if (qword_10008A088 != -1) {
    swift_once(&qword_10008A088, sub_10004D6C4);
  }
  id v0 = (id)qword_1000933E0;
  NSString v1 = String._bridgeToObjectiveC()();
  unsigned __int8 v2 = sub_10004F454((uint64_t)v1, "BOOLForKey:");

  if ((v2 & 1) != 0)
  {
    BOOL v3 = 1;
  }

  else
  {
    id v4 = (id)qword_1000933E0;
    NSString v5 = sub_10004F368();
    id v6 = [v4 integerForKey:v5];

    BOOL v3 = v6 == (id)5;
  }

  byte_1000933E9 = v3;
  sub_100006C40();
}

void sub_10004D880()
{
  if (qword_10008A080 != -1) {
    swift_once(&qword_10008A080, sub_10004D6A0);
  }
  if (byte_1000933D8 == 1)
  {
    if (qword_10008A088 != -1) {
      swift_once(&qword_10008A088, sub_10004D6C4);
    }
    id v0 = (id)qword_1000933E0;
    NSString v1 = String._bridgeToObjectiveC()();
    unsigned __int8 v2 = [v0 BOOLForKey:v1];
  }

  else
  {
    unsigned __int8 v2 = 0;
  }

  byte_1000933EA = v2;
  sub_100006C40();
}

void sub_10004D958()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  BOOL v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_10000534C((uint64_t *)&unk_10008C4A0);
  __chkstk_darwin(v4);
  id v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NSString v7 = String._bridgeToObjectiveC()();
  _CFPreferencesSetBackupDisabled(v7, kCFPreferencesCurrentUser, kCFPreferencesAnyHost, 0LL, 1LL);

  uint64_t v8 = type metadata accessor for TaskPriority(0LL);
  _s10RTCUtility9XPCObjectOwst_0((uint64_t)v6, 1LL, 1LL, v8);
  type metadata accessor for MainActor(0LL);
  uint64_t v9 = static MainActor.shared.getter();
  uint64_t v10 = swift_allocObject(&unk_100085868, 32LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v9;
  *(void *)(v10 + 24) = &protocol witness table for MainActor;
  uint64_t v11 = sub_10004FDF8((uint64_t)v6, (uint64_t)&unk_10008C250, v10);
  swift_release(v11);
  uint64_t v46 = &_swiftEmptySetSingleton;
  if (qword_10008A090 != -1) {
    swift_once(&qword_10008A090, sub_10004D718);
  }
  if (byte_1000933E8 == 1)
  {
    sub_100042BE4((uint64_t *)&v44, 0xD000000000000011LL, 0x800000010006F130LL);
    sub_10004F3D0();
  }

  if (qword_10008A088 != -1) {
    swift_once(&qword_10008A088, sub_10004D6C4);
  }
  id v12 = sub_10004F480();
  NSString v13 = String._bridgeToObjectiveC()();
  unsigned int v14 = [v12 BOOLForKey:v13];

  if (v14)
  {
    sub_100042BE4((uint64_t *)&v44, 0x50656C6261736964LL, 0xEB0000000054534FLL);
    sub_10004F3D0();
  }

  id v15 = sub_10004F480();
  NSString v16 = sub_10004F368();
  id v17 = sub_10004F410();

  if (v17)
  {
    sub_10004F4B8();
    swift_unknownObjectRelease(v17);
    sub_10004F43C();
    sub_10004F3F0(0xD000000000000013LL, (uint64_t)"environmentOverride");
    sub_10004F3D0();
  }

  else
  {
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    sub_10004F43C();
  }

  if (qword_10008A098 != -1) {
    swift_once(&qword_10008A098, sub_10004D7A8);
  }
  if (byte_1000933E9 == 1)
  {
    sub_100042BE4((uint64_t *)&v44, 0x6976654474736574LL, 0xEA00000000006563LL);
    sub_10004F3D0();
  }

  id v18 = sub_10004F480();
  NSString v19 = String._bridgeToObjectiveC()();
  id v20 = sub_10004F410();

  if (v20)
  {
    sub_10004F4B8();
    swift_unknownObjectRelease(v20);
    sub_10004F43C();
    sub_100042BE4((uint64_t *)&v44, 0x436465776F6C6C61LL, 0xEE0073746E65696CLL);
    sub_10004F3D0();
  }

  else
  {
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    sub_10004F43C();
  }

  if (qword_10008A0A0 != -1) {
    swift_once(&qword_10008A0A0, sub_10004D880);
  }
  if (byte_1000933EA == 1)
  {
    sub_10004F3F0(0xD000000000000014LL, (uint64_t)"ignoreCacheSizeLimit");
    sub_10004F3D0();
  }

  sub_10004F478();
  uint64_t v21 = v46;
  swift_bridgeObjectRetain_n(v46, 2LL);
  uint64_t v22 = (os_log_s *)sub_10001ACE4();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (_DWORD *)sub_1000100B0(12LL);
    uint64_t v25 = sub_1000100B0(32LL);
    uint64_t v43 = v25;
    *uint64_t v24 = 136315138;
    if (v21[2])
    {
      *(void *)&__int128 v44 = 0x6769666E6F632820LL;
      *((void *)&v44 + 1) = 0xEA0000000000203ALL;
      uint64_t v42 = v21;
      swift_bridgeObjectRetain();
      uint64_t v28 = sub_10000534C(&qword_10008C258);
      unint64_t v29 = sub_10004F274();
      uint64_t v41 = v3;
      uint64_t v30 = v0;
      uint64_t v31 = v1;
      unint64_t v32 = v29;
      unint64_t v33 = sub_10000E944();
      uint64_t v34 = Sequence<>.joined(separator:)(44LL, 0xE100000000000000LL, v28, v32, v33);
      uint64_t v36 = v35;
      swift_bridgeObjectRelease(v21);
      v37._uint64_t countAndFlagsBits = v34;
      v37._object = v36;
      String.append(_:)(v37);
      char v38 = v36;
      uint64_t v1 = v31;
      uint64_t v0 = v30;
      BOOL v3 = v41;
      swift_bridgeObjectRelease(v38);
      v39._uint64_t countAndFlagsBits = 41LL;
      v39._object = (void *)0xE100000000000000LL;
      String.append(_:)(v39);
      unint64_t v27 = *((void *)&v44 + 1);
      uint64_t v26 = v44;
    }

    else
    {
      uint64_t v26 = 0LL;
      unint64_t v27 = 0xE000000000000000LL;
    }

    *(void *)&__int128 v44 = sub_100019964(v26, v27, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, (char *)&v44 + 8, v24 + 1);
    sub_10004F46C();
    sub_10000FFD8();
    sub_10004F3D8((void *)&_mh_execute_header, v22, v23, "starting rtcreportingd%s");
    sub_10004F420();
    sub_100010010(v25);
    sub_100010010((uint64_t)v24);
  }

  else
  {

    sub_10004F46C();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  dispatch_main();
}

uint64_t sub_10004DF0C()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  void v0[9] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[10] = v2;
  unint64_t v3 = (*(void *)(v2 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v0[11] = swift_task_alloc(v3);
  v0[12] = swift_task_alloc(v3);
  unint64_t v4 = (*(void *)(*(void *)(type metadata accessor for SQLiteDB.Location(0LL) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v0[13] = swift_task_alloc(v4);
  v0[14] = swift_task_alloc(v4);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v0[15] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v0[16] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v0[17] = swift_task_alloc(v7);
  v0[18] = swift_task_alloc(v7);
  v0[19] = type metadata accessor for MainActor(0LL);
  v0[20] = static MainActor.shared.getter();
  uint64_t v8 = type metadata accessor for TransparencyLog();
  swift_allocObject(v8, 136LL, 15LL);
  uint64_t v9 = (void *)swift_task_alloc(dword_10008AAA4);
  v0[21] = v9;
  void *v9 = v0;
  v9[1] = sub_10004E04C;
  return sub_100011FD4();
}

uint64_t sub_10004E04C(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc(*(void *)(*v2 + 168));
  if (v1)
  {
    swift_errorRelease(v1);
    uint64_t v5 = sub_10004F460();
    uint64_t v7 = v6;
    uint64_t v8 = sub_10004E1C8;
  }

  else
  {
    *(void *)(v4 + 176) = a1;
    uint64_t v5 = sub_10004F460();
    uint64_t v7 = v9;
    uint64_t v8 = sub_10004E134;
  }

  return sub_10004F3C4((uint64_t)v8, v5, v7);
}

uint64_t sub_10004E134()
{
  uint64_t v1 = qword_1000933D0;
  qword_1000933D0 = v0[22];
  swift_release(v1);
  uint64_t v2 = type metadata accessor for DiskCache();
  v0[23] = v2;
  sub_10003E3BC(v2, 120LL);
  unint64_t v3 = (void *)swift_task_alloc(dword_10008B714);
  v0[24] = v3;
  sub_10004F430(v3, (uint64_t)sub_10004E258);
  return sub_10004F3B8(0);
}

uint64_t sub_10004E1C8()
{
  uint64_t v1 = qword_1000933D0;
  qword_1000933D0 = 0LL;
  swift_release(v1);
  uint64_t v2 = type metadata accessor for DiskCache();
  *(void *)(v0 + 184) = v2;
  sub_10003E3BC(v2, 120LL);
  unint64_t v3 = (void *)swift_task_alloc(dword_10008B714);
  *(void *)(v0 + 192) = v3;
  sub_10004F430(v3, (uint64_t)sub_10004E258);
  return sub_10004F3B8(0);
}

uint64_t sub_10004E258(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 192LL);
  *(void *)(*(void *)v2 + 20Hasher.init(_seed:)(v3, 0LL) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = v4[19];
  if (v1)
  {
    uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter(v6);
    v4[27] = v7;
    v4[28] = v8;
    uint64_t v9 = v7;
    uint64_t v10 = v8;
    uint64_t v11 = sub_10004E464;
    uint64_t v12 = v9;
  }

  else
  {
    v4[26] = a1;
    uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(v6);
    uint64_t v15 = v14;
    uint64_t v11 = sub_10004E348;
    uint64_t v12 = v13;
    uint64_t v10 = v15;
  }

  return sub_10004F3C4((uint64_t)v11, v12, v10);
}

uint64_t sub_10004E348()
{
  uint64_t v1 = v0[26];
  v0[29] = v1;
  uint64_t v2 = qword_1000933B0;
  qword_1000933B0 = v1;
  swift_retain(v1);
  swift_release(v2);
  BOOL v4 = qword_1000933D0 == 0;
  uint64_t v3 = qword_1000933B0;
  v0[30] = qword_1000933D0;
  v0[31] = v3;
  BOOL v4 = v4 || v3 == 0;
  char v5 = v4;
  if (v4)
  {
    uint64_t v6 = sub_10004F404();
    Logger.logObject.getter(v6);
    os_log_type_t v7 = sub_10004F490();
    if (sub_10001AC28(v7))
    {
      uint64_t v8 = (_WORD *)sub_1000100B0(2LL);
      *uint64_t v8 = 0;
      sub_10004F354((void *)&_mh_execute_header, v9, v10, "reporting disabled due to startup failure");
      sub_100010010((uint64_t)v8);
    }

    sub_10004F3E4();
    sub_10004F3A8();
  }

  uint64_t v11 = sub_10004F44C();
  sub_10003E3BC(v11, 128LL);
  uint64_t v12 = sub_10004F488();
  sub_10004F340(v12);
  uint64_t v13 = sub_10004F444();
  sub_10003E3BC(v13, 176LL);
  uint64_t v14 = (void *)swift_task_alloc(dword_10008B33C);
  v0[32] = v14;
  sub_10004F430(v14, (uint64_t)sub_10004E8A0);
  return sub_10004F2F4(v5);
}

void sub_10004E464()
{
  uint64_t v1 = *(void *)(v0 + 200);
  *(void *)(v0 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v1;
  swift_errorRetain(v1);
  uint64_t v2 = sub_10000534C(&qword_10008A8A8);
  if (!swift_dynamicCast(v0 + 352, v0 + 40, v2, &type metadata for DiskCacheError, 6LL)
    || (*(_BYTE *)(v0 + 352) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + 200);
    sub_10004F478();
    swift_errorRetain(v3);
    swift_errorRetain(v3);
    BOOL v4 = (os_log_s *)sub_10001ACE4();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = *(void *)(v0 + 200);
    uint64_t v9 = *(void *)(v0 + 128);
    uint64_t v8 = *(void *)(v0 + 136);
    uint64_t v10 = *(void *)(v0 + 120);
    if (v6)
    {
      uint64_t v43 = *(void *)(v0 + 120);
      uint64_t v42 = *(void *)(v0 + 128);
      uint64_t v11 = (_DWORD *)sub_1000100B0(12LL);
      uint64_t v12 = sub_1000100B0(32LL);
      uint64_t v44 = v12;
      *uint64_t v11 = 136446210;
      swift_getErrorValue(v7, v0 + 56, v0 + 16);
      uint64_t v13 = Error.localizedDescription.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
      *(void *)(v0 + 64) = sub_100019964(v13, v14, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v11 + 1);
      sub_10000FFD8();
      sub_10003C6A8();
      sub_10003C6A8();
      sub_10004F3D8((void *)&_mh_execute_header, v4, v5, "failed to open database file: %{public}s");
      swift_arrayDestroy(v12, 1LL);
      sub_100010010(v12);
      sub_100010010((uint64_t)v11);

      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v8, v43);
    }

    else
    {
      sub_10003C6A8();
      sub_10003C6A8();

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    }
  }

  sub_100028F98(0, *(void *)(v0 + 112));
  uint64_t v17 = *(void *)(v0 + 104);
  uint64_t v18 = *(void *)(v0 + 72);
  sub_100005FAC(*(void *)(v0 + 112), v17);
  if (_s10RTCUtility9XPCObjectOwet_0(v17, 1LL, v18) == 1)
  {
    sub_10004F2B8(*(void *)(v0 + 104));
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "rtcreportingd/Main.swift",  24LL,  2LL,  90LL,  0);
    sub_10002F6DC();
  }

  else
  {
    uint64_t v19 = *(void *)(v0 + 88);
    uint64_t v20 = *(void *)(v0 + 72);
    uint64_t v21 = *(void *)(v0 + 80);
    (*(void (**)(void, void, uint64_t))(v21 + 32))(*(void *)(v0 + 96), *(void *)(v0 + 104), v20);
    id v22 = [(id)objc_opt_self(NSFileManager) defaultManager];
    URL.deletingLastPathComponent()();
    URL._bridgeToObjectiveC()(v23);
    uint64_t v25 = v24;
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    *(void *)(v0 + 32sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v26;
    v26(v19, v20);
    *(void *)(v0 + 48) = 0LL;
    LODWORD(v19) = [v22 removeItemAtURL:v25 error:v0 + 48];

    id v27 = *(id *)(v0 + 48);
    if (!(_DWORD)v19)
    {
      uint64_t v30 = v27;
      uint64_t v31 = *(void *)(v0 + 112);
      uint64_t v32 = *(void *)(v0 + 96);
      uint64_t v33 = *(void *)(v0 + 72);
      swift_release(*(void *)(v0 + 160));
      _convertNSErrorToError(_:)(v30);

      swift_willThrow(v34, v35, v36, v37, v38, v39, v40, v41);
      sub_100015768();
      v26(v32, v33);
      sub_10004F2B8(v31);
      uint64_t v15 = *(void *)(v0 + 136);
      swift_task_dealloc(*(void *)(v0 + 144));
      swift_task_dealloc(v15);
      sub_10001AB28();
      sub_10001AB38();
      sub_10001AAF0();
      sub_10001ABA8();
      sub_10002F6DC();
      __asm { BR              X0 }
    }

    sub_10003E3BC(*(void *)(v0 + 184), 120LL);
    uint64_t v28 = (void *)swift_task_alloc(dword_10008B714);
    *(void *)(v0 + 328) = v28;
    *uint64_t v28 = v0;
    v28[1] = sub_10004EC70;
    sub_10002F6DC();
    sub_1000294C4(v29);
  }

uint64_t sub_10004E8A0()
{
  uint64_t v1 = v0[32];
  uint64_t v2 = v0[19];
  v0[33] = v3;
  swift_task_dealloc(v1);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter(v2);
  v0[34] = v4;
  v0[35] = v5;
  return sub_100026A04((uint64_t)sub_10004E934, v4, v5);
}

uint64_t sub_10004E934()
{
  if (*(void *)(v0 + 240)) {
    BOOL v3 = *(void *)(v0 + 248) == 0LL;
  }
  else {
    BOOL v3 = 1;
  }
  char v4 = v3;
  uint64_t v5 = qword_1000933C0;
  qword_1000933C0 = *(void *)(v0 + 264);
  swift_release(v5);
  uint64_t v6 = type metadata accessor for Listener();
  swift_allocObject(v6, 49LL, 7LL);
  uint64_t v7 = sub_10005B8D0(v4);
  uint64_t v8 = qword_1000933B8;
  qword_1000933B8 = v7;
  swift_release(v8);
  if (qword_10008A060 != -1) {
    swift_once(&qword_10008A060, sub_10003E040);
  }
  uint64_t v9 = qword_100093380;
  *(void *)(v0 + 288) = qword_100093380;
  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0) {
      uint64_t v14 = v9;
    }
    else {
      uint64_t v14 = v9 & 0xFFFFFFFFFFFFFF8LL;
    }
    __n128 v15 = swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v14, v15);
  }

  else
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain();
  }

  *(void *)(v0 + 296) = v10;
  if (v10)
  {
    if (v10 < 1) {
      __break(1u);
    }
    *(void *)(v0 + 304) = 0LL;
    uint64_t v11 = *(void *)(v0 + 288);
    if ((v11 & 0xC000000000000001LL) != 0)
    {
      uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v11);
    }

    else
    {
      uint64_t v12 = *(void *)(v11 + 32);
      sub_100010324();
    }

    *(void *)(v0 + 312) = v12;
    return sub_10004F308((uint64_t)sub_10004EAF4, v12, 0LL);
  }

  else
  {
    sub_10004F38C();
    sub_10000FFD8();
    sub_100006C04();
    sub_10001AB28();
    sub_10001AB38();
    sub_10001AAF0();
    sub_10001ABA8();
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    return sub_10004F324(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_10004EAF4()
{
  if (v0[30]) {
    BOOL v1 = v0[31] == 0LL;
  }
  else {
    BOOL v1 = 1;
  }
  char v2 = v1;
  sub_10003CB28(v2);
  return swift_task_switch(sub_10004EB68, v0[34], v0[35]);
}

uint64_t sub_10004EB68()
{
  uint64_t v3 = *(void *)(v0 + 304);
  uint64_t v4 = *(void *)(v0 + 296);
  swift_release(*(void *)(v0 + 312));
  if (v3 + 1 == v4)
  {
    sub_10004F38C();
    sub_10000FFD8();
    sub_100006C04();
    sub_10001AB28();
    sub_10001AB38();
    sub_10001AAF0();
    sub_10001ABA8();
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    return sub_10004F324(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    uint64_t v6 = *(void *)(v0 + 304) + 1LL;
    *(void *)(v0 + 304) = v6;
    uint64_t v7 = *(void *)(v0 + 288);
    if ((v7 & 0xC000000000000001LL) != 0)
    {
      uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }

    else
    {
      uint64_t v8 = *(void *)(v7 + 8 * v6 + 32);
      sub_100010324();
    }

    *(void *)(v0 + 312) = v8;
    return sub_10004F308((uint64_t)sub_10004EAF4, v8, 0LL);
  }

uint64_t sub_10004EC70(uint64_t a1)
{
  uint64_t v5 = v2[41];
  *uint64_t v6 = *v3;
  v2[42] = v1;
  swift_task_dealloc(v5);
  if (v1) {
    return sub_100026A04((uint64_t)sub_10004EE44, v2[27], v2[28]);
  }
  v2[43] = a1;
  return sub_100026A04((uint64_t)sub_10004ED10, v2[27], v2[28]);
}

uint64_t sub_10004ED10()
{
  uint64_t v1 = *(void *)(v0 + 344);
  swift_errorRelease(*(void *)(v0 + 200));
  uint64_t v2 = *(void *)(v0 + 112);
  sub_10004F498(*(uint64_t (**)(void, void))(v0 + 320));
  sub_10004F2B8(v2);
  *(void *)(v0 + 232) = v1;
  qword_1000933B0 = v1;
  sub_100010324();
  sub_100006C04();
  BOOL v4 = qword_1000933D0 == 0;
  uint64_t v3 = qword_1000933B0;
  *(void *)(v0 + 24sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = qword_1000933D0;
  *(void *)(v0 + 248) = v3;
  BOOL v4 = v4 || v3 == 0;
  char v5 = v4;
  if (v4)
  {
    uint64_t v6 = sub_10004F404();
    Logger.logObject.getter(v6);
    os_log_type_t v7 = sub_10004F490();
    if (sub_10001AC28(v7))
    {
      uint64_t v8 = (_WORD *)sub_1000100B0(2LL);
      *uint64_t v8 = 0;
      sub_10004F354((void *)&_mh_execute_header, v9, v10, "reporting disabled due to startup failure");
      sub_100010010((uint64_t)v8);
    }

    sub_10004F3E4();
    sub_10004F3A8();
  }

  uint64_t v11 = sub_10004F44C();
  sub_10003E3BC(v11, 128LL);
  uint64_t v12 = sub_10004F488();
  sub_10004F340(v12);
  uint64_t v13 = sub_10004F444();
  sub_10003E3BC(v13, 176LL);
  uint64_t v14 = (void *)swift_task_alloc(dword_10008B33C);
  *(void *)(v0 + 256) = v14;
  sub_10004F430(v14, (uint64_t)sub_10004E8A0);
  return sub_10004F2F4(v5);
}

uint64_t sub_10004EE44()
{
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 200);
  sub_10004EF88(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v2);
  uint64_t v3 = *(void *)(v0 + 112);
  sub_10004F498(*(uint64_t (**)(void, void))(v0 + 320));
  sub_10004F2B8(v3);
  *(void *)(v0 + 232) = 0LL;
  uint64_t v4 = qword_1000933B0;
  qword_1000933B0 = 0LL;
  swift_release(v4);
  BOOL v6 = qword_1000933D0 == 0;
  uint64_t v5 = qword_1000933B0;
  *(void *)(v0 + 24sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = qword_1000933D0;
  *(void *)(v0 + 248) = v5;
  BOOL v6 = v6 || v5 == 0;
  char v7 = v6;
  if (v6)
  {
    uint64_t v8 = sub_10004F404();
    Logger.logObject.getter(v8);
    os_log_type_t v9 = sub_10004F490();
    if (sub_10001AC28(v9))
    {
      uint64_t v10 = (_WORD *)sub_1000100B0(2LL);
      *uint64_t v10 = 0;
      sub_10004F354((void *)&_mh_execute_header, v11, v12, "reporting disabled due to startup failure");
      sub_100010010((uint64_t)v10);
    }

    sub_10004F3E4();
    sub_10004F3A8();
  }

  uint64_t v13 = sub_10004F44C();
  sub_10003E3BC(v13, 128LL);
  uint64_t v14 = sub_10004F488();
  sub_10004F340(v14);
  uint64_t v15 = sub_10004F444();
  sub_10003E3BC(v15, 176LL);
  NSString v16 = (void *)swift_task_alloc(dword_10008B33C);
  *(void *)(v0 + 256) = v16;
  sub_10004F430(v16, (uint64_t)sub_10004E8A0);
  return sub_10004F2F4(v7);
}

uint64_t sub_10004EF88(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10004F478();
  swift_errorRetain(a1);
  swift_errorRetain(a1);
  BOOL v6 = (os_log_s *)sub_10001ACE4();
  os_log_type_t v7 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = sub_1000100B0(12LL);
    uint64_t v15 = v2;
    os_log_type_t v9 = (_DWORD *)v8;
    uint64_t v10 = sub_1000100B0(32LL);
    uint64_t v19 = v10;
    _DWORD *v9 = 136446210;
    swift_getErrorValue(a1, v18, v17);
    uint64_t v11 = Error.localizedDescription.getter(v17[1], v17[2]);
    uint64_t v16 = sub_100019964(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, v17, v9 + 1);
    sub_10000FFD8();
    sub_100015768();
    sub_100015768();
    sub_10004F3D8((void *)&_mh_execute_header, v6, v7, "failed to create disk cache: %{public}s");
    sub_10004F420();
    sub_100010010(v10);
    sub_100010010((uint64_t)v9);

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v15);
  }

  else
  {
    sub_100015768();
    sub_100015768();

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

int main(int argc, const char **argv, const char **envp)
{
}

id sub_10004F134(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v4 = 0LL;
  }

  id v5 = [v2 initWithSuiteName:v4];

  return v5;
}

id sub_10004F194(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [a3 BOOLSettingForFeature:v5];

  return v6;
}

uint64_t sub_10004F1EC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004F210()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10008C24C);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100013D04;
  return sub_10004DF0C();
}

unint64_t sub_10004F274()
{
  unint64_t result = qword_10008C260;
  if (!qword_10008C260)
  {
    uint64_t v1 = sub_10000E670(&qword_10008C258);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10008C260);
  }

  return result;
}

uint64_t sub_10004F2B8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SQLiteDB.Location(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10004F2F4(char a1)
{
  return sub_100021D68(a1);
}

uint64_t sub_10004F308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10004F324(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10004F340(uint64_t a1)
{
  uint64_t v1 = qword_1000933C8;
  qword_1000933C8 = a1;
  return swift_release(v1);
}

void sub_10004F354(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

NSString sub_10004F368()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10004F38C()
{
  return swift_release(*(void *)(v0 + 160));
}

uint64_t sub_10004F3A8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10004F3B8(char a1)
{
  return sub_1000294C4(a1);
}

uint64_t sub_10004F3C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10004F3D0()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 120));
}

void sub_10004F3D8(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

void sub_10004F3E4()
{
}

uint64_t sub_10004F3F0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100042BE4((uint64_t *)(v2 - 128), a1, (a2 - 32) | 0x8000000000000000LL);
}

uint64_t sub_10004F404()
{
  return Logger.init()();
}

id sub_10004F410()
{
  return objc_msgSend(v0, *(SEL *)(v2 + 3744), v1);
}

uint64_t sub_10004F420()
{
  return swift_arrayDestroy(v0, 1LL);
}

void *sub_10004F430@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *unint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_10004F43C()
{
  return sub_1000082AC(v0 - 128);
}

uint64_t sub_10004F444()
{
  return type metadata accessor for SessionCoordinator();
}

uint64_t sub_10004F44C()
{
  return type metadata accessor for SubmissionCoordinator();
}

id sub_10004F454(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_10004F460()
{
  return dispatch thunk of Actor.unownedExecutor.getter(v0);
}

uint64_t sub_10004F46C()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_10004F478()
{
  return Logger.init()();
}

id sub_10004F480()
{
  return *(id *)(v0 + 992);
}

uint64_t sub_10004F488()
{
  return sub_10002FA5C();
}

uint64_t sub_10004F490()
{
  return static os_log_type_t.fault.getter();
}

uint64_t sub_10004F498@<X0>(uint64_t (*a1)(void, void)@<X8>)
{
  return a1(*(void *)(v1 + 96), *(void *)(v1 + 72));
}

void sub_10004F4A4()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_10004F4B8()
{
  return _bridgeAnyObjectToAny(_:)(v0);
}

double sub_10004F4C4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_100059364(a1, a2), (v7 & 1) != 0))
  {
    sub_10001A74C(*(void *)(v4 + 56) + 32 * v6, (uint64_t)a4);
  }

  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }

  return result;
}

void sub_10004F510(unsigned __int8 a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    unint64_t v2 = sub_100033AB0(a1, a2);
    if ((v3 & 1) != 0) {
      sub_1000596B4(v2);
    }
  }

  sub_100006B44();
}

void sub_10004F544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    sub_100059364(a1, a2);
    if ((v3 & 1) != 0) {
      swift_bridgeObjectRetain();
    }
  }

uint64_t sub_10004F590@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_10004F5A8(a1, a2, a3, type metadata accessor for CachedStorebag, a4);
}

uint64_t sub_10004F59C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_10004F5A8(a1, a2, a3, type metadata accessor for EventValue, a4);
}

uint64_t sub_10004F5A8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v8 = sub_100059364(a1, a2), (v9 & 1) != 0))
  {
    unint64_t v10 = v8;
    uint64_t v11 = *(void *)(v5 + 56);
    uint64_t v12 = a4(0LL);
    sub_100034734(v11 + *(void *)(*(void *)(v12 - 8) + 72LL) * v10, a5, a4);
    uint64_t v13 = a5;
    uint64_t v14 = 0LL;
    uint64_t v15 = v12;
  }

  else
  {
    uint64_t v15 = a4(0LL);
    uint64_t v13 = a5;
    uint64_t v14 = 1LL;
  }

  return _s10RTCUtility9XPCObjectOwst_0(v13, v14, 1LL, v15);
}

uint64_t sub_10004F640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (unint64_t v4 = sub_100059364(a1, a2), (v5 & 1) != 0)) {
    return *(void *)(*(void *)(v3 + 56) + 8 * v4);
  }
  else {
    return 0LL;
  }
}

void sub_10004F680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    unint64_t v3 = sub_100059364(a1, a2);
    if ((v4 & 1) != 0) {
      sub_1000596B4(v3);
    }
  }

  sub_100006B44();
}

void sub_10004F6B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 == v6 && v5 == v7) {
    sub_100059324();
  }
  else {
    sub_100058F54(v3, v7, v6);
  }
  sub_100006AF0();
  sub_10000FFD8();
  sub_100006C40();
}

void sub_10004F714(char a1)
{
  __asm { BR              X11 }

uint64_t sub_10004F77C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10004F808 + 4 * byte_10006BED6[a2]))(7496054LL);
}

void sub_10004F808(uint64_t a1, uint64_t a2)
{
  if (a1 == 7496054 && v2 == 0xE300000000000000LL) {
    sub_100059324();
  }
  else {
    sub_100058F54(a1, a2, 7496054LL);
  }
  sub_100006AF0();
  sub_10000FFD8();
  sub_100006C40();
}

void sub_10004F8A4()
{
  uint64_t v0 = sub_100037560();
  uint64_t v2 = v1;
  uint64_t v3 = sub_100037560();
  if (v0 == v3 && v2 == v4) {
    sub_100059324();
  }
  else {
    sub_100058F54(v0, v4, v3);
  }
  sub_100006AF0();
  sub_10000FFD8();
  sub_100006C40();
}

void sub_10004F908(char a1)
{
  __asm { BR              X10 }

uint64_t sub_10004F958(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10004FA20 + 4 * byte_10006BEE4[a2]))(0x65636976726573LL);
}

void sub_10004FA20(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x65636976726573LL && v2 == 0xE700000000000000LL) {
    sub_100059324();
  }
  else {
    sub_100058F54(a1, a2, 0x65636976726573LL);
  }
  sub_100006AF0();
  sub_10000FFD8();
  sub_100006C40();
}

void sub_10004FAF8(char a1)
{
  __asm { BR              X10 }

uint64_t sub_10004FB38(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10004FC10 + 4 * byte_10006BEF6[a2]))(7955819LL);
}

void sub_10004FC10(uint64_t a1, uint64_t a2)
{
  if (a1 == 7955819 && v2 == 0xE300000000000000LL) {
    sub_100059324();
  }
  else {
    sub_100058F54(a1, a2, 7955819LL);
  }
  sub_100006AF0();
  sub_10000FFD8();
  sub_100006C40();
}

void sub_10004FCF8(char a1)
{
  __asm { BR              X10 }

uint64_t sub_10004FD40(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10004FD94 + 4 * byte_10006BF04[a2]))(0x6E6F6973726576LL);
}

void sub_10004FD94(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6E6F6973726576LL && v2 == 0xE700000000000000LL) {
    sub_100059324();
  }
  else {
    sub_100058F54(a1, a2, 0x6E6F6973726576LL);
  }
  sub_100006AF0();
  sub_10000FFD8();
  sub_100006C40();
}

uint64_t sub_10004FDF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10001AC74();
  uint64_t v7 = _s10RTCUtility9XPCObjectOwet_0(a1, 1LL, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_100059498(v7, (uint64_t *)&unk_10008C4A0);
    uint64_t v8 = 7168LL;
  }

  else
  {
    unsigned __int8 v9 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v8 = v9 | 0x1C00LL;
  }

  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType);
    uint64_t v14 = v13;
    swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v12 = 0LL;
    uint64_t v14 = 0LL;
  }

  if (v14 | v12)
  {
    v17[0] = 0LL;
    v17[1] = 0LL;
    uint64_t v15 = v17;
    uint64_t v17[2] = v12;
    void v17[3] = v14;
  }

  else
  {
    uint64_t v15 = 0LL;
  }

  return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_10004FF18(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 104) = a2;
  *(void *)(v4 + 112) = v3;
  *(_BYTE *)(v4 + 176) = a3;
  *(void *)(v4 + 96) = a1;
  *(void *)(v4 + 12sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = *v3;
  uint64_t v5 = sub_10000534C(&qword_10008BFA0);
  *(void *)(v4 + 128) = sub_100058F3C(v5);
  *(void *)(v4 + 136) = sub_100026B60();
  sub_100026B34();
  return sub_100020908(v6, v7, v8);
}

uint64_t sub_10004FF70()
{
  if (*(_BYTE *)(v0 + 176) != 2) {
    goto LABEL_17;
  }
  uint64_t v1 = v0 + 72;
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void **)(v0 + 104);
  uint64_t v4 = (uint64_t *)MessageKeys.payload.unsafeMutableAddressor();
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  sub_100010198();
  RTCXPCDictionary.subscript.getter(v5, v6, v3, v2);
  sub_100006CAC();
  uint64_t v7 = type metadata accessor for XPCObject(0LL);
  int v8 = sub_10001A968(v2);
  unsigned __int8 v9 = *(void ***)(v0 + 136);
  if (v8 == 1)
  {
    sub_100035228(*(void *)(v0 + 136), &qword_10008BFA0);
LABEL_11:
    if (qword_10008A0A8 != -1) {
      swift_once(&qword_10008A0A8, sub_100051C5C);
    }
    uint64_t v16 = *(os_log_s **)(v0 + 112);
    uint64_t v25 = sub_10001030C();
    sub_10000D34C(v25, (uint64_t)qword_10008C270);
    sub_100010324();
    sub_10001ACC8();
    os_log_type_t v26 = sub_10001AB78();
    BOOL v27 = sub_1000593E4(v16);
    uint64_t v28 = *(void *)(v0 + 112);
    if (v27)
    {
      char v29 = (uint8_t *)sub_1000100B0(12LL);
      uint64_t v30 = sub_1000100B0(32LL);
      uint64_t v65 = v30;
      *(_DWORD *)char v29 = 136446210;
      uint64_t v31 = *(void *)(v28 + 112);
      unint64_t v32 = *(void *)(v28 + 120);
      sub_100010270();
      *(void *)(v0 + 64) = sub_100019964(v31, v32, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v29 + 4);
      sub_100010278();
      sub_100006B3C();
      sub_10001AA70((void *)&_mh_execute_header, v16, v26, "session %{public}s receieved event with no payload", v29);
      sub_10001AA68(v30);
      sub_100010010(v30);
      sub_100010010((uint64_t)v29);
    }

    else
    {
      sub_100006B3C();
    }

    goto LABEL_16;
  }

  uint64_t v10 = sub_1000590B8();
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v11);
  if ((_DWORD)EnumCaseMultiPayload != 12)
  {
    sub_1000353C0(EnumCaseMultiPayload, type metadata accessor for XPCObject);
    goto LABEL_11;
  }

  uint64_t v13 = *(void *)(v0 + 112);
  uint64_t v14 = *v9;
  *(void *)(v0 + 144) = *v9;
  if ((*(_BYTE *)(v13 + OBJC_IVAR____TtC13rtcreportingd7Session_receivedEnd) & 1) != 0)
  {
    if (qword_10008A0A8 != -1) {
      swift_once(&qword_10008A0A8, sub_100051C5C);
    }
    uint64_t v15 = sub_10001030C();
    uint64_t v16 = (os_log_s *)sub_10000D34C(v15, (uint64_t)qword_10008C270);
    uint64_t v17 = sub_100059318();
    Logger.logObject.getter(v17);
    os_log_type_t v18 = sub_10001AB78();
    BOOL v19 = sub_1000593E4(v16);
    uint64_t v20 = *(void *)(v0 + 112);
    if (v19)
    {
      uint64_t v21 = (uint8_t *)sub_1000100B0(12LL);
      uint64_t v22 = sub_1000100B0(32LL);
      uint64_t v65 = v22;
      *(_DWORD *)uint64_t v21 = 136446210;
      uint64_t v23 = *(void *)(v20 + 112);
      sub_1000083B8();
      *(void *)(v0 + 88) = sub_1000596AC(v23, v24, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v21 + 4);
      sub_100006AF0();
      sub_10001A98C(v20);
      sub_10001AA70((void *)&_mh_execute_header, v16, v18, "session %{public}s received event after ending", v21);
      sub_10001AA68(v22);
      sub_100010010(v22);
      sub_100010010((uint64_t)v21);

      swift_unknownObjectRelease(v14);
LABEL_17:
      swift_task_dealloc(*(void *)(v0 + 136));
      sub_10001AB88();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

    swift_unknownObjectRelease(v14);
    sub_10001A98C(v20);
LABEL_16:

    goto LABEL_17;
  }

  uint64_t v34 = (const void *)(v0 + 16);
  if (*(_BYTE *)(v13 + 176) != 1)
  {
    char isEscapingClosureAtFileLocation = (os_log_s *)*(unsigned __int8 *)(v13 + 240);
    if (!*(_BYTE *)(v13 + 176) && (_DWORD)isEscapingClosureAtFileLocation == 1)
    {
      char v35 = 1;
      goto LABEL_39;
    }

    uint64_t v64 = v0 + 88;
    uint64_t v37 = v0 + 72;
    uint64_t v38 = v14;
    uint64_t v39 = *(void *)(v0 + 128);
    uint64_t v40 = *(void **)(v0 + 104);
    uint64_t v41 = (uint64_t *)MessageKeys.realtime.unsafeMutableAddressor();
    uint64_t v42 = *v41;
    uint64_t v43 = v41[1];
    sub_100010290();
    RTCXPCDictionary.subscript.getter(v42, v43, v40, v39);
    sub_10001ABFC();
    int v44 = sub_10001A968(v39);
    __int128 v45 = *(char **)(v0 + 128);
    if (v44 == 1)
    {
      sub_100035228(*(void *)(v0 + 128), &qword_10008BFA0);
      char v35 = 0;
      uint64_t v14 = v38;
      goto LABEL_38;
    }

    uint64_t v14 = v38;
    uint64_t v1 = v0 + 72;
    if (swift_getEnumCaseMultiPayload(*(void *)(v0 + 128), v7) == 2)
    {
      int v46 = *v45;
      if ((_DWORD)isEscapingClosureAtFileLocation == 1) {
        char v35 = *v45;
      }
      else {
        char v35 = 0;
      }
      if ((_DWORD)isEscapingClosureAtFileLocation != 1 && v46)
      {
        if (qword_10008A0A8 == -1) {
          goto LABEL_33;
        }
        goto LABEL_42;
      }

      goto LABEL_39;
    }

    sub_100034760((uint64_t)v45, type metadata accessor for XPCObject);
  }

  char v35 = 0;
LABEL_39:
  while (1)
  {
    uint64_t v37 = *(void *)(v0 + 112);
    uint64_t v56 = *(void *)(v0 + 120);
    uint64_t v57 = sub_1000083F4();
    *(void *)(v0 + 72) = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v57,  &protocol witness table for String);
    size_t count = xpc_dictionary_get_count(v14);
    sub_10000534C((uint64_t *)&unk_10008B930);
    Dictionary.reserveCapacity(_:)(count);
    uint64_t v59 = (void *)sub_100006B14((uint64_t)&unk_1000859D0, 40LL);
    *(void *)(v0 + 152) = v59;
    v59[2] = v37;
    v59[3] = v1;
    v59[4] = v56;
    uint64_t v60 = sub_100006B14((uint64_t)&unk_1000859F8, 32LL);
    *(void *)(v60 + swift_weakDestroy(v0 + 16) = sub_100056F74;
    *(void *)(v60 + 24) = v59;
    *(void *)(v0 + 48) = sub_100034710;
    *(void *)(v0 + 56) = v60;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = _NSConcreteStackBlock;
    *(void *)(v0 + 24) = 1107296256LL;
    *(void *)(v0 + 32) = sub_100051B08;
    *(void *)(v0 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = &unk_100085A10;
    uint64_t v38 = _Block_copy(v34);
    uint64_t v34 = *(const void **)(v0 + 56);
    swift_retain(v37);
    swift_unknownObjectRetain(v14);
    sub_100010324();
    sub_100006BB4();
    xpc_dictionary_apply(v14, v38);
    swift_unknownObjectRelease(v14);
    _Block_release(v38);
    char isEscapingClosureAtFileLocation = (os_log_s *)swift_isEscapingClosureAtFileLocation(v60, "", 71LL, 209LL, 48LL, 1LL);
    sub_10001020C();
    __break(1u);
LABEL_42:
    swift_once(&qword_10008A0A8, sub_100051C5C);
LABEL_33:
    uint64_t v47 = sub_10001030C();
    sub_10000D34C(v47, (uint64_t)qword_10008C270);
    uint64_t v48 = sub_100010324();
    Logger.logObject.getter(v48);
    os_log_type_t v49 = sub_10005950C();
    BOOL v50 = os_log_type_enabled(isEscapingClosureAtFileLocation, v49);
    uint64_t v51 = *(void *)(v0 + 112);
    if (v50)
    {
      uint64_t v52 = (uint8_t *)sub_1000100B0(12LL);
      uint64_t v63 = sub_1000100B0(32LL);
      uint64_t v65 = v63;
      *(_DWORD *)uint64_t v52 = 136446210;
      uint64_t v53 = *(void *)(v51 + 112);
      unint64_t v54 = *(void *)(v51 + 120);
      sub_10001A9B8();
      *(void *)(v0 + 8sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = sub_100019964(v53, v54, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v64, v52 + 4);
      unint64_t v55 = v54;
      uint64_t v14 = v38;
      swift_bridgeObjectRelease(v55);
      swift_release(v51);
      sub_10001AA70( (void *)&_mh_execute_header,  isEscapingClosureAtFileLocation,  v49,  "session %{public}s sent realtime event to non-realtime session",  v52);
      sub_10001AA68(v63);
      sub_100010010(v63);
      sub_100010010((uint64_t)v52);
    }

    else
    {
      swift_release(*(void *)(v0 + 112));
    }

    char v35 = 0;
LABEL_38:
    uint64_t v1 = v37;
  }

  uint64_t v61 = *(void *)(v0 + 72);
  *(void *)(v0 + 16sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v61;
  sub_1000100D8();
  uint64_t v62 = (void *)sub_100026B60();
  *(void *)(v0 + 168) = v62;
  *uint64_t v62 = v0;
  v62[1] = sub_1000506A0;
  return sub_1000534B8(v61, v35);
}

uint64_t sub_1000506A0()
{
  uint64_t v5 = *v0;
  sub_1000590B0(*(void *)(v5 + 168), &v5);
  sub_10000FFD8();
  sub_10001AC0C();
  return sub_100020908(v1, v2, v3);
}

uint64_t sub_1000506EC()
{
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(v0 + 104));
  if (reply)
  {
    xpc_object_t v2 = reply;
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(v0 + 96) + 16LL), reply);
    swift_unknownObjectRelease(v2);
  }

  swift_unknownObjectRelease(*(void *)(v0 + 144));
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  sub_10001020C();
  swift_task_dealloc(*(void *)(v0 + 136));
  sub_10001AB88();
  return sub_10001ABB0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100050754()
{
  return (*(void *)(*(void *)(v0 + 136) + 16LL) == 0LL) & (*(unsigned __int8 *)(v0 + 152) ^ 1u);
}

uint64_t sub_100050774()
{
  *(_OWORD *)xpc_object_t v2 = *(_OWORD *)(v0 + 152);
  *(_OWORD *)&void v2[9] = *(_OWORD *)(v0 + 161);
  __int128 v3 = *(_OWORD *)(v0 + 136);
  __int128 v4 = *(_OWORD *)&v2[8];
  sub_10000ECC4(&v3);
  sub_10000ECC4((void *)&v3 + 1);
  sub_1000080FC((uint64_t)&v4);
  sub_100042210();
  sub_10000ECEC(&v3);
  sub_10000ECEC((void *)&v3 + 1);
  sub_1000082EC((uint64_t)&v4);
  return sub_1000590B8();
}

uint64_t sub_100050800(char a1)
{
  *(void *)(v2 + 104) = v1;
  *(_BYTE *)(v2 + 184) = a1;
  return sub_10001CBC8((uint64_t)sub_100050818, v1);
}

uint64_t sub_100050818( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v24;
  a22 = v25;
  a20 = v22;
  uint64_t v26 = *(void *)(v22 + 104);
  if (*(_BYTE *)(v26 + OBJC_IVAR____TtC13rtcreportingd7Session_haveNonRealtimeEvents) == 1
    && (sub_100059580(), !v27)
    && (uint64_t v28 = *(void *)(v26 + OBJC_IVAR____TtC13rtcreportingd7Session_realtimeBackend),
        (*(void *)(v22 + 112) = v28) != 0LL))
  {
    swift_unknownObjectRetain(v28);
    char v29 = (void *)sub_10002C8DC();
    *(void *)(v22 + 12sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v29;
    void *v29 = v22;
    v29[1] = sub_1000509C8;
    sub_100026AFC();
    return sub_1000553DC(v30, v31);
  }

  else
  {
    sub_100059580();
    if (!v27) {
      sub_1000593EC();
    }
    char v46 = *(_BYTE *)(v22 + 184);
    sub_10000534C(&qword_10008A808);
    uint64_t v33 = sub_10000534C(&qword_10008A810);
    uint64_t v34 = (__n128 *)sub_100059018(v33);
    uint64_t v35 = sub_100058F78(v34, (__n128)xmmword_100069590);
    sub_100059140(v23, v35);
    uint64_t v36 = sub_100058FAC();
    uint64_t v38 = sub_1000595E8(v36, (uint64_t)&type metadata for String, v37, (uint64_t)&protocol witness table for String);
    sub_100010198();
    uint64_t v39 = (void *)sub_10005952C(v46);
    sub_100006CAC();
    char v40 = sub_100059618();
    a10 = v38;
    sub_1000592F8(v39, (uint64_t)sub_1000586C4, v41, v40, (uint64_t)&a10);
    if (v38)
    {
      sub_100026AFC();
      return swift_bridgeObjectRelease(v42);
    }

    else
    {
      sub_1000592D0();
      sub_1000083B8();
      uint64_t v43 = (void *)sub_10002C8DC();
      *(void *)(v22 + 144) = v43;
      sub_100059220(v43, (uint64_t)sub_100050BC8);
      sub_100026AFC();
      return sub_1000534B8(v44, v45);
    }
  }

uint64_t sub_1000509C8()
{
  *(void *)(v0 + 128) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    __int128 v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100050D58;
  }
  else {
    __int128 v4 = sub_100050A18;
  }
  return sub_100020908((uint64_t)v4, *(void *)(v0 + 104), 0LL);
}

uint64_t sub_100050A18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  a22 = v24;
  swift_unknownObjectRelease(*(void *)(v24 + 112));
  uint64_t v27 = *(void *)(v24 + 104);
  sub_100059580();
  uint64_t v54 = v28;
  if (!v29) {
    sub_1000593EC();
  }
  char v53 = *(_BYTE *)(v24 + 184);
  sub_10000534C(&qword_10008A808);
  uint64_t v30 = sub_10000534C(&qword_10008A810);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(void *)(v31 + 72);
  uint64_t v33 = *(unsigned __int8 *)(v31 + 80);
  uint64_t v34 = (v33 + 32) & ~v33;
  uint64_t v35 = sub_100059574(v34 + 2 * v32, v33);
  *(_OWORD *)(v35 + swift_weakDestroy(v0 + 16) = xmmword_100069590;
  uint64_t v36 = (void *)(v35 + v34);
  uint64_t v37 = (void *)(v35 + v34 + *(int *)(v30 + 48));
  sub_100059560();
  *uint64_t v36 = v38;
  v36[1] = 0xE700000000000000LL;
  void *v37 = 0LL;
  uint64_t v39 = sub_1000083F4();
  sub_100059140((uint64_t)v37, v39);
  char v40 = (void *)sub_1000593BC((uint64_t)v36 + v32);
  void *v41 = v42;
  v41[1] = 0xE700000000000000LL;
  *char v40 = 1LL;
  sub_100059140((uint64_t)v40, v39);
  uint64_t v43 = Dictionary.init(dictionaryLiteral:)(v35, &type metadata for String, v39, &protocol witness table for String);
  uint64_t v44 = *(void *)(v27 + 160);
  uint64_t v45 = *(void *)(v27 + 168);
  sub_10001AC84();
  char v46 = (void *)sub_100008124(v53, v44, v45);
  sub_10001ABA0();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v43);
  a12 = v43;
  sub_100057B78(v46, (uint64_t)sub_1000586C4, 0LL, isUniquelyReferenced_nonNull_native, (uint64_t)&a12);
  if (v54)
  {
    sub_100026B18();
    return swift_bridgeObjectRelease(v48);
  }

  else
  {
    sub_1000592D0();
    sub_1000083B8();
    BOOL v50 = (void *)sub_10002C8DC();
    *(void *)(v24 + 144) = v50;
    sub_100059220(v50, (uint64_t)sub_100050BC8);
    sub_100026B18();
    return sub_1000534B8(v51, v52);
  }

uint64_t sub_100050BC8()
{
  uint64_t v5 = *v0;
  sub_1000590B0(*(void *)(v5 + 144), &v5);
  sub_10000FFD8();
  sub_10001AC0C();
  return sub_100020908(v1, v2, v3);
}

void sub_100050C14()
{
  *(_BYTE *)(*(void *)(v0 + 104) + OBJC_IVAR____TtC13rtcreportingd7Session_receivedEnd) = 1;
  uint64_t v1 = qword_1000933B0;
  *(void *)(v0 + 152) = qword_1000933B0;
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 104);
    sub_100010324();
    sub_100006AF0();
    uint64_t v3 = *(void *)(v2 + 112);
    uint64_t v4 = *(void *)(v2 + 120);
    uint64_t v5 = (void *)swift_task_alloc(dword_10008B68C);
    *(void *)(v0 + 16sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100050CA8;
    sub_10002A960(v3, v4, *(_BYTE *)(v0 + 184));
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100050CA8()
{
  v0[21] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    uint64_t v4 = v0[13];
    uint64_t v5 = sub_100051044;
  }

  else
  {
    uint64_t v6 = v0[13];
    swift_release(v0[19]);
    uint64_t v5 = sub_100050D08;
    uint64_t v4 = v6;
  }

  return sub_100020908((uint64_t)v5, v4, 0LL);
}

uint64_t sub_100050D08()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 104) + 184LL);
  *(void *)(v0 + 176) = v1;
  return sub_10001CBC8((uint64_t)sub_100050D20, v1);
}

uint64_t sub_100050D20()
{
  return sub_100020908(v1, v2, v3);
}

uint64_t sub_100050D58( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, os_log_type_t type, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29)
{
  a28 = v30;
  a29 = v31;
  a27 = v29;
  if (qword_10008A0A8 != -1) {
    swift_once(&qword_10008A0A8, sub_100051C5C);
  }
  uint64_t v32 = *(void *)(v29 + 128);
  uint64_t v33 = sub_10001030C();
  sub_10000D34C(v33, (uint64_t)qword_10008C270);
  swift_errorRetain(v32);
  swift_errorRetain(v32);
  uint64_t v34 = sub_100010324();
  uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v36 = static os_log_type_t.error.getter();
  uint64_t v37 = v36;
  BOOL v38 = os_log_type_enabled(v35, v36);
  uint64_t v39 = *(void *)(v29 + 128);
  uint64_t v40 = *(void *)(v29 + 104);
  if (v38)
  {
    uint64_t v63 = *(void *)(v29 + 112);
    uint64_t v41 = swift_slowAlloc(22LL, -1LL);
    uint64_t v61 = sub_1000100B0(64LL);
    a17 = v61;
    *(_DWORD *)uint64_t v41 = 136315394;
    os_log_type_t typea = v37;
    uint64_t v42 = *(void *)(v40 + 112);
    sub_10001AC84();
    *(void *)(v29 + 72) = sub_10005954C(v42, v43, &a17);
    sub_100059394(v29 + 72, v29 + 80);
    sub_10001020C();
    sub_10001ABA0();
    *(_WORD *)(v41 + 12) = 2080;
    uint64_t v37 = v41 + 14;
    swift_getErrorValue(v39, v29 + 80, v29 + 16);
    uint64_t v44 = sub_100026AB8();
    *(void *)(v29 + 96) = sub_100019964(v44, v45, &a17);
    sub_100059394(v29 + 96, v29 + 104);
    sub_10000FFD8();
    sub_100015768();
    sub_100015768();
    _os_log_impl( (void *)&_mh_execute_header,  v35,  typea,  "failed to send cached non-realtime events for session %s on session end: %s",  (uint8_t *)v41,  0x16u);
    swift_arrayDestroy(v61, 2LL);
    sub_100010010(v61);
    sub_100010010(v41);

    swift_unknownObjectRelease(v63);
    sub_100015768();
  }

  else
  {
    swift_unknownObjectRelease(*(void *)(v29 + 112));
    sub_100015768();
    sub_10001020C();
    sub_100015768();
    sub_100015768();
  }

  sub_100059580();
  if (v46)
  {
    char v62 = 0;
  }

  else
  {
    sub_1000593EC();
    char v62 = v47;
  }

  char v64 = *(_BYTE *)(v29 + 184);
  sub_10000534C(&qword_10008A808);
  uint64_t v48 = sub_10000534C(&qword_10008A810);
  os_log_type_t v49 = (__n128 *)sub_100059018(v48);
  uint64_t v50 = sub_100058F78(v49, (__n128)xmmword_100069590);
  sub_100059140(v37, v50);
  uint64_t v51 = sub_100058FAC();
  uint64_t v53 = sub_1000595E8(v51, (uint64_t)&type metadata for String, v52, (uint64_t)&protocol witness table for String);
  sub_100010198();
  uint64_t v54 = (void *)sub_10005952C(v64);
  sub_100006CAC();
  char v55 = sub_100059618();
  a17 = v53;
  sub_1000592F8(v54, (uint64_t)sub_1000586C4, v56, v55, (uint64_t)&a17);
  if (v53) {
    return sub_100059094(0x8000000000000000LL);
  }
  sub_1000592D0();
  sub_1000083B8();
  uint64_t v58 = (void *)sub_10002C8DC();
  *(void *)(v29 + 144) = v58;
  uint64_t v59 = sub_100059220(v58, (uint64_t)sub_100050BC8);
  return sub_100059078(v59, v62);
}

uint64_t sub_100051044( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22)
{
  a21 = v23;
  a22 = v24;
  a20 = v22;
  swift_release(v22[19]);
  if (qword_10008A0A8 != -1) {
    swift_once(&qword_10008A0A8, sub_100051C5C);
  }
  uint64_t v25 = sub_10001030C();
  sub_10000D34C(v25, (uint64_t)qword_10008C270);
  sub_100059490();
  sub_100059490();
  uint64_t v26 = (os_log_s *)sub_10001ACC8();
  os_log_type_t v27 = static os_log_type_t.fault.getter();
  BOOL v28 = sub_1000593E4(v26);
  uint64_t v29 = v22[21];
  if (v28)
  {
    uint64_t v30 = (uint8_t *)sub_1000100B0(12LL);
    uint64_t v31 = sub_1000100B0(32LL);
    a11 = v31;
    *(_DWORD *)uint64_t v30 = 136446210;
    swift_getErrorValue(v29, v22 + 11, v22 + 5);
    uint64_t v32 = Error.localizedDescription.getter(v22[6], v22[7]);
    v22[8] = sub_100019964(v32, v33, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v22 + 8, v22 + 9, v30 + 4);
    sub_10000FFD8();
    sub_100026B40();
    sub_100026B40();
    sub_10001AA70((void *)&_mh_execute_header, v26, v27, "failed to mark session closed: %{public}s", v30);
    sub_10001AA68(v31);
    sub_100010010(v31);
    sub_100010010((uint64_t)v30);

    sub_100026B40();
  }

  else
  {
    sub_100026B40();
    sub_100026B40();
    sub_100026B40();
  }

  uint64_t v34 = *(void *)(v22[13] + 184LL);
  v22[22] = v34;
  return sub_10002F5F8((uint64_t)sub_100050D20, v34, 0LL);
}

void sub_1000511DC()
{
}

void sub_1000511FC()
{
}

uint64_t sub_10005121C(uint64_t a1)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch(sub_100051234, v1, 0LL);
}

uint64_t sub_100051234()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 112LL);
  *(void *)(v0 + 32) = v1;
  return sub_10001CBC8((uint64_t)sub_10005124C, v1);
}

uint64_t sub_10005124C()
{
  uint64_t v1 = sub_100003B34(0xD00000000000009BLL, 0x800000010006F300LL);
  sub_1000512D0(v1, *(void *)(v0 + 16));
  sub_10001020C();
  return sub_10002C73C((uint64_t)sub_1000275BC, *(void *)(v0 + 24), 0LL);
}

uint64_t sub_1000512D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  getTimeIntervalSince1970(Date:)();
  uint64_t v6 = v5;
  uint64_t v7 = sub_10000534C(&qword_10008A568);
  uint64_t inited = swift_initStackObject(v7, v21);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10006C1F0;
  uint64_t v10 = *(void *)(a2 + 112);
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = &off_100082198;
  *(void *)(inited + 32) = v10;
  *(void *)(inited + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v9;
  uint64_t v11 = *(unsigned __int8 *)(a2 + 240);
  *(void *)(inited + 96) = &type metadata for Int;
  *(void *)(inited + 104) = &off_100082138;
  *(void *)(inited + 72) = v11;
  uint64_t v12 = *(void *)(a2 + 192);
  uint64_t v13 = *(void *)(a2 + 200);
  *(void *)(inited + 136) = &type metadata for String;
  *(void *)(inited + 144) = &off_100082198;
  *(void *)(inited + 112) = v12;
  *(void *)(inited + 12sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v13;
  uint64_t v14 = *(void *)(a2 + 208);
  uint64_t v15 = *(void *)(a2 + 216);
  *(void *)(inited + 176) = &type metadata for String;
  *(void *)(inited + 184) = &off_100082198;
  *(void *)(inited + 152) = v14;
  *(void *)(inited + 16sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v15;
  uint64_t v16 = *(void *)(a2 + 224);
  uint64_t v17 = *(void *)(a2 + 232);
  *(void *)(inited + 2swift_weakDestroy(v0 + 16) = &type metadata for String;
  *(void *)(inited + 224) = &off_100082198;
  *(void *)(inited + 192) = v16;
  *(void *)(inited + 20sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v17;
  uint64_t v18 = *(void *)(a2 + 128);
  *(void *)(inited + 256) = &type metadata for Double;
  *(void *)(inited + 264) = &off_100082178;
  *(void *)(inited + 232) = v18;
  *(void *)(inited + 296) = &type metadata for Int64;
  *(void *)(inited + 304) = &off_100082158;
  *(void *)(inited + 272) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000039C8(inited);
  if (v3)
  {
    swift_setDeallocating(inited);
    return sub_10002C378();
  }

  else
  {
    swift_setDeallocating(inited);
    sub_10002C378();
    do
    {
      uint64_t v20 = sub_1000031C0();
      uint64_t result = swift_release(v20);
    }

    while (v20);
  }

  return result;
}

void sub_100051454()
{
}

void sub_100051474()
{
}

uint64_t sub_100051494(uint64_t a1, uint64_t a2)
{
  v3[28] = a2;
  v3[29] = v2;
  v3[27] = a1;
  uint64_t v4 = *(void *)(type metadata accessor for SessionConfiguration.Backend(0LL) - 8);
  v3[30] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[31] = swift_task_alloc(v5);
  v3[32] = swift_task_alloc(v5);
  return swift_task_switch(sub_100051504, v2, 0LL);
}

uint64_t sub_100051504()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 216) + 8LL);
  *(void *)(v0 + 208) = v1;
  *(void *)(v0 + 264) = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 272) = v2;
  if (v2 == 1)
  {
    uint64_t v4 = *(_OWORD **)(v0 + 224);
    uint64_t v5 = *(unsigned __int8 *)(*(void *)(v0 + 240) + 80LL);
    sub_100034734( v1 + ((v5 + 32) & ~v5),  *(void *)(v0 + 256),  type metadata accessor for SessionConfiguration.Backend);
    __int128 v6 = v4[14];
    __int128 v7 = v4[12];
    *(_OWORD *)(v0 + 32) = v4[13];
    *(_OWORD *)(v0 + 48) = v6;
    *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = v7;
    *(_OWORD *)(v0 + 112) = v4[12];
    __int128 v8 = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 192) = v8;
    swift_retain(v4);
    sub_1000306D8();
    sub_1000306E0();
    sub_10004D414();
    uint64_t v9 = (void *)swift_task_alloc(dword_10008B824);
    *(void *)(v0 + 28sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v9;
    sub_10004D33C(v9, (uint64_t)sub_10005170C);
    uint64_t v10 = v0 + 16;
  }

  else
  {
    if (!v2)
    {
      sub_10004D540();
      sub_10001AB88();
      return (*(uint64_t (**)(void, void))(v0 + 8))(0LL, 0LL);
    }

    uint64_t v11 = *(void *)(v0 + 240);
    uint64_t v12 = *(_OWORD **)(v0 + 224);
    sub_1000050E0();
    __int128 v13 = v12[14];
    __int128 v14 = v12[12];
    *(_OWORD *)(v0 + 8sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v12[13];
    *(_OWORD *)(v0 + 96) = v13;
    *(_OWORD *)(v0 + 64) = v14;
    *(_OWORD *)(v0 + 16sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v12[12];
    __int128 v15 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 128) = v15;
    int v16 = *(_DWORD *)(v11 + 80);
    *(_DWORD *)(v0 + 36sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v16;
    *(void *)(v0 + 312) = v17;
    *(void *)(v0 + 32sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = 1LL;
    uint64_t v18 = *(void *)(v0 + 248);
    uint64_t v19 = *(void *)(v0 + 224);
    uint64_t v20 = *(void *)(v0 + 264) + ((v16 + 32LL) & ~(unint64_t)v16);
    sub_1000083B8();
    sub_100034734(v20, v18, type metadata accessor for SessionConfiguration.Backend);
    swift_retain(v19);
    sub_10004D414();
    sub_1000306E0();
    sub_1000306D8();
    uint64_t v21 = (void *)swift_task_alloc(dword_10008B824);
    *(void *)(v0 + 328) = v21;
    sub_10004D33C(v21, (uint64_t)sub_100051844);
    uint64_t v10 = v0 + 64;
  }

  return sub_10002FD00(v10);
}

uint64_t sub_10005170C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t a18)
{
  a17 = v20;
  a18 = v21;
  a16 = (uint64_t *)v19;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  a16 = *v19;
  uint64_t v26 = a16;
  sub_100026B94(&a16);
  v26[36] = v18;
  swift_task_dealloc(v27);
  if (v18)
  {
    sub_100034760(v26[32], type metadata accessor for SessionConfiguration.Backend);
  }

  else
  {
    v26[37] = v23;
    v26[38] = v25;
  }

  sub_1000082EC((uint64_t)(v26 + 14));
  sub_100030674();
  sub_10004D22C();
  sub_100026B34();
  return sub_100030618(v28, v29, v30);
}

uint64_t sub_1000517B4()
{
  uint64_t v1 = sub_10004C140( *(void *)(v0 + 224),  *(void *)(v0 + 256),  *(void *)(v0 + 304),  *(void *)(v0 + 296),  *(_BYTE *)(*(void *)(v0 + 224) + 240LL) == 1,  *(void *)(v0 + 232));
  uint64_t v3 = v2;
  uint64_t v4 = sub_10000FFD8();
  sub_1000353C0(v4, type metadata accessor for SessionConfiguration.Backend);
  sub_100010254();
  sub_10004D540();
  sub_10001AB88();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v3);
}

uint64_t sub_100051844( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18)
{
  a17 = v20;
  a18 = v21;
  a16 = v19;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  a16 = (void *)*v19;
  uint64_t v26 = a16;
  sub_100026B94(&a16);
  v26[42] = v18;
  swift_task_dealloc(v27);
  if (v18)
  {
    uint64_t v28 = v26[29];
    sub_10004D40C();
    sub_100030674();
    sub_10004D22C();
    sub_10000ECEC(v26 + 26);
    sub_1000083D4();
    uint64_t v29 = sub_100051AA0;
    uint64_t v30 = v28;
  }

  else
  {
    uint64_t v31 = v26[29];
    v26[43] = v23;
    v26[44] = v25;
    sub_10004D40C();
    sub_100030674();
    sub_10004D22C();
    uint64_t v29 = sub_1000518F0;
    uint64_t v30 = v31;
  }

  return sub_100030618((uint64_t)v29, v30, 0LL);
}

void sub_1000518F0()
{
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = sub_10004C140( *(void *)(v0 + 224),  *(void *)(v0 + 248),  *(void *)(v0 + 352),  *(void *)(v0 + 344),  *(_BYTE *)(*(void *)(v0 + 224) + 240LL) == 1,  *(void *)(v0 + 232));
  uint64_t v4 = v3;
  sub_10000FFD8();
  sub_100006BB4();
  unint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v0 + 312);
  if (v5 >= *(void *)(v1 + 24) >> 1)
  {
    sub_100059470();
    sub_1000050E0();
    uint64_t v6 = v16;
  }

  uint64_t v7 = *(void *)(v0 + 320);
  uint64_t v8 = *(void *)(v0 + 272);
  uint64_t v9 = *(void *)(v0 + 248);
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = v5 + 1;
  uint64_t v10 = v6 + 16 * v5;
  *(void *)(v10 + 32) = v2;
  *(void *)(v10 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v4;
  sub_100034760(v9, type metadata accessor for SessionConfiguration.Backend);
  if (v7 == v8)
  {
    sub_10000ECEC((void *)(v0 + 208));
    uint64_t v11 = type metadata accessor for BackendGroup();
    uint64_t v12 = swift_allocObject(v11, 120LL, 15LL);
    swift_defaultActor_initialize(v12);
    *(void *)(v12 + 112) = v6;
    sub_10004D540();
    sub_10001AB88();
    (*(void (**)(uint64_t, char **))(v0 + 8))(v12, &off_100083D70);
  }

  else
  {
    uint64_t v13 = *(void *)(v0 + 320);
    *(void *)(v0 + 312) = v6;
    *(void *)(v0 + 32sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
    }

    else
    {
      uint64_t v14 = *(void *)(v0 + 224);
      sub_100034734( *(void *)(v0 + 264)
      + ((*(unsigned __int8 *)(v0 + 360) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 360))
      + *(void *)(*(void *)(v0 + 240) + 72LL) * v13,
        *(void *)(v0 + 248),
        type metadata accessor for SessionConfiguration.Backend);
      swift_retain(v14);
      sub_1000306E0();
      sub_1000306D8();
      sub_1000080FC(v0 + 128);
      __int128 v15 = (void *)swift_task_alloc(dword_10008B824);
      *(void *)(v0 + 328) = v15;
      sub_10004D33C(v15, (uint64_t)sub_100051844);
      sub_10002FD00(v0 + 64);
    }
  }

uint64_t sub_100051AA0()
{
  return sub_10004D26C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100051AE4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 1;
}

void sub_100051B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain(a3);
  uint64_t v5 = sub_1000595F4();
  v4(v5);
  swift_unknownObjectRelease(a3);
  sub_100006C40();
}

uint64_t sub_100051B4C(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (a2)
    {
      uint64_t v3 = result;
      if (a2 <= 14)
      {
        return Data.InlineData.init(_:)(result, result + a2);
      }

      else
      {
        uint64_t v4 = type metadata accessor for __DataStorage(0LL);
        swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
        __DataStorage.init(bytes:length:)(v3, a2);
        if ((unint64_t)a2 >= 0x7FFFFFFF)
        {
          uint64_t v5 = type metadata accessor for Data.RangeReference(0LL);
          uint64_t result = swift_allocObject(v5, 32LL, 7LL);
          *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
          *(void *)(result + 24) = a2;
        }

        else
        {
          return a2 << 32;
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_100051C04(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000013LL;
  }
  else {
    return 0xD000000000000015LL;
  }
}

unint64_t sub_100051C40()
{
  return sub_100051C04(*v0);
}

double sub_100051C54()
{
  return *(double *)(v0 + 64);
}

uint64_t sub_100051C5C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000D940(v0, qword_10008C270);
  sub_10000D34C(v0, (uint64_t)qword_10008C270);
  return Logger.init(subsystem:category:)( 0xD000000000000017LL,  0x800000010006D6D0LL,  0x6E6F6973736573LL,  0xE700000000000000LL);
}

void sub_100051CD0()
{
}

void sub_100051CF0()
{
}

uint64_t sub_100051D10( int a1, uint64_t a2, _OWORD *a3, char a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, char a18, uint64_t a19)
{
  uint64_t v13 = v11;
  uint64_t v125 = a7;
  *(void *)(v12 + 432) = a19;
  *(void *)(v12 + 44sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v13;
  *(void *)(v12 + 424) = a2;
  *(void *)(v12 + 448) = *(void *)v13;
  uint64_t v16 = type metadata accessor for Locale(0LL);
  *(void *)(v12 + 456) = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  *(void *)(v12 + 464) = v17;
  *(void *)(v12 + 472) = sub_100008360(v17);
  uint64_t v120 = type metadata accessor for SHA256(0LL);
  uint64_t v116 = *(void *)(v120 - 8);
  uint64_t v121 = sub_100008360(v116);
  *(void *)(v12 + 48sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v121;
  uint64_t v18 = type metadata accessor for SHA256Digest(0LL);
  uint64_t v118 = *(void *)(v18 - 8);
  uint64_t v119 = v18;
  uint64_t v117 = sub_100008360(v118);
  *(void *)(v12 + 488) = v117;
  uint64_t v19 = type metadata accessor for String.Encoding(0LL);
  uint64_t v123 = *(void *)(v19 - 8);
  uint64_t v124 = v19;
  uint64_t v122 = sub_100008360(v123);
  *(void *)(v12 + 496) = v122;
  uint64_t v20 = type metadata accessor for UUID(0LL);
  uint64_t v127 = *(void *)(v20 - 8);
  uint64_t v128 = v20;
  *(void *)(v12 + 504) = sub_100008360(v127);
  uint64_t v21 = sub_10000534C(&qword_10008C540);
  uint64_t v129 = sub_100058F3C(v21);
  *(void *)(v12 + 512) = v129;
  uint64_t v22 = sub_100026B60();
  *(void *)(v12 + 52sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v22;
  uint64_t v23 = type metadata accessor for CachedSession(0LL);
  *(void *)(v12 + 528) = v23;
  uint64_t v126 = sub_100058F3C(v23);
  *(void *)(v12 + 536) = v126;
  uint64_t v24 = sub_100026B60();
  *(void *)(v12 + 544) = v24;
  uint64_t v25 = swift_defaultActor_initialize(v13);
  *(void *)(v12 + 552) = OBJC_IVAR____TtC13rtcreportingd7Session_creation;
  static Date.now.getter(v25);
  *(void *)(v13 + OBJC_IVAR____TtC13rtcreportingd7Session_sentEvents) = 0LL;
  uint64_t v26 = OBJC_IVAR____TtC13rtcreportingd7Session_realtimeBackend;
  *(void *)(v12 + 56sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = OBJC_IVAR____TtC13rtcreportingd7Session_realtimeBackend;
  uint64_t v27 = (uint64_t *)(v13 + v26);
  *uint64_t v27 = 0LL;
  v27[1] = 0LL;
  uint64_t v28 = OBJC_IVAR____TtC13rtcreportingd7Session_immediateBackend;
  *(void *)(v12 + 568) = OBJC_IVAR____TtC13rtcreportingd7Session_immediateBackend;
  uint64_t v29 = (void *)(v13 + v28);
  void *v29 = 0LL;
  v29[1] = 0LL;
  *(_BYTE *)(v13 + OBJC_IVAR____TtC13rtcreportingd7Session_haveNonRealtimeEvents) = 0;
  *(_BYTE *)(v13 + OBJC_IVAR____TtC13rtcreportingd7Session_sendingNonRealtimeEvents) = 0;
  *(_BYTE *)(v13 + OBJC_IVAR____TtC13rtcreportingd7Session_receivedEnd) = 0;
  uint64_t v30 = v13 + OBJC_IVAR____TtC13rtcreportingd7Session_user;
  *(_DWORD *)uint64_t v30 = a1;
  *(_BYTE *)(v30 + 4) = 0;
  *(void *)(v13 + 184) = a2;
  uint64_t v31 = *v27;
  *uint64_t v27 = 0LL;
  v27[1] = 0LL;
  sub_100010324();
  swift_unknownObjectRelease(v31);
  sub_100058D58(a19, v22, &qword_10008C540);
  if (_s10RTCUtility9XPCObjectOwet_0(v22, 1LL, v23) == 1)
  {
    sub_100035228(v22, &qword_10008C540);
    uint64_t v33 = (uint64_t)a6;
    if (a6)
    {
      uint64_t v34 = a5;
      sub_1000100D8();
      v35._uint64_t countAndFlagsBits = 46LL;
      v35._object = (void *)0xE100000000000000LL;
      String.append(_:)(v35);
      uint64_t v37 = UUID.init()(v36);
      *(void *)(v12 + 153) = UUID.uuid.getter(v37);
      *(_BYTE *)(v12 + 161) = v38;
      *(_BYTE *)(v12 + 162) = v39;
      *(_BYTE *)(v12 + 163) = v40;
      *(_BYTE *)(v12 + 164) = v41;
      *(_BYTE *)(v12 + 165) = v42;
      *(_BYTE *)(v12 + 166) = v43;
      *(_BYTE *)(v12 + 167) = v44;
      *(_BYTE *)(v12 + 168) = v45;
      uint64_t v46 = sub_10005966C();
      unint64_t v48 = v47;
      Swift::String v49 = Data.base64EncodedString(options:)(0LL);
      uint64_t v50 = sub_100004C44(v46, v48);
      sub_1000594D0( v50,  v51,  v52,  v53,  v54,  v55,  v56,  v57,  v115,  v116,  v117,  v118,  v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  v128);
      String.append(_:)(v49);
      sub_10001ABA0();
      uint64_t countAndFlagsBits = a5;
      object = a6;
      goto LABEL_7;
    }

    uint64_t v60 = UUID.init()(v32);
    *(void *)(v12 + 169) = UUID.uuid.getter(v60);
    *(_BYTE *)(v12 + 177) = v61;
    *(_BYTE *)(v12 + 178) = v62;
    *(_BYTE *)(v12 + 179) = v63;
    *(_BYTE *)(v12 + 18sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v64;
    *(_BYTE *)(v12 + 181) = v65;
    *(_BYTE *)(v12 + 182) = v66;
    *(_BYTE *)(v12 + 183) = v67;
    *(_BYTE *)(v12 + 184) = v68;
    uint64_t v69 = sub_10005966C();
    unint64_t v71 = v70;
    Swift::String v72 = Data.base64EncodedString(options:)(0LL);
    uint64_t countAndFlagsBits = v72._countAndFlagsBits;
    object = v72._object;
    uint64_t v73 = sub_100004C44(v69, v71);
    sub_1000594D0( v73,  v74,  v75,  v76,  v77,  v78,  v79,  v80,  v115,  v116,  v117,  v118,  v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v127,  v128);
  }

  else
  {
    sub_10003499C(v22, v24, type metadata accessor for CachedSession);
    uint64_t countAndFlagsBits = *(void *)(v24 + 48);
    object = *(void **)(v24 + 56);
    sub_100010198();
    sub_100034760(v24, type metadata accessor for CachedSession);
    uint64_t v33 = (uint64_t)a6;
  }

  uint64_t v34 = a5;
LABEL_7:
  *(void *)(v13 + 112) = countAndFlagsBits;
  *(void *)(v13 + 12sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = object;
  uint64_t v81 = OBJC_IVAR____TtC13rtcreportingd7Session_hierarchyID;
  *(void *)(v12 + 576) = OBJC_IVAR____TtC13rtcreportingd7Session_hierarchyID;
  uint64_t v82 = (uint64_t *)(v13 + v81);
  uint64_t *v82 = v34;
  v82[1] = v33;
  if ((a18 & 1) != 0)
  {
    sub_100058D58(a19, v129, &qword_10008C540);
    if (_s10RTCUtility9XPCObjectOwet_0(v129, 1LL, v23) == 1)
    {
      sub_100035228(v129, &qword_10008C540);
      if (a8)
      {
        static String.Encoding.utf8.getter(v84);
        String.data(using:allowLossyConversion:)(v122, 0LL, v125, a8);
        unint64_t v86 = v85;
        sub_10000FFD8();
        (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v122, v124);
        if (v86 >> 60 == 15)
        {
          *(_OWORD *)(v12 + 304) = *a3;
          sub_1000082EC(v12 + 304);
          *(_OWORD *)(v12 + 32sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = a3[1];
          sub_1000082EC(v12 + 320);
          *(_OWORD *)(v12 + 336) = a3[2];
          sub_100030674();
          unint64_t v87 = sub_100058D84();
          uint64_t v88 = sub_100006A70((uint64_t)&unk_100085B30, v87);
          *uint64_t v89 = 0;
          swift_willThrow(v88, v89, v90, v91, v92, v93, v94, v95);
          swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 440) + 120LL));
          swift_release(*(void *)(*(void *)(v12 + 440) + 184LL));
          uint64_t v96 = *(void *)(v12 + 568);
          uint64_t v97 = *(void *)(v12 + 560);
          uint64_t v98 = *(void *)(v12 + 440);
          uint64_t v99 = *(void *)(v12 + 432);
          uint64_t v100 = v98 + *(void *)(v12 + 576);
          uint64_t v101 = sub_10005935C();
          sub_10005933C(v101);
          swift_unknownObjectRelease(*(void *)(v98 + v97));
          swift_unknownObjectRelease(*(void *)(v98 + v96));
          swift_bridgeObjectRelease(*(void *)(v100 + 8));
          swift_defaultActor_destroy(v98);
          sub_100006CA4();
          sub_100035228(v99, &qword_10008C540);
          uint64_t v102 = sub_1000595F4();
          swift_deallocPartialClassInstance(v102);
          swift_task_dealloc(*(void *)(v12 + 544));
          sub_10001AB08();
          sub_10001AB28();
          sub_10001AB38();
          sub_10001AAF0();
          sub_10001ABA8();
          sub_10001AB60();
          sub_10001AB90();
          sub_10001AB98();
          sub_100059234();
          __asm { BR              X0 }
        }

        sub_1000069B0( (unint64_t *)&unk_10008C560,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
        dispatch thunk of HashFunction.init()();
        __asm { BR              X10 }
      }

      a17 = (double)arc4random_uniform(0x2710u) / 10000.0;
    }

    else
    {
      sub_10000FFD8();
      sub_10003499C(v129, v126, type metadata accessor for CachedSession);
      a17 = *(double *)(v126 + 64);
      uint64_t v104 = sub_1000590B8();
      sub_100034760(v104, v105);
    }
  }

  else
  {
    swift_bridgeObjectRelease(a8);
  }

  *(double *)(v13 + 128) = a17;
  *(void *)(v13 + 136) = _swiftEmptyArrayStorage;
  *(void *)(v13 + 144) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v13 + 152) = 0;
  *(void *)(v13 + 16sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = 1701736302LL;
  *(void *)(v13 + 168) = 0xE400000000000000LL;
  *(_BYTE *)(v13 + 176) = 2;
  __int128 v106 = *a3;
  __int128 v107 = a3[1];
  *(_OWORD *)(v12 + 288) = *a3;
  *(_OWORD *)(v12 + 352) = v107;
  __int128 v108 = a3[2];
  *(_OWORD *)(v12 + 368) = v108;
  *(_OWORD *)(v13 + 208) = v107;
  *(_OWORD *)(v13 + 224) = v108;
  *(_OWORD *)(v13 + 192) = v106;
  *(_BYTE *)(v13 + 24sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = a4;
  sub_1000080FC(v12 + 288);
  sub_1000306D8();
  sub_10004D414();
  sub_1000083B8();
  uint64_t v109 = (void *)sub_10002C8DC();
  *(void *)(v12 + 584) = v109;
  *uint64_t v109 = v12;
  v109[1] = sub_1000526AC;
  sub_100059234();
  return sub_100007778(v110, v111, v112, v113);
}

uint64_t sub_1000526AC()
{
  if (v0)
  {
    swift_bridgeObjectRelease(*(void *)(v2[55] + 120LL));
    uint64_t v4 = (void *)v2[55];
    swift_bridgeObjectRelease(v4[17]);
    sub_100006AF0();
    sub_1000083D4();
    swift_release(v4[23]);
    swift_bridgeObjectRelease(v4[25]);
    sub_100006AF0();
    sub_1000083D4();
    uint64_t v5 = v2[71];
    uint64_t v6 = v2[70];
    uint64_t v7 = v2[55];
    uint64_t v8 = v2[54];
    uint64_t v9 = v7 + v2[72];
    uint64_t v10 = sub_10005935C();
    sub_10005933C(v10);
    swift_unknownObjectRelease(*(void *)(v7 + v6));
    swift_unknownObjectRelease(*(void *)(v7 + v5));
    swift_bridgeObjectRelease(*(void *)(v9 + 8));
    swift_defaultActor_destroy(v7);
    sub_100006CA4();
    sub_100035228(v8, &qword_10008C540);
    uint64_t v11 = sub_100059330();
    swift_deallocPartialClassInstance(v11);
    sub_100058EF8();
    sub_10001AB08();
    sub_10001AB28();
    sub_10001AB38();
    sub_10001AAF0();
    sub_10001ABA8();
    sub_10001AB60();
    sub_10001AB90();
    sub_10001AB98();
    return sub_10001A94C(*(uint64_t (**)(void))(v1 + 8));
  }

  else
  {
    memcpy((void *)(v2[55] + OBJC_IVAR____TtC13rtcreportingd7Session_eventExtraFieldProvider), v2 + 2, 0x60uLL);
    sub_100026B34();
    return sub_10002F5F8(v13, v14, v15);
  }

uint64_t sub_100052834()
{
  BOOL v2 = *(unsigned __int8 *)(*(void *)(v0 + 440) + 240LL) == 1;
  uint64_t v3 = (void *)sub_1000592C4();
  *(void *)(v0 + 592) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000528DC;
  return ((uint64_t (*)(uint64_t, void, BOOL))((char *)&unk_10008C240 + v1))( v0 + 112,  *(void *)(v0 + 440),  v2);
}

#error "1000529F0: call analysis failed (funcsize=186)"
#error "100052E18: call analysis failed (funcsize=151)"
#error "100053054: call analysis failed (funcsize=141)"
uint64_t sub_1000530A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t *v30;
  void *v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  sub_100059420();
  char v45 = v3;
  uint64_t v46 = v4;
  char v44 = v1;
  sub_10005910C();
  sub_10005900C(v2[83], v5);
  if (v0)
  {
    swift_release(v2[55]);
    sub_100010254();
    sub_100006C04();
    sub_100035228(v2[54], &qword_10008C540);
    sub_100058EF8();
    sub_10001AB08();
    sub_10001AB28();
    sub_10001AB38();
    sub_10001AAF0();
    sub_10001ABA8();
    sub_10001AB60();
    sub_10001AB90();
    sub_10001AB98();
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  else
  {
    char v38 = v1;
    uint64_t v7 = v2[59];
    char v41 = v2[58];
    char v42 = v2[57];
    swift_release(v2[82]);
    char v40 = sub_10000534C(&qword_10008A808);
    uint64_t v8 = sub_10000534C(&qword_10008A810);
    uint64_t v9 = *(void *)(v8 - 8);
    uint64_t v10 = *(void *)(v9 + 72);
    uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v12 = (v11 + 32) & ~v11;
    char v39 = v11 | 7;
    uint64_t v13 = swift_allocObject(v40, v12 + 2 * v10, v11 | 7);
    *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_100069590;
    uint64_t v14 = (void *)(v13 + v12);
    uint64_t v15 = (void *)(v13 + v12 + *(int *)(v8 + 48));
    sub_100059560();
    *uint64_t v14 = v16;
    v14[1] = 0xE700000000000000LL;
    *uint64_t v15 = 0LL;
    uint64_t v17 = sub_1000083F4();
    sub_100059140((uint64_t)v15, v17);
    uint64_t v18 = (void *)sub_1000593BC(v13 + v12 + v10);
    void *v19 = v20;
    v19[1] = 0xE700000000000000LL;
    *uint64_t v18 = 0LL;
    sub_100059140((uint64_t)v18, v17);
    uint64_t v21 = Dictionary.init(dictionaryLiteral:)(v13, &type metadata for String, v17, &protocol witness table for String);
    uint64_t v22 = ((uint64_t (*)(void))static Locale.current.getter)();
    uint64_t v23 = ((uint64_t (*)(uint64_t))Locale.regionCode.getter)(v22);
    uint64_t v25 = v24;
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v7, v42);
    if (v25) {
      uint64_t v26 = v23;
    }
    else {
      uint64_t v26 = 16191LL;
    }
    if (v25) {
      uint64_t v27 = v25;
    }
    else {
      uint64_t v27 = 0xE200000000000000LL;
    }
    uint64_t v28 = swift_allocObject(v40, v12 + v10, v39);
    *(_OWORD *)(v28 + swift_weakDestroy(v0 + 16) = xmmword_100069580;
    uint64_t v29 = (void *)(v28 + v12);
    uint64_t v30 = (uint64_t *)(v28 + v12 + *(int *)(v8 + 48));
    void *v29 = 0x656C61636F4CLL;
    v29[1] = 0xE600000000000000LL;
    *uint64_t v30 = v26;
    v30[1] = v27;
    swift_storeEnumTagMultiPayload(v30, v17, 0LL);
    uint64_t v31 = (void *)Dictionary.init(dictionaryLiteral:)( v28,  &type metadata for String,  v17,  &protocol witness table for String);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v21);
    char v43 = v21;
    sub_1000592F8(v31, (uint64_t)sub_1000586C4, v33, isUniquelyReferenced_nonNull_native, (uint64_t)&v43);
    if (v12)
    {
      return sub_100059094(0x8000000000000000LL);
    }

    else
    {
      uint64_t v34 = v2[55];
      Swift::String v35 = v43;
      v2[84] = v43;
      swift_bridgeObjectRelease(0x8000000000000000LL);
      uint64_t v36 = *(_BYTE *)(v34 + 240) == 1;
      uint64_t v37 = (void *)swift_task_alloc(dword_10008C49C);
      v2[85] = (uint64_t)v37;
      void *v37 = v38;
      v37[1] = sub_1000533A4;
      return sub_100059078(v35, v36);
    }
  }

#error "10005343C: call analysis failed (funcsize=51)"
uint64_t *sub_100053474@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  if (result && (unint64_t)(a2 - (void)result + 7) >= 0xF)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = 8 * ((a2 - (uint64_t)result) / 8);
    do
    {
      uint64_t v5 = *result++;
      v3 ^= v5;
      v4 -= 8LL;
    }

    while (v4);
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  *a3 = v3;
  return result;
}

uint64_t sub_1000534B8(uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 464) = a2;
  *(void *)(v3 + 344) = a1;
  *(void *)(v3 + 352) = v2;
  *(void *)(v3 + 36sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = *v2;
  uint64_t v4 = sub_10000534C((uint64_t *)&unk_10008C4A0);
  *(void *)(v3 + 368) = sub_100008360(*(void *)(v4 - 8));
  uint64_t v5 = sub_10000534C(&qword_10008A800);
  *(void *)(v3 + 376) = sub_100058F3C(v5);
  *(void *)(v3 + 384) = sub_100026B60();
  *(void *)(v3 + 392) = sub_100026B60();
  *(void *)(v3 + 40sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = sub_100026B60();
  sub_100026B34();
  return sub_100020908(v6, v7, v8);
}

uint64_t sub_100053534()
{
  uint64_t v6 = *(void *)(v1 + 352);
  uint64_t v7 = OBJC_IVAR____TtC13rtcreportingd7Session_sentEvents;
  uint64_t v8 = *(void *)(v6 + OBJC_IVAR____TtC13rtcreportingd7Session_sentEvents);
  BOOL v9 = __CFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9)
  {
    __break(1u);
LABEL_44:
    swift_once(&qword_10008A0A8, sub_100051C5C);
    goto LABEL_25;
  }

  uint64_t v11 = *(void *)(v1 + 400);
  uint64_t v12 = *(void *)(v1 + 344);
  *(void *)(v6 + OBJC_IVAR____TtC13rtcreportingd7Session_sentEvents) = v10;
  sub_10004F5A8(0x646F6874656D5FLL, 0xE700000000000000LL, v12, type metadata accessor for EventValue, v11);
  uint64_t v13 = sub_1000083F4();
  if (_s10RTCUtility9XPCObjectOwet_0(v11, 1LL, v13) != 1)
  {
    sub_100058D58(*(void *)(v1 + 400), *(void *)(v1 + 392), &qword_10008A800);
    int v14 = sub_100059620();
    if (v14 == 2)
    {
      *(void *)(v1 + 328) = **(void **)(v1 + 392);
      uint64_t v15 = &type metadata for UInt64;
      uint64_t v16 = &protocol witness table for UInt64;
      goto LABEL_7;
    }

    if (v14 == 1)
    {
      *(void *)(v1 + 336) = **(void **)(v1 + 392);
      uint64_t v15 = &type metadata for Int64;
      uint64_t v16 = &protocol witness table for Int64;
LABEL_7:
      uint64_t v114 = dispatch thunk of CustomStringConvertible.description.getter(v15, v16);
      uint64_t v4 = v17;
      goto LABEL_10;
    }

    sub_100034760(*(void *)(v1 + 392), type metadata accessor for EventValue);
  }

  uint64_t v4 = 0xE300000000000000LL;
  uint64_t v114 = 4079420LL;
LABEL_10:
  uint64_t v18 = *(void *)(v1 + 384);
  uint64_t v19 = *(void *)(v1 + 344);
  sub_100035228(*(void *)(v1 + 400), &qword_10008A800);
  sub_10004F5A8(0x7375746174735FLL, 0xE700000000000000LL, v19, type metadata accessor for EventValue, v18);
  if (_s10RTCUtility9XPCObjectOwet_0(v18, 1LL, v13) != 1)
  {
    sub_100058D58(*(void *)(v1 + 384), *(void *)(v1 + 376), &qword_10008A800);
    int v20 = sub_100059620();
    if (v20 == 2)
    {
      *(void *)(v1 + 312) = **(void **)(v1 + 376);
      uint64_t v21 = &type metadata for UInt64;
      uint64_t v22 = &protocol witness table for UInt64;
      uint64_t v3 = v1 + 312;
    }

    else
    {
      if (v20 != 1)
      {
        uint64_t v5 = 4079420LL;
        uint64_t v3 = v1 + 312;
        sub_100034760(*(void *)(v1 + 376), type metadata accessor for EventValue);
        goto LABEL_18;
      }

      uint64_t v3 = v1 + 312;
      *(void *)(v1 + 32sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = **(void **)(v1 + 376);
      uint64_t v21 = &type metadata for Int64;
      uint64_t v22 = &protocol witness table for Int64;
    }

    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
    unint64_t v0 = v23;
    goto LABEL_19;
  }

  uint64_t v5 = 4079420LL;
  uint64_t v3 = v1 + 312;
LABEL_18:
  unint64_t v0 = 0xE300000000000000LL;
LABEL_19:
  int v24 = *(unsigned __int8 *)(v1 + 464);
  sub_100035228(*(void *)(v1 + 384), &qword_10008A800);
  uint64_t v25 = 0x69746C616572202DLL;
  if (!v24) {
    uint64_t v25 = 0LL;
  }
  uint64_t v112 = v25;
  if (v24) {
    uint64_t v2 = 0xEA0000000000656DLL;
  }
  else {
    uint64_t v2 = 0xE000000000000000LL;
  }
  if (qword_10008A0A8 != -1) {
    goto LABEL_44;
  }
LABEL_25:
  uint64_t v26 = *(void *)(v1 + 352);
  uint64_t v27 = sub_10001030C();
  *(void *)(v1 + 408) = sub_10000D34C(v27, (uint64_t)qword_10008C270);
  swift_retain_n(v26, 6LL);
  sub_10001A9B8();
  sub_1000100D8();
  sub_1000101AC();
  uint64_t v28 = (os_log_s *)sub_10001ACC8();
  os_log_type_t v111 = static os_log_type_t.default.getter();
  BOOL v29 = os_log_type_enabled(v28, v111);
  uint64_t v30 = v0;
  uint64_t v31 = *(void **)(v1 + 352);
  if (!v29)
  {
    swift_release_n(*(void *)(v1 + 352), 6LL);
    sub_100010060(v4);
    sub_100010060(v30);
    sub_100010060(v2);

LABEL_29:
    uint64_t v52 = *(void *)(v1 + 344);
    uint64_t v51 = *(void *)(v1 + 352);
    uint64_t v35 = *(void *)(v51 + 112);
    *(void *)(v1 + 4swift_weakDestroy(v0 + 16) = v35;
    uint64_t v32 = *(void *)(v51 + 120);
    *(void *)(v1 + 424) = v32;
    memcpy( (void *)(v1 + 16),  (const void *)(v51 + OBJC_IVAR____TtC13rtcreportingd7Session_eventExtraFieldProvider),  0x60uLL);
    sub_1000101AC();
    sub_1000100D8();
    sub_100056FA8((void *)(v1 + 16));
    sub_100007BEC();
    uint64_t v54 = v53;
    char v55 = sub_100059618();
    v116[0] = v52;
    sub_100057810(v54, (uint64_t)sub_1000586C4, 0LL, v55, (uint64_t)v116);
    uint64_t v44 = v116[0];
    *(void *)(v1 + 432) = v116[0];
    swift_bridgeObjectRelease(0x8000000000000000LL);
    sub_100058724((void *)(v1 + 16));
    uint64_t v56 = qword_10008A080;
    sub_1000101AC();
    uint64_t result = sub_1000083B0();
    if (v56 == -1) {
      goto LABEL_30;
    }
    goto LABEL_46;
  }

  uint64_t v105 = v2;
  unint64_t v106 = v30;
  uint64_t v107 = v4;
  uint64_t v108 = v5;
  uint64_t v109 = v3;
  uint64_t v110 = v6;
  uint64_t v32 = sub_1000100B0(62LL);
  uint64_t v104 = sub_1000100B0(160LL);
  v116[0] = v104;
  *(_DWORD *)uint64_t v32 = 136447490;
  uint64_t v33 = v31[14];
  sub_1000083B8();
  *(void *)(v1 + 264) = sub_1000596AC(v33, v34, v116);
  sub_100059394(v1 + 264, v1 + 272);
  sub_100006AF0();
  sub_10001A98C((uint64_t)v31);
  *(_WORD *)(v32 + 12) = 2082;
  uint64_t v35 = v31[25];
  uint64_t v36 = v31[26];
  uint64_t v37 = v31[27];
  uint64_t v38 = v31[28];
  uint64_t v39 = v31[29];
  *(void *)(v1 + 112) = v31[24];
  *(void *)(v1 + 12sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v35;
  *(void *)(v1 + 128) = v36;
  *(void *)(v1 + 136) = v37;
  *(void *)(v1 + 144) = v38;
  *(void *)(v1 + 152) = v39;
  sub_100010198();
  sub_10001AC84();
  sub_100010290();
  uint64_t v40 = sub_1000157F4();
  uint64_t v41 = v7;
  unint64_t v43 = v42;
  sub_100006CAC();
  swift_bridgeObjectRelease(v37);
  sub_10001ABFC();
  *(void *)(v1 + 272) = sub_100019964(v40, v43, v116);
  sub_10001AA80(v1 + 272, v1 + 280);
  sub_100010278();
  sub_10001A98C((uint64_t)v31);
  *(_WORD *)(v32 + 22) = 2050;
  uint64_t v44 = *(void *)(v110 + v41);
  sub_100010254();
  if (v44)
  {
    *(void *)(v1 + 28sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v44 - 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 280, v1 + 288, v32 + 24);
    sub_100006CA4();
    *(_WORD *)(v32 + 32) = 2082;
    sub_10001AC84();
    *(void *)(v1 + 288) = sub_10005954C(v114, v45, v116);
    uint64_t v46 = sub_1000595F4();
    sub_100059394(v46, v47);
    sub_10001AA78(v107);
    *(_WORD *)(v32 + 42) = 2082;
    sub_100010198();
    *(void *)(v1 + 296) = sub_100019964(v108, v106, v116);
    uint64_t v48 = sub_1000590B8();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v48, v49, v32 + 44);
    sub_10001AA78(v106);
    *(_WORD *)(v32 + 52) = 2080;
    sub_1000100D8();
    *(void *)(v1 + 304) = sub_10001AC04(v112, v50, v116);
    sub_10001AA80(v1 + 304, v109);
    sub_10001AA78(v105);
    _os_log_impl( (void *)&_mh_execute_header,  v28,  v111,  "session %{public}s (%{public}s) sending message %{public}llu %{public}s:%{public}s%s",  (uint8_t *)v32,  0x3Eu);
    swift_arrayDestroy(v104, 5LL);
    sub_100010010(v104);
    sub_100010010(v32);

    goto LABEL_29;
  }

  __break(1u);
LABEL_46:
  uint64_t result = swift_once(&qword_10008A080, sub_10004D6A0);
LABEL_30:
  if ((byte_1000933D8 & 1) != 0)
  {
    uint64_t v58 = *(void *)(v1 + 368);
    uint64_t v59 = *(void *)(v1 + 352);
    uint64_t v60 = sub_10001AC74();
    sub_10003E41C(v58, v61, v62, v60);
    sub_1000069B0(&qword_10008C4B8, type metadata accessor for Session, (uint64_t)&unk_10006C084);
    uint64_t v64 = v63;
    char v65 = (void *)sub_100006B14((uint64_t)&unk_100085A98, 64LL);
    v65[2] = v59;
    v65[3] = v64;
    v65[4] = v59;
    v65[5] = v35;
    v65[6] = v32;
    v65[7] = v44;
    swift_retain_n(v59, 2LL);
    sub_1000101AC();
    sub_1000083B0();
    uint64_t v66 = sub_10004FDF8(v58, (uint64_t)&unk_10008C4E0, (uint64_t)v65);
    uint64_t result = swift_release(v66);
  }

  char v67 = (_BYTE *)(v1 + 464);
  uint64_t v68 = *(void *)(v1 + 352);
  uint64_t v69 = *(void *)(v68 + OBJC_IVAR____TtC13rtcreportingd7Session_immediateBackend);
  if (v69)
  {
    uint64_t v70 = *(void *)(v1 + 368);
    uint64_t v113 = *(void *)(v1 + 360);
    uint64_t v71 = *(void *)(v68 + OBJC_IVAR____TtC13rtcreportingd7Session_immediateBackend + 8);
    uint64_t v72 = type metadata accessor for TaskPriority(0LL);
    sub_10003E41C(v70, v73, v74, v72);
    sub_1000069B0(&qword_10008C4B8, type metadata accessor for Session, (uint64_t)&unk_10006C084);
    uint64_t v76 = v75;
    uint64_t v77 = (void *)sub_100006B14((uint64_t)&unk_100085A70, 88LL);
    void v77[2] = v68;
    v77[3] = v76;
    v77[4] = v69;
    v77[5] = v71;
    v77[6] = v35;
    v77[7] = v32;
    v77[8] = v44;
    v77[9] = v68;
    v77[10] = v113;
    sub_100059318();
    sub_1000101AC();
    sub_1000083B0();
    uint64_t v78 = swift_unknownObjectRetain(v69);
    uint64_t v79 = sub_100059600(v78, (uint64_t)&unk_10008C4D0);
    uint64_t result = swift_release(v79);
    char v67 = (_BYTE *)(v1 + 464);
  }

  if ((*v67 & 1) != 0)
  {
    uint64_t v80 = *(void *)(v1 + 352);
    sub_100006BBC();
    sub_10000FFD8();
    uint64_t v81 = v80 + OBJC_IVAR____TtC13rtcreportingd7Session_realtimeBackend;
    uint64_t v82 = *(void *)(v80 + OBJC_IVAR____TtC13rtcreportingd7Session_realtimeBackend);
    if (v82)
    {
      uint64_t v83 = *(void *)(v1 + 368);
      uint64_t v115 = *(void *)(v1 + 360);
      uint64_t v84 = *(void *)(v1 + 352);
      uint64_t v85 = *(void *)(v81 + 8);
      uint64_t v86 = sub_10001AC74();
      sub_10003E41C(v83, v87, v88, v86);
      sub_1000069B0(&qword_10008C4B8, type metadata accessor for Session, (uint64_t)&unk_10006C084);
      uint64_t v90 = v89;
      uint64_t v91 = (void *)sub_100006B14((uint64_t)&unk_100085A48, 88LL);
      v91[2] = v84;
      v91[3] = v90;
      v91[4] = v84;
      v91[5] = v82;
      v91[6] = v85;
      v91[7] = v35;
      v91[8] = v32;
      v91[9] = v44;
      v91[10] = v115;
      sub_100059318();
      uint64_t v92 = swift_unknownObjectRetain(v82);
      uint64_t v93 = sub_100059600(v92, (uint64_t)&unk_10008C4C0);
      swift_release(v93);
    }

    else
    {
      sub_100006BBC();
      uint64_t v99 = sub_10000FFD8();
      uint64_t v100 = (os_log_s *)Logger.logObject.getter(v99);
      os_log_type_t v101 = static os_log_type_t.fault.getter();
      if (sub_10001AB10(v101))
      {
        uint64_t v102 = (uint8_t *)sub_1000100B0(2LL);
        *(_WORD *)uint64_t v102 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v100,  OS_LOG_TYPE_DEFAULT,  "no backend for realtime session",  v102,  2u);
        sub_100010010((uint64_t)v102);
      }
    }

    sub_100059184();
    sub_10001AB88();
    sub_10001AB08();
    sub_10001AB28();
    sub_10001AB38();
    sub_10005944C();
    __asm { BR              X0 }
  }

  uint64_t v94 = qword_1000933B0;
  *(void *)(v1 + 44sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = qword_1000933B0;
  if (v94)
  {
    sub_10001AA24();
    sub_100006BBC();
    sub_10000FFD8();
    uint64_t v95 = (void *)swift_task_alloc(dword_10008B684);
    *(void *)(v1 + 448) = v95;
    *uint64_t v95 = v1;
    v95[1] = sub_100053E84;
    sub_10005944C();
    return sub_10002A498(v96, v97, v98);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100053E84()
{
  *(void *)(v0 + 456) = v1;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(*(void *)(v0 + 424));
  sub_100006BBC();
  sub_100010254();
  sub_10001AC0C();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_100053EF8()
{
  uint64_t v1 = *(void *)(v0 + 352);
  if (*(_BYTE *)(v1 + 240) == 1) {
    *(_BYTE *)(v1 + OBJC_IVAR____TtC13rtcreportingd7Session_haveNonRealtimeEvents) = 1;
  }
  sub_100059184();
  sub_10001AB88();
  sub_10001AB08();
  sub_10001AB28();
  sub_10001AB38();
  return sub_10001CC0C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100053F58( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  a22 = v24;
  uint64_t v27 = (os_log_s *)v24[57];
  sub_100047618();
  sub_100026A40();
  sub_100047618();
  uint64_t v28 = sub_100026A40();
  Logger.logObject.getter(v28);
  os_log_type_t v29 = sub_10005950C();
  if (sub_1000593E4(v27))
  {
    a10 = v24 + 32;
    a11 = v24[57];
    uint64_t v30 = v24[52];
    unint64_t v31 = v24[53];
    uint64_t v32 = (void *)v24[44];
    uint64_t v33 = sub_1000100B0(32LL);
    a12 = sub_1000100B0(96LL);
    a13 = a12;
    *(_DWORD *)uint64_t v33 = 136446722;
    sub_100010290();
    v24[31] = sub_100019964(v30, v31, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v24 + 31, v24 + 32, v33 + 4);
    sub_10001ABFC();
    *(_WORD *)(v33 + 12) = 2082;
    uint64_t v34 = v32[25];
    uint64_t v35 = v32[26];
    uint64_t v36 = v32[27];
    uint64_t v37 = v32[28];
    uint64_t v38 = v32[29];
    v24[20] = v32[24];
    v24[21] = v34;
    v24[22] = v35;
    v24[23] = v36;
    v24[24] = v37;
    v24[25] = v38;
    sub_10001AC84();
    sub_100010270();
    sub_100010290();
    uint64_t v39 = sub_1000157F4();
    sub_10001ABA0();
    sub_100010278();
    sub_10001ABFC();
    v24[29] = sub_10001AC04(v39, v40, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v24 + 29, v24 + 30, v33 + 14);
    sub_1000083D4();
    sub_10001A98C((uint64_t)v32);
    *(_WORD *)(v33 + 22) = 2082;
    swift_getErrorValue(a11, v24 + 30, v24 + 26);
    uint64_t v41 = Error.localizedDescription.getter(v24[27], v24[28]);
    v24[32] = sub_100019964(v41, v42, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v24 + 32, v24 + 33, v33 + 24);
    sub_10000FFD8();
    sub_1000476B8();
    sub_1000476B8();
    sub_1000595A0( (void *)&_mh_execute_header,  v27,  v29,  "session %{public}s (%{public}s): failed to cache event: %{public}s");
    swift_arrayDestroy(a12, 3LL);
    sub_100010010(a12);
    sub_100010010(v33);

    sub_1000476B8();
  }

  else
  {
    uint64_t v43 = v24[44];
    sub_10003B5F0();
    sub_10001A98C(v43);
    sub_10003B5F0();
    sub_10003B5F0();
  }

  sub_100059184();
  sub_10001AB88();
  sub_10001AB08();
  sub_10001AB28();
  sub_10001AB38();
  sub_100026B18();
  return v44(v44, v45, v46, v47, v48, v49, v50, v51, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_100054194(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = a4;
  uint64_t v52 = a3;
  uint64_t v6 = sub_10000534C(&qword_10008A800);
  uint64_t v7 = __chkstk_darwin(v6);
  BOOL v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v49 - v10;
  uint64_t v12 = type metadata accessor for EventValue(0LL);
  __chkstk_darwin(v12);
  int v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_10000534C(&qword_10008BFA0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for XPCObject(0LL);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  unint64_t v23 = (char *)&v49 - v22;
  uint64_t v50 = String.init(cString:)(a1);
  uint64_t v25 = v24;
  uint64_t v26 = (void *)swift_unknownObjectRetain(a2);
  XPCObject.init(_:)(v26, (uint64_t)v17);
  if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v17, 1LL, v18) == 1)
  {
    swift_bridgeObjectRelease(v25);
    uint64_t v27 = &qword_10008BFA0;
    uint64_t v28 = (uint64_t)v17;
  }

  else
  {
    sub_10003499C((uint64_t)v17, (uint64_t)v23, type metadata accessor for XPCObject);
    sub_100034734((uint64_t)v23, (uint64_t)v21, type metadata accessor for XPCObject);
    sub_100031D08();
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v11, 1LL, v12) != 1)
    {
      sub_10003499C((uint64_t)v11, (uint64_t)v14, type metadata accessor for EventValue);
      sub_100034734((uint64_t)v14, (uint64_t)v9, type metadata accessor for EventValue);
      _s10RTCUtility9XPCObjectOwst_0((uint64_t)v9, 0LL, 1LL, v12);
      sub_1000307B8( (uint64_t)v9,  v50,  v25,  v43,  v44,  v45,  v46,  v47,  v49,  v50,  v51,  v52,  v53,  v54[0],  v54[1],  v54[2],  v54[3],  v54[4],  v54[5],  v54[6]);
      sub_100034760((uint64_t)v14, type metadata accessor for EventValue);
      sub_100034760((uint64_t)v23, type metadata accessor for XPCObject);
      return 1LL;
    }

    sub_100034760((uint64_t)v23, type metadata accessor for XPCObject);
    swift_bridgeObjectRelease(v25);
    uint64_t v27 = &qword_10008A800;
    uint64_t v28 = (uint64_t)v11;
  }

  sub_100035228(v28, v27);
  os_log_type_t type = xpc_get_type(a2);
  name = xpc_type_get_name(type);
  uint64_t v31 = String.init(cString:)(name);
  unint64_t v33 = v32;
  uint64_t v34 = v52;
  if (qword_10008A0A8 != -1) {
    swift_once(&qword_10008A0A8, sub_100051C5C);
  }
  uint64_t v35 = type metadata accessor for Logger(0LL);
  sub_10000D34C(v35, (uint64_t)qword_10008C270);
  swift_retain_n(v34, 2LL);
  swift_bridgeObjectRetain(v33);
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = swift_slowAlloc(22LL, -1LL);
    uint64_t v40 = swift_slowAlloc(64LL, -1LL);
    v54[0] = v40;
    *(_DWORD *)uint64_t v39 = 136446466;
    uint64_t v41 = *(void *)(v34 + 112);
    unint64_t v42 = *(void *)(v34 + 120);
    swift_bridgeObjectRetain(v42);
    uint64_t v53 = sub_100019964(v41, v42, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v39 + 4);
    swift_release_n(v34, 2LL);
    swift_bridgeObjectRelease(v42);
    *(_WORD *)(v39 + 12) = 2082;
    swift_bridgeObjectRetain(v33);
    uint64_t v53 = sub_100019964(v31, v33, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v39 + 14);
    swift_bridgeObjectRelease_n(v33, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "session %{public}s skipping invalid payload value of type %{public}s",  (uint8_t *)v39,  0x16u);
    swift_arrayDestroy(v40, 2LL);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v39, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v33, 2LL);
    swift_release_n(v34, 2LL);
  }

  return 1LL;
}

uint64_t sub_100054608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  uint64_t v9 = type metadata accessor for SessionConfiguration.BackendHTTP(0LL);
  v7[6] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SessionConfiguration.Backend(0LL);
  v7[7] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v7[8] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[9] = swift_task_alloc(v12);
  v7[10] = swift_task_alloc(v12);
  return swift_task_switch(sub_1000546A0, a4, 0LL);
}

void sub_1000546A0()
{
  uint64_t v2 = *(void *)(*(void *)(v0 + 16) + 136LL);
  *(void *)(v0 + 88) = v2;
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v0 + 96) = v3;
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + 64);
    *(_DWORD *)(v0 + 184) = *(_DWORD *)(v4 + 80);
    uint64_t v5 = *(void *)(v4 + 72);
    *(void *)(v0 + 112) = 0LL;
    *(void *)(v0 + 12sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = 0LL;
    *(void *)(v0 + 104) = v5;
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_1000590B8();
    sub_100034734(v6, v7, v8);
    uint64_t v9 = qword_1000933D0;
    *(void *)(v0 + 128) = qword_1000933D0;
    if (v9)
    {
      sub_100034734(*(void *)(v0 + 80), *(void *)(v0 + 72), type metadata accessor for SessionConfiguration.Backend);
      int v10 = sub_100059660();
      uint64_t v11 = *(void *)(v0 + 72);
      if (v10 == 1)
      {
        uint64_t v12 = sub_100010324();
        sub_1000353C0(v12, type metadata accessor for SessionConfiguration.Backend);
        sub_1000592DC();
      }

      else
      {
        int v14 = *(uint64_t **)(v0 + 48);
        sub_1000594B0();
        uint64_t v1 = *v14;
        uint64_t v11 = v14[1];
        sub_100010324();
        sub_1000083B8();
        sub_10005960C();
      }

      *(void *)(v0 + 136) = v1;
      *(void *)(v0 + 144) = v11;
      goto LABEL_9;
    }

    __break(1u);
  }

  else
  {
    uint64_t v13 = qword_1000933D0;
    *(void *)(v0 + 16sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = 0LL;
    *(void *)(v0 + 168) = v13;
    if (v13)
    {
      sub_100010324();
LABEL_9:
      sub_100026B34();
      sub_100059148(v15, v16, v17);
      return;
    }
  }

  __break(1u);
}

uint64_t sub_1000547C4()
{
  uint64_t v1 = *(void *)(v0 + 112);
  sub_100013330( *(void *)(v0 + 136),  *(void **)(v0 + 144),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void **)(v0 + 40));
  *(void *)(v0 + 152) = v1;
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 16);
    swift_bridgeObjectRelease(*(void *)(v0 + 88));
    sub_100006AF0();
    sub_10001020C();
    uint64_t v3 = sub_100054A3C;
  }

  else
  {
    uint64_t v2 = *(void *)(v0 + 16);
    sub_100006AF0();
    sub_10001020C();
    uint64_t v3 = sub_10005484C;
  }

  return sub_10002C73C((uint64_t)v3, v2, 0LL);
}

void sub_10005484C()
{
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 120) + 1LL;
  sub_100034760(*(void *)(v0 + 80), type metadata accessor for SessionConfiguration.Backend);
  if (v3 == v2)
  {
    uint64_t v4 = *(void *)(v0 + 16);
    swift_bridgeObjectRelease(*(void *)(v0 + 88));
    if (*(void *)(*(void *)(v4 + 136) + 16LL))
    {
      sub_1000596A0();
      sub_10001AB88();
      sub_10001AB08();
      (*(void (**)(void))(v0 + 8))();
      return;
    }

    uint64_t v11 = qword_1000933D0;
    *(void *)(v0 + 16sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = *(void *)(v0 + 152);
    *(void *)(v0 + 168) = v11;
    if (v11)
    {
      sub_100010324();
LABEL_11:
      sub_100026B34();
      sub_100059148(v12, v13, v14);
      return;
    }
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 120) + 1LL;
    *(void *)(v0 + 112) = *(void *)(v0 + 152);
    *(void *)(v0 + 12sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v5;
    sub_100034734( *(void *)(v0 + 88)
    + ((*(unsigned __int8 *)(v0 + 184) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 184))
    + *(void *)(v0 + 104) * v5,
      *(void *)(v0 + 80),
      type metadata accessor for SessionConfiguration.Backend);
    uint64_t v6 = qword_1000933D0;
    *(void *)(v0 + 128) = qword_1000933D0;
    if (v6)
    {
      sub_100034734(*(void *)(v0 + 80), *(void *)(v0 + 72), type metadata accessor for SessionConfiguration.Backend);
      int v7 = sub_100059660();
      uint64_t v8 = *(void *)(v0 + 72);
      if (v7 == 1)
      {
        uint64_t v9 = sub_100010324();
        sub_1000353C0(v9, type metadata accessor for SessionConfiguration.Backend);
        sub_1000592DC();
      }

      else
      {
        int v10 = *(uint64_t **)(v0 + 48);
        sub_1000594B0();
        uint64_t v1 = *v10;
        uint64_t v8 = v10[1];
        sub_100010324();
        sub_1000083B8();
        sub_10005960C();
      }

      *(void *)(v0 + 136) = v1;
      *(void *)(v0 + 144) = v8;
      goto LABEL_11;
    }

    __break(1u);
  }

  __break(1u);
}

uint64_t sub_1000549BC()
{
  uint64_t v1 = *(void *)(v0 + 160);
  sub_100013330( 0x6B6E756C7073LL,  (void *)0xE600000000000000LL,  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void **)(v0 + 40));
  *(void *)(v0 + 176) = v1;
  if (v1) {
    return sub_10002C73C((uint64_t)sub_100054A80, *(void *)(v0 + 16), 0LL);
  }
  swift_release(*(void *)(v0 + 168));
  sub_1000596A0();
  sub_10001AB88();
  sub_10001AB08();
  return sub_10004D26C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100054A3C()
{
  return sub_10004D26C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100054A80()
{
  return sub_10004D26C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100054ABC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[19] = a8;
  v8[20] = v10;
  v8[17] = a6;
  v8[18] = a7;
  v8[15] = a4;
  v8[16] = a5;
  return ((uint64_t (*)(uint64_t (*)(), void))swift_task_switch)(sub_100054AE0, 0LL);
}

uint64_t sub_100054AE0()
{
  uint64_t v1 = sub_10000534C(&qword_10008C4E8);
  uint64_t v2 = (__n128 *)sub_100006B14(v1, 56LL);
  v0[21] = v2;
  sub_100058F14(v2, (__n128)xmmword_100069580);
  sub_1000083B0();
  uint64_t v3 = (void *)sub_1000593FC();
  v0[22] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100054B64;
  uint64_t v4 = sub_100059280();
  return sub_100058F64(v4, v5, v6, v7);
}

uint64_t sub_100054B64()
{
  v0[23] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return sub_100020908((uint64_t)sub_100054BC0, v0[20], 0LL);
  }
  swift_bridgeObjectRelease(v0[21]);
  return sub_10001CC0C(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100054BC0()
{
  uint64_t v28 = v1;
  uint64_t v29 = v2;
  uint64_t v27 = v0;
  swift_bridgeObjectRelease(*(void *)(v0 + 168));
  if (qword_10008A0A8 != -1) {
    swift_once(&qword_10008A0A8, sub_100051C5C);
  }
  uint64_t v3 = *(os_log_s **)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = sub_10001030C();
  sub_10000D34C(v5, (uint64_t)qword_10008C270);
  sub_10001AA24();
  sub_100059490();
  sub_10001AA24();
  sub_100059490();
  sub_10001ACE4();
  os_log_type_t v6 = sub_10001AB78();
  BOOL v7 = sub_10001AB10(v6);
  uint64_t v8 = *(void **)(v0 + 160);
  if (v7)
  {
    uint64_t v25 = v3;
    uint64_t v9 = sub_1000100B0(32LL);
    uint64_t v24 = sub_1000100B0(96LL);
    v26[0] = v24;
    *(_DWORD *)uint64_t v9 = 136446722;
    uint64_t v11 = v8[14];
    unint64_t v10 = v8[15];
    sub_1000101AC();
    *(void *)(v0 + 88) = sub_100019964(v11, v10, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v9 + 4);
    sub_100006BBC();
    *(_WORD *)(v9 + 12) = 2082;
    uint64_t v12 = v8[25];
    uint64_t v13 = v8[26];
    uint64_t v14 = v8[27];
    uint64_t v15 = v8[28];
    uint64_t v16 = v8[29];
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v8[24];
    *(void *)(v0 + 24) = v12;
    *(void *)(v0 + 32) = v13;
    *(void *)(v0 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v14;
    *(void *)(v0 + 48) = v15;
    *(void *)(v0 + 56) = v16;
    sub_10001AC84();
    sub_100010270();
    sub_100010290();
    uint64_t v17 = sub_1000157F4();
    sub_10001ABA0();
    sub_100010278();
    sub_10001ABFC();
    *(void *)(v0 + 96) = sub_1000596AC(v17, v18, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v9 + 14);
    sub_100006AF0();
    sub_10001A98C((uint64_t)v8);
    *(_WORD *)(v9 + 22) = 2082;
    uint64_t v19 = sub_100059330();
    swift_getErrorValue(v19, v20, v0 + 64);
    uint64_t v21 = sub_10002F9C4();
    *(void *)(v0 + 112) = sub_100019964(v21, v22, v26);
    sub_10001AA80(v0 + 112, v0 + 120);
    sub_10000FFD8();
    sub_100026B40();
    sub_100026B40();
    sub_1000595A0( (void *)&_mh_execute_header,  v25,  (os_log_type_t)v4,  "session %{public}s (%{public}s): immediate backend failed to send events: %{public}s");
    swift_arrayDestroy(v24, 3LL);
    sub_100010010(v24);
    sub_100010010(v9);

    sub_100026B40();
  }

  else
  {
    sub_100026B40();
    sub_10001A98C((uint64_t)v8);
    sub_100026B40();
    sub_100026B40();
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100054E34( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[19] = a8;
  v8[20] = v10;
  v8[17] = a6;
  v8[18] = a7;
  v8[15] = a4;
  v8[16] = a5;
  return swift_task_switch(sub_100054E5C, a4, 0LL);
}

uint64_t sub_100054E5C()
{
  if (*(_BYTE *)(v0[15] + OBJC_IVAR____TtC13rtcreportingd7Session_haveNonRealtimeEvents) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc(dword_10008C4F4);
    v0[21] = v1;
    void *v1 = v0;
    v1[1] = sub_100054F30;
    uint64_t v2 = sub_100059274(v0[16]);
    return sub_1000553DC(v2, v3);
  }

  else
  {
    sub_100059480();
    uint64_t v5 = sub_10000534C(&qword_10008C4E8);
    os_log_type_t v6 = (__n128 *)sub_100006B14(v5, 56LL);
    v0[23] = v6;
    sub_100058F14(v6, (__n128)xmmword_100069580);
    sub_1000083B0();
    BOOL v7 = (void *)sub_1000593FC();
    v0[24] = v7;
    *BOOL v7 = v0;
    v7[1] = sub_100054FE8;
    uint64_t v8 = sub_100059280();
    return sub_100058F64(v8, v9, v10, v11);
  }

uint64_t sub_100054F30()
{
  if (v1) {
    uint64_t v2 = sub_100055044;
  }
  else {
    uint64_t v2 = sub_100054F70;
  }
  return sub_100020908((uint64_t)v2, *(void *)(v0 + 120), 0LL);
}

uint64_t sub_100054F70()
{
  uint64_t v1 = sub_10000534C(&qword_10008C4E8);
  uint64_t v2 = (__n128 *)sub_100006B14(v1, 56LL);
  *(void *)(v0 + 184) = v2;
  sub_100058F14(v2, (__n128)xmmword_100069580);
  sub_1000083B0();
  uint64_t v3 = (void *)sub_1000593FC();
  *(void *)(v0 + 192) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100054FE8;
  uint64_t v4 = sub_100059280();
  return sub_100058F64(v4, v5, v6, v7);
}

uint64_t sub_100054FE8()
{
  v0[25] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return sub_100020908((uint64_t)sub_10005520C, v0[15], 0LL);
  }
  swift_bridgeObjectRelease(v0[23]);
  return sub_10001CC0C(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100055044()
{
  if (qword_10008A0A8 != -1) {
    swift_once(&qword_10008A0A8, sub_100051C5C);
  }
  uint64_t v1 = *(os_log_s **)(v0 + 120);
  uint64_t v2 = sub_10001030C();
  int v3 = sub_10000D34C(v2, (uint64_t)qword_10008C270);
  sub_100010324();
  sub_100026A40();
  sub_100010324();
  sub_100026A40();
  sub_10001ACE4();
  os_log_type_t v4 = sub_10001AB78();
  BOOL v5 = sub_10001AC28(v4);
  uint64_t v6 = *(void *)(v0 + 120);
  if (v5)
  {
    log = v1;
    BOOL v7 = (_DWORD *)sub_1000100B0(32LL);
    uint64_t v97 = sub_1000100B0(96LL);
    uint64_t v100 = v97;
    *BOOL v7 = 136446722;
    HIDWORD(v91) = v3;
    uint64_t v8 = *(void *)(v6 + 112);
    sub_1000100D8();
    uint64_t v10 = sub_10001AC04(v8, v9, &v100);
    sub_100059208(v10);
    sub_1000083D4();
    sub_100058FDC();
    sub_100010270();
    sub_10001A9B8();
    uint64_t v11 = (void *)sub_1000157F4();
    uint64_t v13 = v12;
    sub_100006CAC();
    sub_100010278();
    swift_bridgeObjectRelease(v7 + 1);
    uint64_t v15 = sub_10001AC04((uint64_t)v11, v14, &v100);
    sub_1000591F0(v15, v16, v17, v18, v19, v20, v21, v22, v62, v68, v0 + 96, v0 + 16, v0 + 104);
    sub_1000083D4();
    uint64_t v23 = sub_10001A98C(v6);
    sub_1000591A4(v23, v24, v25, v26, v27, v28, v29, v30, v63, v69, v74, v79, v84, v0 + 64);
    uint64_t v31 = sub_10002F9C4();
    uint64_t v39 = sub_100059694(v31, v32, v33, v34, v35, v36, v37, v38, v64, v70, v75, v80);
    sub_1000591D8(v39, v40, v41, v42, v43, v44, v45, v46, v65, v71, v76, v81, v85, v88, v91, v0 + 112);
    sub_10000FFD8();
    sub_1000269C8();
    sub_1000269C8();
    sub_1000591C0( (void *)&_mh_execute_header,  v47,  v48,  "session %{public}s (%{public}s): failed to send realtime events: %{public}s",  v49,  v50,  v51,  v52,  v66,  v72,  v77,  v82,  v86,  v89,  v92,  type,  v95,  v97,  log);
    sub_100059304(v53, v54, v55, v56, v57, v58, v59, v60, v67, v73, v78, v83, v87, v90, v93, v96, v98);
    sub_100010010(v13);
    sub_100010010((uint64_t)v7);

    sub_1000269C8();
  }

  else
  {
    sub_1000269C8();
    sub_10001A98C(v6);
    sub_1000269C8();
    sub_1000269C8();
  }

  return sub_10005905C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005520C()
{
  if (qword_10008A0A8 != -1) {
    swift_once(&qword_10008A0A8, sub_100051C5C);
  }
  uint64_t v1 = *(os_log_s **)(v0 + 120);
  uint64_t v2 = sub_10001030C();
  int v3 = sub_10000D34C(v2, (uint64_t)qword_10008C270);
  sub_100010324();
  sub_100026A40();
  sub_100010324();
  sub_100026A40();
  sub_10001ACE4();
  os_log_type_t v4 = sub_10001AB78();
  BOOL v5 = sub_10001AC28(v4);
  uint64_t v6 = *(void *)(v0 + 120);
  if (v5)
  {
    log = v1;
    BOOL v7 = (_DWORD *)sub_1000100B0(32LL);
    uint64_t v97 = sub_1000100B0(96LL);
    uint64_t v100 = v97;
    *BOOL v7 = 136446722;
    HIDWORD(v91) = v3;
    uint64_t v8 = *(void *)(v6 + 112);
    sub_1000100D8();
    uint64_t v10 = sub_10001AC04(v8, v9, &v100);
    sub_100059208(v10);
    sub_1000083D4();
    sub_100058FDC();
    sub_100010270();
    sub_10001A9B8();
    uint64_t v11 = (void *)sub_1000157F4();
    uint64_t v13 = v12;
    sub_100006CAC();
    sub_100010278();
    swift_bridgeObjectRelease(v7 + 1);
    uint64_t v15 = sub_10001AC04((uint64_t)v11, v14, &v100);
    sub_1000591F0(v15, v16, v17, v18, v19, v20, v21, v22, v62, v68, v0 + 96, v0 + 16, v0 + 104);
    sub_1000083D4();
    uint64_t v23 = sub_10001A98C(v6);
    sub_1000591A4(v23, v24, v25, v26, v27, v28, v29, v30, v63, v69, v74, v79, v84, v0 + 64);
    uint64_t v31 = sub_10002F9C4();
    uint64_t v39 = sub_100059694(v31, v32, v33, v34, v35, v36, v37, v38, v64, v70, v75, v80);
    sub_1000591D8(v39, v40, v41, v42, v43, v44, v45, v46, v65, v71, v76, v81, v85, v88, v91, v0 + 112);
    sub_10000FFD8();
    sub_1000269C8();
    sub_1000269C8();
    sub_1000591C0( (void *)&_mh_execute_header,  v47,  v48,  "session %{public}s (%{public}s): failed to send realtime events: %{public}s",  v49,  v50,  v51,  v52,  v66,  v72,  v77,  v82,  v86,  v89,  v92,  type,  v95,  v97,  log);
    sub_100059304(v53, v54, v55, v56, v57, v58, v59, v60, v67, v73, v78, v83, v87, v90, v93, v96, v98);
    sub_100010010(v13);
    sub_100010010((uint64_t)v7);

    sub_1000269C8();
  }

  else
  {
    sub_1000269C8();
    sub_10001A98C(v6);
    sub_1000269C8();
    sub_1000269C8();
  }

  return sub_10005905C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000553DC(uint64_t a1, uint64_t a2)
{
  v3[10] = a2;
  v3[11] = v2;
  void v3[9] = a1;
  return swift_task_switch(sub_1000553F8, v2, 0LL);
}

void sub_1000553F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v24;
  a22 = v25;
  a20 = v23;
  uint64_t v26 = *(void *)(v23 + 88);
  uint64_t v27 = OBJC_IVAR____TtC13rtcreportingd7Session_sendingNonRealtimeEvents;
  *(void *)(v23 + 96) = OBJC_IVAR____TtC13rtcreportingd7Session_sendingNonRealtimeEvents;
  if ((*(_BYTE *)(v26 + v27) & 1) != 0
    || (uint64_t v28 = OBJC_IVAR____TtC13rtcreportingd7Session_haveNonRealtimeEvents,
        *(void *)(v23 + 104) = OBJC_IVAR____TtC13rtcreportingd7Session_haveNonRealtimeEvents,
        *(_BYTE *)(v26 + v28) != 1))
  {
    sub_10001A94C(*(uint64_t (**)(void))(v23 + 8));
  }

  else
  {
    *(_BYTE *)(v26 + v27) = 1;
    if (qword_10008A0A8 != -1) {
      swift_once(&qword_10008A0A8, sub_100051C5C);
    }
    uint64_t v29 = sub_10001030C();
    *(void *)(v23 + 112) = sub_10000D34C(v29, (uint64_t)qword_10008C270);
    sub_100010324();
    uint64_t v30 = (os_log_s *)sub_10001ACC8();
    os_log_type_t v31 = static os_log_type_t.info.getter();
    BOOL v32 = sub_10001AC28(v31);
    uint64_t v33 = *(void *)(v23 + 88);
    if (v32)
    {
      uint64_t v34 = (uint8_t *)sub_1000100B0(12LL);
      uint64_t v35 = sub_1000100B0(32LL);
      a11 = v35;
      *(_DWORD *)uint64_t v34 = 136446210;
      uint64_t v36 = *(void *)(v33 + 112);
      sub_10001AC84();
      *(void *)(v23 + 64) = sub_10005954C(v36, v37, &a11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v23 + 64, v23 + 72, v34 + 4);
      sub_10001ABA0();
      sub_100006BB4();
      sub_10001AA70( (void *)&_mh_execute_header,  v30,  v22,  "session %{public}s: triggering send for cached events in realtime mode",  v34);
      sub_10001AA68(v35);
      sub_100010010(v35);
      sub_100010010((uint64_t)v34);
    }

    else
    {
      sub_100006BB4();
    }

    if (qword_1000933B0)
    {
      *(void *)(v23 + 12sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = qword_1000933B0;
      uint64_t v38 = dword_10008B67C;
      sub_100010324();
      uint64_t v39 = (void *)swift_task_alloc(v38);
      *(void *)(v23 + 128) = v39;
      sub_10002F82C(v39, (uint64_t)sub_1000555C8);
      sub_100026AFC();
      sub_10002B378(v40, v41, v42, v43);
    }

    else
    {
      __break(1u);
    }
  }

uint64_t sub_1000555C8()
{
  uint64_t v2 = v0[16];
  v0[17] = v3;
  v0[18] = v1;
  swift_task_dealloc(v2);
  swift_release(v0[15]);
  sub_10001AC0C();
  return sub_100020908(v4, v5, v6);
}

uint64_t sub_10005562C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = *(void *)(v14 + 136);
  int64_t v16 = *(void *)(v15 + 16);
  *(void *)(v14 + 152) = v16;
  if (v16)
  {
    uint64_t v17 = (uint64_t *)(v14 + 40);
    *(void *)(v14 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = _swiftEmptyArrayStorage;
    sub_100057F20(0LL, v16, 0);
    uint64_t v18 = *(void *)(v14 + 40);
    uint64_t v19 = (_OWORD *)(v15 + 48);
    do
    {
      uint64_t v20 = *((void *)v19 - 1);
      __int128 v43 = *v19;
      __int128 v21 = *v19;
      *uint64_t v17 = v18;
      unint64_t v22 = *(void *)(v18 + 16);
      unint64_t v23 = *(void *)(v18 + 24);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(*((void *)&v43 + 1));
      if (v22 >= v23 >> 1)
      {
        BOOL v25 = sub_100059470();
        sub_100057F20((char *)v25, v26, v27);
        uint64_t v18 = *v17;
      }

      *(void *)(v14 + 16sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v18;
      *(void *)(v18 + swift_weakDestroy(v0 + 16) = v22 + 1;
      uint64_t v24 = v18 + 24 * v22;
      *(void *)(v24 + 32) = v20;
      *(_OWORD *)(v24 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v43;
      v19 += 2;
      --v16;
    }

    while (v16);
    uint64_t v28 = *(void *)(v14 + 80);
    swift_getObjectType(*(void *)(v14 + 72));
    uint64_t v29 = *(int **)(v28 + 24);
    *(void *)&__int128 v43 = (char *)v29 + *v29;
    uint64_t v30 = (void *)swift_task_alloc(v29[1]);
    *(void *)(v14 + 168) = v30;
    *uint64_t v30 = v14;
    v30[1] = sub_10005576C;
    sub_1000595F4();
    sub_100026AFC();
    return v34(v31, v32, v33, v34, v35, v36, v37, v38, v43, *((void *)&v43 + 1), a11, a12, a13, a14);
  }

  else
  {
    uint64_t v40 = *(void *)(v14 + 96);
    uint64_t v41 = *(void *)(v14 + 104);
    uint64_t v42 = *(void *)(v14 + 88);
    sub_100006BBC();
    *(_BYTE *)(v42 + v41) = 0;
    *(_BYTE *)(v42 + v4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = 0;
    return sub_10001A94C(*(uint64_t (**)(void))(v14 + 8));
  }

uint64_t sub_10005576C()
{
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 88);
    uint64_t v3 = sub_100055964;
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 88);
    swift_release(*(void *)(v0 + 160));
    uint64_t v3 = sub_1000557BC;
    uint64_t v2 = v4;
  }

  return sub_100020908((uint64_t)v3, v2, 0LL);
}

void sub_1000557BC()
{
  uint64_t v2 = qword_1000933B0;
  v0[23] = qword_1000933B0;
  if (v2)
  {
    v0[6] = _swiftEmptyArrayStorage;
    sub_10001AA24();
    sub_10005936C();
    sub_1000595C0();
    do
    {
      sub_1000592A8();
      if (v4) {
        sub_100057F68((char *)(v3 > 1), v1, 1);
      }
      sub_10005915C();
    }

    while (!v5);
    swift_bridgeObjectRelease(v0[17]);
    uint64_t v6 = (void *)swift_task_alloc(dword_10008B66C);
    v0[25] = v6;
    uint64_t v7 = sub_1000595D4(v6, (uint64_t)sub_100055880);
    sub_10002B560(v7);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100055880()
{
  v0[26] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    uint64_t v4 = v0[11];
    char v5 = sub_100055B24;
  }

  else
  {
    uint64_t v6 = v0[24];
    uint64_t v7 = v0[11];
    swift_release(v6);
    sub_10001020C();
    char v5 = sub_1000558E4;
    uint64_t v4 = v7;
  }

  return sub_100020908((uint64_t)v5, v4, 0LL);
}

void sub_1000558E4()
{
  if (qword_1000933B0)
  {
    *(void *)(v0 + 12sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = qword_1000933B0;
    uint64_t v1 = dword_10008B67C;
    sub_100010324();
    uint64_t v2 = (void *)swift_task_alloc(v1);
    *(void *)(v0 + 128) = v2;
    uint64_t v3 = sub_10002F82C(v2, (uint64_t)sub_1000555C8);
    sub_10002B378(v3, v4, v5, v6);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100055950()
{
  *(_BYTE *)(*(void *)(v0 + 88) + *(void *)(v0 + 96)) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100055964()
{
  uint64_t v1 = (os_log_s *)v0[22];
  swift_release(v0[20]);
  sub_100026A40();
  uint64_t v2 = sub_100026A40();
  Logger.logObject.getter(v2);
  os_log_type_t v3 = sub_10005950C();
  if (os_log_type_enabled(v1, v3))
  {
    uint64_t v4 = v0[22];
    uint64_t v5 = sub_1000100B0(12LL);
    uint64_t v6 = sub_1000100B0(32LL);
    uint64_t v17 = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    swift_getErrorValue(v4, v0 + 7, v0 + 2);
    uint64_t v7 = sub_100026AB8();
    *(void *)(v5 + 4) = sub_100019964(v7, v8, &v17);
    sub_10000FFD8();
    sub_100026B40();
    sub_100026B40();
    sub_10001AA70((void *)&_mh_execute_header, v1, v3, "failed to send events: %{public}s", (uint8_t *)v5);
    sub_10001AA68(v6);
    sub_100010010(v6);
    sub_100010010(v5);

    sub_100026B40();
  }

  else
  {
    sub_10003B5F0();
    sub_10003B5F0();
    sub_10003B5F0();
  }

  uint64_t v9 = qword_1000933B0;
  v0[23] = qword_1000933B0;
  if (v9)
  {
    v0[6] = _swiftEmptyArrayStorage;
    sub_10001AA24();
    sub_10005936C();
    sub_1000595C0();
    do
    {
      sub_1000592A8();
      if (v10)
      {
        BOOL v12 = sub_100059470();
        sub_100057F68((char *)v12, v13, v14);
      }

      sub_10005915C();
    }

    while (!v11);
    swift_bridgeObjectRelease(v0[17]);
    uint64_t v15 = (void *)swift_task_alloc(dword_10008B66C);
    v0[25] = v15;
    uint64_t v16 = sub_1000595D4(v15, (uint64_t)sub_100055880);
    sub_10002B560(v16);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100055B24()
{
  *(_BYTE *)(*(void *)(v0 + 88) + *(void *)(v0 + 96)) = 0;
  return sub_10001ABB0(*(uint64_t (**)(void))(v0 + 8));
}

void sub_100055B5C()
{
  uint64_t v1 = sub_10005935C();
  sub_10003545C(v1);
  swift_unknownObjectRelease(*(void *)((char *)v0 + OBJC_IVAR____TtC13rtcreportingd7Session_realtimeBackend));
  swift_unknownObjectRelease(*(void *)((char *)v0 + OBJC_IVAR____TtC13rtcreportingd7Session_immediateBackend));
  uint64_t v2 = *(void *)((char *)v0 + OBJC_IVAR____TtC13rtcreportingd7Session_eventExtraFieldProvider + 56);
  swift_bridgeObjectRelease(*(void *)((char *)v0 + OBJC_IVAR____TtC13rtcreportingd7Session_eventExtraFieldProvider
                                                   + 88));
  sub_100006BBC();
  swift_bridgeObjectRelease(v2);
  sub_1000083D4();
  sub_100006AF0();
  swift_bridgeObjectRelease(*(void *)((char *)v0 + OBJC_IVAR____TtC13rtcreportingd7Session_hierarchyID + 8));
  swift_defaultActor_destroy(v0);
  sub_100006AB8();
}

uint64_t sub_100055C40()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for Session(uint64_t a1)
{
  return sub_100042998(a1, qword_10008C2E8, (uint64_t)&nominal type descriptor for Session);
}

uint64_t sub_100055C6C(uint64_t a1)
{
  v4[1] = &unk_10006BF88;
  void v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = &unk_10006BFA0;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[5] = &unk_10006BFB8;
  v4[6] = &unk_10006BFD0;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[7] = *(void *)(result - 8) + 64LL;
    void v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[9] = &unk_10006BFE8;
    v4[10] = &unk_10006BFE8;
    void v4[11] = &unk_10006C000;
    v4[12] = &unk_10006C000;
    v4[13] = &unk_10006C018;
    v4[14] = &unk_10006C000;
    v4[15] = &unk_10006BFE8;
    v4[16] = &unk_10006C030;
    return swift_updateClassMetadata2(a1, 256LL, 17LL, v4, a1 + 80);
  }

  return result;
}

uint64_t sub_100055D54(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)uint64_t result = v2;
  return result;
}

uint64_t sub_100055D68(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100055D88(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 5) = v3;
  return result;
}

uint64_t sub_100055DB4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100055DD0(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)uint64_t result = a2 - 1;
    char v2 = 1;
  }

  else
  {
    char v2 = 0;
  }

  *(_BYTE *)(result + 4) = v2;
  return result;
}

void type metadata accessor for SessionUser()
{
}

void *sub_100055DFC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v20);
  }

  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v9;
    uint64_t v10 = a2[6];
    uint64_t v11 = a2[7];
    uint64_t v12 = a2[8];
    *(void *)(a1 + 56) = v11;
    *(void *)(a1 + 64) = v12;
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    uint64_t v13 = *(int *)(a3 + 32);
    uint64_t v22 = a1 + v13;
    uint64_t v14 = (uint64_t)a2 + v13;
    *(void *)(a1 + 48) = v10;
    uint64_t v15 = type metadata accessor for Date(0LL);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    v16(v22, v14, v15);
    uint64_t v17 = *(int *)(a3 + 36);
    uint64_t v18 = (char *)v4 + v17;
    uint64_t v19 = (uint64_t)a2 + v17;
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = *(_BYTE *)(v19 + 4);
  }

  return v4;
}

uint64_t sub_100055F18(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t sub_100055F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(void *)(a1 + 48) = v8;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  v15(v12, v13, v14);
  uint64_t v16 = *(int *)(a3 + 36);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  return a1;
}

uint64_t sub_100056068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  uint64_t v14 = *(int *)(a3 + 32);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 24LL))(v15, v16, v17);
  uint64_t v18 = *(int *)(a3 + 36);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  char v21 = *(_BYTE *)(v20 + 4);
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = v21;
  return a1;
}

uint64_t sub_100056178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  __int128 v7 = *(_OWORD *)(a2 + 32);
  __int128 v8 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  uint64_t v9 = *(int *)(a3 + 32);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  uint64_t v12 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL))(v10, v11, v12);
  uint64_t v13 = *(int *)(a3 + 36);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  return a1;
}

uint64_t sub_100056218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v12;
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  uint64_t v14 = *(int *)(a3 + 32);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 40LL))(v15, v16, v17);
  uint64_t v18 = *(int *)(a3 + 36);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  return a1;
}

uint64_t sub_1000562E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000562F4);
}

void sub_1000562F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_100006C40();
  }

  else
  {
    uint64_t v6 = sub_10005935C();
    _s10RTCUtility9XPCObjectOwet_0(a1 + *(int *)(a3 + 32), a2, v6);
  }

uint64_t sub_10005635C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100056368);
}

uint64_t sub_100056368(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_10005935C();
    return _s10RTCUtility9XPCObjectOwst_0(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }

  return result;
}

uint64_t type metadata accessor for CachedSession(uint64_t a1)
{
  return sub_100042998(a1, qword_10008C448, (uint64_t)&nominal type descriptor for CachedSession);
}

uint64_t sub_1000563E4(uint64_t a1)
{
  v4[0] = &unk_10006BFB8;
  v4[1] = &unk_10006BF88;
  void v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = &unk_10006BFD0;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[4] = *(void *)(result - 8) + 64LL;
    v4[5] = &unk_10006C030;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void sub_100056480()
{
}

void sub_10005649C()
{
}

void sub_1000564BC()
{
}

double sub_1000564DC()
{
  return *(double *)(*(void *)v0 + 128LL);
}

char *sub_1000564E8(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100006A90();
    uint64_t result = (char *)sub_100058ED0( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_100058EE8(a3, result);
  }

  return result;
}

char *sub_100056540(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000LL) != 0)
  {
    sub_100006A90();
    __src = (char *)sub_100058ED0( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }

  return __src;
}

char *sub_1000565A0(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100006A90();
    uint64_t result = (char *)sub_100058ED0( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_100058EE8(a3, result);
  }

  return result;
}

uint64_t sub_100056600(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10005669C(a1, a2, a3, (void (*)(void))type metadata accessor for EventValue);
}

char *sub_10005660C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[64 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, a2 << 6);
  }

  return __src;
}

uint64_t sub_100056690(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10005669C(a1, a2, a3, (void (*)(void))type metadata accessor for SessionConfiguration.Backend);
}

uint64_t sub_10005669C(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void))
{
  if (a2 < 0)
  {
    sub_100006A90();
    uint64_t result = sub_100058ED0( (uint64_t)"Fatal error",  v14,  v15,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v16,  v17,  (uint64_t)"Swift/UnsafePointer.swift",  v18,  v19,  v20,  v21);
    __break(1u);
  }

  else if (a3 < a1 {
         || (uint64_t result = ((uint64_t (*)(void))a4)(0LL),
  }
             a1 + *(void *)(*(void *)(result - 8) + 72LL) * a2 <= a3))
  {
    a4(0LL);
    uint64_t v10 = sub_10005964C();
    return swift_arrayInitWithTakeFrontToBack(v10, v11, v12, v13);
  }

  else if (a3 != a1)
  {
    uint64_t v9 = sub_10005964C();
    return swift_arrayInitWithTakeBackToFront(v9);
  }

  return result;
}

uint64_t sub_100056764(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10005669C(a1, a2, a3, (void (*)(void))&type metadata accessor for URL);
}

char *sub_100056770(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100006A90();
    uint64_t result = (char *)sub_100058ED0( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_100058EE8(a3, result);
  }

  return result;
}

char *sub_1000567D0(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100006A90();
    uint64_t result = (char *)sub_100058ED0( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_100058EE8(a3, result);
  }

  return result;
}

char *sub_100056828(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }

  return __src;
}

char *sub_1000568B4(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100006A90();
    uint64_t result = (char *)sub_100058ED0( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_100058EE8(a3, result);
  }

  return result;
}

uint64_t sub_100056910(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    char v8 = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v8,  1046LL,  0);
    __break(1u);
  }

  else if (a3 < a1 {
         || (uint64_t result = sub_10000534C(&qword_10008A8B8), a1 + *(void *)(*(void *)(result - 8) + 72LL) * a2 <= a3))
  }
  {
    uint64_t v7 = sub_10000534C(&qword_10008A8B8);
    return swift_arrayInitWithTakeFrontToBack(a3, a1, a2, v7);
  }

  else if (a3 != a1)
  {
    return swift_arrayInitWithTakeBackToFront(a3);
  }

  return result;
}

uint64_t sub_100056A14(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10005669C(a1, a2, a3, (void (*)(void))type metadata accessor for CachedSession);
}

uint64_t sub_100056A20(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_100006A90();
    sub_100059264();
  }

  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3) {
      return swift_arrayInitWithCopy(a3);
    }
    sub_100006A90();
    sub_100059254();
  }

  uint64_t result = sub_100006C60(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_100056ABC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (a3 + (a2 << 6) <= a1 || a1 + (a2 << 6) <= a3)
    {
      sub_10000534C(&qword_10008C588);
      return swift_arrayInitWithCopy(a3);
    }

    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_100056BA8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_100006A90();
    sub_100059264();
  }

  else
  {
    sub_10005962C();
    uint64_t v7 = *(void *)(*(void *)(v6(0LL) - 8) + 72LL) * v3;
    unint64_t v8 = a3 + v7;
    unint64_t v9 = v4 + v7;
    if (v8 <= v4 || v9 <= a3)
    {
      uint64_t v11 = sub_100059638();
      return sub_100059194(v11);
    }

    sub_100006A90();
    sub_100059254();
  }

  uint64_t result = sub_100006C60(v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23);
  __break(1u);
  return result;
}

uint64_t sub_100056C50(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (a3 + 24 * a2 <= a1 || a1 + 24 * a2 <= a3) {
      return swift_arrayInitWithCopy(a3);
    }
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_100056D20(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100006A90();
    sub_100059264();
  }

  else
  {
    sub_10005962C();
    unint64_t v6 = v4 + 8 * v5;
    if (v2 + 8 * v5 > v4)
    {
      BOOL v7 = v6 >= v2;
      BOOL v8 = v6 == v2;
    }

    else
    {
      BOOL v7 = 0;
      BOOL v8 = 0;
    }

    if (v8 || !v7)
    {
      sub_10000534C(v3);
      uint64_t v9 = sub_100059638();
      return sub_100059194(v9);
    }

    sub_100006A90();
    sub_100059254();
  }

  uint64_t result = sub_100006C60(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  __break(1u);
  return result;
}

uint64_t sub_100056DBC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    uint64_t v5 = *(void *)(*(void *)(sub_10000534C(&qword_10008A8B8) - 8) + 72LL) * a2;
    unint64_t v6 = a3 + v5;
    unint64_t v7 = a1 + v5;
    if (v6 <= a1 || v7 <= a3) {
      return swift_arrayInitWithCopy(a3);
    }
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

void *sub_100056EB8(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    sub_100006A90();
    sub_100059264();
  }

  else
  {
    if (&__dst[8 * a2] <= __src || &__src[8 * a2] <= __dst) {
      return memcpy(__dst, __src, 8 * a2);
    }
    sub_100006A90();
    sub_100059254();
  }

  uint64_t result = (void *)sub_100006C60(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_100056F50()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100056F74(uint64_t a1, void *a2)
{
  return sub_100054194(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100056F80()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100056F90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100056FA0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void *sub_100056FA8(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[7];
  uint64_t v4 = a1[9];
  uint64_t v5 = a1[11];
  swift_bridgeObjectRetain(a1[3]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void sub_100057010(uint64_t a1, char a2)
{
  uint64_t v4 = v2;
  sub_100059538();
  sub_10000534C((uint64_t *)&unk_10008C5C0);
  uint64_t v6 = sub_100059330();
  uint64_t v8 = sub_100059520(v6, v7);
  uint64_t v9 = v8;
  if (*(void *)(v3 + 16))
  {
    int64_t v10 = 0LL;
    uint64_t v11 = *(void *)(v3 + 64);
    uint64_t v41 = v3 + 64;
    uint64_t v12 = 1LL << *(_BYTE *)(v3 + 32);
    if (v12 < 64) {
      uint64_t v13 = ~(-1LL << v12);
    }
    else {
      uint64_t v13 = -1LL;
    }
    unint64_t v14 = v13 & v11;
    int64_t v40 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v15 = v8 + 64;
    if ((v13 & v11) == 0) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v16 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    for (unint64_t i = v16 | (v10 << 6); ; unint64_t i = v22 + (v10 << 6))
    {
      uint64_t v23 = *(unsigned __int8 *)(*(void *)(v3 + 48) + i);
      uint64_t v24 = *(void *)(*(void *)(v3 + 56) + 8 * i);
      if ((a2 & 1) == 0) {
        sub_10001AC84();
      }
      Hasher.init(_seed:)(v42, *(void *)(v9 + 40));
      Hasher._combine(_:)(v23 + 1);
      unint64_t v25 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(v9 + 32));
      if (((-1LL << v25) & ~*(void *)(v15 + 8 * (v25 >> 6))) == 0)
      {
        sub_10004776C();
        while (++v27 != v28 || (v26 & 1) == 0)
        {
          BOOL v29 = v27 == v28;
          if (v27 == v28) {
            uint64_t v27 = 0LL;
          }
          v26 |= v29;
          if (*(void *)(v15 + 8 * v27) != -1LL)
          {
            sub_100047718();
            goto LABEL_30;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return;
      }

      sub_100047780();
LABEL_30:
      sub_1000594F8();
      *(void *)(v15 + v30) |= v31;
      *(_BYTE *)(*(void *)(v9 + 48) + v32) = v23;
      *(void *)(*(void *)(v9 + 56) + 8 * v32) = v24;
      sub_1000593D4();
      if (v14) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v18 = v10 + 1;
      if (__OFADD__(v10, 1LL)) {
        goto LABEL_41;
      }
      if (v18 >= v40) {
        goto LABEL_32;
      }
      ++v10;
      if (!*(void *)(v41 + 8 * v18))
      {
        int64_t v10 = v18 + 1;
        if (v18 + 1 >= v40) {
          goto LABEL_32;
        }
        if (!*(void *)(v41 + 8 * v10))
        {
          int64_t v19 = v18 + 2;
          if (v19 >= v40)
          {
LABEL_32:
            if ((a2 & 1) == 0)
            {
              sub_100010254();
              uint64_t v4 = v2;
              goto LABEL_39;
            }

            sub_100059294();
            if (v35 != v36)
            {
              *uint64_t v33 = -1LL << v34;
            }

            else
            {
              uint64_t v37 = sub_1000594C0();
              sub_1000577F4(v37, v38, v39);
            }

            uint64_t v4 = v2;
            *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
            break;
          }

          if (!*(void *)(v41 + 8 * v19))
          {
            while (1)
            {
              int64_t v10 = v19 + 1;
              if (__OFADD__(v19, 1LL)) {
                goto LABEL_42;
              }
              if (v10 >= v40) {
                goto LABEL_32;
              }
              ++v19;
              if (*(void *)(v41 + 8 * v10)) {
                goto LABEL_18;
              }
            }
          }

          int64_t v10 = v19;
        }
      }

void sub_10005725C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  sub_100059538();
  sub_10000534C(&qword_10008A898);
  uint64_t v6 = sub_100059330();
  char v50 = a2;
  uint64_t v8 = (void *)static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  if (v3[2])
  {
    sub_1000594E0();
    int v48 = v9;
    sub_100059678();
    unint64_t v12 = v11 & v10;
    int64_t v47 = (unint64_t)(v13 + 63) >> 6;
    unint64_t v14 = v8 + 8;
    sub_100047618();
    int64_t v15 = 0LL;
    uint64_t v16 = 48LL;
    int v49 = v3;
    if (!v12) {
      goto LABEL_4;
    }
LABEL_3:
    unint64_t v17 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    for (unint64_t i = v17 | (v15 << 6); ; unint64_t i = v23 + (v15 << 6))
    {
      uint64_t v24 = (uint64_t *)(v3[6] + 16 * i);
      uint64_t v26 = *v24;
      uint64_t v25 = v24[1];
      uint64_t v27 = v3[7] + i * v16;
      uint64_t v28 = *(void *)v27;
      uint64_t v29 = *(void *)(v27 + 8);
      char v30 = *(_BYTE *)(v27 + 16);
      uint64_t v51 = *(void *)(v27 + 24);
      __int128 v52 = *(_OWORD *)(v27 + 32);
      if ((v50 & 1) == 0)
      {
        sub_100010270();
        sub_10001AC84();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      Hasher.init(_seed:)(v53, v8[5]);
      String.hash(into:)(v53, v26, v25);
      Hasher._finalize()();
      sub_10005937C();
      if (((v33 << v32) & ~v14[v31]) == 0)
      {
        sub_10004776C();
        while (++v37 != v38 || (v36 & 1) == 0)
        {
          BOOL v39 = v37 == v38;
          if (v37 == v38) {
            uint64_t v37 = 0LL;
          }
          v36 |= v39;
          if (v14[v37] != -1LL)
          {
            sub_100047718();
            goto LABEL_27;
          }
        }

        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        return;
      }

      sub_100047780();
      uint64_t v35 = 48LL;
LABEL_27:
      *(void *)((char *)v14 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v34;
      int64_t v40 = (void *)(v8[6] + 16 * v34);
      *int64_t v40 = v26;
      v40[1] = v25;
      uint64_t v41 = v8[7] + v34 * v35;
      *(void *)uint64_t v41 = v28;
      *(void *)(v41 + 8) = v29;
      *(_BYTE *)(v41 + swift_weakDestroy(v0 + 16) = v30;
      *(void *)(v41 + 24) = v51;
      *(_OWORD *)(v41 + 32) = v52;
      sub_1000593D4();
      uint64_t v3 = v49;
      if (v12) {
        goto LABEL_3;
      }
LABEL_4:
      int64_t v19 = v15 + 1;
      if (__OFADD__(v15, 1LL)) {
        goto LABEL_36;
      }
      if (v19 >= v47) {
        goto LABEL_29;
      }
      ++v15;
      if (!v48[v19])
      {
        int64_t v15 = v19 + 1;
        if (v19 + 1 >= v47) {
          goto LABEL_29;
        }
        if (!v48[v15])
        {
          int64_t v20 = v19 + 2;
          if (v20 >= v47)
          {
LABEL_29:
            sub_100010254();
            uint64_t v4 = v2;
            if ((v50 & 1) != 0)
            {
              sub_100059294();
              if (v43 != v44)
              {
                *int v48 = -1LL << v42;
              }

              else
              {
                uint64_t v45 = sub_1000594C0();
                sub_1000577F4(v45, v46, v48);
              }

              v3[2] = 0LL;
            }

            break;
          }

          if (!v48[v20])
          {
            while (1)
            {
              int64_t v15 = v20 + 1;
              if (__OFADD__(v20, 1LL)) {
                goto LABEL_37;
              }
              if (v15 >= v47) {
                goto LABEL_29;
              }
              ++v20;
              if (v48[v15]) {
                goto LABEL_15;
              }
            }
          }

          int64_t v15 = v20;
        }
      }

LABEL_15:
      sub_1000593AC();
      unint64_t v12 = v22 & v21;
    }
  }

  sub_100010254();
  *uint64_t v4 = v8;
}

    sub_1000593AC();
    int64_t v18 = v28 & v27;
  }

  uint64_t v26 = v24 + 2;
  if (v26 < v53)
  {
    if (!v54[v26])
    {
      while (1)
      {
        uint64_t v21 = v26 + 1;
        if (__OFADD__(v26, 1LL)) {
          goto LABEL_40;
        }
        if (v21 >= v53) {
          goto LABEL_30;
        }
        ++v26;
        if (v54[v21]) {
          goto LABEL_15;
        }
      }
    }

    uint64_t v21 = v26;
    goto LABEL_15;
  }

  __break(1u);
}

void sub_100057518(uint64_t a1, int a2)
{
}

void sub_10005752C(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v57 = a3;
  uint64_t v8 = a3(0LL);
  uint64_t v55 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v51 - v9;
  uint64_t v11 = (void *)*v4;
  sub_10000534C(a4);
  uint64_t v12 = sub_100059330();
  int v56 = a2;
  unint64_t v14 = (void *)sub_100059520(v12, v13);
  if (!v11[2]) {
    goto LABEL_37;
  }
  sub_1000594E0();
  uint64_t v54 = v15;
  sub_100059678();
  unint64_t v18 = v17 & v16;
  __int128 v52 = v4;
  int64_t v53 = (unint64_t)(v19 + 63) >> 6;
  int64_t v20 = v14 + 8;
  sub_100047618();
  int64_t v21 = 0LL;
  if (!v18) {
    goto LABEL_4;
  }
LABEL_3:
  unint64_t v22 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (unint64_t i = v22 | (v21 << 6); ; unint64_t i = v29 + (v21 << 6))
  {
    char v30 = (uint64_t *)(v11[6] + 16 * i);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(v55 + 72);
    uint64_t v34 = v11[7] + v33 * i;
    if ((v56 & 1) != 0)
    {
      sub_10003499C(v34, (uint64_t)v10, v57);
    }

    else
    {
      sub_100034734(v34, (uint64_t)v10, v57);
      sub_10001A9B8();
    }

    Hasher.init(_seed:)(v58, v14[5]);
    String.hash(into:)(v58, v32, v31);
    Hasher._finalize()();
    sub_10005937C();
    if (((v37 << v36) & ~v20[v35]) == 0)
    {
      sub_10004776C();
      while (++v39 != v40 || (v38 & 1) == 0)
      {
        BOOL v41 = v39 == v40;
        if (v39 == v40) {
          uint64_t v39 = 0LL;
        }
        v38 |= v41;
        if (v20[v39] != -1LL)
        {
          sub_100047718();
          goto LABEL_28;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      return;
    }

    sub_100047780();
LABEL_28:
    sub_1000594F8();
    *(void *)((char *)v20 + v42) |= v43;
    uint64_t v45 = (void *)(v14[6] + 16 * v44);
    *uint64_t v45 = v32;
    v45[1] = v31;
    sub_10003499C((uint64_t)v10, v14[7] + v33 * v44, v57);
    sub_1000593D4();
    if (v18) {
      goto LABEL_3;
    }
LABEL_4:
    int64_t v24 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      goto LABEL_39;
    }
    if (v24 >= v53)
    {
      sub_100010254();
      uint64_t v6 = v52;
      uint64_t v25 = v54;
      goto LABEL_32;
    }

    uint64_t v25 = v54;
    ++v21;
    if (!v54[v24])
    {
      int64_t v21 = v24 + 1;
      if (v24 + 1 >= v53) {
        goto LABEL_30;
      }
      if (!v54[v21]) {
        break;
      }
    }

uint64_t sub_1000577F4(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }

  return result;
}

uint64_t sub_100057810(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for EventValue(0LL);
  uint64_t v48 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v46 = (uint64_t)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v45 = (uint64_t)&v43 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v43 - v15;
  uint64_t v17 = sub_10000534C((uint64_t *)&unk_10008C500);
  __chkstk_darwin(v17);
  uint64_t v19 = (uint64_t *)((char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_1000589E0(a1, a2, a3, v47);
  uint64_t v44 = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v43 = a3;
  swift_retain(a3);
  sub_100058A1C((uint64_t)v19);
  uint64_t v20 = sub_10000534C(&qword_10008A810);
  while (1)
  {
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v19, 1LL, v20) == 1)
    {
      swift_release(v43);
      swift_bridgeObjectRelease(v44);
      sub_100046510(v47[0]);
      return swift_release(v47[6]);
    }

    uint64_t v22 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v23 = (uint64_t)v16;
    sub_10003499C((uint64_t)v19 + *(int *)(v20 + 48), (uint64_t)v16, type metadata accessor for EventValue);
    int64_t v24 = *(void **)a5;
    unint64_t v26 = sub_100033A58(v22, v21);
    uint64_t v27 = v24[2];
    BOOL v28 = (v25 & 1) == 0;
    uint64_t v29 = v27 + v28;
    if (__OFADD__(v27, v28)) {
      break;
    }
    char v30 = v25;
    if (v24[3] >= v29)
    {
      if ((a4 & 1) == 0)
      {
        sub_10000534C((uint64_t *)&unk_10008B920);
        _NativeDictionary.copy()();
      }
    }

    else
    {
      sub_10005752C(v29, a4 & 1, type metadata accessor for EventValue, (uint64_t *)&unk_10008C510);
      unint64_t v31 = sub_100033A58(v22, v21);
      if ((v30 & 1) != (v32 & 1)) {
        goto LABEL_17;
      }
      unint64_t v26 = v31;
    }

    uint64_t v33 = *(void **)a5;
    if ((v30 & 1) != 0)
    {
      uint64_t v34 = v33[7];
      unint64_t v35 = *(void *)(v48 + 72) * v26;
      uint64_t v36 = v46;
      sub_100034734(v34 + v35, v46, type metadata accessor for EventValue);
      uint64_t v37 = v45;
      sub_100034734(v36, v45, type metadata accessor for EventValue);
      sub_100034760(v36, type metadata accessor for EventValue);
      uint64_t v16 = (char *)v23;
      sub_100034760(v23, type metadata accessor for EventValue);
      swift_bridgeObjectRelease(v21);
      sub_100041784(v37, *(void *)(*(void *)a5 + 56LL) + v35);
    }

    else
    {
      v33[(v26 >> 6) + 8] |= 1LL << v26;
      char v38 = (uint64_t *)(v33[6] + 16 * v26);
      *char v38 = v22;
      v38[1] = v21;
      uint64_t v16 = (char *)v23;
      sub_10003499C(v23, v33[7] + *(void *)(v48 + 72) * v26, type metadata accessor for EventValue);
      uint64_t v39 = v33[2];
      BOOL v40 = __OFADD__(v39, 1LL);
      uint64_t v41 = v39 + 1;
      if (v40) {
        goto LABEL_16;
      }
      v33[2] = v41;
    }

    sub_100058A1C((uint64_t)v19);
    uint64_t v20 = sub_10000534C(&qword_10008A810);
    a4 = 1;
  }

  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100057B78(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for EventValue(0LL);
  uint64_t v40 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  char v38 = (uint64_t *)((char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v35 - v13;
  uint64_t v15 = sub_10000534C((uint64_t *)&unk_10008C500);
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_1000589E0((uint64_t)a1, a2, a3, v39);
  uint64_t v37 = a1;
  sub_1000083B0();
  uint64_t v36 = a3;
  swift_retain(a3);
  sub_100059554();
  uint64_t v18 = sub_10000534C(&qword_10008A810);
  while (1)
  {
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v17, 1LL, v18) == 1)
    {
      swift_release(v36);
      swift_bridgeObjectRelease(v37);
      sub_100046510(v39[0]);
      return swift_release(v39[6]);
    }

    uint64_t v19 = (uint64_t)v17 + *(int *)(v18 + 48);
    uint64_t v21 = *v17;
    uint64_t v20 = v17[1];
    sub_10003499C(v19, (uint64_t)v14, type metadata accessor for EventValue);
    unint64_t v23 = sub_10005939C();
    uint64_t v24 = a1[2];
    BOOL v25 = (v22 & 1) == 0;
    uint64_t v26 = v24 + v25;
    if (__OFADD__(v24, v25)) {
      break;
    }
    char v27 = v22;
    if (a1[3] >= v26)
    {
      if ((a4 & 1) != 0)
      {
        if ((v22 & 1) != 0) {
          goto LABEL_10;
        }
      }

      else
      {
        sub_10000534C((uint64_t *)&unk_10008B920);
        _NativeDictionary.copy()();
        if ((v27 & 1) != 0) {
          goto LABEL_10;
        }
      }
    }

    else
    {
      sub_10005752C(v26, a4 & 1, type metadata accessor for EventValue, (uint64_t *)&unk_10008C510);
      unint64_t v28 = sub_10005939C();
      if ((v27 & 1) != (v29 & 1)) {
        goto LABEL_18;
      }
      unint64_t v23 = v28;
      if ((v27 & 1) != 0)
      {
LABEL_10:
        a1 = v38;
        sub_100034734((uint64_t)v14, (uint64_t)v38, type metadata accessor for EventValue);
        sub_100034760((uint64_t)v14, type metadata accessor for EventValue);
        swift_bridgeObjectRelease(v20);
        sub_100041784((uint64_t)a1, *(void *)(*(void *)a5 + 56LL) + *(void *)(v40 + 72) * v23);
        goto LABEL_14;
      }
    }

    a1 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v23 >> 6) + 64) |= 1LL << v23;
    char v30 = (void *)(a1[6] + 16 * v23);
    *char v30 = v21;
    v30[1] = v20;
    sub_10003499C((uint64_t)v14, a1[7] + *(void *)(v40 + 72) * v23, type metadata accessor for EventValue);
    uint64_t v31 = a1[2];
    BOOL v32 = __OFADD__(v31, 1LL);
    uint64_t v33 = v31 + 1;
    if (v32) {
      goto LABEL_17;
    }
    a1[2] = v33;
LABEL_14:
    sub_100059554();
    uint64_t v18 = sub_10000534C(&qword_10008A810);
    a4 = 1;
  }

  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

size_t sub_100057E64(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_100058080( a1,  a2,  a3,  *v3,  (uint64_t *)&unk_10008C590,  (void (*)(void))type metadata accessor for EventValue);
  *uint64_t v3 = result;
  return result;
}

char *sub_100057E90(char *a1, int64_t a2, char a3)
{
  size_t result = sub_100057FA0(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

size_t sub_100057EAC(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_100058080( a1,  a2,  a3,  *v3,  &qword_10008C5B0,  (void (*)(void))&type metadata accessor for URL);
  *uint64_t v3 = result;
  return result;
}

char *sub_100057ED8(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1000581B8(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_100057EF4(char a1, int64_t a2, char a3)
{
  *uint64_t v3 = v4;
}

char *sub_100057F20(char *a1, int64_t a2, char a3)
{
  size_t result = sub_100058298(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_100057F3C(char a1, int64_t a2, char a3)
{
  *uint64_t v3 = v4;
}

char *sub_100057F68(char *a1, int64_t a2, char a3)
{
  size_t result = sub_100058458(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

size_t sub_100057F84(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_100058538(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_100057FA0(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000534C(&qword_10008C580);
    uint64_t v11 = (char *)swift_allocObject(v10, (v9 << 6) | 0x20, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 64);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10005660C(v14, v8, v13);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_100056ABC((unint64_t)v14, v8, (unint64_t)v13);
  }

  swift_release(a4);
  return v11;
}

size_t sub_100058080( size_t result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(void))
{
  char v8 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }

      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v10 = a2;
  }

  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  sub_10000534C(a5);
  uint64_t v13 = *(void *)(((uint64_t (*)(void))a6)(0LL) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (v15 + 32) & ~v15;
  uint64_t v17 = (void *)sub_100059574(v16 + v14 * v12, v15);
  size_t result = j__malloc_size(v17);
  if (!v14)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if (result - v16 == 0x8000000000000000LL && v14 == -1) {
    goto LABEL_24;
  }
  uint64_t v17[2] = v11;
  void v17[3] = 2 * ((uint64_t)(result - v16) / v14);
LABEL_19:
  uint64_t v19 = *(unsigned __int8 *)(*(void *)(((uint64_t (*)(void))a6)(0LL) - 8) + 80LL);
  uint64_t v20 = (v19 + 32) & ~v19;
  unint64_t v21 = (unint64_t)v17 + v20;
  unint64_t v22 = a4 + v20;
  if ((v8 & 1) != 0)
  {
    sub_10005669C(v22, v11, v21, a6);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_100056BA8(v22, v11, v21);
  }

  sub_100006C04();
  return (size_t)v17;
}

char *sub_1000581B8(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000534C(&qword_10008A560);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_1000564E8(v14, v8, v13);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_100056A20((unint64_t)v14, v8, (unint64_t)v13);
  }

  swift_release(a4);
  return v11;
}

char *sub_100058298(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000534C(&qword_10008C4E8);
    uint64_t v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100056828(v14, v8, v13);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_100056C50((unint64_t)v14, v8, (unint64_t)v13);
  }

  swift_release(a4);
  return v11;
}

void sub_100058380(char a1, int64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v7 = *(void *)(a4 + 24);
    uint64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return;
      }

      uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v8 = a2;
  }

  uint64_t v9 = *(void *)(a4 + 16);
  if (v8 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    uint64_t v11 = sub_10000534C(a5);
    size_t v12 = (char *)sub_100006B14(v11, 8 * v10 + 32);
    size_t v13 = j__malloc_size(v12);
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 8);
  }

  else
  {
    size_t v12 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    sub_1000568B4(v14, v9, v12 + 32);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_100056D20((uint64_t)v14, v9);
  }

  sub_100006C04();
  sub_100006AB8();
}

char *sub_100058458(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000534C(&qword_10008A578);
    uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 8);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  size_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_1000568B4(v14, v8, v13);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_100056EB8(v14, v8, v13);
  }

  swift_release(a4);
  return v11;
}

size_t sub_100058538(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_10000534C((uint64_t *)&unk_10008C5A0);
  uint64_t v11 = *(void *)(sub_10000534C(&qword_10008A8B8) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if (result - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_24;
  }
  v15[2] = v8;
  void v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  uint64_t v17 = *(unsigned __int8 *)(*(void *)(sub_10000534C(&qword_10008A8B8) - 8) + 80LL);
  uint64_t v18 = (v17 + 32) & ~v17;
  unint64_t v19 = (unint64_t)v15 + v18;
  unint64_t v20 = a4 + v18;
  if ((v5 & 1) != 0)
  {
    sub_100056910(v20, v8, v19);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_100056DBC(v20, v8, v19);
  }

  swift_release(a4);
  return (size_t)v15;
}

uint64_t sub_100058680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2;
}

uint64_t sub_1000586C4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (uint64_t)a1 + *(int *)(sub_10000534C((uint64_t *)&unk_10008B960) + 48);
  uint64_t v5 = sub_10000534C(&qword_10008A810);
  uint64_t result = sub_100058680((uint64_t)a2 + *(int *)(v5 + 48), *a1, a1[1], v4);
  *a2 = result;
  a2[1] = v7;
  return result;
}

void *sub_100058724(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[9];
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_10005878C()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_1000587CC()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = swift_task_alloc(dword_10008C4B4);
  __int128 v5 = *(_OWORD *)(v0 + 32);
  __int128 v6 = *(_OWORD *)(v0 + 64);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_100058ECC;
  *(_OWORD *)(v4 + 152) = v6;
  *(void *)(v4 + 136) = v2;
  *(void *)(v4 + 144) = v3;
  *(_OWORD *)(v4 + 12sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v5;
  uint64_t v7 = sub_100059274((uint64_t)sub_100054E5C);
  return sub_10002C73C(v7, v8, 0LL);
}

uint64_t sub_100058838()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_100058878()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = swift_task_alloc(dword_10008C4CC);
  __int128 v5 = *(_OWORD *)(v0 + 32);
  __int128 v6 = *(_OWORD *)(v0 + 56);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_1000588E8;
  *(void *)(v4 + 16sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v3;
  *(_OWORD *)(v4 + 144) = v6;
  *(void *)(v4 + 136) = v2;
  *(_OWORD *)(v4 + 12sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v5;
  sub_100059274((uint64_t)sub_100054AE0);
  sub_10001AC0C();
  return sub_10002C73C(v7, v8, v9);
}

uint64_t sub_1000588E8()
{
  uint64_t v3 = *v0;
  uint64_t v1 = *v0;
  sub_1000590B0(*(void *)(v3 + 16), &v3);
  return sub_10001ABB0(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100058924()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10005895C()
{
  uint64_t v3 = v2;
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v7 = v0[5];
  uint64_t v9 = v0[6];
  uint64_t v8 = v0[7];
  uint64_t v10 = (void *)swift_task_alloc(dword_10008C4DC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v10;
  *uint64_t v10 = v1;
  v10[1] = sub_1000588E8;
  return sub_100054608(v3, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1000589E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v8 = -1LL;
  }
  a4[3] = 0LL;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_100058A1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000534C((uint64_t *)&unk_10008B960);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000534C(&qword_10008B028);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (uint64_t *)((char *)&v40 - v10);
  uint64_t v12 = *v1;
  uint64_t v13 = v1[1];
  uint64_t v15 = v1[2];
  int64_t v14 = v1[3];
  int64_t v16 = v14;
  unint64_t v17 = v1[4];
  uint64_t v41 = v5;
  if (v17)
  {
    uint64_t v44 = v9;
    int64_t v45 = v14;
    uint64_t v42 = v15;
    uint64_t v43 = v13;
    uint64_t v18 = a1;
    uint64_t v19 = (v17 - 1) & v17;
    unint64_t v20 = __clz(__rbit64(v17)) | (v14 << 6);
LABEL_3:
    uint64_t v21 = *(void *)(v12 + 56);
    unint64_t v22 = (uint64_t *)(*(void *)(v12 + 48) + 16 * v20);
    uint64_t v23 = v12;
    uint64_t v24 = *v22;
    uint64_t v25 = v22[1];
    uint64_t v26 = type metadata accessor for EventValue(0LL);
    sub_100034734( v21 + *(void *)(*(void *)(v26 - 8) + 72LL) * v20,  (uint64_t)v11 + *(int *)(v3 + 48),  type metadata accessor for EventValue);
    *uint64_t v11 = v24;
    v11[1] = v25;
    _s10RTCUtility9XPCObjectOwst_0((uint64_t)v11, 0LL, 1LL, v3);
    uint64_t v27 = v25;
    uint64_t v12 = v23;
    swift_bridgeObjectRetain(v27);
    a1 = v18;
    uint64_t v13 = v43;
    uint64_t v9 = v44;
    uint64_t v15 = v42;
    goto LABEL_25;
  }

  int64_t v28 = v14 + 1;
  if (__OFADD__(v14, 1LL))
  {
    __break(1u);
LABEL_23:
    int64_t v16 = v10;
    goto LABEL_24;
  }

  int64_t v29 = (unint64_t)(v15 + 64) >> 6;
  if (v28 < v29)
  {
    unint64_t v30 = *(void *)(v13 + 8 * v28);
    if (v30)
    {
LABEL_7:
      uint64_t v42 = v15;
      uint64_t v43 = v13;
      uint64_t v44 = v9;
      int64_t v45 = v28;
      uint64_t v18 = a1;
      uint64_t v19 = (v30 - 1) & v30;
      unint64_t v20 = __clz(__rbit64(v30)) + (v28 << 6);
      goto LABEL_3;
    }

    int64_t v31 = v14 + 2;
    int64_t v16 = v14 + 1;
    if (v14 + 2 < v29)
    {
      unint64_t v30 = *(void *)(v13 + 8 * v31);
      if (v30)
      {
LABEL_10:
        int64_t v28 = v31;
        goto LABEL_7;
      }

      int64_t v16 = v14 + 2;
      if (v14 + 3 < v29)
      {
        unint64_t v30 = *(void *)(v13 + 8 * (v14 + 3));
        if (v30)
        {
          int64_t v28 = v14 + 3;
          goto LABEL_7;
        }

        int64_t v31 = v14 + 4;
        int64_t v16 = v14 + 3;
        if (v14 + 4 < v29)
        {
          unint64_t v30 = *(void *)(v13 + 8 * v31);
          if (v30) {
            goto LABEL_10;
          }
          int64_t v28 = v14 + 5;
          int64_t v16 = v14 + 4;
          if (v14 + 5 < v29)
          {
            unint64_t v30 = *(void *)(v13 + 8 * v28);
            if (v30) {
              goto LABEL_7;
            }
            int64_t v10 = v29 - 1;
            int64_t v32 = v14 + 6;
            while (v32 < v29)
            {
              unint64_t v30 = *(void *)(v13 + 8 * v32++);
              if (v30)
              {
                int64_t v28 = v32 - 1;
                goto LABEL_7;
              }
            }

            goto LABEL_23;
          }
        }
      }
    }
  }

void sub_100058D2C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_1000594A0(a1, a2, a3);
  sub_100035380(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_100006B44();
}

void sub_100058D58(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_1000594A0(a1, a2, a3);
  sub_100035380(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_100006B44();
}

unint64_t sub_100058D84()
{
  unint64_t result = qword_10008C558;
  if (!qword_10008C558)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006C1A0, &unk_100085B30);
    atomic_store(result, (unint64_t *)&qword_10008C558);
  }

  return result;
}

uint64_t sub_100058DC0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_10001531C(v2, v4) = 1;
  }
  else {
    LODWORD(sub_10001531C(v2, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100058E0C + 4 * byte_10006BF0D[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100058E40 + 4 * byte_10006BF08[v4]))();
}

uint64_t sub_100058E40(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100058E48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100058E50LL);
  }
  return result;
}

uint64_t sub_100058E5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100058E64LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100058E68(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100058E70(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for SessionError()
{
}

unint64_t sub_100058E90()
{
  unint64_t result = qword_10008C5B8;
  if (!qword_10008C5B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006C178, &unk_100085B30);
    atomic_store(result, (unint64_t *)&qword_10008C5B8);
  }

  return result;
}

uint64_t sub_100058ED0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 55LL, 2LL, a7, 25LL, a9, a10, a11);
}

void *sub_100058EE8@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t sub_100058EF8()
{
  return swift_task_dealloc(*(void *)(v0 + 544));
}

uint64_t sub_100058F14(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = v4;
  a1[2].n128_u64[1] = v2;
  a1[3].n128_u64[0] = v3;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100058F3C(uint64_t a1)
{
  return swift_task_alloc((*(void *)(*(void *)(a1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_100058F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, v4, 0LL);
}

uint64_t sub_100058F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_100058F78(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  uint64_t v4 = (unint64_t *)((char *)a1->n128_u64 + v3);
  uint64_t v5 = (unint64_t *)((char *)a1->n128_u64 + v3 + *(int *)(v2 + 48));
  *uint64_t v4 = 0x646F6874656D5FLL;
  v4[1] = 0xE700000000000000LL;
  *uint64_t v5 = 0LL;
  return type metadata accessor for EventValue(0LL);
}

uint64_t sub_100058FAC()
{
  uint64_t v6 = (void *)(v5 + v4);
  uint64_t v7 = (void *)(v5 + v4 + *(int *)(v1 + 48));
  *uint64_t v6 = 0x7375746174735FLL;
  v6[1] = v3;
  *uint64_t v7 = v0;
  return swift_storeEnumTagMultiPayload(v7, v2, 1LL);
}

uint64_t sub_100058FDC()
{
  *(_WORD *)(v1 + 12) = 2082;
  uint64_t v3 = v2[25];
  uint64_t v4 = v2[26];
  uint64_t v5 = v2[27];
  uint64_t v6 = v2[28];
  uint64_t v7 = v2[29];
  v0[2] = v2[24];
  v0[3] = v3;
  v0[4] = v4;
  v0[5] = v5;
  v0[6] = v6;
  v0[7] = v7;
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_10005900C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_100059018(uint64_t a1)
{
  return swift_allocObject( v1,  ((*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL))
         + 2LL * *(void *)(*(void *)(a1 - 8) + 72LL),
           *(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) | 7LL);
}

uint64_t sub_100059040(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_10005905C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100059078(uint64_t a1, char a2)
{
  return sub_1000534B8(a1, a2);
}

uint64_t sub_100059094(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_1000590B0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_1000590B8()
{
  return v0;
}

uint64_t sub_1000590C4()
{
  return swift_release(*(void *)(v0 + 424));
}

uint64_t sub_1000590EC()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 168);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 176) = v0;
  return swift_task_dealloc(v5);
}

void sub_10005910C()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_10005911C()
{
  return _s10RTCUtility9XPCObjectOwet_0(*(void *)(v0 + 432), 1LL, *(void *)(v0 + 528));
}

uint64_t sub_100059140(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 1LL);
}

uint64_t sub_100059148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

void sub_10005915C()
{
  *(void *)(v1 + 192) = v0;
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)(v0 + 8 * v3 + 32) = v4;
}

uint64_t sub_100059184()
{
  return swift_task_dealloc(*(void *)(v0 + 400));
}

uint64_t sub_100059194(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

uint64_t sub_1000591A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(_WORD *)(v16 + 22) = 2082;
  return swift_getErrorValue(v14, v15, a14);
}

void sub_1000591C0( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, os_log_type_t type, uint64_t a17, uint64_t a18, os_log_t log)
{
}

uint64_t sub_1000591D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  *(void *)(v17 + 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a16, v18, v16);
}

uint64_t sub_1000591F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)(v13 + 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a11, a13, a10);
}

uint64_t sub_100059208(uint64_t a1)
{
  *(void *)(v2 + 88) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v3, v4);
}

uint64_t sub_100059220@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100059274@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_100059280()
{
  return v0;
}

  ;
}

void sub_1000592A8()
{
  *(void *)(v1 + 48) = v0;
}

uint64_t sub_1000592C4()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_1000592D0()
{
  *(void *)(v1 + 136) = v0;
  return swift_bridgeObjectRelease(0x8000000000000000LL);
}

  ;
}

uint64_t sub_1000592F8(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  return sub_100057B78(a1, a2, 0LL, a4, a5);
}

uint64_t sub_100059304( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return swift_arrayDestroy(a17, 3LL);
}

uint64_t sub_100059318()
{
  return swift_retain_n(v0, 2LL);
}

  ;
}

uint64_t sub_100059330()
{
  return v0;
}

uint64_t sub_10005933C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_100059350()
{
  return sub_100004C30(v0, v1);
}

uint64_t sub_10005935C()
{
  return type metadata accessor for Date(0LL);
}

unint64_t sub_100059364(uint64_t a1, uint64_t a2)
{
  return sub_100033A58(a1, a2);
}

char *sub_10005936C()
{
  return sub_100057F68(0LL, v0, 0);
}

  ;
}

uint64_t sub_100059394(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

unint64_t sub_10005939C()
{
  return sub_100033A58(v1, v0);
}

  ;
}

uint64_t sub_1000593BC@<X0>(uint64_t a1@<X8>)
{
  return a1 + v1;
}

void sub_1000593D4()
{
}

BOOL sub_1000593E4(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

  ;
}

uint64_t sub_1000593FC()
{
  return swift_task_alloc(v0);
}

  ;
}

  ;
}

void *sub_10005943C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *unint64_t result = v2;
  result[1] = a2;
  return result;
}

  ;
}

uint64_t sub_100059468( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_task_dealloc(a10);
}

BOOL sub_100059470()
{
  return (!v1 & v0) != 0;
}

uint64_t sub_100059480()
{
  return swift_getObjectType(*(void *)(v0 + 128));
}

uint64_t sub_100059490()
{
  return swift_errorRetain(v0);
}

void sub_100059498(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1000594A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10000534C(a3);
}

void sub_1000594B0()
{
}

uint64_t sub_1000594C0()
{
  return 0LL;
}

uint64_t sub_1000594D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a21 + 8))(v22, a22);
}

  ;
}

  ;
}

uint64_t sub_10005950C()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_100059514()
{
  return swift_task_dealloc(*(void *)(v0 + 80));
}

uint64_t sub_100059520(uint64_t a1, uint64_t a2)
{
  return static _DictionaryStorage.resize(original:capacity:move:)(a1, a2, v2);
}

uint64_t sub_10005952C(char a1)
{
  return sub_100008124(a1, v1, v2);
}

  ;
}

uint64_t sub_10005954C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100019964(a1, v3, a3);
}

uint64_t sub_100059554()
{
  return sub_100058A1C(v0);
}

  ;
}

uint64_t sub_100059574@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return swift_allocObject(v2, a1, a2 | 7);
}

  ;
}

unint64_t sub_10005958C()
{
  return 0xD000000000000012LL;
}

void sub_1000595A0(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

  ;
}

  ;
}

uint64_t sub_1000595D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_1000595E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Dictionary.init(dictionaryLiteral:)(v4, a2, v5, a4);
}

uint64_t sub_1000595F4()
{
  return v0;
}

uint64_t sub_100059600(uint64_t a1, uint64_t a2)
{
  return sub_100016914(v2, a2, v3);
}

void sub_10005960C()
{
}

uint64_t sub_100059618()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_100059620()
{
  return swift_getEnumCaseMultiPayload(v1, v0);
}

  ;
}

uint64_t sub_100059638()
{
  return v0;
}

uint64_t sub_10005964C()
{
  return v0;
}

uint64_t sub_100059660()
{
  return swift_getEnumCaseMultiPayload(v0, v1);
}

uint64_t sub_10005966C()
{
  return sub_100051B4C(v0, 16LL);
}

  ;
}

uint64_t sub_10005968C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_task_dealloc(a9);
}

uint64_t sub_100059694( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  return sub_100019964(a1, a2, (uint64_t *)va);
}

uint64_t sub_1000596A0()
{
  return swift_task_dealloc(*(void *)(v0 + 80));
}

uint64_t sub_1000596AC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100019964(a1, v3, a3);
}

uint64_t sub_1000596B4(uint64_t a1)
{
  return swift_bridgeObjectRetain(*(void *)(*(void *)(v1 + 56) + 8 * a1));
}

void *sub_1000596C0(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = a2;
  int64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    sub_100057F20(0LL, v5, 0);
    uint64_t v7 = _swiftEmptyArrayStorage;
    uint64_t v8 = (uint64_t *)(a1 + 48);
    while (1)
    {
      int64_t v24 = v5;
      uint64_t v9 = v7;
      uint64_t v10 = *(v8 - 2);
      uint64_t v11 = *(v8 - 1);
      uint64_t v12 = *v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v13 = v4;
      uint64_t v7 = v4;
      uint64_t v14 = sub_100059C00(v10, v11, v12);
      if (v3) {
        break;
      }
      uint64_t v17 = v14;
      uint64_t v18 = v15;
      uint64_t v19 = v16;
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v11);
      uint64_t v7 = v9;
      unint64_t v21 = v9[2];
      unint64_t v20 = v9[3];
      if (v21 >= v20 >> 1)
      {
        sub_100057F20((char *)(v20 > 1), v21 + 1, 1);
        uint64_t v7 = v9;
      }

      v7[2] = v21 + 1;
      uint64_t v22 = &v7[3 * v21];
      void v22[4] = v17;
      v22[5] = v18;
      v22[6] = v19;
      v8 += 3;
      uint64_t v3 = 0LL;
      int64_t v5 = v24 - 1;
      uint64_t v4 = v13;
      if (v24 == 1)
      {
        swift_release(v13);
        return v7;
      }
    }

    swift_release(v4);
    swift_release(v9);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v11);
  }

  else
  {
    swift_release(a2);
    return _swiftEmptyArrayStorage;
  }

  return v7;
}

uint64_t sub_10005984C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    unint64_t v5 = 0LL;
    uint64_t v6 = (_OWORD *)(result + 40);
    uint64_t v7 = _swiftEmptyArrayStorage;
    while (v5 < *(void *)(v3 + 16))
    {
      uint64_t v8 = *((void *)v6 - 1);
      __int128 v15 = *v6;
      uint64_t v16 = v8;
      __int128 v17 = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v9 = sub_10005AAA0(&v16, a2);
      if (v2)
      {
        swift_release(a2);
        swift_release(v7);
        swift_bridgeObjectRelease(v3);
        swift_bridgeObjectRelease(*((void *)&v15 + 1));
        uint64_t v13 = v15;
        goto LABEL_17;
      }

      if ((v9 & 1) != 0)
      {
        unint64_t result = swift_isUniquelyReferenced_nonNull_native(v7);
        uint64_t v18 = v7;
        if ((result & 1) == 0)
        {
          unint64_t result = (uint64_t)sub_100057F20(0LL, v7[2] + 1LL, 1);
          uint64_t v7 = v18;
        }

        unint64_t v11 = v7[2];
        unint64_t v10 = v7[3];
        if (v11 >= v10 >> 1)
        {
          unint64_t result = (uint64_t)sub_100057F20((char *)(v10 > 1), v11 + 1, 1);
          uint64_t v7 = v18;
        }

        v7[2] = v11 + 1;
        uint64_t v12 = &v7[3 * v11];
        v12[4] = v8;
        *(_OWORD *)(v12 + 5) = v15;
      }

      else
      {
        swift_bridgeObjectRelease(*((void *)&v15 + 1));
        unint64_t result = swift_bridgeObjectRelease(v15);
      }

      ++v5;
      uint64_t v6 = (_OWORD *)((char *)v6 + 24);
      if (v4 == v5) {
        goto LABEL_15;
      }
    }

    __break(1u);
  }

  else
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
LABEL_15:
    swift_release(a2);
    uint64_t v13 = v3;
LABEL_17:
    swift_bridgeObjectRelease(v13);
    return (uint64_t)v7;
  }

  return result;
}

void sub_1000599F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(v21, *(void *)(a3 + 40));
    String.hash(into:)(v21, a1, a2);
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    Swift::Int v8 = v6 & ~v7;
    sub_100047704();
    if ((v9 & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      unint64_t v11 = (uint64_t *)(v10 + 16 * v8);
      uint64_t v12 = v11[1];
      if ((*v11 != a1 || v12 != a2) && (sub_10005B734(*v11, v12) & 1) == 0)
      {
        uint64_t v14 = ~v7;
        uint64_t v15 = (v8 + 1) & v14;
        sub_100047704();
        if ((v16 & 1) != 0)
        {
          do
          {
            __int128 v17 = (uint64_t *)(v10 + 16 * v15);
            uint64_t v18 = v17[1];
            if (*v17 == a1 && v18 == a2) {
              break;
            }
            if ((sub_10005B734(*v17, v18) & 1) != 0) {
              break;
            }
            uint64_t v15 = (v15 + 1) & v14;
            sub_100047704();
          }

          while ((v20 & 1) != 0);
        }
      }
    }
  }

void sub_100059AE8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    unint64_t v4 = static Hasher._hash(seed:_:)(*(void *)(a2 + 40), a1) & ~(-1LL << *(_BYTE *)(a2 + 32));
    if (((*(void *)(a2 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0
      && *(void *)(*(void *)(a2 + 48) + 8 * v4) != a1)
    {
      sub_10005B6F4();
      if ((v7 & 1) != 0)
      {
        do
        {
          if (*(void *)(v5 + 8 * v6) == a1) {
            break;
          }
          sub_10005B6F4();
        }

        while ((v8 & 1) != 0);
      }
    }
  }

  sub_100006B44();
}

uint64_t sub_100059B84()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000D940(v0, qword_100093408);
  sub_10000D34C(v0, (uint64_t)qword_100093408);
  return Logger.init(subsystem:category:)( 0xD000000000000017LL,  0x800000010006D6D0LL,  0x2D646E656B636162LL,  0xEB00000000727474LL);
}

uint64_t sub_100059C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = a3;
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  uint64_t v5 = *(void *)(v3 + 152);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = v5 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100005E8C(v7, (uint64_t)v11);
      uint64_t v8 = v12;
      uint64_t v9 = v13;
      sub_100005F30(v11, v12);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16))(&v14, v8, v9);
      if (v4) {
        break;
      }
      sub_100005F54(v11);
      v7 += 40LL;
      if (!--v6)
      {
        swift_bridgeObjectRelease(v5);
        return v14;
      }
    }

    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v16);
    sub_100005F54(v11);
  }

  else
  {
    uint64_t v7 = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return v7;
}

uint64_t sub_100059D20(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  v2[6] = *v1;
  uint64_t v3 = *(void *)(type metadata accessor for EventValue(0LL) - 8);
  v2[7] = v3;
  v2[8] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v4 = (*(void *)(*(void *)(sub_10000534C(&qword_10008B028) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  void v2[9] = swift_task_alloc(v4);
  v2[10] = swift_task_alloc(v4);
  return swift_task_switch(sub_100059DB8, v1, 0LL);
}

uint64_t sub_100059DB8()
{
  if (qword_10008A080 != -1) {
LABEL_72:
  }
    swift_once(&qword_10008A080, sub_10004D6A0);
  if (byte_1000933D8 != 1) {
    goto LABEL_63;
  }
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void **)(v0 + 40);
  swift_retain(v2);
  uint64_t v3 = sub_1000596C0(v1, v2);
  uint64_t v4 = *(void *)(v0 + 40);
  swift_retain(v4);
  uint64_t v5 = sub_10005984C((uint64_t)v3, v4);
  uint64_t v6 = v5;
  *(void *)(v0 + 88) = v5;
  uint64_t v7 = *(void **)(v4 + 160);
  *(void *)(v0 + 96) = v7;
  if (!v7) {
    goto LABEL_62;
  }
  uint64_t v8 = *(void *)(v5 + 16);
  *(void *)(v0 + 104) = v8;
  if (!v8) {
    goto LABEL_62;
  }
  *(void *)(v0 + 112) = 0LL;
  uint64_t v9 = *(void *)(v5 + 16);
  id v10 = v7;
  if (!v9) {
    goto LABEL_61;
  }
  unint64_t v11 = (void *)(v0 + 16);
  unint64_t v12 = sub_100035A48();
  unint64_t v13 = 0LL;
  uint64_t v104 = v12;
  uint64_t v105 = v0 + 16;
  while (2)
  {
    uint64_t v14 = *(void *)(v6 + 24 * v13 + 48);
    uint64_t v15 = *(void *)(v14 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *unint64_t v11 = Dictionary.init(minimumCapacity:)(v15, &type metadata for String, v12, &protocol witness table for String);
    uint64_t v16 = *(void *)(v14 + 64);
    uint64_t v106 = v14 + 64;
    uint64_t v108 = v14;
    uint64_t v17 = -1LL << *(_BYTE *)(v14 + 32);
    uint64_t v18 = sub_10000FFD8();
    uint64_t v109 = 0LL;
    if (-v17 < 64) {
      uint64_t v26 = ~(-1LL << -(char)v17);
    }
    else {
      uint64_t v26 = -1LL;
    }
    uint64_t v27 = v26 & v16;
    int64_t v107 = (unint64_t)(63 - v17) >> 6;
    uint64_t v103 = v107 - 1;
    while (1)
    {
      if (v27)
      {
        v27 &= v27 - 1;
LABEL_13:
        uint64_t v28 = sub_10005B5D8(v18, v19, v20, v21, v22, v23, v24, v25, v103, v104, v105, v106, v107, v108);
        sub_10005B710(v28);
        sub_10005B6BC();
        goto LABEL_33;
      }

      if (__OFADD__(v109, 1LL))
      {
        __break(1u);
        goto LABEL_72;
      }

      sub_10005B7E4();
      if (v30 != v31)
      {
        uint64_t v32 = *(void *)(v106 + 8 * v29);
        if (v32) {
          goto LABEL_18;
        }
        uint64_t v33 = v29 + 1;
        uint64_t v109 = v29;
        if (v29 + 1 < v107)
        {
          uint64_t v32 = *(void *)(v106 + 8 * v33);
          if (v32) {
            goto LABEL_21;
          }
          uint64_t v109 = v29 + 1;
          if (v29 + 2 < v107)
          {
            uint64_t v32 = *(void *)(v106 + 8 * (v29 + 2));
            if (v32)
            {
              v29 += 2LL;
LABEL_18:
              uint64_t v27 = (v32 - 1) & v32;
              uint64_t v109 = v29;
              goto LABEL_13;
            }

            uint64_t v33 = v29 + 3;
            uint64_t v109 = v29 + 2;
            if (v29 + 3 < v107)
            {
              uint64_t v32 = *(void *)(v106 + 8 * v33);
              if (!v32)
              {
                while (!__OFADD__(v33, 1LL))
                {
                  sub_10005B7E4();
                  if (v30 == v31)
                  {
                    uint64_t v109 = v103;
                    goto LABEL_32;
                  }

                  uint64_t v32 = *(void *)(v106 + 8 * v29);
                  uint64_t v33 = v34 + 1;
                  if (v32) {
                    goto LABEL_18;
                  }
                }

                __break(1u);
                goto LABEL_82;
              }

LABEL_61:
  __break(1u);
LABEL_62:
  sub_10000FFD8();
LABEL_63:
  sub_10005B6B0();
  sub_10001AB88();
  sub_10001AB08();
  return sub_10005B63C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005A450()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 144LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 40LL);
  sub_10001A97C(*(void *)(*(void *)v0 + 168LL));
  swift_bridgeObjectRelease(v1);
  sub_10001AB88();
  return swift_task_switch(sub_10005A4B4, v2, 0LL);
}

void sub_10005A4B4()
{
  uint64_t v100 = (void *)(v0 + 16);

  int64_t v1 = *(void *)(v0 + 128);
  unint64_t v2 = *(void *)(v0 + 136);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 120);
    goto LABEL_3;
  }

  uint64_t v20 = &unk_10008B960;
LABEL_8:
  BOOL v21 = __OFADD__(v1++, 1LL);
  if (v21) {
    goto LABEL_73;
  }
  unint64_t v22 = (1LL << *(_BYTE *)(v0 + 176)) + 63;
  uint64_t v3 = *(void *)(v0 + 120);
  if (v1 < (uint64_t)(v22 >> 6))
  {
    uint64_t v23 = v3 + 64;
    unint64_t v24 = *(void *)(v3 + 64 + 8 * v1);
    if (v24) {
      goto LABEL_68;
    }
    int64_t v25 = v22 >> 6;
    int64_t v26 = v1 + 1;
    if (v1 + 1 < v25)
    {
      unint64_t v24 = *(void *)(v23 + 8 * v26);
      if (v24) {
        goto LABEL_67;
      }
      int64_t v26 = v1 + 2;
      if (v1 + 2 < v25)
      {
        unint64_t v24 = *(void *)(v23 + 8 * v26);
        if (v24)
        {
LABEL_67:
          int64_t v1 = v26;
          goto LABEL_68;
        }

        v1 += 3LL;
        if (v1 < v25)
        {
          unint64_t v24 = *(void *)(v23 + 8 * v1);
          if (!v24)
          {
            while (1)
            {
              int64_t v26 = v1 + 1;
              if (__OFADD__(v1, 1LL)) {
                goto LABEL_75;
              }
              if (v26 >= v25) {
                goto LABEL_21;
              }
              unint64_t v24 = *(void *)(v23 + 8 * v26);
              ++v1;
              if (v24) {
                goto LABEL_67;
              }
            }
          }

LABEL_68:
          uint64_t v4 = (v24 - 1) & v24;
          unint64_t v5 = __clz(__rbit64(v24)) + (v1 << 6);
LABEL_4:
          *(void *)(v0 + 128) = v1;
          *(void *)(v0 + 136) = v4;
          *(void *)(v0 + 144) = *(void *)(*(void *)(v3 + 48) + 16 * v5 + 8);
          uint64_t v6 = *(void **)(*(void *)(v3 + 56) + 8 * v5);
          *(void *)(v0 + 152) = v6;
          uint64_t v7 = qword_10008A0B0;
          sub_1000083B8();
          id v8 = v6;
          if (v7 != -1) {
            goto LABEL_76;
          }
          goto LABEL_5;
        }
      }
    }
  }

uint64_t sub_10005AAA0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = sub_100030F84(*a1, a1[1], a1[2]);
  if ((v4 & 1) != 0) {
    return 1LL;
  }
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a2 + 112);
  if (*(void *)(v6 + 16))
  {
    sub_100059AE8(v3, v6);
    if ((v7 & 1) == 0)
    {
      if (qword_10008A0B0 != -1) {
        swift_once(&qword_10008A0B0, sub_100059B84);
      }
      uint64_t v20 = type metadata accessor for Logger(0LL);
      sub_10000D34C(v20, (uint64_t)qword_100093408);
      uint64_t v21 = swift_retain_n(a2, 2LL);
      os_log_type_t v12 = (os_log_s *)Logger.logObject.getter(v21);
      os_log_type_t v13 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = swift_slowAlloc(22LL, -1LL);
        uint64_t v25 = swift_slowAlloc(32LL, -1LL);
        uint64_t v26 = v5;
        uint64_t v28 = v25;
        *(_DWORD *)uint64_t v14 = 134218242;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v14 + 4);
        *(_WORD *)(v14 + 12) = 2082;
        swift_retain(a2);
        unint64_t v22 = sub_10005B2FC();
        unint64_t v24 = v23;
        swift_release(a2);
        uint64_t v26 = sub_100019964(v22, v24, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v14 + 14);
        swift_release_n(a2, 2LL);
        swift_bridgeObjectRelease(v24);
        uint64_t v18 = "removing event with category %ld from submission to %{public}s due to allowlist";
        goto LABEL_15;
      }

void sub_10005AE0C( uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = a8;
  uint64_t v32 = a7;
  unint64_t v33 = a3;
  uint64_t v13 = sub_10000534C(&qword_10008C6C8);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = objc_opt_self(&OBJC_CLASS___NSDictionary);
  uint64_t v18 = swift_dynamicCastObjCClassUnconditional(a2, v17, 0LL, 0LL, 0LL);
  aBlock[0] = 0LL;
  unint64_t v19 = sub_100035A48();
  static Dictionary._forceBridgeFromObjectiveC(_:result:)( v18,  aBlock,  &type metadata for String,  v19,  &protocol witness table for String);
  uint64_t v20 = aBlock[0];
  if (aBlock[0])
  {
    uint64_t v21 = *a4;
    uint64_t v22 = *(void *)(a5 + 128);
    uint64_t v23 = *(void *)(a5 + 136);
    uint64_t v30 = v22;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))( (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v13);
    uint64_t v24 = *(unsigned __int8 *)(v14 + 80);
    uint64_t v25 = (v24 + 32) & ~v24;
    unint64_t v26 = (v15 + v25 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v27 = swift_allocObject(&unk_100085C28, v26 + 8, v24 | 7);
    *(void *)(v27 + ++*(void *)(v0 + 16) = a6;
    *(void *)(v27 + 24) = v32;
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v27 + v25, v16, v13);
    *(void *)(v27 + v26) = v31;
    aBlock[4] = sub_10005B478;
    uint64_t v35 = v27;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_10005B1F0;
    aBlock[3] = &unk_100085C40;
    uint64_t v28 = _Block_copy(aBlock);
    uint64_t v29 = v35;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release(v29);
    sub_10005B4E8(v21, v30, v23, v20, (uint64_t)v28, v33);
    swift_bridgeObjectRelease(v23);
    _Block_release(v28);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10005B010(char a1, uint64_t a2, unint64_t a3)
{
  if (qword_10008A0B0 != -1) {
    swift_once(&qword_10008A0B0, sub_100059B84);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10000D34C(v6, (uint64_t)qword_100093408);
  uint64_t v7 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc(18LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v11;
    *(_DWORD *)uint64_t v10 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_100019964(a2, a3, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v10 + 4);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v10 + 12) = 1026;
    LODWORD(v14) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, (char *)&v14 + 4, v10 + 14);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "TTR rule %{public}s processed event with status: %{BOOL,public}d",  (uint8_t *)v10,  0x12u);
    swift_arrayDestroy(v11, 1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  uint64_t v12 = sub_10000534C(&qword_10008C6C8);
  return CheckedContinuation.resume(returning:)(v12, v12);
}

uint64_t sub_10005B1F0(uint64_t a1, uint64_t a2)
{
  char v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_10005B22C()
{
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10005B278()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for BackendTTR()
{
  return objc_opt_self(&OBJC_CLASS____TtC13rtcreportingd10BackendTTR);
}

uint64_t sub_10005B2B0(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_10008C5FC);
  *(void *)(v1 + ++*(void *)(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100026354;
  return sub_100059D20(a1);
}

unint64_t sub_10005B2FC()
{
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v1 = *(void **)(v0 + 136);
  sub_1000083B8();
  v3._uint64_t countAndFlagsBits = v2;
  v3._object = v1;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v1);
  return 0xD000000000000016LL;
}

unint64_t sub_10005B384()
{
  return sub_10005B2FC();
}

unint64_t sub_10005B3A4()
{
  unint64_t result = qword_10008C6C0;
  if (!qword_10008C6C0)
  {
    uint64_t v1 = type metadata accessor for BackendTTR();
    unint64_t result = swift_getWitnessTable(&unk_10006C27C, v1);
    atomic_store(result, (unint64_t *)&qword_10008C6C0);
  }

  return result;
}

void sub_10005B3E0(uint64_t a1)
{
}

uint64_t sub_10005B3F4()
{
  uint64_t v1 = sub_10000534C(&qword_10008C6C8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10005B478(char a1)
{
  return sub_10005B010(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10005B4D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10005B4E0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_10005B4E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  NSString v11 = String._bridgeToObjectiveC()();
  Class v12 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a4);
  [a6 handleEvent:isa sender:v11 ruleConfig:v12 withReplyBlock:a5];
}

uint64_t sub_10005B5D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v17 = *(void **)(v15 + 72);
  uint64_t v18 = (void *)(*(void *)(a14 + 48) + 16 * v14);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  return sub_10000534C(v16);
}

  ;
}

uint64_t sub_10005B63C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10005B658()
{
  return ((uint64_t (*)(void))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:))();
}

uint64_t sub_10005B674()
{
  return ((uint64_t (*)(void))withCheckedContinuation<A>(isolation:function:_:))();
}

void *sub_10005B690( void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v14 + 16sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = result;
  result[2] = v15;
  result[3] = v16;
  result[4] = a11;
  result[5] = v12;
  result[6] = v13;
  result[7] = v11;
  result[8] = v17;
  return result;
}

uint64_t sub_10005B6B0()
{
  return swift_task_dealloc(*(void *)(v0 + 80));
}

double sub_10005B6BC()
{
  *(void *)&double result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

void sub_10005B6E0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

  ;
}

uint64_t sub_10005B710(uint64_t a1)
{
  return sub_10001FD14(v2, v1 + *(int *)(a1 + 48));
}

uint64_t sub_10005B724()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_10005B734(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_10005B744(uint64_t a1)
{
  *(void *)(v2 + 4) = a1;
  return swift_bridgeObjectRelease_n(v1, 3LL);
}

uint64_t sub_10005B754@<X0>(uint64_t a1@<X8>)
{
  return sub_10001FDA0(a1 + *(int *)(v1 + 48), v2);
}

uint64_t sub_10005B764()
{
  uint64_t result = *(void *)(v0 + 144);
  *(void *)(v1 + 12sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = result;
  *(_BYTE *)(v1 + 176) = *(_BYTE *)(result + 32);
  return result;
}

uint64_t sub_10005B778()
{
  return sub_10001FD58(*(void *)(v0 + 72), *(void *)(v0 + 80));
}

uint64_t sub_10005B784( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_release(a14);
}

uint64_t sub_10005B790(uint64_t a1)
{
  return _s10RTCUtility9XPCObjectOwet_0(v1, 1LL, a1);
}

unint64_t sub_10005B7B4()
{
  return sub_10005B3A4();
}

uint64_t sub_10005B7C0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100019964(v4, v3, a3);
}

uint64_t sub_10005B7CC()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_10005B7D8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 16));
}

  ;
}

uint64_t sub_10005B7F0()
{
  return swift_task_alloc(80LL);
}

uint64_t sub_10005B7FC(uint64_t a1)
{
  unint64_t v3 = *(os_unfair_lock_s **)(v1 + 40);
  sub_100010324();
  os_unfair_lock_lock(v3 + 6);
  sub_10005C1F0((uint64_t)&v3[4], a1);
  os_unfair_lock_unlock(v3 + 6);
  return swift_release(v3);
}

uint64_t sub_10005B85C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000D940(v0, qword_10008C6D0);
  sub_10000D34C(v0, (uint64_t)qword_10008C6D0);
  return Logger.init(subsystem:category:)( 0xD000000000000017LL,  0x800000010006D6D0LL,  0x72656E657473696CLL,  0xE800000000000000LL);
}

uint64_t sub_10005B8D0(char a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  __chkstk_darwin(v4);
  uint64_t v5 = sub_10005C3D0();
  uint64_t v37 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(v5);
  uint64_t v6 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  sub_100006B64();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  sub_100006B54();
  __chkstk_darwin(v11);
  sub_100006B64();
  uint64_t v14 = v13 - v12;
  type metadata accessor for DispatchQoS(0LL);
  sub_100006B54();
  __chkstk_darwin(v15);
  sub_100006B64();
  uint64_t v18 = v17 - v16;
  sub_10001A788();
  static DispatchQoS.background.getter();
  uint64_t v40 = _swiftEmptyArrayStorage;
  unint64_t v19 = sub_10005C390();
  uint64_t v20 = sub_10000534C(&qword_10008AD00);
  unint64_t v21 = sub_10001A804();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v20, v21, v10, v19);
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))( v9,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v37);
  (*(void (**)(uint64_t, void, uint64_t))(v38 + 104))( v2,  enum case for DispatchQoS.QoSClass.background(_:),  v39);
  uint64_t v22 = static OS_dispatch_queue.global(qos:)(v2);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v2, v39);
  uint64_t v23 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001ELL,  0x800000010006F520LL,  v18,  v14,  v9,  v22);
  *(void *)(v3 + ++*(void *)(v0 + 16) = v23;
  *(void *)(v3 + 24) = 0LL;
  uint64_t v24 = sub_10000534C(&qword_10008C7B8);
  uint64_t v25 = sub_100006B14(v24, 20LL);
  *(_DWORD *)(v25 + ++*(void *)(v0 + 16) = 0;
  *(void *)(v3 + 32) = v25;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage, v26))
  {
    sub_100063A38((unint64_t)_swiftEmptyArrayStorage);
    uint64_t v27 = v35;
  }

  else
  {
    uint64_t v27 = &_swiftEmptySetSingleton;
  }

  uint64_t v28 = sub_10000534C(&qword_10008C7C0);
  uint64_t v29 = sub_100006B14(v28, 28LL);
  *(_DWORD *)(v29 + 24) = 0;
  *(void *)(v29 + ++*(void *)(v0 + 16) = v27;
  *(void *)(v3 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v29;
  *(_BYTE *)(v3 + 48) = a1 & 1;
  uint64_t v30 = type metadata accessor for XPCConnection();
  sub_100006B14(v30, 48LL);
  id v31 = v23;
  swift_retain(v3);
  uint64_t v32 = XPCConnection.init(machService:targetQ:listen:delegate:)( 0xD000000000000017LL,  0x800000010006D6D0LL,  v31,  1,  v3,  (uint64_t)&off_100085C90);
  uint64_t v33 = *(void *)(v3 + 24);
  *(void *)(v3 + 24) = v32;
  swift_release(v33);
  return v3;
}

void sub_10005BB98(void *a1)
{
  uint64_t v1 = xpc_copy_description(a1);
  uint64_t v2 = String.init(cString:)(v1);
  uint64_t v4 = v3;
  _StringGuts.grow(_:)(36LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v5._uint64_t countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000022LL,  0x800000010006F4F0LL,  "rtcreportingd/Listener.swift",  28LL,  2LL,  22LL,  0);
  __break(1u);
}

uint64_t sub_10005BC3C(_xpc_connection_s *a1)
{
  uint64_t v5 = sub_10005C3D0();
  uint64_t v6 = type metadata accessor for XPCObject(v5);
  sub_100006B54();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v36 - v11;
  sub_10000534C(&qword_10008BFA0);
  sub_100006B54();
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v36 - v17;
  swift_unknownObjectRetain(a1);
  XPCIncomingConnection.entitlementValue(forKey:)(0xD00000000000001FLL, 0x800000010006F4B0LL, (uint64_t)a1, (uint64_t)v18);
  sub_10001A364((uint64_t)v18, (uint64_t)v16);
  if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v16, 1LL, v6) == 1)
  {
    sub_10005C2A4((uint64_t)v16);
LABEL_14:
    pid_t pid = xpc_connection_get_pid(a1);
    if (qword_10008A0B8 != -1) {
      swift_once(&qword_10008A0B8, sub_10005B85C);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    uint64_t v28 = sub_10000D34C(v27, (uint64_t)qword_10008C6D0);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      id v31 = (uint8_t *)sub_10005C3EC();
      *(_DWORD *)id v31 = 67240192;
      pid_t v38 = pid;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v31 + 4);
      _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "connection attempted by unentitled process %{public}d",  v31,  8u);
      sub_100010010((uint64_t)v31);
    }

    xpc_connection_cancel(a1);
    sub_10005C3F8();
    return sub_10005C2A4((uint64_t)v18);
  }

  sub_10003E334((uint64_t)v16, (uint64_t)v12);
  sub_10003E2A8((uint64_t)v12, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload(v10, v6) != 2)
  {
    sub_10001A1A4((uint64_t)v12);
    uint64_t v25 = (uint64_t)v10;
LABEL_13:
    sub_10001A1A4(v25);
    goto LABEL_14;
  }

  if ((*v10 & 1) == 0)
  {
    uint64_t v25 = (uint64_t)v12;
    goto LABEL_13;
  }

  if ((*(_BYTE *)(v1 + 48) & 1) != 0)
  {
    pid_t v19 = xpc_connection_get_pid(a1);
    if (qword_10008A0B8 != -1) {
      swift_once(&qword_10008A0B8, sub_10005B85C);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = sub_10000D34C(v20, (uint64_t)qword_10008C6D0);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)sub_10005C3EC();
      *(_DWORD *)uint64_t v24 = 67240192;
      pid_t v37 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v24 + 4);
      _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "rejecting connection from %{public}d while reporting is disabled",  v24,  8u);
      sub_100010010((uint64_t)v24);
    }

    xpc_connection_cancel(a1);
    sub_10005C3F8();
  }

  else
  {
    uint64_t v33 = type metadata accessor for TaskPriority(0LL);
    _s10RTCUtility9XPCObjectOwst_0(v2, 1LL, 1LL, v33);
    uint64_t v34 = (void *)sub_100006B14((uint64_t)&unk_100085CB8, 48LL);
    void v34[2] = 0LL;
    _BYTE v34[3] = 0LL;
    v34[4] = v1;
    v34[5] = a1;
    swift_unknownObjectRetain(a1);
    sub_100010324();
    uint64_t v35 = sub_100016914(v2, (uint64_t)&unk_10008C7B0, (uint64_t)v34);
    sub_10005C3F8();
    swift_release(v35);
  }

  sub_10001A1A4((uint64_t)v12);
  return sub_10005C2A4((uint64_t)v18);
}

uint64_t sub_10005C014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + ++*(void *)(v0 + 16) = a4;
  uint64_t v8 = type metadata accessor for Client();
  swift_allocObject(v8, 160LL, 15LL);
  uint64_t v9 = dword_10008ACEC;
  swift_retain(a4);
  swift_unknownObjectRetain(a5);
  uint64_t v10 = (void *)swift_task_alloc(v9);
  *(void *)(v5 + 24) = v10;
  *uint64_t v10 = v5;
  v10[1] = sub_10005C0A4;
  return sub_100015AD0();
}

uint64_t sub_10005C0A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24LL);
  *(void *)(*(void *)v1 + 32LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10005C100, 0LL, 0LL);
}

uint64_t sub_10005C100()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)(v0 + 16) + 40LL);
  sub_100010324();
  os_unfair_lock_lock(v2 + 6);
  sub_10005C1A4((uint64_t)&v2[4], v1);
  uint64_t v3 = *(void *)(v0 + 32);
  os_unfair_lock_unlock(v2 + 6);
  swift_release(v3);
  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005C1A4(uint64_t a1, uint64_t a2)
{
  return swift_release(v4);
}

uint64_t sub_10005C1F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_100044F20(a2, a2);
  return swift_release(v2);
}

uint64_t sub_10005C220()
{
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  return v0;
}

uint64_t sub_10005C254()
{
  return swift_deallocClassInstance(v0, 49LL, 7LL);
}

uint64_t type metadata accessor for Listener()
{
  return objc_opt_self(&OBJC_CLASS____TtC13rtcreportingd8Listener);
}

void sub_10005C294(void *a1)
{
}

uint64_t sub_10005C2A4(uint64_t a1)
{
  uint64_t v2 = sub_10000534C(&qword_10008BFA0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10005C2E4()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10005C318(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_10008C7AC);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100013D04;
  return sub_10005C014(a1, v4, v5, v7, v6);
}

unint64_t sub_10005C390()
{
  unint64_t result = qword_10008ACF8;
  if (!qword_10008ACF8)
  {
    uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_10008ACF8);
  }

  return result;
}

uint64_t sub_10005C3D0()
{
  return 0LL;
}

uint64_t sub_10005C3EC()
{
  return swift_slowAlloc(8LL, -1LL);
}

uint64_t sub_10005C3F8()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t destroy for RawStorebag._EncodedRawStorebag(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

void *initializeWithCopy for RawStorebag._EncodedRawStorebag(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for RawStorebag._EncodedRawStorebag(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *assignWithTake for RawStorebag._EncodedRawStorebag(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for RawStorebag._EncodedRawStorebag(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(sub_10003499C(v0, v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_10003499C(v0, v1, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_10003499C(v0, v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RawStorebag._EncodedRawStorebag(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + ++*(void *)(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RawStorebag._EncodedRawStorebag()
{
  return &type metadata for RawStorebag._EncodedRawStorebag;
}

uint64_t sub_10005C5A4(uint64_t a1, unint64_t a2)
{
  if (a1 == 6775138 && a2 == 0xE300000000000000LL)
  {
    unint64_t v5 = 0xE300000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(6775138LL, 0xE300000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x727574616E676973LL && a2 == 0xE900000000000065LL)
  {
    swift_bridgeObjectRelease(0xE900000000000065LL);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x727574616E676973LL, 0xE900000000000065LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_10005C68C(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x727574616E676973LL;
  }
  else {
    return 6775138LL;
  }
}

uint64_t sub_10005C6C0(void *a1)
{
  uint64_t v3 = sub_10000534C(&qword_10008C7C8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100005F30(a1, v7);
  unint64_t v9 = sub_10005C914();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RawStorebag._EncodedRawStorebag.CodingKeys,  &type metadata for RawStorebag._EncodedRawStorebag.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    sub_100005F54(a1);
  }

  else
  {
    char v17 = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
    uint64_t v12 = v11;
    char v16 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
    uint64_t v14 = v13;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    sub_100005F54(a1);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v12);
  }

  return v8;
}

uint64_t sub_10005C86C()
{
  return sub_10005C68C(*v0);
}

uint64_t sub_10005C874@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10005C5A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005C898(uint64_t a1)
{
  unint64_t v2 = sub_10005C914();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005C8C0(uint64_t a1)
{
  unint64_t v2 = sub_10005C914();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005C8E8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10005C6C0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

unint64_t sub_10005C914()
{
  unint64_t result = qword_10008C7D0;
  if (!qword_10008C7D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006C41C, &type metadata for RawStorebag._EncodedRawStorebag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008C7D0);
  }

  return result;
}

uint64_t destroy for RawStorebag(uint64_t a1)
{
  return sub_100004C44(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t *initializeWithCopy for RawStorebag(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10000D8FC(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v7 = a2[2];
  unint64_t v6 = a2[3];
  sub_10000D8FC(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for RawStorebag(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10000D8FC(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100004C44(v6, v7);
  uint64_t v9 = a2[2];
  unint64_t v8 = a2[3];
  sub_10000D8FC(v9, v8);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  sub_100004C44(v10, v11);
  return a1;
}

uint64_t *assignWithTake for RawStorebag(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100004C44(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100004C44(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for RawStorebag(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xD && *(_BYTE *)(a1 + 32))
    {
      unsigned int v2 = *(_DWORD *)a1 + 12;
    }

    else
    {
      unsigned int v2 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
      if (v2 >= 0xC) {
        unsigned int v2 = -1;
      }
    }
  }

  else
  {
    unsigned int v2 = -1;
  }

  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for RawStorebag(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + ++*(void *)(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)unint64_t result = a2 - 13;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RawStorebag()
{
  return &type metadata for RawStorebag;
}

uint64_t storeEnumTagSinglePayload for RawStorebag._EncodedRawStorebag.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_10001531C(v2, v4) = 1;
  }
  else {
    LODWORD(sub_10001531C(v2, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10005CB74 + 4 * byte_10006C2F5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10005CBA8 + 4 * byte_10006C2F0[v4]))();
}

uint64_t sub_10005CBA8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005CBB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10005CBB8LL);
  }
  return result;
}

uint64_t sub_10005CBC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10005CBCCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10005CBD0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005CBD8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RawStorebag._EncodedRawStorebag.CodingKeys()
{
  return &type metadata for RawStorebag._EncodedRawStorebag.CodingKeys;
}

unint64_t sub_10005CBF8()
{
  unint64_t result = qword_10008C7D8;
  if (!qword_10008C7D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006C3F4, &type metadata for RawStorebag._EncodedRawStorebag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008C7D8);
  }

  return result;
}

unint64_t sub_10005CC38()
{
  unint64_t result = qword_10008C7E0;
  if (!qword_10008C7E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006C364, &type metadata for RawStorebag._EncodedRawStorebag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008C7E0);
  }

  return result;
}

unint64_t sub_10005CC78()
{
  unint64_t result = qword_10008C7E8[0];
  if (!qword_10008C7E8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10006C38C, &type metadata for RawStorebag._EncodedRawStorebag.CodingKeys);
    atomic_store(result, qword_10008C7E8);
  }

  return result;
}

uint64_t sub_10005CCB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24LL);
}

uint64_t sub_10005CCBC(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_10006C500;
    swift_initEnumMetadataMultiPayload(a1, 0LL, 2LL, v4);
    return 0LL;
  }

  return result;
}

uint64_t *sub_10005CD2C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
    swift_retain(v8);
  }

  else
  {
    unsigned int v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 2)
    {
      else {
        uint64_t v10 = 4LL;
      }
      __asm { BR              X13 }
    }

    if (v9 == 1)
    {
      uint64_t v11 = a2[1];
      *unint64_t v3 = *a2;
      v3[1] = v11;
      *((_BYTE *)v3 + sub_10000E870(v4, *(void *)(v0 + 448), v5) = 1;
      swift_bridgeObjectRetain(v11);
    }

    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + sub_10000E870(v4, *(void *)(v0 + 448), v5) = 0;
    }
  }

  return v3;
}

uint64_t sub_10005CE44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8LL);
  unint64_t v3 = *(void *)(v2 + 64);
  if (v3 <= 0x10) {
    unint64_t v3 = 16LL;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1) {
      return swift_bridgeObjectRelease(*(void *)(a1 + 8));
    }
    else {
      return (*(uint64_t (**)(void))(v2 + 8))();
    }
  }

  else
  {
    else {
      uint64_t v5 = 4LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_10005CE8C + 4 * byte_10006C475[v5]))();
  }

void *sub_10005CEE4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  unsigned int v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    else {
      uint64_t v7 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v6 == 1)
  {
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_bridgeObjectRetain(v8);
    char v9 = 1;
  }

  else
  {
    (*(void (**)(void *))(v4 + 16))(a1);
    char v9 = 0;
  }

  *((_BYTE *)a1 + sub_10000E870(v4, *(void *)(v0 + 448), v5) = v9;
  return a1;
}

void *sub_10005CFBC(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16LL;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      else {
        uint64_t v9 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v8 == 1) {
      swift_bridgeObjectRelease(a1[1]);
    }
    else {
      (*(void (**)(void *, void))(v6 + 8))(a1, *(void *)(a3 + 16));
    }
    unsigned int v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1)
    {
      *a1 = *a2;
      uint64_t v12 = a2[1];
      a1[1] = v12;
      *((_BYTE *)a1 + v7) = 1;
      swift_bridgeObjectRetain(v12);
    }

    else
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }

  return a1;
}

_OWORD *sub_10005D154(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  unsigned int v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    else {
      uint64_t v7 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v6 == 1)
  {
    *a1 = *a2;
    char v8 = 1;
  }

  else
  {
    (*(void (**)(_OWORD *))(v4 + 32))(a1);
    char v8 = 0;
  }

  *((_BYTE *)a1 + sub_10000E870(v4, *(void *)(v0 + 448), v5) = v8;
  return a1;
}

uint64_t sub_10005D228(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  if ((_OWORD *)a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16LL;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = *(unsigned __int8 *)(a1 + v7);
    if (v8 >= 2)
    {
      else {
        uint64_t v9 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v8 == 1) {
      swift_bridgeObjectRelease(*(void *)(a1 + 8));
    }
    else {
      (*(void (**)(uint64_t, void))(v6 + 8))(a1, *(void *)(a3 + 16));
    }
    unsigned int v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1)
    {
      *(_OWORD *)a1 = *a2;
      char v12 = 1;
    }

    else
    {
      (*(void (**)(uint64_t, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v12 = 0;
    }

    *(_BYTE *)(a1 + v7) = v12;
  }

  return a1;
}

uint64_t sub_10005D3B4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = 16LL;
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL) > 0x10uLL) {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
  }
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_21;
  }
  uint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)(a1 + v4);
      if (!v6) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4)) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 < 2)
    {
LABEL_21:
      unsigned int v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0LL;
      }
    }
  }

  int v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4)) {
    goto LABEL_21;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (!(_DWORD)v4) {
    return (v9 + 255);
  }
  return ((uint64_t (*)(void))((char *)&loc_10005D478 + 4 * byte_10006C498[(v4 - 1)]))();
}

void sub_10005D4C4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8LL) + 64LL);
  if (v5 <= 0x10) {
    unint64_t v5 = 16LL;
  }
  size_t v6 = v5 + 1;
  char v7 = 8 * (v5 + 1);
  if (a3 < 0xFF)
  {
    unsigned int v8 = 0;
  }

  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << v7) - 254) >> v7) + 1;
    if (HIWORD(v10))
    {
      unsigned int v8 = &dword_100000004;
    }

    else if (v10 >= 0x100)
    {
      unsigned int v8 = 2;
    }

    else
    {
      unsigned int v8 = v10 > 1;
    }
  }

  else
  {
    unsigned int v8 = &_mh_execute_header.magic + 1;
  }

  if (a2 <= 0xFE) {
    __asm { BR              X11 }
  }

  unsigned int v9 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      int v11 = v9 & ~(-1 << v7);
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v11;
        *((_BYTE *)a1 + 2) = BYTE2(v11);
      }

      else if ((_DWORD)v6 == 2)
      {
        *a1 = v11;
      }

      else
      {
        *(_BYTE *)a1 = v11;
      }
    }
  }

  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v9;
  }

  __asm { BR              X10 }

uint64_t sub_10005D668(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 16LL;
  if (*(void *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 64LL) > 0x10uLL) {
    uint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 64LL);
  }
  else {
    uint64_t v3 = 4LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_10005D6B0 + 4 * byte_10006C4A6[v3]))();
}

void sub_10005D6F8(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL) <= 0x10uLL) {
    size_t v4 = 16LL;
  }
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
  }
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }

      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }

      else
      {
        *a1 = v7;
      }
    }

    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }

  else
  {
    a1[v4] = a2;
  }

uint64_t type metadata accessor for StorebagSectionMaybeShared( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10005F094(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StorebagSectionMaybeShared);
}

uint64_t sub_10005D7CC(void *a1)
{
  uint64_t result = a1[7];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[8]);
    swift_bridgeObjectRelease(a1[9]);
    return swift_bridgeObjectRelease(a1[10]);
  }

  return result;
}

void *sub_10005D83C(void *a1, void *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  a1[2] = v6;
  a1[3] = v7;
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v9 = a2[7];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (v9)
  {
    a1[6] = a2[6];
    a1[7] = v9;
    uint64_t v10 = a2[8];
    uint64_t v11 = a2[9];
    a1[8] = v10;
    a1[9] = v11;
    uint64_t v12 = a2[10];
    a1[10] = v12;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
  }

  else
  {
    __int128 v13 = *((_OWORD *)a2 + 4);
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 4) = v13;
    a1[10] = a2[10];
  }

  return a1;
}

void *sub_10005D910(void *a1, void *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a1[5];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a1 + 6;
  uint64_t v10 = a2 + 6;
  uint64_t v11 = a1[7];
  uint64_t v12 = a2[7];
  if (v11)
  {
    if (v12)
    {
      a1[6] = a2[6];
      a1[7] = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease(v11);
      uint64_t v13 = a1[8];
      a1[8] = a2[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease(v13);
      uint64_t v14 = a1[9];
      a1[9] = a2[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease(v14);
      uint64_t v15 = a1[10];
      a1[10] = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease(v15);
    }

    else
    {
      sub_10005DABC(a1 + 6);
      uint64_t v16 = a2[10];
      __int128 v17 = *((_OWORD *)a2 + 4);
      _OWORD *v9 = *v10;
      *((_OWORD *)a1 + 4) = v17;
      a1[10] = v16;
    }
  }

  else if (v12)
  {
    a1[6] = a2[6];
    a1[7] = a2[7];
    a1[8] = a2[8];
    a1[9] = a2[9];
    a1[10] = a2[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v18 = *v10;
    __int128 v19 = *((_OWORD *)a2 + 4);
    a1[10] = a2[10];
    _OWORD *v9 = v18;
    *((_OWORD *)a1 + 4) = v19;
  }

  return a1;
}

void *sub_10005DABC(void *a1)
{
  return a1;
}

uint64_t *sub_10005DAE8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a1[7];
  if (!v10) {
    goto LABEL_5;
  }
  uint64_t v11 = a2[7];
  if (!v11)
  {
    sub_10005DABC(a1 + 6);
LABEL_5:
    __int128 v15 = *((_OWORD *)a2 + 4);
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 4) = v15;
    a1[10] = a2[10];
    return a1;
  }

  a1[6] = a2[6];
  a1[7] = v11;
  swift_bridgeObjectRelease(v10);
  uint64_t v12 = a1[8];
  a1[8] = a2[8];
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = a1[9];
  a1[9] = a2[9];
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a1[10];
  a1[10] = a2[10];
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t sub_10005DBD4(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 88))
    {
      LODWORD(sub_10003499C(v0, v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(sub_10003499C(v0, v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10005DC14(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 88) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for StorebagSectionFilter()
{
}

void *sub_10005DC74(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a1[2];
  uint64_t v7 = a2[2];
  a1[2] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  uint64_t v8 = a1[3];
  uint64_t v9 = a2[3];
  a1[3] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  uint64_t v10 = a1[4];
  uint64_t v11 = a2[4];
  a1[4] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  return a1;
}

void *sub_10005DD08(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[3]);
  uint64_t v5 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  return a1;
}

void type metadata accessor for StorebagSectionCondition()
{
}

void sub_10005DD70(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  __int128 v19 = a5;
  uint64_t v24 = type metadata accessor for StorebagSectionMaybeShared(0LL, a2, a3, a4);
  uint64_t v20 = *(void *)(v24 - 8);
  uint64_t v9 = __chkstk_darwin(v24);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v19 - v12;
  sub_100005F30(a1, a1[3]);
  uint64_t v14 = sub_10005F5C8();
  dispatch thunk of Decoder.singleValueContainer()(v14);
  if (v5)
  {
    swift_errorRelease(v5);
    uint64_t v22 = 0LL;
    memset(v21, 0, sizeof(v21));
    sub_10005EFB4((uint64_t)v21);
    sub_100005E8C((uint64_t)a1, (uint64_t)v23);
    dispatch thunk of Decodable.init(from:)(v23, a2, a3);
    uint64_t v16 = v24;
    swift_storeEnumTagMultiPayload(v11, v24, 0LL);
    __int128 v17 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v17(v13, v11, v16);
  }

  else
  {
    sub_100005ED0(v21, (uint64_t)v23);
    sub_100005F30(v23, v23[3]);
    uint64_t v15 = sub_10005F5C8();
    *(void *)uint64_t v13 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v15);
    *((void *)v13 + 1) = v18;
    uint64_t v16 = v24;
    swift_storeEnumTagMultiPayload(v13, v24, 1LL);
    sub_100005F54(v23);
    __int128 v17 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  }

  v17(v19, v13, v16);
  sub_10003A754();
  sub_100015624();
}

unint64_t sub_10005DF2C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100082018, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xA) {
    return 10LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10005DF78(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005DFA4 + 4 * byte_10006C4AB[a1]))( 1937335659LL,  0xE400000000000000LL);
}

uint64_t sub_10005DFC4()
{
  return 0x6F697469646E6F63LL;
}

uint64_t sub_10005DFE0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005E00C + 4 * byte_10006C4B5[a1]))( 1937335659LL,  0xE400000000000000LL);
}

uint64_t sub_10005E02C()
{
  return 0x6F697469646E6F63LL;
}

void sub_10005E048(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char *a4@<X8>)
{
}

void sub_10005E064(char *a1)
{
}

void sub_10005E070()
{
}

void sub_10005E078(uint64_t a1)
{
}

void sub_10005E080(uint64_t a1)
{
}

unint64_t sub_10005E088@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10005DF2C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10005E0B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10005DF78(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10005E0DC()
{
  return sub_10005DFE0(*v0);
}

uint64_t sub_10005E0E4@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10005DF74(a1);
  *a2 = result;
  return result;
}

void sub_10005E108(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_10005E114(uint64_t a1)
{
  unint64_t v2 = sub_10005EF3C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005E13C(uint64_t a1)
{
  unint64_t v2 = sub_10005EF3C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10005E164(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_10000534C(&qword_10008C870);
  __chkstk_darwin(v5);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100005F30(a1, v6);
  unint64_t v8 = sub_10005EF3C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1000861A0, &unk_1000861A0, v8, v6, v7);
  if (v2)
  {
    sub_10003A754();
  }

  else
  {
    char v74 = a2;
    uint64_t v83 = _swiftEmptyArrayStorage;
    sub_10003A75C();
    LOBYTE(v82[0]) = 0;
    uint64_t v9 = sub_10003A774((unint64_t *)&qword_10008BAC0);
    sub_10005F45C(v9, (uint64_t)v82);
    uint64_t v10 = v75[0];
    if (v75[0]) {
      sub_10005E804(v75[0]);
    }
    LOBYTE(v82[0]) = 1;
    sub_10005F498(v10, (uint64_t)v82);
    sub_10005E804(v75[0]);
    uint64_t v11 = sub_10005F544(1);
    uint64_t v67 = v12;
    uint64_t v70 = v11;
    uint64_t v13 = v83;
    uint64_t v14 = sub_10005F5F0();
    if ((v14 & 1) == 0)
    {
      sub_10005F4D0();
      uint64_t v13 = (void *)v14;
    }

    unint64_t v16 = v13[2];
    unint64_t v15 = v13[3];
    unint64_t v17 = v16 + 1;
    if (v16 >= v15 >> 1)
    {
      sub_10005F5DC(v15);
      unint64_t v66 = v52;
      sub_10005F4D0();
      unint64_t v17 = v66;
      uint64_t v13 = (void *)v14;
    }

    v13[2] = v17;
    uint64_t v18 = &v13[2 * v16];
    v18[4] = v70;
    v18[5] = v67;
    uint64_t v83 = v13;
    v82[0] = _swiftEmptyArrayStorage;
    LOBYTE(v81) = 2;
    sub_10005F45C(v14, (uint64_t)&v81);
    uint64_t v19 = v75[0];
    if (v75[0]) {
      sub_10005E804(v75[0]);
    }
    LOBYTE(v81) = 3;
    sub_10005F498(v19, (uint64_t)&v81);
    sub_10005E804(v75[0]);
    uint64_t v20 = sub_10005F544(3);
    uint64_t v22 = v21;
    uint64_t v23 = v82[0];
    uint64_t v71 = v20;
    if ((sub_10005F5F0() & 1) == 0)
    {
      sub_10005F4D0();
      uint64_t v23 = v53;
    }

    unint64_t v25 = *(void *)(v23 + 16);
    unint64_t v24 = *(void *)(v23 + 24);
    if (v25 >= v24 >> 1)
    {
      sub_10005F5DC(v24);
      sub_10005F4D0();
      uint64_t v23 = v54;
    }

    *(void *)(v23 + ++*(void *)(v0 + 16) = v25 + 1;
    uint64_t v26 = v23 + 16 * v25;
    *(void *)(v26 + 32) = v71;
    *(void *)(v26 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v22;
    v82[0] = v23;
    uint64_t v81 = _swiftEmptyArrayStorage;
    sub_10003A75C();
    LOBYTE(v8sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = 4;
    uint64_t v27 = sub_10003A774(&qword_10008BB40);
    sub_10005F45C(v27, (uint64_t)&v80);
    if (v75[0]) {
      sub_10005E8DC(v75[0]);
    }
    uint64_t v28 = sub_10005F52C(5);
    if ((v29 & 1) == 0)
    {
      uint64_t v30 = v28;
      uint64_t v31 = (uint64_t)v81;
      uint64_t v28 = sub_10005F5F0();
      uint64_t v72 = v30;
      if ((v28 & 1) == 0)
      {
        sub_10005F514();
        uint64_t v31 = v28;
      }

      unint64_t v33 = *(void *)(v31 + 16);
      unint64_t v32 = *(void *)(v31 + 24);
      uint64_t v34 = v33 + 1;
      if (v33 >= v32 >> 1)
      {
        BOOL v55 = sub_10005F5DC(v32);
        uint64_t v69 = v56;
        sub_1000053A0(v55, v56, 1LL, v31);
        uint64_t v34 = v69;
        uint64_t v31 = v28;
      }

      *(void *)(v31 + ++*(void *)(v0 + 16) = v34;
      *(void *)(v31 + 8 * v33 + 32) = v72;
      uint64_t v81 = (void *)v31;
    }

    uint64_t v80 = _swiftEmptyArrayStorage;
    char v79 = 6;
    sub_10005F45C(v28, (uint64_t)&v79);
    if (v75[0]) {
      sub_10005E8DC(v75[0]);
    }
    uint64_t v35 = sub_10005F52C(7);
    pid_t v37 = v80;
    if ((v36 & 1) == 0)
    {
      uint64_t v38 = v35;
      uint64_t v39 = (uint64_t)v80;
      if ((swift_isUniquelyReferenced_nonNull_native(v80) & 1) == 0)
      {
        sub_10005F514();
        uint64_t v39 = v57;
      }

      pid_t v37 = (void *)v39;
      unint64_t v41 = *(void *)(v39 + 16);
      unint64_t v40 = *(void *)(v39 + 24);
      if (v41 >= v40 >> 1)
      {
        BOOL v58 = sub_10005F5DC(v40);
        sub_1000053A0(v58, v41 + 1, 1LL, v39);
        pid_t v37 = v59;
      }

      v37[2] = v41 + 1;
      v37[v41 + 4] = v38;
      uint64_t v80 = v37;
    }

    uint64_t v43 = v81;
    uint64_t v42 = v82[0];
    LOBYTE(v75[0]) = 8;
    unint64_t v73 = v83;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10001A9B8();
    swift_bridgeObjectRetain();
    uint64_t v44 = v37;
    uint64_t v45 = KeyedDecodingContainer.decode(_:forKey:)(v75, v5);
    uint64_t v68 = v46;
    uint64_t v64 = v45;
    char v79 = 9;
    unint64_t v47 = sub_10005EF78();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&unk_100086070, &v79, v5, &unk_100086070, v47);
    sub_10005F488();
    uint64_t v48 = v75[0];
    uint64_t v65 = v75[0];
    uint64_t v50 = v76;
    uint64_t v49 = v77;
    uint64_t v62 = v76;
    uint64_t v63 = v77;
    uint64_t v51 = v78;
    uint64_t v60 = v75[1];
    uint64_t v61 = v78;
    sub_10001A9B8();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000101AC();
    sub_1000101AC();
    sub_10000ED14(v48, v60, v50, v49, v51);
    sub_10000FFD8();
    sub_10001A9B0();
    swift_bridgeObjectRelease(v43);
    sub_100010278();
    sub_100006BBC();
    sub_100005F54(a1);
    sub_100006BBC();
    sub_100010278();
    swift_bridgeObjectRelease(v43);
    sub_10001A9B0();
    sub_10000FFD8();
    sub_10000ED64(v65, v60, v62, v63, v61);
    void *v74 = v73;
    v74[1] = v42;
    v74[2] = v43;
    v74[3] = v44;
    v74[4] = v64;
    v74[5] = v68;
    v74[6] = v65;
    v74[7] = v60;
    v74[8] = v62;
    v74[9] = v63;
    v74[10] = v61;
  }

  sub_100015624();
}

void sub_10005E804(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16LL);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!swift_isUniquelyReferenced_nonNull_native(*v1) || v4 + v2 > *(void *)(v3 + 24) >> 1)
  {
    sub_100004D78();
    uint64_t v3 = v6;
  }

  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_100056A20(a1 + 32, v2, v3 + 16 * v7 + 32);
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease(a1);
    void *v1 = v3;
    return;
  }

  uint64_t v8 = *(void *)(v3 + 16);
  BOOL v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + ++*(void *)(v0 + 16) = v10;
    goto LABEL_11;
  }

void sub_10005E8DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v5 > *(void *)(v3 + 24) >> 1)
  {
    if (v4 <= v5) {
      uint64_t v8 = v4 + v2;
    }
    else {
      uint64_t v8 = v4;
    }
    sub_1000053A0(isUniquelyReferenced_nonNull_native, v8, 1LL, v3);
    uint64_t v3 = v9;
  }

  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

  uint64_t v10 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v10 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  sub_100056EB4(a1 + 32, v2, v3 + 8 * v10 + 32);
  if (!v2)
  {
LABEL_14:
    swift_bridgeObjectRelease(a1);
    uint64_t *v1 = v3;
    return;
  }

  uint64_t v11 = *(void *)(v3 + 16);
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    *(void *)(v3 + ++*(void *)(v0 + 16) = v13;
    goto LABEL_14;
  }

uint64_t sub_10005E9B4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6E6F69746361LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v5 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F69746361LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1937335659 && a2 == 0xE400000000000000LL)
  {
    unint64_t v8 = 0xE400000000000000LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1937335659LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x7365756C6176LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v10 = 0xE600000000000000LL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7365756C6176LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2LL;
  }

  if (a1 == 0x6F697469646E6F63LL && a2 == 0xEA0000000000736ELL)
  {
    swift_bridgeObjectRelease(0xEA0000000000736ELL);
    return 3LL;
  }

  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F697469646E6F63LL, 0xEA0000000000736ELL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_10005EB4C()
{
  return 4LL;
}

uint64_t sub_10005EB54(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005EB84 + 4 * byte_10006C4BF[a1]))( 0x6E6F69746361LL,  0xE600000000000000LL);
}

uint64_t sub_10005EB84()
{
  return 1937335659LL;
}

uint64_t sub_10005EB94()
{
  return 0x7365756C6176LL;
}

uint64_t sub_10005EBA4()
{
  return 0x6F697469646E6F63LL;
}

void sub_10005EBC0(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000534C(&qword_10008C890);
  __chkstk_darwin(v5);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100005F30(a1, v6);
  unint64_t v8 = sub_10005EFF4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for StorebagSectionCondition.CodingKeys,  &type metadata for StorebagSectionCondition.CodingKeys,  v8,  v6,  v7);
  if (v2)
  {
    sub_10003A754();
  }

  else
  {
    LOBYTE(v29) = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)(&v29, v5);
    uint64_t v11 = v10;
    uint64_t v27 = v9;
    sub_10003A75C();
    char v28 = 1;
    sub_10003A774((unint64_t *)&qword_10008BAC0);
    sub_1000101AC();
    uint64_t v12 = sub_10005F4F4();
    sub_10005F5E8(v12, v13, v14, v15, v16);
    char v28 = 2;
    uint64_t v26 = v29;
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_10005F4F4();
    sub_10005F5E8(v17, v18, v19, v20, v21);
    uint64_t v22 = v29;
    uint64_t v23 = sub_10000534C(&qword_10008C8A0);
    char v28 = 3;
    unint64_t v24 = sub_10005F030();
    sub_10001A9B8();
    sub_10005F5E8(v23, (uint64_t)&v28, v5, v23, v24);
    sub_10005F478();
    if (v24)
    {
      sub_100006BBC();
      sub_100006CAC();
      sub_10001A9B0();
      sub_100005F54(a1);
      sub_100006BBC();
      sub_100006CAC();
      sub_10001A9B0();
    }

    else
    {
      uint64_t v25 = v29;
      swift_bridgeObjectRetain();
      sub_10003A754();
      sub_10000FFD8();
      sub_10001A9B0();
      swift_bridgeObjectRelease(v26);
      sub_100006BBC();
      *a2 = v27;
      a2[1] = v11;
      a2[2] = v26;
      a2[3] = v22;
      a2[4] = v25;
    }
  }

  sub_100015624();
}

void sub_10005EE10(void *a1@<X0>, void *a2@<X8>)
{
  if (!v2) {
    memcpy(a2, __src, 0x58uLL);
  }
}

uint64_t sub_10005EE58()
{
  return sub_10005EB54(*v0);
}

uint64_t sub_10005EE60@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10005E9B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005EE84@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_10005EB4C();
  *a1 = result;
  return result;
}

uint64_t sub_10005EEA8(uint64_t a1)
{
  unint64_t v2 = sub_10005EFF4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005EED0(uint64_t a1)
{
  unint64_t v2 = sub_10005EFF4();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10005EEF8@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    double result = *(double *)v6;
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + ++*(void *)(v0 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }

  return result;
}

unint64_t sub_10005EF3C()
{
  unint64_t result = qword_10008C878;
  if (!qword_10008C878)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006C7E8, &unk_1000861A0);
    atomic_store(result, (unint64_t *)&qword_10008C878);
  }

  return result;
}

unint64_t sub_10005EF78()
{
  unint64_t result = qword_10008C880;
  if (!qword_10008C880)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006C56C, &unk_100086070);
    atomic_store(result, (unint64_t *)&qword_10008C880);
  }

  return result;
}

uint64_t sub_10005EFB4(uint64_t a1)
{
  uint64_t v2 = sub_10000534C(&qword_10008C888);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_10005EFF4()
{
  unint64_t result = qword_10008C898;
  if (!qword_10008C898)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006C798, &type metadata for StorebagSectionCondition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008C898);
  }

  return result;
}

unint64_t sub_10005F030()
{
  unint64_t result = qword_10008C8A8;
  if (!qword_10008C8A8)
  {
    uint64_t v1 = sub_10000E670(&qword_10008C8A0);
    sub_10005EF78();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008C8A8);
  }

  return result;
}

uint64_t sub_10005F094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  _OWORD v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t storeEnumTagSinglePayload for StorebagSectionCondition.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(sub_10001531C(v2, v4) = 1;
  }
  else {
    LODWORD(sub_10001531C(v2, v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10005F10C + 4 * byte_10006C4C8[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10005F140 + 4 * byte_10006C4C3[v4]))();
}

uint64_t sub_10005F140(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005F148(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10005F150LL);
  }
  return result;
}

uint64_t sub_10005F15C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10005F164LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10005F168(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005F170(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StorebagSectionCondition.CodingKeys()
{
  return &type metadata for StorebagSectionCondition.CodingKeys;
}

uint64_t sub_10005F18C(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }

uint64_t sub_10005F214(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    LODWORD(sub_10001531C(v2, v4) = 1;
  }
  else {
    LODWORD(sub_10001531C(v2, v4) = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF6) {
    return ((uint64_t (*)(void))((char *)&loc_10005F260 + 4 * byte_10006C4D2[v4]))();
  }
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_10005F294 + 4 * byte_10006C4CD[v4]))();
}

uint64_t sub_10005F294(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005F29C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10005F2A4LL);
  }
  return result;
}

uint64_t sub_10005F2B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10005F2B8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 9;
  return result;
}

uint64_t sub_10005F2BC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005F2C4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for StorebagSectionFilter.CodingKeys()
{
}

unint64_t sub_10005F2E0()
{
  unint64_t result = qword_10008C8B0;
  if (!qword_10008C8B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006C6B8, &unk_1000861A0);
    atomic_store(result, (unint64_t *)&qword_10008C8B0);
  }

  return result;
}

unint64_t sub_10005F320()
{
  unint64_t result = qword_10008C8B8;
  if (!qword_10008C8B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006C770, &type metadata for StorebagSectionCondition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008C8B8);
  }

  return result;
}

unint64_t sub_10005F360()
{
  unint64_t result = qword_10008C8C0;
  if (!qword_10008C8C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006C6E0, &type metadata for StorebagSectionCondition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008C8C0);
  }

  return result;
}

unint64_t sub_10005F3A0()
{
  unint64_t result = qword_10008C8C8;
  if (!qword_10008C8C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006C708, &type metadata for StorebagSectionCondition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10008C8C8);
  }

  return result;
}

unint64_t sub_10005F3E0()
{
  unint64_t result = qword_10008C8D0;
  if (!qword_10008C8D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006C5F0, &unk_1000861A0);
    atomic_store(result, (unint64_t *)&qword_10008C8D0);
  }

  return result;
}

unint64_t sub_10005F420()
{
  unint64_t result = qword_10008C8D8;
  if (!qword_10008C8D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006C618, &unk_1000861A0);
    atomic_store(result, (unint64_t *)&qword_10008C8D8);
  }

  return result;
}

uint64_t sub_10005F45C(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v3, a2, v2, v3, v4);
}

uint64_t sub_10005F478()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_10005F488()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10005F498(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(v3, a2, v2, v3, v4);
}

uint64_t sub_10005F4B4()
{
  return 0x69726F6765746163LL;
}

void sub_10005F4D0()
{
}

uint64_t sub_10005F4DC()
{
  return 0x79726F6765746163LL;
}

uint64_t sub_10005F4F4()
{
  return v0;
}

void sub_10005F514()
{
}

uint64_t sub_10005F52C@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v2 - 16sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v2 - 160, v1);
}

uint64_t sub_10005F544@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v2 - 16sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v2 - 160, v1);
}

uint64_t sub_10005F55C()
{
  return 0x7365707974LL;
}

uint64_t sub_10005F570()
{
  return 0x65756C6176LL;
}

uint64_t sub_10005F584()
{
  return 0x6E6F69746361LL;
}

uint64_t sub_10005F598()
{
  return 0x7365756C6176LL;
}

uint64_t sub_10005F5AC()
{
  return 7955819LL;
}

uint64_t sub_10005F5BC()
{
  return 1701869940LL;
}

uint64_t sub_10005F5C8()
{
  return v0;
}

BOOL sub_10005F5DC@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_10005F5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_10005F5F0()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

void sub_10005F5F8()
{
  uint64_t v5 = sub_10001030C();
  uint64_t v17 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100063E88();
  sub_100063F10();
  sub_10001AC38();
  os_log_type_t v6 = sub_100064460();
  if (sub_1000640A8(v6))
  {
    BOOL v7 = (uint8_t *)sub_1000100B0(12LL);
    uint64_t v18 = sub_1000100B0(32LL);
    *(_DWORD *)BOOL v7 = 136446210;
    sub_1000069B0( (unint64_t *)&unk_10008AAC0,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError,  (uint64_t)&protocol conformance descriptor for CocoaError);
    uint64_t v9 = sub_10006406C(v8);
    uint64_t v11 = sub_100064050(v9, v10);
    sub_100063E6C(v11);
    sub_10000FFD8();
    sub_100063E5C();
    sub_10001AA70((void *)&_mh_execute_header, v1, v2, "unable to write storebag cache (OOS): %{public}s", v7);
    sub_10001AA68(v18);
    sub_100010010(v18);
    sub_100010010((uint64_t)v7);
  }

  else
  {
    sub_100063E5C();
  }

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v0, v5);
  sub_100063FB0();
  _StringGuts.grow(_:)(40LL);
  sub_100064544();
  sub_1000069B0( (unint64_t *)&unk_10008AAC0,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError,  (uint64_t)&protocol conformance descriptor for CocoaError);
  v19._uint64_t countAndFlagsBits = sub_10006405C(v12);
  sub_1000640F0(v19);
  sub_100006AF0();
  sub_100063EA4( (uint64_t)"Fatal error",  v13,  v14,  0xD000000000000026LL,  0x800000010006F6A0LL,  (uint64_t)"rtcreportingd/StorebagCache.swift",  v15,  v16,  16LL,  0);
  __break(1u);
}

void sub_10005F810()
{
  uint64_t v5 = sub_10001030C();
  uint64_t v17 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100063E88();
  sub_100063F10();
  sub_10001AC38();
  os_log_type_t v6 = sub_100064460();
  if (sub_1000640A8(v6))
  {
    BOOL v7 = (uint8_t *)sub_1000100B0(12LL);
    uint64_t v18 = sub_1000100B0(32LL);
    *(_DWORD *)BOOL v7 = 136446210;
    sub_1000069B0( (unint64_t *)&unk_10008AAC0,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError,  (uint64_t)&protocol conformance descriptor for CocoaError);
    uint64_t v9 = sub_10006406C(v8);
    uint64_t v11 = sub_100064050(v9, v10);
    sub_100063E6C(v11);
    sub_10000FFD8();
    sub_100063E5C();
    sub_10001AA70((void *)&_mh_execute_header, v1, v2, "unable to access storebag cache (PERM): %{public}s", v7);
    sub_10001AA68(v18);
    sub_100010010(v18);
    sub_100010010((uint64_t)v7);
  }

  else
  {
    sub_100063E5C();
  }

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v0, v5);
  sub_100063FB0();
  _StringGuts.grow(_:)(42LL);
  sub_100064544();
  sub_1000069B0( (unint64_t *)&unk_10008AAC0,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError,  (uint64_t)&protocol conformance descriptor for CocoaError);
  v19._uint64_t countAndFlagsBits = sub_10006405C(v12);
  sub_1000640F0(v19);
  sub_100006AF0();
  sub_100063EA4( (uint64_t)"Fatal error",  v13,  v14,  0xD000000000000028LL,  0x800000010006F670LL,  (uint64_t)"rtcreportingd/StorebagCache.swift",  v15,  v16,  21LL,  0);
  __break(1u);
}

void sub_10005FA28()
{
  uint64_t v5 = sub_10001030C();
  uint64_t v18 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100063E88();
  sub_100063F10();
  sub_10001AC38();
  os_log_type_t v6 = sub_100064460();
  if (sub_1000640A8(v6))
  {
    BOOL v7 = (uint8_t *)sub_1000100B0(12LL);
    uint64_t v19 = sub_1000100B0(32LL);
    *(_DWORD *)BOOL v7 = 136446210;
    sub_1000069B0( (unint64_t *)&unk_10008AAC0,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError,  (uint64_t)&protocol conformance descriptor for CocoaError);
    uint64_t v9 = sub_10006406C(v8);
    uint64_t v11 = sub_100064050(v9, v10);
    sub_100063E6C(v11);
    sub_10000FFD8();
    sub_100063E5C();
    sub_10001AA70( (void *)&_mh_execute_header,  v1,  v2,  "unable to access storebag cache (WRITE-UNKNOWN): %{public}s",  v7);
    sub_10001AA68(v19);
    sub_100010010(v19);
    sub_100010010((uint64_t)v7);
  }

  else
  {
    sub_100063E5C();
  }

  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v0, v5);
  sub_100063FB0();
  _StringGuts.grow(_:)(51LL);
  v12._object = (void *)0x800000010006F6D0LL;
  v12._uint64_t countAndFlagsBits = 0xD000000000000031LL;
  String.append(_:)(v12);
  sub_1000069B0( (unint64_t *)&unk_10008AAC0,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError,  (uint64_t)&protocol conformance descriptor for CocoaError);
  v20._uint64_t countAndFlagsBits = sub_10006405C(v13);
  sub_1000640F0(v20);
  sub_100006AF0();
  sub_100063EA4( (uint64_t)"Fatal error",  v14,  v15,  0LL,  0xE000000000000000LL,  (uint64_t)"rtcreportingd/StorebagCache.swift",  v16,  v17,  26LL,  0);
  __break(1u);
}

void sub_10005FC44()
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_10001030C();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10003E428();
  Logger.init()(v5);
  sub_100026A40();
  uint64_t v6 = sub_100026A40();
  BOOL v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.fault.getter();
  if (sub_100064468(v7))
  {
    uint64_t v17 = v3;
    uint64_t v9 = (uint8_t *)sub_1000100B0(12LL);
    uint64_t v10 = sub_1000100B0(32LL);
    uint64_t v23 = v10;
    *(_DWORD *)uint64_t v9 = 136446210;
    swift_getErrorValue(v2, &v20, v19);
    uint64_t v11 = Error.localizedDescription.getter(v19[1], v19[2]);
    uint64_t v18 = sub_100064050(v11, v12);
    sub_10001AD28((uint64_t)&v18, (uint64_t)v19, (uint64_t)(v9 + 4));
    sub_10000FFD8();
    sub_1000269C8();
    sub_1000269C8();
    sub_10001AA70((void *)&_mh_execute_header, v7, v8, "unable to access storebag cache (UNKNOWN): %{public}s", v9);
    sub_10001AA68(v10);
    sub_100010010(v10);
    sub_100010010((uint64_t)v9);

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v17);
  }

  else
  {
    sub_1000269C8();
    sub_1000269C8();

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v3);
  }

  uint64_t v23 = 0LL;
  uint64_t v24 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(45LL);
  sub_100064544();
  uint64_t v23 = 0xD00000000000002BLL;
  uint64_t v24 = 0x800000010006F710LL;
  swift_getErrorValue(v2, &v22, v21);
  v25._uint64_t countAndFlagsBits = Error.localizedDescription.getter(v21[1], v21[2]);
  sub_1000640F0(v25);
  sub_100006AF0();
  sub_100063EA4( (uint64_t)"Fatal error",  v13,  v14,  v23,  v24,  (uint64_t)"rtcreportingd/StorebagCache.swift",  v15,  v16,  31LL,  0);
  __break(1u);
}

void sub_10005FE34()
{
  uint64_t v3 = v0;
  uint64_t v102 = v4;
  uint64_t v95 = type metadata accessor for CocoaError.Code(0LL);
  uint64_t v91 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  sub_100010040();
  uint64_t v94 = v5;
  sub_1000101F8();
  __chkstk_darwin(v6);
  uint64_t v93 = (char *)&v88 - v7;
  uint64_t v98 = type metadata accessor for CocoaError(0LL);
  uint64_t v92 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  sub_100010040();
  uint64_t v89 = v8;
  sub_1000101F8();
  __chkstk_darwin(v9);
  uint64_t v90 = (uint64_t)&v88 - v10;
  sub_1000101F8();
  __chkstk_darwin(v11);
  uint64_t v96 = (uint64_t)&v88 - v12;
  sub_1000101F8();
  __chkstk_darwin(v13);
  uint64_t v97 = (char *)&v88 - v14;
  uint64_t v15 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v100 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_100006B64();
  uint64_t v99 = v17 - v16;
  sub_10000534C(&qword_10008AB30);
  sub_100006B54();
  __chkstk_darwin(v18);
  sub_100064328();
  uint64_t v19 = sub_100006C8C();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v88 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v24 = sub_1000644E0();
  type metadata accessor for StorebagCache.Location(v24);
  sub_100006B54();
  uint64_t v26 = __chkstk_darwin(v25);
  char v28 = (char *)&v88 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v88 - v29;
  uint64_t v101 = v3;
  uint64_t v31 = sub_1000643E8();
  sub_100063D88(v31, v32, v33);
  sub_100064530((uint64_t)v30, 1LL, v19);
  if (v34)
  {
    uint64_t v35 = NSHomeDirectory();
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    uint64_t v38 = v37;

    URL.init(fileURLWithPath:isDirectory:)(v36, v38, 1LL);
    sub_100006AF0();
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000031LL, 0x800000010006F600LL, 1LL);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    uint64_t v30 = v2;
  }

  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v102, v30, v19);
  uint64_t v39 = sub_10000534C(&qword_10008AB38);
  uint64_t inited = swift_initStackObject(v39, &v106);
  *(_OWORD *)(inited + ++*(void *)(v0 + 16) = xmmword_100069580;
  sub_1000644F4(inited, NSURLIsDirectoryKey);
  sub_10006440C();
  uint64_t v42 = v41;
  URL.resourceValues(forKeys:)();
  swift_bridgeObjectRelease(v42);
  sub_100064524(v1, 0LL);
  uint64_t v43 = sub_100064530(v1, 1LL, v15);
  if (v34)
  {
    sub_100035228(v1, &qword_10008AB30);
  }

  else
  {
    char v53 = URLResourceValues.isDirectory.getter(v43);
    sub_1000641D8(v1, *(uint64_t (**)(uint64_t, uint64_t))(v100 + 8));
    if ((v53 & 1) != 0) {
      goto LABEL_10;
    }
  }

  id v44 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL._bridgeToObjectiveC()(v45);
  unint64_t v47 = v46;
  v105[0] = 0LL;
  unsigned int v48 = [v44 createDirectoryAtURL:v46 withIntermediateDirectories:1 attributes:0 error:v105];

  id v49 = v105[0];
  if (!v48)
  {
    id v54 = v105[0];
    BOOL v55 = (void *)sub_1000641E0();

    swift_willThrow(v56, v57, v58, v59, v60, v61, v62, v63);
    v105[0] = v55;
    sub_100026A40();
    uint64_t v64 = sub_10000534C(&qword_10008A8A8);
    if (swift_dynamicCast(v97, v105, v64, v98, 0LL))
    {
      uint64_t v65 = *(void (**)(uint64_t, char *, uint64_t))(v92 + 16);
      v65(v96, v97, v98);
      sub_1000069B0( &qword_10008AAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError,  (uint64_t)&protocol conformance descriptor for CocoaError);
      uint64_t v67 = v66;
      uint64_t v68 = sub_1000643A0();
      uint64_t v70 = _BridgedStoredNSError.code.getter(v68, v69);
      uint64_t v71 = v94;
      static CocoaError.fileWriteNoPermission.getter(v70);
      sub_1000069B0( &qword_10008AAB8,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError.Code,  (uint64_t)&protocol conformance descriptor for CocoaError.Code);
      sub_1000640B8();
      sub_1000640B8();
      uint64_t v73 = v103;
      uint64_t v72 = v104;
      char v74 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
      sub_100064294(v71);
      sub_100064294(v42);
      if (v72 == v73) {
        sub_10005F810();
      }
      unint64_t v75 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
      sub_1000643B4(v96);
      v65(v90, v97, v72);
      uint64_t v76 = sub_1000643A0();
      uint64_t v78 = _BridgedStoredNSError.code.getter(v76, v77);
      uint64_t v79 = v94;
      static CocoaError.fileWriteOutOfSpace.getter(v78);
      sub_1000640B8();
      sub_1000640B8();
      uint64_t v81 = v103;
      uint64_t v80 = v104;
      sub_100064294(v79);
      sub_100064294(v42);
      if (v80 == v81) {
        sub_10005F5F8();
      }
      sub_1000643B4(v90);
      (*(void (**)(uint64_t, char *, uint64_t))(v92 + 32))(v89, v97, v80);
      uint64_t v82 = v93;
      uint64_t v83 = _BridgedStoredNSError.code.getter(v80, v67);
      uint64_t v84 = v94;
      static CocoaError.fileWriteUnknown.getter(v83);
      uint64_t v85 = v95;
      sub_100064430();
      sub_100064430();
      uint64_t v87 = v103;
      uint64_t v86 = v104;
      v74(v84, v85);
      v74((uint64_t)v82, v85);
      if (v86 == v87) {
        sub_10005FA28();
      }
      v75(v89, v98);
    }

    swift_errorRelease(v105[0]);
    sub_10005FC44();
  }

  sub_100063D88(v101, (uint64_t)v28, type metadata accessor for StorebagCache.Location);
  int v50 = _s10RTCUtility9XPCObjectOwet_0((uint64_t)v28, 1LL, v19);
  id v51 = v49;
  sub_100034760((uint64_t)v28, type metadata accessor for StorebagCache.Location);
  if (v50 == 1)
  {
    uint64_t v52 = v99;
    URLResourceValues.init()();
    URLResourceValues.isExcludedFromBackup.setter(1LL);
    URL.setResourceValues(_:)(v52);
    sub_1000641C4();
  }

uint64_t sub_1000604F0()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000D940(v0, qword_100093420);
  sub_10000D34C(v0, (uint64_t)qword_100093420);
  return Logger.init(subsystem:category:)( 0xD000000000000017LL,  0x800000010006D6D0LL,  0x67616265726F7473LL,  0xED00006568636163LL);
}

uint64_t sub_100060570(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_100006C8C();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v2[4] = v5;
  swift_defaultActor_initialize(v1);
  uint64_t v6 = OBJC_IVAR____TtC13rtcreportingd13StorebagCache_cache;
  uint64_t v7 = type metadata accessor for CachedStorebag(0LL);
  *(void *)(v1 + v6) = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v7,  &protocol witness table for String);
  *(void *)(v1 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask) = 0LL;
  *(void *)(v1 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTransaction) = 0LL;
  sub_10005FE34();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))( v1 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_location,  v5,  v3);
  return sub_10001A974();
}

uint64_t sub_100060658()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 24));
}

void sub_10006069C()
{
  unint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v35 = v8;
  sub_10005935C();
  sub_1000644FC();
  __chkstk_darwin(v9);
  sub_100064328();
  sub_10000534C((uint64_t *)&unk_10008CAD0);
  sub_100006B54();
  __chkstk_darwin(v10);
  sub_100010040();
  uint64_t v33 = v11;
  sub_1000101F8();
  __chkstk_darwin(v12);
  uint64_t v13 = sub_1000644E0();
  uint64_t v14 = type metadata accessor for CachedStorebag(v13);
  sub_100006B54();
  __chkstk_darwin(v15);
  sub_100006B64();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = (uint64_t *)(v0 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_cache);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_cache, &v38, 0LL, 0LL);
  uint64_t v20 = *v19;
  sub_10001015C();
  sub_1000083B0();
  uint64_t v34 = v7;
  sub_10004F590(v7, v5, v20, v3);
  swift_bridgeObjectRelease(v5);
  sub_10000FFD8();
  sub_100064530(v3, 1LL, v14);
  if (v21)
  {
    sub_100035228(v3, (uint64_t *)&unk_10008CAD0);
    uint64_t v22 = 1LL;
    uint64_t v23 = v35;
  }

  else
  {
    uint64_t v24 = sub_100063D30(v3, v18);
    uint64_t v25 = v18 + *(int *)(v14 + 20);
    static Date.now.getter(v24);
    char v26 = static Date.< infix(_:_:)(v25, v2);
    sub_100063F98(v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    if ((v26 & 1) != 0)
    {
      if (qword_10008A0C0 != -1) {
        swift_once(&qword_10008A0C0, sub_1000604F0);
      }
      uint64_t v27 = sub_10001030C();
      char v28 = (os_log_s *)sub_10000D34C(v27, (uint64_t)qword_100093420);
      uint64_t v29 = swift_bridgeObjectRetain_n(v5, 2LL);
      Logger.logObject.getter(v29);
      os_log_type_t v30 = sub_10001AB70();
      if (os_log_type_enabled(v28, v30))
      {
        uint64_t v31 = (uint8_t *)sub_1000100B0(12LL);
        uint64_t v32 = sub_1000100B0(32LL);
        v37[0] = v32;
        *(_DWORD *)uint64_t v31 = 136446210;
        sub_10001015C();
        uint64_t v36 = sub_100019964(v34, v5, v37);
        sub_10001AD28((uint64_t)&v36, (uint64_t)v37, (uint64_t)(v31 + 4));
        sub_10001AA78(v5);
        sub_10001AA70( (void *)&_mh_execute_header,  v28,  v30,  "removing expired storebag %{public}s from memory cache",  v31);
        sub_10001AA68(v32);
        sub_100010010(v32);
        sub_100010010((uint64_t)v31);
      }

      else
      {

        sub_100010060(v5);
      }

      uint64_t v23 = v35;
      sub_100064028((uint64_t)v19, (uint64_t)v37);
      sub_100033AFC(v33);
      sub_100035228(v33, (uint64_t *)&unk_10008CAD0);
      swift_endAccess(v37);
      sub_100034760(v18, type metadata accessor for CachedStorebag);
      uint64_t v22 = 1LL;
    }

    else
    {
      uint64_t v23 = v35;
      sub_100063D30(v18, v35);
      uint64_t v22 = 0LL;
    }
  }

  _s10RTCUtility9XPCObjectOwst_0(v23, v22, 1LL, v14);
  sub_100008348();
}

uint64_t sub_1000609A8(uint64_t a1, uint64_t a2)
{
  v2._uint64_t countAndFlagsBits = 0x7473696C702ELL;
  v2._object = (void *)0xE600000000000000LL;
  String.append(_:)(v2);
  URL.appendingPathComponent(_:)(a1, a2);
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_100060A1C()
{
  uint64_t v1 = sub_100006C8C();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10003E428();
  sub_10000534C((uint64_t *)&unk_10008CAD0);
  sub_100006B54();
  __chkstk_darwin(v3);
  sub_100006B64();
  uint64_t v6 = v5 - v4;
  sub_10006069C();
  uint64_t v7 = type metadata accessor for CachedStorebag(0LL);
  char v8 = 1;
  int v9 = _s10RTCUtility9XPCObjectOwet_0(v6, 1LL, v7);
  sub_100035228(v6, (uint64_t *)&unk_10008CAD0);
  if (v9 == 1)
  {
    sub_100064470();
    Swift::Bool v10 = URL.checkResourceIsReachable()();
    if (v11)
    {
      sub_100026B40();
      char v8 = 0;
    }

    else
    {
      char v8 = v10;
    }

    sub_100063F98(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }

  return v8 & 1;
}

uint64_t sub_100060B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[35] = a3;
  v4[36] = v3;
  v4[33] = a1;
  v4[34] = a2;
  uint64_t v5 = sub_10000534C(&qword_10008AB40);
  v4[37] = sub_100008360(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for URLResourceValues(0LL);
  v4[38] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[39] = v7;
  v4[40] = sub_100008360(v7);
  uint64_t v8 = sub_10005935C();
  v4[41] = v8;
  v4[42] = *(void *)(v8 - 8);
  v4[43] = sub_100026B60();
  v4[44] = sub_100026B60();
  v4[45] = sub_100026B60();
  uint64_t v9 = sub_100006C8C();
  v4[46] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[47] = v10;
  v4[48] = sub_100008360(v10);
  sub_10000534C((uint64_t *)&unk_10008CAD0);
  v4[49] = sub_100026B60();
  v4[50] = sub_100026B60();
  v4[51] = type metadata accessor for CachedStorebag(0LL);
  v4[52] = sub_100026B60();
  v4[53] = sub_100026B60();
  return sub_10002C73C((uint64_t)sub_100060C68, v3, 0LL);
}

uint64_t sub_100060C68()
{
  uint64_t v6 = *(void *)(v0 + 400);
  uint64_t v5 = *(void *)(v0 + 408);
  sub_10006069C();
  sub_100064530(v6, 1LL, v5);
  if (!v19)
  {
    uint64_t v9 = *(void *)(v0 + 424);
    sub_100063D30(*(void *)(v0 + 400), v9);
    int v125 = *(_DWORD *)(v9 + 8);
    uint64_t v10 = *(void *)(v9 + 24);
    uint64_t v121 = *(void *)(v9 + 16);
    uint64_t v123 = *(void *)v9;
    uint64_t v11 = *(void *)(v9 + 32);
    swift_bridgeObjectRetain();
    uint64_t v120 = v10;
    sub_1000083B8();
    uint64_t v119 = v11;
    sub_1000100D8();
    sub_100034760(v9, type metadata accessor for CachedStorebag);
LABEL_5:
    uint64_t v115 = *(void *)(v0 + 296);
    uint64_t v12 = *(void *)(v0 + 264);
    swift_task_dealloc(*(void *)(v0 + 424));
    sub_10001AB88();
    sub_10001AB08();
    sub_10001ABA8();
    sub_10001AB60();
    sub_10001AB90();
    sub_10001AB98();
    sub_10001AB28();
    sub_10001AB38();
    swift_task_dealloc(v115);
    *(void *)uint64_t v12 = v123;
    *(_DWORD *)(v12 + 8) = v125;
    *(void *)(v12 + ++*(void *)(v0 + 16) = v121;
    *(void *)(v12 + 24) = v120;
    *(void *)(v12 + 32) = v119;
    uint64_t v13 = (uint64_t (*)(void))sub_100064388();
    return sub_100063F44(v13);
  }

  sub_100035228(*(void *)(v0 + 400), (uint64_t *)&unk_10008CAD0);
  sub_100064470();
  Swift::Bool v7 = URL.checkResourceIsReachable()();
  if (v8)
  {
    sub_100026B40();
LABEL_9:
    *(void *)(v0 + 16sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = &unk_100082A48;
    *(void *)(v0 + 168) = &off_100082D10;
    uint64_t v17 = (void *)swift_task_alloc(dword_10008C924);
    *(void *)(v0 + 432) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_1000614A8;
    return sub_100061F08(*(void *)(v0 + 272), *(void *)(v0 + 280), v0 + 136, 0);
  }

  if (!v7) {
    goto LABEL_9;
  }
  uint64_t v15 = sub_10000534C(&qword_10008AB38);
  uint64_t inited = swift_initStackObject(v15, v0 + 16);
  *(_OWORD *)(inited + ++*(void *)(v0 + 16) = xmmword_100069580;
  sub_1000644F4(inited, NSURLContentModificationDateKey);
  sub_10006440C();
  URL.resourceValues(forKeys:)();
  uint64_t v18 = sub_100064234();
  URLResourceValues.contentModificationDate.getter(v18);
  sub_100064340();
  uint64_t result = sub_100064530(v2, 1LL, v3);
  if (v19)
  {
    __break(1u);
  }

  else
  {
    sub_100064178();
    sub_1000643C0();
    unsigned __int8 v20 = sub_1000642DC();
    sub_10006420C(v20);
    uint64_t v21 = sub_100064008();
    static Date.now.getter(v21);
    char v22 = sub_1000643F4();
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
    *(void *)(v0 + 448) = v23;
    sub_100064190();
    uint64_t v116 = v23;
    if ((v22 & 1) == 0)
    {
      int v125 = v4;
      uint64_t v113 = v3;
      uint64_t v32 = *(void *)(v0 + 408);
      uint64_t v33 = *(void *)(v0 + 416);
      uint64_t v34 = *(void *)(v0 + 392);
      uint64_t v36 = *(void *)(v0 + 280);
      uint64_t v35 = *(void *)(v0 + 288);
      uint64_t v124 = *(void *)(v0 + 272);
      uint64_t v37 = *(void *)(v0 + 96);
      uint64_t v38 = *(void *)(v0 + 120);
      uint64_t v122 = *(void *)(v0 + 112);
      uint64_t v39 = *(void *)(v0 + 128);
      (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 336) + 16LL))( v33 + *(int *)(v32 + 20),  *(void *)(v0 + 352),  *(void *)(v0 + 328));
      uint64_t v40 = *(void *)(v2 + 32);
      __int128 v41 = *(_OWORD *)(v2 + 16);
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v2;
      *(_OWORD *)(v33 + ++*(void *)(v0 + 16) = v41;
      *(void *)(v33 + 32) = v40;
      sub_100063D88(v33, v34, type metadata accessor for CachedStorebag);
      uint64_t v42 = v39;
      _s10RTCUtility9XPCObjectOwst_0(v34, 0LL, 1LL, v32);
      sub_100064028(v35 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_cache, v0 + 176);
      swift_bridgeObjectRetain();
      sub_1000100D8();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000307D4( v34,  v124,  v36,  v43,  v44,  v45,  v46,  v47,  v92,  v95,  v97,  v100,  v104,  v108,  v110,  v113,  (uint64_t)v116,  v118,  v0 + 176,  v122);
      swift_endAccess(v0 + 176);
      if (qword_10008A0C0 != -1) {
        swift_once(&qword_10008A0C0, sub_1000604F0);
      }
      uint64_t v120 = v38;
      uint64_t v123 = v37;
      uint64_t v48 = sub_10001030C();
      sub_100063EB8(v48, (uint64_t)qword_100093420);
      id v49 = (os_log_s *)sub_10001ACC8();
      os_log_type_t v50 = static os_log_type_t.debug.getter();
      BOOL v51 = sub_100064468(v49);
      uint64_t v53 = *(void *)(v0 + 376);
      uint64_t v52 = *(void *)(v0 + 384);
      uint64_t v55 = *(void *)(v0 + 360);
      uint64_t v54 = *(void *)(v0 + 368);
      uint64_t v109 = *(void *)(v0 + 352);
      uint64_t v111 = *(void *)(v0 + 416);
      uint64_t v56 = *(void *)(v0 + 328);
      uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v0 + 280);
      uint64_t v119 = v42;
      if (v51)
      {
        uint64_t v94 = *(void *)(v0 + 272);
        uint64_t v106 = *(void *)(v0 + 368);
        uint64_t v58 = v49;
        uint64_t v59 = (uint8_t *)sub_1000100B0(12LL);
        uint64_t v102 = v52;
        uint64_t v60 = sub_1000100B0(32LL);
        uint64_t v126 = v60;
        *(_DWORD *)uint64_t v59 = 136446210;
        sub_1000083B0();
        *(void *)(v0 + 24sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = sub_100019964(v94, (unint64_t)v57, &v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v114, v59 + 4);
        sub_10001AA78((uint64_t)v57);
        sub_10001AA70((void *)&_mh_execute_header, v58, v50, "storing storebag %{public}s in cache", v59);
        sub_10001AA68(v60);
        sub_100010010(v60);
        sub_100010010((uint64_t)v59);

        sub_100034760(v111, type metadata accessor for CachedStorebag);
        sub_1000642EC(v61, v62, v63, v64, v65, v66, v67, v68, v94, v0 + 240, v55, v102, v106, v109, v111, v114, v117);
        v57(v99, v56);
        (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v103, v107);
      }

      else
      {
        sub_100010060((uint64_t)v57);

        sub_100034760(v111, type metadata accessor for CachedStorebag);
        sub_1000642EC(v76, v77, v78, v79, v80, v81, v82, v83, v93, v96, v98, v101, v105, v109, v111, v114, v117);
        v57(v55, v56);
        (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
      }

      goto LABEL_5;
    }

    sub_100064160();
    sub_100064284();
    sub_100064264();
    if (qword_10008A0C0 != -1) {
      swift_once(&qword_10008A0C0, sub_1000604F0);
    }
    uint64_t v24 = *(os_log_s **)(v0 + 280);
    uint64_t v25 = sub_10001030C();
    sub_100063EB8(v25, (uint64_t)qword_100093420);
    sub_10001ACC8();
    os_log_type_t v26 = sub_10001AB70();
    BOOL v27 = sub_10001AC28(v26);
    uint64_t v28 = *(void *)(v0 + 280);
    if (v27)
    {
      uint64_t v23 = (void (*)(uint64_t, uint64_t))(v0 + 256);
      uint64_t v29 = (uint8_t *)sub_1000100B0(12LL);
      uint64_t v112 = v3;
      uint64_t v30 = sub_1000100B0(32LL);
      uint64_t v126 = v30;
      sub_1000641B0(4.8751e-34);
      *(void *)(v0 + 256) = sub_100064254();
      sub_10001AD28(v0 + 256, v0 + 264, 12LL);
      sub_10001AA78(v28);
      sub_10001AA70((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "removing expired storebag %{public}s", v29);
      sub_10001AA68(v30);
      uint64_t v31 = v30;
      uint64_t v3 = v112;
      sub_100010010(v31);
      sub_100010010((uint64_t)v29);
    }

    else
    {

      sub_100010060(v28);
    }

    id v69 = [(id)objc_opt_self(NSFileManager) defaultManager];
    URL._bridgeToObjectiveC()(v70);
    uint64_t v72 = (void *)v71;
    *(void *)(v0 + 248) = 0LL;
    id v73 = sub_100064274(v71, "removeItemAtURL:error:");

    if (!(_DWORD)v73)
    {
      sub_1000641EC();
      sub_1000641E0();

      sub_10006447C(v84, v85, v86, v87, v88, v89, v90, v91, v92, v95, v97, v100, v104, v108);
      v116(v3, v4);
      sub_10006443C();
      (*((void (**)(uint64_t, void))v69 + 1))(v28, v23);
      sub_100063FE8();
      sub_10001AB88();
      sub_10001AB28();
      sub_10001AB38();
      sub_10001AAF0();
      sub_10001ABA8();
      sub_10001AB60();
      sub_10001AB90();
      sub_10001AB98();
      sub_10001AB08();
      uint64_t v13 = (uint64_t (*)(void))sub_100064388();
      return sub_100063F44(v13);
    }

    id v74 = *(id *)(v0 + 248);
    unint64_t v75 = (void *)sub_100026B60();
    *(void *)(v0 + 456) = v75;
    sub_1000644A0(v75);
    return sub_100063F28();
  }

  return result;
}

uint64_t sub_1000614A8()
{
  uint64_t v2 = v0 + 17;
  sub_100026B94(v3);
  v0[55] = v1;
  swift_task_dealloc(v4);
  uint64_t v5 = v0[36];
  sub_100005F54(v2);
  if (v1) {
    uint64_t v6 = sub_100061DD8;
  }
  else {
    uint64_t v6 = sub_100061554;
  }
  return sub_10002C73C((uint64_t)v6, v5, 0LL);
}

uint64_t sub_100061554()
{
  uint64_t v4 = *(void *)(v0 + 440);
  uint64_t v5 = *(void **)(v0 + 320);
  uint64_t v6 = sub_10000534C(&qword_10008AB38);
  uint64_t inited = swift_initStackObject(v6, v0 + 16);
  *(_OWORD *)(inited + ++*(void *)(v0 + 16) = xmmword_100069580;
  sub_1000644F4(inited, NSURLContentModificationDateKey);
  sub_10006440C();
  uint64_t v9 = v8;
  URL.resourceValues(forKeys:)();
  if (v4)
  {
    sub_1000640FC();
    swift_bridgeObjectRelease(v9);
LABEL_5:
    sub_100063FE8();
    sub_10001AB88();
    sub_10001AB28();
    sub_10001AB38();
    sub_10001AAF0();
    sub_10001ABA8();
    sub_10001AB60();
    sub_10001AB90();
    sub_10001AB98();
    sub_10001AB08();
    uint64_t v14 = (uint64_t (*)(void))sub_100064388();
    return sub_100063F44(v14);
  }

  uint64_t v10 = sub_100064234();
  URLResourceValues.contentModificationDate.getter(v10);
  sub_100064340();
  uint64_t result = sub_100064530(v1, 1LL, v2);
  if (v12)
  {
    __break(1u);
  }

  else
  {
    sub_100064178();
    sub_1000643C0();
    unsigned __int8 v13 = sub_1000642DC();
    sub_10006420C(v13);
    uint64_t v15 = sub_100064008();
    static Date.now.getter(v15);
    char v16 = sub_1000643F4();
    uint64_t v17 = (void *)v5[1];
    *(void *)(v0 + 448) = v17;
    ((void (*)(void, uint64_t))v17)(0LL, v9);
    if ((v16 & 1) == 0)
    {
      int v119 = v3;
      uint64_t v121 = v2;
      uint64_t v107 = (uint64_t)v17;
      uint64_t v27 = *(void *)(v0 + 408);
      uint64_t v26 = *(void *)(v0 + 416);
      uint64_t v28 = *(void *)(v0 + 392);
      uint64_t v29 = *(void *)(v0 + 280);
      uint64_t v30 = *(void *)(v0 + 288);
      uint64_t v112 = *(void *)(v0 + 272);
      uint64_t v31 = *(void *)(v0 + 96);
      uint64_t v32 = *(void *)(v0 + 120);
      uint64_t v117 = *(void *)(v0 + 112);
      uint64_t v33 = *(void *)(v0 + 128);
      (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 336) + 16LL))( v26 + *(int *)(v27 + 20),  *(void *)(v0 + 352),  *(void *)(v0 + 328));
      uint64_t v34 = *(void *)(v1 + 32);
      __int128 v35 = *(_OWORD *)(v1 + 16);
      *(_OWORD *)uint64_t v26 = *(_OWORD *)v1;
      *(_OWORD *)(v26 + ++*(void *)(v0 + 16) = v35;
      *(void *)(v26 + 32) = v34;
      sub_100063D88(v26, v28, type metadata accessor for CachedStorebag);
      _s10RTCUtility9XPCObjectOwst_0(v28, 0LL, 1LL, v27);
      sub_100064028(v30 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_cache, v0 + 176);
      sub_1000100D8();
      sub_1000083B8();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000307D4( v28,  v112,  v29,  v36,  v37,  v38,  v39,  v40,  v91,  v93,  v96,  v100,  v103,  v107,  v0 + 176,  v112,  v31,  v33,  v32,  v117);
      swift_endAccess(v0 + 176);
      if (qword_10008A0C0 != -1) {
        swift_once(&qword_10008A0C0, sub_1000604F0);
      }
      uint64_t v41 = sub_10001030C();
      sub_100063EB8(v41, (uint64_t)qword_100093420);
      uint64_t v42 = (os_log_s *)sub_10001ACC8();
      os_log_type_t v43 = static os_log_type_t.debug.getter();
      BOOL v44 = os_log_type_enabled(v42, v43);
      uint64_t v45 = *(void *)(v0 + 416);
      uint64_t v47 = *(void *)(v0 + 376);
      uint64_t v46 = *(void *)(v0 + 384);
      uint64_t v48 = *(void *)(v0 + 360);
      uint64_t v113 = *(void *)(v0 + 352);
      uint64_t v49 = *(void *)(v0 + 328);
      os_log_type_t v50 = *(void (**)(uint64_t, uint64_t))(v0 + 280);
      if (v44)
      {
        uint64_t v102 = *(void *)(v0 + 416);
        uint64_t v51 = *(void *)(v0 + 272);
        uint64_t v110 = *(void *)(v0 + 368);
        uint64_t v52 = (uint8_t *)sub_1000100B0(12LL);
        uint64_t v98 = v46;
        uint64_t v53 = sub_1000100B0(32LL);
        uint64_t v123 = v53;
        *(_DWORD *)uint64_t v52 = 136446210;
        sub_1000083B0();
        *(void *)(v0 + 24sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = sub_100019964(v51, (unint64_t)v50, &v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v121, v52 + 4);
        sub_10001AA78((uint64_t)v50);
        sub_10001AA70((void *)&_mh_execute_header, v42, v43, "storing storebag %{public}s in cache", v52);
        sub_10001AA68(v53);
        sub_100010010(v53);
        sub_100010010((uint64_t)v52);

        sub_100034760(v102, type metadata accessor for CachedStorebag);
        sub_100064368(v54, v55, v56, v57, v58, v59, v60, v61, v0 + 240, v47, v98, v102, v48, v108, v110, v113);
        v50(v105, v49);
        (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v99, v111);
      }

      else
      {
        sub_100010060(*(void *)(v0 + 280));

        sub_100034760(v45, type metadata accessor for CachedStorebag);
        sub_100064368(v69, v70, v71, v72, v73, v74, v75, v76, v92, v94, v97, v101, v104, v108, v109, v113);
        sub_10006443C();
        uint64_t v77 = sub_1000643E8();
        v79(v77, v78);
      }

      uint64_t v80 = sub_100064134();
      uint64_t v122 = v81;
      uint64_t v82 = *(void *)(v0 + 264);
      swift_task_dealloc(v80);
      sub_10001AB88();
      sub_10001AB08();
      sub_10001AB28();
      sub_10001AB38();
      sub_10001AAF0();
      sub_10001ABA8();
      sub_10001AB60();
      sub_10001AB90();
      swift_task_dealloc(v122);
      *(void *)uint64_t v82 = v114;
      *(_DWORD *)(v82 + 8) = v119;
      *(void *)(v82 + ++*(void *)(v0 + 16) = v118;
      *(void *)(v82 + 24) = v116;
      *(void *)(v82 + 32) = v115;
      uint64_t v14 = (uint64_t (*)(void))sub_100064388();
      return sub_100063F44(v14);
    }

    sub_100064160();
    sub_100064284();
    sub_100064264();
    if (qword_10008A0C0 != -1) {
      swift_once(&qword_10008A0C0, sub_1000604F0);
    }
    uint64_t v18 = *(os_log_s **)(v0 + 280);
    uint64_t v19 = sub_10001030C();
    sub_100063EB8(v19, (uint64_t)qword_100093420);
    sub_10001ACC8();
    os_log_type_t v20 = sub_10001AB70();
    BOOL v21 = sub_10001AC28(v20);
    uint64_t v22 = *(void *)(v0 + 280);
    if (v21)
    {
      uint64_t v1 = *(void *)(v0 + 272);
      uint64_t v5 = v17;
      uint64_t v23 = (uint8_t *)sub_1000100B0(12LL);
      uint64_t v120 = v2;
      uint64_t v24 = sub_1000100B0(32LL);
      uint64_t v123 = v24;
      sub_1000641B0(4.8751e-34);
      *(void *)(v0 + 256) = sub_100064254();
      sub_10001AD28(v0 + 256, v0 + 264, 12LL);
      sub_10001AA78(v22);
      sub_10001AA70((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "removing expired storebag %{public}s", v23);
      sub_10001AA68(v24);
      uint64_t v25 = v24;
      uint64_t v2 = v120;
      sub_100010010(v25);
      sub_100010010((uint64_t)v23);
    }

    else
    {

      sub_100010060(v22);
    }

    id v62 = [(id)objc_opt_self(NSFileManager) defaultManager];
    URL._bridgeToObjectiveC()(v63);
    uint64_t v65 = (void *)v64;
    *(void *)(v0 + 248) = 0LL;
    id v66 = sub_100064274(v64, "removeItemAtURL:error:");

    if (!(_DWORD)v66)
    {
      sub_1000641EC();
      sub_1000641E0();

      sub_10006447C(v83, v84, v85, v86, v87, v88, v89, v90, v91, v93, v96, v100, v103, v106);
      ((void (*)(uint64_t, uint64_t))v17)(v2, v3);
      ((void (*)(uint64_t, uint64_t))v17)(v1, v3);
      (*((void (**)(uint64_t, void *))v62 + 1))(v22, v5);
      goto LABEL_5;
    }

    id v67 = *(id *)(v0 + 248);
    uint64_t v68 = (void *)sub_100026B60();
    *(void *)(v0 + 456) = v68;
    sub_1000644A0(v68);
    return sub_100063F28();
  }

  return result;
}

uint64_t sub_100061C50()
{
  *(void *)(v0 + 464) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    uint64_t v4 = sub_100061E68;
  }
  else {
    uint64_t v4 = sub_100061CEC;
  }
  return sub_10002C73C((uint64_t)v4, *(void *)(v0 + 288), 0LL);
}

uint64_t sub_100061CEC()
{
  uint64_t v11 = *(void *)(v1 + 72);
  int v10 = *(_DWORD *)(v1 + 64);
  uint64_t v9 = *(void *)(v1 + 56);
  uint64_t v3 = sub_100064134();
  uint64_t v7 = v4;
  uint64_t v5 = *(void *)(v1 + 264);
  __int128 v8 = *(_OWORD *)(v1 + 80);
  swift_task_dealloc(v3);
  sub_10001AB88();
  sub_10001AB08();
  sub_10001AB28();
  sub_10001AB38();
  sub_10001AAF0();
  sub_10001ABA8();
  sub_10001AB60();
  sub_10001AB90();
  swift_task_dealloc(v7);
  *(void *)uint64_t v5 = v9;
  *(_DWORD *)(v5 + 8) = v10;
  *(void *)(v5 + ++*(void *)(v0 + 16) = v11;
  *(_OWORD *)(v5 + 24) = v8;
  return sub_10005B63C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100061DD8()
{
  return sub_10001A94C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100061E68()
{
  return sub_10001A94C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100061F08(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v5 + 65) = a4;
  *(void *)(v5 + 88) = a3;
  *(void *)(v5 + 96) = v4;
  *(void *)(v5 + 72) = a1;
  *(void *)(v5 + 8sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = a2;
  *(void *)(v5 + 104) = *v4;
  uint64_t v6 = sub_10000534C((uint64_t *)&unk_10008C4A0);
  *(void *)(v5 + 112) = sub_100008360(*(void *)(v6 - 8));
  return swift_task_switch(sub_100061F68, v4, 0LL);
}

uint64_t sub_100061F68()
{
  uint64_t v2 = v1[12];
  uint64_t v3 = OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask;
  v1[15] = OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask;
  uint64_t v4 = *(void *)(v2 + v3);
  if (v4)
  {
    v1[16] = v4;
    uint64_t v5 = async function pointer to Task.result.getter[1];
    swift_retain(v4);
    uint64_t v6 = (void *)swift_task_alloc(v5);
    v1[17] = v6;
    sub_10000534C(&qword_10008A8A8);
    *uint64_t v6 = v1;
    v6[1] = sub_1000620E8;
    return sub_100063F60();
  }

  else
  {
    sub_100064510();
    uint64_t v8 = os_transaction_create("com.apple.rtcreportingd.storebag-download");
    sub_100064378(v8);
    uint64_t v9 = type metadata accessor for TaskPriority(0LL);
    sub_10006410C(v9);
    sub_1000069B0(&qword_10008CAE8, type metadata accessor for StorebagCache, (uint64_t)&unk_10006C8B0);
    uint64_t v10 = sub_10006454C((uint64_t)&unk_100086280);
    sub_100063ED4(v10, v11, v12, v13, v14, v15, v16, v17, v21);
    uint64_t v18 = sub_1000100D8();
    uint64_t v19 = sub_100064400(v18, (uint64_t)&unk_10008CAF0);
    sub_100064220(v19);
    swift_release(v0);
    os_log_type_t v20 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    v1[19] = v20;
    sub_10000534C(&qword_10008A8A8);
    void *v20 = v1;
    v20[1] = sub_1000622B8;
    return sub_100063F7C();
  }

uint64_t sub_1000620E8()
{
  return sub_10001A974();
}

uint64_t sub_100062138()
{
  uint64_t v2 = v1[15];
  uint64_t v3 = v1[12];
  swift_release(v1[16]);
  uint64_t v4 = *(void *)(v3 + v2);
  if (v4)
  {
    v1[16] = v4;
    uint64_t v5 = async function pointer to Task.result.getter[1];
    swift_retain(v4);
    uint64_t v6 = (void *)swift_task_alloc(v5);
    v1[17] = v6;
    sub_10000534C(&qword_10008A8A8);
    *uint64_t v6 = v1;
    v6[1] = sub_1000620E8;
    return sub_100063F60();
  }

  else
  {
    sub_100064510();
    uint64_t v8 = os_transaction_create("com.apple.rtcreportingd.storebag-download");
    sub_100064378(v8);
    uint64_t v9 = type metadata accessor for TaskPriority(0LL);
    sub_10006410C(v9);
    sub_1000069B0(&qword_10008CAE8, type metadata accessor for StorebagCache, (uint64_t)&unk_10006C8B0);
    uint64_t v10 = sub_10006454C((uint64_t)&unk_100086280);
    sub_100063ED4(v10, v11, v12, v13, v14, v15, v16, v17, v21);
    uint64_t v18 = sub_1000100D8();
    uint64_t v19 = sub_100064400(v18, (uint64_t)&unk_10008CAF0);
    sub_100064220(v19);
    swift_release(v0);
    os_log_type_t v20 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    v1[19] = v20;
    sub_10000534C(&qword_10008A8A8);
    void *v20 = v1;
    v20[1] = sub_1000622B8;
    return sub_100063F7C();
  }

uint64_t sub_1000622B8()
{
  *(void *)(v0 + 16sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v1;
  swift_task_dealloc(v3);
  return sub_10001A974();
}

uint64_t sub_10006230C()
{
  return sub_10001ABB0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100062338()
{
  return sub_10001ABB0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100062364( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v8 + 72) = a8;
  *(void *)(v8 + 8sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v14;
  *(_BYTE *)(v8 + 176) = a7;
  *(void *)(v8 + 56) = a5;
  *(void *)(v8 + 64) = a6;
  *(void *)(v8 + 48) = a4;
  uint64_t v10 = type metadata accessor for URL(0LL);
  *(void *)(v8 + 88) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v8 + 96) = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v8 + 104) = swift_task_alloc(v12);
  *(void *)(v8 + 112) = swift_task_alloc(v12);
  *(void *)(v8 + 12sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = swift_task_alloc(v12);
  *(void *)(v8 + 128) = swift_task_alloc(v12);
  return swift_task_switch(sub_100062404, a4, 0LL);
}

uint64_t sub_100062404()
{
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[7];
  uint64_t v2 = v0[8];
  char v4 = sub_10000849C();
  sub_1000087CC(v4);
  URL.appendingPathComponent(_:)(v3, v2);
  v0[17] = *(void *)(v1 + 8);
  uint64_t v5 = sub_1000643E8();
  v6(v5);
  id v7 = [(id)objc_opt_self(NSURLSessionConfiguration) ephemeralSessionConfiguration];
  v0[18] = [(id)objc_opt_self(NSURLSession) sessionWithConfiguration:v7];

  uint64_t v8 = (void *)swift_task_alloc(async function pointer to NSURLSession.download(from:delegate:)[1]);
  v0[19] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100062500;
  return NSURLSession.download(from:delegate:)(v0[14], v0[16], 0LL);
}

uint64_t sub_100062500()
{
  uint64_t v2 = v0[19];
  v0[20] = v3;
  v0[21] = v1;
  swift_task_dealloc(v2);
  return sub_10001A974();
}

uint64_t sub_100062560()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = objc_opt_self(&OBJC_CLASS___NSHTTPURLResponse);
  if (swift_dynamicCastObjCClass(v1, v2))
  {
    id v3 = *(id *)(v0 + 160);
    id v4 = sub_10006441C();
    uint64_t v5 = *(void **)(v0 + 160);
    if (v4 != (id)200)
    {
      uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 136);
      uint64_t v13 = *(void **)(v0 + 144);
      uint64_t v68 = *(void *)(v0 + 128);
      uint64_t v15 = *(void *)(v0 + 112);
      uint64_t v16 = *(void *)(v0 + 88);
      uint64_t v17 = *(void *)(v0 + 48);
      id v18 = sub_10006441C();
      unint64_t v19 = sub_10000F664();
      uint64_t v20 = sub_100006A70((uint64_t)&unk_100082BE8, v19);
      *(void *)uint64_t v21 = v18;
      *(_BYTE *)(v21 + 8) = 0;
      swift_willThrow(v20, v21, v22, v23, v24, v25, v26, v27);

      sub_100062AFC();
      v14(v15, v16);
      [v13 finishTasksAndInvalidate];

      v14(v68, v16);
LABEL_14:
      uint64_t v46 = *(void *)(v17 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask);
      *(void *)(v17 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask) = 0LL;
      swift_release(v46);
      uint64_t v47 = *(void *)(v17 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTransaction);
      *(void *)(v17 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTransaction) = 0LL;
      swift_unknownObjectRelease(v47);
      swift_task_dealloc(*(void *)(v0 + 128));
      sub_10001AB88();
      sub_10001AB28();
      sub_10001AB38();
      return sub_10005B63C(*(uint64_t (**)(void))(v0 + 8));
    }
  }

  uint64_t v6 = *(void *)(v0 + 168);
  uint64_t v7 = Data.init(contentsOf:options:)(*(void *)(v0 + 112), 8LL);
  if (v6)
  {
LABEL_13:
    uint64_t v39 = *(void **)(v0 + 160);
    uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 136);
    uint64_t v40 = *(void **)(v0 + 144);
    uint64_t v42 = *(void *)(v0 + 128);
    uint64_t v43 = *(void *)(v0 + 112);
    uint64_t v44 = *(void *)(v0 + 88);
    uint64_t v17 = *(void *)(v0 + 48);
    sub_100062AFC();

    uint64_t v45 = v41(v43, v44);
    sub_1000643CC(v45, "finishTasksAndInvalidate");

    v41(v42, v44);
    goto LABEL_14;
  }

  uint64_t v9 = v7;
  uint64_t v10 = v8;
  uint64_t v11 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  PropertyListDecoder.init()();
  uint64_t v70 = 100LL;
  unint64_t v12 = sub_1000636C4();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:format:)( (void *)(v0 + 16),  &type metadata for RawStorebag._EncodedRawStorebag,  v9,  v10,  &v70,  &type metadata for RawStorebag._EncodedRawStorebag,  v12);
  uint64_t v28 = *(void *)(v0 + 24);
  uint64_t v29 = *(void *)(v0 + 32);
  uint64_t v30 = *(void *)(v0 + 40);
  uint64_t v69 = Data.init(base64Encoded:options:)(*(void *)(v0 + 16), v28, 1LL);
  unint64_t v32 = v31;
  uint64_t v33 = Data.init(base64Encoded:options:)(v29, v30, 1LL);
  unint64_t v35 = v34;
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v30);
  if (v32 >> 60 == 15 || v35 >> 60 == 15)
  {
    unint64_t v37 = sub_10000F664();
    sub_100006A70((uint64_t)&unk_100082BE8, v37);
    *uint64_t v38 = 0LL;
    sub_100064394((uint64_t)v38, 1);
    sub_10001020C();
    sub_100004C30(v33, v35);
    sub_100004C30(v69, v32);
    sub_1000644D4();
    goto LABEL_13;
  }

  char v49 = *(_BYTE *)(v0 + 176);
  sub_10001020C();
  sub_1000644D4();
  if ((v49 & 1) == 0)
  {
    sub_100005F30(*(void **)(v0 + 72), *(void *)(*(void *)(v0 + 72) + 24LL));
    if (!sub_100063C64())
    {
      uint64_t v52 = *(void **)(v0 + 144);
      id v62 = *(void **)(v0 + 160);
      uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v0 + 136);
      uint64_t v67 = *(void *)(v0 + 128);
      uint64_t v53 = *(void *)(v0 + 112);
      uint64_t v54 = *(void *)(v0 + 88);
      uint64_t v17 = *(void *)(v0 + 48);
      unint64_t v55 = sub_10000F664();
      sub_100006A70((uint64_t)&unk_100082BE8, v55);
      *uint64_t v56 = 1LL;
      sub_100064394((uint64_t)v56, 1);
      sub_100064200();
      sub_100064414(v33);
      sub_100064488();

      v65(v53, v54);
      [v52 finishTasksAndInvalidate];

      v65(v67, v54);
      goto LABEL_14;
    }
  }

  uint64_t v50 = *(void *)(v0 + 104);
  sub_1000609A8(*(void *)(v0 + 56), *(void *)(v0 + 64));
  Data.write(to:options:)(v50, 0LL, v69, v32);
  uint64_t v51 = *(void **)(v0 + 144);
  uint64_t v64 = *(void **)(v0 + 160);
  uint64_t v66 = *(void *)(v0 + 128);
  uint64_t v60 = *(void *)(v0 + 112);
  uint64_t v61 = *(void *)(v0 + 120);
  uint64_t v63 = *(void *)(v0 + 104);
  uint64_t v57 = *(void *)(v0 + 48);
  sub_100064428(v63);
  sub_100064200();
  sub_100064414(v33);
  sub_100062AFC();

  sub_100064428(v60);
  [v51 finishTasksAndInvalidate];

  sub_100064428(v66);
  uint64_t v58 = *(void *)(v57 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask);
  *(void *)(v57 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask) = 0LL;
  swift_release(v58);
  uint64_t v59 = *(void *)(v57 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTransaction);
  *(void *)(v57 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTransaction) = 0LL;
  swift_unknownObjectRelease(v59);
  sub_10001AB38();
  swift_task_dealloc(v61);
  sub_10001AB08();
  swift_task_dealloc(v63);
  return sub_10005B63C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100062A58(uint64_t a1)
{
  id v3 = *(void (**)(uint64_t))(v1 + 136);
  uint64_t v2 = *(void **)(v1 + 144);
  uint64_t v4 = *(void *)(v1 + 48);
  sub_1000643CC(a1, "finishTasksAndInvalidate");

  uint64_t v5 = sub_1000643E8();
  v3(v5);
  uint64_t v6 = *(void *)(v4 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask);
  *(void *)(v4 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask) = 0LL;
  swift_release(v6);
  uint64_t v7 = *(void *)(v4 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTransaction);
  *(void *)(v4 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTransaction) = 0LL;
  swift_unknownObjectRelease(v7);
  swift_task_dealloc(*(void *)(v1 + 128));
  sub_10001AB08();
  sub_10001AB28();
  sub_10001AB38();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_100062AFC()
{
  id v0 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL._bridgeToObjectiveC()(v1);
  id v3 = v2;
  id v29 = 0LL;
  unsigned int v4 = [v0 removeItemAtURL:v2 error:&v29];

  if (v4)
  {
    id v5 = v29;
  }

  else
  {
    id v25 = v29;
    id v6 = v29;
    uint64_t v7 = _convertNSErrorToError(_:)(v25);

    swift_willThrow(v8, v9, v10, v11, v12, v13, v14, v15);
    if (qword_10008A0C0 != -1) {
      swift_once(&qword_10008A0C0, sub_1000604F0);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_10000D34C(v16, (uint64_t)qword_100093420);
    swift_errorRetain(v7);
    uint64_t v17 = swift_errorRetain(v7);
    id v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = (void *)swift_slowAlloc(32LL, -1LL);
      id v29 = v21;
      *(_DWORD *)uint64_t v20 = 136446210;
      swift_getErrorValue(v7, v28, v27);
      uint64_t v22 = Error.localizedDescription.getter(v27[1], v27[2]);
      unint64_t v24 = v23;
      uint64_t v26 = sub_100019964(v22, v23, (uint64_t *)&v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v20 + 4);
      swift_bridgeObjectRelease(v24);
      swift_errorRelease(v7);
      swift_errorRelease(v7);
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "failed to remove temporary storebag download: %{public}s",  v20,  0xCu);
      swift_arrayDestroy(v21, 1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);

      swift_errorRelease(v7);
    }

    else
    {
      swift_errorRelease(v7);
      swift_errorRelease(v7);
      swift_errorRelease(v7);
    }
  }

void sub_100062DA8()
{
  uint64_t v2 = v0;
  unint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_10000534C((uint64_t *)&unk_10008CAD0);
  sub_100006B54();
  __chkstk_darwin(v7);
  sub_10003E428();
  if (qword_10008A0C0 != -1) {
    swift_once(&qword_10008A0C0, sub_1000604F0);
  }
  uint64_t v8 = sub_10001030C();
  sub_10000D34C(v8, (uint64_t)qword_100093420);
  uint64_t v9 = swift_bridgeObjectRetain_n(v4, 2LL);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (sub_100064468(v10))
  {
    uint64_t v12 = (uint8_t *)sub_1000100B0(12LL);
    uint64_t v13 = sub_1000100B0(32LL);
    v15[0] = v13;
    *(_DWORD *)uint64_t v12 = 136446210;
    sub_1000083B8();
    uint64_t v14 = sub_100019964(v6, v4, v15);
    sub_10001AD28((uint64_t)&v14, (uint64_t)v15, (uint64_t)(v12 + 4));
    sub_10001AA78(v4);
    sub_10001AA70((void *)&_mh_execute_header, v10, v11, "evicting storebag %{public}s from cache", v12);
    sub_10001AA68(v13);
    sub_100010010(v13);
    sub_100010010((uint64_t)v12);
  }

  else
  {

    sub_100010060(v4);
  }

  sub_100064028(v2 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_cache, (uint64_t)v15);
  sub_100033AFC(v1);
  sub_100035228(v1, (uint64_t *)&unk_10008CAD0);
  swift_endAccess(v15);
  sub_100008348();
}

void sub_100062F5C()
{
  uint64_t v1 = sub_100006C8C();
  sub_10003545C(v1);
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_cache));
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTask));
  swift_unknownObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC13rtcreportingd13StorebagCache_activeLoadingTransaction));
  swift_defaultActor_destroy(v0);
  sub_100006B44();
}

uint64_t sub_100062FC0()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100062FD8()
{
  return type metadata accessor for StorebagCache(0LL);
}

uint64_t type metadata accessor for StorebagCache(uint64_t a1)
{
  return sub_100042998(a1, (uint64_t *)&unk_10008C908, (uint64_t)&nominal type descriptor for StorebagCache);
}

uint64_t sub_100062FF4(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = &unk_10006C868;
    v4[4] = &unk_10006C868;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100063084(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16LL) & ~(unint64_t)v3);
    swift_retain(v4);
  }

  else
  {
    uint64_t v5 = a1;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    uint64_t v6 = a2[3];
    *(void *)(a1 + ++*(void *)(v0 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    uint64_t v7 = a2[4];
    *(void *)(a1 + 32) = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
  }

  return v5;
}

uint64_t sub_10006314C(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t sub_1000631A4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[3];
  *(void *)(a1 + ++*(void *)(v0 + 16) = a2[2];
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = a2[4];
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  return a1;
}

uint64_t *sub_100063244(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[4];
  uint64_t v11 = a1[4];
  a1[4] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = (uint64_t)a1 + v12;
  uint64_t v14 = (uint64_t)a2 + v12;
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24LL))(v13, v14, v15);
  return a1;
}

uint64_t sub_1000632F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + ++*(void *)(v0 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  return a1;
}

uint64_t *sub_10006335C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[3];
  uint64_t v8 = a1[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a1[4];
  a1[4] = a2[4];
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (uint64_t)a1 + v10;
  uint64_t v12 = (uint64_t)a2 + v10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  return a1;
}

uint64_t sub_1000633F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000633FC);
}

uint64_t sub_1000633FC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_10005935C();
    return _s10RTCUtility9XPCObjectOwet_0((uint64_t)a1 + *(int *)(a3 + 20), a2, v8);
  }

uint64_t sub_10006346C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100063478);
}

void *sub_100063478(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_10005935C();
    return (void *)sub_100064154((uint64_t)v5 + *(int *)(a4 + 20), a2, a2, v7);
  }

  return result;
}

uint64_t type metadata accessor for CachedStorebag(uint64_t a1)
{
  return sub_100042998(a1, qword_10008CA98, (uint64_t)&nominal type descriptor for CachedStorebag);
}

uint64_t sub_1000634EC(uint64_t a1)
{
  v4[0] = "(";
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

Swift::Int sub_100063560(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_1000635D4()
{
  return swift_deallocObject(v0, 112LL, 7LL);
}

uint64_t sub_100063610(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  char v9 = *(_BYTE *)(v1 + 56);
  uint64_t v10 = (void *)swift_task_alloc(dword_10008CAE4);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_100028F58;
  return sub_100062364(a1, v4, v5, v6, v7, v8, v9, v1 + 64);
}

uint64_t sub_1000636B8(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRelease(result);
  }
  return result;
}

unint64_t sub_1000636C4()
{
  unint64_t result = qword_10008CB00;
  if (!qword_10008CB00)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006C330, &type metadata for RawStorebag._EncodedRawStorebag);
    atomic_store(result, (unint64_t *)&qword_10008CB00);
  }

  return result;
}

void sub_100063700(uint64_t a1)
{
  if (!*(void *)(a1 + 16)
    || (sub_10000534C(&qword_10008BFC8), uint64_t v2 = sub_10006407C(), v3 = v2, (v27 = *(void *)(a1 + 16)) == 0))
  {
LABEL_23:
    sub_100006AF0();
    sub_10006408C();
    return;
  }

  unint64_t v4 = 0LL;
  uint64_t v5 = v2 + 56;
  while (v4 < *(void *)(a1 + 16))
  {
    uint64_t v6 = (uint64_t *)(a1 + 32 + 16 * v4);
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    Hasher.init(_seed:)(v28, *(void *)(v3 + 40));
    sub_10001015C();
    String.hash(into:)(v28, v8, v7);
    Swift::Int v9 = Hasher._finalize()();
    uint64_t v10 = -1LL << *(_BYTE *)(v3 + 32);
    unint64_t v11 = v9 & ~v10;
    unint64_t v12 = v11 >> 6;
    uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
    uint64_t v14 = 1LL << v11;
    if (((1LL << v11) & v13) != 0)
    {
      uint64_t v15 = *(void *)(v3 + 48);
      uint64_t v16 = (uint64_t *)(v15 + 16 * v11);
      uint64_t v17 = v16[1];
      BOOL v18 = *v16 == v8 && v17 == v7;
      if (v18 || (sub_100047670(*v16, v17) & 1) != 0)
      {
LABEL_11:
        swift_bridgeObjectRelease(v7);
        goto LABEL_22;
      }

      uint64_t v19 = ~v10;
      while (1)
      {
        unint64_t v11 = (v11 + 1) & v19;
        unint64_t v12 = v11 >> 6;
        uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
        uint64_t v14 = 1LL << v11;
        if ((v13 & (1LL << v11)) == 0) {
          break;
        }
        uint64_t v20 = (uint64_t *)(v15 + 16 * v11);
        uint64_t v21 = v20[1];
        BOOL v22 = *v20 == v8 && v21 == v7;
        if (v22 || (sub_100047670(*v20, v21) & 1) != 0) {
          goto LABEL_11;
        }
      }
    }

    *(void *)(v5 + 8 * v12) = v14 | v13;
    unint64_t v23 = (void *)(*(void *)(v3 + 48) + 16 * v11);
    *unint64_t v23 = v8;
    v23[1] = v7;
    uint64_t v24 = *(void *)(v3 + 16);
    BOOL v25 = __OFADD__(v24, 1LL);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_25;
    }
    *(void *)(v3 + ++*(void *)(v0 + 16) = v26;
LABEL_22:
    if (++v4 == v27) {
      goto LABEL_23;
    }
  }

  __break(1u);
LABEL_25:
  __break(1u);
}

void sub_100063888(uint64_t a1)
{
  uint64_t v1 = a1;
  if (!*(void *)(a1 + 16)
    || (sub_10000534C((uint64_t *)&unk_10008CB10), uint64_t v2 = sub_10006407C(), (v29 = *(void *)(v1 + 16)) == 0))
  {
LABEL_24:
    sub_100006AF0();
    sub_10006408C();
    return;
  }

  unint64_t v3 = 0LL;
  uint64_t v27 = v1;
  uint64_t v28 = v1 + 32;
  while (v3 < *(void *)(v1 + 16))
  {
    unint64_t v4 = *(void **)(v28 + 8 * v3);
    uint64_t v5 = *(void *)(v2 + 40);
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;
    Hasher.init(_seed:)(v30, v5);
    id v9 = v4;
    String.hash(into:)(v30, v6, v8);
    Swift::Int v10 = Hasher._finalize()();
    sub_10001ABA0();
    uint64_t v11 = -1LL << *(_BYTE *)(v2 + 32);
    uint64_t v12 = v10 & ~v11;
    sub_1000643D4();
    if ((v15 & v14) != 0)
    {
      sub_100064448();
      uint64_t v16 = sub_1000642AC();
      if (v8 == v16 && v10 == v17)
      {
LABEL_21:
        sub_100010060(v10);
LABEL_22:

        goto LABEL_23;
      }

      uint64_t v19 = sub_100064034(v16, v17);
      sub_10000FFD8();
      swift_bridgeObjectRelease(v6);
      if ((v19 & 1) != 0) {
        goto LABEL_22;
      }
      uint64_t v20 = ~v11;
      while (1)
      {
        uint64_t v12 = (v12 + 1) & v20;
        sub_1000643D4();
        if ((v14 & v15) == 0) {
          break;
        }
        sub_100064448();
        uint64_t v21 = sub_1000642AC();
        if (v19 == v21 && v10 == v22) {
          goto LABEL_21;
        }
        uint64_t v19 = sub_100064034(v21, v22);
        sub_10000FFD8();
        swift_bridgeObjectRelease(v6);
        if ((v19 & 1) != 0) {
          goto LABEL_22;
        }
      }
    }

    *(void *)(v2 + 56 + 8 * v13) = v15 | v14;
    *(void *)(*(void *)(v2 + 48) + 8 * v12) = v9;
    uint64_t v24 = *(void *)(v2 + 16);
    BOOL v25 = __OFADD__(v24, 1LL);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_26;
    }
    *(void *)(v2 + ++*(void *)(v0 + 16) = v26;
LABEL_23:
    ++v3;
    uint64_t v1 = v27;
    if (v3 == v29) {
      goto LABEL_24;
    }
  }

  __break(1u);
LABEL_26:
  __break(1u);
}

void sub_100063A38(unint64_t a1)
{
  unint64_t v2 = a1;
  unint64_t v3 = a1 >> 62;
  if (a1 >> 62)
  {
    sub_10006419C();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v1, v7);
    sub_10001ABA0();
    if (v4)
    {
LABEL_3:
      sub_10000534C((uint64_t *)&unk_10008CB20);
      uint64_t v5 = (void *)sub_10006407C();
      if (!v3) {
        goto LABEL_4;
      }
LABEL_8:
      sub_10006419C();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v4, v8);
      sub_10001ABA0();
      if (!v6)
      {
LABEL_25:
        sub_10001ABA0();
        return;
      }

      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
  }

  uint64_t v5 = &_swiftEmptySetSingleton;
  if (v3) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v6 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v6) {
    goto LABEL_25;
  }
LABEL_9:
  unint64_t v9 = 0LL;
  unint64_t v28 = v2 & 0xC000000000000001LL;
  unint64_t v24 = v2 + 32;
  uint64_t v25 = v2 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v26 = v6;
  unint64_t v27 = v2;
  while (1)
  {
    if (v28)
    {
      uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v2);
    }

    else
    {
      if (v9 >= *(void *)(v25 + 16)) {
        goto LABEL_28;
      }
      uint64_t v10 = *(void *)(v24 + 8 * v9);
      swift_retain(v10);
    }

    BOOL v11 = __OFADD__(v9++, 1LL);
    if (v11) {
      break;
    }
    Hasher.init(_seed:)(v29, v5[5]);
    type metadata accessor for Client();
    sub_1000069B0( &qword_10008AC88,  (uint64_t (*)(uint64_t))type metadata accessor for Client,  (uint64_t)&unk_10006A12C);
    Swift::UInt v12 = sub_1000640E0();
    Hasher._combine(_:)(v12);
    Swift::Int v13 = Hasher._finalize()();
    uint64_t v14 = -1LL << *((_BYTE *)v5 + 32);
    uint64_t v15 = v13 & ~v14;
    sub_100064350();
    if ((v18 & v17) != 0)
    {
      sub_10006429C();
      uint64_t v19 = (void *)sub_1000642FC();
      sub_1000640E0();
      sub_100064494();
      if (v19 == v29)
      {
LABEL_20:
        swift_release(v10);
        uint64_t v6 = v26;
        unint64_t v2 = v27;
        goto LABEL_24;
      }

      uint64_t v20 = ~v14;
      while (1)
      {
        uint64_t v15 = (v15 + 1) & v20;
        sub_100064350();
        if ((v17 & v18) == 0) {
          break;
        }
        sub_10006429C();
        uint64_t v21 = (void *)sub_1000642FC();
        sub_1000640E0();
        sub_100064494();
        if (v21 == v29) {
          goto LABEL_20;
        }
      }

      uint64_t v6 = v26;
      unint64_t v2 = v27;
    }

    v5[v16 + 7] = v18 | v17;
    *(void *)(v5[6] + 8 * v15) = v10;
    uint64_t v22 = v5[2];
    BOOL v11 = __OFADD__(v22, 1LL);
    uint64_t v23 = v22 + 1;
    if (v11) {
      goto LABEL_27;
    }
    uint64_t v5[2] = v23;
LABEL_24:
    if (v9 == v6) {
      goto LABEL_25;
    }
  }

  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

BOOL sub_100063C64()
{
  if (qword_100089FD0 != -1) {
    swift_once(&qword_100089FD0, sub_10000CD9C);
  }
  uint64_t v0 = (__SecKey *)(id)qword_10008A828;
  Class isa = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
  unint64_t v2 = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
  int v3 = SecKeyVerifySignature(v0, kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1, isa, v2, 0LL);

  return v3 != 0;
}

uint64_t sub_100063D30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CachedStorebag(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for StorebagCache.Location(uint64_t a1)
{
  return sub_100042998(a1, qword_10008CBA8, (uint64_t)&nominal type descriptor for StorebagCache.Location);
}

void sub_100063D88(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  sub_100006B44();
}

uint64_t sub_100063DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100063DD4);
}

uint64_t sub_100063DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006C8C();
  unsigned int v5 = _s10RTCUtility9XPCObjectOwet_0(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100063E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100063E20);
}

uint64_t sub_100063E20(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = sub_100006C8C();
  return sub_100064154(a1, v5, a3, v6);
}

uint64_t sub_100063E5C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_100063E6C(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 104, v1 - 96, *(void *)(v1 - 152));
}

uint64_t sub_100063E88()
{
  return Logger.init()();
}

uint64_t sub_100063EA4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, a5, a6, 33LL, 2LL, a9, a10);
}

uint64_t sub_100063EB8(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain_n(v2, 2LL);
}

uint64_t sub_100063ED4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(a1 + ++*(void *)(v0 + 16) = v9;
  *(void *)(a1 + 24) = v12;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v13;
  *(void *)(a1 + 4sub_100005F54(v0 + 8) = v10;
  *(_BYTE *)(a1 + 56) = v14;
  sub_100005ED0(v11, a1 + 64);
  *(void *)(a1 + 104) = a9;
  return swift_retain_n(v9, 2LL);
}

uint64_t sub_100063F10()
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  *(void *)(v4 - 112) = v5;
  return v5(v3, v1, v0);
}

uint64_t sub_100063F28()
{
  return sub_100060B28();
}

uint64_t sub_100063F44(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100063F60()
{
  return ((uint64_t (*)(void))Task.result.getter)();
}

uint64_t sub_100063F7C()
{
  return ((uint64_t (*)(void))Task.value.getter)();
}

uint64_t sub_100063F98@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_100063FA0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_100063FB0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 112))(v1, v2, v0);
}

uint64_t sub_100063FC4()
{
  return swift_task_dealloc(*(void *)(v0 + 424));
}

uint64_t sub_100063FE8()
{
  return swift_task_dealloc(*(void *)(v0 + 424));
}

uint64_t sub_100064008()
{
  return Date.advanced(by:)((double)*(int *)(v0 + 104));
}

uint64_t sub_100064028(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 33LL, 0LL);
}

uint64_t sub_100064034(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, a1, a2, 0LL);
}

uint64_t sub_100064050(uint64_t a1, unint64_t a2)
{
  return sub_100019964(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_10006405C(uint64_t a1)
{
  return Error.localizedDescription.getter(v1, a1);
}

uint64_t sub_10006406C(uint64_t a1)
{
  return Error.localizedDescription.getter(v1, a1);
}

uint64_t sub_10006407C()
{
  return static _SetStorage.allocate(capacity:)(v0);
}

  ;
}

BOOL sub_1000640A8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000640B8()
{
  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_1000640C4()
{
  return (*(uint64_t (**)(void, void))(v0 + 448))(*(void *)(v0 + 352), *(void *)(v0 + 328));
}

uint64_t sub_1000640E0()
{
  return Identifiable<>.id.getter(v1, v0);
}

void sub_1000640F0(Swift::String a1)
{
}

uint64_t sub_1000640FC()
{
  return (*(uint64_t (**)(void, void))(v0[47] + 8LL))(v0[48], v0[46]);
}

uint64_t sub_10006410C(uint64_t a1)
{
  return sub_100005E8C(v3, v2);
}

uint64_t sub_100064134()
{
  return *(void *)(v0 + 424);
}

uint64_t sub_100064154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s10RTCUtility9XPCObjectOwst_0(a1, a2, a3, a4);
}

void *sub_100064160()
{
  *(void *)(v0 + 2++*(void *)(v0 + 16) = *(void *)(v0 + 96);
  return sub_10000ECEC((void *)(v0 + 216));
}

uint64_t sub_100064178()
{
  return (*(uint64_t (**)(void, void, void))(v0[42] + 32LL))(v0[45], v0[37], v0[41]);
}

uint64_t sub_100064190()
{
  return v2(v0, v1);
}

uint64_t sub_10006419C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000641B0(float a1)
{
  float *v1 = a1;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000641C4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 192) + 8LL))(v0, v1);
}

uint64_t sub_1000641D8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_1000641E0()
{
  return _convertNSErrorToError(_:)(v0);
}

id sub_1000641EC()
{
  return v0;
}

uint64_t sub_100064200()
{
  return sub_100004C44(v0, v1);
}

uint64_t sub_10006420C(unsigned __int8 a1)
{
  return sub_100009E10(v1, v2, a1, v3);
}

uint64_t sub_100064220(uint64_t a1)
{
  *(void *)(v2 + 144) = a1;
  *(void *)(v1 + sub_10005900C(v2[73], v3) = a1;
  return swift_retain(a1);
}

uint64_t sub_100064234()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100064248()
{
  return type metadata accessor for CocoaError(0LL);
}

uint64_t sub_100064254()
{
  return sub_100019964(v1, v0, (uint64_t *)(v2 - 88));
}

void *sub_100064264()
{
  *(void *)(v1 + 232) = *(void *)(v1 + 128);
  return sub_10000ECEC(v0);
}

id sub_100064274(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3, v4);
}

uint64_t sub_100064284()
{
  _OWORD *v0 = *(_OWORD *)(v1 + 112);
  return sub_1000082EC((uint64_t)v0);
}

uint64_t sub_100064294(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_10006429C()
{
  return swift_retain(*(void *)(*(void *)(v0 + 48) + 8 * v1));
}

uint64_t sub_1000642AC()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

id sub_1000642BC(uint64_t a1, const char *a2)
{
  return objc_msgSend(v4, a2, v3, v2);
}

void sub_1000642CC()
{
}

uint64_t sub_1000642DC()
{
  return sub_10000849C();
}

uint64_t sub_1000642EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t (*a17)(uint64_t, uint64_t))
{
  return a17(a14, v17);
}

uint64_t sub_1000642FC()
{
  return Identifiable<>.id.getter(v1, v0);
}

  ;
}

  ;
}

uint64_t sub_100064340()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

  ;
}

uint64_t sub_100064368( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t (*a14)(uint64_t, uint64_t), uint64_t a15, uint64_t a16)
{
  return a14(a16, v16);
}

uint64_t sub_100064378(uint64_t a1)
{
  uint64_t v3 = *(void *)(v2 + v1);
  *(void *)(v2 + _s10RTCUtility9XPCObjectOwst_0(v0, 0LL, 1LL, v1) = a1;
  return swift_unknownObjectRelease(v3);
}

uint64_t sub_100064388()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_100064394@<X0>(uint64_t a1@<X1>, char a2@<W8>)
{
  *(_BYTE *)(a1 + sub_100005F54(v0 + 8) = a2;
  return swift_willThrow();
}

uint64_t sub_1000643A0()
{
  return v0;
}

uint64_t sub_1000643B4(uint64_t a1)
{
  return v1(a1, *(void *)(v2 - 208));
}

uint64_t sub_1000643C0()
{
  return Data.init(contentsOf:options:)(v0, 8LL);
}

id sub_1000643CC(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

  ;
}

uint64_t sub_1000643E8()
{
  return v0;
}

uint64_t sub_1000643F4()
{
  return static Date.< infix(_:_:)(v0, v1);
}

uint64_t sub_100064400(uint64_t a1, uint64_t a2)
{
  return sub_10004FDF8(v2, a2, v3);
}

void sub_10006440C()
{
}

uint64_t sub_100064414(uint64_t a1)
{
  return sub_100004C44(a1, v1);
}

id sub_10006441C()
{
  return [v0 *(SEL *)(v1 + 3768)];
}

uint64_t sub_100064428(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_100064430()
{
  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

uint64_t sub_10006443C()
{
  return v0(v1, v2);
}

uint64_t sub_100064448()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v0 + 48) + 8 * v1));
}

uint64_t sub_100064454()
{
  return _convertNSErrorToError(_:)(v0);
}

uint64_t sub_100064460()
{
  return static os_log_type_t.fault.getter();
}

BOOL sub_100064468(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100064470()
{
  return sub_1000609A8(v1, v0);
}

uint64_t sub_10006447C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

void sub_100064488()
{
}

uint64_t sub_100064494()
{
  return swift_release(v0);
}

void *sub_1000644A0(void *result)
{
  *unint64_t result = v2;
  result[1] = v1;
  return result;
}

  ;
}

uint64_t sub_1000644C8()
{
  return swift_release(*(void *)(v0 + 144));
}

uint64_t sub_1000644D4()
{
  return sub_100004C44(v1, v0);
}

uint64_t sub_1000644E0()
{
  return 0LL;
}

id sub_1000644F4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)(a1 + 32) = a2;
  return a2;
}

  ;
}

  ;
}

uint64_t sub_100064524(uint64_t a1, uint64_t a2)
{
  return _s10RTCUtility9XPCObjectOwst_0(a1, a2, 1LL, v2);
}

uint64_t sub_100064530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s10RTCUtility9XPCObjectOwet_0(a1, a2, a3);
}

uint64_t sub_100064544()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 88));
}

uint64_t sub_10006454C(uint64_t a1)
{
  return swift_allocObject(a1, 112LL, 7LL);
}

unsigned __int8 *XPCObject.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10001AD20();
  sub_100006B54();
  __chkstk_darwin(v5);
  sub_100035354();
  __n128 v8 = (uint64_t *)(v6 - v7);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v36 - v11);
  __chkstk_darwin(v10);
  char v14 = (uint64_t *)((char *)&v36 - v13);
  if (!a1) {
    return (unsigned __int8 *)_s10RTCUtility9XPCObjectOwst_0(a2, 1LL, 1LL, v4);
  }
  uint64_t v15 = (void *)swift_unknownObjectRetain(a1);
  xpc_type_t type = xpc_get_type(v15);
  if (type == (xpc_type_t)&_xpc_type_null)
  {
    sub_100065E60();
    uint64_t v19 = sub_1000595F4();
    uint64_t v21 = 13LL;
LABEL_26:
    swift_storeEnumTagMultiPayload(v19, v20, v21);
LABEL_27:
    sub_10003E334((uint64_t)v14, a2);
    return (unsigned __int8 *)sub_100065E6C();
  }

  xpc_type_t v17 = type;
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    sub_100065E80();
    *char v14 = a1;
    uint64_t v19 = sub_1000595F4();
    uint64_t v21 = 0LL;
    goto LABEL_26;
  }

  if (type == (xpc_type_t)&_xpc_type_endpoint)
  {
    sub_100065E80();
    *char v14 = a1;
    uint64_t v19 = sub_1000595F4();
    uint64_t v21 = 1LL;
    goto LABEL_26;
  }

  if (type == (xpc_type_t)&_xpc_type_BOOL)
  {
    BOOL value = xpc_BOOL_get_value(a1);
    sub_100065E60();
    *(_BYTE *)char v14 = value;
    uint64_t v19 = sub_1000595F4();
    uint64_t v21 = 2LL;
    goto LABEL_26;
  }

  if (type == (xpc_type_t)&_xpc_type_int64)
  {
    int64_t v23 = xpc_int64_get_value(a1);
    sub_100065E60();
    *char v14 = v23;
    uint64_t v19 = sub_1000595F4();
    uint64_t v21 = 3LL;
    goto LABEL_26;
  }

  if (type == (xpc_type_t)&_xpc_type_uint64)
  {
    uint64_t v24 = xpc_uint64_get_value(a1);
    sub_100065E60();
    *char v14 = v24;
    uint64_t v19 = sub_1000595F4();
    uint64_t v21 = 4LL;
    goto LABEL_26;
  }

  if (type == (xpc_type_t)&_xpc_type_double)
  {
    double v25 = xpc_double_get_value(a1);
    sub_100065E60();
    *(double *)char v14 = v25;
    uint64_t v19 = sub_1000595F4();
    uint64_t v21 = 5LL;
    goto LABEL_26;
  }

  if (type == (xpc_type_t)&_xpc_type_date)
  {
    int64_t v26 = xpc_date_get_value(a1);
    sub_100065E60();
    *char v14 = v26;
    uint64_t v19 = sub_1000595F4();
    uint64_t v21 = 6LL;
    goto LABEL_26;
  }

  if (type == (xpc_type_t)&_xpc_type_data)
  {
    unint64_t result = (unsigned __int8 *)xpc_data_get_bytes_ptr(a1);
    if (result)
    {
      unint64_t v27 = result;
      size_t length = xpc_data_get_length(a1);
      uint64_t v29 = Data.init(bytes:count:)(v27, length);
      uint64_t v31 = v30;
      sub_100065E60();
      *uint64_t v12 = v29;
      v12[1] = v31;
      swift_storeEnumTagMultiPayload(v12, v4, 7LL);
      uint64_t v32 = (uint64_t)v12;
LABEL_32:
      sub_10003E334(v32, (uint64_t)v14);
      goto LABEL_27;
    }

    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  if (type == (xpc_type_t)&_xpc_type_string)
  {
    unint64_t result = (unsigned __int8 *)xpc_string_get_string_ptr(a1);
    if (result)
    {
      uint64_t v33 = String.init(cString:)(result);
      uint64_t v35 = v34;
      sub_100065E60();
      *__n128 v8 = v33;
      v8[1] = v35;
      swift_storeEnumTagMultiPayload(v8, v4, 8LL);
      uint64_t v32 = (uint64_t)v8;
      goto LABEL_32;
    }

    goto LABEL_39;
  }

  if (type != (xpc_type_t)&_xpc_type_uuid)
  {
    if (type == (xpc_type_t)&_xpc_type_shmem)
    {
      sub_100065E80();
      *char v14 = a1;
      uint64_t v19 = sub_1000595F4();
      uint64_t v21 = 10LL;
    }

    else
    {
      sub_100065E80();
      if (v17 == (xpc_type_t)&_xpc_type_array)
      {
        *char v14 = a1;
        uint64_t v19 = sub_1000595F4();
        uint64_t v21 = 11LL;
      }

      else
      {
        if (v17 != (xpc_type_t)&_xpc_type_dictionary)
        {
          sub_100065E80();
          return (unsigned __int8 *)_s10RTCUtility9XPCObjectOwst_0(a2, 1LL, 1LL, v4);
        }

        *char v14 = a1;
        uint64_t v19 = sub_1000595F4();
        uint64_t v21 = 12LL;
      }
    }

    goto LABEL_26;
  }

  unint64_t result = (unsigned __int8 *)xpc_uuid_get_bytes(a1);
  if (result)
  {
    UUID.init(uuid:)( *result,  result[1],  result[2],  result[3],  result[4],  result[5],  result[6],  result[7],  *((void *)result + 1));
    sub_100065E60();
    uint64_t v19 = sub_1000595F4();
    uint64_t v21 = 9LL;
    goto LABEL_26;
  }

uint64_t type metadata accessor for XPCObject(uint64_t a1)
{
  uint64_t result = qword_10008CC40;
  if (!qword_10008CC40) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for XPCObject);
  }
  return result;
}

void XPCObject.obj.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v2);
  sub_100006B64();
  uint64_t v3 = sub_10001AD20();
  sub_100006B54();
  __chkstk_darwin(v4);
  sub_100006B64();
  uint64_t v7 = v6 - v5;
  sub_10003E2A8(v1, v6 - v5);
  __n128 v8 = (char *)&loc_100064A04 + *((int *)qword_100064C30 + swift_getEnumCaseMultiPayload(v7, v3));
  __asm { BR              X10 }

uint64_t sub_100064A14()
{
  return *(void *)v0;
}

BOOL static XPCObject.== infix(_:_:)()
{
  uint64_t v1 = v0;
  XPCObject.obj.getter();
  uint64_t v3 = v2;
  uint64_t v4 = (void *)sub_1000595F4();
  BOOL v6 = xpc_equal(v4, v5);
  swift_unknownObjectRelease(v1);
  swift_unknownObjectRelease(v3);
  return v6;
}

xpc_object_t RTCXPCDictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v5 = v3 - v4;
  __chkstk_darwin(v6);
  char v49 = (char *)&v41 - v7;
  uint64_t v8 = sub_10000534C(&qword_10008CBC8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_100035354();
  uint64_t v48 = (void *)(v10 - v11);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v47 = (uint64_t *)((char *)&v41 - v14);
  uint64_t v15 = __chkstk_darwin(v13);
  xpc_type_t v17 = (uint64_t *)((char *)&v41 - v16);
  __chkstk_darwin(v15);
  uint64_t v19 = (uint64_t *)((char *)&v41 - v18);
  xpc_object_t empty = xpc_dictionary_create_empty();
  uint64_t v20 = *(void *)(a1 + 16);
  if (v20)
  {
    uint64_t v41 = a1;
    uint64_t v42 = v5;
    uint64_t v45 = v19;
    uint64_t v46 = v8;
    uint64_t v44 = (uint64_t)v19 + *(int *)(v8 + 48);
    uint64_t v21 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v43 = *(void *)(v9 + 72);
    uint64_t v22 = (uint64_t)v49;
    do
    {
      sub_10006564C(v21, (uint64_t)v19, &qword_10008CBC8);
      uint64_t v23 = v46;
      uint64_t v24 = (uint64_t)v17 + *(int *)(v46 + 48);
      uint64_t v26 = *v19;
      uint64_t v25 = v19[1];
      *xpc_type_t v17 = v26;
      v17[1] = v25;
      sub_10003E334(v44, v24);
      uint64_t v27 = *(int *)(v23 + 48);
      unint64_t v28 = v47;
      uint64_t v29 = (uint64_t)v47 + v27;
      *uint64_t v47 = v26;
      v28[1] = v25;
      sub_10003E2A8(v24, (uint64_t)v28 + v27);
      uint64_t v30 = *(int *)(v23 + 48);
      uint64_t v31 = v48;
      uint64_t v32 = (uint64_t)v48 + v30;
      *uint64_t v48 = v26;
      v31[1] = v25;
      sub_10003E2A8(v24, (uint64_t)v31 + v30);
      sub_10003E334(v32, v22);
      uint64_t v33 = sub_10001AD20();
      sub_100065E6C();
      uint64_t v34 = v22;
      uint64_t v35 = v42;
      sub_10006564C(v34, v42, &qword_10008BFA0);
      LODWORD(v33) = _s10RTCUtility9XPCObjectOwet_0(v35, 1LL, v33);
      swift_bridgeObjectRetain();
      if ((_DWORD)v33 == 1)
      {
        sub_100065EA0();
        uint64_t v36 = 0LL;
      }

      else
      {
        XPCObject.obj.getter();
        uint64_t v36 = v37;
        sub_10001A1A4(v35);
      }

      uint64_t v38 = String.utf8CString.getter(v26, v25);
      swift_bridgeObjectRelease(v25);
      xpc_dictionary_set_value(empty, (const char *)(v38 + 32), v36);
      swift_unknownObjectRelease(v36);
      uint64_t v22 = (uint64_t)v49;
      sub_100065EA0();
      swift_release(v38);
      sub_10001A294((uint64_t)v17, &qword_10008CBC8);
      sub_10001A1A4(v29);
      v21 += v43;
      --v20;
      uint64_t v19 = v45;
    }

    while (v20);
    uint64_t v39 = v41;
  }

  else
  {
    uint64_t v39 = a1;
  }

  swift_bridgeObjectRelease(v39);
  return empty;
}

uint64_t RTCXPCDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = v8 - v7;
  uint64_t v10 = *v3;
  sub_10006564C(a1, v8 - v7, &qword_10008BFA0);
  uint64_t v11 = sub_10001AD20();
  if (_s10RTCUtility9XPCObjectOwet_0(v9, 1LL, v11) == 1)
  {
    sub_10001A294(v9, &qword_10008BFA0);
    uint64_t v12 = 0LL;
  }

  else
  {
    XPCObject.obj.getter();
    uint64_t v12 = v13;
    sub_10001A1A4(v9);
  }

  uint64_t v14 = sub_100065EAC();
  swift_bridgeObjectRelease(a3);
  xpc_dictionary_set_value(v10, (const char *)(v14 + 32), v12);
  swift_unknownObjectRelease(v12);
  sub_10001A294(a1, &qword_10008BFA0);
  return swift_release(v14);
}

uint64_t RTCXPCDictionary.keys.getter(void *a1)
{
  int64_t count = xpc_dictionary_get_count(a1);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage)
    || count > _swiftEmptyArrayStorage[3] >> 1)
  {
    sub_100004D78();
    uint64_t v3 = v4;
  }

  uint64_t v14 = v3;
  uint64_t v5 = swift_allocObject(&unk_1000862E0, 24LL, 7LL);
  *(void *)(v5 + ++*(void *)(v0 + 16) = &v14;
  uint64_t v6 = swift_allocObject(&unk_100086308, 32LL, 7LL);
  *(void *)(v6 + ++*(void *)(v0 + 16) = sub_10006569C;
  *(void *)(v6 + 24) = v5;
  aBlock[4] = sub_100034710;
  uint64_t v13 = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100051B08;
  aBlock[3] = &unk_100086320;
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v8 = v13;
  swift_retain(v6);
  swift_release(v8);
  xpc_dictionary_apply(a1, v7);
  _Block_release(v7);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v6, "", 81LL, 136LL, 40LL, 1LL);
  uint64_t result = sub_100010254();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v11 = v14;
    swift_release(v5);
    return (uint64_t)v11;
  }

  return result;
}

uint64_t sub_100065218(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = String.init(cString:)(a1);
  uint64_t v6 = v5;
  sub_100065DDC();
  uint64_t v7 = *(void *)(*a3 + 16);
  sub_100065E24(v7);
  uint64_t v8 = *a3;
  *(void *)(v8 + ++*(void *)(v0 + 16) = v7 + 1;
  uint64_t v9 = v8 + 16 * v7;
  *(void *)(v9 + 32) = v4;
  *(void *)(v9 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v6;
  return 1LL;
}

unsigned __int8 *RTCXPCDictionary.subscript.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = String.utf8CString.getter(a1, a2);
  xpc_object_t v7 = xpc_dictionary_get_value(a3, (const char *)(v6 + 32));
  sub_100010254();
  return XPCObject.init(_:)(v7, a4);
}

void (*RTCXPCDictionary.subscript.modify( void *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  xpc_object_t v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *xpc_object_t v7 = a2;
  size_t v8 = *(void *)(*(void *)(sub_10000534C(&qword_10008BFA0) - 8) + 64LL);
  v7[3] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v7[4] = v9;
  uint64_t v10 = sub_1000595F4();
  uint64_t v12 = String.utf8CString.getter(v10, v11);
  xpc_object_t v13 = sub_100065EC4(v12);
  swift_release(v12);
  XPCObject.init(_:)(v13, (uint64_t)v9);
  return sub_100065384;
}

void sub_100065384(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24LL);
  uint64_t v4 = *(void **)(*(void *)a1 + 32LL);
  if ((a2 & 1) != 0)
  {
    sub_10006564C(*(void *)(*(void *)a1 + 32LL), (uint64_t)v3, &qword_10008BFA0);
    swift_bridgeObjectRetain();
    sub_100065E88((uint64_t)v3);
    sub_10001A294((uint64_t)v4, &qword_10008BFA0);
  }

  else
  {
    swift_bridgeObjectRetain();
    sub_100065E88((uint64_t)v4);
  }

  free(v4);
  free(v3);
  free(v2);
}

Swift::Bool __swiftcall RTCXPCDictionary.contains(key:)(Swift::String key)
{
  uint64_t v4 = v3 - v2;
  uint64_t v5 = sub_100065EAC();
  xpc_object_t v6 = sub_100065EC4(v5);
  sub_100010254();
  XPCObject.init(_:)(v6, v4);
  uint64_t v7 = sub_10001AD20();
  LOBYTE(v6) = _s10RTCUtility9XPCObjectOwet_0(v4, 1LL, v7) != 1;
  sub_10001A294(v4, &qword_10008BFA0);
  return (char)v6;
}

xpc_object_t sub_1000654DC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t result = RTCXPCDictionary.init(dictionaryLiteral:)(a1);
  *a2 = result;
  return result;
}

xpc_object_t sub_100065500(uint64_t a1, uint64_t a2)
{
  uint64_t bytes = a1;
  __int16 v4 = a2;
  char v5 = BYTE2(a2);
  char v6 = BYTE3(a2);
  char v7 = BYTE4(a2);
  char v8 = BYTE5(a2);
  return xpc_data_create(&bytes, BYTE6(a2));
}

char *sub_1000655C8(uint64_t a1, uint64_t a2)
{
  xpc_object_t result = (char *)__DataStorage._bytes.getter();
  char v5 = result;
  if (result)
  {
    xpc_object_t result = (char *)__DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v5 += a1 - (void)result;
  }

  BOOL v6 = __OFSUB__(a2, a1);
  uint64_t v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v8 = __DataStorage._length.getter();
  if (v8 >= v7) {
    size_t v9 = v7;
  }
  else {
    size_t v9 = v8;
  }
  if (v5) {
    size_t v10 = v9;
  }
  else {
    size_t v10 = 0LL;
  }
  return (char *)xpc_data_create(v5, v10);
}

uint64_t sub_10006564C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000534C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100065690()
{
  return sub_1000352F0(v0, 24LL);
}

uint64_t sub_10006569C(uint64_t a1, uint64_t a2)
{
  return sub_100065218(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_1000656A4()
{
  return sub_1000352F0(v0, 32LL);
}

uint64_t sub_1000656B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000656C0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t *initializeBufferWithCopyOfBuffer for XPCObject(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v12);
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v8 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v8);
        size_t v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 0LL;
        goto LABEL_13;
      case 1u:
        uint64_t v13 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v13);
        size_t v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 1LL;
        goto LABEL_13;
      case 7u:
        uint64_t v15 = *a2;
        unint64_t v14 = a2[1];
        sub_10000D8FC(v15, v14);
        *a1 = v15;
        a1[1] = v14;
        size_t v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 7LL;
        goto LABEL_13;
      case 8u:
        uint64_t v16 = a2[1];
        *a1 = *a2;
        a1[1] = v16;
        swift_bridgeObjectRetain();
        size_t v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 8LL;
        goto LABEL_13;
      case 9u:
        uint64_t v17 = type metadata accessor for UUID(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v17 - 8) + 16LL))(a1, a2, v17);
        size_t v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 9LL;
        goto LABEL_13;
      case 0xAu:
        uint64_t v18 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v18);
        size_t v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 10LL;
        goto LABEL_13;
      case 0xBu:
        uint64_t v19 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v19);
        size_t v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 11LL;
        goto LABEL_13;
      case 0xCu:
        uint64_t v20 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v20);
        size_t v9 = a1;
        uint64_t v10 = a3;
        uint64_t v11 = 12LL;
LABEL_13:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

uint64_t destroy for XPCObject(uint64_t *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 1:
    case 10:
    case 11:
    case 12:
      uint64_t result = swift_unknownObjectRelease(*a1);
      break;
    case 7:
      uint64_t result = sub_100004C44(*a1, a1[1]);
      break;
    case 8:
      uint64_t result = swift_bridgeObjectRelease(a1[1]);
      break;
    case 9:
      uint64_t v4 = type metadata accessor for UUID(0LL);
      uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t *initializeWithCopy for XPCObject(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      uint64_t v6 = *a2;
      *a1 = *a2;
      swift_unknownObjectRetain(v6);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 0LL;
      goto LABEL_11;
    case 1u:
      uint64_t v10 = *a2;
      *a1 = *a2;
      swift_unknownObjectRetain(v10);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 1LL;
      goto LABEL_11;
    case 7u:
      uint64_t v12 = *a2;
      unint64_t v11 = a2[1];
      sub_10000D8FC(v12, v11);
      *a1 = v12;
      a1[1] = v11;
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 7LL;
      goto LABEL_11;
    case 8u:
      uint64_t v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      swift_bridgeObjectRetain();
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 8LL;
      goto LABEL_11;
    case 9u:
      uint64_t v14 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16LL))(a1, a2, v14);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 9LL;
      goto LABEL_11;
    case 0xAu:
      uint64_t v15 = *a2;
      *a1 = *a2;
      swift_unknownObjectRetain(v15);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 10LL;
      goto LABEL_11;
    case 0xBu:
      uint64_t v16 = *a2;
      *a1 = *a2;
      swift_unknownObjectRetain(v16);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 11LL;
      goto LABEL_11;
    case 0xCu:
      uint64_t v17 = *a2;
      *a1 = *a2;
      swift_unknownObjectRetain(v17);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 12LL;
LABEL_11:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

uint64_t *assignWithCopy for XPCObject(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10001A1A4((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v6 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v6);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 0LL;
        goto LABEL_12;
      case 1u:
        uint64_t v10 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v10);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 1LL;
        goto LABEL_12;
      case 7u:
        uint64_t v12 = *a2;
        unint64_t v11 = a2[1];
        sub_10000D8FC(v12, v11);
        *a1 = v12;
        a1[1] = v11;
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 7LL;
        goto LABEL_12;
      case 8u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 8LL;
        goto LABEL_12;
      case 9u:
        uint64_t v13 = type metadata accessor for UUID(0LL);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 9LL;
        goto LABEL_12;
      case 0xAu:
        uint64_t v14 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v14);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 10LL;
        goto LABEL_12;
      case 0xBu:
        uint64_t v15 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v15);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 11LL;
        goto LABEL_12;
      case 0xCu:
        uint64_t v16 = *a2;
        *a1 = *a2;
        swift_unknownObjectRetain(v16);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 12LL;
LABEL_12:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

void *initializeWithTake for XPCObject(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 9)
  {
    uint64_t v6 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 9LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *assignWithTake for XPCObject(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10001A1A4((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 9)
    {
      uint64_t v6 = type metadata accessor for UUID(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 9LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_100065D24(uint64_t a1)
{
  v4[0] = "\b";
  v4[1] = "\b";
  void v4[2] = &unk_10006C9C8;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[7] = &unk_10006C9E0;
  void v4[8] = &unk_10006C9F8;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    void v4[9] = *(void *)(result - 8) + 64LL;
    v4[10] = "\b";
    void v4[11] = "\b";
    v4[12] = "\b";
    swift_initEnumMetadataMultiPayload(a1, 256LL, 13LL, v4);
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for RTCXPCDictionary()
{
  return &type metadata for RTCXPCDictionary;
}

void sub_100065DDC()
{
  uint64_t v1 = *v0;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
  void *v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100004D78();
    void *v0 = v3;
  }

void sub_100065E24(uint64_t a1)
{
  if (a1 + 1 > *(void *)(*(void *)v1 + 24LL) >> 1)
  {
    sub_100004D78();
    *(void *)uint64_t v1 = v2;
  }

uint64_t sub_100065E60()
{
  return swift_unknownObjectRelease_n(v0, 2LL);
}

uint64_t sub_100065E6C()
{
  return _s10RTCUtility9XPCObjectOwst_0(v1, 0LL, 1LL, v0);
}

uint64_t sub_100065E80()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_100065E88(uint64_t a1)
{
  return RTCXPCDictionary.subscript.setter(a1, v2, v1);
}

char *sub_100065E94(uint64_t a1, uint64_t a2)
{
  return sub_1000655C8(a1, a2);
}

uint64_t sub_100065EA0()
{
  return sub_10001A294(v0, v1);
}

uint64_t sub_100065EAC()
{
  return String.utf8CString.getter(v1, v0);
}

uint64_t sub_100065EB8()
{
  return sub_100004C44(v1, v0);
}

xpc_object_t sub_100065EC4(uint64_t a1)
{
  return xpc_dictionary_get_value(v1, (const char *)(a1 + 32));
}

const char *MessageKeys.clientName.unsafeMutableAddressor()
{
  return "cn";
}

void static MessageKeys.clientName.getter()
{
}

void *MessageKeys.serviceName.unsafeMutableAddressor()
{
  return &static MessageKeys.serviceName;
}

void static MessageKeys.serviceName.getter()
{
}

void *MessageKeys.clientType.unsafeMutableAddressor()
{
  return &static MessageKeys.clientType;
}

void static MessageKeys.clientType.getter()
{
}

void *MessageKeys.legacyClient.unsafeMutableAddressor()
{
  return &static MessageKeys.legacyClient;
}

void static MessageKeys.legacyClient.getter()
{
}

void *MessageKeys.payload.unsafeMutableAddressor()
{
  return &static MessageKeys.payload;
}

void static MessageKeys.payload.getter()
{
}

void *MessageKeys.sessionID.unsafeMutableAddressor()
{
  return &static MessageKeys.sessionID;
}

void static MessageKeys.sessionID.getter()
{
}

void *MessageKeys.realtime.unsafeMutableAddressor()
{
  return &static MessageKeys.realtime;
}

void static MessageKeys.realtime.getter()
{
}

const char *MessageKeys.hierarchyLevel.unsafeMutableAddressor()
{
  return "hlvl";
}

void static MessageKeys.hierarchyLevel.getter()
{
}

const char *MessageKeys.hierarchyToken.unsafeMutableAddressor()
{
  return "hktn";
}

void static MessageKeys.hierarchyToken.getter()
{
}

const char *MessageKeys.samplingUUID.unsafeMutableAddressor()
{
  return "suuid";
}

uint64_t static MessageKeys.samplingUUID.getter()
{
  return 0x6469757573LL;
}

const char *MessageKeys.eager.unsafeMutableAddressor()
{
  return "eager";
}

uint64_t static MessageKeys.eager.getter()
{
  return 0x7265676165LL;
}

const char *MessageKeys.allowed.unsafeMutableAddressor()
{
  return "allowed";
}

uint64_t static MessageKeys.allowed.getter()
{
  return 0x6465776F6C6C61LL;
}

const char *MessageKeys.denied.unsafeMutableAddressor()
{
  return "denied";
}

uint64_t static MessageKeys.denied.getter()
{
  return 0x6465696E6564LL;
}

const char *MessageKeys.overrideSampling.unsafeMutableAddressor()
{
  return "orsf";
}

void static MessageKeys.overrideSampling.getter()
{
}

ValueMetadata *type metadata accessor for MessageKeys()
{
  return &type metadata for MessageKeys;
}

  ;
}

  ;
}

uint64_t XPCError.errorDescription.getter(void *a1)
{
  string = xpc_dictionary_get_string(a1, "XPCErrorDescription");
  if (string) {
    return String.init(cString:)(string);
  }
  else {
    return sub_100066CF8();
  }
}

uint64_t sub_100066074()
{
  return XPCError.errorDescription.getter(*v0);
}

uint64_t XPCIncomingConnection.auditToken.getter(uint64_t a1)
{
  return *(void *)&v2[0];
}

unsigned __int8 *XPCIncomingConnection.entitlementValue(forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = String.utf8CString.getter(a1, a2);
  uint64_t v7 = (void *)xpc_connection_copy_entitlement_value(a3, v6 + 32);
  swift_release(v6);
  return XPCObject.init(_:)(v7, a4);
}

void XPCIncomingConnection.makeConnection(targetQ:delegate:)( void *a1, uint64_t a2, uint64_t a3, _xpc_connection_s *a4)
{
  uint64_t v8 = type metadata accessor for XPCConnection();
  sub_10004D5F8(v8);
  sub_10001AB30();
  swift_unknownObjectRetain(a4);
  XPCConnection.init(conn:targetQ:delegate:)(a4, a1, a2, a3);
  sub_100006AB8();
}

void XPCConnection.__allocating_init(conn:targetQ:delegate:)( _xpc_connection_s *a1, void *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t type metadata accessor for XPCConnection()
{
  return objc_opt_self(&OBJC_CLASS____TtC10RTCUtility13XPCConnection);
}

uint64_t XPCConnection.conn.getter()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 16));
}

uint64_t XPCConnection.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong(v0 + 24);
}

uint64_t XPCConnection.delegate.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a2;
  swift_unknownObjectWeakAssign(v2 + 24, a1);
  return sub_10001AB20();
}

void (*XPCConnection.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess(v1 + 24, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  v3[3] = Strong;
  v3[4] = v5;
  return sub_100066308;
}

void sub_100066308(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v5 = *(void *)(*(void *)a1 + 40LL);
  *(void *)(v5 + 32) = *(void *)(*(void *)a1 + 32LL);
  swift_unknownObjectWeakAssign(v5 + 24, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }

  free(v3);
}

uint64_t XPCConnection.__allocating_init(machService:targetQ:listen:delegate:)( uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = sub_10004D5F8(v6);
  XPCConnection.init(machService:targetQ:listen:delegate:)(a1, a2, a3, a4, a5, a6);
  return v13;
}

void *XPCConnection.init(machService:targetQ:listen:delegate:)( uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  v6[4] = 0LL;
  swift_unknownObjectWeakInit(v6 + 3, 0LL);
  if ((a4 & 1) != 0) {
    uint64_t v13 = 1LL;
  }
  else {
    uint64_t v13 = 2LL;
  }
  uint64_t v14 = String.utf8CString.getter(a1, a2);
  uint64_t v15 = a3;
  swift_bridgeObjectRelease(a2);
  mach_service = xpc_connection_create_mach_service((const char *)(v14 + 32), v15, v13);

  swift_release(v14);
  sub_100066CEC((uint64_t)(v6 + 3), (uint64_t)v23);
  v6[4] = a6;
  swift_unknownObjectWeakAssign(v6 + 3, a5);
  _OWORD v6[2] = mach_service;
  v6[5] = v15;
  uint64_t v17 = v15;
  uint64_t v18 = (_xpc_connection_s *)sub_10001AB30();
  xpc_connection_set_target_queue(v18, v17);
  sub_100066D30((uint64_t)sub_10003CD8C, v20, (char)_NSConcreteStackBlock, 1107296256LL, v21, v22);
  sub_100066D14();
  swift_release(a2);
  sub_100066D24();
  _Block_release(v15);
  xpc_connection_activate(mach_service);
  sub_10001AB20();

  sub_10005C3F8();
  return v6;
}

uint64_t sub_10006653C(void *a1)
{
  uint64_t result = swift_unknownObjectWeakLoadStrong(v1 + 24);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(v1 + 32);
    xpc_type_t type = xpc_get_type(a1);
    uint64_t ObjectType = swift_getObjectType(v4);
    uint64_t v8 = 16LL;
    if (type == (xpc_type_t)&_xpc_type_error) {
      uint64_t v8 = 8LL;
    }
    (*(void (**)(void *, uint64_t, uint64_t))(v5 + v8))(a1, ObjectType, v5);
    return swift_unknownObjectRelease(v4);
  }

  return result;
}

void *XPCConnection.init(conn:targetQ:delegate:)(_xpc_connection_s *a1, void *a2, uint64_t a3, uint64_t a4)
{
  v4[4] = 0LL;
  uint64_t v9 = swift_unknownObjectWeakInit(v4 + 3, 0LL);
  void v4[2] = a1;
  sub_100066CEC(v9, (uint64_t)v15);
  v4[4] = a4;
  swift_unknownObjectWeakAssign(v4 + 3, a3);
  void v4[5] = a2;
  sub_10001AB30();
  uint64_t v10 = a2;
  xpc_connection_set_target_queue(a1, v10);
  sub_100066D30((uint64_t)sub_10003CD8C, v12, (char)_NSConcreteStackBlock, 1107296256LL, v13, v14);
  sub_100066D14();
  swift_release(v4 + 3);
  sub_100066D24();
  _Block_release(a2);
  xpc_connection_activate(a1);
  sub_10001AB20();

  sub_10005C3F8();
  return v4;
}

uint64_t sub_1000666E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000666F0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void XPCConnection.send(_:)(xpc_object_t message)
{
}

uint64_t XPCConnection.sendWithReply(_:)(uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 64) = a2;
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = v2;
  return swift_task_switch(sub_100066740, 0LL, 0LL);
}

uint64_t sub_100066740()
{
  char v1 = *(_BYTE *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 40);
  uint64_t v6 = swift_task_alloc(48LL);
  *(void *)(v0 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v6;
  *(void *)(v6 + ++*(void *)(v0 + 16) = v4;
  *(void *)(v6 + 24) = v3;
  *(_BYTE *)(v6 + 32) = v1;
  *(void *)(v6 + 4sub_100023D2C(*(void *)(v0 + 16), *(void *)(v0 + 24), 0) = v5;
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 4sub_100005F54(v0 + 8) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100066804;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0xD000000000000011LL,  0x800000010006F760LL,  sub_100066A04,  v6,  &type metadata for RTCXPCDictionary);
}

uint64_t sub_100066804()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 48);
  *(void *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_10006687C;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 40));
    uint64_t v4 = sub_100066870;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100066870()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_10006687C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000668B0(uint64_t a1, _xpc_connection_s *a2, void *a3, uint64_t a4, dispatch_queue_s *a5)
{
  uint64_t v9 = sub_10000534C(&qword_10008CD48);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))( (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v9);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 16) & ~v12;
  uint64_t v14 = swift_allocObject(&unk_100086470, v13 + v11, v12 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))( v14 + v13,  (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v9);
  aBlock[4] = sub_100066C98;
  uint64_t v19 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10003CD8C;
  aBlock[3] = &unk_100086488;
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = v19;
  swift_unknownObjectRetain(a3);
  swift_release(v16);
  xpc_connection_send_message_with_reply(a2, a3, a5, v15);
  _Block_release(v15);
  return swift_unknownObjectRelease(a3);
}

uint64_t sub_100066A04(uint64_t a1)
{
  return sub_1000668B0( a1,  *(_xpc_connection_s **)(v1 + 16),  *(void **)(v1 + 24),  *(unsigned __int8 *)(v1 + 32),  *(dispatch_queue_s **)(v1 + 40));
}

uint64_t sub_100066A14(void *a1)
{
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_error)
  {
    unint64_t v4 = sub_100066BD8();
    uint64_t v5 = swift_allocError(&type metadata for XPCError, v4, 0LL, 0LL);
    *uint64_t v6 = a1;
    uint64_t v8 = v5;
    swift_unknownObjectRetain(a1);
    uint64_t v7 = sub_10000534C(&qword_10008CD48);
    return CheckedContinuation.resume(throwing:)(&v8, v7);
  }

  else
  {
    uint64_t v8 = (uint64_t)a1;
    swift_unknownObjectRetain(a1);
    uint64_t v2 = sub_10000534C(&qword_10008CD48);
    return CheckedContinuation.resume(returning:)(&v8, v2);
  }

Swift::Bool __swiftcall OS_xpc_object.isError()()
{
  return xpc_get_type(v0) == (xpc_type_t)&_xpc_type_error;
}

uint64_t XPCConnection.auditToken.getter()
{
  return *(void *)&v2[0];
}

uint64_t XPCConnection.remoteUID.getter()
{
  return xpc_connection_get_euid(*(xpc_connection_t *)(v0 + 16));
}

uint64_t XPCConnection.deinit()
{
  return v0;
}

uint64_t XPCConnection.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

Swift::OpaquePointer __swiftcall OS_xpc_object.type()()
{
  return (Swift::OpaquePointer)xpc_get_type(v0);
}

uint64_t sub_100066BB0(uint64_t a1)
{
  return a1;
}

unint64_t sub_100066BD8()
{
  unint64_t result = qword_10008CC88;
  if (!qword_10008CC88)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for XPCError, &type metadata for XPCError);
    atomic_store(result, (unint64_t *)&qword_10008CC88);
  }

  return result;
}

ValueMetadata *type metadata accessor for XPCError()
{
  return &type metadata for XPCError;
}

ValueMetadata *type metadata accessor for XPCIncomingConnection()
{
  return &type metadata for XPCIncomingConnection;
}

uint64_t sub_100066C34()
{
  uint64_t v1 = sub_10000534C(&qword_10008CD48);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100066C98(void *a1)
{
  return sub_100066A14(a1);
}

uint64_t sub_100066CEC(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 1LL, 0LL);
}

uint64_t sub_100066CF8()
{
  return 0x64696C61766E693CLL;
}

uint64_t sub_100066D14()
{
  return swift_retain(v0);
}

void sub_100066D24()
{
}

void *sub_100066D30@<X0>(uint64_t a1@<X8>, uint64_t a2, char aBlock, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a5 = a1;
  a6 = v6;
  return _Block_copy(&aBlock);
}

void getTimeIntervalSince1970(Date:)()
{
  double v0 = Date.timeIntervalSince1970.getter();
  if (v0 >= 0.0 && (*(void *)&v0 & 0x7FF0000000000000LL) != 0x7FF0000000000000LL)
  {
    if (v0 <= -9.22337204e18)
    {
      __break(1u);
    }

    else if (v0 < 9.22337204e18)
    {
      return;
    }

    __break(1u);
  }

RTCUtility::XPCMessage::MessageType_optional __swiftcall XPCMessage.MessageType.init(rawValue:)(Swift::Int64 rawValue)
{
  return (RTCUtility::XPCMessage::MessageType_optional)rawValue;
}

Swift::Int sub_100066DB8()
{
  return sub_100066DC0(*v0);
}

Swift::Int sub_100066DC0(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

void sub_100066E04(uint64_t a1)
{
}

void sub_100066E0C(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int sub_100066E30(uint64_t a1)
{
  return sub_100066E38(a1, *v1);
}

Swift::Int sub_100066E38(uint64_t a1, unsigned __int8 a2)
{
  return Hasher._finalize()();
}

RTCUtility::XPCMessage::MessageType_optional sub_100066E78@<W0>( Swift::Int64 *a1@<X0>, RTCUtility::XPCMessage::MessageType_optional *a2@<X8>)
{
  result.BOOL value = XPCMessage.MessageType.init(rawValue:)(*a1).value;
  a2->BOOL value = result.value;
  return result;
}

uint64_t XPCMessage.ty.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *XPCMessage.init(ty:payload:)(unsigned __int8 a1, void *a2)
{
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v15 - v8;
  swift_unknownObjectRetain(a2);
  xpc_object_t v10 = xpc_int64_create(a1);
  XPCObject.init(_:)(v10, (uint64_t)v9);
  sub_10001A364((uint64_t)v9, (uint64_t)v7);
  uint64_t v11 = sub_10001AD20();
  if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v7, 1LL, v11) == 1)
  {
    sub_10005C2A4((uint64_t)v7);
    uint64_t v12 = 0LL;
  }

  else
  {
    XPCObject.obj.getter();
    uint64_t v12 = v13;
    sub_10001A1A4((uint64_t)v7);
  }

  xpc_dictionary_set_value(a2, "type", v12);
  swift_unknownObjectRelease(v12);
  sub_10005C2A4((uint64_t)v9);
  swift_unknownObjectRelease(a2);
  return a2;
}

uint64_t XPCMessage.init(fromXPC:)(uint64_t a1)
{
  uint64_t v5 = (Swift::Int64 *)(v4 - v3);
  swift_getObjectType(a1);
  if (OS_xpc_object.type()()._rawValue == &_xpc_type_dictionary)
  {
    uint64_t v6 = (void *)swift_unknownObjectRetain(a1);
    id v7 = xpc_dictionary_get_value(v6, "type");
    XPCObject.init(_:)(v7, (uint64_t)v5);
    sub_10001AB80();
    uint64_t v8 = sub_10001AD20();
    if (_s10RTCUtility9XPCObjectOwet_0((uint64_t)v5, 1LL, v8) == 1)
    {
      sub_10001AB80();
      sub_10005C2A4((uint64_t)v5);
      return 0LL;
    }

    if (swift_getEnumCaseMultiPayload(v5, v8) != 3)
    {
      sub_10001AB80();
      sub_10001A1A4((uint64_t)v5);
      return 0LL;
    }

    if (XPCMessage.MessageType.init(rawValue:)(*v5).value != RTCUtility_XPCMessage_MessageType_unknownDefault) {
      return a1;
    }
  }

  sub_10001AB80();
  return 0LL;
}

uint64_t XPCMessage.description.getter(void *a1, char a2)
{
  uint64_t v46 = sub_10001AD20();
  __chkstk_darwin(v46);
  sub_100006B64();
  uint64_t isUniquelyReferenced_nonNull_native = v5 - v4;
  sub_10000534C(&qword_10008BFA0);
  sub_100006B54();
  __chkstk_darwin(v7);
  sub_100006B64();
  uint64_t v10 = v9 - v8;
  v48[0] = 0LL;
  v48[1] = 0xE000000000000000LL;
  LOBYTE(v47) = a2;
  _print_unlocked<A, B>(_:_:)( &v47,  v48,  &type metadata for XPCMessage.MessageType,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v11._uint64_t countAndFlagsBits = 2683LL;
  v11._object = (void *)0xE200000000000000LL;
  String.append(_:)(v11);
  uint64_t v45 = a1;
  uint64_t v12 = RTCXPCDictionary.keys.getter(a1);
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v43 = v12;
  if (v13)
  {
    uint64_t v14 = (void *)(v12 + 40);
    uint64_t v15 = &_swiftEmptyDictionarySingleton;
    uint64_t v44 = v10;
    while (1)
    {
      uint64_t v17 = *(v14 - 1);
      uint64_t v16 = *v14;
      uint64_t v18 = String.utf8CString.getter(v17, *v14);
      swift_bridgeObjectRetain();
      xpc_object_t v19 = xpc_dictionary_get_value(v45, (const char *)(v18 + 32));
      swift_release(v18);
      XPCObject.init(_:)(v19, v10);
      sub_10003E334(v10, isUniquelyReferenced_nonNull_native);
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
      uint64_t v47 = v15;
      unint64_t v20 = sub_100067720();
      uint64_t v22 = v15[2];
      BOOL v23 = (v21 & 1) == 0;
      Swift::Int v24 = v22 + v23;
      if (__OFADD__(v22, v23))
      {
        __break(1u);
LABEL_17:
        __break(1u);
        break;
      }

      unint64_t v25 = v20;
      char v26 = v21;
      sub_10000534C(&qword_10008CD50);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v24))
      {
        unint64_t v27 = sub_100067720();
        if ((v26 & 1) != (v28 & 1)) {
          goto LABEL_19;
        }
        unint64_t v25 = v27;
      }

      uint64_t v15 = v47;
      if ((v26 & 1) != 0)
      {
        uint64_t v29 = sub_100067704();
        sub_1000673D4(v29, v30);
      }

      else
      {
        v47[(v25 >> 6) + 8] |= 1LL << v25;
        uint64_t v31 = (void *)(v15[6] + 16 * v25);
        *uint64_t v31 = v17;
        v31[1] = v16;
        uint64_t v32 = sub_100067704();
        sub_10003E334(v32, v33);
        uint64_t v34 = v15[2];
        BOOL v35 = __OFADD__(v34, 1LL);
        uint64_t v36 = v34 + 1;
        if (v35) {
          goto LABEL_17;
        }
        v15[2] = v36;
        swift_bridgeObjectRetain();
      }

      v14 += 2;
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(0x8000000000000000LL);
      --v13;
      uint64_t v10 = v44;
      if (!v13) {
        goto LABEL_15;
      }
    }

    __break(1u);
LABEL_19:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
  }

  else
  {
    uint64_t v15 = &_swiftEmptyDictionarySingleton;
LABEL_15:
    swift_bridgeObjectRelease(v43);
    uint64_t v37 = Dictionary.description.getter(v15, &type metadata for String, v46, &protocol witness table for String);
    uint64_t v39 = v38;
    swift_bridgeObjectRelease(v15);
    v40._uint64_t countAndFlagsBits = v37;
    v40._object = v39;
    String.append(_:)(v40);
    swift_bridgeObjectRelease(v39);
    v41._uint64_t countAndFlagsBits = 125LL;
    v41._object = (void *)0xE100000000000000LL;
    String.append(_:)(v41);
    return v48[0];
  }

  return result;
}

uint64_t sub_1000673C8()
{
  return XPCMessage.description.getter(*(void **)v0, *(_BYTE *)(v0 + 8));
}

uint64_t sub_1000673D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for XPCObject(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10006741C()
{
  unint64_t result = qword_10008CD58;
  if (!qword_10008CD58)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for XPCMessage.MessageType,  &type metadata for XPCMessage.MessageType);
    atomic_store(result, (unint64_t *)&qword_10008CD58);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for XPCMessage(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(_BYTE *)(a1 + sub_100005F54(v0 + 8) = *((_BYTE *)a2 + 8);
  swift_unknownObjectRetain(v3);
  return a1;
}

uint64_t destroy for XPCMessage(void *a1)
{
  return swift_unknownObjectRelease(*a1);
}

uint64_t *assignWithCopy for XPCMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v5);
  *((_BYTE *)a1 + sub_100005F54(v0 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t *assignWithTake for XPCMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_unknownObjectRelease(v4);
  *((_BYTE *)a1 + sub_100005F54(v0 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCMessage(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 9))
    {
      LODWORD(xpc_connection_get_audit_token(*(void *)(v0 + 16), v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(xpc_connection_get_audit_token(*(void *)(v0 + 16), v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + sub_100005F54(v0 + 8) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for XPCMessage()
{
  return &type metadata for XPCMessage;
}

uint64_t getEnumTagSinglePayload for XPCMessage.MessageType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for XPCMessage.MessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(sub_10001531C(v2, v4) = 1;
  }
  else {
    LODWORD(sub_10001531C(v2, v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100067680 + 4 * byte_10006CC4D[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000676B4 + 4 * byte_10006CC48[v4]))();
}

uint64_t sub_1000676B4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000676BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000676C4LL);
  }
  return result;
}

uint64_t sub_1000676D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000676D8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1000676DC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000676E4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCMessage.MessageType()
{
  return &type metadata for XPCMessage.MessageType;
}

uint64_t sub_100067704()
{
  return v0;
}

unint64_t sub_100067720()
{
  return sub_100033A58(v1, v0);
}