uint64_t Init_NVMeCTL()
{
  if (&_NewNVMeCTLFirst) {
    return NewNVMeCTLFirst();
  }
  else {
    return 0LL;
  }
}

uint64_t Free_NVMeCTL()
{
  if (&_DeleteNVMeCTL) {
    return DeleteNVMeCTL();
  }
  return result;
}

uint64_t Do_NVMeCTL_WL_Sweep(uint64_t a1, __int128 *a2, const void *a3, uint64_t a4, const char *a5)
{
  if (!&_NVMeCTLGetANS2Sweep) {
    return 7LL;
  }
  statvfs("/", &v20);
  unint64_t v11 = v20.f_bsize * v20.f_bfree;
  if (!(v11 >> 25))
  {
    fprintf(__stderrp, "Not enough disk space: Req %llu, Free %llu\n", 0x2000000LL, v20.f_bsize * v20.f_bfree);
    return 5LL;
  }

  v12 = fopen(a5, "w");
  if (!v12)
  {
    fprintf(__stderrp, "Error opening file - %s\n", a5);
    return 7LL;
  }

  v13 = v12;
  __int128 v14 = a2[1];
  __int128 v21 = *a2;
  v22[0] = v14;
  *(_OWORD *)((char *)v22 + 12) = *(__int128 *)((char *)a2 + 28);
  NVMeCTLGetANS2Sweep(&v16, a1, &v21, a3, a4);
  if (v18 || v17 || !(_DWORD)__size)
  {
    fprintf(__stderrp, "Error performing sweep on channel %d, die %d \n", *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 2));
    fprintf(__stderrp, "plane %d, block %d, wl %d\n", *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 4), *((_DWORD *)a2 + 5));
    uint64_t v5 = 2LL;
  }

  else if (fwrite(a3, __size, 1uLL, v13))
  {
    uint64_t v5 = 0LL;
  }

  else
  {
    fprintf(__stderrp, "Could not write sweep data into file. Free Space %llu\n", v11);
    uint64_t v5 = 5LL;
  }

  fclose(v13);
  return v5;
}

uint64_t Send_ASF_Tunnel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!&_NVMeCTLTunnel) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v10 = v5;
  uint64_t v11 = v6;
  NVMeCTLTunnel(&v8, a1, 1LL, a2, a3, a4, a5);
  return v9;
}

void sub_100003B78(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4 = objc_autoreleasePoolPush();
  uint64_t v5 = (objc_class *)objc_opt_class(*(void *)(a1 + 32));
  uint64_t v6 = NSStringFromClass(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = -[ASPCarryLog_XpcActivityMgr initWithXpcActivity:]( objc_alloc(&OBJC_CLASS___ASPCarryLog_XpcActivityMgr),  "initWithXpcActivity:",  v3);
  if (*(_BYTE *)(a1 + 40)) {
    unsigned int v9 = -[ASPCarryLog_PersistentStateMgr initWithIdentifier:]( objc_alloc(&OBJC_CLASS___ASPCarryLog_PersistentStateMgr),  "initWithIdentifier:",  v7);
  }
  else {
    unsigned int v9 = 0LL;
  }
  uint64_t v10 = objc_alloc_init(&OBJC_CLASS___NANDTelemetry_PrivacyMgr);
  id v11 = [objc_alloc(*(Class *)(a1 + 32)) initWithXpcActivityMgr:v8 persistentStateMgr:v9 privacyMgr:v10];
  v12 = v11;
  if (v11)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue([v11 privacyMgr]);
    unsigned int v14 = [v13 allowTelemetry];

    if (v14)
    {
      v15 = (void *)oslog;
      if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT))
      {
        id v16 = v7;
        int v17 = v15;
        int v27 = 136315138;
        id v28 = [v16 UTF8String];
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%s activity starts...",  (uint8_t *)&v27,  0xCu);
      }

      [v12 runActivity];
      unsigned int v18 = -[ASPCarryLog_XpcActivityMgr isActivityDeferred](v8, "isActivityDeferred");
      v19 = (void *)oslog;
      BOOL v20 = os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT);
      if (v18)
      {
        if (v20)
        {
          id v21 = v7;
          v22 = v19;
          id v23 = [v21 UTF8String];
          int v27 = 136315138;
          id v28 = v23;
          v24 = "%s activity deferred...";
LABEL_14:
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v24, (uint8_t *)&v27, 0xCu);
        }
      }

      else if (v20)
      {
        id v25 = v7;
        v22 = v19;
        id v26 = [v25 UTF8String];
        int v27 = 136315138;
        id v28 = v26;
        v24 = "%s activity complete.";
        goto LABEL_14;
      }
    }

    else
    {
      [v12 cleanUpForTelemetryDisable];
    }
  }

  objc_autoreleasePoolPop(v4);
}

void checkInNandTelemetry_nandActivities(void *a1)
{
  id v3 = a1;
  +[NANDTelemetry_Base registerActivityWithIdentifier:XpcCriteria:ActivityQ:PersistentState:]( &OBJC_CLASS___NANDTelemetry_NandCoreAnalyticsDaily,  "registerActivityWithIdentifier:XpcCriteria:ActivityQ:PersistentState:",  "com.apple.nand.nandtelemetry_cadaily",  0LL);
  if (os_variant_has_internal_content("com.apple.ASPCarryLog", v1))
  {
    xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
    +[NANDTelemetry_NandGBBSweepDaily setGBBXpcCritiria:]( &OBJC_CLASS___NANDTelemetry_NandGBBSweepDaily,  "setGBBXpcCritiria:",  v2);
    +[NANDTelemetry_Base registerActivityWithIdentifier:XpcCriteria:ActivityQ:PersistentState:]( &OBJC_CLASS___NANDTelemetry_NandGBBSweepDaily,  "registerActivityWithIdentifier:XpcCriteria:ActivityQ:PersistentState:",  "com.apple.nand.automaticgbbsweep",  v2,  v3,  1LL);
  }
}

id checkInNandTelemetry_nonNandActivities(uint64_t a1)
{
  return +[NANDTelemetry_Base registerActivityWithIdentifier:XpcCriteria:ActivityQ:PersistentState:]( &OBJC_CLASS___NANDTelemetry_PerAppDiskSpaceDaily,  "registerActivityWithIdentifier:XpcCriteria:ActivityQ:PersistentState:",  "com.apple.nand.nandtelemetry_appspace",  0LL,  a1,  1LL);
}

uint64_t iolog_hwlogger_to_legacy_format_conversion(FILE *a1, FILE *a2, int a3)
{
  uint64_t v6 = malloc(0x8000uLL);
  v7 = malloc(0x80000uLL);
  v29 = v7;
  if (!v7)
  {
    uint64_t v22 = 0LL;
    if (!v6) {
      return v22;
    }
    goto LABEL_41;
  }

  uint64_t v8 = v7;
  bzero(v7, 0x80000uLL);
  uint64_t v27 = 0LL;
  memset(v26, 0, sizeof(v26));
  memset_pattern16(&v28, &unk_100085140, 0x400uLL);
  if (v6)
  {
    if (fread(&v24, 0x10uLL, 1uLL, a2) == 1 && (v24 & 0x3FFFF) == 0x5E)
    {
      if (a3) {
        uint64_t v25 = 245LL;
      }
      fwrite(&v24, 0x10uLL, 1uLL, a1);
      size_t v9 = fread(v6, 0x10uLL, 0x800uLL, a2);
      if (v9)
      {
        size_t v10 = v9;
        while (1)
        {
          id v11 = (uint64_t *)v6;
          do
          {
            uint64_t v12 = *v11;
            if (*v11 != 0xDEADBEEFDEADBEEFLL && v12 != 0)
            {
              unsigned int v14 = v12 >> 27;
              if (v12 >> 27 == 3)
              {
                if ((v12 & 0xFF00000000LL) != 0xD00000000LL) {
                  goto LABEL_23;
                }
                unsigned int v15 = BYTE5(v12);
                uint64_t v16 = *v11 & 0x7FFFFFF;
              }

              else
              {
                if (v14 != 2)
                {
                  if (v14 != 1) {
                    goto LABEL_15;
                  }
LABEL_23:
                  sub_1000042F4((unsigned int *)v26, (uint64_t)v11, a1);
                  goto LABEL_15;
                }

                unsigned int v15 = BYTE4(v12);
                LODWORD(v16) = v12 & 0x7FFFFFF;
              }

              sub_1000045D0((uint64_t)v26, v15, v16, a1);
            }

LABEL_15:
            v11 += 2;
            --v10;
          }

          while (v10);
          size_t v17 = fread(v6, 0x10uLL, 0x800uLL, a2);
          size_t v10 = v17;
          if (!v17)
          {
            uint64_t v8 = v29;
            break;
          }
        }
      }

      for (uint64_t i = 72LL; i != 1096; i += 4LL)
      {
        uint64_t v19 = *(unsigned int *)((char *)v26 + i);
        if (!(v19 >> 15))
        {
          v8[4 * v19] |= 0xFFFFF0u;
          *(_DWORD *)((char *)v26 + i) = 0x8000;
        }
      }

      memset((char *)v26 + 8, 0, 32);
      uint64_t v20 = 40LL;
      v21.i64[0] = 0x300000003LL;
      v21.i64[1] = 0x300000003LL;
      do
      {
        *(int8x16_t *)((char *)v26 + v20) = vbicq_s8(v21, (int8x16_t)vceqzq_s32(*(int32x4_t *)((char *)v26 + v20)));
        v20 += 16LL;
      }

      while (v20 != 72);
      sub_1000041B0((uint64_t)v26, a1);
      uint64_t v8 = v29;
      uint64_t v22 = 1LL;
      if (!v29) {
        goto LABEL_41;
      }
    }

    else
    {
      uint64_t v22 = 0LL;
    }

    free(v8);
  }

  else
  {
    uint64_t v22 = 0LL;
    uint64_t v6 = v8;
  }

  return v5;
}

                                          a2 = &v8[v10];
                                          uint64_t v6 = v11 - v10;
                                          if (v11 != (_DWORD)v10) {
                                            continue;
                                          }
                                          uint64_t result = 1LL;
                                          break;
                                      }

                                      break;
                                  }

                                  break;
                              }

                              break;
                          }

                          break;
                      }

                      break;
                  }

                  break;
              }

              break;
          }

          break;
      }
    }

    else
    {
      uint64_t result = 0LL;
      *(_DWORD *)(a1 + 32) = 0;
    }

    return result;
  }

                                        sub_1000130E0(v19, a2, a3, a4, a5, a6, a7, a8, v23);
                                        goto LABEL_16;
                                      }

                                      if (v12 <= 1104)
                                      {
                                        if (v12 <= 1041)
                                        {
                                          if (v12 == 1040)
                                          {
                                            if ((_DWORD)v14 != 31) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: bandsAgeBinsV2(1040): (#31) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              uint64_t v20 = v14;
                                            }
                                            if ((sub_100022DD0(a1, "bandsAgeBinsV2_", (uint64_t)v8, 8u, v20) & 1) == 0)
                                            {
                                              uint64_t v22 = "ASPFTLParseBufferToCxt: bandsAgeBinsV2(1040): Cannot add 31 elements to context";
                                              goto LABEL_2247;
                                            }
                                          }

                                          else
                                          {
                                            if ((_DWORD)v14 != 31) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: bandsAgeBinsSnapshot(1041): (#31) cfg elements ! = (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              uint64_t v20 = v14;
                                            }
                                            if ((sub_100022DD0(a1, "bandsAgeBinsSnapshot_", (uint64_t)v8, 8u, v20) & 1) == 0)
                                            {
                                              uint64_t v22 = "ASPFTLParseBufferToCxt: bandsAgeBinsSnapshot(1041): Cannot add 31 el"
                                                    "ements to context";
                                              goto LABEL_2247;
                                            }
                                          }

                                          goto LABEL_14;
                                        }

                                        if (v12 == 1042)
                                        {
                                          if ((_DWORD)v14 != 15) {
                                            sub_1000130E0( "ASPFTLParseBufferToCxt: bandsAgeBinsReadSectors(1042): (#15) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                          }
                                          else {
                                            uint64_t v20 = v14;
                                          }
                                          if ((sub_100022DD0(a1, "bandsAgeBinsReadSectors_", (uint64_t)v8, 8u, v20) & 1) == 0)
                                          {
                                            uint64_t v22 = "ASPFTLParseBufferToCxt: bandsAgeBinsReadSectors(1042): Cannot add 15 e"
                                                  "lements to context";
                                            goto LABEL_2247;
                                          }

                                          goto LABEL_14;
                                        }

                                        if (v12 == 1080)
                                        {
                                          if ((sub_100022DD0(a1, "raidForceClogLoad", (uint64_t)v8, 8u, 1u) & 1) == 0)
                                          {
                                            uint64_t v19 = "ASPFTLParseBufferToCxt: raidForceClogLoad(1080) cannot add 1 element to context";
                                            goto LABEL_15;
                                          }

LABEL_41:
  free(v6);
  return v22;
}

void sub_1000041B0(uint64_t a1, FILE *__stream)
{
  uint64_t v2 = *(unsigned int *)(a1 + 4);
  uint64_t v3 = a1 + 4LL * v2;
  int v5 = *(_DWORD *)(v3 + 40);
  v4 = (_DWORD *)(v3 + 40);
  if (v5 == 3)
  {
    do
    {
      if (v2 <= 7 && !*(_DWORD *)(a1 + 4 * v2 + 8))
      {
        unsigned int v8 = (_DWORD)v2 << 12;
        size_t v9 = (void *)(*(void *)(a1 + 1096) + 16LL * v8);
        if (*(_DWORD *)a1 < (v8 | 0xFFF) && *(_DWORD *)a1 > v8) {
          size_t v11 = 16 * (*(_DWORD *)a1 - v8);
        }
        else {
          size_t v11 = 0x10000LL;
        }
        fwrite(v9, v11, 1uLL, __stream);
        bzero(v9, v11);
        _DWORD *v4 = 0;
        LODWORD(v2) = *(_DWORD *)(a1 + 4);
      }

      if ((_DWORD)v2 == 7) {
        uint64_t v2 = 0LL;
      }
      else {
        uint64_t v2 = (v2 + 1);
      }
      *(_DWORD *)(a1 + 4) = v2;
      uint64_t v12 = a1 + 4LL * v2;
      int v13 = *(_DWORD *)(v12 + 40);
      v4 = (_DWORD *)(v12 + 40);
    }

    while (v13 == 3);
  }
}

BOOL iolog_is_from_hwlogger(FILE *a1)
{
  size_t v2 = fread(&v4, 0x10uLL, 1uLL, a1);
  BOOL result = 0LL;
  if (v2 == 1) {
    return (v4 & 0x3FFFF) == 0x5E && v5 != 0;
  }
  return result;
}

void sub_1000042F4(unsigned int *a1, uint64_t a2, FILE *__stream)
{
  if (*(_DWORD *)a2 >> 27 == 1)
  {
    int v3 = *(unsigned __int8 *)(a2 + 5);
    if (v3 == 2) {
      int v4 = 1;
    }
    else {
      int v4 = 15;
    }
    if (v3 == 1) {
      int v5 = 2;
    }
    else {
      int v5 = v4;
    }
    if (v5 == 15) {
      return;
    }
    BOOL v6 = 0;
    int v7 = *(unsigned __int8 *)(a2 + 4);
    unsigned int v8 = *(unsigned __int8 *)(a2 + 6);
    uint64_t v9 = *(void *)(a2 + 8);
    unsigned int v10 = v5 & 0xF8FFFFFF | (((v8 >> 4) & 7) << 24);
    int v11 = (BYTE5(v9) | (v8 << 23) & 0x40000000 | ((v8 & 0xF) << 24)) + 1;
  }

  else
  {
    int v12 = *(unsigned __int8 *)(a2 + 4);
    *(void *)v36 = *(void *)(a2 + 5);
    *(_DWORD *)&v36[7] = *(_DWORD *)(a2 + 12);
    if (v12 == 14)
    {
      int v11 = 0;
      unsigned int v10 = (*(unsigned __int16 *)v36 << 8) & 0xFC0000 | (16 * (*(_WORD *)v36 & 0x3FF)) | (v36[2] << 24) | 0xE;
      LODWORD(v9) = *(_DWORD *)&v36[3];
      uint64_t v13 = *(unsigned int *)&v36[7];
      goto LABEL_21;
    }

    int v7 = v36[0];
    int v14 = v12 & 0xF;
    unsigned int v10 = (v12 | (*(_DWORD *)&v36[1] << 20)) & 0x700000F;
    int v11 = (*(_DWORD *)&v36[1] << 23) & 0x40000000 | ((v36[1] & 0xF) << 24) | HIBYTE(*(void *)&v36[1]) | (*(unsigned __int16 *)&v36[9] << 8);
    BOOL v6 = v14 == 3;
    uint64_t v9 = *(void *)&v36[1] >> 8;
  }

  uint64_t v13 = 16 * (*(_DWORD *)a2 & 0x7FFFFFFu);
  unsigned int v15 = &a1[v7];
  unsigned int v18 = v15[18];
  uint64_t v16 = v15 + 18;
  uint64_t v17 = v18;
  if (v6 && v17 < 0x8000)
  {
    uint64_t v19 = *((void *)a1 + 137);
    int v20 = *(_DWORD *)(v19 + 16 * v17);
    if ((v20 & 0xF) == 3) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }

  if (!(v17 >> 15))
  {
    uint64_t v19 = *((void *)a1 + 137);
    int v20 = *(_DWORD *)(v19 + 16 * v17);
LABEL_20:
    *(_DWORD *)(v19 + 16 * v17) = v20 | 0xFFFFF0;
    unint64_t v22 = *a1;
    --a1[(v17 >> 12) + 2];
    *uint64_t v16 = v22;
    ++*(unsigned int *)((char *)a1 + ((v22 >> 10) & 0x3FFFFC) + 8);
    goto LABEL_21;
  }

  unint64_t v21 = *a1;
  *uint64_t v16 = v21;
  ++*(unsigned int *)((char *)a1 + ((v21 >> 10) & 0x3FFFFC) + 8);
LABEL_21:
  uint64_t v23 = *((void *)a1 + 137) + 16LL * *a1;
  *(_DWORD *)uint64_t v23 = v10;
  *(void *)(v23 + 4) = v9 | (unint64_t)(v13 << 32);
  *(_DWORD *)(v23 + 12) = v11;
  unint64_t v24 = *a1;
  if ((v24 & 0xFFF) == 0) {
    *(unsigned int *)((char *)a1 + ((v24 >> 10) & 0x3FFFFC) + 40) = 1;
  }
  else {
    unsigned int v25 = v24 + 1;
  }
  *a1 = v25;
  if ((v25 & 0xFFF) == 0)
  {
    unint64_t v26 = v24 >> 12;
    uint64_t v27 = v25 >> 12;
    uint64_t v28 = &a1[v27];
    unsigned int v30 = v28[10];
    v29 = v28 + 10;
    if (v30)
    {
      uint64_t v31 = 0LL;
      v32 = a1 + 18;
      do
      {
        uint64_t v33 = v32[v31];
        if ((_DWORD)v27 == v33 >> 12)
        {
          *(_DWORD *)(*((void *)a1 + 137) + 16 * v33) |= 0xFFFFF0u;
          v32[v31] = 0x8000;
        }

        ++v31;
      }

      while (v31 != 256);
      a1[v27 + 2] = 0;
      _DWORD *v29 = 3;
    }

    v34 = &a1[v26];
    if (v34[2]) {
      int v35 = 2;
    }
    else {
      int v35 = 3;
    }
    v34[10] = v35;
    sub_1000041B0((uint64_t)a1, __stream);
  }

void sub_1000045D0(uint64_t a1, unsigned int a2, int a3, FILE *__stream)
{
  uint64_t v4 = a1 + 4LL * a2;
  unsigned int v7 = *(_DWORD *)(v4 + 72);
  BOOL v6 = (_DWORD *)(v4 + 72);
  unint64_t v5 = v7;
  if (!(v7 >> 15))
  {
    *BOOL v6 = 0x8000;
    unsigned int v8 = (unsigned int *)(*(void *)(a1 + 1096) + 16 * v5);
    if ((*v8 & 0xF) != 0xE)
    {
      unint64_t v9 = v5 >> 12;
      *unsigned int v8 = *v8 & 0xFF00000F | (16 * ((((a3 << 8) - 16 * v8[2]) >> 4) & 0xFFFFF));
      uint64_t v10 = a1 + 4 * v9;
      int v13 = *(_DWORD *)(v10 + 8);
      int v11 = (_DWORD *)(v10 + 8);
      int v12 = v13;
      if (v13)
      {
        int v14 = v12 - 1;
        *int v11 = v14;
        if (!v14)
        {
          uint64_t v15 = a1 + 4 * v9;
          int v17 = *(_DWORD *)(v15 + 40);
          uint64_t v16 = (_DWORD *)(v15 + 40);
          if (v17 == 2)
          {
            *uint64_t v16 = 3;
            sub_1000041B0(a1, __stream);
          }
        }
      }
    }
  }

void sub_100004E1C(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

id sub_100004E28(id a1)
{
  return a1;
}

int main(int argc, const char **argv, const char **envp)
{
  int v3 = objc_autoreleasePoolPush();
  _CFPreferencesSetBackupDisabled( @"com.apple.ASPCarryLog",  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost,  0LL,  1LL);
  CFRelease(@"com.apple.ASPCarryLog");
  os_log_t v4 = os_log_create("com.apple.nand.aspcarry", "main");
  unint64_t v5 = (void *)oslog;
  oslog = (uint64_t)v4;

  BOOL v6 = (os_log_s *)oslog;
  if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ASPCarryLog main start", v11, 2u);
  }

  dispatch_queue_t v7 = dispatch_queue_create("com.apple.nand.aspcarry_xpc_activity_serial_q", 0LL);
  unsigned int v8 = (void *)qword_1000C42B0;
  qword_1000C42B0 = (uint64_t)v7;

  dispatch_queue_t v9 = dispatch_queue_create("com.apple.nand.aspcarry_xpc_activity_non_nand_serial_q", 0LL);
  uint64_t v10 = (void *)qword_1000C42B8;
  qword_1000C42B8 = (uint64_t)v9;

  checkInNandTelemetry_nandActivities((void *)qword_1000C42B0);
  checkInNandTelemetry_nonNandActivities(qword_1000C42B8);
  dispatch_main();
}

NSString *uploadInfoKeyFromTaskingId(uint64_t a1)
{
  return +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@_%@",  @"aspcarry_uploadinfo",  a1);
}

LABEL_7:
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(-[ASPCarryLog_ExtractUpload fileManager](self, "fileManager"));
  uint64_t v28 = NSFilePosixPermissions;
  v29 = &off_1000AC1D8;
  int v20 = 1;
  unint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v29,  &v28,  1LL));
  unint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(-[ASPCarryLog_ExtractUpload tarInProgressDir](self, "tarInProgressDir"));
  unint64_t v24 = v13;
  [v19 setAttributes:v21 ofItemAtPath:v22 error:&v24];
  BOOL v6 = v24;

LABEL_13:
  return v20;
}

    return v3;
  }

  LOBYTE(v3) = 1;
  return v3;
}

LABEL_31:
      close(v24);
      archive_entry_free(v21);
      if (-[ASPCarryLog_ExtractUpload _isXpcActivityDeferred](self, "_isXpcActivityDeferred")) {
        goto LABEL_36;
      }
    }

    uint64_t v16 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v49,  v55,  16LL);
  }

  while (v16);

LABEL_35:
  int v17 = 0LL;
LABEL_36:

  v29 = !-[ASPCarryLog_ExtractUpload _isXpcActivityDeferred](self, "_isXpcActivityDeferred");
  archive_write_close(v15);
  unsigned int v30 = v29;
  archive_write_free(v15);
  if ((v29 & 1) == 0)
  {
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(-[ASPCarryLog_ExtractUpload fileManager](self, "fileManager"));
    v32 = [v31 fileExistsAtPath:v46];

    if (v32) {
      [v42 removeItemAtPath:v46 error:0];
    }
  }

  uint64_t v33 = v46;
  if (!v30) {
    uint64_t v33 = 0LL;
  }
  v34 = v33;

  return v34;
}

void sub_100006FA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, __int128 buf)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v47 = objc_begin_catch(exception_object);
      v48 = (os_log_s *)(id)oslog;
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        id v49 = objc_claimAutoreleasedReturnValue([v47 name]);
        id v50 = [v49 UTF8String];
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v50;
        _os_log_error_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_ERROR,  "ERROR: compression failed with err %s.\n",  (uint8_t *)&buf,  0xCu);
      }

      objc_end_catch();
    }

    else
    {
      objc_begin_catch(exception_object);
    }

    JUMPOUT(0x100006DD0LL);
  }

  _Unwind_Resume(exception_object);
}

LABEL_26:
}

LABEL_19:
  int v13 = (void *)objc_claimAutoreleasedReturnValue(-[ASPCarryLog_ExtractUpload fileManager](self, "fileManager"));
  int v14 = (void *)objc_claimAutoreleasedReturnValue(-[ASPCarryLog_ExtractUpload spdFilePath](self, "spdFilePath"));
  uint64_t v15 = [v13 fileExistsAtPath:v14];

  if (v15)
  {
    if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR)) {
      sub_100041FAC();
    }
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[ASPCarryLog_ExtractUpload fileManager](self, "fileManager"));
    int v17 = (void *)objc_claimAutoreleasedReturnValue(-[ASPCarryLog_ExtractUpload spdFilePath](self, "spdFilePath"));
    [v16 removeItemAtPath:v17 error:0];

    goto LABEL_36;
  }

  if (!v8) {
    return v11;
  }
LABEL_37:
  unint64_t v21 = (os_log_s *)oslog;
  if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "SPD extraction done. Saving state...", v23, 2u);
  }

  -[ASPCarryLog_ExtractUpload _setUploadInfoWithSpdState:](self, "_setUploadInfoWithSpdState:", 2LL);
  return v11;
}

void sub_1000087A4( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

id DateTimeToStr(void *a1)
{
  id v1 = a1;
  size_t v2 = objc_autoreleasePoolPush();
  int v3 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  -[NSDateFormatter setDateFormat:](v3, "setDateFormat:", @"yyyyMMddHHmmss");
  os_log_t v4 = -[NSLocale initWithLocaleIdentifier:]( objc_alloc(&OBJC_CLASS___NSLocale),  "initWithLocaleIdentifier:",  @"en_US_POSIX");
  -[NSDateFormatter setLocale:](v3, "setLocale:", v4);

  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone timeZoneWithName:](&OBJC_CLASS___NSTimeZone, "timeZoneWithName:", @"UTC"));
  -[NSDateFormatter setTimeZone:](v3, "setTimeZone:", v5);

  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSDateFormatter stringFromDate:](v3, "stringFromDate:", v1));
  objc_autoreleasePoolPop(v2);

  return v6;
}

id currentDateTimeStr()
{
  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v1 = DateTimeToStr(v0);
  size_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);

  return v2;
}

id StringToDateTime(void *a1)
{
  id v1 = a1;
  size_t v2 = objc_autoreleasePoolPush();
  int v3 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  os_log_t v4 = v3;
  if (v1)
  {
    -[NSDateFormatter setDateFormat:](v3, "setDateFormat:", @"yyyyMMddHHmmss");
    unint64_t v5 = -[NSLocale initWithLocaleIdentifier:]( objc_alloc(&OBJC_CLASS___NSLocale),  "initWithLocaleIdentifier:",  @"en_US_POSIX");
    -[NSDateFormatter setLocale:](v4, "setLocale:", v5);

    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone timeZoneWithName:](&OBJC_CLASS___NSTimeZone, "timeZoneWithName:", @"UTC"));
    -[NSDateFormatter setTimeZone:](v4, "setTimeZone:", v6);

    dispatch_queue_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSDateFormatter dateFromString:](v4, "dateFromString:", v1));
  }

  else
  {
    dispatch_queue_t v7 = 0LL;
  }

  objc_autoreleasePoolPop(v2);
  return v7;
}

void sub_100008AB0(_Unwind_Exception *a1)
{
}

BOOL diskFreeSpaceBelowLimit(unint64_t a1)
{
  size_t v2 = (void *)MGCopyAnswer(@"DiskUsage", 0LL);
  int v3 = v2;
  if (v2)
  {
    os_log_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:kMGQDiskUsageTotalDataAvailable]);
    id v5 = [v4 unsignedLongLongValue];
  }

  else
  {
    id v5 = 0LL;
  }

  return (unint64_t)v5 < a1;
}

id getDeviceSerialNumber()
{
  if (qword_1000C42C8 != -1) {
    dispatch_once(&qword_1000C42C8, &stru_10008C7E0);
  }
  return (id)qword_1000C42C0;
}

void sub_100008B84(id a1)
{
  uint64_t v1 = MGGetStringAnswer(@"SerialNumber");
  if (v1)
  {
    size_t v2 = (const void *)v1;
    int v3 = -[NSString initWithString:](objc_alloc(&OBJC_CLASS___NSString), "initWithString:", v1);
    os_log_t v4 = (void *)qword_1000C42C0;
    qword_1000C42C0 = (uint64_t)v3;

    CFRelease(v2);
  }

uint64_t ASPCarryLog_UploadFileToDP(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  if (!&_DRSubmitLog)
  {
    int v17 = (os_log_s *)oslog;
    if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR)) {
      sub_100042164(v17);
    }
LABEL_8:
    uint64_t v20 = 0LL;
    goto LABEL_9;
  }

  unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  v29[0] = NSFilePosixPermissions;
  v29[1] = NSFileOwnerAccountName;
  v30[0] = &off_1000AC208;
  v30[1] = @"mobile";
  v29[2] = NSFileGroupOwnerAccountName;
  v30[2] = @"mobile";
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v30,  v29,  3LL));
  [v18 setAttributes:v19 ofItemAtPath:v11 error:0];

  id v28 = 0LL;
  uint64_t v20 = 1LL;
  DRSubmitLog(v12, v13, v14, v15, v16, v11, 1LL, &v28);
  id v21 = v28;
  if (v21)
  {
    unint64_t v22 = v21;
    id v23 = objc_claimAutoreleasedReturnValue([v21 localizedDescription]);
    id v24 = [v23 UTF8String];

    unsigned int v25 = (os_log_s *)oslog;
    if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR)) {
      sub_1000421A4((uint64_t)v24, v25, v26);
    }

    goto LABEL_8;
  }

LABEL_9:
  return v20;
}

  id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unexpected system category size! Category info: %@",  v3));
  id v16 = (void *)oslog;
  if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR)) {
    sub_100042F0C(v15, v16);
  }
LABEL_12:

  return v15;
}

void disableFileBackUp(void *a1)
{
  id v1 = a1;
  size_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v1));
  id v9 = 0LL;
  unsigned __int8 v3 = [v2 setResourceValue:&__kCFBooleanTrue forKey:NSURLIsExcludedFromBackupKey error:&v9];
  id v4 = v9;
  id v5 = (void *)oslog;
  if ((v3 & 1) != 0)
  {
    if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = v1;
      dispatch_queue_t v7 = v5;
      id v8 = [v6 UTF8String];
      *(_DWORD *)buf = 136315138;
      id v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Excluded %s from backup.", buf, 0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR))
  {
    sub_100042210(v1, v5);
  }
}

void CompressFiles(void *a1, void *a2, char a3)
{
  id v26 = a1;
  id v5 = a2;
  id v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v27 = v5;
  uint64_t v6 = open((const char *)[v27 fileSystemRepresentation], 514, 438);
  uint64_t v7 = archive_write_new();
  if (archive_write_add_filter_none() || archive_write_set_format_pax(v7))
  {
    id v24 = @"SetZipError";
  }

  else
  {
    if ((a3 & 1) == 0)
    {
      uint64_t v19 = archive_read_new();
      archive_read_support_filter_all();
      archive_read_support_format_tar(v19);
      if (!archive_read_open_fd(v19, v6, 10240LL))
      {
        do
        {
          if (archive_read_next_header(v19, v36))
          {
            off_t header_position = archive_read_header_position(v19);
            archive_read_free(v19);
            lseek(v6, header_position, 0);
            goto LABEL_4;
          }
        }

        while (!archive_filter_code(v19, 0LL));
        archive_read_free(v19);
        close(v6);
      }

      goto LABEL_27;
    }

LABEL_4:
    if (!archive_write_open_fd(v7, v6))
    {
      __int128 v33 = 0u;
      __int128 v34 = 0u;
      __int128 v31 = 0u;
      __int128 v32 = 0u;
      id obj = v26;
      id v8 = [obj countByEnumeratingWithState:&v31 objects:v37 count:16];
      if (v8)
      {
        id v9 = 0LL;
        uint64_t v30 = *(void *)v32;
        uint64_t v10 = @"InputFileError";
        while (1)
        {
          uint64_t v11 = 0LL;
LABEL_8:
          if (*(void *)v32 != v30) {
            objc_enumerationMutation(obj);
          }
          id v12 = *(id *)(*((void *)&v31 + 1) + 8 * v11);

          id v13 = v12;
          uint64_t v14 = archive_entry_new();
          archive_entry_copy_stat(v14, &v35);
          id v15 = objc_claimAutoreleasedReturnValue([v13 lastPathComponent]);
          archive_entry_set_pathname(v14, [v15 UTF8String]);

          archive_entry_set_filetype(v14, 0x8000LL);
          archive_entry_set_perm(v14, 420LL);
          if (archive_write_header(v7, v14))
          {
            id v22 = (id)objc_claimAutoreleasedReturnValue( +[NSException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___NSException,  "exceptionWithName:reason:userInfo:",  @"ArchiveWriteHeaderError",  0LL,  0LL));
            objc_exception_throw(v22);
            goto LABEL_35;
          }

          id v9 = v13;
          int v16 = open((const char *)[v9 fileSystemRepresentation], 0);
          int v17 = v16;
          if (v16 < 0)
          {
LABEL_29:
            id v21 = (id)objc_claimAutoreleasedReturnValue( +[NSException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___NSException,  "exceptionWithName:reason:userInfo:",  v10,  0LL,  0LL));
            objc_exception_throw(v21);
            goto LABEL_35;
          }

          for (int i = read(v16, v38, 0x2000uLL); i >= 1; int i = read(v17, v38, 0x2000uLL))
          {
            if (i != archive_write_data(v7, v38, i))
            {
              uint64_t v10 = @"ArchiveWriteError";
              goto LABEL_29;
            }
          }

          close(v17);
          archive_entry_free(v14);
          if ((id)++v11 != v8) {
            goto LABEL_8;
          }
          id v8 = [obj countByEnumeratingWithState:&v31 objects:v37 count:16];
          if (!v8)
          {

            goto LABEL_20;
          }
        }

        id v23 = (id)objc_claimAutoreleasedReturnValue( +[NSException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___NSException,  "exceptionWithName:reason:userInfo:",  @"InputFileStatError",  0LL,  0LL));
        objc_exception_throw(v23);
        goto LABEL_35;
      }

LABEL_20:
      archive_write_close(v7);
LABEL_27:
      archive_write_free(v7);

      return;
    }

    id v24 = @"OpenDestFileError";
  }

  id v25 = (id)objc_claimAutoreleasedReturnValue( +[NSException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___NSException,  "exceptionWithName:reason:userInfo:",  v24,  0LL,  0LL));
  objc_exception_throw(v25);
LABEL_35:
  __break(1u);
}

    fprintf(__stderrp, "get IOLog SPD buffer with opcode 0x%x failed", v7);
    return 0LL;
  }

  if (a4 == 1)
  {
    uint64_t v7 = 265;
    goto LABEL_8;
  }

  if (a4 != 2)
  {
    if (a4 != 3)
    {
      fprintf(__stderrp, "Wrong IOLog SPD get buffer option %d", a4);
      uint64_t v7 = -1;
LABEL_17:
      *a3 = 0LL;
      goto LABEL_18;
    }

    uint64_t v7 = 267;
LABEL_8:
    id v8 = sub_10003773C(a1, v7, 0, 0, a3, 0, 0);
    *a2 = v8;
    if (v8 && *a3) {
      return 1LL;
    }
    goto LABEL_17;
  }

  if (!a1 || !*a2 || !*a3 || (id v9 = 1LL, (sub_100037D5C(a1, 266, a5, *a2, *a3, 1, 1) & 1) == 0))
  {
    *a3 = 0LL;
    uint64_t v7 = 266;
    goto LABEL_20;
  }

  return v9;
}

void sub_100009508( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint8_t buf)
{
}

void SafeXpcActivityRegister(const char *a1, void *a2, void *a3, void *a4)
{
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_100009760;
  handler[3] = &unk_10008C830;
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v7 = v13;
  id v8 = v12;
  id v9 = v11;
  xpc_activity_register(a1, XPC_ACTIVITY_CHECK_IN, handler);
}

void sub_100009760(uint64_t a1, void *a2)
{
  unsigned __int8 v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (state == 2)
  {
    if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEBUG)) {
      sub_100042454();
    }
    if (xpc_activity_should_defer(v3))
    {
      if (!xpc_activity_set_state(v3, 3LL) && os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR)) {
        sub_10004238C();
      }
    }

    else if (xpc_activity_set_state(v3, 4LL))
    {
      id v9 = *(dispatch_queue_s **)(a1 + 40);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472LL;
      v10[2] = sub_10000994C;
      v10[3] = &unk_10008C808;
      id v11 = v3;
      id v12 = *(id *)(a1 + 48);
      dispatch_async(v9, v10);
    }

    else if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR))
    {
      sub_1000423F0();
    }
  }

  else
  {
    uint64_t v5 = state;
    if (state)
    {
      id v8 = (os_log_s *)oslog;
      if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR)) {
        sub_1000422A8((uint64_t)v3, v5, v8);
      }
    }

    else
    {
      if (*(void *)(a1 + 32))
      {
        xpc_object_t v6 = xpc_activity_copy_criteria(v3);
        id v7 = v6;
        if (!v6 || !xpc_equal(v6, *(xpc_object_t *)(a1 + 32))) {
          xpc_activity_set_criteria(v3, *(xpc_object_t *)(a1 + 32));
        }
      }

      else
      {
        id v7 = 0LL;
      }

      if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEBUG)) {
        sub_100042328();
      }
    }
  }
}

void sub_10000994C(uint64_t a1)
{
  size_t v2 = (uint64_t *)(a1 + 32);
  if (!xpc_activity_should_defer(*(xpc_activity_t *)(a1 + 32)))
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    uint64_t v5 = (_xpc_activity_s *)*(id *)(a1 + 32);
    if (xpc_activity_get_state(v5) == 4)
    {
      BOOL v6 = xpc_activity_set_state(v5, 5LL);
      id v7 = (os_log_s *)oslog;
      if (!v6)
      {
        if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR)) {
          sub_100042524();
        }
        goto LABEL_14;
      }

      if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 134217984;
        uint64_t v10 = v5;
        id v8 = "XPC activity %p finished successfully.";
LABEL_11:
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v9, 0xCu);
      }
    }

    else
    {
      id v7 = (os_log_s *)oslog;
      if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 134217984;
        uint64_t v10 = v5;
        id v8 = "XPC activity %p not in CONTINUE state";
        goto LABEL_11;
      }
    }

LABEL_14:
    return;
  }

  if (!xpc_activity_set_state((xpc_activity_t)*v2, 3LL))
  {
    unsigned __int8 v3 = (os_log_s *)oslog;
    if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR)) {
      sub_1000424B8(v2, v3, v4);
    }
  }

                                            sub_1000299C0(v16, "", v19, v18);
                                          }

  if (v21) {
    sub_100038040((uint64_t)v21);
  }
  return v19;
}

void sub_100009DF4(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_100009E00()
{
  return v0;
}

void sub_10000A438( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void NSDictFromStatsBuffer(uint64_t *a1, unsigned int a2, void *a3)
{
  id v15 = a3;
  if (a2 >> 3)
  {
    uint64_t v5 = a1;
    unint64_t v6 = (unint64_t)&a1[a2 >> 3];
    do
    {
      unint64_t v8 = *v5++;
      uint64_t v7 = v8;
      unint64_t v9 = HIDWORD(v8);
      if (HIDWORD(v8))
      {
        if ((_DWORD)v9 == 1)
        {
          uint64_t v5 = a1 + 2;
          uint64_t v10 = (NSMutableArray *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  a1[1]));
          id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v7));
          [v15 setObject:v10 forKey:v11];
        }

        else
        {
          uint64_t v10 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          do
          {
            uint64_t v12 = *v5++;
            id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v12));
            -[NSMutableArray addObject:](v10, "addObject:", v13);

            LODWORD(v9) = v9 - 1;
          }

          while ((_DWORD)v9);
          id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](&OBJC_CLASS___NSArray, "arrayWithArray:", v10));
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v7));
          [v15 setObject:v11 forKey:v14];
        }
      }

      a1 = v5;
    }

    while ((unint64_t)v5 < v6);
  }
}

id sub_10000C0C4(uint64_t a1)
{
  size_t v2 = (os_log_s *)oslog;
  if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sigterm was received, Stopping sweeps.", v4, 2u);
  }

  return [*(id *)(a1 + 32) setWasSigtermReceived:1];
}

uint64_t validateCurTaskingInfo(void *a1)
{
  id v1 = a1;
  size_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"dsreply_pending"]);
  unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"endtime"]);
  if (!v1) {
    goto LABEL_17;
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"id"]);
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSString);
  if ((objc_opt_isKindOfClass(v4, v5) & 1) == 0) {
    goto LABEL_11;
  }
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"device_id"]);
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString);
  if ((objc_opt_isKindOfClass(v6, v7) & 1) == 0)
  {
LABEL_10:

LABEL_11:
    goto LABEL_12;
  }

  unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"upload_size_limit_bytes"]);
  uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSNumber);
  if ((objc_opt_isKindOfClass(v8, v9) & 1) == 0)
  {

    goto LABEL_10;
  }

  uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSString);
  char isKindOfClass = objc_opt_isKindOfClass(v2, v10);

  if ((isKindOfClass & 1) != 0)
  {
    if ([v2 isEqualToString:@"yes"])
    {
      if (!v3)
      {
LABEL_17:
        uint64_t v13 = 1LL;
        goto LABEL_18;
      }
    }

    else if ([v2 isEqualToString:@"no"])
    {
      uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSString);
      if ((objc_opt_isKindOfClass(v3, v14) & 1) != 0) {
        goto LABEL_17;
      }
    }
  }

LABEL_12:
  uint64_t v12 = (void *)oslog;
  if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR)) {
    sub_100042D1C(v12, (uint64_t)v1);
  }
  uint64_t v13 = 0LL;
LABEL_18:

  return v13;
}

uint64_t checkInternalBuild(void *a1)
{
  id v1 = a1;
  uint64_t has_internal_content = os_variant_has_internal_content("com.apple.ASPCarryLog", v2);
  uint64_t v4 = has_internal_content;
  if (v1 && (_DWORD)has_internal_content)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v1 getValueForKey:@"test_force_customer_build" expectedType:0]);
    uint64_t v4 = [v5 isEqualToString:@"yes"] ^ 1;
  }

  return v4;
}

void setTaskingInfoToLegacyUIDomain(void *a1, void *a2, void *a3, uint64_t a4, void *a5, int a6)
{
  if (a6)
  {
    id v10 = a5;
    id v11 = a3;
    id v12 = a2;
    id v13 = a1;
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a4));
    id v15 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Tasking id: %@\nEnd time: %@\nTotal uploaded bytes: %@\nLast upload file: %@\n",  v12,  v11,  v14,  v10));

    [v13 setValue:v15 forKey:@"aspcarrylog_tasking_info" inDomain:@"/var/mobile/Library/Preferences/com.apple.nandCarryLogs.plist"];
  }

LABEL_11:
    -[ASPCarryLogStateMachine _tryActivateTasking](self, "_tryActivateTasking");
    goto LABEL_12;
  }

  if (v10)
  {
    int v16 = v9;
    int v17 = (void *)objc_claimAutoreleasedReturnValue(-[ASPCarryLogStateMachine currentTaskingInfo](self, "currentTaskingInfo"));
    unsigned int v18 = objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:@"id"]);
    uint64_t v20 = 136315138;
    id v21 = [v18 UTF8String];
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "TaskingId %s continue.\n",  (uint8_t *)&v20,  0xCu);

LABEL_25:
  }
}

LABEL_21:
  return v18;
}

void sub_100010218( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

id sub_10001022C()
{
  return [v0 UTF8String];
}

id sub_100010238(id a1)
{
  return a1;
}

id sub_100010240()
{
  return v0;
}

void sub_100010A44(uint64_t a1)
{
  id v2 = objc_alloc(&OBJC_CLASS___DRConfigMonitor);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100010AF0;
  v6[3] = &unk_10008C920;
  uint64_t v3 = *(void *)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v4 = [v2 initWithTeamID:@"com.apple.coreos.nand" targetQueue:v3 configProcessingBlock:v6];
  uint64_t v5 = (void *)qword_1000C4320;
  qword_1000C4320 = (uint64_t)v4;

  [(id)qword_1000C4320 startMonitoring];
}

void sub_100010AF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stringByAppendingPathComponent:@"dp_tasking_payload.plist"]);
  unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v7));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  if (v6)
  {
    id v10 = (void *)oslog;
    if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR)) {
      sub_1000430F0(v10, v6);
    }
    id v11 = 0LL;
    if (!v5) {
      goto LABEL_28;
    }
    goto LABEL_20;
  }

  if (!v5)
  {
    id v11 = 0LL;
    goto LABEL_27;
  }

  id v6 = (id)objc_claimAutoreleasedReturnValue([v5 payloadDictionaryRepresentation]);

  if (!v6)
  {
    id v11 = 0LL;
    goto LABEL_20;
  }

  id v12 = (void *)oslog;
  if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT))
  {
    id v13 = v7;
    uint64_t v14 = v12;
    *(_DWORD *)buf = 136315138;
    id v32 = [v13 UTF8String];
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Got DP tasking payload. Dumping it to file %s",  buf,  0xCu);
  }

  if ([v9 fileExistsAtPath:v7])
  {
    id v15 = (os_log_s *)oslog;
    if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Previous payload exists. Deleting...",  buf,  2u);
    }

    [v9 removeItemAtPath:v7 error:0];
  }

  if ([v9 fileExistsAtPath:*(void *)(a1 + 32)])
  {
    id v6 = 0LL;
LABEL_19:
    v29[0] = @"payload";
    unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue([v5 payloadDictionaryRepresentation]);
    v29[1] = @"expire_time";
    v30[0] = v18;
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  432000.0));
    v30[1] = v19;
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v30,  v29,  2LL));

    [v11 writeToURL:v8 error:0];
LABEL_20:
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v5 configUUID]);

    if (!v20) {
      goto LABEL_28;
    }
    id v21 = (os_log_s *)oslog;
    if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Marking DP tasking payload complete.",  buf,  2u);
    }

    id v22 = (void *)qword_1000C4320;
    id v23 = (void *)objc_claimAutoreleasedReturnValue([v5 configUUID]);
    id v27 = v6;
    [v22 markCompletedConfigUUID:v23 errorOut:&v27];
    id v24 = v27;

    if (v24)
    {
      id v25 = (void *)oslog;
      if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR)) {
        sub_100043020(v25, v24);
      }
      id v6 = v24;
      goto LABEL_28;
    }

LABEL_27:
    id v6 = 0LL;
    goto LABEL_28;
  }

  uint64_t v16 = *(void *)(a1 + 32);
  id v28 = 0LL;
  unsigned __int8 v17 = [v9 createDirectoryAtPath:v16 withIntermediateDirectories:0 attributes:0 error:&v28];
  id v6 = v28;
  if ((v17 & 1) != 0) {
    goto LABEL_19;
  }
  id v26 = (os_log_s *)oslog;
  if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_ERROR)) {
    sub_1000430B0(v26);
  }
  id v11 = 0LL;
LABEL_28:
}

  if (v8)
  {
    sub_100038040((uint64_t)v8);
    *(void *)id v23 = 0LL;
  }

  if (__ptr) {
    free(__ptr);
  }
  return v3;
}

void sub_100011430( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v9 = objc_begin_catch(exception_object);
      id v10 = (os_log_s *)(id)oslog;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id v11 = objc_claimAutoreleasedReturnValue([v9 name]);
        id v12 = [v11 UTF8String];
        LODWORD(a9) = 136315138;
        *(void *)((char *)&a9 + 4) = v12;
        _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "ERROR: get tasking duration error %s",  (uint8_t *)&a9,  0xCu);
      }
    }

    else
    {
      objc_begin_catch(exception_object);
    }

    objc_end_catch();
    JUMPOUT(0x1000113FCLL);
  }

  _Unwind_Resume(exception_object);
}

void sub_100011588( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v9 = objc_begin_catch(exception_object);
      id v10 = (os_log_s *)(id)oslog;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id v11 = objc_claimAutoreleasedReturnValue([v9 name]);
        id v12 = [v11 UTF8String];
        LODWORD(a9) = 136315138;
        *(void *)((char *)&a9 + 4) = v12;
        _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "ERROR: get tasking size limit error %s",  (uint8_t *)&a9,  0xCu);
      }
    }

    else
    {
      objc_begin_catch(exception_object);
    }

    objc_end_catch();
    JUMPOUT(0x100011554LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_1000119C0( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

uint64_t sub_100012764(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v5)
  {
    id v6 = v5;
    id v7 = 0LL;
    uint64_t v8 = *(void *)v14;
    while (2)
    {
      id v9 = 0LL;
      id v10 = v7;
      do
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v4);
        }
        id v7 = *(id *)(*((void *)&v13 + 1) + 8LL * (void)v9);

        if (!objc_msgSend( *(id *)(a1 + 40),  "_elementPassesWhiteListCheck:whiteListRef:forCriteriaDict:",  v7,  *(void *)(a1 + 48),  v3,  (void)v13))
        {
          uint64_t v11 = 0LL;
          goto LABEL_12;
        }

        id v9 = (char *)v9 + 1;
        id v10 = v7;
      }

      while (v6 != v9);
      id v6 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

  id v7 = 0LL;
  uint64_t v11 = 1LL;
LABEL_12:

  return v11;
}

uint64_t sub_100012B28(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v5)
  {
    id v6 = v5;
    id v7 = 0LL;
    uint64_t v8 = *(void *)v14;
    while (2)
    {
      id v9 = 0LL;
      id v10 = v7;
      do
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v4);
        }
        id v7 = *(id *)(*((void *)&v13 + 1) + 8LL * (void)v9);

        if (!objc_msgSend( *(id *)(a1 + 40),  "_elementExistsInStats:statsProvider:forCriteriaDict:",  v7,  *(void *)(a1 + 48),  v3,  (void)v13))
        {
          uint64_t v11 = 0LL;
          goto LABEL_12;
        }

        id v9 = (char *)v9 + 1;
        id v10 = v7;
      }

      while (v6 != v9);
      id v6 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

  id v7 = 0LL;
  uint64_t v11 = 1LL;
LABEL_12:

  return v11;
}

void sub_100012DFC( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v18 = objc_begin_catch(a1);
      uint64_t v19 = (os_log_s *)(id)oslog;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        id v20 = objc_claimAutoreleasedReturnValue([v18 name]);
        id v21 = [v20 UTF8String];
        id v24 = (void *)objc_claimAutoreleasedReturnValue([v17 myTaskingCriteria]);
        id v22 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString, "stringWithFormat:", @"%@"));
        id v23 = [v22 UTF8String];
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = v21;
        WORD6(buf) = 2080;
        *(void *)((char *)&buf + 14) = v23;
        _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "ERROR: tasking criteria evaluation failed for %s. Criteria array: \n%s",  (uint8_t *)&buf,  0x16u);
      }

      objc_end_catch();
    }

    else
    {
      objc_begin_catch(a1);
      objc_end_catch();
    }

    JUMPOUT(0x100012D2CLL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100012F38(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) getCriteriaValueUsingStatsProvider:*(void *)(a1 + 40) forCriteriaDict:v3];
  float v5 = v4;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"START_RANGE"]);

  if (v6)
  {
    [*(id *)(a1 + 32) _getElementValue:*(void *)(a1 + 40) forElementName:@"START_RANGE" criteriaDict:v3];
    uint64_t v8 = v5 >= v7;
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"END_RANGE"]);

  if (v9)
  {
    [*(id *)(a1 + 32) _getElementValue:*(void *)(a1 + 40) forElementName:@"END_RANGE" criteriaDict:v3];
    if (v5 <= v10) {
      uint64_t v8 = v8;
    }
    else {
      uint64_t v8 = 0LL;
    }
  }

  uint64_t v11 = (void *)oslog;
  if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_DEFAULT))
  {
    id v12 = v11;
    id v13 = objc_claimAutoreleasedReturnValue([v3 descriptionInStringsFileFormat]);
    int v15 = 136315394;
    id v16 = [v13 UTF8String];
    __int16 v17 = 2048;
    double v18 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "criteriaDict %s value %.2f",  (uint8_t *)&v15,  0x16u);
  }

  return v8;
}

void sub_1000130E0( const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (!qword_1000C4358)
  {
    qword_1000C4358 = (uint64_t)calloc(0x400uLL, 1uLL);
    vsnprintf(__str, 0x400uLL, a1, &a9);
    snprintf((char *)qword_1000C4358, 0x400uLL, "%s", __str);
  }

const char *sub_100013198()
{
  if (qword_1000C4358) {
    return (const char *)qword_1000C4358;
  }
  else {
    return "NA";
  }
}

uint64_t sub_1000131B4(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  *(_DWORD *)(a1 + 36) = -1;
  if (a3 < 8) {
    return 0LL;
  }
  unsigned int v6 = a3 >> 3;
  while (2)
  {
    unint64_t v9 = *a2;
    uint64_t v8 = a2 + 1;
    int v7 = v9;
    unint64_t v10 = HIDWORD(v9);
    unsigned int v11 = v6 - 1;
    if (v9 <= 0x30000000 && v11 >= v10)
    {
      uint64_t v13 = (v7 - 1);
      if (v13 <= 0x47) {
        __asm { BR              X10 }
      }

      uint64_t v17 = (v7 - 73);
      if (v17 <= 0x46) {
        __asm { BR              X10 }
      }

      switch(v7)
      {
        case 144:
          uint64_t v18 = *v8;
          uint64_t v19 = "numMemExtreme";
          goto LABEL_13;
        case 145:
          uint64_t v18 = *v8;
          uint64_t v19 = "maxMemExtremeDuration";
          goto LABEL_13;
        case 146:
          uint64_t v18 = *v8;
          uint64_t v19 = "memExtremeDuration";
          goto LABEL_13;
        case 147:
          uint64_t v18 = *v8;
          uint64_t v19 = "bandGetsExtreme";
          goto LABEL_13;
        case 148:
          uint64_t v18 = *v8;
          uint64_t v19 = "bandGetsLow";
          goto LABEL_13;
        case 149:
          uint64_t v18 = *v8;
          uint64_t v19 = "numHostChoke";
          goto LABEL_13;
        case 152:
          uint64_t v18 = *v8;
          uint64_t v19 = "AbortSkip_ProgramError";
          goto LABEL_13;
        case 153:
          uint64_t v18 = *v8;
          uint64_t v19 = "AbortSkip_ReadErrorOpenBand";
          goto LABEL_13;
        case 154:
          uint64_t v18 = *v8;
          uint64_t v19 = "AbortSkip_FailedRebuildingParity";
          goto LABEL_13;
        case 155:
          uint64_t v18 = *v8;
          uint64_t v19 = "AbortPad_OpenRefreshBand";
          goto LABEL_13;
        case 156:
          uint64_t v18 = *v8;
          uint64_t v19 = "AbortPad_CloseBands";
          goto LABEL_13;
        case 157:
          uint64_t v18 = *v8;
          uint64_t v19 = "AbortPad_SetPhoto";
          goto LABEL_13;
        case 158:
          uint64_t v18 = *v8;
          uint64_t v19 = "AbortPad_GcNoSource";
          goto LABEL_13;
        case 159:
          uint64_t v18 = *v8;
          uint64_t v19 = "AbortPad_Format";
          goto LABEL_13;
        case 160:
          uint64_t v18 = *v8;
          uint64_t v19 = "nandDiscoveryDuration";
          goto LABEL_13;
        case 161:
          uint64_t v18 = *v8;
          uint64_t v19 = "coreCCEnableDuration";
          goto LABEL_13;
        case 163:
          uint64_t v18 = *v8;
          uint64_t v19 = "coreOpenDuration";
          goto LABEL_13;
        case 164:
          uint64_t v18 = *v8;
          uint64_t v19 = "coreWritableDuration";
          goto LABEL_13;
        case 165:
          uint64_t v18 = *v8;
          uint64_t v19 = "coreClogLoadDuration";
          goto LABEL_13;
        case 167:
          uint64_t v18 = *v8;
          uint64_t v19 = "bulkPFail";
          goto LABEL_13;
        case 169:
          uint64_t v18 = *v8;
          uint64_t v19 = "bulkRFail";
          goto LABEL_13;
        case 172:
          uint64_t v18 = *v8;
          uint64_t v19 = "raidSmartErrors";
          goto LABEL_13;
        case 182:
          uint64_t v18 = *v8;
          uint64_t v19 = "internalUeccs";
          goto LABEL_13;
        case 183:
          uint64_t v18 = *v8;
          uint64_t v19 = "e2eFail";
          goto LABEL_13;
        case 184:
          uint64_t v18 = *v8;
          uint64_t v19 = "TempSensorMax";
          goto LABEL_13;
        case 185:
          uint64_t v18 = *v8;
          uint64_t v19 = "TempSensorMin";
          goto LABEL_13;
        case 186:
          uint64_t v18 = *v8;
          uint64_t v19 = "powerUpFromDDR";
          goto LABEL_13;
        case 187:
          uint64_t v18 = *v8;
          uint64_t v19 = "numMemLow";
          goto LABEL_13;
        case 188:
          uint64_t v18 = *v8;
          uint64_t v19 = "maxMemLowDuration";
          goto LABEL_13;
        case 189:
          uint64_t v18 = *v8;
          uint64_t v19 = "memLowDuration";
          goto LABEL_13;
        case 190:
          uint64_t v18 = *v8;
          uint64_t v19 = "numFences";
          goto LABEL_13;
        case 191:
          uint64_t v18 = *v8;
          uint64_t v19 = "hostPassiveIO";
          goto LABEL_13;
        case 192:
          uint64_t v18 = *v8;
          uint64_t v19 = "odtsMax";
          goto LABEL_13;
        case 193:
          uint64_t v18 = *v8;
          uint64_t v19 = "defragMFromOrphans";
          goto LABEL_13;
        case 194:
          uint64_t v18 = *v8;
          uint64_t v19 = "defragMFromFragments";
          goto LABEL_13;
        case 195:
          uint64_t v18 = *v8;
          uint64_t v19 = "defragMTime";
          goto LABEL_13;
        case 196:
          uint64_t v18 = *v8;
          uint64_t v19 = "defragMMaxTime";
          goto LABEL_13;
        case 197:
          uint64_t v18 = *v8;
          uint64_t v19 = "raidFailedLbaMismatch";
          goto LABEL_13;
        case 198:
          uint64_t v18 = *v8;
          uint64_t v19 = "numSyscfgWrites";
          goto LABEL_13;
        case 199:
          uint64_t v18 = *v8;
          uint64_t v19 = "indmbUnitsXfer";
          goto LABEL_13;
        case 200:
          uint64_t v18 = *v8;
          uint64_t v19 = "indmbUnitsCache";
          goto LABEL_13;
        case 201:
          uint64_t v18 = *v8;
          uint64_t v19 = "indmbUnitsInd";
          goto LABEL_13;
        case 202:
          uint64_t v18 = *v8;
          uint64_t v19 = "wcacheFS_Mbytes";
          goto LABEL_13;
        case 203:
          uint64_t v18 = *v8;
          uint64_t v19 = "wcacheDS_Mbytes";
          goto LABEL_13;
        case 204:
          uint64_t v18 = *v8;
          uint64_t v19 = "powerOnSeconds";
          goto LABEL_13;
        case 205:
          uint64_t v18 = *v8;
          uint64_t v19 = "numUnknownTokenHostRead";
          goto LABEL_13;
        case 206:
          uint64_t v18 = *v8;
          uint64_t v19 = "numUnmmapedTokenHostRead";
          goto LABEL_13;
        case 207:
          id v20 = "numOfThrottlingEntriesPerLevel";
          uint64_t v21 = a1;
          int v22 = 207;
LABEL_85:
          __int128 v14 = v8;
          unsigned int v15 = 16;
          goto LABEL_12;
        case 208:
          uint64_t v18 = *v8;
          uint64_t v19 = "wcacheFS_MbytesMin";
          goto LABEL_13;
        case 209:
          uint64_t v18 = *v8;
          uint64_t v19 = "wcacheFS_MbytesMax";
          goto LABEL_13;
        case 210:
          uint64_t v18 = *v8;
          uint64_t v19 = "prepareForShutdownFailCounter";
          goto LABEL_13;
        case 211:
          uint64_t v18 = *v8;
          uint64_t v19 = "lpsrEntry";
          goto LABEL_13;
        case 212:
          uint64_t v18 = *v8;
          uint64_t v19 = "lpsrExit";
          goto LABEL_13;
        case 213:
          id v20 = "crcInternalReadFail";
          uint64_t v21 = a1;
          int v22 = 213;
LABEL_23:
          __int128 v14 = v8;
          unsigned int v15 = 8;
          goto LABEL_12;
        case 214:
          uint64_t v18 = *v8;
          uint64_t v19 = "wcacheFSEvictCnt";
          goto LABEL_13;
        case 215:
          uint64_t v18 = *v8;
          uint64_t v19 = "wcacheFSEvictSize";
          goto LABEL_13;
        case 216:
          uint64_t v18 = *v8;
          uint64_t v19 = "wcacheFSWr";
          goto LABEL_13;
        case 217:
          uint64_t v18 = *v8;
          uint64_t v19 = "wcacheDSWr";
          goto LABEL_13;
        case 218:
          id v20 = "wcacheFSEvictSizeLogDist";
          uint64_t v21 = a1;
          int v22 = 218;
LABEL_11:
          __int128 v14 = v8;
          unsigned int v15 = 10;
          goto LABEL_12;
        case 219:
          uint64_t v18 = *v8;
          uint64_t v19 = "prepareForShutdownTimeoutCounter";
          goto LABEL_13;
        case 220:
          uint64_t v18 = *v8;
          uint64_t v19 = "prepareForShutdownCancelCounter";
          goto LABEL_13;
        case 221:
          uint64_t v18 = *v8;
          uint64_t v19 = "RD_openBandCount";
          goto LABEL_13;
        case 222:
          uint64_t v18 = *v8;
          uint64_t v19 = "RD_openBandNops";
          goto LABEL_13;
        case 223:
          uint64_t v18 = *v8;
          uint64_t v19 = "RD_closedBandEvictCount";
LABEL_13:
          id v16 = (void *)a1;
          goto LABEL_14;
        default:
          switch(v7)
          {
            case 224:
              uint64_t v18 = *v8;
              uint64_t v19 = "RD_closedBandEvictSectors";
              goto LABEL_13;
            case 225:
              uint64_t v18 = *v8;
              uint64_t v19 = "RD_closedBandFragmentCount";
              goto LABEL_13;
            case 226:
              uint64_t v18 = *v8;
              uint64_t v19 = "RD_closedBandFragmentSectors";
              goto LABEL_13;
            case 227:
              id v20 = "wcacheFSOverWrLogSizeCnts";
              uint64_t v21 = a1;
              int v22 = 227;
              goto LABEL_11;
            case 228:
              id v20 = "wcacheFSOverWrSizeByFlow";
              uint64_t v21 = a1;
              int v22 = 228;
              goto LABEL_22;
            case 229:
              id v20 = "indmbXferCountTo";
              uint64_t v21 = a1;
              int v22 = 229;
              goto LABEL_20;
            case 230:
              id v20 = "indmbAccumulatedTimeBetweenXfers";
              uint64_t v21 = a1;
              int v22 = 230;
LABEL_20:
              __int128 v14 = v8;
              unsigned int v15 = 2;
              goto LABEL_12;
            case 231:
              uint64_t v18 = *v8;
              uint64_t v19 = "maxGracefulBootTimeMs";
              goto LABEL_13;
            case 232:
              uint64_t v18 = *v8;
              uint64_t v19 = "maxUngracefulBootTimeMs";
              goto LABEL_13;
            case 233:
              uint64_t v18 = *v8;
              uint64_t v19 = "averageGracefulBootTimeMs";
              goto LABEL_13;
            case 234:
              uint64_t v18 = *v8;
              uint64_t v19 = "averageUngracefulBootTimeMs";
              goto LABEL_13;
            case 235:
              id v20 = "gracefulBootTimeLogMs";
              uint64_t v21 = a1;
              int v22 = 235;
              goto LABEL_23;
            case 236:
              id v20 = "ungracefulBootTimeLogMs";
              uint64_t v21 = a1;
              int v22 = 236;
              goto LABEL_23;
            case 237:
              id v20 = "CalibrationCount";
              uint64_t v21 = a1;
              int v22 = 237;
              goto LABEL_22;
            case 238:
              uint64_t v18 = *v8;
              uint64_t v19 = "CalibrationLastTmp";
              goto LABEL_13;
            case 239:
              uint64_t v18 = *v8;
              uint64_t v19 = "CalibrationMaxTmp";
              goto LABEL_13;
            case 240:
              uint64_t v18 = *v8;
              uint64_t v19 = "CalibrationMinTmp";
              goto LABEL_13;
            case 241:
              uint64_t v18 = *v8;
              uint64_t v19 = "ungracefulBootWorstIndicator";
              goto LABEL_13;
            case 242:
              uint64_t v18 = *v8;
              uint64_t v19 = "metaMismatchReread";
              goto LABEL_13;
            case 243:
              uint64_t v18 = *v8;
              uint64_t v19 = "numS3SleepOps";
              goto LABEL_13;
            case 244:
              uint64_t v18 = *v8;
              uint64_t v19 = "odtsCurrent";
              goto LABEL_13;
            case 245:
              uint64_t v18 = *v8;
              uint64_t v19 = "prefetchReads";
              goto LABEL_13;
            case 246:
              uint64_t v18 = *v8;
              uint64_t v19 = "prefetchHits";
              goto LABEL_13;
            case 247:
              uint64_t v18 = *v8;
              uint64_t v19 = "prefetchWritesInvalidation";
              goto LABEL_13;
            case 248:
              uint64_t v18 = *v8;
              uint64_t v19 = "indmbUnitsTotal";
              goto LABEL_13;
            case 249:
              uint64_t v18 = *v8;
              uint64_t v19 = "selfThrottlingEngage";
              goto LABEL_13;
            case 250:
              uint64_t v18 = *v8;
              uint64_t v19 = "selfThrottlingDisengage";
              goto LABEL_13;
            case 252:
              uint64_t v18 = *v8;
              uint64_t v19 = "AbortSkip_WlpMode";
              goto LABEL_13;
            case 253:
              uint64_t v18 = *v8;
              uint64_t v19 = "hostWritesWlpMode";
              goto LABEL_13;
            case 254:
              uint64_t v18 = *v8;
              uint64_t v19 = "numClogDoubleUnc";
              goto LABEL_13;
            case 256:
              uint64_t v18 = *v8;
              uint64_t v19 = "AbortPad_WlpMode";
              goto LABEL_13;
            case 257:
              uint64_t v18 = *v8;
              uint64_t v19 = "bonfireIntermediateBandErases";
              goto LABEL_13;
            case 258:
              uint64_t v18 = *v8;
              uint64_t v19 = "bonfireUserBandErases";
              goto LABEL_13;
            case 259:
              uint64_t v18 = *v8;
              uint64_t v19 = "bonfireIntermediateBandProgs";
              goto LABEL_13;
            case 260:
              uint64_t v18 = *v8;
              uint64_t v19 = "bonfireUserBandProgs";
              goto LABEL_13;
            case 261:
              uint64_t v18 = *v8;
              uint64_t v19 = "bonfireIntermediatePageReads";
              goto LABEL_13;
            case 262:
              uint64_t v18 = *v8;
              uint64_t v19 = "bonfireUserPageReads";
              goto LABEL_13;
            case 263:
              uint64_t v18 = *v8;
              uint64_t v19 = "refreshUtil00";
              goto LABEL_13;
            case 264:
              uint64_t v18 = *v8;
              uint64_t v19 = "failToReadUtil00";
              goto LABEL_13;
            case 265:
              id v20 = "readCountHisto";
              uint64_t v21 = a1;
              int v22 = 265;
LABEL_19:
              __int128 v14 = v8;
              unsigned int v15 = 5;
              goto LABEL_12;
            case 266:
              id v20 = "readAmpHisto";
              uint64_t v21 = a1;
              int v22 = 266;
              goto LABEL_85;
            case 267:
              uint64_t v18 = *v8;
              uint64_t v19 = "totalReadAmp";
              goto LABEL_13;
            case 268:
              id v20 = "nvmeModeSelect";
              uint64_t v21 = a1;
              int v22 = 268;
              goto LABEL_22;
            case 269:
              id v20 = "numBootBlockRefreshSuccess";
              uint64_t v21 = a1;
              int v22 = 269;
              goto LABEL_23;
            case 270:
              id v20 = "numBootBlockRefreshFail";
              uint64_t v21 = a1;
              int v22 = 270;
              goto LABEL_23;
            case 271:
              uint64_t v18 = *v8;
              uint64_t v19 = "numUnsupportedAsi";
              goto LABEL_13;
            case 272:
              uint64_t v18 = *v8;
              uint64_t v19 = "NumTerminatedProgramSegs";
              goto LABEL_13;
            case 273:
              uint64_t v18 = *v8;
              uint64_t v19 = "indParityPagesDrops";
              goto LABEL_13;
            case 274:
              uint64_t v18 = *v8;
              uint64_t v19 = "indFlowPrograms";
              goto LABEL_13;
            case 277:
              id v20 = "powerBudgetSelect";
              uint64_t v21 = a1;
              int v22 = 277;
LABEL_22:
              __int128 v14 = v8;
              unsigned int v15 = 4;
              goto LABEL_12;
            case 279:
              uint64_t v18 = *v8;
              uint64_t v19 = "RxBurnNandWrites";
              goto LABEL_13;
            case 280:
              id v20 = "E2EDPErrorCounters";
              uint64_t v21 = a1;
              int v22 = 280;
LABEL_153:
              __int128 v14 = v8;
              unsigned int v15 = 12;
              goto LABEL_12;
            case 281:
              uint64_t v18 = *v8;
              uint64_t v19 = "wcacheSectorsMax";
              goto LABEL_13;
            case 282:
              uint64_t v18 = *v8;
              uint64_t v19 = "wcacheSectorsMin";
              goto LABEL_13;
            case 283:
              uint64_t v18 = *v8;
              uint64_t v19 = "wcacheSectorsCur";
              goto LABEL_13;
            case 284:
              uint64_t v18 = *v8;
              uint64_t v19 = "wcacheDS_SectorsMax";
              goto LABEL_13;
            case 285:
              uint64_t v18 = *v8;
              uint64_t v19 = "wcacheDS_SectorsMin";
              goto LABEL_13;
            case 286:
              uint64_t v18 = *v8;
              uint64_t v19 = "wcacheDS_SectorsCur";
              goto LABEL_13;
            case 287:
              uint64_t v18 = *v8;
              uint64_t v19 = "wcacheFS_Reads";
              goto LABEL_13;
            case 288:
              uint64_t v18 = *v8;
              uint64_t v19 = "wcacheDS_Reads";
              goto LABEL_13;
            case 289:
              id v20 = "mspBootBlockReadFail";
              uint64_t v21 = a1;
              int v22 = 289;
              goto LABEL_155;
            case 290:
              id v20 = "mspBootBlockProgFail";
              uint64_t v21 = a1;
              int v22 = 290;
              goto LABEL_155;
            case 291:
              id v20 = "mspBootBlockEraseFail";
              uint64_t v21 = a1;
              int v22 = 291;
              goto LABEL_155;
            case 292:
              uint64_t v18 = *v8;
              uint64_t v19 = "bandsRefreshedOnError";
              goto LABEL_13;
            default:
              switch(v7)
              {
                case 298:
                  id v20 = "perHostReads";
                  uint64_t v21 = a1;
                  int v22 = 298;
                  goto LABEL_20;
                case 299:
                  id v20 = "perHostReadXacts";
                  uint64_t v21 = a1;
                  int v22 = 299;
                  goto LABEL_20;
                case 300:
                  id v20 = "perHostWrites";
                  uint64_t v21 = a1;
                  int v22 = 300;
                  goto LABEL_20;
                case 301:
                  id v20 = "perHostWriteXacts";
                  uint64_t v21 = a1;
                  int v22 = 301;
                  goto LABEL_20;
                case 302:
                  id v20 = "perHostNumFlushes";
                  uint64_t v21 = a1;
                  int v22 = 302;
                  goto LABEL_20;
                case 303:
                  id v20 = "perHostNumFences";
                  uint64_t v21 = a1;
                  int v22 = 303;
                  goto LABEL_20;
                case 304:
                  id v20 = "commitPadSectorsPerFlow";
                  uint64_t v21 = a1;
                  int v22 = 304;
                  goto LABEL_11;
                case 305:
                  id v20 = "wcacheDSOverWrLogSizeCnts";
                  uint64_t v21 = a1;
                  int v22 = 305;
                  goto LABEL_11;
                case 306:
                  id v20 = "wcacheDSOverWrSizeByFlow";
                  uint64_t v21 = a1;
                  int v22 = 306;
                  goto LABEL_22;
                case 307:
                  id v20 = "CmdRaisePrioiryEvents";
                  uint64_t v21 = a1;
                  int v22 = 307;
                  goto LABEL_11;
                case 308:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "utilNumVerification";
                  goto LABEL_13;
                case 309:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "utilRefreshes";
                  goto LABEL_13;
                case 310:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "utilBDRErrors";
                  goto LABEL_13;
                case 311:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "indBandsPerFlow";
                  goto LABEL_13;
                case 312:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "secsPerIndFlow";
                  goto LABEL_13;
                case 313:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "indDecodedECC";
                  goto LABEL_13;
                case 314:
                  id v20 = "numBootBlockValidateSuccess";
                  uint64_t v21 = a1;
                  int v22 = 314;
                  goto LABEL_23;
                case 315:
                  id v20 = "numBootBlockValidateFail";
                  uint64_t v21 = a1;
                  int v22 = 315;
                  goto LABEL_23;
                case 316:
                  id v20 = "clogPagesFillingPercentage";
                  uint64_t v21 = a1;
                  int v22 = 316;
                  goto LABEL_22;
                case 317:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "bdrCalTimeAccFactor";
                  goto LABEL_13;
                case 318:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "bootChainRdError";
                  goto LABEL_13;
                case 319:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "bootChainBlankError";
                  goto LABEL_13;
                case 320:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "bootChainRefreshError";
                  goto LABEL_13;
                case 321:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "bootChainVersionError";
                  goto LABEL_13;
                case 322:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "mspBootBlockMismatch";
                  goto LABEL_13;
                case 323:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "mspBootBlockMismatchErr";
                  goto LABEL_13;
                case 324:
                  id v20 = "bitflipAddr";
                  uint64_t v21 = a1;
                  int v22 = 324;
                  goto LABEL_19;
                case 325:
                  id v20 = "bitflipCount";
                  uint64_t v21 = a1;
                  int v22 = 325;
                  goto LABEL_19;
                case 326:
                  id v20 = "bitflipDupes";
                  uint64_t v21 = a1;
                  int v22 = 326;
                  goto LABEL_19;
                case 327:
                  id v20 = "bandsMaxTempHisto";
                  uint64_t v21 = a1;
                  int v22 = 327;
                  goto LABEL_196;
                case 328:
                  id v20 = "bandsMinTempHisto";
                  uint64_t v21 = a1;
                  int v22 = 328;
                  goto LABEL_196;
                case 329:
                  id v20 = "bandsLifeTimeTempHisto";
                  uint64_t v21 = a1;
                  int v22 = 329;
LABEL_196:
                  __int128 v14 = v8;
                  unsigned int v15 = 30;
                  goto LABEL_12;
                case 330:
                  id v20 = "bandsDeltaTempHisto";
                  uint64_t v21 = a1;
                  int v22 = 330;
                  __int128 v14 = v8;
                  unsigned int v15 = 22;
                  goto LABEL_12;
                case 331:
                  id v20 = "bandsCrossTempHisto";
                  uint64_t v21 = a1;
                  int v22 = 331;
                  __int128 v14 = v8;
                  unsigned int v15 = 45;
                  goto LABEL_12;
                case 332:
                  id v20 = "wcacheWaitLogMs";
                  uint64_t v21 = a1;
                  int v22 = 332;
                  goto LABEL_11;
                case 333:
                  id v20 = "wcacheDS_segsSortedLogSize";
                  uint64_t v21 = a1;
                  int v22 = 333;
                  goto LABEL_11;
                case 334:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "numFirmwareWrites";
                  goto LABEL_13;
                case 335:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "numBisWrites";
                  goto LABEL_13;
                case 336:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "numBootChainUpdates";
                  goto LABEL_13;
                case 337:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "cntCalTimeWentBackWard";
                  goto LABEL_13;
                case 338:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "indBoRecoveries";
                  goto LABEL_13;
                case 340:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "numCrossTempUecc";
                  goto LABEL_13;
                case 341:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "latencyMonitorError";
                  goto LABEL_13;
                case 343:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "utilUeccReads";
                  goto LABEL_13;
                case 344:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "numOfAvoidedGCDueToTemp";
                  goto LABEL_13;
                case 345:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "forceShutdowns";
                  goto LABEL_13;
                case 346:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "gcSlcDestinations";
                  goto LABEL_13;
                case 347:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "indReplayExtUsed";
                  goto LABEL_13;
                case 348:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "defectsPerPackageOverflow";
                  goto LABEL_13;
                case 349:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "RxBurnIntBandsProgrammed";
                  goto LABEL_13;
                case 350:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "RxBurnUsrBandsProgrammed";
                  goto LABEL_13;
                case 351:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "RxBurnIntNandWrites";
                  goto LABEL_13;
                case 352:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "RxBurnUsrNandWrites";
                  goto LABEL_13;
                case 353:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "clogLastStripeUeccs";
                  goto LABEL_13;
                case 354:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "GC_MidDestSrcSwitchSLC2TLC";
                  goto LABEL_13;
                case 355:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "GC_MidDestSrcSwitchTLC2SLC";
                  goto LABEL_13;
                case 356:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "nvme_stats_shutdown_count_host0_normal";
                  goto LABEL_13;
                case 357:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "nvme_stats_shutdown_count_host1_normal";
                  goto LABEL_13;
                case 358:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "nvme_stats_shutdown_count_host0_s2r";
                  goto LABEL_13;
                case 359:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "nvme_stats_shutdown_count_host1_s2r";
                  goto LABEL_13;
                case 360:
                  id v20 = "gcPDusterIntrSrcValidityHisto";
                  uint64_t v21 = a1;
                  int v22 = 360;
                  goto LABEL_85;
                case 361:
                  id v20 = "gcPDusterUserSrcValidityHisto";
                  uint64_t v21 = a1;
                  int v22 = 361;
                  goto LABEL_85;
                case 362:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "raidFailedReadParity";
                  goto LABEL_13;
                case 364:
                  uint64_t v18 = *v8;
                  uint64_t v19 = "lhotNumSkipes";
                  goto LABEL_13;
                default:
                  switch(v7)
                  {
                    case 365:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "lhotNumIsHotCalls";
                      goto LABEL_13;
                    case 366:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "lhotFullLap";
                      goto LABEL_13;
                    case 367:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "lhotSkipPrecent";
                      goto LABEL_13;
                    case 368:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "eraseSuspendEvents";
                      goto LABEL_13;
                    case 369:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "eraseSuspendedStatuses";
                      goto LABEL_13;
                    case 370:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "eraseSuspendedBands";
                      goto LABEL_13;
                    case 371:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "eraseSuspendSituationsBelowThreshold";
                      goto LABEL_13;
                    case 372:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "eraseSuspendSituationsAboveThreshold";
                      goto LABEL_13;
                    case 373:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "eraseSuspendReadChainsProcessed";
                      goto LABEL_13;
                    case 374:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "bdrLastDoneHr";
                      goto LABEL_13;
                    case 375:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "bdrBackupThreshHrs";
                      goto LABEL_13;
                    case 376:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "clogPortableProgBufs";
                      goto LABEL_13;
                    case 377:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "clogPortableDropBufs";
                      goto LABEL_13;
                    case 378:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "clogPortablePadSectors";
                      goto LABEL_13;
                    case 379:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "numRetiredBlocks";
                      goto LABEL_13;
                    case 381:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "numRefreshOnErrNandRefreshPerf";
                      goto LABEL_13;
                    case 382:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "raidReconstructReads";
                      goto LABEL_13;
                    case 383:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "gcReadsNoBlog";
                      goto LABEL_13;
                    case 384:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "AbortSkip_MPBXReadVerifyClosedBand";
                      goto LABEL_13;
                    case 385:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "openBandReadFail";
                      goto LABEL_13;
                    case 386:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "AbortSkip_MPBXReadVerifyOpenBand";
                      goto LABEL_13;
                    case 387:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "AbortSkip_MBPXFailedRebuildingParity";
                      goto LABEL_13;
                    case 388:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "raidSuccessfulPMXReconstructionInternal";
                      goto LABEL_13;
                    case 389:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "raidSuccessfulPMXReconstructionHost";
                      goto LABEL_13;
                    case 390:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "raidFailedPMXReconstructionInternal";
                      goto LABEL_13;
                    case 391:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "raidFailedPMXReconstructionHost";
                      goto LABEL_13;
                    case 392:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "raidSuccessfulRMXReconstructionInternal";
                      goto LABEL_13;
                    case 393:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "raidSuccessfulRMXReconstructionHost";
                      goto LABEL_13;
                    case 394:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "raidFailedRMXReconstructionInternal";
                      goto LABEL_13;
                    case 395:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "raidFailedRMXReconstructionHost";
                      goto LABEL_13;
                    case 396:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "raidFailedReadParityInternal";
                      goto LABEL_13;
                    case 397:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "raidFailedReadQParityInternal";
                      goto LABEL_13;
                    case 398:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "raidFailedReadQParity";
                      goto LABEL_13;
                    case 399:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "raidFailedReadQCopy";
                      goto LABEL_13;
                    case 400:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "raidFailedReconstructionQParity";
                      goto LABEL_13;
                    case 401:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "offlineBlocksCnt";
                      goto LABEL_13;
                    case 402:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "bork0Revectors";
                      goto LABEL_13;
                    case 403:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "raidFailedReadBlog";
                      goto LABEL_13;
                    case 404:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "numReliabilityRefreshes";
                      goto LABEL_13;
                    case 405:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "raidFailedReadQCopyInternal";
                      goto LABEL_13;
                    case 406:
                      id v20 = "raidReconstructSuccessFlow";
                      uint64_t v21 = a1;
                      int v22 = 406;
                      goto LABEL_19;
                    case 407:
                      id v20 = "raidReconstructFailFlow";
                      uint64_t v21 = a1;
                      int v22 = 407;
                      goto LABEL_19;
                    case 408:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "raidReconstructFailP";
                      goto LABEL_13;
                    case 409:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "raidReconstructFailQ";
                      goto LABEL_13;
                    case 410:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "raidReconstructFailUECC";
                      goto LABEL_13;
                    case 411:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "raidReconstructFailUnsupp";
                      goto LABEL_13;
                    case 412:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "raidUECCOpenBand";
                      goto LABEL_13;
                    case 414:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "ueccReads";
                      goto LABEL_13;
                    case 416:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "raidSuccessfulVerify";
                      goto LABEL_13;
                    case 417:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "raidFailedVerify";
                      goto LABEL_13;
                    case 418:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "numBandsVerified";
                      goto LABEL_13;
                    case 419:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "cache_heads";
                      goto LABEL_13;
                    case 420:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "AbortSkip_RMXtoMPBX";
                      goto LABEL_13;
                    case 421:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "s3eFwVer";
                      goto LABEL_13;
                    case 422:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "readVerifyNative";
                      goto LABEL_13;
                    case 423:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "reducedReadVerifyNative";
                      goto LABEL_13;
                    case 424:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "readVerifySlc";
                      goto LABEL_13;
                    case 425:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "reducedReadVerifySlc";
                      goto LABEL_13;
                    case 426:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "RxBurnEvictions";
                      goto LABEL_13;
                    case 427:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "directToTLCBands";
                      goto LABEL_13;
                    case 428:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "nandDesc";
                      goto LABEL_13;
                    case 429:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "fwUpdatesPercentUsed";
                      goto LABEL_13;
                    case 430:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "slcPercentUsed";
                      goto LABEL_13;
                    case 431:
                      uint64_t v18 = *v8;
                      uint64_t v19 = "percentUsed";
                      goto LABEL_13;
                    default:
                      switch(v7)
                      {
                        case 432:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "hostAutoWrites";
                          goto LABEL_13;
                        case 433:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "hostAutoWriteXacts";
                          goto LABEL_13;
                        case 434:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "gcDestDynamic";
                          goto LABEL_13;
                        case 435:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "gcDestStatic";
                          goto LABEL_13;
                        case 436:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "gcDestWearlevel";
                          goto LABEL_13;
                        case 437:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "gcDestParity";
                          goto LABEL_13;
                        case 438:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "AbortSkip_Format";
                          goto LABEL_13;
                        case 440:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "raidSLCPadding";
                          goto LABEL_13;
                        case 441:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "raidGCBands";
                          goto LABEL_13;
                        case 442:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "raidGCSectors";
                          goto LABEL_13;
                        case 443:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "raidGCPadding";
                          goto LABEL_13;
                        case 444:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "raidSLCBandsPerHostFlow";
                          goto LABEL_13;
                        case 445:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "raidSLCSecsPerHostFlow";
                          goto LABEL_13;
                        case 446:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "rxBurnMinCycleRuns";
                          goto LABEL_13;
                        case 447:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "clogNumFastCxt";
                          goto LABEL_13;
                        case 448:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "clogNumRapidReboots";
                          goto LABEL_13;
                        case 449:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "clogFastCxtAbvThr";
                          goto LABEL_13;
                        case 450:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "rxBurnDiffModeRuns";
                          goto LABEL_13;
                        case 452:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "indReadVerifyFail";
                          goto LABEL_13;
                        case 453:
                          id v20 = "numOfThrottlingEntriesPerReadLevel";
                          uint64_t v21 = a1;
                          int v22 = 453;
                          goto LABEL_85;
                        case 454:
                          id v20 = "numOfThrottlingEntriesPerWriteLevel";
                          uint64_t v21 = a1;
                          int v22 = 454;
                          goto LABEL_85;
                        case 456:
                          id v20 = "slcFifoDepth";
                          uint64_t v21 = a1;
                          int v22 = 456;
                          goto LABEL_11;
                        case 457:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "wcacheSectorsDirtyIdle";
                          goto LABEL_13;
                        case 458:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "wcacheDS_SectorsDirtyIdle";
                          goto LABEL_13;
                        case 459:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "wcacheFS_MbytesDirtyIdle";
                          goto LABEL_13;
                        case 460:
                          id v20 = "CacheDepthVsThroughput";
                          uint64_t v21 = a1;
                          int v22 = 460;
                          __int128 v14 = v8;
                          unsigned int v15 = 256;
                          goto LABEL_12;
                        case 461:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "directToTLCSectors";
                          goto LABEL_13;
                        case 462:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "fallbackToWaterfall";
                          goto LABEL_13;
                        case 463:
                          id v20 = "balanceProportionBucketsHistogram";
                          uint64_t v21 = a1;
                          int v22 = 463;
LABEL_320:
                          __int128 v14 = v8;
                          unsigned int v15 = 11;
                          goto LABEL_12;
                        case 464:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "lockToTlc";
                          goto LABEL_13;
                        case 465:
                          id v20 = "burstSizeHistogram";
                          uint64_t v21 = a1;
                          int v22 = 465;
                          goto LABEL_11;
                        case 466:
                          id v20 = "qosDirectToTLC";
                          uint64_t v21 = a1;
                          int v22 = 466;
                          goto LABEL_342;
                        case 467:
                          id v20 = "maxQosDirectToTLC";
                          uint64_t v21 = a1;
                          int v22 = 467;
                          goto LABEL_22;
                        case 468:
                          id v20 = "wcacheDirtyAtFlush";
                          uint64_t v21 = a1;
                          int v22 = 468;
                          goto LABEL_85;
                        case 469:
                          id v20 = "raidReconstructSuccessPartition";
                          uint64_t v21 = a1;
                          int v22 = 469;
                          goto LABEL_20;
                        case 470:
                          id v20 = "raidReconstructFailPartition";
                          uint64_t v21 = a1;
                          int v22 = 470;
                          goto LABEL_20;
                        case 471:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "raidUncleanBootBandFail";
                          goto LABEL_13;
                        case 472:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "raidReconstructFailBandFlowHost";
                          goto LABEL_13;
                        case 473:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "raidReconstructFailBandFlowGC";
                          goto LABEL_13;
                        case 476:
                          id v20 = "raidSuccessfulRecoLbaRange";
                          uint64_t v21 = a1;
                          int v22 = 476;
                          goto LABEL_20;
                        case 477:
                          id v20 = "raidFailedRecoLbaRange";
                          uint64_t v21 = a1;
                          int v22 = 477;
                          goto LABEL_20;
                        case 481:
                          id v20 = "skinnyBandErases_481";
                          uint64_t v21 = a1;
                          int v22 = 481;
                          goto LABEL_155;
                        case 483:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "tlcOverHeatWaterfall";
                          goto LABEL_13;
                        case 484:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "skinnyCyclesConvert";
                          goto LABEL_13;
                        case 485:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "non_proportional_directToTLCSectors";
                          goto LABEL_13;
                        case 486:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "maxFailedFastCxtSync";
                          goto LABEL_13;
                        case 487:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "numFormatUserArea";
                          goto LABEL_13;
                        case 488:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "clogFastCxtSyncAborted";
                          goto LABEL_13;
                        case 489:
                          id v20 = "clogOccupationSectors";
                          uint64_t v21 = a1;
                          int v22 = 489;
                          goto LABEL_19;
                        case 490:
                          id v20 = "bdrTmpHist";
                          uint64_t v21 = a1;
                          int v22 = 490;
LABEL_342:
                          __int128 v14 = v8;
                          unsigned int v15 = 64;
                          goto LABEL_12;
                        case 491:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "numFWUpdates";
                          goto LABEL_13;
                        case 492:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "numClogLoadFails";
                          goto LABEL_13;
                        case 493:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "rxBurnNumForcedDiffMode";
                          goto LABEL_13;
                        case 494:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "RD_numSaves";
                          goto LABEL_13;
                        case 495:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "eanCompressWrites";
                          goto LABEL_13;
                        case 496:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "eanHostWrites";
                          goto LABEL_13;
                        case 497:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "bandPreErases";
                          goto LABEL_13;
                        case 498:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "eanHostUnmaps";
                          goto LABEL_13;
                        case 499:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "eanHostFlushes";
                          goto LABEL_13;
                        case 500:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "eanFastWrites";
                          goto LABEL_13;
                        case 501:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "autowriteDS2FSCollisions";
                          goto LABEL_13;
                        case 502:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "autowriteWaitTransferTaskBlocks";
                          goto LABEL_13;
                        case 503:
                          id v20 = "avgCycle";
                          uint64_t v21 = a1;
                          int v22 = 503;
                          goto LABEL_20;
                        case 504:
                          uint64_t v18 = *v8;
                          uint64_t v19 = "RD_DeferredClearsOverflowCnt";
                          goto LABEL_13;
                        default:
                          switch(v7)
                          {
                            case 505:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "maxVerticsInBand";
                              goto LABEL_13;
                            case 506:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "numVertics";
                              goto LABEL_13;
                            case 507:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "exceededCVertics";
                              goto LABEL_13;
                            case 510:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "raidReconstructFailMismatch";
                              goto LABEL_13;
                            case 511:
                              id v20 = "mspbootBlockRefreshCnt";
                              uint64_t v21 = a1;
                              int v22 = 511;
                              goto LABEL_155;
                            case 516:
                              id v20 = "mspBootBlockRefreshTime";
                              uint64_t v21 = a1;
                              int v22 = 516;
                              goto LABEL_155;
                            case 517:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "mspBootBlockCountPerMsp";
                              goto LABEL_13;
                            case 518:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "skinnyRevectorSLC";
                              goto LABEL_13;
                            case 519:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "skinnyRevectorTLC";
                              goto LABEL_13;
                            case 520:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "perfSetupAttempts";
                              goto LABEL_13;
                            case 521:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "perfSetupSuccesses";
                              goto LABEL_13;
                            case 522:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "perfWriteAttempts";
                              goto LABEL_13;
                            case 523:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "perfWriteSuccesses";
                              goto LABEL_13;
                            case 524:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "perfReadAttempts";
                              goto LABEL_13;
                            case 525:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "perfReadSuccesses";
                              goto LABEL_13;
                            case 526:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "perfCleanupAttempts";
                              goto LABEL_13;
                            case 527:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "perfCleanupSuccesses";
                              goto LABEL_13;
                            case 530:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "firstFailedDieId";
                              goto LABEL_13;
                            case 531:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "numDieFailures";
                              goto LABEL_13;
                            case 532:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "spareAvailablePercent";
                              goto LABEL_13;
                            case 533:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "dataFabricErr";
                              goto LABEL_13;
                            case 534:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "downlinkFabricErr";
                              goto LABEL_13;
                            case 535:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "prpAccTimeoutErr";
                              goto LABEL_13;
                            case 537:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "uplinkFabricErr";
                              goto LABEL_13;
                            case 538:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "skinnyBandsGBB";
                              goto LABEL_13;
                            case 539:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "AbortPad_GcMustPadBand";
                              goto LABEL_13;
                            case 540:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "AbortPad_GcMustPadSkinny";
                              goto LABEL_13;
                            case 541:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "bdrHostPingInitial";
                              goto LABEL_13;
                            case 542:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "bdrHostPingMoreNeeded";
                              goto LABEL_13;
                            case 543:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "bandParityAllocationFailed";
                              goto LABEL_13;
                            case 544:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "fastHwBurstToSlc";
                              goto LABEL_13;
                            case 545:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "slowHwToTlc";
                              goto LABEL_13;
                            case 546:
                              id v20 = "slcDemandBurstSizeDetected";
                              uint64_t v21 = a1;
                              int v22 = 546;
                              goto LABEL_11;
                            case 547:
                              id v20 = "slcDemandBurstDur";
                              uint64_t v21 = a1;
                              int v22 = 547;
                              goto LABEL_11;
                            case 548:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "fastHwToTlcBurst";
                              goto LABEL_13;
                            case 549:
                              id v20 = "slcDemandBurstSizeSlc";
                              uint64_t v21 = a1;
                              int v22 = 549;
                              goto LABEL_11;
                            case 551:
                              id v20 = "balanceProportionBucketsHistogramTlc";
                              uint64_t v21 = a1;
                              int v22 = 551;
                              goto LABEL_320;
                            case 553:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "slowHwFlushToSlc";
                              goto LABEL_13;
                            case 557:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "slowHwToSlc";
                              goto LABEL_13;
                            case 558:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "flushNwToSlc";
                              goto LABEL_13;
                            case 559:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "flushNwToTlc";
                              goto LABEL_13;
                            case 560:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "oslcHw";
                              goto LABEL_13;
                            case 561:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "oslcTransitions";
                              goto LABEL_13;
                            case 563:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "slcDemandFlushCount";
                              goto LABEL_13;
                            case 564:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "slcDemandBurstCount";
                              goto LABEL_13;
                            case 565:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "oslcBaseAvgPE";
                              goto LABEL_13;
                            case 566:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "raidReconstructFailNoSPBX";
                              goto LABEL_13;
                            case 567:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "raidReconstructFailDouble";
                              goto LABEL_13;
                            case 568:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "oslcFastWAmpUOnOff";
                              goto LABEL_13;
                            case 569:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "oslcSlowWAmpUOnOff";
                              goto LABEL_13;
                            case 570:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "raidReconstructFailInvalid";
                              goto LABEL_13;
                            case 572:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "oslcLastWAmpUx10";
                              goto LABEL_13;
                            case 573:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "raidFailedReadNoBlog";
                              goto LABEL_13;
                            case 574:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "raidReconstructFailBlank";
                              goto LABEL_13;
                            case 575:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "oslcHotTLCOnOff";
                              goto LABEL_13;
                            case 576:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "gcVPackDestinations";
                              goto LABEL_13;
                            case 581:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "averageTLCPECycles";
                              goto LABEL_13;
                            case 582:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "averageSLCPECycles";
                              goto LABEL_13;
                            case 583:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "numAtomicBoots";
                              goto LABEL_13;
                            case 584:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "clogMinorMismatch";
                              goto LABEL_13;
                            case 586:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "raidExpectedFailRMXReconstructionInternal";
                              goto LABEL_13;
                            case 587:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "raidExpectedFailRMXReconstructionHost";
                              goto LABEL_13;
                            case 588:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "oslcGCinvalidations";
                              goto LABEL_13;
                            case 589:
                              uint64_t v18 = *v8;
                              uint64_t v19 = "oslcGCActivateReason";
                              goto LABEL_13;
                            default:
                              switch(v7)
                              {
                                case 590:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "oslcLowCleanBandsUOnOff";
                                  goto LABEL_13;
                                case 591:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "oslcTooManyGCMustOnOff";
                                  goto LABEL_13;
                                case 592:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "oslcBaseHostWrites";
                                  goto LABEL_13;
                                case 593:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "oslcBaseBandErases";
                                  goto LABEL_13;
                                case 594:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "oslcBdrBands";
                                  goto LABEL_13;
                                case 595:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "oslcBdrValid";
                                  goto LABEL_13;
                                case 596:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "unexpectedBlanksInternal";
                                  goto LABEL_13;
                                case 597:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "unexpectedBlanksOnRV";
                                  goto LABEL_13;
                                case 601:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "waterfallLockSectors";
                                  goto LABEL_13;
                                case 602:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "oslcGCActiveWrites";
                                  goto LABEL_13;
                                case 603:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "chipIdTemperatureSample";
                                  goto LABEL_13;
                                case 604:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "gcVPackWrites";
                                  goto LABEL_13;
                                case 605:
                                  id v20 = "gcActiveReasons";
                                  uint64_t v21 = a1;
                                  int v22 = 605;
                                  goto LABEL_11;
                                case 606:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "eanMaxInitTimeMs";
                                  goto LABEL_13;
                                case 607:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "eanMinToFirstReadTimeMs";
                                  goto LABEL_13;
                                case 608:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "skinnyAPGMRetire";
                                  goto LABEL_13;
                                case 609:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "unexpectedBlanksHost";
                                  goto LABEL_13;
                                case 610:
                                  id v20 = "pcieAerCounters";
                                  uint64_t v21 = a1;
                                  int v22 = 610;
                                  goto LABEL_342;
                                case 611:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "fastHwToTlcBalance";
                                  goto LABEL_13;
                                case 612:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "perfOSLCRuns";
                                  goto LABEL_13;
                                case 613:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "slcDemandBurstWritesInGC";
                                  goto LABEL_13;
                                case 614:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "slcDemandBurstWritesInTT";
                                  goto LABEL_13;
                                case 615:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "slcDemandBurstWritesInNRP";
                                  goto LABEL_13;
                                case 616:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "perfTotalDmaMb";
                                  goto LABEL_13;
                                case 617:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "eanAvgInitTimeMs";
                                  goto LABEL_13;
                                case 618:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "eanAvgToFirstReadTimeMs";
                                  goto LABEL_13;
                                case 619:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "eanMaxBootReadTimeMs";
                                  goto LABEL_13;
                                case 620:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "eanAvgBootReadTimeMs";
                                  goto LABEL_13;
                                case 621:
                                  id v20 = "eanBootReadsHist";
                                  uint64_t v21 = a1;
                                  int v22 = 621;
                                  goto LABEL_11;
                                case 622:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "maxBgInitTimeMs";
                                  goto LABEL_13;
                                case 623:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "avgBgInitTimeMs";
                                  goto LABEL_13;
                                case 624:
                                  id v20 = "clogFailReason";
                                  uint64_t v21 = a1;
                                  int v22 = 624;
                                  goto LABEL_85;
                                case 625:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "eanMinBootReadMBPerSec";
                                  goto LABEL_13;
                                case 626:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "eanAvgBootReadMBPerSec";
                                  goto LABEL_13;
                                case 627:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "minSkinnyPECycles";
                                  goto LABEL_13;
                                case 628:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "maxSkinnyPECycles";
                                  goto LABEL_13;
                                case 629:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "averageSkinnyPECycles";
                                  goto LABEL_13;
                                case 630:
                                  id v20 = "raidSuccessfulRecoEAN";
                                  uint64_t v21 = a1;
                                  int v22 = 630;
                                  goto LABEL_463;
                                case 631:
                                  id v20 = "raidFailedRecoEAN";
                                  uint64_t v21 = a1;
                                  int v22 = 631;
                                  goto LABEL_463;
                                case 632:
                                  id v20 = "eanFirstReadMode";
                                  uint64_t v21 = a1;
                                  int v22 = 632;
LABEL_463:
                                  __int128 v14 = v8;
                                  unsigned int v15 = 6;
                                  goto LABEL_12;
                                case 635:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "oslcHwGC";
                                  goto LABEL_13;
                                case 636:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "oslcHwTT";
                                  goto LABEL_13;
                                case 637:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "oslcHwNRP";
                                  goto LABEL_13;
                                case 638:
                                  id v20 = "oslcDemandBurstSize";
                                  uint64_t v21 = a1;
                                  int v22 = 638;
                                  goto LABEL_11;
                                case 639:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "raidReconstructSuccessBandFlowOslc";
                                  goto LABEL_13;
                                case 640:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "raidReconstructFailBandFlowOslc";
                                  goto LABEL_13;
                                case 641:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "raidFailSectors";
                                  goto LABEL_13;
                                case 642:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "eanFailSectors";
                                  goto LABEL_13;
                                case 643:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "bdrTimeMode";
                                  goto LABEL_13;
                                case 644:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "raidParityNotSavedP";
                                  goto LABEL_13;
                                case 645:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "raidParityNotSavedQ";
                                  goto LABEL_13;
                                case 646:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "raidParityInvalid";
                                  goto LABEL_13;
                                case 647:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "raidParityUnknown";
                                  goto LABEL_13;
                                case 648:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "raidParityUnmapped";
                                  goto LABEL_13;
                                case 649:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "raidParityGCUnc";
                                  goto LABEL_13;
                                case 657:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "AbortSkip_MPBXProbational";
                                  goto LABEL_13;
                                case 659:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "raidVerificationReads";
                                  goto LABEL_13;
                                case 666:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "nofDies";
                                  goto LABEL_13;
                                case 671:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "skinnyBandsNum";
                                  goto LABEL_13;
                                case 672:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "skinnyBandsNumDips";
                                  goto LABEL_13;
                                case 674:
                                  id v20 = "oslcNoVotesHw";
                                  uint64_t v21 = a1;
                                  int v22 = 674;
                                  goto LABEL_23;
                                case 675:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "totalLbas";
                                  goto LABEL_13;
                                case 676:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "bdrHostPingExtra";
                                  goto LABEL_13;
                                case 677:
                                  uint64_t v18 = *v8;
                                  uint64_t v19 = "magazineInstanceMeta";
                                  goto LABEL_13;
                                default:
                                  switch(v7)
                                  {
                                    case 680:
                                      id v20 = "magazineFWVersion";
                                      uint64_t v21 = a1;
                                      int v22 = 680;
                                      goto LABEL_21;
                                    case 681:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "raidReconstructFailPMXUnsup";
                                      goto LABEL_13;
                                    case 682:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "raidReconstructFailBMXUnsup";
                                      goto LABEL_13;
                                    case 683:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "iBootNANDResets";
                                      goto LABEL_13;
                                    case 684:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "pcieClkreqHighTimeout";
                                      goto LABEL_13;
                                    case 687:
                                      id v20 = "cbdrInitSent";
                                      uint64_t v21 = a1;
                                      int v22 = 687;
LABEL_21:
                                      __int128 v14 = v8;
                                      unsigned int v15 = 3;
                                      goto LABEL_12;
                                    case 688:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "cbdrPauseSent";
                                      goto LABEL_13;
                                    case 689:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "cbdrResumeSent";
                                      goto LABEL_13;
                                    case 690:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "cbdrGetResultSent";
                                      goto LABEL_13;
                                    case 691:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "cbdrEarlyExits";
                                      goto LABEL_13;
                                    case 694:
                                      id v20 = "cbdrRefreshGrades";
                                      uint64_t v21 = a1;
                                      int v22 = 694;
                                      goto LABEL_11;
                                    case 695:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "cbdrNotEnoughReads";
                                      goto LABEL_13;
                                    case 696:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "cbdrAborts";
                                      goto LABEL_13;
                                    case 697:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "TurboRaidHostClassifications";
                                      goto LABEL_13;
                                    case 698:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "TurboRaidInternalClassifications";
                                      goto LABEL_13;
                                    case 699:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "cbdrFullyDone";
                                      goto LABEL_13;
                                    case 702:
                                      id v20 = "vcurve";
                                      uint64_t v21 = a1;
                                      int v22 = 702;
                                      goto LABEL_155;
                                    case 703:
                                      id v20 = "injDepth";
                                      uint64_t v21 = a1;
                                      int v22 = 703;
                                      goto LABEL_153;
                                    case 704:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "logical_disk_occupied_promiles";
                                      goto LABEL_13;
                                    case 711:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "raidPrevFailedReconstructSkip";
                                      goto LABEL_13;
                                    case 712:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "TurboRaidSuccessfulHostAuxReads";
                                      goto LABEL_13;
                                    case 713:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "TurboRaidSuccessfulInternalAuxReads";
                                      goto LABEL_13;
                                    case 714:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "turboRaidClassificationReliabilityHost";
                                      goto LABEL_13;
                                    case 715:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "turboRaidClassificationReliabilityInternal";
                                      goto LABEL_13;
                                    case 716:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "turboRaidClassificationQualityHost";
                                      goto LABEL_13;
                                    case 717:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "turboRaidClassificationQualityInternal";
                                      goto LABEL_13;
                                    case 719:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "skinnyBandErases";
                                      goto LABEL_13;
                                    case 721:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "gcPDusterDestinations";
                                      goto LABEL_13;
                                    case 722:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "gcPDusterWrites";
                                      goto LABEL_13;
                                    case 730:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "rvFails";
                                      goto LABEL_13;
                                    case 737:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "TurboRaidFailedHostAuxReads";
                                      goto LABEL_13;
                                    case 738:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "TurboRaidFailedInternalAuxReads";
                                      goto LABEL_13;
                                    case 741:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "autoSkipTriggers";
                                      goto LABEL_13;
                                    case 742:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "autoSkipPlanes";
                                      goto LABEL_13;
                                    case 744:
                                      id v20 = "raidReconstructDurationHisto";
                                      uint64_t v21 = a1;
                                      int v22 = 744;
                                      goto LABEL_23;
                                    case 745:
                                      id v20 = "failsOnReconstructHisto";
                                      uint64_t v21 = a1;
                                      int v22 = 745;
                                      goto LABEL_23;
                                    case 746:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "bandKill_userFlattenExcessive";
                                      goto LABEL_13;
                                    case 747:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "bandKill_IntFlattenExcessive";
                                      goto LABEL_13;
                                    case 748:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "bandKill_userFlattenBalance";
                                      goto LABEL_13;
                                    case 749:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "bandKill_intFlattenBalance";
                                      goto LABEL_13;
                                    case 750:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "bandKill_formatVertExcessive";
                                      goto LABEL_13;
                                    case 751:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "bandKill_formatVertBalance";
                                      goto LABEL_13;
                                    case 753:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "cbdrNumSlowRefreshes";
                                      goto LABEL_13;
                                    case 754:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "cbdrNumFastRefreshes";
                                      goto LABEL_13;
                                    case 755:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "cbdrTotalRefreshValidity";
                                      goto LABEL_13;
                                    case 756:
                                      id v20 = "cbdrRefreshedAges";
                                      uint64_t v21 = a1;
                                      int v22 = 756;
                                      goto LABEL_545;
                                    case 758:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "cbdrSkippedBlocks";
                                      goto LABEL_13;
                                    case 759:
                                      id v20 = "cbdrScanPct";
                                      uint64_t v21 = a1;
                                      int v22 = 759;
                                      goto LABEL_19;
                                    case 760:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "raidSuccessfulBMXReconstructionInternal";
                                      goto LABEL_13;
                                    case 761:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "raidSuccessfulBMXReconstructionHost";
                                      goto LABEL_13;
                                    case 762:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "raidFailedBMXReconstructionInternal";
                                      goto LABEL_13;
                                    case 763:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "raidFailedBMXReconstructionHost";
                                      goto LABEL_13;
                                    case 764:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "ricSPRVFail";
                                      goto LABEL_13;
                                    case 765:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "ricMPRVFail";
                                      goto LABEL_13;
                                    case 767:
                                      id v20 = "cbdrRefreshGradesSLC";
                                      uint64_t v21 = a1;
                                      int v22 = 767;
                                      goto LABEL_11;
                                    case 768:
                                      id v20 = "cbdrRefreshedAgesSLC";
                                      uint64_t v21 = a1;
                                      int v22 = 768;
LABEL_545:
                                      __int128 v14 = v8;
                                      unsigned int v15 = 9;
                                      goto LABEL_12;
                                    case 769:
                                      id v20 = "cbdrScanPctSLC";
                                      uint64_t v21 = a1;
                                      int v22 = 769;
                                      goto LABEL_19;
                                    case 770:
                                      id v20 = "cpuBurstLength";
                                      uint64_t v21 = a1;
                                      int v22 = 770;
                                      goto LABEL_23;
                                    case 771:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "autoSkipRaidRecoFail";
                                      goto LABEL_13;
                                    case 772:
                                      id v20 = "dmReasonsSlc";
                                      uint64_t v21 = a1;
                                      int v22 = 772;
                                      goto LABEL_155;
                                    case 773:
                                      id v20 = "dmReasonsTlc";
                                      uint64_t v21 = a1;
                                      int v22 = 773;
                                      goto LABEL_155;
                                    case 774:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "raidReconstructFailBMXAbort";
                                      goto LABEL_13;
                                    case 775:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "bandKill_fatBindingNoBlocks";
                                      goto LABEL_13;
                                    case 776:
                                      uint64_t v18 = *v8;
                                      uint64_t v19 = "bandKill_fatBindingFewBlocks";
                                      goto LABEL_13;
                                    default:
                                      switch(v7)
                                      {
                                        case 777:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "numBadBootBlocks";
                                          goto LABEL_13;
                                        case 778:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "snapshotCPUHigh";
                                          goto LABEL_13;
                                        case 779:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "snapshotCPULow";
                                          goto LABEL_13;
                                        case 780:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "gcWithoutBMs";
                                          goto LABEL_13;
                                        case 781:
                                          id v20 = "gcSearchTimeHistory";
                                          uint64_t v21 = a1;
                                          int v22 = 781;
                                          goto LABEL_11;
                                        case 785:
                                          id v20 = "gcSearchPortion";
                                          uint64_t v21 = a1;
                                          int v22 = 785;
                                          goto LABEL_85;
                                        case 786:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "raidReconstructFailBmxMp";
                                          goto LABEL_13;
                                        case 787:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "raidReconstructFailBmx";
                                          goto LABEL_13;
                                        case 788:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "raidReconstructFailBMXUECC";
                                          goto LABEL_13;
                                        case 789:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "raidReconstructFailBMXBlank";
                                          goto LABEL_13;
                                        case 790:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "raidPrevFailedReconstructBmxMpSkip";
                                          goto LABEL_13;
                                        case 792:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "numTLCFatBands";
                                          goto LABEL_13;
                                        case 793:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "fatValidity";
                                          goto LABEL_13;
                                        case 794:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "fatTotal";
                                          goto LABEL_13;
                                        case 798:
                                          id v20 = "raidBMXFailP";
                                          uint64_t v21 = a1;
                                          int v22 = 798;
                                          goto LABEL_22;
                                        case 799:
                                          id v20 = "raidBMXFailUECC";
                                          uint64_t v21 = a1;
                                          int v22 = 799;
                                          goto LABEL_22;
                                        case 804:
                                          id v20 = "raidBMXFailNoSPBX";
                                          uint64_t v21 = a1;
                                          int v22 = 804;
                                          goto LABEL_22;
                                        case 806:
                                          id v20 = "raidBMXFailBlank";
                                          uint64_t v21 = a1;
                                          int v22 = 806;
                                          goto LABEL_22;
                                        case 809:
                                          id v20 = "raidBMXFailUnsup";
                                          uint64_t v21 = a1;
                                          int v22 = 809;
                                          goto LABEL_22;
                                        case 811:
                                          id v20 = "raidBMXFailMpSkip";
                                          uint64_t v21 = a1;
                                          int v22 = 811;
                                          goto LABEL_22;
                                        case 812:
                                          id v20 = "raidBMXFailAbort";
                                          uint64_t v21 = a1;
                                          int v22 = 812;
                                          goto LABEL_22;
                                        case 813:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "TurboRaidIsEnabled";
                                          goto LABEL_13;
                                        case 814:
                                          id v20 = "raidBMXFailOther";
                                          uint64_t v21 = a1;
                                          int v22 = 814;
                                          goto LABEL_22;
                                        case 815:
                                          id v20 = "raidBMXSuccess";
                                          uint64_t v21 = a1;
                                          int v22 = 815;
                                          goto LABEL_22;
                                        case 816:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "skinnyBandsExtraDip";
                                          goto LABEL_13;
                                        case 821:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "writeAmp";
                                          goto LABEL_13;
                                        case 822:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "ricMaxClogOnlyPages";
                                          goto LABEL_13;
                                        case 823:
                                          id v20 = "readClassifyStatusesHisto";
                                          uint64_t v21 = a1;
                                          int v22 = 823;
                                          goto LABEL_21;
                                        case 824:
                                          id v20 = "readWithAuxStatusesHisto";
                                          uint64_t v21 = a1;
                                          int v22 = 824;
                                          goto LABEL_11;
                                        case 825:
                                          id v20 = "readReconstructStatusesHisto";
                                          uint64_t v21 = a1;
                                          int v22 = 825;
                                          goto LABEL_11;
                                        case 826:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "bdrBackupChecks";
                                          goto LABEL_13;
                                        case 827:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "ricExceedClogOnlyPagesTH";
                                          goto LABEL_13;
                                        case 828:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "numDipFailures";
                                          goto LABEL_13;
                                        case 831:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "prefetchNextRange";
                                          goto LABEL_13;
                                        case 862:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "raidSuccessfulSkip";
                                          goto LABEL_13;
                                        case 863:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "raidFailedSkip";
                                          goto LABEL_13;
                                        case 864:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "raidSkipAttempts";
                                          goto LABEL_13;
                                        case 865:
                                          id v20 = "timeOfThrottlingPerLevel";
                                          uint64_t v21 = a1;
                                          int v22 = 865;
                                          goto LABEL_85;
                                        case 866:
                                          id v20 = "timeOfThrottlingPerReadLevel";
                                          uint64_t v21 = a1;
                                          int v22 = 866;
                                          goto LABEL_85;
                                        case 867:
                                          id v20 = "timeOfThrottlingPerWriteLevel";
                                          uint64_t v21 = a1;
                                          int v22 = 867;
                                          goto LABEL_85;
                                        case 868:
                                          id v20 = "dmReasonsSlc_1bc";
                                          uint64_t v21 = a1;
                                          int v22 = 868;
                                          goto LABEL_155;
                                        case 869:
                                          id v20 = "dmReasonsTlc_1bc";
                                          uint64_t v21 = a1;
                                          int v22 = 869;
                                          goto LABEL_155;
                                        case 870:
                                          id v20 = "dmReasonsSlc_1bc_he";
                                          uint64_t v21 = a1;
                                          int v22 = 870;
                                          goto LABEL_155;
                                        case 871:
                                          id v20 = "dmReasonsTlc_1bc_he";
                                          uint64_t v21 = a1;
                                          int v22 = 871;
                                          goto LABEL_155;
                                        case 876:
                                          id v20 = "dmReasonsSlc_mbc";
                                          uint64_t v21 = a1;
                                          int v22 = 876;
                                          goto LABEL_155;
                                        case 877:
                                          id v20 = "dmReasonsTlc_mbc";
                                          uint64_t v21 = a1;
                                          int v22 = 877;
                                          goto LABEL_155;
                                        case 883:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "clogEmptyProgramms";
                                          goto LABEL_13;
                                        case 884:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "oslcHwCloseBand";
                                          goto LABEL_13;
                                        case 891:
                                          id v20 = "turboRaidSuccessAuxPartition";
                                          uint64_t v21 = a1;
                                          int v22 = 891;
                                          goto LABEL_20;
                                        case 892:
                                          id v20 = "turboRaidFailAuxPartition";
                                          uint64_t v21 = a1;
                                          int v22 = 892;
                                          goto LABEL_20;
                                        case 893:
                                          id v20 = "turboRaidClassifyQualPartition";
                                          uint64_t v21 = a1;
                                          int v22 = 893;
                                          goto LABEL_20;
                                        case 894:
                                          id v20 = "turboRaidClassifyRelPartition";
                                          uint64_t v21 = a1;
                                          int v22 = 894;
                                          goto LABEL_20;
                                        case 895:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "IND_pool_freeMinSilo";
                                          goto LABEL_13;
                                        case 896:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "autoSweepBlocks";
                                          goto LABEL_13;
                                        case 897:
                                          id v20 = "wcWrFragSizes";
                                          uint64_t v21 = a1;
                                          int v22 = 897;
                                          goto LABEL_85;
                                        case 898:
                                          id v20 = "indStateAcrossGcDidNoL";
                                          uint64_t v21 = a1;
                                          int v22 = 898;
                                          goto LABEL_85;
                                        case 899:
                                          id v20 = "indStateAcrossGcDidL";
                                          uint64_t v21 = a1;
                                          int v22 = 899;
                                          goto LABEL_85;
                                        case 900:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "turboRaidNoClassifyDueToWasRetire";
                                          goto LABEL_13;
                                        case 901:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "turboRaidNoClassifyDueToOpenBand";
                                          goto LABEL_13;
                                        case 902:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "turboRaidNoClassifyDueToQualityBlock";
                                          goto LABEL_13;
                                        case 903:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "turboRaidGbbOpenBand";
                                          goto LABEL_13;
                                        case 904:
                                          uint64_t v18 = *v8;
                                          uint64_t v19 = "turboRaidGbbShouldRetireOnRefresh";
                                          goto LABEL_13;
                                        case 905:
                                          id v20 = "turboRaidRelPerBlock";
                                          uint64_t v21 = a1;
                                          int v22 = 905;
                                          goto LABEL_85;
                                        case 906:
                                          id v20 = "turboRaidRelBetweenRefreshesPerBlock";
                                          uint64_t v21 = a1;
                                          int v22 = 906;
                                          goto LABEL_85;
                                        default:
                                          if (v7 <= 1039)
                                          {
                                            switch(v7)
                                            {
                                              case 907:
                                                id v20 = "turboRaidMaxRelBetweenRefreshesPerBlock";
                                                uint64_t v21 = a1;
                                                int v22 = 907;
                                                goto LABEL_85;
                                              case 908:
                                                id v20 = "turboRaidMinRelBetweenRefreshesPerBlock";
                                                uint64_t v21 = a1;
                                                int v22 = 908;
                                                goto LABEL_85;
                                              case 909:
                                              case 910:
                                              case 911:
                                              case 912:
                                              case 913:
                                              case 914:
                                              case 915:
                                              case 916:
                                              case 917:
                                              case 924:
                                              case 925:
                                              case 926:
                                              case 927:
                                              case 928:
                                              case 929:
                                              case 936:
                                              case 941:
                                              case 945:
                                              case 946:
                                              case 947:
                                              case 949:
                                              case 950:
                                              case 952:
                                              case 954:
                                              case 955:
                                              case 956:
                                              case 957:
                                              case 958:
                                              case 959:
                                              case 960:
                                              case 963:
                                              case 964:
                                              case 965:
                                              case 966:
                                              case 968:
                                              case 969:
                                              case 970:
                                                goto LABEL_696;
                                              case 918:
                                                id v20 = "turboRaidMaxCyclesBetweenRel";
                                                uint64_t v21 = a1;
                                                int v22 = 918;
                                                goto LABEL_85;
                                              case 919:
                                                id v20 = "turboRaidMinCyclesBetweenRel";
                                                uint64_t v21 = a1;
                                                int v22 = 919;
                                                goto LABEL_85;
                                              case 920:
                                                id v20 = "turboRaidAuxPerBlock";
                                                uint64_t v21 = a1;
                                                int v22 = 920;
                                                goto LABEL_85;
                                              case 921:
                                                id v20 = "turboRaidAuxBetweenRefreshesPerBlock";
                                                uint64_t v21 = a1;
                                                int v22 = 921;
                                                goto LABEL_85;
                                              case 922:
                                                uint64_t v18 = *v8;
                                                uint64_t v19 = "turboRaidRelLockMark";
                                                goto LABEL_13;
                                              case 923:
                                                uint64_t v18 = *v8;
                                                uint64_t v19 = "turboRaidAuxLockMark";
                                                goto LABEL_13;
                                              case 930:
                                                id v20 = "turboRaidMaxCyclesBetweenAux";
                                                uint64_t v21 = a1;
                                                int v22 = 930;
                                                goto LABEL_85;
                                              case 931:
                                                id v20 = "turboRaidMinCyclesBetweenAux";
                                                uint64_t v21 = a1;
                                                int v22 = 931;
                                                goto LABEL_85;
                                              case 932:
                                                id v20 = "turboRaidLastRelPECycles";
                                                uint64_t v21 = a1;
                                                int v22 = 932;
                                                goto LABEL_85;
                                              case 933:
                                                id v20 = "turboRaidRelQualPECycles";
                                                uint64_t v21 = a1;
                                                int v22 = 933;
                                                goto LABEL_85;
                                              case 934:
                                                id v20 = "turboRaidLastAuxPECycles";
                                                uint64_t v21 = a1;
                                                int v22 = 934;
                                                goto LABEL_85;
                                              case 935:
                                                id v20 = "turboRaidAuxQualPECycles";
                                                uint64_t v21 = a1;
                                                int v22 = 935;
                                                goto LABEL_85;
                                              case 937:
                                                uint64_t v18 = *v8;
                                                uint64_t v19 = "turboRaidPEFailAfterRel";
                                                goto LABEL_13;
                                              case 938:
                                                uint64_t v18 = *v8;
                                                uint64_t v19 = "turboRaidPEFailAfterAux";
                                                goto LABEL_13;
                                              case 939:
                                                uint64_t v18 = *v8;
                                                uint64_t v19 = "dvfmVotesCPU";
                                                goto LABEL_13;
                                              case 940:
                                                uint64_t v18 = *v8;
                                                uint64_t v19 = "dvfmVotesBandwidth";
                                                goto LABEL_13;
                                              case 942:
                                                uint64_t v18 = *v8;
                                                uint64_t v19 = "maxSLCEndurance";
                                                goto LABEL_13;
                                              case 943:
                                                uint64_t v18 = *v8;
                                                uint64_t v19 = "maxMixedEndurance";
                                                goto LABEL_13;
                                              case 944:
                                                uint64_t v18 = *v8;
                                                uint64_t v19 = "maxNativeEndurance";
                                                goto LABEL_13;
                                              case 948:
                                                id v20 = "assertHistory";
                                                uint64_t v21 = a1;
                                                int v22 = 948;
                                                __int128 v14 = v8;
                                                unsigned int v15 = 40;
                                                goto LABEL_12;
                                              case 951:
                                                uint64_t v18 = *v8;
                                                uint64_t v19 = "asp3Support";
                                                goto LABEL_13;
                                              case 953:
                                                uint64_t v18 = *v8;
                                                uint64_t v19 = "numCrossTempRaidUecc";
                                                goto LABEL_13;
                                              case 961:
                                                uint64_t v18 = *v8;
                                                uint64_t v19 = "osBuildStr";
                                                goto LABEL_13;
                                              case 962:
                                                uint64_t v18 = *v8;
                                                uint64_t v19 = "raidConfig";
                                                goto LABEL_13;
                                              case 967:
                                                id v20 = "indTrimFrags";
                                                uint64_t v21 = a1;
                                                int v22 = 967;
                                                goto LABEL_153;
                                              case 971:
                                                id v20 = "indUsedFrags";
                                                uint64_t v21 = a1;
                                                int v22 = 971;
                                                goto LABEL_153;
                                              default:
                                                switch(v7)
                                                {
                                                  case 996:
                                                    uint64_t v18 = *v8;
                                                    id v16 = (void *)a1;
                                                    uint64_t v19 = "clogFindFail";
                                                    goto LABEL_14;
                                                  case 997:
                                                    uint64_t v18 = *v8;
                                                    id v16 = (void *)a1;
                                                    uint64_t v19 = "clogFindBlank";
                                                    goto LABEL_14;
                                                  case 998:
                                                    uint64_t v18 = *v8;
                                                    id v16 = (void *)a1;
                                                    uint64_t v19 = "clogFindUnc";
                                                    goto LABEL_14;
                                                  case 999:
                                                    uint64_t v18 = *v8;
                                                    id v16 = (void *)a1;
                                                    uint64_t v19 = "clogFindUnexpected";
                                                    goto LABEL_14;
                                                  case 1001:
                                                    uint64_t v21 = a1;
                                                    int v22 = 1001;
                                                    id v20 = "clogReplayFailReason";
                                                    goto LABEL_23;
                                                  case 1002:
                                                    uint64_t v18 = *v8;
                                                    id v16 = (void *)a1;
                                                    uint64_t v19 = "clogReplayTransientError";
                                                    goto LABEL_14;
                                                  case 1003:
                                                    uint64_t v18 = *v8;
                                                    id v16 = (void *)a1;
                                                    uint64_t v19 = "clogReplaySpfError";
                                                    goto LABEL_14;
                                                  case 1015:
                                                    uint64_t v21 = a1;
                                                    int v22 = 1015;
                                                    id v20 = "eanEarlyBootUeccPage";
                                                    goto LABEL_22;
                                                  case 1016:
                                                    uint64_t v18 = *v8;
                                                    id v16 = (void *)a1;
                                                    uint64_t v19 = "eanEarlyBootNumUeccPages";
                                                    goto LABEL_14;
                                                  case 1017:
                                                    uint64_t v18 = *v8;
                                                    id v16 = (void *)a1;
                                                    uint64_t v19 = "eanEarlyBootUeccMultiplane";
                                                    goto LABEL_14;
                                                  default:
                                                    goto LABEL_696;
                                                }
                                            }
                                          }

                                          if (v7 <= 1137)
                                          {
                                            if (v7 > 1104)
                                            {
                                              if (v7 > 1115)
                                              {
                                                if (v7 == 1116)
                                                {
                                                  uint64_t v21 = a1;
                                                  int v22 = 1116;
                                                  id v20 = "gcwamp";
LABEL_155:
                                                  __int128 v14 = v8;
                                                  unsigned int v15 = 32;
                                                  goto LABEL_12;
                                                }

                                                if (v7 == 1137)
                                                {
                                                  uint64_t v18 = *v8;
                                                  id v16 = (void *)a1;
                                                  uint64_t v19 = "numOfToUnhappySwitches";
                                                  goto LABEL_14;
                                                }
                                              }

                                              else
                                              {
                                                if (v7 == 1105)
                                                {
                                                  uint64_t v21 = a1;
                                                  int v22 = 1105;
                                                  id v20 = "hostReadSequential";
                                                  goto LABEL_703;
                                                }

                                                if (v7 == 1106)
                                                {
                                                  uint64_t v21 = a1;
                                                  int v22 = 1106;
                                                  id v20 = "GCReadSequential";
LABEL_703:
                                                  __int128 v14 = v8;
                                                  unsigned int v15 = 14;
                                                  goto LABEL_12;
                                                }
                                              }
                                            }

                                            else
                                            {
                                              if (v7 <= 1041)
                                              {
                                                uint64_t v21 = a1;
                                                if (v7 == 1040)
                                                {
                                                  int v22 = 1040;
                                                  id v20 = "bandsAgeBinsV2";
                                                }

                                                else
                                                {
                                                  int v22 = 1041;
                                                  id v20 = "bandsAgeBinsSnapshot";
                                                }

                                                __int128 v14 = v8;
                                                unsigned int v15 = 31;
                                                goto LABEL_12;
                                              }

                                              if (v7 == 1042)
                                              {
                                                uint64_t v21 = a1;
                                                int v22 = 1042;
                                                id v20 = "bandsAgeBinsReadSectors";
                                                __int128 v14 = v8;
                                                unsigned int v15 = 15;
LABEL_12:
                                                sub_100017D30(v21, v22, v20, v14, v15);
                                                goto LABEL_15;
                                              }

                                              if (v7 == 1080)
                                              {
                                                uint64_t v18 = *v8;
                                                id v16 = (void *)a1;
                                                uint64_t v19 = "raidForceClogLoad";
                                                goto LABEL_14;
                                              }
                                            }

LABEL_696:
                                            switch(v7)
                                            {
                                              case 1196:
                                                uint64_t v21 = a1;
                                                int v22 = 1196;
                                                id v20 = "poDetectGBBedTotalCost";
                                                goto LABEL_19;
                                              case 1197:
                                                uint64_t v21 = a1;
                                                int v22 = 1197;
                                                id v20 = "poDetectGBBedAge";
                                                goto LABEL_11;
                                              case 1198:
                                                uint64_t v21 = a1;
                                                int v22 = 1198;
                                                id v20 = "poDetectPERemovalMostSevereCost";
                                                goto LABEL_21;
                                              case 1199:
                                                uint64_t v18 = *v8;
                                                id v16 = (void *)a1;
                                                uint64_t v19 = "poDetectCurrentSize";
                                                goto LABEL_14;
                                              case 1200:
                                              case 1203:
                                              case 1204:
                                              case 1205:
                                              case 1206:
                                              case 1207:
                                              case 1208:
                                              case 1209:
                                              case 1210:
                                              case 1212:
                                              case 1213:
                                              case 1214:
                                              case 1219:
                                              case 1220:
                                              case 1221:
                                              case 1222:
                                              case 1223:
                                                break;
                                              case 1201:
                                                uint64_t v21 = a1;
                                                int v22 = 1201;
                                                id v20 = "gcVerticalSuccssfulAlignments";
                                                goto LABEL_22;
                                              case 1202:
                                                uint64_t v21 = a1;
                                                int v22 = 1202;
                                                id v20 = "gcVerticalNoAlignmentDueToMissingSegs";
                                                goto LABEL_22;
                                              case 1211:
                                                uint64_t v21 = a1;
                                                int v22 = 1211;
                                                id v20 = "forcedAllocationSmallEraseQ";
                                                goto LABEL_716;
                                              case 1215:
                                                uint64_t v21 = a1;
                                                int v22 = 1215;
                                                id v20 = "hostWritesPerThrottleZone";
                                                goto LABEL_19;
                                              case 1216:
                                                uint64_t v21 = a1;
                                                int v22 = 1216;
                                                id v20 = "tlcWLPerDipAvgPEC";
                                                goto LABEL_716;
                                              case 1217:
                                                uint64_t v21 = a1;
                                                int v22 = 1217;
                                                id v20 = "tlcWLPerDipMaxPEC";
                                                goto LABEL_716;
                                              case 1218:
                                                uint64_t v21 = a1;
                                                int v22 = 1218;
                                                id v20 = "tlcWLPerDipMinPEC";
                                                goto LABEL_716;
                                              case 1224:
                                                uint64_t v21 = a1;
                                                int v22 = 1224;
                                                id v20 = "apfsValidLbaOvershoot";
                                                __int128 v14 = v8;
                                                unsigned int v15 = 20;
                                                goto LABEL_12;
                                              default:
                                                switch(v7)
                                                {
                                                  case 1232:
                                                    uint64_t v18 = *v8;
                                                    id v16 = (void *)a1;
                                                    uint64_t v19 = "eanFastSize";
                                                    goto LABEL_14;
                                                  case 1233:
                                                    uint64_t v18 = *v8;
                                                    id v16 = (void *)a1;
                                                    uint64_t v19 = "eanNumSlcEvictions";
                                                    goto LABEL_14;
                                                  case 1234:
                                                    uint64_t v18 = *v8;
                                                    id v16 = (void *)a1;
                                                    uint64_t v19 = "eanNumForcedCompress";
                                                    goto LABEL_14;
                                                  case 1235:
                                                  case 1236:
                                                  case 1237:
                                                  case 1238:
                                                  case 1239:
                                                  case 1240:
                                                  case 1242:
                                                  case 1243:
                                                  case 1245:
                                                    goto LABEL_15;
                                                  case 1241:
                                                    uint64_t v21 = a1;
                                                    int v22 = 1241;
                                                    id v20 = "s2rTimeHisto";
                                                    goto LABEL_11;
                                                  case 1244:
                                                    uint64_t v18 = *v8;
                                                    id v16 = (void *)a1;
                                                    uint64_t v19 = "calendarTimeWentBackward";
                                                    goto LABEL_14;
                                                  case 1246:
                                                    uint64_t v21 = a1;
                                                    int v22 = 1246;
                                                    id v20 = "bandsUeccCrossTempHisto";
                                                    goto LABEL_23;
                                                  default:
                                                    if (v7 != 1190) {
                                                      goto LABEL_15;
                                                    }
                                                    uint64_t v21 = a1;
                                                    int v22 = 1190;
                                                    id v20 = "powerDownTime";
                                                    break;
                                                }

                                                goto LABEL_153;
                                            }
                                          }

                                          else
                                          {
                                            switch(v7)
                                            {
                                              case 1147:
                                                uint64_t v21 = a1;
                                                int v22 = 1147;
                                                id v20 = "gc_concurrent_dw_gc12";
                                                goto LABEL_716;
                                              case 1148:
                                                uint64_t v21 = a1;
                                                int v22 = 1148;
                                                id v20 = "gc_concurrent_dw_gc1";
                                                goto LABEL_716;
                                              case 1149:
                                                uint64_t v21 = a1;
                                                int v22 = 1149;
                                                id v20 = "gc_concurrent_dw_gc2";
LABEL_716:
                                                __int128 v14 = v8;
                                                unsigned int v15 = 24;
                                                goto LABEL_12;
                                              case 1150:
                                              case 1151:
                                              case 1152:
                                              case 1153:
                                              case 1154:
                                              case 1155:
                                              case 1156:
                                              case 1159:
                                              case 1160:
                                              case 1161:
                                              case 1162:
                                              case 1163:
                                              case 1164:
                                              case 1165:
                                              case 1166:
                                              case 1167:
                                              case 1170:
                                              case 1173:
                                              case 1174:
                                              case 1175:
                                              case 1176:
                                              case 1177:
                                              case 1178:
                                                goto LABEL_696;
                                              case 1157:
                                                uint64_t v18 = *v8;
                                                id v16 = (void *)a1;
                                                uint64_t v19 = "eanMaxForceROTimeMs";
                                                break;
                                              case 1158:
                                                uint64_t v18 = *v8;
                                                id v16 = (void *)a1;
                                                uint64_t v19 = "eanMaxForceRORecoTimeMs";
                                                break;
                                              case 1168:
                                                uint64_t v21 = a1;
                                                int v22 = 1168;
                                                id v20 = "poDetectPERemovalTotalCost";
                                                goto LABEL_20;
                                              case 1169:
                                                uint64_t v21 = a1;
                                                int v22 = 1169;
                                                id v20 = "poDetectEmptySpotRemovalTotalCost";
                                                goto LABEL_20;
                                              case 1171:
                                                uint64_t v21 = a1;
                                                int v22 = 1171;
                                                id v20 = "poDetectEmptySpotRemovalAge";
                                                goto LABEL_11;
                                              case 1172:
                                                uint64_t v21 = a1;
                                                int v22 = 1172;
                                                id v20 = "poDetectGBBedMostSevereCost";
                                                goto LABEL_21;
                                              case 1179:
                                                uint64_t v21 = a1;
                                                int v22 = 1179;
                                                id v20 = "gc_cur_dw_gc1";
                                                goto LABEL_22;
                                              case 1180:
                                                uint64_t v21 = a1;
                                                int v22 = 1180;
                                                id v20 = "gc_cur_dw_gc2";
                                                goto LABEL_22;
                                              case 1181:
                                                uint64_t v21 = a1;
                                                int v22 = 1181;
                                                id v20 = "gc_cur_dw_gc3";
                                                goto LABEL_22;
                                              case 1182:
                                                uint64_t v21 = a1;
                                                int v22 = 1182;
                                                id v20 = "gc_tot_dw_gc1";
                                                goto LABEL_22;
                                              case 1183:
                                                uint64_t v21 = a1;
                                                int v22 = 1183;
                                                id v20 = "gc_tot_dw_gc2";
                                                goto LABEL_22;
                                              case 1184:
                                                uint64_t v18 = *v8;
                                                id v16 = (void *)a1;
                                                uint64_t v19 = "unhappy_state";
                                                break;
                                              case 1185:
                                                uint64_t v18 = *v8;
                                                id v16 = (void *)a1;
                                                uint64_t v19 = "unhappy_level";
                                                break;
                                              default:
                                                if (v7 == 1138)
                                                {
                                                  uint64_t v18 = *v8;
                                                  id v16 = (void *)a1;
                                                  uint64_t v19 = "numOfToHappySwitches";
                                                }

                                                else
                                                {
                                                  if (v7 != 1189) {
                                                    goto LABEL_696;
                                                  }
                                                  uint64_t v18 = *v8;
                                                  id v16 = (void *)a1;
                                                  uint64_t v19 = "lastLbaFormatTime";
                                                }

                                                break;
                                            }

uint64_t sub_100017D30(uint64_t result, int a2, const char *a3, uint64_t *a4, unsigned int a5)
{
  int v7 = (void *)result;
  uint64_t v8 = *a4;
  if (a2 <= 44)
  {
    switch(a2)
    {
      case 4:
        *(void *)(result + 72) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 5:
      case 6:
      case 8:
      case 9:
      case 10:
      case 11:
      case 14:
      case 15:
      case 16:
        goto LABEL_41;
      case 7:
        *(void *)(result + 64) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 12:
        *(void *)(result + 144) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 13:
        *(void *)(result + 152) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 17:
        *(void *)(result + 88) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 18:
        *(void *)(result + 104) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 19:
        *(void *)(result + 96) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 20:
        *(void *)(result + 112) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      default:
        if (a2 != 28) {
          goto LABEL_41;
        }
        *(void *)(result + 168) = v8;
        if (!a5) {
          return result;
        }
        goto LABEL_42;
    }
  }

  switch(a2)
  {
    case '-':
      *(void *)(result + 176) = v8;
      if (a5) {
        goto LABEL_42;
      }
      return result;
    case '.':
    case '/':
    case '6':
    case '7':
      goto LABEL_41;
    case '0':
      *(void *)(result + 80) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    case '1':
      *(_DWORD *)(result + 56) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    case '2':
      *(_DWORD *)(result + 52) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    case '3':
      *(_DWORD *)(result + 48) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    case '4':
      *(_DWORD *)(result + 44) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    case '5':
      *(_DWORD *)(result + 32) = v8;
      goto LABEL_41;
    case '8':
      *(void *)(result + 160) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    default:
      if (a2 != 265) {
        goto LABEL_41;
      }
      if (a5)
      {
        uint64_t v9 = a5;
        unint64_t v10 = (void *)(result + 184);
        unsigned int v11 = a4;
        do
        {
          uint64_t v12 = *v11++;
          *v10++ = v12;
          --v9;
        }

        while (v9);
LABEL_41:
        if (a5)
        {
LABEL_42:
          if (a5 == 1)
          {
            return sub_1000299C0((void *)result, "", a3, v8);
          }

          else
          {
            uint64_t v13 = 0LL;
            uint64_t v14 = a5;
            do
            {
              snprintf(__str, 0x64uLL, "%d", v13);
              __str[100] = 0;
              uint64_t result = sub_1000299C0(v7, a3, __str, a4[v13++]);
            }

            while (v14 != v13);
          }
        }
      }

      return result;
  }

double sub_100017F78(uint64_t a1)
{
  id v2 = *(void **)a1;
  if (v2)
  {
    do
    {
      id v3 = (void *)v2[14];
      free(v2);
      id v2 = v3;
    }

    while (v3);
  }

  float v4 = *(void **)(a1 + 16);
  if (v4)
  {
    do
    {
      float v5 = (void *)v4[14];
      free(v4);
      float v4 = v5;
    }

    while (v5);
  }

  double result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_100017FE8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (unint64_t *)a2;
  uint64_t v10 = 0LL;
  unsigned int v11 = a3 >> 3;
  *(_OWORD *)__str = 0u;
  __int128 v25 = 0u;
  do
  {
LABEL_2:
    if (!v11) {
      return v10;
    }
    unint64_t v13 = *v8++;
    int v12 = v13;
    unint64_t v14 = HIDWORD(v13);
    --v11;
  }

  while (!HIDWORD(v13));
  uint64_t v17 = (v12 - 1);
  if (v17 <= 0x47) {
    __asm { BR              X9 }
  }

  uint64_t v18 = (v12 - 73);
  if (v18 <= 0x46) {
    __asm { BR              X9 }
  }

  switch(v12)
  {
    case 144:
      uint64_t v19 = "ASPFTLParseBufferToCxt: numMemExtreme(144) cannot add 1 element to context";
      goto LABEL_15;
    case 145:
      uint64_t v19 = "ASPFTLParseBufferToCxt: maxMemExtremeDuration(145) cannot add 1 element to context";
      goto LABEL_15;
    case 146:
      uint64_t v19 = "ASPFTLParseBufferToCxt: memExtremeDuration(146) cannot add 1 element to context";
      goto LABEL_15;
    case 147:
      uint64_t v19 = "ASPFTLParseBufferToCxt: bandGetsExtreme(147) cannot add 1 element to context";
      goto LABEL_15;
    case 148:
      uint64_t v19 = "ASPFTLParseBufferToCxt: bandGetsLow(148) cannot add 1 element to context";
      goto LABEL_15;
    case 149:
      uint64_t v19 = "ASPFTLParseBufferToCxt: numHostChoke(149) cannot add 1 element to context";
      goto LABEL_15;
    case 152:
      uint64_t v19 = "ASPFTLParseBufferToCxt: AbortSkip_ProgramError(152) cannot add 1 element to context";
      goto LABEL_15;
    case 153:
      uint64_t v19 = "ASPFTLParseBufferToCxt: AbortSkip_ReadErrorOpenBand(153) cannot add 1 element to context";
      goto LABEL_15;
    case 154:
      uint64_t v19 = "ASPFTLParseBufferToCxt: AbortSkip_FailedRebuildingParity(154) cannot add 1 element to context";
      goto LABEL_15;
    case 155:
      uint64_t v19 = "ASPFTLParseBufferToCxt: AbortPad_OpenRefreshBand(155) cannot add 1 element to context";
      goto LABEL_15;
    case 156:
      uint64_t v19 = "ASPFTLParseBufferToCxt: AbortPad_CloseBands(156) cannot add 1 element to context";
      goto LABEL_15;
    case 157:
      uint64_t v19 = "ASPFTLParseBufferToCxt: AbortPad_SetPhoto(157) cannot add 1 element to context";
      goto LABEL_15;
    case 158:
      uint64_t v19 = "ASPFTLParseBufferToCxt: AbortPad_GcNoSource(158) cannot add 1 element to context";
      goto LABEL_15;
    case 159:
      uint64_t v19 = "ASPFTLParseBufferToCxt: AbortPad_Format(159) cannot add 1 element to context";
      goto LABEL_15;
    case 160:
      uint64_t v19 = "ASPFTLParseBufferToCxt: nandDiscoveryDuration(160) cannot add 1 element to context";
      goto LABEL_15;
    case 161:
      uint64_t v19 = "ASPFTLParseBufferToCxt: coreCCEnableDuration(161) cannot add 1 element to context";
      goto LABEL_15;
    case 163:
      uint64_t v19 = "ASPFTLParseBufferToCxt: coreOpenDuration(163) cannot add 1 element to context";
      goto LABEL_15;
    case 164:
      uint64_t v19 = "ASPFTLParseBufferToCxt: coreWritableDuration(164) cannot add 1 element to context";
      goto LABEL_15;
    case 165:
      uint64_t v19 = "ASPFTLParseBufferToCxt: coreClogLoadDuration(165) cannot add 1 element to context";
      goto LABEL_15;
    case 167:
      uint64_t v19 = "ASPFTLParseBufferToCxt: bulkPFail(167) cannot add 1 element to context";
      goto LABEL_15;
    case 169:
      uint64_t v19 = "ASPFTLParseBufferToCxt: bulkRFail(169) cannot add 1 element to context";
      goto LABEL_15;
    case 172:
      uint64_t v19 = "ASPFTLParseBufferToCxt: raidSmartErrors(172) cannot add 1 element to context";
      goto LABEL_15;
    case 182:
      uint64_t v19 = "ASPFTLParseBufferToCxt: internalUeccs(182) cannot add 1 element to context";
      goto LABEL_15;
    case 183:
      uint64_t v19 = "ASPFTLParseBufferToCxt: e2eFail(183) cannot add 1 element to context";
      goto LABEL_15;
    case 184:
      uint64_t v19 = "ASPFTLParseBufferToCxt: TempSensorMax(184) cannot add 1 element to context";
      goto LABEL_15;
    case 185:
      uint64_t v19 = "ASPFTLParseBufferToCxt: TempSensorMin(185) cannot add 1 element to context";
      goto LABEL_15;
    case 186:
      uint64_t v19 = "ASPFTLParseBufferToCxt: powerUpFromDDR(186) cannot add 1 element to context";
      goto LABEL_15;
    case 187:
      uint64_t v19 = "ASPFTLParseBufferToCxt: numMemLow(187) cannot add 1 element to context";
      goto LABEL_15;
    case 188:
      uint64_t v19 = "ASPFTLParseBufferToCxt: maxMemLowDuration(188) cannot add 1 element to context";
      goto LABEL_15;
    case 189:
      uint64_t v19 = "ASPFTLParseBufferToCxt: memLowDuration(189) cannot add 1 element to context";
      goto LABEL_15;
    case 190:
      uint64_t v19 = "ASPFTLParseBufferToCxt: numFences(190) cannot add 1 element to context";
      goto LABEL_15;
    case 191:
      uint64_t v19 = "ASPFTLParseBufferToCxt: hostPassiveIO(191) cannot add 1 element to context";
      goto LABEL_15;
    case 192:
      uint64_t v19 = "ASPFTLParseBufferToCxt: odtsMax(192) cannot add 1 element to context";
      goto LABEL_15;
    case 193:
      uint64_t v19 = "ASPFTLParseBufferToCxt: defragMFromOrphans(193) cannot add 1 element to context";
      goto LABEL_15;
    case 194:
      uint64_t v19 = "ASPFTLParseBufferToCxt: defragMFromFragments(194) cannot add 1 element to context";
      goto LABEL_15;
    case 195:
      uint64_t v19 = "ASPFTLParseBufferToCxt: defragMTime(195) cannot add 1 element to context";
      goto LABEL_15;
    case 196:
      uint64_t v19 = "ASPFTLParseBufferToCxt: defragMMaxTime(196) cannot add 1 element to context";
      goto LABEL_15;
    case 197:
      uint64_t v19 = "ASPFTLParseBufferToCxt: raidFailedLbaMismatch(197) cannot add 1 element to context";
      goto LABEL_15;
    case 198:
      uint64_t v19 = "ASPFTLParseBufferToCxt: numSyscfgWrites(198) cannot add 1 element to context";
      goto LABEL_15;
    case 199:
      uint64_t v19 = "ASPFTLParseBufferToCxt: indmbUnitsXfer(199) cannot add 1 element to context";
      goto LABEL_15;
    case 200:
      uint64_t v19 = "ASPFTLParseBufferToCxt: indmbUnitsCache(200) cannot add 1 element to context";
      goto LABEL_15;
    case 201:
      uint64_t v19 = "ASPFTLParseBufferToCxt: indmbUnitsInd(201) cannot add 1 element to context";
      goto LABEL_15;
    case 202:
      uint64_t v19 = "ASPFTLParseBufferToCxt: wcacheFS_Mbytes(202) cannot add 1 element to context";
      goto LABEL_15;
    case 203:
      uint64_t v19 = "ASPFTLParseBufferToCxt: wcacheDS_Mbytes(203) cannot add 1 element to context";
      goto LABEL_15;
    case 204:
      uint64_t v19 = "ASPFTLParseBufferToCxt: powerOnSeconds(204) cannot add 1 element to context";
      goto LABEL_15;
    case 205:
      uint64_t v19 = "ASPFTLParseBufferToCxt: numUnknownTokenHostRead(205) cannot add 1 element to context";
      goto LABEL_15;
    case 206:
      uint64_t v19 = "ASPFTLParseBufferToCxt: numUnmmapedTokenHostRead(206) cannot add 1 element to context";
      goto LABEL_15;
    case 207:
      if ((_DWORD)v14 != 16) {
        sub_1000130E0( "ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerLevel(207): (#16) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
      }
      else {
        unsigned int v20 = v14;
      }
      int v22 = "ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerLevel(207): Cannot add 16 elements to context";
      goto LABEL_2247;
    case 208:
      uint64_t v19 = "ASPFTLParseBufferToCxt: wcacheFS_MbytesMin(208) cannot add 1 element to context";
      goto LABEL_15;
    case 209:
      uint64_t v19 = "ASPFTLParseBufferToCxt: wcacheFS_MbytesMax(209) cannot add 1 element to context";
      goto LABEL_15;
    case 210:
      uint64_t v19 = "ASPFTLParseBufferToCxt: prepareForShutdownFailCounter(210) cannot add 1 element to context";
      goto LABEL_15;
    case 211:
      uint64_t v19 = "ASPFTLParseBufferToCxt: lpsrEntry(211) cannot add 1 element to context";
      goto LABEL_15;
    case 212:
      uint64_t v19 = "ASPFTLParseBufferToCxt: lpsrExit(212) cannot add 1 element to context";
      goto LABEL_15;
    case 213:
      if ((_DWORD)v14 != 8) {
        sub_1000130E0( "ASPFTLParseBufferToCxt: crcInternalReadFail(213): (#8) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
      }
      else {
        unsigned int v20 = v14;
      }
      int v22 = "ASPFTLParseBufferToCxt: crcInternalReadFail(213): Cannot add 8 elements to context";
      goto LABEL_2247;
    case 214:
      uint64_t v19 = "ASPFTLParseBufferToCxt: wcacheFSEvictCnt(214) cannot add 1 element to context";
      goto LABEL_15;
    case 215:
      uint64_t v19 = "ASPFTLParseBufferToCxt: wcacheFSEvictSize(215) cannot add 1 element to context";
      goto LABEL_15;
    case 216:
      uint64_t v19 = "ASPFTLParseBufferToCxt: wcacheFSWr(216) cannot add 1 element to context";
      goto LABEL_15;
    case 217:
      uint64_t v19 = "ASPFTLParseBufferToCxt: wcacheDSWr(217) cannot add 1 element to context";
      goto LABEL_15;
    case 218:
      if ((_DWORD)v14 != 10) {
        sub_1000130E0( "ASPFTLParseBufferToCxt: wcacheFSEvictSizeLogDist(218): (#10) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
      }
      else {
        unsigned int v20 = v14;
      }
      int v22 = "ASPFTLParseBufferToCxt: wcacheFSEvictSizeLogDist(218): Cannot add 10 elements to context";
      goto LABEL_2247;
    case 219:
      uint64_t v19 = "ASPFTLParseBufferToCxt: prepareForShutdownTimeoutCounter(219) cannot add 1 element to context";
      goto LABEL_15;
    case 220:
      uint64_t v19 = "ASPFTLParseBufferToCxt: prepareForShutdownCancelCounter(220) cannot add 1 element to context";
      goto LABEL_15;
    case 221:
      uint64_t v19 = "ASPFTLParseBufferToCxt: RD_openBandCount(221) cannot add 1 element to context";
      goto LABEL_15;
    case 222:
      uint64_t v19 = "ASPFTLParseBufferToCxt: RD_openBandNops(222) cannot add 1 element to context";
      goto LABEL_15;
    case 223:
      uint64_t v19 = "ASPFTLParseBufferToCxt: RD_closedBandEvictCount(223) cannot add 1 element to context";
      goto LABEL_15;
    default:
      switch(v12)
      {
        case 224:
          uint64_t v19 = "ASPFTLParseBufferToCxt: RD_closedBandEvictSectors(224) cannot add 1 element to context";
          goto LABEL_15;
        case 225:
          uint64_t v19 = "ASPFTLParseBufferToCxt: RD_closedBandFragmentCount(225) cannot add 1 element to context";
          goto LABEL_15;
        case 226:
          uint64_t v19 = "ASPFTLParseBufferToCxt: RD_closedBandFragmentSectors(226) cannot add 1 element to context";
          goto LABEL_15;
        case 227:
          if ((_DWORD)v14 != 10) {
            sub_1000130E0( "ASPFTLParseBufferToCxt: wcacheFSOverWrLogSizeCnts(227): (#10) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
          }
          else {
            unsigned int v20 = v14;
          }
          int v22 = "ASPFTLParseBufferToCxt: wcacheFSOverWrLogSizeCnts(227): Cannot add 10 elements to context";
          goto LABEL_2247;
        case 228:
          if ((_DWORD)v14 != 4) {
            sub_1000130E0( "ASPFTLParseBufferToCxt: wcacheFSOverWrSizeByFlow(228): (#4) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
          }
          else {
            unsigned int v20 = v14;
          }
          int v22 = "ASPFTLParseBufferToCxt: wcacheFSOverWrSizeByFlow(228): Cannot add 4 elements to context";
          goto LABEL_2247;
        case 229:
          if ((_DWORD)v14 != 2) {
            sub_1000130E0( "ASPFTLParseBufferToCxt: indmbXferCountTo(229): (#2) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
          }
          else {
            unsigned int v20 = v14;
          }
          int v22 = "ASPFTLParseBufferToCxt: indmbXferCountTo(229): Cannot add 2 elements to context";
          goto LABEL_2247;
        case 230:
          if ((_DWORD)v14 != 2) {
            sub_1000130E0( "ASPFTLParseBufferToCxt: indmbAccumulatedTimeBetweenXfers(230): (#2) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
          }
          else {
            unsigned int v20 = v14;
          }
          int v22 = "ASPFTLParseBufferToCxt: indmbAccumulatedTimeBetweenXfers(230): Cannot add 2 elements to context";
          goto LABEL_2247;
        case 231:
          uint64_t v19 = "ASPFTLParseBufferToCxt: maxGracefulBootTimeMs(231) cannot add 1 element to context";
          goto LABEL_15;
        case 232:
          uint64_t v19 = "ASPFTLParseBufferToCxt: maxUngracefulBootTimeMs(232) cannot add 1 element to context";
          goto LABEL_15;
        case 233:
          uint64_t v19 = "ASPFTLParseBufferToCxt: averageGracefulBootTimeMs(233) cannot add 1 element to context";
          goto LABEL_15;
        case 234:
          uint64_t v19 = "ASPFTLParseBufferToCxt: averageUngracefulBootTimeMs(234) cannot add 1 element to context";
          goto LABEL_15;
        case 235:
          if ((_DWORD)v14 != 8) {
            sub_1000130E0( "ASPFTLParseBufferToCxt: gracefulBootTimeLogMs(235): (#8) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
          }
          else {
            unsigned int v20 = v14;
          }
          int v22 = "ASPFTLParseBufferToCxt: gracefulBootTimeLogMs(235): Cannot add 8 elements to context";
          goto LABEL_2247;
        case 236:
          if ((_DWORD)v14 != 8) {
            sub_1000130E0( "ASPFTLParseBufferToCxt: ungracefulBootTimeLogMs(236): (#8) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
          }
          else {
            unsigned int v20 = v14;
          }
          int v22 = "ASPFTLParseBufferToCxt: ungracefulBootTimeLogMs(236): Cannot add 8 elements to context";
          goto LABEL_2247;
        case 237:
          if ((_DWORD)v14 != 4) {
            sub_1000130E0( "ASPFTLParseBufferToCxt: CalibrationCount(237): (#4) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
          }
          else {
            unsigned int v20 = v14;
          }
          int v22 = "ASPFTLParseBufferToCxt: CalibrationCount(237): Cannot add 4 elements to context";
          goto LABEL_2247;
        case 238:
          uint64_t v19 = "ASPFTLParseBufferToCxt: CalibrationLastTmp(238) cannot add 1 element to context";
          goto LABEL_15;
        case 239:
          uint64_t v19 = "ASPFTLParseBufferToCxt: CalibrationMaxTmp(239) cannot add 1 element to context";
          goto LABEL_15;
        case 240:
          uint64_t v19 = "ASPFTLParseBufferToCxt: CalibrationMinTmp(240) cannot add 1 element to context";
          goto LABEL_15;
        case 241:
          uint64_t v19 = "ASPFTLParseBufferToCxt: ungracefulBootWorstIndicator(241) cannot add 1 element to context";
          goto LABEL_15;
        case 242:
          uint64_t v19 = "ASPFTLParseBufferToCxt: metaMismatchReread(242) cannot add 1 element to context";
          goto LABEL_15;
        case 243:
          uint64_t v19 = "ASPFTLParseBufferToCxt: numS3SleepOps(243) cannot add 1 element to context";
          goto LABEL_15;
        case 244:
          uint64_t v19 = "ASPFTLParseBufferToCxt: odtsCurrent(244) cannot add 1 element to context";
          goto LABEL_15;
        case 245:
          uint64_t v19 = "ASPFTLParseBufferToCxt: prefetchReads(245) cannot add 1 element to context";
          goto LABEL_15;
        case 246:
          uint64_t v19 = "ASPFTLParseBufferToCxt: prefetchHits(246) cannot add 1 element to context";
          goto LABEL_15;
        case 247:
          uint64_t v19 = "ASPFTLParseBufferToCxt: prefetchWritesInvalidation(247) cannot add 1 element to context";
          goto LABEL_15;
        case 248:
          uint64_t v19 = "ASPFTLParseBufferToCxt: indmbUnitsTotal(248) cannot add 1 element to context";
          goto LABEL_15;
        case 249:
          uint64_t v19 = "ASPFTLParseBufferToCxt: selfThrottlingEngage(249) cannot add 1 element to context";
          goto LABEL_15;
        case 250:
          uint64_t v19 = "ASPFTLParseBufferToCxt: selfThrottlingDisengage(250) cannot add 1 element to context";
          goto LABEL_15;
        case 252:
          uint64_t v19 = "ASPFTLParseBufferToCxt: AbortSkip_WlpMode(252) cannot add 1 element to context";
          goto LABEL_15;
        case 253:
          uint64_t v19 = "ASPFTLParseBufferToCxt: hostWritesWlpMode(253) cannot add 1 element to context";
          goto LABEL_15;
        case 254:
          uint64_t v19 = "ASPFTLParseBufferToCxt: numClogDoubleUnc(254) cannot add 1 element to context";
          goto LABEL_15;
        case 256:
          uint64_t v19 = "ASPFTLParseBufferToCxt: AbortPad_WlpMode(256) cannot add 1 element to context";
          goto LABEL_15;
        case 257:
          uint64_t v19 = "ASPFTLParseBufferToCxt: bonfireIntermediateBandErases(257) cannot add 1 element to context";
          goto LABEL_15;
        case 258:
          uint64_t v19 = "ASPFTLParseBufferToCxt: bonfireUserBandErases(258) cannot add 1 element to context";
          goto LABEL_15;
        case 259:
          uint64_t v19 = "ASPFTLParseBufferToCxt: bonfireIntermediateBandProgs(259) cannot add 1 element to context";
          goto LABEL_15;
        case 260:
          uint64_t v19 = "ASPFTLParseBufferToCxt: bonfireUserBandProgs(260) cannot add 1 element to context";
          goto LABEL_15;
        case 261:
          uint64_t v19 = "ASPFTLParseBufferToCxt: bonfireIntermediatePageReads(261) cannot add 1 element to context";
          goto LABEL_15;
        case 262:
          uint64_t v19 = "ASPFTLParseBufferToCxt: bonfireUserPageReads(262) cannot add 1 element to context";
          goto LABEL_15;
        case 263:
          uint64_t v19 = "ASPFTLParseBufferToCxt: refreshUtil00(263) cannot add 1 element to context";
          goto LABEL_15;
        case 264:
          uint64_t v19 = "ASPFTLParseBufferToCxt: failToReadUtil00(264) cannot add 1 element to context";
          goto LABEL_15;
        case 265:
          if ((_DWORD)v14 != 5) {
            sub_1000130E0( "ASPFTLParseBufferToCxt: readCountHisto(265): (#5) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
          }
          else {
            unsigned int v20 = v14;
          }
          int v22 = "ASPFTLParseBufferToCxt: readCountHisto(265): Cannot add 5 elements to context";
          goto LABEL_2247;
        case 266:
          if ((_DWORD)v14 != 16) {
            sub_1000130E0( "ASPFTLParseBufferToCxt: readAmpHisto(266): (#16) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
          }
          else {
            unsigned int v20 = v14;
          }
          int v22 = "ASPFTLParseBufferToCxt: readAmpHisto(266): Cannot add 16 elements to context";
          goto LABEL_2247;
        case 267:
          uint64_t v19 = "ASPFTLParseBufferToCxt: totalReadAmp(267) cannot add 1 element to context";
          goto LABEL_15;
        case 268:
          if ((_DWORD)v14 != 4) {
            sub_1000130E0( "ASPFTLParseBufferToCxt: nvmeModeSelect(268): (#4) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
          }
          else {
            unsigned int v20 = v14;
          }
          int v22 = "ASPFTLParseBufferToCxt: nvmeModeSelect(268): Cannot add 4 elements to context";
          goto LABEL_2247;
        case 269:
          if ((_DWORD)v14 != 8) {
            sub_1000130E0( "ASPFTLParseBufferToCxt: numBootBlockRefreshSuccess(269): (#8) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
          }
          else {
            unsigned int v20 = v14;
          }
          int v22 = "ASPFTLParseBufferToCxt: numBootBlockRefreshSuccess(269): Cannot add 8 elements to context";
          goto LABEL_2247;
        case 270:
          if ((_DWORD)v14 != 8) {
            sub_1000130E0( "ASPFTLParseBufferToCxt: numBootBlockRefreshFail(270): (#8) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
          }
          else {
            unsigned int v20 = v14;
          }
          int v22 = "ASPFTLParseBufferToCxt: numBootBlockRefreshFail(270): Cannot add 8 elements to context";
          goto LABEL_2247;
        case 271:
          uint64_t v19 = "ASPFTLParseBufferToCxt: numUnsupportedAsi(271) cannot add 1 element to context";
          goto LABEL_15;
        case 272:
          uint64_t v19 = "ASPFTLParseBufferToCxt: NumTerminatedProgramSegs(272) cannot add 1 element to context";
          goto LABEL_15;
        case 273:
          uint64_t v19 = "ASPFTLParseBufferToCxt: indParityPagesDrops(273) cannot add 1 element to context";
          goto LABEL_15;
        case 274:
          uint64_t v19 = "ASPFTLParseBufferToCxt: indFlowPrograms(274) cannot add 1 element to context";
          goto LABEL_15;
        case 277:
          if ((_DWORD)v14 != 4) {
            sub_1000130E0( "ASPFTLParseBufferToCxt: powerBudgetSelect(277): (#4) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
          }
          else {
            unsigned int v20 = v14;
          }
          int v22 = "ASPFTLParseBufferToCxt: powerBudgetSelect(277): Cannot add 4 elements to context";
          goto LABEL_2247;
        case 279:
          uint64_t v19 = "ASPFTLParseBufferToCxt: RxBurnNandWrites(279) cannot add 1 element to context";
          goto LABEL_15;
        case 280:
          if ((_DWORD)v14 != 12) {
            sub_1000130E0( "ASPFTLParseBufferToCxt: E2EDPErrorCounters(280): (#12) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
          }
          else {
            unsigned int v20 = v14;
          }
          int v22 = "ASPFTLParseBufferToCxt: E2EDPErrorCounters(280): Cannot add 12 elements to context";
          goto LABEL_2247;
        case 281:
          uint64_t v19 = "ASPFTLParseBufferToCxt: wcacheSectorsMax(281) cannot add 1 element to context";
          goto LABEL_15;
        case 282:
          uint64_t v19 = "ASPFTLParseBufferToCxt: wcacheSectorsMin(282) cannot add 1 element to context";
          goto LABEL_15;
        case 283:
          uint64_t v19 = "ASPFTLParseBufferToCxt: wcacheSectorsCur(283) cannot add 1 element to context";
          goto LABEL_15;
        case 284:
          uint64_t v19 = "ASPFTLParseBufferToCxt: wcacheDS_SectorsMax(284) cannot add 1 element to context";
          goto LABEL_15;
        case 285:
          uint64_t v19 = "ASPFTLParseBufferToCxt: wcacheDS_SectorsMin(285) cannot add 1 element to context";
          goto LABEL_15;
        case 286:
          uint64_t v19 = "ASPFTLParseBufferToCxt: wcacheDS_SectorsCur(286) cannot add 1 element to context";
          goto LABEL_15;
        case 287:
          uint64_t v19 = "ASPFTLParseBufferToCxt: wcacheFS_Reads(287) cannot add 1 element to context";
          goto LABEL_15;
        case 288:
          uint64_t v19 = "ASPFTLParseBufferToCxt: wcacheDS_Reads(288) cannot add 1 element to context";
          goto LABEL_15;
        case 289:
          if ((_DWORD)v14 != 32) {
            sub_1000130E0( "ASPFTLParseBufferToCxt: mspBootBlockReadFail(289): (#32) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
          }
          else {
            unsigned int v20 = v14;
          }
          int v22 = "ASPFTLParseBufferToCxt: mspBootBlockReadFail(289): Cannot add 32 elements to context";
          goto LABEL_2247;
        case 290:
          if ((_DWORD)v14 != 32) {
            sub_1000130E0( "ASPFTLParseBufferToCxt: mspBootBlockProgFail(290): (#32) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
          }
          else {
            unsigned int v20 = v14;
          }
          int v22 = "ASPFTLParseBufferToCxt: mspBootBlockProgFail(290): Cannot add 32 elements to context";
          goto LABEL_2247;
        case 291:
          if ((_DWORD)v14 != 32) {
            sub_1000130E0( "ASPFTLParseBufferToCxt: mspBootBlockEraseFail(291): (#32) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
          }
          else {
            unsigned int v20 = v14;
          }
          int v22 = "ASPFTLParseBufferToCxt: mspBootBlockEraseFail(291): Cannot add 32 elements to context";
          goto LABEL_2247;
        case 292:
          uint64_t v19 = "ASPFTLParseBufferToCxt: bandsRefreshedOnError(292) cannot add 1 element to context";
          goto LABEL_15;
        default:
          switch(v12)
          {
            case 298:
              if ((_DWORD)v14 != 2) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: perHostReads(298): (#2) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: perHostReads(298): Cannot add 2 elements to context";
              goto LABEL_2247;
            case 299:
              if ((_DWORD)v14 != 2) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: perHostReadXacts(299): (#2) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: perHostReadXacts(299): Cannot add 2 elements to context";
              goto LABEL_2247;
            case 300:
              if ((_DWORD)v14 != 2) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: perHostWrites(300): (#2) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: perHostWrites(300): Cannot add 2 elements to context";
              goto LABEL_2247;
            case 301:
              if ((_DWORD)v14 != 2) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: perHostWriteXacts(301): (#2) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: perHostWriteXacts(301): Cannot add 2 elements to context";
              goto LABEL_2247;
            case 302:
              if ((_DWORD)v14 != 2) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: perHostNumFlushes(302): (#2) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: perHostNumFlushes(302): Cannot add 2 elements to context";
              goto LABEL_2247;
            case 303:
              if ((_DWORD)v14 != 2) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: perHostNumFences(303): (#2) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: perHostNumFences(303): Cannot add 2 elements to context";
              goto LABEL_2247;
            case 304:
              if ((_DWORD)v14 != 10) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: commitPadSectorsPerFlow(304): (#10) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: commitPadSectorsPerFlow(304): Cannot add 10 elements to context";
              goto LABEL_2247;
            case 305:
              if ((_DWORD)v14 != 10) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: wcacheDSOverWrLogSizeCnts(305): (#10) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: wcacheDSOverWrLogSizeCnts(305): Cannot add 10 elements to context";
              goto LABEL_2247;
            case 306:
              if ((_DWORD)v14 != 4) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: wcacheDSOverWrSizeByFlow(306): (#4) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: wcacheDSOverWrSizeByFlow(306): Cannot add 4 elements to context";
              goto LABEL_2247;
            case 307:
              if ((_DWORD)v14 != 10) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: CmdRaisePrioiryEvents(307): (#10) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: CmdRaisePrioiryEvents(307): Cannot add 10 elements to context";
              goto LABEL_2247;
            case 308:
              uint64_t v19 = "ASPFTLParseBufferToCxt: utilNumVerification(308) cannot add 1 element to context";
              goto LABEL_15;
            case 309:
              uint64_t v19 = "ASPFTLParseBufferToCxt: utilRefreshes(309) cannot add 1 element to context";
              goto LABEL_15;
            case 310:
              uint64_t v19 = "ASPFTLParseBufferToCxt: utilBDRErrors(310) cannot add 1 element to context";
              goto LABEL_15;
            case 311:
              uint64_t v19 = "ASPFTLParseBufferToCxt: indBandsPerFlow(311) cannot add 1 element to context";
              goto LABEL_15;
            case 312:
              uint64_t v19 = "ASPFTLParseBufferToCxt: secsPerIndFlow(312) cannot add 1 element to context";
              goto LABEL_15;
            case 313:
              uint64_t v19 = "ASPFTLParseBufferToCxt: indDecodedECC(313) cannot add 1 element to context";
              goto LABEL_15;
            case 314:
              if ((_DWORD)v14 != 8) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: numBootBlockValidateSuccess(314): (#8) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: numBootBlockValidateSuccess(314): Cannot add 8 elements to context";
              goto LABEL_2247;
            case 315:
              if ((_DWORD)v14 != 8) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: numBootBlockValidateFail(315): (#8) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: numBootBlockValidateFail(315): Cannot add 8 elements to context";
              goto LABEL_2247;
            case 316:
              if ((_DWORD)v14 != 4) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: clogPagesFillingPercentage(316): (#4) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: clogPagesFillingPercentage(316): Cannot add 4 elements to context";
              goto LABEL_2247;
            case 317:
              uint64_t v19 = "ASPFTLParseBufferToCxt: bdrCalTimeAccFactor(317) cannot add 1 element to context";
              goto LABEL_15;
            case 318:
              uint64_t v19 = "ASPFTLParseBufferToCxt: bootChainRdError(318) cannot add 1 element to context";
              goto LABEL_15;
            case 319:
              uint64_t v19 = "ASPFTLParseBufferToCxt: bootChainBlankError(319) cannot add 1 element to context";
              goto LABEL_15;
            case 320:
              uint64_t v19 = "ASPFTLParseBufferToCxt: bootChainRefreshError(320) cannot add 1 element to context";
              goto LABEL_15;
            case 321:
              uint64_t v19 = "ASPFTLParseBufferToCxt: bootChainVersionError(321) cannot add 1 element to context";
              goto LABEL_15;
            case 322:
              uint64_t v19 = "ASPFTLParseBufferToCxt: mspBootBlockMismatch(322) cannot add 1 element to context";
              goto LABEL_15;
            case 323:
              uint64_t v19 = "ASPFTLParseBufferToCxt: mspBootBlockMismatchErr(323) cannot add 1 element to context";
              goto LABEL_15;
            case 324:
              if ((_DWORD)v14 != 5) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: bitflipAddr(324): (#5) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: bitflipAddr(324): Cannot add 5 elements to context";
              goto LABEL_2247;
            case 325:
              if ((_DWORD)v14 != 5) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: bitflipCount(325): (#5) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: bitflipCount(325): Cannot add 5 elements to context";
              goto LABEL_2247;
            case 326:
              if ((_DWORD)v14 != 5) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: bitflipDupes(326): (#5) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: bitflipDupes(326): Cannot add 5 elements to context";
              goto LABEL_2247;
            case 327:
              if ((_DWORD)v14 != 30) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: bandsMaxTempHisto(327): (#30) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: bandsMaxTempHisto(327): Cannot add 30 elements to context";
              goto LABEL_2247;
            case 328:
              if ((_DWORD)v14 != 30) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: bandsMinTempHisto(328): (#30) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: bandsMinTempHisto(328): Cannot add 30 elements to context";
              goto LABEL_2247;
            case 329:
              if ((_DWORD)v14 != 30) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: bandsLifeTimeTempHisto(329): (#30) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: bandsLifeTimeTempHisto(329): Cannot add 30 elements to context";
              goto LABEL_2247;
            case 330:
              if ((_DWORD)v14 != 22) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: bandsDeltaTempHisto(330): (#22) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: bandsDeltaTempHisto(330): Cannot add 22 elements to context";
              goto LABEL_2247;
            case 331:
              if ((_DWORD)v14 != 45) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: bandsCrossTempHisto(331): (#45) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: bandsCrossTempHisto(331): Cannot add 45 elements to context";
              goto LABEL_2247;
            case 332:
              if ((_DWORD)v14 != 10) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: wcacheWaitLogMs(332): (#10) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: wcacheWaitLogMs(332): Cannot add 10 elements to context";
              goto LABEL_2247;
            case 333:
              if ((_DWORD)v14 != 10) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: wcacheDS_segsSortedLogSize(333): (#10) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: wcacheDS_segsSortedLogSize(333): Cannot add 10 elements to context";
              goto LABEL_2247;
            case 334:
              uint64_t v19 = "ASPFTLParseBufferToCxt: numFirmwareWrites(334) cannot add 1 element to context";
              goto LABEL_15;
            case 335:
              uint64_t v19 = "ASPFTLParseBufferToCxt: numBisWrites(335) cannot add 1 element to context";
              goto LABEL_15;
            case 336:
              uint64_t v19 = "ASPFTLParseBufferToCxt: numBootChainUpdates(336) cannot add 1 element to context";
              goto LABEL_15;
            case 337:
              uint64_t v19 = "ASPFTLParseBufferToCxt: cntCalTimeWentBackWard(337) cannot add 1 element to context";
              goto LABEL_15;
            case 338:
              uint64_t v19 = "ASPFTLParseBufferToCxt: indBoRecoveries(338) cannot add 1 element to context";
              goto LABEL_15;
            case 340:
              uint64_t v19 = "ASPFTLParseBufferToCxt: numCrossTempUecc(340) cannot add 1 element to context";
              goto LABEL_15;
            case 341:
              uint64_t v19 = "ASPFTLParseBufferToCxt: latencyMonitorError(341) cannot add 1 element to context";
              goto LABEL_15;
            case 343:
              uint64_t v19 = "ASPFTLParseBufferToCxt: utilUeccReads(343) cannot add 1 element to context";
              goto LABEL_15;
            case 344:
              uint64_t v19 = "ASPFTLParseBufferToCxt: numOfAvoidedGCDueToTemp(344) cannot add 1 element to context";
              goto LABEL_15;
            case 345:
              uint64_t v19 = "ASPFTLParseBufferToCxt: forceShutdowns(345) cannot add 1 element to context";
              goto LABEL_15;
            case 346:
              uint64_t v19 = "ASPFTLParseBufferToCxt: gcSlcDestinations(346) cannot add 1 element to context";
              goto LABEL_15;
            case 347:
              uint64_t v19 = "ASPFTLParseBufferToCxt: indReplayExtUsed(347) cannot add 1 element to context";
              goto LABEL_15;
            case 348:
              uint64_t v19 = "ASPFTLParseBufferToCxt: defectsPerPackageOverflow(348) cannot add 1 element to context";
              goto LABEL_15;
            case 349:
              uint64_t v19 = "ASPFTLParseBufferToCxt: RxBurnIntBandsProgrammed(349) cannot add 1 element to context";
              goto LABEL_15;
            case 350:
              uint64_t v19 = "ASPFTLParseBufferToCxt: RxBurnUsrBandsProgrammed(350) cannot add 1 element to context";
              goto LABEL_15;
            case 351:
              uint64_t v19 = "ASPFTLParseBufferToCxt: RxBurnIntNandWrites(351) cannot add 1 element to context";
              goto LABEL_15;
            case 352:
              uint64_t v19 = "ASPFTLParseBufferToCxt: RxBurnUsrNandWrites(352) cannot add 1 element to context";
              goto LABEL_15;
            case 353:
              uint64_t v19 = "ASPFTLParseBufferToCxt: clogLastStripeUeccs(353) cannot add 1 element to context";
              goto LABEL_15;
            case 354:
              uint64_t v19 = "ASPFTLParseBufferToCxt: GC_MidDestSrcSwitchSLC2TLC(354) cannot add 1 element to context";
              goto LABEL_15;
            case 355:
              uint64_t v19 = "ASPFTLParseBufferToCxt: GC_MidDestSrcSwitchTLC2SLC(355) cannot add 1 element to context";
              goto LABEL_15;
            case 356:
              uint64_t v19 = "ASPFTLParseBufferToCxt: nvme_stats_shutdown_count_host0_normal(356) cannot add 1 element to context";
              goto LABEL_15;
            case 357:
              uint64_t v19 = "ASPFTLParseBufferToCxt: nvme_stats_shutdown_count_host1_normal(357) cannot add 1 element to context";
              goto LABEL_15;
            case 358:
              uint64_t v19 = "ASPFTLParseBufferToCxt: nvme_stats_shutdown_count_host0_s2r(358) cannot add 1 element to context";
              goto LABEL_15;
            case 359:
              uint64_t v19 = "ASPFTLParseBufferToCxt: nvme_stats_shutdown_count_host1_s2r(359) cannot add 1 element to context";
              goto LABEL_15;
            case 360:
              if ((_DWORD)v14 != 16) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: gcPDusterIntrSrcValidityHisto(360): (#16) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: gcPDusterIntrSrcValidityHisto(360): Cannot add 16 elements to context";
              goto LABEL_2247;
            case 361:
              if ((_DWORD)v14 != 16) {
                sub_1000130E0( "ASPFTLParseBufferToCxt: gcPDusterUserSrcValidityHisto(361): (#16) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
              }
              else {
                unsigned int v20 = v14;
              }
              int v22 = "ASPFTLParseBufferToCxt: gcPDusterUserSrcValidityHisto(361): Cannot add 16 elements to context";
              goto LABEL_2247;
            case 362:
              uint64_t v19 = "ASPFTLParseBufferToCxt: raidFailedReadParity(362) cannot add 1 element to context";
              goto LABEL_15;
            case 364:
              uint64_t v19 = "ASPFTLParseBufferToCxt: lhotNumSkipes(364) cannot add 1 element to context";
              goto LABEL_15;
            default:
              switch(v12)
              {
                case 365:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: lhotNumIsHotCalls(365) cannot add 1 element to context";
                  goto LABEL_15;
                case 366:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: lhotFullLap(366) cannot add 1 element to context";
                  goto LABEL_15;
                case 367:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: lhotSkipPrecent(367) cannot add 1 element to context";
                  goto LABEL_15;
                case 368:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: eraseSuspendEvents(368) cannot add 1 element to context";
                  goto LABEL_15;
                case 369:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: eraseSuspendedStatuses(369) cannot add 1 element to context";
                  goto LABEL_15;
                case 370:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: eraseSuspendedBands(370) cannot add 1 element to context";
                  goto LABEL_15;
                case 371:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: eraseSuspendSituationsBelowThreshold(371) cannot add 1 element to context";
                  goto LABEL_15;
                case 372:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: eraseSuspendSituationsAboveThreshold(372) cannot add 1 element to context";
                  goto LABEL_15;
                case 373:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: eraseSuspendReadChainsProcessed(373) cannot add 1 element to context";
                  goto LABEL_15;
                case 374:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: bdrLastDoneHr(374) cannot add 1 element to context";
                  goto LABEL_15;
                case 375:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: bdrBackupThreshHrs(375) cannot add 1 element to context";
                  goto LABEL_15;
                case 376:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: clogPortableProgBufs(376) cannot add 1 element to context";
                  goto LABEL_15;
                case 377:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: clogPortableDropBufs(377) cannot add 1 element to context";
                  goto LABEL_15;
                case 378:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: clogPortablePadSectors(378) cannot add 1 element to context";
                  goto LABEL_15;
                case 379:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: numRetiredBlocks(379) cannot add 1 element to context";
                  goto LABEL_15;
                case 381:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: numRefreshOnErrNandRefreshPerf(381) cannot add 1 element to context";
                  goto LABEL_15;
                case 382:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidReconstructReads(382) cannot add 1 element to context";
                  goto LABEL_15;
                case 383:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: gcReadsNoBlog(383) cannot add 1 element to context";
                  goto LABEL_15;
                case 384:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: AbortSkip_MPBXReadVerifyClosedBand(384) cannot add 1 element to context";
                  goto LABEL_15;
                case 385:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: openBandReadFail(385) cannot add 1 element to context";
                  goto LABEL_15;
                case 386:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: AbortSkip_MPBXReadVerifyOpenBand(386) cannot add 1 element to context";
                  goto LABEL_15;
                case 387:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: AbortSkip_MBPXFailedRebuildingParity(387) cannot add 1 element to context";
                  goto LABEL_15;
                case 388:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidSuccessfulPMXReconstructionInternal(388) cannot add 1 element to context";
                  goto LABEL_15;
                case 389:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidSuccessfulPMXReconstructionHost(389) cannot add 1 element to context";
                  goto LABEL_15;
                case 390:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidFailedPMXReconstructionInternal(390) cannot add 1 element to context";
                  goto LABEL_15;
                case 391:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidFailedPMXReconstructionHost(391) cannot add 1 element to context";
                  goto LABEL_15;
                case 392:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidSuccessfulRMXReconstructionInternal(392) cannot add 1 element to context";
                  goto LABEL_15;
                case 393:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidSuccessfulRMXReconstructionHost(393) cannot add 1 element to context";
                  goto LABEL_15;
                case 394:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidFailedRMXReconstructionInternal(394) cannot add 1 element to context";
                  goto LABEL_15;
                case 395:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidFailedRMXReconstructionHost(395) cannot add 1 element to context";
                  goto LABEL_15;
                case 396:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidFailedReadParityInternal(396) cannot add 1 element to context";
                  goto LABEL_15;
                case 397:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidFailedReadQParityInternal(397) cannot add 1 element to context";
                  goto LABEL_15;
                case 398:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidFailedReadQParity(398) cannot add 1 element to context";
                  goto LABEL_15;
                case 399:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidFailedReadQCopy(399) cannot add 1 element to context";
                  goto LABEL_15;
                case 400:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidFailedReconstructionQParity(400) cannot add 1 element to context";
                  goto LABEL_15;
                case 401:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: offlineBlocksCnt(401) cannot add 1 element to context";
                  goto LABEL_15;
                case 402:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: bork0Revectors(402) cannot add 1 element to context";
                  goto LABEL_15;
                case 403:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidFailedReadBlog(403) cannot add 1 element to context";
                  goto LABEL_15;
                case 404:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: numReliabilityRefreshes(404) cannot add 1 element to context";
                  goto LABEL_15;
                case 405:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidFailedReadQCopyInternal(405) cannot add 1 element to context";
                  goto LABEL_15;
                case 406:
                  if ((_DWORD)v14 != 5) {
                    sub_1000130E0( "ASPFTLParseBufferToCxt: raidReconstructSuccessFlow(406): (#5) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                  }
                  else {
                    unsigned int v20 = v14;
                  }
                  int v22 = "ASPFTLParseBufferToCxt: raidReconstructSuccessFlow(406): Cannot add 5 elements to context";
                  goto LABEL_2247;
                case 407:
                  if ((_DWORD)v14 != 5) {
                    sub_1000130E0( "ASPFTLParseBufferToCxt: raidReconstructFailFlow(407): (#5) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                  }
                  else {
                    unsigned int v20 = v14;
                  }
                  int v22 = "ASPFTLParseBufferToCxt: raidReconstructFailFlow(407): Cannot add 5 elements to context";
                  goto LABEL_2247;
                case 408:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidReconstructFailP(408) cannot add 1 element to context";
                  goto LABEL_15;
                case 409:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidReconstructFailQ(409) cannot add 1 element to context";
                  goto LABEL_15;
                case 410:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidReconstructFailUECC(410) cannot add 1 element to context";
                  goto LABEL_15;
                case 411:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidReconstructFailUnsupp(411) cannot add 1 element to context";
                  goto LABEL_15;
                case 412:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidUECCOpenBand(412) cannot add 1 element to context";
                  goto LABEL_15;
                case 414:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: ueccReads(414) cannot add 1 element to context";
                  goto LABEL_15;
                case 416:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidSuccessfulVerify(416) cannot add 1 element to context";
                  goto LABEL_15;
                case 417:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidFailedVerify(417) cannot add 1 element to context";
                  goto LABEL_15;
                case 418:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: numBandsVerified(418) cannot add 1 element to context";
                  goto LABEL_15;
                case 419:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: cache_heads(419) cannot add 1 element to context";
                  goto LABEL_15;
                case 420:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: AbortSkip_RMXtoMPBX(420) cannot add 1 element to context";
                  goto LABEL_15;
                case 421:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: s3eFwVer(421) cannot add 1 element to context";
                  goto LABEL_15;
                case 422:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: readVerifyNative(422) cannot add 1 element to context";
                  goto LABEL_15;
                case 423:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: reducedReadVerifyNative(423) cannot add 1 element to context";
                  goto LABEL_15;
                case 424:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: readVerifySlc(424) cannot add 1 element to context";
                  goto LABEL_15;
                case 425:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: reducedReadVerifySlc(425) cannot add 1 element to context";
                  goto LABEL_15;
                case 426:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: RxBurnEvictions(426) cannot add 1 element to context";
                  goto LABEL_15;
                case 427:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: directToTLCBands(427) cannot add 1 element to context";
                  goto LABEL_15;
                case 428:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: nandDesc(428) cannot add 1 element to context";
                  goto LABEL_15;
                case 429:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: fwUpdatesPercentUsed(429) cannot add 1 element to context";
                  goto LABEL_15;
                case 430:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: slcPercentUsed(430) cannot add 1 element to context";
                  goto LABEL_15;
                case 431:
                  uint64_t v19 = "ASPFTLParseBufferToCxt: percentUsed(431) cannot add 1 element to context";
                  goto LABEL_15;
                default:
                  switch(v12)
                  {
                    case 432:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: hostAutoWrites(432) cannot add 1 element to context";
                      goto LABEL_15;
                    case 433:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: hostAutoWriteXacts(433) cannot add 1 element to context";
                      goto LABEL_15;
                    case 434:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: gcDestDynamic(434) cannot add 1 element to context";
                      goto LABEL_15;
                    case 435:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: gcDestStatic(435) cannot add 1 element to context";
                      goto LABEL_15;
                    case 436:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: gcDestWearlevel(436) cannot add 1 element to context";
                      goto LABEL_15;
                    case 437:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: gcDestParity(437) cannot add 1 element to context";
                      goto LABEL_15;
                    case 438:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: AbortSkip_Format(438) cannot add 1 element to context";
                      goto LABEL_15;
                    case 440:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: raidSLCPadding(440) cannot add 1 element to context";
                      goto LABEL_15;
                    case 441:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: raidGCBands(441) cannot add 1 element to context";
                      goto LABEL_15;
                    case 442:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: raidGCSectors(442) cannot add 1 element to context";
                      goto LABEL_15;
                    case 443:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: raidGCPadding(443) cannot add 1 element to context";
                      goto LABEL_15;
                    case 444:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: raidSLCBandsPerHostFlow(444) cannot add 1 element to context";
                      goto LABEL_15;
                    case 445:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: raidSLCSecsPerHostFlow(445) cannot add 1 element to context";
                      goto LABEL_15;
                    case 446:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: rxBurnMinCycleRuns(446) cannot add 1 element to context";
                      goto LABEL_15;
                    case 447:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: clogNumFastCxt(447) cannot add 1 element to context";
                      goto LABEL_15;
                    case 448:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: clogNumRapidReboots(448) cannot add 1 element to context";
                      goto LABEL_15;
                    case 449:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: clogFastCxtAbvThr(449) cannot add 1 element to context";
                      goto LABEL_15;
                    case 450:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: rxBurnDiffModeRuns(450) cannot add 1 element to context";
                      goto LABEL_15;
                    case 452:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: indReadVerifyFail(452) cannot add 1 element to context";
                      goto LABEL_15;
                    case 453:
                      if ((_DWORD)v14 != 16) {
                        sub_1000130E0( "ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerReadLevel(453): (#16) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                      }
                      else {
                        unsigned int v20 = v14;
                      }
                      int v22 = "ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerReadLevel(453): Cannot add 16 elements to context";
                      goto LABEL_2247;
                    case 454:
                      if ((_DWORD)v14 != 16) {
                        sub_1000130E0( "ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerWriteLevel(454): (#16) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                      }
                      else {
                        unsigned int v20 = v14;
                      }
                      int v22 = "ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerWriteLevel(454): Cannot add 16 elements to context";
                      goto LABEL_2247;
                    case 456:
                      if ((_DWORD)v14 != 10) {
                        sub_1000130E0( "ASPFTLParseBufferToCxt: slcFifoDepth(456): (#10) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                      }
                      else {
                        unsigned int v20 = v14;
                      }
                      int v22 = "ASPFTLParseBufferToCxt: slcFifoDepth(456): Cannot add 10 elements to context";
                      goto LABEL_2247;
                    case 457:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: wcacheSectorsDirtyIdle(457) cannot add 1 element to context";
                      goto LABEL_15;
                    case 458:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: wcacheDS_SectorsDirtyIdle(458) cannot add 1 element to context";
                      goto LABEL_15;
                    case 459:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: wcacheFS_MbytesDirtyIdle(459) cannot add 1 element to context";
                      goto LABEL_15;
                    case 460:
                      if ((_DWORD)v14 != 256) {
                        sub_1000130E0( "ASPFTLParseBufferToCxt: CacheDepthVsThroughput(460): (#256) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                      }
                      else {
                        unsigned int v20 = v14;
                      }
                      int v22 = "ASPFTLParseBufferToCxt: CacheDepthVsThroughput(460): Cannot add 256 elements to context";
                      goto LABEL_2247;
                    case 461:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: directToTLCSectors(461) cannot add 1 element to context";
                      goto LABEL_15;
                    case 462:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: fallbackToWaterfall(462) cannot add 1 element to context";
                      goto LABEL_15;
                    case 463:
                      if ((_DWORD)v14 != 11) {
                        sub_1000130E0( "ASPFTLParseBufferToCxt: balanceProportionBucketsHistogram(463): (#11) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                      }
                      else {
                        unsigned int v20 = v14;
                      }
                      int v22 = "ASPFTLParseBufferToCxt: balanceProportionBucketsHistogram(463): Cannot add 11 elements to context";
                      goto LABEL_2247;
                    case 464:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: lockToTlc(464) cannot add 1 element to context";
                      goto LABEL_15;
                    case 465:
                      if ((_DWORD)v14 != 10) {
                        sub_1000130E0( "ASPFTLParseBufferToCxt: burstSizeHistogram(465): (#10) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                      }
                      else {
                        unsigned int v20 = v14;
                      }
                      int v22 = "ASPFTLParseBufferToCxt: burstSizeHistogram(465): Cannot add 10 elements to context";
                      goto LABEL_2247;
                    case 466:
                      if ((_DWORD)v14 != 64) {
                        sub_1000130E0( "ASPFTLParseBufferToCxt: qosDirectToTLC(466): (#64) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                      }
                      else {
                        unsigned int v20 = v14;
                      }
                      int v22 = "ASPFTLParseBufferToCxt: qosDirectToTLC(466): Cannot add 64 elements to context";
                      goto LABEL_2247;
                    case 467:
                      if ((_DWORD)v14 != 4) {
                        sub_1000130E0( "ASPFTLParseBufferToCxt: maxQosDirectToTLC(467): (#4) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                      }
                      else {
                        unsigned int v20 = v14;
                      }
                      int v22 = "ASPFTLParseBufferToCxt: maxQosDirectToTLC(467): Cannot add 4 elements to context";
                      goto LABEL_2247;
                    case 468:
                      if ((_DWORD)v14 != 16) {
                        sub_1000130E0( "ASPFTLParseBufferToCxt: wcacheDirtyAtFlush(468): (#16) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                      }
                      else {
                        unsigned int v20 = v14;
                      }
                      int v22 = "ASPFTLParseBufferToCxt: wcacheDirtyAtFlush(468): Cannot add 16 elements to context";
                      goto LABEL_2247;
                    case 469:
                      if ((_DWORD)v14 != 2) {
                        sub_1000130E0( "ASPFTLParseBufferToCxt: raidReconstructSuccessPartition(469): (#2) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                      }
                      else {
                        unsigned int v20 = v14;
                      }
                      int v22 = "ASPFTLParseBufferToCxt: raidReconstructSuccessPartition(469): Cannot add 2 elements to context";
                      goto LABEL_2247;
                    case 470:
                      if ((_DWORD)v14 != 2) {
                        sub_1000130E0( "ASPFTLParseBufferToCxt: raidReconstructFailPartition(470): (#2) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                      }
                      else {
                        unsigned int v20 = v14;
                      }
                      int v22 = "ASPFTLParseBufferToCxt: raidReconstructFailPartition(470): Cannot add 2 elements to context";
                      goto LABEL_2247;
                    case 471:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: raidUncleanBootBandFail(471) cannot add 1 element to context";
                      goto LABEL_15;
                    case 472:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: raidReconstructFailBandFlowHost(472) cannot add 1 element to context";
                      goto LABEL_15;
                    case 473:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: raidReconstructFailBandFlowGC(473) cannot add 1 element to context";
                      goto LABEL_15;
                    case 476:
                      if ((_DWORD)v14 != 2) {
                        sub_1000130E0( "ASPFTLParseBufferToCxt: raidSuccessfulRecoLbaRange(476): (#2) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                      }
                      else {
                        unsigned int v20 = v14;
                      }
                      int v22 = "ASPFTLParseBufferToCxt: raidSuccessfulRecoLbaRange(476): Cannot add 2 elements to context";
                      goto LABEL_2247;
                    case 477:
                      if ((_DWORD)v14 != 2) {
                        sub_1000130E0( "ASPFTLParseBufferToCxt: raidFailedRecoLbaRange(477): (#2) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                      }
                      else {
                        unsigned int v20 = v14;
                      }
                      int v22 = "ASPFTLParseBufferToCxt: raidFailedRecoLbaRange(477): Cannot add 2 elements to context";
                      goto LABEL_2247;
                    case 481:
                      if ((_DWORD)v14 != 32) {
                        sub_1000130E0( "ASPFTLParseBufferToCxt: skinnyBandErases_481(481): (#32) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                      }
                      else {
                        unsigned int v20 = v14;
                      }
                      int v22 = "ASPFTLParseBufferToCxt: skinnyBandErases_481(481): Cannot add 32 elements to context";
                      goto LABEL_2247;
                    case 483:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: tlcOverHeatWaterfall(483) cannot add 1 element to context";
                      goto LABEL_15;
                    case 484:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: skinnyCyclesConvert(484) cannot add 1 element to context";
                      goto LABEL_15;
                    case 485:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: non_proportional_directToTLCSectors(485) cannot add 1 element to context";
                      goto LABEL_15;
                    case 486:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: maxFailedFastCxtSync(486) cannot add 1 element to context";
                      goto LABEL_15;
                    case 487:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: numFormatUserArea(487) cannot add 1 element to context";
                      goto LABEL_15;
                    case 488:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: clogFastCxtSyncAborted(488) cannot add 1 element to context";
                      goto LABEL_15;
                    case 489:
                      if ((_DWORD)v14 != 5) {
                        sub_1000130E0( "ASPFTLParseBufferToCxt: clogOccupationSectors(489): (#5) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                      }
                      else {
                        unsigned int v20 = v14;
                      }
                      int v22 = "ASPFTLParseBufferToCxt: clogOccupationSectors(489): Cannot add 5 elements to context";
                      goto LABEL_2247;
                    case 490:
                      if ((_DWORD)v14 != 64) {
                        sub_1000130E0( "ASPFTLParseBufferToCxt: bdrTmpHist(490): (#64) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                      }
                      else {
                        unsigned int v20 = v14;
                      }
                      int v22 = "ASPFTLParseBufferToCxt: bdrTmpHist(490): Cannot add 64 elements to context";
                      goto LABEL_2247;
                    case 491:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: numFWUpdates(491) cannot add 1 element to context";
                      goto LABEL_15;
                    case 492:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: numClogLoadFails(492) cannot add 1 element to context";
                      goto LABEL_15;
                    case 493:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: rxBurnNumForcedDiffMode(493) cannot add 1 element to context";
                      goto LABEL_15;
                    case 494:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: RD_numSaves(494) cannot add 1 element to context";
                      goto LABEL_15;
                    case 495:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: eanCompressWrites(495) cannot add 1 element to context";
                      goto LABEL_15;
                    case 496:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: eanHostWrites(496) cannot add 1 element to context";
                      goto LABEL_15;
                    case 497:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: bandPreErases(497) cannot add 1 element to context";
                      goto LABEL_15;
                    case 498:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: eanHostUnmaps(498) cannot add 1 element to context";
                      goto LABEL_15;
                    case 499:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: eanHostFlushes(499) cannot add 1 element to context";
                      goto LABEL_15;
                    case 500:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: eanFastWrites(500) cannot add 1 element to context";
                      goto LABEL_15;
                    case 501:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: autowriteDS2FSCollisions(501) cannot add 1 element to context";
                      goto LABEL_15;
                    case 502:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: autowriteWaitTransferTaskBlocks(502) cannot add 1 element to context";
                      goto LABEL_15;
                    case 503:
                      if ((_DWORD)v14 != 2) {
                        sub_1000130E0( "ASPFTLParseBufferToCxt: avgCycle(503): (#2) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                      }
                      else {
                        unsigned int v20 = v14;
                      }
                      int v22 = "ASPFTLParseBufferToCxt: avgCycle(503): Cannot add 2 elements to context";
                      goto LABEL_2247;
                    case 504:
                      uint64_t v19 = "ASPFTLParseBufferToCxt: RD_DeferredClearsOverflowCnt(504) cannot add 1 element to context";
                      goto LABEL_15;
                    default:
                      switch(v12)
                      {
                        case 505:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: maxVerticsInBand(505) cannot add 1 element to context";
                          goto LABEL_15;
                        case 506:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: numVertics(506) cannot add 1 element to context";
                          goto LABEL_15;
                        case 507:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: exceededCVertics(507) cannot add 1 element to context";
                          goto LABEL_15;
                        case 510:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: raidReconstructFailMismatch(510) cannot add 1 element to context";
                          goto LABEL_15;
                        case 511:
                          if ((_DWORD)v14 != 32) {
                            sub_1000130E0( "ASPFTLParseBufferToCxt: mspbootBlockRefreshCnt(511): (#32) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                          }
                          else {
                            unsigned int v20 = v14;
                          }
                          int v22 = "ASPFTLParseBufferToCxt: mspbootBlockRefreshCnt(511): Cannot add 32 elements to context";
                          goto LABEL_2247;
                        case 516:
                          if ((_DWORD)v14 != 32) {
                            sub_1000130E0( "ASPFTLParseBufferToCxt: mspBootBlockRefreshTime(516): (#32) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                          }
                          else {
                            unsigned int v20 = v14;
                          }
                          int v22 = "ASPFTLParseBufferToCxt: mspBootBlockRefreshTime(516): Cannot add 32 elements to context";
                          goto LABEL_2247;
                        case 517:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: mspBootBlockCountPerMsp(517) cannot add 1 element to context";
                          goto LABEL_15;
                        case 518:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: skinnyRevectorSLC(518) cannot add 1 element to context";
                          goto LABEL_15;
                        case 519:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: skinnyRevectorTLC(519) cannot add 1 element to context";
                          goto LABEL_15;
                        case 520:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: perfSetupAttempts(520) cannot add 1 element to context";
                          goto LABEL_15;
                        case 521:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: perfSetupSuccesses(521) cannot add 1 element to context";
                          goto LABEL_15;
                        case 522:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: perfWriteAttempts(522) cannot add 1 element to context";
                          goto LABEL_15;
                        case 523:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: perfWriteSuccesses(523) cannot add 1 element to context";
                          goto LABEL_15;
                        case 524:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: perfReadAttempts(524) cannot add 1 element to context";
                          goto LABEL_15;
                        case 525:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: perfReadSuccesses(525) cannot add 1 element to context";
                          goto LABEL_15;
                        case 526:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: perfCleanupAttempts(526) cannot add 1 element to context";
                          goto LABEL_15;
                        case 527:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: perfCleanupSuccesses(527) cannot add 1 element to context";
                          goto LABEL_15;
                        case 530:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: firstFailedDieId(530) cannot add 1 element to context";
                          goto LABEL_15;
                        case 531:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: numDieFailures(531) cannot add 1 element to context";
                          goto LABEL_15;
                        case 532:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: spareAvailablePercent(532) cannot add 1 element to context";
                          goto LABEL_15;
                        case 533:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: dataFabricErr(533) cannot add 1 element to context";
                          goto LABEL_15;
                        case 534:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: downlinkFabricErr(534) cannot add 1 element to context";
                          goto LABEL_15;
                        case 535:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: prpAccTimeoutErr(535) cannot add 1 element to context";
                          goto LABEL_15;
                        case 537:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: uplinkFabricErr(537) cannot add 1 element to context";
                          goto LABEL_15;
                        case 538:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: skinnyBandsGBB(538) cannot add 1 element to context";
                          goto LABEL_15;
                        case 539:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: AbortPad_GcMustPadBand(539) cannot add 1 element to context";
                          goto LABEL_15;
                        case 540:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: AbortPad_GcMustPadSkinny(540) cannot add 1 element to context";
                          goto LABEL_15;
                        case 541:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: bdrHostPingInitial(541) cannot add 1 element to context";
                          goto LABEL_15;
                        case 542:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: bdrHostPingMoreNeeded(542) cannot add 1 element to context";
                          goto LABEL_15;
                        case 543:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: bandParityAllocationFailed(543) cannot add 1 element to context";
                          goto LABEL_15;
                        case 544:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: fastHwBurstToSlc(544) cannot add 1 element to context";
                          goto LABEL_15;
                        case 545:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: slowHwToTlc(545) cannot add 1 element to context";
                          goto LABEL_15;
                        case 546:
                          if ((_DWORD)v14 != 10) {
                            sub_1000130E0( "ASPFTLParseBufferToCxt: slcDemandBurstSizeDetected(546): (#10) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                          }
                          else {
                            unsigned int v20 = v14;
                          }
                          int v22 = "ASPFTLParseBufferToCxt: slcDemandBurstSizeDetected(546): Cannot add 10 elements to context";
                          goto LABEL_2247;
                        case 547:
                          if ((_DWORD)v14 != 10) {
                            sub_1000130E0( "ASPFTLParseBufferToCxt: slcDemandBurstDur(547): (#10) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                          }
                          else {
                            unsigned int v20 = v14;
                          }
                          int v22 = "ASPFTLParseBufferToCxt: slcDemandBurstDur(547): Cannot add 10 elements to context";
                          goto LABEL_2247;
                        case 548:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: fastHwToTlcBurst(548) cannot add 1 element to context";
                          goto LABEL_15;
                        case 549:
                          if ((_DWORD)v14 != 10) {
                            sub_1000130E0( "ASPFTLParseBufferToCxt: slcDemandBurstSizeSlc(549): (#10) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                          }
                          else {
                            unsigned int v20 = v14;
                          }
                          int v22 = "ASPFTLParseBufferToCxt: slcDemandBurstSizeSlc(549): Cannot add 10 elements to context";
                          goto LABEL_2247;
                        case 551:
                          if ((_DWORD)v14 != 11) {
                            sub_1000130E0( "ASPFTLParseBufferToCxt: balanceProportionBucketsHistogramTlc(551): (#11) cfg elements !=(%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                          }
                          else {
                            unsigned int v20 = v14;
                          }
                          int v22 = "ASPFTLParseBufferToCxt: balanceProportionBucketsHistogramTlc(551): Cannot add 11 elements to context";
                          goto LABEL_2247;
                        case 553:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: slowHwFlushToSlc(553) cannot add 1 element to context";
                          goto LABEL_15;
                        case 557:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: slowHwToSlc(557) cannot add 1 element to context";
                          goto LABEL_15;
                        case 558:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: flushNwToSlc(558) cannot add 1 element to context";
                          goto LABEL_15;
                        case 559:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: flushNwToTlc(559) cannot add 1 element to context";
                          goto LABEL_15;
                        case 560:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: oslcHw(560) cannot add 1 element to context";
                          goto LABEL_15;
                        case 561:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: oslcTransitions(561) cannot add 1 element to context";
                          goto LABEL_15;
                        case 563:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: slcDemandFlushCount(563) cannot add 1 element to context";
                          goto LABEL_15;
                        case 564:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: slcDemandBurstCount(564) cannot add 1 element to context";
                          goto LABEL_15;
                        case 565:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: oslcBaseAvgPE(565) cannot add 1 element to context";
                          goto LABEL_15;
                        case 566:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: raidReconstructFailNoSPBX(566) cannot add 1 element to context";
                          goto LABEL_15;
                        case 567:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: raidReconstructFailDouble(567) cannot add 1 element to context";
                          goto LABEL_15;
                        case 568:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: oslcFastWAmpUOnOff(568) cannot add 1 element to context";
                          goto LABEL_15;
                        case 569:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: oslcSlowWAmpUOnOff(569) cannot add 1 element to context";
                          goto LABEL_15;
                        case 570:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: raidReconstructFailInvalid(570) cannot add 1 element to context";
                          goto LABEL_15;
                        case 572:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: oslcLastWAmpUx10(572) cannot add 1 element to context";
                          goto LABEL_15;
                        case 573:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: raidFailedReadNoBlog(573) cannot add 1 element to context";
                          goto LABEL_15;
                        case 574:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: raidReconstructFailBlank(574) cannot add 1 element to context";
                          goto LABEL_15;
                        case 575:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: oslcHotTLCOnOff(575) cannot add 1 element to context";
                          goto LABEL_15;
                        case 576:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: gcVPackDestinations(576) cannot add 1 element to context";
                          goto LABEL_15;
                        case 581:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: averageTLCPECycles(581) cannot add 1 element to context";
                          goto LABEL_15;
                        case 582:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: averageSLCPECycles(582) cannot add 1 element to context";
                          goto LABEL_15;
                        case 583:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: numAtomicBoots(583) cannot add 1 element to context";
                          goto LABEL_15;
                        case 584:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: clogMinorMismatch(584) cannot add 1 element to context";
                          goto LABEL_15;
                        case 586:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: raidExpectedFailRMXReconstructionInternal(586) cannot add 1 element to context";
                          goto LABEL_15;
                        case 587:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: raidExpectedFailRMXReconstructionHost(587) cannot add 1 element to context";
                          goto LABEL_15;
                        case 588:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: oslcGCinvalidations(588) cannot add 1 element to context";
                          goto LABEL_15;
                        case 589:
                          uint64_t v19 = "ASPFTLParseBufferToCxt: oslcGCActivateReason(589) cannot add 1 element to context";
                          goto LABEL_15;
                        default:
                          switch(v12)
                          {
                            case 590:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: oslcLowCleanBandsUOnOff(590) cannot add 1 element to context";
                              goto LABEL_15;
                            case 591:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: oslcTooManyGCMustOnOff(591) cannot add 1 element to context";
                              goto LABEL_15;
                            case 592:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: oslcBaseHostWrites(592) cannot add 1 element to context";
                              goto LABEL_15;
                            case 593:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: oslcBaseBandErases(593) cannot add 1 element to context";
                              goto LABEL_15;
                            case 594:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: oslcBdrBands(594) cannot add 1 element to context";
                              goto LABEL_15;
                            case 595:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: oslcBdrValid(595) cannot add 1 element to context";
                              goto LABEL_15;
                            case 596:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: unexpectedBlanksInternal(596) cannot add 1 element to context";
                              goto LABEL_15;
                            case 597:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: unexpectedBlanksOnRV(597) cannot add 1 element to context";
                              goto LABEL_15;
                            case 601:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: waterfallLockSectors(601) cannot add 1 element to context";
                              goto LABEL_15;
                            case 602:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: oslcGCActiveWrites(602) cannot add 1 element to context";
                              goto LABEL_15;
                            case 603:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: chipIdTemperatureSample(603) cannot add 1 element to context";
                              goto LABEL_15;
                            case 604:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: gcVPackWrites(604) cannot add 1 element to context";
                              goto LABEL_15;
                            case 605:
                              if ((_DWORD)v14 != 10) {
                                sub_1000130E0( "ASPFTLParseBufferToCxt: gcActiveReasons(605): (#10) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                              }
                              else {
                                unsigned int v20 = v14;
                              }
                              int v22 = "ASPFTLParseBufferToCxt: gcActiveReasons(605): Cannot add 10 elements to context";
                              goto LABEL_2247;
                            case 606:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: eanMaxInitTimeMs(606) cannot add 1 element to context";
                              goto LABEL_15;
                            case 607:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: eanMinToFirstReadTimeMs(607) cannot add 1 element to context";
                              goto LABEL_15;
                            case 608:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: skinnyAPGMRetire(608) cannot add 1 element to context";
                              goto LABEL_15;
                            case 609:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: unexpectedBlanksHost(609) cannot add 1 element to context";
                              goto LABEL_15;
                            case 610:
                              if ((_DWORD)v14 != 64) {
                                sub_1000130E0( "ASPFTLParseBufferToCxt: pcieAerCounters(610): (#64) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                              }
                              else {
                                unsigned int v20 = v14;
                              }
                              int v22 = "ASPFTLParseBufferToCxt: pcieAerCounters(610): Cannot add 64 elements to context";
                              goto LABEL_2247;
                            case 611:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: fastHwToTlcBalance(611) cannot add 1 element to context";
                              goto LABEL_15;
                            case 612:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: perfOSLCRuns(612) cannot add 1 element to context";
                              goto LABEL_15;
                            case 613:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: slcDemandBurstWritesInGC(613) cannot add 1 element to context";
                              goto LABEL_15;
                            case 614:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: slcDemandBurstWritesInTT(614) cannot add 1 element to context";
                              goto LABEL_15;
                            case 615:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: slcDemandBurstWritesInNRP(615) cannot add 1 element to context";
                              goto LABEL_15;
                            case 616:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: perfTotalDmaMb(616) cannot add 1 element to context";
                              goto LABEL_15;
                            case 617:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: eanAvgInitTimeMs(617) cannot add 1 element to context";
                              goto LABEL_15;
                            case 618:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: eanAvgToFirstReadTimeMs(618) cannot add 1 element to context";
                              goto LABEL_15;
                            case 619:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: eanMaxBootReadTimeMs(619) cannot add 1 element to context";
                              goto LABEL_15;
                            case 620:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: eanAvgBootReadTimeMs(620) cannot add 1 element to context";
                              goto LABEL_15;
                            case 621:
                              if ((_DWORD)v14 != 10) {
                                sub_1000130E0( "ASPFTLParseBufferToCxt: eanBootReadsHist(621): (#10) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                              }
                              else {
                                unsigned int v20 = v14;
                              }
                              int v22 = "ASPFTLParseBufferToCxt: eanBootReadsHist(621): Cannot add 10 elements to context";
                              goto LABEL_2247;
                            case 622:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: maxBgInitTimeMs(622) cannot add 1 element to context";
                              goto LABEL_15;
                            case 623:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: avgBgInitTimeMs(623) cannot add 1 element to context";
                              goto LABEL_15;
                            case 624:
                              if ((_DWORD)v14 != 16) {
                                sub_1000130E0( "ASPFTLParseBufferToCxt: clogFailReason(624): (#16) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                              }
                              else {
                                unsigned int v20 = v14;
                              }
                              int v22 = "ASPFTLParseBufferToCxt: clogFailReason(624): Cannot add 16 elements to context";
                              goto LABEL_2247;
                            case 625:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: eanMinBootReadMBPerSec(625) cannot add 1 element to context";
                              goto LABEL_15;
                            case 626:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: eanAvgBootReadMBPerSec(626) cannot add 1 element to context";
                              goto LABEL_15;
                            case 627:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: minSkinnyPECycles(627) cannot add 1 element to context";
                              goto LABEL_15;
                            case 628:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: maxSkinnyPECycles(628) cannot add 1 element to context";
                              goto LABEL_15;
                            case 629:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: averageSkinnyPECycles(629) cannot add 1 element to context";
                              goto LABEL_15;
                            case 630:
                              if ((_DWORD)v14 != 6) {
                                sub_1000130E0( "ASPFTLParseBufferToCxt: raidSuccessfulRecoEAN(630): (#6) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                              }
                              else {
                                unsigned int v20 = v14;
                              }
                              int v22 = "ASPFTLParseBufferToCxt: raidSuccessfulRecoEAN(630): Cannot add 6 elements to context";
                              goto LABEL_2247;
                            case 631:
                              if ((_DWORD)v14 != 6) {
                                sub_1000130E0( "ASPFTLParseBufferToCxt: raidFailedRecoEAN(631): (#6) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                              }
                              else {
                                unsigned int v20 = v14;
                              }
                              int v22 = "ASPFTLParseBufferToCxt: raidFailedRecoEAN(631): Cannot add 6 elements to context";
                              goto LABEL_2247;
                            case 632:
                              if ((_DWORD)v14 != 6) {
                                sub_1000130E0( "ASPFTLParseBufferToCxt: eanFirstReadMode(632): (#6) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                              }
                              else {
                                unsigned int v20 = v14;
                              }
                              int v22 = "ASPFTLParseBufferToCxt: eanFirstReadMode(632): Cannot add 6 elements to context";
                              goto LABEL_2247;
                            case 635:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: oslcHwGC(635) cannot add 1 element to context";
                              goto LABEL_15;
                            case 636:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: oslcHwTT(636) cannot add 1 element to context";
                              goto LABEL_15;
                            case 637:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: oslcHwNRP(637) cannot add 1 element to context";
                              goto LABEL_15;
                            case 638:
                              if ((_DWORD)v14 != 10) {
                                sub_1000130E0( "ASPFTLParseBufferToCxt: oslcDemandBurstSize(638): (#10) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                              }
                              else {
                                unsigned int v20 = v14;
                              }
                              int v22 = "ASPFTLParseBufferToCxt: oslcDemandBurstSize(638): Cannot add 10 elements to context";
                              goto LABEL_2247;
                            case 639:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: raidReconstructSuccessBandFlowOslc(639) cannot add 1 element to context";
                              goto LABEL_15;
                            case 640:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: raidReconstructFailBandFlowOslc(640) cannot add 1 element to context";
                              goto LABEL_15;
                            case 641:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: raidFailSectors(641) cannot add 1 element to context";
                              goto LABEL_15;
                            case 642:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: eanFailSectors(642) cannot add 1 element to context";
                              goto LABEL_15;
                            case 643:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: bdrTimeMode(643) cannot add 1 element to context";
                              goto LABEL_15;
                            case 644:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: raidParityNotSavedP(644) cannot add 1 element to context";
                              goto LABEL_15;
                            case 645:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: raidParityNotSavedQ(645) cannot add 1 element to context";
                              goto LABEL_15;
                            case 646:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: raidParityInvalid(646) cannot add 1 element to context";
                              goto LABEL_15;
                            case 647:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: raidParityUnknown(647) cannot add 1 element to context";
                              goto LABEL_15;
                            case 648:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: raidParityUnmapped(648) cannot add 1 element to context";
                              goto LABEL_15;
                            case 649:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: raidParityGCUnc(649) cannot add 1 element to context";
                              goto LABEL_15;
                            case 657:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: AbortSkip_MPBXProbational(657) cannot add 1 element to context";
                              goto LABEL_15;
                            case 659:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: raidVerificationReads(659) cannot add 1 element to context";
                              goto LABEL_15;
                            case 666:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: nofDies(666) cannot add 1 element to context";
                              goto LABEL_15;
                            case 671:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: skinnyBandsNum(671) cannot add 1 element to context";
                              goto LABEL_15;
                            case 672:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: skinnyBandsNumDips(672) cannot add 1 element to context";
                              goto LABEL_15;
                            case 674:
                              if ((_DWORD)v14 != 8) {
                                sub_1000130E0( "ASPFTLParseBufferToCxt: oslcNoVotesHw(674): (#8) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                              }
                              else {
                                unsigned int v20 = v14;
                              }
                              int v22 = "ASPFTLParseBufferToCxt: oslcNoVotesHw(674): Cannot add 8 elements to context";
                              goto LABEL_2247;
                            case 675:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: totalLbas(675) cannot add 1 element to context";
                              goto LABEL_15;
                            case 676:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: bdrHostPingExtra(676) cannot add 1 element to context";
                              goto LABEL_15;
                            case 677:
                              uint64_t v19 = "ASPFTLParseBufferToCxt: magazineInstanceMeta(677) cannot add 1 element to context";
                              goto LABEL_15;
                            default:
                              switch(v12)
                              {
                                case 680:
                                  if ((_DWORD)v14 != 3) {
                                    sub_1000130E0( "ASPFTLParseBufferToCxt: magazineFWVersion(680): (#3) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                  }
                                  else {
                                    unsigned int v20 = v14;
                                  }
                                  int v22 = "ASPFTLParseBufferToCxt: magazineFWVersion(680): Cannot add 3 elements to context";
                                  goto LABEL_2247;
                                case 681:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidReconstructFailPMXUnsup(681) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 682:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidReconstructFailBMXUnsup(682) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 683:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: iBootNANDResets(683) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 684:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: pcieClkreqHighTimeout(684) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 687:
                                  if ((_DWORD)v14 != 3) {
                                    sub_1000130E0( "ASPFTLParseBufferToCxt: cbdrInitSent(687): (#3) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                  }
                                  else {
                                    unsigned int v20 = v14;
                                  }
                                  int v22 = "ASPFTLParseBufferToCxt: cbdrInitSent(687): Cannot add 3 elements to context";
                                  goto LABEL_2247;
                                case 688:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: cbdrPauseSent(688) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 689:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: cbdrResumeSent(689) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 690:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: cbdrGetResultSent(690) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 691:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: cbdrEarlyExits(691) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 694:
                                  if ((_DWORD)v14 != 10) {
                                    sub_1000130E0( "ASPFTLParseBufferToCxt: cbdrRefreshGrades(694): (#10) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                  }
                                  else {
                                    unsigned int v20 = v14;
                                  }
                                  int v22 = "ASPFTLParseBufferToCxt: cbdrRefreshGrades(694): Cannot add 10 elements to context";
                                  goto LABEL_2247;
                                case 695:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: cbdrNotEnoughReads(695) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 696:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: cbdrAborts(696) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 697:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: TurboRaidHostClassifications(697) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 698:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: TurboRaidInternalClassifications(698) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 699:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: cbdrFullyDone(699) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 702:
                                  if ((_DWORD)v14 != 32) {
                                    sub_1000130E0( "ASPFTLParseBufferToCxt: vcurve(702): (#32) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                  }
                                  else {
                                    unsigned int v20 = v14;
                                  }
                                  int v22 = "ASPFTLParseBufferToCxt: vcurve(702): Cannot add 32 elements to context";
                                  goto LABEL_2247;
                                case 703:
                                  if ((_DWORD)v14 != 12) {
                                    sub_1000130E0( "ASPFTLParseBufferToCxt: injDepth(703): (#12) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                  }
                                  else {
                                    unsigned int v20 = v14;
                                  }
                                  int v22 = "ASPFTLParseBufferToCxt: injDepth(703): Cannot add 12 elements to context";
                                  goto LABEL_2247;
                                case 704:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: logical_disk_occupied_promiles(704) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 711:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidPrevFailedReconstructSkip(711) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 712:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: TurboRaidSuccessfulHostAuxReads(712) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 713:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: TurboRaidSuccessfulInternalAuxReads(713) cannot add 1 el"
                                        "ement to context";
                                  goto LABEL_15;
                                case 714:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: turboRaidClassificationReliabilityHost(714) cannot add 1"
                                        " element to context";
                                  goto LABEL_15;
                                case 715:
                                  if ((sub_100022DD0( a1,  "turboRaidClassificationReliabilityInternal",  (uint64_t)v8,  8u,  1u) & 1) != 0) {
                                    goto LABEL_16;
                                  }
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: turboRaidClassificationReliabilityInternal(715) cannot a"
                                        "dd 1 element to context";
                                  goto LABEL_15;
                                case 716:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: turboRaidClassificationQualityHost(716) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 717:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: turboRaidClassificationQualityInternal(717) cannot add 1"
                                        " element to context";
                                  goto LABEL_15;
                                case 719:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: skinnyBandErases(719) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 721:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: gcPDusterDestinations(721) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 722:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: gcPDusterWrites(722) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 730:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: rvFails(730) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 737:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: TurboRaidFailedHostAuxReads(737) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 738:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: TurboRaidFailedInternalAuxReads(738) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 741:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: autoSkipTriggers(741) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 742:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: autoSkipPlanes(742) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 744:
                                  if ((_DWORD)v14 != 8) {
                                    sub_1000130E0( "ASPFTLParseBufferToCxt: raidReconstructDurationHisto(744): (#8) cfg elements != (% d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                  }
                                  else {
                                    unsigned int v20 = v14;
                                  }
                                  int v22 = "ASPFTLParseBufferToCxt: raidReconstructDurationHisto(744): Cannot add 8 elements to context";
                                  goto LABEL_2247;
                                case 745:
                                  if ((_DWORD)v14 != 8) {
                                    sub_1000130E0( "ASPFTLParseBufferToCxt: failsOnReconstructHisto(745): (#8) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                  }
                                  else {
                                    unsigned int v20 = v14;
                                  }
                                  int v22 = "ASPFTLParseBufferToCxt: failsOnReconstructHisto(745): Cannot add 8 elements to context";
                                  goto LABEL_2247;
                                case 746:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: bandKill_userFlattenExcessive(746) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 747:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: bandKill_IntFlattenExcessive(747) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 748:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: bandKill_userFlattenBalance(748) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 749:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: bandKill_intFlattenBalance(749) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 750:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: bandKill_formatVertExcessive(750) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 751:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: bandKill_formatVertBalance(751) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 753:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: cbdrNumSlowRefreshes(753) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 754:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: cbdrNumFastRefreshes(754) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 755:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: cbdrTotalRefreshValidity(755) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 756:
                                  if ((_DWORD)v14 != 9) {
                                    sub_1000130E0( "ASPFTLParseBufferToCxt: cbdrRefreshedAges(756): (#9) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                  }
                                  else {
                                    unsigned int v20 = v14;
                                  }
                                  int v22 = "ASPFTLParseBufferToCxt: cbdrRefreshedAges(756): Cannot add 9 elements to context";
                                  goto LABEL_2247;
                                case 758:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: cbdrSkippedBlocks(758) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 759:
                                  if ((_DWORD)v14 != 5) {
                                    sub_1000130E0( "ASPFTLParseBufferToCxt: cbdrScanPct(759): (#5) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                  }
                                  else {
                                    unsigned int v20 = v14;
                                  }
                                  int v22 = "ASPFTLParseBufferToCxt: cbdrScanPct(759): Cannot add 5 elements to context";
                                  goto LABEL_2247;
                                case 760:
                                  if ((sub_100022DD0( a1,  "raidSuccessfulBMXReconstructionInternal",  (uint64_t)v8,  8u,  1u) & 1) != 0) {
                                    goto LABEL_16;
                                  }
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidSuccessfulBMXReconstructionInternal(760) cannot add "
                                        "1 element to context";
                                  goto LABEL_15;
                                case 761:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidSuccessfulBMXReconstructionHost(761) cannot add 1 el"
                                        "ement to context";
                                  goto LABEL_15;
                                case 762:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidFailedBMXReconstructionInternal(762) cannot add 1 el"
                                        "ement to context";
                                  goto LABEL_15;
                                case 763:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidFailedBMXReconstructionHost(763) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 764:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: ricSPRVFail(764) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 765:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: ricMPRVFail(765) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 767:
                                  if ((_DWORD)v14 != 10) {
                                    sub_1000130E0( "ASPFTLParseBufferToCxt: cbdrRefreshGradesSLC(767): (#10) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                  }
                                  else {
                                    unsigned int v20 = v14;
                                  }
                                  int v22 = "ASPFTLParseBufferToCxt: cbdrRefreshGradesSLC(767): Cannot add 10 elements to context";
                                  goto LABEL_2247;
                                case 768:
                                  if ((_DWORD)v14 != 9) {
                                    sub_1000130E0( "ASPFTLParseBufferToCxt: cbdrRefreshedAgesSLC(768): (#9) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                  }
                                  else {
                                    unsigned int v20 = v14;
                                  }
                                  int v22 = "ASPFTLParseBufferToCxt: cbdrRefreshedAgesSLC(768): Cannot add 9 elements to context";
                                  goto LABEL_2247;
                                case 769:
                                  if ((_DWORD)v14 != 5) {
                                    sub_1000130E0( "ASPFTLParseBufferToCxt: cbdrScanPctSLC(769): (#5) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                  }
                                  else {
                                    unsigned int v20 = v14;
                                  }
                                  int v22 = "ASPFTLParseBufferToCxt: cbdrScanPctSLC(769): Cannot add 5 elements to context";
                                  goto LABEL_2247;
                                case 770:
                                  if ((_DWORD)v14 != 8) {
                                    sub_1000130E0( "ASPFTLParseBufferToCxt: cpuBurstLength(770): (#8) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                  }
                                  else {
                                    unsigned int v20 = v14;
                                  }
                                  int v22 = "ASPFTLParseBufferToCxt: cpuBurstLength(770): Cannot add 8 elements to context";
                                  goto LABEL_2247;
                                case 771:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: autoSkipRaidRecoFail(771) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 772:
                                  if ((_DWORD)v14 != 32) {
                                    sub_1000130E0( "ASPFTLParseBufferToCxt: dmReasonsSlc(772): (#32) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                  }
                                  else {
                                    unsigned int v20 = v14;
                                  }
                                  int v22 = "ASPFTLParseBufferToCxt: dmReasonsSlc(772): Cannot add 32 elements to context";
                                  goto LABEL_2247;
                                case 773:
                                  if ((_DWORD)v14 != 32) {
                                    sub_1000130E0( "ASPFTLParseBufferToCxt: dmReasonsTlc(773): (#32) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                  }
                                  else {
                                    unsigned int v20 = v14;
                                  }
                                  int v22 = "ASPFTLParseBufferToCxt: dmReasonsTlc(773): Cannot add 32 elements to context";
                                  goto LABEL_2247;
                                case 774:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: raidReconstructFailBMXAbort(774) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 775:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: bandKill_fatBindingNoBlocks(775) cannot add 1 element to context";
                                  goto LABEL_15;
                                case 776:
                                  uint64_t v19 = "ASPFTLParseBufferToCxt: bandKill_fatBindingFewBlocks(776) cannot add 1 element to context";
                                  goto LABEL_15;
                                default:
                                  switch(v12)
                                  {
                                    case 777:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: numBadBootBlocks(777) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 778:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: snapshotCPUHigh(778) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 779:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: snapshotCPULow(779) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 780:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: gcWithoutBMs(780) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 781:
                                      if ((_DWORD)v14 != 10) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: gcSearchTimeHistory(781): (#10) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: gcSearchTimeHistory(781): Cannot add 10 elements to context";
                                      goto LABEL_2247;
                                    case 785:
                                      if ((_DWORD)v14 != 16) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: gcSearchPortion(785): (#16) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: gcSearchPortion(785): Cannot add 16 elements to context";
                                      goto LABEL_2247;
                                    case 786:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: raidReconstructFailBmxMp(786) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 787:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: raidReconstructFailBmx(787) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 788:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: raidReconstructFailBMXUECC(788) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 789:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: raidReconstructFailBMXBlank(789) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 790:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: raidPrevFailedReconstructBmxMpSkip(790) cannot add 1"
                                            " element to context";
                                      goto LABEL_15;
                                    case 792:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: numTLCFatBands(792) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 793:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: fatValidity(793) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 794:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: fatTotal(794) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 798:
                                      if ((_DWORD)v14 != 4) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: raidBMXFailP(798): (#4) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: raidBMXFailP(798): Cannot add 4 elements to context";
                                      goto LABEL_2247;
                                    case 799:
                                      if ((_DWORD)v14 != 4) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: raidBMXFailUECC(799): (#4) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: raidBMXFailUECC(799): Cannot add 4 elements to context";
                                      goto LABEL_2247;
                                    case 804:
                                      if ((_DWORD)v14 != 4) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: raidBMXFailNoSPBX(804): (#4) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: raidBMXFailNoSPBX(804): Cannot add 4 elements to context";
                                      goto LABEL_2247;
                                    case 806:
                                      if ((_DWORD)v14 != 4) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: raidBMXFailBlank(806): (#4) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: raidBMXFailBlank(806): Cannot add 4 elements to context";
                                      goto LABEL_2247;
                                    case 809:
                                      if ((_DWORD)v14 != 4) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: raidBMXFailUnsup(809): (#4) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: raidBMXFailUnsup(809): Cannot add 4 elements to context";
                                      goto LABEL_2247;
                                    case 811:
                                      if ((_DWORD)v14 != 4) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: raidBMXFailMpSkip(811): (#4) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: raidBMXFailMpSkip(811): Cannot add 4 elements to context";
                                      goto LABEL_2247;
                                    case 812:
                                      if ((_DWORD)v14 != 4) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: raidBMXFailAbort(812): (#4) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: raidBMXFailAbort(812): Cannot add 4 elements to context";
                                      goto LABEL_2247;
                                    case 813:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: TurboRaidIsEnabled(813) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 814:
                                      if ((_DWORD)v14 != 4) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: raidBMXFailOther(814): (#4) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: raidBMXFailOther(814): Cannot add 4 elements to context";
                                      goto LABEL_2247;
                                    case 815:
                                      if ((_DWORD)v14 != 4) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: raidBMXSuccess(815): (#4) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: raidBMXSuccess(815): Cannot add 4 elements to context";
                                      goto LABEL_2247;
                                    case 816:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: skinnyBandsExtraDip(816) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 821:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: writeAmp(821) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 822:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: ricMaxClogOnlyPages(822) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 823:
                                      if ((_DWORD)v14 != 3) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: readClassifyStatusesHisto(823): (#3) cfg elements !=(%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: readClassifyStatusesHisto(823): Cannot add 3 elements to context";
                                      goto LABEL_2247;
                                    case 824:
                                      if ((_DWORD)v14 != 10) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: readWithAuxStatusesHisto(824): (#10) cfg elements !=(%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: readWithAuxStatusesHisto(824): Cannot add 10 elements to context";
                                      goto LABEL_2247;
                                    case 825:
                                      if ((_DWORD)v14 != 10) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: readReconstructStatusesHisto(825): (#10) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: readReconstructStatusesHisto(825): Cannot add 10 ele"
                                            "ments to context";
                                      goto LABEL_2247;
                                    case 826:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: bdrBackupChecks(826) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 827:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: ricExceedClogOnlyPagesTH(827) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 828:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: numDipFailures(828) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 831:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: prefetchNextRange(831) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 862:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: raidSuccessfulSkip(862) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 863:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: raidFailedSkip(863) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 864:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: raidSkipAttempts(864) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 865:
                                      if ((_DWORD)v14 != 16) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: timeOfThrottlingPerLevel(865): (#16) cfg elements !=(%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: timeOfThrottlingPerLevel(865): Cannot add 16 elements to context";
                                      goto LABEL_2247;
                                    case 866:
                                      if ((_DWORD)v14 != 16) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: timeOfThrottlingPerReadLevel(866): (#16) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: timeOfThrottlingPerReadLevel(866): Cannot add 16 ele"
                                            "ments to context";
                                      goto LABEL_2247;
                                    case 867:
                                      if ((_DWORD)v14 != 16) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: timeOfThrottlingPerWriteLevel(867): (#16) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: timeOfThrottlingPerWriteLevel(867): Cannot add 16 el"
                                            "ements to context";
                                      goto LABEL_2247;
                                    case 868:
                                      if ((_DWORD)v14 != 32) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: dmReasonsSlc_1bc(868): (#32) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: dmReasonsSlc_1bc(868): Cannot add 32 elements to context";
                                      goto LABEL_2247;
                                    case 869:
                                      if ((_DWORD)v14 != 32) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: dmReasonsTlc_1bc(869): (#32) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: dmReasonsTlc_1bc(869): Cannot add 32 elements to context";
                                      goto LABEL_2247;
                                    case 870:
                                      if ((_DWORD)v14 != 32) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: dmReasonsSlc_1bc_he(870): (#32) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: dmReasonsSlc_1bc_he(870): Cannot add 32 elements to context";
                                      goto LABEL_2247;
                                    case 871:
                                      if ((_DWORD)v14 != 32) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: dmReasonsTlc_1bc_he(871): (#32) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: dmReasonsTlc_1bc_he(871): Cannot add 32 elements to context";
                                      goto LABEL_2247;
                                    case 876:
                                      if ((_DWORD)v14 != 32) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: dmReasonsSlc_mbc(876): (#32) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: dmReasonsSlc_mbc(876): Cannot add 32 elements to context";
                                      goto LABEL_2247;
                                    case 877:
                                      if ((_DWORD)v14 != 32) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: dmReasonsTlc_mbc(877): (#32) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: dmReasonsTlc_mbc(877): Cannot add 32 elements to context";
                                      goto LABEL_2247;
                                    case 883:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: clogEmptyProgramms(883) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 884:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: oslcHwCloseBand(884) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 891:
                                      if ((_DWORD)v14 != 2) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: turboRaidSuccessAuxPartition(891): (#2) cfg elements ! = (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: turboRaidSuccessAuxPartition(891): Cannot add 2 elements to context";
                                      goto LABEL_2247;
                                    case 892:
                                      if ((_DWORD)v14 != 2) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: turboRaidFailAuxPartition(892): (#2) cfg elements !=(%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: turboRaidFailAuxPartition(892): Cannot add 2 elements to context";
                                      goto LABEL_2247;
                                    case 893:
                                      if ((_DWORD)v14 != 2) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: turboRaidClassifyQualPartition(893): (#2) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: turboRaidClassifyQualPartition(893): Cannot add 2 el"
                                            "ements to context";
                                      goto LABEL_2247;
                                    case 894:
                                      if ((_DWORD)v14 != 2) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: turboRaidClassifyRelPartition(894): (#2) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: turboRaidClassifyRelPartition(894): Cannot add 2 ele"
                                            "ments to context";
                                      goto LABEL_2247;
                                    case 895:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: IND_pool_freeMinSilo(895) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 896:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: autoSweepBlocks(896) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 897:
                                      if ((_DWORD)v14 != 16) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: wcWrFragSizes(897): (#16) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: wcWrFragSizes(897): Cannot add 16 elements to context";
                                      goto LABEL_2247;
                                    case 898:
                                      if ((_DWORD)v14 != 16) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: indStateAcrossGcDidNoL(898): (#16) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: indStateAcrossGcDidNoL(898): Cannot add 16 elements to context";
                                      goto LABEL_2247;
                                    case 899:
                                      if ((_DWORD)v14 != 16) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: indStateAcrossGcDidL(899): (#16) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: indStateAcrossGcDidL(899): Cannot add 16 elements to context";
                                      goto LABEL_2247;
                                    case 900:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: turboRaidNoClassifyDueToWasRetire(900) cannot add 1 "
                                            "element to context";
                                      goto LABEL_15;
                                    case 901:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: turboRaidNoClassifyDueToOpenBand(901) cannot add 1 e"
                                            "lement to context";
                                      goto LABEL_15;
                                    case 902:
                                      if ((sub_100022DD0( a1,  "turboRaidNoClassifyDueToQualityBlock",  (uint64_t)v8,  8u,  1u) & 1) != 0) {
                                        goto LABEL_16;
                                      }
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: turboRaidNoClassifyDueToQualityBlock(902) cannot add"
                                            " 1 element to context";
                                      goto LABEL_15;
                                    case 903:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: turboRaidGbbOpenBand(903) cannot add 1 element to context";
                                      goto LABEL_15;
                                    case 904:
                                      uint64_t v19 = "ASPFTLParseBufferToCxt: turboRaidGbbShouldRetireOnRefresh(904) cannot add 1 "
                                            "element to context";
                                      goto LABEL_15;
                                    case 905:
                                      if ((_DWORD)v14 != 16) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: turboRaidRelPerBlock(905): (#16) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: turboRaidRelPerBlock(905): Cannot add 16 elements to context";
                                      goto LABEL_2247;
                                    case 906:
                                      if ((_DWORD)v14 != 16) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: turboRaidRelBetweenRefreshesPerBlock(906): (#16) cfg e lements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      if ((sub_100022DD0( a1,  "turboRaidRelBetweenRefreshesPerBlock_",  (uint64_t)v8,  8u,  v20) & 1) != 0) {
                                        goto LABEL_14;
                                      }
                                      int v22 = "ASPFTLParseBufferToCxt: turboRaidRelBetweenRefreshesPerBlock(906): Cannot ad"
                                            "d 16 elements to context";
                                      goto LABEL_2247;
                                    default:
                                      if (v12 <= 1039)
                                      {
                                        switch(v12)
                                        {
                                          case 907:
                                            if ((_DWORD)v14 != 16) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: turboRaidMaxRelBetweenRefreshesPerBlock(907): (# 16) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            if ((sub_100022DD0( a1,  "turboRaidMaxRelBetweenRefreshesPerBlock_",  (uint64_t)v8,  8u,  v20) & 1) != 0) {
                                              goto LABEL_14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: turboRaidMaxRelBetweenRefreshesPerBlock(907): "
                                                  "Cannot add 16 elements to context";
                                            goto LABEL_2247;
                                          case 908:
                                            if ((_DWORD)v14 != 16) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: turboRaidMinRelBetweenRefreshesPerBlock(908): (# 16) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            if ((sub_100022DD0( a1,  "turboRaidMinRelBetweenRefreshesPerBlock_",  (uint64_t)v8,  8u,  v20) & 1) != 0) {
                                              goto LABEL_14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: turboRaidMinRelBetweenRefreshesPerBlock(908): "
                                                  "Cannot add 16 elements to context";
                                            goto LABEL_2247;
                                          case 909:
                                          case 910:
                                          case 911:
                                          case 912:
                                          case 913:
                                          case 914:
                                          case 915:
                                          case 916:
                                          case 917:
                                          case 924:
                                          case 925:
                                          case 926:
                                          case 927:
                                          case 928:
                                          case 929:
                                          case 936:
                                          case 941:
                                          case 945:
                                          case 946:
                                          case 947:
                                          case 949:
                                          case 950:
                                          case 952:
                                          case 954:
                                          case 955:
                                          case 956:
                                          case 957:
                                          case 958:
                                          case 959:
                                          case 960:
                                          case 963:
                                          case 964:
                                          case 965:
                                          case 966:
                                          case 968:
                                          case 969:
                                          case 970:
                                            goto LABEL_2110;
                                          case 918:
                                            if ((_DWORD)v14 != 16) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: turboRaidMaxCyclesBetweenRel(918): (#16) cfg ele ments != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            if ((sub_100022DD0( a1,  "turboRaidMaxCyclesBetweenRel_",  (uint64_t)v8,  8u,  v20) & 1) != 0) {
                                              goto LABEL_14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: turboRaidMaxCyclesBetweenRel(918): Cannot add "
                                                  "16 elements to context";
                                            goto LABEL_2247;
                                          case 919:
                                            if ((_DWORD)v14 != 16) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: turboRaidMinCyclesBetweenRel(919): (#16) cfg ele ments != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            if ((sub_100022DD0( a1,  "turboRaidMinCyclesBetweenRel_",  (uint64_t)v8,  8u,  v20) & 1) != 0) {
                                              goto LABEL_14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: turboRaidMinCyclesBetweenRel(919): Cannot add "
                                                  "16 elements to context";
                                            goto LABEL_2247;
                                          case 920:
                                            if ((_DWORD)v14 != 16) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: turboRaidAuxPerBlock(920): (#16) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: turboRaidAuxPerBlock(920): Cannot add 16 elements to context";
                                            goto LABEL_2247;
                                          case 921:
                                            if ((_DWORD)v14 != 16) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: turboRaidAuxBetweenRefreshesPerBlock(921): (#16) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            if ((sub_100022DD0( a1,  "turboRaidAuxBetweenRefreshesPerBlock_",  (uint64_t)v8,  8u,  v20) & 1) != 0) {
                                              goto LABEL_14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: turboRaidAuxBetweenRefreshesPerBlock(921): Can"
                                                  "not add 16 elements to context";
                                            goto LABEL_2247;
                                          case 922:
                                            uint64_t v19 = "ASPFTLParseBufferToCxt: turboRaidRelLockMark(922) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 923:
                                            uint64_t v19 = "ASPFTLParseBufferToCxt: turboRaidAuxLockMark(923) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 930:
                                            if ((_DWORD)v14 != 16) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: turboRaidMaxCyclesBetweenAux(930): (#16) cfg ele ments != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            if ((sub_100022DD0( a1,  "turboRaidMaxCyclesBetweenAux_",  (uint64_t)v8,  8u,  v20) & 1) != 0) {
                                              goto LABEL_14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: turboRaidMaxCyclesBetweenAux(930): Cannot add "
                                                  "16 elements to context";
                                            goto LABEL_2247;
                                          case 931:
                                            if ((_DWORD)v14 != 16) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: turboRaidMinCyclesBetweenAux(931): (#16) cfg ele ments != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            if ((sub_100022DD0( a1,  "turboRaidMinCyclesBetweenAux_",  (uint64_t)v8,  8u,  v20) & 1) != 0) {
                                              goto LABEL_14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: turboRaidMinCyclesBetweenAux(931): Cannot add "
                                                  "16 elements to context";
                                            goto LABEL_2247;
                                          case 932:
                                            if ((_DWORD)v14 != 16) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: turboRaidLastRelPECycles(932): (#16) cfg element s != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: turboRaidLastRelPECycles(932): Cannot add 16 e"
                                                  "lements to context";
                                            goto LABEL_2247;
                                          case 933:
                                            if ((_DWORD)v14 != 16) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: turboRaidRelQualPECycles(933): (#16) cfg element s != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: turboRaidRelQualPECycles(933): Cannot add 16 e"
                                                  "lements to context";
                                            goto LABEL_2247;
                                          case 934:
                                            if ((_DWORD)v14 != 16) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: turboRaidLastAuxPECycles(934): (#16) cfg element s != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: turboRaidLastAuxPECycles(934): Cannot add 16 e"
                                                  "lements to context";
                                            goto LABEL_2247;
                                          case 935:
                                            if ((_DWORD)v14 != 16) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: turboRaidAuxQualPECycles(935): (#16) cfg element s != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: turboRaidAuxQualPECycles(935): Cannot add 16 e"
                                                  "lements to context";
                                            goto LABEL_2247;
                                          case 937:
                                            uint64_t v19 = "ASPFTLParseBufferToCxt: turboRaidPEFailAfterRel(937) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 938:
                                            uint64_t v19 = "ASPFTLParseBufferToCxt: turboRaidPEFailAfterAux(938) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 939:
                                            uint64_t v19 = "ASPFTLParseBufferToCxt: dvfmVotesCPU(939) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 940:
                                            uint64_t v19 = "ASPFTLParseBufferToCxt: dvfmVotesBandwidth(940) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 942:
                                            uint64_t v19 = "ASPFTLParseBufferToCxt: maxSLCEndurance(942) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 943:
                                            uint64_t v19 = "ASPFTLParseBufferToCxt: maxMixedEndurance(943) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 944:
                                            uint64_t v19 = "ASPFTLParseBufferToCxt: maxNativeEndurance(944) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 948:
                                            if ((_DWORD)v14 != 40) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: assertHistory(948): (#40) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: assertHistory(948): Cannot add 40 elements to context";
                                            goto LABEL_2247;
                                          case 951:
                                            uint64_t v19 = "ASPFTLParseBufferToCxt: asp3Support(951) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 953:
                                            uint64_t v19 = "ASPFTLParseBufferToCxt: numCrossTempRaidUecc(953) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 961:
                                            uint64_t v19 = "ASPFTLParseBufferToCxt: osBuildStr(961) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 962:
                                            uint64_t v19 = "ASPFTLParseBufferToCxt: raidConfig(962) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 967:
                                            if ((_DWORD)v14 != 12) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: indTrimFrags(967): (#12) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: indTrimFrags(967): Cannot add 12 elements to context";
                                            goto LABEL_2247;
                                          case 971:
                                            if ((_DWORD)v14 != 12) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: indUsedFrags(971): (#12) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: indUsedFrags(971): Cannot add 12 elements to context";
                                            goto LABEL_2247;
                                          default:
                                            switch(v12)
                                            {
                                              case 996:
                                                uint64_t v19 = "ASPFTLParseBufferToCxt: clogFindFail(996) cannot add 1 element to context";
                                                goto LABEL_15;
                                              case 997:
                                                uint64_t v19 = "ASPFTLParseBufferToCxt: clogFindBlank(997) cannot add 1 element to context";
                                                goto LABEL_15;
                                              case 998:
                                                uint64_t v19 = "ASPFTLParseBufferToCxt: clogFindUnc(998) cannot add 1 element to context";
                                                goto LABEL_15;
                                              case 999:
                                                uint64_t v19 = "ASPFTLParseBufferToCxt: clogFindUnexpected(999) cannot add 1 element to context";
                                                goto LABEL_15;
                                              case 1001:
                                                if ((_DWORD)v14 != 8) {
                                                  sub_1000130E0( "ASPFTLParseBufferToCxt: clogReplayFailReason(1001): (#8) cfg element s != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                                }
                                                else {
                                                  unsigned int v20 = v14;
                                                }
                                                int v22 = "ASPFTLParseBufferToCxt: clogReplayFailReason(1001): Cannot add 8 e"
                                                      "lements to context";
                                                goto LABEL_2247;
                                              case 1002:
                                                uint64_t v19 = "ASPFTLParseBufferToCxt: clogReplayTransientError(1002) cannot add "
                                                      "1 element to context";
                                                goto LABEL_15;
                                              case 1003:
                                                uint64_t v19 = "ASPFTLParseBufferToCxt: clogReplaySpfError(1003) cannot add 1 element to context";
                                                goto LABEL_15;
                                              case 1015:
                                                if ((_DWORD)v14 != 4) {
                                                  sub_1000130E0( "ASPFTLParseBufferToCxt: eanEarlyBootUeccPage(1015): (#4) cfg element s != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                                }
                                                else {
                                                  unsigned int v20 = v14;
                                                }
                                                int v22 = "ASPFTLParseBufferToCxt: eanEarlyBootUeccPage(1015): Cannot add 4 e"
                                                      "lements to context";
                                                goto LABEL_2247;
                                              case 1016:
                                                uint64_t v19 = "ASPFTLParseBufferToCxt: eanEarlyBootNumUeccPages(1016) cannot add "
                                                      "1 element to context";
                                                goto LABEL_15;
                                              case 1017:
                                                if ((sub_100022DD0( a1,  "eanEarlyBootUeccMultiplane",  (uint64_t)v8,  8u,  1u) & 1) != 0) {
                                                  goto LABEL_16;
                                                }
                                                uint64_t v19 = "ASPFTLParseBufferToCxt: eanEarlyBootUeccMultiplane(1017) cannot ad"
                                                      "d 1 element to context";
                                                goto LABEL_15;
                                              default:
                                                goto LABEL_2110;
                                            }
                                        }
                                      }

                                      if (v12 > 1137)
                                      {
                                        switch(v12)
                                        {
                                          case 1147:
                                            if ((_DWORD)v14 != 24) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: gc_concurrent_dw_gc12(1147): (#24) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: gc_concurrent_dw_gc12(1147): Cannot add 24 ele"
                                                  "ments to context";
                                            goto LABEL_2247;
                                          case 1148:
                                            if ((_DWORD)v14 != 24) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: gc_concurrent_dw_gc1(1148): (#24) cfg elements ! = (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: gc_concurrent_dw_gc1(1148): Cannot add 24 elements to context";
                                            goto LABEL_2247;
                                          case 1149:
                                            if ((_DWORD)v14 != 24) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: gc_concurrent_dw_gc2(1149): (#24) cfg elements ! = (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: gc_concurrent_dw_gc2(1149): Cannot add 24 elements to context";
                                            goto LABEL_2247;
                                          case 1150:
                                          case 1151:
                                          case 1152:
                                          case 1153:
                                          case 1154:
                                          case 1155:
                                          case 1156:
                                          case 1159:
                                          case 1160:
                                          case 1161:
                                          case 1162:
                                          case 1163:
                                          case 1164:
                                          case 1165:
                                          case 1166:
                                          case 1167:
                                          case 1170:
                                          case 1173:
                                          case 1174:
                                          case 1175:
                                          case 1176:
                                          case 1177:
                                          case 1178:
                                            goto LABEL_2110;
                                          case 1157:
                                            uint64_t v19 = "ASPFTLParseBufferToCxt: eanMaxForceROTimeMs(1157) cannot add 1 element to context";
                                            break;
                                          case 1158:
                                            uint64_t v19 = "ASPFTLParseBufferToCxt: eanMaxForceRORecoTimeMs(1158) cannot add 1 element to context";
                                            break;
                                          case 1168:
                                            if ((_DWORD)v14 != 2) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: poDetectPERemovalTotalCost(1168): (#2) cfg eleme nts != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: poDetectPERemovalTotalCost(1168): Cannot add 2"
                                                  " elements to context";
                                            goto LABEL_2247;
                                          case 1169:
                                            if ((_DWORD)v14 != 2) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: poDetectEmptySpotRemovalTotalCost(1169): (#2) cf g elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            if ((sub_100022DD0( a1,  "poDetectEmptySpotRemovalTotalCost_",  (uint64_t)v8,  8u,  v20) & 1) != 0) {
                                              goto LABEL_14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: poDetectEmptySpotRemovalTotalCost(1169): Canno"
                                                  "t add 2 elements to context";
                                            goto LABEL_2247;
                                          case 1171:
                                            if ((_DWORD)v14 != 10) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: poDetectEmptySpotRemovalAge(1171): (#10) cfg ele ments != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            if ((sub_100022DD0( a1,  "poDetectEmptySpotRemovalAge_",  (uint64_t)v8,  8u,  v20) & 1) != 0) {
                                              goto LABEL_14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: poDetectEmptySpotRemovalAge(1171): Cannot add "
                                                  "10 elements to context";
                                            goto LABEL_2247;
                                          case 1172:
                                            if ((_DWORD)v14 != 3) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: poDetectGBBedMostSevereCost(1172): (#3) cfg elem ents != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            if ((sub_100022DD0( a1,  "poDetectGBBedMostSevereCost_",  (uint64_t)v8,  8u,  v20) & 1) != 0) {
                                              goto LABEL_14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: poDetectGBBedMostSevereCost(1172): Cannot add "
                                                  "3 elements to context";
                                            goto LABEL_2247;
                                          case 1179:
                                            if ((_DWORD)v14 != 4) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: gc_cur_dw_gc1(1179): (#4) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: gc_cur_dw_gc1(1179): Cannot add 4 elements to context";
                                            goto LABEL_2247;
                                          case 1180:
                                            if ((_DWORD)v14 != 4) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: gc_cur_dw_gc2(1180): (#4) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: gc_cur_dw_gc2(1180): Cannot add 4 elements to context";
                                            goto LABEL_2247;
                                          case 1181:
                                            if ((_DWORD)v14 != 4) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: gc_cur_dw_gc3(1181): (#4) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: gc_cur_dw_gc3(1181): Cannot add 4 elements to context";
                                            goto LABEL_2247;
                                          case 1182:
                                            if ((_DWORD)v14 != 4) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: gc_tot_dw_gc1(1182): (#4) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: gc_tot_dw_gc1(1182): Cannot add 4 elements to context";
                                            goto LABEL_2247;
                                          case 1183:
                                            if ((_DWORD)v14 != 4) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: gc_tot_dw_gc2(1183): (#4) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: gc_tot_dw_gc2(1183): Cannot add 4 elements to context";
                                            goto LABEL_2247;
                                          case 1184:
                                            uint64_t v19 = "ASPFTLParseBufferToCxt: unhappy_state(1184) cannot add 1 element to context";
                                            break;
                                          case 1185:
                                            uint64_t v19 = "ASPFTLParseBufferToCxt: unhappy_level(1185) cannot add 1 element to context";
                                            break;
                                          default:
                                            if (v12 != 1138)
                                            {
                                              if (v12 != 1189) {
                                                goto LABEL_2110;
                                              }
                                              if ((sub_100022DD0(a1, "lastLbaFormatTime", (uint64_t)v8, 8u, 1u) & 1) == 0)
                                              {
                                                uint64_t v19 = "ASPFTLParseBufferToCxt: lastLbaFormatTime(1189) cannot add 1 element to context";
                                                break;
                                              }

                                              goto LABEL_16;
                                            }

                                            uint64_t v19 = "ASPFTLParseBufferToCxt: numOfToHappySwitches(1138) cannot add 1 element to context";
                                            break;
                                        }

LABEL_16:
                                          uint64_t v10 = (v10 + 1);
                                          goto LABEL_17;
                                        }

                                        goto LABEL_2110;
                                      }

                                      if (v12 > 1115)
                                      {
                                        if (v12 == 1116)
                                        {
                                          if ((_DWORD)v14 != 32) {
                                            sub_1000130E0( "ASPFTLParseBufferToCxt: gcwamp(1116): (#32) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                          }
                                          else {
                                            unsigned int v20 = v14;
                                          }
                                          if ((sub_100022DD0(a1, "gcwamp_", (uint64_t)v8, 8u, v20) & 1) == 0)
                                          {
                                            int v22 = "ASPFTLParseBufferToCxt: gcwamp(1116): Cannot add 32 elements to context";
                                            goto LABEL_2247;
                                          }

                                          goto LABEL_14;
                                        }

                                        if (v12 == 1137)
                                        {
                                          uint64_t v19 = "ASPFTLParseBufferToCxt: numOfToUnhappySwitches(1137) cannot add 1 element to context";
                                          goto LABEL_15;
                                        }

LABEL_2110:
                                        switch(v12)
                                        {
                                          case 1196:
                                            if ((_DWORD)v14 != 5) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: poDetectGBBedTotalCost(1196): (#5) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: poDetectGBBedTotalCost(1196): Cannot add 5 ele"
                                                  "ments to context";
                                            goto LABEL_2247;
                                          case 1197:
                                            if ((_DWORD)v14 != 10) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: poDetectGBBedAge(1197): (#10) cfg elements != (% d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: poDetectGBBedAge(1197): Cannot add 10 elements to context";
                                            goto LABEL_2247;
                                          case 1198:
                                            if ((_DWORD)v14 != 3) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: poDetectPERemovalMostSevereCost(1198): (#3) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            if ((sub_100022DD0( a1,  "poDetectPERemovalMostSevereCost_",  (uint64_t)v8,  8u,  v20) & 1) != 0) {
                                              goto LABEL_14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: poDetectPERemovalMostSevereCost(1198): Cannot "
                                                  "add 3 elements to context";
                                            goto LABEL_2247;
                                          case 1199:
                                            uint64_t v19 = "ASPFTLParseBufferToCxt: poDetectCurrentSize(1199) cannot add 1 element to context";
                                            goto LABEL_15;
                                          case 1200:
                                          case 1203:
                                          case 1204:
                                          case 1205:
                                          case 1206:
                                          case 1207:
                                          case 1208:
                                          case 1209:
                                          case 1210:
                                          case 1212:
                                          case 1213:
                                          case 1214:
                                          case 1219:
                                          case 1220:
                                          case 1221:
                                          case 1222:
                                          case 1223:
LABEL_2242:
                                            else {
                                              snprintf(__str, 0x20uLL, "Stat_%d_");
                                            }
                                            if ((sub_100022DD0(a1, __str, (uint64_t)v8, 8u, v14) & 1) == 0)
                                            {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt %d: Cannot add %d elements to context",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v12);
                                              return v10;
                                            }

                                            uint64_t v10 = (v10 + v14);
                                            break;
                                          case 1201:
                                            if ((_DWORD)v14 != 4) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: gcVerticalSuccssfulAlignments(1201): (#4) cfg el ements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            if ((sub_100022DD0( a1,  "gcVerticalSuccssfulAlignments_",  (uint64_t)v8,  8u,  v20) & 1) != 0) {
                                              goto LABEL_14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: gcVerticalSuccssfulAlignments(1201): Cannot ad"
                                                  "d 4 elements to context";
                                            goto LABEL_2247;
                                          case 1202:
                                            if ((_DWORD)v14 != 4) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: gcVerticalNoAlignmentDueToMissingSegs(1202): (#4) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            if ((sub_100022DD0( a1,  "gcVerticalNoAlignmentDueToMissingSegs_",  (uint64_t)v8,  8u,  v20) & 1) != 0) {
                                              goto LABEL_14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: gcVerticalNoAlignmentDueToMissingSegs(1202): C"
                                                  "annot add 4 elements to context";
                                            goto LABEL_2247;
                                          case 1211:
                                            if ((_DWORD)v14 != 24) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: forcedAllocationSmallEraseQ(1211): (#24) cfg ele ments != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            if ((sub_100022DD0( a1,  "forcedAllocationSmallEraseQ_",  (uint64_t)v8,  8u,  v20) & 1) != 0) {
                                              goto LABEL_14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: forcedAllocationSmallEraseQ(1211): Cannot add "
                                                  "24 elements to context";
                                            goto LABEL_2247;
                                          case 1215:
                                            if ((_DWORD)v14 != 5) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: hostWritesPerThrottleZone(1215): (#5) cfg elemen ts != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: hostWritesPerThrottleZone(1215): Cannot add 5 "
                                                  "elements to context";
                                            goto LABEL_2247;
                                          case 1216:
                                            if ((_DWORD)v14 != 24) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: tlcWLPerDipAvgPEC(1216): (#24) cfg elements !=(%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: tlcWLPerDipAvgPEC(1216): Cannot add 24 elements to context";
                                            goto LABEL_2247;
                                          case 1217:
                                            if ((_DWORD)v14 != 24) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: tlcWLPerDipMaxPEC(1217): (#24) cfg elements !=(%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: tlcWLPerDipMaxPEC(1217): Cannot add 24 elements to context";
                                            goto LABEL_2247;
                                          case 1218:
                                            if ((_DWORD)v14 != 24) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: tlcWLPerDipMinPEC(1218): (#24) cfg elements !=(%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: tlcWLPerDipMinPEC(1218): Cannot add 24 elements to context";
                                            goto LABEL_2247;
                                          case 1224:
                                            if ((_DWORD)v14 != 20) {
                                              sub_1000130E0( "ASPFTLParseBufferToCxt: apfsValidLbaOvershoot(1224): (#20) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                            }
                                            else {
                                              unsigned int v20 = v14;
                                            }
                                            int v22 = "ASPFTLParseBufferToCxt: apfsValidLbaOvershoot(1224): Cannot add 20 ele"
                                                  "ments to context";
                                            goto LABEL_2247;
                                          default:
                                            switch(v12)
                                            {
                                              case 1232:
                                                uint64_t v19 = "ASPFTLParseBufferToCxt: eanFastSize(1232) cannot add 1 element to context";
                                                goto LABEL_15;
                                              case 1233:
                                                uint64_t v19 = "ASPFTLParseBufferToCxt: eanNumSlcEvictions(1233) cannot add 1 element to context";
                                                goto LABEL_15;
                                              case 1234:
                                                uint64_t v19 = "ASPFTLParseBufferToCxt: eanNumForcedCompress(1234) cannot add 1 el"
                                                      "ement to context";
                                                goto LABEL_15;
                                              case 1235:
                                              case 1236:
                                              case 1237:
                                              case 1238:
                                              case 1239:
                                              case 1240:
                                              case 1242:
                                              case 1243:
                                              case 1245:
                                                goto LABEL_2242;
                                              case 1241:
                                                if ((_DWORD)v14 != 10) {
                                                  sub_1000130E0( "ASPFTLParseBufferToCxt: s2rTimeHisto(1241): (#10) cfg elements != (% d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                                }
                                                else {
                                                  unsigned int v20 = v14;
                                                }
                                                int v22 = "ASPFTLParseBufferToCxt: s2rTimeHisto(1241): Cannot add 10 elements to context";
                                                goto LABEL_2247;
                                              case 1244:
                                                uint64_t v19 = "ASPFTLParseBufferToCxt: calendarTimeWentBackward(1244) cannot add "
                                                      "1 element to context";
                                                goto LABEL_15;
                                              case 1246:
                                                if ((_DWORD)v14 != 8) {
                                                  sub_1000130E0( "ASPFTLParseBufferToCxt: bandsUeccCrossTempHisto(1246): (#8) cfg elem ents != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                                }
                                                else {
                                                  unsigned int v20 = v14;
                                                }
                                                if ((sub_100022DD0( a1,  "bandsUeccCrossTempHisto_",  (uint64_t)v8,  8u,  v20) & 1) != 0) {
                                                  goto LABEL_14;
                                                }
                                                int v22 = "ASPFTLParseBufferToCxt: bandsUeccCrossTempHisto(1246): Cannot add "
                                                      "8 elements to context";
                                                goto LABEL_2247;
                                              default:
                                                if (v12 != 1190) {
                                                  goto LABEL_2242;
                                                }
                                                if ((_DWORD)v14 != 12) {
                                                  sub_1000130E0( "ASPFTLParseBufferToCxt: powerDownTime(1190): (#12) cfg elements !=(%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                                }
                                                else {
                                                  unsigned int v20 = v14;
                                                }
                                                int v22 = "ASPFTLParseBufferToCxt: powerDownTime(1190): Cannot add 12 elements to context";
                                                break;
                                            }

                                            goto LABEL_2247;
                                        }

LABEL_17:
                                        v8 += v14;
                                        v11 -= v14;
                                        goto LABEL_2;
                                      }

                                      if (v12 == 1105)
                                      {
                                        if ((_DWORD)v14 != 14) {
                                          sub_1000130E0( "ASPFTLParseBufferToCxt: hostReadSequential(1105): (#14) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                        }
                                        else {
                                          unsigned int v20 = v14;
                                        }
                                        if ((sub_100022DD0(a1, "hostReadSequential_", (uint64_t)v8, 8u, v20) & 1) == 0)
                                        {
                                          int v22 = "ASPFTLParseBufferToCxt: hostReadSequential(1105): Cannot add 14 elements to context";
                                          goto LABEL_2247;
                                        }

                                        goto LABEL_14;
                                      }

                                      if (v12 != 1106) {
                                        goto LABEL_2110;
                                      }
                                      if ((_DWORD)v14 != 14) {
                                        sub_1000130E0( "ASPFTLParseBufferToCxt: GCReadSequential(1106): (#14) cfg elements != (%d) buffer elements",  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v14);
                                      }
                                      else {
                                        unsigned int v20 = v14;
                                      }
                                      if ((sub_100022DD0(a1, "GCReadSequential_", (uint64_t)v8, 8u, v20) & 1) != 0)
                                      {
LABEL_14:
                                        uint64_t v10 = v20 + v10;
                                        goto LABEL_17;
                                      }

                                      int v22 = "ASPFTLParseBufferToCxt: GCReadSequential(1106): Cannot add 14 elements to context";
LABEL_2247:
                                      sub_1000130E0(v22, a2, a3, a4, a5, a6, a7, a8, v23);
                                      return v10;
                                  }
                              }
                          }
                      }
                  }
              }
          }
      }
  }

uint64_t sub_100022DD0(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t v14 = 0LL;
  uint64_t v5 = 1LL;
  if (a4 && a5)
  {
    if (a5 == 1)
    {
      if (a4 <= 8)
      {
        __memmove_chk(&v14, a3, a4, 8LL);
        return sub_100029864(a1, "", a2, v14);
      }

      else
      {
        return 0LL;
      }
    }

    else
    {
      int v11 = 0;
      int v12 = 0;
      do
      {
        uint64_t v14 = 0LL;
        if (a4 <= 8)
        {
          __memmove_chk(&v14, a3 + v11 * a4, a4, 8LL);
          snprintf(__str, 0x64uLL, "%d", v11);
          __str[100] = 0;
          uint64_t v5 = sub_100029864(a1, a2, __str, v14) & v5;
        }

        else
        {
          uint64_t v5 = 0LL;
        }

        int v11 = (unsigned __int16)++v12;
      }

      while ((unsigned __int16)v12 < a5);
    }
  }

  return v5;
}

uint64_t sub_100022F30(uint64_t a1, unint64_t *a2, unsigned int a3)
{
  uint64_t v5 = 0LL;
  unsigned int v6 = a3 >> 3;
  *(_OWORD *)__str = 0u;
  __int128 v22 = 0u;
LABEL_2:
  int v7 = -v6;
  while (v7)
  {
    unint64_t v9 = *a2++;
    unsigned int v8 = v9;
    unint64_t v10 = HIDWORD(v9);
    ++v7;
    if (HIDWORD(v9))
    {
      if (v8 != 0xFFFF && v8 <= 0x30000000 && -v7 >= v10)
      {
        else {
          snprintf(__str, 0x20uLL, "Stat_%d_");
        }
        if ((sub_100022DD0(a1, __str, (uint64_t)a2, 8u, v10) & 1) != 0)
        {
          uint64_t v5 = (v5 + v10);
          a2 += v10;
          unsigned int v6 = -v7 - v10;
          goto LABEL_2;
        }

        sub_1000130E0( "ASPFTLParseBufferToCxt %d: Cannot add %d elements to context",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v8);
      }

      return v5;
    }
  }

  return v5;
}

uint64_t sub_100023058( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 0LL;
  unint64_t v9 = "ASPMSPParseBufferToCxt: Passed in invalid buffer or empty buffer";
  if (!a2) {
    goto LABEL_1981;
  }
  unsigned int v10 = a3;
  if (!(_DWORD)a3) {
    goto LABEL_1981;
  }
  uint64_t v11 = a2;
  uint64_t v8 = 0LL;
  uint64_t v13 = &jpt_1000271AC;
  uint64_t v14 = "ASPMSPParseBufferToCxt: fs1_4b_fail(4279): Error adding 4 elements to context";
  unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_5(4256): Error adding 10 elements to context";
  while (1)
  {
    do
    {
      if (!v10) {
        return v8;
      }
      uint64_t v15 = (unsigned __int16 *)v11;
      uint64_t v16 = *(unsigned __int16 *)(v11 + 2);
      v11 += 4LL;
      v10 -= 4;
    }

    while (!(_DWORD)v16);
    int v17 = *v15;
    if (v17 != 12286) {
      break;
    }
LABEL_461:
    v11 += v16;
    v10 -= v16;
  }

  switch(v17)
  {
    case 4096:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: passWithTmodeHard(4096): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeHard(4096): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4097:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: passWithTmodeFS1_2b(4097): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeFS1_2b(4097): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4098:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: passWithTmodeFS1_4b(4098): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeFS1_4b(4098): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4099:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: passWithTmodeHard_fast(4099): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeHard_fast(4099): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4100:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: passWithTmodeFS1_2b_fast(4100): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeFS1_2b_fast(4100): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4101:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: passWithTmodeFS1_4b_fast(4101): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeFS1_4b_fast(4101): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4102:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: numOfCwFailedInTmodeFS2_EOL(4102): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: numOfCwFailedInTmodeFS2_EOL(4102): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4103:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: numOfCwFailedInTmodeFS2_DSP_EOL(4103): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: numOfCwFailedInTmodeFS2_DSP_EOL(4103): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4104:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterAcq(4104): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterAcq(4104): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4105:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: firstReadWasHardWithDefaultBDBFastRead(4105): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: firstReadWasHardWithDefaultBDBFastRead(4105): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4106:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readalgoPassWithDS1(4106): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDS1(4106): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4107:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readalgoPassWithDYCE1(4107): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDYCE1(4107): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4108:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readalgoPassWithDS2(4108): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDS2(4108): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4109:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readalgoPassWithDYCE2(4109): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDYCE2(4109): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4110:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: firstReadWasHardWithAcq(4110): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: firstReadWasHardWithAcq(4110): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4111:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_LSB(4111): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_LSB(4111): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4112:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_MSB(4112): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_MSB(4112): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4113:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_USB(4113): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_USB(4113): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4114:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_LSB(4114): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_LSB(4114): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4115:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_MSB(4115): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_MSB(4115): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4116:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_USB(4116): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_USB(4116): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4117:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: firstReadWasHardWithDefaultBDB(4117): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: firstReadWasHardWithDefaultBDB(4117): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4118:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassedThroughSyndSumAcquisition(4118): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughSyndSumAcquisition(4118): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4119:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassedThroughSlip(4119): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughSlip(4119): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4120:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 44) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: FS2decodedBitFlips(4120): cfg 11 elements; (11*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: FS2decodedBitFlips(4120): Error adding 11 elements to context";
      goto LABEL_1981;
    case 4121:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 16) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: slipTrackingAfterFs1ForceFailChangedVthInTicksHist(4121): cfg 4 elements; (4*4) cfg by"
      }
          "tes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: slipTrackingAfterFs1ForceFailChangedVthInTicksHist(4121): Error adding 4 elements to context";
      goto LABEL_1981;
    case 4122:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassWithFS2_4b_fast(4122): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS2_4b_fast(4122): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4123:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterSlip_fast(4123): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterSlip_fast(4123): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4124:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterSlip_fast(4124): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterSlip_fast(4124): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4125:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterSlip_fast(4125): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterSlip_fast(4125): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4126:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassWithFS3_fast(4126): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS3_fast(4126): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4127:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 40) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: deepSoft1Decoded(4127): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: deepSoft1Decoded(4127): Error adding 10 elements to context";
      goto LABEL_1981;
    case 4128:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 40) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: deepSoft2Decoded(4128): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: deepSoft2Decoded(4128): Error adding 10 elements to context";
      goto LABEL_1981;
    case 4129:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_2b_fast(4129): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_2b_fast(4129): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4130:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_4b_fast(4130): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_4b_fast(4130): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4131:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassedThroughSlip_fast(4131): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughSlip_fast(4131): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4132:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS3_fast(4132): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS3_fast(4132): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4133:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readalgoPassWithEXH(4133): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithEXH(4133): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4134:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 44) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: FS1decodedbitflips(4134): cfg 11 elements; (11*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: FS1decodedbitflips(4134): Error adding 11 elements to context";
      goto LABEL_1981;
    case 4135:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readZeroPage(4135): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readZeroPage(4135): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4136:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readErasedPage(4136): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readErasedPage(4136): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4137:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readFail(4137): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readFail(4137): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4138:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 20) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: numOfSensesWereSentDuringSyndSumAcq(4138): cfg 5 elements; (5*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: numOfSensesWereSentDuringSyndSumAcq(4138): Error adding 5 elements to context";
      goto LABEL_1981;
    case 4139:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 12) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: numOfSensesWereSentDuringMiniAcq(4139): cfg 3 elements; (3*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: numOfSensesWereSentDuringMiniAcq(4139): Error adding 3 elements to context";
      goto LABEL_1981;
    case 4140:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: bdbDefaultMoveFastToNormal(4140): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDefaultMoveFastToNormal(4140): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4141:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: bdbDefaultMoveNormalToFast(4141): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDefaultMoveNormalToFast(4141): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4142:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readalgoPassWithEXH_DSP(4142): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithEXH_DSP(4142): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4143:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readalgoPassWithDS1_DSP(4143): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDS1_DSP(4143): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4144:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readalgoPassWithDYCE1_DSP(4144): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDYCE1_DSP(4144): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4145:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: firstReadWasFS2EOL_DSP(4145): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: firstReadWasFS2EOL_DSP(4145): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4146:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: firstReadWasFS2EOL(4146): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: firstReadWasFS2EOL(4146): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4147:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_4b(4147): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_4b(4147): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4148:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassWithFS2_4b(4148): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS2_4b(4148): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4149:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_2b(4149): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_2b(4149): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4150:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS3(4150): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS3(4150): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4151:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassedThroughDS1(4151): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughDS1(4151): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4152:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassedThroughDS2(4152): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughDS2(4152): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4153:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterSlip(4153): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterSlip(4153): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4154:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterSlip(4154): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterSlip(4154): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4155:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterSlip(4155): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterSlip(4155): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4156:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassWithFS3(4156): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS3(4156): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4157:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassedThroughSyndSumAcquisition_DSP(4157): cfg 1 elements; (1*4) cfg bytes != "
      }
          "(%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughSyndSumAcquisition_DSP(4157): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4158:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterAcq(4158): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterAcq(4158): Error adding 1 elements to context";
      goto LABEL_1981;
    case 4159:
      uint64_t v19 = v14;
      unsigned int v20 = v13;
      if ((_DWORD)v16 != 4) {
        sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterAcq(4159): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v16);
      else {
        unsigned int v21 = v16 >> 2;
      }
      if (sub_100022DD0(a1, "readAlgoPassWithFS14BitAfterAcq", v11, 4u, v21))
      {
LABEL_460:
        uint64_t v8 = v8 + v21;
        uint64_t v13 = v20;
        uint64_t v14 = v19;
        goto LABEL_461;
      }

      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterAcq(4159): Error adding 1 elements to context";
LABEL_1981:
      sub_1000130E0(v9, a2, a3, a4, a5, a6, a7, a8, v24);
      return v8;
    default:
      switch(v17)
      {
        case 4160:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: readAlgoPassedThroughDS1_DSP(4160): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughDS1_DSP(4160): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4161:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: numOfSlipTracking(4161): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: numOfSlipTracking(4161): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4162:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_QSB(4162): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_QSB(4162): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4163:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_QSB(4163): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_QSB(4163): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4196:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: readStageNumOfFails100(4196): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails100(4196): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4197:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: readStageNumOfFails101(4197): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails101(4197): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4198:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: readStage100(4198): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage100(4198): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4199:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: readStage101(4199): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage101(4199): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4200:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: initialReadStage100(4200): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage100(4200): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4201:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: readStage102(4201): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage102(4201): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4202:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: initialReadStage101(4202): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage101(4202): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4203:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: nandStageOfLife100(4203): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: nandStageOfLife100(4203): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4204:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: nandStageOfLife101(4204): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: nandStageOfLife101(4204): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4205:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: readStageNumOfFails102(4205): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails102(4205): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4206:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: initialReadStage102(4206): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage102(4206): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4207:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: readStage103(4207): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage103(4207): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4208:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: readStage104(4208): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage104(4208): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4209:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: readStage105(4209): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage105(4209): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4210:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: readStage106(4210): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage106(4210): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4211:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter100(4211): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter100(4211): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4212:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter101(4212): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter101(4212): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4213:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: initialReadStage103(4213): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage103(4213): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4214:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: initialReadStage104(4214): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage104(4214): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4215:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: readStage107(4215): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage107(4215): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4216:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: readStage108(4216): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage108(4216): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4217:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: nandStageOfLife102(4217): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: nandStageOfLife102(4217): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4218:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: nandStageOfLife103(4218): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: nandStageOfLife103(4218): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4219:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: nandStageOfLife104(4219): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: nandStageOfLife104(4219): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4220:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter102(4220): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter102(4220): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4221:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter103(4221): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter103(4221): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4222:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter104(4222): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter104(4222): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4223:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter105(4223): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter105(4223): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4224:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter106(4224): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter106(4224): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4225:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter107(4225): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter107(4225): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4226:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter108(4226): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter108(4226): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4227:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter109(4227): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter109(4227): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4228:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter110(4228): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter110(4228): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4229:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter111(4229): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter111(4229): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4230:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter112(4230): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter112(4230): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4231:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter113(4231): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter113(4231): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4232:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 256) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: readStageNumOfFails108(4232): cfg 64 elements; (64*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails108(4232): Error adding 64 elements to context";
          goto LABEL_1981;
        case 4233:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 256) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: readStageNumOfFails103(4233): cfg 64 elements; (64*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails103(4233): Error adding 64 elements to context";
          goto LABEL_1981;
        case 4234:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: readStageNumOfFails104(4234): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails104(4234): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4235:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: readStageNumOfFails105(4235): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails105(4235): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4236:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: readStageNumOfFails106(4236): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails106(4236): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4237:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: readStageNumOfFails107(4237): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails107(4237): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4238:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: readStage109(4238): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage109(4238): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4239:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 16) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: readStage110(4239): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage110(4239): Error adding 4 elements to context";
          goto LABEL_1981;
        case 4240:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 80) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: readStageNumOfErrorsBin100(4240): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfErrorsBin100(4240): Error adding 20 elements to context";
          goto LABEL_1981;
        case 4241:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 80) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter114(4241): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter114(4241): Error adding 20 elements to context";
          goto LABEL_1981;
        case 4242:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter115(4242): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter115(4242): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4243:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter116(4243): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter116(4243): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4244:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter117(4244): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter117(4244): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4245:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter118(4245): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter118(4245): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4246:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter119(4246): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter119(4246): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4247:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter120(4247): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter120(4247): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4248:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter121(4248): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter121(4248): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4249:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: cbdr_ref_1(4249): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_ref_1(4249): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4250:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: cbdr_ref_2(4250): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_ref_2(4250): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4251:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 4) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: cbdr_outlier(4251): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_outlier(4251): Error adding 1 elements to context";
          goto LABEL_1981;
        case 4252:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 40) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: cbdr_step_1(4252): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_1(4252): Error adding 10 elements to context";
          goto LABEL_1981;
        case 4253:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 40) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: cbdr_step_2(4253): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_2(4253): Error adding 10 elements to context";
          goto LABEL_1981;
        case 4254:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 40) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: cbdr_step_3(4254): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_3(4254): Error adding 10 elements to context";
          goto LABEL_1981;
        case 4255:
          uint64_t v19 = v14;
          unsigned int v20 = v13;
          if ((_DWORD)v16 != 40) {
            sub_1000130E0( "ASPMSPParseBufferToCxt: cbdr_step_4(4255): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v16);
          else {
            unsigned int v21 = v16 >> 2;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_4(4255): Error adding 10 elements to context";
          goto LABEL_1981;
        default:
          switch(v17)
          {
            case 12288:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: readStageNumOfFails200(12288): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails200(12288): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12289:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: initialReadStage200(12289): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage200(12289): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12290:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: initialReadStage201(12290): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage201(12290): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12291:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: readStageNumOfFails201(12291): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails201(12291): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12292:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: initialReadStage202(12292): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage202(12292): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12293:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: initialReadStage203(12293): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage203(12293): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12294:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: readStageNumOfFails202(12294): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails202(12294): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12295:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: readStageNumOfFails203(12295): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails203(12295): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12296:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: initialReadStage204(12296): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage204(12296): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12297:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: initialReadStage205(12297): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage205(12297): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12298:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: initialReadStage206(12298): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage206(12298): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12299:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: initialReadStage207(12299): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage207(12299): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12300:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: initialReadStage208(12300): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage208(12300): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12301:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: initialReadStage209(12301): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage209(12301): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12302:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: readStage200(12302): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage200(12302): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12303:
              if ((_DWORD)v16 != 32) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: readStage201(12303): cfg 4 elements; (4*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage201(12303): Error adding 4 elements to context";
              goto LABEL_1981;
            case 12304:
              if ((_DWORD)v16 != 32) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: readStage202(12304): cfg 4 elements; (4*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage202(12304): Error adding 4 elements to context";
              goto LABEL_1981;
            case 12305:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: initialReadStage210(12305): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage210(12305): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12306:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: initialReadStage211(12306): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage211(12306): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12307:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: readStage203(12307): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage203(12307): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12308:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: readStage204(12308): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage204(12308): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12309:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: readStage205(12309): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage205(12309): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12310:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: readStage206(12310): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage206(12310): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12311:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: readStage207(12311): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage207(12311): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12312:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: readStage208(12312): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage208(12312): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12313:
              if ((_DWORD)v16 != 32) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: readStage209(12313): cfg 4 elements; (4*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage209(12313): Error adding 4 elements to context";
              goto LABEL_1981;
            case 12314:
              if ((_DWORD)v16 != 32) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: readStage210(12314): cfg 4 elements; (4*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage210(12314): Error adding 4 elements to context";
              goto LABEL_1981;
            case 12315:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: initialReadStage212(12315): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage212(12315): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12316:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: initialReadStage213(12316): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage213(12316): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12317:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: readStage211(12317): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage211(12317): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12318:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: readStage212(12318): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage212(12318): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12319:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: readStage213(12319): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage213(12319): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12320:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: readStage214(12320): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage214(12320): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12321:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: readStage215(12321): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage215(12321): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12322:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter142(12322): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter142(12322): Error adding 1 elements to context";
              goto LABEL_1981;
            case 12323:
              if ((_DWORD)v16 != 8) {
                sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter143(12323): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v16);
              else {
                unsigned int v22 = v16 >> 3;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter143(12323): Error adding 1 elements to context";
              goto LABEL_1981;
            default:
              switch(v17)
              {
                case 4256:
                  if ((_DWORD)v16 != 40) {
                    sub_1000130E0( "ASPMSPParseBufferToCxt: cbdr_step_5(4256): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  else {
                    unsigned int v22 = v16 >> 2;
                  }
                  goto LABEL_1372;
                case 4257:
                  if ((_DWORD)v16 != 40) {
                    sub_1000130E0( "ASPMSPParseBufferToCxt: cbdr_step_6(4257): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  else {
                    unsigned int v22 = v16 >> 2;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_6(4257): Error adding 10 elements to context";
                  goto LABEL_1981;
                case 4258:
                  if ((_DWORD)v16 != 40) {
                    sub_1000130E0( "ASPMSPParseBufferToCxt: cbdr_step_7(4258): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  else {
                    unsigned int v22 = v16 >> 2;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_7(4258): Error adding 10 elements to context";
                  goto LABEL_1981;
                case 4259:
                  if ((_DWORD)v16 != 80) {
                    sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter122(4259): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  else {
                    unsigned int v22 = v16 >> 2;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter122(4259): Error adding 20 elements to context";
                  goto LABEL_1981;
                case 4260:
                  if ((_DWORD)v16 != 32) {
                    sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter123(4260): cfg 8 elements; (8*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  else {
                    unsigned int v22 = v16 >> 2;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter123(4260): Error adding 8 elements to context";
                  goto LABEL_1981;
                case 4261:
                  if ((_DWORD)v16 != 4) {
                    sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter124(4261): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  else {
                    unsigned int v22 = v16 >> 2;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter124(4261): Error adding 1 elements to context";
                  goto LABEL_1981;
                case 4262:
                  if ((_DWORD)v16 != 4) {
                    sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter125(4262): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  else {
                    unsigned int v22 = v16 >> 2;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter125(4262): Error adding 1 elements to context";
                  goto LABEL_1981;
                case 4263:
                  if ((_DWORD)v16 != 4) {
                    sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter126(4263): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  else {
                    unsigned int v22 = v16 >> 2;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter126(4263): Error adding 1 elements to context";
                  goto LABEL_1981;
                case 4264:
                  if ((_DWORD)v16 != 16) {
                    sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter127(4264): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  else {
                    unsigned int v22 = v16 >> 2;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter127(4264): Error adding 4 elements to context";
                  goto LABEL_1981;
                case 4265:
                  if ((_DWORD)v16 != 16) {
                    sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter128(4265): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  else {
                    unsigned int v22 = v16 >> 2;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter128(4265): Error adding 4 elements to context";
                  goto LABEL_1981;
                case 4266:
                  if ((_DWORD)v16 != 16) {
                    sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter129(4266): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  else {
                    unsigned int v22 = v16 >> 2;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter129(4266): Error adding 4 elements to context";
                  goto LABEL_1981;
                case 4267:
                  if ((_DWORD)v16 != 16) {
                    sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter130(4267): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  else {
                    unsigned int v22 = v16 >> 2;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter130(4267): Error adding 4 elements to context";
                  goto LABEL_1981;
                case 4268:
                  if ((_DWORD)v16 != 16) {
                    sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter131(4268): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  else {
                    unsigned int v22 = v16 >> 2;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter131(4268): Error adding 4 elements to context";
                  goto LABEL_1981;
                case 4269:
                  if ((_DWORD)v16 != 40) {
                    sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter132(4269): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  else {
                    unsigned int v22 = v16 >> 2;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter132(4269): Error adding 10 elements to context";
                  goto LABEL_1981;
                case 4270:
                  if ((_DWORD)v16 != 40) {
                    sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter133(4270): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  else {
                    unsigned int v22 = v16 >> 2;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter133(4270): Error adding 10 elements to context";
                  goto LABEL_1981;
                case 4271:
                  if ((_DWORD)v16 != 4) {
                    sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter134(4271): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  else {
                    unsigned int v22 = v16 >> 2;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter134(4271): Error adding 1 elements to context";
                  goto LABEL_1981;
                case 4272:
                  if ((_DWORD)v16 != 4) {
                    sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter135(4272): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  else {
                    unsigned int v22 = v16 >> 2;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter135(4272): Error adding 1 elements to context";
                  goto LABEL_1981;
                case 4273:
                  if ((_DWORD)v16 != 4) {
                    sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter136(4273): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  else {
                    unsigned int v22 = v16 >> 2;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter136(4273): Error adding 1 elements to context";
                  goto LABEL_1981;
                case 4274:
                  if ((_DWORD)v16 != 4) {
                    sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter137(4274): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  else {
                    unsigned int v22 = v16 >> 2;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter137(4274): Error adding 1 elements to context";
                  goto LABEL_1981;
                case 4275:
                  if ((_DWORD)v16 != 4) {
                    sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter138(4275): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  else {
                    unsigned int v22 = v16 >> 2;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter138(4275): Error adding 1 elements to context";
                  goto LABEL_1981;
                case 4276:
                  if ((_DWORD)v16 != 16) {
                    sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter139(4276): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  else {
                    unsigned int v22 = v16 >> 2;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter139(4276): Error adding 4 elements to context";
                  goto LABEL_1981;
                case 4277:
                  if ((_DWORD)v16 != 4) {
                    sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter140(4277): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  else {
                    unsigned int v22 = v16 >> 2;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter140(4277): Error adding 1 elements to context";
                  goto LABEL_1981;
                case 4278:
                  if ((_DWORD)v16 != 4) {
                    sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter141(4278): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v16);
                  else {
                    unsigned int v22 = v16 >> 2;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter141(4278): Error adding 1 elements to context";
                  goto LABEL_1981;
                default:
                  switch(v17)
                  {
                    case 4164:
                      if ((_DWORD)v16 != 4) {
                        sub_1000130E0( "ASPMSPParseBufferToCxt: syndSumAcqConvergedToStaticWalls(4164): cfg 1 elements; (1*4) cfg byte"
                      }
                          "s != (%d) buffer bytes",
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v16);
                      else {
                        unsigned int v22 = v16 >> 2;
                      }
                      unint64_t v9 = "ASPMSPParseBufferToCxt: syndSumAcqConvergedToStaticWalls(4164): Error adding 1 elements to context";
                      goto LABEL_1981;
                    case 4165:
                      if ((_DWORD)v16 != 60) {
                        sub_1000130E0( "ASPMSPParseBufferToCxt: DYCE1_Decoded_Bitflips(4165): cfg 15 elements; (15*4) cfg bytes != (%d) buffer bytes",
                      }
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v16);
                      else {
                        unsigned int v22 = v16 >> 2;
                      }
                      unint64_t v9 = "ASPMSPParseBufferToCxt: DYCE1_Decoded_Bitflips(4165): Error adding 15 elements to context";
                      goto LABEL_1981;
                    case 4166:
                      if ((_DWORD)v16 != 80) {
                        sub_1000130E0( "ASPMSPParseBufferToCxt: DYCE1_Target_Bitflips(4166): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
                      }
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v16);
                      else {
                        unsigned int v22 = v16 >> 2;
                      }
                      unint64_t v9 = "ASPMSPParseBufferToCxt: DYCE1_Target_Bitflips(4166): Error adding 20 elements to context";
                      goto LABEL_1981;
                    case 4167:
                      if ((_DWORD)v16 != 60) {
                        sub_1000130E0( "ASPMSPParseBufferToCxt: DYCE2_Decoded_Bitflips(4167): cfg 15 elements; (15*4) cfg bytes != (%d) buffer bytes",
                      }
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v16);
                      else {
                        unsigned int v22 = v16 >> 2;
                      }
                      unint64_t v9 = "ASPMSPParseBufferToCxt: DYCE2_Decoded_Bitflips(4167): Error adding 15 elements to context";
                      goto LABEL_1981;
                    case 4168:
                      if ((_DWORD)v16 != 80) {
                        sub_1000130E0( "ASPMSPParseBufferToCxt: DYCE2_Target_Bitflips(4168): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
                      }
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v16);
                      else {
                        unsigned int v22 = v16 >> 2;
                      }
                      unint64_t v9 = "ASPMSPParseBufferToCxt: DYCE2_Target_Bitflips(4168): Error adding 20 elements to context";
                      goto LABEL_1981;
                    default:
                      if (v17 <= 12323)
                      {
                        switch(v17)
                        {
                          case 8193:
                            if ((_DWORD)v16 != 20) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: avg_rd_window_size(8193): cfg 5 elements; (5*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: avg_rd_window_size(8193): Error adding 5 elements to context";
                            break;
                          case 8194:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: num_zq_failures(8194): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: num_zq_failures(8194): Error adding 1 elements to context";
                            break;
                          case 8195:
                            if ((_DWORD)v16 != 64) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: lower_die_temperature(8195): cfg 16 elements; (16*4) cfg bytes !"
                            }
                                "= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: lower_die_temperature(8195): Error adding 16 elements to context";
                            break;
                          case 8196:
                            if ((_DWORD)v16 != 64) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: higher_die_temperature(8196): cfg 16 elements; (16*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: higher_die_temperature(8196): Error adding 16 elements to context";
                            break;
                          case 8197:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: number_of_sram_flips(8197): cfg 1 elements; (1*4) cfg bytes != ("
                            }
                                "%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_sram_flips(8197): Error adding 1 elements to context";
                            break;
                          case 8198:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: number_of_reset_failures(8198): cfg 1 elements; (1*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_reset_failures(8198): Error adding 1 elements to context";
                            break;
                          case 8199:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: device_config(8199): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: device_config(8199): Error adding 1 elements to context";
                            break;
                          case 8200:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: number_of_throttling_events(8200): cfg 1 elements; (1*4) cfg byt"
                            }
                                "es != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_throttling_events(8200): Error adding 1 elements to context";
                            break;
                          case 8201:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: link_speed_recoveries(8201): cfg 1 elements; (1*4) cfg bytes != "
                            }
                                "(%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: link_speed_recoveries(8201): Error adding 1 elements to context";
                            break;
                          case 8202:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: fw_updates(8202): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: fw_updates(8202): Error adding 1 elements to context";
                            break;
                          case 8203:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: maintenance_backup_to_main(8203): cfg 1 elements; (1*4) cfg byte"
                            }
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: maintenance_backup_to_main(8203): Error adding 1 elements to context";
                            break;
                          case 8204:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: maintenance_main_to_backup(8204): cfg 1 elements; (1*4) cfg byte"
                            }
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: maintenance_main_to_backup(8204): Error adding 1 elements to context";
                            break;
                          case 8205:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: boot_block_erase_failures(8205): cfg 1 elements; (1*4) cfg bytes"
                            }
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_erase_failures(8205): Error adding 1 elements to context";
                            break;
                          case 8206:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: boot_block_program_failures(8206): cfg 1 elements; (1*4) cfg byt"
                            }
                                "es != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_program_failures(8206): Error adding 1 elements to context";
                            break;
                          case 8207:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: boot_block_read_verify_failures(8207): cfg 1 elements; (1*4) cfg"
                            }
                                " bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_read_verify_failures(8207): Error adding 1 elements to context";
                            break;
                          case 8208:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: boot_block_read_failures(8208): cfg 1 elements; (1*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_read_failures(8208): Error adding 1 elements to context";
                            break;
                          case 8209:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: boot_block_refresh(8209): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_refresh(8209): Error adding 1 elements to context";
                            break;
                          case 8210:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: boot_block_convert_to_main(8210): cfg 1 elements; (1*4) cfg byte"
                            }
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_convert_to_main(8210): Error adding 1 elements to context";
                            break;
                          case 8211:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: boot_block_read_source_changed(8211): cfg 1 elements; (1*4) cfg "
                            }
                                "bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_read_source_changed(8211): Error adding 1 elements to context";
                            break;
                          case 8212:
                            if ((_DWORD)v16 != 16) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: open_blocks_hist(8212): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: open_blocks_hist(8212): Error adding 4 elements to context";
                            break;
                          case 8213:
                            if ((_DWORD)v16 != 24) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: random_read_hit_ratio_hist(8213): cfg 6 elements; (6*4) cfg byte"
                            }
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: random_read_hit_ratio_hist(8213): Error adding 6 elements to context";
                            break;
                          case 8214:
                            if ((_DWORD)v16 != 20) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: active_time_hist(8214): cfg 5 elements; (5*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_hist(8214): Error adding 5 elements to context";
                            break;
                          case 8215:
                            if ((_DWORD)v16 != 8) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: rd_retraining_failures(8215): cfg 2 elements; (2*4) cfg bytes !="
                            }
                                " (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: rd_retraining_failures(8215): Error adding 2 elements to context";
                            break;
                          case 8216:
                            if ((_DWORD)v16 != 8) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: wr_retraining_failures(8216): cfg 2 elements; (2*4) cfg bytes !="
                            }
                                " (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: wr_retraining_failures(8216): Error adding 2 elements to context";
                            break;
                          case 8217:
                            if ((_DWORD)v16 != 20) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: auto_skip(8217): cfg 5 elements; (5*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: auto_skip(8217): Error adding 5 elements to context";
                            break;
                          case 8218:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: number_of_dcc_pass_after_retry(8218): cfg 1 elements; (1*4) cfg "
                            }
                                "bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_dcc_pass_after_retry(8218): Error adding 1 elements to context";
                            break;
                          case 8219:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: number_of_dcc_failures(8219): cfg 1 elements; (1*4) cfg bytes !="
                            }
                                " (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_dcc_failures(8219): Error adding 1 elements to context";
                            break;
                          case 8220:
                            if ((_DWORD)v16 != 28) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: open_blocks_hist(8220): cfg 7 elements; (7*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: open_blocks_hist(8220): Error adding 7 elements to context";
                            break;
                          case 8221:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: max_size_open_blocks_list(8221): cfg 1 elements; (1*4) cfg bytes"
                            }
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: max_size_open_blocks_list(8221): Error adding 1 elements to context";
                            break;
                          case 8222:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: gps_max_num_of_failures(8222): cfg 1 elements; (1*4) cfg bytes !"
                            }
                                "= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: gps_max_num_of_failures(8222): Error adding 1 elements to context";
                            break;
                          case 8223:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: gps_num_of_failures_max_overflow(8223): cfg 1 elements; (1*4) cf"
                            }
                                "g bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: gps_num_of_failures_max_overflow(8223): Error adding 1 elements to context";
                            break;
                          case 8224:
                            if ((_DWORD)v16 != 32) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: active_time_hist(8224): cfg 8 elements; (8*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_hist(8224): Error adding 8 elements to context";
                            break;
                          case 8225:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: num_auto_program_cache_terminations(8225): cfg 1 elements; (1*4)"
                            }
                                " cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: num_auto_program_cache_terminations(8225): Error adding 1 elements to context";
                            break;
                          case 8226:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: number_of_read_cache_auto_terminations(8226): cfg 1 elements; (1"
                            }
                                "*4) cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_read_cache_auto_terminations(8226): Error adding 1 el"
                                 "ements to context";
                            break;
                          case 8227:
                            if ((_DWORD)v16 != 28) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: external_etags_usage_hist(8227): cfg 7 elements; (7*4) cfg bytes"
                            }
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: external_etags_usage_hist(8227): Error adding 7 elements to context";
                            break;
                          case 8228:
                            if ((_DWORD)v16 != 16) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: internal_etags_usage_hist(8228): cfg 4 elements; (4*4) cfg bytes"
                            }
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: internal_etags_usage_hist(8228): Error adding 4 elements to context";
                            break;
                          case 8229:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: max_heap_usage(8229): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: max_heap_usage(8229): Error adding 1 elements to context";
                            break;
                          case 8230:
                            if ((_DWORD)v16 != 24) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: rom_num_hard_resets(8230): cfg 6 elements; (6*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: rom_num_hard_resets(8230): Error adding 6 elements to context";
                            break;
                          case 8231:
                            if ((_DWORD)v16 != 64) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: lower_die_temperature(8231): cfg 16 elements; (16*4) cfg bytes !"
                            }
                                "= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: lower_die_temperature(8231): Error adding 16 elements to context";
                            break;
                          case 8232:
                            if ((_DWORD)v16 != 64) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: higher_die_temperature(8232): cfg 16 elements; (16*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: higher_die_temperature(8232): Error adding 16 elements to context";
                            break;
                          case 8233:
                            if ((_DWORD)v16 != 24) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: random_read_hit_ratio_hist(8233): cfg 6 elements; (6*4) cfg byte"
                            }
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: random_read_hit_ratio_hist(8233): Error adding 6 elements to context";
                            break;
                          case 8234:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: msp_number_sram_flips(8234): cfg 1 elements; (1*4) cfg bytes != "
                            }
                                "(%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: msp_number_sram_flips(8234): Error adding 1 elements to context";
                            break;
                          case 8235:
                            if ((_DWORD)v16 != 28) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: boot_time_normal_power(8235): cfg 7 elements; (7*4) cfg bytes !="
                            }
                                " (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_time_normal_power(8235): Error adding 7 elements to context";
                            break;
                          case 8236:
                            if ((_DWORD)v16 != 28) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: boot_time_low_power(8236): cfg 7 elements; (7*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_time_low_power(8236): Error adding 7 elements to context";
                            break;
                          case 8237:
                            if ((_DWORD)v16 != 40) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: active_time_bw_pg_hist(8237): cfg 10 elements; (10*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_bw_pg_hist(8237): Error adding 10 elements to context";
                            break;
                          case 8238:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: active_time_bw_pg_min(8238): cfg 1 elements; (1*4) cfg bytes != "
                            }
                                "(%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_bw_pg_min(8238): Error adding 1 elements to context";
                            break;
                          case 8239:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: active_time_bw_pg_max(8239): cfg 1 elements; (1*4) cfg bytes != "
                            }
                                "(%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_bw_pg_max(8239): Error adding 1 elements to context";
                            break;
                          case 8240:
                            if ((_DWORD)v16 != 20) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: mdll_relative_offset(8240): cfg 5 elements; (5*4) cfg bytes != ("
                            }
                                "%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: mdll_relative_offset(8240): Error adding 5 elements to context";
                            break;
                          case 8241:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: num_pg_regrets(8241): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: num_pg_regrets(8241): Error adding 1 elements to context";
                            break;
                          case 8242:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: spi_image_overall_duration_acc(8242): cfg 1 elements; (1*4) cfg "
                            }
                                "bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: spi_image_overall_duration_acc(8242): Error adding 1 elements to context";
                            break;
                          case 8243:
                            if ((_DWORD)v16 != 4) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: spi_image_cw_fetch_duration_acc(8243): cfg 1 elements; (1*4) cfg"
                            }
                                " bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: spi_image_cw_fetch_duration_acc(8243): Error adding 1 elements to context";
                            break;
                          case 8244:
                            if ((_DWORD)v16 != 20) {
                              sub_1000130E0( "ASPMSPParseBufferToCxt: spi_image_cw_fetch_duration_hist(8244): cfg 5 elements; (5*4) cf"
                            }
                                "g bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v16);
                            else {
                              unsigned int v22 = v16 >> 2;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: spi_image_cw_fetch_duration_hist(8244): Error adding 5 elements to context";
                            break;
                          default:
                            switch(v17)
                            {
                              case 4279:
                                if ((_DWORD)v16 != 16) {
                                  sub_1000130E0( "ASPMSPParseBufferToCxt: fs1_4b_fail(4279): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                                }
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v16);
                                else {
                                  unsigned int v22 = v16 >> 2;
                                }
                                unint64_t v9 = v14;
                                break;
                              case 4280:
                                if ((_DWORD)v16 != 16) {
                                  sub_1000130E0( "ASPMSPParseBufferToCxt: fs1_4b_fast_fail(4280): cfg 4 elements; (4*4) cfg bytes != ("
                                }
                                    "%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v16);
                                else {
                                  unsigned int v22 = v16 >> 2;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: fs1_4b_fast_fail(4280): Error adding 4 elements to context";
                                break;
                              case 4281:
                                if ((_DWORD)v16 != 40) {
                                  sub_1000130E0( "ASPMSPParseBufferToCxt: dyce_decoded_bit_flips(4281): cfg 10 elements; (10*4) cfg by"
                                }
                                    "tes != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v16);
                                else {
                                  unsigned int v22 = v16 >> 2;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: dyce_decoded_bit_flips(4281): Error adding 10 elements to context";
                                break;
                              case 4282:
                                if ((_DWORD)v16 != 60) {
                                  sub_1000130E0( "ASPMSPParseBufferToCxt: slip_bch(4282): cfg 15 elements; (15*4) cfg bytes != (%d) buffer bytes",
                                }
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v16);
                                else {
                                  unsigned int v22 = v16 >> 2;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: slip_bch(4282): Error adding 15 elements to context";
                                break;
                              case 4283:
                                if ((_DWORD)v16 != 40) {
                                  sub_1000130E0( "ASPMSPParseBufferToCxt: read_fail(4283): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                                }
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v16);
                                else {
                                  unsigned int v22 = v16 >> 2;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: read_fail(4283): Error adding 10 elements to context";
                                break;
                              case 4284:
                                if ((_DWORD)v16 != 40) {
                                  sub_1000130E0( "ASPMSPParseBufferToCxt: tr_read_fail(4284): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                                }
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v16);
                                else {
                                  unsigned int v22 = v16 >> 2;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: tr_read_fail(4284): Error adding 10 elements to context";
                                break;
                              case 4285:
                                if ((_DWORD)v16 != 40) {
                                  sub_1000130E0( "ASPMSPParseBufferToCxt: tr_aux_bfs_percent(4285): cfg 10 elements; (10*4) cfg bytes "
                                }
                                    "!= (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v16);
                                else {
                                  unsigned int v22 = v16 >> 2;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: tr_aux_bfs_percent(4285): Error adding 10 elements to context";
                                break;
                              case 4286:
                                if ((_DWORD)v16 != 20) {
                                  sub_1000130E0( "ASPMSPParseBufferToCxt: tr_reconstruct_pass_step(4286): cfg 5 elements; (5*4) cfg by"
                                }
                                    "tes != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v16);
                                else {
                                  unsigned int v22 = v16 >> 2;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: tr_reconstruct_pass_step(4286): Error adding 5 elements to context";
                                break;
                              case 4287:
                                if ((_DWORD)v16 != 4) {
                                  sub_1000130E0( "ASPMSPParseBufferToCxt: tr_reconstruct_num(4287): cfg 1 elements; (1*4) cfg bytes !="
                                }
                                    " (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v16);
                                else {
                                  unsigned int v22 = v16 >> 2;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: tr_reconstruct_num(4287): Error adding 1 elements to context";
                                break;
                              default:
                                goto LABEL_1404;
                            }

                            goto LABEL_1981;
                        }

                        goto LABEL_1981;
                      }

                      switch(v17)
                      {
                        case 12326:
                          if ((_DWORD)v16 != 8) {
                            sub_1000130E0( "ASPMSPParseBufferToCxt: initialReadStageParameter2(12326): cfg 1 elements; (1*8) cfg bytes"
                          }
                              " != (%d) buffer bytes",
                              a2,
                              a3,
                              a4,
                              a5,
                              a6,
                              a7,
                              a8,
                              v16);
                          else {
                            unsigned int v22 = v16 >> 3;
                          }
                          if (!sub_100022DD0(a1, "initialReadStageParameter2", v11, 8u, v22))
                          {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStageParameter2(12326): Error adding 1 elements to context";
                            goto LABEL_1981;
                          }

                          break;
                        case 12325:
                          if ((_DWORD)v16 != 8) {
                            sub_1000130E0( "ASPMSPParseBufferToCxt: initialReadStageParameter1(12325): cfg 1 elements; (1*8) cfg bytes"
                          }
                              " != (%d) buffer bytes",
                              a2,
                              a3,
                              a4,
                              a5,
                              a6,
                              a7,
                              a8,
                              v16);
                          else {
                            unsigned int v22 = v16 >> 3;
                          }
                          if (!sub_100022DD0(a1, "initialReadStageParameter1", v11, 8u, v22))
                          {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStageParameter1(12325): Error adding 1 elements to context";
                            goto LABEL_1981;
                          }

                          break;
                        case 12324:
                          if ((_DWORD)v16 != 8) {
                            sub_1000130E0( "ASPMSPParseBufferToCxt: dspExceptionParameter144(12324): cfg 1 elements; (1*8) cfg bytes !"
                          }
                              "= (%d) buffer bytes",
                              a2,
                              a3,
                              a4,
                              a5,
                              a6,
                              a7,
                              a8,
                              v16);
                          else {
                            unsigned int v22 = v16 >> 3;
                          }
                          if (!sub_100022DD0(a1, "dspExceptionParameter144", v11, 8u, v22))
                          {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter144(12324): Error adding 1 elements to context";
                            goto LABEL_1981;
                          }

                          break;
                        default:
LABEL_1404:
                          switch(v17)
                          {
                            case 8245:
                              if ((_DWORD)v16 != 4) {
                                sub_1000130E0( "ASPMSPParseBufferToCxt: spi_num_uses(8245): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                              }
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              else {
                                unsigned int v22 = v16 >> 2;
                              }
                              unint64_t v9 = "ASPMSPParseBufferToCxt: spi_num_uses(8245): Error adding 1 elements to context";
                              break;
                            case 8246:
                              if ((_DWORD)v16 != 20) {
                                sub_1000130E0( "ASPMSPParseBufferToCxt: e2e_error_count_tmode(8246): cfg 5 elements; (5*4) cfg bytes !"
                              }
                                  "= (%d) buffer bytes",
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              else {
                                unsigned int v22 = v16 >> 2;
                              }
                              unint64_t v9 = "ASPMSPParseBufferToCxt: e2e_error_count_tmode(8246): Error adding 5 elements to context";
                              break;
                            case 8247:
                              if ((_DWORD)v16 != 36) {
                                sub_1000130E0( "ASPMSPParseBufferToCxt: rd_window_dist(8247): cfg 9 elements; (9*4) cfg bytes != (%d) buffer bytes",
                              }
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              else {
                                unsigned int v22 = v16 >> 2;
                              }
                              unint64_t v9 = "ASPMSPParseBufferToCxt: rd_window_dist(8247): Error adding 9 elements to context";
                              break;
                            case 8248:
                              if ((_DWORD)v16 != 36) {
                                sub_1000130E0( "ASPMSPParseBufferToCxt: extended_rd_window_diff_dist(8248): cfg 9 elements; (9*4) cfg "
                              }
                                  "bytes != (%d) buffer bytes",
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              else {
                                unsigned int v22 = v16 >> 2;
                              }
                              unint64_t v9 = "ASPMSPParseBufferToCxt: extended_rd_window_diff_dist(8248): Error adding 9 elements to context";
                              break;
                            case 8249:
                              if ((_DWORD)v16 != 8) {
                                sub_1000130E0( "ASPMSPParseBufferToCxt: rd_retraining_failures_v2(8249): cfg 2 elements; (2*4) cfg byt"
                              }
                                  "es != (%d) buffer bytes",
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              else {
                                unsigned int v22 = v16 >> 2;
                              }
                              unint64_t v9 = "ASPMSPParseBufferToCxt: rd_retraining_failures_v2(8249): Error adding 2 elements to context";
                              break;
                            case 8250:
                              if ((_DWORD)v16 != 120) {
                                sub_1000130E0( "ASPMSPParseBufferToCxt: lower_die_temperature(8250): cfg 30 elements; (30*4) cfg bytes"
                              }
                                  " != (%d) buffer bytes",
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              else {
                                unsigned int v22 = v16 >> 2;
                              }
                              unint64_t v9 = "ASPMSPParseBufferToCxt: lower_die_temperature(8250): Error adding 30 elements to context";
                              break;
                            case 8251:
                              if ((_DWORD)v16 != 120) {
                                sub_1000130E0( "ASPMSPParseBufferToCxt: higher_die_temperature(8251): cfg 30 elements; (30*4) cfg byte"
                              }
                                  "s != (%d) buffer bytes",
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              else {
                                unsigned int v22 = v16 >> 2;
                              }
                              unint64_t v9 = "ASPMSPParseBufferToCxt: higher_die_temperature(8251): Error adding 30 elements to context";
                              break;
                            case 8252:
                              if ((_DWORD)v16 != 36) {
                                sub_1000130E0( "ASPMSPParseBufferToCxt: rd_window_dist_single_die(8252): cfg 9 elements; (9*4) cfg byt"
                              }
                                  "es != (%d) buffer bytes",
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              else {
                                unsigned int v22 = v16 >> 2;
                              }
                              unint64_t v9 = "ASPMSPParseBufferToCxt: rd_window_dist_single_die(8252): Error adding 9 elements to context";
                              break;
                            case 8253:
                              if ((_DWORD)v16 != 16) {
                                sub_1000130E0( "ASPMSPParseBufferToCxt: parallel_slip_drops_hist(8253): cfg 4 elements; (4*4) cfg byte"
                              }
                                  "s != (%d) buffer bytes",
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              else {
                                unsigned int v22 = v16 >> 2;
                              }
                              unint64_t v9 = "ASPMSPParseBufferToCxt: parallel_slip_drops_hist(8253): Error adding 4 elements to context";
                              break;
                            case 8254:
                              if ((_DWORD)v16 != 4) {
                                sub_1000130E0( "ASPMSPParseBufferToCxt: sys_halt_max_latency(8254): cfg 1 elements; (1*4) cfg bytes !="
                              }
                                  " (%d) buffer bytes",
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              else {
                                unsigned int v22 = v16 >> 2;
                              }
                              unint64_t v9 = "ASPMSPParseBufferToCxt: sys_halt_max_latency(8254): Error adding 1 elements to context";
                              break;
                            case 8255:
                              if ((_DWORD)v16 != 4) {
                                sub_1000130E0( "ASPMSPParseBufferToCxt: sys_halt_max_latency_opcode(8255): cfg 1 elements; (1*4) cfg b"
                              }
                                  "ytes != (%d) buffer bytes",
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              else {
                                unsigned int v22 = v16 >> 2;
                              }
                              unint64_t v9 = "ASPMSPParseBufferToCxt: sys_halt_max_latency_opcode(8255): Error adding 1 elements to context";
                              break;
                            case 8256:
                              if ((_DWORD)v16 != 4) {
                                sub_1000130E0( "ASPMSPParseBufferToCxt: channel_halt_max_latency(8256): cfg 1 elements; (1*4) cfg byte"
                              }
                                  "s != (%d) buffer bytes",
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              else {
                                unsigned int v22 = v16 >> 2;
                              }
                              unint64_t v9 = "ASPMSPParseBufferToCxt: channel_halt_max_latency(8256): Error adding 1 elements to context";
                              break;
                            case 8257:
                              if ((_DWORD)v16 != 8) {
                                sub_1000130E0( "ASPMSPParseBufferToCxt: max_heap_usage_v2(8257): cfg 2 elements; (2*4) cfg bytes != (%d) buffer bytes",
                              }
                                  a2,
                                  a3,
                                  a4,
                                  a5,
                                  a6,
                                  a7,
                                  a8,
                                  v16);
                              else {
                                unsigned int v22 = v16 >> 2;
                              }
                              unint64_t v9 = "ASPMSPParseBufferToCxt: max_heap_usage_v2(8257): Error adding 2 elements to context";
                              break;
                            default:
                              switch(v17)
                              {
                                case 16384:
                                  if ((_DWORD)v16 != 8) {
                                    sub_1000130E0( "ASPMSPParseBufferToCxt: fw_version_identifier(16384): cfg 1 elements; (1*8) cfg by"
                                  }
                                      "tes != (%d) buffer bytes",
                                      a2,
                                      a3,
                                      a4,
                                      a5,
                                      a6,
                                      a7,
                                      a8,
                                      v16);
                                  else {
                                    unsigned int v22 = v16 >> 3;
                                  }
                                  unint64_t v9 = "ASPMSPParseBufferToCxt: fw_version_identifier(16384): Error adding 1 elements to context";
                                  break;
                                case 16385:
                                  if ((_DWORD)v16 != 40) {
                                    sub_1000130E0( "ASPMSPParseBufferToCxt: random_read_size_ratio(16385): cfg 5 elements; (5*8) cfg b"
                                  }
                                      "ytes != (%d) buffer bytes",
                                      a2,
                                      a3,
                                      a4,
                                      a5,
                                      a6,
                                      a7,
                                      a8,
                                      v16);
                                  else {
                                    unsigned int v22 = v16 >> 3;
                                  }
                                  unint64_t v9 = "ASPMSPParseBufferToCxt: random_read_size_ratio(16385): Error adding 5 elements to context";
                                  break;
                                case 16386:
                                  if ((_DWORD)v16 != 8) {
                                    sub_1000130E0( "ASPMSPParseBufferToCxt: number_gracefull_read_terminations(16386): cfg 1 elements;"
                                  }
                                      " (1*8) cfg bytes != (%d) buffer bytes",
                                      a2,
                                      a3,
                                      a4,
                                      a5,
                                      a6,
                                      a7,
                                      a8,
                                      v16);
                                  else {
                                    unsigned int v22 = v16 >> 3;
                                  }
                                  if (sub_100022DD0( a1,  "number_gracefull_read_terminations",  v11,  8u,  v22)) {
                                    goto LABEL_1372;
                                  }
                                  unint64_t v9 = "ASPMSPParseBufferToCxt: number_gracefull_read_terminations(16386): Error adding 1"
                                       " elements to context";
                                  break;
                                case 16387:
                                  if ((_DWORD)v16 != 8) {
                                    sub_1000130E0( "ASPMSPParseBufferToCxt: active_time_bw_pg_acc(16387): cfg 1 elements; (1*8) cfg by"
                                  }
                                      "tes != (%d) buffer bytes",
                                      a2,
                                      a3,
                                      a4,
                                      a5,
                                      a6,
                                      a7,
                                      a8,
                                      v16);
                                  else {
                                    unsigned int v22 = v16 >> 3;
                                  }
                                  unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_bw_pg_acc(16387): Error adding 1 elements to context";
                                  break;
                                case 16388:
                                  if ((_DWORD)v16 != 8) {
                                    sub_1000130E0( "ASPMSPParseBufferToCxt: num_pg_events(16388): cfg 1 elements; (1*8) cfg bytes != ("
                                  }
                                      "%d) buffer bytes",
                                      a2,
                                      a3,
                                      a4,
                                      a5,
                                      a6,
                                      a7,
                                      a8,
                                      v16);
                                  else {
                                    unsigned int v22 = v16 >> 3;
                                  }
                                  unint64_t v9 = "ASPMSPParseBufferToCxt: num_pg_events(16388): Error adding 1 elements to context";
                                  break;
                                case 16389:
                                  if ((_DWORD)v16 != 128) {
                                    sub_1000130E0( "ASPMSPParseBufferToCxt: algo_queue_depth(16389): cfg 16 elements; (16*8) cfg bytes"
                                  }
                                      " != (%d) buffer bytes",
                                      a2,
                                      a3,
                                      a4,
                                      a5,
                                      a6,
                                      a7,
                                      a8,
                                      v16);
                                  else {
                                    unsigned int v22 = v16 >> 3;
                                  }
                                  unint64_t v9 = "ASPMSPParseBufferToCxt: algo_queue_depth(16389): Error adding 16 elements to context";
                                  break;
                                case 16390:
                                  if ((_DWORD)v16 != 128) {
                                    sub_1000130E0( "ASPMSPParseBufferToCxt: parallel_slip_hist(16390): cfg 16 elements; (16*8) cfg byt"
                                  }
                                      "es != (%d) buffer bytes",
                                      a2,
                                      a3,
                                      a4,
                                      a5,
                                      a6,
                                      a7,
                                      a8,
                                      v16);
                                  else {
                                    unsigned int v22 = v16 >> 3;
                                  }
                                  unint64_t v9 = "ASPMSPParseBufferToCxt: parallel_slip_hist(16390): Error adding 16 elements to context";
                                  break;
                                case 16391:
                                  if ((_DWORD)v16 != 48) {
                                    sub_1000130E0( "ASPMSPParseBufferToCxt: sys_halt_latency_hist(16391): cfg 6 elements; (6*8) cfg by"
                                  }
                                      "tes != (%d) buffer bytes",
                                      a2,
                                      a3,
                                      a4,
                                      a5,
                                      a6,
                                      a7,
                                      a8,
                                      v16);
                                  else {
                                    unsigned int v22 = v16 >> 3;
                                  }
                                  unint64_t v9 = "ASPMSPParseBufferToCxt: sys_halt_latency_hist(16391): Error adding 6 elements to context";
                                  break;
                                case 16392:
                                  if ((_DWORD)v16 != 48) {
                                    sub_1000130E0( "ASPMSPParseBufferToCxt: channel_halt_latency_hist(16392): cfg 6 elements; (6*8) cf"
                                  }
                                      "g bytes != (%d) buffer bytes",
                                      a2,
                                      a3,
                                      a4,
                                      a5,
                                      a6,
                                      a7,
                                      a8,
                                      v16);
                                  else {
                                    unsigned int v22 = v16 >> 3;
                                  }
                                  unint64_t v9 = "ASPMSPParseBufferToCxt: channel_halt_latency_hist(16392): Error adding 6 elements to context";
                                  break;
                                case 16393:
                                  if ((_DWORD)v16 != 8) {
                                    sub_1000130E0( "ASPMSPParseBufferToCxt: num_idle_die_read_cache_terminate(16393): cfg 1 elements; "
                                  }
                                      "(1*8) cfg bytes != (%d) buffer bytes",
                                      a2,
                                      a3,
                                      a4,
                                      a5,
                                      a6,
                                      a7,
                                      a8,
                                      v16);
                                  else {
                                    unsigned int v22 = v16 >> 3;
                                  }
                                  if (sub_100022DD0( a1,  "num_idle_die_read_cache_terminate",  v11,  8u,  v22)) {
                                    goto LABEL_1372;
                                  }
                                  unint64_t v9 = "ASPMSPParseBufferToCxt: num_idle_die_read_cache_terminate(16393): Error adding 1 "
                                       "elements to context";
                                  break;
                                default:
                                  goto LABEL_1373;
                              }

                              goto LABEL_1981;
                          }

                          goto LABEL_1981;
                      }

LABEL_1372:
                      uint64_t v8 = v8 + v22;
LABEL_1373:
                      uint64_t v13 = &jpt_1000271AC;
                      break;
                  }

                  break;
              }

              break;
          }

          break;
      }

      goto LABEL_461;
  }

uint64_t sub_100029864(uint64_t result, const char *a2, const char *a3, uint64_t a4)
{
  if (result)
  {
    int v7 = (void *)result;
    uint64_t v8 = (char *)calloc(1uLL, 0x78uLL);
    unint64_t v9 = calloc(1uLL, 0x78uLL);
    unsigned int v10 = v9;
    if (v8 && v9)
    {
      uint64_t v11 = v7[1];
      if (v11 && (uint64_t v12 = v7[3]) != 0)
      {
        *(void *)(v11 + 112) = v9;
        uint64_t v13 = (char **)(v12 + 112);
      }

      else
      {
        void *v7 = v9;
        uint64_t v13 = (char **)(v7 + 2);
      }

      __int16 *v13 = v8;
      v7[1] = v9;
      v7[3] = v8;
      *((void *)v8 + 14) = 0LL;
      *((void *)v9 + 14) = 0LL;
      snprintf(v9, 0x63uLL, "%s%s", a2, a3);
      v10[99] = 0;
      snprintf(v8, 0x63uLL, "%llu", a4);
      v8[99] = 0;
      *((void *)v8 + 13) = a4;
      return 1LL;
    }

    else
    {
      if (v8) {
        free(v8);
      }
      if (v10) {
        free(v10);
      }
      return 0LL;
    }
  }

  return result;
}

double sub_100029968(uint64_t a1)
{
  if (a1)
  {
    id v2 = *(void **)a1;
    if (v2)
    {
      do
      {
        id v3 = (void *)v2[14];
        free(v2);
        id v2 = v3;
      }

      while (v3);
    }

    float v4 = *(void **)(a1 + 16);
    if (v4)
    {
      do
      {
        uint64_t v5 = (void *)v4[14];
        free(v4);
        float v4 = v5;
      }

      while (v5);
    }

    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }

  return result;
}

uint64_t sub_1000299C0(void *a1, const char *a2, const char *a3, uint64_t a4)
{
  uint64_t v8 = (char *)malloc(0x78uLL);
  unint64_t v9 = malloc(0x78uLL);
  unsigned int v10 = v9;
  uint64_t v11 = a1[1];
  if (v11 && (uint64_t v12 = a1[3]) != 0)
  {
    *(void *)(v11 + 112) = v9;
    uint64_t v13 = (char **)(v12 + 112);
  }

  else
  {
    *a1 = v9;
    uint64_t v13 = (char **)(a1 + 2);
  }

  __int16 *v13 = v8;
  a1[1] = v9;
  a1[3] = v8;
  *((void *)v8 + 14) = 0LL;
  v9[14] = 0LL;
  snprintf((char *)v9, 0x63uLL, "%s%s", a2, a3);
  *((_BYTE *)v10 + 99) = 0;
  uint64_t result = snprintf(v8, 0x63uLL, "%llu", a4);
  v8[99] = 0;
  *((void *)v8 + 13) = a4;
  return result;
}

uint64_t sub_100029A8C(unsigned int a1, void *a2, void *a3)
{
  uint64_t v12 = 0LL;
  if (!a2 || !a3)
  {
    float v4 = __stderrp;
    uint64_t v5 = "Error: Exporting data must output to buffer externally!\n";
    size_t v6 = 56LL;
    goto LABEL_6;
  }

  if (a1 <= 1)
  {
    float v4 = __stderrp;
    uint64_t v5 = "Error: system counters only supported on OSX\n";
    size_t v6 = 45LL;
LABEL_6:
    fwrite(v5, v6, 1uLL, v4);
    return 0LL;
  }

  signed int v8 = a1 - 3;
  if (a1 - 3 >= 7)
  {
    fprintf(__stderrp, "Error: Not supported option %d\n", a1);
    return 0LL;
  }

  int v10 = dword_100086610[v8];
  uint64_t v11 = sub_100037ABC(0LL, v10, qword_1000865D8[v8], &v12, 0, 0);
  *a2 = v11;
  if (v11)
  {
    *a3 = v12;
    return 1LL;
  }

  else
  {
    fprintf(__stderrp, "Error: Failed to get tunnel buffer for cmd option %d.\n", v10);
    uint64_t result = 0LL;
    *a3 = 0LL;
  }

  return result;
}

uint64_t sub_100029BB0(int a1, uint64_t a2, unint64_t *a3)
{
  size_t __nbyte = 0x100000LL;
  uint64_t v12 = 0LL;
  if (sub_100037EF8(&v12) && v12 && *((_DWORD *)v12 + 4))
  {
    size_t v6 = malloc(0x100000uLL);
    if (v6)
    {
      unint64_t v7 = 0LL;
      unint64_t v8 = a2 - 1;
      while (1)
      {
        size_t __nbyte = 0x100000LL;
        bzero(v6, 0x100000uLL);
        if (__nbyte)
        {
          write(a1, v6, __nbyte);
          v7 += __nbyte;
          if (v8 >= v7) {
            continue;
          }
        }

        uint64_t v9 = 1LL;
        goto LABEL_12;
      }

      fwrite("Error: Tunnel command IOLog extraction failed\n", 0x2EuLL, 1uLL, __stderrp);
    }

    else
    {
      fprintf(__stderrp, "Error: failed to malloc %u bytes for iolog export.\n", 0x100000);
      unint64_t v7 = 0LL;
    }
  }

  else
  {
    fwrite("Unable to get nand connection\n", 0x1EuLL, 1uLL, __stderrp);
    unint64_t v7 = 0LL;
    size_t v6 = 0LL;
  }

  uint64_t v9 = 0LL;
LABEL_12:
  if (v12) {
    sub_100038040((uint64_t)v12);
  }
  if (v6) {
    free(v6);
  }
  if (a3) {
    *a3 = v7;
  }
  return v9;
}

uint64_t sub_100029D2C(int a1, _DWORD *a2, int a3)
{
  *(void *)uint64_t v11 = 0LL;
  if (!sub_100037EF8((char ***)v11) || !*(void *)v11 || !*(_DWORD *)(*(void *)v11 + 16LL))
  {
    unint64_t v7 = __stderrp;
    unint64_t v8 = "Unable to get nand connection\n";
    size_t v9 = 30LL;
LABEL_12:
    fwrite(v8, v9, 1uLL, v7);
    uint64_t v6 = 0LL;
    goto LABEL_13;
  }

  if (a2) {
    *a2 = outputStruct;
  }
  if (a3 && (sub_100037D78(*(char ***)v11, 34, outputStruct, &outputStruct) & 1) == 0)
  {
LABEL_11:
    unint64_t v7 = __stderrp;
    unint64_t v8 = "Error calling CoreDebugTunnel method to get/set iolog level!\n";
    size_t v9 = 61LL;
    goto LABEL_12;
  }

  uint64_t v6 = 1LL;
LABEL_13:
  sub_100038040(*(uint64_t *)v11);
  return v6;
}

uint64_t sub_100029E10(void **a1, size_t *a2, BOOL *a3, void *a4, _DWORD *a5)
{
  int v10 = (unsigned int *)*a1;
  if (!*a1) {
    return 1LL;
  }
  size_t v11 = *a2;
  if (!*a2) {
    return 1LL;
  }
  if (a5)
  {
    char v12 = 0;
    char v13 = 0;
    char v14 = 0;
    unint64_t v15 = (unint64_t)v10 + v11;
    while (1)
    {
      uint64_t v16 = v10 + 2;
      int v17 = *((unsigned __int8 *)v10 + 6);
      int v18 = *v10;
      unint64_t v19 = *v10 * (unint64_t)*((unsigned __int8 *)v10 + 6);
      BOOL v20 = v19 >= v11;
      unsigned int v21 = (unsigned int *)((char *)v16 + v19);
      int v23 = *((unsigned __int16 *)v10 + 2);
      switch(v23)
      {
        case 1:
          if (v17 != 8 || v18 != 1) {
            goto LABEL_29;
          }
          *a4 = *v16;
          char v12 = 1;
          break;
        case 4:
          if (v17 != 4 || v18 != 1) {
            goto LABEL_29;
          }
          *a5 = *(_DWORD *)v16;
          char v13 = 1;
          break;
        case 10:
          if (v17 != 1 || v18 != 1) {
            goto LABEL_29;
          }
          *a3 = *(_BYTE *)v16 == 0;
          char v14 = 1;
          break;
      }

      int v10 = v21;
      if ((v14 & 1) != 0)
      {
        int v10 = v21;
        if ((v12 & 1) != 0)
        {
          int v10 = v21;
          if ((v13 & 1) != 0)
          {
            char v13 = 1;
            char v12 = 1;
            goto LABEL_30;
          }
        }
      }
    }

LABEL_29:
    if ((v14 & 1) == 0) {
      goto LABEL_33;
    }
LABEL_30:
    if ((v12 & 1) != 0 && (v13 & 1) != 0) {
      return 1LL;
    }
LABEL_33:
    if (!a1) {
      goto LABEL_36;
    }
    int v10 = (unsigned int *)*a1;
    if (!*a1) {
      goto LABEL_36;
    }
  }

  free(v10);
  *a1 = 0LL;
LABEL_36:
  uint64_t result = 0LL;
  *a2 = 0LL;
  return result;
}

uint64_t sub_100029F90(char **a1, void **a2, size_t *a3, int a4, int a5)
{
  if (!a2 || !a3)
  {
    *a3 = 0LL;
    int v7 = -1;
    if (a2)
    {
LABEL_18:
      if (*a2)
      {
        free(*a2);
        *a2 = 0LL;
      }
    }

uint64_t sub_10002A0C8(void **a1, size_t *a2)
{
  return sub_100029F90(0LL, a1, a2, 3, 0);
}

uint64_t sub_10002A0E0(FILE *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3 = 0LL;
  __ptr = 0LL;
  unint64_t v25 = a3;
  size_t v22 = 0LL;
  *(void *)int v23 = 0LL;
  if (!a1 || a2 > 0xFFFFFFFE) {
    goto LABEL_26;
  }
  unsigned int v7 = sub_100037EF8((char ***)v23);
  uint64_t v3 = 0LL;
  unint64_t v8 = *(char ***)v23;
  if (v7 && *(void *)v23)
  {
    if (*(_DWORD *)(*(void *)v23 + 16LL))
    {
      __ptr = calloc(1uLL, 0x80000uLL);
      if (__ptr)
      {
        unint64_t v9 = 0LL;
        unint64_t v10 = 0LL;
LABEL_8:
        if (v9 >= a2)
        {
LABEL_24:
          uint64_t v3 = 1LL;
LABEL_26:
          unint64_t v8 = *(char ***)v23;
          goto LABEL_27;
        }

        size_t v22 = 0x80000LL;
        bzero(__ptr, 0x80000uLL);
        else {
          BOOL v11 = 1;
        }
        if (!v11)
        {
          char v12 = (unsigned int *)((char *)__ptr + v22);
          char v13 = (unsigned int *)__ptr;
          while (1)
          {
            char v14 = (unint64_t *)(v13 + 2);
            if (v13 + 2 > v12) {
              break;
            }
            int v15 = *((unsigned __int8 *)v13 + 6);
            int v16 = *v13;
            unint64_t v17 = *v13 * (unint64_t)*((unsigned __int8 *)v13 + 6);
            if (v17 >= v22) {
              break;
            }
            int v18 = (char *)v14 + v17;
            int v19 = *((unsigned __int16 *)v13 + 2);
            char v13 = (unsigned int *)v18;
            if (v19 == 9)
            {
              uint64_t v3 = 0LL;
              if (v15 != 8 || v16 != 1) {
                goto LABEL_26;
              }
              unint64_t v9 = *v14;
              size_t v22 = v18 - (_BYTE *)__ptr;
              if (!fwrite(__ptr, v18 - (_BYTE *)__ptr, 1uLL, a1)) {
                break;
              }
              v10 += v22;
              if (v10 > a3)
              {
                uint64_t v21 = 0x8FC0000000001LL;
                if (!fwrite(&v21, 8uLL, 1uLL, a1) || !fwrite(&v25, 8uLL, 1uLL, a1)) {
                  break;
                }
                goto LABEL_24;
              }

              goto LABEL_8;
            }
          }
        }
      }
    }

    uint64_t v3 = 0LL;
    goto LABEL_26;
  }

uint64_t sub_10002A2AC(char **a1, int a2, int a3, void *a4, void *a5)
{
  if (a3) {
    int v6 = 10;
  }
  else {
    int v6 = 13;
  }
  uint64_t v10 = 0LL;
  if (a4 && a5)
  {
    unint64_t v8 = sub_10003773C(a1, v6, 0, a2, &v10, 0, 0);
    *a4 = v8;
    if (v8)
    {
      *a5 = v10;
      return 1LL;
    }

    else
    {
      fprintf(__stderrp, "Error: Failed to get tunnel buffer for cmd option %d.\n", v6);
      uint64_t result = 0LL;
      *a5 = 0LL;
    }
  }

  else
  {
    fwrite("Error: Exporting data must output to buffer externally!\n", 0x38uLL, 1uLL, __stderrp);
    return 0LL;
  }

  return result;
}

uint64_t print_asp_magazine_stats(char *a1, int a2, int a3)
{
  uint64_t v8 = 0LL;
  unint64_t v9 = 0LL;
  if (sub_10002A2AC(0LL, a2, a3, &v9, &v8))
  {
    if (a3) {
      int v5 = 1;
    }
    else {
      int v5 = 3;
    }
    sub_10002A420(a1, (unint64_t *)v9, v8 >> 3, v5);
    free(v9);
    return 1LL;
  }

  else
  {
    unsigned int v7 = "all";
    if (a3) {
      unsigned int v7 = "perm";
    }
    fprintf(__stderrp, "Error: IO NVMe Smart cmd failed to extract ASP %s stats!\n", v7);
    return 0LL;
  }

uint64_t sub_10002A420(char *__filename, unint64_t *a2, int a3, int a4)
{
  unsigned int v7 = __filename;
  if (__filename)
  {
    uint64_t v8 = fopen(__filename, "a");
    if (!v8) {
      return fprintf(__stderrp, "Unable to open %s\n", v7);
    }
  }

  else
  {
    uint64_t v8 = __stdoutp;
  }

  fwrite("NAND stats:\n", 0xCuLL, 1uLL, v8);
  uint64_t result = fwrite("===========\n", 0xCuLL, 1uLL, v8);
  if (!a3) {
    goto LABEL_3139;
  }
  unint64_t v10 = 0LL;
  unint64_t v11 = 0LL;
  unint64_t v12 = 0LL;
  unint64_t v13 = 0LL;
  unint64_t v436 = 0LL;
  unint64_t v437 = 0LL;
  *(void *)v435 = a4 & 3;
  while (1)
  {
    unint64_t v16 = *a2;
    int v15 = a2 + 1;
    int v14 = v16;
    unsigned int v17 = a3 - 1;
    unint64_t v438 = HIDWORD(v16);
    if (v17 < HIDWORD(v16)) {
      break;
    }
    if (v14 > 49)
    {
      if (v14 > 128)
      {
        if (v14 == 129)
        {
          unint64_t v11 = *v15;
          goto LABEL_31;
        }

        if (v14 == 677)
        {
          unint64_t v10 = *v15;
          goto LABEL_31;
        }
      }

      else
      {
        if (v14 == 50)
        {
          *(void *)&v435[4] = *v15;
          goto LABEL_31;
        }

        if (v14 == 84)
        {
          unint64_t v12 = *v15;
          goto LABEL_31;
        }
      }
    }

    else if (v14 > 19)
    {
      if (v14 == 20)
      {
        unint64_t v436 = *v15;
        goto LABEL_31;
      }

      if (v14 == 49)
      {
        unint64_t v13 = *v15;
        goto LABEL_31;
      }
    }

    else
    {
      if (v14 == 1)
      {
        uint64_t result = fprintf(v8, "%20s:\t0x%llx\n");
        goto LABEL_32;
      }

      if (v14 == 4)
      {
        unint64_t v437 = *v15;
LABEL_31:
        uint64_t result = fprintf(v8, "%20s:\t%llu\n");
        goto LABEL_32;
      }
    }

    if ((a4 & 1) != 0 && v14 == 678 || (a4 & 1) != 0 && v14 == 679) {
      goto LABEL_31;
    }
    if ((a4 & 1) != 0 && v14 == 680)
    {
      unsigned int v433 = v17;
      unint64_t v18 = v13;
      unint64_t v19 = v11;
      uint64_t result = fprintf(v8, "%20s:\n", "magazineFWVersion");
      else {
        uint64_t v20 = v438;
      }
      if ((_DWORD)v20)
      {
        unint64_t v431 = v10;
        for (uint64_t i = 0LL; i != v20; ++i)
          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i, v15[i]);
        unint64_t v10 = v431;
      }

      unint64_t v11 = v19;
      unint64_t v13 = v18;
      unsigned int v17 = v433;
      goto LABEL_32;
    }

    if ((a4 & 1) != 0 && v14 == 2
      || (a4 & 1) != 0 && v14 == 3
      || (a4 & 1) != 0 && v14 == 5
      || (a4 & 1) != 0 && v14 == 6
      || (a4 & 1) != 0 && v14 == 27
      || (a4 & 1) != 0 && v14 == 99
      || (a4 & 1) != 0 && v14 == 107
      || (a4 & 1) != 0 && v14 == 1066
      || (a4 & 1) != 0 && v14 == 191
      || (a4 & 1) != 0 && v14 == 7)
    {
      goto LABEL_31;
    }

    unint64_t v434 = v11;
    int v432 = a4;
    if ((a4 & 1) == 0 || v14 != 8)
    {
      size_t v22 = v7;
      unint64_t v23 = v10;
      if ((v432 & 1) != 0 && v14 == 9
        || (v432 & 1) != 0 && v14 == 10
        || (v432 & 1) != 0 && v14 == 11
        || (v432 & 1) != 0 && v14 == 12
        || (v432 & 1) != 0 && v14 == 895
        || (v432 & 1) != 0 && v14 == 13
        || (v432 & 2) != 0 && v14 == 739)
      {
LABEL_81:
        uint64_t result = fprintf(v8, "%20s:\t%llu\n");
        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 14)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "hostWriteLogHisto");
        else {
          uint64_t v24 = v438;
        }
        if ((_DWORD)v24)
        {
          for (uint64_t j = 0LL; j != v24; ++j)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", j, v15[j]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 15)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "hostReadLogHisto");
        else {
          uint64_t v26 = v438;
        }
        if ((_DWORD)v26)
        {
          for (uint64_t k = 0LL; k != v26; ++k)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", k, v15[k]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 17
        || (v432 & 1) != 0 && v14 == 18
        || (v432 & 1) != 0 && v14 == 19
        || (v432 & 1) != 0 && v14 == 916
        || (v432 & 1) != 0 && v14 == 917
        || (v432 & 1) != 0 && v14 == 1024
        || (v432 & 1) != 0 && v14 == 414
        || (v432 & 1) != 0 && v14 == 22
        || (v432 & 1) != 0 && v14 == 23
        || (v432 & 1) != 0 && v14 == 24
        || (v432 & 1) != 0 && v14 == 404
        || (v432 & 1) != 0 && v14 == 817
        || (v432 & 1) != 0 && v14 == 818
        || (v432 & 1) != 0 && v14 == 819
        || (v432 & 1) != 0 && v14 == 820
        || (v432 & 1) != 0 && v14 == 28
        || (v432 & 1) != 0 && v14 == 30
        || (v432 & 1) != 0 && v14 == 31
        || (v432 & 1) != 0 && v14 == 337
        || (v432 & 1) != 0 && v14 == 34
        || (v432 & 1) != 0 && v14 == 92
        || (v432 & 1) != 0 && v14 == 36
        || (v432 & 1) != 0 && v14 == 37
        || (v432 & 1) != 0 && v14 == 190
        || (v432 & 1) != 0 && v14 == 38
        || (v432 & 1) != 0 && v14 == 39
        || (v432 & 1) != 0 && v14 == 41
        || (v432 & 1) != 0 && v14 == 42
        || (v432 & 1) != 0 && v14 == 43
        || (v432 & 1) != 0 && v14 == 44
        || (v432 & 1) != 0 && v14 == 996
        || (v432 & 1) != 0 && v14 == 997
        || (v432 & 1) != 0 && v14 == 998
        || (v432 & 1) != 0 && v14 == 999
        || (v432 & 1) != 0 && v14 == 45
        || (v432 & 1) != 0 && v14 == 334
        || (v432 & 2) != 0 && v14 == 198
        || (v432 & 2) != 0 && v14 == 46
        || (v432 & 1) != 0 && v14 == 47
        || (v432 & 1) != 0 && v14 == 379
        || (v432 & 1) != 0 && v14 == 48
        || (v432 & 2) != 0 && v14 == 51
        || (v432 & 2) != 0 && v14 == 52
        || (v432 & 2) != 0 && v14 == 53)
      {
        goto LABEL_81;
      }

      if ((v432 & 2) != 0 && v14 == 54)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "ECBins");
        else {
          uint64_t v28 = v438;
        }
        if ((_DWORD)v28)
        {
          for (uint64_t m = 0LL; m != v28; ++m)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", m, v15[m]);
        }

        goto LABEL_82;
      }

      if ((v432 & 2) != 0 && v14 == 55)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "RCBins");
        else {
          uint64_t v30 = v438;
        }
        if ((_DWORD)v30)
        {
          for (uint64_t n = 0LL; n != v30; ++n)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", n, v15[n]);
        }

        goto LABEL_82;
      }

      if ((v432 & 2) != 0 && v14 == 56
        || (v432 & 2) != 0 && v14 == 57
        || (v432 & 2) != 0 && v14 == 58
        || (v432 & 2) != 0 && v14 == 791
        || (v432 & 1) != 0 && v14 == 1189)
      {
        goto LABEL_81;
      }

      if ((v432 & 1) != 0 && v14 == 1190)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "powerDownTime");
        else {
          uint64_t v32 = v438;
        }
        if ((_DWORD)v32)
        {
          for (iuint64_t i = 0LL; ii != v32; ++ii)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", ii, v15[ii]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 1244) {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 90)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "qosPerCmdQ");
        else {
          uint64_t v34 = v438;
        }
        if ((_DWORD)v34)
        {
          for (juint64_t j = 0LL; jj != v34; ++jj)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", jj, v15[jj]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 91)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "maxQosPerCmdQ");
        else {
          uint64_t v36 = v438;
        }
        if ((_DWORD)v36)
        {
          for (kuint64_t k = 0LL; kk != v36; ++kk)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", kk, v15[kk]);
        }

        goto LABEL_82;
      }

      if ((v432 & 2) != 0 && v14 == 59
        || (v432 & 2) != 0 && v14 == 60
        || (v432 & 2) != 0 && v14 == 61
        || (v432 & 2) != 0 && v14 == 62
        || (v432 & 2) != 0 && v14 == 63
        || (v432 & 2) != 0 && v14 == 64
        || (v432 & 2) != 0 && v14 == 65
        || (v432 & 2) != 0 && v14 == 66
        || (v432 & 2) != 0 && v14 == 67
        || (v432 & 2) != 0 && v14 == 68
        || (v432 & 2) != 0 && v14 == 69
        || (v432 & 2) != 0 && v14 == 70
        || (v432 & 2) != 0 && v14 == 109
        || (v432 & 2) != 0 && v14 == 71
        || (v432 & 2) != 0 && v14 == 72
        || (v432 & 1) != 0 && v14 == 73
        || (v432 & 1) != 0 && v14 == 75
        || (v432 & 1) != 0 && v14 == 76
        || (v432 & 1) != 0 && v14 == 77)
      {
        goto LABEL_81;
      }

      if ((v432 & 1) != 0 && v14 == 265)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "readCountHisto");
        else {
          uint64_t v38 = v438;
        }
        if ((_DWORD)v38)
        {
          for (muint64_t m = 0LL; mm != v38; ++mm)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", mm, v15[mm]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 80
        || (v432 & 1) != 0 && v14 == 81
        || (v432 & 1) != 0 && v14 == 82
        || (v432 & 1) != 0 && v14 == 1019
        || (v432 & 2) != 0 && v14 == 85
        || (v432 & 2) != 0 && v14 == 86
        || (v432 & 1) != 0 && v14 == 87)
      {
        goto LABEL_81;
      }

      if ((v432 & 1) != 0 && v14 == 1215)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "hostWritesPerThrottleZone");
        else {
          uint64_t v40 = v438;
        }
        if ((_DWORD)v40)
        {
          for (nuint64_t n = 0LL; nn != v40; ++nn)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", nn, v15[nn]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 93)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "numBandsRefreshedForAgePerTier");
        else {
          uint64_t v42 = v438;
        }
        if ((_DWORD)v42)
        {
          for (uint64_t i1 = 0LL; i1 != v42; ++i1)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i1, v15[i1]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 94)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "bdrDeltaHot");
        else {
          uint64_t v44 = v438;
        }
        if ((_DWORD)v44)
        {
          for (uint64_t i2 = 0LL; i2 != v44; ++i2)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i2, v15[i2]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 112
        || (v432 & 1) != 0 && v14 == 95
        || (v432 & 1) != 0 && v14 == 96
        || (v432 & 1) != 0 && v14 == 381
        || (v432 & 1) != 0 && v14 == 130
        || (v432 & 1) != 0 && v14 == 97
        || (v432 & 1) != 0 && v14 == 98
        || (v432 & 4) != 0 && v14 == 106
        || (v432 & 4) != 0 && v14 == 100
        || (v432 & 4) != 0 && v14 == 101
        || (v432 & 4) != 0 && v14 == 102
        || (v432 & 4) != 0 && v14 == 103
        || (v432 & 4) != 0 && v14 == 104
        || (v432 & 4) != 0 && v14 == 105
        || (v432 & 2) != 0 && v14 == 110)
      {
        goto LABEL_81;
      }

      if ((v432 & 1) != 0 && v14 == 113)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "bandsPerHostFlow");
        else {
          uint64_t v46 = v438;
        }
        if ((_DWORD)v46)
        {
          for (uint64_t i3 = 0LL; i3 != v46; ++i3)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i3, v15[i3]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 114)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "bandsPerSpecialFlow");
        else {
          uint64_t v48 = v438;
        }
        if ((_DWORD)v48)
        {
          for (uint64_t i4 = 0LL; i4 != v48; ++i4)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i4, v15[i4]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 115)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "secsPerHostFlow");
        else {
          uint64_t v50 = v438;
        }
        if ((_DWORD)v50)
        {
          for (uint64_t i5 = 0LL; i5 != v50; ++i5)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i5, v15[i5]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 116)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "secsPerSpecialFlow");
        else {
          uint64_t v52 = v438;
        }
        if ((_DWORD)v52)
        {
          for (uint64_t i6 = 0LL; i6 != v52; ++i6)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i6, v15[i6]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 118)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "overWritesPerHostFlow");
        else {
          uint64_t v54 = v438;
        }
        if ((_DWORD)v54)
        {
          for (uint64_t i7 = 0LL; i7 != v54; ++i7)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i7, v15[i7]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 119)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "overWritesPerSpecialFlow");
        else {
          uint64_t v56 = v438;
        }
        if ((_DWORD)v56)
        {
          for (uint64_t i8 = 0LL; i8 != v56; ++i8)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i8, v15[i8]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 120)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "padSectorsPerFlow");
        else {
          uint64_t v58 = v438;
        }
        if ((_DWORD)v58)
        {
          for (uint64_t i9 = 0LL; i9 != v58; ++i9)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i9, v15[i9]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 121)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "padSizes");
        else {
          uint64_t v60 = v438;
        }
        if ((_DWORD)v60)
        {
          for (uint64_t i10 = 0LL; i10 != v60; ++i10)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i10, v15[i10]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 740) {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 122)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "unmapsPerHostFlow");
        else {
          uint64_t v62 = v438;
        }
        if ((_DWORD)v62)
        {
          for (uint64_t i11 = 0LL; i11 != v62; ++i11)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i11, v15[i11]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 123)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "unmapsPerSpecialFlow");
        else {
          uint64_t v64 = v438;
        }
        if ((_DWORD)v64)
        {
          for (uint64_t i12 = 0LL; i12 != v64; ++i12)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i12, v15[i12]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 124)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "coldestCycle");
        else {
          uint64_t v66 = v438;
        }
        if ((_DWORD)v66)
        {
          for (uint64_t i13 = 0LL; i13 != v66; ++i13)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i13, v15[i13]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 503)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "avgCycle");
        else {
          uint64_t v68 = v438;
        }
        if ((_DWORD)v68)
        {
          for (uint64_t i14 = 0LL; i14 != v68; ++i14)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i14, v15[i14]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 125)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "hottestCycle");
        else {
          uint64_t v70 = v438;
        }
        if ((_DWORD)v70)
        {
          for (uint64_t i15 = 0LL; i15 != v70; ++i15)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i15, v15[i15]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 16
        || (v432 & 1) != 0 && v14 == 126
        || (v432 & 1) != 0 && v14 == 139
        || (v432 & 1) != 0 && v14 == 576
        || (v432 & 1) != 0 && v14 == 604
        || (v432 & 1) != 0 && v14 == 721
        || (v432 & 1) != 0 && v14 == 722
        || (v432 & 1) != 0 && v14 == 723
        || (v432 & 1) != 0 && v14 == 724
        || (v432 & 1) != 0 && v14 == 726
        || (v432 & 1) != 0 && v14 == 140
        || (v432 & 1) != 0 && v14 == 346)
      {
        goto LABEL_81;
      }

      if ((v432 & 1) != 0 && v14 == 131)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "errInjCounters");
        else {
          uint64_t v72 = v438;
        }
        if ((_DWORD)v72)
        {
          for (uint64_t i16 = 0LL; i16 != v72; ++i16)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i16, v15[i16]);
        }

        goto LABEL_82;
      }

      if ((v432 & 2) != 0 && v14 == 962
        || (v432 & 1) != 0 && v14 == 132
        || (v432 & 1) != 0 && v14 == 133
        || (v432 & 1) != 0 && v14 == 135
        || (v432 & 1) != 0 && v14 == 388
        || (v432 & 1) != 0 && v14 == 389
        || (v432 & 1) != 0 && v14 == 390
        || (v432 & 1) != 0 && v14 == 391
        || (v432 & 1) != 0 && v14 == 392
        || (v432 & 1) != 0 && v14 == 393
        || (v432 & 1) != 0 && v14 == 394
        || (v432 & 1) != 0 && v14 == 395
        || (v432 & 1) != 0 && v14 == 586
        || (v432 & 1) != 0 && v14 == 587
        || (v432 & 1) != 0 && v14 == 760
        || (v432 & 1) != 0 && v14 == 761
        || (v432 & 1) != 0 && v14 == 762
        || (v432 & 1) != 0 && v14 == 763
        || (v432 & 1) != 0 && v14 == 134
        || (v432 & 1) != 0 && v14 == 400)
      {
        goto LABEL_81;
      }

      if ((v432 & 1) != 0 && v14 == 476)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidSuccessfulRecoLbaRange");
        else {
          uint64_t v74 = v438;
        }
        if ((_DWORD)v74)
        {
          for (uint64_t i17 = 0LL; i17 != v74; ++i17)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i17, v15[i17]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 477)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidFailedRecoLbaRange");
        else {
          uint64_t v76 = v438;
        }
        if ((_DWORD)v76)
        {
          for (uint64_t i18 = 0LL; i18 != v76; ++i18)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i18, v15[i18]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 630)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidSuccessfulRecoEAN");
        else {
          uint64_t v78 = v438;
        }
        if ((_DWORD)v78)
        {
          for (uint64_t i19 = 0LL; i19 != v78; ++i19)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i19, v15[i19]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 631)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidFailedRecoEAN");
        else {
          uint64_t v80 = v438;
        }
        if ((_DWORD)v80)
        {
          for (uint64_t i20 = 0LL; i20 != v80; ++i20)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i20, v15[i20]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 644
        || (v432 & 1) != 0 && v14 == 645
        || (v432 & 1) != 0 && v14 == 646
        || (v432 & 1) != 0 && v14 == 647
        || (v432 & 1) != 0 && v14 == 648
        || (v432 & 1) != 0 && v14 == 649
        || (v432 & 1) != 0 && v14 == 864
        || (v432 & 1) != 0 && v14 == 862
        || (v432 & 1) != 0 && v14 == 863
        || (v432 & 2) != 0 && v14 == 813
        || (v432 & 1) != 0 && v14 == 697
        || (v432 & 1) != 0 && v14 == 698
        || (v432 & 1) != 0 && v14 == 712
        || (v432 & 1) != 0 && v14 == 713
        || (v432 & 1) != 0 && v14 == 737
        || (v432 & 1) != 0 && v14 == 738
        || (v432 & 1) != 0 && v14 == 714
        || (v432 & 1) != 0 && v14 == 715
        || (v432 & 1) != 0 && v14 == 716
        || (v432 & 1) != 0 && v14 == 717
        || (v432 & 1) != 0 && v14 == 829)
      {
        goto LABEL_81;
      }

      if ((v432 & 1) != 0 && v14 == 891)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "turboRaidSuccessAuxPartition");
        else {
          uint64_t v82 = v438;
        }
        if ((_DWORD)v82)
        {
          for (uint64_t i21 = 0LL; i21 != v82; ++i21)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i21, v15[i21]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 892)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "turboRaidFailAuxPartition");
        else {
          uint64_t v84 = v438;
        }
        if ((_DWORD)v84)
        {
          for (uint64_t i22 = 0LL; i22 != v84; ++i22)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i22, v15[i22]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 893)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "turboRaidClassifyQualPartition");
        else {
          uint64_t v86 = v438;
        }
        if ((_DWORD)v86)
        {
          for (uint64_t i23 = 0LL; i23 != v86; ++i23)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i23, v15[i23]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 894)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "turboRaidClassifyRelPartition");
        else {
          uint64_t v88 = v438;
        }
        if ((_DWORD)v88)
        {
          for (uint64_t i24 = 0LL; i24 != v88; ++i24)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i24, v15[i24]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 900
        || (v432 & 1) != 0 && v14 == 901
        || (v432 & 1) != 0 && v14 == 902
        || (v432 & 1) != 0 && v14 == 903
        || (v432 & 1) != 0 && v14 == 904
        || (v432 & 1) != 0 && v14 == 947
        || (v432 & 1) != 0 && v14 == 1133
        || (v432 & 1) != 0 && v14 == 1134
        || (v432 & 1) != 0 && v14 == 1135
        || (v432 & 1) != 0 && v14 == 1136
        || (v432 & 1) != 0 && v14 == 362
        || (v432 & 1) != 0 && v14 == 396
        || (v432 & 1) != 0 && v14 == 398
        || (v432 & 1) != 0 && v14 == 397
        || (v432 & 1) != 0 && v14 == 399
        || (v432 & 1) != 0 && v14 == 405
        || (v432 & 1) != 0 && v14 == 403
        || (v432 & 1) != 0 && v14 == 573
        || (v432 & 1) != 0 && v14 == 197
        || (v432 & 1) != 0 && v14 == 136
        || (v432 & 1) != 0 && v14 == 137
        || (v432 & 1) != 0 && v14 == 444
        || (v432 & 1) != 0 && v14 == 445
        || (v432 & 1) != 0 && v14 == 964
        || (v432 & 1) != 0 && v14 == 965
        || (v432 & 1) != 0 && v14 == 440
        || (v432 & 1) != 0 && v14 == 960
        || (v432 & 1) != 0 && v14 == 441
        || (v432 & 1) != 0 && v14 == 442
        || (v432 & 1) != 0 && v14 == 443
        || (v432 & 1) != 0 && v14 == 382
        || (v432 & 1) != 0 && v14 == 659
        || (v432 & 1) != 0 && v14 == 172
        || (v432 & 1) != 0 && v14 == 416
        || (v432 & 1) != 0 && v14 == 417)
      {
        goto LABEL_81;
      }

      if ((v432 & 1) != 0 && v14 == 406)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidReconstructSuccessFlow");
        else {
          uint64_t v90 = v438;
        }
        if ((_DWORD)v90)
        {
          for (uint64_t i25 = 0LL; i25 != v90; ++i25)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i25, v15[i25]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 407)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidReconstructFailFlow");
        else {
          uint64_t v92 = v438;
        }
        if ((_DWORD)v92)
        {
          for (uint64_t i26 = 0LL; i26 != v92; ++i26)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i26, v15[i26]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 472
        || (v432 & 1) != 0 && v14 == 473
        || (v432 & 1) != 0 && v14 == 639
        || (v432 & 1) != 0 && v14 == 640)
      {
        goto LABEL_81;
      }

      if ((v432 & 1) != 0 && v14 == 469)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidReconstructSuccessPartition");
        else {
          uint64_t v94 = v438;
        }
        if ((_DWORD)v94)
        {
          for (uint64_t i27 = 0LL; i27 != v94; ++i27)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i27, v15[i27]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 470)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidReconstructFailPartition");
        else {
          uint64_t v96 = v438;
        }
        if ((_DWORD)v96)
        {
          for (uint64_t i28 = 0LL; i28 != v96; ++i28)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i28, v15[i28]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 408
        || (v432 & 1) != 0 && v14 == 409
        || (v432 & 1) != 0 && v14 == 786
        || (v432 & 1) != 0 && v14 == 787
        || (v432 & 1) != 0 && v14 == 410
        || (v432 & 1) != 0 && v14 == 788
        || (v432 & 1) != 0 && v14 == 411
        || (v432 & 1) != 0 && v14 == 510
        || (v432 & 1) != 0 && v14 == 566
        || (v432 & 1) != 0 && v14 == 567
        || (v432 & 1) != 0 && v14 == 570
        || (v432 & 1) != 0 && v14 == 574
        || (v432 & 1) != 0 && v14 == 789
        || (v432 & 1) != 0 && v14 == 681
        || (v432 & 1) != 0 && v14 == 682
        || (v432 & 1) != 0 && v14 == 711
        || (v432 & 1) != 0 && v14 == 790
        || (v432 & 1) != 0 && v14 == 774
        || (v432 & 1) != 0 && v14 == 412
        || (v432 & 1) != 0 && v14 == 471
        || (v432 & 1) != 0 && v14 == 641)
      {
        goto LABEL_81;
      }

      if ((v432 & 1) != 0 && v14 == 798)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailP");
        else {
          uint64_t v98 = v438;
        }
        if ((_DWORD)v98)
        {
          for (uint64_t i29 = 0LL; i29 != v98; ++i29)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i29, v15[i29]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 799)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailUECC");
        else {
          uint64_t v100 = v438;
        }
        if ((_DWORD)v100)
        {
          for (uint64_t i30 = 0LL; i30 != v100; ++i30)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i30, v15[i30]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 804)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailNoSPBX");
        else {
          uint64_t v102 = v438;
        }
        if ((_DWORD)v102)
        {
          for (uint64_t i31 = 0LL; i31 != v102; ++i31)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i31, v15[i31]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 806)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailBlank");
        else {
          uint64_t v104 = v438;
        }
        if ((_DWORD)v104)
        {
          for (uint64_t i32 = 0LL; i32 != v104; ++i32)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i32, v15[i32]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 809)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailUnsup");
        else {
          uint64_t v106 = v438;
        }
        if ((_DWORD)v106)
        {
          for (uint64_t i33 = 0LL; i33 != v106; ++i33)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i33, v15[i33]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 811)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailMpSkip");
        else {
          uint64_t v108 = v438;
        }
        if ((_DWORD)v108)
        {
          for (uint64_t i34 = 0LL; i34 != v108; ++i34)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i34, v15[i34]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 812)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailAbort");
        else {
          uint64_t v110 = v438;
        }
        if ((_DWORD)v110)
        {
          for (uint64_t i35 = 0LL; i35 != v110; ++i35)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i35, v15[i35]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 814)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailOther");
        else {
          uint64_t v112 = v438;
        }
        if ((_DWORD)v112)
        {
          for (uint64_t i36 = 0LL; i36 != v112; ++i36)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i36, v15[i36]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 815)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXSuccess");
        else {
          uint64_t v114 = v438;
        }
        if ((_DWORD)v114)
        {
          for (uint64_t i37 = 0LL; i37 != v114; ++i37)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i37, v15[i37]);
        }

        goto LABEL_82;
      }

      if ((v432 & 1) != 0 && v14 == 184)
      {
        v116 = "TempSensorMax";
      }

      else
      {
        if ((v432 & 1) == 0 || v14 != 185)
        {
          if ((v432 & 1) != 0 && v14 == 182
            || (v432 & 1) != 0 && v14 == 353
            || (v432 & 1) != 0 && v14 == 609
            || (v432 & 1) != 0 && v14 == 596
            || (v432 & 1) != 0 && v14 == 597
            || (v432 & 1) != 0 && v14 == 152
            || (v432 & 1) != 0 && v14 == 153
            || (v432 & 1) != 0 && v14 == 154
            || (v432 & 1) != 0 && v14 == 384
            || (v432 & 1) != 0 && v14 == 386
            || (v432 & 1) != 0 && v14 == 657
            || (v432 & 1) != 0 && v14 == 387
            || (v432 & 1) != 0 && v14 == 420
            || (v432 & 1) != 0 && v14 == 438
            || (v432 & 1) != 0 && v14 == 155
            || (v432 & 1) != 0 && v14 == 156
            || (v432 & 1) != 0 && v14 == 158
            || (v432 & 1) != 0 && v14 == 159
            || (v432 & 1) != 0 && v14 == 539
            || (v432 & 1) != 0 && v14 == 540
            || (v432 & 2) != 0 && v14 == 160
            || (v432 & 2) != 0 && v14 == 161
            || (v432 & 2) != 0 && v14 == 163
            || (v432 & 2) != 0 && v14 == 164
            || (v432 & 2) != 0 && v14 == 165
            || (v432 & 1) != 0 && v14 == 141
            || (v432 & 1) != 0 && v14 == 142
            || (v432 & 1) != 0 && v14 == 143
            || (v432 & 1) != 0 && v14 == 144
            || (v432 & 1) != 0 && v14 == 145
            || (v432 & 1) != 0 && v14 == 146
            || (v432 & 1) != 0 && v14 == 187
            || (v432 & 1) != 0 && v14 == 188
            || (v432 & 1) != 0 && v14 == 189
            || (v432 & 1) != 0 && v14 == 147
            || (v432 & 1) != 0 && v14 == 148
            || (v432 & 1) != 0 && v14 == 149
            || (v432 & 1) != 0 && v14 == 183
            || (v432 & 1) != 0 && v14 == 204
            || (v432 & 1) != 0 && v14 == 205
            || (v432 & 1) != 0 && v14 == 206
            || (v432 & 2) != 0 && v14 == 248
            || (v432 & 2) != 0 && v14 == 199
            || (v432 & 1) != 0 && v14 == 200
            || (v432 & 1) != 0 && v14 == 201
            || (v432 & 2) != 0 && v14 == 203)
          {
            goto LABEL_81;
          }

          if ((v432 & 1) != 0 && v14 == 207)
          {
            uint64_t result = fprintf(v8, "%20s:\n", "numOfThrottlingEntriesPerLevel");
            else {
              uint64_t v117 = v438;
            }
            if ((_DWORD)v117)
            {
              for (uint64_t i38 = 0LL; i38 != v117; ++i38)
                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i38, v15[i38]);
            }
          }

          else if ((v432 & 1) != 0 && v14 == 865)
          {
            uint64_t result = fprintf(v8, "%20s:\n", "timeOfThrottlingPerLevel");
            else {
              uint64_t v119 = v438;
            }
            if ((_DWORD)v119)
            {
              for (uint64_t i39 = 0LL; i39 != v119; ++i39)
                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i39, v15[i39]);
            }
          }

          else if ((v432 & 2) != 0 && v14 == 453)
          {
            uint64_t result = fprintf(v8, "%20s:\n", "numOfThrottlingEntriesPerReadLevel");
            else {
              uint64_t v121 = v438;
            }
            if ((_DWORD)v121)
            {
              for (uint64_t i40 = 0LL; i40 != v121; ++i40)
                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i40, v15[i40]);
            }
          }

          else if ((v432 & 2) != 0 && v14 == 866)
          {
            uint64_t result = fprintf(v8, "%20s:\n", "timeOfThrottlingPerReadLevel");
            else {
              uint64_t v123 = v438;
            }
            if ((_DWORD)v123)
            {
              for (uint64_t i41 = 0LL; i41 != v123; ++i41)
                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i41, v15[i41]);
            }
          }

          else if ((v432 & 2) != 0 && v14 == 454)
          {
            uint64_t result = fprintf(v8, "%20s:\n", "numOfThrottlingEntriesPerWriteLevel");
            else {
              uint64_t v125 = v438;
            }
            if ((_DWORD)v125)
            {
              for (uint64_t i42 = 0LL; i42 != v125; ++i42)
                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i42, v15[i42]);
            }
          }

          else if ((v432 & 2) != 0 && v14 == 867)
          {
            uint64_t result = fprintf(v8, "%20s:\n", "timeOfThrottlingPerWriteLevel");
            else {
              uint64_t v127 = v438;
            }
            if ((_DWORD)v127)
            {
              for (uint64_t i43 = 0LL; i43 != v127; ++i43)
                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i43, v15[i43]);
            }
          }

          else if ((v432 & 1) != 0 && v14 == 213)
          {
            uint64_t result = fprintf(v8, "%20s:\n", "crcInternalReadFail");
            else {
              uint64_t v129 = v438;
            }
            if ((_DWORD)v129)
            {
              for (uint64_t i44 = 0LL; i44 != v129; ++i44)
                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i44, v15[i44]);
            }
          }

          else
          {
            if ((v432 & 1) != 0 && v14 == 217
              || (v432 & 1) != 0 && v14 == 1067
              || (v432 & 1) != 0 && v14 == 221
              || (v432 & 1) != 0 && v14 == 222
              || (v432 & 1) != 0 && v14 == 1221
              || (v432 & 1) != 0 && v14 == 223
              || (v432 & 1) != 0 && v14 == 224
              || (v432 & 1) != 0 && v14 == 1222
              || (v432 & 1) != 0 && v14 == 494)
            {
              goto LABEL_81;
            }

            if ((v432 & 1) != 0 && v14 == 1223)
            {
              uint64_t result = fprintf(v8, "%20s:\n", "RD_closedBlocksTHHist");
              else {
                uint64_t v131 = v438;
              }
              if ((_DWORD)v131)
              {
                for (uint64_t i45 = 0LL; i45 != v131; ++i45)
                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i45, v15[i45]);
              }
            }

            else if ((v432 & 1) != 0 && v14 == 229)
            {
              uint64_t result = fprintf(v8, "%20s:\n", "indmbXferCountTo");
              else {
                uint64_t v133 = v438;
              }
              if ((_DWORD)v133)
              {
                for (uint64_t i46 = 0LL; i46 != v133; ++i46)
                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i46, v15[i46]);
              }
            }

            else if ((v432 & 1) != 0 && v14 == 230)
            {
              uint64_t result = fprintf(v8, "%20s:\n", "indmbAccumulatedTimeBetweenXfers");
              else {
                uint64_t v135 = v438;
              }
              if ((_DWORD)v135)
              {
                for (uint64_t i47 = 0LL; i47 != v135; ++i47)
                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i47, v15[i47]);
              }
            }

            else
            {
              if ((v432 & 1) != 0 && v14 == 231
                || (v432 & 1) != 0 && v14 == 232
                || (v432 & 1) != 0 && v14 == 233
                || (v432 & 1) != 0 && v14 == 234)
              {
                goto LABEL_81;
              }

              if ((v432 & 1) != 0 && v14 == 235)
              {
                uint64_t result = fprintf(v8, "%20s:\n", "gracefulBootTimeLogMs");
                else {
                  uint64_t v137 = v438;
                }
                if ((_DWORD)v137)
                {
                  for (uint64_t i48 = 0LL; i48 != v137; ++i48)
                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i48, v15[i48]);
                }
              }

              else if ((v432 & 1) != 0 && v14 == 236)
              {
                uint64_t result = fprintf(v8, "%20s:\n", "ungracefulBootTimeLogMs");
                else {
                  uint64_t v139 = v438;
                }
                if ((_DWORD)v139)
                {
                  for (uint64_t i49 = 0LL; i49 != v139; ++i49)
                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i49, v15[i49]);
                }
              }

              else
              {
                if ((v432 & 1) != 0 && v14 == 245
                  || (v432 & 1) != 0 && v14 == 246
                  || (v432 & 1) != 0 && v14 == 247
                  || (v432 & 1) != 0 && v14 == 254)
                {
                  goto LABEL_81;
                }

                if ((v432 & 1) != 0 && v14 == 266)
                {
                  uint64_t result = fprintf(v8, "%20s:\n", "readAmpHisto");
                  else {
                    uint64_t v141 = v438;
                  }
                  if ((_DWORD)v141)
                  {
                    for (uint64_t i50 = 0LL; i50 != v141; ++i50)
                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i50, v15[i50]);
                  }
                }

                else
                {
                  if ((v432 & 1) != 0 && v14 == 267) {
                    goto LABEL_81;
                  }
                  if ((v432 & 1) != 0 && v14 == 269)
                  {
                    uint64_t result = fprintf(v8, "%20s:\n", "numBootBlockRefreshSuccess");
                    else {
                      uint64_t v143 = v438;
                    }
                    if ((_DWORD)v143)
                    {
                      for (uint64_t i51 = 0LL; i51 != v143; ++i51)
                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i51, v15[i51]);
                    }
                  }

                  else if ((v432 & 1) != 0 && v14 == 270)
                  {
                    uint64_t result = fprintf(v8, "%20s:\n", "numBootBlockRefreshFail");
                    else {
                      uint64_t v145 = v438;
                    }
                    if ((_DWORD)v145)
                    {
                      for (uint64_t i52 = 0LL; i52 != v145; ++i52)
                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i52, v15[i52]);
                    }
                  }

                  else
                  {
                    if ((v432 & 1) != 0 && v14 == 322
                      || (v432 & 1) != 0 && v14 == 323
                      || (v432 & 1) != 0 && v14 == 271
                      || (v432 & 1) != 0 && v14 == 272
                      || (v432 & 1) != 0 && v14 == 274)
                    {
                      goto LABEL_81;
                    }

                    if ((v432 & 1) != 0 && v14 == 277)
                    {
                      uint64_t result = fprintf(v8, "%20s:\n", "powerBudgetSelect");
                      else {
                        uint64_t v147 = v438;
                      }
                      if ((_DWORD)v147)
                      {
                        for (uint64_t i53 = 0LL; i53 != v147; ++i53)
                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i53, v15[i53]);
                      }
                    }

                    else
                    {
                      if ((v432 & 1) != 0 && v14 == 279) {
                        goto LABEL_81;
                      }
                      if ((v432 & 1) != 0 && v14 == 280)
                      {
                        uint64_t result = fprintf(v8, "%20s:\n", "E2EDPErrorCounters");
                        else {
                          uint64_t v149 = v438;
                        }
                        if ((_DWORD)v149)
                        {
                          for (uint64_t i54 = 0LL; i54 != v149; ++i54)
                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i54, v15[i54]);
                        }
                      }

                      else
                      {
                        if ((v432 & 2) != 0 && v14 == 281
                          || (v432 & 2) != 0 && v14 == 282
                          || (v432 & 2) != 0 && v14 == 283
                          || (v432 & 2) != 0 && v14 == 284
                          || (v432 & 2) != 0 && v14 == 285
                          || (v432 & 2) != 0 && v14 == 286
                          || (v432 & 1) != 0 && v14 == 288)
                        {
                          goto LABEL_81;
                        }

                        if ((v432 & 1) != 0 && v14 == 289)
                        {
                          uint64_t result = fprintf(v8, "%20s:\n", "mspBootBlockReadFail");
                          else {
                            uint64_t v151 = v438;
                          }
                          if ((_DWORD)v151)
                          {
                            for (uint64_t i55 = 0LL; i55 != v151; ++i55)
                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i55, v15[i55]);
                          }
                        }

                        else if ((v432 & 1) != 0 && v14 == 290)
                        {
                          uint64_t result = fprintf(v8, "%20s:\n", "mspBootBlockProgFail");
                          else {
                            uint64_t v153 = v438;
                          }
                          if ((_DWORD)v153)
                          {
                            for (uint64_t i56 = 0LL; i56 != v153; ++i56)
                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i56, v15[i56]);
                          }
                        }

                        else if ((v432 & 1) != 0 && v14 == 291)
                        {
                          uint64_t result = fprintf(v8, "%20s:\n", "mspBootBlockEraseFail");
                          else {
                            uint64_t v155 = v438;
                          }
                          if ((_DWORD)v155)
                          {
                            for (uint64_t i57 = 0LL; i57 != v155; ++i57)
                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i57, v15[i57]);
                          }
                        }

                        else if ((v432 & 2) != 0 && v14 == 511)
                        {
                          uint64_t result = fprintf(v8, "%20s:\n", "mspbootBlockRefreshCnt");
                          else {
                            uint64_t v157 = v438;
                          }
                          if ((_DWORD)v157)
                          {
                            for (uint64_t i58 = 0LL; i58 != v157; ++i58)
                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i58, v15[i58]);
                          }
                        }

                        else if ((v432 & 2) != 0 && v14 == 516)
                        {
                          uint64_t result = fprintf(v8, "%20s:\n", "mspBootBlockRefreshTime");
                          else {
                            uint64_t v159 = v438;
                          }
                          if ((_DWORD)v159)
                          {
                            for (uint64_t i59 = 0LL; i59 != v159; ++i59)
                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i59, v15[i59]);
                          }
                        }

                        else
                        {
                          if ((v432 & 2) != 0 && v14 == 517
                            || (v432 & 2) != 0 && v14 == 777
                            || (v432 & 1) != 0 && v14 == 292)
                          {
                            goto LABEL_81;
                          }

                          if ((v432 & 1) != 0 && v14 == 298)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "perHostReads");
                            else {
                              uint64_t v161 = v438;
                            }
                            if ((_DWORD)v161)
                            {
                              for (uint64_t i60 = 0LL; i60 != v161; ++i60)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i60, v15[i60]);
                            }
                          }

                          else if ((v432 & 1) != 0 && v14 == 299)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "perHostReadXacts");
                            else {
                              uint64_t v163 = v438;
                            }
                            if ((_DWORD)v163)
                            {
                              for (uint64_t i61 = 0LL; i61 != v163; ++i61)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i61, v15[i61]);
                            }
                          }

                          else if ((v432 & 1) != 0 && v14 == 300)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "perHostWrites");
                            else {
                              uint64_t v165 = v438;
                            }
                            if ((_DWORD)v165)
                            {
                              for (uint64_t i62 = 0LL; i62 != v165; ++i62)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i62, v15[i62]);
                            }
                          }

                          else if ((v432 & 1) != 0 && v14 == 301)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "perHostWriteXacts");
                            else {
                              uint64_t v167 = v438;
                            }
                            if ((_DWORD)v167)
                            {
                              for (uint64_t i63 = 0LL; i63 != v167; ++i63)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i63, v15[i63]);
                            }
                          }

                          else if ((v432 & 1) != 0 && v14 == 302)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "perHostNumFlushes");
                            else {
                              uint64_t v169 = v438;
                            }
                            if ((_DWORD)v169)
                            {
                              for (uint64_t i64 = 0LL; i64 != v169; ++i64)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i64, v15[i64]);
                            }
                          }

                          else if ((v432 & 1) != 0 && v14 == 303)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "perHostNumFences");
                            else {
                              uint64_t v171 = v438;
                            }
                            if ((_DWORD)v171)
                            {
                              for (uint64_t i65 = 0LL; i65 != v171; ++i65)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i65, v15[i65]);
                            }
                          }

                          else if ((v432 & 1) != 0 && v14 == 304)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "commitPadSectorsPerFlow");
                            else {
                              uint64_t v173 = v438;
                            }
                            if ((_DWORD)v173)
                            {
                              for (uint64_t i66 = 0LL; i66 != v173; ++i66)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i66, v15[i66]);
                            }
                          }

                          else if ((v432 & 1) != 0 && v14 == 305)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "wcacheDSOverWrLogSizeCnts");
                            else {
                              uint64_t v175 = v438;
                            }
                            if ((_DWORD)v175)
                            {
                              for (uint64_t i67 = 0LL; i67 != v175; ++i67)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i67, v15[i67]);
                            }
                          }

                          else if ((v432 & 1) != 0 && v14 == 306)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "wcacheDSOverWrSizeByFlow");
                            else {
                              uint64_t v177 = v438;
                            }
                            if ((_DWORD)v177)
                            {
                              for (uint64_t i68 = 0LL; i68 != v177; ++i68)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i68, v15[i68]);
                            }
                          }

                          else if ((v432 & 1) != 0 && v14 == 307)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "CmdRaisePrioiryEvents");
                            else {
                              uint64_t v179 = v438;
                            }
                            if ((_DWORD)v179)
                            {
                              for (uint64_t i69 = 0LL; i69 != v179; ++i69)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i69, v15[i69]);
                            }
                          }

                          else
                          {
                            if ((v432 & 1) != 0 && v14 == 308
                              || (v432 & 1) != 0 && v14 == 309
                              || (v432 & 1) != 0 && v14 == 310
                              || (v432 & 1) != 0 && v14 == 347)
                            {
                              goto LABEL_81;
                            }

                            if ((v432 & 1) != 0 && v14 == 314)
                            {
                              uint64_t result = fprintf(v8, "%20s:\n", "numBootBlockValidateSuccess");
                              else {
                                uint64_t v181 = v438;
                              }
                              if ((_DWORD)v181)
                              {
                                for (uint64_t i70 = 0LL; i70 != v181; ++i70)
                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i70, v15[i70]);
                              }
                            }

                            else if ((v432 & 1) != 0 && v14 == 315)
                            {
                              uint64_t result = fprintf(v8, "%20s:\n", "numBootBlockValidateFail");
                              else {
                                uint64_t v183 = v438;
                              }
                              if ((_DWORD)v183)
                              {
                                for (uint64_t i71 = 0LL; i71 != v183; ++i71)
                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i71, v15[i71]);
                              }
                            }

                            else if ((v432 & 1) != 0 && v14 == 316)
                            {
                              uint64_t result = fprintf(v8, "%20s:\n", "clogPagesFillingPercentage");
                              else {
                                uint64_t v185 = v438;
                              }
                              if ((_DWORD)v185)
                              {
                                for (uint64_t i72 = 0LL; i72 != v185; ++i72)
                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i72, v15[i72]);
                              }
                            }

                            else
                            {
                              if ((v432 & 2) != 0 && v14 == 317
                                || (v432 & 2) != 0 && v14 == 643
                                || (v432 & 1) != 0 && v14 == 336
                                || (v432 & 1) != 0 && v14 == 318
                                || (v432 & 1) != 0 && v14 == 319
                                || (v432 & 1) != 0 && v14 == 320
                                || (v432 & 1) != 0 && v14 == 321)
                              {
                                goto LABEL_81;
                              }

                              if ((v432 & 1) != 0 && v14 == 324)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bitflipAddr");
                                else {
                                  uint64_t v187 = v438;
                                }
                                if ((_DWORD)v187)
                                {
                                  for (uint64_t i73 = 0LL; i73 != v187; ++i73)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i73, v15[i73]);
                                }
                              }

                              else if ((v432 & 1) != 0 && v14 == 325)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bitflipCount");
                                else {
                                  uint64_t v189 = v438;
                                }
                                if ((_DWORD)v189)
                                {
                                  for (uint64_t i74 = 0LL; i74 != v189; ++i74)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i74, v15[i74]);
                                }
                              }

                              else if ((v432 & 1) != 0 && v14 == 326)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bitflipDupes");
                                else {
                                  uint64_t v191 = v438;
                                }
                                if ((_DWORD)v191)
                                {
                                  for (uint64_t i75 = 0LL; i75 != v191; ++i75)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i75, v15[i75]);
                                }
                              }

                              else if ((v432 & 1) != 0 && v14 == 327)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bandsMaxTempHisto");
                                else {
                                  uint64_t v193 = v438;
                                }
                                if ((_DWORD)v193)
                                {
                                  for (uint64_t i76 = 0LL; i76 != v193; ++i76)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i76, v15[i76]);
                                }
                              }

                              else if ((v432 & 1) != 0 && v14 == 328)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bandsMinTempHisto");
                                else {
                                  uint64_t v195 = v438;
                                }
                                if ((_DWORD)v195)
                                {
                                  for (uint64_t i77 = 0LL; i77 != v195; ++i77)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i77, v15[i77]);
                                }
                              }

                              else if ((v432 & 1) != 0 && v14 == 329)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bandsLifeTimeTempHisto");
                                else {
                                  uint64_t v197 = v438;
                                }
                                if ((_DWORD)v197)
                                {
                                  for (uint64_t i78 = 0LL; i78 != v197; ++i78)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i78, v15[i78]);
                                }
                              }

                              else if ((v432 & 1) != 0 && v14 == 330)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bandsDeltaTempHisto");
                                else {
                                  uint64_t v199 = v438;
                                }
                                if ((_DWORD)v199)
                                {
                                  for (uint64_t i79 = 0LL; i79 != v199; ++i79)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i79, v15[i79]);
                                }
                              }

                              else if ((v432 & 1) != 0 && v14 == 331)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bandsCrossTempHisto");
                                else {
                                  uint64_t v201 = v438;
                                }
                                if ((_DWORD)v201)
                                {
                                  for (uint64_t i80 = 0LL; i80 != v201; ++i80)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i80, v15[i80]);
                                }
                              }

                              else if ((v432 & 1) != 0 && v14 == 1031)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bandsUeccTempHisto");
                                else {
                                  uint64_t v203 = v438;
                                }
                                if ((_DWORD)v203)
                                {
                                  for (uint64_t i81 = 0LL; i81 != v203; ++i81)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i81, v15[i81]);
                                }
                              }

                              else if ((v432 & 1) != 0 && v14 == 1246)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bandsUeccCrossTempHisto");
                                else {
                                  uint64_t v205 = v438;
                                }
                                if ((_DWORD)v205)
                                {
                                  for (uint64_t i82 = 0LL; i82 != v205; ++i82)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i82, v15[i82]);
                                }
                              }

                              else
                              {
                                if ((v432 & 2) != 0 && v14 == 603) {
                                  goto LABEL_81;
                                }
                                if ((v432 & 1) != 0 && v14 == 332)
                                {
                                  uint64_t result = fprintf(v8, "%20s:\n", "wcacheWaitLogMs");
                                  else {
                                    uint64_t v207 = v438;
                                  }
                                  if ((_DWORD)v207)
                                  {
                                    for (uint64_t i83 = 0LL; i83 != v207; ++i83)
                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i83, v15[i83]);
                                  }
                                }

                                else if ((v432 & 1) != 0 && v14 == 333)
                                {
                                  uint64_t result = fprintf(v8, "%20s:\n", "wcacheDS_segsSortedLogSize");
                                  else {
                                    uint64_t v209 = v438;
                                  }
                                  if ((_DWORD)v209)
                                  {
                                    for (uint64_t i84 = 0LL; i84 != v209; ++i84)
                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i84, v15[i84]);
                                  }
                                }

                                else if ((v432 & 1) != 0 && v14 == 468)
                                {
                                  uint64_t result = fprintf(v8, "%20s:\n", "wcacheDirtyAtFlush");
                                  else {
                                    uint64_t v211 = v438;
                                  }
                                  if ((_DWORD)v211)
                                  {
                                    for (uint64_t i85 = 0LL; i85 != v211; ++i85)
                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i85, v15[i85]);
                                  }
                                }

                                else
                                {
                                  if ((v432 & 2) != 0 && v14 == 457
                                    || (v432 & 2) != 0 && v14 == 458
                                    || (v432 & 1) != 0 && v14 == 340
                                    || (v432 & 1) != 0 && v14 == 953
                                    || (v432 & 1) != 0 && v14 == 343
                                    || (v432 & 1) != 0 && v14 == 344
                                    || (v432 & 1) != 0 && v14 == 349
                                    || (v432 & 1) != 0 && v14 == 350
                                    || (v432 & 1) != 0 && v14 == 351
                                    || (v432 & 1) != 0 && v14 == 352
                                    || (v432 & 1) != 0 && v14 == 356
                                    || (v432 & 1) != 0 && v14 == 358
                                    || (v432 & 1) != 0 && v14 == 368
                                    || (v432 & 1) != 0 && v14 == 369
                                    || (v432 & 1) != 0 && v14 == 370
                                    || (v432 & 1) != 0 && v14 == 371
                                    || (v432 & 1) != 0 && v14 == 372
                                    || (v432 & 1) != 0 && v14 == 374
                                    || (v432 & 1) != 0 && v14 == 375
                                    || (v432 & 1) != 0 && v14 == 385
                                    || (v432 & 1) != 0 && v14 == 401
                                    || (v432 & 1) != 0 && v14 == 837
                                    || (v432 & 2) != 0 && v14 == 419
                                    || (v432 & 1) != 0 && v14 == 422
                                    || (v432 & 1) != 0 && v14 == 423
                                    || (v432 & 1) != 0 && v14 == 424
                                    || (v432 & 1) != 0 && v14 == 425
                                    || (v432 & 1) != 0 && v14 == 427
                                    || (v432 & 1) != 0 && v14 == 461
                                    || (v432 & 1) != 0 && v14 == 485
                                    || (v432 & 1) != 0 && v14 == 462
                                    || (v432 & 1) != 0 && v14 == 784)
                                  {
                                    goto LABEL_81;
                                  }

                                  if ((v432 & 1) != 0 && v14 == 463)
                                  {
                                    uint64_t result = fprintf(v8, "%20s:\n", "balanceProportionBucketsHistogram");
                                    else {
                                      uint64_t v213 = v438;
                                    }
                                    if ((_DWORD)v213)
                                    {
                                      for (uint64_t i86 = 0LL; i86 != v213; ++i86)
                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i86, v15[i86]);
                                    }
                                  }

                                  else if ((v432 & 1) != 0 && v14 == 551)
                                  {
                                    uint64_t result = fprintf(v8, "%20s:\n", "balanceProportionBucketsHistogramTlc");
                                    else {
                                      uint64_t v215 = v438;
                                    }
                                    if ((_DWORD)v215)
                                    {
                                      for (uint64_t i87 = 0LL; i87 != v215; ++i87)
                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i87, v15[i87]);
                                    }
                                  }

                                  else
                                  {
                                    if ((v432 & 1) != 0 && v14 == 464) {
                                      goto LABEL_81;
                                    }
                                    if ((v432 & 1) != 0 && v14 == 465)
                                    {
                                      uint64_t result = fprintf(v8, "%20s:\n", "burstSizeHistogram");
                                      else {
                                        uint64_t v217 = v438;
                                      }
                                      if ((_DWORD)v217)
                                      {
                                        for (uint64_t i88 = 0LL; i88 != v217; ++i88)
                                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i88, v15[i88]);
                                      }
                                    }

                                    else if ((v432 & 1) != 0 && v14 == 913)
                                    {
                                      uint64_t result = fprintf(v8, "%20s:\n", "fwaHistogram");
                                      else {
                                        uint64_t v219 = v438;
                                      }
                                      if ((_DWORD)v219)
                                      {
                                        for (uint64_t i89 = 0LL; i89 != v219; ++i89)
                                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i89, v15[i89]);
                                      }
                                    }

                                    else
                                    {
                                      if ((v432 & 1) != 0 && v14 == 483
                                        || (v432 & 2) != 0 && v14 == 428
                                        || (v432 & 1) != 0 && v14 == 429
                                        || (v432 & 1) != 0 && v14 == 430
                                        || (v432 & 1) != 0 && v14 == 431
                                        || (v432 & 1) != 0 && v14 == 432
                                        || (v432 & 1) != 0 && v14 == 433
                                        || (v432 & 1) != 0 && v14 == 434
                                        || (v432 & 1) != 0 && v14 == 435
                                        || (v432 & 1) != 0 && v14 == 436
                                        || (v432 & 1) != 0 && v14 == 437
                                        || (v432 & 1) != 0 && v14 == 447
                                        || (v432 & 1) != 0 && v14 == 448
                                        || (v432 & 1) != 0 && v14 == 449
                                        || (v432 & 1) != 0 && v14 == 488
                                        || (v432 & 1) != 0 && v14 == 486
                                        || (v432 & 1) != 0 && v14 == 450)
                                      {
                                        goto LABEL_81;
                                      }

                                      if ((v432 & 1) != 0 && v14 == 460)
                                      {
                                        uint64_t result = fprintf(v8, "%20s:\n", "CacheDepthVsThroughput");
                                        else {
                                          uint64_t v221 = v438;
                                        }
                                        if ((_DWORD)v221)
                                        {
                                          for (uint64_t i90 = 0LL; i90 != v221; ++i90)
                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i90, v15[i90]);
                                        }
                                      }

                                      else if ((v432 & 1) != 0 && v14 == 466)
                                      {
                                        uint64_t result = fprintf(v8, "%20s:\n", "qosDirectToTLC");
                                        else {
                                          uint64_t v223 = v438;
                                        }
                                        if ((_DWORD)v223)
                                        {
                                          for (uint64_t i91 = 0LL; i91 != v223; ++i91)
                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i91, v15[i91]);
                                        }
                                      }

                                      else if ((v432 & 1) != 0 && v14 == 467)
                                      {
                                        uint64_t result = fprintf(v8, "%20s:\n", "maxQosDirectToTLC");
                                        else {
                                          uint64_t v225 = v438;
                                        }
                                        if ((_DWORD)v225)
                                        {
                                          for (uint64_t i92 = 0LL; i92 != v225; ++i92)
                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i92, v15[i92]);
                                        }
                                      }

                                      else
                                      {
                                        if ((v432 & 1) != 0 && v14 == 518
                                          || (v432 & 1) != 0 && v14 == 519
                                          || (v432 & 2) != 0 && v14 == 627
                                          || (v432 & 2) != 0 && v14 == 628
                                          || (v432 & 2) != 0 && v14 == 629
                                          || (v432 & 2) != 0 && v14 == 671
                                          || (v432 & 2) != 0 && v14 == 672
                                          || (v432 & 2) != 0 && v14 == 816
                                          || (v432 & 1) != 0 && v14 == 538
                                          || (v432 & 1) != 0 && v14 == 487)
                                        {
                                          goto LABEL_81;
                                        }

                                        if ((v432 & 1) != 0 && v14 == 490)
                                        {
                                          uint64_t result = fprintf(v8, "%20s:\n", "bdrTmpHist");
                                          else {
                                            uint64_t v227 = v438;
                                          }
                                          if ((_DWORD)v227)
                                          {
                                            for (uint64_t i93 = 0LL; i93 != v227; ++i93)
                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i93, v15[i93]);
                                          }
                                        }

                                        else
                                        {
                                          if ((v432 & 1) != 0 && v14 == 491 || (v432 & 1) != 0 && v14 == 492) {
                                            goto LABEL_81;
                                          }
                                          if ((v432 & 1) != 0 && v14 == 624)
                                          {
                                            uint64_t result = fprintf(v8, "%20s:\n", "clogFailReason");
                                            else {
                                              uint64_t v229 = v438;
                                            }
                                            if ((_DWORD)v229)
                                            {
                                              for (uint64_t i94 = 0LL; i94 != v229; ++i94)
                                                uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i94,  v15[i94]);
                                            }
                                          }

                                          else if ((v432 & 1) != 0 && v14 == 1001)
                                          {
                                            uint64_t result = fprintf(v8, "%20s:\n", "clogReplayFailReason");
                                            else {
                                              uint64_t v231 = v438;
                                            }
                                            if ((_DWORD)v231)
                                            {
                                              for (uint64_t i95 = 0LL; i95 != v231; ++i95)
                                                uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i95,  v15[i95]);
                                            }
                                          }

                                          else
                                          {
                                            if ((v432 & 1) != 0 && v14 == 1002
                                              || (v432 & 1) != 0 && v14 == 1003
                                              || (v432 & 1) != 0 && v14 == 493
                                              || (v432 & 1) != 0 && v14 == 497
                                              || (v432 & 1) != 0 && v14 == 495
                                              || (v432 & 1) != 0 && v14 == 496
                                              || (v432 & 1) != 0 && v14 == 498
                                              || (v432 & 1) != 0 && v14 == 499
                                              || (v432 & 1) != 0 && v14 == 500
                                              || (v432 & 1) != 0 && v14 == 606
                                              || (v432 & 1) != 0 && v14 == 617
                                              || (v432 & 1) != 0 && v14 == 607
                                              || (v432 & 1) != 0 && v14 == 618
                                              || (v432 & 1) != 0 && v14 == 619
                                              || (v432 & 1) != 0 && v14 == 620
                                              || (v432 & 1) != 0 && v14 == 625
                                              || (v432 & 1) != 0 && v14 == 626
                                              || (v432 & 1) != 0 && v14 == 1009
                                              || (v432 & 1) != 0 && v14 == 1010)
                                            {
                                              goto LABEL_81;
                                            }

                                            if ((v432 & 1) != 0 && v14 == 621)
                                            {
                                              uint64_t result = fprintf(v8, "%20s:\n", "eanBootReadsHist");
                                              else {
                                                uint64_t v233 = v438;
                                              }
                                              if ((_DWORD)v233)
                                              {
                                                for (uint64_t i96 = 0LL; i96 != v233; ++i96)
                                                  uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i96,  v15[i96]);
                                              }
                                            }

                                            else if ((v432 & 1) != 0 && v14 == 632)
                                            {
                                              uint64_t result = fprintf(v8, "%20s:\n", "eanFirstReadMode");
                                              else {
                                                uint64_t v235 = v438;
                                              }
                                              if ((_DWORD)v235)
                                              {
                                                for (uint64_t i97 = 0LL; i97 != v235; ++i97)
                                                  uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i97,  v15[i97]);
                                              }
                                            }

                                            else
                                            {
                                              if ((v432 & 1) != 0 && v14 == 642
                                                || (v432 & 1) != 0 && v14 == 502
                                                || (v432 & 1) != 0 && v14 == 505
                                                || (v432 & 1) != 0 && v14 == 506
                                                || (v432 & 1) != 0 && v14 == 507
                                                || (v432 & 1) != 0 && v14 == 520
                                                || (v432 & 1) != 0 && v14 == 521
                                                || (v432 & 1) != 0 && v14 == 522
                                                || (v432 & 1) != 0 && v14 == 523
                                                || (v432 & 1) != 0 && v14 == 524
                                                || (v432 & 1) != 0 && v14 == 525
                                                || (v432 & 1) != 0 && v14 == 526
                                                || (v432 & 1) != 0 && v14 == 527
                                                || (v432 & 1) != 0 && v14 == 612
                                                || (v432 & 1) != 0 && v14 == 616
                                                || (v432 & 1) != 0 && v14 == 664
                                                || (v432 & 1) != 0 && v14 == 665
                                                || (v432 & 1) != 0 && v14 == 707
                                                || (v432 & 1) != 0 && v14 == 708
                                                || (v432 & 2) != 0 && v14 == 530
                                                || (v432 & 1) != 0 && v14 == 531
                                                || (v432 & 1) != 0 && v14 == 828
                                                || (v432 & 1) != 0 && v14 == 532
                                                || (v432 & 1) != 0 && v14 == 533
                                                || (v432 & 1) != 0 && v14 == 534
                                                || (v432 & 1) != 0 && v14 == 535
                                                || (v432 & 1) != 0 && v14 == 537
                                                || (v432 & 1) != 0 && v14 == 543
                                                || (v432 & 2) != 0 && v14 == 581
                                                || (v432 & 2) != 0 && v14 == 582
                                                || (v432 & 1) != 0 && v14 == 583
                                                || (v432 & 1) != 0 && v14 == 584
                                                || (v432 & 1) != 0 && v14 == 544
                                                || (v432 & 1) != 0 && v14 == 553
                                                || (v432 & 1) != 0 && v14 == 557
                                                || (v432 & 1) != 0 && v14 == 1117
                                                || (v432 & 1) != 0 && v14 == 548
                                                || (v432 & 1) != 0 && v14 == 611
                                                || (v432 & 1) != 0 && v14 == 545
                                                || (v432 & 1) != 0 && v14 == 558
                                                || (v432 & 1) != 0 && v14 == 559
                                                || (v432 & 1) != 0 && v14 == 1112
                                                || (v432 & 1) != 0 && v14 == 563
                                                || (v432 & 1) != 0 && v14 == 564
                                                || (v432 & 1) != 0 && v14 == 613
                                                || (v432 & 1) != 0 && v14 == 614
                                                || (v432 & 1) != 0 && v14 == 615)
                                              {
                                                goto LABEL_81;
                                              }

                                              if ((v432 & 1) != 0 && v14 == 546)
                                              {
                                                uint64_t result = fprintf(v8, "%20s:\n", "slcDemandBurstSizeDetected");
                                                else {
                                                  uint64_t v237 = v438;
                                                }
                                                if ((_DWORD)v237)
                                                {
                                                  for (uint64_t i98 = 0LL; i98 != v237; ++i98)
                                                    uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i98,  v15[i98]);
                                                }
                                              }

                                              else if ((v432 & 1) != 0 && v14 == 549)
                                              {
                                                uint64_t result = fprintf(v8, "%20s:\n", "slcDemandBurstSizeSlc");
                                                else {
                                                  uint64_t v239 = v438;
                                                }
                                                if ((_DWORD)v239)
                                                {
                                                  for (uint64_t i99 = 0LL; i99 != v239; ++i99)
                                                    uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i99,  v15[i99]);
                                                }
                                              }

                                              else if ((v432 & 1) != 0 && v14 == 547)
                                              {
                                                uint64_t result = fprintf(v8, "%20s:\n", "slcDemandBurstDur");
                                                else {
                                                  uint64_t v241 = v438;
                                                }
                                                if ((_DWORD)v241)
                                                {
                                                  for (uint64_t i100 = 0LL; i100 != v241; ++i100)
                                                    uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i100,  v15[i100]);
                                                }
                                              }

                                              else
                                              {
                                                if ((v432 & 1) != 0 && v14 == 560
                                                  || (v432 & 1) != 0 && v14 == 635
                                                  || (v432 & 1) != 0 && v14 == 636
                                                  || (v432 & 1) != 0 && v14 == 637
                                                  || (v432 & 1) != 0 && v14 == 561
                                                  || (v432 & 1) != 0 && v14 == 565
                                                  || (v432 & 1) != 0 && v14 == 568
                                                  || (v432 & 1) != 0 && v14 == 575
                                                  || (v432 & 1) != 0 && v14 == 588
                                                  || (v432 & 1) != 0 && v14 == 589
                                                  || (v432 & 1) != 0 && v14 == 590
                                                  || (v432 & 1) != 0 && v14 == 591
                                                  || (v432 & 1) != 0 && v14 == 594
                                                  || (v432 & 1) != 0 && v14 == 595
                                                  || (v432 & 1) != 0 && v14 == 602)
                                                {
                                                  goto LABEL_81;
                                                }

                                                if ((v432 & 1) != 0 && v14 == 638)
                                                {
                                                  uint64_t result = fprintf(v8, "%20s:\n", "oslcDemandBurstSize");
                                                  else {
                                                    uint64_t v243 = v438;
                                                  }
                                                  if ((_DWORD)v243)
                                                  {
                                                    for (uint64_t i101 = 0LL; i101 != v243; ++i101)
                                                      uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i101,  v15[i101]);
                                                  }
                                                }

                                                else if ((v432 & 1) != 0 && v14 == 674)
                                                {
                                                  uint64_t result = fprintf(v8, "%20s:\n", "oslcNoVotesHw");
                                                  else {
                                                    uint64_t v245 = v438;
                                                  }
                                                  if ((_DWORD)v245)
                                                  {
                                                    for (uint64_t i102 = 0LL; i102 != v245; ++i102)
                                                      uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i102,  v15[i102]);
                                                  }
                                                }

                                                else
                                                {
                                                  if ((v432 & 1) != 0 && v14 == 884 || (v432 & 1) != 0 && v14 == 601) {
                                                    goto LABEL_81;
                                                  }
                                                  if ((v432 & 2) != 0 && v14 == 1174)
                                                  {
                                                    uint64_t result = fprintf(v8, "%20s:\n", "nandWritesByMode");
                                                    else {
                                                      uint64_t v247 = v438;
                                                    }
                                                    if ((_DWORD)v247)
                                                    {
                                                      for (uint64_t i103 = 0LL; i103 != v247; ++i103)
                                                        uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i103,  v15[i103]);
                                                    }
                                                  }

                                                  else if ((v432 & 2) != 0 && v14 == 1175)
                                                  {
                                                    uint64_t result = fprintf(v8, "%20s:\n", "nandReadsByMode");
                                                    else {
                                                      uint64_t v249 = v438;
                                                    }
                                                    if ((_DWORD)v249)
                                                    {
                                                      for (uint64_t i104 = 0LL; i104 != v249; ++i104)
                                                        uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i104,  v15[i104]);
                                                    }
                                                  }

                                                  else if ((v432 & 1) != 0 && v14 == 605)
                                                  {
                                                    uint64_t result = fprintf(v8, "%20s:\n", "gcActiveReasons");
                                                    else {
                                                      uint64_t v251 = v438;
                                                    }
                                                    if ((_DWORD)v251)
                                                    {
                                                      for (uint64_t i105 = 0LL; i105 != v251; ++i105)
                                                        uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i105,  v15[i105]);
                                                    }
                                                  }

                                                  else if ((v432 & 1) != 0 && v14 == 610)
                                                  {
                                                    uint64_t result = fprintf(v8, "%20s:\n", "pcieAerCounters");
                                                    else {
                                                      uint64_t v253 = v438;
                                                    }
                                                    if ((_DWORD)v253)
                                                    {
                                                      for (uint64_t i106 = 0LL; i106 != v253; ++i106)
                                                        uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i106,  v15[i106]);
                                                    }
                                                  }

                                                  else
                                                  {
                                                    if ((v432 & 1) != 0 && v14 == 622
                                                      || (v432 & 1) != 0 && v14 == 623
                                                      || (v432 & 1) != 0 && v14 == 633
                                                      || (v432 & 1) != 0 && v14 == 634
                                                      || (v432 & 1) != 0 && v14 == 541
                                                      || (v432 & 1) != 0 && v14 == 542
                                                      || (v432 & 1) != 0 && v14 == 667
                                                      || (v432 & 1) != 0 && v14 == 676
                                                      || (v432 & 1) != 0 && v14 == 826)
                                                    {
                                                      goto LABEL_81;
                                                    }

                                                    if ((v432 & 1) != 0 && v14 == 660)
                                                    {
                                                      uint64_t result = fprintf(v8, "%20s:\n", "gcMustReasons");
                                                      else {
                                                        uint64_t v255 = v438;
                                                      }
                                                      if ((_DWORD)v255)
                                                      {
                                                        for (uint64_t i107 = 0LL; i107 != v255; ++i107)
                                                          uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i107,  v15[i107]);
                                                      }
                                                    }

                                                    else
                                                    {
                                                      if ((v432 & 2) != 0 && v14 == 666
                                                        || (v432 & 2) != 0 && v14 == 675
                                                        || (v432 & 1) != 0 && v14 == 684)
                                                      {
                                                        goto LABEL_81;
                                                      }

                                                      if ((v432 & 1) != 0 && v14 == 687)
                                                      {
                                                        uint64_t result = fprintf(v8, "%20s:\n", "cbdrInitSent");
                                                        else {
                                                          uint64_t v257 = v438;
                                                        }
                                                        if ((_DWORD)v257)
                                                        {
                                                          for (uint64_t i108 = 0LL; i108 != v257; ++i108)
                                                            uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i108,  v15[i108]);
                                                        }
                                                      }

                                                      else
                                                      {
                                                        if ((v432 & 1) != 0 && v14 == 688
                                                          || (v432 & 1) != 0 && v14 == 689
                                                          || (v432 & 1) != 0 && v14 == 690
                                                          || (v432 & 1) != 0 && v14 == 691)
                                                        {
                                                          goto LABEL_81;
                                                        }

                                                        if ((v432 & 1) != 0 && v14 == 694)
                                                        {
                                                          uint64_t result = fprintf(v8, "%20s:\n", "cbdrRefreshGrades");
                                                          else {
                                                            uint64_t v259 = v438;
                                                          }
                                                          if ((_DWORD)v259)
                                                          {
                                                            for (uint64_t i109 = 0LL; i109 != v259; ++i109)
                                                              uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i109,  v15[i109]);
                                                          }
                                                        }

                                                        else
                                                        {
                                                          if ((v432 & 1) != 0 && v14 == 695
                                                            || (v432 & 1) != 0 && v14 == 696
                                                            || (v432 & 1) != 0 && v14 == 699)
                                                          {
                                                            goto LABEL_81;
                                                          }

                                                          if ((v432 & 1) != 0 && v14 == 731)
                                                          {
                                                            uint64_t result = fprintf(v8, "%20s:\n", "cbdrLastScannedHr");
                                                            else {
                                                              uint64_t v261 = v438;
                                                            }
                                                            if ((_DWORD)v261)
                                                            {
                                                              for (uint64_t i110 = 0LL; i110 != v261; ++i110)
                                                                uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i110,  v15[i110]);
                                                            }
                                                          }

                                                          else
                                                          {
                                                            if ((v432 & 1) != 0 && v14 == 753
                                                              || (v432 & 1) != 0 && v14 == 754
                                                              || (v432 & 1) != 0 && v14 == 755)
                                                            {
                                                              goto LABEL_81;
                                                            }

                                                            if ((v432 & 1) != 0 && v14 == 756)
                                                            {
                                                              uint64_t result = fprintf(v8, "%20s:\n", "cbdrRefreshedAges");
                                                              else {
                                                                uint64_t v263 = v438;
                                                              }
                                                              if ((_DWORD)v263)
                                                              {
                                                                for (uint64_t i111 = 0LL; i111 != v263; ++i111)
                                                                  uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i111,  v15[i111]);
                                                              }
                                                            }

                                                            else
                                                            {
                                                              if ((v432 & 1) != 0 && v14 == 757
                                                                || (v432 & 1) != 0 && v14 == 758)
                                                              {
                                                                goto LABEL_81;
                                                              }

                                                              if ((v432 & 1) != 0 && v14 == 759)
                                                              {
                                                                uint64_t result = fprintf(v8, "%20s:\n", "cbdrScanPct");
                                                                else {
                                                                  uint64_t v265 = v438;
                                                                }
                                                                if ((_DWORD)v265)
                                                                {
                                                                  for (uint64_t i112 = 0LL; i112 != v265; ++i112)
                                                                    uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i112,  v15[i112]);
                                                                }
                                                              }

                                                              else
                                                              {
                                                                if ((v432 & 1) != 0 && v14 == 766) {
                                                                  goto LABEL_81;
                                                                }
                                                                if ((v432 & 1) != 0 && v14 == 767)
                                                                {
                                                                  uint64_t result = fprintf( v8,  "%20s:\n",  "cbdrRefreshGradesSLC");
                                                                  else {
                                                                    uint64_t v267 = v438;
                                                                  }
                                                                  if ((_DWORD)v267)
                                                                  {
                                                                    for (uint64_t i113 = 0LL; i113 != v267; ++i113)
                                                                      uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i113,  v15[i113]);
                                                                  }
                                                                }

                                                                else if ((v432 & 1) != 0 && v14 == 768)
                                                                {
                                                                  uint64_t result = fprintf( v8,  "%20s:\n",  "cbdrRefreshedAgesSLC");
                                                                  else {
                                                                    uint64_t v269 = v438;
                                                                  }
                                                                  if ((_DWORD)v269)
                                                                  {
                                                                    for (uint64_t i114 = 0LL; i114 != v269; ++i114)
                                                                      uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i114,  v15[i114]);
                                                                  }
                                                                }

                                                                else if ((v432 & 1) != 0 && v14 == 769)
                                                                {
                                                                  uint64_t result = fprintf(v8, "%20s:\n", "cbdrScanPctSLC");
                                                                  else {
                                                                    uint64_t v271 = v438;
                                                                  }
                                                                  if ((_DWORD)v271)
                                                                  {
                                                                    for (uint64_t i115 = 0LL; i115 != v271; ++i115)
                                                                      uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i115,  v15[i115]);
                                                                  }
                                                                }

                                                                else
                                                                {
                                                                  if ((v432 & 2) != 0 && v14 == 970
                                                                    || (v432 & 1) != 0 && v14 == 683
                                                                    || (v432 & 1) != 0 && v14 == 693
                                                                    || (v432 & 1) != 0 && v14 == 718
                                                                    || (v432 & 1) != 0 && v14 == 709
                                                                    || (v432 & 1) != 0 && v14 == 710
                                                                    || (v432 & 1) != 0 && v14 == 719
                                                                    || (v432 & 1) != 0 && v14 == 720)
                                                                  {
                                                                    goto LABEL_81;
                                                                  }

                                                                  if ((v432 & 1) != 0 && v14 == 702)
                                                                  {
                                                                    uint64_t result = fprintf(v8, "%20s:\n", "vcurve");
                                                                    else {
                                                                      uint64_t v273 = v438;
                                                                    }
                                                                    if ((_DWORD)v273)
                                                                    {
                                                                      for (uint64_t i116 = 0LL; i116 != v273; ++i116)
                                                                        uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i116,  v15[i116]);
                                                                    }
                                                                  }

                                                                  else if ((v432 & 1) != 0 && v14 == 703)
                                                                  {
                                                                    uint64_t result = fprintf(v8, "%20s:\n", "injDepth");
                                                                    else {
                                                                      uint64_t v275 = v438;
                                                                    }
                                                                    if ((_DWORD)v275)
                                                                    {
                                                                      for (uint64_t i117 = 0LL; i117 != v275; ++i117)
                                                                        uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i117,  v15[i117]);
                                                                    }
                                                                  }

                                                                  else
                                                                  {
                                                                    if ((v432 & 1) != 0 && v14 == 704
                                                                      || (v432 & 1) != 0 && v14 == 728
                                                                      || (v432 & 1) != 0 && v14 == 729
                                                                      || (v432 & 1) != 0 && v14 == 730
                                                                      || (v432 & 1) != 0 && v14 == 732
                                                                      || (v432 & 1) != 0 && v14 == 741
                                                                      || (v432 & 1) != 0 && v14 == 742
                                                                      || (v432 & 1) != 0 && v14 == 743
                                                                      || (v432 & 1) != 0 && v14 == 746
                                                                      || (v432 & 1) != 0 && v14 == 747
                                                                      || (v432 & 1) != 0 && v14 == 748
                                                                      || (v432 & 1) != 0 && v14 == 749
                                                                      || (v432 & 1) != 0 && v14 == 750
                                                                      || (v432 & 1) != 0 && v14 == 751
                                                                      || (v432 & 1) != 0 && v14 == 752)
                                                                    {
                                                                      goto LABEL_81;
                                                                    }

                                                                    if ((v432 & 1) != 0 && v14 == 744)
                                                                    {
                                                                      uint64_t result = fprintf( v8,  "%20s:\n",  "raidReconstructDurationHisto");
                                                                      else {
                                                                        uint64_t v277 = v438;
                                                                      }
                                                                      if ((_DWORD)v277)
                                                                      {
                                                                        for (uint64_t i118 = 0LL; i118 != v277; ++i118)
                                                                          uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i118,  v15[i118]);
                                                                      }
                                                                    }

                                                                    else if ((v432 & 1) != 0 && v14 == 745)
                                                                    {
                                                                      uint64_t result = fprintf( v8,  "%20s:\n",  "failsOnReconstructHisto");
                                                                      else {
                                                                        uint64_t v279 = v438;
                                                                      }
                                                                      if ((_DWORD)v279)
                                                                      {
                                                                        for (uint64_t i119 = 0LL; i119 != v279; ++i119)
                                                                          uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i119,  v15[i119]);
                                                                      }
                                                                    }

                                                                    else
                                                                    {
                                                                      if ((v432 & 1) != 0 && v14 == 776
                                                                        || (v432 & 1) != 0 && v14 == 764
                                                                        || (v432 & 1) != 0 && v14 == 765)
                                                                      {
                                                                        goto LABEL_81;
                                                                      }

                                                                      if ((v432 & 1) != 0 && v14 == 770)
                                                                      {
                                                                        uint64_t result = fprintf( v8,  "%20s:\n",  "cpuBurstLength");
                                                                        else {
                                                                          uint64_t v281 = v438;
                                                                        }
                                                                        if ((_DWORD)v281)
                                                                        {
                                                                          for (uint64_t i120 = 0LL; i120 != v281; ++i120)
                                                                            uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i120,  v15[i120]);
                                                                        }
                                                                      }

                                                                      else
                                                                      {
                                                                        if ((v432 & 1) != 0 && v14 == 778
                                                                          || (v432 & 1) != 0 && v14 == 779
                                                                          || (v432 & 1) != 0 && v14 == 780)
                                                                        {
                                                                          goto LABEL_81;
                                                                        }

                                                                        if ((v432 & 1) != 0 && v14 == 781)
                                                                        {
                                                                          uint64_t result = fprintf( v8,  "%20s:\n",  "gcSearchTimeHistory");
                                                                          else {
                                                                            uint64_t v283 = v438;
                                                                          }
                                                                          if ((_DWORD)v283)
                                                                          {
                                                                            for (uint64_t i121 = 0LL; i121 != v283; ++i121)
                                                                              uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i121,  v15[i121]);
                                                                          }
                                                                        }

                                                                        else if ((v432 & 1) != 0 && v14 == 785)
                                                                        {
                                                                          uint64_t result = fprintf( v8,  "%20s:\n",  "gcSearchPortion");
                                                                          else {
                                                                            uint64_t v285 = v438;
                                                                          }
                                                                          if ((_DWORD)v285)
                                                                          {
                                                                            for (uint64_t i122 = 0LL; i122 != v285; ++i122)
                                                                              uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i122,  v15[i122]);
                                                                          }
                                                                        }

                                                                        else
                                                                        {
                                                                          if ((v432 & 1) != 0 && v14 == 792
                                                                            || (v432 & 1) != 0 && v14 == 793
                                                                            || (v432 & 1) != 0 && v14 == 794
                                                                            || (v432 & 2) != 0 && v14 == 821
                                                                            || (v432 & 1) != 0 && v14 == 822
                                                                            || (v432 & 1) != 0 && v14 == 827)
                                                                          {
                                                                            goto LABEL_81;
                                                                          }

                                                                          if ((v432 & 1) != 0 && v14 == 823)
                                                                          {
                                                                            uint64_t result = fprintf( v8,  "%20s:\n",  "readClassifyStatusesHisto");
                                                                            else {
                                                                              uint64_t v287 = v438;
                                                                            }
                                                                            if ((_DWORD)v287)
                                                                            {
                                                                              for (uint64_t i123 = 0LL; i123 != v287; ++i123)
                                                                                uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i123,  v15[i123]);
                                                                            }
                                                                          }

                                                                          else if ((v432 & 1) != 0 && v14 == 824)
                                                                          {
                                                                            uint64_t result = fprintf( v8,  "%20s:\n",  "readWithAuxStatusesHisto");
                                                                            else {
                                                                              uint64_t v289 = v438;
                                                                            }
                                                                            if ((_DWORD)v289)
                                                                            {
                                                                              for (uint64_t i124 = 0LL; i124 != v289; ++i124)
                                                                                uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i124,  v15[i124]);
                                                                            }
                                                                          }

                                                                          else if ((v432 & 1) != 0 && v14 == 825)
                                                                          {
                                                                            uint64_t result = fprintf( v8,  "%20s:\n",  "readReconstructStatusesHisto");
                                                                            else {
                                                                              uint64_t v291 = v438;
                                                                            }
                                                                            if ((_DWORD)v291)
                                                                            {
                                                                              for (uint64_t i125 = 0LL; i125 != v291; ++i125)
                                                                                uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i125,  v15[i125]);
                                                                            }
                                                                          }

                                                                          else
                                                                          {
                                                                            if ((v432 & 1) != 0 && v14 == 830
                                                                              || (v432 & 1) != 0 && v14 == 831
                                                                              || (v432 & 2) != 0 && v14 == 832)
                                                                            {
                                                                              goto LABEL_81;
                                                                            }

                                                                            if ((v432 & 2) != 0 && v14 == 855)
                                                                            {
                                                                              uint64_t result = fprintf( v8,  "%20s:\n",  "fwFormatVersion");
                                                                              else {
                                                                                uint64_t v293 = v438;
                                                                              }
                                                                              if ((_DWORD)v293)
                                                                              {
                                                                                for (uint64_t i126 = 0LL; i126 != v293; ++i126)
                                                                                  uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i126,  v15[i126]);
                                                                              }
                                                                            }

                                                                            else
                                                                            {
                                                                              if ((v432 & 1) != 0 && v14 == 883) {
                                                                                goto LABEL_81;
                                                                              }
                                                                              if ((v432 & 2) != 0 && v14 == 868)
                                                                              {
                                                                                uint64_t result = fprintf( v8,  "%20s:\n",  "dmReasonsSlc_1bc");
                                                                                else {
                                                                                  uint64_t v295 = v438;
                                                                                }
                                                                                if ((_DWORD)v295)
                                                                                {
                                                                                  for (uint64_t i127 = 0LL; i127 != v295; ++i127)
                                                                                    uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i127,  v15[i127]);
                                                                                }
                                                                              }

                                                                              else if ((v432 & 2) != 0 && v14 == 869)
                                                                              {
                                                                                uint64_t result = fprintf( v8,  "%20s:\n",  "dmReasonsTlc_1bc");
                                                                                else {
                                                                                  uint64_t v297 = v438;
                                                                                }
                                                                                if ((_DWORD)v297)
                                                                                {
                                                                                  for (uint64_t i128 = 0LL; i128 != v297; ++i128)
                                                                                    uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i128,  v15[i128]);
                                                                                }
                                                                              }

                                                                              else if ((v432 & 2) != 0 && v14 == 870)
                                                                              {
                                                                                uint64_t result = fprintf( v8,  "%20s:\n",  "dmReasonsSlc_1bc_he");
                                                                                else {
                                                                                  uint64_t v299 = v438;
                                                                                }
                                                                                if ((_DWORD)v299)
                                                                                {
                                                                                  for (uint64_t i129 = 0LL; i129 != v299; ++i129)
                                                                                    uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i129,  v15[i129]);
                                                                                }
                                                                              }

                                                                              else if ((v432 & 2) != 0 && v14 == 871)
                                                                              {
                                                                                uint64_t result = fprintf( v8,  "%20s:\n",  "dmReasonsTlc_1bc_he");
                                                                                else {
                                                                                  uint64_t v301 = v438;
                                                                                }
                                                                                if ((_DWORD)v301)
                                                                                {
                                                                                  for (uint64_t i130 = 0LL; i130 != v301; ++i130)
                                                                                    uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i130,  v15[i130]);
                                                                                }
                                                                              }

                                                                              else if ((v432 & 2) != 0 && v14 == 876)
                                                                              {
                                                                                uint64_t result = fprintf( v8,  "%20s:\n",  "dmReasonsSlc_mbc");
                                                                                else {
                                                                                  uint64_t v303 = v438;
                                                                                }
                                                                                if ((_DWORD)v303)
                                                                                {
                                                                                  for (uint64_t i131 = 0LL; i131 != v303; ++i131)
                                                                                    uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i131,  v15[i131]);
                                                                                }
                                                                              }

                                                                              else if ((v432 & 2) != 0 && v14 == 877)
                                                                              {
                                                                                uint64_t result = fprintf( v8,  "%20s:\n",  "dmReasonsTlc_mbc");
                                                                                else {
                                                                                  uint64_t v305 = v438;
                                                                                }
                                                                                if ((_DWORD)v305)
                                                                                {
                                                                                  for (uint64_t i132 = 0LL; i132 != v305; ++i132)
                                                                                    uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i132,  v15[i132]);
                                                                                }
                                                                              }

                                                                              else
                                                                              {
                                                                                if ((v432 & 1) != 0 && v14 == 896) {
                                                                                  goto LABEL_81;
                                                                                }
                                                                                if ((v432 & 1) != 0 && v14 == 897)
                                                                                {
                                                                                  uint64_t result = fprintf( v8,  "%20s:\n",  "wcWrFragSizes");
                                                                                  else {
                                                                                    uint64_t v307 = v438;
                                                                                  }
                                                                                  if ((_DWORD)v307)
                                                                                  {
                                                                                    for (uint64_t i133 = 0LL; i133 != v307; ++i133)
                                                                                      uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i133,  v15[i133]);
                                                                                  }
                                                                                }

                                                                                else if ((v432 & 1) != 0 && v14 == 905)
                                                                                {
                                                                                  uint64_t result = fprintf( v8,  "%20s:\n",  "turboRaidRelPerBlock");
                                                                                  else {
                                                                                    uint64_t v309 = v438;
                                                                                  }
                                                                                  if ((_DWORD)v309)
                                                                                  {
                                                                                    for (uint64_t i134 = 0LL; i134 != v309; ++i134)
                                                                                      uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i134,  v15[i134]);
                                                                                  }
                                                                                }

                                                                                else if ((v432 & 1) != 0 && v14 == 906)
                                                                                {
                                                                                  uint64_t result = fprintf( v8,  "%20s:\n",  "turboRaidRelBetweenRefreshesPerBlock");
                                                                                  else {
                                                                                    uint64_t v311 = v438;
                                                                                  }
                                                                                  if ((_DWORD)v311)
                                                                                  {
                                                                                    for (uint64_t i135 = 0LL; i135 != v311; ++i135)
                                                                                      uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i135,  v15[i135]);
                                                                                  }
                                                                                }

                                                                                else if ((v432 & 1) != 0 && v14 == 907)
                                                                                {
                                                                                  uint64_t result = fprintf( v8,  "%20s:\n",  "turboRaidMaxRelBetweenRefreshesPerBlock");
                                                                                  else {
                                                                                    uint64_t v313 = v438;
                                                                                  }
                                                                                  if ((_DWORD)v313)
                                                                                  {
                                                                                    for (uint64_t i136 = 0LL; i136 != v313; ++i136)
                                                                                      uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i136,  v15[i136]);
                                                                                  }
                                                                                }

                                                                                else if ((v432 & 1) != 0 && v14 == 908)
                                                                                {
                                                                                  uint64_t result = fprintf( v8,  "%20s:\n",  "turboRaidMinRelBetweenRefreshesPerBlock");
                                                                                  else {
                                                                                    uint64_t v315 = v438;
                                                                                  }
                                                                                  if ((_DWORD)v315)
                                                                                  {
                                                                                    for (uint64_t i137 = 0LL; i137 != v315; ++i137)
                                                                                      uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i137,  v15[i137]);
                                                                                  }
                                                                                }

                                                                                else if ((v432 & 1) != 0 && v14 == 918)
                                                                                {
                                                                                  uint64_t result = fprintf( v8,  "%20s:\n",  "turboRaidMaxCyclesBetweenRel");
                                                                                  else {
                                                                                    uint64_t v317 = v438;
                                                                                  }
                                                                                  if ((_DWORD)v317)
                                                                                  {
                                                                                    for (uint64_t i138 = 0LL; i138 != v317; ++i138)
                                                                                      uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i138,  v15[i138]);
                                                                                  }
                                                                                }

                                                                                else if ((v432 & 1) != 0 && v14 == 919)
                                                                                {
                                                                                  uint64_t result = fprintf( v8,  "%20s:\n",  "turboRaidMinCyclesBetweenRel");
                                                                                  else {
                                                                                    uint64_t v319 = v438;
                                                                                  }
                                                                                  if ((_DWORD)v319)
                                                                                  {
                                                                                    for (uint64_t i139 = 0LL; i139 != v319; ++i139)
                                                                                      uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i139,  v15[i139]);
                                                                                  }
                                                                                }

                                                                                else if ((v432 & 1) != 0 && v14 == 932)
                                                                                {
                                                                                  uint64_t result = fprintf( v8,  "%20s:\n",  "turboRaidLastRelPECycles");
                                                                                  else {
                                                                                    uint64_t v321 = v438;
                                                                                  }
                                                                                  if ((_DWORD)v321)
                                                                                  {
                                                                                    for (uint64_t i140 = 0LL; i140 != v321; ++i140)
                                                                                      uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i140,  v15[i140]);
                                                                                  }
                                                                                }

                                                                                else if ((v432 & 1) != 0 && v14 == 933)
                                                                                {
                                                                                  uint64_t result = fprintf( v8,  "%20s:\n",  "turboRaidRelQualPECycles");
                                                                                  else {
                                                                                    uint64_t v323 = v438;
                                                                                  }
                                                                                  if ((_DWORD)v323)
                                                                                  {
                                                                                    for (uint64_t i141 = 0LL; i141 != v323; ++i141)
                                                                                      uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i141,  v15[i141]);
                                                                                  }
                                                                                }

                                                                                else if ((v432 & 1) != 0 && v14 == 920)
                                                                                {
                                                                                  uint64_t result = fprintf( v8,  "%20s:\n",  "turboRaidAuxPerBlock");
                                                                                  else {
                                                                                    uint64_t v325 = v438;
                                                                                  }
                                                                                  if ((_DWORD)v325)
                                                                                  {
                                                                                    for (uint64_t i142 = 0LL; i142 != v325; ++i142)
                                                                                      uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i142,  v15[i142]);
                                                                                  }
                                                                                }

                                                                                else if ((v432 & 1) != 0 && v14 == 921)
                                                                                {
                                                                                  uint64_t result = fprintf( v8,  "%20s:\n",  "turboRaidAuxBetweenRefreshesPerBlock");
                                                                                  else {
                                                                                    uint64_t v327 = v438;
                                                                                  }
                                                                                  if ((_DWORD)v327)
                                                                                  {
                                                                                    for (uint64_t i143 = 0LL; i143 != v327; ++i143)
                                                                                      uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i143,  v15[i143]);
                                                                                  }
                                                                                }

                                                                                else if ((v432 & 1) != 0 && v14 == 930)
                                                                                {
                                                                                  uint64_t result = fprintf( v8,  "%20s:\n",  "turboRaidMaxCyclesBetweenAux");
                                                                                  else {
                                                                                    uint64_t v329 = v438;
                                                                                  }
                                                                                  if ((_DWORD)v329)
                                                                                  {
                                                                                    for (uint64_t i144 = 0LL; i144 != v329; ++i144)
                                                                                      uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i144,  v15[i144]);
                                                                                  }
                                                                                }

                                                                                else if ((v432 & 1) != 0 && v14 == 931)
                                                                                {
                                                                                  uint64_t result = fprintf( v8,  "%20s:\n",  "turboRaidMinCyclesBetweenAux");
                                                                                  else {
                                                                                    uint64_t v331 = v438;
                                                                                  }
                                                                                  if ((_DWORD)v331)
                                                                                  {
                                                                                    for (uint64_t i145 = 0LL; i145 != v331; ++i145)
                                                                                      uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i145,  v15[i145]);
                                                                                  }
                                                                                }

                                                                                else if ((v432 & 1) != 0 && v14 == 934)
                                                                                {
                                                                                  uint64_t result = fprintf( v8,  "%20s:\n",  "turboRaidLastAuxPECycles");
                                                                                  else {
                                                                                    uint64_t v333 = v438;
                                                                                  }
                                                                                  if ((_DWORD)v333)
                                                                                  {
                                                                                    for (uint64_t i146 = 0LL; i146 != v333; ++i146)
                                                                                      uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i146,  v15[i146]);
                                                                                  }
                                                                                }

                                                                                else if ((v432 & 1) != 0 && v14 == 935)
                                                                                {
                                                                                  uint64_t result = fprintf( v8,  "%20s:\n",  "turboRaidAuxQualPECycles");
                                                                                  else {
                                                                                    uint64_t v335 = v438;
                                                                                  }
                                                                                  if ((_DWORD)v335)
                                                                                  {
                                                                                    for (uint64_t i147 = 0LL; i147 != v335; ++i147)
                                                                                      uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i147,  v15[i147]);
                                                                                  }
                                                                                }

                                                                                else
                                                                                {
                                                                                  if ((v432 & 1) != 0 && v14 == 922
                                                                                    || (v432 & 1) != 0 && v14 == 923)
                                                                                  {
                                                                                    goto LABEL_81;
                                                                                  }

                                                                                  if ((v432 & 1) != 0 && v14 == 910)
                                                                                  {
                                                                                    uint64_t result = fprintf( v8,  "%20s:\n",  "pgBelowMinBands");
                                                                                    else {
                                                                                      uint64_t v337 = v438;
                                                                                    }
                                                                                    if ((_DWORD)v337)
                                                                                    {
                                                                                      for (uint64_t i148 = 0LL; i148 != v337; ++i148)
                                                                                        uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i148,  v15[i148]);
                                                                                    }
                                                                                  }

                                                                                  else if ((v432 & 1) != 0 {
                                                                                         && v14 == 911)
                                                                                  }
                                                                                  {
                                                                                    uint64_t result = fprintf( v8,  "%20s:\n",  "pgNoBands");
                                                                                    else {
                                                                                      uint64_t v339 = v438;
                                                                                    }
                                                                                    if ((_DWORD)v339)
                                                                                    {
                                                                                      for (uint64_t i149 = 0LL; i149 != v339; ++i149)
                                                                                        uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i149,  v15[i149]);
                                                                                    }
                                                                                  }

                                                                                  else if ((v432 & 1) != 0 {
                                                                                         && v14 == 912)
                                                                                  }
                                                                                  {
                                                                                    uint64_t result = fprintf( v8,  "%20s:\n",  "pgBelowMinBlocks");
                                                                                    else {
                                                                                      uint64_t v341 = v438;
                                                                                    }
                                                                                    if ((_DWORD)v341)
                                                                                    {
                                                                                      for (uint64_t i150 = 0LL; i150 != v341; ++i150)
                                                                                        uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i150,  v15[i150]);
                                                                                    }
                                                                                  }

                                                                                  else
                                                                                  {
                                                                                    if ((v432 & 1) != 0 && v14 == 915
                                                                                      || (v432 & 1) != 0 && v14 == 925
                                                                                      || (v432 & 1) != 0 && v14 == 946
                                                                                      || (v432 & 1) != 0 && v14 == 936
                                                                                      || (v432 & 1) != 0 && v14 == 937
                                                                                      || (v432 & 1) != 0 && v14 == 938
                                                                                      || (v432 & 1) != 0 && v14 == 939
                                                                                      || (v432 & 1) != 0 && v14 == 940
                                                                                      || (v432 & 2) != 0 && v14 == 954
                                                                                      || (v432 & 2) != 0 && v14 == 942
                                                                                      || (v432 & 2) != 0 && v14 == 943
                                                                                      || (v432 & 2) != 0 && v14 == 944
                                                                                      || (v432 & 1) != 0 && v14 == 957
                                                                                      || (v432 & 1) != 0 && v14 == 958)
                                                                                    {
                                                                                      goto LABEL_81;
                                                                                    }

                                                                                    if ((v432 & 2) != 0 && v14 == 948)
                                                                                    {
                                                                                      uint64_t result = fprintf( v8,  "%20s:\n",  "assertHistory");
                                                                                      else {
                                                                                        uint64_t v343 = v438;
                                                                                      }
                                                                                      if ((_DWORD)v343)
                                                                                      {
                                                                                        for (uint64_t i151 = 0LL;
                                                                                              i151 != v343;
                                                                                              ++i151)
                                                                                        {
                                                                                          uint64_t result = fprintf( v8,  "                      [%d] = %llu\n",  i151,  v15[i151]);
                                                                                        }
                                                                                      }
                                                                                    }

                                                                                    else
                                                                                    {
                                                                                      if ((v432 & 2) != 0 && v14 == 951
                                                                                        || (v432 & 2) != 0 && v14 == 952
                                                                                        || (v432 & 1) != 0 && v14 == 955
                                                                                        || (v432 & 1) != 0 && v14 == 966
                                                                                        || (v432 & 1) != 0 && v14 == 968
                                                                                        || (v432 & 1) != 0 && v14 == 969)
                                                                                      {
                                                                                        goto LABEL_81;
                                                                                      }

                                                                                      if ((v432 & 1) != 0 && v14 == 961)
                                                                                      {
                                                                                        uint64_t result = fprintf( v8,  "%20s:\n",  "osBuildStr");
                                                                                        else {
                                                                                          uint64_t v345 = v438;
                                                                                        }
                                                                                        if ((_DWORD)v345)
                                                                                        {
                                                                                          for (uint64_t i152 = 0LL;
                                                                                                i152 != v345;
                                                                                                ++i152)
                                                                                          {
                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i152, v15[i152]);
                                                                                          }
                                                                                        }
                                                                                      }

                                                                                      else if ((v432 & 1) != 0 {
                                                                                             && v14 == 967)
                                                                                      }
                                                                                      {
                                                                                        uint64_t result = fprintf( v8,  "%20s:\n",  "indTrimFrags");
                                                                                        else {
                                                                                          uint64_t v347 = v438;
                                                                                        }
                                                                                        if ((_DWORD)v347)
                                                                                        {
                                                                                          for (uint64_t i153 = 0LL;
                                                                                                i153 != v347;
                                                                                                ++i153)
                                                                                          {
                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i153, v15[i153]);
                                                                                          }
                                                                                        }
                                                                                      }

                                                                                      else if ((v432 & 1) != 0 {
                                                                                             && v14 == 971)
                                                                                      }
                                                                                      {
                                                                                        uint64_t result = fprintf( v8,  "%20s:\n",  "indUsedFrags");
                                                                                        else {
                                                                                          uint64_t v349 = v438;
                                                                                        }
                                                                                        if ((_DWORD)v349)
                                                                                        {
                                                                                          for (uint64_t i154 = 0LL;
                                                                                                i154 != v349;
                                                                                                ++i154)
                                                                                          {
                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i154, v15[i154]);
                                                                                          }
                                                                                        }
                                                                                      }

                                                                                      else
                                                                                      {
                                                                                        if ((v432 & 1) != 0
                                                                                          && v14 == 985
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 973
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 976
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 980
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 981
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 982
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 984
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 990
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 992
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 993
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 994
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 986
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 987
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 1000
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 1013)
                                                                                        {
                                                                                          goto LABEL_81;
                                                                                        }

                                                                                        if ((v432 & 1) != 0
                                                                                          && v14 == 1015)
                                                                                        {
                                                                                          uint64_t result = fprintf( v8,  "%20s:\n",  "eanEarlyBootUeccPage");
                                                                                          else {
                                                                                            uint64_t v351 = v438;
                                                                                          }
                                                                                          if ((_DWORD)v351)
                                                                                          {
                                                                                            for (uint64_t i155 = 0LL;
                                                                                                  i155 != v351;
                                                                                                  ++i155)
                                                                                            {
                                                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i155, v15[i155]);
                                                                                            }
                                                                                          }
                                                                                        }

                                                                                        else
                                                                                        {
                                                                                          if ((v432 & 1) != 0
                                                                                            && v14 == 1016
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1017
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1020
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1021
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1027
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1028
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1029
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1022
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1023
                                                                                            || (v432 & 2) != 0
                                                                                            && v14 == 1025
                                                                                            || (v432 & 2) != 0
                                                                                            && v14 == 1026
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1030)
                                                                                          {
                                                                                            goto LABEL_81;
                                                                                          }

                                                                                          if ((v432 & 1) != 0
                                                                                            && v14 == 1040)
                                                                                          {
                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "bandsAgeBinsV2");
                                                                                            else {
                                                                                              uint64_t v353 = v438;
                                                                                            }
                                                                                            if ((_DWORD)v353)
                                                                                            {
                                                                                              for (uint64_t i156 = 0LL;
                                                                                                    i156 != v353;
                                                                                                    ++i156)
                                                                                              {
                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i156, v15[i156]);
                                                                                              }
                                                                                            }
                                                                                          }

                                                                                          else if ((v432 & 1) != 0 && v14 == 1041)
                                                                                          {
                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "bandsAgeBinsSnapshot");
                                                                                            else {
                                                                                              uint64_t v355 = v438;
                                                                                            }
                                                                                            if ((_DWORD)v355)
                                                                                            {
                                                                                              for (uint64_t i157 = 0LL;
                                                                                                    i157 != v355;
                                                                                                    ++i157)
                                                                                              {
                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i157, v15[i157]);
                                                                                              }
                                                                                            }
                                                                                          }

                                                                                          else if ((v432 & 1) != 0 && v14 == 1042)
                                                                                          {
                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "bandsAgeBinsReadSectors");
                                                                                            else {
                                                                                              uint64_t v357 = v438;
                                                                                            }
                                                                                            if ((_DWORD)v357)
                                                                                            {
                                                                                              for (uint64_t i158 = 0LL;
                                                                                                    i158 != v357;
                                                                                                    ++i158)
                                                                                              {
                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i158, v15[i158]);
                                                                                              }
                                                                                            }
                                                                                          }

                                                                                          else
                                                                                          {
                                                                                            if ((v432 & 2) != 0
                                                                                              && v14 == 1050
                                                                                              || (v432 & 2) != 0
                                                                                              && v14 == 1051
                                                                                              || (v432 & 2) != 0
                                                                                              && v14 == 1052
                                                                                              || (v432 & 2) != 0
                                                                                              && v14 == 1053
                                                                                              || (v432 & 2) != 0
                                                                                              && v14 == 1061)
                                                                                            {
                                                                                              goto LABEL_81;
                                                                                            }

                                                                                            if ((v432 & 1) != 0
                                                                                              && v14 == 1057)
                                                                                            {
                                                                                              uint64_t result = fprintf(v8, "%20s:\n", "hostReadsVerticalByFlow");
                                                                                              else {
                                                                                                uint64_t v359 = v438;
                                                                                              }
                                                                                              if ((_DWORD)v359)
                                                                                              {
                                                                                                for (uint64_t i159 = 0LL;
                                                                                                      i159 != v359;
                                                                                                      ++i159)
                                                                                                {
                                                                                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i159, v15[i159]);
                                                                                                }
                                                                                              }
                                                                                            }

                                                                                            else if ((v432 & 1) != 0 && v14 == 1058)
                                                                                            {
                                                                                              uint64_t result = fprintf(v8, "%20s:\n", "hostReadsByFlow");
                                                                                              else {
                                                                                                uint64_t v361 = v438;
                                                                                              }
                                                                                              if ((_DWORD)v361)
                                                                                              {
                                                                                                for (uint64_t i160 = 0LL;
                                                                                                      i160 != v361;
                                                                                                      ++i160)
                                                                                                {
                                                                                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i160, v15[i160]);
                                                                                                }
                                                                                              }
                                                                                            }

                                                                                            else
                                                                                            {
                                                                                              if ((v432 & 1) != 0
                                                                                                && v14 == 1036
                                                                                                || (v432 & 1) != 0
                                                                                                && v14 == 1037
                                                                                                || (v432 & 1) != 0
                                                                                                && v14 == 1076
                                                                                                || (v432 & 1) != 0
                                                                                                && v14 == 1098)
                                                                                              {
                                                                                                goto LABEL_81;
                                                                                              }

                                                                                              if ((v432 & 1) != 0
                                                                                                && v14 == 1099)
                                                                                              {
                                                                                                uint64_t result = fprintf(v8, "%20s:\n", "pgCompressionBlocksInDip");
                                                                                                else {
                                                                                                  uint64_t v363 = v438;
                                                                                                }
                                                                                                if ((_DWORD)v363)
                                                                                                {
                                                                                                  for (uint64_t i161 = 0LL;
                                                                                                        i161 != v363;
                                                                                                        ++i161)
                                                                                                  {
                                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i161, v15[i161]);
                                                                                                  }
                                                                                                }
                                                                                              }

                                                                                              else if ((v432 & 1) != 0 && v14 == 1139)
                                                                                              {
                                                                                                uint64_t result = fprintf(v8, "%20s:\n", "pgCompressionBlocksInPG");
                                                                                                else {
                                                                                                  uint64_t v365 = v438;
                                                                                                }
                                                                                                if ((_DWORD)v365)
                                                                                                {
                                                                                                  for (uint64_t i162 = 0LL;
                                                                                                        i162 != v365;
                                                                                                        ++i162)
                                                                                                  {
                                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i162, v15[i162]);
                                                                                                  }
                                                                                                }
                                                                                              }

                                                                                              else
                                                                                              {
                                                                                                if ((v432 & 1) != 0 && v14 == 1140 || (v432 & 1) != 0 && v14 == 1141 || (v432 & 1) != 0 && v14 == 1200 || (v432 & 1) != 0 && v14 == 1080) {
                                                                                                  goto LABEL_81;
                                                                                                }
                                                                                                if ((v432 & 1) != 0 && v14 == 1105)
                                                                                                {
                                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "hostReadSequential");
                                                                                                  else {
                                                                                                    uint64_t v367 = v438;
                                                                                                  }
                                                                                                  if ((_DWORD)v367)
                                                                                                  {
                                                                                                    for (uint64_t i163 = 0LL;
                                                                                                          i163 != v367;
                                                                                                          ++i163)
                                                                                                    {
                                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i163, v15[i163]);
                                                                                                    }
                                                                                                  }
                                                                                                }

                                                                                                else if ((v432 & 1) != 0 && v14 == 1106)
                                                                                                {
                                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "GCReadSequential");
                                                                                                  else {
                                                                                                    uint64_t v369 = v438;
                                                                                                  }
                                                                                                  if ((_DWORD)v369)
                                                                                                  {
                                                                                                    for (uint64_t i164 = 0LL;
                                                                                                          i164 != v369;
                                                                                                          ++i164)
                                                                                                    {
                                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i164, v15[i164]);
                                                                                                    }
                                                                                                  }
                                                                                                }

                                                                                                else
                                                                                                {
                                                                                                  if ((v432 & 2) != 0 && v14 == 1118 || (v432 & 2) != 0 && v14 == 1121 || (v432 & 1) != 0 && v14 == 1123 || (v432 & 1) != 0 && v14 == 1124 || (v432 & 1) != 0 && v14 == 1125 || (v432 & 1) != 0 && v14 == 1126 || (v432 & 1) != 0 && v14 == 1137 || (v432 & 1) != 0 && v14 == 1138 || (v432 & 1) != 0 && v14 == 1156) {
                                                                                                    goto LABEL_81;
                                                                                                  }
                                                                                                  if ((v432 & 1) != 0 && v14 == 1116)
                                                                                                  {
                                                                                                    uint64_t result = fprintf(v8, "%20s:\n", "gcwamp");
                                                                                                    else {
                                                                                                      uint64_t v371 = v438;
                                                                                                    }
                                                                                                    if ((_DWORD)v371)
                                                                                                    {
                                                                                                      for (uint64_t i165 = 0LL;
                                                                                                            i165 != v371;
                                                                                                            ++i165)
                                                                                                      {
                                                                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i165, v15[i165]);
                                                                                                      }
                                                                                                    }
                                                                                                  }

                                                                                                  else
                                                                                                  {
                                                                                                    if ((v432 & 1) != 0 && v14 == 1157 || (v432 & 1) != 0 && v14 == 1158 || (v432 & 1) != 0 && v14 == 1164) {
                                                                                                      goto LABEL_81;
                                                                                                    }
                                                                                                    if ((v432 & 2) != 0 && v14 == 1159)
                                                                                                    {
                                                                                                      uint64_t result = fprintf(v8, "%20s:\n", "slcWLPerDipDelta");
                                                                                                      else {
                                                                                                        uint64_t v373 = v438;
                                                                                                      }
                                                                                                      if ((_DWORD)v373)
                                                                                                      {
                                                                                                        for (uint64_t i166 = 0LL;
                                                                                                              i166 != v373;
                                                                                                              ++i166)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i166, v15[i166]);
                                                                                                        }
                                                                                                      }
                                                                                                    }

                                                                                                    else if ((v432 & 2) != 0 && v14 == 1160)
                                                                                                    {
                                                                                                      uint64_t result = fprintf(v8, "%20s:\n", "slcWLPerDipAvgPEC");
                                                                                                      else {
                                                                                                        uint64_t v375 = v438;
                                                                                                      }
                                                                                                      if ((_DWORD)v375)
                                                                                                      {
                                                                                                        for (uint64_t i167 = 0LL;
                                                                                                              i167 != v375;
                                                                                                              ++i167)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i167, v15[i167]);
                                                                                                        }
                                                                                                      }
                                                                                                    }

                                                                                                    else if ((v432 & 2) != 0 && v14 == 1161)
                                                                                                    {
                                                                                                      uint64_t result = fprintf(v8, "%20s:\n", "slcWLPerDipSlack");
                                                                                                      else {
                                                                                                        uint64_t v377 = v438;
                                                                                                      }
                                                                                                      if ((_DWORD)v377)
                                                                                                      {
                                                                                                        for (uint64_t i168 = 0LL;
                                                                                                              i168 != v377;
                                                                                                              ++i168)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i168, v15[i168]);
                                                                                                        }
                                                                                                      }
                                                                                                    }

                                                                                                    else
                                                                                                    {
                                                                                                      if ((v432 & 2) != 0 && v14 == 1162 || (v432 & 2) != 0 && v14 == 1163) {
                                                                                                        goto LABEL_81;
                                                                                                      }
                                                                                                      if ((v432 & 2) != 0 && v14 == 1216)
                                                                                                      {
                                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "tlcWLPerDipAvgPEC");
                                                                                                        else {
                                                                                                          uint64_t v379 = v438;
                                                                                                        }
                                                                                                        if ((_DWORD)v379)
                                                                                                        {
                                                                                                          for (uint64_t i169 = 0LL;
                                                                                                                i169 != v379;
                                                                                                                ++i169)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i169, v15[i169]);
                                                                                                          }
                                                                                                        }
                                                                                                      }

                                                                                                      else if ((v432 & 2) != 0 && v14 == 1217)
                                                                                                      {
                                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "tlcWLPerDipMaxPEC");
                                                                                                        else {
                                                                                                          uint64_t v381 = v438;
                                                                                                        }
                                                                                                        if ((_DWORD)v381)
                                                                                                        {
                                                                                                          for (uint64_t i170 = 0LL;
                                                                                                                i170 != v381;
                                                                                                                ++i170)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i170, v15[i170]);
                                                                                                          }
                                                                                                        }
                                                                                                      }

                                                                                                      else if ((v432 & 2) != 0 && v14 == 1218)
                                                                                                      {
                                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "tlcWLPerDipMinPEC");
                                                                                                        else {
                                                                                                          uint64_t v383 = v438;
                                                                                                        }
                                                                                                        if ((_DWORD)v383)
                                                                                                        {
                                                                                                          for (uint64_t i171 = 0LL;
                                                                                                                i171 != v383;
                                                                                                                ++i171)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i171, v15[i171]);
                                                                                                          }
                                                                                                        }
                                                                                                      }

                                                                                                      else if ((v432 & 1) != 0 && v14 == 1147)
                                                                                                      {
                                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "gc_concurrent_dw_gc12");
                                                                                                        else {
                                                                                                          uint64_t v385 = v438;
                                                                                                        }
                                                                                                        if ((_DWORD)v385)
                                                                                                        {
                                                                                                          for (uint64_t i172 = 0LL;
                                                                                                                i172 != v385;
                                                                                                                ++i172)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i172, v15[i172]);
                                                                                                          }
                                                                                                        }
                                                                                                      }

                                                                                                      else if ((v432 & 1) != 0 && v14 == 1148)
                                                                                                      {
                                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "gc_concurrent_dw_gc1");
                                                                                                        else {
                                                                                                          uint64_t v387 = v438;
                                                                                                        }
                                                                                                        if ((_DWORD)v387)
                                                                                                        {
                                                                                                          for (uint64_t i173 = 0LL;
                                                                                                                i173 != v387;
                                                                                                                ++i173)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i173, v15[i173]);
                                                                                                          }
                                                                                                        }
                                                                                                      }

                                                                                                      else if ((v432 & 1) != 0 && v14 == 1149)
                                                                                                      {
                                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "gc_concurrent_dw_gc2");
                                                                                                        else {
                                                                                                          uint64_t v389 = v438;
                                                                                                        }
                                                                                                        if ((_DWORD)v389)
                                                                                                        {
                                                                                                          for (uint64_t i174 = 0LL;
                                                                                                                i174 != v389;
                                                                                                                ++i174)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i174, v15[i174]);
                                                                                                          }
                                                                                                        }
                                                                                                      }

                                                                                                      else
                                                                                                      {
                                                                                                        if ((v432 & 1) != 0 && v14 == 1178) {
                                                                                                          goto LABEL_81;
                                                                                                        }
                                                                                                        if ((v432 & 2) != 0 && v14 == 1179)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "%20s:\n", "gc_cur_dw_gc1");
                                                                                                          else {
                                                                                                            uint64_t v391 = v438;
                                                                                                          }
                                                                                                          if ((_DWORD)v391)
                                                                                                          {
                                                                                                            for (uint64_t i175 = 0LL;
                                                                                                                  i175 != v391;
                                                                                                                  ++i175)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i175, v15[i175]);
                                                                                                            }
                                                                                                          }
                                                                                                        }

                                                                                                        else if ((v432 & 2) != 0 && v14 == 1180)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "%20s:\n", "gc_cur_dw_gc2");
                                                                                                          else {
                                                                                                            uint64_t v393 = v438;
                                                                                                          }
                                                                                                          if ((_DWORD)v393)
                                                                                                          {
                                                                                                            for (uint64_t i176 = 0LL;
                                                                                                                  i176 != v393;
                                                                                                                  ++i176)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i176, v15[i176]);
                                                                                                            }
                                                                                                          }
                                                                                                        }

                                                                                                        else if ((v432 & 2) != 0 && v14 == 1181)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "%20s:\n", "gc_cur_dw_gc3");
                                                                                                          else {
                                                                                                            uint64_t v395 = v438;
                                                                                                          }
                                                                                                          if ((_DWORD)v395)
                                                                                                          {
                                                                                                            for (uint64_t i177 = 0LL;
                                                                                                                  i177 != v395;
                                                                                                                  ++i177)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i177, v15[i177]);
                                                                                                            }
                                                                                                          }
                                                                                                        }

                                                                                                        else if ((v432 & 1) != 0 && v14 == 1182)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "%20s:\n", "gc_tot_dw_gc1");
                                                                                                          else {
                                                                                                            uint64_t v397 = v438;
                                                                                                          }
                                                                                                          if ((_DWORD)v397)
                                                                                                          {
                                                                                                            for (uint64_t i178 = 0LL;
                                                                                                                  i178 != v397;
                                                                                                                  ++i178)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i178, v15[i178]);
                                                                                                            }
                                                                                                          }
                                                                                                        }

                                                                                                        else if ((v432 & 1) != 0 && v14 == 1183)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "%20s:\n", "gc_tot_dw_gc2");
                                                                                                          else {
                                                                                                            uint64_t v399 = v438;
                                                                                                          }
                                                                                                          if ((_DWORD)v399)
                                                                                                          {
                                                                                                            for (uint64_t i179 = 0LL;
                                                                                                                  i179 != v399;
                                                                                                                  ++i179)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i179, v15[i179]);
                                                                                                            }
                                                                                                          }
                                                                                                        }

                                                                                                        else
                                                                                                        {
                                                                                                          if ((v432 & 2) != 0 && v14 == 1184 || (v432 & 2) != 0 && v14 == 1185 || (v432 & 2) != 0 && v14 == 1186 || (v432 & 1) != 0 && v14 == 1187) {
                                                                                                            goto LABEL_81;
                                                                                                          }
                                                                                                          if ((v432 & 1) != 0 && v14 == 1168)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "poDetectPERemovalTotalCost");
                                                                                                            else {
                                                                                                              uint64_t v401 = v438;
                                                                                                            }
                                                                                                            if ((_DWORD)v401)
                                                                                                            {
                                                                                                              for (uint64_t i180 = 0LL;
                                                                                                                    i180 != v401;
                                                                                                                    ++i180)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i180, v15[i180]);
                                                                                                              }
                                                                                                            }
                                                                                                          }

                                                                                                          else if ((v432 & 1) != 0 && v14 == 1198)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "poDetectPERemovalMostSevereCost");
                                                                                                            else {
                                                                                                              uint64_t v403 = v438;
                                                                                                            }
                                                                                                            if ((_DWORD)v403)
                                                                                                            {
                                                                                                              for (uint64_t i181 = 0LL;
                                                                                                                    i181 != v403;
                                                                                                                    ++i181)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i181, v15[i181]);
                                                                                                              }
                                                                                                            }
                                                                                                          }

                                                                                                          else if ((v432 & 1) != 0 && v14 == 1169)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "poDetectEmptySpotRemovalTotalCost");
                                                                                                            else {
                                                                                                              uint64_t v405 = v438;
                                                                                                            }
                                                                                                            if ((_DWORD)v405)
                                                                                                            {
                                                                                                              for (uint64_t i182 = 0LL;
                                                                                                                    i182 != v405;
                                                                                                                    ++i182)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i182, v15[i182]);
                                                                                                              }
                                                                                                            }
                                                                                                          }

                                                                                                          else if ((v432 & 1) != 0 && v14 == 1171)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "poDetectEmptySpotRemovalAge");
                                                                                                            else {
                                                                                                              uint64_t v407 = v438;
                                                                                                            }
                                                                                                            if ((_DWORD)v407)
                                                                                                            {
                                                                                                              for (uint64_t i183 = 0LL;
                                                                                                                    i183 != v407;
                                                                                                                    ++i183)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i183, v15[i183]);
                                                                                                              }
                                                                                                            }
                                                                                                          }

                                                                                                          else if ((v432 & 1) != 0 && v14 == 1172)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "poDetectGBBedMostSevereCost");
                                                                                                            else {
                                                                                                              uint64_t v409 = v438;
                                                                                                            }
                                                                                                            if ((_DWORD)v409)
                                                                                                            {
                                                                                                              for (uint64_t i184 = 0LL;
                                                                                                                    i184 != v409;
                                                                                                                    ++i184)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i184, v15[i184]);
                                                                                                              }
                                                                                                            }
                                                                                                          }

                                                                                                          else if ((v432 & 1) != 0 && v14 == 1196)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "poDetectGBBedTotalCost");
                                                                                                            else {
                                                                                                              uint64_t v411 = v438;
                                                                                                            }
                                                                                                            if ((_DWORD)v411)
                                                                                                            {
                                                                                                              for (uint64_t i185 = 0LL;
                                                                                                                    i185 != v411;
                                                                                                                    ++i185)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i185, v15[i185]);
                                                                                                              }
                                                                                                            }
                                                                                                          }

                                                                                                          else if ((v432 & 1) != 0 && v14 == 1197)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "poDetectGBBedAge");
                                                                                                            else {
                                                                                                              uint64_t v413 = v438;
                                                                                                            }
                                                                                                            if ((_DWORD)v413)
                                                                                                            {
                                                                                                              for (uint64_t i186 = 0LL;
                                                                                                                    i186 != v413;
                                                                                                                    ++i186)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i186, v15[i186]);
                                                                                                              }
                                                                                                            }
                                                                                                          }

                                                                                                          else
                                                                                                          {
                                                                                                            if ((v432 & 1) != 0 && v14 == 1199 || (v432 & 1) != 0 && v14 == 1191 || (v432 & 1) != 0 && v14 == 1192 || (v432 & 1) != 0 && v14 == 1205) {
                                                                                                              goto LABEL_81;
                                                                                                            }
                                                                                                            if ((v432 & 1) != 0 && v14 == 1211)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "%20s:\n", "forcedAllocationSmallEraseQ");
                                                                                                              else {
                                                                                                                uint64_t v415 = v438;
                                                                                                              }
                                                                                                              if ((_DWORD)v415)
                                                                                                              {
                                                                                                                for (uint64_t i187 = 0LL;
                                                                                                                      i187 != v415;
                                                                                                                      ++i187)
                                                                                                                {
                                                                                                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i187, v15[i187]);
                                                                                                                }
                                                                                                              }
                                                                                                            }

                                                                                                            else if ((v432 & 1) != 0 && v14 == 1201)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "%20s:\n", "gcVerticalSuccssfulAlignments");
                                                                                                              else {
                                                                                                                uint64_t v417 = v438;
                                                                                                              }
                                                                                                              if ((_DWORD)v417)
                                                                                                              {
                                                                                                                for (uint64_t i188 = 0LL;
                                                                                                                      i188 != v417;
                                                                                                                      ++i188)
                                                                                                                {
                                                                                                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i188, v15[i188]);
                                                                                                                }
                                                                                                              }
                                                                                                            }

                                                                                                            else if ((v432 & 1) != 0 && v14 == 1202)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "%20s:\n", "gcVerticalNoAlignmentDueToMissingSegs");
                                                                                                              else {
                                                                                                                uint64_t v419 = v438;
                                                                                                              }
                                                                                                              if ((_DWORD)v419)
                                                                                                              {
                                                                                                                for (uint64_t i189 = 0LL;
                                                                                                                      i189 != v419;
                                                                                                                      ++i189)
                                                                                                                {
                                                                                                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i189, v15[i189]);
                                                                                                                }
                                                                                                              }
                                                                                                            }

                                                                                                            else
                                                                                                            {
                                                                                                              if ((v432 & 2) != 0 && v14 == 1225 || (v432 & 2) != 0 && v14 == 1226 || (v432 & 2) != 0 && v14 == 1227) {
                                                                                                                goto LABEL_81;
                                                                                                              }
                                                                                                              if ((v432 & 1) != 0 && v14 == 1228)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "%20s:\n", "HUPolicyWidthDown");
                                                                                                                else {
                                                                                                                  uint64_t v421 = v438;
                                                                                                                }
                                                                                                                if ((_DWORD)v421)
                                                                                                                {
                                                                                                                  for (uint64_t i190 = 0LL;
                                                                                                                        i190 != v421;
                                                                                                                        ++i190)
                                                                                                                  {
                                                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i190, v15[i190]);
                                                                                                                  }
                                                                                                                }
                                                                                                              }

                                                                                                              else if ((v432 & 1) != 0 && v14 == 1229)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "%20s:\n", "HUPolicyWidthUp");
                                                                                                                else {
                                                                                                                  uint64_t v423 = v438;
                                                                                                                }
                                                                                                                if ((_DWORD)v423)
                                                                                                                {
                                                                                                                  for (uint64_t i191 = 0LL;
                                                                                                                        i191 != v423;
                                                                                                                        ++i191)
                                                                                                                  {
                                                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i191, v15[i191]);
                                                                                                                  }
                                                                                                                }
                                                                                                              }

                                                                                                              else
                                                                                                              {
                                                                                                                if ((v432 & 2) != 0 && v14 == 1230 || (v432 & 2) != 0 && v14 == 1231 || (v432 & 1) != 0 && v14 == 1235 || (v432 & 1) != 0 && v14 == 1236 || (v432 & 1) != 0 && v14 == 1232 || (v432 & 1) != 0 && v14 == 1233 || (v432 & 1) != 0 && v14 == 1234) {
                                                                                                                  goto LABEL_81;
                                                                                                                }
                                                                                                                if ((v432 & 1) != 0 && v14 == 1224)
                                                                                                                {
                                                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "apfsValidLbaOvershoot");
                                                                                                                  else {
                                                                                                                    uint64_t v425 = v438;
                                                                                                                  }
                                                                                                                  if ((_DWORD)v425)
                                                                                                                  {
                                                                                                                    for (uint64_t i192 = 0LL;
                                                                                                                          i192 != v425;
                                                                                                                          ++i192)
                                                                                                                    {
                                                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i192, v15[i192]);
                                                                                                                    }
                                                                                                                  }
                                                                                                                }

                                                                                                                else if ((v432 & 1) != 0 && v14 == 1241)
                                                                                                                {
                                                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "s2rTimeHisto");
                                                                                                                  else {
                                                                                                                    uint64_t v427 = v438;
                                                                                                                  }
                                                                                                                  if ((_DWORD)v427)
                                                                                                                  {
                                                                                                                    for (uint64_t i193 = 0LL;
                                                                                                                          i193 != v427;
                                                                                                                          ++i193)
                                                                                                                    {
                                                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i193, v15[i193]);
                                                                                                                    }
                                                                                                                  }
                                                                                                                }

                                                                                                                else
                                                                                                                {
                                                                                                                  if ((v432 & 2) != 0 && v14 == 1247 || (v432 & 2) != 0 && v14 == 1248 || (v432 & 1) != 0 && v14 == 1254 || (v432 & 1) != 0 && v14 == 1255 || (v432 & 1) != 0 && v14 == 1256) {
                                                                                                                    goto LABEL_81;
                                                                                                                  }
                                                                                                                  if (*(_DWORD *)v435 && (_DWORD)v438)
                                                                                                                  {
                                                                                                                    if ((_DWORD)v438 == 1)
                                                                                                                    {
                                                                                                                      uint64_t result = fprintf(v8, "                KEY_%u:\t%llu\n");
                                                                                                                    }

                                                                                                                    else
                                                                                                                    {
                                                                                                                      printf("KEY_%u:\n", v14);
                                                                                                                      uint64_t v429 = 0LL;
                                                                                                                      else {
                                                                                                                        uint64_t v430 = v438;
                                                                                                                      }
                                                                                                                      do
                                                                                                                      {
                                                                                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", v429, v15[v429]);
                                                                                                                        ++v429;
                                                                                                                      }

                                                                                                                      while (v430 != v429);
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }

LABEL_82:
          unint64_t v10 = v23;
          a4 = v432;
          unsigned int v7 = v22;
          unint64_t v11 = v434;
          goto LABEL_32;
        }

        v116 = "TempSensorMin";
      }

      uint64_t result = fprintf(v8, "%20s:\n", v116);
      if ((_DWORD)v438) {
        uint64_t result = fprintf(v8, "                      [%d] = %llu\n");
      }
      goto LABEL_82;
    }

    uint64_t result = fprintf(v8, "%20s:\t%llu\n", "validLbas", *v15);
LABEL_32:
    a2 = &v15[v438];
    a3 = v17 - v438;
    if (!a3) {
      goto LABEL_3133;
    }
  }

  uint64_t result = fwrite("ASPUserClient: maxEl < elements", 0x1FuLL, 1uLL, v8);
LABEL_3133:
  if (v437)
  {
    uint64_t result = fprintf( v8,  "%20s:\t%f\n",  "WriteAmp",  (double)v436 * (double)((v13 * *(_DWORD *)&v435[4]) >> 12) / (double)v437);
    if (v12)
    {
      if ((_DWORD)v11) {
        uint64_t result = fprintf( v8,  "%20s:\t%f\n",  "IntermediateWriteAmp",  (double)v12 * (double)((v11 * v13) >> 12) / (double)v437);
      }
    }
  }

  if (v10) {
    uint64_t result = fprintf(v8, "%20s:\t%llu\n", "statsMagCalTime", (v10 >> 24));
  }
LABEL_3139:
  if (v7) {
    return fclose(v8);
  }
  return result;
}

uint64_t print_all_stats(char *a1)
{
  return print_asp_magazine_stats(a1, 0, 0);
}

uint64_t print_band_stats(char *a1)
{
  return print_band_stats_v2(a1, 0);
}

uint64_t print_band_stats_v2(char *a1, int a2)
{
  int v4 = sub_100037D78(0LL, 299, 0, &outputStruct);
  int v5 = outputStruct & 0xF;
  if (!v4) {
    int v5 = 1;
  }
  uint64_t v13 = 0LL;
  int outputStruct = 0LL;
  if (v5 != 2)
  {
    if (v5 == 3)
    {
      int v6 = (unsigned int *)sub_100037AD4(0LL, 297, &v13, 0, 1);
      int outputStruct = v6;
      if (v6)
      {
        unsigned int v7 = v6;
        sub_1000357E4(a1, (uint64_t)v6, v13);
LABEL_12:
        free(v7);
        return 1LL;
      }

      unint64_t v10 = __stderrp;
      unint64_t v11 = "Error: Cannot Extract Band Stats for ASP3\n";
      size_t v12 = 42LL;
      goto LABEL_16;
    }

LABEL_10:
    if (sub_100029A8C(7u, &outputStruct, &v13))
    {
      sub_100035BFC(a1, outputStruct, v13, a2);
      unsigned int v7 = outputStruct;
      goto LABEL_12;
    }

    unint64_t v10 = __stderrp;
    unint64_t v11 = "Error: IO NVMe Smart cmd failed to extract ASP excport stats!\n";
    size_t v12 = 62LL;
    goto LABEL_16;
  }

  if (!a2) {
    goto LABEL_10;
  }
  uint64_t v8 = (unsigned int *)sub_100037AD4(0LL, 262, &v13, 0, 1);
  int outputStruct = v8;
  if (v8)
  {
    unsigned int v7 = v8;
    sub_100035BFC(a1, v8, v13, 1);
    goto LABEL_12;
  }

  unint64_t v10 = __stderrp;
  unint64_t v11 = "Error: Cannot Extract Band Stats and Validity\n";
  size_t v12 = 46LL;
LABEL_16:
  fwrite(v11, v12, 1uLL, v10);
  return 0LL;
}

    if (!__filename) {
      return v8;
    }
LABEL_11:
    fclose(__stream);
    return v8;
  }

  size_t v22 = *(_DWORD *)(a2 + 4);
  unint64_t v23 = __filename;
  fwrite("===Grown Bad Blocks===\n", 0x17uLL, 1uLL, __stream);
  uint64_t v24 = v8;
  if ((_DWORD)v8)
  {
    uint64_t v13 = v8;
    do
    {
      int v14 = *v9;
      int v15 = v9[1];
      unsigned int v17 = *((_DWORD *)v9 + 1);
      unint64_t v16 = *((_DWORD *)v9 + 2);
      unint64_t v18 = *((_DWORD *)v9 + 6);
      unint64_t v19 = *((int *)v9 + 7);
      uint64_t v21 = *((_DWORD *)v9 + 3);
      uint64_t v20 = *((_DWORD *)v9 + 4);
      if (*((_DWORD *)v9 + 5) == 4095) {
        __sprintf_chk(v29, 0, 0xCuLL, "%s");
      }
      else {
        __sprintf_chk(v29, 0, 0xCuLL, "%u");
      }
      if (v18 << 24 == -2130706432) {
        __sprintf_chk(v28, 0, 0xCuLL, "%s");
      }
      else {
        __sprintf_chk(v28, 0, 0xCuLL, "%d");
      }
      fprintf( __stream,  "Bus: %u CE: %u CAU: %u Block: %u Cycles: %u Reason: %u Page: %s Temp: %s mode: %s\n",  v14,  v15,  v17,  v16,  v21,  v20,  v29,  v28,  v26);
      v9 += 16;
      --v13;
    }

    while (v13);
  }

  uint64_t v8 = v24;
  fprintf(__stream, "Grown Bad Blocks Count: %u\n", v24);
  fprintf(__stream, "Factory Bad Blocks Count: %u\n", v22);
  if (v23) {
    goto LABEL_11;
  }
  return v8;
}

void sub_1000357E4(char *__filename, uint64_t a2, unsigned int a3)
{
  int v33 = 0;
  uint64_t v32 = 0LL;
  int v31 = -1;
  uint64_t v30 = -1LL;
  int v29 = 0;
  uint64_t v28 = 0LL;
  int v27 = 0;
  uint64_t v26 = 0LL;
  int v25 = 0;
  uint64_t v24 = 0LL;
  unint64_t v21 = 0LL;
  if (__filename)
  {
    int v6 = fopen(__filename, "a");
    if (!v6)
    {
      fprintf(__stderrp, "Unable to open %s\n", __filename);
      return;
    }
  }

  else
  {
    int v6 = __stdoutp;
  }

  if (*(_DWORD *)(a2 + 8) != 1)
  {
    fprintf(__stderrp, "Version mismatch, expected 1 got %d\n");
LABEL_9:
    if (__filename) {
      fclose(v6);
    }
    return;
  }

  if (*(_DWORD *)a2 > a3)
  {
    fprintf(__stderrp, "Insufficient size, expected %d got %d\n");
    goto LABEL_9;
  }

  unsigned int v7 = *(_DWORD *)(a2 + 4);
  uint64_t v8 = (unsigned __int16 *)sub_100037AD4(0LL, 264, &v21, 0, 1);
  if (v8)
  {
    unint64_t v9 = v8;
    if (v21 >= 2 && 21 * (unint64_t)*v8 + 2 <= v21)
    {
      unint64_t v11 = (const char *)&xmmword_1000C4360;
      strcpy((char *)&xmmword_1000C4360, "USER PARTITION");
      strcpy((char *)qword_1000C437E, "INTERMEDIATE PARTITION");
      strcpy(byte_1000C439C, "SKINNY PARTITION");
      fwrite("Band stats:\n", 0xCuLL, 1uLL, v6);
      fwrite( "Flags: Bits/Cell (1 or 3), r: retrace, C: GCcan, M: GCmust, S: Special, R: GCrd, E: erased, I: toInvalidate\n",  0x6CuLL,  1uLL,  v6);
      int32x2_t v12 = *(int32x2_t *)(a2 + 12);
      __int32 v23 = v12.i32[0];
      int32x2_t v22 = vrev64_s32(v12);
      uint64_t v20 = v9;
      uint64_t v13 = (uint64_t)(v9 + 1);
      int v14 = sub_10003686C( v6,  (unsigned int *)(a2 + 20),  v7,  1u,  (uint64_t)&v22,  (uint64_t)&v24,  (uint64_t)&v32,  (uint64_t)&v30,  (uint64_t)&v28,  (uint64_t)&v26,  v13);
      int v15 = sub_10003686C( v6,  v14,  v7,  0,  (uint64_t)&v22,  (uint64_t)&v24,  (uint64_t)&v32,  (uint64_t)&v30,  (uint64_t)&v28,  (uint64_t)&v26,  v13);
      sub_10003686C( v6,  v15,  v7,  2u,  (uint64_t)&v22,  (uint64_t)&v24,  (uint64_t)&v32,  (uint64_t)&v30,  (uint64_t)&v28,  (uint64_t)&v26,  v13);
      for (unint64_t i = 0LL; i != 12; i += 4LL)
      {
        unsigned int v17 = *(_DWORD *)((char *)&v26 + i);
        if (v17)
        {
          int v18 = *(_DWORD *)((char *)&v28 + i) / v17;
          *(_DWORD *)((char *)&v28 + i) = v18;
          unsigned __int32 v19 = v22.u32[i / 4];
          fprintf( v6,  "%-23s: Erase Cycles: Max(%d, %d%% of EoL) Min(%d, %d%% of EoL) Avg(%d, %d%% of EoL)\n",  v11,  *(_DWORD *)((char *)&v32 + i),  100 * *(_DWORD *)((char *)&v32 + i) / v19,  *(_DWORD *)((char *)&v30 + i),  100 * *(_DWORD *)((char *)&v30 + i) / v19,  v18,  100 * v18 / v19);
          fprintf(v6, "%24s Max band age:    (%d)\n", " ", *(_DWORD *)((char *)&v24 + i));
          fprintf(v6, "%24s EoL erase cycles:(%d)\n", " ", v19);
        }

        v11 += 30;
      }

      if (__filename) {
        fclose(v6);
      }
      unint64_t v10 = v20;
    }

    else
    {
      fwrite("Flow list too small", 0x13uLL, 1uLL, __stderrp);
      if (__filename) {
        fclose(v6);
      }
      unint64_t v10 = v9;
    }

    free(v10);
  }

  else
  {
    fwrite("Can't get flow list", 0x13uLL, 1uLL, __stderrp);
    if (__filename) {
      fclose(v6);
    }
  }

void sub_100035BFC(char *__filename, unsigned int *a2, unsigned int a3, int a4)
{
  int v101 = 0;
  uint64_t v100 = 0LL;
  int v99 = -1;
  uint64_t v98 = -1LL;
  int v97 = 0;
  uint64_t v96 = 0LL;
  int v95 = 0;
  uint64_t v94 = 0LL;
  memset(v89, 0, sizeof(v89));
  v90[0] = 0;
  if (__filename)
  {
    unsigned int v7 = fopen(__filename, "a");
    if (!v7)
    {
      fprintf(__stderrp, "Unable to open %s\n", __filename);
      return;
    }
  }

  else
  {
    unsigned int v7 = __stdoutp;
  }

  fwrite("Band stats:\n", 0xCuLL, 1uLL, v7);
  fwrite("===========\n", 0xCuLL, 1uLL, v7);
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  fprintf(v7, "numBands: %d\n", *a2);
  if (a4) {
    int v10 = 8;
  }
  else {
    int v10 = 5;
  }
  if ((_DWORD)v9)
  {
    unsigned int v11 = v9 * v10 + 2 * v8 + 2;
    if (v11 <= a3)
    {
      int v12 = v11 + v8;
      unsigned int v13 = a3 >> 2;
      uint64_t v14 = (uint64_t)&a2[v11 + 2];
      int v15 = (int *)&a2[v11];
      if (a3 >> 2 == v12) {
        unint64_t v16 = v15;
      }
      else {
        unint64_t v16 = 0LL;
      }
      if ((_DWORD)v8 == 2)
      {
        unsigned int v18 = a2[2];
        unsigned int v20 = a2[3];
        v93[0] = v18;
        v92[0] = v20;
        if (v13 == v12) {
          int v21 = *v15;
        }
        else {
          int v21 = 30000;
        }
        LODWORD(v91[0]) = v21;
        strcpy((char *)&xmmword_1000C4360, "INTERMEDIATE PARTITION");
        unsigned int v22 = a2[5];
        v93[1] = a2[4];
        unsigned __int32 v19 = a2 + 6;
        v92[1] = v22;
        if (v13 == v12) {
          int v23 = *(_DWORD *)(v14 - 4);
        }
        else {
          int v23 = 750;
        }
        HIDWORD(v91[0]) = v23;
        strcpy((char *)qword_1000C437E, "USER PARTITION");
        if (!v21 || !v23)
        {
          unint64_t v16 = 0LL;
          v91[0] = 0x2EE00007530LL;
        }
      }

      else
      {
        if ((_DWORD)v8 != 1)
        {
          fprintf(v7, "ASP returned %d partitions, the tool does not know how to handle this many partitions\n");
          goto LABEL_69;
        }

        unsigned int v18 = a2[2];
        unsigned int v17 = a2[3];
        v93[0] = v18;
        unsigned __int32 v19 = a2 + 4;
        v92[0] = v17;
        if (v13 == v12)
        {
          LODWORD(v91[0]) = *v15;
          strcpy((char *)&xmmword_1000C4360, "USER PARTITION");
          if (LODWORD(v91[0]))
          {
            unint64_t v16 = v15;
          }

          else
          {
            unint64_t v16 = 0LL;
            LODWORD(v91[0]) = 3000;
          }
        }

        else
        {
          unint64_t v16 = 0LL;
          LODWORD(v91[0]) = 3000;
          strcpy((char *)&xmmword_1000C4360, "USER PARTITION");
        }
      }

      v83 = malloc(4 * v9);
      if (v83)
      {
        uint64_t v72 = v16;
        v73 = __filename;
        __streauint64_t m = v7;
        unint64_t v24 = 0LL;
        int v78 = 0;
        int v79 = 0;
        int v80 = 0;
        uint64_t v81 = v9;
        while (1)
        {
          if (a4)
          {
            int v80 = v19[5];
            int v79 = v19[6];
            v87 = v19 + 8;
            int v78 = v19[7];
          }

          else
          {
            v87 = v19 + 5;
          }

          uint64_t v25 = 0LL;
          unsigned int v26 = *v19;
          int v27 = v19[1];
          unsigned int v28 = v19[2];
          unsigned int v29 = v19[3];
          int v30 = (*v19 >> 1) & 1;
          int v31 = (*v19 >> 2) & 1;
          int v32 = (*v19 >> 3) & 1;
          unsigned int v33 = v19[4];
          int v34 = v26 & 1;
          int v35 = (v26 >> 4) & 3;
          v83[v24] = v29;
          uint64_t v36 = (const char *)&xmmword_1000C4360;
          do
          {
            unint64_t v37 = v93[v25];
            if (v24 >= v37 && v24 <= v92[v25])
            {
              if (v24 == v37)
              {
                int v75 = v27;
                int v76 = v31;
                int v77 = v30;
                int v74 = v35;
                fprintf(__stream, "\n%s:\n", v36);
                int v35 = v74;
                int v27 = v75;
                int v31 = v76;
                int v30 = v77;
              }

              if (v24 >= v18)
              {
                unsigned int v39 = *((_DWORD *)&v94 + v25);
                if (v39 <= v33) {
                  unsigned int v39 = v33;
                }
                *((_DWORD *)&v94 + v25) = v39;
                unsigned int v40 = *((_DWORD *)&v100 + v25);
                if (v40 <= v29) {
                  unsigned int v40 = v29;
                }
                *((_DWORD *)&v100 + v25) = v40;
                unsigned int v41 = *((_DWORD *)&v98 + v25);
                if (v41 >= v29) {
                  unsigned int v41 = v29;
                }
                *((_DWORD *)&v98 + v25) = v41;
                uint64_t v38 = v25;
                *((_DWORD *)&v96 + v25) += v29;
                goto LABEL_52;
              }

LABEL_44:
              fprintf(__stream, "band: %4d\tUtility Band\n", v24);
              goto LABEL_58;
            }

            ++v25;
            v36 += 30;
          }

          while (v8 != v25);
          if (v24 < v18) {
            goto LABEL_44;
          }
          uint64_t v38 = 0LL;
LABEL_52:
          unsigned int v42 = 100 * v29;
          if (v28 == -1)
          {
            v43 = __stream;
            fprintf( __stream,  "band:%4d\tflow:%2d\tvalid:    NA\terases:%5d [%3d%%] \tage:%5d\tGCcan:%d GCmust:%d GCrd: %d Special: %d mode:%d ",  v24,  v27,  v29,  v42 / *((_DWORD *)v91 + v38),  v33,  v34,  v30,  v31,  v32,  v35);
            if ((a4 & 1) != 0) {
              fwrite("Valid Sectors: NA Parity Sectors: NA Total Sectors: NA", 0x36uLL, 1uLL, __stream);
            }
          }

          else
          {
            double v71 = (float)v28 / 10.0;
            v43 = __stream;
            fprintf( __stream,  "band:%4d\tflow:%2d\tvalid:%6.1f\terases:%5d [%3d%%] \tage:%5d\tGCcan:%d GCmust:%d GCrd: %d Special: %d mode:%d ",  v24,  v27,  v71,  v29,  v42 / *((_DWORD *)v91 + v38),  v33,  v34,  v30,  v31,  v32,  v35);
            if (a4) {
              fprintf(__stream, "Valid Sectors: %d Parity Sectors: %d Total Sectors: %d", v79, v78, v80);
            }
          }

          fputc(10, v43);
LABEL_58:
          unsigned __int32 v19 = v87;
          if (++v24 == v81)
          {
            uint64_t v44 = "";
            if (!v72) {
              uint64_t v44 = "*using kASPNand constants!";
            }
            uint64_t v82 = v44;
            v45 = v92;
            uint64_t v46 = v93;
            id v47 = (unsigned int *)&v96;
            uint64_t v48 = (const char *)&xmmword_1000C4360;
            id v49 = &v100;
            uint64_t v50 = (unsigned int *)v91;
            v51 = &v98;
            uint64_t v52 = &v94;
            uint64_t v53 = v8;
            do
            {
              unsigned int v55 = *v45++;
              unsigned int v54 = v55;
              unsigned int v56 = *v46++;
              BOOL v57 = v54 >= v56;
              unsigned int v58 = v54 - v56;
              if (v57)
              {
                unsigned int v59 = *v47 / (v58 + 1);
                *id v47 = v59;
                uint64_t v86 = v46;
                uint64_t v88 = v45;
                unsigned int v60 = *v50;
                fprintf( __stream,  "%-23s: Erase Cycles: Max(%d, %d%% of EoL) Min(%d, %d%% of EoL) Avg(%d, %d%% of EoL)\n",  v48,  *(_DWORD *)v49,  100 * *(_DWORD *)v49 / v60,  *(_DWORD *)v51,  100 * *(_DWORD *)v51 / v60,  v59,  100 * v59 / v60);
                fprintf(__stream, "%24s Max band age:    (%d)\n", " ", *(_DWORD *)v52);
                fprintf(__stream, "%24s EoL erase cycles:(%d) %s\n", " ", v60, v82);
                uint64_t v46 = v86;
                v45 = v88;
              }

              ++v47;
              v48 += 30;
              id v49 = (uint64_t *)((char *)v49 + 4);
              ++v50;
              v51 = (uint64_t *)((char *)v51 + 4);
              uint64_t v52 = (uint64_t *)((char *)v52 + 4);
              --v53;
            }

            while (v53);
            BOOL v61 = (_DWORD)v8 != 1;
            unsigned int v62 = v93[v61];
            unsigned int v63 = v92[v61];
            if (v62 <= v63)
            {
              float v67 = (float)*(unsigned int *)((unint64_t)&v100 | (4 * v61));
              v65 = v73;
              uint64_t v66 = __stream;
              do
              {
                uint64_t v68 = &dword_100000018;
                while ((float)(*(float *)((char *)&unk_1000C3C78 + v68) * v67) > (float)v83[v62])
                {
                  v68 -= 4LL;
                  if (v68 == -4) {
                    goto LABEL_78;
                  }
                }

                ++*(_DWORD *)((char *)v89 + v68);
LABEL_78:
                ++v62;
              }

              while (v62 <= v63);
              int v64 = v90[0];
            }

            else
            {
              int v64 = 0;
              v65 = v73;
              uint64_t v66 = __stream;
            }

            fwrite("USER PARTITION:\n", 0x10uLL, 1uLL, v66);
            unint64_t v69 = 0LL;
            uint64_t v70 = (unsigned int *)((unint64_t)&v100 | (4 * v61));
            do
            {
              if (v69) {
                fprintf( v66,  "Erase Quantile [  %3.2f (%.2f - %.2f erases) ] = %d bands\n",  *(float *)((char *)&unk_1000C3C78 + v69 + 24) * 100.0,  (float)(*(float *)((char *)&unk_1000C3C78 + v69 + 24) * (float)*v70),  (float)(*(float *)((char *)&unk_1000C3C78 + v69 + 28) * (float)*v70),  v90[v69 / 4]);
              }
              else {
                fprintf( v66,  "Erase Quantile [  %3.2f (%.2f - %.2f erases) ] = %d bands\n",  *(float *)&dword_1000C3C90 * 100.0,  (float)(*(float *)&dword_1000C3C90 * (float)*v70),  (float)(*(float *)&dword_1000C3C90 * (float)*v70),  v64);
              }
              v69 -= 4LL;
            }

            while (v69 != -28LL);
            if (v65) {
              fclose(v66);
            }
            free(v83);
            return;
          }
        }
      }

      fprintf(v7, "could not allocate %d bytes\n");
LABEL_69:
      if (__filename) {
        fclose(v7);
      }
    }
  }

uint64_t sub_100036484(char *a1, int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v9 = 0LL;
  int v10 = 0LL;
  if (sub_100029A8C(8u, &v10, &v9))
  {
    if (a2) {
      *a3 = sub_100036534(a1, (uint64_t)v10, 1, a4);
    }
    else {
      sub_100036534(a1, (uint64_t)v10, 0, a4);
    }
    free(v10);
    return 1LL;
  }

  else
  {
    fwrite("Error: IO NVMe Smart cmd failed to extract ASP NAND defects!\n", 0x3DuLL, 1uLL, __stderrp);
    return 0LL;
  }

uint64_t sub_100036534(char *__filename, uint64_t a2, char a3, uint64_t a4)
{
  int v27 = 0;
  if (__filename)
  {
    __streauint64_t m = fopen(__filename, "a");
    if (!__stream)
    {
      fprintf(__stderrp, "Unable to open %s\n", __filename);
      return 0LL;
    }
  }

  else
  {
    __streauint64_t m = __stdoutp;
  }

  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if ((a3 & 1) != 0) {
    goto LABEL_10;
  }
  uint64_t v9 = (unsigned __int16 *)(a2 + 12);
  if (a4)
  {
    if ((_DWORD)v8)
    {
      int v10 = (_DWORD *)(a4 + 16);
      uint64_t v11 = *(unsigned int *)(a2 + 8);
      do
      {
        *(v10 - 4) = *(_DWORD *)v9;
        *(v10 - 3) = *((_DWORD *)v9 + 1);
        *(v10 - 2) = *((_DWORD *)v9 + 2);
        *(v10 - 1) = *((_DWORD *)v9 + 3);
        *int v10 = *((_DWORD *)v9 + 4);
        v10[1] = *((_DWORD *)v9 + 5);
        v10[2] = *((_DWORD *)v9 + 6);
        v10[3] = *((_DWORD *)v9 + 7);
        v10 += 8;
        v9 += 16;
        --v11;
      }

      while (v11);
    }

uint64_t print_grown_defects_ext(char *a1)
{
  return sub_100036484(a1, 0, 0LL, 0LL);
}

unsigned int *sub_10003686C( FILE *__stream, unsigned int *a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = a2;
  int v12 = __stream;
  unsigned int v13 = *a2;
  if (a4 == HIBYTE(*a2))
  {
    uint64_t v11 = a2 + 1;
    int v14 = v13 & 0xFFFFFF;
    if ((v13 & 0xFFFFFF) != 0)
    {
      uint64_t v16 = a11;
      uint64_t v17 = a4;
      fprintf(__stream, "==== %s ====\n", (const char *)&xmmword_1000C4360 + 30 * a4);
      fprintf(v12, "\t%d bands\n", v14);
      int v18 = 0;
      unsigned int v54 = v12;
      int v47 = v14;
      do
      {
        unsigned int v51 = v11[3];
        unsigned int v20 = v11[4];
        int v19 = v11[5];
        int v21 = v12;
        unsigned int v22 = v11[1];
        uint64_t v23 = 73LL;
        uint64_t v24 = 45LL;
        if ((v22 & 0x40) == 0) {
          uint64_t v23 = 45LL;
        }
        uint64_t v46 = v23;
        uint64_t v25 = 114LL;
        if ((v22 & 0x100) == 0) {
          uint64_t v25 = 45LL;
        }
        uint64_t v26 = 67LL;
        if ((v22 & 1) == 0) {
          uint64_t v26 = 45LL;
        }
        uint64_t v27 = 77LL;
        if ((v22 & 2) == 0) {
          uint64_t v27 = 45LL;
        }
        uint64_t v28 = 82LL;
        if ((v22 & 4) == 0) {
          uint64_t v28 = 45LL;
        }
        uint64_t v29 = 83LL;
        if ((v22 & 8) == 0) {
          uint64_t v29 = 45LL;
        }
        if ((v22 & 0x10) != 0) {
          uint64_t v24 = 69LL;
        }
        uint64_t v45 = v25;
        uint64_t v30 = 49LL;
        if ((v22 & 0x10) == 0) {
          uint64_t v30 = 51LL;
        }
        fprintf( v21,  "Band:%4d  Flow:%s [%d]  Flags:%c%c%c%c%c%c%c%c  ",  *v11,  (const char *)(v16 + 21 * v11[2]),  v11[2],  v30,  v45,  v26,  v27,  v28,  v29,  v24,  v46);
        if (v51 == -1 || !v20) {
          fwrite("Valid Sectors: NA   Total Sectors: NA  ", 0x27uLL, 1uLL, v54);
        }
        else {
          fprintf(v54, "Valid Sectors: %5d  Total Sectors: %5d [%d%%]  ", v19, v20, 100 * v19 / v20);
        }
        int v52 = v18;
        unsigned int v31 = v11[6];
        if ((v22 & 0x80) != 0)
        {
          v11 += 7;
          if (v31)
          {
            do
            {
              unsigned int v37 = *v11;
              unsigned int v38 = v11[1];
              unsigned int v39 = v11[2];
              unsigned int v40 = *(_DWORD *)(a6 + 4 * v17);
              if (v40 <= v39) {
                unsigned int v40 = v11[2];
              }
              *(_DWORD *)(a6 + 4 * v17) = v40;
              unsigned int v41 = *(_DWORD *)(a7 + 4 * v17);
              if (v41 <= v38) {
                unsigned int v41 = v38;
              }
              *(_DWORD *)(a7 + 4 * v17) = v41;
              unsigned int v42 = *(_DWORD *)(a8 + 4 * v17);
              if (v42 >= v38) {
                unsigned int v42 = v38;
              }
              *(_DWORD *)(a8 + 4 * v17) = v42;
              *(_DWORD *)(a9 + 4 * v17) += v38;
              v43 = v11 + 3;
              ++*(_DWORD *)(a10 + 4 * v17);
              fprintf( v54,  "\n\tBlock:%4d [Bork:%4d Dip: %4d Age:%5d Cycles:%5d EOL%%:%3d]",  v37,  v37 / a3,  v37 % a3,  v39,  v38,  100 * v38 / *(_DWORD *)(a5 + 4 * v17));
              v11 += 3;
              --v31;
            }

            while (v31);
            uint64_t v11 = v43;
            int v12 = v54;
            uint64_t v16 = a11;
            int v14 = v47;
          }

          else
          {
            int v12 = v54;
          }
        }

        else
        {
          int v32 = v11 + 8;
          unsigned int v33 = v11[7];
          fprintf(v54, "Age:%5d Cycles:%5d EOL%%:%3d\n", v33, v31, 100 * v31 / *(_DWORD *)(a5 + 4 * v17));
          unsigned int v34 = *(_DWORD *)(a6 + 4 * v17);
          if (v34 <= v33) {
            unsigned int v34 = v33;
          }
          *(_DWORD *)(a6 + 4 * v17) = v34;
          unsigned int v35 = *(_DWORD *)(a7 + 4 * v17);
          if (v35 <= v31) {
            unsigned int v35 = v31;
          }
          *(_DWORD *)(a7 + 4 * v17) = v35;
          unsigned int v36 = *(_DWORD *)(a8 + 4 * v17);
          if (v36 >= v31) {
            unsigned int v36 = v31;
          }
          *(_DWORD *)(a8 + 4 * v17) = v36;
          *(_DWORD *)(a9 + 4 * v17) += v31;
          ++*(_DWORD *)(a10 + 4 * v17);
          uint64_t v11 = v32;
          int v12 = v54;
        }

        fputc(10, v12);
        ++v18;
      }

      while (v52 + 1 != v14);
      fputc(10, v12);
    }
  }

  else
  {
    fwrite("Error parsing! missing header", 0x1DuLL, 1uLL, __stream);
  }

  return v11;
}

BOOL sub_100036BE4(char **a1, int a2, void *a3, size_t a4, char a5)
{
  size_t v11 = 0LL;
  unsigned int v7 = sub_10003773C(a1, a2, 0, 0, &v11, 0, a5);
  if (!v7) {
    return 0LL;
  }
  uint64_t v8 = v7;
  BOOL v9 = v11 >= a4;
  if (v11 >= a4) {
    memcpy(a3, v7, a4);
  }
  free(v8);
  return v9;
}

BOOL sub_100036C6C(char **a1, uint64_t a2)
{
  BOOL v4 = 1LL;
  if (!sub_100036BE4(a1, 186, (void *)a2, 0x180uLL, 1))
  {
    BOOL v4 = sub_100036BE4(a1, 55, v22, 0x48uLL, 0);
    if (v4)
    {
      *(_OWORD *)(a2 + 352) = 0u;
      *(_OWORD *)(a2 + 368) = 0u;
      *(_OWORD *)(a2 + 320) = 0u;
      *(_OWORD *)(a2 + 336) = 0u;
      *(_OWORD *)(a2 + 288) = 0u;
      *(_OWORD *)(a2 + 304) = 0u;
      *(_OWORD *)(a2 + 256) = 0u;
      *(_OWORD *)(a2 + 272) = 0u;
      *(_OWORD *)(a2 + 224) = 0u;
      *(_OWORD *)(a2 + 240) = 0u;
      *(_OWORD *)(a2 + 192) = 0u;
      *(_OWORD *)(a2 + 208) = 0u;
      *(_OWORD *)(a2 + 160) = 0u;
      *(_OWORD *)(a2 + 176) = 0u;
      *(_OWORD *)(a2 + 128) = 0u;
      *(_OWORD *)(a2 + 144) = 0u;
      *(_OWORD *)(a2 + 96) = 0u;
      *(_OWORD *)(a2 + 112) = 0u;
      *(_OWORD *)(a2 + 64) = 0u;
      *(_OWORD *)(a2 + 80) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_DWORD *)a2 = 1;
      uint64_t v5 = v23;
      unsigned int v6 = v25;
      *(void *)&__int128 v7 = v23;
      *((void *)&v7 + 1) = v25;
      *(_OWORD *)(a2 + 4) = v7;
      *(_OWORD *)(a2 + 20) = v26;
      *(_OWORD *)(a2 + 36) = v27;
      *(_OWORD *)(a2 + 52) = v28;
      *(void *)(a2 + 72) = 0LL;
      *(_DWORD *)(a2 + 68) = 0;
      uint64_t v8 = HIDWORD(v5);
      if (HIDWORD(v5) >= 2)
      {
        uint64_t v9 = 0LL;
        do
        {
          *(_BYTE *)(a2 + 80 + v9) = 2 * v9;
          ++v9;
        }

        while (HIDWORD(v5) >> 1 != v9);
        unint64_t v10 = 0LL;
        do
        {
          *(_BYTE *)(a2 + 112 + v10) = v10 >> 1;
          ++v10;
        }

        while (HIDWORD(v5) != v10);
      }

      if (HIDWORD(v5))
      {
        int v20 = v5;
        unsigned int v21 = v6;
        memset((void *)(a2 + 96), __c, HIDWORD(v5));
        LODWORD(v5) = v20;
        unsigned int v6 = v21;
      }

      if (v5 <= v6)
      {
        unint64_t v11 = 0LL;
        int v12 = 0;
        LODWORD(v13) = v6 / v5;
        else {
          uint64_t v13 = v13;
        }
        int v14 = (_BYTE *)(a2 + 128);
        do
        {
          uint64_t v15 = v8;
          uint64_t v16 = v14;
          uint64_t v17 = (unsigned __int8 *)(a2 + 96);
          if ((_DWORD)v8)
          {
            do
            {
              unsigned int v18 = *v17++;
              if (v11 < v18) {
                *uint64_t v16 = v12++;
              }
              v16 += 16;
              --v15;
            }

            while (v15);
          }

          ++v11;
          ++v14;
        }

        while (v11 != v13);
      }
    }
  }

  return v4;
}

BOOL sub_100036E24(char **a1, char *a2, uint64_t a3)
{
  BOOL v6 = 1LL;
  if (!sub_100036BE4(a1, 187, a2, 0x28uLL, 1))
  {
    BOOL v6 = sub_100036BE4(a1, 158, &v9, 0x20uLL, 0);
    if (v6)
    {
      *(_OWORD *)a2 = 0u;
      *((_OWORD *)a2 + 1) = 0u;
      *((void *)a2 + 4) = 0LL;
      *(_DWORD *)a2 = 1;
      *(_OWORD *)(a2 + 4) = v9;
      *(void *)(a2 + 20) = v10;
      *((_DWORD *)a2 + 7) = v11;
      int v7 = *(unsigned __int8 *)(a3 + 96);
      *((_DWORD *)a2 + 8) = v7;
      *((_DWORD *)a2 + 9) = v7 << (*(_DWORD *)(a3 + 8) > 1u);
    }
  }

  return v6;
}

BOOL print_geometry(char *__filename)
{
  if (__filename)
  {
    id v2 = fopen(__filename, "a");
    if (!v2)
    {
      fprintf(__stderrp, "Unable to open %s\n", __filename);
      return 0LL;
    }
  }

  else
  {
    id v2 = __stdoutp;
  }

  BOOL result = sub_100036C6C(0LL, (uint64_t)v16);
  if (result)
  {
    BOOL result = sub_100036E24(0LL, v10, (uint64_t)v16);
    if (result)
    {
      fwrite("===NAND Geometry===\n", 0x14uLL, 1uLL, v2);
      fprintf(v2, "cau_per_die: %d\n", v17);
      fprintf(v2, "num_bus: %d\n", v18);
      uint64_t v4 = 0LL;
      int v5 = 0;
      int v6 = -1;
      do
      {
        int v7 = &v16[v4];
        int v8 = v32[v4];
        if (!v32[v4]) {
          break;
        }
        int v9 = v7[112];
        if (v6 != v9)
        {
          fprintf(v2, "MSP %d:\n", v7[112]);
          int v5 = 0;
          int v8 = v7[96];
          int v6 = v9;
        }

        fprintf(v2, "   Dies in Ch %d: %d\n", v5++, v8);
        ++v4;
      }

      while (v4 != 16);
      fprintf(v2, "num_dip: %d\n", v19);
      fprintf(v2, "num_bands: %d\n", v20);
      fprintf(v2, "sec_per_page: %d\n", v21);
      fprintf(v2, "sec_per_full_band: %d\n", v22);
      fprintf(v2, "sec_per_full_band_slc: %d\n", v23);
      fprintf(v2, "bytes_per_sec_meta: %d\n", v24);
      fprintf(v2, "pages_per_block: %d\n", v25);
      fprintf(v2, "pages_per_block_slc: %d\n", v26);
      fprintf(v2, "pages_per_block0: %d\n", v27);
      fprintf(v2, "cell_type: %d\n", v28);
      fprintf(v2, "pages_in_read_verify: %d\n", v29);
      fprintf(v2, "eol_blocks: %d\n", v30);
      fprintf(v2, "block_pairing_scheme: %d\n", v31);
      fprintf(v2, "sec_per_die_multiplane : %d\n", v11);
      fprintf(v2, "num_die : %d\n", v12);
      fprintf(v2, "sol_eol_per_die : %d\n", v13);
      fprintf(v2, "technology : %d\n", v15);
      fprintf(v2, "max_tlc_gbb : %d\n", v14);
      if (__filename) {
        fclose(v2);
      }
      return 1LL;
    }
  }

  return result;
}

uint64_t sub_100037240(const char *a1)
{
  v22[0] = unk_10008655C;
  strcpy((char *)v22 + 11, "_ERR_PAYLOAD   ");
  strcpy(v21, "NAND_GEOM_ERR_BLOCK_INFO");
  qmemcpy(&v21[25], "NAND_GEOM_ERR_HEADER   ", 23);
  strcpy(v19, "NAND_GEOM_ERR_UNC     ");
  strcpy(v20, "NAND_GEOM_ERR_REFRESH ");
  strcpy(v17, "NAND_GEOM_ERR_NO_ERROR");
  strcpy(v18, "NAND_GEOM_ERR_BLANK   ");
  uint64_t result = (uint64_t)sub_100037AD4(0LL, 255, &v16, 0, 1);
  if (result)
  {
    uint64_t v3 = (unsigned __int16 *)result;
    if (a1)
    {
      uint64_t v4 = fopen(a1, "a");
      if (!v4)
      {
        fprintf(__stderrp, "Unable to open %s\n", a1);
        return 0LL;
      }
    }

    else
    {
      uint64_t v4 = __stdoutp;
    }

    int v14 = v3;
    int v5 = *(_DWORD *)v3;
    fprintf(v4, "num of errors in log: %d\n", v5);
    fwrite("======================\n", 0x17uLL, 1uLL, v4);
    if (v5)
    {
      int v6 = v14 + 2;
      do
      {
        fprintf(v4, "type: %s, length: %d\n", &v21[25 * *v6], v6[1]);
        fprintf(v4, "type: %s, length: %d\n", &v21[25 * v6[2]], v6[3]);
        fwrite("===========new error==============\n", 0x23uLL, 1uLL, v4);
        fprintf(v4, "MSP: %d\n", *((_DWORD *)v6 + 2) & 0xF);
        fprintf(v4, "channel: %d\n", (*((_DWORD *)v6 + 2) >> 4) & 1);
        fprintf(v4, "die: %d\n", (*((_DWORD *)v6 + 2) >> 5) & 0xF);
        fprintf(v4, "plane: %d\n", (*((_DWORD *)v6 + 2) >> 9) & 7);
        fprintf(v4, "block: %d\n", (*((_DWORD *)v6 + 2) >> 12) & 0x7FFF);
        fprintf(v4, "reason: %d\n", *((_DWORD *)v6 + 2) >> 27);
        fprintf(v4, "failPage: %d\n", *(unsigned __int16 *)((char *)v6 + 13));
        fprintf(v4, "numOfPages: %d\n", *(unsigned __int16 *)((char *)v6 + 15));
        fprintf(v4, "blockMode: %d\n", *((unsigned __int8 *)v6 + 17));
        fprintf(v4, "isReliabilty: %d\n", (*((unsigned __int8 *)v6 + 12) >> 1) & 1);
        unsigned int v7 = *((unsigned __int8 *)v6 + 12);
        int v15 = v5;
        if (v7 >> 4)
        {
          fprintf(v4, "cycles: %d\n", *(_DWORD *)((char *)v6 + 25));
          fprintf(v4, "age: %d\n", *(_DWORD *)((char *)v6 + 29));
          fprintf(v4, "timeStamp: %d\n", *(_DWORD *)((char *)v6 + 33));
          fprintf(v4, "readDisturbCounter: %d\n", *(unsigned __int16 *)((char *)v6 + 69));
          fprintf(v4, "flow: %d\n", *((unsigned __int8 *)v6 + 71));
          fprintf(v4, "minTemp: %d\n", *((unsigned __int8 *)v6 + 72));
          fprintf(v4, "maxTemp: %d\n", *((unsigned __int8 *)v6 + 73));
          unsigned int v8 = *((unsigned __int8 *)v6 + 12) >> 2;
        }

        else
        {
          unsigned int v8 = v7 >> 2;
        }

        if (v8 >= 3)
        {
          fprintf(v4, "numScannedPages: %d\n", v6[10]);
          fprintf(v4, "numFailures: %d\n", v6[11]);
        }

        int v9 = *(unsigned __int16 *)((char *)v6 + 15);
        uint64_t v10 = (unsigned __int16 *)((char *)v6 + v6[3] + 8);
        fprintf(v4, "type: %s, length: %d\n", &v21[25 * *v10], v10[1]);
        fwrite("============page status===========\n", 0x23uLL, 1uLL, v4);
        if (v9)
        {
          int v11 = 0;
          unsigned int v12 = 0;
          int v13 = v10 + 2;
          do
          {
            fprintf( v4,  "page: %d, status: 0x%x, (%s)\n",  v12,  ((3 << (v11 & 6)) & *((unsigned __int8 *)v13 + ((unint64_t)v12 >> 2))) >> (v11 & 6),  &v17[23 * (((3 << (v11 & 6)) & *((unsigned __int8 *)v13 + ((unint64_t)v12 >> 2))) >> (v11 & 6))]);
            ++v12;
            v11 += 2;
          }

          while (v9 != v12);
        }

        int v6 = (unsigned __int16 *)((char *)v6 + v6[1] + 4);
        int v5 = v15 - 1;
        fwrite("======================\n", 0x17uLL, 1uLL, v4);
        fwrite("======================\n", 0x17uLL, 1uLL, v4);
      }

      while (v15 != 1);
    }

    free(v14);
    if (__stdoutp != v4) {
      fclose(v4);
    }
    return 1LL;
  }

  return result;
}

void *sub_10003773C(char **a1, int a2, int a3, int a4, void *a5, char a6, char a7)
{
  int v13 = a1;
  int v21 = 0LL;
  *a5 = 0LL;
  if (!a1 && (!sub_100037EF8(&v21) || (int v13 = v21) == 0LL || !*((_DWORD *)v21 + 4)))
  {
    fwrite("Err: Finding internal NAND exporter failed for fetch tunnel buffer.\n", 0x44uLL, 1uLL, __stderrp);
LABEL_11:
    int v19 = 0LL;
    goto LABEL_14;
  }

  int v14 = a3;
  unsigned int v15 = sub_1000378D8((uint64_t)v13, a2, a3, a4, a7);
  if (!v15)
  {
    fprintf(__stderrp, "failed to get data size for cmd option %d\n", a2);
    goto LABEL_11;
  }

  uint64_t v16 = v15;
  size_t v17 = (vm_page_size + v15 - 1) / vm_page_size * vm_page_size;
  int v18 = valloc(v17);
  int v19 = v18;
  if (v18)
  {
    bzero(v18, v17);
    if ((sub_10003799C((uint64_t)v13, a2, v14, a4, v19, v17, a6, a7) & 1) != 0)
    {
      *a5 = v16;
    }

    else
    {
      free(v19);
      int v19 = 0LL;
      *a5 = 0LL;
    }
  }

  else
  {
    fwrite("can't allocate buffer!\n", 0x17uLL, 1uLL, __stderrp);
  }

uint64_t sub_1000378D8(uint64_t a1, int a2, int a3, int a4, char a5)
{
  kern_return_t v7;
  uint64_t result;
  size_t outputStructCnt;
  unsigned int outputStruct;
  _DWORD inputStruct[3];
  uint64_t v12;
  int v13;
  int v13 = 0;
  unsigned int v12 = 0LL;
  outputStructCnt = 4LL;
  inputStruct[0] = a2;
  inputStruct[1] = a3 | 1;
  inputStruct[2] = a4;
  unsigned int v7 = IOConnectCallStructMethod( *(_DWORD *)(a1 + 16),  *(_DWORD *)(a1 + 28),  inputStruct,  0x18uLL,  &outputStruct,  &outputStructCnt);
  if (v7)
  {
    if ((a5 & 1) == 0) {
      fprintf(__stderrp, "Error calling CoreDebugTunnel method! - 0x%X\n", v7);
    }
    return 0LL;
  }

  else
  {
    uint64_t result = outputStruct;
    if (!outputStruct && (a5 & 1) == 0)
    {
      fprintf(__stderrp, "SizeOnly for tunnel command 0x%x returned 0\n", a2);
      return outputStruct;
    }
  }

  return result;
}

uint64_t sub_10003799C(uint64_t a1, int a2, int a3, int a4, void *outputStruct, size_t a6, char a7, char a8)
{
  kern_return_t v15;
  size_t v16;
  _DWORD inputStruct[3];
  uint64_t v19;
  int v20;
  size_t outputStructCnt;
  LOBYTE(v9) = a7;
  outputStructCnt = a6;
  int v20 = 0;
  int v19 = 0LL;
  while (1)
  {
    inputStruct[0] = a2;
    inputStruct[1] = a3;
    inputStruct[2] = a4;
    unsigned int v15 = IOConnectCallStructMethod( *(_DWORD *)(a1 + 16),  *(_DWORD *)(a1 + 28),  inputStruct,  0x18uLL,  outputStruct,  &outputStructCnt);
    if (v15 != -536870211) {
      break;
    }
    if ((v9 & 1) == 0) {
      goto LABEL_10;
    }
    if ((a8 & 1) == 0) {
      fprintf(__stderrp, "CoreDebugTunnel 0x%x returned kIOReturnNoMemory\n", a2);
    }
    uint64_t v16 = outputStructCnt;
    outputStructCnt = vm_page_size;
    uint64_t v9 = 1LL;
    if (vm_page_size == v16) {
      return v9;
    }
  }

  if (!v15) {
    return 1LL;
  }
LABEL_10:
  if ((a8 & 1) == 0) {
    fprintf(__stderrp, "Error calling CoreDebugTunnel method! - 0x%X\n", v15);
  }
  return 0LL;
}

void *sub_100037ABC(char **a1, int a2, int a3, void *a4, char a5, char a6)
{
  return sub_10003773C(a1, a2, a3, 0, a4, a5, a6);
}

void *sub_100037AD4(char **a1, int a2, void *a3, char a4, char a5)
{
  return sub_10003773C(a1, a2, 0, 0, a3, a4, a5);
}

void *sub_100037AEC(int a1, void *a2)
{
  return sub_10003773C(0LL, a1, 0, 0, a2, 0, 0);
}

uint64_t sub_100037B0C(uint64_t a1, void *a2, void *a3, int a4, int a5, int a6, char a7, char a8)
{
  if (!a1)
  {
    int v18 = __stderrp;
    int v19 = "Err: Need a valid nand exporter here.\n";
    size_t v20 = 38LL;
    goto LABEL_10;
  }

  if (!a2 || !a3)
  {
    int v18 = __stderrp;
    int v19 = "Err: Need a valid outputbuffer and bufferSize";
    size_t v20 = 45LL;
    goto LABEL_10;
  }

  unsigned int v16 = sub_1000378D8(a1, a4, a5, a6, a8);
  if (!v16)
  {
    uint64_t v21 = 0LL;
    goto LABEL_16;
  }

  unsigned int v17 = v16;
  if (!*a3 || v16 <= *a3)
  {
    size_t v23 = (vm_page_size + v16 - 1) / vm_page_size * vm_page_size;
    bzero(a2, v23);
    if ((sub_10003799C(a1, a4, a5, a6, a2, v23, a7, a8) & 1) == 0) {
      goto LABEL_11;
    }
    uint64_t v21 = v17;
LABEL_16:
    uint64_t result = 1LL;
    goto LABEL_12;
  }

  int v18 = __stderrp;
  int v19 = "Err: Allocated buffer not large enough for the command.\n";
  size_t v20 = 56LL;
LABEL_10:
  fwrite(v19, v20, 1uLL, v18);
LABEL_11:
  uint64_t v21 = 0LL;
  uint64_t result = 0LL;
LABEL_12:
  *a3 = v21;
  return result;
}

uint64_t sub_100037C64(char **a1, int a2, int a3, int a4, void *outputStruct, size_t a6, char a7, char a8)
{
  unsigned int v17 = 0LL;
  if (a1 || sub_100037EF8(&v17) && (a1 = v17) != 0LL && *((_DWORD *)v17 + 4))
  {
    if ((sub_10003799C((uint64_t)a1, a2, a3, a4, outputStruct, a6, a7, a8) & 1) != 0)
    {
      uint64_t v15 = 1LL;
      goto LABEL_10;
    }

    fprintf(__stderrp, "Error fetching the tunnel output buffer for opcode [%d]\n", a2);
  }

  else
  {
    fwrite("Err: Finding internal NAND exporter failed.\n", 0x2CuLL, 1uLL, __stderrp);
  }

  uint64_t v15 = 0LL;
LABEL_10:
  if (v17) {
    sub_100038040((uint64_t)v17);
  }
  return v15;
}

uint64_t sub_100037D5C(char **a1, int a2, int a3, void *outputStruct, size_t a5, char a6, char a7)
{
  return sub_100037C64(a1, a2, 0, a3, outputStruct, a5, a6, a7);
}

uint64_t sub_100037D78(char **a1, int a2, int a3, void *outputStruct)
{
  kern_return_t v7;
  uint64_t v8;
  size_t outputStructCnt;
  char **v11;
  _DWORD inputStruct[3];
  uint64_t v13;
  int v14;
  int v13 = 0LL;
  int v14 = 0;
  outputStructCnt = 4LL;
  int v11 = 0LL;
  inputStruct[0] = a2;
  inputStruct[1] = 1;
  inputStruct[2] = a3;
  if (!outputStruct)
  {
    syslog(3, "Error: must provide valid pointer for output value");
    goto LABEL_11;
  }

  if (a1)
  {
    mach_port_t v6 = *((_DWORD *)a1 + 4);
  }

  else if (!sub_100037EF8(&v11) || (a1 = v11) == 0LL || (mach_port_t v6 = *((_DWORD *)v11 + 4)) == 0)
  {
    fwrite("Err: Finding internal NAND exporter failed.\n", 0x2CuLL, 1uLL, __stderrp);
    goto LABEL_11;
  }

  unsigned int v7 = IOConnectCallStructMethod(v6, *((_DWORD *)a1 + 8), inputStruct, 0x18uLL, outputStruct, &outputStructCnt);
  if (v7)
  {
    fprintf(__stderrp, "Error fetching the tunnel output buffer for opcode [%d], Result [0x%X]\n", a2, v7);
LABEL_11:
    unsigned int v8 = 0LL;
    goto LABEL_12;
  }

  unsigned int v8 = 1LL;
LABEL_12:
  if (v11) {
    sub_100038040((uint64_t)v11);
  }
  return v8;
}

void *sub_100037E80()
{
  return &unk_1000C3C98;
}

void *sub_100037E8C()
{
  return &unk_1000C3CA0;
}

void *sub_100037E98()
{
  return &unk_1000C3CA8;
}

void *sub_100037EA4()
{
  return &unk_1000C3CB8;
}

void *sub_100037EB0()
{
  return &unk_1000C3CC0;
}

void *sub_100037EBC()
{
  return &unk_1000C3CC8;
}

void *sub_100037EC8()
{
  return &unk_1000C3CD0;
}

void *sub_100037ED4()
{
  return &unk_1000C3CD8;
}

void *sub_100037EE0()
{
  return &unk_1000C3CB0;
}

void *sub_100037EEC()
{
  return &unk_1000C3CE0;
}

char *sub_100037EF8(char ***a1)
{
  io_connect_t connect = 0;
  *a1 = 0LL;
  int v2 = pthread_mutex_trylock(&stru_1000C3CE8);
  if (v2)
  {
    if (v2 != 16
      || (syslog(4, "Warning: NANDInfo: NANDExporter: serializeAccess already locked. waiting for lock !\n"),
          pthread_mutex_lock(&stru_1000C3CE8)))
    {
      uint64_t v3 = __error();
      syslog(3, "Error: NANDInfo: NANDExporter: pthread_mutex_trylock() (%d) failed \n", *v3);
      return 0LL;
    }
  }

  syslog(5, "NANDInfo: NANDExporter object locked ! \n");
  int v5 = &off_1000C3D28;
  uint64_t result = off_1000C3D28;
  if (!off_1000C3D28)
  {
LABEL_11:
    io_object_t v8 = 0;
    goto LABEL_12;
  }

  while (1)
  {
    mach_port_t v6 = IOServiceMatching(result);
    if (!v6) {
      goto LABEL_10;
    }
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v6);
    if (!MatchingService) {
      goto LABEL_10;
    }
    io_object_t v8 = MatchingService;
    if (!IOServiceOpen(MatchingService, mach_task_self_, 0, &connect)) {
      break;
    }
    IOServiceClose(connect);
    io_connect_t connect = 0;
    IOObjectRelease(v8);
LABEL_10:
    uint64_t v9 = v5[21];
    v5 += 21;
    uint64_t result = (char *)v9;
    if (!v9) {
      goto LABEL_11;
    }
  }

  syslog(5, "NANDInfo: findNandExporter_tunnel: Controller found: %s\n", *v5);
  uint64_t result = (char *)1;
LABEL_12:
  *((_DWORD *)v5 + 4) = connect;
  *((_DWORD *)v5 + 5) = v8;
  *a1 = v5;
  return result;
}

uint64_t sub_100038040(uint64_t a1)
{
  io_connect_t v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    IOServiceClose(v2);
    *(_DWORD *)(a1 + 16) = 0;
  }

  io_object_t v3 = *(_DWORD *)(a1 + 20);
  if (v3)
  {
    IOObjectRelease(v3);
    *(_DWORD *)(a1 + 20) = 0;
  }

  syslog(5, "NANDInfo: NANDExporter object unlocked ! \n");
  return pthread_mutex_unlock(&stru_1000C3CE8);
}

NSMutableArray *sub_100038094()
{
  return objc_alloc_init(&OBJC_CLASS___NSMutableArray);
}

id sub_1000380B0()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithCapacity:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithCapacity:",  4LL));
  id v1 = IOServiceMatching("IODTNVRAMDiags");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v1);
  if (MatchingService)
  {
    io_registry_entry_t v3 = MatchingService;
    CFTypeRef v4 = IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"CommonUsed", kCFAllocatorDefault, 1u);
    BOOL v5 = v4 != 0LL;
    if (v4)
    {
      mach_port_t v6 = v4;
      [v0 setObject:v4 forKey:@"commonused"];
      CFRelease(v6);
    }

    CFTypeRef v7 = IORegistryEntrySearchCFProperty(v3, "IOService", @"SystemUsed", kCFAllocatorDefault, 1u);
    if (v7)
    {
      io_object_t v8 = v7;
      [v0 setObject:v7 forKey:@"systemused"];
      CFRelease(v8);
      BOOL v5 = 1;
    }

    CFTypeRef v9 = IORegistryEntrySearchCFProperty(v3, "IOService", @"Generation", kCFAllocatorDefault, 1u);
    if (v9)
    {
      uint64_t v10 = v9;
      [v0 setObject:v9 forKey:@"norwrites"];
      CFRelease(v10);
      BOOL v5 = 1;
    }

    CFTypeRef v11 = IORegistryEntrySearchCFProperty(v3, "IOService", @"Version", kCFAllocatorDefault, 1u);
    if (v11)
    {
      unsigned int v12 = v11;
      [v0 setObject:v11 forKey:@"version"];
      CFRelease(v12);
      BOOL v5 = 1;
    }

    IOObjectRelease(v3);
    if (v5 && v0 != 0LL)
    {
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472LL;
      v15[2] = sub_1000382B4;
      v15[3] = &unk_10008C9E0;
      id v16 = v0;
      AnalyticsSendEventLazy(@"com.apple.massStorage.NANDInfo.NORWrites", v15);
    }
  }

  return v0;
}

id sub_1000382B4(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

NSMutableDictionary *NandInfoExtractToCA_runAllSteps(int a1)
{
  if (a1) {
    io_connect_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  }
  else {
    io_connect_t v2 = 0LL;
  }
  if (sub_100037EF8((char ***)&qword_1000C4338))
  {
    for (uint64_t i = 0LL; i != 9; ++i)
    {
      CFTypeRef v11 = objc_autoreleasePoolPush();
      unsigned int v12 = sub_100038420(i);
      int v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      if (v13 && v2)
      {
        int v14 = (void *)objc_claimAutoreleasedReturnValue([&off_1000BD330 objectAtIndexedSubscript:i]);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v13, v14);
      }

      objc_autoreleasePoolPop(v11);
    }

    uint64_t v15 = (void *)qword_1000C4328;
    qword_1000C4328 = 0LL;

    id v16 = (void *)qword_1000C4330;
    qword_1000C4330 = 0LL;

    if (qword_1000C4338)
    {
      sub_100038040(qword_1000C4338);
      qword_1000C4338 = 0LL;
    }

    if (!a1)
    {
      int v19 = 0LL;
      goto LABEL_17;
    }

    unsigned int v17 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", sub_100013198());
    int v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v18,  @"com.apple.NANDInfo.ErrorMessage");
  }

  else
  {
    sub_1000130E0("NandInfoExtractToCA_runAllSteps: Could not get nand_exporter_t", v3, v4, v5, v6, v7, v8, v9, v21);
  }

  int v19 = v2;
LABEL_17:

  return v19;
}

NSMutableDictionary *sub_100038420(uint64_t a1)
{
  if (!&_AnalyticsSendEventLazy)
  {
    uint64_t v243 = @"com.apple.NANDInfo.ErrorMessage";
    v244 = @"Unable call CA API AnalyticsSendEventLazy";
    id v1 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v244,  &v243,  1LL));
    return v1;
  }

  if ((unint64_t)[&off_1000BD330 count] <= a1)
  {
    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a1));
    NSLog(@"Invalid extraction step %@", v45);

    id v1 = 0LL;
    return v1;
  }

  uint64_t v3 = a1;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( [@"/Library/Caches/com.apple.xbs/Sources/EmbeddedStorageReporting_libs/NANDInfo/NANDInfo.m" lastPathComponent]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "NandInfoExtractToCA_runStep"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([&off_1000BD330 objectAtIndexedSubscript:a1]);
  NSLog(@"%@: %@: logging %@\n", v4, v5, v6);

  switch((int)a1)
  {
    case 0:
      id v1 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      char v21 = CopyWhitelistedNANDFTLInfo(0LL, v14, v15, v16, v17, v18, v19, v20);
      int v22 = off_1000C41B0;
      if (!v21)
      {
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v1,  "setObject:forKeyedSubscript:",  &__kCFBooleanFalse,  off_1000C41B0);
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v1,  "setObject:forKeyedSubscript:",  &__kCFBooleanFalse,  off_1000C41B8);
        v178 = off_1000C41C0;
        uint64_t v179 = v1;
        goto LABEL_162;
      }

      unsigned int IsEventUsed = AnalyticsIsEventUsed(off_1000C41B0);
      NSLog(@"NANDInfo: %@ enabled=%d\n", v22, IsEventUsed);
      int v24 = off_1000C41B0;
      v262 = _NSConcreteStackBlock;
      uint64_t v263 = 3221225472LL;
      v264 = sub_10003E498;
      uint64_t v265 = &unk_10008C9E0;
      int v25 = v21;
      v266 = v25;
      int v26 = sub_10003D540((uint64_t)v24, &v262);
      BOOL v27 = v26 == 0;
      if (v26) {
        int v28 = @"NANDInfo: SUCCESS in logging massStorage_NANDInfo_FTLCounters_1 using AnalyticsSendEventLazy\n";
      }
      else {
        int v28 = @"NANDInfo: FAILED to log massStorage_NANDInfo_FTLCounters_1 using AnalyticsSendEventLazy\n";
      }
      if (v27) {
        int v29 = &__kCFBooleanFalse;
      }
      else {
        int v29 = &__kCFBooleanTrue;
      }
      NSLog(&v28->isa);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v1, "setObject:forKeyedSubscript:", v29, off_1000C41B0);

      int v30 = off_1000C41B8;
      unsigned int v31 = AnalyticsIsEventUsed(off_1000C41B8);
      NSLog(@"NANDInfo: %@ enabled=%d\n", v30, v31);
      int v32 = off_1000C41B8;
      *(void *)&__int128 v256 = _NSConcreteStackBlock;
      *((void *)&v256 + 1) = 3221225472LL;
      *(void *)&__int128 v257 = sub_10003E4A0;
      *((void *)&v257 + 1) = &unk_10008C9E0;
      unsigned int v33 = v25;
      *(void *)&__int128 v258 = v33;
      int v34 = sub_10003D540((uint64_t)v32, &v256);
      BOOL v35 = v34 == 0;
      if (v34) {
        unsigned int v36 = @"NANDInfo: SUCCESS in logging massStorage_NANDInfo_FTLHistograms_1 using AnalyticsSendEventLazy\n";
      }
      else {
        unsigned int v36 = @"NANDInfo: FAILED to log massStorage_NANDInfo_FTLHistograms_1 using AnalyticsSendEventLazy\n";
      }
      if (v35) {
        unsigned int v37 = &__kCFBooleanFalse;
      }
      else {
        unsigned int v37 = &__kCFBooleanTrue;
      }
      NSLog(&v36->isa);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v1, "setObject:forKeyedSubscript:", v37, off_1000C41B8);

      unsigned int v38 = off_1000C41C0;
      unsigned int v39 = AnalyticsIsEventUsed(off_1000C41C0);
      NSLog(@"NANDInfo: %@ enabled=%d\n", v38, v39);
      unsigned int v40 = off_1000C41C0;
      *(void *)&__int128 v239 = _NSConcreteStackBlock;
      *((void *)&v239 + 1) = 3221225472LL;
      *(void *)&__int128 v240 = sub_10003E4A8;
      *((void *)&v240 + 1) = &unk_10008C9E0;
      *(void *)&__int128 v241 = v33;
      int v41 = sub_10003D540((uint64_t)v40, &v239);
      BOOL v42 = v41 == 0;
      if (v41) {
        v43 = @"NANDInfo: SUCCESS in logging kEventName_massStorage_NANDInfo_FTLHistograms_2 using AnalyticsSendEventLazy\n";
      }
      else {
        v43 = @"NANDInfo: FAILED to log kEventName_massStorage_NANDInfo_FTLHistograms_2 using AnalyticsSendEventLazy\n";
      }
      if (v42) {
        uint64_t v44 = &__kCFBooleanFalse;
      }
      else {
        uint64_t v44 = &__kCFBooleanTrue;
      }
      NSLog(&v43->isa);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v1, "setObject:forKeyedSubscript:", v44, off_1000C41C0);

      goto LABEL_163;
    case 1:
      id v1 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v245 = off_1000C41C8;
      v246 = off_1000C41D8;
      v222 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v245, 2LL));
      uint64_t v48 = CopyWhitelistedNANDMSPInfo();
      id v49 = v48;
      if (v48)
      {
        uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v48, "objectForKey:", off_1000C4088[0]));

        if (v50) {
          -[NSMutableDictionary removeObjectForKey:](v49, "removeObjectForKey:", off_1000C4088[0]);
        }
        uint64_t v205 = v3;
        id v219 = -[NSMutableDictionary count](v49, "count");
        __int128 v239 = 0u;
        __int128 v240 = 0u;
        __int128 v241 = 0u;
        __int128 v242 = 0u;
        id obj = v49;
        uint64_t v225 = (char *)-[NSMutableDictionary countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v239,  &v262,  16LL);
        unsigned int v51 = 0LL;
        if (v225)
        {
          uint64_t v216 = *(void *)v240;
          do
          {
            int v52 = 0LL;
            uint64_t v53 = v51;
            do
            {
              if (*(void *)v240 != v216) {
                objc_enumerationMutation(obj);
              }
              uint64_t v231 = v52;
              uint64_t v54 = *(void *)(*((void *)&v239 + 1) + 8LL * (void)v52);
              unsigned int v51 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](obj, "objectForKeyedSubscript:", v54));

              [v51 setObject:v54 forKeyedSubscript:off_1000C4248];
              unsigned int v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v219));
              [v51 setObject:v55 forKeyedSubscript:off_1000C4250];

              __int128 v237 = 0u;
              __int128 v238 = 0u;
              __int128 v235 = 0u;
              __int128 v236 = 0u;
              id v56 = v222;
              id v57 = [v56 countByEnumeratingWithState:&v235 objects:&v256 count:16];
              if (v57)
              {
                id v58 = v57;
                uint64_t v59 = *(void *)v236;
                do
                {
                  for (uint64_t i = 0LL; i != v58; uint64_t i = (char *)i + 1)
                  {
                    if (*(void *)v236 != v59) {
                      objc_enumerationMutation(v56);
                    }
                    uint64_t v61 = *(void *)(*((void *)&v235 + 1) + 8LL * (void)i);
                    unsigned int v62 = AnalyticsIsEventUsed(v61);
                    NSLog(@"NANDInfo: %@ enabled=%d\n", v61, v62);
                    v250 = (__CFString *)_NSConcreteStackBlock;
                    uint64_t v251 = 3221225472LL;
                    v252 = sub_10003E4B0;
                    uint64_t v253 = (__CFString *)&unk_10008C9E0;
                    v254 = v51;
                    if ((sub_10003D540(v61, &v250) & 1) != 0)
                    {
                      NSLog(@"NANDInfo: SUCCESS in logging %@ using AnalyticsSendEventLazy\n", v61);
                      unsigned int v63 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v1, "objectForKey:", v61));

                      if (!v63)
                      {
                        int v64 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
                        -[NSMutableDictionary setObject:forKeyedSubscript:]( v1,  "setObject:forKeyedSubscript:",  v64,  v61);
                      }

                      v65 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v1,  "objectForKeyedSubscript:",  v61));
                      uint64_t v66 = v65;
                      float v67 = &__kCFBooleanTrue;
                    }

                    else
                    {
                      NSLog(@"NANDInfo: FAILED to log %@ using AnalyticsSendEventLazy\n", v61);
                      uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v1, "objectForKey:", v61));

                      if (!v68)
                      {
                        unint64_t v69 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
                        -[NSMutableDictionary setObject:forKeyedSubscript:]( v1,  "setObject:forKeyedSubscript:",  v69,  v61);
                      }

                      v65 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v1,  "objectForKeyedSubscript:",  v61));
                      uint64_t v66 = v65;
                      float v67 = &__kCFBooleanFalse;
                    }

                    [v65 setObject:v67 forKeyedSubscript:v54];
                  }

                  id v58 = [v56 countByEnumeratingWithState:&v235 objects:&v256 count:16];
                }

                while (v58);
              }

              int v52 = v231 + 1;
              uint64_t v53 = v51;
            }

            while (v231 + 1 != v225);
            uint64_t v225 = (char *)-[NSMutableDictionary countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v239,  &v262,  16LL);
          }

          while (v225);
        }

        NSLog(@"NANDInfo: %@ completed (total_nof_msps:%lu)\n", off_1000C41C8, v219);
        NSLog(@"NANDInfo: %@ completed (total_nof_msps:%lu)\n", off_1000C41D8, v219);

        uint64_t v3 = v205;
      }

      else
      {
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v1,  "setObject:forKeyedSubscript:",  &__kCFBooleanFalse,  off_1000C41C8);
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v1,  "setObject:forKeyedSubscript:",  &__kCFBooleanFalse,  off_1000C41D8);
      }

      goto LABEL_176;
    case 2:
      id v1 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v70 = CopyWhitelistedStorageStats();
      double v71 = off_1000C41D0;
      if (!v70)
      {
        v190 = v1;
        uint64_t v181 = off_1000C41D0;
        goto LABEL_172;
      }

      unsigned int v72 = AnalyticsIsEventUsed(off_1000C41D0);
      NSLog(@"NANDInfo: %@ enabled=%d\n", v71, v72);
      v73 = off_1000C41D0;
      v262 = _NSConcreteStackBlock;
      uint64_t v263 = 3221225472LL;
      v264 = sub_10003E4B8;
      uint64_t v265 = &unk_10008C9E0;
      v266 = v70;
      int v74 = sub_10003D540((uint64_t)v73, &v262);
      BOOL v75 = v74 == 0;
      if (v74) {
        int v76 = @"NANDInfo: SUCCESS in logging massStorage_NANDInfo_StorageStats_1 using AnalyticsSendEventLazy\n";
      }
      else {
        int v76 = @"NANDInfo: FAILED to log massStorage_NANDInfo_StorageStats_1 using AnalyticsSendEventLazy\n";
      }
      if (v75) {
        int v77 = &__kCFBooleanFalse;
      }
      else {
        int v77 = &__kCFBooleanTrue;
      }
      NSLog(&v76->isa);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v1, "setObject:forKeyedSubscript:", v77, off_1000C41D0);

      goto LABEL_180;
    case 3:
      id v78 = sub_1000380B0();
      id v1 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(v78);
      goto LABEL_176;
    case 4:
      id v1 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      v250 = off_1000C41E8;
      uint64_t v251 = (uint64_t)off_1000C41F0;
      v252 = (id (*)(uint64_t))off_1000C41F8;
      uint64_t v253 = off_1000C4200;
      v254 = off_1000C4208;
      uint64_t v255 = off_1000C4210;
      uint64_t v223 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v250, 6LL));
      __int128 v239 = 0u;
      __int128 v240 = 0u;
      __int128 v241 = 0u;
      __int128 v242 = 0u;
      v226 = (char *)[&off_1000BD290 countByEnumeratingWithState:&v239 objects:&v262 count:16];
      if (!v226) {
        goto LABEL_94;
      }
      uint64_t v206 = a1;
      int v79 = 0LL;
      uint64_t v220 = *(void *)v240;
      while (1)
      {
        int v80 = 0LL;
        uint64_t v81 = v79;
        do
        {
          if (*(void *)v240 != v220) {
            objc_enumerationMutation(&off_1000BD290);
          }
          obja = v80;
          uint64_t v82 = *(void **)(*((void *)&v239 + 1) + 8LL * (void)v80);
          v83 = (void *)objc_claimAutoreleasedReturnValue([&off_1000BD290 objectForKeyedSubscript:v82]);
          id v84 = [v83 intValue];

          int v79 = CopySMagHistoryNANDFTLInfo(0LL, (uint64_t)v84, 2);
          __int128 v237 = 0u;
          __int128 v238 = 0u;
          __int128 v235 = 0u;
          __int128 v236 = 0u;
          id v232 = v223;
          id v85 = [v232 countByEnumeratingWithState:&v235 objects:&v256 count:16];
          if (v85)
          {
            id v86 = v85;
            uint64_t v87 = *(void *)v236;
            do
            {
              uint64_t v88 = 0LL;
              do
              {
                v89 = v1;
                if (*(void *)v236 != v87) {
                  objc_enumerationMutation(v232);
                }
                uint64_t v90 = *(void *)(*((void *)&v235 + 1) + 8LL * (void)v88);
                v91 = (void *)objc_claimAutoreleasedReturnValue( [@"/Library/Caches/com.apple.xbs/Sources/EmbeddedStorageReporting_libs/NANDInfo/NANDInfo.m" lastPathComponent]);
                uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "createAndLogSMagFTLFieldsToCoreAnalyticsForEvent"));
                unsigned int v93 = AnalyticsIsEventUsed(v90);
                NSLog(@"%@: %@: %@ enabled=%d\n", v91, v92, v90, v93);

                if (v79) {
                  goto LABEL_75;
                }
                uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue([0 objectForKey:@"com.apple.NANDInfo.IsStatMagSupported"]);
                if ([v94 intValue])
                {

LABEL_75:
                  uint64_t v96 = objc_autoreleasePoolPush();
                  int v97 = CopySMagNANDFTLCustomHistoryInfo(0);
                  if (v97) {
                    -[NSMutableDictionary addEntriesFromDictionary:](v79, "addEntriesFromDictionary:", v97);
                  }

                  objc_autoreleasePoolPop(v96);
                  -[NSMutableDictionary setObject:forKeyedSubscript:]( v79,  "setObject:forKeyedSubscript:",  v82,  @"ESR_Cadence");
                  uint64_t v245 = (__CFString *)_NSConcreteStackBlock;
                  v246 = (__CFString *)3221225472LL;
                  uint64_t v247 = sub_10003E4C0;
                  v248 = &unk_10008C9E0;
                  uint64_t v249 = v79;
                  char v98 = sub_10003D540(v90, &v245);
                  int v99 = (void *)objc_claimAutoreleasedReturnValue( [@"/Library/Caches/com.apple.xbs/Sources/EmbeddedStorageReporting_libs/NANDInfo/NANDInfo.m" lastPathComponent]);
                  uint64_t v100 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "createAndLogSMagFTLFieldsToCoreAnalyticsForEvent"));
                  int v101 = (void *)v100;
                  if ((v98 & 1) != 0)
                  {
                    NSLog( @"%@: %@: SUCCESS in logging (%@) %@ using AnalyticsSendEventLazy\n",  v99,  v100,  v82,  v90);

                    id v1 = v89;
                    uint64_t v102 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v89, "objectForKey:", v90));

                    if (!v102)
                    {
                      v103 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
                      -[NSMutableDictionary setObject:forKeyedSubscript:]( v89,  "setObject:forKeyedSubscript:",  v103,  v90);
                    }

                    uint64_t v104 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v89,  "objectForKeyedSubscript:",  v90));
                    v105 = v104;
                    uint64_t v106 = &__kCFBooleanTrue;
                  }

                  else
                  {
                    NSLog( @"%@: %@: FAILED to log (%@) %@ using AnalyticsSendEventLazy\n",  v99,  v100,  v82,  v90);

                    id v1 = v89;
                    v107 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v89, "objectForKey:", v90));

                    if (!v107)
                    {
                      uint64_t v108 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
                      -[NSMutableDictionary setObject:forKeyedSubscript:]( v89,  "setObject:forKeyedSubscript:",  v108,  v90);
                    }

                    uint64_t v104 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v89,  "objectForKeyedSubscript:",  v90));
                    v105 = v104;
                    uint64_t v106 = &__kCFBooleanFalse;
                  }

                  [v104 setObject:v106 forKeyedSubscript:v82];

                  v109 = v249;
                  goto LABEL_85;
                }

                unsigned __int8 v95 = [v82 isEqualToString:@"current"];

                if ((v95 & 1) != 0) {
                  goto LABEL_75;
                }
                id v1 = v89;
                uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v89, "objectForKey:", v90));

                if (!v110)
                {
                  v111 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
                  -[NSMutableDictionary setObject:forKeyedSubscript:](v89, "setObject:forKeyedSubscript:", v111, v90);
                }

                v109 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v89,  "objectForKeyedSubscript:",  v90));
                -[NSMutableDictionary setObject:forKeyedSubscript:]( v109,  "setObject:forKeyedSubscript:",  &__kCFBooleanFalse,  v82);
LABEL_85:

                uint64_t v88 = (char *)v88 + 1;
              }

              while (v86 != v88);
              id v112 = [v232 countByEnumeratingWithState:&v235 objects:&v256 count:16];
              id v86 = v112;
            }

            while (v112);
          }

          int v80 = obja + 1;
          uint64_t v81 = v79;
        }

        while (obja + 1 != v226);
        v226 = (char *)[&off_1000BD290 countByEnumeratingWithState:&v239 objects:&v262 count:16];
        if (!v226)
        {

          uint64_t v3 = v206;
LABEL_94:

LABEL_176:
          int v47 = &AnalyticsIsEventUsed_ptr;
          if (v1) {
            goto LABEL_177;
          }
LABEL_181:
          id v195 = objc_claimAutoreleasedReturnValue([&off_1000BD330 objectAtIndexedSubscript:v3]);
          [v195 UTF8String];
          sub_1000130E0( "%s: unable to log %s to CA",  v196,  v197,  v198,  v199,  v200,  v201,  v202,  (char)"/Library/Caches/com.apple.xbs/Sources/EmbeddedStorageReporting_libs/NANDInfo/NANDInfo.m");

          uint64_t v191 = (void *)objc_claimAutoreleasedReturnValue( [@"/Library/Caches/com.apple.xbs/Sources/EmbeddedStorageReporting_libs/NANDInfo/NANDInfo.m" lastPathComponent]);
          v192 = (void *)objc_claimAutoreleasedReturnValue([v47[48] stringWithUTF8String:"NandInfoExtractToCA_runStep"]);
          uint64_t v193 = (void *)objc_claimAutoreleasedReturnValue([&off_1000BD330 objectAtIndexedSubscript:v3]);
          NSLog(@"%@: %@: unable to log %@\n", v191, v192, v193);
          id v1 = 0LL;
          goto LABEL_182;
        }
      }

    case 5:
      uint64_t v207 = a1;
      uint64_t v217 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      v113 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v113,  "setObject:forKeyedSubscript:",  &off_1000BD5A0,  @"current");
      uint64_t v114 = 0LL;
      uint64_t v115 = 0LL;
      uint64_t v116 = 0xFFFFFFFFLL;
      do
      {
        uint64_t v117 = (void *)v115;
        v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v116));
        uint64_t v115 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@ 2-months", v118));

        uint64_t v119 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v114));
        v261[0] = v119;
        uint64_t v114 = (v114 + 1440);
        v120 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v114));
        v261[1] = v120;
        uint64_t v121 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v261, 2LL));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v113, "setObject:forKeyedSubscript:", v121, v115);

        uint64_t v116 = (v116 - 1);
      }

      while ((_DWORD)v116 != -7);
      uint64_t v122 = 0LL;
      uint64_t v123 = 0xFFFFFFFFLL;
      do
      {
        v124 = (void *)v115;
        uint64_t v125 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v123));
        uint64_t v115 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@ 6-months", v125));

        v126 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v122));
        v260[0] = v126;
        uint64_t v122 = (v122 + 4320);
        uint64_t v127 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v122));
        v260[1] = v127;
        v128 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v260, 2LL));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v113, "setObject:forKeyedSubscript:", v128, v115);

        uint64_t v123 = (v123 - 1);
      }

      while ((_DWORD)v123 != -8);
      v204 = (void *)v115;
      uint64_t v245 = off_1000C4228;
      v246 = off_1000C4230;
      uint64_t v247 = (id (*)(uint64_t))off_1000C4238;
      uint64_t v211 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v245, 3LL));
      __int128 v239 = 0u;
      __int128 v240 = 0u;
      __int128 v241 = 0u;
      __int128 v242 = 0u;
      uint64_t v213 = v113;
      id v212 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v213,  "countByEnumeratingWithState:objects:count:",  &v239,  &v262,  16LL);
      if (v212)
      {
        uint64_t v233 = 0LL;
        uint64_t v210 = *(void *)v240;
        id v1 = v217;
        while (1)
        {
          uint64_t v129 = 0LL;
          do
          {
            if (*(void *)v240 != v210) {
              objc_enumerationMutation(v213);
            }
            uint64_t v214 = v129;
            v130 = *(void **)(*((void *)&v239 + 1) + 8 * v129);
            uint64_t v131 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v213, "objectForKeyedSubscript:", v130));
            v132 = (void *)objc_claimAutoreleasedReturnValue([v131 objectAtIndexedSubscript:0]);
            unsigned int v227 = [v132 unsignedIntValue];

            uint64_t v133 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v213, "objectForKeyedSubscript:", v130));
            v134 = (void *)objc_claimAutoreleasedReturnValue([v133 objectAtIndexedSubscript:1]);
            unsigned int v224 = [v134 unsignedIntValue];

            __int128 v237 = 0u;
            __int128 v238 = 0u;
            __int128 v235 = 0u;
            __int128 v236 = 0u;
            id v215 = v211;
            id objb = [v215 countByEnumeratingWithState:&v235 objects:&v256 count:16];
            if (objb)
            {
              uint64_t v221 = *(void *)v236;
              do
              {
                uint64_t v135 = 0LL;
                do
                {
                  if (*(void *)v236 != v221) {
                    objc_enumerationMutation(v215);
                  }
                  uint64_t v136 = *(void *)(*((void *)&v235 + 1) + 8LL * (void)v135);
                  uint64_t v137 = (void *)objc_claimAutoreleasedReturnValue( [@"/Library/Caches/com.apple.xbs/Sources/EmbeddedStorageReporting_libs/NANDInfo/NANDInfo.m" lastPathComponent]);
                  v138 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "createAndLogSMagHistoryFTLFieldsToCoreAnalyticsForEvent"));
                  unsigned int v139 = AnalyticsIsEventUsed(v136);
                  NSLog(@"%@: %@: %@ enabled=%d\n", v137, v138, v136, v139);

                  v140 = objc_autoreleasePoolPush();
                  uint64_t v141 = CopySMagHistoryNANDFTLInfo(v227, v224, 2);

                  uint64_t v233 = v141;
                  if (v141) {
                    goto LABEL_113;
                  }
                  v142 = (void *)objc_claimAutoreleasedReturnValue([0 objectForKey:@"com.apple.NANDInfo.IsStatMagSupported"]);
                  if ([v142 intValue])
                  {

                    uint64_t v141 = 0LL;
LABEL_113:
                    -[NSMutableDictionary setObject:forKeyedSubscript:]( v141,  "setObject:forKeyedSubscript:",  v130,  @"ESR_Cadence");
                    v250 = (__CFString *)_NSConcreteStackBlock;
                    uint64_t v251 = 3221225472LL;
                    v252 = sub_10003E4C8;
                    uint64_t v253 = (__CFString *)&unk_10008C9E0;
                    v254 = v141;
                    char v144 = sub_10003D540(v136, &v250);
                    uint64_t v145 = (void *)objc_claimAutoreleasedReturnValue( [@"/Library/Caches/com.apple.xbs/Sources/EmbeddedStorageReporting_libs/NANDInfo/NANDInfo.m" lastPathComponent]);
                    uint64_t v146 = objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "createAndLogSMagHistoryFTLFieldsToCoreAnalyticsForEvent"));
                    uint64_t v147 = (void *)v146;
                    if ((v144 & 1) != 0)
                    {
                      NSLog( @"%@: %@: SUCCESS in logging (%@) %@ using AnalyticsSendEventLazy\n",  v145,  v146,  v130,  v136);

                      id v1 = v217;
                      v148 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v217, "objectForKey:", v136));

                      if (!v148)
                      {
                        uint64_t v149 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
                        -[NSMutableDictionary setObject:forKeyedSubscript:]( v217,  "setObject:forKeyedSubscript:",  v149,  v136);
                      }

                      v150 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v217,  "objectForKeyedSubscript:",  v136));
                      uint64_t v151 = v150;
                      v152 = &__kCFBooleanTrue;
                    }

                    else
                    {
                      NSLog( @"%@: %@: FAILED in logging (%@) %@ using AnalyticsSendEventLazy\n",  v145,  v146,  v130,  v136);

                      id v1 = v217;
                      uint64_t v153 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v217, "objectForKey:", v136));

                      if (!v153)
                      {
                        v154 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
                        -[NSMutableDictionary setObject:forKeyedSubscript:]( v217,  "setObject:forKeyedSubscript:",  v154,  v136);
                      }

                      v150 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v217,  "objectForKeyedSubscript:",  v136));
                      uint64_t v151 = v150;
                      v152 = &__kCFBooleanFalse;
                    }

                    [v150 setObject:v152 forKeyedSubscript:v130];

                    uint64_t v155 = v254;
                    goto LABEL_121;
                  }

                  unsigned __int8 v143 = [v130 isEqualToString:@"current"];

                  uint64_t v141 = 0LL;
                  if ((v143 & 1) != 0) {
                    goto LABEL_113;
                  }
                  v156 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v217, "objectForKey:", v136));

                  if (!v156)
                  {
                    uint64_t v157 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
                    -[NSMutableDictionary setObject:forKeyedSubscript:]( v217,  "setObject:forKeyedSubscript:",  v157,  v136);
                  }

                  uint64_t v155 = (__CFString *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v217,  "objectForKeyedSubscript:",  v136));
                  -[__CFString setObject:forKeyedSubscript:]( v155,  "setObject:forKeyedSubscript:",  &__kCFBooleanFalse,  v130);
                  id v1 = v217;
LABEL_121:

                  objc_autoreleasePoolPop(v140);
                  uint64_t v135 = (char *)v135 + 1;
                }

                while (objb != v135);
                id v158 = [v215 countByEnumeratingWithState:&v235 objects:&v256 count:16];
                id objb = v158;
              }

              while (v158);
            }

            uint64_t v129 = v214 + 1;
            int v47 = &AnalyticsIsEventUsed_ptr;
          }

          while ((id)(v214 + 1) != v212);
          id v212 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v213,  "countByEnumeratingWithState:objects:count:",  &v239,  &v262,  16LL);
          if (!v212) {
            goto LABEL_168;
          }
        }
      }

      uint64_t v233 = 0LL;
      int v47 = &AnalyticsIsEventUsed_ptr;
      id v1 = v217;
LABEL_168:

      uint64_t v3 = v207;
      if (!v1) {
        goto LABEL_181;
      }
LABEL_177:
      uint64_t v191 = (void *)objc_claimAutoreleasedReturnValue( [@"/Library/Caches/com.apple.xbs/Sources/EmbeddedStorageReporting_libs/NANDInfo/NANDInfo.m" lastPathComponent]);
      v192 = (void *)objc_claimAutoreleasedReturnValue([v47[48] stringWithUTF8String:"NandInfoExtractToCA_runStep"]);
      uint64_t v193 = (void *)objc_claimAutoreleasedReturnValue([&off_1000BD330 objectAtIndexedSubscript:v3]);
      NSLog(@"%@: %@: successfully logged %@\n", v191, v192, v193);
LABEL_182:

      return v1;
    case 6:
      uint64_t v159 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      id v1 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      v160 = sub_10003D5E8();
      uint64_t v161 = (void *)objc_claimAutoreleasedReturnValue(v160);
      if (v161)
      {
        v218 = v1;
        uint64_t v208 = v3;
        unsigned int v162 = AnalyticsIsEventUsed(off_1000C41E0);
        NSLog(@"NANDInfo: kEventName_massStorage_NANDInfo_XNUStats_NANDViews_1 enabled=%d\n", v162);
        __int128 v258 = 0u;
        __int128 v259 = 0u;
        __int128 v256 = 0u;
        __int128 v257 = 0u;
        id v234 = v161;
        id v163 = v161;
        id v164 = [v163 countByEnumeratingWithState:&v256 objects:&v262 count:16];
        if (v164)
        {
          id v165 = v164;
          id v166 = 0LL;
          uint64_t v167 = *(void *)v257;
          do
          {
            for (uint64_t j = 0LL; j != v165; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v257 != v167) {
                objc_enumerationMutation(v163);
              }
              uint64_t v169 = *(void *)(*((void *)&v256 + 1) + 8LL * (void)j);
              v170 = (void *)objc_claimAutoreleasedReturnValue([v163 objectForKey:v169]);

              uint64_t v171 = off_1000C41E0;
              *(void *)&__int128 v239 = _NSConcreteStackBlock;
              *((void *)&v239 + 1) = 3221225472LL;
              *(void *)&__int128 v240 = sub_10003E4D0;
              *((void *)&v240 + 1) = &unk_10008C9E0;
              id v166 = v170;
              *(void *)&__int128 v241 = v166;
              int v172 = sub_10003D540((uint64_t)v171, &v239);
              BOOL v173 = v172 == 0;
              if (v172) {
                v174 = @"NANDInfo: SUCCESS in logging kEventName_massStorage_NANDInfo_XNUStats_NANDViews_1 using AnalyticsSendEventLazy\n";
              }
              else {
                v174 = @"NANDInfo: FAILED to log kEventName_massStorage_NANDInfo_XNUStats_NANDViews_1 using AnalyticsSendEventLazy\n";
              }
              if (v173) {
                uint64_t v175 = &__kCFBooleanFalse;
              }
              else {
                uint64_t v175 = &__kCFBooleanTrue;
              }
              NSLog(&v174->isa);
              -[NSMutableDictionary setObject:forKeyedSubscript:](v159, "setObject:forKeyedSubscript:", v175, v169);
            }

            id v165 = [v163 countByEnumeratingWithState:&v256 objects:&v262 count:16];
          }

          while (v165);
        }

        else
        {
          id v166 = 0LL;
        }

        id v1 = v218;
        -[NSMutableDictionary setObject:forKeyedSubscript:](v218, "setObject:forKeyedSubscript:", v159, off_1000C41E0);

        uint64_t v3 = v208;
        uint64_t v161 = v234;
      }

      else
      {
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v159,  "setObject:forKeyedSubscript:",  &__kCFBooleanFalse,  @"current");
        -[NSMutableDictionary setObject:forKeyedSubscript:](v1, "setObject:forKeyedSubscript:", v159, off_1000C41E0);
      }

      goto LABEL_176;
    case 7:
      v176 = sub_100039E00(dword_1000C4340, v7, v8, v9, v10, v11, v12, v13);
      char v21 = (void *)objc_claimAutoreleasedReturnValue(v176);
      id v1 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      if (!v21
        || ![v21 hasNewErrors]
        || (dword_1000C4340 = [v21 curNumErrorsInPayload],
            unsigned int v177 = AnalyticsIsEventUsed(off_1000C4220),
            NSLog(@"NANDInfo: kEventName_massStorage_NANDInfo_GeomErrorPayload enabled=%d\n", v177),
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v1,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  off_1000C4220),  ([v21 iteratePerPageDictsForMaxPagesWithStatus:12 iteratorCallBack:&stru_10008CA48] & 1) == 0))
      {
        v178 = off_1000C4220;
        uint64_t v179 = v1;
LABEL_162:
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v179,  "setObject:forKeyedSubscript:",  &__kCFBooleanFalse,  v178);
      }

LABEL_163:
      goto LABEL_176;
    case 8:
      id v1 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      v180 = sub_100038094();
      uint64_t v70 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(v180);
      uint64_t v181 = off_1000C4240;
      if (v70)
      {
        unsigned int v182 = AnalyticsIsEventUsed(off_1000C4240);
        NSLog( @"NANDInfo: createAndLogUSBStorageTelemetryToCoreAnalyticsForEvent: kEventName_massStorage_USBStorageInfo_Count ers_1 enabled=%d\n",  v182);
        __int128 v258 = 0u;
        __int128 v259 = 0u;
        __int128 v256 = 0u;
        __int128 v257 = 0u;
        uint64_t v183 = v70;
        id v184 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v183,  "countByEnumeratingWithState:objects:count:",  &v256,  &v262,  16LL);
        if (v184)
        {
          id v185 = v184;
          uint64_t v209 = v3;
          uint64_t v186 = *(void *)v257;
          do
          {
            for (uint64_t k = 0LL; k != v185; uint64_t k = (char *)k + 1)
            {
              if (*(void *)v257 != v186) {
                objc_enumerationMutation(v183);
              }
              uint64_t v188 = *(void *)(*((void *)&v256 + 1) + 8LL * (void)k);
              *(void *)&__int128 v239 = _NSConcreteStackBlock;
              *((void *)&v239 + 1) = 3221225472LL;
              *(void *)&__int128 v240 = sub_10003E564;
              *((void *)&v240 + 1) = &unk_10008C9E0;
              *(void *)&__int128 v241 = v188;
              uint64_t v189 = sub_10003D540((uint64_t)off_1000C4240, &v239);
              if ((_DWORD)v189) {
                NSLog(@"NANDInfo: SUCCESS in logging kEventName_massStorage_USBStorageInfo_Counters using AnalyticsSendEventLazy\n");
              }
              else {
                NSLog(@"NANDInfo: FAILED to log kEventName_massStorage_USBStorageInfo_Counters using AnalyticsSendEventLazy\n");
              }
            }

            id v185 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v183,  "countByEnumeratingWithState:objects:count:",  &v256,  &v262,  16LL);
          }

          while (v185);
          uint64_t v3 = v209;
        }

        else
        {
          uint64_t v189 = 1LL;
        }

        v194 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v189));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v1, "setObject:forKeyedSubscript:", v194, off_1000C4240);
      }

      else
      {
        v190 = v1;
LABEL_172:
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v190,  "setObject:forKeyedSubscript:",  &__kCFBooleanFalse,  v181);
      }

LABEL_180:
      int v47 = &AnalyticsIsEventUsed_ptr;
      if (!v1) {
        goto LABEL_181;
      }
      goto LABEL_177;
    default:
      uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([&off_1000BD330 objectAtIndexedSubscript:a1]);
      NSLog(@"Unexpected step %@", v46);

      int v47 = &AnalyticsIsEventUsed_ptr;
      goto LABEL_181;
  }

NANDInfo_GeomErrorPayloadManager *sub_100039E00( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v32 = 0LL;
  unsigned int v33 = 0LL;
  uint64_t v9 = (char **)qword_1000C4338;
  if (qword_1000C4338)
  {
    unsigned int v33 = (char **)qword_1000C4338;
  }

  else
  {
    if (!sub_100037EF8(&v33))
    {
      char v21 = "_getGeomErrorPayloadBuffer: Could not get nand_exporter_t";
      goto LABEL_11;
    }

    uint64_t v9 = v33;
  }

  if (!*((_DWORD *)v9 + 4))
  {
    char v21 = "_getGeomErrorPayloadBuffer: No io_connection exist";
LABEL_11:
    sub_1000130E0(v21, a2, a3, a4, a5, a6, a7, a8, v32);
    uint64_t v20 = 0LL;
    uint64_t v19 = 0LL;
    goto LABEL_12;
  }

  uint64_t v10 = (uint64_t (*)(void))v9[14];
  if (!v10)
  {
    char v21 = "_getGeomErrorPayloadBuffer: No getGeomErrPayloadSelectors exist";
    goto LABEL_11;
  }

  uint64_t v11 = v10();
  uint64_t v19 = sub_10003773C(v9, *(_DWORD *)(v11 + 4), 0, 0, &v32, 0, 1);
  uint64_t v20 = v32;
LABEL_12:
  if (v33 && !qword_1000C4338) {
    sub_100038040((uint64_t)v33);
  }
  if (v19 && v20)
  {
    int v22 = -[NANDInfo_GeomErrorPayloadManager initWithPayloadBuf:bufSize:prevNumErrors:]( objc_alloc(&OBJC_CLASS___NANDInfo_GeomErrorPayloadManager),  "initWithPayloadBuf:bufSize:prevNumErrors:",  v19,  v20,  a1);
    size_t v23 = v22;
    if (v22 && -[NANDInfo_GeomErrorPayloadManager hasNewErrors](v22, "hasNewErrors"))
    {
      -[NANDInfo_GeomErrorPayloadManager parseErrorPayloadBuf:bufSize:](v23, "parseErrorPayloadBuf:bufSize:", v19, v20);
      id v29 = sub_10003A044(0, 1LL, 0LL, v24, v25, v26, v27, v28);
      int v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      -[NANDInfo_GeomErrorPayloadManager populateOtherStats:](v23, "populateOtherStats:", v30);
    }

    goto LABEL_21;
  }

  sub_1000130E0("gatherGeomErrorPayloadData: invalid geom error payload buffer", v12, v13, v14, v15, v16, v17, v18, v32);
  size_t v23 = 0LL;
  if (v19) {
LABEL_21:
  }
    free(v19);
  return v23;
}

void *CopyWhitelistedNANDFTLInfo( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v8 = sub_10003A044(0, 1LL, 0LL, a4, a5, a6, a7, a8);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v8);
  if (v16)
  {
    uint64_t v17 = sub_10003A2B8();
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(v17);
    if (v25) {
      [v16 addEntriesFromDictionary:v25];
    }
    else {
      sub_1000130E0( "CopyWhitelistedNANDFTLInfo: Unable to gather ESR FTL fields",  v18,  v19,  v20,  v21,  v22,  v23,  v24,  v31);
    }
    uint64_t v26 = sub_10003A4B0(v16);
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);

    if (v27)
    {
      [v16 addEntriesFromDictionary:v27];
    }
  }

  else
  {
    sub_1000130E0( "CopyWhitelistedNANDFTLInfo: Unable to gather other FTL fields",  v9,  v10,  v11,  v12,  v13,  v14,  v15,  v31);
  }

  uint64_t v28 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", sub_100013198());
  id v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
  [v16 setObject:v29 forKeyedSubscript:off_1000C4088[0]];

  return v16;
}

id sub_10003A044(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  int v9 = a2;
  int v52 = 0LL;
  uint64_t v53 = 0LL;
  uint64_t v11 = (char **)qword_1000C4338;
  if (qword_1000C4338)
  {
    int v52 = (char **)qword_1000C4338;
  }

  else
  {
    if (!sub_100037EF8(&v52))
    {
      uint64_t v13 = "gatherASPFTLData: Could not get nand_exporter_t";
      goto LABEL_19;
    }

    uint64_t v11 = v52;
  }

  if (!*((_DWORD *)v11 + 4))
  {
    uint64_t v13 = "gatherASPFTLData: No io_connection exist";
LABEL_19:
    sub_1000130E0(v13, a2, a3, a4, a5, a6, a7, a8, (char)v52);
    uint64_t v18 = 0LL;
    goto LABEL_42;
  }

  uint64_t v53 = 0LL;
  if (!v9)
  {
    uint64_t v12 = (uint64_t (*)(void))v11[6];
    if (v12) {
      goto LABEL_11;
    }
    unsigned int v36 = "gatherASPFTLData: No getReadStatsSelectors exist";
LABEL_25:
    sub_1000130E0(v36, a2, a3, a4, a5, a6, a7, a8, (char)v52);
    return 0LL;
  }

  uint64_t v12 = (uint64_t (*)(void))v11[5];
  if (!v12)
  {
    unsigned int v36 = "gatherASPFTLData: No getStatsSelectors exist";
    goto LABEL_25;
  }

  int v8 = 0;
LABEL_11:
  uint64_t v14 = v12();
  uint64_t v15 = sub_10003773C(v52, *(_DWORD *)(v14 + 4), 0, v8, &v53, 0, 0);
  uint64_t v16 = v15;
  if (v15) {
    BOOL v17 = v53 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    uint64_t v18 = 0LL;
    if (!v15) {
      goto LABEL_42;
    }
  }

  else
  {
    uint64_t v19 = (uint64_t *)calloc(1uLL, 0x20uLL);
    if (v19)
    {
      uint64_t v27 = v19;
      if (a1) {
        int v28 = ((uint64_t (*)(uint64_t *, void *, void))v52[19])(v19, v16, v53);
      }
      else {
        int v28 = ((uint64_t (*)(uint64_t *, void *, void))v52[18])(v19, v16, v53);
      }
      if (v28)
      {
        unsigned int v38 = sub_1000406CC(v27, 0LL);
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v38);
        unsigned int v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", *v52));
        unsigned int v40 = [v39 isEqualToString:@"ASPStorage"];

        if (v40) {
          int v41 = &off_1000AD0D8;
        }
        else {
          int v41 = &off_1000AD030;
        }
        objc_msgSend(v18, "setObject:forKeyedSubscript:", v41, @"com.apple.NANDInfo.IsANS1Controller", v52);
        if (v18
          && (id v49 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKey:@"magazineFWVersion_1"]),
              v49,
              v49))
        {
          uint64_t v50 = &off_1000AD0D8;
        }

        else
        {
          sub_1000130E0("Stat Magazine not supported", v42, v43, v44, v45, v46, v47, v48, (char)v52);
          uint64_t v50 = &off_1000AD030;
        }

        [v18 setObject:v50 forKeyedSubscript:@"com.apple.NANDInfo.IsStatMagSupported"];
      }

      else
      {
        sub_1000130E0("gatherASPFTLData: parseFTL failed", v29, v30, v31, v32, v33, v34, v35, (char)v52);
        uint64_t v18 = 0LL;
      }

      unsigned int v51 = v52[20];
      if (v51) {
        ((void (*)(uint64_t *))v51)(v27);
      }
      free(v27);
    }

    else
    {
      sub_1000130E0( "gatherASPFTLData: Could not allocate memory for pcxt.ftlData",  v20,  v21,  v22,  v23,  v24,  v25,  v26,  (char)v52);
      uint64_t v18 = 0LL;
    }
  }

  free(v16);
LABEL_42:
  if (!qword_1000C4338)
  {
    if (v52) {
      sub_100038040((uint64_t)v52);
    }
  }

  return v18;
}

NSMutableDictionary *sub_10003A2B8()
{
  uint64_t v0 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if (qword_1000C4328)
  {
    id v1 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithDictionary:"));
  }

  else
  {
    id v1 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    if (&_CacheDeleteCopyItemizedPurgeableSpaceWithInfo)
    {
      io_connect_t v2 = objc_autoreleasePoolPush();
      uint64_t v3 = (const __CFDictionary *)CacheDeleteCopyItemizedPurgeableSpaceWithInfo(&off_1000BD268);
      if (v3)
      {
        uint64_t v11 = v3;
        if (!CFDictionaryGetValue(v3, @"com.apple.NANDInfo.CacheDelete.Error"))
        {
          uint64_t v12 = v11;
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary objectForKey:](v12, "objectForKey:", @"CACHE_DELETE_TOTAL_AVAILABLE"));

          if (v13)
          {
            uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( -[__CFDictionary objectForKeyedSubscript:]( v12,  "objectForKeyedSubscript:",  @"CACHE_DELETE_TOTAL_AVAILABLE"));
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v1,  "setObject:forKeyedSubscript:",  v14,  off_1000C40C0[0]);
          }

          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( -[__CFDictionary objectForKey:]( v12,  "objectForKey:",  @"CACHE_DELETE_NONPURGEABLE_AMOUNT"));

          if (v15)
          {
            uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( -[__CFDictionary objectForKeyedSubscript:]( v12,  "objectForKeyedSubscript:",  @"CACHE_DELETE_NONPURGEABLE_AMOUNT"));
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v1,  "setObject:forKeyedSubscript:",  v16,  off_1000C40C8[0]);
          }
        }

        CFRelease(v11);
      }

      else
      {
        sub_1000130E0( "getCacheDeleteInfo: unable to get output from CacheDeleteCopyItemizedPurgeableSpaceWithInfo",  v4,  v5,  v6,  v7,  v8,  v9,  v10,  v24);
      }

      objc_autoreleasePoolPop(v2);
      BOOL v17 = (void *)qword_1000C4328;
      qword_1000C4328 = (uint64_t)v1;
      uint64_t v18 = v1;

      id v1 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithDictionary:",  qword_1000C4328));
    }
  }

  if (v1) {
    -[NSMutableDictionary addEntriesFromDictionary:](v0, "addEntriesFromDictionary:", v1);
  }
  id v19 = sub_10003D0C0();
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v19);

  if (v20) {
    -[NSMutableDictionary addEntriesFromDictionary:](v0, "addEntriesFromDictionary:", v20);
  }
  uint64_t v21 = sub_10003E848();
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);

  if (v22) {
    -[NSMutableDictionary addEntriesFromDictionary:](v0, "addEntriesFromDictionary:", v22);
  }

  return v0;
}

NSMutableDictionary *sub_10003A4B0(void *a1)
{
  id v1 = a1;
  io_connect_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue( @"StoreDemoMode",  @"com.apple.demo-settings",  &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    BOOL v4 = AppBooleanValue == 0;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v5 = !v4;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v5));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v6, off_1000C4080[0]);

  if (v1)
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"nandDesc"]);

    if (v14)
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"nandDesc"]);
      unint64_t v16 = (unint64_t)[v15 unsignedLongLongValue];

      BOOL v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  (unsigned __int16)v16));
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([off_1000C4158 objectAtIndexedSubscript:0]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v17, v18);

      id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  WORD1(v16)));
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([off_1000C4158 objectAtIndexedSubscript:1]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v19, v20);

      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  WORD2(v16)));
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([off_1000C4158 objectAtIndexedSubscript:2]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v21, v22);

      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  HIWORD(v16)));
      char v24 = (void *)objc_claimAutoreleasedReturnValue([off_1000C4158 objectAtIndexedSubscript:3]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v23, v24);

      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"nandDesc"]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v25, @"nandDesc");
    }

    uint64_t v26 = objc_claimAutoreleasedReturnValue([v1 objectForKey:@"userPartitionStart"]);
    if (v26)
    {
      uint64_t v27 = (void *)v26;
      int v28 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"intermediatePartitionStart"]);

      if (v28)
      {
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"userPartitionStart"]);
        signed int v30 = [v29 intValue];

        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"intermediatePartitionStart"]);
        signed int v32 = [v31 intValue];

        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v30 - (uint64_t)v32));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v33, off_1000C4108[0]);
      }
    }

    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"utilFormatTime"]);

    if (v34)
    {
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"utilFormatTime"]);
      unsigned int v36 = [v35 intValue];

      if (v36 <= 0x386D4380) {
        unint64_t v37 = 0LL;
      }
      else {
        unint64_t v37 = ((int)v36 - 946684800LL) / 0x93A80uLL;
      }
      unsigned int v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v37));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v38, off_1000C40B8[0]);
    }

    unsigned int v39 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"averageSLCPECycles"]);

    if (v39)
    {
      unsigned int v40 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"averageSLCPECycles"]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v40, off_1000C40A8[0]);
    }

    int v41 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"averageTLCPECycles"]);

    if (v41)
    {
      uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"averageTLCPECycles"]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v42, off_1000C40A0[0]);
    }

    uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"hostWrites"]);

    if (v43)
    {
      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"hostWrites"]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v44, off_1000C40B0[0]);
    }

    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"powerOnHours"]);

    if (v45)
    {
      uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"powerOnHours"]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v46, off_1000C4118[0]);
    }

    uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"powerOnSeconds"]);

    if (v47)
    {
      uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"powerOnSeconds"]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v48, off_1000C4120[0]);
    }

    id v49 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"IND_pool_free"]);

    if (v49)
    {
      uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"IND_pool_free"]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v50, off_1000C4148);
    }

    unsigned int v51 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"IND_pool_count"]);

    if (v51)
    {
      int v52 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"IND_pool_count"]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v52, off_1000C4140[0]);
    }

    unint64_t v53 = 0LL;
    uint64_t v54 = 0LL;
    do
    {
      unsigned int v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"numBootBlockRefreshSuccess_%d",  v54));
      id v56 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v55]);

      if (v56)
      {
        id v57 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"numBootBlockRefreshSuccess_%d",  v54));
        id v58 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v57]);
        unint64_t v59 = (int)[v58 intValue];
      }

      else
      {
        unint64_t v59 = 0LL;
      }

      unsigned int v60 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"numBootBlockRefreshFail_%d",  v54));
      uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v60]);

      if (v61)
      {
        unsigned int v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"numBootBlockRefreshFail_%d",  v54));
        unsigned int v63 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v62]);
        v59 += (int)[v63 intValue];
      }

      if (v59 > v53) {
        unint64_t v53 = v59;
      }
      uint64_t v54 = (v54 + 1);
    }

    while ((_DWORD)v54 != 8);
    int v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v53));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v64, off_1000C4100[0]);

    v65 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"mspBootBlockCountPerMsp"]);
    if (v65)
    {
      uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"mspBootBlockCountPerMsp"]);
      uint64_t v67 = (int)[v66 intValue];

      uint64_t v68 = 0LL;
      uint64_t v69 = 0LL;
      uint64_t v70 = 8LL;
      do
      {
        double v71 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockReadFails_%llu",  v68));
        unsigned int v72 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v71]);

        if (v72)
        {
          v73 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockReadFails_%llu",  v68));
          int v74 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v73]);
          v69 += (int)[v74 intValue];
        }

        v68 += v67;
        --v70;
      }

      while (v70);
      BOOL v75 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v69));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v75, off_1000C40D0[0]);

      uint64_t v76 = 0LL;
      uint64_t v77 = 8LL;
      do
      {
        id v78 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockReadFails_%llu",  v70 + 1));
        int v79 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v78]);

        if (v79)
        {
          int v80 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockReadFails_%llu",  v70));
          uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v80]);
          v76 += (int)[v81 intValue];
        }

        uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockReadFails_%llu",  v70 + 2));
        v83 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v82]);

        if (v83)
        {
          id v84 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockReadFails_%llu",  v70));
          id v85 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v84]);
          v76 += (int)[v85 intValue];
        }

        id v86 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockReadFails_%llu",  v70 + 3));
        uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v86]);

        if (v87)
        {
          uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockReadFails_%llu",  v70));
          v89 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v88]);
          v76 += (int)[v89 intValue];
        }

        v70 += v67;
        --v77;
      }

      while (v77);
      uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v76));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v90, off_1000C40D8[0]);

      uint64_t v91 = 0LL;
      uint64_t v92 = 8LL;
      do
      {
        unsigned int v93 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockProgFails_%llu",  v77));
        uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v93]);

        if (v94)
        {
          unsigned __int8 v95 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockProgFails_%llu",  v77));
          uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v95]);
          v91 += (int)[v96 intValue];
        }

        v77 += v67;
        --v92;
      }

      while (v92);
      int v97 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v91));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v97, off_1000C40E0[0]);

      uint64_t v98 = 0LL;
      uint64_t v99 = 8LL;
      do
      {
        uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockProgFails_%llu",  v92 + 1));
        int v101 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v100]);

        if (v101)
        {
          uint64_t v102 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockProgFails_%llu",  v92));
          v103 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v102]);
          v98 += (int)[v103 intValue];
        }

        uint64_t v104 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockProgFails_%llu",  v92 + 2));
        v105 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v104]);

        if (v105)
        {
          uint64_t v106 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockProgFails_%llu",  v92));
          v107 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v106]);
          v98 += (int)[v107 intValue];
        }

        uint64_t v108 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockProgFails_%llu",  v92 + 3));
        v109 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v108]);

        if (v109)
        {
          uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockProgFails_%llu",  v92));
          v111 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v110]);
          v98 += (int)[v111 intValue];
        }

        v92 += v67;
        --v99;
      }

      while (v99);
      id v112 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v98));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v112, off_1000C40E8[0]);

      uint64_t v113 = 0LL;
      uint64_t v114 = 8LL;
      do
      {
        uint64_t v115 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockEraseFails_%llu",  v99));
        uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v115]);

        if (v116)
        {
          uint64_t v117 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockEraseFails_%llu",  v99));
          v118 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v117]);
          v113 += (int)[v118 intValue];
        }

        v99 += v67;
        --v114;
      }

      while (v114);
      uint64_t v119 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v113));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v119, off_1000C40F0[0]);

      uint64_t v120 = 0LL;
      uint64_t v121 = 8LL;
      do
      {
        uint64_t v122 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockEraseFails_%llu",  v114 + 1));
        uint64_t v123 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v122]);

        if (v123)
        {
          v124 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockEraseFails_%llu",  v114));
          uint64_t v125 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v124]);
          v120 += (int)[v125 intValue];
        }

        v126 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockEraseFails_%llu",  v114 + 2));
        uint64_t v127 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v126]);

        if (v127)
        {
          v128 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockEraseFails_%llu",  v114));
          uint64_t v129 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v128]);
          v120 += (int)[v129 intValue];
        }

        v130 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockEraseFails_%llu",  v114 + 3));
        uint64_t v131 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v130]);

        if (v131)
        {
          v132 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"mspBootBlockEraseFails_%llu",  v114));
          uint64_t v133 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v132]);
          v120 += (int)[v133 intValue];
        }

        v114 += v67;
        --v121;
      }

      while (v121);
      v134 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v120));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v134, off_1000C40F8[0]);
    }
  }

  else
  {
    sub_1000130E0("gatherASPFTLOtherData_Stats: ftlDict is NULL", v7, v8, v9, v10, v11, v12, v13, v136);
  }

  return v2;
}

NSMutableDictionary *CopySMagHistoryNANDFTLInfo(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = &AnalyticsIsEventUsed_ptr;
  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  &off_1000AD030,  @"com.apple.NANDInfo.IsStatMagSupported");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  @"NA",  @"BuildInSM");
  id v13 = sub_10003A044(0, 1LL, 0LL, v8, v9, v10, v11, v12);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  uint64_t v20 = v14;
  if (a2 | a1)
  {
    id v21 = sub_10003A044(0, 0LL, a1, v15, v16, v17, v18, v19);
    id v22 = (id)objc_claimAutoreleasedReturnValue(v21);
  }

  else
  {
    id v22 = v14;
  }

  signed int v30 = (NSMutableDictionary *)v22;
  uint64_t v147 = v7;
  if (a1 >= a2)
  {
    sub_1000130E0( "CopySMagHistoryNANDFTLInfo: parameters must satisfy lookBackTimeHours1 < lookBackTimeHours2 for deltas",  v23,  v24,  v25,  v26,  v27,  v28,  v29,  v143);
    uint64_t v87 = v30;
  }

  else
  {
    id v31 = sub_10003A044(0, 0LL, a2, v25, v26, v27, v28, v29);
    signed int v32 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(v31);
    uint64_t v33 = v32;
    uint64_t v145 = v20;
    if (v32)
    {
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v32, "objectForKey:", @"osBuildStr"));

      if (v34)
      {
        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v33, "objectForKey:", @"osBuildStr"));
        unsigned int v36 = sub_10003F330((uint64_t)[v35 unsignedLongLongValue]);
        unint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v37, @"BuildInSM");
      }

      unsigned int v38 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v33, "objectForKey:", @"magazineInstanceMeta"));

      if (v38)
      {
        unsigned int v39 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v33, "objectForKey:", @"magazineInstanceMeta"));
        unsigned int v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  ((unint64_t)[v39 unsignedLongLongValue] >> 24)));
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v33,  "setObject:forKeyedSubscript:",  v40,  @"ESR_magazineTimeStamp");
      }
    }

    if (!v30) {
      goto LABEL_46;
    }
    int v41 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v30, "objectForKey:", @"magazineInstanceMeta"));

    if (v41)
    {
      uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v30, "objectForKey:", @"magazineInstanceMeta"));
      uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  ((unint64_t)[v42 unsignedLongLongValue] >> 24)));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v30,  "setObject:forKeyedSubscript:",  v43,  @"ESR_magazineTimeStamp");

      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKey:]( v30,  "objectForKey:",  @"com.apple.NANDInfo.IsStatMagSupported"));
      if (v44)
      {
        uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKey:]( v30,  "objectForKey:",  @"com.apple.NANDInfo.IsStatMagSupported"));
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  v45,  @"com.apple.NANDInfo.IsStatMagSupported");
      }
    }

    if (v33)
    {
      uint64_t v46 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v30, "objectForKey:", @"ESR_magazineTimeStamp"));
      if (v46)
      {
        uint64_t v54 = (void *)v46;
        unsigned int v55 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v33, "objectForKey:", @"ESR_magazineTimeStamp"));

        if (v55)
        {
          id v56 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v30, "objectForKey:", @"ESR_magazineTimeStamp"));
          id v57 = [v56 unsignedLongLongValue];
          id v58 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v33, "objectForKey:", @"ESR_magazineTimeStamp"));
          double v59 = (double)(unint64_t)(v57 - (_BYTE *)[v58 unsignedLongLongValue]) / 86400.0;

          unsigned int v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v59));
          -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v60, off_1000C4110[0]);

          __int128 v151 = 0u;
          __int128 v152 = 0u;
          __int128 v149 = 0u;
          __int128 v150 = 0u;
          char v144 = v30;
          uint64_t v61 = v30;
          id v62 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v61,  "countByEnumeratingWithState:objects:count:",  &v149,  v153,  16LL);
          if (!v62) {
            goto LABEL_44;
          }
          id v63 = v62;
          uint64_t v64 = *(void *)v150;
          unsigned int v146 = a3 & 0xFFFFFFFD;
          unsigned int v148 = a3 - 1;
          while (1)
          {
            for (uint64_t i = 0LL; i != v63; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v150 != v64) {
                objc_enumerationMutation(v61);
              }
              uint64_t v66 = *(void *)(*((void *)&v149 + 1) + 8LL * (void)i);
              uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v33, "objectForKey:", v66));
              if (v67) {
                goto LABEL_25;
              }
              uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v61, "objectForKey:", v66));
              uint64_t v69 = objc_opt_class(&OBJC_CLASS___NSNumber);
              char isKindOfClass = objc_opt_isKindOfClass(v68, v69);

              if ((isKindOfClass & 1) != 0)
              {
                uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v61, "objectForKey:", v66));
                -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v67, v66);
LABEL_25:
              }

              uint64_t v71 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v33, "objectForKey:", v66));
              if (v71)
              {
                unsigned int v72 = (void *)v71;
                uint64_t v73 = objc_claimAutoreleasedReturnValue([off_1000C4078 objectForKey:v66]);
                if (!v73) {
                  goto LABEL_34;
                }
                int v74 = (void *)v73;
                BOOL v75 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v33, "objectForKey:", v66));
                uint64_t v76 = objc_opt_class(&OBJC_CLASS___NSNumber);
                char v77 = objc_opt_isKindOfClass(v75, v76);

                uint64_t v7 = v147;
                if ((v77 & 1) != 0)
                {
                  if (v59 <= 0.0)
                  {
                    id v78 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v33, "objectForKey:", v66));
                    id v81 = [v78 unsignedLongLongValue];
                  }

                  else
                  {
                    id v78 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v61, "objectForKey:", v66));
                    int v79 = [v78 unsignedLongLongValue];
                    int v80 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v33, "objectForKey:", v66));
                    id v81 = (id)(v79 - (_BYTE *)[v80 unsignedLongLongValue]);

                    uint64_t v7 = v147;
                  }

                  if (!v146)
                  {
                    unsigned int v72 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  (double)(unint64_t)v81));
                    -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v72, v66);
LABEL_34:
                  }
                }
              }

              uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue([off_1000C4070[0] objectForKey:v66]);
              if (v82)
              {

                if (v148 <= 1)
                {
                  v83 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v33, "objectForKey:", v66));

                  if (v83)
                  {
                    id v84 = v33;
                  }

                  else
                  {
                    id v85 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v61, "objectForKey:", v66));

                    if (!v85) {
                      continue;
                    }
                    id v84 = v61;
                  }

                  id v86 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v84, "objectForKey:", v66));
                  -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v86, v66);
                }
              }
            }

            id v63 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v61,  "countByEnumeratingWithState:objects:count:",  &v149,  v153,  16LL);
            if (!v63)
            {
LABEL_44:

              signed int v30 = v144;
              uint64_t v6 = &AnalyticsIsEventUsed_ptr;
              goto LABEL_48;
            }
          }
        }
      }

      sub_1000130E0( "CopySMagHistoryNANDFTLInfo: Unable to gather other stats magazine deltas",  v47,  v48,  v49,  v50,  v51,  v52,  v53,  v143);
    }

    else
    {
LABEL_46:
      -[NSMutableDictionary addEntriesFromDictionary:](v7, "addEntriesFromDictionary:", v33);
    }

LABEL_48:
    uint64_t v87 = v7;
    uint64_t v20 = v145;
  }

  uint64_t v88 = sub_10003A2B8();
  uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue(v88);
  if (v96) {
    -[NSMutableDictionary addEntriesFromDictionary:](v87, "addEntriesFromDictionary:", v96);
  }
  else {
    sub_1000130E0( "CopySMagHistoryNANDFTLInfo: Unable to gather ESR FTL fields",  v89,  v90,  v91,  v92,  v93,  v94,  v95,  v143);
  }
  int v97 = sub_10003A4B0(v20);
  uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue(v97);

  if (v98) {
    -[NSMutableDictionary addEntriesFromDictionary:](v87, "addEntriesFromDictionary:", v98);
  }
  else {
    sub_1000130E0( "CopySMagHistoryNANDFTLInfo: Unable to gather ESR FTL fields",  v99,  v100,  v101,  v102,  v103,  v104,  v105,  v143);
  }
  uint64_t v106 = v87;
  id v107 = v20;
  id v108 = objc_alloc_init((Class)v6[44]);
  if ((!v106 || -[NSMutableDictionary count](v106, "count")) && (!v107 || [v107 count]))
  {
    uint64_t v109 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v106, "objectForKey:", @"bandErases"));
    if (!v109) {
      goto LABEL_66;
    }
    uint64_t v110 = (void *)v109;
    uint64_t v111 = objc_claimAutoreleasedReturnValue([v107 objectForKey:@"numVirtualBlocks"]);
    if (v111)
    {
      id v112 = (void *)v111;
      uint64_t v113 = (void *)objc_claimAutoreleasedReturnValue([v107 objectForKey:@"userPartitionStart"]);

      if (!v113) {
        goto LABEL_66;
      }
      uint64_t v114 = (void *)objc_claimAutoreleasedReturnValue([v107 objectForKey:@"numVirtualBlocks"]);
      uint64_t v115 = [v114 unsignedLongLongValue];
      uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue([v107 objectForKey:@"userPartitionStart"]);
      uint64_t v117 = [v116 unsignedLongLongValue];

      double v118 = 0.0;
      if (v115 != v117)
      {
        uint64_t v119 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v106, "objectForKey:", @"bandErases"));
      }

      uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v118));
      [v108 setObject:v110 forKeyedSubscript:@"averageTLCPECycles"];
      uint64_t v7 = v147;
    }

LABEL_66:
    uint64_t v120 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v106, "objectForKey:", @"intermediateBandErases"));
    if (v120)
    {
      uint64_t v121 = (void *)v120;
      uint64_t v122 = objc_claimAutoreleasedReturnValue([v107 objectForKey:@"userPartitionStart"]);
      if (!v122)
      {
LABEL_72:

        goto LABEL_73;
      }

      uint64_t v123 = (void *)v122;
      v124 = (void *)objc_claimAutoreleasedReturnValue([v107 objectForKey:@"intermediatePartitionStart"]);

      if (v124)
      {
        uint64_t v125 = (void *)objc_claimAutoreleasedReturnValue([v107 objectForKey:@"userPartitionStart"]);
        v126 = [v125 unsignedLongLongValue];
        uint64_t v127 = (void *)objc_claimAutoreleasedReturnValue([v107 objectForKey:@"intermediatePartitionStart"]);
        v128 = [v127 unsignedLongLongValue];

        double v129 = 0.0;
        if (v126 != v128)
        {
          v130 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v106, "objectForKey:", @"intermediateBandErases"));
        }

        uint64_t v121 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v129));
        [v108 setObject:v121 forKeyedSubscript:@"averageSLCPECycles"];
        uint64_t v7 = v147;
        goto LABEL_72;
      }
    }

LABEL_73:
    id v131 = v108;
    goto LABEL_75;
  }

  id v131 = 0LL;
LABEL_75:

  if (v131) {
    -[NSMutableDictionary addEntriesFromDictionary:](v106, "addEntriesFromDictionary:", v131);
  }
  else {
    sub_1000130E0( "CopySMagHistoryNANDFTLInfo: Unable to gather new delta fields",  v132,  v133,  v134,  v135,  v136,  v137,  v138,  v143);
  }
  unsigned int v139 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", sub_100013198());
  v140 = (void *)objc_claimAutoreleasedReturnValue(v139);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v106, "setObject:forKeyedSubscript:", v140, off_1000C4088[0]);

  uint64_t v141 = v106;
  return v141;
}

NSMutableDictionary *CopySMagNANDFTLCustomHistoryInfo(int a1)
{
  io_connect_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v8 = sub_10003A044(0, 0LL, 0LL, v3, v4, v5, v6, v7);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:@"com.apple.NANDInfo.IsStatMagSupported"]);

  if (v10)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:@"com.apple.NANDInfo.IsStatMagSupported"]);
    id v12 = [v11 unsignedLongLongValue];

    if (!v12)
    {
      uint64_t v69 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", sub_100013198());
      id v13 = (id)objc_claimAutoreleasedReturnValue(v69);
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v13,  @"com.apple.NANDInfo.ErrorMessage");
      goto LABEL_50;
    }
  }

  if (a1 || ![off_1000C4150[0] count])
  {
    id v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    goto LABEL_48;
  }

  unint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  uint64_t v15 = 0LL;
  uint64_t v14 = 0LL;
  id v13 = 0LL;
  uint64_t v71 = v2;
  do
  {
    int v74 = v14;
    uint64_t v75 = objc_claimAutoreleasedReturnValue([off_1000C4150[0] objectAtIndexedSubscript:v16]);

    id v23 = sub_10003A044(0, 0LL, (4 * ++v16), v18, v19, v20, v21, v22);
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(v23);

    id v25 = v9;
    id v26 = v24;
    uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v14,  "setObject:forKeyedSubscript:",  &off_1000AD030,  @"com.apple.NANDInfo.IsStatMagSupported");
    uint64_t v76 = v25;
    char v77 = v26;
    if (!v25)
    {
      uint64_t v17 = (void *)v75;
      uint64_t v28 = &AnalyticsIsEventUsed_ptr;
      if (!v26) {
        goto LABEL_36;
      }
LABEL_13:
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKey:@"magazineInstanceMeta"]);

      if (!v29) {
        goto LABEL_36;
      }
      goto LABEL_14;
    }

    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKey:@"magazineInstanceMeta"]);
    uint64_t v28 = &AnalyticsIsEventUsed_ptr;
    if (!v27)
    {
      uint64_t v17 = (void *)v75;
      if (!v26) {
        goto LABEL_36;
      }
      goto LABEL_13;
    }

LABEL_14:
    unint64_t v72 = v16;
    signed int v30 = (void *)objc_claimAutoreleasedReturnValue([v76 objectForKey:@"com.apple.NANDInfo.IsStatMagSupported"]);

    if (v30)
    {
      id v31 = (void *)objc_claimAutoreleasedReturnValue([v76 objectForKey:@"com.apple.NANDInfo.IsStatMagSupported"]);
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v14,  "setObject:forKeyedSubscript:",  v31,  @"com.apple.NANDInfo.IsStatMagSupported");
    }

    id v32 = v76;
    id v33 = v26;
    if (v76
      && (uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKey:@"magazineInstanceMeta"]),
          v34,
          v34))
    {
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKey:@"magazineInstanceMeta"]);
      uint64_t v36 = ((unint64_t)[v35 unsignedLongLongValue] >> 24);
    }

    else
    {
      uint64_t v36 = 0LL;
    }

    double v37 = 0.0;
    uint64_t v73 = v15;
    if (v33)
    {
      unsigned int v38 = (void *)objc_claimAutoreleasedReturnValue([v33 objectForKey:@"magazineInstanceMeta"]);

      if (v38)
      {
        unsigned int v39 = (void *)objc_claimAutoreleasedReturnValue([v33 objectForKey:@"magazineInstanceMeta"]);
        unint64_t v40 = (unint64_t)[v39 unsignedLongLongValue] >> 24;

        double v37 = (double)(v36 - v40) / 86400.0;
      }
    }

    int v41 = (void *)objc_claimAutoreleasedReturnValue([v28[46] numberWithDouble:v37]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v14, "setObject:forKeyedSubscript:", v41, off_1000C4110[0]);

    __int128 v80 = 0u;
    __int128 v81 = 0u;
    __int128 v78 = 0u;
    __int128 v79 = 0u;
    id v42 = v33;
    id v43 = [v42 countByEnumeratingWithState:&v78 objects:v82 count:16];
    if (v43)
    {
      id v44 = v43;
      uint64_t v45 = *(void *)v79;
      do
      {
        for (uint64_t i = 0LL; i != v44; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v79 != v45) {
            objc_enumerationMutation(v42);
          }
          uint64_t v47 = *(void *)(*((void *)&v78 + 1) + 8LL * (void)i);
          uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKey:v47]);

          if (v48)
          {
            double v49 = 0.0;
            if (v37 > 0.0)
            {
              uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKey:v47]);
              uint64_t v51 = objc_opt_class(v28[46]);
              char isKindOfClass = objc_opt_isKindOfClass(v50, v51);

              if ((isKindOfClass & 1) != 0)
              {
                uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKey:v47]);
                uint64_t v54 = [v53 unsignedLongLongValue];
                unsigned int v55 = (void *)objc_claimAutoreleasedReturnValue([v42 objectForKey:v47]);
                double v49 = (double)(unint64_t)(v54 - (_BYTE *)[v55 unsignedLongLongValue]);

                uint64_t v28 = &AnalyticsIsEventUsed_ptr;
              }
            }

            id v56 = (void *)objc_claimAutoreleasedReturnValue([v28[46] numberWithDouble:v49]);
            -[NSMutableDictionary setObject:forKeyedSubscript:](v14, "setObject:forKeyedSubscript:", v56, v47);
          }
        }

        id v44 = [v42 countByEnumeratingWithState:&v78 objects:v82 count:16];
      }

      while (v44);
    }

    id v57 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", sub_100013198());
    id v58 = (void *)objc_claimAutoreleasedReturnValue(v57);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v14, "setObject:forKeyedSubscript:", v58, off_1000C4088[0]);

    io_connect_t v2 = v71;
    unint64_t v16 = v72;
    uint64_t v15 = v73;
    uint64_t v17 = (void *)v75;
LABEL_36:

    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", &off_1000AD030, v17);
    double v59 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v14, "objectForKey:", @"gcWrites"));

    if (v59)
    {
      unsigned int v60 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v14, "objectForKey:", @"gcWrites"));
      id v61 = [v60 unsignedLongLongValue];

      if (v61)
      {
        double v62 = 1.0;
        uint64_t v63 = 1LL;
        while (1)
        {
          uint64_t v64 = v15;
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"vcurve_%d",  v63));

          v65 = (void *)objc_claimAutoreleasedReturnValue([v77 objectForKey:v15]);
          if (v65)
          {
            uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue([v77 objectForKey:v15]);
            id v67 = [v66 unsignedLongLongValue];

            if (v15) {
              double v62 = v62 - (double)(uint64_t)v67 * ((double)(int)v63 * -0.033 + 1.0);
            }
          }

          if (v62 <= 0.0) {
            break;
          }
          uint64_t v63 = (v63 + 1);
          if ((_DWORD)v63 == 32)
          {
            LODWORD(v63) = 32;
            break;
          }
        }

        uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue([v28[46] numberWithDouble:1.0 / ((double)(int)v63 * -0.033 + 1.0)]);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v68, v17);
      }
    }

    id v13 = v77;

    uint64_t v9 = v13;
  }

  while ((unint64_t)[off_1000C4150[0] count] > v16);

  uint64_t v9 = v13;
LABEL_48:

LABEL_50:
  return v2;
}

NSMutableDictionary *CopyWhitelistedNANDMSPInfo()
{
  uint64_t v0 = &AnalyticsIsEventUsed_ptr;
  uint64_t v120 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v8 = &unk_1000C4000;
  uint64_t v9 = (char **)qword_1000C4338;
  uint64_t v10 = &AnalyticsIsEventUsed_ptr;
  if (qword_1000C4338)
  {
    uint64_t v125 = (char **)qword_1000C4338;
  }

  else
  {
    if (!sub_100037EF8(&v125))
    {
      id v33 = "gatherASPMSPData: Could not get nand_exporter_t";
      goto LABEL_16;
    }

    uint64_t v9 = v125;
  }

  uint64_t v11 = (uint64_t (*)(void))v9[7];
  if (!v11 || !v9[17])
  {
    id v33 = "gatherASPMSPData: Controller does not support MSP data";
LABEL_16:
    sub_1000130E0(v33, v1, v2, v3, v4, v5, v6, v7, v116);
    uint64_t v14 = 0LL;
    goto LABEL_17;
  }

  uint64_t v12 = v11();
  if (!*((_DWORD *)v125 + 4))
  {
    id v33 = "gatherASPMSPData: No io_connection exist";
    goto LABEL_16;
  }

  uint64_t v13 = v12;
  uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v15 = calloc(1uLL, 0x10uLL);
  if (!v15)
  {
    sub_1000130E0("gatherASPMSPData: Memory allocation issue!", v16, v17, v18, v19, v20, v21, v22, v116);
    goto LABEL_17;
  }

  id v23 = v15;
  unsigned int v24 = 0;
  v15[8] = 0;
  while (1)
  {
    uint64_t v126 = 0LL;
    id v25 = sub_10003773C(v125, *(_DWORD *)(v13 + 4), 0, v24, &v126, 0, 1);
    if (!v25) {
      break;
    }
    free(v25);
    if (++v24 == 9)
    {
      v23[8] = 9;
      goto LABEL_48;
    }
  }

  v23[8] = v24;
  if (v24)
  {
LABEL_48:
    id v85 = (char *)calloc(v24, 0x20uLL);
    if (v85)
    {
      id v86 = v85;
      *(void *)id v23 = v85;
      if (!v23[8])
      {
        id v108 = 0LL;
LABEL_72:
        free(v86);
        goto LABEL_73;
      }

      double v118 = v14;
      uint64_t v87 = 0LL;
      unint64_t v88 = 0LL;
      uint64_t v89 = 0LL;
      while (1)
      {
        uint64_t v126 = 0LL;
        uint64_t v90 = sub_10003773C(v125, *(_DWORD *)(v13 + 4), 0, v88, &v126, 0, 0);
        if (!v90)
        {
          sub_1000130E0( "gatherASPMSPData: getNANDMSPBuffer tunnel command failed !",  v91,  v92,  v93,  v94,  v95,  v96,  v97,  v116);
          goto LABEL_63;
        }

        uint64_t v98 = v90;
        BOOL v106 = v88 < v23[8];
        id v107 = sub_1000406CC((uint64_t *)(*(void *)v23 + v87), 0LL);
        id v108 = (void *)objc_claimAutoreleasedReturnValue(v107);

        char v116 = v88;
        uint64_t v109 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%d"));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v118, "setObject:forKeyedSubscript:", v108, v109);

        uint64_t v110 = v125[20];
        if (v110) {
          ((void (*)(uint64_t))v110)(*(void *)v23 + v87);
        }
        v86 += 32 * v106;
        free(v98);
        ++v88;
        unint64_t v111 = v23[8];
        v87 += 32LL;
        uint64_t v89 = v108;
        uint64_t v0 = &AnalyticsIsEventUsed_ptr;
        if (v88 >= v111)
        {
          id v8 = (void *)&unk_1000C4000;
          goto LABEL_65;
        }
      }

      sub_1000130E0("gatherASPMSPData: parseMSP failed !", v99, v100, v101, v102, v103, v104, v105, v116);
      free(v98);
LABEL_63:
      id v8 = (void *)&unk_1000C4000;
      goto LABEL_64;
    }

    double v118 = v14;
    id v112 = "gatherASPMSPData: Could not allocate memory for genericPCxt";
  }

  else
  {
    double v118 = v14;
    id v112 = "gatherASPMSPData: Unable to gather any NAND MSP fields";
  }

  sub_1000130E0(v112, v26, v27, v28, v29, v30, v31, v32, v116);
  uint64_t v89 = 0LL;
LABEL_64:
  LODWORD(v111) = v23[8];
  id v108 = v89;
LABEL_65:
  uint64_t v14 = v118;
  if ((_DWORD)v111)
  {
    uint64_t v113 = 0LL;
    unint64_t v114 = 0LL;
    do
    {
      if (*(void *)v23)
      {
        uint64_t v115 = v125[20];
        if (v115)
        {
          ((void (*)(uint64_t))v115)(*(void *)v23 + v113);
          LODWORD(v111) = v23[8];
        }
      }

      ++v114;
      v113 += 32LL;
    }

    while (v114 < v111);
  }

  id v86 = *(char **)v23;
  uint64_t v10 = &AnalyticsIsEventUsed_ptr;
  if (*(void *)v23) {
    goto LABEL_72;
  }
LABEL_73:
  free(v23);

LABEL_17:
  if (!v8[103] && v125) {
    sub_100038040((uint64_t)v125);
  }
  if (v14)
  {
    int v41 = sub_10003CAC8();
    double v49 = (void *)objc_claimAutoreleasedReturnValue(v41);
    if (!v49) {
      sub_1000130E0( "CopyWhitelistedNANDMSPInfo: Unable to gather ESR MSP fields",  v42,  v43,  v44,  v45,  v46,  v47,  v48,  v116);
    }
    __int128 v123 = 0u;
    __int128 v124 = 0u;
    __int128 v121 = 0u;
    __int128 v122 = 0u;
    uint64_t v117 = v14;
    uint64_t v50 = v14;
    id v51 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v50,  "countByEnumeratingWithState:objects:count:",  &v121,  v127,  16LL);
    if (v51)
    {
      id v52 = v51;
      uint64_t v53 = 0LL;
      uint64_t v54 = *(void *)v122;
      uint64_t v119 = v49;
      do
      {
        for (uint64_t i = 0LL; i != v52; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v122 != v54) {
            objc_enumerationMutation(v50);
          }
          uint64_t v56 = *(void *)(*((void *)&v121 + 1) + 8LL * (void)i);
          id v57 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v50, "objectForKey:", v56));
          uint64_t v58 = objc_opt_class(v0[44]);
          if ((objc_opt_isKindOfClass(v57, v58) & 1) != 0)
          {
            double v59 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v50, "objectForKey:", v56));
            uint64_t v60 = objc_opt_class(&OBJC_CLASS___NSDictionary);
            char isKindOfClass = objc_opt_isKindOfClass(v59, v60);

            uint64_t v0 = &AnalyticsIsEventUsed_ptr;
            if ((isKindOfClass & 1) != 0)
            {
              double v62 = objc_alloc(&OBJC_CLASS___NSMutableDictionary);
              uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v50, "objectForKey:", v56));
              uint64_t v64 = -[NSMutableDictionary initWithDictionary:](v62, "initWithDictionary:", v63);

              uint64_t v53 = v64;
              unint64_t v72 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
              if (v53)
              {
                uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v53, "objectForKey:", off_1000C4258));

                if (v73)
                {
                  int v74 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v53, "objectForKey:", off_1000C4258));
                  unint64_t v75 = (unint64_t)[v74 unsignedLongLongValue];

                  uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  (unsigned __int16)v75));
                  -[NSMutableDictionary setObject:forKeyedSubscript:]( v72,  "setObject:forKeyedSubscript:",  v76,  off_1000C4260);

                  char v77 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  WORD1(v75)));
                  -[NSMutableDictionary setObject:forKeyedSubscript:]( v72,  "setObject:forKeyedSubscript:",  v77,  off_1000C4268);

                  __int128 v78 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  WORD2(v75)));
                  -[NSMutableDictionary setObject:forKeyedSubscript:]( v72,  "setObject:forKeyedSubscript:",  v78,  off_1000C4270);

                  double v49 = v119;
                  unint64_t v79 = HIWORD(v75);
                  uint64_t v0 = &AnalyticsIsEventUsed_ptr;
                  __int128 v80 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v79));
                  -[NSMutableDictionary setObject:forKeyedSubscript:]( v72,  "setObject:forKeyedSubscript:",  v80,  off_1000C4278);
                }
              }

              else
              {
                sub_1000130E0( "gatherMSPOtherData: Unable to gather other MSP data",  v65,  v66,  v67,  v68,  v69,  v70,  v71,  v116);
              }

              -[NSMutableDictionary addEntriesFromDictionary:](v53, "addEntriesFromDictionary:", v72);
              if (v49 && v53) {
                -[NSMutableDictionary addEntriesFromDictionary:](v53, "addEntriesFromDictionary:", v49);
              }
              -[NSMutableDictionary setObject:forKeyedSubscript:](v120, "setObject:forKeyedSubscript:", v53, v56);
            }
          }

          else
          {
          }
        }

        id v52 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v50,  "countByEnumeratingWithState:objects:count:",  &v121,  v127,  16LL);
      }

      while (v52);
    }

    else
    {
      uint64_t v53 = 0LL;
    }

    uint64_t v10 = &AnalyticsIsEventUsed_ptr;
    uint64_t v14 = v117;
  }

  else
  {
    sub_1000130E0("CopyWhitelistedNANDMSPInfo: Unable to gather MSP fields", v34, v35, v36, v37, v38, v39, v40, v116);
    uint64_t v53 = 0LL;
  }

  id v81 = [v10[48] stringWithUTF8String:sub_100013198()];
  uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue(v81);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v120, "setObject:forKeyedSubscript:", v82, off_1000C4088[0]);

  v83 = v120;
  return v83;
}

NSMutableDictionary *sub_10003CAC8()
{
  uint64_t v0 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v6 = sub_10003A044(0, 1LL, 0LL, v1, v2, v3, v4, v5);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v15 = v7;
  if (v7)
  {
    uint64_t v16 = sub_10003A4B0(v7);
    uint64_t v17 = objc_claimAutoreleasedReturnValue(v16);
    if (v17)
    {
      uint64_t v18 = (void *)v17;
      __int128 v30 = 0u;
      __int128 v31 = 0u;
      __int128 v28 = 0u;
      __int128 v29 = 0u;
      uint64_t v19 = off_1000C41A8;
      id v20 = [v19 countByEnumeratingWithState:&v28 objects:v32 count:16];
      if (v20)
      {
        id v21 = v20;
        uint64_t v22 = *(void *)v29;
        do
        {
          for (uint64_t i = 0LL; i != v21; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v29 != v22) {
              objc_enumerationMutation(v19);
            }
            uint64_t v24 = *(void *)(*((void *)&v28 + 1) + 8LL * (void)i);
            id v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKey:", v24, (void)v28));

            if (v25)
            {
              uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:v24]);
              -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v26, v24);
            }
          }

          id v21 = [v19 countByEnumeratingWithState:&v28 objects:v32 count:16];
        }

        while (v21);
      }
    }
  }

  else
  {
    sub_1000130E0("gatherASPOtherData: Unable to get FTL stats", v8, v9, v10, v11, v12, v13, v14, v28);
  }

  return v0;
}

NSMutableDictionary *CopyWhitelistedStorageStats()
{
  uint64_t v0 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v1 = sub_10003CAC8();
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:off_1000C40B8[0]]);

    if (v4)
    {
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:off_1000C40B8[0]]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v5, off_1000C40B8[0]);
    }

    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:off_1000C4098[0]]);

    if (v6)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:off_1000C4098[0]]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v7, off_1000C4098[0]);
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:off_1000C40A8[0]]);

    if (v8)
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:off_1000C40A8[0]]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v9, off_1000C40A8[0]);
    }

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:off_1000C40A0[0]]);

    if (v10)
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:off_1000C40A0[0]]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v11, off_1000C40A0[0]);
    }

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:off_1000C40B0[0]]);

    if (v12)
    {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:off_1000C40B0[0]]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v13, off_1000C40B0[0]);
    }

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:off_1000C4090[0]]);

    if (v14)
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:off_1000C4090[0]]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v15, off_1000C4090[0]);
    }
  }

  uint64_t v16 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  sub_10003E56C(1682065731LL));
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v17, off_1000C4160[0]);

  uint64_t v18 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  sub_10003E56C(1682723912LL));
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v19, off_1000C4168[0]);

  id v20 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  sub_10003E724(1768322865LL));
  id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v21, off_1000C4188[0]);

  uint64_t v22 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  sub_10003E724(1682065731LL));
  id v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v23, off_1000C4170[0]);

  uint64_t v24 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  sub_10003E724(1682723912LL));
  id v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v25, off_1000C4198[0]);

  uint64_t v26 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  sub_10003E724(1682138727LL));
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v27, off_1000C4178[0]);

  __int128 v28 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  sub_10003E724(1715693159LL));
  __int128 v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v29, off_1000C4180[0]);

  __int128 v30 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  sub_10003E724(1852139127LL));
  __int128 v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v31, off_1000C41A0);

  uint64_t v32 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  sub_10003E724(1280329037LL));
  id v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v33, off_1000C4190[0]);

  if (!v0) {
    sub_1000130E0( "CopyWhitelistedNANDFTLInfo: Unable to gather other FTL fields",  v34,  v35,  v36,  v37,  v38,  v39,  v40,  v44);
  }
  int v41 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", sub_100013198());
  uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v42, off_1000C4088[0]);

  return v0;
}

id sub_10003D0C0()
{
  if (qword_1000C4330)
  {
    uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithDictionary:](&OBJC_CLASS___NSDictionary, "dictionaryWithDictionary:"));
  }

  else
  {
    uint64_t v1 = sub_10003EF60();
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
    uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 objectForKey:@"swapins"]);
    if (v3)
    {
      uint64_t v4 = (void *)v3;
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"vm.pagesize"]);

      if (v5)
      {
        id v6 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"swapins"]);
        id v7 = [v6 longLongValue];
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"vm.pagesize"]);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  (void)[v8 longLongValue] * (void)v7));
        [v2 setObject:v9 forKeyedSubscript:off_1000C4128[0]];
      }
    }

    uint64_t v10 = objc_claimAutoreleasedReturnValue([v2 objectForKey:@"swapouts"]);
    if (v10)
    {
      uint64_t v11 = (void *)v10;
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"vm.pagesize"]);

      if (v12)
      {
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"swapouts"]);
        id v14 = [v13 longLongValue];
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"vm.pagesize"]);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  (void)[v15 longLongValue] * (void)v14));
        [v2 setObject:v16 forKeyedSubscript:off_1000C4130[0]];
      }
    }

    uint64_t v17 = sub_10003ED68();
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v17));
    [v2 setObject:v18 forKeyedSubscript:@"ESR_DaysSinceLastSWUpdate"];

    else {
      uint64_t v19 = &off_1000AD0D8;
    }
    [v2 setObject:v19 forKeyedSubscript:@"ESR_Gt2WeeksSinceSWUpdate"];
    sub_10003EE24();
    id v20 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", sub_10003EE24());
    id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    [v2 setObject:v21 forKeyedSubscript:@"ESR_WeeksSinceLastSWRestore"];

    uint64_t v22 = (void *)qword_1000C4330;
    qword_1000C4330 = (uint64_t)v2;
    id v23 = v2;

    uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithDictionary:",  qword_1000C4330));
  }

  return v0;
}

NSMutableArray *LogStorageUIDatatoCA(void *a1, int a2)
{
  uint64_t v2 = sub_10003F394(a1);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v15 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v4 = v3;
  id v5 = [v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v19;
    do
    {
      for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v19 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v18 + 1) + 8LL * (void)i);
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472LL;
        v17[2] = sub_10003D5E0;
        v17[3] = &unk_10008C9E0;
        v17[4] = v9;
        if ((sub_10003D540((uint64_t)off_1000C4218, v17) & 1) != 0)
        {
          if (a2) {
            -[NSMutableArray addObject:](v15, "addObject:", v9);
          }
        }

        else
        {
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( [@"/Library/Caches/com.apple.xbs/Sources/EmbeddedStorageReporting_libs/NANDInfo/NANDInfo.m" lastPathComponent]);
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "LogStorageUIDatatoCA"));
          NSLog(@"%@: %@: FAILED to log %@ using AnalyticsSendEventLazy\n", v10, v11, off_1000C4218);
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }

    while (v6);
  }

  if (a2)
  {
    uint64_t v12 = v15;
    uint64_t v13 = v15;
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v12 = v15;
  }

  return v13;
}

uint64_t sub_10003D540(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v11 = v3;
  if (&_AnalyticsSendEventLazy)
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_10003E474;
    v15[3] = &unk_10008CA08;
    id v16 = v3;
    uint64_t v12 = AnalyticsSendEventLazy(a1, v15);
  }

  else
  {
    sub_1000130E0("AnalyticsSendEventLazy SPI does not exist", v4, v5, v6, v7, v8, v9, v10, v14);
    uint64_t v12 = 0LL;
  }

  return v12;
}

id sub_10003D5E0(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

NSMutableDictionary *sub_10003D5E8()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  context = objc_autoreleasePoolPush();
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v120 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v3 = sub_10003EF60();
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v0 objectForKey:@"previous_xnustats_dict"]);

  if (v5)
  {
    __int128 v122 = (void *)objc_claimAutoreleasedReturnValue([v0 objectForKey:@"previous_xnustats_dict"]);
  }

  else
  {
    [v0 setObject:v4 forKey:@"previous_xnustats_dict"];
    [v0 synchronize];
    __int128 v122 = 0LL;
  }

  __int128 v121 = v2;
  if (!v4)
  {
    uint64_t v8 = 0LL;
    goto LABEL_88;
  }

  uint64_t v115 = v1;
  char v116 = v0;
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  @"current",  @"ESR_Cadence");
  __int128 v145 = 0u;
  __int128 v146 = 0u;
  __int128 v143 = 0u;
  __int128 v144 = 0u;
  id v6 = [&off_1000BD378 countByEnumeratingWithState:&v143 objects:v152 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = 0LL;
    uint64_t v9 = *(void *)v144;
    do
    {
      for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v144 != v9) {
          objc_enumerationMutation(&off_1000BD378);
        }
        uint64_t v11 = *(void **)(*((void *)&v143 + 1) + 8LL * (void)i);
        uint64_t v12 = objc_claimAutoreleasedReturnValue([v4 objectForKey:v11]);
        if (v12)
        {
          uint64_t v13 = (void *)v12;
          char v14 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v11]);
          uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSNumber);
          char isKindOfClass = objc_opt_isKindOfClass(v14, v15);

          if ((isKindOfClass & 1) != 0)
          {
            uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( [v11 stringByReplacingOccurrencesOfString:@"." withString:@"_"]);
            uint64_t v18 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"host_vm_info64_%@",  v17));

            __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v11]);
            -[NSMutableDictionary setObject:forKeyedSubscript:](v121, "setObject:forKeyedSubscript:", v19, v18);

            uint64_t v8 = (void *)v18;
          }
        }
      }

      id v7 = [&off_1000BD378 countByEnumeratingWithState:&v143 objects:v152 count:16];
    }

    while (v7);
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  __int128 v141 = 0u;
  __int128 v142 = 0u;
  __int128 v139 = 0u;
  __int128 v140 = 0u;
  id v20 = [&off_1000BD360 countByEnumeratingWithState:&v139 objects:v151 count:16];
  if (v20)
  {
    id v21 = v20;
    uint64_t v22 = *(void *)v140;
    do
    {
      for (uint64_t j = 0LL; j != v21; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v140 != v22) {
          objc_enumerationMutation(&off_1000BD360);
        }
        uint64_t v24 = *(void **)(*((void *)&v139 + 1) + 8LL * (void)j);
        id v25 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v24]);
        uint64_t v26 = objc_opt_class(&OBJC_CLASS___NSNumber);
        char v27 = objc_opt_isKindOfClass(v25, v26);

        if ((v27 & 1) != 0)
        {
          __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([v24 stringByReplacingOccurrencesOfString:@"." withString:@"_"]);
          uint64_t v29 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"sysctl_%@", v28));

          __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v24]);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v121, "setObject:forKeyedSubscript:", v30, v29);

          uint64_t v8 = (void *)v29;
        }
      }

      id v21 = [&off_1000BD360 countByEnumeratingWithState:&v139 objects:v151 count:16];
    }

    while (v21);
  }

  __int128 v137 = 0u;
  __int128 v138 = 0u;
  __int128 v135 = 0u;
  __int128 v136 = 0u;
  id v31 = [&off_1000BD348 countByEnumeratingWithState:&v135 objects:v150 count:16];
  if (v31)
  {
    id v32 = v31;
    uint64_t v33 = *(void *)v136;
    do
    {
      for (uint64_t k = 0LL; k != v32; uint64_t k = (char *)k + 1)
      {
        if (*(void *)v136 != v33) {
          objc_enumerationMutation(&off_1000BD348);
        }
        uint64_t v35 = *(void **)(*((void *)&v135 + 1) + 8LL * (void)k);
        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v35]);

        if (v36)
        {
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v35 stringByReplacingOccurrencesOfString:@"." withString:@"_"]);
          uint64_t v38 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"sysctl_%@", v37));

          uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v35]);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v121, "setObject:forKeyedSubscript:", v39, v38);

          uint64_t v8 = (void *)v38;
        }
      }

      id v32 = [&off_1000BD348 countByEnumeratingWithState:&v135 objects:v150 count:16];
    }

    while (v32);
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v121,  "setObject:forKeyedSubscript:",  &off_1000AD030,  @"ESR_deltaDays");
  if (!v122)
  {
    uint64_t v1 = v115;
    goto LABEL_64;
  }

  double v118 = v8;
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v120,  "setObject:forKeyedSubscript:",  @"daily",  @"ESR_Cadence");
  __int128 v133 = 0u;
  __int128 v134 = 0u;
  __int128 v131 = 0u;
  __int128 v132 = 0u;
  id v40 = [&off_1000BD378 countByEnumeratingWithState:&v131 objects:v149 count:16];
  if (v40)
  {
    id v41 = v40;
    uint64_t v42 = *(void *)v132;
    do
    {
      for (uint64_t m = 0LL; m != v41; uint64_t m = (char *)m + 1)
      {
        if (*(void *)v132 != v42) {
          objc_enumerationMutation(&off_1000BD378);
        }
        char v44 = *(void **)(*((void *)&v131 + 1) + 8LL * (void)m);
        uint64_t v45 = objc_claimAutoreleasedReturnValue([v122 objectForKey:v44]);
        if (v45)
        {
          uint64_t v46 = (void *)v45;
          uint64_t v47 = objc_claimAutoreleasedReturnValue([v4 objectForKey:v44]);
          if (v47)
          {
            uint64_t v48 = (void *)v47;
            double v49 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v44]);
            uint64_t v50 = objc_opt_class(&OBJC_CLASS___NSNumber);
            char v51 = objc_opt_isKindOfClass(v49, v50);

            if ((v51 & 1) == 0) {
              continue;
            }
            id v52 = (void *)objc_claimAutoreleasedReturnValue( [v44 stringByReplacingOccurrencesOfString:@"." withString:@"_"]);
            uint64_t v53 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"host_vm_info64_%@",  v52));

            uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v44]);
            uint64_t v54 = [v46 unsignedLongLongValue];
            unsigned int v55 = (void *)objc_claimAutoreleasedReturnValue([v122 objectForKey:v44]);
            uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  v54 - (_BYTE *)[v55 unsignedLongLongValue]));
            -[NSMutableDictionary setObject:forKeyedSubscript:](v120, "setObject:forKeyedSubscript:", v56, v53);

            double v118 = (void *)v53;
          }
        }
      }

      id v41 = [&off_1000BD378 countByEnumeratingWithState:&v131 objects:v149 count:16];
    }

    while (v41);
  }

  __int128 v129 = 0u;
  __int128 v130 = 0u;
  __int128 v127 = 0u;
  __int128 v128 = 0u;
  id v57 = [&off_1000BD360 countByEnumeratingWithState:&v127 objects:v148 count:16];
  if (!v57)
  {
    uint64_t v8 = v118;
    goto LABEL_66;
  }

  id v58 = v57;
  uint64_t v59 = *(void *)v128;
  uint64_t v8 = v118;
  do
  {
    uint64_t v60 = 0LL;
    id v119 = v58;
    do
    {
      if (*(void *)v128 != v59) {
        objc_enumerationMutation(&off_1000BD360);
      }
      id v61 = *(void **)(*((void *)&v127 + 1) + 8LL * (void)v60);
      uint64_t v62 = objc_claimAutoreleasedReturnValue([v122 objectForKey:v61]);
      if (v62)
      {
        uint64_t v63 = (void *)v62;
        uint64_t v64 = objc_claimAutoreleasedReturnValue([v4 objectForKey:v61]);
        if (!v64) {
          goto LABEL_58;
        }
        uint64_t v65 = (void *)v64;
        uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v61]);
        uint64_t v67 = objc_opt_class(&OBJC_CLASS___NSNumber);
        char v68 = objc_opt_isKindOfClass(v66, v67);

        if ((v68 & 1) != 0)
        {
          uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue([v61 stringByReplacingOccurrencesOfString:@"." withString:@"_"]);
          uint64_t v70 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"sysctl_%@", v69));

          uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v61]);
          uint64_t v71 = [v63 unsignedLongLongValue];
          unint64_t v72 = (void *)objc_claimAutoreleasedReturnValue([v122 objectForKey:v61]);
          uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  v71 - (_BYTE *)[v72 unsignedLongLongValue]));
          -[NSMutableDictionary setObject:forKeyedSubscript:](v120, "setObject:forKeyedSubscript:", v73, v70);

          uint64_t v8 = (void *)v70;
          id v58 = v119;
LABEL_58:

          goto LABEL_60;
        }

        id v58 = v119;
      }

LABEL_60:
      uint64_t v60 = (char *)v60 + 1;
    }

    while (v58 != v60);
    id v58 = [&off_1000BD360 countByEnumeratingWithState:&v127 objects:v148 count:16];
  }

  while (v58);
LABEL_66:
  __int128 v125 = 0u;
  __int128 v126 = 0u;
  __int128 v123 = 0u;
  __int128 v124 = 0u;
  id v74 = [&off_1000BD348 countByEnumeratingWithState:&v123 objects:v147 count:16];
  if (v74)
  {
    id v75 = v74;
    uint64_t v76 = *(void *)v124;
    do
    {
      for (uint64_t n = 0LL; n != v75; uint64_t n = (char *)n + 1)
      {
        if (*(void *)v124 != v76) {
          objc_enumerationMutation(&off_1000BD348);
        }
        __int128 v78 = *(void **)(*((void *)&v123 + 1) + 8LL * (void)n);
        unint64_t v79 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v78]);

        if (v79)
        {
          __int128 v80 = (void *)objc_claimAutoreleasedReturnValue([v78 stringByReplacingOccurrencesOfString:@"." withString:@"_"]);
          uint64_t v81 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"sysctl_%@", v80));

          uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v78]);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v120, "setObject:forKeyedSubscript:", v82, v81);

          uint64_t v8 = (void *)v81;
        }
      }

      id v75 = [&off_1000BD348 countByEnumeratingWithState:&v123 objects:v147 count:16];
    }

    while (v75);
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v120,  "setObject:forKeyedSubscript:",  &off_1000AD030,  @"ESR_onSameBuild");
  uint64_t v83 = objc_claimAutoreleasedReturnValue([v122 objectForKey:@"kern.osrevision"]);
  if (v83)
  {
    id v84 = (void *)v83;
    id v85 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"kern.osrevision"]);

    if (v85)
    {
      id v86 = (void *)objc_claimAutoreleasedReturnValue([v122 objectForKey:@"kern.osrevision"]);
      uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"kern.osrevision"]);

      if (v86 == v87) {
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v120,  "setObject:forKeyedSubscript:",  &off_1000AD0D8,  @"ESR_onSameBuild");
      }
    }
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v120,  "setObject:forKeyedSubscript:",  &off_1000AD030,  @"ESR_didReset");
  uint64_t v88 = objc_claimAutoreleasedReturnValue([v122 objectForKey:@"unix_epoch"]);
  uint64_t v1 = v115;
  uint64_t v0 = v116;
  if (v88)
  {
    uint64_t v89 = (void *)v88;
    uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"unix_epoch"]);

    if (v90)
    {
      uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"unix_epoch"]);
      uint64_t v92 = [v91 unsignedLongLongValue];
      uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue([v122 objectForKey:@"unix_epoch"]);
      uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( NSNumber,  "numberWithDouble:",  (double)(unint64_t)(v92 - (_BYTE *)[v93 unsignedLongLongValue]) / 86400.0));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v120,  "setObject:forKeyedSubscript:",  v94,  @"ESR_deltaDays");

      uint64_t v95 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v120,  "objectForKeyedSubscript:",  @"ESR_deltaDays"));
      LODWORD(v93) = [v95 intValue];

      if ((int)v93 >= 3) {
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v120,  "setObject:forKeyedSubscript:",  &off_1000AD078,  @"ESR_deltaDays");
      }
      uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"bootTime"]);

      if (v96)
      {
        uint64_t v97 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"bootTime"]);
        id v98 = [v97 unsignedLongLongValue];
        uint64_t v99 = (void *)objc_claimAutoreleasedReturnValue([v122 objectForKey:@"unix_epoch"]);
        if (v98 <= [v99 unsignedLongLongValue])
        {
        }

        else
        {
          uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"bootTime"]);
          id v101 = [v100 unsignedLongLongValue];
          uint64_t v102 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"unix_epoch"]);
          id v103 = [v102 unsignedLongLongValue];

          if (v101 < v103) {
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v120,  "setObject:forKeyedSubscript:",  &off_1000AD0D8,  @"ESR_didReset");
          }
LABEL_64:
          uint64_t v0 = v116;
        }
      }
    }
  }

                  id v52 = (char *)v52 + 1;
                }

                while (v49 != v52);
                uint64_t v66 = [v47 countByEnumeratingWithState:&v154 objects:v171 count:16];
                double v49 = v66;
                if (!v66)
                {
LABEL_88:

                  if ((v28 & 1) != 0)
                  {
LABEL_89:
                    ++v127;
                    uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", v50));
                    -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v67,  @"third_party_sorting_key");

                    char v68 = v120;
                  }

                  else
                  {
                    char v68 = v136;
                  }

                  goto LABEL_91;
                }
              }
            }

            if (v28)
            {
              uint64_t v50 = 0LL;
              goto LABEL_89;
            }

            char v68 = v136;
LABEL_91:
            -[NSMutableArray addObject:](v68, "addObject:", v2);
            id v21 = v23 + 1;
          }

          while ((id)(v23 + 1) != v134);
          uint64_t v69 = [v122 countByEnumeratingWithState:&v158 objects:v172 count:16];
          __int128 v134 = v69;
          if (!v69)
          {
LABEL_95:

            uint64_t v17 = v127;
            break;
          }
        }
      }

      if ([v138 isEqualToString:@"device-disks"])
      {
        __int128 v152 = 0u;
        uint64_t v153 = 0u;
        __int128 v150 = 0u;
        __int128 v151 = 0u;
        id v119 = (id)objc_claimAutoreleasedReturnValue([obj objectForKeyedSubscript:v138]);
        __int128 v123 = [v119 countByEnumeratingWithState:&v150 objects:v170 count:16];
        if (v123)
        {
          __int128 v140 = 0;
          __int128 v121 = *(void *)v151;
          __int128 v128 = v17;
          do
          {
            for (uint64_t i = 0LL; i != v123; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v151 != v121) {
                objc_enumerationMutation(v119);
              }
              uint64_t v71 = *(void **)(*((void *)&v150 + 1) + 8LL * (void)i);
              unint64_t v72 = (void *)objc_claimAutoreleasedReturnValue([v71 objectForKey:@"device-volumes"]);

              if (v72)
              {
                __int128 v126 = i;
                uint64_t v73 = -[NSSortDescriptor initWithKey:ascending:]( objc_alloc(&OBJC_CLASS___NSSortDescriptor),  "initWithKey:ascending:",  @"device-used",  0LL);

                unsigned int v148 = 0u;
                __int128 v149 = 0u;
                __int128 v146 = 0u;
                uint64_t v147 = 0u;
                id v74 = (void *)objc_claimAutoreleasedReturnValue([v71 objectForKeyedSubscript:@"device-volumes"]);
                __int128 v124 = v73;
                v168 = v73;
                id v75 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v168,  1LL));
                uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue([v74 sortedArrayUsingDescriptors:v75]);

                __int128 v135 = v76;
                char v77 = [v76 countByEnumeratingWithState:&v146 objects:v169 count:16];
                if (v77)
                {
                  __int128 v78 = v77;
                  unint64_t v79 = 0LL;
                  __int128 v80 = *(void *)v147;
                  do
                  {
                    uint64_t v81 = 0LL;
                    uint64_t v82 = v2;
                    do
                    {
                      if (*(void *)v147 != v80) {
                        objc_enumerationMutation(v135);
                      }
                      uint64_t v83 = *(void **)(*((void *)&v146 + 1) + 8LL * (void)v81);
                      uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);

                      id v84 = (void *)objc_claimAutoreleasedReturnValue([v71 objectForKey:@"device-disk-internal"]);
                      if (v84)
                      {
                        id v85 = (void *)objc_claimAutoreleasedReturnValue([v71 objectForKeyedSubscript:@"device-disk-internal"]);
                        -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v85,  @"is_app_clip");
                      }

                      else
                      {
                        -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  &off_1000AD168,  @"is_app_clip");
                      }

                      -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v138,  @"s_type");
                      id v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v140));
                      -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v86,  @"s_name");

                      uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  (char *)v81 + v79));
                      -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v87,  @"s_id");

                      -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v137,  @"icloud_plan");
                      uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue([v83 objectForKey:@"device-used"]);

                      if (v88)
                      {
                        uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue([v83 objectForKeyedSubscript:@"device-used"]);
                        -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v89,  @"used_space");
                      }

                      uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue([v83 objectForKey:@"device-available"]);

                      if (v90)
                      {
                        uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue([v83 objectForKeyedSubscript:@"device-available"]);
                        -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v91,  @"available_space");
                      }

                      uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue([v83 objectForKey:@"device-available"]);

                      if (v92)
                      {
                        uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue([v83 objectForKeyedSubscript:@"device-purgeable"]);
                        -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v93,  @"purgeable_space");
                      }

                      -[NSMutableArray addObject:](v136, "addObject:", v2);
                      uint64_t v81 = (char *)v81 + 1;
                      uint64_t v82 = v2;
                    }

                    while (v78 != v81);
                    __int128 v78 = [v135 countByEnumeratingWithState:&v146 objects:v169 count:16];
                    unint64_t v79 = (v79 + (_DWORD)v81);
                  }

                  while (v78);
                }

                uint64_t v17 = v128;
                uint64_t i = v126;
              }

              ++v140;
            }

            __int128 v123 = [v119 countByEnumeratingWithState:&v150 objects:v170 count:16];
          }

          while (v123);
        }
      }

      uint64_t v18 = v117 + 1;
    }

    while ((id)(v117 + 1) != v116);
    char v116 = [obj countByEnumeratingWithState:&v162 objects:v173 count:16];
  }

  while (v116);

  if ((_DWORD)v17)
  {
    uint64_t v94 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);

    -[NSMutableDictionary setObject:forKeyedSubscript:]( v94,  "setObject:forKeyedSubscript:",  @"categories",  @"s_type");
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v94,  "setObject:forKeyedSubscript:",  @"third_party_sum",  @"s_name");
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v94,  "setObject:forKeyedSubscript:",  @"third_party_sum",  @"s_id");
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v94,  "setObject:forKeyedSubscript:",  @"third_party_sum",  @"vendor");
    uint64_t v95 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v141));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v94, "setObject:forKeyedSubscript:", v95, @"app_space");

    uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v133));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v94, "setObject:forKeyedSubscript:", v96, @"data_space");

    uint64_t v97 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v132));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v94,  "setObject:forKeyedSubscript:",  v97,  @"purgeable_space");

    id v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v131));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v94, "setObject:forKeyedSubscript:", v98, @"total_space");

    uint64_t v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v130));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v94,  "setObject:forKeyedSubscript:",  v99,  @"ext_purgeable_space");

    uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v129));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v94,  "setObject:forKeyedSubscript:",  v100,  @"ext_total_space");

    id v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v17));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v94,  "setObject:forKeyedSubscript:",  v101,  @"nof_deferred");

    -[NSMutableArray addObject:](v136, "addObject:", v94);
    uint64_t v102 = -[NSSortDescriptor initWithKey:ascending:]( objc_alloc(&OBJC_CLASS___NSSortDescriptor),  "initWithKey:ascending:",  @"third_party_sorting_key",  0LL);

    __int128 v144 = 0u;
    __int128 v145 = 0u;
    __int128 v142 = 0u;
    __int128 v143 = 0u;
    id v166 = v102;
    id v103 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v166, 1LL));
    id v16 = (id)objc_claimAutoreleasedReturnValue(-[NSMutableArray sortedArrayUsingDescriptors:](v120, "sortedArrayUsingDescriptors:", v103));

    uint64_t v104 = [v16 countByEnumeratingWithState:&v142 objects:v167 count:16];
    if (v104)
    {
      uint64_t v105 = v104;
      BOOL v106 = 0;
      id v107 = *(void *)v143;
LABEL_128:
      id v108 = 0LL;
      if (v106 <= 10) {
        uint64_t v109 = 10;
      }
      else {
        uint64_t v109 = v106;
      }
      uint64_t v110 = (v109 - v106);
      while (1)
      {
        if (*(void *)v143 != v107) {
          objc_enumerationMutation(v16);
        }
        if (v110 == v108) {
          break;
        }
        unint64_t v111 = *(void **)(*((void *)&v142 + 1) + 8 * v108);
        [v111 removeObjectForKey:@"third_party_sorting_key"];
        -[NSMutableArray addObject:](v136, "addObject:", v111);
        if (v105 == (id)++v108)
        {
          uint64_t v105 = [v16 countByEnumeratingWithState:&v142 objects:v167 count:16];
          v106 += v108;
          if (v105) {
            goto LABEL_128;
          }
          break;
        }
      }
    }

    uint64_t v2 = v94;
LABEL_139:

    id v112 = v102;
  }

  else
  {
    id v112 = v124;
  }

  uint64_t v113 = v136;

  return v113;
}

LABEL_88:
  uint64_t v104 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v105 = sub_10003ED68();
  BOOL v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v105));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v104,  "setObject:forKeyedSubscript:",  v106,  @"ESR_DaysSinceLastSWUpdate");

  else {
    id v107 = &off_1000AD0D8;
  }
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v104,  "setObject:forKeyedSubscript:",  v107,  @"ESR_Gt2WeeksSinceSWUpdate");
  sub_10003EE24();
  id v108 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", sub_10003EE24());
  uint64_t v109 = (void *)objc_claimAutoreleasedReturnValue(v108);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v104,  "setObject:forKeyedSubscript:",  v109,  @"ESR_WeeksSinceLastSWRestore");

  if (v120)
  {
    if (v104)
    {
      -[NSMutableDictionary addEntriesFromDictionary:](v120, "addEntriesFromDictionary:", v104);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v1, "setObject:forKeyedSubscript:", v120, @"daily");
      uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:off_1000C4138[0]]);

      if (v110)
      {
        unint64_t v111 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:off_1000C4138[0]]);
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v120,  "setObject:forKeyedSubscript:",  v111,  off_1000C4138[0]);
      }
    }
  }

  if (v121)
  {
    if (v104)
    {
      -[NSMutableDictionary addEntriesFromDictionary:](v121, "addEntriesFromDictionary:", v104);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v1, "setObject:forKeyedSubscript:", v121, @"current");
      id v112 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:off_1000C4138[0]]);

      if (v112)
      {
        uint64_t v113 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:off_1000C4138[0]]);
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v121,  "setObject:forKeyedSubscript:",  v113,  off_1000C4138[0]);
      }
    }
  }

  [v0 setObject:v4 forKey:@"previous_xnustats_dict"];
  [v0 synchronize];
  objc_autoreleasePoolPop(context);

  return v1;
}

uint64_t sub_10003E474(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t SetGeomErrorPayloadCnt(uint64_t result)
{
  dword_1000C4340 = result;
  return result;
}

uint64_t GetGeomErrorPayloadCnt()
{
  return dword_1000C4340;
}

id sub_10003E498(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_10003E4A0(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_10003E4A8(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_10003E4B0(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_10003E4B8(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_10003E4C0(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_10003E4C8(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_10003E4D0(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

BOOL sub_10003E4D8(id a1, NSDictionary *a2)
{
  uint64_t v2 = a2;
  id v3 = off_1000C4220;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10003E55C;
  v6[3] = &unk_10008C9E0;
  id v7 = v2;
  uint64_t v4 = v2;
  LOBYTE(v3) = sub_10003D540((uint64_t)v3, v6);

  return (char)v3;
}

id sub_10003E55C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_10003E564(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

uint64_t sub_10003E56C(uint64_t a1)
{
  uint64_t output = 0LL;
  uint32_t outputCnt = 1;
  *(void *)connectiouint64_t n = 0LL;
  uint64_t v6 = 0LL;
  if ((sub_10003E690(connection) & 1) != 0)
  {
    uint64_t input = a1;
    uint64_t v2 = IOConnectCallMethod(connection[1], 3u, &input, 1u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
    if ((_DWORD)v2)
    {
      NSLog( @"GetImageSize: IOConnectCallMethod failed (key (%u): %c%c%c%c) kernResult:%x\n",  a1,  BYTE3(a1),  BYTE2(a1),  BYTE1(a1),  a1,  v2);
      uint64_t v3 = 0LL;
    }

    else
    {
      uint64_t v3 = output;
    }

    if (connection[1])
    {
      IOServiceClose(connection[1]);
      connection[1] = 0;
    }

    if (connection[0]) {
      IOObjectRelease(connection[0]);
    }
  }

  else
  {
    NSLog( @"GetEANImageSize: Unable to get EAN Io service connection for key (%u): %c%c%c%c\n",  a1,  BYTE3(a1),  BYTE2(a1),  BYTE1(a1),  a1);
    return 0LL;
  }

  return v3;
}

uint64_t sub_10003E690(io_service_t *a1)
{
  uint64_t v2 = IOServiceMatching("AppleNVMeEAN");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v2);
  *a1 = MatchingService;
  if (!MatchingService)
  {
    NSLog(@"getEANConnection: Couldn't find AppleNVMeEAN object\n");
    return 0LL;
  }

  uint64_t v4 = IOServiceOpen(MatchingService, mach_task_self_, 0, a1 + 1);
  if ((_DWORD)v4)
  {
    NSLog(@"getEANConnection: IOServiceOpen on AppleNVMeEAN failed kernResult:%x\n", v4);
    return 0LL;
  }

  return 1LL;
}

uint64_t sub_10003E724(uint64_t a1)
{
  uint64_t output = 0LL;
  uint32_t outputCnt = 1;
  *(void *)connectiouint64_t n = 0LL;
  uint64_t v6 = 0LL;
  if ((sub_10003E690(connection) & 1) != 0)
  {
    uint64_t input = a1;
    uint64_t v2 = IOConnectCallMethod(connection[1], 7u, &input, 1u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
    if ((_DWORD)v2)
    {
      NSLog( @"GetUpdateCount: IOConnectCallMethod failed (key (%u): %c%c%c%c) kernResult:%x\n",  a1,  BYTE3(a1),  BYTE2(a1),  BYTE1(a1),  a1,  v2);
      uint64_t v3 = 0LL;
    }

    else
    {
      uint64_t v3 = output;
    }

    if (connection[1])
    {
      IOServiceClose(connection[1]);
      connection[1] = 0;
    }

    if (connection[0]) {
      IOObjectRelease(connection[0]);
    }
  }

  else
  {
    NSLog( @"GetEANUpdateCount: Unable to get EAN Io service connection for key (%u): %c%c%c%c\n",  a1,  BYTE3(a1),  BYTE2(a1),  BYTE1(a1),  a1);
    return 0LL;
  }

  return v3;
}

NSMutableDictionary *sub_10003E848()
{
  uint64_t v0 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if (statfs("/private/var", &v50))
  {
    unint64_t v1 = 0LL;
    LODWORD(v2) = 0;
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
  }

  else
  {
    uint64_t v5 = v50.f_bavail * v50.f_bsize;
    uint64_t v6 = v50.f_blocks * v50.f_bsize;
    uint64_t v4 = v6 >> 20;
    unint64_t v1 = 10000 * (v6 - v5) / v6;
    uint64_t v3 = v5 >> 20;
    uint64_t v2 = v6 >> 30;
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v3));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v7, off_1000C4290);

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v1));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v8, off_1000C4288);

  unsigned int v9 = 1 << -(char)__clz(v2 - 1);
  if ((_DWORD)v2 == 1) {
    uint64_t v10 = 1LL;
  }
  else {
    uint64_t v10 = v9;
  }
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v10));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v11, off_1000C4280);

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v10));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v12, off_1000C4298);

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v1));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v13, off_1000C42A0);

  char v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v4));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v14, off_1000C42A8);

  uint64_t v15 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v0, "objectForKey:", off_1000C4280));
  if (!v15) {
    goto LABEL_14;
  }
  id v16 = (void *)v15;
  uint64_t v17 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v0, "objectForKey:", off_1000C4288));
  if (!v17) {
    goto LABEL_13;
  }
  uint64_t v18 = (void *)v17;
  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v0, "objectForKey:", off_1000C4280));
  if ((int)[v19 intValue] <= 0)
  {

LABEL_13:
    goto LABEL_14;
  }

  id v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v0, "objectForKey:", off_1000C4288));
  int v21 = [v20 intValue];

  if (v21 >= 1) {
    return v0;
  }
LABEL_14:
  id v23 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v24 = (void *)MGCopyAnswer(@"DiskUsage", 0LL);
  id v25 = v24;
  if (v24)
  {
    uint64_t v26 = kMGQDiskUsageTotalDiskCapacity;
    char v27 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:kMGQDiskUsageTotalDiskCapacity]);

    if (v27)
    {
      __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:v26]);
      uint64_t v29 = (uint64_t)[v28 longLongValue];

      uint64_t v30 = v29 >> 20;
    }

    else
    {
      uint64_t v29 = 0LL;
      uint64_t v30 = 0LL;
    }

    uint64_t v32 = kMGQDiskUsageTotalDataAvailable;
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:kMGQDiskUsageTotalDataAvailable]);

    if (v33)
    {
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:v32]);
      uint64_t v48 = (uint64_t)[v34 longLongValue] >> 20;
    }

    else
    {
      uint64_t v48 = 0LL;
    }

    uint64_t v35 = kMGQDiskUsageAmountDataAvailable;
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKeyedSubscript:", kMGQDiskUsageAmountDataAvailable, v48));

    if (v36)
    {
      uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:v35]);
      uint64_t v31 = (uint64_t)[v37 longLongValue] >> 20;
    }

    else
    {
      uint64_t v31 = 0LL;
    }
  }

  else
  {
    uint64_t v31 = 0LL;
    uint64_t v29 = 0LL;
    uint64_t v30 = 0LL;
    uint64_t v47 = 0LL;
  }

  unsigned int v38 = 1 << -(char)__clz(((unint64_t)v29 >> 30) - 1);
  else {
    uint64_t v39 = v38;
  }
  id v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v39, v47));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v23, "setObject:forKeyedSubscript:", v40, off_1000C4280);

  id v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v39));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v23, "setObject:forKeyedSubscript:", v41, off_1000C4298);

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v23,  "setObject:forKeyedSubscript:",  &off_1000AD168,  off_1000C42A8);
  if (v30 < 1)
  {
    uint64_t v42 = 0LL;
  }

  else
  {
    uint64_t v42 = 10000 * (v30 - v49) / v30;
    uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v30));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v23, "setObject:forKeyedSubscript:", v43, off_1000C42A8);
  }

  char v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v42));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v23, "setObject:forKeyedSubscript:", v44, off_1000C4288);

  uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v31));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v23, "setObject:forKeyedSubscript:", v45, off_1000C4290);

  uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v42));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v23, "setObject:forKeyedSubscript:", v46, off_1000C42A0);

  return v23;
}

uint64_t sub_10003ED68()
{
  CFTypeRef cf = 0LL;
  if (&_MSURetrievePreviousUpdateDate)
  {
    uint64_t v0 = objc_autoreleasePoolPush();
    if (MSURetrievePreviousUpdateDate(&cf))
    {
      unint64_t v1 = (id)cf;
      uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v2 timeIntervalSinceDate:v1];
      uint64_t v4 = (int)(v3 / 86400.0);
    }

    else
    {
      unint64_t v1 = 0LL;
      uint64_t v4 = 0xFFFFFFFFLL;
    }

    objc_autoreleasePoolPop(v0);
    if (cf) {
      CFRelease(cf);
    }
  }

  else
  {
    unint64_t v1 = 0LL;
    uint64_t v4 = 0xFFFFFFFFLL;
  }

  return v4;
}

uint64_t sub_10003EE24()
{
  CFTypeRef cf = 0LL;
  if (&_MSURetrievePreviousRestoreDate)
  {
    uint64_t v0 = objc_autoreleasePoolPush();
    if (MSURetrievePreviousRestoreDate(&cf))
    {
      unint64_t v1 = (id)cf;
      uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v2 timeIntervalSinceDate:v1];
      uint64_t v4 = (int)(v3 / 604800.0);
    }

    else
    {
      unint64_t v1 = 0LL;
      uint64_t v4 = 0xFFFFFFFFLL;
    }

    objc_autoreleasePoolPop(v0);
    if (cf) {
      CFRelease(cf);
    }
  }

  else
  {
    unint64_t v1 = 0LL;
    uint64_t v4 = 0xFFFFFFFFLL;
  }

  return v4;
}

uint64_t sub_10003EEE0()
{
  *(void *)uint64_t v4 = 0x1500000001LL;
  size_t v2 = 16LL;
  sysctl(v4, 2u, &v3, &v2, 0LL, 0LL);
  return v3;
}

NSMutableDictionary *sub_10003EF60()
{
  uint64_t v0 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  size_t v41 = 0LL;
  uint64_t v42 = 0LL;
  mach_msg_type_number_t host_info64_outCnt = 38;
  mach_port_t v1 = mach_host_self();
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  id v2 = [&off_1000BD600 countByEnumeratingWithState:&v30 objects:v45 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v31;
    do
    {
      uint64_t v5 = 0LL;
      do
      {
        if (*(void *)v31 != v4) {
          objc_enumerationMutation(&off_1000BD600);
        }
        uint64_t v6 = *(void **)(*((void *)&v30 + 1) + 8LL * (void)v5);
        size_t v41 = 8LL;
        uint64_t v42 = 0LL;
        id v7 = v6;
        if (!sysctlbyname((const char *)[v7 UTF8String], &v42, &v41, 0, 0))
        {
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v42));
          -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v8, v7);
        }

        uint64_t v5 = (char *)v5 + 1;
      }

      while (v3 != v5);
      id v3 = [&off_1000BD600 countByEnumeratingWithState:&v30 objects:v45 count:16];
    }

    while (v3);
  }

  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id v9 = [&off_1000BD5E8 countByEnumeratingWithState:&v26 objects:v44 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v27;
    do
    {
      uint64_t v12 = 0LL;
      do
      {
        if (*(void *)v27 != v11) {
          objc_enumerationMutation(&off_1000BD5E8);
        }
        uint64_t v13 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)v12);
        size_t v41 = 8LL;
        uint64_t v42 = 0LL;
        id v14 = v13;
        if (!sysctlbyname((const char *)[v14 UTF8String], &v42, &v41, 0, 0))
        {
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v42));
          -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v15, v14);
        }

        uint64_t v12 = (char *)v12 + 1;
      }

      while (v10 != v12);
      id v10 = [&off_1000BD5E8 countByEnumeratingWithState:&v26 objects:v44 count:16];
    }

    while (v10);
  }

  if (!host_statistics64(v1, 4, host_info64_out, &host_info64_outCnt))
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v39));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v16, @"swapins");

    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v40));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v17, @"swapouts");

    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v37));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v0,  "setObject:forKeyedSubscript:",  v18,  @"decompressions");

    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v38));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v19, @"compressions");
  }

  time(&v34);
  id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", v34));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v20, @"unix_epoch");

  time(&v43);
  int v21 = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  (double)(v43 - sub_10003EEE0()) / 3600.0);
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v22, @"ESR_UptimeInHrs");

  id v23 = +[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", sub_10003EEE0());
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v0, "setObject:forKeyedSubscript:", v24, @"bootTime");

  return v0;
}

NSString *sub_10003F330(uint64_t a1)
{
  uint64_t v4 = a1;
  mach_port_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", &v4, 8LL));
  id v2 = -[NSString initWithData:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithData:encoding:", v1, 1LL);

  return v2;
}

NSMutableArray *sub_10003F394(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v136 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  uint64_t v120 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"icloudPlanSize"]);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  @"device",  @"s_type");
  __int128 v137 = (void *)v3;
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v3, @"icloud_plan");
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"execMilliseconds"]);

  if (v4)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"execMilliseconds"]);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v5,  @"time_to_complete");
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"numDefers"]);

  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"numDefers"]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v7, @"nof_deferred");
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"finished"]);

  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"finished"]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v9, @"is_finished");
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"device-purgeable"]);

  if (v10)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"device-purgeable"]);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v11,  @"purgeable_space");
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"device-used"]);

  if (v12)
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"device-used"]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v13, @"used_space");
  }

  id v14 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"inconsistent"]);

  if (v14)
  {
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"inconsistent"]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v15, @"inconsistent");
  }

  -[NSMutableArray addObject:](v136, "addObject:", v2);
  __int128 v164 = 0u;
  __int128 v165 = 0u;
  __int128 v162 = 0u;
  __int128 v163 = 0u;
  id v16 = v1;
  id obj = v16;
  id v116 = [v16 countByEnumeratingWithState:&v162 objects:v173 count:16];
  if (!v116)
  {
    uint64_t v102 = 0LL;
    goto LABEL_139;
  }

  uint64_t v17 = 0LL;
  uint64_t v129 = 0LL;
  uint64_t v130 = 0LL;
  uint64_t v131 = 0LL;
  uint64_t v132 = 0LL;
  uint64_t v133 = 0LL;
  uint64_t v141 = 0LL;
  __int128 v124 = 0LL;
  uint64_t v115 = *(void *)v163;
  do
  {
    uint64_t v18 = 0LL;
    do
    {
      if (*(void *)v163 != v115)
      {
        uint64_t v19 = v18;
        objc_enumerationMutation(obj);
        uint64_t v18 = v19;
      }

      uint64_t v117 = v18;
      id v20 = *(void **)(*((void *)&v162 + 1) + 8 * v18);
      __int128 v138 = v20;
      if ((objc_msgSend(v20, "isEqualToString:", @"apps", v115) & 1) != 0
        || [v20 isEqualToString:@"categories"])
      {
        unsigned int v127 = v17;
        unsigned int v139 = [v20 isEqualToString:@"apps"];
        __int128 v158 = 0u;
        __int128 v159 = 0u;
        __int128 v160 = 0u;
        __int128 v161 = 0u;
        id v122 = (id)objc_claimAutoreleasedReturnValue([obj objectForKeyedSubscript:v20]);
        id v134 = [v122 countByEnumeratingWithState:&v158 objects:v172 count:16];
        if (!v134) {
          goto LABEL_95;
        }
        uint64_t v125 = *(void *)v159;
        while (1)
        {
          uint64_t v21 = 0LL;
          do
          {
            uint64_t v22 = v2;
            if (*(void *)v159 != v125) {
              objc_enumerationMutation(v122);
            }
            uint64_t v23 = v21;
            uint64_t v24 = *(void **)(*((void *)&v158 + 1) + 8 * v21);
            if (v139)
            {
              id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:@"vendor"]);
              uint64_t v26 = objc_opt_class(&OBJC_CLASS___NSString);
              if ((objc_opt_isKindOfClass(v25, v26) & 1) != 0)
              {
                __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:@"vendor"]);
                unsigned int v28 = [v27 isEqualToString:@"Apple Inc."] ^ 1;
              }

              else
              {
                unsigned int v28 = 1;
              }
            }

            else
            {
              unsigned int v28 = 0;
            }

            id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);

            -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v137,  @"icloud_plan");
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v138,  @"s_type");
            __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKey:@"vendor"]);

            if (v29)
            {
              __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:@"vendor"]);
              -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v30,  @"vendor");
            }

            __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKey:@"name"]);

            if (v31)
            {
              __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:@"name"]);
              -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v32,  @"s_name");
            }

            __int128 v33 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKey:@"bundleID"]);

            if (v33)
            {
              time_t v34 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:@"bundleID"]);
              -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v34,  @"s_id");
            }

            uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKey:@"id"]);

            if (v35)
            {
              uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:@"id"]);
              -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v36,  @"s_id");
            }

            uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKey:@"isAppClip"]);

            if (v37)
            {
              uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:@"isAppClip"]);
              -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v38,  @"is_app_clip");
            }

            uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKey:@"total"]);

            if (v39)
            {
              uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:@"total"]);
              -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v40,  @"total_space");
            }

            size_t v41 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKey:@"has-error"]);
            if (v41) {
              char v42 = v139;
            }
            else {
              char v42 = 1;
            }

            if ((v42 & 1) == 0)
            {
              time_t v43 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:@"has-error"]);
              char v44 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [v43 BOOLValue] ^ 1));
              -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v44,  @"is_finished");
            }

            uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKey:@"sizes"]);

            if (v45)
            {
              uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:@"sizes"]);
              __int128 v154 = 0u;
              __int128 v155 = 0u;
              __int128 v156 = 0u;
              __int128 v157 = 0u;
              id v47 = v46;
              id v48 = [v47 countByEnumeratingWithState:&v154 objects:v171 count:16];
              if (!v48)
              {
                uint64_t v50 = 0LL;
                goto LABEL_88;
              }

              id v49 = v48;
              uint64_t v50 = 0LL;
              uint64_t v51 = *(void *)v155;
              while (1)
              {
                id v52 = 0LL;
                do
                {
                  if (*(void *)v155 != v51) {
                    objc_enumerationMutation(v47);
                  }
                  uint64_t v53 = *(void **)(*((void *)&v154 + 1) + 8LL * (void)v52);
                  if (([v53 isEqualToString:@"app"] & 1) != 0
                    || [v53 isEqualToString:@"fixed"])
                  {
                    if (v28)
                    {
                      uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForKeyedSubscript:v53]);
                      v141 += (uint64_t)[v54 unsignedLongLongValue];
                    }

                    unsigned int v55 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForKeyedSubscript:v53]);
                    v50 += (uint64_t)[v55 unsignedLongLongValue];

                    uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForKeyedSubscript:v53]);
                    id v57 = v2;
                    id v58 = v56;
                    uint64_t v59 = @"app_space";
LABEL_59:
                    -[NSMutableDictionary setObject:forKeyedSubscript:](v57, "setObject:forKeyedSubscript:", v58, v59);

                    goto LABEL_60;
                  }

                  if (([v53 isEqualToString:@"data"] & 1) != 0
                    || [v53 isEqualToString:@"dynamic"])
                  {
                    if (v28)
                    {
                      uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForKeyedSubscript:v53]);
                      v133 += (uint64_t)[v60 unsignedLongLongValue];
                    }

                    id v61 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForKeyedSubscript:v53]);
                    v50 += (uint64_t)[v61 unsignedLongLongValue];

                    uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForKeyedSubscript:v53]);
                    id v57 = v2;
                    id v58 = v56;
                    uint64_t v59 = @"data_space";
                    goto LABEL_59;
                  }

                  if ([v53 isEqualToString:@"purgeable"])
                  {
                    if (v28)
                    {
                      uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForKeyedSubscript:v53]);
                      v132 += (uint64_t)[v62 unsignedLongLongValue];
                    }

                    uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForKeyedSubscript:v53]);
                    id v57 = v2;
                    id v58 = v56;
                    uint64_t v59 = @"purgeable_space";
                    goto LABEL_59;
                  }

                  if ([v53 isEqualToString:@"total"])
                  {
                    if (v28)
                    {
                      uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForKeyedSubscript:v53]);
                      v131 += (uint64_t)[v63 unsignedLongLongValue];
                    }

                    uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForKeyedSubscript:v53]);
                    id v57 = v2;
                    id v58 = v56;
                    uint64_t v59 = @"total_space";
                    goto LABEL_59;
                  }

                  if ([v53 isEqualToString:@"extPurgeable"])
                  {
                    if (v28)
                    {
                      uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForKeyedSubscript:v53]);
                      v130 += (uint64_t)[v64 unsignedLongLongValue];
                    }

                    uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForKeyedSubscript:v53]);
                    id v57 = v2;
                    id v58 = v56;
                    uint64_t v59 = @"ext_purgeable_space";
                    goto LABEL_59;
                  }

                  if ([v53 isEqualToString:@"external"])
                  {
                    if (v28)
                    {
                      uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForKeyedSubscript:v53]);
                      v129 += (uint64_t)[v65 unsignedLongLongValue];
                    }

                    uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForKeyedSubscript:v53]);
                    id v57 = v2;
                    id v58 = v56;
                    uint64_t v59 = @"ext_total_space";
                    goto LABEL_59;
                  }

NSMutableDictionary *sub_1000406CC(uint64_t *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v5 = *a1;
  uint64_t v6 = a1[2];
  if (*a1) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    do
    {
      if (!v3
        || (uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v5)),
            unsigned int v9 = [v3 containsObject:v8],
            v8,
            v9))
      {
        id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(v6 + 104)));
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v5));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v10, v11);
      }

      uint64_t v5 = *(void *)(v5 + 112);
      if (!v5) {
        break;
      }
      uint64_t v6 = *(void *)(v6 + 112);
    }

    while (v6);
  }

  return v4;
}

void sub_100041B70(void *a1)
{
  id v1 = __cxa_begin_catch(a1);
  printf("Failed connecting to the passthrough driver. Error=0x%x\n", *v1);
  __cxa_end_catch();
}

void sub_100041BA0(void *a1, void *a2)
{
  id v3 = (os_log_s *)sub_100004E28(a1);
  id v4 = objc_claimAutoreleasedReturnValue([a2 plistPath]);
  int v6 = 136315138;
  id v7 = [v4 UTF8String];
  sub_100004E1C((void *)&_mh_execute_header, v3, v5, "Cannot load plist from %s! Deleting it.", (uint8_t *)&v6);

  sub_100004E10();
}

void sub_100041C38(void *a1, void *a2)
{
  id v3 = (os_log_s *)sub_100004E28(a1);
  id v4 = [@"/private/var/db/NANDTelemetryServices" UTF8String];
  id v5 = objc_claimAutoreleasedReturnValue([a2 localizedFailureReason]);
  int v6 = 136315394;
  id v7 = v4;
  __int16 v8 = 2080;
  id v9 = [v5 UTF8String];
  _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Creating NAND telemetry plist directory %s failed for %s",  (uint8_t *)&v6,  0x16u);
}

void sub_100041D04(void *a1)
{
  id v1 = (os_log_s *)sub_100004E28(a1);
  int v3 = 136315138;
  id v4 = [@"/private/var/db/NANDTelemetryServices" UTF8String];
  sub_100004E1C( (void *)&_mh_execute_header,  v1,  v2,  "Error: plist directory %s exists but is a file! Deleting it.",  (uint8_t *)&v3);

  sub_100004E10();
}

void sub_100041D88()
{
}

void sub_100041DB4()
{
}

void sub_100041DE0()
{
}

void sub_100041E0C()
{
}

void sub_100041E38()
{
}

void sub_100041E64()
{
}

void sub_100041E90()
{
}

void sub_100041EBC()
{
}

void sub_100041EE8()
{
}

void sub_100041F14(void *a1, void *a2)
{
  uint64_t v3 = a1;
  v4[0] = 67109120;
  v4[1] = [a2 spdState];
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid SPD state %u", (uint8_t *)v4, 8u);
}

void sub_100041FAC()
{
}

void sub_100041FD8()
{
}

void sub_100042004(void *a1, void *a2)
{
  uint64_t v3 = a1;
  id v4 = objc_claimAutoreleasedReturnValue([a2 spdFilePath]);
  int v5 = 136315138;
  id v6 = [v4 UTF8String];
  _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Failed to open file path %s",  (uint8_t *)&v5,  0xCu);
}

void sub_1000420B0(int *a1, os_log_s *a2)
{
  int v2 = *a1;
  v3[0] = 67109376;
  v3[1] = v2;
  __int16 v4 = 1024;
  int v5 = 209715200;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Estimated SPD size (%u bytes) larger than allowed (%u bytes)",  (uint8_t *)v3,  0xEu);
}

void sub_100042138()
{
}

void sub_100042164(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "DiagnosticPipeline not supported!", v1, 2u);
}

void sub_1000421A4(uint64_t a1, os_log_s *a2, uint64_t a3)
{
  int v3 = 136315138;
  uint64_t v4 = a1;
  sub_100004E1C((void *)&_mh_execute_header, a2, a3, "Upload error: %s", (uint8_t *)&v3);
}

void sub_100042210(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = a2;
  int v6 = 136315138;
  id v7 = [v3 UTF8String];
  sub_100004E1C((void *)&_mh_execute_header, v4, v5, "Failed to exclude user defaults %s from backup.", (uint8_t *)&v6);
}

void sub_1000422A8(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 134218240;
  uint64_t v4 = a2;
  __int16 v5 = 2048;
  uint64_t v6 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "ERROR: Unexpected state %ld for XPC activity %p",  (uint8_t *)&v3,  0x16u);
  sub_100009DEC();
}

void sub_100042328()
{
}

void sub_10004238C()
{
}

void sub_1000423F0()
{
}

void sub_100042454()
{
}

void sub_1000424B8(uint64_t *a1, os_log_s *a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  int v4 = 134217984;
  uint64_t v5 = v3;
  sub_100004E1C((void *)&_mh_execute_header, a2, a3, "XPC activity %p cannot be deferred!", (uint8_t *)&v4);
  sub_100009DEC();
}

void sub_100042524()
{
}

void sub_100042588(void *a1)
{
  id v2 = [(id)sub_100009E00() xpcActivity];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_100009DE0();
  sub_100009DF4((void *)&_mh_execute_header, v1, v4, "xpc_activity %p already deferred", v5);

  sub_100004E10();
}

void sub_100042610(void *a1)
{
  id v2 = [(id)sub_100009E00() xpcActivity];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_100009DE0();
  sub_100004E1C((void *)&_mh_execute_header, v1, v4, "xpc_activity %p deferred!", v5);

  sub_100004E10();
}

void sub_100042698(void *a1)
{
  id v2 = [(id)sub_100009E00() xpcActivity];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_100009DE0();
  sub_100004E1C((void *)&_mh_execute_header, v1, v4, "xpc_activity %p cannot be deferred", v5);

  sub_100004E10();
}

void sub_100042720(void *a1)
{
  id v2 = [(id)sub_100009E00() xpcActivity];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_100009DE0();
  sub_100004E1C((void *)&_mh_execute_header, v1, v4, "xpc_activity %p cannot be force deferred", v5);

  sub_100004E10();
}

void sub_1000427A8()
{
}

void sub_1000427D4()
{
}

void sub_100042800( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100042864()
{
}

void sub_100042890()
{
}

void sub_1000428BC()
{
}

void sub_1000428E8()
{
}

void sub_100042914()
{
}

void sub_100042940( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000429A4( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100042A08(uint64_t a1, os_log_s *a2)
{
  int v2 = 136315138;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Upload error: %s", (uint8_t *)&v2, 0xCu);
}

void sub_100042A7C(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = a2;
  int v6 = 136315138;
  id v7 = [v3 UTF8String];
  sub_100004E1C((void *)&_mh_execute_header, v4, v5, "Failed to open Directory at %s", (uint8_t *)&v6);

  sub_100004E10();
}

void sub_100042B0C(void *a1, void *a2)
{
  id v3 = a1;
  v4[0] = 67109120;
  v4[1] = [a2 sweepError];
  _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Sweep Failed with error %d.",  (uint8_t *)v4,  8u);
}

void sub_100042BA4(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = objc_claimAutoreleasedReturnValue([a2 blockPath]);
  int v6 = 136315138;
  id v7 = [v4 UTF8String];
  sub_100004E1C((void *)&_mh_execute_header, v3, v5, "Failed to create directory %s.", (uint8_t *)&v6);

  sub_100004E10();
}

void sub_100042C40()
{
}

void sub_100042C6C()
{
}

void sub_100042C98()
{
}

void sub_100042CC4()
{
}

void sub_100042CF0()
{
}

void sub_100042D1C(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  id v4 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString, "stringWithFormat:", @"%@", a2));
  *(_DWORD *)buf = 136315138;
  id v6 = [v4 UTF8String];
  _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "ERROR: tasking info validation failed! info details:\n%s",  buf,  0xCu);
}

void sub_100042DE4(char a1, char a2, os_log_t log)
{
  uint64_t v3 = "True";
  if ((a1 & 1) != 0) {
    id v4 = "False";
  }
  else {
    id v4 = "True";
  }
  if ((a2 & 1) == 0) {
    uint64_t v3 = "False";
  }
  int v5 = 136315394;
  id v6 = v4;
  __int16 v7 = 2080;
  __int16 v8 = v3;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "Device tasked: %s taskingId in Hist:%s.\n",  (uint8_t *)&v5,  0x16u);
}

void sub_100042E88(uint64_t a1, int a2, os_log_t log)
{
  int v3 = 136315394;
  uint64_t v4 = a1;
  __int16 v5 = 1024;
  int v6 = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "DA taskingId %s unexpected decision server reply %d",  (uint8_t *)&v3,  0x12u);
}

void sub_100042F0C(void *a1, void *a2)
{
  sub_100004E10();
}

void sub_100042F80(void *a1, void *a2)
{
  uint64_t v3 = a1;
  id v4 = objc_claimAutoreleasedReturnValue([a2 localizedDescription]);
  [v4 UTF8String];
  sub_100009DE0();
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Error creating radar draft: %s", v5, 0xCu);

  sub_100004E10();
}

void sub_100043020(void *a1, void *a2)
{
  id v3 = sub_100004E28(a1);
  id v4 = objc_claimAutoreleasedReturnValue([a2 localizedDescription]);
  [v4 UTF8String];
  sub_1000119C0((void *)&_mh_execute_header, v5, v6, "DP tasking mark complete error %s", v7, v8, v9, v10, 2u);

  sub_100004E10();
}

void sub_1000430B0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "ERROR: Unsent IOLog directory creation failed!\n",  v1,  2u);
}

void sub_1000430F0(void *a1, void *a2)
{
  id v3 = sub_100004E28(a1);
  id v4 = objc_claimAutoreleasedReturnValue([a2 localizedDescription]);
  [v4 UTF8String];
  sub_1000119C0((void *)&_mh_execute_header, v5, v6, "DP tasking payload fetch error %s", v7, v8, v9, v10, 2u);

  sub_100004E10();
}

void sub_100043180(void *a1, void *a2)
{
  id v3 = (os_log_s *)sub_100004E28(a1);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a2 myTaskingDict]);
  id v5 = objc_claimAutoreleasedReturnValue([v4 description]);
  int v6 = 136315138;
  id v7 = [v5 UTF8String];
  _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Tasking Dict: %s", (uint8_t *)&v6, 0xCu);
}

id objc_msgSend_xpcActivityMgr(void *a1, const char *a2, ...)
{
  return [a1 xpcActivityMgr];
}